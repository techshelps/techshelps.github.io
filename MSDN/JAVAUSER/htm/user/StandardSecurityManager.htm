<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class StandardSecurityManager</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="StandardSecurityManager.htm#com_0003000d0c010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="StandardSecurityManager.htm#com_0003000d0c020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="SecurityExceptionEx.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_psec.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="IAdjustablePermission.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.security</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class StandardSecurityManager</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class StandardSecurityManager extends <B>java.lang.SecurityManager</B>
{
  // Constructors
  public <A HREF="StandardSecurityManager.htm#com_0003000d0c010100">StandardSecurityManager</A>();

  // Methods
  public synchronized void <A HREF="StandardSecurityManager.htm#com_0003000d0c020100">checkAccept</A>(String host, int port);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020200">checkAccess</A>(Thread t);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020300">checkAccess</A>(ThreadGroup g);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020400">checkAwtEventQueueAccess</A>();
  public synchronized void <A HREF="StandardSecurityManager.htm#com_0003000d0c020500">checkConnect</A> (String host, int port);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020600">checkConnect</A>(String host, int port, Object context);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020700">checkCreateClassLoader</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020800">checkDelete</A>(String file);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020900">checkExec</A> (String cmd);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020a00">checkExit</A>(int status);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020b00">checkFileDialog</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020c00">checkLink</A>(String lib);
  public synchronized void <A HREF="StandardSecurityManager.htm#com_0003000d0c020d00">checkListen</A>(int port);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020e00">checkMemberAccess</A>(Class clazz, int which);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c020f00">checkMulticast</A>(InetAddress maddr);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021000">checkMulticast</A>(InetAddress maddr, byte ttl);
  public synchronized void <A HREF="StandardSecurityManager.htm#com_0003000d0c021100">checkMultimedia</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021200">checkPackageAccess</A>(String pkg);
  public static void <A HREF="StandardSecurityManager.htm#com_0003000d0c021300">checkPackageAccessFromClassName</A>(
        String classname);
  public synchronized void <A HREF="StandardSecurityManager.htm#com_0003000d0c021400">checkPackageDefinition</A>(String pkg);
  public static void <A HREF="StandardSecurityManager.htm#com_0003000d0c021500">checkPackageDefinitionFromClassName</A>(
        String classname);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021600">checkPrintJobAccess</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021700">checkPropertiesAccess</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021800">checkPropertyAccess</A>(String key);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021900">checkRead</A>(String file);
  public static void <A HREF="StandardSecurityManager.htm#com_0003000d0c021a00">checkRead</A>(URL url);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021b00">checkRead</A>(String file, Object context);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021c00">checkRead</A>(FileDescriptor fd);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021d00">checkRegistry</A> (int access, String value);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021e00">checkSecurityAccess</A>(String provider);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c021f00">checkSetFactory</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c022000">checkSystemClipboardAccess</A>();
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c022100">checkSystemStreams</A>(int streamID);
  public boolean <A HREF="StandardSecurityManager.htm#com_0003000d0c022200">checkTopLevelWindow</A>(Object window);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c022300">checkWrite</A>(String file);
  public void <A HREF="StandardSecurityManager.htm#com_0003000d0c022400">checkWrite</A> (FileDescriptor fd);
  public Object <A HREF="StandardSecurityManager.htm#com_0003000d0c022500">getSecurityContext</A>();
  public ThreadGroup <A HREF="StandardSecurityManager.htm#com_0003000d0c022600">getThreadGroup</A>();
  public static void <A HREF="StandardSecurityManager.htm#com_0003000d0c022700">installStandardSecurity</A>();
}
</FONT></PRE>
<P>This class defines a security policy that uses the permission model to perform security checks. The <B>StandardSecurityManager</B>.checkXXX methods call the <A HREF="PolicyEngine.htm#com_0003000d09010e00">PolicyEngine.checkPermission</A> methods to do the stack crawl that actually determines whether the specified operation is permitted. 

<PRE><FONT FACE="Courier" SIZE="2"><B>SecurityManager</B>
  |
  +--<B>StandardSecurityManager</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0003000d0c010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000d0c010100">StandardSecurityManager</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public StandardSecurityManager();
</FONT></PRE>
<P><P>Constructs and initializes a <A HREF="StandardSecurityManager.htm">StandardSecurityManager</A> object. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003000d0c020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000d0c020100">checkAccept</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void checkAccept(String host, int port);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can accept a socket connection from the specified host and port. 
<P>The check succeeds only if all the classes found on the call stack possess <A HREF="NetIOPermission.htm#com_0003000e08000000">NetIOPermission</A>s, and if those permissions allow the specified host and port for connections. This method overrides the <B>java.lang.SecurityManager.checkAccept(String,int)</B> method. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>host</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The host. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>port</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The port. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020200">checkAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkAccess(Thread t);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to manipulate the specified thread. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>t</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The thread whose call stack is being checked for permissions. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="ThreadPermission.htm#com_0003000e13000000">ThreadPermission</A>s, and if those permissions allow access to the specified thread. This method overrides the <B>java.lang.SecurityManager.checkAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020300">checkAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkAccess(ThreadGroup g);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to manipulate the specified thread group. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The thread group whose call stack is being checked for permissions. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="ThreadPermission.htm#com_0003000e13000000">ThreadPermission</A>s, and if those permissions allow access to the specified thread group. This method overrides the <B>java.lang.SecurityManager.checkAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020400">checkAwtEventQueueAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkAwtEventQueueAccess();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to access the AWT event queue. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A>s, and those permissions allow access to the AWT event queue. This method overrides the <B>java.lang.SecurityManager.checkAwtEventQueueAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020500">checkConnect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void checkConnect (String host, int port);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can open a socket connection to the specified host on the specified port. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>host</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The host. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>port</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The port. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="NetIOPermission.htm#com_0003000e08000000">NetIOPermission</A>s, and if those permissions allow connections to the specified host and port. This method overrides the <B>java.lang.SecurityManager.checkConnect(String,int)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020600">checkConnect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkConnect(String host, int port, Object context);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can open a socket connection to the specified host on the specified port. This method overrides the <B>java.lang.SecurityManager.checkConnect(String,int)</B> method. 
<P><B>Note</B>  The context parameter is ignored, and this method simply forwards the check to the <B>checkConnect(String host,int port)</B> method. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>host</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The host. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>port</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The port. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>context</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is ignored. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 
<P><B>See Also:</B> <A HREF="StandardSecurityManager.htm#com_0003000d0c020500">checkConnect(String,int)</A> 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020700">checkCreateClassLoader</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkCreateClassLoader();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to create class loader objects. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if the calling code is fully trusted. This method overrides the <B>java.lang.SecurityManager.checkCreateClassLoader</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020800">checkDelete</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkDelete(String file);
</FONT></PRE>
<P><P>Determines whether the specified file can be deleted by the classes active within the current execution context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>file</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The system-dependent filename. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="FileIOPermission.htm#com_0003000e05000000">FileIOPermission</A>s, and if those permissions allow delete access to the specified file. This method overrides the <B>java.lang.SecurityManager.checkDelete(String)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020900">checkExec</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkExec (String cmd);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to execute the specified application. 
<P>The check succeeds only if all of the classes found on the call stack possess <A HREF="ExecutionPermission.htm#com_0003000e03000000">ExecutionPermission</A>s, and if those permissions allow the specified application to be run. This method overrides the <B>java.lang.SecurityManager.checkExec</B> method. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cmd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The application for which permission to execute is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020a00">checkExit</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkExit(int status);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to terminate the Microsoft Win32 VM for Java. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>status</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is ignored. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack are fully trusted. This method overrides the <B>java.lang.SecurityManager.checkExit</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020b00">checkFileDialog</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkFileDialog();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to display and use file dialog boxes (<B>java.awt.FileDialog</B>). 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A>s, and if those permissions allow the creation of file dialog boxes. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020c00">checkLink</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkLink(String lib);
</FONT></PRE>
<P><P>Determines whether the current execution context, based on the calling classes on the call stack, allows the loading of the specified native code library (DLL). 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>lib</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The DLL for which permission to load is checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if the caller is fully trusted system code. This method overrides the <B>java.lang.SecurityManager.checkLink</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020d00">checkListen</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void checkListen(int port);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can wait for connection requests on the specified local port number. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>port</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The local port from which permission to listen is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="NetIOPermission.htm#com_0003000e08000000">NetIOPermission</A>s, and if those permissions allow listening for connections on the specified port. This method overrides the <B>java.lang.SecurityManager.checkListen(int)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020e00">checkMemberAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkMemberAccess(Class clazz, int which);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to use the reflection APIs to access members of the specified type from the specified class. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>clazz</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to which access is being checked. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>which</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of class members to which access is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="ReflectionPermission.htm#com_0003000e0d000000">ReflectionPermission</A>s, and if those permissions allow access to the specified class. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c020f00">checkMulticast</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkMulticast(InetAddress maddr);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to use IP multicast. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>maddr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Internet address. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="NetIOPermission.htm#com_0003000e08000000">NetIOPermission</A>s, and if those permissions allow multicast operations on the specified Internet address. This method overrides the <B>java.lang.SecurityManager.checkMulticast(InetAddress)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021000">checkMulticast</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkMulticast(InetAddress maddr, byte ttl);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to use IP multicast. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>maddr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Internet address. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ttl</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The time to live for the packet. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="NetIOPermission.htm#com_0003000e08000000">NetIOPermission</A>s, and if those permissions allow multicast operations on the specified address. This method overrides the <B>java.lang.SecurityManager.checkMulticast(InetAddress,byte)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021100">checkMultimedia</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void checkMultimedia();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to utilize extended multimedia features. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="MultimediaPermission.htm#com_0003000e07000000">MultimediaPermission</A>s. This method is currently used by the <A href="def_dirx.htm">com.ms.directX</A> APIs. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021200">checkPackageAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkPackageAccess(String pkg);
</FONT></PRE>
<P><P>Determines whether access to classes within the specified package is permitted. Package access is denied if a system property of the form package.restrict.access.packagename exists. This method overrides the <B>java.lang.SecurityManager.checkPackageAccess(String)</B> method. 
<P><B>Note</B>  Because of both the nature of class loaders and the fact that this check is made at load time instead of class resolution time, no specific contextual information can be extrapolated to determine who is attempting to access the specified package. Therefore, this check does not fit into the class-granular permissions model. Its results are based on a global state, so it will always return the same result, independent of the current execution context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pkg</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the package to which access is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if package access is prohibited. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021300">checkPackageAccessFromClassName</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPackageAccessFromClassName(String classname);
</FONT></PRE>
<P><P>If a security manager is installed, checks to see if applets can access classes located in the package that contains a specified class. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>classname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the class from which the package to check is determined. The class name must be separated from the package name (if any) by a dot (.). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="StandardSecurityManager.htm#com_0003000d0c021200">checkPackageAccess</A> method of the current security manager is called to determine whether the package access is allowed. If a security manager is not installed, this method does nothing. If the class name does not specify a package, the call succeeds. 
<P><B>Note</B>  This method requires a full class name. Do not trim off the class name as you would when calling <B>java.lang.SecurityManager.checkPackageAccess</B>. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if access to the package is prohibited. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021400">checkPackageDefinition</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void checkPackageDefinition(String pkg);
</FONT></PRE>
<P><P>Determines whether classes within the specified package can be defined. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pkg</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the package that determines which package to check. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The package definition is denied if a system property of the form package.restrict.definition.packagename exists. This method overrides the <B>java.lang.SecurityManager.checkPackageAccess(String)</B> method. 
<P><B>Note</B>  Because of both the nature of class loaders and the fact that this check is made at load time instead of class resolution time, no specific contextual information can be extrapolated to determine who is attempting to define a class in the specified package. Therefore, this check cannot fit into the class-granular permissions model. This check is based on a global state, and will always return the same result, independent of the current execution context. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the package definition is prohibited. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021500">checkPackageDefinitionFromClassName</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPackageDefinitionFromClassName(String classname);
</FONT></PRE>
<P><P>If a security manager is installed, checks to see if applets can define classes in the package of the specified class name. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>classname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the class that determines which package to check. The class name must be separated from the package name (if any) by dots (.). 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="StandardSecurityManager.htm#com_0003000d0c021400">checkPackageDefinition</A> method of the current security manager is called to determine if the package definition is allowed. If the class name does not specify a package, the call will succeed. If a security manager is not installed, this method does nothing. 
<P><B>Note</B>  This method expects a full class name. Do not trim off the class name as you would when calling <B>java.lang.SecurityManager.checkPackageDefinition</B>. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the package definition is prohibited. 


<P><B>See Also:</B> <A HREF="StandardSecurityManager.htm#com_0003000d0c021400">checkPackageDefinition</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021600">checkPrintJobAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkPrintJobAccess();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to initiate a print job. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A>s, and if those permissions allow printing. This method overrides the <B>java.lang.SecurityManager.checkPrintJobAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021700">checkPropertiesAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkPropertiesAccess();
</FONT></PRE>
<P><P>Determines whether the system properties object can be passed to the caller of the <B>System.getProperties</B> method. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="PropertyPermission.htm#com_0003000e0c000000">PropertyPermission</A>s and if those permissions grant unlimited system properties access. This method overrides the <B>java.lang.SecurityManager.checkPropertiesAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021800">checkPropertyAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkPropertyAccess(String key);
</FONT></PRE>
<P><P>Determines if the specified system property can be read by all the classes within the current execution context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The system property for which read access is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="PropertyPermission.htm#com_0003000e0c000000">PropertyPermission</A>s and those permissions allow read access to the specified property. This method overrides the <B>java.SecurityManager.checkPropertyAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021900">checkRead</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkRead(String file);
</FONT></PRE>
<P><P>Determines whether the specified file can be read by the classes active within the current execution context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>file</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The file for which permission to be read by active classes is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds if all the classes found on the call stack possess <B>FileIOPermission</B>s and those permissions allow read access to the specified file. This method overrides the <B>java.lang.SecurityManager.checkRead(String)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021a00">checkRead</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkRead(URL url);
</FONT></PRE>
<P><P>Determines whether the specified URL can be read by the code in the current execution context. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>url</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The URL for which permission to read is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If the specified URL is a file:// URL, this method performs a <B>checkRead</B>(String file) to determine if the file specified by the URL can be read. Otherwise, this method performs a <A HREF="StandardSecurityManager.htm#com_0003000d0c020500">checkConnect</A>(url.getHost(),url.getPort()) to determine if the the host/port can be connected to. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021b00">checkRead</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkRead(String file, Object context);
</FONT></PRE>
<P><P>Determines whether the specified file and the specified context object can be read by the classes within the current execution context. This method overrides the <B>java.lang.SecurityManager.checkRead</B> method. 
<P><B>Note</B>  The context object must be an <B>URL</B> object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>file</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The system-dependent filename. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>context</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The URL to be checked in addition to the file. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the file is not found. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021c00">checkRead</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkRead(FileDescriptor fd);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can use the specified <B>FileDescriptor</B> object to read from the file it is associated with. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The file descriptor associated with the file from which permission to read is being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack are fully trusted system classes. This method overrides the <B>java.lang.SecurityManager.checkRead(FileDescriptor)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021d00">checkRegistry</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkRegistry (int access, String value);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to perform the specified access to the specified portion of the registry. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>access</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The access type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>value</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The registry key. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="RegistryPermission.htm#com_0003000e0f000000">RegistryPermission</A>s, and if those permissions allow the specified access type onto the specified portion of the registry. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


<P><B>See Also:</B> <A HREF="RegKey.htm">com.ms.lang.RegKey</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021e00">checkSecurityAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkSecurityAccess(String provider);
</FONT></PRE>
<P><P>Determines if classes within the current execution context, based on the call stack of the current thread, are allowed to perform a security provider-related operation (using the <B>java.security</B> classes). 
<P>The check succeeds only if all the classes found on the call stack possess <A HREF="SecurityPermission.htm#com_0003000e11000000">SecurityPermission</A>s. This method overrides the <B>java.lang.SecurityManager.checkSecurityAccess(String)</B> method. 
<P><B>Note</B>  This check is used by the JDK security-related APIs within the <B>java.security</B> classes. It is not directly relevant to the Microsoft&#174; security model. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>provider</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is ignored. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c021f00">checkSetFactory</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkSetFactory();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to install a networking object factory. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack are fully trusted. This method overrides the <B>java.lang.SecurityManager.checkSetFactory</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022000">checkSystemClipboardAccess</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkSystemClipboardAccess();
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, are allowed to access the system Clipboard. 
<P>
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A>s, and if those permissions allow access to the system Clipboard. This method overrides the <B>java.lang.SecurityManager.checkSystemClipboardAccess</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022100">checkSystemStreams</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkSystemStreams(int streamID);
</FONT></PRE>
<P><P>Determines if classes within the current execution context, based on the call stack of the current thread, are allowed to set the specified system stream. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>streamID</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The system stream to set. The value must be one of the following: 
<DL>
<DT>0 
 </DT><DD>Indicates an attempt to set <B>System.in</B> using <B>System.setIn</B>. 
</DD><DT>1 
 </DT><DD>Indicates an attempt to set <A HREF="Service.htm#com_0003001002030009">System.out</A> using <B>System.setOut</B>. 
</DD><DT>2 
 </DT><DD>Indicates an attempt to set <A HREF="Service.htm#com_0003001002030006">System.err</A> using <B>System.setErr</B>. 
</DD></DL>
</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="SystemStreamsPermission.htm#com_0003000e12000000">SystemStreamsPermission</A>s, and if those permissions allow the specified stream to be modified. 
<P>This security check is called by the <B>java.lang.System</B> APIs that set system streams using the <B>System.setIn</B>, <B>System.setOut</B>, and <B>System.setErr</B> methods. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022200">checkTopLevelWindow</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean checkTopLevelWindow(Object window);
</FONT></PRE>
<P><P>Determines if classes within the current execution context, based on the call stack of the current thread, are allowed to create top-level windows. 
<P><B>Return Value:</B> <P>Returns false if top-level window creation is allowed and a top-level window requires a warning banner; otherwise, returns true. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>window</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The top-level window. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack possess <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A>s, and if all those permissions allow the creation of top-level windows. If top-level window creation is not allowed, a <B>SecurityException</B> is thrown. 
<P>If top-level window creation is allowed, this check determines whether the top-level window for each calling class requires no warning banner. No warning banner is required if all the <A HREF="UIPermission.htm#com_0003000e15000000">UIPermission</A> objects associated with the calling classes specify that no warning banners are necessary. 
<P>This method overrides the <B>java.lang.SecurityManager.checkTopLevelWindow</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022300">checkWrite</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkWrite(String file);
</FONT></PRE>
<P><P>Determines whether the specified file can be written to by the classes active within the current execution context. 
<P>The check succeeds only if all of the classes found on the call stack possess <A HREF="FileIOPermission.htm#com_0003000e05000000">FileIOPermission</A>s and if those permissions allow write access to the specified file. This method overrides the <B>java.lang.SecurityManager.checkWrite(String)</B> method. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>file</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The system-dependent filename. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022400">checkWrite</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void checkWrite (FileDescriptor fd);
</FONT></PRE>
<P><P>Determines whether classes within the current execution context, based on the call stack of the current thread, can use the specified <B>FileDescriptor</B> object to write to the file it is associated with. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The file descriptor that is associated with the file. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The check succeeds only if all the classes found on the call stack are fully trusted system classes. This method overrides the <B>java.lang.SecurityManager.checkWrite(FileDescriptor)</B> method. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022500">getSecurityContext</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Object getSecurityContext();
</FONT></PRE>
<P><P>Retrieves the codebase URL associated with the nearest <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> instance found on the call stack. The <B>SecurityClassLoader</B> instance is found by examining the classes associated with each stack frame, and then examining the class loader associated with each class. 

<P><B>Return Value:</B> <P>Returns the URL associated with the nearest <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> instance. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022600">getThreadGroup</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public ThreadGroup getThreadGroup();
</FONT></PRE>
<P><P>Determines the active thread group based on the current execution context. 
<P><B>Return Value:</B> <P>Returns the active thread group. 

<P><B>Remarks:</B> <P>This method overrides the <B>java.lang.SecurityManager.getThreadGroup</B> method. This method is called by the constructors of the <B>java.lang.Thread</B> class. Its purpose is to ensure that new threads are created in the thread group associated with the active code instead of in the thread group of the current thread. 
<P>To understand why this scheme is useful, consider the AWT event dispatch thread, which is a system thread that lives in the system thread group. If an applet creates a new thread while executing code on the dispatch thread, the new thread will be created in the thread group associated with that applet. If, instead, an attempt had been made to create the thread in the system thread group, it is likely that the attempt would have failed because the applet code probably does not have access rights to the system thread group. 
<P>The algorithm for determining the active thread group is as follows. 
<OL><LI>Based on the classes associated with each stack frame on the call stack, locate the nearest <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> instance. 
<LI>If no <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> is found, the active thread group is simply the thread group of the current thread, as follows. 
<PRE><FONT FACE="Courier" SIZE="2">
Thread.currentThread().getThreadGroup()
</FONT></PRE>
<LI>Otherwise, a <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> instance was found. If the thread group of the current thread is a child of the thread group associated with that loader, return it. otherwise, return the thread group associated with the loader. 
</OL>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d0c022700">installStandardSecurity</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void installStandardSecurity();
</FONT></PRE>
<P><P>Creates a new <A HREF="StandardSecurityManager.htm">StandardSecurityManager</A> and installs it as the active security manager. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if a security manager is already installed. 


</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

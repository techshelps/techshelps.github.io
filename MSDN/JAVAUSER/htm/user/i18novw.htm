<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Internationalization"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201010000">Creating Multilingual Java Applications using Win32 Resources</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201020000">Using Multilingual Java Applications with Win32 Resources</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201030000">Enhanced Locale Support</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201040000">Vertical Writing Support</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201050000">Input Method Editors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="i18novw.htm#i18novw_000b000201060000">Unicode Support</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/inter2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Internationalization"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_int.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_int.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Int."></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="i18n_LCID.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top">&nbsp;</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Int.</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Introduction</H2>
<P>The global connectivity provided by the Internet will increase the demand for internationalized software products and place additional requirements on internationalized applications. For example, applications that are delivered and run over the Internet may need to adapt to the user's language at run time. Other applications will need to be multilingual and support a combination of different languages. Java was designed to support internationalization&#151;its primitive character type is based on Unicode, an international standard for encoding written language elements. The Microsoft SDK for Java enhances the internationalization features of Java with support for local character set encoding, Microsoft&#174; Win32&#174; resources, locales, vertical writing, and Java-based input method editors (IMEs). 

<P>Enhanced internationalization support is provided by the following Microsoft packages:

<UL><LI>Package com.ms.ui.resource provides support for using Win32 resources in Java applications.
<LI>Package <A HREF="def_lang.htm">com.ms.lang</A> includes the <A HREF="SystemX.htm">SystemX</A> class that provides system-level internationalization services, such as managing IMEs and converting strings between local code pages and Unicode.
<LI>Package <A HREF="def_uim.htm">com.ms.util.InputMethod</A> provides support for creating Java-based IMEs. 
<LI>Package com.ms.fx provides FxFormattedText, the standard text layout class, for vertical writing in Far Eastern languages.
</UL>
<P>In addition to the enhanced support provided by the packages in the preceding list, the Microsoft Win32 VM for Java (Microsoft VM) includes fully functional versions of the <B>java.lang.Runtime</B> methods <B>getLocalizedInputStream</B> and <B>getLocalizedOutputStream</B>.

<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201010000">Creating Multilingual Java Applications using Win32 Resources</A></H3><P>Resources are used to isolate text and user interface elements, such as menus and dialog boxes, from the executable part of an application. Although the advantages of using resources apply to all applications, resources are particularly useful in applications requiring internationalization. Resource files can be localized and tested without having to rebuild an entire application. Using resources also decreases size and shortens load time for .class files, as they are not implemented with large amounts of static data.

<P>The Microsoft SDK for Java supports a compact resource format. The com.ms.ui.resource.ResourceDecoder class is an extensible class designed to load resources from a binary file. The com.ms.ui.resource.Win32ResourceDecoder class reads resources in the Win32 resource format. This class also provides methods for accessing the individual resource elements within a resource file.
This enables you to use existing resource files with Java applications and to use familiar tools and processes to create and localize new resources. 

<P>One problem with current development tools is that they are not necessarily capable of modifying resources in multiple languages within the same file. For example, a common problem is merging Far Eastern language resources with Western ones due to operating system limitations. The Microsoft SDK for Java includes the <A href="quickref.htm#quickref_0004000201001700">resmerge</A> utility to address this problem. It enables you to develop resources separately, and then combine resources for different languages into one .res file. When you load Win32 resources from these combined resource files, you can specify the combined resource file as a source, and the language of the resource (the <A HREF="i18n_LCID.htm#LCID_000b000301000000">LCID</A>) that you want to load.

<P>There are four steps used in creating a Java application that uses localized resources.
<OL><LI>Develop the application.
 <UL><LI>Design your application so that you don't set fonts for resources you are loading. The Microsoft VM for Java automatically assigns default system fonts for loaded resources.
 <LI>Make sure you take multilingual requirements (vertical writing, and so on) into account and set the size for GUI elements (for example, dialog boxes) accordingly.</UL>
<LI>Create the resource files, and localize them with existing resource localization tools.
 <LI>Merge the localized resource files using the <A href="quickref.htm#quickref_0004000201001700">resmerge</A> utility, if necessary.
 <LI>Use the Win32ResourceDecoder class to access and load localized resources from your Java application.
</OL>
<P>For example, if you wanted to be able to load both a Chinese and an English string resource, you would first develop these two resources, and then combine them using <A href="quickref.htm#quickref_0004000201001700">resmerge</A>.
<PRE><FONT FACE="Courier" SIZE="2">C:\..\&gt;resmerge -a resources.res MyProjResUS.res MyProjResJP.res</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201020000">Using Multilingual Java Applications with Win32 Resources</A></H3><P>Using Win32 resources in an application is easy. You link to the file and extract the resource using the Win32ResourceDecoder. For example, to populate a panel with localizable controls, you create a resource file that contains dialog resources with the controls laid out as you want them. Execute the following code at run time:
<PRE><FONT FACE="Courier" SIZE="2">public void populate(UIPanel p, int id)
{ 
    Win32ResourceDecoder res=new Win32ResourceDecoder("resources.res");
    try
    {
        res.populateDialog(p, id);
    }
    catch (Exception e)
    {
        System.out.println("Problem "+e);
    }
}</FONT></PRE>
<P>Note that a locale identifier (<A HREF="i18n_LCID.htm#LCID_000b000301000000">LCID</A>) is not used because you will typically load the resources in the language the user needs. However, you can specify a language for any resource by adding the <B>LCID</B> to the method call. For example, an English/Greek dictionary would specify that the list of translated words be loaded in those languages, even if the application is currently being used by someone in Germany, and if all the rest of the user interface is in German. 

<P><B>Note</B>  Using Win32 resources allows you to localize your Java applications, without giving your Java source code to localization translators. This way, there will be no confusion between literal text strings and text that should be localized.
<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201030000">Enhanced Locale Support</A></H3><P>The Microsoft VM includes the following enhancements to the <A HREF="javautilLocale.htm#java_000b000402000000">Locale</A> class to support internationalization. 

<UL><LI>Locale support for all locales supported by Win32. This enhancement adds more than forty locales to the locales supported by JDK 1.1, including locales that use vertical writing (for example, <B>Locale.JAPANESE_VERTICAL</B>).
<LI>A new method, <A HREF="javautilLocale.htm#java_000b000402021200">getLCID</A>, to get the locale identifier.
<LI>A new method, <A HREF="javautilLocale.htm#java_000b000402020300">getCodePage</A>, to get the code page associated with a locale.
</UL>
<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201040000">Vertical Writing Support</A></H3><P>Traditional Chinese and Japanese texts are written vertically&#151;characters appear in a vertical line from the top to the bottom of the page, with lines progressing from the right to the left side of the page. The Microsoft VM supports vertical writing with the FxFormattedText class. There are two ways to specify that the text for an <B>FxFormattedText</B> buffer be written vertically:

<UL><LI>Use the setLocale method to set the locale to a locale that uses vertical writing. Locales that use vertical writing are <B>Locale.TRADITIONAL_CHINESE_VERTICAL</B>, <B>Locale.SIMPLIFIED_CHINESE_VERTICAL</B>, <B>Locale.KOREAN_VERTICAL</B>, and <B>Locale.JAPANESE_VERTICAL</B>.
<LI>Use the setTextDirection method to set the text direction to top-to-bottom, and right-to-left (<B>FxFormattedText.tdTB_RL</B>).
</UL>
<P>The following sample code implements a panel that contains vertical writing.

<PRE><FONT FACE="Courier" SIZE="2">class VerticalWritingSample extends UIPanel
{
    FxFormattedText fxft;

    public VerticalWritingSample ()
    {
        fxft = new FxFormattedText ("Vertical Text!");
        fxft.setLocale (Locale.JAPANESE_VERTICAL);
    }
    
    public void paint (FxGraphics g)
    {
        fxft.paint (g);
    }
}</FONT></PRE>
<P><B>Note</B>  When written vertically, characters are rotated 90 degrees (clockwise). This rotation is in accordance with the conventions of vertical writing for traditional Chinese and Japanese texts.<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201050000">Input Method Editors</A></H3><P>An input method editor (IME) is a program that allows computer users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard. Internationalized versions of Microsoft&#174; Windows&#174; provide native system IMEs for locales with languages using non-Latin alphabets (for example, Japanese, Korean, Traditional Chinese, and Simplified Chinese). The Microsoft VM provides IME support for Java applications with an Input Method Manager (IMM) that hosts Java-based IMEs, as well as native system IMEs. 

<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201050100">Native System IMEs</A></H4><P>The Microsoft VM supports existing native system IMEs interchangeably with Java-based IMEs. However, there are some limitations associated with using system IMEs. You can use a Java-based IME on any system, regardless of what language the system is localized for as long as the Microsoft VM is installed. With native system IMEs, however, you are limited to IMEs supported by the host system.

<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201050200">Java-Based IMEs</A></H4><P>The Microsoft VM for Java fully supports IMEs written in the Java language. Java-based IMEs provide more flexibility and control for applications than native system IMEs. The following is a summary of the features of Java-based IMEs.

<P><TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Feature</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Unicode-based</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Java IMEs can be used with any version of Microsoft Windows.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Cross-platform</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Java IMEs will run on any system that has the Microsoft VM installed.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Multilingual</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Java IMEs for different languages can be activated concurrently by a single Java application (provided the proper fonts are installed on the user's system).
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Web-downloadable</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Java IMEs can be packaged and downloaded with applets or downloaded at the discretion of the user.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Managed by the application</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> Applications can control Java IME interface elements such as composition, status, and candidate windows.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Secure</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Java IMEs follow normal Java security rules and run in the "sandbox" with Java applications.
</FONT></TD>
</TR>
</TABLE>
<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201050300">Writing a Java-Based Input Method Editor</A></H4><P>The <A HREF="def_uim.htm">com.ms.util.InputMethod</A> package contains the following classes for creating Java-based IMEs.

<UL><LI>The <A HREF="IMECompositionMessage.htm">IMECompositionMessage</A> class represents messages sent to the composition window of an IME.
<LI>The <A HREF="IMENotifyMessage.htm">IMENotifyMessage</A> class represents messages sent to an IME to notify it to perform an action on the status or candidate windows.
<LI>The <A HREF="InputMethodCallback.htm">InputMethodCallback</A> class is an interface class that enables an IME to return composed characters and messages to the IMM.
<LI>The <A HREF="InputMethodListener.htm">InputMethodListener</A> class is an interface class that IMEs must implement to be used with the IMM. 
</UL>
<P><B>Note</B>  The Microsoft SDK for Java includes a sample application, SampleIME, that illustrates how to write a simple, Java-based IME.<H5 STYLE="color:#333366">Handling Keystrokes</H5><P>Keystrokes are passed from the Microsoft VM to the IMM, which routes them to the IME. To receive keystrokes, the IME must override the <A HREF="InputMethodListener.htm#com_0003001607010400">InputMethodListener.handledKey</A> method. The <I>imeCallback</I> parameter in <B>InputMethodListener.handledKey</B> specifies an <A HREF="InputMethodCallback.htm">InputMethodCallback</A> object that allows the IME to send messages back to the Microsoft VM. When composition is complete, the IME should use the <A HREF="InputMethodCallback.htm#com_0003001606010100">InputMethodCallback.handleIMEChar</A> method to return the composed Unicode character to the Microsoft VM.

<P><B>Note</B>  Keystrokes are represented by virtual key codes defined by the <B>KeyEvent</B> class in the java.awt.event package. Keyboard state codes (ALT, CTRL, SHIFT, and so on) are defined in the <B>InputManagerListener</B> class.<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201050400">Using IMEs with Java Applications</A></H4><P>You don't have to do anything special with your Java application to use native system IMEs. If a native system IME is present on a system running the Microsoft VM, it will correctly process and route IME-composed strings to the application. 

<P>If you want to use a Java-based IME with your application, you'll need to use the IMM to activate the IME that you want to use. The following list shows the classes you use to work with the IMM.

<UL><LI>The <A HREF="SystemX.htm">SystemX</A> class (in the <A HREF="def_lang.htm">com.ms.lang</A> package) enables you to get and set the default IMM provided by the Microsoft VM.
<LI>The <A HREF="InputMethodListener.htm">InputManagerListener</A> class (in the <A HREF="def_uim.htm">com.ms.util.InputMethod</A> package) is an interface class that includes methods for managing IMEs. 
</UL>
<P>You must set the current IMM before activating an IME. The following code shows how to set the default IMM and install an IME.

<P><PRE><FONT FACE="Courier" SIZE="2">InputManagerListener imm;
MyIME ime;

// Set default IMM
imm = com.ms.lang.SystemX.getDefaultInputManager ();
com.ms.lang.SystemX.setInputManager (imm, true);
if (imm != null)
{
    // Instantiate IME.
    ime = new MyIME () ;

    if (ime != null)
    {
        // Set IME to be current IME and activate it.
        imm.setInputMethod (ime);
        ime.activate ();
    }
}</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="i18novw_000b000201060000">Unicode Support</A></H3><P>Although the Java language includes support for Unicode strings, many text editors use local character set encoding, and many text files contain local character set strings, not Unicode strings. This causes two different problems:

<UL><LI>At compile time, local character set encoded string literals must be converted to Unicode. 
<LI>At run time, strings must be converted between local character set encoding and Unicode during read and write operations.
</UL>
<P>The Microsoft Compiler for Java (jvc) translates local character set encoded string literals in Java source code to Unicode when it compiles the source into class files. When the Microsoft VM runs these class files, the string literals will appear correctly. The <B>java.lang.Runtime</B> methods <B>getLocalizedInputStream</B> and <B>getLocalizedOutputStream</B> will convert between local character set encoding and Unicode.

<P><B>Note</B>  You should only use <B>getLocalizedInputStream</B> on input streams that are known to be encoded in a local character set. Do not use this method on input streams that contain Unicode characters.
<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201060100">Converting Local Encoding to Unicode</A></H4><P>The <B>getLocalizedInputStream</B> method converts local character set encoding to Unicode. To use it, you must first call <B>Runtime.getRuntime</B> to get a <B>Runtime</B> object. Then, call the <B>Runtime.getLocalizedInputStream</B> method, passing the input stream object that you want to have converted. The <B>getLocalizedInputStream</B> method returns a <B>DataInputStream</B> object that performs local-character-set-to-Unicode conversion on the input stream. The following example demonstrates this technique.

<PRE><FONT FACE="Courier" SIZE="2">Runtime rt = Runtime.getRuntime();
FileInputStream fisLoc;  // local
DataInputStream disUni;  // Unicode
String sInput;

fisLoc = new FileInputStream("LOCAL.TXT");
disUni = (DataInputStream)rt.getLocalizedInputStream(fisLoc);
sInput = disUni.readLine(); 
</FONT></PRE>
<H4 STYLE="color:#333366"><A NAME="i18novw_000b000201060200">Converting Unicode to Local Encoding</A></H4><P>The <B>getLocalizedOutputStream</B> method converts Unicode to local character set encoding. To use it, you must first call <B>Runtime.getRuntime</B> to get a <B>Runtime</B> object. Then, call the <B>Runtime.getLocalizedOutputStream</B> method, passing the output stream object that you want to have converted. The <B>getLocalizedOutputStream</B> method returns a <B>DataOutputStream</B> object that performs Unicode-to-local-character-set conversion on the output stream. The following example demonstrates this technique.

<PRE><FONT FACE="Courier" SIZE="2">Runtime rt = Runtime.getRuntime();
FileOutputStream fosUni;  // Unicode
DataOutputStream dosLoc;  // local
String sOutput = "This is a Unicode string";

fosUni = new FileOutputStream("OUTPUT.TXT");
dosLoc = (DataOutputStream)rt.getLocalizedOutputStream(fosUni);
dosLoc.writeChars(sOutput); 
</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

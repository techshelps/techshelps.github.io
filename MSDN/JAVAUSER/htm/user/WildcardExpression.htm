<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class WildcardExpression</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="WildcardExpression.htm#com_0003001415010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="WildcardExpression.htm#com_0003001415020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="WildcardExpression.htm#com_0003001415030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="VectorSort.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_util.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Comparison.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.util</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class WildcardExpression</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class WildcardExpression implements 
            <B>java.io.FilenameFilter</B>, <B>Cloneable</B>, <A HREF="SetComparison.htm">SetComparison</A>
{
  // Fields
  public static int <A HREF="WildcardExpression.htm#com_0003001415030001">CASE_SENSITIVE</A>;
  public static final int <A HREF="WildcardExpression.htm#com_0003001415030002">COMPARE_FL_ALL</A>;
  public static final int <A HREF="WildcardExpression.htm#com_0003001415030003">COMPARE_FL_REJECT</A>;
  public static final int <A HREF="WildcardExpression.htm#com_0003001415030004">COMPARE_FL_STOP1</A>;
  public static final int <A HREF="WildcardExpression.htm#com_0003001415030005">COMPARE_FL_STOP2</A>;
  public static int <A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A>;
  public static int <A HREF="WildcardExpression.htm#com_0003001415030007">EXACT</A>;
  public static int <A HREF="WildcardExpression.htm#com_0003001415030008">NO_DELIMITERS</A>;
  public static int <A HREF="WildcardExpression.htm#com_0003001415030009">NO_WILDCARDS</A>;

  // Constructors
  public <A HREF="WildcardExpression.htm#com_0003001415010100">WildcardExpression</A> ();
  public <A HREF="WildcardExpression.htm#com_0003001415010200">WildcardExpression</A> (String expr);
  public <A HREF="WildcardExpression.htm#com_0003001415010300">WildcardExpression</A> (String expr, int flags);

  // Methods
  public boolean <A HREF="WildcardExpression.htm#com_0003001415020100">accept</A> (java.io.File dir, String name);
  public synchronized void <A HREF="WildcardExpression.htm#com_0003001415020200">append</A> (WildcardExpression other);
  public synchronized void <A HREF="WildcardExpression.htm#com_0003001415020300">append</A> (WildcardExpression[] list);
  public synchronized void <A HREF="WildcardExpression.htm#com_0003001415020400">append</A> (String expr, int flags);
  public void <A HREF="WildcardExpression.htm#com_0003001415020500">append</A> (String expr);
  protected Object <A HREF="WildcardExpression.htm#com_0003001415020600">clone</A> ();
  public int <A HREF="WildcardExpression.htm#com_0003001415020700">compare</A> (WildcardExpression other,
        IWildcardExpressionComparator judge,
        boolean requireEquality);
  public int <A HREF="WildcardExpression.htm#com_0003001415020800">compare</A> (WildcardExpression other);
  public int <A HREF="WildcardExpression.htm#com_0003001415020900">compare</A> (WildcardExpression other,
        IWildcardExpressionComparator judge);
  public int <A HREF="WildcardExpression.htm#com_0003001415020a00">compareSet</A> (Object other);
  public static String <A HREF="WildcardExpression.htm#com_0003001415020b00">ComparisonResulttoString</A> (int cmp);
  public synchronized void <A HREF="WildcardExpression.htm#com_0003001415020c00">compile</A> (String expr, int flags);
  public void <A HREF="WildcardExpression.htm#com_0003001415020d00">compile</A> (String expr);
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415020e00">condense</A> ();
  public synchronized WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415020f00">condense</A> (
        IWildcardExpressionComparator judge);
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415021000">copy</A> ();
  public boolean <A HREF="WildcardExpression.htm#com_0003001415021100">equals</A> (Object obj);
  public WildcardExpression[] <A HREF="WildcardExpression.htm#com_0003001415021200">getSubexpressions</A> ();
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415021300">intersect</A> (WildcardExpression other,
        IWildcardExpressionComparator judge);
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415021400">intersect</A> (WildcardExpression other);
  public static int <A HREF="WildcardExpression.htm#com_0003001415021500">InvertComparisonResult</A> (int cmp);
  public boolean <A HREF="WildcardExpression.htm#com_0003001415021600">isCaseSensitive</A> ();
  public boolean <A HREF="WildcardExpression.htm#com_0003001415021700">isEmpty</A> ();
  public boolean <A HREF="WildcardExpression.htm#com_0003001415021800">match</A> (String s);
  public int <A HREF="WildcardExpression.htm#com_0003001415021900">matchex</A> (String s);
  public static int <A HREF="WildcardExpression.htm#com_0003001415021a00">matchOne</A> (WildcardExpression[] exprs, int ofs,
        int len, String s);
  public static int <A HREF="WildcardExpression.htm#com_0003001415021b00">matchOne</A> (WildcardExpression[] exprs, String s);
  public int <A HREF="WildcardExpression.htm#com_0003001415021c00">resume</A> (String s);
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415021d00">selectSubexpressions</A> (
        WildcardExpression other, int[] criteria,
        IWildcardExpressionComparator judge);
  public WildcardExpression <A HREF="WildcardExpression.htm#com_0003001415021e00">selectSubexpressions</A> (
        WildcardExpression other, int[] criteria);
  public void <A HREF="WildcardExpression.htm#com_0003001415021f00">setCaseInsensitive</A> ();
  public String <A HREF="WildcardExpression.htm#com_0003001415022000">toString</A> ();
  public String <A HREF="WildcardExpression.htm#com_0003001415022100">toString</A> (boolean escaped);
}
</FONT></PRE>
<P>This class matches simple wildcard expressions, such as *.txt or report?.doc commonly recognized by users on most platforms. The nonterminals "*" and "?" can be combined any number of times in any conceivable manner. Multiple expressions can be matched by separating the expressions with a semicolon; for example, "*.txt;*.doc" will match Strings ending with .txt or .doc. The special expression tokens can be matched by escaping them with '\'; for example, "clear\*sky" will match the string "clear*sky", but not "clearbluesky". Expressions can be case-sensitive or case-insensitive; this is selected when the expression is constructed. 
<P>This is very similar to DOS wildcards, but is in no way confined to filenames. The expression '*' will match a path in any subdirectory, and "*.*" does not match a file with no extension. For example, unlike DOS, "c:\\windows\\*" will match "c:\\windows\\system\\blue.vxd" and "*.*" will not match "notes". 
<P><B>WildcardExpression</B> implements FilenameFilter, so it can readily be used with <B>FileDialog</B>, <A HREF="ClientStoreFile.htm#com_0003000a04020d00">File.list</A>, or <A HREF="ClientStore.htm#com_0003000a03011f00">ClientStore.listFiles</A>. 
<P>The <A HREF="WildcardExpression.htm#com_0003001415021100">equals</A> method has been overridden to special-case equality with strings. When invoked with a string, it will perform a match instead of comparing the pattern string. This allows it to be more easily used in a container, such as Vector, to find an expression matching a string. To find a matching expression in a string array, use the <A HREF="WildcardExpression.htm#com_0003001415021a00">matchOne</A> method. 
<P>While this may have its uses, the preferred method of matching a string against a series of expressions is to combine the expressions into a single expression using the <A HREF="WildcardExpression.htm#com_0003001415020200">append</A> operator. The <A HREF="WildcardExpression.htm#com_0003001415021900">matchex</A> function will return the sub-expression number of the first matching expression, and the <A HREF="WildcardExpression.htm#com_0003001415021c00">resume</A> function will continue searching for matching expressions. The use of <B>matchex</B> and <B>resume</B> should be externally synchronized, if there is the possibility that <A HREF="WildcardExpression.htm#com_0003001415021800">match</A>, <B>matchex</B>, or <B>resume</B> may be used on the same expression simultaneously from another thread. For example: 
<PRE><FONT FACE="Courier" SIZE="2">
 WildcardExpression expr = new WildcardExpression();
 expr.append("*.java");
 expr.append("*.txt");
 expr.append("*.doc");
 expr.append("c:\\docs\\*");
 // Resulting expression: "*.java;*.txt;*.doc;c:\\docs\\*"
 
 String filename = "c:\\docs\\foo.txt";
 synchronized (expr)
 {
     int exprnum;
     exprnum = expr.matchex(filename);   // returns 1
     exprnum = expr.resume(filename);    // returns 3
     exprnum = expr.resume(filename);    // returns -1
 }
</FONT></PRE>
<P>Case-sensitive and case-insensitive expressions cannot be combined. 
<P>There are three ways to construct expressions: 
<OL><LI>Use one of the constructors to create a set of subexpressions from a string delimited by ';'. 
<LI>Use the <I>append</I> methods to add subexpressions to an existing expression (which can be an empty expression). The new pattern string can optionally have ';' delimiters ignored. Both single <B>WildcardExpression</B> objects and arrays of <B>WildcardExpression</B> objects can be appended to existing expressions. 
<LI>Use the <I>compile</I> methods, which replace an existing expression with a new one using the same semantics as the constructors. 
</OL>
<P>To improve performance, nothing in this class is synchronized. The typical use is that an expression is compiled once by the constructor. The <A HREF="WildcardExpression.htm#com_0003001415020c00">compile</A> and <A HREF="WildcardExpression.htm#com_0003001415020200">append</A> methods are the only operators that change the state of the expression. Callers are responsible for synchronizing these operations with callers of the other methods. Note that <A HREF="WildcardExpression.htm#com_0003001415021900">matchex</A> and <A HREF="WildcardExpression.htm#com_0003001415021c00">resume</A> also change state of the expression but not the expression itself. These operations also may need to be synchronized, but not with the others. 
<P>WildcardExpressions are not immutable, so security-critical code should be careful to pass copies of the expression to less-trusted code using the <A HREF="WildcardExpression.htm#com_0003001415021000">copy</A> method. Some of the contents of the copy will be shared with the original until one of them changes. 

<H3 STYLE="color:#333366"><A NAME="com_0003001415010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001415010100">WildcardExpression</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression ();
</FONT></PRE>
<P><P>Creates an empty expression. (An expression must be compiled before matches can be made.) 

<P><B>See Also:</B> <A HREF="WildcardExpression.htm#com_0003001415020c00">compile</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415010200">WildcardExpression</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression (String expr);
</FONT></PRE>
<P><P>Creates an expression that follows the typical wildcard convention. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression evaluate. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415010300">WildcardExpression</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression (String expr, int flags);
</FONT></PRE>
<P><P>Creates a case-sensitive expression from a string and allows for escaped wildcards. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to compile. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Combination of one or more of the following flags: 
<UL><LI><A HREF="WildcardExpression.htm#com_0003001415030001">CASE_SENSITIVE</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030008">NO_DELIMITERS</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A> 
</UL>
</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="WildcardExpression.htm#com_0003001415020c00">compile</A>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001415020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001415020100">accept</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean accept (java.io.File dir, String name);
</FONT></PRE>
<P><P>Determines if a filename is valid. 

<P><B>Return Value:</B> <P>Returns true if <I>name</I> matches a real path; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dir</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The directory that contains the file. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the file. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020200">append</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void append (WildcardExpression other);
</FONT></PRE>
<P><P>Appends another expression to this expression. 

<P><B>Return Value:</B> <P>No return value 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to append. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expressions are incompatible. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020300">append</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void append (WildcardExpression[] list);
</FONT></PRE>
<P><P>Adds a list of expressions to the expression. If any expressions fail to be added, the original expression is not affected. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>list</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The list of expressions to add. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020400">append</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void append (String expr, int flags);
</FONT></PRE>
<P><P>Appends another expression to this expression. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to append. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Combination of one or more of the following flags for controlling constructing of the expression: 
<UL><LI><A HREF="WildcardExpression.htm#com_0003001415030009">NO_WILDCARDS</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030008">NO_DELIMITERS</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A> 
</UL>
<P>Note that <A HREF="WildcardExpression.htm#com_0003001415030001">CASE_SENSITIVE</A> is not valid. The case-sensitivity of matching the new pattern is controlled by the existing case-sensitivity of the expression. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expression is invalid. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020500">append</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void append (String expr);
</FONT></PRE>
<P><P>Appends another expression to this expression. 

<P><B>Return Value:</B> <P>No return value 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to append. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expression is invalid. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020600">clone</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Object clone ();
</FONT></PRE>
<P><P>Creates a copy of the this object. 

<P><B>Return Value:</B> <P>Returns the cloned copy. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020700">compare</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compare (WildcardExpression other, IWildcardExpressionComparator
        judge, boolean requireEquality);
</FONT></PRE>
<P><P>Compares the set of strings matched by this expression to the set matched by another. This variant of this method should be used for continued expressions. 

<P><B>Return Value:</B> <P>Returns one of the <A HREF="SetComparison.htm">SetComparison</A> field values to indicate the relationship between the sets. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object containing the other set of strings. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used for deciding what to do with two expressions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>requireEquality</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true if the comparator should time-out if it becomes impossible for an <A HREF="SetComparison.htm#com_000300141a020005">EQUAL</A> result to be returned. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expressions cannot be compared. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020800">compare</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compare (WildcardExpression other);
</FONT></PRE>
<P><P>Compares the set of strings matched by this expression to the set matched by another. 

<P><B>Return Value:</B> <P>Returns one of the <A HREF="SetComparison.htm">SetComparison</A> field values to indicate the relationship between the sets. The result reflects the action of matching non-continuable expressions. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object containing the other set of strings. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expressions cannot be compared. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020900">compare</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compare (WildcardExpression other, IWildcardExpressionComparator
        judge);
</FONT></PRE>
<P><P>Compares the set of strings matched by this expression to the set matched by another. This variant of this method should be used for continued expressions. 

<P><B>Return Value:</B> <P>Returns one of the <A HREF="SetComparison.htm">SetComparison</A> field values to indicate the relationship between the sets. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object containing the other set of strings. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used for deciding what to do with two expressions. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expressions cannot be compared. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020a00">compareSet</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compareSet (Object other);
</FONT></PRE>
<P><P>Compares the set of strings matched by this expression to the set matched by another. 

<P><B>Return Value:</B> <P>Returns one of the <A HREF="SetComparison.htm">SetComparison</A> field values to indicate the relationship between the sets. If <I>other</I> is not a <A HREF="WildcardExpression.htm">WildcardExpression</A> object, returns <A HREF="SetComparison.htm#com_000300141a020001">DISJOINT</A>. The result reflects the action of matching non-continuable expressions. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object containing the other set of strings. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the expressions cannot be compared. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020b00">ComparisonResulttoString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static String ComparisonResulttoString (int cmp);
</FONT></PRE>
<P><P>Converts comparison result flags to a string format. 

<P><B>Return Value:</B> <P>Returns the result string as follows: 
<UL><LI>"equal" (<A HREF="SetComparison.htm#com_000300141a020005">SetComparison.EQUAL</A>) 
<LI>"notequal" (<A HREF="SetComparison.htm#com_000300141a020001">SetComparison.DISJOINT</A>) 
<LI>"overlap" (<A HREF="SetComparison.htm#com_000300141a020006">SetComparison.OVERLAP</A>) 
<LI>"subset" (<A HREF="SetComparison.htm#com_000300141a020007">SetComparison.SUBSET</A>) 
<LI>"superset" (<A HREF="SetComparison.htm#com_000300141a020008">SetComparison.SUPERSET</A>) 
</UL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cmp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A comparison result from the <A HREF="WildcardExpression.htm#com_0003001415020700">compare</A> method. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020c00">compile</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void compile (String expr, int flags);
</FONT></PRE>
<P><P>Compiles the expression for faster evaluation. The previously compiled expression is lost when this method is called. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to compile. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Combination of one or more of the following flags: 
<UL><LI><A HREF="WildcardExpression.htm#com_0003001415030009">NO_WILDCARDS</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030001">CASE_SENSITIVE</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030008">NO_DELIMITERS</A> 
<LI><A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A> 
</UL>
</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="WildcardExpression.htm#com_0003001415021800">match</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020d00">compile</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void compile (String expr);
</FONT></PRE>
<P><P>Compiles the expression for faster evaluation with default values. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>expr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The expression to compile. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The previously compiled expression is lost when this method is called. Case-sensitive matching and the evaluation of escaped wildcards are disabled for the compilation.
<P><B>See Also:</B> <A HREF="WildcardExpression.htm#com_0003001415021800">match</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020e00">condense</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression condense ();
</FONT></PRE>
<P><P>Removes redundant subexpressions. The new subexpressions may match overlapping sets of strings, but will not be equal or entirely match the set of strings of any other subexpressions. 

<P><B>Return Value:</B> <P>Returns a new <A HREF="WildcardExpression.htm">WildcardExpression</A> object containing the unique expressions of the expression. If there are no redundant expressions, the original expression is returned. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415020f00">condense</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized WildcardExpression condense (
        IWildcardExpressionComparator judge);
</FONT></PRE>
<P><P>Removes redundant subexpressions. The new subexpressions may match overlapping sets of strings, but will not be equal or entirely match the set of strings of any other subexpressions. 

<P><B>Return Value:</B> <P>Returns a new <A HREF="WildcardExpression.htm">WildcardExpression</A> object containing the unique expressions of the expression. If there are no redundant expressions, the original expression is returned. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used for comparing any auxiliary data that may be associated with each subexpression. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021000">copy</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression copy ();
</FONT></PRE>
<P><P>Retrieves a copy of the currently compiled expression. 

<P><B>Return Value:</B> <P>Returns a copy of the expression. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021100">equals</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean equals (Object obj);
</FONT></PRE>
<P><P>Determines if this object is equivalent to another object. 

<P><B>Return Value:</B> <P>Returns true if <I>obj</I> is equivalent or matched by this object; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>obj</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <B>String</B> to match against this expression or a <A HREF="WildcardExpression.htm">WildcardExpression</A> to compare for equivalence. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021200">getSubexpressions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression[] getSubexpressions ();
</FONT></PRE>
<P><P>Splits the expression into its subexpressions. 

<P><B>Return Value:</B> <P>Returns an array of expressions that make up the subexpressions. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021300">intersect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression intersect (WildcardExpression other,
        IWildcardExpressionComparator judge);
</FONT></PRE>
<P><P>Constructs an expression that matches any strings that this and another expression both match. 
<P><B>Return Value:</B> <P>Returns an expression that is the intersection of the two expressions. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other expression. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A helper interface. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If either expression contains redundant subexpressions, the resulting expression will also contain redundant intersections. Calling <A HREF="WildcardExpression.htm#com_0003001415020e00">condense</A> beforehand on both expressions may improve the efficiency of this operation. Redundant expressions may be returned even if the source expressions contain no redundant expressions. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021400">intersect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression intersect (WildcardExpression other);
</FONT></PRE>
<P><P>Constructs an expression that matches any strings that this and another expression both match. 

<P><B>Return Value:</B> <P>Returns an expression that is the intersection of the two expressions. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other expression. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021500">InvertComparisonResult</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static int InvertComparisonResult (int cmp);
</FONT></PRE>
<P><P>Inverts comparison results. 

<P><B>Return Value:</B> <P>Returns the inverted comparison result. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cmp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Any comparison result of the <A HREF="WildcardExpression.htm#com_0003001415020700">compare</A> method, which is inverted as follows: 
<UL><LI><A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A> returns <A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A>. 
<LI><A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A> returns <A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A>. 
<LI>any other result is not affected and is simply returned. Note that <A HREF="SetComparison.htm#com_000300141a020005">EQUAL</A> and <A HREF="SetComparison.htm#com_000300141a020001">DISJOINT</A> are not inverted by this function. 
</UL>
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021600">isCaseSensitive</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isCaseSensitive ();
</FONT></PRE>
<P><P>Determines if the expression is case-sensitive. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021700">isEmpty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isEmpty ();
</FONT></PRE>
<P><P>Determines if the expression has an expression compiled into it. An empty expression cannot be used for matching. 

<P><B>Return Value:</B> <P>Returns true if the expression does not contain a compiled expression; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021800">match</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean match (String s);
</FONT></PRE>
<P><P>Evaluates the expression on a string. 

<P><B>Return Value:</B> <P>Returns true if the expression accepts the string. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to evaluate the expression on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021900">matchex</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int matchex (String s);
</FONT></PRE>
<P><P>Evaluates the expression on a string. 

<P><B>Return Value:</B> <P>Returns the subexpression number if the expression accepts the string; returns -1 if the string was not accepted. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to evaluate the expression on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021a00">matchOne</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static int matchOne (WildcardExpression[] exprs, int ofs, int len,
        String s);
</FONT></PRE>
<P><P>Evaluates a list of expressions on a string. 

<P><B>Return Value:</B> <P>Returns the index of the expression that matched; returns -1 if no match occurred. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>exprs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A list of expressions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ofs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The offset into the list to begin matching 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>len</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of elements to match against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to evaluate the expressions on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021b00">matchOne</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static int matchOne (WildcardExpression[] exprs, String s);
</FONT></PRE>
<P><P>Evaluates a list of expressions on a string. 

<P><B>Return Value:</B> <P>Returns the index of the expression that matched; returns -1 if no match occurred. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>exprs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A list of expressions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to evaluate the expressions on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021c00">resume</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int resume (String s);
</FONT></PRE>
<P><P>Resumes a previous match that stopped at a subexpression. 

<P><B>Return Value:</B> <P>Returns the subexpression number if the expression accepts the string; returns -1 if the string was not accepted. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to evaluate the expression on. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021d00">selectSubexpressions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression selectSubexpressions (WildcardExpression other,
        int[] criteria, IWildcardExpressionComparator judge);
</FONT></PRE>
<P><P>Constructs a new expression containing expressions from this expression that have any of the specified comparison results against any subexpressions of the target expression. 

<P><B>Return Value:</B> <P>Returns the original expression if all are selected; returns a new expression containing only the subexpressions of this expression that meet the selection criteria. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The target expression to compare against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>criteria</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The selection criteria determining inclusion in the returned expression. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An <A HREF="IWildcardExpressionComparator.htm">IWildcardExpressionComparator</A> hook interface to compare any extra data associated with the subexpressions. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021e00">selectSubexpressions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression selectSubexpressions (WildcardExpression other,
        int[] criteria);
</FONT></PRE>
<P><P>Constructs a new expression containing expressions from this expression that have any of the specified comparison results against any subexpressions of the target expression. 

<P><B>Return Value:</B> <P>Returns the original expression if all are selected; returns a new expression containing only the subexpressions of this expression that meet the selection criteria. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other target expression to compare against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>criteriaThe</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">selection criteria determining inclusion in the returned expression. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415021f00">setCaseInsensitive</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCaseInsensitive ();
</FONT></PRE>
<P><P>Destructively changes the expression to perform case-insensitive matching. This change cannot be reversed. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415022000">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString ();
</FONT></PRE>
<P><P>Reconstructs the original expression in extended, non-escaped form. Case-insensitive expressions are reconstructed in lowercase. 

<P><B>Return Value:</B> <P>Returns the original expression. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001415022100">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString (boolean escaped);
</FONT></PRE>
<P><P>Reconstructs the original expression, optionally in escaped form. Case-insensitive expressions are reconstructed in lowercase. 

<P><B>Return Value:</B> <P>Returns the original expression. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>escaped</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">True if string is to include escape characters; false, otherwise. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001415030000">Fields</A></H3><DL>
<DT><B><A NAME="com_0003001415030001">CASE_SENSITIVE</A></B>
</DT><DD>Specifies that the resulting expression should perform case-sensitive matching. 

</DD><DT><B><A NAME="com_0003001415030002">COMPARE_FL_ALL</A></B>
</DT><DD>A <B>IWildCardExpressionComparator</B> result flag, used in conjunction with COMPARE_XXX, by <A HREF="IWildcardExpressionComparator.htm#com_0003001418010100">IWildcardExpressionComparator.compareSubexpressions</A>. Combines flags <A HREF="WildcardExpression.htm#com_0003001415030003">COMPARE_FL_REJECT</A>, <A HREF="WildcardExpression.htm#com_0003001415030004">COMPARE_FL_STOP1</A>, and <A HREF="WildcardExpression.htm#com_0003001415030005">COMPARE_FL_STOP2</A>. 

</DD><DT><B><A NAME="com_0003001415030003">COMPARE_FL_REJECT</A></B>
</DT><DD>A <A HREF="Comparison.htm">Comparison</A> result flag, used by <A HREF="IWildcardExpressionComparator.htm#com_0003001418010100">IWildcardExpressionComparator.compareSubexpressions</A> to stop the comparison. 

</DD><DT><B><A NAME="com_0003001415030004">COMPARE_FL_STOP1</A></B>
</DT><DD>A <A HREF="SetComparison.htm">SetComparison</A> result flag, used by <A HREF="IWildcardExpressionComparator.htm#com_0003001418010100">IWildcardExpressionComparator.compareSubexpressions</A> to disregard further elements of the first expression because they will not be considered during matching. 

</DD><DT><B><A NAME="com_0003001415030005">COMPARE_FL_STOP2</A></B>
</DT><DD>A <A HREF="SetComparison.htm">SetComparison</A> result flag, used in conjunction with COMPARE_XXX, by <A HREF="IWildcardExpressionComparator.htm#com_0003001418010100">IWildcardExpressionComparator.compareSubexpressions</A> to disregard further elements of the second expression because they will not be considered during matching. 

</DD><DT><B><A NAME="com_0003001415030006">ESCAPED</A></B>
</DT><DD>Specifies that the added string contains escaped expression characters. For example, "\*" will match a '*'. 

</DD><DT><B><A NAME="com_0003001415030007">EXACT</A></B>
</DT><DD>Specifies that the added string will be matched "as is," with no interpretation of delimiters or wildcards. 

</DD><DT><B><A NAME="com_0003001415030008">NO_DELIMITERS</A></B>
</DT><DD>Specifies that the string being added or compiled into the expression should be added as a single subexpression. Subexpression delimiters within the added string will be ignored. 

</DD><DT><B><A NAME="com_0003001415030009">NO_WILDCARDS</A></B>
</DT><DD>Specifies that wildcard characters in the added string will be ignored. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

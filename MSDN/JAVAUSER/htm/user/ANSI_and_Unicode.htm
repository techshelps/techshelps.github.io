<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How the VM Chooses Between ANSI and Unicode</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="JDirect"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="ANSI_and_Unicode.htm#jdirect_0007000208010000">Calling the ANSI Version of a DLL Function</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="ANSI_and_Unicode.htm#jdirect_0007000208020000">Calling the Unicode Version of a DLL Function</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="ANSI_and_Unicode.htm#jdirect_0007000208030000">Calling the Optimal Version of a DLL Function</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jdirect2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="JDirect"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Entire_Class.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="jdirect.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="JDirect"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="ErrorCode.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>About J/Direct</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">JDirect</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">How the VM Chooses Between ANSI and Unicode</H2>
<P>The simple <B>MessageBox</B> example that starts this document glosses over a subtle, but important fact: USER32 does not export a function named <B>MessageBox</B>. Because the <B>MessageBox</B> function takes a string, it (like all Win32 functions that deal with strings) must exist in two versions: an ANSI version and a Unicode version (named <B>MessageBoxA</B> and <B>MessageBoxW</B>, respectively). When you code a call to <B>MessageBox</B> in C or C++, the <B>MessageBox</B> "function" you call is actually a macro that expands to either <B>MessageBoxA</B> or <B>MessageBoxW</B>, depending on whether the UNICODE macro is defined.

<H3 STYLE="color:#333366"><A NAME="jdirect_0007000208010000">Calling the ANSI Version of a DLL Function</A></H3><P>By default, the Microsoft Win32 VM for Java assumes that the ANSI version of <B>MessageBox</B> is the one that is needed. If you import the <B>MessageBox</B> function using <B>@dll.import</B> (without a modifier) as follows, 
<PRE><FONT FACE="Courier" SIZE="2">
  /** @dll.import("USER32") */
  static native int MessageBox(int hwnd, String text, 
                               String title, int style);
</FONT></PRE>
<P>the Microsoft VM will go through the following steps.
<OL><LI>The strings "text" and "title" are converted to ANSI null-terminated strings.
<LI>The VM attempts to find an export named <B>MessageBox</B> in USER32.DLL.
<LI>This attempt fails. The VM then appends an "A" onto the name and looks for an export named <B>MessageBoxA</B>.
<LI>This attempt succeeds, and the VM invokes the <B>MessageBoxA</B> function. 
</OL>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000208020000">Calling the Unicode Version of a DLL Function</A></H3><P>Suppose, instead, you wanted to call the Unicode version of <B>MessageBox</B>. You can do this by using the <I>unicode</I> modifier with the <B>@dll.import</B> directive:
<PRE><FONT FACE="Courier" SIZE="2">
  /** @dll.import("USER32",unicode) */
  static native int MessageBox(int hwnd, String text, String title,
                               int style);
</FONT></PRE>
<P>Since the <I>unicode</I> modifier is present, the Microsoft VM will go through the following steps.
<OL><LI>The strings "text" and "title" are converted to Unicode null-terminated strings.
<LI>The VM attempts to find an export named <B>MessageBox</B> in USER32.DLL.
<LI>This attempt fails. The VM appends a "W" onto the name and looks for an export named <B>MessageBoxW</B>.
<LI>This attempt succeeds, and the VM invokes the <B>MessageBoxW</B> function.
</OL>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000208030000">Calling the Optimal Version of a DLL Function</A></H3><P>Unfortunately, neither of these situations is an ideal way to invoke the Win32 functions. Using the default ANSI mode allows your code to run on any Win32 platform, but causes unnecessary performance penalties on fully Unicode systems such as Microsoft&#174; Windows&#174; NT. Using the <I>unicode</I> modifier removes the performance penalty but restricts you to running on systems that implement the Unicode API. Fortunately, you can use the <I>auto</I> modifier with the <B>@dll.import</B> directive to call the optimal version of a DLL function based on the host operating system.

<P>Using the <I>auto</I> modifier gives you the best of both worlds. The following example shows how to call the optimal version of the <B>MessageBox</B> function. 
<PRE><FONT FACE="Courier" SIZE="2">
  /** @dll.import("USER32",auto) */
  static native int MessageBox(int hwnd, String text, String title, 
                               int style);
</FONT></PRE>
<P>When the <I>auto</I> modifier is present, the Microsoft VM determines at run time whether the underlying platform supports the Unicode APIs. If Unicode is supported, the Microsoft VM acts as if the <I>unicode</I> modifier had been specified. Otherwise, the Microsoft VM behaves as if the <I>ansi</I> modifier had been specified. Thus, the <I>auto</I> modifier allows you to generate a single binary which runs well on both ANSI and Unicode Windows systems using the optimal API set available on the given platform.

<P>In general, the <I>auto</I> modifier should be used whenever you call Windows API functions. If you are calling your own DLLs, select either <I>ansi</I> (the default) or <I>unicode</I> depending on your needs. 

<P>Here are the details of how the Microsoft VM decides whether to use ANSI or Unicode when you use the <I>auto</I> modifier.
<OL><LI>The VM opens the registry key HKEY_LOCAL_MACHINE\Software\Microsoft\Java VM and looks for the DWORD-named value DllImportDefaultType. This value can be one of the following:
 
<P>2 - ANSI: Uses the ANSI version always.
<P>3 - Unicode: Uses the Unicode version always.
<P>4 - Platform: Uses ANSI or Unicode depending on the platform.
<P> 
<LI>If the key does not exist, or if it is set to 4 (indicating platform), the VM calls the Win32 <B>GetVersion</B> function and examines the high bit to determine whether the underlying platform is Microsoft&#174; Windows&#174; 95 or Microsoft&#174; Windows&#174; NT. If the platform is Windows 95, ANSI mode is used. Otherwise, Unicode mode is used.
</OL>
<P>It is not necessary to set the DllImportDefaultType registry key yourself. It exists primarily so that the installation program can set the appropriate choice on future Windows platforms. You can programatically query the preferred mode on your platform by reading the com.ms.dll.DllLib.<A HREF="DllLib.htm#com_0003000703020001">systemDefaultCharSize</A> field. This field will be set to 1 on ANSI systems, 2 on Unicode systems. 

<P>The <I>ansi</I>, <I>unicode</I>, and <I>auto</I> modifiers can also be used with the <B>@dll.struct</B> directive. 


<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

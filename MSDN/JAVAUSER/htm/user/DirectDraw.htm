<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class DirectDraw</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="DirectDraw.htm#com_0003000640010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="Direct3dViewport.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="def_dirx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="DirectDrawBitmap.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.directX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class DirectDraw</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class DirectDraw implements <A HREF="IDirectDraw.htm">IDirectDraw</A>
{
  // Methods
  public DirectDrawClipper <A HREF="DirectDraw.htm#com_0003000640010100">createClipper</A>(int flags);
  public Direct3d <A HREF="DirectDraw.htm#com_0003000640010200">createD3D</A>();
  public DirectDrawPalette <A HREF="DirectDraw.htm#com_0003000640010300">createPalette</A>(int flags, byte[] pe);
  public DirectDrawPalette <A HREF="DirectDraw.htm#com_0003000640010400">createPalette</A>(int flags);
  public DirectDrawPalette <A HREF="DirectDraw.htm#com_0003000640010500">createPalette</A>(int flags, Color[] pe);
  public DirectDrawPalette <A HREF="DirectDraw.htm#com_0003000640010600">createPalette</A>(int flags,
        PaletteEntry[] pe);
  public DirectDrawSurface <A HREF="DirectDraw.htm#com_0003000640010700">createSurface</A>(DDSurfaceDesc dd);
  public DirectDrawSurface <A HREF="DirectDraw.htm#com_0003000640010800">duplicateSurface</A>(DirectDrawSurface ddIn);
  public void <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>(int d, DDSurfaceDesc s,
        IUnknown args, IEnumModesCallback fn);
  public void <A HREF="DirectDraw.htm#com_0003000640010a00">flipToGDISurface</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640010b00">getAvailableTotalMem</A>(int[] ddsCaps);
  public void <A HREF="DirectDraw.htm#com_0003000640010c00">getCaps</A>(DDCaps driverCaps, DDCapsFx driverCapsFx,
        DDCaps helCaps, DDCapsFx helCapsFx);
  public void <A HREF="DirectDraw.htm#com_0003000640010d00">getDisplayMode</A>(DDSurfaceDesc surface);
  public int <A HREF="DirectDraw.htm#com_0003000640010e00">getFourCCCodes</A>(int[] size);
  public int <A HREF="DirectDraw.htm#com_0003000640010f00">getFreeMem</A>(int [] ddsCaps);
  public DirectDrawSurface <A HREF="DirectDraw.htm#com_0003000640011000">getGDISurface</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640011100">getMonitorFrequency</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640011200">getNumFourCCCodes</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640011300">getScanLine</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640011400">getVerticalBlankStatus</A>();
  public DirectDrawPalette <A HREF="DirectDraw.htm#com_0003000640011500">loadPaletteFromBitmap</A>(String bName);
  public void <A HREF="DirectDraw.htm#com_0003000640011600">restoreDisplayMode</A>();
  public void <A HREF="DirectDraw.htm#com_0003000640011700">setCooperativeLevel</A>(Component c, int flags);
  public void <A HREF="DirectDraw.htm#com_0003000640011800">setCooperativeLevel</A>(int hdl, int flags);
  public void <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>(int w, int h, int bpp, int ref,
        int mode);
  public int <A HREF="DirectDraw.htm#com_0003000640011a00">systemBpp</A>();
  public int <A HREF="DirectDraw.htm#com_0003000640011b00">tickCount</A>();
  public void <A HREF="DirectDraw.htm#com_0003000640011c00">waitForVerticalBlank</A>(int flags, int handle);
}
</FONT></PRE>
<P>Applications use the methods of the <B>DirectDraw</B> class to create Microsoft&#174; DirectDraw&#174; objects and work with system-level variables. 

<H3 STYLE="color:#333366"><A NAME="com_0003000640010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000640010100">createClipper</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawClipper createClipper(int flags);
</FONT></PRE>
<P><P>Creates a <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object. 
<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is currently not used and must be set to 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object can be attached to a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> and used during <A HREF="DirectDrawSurface.htm">blt</A> and <A HREF="DirectDrawSurface.htm">updateOverlay</A> operations. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm">com.ms.directX.DirectDrawSurface</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010200">createD3D</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Direct3d createD3D();
</FONT></PRE>
<P><P>Creates a Microsoft&#174; Direct3D&#174; object. 

<P><B>Return Value:</B> <P>Returns the <A HREF="Direct3d.htm">Direct3d</A> object if successful; otherwise, returns null. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010300">createPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette createPalette(int flags, byte[] pe);
</FONT></PRE>
<P><P>Creates a <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object for this DirectDraw object. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of the <A HREF="DirectXConstants.htm">DDPCAPS_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pe</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array variable that contains the data describing the initial value for each palette entry. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010400">createPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette createPalette(int flags);
</FONT></PRE>
<P><P>Creates a palette and fills it with standard halftone entries. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; otherwise, returns null. Currently, only <B>DDPCAPS_8BIT</B> and <B>DDPCAPS_INITIALIZE</B> are valid arguments for the <I>flags</I> parameter. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of <B>DDPCAPS_</B> type. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010500">createPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette createPalette(int flags, Color[] pe);
</FONT></PRE>
<P><P>Creates a <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object for this DirectDraw object. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of the <A HREF="DirectXConstants.htm">DDPCAPS_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pe</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array variable that contains the data describing the initial color value for each palette entry. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010600">createPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette createPalette(int flags, PaletteEntry[] pe);
</FONT></PRE>
<P><P>Creates a <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object for this DirectDraw object. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of <A HREF="DirectXConstants.htm">DDPCAPS_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pe</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array variable that contains a <A HREF="PaletteEntry.htm">PaletteEntry</A> object describing each palette entry. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010700">createSurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawSurface createSurface(DDSurfaceDesc dd);
</FONT></PRE>
<P><P>Creates a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object for this DirectDraw object. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object that describes the requested surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010800">duplicateSurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawSurface duplicateSurface(DirectDrawSurface ddIn);
</FONT></PRE>
<P><P>Duplicates a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. 
<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddIn</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object to be duplicated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method creates a new <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that represents the same surface memory as an existing <B>DirectDrawSurface</B> object. This duplicate can be used just like the original object. The surface memory is released after the last object referencing it is released. A primary surface, 3D surface, or implicitly created surface cannot be duplicated. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010900">enumDisplayModes</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void enumDisplayModes(int d, DDSurfaceDesc s, IUnknown args,
        IEnumModesCallback fn);
</FONT></PRE>
<P><P>Enumerates all of the display modes the hardware exposes through the DirectDraw object that are compatible with a provided surface description. If null is passed for the surface description, all exposed modes are enumerated. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This flag Can be <A HREF="DirectXConstants.htm#com_000300065b01021d">DDEDM_REFRESHRATES</A>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object that will be checked against available modes. If the value of this parameter is null, all modes are enumerated. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>args</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Application-defined data that will be passed to each enumeration member. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fn</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The callback interface containing the callback function that the enumeration procedure will call every time a match is found. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method enumerates the <A HREF="DDSurfaceDesc.htm#com_000300061f010003">backBufferCount</A> field of the <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> class. If you use the <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A> method to set the refresh rate of a new mode, you must use <B>enumDisplayModes</B> to enumerate the <B>backBufferCount</B> field. 
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640010d00">getDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640011600">restoreDisplayMode</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010a00">flipToGDISurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void flipToGDISurface();
</FONT></PRE>
<P><P>Makes the surface that GDI writes to the primary surface. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>This method can be called at the end of a page-flipping application to ensure that the display memory that the GDI is writing to is visible to the user. 
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011000">getGDISurface</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010b00">getAvailableTotalMem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getAvailableTotalMem(int[] ddsCaps);
</FONT></PRE>
<P><P>Retrieves the total available amount of display memory. 
<P><B>Return Value:</B> <P>Returns the amount of memory. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddsCaps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of the values found in the <B>DDSCaps</B> class. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>A display adapter card may make no distinction between two different memory types. 
<P>For example, the adapter might use the same portion of display memory to store z-buffers and textures. So, allocating one type of surface (for example, a z-buffer) can affect the amount of display memory available for another type of surface (for example, textures). Therefore, it is best to first allocate an application's fixed resources (such as front, back, and z-buffers) before determining how much memory is available for dynamic use, such as texture mapping. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010c00">getCaps</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getCaps(DDCaps driverCaps, DDCapsFx driverCapsFx,
        DDCaps helCaps, DDCapsFx helCapsFx);
</FONT></PRE>
<P><P>Fills in the capabilities of the device driver for the hardware and the hardware emulation layer (HEL). 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>driverCaps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDCaps.htm">DDCaps</A> object that receives the capabilities of the hardware, as reported by the device driver. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>driverCapsFx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDCapsFx.htm">DDCapsFx</A> object that receives the capabilities of the hardware, as reported by the device driver. The <B>DDCapsFx</B> class is used with classes that contain more than 256 bytes of member data. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>helCaps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDCaps.htm">DDCaps</A> object that receives the capabilities of the HEL. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>helCapsFx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDCapsFx.htm">DDCapsFx</A> object that receives the capabilities of the HEL. The <B>DDCapsFx</B> class is used with classes that contain more than 256 bytes of member data. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010d00">getDisplayMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getDisplayMode(DDSurfaceDesc surface);
</FONT></PRE>
<P><P>Retrieves the current display mode. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>surface</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object that receives a description of the surface. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>An application should not save the information returned by this method to restore the display mode on clean-up. The application should use the <A HREF="DirectDraw.htm#com_0003000640011600">restoreDisplayMode</A> method to restore the mode on clean-up, which avoids mode-setting conflicts that could arise in a multiprocess environment. 
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640011600">restoreDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010e00">getFourCCCodes</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFourCCCodes(int[] size);
</FONT></PRE>
<P><P>Retrieves the FourCC codes supported by the DirectDraw object. This method can also retrieve the number of codes supported. 

<P><B>Return Value:</B> <P>Returns an address of an array that contains the codes. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array variable that receives the FourCC codes supported by this DirectDraw object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640010f00">getFreeMem</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFreeMem(int [] ddsCaps);
</FONT></PRE>
<P><P>Retrieves the amount of display memory currently free. 
<P><B>Return Value:</B> <P>Returns the amount of free display memory. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddsCaps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An array of the values found in the <B>DDSCaps</B> class. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method provides only a snapshot of the current display-memory state. The amount of free display memory is subject to change as surfaces are created and released. Therefore, you should use the free memory value only as an approximation. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011000">getGDISurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawSurface getGDISurface();
</FONT></PRE>
<P><P>Retrieves the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that currently represents the surface memory that the Graphical Device Interface (GDI) is treating as the primary surface. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object if successful; otherwise, returns null. 

<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640010a00">flipToGDISurface</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011100">getMonitorFrequency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getMonitorFrequency();
</FONT></PRE>
<P><P>Retrieves the frequency of the monitor being driven by the DirectDraw object. The frequency value is returned in Hz multiplied by 100. For example, 60Hz is returned as 6000. 

<P><B>Return Value:</B> <P>Returns the monitor frequency. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011200">getNumFourCCCodes</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getNumFourCCCodes();
</FONT></PRE>
<P><P>Retrieves the number of FourCC codes in the array <A HREF="DirectDraw.htm#com_0003000640010e00">getFourCCCodes</A> specifies. 

<P><B>Return Value:</B> <P>Returns the number of FourCCCodes. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011300">getScanLine</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getScanLine();
</FONT></PRE>
<P><P>Retrieves the scan line that is currently being drawn on the monitor. 

<P><B>Return Value:</B> <P>Returns the scan line. 

<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011400">getVerticalBlankStatus</A>, <A HREF="DirectDraw.htm#com_0003000640011c00">waitForVerticalBlank</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011400">getVerticalBlankStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getVerticalBlankStatus();
</FONT></PRE>
<P><P>Retrieves the status of the vertical blank. 
<P><B>Return Value:</B> <P>Returns 1 if a vertical blank is occurring; otherwise, returns 0. 

<P><B>Remarks:</B> <P>To synchronize with the vertical blank, use the <A HREF="DirectDraw.htm#com_0003000640011c00">waitForVerticalBlank</A> method. 
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011300">getScanLine</A>, <A HREF="DirectDraw.htm#com_0003000640011c00">waitForVerticalBlank</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011500">loadPaletteFromBitmap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette loadPaletteFromBitmap(String bName);
</FONT></PRE>
<P><P>Loads a palette. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bName</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Name of the bitmap that contains the palette to load. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011600">restoreDisplayMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void restoreDisplayMode();
</FONT></PRE>
<P><P>Resets the mode of the display device hardware for the primary surface to what it was before the <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A> method was called. Exclusive-level access is required to use this method. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>, <A HREF="DirectDraw.htm#com_0003000640011700">setCooperativeLevel</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011700">setCooperativeLevel</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCooperativeLevel(Component c, int flags);
</FONT></PRE>
<P><P>Determines the top-level behavior of the application (the primary method that does so). 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Component</B> used for the application. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of <A HREF="DirectXConstants.htm">DDSCL_</A> type. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>You must call the <B>show()</B> or <B>addNotify()</B> method before calling <B>setCooperativeLevel</B>
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>, <A HREF="DirectSound.htm#com_0003000648010100">compact</A>, <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011800">setCooperativeLevel</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCooperativeLevel(int hdl, int flags);
</FONT></PRE>
<P><P>Serves as a helper for the <A HREF="DirectDraw.htm#com_0003000640011700">setCooperativeLevel(Component, int)</A> method and remains for use by more advanced programmers. The <B>setCooperativeLevel</B> method also determines the top-level behavior of the application. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hdl</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Microsoft&#174; Windows&#174; handle used for the application. Applications can use DirectDraw with multiple windows. Therefore, <B>setCooperativeLevel</B> does not require a window handle to be specified if the application is requesting the <B>DDSCL_NORMAL</B> mode. By passing a null to the window handle, all the windows can be used simultaneously in normal Windows mode. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of the <A HREF="DirectXConstants.htm">DDSCL_</A> type. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011900">setDisplayMode</A>, <A HREF="DirectSound.htm#com_0003000648010100">compact</A>, <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011900">setDisplayMode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setDisplayMode(int w, int h, int bpp, int ref, int mode);
</FONT></PRE>
<P><P>Sets the mode of the display-device hardware. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>w</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The width of the new mode. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>h</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The height of the new mode. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bpp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bits per pixel of the new mode. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ref</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The refresh rate of the new mode. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>mode</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Reserved; value must be 0. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="DirectDraw.htm#com_0003000640011700">setCooperativeLevel</A> method must be used to set exclusive-level access before the mode can be changed. If other applications have created a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object on the primary surface and the mode is changed, those applications' primary surface objects return <B>DDERR_SURFACELOST</B> until they are restored. 
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011600">restoreDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640010d00">getDisplayMode</A>, <A HREF="DirectDraw.htm#com_0003000640010900">enumDisplayModes</A>, <A HREF="DirectDraw.htm#com_0003000640011700">setCooperativeLevel</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011a00">systemBpp</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int systemBpp();
</FONT></PRE>
<P><P>Retrieves the current system's bits-per-pixel value. 

<P><B>Return Value:</B> <P>Returns the bits-per-pixel value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011b00">tickCount</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int tickCount();
</FONT></PRE>
<P><P>Retrieves the current tick count. 

<P><B>Return Value:</B> <P>Returns the tick count. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000640011c00">waitForVerticalBlank</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void waitForVerticalBlank(int flags, int handle);
</FONT></PRE>
<P><P>Assists the application tosynchronize itself with the vertical-blank interval. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDWAITVB_</A> type; flag specifies how long to wait for the vertical blank. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>handle</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of the event to be triggered when the vertical blank begins. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDraw.htm#com_0003000640011400">getVerticalBlankStatus</A>, <A HREF="DirectDraw.htm#com_0003000640011300">getScanLine</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

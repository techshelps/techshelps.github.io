<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class DirectDrawSurface</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="DirectDrawSurface.htm#com_0003000644010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="DirectDrawPalette.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="def_dirx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="DirectInput.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.directX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class DirectDrawSurface</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class DirectDrawSurface implements <A HREF="IDirectDrawSurface.htm">IDirectDrawSurface</A>
{
  // Methods
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010100">addAttachedSurface</A>(DirectDrawSurface ddS);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010200">addOverlayDirtyRect</A>(Rect r);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010300">blt</A>(Rect dest, DirectDrawSurface ddS, Rect src,
        int flags);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010400">bltColorFill</A>(Rect dest, int fillValue);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010500">bltFast</A>(int dx, int dy, DirectDrawSurface ddS,
        Rect src, int trans);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010600">bltFx</A>(Rect dest, DirectDrawSurface ddS, Rect src,
        int flags, DDBltFx bltFx);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010700">copyBitmap</A>(DirectDrawBitmap val, int cx, int cy,
        int dx, int dy);
  public Direct3dDevice <A HREF="DirectDrawSurface.htm#com_0003000644010800">create3DDevice</A>(_Guid g);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010900">deleteAttachedSurface</A>(int flags,
        DirectDrawSurface ddS);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010a00">enumAttachedSurfaces</A>(IUnknown args,
        IEnumSurfacesCallback fn);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010b00">enumOverlayZOrders</A>(int flags, IUnknown args,
        IEnumZOrdersCallback fn);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644010c00">flip</A>(DirectDrawSurface ddS, int flags);
  public DirectDrawSurface <A HREF="DirectDrawSurface.htm#com_0003000644010d00">getAttachedSurface</A>(int caps);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010e00">getBltStatus</A>(int flags);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644010f00">getCaps</A>();
  public DirectDrawClipper <A HREF="DirectDrawSurface.htm#com_0003000644011000">getClipper</A>();
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011100">getColorKey</A>(int flags, DDColorKey val);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011200">getDC</A>();
  public IUnknown <A HREF="DirectDrawSurface.htm#com_0003000644011300">getDDInterface</A>();
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011400">getFlipStatus</A>(int flags);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011500">getOverlayPositionX</A>();
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011600">getOverlayPositionY</A>();
  public DirectDrawPalette <A HREF="DirectDrawSurface.htm#com_0003000644011700">getPalette</A>();
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011800">getPixelFormat</A>(DDPixelFormat pf);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011900">getSurfaceDesc</A>(DDSurfaceDesc surface);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011a00">isLost</A>();
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011b00">lock</A>(Rect r, DDSurfaceDesc d, int flags, int hnd,
        byte[] memory);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011c00">releaseDC</A>(int hdc);
  public int <A HREF="DirectDrawSurface.htm#com_0003000644011d00">restore</A>();
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011e00">setClipper</A>(DirectDrawClipper val);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644011f00">setColorKey</A>(int flags, DDColorKey val);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012000">setOverlayPosition</A>(int x, int y);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012100">setPalette</A>(DirectDrawPalette ddp);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012200">unlock</A>(Rect r, DDSurfaceDesc d, byte[] memory);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012300">updateOverlay</A>(Rect r, DirectDrawSurface ddS, Rect d,
        int flags);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012400">updateOverlayDisplay</A>(int flags);
  public void <A HREF="DirectDrawSurface.htm#com_0003000644012500">updateOverlayZOrder</A>(int flags, DirectDrawSurface ddS);
}
</FONT></PRE>
<P>Applications use the methods of the <B>DirectDrawSurface</B> class to create Microsoft&#174; DirectDraw&#174; surface objects and work with system-level variables. 
<P><B>Note</B>  This class does not provide an <B>initialize</B> method. Use the <A HREF="DirectDraw.htm#com_0003000640010700">DirectDraw.createSurface</A> method to create and initialize <B>DirectDrawSurface</B> objects. 
<H3 STYLE="color:#333366"><A NAME="com_0003000644010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000644010100">addAttachedSurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addAttachedSurface(DirectDrawSurface ddS);
</FONT></PRE>
<P><P>Attaches a surface to another surface. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object to attach. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644010900">deleteAttachedSurface</A>, <A HREF="DirectDrawSurface.htm#com_0003000644010a00">enumAttachedSurfaces</A>, <A HREF="DirectDrawSurface.htm#com_0003000644010c00">flip</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010200">addOverlayDirtyRect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addOverlayDirtyRect(Rect r);
</FONT></PRE>
<P><P>Builds the list of the rectangles that need to be updated the next time the <A HREF="DirectDrawSurface.htm#com_0003000644012400">updateOverlayDisplay</A> method is called. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="Rect.htm">Rect</A> object that needs to be updated. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is used for the software implementation. It is not needed if the overlay support is provided by the hardware. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644012400">updateOverlayDisplay</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010300">blt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int blt(Rect dest, DirectDrawSurface ddS, Rect src, int flags);
</FONT></PRE>
<P><P>Performs a bit block transfer. 
<P><B>Return Value:</B> <P>Returns S_OK or 0 if the blit was set successfully; otherwise, returns an HRESULT error code. Use the <B>DDBLT_WAIT</B> flag to modify the return behavior as previously discussed. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the destination surface to be blitted to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that is the source for the blit operation. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>src</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the source surface to be blitted from. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more of these values: 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b010219">DDCOOPERATIVE_CLIPTOCOMPONENT</A> or 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b01021a">DDCOOPERATIVE_OFFSETTOCOMPONENT</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0101b7">DDBLT_ALPHADEST</A> 
 </DT><DD><A HREF="DirectXConstants.htm#com_000300065b0101c0">DDBLT_ASYNC</A> 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b0101b9">DDBLT_ALPHADESTNEG</A> 
 </DT><DD><A HREF="DirectXConstants.htm#com_000300065b0101c5">DDBLT_KEYDEST</A> 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b0101bc">DDBLT_ALPHASRC</A> 
 </DT><DD><A HREF="DirectXConstants.htm#com_000300065b0101c7">DDBLT_KEYSRC</A> 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b0101be">DDBLT_ALPHASRCNEG</A> 
 </DT><DD><A HREF="DirectXConstants.htm#com_000300065b0101cb">DDBLT_WAIT</A> 
</DD></DL>
</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is capable of synchronous or asynchronous blits, either display memory to display memory, display memory to system memory, system memory to display memory, or system memory to system memory. The blits can be performed by using z-information, alpha information, source color keys, and destination color keys. Arbitrary stretching or shrinking will be performed if the source and destination rectangles are not the same size. 
<P>Typically, <B>blt</B> returns immediately with an error if the blitter is busy and the blit could not be set up. The <A HREF="DirectXConstants.htm#com_000300065b0101cb">DDBLT_WAIT</A> flag can alter this behavior so that the method will either wait until the blit can be set up or another error occurs before it returns. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010400">bltColorFill</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int bltColorFill(Rect dest, int fillValue);
</FONT></PRE>
<P><P>Fills the given rectangle on the surface with the given fill value. 

<P><B>Return Value:</B> <P>Returns S_OK or 0 if the operation is successful; otherwise, returns an error code. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the destination surface to be filled. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fillvalue</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The fill value to fill the rectangle with. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010500">bltFast</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int bltFast(int dx, int dy, DirectDrawSurface ddS, Rect src,
        int trans);
</FONT></PRE>
<P><P>Performs a source copy blit or transparent blit by using a source color key or destination color key. This method always attempts an asynchronous blit if it is supported by the hardware. 
<P><B>Return Value:</B> <P>Returns S_OK or 0 if the operation is successful; otherwise, returns an error code. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x and y coordinates to blit to on the destination surface. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that is the source for the blit operation. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>src</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the source surface to be blitted from. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>trans</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDBLTFAST_</A> type, specifying the type of transfer. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method works only on display memory surfaces and cannot clip when blitting. The software implementation of <B>bltFast</B> is 10 percent faster than the <A HREF="DirectDrawSurface.htm#com_0003000644010300">blt</A> method. However, there is no speed difference between the two if display hardware is being used. 
<P>Typically, <B>bltFast</B> returns immediately with an error if the blitter is busy and the blit cannot be set up. You can use the <A HREF="DirectXConstants.htm#com_000300065b0101d4">DDBLTFAST_WAIT</A> flag, however, if you want this method to not return until either the blit can be set up or another error occurs. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010600">bltFx</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int bltFx(Rect dest, DirectDrawSurface ddS, Rect src, int flags,
        DDBltFx bltFx);
</FONT></PRE>
<P><P>This method is capable of synchronous or asynchronous blits, in one of the following formats: 
<UL><LI>display memory to display memory 
<LI>display memory to system memory 
<LI>system memory to display memory 
<LI>system memory to system memory 
</UL>
<P>The blits can be performed by using <B>z-information</B>, <B>alpha information</B>, <B>source color keys</B>, and <B>destination color keys</B>. Arbitrary stretching or shrinking will be performed if the source and destination rectangles are not the same size. 

<P><B>Return Value:</B> <P>Returns S_OK or 0 if the operation is successful; otherwise, returns an error code. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the destination surface to be blitted to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that is the source for the blit operation. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>src</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the upper-left and lower-right points of the rectangle on the source surface to be blitted from. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is currently not used and must be set to 0. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bltfx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DDBltFx.htm">DDBltFx</A> object that defines the parameters for the blit operations. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010700">copyBitmap</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void copyBitmap(DirectDrawBitmap val, int cx, int cy, int dx,
        int dy);
</FONT></PRE>
<P><P>Copies a bitmap. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawBitmap.htm">DirectDrawBitmap</A> object 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bitmap's upper-left x coordinate. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bitmap's upper-left y coordinate. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bitmap's lower-right x coordinate. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dy</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The bitmap's lower-right y coordinate. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010800">create3DDevice</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Direct3dDevice create3DDevice(_Guid g);
</FONT></PRE>
<P><P>Creates a device from the surface if you want a rendering surface. This method emulates the <B>IUnknown</B> interface's <B>HRESULT QueryInterface(REFIID riid, LPVOID* obp);</B> COM method inherited by DirectX3 COM interfaces. 

<P><B>Return Value:</B> <P>Returns a <A HREF="Direct3dDevice.htm">Direct3dDevice</A> object that acts as a rendering surface. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>g</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A globally unique identifier retrieved with the <B>enumDevices</B> method. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010900">deleteAttachedSurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void deleteAttachedSurface(int flags, DirectDrawSurface ddS);
</FONT></PRE>
<P><P>Detaches two attached surfaces. The detached surface is not released. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Reserved; must be 0. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object to detach. If this parameter is null, all attached surfaces are detached. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644010c00">flip</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010a00">enumAttachedSurfaces</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void enumAttachedSurfaces(IUnknown args, IEnumSurfacesCallback fn);
</FONT></PRE>
<P><P>Enumerates all the surfaces attached to a given surface. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>args</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Application-defined structure that is passed to the enumeration member every time it is called. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fn</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Callback interface that contains callback function that will be called for each surface that is attached to this surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010b00">enumOverlayZOrders</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void enumOverlayZOrders(int flags, IUnknown args,
        IEnumZOrdersCallback fn);
</FONT></PRE>
<P><P>Enumerates the overlay surfaces on the specified destination. The overlays can be enumerated in front-to-back or back-to-front order. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDENUMOVERLAYZ_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>args</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User-defined context that will be passed to the callback function for each overlay surface. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fn</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Callback interface that contains the callback function that will be called for each surface being overlaid on this surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010c00">flip</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void flip(DirectDrawSurface ddS, int flags);
</FONT></PRE>
<P><P>Makes the surface memory associated with the <A HREF="DirectXConstants.htm#com_000300065b01028c">DDSCAPS_BACKBUFFER</A> surface become associated with the front-buffer surface. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object that will be flipped to. The default for this parameter is null; in which case, <B>flip</B> cycles through the buffers in the order they are attached to each other. This parameter is used only as an override. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Can be <A HREF="DirectXConstants.htm#com_000300065b010227">DDFLIP_WAIT</A>. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method can be called only by a surface that has the <A HREF="DirectXConstants.htm#com_000300065b01028e">DDSCAPS_FLIP</A> and <A HREF="DirectXConstants.htm#com_000300065b01028f">DDSCAPS_FRONTBUFFER</A> values set. The display memory previously associated with the front buffer is associated with the back buffer. If there is more than one back buffer, a ring is formed and the surface memory buffers cycle one step through it every time <B>flip</B> is called. 
<P>The <I>ddS</I> parameter is used in rare cases when the back buffer is not the buffer that should become the front buffer. Typically this parameter is null. 
<P>The <B>flip</B> method will always be synchronized with the vertical blank. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011400">getFlipStatus</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010d00">getAttachedSurface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawSurface getAttachedSurface(int caps);
</FONT></PRE>
<P><P>Obtains the attached surface that has the specified capabilities. 
<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object if successful; otherwise, returns null. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>caps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A value that specifies the hardware capabilities of the surface. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Attachments are used to connect multiple <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> objects into complex structures, like the ones needed to support 3D page flipping with z-buffers. This method fails if more than one surface is attached that matches the capabilities requested. In this case, the application must use the <A HREF="DirectDrawSurface.htm#com_0003000644010a00">enumAttachedSurfaces</A> method to obtain the attached surfaces. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010e00">getBltStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getBltStatus(int flags);
</FONT></PRE>
<P><P>Obtains the blitter status. 

<P><B>Return Value:</B> <P>Returns <A HREF="DirectXConstants.htm#com_000300065b0101af">DD_OK</A> if a blitter is present, <A HREF="DirectXConstants.htm#com_000300065b010226">DDERR_WASSTILLDRAWING</A> if the blitter is busy. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDGBS_</A> type. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644010f00">getCaps</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getCaps();
</FONT></PRE>
<P><P>Retrieves the capabilities of the surface. These capabilities are not necessarily related to the capabilities of the display device. 

<P><B>Return Value:</B> <P>Returns the hardware capabilities of the surface. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011000">getClipper</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawClipper getClipper();
</FONT></PRE>
<P><P>Retrieves the <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object associated with this surface. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object if successful; null otherwise. 

<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011e00">setClipper</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011100">getColorKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getColorKey(int flags, DDColorKey val);
</FONT></PRE>
<P><P>Retrieves the color key value for the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDCKEY_</A> type, specifying which color key to retrieve information for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DDColorKey.htm">DDColorKey</A> object that receives the current values for the specified color key of the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011f00">setColorKey</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011200">getDC</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getDC();
</FONT></PRE>
<P><P>Creates a Graphical Device Interface-compatible handle of a device context for the surface. 

<P><B>Return Value:</B> <P>Returns the handle of a device context. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011300">getDDInterface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IUnknown getDDInterface();
</FONT></PRE>
<P><P>Retrieves an interface to the DirectDraw object that was used to create the surface. 

<P><B>Return Value:</B> <P>Returns the <B>IUnknown</B> object if successful; null otherwise. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011400">getFlipStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFlipStatus(int flags);
</FONT></PRE>
<P><P>Indicates whether the surface has finished its flipping process. 

<P><B>Return Value:</B> <P>Returns <A HREF="DirectXConstants.htm#com_000300065b0101af">DD_OK</A> if successful, or <A HREF="DirectXConstants.htm#com_000300065b010226">DDERR_WASSTILLDRAWING</A> if the surfaces has not finished its flipping process. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDGFS_</A> type. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644010c00">flip</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011500">getOverlayPositionX</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getOverlayPositionX();
</FONT></PRE>
<P><P>Given a visible, active overlay surface (<A HREF="DirectXConstants.htm#com_000300065b010295">DDSCAPS_OVERLAY</A> flag set), this method returns the x-display coordinate of the surface. 

<P><B>Return Value:</B> <P>Returns the x coordinate. 

<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011600">getOverlayPositionY</A>, <A HREF="DirectDrawSurface.htm#com_0003000644012000">setOverlayPosition</A>, <A HREF="DirectDrawSurface.htm#com_0003000644012300">updateOverlay</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011600">getOverlayPositionY</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getOverlayPositionY();
</FONT></PRE>
<P><P>Given a visible, active overlay surface (<A HREF="DirectXConstants.htm#com_000300065b010295">DDSCAPS_OVERLAY</A> flag set), this method returns the y-display coordinate of the surface. 

<P><B>Return Value:</B> <P>Returns the y coordinate. 

<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011500">getOverlayPositionX</A>, <A HREF="DirectDrawSurface.htm#com_0003000644012000">setOverlayPosition</A>, <A HREF="DirectDrawSurface.htm#com_0003000644012300">updateOverlay</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011700">getPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectDrawPalette getPalette();
</FONT></PRE>
<P><P>Retrieves the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> structure associated with this surface. 

<P><B>Return Value:</B> <P>Returns the <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object if successful; null otherwise. This is null if no <B>DirectDrawPalette</B> object is associated with this surface. If the surface is the primary surface, or a back buffer to the primary surface, and the primary surface is in 8-bpp mode, this method returns the system palette. 

<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644012100">setPalette</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011800">getPixelFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getPixelFormat(DDPixelFormat pf);
</FONT></PRE>
<P><P>Retrieves the color and pixel format of the surface. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pf</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDPixelFormat.htm">DDPixelFormat</A> object that receives a detailed description of the current pixel and color space format of the surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011900">getSurfaceDesc</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getSurfaceDesc(DDSurfaceDesc surface);
</FONT></PRE>
<P><P>Retrieves a description of the surface in its current condition. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>surface</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object that receives the current description of this surface. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011a00">isLost</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int isLost();
</FONT></PRE>
<P><P>Determines if the surface memory associated with a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object has been freed. 
<P><B>Return Value:</B> <P>Returns DD_OK if the memory has not been freed. 

<P><B>Remarks:</B> <P>You can use this method to reallocate surface memory. When a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object loses its surface memory, most methods perform no function. 
<P>Surfaces can lose their memory when the mode of the display card is changed, or when an application receives exclusive access to the display card and frees all of the surface memory currently allocated on the display card. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011d00">restore</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011b00">lock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void lock(Rect r, DDSurfaceDesc d, int flags, int hnd,
        byte[] memory);
</FONT></PRE>
<P><P>Obtains the contents of the surface memory. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that identifies the region of surface that is being locked. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object that receives the relevant details about the surface. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of <A HREF="DirectXConstants.htm">DDLOCK_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hnd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handle of a system event that is triggered when the surface is ready to be locked. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>memory</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Array variable that receives the contents of the surface memory. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The contents of the surface memory remain valid until the corresponding the <A HREF="DirectDrawSurface.htm#com_0003000644012200">unlock</A> method is called. Applications that change the contents must flush the changes back into system memory (use the <B>unlock</B> for this as well). 
<P>Your application cannot blit from a region of a surface that is locked. 
<P>Typically, <B>lock</B> returns immediately when a lock cannot be obtained because a blit is in progress. You can use the <A HREF="DirectXConstants.htm#com_000300065b010253">DDLOCK_WAIT</A> flag if you want the method to continue trying to obtain a lock. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644012200">unlock</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011c00">releaseDC</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void releaseDC(int hdc);
</FONT></PRE>
<P><P>Releases the handle of a device context previously obtained by using the <A HREF="DirectDrawSurface.htm#com_0003000644011200">getDC</A> method. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hdc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of a device context. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011d00">restore</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int restore();
</FONT></PRE>
<P><P>Restores a surface that has been lost. This occurs when the surface memory associated with the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object has been freed. 
<P><B>Return Value:</B> <P>Returns <A HREF="DirectXConstants.htm#com_000300065b0101af">DD_OK</A> is successful. 

<P><B>Remarks:</B> <P>Surfaces can be lost because the mode of the display card was changed or because an application received exclusive access to the display card and freed all of the surface memory currently allocated on the card. When a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object loses its surface memory, many methods will return DDERR_SURFACELOST and perform no other function. The <B>restore</B> method will reallocate surface memory and reattach it to the <B>DirectDrawSurface</B> object. 
<P>A single call to this method will restore a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object's associated implicit surfaces (back buffers, and so on). An attempt to restore an implicitly created surface will result in an error. <B>restore</B> will not work across explicit attachments created by using the <A HREF="DirectDrawSurface.htm#com_0003000644010100">addAttachedSurface</A> method&#151;each of these surfaces must be restored individually. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011a00">isLost</A>, <A HREF="DirectDrawSurface.htm#com_0003000644010100">addAttachedSurface</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011e00">setClipper</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setClipper(DirectDrawClipper val);
</FONT></PRE>
<P><P>Attaches a <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object to a <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object that will be attached to the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. If this parameter is null, the current <B>DirectDrawClipper</B> object will be detached. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is primarily used by surfaces that are being overlaid on or blitted to the primary surface. However, it can be used on any surface. After a <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object has been attached and a clip list is associated with it, the <B>DirectDrawClipper</B> object will be used for the <A HREF="DirectDrawSurface.htm#com_0003000644010300">blt</A> and <A HREF="DirectDrawSurface.htm#com_0003000644012300">updateOverlay</A> operations involving the parent <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. This method can also detach a <B>DirectDrawSurface</B> object's current <B>DirectDrawClipper</B> object. 
<P>If this method is called several times consecutively on the same surface for the same <A HREF="DirectDrawClipper.htm">DirectDrawClipper</A> object, the reference count for the object is incremented only once. Subsequent calls do not affect the object's reference count. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011000">getClipper</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644011f00">setColorKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setColorKey(int flags, DDColorKey val);
</FONT></PRE>
<P><P>Sets the color key value for the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object if the hardware supports color keys on a per surface basis. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDCKEY_</A> type, specifying which color key to set. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DDColorKey.htm">DDColorKey</A> object that contains the new color key values for the <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011100">getColorKey</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012000">setOverlayPosition</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setOverlayPosition(int x, int y);
</FONT></PRE>
<P><P>Changes the display coordinates of an overlay surface. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">New x-display coordinate. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">New y-display coordinate. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011500">getOverlayPositionX</A>, <A HREF="DirectDrawSurface.htm#com_0003000644011600">getOverlayPositionY</A>, <A HREF="DirectDrawSurface.htm#com_0003000644012300">updateOverlay</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012100">setPalette</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPalette(DirectDrawPalette ddp);
</FONT></PRE>
<P><P>Attaches the specified <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object to a surface. The surface uses this palette for all subsequent operations. The palette change takes place immediately, without regard to refresh timing. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawPalette.htm">DirectDrawPalette</A> object that this surface should use for future operations. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If this method is called several times consecutively on the same surface for the same palette, the reference count for the palette is incremented only once. Subsequent calls do not effect the palette's reference count. 
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011700">getPalette</A>, <A HREF="DirectDraw.htm#com_0003000640010300">com.ms.directX.DirectDraw.createPalette</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012200">unlock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void unlock(Rect r, DDSurfaceDesc d, byte[] memory);
</FONT></PRE>
<P><P>Notifies DirectDraw that the direct surface manipulations are complete and copies the contents of the <I>memory</I> buffer into the surface. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that identifies the region of surface that receives the changes. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DDSurfaceDesc.htm">DDSurfaceDesc</A> object returned by the <A HREF="DirectDrawSurface.htm#com_0003000644011b00">lock</A> method. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>memory</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Array variable that contains the new contents of the surface memory. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644011b00">lock</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012300">updateOverlay</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void updateOverlay(Rect r, DirectDrawSurface ddS, Rect d, int flags);
</FONT></PRE>
<P><P>Repositions or modifies the visual attributes of an overlay surface. These surfaces must have the <A HREF="DirectXConstants.htm#com_000300065b010295">DDSCAPS_OVERLAY</A> value set. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the x, y, width, and height of the region on the source surface being used as the overlay. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> that is being overlaid. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="Rect.htm">Rect</A> object that defines the x, y, width, and height of the region on the destination surface that the overlay should be moved to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more values of <A HREF="DirectXConstants.htm">DDOVER_</A> type. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012400">updateOverlayDisplay</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void updateOverlayDisplay(int flags);
</FONT></PRE>
<P><P>Repaints the rectangles in the dirty rectangle list of all active overlays. This clears the dirty rectangle list. This method is for software emulation only&#151;it does nothing if the hardware supports overlays. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Type of update to perform. Can be <A HREF="DirectXConstants.htm#com_000300065b010266">DDOVER_REFRESHDIRTYRECTS</A> or <A HREF="DirectXConstants.htm#com_000300065b010265">DDOVER_REFRESHALL</A>. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644010200">addOverlayDirtyRect</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000644012500">updateOverlayZOrder</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void updateOverlayZOrder(int flags, DirectDrawSurface ddS);
</FONT></PRE>
<P><P>Sets the z-order of an overlay. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DDOVERZ_</A> type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ddS</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="DirectDrawSurface.htm">DirectDrawSurface</A> object to be used as a relative position in the overlay chain. This parameter is needed only for <A HREF="DirectXConstants.htm#com_000300065b01026b">DDOVERZ_INSERTINBACKOF</A> and <A HREF="DirectXConstants.htm#com_000300065b01026c">DDOVERZ_INSERTINFRONTOF</A>. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="DirectDrawSurface.htm#com_0003000644010b00">enumOverlayZOrders</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

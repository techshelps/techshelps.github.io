<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting Started</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="JDirect"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Getting_Started.htm#jdirect_0007000202010000">Example</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Getting_Started.htm#jdirect_0007000202020000">Quick Syntax Reference</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jdirect2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="JDirect"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="jdirect.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="jdirect.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="JDirect"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Marshaling.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>About J/Direct</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">JDirect</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Getting Started</H2>
<P>This section provides a message box application that uses <B>@dll.import</B>. Then, the syntaxes of the <B>@dll.import</B>, <B>@dll.struct</B>, and <B>@dll.structmap</B> compiler directives are presented.
 


<H3 STYLE="color:#333366"><A NAME="jdirect_0007000202010000">Example</A></H3><P>Using Microsoft&#174; J/Direct&#153; to call Win32 DLLs from Java code is straightforward. Here is a short Java application that displays a message box.
<PRE><FONT FACE="Courier" SIZE="2">
class ShowMsgBox {
   public static void main(String args[])
   {
      MessageBox(0, "It worked!", 
                 "This messagebox brought to you from Java", 0);
   }
&#009;   
   /** @dll.import("USER32") */
   private static native int MessageBox(int hwndOwner, String text, 
                                        String title, int fuStyle);
} 
</FONT></PRE>
<P>The <B>@dll.import</B> directive tells the compiler that the <B>MessageBox</B> 
method will link to the Win32 USER32.DLL using the J/Direct protocol rather than the Raw Native Interface protocol supported in previous versions. In addition, the Microsoft Win32 VM for Java provides automatic type marshaling from <B>String</B> objects to the null-terminated strings expected by C. 

<P>You may have noticed that it is not necessary to indicate whether the ANSI <B>MessageBox</B> (<B>MessageBoxA</B>) function or the Unicode <B>MessageBox</B> function (<B>MessageBoxW</B>) should be called. In the previous example, the ANSI version is always called. The <A HREF="ANSI_and_Unicode.htm">How the VM Chooses Between ANSI and Unicode</A> 
section explains how to use the <I>auto</I> modifier to call the optimal version of the function, depending on the version of Microsoft&#174; Windows&#174; that is hosting the application. 

<H3 STYLE="color:#333366"><A NAME="jdirect_0007000202020000">Quick Syntax Reference</A></H3><P>The following sections give a quick reference to the <B>@dll.import</B>, <B>@dll.struct</B>, and <B>@dll.structmap</B> directives. For each directive, the required syntax is shown and explained. 
<P><A HREF="Getting_Started.htm#jdirect_0007000202020100">Syntax for @dll.import</A> 
<P><A HREF="Getting_Started.htm#jdirect_0007000202020200">Syntax for @dll.struct</A> 
<P><A HREF="Getting_Started.htm#jdirect_0007000202020300">Syntax for @dll.structmap</A>
<P>Be aware that white space within @dll directives can cause syntax errors. You can put white space between the directive and the comment tags, but not within the directive itself. For example, the following directive would cause a syntax error.
<PRE><FONT FACE="Courier" SIZE="2">  /**@dll.import("MyDll",   auto)*/</FONT></PRE>
<P>But this one would not cause an error.
<PRE><FONT FACE="Courier" SIZE="2">  /**       @dll.import("MyDll",auto) */
</FONT></PRE>
<H4 STYLE="color:#333366"><A NAME="jdirect_0007000202020100">Syntax for @dll.import</A></H4><P>The <B>@dll.import</B> directive should be placed just above the method declaration. The syntax of the directive is as follows.
<PRE><FONT FACE="Courier" SIZE="2">
  /**@dll.import("LibName",&lt;Modifier&gt;)*/
  ...method declaration...;
</FONT></PRE>
<P><I>LibName</I> is the name of the DLL that contains the function you want to invoke. <I>Modifier</I> is optional, and the value that you should supply for it varies depending on your needs. In the method declaration, you can use the function name that the DLL uses, or you can give the method a different name by using aliasing (see <A HREF="Aliasing.htm">Aliasing (Method Renaming)</A>). The Java data types that you choose for the parameters and for the return value of the method should be types that map to the types of the DLL function parameters and return value. See <A HREF="Marshaling.htm">How Data Types are Marshaled</A> for more information about how Java data types map to native types. 
<P>The following table presents the <B>@dll.import</B> syntax for several situations that are described in this article.
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Situation </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Required Syntax </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Explanation
 </B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calling Win 32 DLLs </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.import("LibName")*/
 </FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calling OLE APIs </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.import("LibName",ole)*/
 </FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Aliasing </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.import("LibName",entrypoint="DLLFunctionName")*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">In the method declaration, use the Java name that you selected.
 </FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Linking by Ordinal </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.import("LibName",entrypoint="#ordinal")*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"ordinal" is a 16-bit integer, specified in decimal, that indicates the DLL function that you are importing.
</FONT></TD>
</TR>
</TABLE>
<H4 STYLE="color:#333366"><A NAME="jdirect_0007000202020200">Syntax for @dll.struct</A></H4><P>The <B>@dll.struct</B> directive should be placed just above the class declaration. The syntax of <B>@dll.struct</B> is as follows.
<PRE><FONT FACE="Courier" SIZE="2">
  /**@dll.struct(&lt;LinkTypeModifier&gt;,&lt;pack=n&gt;)*/
  ...class declaration...;
</FONT></PRE>
<P><I>LinkTypeModifier</I> tells the compiler whether fields of type <B>String</B> and char represent ANSI or Unicode characters in native format. <I>LinkTypeModifier</I> can be <I>ansi</I>, <I>unicode</I>, or <I>auto</I>. If you do not specify <I>LinkTypeModifier</I>, <I>ansi</I> is used by default. The <A HREF="ANSI_and_Unicode.htm">How the VM Chooses Between ANSI and Unicode</A> section can help you learn more about which value to use for <I>LinkTypeModifier</I>.
<P>You can also specify <I>pack=n</I> to tell the compiler to set the packing size of the structure to either 1,2,4, or 8, depending on the value you specify for <I>n</I>. If you omit the <I>pack=n</I> modifier, the packing size is set to 8 by default. See the <A HREF="Marshaling.htm#jdirect_0007000203070500">Structure Packing</A> section of this article for more information on setting the packing size. 
<P>Within the class declaration, you need to supply fields whose Java types map to the types of the fields in the native structure, in the order they occur in the native structure. See the section on <A HREF="Marshaling.htm#jdirect_0007000203070100">Correspondence Between Types Inside Structures</A> for information about choosing the data types of the fields. 
<P>The following table describes the syntax for several situations in which you might use the <B>@dll.struct</B> directive.
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Situation </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Required Syntax </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Explanation
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Declare a Structure </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.struct()*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">When you do not specify <I>LinkTypeModifier</I>, char or <B>String</B> fields are assumed to represent ANSI characters.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set a Structure's Packing Size </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.struct(pack=n)*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><I>n</I> can be 1,2,4, or 8.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Declare a Structure that has a Field of Type char </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.struct(ansi)*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character field represents an ANSI character.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Declare a Structure with a Field of Type String and Set the Packing Size </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.struct(unicode,pack=n)*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>String</B> fields will be in Unicode format, and the packing size is set to 1,2,4, or 8, depending on the value of <I>n</I>.
</FONT></TD>
</TR>
</TABLE>
<H4 STYLE="color:#333366"><A NAME="jdirect_0007000202020300">Syntax for @dll.structmap</A></H4><P>The <B>@dll.structmap</B> directive is used to declare fixed-size strings and arrays embedded in structures. It should be placed within a structure that is declared with <B>@dll.struct</B>, and directly above the declaration of the fixed-size string or array field. 
For more information on how to use <B>@dll.structmap</B>, see the <A HREF="Marshaling.htm#jdirect_0007000203070300">Fixed-size Strings Embedded within Structures</A> and <A HREF="Marshaling.htm#jdirect_0007000203070400">Fixed-size Scalar Arrays Embedded within Structures</A> sections of this article.

<P>The following table presents the syntax of the <B>@dll.structmap</B> directive.
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Situation </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Required Syntax </B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Explanation
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Structure that contains a fixed-size string. </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.structmap([type=TCHAR[Size]])*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><I>Size</I> is a decimal integer that indicates the number of characters in the string, including space for the null terminator.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Structure that contains a fixed-size array. </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">/**@dll.structmap([type=FIXEDARRAY,size=n])*/ </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><I>n</I> is a decimal integer that represents the size of the array. 
</FONT></TD>
</TR>
</TABLE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Delegate</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Delegate.htm#Constructors">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Delegate.htm#Methods">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_lang.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_lang.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="MulticastDelegate.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.lang</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H1 STYLE="color:#333366">Class Delegate</H1>
<PRE><FONT FACE="Courier" SIZE="2">public abstract class Delegate implements java.lang.Cloneable
{
  // Constructors
  protected <A Href="delegate.htm#Delegate_0">Delegate</A>(Object objTarget, String strMethodName,
        String strMethodSignature);

  // Methods
  public boolean <A Href="delegate.htm#equals_0">equals</A>(Object objOther);
  public Object <A Href="delegate.htm#clone_1">clone</A>();
  public int <A Href="delegate.htm#hashCode_2">hashCode</A>();
  public final Method <A Href="delegate.htm#getMethod_3">getMethod</A>();
  public final Object <A Href="delegate.htm#getTarget_4">getTarget</A>();
  protected Delegate <A Href="delegate.htm#combine_5">combine</A>(Delegate delTail)
        throws MulticastNotSupportedException;
  protected Delegate <A Href="delegate.htm#remove_6">remove</A>(Delegate delValue);
  public static final Delegate <A Href="delegate.htm#combine_7">combine</A>(Delegate delA, Delegate delB);
  public static final Delegate <A Href="delegate.htm#combine_8">combine</A>(Delegate[] rgDelegates);
  public static final Delegate <A Href="delegate.htm#remove_9">remove</A>(Delegate delSource,
        Delegate delValue);
  public Delegate[] <A Href="delegate.htm#getInvocationList_10">getInvocationList</A>();
  protected final Object <A Href="delegate.htm#invokeHelper_11">invokeHelper</A>(Object[] args) throws Throwable;
  public final Object <A Href="delegate.htm#dynamicInvoke_12">dynamicInvoke</A>(Object[] args)
        throws IllegalArgumentException, InvocationTargetException;
}
</font></pre>
<P>This class provides support for Delegates.

</P>


<!-- ******************** -->
<A NAME="constructors"></A><H2>Constructors</H2>


<!-- * * * * * * * * * * -->
<H3><A NAME="Delegate_0">Delegate</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Delegate(Object objTarget, String strMethodName,
        String strMethodSignature);
</font></pre>
<P>Constructs a delegate that references a given object and a given method of that object. Since Delegate is an abstract class, subclasses of Delegate implement a constructor with the same parameters and call this inherited constructor. The <I>methodName</I> parameter must denote a method in the target object with a signature that is identical to the "invoke" method of the specific delegate implementation. If this is not the case, a RuntimeException is thrown. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><B>Parameter</B><TD><B>Description</B></TR>

<TR VALIGN=TOP><TD><I>objTarget</I><TD>the target object of the delegate. 
</TR>

<TR VALIGN=TOP><TD><I>strMethodName</I><TD>The name of the target method of the delegate. 
</TR>

<TR VALIGN=TOP><TD><I>strMethodSignature</I><TD>The signature of the target method of the delegate.
</TR>
</TABLE>
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- ******************** -->
<A NAME="methods"></A><H2>Methods</H2>


<!-- * * * * * * * * * * -->
<H3><A NAME="clone_1">clone</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Object clone();
</font></pre>
<P>Creates a copy of this delegate. 

<P><B>Return Value</B><P>Returns a copy of this delegate 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="combine_5">combine</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Delegate combine(Delegate delTail)
        throws MulticastNotSupportedException;
</font></pre>
<P>Combines this Delegate with the given Delegate. This method is overridden in the MulticastDelegate class to support multicasting. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="combine_7">combine</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static final Delegate combine(Delegate delA, Delegate delB);
</font></pre>
<P>Combines the two given Delegates to form a single Delegate. If both a and b are null, the result is null. If either a or b is null, the result is the non-null Delegate. If neither a nor b is null, the result is a new Delegate with an invocation list formed by concatenating the invocation lists of a and b, in that order. It is not considered an error for the invocation list to contain duplicate entries, that is, entries that refer to the same method on the same object. If neither a nor b is null, but a and b are of different actual types, an IllegalArgumentException is thrown. If neither a nor b is null, and a and b are of the same actual type, but that type doesn't derive from MulticastDelegate, a MulticastNotSupportedException exception is thrown. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="combine_8">combine</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static final Delegate combine(Delegate[] rgDelegates);
</font></pre>
<P>Combines the Delegates given by the Delegates array parameter to form a single Delegate with an invocation list consisting of the concatenation of the invocation lists of each of the Delegates in the array in order. The Delegates in the array must all be of the same actual type. The array may contain null entries, which are ignored. If the array parameter is null or empty, or if the resulting invocation list is empty, the result is null. If the Delegates in the array are not all of the same actual type, an IllegalArgumentException is thrown. If the Delegates in the array are of a type that doesn't derive from MulticastDelegate, and if the resulting invocation list would have more than one entry, a MulticastNotSupportedException exception is thrown. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="dynamicInvoke_12">dynamicInvoke</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final Object dynamicInvoke(Object[] args)
        throws IllegalArgumentException, InvocationTargetException;
</font></pre>
<P>Invokes the target method referenced by the delegate on the target object referenced by the delegate with the given parameters. The parameters must be packaged as an Object array according to the rules of Java Reflection. For a delegate with a void return type, "dynamicInvoke" returns null. For other return types, "dynamicInvoke" returns an Object that must be unwrapped or typecast to produce a correctly typed value. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="equals_0">equals</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean equals(Object objOther);
</font></pre>
<P>The result is true if and only if the argument is not null and is a Delegate object that has the same target and method as this Delegate object. 
<P>Note that two delegates do not need to be of the same type in order to equal one another, as defined by Delegate.equals(). 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="getInvocationList_10">getInvocationList</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Delegate[] getInvocationList();
</font></pre>
<P>Returns the invocation list of this Delegate. For unicast Delegates, the result is always an array with a single element. For multicast Delegates, the resulting array may have more than one element. The invocation list of each of the elements in the returned array is guaranteed to have only one entry. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="getMethod_3">getMethod</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final Method getMethod();
</font></pre>
<P>Returns the method referenced by this delegate. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="getTarget_4">getTarget</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final Object getTarget();
</font></pre>
<P>Returns the target object referenced by this delegate. The returned value is null if the delegate references a static method. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="hashCode_2">hashCode</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int hashCode();
</font></pre>
<P>Returns a hash code for this Delegate. If two Delegates compare equals according to Delegate.equals, they will have the same hash code. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="invokeHelper_11">invokeHelper</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected final Object invokeHelper(Object[] args) throws Throwable;
</font></pre>
<P>Invokes the target method referenced by the delegate on the target object referenced by the delegate with the given parameters. The parameters must be packaged as an Object array according to the rules of Java Reflection. For a delegate with a void return type, "invokeMethod" returns null. For other return types, "invokeMethod" returns an Object that must be unwrapped or typecast to produce a correctly typed value. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="remove_6">remove</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Delegate remove(Delegate delValue);
</font></pre>
<P>Returns a Delegate with an invocation list formed by removing the last occurrence (if any) of the Delegate given by the value parameter from the invocation list of this Delegate. This method is overridden in the MulticastDelegate class to support multicasting. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->


<!-- * * * * * * * * * * -->
<H3><A NAME="remove_9">remove</A></h3><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static final Delegate remove(Delegate delSource,
        Delegate delValue);
</font></pre>
<P>Returns a Delegate with an invocation list formed by removing the last occurrence (if any) of the Delegate given by the value parameter from the invocation list of the Delegate given by the source parameter. The Delegate removed from the invocation list is the last Delegate that refers to the same method on the same object as the value parameter. If the value parameter is null, or if the Delegate given by the value parameter does not appear on the invocation list of the source, the result is the source parameter. If the resulting invocation list is empty, the result is null. If the source parameter is null, the result is null. 
</BLOCKQUOTE>
<!-- * * * * * * * * * * -->

</BODY></HTML>

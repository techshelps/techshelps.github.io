<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Direct3dExecuteBuffer</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Direct3dExecuteBuffer.htm#com_0003000622010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="Direct3dDevice.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="def_dirx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Direct3dLight.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.directX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class Direct3dExecuteBuffer</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class Direct3dExecuteBuffer implements 
            <A HREF="IDirect3dExecuteBuffer.htm">IDirect3dExecuteBuffer</A>
{
  // Methods
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010100">addLVertexData</A>(D3dLVertex vertex, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010200">addTLVertexData</A>(D3dTLVertex vertex, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010300">addVertexData</A>(D3dVertex vertex, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010400">exit</A>(int bufferindex);
  public native void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010500">getDataAsArrayFloats</A>(float[] d);
  public native void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010600">getDataAsArrayInts</A>(int[] d);
  public void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010700">getExecuteData</A>(D3dExecuteData data);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010800">lineList</A>(int cnt, char segs, int bufferindex);
  public void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010900">lock</A>(D3dExecuteBufferDesc Desc);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010a00">matrixLoad</A>(int hdest, int hsrc,
        int bufferindex);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010b00">matrixMultiply</A>(int hsrc1, int hsrc2, int hdest,
        int bufferindex);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010c00">pointList</A>(int cnt, char first, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010d00">processVertices</A>(int cnt, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010e00">processVerticesData</A>(int flags, int start, int dest,
        int cnt, int bufferindex);
  public native void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010f00">setDataAsArrayFloats</A>(float[] d);
  public native void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011000">setDataAsArrayInts</A>(int[] d);
  public void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011100">setExecuteData</A>(D3dExecuteData data);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011200">setStatus</A>(int flags, int status, int x1, int y1,
        int x2, int y2, int bufferindex);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011300">spanList</A>(int cnt, char first, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011400">stateLight</A>(int cnt, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011500">stateLightData</A>(int flags, int Arg, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011600">stateRender</A>(int cnt, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011700">stateRenderData</A>(int flags, int Arg, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011800">stateTransForm</A>(int cnt, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011900">stateTransFormData</A>(int flags, int Arg,
        int bufferindex);
  public native int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011a00">textureLoad</A>(int hdest, int hsrc,
        int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011b00">triangleList</A>(int cnt, int bufferindex);
  public int <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011c00">triangleListData</A>(D3dTriangle triangle,
        int bufferindex);
  public void <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011d00">unlock</A>();
}
</FONT></PRE>
<P>Applications use the methods of the <B>Direct3dExecuteBuffer</B> class to set up and control a Microsoft&#174; Direct3D&#174; execute buffer. 
<P><B>Note</B>  This class does not provide an <B>initialize</B> method. Use the <A HREF="Direct3dDevice.htm#com_0003000621010300">Direct3dDevice.createExecuteBuffer</A> method to create and initialize <B>Direct3dExecuteBuffer</B> objects. 
<H3 STYLE="color:#333366"><A NAME="com_0003000622010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000622010100">addLVertexData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int addLVertexData(D3dLVertex vertex, int bufferindex);
</FONT></PRE>
<P><P>Adds a lit, untransformed vertex to the execute buffer at the position indicated by the <I>bufferindex</I>. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vertex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="D3dVertex.htm">D3dVertex</A> object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the vertex. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010200">addTLVertexData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int addTLVertexData(D3dTLVertex vertex, int bufferindex);
</FONT></PRE>
<P><P>Adds a lit and transformed vertex to the execute buffer at the position indicated by the <I>bufferindex</I>. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vertex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="D3dVertex.htm">D3dVertex</A> object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the vertex. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010300">addVertexData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int addVertexData(D3dVertex vertex, int bufferindex);
</FONT></PRE>
<P><P>Adds an unlit, untransformed vertex to the execute buffer at the position indicated by <I>bufferindex</I>. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vertex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="D3dVertex.htm">D3dVertex</A> object 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the vertex. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010400">exit</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int exit(int bufferindex);
</FONT></PRE>
<P><P></BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010500">getDataAsArrayFloats</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void getDataAsArrayFloats(float[] d);
</FONT></PRE>
<P><P>Retrieves the data contained in the execute buffer as an array of float types. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of floats that the data is copied to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010600">getDataAsArrayInts</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void getDataAsArrayInts(int[] d);
</FONT></PRE>
<P><P>Retrieves the data contained in the execute buffer as an array of int types. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of ints that the data is copied to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010700">getExecuteData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getExecuteData(D3dExecuteData data);
</FONT></PRE>
<P><P>Retrieves the execute data state of the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object. The execute data is used to describe the contents of the object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>data</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="D3dExecuteData.htm">D3dExecuteData</A> object that receives the current execute data state of the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This call fails if the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object is locked. 
<P><B>See Also:</B> <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011100">setExecuteData</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010800">lineList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int lineList(int cnt, char segs, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>LINE</B> instructions that will proceed with this instruction in the execute buffer. This method emulates the similar macro found in the Direct3d <B>d3dmacs.h</B> header file. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>segs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010900">lock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void lock(D3dExecuteBufferDesc Desc);
</FONT></PRE>
<P><P>Obtains the command data from the execute buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>Desc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="D3dExecuteBufferDesc.htm">D3dExecuteBufferDesc</A> object. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method can obtain data from either system or video memory as specified by the <A HREF="D3dExecuteBufferDesc.htm">caps</A> field of <I>Desc</I>. The length of the array assigned to <I>buffer</I> must be set in the <A HREF="D3dExecuteBufferDesc.htm">bufferSize</A> field before making the call. 
<P>The application may use the <B>lock</B> method to request that Direct3D move the data between system or video memory. 
<P>This method fails if the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object is locked&#151;that is, if another thread is accessing the buffer or if a <A HREF="Direct3dDevice.htm#com_0003000621010900">Direct3dDevice.execute</A> method that was issued on this buffer has not yet been completed. 
<P><B>See Also:</B> <A HREF="Direct3dExecuteBuffer.htm#com_0003000622011d00">unlock</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010a00">matrixLoad</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int matrixLoad(int hdest, int hsrc, int bufferindex);
</FONT></PRE>
<P><P>Loads a matrix. 

<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hdest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of the destination matrix. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hsrc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of a source matrix. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010b00">matrixMultiply</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int matrixMultiply(int hsrc1, int hsrc2, int hdest,
        int bufferindex);
</FONT></PRE>
<P><P>Multiplies two matrices. 

<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hsrc1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of one of the matrices to multiply. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hsrc2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of one of the matrices to multiply. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hdest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of a destination matrix to copy the result of the multiplication to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010c00">pointList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int pointList(int cnt, char first, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>POINT</B> instructions that will proceed with this instruction in the execute buffer. This method emulates the similar macro found in the Direct3d <B>d3dmacs.h</B> header file. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>first</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010d00">processVertices</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int processVertices(int cnt, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>PROCESSVERTICES</B> instructions that will proceed with this instruction in the execute buffer. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010e00">processVerticesData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int processVerticesData(int flags, int start, int dest, int cnt, int
        bufferindex);
</FONT></PRE>
<P><P>Sets the data for the <B>PROCESSVERTICES</B> instruction in the execute buffer. This method describes how vertices in the execute buffer should be handled by the driver. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The flags that indicate how the driver should process the vertices. These may be: 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b0100a6">D3DPROCESSVERTICES_COPY</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0100a7">D3DPROCESSVERTICES_NOCOLOR</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0100a8">D3DPROCESSVERTICES_OPMASK</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0100a9">D3DPROCESSVERTICES_TRANSFORM</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0100aa">D3DPROCESSVERTICES_TRANSFORMLIGHT</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0100ab">D3DPROCESSVERTICES_UPDATEEXTENTS</A> 
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>start</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the first vertex in the source. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>dest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the first vertex in the local buffer. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of vertices to be processed. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622010f00">setDataAsArrayFloats</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void setDataAsArrayFloats(float[] d);
</FONT></PRE>
<P><P>Sets the data in the execute buffer to the specified array of floats. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array to set the data in the execute buffer to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011000">setDataAsArrayInts</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void setDataAsArrayInts(int[] d);
</FONT></PRE>
<P><P>Sets the data in the execute buffer to the specified array of ints. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>d</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array to set the data in the execute buffer to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011100">setExecuteData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setExecuteData(D3dExecuteData data);
</FONT></PRE>
<P><P>Sets the execute data state of the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object. The execute data is used to describe the contents of the object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>data</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="D3dExecuteData.htm">D3dExecuteData</A> object that describes the execute buffer layout. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This call fails if the <A HREF="Direct3dExecuteBuffer.htm">Direct3dExecuteBuffer</A> object is locked. 
<P><B>See Also:</B> <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010700">getExecuteData</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011200">setStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int setStatus(int flags, int status, int x1, int y1, int x2, int y2,
        int bufferindex);
</FONT></PRE>
<P><P>Resets the status of the execute buffer. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added to the buffer. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies whether the status, extents, or both are being set. 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b010178">D3DSETSTATUS_STATUS</A> 
 </DT><DD>Sets the status. 
</DD><DT><B>D3DSETSTATUS_EXTENTS</B> 
 </DT><DD>Sets the extents specified by a given bounding box (x1,y1,x2,y2). 
</DD><DT><B>D3DSETSTATUS_ALL</B> 
 </DT><DD>Sets both the status and the extents. 
</DD></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>status</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The clipping flags. This parameter may be one or more of the following flags: 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b01017d">D3DSTATUS_CLIPINTERSECTIONALL</A> 
 </DT><DD>Combination of all <B>CLIPINTERSECTION</B> flags. 
</DD><DT>Other <B>CLIPINTERSECTION</B> flags include <A HREF="DirectXConstants.htm#com_000300065b01017e">D3DSTATUS_CLIPINTERSECTIONBACK</A>, <A HREF="DirectXConstants.htm#com_000300065b01017f">D3DSTATUS_CLIPINTERSECTIONBOTTOM</A>, <A HREF="DirectXConstants.htm#com_000300065b010180">D3DSTATUS_CLIPINTERSECTIONFRONT</A>, and <A HREF="DirectXConstants.htm#com_000300065b010181">D3DSTATUS_CLIPINTERSECTIONGEN0</A> through <A HREF="DirectXConstants.htm#com_000300065b010186">D3DSTATUS_CLIPINTERSECTIONGEN5</A>. 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b01018a">D3DSTATUS_CLIPUNIONALL</A> 
 </DT><DD>Combination of all <B>CLIPUNION</B> flags. 
</DD><DT>Other <B>CLIPUNION</B> flags include 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b01018c">D3DSTATUS_CLIPUNIONBOTTOM</A>, 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b010196">D3DSTATUS_CLIPUNIONTOP</A>, <A HREF="DirectXConstants.htm#com_000300065b010194">D3DSTATUS_CLIPUNIONLEFT</A>, and <A HREF="DirectXConstants.htm#com_000300065b010195">D3DSTATUS_CLIPUNIONRIGHT</A>. 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b010197">D3DSTATUS_DEFAULT</A> 
 </DT><DD>the default is a combination of <B>D3DSTATUS_CLIPINTERSECTION</B> and <A HREF="DirectXConstants.htm#com_000300065b010198">D3DSTATUS_ZNOTVISIBLE</A> flags. 
</DD><DT>Basic clipping flags include <A HREF="DirectXConstants.htm#com_000300065b010010">D3DCLIP_BACK</A>, <A HREF="DirectXConstants.htm#com_000300065b010019">D3DCLIP_LEFT</A>, and <A HREF="DirectXConstants.htm#com_000300065b01001b">D3DCLIP_TOP</A>. 
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Defines a bounding box for all relevant vertices. The x coordinate of the bounding box's upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>x2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the bounding box's upper-left corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The x coordinate of the bounding box's lower-right corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>y2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The y coordinate of the bounding box's lower-right corner. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The status is a rolling status and is updated during each execution. The bounding box specified can grow with each execution, but it does not shrink. It can be reset by calling this method again. 
<P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011300">spanList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int spanList(int cnt, char first, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>SPAN</B> instructions that will proceed with this instruction in the execute buffer. This method emulates the similar macro found in the Direct3d <B>d3dmacs.h</B> header file. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>first</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011400">stateLight</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateLight(int cnt, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of STATELIGHT instructions that will proceed with this instruction in the execute buffer. This method emulates the similar macro found in the Direct3d d3dmacs.h header file. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011500">stateLightData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateLightData(int flags, int Arg, int bufferindex);
</FONT></PRE>
<P><P>Describes the transformation state for the <B>STATELIGHT</B> instruction. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One of the following values: 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b01006e">D3DLIGHTSTATE_MATERIAL</A> 
 </DT><DD>Defines the material used to compute the final color and intensity values during rasterization. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b010068">D3DLIGHTSTATE_AMBIENT</A> 
 </DT><DD>Sets the color and intensity of the current ambient light. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b010069">D3DLIGHTSTATE_COLORMODEL</A> 
 </DT><DD>One of the D3DCOLORMODEL types. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b01006c">D3DLIGHTSTATE_FOGMODE</A> 
 </DT><DD>One of the D3DFOGMODE types. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b01006d">D3DLIGHTSTATE_FOGSTART</A> 
 </DT><DD>Defines the starting value for fog. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b01006b">D3DLIGHTSTATE_FOGEND</A> 
 </DT><DD>Defines the ending value for fog. 
</DD><DT><A HREF="DirectXConstants.htm#com_000300065b01006a">D3DLIGHTSTATE_FOGDENSITY</A> 
 </DT><DD>Defines the density setting for fog. 
</DD></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>Arg</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A value that is dependant on which flag is set. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011600">stateRender</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateRender(int cnt, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>STATERENDER</B> instructions in the execute buffer. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011700">stateRenderData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateRenderData(int flags, int Arg, int bufferindex);
</FONT></PRE>
<P><P>Describes the render state for the <B>STATERENDER</B> instruction. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The flags that describe the render state. For a complete listing of <A HREF="DirectXConstants.htm">D3DRENDERSTATE_</A> flags, see <A HREF="DirectXConstants.htm">DirectXConstants</A>. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>Arg</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A value that is dependant on the <A HREF="DirectXConstants.htm">D3DRENDERSTATE_</A> flag. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011800">stateTransForm</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateTransForm(int cnt, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>STATETRANSFORM</B> instructions that will proceed with this instruction in the execute buffer. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011900">stateTransFormData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int stateTransFormData(int flags, int Arg, int bufferindex);
</FONT></PRE>
<P><P>Describes the transformation state for the <B>STATETRANSFORM</B> instruction. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">May be one of the following flags: 
<DL>
<DT><A HREF="DirectXConstants.htm#com_000300065b0101a7">D3DTRANSFORMSTATE_WORLD</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0101a6">D3DTRANSFORMSTATE_VIEW</A> 
</DT><DT><A HREF="DirectXConstants.htm#com_000300065b0101a5">D3DTRANSFORMSTATE_PROJECTION</A> 
</DT></DL>
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>Arg</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of the matrices for the world, view, and projection transformations. The default values for these are null. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011a00">textureLoad</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int textureLoad(int hdest, int hsrc, int bufferindex);
</FONT></PRE>
<P><P>Loads a texture. 

<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hdest</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of the destination texture. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hsrc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The handle of a source texture. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011b00">triangleList</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int triangleList(int cnt, int bufferindex);
</FONT></PRE>
<P><P>Sets the number of <B>TRIANGLE</B> instructions that will proceed with this instruction in the execute buffer. This method emulates the similar macro found in the Direct3d d3dmacs.h header file. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cnt</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number of instructions. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011c00">triangleListData</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int triangleListData(D3dTriangle triangle, int bufferindex);
</FONT></PRE>
<P><P>Describes the transformation state for the <B>TRIANGLE</B> instruction. 
<P><B>Return Value:</B> <P>Returns the number of 32-bit values added. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>triangle</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="D3dTriangle.htm">D3dTriangle</A> object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>bufferindex</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The position in the execute buffer to place the instruction. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The execute buffer is treated as an array of 32-bit values, which is a collection of floats and ints that describe vertices and instructions. It is up to the user to manage the position of each item added to the buffer.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000622011d00">unlock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void unlock();
</FONT></PRE>
<P><P>Releases access to the commands in the execute buffer. This must be done prior to calling the <A HREF="Direct3dDevice.htm#com_0003000621010900">execute</A> method for the buffer. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>See Also:</B> <A HREF="Direct3dExecuteBuffer.htm#com_0003000622010900">lock</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

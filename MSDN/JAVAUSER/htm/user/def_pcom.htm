<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About com.ms.com</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_pcom.htm#commscom_ovr_0003000501010000">COM Objects and Java</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_pcom.htm#commscom_ovr_0003000501020000">Frequently Used Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_pcom.htm#commscom_0003000501030000">Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_pcom.htm#commscom_0003000501040000">Interfaces</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_pcom.htm#commscom_0003000501050000">Hierarchy</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_pack.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Packages"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="com_guid.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.com</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Packages</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">About com.ms.com</H2>
<P>The classes and interfaces in the <A HREF="def_pcom.htm">com.ms.com</A> package allow you to implement and use Component Object Model (COM) objects from Java. Used in conjunction with the <A href="jactivex.htm">jactivex</A> and <A href="quickref.htm#quickref_0004000201000e00">javareg</A> tools, the classes in this package allow you to benefit from Java/COM integration provided by the Microsoft Win32 VM for Java. The Microsoft VM supports two levels of integration with COM objects. High-level integration involves converting Microsoft&#174; ActiveX&#174; controls to JavaBeans components and exposing JavaBeans components as ActiveX controls. Low-level Java/COM integration refers to accessing COM objects by their vtable methods, which is useful when you need to marshal data types that are not handled by <B>IDispatch</B>. This overview briefly explains how COM objects can be implemented in Java, and then describes some of the most frequently used classes in the <B>com.ms.com</B> package. 

<H3 STYLE="color:#333366"><A NAME="commscom_ovr_0003000501010000">COM Objects and Java</A></H3><P>Every Java class automatically implements <B>IUnknown</B> and <B>IDispatch</B>. This fact makes every Java object a COM object. The dispinterface implemented by the <B>IDispatch</B> interface contains the public methods that are on the default interface for the class. At runtime, the Microsoft VM automatically provides type information for this <B>IDispatch</B> implementation. To implement a simple Automation object in Java, you place it in the class path and run the javareg tool to register it. No IDLs, type libraries, or Wizards are required.

<H3 STYLE="color:#333366"><A NAME="commscom_ovr_0003000501020000">Frequently Used Classes</A></H3><P>The com.ms.com.<A HREF="IUnknown.htm">IUnknown</A> interface is a placeholder for COM interfaces. Every Java version of a COM interface is derived from com.ms.com.<B>IUnknown</B>. Therefore, you never call methods on com.ms.com.<B>IUnknown</B>. If your Java program calls a COM method whose return type is com.ms.com.<B>IUnknown</B>, you should cast the return value to the COM interface that you are expecting. If your program calls a COM method that takes a parameter of type com.ms.com.<B>IUnknown</B>, you can pass any COM interface to the COM method. 

<P>The <A HREF="Dispatch.htm">Dispatch</A> class enables Java programs to invoke methods and access the properties of any ActiveX component that supports the <B>IDispatch</B> interface. Each of the methods in this class performs one of the following functions:
<DL>
<DT><B>getIDsOfNames</B> methods: 
</DT><DD>Maps methods or property names to dispids. 
</DD><DT><B>invokev</B> methods: 
</DT><DD>Invokes methods or accesses properties. 
</DD><DT><B>invokeSubv</B> methods: 
</DT><DD>Invokes subroutines.
</DD></DL>
<P>Three classes are used to communicate error information from a COM method to Java: <A HREF="ComException.htm">com.ms.com.ComException</A>, <A HREF="ComFailException.htm">com.ms.com.ComFailException</A>, and <A HREF="ComSuccessException.htm">com.ms.com.ComSuccessException</A>. The <A HREF="ComException.htm">ComException</A> class wraps the <B>HRESULT</B> error code that is returned by COM interface methods. <B>ComException</B> objects communicate error information from a COM method to Java when the COM method fails. This class defines a <A HREF="ComException.htm#com_0003000504020300">getHResult</A> method that retrieves the error code from the <B>ComException</B> object. The <A HREF="ComFailException.htm">ComFailException</A> and the <A HREF="ComSuccessException.htm">ComSuccessException</A> classes are derived from the <B>ComException</B> class. Typically, you try to catch <B>ComFailException</B> objects so that you know when something has gone wrong during a call to a COM method. The documentation for the <B>ComFailException</B> class contains a list of the values of system-defined <B>HRESULT</B>s. 
For <B>ComSuccessException</B> objects, the default value of the stored <B>HRESULT</B> is S_FALSE (0x00000001L). This value indicates the successful completion of a method that returns a boolean 
value of false. 
 
<P>The <A HREF="Variant.htm">com.ms.com.Variant</A> class is used to bridge Java with ActiveX components that manipulate VARIANTs. Most of the methods found in this class belong to one of three categories: 
<DL>
<DT><B>to</B><I>XXX</I> methods:
 </DT><DD>Attempt to coerce the <A HREF="Variant.htm">Variant</A> object to type XXX and return the converted value, but do not copy the result back to the <B>Variant</B>.
</DD><DT><B>get</B><I>XXX</I> methods:
 </DT><DD>Retrieve data from a <A HREF="Variant.htm">Variant</A> object of type XXX, succeeding only if the <B>Variant</B> object is already the correct type.
</DD><DT><B>put</B><I>XXX</I> methods: 
 </DT><DD>Change the type of a <A HREF="Variant.htm">Variant</A> object and initialize it to a new value. 
</DD></DL>
<P>

<P>Certain classes in the <A HREF="def_pcom.htm">com.ms.com</A> package are used by internal operations and must be installed on your host system for the <B>com.ms.com</B> package to work correctly. Any Java applications you create, however, never need to call these classes directly. These classes are as follows:

<DL>
<DT><B>AnsiStringMarshaller</B> 

 </DT><DD>Converts LPCSTR (pointer to a constant null-terminated Windows character string) to <B>java.lang.String</B>. 
</DD><DT><B>CUnknown</B> 
 </DT><DD>Serves as the default class for Java-callable wrappers. These wrappers belong to COM interfaces that are marshaled to Java interfaces. 
</DD><DT><B>UniStringMarshaller</B>
 </DT><DD>Converts LPWSTR (pointer to a null-terminated Unicode character string) to <B>java.lang.String</B>. 
</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commscom_0003000501030000">Classes</A></H3><DL>
<DT><A HREF="com_guid.htm">Class _Guid</A>
 </DT><DD>This class represents globally unique identifiers (GUIDs), which are 128-bit integer values that are used to assign world-wide unique identifiers for COM interfaces and CoClasses.
</DD><DT><A HREF="ComError.htm">Class ComError</A>
 </DT><DD>This class signals errors in linking Java and Component Object Model (COM) objects.
</DD><DT><A HREF="ComException.htm">Class ComException</A>
 </DT><DD>This class wraps an <B>HRESULT</B>, the return type for most methods in the Component Object Model (COM).
</DD><DT><A HREF="ComFailException.htm">Class ComFailException</A>
 </DT><DD>This class wraps an <B>HRESULT</B>, the return type for most methods in the Component Object Model (COM).
</DD><DT><A HREF="ComLib.htm">Class ComLib</A>
 </DT><DD>This class contains routines that are used during Java Component Object Model (COM) integration.
</DD><DT><A HREF="ComSuccessException.htm">Class ComSuccessException</A>
 </DT><DD>This class wraps an <B>HRESULT</B>, the return type used in most methods in the Component Object Model (COM).
</DD><DT><A HREF="ConnectionPointCookie.htm">Class ConnectionPointCookie</A>
 </DT><DD>This class provides methods for creating and closing a connection between a source and a sink object.
</DD><DT><A HREF="Dispatch.htm">Class Dispatch</A>
 </DT><DD>This class enables Java programs to invoke methods and access the properties of any Microsoft&#174; ActiveX&#174; Automation object.
</DD><DT><A HREF="DispatchProxy.htm">Class DispatchProxy</A>
 </DT><DD>This class wraps a dispatchable object with a Java interface.
</DD><DT><A HREF="LicenseMgr.htm">Class LicenseMgr</A>
 </DT><DD>This class works with the <B>ILicenseMgr</B> interface to enable you to use licensed Component Object Model (COM) components or controls in your Java application.
</DD><DT><A HREF="SafeArray.htm">Class SafeArray</A>
 </DT><DD>This class wraps a Microsoft&#174; ActiveX&#174; Automation <B>SAFEARRAY</B> data structure.
</DD><DT><A HREF="STATSTG.htm">Class STATSTG</A>
 </DT><DD>This class represents an STATSTG structure, which contains statistical information about an open storage, stream or byte array object.
</DD><DT><A HREF="Variant.htm">Class Variant</A>
 </DT><DD>This class is used to bridge Java with Microsoft&#174; ActiveX&#174; components that manipulate <B>VARIANT</B> data types.
</DD><DT><A HREF="WrongThreadException.htm">Class WrongThreadException</A>
 </DT><DD>This class represents objects that are thrown when a method call cannot be made because it was called on the wrong thread.

</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commscom_0003000501040000">Interfaces</A></H3><DL>
<DT><A HREF="ComContext.htm">Interface ComContext</A>
 </DT><DD>This class defines constants that specify the contexts that a Component Object Model (COM) class can run in.
</DD><DT><A HREF="IAccessible.htm">Interface IAccessible</A>
 </DT><DD>This interface provides methods that enable users to request selection and focus information, perform hit tests, and navigate by using object and child identifiers.
</DD><DT><A HREF="IAccessibleDefault.htm">Interface IAccessibleDefault</A>
 </DT><DD>This interface provides methods that enable users to request selection and focus information, perform hit tests, and navigate by using object and child identifiers.
</DD><DT><A HREF="IEnumVariant.htm">Interface IEnumVariant</A>
 </DT><DD>This interface provides methods for enumerating a collection of variants.
</DD><DT><A HREF="IExternalConnectionSink.htm">Interface IExternalConnectionSink</A>
 </DT><DD>This interface provides methods that allow Java objects exposed as Component Object Model (COM) objects to receive notifications about calls made to the <B>IExternalConnection</B> interface that is exposed by the Microsoft&#174; Win32&#174; VM for Java.
</DD><DT><A HREF="ILicenseMgr.htm">Interface ILicenseMgr</A>
 </DT><DD>This interface supports the use of licensed Component Object Model (COM) components or controls in a Java application.
</DD><DT><A HREF="IPropertyNotifySink.htm">Interface IPropertyNotifySink</A>
 </DT><DD>This interface provides methods that allow a sink object to receive notifications about property changes from another object.
</DD><DT><A HREF="IServiceProvider.htm">Interface IServiceProvider</A>
 </DT><DD>This interface provides a method that locates a service specified by a GUID and returns the interface pointer for a requested interface on the service.
</DD><DT><A HREF="IStream.htm">Interface IStream</A>
 </DT><DD>This interface provides methods for reading and writing data to stream objects.
</DD><DT><A HREF="IUnknown.htm">Interface IUnknown</A>
 </DT><DD>This interface is used as the return type for Component Object Model (COM) methods that return arbitrary COM interfaces.
</DD><DT><A HREF="NoAutoScripting.htm">Interface NoAutoScripting</A>
 </DT><DD>When used in the implements clause of a class definition, this interface prevents the Microsoft Win32 VM for Java from including its own <B>IDispatch</B> implementation for the class.

</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commscom_0003000501050000">Hierarchy</A></H3><PRE><FONT FACE="Courier" SIZE="2"><B>Object</B>
  |
  +--<A HREF="com_guid.htm">_Guid</A>
  |
  +--<A HREF="ComLib.htm">ComLib</A>
  |
  +--<A HREF="ConnectionPointCookie.htm">ConnectionPointCookie</A>
  |
  +--<A HREF="Dispatch.htm">Dispatch</A>
  |
  +--<A HREF="DispatchProxy.htm">DispatchProxy</A>
  |
  +--<A HREF="LicenseMgr.htm">LicenseMgr</A> (<A HREF="IUnknown.htm">IUnknown</A>, <A HREF="ILicenseMgr.htm">ILicenseMgr</A>)
  |
  +--<A HREF="SafeArray.htm">SafeArray</A>
  |
  +--<A HREF="STATSTG.htm">STATSTG</A>
  |
  +--<A HREF="Variant.htm">Variant</A>

<B>OutOfMemoryError</B>
  |
  +--<A HREF="ComError.htm">ComError</A>

<B>RuntimeException</B>
  |
  +--<A HREF="ComException.htm">ComException</A>
  |  |
  |  +--<A HREF="ComFailException.htm">ComFailException</A>
  |  |
  |  +--<A HREF="ComSuccessException.htm">ComSuccessException</A>
  |
  +--<A HREF="WrongThreadException.htm">WrongThreadException</A>

<A HREF="ComContext.htm">ComContext</A>
<A HREF="IAccessible.htm">IAccessible</A>
<A HREF="IUnknown.htm">IUnknown</A>
<A HREF="IAccessibleDefault.htm">IAccessibleDefault</A>
<A HREF="IEnumVariant.htm">IEnumVariant</A>
<A HREF="IExternalConnectionSink.htm">IExternalConnectionSink</A>
<A HREF="ILicenseMgr.htm">ILicenseMgr</A>
<A HREF="IPropertyNotifySink.htm">IPropertyNotifySink</A>
<A HREF="IServiceProvider.htm">IServiceProvider</A>
<A HREF="IStream.htm">IStream</A>
<A HREF="NoAutoScripting.htm">NoAutoScripting</A>
</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

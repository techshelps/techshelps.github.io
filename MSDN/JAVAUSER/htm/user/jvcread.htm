<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Visual J++ Compiler</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Working with MS VM"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jvcrd_rn.htm#jvcread_0004000501010000">Using new Java Language Features in Visual J++ 1.1</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jvcrd_rn.htm#jvcread_0004000501020000">JDK 1.1 Compatibility</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jvcrd_rn.htm#jvcread_0004000501030000">Compatibility with Code Written for Previous Releases of Visual J++</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/tools2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Tools"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A href="jvc.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_tool.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Tools"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="jactivex.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Jvc</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Tools</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Microsoft Visual J++ Compiler</H2>

<P>The following notes apply to the Microsoft&#174; Visual J++&#153; Compiler. Issues identified here are subject to change without notice.

<P><B>Note</B>  This version of the compiler supports @com tags for Java/COM integration. It also supports @dll tags for Microsoft&#174; J/Direct&#153;. For more information on these technologies, see the documentation for <A HREF="jdirect.htm">J/Direct</A> and <A href="jactivex.htm#jactivex_0004000601030000">@com Directives</A>, provided in the Microsoft SDK for Java.
<H3 STYLE="color:#333366"><A NAME="jvcread_0004000501010000">Using new Java Language Features in Visual J++ 1.1</A></H3><P>This release of the Java Language Compiler supports the new language features specified in the JDK 1.1 from Sun Microsystems, Inc., including
<UL><LI>Inner classes
<LI>Anonymous classes
<LI>Instance initializers
<LI>Anonymous array expressions
<LI>Class literals
<LI>Blank finals and final locals
<LI>The @deprecated tag
</UL>
<P>It is possible to use these new language features with Microsoft&#174; Visual J++&#153; 1.1. You may do so by replacing the compiler file in Visual J++ with three files from the Microsoft SDK for Java. First, save a copy of the compiler (jvc.exe) from your existing Visual J++ installation. Next, copy jvc.exe, jps.dll, and msjvc.dll into your Visual J++ directory. Projects will then build using the new compiler. 

<H3 STYLE="color:#333366"><A NAME="jvcread_0004000501020000">JDK 1.1 Compatibility</A></H3><P>This release of jvc is compatible with the language enhancements specified in the Sun JDK 1.1. The following section briefly describes differences between jvc (the Java Language Compiler from Microsoft) and javac (the Sun Java Compiler).
<P>The following items are in the Inner Classes specification and are implemented by the Sun javac, but not by jvc: 
<UL><LI>There are no known items in this category.
</UL>
<P>The following items are in the Inner Classes specification, but are not implemented by the Sun javac or by jvc:
<UL><LI>Inherited members in inner classes
</UL>
<P>The specification states: "Any inherited member m of a subclass C is in scope within the body of C.... If C itself is an inner class, there may be definitions of the same kind (variable, method, or type) for m in enclosing scopes. In all such cases, the inherited member m hides the other definitions of m. Additionally, unless the hidden definition is a package member, the simple name m is illegal; the programmer must write C.this.m."

<P>Jvc does not implement the last sentence. The simple name m is accepted in these cases. The Sun javac does not implement this, either.

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020100">Member Access Protection in Inner Classes</A></H4><P>The specification states: "Access protection never prevents a class from using any member of another class, as long as one encloses the other, or they are enclosed by a third class."
<P>In jvc and in the Sun javac, an inner class can access private members of an enclosing class. However, an outer class cannot access private members of an enclosed class, nor can two "sibling" classes, enclosed by a common class, access private members of each other. These rules seem much more logical and useful than those in the specification.

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020200">Exceptions Thrown from Anonymous Class Instance Initializers</A></H4><P>The specification states: "An instance initializer in an anonymous class can throw any exception."
<P>Jvc does not allow an instance initializer, in an anonymous class, to throw any checked exceptions. Neither does the Sun javac.
<P>The following items are implemented differently by jvc and by Sun's javac:

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020300">Deprecation Warnings</A></H4><P>Deprecation warnings in jvc are automatic (no /deprecation switch). However, warnings do require that source code with deprecated members be recompiled. Deprecation warnings are emitted at warning level 2.

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020400">Inner Class Index Attributes</A></H4><P>In the section on the InnerClasses attribute, the specification states: "If an inner class is not a member, its outer_class_index_index is zero. If a class is anonymous, its inner_name_index is zero."
<P>Jvc reads and writes the InnerClasses attributes according to these rules; the Sun javac does not (it never writes zero in either of these fields). Sun's javac may fault when reading the InnerClasses attributes that are produced by jvc.

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020500">Inner Class Access to Private Members of Enclosing Class</A></H4><P>The specification states: "When an inner class accesses a private field or method of an enclosing class, the accessor method with default (package) access should be inserted to allow the inner class access to the private field or method."
<P>The Sun javac generates code that accesses the private member directly, which may cause verification or illegal access errors on some virtual machines. Jvc does not create accessor methods, but uses a mechanism that is compatible with all virtual machines.
<P>When an inner class accesses a private field or method of an enclosing class, jvc changes the access flags of the field or method to indicate that the member has default (package) protection. An additional attribute is written and read by the compiler that indicates the actual access flags of the member. This attribute can and should be ignored by the virtual machine: it is for the compiler only.

<H4 STYLE="color:#333366"><A NAME="jvcread_0004000501020600">Interface Declarations in Inner Classes</A></H4><P>The specification states: "Inner classes may not declare ... member interfaces."
<P>Jvc enforces this rule; the Sun javac does not.

<H3 STYLE="color:#333366"><A NAME="jvcread_0004000501030000">Compatibility with Code Written for Previous Releases of Visual J++</A></H3><P>Due to more strict error and security checking in this release of the compiler, some illegal code that compiled without errors using Visual J++ 1.x may now (correctly) fail to compile. One common cause is more careful checking of class member access across package boundaries. Section 3.6.7 of the Java Language Specification contains an example of this scenario.
<P>The following is an example of a typical error message for this type 
of code.
<P>error J0204: <PRE><FONT FACE="Courier" SIZE="2">Cannot access protected member 'x' in class 'Point' via a qualifier of type 'Point3d'</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

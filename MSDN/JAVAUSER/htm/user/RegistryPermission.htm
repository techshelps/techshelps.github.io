<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class RegistryPermission</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegistryPermission.htm#com_0003000e0f010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegistryPermission.htm#com_0003000e0f020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegistryPermission.htm#com_0003000e0f030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="ReflectionRequest.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_secp.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="RegistryRequest.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.security.permissions</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class RegistryPermission</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class RegistryPermission implements <A HREF="IPermission.htm">IPermission</A>, 
            <A HREF="IEncodablePermission.htm">IEncodablePermission</A>
{
  // Fields
  public static final int <A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A>;
  public static final int <A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A>;
  public static final int <A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A>;
  public static final int <A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A>;
  public static final int <A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A>;

  // Constructors
  public <A HREF="RegistryPermission.htm#com_0003000e0f010100">RegistryPermission</A> ();

  // Methods
  public void <A HREF="RegistryPermission.htm#com_0003000e0f020100">check</A>(Object param);
  public IPermission <A HREF="RegistryPermission.htm#com_0003000e0f020200">combine</A>(IPermission source2);
  public int <A HREF="RegistryPermission.htm#com_0003000e0f020300">compareSet</A> (Object target);
  public IPermission <A HREF="RegistryPermission.htm#com_0003000e0f020400">copy</A>();
  public boolean <A HREF="RegistryPermission.htm#com_0003000e0f020500">decode</A>(String tag, InputStream data);
  public boolean <A HREF="RegistryPermission.htm#com_0003000e0f020600">encode</A>(String tag, OutputStream out);
  public void <A HREF="RegistryPermission.htm#com_0003000e0f020700">excludeRule</A>(int access, String pattern);
  public WildcardExpression <A HREF="RegistryPermission.htm#com_0003000e0f020800">getExcludedRules</A>(int accessType);
  public WildcardExpression <A HREF="RegistryPermission.htm#com_0003000e0f020900">getIncludedRules</A>(int accessType);
  public void <A HREF="RegistryPermission.htm#com_0003000e0f020a00">includeRule</A>(int access, String pattern);
  public String <A HREF="RegistryPermission.htm#com_0003000e0f020b00">mapFormat</A>(String format);
  public void <A HREF="RegistryPermission.htm#com_0003000e0f020c00">reset</A> ();
  public String[] <A HREF="RegistryPermission.htm#com_0003000e0f020d00">supportedFormats</A>();
  public String <A HREF="RegistryPermission.htm#com_0003000e0f020e00">toString</A>();
}
</FONT></PRE>
<P>This class represents a permission that controls the ability to access the registry. The <A HREF="StandardSecurityManager.htm">StandardSecurityManager</A> checks for this permission type when performing the <A HREF="StandardSecurityManager.htm#com_0003000d0c021d00">checkRegistry</A> operation. 
<P>The registry permission distinguishes between five different types of access to registry keys or values, shown in the following list. 
<DL>
<DD><A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A> 
</DD><DT>Keys can be opened (does not apply to values). 
 </DT><DD><A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A> 
</DD><DT>Information about a key or value can be read. 
 </DT><DD><A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A> 
</DD><DT>A key or value can be modified. 
 </DT><DD><A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A> 
</DD><DT>A key or value can be deleted. 
 </DT><DD><A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A> 
</DD><DT>A key or value can be created. 
</DT></DL>
<P>The specific key or value allowed for each operation is defined by a pair of include/exclude patterns. Keys are specified by a trailing backslash (\). Absolute registry paths must start with a root key specifier, which is one of the following strings: 
<DL>
<DD>"HKCR"
</DD><DT>HKEY_CLASSES_ROOT 
 </DT><DD>"HKLM"
</DD><DT>HKEY_LOCAL_MACHINE 
 </DT><DD>"HKCU"
</DD><DT>HKEY_CURRENT_USER 
 </DT><DD>"HKUR"
</DD><DT>HKEY_USERS 
</DT></DL>
<P>For example, "HKCU\\dog\\" specifies a key named "dog" under HKEY_CURRENT_USER. But "HKCU\\dog\\Fido" specifies the value named "Fido" within the key HKEY_CURRENT_USER\dog. 
<P><B>Note</B>  In source code, you must type two backslashes to represent the single backslash necessary for specifying a key. 
<P>Also see <A HREF="RegistryRequest.htm">com.ms.security.permissions.RegistryRequest</A>



<H3 STYLE="color:#333366"><A NAME="com_0003000e0f010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000e0f010100">RegistryPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegistryPermission ();
</FONT></PRE>
<P><P>Creates a new <A HREF="RegistryPermission.htm">RegistryPermission</A> instance. The new instance will not allow any access to any portion of the registry. Access to specific portions of the registry must be explicitly enabled. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003000e0f020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000e0f020100">check</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void check(Object param);
</FONT></PRE>
<P><P>Determines whether the specified registry operation is allowed by the permission object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>param</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request parameter. It must be an instance of the <A HREF="RegistryRequest.htm">RegistryRequest</A> class. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if this permission does not allow the specified operation. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020200">combine</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IPermission combine(IPermission source2);
</FONT></PRE>
<P><P>Creates and returns a new <A HREF="RegistryPermission.htm">RegistryPermission</A> object that is a combination of the current permission object and the specified permission object. The new object allows access to exactly those resources allowed by either one of the permission objects that it was constructed from. 

<P><B>Return Value:</B> <P>Returns the resulting <A HREF="RegistryPermission.htm">RegistryPermission</A> object. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>source2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other <A HREF="RegistryPermission.htm">RegistryPermission</A> object to combine with. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalArgumentException</B>
 if the specified object to combine with is not an instance of <A HREF="RegistryPermission.htm">RegistryPermission</A>. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020300">compareSet</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compareSet (Object target);
</FONT></PRE>
<P><P>Compares the <A HREF="RegistryPermission.htm">RegistryPermission</A> instance with a specified permission object. 

<P><B>Return Value:</B> <P>Returns one of the following constants: 
<UL><LI><A HREF="SetComparison.htm#com_000300141a020001">DISJOINT</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020002">EMPTY</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020006">OVERLAP</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020005">EQUAL</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020003">EMPTY_SUBSET</A> 
<LI><A HREF="SetComparison.htm#com_000300141a020004">EMPTY_SUPERSET</A> 
</UL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>target</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The permission object that the <A HREF="RegistryPermission.htm">RegistryPermission</A> instance is compared with. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020400">copy</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IPermission copy();
</FONT></PRE>
<P><P>Retrieves a copy of the <A HREF="RegistryPermission.htm">RegistryPermission</A> object. 

<P><B>Return Value:</B> <P>Returns the copy of the <A HREF="RegistryPermission.htm">RegistryPermission</A> object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020500">decode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean decode(String tag, InputStream data);
</FONT></PRE>
<P><P>Decodes the contents of the specified data stream into this permission object. The <I>tag</I> parameter specifies the type of data in the stream. 

<P><B>Return Value:</B> <P>Returns true if the decoding operation succeeded; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tag</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The encoding type identifier. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>data</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The raw data to construct the object from. The type of data is specified by the <I>tag</I> parameter. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020600">encode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean encode(String tag, OutputStream out);
</FONT></PRE>
<P><P>Encodes the contents of this permission object and sends the encoded data to the specified stream. The <I>tag</I> parameter specifies the type of encoding that should be used. 

<P><B>Return Value:</B> <P>Returns true if the encoding operation succeeded; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>tag</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The encoding type identifier. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>out</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The output stream to send the encoded data to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020700">excludeRule</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void excludeRule(int access, String pattern);
</FONT></PRE>
<P><P>Adds a rule that explicitly denies the specified access type to the registry keys or values specified by the pattern string. This method is used to modify a previously allowed rule to a more restricted type of access. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>access</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The access types being added. Must be one of the following types: <A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A>, or <A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A>, or any combination of these types used with the OR operator. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pattern</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The registry keys/values to which the specified access type is being added. This parameter must be of the form accepted by a <A HREF="WildcardExpression.htm#com_0003001415000000">WildcardExpression</A> with the <A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A> flag enabled. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020800">getExcludedRules</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression getExcludedRules(int accessType);
</FONT></PRE>
<P><P>Returns the wildcard expression representing all the keys or values that are explicitly denied for the specified access type. 

<P><B>Return Value:</B> <P>Returns the wildcard expression representing all the keys/values that are explicitly denied for the specified access type. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>accessType</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This value must be one of the following: <A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A>, or <A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A>. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020900">getIncludedRules</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WildcardExpression getIncludedRules(int accessType);
</FONT></PRE>
<P><P>Retrieves the wildcard expression that represents all the keys or values that are allowed for the specified access type. 

<P><B>Return Value:</B> <P>Returns the wildcard expression representing all the keys or values that are allowed for the specified access type. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>accessType</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of access used to determine the wildcard expression. This value must be one of the following: <A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A>, or <A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A>. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020a00">includeRule</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void includeRule(int access, String pattern);
</FONT></PRE>
<P><P>Adds a rule that allows the specified access types to the registry keys/values specified by the pattern string. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>access</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The access types being added. Must be one of the following types: <A HREF="RegistryPermission.htm#com_0003000e0f030003">OPEN</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030004">READ</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030005">WRITE</A>, <A HREF="RegistryPermission.htm#com_0003000e0f030002">DELETE</A>, or <A HREF="RegistryPermission.htm#com_0003000e0f030001">CREATE</A>, or any combination of these types used with the OR operator (|). 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pattern</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The registry keys or values to which the specified access type is being added. This parameter must be of the form accepted by a <A HREF="WildcardExpression.htm#com_0003001415000000">WildcardExpression</A> with the <A HREF="WildcardExpression.htm#com_0003001415030006">ESCAPED</A> flag enabled. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020b00">mapFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String mapFormat(String format);
</FONT></PRE>
<P><P>Retrieves a permission-specific tag, given an encoding format. The tag is then used with the encode and decode methods to specify an encoding type. 

<P><B>Return Value:</B> <P>Returns the permission-specific tag that corresponds to the specified format. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>format</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The encoding format to retrieve the tag for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020c00">reset</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void reset ();
</FONT></PRE>
<P><P>Resets the permission state to empty. This is a state in which the object allows no registry access. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020d00">supportedFormats</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String[] supportedFormats();
</FONT></PRE>
<P><P>Retrieves the encoding formats that the permission type supports. 

<P><B>Return Value:</B> <P>Returns an array of the supported format identifiers. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000e0f020e00">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString();
</FONT></PRE>
<P><P>Retrieves a textual representation of the permission object. 

<P><B>Return Value:</B> <P>Returns the string representation of the permission object. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003000e0f030000">Fields</A></H3><DL>
<DT><B><A NAME="com_0003000e0f030001">CREATE</A></B>
</DT><DD>An access type that indicates that a key or value can be created. 

</DD><DT><B><A NAME="com_0003000e0f030002">DELETE</A></B>
</DT><DD>An access type that indicates that a key or value can be deleted. 

</DD><DT><B><A NAME="com_0003000e0f030003">OPEN</A></B>
</DT><DD>An access type that indicates that keys can be opened. 

</DD><DT><B><A NAME="com_0003000e0f030004">READ</A></B>
</DT><DD>An access type that indicates that information about a key or value can be read. 

</DD><DT><B><A NAME="com_0003000e0f030005">WRITE</A></B>
</DT><DD>An access type that indicates that a key or value can be modified. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

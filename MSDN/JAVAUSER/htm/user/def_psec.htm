<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About com.ms.security</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_psec.htm#commssecurity_ovr_0003000d01010000">Overview of Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_psec.htm#commssecurity_ovr_0003000d01020000">Examples</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_psec.htm#commssecurity_0003000d01030000">Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_psec.htm#commssecurity_0003000d01040000">Interfaces</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_psec.htm#commssecurity_0003000d01050000">Hierarchy</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_pack.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Packages"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="EncodeFormats.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.security</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Packages</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">About com.ms.security</H2>
<P>This package provides access to the security system of the Microsoft Win32 VM for Java. The security system is based on associating sets of permissions with individual classes so that the Microsoft VM can examine the call stack to determine what permissions are valid in a given context. 

<H3 STYLE="color:#333366"><A NAME="commssecurity_ovr_0003000d01010000">Overview of Classes</A></H3><P>The <A HREF="StandardSecurityManager.htm">StandardSecurityManager</A> class implements a granular, permission-based security policy. The <B>StandardSecurityManager</B> is the installed security manager within the Microsoft VM for all Java code (except Java applications), and it processes security checks for the standard Java APIs. The StandardSecurityManager.checkXXX methods call the PolicyEngine.<A HREF="PolicyEngine.htm#com_0003000d09010e00">checkPermission</A> methods to do the stack crawl that actually determines whether the specified operation is permitted. For instance, if your code creates a new <B>java.io.FileOutputStream</B> object and then attempts to write to that file, the Microsoft VM calls the StandardSecurityManager's <A HREF="StandardSecurityManager.htm#com_0003000d0c022300">checkWrite</A> method, passing in the name of the file you want to write to. If the security check fails, a <A HREF="SecurityExceptionEx.htm">SecurityExceptionEx</A> is thrown.

<P>The <A HREF="PolicyEngine.htm">PolicyEngine</A> class contains methods that check for a particular type of permission, using either a deep or a shallow security check. A deep security check examines the call stack (beginning with the immediate caller to <B>PolicyEngine</B> and working backwards) and determines whether each class on the stack has the specified permission. If any class does not have the specified permission, the security check fails. If the right to the specified permission has been explicitly asserted, the stack crawl terminates immediately and the security check passes. If the right to the specified permission has been explicitly denied, the stack crawl terminates immediately and the security check fails. A shallow security check requires that you specify a skip set that indicates a set of classes to ignore during the security check. During a shallow security check, only the first class found outside the skip set is examined for the specified permission. To learn more about security checks and how to assert, deny, or revert a permission, see the <B>PolicyEngine</B> class. 

<P>Each permission class must implement the <A HREF="IPermission.htm">IPermission</A> interface. Optionally, one or both of the <A HREF="IAdjustablePermission.htm">IAdjustablePermission</A> and the <A HREF="IEncodablePermission.htm">IEncodablePermission</A> interfaces can be implemented. If the <B>IAdjustablePermission</B> interface is implemented, a permission object can be adjusted to give context information. For instance, the <A HREF="ThreadPermission.htm#com_0003000e13000000">ThreadPermission</A> class implements <B>IAdjustablePermission</B>. Therefore, a <B>ThreadPermission</B> object can be adjusted to indicate a <B>ThreadGroup</B> object that classes with the <B>ThreadPermission</B> should have access to. If a permission class implements the <B>IEncodablePermission</B> interface, the permission object can encode itself for use in digital signatures. The encoding formats that are supported (HTML, ASN, text, and others) are supplied by constants in the <A HREF="EncodeFormats.htm">EncodeFormats</A> class. 

<P>Permission types are identified by the constants in the <A HREF="PermissionID.htm">PermissionID</A> class. Except for PermissionID.<A HREF="PermissionID.htm#com_0003000d0502000c">SYSTEM</A>, each constant corresponds to the name of a permission class that implements that type of permission. For instance, the PermissionID.<A HREF="PermissionID.htm#com_0003000d05020009">REGISTRY</A> value corresponds to the com.ms.security.permissions.<A HREF="RegistryPermission.htm#com_0003000e0f000000">RegistryPermission</A> class. <B>PermissionID</B> objects are passed to the <A HREF="PolicyEngine.htm#com_0003000d09011000">PolicyEngine.checkPermission(PermissionID,Object)</A> methods to indicate the type of permission being checked. If you have designed a custom permission class and need a <B>PermissionID</B> that identifies your new class, you can call the PolicyEngine.<A HREF="PolicyEngine.htm#com_0003000d09011800">permissionNameToID</A> method to create a <B>PermissionID</B>. You can also use <B>permissionNameToID</B> to convert a predefined system permission name to its corresponding <B>PermissionID</B>. 

<P>Several of the predefined classes in the <A HREF="def_secp.htm">com.ms.security.permissions</A> package implement the <A HREF="ISecurityRequest.htm">ISecurityRequest</A> interface. An instance of a class that implements <B>ISecurityRequest</B> represents both a <A HREF="PermissionID.htm">PermissionID</A> and one or more parameters that are relevant to the permission type. To do a parameterized security check for a permission that has a corresponding <B>ISecurityRequest</B> class, you should pass an <B>ISecurityRequest</B> object of the appropriate type to the <A HREF="PolicyEngine.htm#com_0003000d09011200">PolicyEngine.checkPermission(ISecurityRequest)</A> method. The <A HREF="def_psec.htm#commssecurity_ovr_0003000d01020000">example</A> at the end of this overview shows how to do a parameterized security check using an <B>ISecurityRequest</B> object. To learn more about doing security checks for predefined permissions, see the <A HREF="def_secp.htm#commssecuritypermissions_ovr_0003000e01030000">Using ISecurityRequest Objects To Perform Security Checks</A> section of the <B>com.ms.security.permissions</B> overview. The <B>com.ms.security.permissions</B> overview also provides a list of classes that implement <B>ISecurityRequest</B>. 

<P>Permission objects can be grouped into a <A HREF="PermissionSet.htm">PermissionSet</A> or a <A HREF="PermissionDataSet.htm">PermissionDataSet</A>. A <B>PermissionSet</B> object is immutable, so you could turn your <B>PermissionDataSet</B> into a <B>PermissionSet</B> to protect your permission objects from modification. However, if you want to enumerate the permissions in the set, they must be in the form of a <B>PermissionDataSet</B> so that you can use the <A HREF="PermissionDataSetEnumerator.htm">PermissionDataSetEnumerator</A> methods. Similarly, when a set of permissions is ready to be encoded for use in a digital signature, the set must be in the form of a <B>PermissionDataSet</B> object. However, when the permission set is associated with a particular class (using the <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> methods), it should be in <B>PermissionSet</B> form so that it cannot be modified.

<P>The <A HREF="PermissionUtils.htm">PermissionUtils</A> class supplies a variety of useful methods whose functionality falls into one of three categories.
<UL><LI>Deep copy helpers to use when implementing <A HREF="IPermission.htm#com_0003000d0f010300">IPermission.copy</A>.
<LI>Comparison helpers to use when implementing <A HREF="SetComparison.htm#com_000300141a010100">SetComparison.compareSet</A> methods. 
<LI>Combine helpers to use when implementing <A HREF="IPermission.htm#com_0003000d0f010200">IPermission.combine</A>.
</UL>
<H3 STYLE="color:#333366"><A NAME="commssecurity_ovr_0003000d01020000">Examples</A></H3><P>The following example illustrates one way to do a parameterized security check for the <A HREF="PropertyPermission.htm#com_0003000e0c000000">PropertyPermission</A> that indicates permission to read the java.class.path property.
<PRE><FONT FACE="Courier" SIZE="2">
// Create a request object
PropertyAccessRequest par = 
   new PropertyAccessRequest("java.class.path");   
PolicyEngine.checkPermission(par);
</FONT></PRE>
<P>Suppose you want to create a set of three permissions and mark a new class with those permissions. The following code could be written within a class that extends the <A HREF="SecurityClassLoader.htm">SecurityClassLoader</A> class.
<PRE><FONT FACE="Courier" SIZE="2">
// Create the PermissionDataSet. 
PermissionDataSet pds = new PermissionDataSet();

// Create a permission object.   
PropertyPermission perm1 = 
   new PropertyPermission();
perm1.addAllowedProperties("java.*");

// Add the permission to the set.
pds.add(PermissionID.PROPERTY,perm1);
 
// Create a second permission object.
SystemStreamsPermission perm2 = 
   new SystemStreamsPermission();
perm2.setCanSetSystemIn(true);

// Add the second permission to the set.
pds.add(PermissionID.SYSSTREAMS,perm2);

// Create a third permission object.
FileIOPermission perm3 = new FileIOPermission();
perm3.AddReadableFile("MySample.txt",true);
perm3.AddDeleteableFile("Useless.txt",true);

// Add the third permission to the set.
pds.add(PermissionID.FILEIO);

// Convert to a PermissionSet.
PermissionSet permSet = pds.toPermissionSet();

... 
// Obtain the Principal  (prince) 
// Obtain the class name (classname) 
// Obtain the class data (classdata) 
...

int len = classdata.length;
 
// Mark the class with the PermissionSet.
Class cl = defineClass(classname,classdata,0,
                       len,permSet,prince);     
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commssecurity_0003000d01030000">Classes</A></H3><DL>
<DT><A HREF="EncodeFormats.htm">Class EncodeFormats</A>
 </DT><DD>This class contains values that are used to encode permissions or retrieve information about permissions.
</DD><DT><A HREF="PermissionDataSet.htm">Class PermissionDataSet</A>
 </DT><DD>This class represents sets of permission objects.
</DD><DT><A HREF="PermissionDataSetEnumerator.htm">Class PermissionDataSetEnumerator</A>
 </DT><DD>This class implements an enumeration of the permission identifiers stored within a <B>PermissionDataSet</B> object.
</DD><DT><A HREF="PermissionID.htm">Class PermissionID</A>
 </DT><DD>This class represents objects that are used to identify permission types.
</DD><DT><A HREF="PermissionRequestDeniedException.htm">Class PermissionRequestDeniedException</A>
 </DT><DD>This class represents a security exception that is thrown by a component of the security system when a security check fails because a permission has been explicitly denied.
</DD><DT><A HREF="PermissionSet.htm">Class PermissionSet</A>
 </DT><DD>This class represents an immutable form of a <B>PermissionDataSet</B> object.
</DD><DT><A HREF="PermissionTreeOutput.htm">Class PermissionTreeOutput</A>
 </DT><DD>This class is used to create a tree representation of the permissions.
</DD><DT><A HREF="PermissionUtils.htm">Class PermissionUtils</A>
 </DT><DD>This class provides routines used by the permission classes.
</DD><DT><A HREF="PolicyEngine.htm">Class PolicyEngine</A>
 </DT><DD>This class exposes methods that perform permission-based security checks.
</DD><DT><A HREF="SecurityClassLoader.htm">Class SecurityClassLoader</A>
 </DT><DD>This class provides methods that associate permissions with classes.
</DD><DT><A HREF="SecurityExceptionEx.htm">Class SecurityExceptionEx</A>
 </DT><DD>This class represents security exceptions that are thrown by a component of the security system to indicate a security violation.
</DD><DT><A HREF="StandardSecurityManager.htm">Class StandardSecurityManager</A>
 </DT><DD>This class defines a security policy that uses the permission model to perform security checks.

</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commssecurity_0003000d01040000">Interfaces</A></H3><DL>
<DT><A HREF="IAdjustablePermission.htm">Interface IAdjustablePermission</A>
 </DT><DD>This interface provides a method for modifying a permission object to give context information.
</DD><DT><A HREF="IEncodablePermission.htm">Interface IEncodablePermission</A>
 </DT><DD>This interface provides methods that allow permissions to represent their internal state in any desired format.
</DD><DT><A HREF="IPermission.htm">Interface IPermission</A>
 </DT><DD>This interface must be implemented by all classes that represent permissions.
</DD><DT><A HREF="ISecurityRequest.htm">Interface ISecurityRequest</A>
 </DT><DD>This interface is used to associate specific types of objects with specific permission types.

</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commssecurity_0003000d01050000">Hierarchy</A></H3><PRE><FONT FACE="Courier" SIZE="2"><B>Object</B>
  |
  +--<A HREF="EncodeFormats.htm">EncodeFormats</A>
  |
  +--<A HREF="PermissionDataSet.htm">PermissionDataSet</A> (<A HREF="IEncodablePermission.htm">IEncodablePermission</A>, <A HREF="SetComparison.htm#com_000300141a000000">com.ms.util.SetComparison</A>)
  |
  +--<A HREF="PermissionDataSetEnumerator.htm">PermissionDataSetEnumerator</A> (<B>Enumeration</B>)
  |
  +--<A HREF="PermissionID.htm">PermissionID</A>
  |
  +--<A HREF="PermissionSet.htm">PermissionSet</A>
  |
  +--<A HREF="PermissionUtils.htm">PermissionUtils</A>
  |
  +--<A HREF="PolicyEngine.htm">PolicyEngine</A>

<B>ClassLoader</B>
  |
  +--<A HREF="SecurityClassLoader.htm">SecurityClassLoader</A>

<B>SecurityException</B>
  |
  +--<A HREF="SecurityExceptionEx.htm">SecurityExceptionEx</A>
     |
     +--<A HREF="PermissionRequestDeniedException.htm">PermissionRequestDeniedException</A>

<B>SecurityManager</B>
  |
  +--<A HREF="StandardSecurityManager.htm">StandardSecurityManager</A>

<B>OutputStream</B>
  |
  +--<A HREF="PermissionTreeOutput.htm">PermissionTreeOutput</A>

<A HREF="IAdjustablePermission.htm">IAdjustablePermission</A>
<A HREF="IEncodablePermission.htm">IEncodablePermission</A>
<A HREF="IPermission.htm">IPermission</A>
<A HREF="ISecurityRequest.htm">ISecurityRequest</A>
</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

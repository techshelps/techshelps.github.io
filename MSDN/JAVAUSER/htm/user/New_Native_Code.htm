<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Native Code interface</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Native Code Interface Specification"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="New_Native_Code.htm#natcodei_0008010303010000">Implications for Existing Code</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="New_Native_Code.htm#natcodei_0008010303020000">Implications and Benefits</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jnative2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Java & Native Code"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Existing_Code.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Native_Code_Interface.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="RNI"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="gc_architecture.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Native Code Interface Specification</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">RNI</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">New Native Code interface</H2>
<P>In the design of the native code interface in the Microsoft VM, this article has addressed many of the implications of prior interfaces as discussed previously. Internally, object references are pointers directly to the object. The following diagram describes the internal storage details of objects within the Microsoft native code model.

<P><IMG SRC="art/java04.gif" WIDTH="230" HEIGHT="95" ALT="" >

<P>A pointer to this object is a pointer directly to the method table pointer in the object that is located just under the Data. The data is directly above the method table (which is a different data structure than current implementations support). When the Microsoft VM calls native code, it calls the target function directly without going through stubs located in the DLL library. There are stubs, but they are optimized, CPU-specific code generated by the VM.
<P>For source code compatibility and header compatibility, this native code model supports the <B>unhand</B> macro. All the <B>unhand</B> does is cast the handle to a pointer (and add 4 to its address). In the future, Microsoft will have another version of <B>unhand</B> that won't do any arithmetic (but should still be used). There will also be another header file generator that detects this extra method table element at the base and creates appropriate C structures representing this. This will ensure that everything is fully accessible.
<P>Since the Microsoft VM does not conservatively garbage collect native stacks, if any native code has outstanding pointer references during a garbage collection, the same problems that exist with the current native code model could be encountered. To remedy this, while still providing maximum speed with minimum overhead, Microsoft has defined conventions to ensure a deterministic, low overhead solution with respect to outstanding native code pointers. These conventions rely on the fact that native code is responsible for enabling/disabling garbage collection as necessary, and informing the VM of locations in memory where object pointers exist.

<H3 STYLE="color:#333366"><A NAME="natcodei_0008010303010000">Implications for Existing Code</A></H3><P>This new native code interface is not binary compatible with the current interface. Existing Java applications that use the <B>native</B> keyword will need to consider the use they make of native code and how long they will be in native code functions. If you are calling native code and returning, it's all right to leave source code as it was with the previous model. If you are going to block or take an undetermined amount of time to perform some task before returning to the VM, you need to ensure that you allow garbage collection. By default, garbage collection is turned off when you enter native code.

<H3 STYLE="color:#333366"><A NAME="natcodei_0008010303020000">Implications and Benefits</A></H3><UL><LI>No extra level of indirection. Objects that are accessed don't require extra code to indirect through handles.
</UL>
<PRE><FONT FACE="Courier" SIZE="2">
Benefit : performance improvement
</FONT></PRE>
<UL><LI>No explicit stubs
</UL>
<P>The target method is called directly from the VM. On the fly, the VM creates an assembler stub, which sets up a frame appropriate for the calling convention of the current machine architecture. The process is as follows (the pushes are needed to transpose calling conventions).

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">setup native frame
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">push
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">push
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">push
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">call native method
</FONT></TD></TABLE>
<P>In a way, this is similar to what happens in the existing native code interface, but it's carried out in a highly-optimized form within the VM. This allows the VM to share stubs among similar methods and reduce working set, or optimize absolutely for speed. In either case, the native code libraries themselves can be smaller because they don't contain additional code for parameter unwrapping.
<PRE><FONT FACE="Courier" SIZE="2">
Benefit :  VM chooses optimizations, performance improvement.
</FONT></PRE>
<UL><LI>Using passed parameters is faster
</UL>
<PRE><FONT FACE="Courier" SIZE="2">
Benefit : performance improvement
</FONT></PRE>
<UL><LI>JIT code is internally more optimized
</UL>
<PRE><FONT FACE="Courier" SIZE="2">
Benefit : performance improvement
</FONT></PRE>
<P>C code is just as portable as before. For the existing native code interface, there is less computer-specific code within the VM to support the model, but there is always porting work required. Stubs are duplicated in every library (DLL or equivalent).

<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class RegKey</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegKey.htm#com_0003000202010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegKey.htm#com_0003000202020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="RegKey.htm#com_0003000202030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="multicastnotsupportedexception.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_lang.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="RegKeyEnumValue.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.lang</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class RegKey</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class RegKey
{
  // Fields
  public final static int <A HREF="RegKey.htm#com_0003000202030001">CLASSES_ROOT</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030002">KEYOPEN_ALL</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030003">KEYOPEN_CREATE</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030004">KEYOPEN_READ</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030005">KEYOPEN_WRITE</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030006">LOCALMACHINE_ROOT</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030007">USER_ROOT</A>;
  public final static int <A HREF="RegKey.htm#com_0003000202030008">USERS_ROOT</A>;

  // Constructors
  public <A HREF="RegKey.htm#com_0003000202010100">RegKey</A>(RegKey rkParent, String subKey, int access)
        throws RegKeyException;
  public <A HREF="RegKey.htm#com_0003000202010200">RegKey</A>(int rootID, String subKey, int access)
        throws RegKeyException;
  public <A HREF="RegKey.htm#com_0003000202010300">RegKey</A>(int rootID,String subKey) throws RegKeyException;

  // Methods
  public void <A HREF="RegKey.htm#com_0003000202020100">close</A>();
  public void <A HREF="RegKey.htm#com_0003000202020200">deleteSubKey</A>(String sub);
  public void <A HREF="RegKey.htm#com_0003000202020300">deleteValue</A>(String val);
  public String <A HREF="RegKey.htm#com_0003000202020400">enumKey</A>(int idx);
  public RegKeyEnumValue <A HREF="RegKey.htm#com_0003000202020500">enumValue</A>(int idx);
  public void <A HREF="RegKey.htm#com_0003000202020600">finalize</A>();
  public void <A HREF="RegKey.htm#com_0003000202020700">flush</A>();
  public byte[] <A HREF="RegKey.htm#com_0003000202020800">getBinaryValue</A>(String name);
  public int <A HREF="RegKey.htm#com_0003000202020900">getIntValue</A>(String name);
  public int <A HREF="RegKey.htm#com_0003000202020a00">getIntValue</A>(String name, int defval);
  public final static RegKey <A HREF="RegKey.htm#com_0003000202020b00">getRootKey</A>(int id);
  public String <A HREF="RegKey.htm#com_0003000202020c00">getStringValue</A>(String name);
  public String <A HREF="RegKey.htm#com_0003000202020d00">getStringValue</A>(String name,String defval);
  public void <A HREF="RegKey.htm#com_0003000202020e00">loadKey</A>(String subKey, String fileName);
  public RegQueryInfo <A HREF="RegKey.htm#com_0003000202020f00">queryInfo</A>();
  public void <A HREF="RegKey.htm#com_0003000202021000">replace</A>(String subKey, String newFile,
        String oldFile);
  public void <A HREF="RegKey.htm#com_0003000202021100">restore</A>( String filename, boolean vol );
  public void <A HREF="RegKey.htm#com_0003000202021200">setValue</A>(String subKey, String val);
  public void <A HREF="RegKey.htm#com_0003000202021300">setValue</A>(String subKey, byte val[]);
  public void <A HREF="RegKey.htm#com_0003000202021400">setValue</A>(String subKey, int val);
  public String <A HREF="RegKey.htm#com_0003000202021500">toString</A>();
  public void <A HREF="RegKey.htm#com_0003000202021600">unload</A>(String subKey);
  public RegKeyValueEnumerator <A HREF="RegKey.htm#com_0003000202021700">values</A>();
}
</FONT></PRE>
<P>The RegKey class produces Windows registry access objects. 

<H3 STYLE="color:#333366"><A NAME="com_0003000202010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000202010100">RegKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegKey(RegKey rkParent, String subKey, int access)
        throws RegKeyException;
</FONT></PRE>
<P><P>Creates the specified key. If the key already exists in the Windows registry, the method opens it. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rkParent</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The currently open key or any of the following predefined reserved identifiers: 
<UL><LI>null 
<LI>HKEY_CLASSES_ROOT, 
<LI>HKEY_CURRENT_USER, 
<LI>HKEY_LOCAL_MACHINE 
<LI>HKEY_USERS 
</UL>
<P>The key created is a subkey of the key identified by the rkParent parameter. If the applet is running in a browser or another protected environment, this parameter must be null. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string specifying the name of a subkey that this method opens or creates. must be a subkey of the key identified by the <I>rkParent</I> parameter. This subkey must not begin with the backslash character (\). The <I>rkParent</I> parameter cannot be null. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>access</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The read-write access privileges for the key. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><A HREF="RegKeyException.htm">com.ms.lang.RegKeyException</A>
 if the key cannot be created. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202010200">RegKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegKey(int rootID, String subKey, int access) throws RegKeyException;
</FONT></PRE>
<P><P>A convenience constructor that performs Regkey.getRootKey automatically. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rootID</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The rootID of the key. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A string specifying the name of a subkey that this method opens or creates. The subkey must not begin with the backslash character (\). The <I>rkParent</I> parameter cannot be null. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>access</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The read-write access for the key. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202010300">RegKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegKey(int rootID,String subKey) throws RegKeyException;
</FONT></PRE>
<P><P>Opens a key for reading. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rootID</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The root identifier of the key. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A string specifying the name of a subkey that this method opens or creates. The subkey must not begin with the backslash character (\). This parameter cannot be null. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003000202020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000202020100">close</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void close();
</FONT></PRE>
<P><P>Closes a key when it is no longer needed. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>As the system registry keys must be written out to disk, the keys must be closed when no longer needed. After this, the keys must not be used again.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020200">deleteSubKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void deleteSubKey(String sub);
</FONT></PRE>
<P><P>Removes a subkey from the key. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sub</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey removed from the key. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
 if the subkey removal is unsuccessful. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020300">deleteValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void deleteValue(String val);
</FONT></PRE>
<P><P>Deletes a value from the key. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the value that is deleted. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020400">enumKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String enumKey(int idx);
</FONT></PRE>
<P><P>Enumerates a key's subkeys. 

<P><B>Return Value:</B> <P>Returns the enumeration value of the subkey by index (see <A HREF="RegKeyEnumValue.htm">RegKeyEnumValue</A>). 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The enumeration index. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020500">enumValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegKeyEnumValue enumValue(int idx);
</FONT></PRE>
<P><P>Enumerates values of the key. 

<P><B>Return Value:</B> <P>Returns the subkey name of the subkey. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The enumeration index. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020600">finalize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void finalize();
</FONT></PRE>
<P><P>Frees the resources associated with a <A HREF="RegKey.htm">RegKey</A> object. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020700">flush</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void flush();
</FONT></PRE>
<P><P>Flushes the key to the registry on disk. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020800">getBinaryValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public byte[] getBinaryValue(String name);
</FONT></PRE>
<P><P>Queries a byte array from the registry. 

<P><B>Return Value:</B> <P>Returns the byte array contained in the subKey. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subKey containing the value requested. The name must be a subkey of the current key. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020900">getIntValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getIntValue(String name);
</FONT></PRE>
<P><P>Queries an integer value from the registry. 

<P><B>Return Value:</B> <P>Returns the integer value contained in the subKey. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subKey containing the value wanted. The name must be a subkey of the current key. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020a00">getIntValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getIntValue(String name, int defval);
</FONT></PRE>
<P><P>Queries an integer value from the registry. The name is a subkey of the current key. If the named value does not exist in the registry, the default value is returned. 

<P><B>Return Value:</B> <P>Returns the integer value contained in the subKey or the default value if the named value does not exist in the registry. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey containing the value wanted. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>defval</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The default value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020b00">getRootKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final static RegKey getRootKey(int id);
</FONT></PRE>
<P><P>Retrieves a top-level key. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>id</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The identifier of the top-level key. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020c00">getStringValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getStringValue(String name);
</FONT></PRE>
<P><P>Queries a string value from the registry. The name is a subkey of the current key. 

<P><B>Return Value:</B> <P>Returns the String value contained in the subKey. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subKey containing the requested value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020d00">getStringValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String getStringValue(String name,String defval);
</FONT></PRE>
<P><P>Queries a string value from the registry. The name is a subkey of the current key. If the named value does not exist in the registry, the specified default value is returned. 

<P><B>Return Value:</B> <P>Returns the default value if the named value does not exist in the registry. Otherwise, the method returns the string value contained in the subkey. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>name</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey containing the requested string. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>defval</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The default value to return. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020e00">loadKey</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void loadKey(String subKey, String fileName);
</FONT></PRE>
<P><P>Loads a new hive into the registry. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the subkey created to contain the new hive. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fileName</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of a file that contains the registry information. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202020f00">queryInfo</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegQueryInfo queryInfo();
</FONT></PRE>
<P><P>Retrieves information about the key. 

<P><B>Return Value:</B> <P>Returns a <A HREF="RegQueryInfo.htm">RegQueryInfo</A> object containing the information. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021000">replace</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void replace(String subKey, String newFile, String oldFile);
</FONT></PRE>
<P><P>Replaces the file supporting a key and all its subkeys with another file. The next time the system is started, the key and subkey values are stored in the new file. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey, whose values are stored in the new file. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newFile</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the new file. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>oldFile</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the old file. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021100">restore</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void restore( String filename, boolean vol );
</FONT></PRE>
<P><P>Restores a subkey from a file. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>filename</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The filename. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vol</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value returned is true if the hive is volatile; otherwise, the value is false. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021200">setValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValue(String subKey, String val);
</FONT></PRE>
<P><P>Sets a string value into a subkey. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey that holds the value. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string that is written out. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021300">setValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValue(String subKey, byte val[]);
</FONT></PRE>
<P><P>Sets a byte array into a subkey. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey that holds the value. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array that is written out. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021400">setValue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setValue(String subKey, int val);
</FONT></PRE>
<P><P>Sets an integer value into a subkey. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey that holds the value. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The integer that is written out. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021500">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString();
</FONT></PRE>
<P><P>Returns a string representation of the key. 

<P><B>Return Value:</B> <P>Returns a string containing the path information in the form: "[RegKey: &lt;path&gt;]". 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021600">unload</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void unload(String subKey);
</FONT></PRE>
<P><P>Unloads a hive from the registry. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>subKey</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The subkey that is unloaded. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000202021700">values</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public RegKeyValueEnumerator values();
</FONT></PRE>
<P><P>Returns an enumeration of the subkey values of this registry key. 

<P><B>Return Value:</B> <P>Returns a <B>RegKeyValueEnumerator</B> object, used to enumerate the list of subkeys. 

<P><B>See Also:</B> <B>RegKeyValueEnumerator</B>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003000202030000">Fields</A></H3><DL>
<DT><B><A NAME="com_0003000202030001">CLASSES_ROOT</A></B>
</DT><DD>An identifier that signifies that the HKEY_CLASSES_ROOT key must be returned. 

</DD><DT><B><A NAME="com_0003000202030002">KEYOPEN_ALL</A></B>
</DT><DD>An identifier that signifies a key must be opened for read-write access. 

</DD><DT><B><A NAME="com_0003000202030003">KEYOPEN_CREATE</A></B>
</DT><DD>An identifier that signifies a key must be created, not opened. 

</DD><DT><B><A NAME="com_0003000202030004">KEYOPEN_READ</A></B>
</DT><DD>An identifier that signifies a key must be opened for read-only access. 

</DD><DT><B><A NAME="com_0003000202030005">KEYOPEN_WRITE</A></B>
</DT><DD>An identifier that signifies a key must be opened for write access. 

</DD><DT><B><A NAME="com_0003000202030006">LOCALMACHINE_ROOT</A></B>
</DT><DD>An identifier that signifies that the HKEY_LOCAL_MACHINE key must be returned. 

</DD><DT><B><A NAME="com_0003000202030007">USER_ROOT</A></B>
</DT><DD>An identifier that signifies that the HKEY_CURRENT_USER key must be returned. 

</DD><DT><B><A NAME="com_0003000202030008">USERS_ROOT</A></B>
</DT><DD>An identifier that signifies that the HKEY_USERS key must be returned. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

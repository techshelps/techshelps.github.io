<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing COM Objects</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Low-Level Java/COM Integration"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Implementing_COM_Objects.htm#javacom_0008000303010000">Reference Counting</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Implementing_COM_Objects.htm#javacom_0008000303020000">Supporting Multiple Interfaces</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Implementing_COM_Objects.htm#javacom_0008000303030000">How IDispatch Is Implemented</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Implementing_COM_Objects.htm#javacom_0008000303040000">Implementing COM Interfaces</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Implementing_COM_Objects.htm#javacom_0008000303050000">Parameters Passed by Reference</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jnative2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Java & Native Code"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Using_a_COM_Object.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="javacom.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Java/Com"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Type_Mappings_Between_Java_and_COM.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Low-Level Java/COM Integration</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Java/Com</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Implementing COM Objects</H2>
<P>Suppose you want to implement a COM object in Java. You need to understand how the VM for Java takes care of reference counting, how you can implement multiple interfaces on a Java object, and how <B>QueryInterface</B> and <B>IDispatch</B> are implemented. These topics are discussed in the sections that follow.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000303010000">Reference Counting</A></H3><P>Reference counting is handled automatically in Java. There is no need to call <B>IUnknown::AddRef</B> when creating a new reference to an object, nor do you need to call <B>IUnknown::Release</B> when you're finished using a reference to an object. The Java garbage collector automatically keeps track of how many references there are to an object. In practice, however, you may need to explicitly release some COM objects to ensure a timely release of shared resources. You can use the com.ms.com.ComLib.<A HREF="ComLib.htm#com_0003000506010900">release</A> method to force Java to release all its reference counts on a COM object.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000303020000">Supporting Multiple Interfaces</A></H3><P>COM objects can support multiple interfaces and Java supports multiple interfaces on objects. This is probably the most important reason that Java/COM integration works so well. Consider the previous robot example, but the COM <B>Robot</B> class (CLSID_Robot) implements an interface called <B>IRobotDiagnostics</B> in addition to <B>IRobot</B>. The <B>IRobot</B> interface is used to control what the robot does and <B>IRobotDiagnostics</B> determines the status of the robot.

<P>The following C++ code makes use of both interfaces. First, the robot is instructed to move forward 10 units, and then turn left 90 degrees, using the <B>IRobot</B> interface. The following example then uses <B>QueryInterface</B> for <B>IRobotDiagnostics</B>, and uses that interface to tell the robot to display a status message:
<PRE><FONT FACE="Courier" SIZE="2">
//  Error handling has been omitted for brevity.
IRobot* probbie = NULL;
IRobotDiagnostics* probbieDiag = NULL;
CoCreateInstance(CLSID_Robot, NULL, CLSCTX_SERVER, IID_IRobot, (void**)&amp;probbie);
probbie-&gt;GoForward(10);
probbie-&gt;Turn(-90);
probbie-&gt;QueryInterface(IID_IRobotDiagnostics, (void**)&amp;probbieDiag);
probbie-&gt;OutputStatusMessage();
probbieDiag-&gt;Release();
probbie-&gt;Release();
</FONT></PRE>
<P>The same code, written in Java, would look like this:
<PRE><FONT FACE="Courier" SIZE="2">
import robocorp.bots.*;
Robot robbie = new Robot();
IRobotDiagnostics robbieDiag = null;
robbie.GoForward(10);
robbie.Turn(-90);
robbieDiag = (IRobotDiagnostics)robbie;
robbieDiag.OutputStatusMessage();
</FONT></PRE>
<P>Because the Microsoft VM provides the implementation of <B>IUnknown</B>, there is no need to implement <B>QueryInterface</B>. The assignment statement does the implicit <B>QueryInterface</B> for <B>IRobotDiagnostics</B> (this is very similar to how <B>QueryInterface</B> is supported in Visual Basic version 4.0). 

<P>An explicit cast to the interface is necessary just as it is necessary in normal Java interfaces. An exception is thrown if the object does not support the interface you want. The standard Java <FONT FACE="Courier New">instanceof</FONT> operator can be used to determine whether a given interface is supported.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000303030000">How IDispatch Is Implemented</A></H3><P>When implementing automation objects in Java, you can use automatic <B>IDispatch</B>. The VM implements <B>IDispatch</B> automatically for almost all Java objects. This means that a tool, such as jactivex, is no longer necessary simply to script a Java object from an automation controller such as Visual Basic or Microsoft&#174; Visual Basic&#174; Scripting Edition (VBScript). To implement a simple automation object in Java, you need to do the following things:

<OL><LI>Implement the Java object and compile it.
<LI>Register it using javareg.
<LI>Ensure that the Java class is visible in the CLASSPATH environment variable.
</OL>
<H3 STYLE="color:#333366"><A NAME="javacom_0008000303040000">Implementing COM Interfaces</A></H3><P>Normally (in the absence of COM), when implementing an interface on a Java class, the interface being implemented is either declared within the code module (file) where the implementation occurs or in an external .class file, which is imported through the import statement. You cannot define an interface using the interface declaration and import the same interface's declaration from a .class file. This rule also holds true for COM interfaces. Therefore, you will never see a COM interface defined by Java. Instead, a COM interface is defined in IDL, compiled into a type library, and imported into Java as though it were a standard Java .class file.

<P>To implement COM interfaces on a Java class, use the <FONT FACE="Courier New">implements</FONT> modifier on the class declaration with a list of interface names and provide method bodies for each method in the interfaces (excluding <B>QueryInterface</B>, <B>AddRef</B>, and <B>Release</B>). 
<P>The following example shows the <B>IRobot</B> interface described in IDL:

<PRE><FONT FACE="Courier" SIZE="2">
[ object, uuid(6C6971D5-8E69-11cf-A54F-080036F12502)]
interface IRobot : IUnknown
{
&#009;...
&#009;HRESULT OutputStatusMessage([out, retval]BOOL* pRetVal);
&#009;...
};
</FONT></PRE>
<P>If the IDL file was compiled into the <FONT FACE="Courier New">robocorp/bots.tlb</FONT> type library, the following Java code could be written to implement a robot object:
<PRE><FONT FACE="Courier" SIZE="2">
import robocorp.bots.*;
class RogerRobot implements IRobot
{
&#009;...
&#009;boolean OutputStatusMessage(void)
&#009;{
&#009;&#009;return VoiceBox.Speak(CurrentStatus());
&#009;}
&#009;...
}
</FONT></PRE>
<P>Every Java class automatically implements <B>IUnknown</B> and <B>IDispatch</B>. The dispinterface implemented by the <B>IDispatch</B> interface, which Java provides, contains the public methods that are on the default interface for the class. For example, the following Java class implements an <B>IDispatch</B> interface, which supports MethodA and MethodB:
<PRE><FONT FACE="Courier" SIZE="2">
class Example 
{
&#009;public void MethodA(void)
        { ... }

&#009;public void MethodB(int x) 
&#009;{ ... }
}
</FONT></PRE>
<P>At run time, the Microsoft VM automatically provides type information for this <B>IDispatch</B> implementation (using <B>IDispatch::GetTypeInfo</B>), so clients can avoid the overhead of using <B>IDispatch::GetIDsOfNames</B> to do late binding. Since all Java objects are COM objects, nothing else is required.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000303050000">Parameters Passed by Reference</A></H3><P>COM interface methods can have parameters that pass simple types such as integers, floating point values, and characters by reference. In most cases these parameters are "out" parameters. For example, the COM method MySample has the following signature:
<PRE><FONT FACE="Courier" SIZE="2">
HRESULT MySample([in] long l, [out] long* Out1, [out, retval] long* retval);
</FONT></PRE>
<P>However, Java does not support parameters that are references to the intrinsic data types, and it does not support pointers. But you can still call MySample from Java. Reference types are mapped to one-element arrays by the Microsoft VM. Therefore, you can retrieve a reference in the following way:

<PRE><FONT FACE="Courier" SIZE="2">
int A;
int B[] = new int[1];
A = MySample(42, B);
System.out.println("A = " + A + " and B = " + B[0]);
</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Variant</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Variant.htm#com_000300050e010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Variant.htm#com_000300050e020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Variant.htm#com_000300050e030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="STATSTG.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_pcom.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="WrongThreadException.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.com</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class Variant</H2>
<PRE><FONT FACE="Courier" SIZE="2">public final class Variant
{
  // Fields
  public static final short <A HREF="Variant.htm#com_000300050e030001">VariantArray</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030002">VariantBoolean</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030003">VariantByref</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030004">VariantByte</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030005">VariantCurrency</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030006">VariantDate</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030007">VariantDispatch</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030008">VariantDouble</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030009">VariantEmpty</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000a">VariantError</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000b">VariantFloat</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000c">VariantInt</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000d">VariantNull</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000e">VariantObject</A>;
  public static final short <A HREF="Variant.htm#com_000300050e03000f">VariantShort</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030010">VariantString</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030011">VariantTypeMask</A>;
  public static final short <A HREF="Variant.htm#com_000300050e030012">VariantVariant</A>;

  // Constructors
  public <A HREF="Variant.htm#com_000300050e010100">Variant</A>();
  public <A HREF="Variant.htm#com_000300050e010200">Variant</A>(int val);
  public <A HREF="Variant.htm#com_000300050e010300">Variant</A>(double val);
  public <A HREF="Variant.htm#com_000300050e010400">Variant</A>(boolean val);
  public <A HREF="Variant.htm#com_000300050e010500">Variant</A>(String val);
  public <A HREF="Variant.htm#com_000300050e010600">Variant</A>(SafeArray val, boolean fByRef);
  public <A HREF="Variant.htm#com_000300050e010700">Variant</A>(Object value);
  public <A HREF="Variant.htm#com_000300050e010800">Variant</A>(int vartype, int val);
  public <A HREF="Variant.htm#com_000300050e010900">Variant</A>(int vartype, boolean val);
  public <A HREF="Variant.htm#com_000300050e010a00">Variant</A>(int vartype, double val);
  public <A HREF="Variant.htm#com_000300050e010b00">Variant</A>(int vartype, Object val);
  public <A HREF="Variant.htm#com_000300050e010c00">Variant</A>(Object value, boolean unwrapScriptObjects);

  // Methods
  public native void <A HREF="Variant.htm#com_000300050e020100">changeType</A> (short vartype);
  public void <A HREF="Variant.htm#com_000300050e020200">changeType</A> (int vartype);
  public Object <A HREF="Variant.htm#com_000300050e020300">clone</A> ();
  public Variant <A HREF="Variant.htm#com_000300050e020400">cloneIndirect</A> ();
  protected void <A HREF="Variant.htm#com_000300050e020500">finalize</A>();
  public native boolean <A HREF="Variant.htm#com_000300050e020600">getBoolean</A> ();
  public native boolean <A HREF="Variant.htm#com_000300050e020700">getBooleanRef</A> ();
  public byte <A HREF="Variant.htm#com_000300050e020800">getByte</A> ();
  public native byte <A HREF="Variant.htm#com_000300050e020900">getByteRef</A> ();
  public long <A HREF="Variant.htm#com_000300050e020a00">getCurrency</A> ();
  public native long <A HREF="Variant.htm#com_000300050e020b00">getCurrencyRef</A>();
  public double <A HREF="Variant.htm#com_000300050e020c00">getDate</A> ();
  public native double <A HREF="Variant.htm#com_000300050e020d00">getDateRef</A> ();
  public native Object <A HREF="Variant.htm#com_000300050e020e00">getDispatch</A> ();
  public native Object <A HREF="Variant.htm#com_000300050e020f00">getDispatchRef</A>();
  public double <A HREF="Variant.htm#com_000300050e021000">getDouble</A> ();
  public native double <A HREF="Variant.htm#com_000300050e021100">getDoubleRef</A> ();
  public void <A HREF="Variant.htm#com_000300050e021200">getEmpty</A> ();
  public int <A HREF="Variant.htm#com_000300050e021300">getError</A> ();
  public native int <A HREF="Variant.htm#com_000300050e021400">getErrorRef</A> ();
  public float <A HREF="Variant.htm#com_000300050e021500">getFloat</A> ();
  public native float <A HREF="Variant.htm#com_000300050e021600">getFloatRef</A> ();
  public int <A HREF="Variant.htm#com_000300050e021700">getInt</A> ();
  public native int <A HREF="Variant.htm#com_000300050e021800">getIntRef</A> ();
  public void <A HREF="Variant.htm#com_000300050e021900">getNull</A> ();
  public native Object <A HREF="Variant.htm#com_000300050e021a00">getObject</A> ();
  public native Object <A HREF="Variant.htm#com_000300050e021b00">getObjectRef</A> ();
  public short <A HREF="Variant.htm#com_000300050e021c00">getShort</A> ();
  public native short <A HREF="Variant.htm#com_000300050e021d00">getShortRef</A> ();
  public native String <A HREF="Variant.htm#com_000300050e021e00">getString</A> ();
  public native String <A HREF="Variant.htm#com_000300050e021f00">getStringRef</A> ();
  public native Variant[] <A HREF="Variant.htm#com_000300050e022000">getVariantArray</A>();
  public native Variant[] <A HREF="Variant.htm#com_000300050e022100">getVariantArrayRef</A>();
  public short <A HREF="Variant.htm#com_000300050e022200">getvt</A> ();
  public void <A HREF="Variant.htm#com_000300050e022300">noParam</A> ();
  public void <A HREF="Variant.htm#com_000300050e022400">putBoolean</A> (boolean val);
  public native void <A HREF="Variant.htm#com_000300050e022500">putBooleanRef</A>(boolean val);
  public void <A HREF="Variant.htm#com_000300050e022600">putByte</A> (byte val);
  public native void <A HREF="Variant.htm#com_000300050e022700">putByteArray</A>(Object ba);
  public native void <A HREF="Variant.htm#com_000300050e022800">putByteRef</A> (byte val);
  public native void <A HREF="Variant.htm#com_000300050e022900">putCharArray</A>(Object ca);
  public void <A HREF="Variant.htm#com_000300050e022a00">putCurrency</A> (long val);
  public native void <A HREF="Variant.htm#com_000300050e022b00">putCurrencyRef</A>(long val);
  public void <A HREF="Variant.htm#com_000300050e022c00">putDate</A> (double val);
  public native void <A HREF="Variant.htm#com_000300050e022d00">putDateRef</A> (double val);
  public native void <A HREF="Variant.htm#com_000300050e022e00">putDispatch</A> (Object val);
  public native void <A HREF="Variant.htm#com_000300050e022f00">putDispatchRef</A>(Object val);
  public void <A HREF="Variant.htm#com_000300050e023000">putDouble</A> (double val);
  public native void <A HREF="Variant.htm#com_000300050e023100">putDoubleRef</A>(double val);
  public void <A HREF="Variant.htm#com_000300050e023200">putEmpty</A> ( );
  public void <A HREF="Variant.htm#com_000300050e023300">putError</A> (int val);
  public native void <A HREF="Variant.htm#com_000300050e023400">putErrorRef</A> (int val);
  public void <A HREF="Variant.htm#com_000300050e023500">putFloat</A> (float val);
  public native void <A HREF="Variant.htm#com_000300050e023600">putFloatRef</A> (float val);
  public void <A HREF="Variant.htm#com_000300050e023700">putInt</A> (int val);
  public native void <A HREF="Variant.htm#com_000300050e023800">putIntRef</A> (int val);
  public void <A HREF="Variant.htm#com_000300050e023900">putNull</A> ( );
  public native void <A HREF="Variant.htm#com_000300050e023a00">putObject</A> (Object val);
  public native void <A HREF="Variant.htm#com_000300050e023b00">putObjectRef</A>(Object val);
  public void <A HREF="Variant.htm#com_000300050e023c00">putSafeArray</A>(SafeArray sa);
  public void <A HREF="Variant.htm#com_000300050e023d00">putSafeArrayRef</A>(SafeArray sa);
  public void <A HREF="Variant.htm#com_000300050e023e00">putShort</A> (short val);
  public native void <A HREF="Variant.htm#com_000300050e023f00">putShortRef</A> (short val);
  public native void <A HREF="Variant.htm#com_000300050e024000">putString</A> (String val);
  public native void <A HREF="Variant.htm#com_000300050e024100">putStringRef</A>(String val);
  public native void <A HREF="Variant.htm#com_000300050e024200">putVariantArray</A>(Variant v[]);
  public native void <A HREF="Variant.htm#com_000300050e024300">putVariantArrayRef</A>(Variant v[]);
  public native boolean <A HREF="Variant.htm#com_000300050e024400">toBoolean</A> () throws ClassCastException;
  public native byte <A HREF="Variant.htm#com_000300050e024500">toByte</A> () throws ClassCastException;
  public native Object <A HREF="Variant.htm#com_000300050e024600">toByteArray</A>();
  public native Object <A HREF="Variant.htm#com_000300050e024700">toCharArray</A>();
  public native long <A HREF="Variant.htm#com_000300050e024800">toCurrency</A> () throws ClassCastException;
  public native double <A HREF="Variant.htm#com_000300050e024900">toDate</A> () throws ClassCastException;
  public native Object <A HREF="Variant.htm#com_000300050e024a00">toDispatch</A> () throws ClassCastException;
  public native double <A HREF="Variant.htm#com_000300050e024b00">toDouble</A> () throws ClassCastException;
  public native int <A HREF="Variant.htm#com_000300050e024c00">toError</A> () throws ClassCastException;
  public native float <A HREF="Variant.htm#com_000300050e024d00">toFloat</A> () throws ClassCastException;
  public native int <A HREF="Variant.htm#com_000300050e024e00">toInt</A> () throws ClassCastException;
  public native Object <A HREF="Variant.htm#com_000300050e024f00">toObject</A> () throws ClassCastException;
  public SafeArray <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A>() throws ClassCastException;
  public native Object <A HREF="Variant.htm#com_000300050e025100">toScriptObject</A> () throws ClassCastException;
  public native short <A HREF="Variant.htm#com_000300050e025200">toShort</A> () throws ClassCastException;
  public String <A HREF="Variant.htm#com_000300050e025300">toString</A> ();
  public native Variant[] <A HREF="Variant.htm#com_000300050e025400">toVariantArray</A>();
  public void <A HREF="Variant.htm#com_000300050e025500">VariantClear</A>();
}
</FONT></PRE>
<P>This class is used to bridge Java with Microsoft&#174; ActiveX&#174; components that manipulate <B>VARIANT</B> data types. 
<P>Most <B>Variant</B> methods fall into one of three categories: 
<UL><LI><I>to</I>XXX methods, which attempt to coerce the <B>Variant</B> object to type XXX and return the converted value. The results of the coercion are not copied back to the <B>Variant</B> object. Coercion is performed by using the Microsoft&#174; Win32&#174; <B>VariantChangeType</B> function. If the <B>Variant</B> object cannot be converted to the requested type, a <B>ClassCastException</B> is thrown. 
<LI><I>get</I>XXX methods, which succeed only if the <B>Variant</B> object is already the correct type. If not, a <B>ClassCastException</B> is thrown. 
<LI><I>put</I>XXX methods, which change the type of a <B>Variant</B> object and initialize it to a new value. In general, it is better to construct and initialize the <B>Variant</B> object atomically by using an overloaded constructor rather than to use one of these methods. 
</UL>
<H3 STYLE="color:#333366"><A NAME="com_000300050e010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300050e010100">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant();
</FONT></PRE>
<P><P>Creates a Variant object of type VT_EMPTY. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010200">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(int val);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_I4. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value of the Variant object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010300">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(double val);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_R8. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value of the Variant object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010400">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(boolean val);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_BOOL. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value of the Variant object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010500">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(String val);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_BSTR. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value of the Variant object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010600">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(SafeArray val, boolean fByRef);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_ARRAY or VT_BYREF|VT_ARRAY. 
<P>Typically, <I>fByRef</I> is set to true when you create a Variant object to pass as a parameter, and it is false when you create a <B>Variant</B> object that is used as a return value. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial <A HREF="SafeArray.htm">SafeArray</A> value. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fByRef</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates how to set the VT_BYREF modifier. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If <I>fByRef</I> is true, any changes made to the <B>SAFEARRAY</B> data structure through the new Variant object will be visible to the <A HREF="SafeArray.htm">SafeArray</A> instance used to initialize the <B>Variant</B> object. 
<P>If <I>fByRef</I> is false, the method revokes the <A HREF="SafeArray.htm">SafeArray</A> instance's ownership. Any further operations on that instance will throw an exception. This is because ownership of the <B>SAFEARRAY</B> data structure has been transferred to the new Variant object. To retrieve any changes made through the <B>Variant</B> object, you must call the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method to obtain a new proxy. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010700">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(Object value);
</FONT></PRE>
<P><P>Creates a Variant object of type VT_DISPATCH or VT_BYREF|VT_ARRAY. 
<P>If the argument is a Java <A HREF="SafeArray.htm">SafeArray</A> object, this constructor is equivalent to the following code. 
<P>
<P>
<PRE><FONT FACE="Courier" SIZE="2">Variant(value, true)</FONT></PRE>
<P>Otherwise, this constructor creates a VT_DISPATCH. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>value</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010800">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(int vartype, int val);
</FONT></PRE>
<P><P>Creates a Variant object of the type indicated by <I>vartype</I>. The type can be <A HREF="Variant.htm#com_000300050e03000f">VariantShort</A>, <A HREF="Variant.htm#com_000300050e03000c">VariantInt</A>, or <A HREF="Variant.htm#com_000300050e030004">VariantByte</A>. The <A HREF="Variant.htm#com_000300050e030003">VariantByref</A> modifier can be set on any of these types. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vartype</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The variant type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010900">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(int vartype, boolean val);
</FONT></PRE>
<P><P>Creates a Variant object of the type indicated by <I>vartype</I>. The type can be <A HREF="Variant.htm#com_000300050e030002">VariantBoolean</A>, or <B>VariantByref|VariantBoolean</B>. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vartype</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The variant type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010a00">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(int vartype, double val);
</FONT></PRE>
<P><P>Creates a Variant object of the type indicated by <I>vartype</I>. The type can be <A HREF="Variant.htm#com_000300050e030008">VariantDouble</A>, <A HREF="Variant.htm#com_000300050e03000b">VariantFloat</A>, or <A HREF="Variant.htm#com_000300050e030006">VariantDate</A>. The <A HREF="Variant.htm#com_000300050e030003">VariantByref</A> modifier can be set on any of these types. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vartype</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The variant type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010b00">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(int vartype, Object val);
</FONT></PRE>
<P><P>Creates a Variant object of the type indicated by <I>vartype</I>. The type can be <A HREF="Variant.htm#com_000300050e030010">VariantString</A>, <A HREF="Variant.htm#com_000300050e03000e">VariantObject</A>, or <A HREF="Variant.htm#com_000300050e030007">VariantDispatch</A>. The <A HREF="Variant.htm#com_000300050e030003">VariantByref</A> modifier can be set on any of these types. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>vartype</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The variant type. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e010c00">Variant</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant(Object value, boolean unwrapScriptObjects);
</FONT></PRE>
<P><P>If <I>unwrapScriptObjects</I> is set to true, this constructor creates an object of the type indicated by <I>value</I>, which may be types VT_BOOL, VT_BSTR, or VT_R8. Otherwise, this constructor creates a VT_DISPATCH.  
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>value</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial value. 
</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>unwrapScriptObjects</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates whether script objects are to be unwrapped.
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300050e020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300050e020100">changeType</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void changeType (short vartype);
</FONT></PRE>
<P><P>Invokes the Win32 <B>VariantChangeType</B> function. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020200">changeType</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void changeType (int vartype);
</FONT></PRE>
<P><P>Invokes the Win32 <B>VariantChangeType</B> function. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020300">clone</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Object clone ();
</FONT></PRE>
<P><P>Invokes the Win32 <B>VariantCopy</B> function. 

<P><B>Return Value:</B> <P>Returns the cloned Variant object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020400">cloneIndirect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public Variant cloneIndirect ();
</FONT></PRE>
<P><P>Invokes the Win32 <B>VariantCopyInd</B> function. 

<P><B>Return Value:</B> <P>Returns the cloned Variant object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020500">finalize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void finalize();
</FONT></PRE>
<P><P>Performs cleanup before garbage collection. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020600">getBoolean</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native boolean getBoolean ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_BOOL Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java boolean. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_BOOL. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020700">getBooleanRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native boolean getBooleanRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_BOOL Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java boolean. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020800">getByte</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public byte getByte ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_UI1 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java byte. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_UI1. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020900">getByteRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native byte getByteRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_UI1 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java byte. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020a00">getCurrency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public long getCurrency ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_CY Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java long. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_CY. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020b00">getCurrencyRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native long getCurrencyRef();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_CY Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java long. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020c00">getDate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public double getDate ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_DATE Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_DATE. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020d00">getDateRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native double getDateRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_DATE Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020e00">getDispatch</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object getDispatch ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_DISPATCH Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_DISPATCH. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e020f00">getDispatchRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object getDispatchRef();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_DISPATCH Variant. 

<P><B>Return Value:</B> <P>Returns the Variantobject's referenced value, which is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021000">getDouble</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public double getDouble ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_R8 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_R8. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021100">getDoubleRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native double getDoubleRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_R8 Variant object. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021200">getEmpty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getEmpty ();
</FONT></PRE>
<P><P>Verifies that the variant type is VT_EMPTY. This method has no other purpose; there is no value associated with a null Variant. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_EMPTY. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021300">getError</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getError ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_ERROR Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_ERROR. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021400">getErrorRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int getErrorRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_ERROR Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021500">getFloat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public float getFloat ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_R4 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java float. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_R4. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021600">getFloatRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native float getFloatRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_R4 Variant object. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java float. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021700">getInt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getInt ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_I4 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_I4. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021800">getIntRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int getIntRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_I4 Variant object. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021900">getNull</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getNull ();
</FONT></PRE>
<P><P>Verifies that the variant type is VT_NULL. This method has no other purpose; there is no value associated with a null Variant. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_NULL. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021a00">getObject</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object getObject ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_UNKNOWN Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_UNKNOWN. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021b00">getObjectRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object getObjectRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_UNKNOWN Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021c00">getShort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public short getShort ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_I2 Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java short. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_I2. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021d00">getShortRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native short getShortRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_I2 Variant object. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java short. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021e00">getString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native String getString ();
</FONT></PRE>
<P><P>Retrieves the value of a VT_BSTR Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's value, which is converted to a Java string. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the variant type is not VT_BSTR. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e021f00">getStringRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native String getStringRef ();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_BSTR Variant. 

<P><B>Return Value:</B> <P>Returns the Variant object's referenced value, which is converted to a Java string. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant is of any other type. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022000">getVariantArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Variant[] getVariantArray();
</FONT></PRE>
<P><P>Retrieves the value of a VT_ARRAY|VT_VARIANT Variant. The embedded array must be one-dimensional. This is an "expensive" method, which has been superceded by the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method. 

<P><B>Return Value:</B> <P>Returns the Variant's value converted to a Java array of <B>Variant</B>s. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022100">getVariantArrayRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Variant[] getVariantArrayRef();
</FONT></PRE>
<P><P>Retrieves the referenced value of a VT_BYREF|VT_ARRAY|VT_VARIANT Variant. The embedded array must be one-dimensional. This is an "expensive" method, which has been superceded by the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method. 

<P><B>Return Value:</B> <P>Returns the Variant's referenced value converted to a Java array of <B>Variant</B> objects. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022200">getvt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public short getvt ();
</FONT></PRE>
<P><P>Extracts the variant type of the Variant object. 

<P><B>Return Value:</B> <P>Returns the variant type. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022300">noParam</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void noParam ();
</FONT></PRE>
<P><P>Sets a Variant object to represent a missing optional parameter. This method is equivalent to the expression 
<PRE><FONT FACE="Courier" SIZE="2">putError(0x80020004) //DISP_E_PARAMNOTFOUND </FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022400">putBoolean</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putBoolean (boolean val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_BOOL and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_BOOL Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022500">putBooleanRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putBooleanRef(boolean val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_BOOL Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantBoolean,val).
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022600">putByte</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putByte (byte val);
</FONT></PRE>
<P><P>Sets the Variant object to be type VT_UI1 and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_UI1 Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByte, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022700">putByteArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putByteArray(Object ba);
</FONT></PRE>
<P><P>Sets a Variant object to type VT_ARRAY|VT_UI1 and clears the previous contents. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ba</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial values of the elements, which must be byte[]. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022800">putByteRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putByteRef (byte val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_UI1 Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantByte,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022900">putCharArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putCharArray(Object ca);
</FONT></PRE>
<P><P>Sets Variant to type VT_ARRAY|VT_I2 and clears the previous contents. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ca</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The initial values of the elements, which must be char[]. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022a00">putCurrency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putCurrency (long val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_CY and clears the previous contents. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022b00">putCurrencyRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putCurrencyRef(long val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_CY Variant object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022c00">putDate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putDate (double val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_DATE and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_DATE Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantDate, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022d00">putDateRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putDateRef (double val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_DATE Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantDate,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022e00">putDispatch</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putDispatch (Object val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_DISPATCH and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_DISPATCH Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e022f00">putDispatchRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putDispatchRef(Object val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_DISPATCH Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantDispatch,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023000">putDouble</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putDouble (double val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_R8 and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_R8 Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023100">putDoubleRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putDoubleRef(double val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_R8 Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantDouble,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023200">putEmpty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putEmpty ( );
</FONT></PRE>
<P><P>Sets the Variant object to type VT_EMPTY and clears the previous contents. The expression 
<PRE><FONT FACE="Courier" SIZE="2">new Variant()</FONT></PRE>
<P>creates a new Variant object that is already type VT_EMPTY, so it is not necessary to invoke the <B>putEmpty</B> method on such an object. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023300">putError</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putError (int val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_ERROR and clears the previous contents. This object is normally passed as a placeholder for a missing optional parameter. 
<P><B>Note</B>  The preferred way to generate a missing parameter is to use the following code. 
<PRE><FONT FACE="Courier" SIZE="2">Variant v = new Variant(val);</FONT></PRE>
<PRE><FONT FACE="Courier" SIZE="2">v.noParam();</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023400">putErrorRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putErrorRef (int val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_ERROR Variant. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023500">putFloat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putFloat (float val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_R4 and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_R4 Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantFloat, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023600">putFloatRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putFloatRef (float val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_R4 Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantFloat,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023700">putInt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putInt (int val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_I4 and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_I4 Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023800">putIntRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putIntRef (int val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_I4 Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantInt,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023900">putNull</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putNull ( );
</FONT></PRE>
<P><P>Sets the Variant object to type VT_NULL and clears the previous contents. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023a00">putObject</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putObject (Object val);
</FONT></PRE>
<P><P>Sets the Variant object to be type VT_UNKNOWN and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_UNKNOWN Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantObject, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023b00">putObjectRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putObjectRef(Object val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_UNKNOWN Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantObject, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023c00">putSafeArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putSafeArray(SafeArray sa);
</FONT></PRE>
<P><P>Sets the Variant object to type <B>SAFEARRAY</B> and clears the previous contents. This method sets the variant type to VT_ARRAY. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sa</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="SafeArray.htm">SafeArray</A> object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023d00">putSafeArrayRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putSafeArrayRef(SafeArray sa);
</FONT></PRE>
<P><P>Replaces a <A HREF="SafeArray.htm">SafeArray</A> object referenced by the Variant. This method sets the variant type to VT_BYREF|VT_ARRAY. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sa</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new <A HREF="SafeArray.htm">SafeArray</A>. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023e00">putShort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void putShort (short val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_I2 and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_I2 Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantShort, val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e023f00">putShortRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putShortRef (short val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_I2 Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantShort,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024000">putString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putString (String val);
</FONT></PRE>
<P><P>Sets the Variant object to type VT_BSTR and clears the previous contents. 
<P><B>Note</B>  The preferred way to create a VT_BSTR Variant is to use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024100">putStringRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putStringRef(String val);
</FONT></PRE>
<P><P>Replaces a value referenced by a VT_BYREF|VT_BSTR Variant object. 
<P><B>Note</B>  This method can also be used to initialize a Variant, but the preferred method is use the following expression. 
<PRE><FONT FACE="Courier" SIZE="2">
new Variant(Variant.VariantByref|Variant.VariantString,val)
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>val</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The new value. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024200">putVariantArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putVariantArray(Variant v[]);
</FONT></PRE>
<P><P>Sets a Variant object to a typeVT_ARRAY|VT_VARIANT <B>Variant</B> object, which holds a zero-based, one-dimensional <A HREF="SafeArray.htm">SafeArray</A>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>v</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides initial values for the <B>SAFEARRAY</B> elements. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024300">putVariantArrayRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native void putVariantArrayRef(Variant v[]);
</FONT></PRE>
<P><P>Replaces a <B>SAFEARRAY</B> data structure, which is referenced by a VT_BYREF|VT_ARRAY|VT_VARIANT Variant. 
<P><B>Note</B>  This method can also be used to initialize a Variant object, but the preferred method is to pass a <A HREF="SafeArray.htm">SafeArray</A> object to the <B>Variant</B> constructor. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>v</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides initial values for the <B>SAFEARRAY</B> elements. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024400">toBoolean</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native boolean toBoolean () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_BOOL and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java boolean. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024500">toByte</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native byte toByte () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_UI1 and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java byte. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024600">toByteArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object toByteArray();
</FONT></PRE>
<P><P>Retrieves the value of a VT_ARRAY|VT_UI1 or VT_BYREF|VT_ARRAY|VT_UI1 as a one-dimensional byte[] array. This method has been superceded by the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method. 

<P><B>Return Value:</B> <P>Returns a byte array. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024700">toCharArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object toCharArray();
</FONT></PRE>
<P><P>Retrieves the value of a VT_ARRAY|VT_I2 or VT_BYREF|VT_ARRAY|VT_I2 as a one-dimensional char[] array. This method has been superceded by the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method. 

<P><B>Return Value:</B> <P>Returns a character array. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024800">toCurrency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native long toCurrency () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_CY and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java long. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024900">toDate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native double toDate () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_DATE and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024a00">toDispatch</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object toDispatch () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_DISPATCH and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024b00">toDouble</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native double toDouble () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_R8 and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java double. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024c00">toError</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int toError () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_ERROR and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024d00">toFloat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native float toFloat () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_R4 and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java float. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024e00">toInt</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native int toInt () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_I4 and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java integer. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e024f00">toObject</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object toObject () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_UNKNOWN and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025000">toSafeArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public SafeArray toSafeArray() throws ClassCastException;
</FONT></PRE>
<P><P>Extracts a <A HREF="SafeArray.htm">SafeArray</A> object from a Variant object that has the VT_ARRAY modifier set. This operation does not create an independent <B>SafeArray</B> object, so it can be used to modify the elements of the <B>SafeArray</B> object that is referenced by the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java <A HREF="SafeArray.htm">SafeArray</A> object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025100">toScriptObject</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Object toScriptObject () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant script object to a VT_UNKNOWN and returns the coerced result, or converts numbers and strings to Java objects. This method maps VT_BSTR, VT_BOOL, and VT_number to the primitive Java string, boolean, and double types. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java script object. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant script object's type cannot be coerced.


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025200">toShort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native short toShort () throws ClassCastException;
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_I2 and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java short. 

<P><B>Exceptions:</B> <P><B>ClassCastException</B>
 if the Variant object's type cannot be coerced. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025300">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString ();
</FONT></PRE>
<P><P>Coerces the Variant object to a VT_BSTR and returns the coerced result. The results of the coercion are not stored in the <B>Variant</B>. 
<P><B>Return Value:</B> <P>Returns the coerced value that is converted to a Java string. 

<P><B>Remarks:</B> <P>Unlike the other <B>toXXX</B> methods, no exception is thrown if the variant cannot be coerced to a string. Instead, the <B>toString</B> method of the <B>Object</B> class is called. This is because <B>toString</B> is also the method used for diagnostic printing of all Java objects. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025400">toVariantArray</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native Variant[] toVariantArray();
</FONT></PRE>
<P><P>Retrieves the value of either a VT_ARRAY|VT_VARIANT or VT_BYREF|VT_ARRAY|VT_VARIANT Variant. The embedded array must be one-dimensional. This is an "expensive" method, which has been superceded by the <A HREF="Variant.htm#com_000300050e025000">toSafeArray</A> method. 

<P><B>Return Value:</B> <P>Returns the coerced value converted to a Java array of Variants. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300050e025500">VariantClear</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void VariantClear();
</FONT></PRE>
<P><P>Forces the Microsoft&#174; Win32&#174; <B>VariantClear</B> function to be called and resets the Variant object to VT_EMPTY. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_000300050e030000">Fields</A></H3><DL>
<DT><B><A NAME="com_000300050e030001">VariantArray</A></B>
</DT><DD>Corresponds to the VT_ARRAY modifier. 

</DD><DT><B><A NAME="com_000300050e030002">VariantBoolean</A></B>
</DT><DD>Corresponds to the VT_BOOL variant type. 

</DD><DT><B><A NAME="com_000300050e030003">VariantByref</A></B>
</DT><DD>Corresponds to the VT_BYREF modifier. 

</DD><DT><B><A NAME="com_000300050e030004">VariantByte</A></B>
</DT><DD>Corresponds to the VT_UI1 variant type. 

</DD><DT><B><A NAME="com_000300050e030005">VariantCurrency</A></B>
</DT><DD>Corresponds to the VT_CY variant type. 

</DD><DT><B><A NAME="com_000300050e030006">VariantDate</A></B>
</DT><DD>Corresponds to the VT_DATE variant type. 

</DD><DT><B><A NAME="com_000300050e030007">VariantDispatch</A></B>
</DT><DD>Corresponds to the VT_DISPATCH variant type. 

</DD><DT><B><A NAME="com_000300050e030008">VariantDouble</A></B>
</DT><DD>Corresponds to the VT_R8 variant type. 

</DD><DT><B><A NAME="com_000300050e030009">VariantEmpty</A></B>
</DT><DD>Corresponds to the VT_EMPTY variant type. 

</DD><DT><B><A NAME="com_000300050e03000a">VariantError</A></B>
</DT><DD>Corresponds to the VT_ERROR variant type. 

</DD><DT><B><A NAME="com_000300050e03000b">VariantFloat</A></B>
</DT><DD>Corresponds to the VT_R4 variant type. 

</DD><DT><B><A NAME="com_000300050e03000c">VariantInt</A></B>
</DT><DD>Corresponds to the VT_I4 variant type. 

</DD><DT><B><A NAME="com_000300050e03000d">VariantNull</A></B>
</DT><DD>Corresponds to the VT_NULL variant type. 

</DD><DT><B><A NAME="com_000300050e03000e">VariantObject</A></B>
</DT><DD>Corresponds to the VT_UNKNOWN variant type. 

</DD><DT><B><A NAME="com_000300050e03000f">VariantShort</A></B>
</DT><DD>Corresponds to the VT_I2 variant type. 

</DD><DT><B><A NAME="com_000300050e030010">VariantString</A></B>
</DT><DD>Corresponds to the VT_BSTR variant type. 

</DD><DT><B><A NAME="com_000300050e030011">VariantTypeMask</A></B>
</DT><DD>Masks off variant type modifiers. 

</DD><DT><B><A NAME="com_000300050e030012">VariantVariant</A></B>
</DT><DD>Corresponds to the VT_VARIANT variant type. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

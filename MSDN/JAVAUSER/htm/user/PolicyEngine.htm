<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class PolicyEngine</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="PolicyEngine.htm#com_0003000d09010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="PermissionUtils.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_psec.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="SecurityClassLoader.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.security</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class PolicyEngine</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class PolicyEngine
{
  // Methods
  public static native void <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A>(PermissionID pid);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010200">checkCallerForAllPermissions</A>(Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010300">checkCallersPermission</A>(PermissionID pid,
        Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010400">checkCallersPermission</A>(String pname,
        Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010500">checkCallersPermission</A>(PermissionID pid,Object
        sreq,Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010600">checkCallersPermission</A>(String pname,
        Object sreq,Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010700">checkCallersPermission</A>(ISecurityRequest sreq,
        Class[] skipset);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010800">checkClass</A>(Class cls,PermissionID pid);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010900">checkClass</A>(Class cls,String pname);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010a00">checkClass</A>(Class cls,PermissionID pid,
        Object sreq);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010b00">checkClass</A>(Class cls,ISecurityRequest sreq);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010c00">checkClassForAllPermissions</A>(Class cls);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010d00">checkForAllPermissions</A>();
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010e00">checkPermission</A>(PermissionID pid);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09010f00">checkPermission</A>(String pname);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09011000">checkPermission</A>(PermissionID pid,Object sreq);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09011100">checkPermission</A>(String pname,Object sreq);
  public static void <A HREF="PolicyEngine.htm#com_0003000d09011200">checkPermission</A>(ISecurityRequest sreq);
  public static native void <A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A>(PermissionID pid);
  public static Class <A HREF="PolicyEngine.htm#com_0003000d09011400">getClassOfCaller</A> ();
  public static Class <A HREF="PolicyEngine.htm#com_0003000d09011500">getClassOfCaller</A> (Class[] skip);
  public static native PermissionDataSet <A HREF="PolicyEngine.htm#com_0003000d09011600">getPermissionsOfClass</A> (
        Class c);
  public static native Principal <A HREF="PolicyEngine.htm#com_0003000d09011700">getPrincipalOfClass</A> (Class c);
  public static synchronized PermissionID <A HREF="PolicyEngine.htm#com_0003000d09011800">permissionNameToID</A>(String
        pname);
  public static native void <A HREF="PolicyEngine.htm#com_0003000d09011900">revertPermission</A>(PermissionID pid);
}
</FONT></PRE>
<P>This class exposes methods that perform permission-based security checks. These security checks are based on a security model that allows you to associate sets of permissions with the classes in the system. Then, at any point in time, the execution context can be examined to determine which operations are allowed by the permissions active within that context. The class types found on the call stack provide the required information about the active permissions. For more information about permissions, see the <A HREF="def_psec.htm">com.ms.security</A> package overview. 
<P>The <B>PolicyEngine</B> class provides several different ways to examine the execution context to determine whether a given operation is allowed. The two main types of security checks are deep checks and shallow checks. Deep checks examine the entire call stack to ensure that all the classes within that execution context possess a certain permission. The <A HREF="PolicyEngine.htm#com_0003000d09010e00">PolicyEngine.checkPermission</A> methods perform deep checks. In contrast, shallow checks do not use the depth of the stack to determine when to terminate the stack crawl. They are provided as a means of implementing roughly the same type of behavior as the original JDK <B>SecurityManager</B> methods <B>classDepth</B> and <B>classLoaderDepth</B>. The <A HREF="PolicyEngine.htm#com_0003000d09010300">PolicyEngine.checkCallersPermission</A> methods perform shallow checks. In general, deep checks are preferred over shallow checks. 
<P>Deep security checks are implemented in the following way: The stack is examined, starting with the immediate caller to the <B>PolicyEngine</B> class and working backward. 
<P>During a deep security check, the following steps are taken: 
<P>
<OL><LI>Get the set of permissions associated with the class type of the stack frame, and then find the <A HREF="IPermission.htm">IPermission</A> instance for the specific type of permission that is being checked for within that set. 
<LI>If the permission set does not contain an instance of the type of permission that is being searched for, terminate the stack crawl. The check fails. 
<LI>If this is a parameterized check, call the check method (<A HREF="IPermission.htm#com_0003000d0f010100">IPermission.check</A>) on the permission instance that has been found, passing it the security request object. If the check method throws an exception, terminate the stack crawl. The check fails. 
<LI>If the permission type has been explicitly denied by the current stack frame (using the <A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A> method), terminate the stack crawl. The security check fails. 
<LI>If the permission type has been explicitly asserted by the current stack frame (using the <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A> method), terminate the stack crawl. The security check succeeds. 
<LI>The current frame has passed. Continue the stack crawl with the next frame. 
</OL>
<P>Shallow security checks only check the immediate caller outside a boundary that is defined by a specified skip set. A skip set is a set of classes that is ignored during the security check. The first (and only the first) class found outside of the skip set will be checked for the permissions in question. 
<P>Shallow security checks are implemented in the following way. The stack is examined, starting with the immediate caller to the <B>PolicyEngine</B> class, and working backward. During a shallow security check, the following steps are taken: 
<P>
<OL><LI>Get the class type associated with the current stack frame. If the class type is not within the specified skip set, the frame that should be checked has been found. Proceed to step 4. 
<LI>The class type of the current frame is in the skip set; however, the stack frame must still be checked for any explicit assertions or denials. If the permission type has been explicitly denied by the current stack frame (using the <A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A> method), terminate the stack crawl. The security check fails. If the permission type has been explicitly asserted by the current stack frame (using the <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A> method), terminate the stack crawl. The security check succeeds. 
<LI>Since this frame was in the skip set, and no assertions or denials stopped the crawl, search for the next frame and continue the crawl. Proceed to step 1. 
<LI>The frame to be examined has been found. Get the set of permissions associated with the class type of the stack frame, and then find the <A HREF="IPermission.htm">IPermission</A> instance for the specific type of permission that is being checked for within that set. 
<LI>If the permission set does not contain an instance of the type of permission that is being searched for, terminate the stack crawl. The security check fails. 
<LI>If this is a parameterized check, call the check method (<A HREF="IPermission.htm#com_0003000d0f010100">IPermission.check</A>) on the permission instance that was found, passing it the security request object. If the check method throws an exception, terminate the stack crawl. The security check fails. 
<LI>The current frame has passed, so terminate the stack crawl. The security check succeeds. 
</OL>
<P>Deep and shallow security checks are provided in both parameterized and unparameterized forms. 
<P>Unparameterized checks simply ensure that all the classes in question possess a certain type of permission. This type of check is used for simple permissions, like the printing permission. Either a class has the printing permission or it doesn't. 
<P>Parameterized checks are used for more complex permissions, where the parameter to the check method is an object that is specific to the permission type. For instance, when checking for the file I/O permission, you must specify exactly which file I/O operation is being attempted and which file is involved. To check file I/O permission, you would create an instance of the <A HREF="FileIORequest.htm#com_0003000e06000000">com.ms.security.permissions.FileIORequest</A> class that indicates which file is involved and which I/O operation is requested. You would then call the <A HREF="PolicyEngine.htm#com_0003000d09011200">PolicyEngine.checkPermission(ISecurityRequest)</A> method, passing in the <A HREF="FileIORequest.htm#com_0003000e06000000">FileIORequest</A> object. If the check succeeds (no <B>SecurityException</B> is thrown), the specified operation is allowed. 

<H3 STYLE="color:#333366"><A NAME="com_0003000d09010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000d09010100">assertPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native void assertPermission(PermissionID pid);
</FONT></PRE>
<P><P>Asserts the right to a certain type of permission. This method causes the security system to ignore your callers when you cause a security check of the asserted type to occur. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to assert. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Normally, when checking a given permission, the security system examines every frame on the call stack to ensure that all the callers possess the ability to perform the operation in question. However, if the security system sees a stack frame where the requested permission has been asserted (with this method), the stack crawl stops early and the security check succeeds. 
<P>The asserted permission state disappears when the stack frame of the caller to <B>assertPermission</B> exits (by executing a return statement or throwing an exception). The <A HREF="PolicyEngine.htm#com_0003000d09011900">revertPermission</A> method can be used to un-assert a permission type. 
<P>The following example shows how to assert the right to perform file I/O operations. 
<PRE><FONT FACE="Courier" SIZE="2">
   ...
   // Assert the right to perform file I/O   
   PolicyEngine.assertPermission(PermissionID.FILEIO);

   // Now, do some file operation. Since you have asserted
   // your rights to file I/O, this check will succeed even if your callers do
   // not possess the ability to perform file I/O.
   FileInputStream fis = new FileInputStream("c:\\MySample.txt");      
   ...
</FONT></PRE>
<P><B>Note</B>  To assert all permissions, pass <A HREF="PermissionID.htm#com_0003000d0502000c">PermissionID.SYSTEM</A> to the <B>assertPermission</B> method. This assertion forces the security system to ignore your callers during all security checks. Only fully trusted code can assert the SYSTEM permission. 
<P><B>See Also:</B> <A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A>, <A HREF="PolicyEngine.htm#com_0003000d09011900">revertPermission</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010200">checkCallerForAllPermissions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallerForAllPermissions(Class[] skipset);
</FONT></PRE>
<P><P>Performs a security check to determine whether the first calling class outside the skip set is fully trusted. 
<P><B>Note</B>  Permission assertions and denials of the permission type <A HREF="PermissionID.htm#com_0003000d0502000c">PermissionID.SYSTEM</A> are recognized within the skip set frames. They will affect the stack crawl and could cause it to terminate early. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010300">checkCallersPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallersPermission(PermissionID pid,Class[] skipset);
</FONT></PRE>
<P><P>Performs a simple (non-parameterized) security check for a specific type of permission. This check is shallow. Only the first stack frame found outside the specified skip set will be checked. 
<P><B>Note</B>  Permission assertions and denials are recognized within the skip set frames, and could cause the stack crawl to terminate early. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010400">checkCallersPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallersPermission(String pname,Class[] skipset);
</FONT></PRE>
<P><P>Performs a simple (non-parameterized) security check for a specific type of permission. This check is shallow. Only the first stack frame found outside the specified skip set will be checked. A permission name is used to specify the permission type (instead of a <A HREF="PermissionID.htm">PermissionID</A>). 
<P><B>Note</B>  Permission assertions and denials are recognized within the skip set frames, and could cause the stack crawl to terminate early. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010500">checkCallersPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallersPermission(PermissionID pid,Object sreq,
        Class[] skipset);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. The check is shallow. Only the first stack frame found outside the specified skip set will be checked. 
<P><B>Note</B>  Permission assertions and denials are recognized within the skip set frames, and may cause the stack crawl to terminate early. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request object that indicates the specific resource to check for within the realm of the permission type. The type of the object depends on the type of the permission being checked. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010600">checkCallersPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallersPermission(String pname,Object sreq,
        Class[] skipset);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. The check is shallow. Only the first stack frame found outside the specified skip set will be checked. A permission name is used to specify the permission type (instead of a <A HREF="PermissionID.htm">PermissionID</A>). 
<P><B>Note</B>  Permission assertions and denials are recognized within the skip set frames, and may cause the stack crawl to terminate early. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010700">checkCallersPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkCallersPermission(ISecurityRequest sreq,
        Class[] skipset);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. The check is shallow. Only the first stack frame found outside the specified skip set will be checked. 
<P>This method is a variation on the <A HREF="PolicyEngine.htm#com_0003000d09010500">checkCallersPermission(PermissionID,Object,Class[])</A> method, where the <I>sreq</I> parameter indicates the permission type, and it also represents the security request object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that indicates the type of permission to check for and represents the security request object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skipset</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore on the call stack. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010800">checkClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkClass(Class cls,PermissionID pid);
</FONT></PRE>
<P><P>Performs a security check directly against a specified class. If the class does not possess the specified type of permission, a <B>SecurityException</B> is thrown. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to check against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010900">checkClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkClass(Class cls,String pname);
</FONT></PRE>
<P><P>Performs a security check directly against a specified class. If the class does not possess the specified type of permission, a <B>SecurityException</B> is thrown. The permission type is specified as a permission name (instead of a <A HREF="PermissionID.htm">PermissionID</A> object). 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to check against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission to check for. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010a00">checkClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkClass(Class cls,PermissionID pid,Object sreq);
</FONT></PRE>
<P><P>Performs a security check directly against a specified class. The class must possess the specified type of permission, and the parameterized check against the class's associated permission object must pass, or a <B>SecurityException</B> is thrown. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to check against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request object. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010b00">checkClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkClass(Class cls,ISecurityRequest sreq);
</FONT></PRE>
<P><P>Performs a security check directly against a specified class. The class must possess the specified type of permission, and the parameterized check against the class's associated permission object must pass, or a <B>SecurityException</B> is thrown. 
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to check against. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that determines the type of permission to check for and also represents the security request object. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method is a variation on the <A HREF="PolicyEngine.htm#com_0003000d09010a00">checkClass(Class,PermissionID,Object)</A> method, where the <A HREF="ISecurityRequest.htm">ISecurityRequest</A> object is used to determine the permission type, and it is also used as the permission request object. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010c00">checkClassForAllPermissions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkClassForAllPermissions(Class cls);
</FONT></PRE>
<P><P>Performs a security check directly against a class object. If the class is not fully trusted, the security check fails. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to check against. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010d00">checkForAllPermissions</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkForAllPermissions();
</FONT></PRE>
<P><P>Performs a security check to determine whether all the calling class types on the call stack are fully trusted. If any of the calling classes are not fully trusted, the security check fails (a <B>SecurityException</B> is thrown). 
<P><B>Note</B>  Permission assertions and denials on the permission type <A HREF="PermissionID.htm#com_0003000d0502000c">PermissionID.SYSTEM</A> affect the stack crawl, causing it to terminate early without examining the entire stack. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010e00">checkPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPermission(PermissionID pid);
</FONT></PRE>
<P><P>Performs a simple (non-parameterized) security check for a specified type of permission. For the security check to pass, all the callers on the call stack must possess the specified type of permission. 
<P><B>Note</B>  Permission assertions and denials might affect the stack crawl, which could cause it to terminate early without examining the entire stack. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09010f00">checkPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPermission(String pname);
</FONT></PRE>
<P><P>Performs a simple (non-parameterized) security check for a specified type of permission. A permission name is used to specify the permission type. For the security check to pass, all the callers on the call stack must possess the specified type of permission. 
<P><B>Note</B>  Permission assertions and denials might affect the stack crawl, causing it to terminate early without examining the entire stack. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission to check for. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011000">checkPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPermission(PermissionID pid,Object sreq);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request object that indicates the specific resource to check for within the realm of the permission type. The type of this object depends on the type of the permission being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For the security check to pass, all the callers on the call stack must possess the specified type of permission. In addition, all the permission objects associated with the calling class types found on the stack must validate that the operation indicated by the security request object is allowed. Validation is accomplished by calling the <A HREF="IPermission.htm#com_0003000d0f010100">IPermission.check</A> method of all the found permission instances. 
<P><B>Note</B>  Permission assertions and denials might affect the stack crawl, causing it to terminate early without examining the entire stack. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011100">checkPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPermission(String pname,Object sreq);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. A permission name is used to specify the permission type (instead of a <A HREF="PermissionID.htm">PermissionID</A>). 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission to check for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The security request object that indicates the specific resource to check for within the realm of the permission type. The type of this object depends on the type of the permission being checked. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For the security check to pass, all the callers on the call stack must possess the specified type of permission. In addition, all the permission objects associated with the calling class types found on the stack must validate that the operation indicated by the security request object is allowed. Validation is accomplished by calling the <A HREF="IPermission.htm#com_0003000d0f010100">IPermission.check</A> method of all the found permission instances. 
<P><B>Note</B>  Permission assertions and denials might affect the stack crawl, causing it to terminate early without examining the entire stack. 
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011200">checkPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static void checkPermission(ISecurityRequest sreq);
</FONT></PRE>
<P><P>Performs a parameterized security check for a specific type of permission. This method is a variation on the <A HREF="PolicyEngine.htm#com_0003000d09011000">checkPermission(PermissionID,Object)</A> method where the <I>sreq</I> parameter is used to determine the permission type and is also used as the security request object. 
<P>Calling the <B>checkPermission(ISecurityRequest)</B> method is equivalent to the following call. 
<PRE><FONT FACE="Courier" SIZE="2">
   checkPermission(sreq.getPermissionID(),sreq);
</FONT></PRE>
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sreq</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The object that determines the permission type and indicates the resource to check for. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the security check fails. 


<P><B>See Also:</B> <A HREF="PolicyEngine.htm#com_0003000d09011000">PolicyEngine.checkPermission(PermissionID,Object)</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011300">denyPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native void denyPermission(PermissionID pid);
</FONT></PRE>
<P><P>Denies the right to a certain type of permission. Any stack-based security checks (for the specific type of permission that has been denied) that encounter the stack frame of the caller to <B>denyPermission</B> will fail. This forces the methods that you call to assert their permissions (using the <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A> method) to pass security checks. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to deny. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Normally, when checking a given permission, the security system examines every frame on the call stack to ensure all the callers possess the ability to perform the operation in question. If the security system sees a stack frame where that permission has been denied (with this method), the stack crawl stops early and the security check fails. 
<P>The denied permission state will disappear when the stack frame of the caller to <B>denyPermission</B> exits (by executing a return statement or throwing an exception). The <A HREF="PolicyEngine.htm#com_0003000d09011900">revertPermission</A> method can be used to un-deny a permission type. 
<P>The following example shows you how to deny the right to perform file I/O operations. 
<PRE><FONT FACE="Courier" SIZE="2">
   ... 
   // Deny your right to perform file I/O.

   PolicyEngine.denyPermission(PermissionID.FILEIO);

   // Now, call into some other code in the MySample
   // class. If that code wants to perform some file I/O operations,
   // it must assert its rights to do so, or the file I/O 
   // security checks will fail because you have denied your rights to
   // them.

   MySample.doSomething();

   ...
</FONT></PRE>
<P><B>Note</B>  To deny all permissions, pass <A HREF="PermissionID.htm#com_0003000d0502000c">PermissionID.SYSTEM</A> to the <B>denyPermission</B> method. This forces any code you call to assert its rights to any permissions it needs to utilize. Only fully trusted code can deny the SYSTEM permission. 
<P><B>See Also:</B> <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A>, <A HREF="PolicyEngine.htm#com_0003000d09011900">revertPermission</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011400">getClassOfCaller</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static Class getClassOfCaller ();
</FONT></PRE>
<P><P>Retrieves the class type of the immediate caller of this method. 

<P><B>Return Value:</B> <P>Returns the class type of the immediate caller of this method. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011500">getClassOfCaller</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static Class getClassOfCaller (Class[] skip);
</FONT></PRE>
<P><P>Retrieves the class type of the caller of this method, skipping any classes found in the specified skip set. 

<P><B>Return Value:</B> <P>Returns the class type of the caller. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>skip</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of classes to ignore. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011600">getPermissionsOfClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native PermissionDataSet getPermissionsOfClass (Class c);
</FONT></PRE>
<P><P>Obtains the permissions of a class. Only fully trusted classes are allowed to call this method. 

<P><B>Return Value:</B> <P>Returns the permissions of the specified class. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class whose permissions are being obtained. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011700">getPrincipalOfClass</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native Principal getPrincipalOfClass (Class c);
</FONT></PRE>
<P><P>Obtains the principal associated with a specified class. Only fully trusted classes are allowed to call this method. 

<P><B>Return Value:</B> <P>Returns the principal associated with the specified class. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>c</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class to examine. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>SecurityException</B>
 if the calling class is not fully trusted. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011800">permissionNameToID</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static synchronized PermissionID permissionNameToID(String pname);
</FONT></PRE>
<P><P>Creates a <A HREF="PermissionID.htm">PermissionID</A> object from a permission name. 
<P><B>Return Value:</B> <P>Returns the <A HREF="PermissionID.htm">PermissionID</A> that maps to the specified permission name. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pname</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Permission names must be the name of the class that implements the permission. The permission class must be a fully trusted system class. Only fully trusted code can create new permission identifiers. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000d09011900">revertPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native void revertPermission(PermissionID pid);
</FONT></PRE>
<P><P>Negates the effects of any assertions (<A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A>) or denials (<A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A>) that have been performed for the specified permission type by the current stack frame. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The type of permission to revert. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The following example asserts a right, and then reverts it. 
<PRE><FONT FACE="Courier" SIZE="2">
   ...

   // Assert your rights to perform file I/O operations

   PolicyEngine.assertPermission(PermissionID.FILEIO);

   // Do some file I/O. Your callers will be ignored during
   // the file I/O security check that this operation causes 
   // because you have asserted your rights.

   FileInputStream fis = new FileInputStream("c:\\MySample.txt");

   // Remove the file I/O assertion.

   PolicyEngine.revertPermission(PermissionID.FILEIO);

   // Do some more file I/O. This time your callers will be
   // included in the security check since
   // your file I/O rights are no longer asserted.

   FileInputStream fis = new FileInputStream("c:\\MySample.txt"); 
   ...
</FONT></PRE>
<P><B>See Also:</B> <A HREF="PolicyEngine.htm#com_0003000d09010100">assertPermission</A>, <A HREF="PolicyEngine.htm#com_0003000d09011300">denyPermission</A>
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM Programming in Java and C++ Compared</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Low-Level Java/COM Integration"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="COM_Programming_in_Java.htm#javacom_0008000306010000">Object Allocation</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="COM_Programming_in_Java.htm#javacom_0008000306020000">Object Release</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="COM_Programming_in_Java.htm#javacom_0008000306030000">Changing Interfaces</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jnative2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Java & Native Code"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Handling_COM_Errors_in_Java.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="javacom.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Java/Com"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="apartthread.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Low-Level Java/COM Integration</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Java/Com</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">COM Programming in Java and C++ Compared</H2>
<P>Users who are familiar with COM programming in C++ might find it helpful to learn how C++ COM programming compares to Java COM programming. Since Java's notion of multiple interfaces on an object and its garbage collection facility map readily to COM's paradigm for managing objects, many aspects of COM programming are simpler in Java than in C++. 

<H3 STYLE="color:#333366"><A NAME="javacom_0008000306010000">Object Allocation</A></H3><P>In C++, you allocate a new COM object using the following syntax:

<PRE><FONT FACE="Courier" SIZE="2">IDrawable pDrawable;
CoCreateInstance(CLSID_MyCircle, NULL, CLSCTX_SERVER,
                 IID_IDrawable, (void**)&amp;pDrawable );
</FONT></PRE>
<P>In Java, the equivalent code would look like this:

<PRE><FONT FACE="Courier" SIZE="2">IDrawable drawable = (IDrawable)new MyCircle();
</FONT></PRE>
<P>The preceding Java statement is identical to Java's syntax for allocating ordinary Java objects. Behind the scenes, the COM API function <B>CoCreateInstance</B> is called instead of allocating space in the runtime heap. However, this call is invisible to the Java programmer. 

<H3 STYLE="color:#333366"><A NAME="javacom_0008000306020000">Object Release</A></H3><P>In C++, you release a COM object using the following syntax.
<PRE><FONT FACE="Courier" SIZE="2">pDrawable-&gt;Release();
</FONT></PRE>
<P>In Java, the equivalent code would look like this.
<PRE><FONT FACE="Courier" SIZE="2">import com.ms.com.*;
ComLib.release(drawable);
</FONT></PRE>
<P>Calling the <A HREF="ComLib.htm#com_0003000506010900">release</A> method causes the <I>drawable</I> object to release all of its references to the COM object that it wraps. Because <I>drawable</I> may have cached one or more of the object's interfaces, this call may result in more than one release.

<P><B>Note </B>If you do not call ComLib.<A HREF="ComLib.htm#com_0003000506010900">release</A>, normal garbage-collection will attempt to perform the release for you. However, this mechanism is not guaranteed due to the threading limitations of many COM objects. That is, many COM objects can only be called on the thread on which they were created. Because garbage collection occurs at unpredictable times, the required thread may have expired or may be no longer responding to messages by the time garbage-collection reclaims the object. In addition, this unpredictability can obscure true memory leaks and/or tie up important system resources. For these reasons, it is recommended that you use explicit releases in order to free COM objects in a timely and predictable fashion.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000306030000">Changing Interfaces</A></H3><P>COM objects must implement the <B>IUnknown::QueryInterface</B> function to allow clients to access the object's supported interfaces. In Java, the details are handled by the VM, so that in your source code, you need only do a typecast.

<P>For example, in C++ you might write code like this to access the <B>IPrintable</B> interface of the object that pDrawable points to:

<PRE><FONT FACE="Courier" SIZE="2">
// pDrawable points to an object that supports 
// both IDrawable and IPrintable
IPrintable *pPrintable;
pDrawable-&gt;QueryInterface( IID_IPrintable, 
                           (void **)&amp;pPrintable );
</FONT></PRE>
<P>In Java, the equivalent code would look like this:

<PRE><FONT FACE="Courier" SIZE="2">
// drawable refers to an object that supports
// both IDrawable and IPrintable
IPrintable printable;
printable = (IPrintable)drawable;
</FONT></PRE>
<P>Notice that you use the same syntax that you would normally use to cast between Java object types. If the object does not implement the requested interface, a <B>ClassCastException</B> is thrown when you attempt the cast. If you want, you can use the <FONT FACE="Courier New">instanceof</FONT> operator to determine before the cast is attempted whether the object implements the requested interface.


<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class DirectSoundBuffer</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="DirectSoundBuffer.htm#com_000300064b010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="DirectSound3dListener.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="def_dirx.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="DirectSoundResource.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.directX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class DirectSoundBuffer</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class DirectSoundBuffer implements <A HREF="IDirectSoundBuffer.htm">IDirectSoundBuffer</A>
{
  // Methods
  public DirectSound3dBuffer <A HREF="DirectSoundBuffer.htm#com_000300064b010100">get3dBuffer</A>();
  public DirectSound3dListener <A HREF="DirectSoundBuffer.htm#com_000300064b010200">get3dListener</A>();
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010300">getCaps</A>(DSBCaps caps);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010400">getCurrentPosition</A>(DSCursors cursors);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010500">getFormat</A>(byte[] format, int size);
  public WaveFormatEx <A HREF="DirectSoundBuffer.htm#com_000300064b010600">getFormat</A>();
  public int <A HREF="DirectSoundBuffer.htm#com_000300064b010700">getFormatSize</A>();
  public int <A HREF="DirectSoundBuffer.htm#com_000300064b010800">getFrequency</A>();
  public int <A HREF="DirectSoundBuffer.htm#com_000300064b010900">getPan</A>();
  public int <A HREF="DirectSoundBuffer.htm#com_000300064b010a00">getStatus</A>();
  public int <A HREF="DirectSoundBuffer.htm#com_000300064b010b00">getVolume</A>();
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>(int flags);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010d00">restore</A>();
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010e00">setCurrentPosition</A>(int newPosition);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b010f00">setFormat</A>(byte[] format);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011000">setFormat</A>(WaveFormatEx format);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011100">setFrequency</A>(int frequency);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011200">setPan</A>(int pan);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011300">setVolume</A>(int volume);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011400">stop</A>();
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011500">transferToSoundBuffer</A>(DSResourceDesc resourceDesc,
        int flags);
  public void <A HREF="DirectSoundBuffer.htm#com_000300064b011600">writeBuffer</A>(int start, int size, byte[] buffer,
        int flags);
}
</FONT></PRE>
<P>Applications use the methods of the <B>DirectSoundBuffer</B> class to create DirectSoundBuffer objects and set up the environment. 
<P><B>Note</B>  This class does not provide an <B>initialize</B> method. Use the <A HREF="DirectSound.htm#com_0003000648010200">DirectSound.createSoundBuffer</A> method to create and initialize <B>DirectSoundBuffer</B> objects. 
<H3 STYLE="color:#333366"><A NAME="com_000300064b010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_000300064b010100">get3dBuffer</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectSound3dBuffer get3dBuffer();
</FONT></PRE>
<P><P>Retrieves a <A HREF="DirectSound3dBuffer.htm">DirectSound3dBuffer</A> object for the DirectSound buffer. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010200">get3dListener</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public DirectSound3dListener get3dListener();
</FONT></PRE>
<P><P>Retrieves a <A HREF="DirectSound3dListener.htm">DirectSound3dListener</A> object for the DirectSound buffer. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010300">getCaps</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getCaps(DSBCaps caps);
</FONT></PRE>
<P><P>Retrieves the capabilities of the DirectSoundBuffer object. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>caps</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DSBCaps.htm">DSBCaps</A> object that receives the capabilities of this sound buffer. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The <A HREF="DSBCaps.htm">DSBCaps</A> object contains similar information to the <A HREF="DSBufferDesc.htm">DSBufferDesc</A> object passed to the <A HREF="DirectSound.htm">createSoundBuffer</A> method, with some additional information. This additional information can include the location of the buffer, either in hardware or software, and some cost measures. Examples of cost measures include the time it takes to download to a hardware buffer and the processing overhead required to mix and play the buffer when it is in the system memory. 
<P>The flags specified in the <A HREF="DSBCaps.htm">flags</A> field of the <A HREF="DSBCaps.htm">DSBCaps</A> object are the same flags used by the <A HREF="DSBufferDesc.htm">DSBufferDesc</A> object. The only difference is that in the <B>DSBCaps</B> object, either <A HREF="DirectXConstants.htm#com_000300065b010305">DSBCAPS_LOCHARDWARE</A> or <A HREF="DirectXConstants.htm#com_000300065b010306">DSBCAPS_LOCSOFTWARE</A> will be specified according to the location of the buffer memory. In the <B>DSBufferDesc</B> object, these flags are optional and, depending on which flag is specified, force the buffer to be located in either hardware or software. 
<P><B>See Also:</B> <A HREF="DirectSound.htm">com.ms.directX.DirectSound</A>, <A HREF="DSBCaps.htm">com.ms.directX.DSBCaps</A>, <A HREF="DSBufferDesc.htm">com.ms.directX.DSBufferDesc</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010400">getCurrentPosition</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getCurrentPosition(DSCursors cursors);
</FONT></PRE>
<P><P>Retrieves the current position of the play and write cursors in the sound buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cursors</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DSCursors.htm">DSCursors</A> object that receives the current play and write positions in the DirectSoundBuffer object. These positions are offsets within the sound buffer and are specified in bytes. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>The write cursor indicates the position at which it is safe to write new data into the buffer. The write cursor always leads the play cursor, typically by about 15 milliseconds worth of audio data. 
<P>It is always safe to change data that is behind the play position. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010e00">setCurrentPosition</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010500">getFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void getFormat(byte[] format, int size);
</FONT></PRE>
<P><P>Retrieves a description of the format of the sound data in the buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>format</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Array variable that receives a description of the sound data in the buffer. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Length of the array assigned to <I>v1</I>. DirectSound writes, at most, <I>insz</I> bytes to that array. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Before retrieving the format description, always use the <A HREF="DirectSoundBuffer.htm#com_000300064b010700">getFormatSize</A> method to query the DirectSoundBuffer object for the size of the format. Use this size to create an array of sufficient length to receive the format description. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010700">getFormatSize</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010f00">setFormat</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010600">getFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public WaveFormatEx getFormat();
</FONT></PRE>
<P><P>Retrieves a description of the format of the sound data in the buffer. 

<P><B>Return Value:</B> <P>Returns the <A HREF="WaveFormatEx.htm">WaveFormatEx</A> object if successful; null otherwise. 

<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010f00">setFormat</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010700">getFormatSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFormatSize();
</FONT></PRE>
<P><P>Retrieves the size of the format information. 

<P><B>Return Value:</B> <P>Returns the size. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010800">getFrequency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getFrequency();
</FONT></PRE>
<P><P>Retrieves the frequency, in samples per second, at which the buffer is being played. This value will be in the range of 100-100,000. 

<P><B>Return Value:</B> <P>Returns the frequency at which the audio buffer is being played. 

<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b011100">setFrequency</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010900">getPan</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getPan();
</FONT></PRE>
<P><P>Retrieves a variable that represents the relative volume between the left and right audio channels. 
<P><B>Return Value:</B> <P>Returns the relative mix between the left and right speakers. 

<P><B>Remarks:</B> <P>The returned value is measured in hundredths of a decibel (dB), in the range of -10,000 to 10,000. The value -10,000 means the right channel is attenuated by 100 dB. The value 10,000 means the left channel is attenuated by 100 dB. 0 is the neutral value; a return value of 0 means that both channels are at full volume (they are attenuated by 0 decibels). At any setting other than 0, one of the channels is at full volume and the other is attenuated. 
<P>A pan of -2173 means that the left channel is at full volume and the right channel is attenuated by 21.73 dB. Similarly, a pan of 870 means that the left channel is attenuated by 8.7 dB and the right channel is at full volume. A pan of -10,000 means that the right channel is silent and the sound is "all the way to the left," while a pan of 10,000 means that the left channel is silent and the sound is "all the way to the right." 
<P>The pan control acts cumulatively with the volume control. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010b00">getVolume</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b011200">setPan</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b011300">setVolume</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010a00">getStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getStatus();
</FONT></PRE>
<P><P>Retrieves the current status of the sound buffer. 

<P><B>Return Value:</B> <P>Returns one value of <A HREF="DirectXConstants.htm">DSBSTATUS_</A> type, specifying the status of the sound buffer. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010b00">getVolume</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getVolume();
</FONT></PRE>
<P><P>Retrieves the current volume for this sound buffer. 
<P><B>Return Value:</B> <P>Returns the volume associated with the specified DirectSound buffer. 

<P><B>Remarks:</B> <P>The volume is specified in hundredths of decibels (dB), and ranges from 0 to -10,000. The value 0 represents the original, unadjusted volume of the stream. The value -10,000 indicates an audio volume attenuated by 100 dB, which, for all practical purposes, is silence. Amplification is not currently supported by DirectSound. 
<P>The decibel (dB) scale corresponds to the logarithmic hearing characteristics of the ear. For example, an attenuation of 10 dB makes a buffer sound half as loud, and an attenuation of 20 dB makes a buffer sound one quarter as loud. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b011300">setVolume</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010c00">play</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void play(int flags);
</FONT></PRE>
<P><P>Causes the sound buffer to play from the current position. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One value of <A HREF="DirectXConstants.htm">DSBPLAY_</A> type, specifying how to play the buffer. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>For secondary sound buffers, this method will cause the buffer to be mixed into the primary buffer and output to the sound device. If this is the first buffer to play, it will implicitly create a primary buffer and start playing that buffer; the application does not need to explicitly direct the primary buffer to play. 
<P>If the buffer specified in the method is already playing, the call to the method will succeed and the buffer will continue to play. However, the flags that define playback characteristics are superseded by the flags defined in the most recent call. 
<P>Primary buffers must be played with the <A HREF="DirectXConstants.htm#com_000300065b01030b">DSBPLAY_LOOPING</A> flag set. 
<P>For primary sound buffers, this method will cause them to start playing to the sound device. If the application is set to the <A HREF="DirectXConstants.htm#com_000300065b01031d">DSSCL_WRITEPRIMARY</A> cooperative level, this will cause the audio data in the primary buffer to be output to the sound device. However, if the application is set to any other cooperative level, this method will ensure that the primary buffer is playing even when no secondary buffers are playing; in that case, silence will be played. This may reduce processing overhead when sounds are started and stopped in sequence since the primary buffer will be playing continuously rather than stopping and starting between secondary buffers. 
<P><B>Note</B>  Before this method can be called on any sound buffer, the application must call the <A HREF="DirectSound.htm">setCooperativeLevel</A> method and specify a cooperative level, typically <A HREF="DirectXConstants.htm#com_000300065b01031b">DSSCL_NORMAL</A>. If <B>setCooperativeLevel</B> has not been called, the <B>play</B> method carries out no action. 
<P><B>See Also:</B> <A HREF="DirectSound.htm">com.ms.directX.DirectSound</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010d00">restore</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void restore();
</FONT></PRE>
<P><P>Restores the memory allocation for a lost sound buffer for the specified DirectSoundBuffer object. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>If the application does not have the input focus, <B>restore</B> may not succeed. For example, if the application with the input focus has the <A HREF="DirectXConstants.htm#com_000300065b01031d">DSSCL_WRITEPRIMARY</A> cooperative level, no other application will be able to restore its buffers. Similarly, an application with the <B>DSSCL_WRITEPRIMARY</B> cooperative level must have the input focus to restore its primary sound buffer. 
<P>Once DirectSound restores the buffer memory, the application must rewrite the buffer with valid sound data. DirectSound cannot restore the contents of the memory, only the memory itself. 
<P>The application can receive notification that a buffer is lost when it specifies that buffer in a call to the <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A> method. The <A HREF="DirectSoundBuffer.htm#com_000300064b010a00">getStatus</A> method can also be used to retrieve the status of the sound buffer and test for the DSBSTATUS_BUFFERLOST flag. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010a00">getStatus</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010e00">setCurrentPosition</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setCurrentPosition(int newPosition);
</FONT></PRE>
<P><P>Moves the current play cursor for secondary sound buffers. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newPosition</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">New position, in bytes, from the beginning of the buffer that will be used when the sound buffer is played. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method cannot be called on primary sound buffers. 
<P>If the buffer is playing, it will immediately move to the new position and continue. If it is not playing, it will begin from the new position the next time the <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A> method is called. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010400">getCurrentPosition</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b010f00">setFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFormat(byte[] format);
</FONT></PRE>
<P><P>Sets the format of the primary sound buffer for the application. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>format</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Array variable that specifies the new format for the primary sound buffer. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If this method is called on a primary buffer which is being accessed in write-primary cooperative level, the buffer must be stopped before <B>setFormat</B> is called. If this method is being called on a primary buffer for a non-write-primary level, DirectSound will implicitly stop the primary buffer, change the format, and restart the primary; the application does not need to do this explicitly. 
<P>A call to this method fails if the hardware does not directly support the requested pulse coded modulation (PCM) format. It will also fail if the calling application has the <A HREF="DirectXConstants.htm#com_000300065b01031b">DSSCL_NORMAL</A> cooperative level. 
<P>If a secondary sound buffer requires a format change, the application should create a new DirectSoundBuffer object using the new format. 
<P>DirectSound supports PCM formats; it does not currently support compressed formats. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010500">getFormat</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011000">setFormat</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFormat(WaveFormatEx format);
</FONT></PRE>
<P><P>Sets the format of the primary sound buffer for the application. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>format</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="WaveFormatEx.htm">WaveFormatEx</A> object that specifies the wave format to set. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If this method is called on a primary buffer which is being accessed in write-primary cooperative level, the buffer must be stopped before <B>setFormat</B> is called. If this method is being called on a primary buffer for a non-write-primary level, DirectSound will implicitly stop the primary buffer, change the format, and restart the primary; the application does not need to do this explicitly. 
<P>A call to this method fails if the hardware does not directly support the requested pulse coded modulation (PCM) format. It will also fail if the calling application has the <A HREF="DirectXConstants.htm#com_000300065b01031b">DSSCL_NORMAL</A> cooperative level. 
<P>If a secondary sound buffer requires a format change, the application should create a new DirectSoundBuffer object using the new format. 
<P>DirectSound supports PCM formats; it does not currently support compressed formats. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010500">getFormat</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011100">setFrequency</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setFrequency(int frequency);
</FONT></PRE>
<P><P>Sets the frequency at which the audio samples are played. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>frequency</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">New frequency, in Hz, at which to play the audio samples. The value must be between 100 and 100,000. If the value is 0, the frequency is reset to the current buffer format. This format is specified in the <A HREF="DirectSound.htm">createSoundBuffer</A> method. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Increasing or decreasing the frequency changes the perceived pitch of the audio data. This method does not affect the format of the buffer. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010800">getFrequency</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010f00">setFormat</A>, <A HREF="DirectSound.htm">com.ms.directX.DirectSound</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011200">setPan</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setPan(int pan);
</FONT></PRE>
<P><P>Specifies the relative volume between the left and right channels. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pan</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Relative volume between the left and right channels. This value has a range of -10,000 to 10,000 and is measured in hundredths of a decibel. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>0 is the neutral value for <I>pan</I> and indicates that both channels are at full volume (attenuated by 0 decibels). At any other setting, one of the channels is at full volume and the other is attenuated. For example, a pan of -2173 means that the left channel is at full volume and the right channel is attenuated by 21.73 dB. Similarly, a pan of 870 means that the left channel is attenuated by 8.7 dB and the right channel is at full volume. 
<P>A pan of -10,000 means that the right channel is silent and the sound is "all the way to the left," while a pan of 10,000 means that the left channel is silent and the sound is "all the way to the right." 
<P>The pan control is cumulative with the volume control. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010900">getPan</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010b00">getVolume</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b011300">setVolume</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011300">setVolume</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setVolume(int volume);
</FONT></PRE>
<P><P>Changes the volume of a sound buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>volume</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">New volume requested for this sound buffer. Values range from 0 (0 dB, no volume adjustment) to -10,000 (-100 dB, essentially silent). DirectSound does not currently support amplification. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>Volume units of are in hundredths of decibels, where 0 is the original volume of the stream. 
<P>Positive decibels correspond to amplification and negative decibels correspond to attenuation. The decibel scale corresponds to the logarithmic hearing characteristics of the ear. An attenuation of 10 dB makes a buffer sound half as loud; an attenuation of 20 dB makes a buffer sound one quarter as loud. DirectSound does not currently support amplification. 
<P>The pan control is cumulative with the volume control. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010900">getPan</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b010b00">getVolume</A>, <A HREF="DirectSoundBuffer.htm#com_000300064b011200">setPan</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011400">stop</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void stop();
</FONT></PRE>
<P><P>Causes the sound buffer to stop playing. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>For secondary sound buffers, <B>stop</B> will set the current position of the buffer to the sample that follows the last sample played. This means that if the <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A> method is called on the buffer, it will continue playing where it left off. 
<P>For primary sound buffers, if an application has the <A HREF="DirectXConstants.htm#com_000300065b01031d">DSSCL_WRITEPRIMARY</A> level, this method will stop the buffer and reset the current position to 0 (the beginning of the buffer). This is necessary because the primary buffers on most sound cards can only play from the beginning of the buffer. 
<P>However, if <B>stop</B> is called on a primary buffer and the application has a cooperative level other than <A HREF="DirectXConstants.htm#com_000300065b01031d">DSSCL_WRITEPRIMARY</A>, this method simply reverses the effects of <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>. It configures the primary buffer to stop if no secondary buffers are playing. If other buffers are playing in this or other applications, the primary buffer will not actually stop until they are stopped. This method is useful because playing the primary buffer consumes processing overhead even if the buffer is playing sound data with the amplitude of 0 dB. 
<P><B>See Also:</B> <A HREF="DirectSoundBuffer.htm#com_000300064b010c00">play</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011500">transferToSoundBuffer</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void transferToSoundBuffer(DSResourceDesc resourceDesc, int flags);
</FONT></PRE>
<P><P>Transfers the wave data from the given resource to the start of the sound buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>resourceDesc</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A <A HREF="DSResourceDesc.htm">DSResourceDesc</A> object that specifies the wave resource to transfer. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A value of <A HREF="DirectXConstants.htm">DSBLOCK_</A> type specifying how the buffer should be locked before it receives the wave data. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method automatically locks and unlocks the buffer before and after writing the data. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_000300064b011600">writeBuffer</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void writeBuffer(int start, int size, byte[] buffer, int flags);
</FONT></PRE>
<P><P>Writes the contents of a buffer to the given position in the sound buffer. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>start</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Offset, in bytes, from the start of the buffer to the position to begin writing the data. This parameter is ignored if <A HREF="DirectXConstants.htm#com_000300065b01030a">DSBLOCK_FROMWRITECURSOR</A> is specified in the <I>flags</I> parameter. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>size</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Size, in bytes, of the portion of the buffer to write to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>buffer</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Array variable that contain the data to write. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>flags</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A value of <A HREF="DirectXConstants.htm">DSBLOCK_</A> type specifying how the buffer should be locked before it is written to. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>This method automatically locks and unlocks the buffer before and after writing the data. 
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

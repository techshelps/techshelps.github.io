<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About com.ms.activeX</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01010000">Overview of Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01020000">Hosting an ActiveX Control</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01030000">Invoking Methods of an ActiveX Control</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01040000">Retrieving Properties of an ActiveX Control</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01050000">Initializing an ActiveX Control Using Property Bags</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_ovr_0003000b01060000">Sinking Events from ActiveX Objects</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_0003000b01070000">Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_0003000b01080000">Interfaces</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="def_actx.htm#commsactiveX_0003000b01090000">Hierarchy</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_pack.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Packages"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="ActiveXComponent.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.activeX</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Packages</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">About com.ms.activeX</H2>
<P>You can use the classes and interfaces in the <A HREF="def_actx.htm">com.ms.activeX</A> package to host Microsoft&#174; ActiveX&#174; controls and ActiveX Automation objects, to use ActiveX streams, and to access helper functions.
 
<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01010000">Overview of Classes</A></H3><P>The <A HREF="ActiveXControl.htm">ActiveXControl</A> class provides methods that enable you to host an ActiveX control. You can create the control using the <B>ActiveXControl</B> constructor and then call other methods in the class to set its properties, retrieve its properties, and invoke its methods. The <A HREF="def_actx.htm#commsactiveX_ovr_0003000b01020000">Hosting an ActiveX Control</A> section of this document further describes how you can host an ActiveX control in your Java application.

<P>The <A HREF="ActiveXControlListener.htm">ActiveXControlListener</A> interface, when used with the ActiveXControl.<A HREF="ActiveXControl.htm#com_0003000b03020300">addActiveXControlListener</A> method, allows you to register a listener for an ActiveX control so that the listener will be notified when the ActiveX control has been created. Any listeners must implement the <B>ActiveXControlListener</B> interface, which contains a single method called <A HREF="ActiveXControlListener.htm#com_0003000b07010100">controlCreated</A>. When an ActiveX control is created, the Microsoft Win32 VM for Java calls the <B>controlCreated</B> method on the listener object. To view a code sample that adds a listener, see the <A HREF="javanative.htm">Mixing Java and Native Code</A> article.

<P>The <A HREF="ActiveXInputStream.htm">ActiveXInputStream</A> and <A HREF="ActiveXOutputStream.htm">ActiveXOutputStream</A> classes wrap <B>IStream</B> objects that are obtained from COM objects. Instances of these classes are compatible with other Java classes that take <B>java.io.InputStream</B> and <B>java.io.OutputStream</B> objects as parameters. These classes are also used by the Microsoft VM to wrap <B>IStream</B> objects that it obtains from ActiveX containers like Microsoft&#174; Visual Basic&#174;. Once the object is wrapped, the VM can use the <B>java.io</B> serialization classes that work only with <B>InputStream</B> and <B>OutputStream</B> objects.

<P>The <A HREF="ActiveXToolkit.htm">ActiveXToolkit</A> class contains methods that allow you to create a <A HREF="FontX.htm">FontX</A> object, given an <B>IUnknown</B> interface. You can also use the methods in this class to retrieve the <B>IUnknown</B> interface of a <B>Font</B> object and to create a Java color from an OLE_COLOR.

<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01020000">Hosting an ActiveX Control</A></H3><TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="def_actx.htm#commsactiveX_ovr_0003000b01020100">Generating a Java Wrapper for an ActiveX Control</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="def_actx.htm#commsactiveX_ovr_0003000b01020200">Using the ActiveXControl Class to Host an ActiveX Control</A>
</FONT></TD></TABLE>
<P>There are two ways two host an ActiveX control in a Java application. One way is to use the jactivex tool to generate a Java wrapper for the ActiveX control. The other is to use the ActiveXControl classes directly.
<H4 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01020100">Generating a Java Wrapper for an ActiveX Control</A></H4><P>You can run the jactivex tool on the ActiveX control to generate Java source code for the control. When you compile the .java files emitted by jactivex, you get .class files that you can import. You can then use the control just as you would any other Java object. For example, suppose you have obtained a control called MyControl that has a method called MyMethod. After you run the jactivex tool on this control and compile the resulting files, you could use the object in the following way.
<PRE><FONT FACE="Courier" SIZE="2">
   import MyControl.*;
   import java.awt.*;
   ...
   // create the control
   MyControl c = new MyControl();
 
   //add the control to the layout         
   add("Center", c);             
   ...

   // call MyMethod 
   c.MyMethod(...);&#009;                            
</FONT></PRE>
<P>For more information about using jactivex to host an ActiveX control, see the <A HREF="javanative.htm">Mixing Java and Native Code</A> article and the jactivex section of the <A href="quickref.htm#quickref_0004000201000d00">Tools Quick Reference</A>.
<H4 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01020200">Using the ActiveXControl Class to Host an ActiveX Control</A></H4><P>The other way to host an ActiveX control involves using the methods in the ActiveX control class. To create the control, you would pass the CLSID or ProgID to the <A HREF="ActiveXControl.htm">ActiveXControl</A> constructor. You can then invoke methods, retrieve properties, or set properties of the control. Again, suppose you have a control called MyControl that has a method called MyMethod. You can create the control and add it to the layout, as shown in the following example.
<PRE><FONT FACE="Courier" SIZE="2">
   import com.ms.activeX.ActiveXControl;
   import java.awt.*;
&#009;
   ...
   // create the control
   ActiveXControl c = new ActiveXControl("MyControl");

   // add the control to the layout     
   add("Center", c); 
&#009;
   // do something interesting 
   ...             
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01030000">Invoking Methods of an ActiveX Control</A></H3><P>Suppose MyControl has a method called MyMethod that you want to call. Let's assume that MyMethod takes three parameters: a <B>String</B>, an integer, and a boolean. The ActiveXControl.<A HREF="ActiveXComponent.htm#com_0003000b02020900">invoke</A> method allows you to call MyMethod. The <A HREF="ActiveXComponent.htm#com_0003000b02020900">invoke</A> method takes as a parameter an array of Variants that contains the arguments to the method you want to call. The arguments are passed to the control through <B>IDispatch</B>. This example shows how you could create and initialize an array of Variants called <I>args</I> and call MyMethod by passing <I>args</I> to the <B>invoke</B> method. 
<PRE><FONT FACE="Courier" SIZE="2">
   Variant args[] = new Variant[3};
   args[0] = new Variant("String arg");
   args[1] = new Variant(100);
   args[2] = new Variant(true);
   c.invoke("MyMethod", args);
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01040000">Retrieving Properties of an ActiveX Control</A></H3><P>You can also use the ActiveXControl class to retrieve properties from an object. To do this, call the ActiveXControl.<A HREF="ActiveXComponent.htm#com_0003000b02020800">getProperty</A> method. If MyControl had a property called MyProperty, you could retrieve its value in the following way. 
<PRE><FONT FACE="Courier" SIZE="2">
   // Create the control as before
   ActiveXControl c = new ActiveXControl("MyControl");
   ...

   // Retrieve a property
   Variant propvalue = c.getProperty("MyProperty");
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01050000">Initializing an ActiveX Control Using Property Bags</A></H3><P>You can call the <A HREF="ActiveXControl.htm#com_0003000b03021200">setProperty</A> method of the <A HREF="ActiveXControl.htm">ActiveXControl</A> class to set a property of an ActiveX control. If the <B>setProperty</B> method is called before the <B>addNotify</B> method is called, the <B>setProperty</B> method places properties in the property bag of the control. This gives the control a mechanism for setting its default state. After the control has been called on <B>addNotify</B>, the <B>setProperty</B> method is invoked using <B>IDispatch</B>. The following example shows how to initialize two properties of MyControl using the <B>setProperty</B> method to place the properties in the property bag.
<PRE><FONT FACE="Courier" SIZE="2">
   ActiveXControl c = new ActiveXControl("MyControl");
   c.setProperty("MyProperty", true);
   c.setProperty("MyOtherProperty", 1);&#009;
   add("Center", c);
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_ovr_0003000b01060000">Sinking Events from ActiveX Objects</A></H3><P>Using the jactivex tool, you can gain access to the event interface of the ActiveX object. For example, suppose you have a control called MyControl that has an event interface called MyEventInterface. Let's say this interface has a method called theEvent, which needs to be implemented by any class that wants to sink theEvent from MyControl. A Java object can sink events from the ActiveX object by using the com.ms.com.<A HREF="ConnectionPointCookie.htm">ConnectionPointCookie</A> class, as follows.
<PRE><FONT FACE="Courier" SIZE="2">
import MyControl.*;
import com.ms.activeX.ActiveXControl;
import com.ms.com.ConnectionPointCookie;

public class MyEventSinker implements MyEventInterface {

   ...
&#009;
   MyControl c = new MyControl;      
   Eventcookie = new ConnectionPointCookie(c, this,
                 Class.forName("MyControl.MyEventInterface");

   // hold onto Eventcookie as long as you want the connection to exist
   ...
&#009;
   public void theEvent(String x){
&#009;&#009;
      // do something interesting
      ...
   }
}
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_0003000b01070000">Classes</A></H3><DL>
<DT><A HREF="ActiveXComponent.htm">Class ActiveXComponent</A>
 </DT><DD>This class provides basic Microsoft&#174; ActiveX&#174; control functionality.
</DD><DT><A HREF="ActiveXControl.htm">Class ActiveXControl</A>
 </DT><DD>This class exposes methods, properties, and events used to host Microsoft&#174; ActiveX&#174; controls.
</DD><DT><A HREF="ActiveXInputStream.htm">Class ActiveXInputStream</A>
 </DT><DD>This class provides access to methods that manipulate input streams.
</DD><DT><A HREF="ActiveXOutputStream.htm">Class ActiveXOutputStream</A>
 </DT><DD>This class provides access to methods that manipulate output streams.
</DD><DT><A HREF="ActiveXToolkit.htm">Class ActiveXToolkit</A>
 </DT><DD>This class provides a toolkit of Component Object Model (COM) functions.

</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_0003000b01080000">Interfaces</A></H3><DL>
<DT><A HREF="ActiveXControlListener.htm">Interface ActiveXControlListener</A>
 </DT><DD>This interface provides a method that notifies an object after a Microsoft&#174; ActiveX&#174; control has been created.
<DT><A HREF="ActiveXControlServices.htm">Interface ActiveXControlServices</A>
 </DT><DD>This interface represents a standard system service that is available for Java components hosted inside ActiveX containers. 


</DD></DL>
<H3 STYLE="color:#333366"><A NAME="commsactiveX_0003000b01090000">Hierarchy</A></H3><PRE><FONT FACE="Courier" SIZE="2"><B>Object</B>
  |
  +--<A HREF="ActiveXToolkit.htm">ActiveXToolkit</A>

<B>Canvas</B>
  |
  +--<A HREF="ActiveXComponent.htm">ActiveXComponent</A>
     |
     +--<A HREF="ActiveXControl.htm">ActiveXControl</A> (<B>Serializable</B>, <A HREF="HeavyComponent.htm">HeavyComponent</A>)

<B>InputStream</B>
  |
  +--<A HREF="ActiveXInputStream.htm">ActiveXInputStream</A>

<B>OutputStream</B>
  |
  +--<A HREF="ActiveXOutputStream.htm">ActiveXOutputStream</A>

<A HREF="ActiveXControlListener.htm">ActiveXControlListener</A>
<A HREF="ActiveXControlServices.htm">ActiveXControlServices</A>
</FONT></PRE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

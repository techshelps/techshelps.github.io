<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WPPOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4625"></a>WPPOBJ.CPP</h2>
<pre><code>/*------------------------------------------------*\ <br> * <br> *Copyright (c) 1997 Microsoft Corporation <br> * <br> *Module Name: <br> * <br> *wppobj.cpp <br> * <br> *Abstract: <br> * <br> *Implementation of Service Provider Object <br> * <br>\*------------------------------------------------*/ <br> <br> <br> <br>#include "stdafx.h" <br>#include "wpprov.h" <br>#include "wppobj.h" <br>#include "util.h" <br>#include "pages.h" <br>#include "resource.h" <br> <br> <br>extern HINSTANCE g_hInstance; <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CWPProvider::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IWPProvider, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br> <br>HRESULT CWPProvider::Init(LPCWSTR wsSiteName, LPCWSTR wsDestURL) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>m_pfnProgressUpdateProc = NULL; <br> <br>// <br>//TO DO:Add code here for initialization of Service Provider object <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br> <br>return(hRetCode); <br>} <br> <br> <br>HRESULT CWPProvider::DoTestPost(void) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO:Add code here to implement post using Service <br>//Provider protocol and retrieval using HTTP and <br>//destination URL for site <br>// <br>//This routine should fail if the Service Provider <br>//can't determine all the information it needs <br>//in order to do a test post <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br> <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::SetProgressUpdateProc( <br>/* [in] */ LONG __RPC_FAR *lpfnProgressUpdateProc) <br>{ <br>HRESULThRetCode; <br> <br>m_pfnProgressUpdateProc = (PFNPROGRESSUPDATEPROC) lpfnProgressUpdateProc; <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br> <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::AddWizardPages(  <br>    /* [in] */ LONG __RPC_FAR *lpv, <br>    /* [in] */ LONG __RPC_FAR *lpfnAdd, <br>    /* [out][in] */ LONG __RPC_FAR *plParam) <br>{ <br>HRESULThRetCode = NO_ERROR; <br>DWORDi; <br>LPFNADDPROPSHEETPAGEpfnAdd = (LPFNADDPROPSHEETPAGE) lpfnAdd; <br> <br> <br>// <br>//Save IDs of pages immediately <br>//before and after ours <br>// <br> <br>m_dwPageBeforeMe = HIWORD(*plParam); <br>m_dwPageAfterMe = LOWORD(*plParam); <br> <br>// <br>//TO DO:Add code here if pages to add into wizard <br>//are determined dynamically <br>// <br> <br>// <br>//Fill in property sheet structures <br>// <br> <br>for (i = 0; i &lt; NUM_PAGES; i++) <br>{ <br>m_Pages[i].dwSize = sizeof(PROPSHEETPAGE); <br>   m_Pages[i].dwFlags = PSP_DEFAULT; <br>m_Pages[i].hInstance = g_hInstance; <br>m_Pages[i].pszTemplate = MAKEINTRESOURCE(g_pPageInfo[i].uDlgID); <br>m_Pages[i].pszIcon = NULL; <br>m_Pages[i].pfnDlgProc = (DLGPROC) g_pPageInfo[i].DlgProc; <br>m_Pages[i].pszTitle = NULL; <br>m_Pages[i].lParam = (LPARAM) this; <br> <br>m_hPages[i] = CreatePropertySheetPage(&amp;m_Pages[i]); <br> <br>if (NULL == m_hPages[i]) <br>{ <br>hRetCode = HRESULT_FROM_WIN32(ERROR_NOT_ENOUGH_MEMORY); <br>goto leave_routine; <br>} <br> <br> if ( FALSE == (pfnAdd(m_hPages[i], NULL)) ) <br>{ <br>DestroyPropertySheetPage(m_hPages[i]); <br>hRetCode = HRESULT_FROM_WIN32(ERROR_NOT_ENOUGH_MEMORY); <br>goto leave_routine; <br>} <br>} <br> <br>// <br>//Return IDs of our first and last pages <br>// <br> <br>*plParam = (IDD_FIRST_PAGE &lt;&lt; 16) | IDD_LAST_PAGE; <br> <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br> <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::Commit( void) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO:Write code here <br>//Call m_pfnProgressUpdateProc every time a chunk of bytes <br>//is sent (pass in filename and number of bytes committed) <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::DeleteFile(  <br>/* [string][in] */ LPCWSTR lpszFile) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::FindClose(  <br>/* [in] */ LONG hSearchHandle) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::FindFirstFile(  <br>/* [string][in] */ LPCWSTR lpszSearchFile, <br>/* [out] */ LPWIN32_FIND_DATAW lpFindFileData, <br>/* [out] */ LONG __RPC_FAR *lpSearchHandle) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::FindNextFile(  <br>/* [in] */ LONG hSearchHandle, <br>/* [out] */ LPWIN32_FIND_DATAW lpFindFileData) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::GetError(  <br>/* [out] */ LONG __RPC_FAR *lpdwErrorType, <br>/* [out] */ LONG __RPC_FAR *lpdwErrorCode, <br>/* [out][in] */ LONG __RPC_FAR *lpcbError, <br>/* [string][out] */ LPWSTR lpszError) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::GetParam(  <br>/* [string][in] */ LPCWSTR lpszParameter, <br>/* [out][in] */ LONG __RPC_FAR *lpcbValue, <br>/* [string][out] */ LPWSTR lpszValue) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::GetSiteInfo(  <br>/* [out] */ LPWPSITEINFOW lpbSite, <br>/* [out][in] */ LONG __RPC_FAR *lpcbSite) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::NetworkConnect(  <br>/* [string][in] */ LPCWSTR lpszUserName, <br>/* [string][in] */ LPCWSTR lpszPassword) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::NetworkDisconnect( void) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::PostFiles(  <br>/* [in] */ LONG cLocalPaths, <br>/* [string][in] */ LPWSTR __RPC_FAR *lppszLocalPaths, <br>/* [out][in] */ LONG __RPC_FAR *lpcbURL, <br>/* [string][out][in] */ LPWSTR lpszURL, <br>/* [in] */ LONG fdwFlags) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO:Write code here <br>//Call m_pfnProgressUpdateProc every time a chunk of bytes <br>//is sent (pass in filename and number of bytes posted) <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::ServerLogin(  <br>/* [string][in] */ LPCWSTR lpszUserName, <br>/* [string][in] */ LPCWSTR lpszPassword) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::ServerLogout( void) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CWPProvider::SetParam(  <br>/* [string][in] */ LPCWSTR lpszParameter, <br>    /* [string][in] */ LPCWSTR lpszValue) <br>{ <br>HRESULThRetCode = NO_ERROR; <br> <br>// <br>//TO DO: Write code here <br>// <br> <br>leave(NO_ERROR); <br> <br>leave_routine: <br>return(hRetCode); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

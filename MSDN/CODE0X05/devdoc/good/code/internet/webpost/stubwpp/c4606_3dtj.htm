<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WPPROV.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4627"></a>WPPROV.CPP</h2>
<pre><code>/*------------------------------------------------*\ <br> * <br> *Copyright (c) 1997 Microsoft Corporation <br> * <br> *Module Name: <br> * <br> *wpprov.cpp <br> * <br> *Abstract: <br> * <br> *Implementation of DLL Exports <br> * <br>\*------------------------------------------------*/ <br> <br>#include "stdafx.h" <br>#include "resource.h" <br>#include "initguid.h" <br>#include "wpprov.h" <br>#include "wppobj.h" <br>#include "regkeyex.h" <br>#include "util.h" <br>#include "priority.h" <br>#include "wppdefs.h" <br> <br>#define IID_DEFINED <br>#include "wpspi_i.c" <br>#include "wpprov_i.c" <br> <br> <br>CComModule _Module; <br>HINSTANCE g_hInstance; <br> <br>BEGIN_OBJECT_MAP(ObjectMap) <br>OBJECT_ENTRY(CLSID_CWPProvider, CWPProvider) <br>END_OBJECT_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DLL Entry Point <br> <br>extern "C" <br>BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/) <br>{ <br>if (dwReason == DLL_PROCESS_ATTACH) <br>{ <br>g_hInstance = hInstance; <br>_Module.Init(ObjectMap, hInstance); <br>DisableThreadLibraryCalls(hInstance); <br>} <br>else if (dwReason == DLL_PROCESS_DETACH) <br>_Module.Term(); <br>return TRUE;    // ok <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Used to determine whether the DLL can be unloaded by OLE <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>return (_Module.GetLockCount()==0) ? S_OK : S_FALSE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Returns a class factory to create an object of the requested type <br> <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv) <br>{ <br>return _Module.GetClassObject(rclsid, riid, ppv); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllRegisterServer - Adds entries to the system registry <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>CRegKeyExhKey; <br>WCHARwsProvCLSID[MAX_PATH]; <br>CHARsProvCLSID[MAX_PATH]; <br>CHARsProvKey[MAX_PATH]; <br>CHARsPathKey[MAX_PATH]; <br>CHARsProvDesc[MAX_PATH]; <br>CHARsProvPath[MAX_PATH]; <br>DWORDdwBufLen; <br>DWORDdwResult; <br>HRESULThResult; <br> <br>//Registers object, typelib and all interfaces in typelib <br> <br>hResult = _Module.RegisterServer(TRUE); <br>if (S_OK != hResult) <br>return(hResult); <br> <br>//Get string version of Provider CLSID <br> <br>if (0 == StringFromGUID2(CLSID_CWPProvider, wsProvCLSID, MAX_PATH)) <br>return(HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)); <br> <br>g_wcstombs(sProvCLSID, wsProvCLSID, MAX_PATH); <br> <br>//construct regkey names <br> <br>lstrcpyA(sPathKey, REGKEY_CLASSES_A); <br>lstrcatA(sPathKey, "\\"); <br>lstrcatA(sPathKey, sProvCLSID); <br>lstrcatA(sPathKey, "\\"); <br>lstrcatA(sPathKey, REGKEY_INPROCSERVER_A); <br> <br>lstrcpyA(sProvKey, REGSUBKEY_WPP_A); <br>lstrcatA(sProvKey, "\\"); <br>lstrcatA(sProvKey, sProvCLSID); <br> <br>//Get DLL path <br> <br>dwResult = hKey.Create(HKEY_CLASSES_ROOT, sPathKey); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>dwBufLen = MAX_PATH; <br>dwResult = hKey.QueryValue(sProvPath, &amp;dwBufLen, ""); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>//Create WebPost Provider key <br> <br>dwResult = hKey.Create(HKEY_WPP, sProvKey); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>//Load Provider description string <br> <br>if (0 == LoadString(g_hInstance, IDS_WPPROVIDER_DESC, sProvDesc, MAX_PATH)) <br>{ <br>dwResult = GetLastError(); <br>return(HRESULT_FROM_WIN32(dwResult)); <br>} <br> <br>//Set Provider key values <br> <br>dwResult = hKey.SetValue(sProvDesc, REGVAL_WPP_NAME_A); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>dwResult = hKey.SetValue(sProvPath, REGVAL_WPP_DLLPATH_A); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>dwResult = hKey.SetValue(WPP_PRIORITY, REGVAL_WPP_PRIORITY_A); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>dwResult = hKey.SetValue((DWORD) 0, REGVAL_WPP_POSTINFO_REQUIRED_A); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>return(NO_ERROR); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllUnregisterServer - Removes entries from the system registry <br> <br>STDAPI DllUnregisterServer(void) <br>{ <br>CRegKeyExhKey; <br>WCHARwsProvCLSID[MAX_PATH]; <br>CHARsProvCLSID[MAX_PATH]; <br>HRESULThResult; <br>DWORDdwResult; <br> <br>//Get string version of Provider CLSID <br> <br>if (0 == StringFromGUID2(CLSID_CWPProvider, wsProvCLSID, MAX_PATH)) <br>return(HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)); <br> <br>g_wcstombs(sProvCLSID, wsProvCLSID, MAX_PATH); <br> <br>//Remove WebPost registry entries <br> <br>dwResult = hKey.Open(HKEY_WPP, REGSUBKEY_WPP_A); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>dwResult = hKey.DeleteSubKey(sProvCLSID); <br>hResult = HRESULT_FROM_WIN32(dwResult); <br>if (FAILED(hResult)) <br>return(hResult); <br> <br>//Do ATL unregistration <br> <br>_Module.UnregisterServer(); <br> <br>return(NO_ERROR); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAGES.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4612"></a>PAGES.CPP</h2>
<pre><code>/*------------------------------------------------*\ <br> * <br> *Copyright (c) 1997 Microsoft Corporation <br> * <br> *Module Name: <br> * <br> *pages.cpp <br> * <br> *Abstract: <br> * <br> *Property sheet page routines <br> * <br>\*------------------------------------------------*/ <br> <br> <br>#include "stdafx.h" <br>#include "wpprov.h" <br>#include "wppobj.h" <br>#include "pages.h" <br>#include "resource.h" <br>#include "util.h" <br> <br> <br>const PAGEINFO g_pPageInfo[NUM_PAGES] = <br>{ <br>{ Page0DlgProc, IDD_PAGE_0 }, <br>{ Page1DlgProc, IDD_PAGE_1 } <br>}; <br> <br> <br>HRESULT MakeBold(HWND hwnd, BOOL fSize, LONG lfWeight) <br>{ <br>HRESULThr = ERROR_SUCCESS; <br>HFONThfont = NULL; <br>HFONThnewfont = NULL; <br>LOGFONT*plogfont = NULL; <br> <br>if (!hwnd) goto MakeBoldExit; <br> <br>hfont = (HFONT)SendMessage(hwnd,WM_GETFONT,0,0); <br>if (!hfont) <br>{ <br>hr = ERROR_GEN_FAILURE; <br>goto MakeBoldExit; <br>} <br> <br>plogfont = (LOGFONT*)malloc(sizeof(LOGFONT)); <br>if (!plogfont) <br>{ <br>hr = ERROR_NOT_ENOUGH_MEMORY; <br>goto MakeBoldExit; <br>} <br> <br>if (!GetObject(hfont,sizeof(LOGFONT),(LPVOID)plogfont)) <br>{ <br>hr = ERROR_GEN_FAILURE; <br>goto MakeBoldExit; <br>} <br> <br>if (abs(plogfont-&gt;lfHeight) &lt; 24 &amp;&amp; fSize) <br>{ <br>plogfont-&gt;lfHeight = plogfont-&gt;lfHeight + (plogfont-&gt;lfHeight / 4); <br>} <br> <br>plogfont-&gt;lfWeight = (int) lfWeight; <br> <br>if (!(hnewfont = CreateFontIndirect(plogfont))) <br>{ <br>hr = ERROR_GEN_FAILURE; <br>goto MakeBoldExit; <br>} <br> <br>SendMessage(hwnd,WM_SETFONT,(WPARAM)hnewfont,MAKELPARAM(TRUE,0)); <br> <br>free(plogfont); <br> <br>MakeBoldExit: <br> <br>return (HRESULT_FROM_WIN32(hr)); <br>} <br> <br> <br>HRESULT ReleaseBold(HWND hwnd) <br>{ <br>HFONT hfont = NULL; <br> <br>hfont = (HFONT)SendMessage(hwnd,WM_GETFONT,0,0); <br>if (hfont) DeleteObject(hfont); <br>return ERROR_SUCCESS; <br>} <br> <br> <br>BOOL CALLBACK Page0DlgProc(HWND hDlg, <br>UINT uMsg, <br>WPARAM wParam, <br>LPARAM lParam) <br>{ <br>CComObject&lt;CWPProvider&gt;*pWPP; <br> <br>switch (uMsg) { <br> <br>case WM_INITDIALOG: <br>{ <br>// get propsheet page struct passed in <br>LPPROPSHEETPAGE lpsp = (LPPROPSHEETPAGE) lParam; <br> <br>// fetch our private page info from propsheet struct <br>CComObject&lt;CWPProvider&gt; *pWPP = (CComObject&lt;CWPProvider&gt; *) lpsp-&gt;lParam; <br> <br>// store pointer to private page info in window data for later <br>SetWindowLong(hDlg, DWL_USER, (LPARAM) pWPP); <br> <br>// Enable Back and Next buttons <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT | PSWIZB_BACK); <br> <br>// Make the title text bold <br>MakeBold(GetDlgItem(hDlg, IDC_PAGE_TITLE), TRUE, FW_BOLD); <br> <br>return(TRUE); <br>} <br> <br>break;// WM_INITDIALOG <br> <br>case WM_NOTIFY: <br>{ <br>// get pointer to private page data out of window data <br>NMHDR*lpnm = (NMHDR *) lParam; <br> <br>pWPP = (CComObject&lt;CWPProvider&gt; *) GetWindowLong(hDlg,DWL_USER); <br> <br>switch (lpnm-&gt;code) <br>{ <br>case PSN_SETACTIVE: <br> <br>// Enable Back and Next buttons <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT | PSWIZB_BACK); <br>SetWindowLong(hDlg, DWL_MSGRESULT, 0); <br> <br>break; <br> <br>case PSN_WIZNEXT: <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, g_pPageInfo[1].uDlgID); <br>break; <br> <br>case PSN_WIZBACK: <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, pWPP-&gt;m_dwPageBeforeMe); <br>break; <br> <br>case PSN_WIZFINISH: <br>case PSN_HELP: <br> <br>break; <br> <br>case PSN_QUERYCANCEL: <br> <br>{ <br>charsTitle[MAX_PATH]; <br>charsMsg[MAX_MSG_LEN]; <br>BOOLfQuit; <br> <br>LoadString(GetModuleHandle(DLL_FILENAME_A), IDS_APPNAME, sTitle, sizeof(sTitle)); <br>LoadString(GetModuleHandle(DLL_FILENAME_A), IDS_WARN_CANCEL, sMsg, sizeof(sMsg)); <br>fQuit = (MessageBox(hDlg, <br>sMsg, <br>sTitle, <br>MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2)  <br>== IDYES); <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, !fQuit); <br>return(TRUE); <br>} <br> <br>break; <br>} <br> <br>return(TRUE); // return value is ignored and can be anything <br>} <br> <br>break; <br> <br>case WM_COMMAND: <br>{ <br>// get pointer to private page data out of window data <br>pWPP = (CComObject&lt;CWPProvider&gt; *) GetWindowLong(hDlg, DWL_USER); <br> <br>WORD wNotifyCode, wId; <br>HWND hwndCtl; <br> <br>wNotifyCode = HIWORD(wParam); // notification code  <br>wId = LOWORD(wParam);         // item, control, or accelerator identifier  <br>hwndCtl = (HWND) lParam;      // handle of control <br>} <br> <br>break; <br> <br>    case WM_DESTROY: <br> <br>ReleaseBold(GetDlgItem(hDlg, IDC_PAGE_TITLE)); <br>break; <br> <br>} <br> <br>return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK Page1DlgProc(HWND hDlg, <br>UINT uMsg, <br>WPARAM wParam, <br>LPARAM lParam) <br>{ <br>CComObject&lt;CWPProvider&gt;*pWPP; <br> <br>switch (uMsg) { <br> <br>case WM_INITDIALOG: <br>{ <br>// get propsheet page struct passed in <br>LPPROPSHEETPAGE lpsp = (LPPROPSHEETPAGE) lParam; <br> <br>// fetch our private page info from propsheet struct <br>CComObject&lt;CWPProvider&gt; *pWPP = (CComObject&lt;CWPProvider&gt; *) lpsp-&gt;lParam; <br> <br>// store pointer to private page info in window data for later <br>SetWindowLong(hDlg, DWL_USER, (LPARAM) pWPP); <br> <br>// Enable Back and Next buttons <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT | PSWIZB_BACK); <br> <br>// Make the title text bold <br>MakeBold(GetDlgItem(hDlg, IDC_PAGE_TITLE), TRUE, FW_BOLD); <br> <br>return(TRUE); <br>} <br> <br>break;// WM_INITDIALOG <br> <br>case WM_NOTIFY: <br>{ <br>// get pointer to private page data out of window data <br>NMHDR*lpnm = (NMHDR *) lParam; <br> <br>pWPP = (CComObject&lt;CWPProvider&gt; *) GetWindowLong(hDlg,DWL_USER); <br> <br>switch (lpnm-&gt;code) <br>{ <br>case PSN_SETACTIVE: <br> <br>// Enable Back and Next buttons <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT | PSWIZB_BACK); <br>SetWindowLong(hDlg, DWL_MSGRESULT, 0); <br> <br>break; <br> <br>case PSN_WIZNEXT: <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, pWPP-&gt;m_dwPageAfterMe); <br>break; <br> <br>case PSN_WIZBACK: <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, g_pPageInfo[0].uDlgID); <br>break; <br> <br>case PSN_WIZFINISH: <br>case PSN_HELP: <br> <br>break; <br> <br>case PSN_QUERYCANCEL: <br> <br>{ <br>charsTitle[MAX_PATH]; <br>charsMsg[MAX_MSG_LEN]; <br>BOOLfQuit; <br> <br>LoadString(GetModuleHandle(DLL_FILENAME_A), IDS_APPNAME, sTitle, sizeof(sTitle)); <br>LoadString(GetModuleHandle(DLL_FILENAME_A), IDS_WARN_CANCEL, sMsg, sizeof(sMsg)); <br>fQuit = (MessageBox(hDlg, <br>sMsg, <br>sTitle, <br>MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2)  <br>== IDYES); <br> <br>SetWindowLong(hDlg, DWL_MSGRESULT, !fQuit); <br>return(TRUE); <br>} <br> <br>break; <br>} <br> <br>return(TRUE); // return value is ignored and can be anything <br>} <br> <br>break; <br> <br>case WM_COMMAND: <br>{ <br>// get pointer to private page data out of window data <br>pWPP = (CComObject&lt;CWPProvider&gt; *) GetWindowLong(hDlg, DWL_USER); <br> <br>WORD wNotifyCode, wId; <br>HWND hwndCtl; <br> <br>wNotifyCode = HIWORD(wParam); // notification code  <br>wId = LOWORD(wParam);         // item, control, or accelerator identifier  <br>hwndCtl = (HWND) lParam;      // handle of control <br>} <br> <br>break; <br> <br>    case WM_DESTROY: <br> <br>ReleaseBold(GetDlgItem(hDlg, IDC_PAGE_TITLE)); <br>break; <br> <br>} <br> <br>return(FALSE); <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATREG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4620"></a>STATREG.H</h2>
<pre><code>// This is a part of the Active Template Library. <br>// Copyright (C) 1996-1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// Active Template Library Reference and related <br>// electronic documentation provided with the library. <br>// See these sources for detailed information regarding the <br>// Active Template Library product. <br> <br>#ifndef __STATREG_H <br>#define __STATREG_H <br> <br>#define E_ATL_REGISTRAR_DESC              0x0201 <br>#define E_ATL_NOT_IN_MAP                  0x0202 <br>#define E_ATL_UNEXPECTED_EOS              0x0203 <br>#define E_ATL_VALUE_SET_FAILED            0x0204 <br>#define E_ATL_RECURSE_DELETE_FAILED       0x0205 <br>#define E_ATL_EXPECTING_EQUAL             0x0206 <br>#define E_ATL_CREATE_KEY_FAILED           0x0207 <br>#define E_ATL_DELETE_KEY_FAILED           0x0208 <br>#define E_ATL_OPEN_KEY_FAILED             0x0209 <br>#define E_ATL_CLOSE_KEY_FAILED            0x020A <br>#define E_ATL_UNABLE_TO_COERCE            0x020B <br>#define E_ATL_BAD_HKEY                    0x020C <br>#define E_ATL_MISSING_OPENKEY_TOKEN       0x020D <br>#define E_ATL_CONVERT_FAILED              0x020E <br>#define E_ATL_TYPE_NOT_SUPPORTED          0x020F <br>#define E_ATL_COULD_NOT_CONCAT            0x0210 <br>#define E_ATL_COMPOUND_KEY                0x0211 <br>#define E_ATL_INVALID_MAPKEY              0x0212 <br>#define E_ATL_UNSUPPORTED_VT              0x0213 <br>#define E_ATL_VALUE_GET_FAILED            0x0214 <br>#define E_ATL_VALUE_TOO_LARGE             0x0215 <br>#define E_ATL_MISSING_VALUE_DELIMETER     0x0216 <br>#define E_ATL_DATA_NOT_BYTE_ALIGNED       0x0217 <br> <br>#ifndef ATL_NO_NAMESPACE <br>namespace ATL <br>{ <br>#endif <br> <br>const TCHAR  chSemiColon         = _T(';'); <br>const TCHAR  chDirSep            = _T('\\'); <br>const TCHAR  chEscape            = _T('\\'); <br>const TCHAR  chComma             = _T(','); <br>const TCHAR  chDelete            = _T('~'); <br>const TCHAR  chEOS               = _T('\0'); <br>const TCHAR  chTab               = _T('\t'); <br>const TCHAR  chLF                = _T('\n'); <br>const TCHAR  chCR                = _T('\r'); <br>const TCHAR  chSpace             = _T(' '); <br>const TCHAR  chRightBracket      = _T('}'); <br>const TCHAR  chLeftBracket       = _T('{'); <br>const TCHAR  chVarLead           = _T('%'); <br>const TCHAR  chQuote             = _T('\''); <br>const TCHAR  chEquals            = _T('='); <br>//const LPCTSTR  szRightBracket  = _T("}"); <br>//const LPCTSTR  szLeftBracket   = _T("{"); <br>//const LPCTSTR  szEquals            = _T("="); <br>//const LPCTSTR  szDirSep          = _T("\\"); <br>const LPCTSTR  szStringVal       = _T("S"); <br>const LPCTSTR  szDwordVal        = _T("D"); <br>const LPCTSTR  szBinaryVal       = _T("B"); <br>const LPCTSTR  szValToken        = _T("Val"); <br>const LPCTSTR  szForceRemove     = _T("ForceRemove"); <br>const LPCTSTR  szNoRemove        = _T("NoRemove"); <br>const LPCTSTR  szDelete          = _T("Delete"); <br> <br>struct EXPANDER <br>{ <br>LPOLESTR    szKey; <br>LPOLESTR    szValue; <br>}; <br> <br>class CExpansionVector <br>{ <br>public: <br>CExpansionVector() <br>{ <br>m_cEls = 0; <br>m_nSize=10; <br>m_p=(EXPANDER**)malloc(m_nSize*sizeof(EXPANDER*)); <br>} <br>HRESULT Add(LPCOLESTR lpszKey, LPCOLESTR lpszValue); <br>LPCOLESTR Find(LPTSTR lpszKey); <br>HRESULT ClearReplacements(); <br> <br> <br>private: <br>EXPANDER** m_p; <br>int m_cEls; <br>int m_nSize; <br>}; <br> <br> <br>#if defined(_ATL_DLL) | defined(_ATL_DLL_IMPL) <br>class ATL_NO_VTABLE CRegObject <br> : public IRegistrar <br>#else <br>class CRegObject <br>#endif <br>{ <br>public: <br> <br>~CRegObject(){ClearReplacements();} <br>HRESULT FinalConstruct() {return S_OK;} <br>void FinalRelease() {} <br> <br> <br>// Map based methods <br>HRESULT STDMETHODCALLTYPE AddReplacement(LPCOLESTR lpszKey, LPCOLESTR lpszItem); <br>HRESULT STDMETHODCALLTYPE ClearReplacements(); <br>LPCOLESTR StrFromMap(LPTSTR lpszKey); <br> <br>// Register via a given mechanism <br>HRESULT STDMETHODCALLTYPE ResourceRegister(LPCOLESTR pszFileName, UINT nID, LPCOLESTR pszType); <br>HRESULT STDMETHODCALLTYPE ResourceRegisterSz(LPCOLESTR pszFileName, LPCOLESTR pszID, LPCOLESTR pszType); <br>HRESULT STDMETHODCALLTYPE ResourceUnregister(LPCOLESTR pszFileName, UINT nID, LPCOLESTR pszType); <br>HRESULT STDMETHODCALLTYPE ResourceUnregisterSz(LPCOLESTR pszFileName, LPCOLESTR pszID, LPCOLESTR pszType); <br>HRESULT STDMETHODCALLTYPE FileRegister(LPCOLESTR pszFileName); <br>HRESULT STDMETHODCALLTYPE FileUnregister(LPCOLESTR pszFileName); <br>HRESULT STDMETHODCALLTYPE StringRegister(LPCOLESTR pszData); <br>HRESULT STDMETHODCALLTYPE StringUnregister(LPCOLESTR pszData); <br> <br>protected: <br> <br>HRESULT MemMapAndRegister(LPCOLESTR pszFileName, BOOL bRegister); <br>HRESULT RegisterFromResource(LPCOLESTR pszFileName, LPCTSTR pszID, LPCTSTR pszType, BOOL bRegister); <br>HRESULT RegisterWithString(LPCOLESTR pszData, BOOL bRegister); <br> <br> <br>static HRESULT GenerateError(UINT nID); <br> <br>CExpansionVector                                m_RepMap; <br>CComObjectThreadModel::AutoCriticalSection      m_csMap; <br>}; <br> <br> <br>class CRegParser <br>{ <br>public: <br>CRegParser(CRegObject* pRegObj); <br> <br>HRESULT  PreProcessBuffer(LPTSTR lpszReg, LPTSTR* ppszReg); <br>HRESULT  RegisterBuffer(LPTSTR szReg, BOOL bRegister); <br> <br>protected: <br> <br>void    SkipWhiteSpace(); <br>HRESULT NextToken(LPTSTR szToken); <br>HRESULT AddValue(CRegKey&amp; rkParent,LPCTSTR szValueName, LPTSTR szToken); <br>BOOL    CanForceRemoveKey(LPCTSTR szKey); <br>BOOL    HasSubKeys(HKEY hkey); <br>BOOL    HasValues(HKEY hkey); <br>HRESULT RegisterSubkeys(HKEY hkParent, BOOL bRegister, BOOL bInRecovery = FALSE); <br>BOOL    IsSpace(TCHAR ch); <br>void    IncrementLinePos(); <br>void    IncrementLineCount(){m_cLines++;} <br> <br> <br>LPTSTR  m_pchCur; <br>int     m_cLines; <br> <br>CRegObject*     m_pRegObj; <br> <br>HRESULT GenerateError(UINT nID); <br>HRESULT HandleReplacements(LPTSTR&amp; szToken); <br>HRESULT SkipAssignment(LPTSTR szToken); <br> <br>BOOL    EndOfVar() { return chQuote == *m_pchCur &amp;&amp; chQuote != *CharNext(m_pchCur); } <br> <br>}; <br> <br>#ifndef ATL_NO_NAMESPACE <br>}; //namespace ATL <br>#endif <br> <br>#endif //__STATREG_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

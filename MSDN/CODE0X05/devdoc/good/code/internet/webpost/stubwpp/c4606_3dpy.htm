<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4606"></a>README.TXT</h2>
<pre><code>*************************************************************** <br>*                                                             * <br>*    Authoring a Web Publishing Service Provider using the    * <br>*        Microsoft Web Publishing Service Provider Stub       * <br>*           Copyright (C) 1997 Microsoft Corporation          * <br>*                                                             * <br>*************************************************************** <br> <br>0.First verify that your development environment can compile the stubbed <br>provider. You should be able to successfully compile the stubbed provider <br>DLL (STUBWPP.DLL) with the command "make stubwpp" ("nmake stubwpp" in the <br>case of Microsoft's Developer's Studio) in the SAMPLES\WEBPOST\STUBWPP <br>directory. If this does not succeed verify that the proper environment <br>variables have been set for your development environment to work properly <br>(Dev Studio users should try running \DevStudio\VC\bin\VCVARS32.BAT). <br> <br>Once you have verified that your compiler can compile the stubbed provider <br>as-is, you can begin authoring. <br> <br>1.Select a class name, DLL name, and friendly name for your Service <br>Provider. If you wish to be consistent with extant Service Providers, <br>use the following model: <br> <br>Class Name:C...Wpp <br>DLL Name:...WPP.DLL <br>Friendly Name:"... Provider" <br> <br>where the elipses are replaced with the name of your protocol. <br> <br>For example, the FTP provider is named as follows: <br> <br>Class Name:CFtpWpp <br>DLL Name:FTPWPP.DLL <br>Friendly Name:"FTP Provider" <br> <br>2.Everywhere in the source code files, replace "CWPProvider" with <br>the class name you have selected. <br> <br>3.In WPPROV.IDL, replace the TypeLibID and CLSID with new UUIDs. <br>(Note that most of the changes described in this list are <br> indicated in the source code itself with a "TO DO" comment.) <br> <br>4.In WPPROV.RC, replace the IDS_WPPROVIDER_DESC string with the <br>Friendly name you have selected. <br> <br>5.In UTIL.H and the compiler makefile, change the name of the <br>generated executable from STUBWPP.DLL to the DLL name you have <br>selected. <br> <br>6.To double-check that all the replacements have been done correctly, <br>compile the DLL, run REGSVR32 on it (it should succeed), and then <br>run the Wizard. Click "New" on the destination site page, enter a <br>Web server Friendly name, and then click "Advanced". You should <br>see your provider's Friendly name in the Provider listbox. <br>Furthermore you should be able to step through the rest of the <br>Wizard successfully. Nothing will actually be posted, but this <br>will verify that all the renaming has gone correctly. <br> <br>7.Finally write the primary implementation code. The following order <br>is suggested: <br> <br>A.Fill in PAGES.H, RESOURCE.H, and WPPROV.RC with the dialog <br>templates and #defines for the property sheet pages your <br>provider will add to the Web Publishing Wizard. Two example <br>pages are already present. <br> <br>B.Write the Dialog procedures for each property sheet page in <br>PAGES.CPP. Again, a sample procedure is already available for <br>each of the two example pages. <br> <br>C.Write the implementation of the SPI and SPI helper functions <br>in WPPOBJ.CPP and WPSPIHLP.CPP, respectively. Note that in many <br>cases WPSPIHLP.CPP may not require any modification. If your <br>provider does not *need* to do site management itself, it is <br>strongly recommended that the helper functions in WPSPIHLP.CPP be <br>left unmodified, which will allow the Web Publishing API to do all <br>site management for you. <br> <br>8.Test using the wizard. <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

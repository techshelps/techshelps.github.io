<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ATLCONV.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4608"></a>ATLCONV.CPP</h2>
<pre><code>// This is a part of the Active Template Library. <br>// Copyright (C) 1996-1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// Active Template Library Reference and related <br>// electronic documentation provided with the library. <br>// See these sources for detailed information regarding the <br>// Active Template Library product. <br> <br>#ifndef __ATLCONV_H__ <br>#error atlconv.cpp requires atlconv.h to be included first <br>#endif <br> <br>#ifndef _ATL_NO_CONVERSIONS <br>///////////////////////////////////////////////////////////////////////////// <br>// Global UNICODE&lt;&gt;ANSI translation helpers <br>LPWSTR WINAPI AtlA2WHelper(LPWSTR lpw, LPCSTR lpa, int nChars) <br>{ <br>_ASSERTE(lpa != NULL); <br>_ASSERTE(lpw != NULL); <br>// verify that no illegal character present <br>// since lpw was allocated based on the size of lpa <br>// don't worry about the number of chars <br>lpw[0] = '\0'; <br>MultiByteToWideChar(CP_ACP, 0, lpa, -1, lpw, nChars); <br>return lpw; <br>} <br> <br>LPSTR WINAPI AtlW2AHelper(LPSTR lpa, LPCWSTR lpw, int nChars) <br>{ <br>_ASSERTE(lpw != NULL); <br>_ASSERTE(lpa != NULL); <br>// verify that no illegal character present <br>// since lpa was allocated based on the size of lpw <br>// don't worry about the number of chars <br>lpa[0] = '\0'; <br>WideCharToMultiByte(CP_ACP, 0, lpw, -1, lpa, nChars, NULL, NULL); <br>return lpa; <br>} <br> <br>#ifdef _WINGDI_ <br> <br>// don't include this code when building DLL <br>LPDEVMODEW AtlDevModeA2W(LPDEVMODEW lpDevModeW, LPDEVMODEA lpDevModeA) <br>{ <br>if (lpDevModeA == NULL) <br>return NULL; <br>_ASSERTE(lpDevModeW != NULL); <br>AtlA2WHelper(lpDevModeW-&gt;dmDeviceName, (LPCSTR)lpDevModeA-&gt;dmDeviceName, 32*sizeof(WCHAR)); <br>memcpy(&amp;lpDevModeW-&gt;dmSpecVersion, &amp;lpDevModeA-&gt;dmSpecVersion, <br>offsetof(DEVMODEW, dmFormName) - offsetof(DEVMODEW, dmSpecVersion)); <br>AtlA2WHelper(lpDevModeW-&gt;dmFormName, (LPCSTR)lpDevModeA-&gt;dmFormName, 32*sizeof(WCHAR)); <br>memcpy(&amp;lpDevModeW-&gt;dmLogPixels, &amp;lpDevModeA-&gt;dmLogPixels, <br>sizeof(DEVMODEW) - offsetof(DEVMODEW, dmLogPixels)); <br>if (lpDevModeA-&gt;dmDriverExtra != 0) <br>memcpy(lpDevModeW+1, lpDevModeA+1, lpDevModeA-&gt;dmDriverExtra); <br>lpDevModeW-&gt;dmSize = sizeof(DEVMODEW); <br>return lpDevModeW; <br>} <br> <br>LPTEXTMETRICW AtlTextMetricA2W(LPTEXTMETRICW lptmW, LPTEXTMETRICA lptmA) <br>{ <br>if (lptmA == NULL) <br>return NULL; <br>_ASSERTE(lptmW != NULL); <br>memcpy(lptmW, lptmA, sizeof(LONG) * 11); <br>memcpy(&amp;lptmW-&gt;tmItalic, &amp;lptmA-&gt;tmItalic, sizeof(BYTE) * 5); <br>MultiByteToWideChar(CP_ACP, 0, (LPCSTR)&amp;lptmA-&gt;tmFirstChar, 1, &amp;lptmW-&gt;tmFirstChar, 1); <br>MultiByteToWideChar(CP_ACP, 0, (LPCSTR)&amp;lptmA-&gt;tmLastChar, 1, &amp;lptmW-&gt;tmLastChar, 1); <br>MultiByteToWideChar(CP_ACP, 0, (LPCSTR)&amp;lptmA-&gt;tmDefaultChar, 1, &amp;lptmW-&gt;tmDefaultChar, 1); <br>MultiByteToWideChar(CP_ACP, 0, (LPCSTR)&amp;lptmA-&gt;tmBreakChar, 1, &amp;lptmW-&gt;tmBreakChar, 1); <br>return lptmW; <br>} <br> <br>LPTEXTMETRICA AtlTextMetricW2A(LPTEXTMETRICA lptmA, LPTEXTMETRICW lptmW) <br>{ <br>if (lptmW == NULL) <br>return NULL; <br>_ASSERTE(lptmA != NULL); <br>memcpy(lptmA, lptmW, sizeof(LONG) * 11); <br>memcpy(&amp;lptmA-&gt;tmItalic, &amp;lptmW-&gt;tmItalic, sizeof(BYTE) * 5); <br>WideCharToMultiByte(CP_ACP, 0, &amp;lptmW-&gt;tmFirstChar, 1, (LPSTR)&amp;lptmA-&gt;tmFirstChar, 1, NULL, NULL); <br>WideCharToMultiByte(CP_ACP, 0, &amp;lptmW-&gt;tmLastChar, 1, (LPSTR)&amp;lptmA-&gt;tmLastChar, 1, NULL, NULL); <br>WideCharToMultiByte(CP_ACP, 0, &amp;lptmW-&gt;tmDefaultChar, 1, (LPSTR)&amp;lptmA-&gt;tmDefaultChar, 1, NULL, NULL); <br>WideCharToMultiByte(CP_ACP, 0, &amp;lptmW-&gt;tmBreakChar, 1, (LPSTR)&amp;lptmA-&gt;tmBreakChar, 1, NULL, NULL); <br>return lptmA; <br>} <br> <br>LPDEVMODEA AtlDevModeW2A(LPDEVMODEA lpDevModeA, LPDEVMODEW lpDevModeW) <br>{ <br>if (lpDevModeW == NULL) <br>return NULL; <br>_ASSERTE(lpDevModeA != NULL); <br>AtlW2AHelper((LPSTR)lpDevModeA-&gt;dmDeviceName, lpDevModeW-&gt;dmDeviceName, 32*sizeof(char)); <br>memcpy(&amp;lpDevModeA-&gt;dmSpecVersion, &amp;lpDevModeW-&gt;dmSpecVersion, <br>offsetof(DEVMODEA, dmFormName) - offsetof(DEVMODEA, dmSpecVersion)); <br>AtlW2AHelper((LPSTR)lpDevModeA-&gt;dmFormName, lpDevModeW-&gt;dmFormName, 32*sizeof(char)); <br>memcpy(&amp;lpDevModeA-&gt;dmLogPixels, &amp;lpDevModeW-&gt;dmLogPixels, <br>sizeof(DEVMODEA) - offsetof(DEVMODEA, dmLogPixels)); <br>if (lpDevModeW-&gt;dmDriverExtra != 0) <br>memcpy(lpDevModeA+1, lpDevModeW+1, lpDevModeW-&gt;dmDriverExtra); <br>lpDevModeA-&gt;dmSize = sizeof(DEVMODEA); <br>return lpDevModeA; <br>} <br> <br>#endif //_WINGDI_ <br>#endif //!_ATL_NO_CONVERSIONS </code></pre>
<p>&nbsp;</p></body>
</HTML>

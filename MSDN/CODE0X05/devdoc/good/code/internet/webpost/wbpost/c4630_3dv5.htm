<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WBPOST.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4631"></a>WBPOST.CPP</h2>
<pre><code>//---------------------------------------------------------------------- <br>//       Copyright (C) 1993-1997 Microsoft Corporation. <br>//       All rights reserved. <br>//---------------------------------------------------------------------- <br> <br>//---------------------------------------------------------------------- <br>//WebPost API usage example <br>// <br>//  This example allows the user to post files to a web site. <br>// <br>//---------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;tchar.h&gt; <br> <br>#include &lt;wpapi.h&gt; <br>#include &lt;wpspi.h&gt; <br> <br>#include "wbpost.h" <br> <br>//global buffer for holding the error message <br>TCHARg_rgchErr[MAX_PATH]; <br> <br>//you can always call WpGetErrorString to get the full error string text. <br>VOID <br>GetErrorString(LONG lErr) <br>{ <br>DWORDdwErr; <br>LONGlRet; <br> <br>dwErr=MAX_PATH; <br> <br>lRet=WpGetErrorString( <br>(UINT)lErr,//uErrCode <br>(LPTSTR)g_rgchErr,//sOutputBuf <br>&amp;dwErr);//pdwBufLen <br> <br>if(FAILED(lRet)) <br>g_rgchErr[0]=NULL; <br> <br>return; <br>} <br> <br>LONG <br>SimpleWebPost( LPTSTR lpszFileName ) <br>{ <br>LONG lRet; <br> <br>_tprintf("Calling WpPost(...,%s,...)\n", lpszFileName); <br> <br>lRet = WpPost(NULL,// hWin <br>1,// count of files <br>&amp;lpszFileName,// file list <br>NULL,// lpcbSiteName <br>NULL,// lpszSiteName <br>NULL,// lpcbURL <br>NULL,// lpszURL <br>0 );// flags <br> <br>GetErrorString(lRet); <br> <br>_tprintf("WpPost returned 0x%x which means %s\n", lRet, g_rgchErr); <br> <br>return lRet; <br>} <br> <br>LONG <br>EnumProviders() <br>{ <br>static TCHARbuffer[8192]; <br>LPWPPROVINFOlpbProv; <br>DWORDcProv, cbProv, lRet, i; <br> <br>cbProv=sizeof(buffer); <br>cProv=0; <br>lpbProv=(LPWPPROVINFO)buffer; <br> <br>printf("Calling WpEnumProviders()\n"); <br> <br>lRet=WpEnumProviders(&amp;cbProv,//pdwProvidersBufLen <br>lpbProv,//pProvidersBuffer <br>&amp;cProv);//pdwNumProviders <br> <br>GetErrorString(lRet); <br> <br>_tprintf("WpEnumProviders() returned 0x%x which means %s\n", lRet, g_rgchErr); <br> <br>if(lRet) <br>return lRet; <br> <br>printf("Total Providers: %d\n", cProv); <br> <br>for(i=0; i&lt;cProv; i++, lpbProv++) <br>{ <br>_tprintf("%d, Name =%s\n", i, lpbProv-&gt;lpszProviderName); <br>_tprintf("   CLSID=%s\n", lpbProv-&gt;lpszProviderCLSID); <br>_tprintf("   Path =%s\n", lpbProv-&gt;lpszDllPath); <br>} <br> <br>return lRet; <br>} <br> <br> <br>LONG <br>ListSites() <br>{ <br>static TCHARbuffer[8192]; <br>LPWPSITEINFOlpbSites; <br>DWORDcSites, cbSites, lRet, i; <br> <br>cbSites = sizeof( buffer ); <br>cSites = 0; <br>lpbSites = (LPWPSITEINFO) buffer; <br> <br>printf("Calling WpListSites()\n"); <br> <br>lRet = WpListSites( &amp;cbSites, lpbSites, &amp;cSites ); <br> <br>GetErrorString(lRet); <br> <br>_tprintf("WpListSites() returned 0x%x which means %s\n", lRet, g_rgchErr); <br> <br>if (lRet) <br>return lRet; <br> <br>printf("Total Sites: %d\n", cSites); <br> <br>for (i = 0; i &lt; cSites; i++, lpbSites++) <br>_tprintf("%d. SiteName=%s\n", i, lpbSites-&gt;lpszSiteName); <br> <br>return lRet; <br>} <br> <br>// <br>// The next function illustrates getting a pointer to the web post <br>// provider's interface and calling the functions in that interface. <br>// <br> <br>LONG <br>AdvancedWebPost( LPTSTR lpszSiteName, LPTSTR lpszFileName ) <br>{ <br>LONGcbURL = 0; <br>LONGlRet; <br>LONGlErrType; <br>LONGlErrBufLen; <br> <br>WCHARrgwchFileName[MAX_PATH]; <br>WCHARrgwchError[MAX_PATH]; <br>LPWSTRlpwFileName; <br> <br>IWPProvider*lpSite = NULL; <br> <br>_tprintf("Calling WpBindToSite(..., %s, ...)\n", lpszSiteName); <br> <br>lRet = WpBindToSite(NULL,// hWin <br>lpszSiteName, <br>NULL,// lpszURL <br>0,// fdwFlags <br>0,// dwReserved <br>(PVOID *)&amp;lpSite );// Interface pointer <br> <br>GetErrorString(lRet); <br> <br>_tprintf("WpBindToSite returned 0x%x which means %s\n", lRet, g_rgchErr); <br> <br>if (lRet) <br>return lRet; <br> <br>//note that both the old IWPSite interface and the IWPProvider interface <br>//are unicode only. <br> <br>lRet = lpSite-&gt;NetworkConnect(NULL, NULL); <br>printf("NetworkConnect returned 0x%x\n", HRESULT_CODE(lRet)); <br>if (lRet) <br>goto cleanup; <br> <br>lRet = lpSite-&gt;ServerLogin(NULL, NULL); <br>printf("ServerLogin returned 0x%x\n", HRESULT_CODE(lRet)); <br>if (lRet) <br>goto cleanup; <br> <br>_tprintf("Calling PostFiles(...,%s,..)\n", lpszFileName); <br> <br>#ifdef _UNICODE <br>lpwFileName=lpszFileName; <br>#else <br>MultiByteToWideChar(CP_ACP, 0, lpszFileName, lstrlenA(lpszFileName), rgwchFileName, MAX_PATH); <br>lpwFileName=rgwchFileName; <br>#endif <br> <br>lRet = lpSite-&gt;PostFiles(1,// cLocalPaths <br>&amp;lpwFileName,//this has to be unicode <br>&amp;cbURL,// lpcbURL <br>NULL,// lpszURL <br>0 );// fdwFlags <br> <br>lErrType=0; <br>lErrBufLen=MAX_PATH; <br>lpSite-&gt;GetError( <br>&amp;lErrType,//pdwErrorType <br>&amp;lRet,//pdwErrorCode <br>&amp;lErrBufLen,//pdwErrorBufLen <br>rgwchError);//wsError <br> <br>wprintf(L"PostFiles returned 0x%x which means %s\n", HRESULT_CODE(lRet), rgwchError); <br> <br>lRet = lpSite-&gt;ServerLogout(); <br>printf("ServerLogout returned 0x%x\n", HRESULT_CODE(lRet)); <br>if (lRet) <br>goto cleanup; <br> <br>lRet = lpSite-&gt;NetworkDisconnect(); <br>printf("NetworkDisconnect returned 0x%x\n", HRESULT_CODE(lRet)); <br> <br>cleanup: <br>lRet = lpSite-&gt;Release(); <br>printf("Release returned 0x%x\n", HRESULT_CODE(lRet)); <br> <br>return lRet; <br>} <br> <br>void <br>usage(void) <br>{ <br>printf("Usage: wbpost [-s sitename] [filename]\n"); <br>printf("       wbpost -l\t: lists the web sites\n"); <br>printf("       wbpost -e\t: numerates the available providers\n"); <br>exit(1); <br>} <br> <br>int __cdecl <br>main(int argc, char *argv[]) <br>{ <br>LPTSTRlpszSiteName = NULL, lpszFileName = NULL; <br>intfList = 0; <br>intfEnum = 0; <br>LONGlRet; <br>charc; <br> <br>#ifdef _UNICODE <br>WCHARrgwch[MAX_PATH]; <br>#endif <br> <br>// parse the arguments <br> <br>while (--argc &gt; 0 &amp;&amp; (*++argv)[0] == '-') <br>if (c = *++argv[0]) <br>switch (c) { <br>case 'l': <br>fList = 1; <br>break; <br>case 'e': <br>fEnum = 1; <br>break; <br>case 's': <br>if (--argc) { <br>#ifdef _UNICODE <br>MultiByteToWideChar(CP_ACP, 0, *++argv, lstrlenA(*argv), rgwch, MAX_PATH); <br>lpszSiteName=rgwch; <br>#else <br>lpszSiteName = *++argv; <br>#endif <br>} <br>break; <br>default: <br>printf("Error: illegal option %c\n", c); <br>usage(); <br>break; <br>} <br>if (argc == 1) { <br>#ifdef _UNICODE <br>MultiByteToWideChar(CP_ACP, 0, *argv, lstrlenA(*argv), rgwch, MAX_PATH); <br>lpszFileName=rgwch; <br>#else <br>lpszFileName = *argv; <br>#endif <br>argc--; <br>} <br> <br>if (argc) <br>usage(); <br> <br>// call the apis <br> <br>if (fList) <br>lRet = ListSites(); <br>else if (fEnum) <br>lRet = EnumProviders(); <br>else if (lpszSiteName) <br>lRet = AdvancedWebPost(lpszSiteName, lpszFileName); <br>else <br>lRet = SimpleWebPost(lpszFileName); <br> <br>return lRet; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

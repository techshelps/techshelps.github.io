<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4294"></a>README.TXT</h2>
<pre><code>Important <br>========= <br> <br>The key "HKEY_LOCAL_MACHINE\Software\Microsoft\Java VM\Debug" must exist to <br>enable debugging under the Microsoft Java VM.  You can create this key <br>programmatically.  You will probably not want to run with this key except when <br>debugging since it disables the JIT compiler, and invokes a slower than normal <br>version of the bytecode interpreter loop.  You can delete it using RegEdit.exe. <br>The debugger samples create this key themselves to enable debugging. <br> <br>Files of special interest are preceded by "***". <br> <br> <br>Files <br>===== <br> <br>Debugger\ <br>    Java debugger sample code. <br> <br>    JavaDbg.idl <br>        An IDL description of the debugger interfaces. <br> <br>*** ReadMe.txt <br>        This file. <br> <br>    C++ Debugger\ <br>        Source files for Win32 C++ debugger sample console application <br>        JDebug.exe. <br> <br>        GUIDs.cpp <br>            GUIDs used by the C++ debugger sample. <br> <br>***     JDebug.bat <br>            Runs the C++ debugger sample on "Hello, world" applet. <br> <br>***     JDebug.cpp <br>            C++ debugger sample. <br> <br>        JDebug.ico <br>            Sample icon. <br> <br>        JDebug.mak <br>            MS Developer's studio makefile. <br> <br>        JDebug.rc <br>            MS Developer's studio resource file. <br> <br>        Project.hpp <br>            Common project header file. <br> <br>        RefCount.hpp <br>            Simple COM reference counting class. <br> <br>        Resource.h <br>            MS Developer's studio resource header file. <br> <br>        Release\ <br>            Built release C++ debugger sample binaries. <br> <br>            JDebug.exe <br>                Release Win32 C++ debugger sample console application. <br> <br>    Hello\ <br>        Simple "Hello, world" sample Java debuggee applet. <br> <br>        Hello.bat <br>            Runs Hello under JView.exe. <br> <br>        Hello.class <br>            "Hello, world" Java class file. <br> <br>        Hello.java <br>            "Hello, world" Java source file. <br> <br>    Java Debugger\ <br>        Source files for Java debugger sample application JavaDebugger.class. <br> <br>***     JavaDebugger.java <br>            Java debugger Java source. <br> <br>        DebuggeeProcess.java <br> <br>        DebuggeeProcess.class <br>        JavaDebugger.class <br>            Java debugger .class files. <br> <br>        JDbgHlpr.dll <br>            Java debugger helper classes' native method implementations. <br> <br>***     JDebug.bat <br>            Runs the Java debugger sample on "Hello, world" applet. <br> <br>        com\ms\debug\ <br> <br>            *.class <br>                Java debugger interface and helper .class files. <br> <br>        Helpers\ <br>            Source code for Java debugger helper classes. <br> <br>            ConstantPoolHelper.java <br>            EnumRemoteBooleanValueHelper.java <br>            EnumRemoteDoubleValueHelper.java <br>            EnumRemoteFloatValueHelper.java <br>            LockBytesHelper.java <br>            RemoteBooleanObjectHelper.java <br>            RemoteDoubleObjectHelper.java <br>            RemoteFloatObjectHelper.java <br>                Java debugger helper Java source.  Not all parameter types used <br>                by the debugger interfaces can be automatically marshaled by <br>                the current Java VM.  These classes and their native methods <br>                allow a Java debugger to use all the Java debugger interfaces <br>                supported by the Java VM.  The native methods of these classes <br>                are implemented in jdbghlpr.dll.  The need for at least some of <br>                these classes will be removed in future releases of the Java VM. <br> <br>            JDbgHlpr\ <br>                MS Developer's Studio source project for JDbgHlpr.dll. <br> <br>                *.h <br>                    C header files describing Java class objects.  Generated by <br>                    MSJavaH. <br> <br>                Helpers.cpp <br>                    Native methods for Java debugger interface helper classes. <br> <br>                JDbgHlpr.cpp <br>                    DLL entry point. <br> <br>                JDbgHlpr.def <br>                    Module definition file. <br> <br>                JDbgHlpr.mak <br>                    MS Developer's studio makefile. <br> <br>                JDbgHlpr.rc <br>                    MS Developer's studio resource file. <br> <br>                Process.cpp <br>                    Native methods for DebuggeeProcess. <br> <br>                Project.hpp <br>                    Common project header file. <br> <br>                Resource.h <br>                    MS Developer's studio resource header file. <br> <br>        Prototypes\ <br>            Method prototypes for Java debugger interfaces. <br> <br>            *.java <br>                Java shorthand source files describing debugger interface <br>                semantics for Java.  These are not the actual Java files used <br>                to generate the com\ms\debug .class files.  Those .class files <br>                contain additional COM marshaling information not present in <br>                these Java source files.  These Java source files are provided <br>                to briefly describe the semantics of the debugger interfaces <br>                under Java to developers. <br> <br> <br>Notes <br>===== <br> <br>Java debugging functionality has been defined for the following areas, but not <br>implemented: <br> <br>    1) Passing a debug string from the debuggee to the debugger. <br>        IRemoteProcessCallback::DebugStringEvent() <br> <br>    2) Thread groups. <br>        IEnumRemoteThread <br>        IEnumRemoteThreadGroup <br>        IJavaEnumRemoteThread <br>        IJavaEnumRemoteThreadGroup <br>        IRemoteProcess::GetThreadGroups() <br>        IRemoteProcessCallback::ThreadGroupCreateEvent() <br>        IRemoteProcessCallback::ThreadGroupDestroyEvent() <br>        IRemoteThread::GetThreadGroup() <br>        IRemoteThreadGroup <br> <br>    3) Data breakpoints. <br>        IRemoteObject::ClearBreakpoint() <br>        IRemoteObject::SetBreakpoint() <br>            Including ClearBreakpoint() and SetBreakpoint() of all interfaces <br>            derived from IRemoteObject: <br>                IRemoteArrayObject <br>                IRemoteBooleanObject <br>                IRemoteByteObject <br>                IRemoteCharObject <br>                IRemoteClassObject <br>                IRemoteContainerObject <br>                IRemoteDoubleObject <br>                IRemoteFloatObject <br>                IRemoteIntObject <br>                IRemoteLongObject <br>                IRemoteShortObject <br>        IRemoteProcessCallback::DataBreakpointEvent() <br> <br>Subsequent releases of the Microsoft Java VM may implement these features. <br> <br> <br>Copyright Microsoft Corporation 1996-1997. <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

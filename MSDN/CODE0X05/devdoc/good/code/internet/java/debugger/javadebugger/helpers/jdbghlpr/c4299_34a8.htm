<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROCESS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4310"></a>PROCESS.CPP</h2>
<pre><code>/* <br> * process.cpp - Native methods. <br> * <br> * (C) Copyright 1996 Microsoft Corporation <br> */ <br> <br> <br>/* Headers <br> **********/ <br> <br>#include "project.hpp" <br>#pragma hdrstop <br> <br>#include "DebuggeeProcess.h" <br> <br> <br>/****************************** Public Functions *****************************/ <br> <br> <br>BOOL JavaStringToANSIString(Hjava_lang_String *phjsCommandLine, PSTR *ppszANSI) <br>{ <br>int ncchLen; <br> <br>// (+ 1) for null terminator. <br>    ncchLen = javaStringLength(phjsCommandLine) + 1; <br> <br>    *ppszANSI = (PSTR)LocalAlloc(0, ncchLen); <br> <br>if (*ppszANSI) <br>        javaString2CString(phjsCommandLine, *ppszANSI, ncchLen); <br> <br>    return(*ppszANSI != NULL); <br>} <br> <br> <br>/***************************** Exported Functions ****************************/ <br> <br> <br>/* A debugger requires a way to get the process ID of its debuggee process. */ <br> <br>void __cdecl DebuggeeProcess_CreateSuspendedProcess(HDebuggeeProcess *hdp, Hjava_lang_String *phjsCommandLine) <br>{ <br>    PSTR pszCommandLine; <br> <br>    hdp-&gt;m_nMainThreadHandle = 0; <br>    hdp-&gt;m_nProcessID = 0; <br> <br>if (JavaStringToANSIString(phjsCommandLine, &amp;pszCommandLine)) <br>{ <br>STARTUPINFO si; <br>PROCESS_INFORMATION pi; <br> <br>ZeroMemory(&amp;si, sizeof(si)); <br>si.cb = sizeof(si); <br> <br>        if (CreateProcess(NULL, pszCommandLine, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;si, &amp;pi)) <br>{ <br>hdp-&gt;m_nMainThreadHandle = (int)(pi.hThread); <br>hdp-&gt;m_nProcessID = pi.dwProcessId; <br> <br>            CloseHandle(pi.hProcess); <br>} <br>else <br>SignalError(0, "java/io/IOException", "CreateProcess"); <br> <br>LocalFree(pszCommandLine); <br>        pszCommandLine = NULL; <br>} <br>else <br>SignalError(0, JAVAPKG "OutOfMemoryError", 0); <br> <br>    return; <br>} <br> <br> <br>void __cdecl DebuggeeProcess_ResumeProcess(HDebuggeeProcess *hdp) <br>{ <br>    if (hdp-&gt;m_nMainThreadHandle != NULL) <br>{ <br>        if (ResumeThread((HANDLE)(hdp-&gt;m_nMainThreadHandle)) == 0xffffffff) <br>SignalError(0, "java/io/IOException", "ResumeThread"); <br> <br>CloseHandle((HANDLE)(hdp-&gt;m_nMainThreadHandle)); <br>        hdp-&gt;m_nMainThreadHandle = 0; <br>} <br> <br>return; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4323"></a>README.TXT</h2>
<pre><code>============================================================================ <br>This sample demonstrates Java-&gt;COM and COM-&gt;Java communications. <br> <br>The sample is invoked from Java.  The constructor of the class we invoke  <br>instantiates a COM-implemented object.  Three methods are then exercised. <br> <br>The first two methods take and return numeric arguments.  The third method <br>instantiates a Java-implemented object, and passes the interface pointer back <br>to Java, caching a local copy for its own use later on.  The new java object <br>is then used from both Java and COM transparently.  That is, the COM object <br>treats it no differently than any other COM object, and Java treats it as a <br>Java object. <br> <br>Copyright (c) 1996-1997 Microsoft Corporation.  All rights reserved. <br> <br>---------------------------------------------------------------------------- <br>CONTENTS: <br> <br>odl\                            ** interface descriptions <br>NatCom.odl <br>jNatCom.odl <br> <br>com\                            ** COM server <br>natcom.cpp <br>natcom.def <br>natcom.h <br>makefile <br> <br>java\ <br>_1\                     ** run this to exec sample <br>JMain.java <br>makefile <br> <br>_2\                     ** called from COM and java <br>JMain.java <br>reg.bat <br>makefile <br> <br>---------------------------------------------------------------------------- <br>BUILD INSTRUCTIONS: <br>The executable files that are built from this sample are included, so you do  <br>not need to build the sample in order to run it.  However, the following <br>information is included if you want to build the sample yourself.  <br> <br>Dependencies: <br>  jvc.exe, cpdbase.dll, msjvc.dll, jactivex.exe, javareg.exe. <br>  (All are included in the SDK BIN directory. <br>   JVC.EXE must be version 1.02.3920 or later.) <br> <br>To build from this subdirectory: <br>  nmake /a <br> <br> <br>---------------------------------------------------------------------------- <br>RUNNING THE SAMPLE: <br> <br>  Use the GO.BAT in this subdirectory.  This batch file does the following: <br> <br>  1. Registers the COM server (regsvr32 com\natcom.dll) <br> <br>  2. Registers the Java server (java\_2\reg.bat) <br> <br>  3. Executes JVIEW java._1.JMain <br>     (Note: Your CLASSPATH must include '.' subdirectory) <br> <br>  4. Un-registers the Java server (java\_2\unreg.bat) <br>   <br>  5. Un-registers the COM server (regsvr32 /u com\natcom.dll) <br> <br> <br>---------------------------------------------------------------------------- <br>EXPECTED CONSOLE OUTPUT: <br> <br>2 * 5 = 10 <br>inc.Square(10) = 100 <br>invoked from COM: Hello World <br>invoked from Java: Hello World <br> <br> <br>============================================================================ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

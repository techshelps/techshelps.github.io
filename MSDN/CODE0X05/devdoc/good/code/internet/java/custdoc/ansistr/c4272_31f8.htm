<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSIMARSHALER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4274"></a>ANSIMARSHALER.C</h2>
<pre><code>// Copyright (c) 1997 Microsoft Corporation.  All rights reserved. <br> <br>#pragma hdrstop <br> <br>#define INITGUID 1 <br>#include &lt;windows.h&gt; <br>#include "native.h" // Raw Native Interface declarations. <br> <br> <br>typedef CHAR *PSTR, **PPSTR; <br> <br> <br> <br>#ifdef __cplusplus <br>#define EXTERNC     extern "C" <br>#else <br>#define EXTERNC <br>#endif <br> <br> <br>// Macro for declaring RNI Java methods's (and encapsulating the java class package.) <br>// TODO: Replace "AnsiMarshaler" with the name of your hook class.  <br>#define JAVAMETHOD(typ, name) \ <br>    __declspec(dllexport) \ <br>    EXTERNC \ <br>    typ __cdecl AnsiMarshaler_##name <br> <br> <br>#define LOGCALL(hookname) OutputDebugString("AnsiMarshaler." hookname "() called.\n") <br> <br>// Export that tells what RNI version we were built under. <br>DWORD __cdecl RNIGetCompatibleVersion() <br>{ <br>  return RNIVER; <br>} <br> <br> <br>//========================================================================== <br>// toJava <br>//========================================================================== <br>JAVAMETHOD(HString*, toJava) (OBJECT*x, PPSTR pPSTR, int flags) <br>{ <br>    PSTR pstr = *pPSTR; <br> <br>    LOGCALL("toJava"); <br> <br>    if (pstr == NULL) { <br>        return NULL; <br>    } else { <br>        return makeJavaString(pstr, lstrlen(pstr)); <br>    } <br>} <br> <br> <br> <br> <br>//========================================================================== <br>// toExternal <br>//========================================================================== <br>JAVAMETHOD(void, toExternal) (OBJECT*x, HString* javaval, int flags, PPSTR pPSTR) <br>{ <br>    PSTR pstr = NULL; <br> <br>    LOGCALL("toExternal"); <br> <br>    if (javaval != NULL) { <br> <br>        DWORD len = javaStringLength(javaval); <br>        pstr = (LPSTR)CoTaskMemAlloc(len+1); <br>        if (!pstr) { <br>            SignalErrorPrintf("java/lang/OutOfMemoryError", "Could not allocate from task heap!"); <br>        } else { <br>            char msg[100]; <br>            DWORD i; <br>            unicode *pwc = javaStringStart(javaval); <br> <br>            wsprintf(msg, "Hook created new string at %lxh\n", pstr); <br>            OutputDebugString(msg); <br> <br>            for (i = 0; i &lt; len; i++) { <br>                pstr[i] = (CHAR)(pwc[i]); <br>            } <br>            pstr[i] = '\0'; <br>        } <br> <br>    } <br>    *pPSTR = pstr; <br>} <br> <br> <br>//========================================================================== <br>// releaseExternal <br>//========================================================================== <br>JAVAMETHOD(void, releaseExternal) (OBJECT*x, PPSTR pPSTR, int flags) <br>{ <br>    PSTR pstr = *pPSTR; <br> <br>    LOGCALL("releaseExternal"); <br> <br>    if (pstr) { <br>        char msg[100]; <br>        wsprintf(msg, "Hook freeing string at %lxh\n", pstr); <br>        OutputDebugString(msg); <br> <br>        CoTaskMemFree(pstr); <br>    } <br>} <br> <br> <br> <br> <br> <br>//========================================================================== <br>// TODO: Remove this copy of DllMain if you are embedding this file in your <br>//  own DLL. <br>// DLL Loader entry point. <br>//========================================================================== <br>BOOL WINAPI DllMain(HINSTANCE hmod, DWORD dwReason, <br>                                PVOID pvReserved) <br>{ <br>   return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POINTMARSHALER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4283"></a>POINTMARSHALER.C</h2>
<pre><code>// Copyright (c) 1996-1997  Microsoft Corporation.  All rights reserved. <br> <br>#pragma hdrstop <br> <br>#define INITGUID 1 <br>#include &lt;windows.h&gt; <br>#include "native.h" // Raw Native Interface declarations. <br> <br> <br> <br>typedef POINT *PPOINT, **PPPOINT; <br> <br> <br>typedef OBJECT* JPoint; <br> <br>#ifdef __cplusplus <br>#define EXTERNC     extern "C" <br>#else <br>#define EXTERNC <br>#endif <br> <br> <br>// Macro for declaring RNI Java methods's (and encapsulating the java class package.) <br>#define JAVAMETHOD(typ, name) \ <br>    __declspec(dllexport) \ <br>    EXTERNC \ <br>    typ __cdecl PointMarshaler_##name <br> <br> <br> <br>#define LOGCALL(hookname) OutputDebugString("PointMarshaler." hookname "() called.\n") <br> <br> <br>// Export that tells what RNI version we were built under. <br>DWORD __cdecl RNIGetCompatibleVersion() <br>{ <br>  return RNIVER; <br>} <br> <br> <br>// Cache the various class and fields we will need. <br>ClassClass*         gPointClass; <br>struct fieldblock*  gPointXField; <br>struct fieldblock*  gPointYField; <br> <br> <br> <br>//========================================================================== <br>// toJava <br>//========================================================================== <br>JAVAMETHOD(JPoint, toJava) (OBJECT*x, PPPOINT ppPOINT, int flags) <br>{ <br>    PPOINT pPOINT = *ppPOINT; <br>    JPoint jpoint; <br> <br>    LOGCALL("toJava"); <br> <br>    jpoint = execute_java_constructor(NULL, NULL, gPointClass, "(II)", pPOINT-&gt;x, pPOINT-&gt;y); <br>    return jpoint; <br>} <br> <br> <br>//========================================================================== <br>// copyToExternal <br>//========================================================================== <br>JAVAMETHOD(void, copyToExternal) (OBJECT*x, JPoint javaval, PPPOINT ppPOINT, int flags) <br>{ <br>    PPOINT pPOINT = *ppPOINT; <br> <br>    LOGCALL("copyToExternal"); <br> <br>    pPOINT-&gt;x = Field_GetInt(javaval, gPointXField); <br>    pPOINT-&gt;y = Field_GetInt(javaval, gPointYField); <br> <br>} <br> <br> <br> <br> <br>//========================================================================== <br>// copyToJava <br>//========================================================================== <br>JAVAMETHOD(void, copyToJava) (OBJECT*x, PPPOINT ppPOINT, JPoint javaval, int flags) <br>{ <br>    PPOINT pPOINT = *ppPOINT;    \ <br> <br>    LOGCALL("copyToJava"); <br> <br> <br>    Field_SetInt(javaval, gPointXField, pPOINT-&gt;x); <br>    Field_SetInt(javaval, gPointYField, pPOINT-&gt;y); <br> <br>} <br> <br> <br>//========================================================================== <br>// toUninitJava <br>//========================================================================== <br>JAVAMETHOD(JPoint, toUninitJava) (OBJECT*x, PPPOINT ppPOINT, int flags) <br>{ <br>    JPoint jpoint; <br> <br>    LOGCALL("toUninitJava"); <br> <br>    jpoint = execute_java_constructor(NULL, NULL, gPointClass, "(II)", -1, -1); <br>    return jpoint; <br>} <br> <br> <br> <br> <br> <br>//========================================================================== <br>// TODO: Remove this copy of DllMain if you are embedding this file in your <br>//  own DLL. <br>// DLL Loader entry point. <br>//========================================================================== <br>BOOL WINAPI DllMain(HINSTANCE hmod, DWORD dwReason, <br>                                PVOID pvReserved) <br>{ <br>   return TRUE; <br>} <br> <br> <br> <br>//========================================================================== <br>// classInit (one time initialization routine) <br>//========================================================================== <br>JAVAMETHOD(void, classInit) (OBJECT*x) <br>{ <br>    gPointClass = FindClass(NULL, "java/awt/Point", TRUE); <br>    if (!gPointClass) { <br>        SignalErrorPrintf("java/lang/ClassNotFoundException", "Could not preload java.awt.Point class!"); <br>    } <br> <br>    gPointXField = Class_GetField(gPointClass, "x"); <br>    if (!gPointXField) { <br>        SignalErrorPrintf("java/lang/ClassNotFoundException", "Bogus java.awt.Point class!"); <br>    } <br> <br>    gPointYField = Class_GetField(gPointClass, "y"); <br>    if (!gPointYField) { <br>        SignalErrorPrintf("java/lang/ClassNotFoundException", "Bogus java.awt.Point class!"); <br>    } <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEMPLATEMARSHALER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4290"></a>TEMPLATEMARSHALER.C</h2>
<pre><code>// Copyright (c) 1996-1997  Microsoft Corporation.  All rights reserved. <br> <br>#pragma hdrstop <br> <br>#include &lt;windows.h&gt; <br>#include "native.h" // Raw Native Interface declarations. <br> <br> <br>// TODO: Replace this typedef with your own definition of ETYPE, and/or replace <br>// all occurrences of ETYPE, PETYPE and PPETYPE with your own type. <br>typedef struct { <br>    int dummy; <br>} ETYPE; <br> <br>typedef ETYPE *PETYPE, **PPETYPE; <br> <br> <br>// TODO: Define JTYPE with the appropriate type. <br>// <br>//   If your Java type is           replace JTYPE with <br>//   --------------------           ------------------ <br>//   byte                           char            (see below) <br>//   char                           unsigned short  (see below) <br>//   short                          short           (see below) <br>//   int                            int <br>//   long                           long <br>//   boolean                        BOOL <br>//   float                          float <br>//   double                         double <br>//   an object type                 OBJECT* or output of msjavah.exe <br>//   an array                       HArrayOf&lt;elemtype&gt; (see native.h or <br>//                                   output of msjavah) <br>// <br>// <br>//  IMPORTANT NOTE: <br>//     If your java type is byte, char, or short, the return types <br>//     of toJava and toUninitJava must be declared as "int" and your <br>//     C function must expand the result to a full 32-bit signed integer <br>//     (RNI does not expand short integer return values on your behalf) <br>// <br>//     If your java tyoe is boolean, your C function must return <br>//     0 or 1 only (RNI does not normalize boolean return values.) <br>// <br> <br>typedef int JTYPE; <br> <br> <br>#ifdef __cplusplus <br>#define EXTERNC     extern "C" <br>#else <br>#define EXTERNC <br>#endif <br> <br> <br>// Macro for declaring RNI Java methods's (and encapsulating the java class package.) <br>// TODO: Replace "TemplateMarshaler" with the name of your hook class.  <br>#define JAVAMETHOD(typ, name) \ <br>    __declspec(dllexport) \ <br>    EXTERNC \ <br>    typ __cdecl TemplateMarshaler_##name <br> <br> <br>// This export tells what RNI version we were built under.  This is a <br>// NEW REQUIREMENT that was not needed for previous versions of the VM. <br>// DO NOT REMOVE THIS FUNCTION.  Without it, the VM will be unable to <br>// access your hook classes.    <br>DWORD __cdecl RNIGetCompatibleVersion() <br>{ <br>  return RNIVER; <br>} <br> <br> <br>//========================================================================== <br>// toJava <br>//========================================================================== <br>JAVAMETHOD(JTYPE, toJava) (OBJECT*x, PPETYPE ppetype, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br>    // TODO: Add code to convert *petype to a value of type JTYPE. <br>    // If JTYPE is an object or array type, this method should return <br>    // a newly created instance of JTYPE. <br>    return 0; <br>} <br> <br> <br>//========================================================================== <br>// copyToExternal <br>//========================================================================== <br>JAVAMETHOD(void, copyToExternal) (OBJECT*x, JTYPE javaval, PPETYPE ppetype, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br>    // TODO: Add code to convert javaval into an ETYPE and store the resulting <br>    // ETYPE in the (already allocated) memory pointed to by petype. Do <br>    // not assume anything about the initial contents of *petype. <br>} <br> <br> <br>//========================================================================== <br>// releaseByValExternal <br>//========================================================================== <br>JAVAMETHOD(void, releaseByValExternal) (OBJECT*x, PPETYPE ppetype, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br>    // TODO: Add code to destroy any embedded resources owned by *petype. <br>    // Do not free the memory for *petype itself (if you need to do this, <br>    // do it in releaseExternal()). <br>    // <br>    // If no cleanup code is needed here, this method can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>} <br> <br> <br>//========================================================================== <br>// copyToJava <br>//========================================================================== <br>JAVAMETHOD(void, copyToJava) (OBJECT*x, PPETYPE ppetype, JTYPE javaval, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br>    // TODO: Add code to modify "javaval" so it is 'equivalent' to *petype. <br>    // Do not modify *petype or *ppetype. <br>    // If JTYPE is not mutable, or you do not need to support "[out]" <br>    // parameters, this method can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>} <br> <br> <br>//========================================================================== <br>// toUninitJava <br>//========================================================================== <br>JAVAMETHOD(JTYPE, toUninitJava) (OBJECT*x, PPETYPE ppetype, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br>    // TODO: Add code to convert *petype to an uninitialized value of <br>    // type JTYPE. <br>    // If JTYPE is an object or array type, this method should return <br>    // a newly created instance of JTYPE. <br>    // If JTYPE is not mutable, or you do not need to support "[out]" <br>    // parameters, this method can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>    return 0; <br>} <br> <br> <br>//========================================================================== <br>// toExternal <br>//========================================================================== <br>JAVAMETHOD(void, toExternal) (OBJECT*x, JTYPE javaval, int flags, PPETYPE ppetype) <br>{ <br>    PETYPE petype = NULL; <br>    // TODO: Add code to allocate a new ETYPE, and initialize it to be <br>    // "equivalent" to javaval. Store a pointer to the new ETYPE in petype. <br>    // If you do not require ETYPE's that outlive method calls, this method <br>    // can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>    *ppetype = petype; <br>} <br> <br> <br>//========================================================================== <br>// releaseExternal <br>//========================================================================== <br>JAVAMETHOD(void, releaseExternal) (OBJECT*x, PPETYPE ppetype, int flags) <br>{ <br>    PETYPE petype = *ppetype; <br> <br>    // TODO: Add code to free the memory pointed to by petype. In addition, <br>    // if you have implemented releaseByValExternal, call it first. <br>    // <br>    // If you do not require ETYPE's that outlive method calls, this method <br>    // can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>} <br> <br> <br>//========================================================================== <br>// toUninitExternal <br>//========================================================================== <br>JAVAMETHOD(void, toUninitExternal) (OBJECT*x, JTYPE javaval, int flags, PPETYPE ppetype) <br>{ <br>    PETYPE petype = NULL; <br>    // TODO: Add code to allocate a new ETYPE. It is not necessary to initialize <br>    // its contents. The value of javaval should be used only to determine <br>    // the size of the allocation. <br>    // If you do not require ETYPE's that outlive method calls, or you do not <br>    // need to support [out] parameters, this method can be deleted. <br>    // (do not forget to remove the reference to in the .def file.) <br>    *ppetype = petype; <br>} <br> <br> <br> <br> <br>//========================================================================== <br>// TODO: Remove this copy of DllMain if you are embedding this file in your <br>//  own DLL. <br>// DLL Loader entry point. <br>//========================================================================== <br>BOOL WINAPI DllMain(HINSTANCE hmod, DWORD dwReason, <br>                                PVOID pvReserved) <br>{ <br>   return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VARSTRMARSHALER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4293"></a>VARSTRMARSHALER.C</h2>
<pre><code>//===================================================================== <br>// Sample Java/COM Marshaling Hook Class. <br>// <br>// Java Type:  String <br>// Com  Type:  VARIANT (BSTR type). <br>//  <br>// Copyright (c) 1996-1997  Microsoft Corporation.  All rights reserved. <br>//===================================================================== <br> <br> <br> <br> <br>#pragma hdrstop <br> <br>#include &lt;windows.h&gt; <br>#include "native.h" // Raw Native Interface declarations. <br> <br> <br> <br>typedef VARIANT *PVARIANT, **PPVARIANT; <br> <br> <br> <br>#ifdef __cplusplus <br>#define EXTERNC     extern "C" <br>#else <br>#define EXTERNC <br>#endif <br> <br> <br>// Macro for declaring RNI Java methods's (and encapsulating the java class package.) <br>#define JAVAMETHOD(typ, name) \ <br>    __declspec(dllexport) \ <br>    EXTERNC \ <br>    typ __cdecl VarStrMarshaler_##name <br> <br>// Export that tells what RNI version we were built under. <br>DWORD __cdecl RNIGetCompatibleVersion() <br>{ <br>  return RNIVER; <br>} <br> <br> <br>#define LOGCALL(hookname) OutputDebugString("VarStrMarshaler." hookname "() called.\n") <br> <br> <br>//========================================================================== <br>// toJava <br>//========================================================================== <br>JAVAMETHOD(HString*, toJava) (OBJECT*x, PPVARIANT ppVARIANT, int flags) <br>{ <br>    VARIANT *pvar = *ppVARIANT; <br> <br>    LOGCALL("toJava"); <br> <br>     <br>    if (pvar-&gt;vt != VT_BSTR) { <br>        // Could try to coerce the variant, but this is just an example. <br>        SignalErrorPrintf("java/lang/IllegalArgumentException", <br>                          "Variant is of wrong type (must be VT_BSTR.)"); <br>    } else { <br>        return makeJavaStringW(pvar-&gt;bstrVal, SysStringLen(pvar-&gt;bstrVal)); <br>    } <br>} <br> <br> <br>//========================================================================== <br>// copyToExternal <br>//========================================================================== <br>JAVAMETHOD(void, copyToExternal) (OBJECT*x, HString* javaval, PPVARIANT ppVARIANT, int flags) <br>{ <br>    PVARIANT pVARIANT = *ppVARIANT; <br>    BSTR bstr; <br> <br>    LOGCALL("copyToExternal"); <br> <br>    if (!javaval) { <br>        SignalErrorPrintf("java/lang/NullPointerException", "Null string not allowed."); <br>    } else { <br>        bstr = SysAllocStringLen(javaStringStart(javaval), <br>                                 (UINT)(javaStringLength(javaval))); <br>     <br>     <br>        if (!bstr) { <br>            SignalErrorPrintf("java/lang/OutOfMemoryError", "Not enough room in BSTR system heap."); <br>        } else { <br>     <br>            char msg[100]; <br>            wsprintf(msg, "Hook class allocated BSTR at %lxh\n", bstr); <br>            OutputDebugString(msg); <br>     <br>            // We explicitly do NOT call VariantClear before overwriting the variant. <br>            // That is the job of releaseByValExternal, which will be called when needed. <br>            pVARIANT-&gt;vt      = VT_BSTR; <br>            pVARIANT-&gt;bstrVal = bstr; <br>        } <br>    } <br> <br>} <br> <br> <br>//========================================================================== <br>// releaseByValExternal <br>//========================================================================== <br>JAVAMETHOD(void, releaseByValExternal) (OBJECT*x, PPVARIANT ppVARIANT, int flags) <br>{ <br>    PVARIANT pVARIANT = *ppVARIANT; <br> <br>    LOGCALL("releaseByValExternal"); <br>    if (pVARIANT-&gt;vt == VT_BSTR) { <br>        char msg[100]; <br>        wsprintf(msg, "Hook class freeing BSTR at %lxh\n", pVARIANT-&gt;bstrVal); <br>        OutputDebugString(msg); <br> <br>        SysFreeString(pVARIANT-&gt;bstrVal); <br>    } <br>} <br> <br> <br> <br>//========================================================================== <br>// TODO: Remove this copy of DllMain if you are embedding this file in your <br>//  own DLL. <br>// DLL Loader entry point. <br>//========================================================================== <br>BOOL WINAPI DllMain(HINSTANCE hmod, DWORD dwReason, <br>                                PVOID pvReserved) <br>{ <br>   return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

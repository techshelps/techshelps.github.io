<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>JAVAPROP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4317"></a>JAVAPROP.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996  Microsoft Corporation <br> <br>Module Name: <br> <br>    cresprop.cpp <br> <br>Abstract: <br> <br>    Implements the CEnumResourceJAVAPROPERTY class. <br> <br>--*/ <br> <br>#pragma hdrstop <br> <br>#include &lt;windows.h&gt; <br>#include "javaprop.hpp" <br> <br>// Construct a new, empty property enumerator. <br> <br>CEnumJAVAPROPERTY::CEnumJAVAPROPERTY() <br>{ <br>    m_cRef = 1; <br> <br>    m_pPropList   = NULL; <br>    m_pCurProp    = NULL; <br>    m_cProperties = 0; <br>} <br> <br>CEnumJAVAPROPERTY::~CEnumJAVAPROPERTY() <br>{ <br>    LPJAVAPROPLink pProp = m_pPropList; <br>    LPJAVAPROPLink pPropTmp; <br>     <br>    // Walk down the list of properties freeing each node. <br> <br>    while (pProp) <br>    { <br>        if (pProp-&gt;pszKey)   delete(pProp-&gt;pszKey); <br>        if (pProp-&gt;pszValue) delete(pProp-&gt;pszValue); <br>         <br>        pPropTmp = pProp; <br>        pProp    = pProp-&gt;pNext; <br> <br>        delete(pPropTmp); <br>    } <br>} <br> <br>STDMETHODIMP <br>CEnumJAVAPROPERTY::QueryInterface(REFIID riid, LPVOID *ppvObj) <br>{ <br>    HRESULT hr; <br> <br>    if (riid == IID_IEnumJAVAPROPERTY || riid == IID_IUnknown) { <br>        *ppvObj = (LPENUMJAVAPROPERTY) this; <br>        m_cRef++; <br>        hr = S_OK; <br>    } else { <br>        *ppvObj = NULL; <br>        hr = E_NOINTERFACE; <br>    } <br> <br>    return hr; <br>} <br> <br>STDMETHODIMP_(ULONG) <br>CEnumJAVAPROPERTY::AddRef() <br>{ <br>    m_cRef++; <br> <br>    return m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) <br>CEnumJAVAPROPERTY::Release() <br>{ <br>    m_cRef--; <br> <br>    if (m_cRef &gt; 0) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>} <br> <br>STDMETHODIMP <br>CEnumJAVAPROPERTY::Next(ULONG celt, LPJAVAPROPERTY rgelt, ULONG <br>    *pceltFetched) <br>{ <br>    HRESULT hr; <br>    ULONG celtFetched; <br> <br>    hr = S_OK; <br>    celtFetched = 0; <br> <br>    while (hr == S_OK &amp;&amp; celtFetched &lt; celt) { <br> <br>        if (m_pCurProp == NULL) { <br>            hr = S_FALSE; <br>            break; <br>        } <br> <br>        // Copy the value. <br> <br>        rgelt-&gt;pszValue = (LPOLESTR) <br>            CoTaskMemAlloc((lstrlenW(m_pCurProp-&gt;pszValue) + 1) * <br>            sizeof(OLECHAR)); <br> <br>        if (rgelt-&gt;pszValue != NULL) { <br>            wcscpy(rgelt-&gt;pszValue, m_pCurProp-&gt;pszValue); <br>        } else { <br>            hr = E_OUTOFMEMORY; <br>        } <br> <br>        // Copy the key. <br> <br>        if (hr == S_OK)  <br>        { <br> <br>            rgelt-&gt;pszKey = (LPOLESTR) <br>                CoTaskMemAlloc((lstrlenW(m_pCurProp-&gt;pszKey) + 1) * <br>                sizeof(OLECHAR)); <br> <br>            if (rgelt-&gt;pszKey != NULL) { <br> <br>                wcscpy(rgelt-&gt;pszKey, m_pCurProp-&gt;pszKey); <br> <br>                rgelt++; <br>                m_pCurProp = m_pCurProp-&gt;pNext; <br>                celtFetched++; <br> <br>            } else { <br>                CoTaskMemFree(rgelt-&gt;pszValue); <br>                hr = E_OUTOFMEMORY; <br>            } <br>        } <br>    } <br> <br>    if (pceltFetched != NULL) <br>        *pceltFetched = celtFetched; <br> <br>    return hr; <br>} <br> <br>STDMETHODIMP <br>CEnumJAVAPROPERTY::Skip(ULONG celt) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    while ( celt &gt; 0 ) <br>    { <br>        if ( m_pCurProp-&gt;pNext == NULL ) <br>        { <br>            hr = S_FALSE; <br>            break; <br>        } <br> <br>        m_pCurProp = m_pCurProp-&gt;pNext; <br>        celt--; <br>    } <br> <br>    return hr; <br>} <br> <br>STDMETHODIMP <br>CEnumJAVAPROPERTY::Reset() <br>{ <br>    m_pCurProp = m_pPropList; <br>    return S_OK; <br>} <br> <br>STDMETHODIMP <br>CEnumJAVAPROPERTY::Clone(LPENUMJAVAPROPERTY *ppenum) <br>{ <br>    return E_NOTIMPL; <br>} <br> <br>// Add a property to the list of properties.  The string parameter is <br>// expected to be of the form &lt;key&gt;=&lt;value&gt;. <br> <br>BOOL CEnumJAVAPROPERTY::Add(char *pszKeyAndValue) <br>{ <br>    char *pszKey = pszKeyAndValue; <br>    char *pszVal = pszKey; <br>    int   cchUnicode; <br> <br>    if ( *pszKey == '\0' ) <br>        return FALSE; <br> <br>    // Walk down the string looking for the '=' that seperates the key <br>    // and value. <br>    while ( *pszVal &amp;&amp; *pszVal != '=' ) <br>        pszVal++; <br> <br>    if ( *pszVal == '=' ) { <br>       *pszVal = '\0'; <br>       pszVal++; <br>    } <br> <br>    // Create a new node for our linked list. <br>    LPJAVAPROPLink pProp = new(JAVAPROPLink); <br> <br>    if ( !pProp ) <br>        return FALSE; <br> <br>    // We want to keep track of the key and value strings as unicode.   <br>    // Convert them and stash them off into the property node. <br>     <br>    // Convert the key. <br> <br>    cchUnicode = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, pszKey, -1,  <br>                                     NULL, 0); <br> <br>    pProp-&gt;pszKey = new(OLECHAR[cchUnicode]); <br> <br>    if ( !pProp-&gt;pszKey ) <br>    { <br>        delete(pProp); <br>        return FALSE; <br>    } <br> <br>    MultiByteToWideChar(CP_ACP,MB_PRECOMPOSED,pszKey,-1,pProp-&gt;pszKey, <br>                        cchUnicode); <br> <br>    // Convert the value. <br> <br>    cchUnicode = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, pszVal,  <br>                                     -1, NULL, 0); <br> <br>    pProp-&gt;pszValue = new(OLECHAR[cchUnicode]); <br> <br>    if ( !pProp-&gt;pszValue ) <br>    { <br>        delete(pProp-&gt;pszKey); <br>        delete(pProp); <br>        return FALSE; <br>    } <br> <br>    MultiByteToWideChar(CP_ACP,MB_PRECOMPOSED,pszVal,-1,pProp-&gt;pszValue, <br>                        cchUnicode); <br> <br>    // Link the new node into the list. <br> <br>    pProp-&gt;pNext = m_pPropList; <br>    m_pPropList  = pProp; <br>    m_pCurProp   = m_pPropList; <br> <br>    return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

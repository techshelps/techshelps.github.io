<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RNISAMP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4329"></a>RNISAMP.CPP</h2>
<pre><code>// rnisamp.cpp <br>// <br>// Created 09/08/97 <br>// <br>// (C)Copyright 1997 Microsoft Corporation, All rights reserved. <br>// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;native.h&gt; <br> <br>#include "rnisamp.h" <br> <br>typedef struct Hjava_lang_SecurityManager HSecurity; <br> <br> <br>__declspec(dllexport) <br>DWORD __cdecl RNIGetCompatibleVersion() <br>{ <br>    return RNIVER; <br>} <br> <br> <br>__declspec(dllexport) <br>struct HArrayOfByte * __cdecl rnisamp_MyRNIObject_RNICheckedLoad ( <br>    struct Hrnisamp_MyRNIObject *_jthis, <br>    struct Hjava_lang_String *_jfilename <br>    ) <br>{ <br>    GCFrame gcf; <br>    struct { <br>        Hrnisamp_MyRNIObject *jthis; <br>        HString *jfilename; <br>    } gc; <br>    GCFramePush(&amp;gcf, &amp;gc, sizeof(gc)); <br>    gc.jthis = _jthis; <br>    gc.jfilename = _jfilename; <br> <br>    HSecurity *jsecurity = java_lang_System_getSecurityManager(); <br>    if (jsecurity != NULL) <br>    { <br>        jsecurity-&gt;checkRead(gc.jfilename); <br>        if (exceptionOccurred(EE())) <br>        { <br>            GCFramePop(&amp;gcf); <br>            return NULL; <br>        } <br>    } <br> <br>    GCFramePop(&amp;gcf); <br>    return rnisamp_MyRNIObject_JavaCheckedLoad0(gc.jthis, gc.jfilename); <br>} <br> <br>__declspec(dllexport) <br>struct HArrayOfByte * __cdecl rnisamp_MyRNIObject_JavaCheckedLoad0 ( <br>    struct Hrnisamp_MyRNIObject *_jthis, <br>    struct Hjava_lang_String *_jfilename <br>    ) <br>{ <br>    CHAR filename[MAX_PATH]; <br> <br>    if (_jfilename == NULL) <br>    { <br>        SignalError(EE(), JAVAPKG "NullPointerException", NULL); <br>        return NULL; <br>    } <br> <br>    javaString2CString(_jfilename, filename, sizeof(filename)); <br>    HArrayOfByte *jdata = NULL; <br>    BOOL outofmemory = FALSE; <br> <br>    GCEnable(); <br>    HANDLE file = CreateFile( <br>            filename, <br>            GENERIC_READ, <br>            FILE_SHARE_READ, <br>            NULL, <br>            OPEN_EXISTING, <br>            FILE_FLAG_SEQUENTIAL_SCAN, <br>            NULL <br>            ); <br>    GCDisable(); <br>    if (file != INVALID_HANDLE_VALUE) <br>    { <br>        DWORD size = GetFileSize(file, NULL); <br>        if (size != 0xffffffff) <br>        { <br>            jdata = (HArrayOfByte*)ArrayAlloc(T_BYTE, size); <br>            if (jdata != NULL) <br>            { <br>                HObject **jdatapin = GCNewPinnedHandle((HObject*)jdata); <br>                if (jdatapin != NULL) <br>                { <br>                    DWORD read; <br>                    if (!(ReadFile( <br>                            file, <br>                            &amp;jdata-&gt;body[0], <br>                            jdata-&gt;length, <br>                            &amp;read, <br>                            NULL <br>                            ) <br>                          &amp;&amp; read == size <br>                          )) <br>                    { <br>                        jdata = NULL; <br>                    } <br> <br>                    GCFreePinnedHandle(jdatapin); <br>                } <br>                else <br>                { <br>                    outofmemory = TRUE; <br>                    jdata = NULL; <br>                } <br>            } <br>            else <br>            { <br>                outofmemory = TRUE; <br>            } <br>        } <br> <br>        CloseHandle(file); <br>    } <br> <br>    if (jdata != NULL) <br>        return jdata; <br> <br>    if (outofmemory) <br>        SignalError(EE(), JAVAPKG "OutOfMemoryError", NULL); <br>    else <br>        SignalError(EE(), "java/io/IOException", filename); <br>    return NULL; <br>} <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

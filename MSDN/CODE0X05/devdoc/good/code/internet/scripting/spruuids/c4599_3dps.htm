<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPRUUIDS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4600"></a>SPRUUIDS.H</h2>
<pre><code>/* This header file machine-generated by mktyplib.exe */ <br>/* Interface to type library: SPRUUIDS */ <br> <br>#ifndef _SPRUUIDS_H_ <br>#define _SPRUUIDS_H_ <br> <br>DEFINE_GUID(LIBID_SPRUUIDS,0x8703FF61L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br>#ifndef BEGIN_INTERFACE <br>#define BEGIN_INTERFACE <br>#endif <br> <br>#ifdef __cplusplus <br>class SpruuidsApp; <br>#endif <br> <br>interface ISpruuidsApp; <br> <br>#ifdef __cplusplus <br>class Game; <br>#endif <br> <br>interface IGame; <br> <br>interface IGameEvents; <br> <br>#ifdef __cplusplus <br>class SpriteClass; <br>#endif <br> <br>interface ISpriteClass; <br> <br>interface ISpriteClassEvents; <br> <br>#ifdef __cplusplus <br>class Sprite; <br>#endif <br> <br>interface ISprite; <br> <br>DEFINE_GUID(IID_ISpruuidsApp,0x8703FF62L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of interface: ISpruuidsApp */ <br>#undef INTERFACE <br>#define INTERFACE ISpruuidsApp <br> <br>DECLARE_INTERFACE_(ISpruuidsApp, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* ISpruuidsApp methods */ <br>    STDMETHOD(get_Application)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(get_Parent)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(Quit)(THIS) PURE; <br>    STDMETHOD(get_Game)(THIS_ IGame FAR* FAR* ppRet) PURE; <br>}; <br> <br>DEFINE_GUID(CLSID_SpruuidsApp,0x8703FF63L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>#ifdef __cplusplus <br>class SpruuidsApp; <br>#endif <br> <br>DEFINE_GUID(IID_IGame,0x8703FF64L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of interface: IGame */ <br>#undef INTERFACE <br>#define INTERFACE IGame <br> <br>DECLARE_INTERFACE_(IGame, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* IGame methods */ <br>    STDMETHOD(get_Caption)(THIS_ BSTR FAR* pbstrReturn) PURE; <br>    STDMETHOD(put_Caption)(THIS_ BSTR bstr) PURE; <br>    STDMETHOD(get_Application)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(get_Parent)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(StartGame)(THIS) PURE; <br>    STDMETHOD(EndGame)(THIS) PURE; <br>    STDMETHOD(RemoveAllSprites)(THIS) PURE; <br>    STDMETHOD(NextLevel)(THIS) PURE; <br>    STDMETHOD(Refresh)(THIS) PURE; <br>    STDMETHOD(AddScore)(THIS_ int val) PURE; <br>    STDMETHOD(StdBorderBounce)(THIS_ ISprite FAR* pspr, int brd) PURE; <br>    STDMETHOD(StdBorderWrap)(THIS_ ISprite FAR* pspr, int brd) PURE; <br>    STDMETHOD(StdInitRand)(THIS_ ISprite FAR* pspr, VARIANT user) PURE; <br>    STDMETHOD(StdInitEdge)(THIS_ ISprite FAR* pspr, VARIANT user) PURE; <br>    STDMETHOD(get_Paused)(THIS_ VARIANT_BOOL FAR* pRet) PURE; <br>    STDMETHOD(put_Paused)(THIS_ VARIANT_BOOL val) PURE; <br>    STDMETHOD(get_Width)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Width)(THIS_ int val) PURE; <br>    STDMETHOD(get_Height)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Height)(THIS_ int val) PURE; <br>    STDMETHOD(get_BackColor)(THIS_ long FAR* pRet) PURE; <br>    STDMETHOD(put_BackColor)(THIS_ long val) PURE; <br>    STDMETHOD(get_Score)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Score)(THIS_ int val) PURE; <br>    STDMETHOD(get_Level)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Level)(THIS_ int val) PURE; <br>    STDMETHOD(get_ShipCount)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_ShipCount)(THIS_ int val) PURE; <br>    STDMETHOD(get_ScoreFirst1Up)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_ScoreFirst1Up)(THIS_ int val) PURE; <br>    STDMETHOD(get_ScoreSecond1Up)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_ScoreSecond1Up)(THIS_ int val) PURE; <br>    STDMETHOD(get_DScoreNext1Up)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_DScoreNext1Up)(THIS_ int val) PURE; <br>    STDMETHOD(get_ShipsStart)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_ShipsStart)(THIS_ int val) PURE; <br>    STDMETHOD(get_Tag)(THIS_ VARIANT FAR* pRet) PURE; <br>    STDMETHOD(put_Tag)(THIS_ VARIANT val) PURE; <br>    STDMETHOD(get_StatusText)(THIS_ BSTR FAR* pbstrReturn) PURE; <br>    STDMETHOD(put_StatusText)(THIS_ BSTR bstr) PURE; <br>}; <br> <br>DEFINE_GUID(DIID_IGameEvents,0x8703FF65L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of dispatch interface: IGameEvents */ <br>#undef INTERFACE <br>#define INTERFACE IGameEvents <br> <br>DECLARE_INTERFACE_(IGameEvents, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* IGameEvents methods: <br>    void NewGame(void); <br>    void NewLevel(void); <br>    void NewShip(void); <br>    void Collide(IDispatch * pspr1, IDispatch * pspr2, long collide); <br>    void Tick(void); <br>    void KeyDown(long vk); <br>    void KeyPress(long ascii); <br>    void KeyUp(long vk); <br>    void MouseMove(long x, long y, long keys, long buttons); <br>    void MouseDown(long x, long y, long keys, long buttons); <br>    void MouseOver(long x, long y, long keys, long buttons); <br>    */ <br>}; <br> <br>DEFINE_GUID(CLSID_Game,0x8703FF66L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>#ifdef __cplusplus <br>class Game; <br>#endif <br> <br>DEFINE_GUID(IID_ISpriteClass,0x8703FF67L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of interface: ISpriteClass */ <br>#undef INTERFACE <br>#define INTERFACE ISpriteClass <br> <br>DECLARE_INTERFACE_(ISpriteClass, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* ISpriteClass methods */ <br>    STDMETHOD(get_Application)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(get_Parent)(THIS_ IGame FAR* FAR* ppRet) PURE; <br>    STDMETHOD(CreateSprite)(THIS_ int x, int y, VARIANT arg, ISprite FAR* FAR* ppRet) PURE; <br>    STDMETHOD(get_Tag)(THIS_ VARIANT FAR* pRet) PURE; <br>    STDMETHOD(put_Tag)(THIS_ VARIANT val) PURE; <br>    STDMETHOD(get_Image)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Image)(THIS_ int val) PURE; <br>    STDMETHOD(get_Border)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Border)(THIS_ int val) PURE; <br>    STDMETHOD(get_Collide)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Collide)(THIS_ int val) PURE; <br>    STDMETHOD(get_MaximumVelocity)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_MaximumVelocity)(THIS_ float val) PURE; <br>    STDMETHOD(get_Friction)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Friction)(THIS_ float val) PURE; <br>    STDMETHOD(get_MaximumAcceleration)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_MaximumAcceleration)(THIS_ float val) PURE; <br>    STDMETHOD(get_AccelerationFriction)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_AccelerationFriction)(THIS_ float val) PURE; <br>    STDMETHOD(get_SpriteCount)(THIS_ int FAR* pRet) PURE; <br>}; <br> <br>DEFINE_GUID(DIID_ISpriteClassEvents,0x8703FF68L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of dispatch interface: ISpriteClassEvents */ <br>#undef INTERFACE <br>#define INTERFACE ISpriteClassEvents <br> <br>DECLARE_INTERFACE_(ISpriteClassEvents, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* ISpriteClassEvents methods: <br>    void Init(IDispatch * sprite, VARIANT arg); <br>    void Tick(IDispatch * sprite); <br>    void Border(IDispatch * sprite, long border); <br>    void Term(IDispatch * sprite); <br>    void lastTerm(void); <br>    */ <br>}; <br> <br>DEFINE_GUID(CLSID_SpriteClass,0x8703FF69L,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>#ifdef __cplusplus <br>class SpriteClass; <br>#endif <br> <br>DEFINE_GUID(IID_ISprite,0x8703FF6AL,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>/* Definition of interface: ISprite */ <br>#undef INTERFACE <br>#define INTERFACE ISprite <br> <br>DECLARE_INTERFACE_(ISprite, IDispatch) <br>{ <br>BEGIN_INTERFACE <br>#ifndef NO_BASEINTERFACE_FUNCS <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE; <br>    STDMETHOD_(ULONG, AddRef)(THIS) PURE; <br>    STDMETHOD_(ULONG, Release)(THIS) PURE; <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE; <br> <br>    STDMETHOD(GetTypeInfo)( <br>      THIS_ <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo) PURE; <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      THIS_ <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid) PURE; <br> <br>    STDMETHOD(Invoke)( <br>      THIS_ <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr) PURE; <br>#endif <br> <br>    /* ISprite methods */ <br>    STDMETHOD(get_Application)(THIS_ ISpruuidsApp FAR* FAR* ppRet) PURE; <br>    STDMETHOD(get_Parent)(THIS_ ISpriteClass FAR* FAR* ppRet) PURE; <br>    STDMETHOD(MoveTo)(THIS_ float x, float y) PURE; <br>    STDMETHOD(MoveBy)(THIS_ float dx, float dy) PURE; <br>    STDMETHOD(MoveAtSprite)(THIS_ ISprite FAR* sprite, float scale, float dMax, long flags) PURE; <br>    STDMETHOD(Remove)(THIS) PURE; <br>    STDMETHOD(Refresh)(THIS) PURE; <br>    STDMETHOD(IgnoreMove)(THIS) PURE; <br>    STDMETHOD(get_Left)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Left)(THIS_ float val) PURE; <br>    STDMETHOD(get_Top)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Top)(THIS_ float val) PURE; <br>    STDMETHOD(get_Vx)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Vx)(THIS_ float val) PURE; <br>    STDMETHOD(get_Vy)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Vy)(THIS_ float val) PURE; <br>    STDMETHOD(get_Ax)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Ax)(THIS_ float val) PURE; <br>    STDMETHOD(get_Ay)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_Ay)(THIS_ float val) PURE; <br>    STDMETHOD(get_FrictionX)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_FrictionX)(THIS_ float val) PURE; <br>    STDMETHOD(get_FrictionY)(THIS_ float FAR* pRet) PURE; <br>    STDMETHOD(put_FrictionY)(THIS_ float val) PURE; <br>    STDMETHOD(get_Image)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_Image)(THIS_ int val) PURE; <br>    STDMETHOD(get_TickMove)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_TickMove)(THIS_ int val) PURE; <br>    STDMETHOD(get_TickEvent)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(put_TickEvent)(THIS_ int val) PURE; <br>    STDMETHOD(get_Visible)(THIS_ VARIANT_BOOL FAR* pRet) PURE; <br>    STDMETHOD(put_Visible)(THIS_ VARIANT_BOOL val) PURE; <br>    STDMETHOD(get_Tag)(THIS_ VARIANT FAR* pRet) PURE; <br>    STDMETHOD(put_Tag)(THIS_ VARIANT val) PURE; <br>    STDMETHOD(get_Width)(THIS_ int FAR* pRet) PURE; <br>    STDMETHOD(get_Height)(THIS_ int FAR* pRet) PURE; <br>}; <br> <br>DEFINE_GUID(CLSID_Sprite,0x8703FF6BL,0x669C,0x11CF,0xA9,0x2B,0x00,0xAA,0x00,0x68,0x8A,0x2F); <br> <br>#ifdef __cplusplus <br>class Sprite; <br>#endif <br> <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

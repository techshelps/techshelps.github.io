<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEAUTO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4591"></a>OLEAUTO.H</h2>
<pre><code>//--------------------------------------------------------------------------- <br>// OleAuto.h <br>//--------------------------------------------------------------------------- <br>// Simple class for doing dual OLE Automation interfaces <br>//--------------------------------------------------------------------------- <br>// (C) Copyright 1992-1997 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//--------------------------------------------------------------------------- <br> <br>//--------------------------------------------------------------------------- <br>// A little utility which simplifies firing dispatch events. <br>//--------------------------------------------------------------------------- <br>HRESULT InvokeEvent <br>  ( <br>  IDispatch  *pdisp,    // IDispatch of Sink <br>  DISPID      dispid,   // DISPID of event <br>  VARIANTARG *pvararg,  // Args to event <br>  UINT        carg      // # args <br>  ); <br> <br> <br>//--------------------------------------------------------------------------- <br>// This routine will load a TypeLib and (optionally) find the TypeInfo inside <br>// which matches the given clsid.  The TypeLib and TypeInfo pointers are <br>// in/out so you can simply: <br>//      hr = LoadTypeInfo(..., &amp;g_pMyTypeLib, &amp;m_pMyObjectsTypeInfo); <br>// and it will fill in g_pMyTypeLib and m_pMyObjectsTypeInfo, if necessary. <br>//--------------------------------------------------------------------------- <br>HRESULT LoadTypeInfo <br>  ( <br>  HINSTANCE   hinst,             // hinst of where to load TypeLib from, if not found <br>  UINT        itinfo,            // index of TypeInfo requested, only 0 supported <br>  USHORT      dwMaj,             // Maj version # of TypeLib <br>  USHORT      dwMin,             // Min version # of TypeLib <br>  LCID        lcid,              // Locale of TypeLib to load <br>  REFGUID     libid,             // LIBID of TypeLib  to find <br>  REFCLSID    clsid,             // CLSID of TypeInfo to find <br>  REFIID      iid,               // IID   of TypeInfo to find <br>  BOOL        fDispOnly,         // TRUE=ensure *ptinfoIntInOut is a TKIND_DISPATCH, not vtbl <br>  ITypeLib  **pptlibInOut,       // Ptr to cache of pTypeLib, typically &amp;g_ptlib <br>  ITypeInfo **pptinfoClassInOut, // Ptr to cache of pTypeInfo, typically &amp;m_ptinfoCls <br>  ITypeInfo **pptinfoIntInOut    // Ptr to cache of pTypeInfo, typically &amp;m_ptinfoInt <br>  ); <br> <br> <br>//--------------------------------------------------------------------------- <br>// Derrive from this class to get the standard implementation of IDispatch <br>// over a vtable.  Assumes that "this" is the proper vtable, so to use, your <br>// class should first derive from IMyCustomDualInterface, then from COleAuto. <br>// Then implement GetTypeLibInfo(). <br>//--------------------------------------------------------------------------- <br>class COleAuto : public IDispatch <br>  { <br>public: <br>  // *** IUnknown methods *** <br>  STDMETHOD(QueryInterface)(REFIID riid, void** ppvObj) PURE; <br>  STDMETHOD_(ULONG, AddRef)(void) PURE; <br>  STDMETHOD_(ULONG, Release)(void) PURE; <br> <br>  // *** IDispatch methods *** <br>  STDMETHOD(GetTypeInfoCount)(UINT* pctinfo); <br>  STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo** pptinfoOut); <br>  STDMETHOD(GetIDsOfNames)(REFIID riid, OLECHAR** rgszNames, UINT cNames, LCID lcid, DISPID* prgdispid); <br>  STDMETHOD(Invoke)(DISPID dispidMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, UINT* puArgErr); <br> <br>  // *** IProvideMultipleClassInfo methods *** <br>  STDMETHOD(GetMultiTypeInfoCount)(ULONG *pc); <br>  STDMETHOD(GetInfoOfIndex)(ULONG itinfo, DWORD dwFlags, ITypeInfo** pptinfoCoClass, DWORD* pdwTIFlags, ULONG* pcdispidReserved, IID* piidPrimary, IID* piidSource); <br> <br>  // *** Pure virtual methods for derived class to implement *** <br>  virtual ITypeInfo **GetTinfoClsAddr(void) PURE; <br>  virtual ITypeInfo **GetTinfoIntAddr(void) PURE; <br>  virtual HRESULT GetTypeLibInfo(HINSTANCE *phinstOut, const GUID **pplibidOut,  <br>                                 SHORT *pwMajLibOut, SHORT *pwMinLibOut, <br>                                 const CLSID **ppclsidOut, const IID **ppiidOut,  <br>                                 ITypeLib ***ppptlOut) PURE; <br>  virtual IDispatch *GetPrimary(void) PURE; <br> <br>  // *** Other methods for derived class to call *** <br>  HRESULT CheckTypeInfo(UINT itinfo, LCID lcid); <br>  HRESULT SetBaseObject(IDispatch *pdisp); <br> <br>  // Member Variables <br>  IDispatch *m_pdispBaseObject;   // The object this class is extending <br>  }; <br> <br> <br>//--------------------------------------------------------------------------- <br>// Standard Dispatch <br>//--------------------------------------------------------------------------- <br>// All objects should declare these in their class definitions so that they <br>// get standard implementations of IDispatch and ISupportErrorInfo. <br>//--------------------------------------------------------------------------- <br>#define DECLARE_STANDARD_DISPATCH() \ <br>    STDMETHOD(GetTypeInfoCount)(UINT *pctinfo) \ <br>      { return COleAuto::GetTypeInfoCount(pctinfo); } \ <br>    STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo **pptinfoOut) \ <br>      { return COleAuto::GetTypeInfo(itinfo, lcid, pptinfoOut); } \ <br>    STDMETHOD(GetIDsOfNames)(REFIID iid, OLECHAR **rgszNames, UINT cnames, LCID lcid, DISPID *rgdispid) \ <br>      { return COleAuto::GetIDsOfNames(iid, rgszNames, cnames, lcid, rgdispid); } \ <br>    STDMETHOD(Invoke)(DISPID dispid, REFIID iid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pVarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr) \ <br>      { return COleAuto::Invoke(dispid, iid, lcid, wFlags, pdispparams, pVarResult, pexcepinfo, puArgErr); } <br> <br>//--- EOF ------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

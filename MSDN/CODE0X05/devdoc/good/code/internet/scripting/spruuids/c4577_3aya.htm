<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GAME.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4582"></a>GAME.H</h2>
<pre><code>//--------------------------------------------------------------------------- <br>// Game.h <br>//--------------------------------------------------------------------------- <br>// Sample spr program <br>//--------------------------------------------------------------------------- <br>// (C) Copyright 1992-1997 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//--------------------------------------------------------------------------- <br> <br>//--------------------------------------------------------------------------- <br>// Forward Delcares <br>//--------------------------------------------------------------------------- <br>class CDisplay; <br>class CSpriteClass; <br>class CSprite; <br>class CScore; <br>class CGameOA; <br> <br> <br>//--------------------------------------------------------------------------- <br>// <br>//--------------------------------------------------------------------------- <br>DEFINE_GUID(IID_IGameSubObjects, 0xb54f3741, 0x5b07, 0x11cf, 0xa4, 0xb0, 0x0, 0xaa, 0x0, 0x4a, 0x55, 0xe8); <br> <br> <br>//--------------------------------------------------------------------------- <br>// the CGame class <br>//--------------------------------------------------------------------------- <br>class CGame : public COleAuto,  <br>              public IActiveScriptSite, public IActiveScriptSiteWindow, <br>              public IProvideMultipleClassInfo <br>  { <br>  friend class CGameOA; <br> <br>public: <br>  static HRESULT CGame::CreateGame(HINSTANCE hinst, HWND hwnd, HWND hwndPS, HWND hwndStat, <br>                                   IOleComponentManager *pcm, CGame **ppgameOut); <br>  CGame(HINSTANCE hinst, HWND hwnd, HWND hwndPS, HWND hwndStat, IOleComponentManager *pcm); <br>  ~CGame(); <br>  void Close(void); <br> <br>  // *** IUnknown methods *** <br>  STDMETHOD(QueryInterface)(REFIID riid, void** ppvObj); <br>  STDMETHOD_(ULONG, AddRef)(void); <br>  STDMETHOD_(ULONG, Release)(void); <br>  inline IUnknown  *GetUnknown(void)  {return (IDispatch *)(COleAuto *)this;}; <br>  inline IDispatch *GetDispatch(void) {return (IDispatch *)(COleAuto *)this;}; <br> <br>  // *** IDispatch methods *** <br>  STDMETHOD(GetTypeInfoCount)(UINT *pctinfo) <br>    { return COleAuto::GetTypeInfoCount(pctinfo); }; <br>  STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo **pptinfoOut) <br>    { return COleAuto::GetTypeInfo(itinfo, lcid, pptinfoOut); }; <br>  STDMETHOD(GetIDsOfNames)(REFIID iid, OLECHAR **rgszNames, UINT cnames, LCID lcid, DISPID *rgdispid); <br>  STDMETHOD(Invoke)(DISPID dispid, REFIID iid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pVarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr); <br> <br>  // Override required by COleAuto: <br>  virtual ITypeInfo **GetTinfoClsAddr(void) { return &amp;g_ptinfoClsGame; }; <br>  virtual ITypeInfo **GetTinfoIntAddr(void) { return &amp;g_ptinfoIntGame; }; <br>  virtual HRESULT GetTypeLibInfo(HINSTANCE *phinstOut, const GUID **pplibidOut,  <br>                                 SHORT *pwMajLibOut, SHORT *pwMinLibOut, <br>                                 const CLSID **ppclsidOut, const IID **ppiidOut, <br>                                 ITypeLib ***ppptlOut); <br>  virtual IDispatch *GetPrimary() {return this-&gt;GetDispatch(); }; <br> <br>  // *** IProvideClassInfo methods *** <br>  STDMETHOD(GetClassInfo)(ITypeInfo** pptinfoOut); <br>  // *** IProvideClassInfo2 methods *** <br>  STDMETHOD(GetGUID)(DWORD dwGuidKind, GUID* pGUID); <br>  // *** IProvideMultipleClassInfo methods *** <br>  STDMETHOD(GetMultiTypeInfoCount)(ULONG *pcti); <br>  STDMETHOD(GetInfoOfIndex)(ULONG iti, DWORD dwFlags, ITypeInfo** pptiCoClass, DWORD* pdwTIFlags, ULONG* pcdispidReserved, IID* piidPrimary, IID* piidSource); <br> <br>// ##### BEGIN ACTIVEX SCRIPTING SUPPORT ##### <br>  // *** IActiveScriptSite methods *** <br>  STDMETHOD(GetLCID)(LCID *plcid); <br>  STDMETHOD(GetItemInfo)(LPCOLESTR pstrName, DWORD dwReturnMask, IUnknown **ppiunkItem, ITypeInfo **ppti); <br>  STDMETHOD(GetDocVersionString)(BSTR *pszVersion); <br>  STDMETHOD(RequestItems)(void); <br>  STDMETHOD(RequestTypeLibs)(void); <br>  STDMETHOD(OnScriptTerminate)(const VARIANT *pvarResult, const EXCEPINFO *pexcepinfo); <br>  STDMETHOD(OnStateChange)(SCRIPTSTATE ssScriptState); <br>  STDMETHOD(OnScriptError)(IActiveScriptError *pscripterror); <br>  STDMETHOD(OnEnterScript)(void); <br>  STDMETHOD(OnLeaveScript)(void); <br> <br>  // *** IActiveScriptSiteWindow methods *** <br>  STDMETHOD(GetWindow)(HWND *phwnd); <br>  STDMETHOD(EnableModeless)(BOOL fEnable); <br>// #####  END  ACTIVEX SCRIPTING SUPPORT ##### <br> <br>  class CGameOA *m_pgameoa; <br> <br>  // *** General Methods *** <br>  BOOL    DlgProc(  HWND hwnd, UINT msg, WPARAM wp, LPARAM lp); <br>  LRESULT PSWndProc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp); <br>  void    NewLevel(void); <br>  void    NewGame(void); <br>  BOOL    Pause(int pause); <br>  BOOL    FQueryTerminate(BOOL fPromptUser); <br>  void    GameOver(void); <br>  HRESULT ParseFile(char *pszFileName, LPCOLESTR pstrItemName); <br>  HRESULT CreateScriptEngine(LPCOLESTR pstrItemName); <br>  HRESULT BuildTypeInfo(void); <br> <br>  // *** Member Variables *** <br>  HINSTANCE  m_hinst; <br>  HWND       m_hwndDlg; <br>  HWND       m_hwndPS; <br>  HWND       m_hwndStat; <br>  CScore    *m_pscore; <br>  CDisplay  *m_pdisp; <br>  UINT       m_cref; <br>  VARIANT    m_varTag; <br>  IOleComponentManager *m_pcm; <br>// ##### BEGIN ACTIVEX SCRIPTING SUPPORT ##### <br>  IActiveScript        *m_ps; <br>  IActiveScriptParse   *m_psp; <br>// #####  END  ACTIVEX SCRIPTING SUPPORT ##### <br> <br>  CLSID          m_clsidEngine; <br>  static char   *s_pszError; <br> <br>  // Sub-Object support <br>#define csubobjMAX    30 <br>  int           m_csubobj; <br>  LPOLESTR      m_rgpwszSubObjs[csubobjMAX];   // Should really dynamically allocate this array <br>  IDispatch    *m_rgpdispSubObjs[csubobjMAX];  // Should really dynamically allocate this array <br>  CSpriteClass *m_rgpsc[csubobjMAX]; <br>  GUID          m_libidSubObj; <br>  CLSID         m_clsidSubObj; <br>  IID           m_iidSubObj; <br> <br>  // These reset every new game <br>  BOOL m_fPaused:1; <br>  BOOL m_fShipDead:1; <br>  BOOL m_fShipRestart:1; <br>  BOOL m_fGameOver:1; <br> <br>  // DEBUG info <br>  static HRESULT s_hr; <br>  #define SIG_Game 'Game' <br>  DECLARE_SIGNATURE(SIG_Game); <br>  }; <br> <br> <br>//--------------------------------------------------------------------------- <br>// the CGameOA class; Ole automation implementation for static members <br>// of the IGame interface. <br>//--------------------------------------------------------------------------- <br>class CGameOA : public IGame, public COleAuto, public IProvideClassInfo, <br>                public IConnectionPointContainer <br>  { <br>public: <br>  // *** Constructor / Destructor *** <br>  CGameOA::CGameOA(CGame *); <br> <br>  // *** IUnknown methods *** <br>  STDMETHOD(QueryInterface)(REFIID iid, void** ppvObj) {return m_pgame-&gt;QueryInterface(iid, ppvObj);}; <br>  STDMETHOD_(ULONG, AddRef) (void)                     {return m_pgame-&gt;AddRef();}; <br>  STDMETHOD_(ULONG, Release)(void)                     {return m_pgame-&gt;Release();}; <br>  inline IDispatch *GetDispatch(void) {return (IGame *)this;}; <br> <br>  // *** IDispatch methods *** <br>  DECLARE_STANDARD_DISPATCH(); <br>  // Override required by COleAuto: <br>  virtual ITypeInfo **GetTinfoClsAddr(void) { return &amp;g_ptinfoClsGameOA; }; <br>  virtual ITypeInfo **GetTinfoIntAddr(void) { return &amp;g_ptinfoIntGameOA; }; <br>  virtual HRESULT GetTypeLibInfo(HINSTANCE *phinstOut, const GUID **pplibidOut,  <br>                                 SHORT *pwMajLibOut, SHORT *pwMinLibOut, <br>                                 const CLSID **ppclsidOut, const IID **ppiidOut, <br>                                 ITypeLib ***ppptlOut); <br>  virtual IDispatch *GetPrimary() {return this-&gt;GetDispatch(); }; <br> <br>  // *** IProvideClassInfo methods *** <br>  STDMETHOD(GetClassInfo)(ITypeInfo** pptinfoOut); <br> <br>  // *** IConnectionPointContainer methods *** <br>  STDMETHOD(EnumConnectionPoints)(LPENUMCONNECTIONPOINTS* ppEnum); <br>  STDMETHOD(FindConnectionPoint)(REFIID iid, LPCONNECTIONPOINT* ppCP); <br> <br>  // *** IGame methods *** <br>  STDMETHOD(get_Caption)(BSTR* lpbstrReturn); <br>  STDMETHOD(put_Caption)(BSTR bstr); <br>  STDMETHOD(get_Application)(ISpruuidsApp** lppaReturn); <br>  STDMETHOD(get_Parent)(ISpruuidsApp** lppaReturn); <br>  STDMETHOD(StartGame)(void); <br>  STDMETHOD(EndGame)(void); <br>  STDMETHOD(RemoveAllSprites)(void); <br>  STDMETHOD(NextLevel)(void); <br>  STDMETHOD(Refresh)(void); <br>  STDMETHOD(AddScore)(int val); <br>  STDMETHOD(StdBorderBounce)(ISprite* pspr, int brd); <br>  STDMETHOD(StdBorderWrap)(  ISprite* pspr, int brd); <br>  STDMETHOD(StdInitRand)(ISprite* pspr, VARIANT user); <br>  STDMETHOD(StdInitEdge)(ISprite* pspr, VARIANT user); <br>  STDMETHOD(get_Paused)(VARIANT_BOOL* pRet); <br>  STDMETHOD(put_Paused)(VARIANT_BOOL val); <br>  STDMETHOD(get_Width)(int* pRet); <br>  STDMETHOD(put_Width)(int val); <br>  STDMETHOD(get_Height)(int* pRet); <br>  STDMETHOD(put_Height)(int val); <br>  STDMETHOD(get_BackColor)(long* pRet); <br>  STDMETHOD(put_BackColor)(long val); <br>  STDMETHOD(get_Score)(int* pRet); <br>  STDMETHOD(put_Score)(int val); <br>  STDMETHOD(get_Level)(int* pRet); <br>  STDMETHOD(put_Level)(int val); <br>  STDMETHOD(get_ShipCount)(int* pRet); <br>  STDMETHOD(put_ShipCount)(int val); <br>  STDMETHOD(get_ScoreFirst1Up)(int* pRet); <br>  STDMETHOD(put_ScoreFirst1Up)(int val); <br>  STDMETHOD(get_ScoreSecond1Up)(int* pRet); <br>  STDMETHOD(put_ScoreSecond1Up)(int val); <br>  STDMETHOD(get_DScoreNext1Up)(int* pRet); <br>  STDMETHOD(put_DScoreNext1Up)(int val); <br>  STDMETHOD(get_ShipsStart)(int* pRet); <br>  STDMETHOD(put_ShipsStart)(int val); <br>  STDMETHOD(get_Tag)(VARIANT* pRet); <br>  STDMETHOD(put_Tag)(VARIANT val); <br>  STDMETHOD(get_StatusText)(BSTR* lpbstrReturn); <br>  STDMETHOD(put_StatusText)(BSTR bstr); <br> <br>  class XCP : public IConnectionPoint <br>    { <br>    inline CGameOA *PGAMEOA(void) { return ((CGameOA *)((char *)this - (char *)&amp;(((CGameOA *)0)-&gt;m_cp))); } <br> <br>  public: <br>    XCP(); <br>    void Close(void); <br> <br>    // *** IUnknown methods *** <br>    STDMETHOD(QueryInterface)(REFIID iid, void** ppvObjOut); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void); <br>    inline IUnknown *GetUnknown(void) {return (IConnectionPoint *)this;}; <br> <br>    // *** IConnectionPoint methods *** <br>    STDMETHOD(GetConnectionInterface)(IID* piid); <br>    STDMETHOD(GetConnectionPointContainer)(IConnectionPointContainer** ppCPC); <br>    STDMETHOD(Advise)(IUnknown* punkSink, DWORD* pdwCookie); <br>    STDMETHOD(Unadvise)(DWORD dwCookie); <br>    STDMETHOD(EnumConnections)(LPENUMCONNECTIONS* ppEnum); <br> <br>    // *** Member Variables *** <br>    ULONG     m_cref; <br>#define GAME_cADVISE 5 <br>    IDispatch *m_rgpdisp[GAME_cADVISE];     // Array of pdisps to call. <br>    } m_cp; <br> <br>  // *** Event Methods *** <br>  void FireNewGame(void); <br>  void FireNewLevel(void); <br>  void FireNewShip(void); <br>  static void FireCollide(CSprite *psprMoved, CSprite *psprHit, int); <br>  void FireTick(void); <br>  void FireKeyDown(int vk); <br>  void FireKeyPress(int ascii); <br>  void FireKeyUp(int vk); <br>  void FireMouseMove(int x, int y, long mk); <br>  void FireMouseDown(int x, int y, long mk, long button); <br>  void FireMouseUp(  int x, int y, long mk, long button); <br> <br>  // *** Member Variable *** <br>  CGame *m_pgame; <br>  }; <br> <br>//--- EOF ------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCORE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4595"></a>SCORE.H</h2>
<pre><code>//--------------------------------------------------------------------------- <br>// Score.h <br>//--------------------------------------------------------------------------- <br>// Score object to track score, # lives, level. <br>//--------------------------------------------------------------------------- <br>// (C) Copyright 1992-1997 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//--------------------------------------------------------------------------- <br> <br>//--------------------------------------------------------------------------- <br>// Score class <br>//--------------------------------------------------------------------------- <br>class CScore <br>  { <br>public: <br>  // *** Constructor / Destructor *** <br>  static HRESULT CreateScore(HINSTANCE hinst, HWND hwnd, HWND hwndPS, HWND hwndStat, <br>                             long scoreFirst1Up, long scoreSecond1Up, long dscoreNext1Up, <br>                             int cship, WORD idbmpShip, WORD idbmpPlus, <br>                             CScore **ppscoreOut); <br>  CScore(HINSTANCE hinst, HWND hwnd, HWND hwndPS, HWND hwndStat, long scoreSecond1Up, long scoreFirst1Up, long dscoreNext1Up, int cship, WORD idbmpShip, WORD idbmpPlus); <br>  ~CScore(); <br> <br>  // *** Public methods *** <br>  void NewGame(void); <br>  void Add(long d); <br>  void Paint(HDC hdc); <br>  void SetStatusText(const char *pszText); <br>  void Size(int cx, int cy); <br> <br>  // *** Public accessor methods *** <br>  inline long GetScore(void)      {return m_score;}; <br>  inline void SetScore(int s)     {m_score = s;   InvalidateRect(m_hwnd, &amp;m_rectScore, TRUE);}; <br>  inline long GetLevel(void)      {return m_lvl;}; <br>  inline long GetCShip(void)      {return m_cship;}; <br>  inline void SetLevel(int lvl)   {m_lvl = lvl;   InvalidateRect(m_hwnd, &amp;m_rectLvl,  TRUE);}; <br>  inline void NextLevel(void)     {m_lvl++;       InvalidateRect(m_hwnd, &amp;m_rectLvl,  TRUE);}; <br>  inline void SetCShip(int cship) {m_cship=cship; InvalidateRect(m_hwnd, &amp;m_rectShip, TRUE);}; <br>  inline void ShipKilled(void)    {m_cship--;     InvalidateRect(m_hwnd, &amp;m_rectShip, TRUE);}; <br>  inline int  GetSize(void)       {return m_cyMax;}; <br> <br>  // Public members <br>  long      m_scoreFirst1Up; <br>  long      m_scoreSecond1Up; <br>  long      m_dscoreNext1Up; <br>  short     m_cshipStart; <br>  long      m_scoreNext1Up; // Inits to m_scoreFirst1Up <br> <br>private: <br>  // *** Private member variables *** <br>  // Reset at NewGame() <br>  long      m_score;        // Inits to 0 <br>  short     m_cship;        // Inits to m_cshipStart <br>  short     m_lvl;          // Inits to 1 <br> <br>  // Static state passed into contructor <br>  HINSTANCE m_hinst; <br>  HWND      m_hwnd; <br>  HWND      m_hwndPS; <br>  HWND      m_hwndStat; <br> <br>  // State calculated from static state <br>  RECT      m_rectScore; <br>  RECT      m_rectShip; <br>  RECT      m_rectLvl; <br>  HBITMAP   m_hbmpShip; <br>  HBITMAP   m_hbmpPlus; <br>  int       m_cyMax,  m_cyStat; <br>  int       m_cxShip, m_cyShip; <br>  int       m_cxPlus, m_cyPlus; <br> <br>  // Set if constructor fails <br>  static HRESULT s_hr; <br> <br>  // DEBUG info <br>  #define SIG_Score 'Scor' <br>  DECLARE_SIGNATURE(SIG_Score); <br>  }; <br> <br>//--- EOF ------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

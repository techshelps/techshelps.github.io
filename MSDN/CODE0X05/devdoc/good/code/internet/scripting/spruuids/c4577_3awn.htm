<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4577"></a>README.TXT</h2>
<pre><code>//------------------------------------------------------------------------- <br>// Readme.txt <br>//------------------------------------------------------------------------- <br>// Spruuids: A sample ActiveX Scripting host, which hosts VB Script. <br>//------------------------------------------------------------------------- <br>// (C) Copyright 1992-1997 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//------------------------------------------------------------------------- <br> <br>FILES SUPPLIED <br>EXTERNAL HEADER FILES <br>ActivScp.h  -- ActiveX Scripting header file, used by Game.cpp <br>VBSGuids.h  -- Defines CLSID for VB Script, used by Game.cpp <br>CompMgr.h   -- Component Manager interfaces, used by App.cpp, MsgLoop.cpp <br>PROGRAM FILES <br>App.cpp, App.h <br>            -- Implements Main App window via a dialog.  CApp is responsible <br>               for creating the CMsgLoop object, and CGame object. <br>MsgLoop.cpp, MsgLoop.h <br>            -- Implements .exe's message loop via IOleComponentManager.  CApp <br>               acts as a client to the ComponentManager, implementing <br>               IOleComponent. <br>OleAuto.cpp, OleAuto.h <br>            -- Small framework for creating OLE Automation objects which have <br>               dual interfaces. <br>Game.cpp, Game.h <br>            -- Orchestrates the show, responsible for creating and coordinating <br>               CScore, CDisplay (from Spr.cpp), and CSpriteClass's.  Handles <br>               high-level game behaviors, such as starting and ending games, <br>               the menus, and creating, loading, and managing VB Script through <br>               ActiveX Scripting. <br>GameOA.cpp <br>            -- OLE Automation implementation for "Game" object in object model. <br>Score.cpp, Score.h <br>            -- Tracks score, level, # ships left. <br>Spr.cpp, Spr.h <br>            -- Core "sprite" engine, implementing CDisplay, CSpriteClass, and <br>               CSprite. <br>            -- CDisplay implements the display surface on which the <br>               sprites are drawn, and handles drawing the sprites, updating <br>               their positions on timer ticks, and tracking collisions between <br>               the sprites. <br>            -- CSpriteClass implements a set of functionality shared between <br>               common kinds of sprites, such as the starting image used, how <br>               sprites of this class interact with the border, etc. <br>            -- CSprite implements a "sprite" which basically a repository for <br>               position, velocity, image, etc. <br>SprOA.cpp <br>            -- Implements the "SpriteClass" and "Sprite" OLE Automation <br>               interfaces for the CSpriteClass and CSprite classes, <br>               respectively. <br>Guids.cpp, Guids.h <br>            -- Simple file to get all necessary GUIDs to the linker. <br>Helpers.h <br>            -- Implements some obligatory ANSI/Unicode helpers. <br>Main.h <br>            -- Main include file included by everyone. <br>SpruuidP.Pix, SpruuidP.hh, SpruuidP.h <br>            -- Helper files which tells the sprite engine about the graphics <br>               found within the main sprite bitmap, Spruuids.bmp <br>DispIDs.h <br>            -- Defines the DISPIDs used for events. <br>Spruuids.odl <br>            -- Declares the object model for the Spruuids.exe application. <br>    BITMAPS <br>        Spruuids.bmp  -- Contains all of the interesting images. <br>        Ship.bmp      -- Contains the image used to display the # ships left. <br>        Plus.bmp      -- Graphics used to display a "+" when not enough room <br>                         to display # ships left. <br>SAMPLE SPRITE.EXE INPUT FILES <br>Game1.txt     -- Simple samples illustrating how to use some <br>Game2.txt        primitives from the Game object model. <br>Game3.txt <br>GameFull.txt  -- Complete fun-to-play game. <br> <br>    CLASSES IN SPRUUIDS' IMPLEMENTATION <br>    CApp implements <br>            IUnknown <br>            IDispatch Using COleAuto <br>    SpruuidsApp <br>            IOleComponent <br>    CGame implements <br>            IUnknown <br>            IDispatch Using COleAuto <br>    Game <br>    IActiveScriptSite <br>            IProvideClassInfo <br>            IProvideClassInfo2 <br>            IConnectionPointContainer <br>            IConnectionPoint via an embedded class <br>    CMsgLoop implements <br>    IOleComponentManager <br>    CScore <br>    CDisplay <br>    CSpriteClass implements <br>            IUnknown <br>            IDispatch Using COleAuto <br>    SpriteClass <br>            IProvideClassInfo <br>            IProvideClassInfo2 <br>            IConnectionPointContainer <br>            IConnectionPoint via an embedded class <br>    CSprite <br>            IUnknown <br>            IDispatch Using COleAuto <br>    Sprite <br> <br>RUNNING SPRUUIDS.EXE <br>Command Line: <br>Spruuids &lt;VB Script File&gt; <br>where <br>&lt;VB Script File&gt; is the relative or full path to a VB Script <br>file containing the source code which Spruuids is to load and run.  See <br>Game*.txt for samples of VB Script programs written against Spruuids.exe. <br> <br>COMPILING SPRITE.EXE <br>Use MkTypLib.exe to compile "Spruuids.odl" into "Spruuids.h" and <br>        "Spruuids.tlb".  NOTE THAT Spruuids.tlb MUST BE GENERATED BEFORE THE .RC <br>        FILE CAN BE COMPILED WITH RC.EXE! <br>Compile each of the *.cpp files. <br>Use RC.exe to compile the "Spruuids.rc" into "Spruuids.res", noting that <br>"Spruuids.tlb" must be included as a resource of type "TYPELIB", <br>so it must have been created first. <br>Link everything togther, and use RC.exe to add the .res to the .exe. <br> <br>SPRUUIDS' OBJECT MODEL <br>Application As SpruuidsApp <br>        R/O Properties <br>            Application - Returns the Application object (returns itself). <br>            Parent - Returns the Application object (returns itself). <br>            Game - Returns the "Game" object, described below. <br>        Methods <br>            Quit() - Causes Spruuids to terminate. <br> <br>Game As Game <br>        R/O Properties <br>            Application - Returns the Application object. <br>            Parent - Returns the Application object. <br>            ShipClass As SpriteClass - Returns the SpriteClass for the ship. <br>            BubbleClass As SpriteClass - Returns the SpriteClass for bubbles. <br>            AmmoClass As SpriteClass - Returns the SpriteClass for ammo. <br>            ExtraClass As SpriteClass - Returns the SpriteClass for extra, <br>                special effects, or general use. <br>       R/W Properties <br>            Caption As String - Sets the caption of the main Spruuids window. <br>            StatusText As String - Sets the status text of Spruuids. <br>            Width As Integer - Width, in pixels, of the display area. <br>            Height As Integer - Height, in pixels, of the display area. <br>            Paused As Boolean - Sets or clears the paused game. <br>            Score As Integer - Current score.  Setting this will not compute <br>                extra ships gained.  Use AddScore() to ensure this calcualtion. <br>            Level As Integer - Current level. <br>            ShipCount As Integer - Current number of ships left. <br>            ScoreFirst1Up As Integer - Score at which the first extra ship is <br>                awarded. <br>            ScoreSecond1Up As Integer - Score at which the second extra ship <br>                is awarded. <br>            DScoreNext1Up As Integer - Delta score for each extra ship award <br>                after the second. <br>            ShipsStart As Integer - Number of ships to start game with. <br>            Tag As Variant - General storage for the user. <br>        Methods <br>            StartGame() - Starts a new game, propting the user first, if a <br>                game is already in progress. <br>            EndGame() - Ends the current game. <br>            RemoveAllSprites() - Destroys all sprites. <br>            NextLevel() - Increments the Level number, updating the level <br>                display <br>            Refresh() - Forces the display to be refreshed. <br>            AddScore(amt As Integer) - Adds the given amount to the score, <br>                rounding up to zero, if necessary.  Also computes to see <br>                if an extra ship should be awarded. <br>            StdBorderBounce(s As Sprite, brd As Integer) - Ensures that <br>                the sprite's velocities will cause the sprite to bounce. <br>            StdBorderWrap(s As Sprite, brd As Integer) - Move the sprite <br>                to the other edge of the screen. <br>            StdInitRand(s As Sprite, u As Variant) - Moves the sprite to some <br>                random location on the display at least u pixels away from <br>                the center.  Ensures that the sprite does not start out <br>                overlapping a sprite it would cause a Collide event with. <br>            StdInitEdge(s As Sprite, u As Variant) - Moves the sprite to some <br>                random location around the edge of the display.  u is ignored.  <br>        Events <br>            NewGame() - Fired when a new game is started. <br>            NewLevel() - Fired when NextLevel is called. <br>            NewShip() - Fired when a new ship is awarded. <br>            Tick() - Fired every timer tick. <br>            Collide(s1 As Sprite, s2 As Sprite, coll As Integer) - Fired when <br>                two sprites move so they overlap.  S1 is always the sprite <br>                with the lower id (ShipClass &lt; BubbleClass &lt; AmmoClass &lt; <br>                ExtraClass).  Coll is the bit-wise AND of s1.Parent.Collide <br>                with s2.Parent.Collide.  So with judicious setting of the <br>                Collide propertis, coll is enough to tell what types of  <br>                sprites collided, and what s1 and s2 are.  Bit 1 is special <br>                and is used to indicate that a sprite should generate this <br>                event when it hits sprites of its own class. <br>            KeyDown(vk As Integer) - Fired when key is depressed.  vk contains <br>                the virtual key code, as defined in Windows.h. <br>            KeyPress(ascii As Integer) - Fired when key is depressed.  ascii <br>                contains the ascii value of the key pressed. <br>            KeyUp(vk As Integer) - Fired when key is released.  vk contains <br>                the virtual key code, as defined in Windows.h. <br>            MouseMove(x As Integer, y As Integer, keys As Integer, button As <br>                Integer) - Fired when mouse moves over the play surface of <br>                Spruuids.  x and y are the pixel location of the mouse relative <br>                to the upper left corner of the play surface.  keys indicates <br>                whether the SHIFT key is depressed (bit 1) or the CONTROL key <br>                is depressed (bit 2).  button indicates which buttons are <br>                currently depressed (any combination of: 1=left, 2=right, <br>                4=middle). <br>            MouseDown(x As Integer, y As Integer, keys As Integer, button As <br>                Integer) - Fired when the user depresses a mouse button.  <br>                button indicates which button was depressed (one of: 1=left, <br>                2=right, 4=middle). <br>            MouseUp(x As Integer, y As Integer, keys As Integer, button As <br>                Integer) - Fired when the user releases a mouse button.  <br>                button indicates which button was released (one of: 1=left, <br>                2=right, 4=middle). <br> <br>    SpriteClass Objects <br>        R/O Properties <br>            Application - Returns the Application object. <br>            Parent - Returns the Game object. <br>            SpriteCount As Integer - The number of existing sprites of <br>                this kind. <br>        R/W Properties <br>            Image As Integer - A number indicating the default graphic <br>                to be used for sprites of this class. <br>            Brd As Integer - A bitfield indicating the display borders with <br>                which sprites of this class are interested in being notified <br>                (via the Border event) when then touch them.  See Spr.h for <br>                the definition of this bitfield. <br>            Collide As Integer - a bitfield used to determine whether to fire <br>                the Game_Collide event, as described above. <br>            Friction As Single - Indicates the amount of friction sprites of <br>                this class should default to.  Values 0&lt;n&lt;1 slow the ship.  The <br>                value 1 is the same as no friction (default).  Values &gt;1 will <br>                cause the ship to automatically accelerate.  Values &lt;0, who <br>                knows? <br>            Tag As Variant - General storage for the user. <br>        Methods <br>            CreateSprite(Left As Integer, Top As Integer, u As Variant) As Sprite <br>                A function which creates a new instance of a sprite of this <br>                class, at the given location.  U is passed to the Init event, <br>                allowing the user to pass information into that event.  This <br>                function returns a reference to the sprite object created. <br>        Events <br>                Init(s As Sprite, u As Variant) - Fired when sprite is first <br>                    created.  U is the parameter passed to CreateSprite(). <br>                Tick(s As Sprite) - Fired every s.TickEvt timer ticks. <br>                Border(s As Sprite, brd As Border) - Fired when sprite touches <br>                    a display border indicated by the Brd property.  Calling <br>                    s.IgnoreMove() during this event will cause the sprite <br>                    to return to its position it was at before the move which <br>                    caused this event. <br>                Term(s As Sprite) - Called before sprite object is destroyed. <br>                LastTerm() - Fired when no more sprites of this sprite class <br>                    exist. <br> <br>    Sprite Objects <br>        R/O Properties <br>            Application - Returns the Application object. <br>            Parent - Returns the Game object. <br>            Width As Integer - Width of sprite's graphic in pixels. <br>            Height As Integer - Height of sprite's graphic in pixels. <br>        R/W Properties <br>            Left As Single - Left position in pixels (may be fractional). <br>            Top As Single - Top position in pixels (may be fractional). <br>            Vx As Single - Horizontal velocity in pixels per TickMove ticks <br>                (may be fractional). <br>            Vy As Single - Vertical velocity in pixels per TickMove ticks <br>                (may be fractional). <br>            Ax As Single - Horizontal acceleration in pixels per TickMove ticks <br>                (may be fractional). <br>            Ay As Single - Vertical accekeration in pixels per TickMove ticks <br>                (may be fractional). <br>            FrictionX As Single - Horizontal friction.  See description of <br>                Friction for SpriteClass (may be fractional). <br>            FrictionY As Single - Vertical friction.  See description of <br>                Friction for SpriteClass (may be fractional). <br>            Image As Integer - Graphic associated with this sprite.  See <br>                SpruuidP.pix and SpruuidP.hh for a list of numbers and their <br>                graphics. <br>            TickMove As Integer - The number of ticks between times the sprite <br>                engine move this sprite by Vx and Vy. <br>            TickEvt As Integer - The number of ticks between SpriteClass_Tick <br>                events. <br>            Visible As Boolean - Indicates whether this sprite is visible or <br>                not.  Invisible sprites never cause Collide events. <br>            Tag As Variant - General storage for the user. <br>        Methods <br>            MoveTo(Left As Single, Top As Single) - Move the sprite to the <br>                given location. <br>            MoveBy(Left As Single, Top As Single) - Move the sprite by the <br>                given amount. <br>            Remove() - Destroys the sprite. <br>            Refresh() - Forces the sprite to repaint, if it is visible. <br>            IgnoreMove() - Called from within the Collide or Border events <br>                to indicate that the move which caused this sprite to collide <br>                or touch a border should not be made. <br> <br>//--- EOF ----------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

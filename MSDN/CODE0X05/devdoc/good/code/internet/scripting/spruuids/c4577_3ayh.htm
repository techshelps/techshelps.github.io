<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSGLOOP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4589"></a>MSGLOOP.H</h2>
<pre><code>//--------------------------------------------------------------------------- <br>// MsgLoop.h <br>//--------------------------------------------------------------------------- <br>// (C) Copyright 1995-1997 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//--------------------------------------------------------------------------- <br> <br> <br>//--------------------------------------------------------------------------- <br>// In we need to track per Component. <br>//--------------------------------------------------------------------------- <br>typedef struct tagCOMP <br>  { <br>  IOleComponent *pcomp; <br>  } COMP; <br> <br>#define cCOMP     10 <br>#define icompNIL  0xffffffff <br> <br> <br>//--------------------------------------------------------------------------- <br>// <br>//--------------------------------------------------------------------------- <br>class CMsgLoop : public IOleComponentManager <br>  { <br>public: <br>  // *** Constructor / Destructor *** <br>  CMsgLoop(HWND hwnd); <br>  virtual ~CMsgLoop(); <br> <br>  // *** IUnknown methods *** <br>  STDMETHOD(QueryInterface)(REFIID riid, void **ppvObj); <br>  STDMETHOD_(ULONG, AddRef)(void); <br>  STDMETHOD_(ULONG, Release)(void); <br> <br>  // *** IOleComponentManager Methods <br>  STDMETHOD(QueryService)(REFGUID guidService, REFIID iid, void **ppvObj); <br>  STDMETHOD_(BOOL, FRegisterComponent)(IOleComponent *piComponent, const CMGRRINFO *pcrinfo, DWORD *pdwComponentID); <br>  STDMETHOD_(BOOL, FRevokeComponent)(DWORD dwComponentID); <br>  STDMETHOD_(BOOL, FUpdateComponentRegistration)(DWORD dwComponentID, const CMGRRINFO *pcrinfo); <br>  STDMETHOD_(void, OnComponentActivate)(DWORD dwComponentID); <br>  STDMETHOD_(BOOL, FSetTrackingComponent)(DWORD dwComponentID, BOOL fTrack); <br>  STDMETHOD_(void, OnComponentEnterState)(DWORD dwComponentID, ULONG uStateID, ULONG uContext, ULONG cpicmExclude, IOleComponentManager **rgpicmExclude, DWORD dwReserved); <br>  STDMETHOD_(BOOL, FOnComponentExitState)(DWORD dwComponentID, ULONG uStateID, ULONG uContext, ULONG cpicmExclude, IOleComponentManager **rgpicmExclude); <br>  STDMETHOD_(BOOL, FInState)(ULONG uStateID, void *pvoid); <br>  STDMETHOD_(BOOL, FContinueIdle)(void); <br>  STDMETHOD_(BOOL, FPushMessageLoop)(DWORD dwComponentID, ULONG uReason, void *pvLoopData); <br>  STDMETHOD_(BOOL, FCreateSubComponentManager)(IUnknown *piunkOuter, IUnknown *piunkServProv, REFIID riid, void **ppvObj); <br>  STDMETHOD_(BOOL, FGetParentComponentManager)(IOleComponentManager **ppicm); <br>  STDMETHOD_(BOOL, FGetActiveComponent)(DWORD dwReserved, IOleComponent **ppic); <br> <br>  // *** Implementation of FPushMessageLoop from IOleComponentManager <br>  BOOL PumpMessage(DWORD icomp, ULONG uReason, void *pvLoopData); <br>  void ProcessMessage(MSG *pmsg); <br>  void MessageLoop(DWORD icomp, ULONG uReason, void *pvLoopData); <br>  void DoIdleProcessing(void); <br>  BOOL DoIdle(void); <br> <br>  // *** Publicly available state *** <br>  COMP   m_rgcomp[cCOMP]; // Array of components for our compmgr <br>  DWORD  m_icompActive; <br>  BOOL   m_fInState; <br>  DWORD  m_icompState; <br>  ULONG  m_uStateID; <br>  BOOL   m_fScrptReset; <br>  BOOL   m_fQuitting; <br>  HWND   m_hwnd; <br>  HACCEL m_haccel; <br> <br>private: <br>  ULONG m_cref; <br>  ULONG m_cMsgLoop; <br>  DWORD m_icompMsgLoop; <br> <br>  // DEBUG info <br>  #define SIG_MsgLoop 'MsgL' <br>  DECLARE_SIGNATURE(SIG_MsgLoop); <br>  }; <br> <br>//--- EOF ------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

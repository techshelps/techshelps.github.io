<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RLISTCTR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4387"></a>RLISTCTR.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       RListCtrl.cpp : implementation file  <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "stdafx.h" <br>#include "chappy.h" <br>#include "RListCtr.h" <br>#include "Utility.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>#include "ChppyVw.h" <br> <br>#defineROOM_LIST_MENU5 <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CRoomListCtrl <br> <br>CRoomListCtrl::CRoomListCtrl() <br>{ <br>m_iSelectedItem = -1; <br>m_iNumOfItems= -1; <br>m_iNumOfColumns = 0; <br>} <br> <br>CRoomListCtrl::~CRoomListCtrl() <br>{ <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CRoomListCtrl, CListCtrl) <br>//{{AFX_MSG_MAP(CRoomListCtrl) <br>ON_WM_RBUTTONDOWN() <br>ON_WM_LBUTTONDOWN() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CRoomListCtrl message handlers <br> <br>void CRoomListCtrl::OnRButtonDown(UINT nFlags, CPoint point)  <br>{ <br>CListCtrl::OnRButtonDown(nFlags, point); <br> <br>CPoint pt(point); <br>ClientToScreen(&amp;pt); <br>PopMenu(ROOM_LIST_MENU, pt); <br> <br>} <br> <br>void CRoomListCtrl::OnLButtonDown(UINT nFlags, CPoint point)  <br>{ <br>m_iSelectedItem = HitTest(point); <br> <br>CListCtrl::OnLButtonDown(nFlags, point); <br>} <br> <br>void CRoomListCtrl::InsertNextItem(CString &amp;szItem_p) <br>{ <br>m_iNumOfItems++; <br>m_iNumOfItems = InsertItem(m_iNumOfItems, szItem_p); <br>ASSERT (-1 != m_iNumOfItems); <br>} <br> <br>void CRoomListCtrl::AddSubItem(long iSubItemIndex_p, CString &amp;szItem_p) <br>{ <br>LV_ITEM ItemData; <br>ItemData.mask= LVIF_TEXT; <br>ItemData.iItem= m_iNumOfItems; <br>ItemData.iSubItem= iSubItemIndex_p; <br>ItemData.pszText= (LPSTR) (LPCSTR) szItem_p; <br>BOOL ret = SetItem (&amp;ItemData); <br>ASSERT (ret) ; <br>} <br> <br>void CRoomListCtrl::ClearList() <br>{ <br>DeleteAllItems(); <br>m_iNumOfItems = -1; <br> <br>for (; m_iNumOfColumns &gt;= 0; m_iNumOfColumns--) <br>{ <br>DeleteColumn(m_iNumOfColumns); <br>} <br>m_iNumOfColumns = 0; <br>} <br> <br>void CRoomListCtrl::AddColumn(CString &amp; szColumnName_p) <br>{ <br>//set the colums <br>LV_COLUMN ColData; <br>ColData.mask= LVCF_TEXT | LVCF_FMT | LVCF_WIDTH; <br> <br>ColData.fmt= LVCFMT_LEFT; <br>ColData.cx= 200; <br>ColData.pszText= (LPSTR) (LPCSTR) szColumnName_p; <br> <br> <br>int iCol =InsertColumn(m_iNumOfColumns, &amp;ColData); <br>ASSERT (m_iNumOfColumns == iCol);  <br>m_iNumOfColumns++; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PLTREE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4379"></a>PLTREE.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       PLTree.cpp : implementation file <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "stdafx.h" <br>#include "Chappy.h" <br>#include "PLTree.h" <br>#include "Utility.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPartListTree <br> <br>CPartListTree::CPartListTree() <br>{ <br>m_iSelectedItem = NULL; <br>} <br> <br>CPartListTree::~CPartListTree() <br>{ <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CPartListTree, CTreeCtrl) <br>//{{AFX_MSG_MAP(CPartListTree) <br>ON_WM_SIZE() <br>ON_WM_RBUTTONDOWN() <br>ON_WM_LBUTTONDOWN() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPartListTree message handlers <br>void CPartListTree::OnSize(UINT nType, int cx, int cy)  <br>{ <br>m_cx = cx + 8; <br> <br>CTreeCtrl::OnSize(nType, cx, cy); <br> <br>//TRACE1("CPartListTree::OnSize = %u\n", m_cx); <br> <br>} <br> <br>int CPartListTree::GetCx() <br>{ <br>return m_cx; <br>} <br> <br>void CPartListTree::DeleteItemFromText(LPCTSTR lpszItemText_p) <br>{ <br>HTREEITEM hItem = FindItemFromText(lpszItemText_p); <br>//delete all children <br>HTREEITEM hChildItem = NULL; <br>while (hChildItem = GetChildItem(hItem)) <br>{ <br>DeleteItem (hChildItem); <br>} <br> <br>DeleteItem (hItem); <br>} <br> <br>HTREEITEM CPartListTree::FindItemFromText(LPCTSTR lpszItemText_p) <br>{ <br> <br>HTREEITEM hItem = GetFirstVisibleItem(); <br> <br>while (hItem) <br>{ <br>CString szText =  GetItemText(hItem); <br>if (szText == lpszItemText_p)  <br>{ <br>return hItem; <br>} <br> <br> hItem = GetNextVisibleItem(hItem); <br>} <br>return NULL; <br> <br>} <br> <br>void CPartListTree::OnLButtonDown(UINT nFlags, CPoint point)  <br>{ <br>UINT iFlags;  <br>m_iSelectedItem = HitTest(point, &amp;iFlags); <br> <br>HTREEITEM htTemp = GetParentItem(m_iSelectedItem); <br>m_iSelectedItem = (htTemp) ? htTemp : m_iSelectedItem; <br> <br>CTreeCtrl::OnLButtonDown(nFlags, point); <br>} <br> <br>void CPartListTree::OnRButtonDown(UINT nFlags, CPoint point)  <br>{ <br>CTreeCtrl::OnRButtonDown(nFlags, point); <br> <br>CPoint pt(point); <br>ClientToScreen(&amp;pt); <br>PopMenu(PART_LIST_MENU, pt); <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHATX.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4378"></a>MSCHATX.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       MsChatX.H <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef __MSCHATX_H__ <br>#define __MSCHATX_H__ <br>// Machine generated IDispatch wrapper class(es) created with ClassWizard <br>///////////////////////////////////////////////////////////////////////////// <br>// IChatItems wrapper class <br> <br>class IChatItems : public COleDispatchDriver <br>{ <br>public: <br>IChatItems() {}// Calls COleDispatchDriver default constructor <br>IChatItems(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} <br>IChatItems(const IChatItems&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>CString GetAssociatedType(); <br>void SetAssociatedType(LPCTSTR lpszNewValue); <br>VARIANT GetValidItems(); <br>long GetItemValid(LPCTSTR ItemName); <br>VARIANT GetItem(LPCTSTR ItemName); <br>void SetItem(LPCTSTR ItemName, const VARIANT&amp; newValue); <br>void InvalidateItem(LPCTSTR ItemName); <br>}; <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelObject wrapper class <br> <br>class IChannelObject : public COleDispatchDriver <br>{ <br>public: <br>IChannelObject() {}// Calls COleDispatchDriver default constructor <br>IChannelObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} <br>IChannelObject(const IChannelObject&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>long GetIndex(); <br>long GetChannelState(); <br>CString GetChannelName(); <br>void SetChannelName(LPCTSTR lpszNewValue); <br>CString GetChannelTopic(); <br>long GetMemberCount(); <br>CString GetMemberIdentity(const VARIANT&amp; vMemberNickname); <br>long GetMemberModes(const VARIANT&amp; vMemberNickname); <br>LPDISPATCH GetChannelProperty(LPCTSTR ChannelPropertyName); <br>LPDISPATCH GetMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; vMemberNickname); <br>void CreateChannel(const VARIANT&amp; ChannelName, const VARIANT&amp; ChannelKeyword, const VARIANT&amp; ChannelModes, const VARIANT&amp; MaxMemberCount); <br>void JoinChannel(const VARIANT&amp; ChannelName, const VARIANT&amp; ChannelKeyword); <br>void LeaveChannel(); <br>void SendMessage(long MessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag); <br>void SendInvitation(LPCTSTR Nickname); <br>void ListMembers(LPDISPATCH MemberQueryItems); <br>void QueryMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; MemberNickname); <br>void ChangeMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; NewMemberProperty, const VARIANT&amp; MemberNickname); <br>void BanMembers(LPDISPATCH MemberItems, long Set); <br>void KickMember(LPCTSTR MemberNickname, const VARIANT&amp; Reason); <br>void QueryChannelProperty(LPCTSTR ChannelPropertyName); <br>void ChangeChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; NewChannelProperty); <br>}; <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelsCollection wrapper class <br> <br>class IChannelsCollection : public COleDispatchDriver <br>{ <br>public: <br>IChannelsCollection() {}// Calls COleDispatchDriver default constructor <br>IChannelsCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} <br>IChannelsCollection(const IChannelsCollection&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>LPDISPATCH GetItem(const VARIANT&amp; vIndex); <br>LPUNKNOWN Get_NewEnum(); <br>long GetCount(); <br>LPDISPATCH Add(const VARIANT&amp; vIndex, const VARIANT&amp; vKey); <br>void Remove(const VARIANT&amp; vIndex); <br>}; <br>///////////////////////////////////////////////////////////////////////////// <br>// IMsChatPr wrapper class <br> <br>class IMsChatPr : public COleDispatchDriver <br>{ <br>public: <br>IMsChatPr() {}// Calls COleDispatchDriver default constructor <br>IMsChatPr(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} <br>IMsChatPr(const IMsChatPr&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>long GetConnectionState(); <br>long GetConnectionType(); <br>long GetOpeningChannels(); <br>long GetPropertyAccessTimeOut(); <br>void SetPropertyAccessTimeOut(long nNewValue); <br>long GetProcessProtocolMessages(); <br>void SetProcessProtocolMessages(long nNewValue); <br>CString GetConvertedString(long ConversionType, long ConversionSource, LPCTSTR Source, long PostProcess); <br>LPDISPATCH GetChannels(); <br>LPDISPATCH GetNewChatItems(); <br>long GetMaxStringLength(long StringType); <br>CString GetServerName(); <br>CString GetNickname(); <br>LPDISPATCH GetUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname); <br>LPDISPATCH GetChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName); <br>LPDISPATCH GetServerProperty(LPCTSTR ServerPropertyName); <br>void AboutBox(); <br>void Connect(LPCTSTR ServerName); <br>void Login(LPCTSTR ServerName, LPCTSTR Nickname, const VARIANT&amp; UserName, const VARIANT&amp; RealName, const VARIANT&amp; Password, const VARIANT&amp; SecurityPackages); <br>void Disconnect(); <br>void CancelConnectLogin(); <br>void ListChannels(LPDISPATCH ChannelQueryItems); <br>void QueryChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName); <br>void KillChannel(LPCTSTR ChannelName, const VARIANT&amp; Reason); <br>void ListUsers(LPDISPATCH UserQueryItems); <br>void QueryUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname); <br>void ChangeUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; NewUserProperty, const VARIANT&amp; Nickname); <br>void IgnoreUsers(LPDISPATCH UserItems, long Set); <br>void BanUsers(LPDISPATCH UserItems, long Set, const VARIANT&amp; Reason, const VARIANT&amp; Duration); <br>void KickUser(LPCTSTR Nickname, const VARIANT&amp; Reason); <br>void ChangeNickname(LPCTSTR NewNickname); <br>void SetAway(long Away, const VARIANT&amp; TextMessage); <br>void QueryServerProperty(LPCTSTR ServerPropertyName); <br>void SendInvitation(LPCTSTR Nickname, const VARIANT&amp; ChannelName); <br>void SendPrivateMessage(long PrivateMessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag); <br>void SendProtocolMessage(LPCTSTR TextMessage); <br>}; <br>///////////////////////////////////////////////////////////////////////////// <br>// _IMsChatPrEvent wrapper class <br> <br>class _IMsChatPrEvent : public COleDispatchDriver <br>{ <br>public: <br>_IMsChatPrEvent() {}// Calls COleDispatchDriver default constructor <br>_IMsChatPrEvent(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} <br>_IMsChatPrEvent(const _IMsChatPrEvent&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>void OnConnectionState(long NewConnectionState); <br>void OnConnectionError(long ErrorCode, LPCTSTR Description, const VARIANT&amp; ChannelName); <br>void OnChannelState(LPDISPATCH Channel, long NewChannelState); <br>void OnChannelError(LPDISPATCH Channel, long ErrorCode, LPCTSTR Description); <br>void OnBeginEnumeration(LPDISPATCH Channel, long EnumType); <br>void OnEndEnumeration(LPDISPATCH Channel, long EnumType); <br>void OnAddMember(LPDISPATCH Channel, LPCTSTR Nickname, LPDISPATCH MemberItems); <br>void OnDelMember(LPDISPATCH Channel, LPCTSTR Nickname); <br>void OnUserProperty(LPDISPATCH UserItems); <br>void OnUserPropertyChanged(LPCTSTR ModifiedNickname, LPCTSTR ModifierNickname, LPCTSTR UserPropertyName, const VARIANT&amp; OldUserProperty, const VARIANT&amp; NewUserProperty); <br>void OnMemberProperty(LPDISPATCH Channel, LPDISPATCH MemberItems); <br>void OnMemberPropertyChanged(LPDISPATCH Channel, LPCTSTR ModifiedNickname, LPCTSTR ModifierNickname, LPCTSTR MemberPropertyName, const VARIANT&amp; OldMemberProperty, const VARIANT&amp; NewMemberProperty); <br>void OnMemberKicked(LPDISPATCH Channel, LPCTSTR KickedNickname, LPCTSTR KickerNickname, LPCTSTR Reason); <br>void OnChannelProperty(LPDISPATCH Channel, LPDISPATCH ChannelItems); <br>void OnChannelPropertyChanged(LPDISPATCH Channel, LPCTSTR ModifierNickname, LPCTSTR ChannelPropertyName, const VARIANT&amp; OldChannelProperty, const VARIANT&amp; NewChannelProperty); <br>void OnServerProperty(LPDISPATCH ServerItems); <br>void OnInvitation(LPCTSTR ChannelName, LPDISPATCH InviterItems); <br>void OnKnock(LPDISPATCH Channel, LPDISPATCH KnockerItems, long ErrorCode); <br>void OnPrivateMessage(LPCTSTR SenderNickname, long PrivateMessageType, const VARIANT&amp; Message, const VARIANT&amp; DataMessageTag); <br>void OnServerTextMessage(long ServerMessageType, LPCTSTR Text); <br>void OnMessage(LPDISPATCH Channel, LPCTSTR SenderNickname, long MessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag); <br>void OnProtocolMessage(LPCTSTR MessagePrefix, LPCTSTR MessageCommand, const VARIANT&amp; MessageParameters, BOOL* EnableDefault); <br>}; <br> <br>#endif //__MSCHATX_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

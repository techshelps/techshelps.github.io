<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FLATTB.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4362"></a>FLATTB.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       FlatTB.h <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef _FLATTOOLBAR_H_ <br>#define _FLATTOOLBAR_H_ <br> <br>struct AFX_TBBUTTON;        // private to implementation <br> <br>#ifndef _MAC <br>HBITMAP AFXAPI AfxLoadSysColorBitmap(HINSTANCE hInst, HRSRC hRsrc); <br>#else <br>HBITMAP AFXAPI AfxLoadSysColorBitmap(HINSTANCE hInst, HRSRC hRsrc, <br>HDC hDCGlyphs, BOOL bMonochrome); <br>#endif <br> <br>// TONYCL: START: OFFICE97 LOOK AND FEEL <br>#define TBBS_UPSTATEMAKELONG(0,0x80) <br>// TONYCL: END: OFFICE97 LOOK AND FEEL <br> <br>class CFlatToolbar : public CControlBar <br>{ <br>DECLARE_DYNAMIC(CFlatToolbar) <br> <br>// Construction <br>public: <br>CFlatToolbar(); <br>BOOL Create(CWnd* pParentWnd, <br>DWORD dwStyle = WS_CHILD | WS_VISIBLE | CBRS_TOP, <br>UINT nID = AFX_IDW_TOOLBAR); <br> <br>void SetSizes(SIZE sizeButton, SIZE sizeImage); <br>// button size should be bigger than image <br>void SetHeight(int cyHeight); <br>// call after SetSizes, height overrides bitmap size <br>BOOL LoadBitmap(LPCTSTR lpszResourceName); <br>BOOL LoadBitmap(UINT nIDResource); <br>BOOL SetButtons(const UINT* lpIDArray, int nIDCount); <br>// lpIDArray can be NULL to allocate empty buttons <br> <br>// Support loading a toolbar from a resource <br>BOOL LoadToolBar(LPCTSTR lpszResourceName); <br>inline BOOL LoadToolBar(UINT nIDResource) { return LoadToolBar(MAKEINTRESOURCE(nIDResource)); } <br> <br> <br>// Attributes <br>public: // standard control bar things <br>int CommandToIndex(UINT nIDFind) const; <br>UINT GetItemID(int nIndex) const; <br>virtual void GetItemRect(int nIndex, LPRECT lpRect) const; <br>UINT GetButtonStyle(int nIndex) const; <br>void SetButtonStyle(int nIndex, UINT nStyle); <br> <br>public: <br>// for changing button info <br>void GetButtonInfo(int nIndex, UINT&amp; nID, UINT&amp; nStyle, int&amp; iImage) const; <br>void SetButtonInfo(int nIndex, UINT nID, UINT nStyle, int iImage); <br> <br>// Implementation <br>public: <br>int m_nUpButtonIndex; <br>virtual ~CFlatToolbar(); <br>virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz); <br> <br>#ifdef _DEBUG <br>virtual void AssertValid() const; <br>virtual void Dump(CDumpContext&amp; dc) const; <br>#endif <br> <br>protected: <br>inline AFX_TBBUTTON* _GetButtonPtr(int nIndex) const; <br>void InvalidateButton(int nIndex); <br>void UpdateButton(int nIndex); <br>void CreateMask(int iImage, CPoint offset,  <br>BOOL bHilite, BOOL bHiliteShadow); <br> <br>// for custom drawing <br>struct DrawState <br>{ <br>HBITMAP hbmMono; <br>HBITMAP hbmMonoOld; <br>HBITMAP hbmOldGlyphs; <br>}; <br>BOOL PrepareDrawButton(DrawState&amp; ds); <br>BOOL DrawButton(CDC* pDC, int x, int y, int iImage, UINT nStyle); <br>#ifdef _MAC <br>BOOL DrawMonoButton(CDC* pDC, int x, int y, int dx, int dy, <br>int iImage, UINT nStyle); <br>#endif <br>void EndDrawButton(DrawState&amp; ds); <br> <br>protected: <br>CSize m_sizeButton;         // size of button <br>CSize m_sizeImage;          // size of glyph <br>int m_cxSharedBorder;       // shared x border between buttons <br>int m_cySharedBorder;       // shared y border between buttons <br>HBITMAP m_hbmImageWell;     // glyphs only <br>int m_iButtonCapture;       // index of button with capture (-1 =&gt; none) <br>HRSRC m_hRsrcImageWell;     // handle to loaded resource for image well <br>HINSTANCE m_hInstImageWell; // instance handle to load image well from <br> <br>#ifdef _MAC <br>// Macintosh toolbars need per-toolbar DCs in order to <br>// work correctly in multiple-monitor environments <br> <br>HDC m_hDCGlyphs;            // per-toolbar DC for glyph images <br>HDC m_hDCMono;              // per-toolbar DC for mono glyph masks <br>#endif <br>virtual void DoPaint(CDC* pDC); <br>virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler); <br>virtual int HitTest(CPoint point); <br>virtual int OnToolHitTest(CPoint point, TOOLINFO* pTI) const; <br> <br>//{{AFX_MSG(CFlatToolbar) <br>afx_msg void OnLButtonDown(UINT nFlags, CPoint point); <br>afx_msg void OnMouseMove(UINT nFlags, CPoint point); <br>afx_msg void OnLButtonUp(UINT nFlags, CPoint point); <br>afx_msg void OnCancelMode(); <br>afx_msg void OnSysColorChange(); <br>afx_msg void OnWindowPosChanged( WINDOWPOS* lpwndpos ); <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Auxiliary System/Screen metrics <br> <br>struct GLOBAL_DATA <br>{ <br>// system metrics <br>int cxBorder2, cyBorder2; <br> <br>// device metrics for screen <br>int cxPixelsPerInch, cyPixelsPerInch; <br> <br>// solid brushes with convenient gray colors and system colors <br>HBRUSH hbrLtGray, hbrDkGray; <br>HBRUSH hbrBtnHilite, hbrBtnFace, hbrBtnShadow; <br>HBRUSH hbrWindowFrame; <br>HPEN hpenBtnHilite, hpenBtnShadow, hpenBtnText; <br> <br>// color values of system colors used for CToolBar <br>COLORREF clrBtnFace, clrBtnShadow, clrBtnHilite; <br>COLORREF clrBtnText, clrWindowFrame; <br> <br>// special GDI objects allocated on demand <br>HFONT   hStatusFont; <br>HFONT   hToolTipsFont; <br> <br>// other system information <br>UINT    nWinVer;        // Major.Minor version numbers <br>BOOLbWin32s;// TRUE if Win32s (or Windows 95) <br>BOOL    bWin4;          // TRUE if Windows 4.0 <br>BOOL    bNotWin4;       // TRUE if not Windows 4.0 <br>BOOL    bSmCaption;     // TRUE if WS_EX_SMCAPTION is supported <br>BOOLbWin31; // TRUE if actually Win32s on Windows 3.1 <br> <br>// Implementation <br>GLOBAL_DATA(); <br>~GLOBAL_DATA(); <br>void UpdateSysColors(); <br>void UpdateSysMetrics(); <br>}; <br> <br>extern GLOBAL_DATA globalData; <br> <br>// Note: afxData.cxBorder and afxData.cyBorder aren't used anymore <br>#define CX_BORDER   1 <br>#define CY_BORDER   1 <br> <br>// determine number of elements in an array (not bytes) <br>#define _countof(array) (sizeof(array)/sizeof(array[0])) <br> <br>BOOL AFXAPI AfxCustomLogFont(UINT nIDS, LOGFONT* pLogFont); <br>void AFXAPI AfxDeleteObject(HGDIOBJ* pObject); <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#endif //!_FLATTOOLBAR_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

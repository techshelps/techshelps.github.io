<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHPPYVW.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4356"></a>CHPPYVW.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       ChappyView.h : interface of the CChappyView class <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef __CHAPPYVIEW_H__ <br>#define __CHAPPYVIEW_H__ <br> <br>#include "globals.h" <br> <br>#define LIST_TAB0 <br>#define MESSAGE_TAB1 <br>#define MAX_ROOMS50 <br> <br>#define _countof(array) (sizeof(array)/sizeof(array[0])) <br> <br>#include "InputRE.h" <br>#include "RTab.h" <br>#include "TB.h" <br>#include "Room.h" <br>#include "ChppyDoc.h" <br>//#include "mschatx.h" <br>#include "mschatpr.h" <br>#include "RListCtr.h" <br>#include "History.h" <br> <br>#define INPUT_RICHEDIT_SIZE 85 <br>#define SEND_TB_SIZE29  <br> <br>class CChappyView : public CView <br>{ <br>protected: // create from serialization only <br>CChappyView(); <br>DECLARE_DYNCREATE(CChappyView) <br> <br>// Attributes <br>public: <br>CChappyDoc* GetDocument(); <br> <br>// Operations <br>public: <br>//inline CWnd &amp;GetHistoryCtrl(){ASSERT (m_iVisibleTab); return m_ctrlHistoryWnd[m_iVisibleTab];}; <br>inline CWnd &amp;GetTabCtrl(){return m_ctrlTabWnd;}; <br>inline CWnd &amp;GetToolBarCtrl(){return m_ctrlSendToolBar;}; <br>inline CWnd &amp;GetInputCtrl(){return m_ctrlInputWnd;}; <br> <br>inline long GetServerConnectionState(){return m_iServerConnectionState;};  <br>inline long GetServerConnectionType(){return m_iServerConnectionType;};  <br>inline long GetCurrentChannelState(){return ((csLogged &lt;= m_iServerConnectionState)&amp;&amp;  <br> (IsRoomTab(m_iVisibleTab))&amp;&amp; <br> (m_ChatRoom[m_iVisibleTab]-&gt;GetChannelObj())) <br>? m_ChatRoom[m_iVisibleTab]-&gt;GetChannelObj().GetChannelState()  <br>: chsClosed;}; <br> <br>inline BOOL IsRoomTab(long iTabNumber){return (m_iVisibleTab &gt; 1);}; <br> <br>inline long GetTabFromIndex(LPDISPATCH Channel_p) { return (GetIndexFromChannel(Channel_p));}; <br> <br> <br>// Overrides <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CChappyView) <br>public: <br>virtual void OnDraw(CDC* pDC);  // overridden to draw this view <br>virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs); <br>virtual void OnInitialUpdate(); <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br>public: <br>void EnterRoom(long iTab, CString &amp;szRoom, CString &amp;szPassword); <br>long AddTab(CString &amp;szTitle_p); <br> <br>longm_iServerConnectionState; <br>longm_iServerConnectionType; <br> <br>void UpdateStatusUI(); <br>long GetIndexFromChannel(LPDISPATCH Channel_p); <br>void PostChatMessage(long iMsgType_p); <br>virtual ~CChappyView(); <br> <br>BOOL OnToolTipNotify( UINT id, NMHDR * pNMHDR, LRESULT * pResult ); <br> <br>#ifdef _DEBUG <br>virtual void AssertValid() const; <br>virtual void Dump(CDumpContext&amp; dc) const; <br>#endif <br> <br>private: <br>BOOLm_bShowRoomList; <br>intm_cy;//window size <br>intm_cx; <br> <br>intm_iLastTab;//last tab added <br>intm_iVisibleTab;//current tab selected <br> <br>CRoom*m_ChatRoom[MAX_ROOMS];//the list of rooms  <br>//if you connect to more then 256 rooms you are a freak ! <br> <br>//the chat OCX <br>//IMsChatPrm_IChatPr; <br>CMsChatPrm_ocxChat; <br> <br>CStringm_szMyAlias; <br> <br>CRoomsTabm_ctrlTabWnd; <br>CTBm_ctrlSendToolBar; <br>CInputREditm_ctrlInputWnd; <br>CRoomListCtrlm_ctrlRoomList; <br>CHistorym_ctrlPrivateMsg; <br> <br>private: <br>void CleanUp(); <br> <br>protected: <br> <br>// Generated message map functions <br>protected: <br>//{{AFX_MSG(CChappyView) <br>afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct); <br>afx_msg void OnSelchangeTab1(NMHDR* pNMHDR, LRESULT* pResult); <br>afx_msg void OnSize(UINT nType, int cx, int cy); <br>afx_msg void OnFileNew(); <br>afx_msg void OnDestroy(); <br>afx_msg void OnBtnSend(); <br>afx_msg void OnBtnWhisper(); <br>afx_msg void OnRoomConnect(); <br>afx_msg void OnBtnDo(); <br>afx_msg void OnBtnThink(); <br>afx_msg void OnRoomDisconnect(); <br>afx_msg void OnUpdateRoomConnect(CCmdUI* pCmdUI); <br>afx_msg void OnUpdateRoomDisconnect(CCmdUI* pCmdUI); <br>afx_msg void OnRoomLogin(); <br>afx_msg void OnUpdateRoomLogin(CCmdUI* pCmdUI); <br>afx_msg void OnUpdateRoomLogout(CCmdUI* pCmdUI); <br>afx_msg void OnRoomLogout(); <br>afx_msg void OnRoomListrooms(); <br>afx_msg void OnRoomListEnterRoom(); <br>afx_msg void OnUpdateRoomListEnterRoom(CCmdUI* pCmdUI); <br>afx_msg void OnOnBeginEnumerationMschatpr(LPDISPATCH Channel, long EnumType); <br>afx_msg void OnOnEndEnumerationMschatpr(LPDISPATCH Channel, long EnumType); <br>afx_msg void OnOnMessageMschatpr(LPDISPATCH Channel, LPCTSTR SenderNickname, long MessageType, const VARIANT FAR&amp; Message, const VARIANT FAR&amp; RecipientNicknames, const VARIANT FAR&amp; DataMessageTag); <br>afx_msg void OnOnPrivateMessageMschatpr(LPCTSTR SenderNickname, long PrivateMessageType, const VARIANT FAR&amp; Message, const VARIANT FAR&amp; DataMessageTag); <br>afx_msg void OnOnAddMemberMschatpr(LPDISPATCH Channel, LPCTSTR Nickname, LPDISPATCH MemberItems); <br>afx_msg void OnOnDelMemberMschatpr(LPDISPATCH Channel, LPCTSTR Nickname); <br>afx_msg void OnOnChannelStateMschatpr(LPDISPATCH Channel, long NewChannelState); <br>afx_msg void OnOnConnectionStateMschatpr(long NewConnectionState); <br>afx_msg void OnOnProtocolMessageMschatpr(LPCTSTR MessagePrefix, LPCTSTR MessageCommand, const VARIANT FAR&amp; MessageParameters, BOOL FAR* EnableDefault); <br>afx_msg void OnOnServerTextMessageMschatpr(long ServerMessageType, LPCTSTR Text); <br>afx_msg void OnOnUserPropertyMschatpr(LPDISPATCH UserItems); <br>afx_msg void OnOnUserPropertyChangedMschatpr(LPCTSTR ModifiedNickname, LPCTSTR ModifierNickname, LPCTSTR UserPropertyName, const VARIANT FAR&amp; OldUserProperty, const VARIANT FAR&amp; NewUserProperty); <br>afx_msg void OnOnMemberPropertyMschatpr(LPDISPATCH Channel, LPDISPATCH MemberItems); <br>afx_msg void OnOnMemberPropertyChangedMschatpr(LPDISPATCH Channel, LPCTSTR ModifiedNickname, LPCTSTR ModifierNickname, LPCTSTR MemberPropertyName, const VARIANT FAR&amp; OldMemberProperty, const VARIANT FAR&amp; NewMemberProperty); <br>afx_msg void OnOnChannelPropertyMschatpr(LPDISPATCH Channel, LPDISPATCH ChannelItems); <br>afx_msg void OnOnChannelPropertyChangedMschatpr(LPDISPATCH Channel, LPCTSTR ModifierNickname, LPCTSTR ChannelPropertyName, const VARIANT FAR&amp; OldChannelProperty, const VARIANT FAR&amp; NewChannelProperty); <br>afx_msg void OnOnServerPropertyMschatpr(LPDISPATCH ServerItems); <br>afx_msg void OnOnChannelErrorMschatpr(LPDISPATCH Channel, long ErrorCode, LPCTSTR Description); <br>afx_msg void OnOnConnectionErrorMschatpr(long ErrorCode, LPCTSTR Description, const VARIANT FAR&amp; ChannelName); <br>afx_msg void OnOnInvitationMschatpr(LPCTSTR ChannelName, LPDISPATCH InviterItems); <br>afx_msg void OnOnKnockMschatpr(LPDISPATCH Channel, LPDISPATCH KnockerItems, long ErrorCode); <br>afx_msg void OnOnMemberKickedMschatpr(LPDISPATCH Channel, LPCTSTR KickedNickname, LPCTSTR KickerNickname, LPCTSTR Reason); <br>afx_msg void OnUpdateRoomListRooms(CCmdUI* pCmdUI); <br>afx_msg void OnPartlistKick(); <br>afx_msg void OnFileSave(); <br>afx_msg void OnUpdatePartlistBan(CCmdUI* pCmdUI); <br>afx_msg void OnPartlistBan(); <br>afx_msg void OnServerBanuser(); <br>afx_msg void OnUpdateServerBanuser(CCmdUI* pCmdUI); <br>afx_msg void OnUpdatePartlistKick(CCmdUI* pCmdUI); <br>afx_msg void OnPartlistMakehost(); <br>afx_msg void OnUpdatePartlistMakehost(CCmdUI* pCmdUI); <br>afx_msg void OnPartlistMakeparticipant(); <br>afx_msg void OnUpdatePartlistMakeparticipant(CCmdUI* pCmdUI); <br>afx_msg void OnUpdateFileSave(CCmdUI* pCmdUI); <br>afx_msg void OnHistoryClear(); <br>afx_msg void OnUpdateHistoryClear(CCmdUI* pCmdUI); <br>DECLARE_EVENTSINK_MAP() <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>#ifndef _DEBUG  // debug version in ChappyView.cpp <br>inline CChappyDoc* CChappyView::GetDocument() <br>   { return (CChappyDoc*)m_pDocument; } <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#endif //__CHAPPYVIEW_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

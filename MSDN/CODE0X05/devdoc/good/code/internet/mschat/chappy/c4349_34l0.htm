<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHATPR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4374"></a>MSCHATPR.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       MsChatPr.cpp <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ <br> <br>// NOTE: Do not modify the contents of this file.  If this class is regenerated by <br>//  Microsoft Visual C++, your modifications will be overwritten. <br> <br> <br>#include "stdafx.h" <br>#include "mschatpr.h" <br> <br>// Dispatch interfaces referenced by this interface <br>#include "chtitems.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMsChatPr <br> <br>IMPLEMENT_DYNCREATE(CMsChatPr, CWnd) <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMsChatPr properties <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMsChatPr operations <br> <br>long CMsChatPr::GetConnectionState() <br>{ <br>long result; <br>InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long CMsChatPr::GetConnectionType() <br>{ <br>long result; <br>InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long CMsChatPr::GetOpeningChannels() <br>{ <br>long result; <br>InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long CMsChatPr::GetPropertyAccessTimeOut() <br>{ <br>long result; <br>InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMsChatPr::SetPropertyAccessTimeOut(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>long CMsChatPr::GetProcessProtocolMessages() <br>{ <br>long result; <br>InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMsChatPr::SetProcessProtocolMessages(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>CString CMsChatPr::GetConvertedString(long ConversionType, long ConversionSource, LPCTSTR Source, long PostProcess) <br>{ <br>CString result; <br>static BYTE parms[] = <br>VTS_I4 VTS_I4 VTS_BSTR VTS_I4; <br>InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, parms, <br>ConversionType, ConversionSource, Source, PostProcess); <br>return result; <br>} <br> <br>LPDISPATCH CMsChatPr::GetChannels() <br>{ <br>LPDISPATCH result; <br>InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>CChatItems CMsChatPr::GetNewChatItems() <br>{ <br>LPDISPATCH pDispatch; <br>InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); <br>return CChatItems(pDispatch); <br>} <br> <br>long CMsChatPr::GetMaxStringLength(long StringType) <br>{ <br>long result; <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, parms, <br>StringType); <br>return result; <br>} <br> <br>CString CMsChatPr::GetServerName() <br>{ <br>CString result; <br>InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>CString CMsChatPr::GetNickname() <br>{ <br>CString result; <br>InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>CChatItems CMsChatPr::GetUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname) <br>{ <br>LPDISPATCH pDispatch; <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, parms, <br>UserPropertyName, &amp;Nickname); <br>return CChatItems(pDispatch); <br>} <br> <br>CChatItems CMsChatPr::GetChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName) <br>{ <br>LPDISPATCH pDispatch; <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, parms, <br>ChannelPropertyName, &amp;ChannelName); <br>return CChatItems(pDispatch); <br>} <br> <br>CChatItems CMsChatPr::GetServerProperty(LPCTSTR ServerPropertyName) <br>{ <br>LPDISPATCH pDispatch; <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, parms, <br>ServerPropertyName); <br>return CChatItems(pDispatch); <br>} <br> <br>void CMsChatPr::AboutBox() <br>{ <br>InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMsChatPr::Connect(LPCTSTR ServerName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ServerName); <br>} <br> <br>void CMsChatPr::Login(LPCTSTR ServerName, LPCTSTR Nickname, const VARIANT&amp; UserName, const VARIANT&amp; RealName, const VARIANT&amp; Password, const VARIANT&amp; SecurityPackages) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ServerName, Nickname, &amp;UserName, &amp;RealName, &amp;Password, &amp;SecurityPackages); <br>} <br> <br>void CMsChatPr::Disconnect() <br>{ <br>InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMsChatPr::CancelConnectLogin() <br>{ <br>InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMsChatPr::ListChannels(LPDISPATCH ChannelQueryItems) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH; <br>InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ChannelQueryItems); <br>} <br> <br>void CMsChatPr::QueryChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ChannelPropertyName, &amp;ChannelName); <br>} <br> <br>void CMsChatPr::KillChannel(LPCTSTR ChannelName, const VARIANT&amp; Reason) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ChannelName, &amp;Reason); <br>} <br> <br>void CMsChatPr::ListUsers(LPDISPATCH UserQueryItems) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH; <br>InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> UserQueryItems); <br>} <br> <br>void CMsChatPr::QueryUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> UserPropertyName, &amp;Nickname); <br>} <br> <br>void CMsChatPr::ChangeUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; NewUserProperty, const VARIANT&amp; Nickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x64, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> UserPropertyName, &amp;NewUserProperty, &amp;Nickname); <br>} <br> <br>void CMsChatPr::IgnoreUsers(LPDISPATCH UserItems, long Set) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH VTS_I4; <br>InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> UserItems, Set); <br>} <br> <br>void CMsChatPr::BanUsers(LPDISPATCH UserItems, long Set, const VARIANT&amp; Reason, const VARIANT&amp; Duration) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x66, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> UserItems, Set, &amp;Reason, &amp;Duration); <br>} <br> <br>void CMsChatPr::KickUser(LPCTSTR Nickname, const VARIANT&amp; Reason) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Nickname, &amp;Reason); <br>} <br> <br>void CMsChatPr::ChangeNickname(LPCTSTR NewNickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x68, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> NewNickname); <br>} <br> <br>void CMsChatPr::SetAway(long Away, const VARIANT&amp; TextMessage) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_VARIANT; <br>InvokeHelper(0x69, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Away, &amp;TextMessage); <br>} <br> <br>void CMsChatPr::QueryServerProperty(LPCTSTR ServerPropertyName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ServerPropertyName); <br>} <br> <br>void CMsChatPr::SendInvitation(LPCTSTR Nickname, const VARIANT&amp; ChannelName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Nickname, &amp;ChannelName); <br>} <br> <br>void CMsChatPr::SendPrivateMessage(long PrivateMessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> PrivateMessageType, &amp;Message, &amp;RecipientNicknames, &amp;DataMessageTag); <br>} <br> <br>void CMsChatPr::SendProtocolMessage(LPCTSTR TextMessage) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> TextMessage); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

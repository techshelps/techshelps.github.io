<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHATPR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4375"></a>MSCHATPR.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       MsChatPr.H <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ <br> <br>// NOTE: Do not modify the contents of this file.  If this class is regenerated by <br>//  Microsoft Visual C++, your modifications will be overwritten. <br> <br> <br>// Dispatch interfaces referenced by this interface <br>class CChatItems; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMsChatPr wrapper class <br> <br>class CMsChatPr : public CWnd <br>{ <br>protected: <br>DECLARE_DYNCREATE(CMsChatPr) <br>public: <br>CLSID const&amp; GetClsid() <br>{ <br>static CLSID const clsid <br>= { 0x39397c0, 0x46df, 0x11d0, { 0x99, 0xcb, 0x0, 0xc0, 0x4f, 0xd6, 0x44, 0x97 } }; <br>return clsid; <br>} <br>virtual BOOL Create(LPCTSTR lpszClassName, <br>LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, <br>CWnd* pParentWnd, UINT nID, <br>CCreateContext* pContext = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); } <br> <br>    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, CWnd* pParentWnd, UINT nID, <br>CFile* pPersist = NULL, BOOL bStorage = FALSE, <br>BSTR bstrLicKey = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID, <br>pPersist, bStorage, bstrLicKey); } <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>long GetConnectionState(); <br>long GetConnectionType(); <br>long GetOpeningChannels(); <br>long GetPropertyAccessTimeOut(); <br>void SetPropertyAccessTimeOut(long nNewValue); <br>long GetProcessProtocolMessages(); <br>void SetProcessProtocolMessages(long nNewValue); <br>CString GetConvertedString(long ConversionType, long ConversionSource, LPCTSTR Source, long PostProcess); <br>LPDISPATCH GetChannels(); <br>CChatItems GetNewChatItems(); <br>long GetMaxStringLength(long StringType); <br>CString GetServerName(); <br>CString GetNickname(); <br>CChatItems GetUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname); <br>CChatItems GetChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName); <br>CChatItems GetServerProperty(LPCTSTR ServerPropertyName); <br>void AboutBox(); <br>void Connect(LPCTSTR ServerName); <br>void Login(LPCTSTR ServerName, LPCTSTR Nickname, const VARIANT&amp; UserName, const VARIANT&amp; RealName, const VARIANT&amp; Password, const VARIANT&amp; SecurityPackages); <br>void Disconnect(); <br>void CancelConnectLogin(); <br>void ListChannels(LPDISPATCH ChannelQueryItems); <br>void QueryChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; ChannelName); <br>void KillChannel(LPCTSTR ChannelName, const VARIANT&amp; Reason); <br>void ListUsers(LPDISPATCH UserQueryItems); <br>void QueryUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; Nickname); <br>void ChangeUserProperty(LPCTSTR UserPropertyName, const VARIANT&amp; NewUserProperty, const VARIANT&amp; Nickname); <br>void IgnoreUsers(LPDISPATCH UserItems, long Set); <br>void BanUsers(LPDISPATCH UserItems, long Set, const VARIANT&amp; Reason, const VARIANT&amp; Duration); <br>void KickUser(LPCTSTR Nickname, const VARIANT&amp; Reason); <br>void ChangeNickname(LPCTSTR NewNickname); <br>void SetAway(long Away, const VARIANT&amp; TextMessage); <br>void QueryServerProperty(LPCTSTR ServerPropertyName); <br>void SendInvitation(LPCTSTR Nickname, const VARIANT&amp; ChannelName); <br>void SendPrivateMessage(long PrivateMessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag); <br>void SendProtocolMessage(LPCTSTR TextMessage); <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

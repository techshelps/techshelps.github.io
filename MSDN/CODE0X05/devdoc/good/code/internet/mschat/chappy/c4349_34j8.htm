<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HISTORY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4364"></a>HISTORY.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       History.cpp : implementation file <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "stdafx.h" <br>#include "Chappy.h" <br>#include "History.h" <br>#include "Globals.h" <br>#include "Utility.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CHistory <br> <br>CHistory::CHistory() <br>{ <br>} <br> <br>CHistory::~CHistory() <br>{ <br>DestroyWindow(); <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CHistory, CRichEditCtrl) <br>//{{AFX_MSG_MAP(CHistory) <br>ON_WM_RBUTTONDOWN() <br>ON_COMMAND(IDM_SELECT_FONT, OnSelectFont) <br>ON_WM_CREATE() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CHistory message handlers <br> <br>void CHistory::OnRButtonDown(UINT nFlags, CPoint point)  <br>{ <br>CPoint pt(point); <br>ClientToScreen(&amp;pt); <br>PopMenu (HISTORY_MENU, pt); <br>CRichEditCtrl::OnRButtonDown(nFlags, point); <br>} <br> <br>void CHistory::OnSelectFont()  <br>{ <br>CFontDialog FontDlg; <br> <br>//GetDefaultCharFormat(FontDlg.m_cf); <br> <br>int ret  = FontDlg.DoModal(); <br> <br>if (IDOK == ret) <br>{ <br>//SetDefaultCharFormat(FontDlg.m_cf); <br>} <br> <br>} <br> <br>int CHistory::OnCreate(LPCREATESTRUCT lpCreateStruct)  <br>{ <br>if (CREdit::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>SetReadOnly(); <br> <br>return 0; <br>} <br> <br> <br> <br>void CHistory::UpdateMessageUI(LPCTSTR SenderNickname_p, long iMsgType_p,  CString szMessage_p) <br>{ <br>CString szMessage; <br>CString szMsgType; <br>szMsgType.LoadString(IDS_TEXT_MSG_TYPE + iMsgType_p); <br> <br>TogleItalicText(msgtWhisper == iMsgType_p); <br> <br>szMessage.Format("%s %s\n\t", SenderNickname_p, szMsgType); <br>AddText (szMessage, TRUE); <br> <br>AddText (szMessage_p, FALSE); <br>AddText ("\n\n", FALSE); <br>LineScroll(3); <br>} <br> <br>void CHistory::OnFileSave()  <br>{ <br>CFileDialog dlgSave (FALSE,  <br>"rtf",  <br>"*.rtf",  <br>OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, <br>"*.rtf"); <br> <br>if ( IDOK == dlgSave.DoModal()) <br>{ <br>//save <br>CFile fSaveFile; <br>CFileException e; <br>if (!fSaveFile.Open(dlgSave.GetPathName(), CFile::modeCreate | CFile::modeWrite , &amp;e))  <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; "File could not be opened " &lt;&lt; e.m_cause &lt;&lt; "\n"; <br>#endif <br>return; <br>} <br> <br>SetSel(0,-1); <br>CString szText = GetSelText(); <br>int iTextLength = GetWindowTextLength(); <br>SetSel(iTextLength,iTextLength); <br> <br>int iBufferSize = szText.GetLength(); <br>LPCSTR lpBuffer = szText.LockBuffer(); <br> <br>TRY <br>{ <br>fSaveFile.Write(lpBuffer, iBufferSize); <br>} <br>CATCH( CFileException, e ) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; "File could not save " &lt;&lt; e-&gt;m_cause &lt;&lt; "\n"; <br>#endif <br>} <br>END_CATCH <br> <br>TRY <br>{ <br>fSaveFile.Close(); <br>} <br>CATCH( CFileException, e ) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; "File could be closed " &lt;&lt; e-&gt;m_cause &lt;&lt; "\n"; <br>#endif <br>} <br>END_CATCH <br> <br>szText.UnlockBuffer(); <br> <br>} <br>} <br> <br>void CHistory::ClearAll() <br>{ <br>SetReadOnly(FALSE); <br>SetSel(0,-1); <br>CRichEditCtrl::Clear();  <br>SetReadOnly(TRUE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

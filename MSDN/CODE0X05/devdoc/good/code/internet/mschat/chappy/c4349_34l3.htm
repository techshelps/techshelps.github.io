<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHATX.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4377"></a>MSCHATX.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       MsChatX.cpp <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>// Machine generated IDispatch wrapper class(es) created with ClassWizard <br> <br>#include "stdafx.h" <br>#include "mschatx.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChatItems properties <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChatItems operations <br> <br>CString IChatItems::GetAssociatedType() <br>{ <br>CString result; <br>InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void IChatItems::SetAssociatedType(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>VARIANT IChatItems::GetValidItems() <br>{ <br>VARIANT result; <br>InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long IChatItems::GetItemValid(LPCTSTR ItemName) <br>{ <br>long result; <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, parms, <br>ItemName); <br>return result; <br>} <br> <br>VARIANT IChatItems::GetItem(LPCTSTR ItemName) <br>{ <br>VARIANT result; <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&amp;result, parms, <br>ItemName); <br>return result; <br>} <br> <br>void IChatItems::SetItem(LPCTSTR ItemName, const VARIANT&amp; newValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> ItemName, &amp;newValue); <br>} <br> <br>void IChatItems::InvalidateItem(LPCTSTR ItemName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ItemName); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelObject properties <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelObject operations <br> <br>long IChannelObject::GetIndex() <br>{ <br>long result; <br>InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long IChannelObject::GetChannelState() <br>{ <br>long result; <br>InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>CString IChannelObject::GetChannelName() <br>{ <br>CString result; <br>InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void IChannelObject::SetChannelName(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString IChannelObject::GetChannelTopic() <br>{ <br>CString result; <br>InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long IChannelObject::GetMemberCount() <br>{ <br>long result; <br>InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>CString IChannelObject::GetMemberIdentity(const VARIANT&amp; vMemberNickname) <br>{ <br>CString result; <br>static BYTE parms[] = <br>VTS_VARIANT; <br>InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, parms, <br>&amp;vMemberNickname); <br>return result; <br>} <br> <br>long IChannelObject::GetMemberModes(const VARIANT&amp; vMemberNickname) <br>{ <br>long result; <br>static BYTE parms[] = <br>VTS_VARIANT; <br>InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, parms, <br>&amp;vMemberNickname); <br>return result; <br>} <br> <br>LPDISPATCH IChannelObject::GetChannelProperty(LPCTSTR ChannelPropertyName) <br>{ <br>LPDISPATCH result; <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, parms, <br>ChannelPropertyName); <br>return result; <br>} <br> <br>LPDISPATCH IChannelObject::GetMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; vMemberNickname) <br>{ <br>LPDISPATCH result; <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, parms, <br>MemberPropertyName, &amp;vMemberNickname); <br>return result; <br>} <br> <br>void IChannelObject::CreateChannel(const VARIANT&amp; ChannelName, const VARIANT&amp; ChannelKeyword, const VARIANT&amp; ChannelModes, const VARIANT&amp; MaxMemberCount) <br>{ <br>static BYTE parms[] = <br>VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> &amp;ChannelName, &amp;ChannelKeyword, &amp;ChannelModes, &amp;MaxMemberCount); <br>} <br> <br>void IChannelObject::JoinChannel(const VARIANT&amp; ChannelName, const VARIANT&amp; ChannelKeyword) <br>{ <br>static BYTE parms[] = <br>VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> &amp;ChannelName, &amp;ChannelKeyword); <br>} <br> <br>void IChannelObject::LeaveChannel() <br>{ <br>InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void IChannelObject::SendMessage(long MessageType, const VARIANT&amp; Message, const VARIANT&amp; RecipientNicknames, const VARIANT&amp; DataMessageTag) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MessageType, &amp;Message, &amp;RecipientNicknames, &amp;DataMessageTag); <br>} <br> <br>void IChannelObject::SendInvitation(LPCTSTR Nickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Nickname); <br>} <br> <br>void IChannelObject::ListMembers(LPDISPATCH MemberQueryItems) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH; <br>InvokeHelper(0x41, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MemberQueryItems); <br>} <br> <br>void IChannelObject::QueryMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; MemberNickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MemberPropertyName, &amp;MemberNickname); <br>} <br> <br>void IChannelObject::ChangeMemberProperty(LPCTSTR MemberPropertyName, const VARIANT&amp; NewMemberProperty, const VARIANT&amp; MemberNickname) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MemberPropertyName, &amp;NewMemberProperty, &amp;MemberNickname); <br>} <br> <br>void IChannelObject::BanMembers(LPDISPATCH MemberItems, long Set) <br>{ <br>static BYTE parms[] = <br>VTS_DISPATCH VTS_I4; <br>InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MemberItems, Set); <br>} <br> <br>void IChannelObject::KickMember(LPCTSTR MemberNickname, const VARIANT&amp; Reason) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> MemberNickname, &amp;Reason); <br>} <br> <br>void IChannelObject::QueryChannelProperty(LPCTSTR ChannelPropertyName) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x46, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ChannelPropertyName); <br>} <br> <br>void IChannelObject::ChangeChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT&amp; NewChannelProperty) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_VARIANT; <br>InvokeHelper(0x47, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ChannelPropertyName, &amp;NewChannelProperty); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelsCollection properties <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IChannelsCollection operations <br> <br>LPDISPATCH IChannelsCollection::GetItem(const VARIANT&amp; vIndex) <br>{ <br>LPDISPATCH result; <br>static BYTE parms[] = <br>VTS_VARIANT; <br>InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, parms, <br>&amp;vIndex); <br>return result; <br>} <br> <br>LPUNKNOWN IChannelsCollection::Get_NewEnum() <br>{ <br>LPUNKNOWN result; <br>InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>long IChannelsCollection::GetCount() <br>{ <br>long result; <br>InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>LPDISPATCH IChannelsCollection::Add(const VARIANT&amp; vIndex, const VARIANT&amp; vKey) <br>{ <br>LPDISPATCH result; <br>static BYTE parms[] = <br>VTS_VARIANT VTS_VARIANT; <br>InvokeHelper(0x50, DISPATCH_METHOD, VT_DISPATCH, (void*)&amp;result, parms, <br>&amp;vIndex, &amp;vKey); <br>return result; <br>} <br> <br>void IChannelsCollection::Remove(const VARIANT&amp; vIndex) <br>{ <br>static BYTE parms[] = <br>VTS_VARIANT; <br>InvokeHelper(0x51, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> &amp;vIndex); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

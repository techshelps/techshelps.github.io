<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHATPR.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4376"></a>MSCHATPR.IDL</h2>
<pre><code>#include &lt;olectl.h&gt; // MsChatPr.idl : IDL source for MsChatPr.ocx <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (MsChatPr.tlb) and marshalling code. <br> <br>import "oaidl.idl"; <br>import "ocidl.idl"; <br> <br>[ <br>uuid(9FE8A900-96AC-11CF-9086-00AA006C3FBC), <br>version(2.0), <br>helpstring("Microsoft Chat Protocol Control 2.0") <br>] <br>library MsChatPr <br>{ <br>importlib("stdole32.tlb"); <br>importlib("stdole2.tlb"); <br> <br>// constants and enumerations <br>typedef enum <br>{ <br>stServerMessage=  1, <br>stChannelAccount=  2, <br>stChannelClientData=  3, <br>stChannelHostKey=  4, <br>stChannelKeyword=  5, <br>stChannelLanguage=  6, <br>stChannelName=  7, <br>stChannelOnJoin=  8, <br>stChannelOnPart=  9, <br>stChannelOwnerKey= 10, <br>stChannelRating= 11, <br>stChannelSubject= 12, <br>stChannelTopic= 13 <br>} enumStringType; <br> <br> <br> typedef enum <br>{ <br>etMessageOfTheDay= 0x00, <br>etUsers= 0x01, <br>etChannels= 0x02, <br>etChannelsTruncated= 0x03, <br>etMembers= 0x04, <br>etInitialMembers= 0x05 <br>} enumEnumType; <br> <br> <br>typedef enum <br>{ <br>ctIRC= 0x00, <br>ctIRCX= 0x01 <br>} enumConnectionType; <br> <br> <br>typedef enum <br>{ <br>cvtToUTF8= 0x00, <br>cvtToUnicode= 0x01 <br>} enumConversionType; <br> <br> <br>typedef enum <br>{ <br>cvsNormal= 0x00, <br>cvsNickname= 0x01, <br>cvsChannelName= 0x02 <br>} enumConversionSource; <br> <br> <br> typedef enum <br>{ <br>csDisconnected= 0x00, <br>csConnecting= 0x01, <br>csConnected= 0x02, <br>csLogging= 0x03, <br>csLogged= 0x04, <br>csDisconnecting= 0x05 <br>} enumConnectionState; <br> <br> <br> typedef enum <br>{ <br>chsClosed= 0x00, <br>chsOpening= 0x01, <br>chsOpen= 0x02 <br>} enumChannelState; <br> <br> <br> typedef enum <br>{ <br>smtNormal= 0x00, <br>smtNotice= 0x01, <br>smtMessageOfTheDay= 0x02, <br>smtServerInfo= 0x03, <br>smtError= 0x04 <br>} enumServerMessageType; <br> <br> <br> typedef enum <br>{ <br>pmtNormal= 0x0000, <br>pmtNotice= 0x0001, <br>pmtData= 0x0002, <br>pmtDataRequest= 0x0004, <br>pmtDataReply= 0x0008, <br>pmtDataRaw= 0x0010, <br>pmtAway= 0x0020, <br>pmtVersion= 0x0040, <br>pmtLagTime= 0x0080, <br>pmtLocalTime= 0x0100, <br>pmtAction= 0x0200, <br>pmtSound= 0x0400, <br>pmtCTCP= 0x0800, <br>pmtInfo= 0x1000 <br>} enumPrivateMessageType; <br> <br> <br> typedef enum <br>{ <br>msgtNormal= 0x0000, <br>msgtNotice= 0x0001, <br>msgtData= 0x0002, <br>msgtDataRequest= 0x0004, <br>msgtDataReply= 0x0008, <br>msgtDataRaw= 0x0010, <br>msgtWhisper= 0x0020, <br>msgtThought= 0x0040, <br>msgtAction= 0x0080, <br>msgtSound= 0x0100, <br>msgtCTCP= 0x0200, <br>msgtInfo= 0x0400 <br>} enumMessageType; <br> <br> <br>typedef enum <br>{ <br>umNone= 0x00000000, <br>umClientIgnored= 0x00000001, <br>umNotClientIgnored= 0x00000002, <br>umAuthUser= 0x00000004, <br>umNotAuthUser= 0x00000008, <br>umAway= 0x00000010, <br>umNotAway= 0x00000020, <br>umSysop= 0x00000040, <br>umNotSysop= 0x00000080, <br>umAdmin= 0x00000100, <br>umNotAdmin= 0x00000200, <br>umInvisible= 0x00000400, <br>umNotInvisible= 0x00000800, <br>umNotices= 0x00001000, <br>umNoNotices= 0x00002000, <br>umWallops= 0x00004000, <br>umNoWallops= 0x00008000 <br>} enumUserMode; <br> <br> <br>typedef enum <br>{ <br>mmNone= 0x00000000, <br>mmClientIgnored= 0x00000001, <br>mmNotClientIgnored= 0x00000002, <br>mmAuthMember= 0x00000004, <br>mmNotAuthMember= 0x00000008, <br>mmAway= 0x00000010, <br>mmNotAway= 0x00000020, <br>mmSysop= 0x00000040, <br>mmNotSysop= 0x00000080, <br>mmOwner= 0x00000100, <br>mmNotOwner= 0x00000200, <br>mmHost= 0x00000400, <br>mmNotHost= 0x00000800, <br>mmVoice= 0x00001000, <br>mmNoVoice= 0x00002000 <br>} enumMemberMode; <br> <br> <br>typedef enum <br>{ <br>cmNone= 0x00000000, <br>cmPublic= 0x00000000, <br>cmPrivate= 0x00000001, <br>cmHidden= 0x00000002, <br>cmSecret= 0x00000004, <br>cmModerated= 0x00000008, <br>cmNoExtern= 0x00000010, <br>cmTopicop= 0x00000020, <br>cmInvite= 0x00000040, <br>cmKnock= 0x00000080, <br>cmNoWhisper= 0x00000100, <br>cmRegistered= 0x00000200, <br>cmService= 0x00000400, <br>cmAuthOnly= 0x00000800, <br>cmCloneable= 0x00001000, <br>cmClone= 0x00002000, <br>cmAuditorium= 0x00004000, <br>cmNoFormat= 0x00008000, <br>cmCreateOnly= 0x10000000 <br>} enumChannelMode; <br> <br> <br>[ <br>object, <br>        uuid(011eee45-46df-11d0-99cb-00c04fd64497), <br>dual, <br>helpstring("IChatItems Interface"), <br>pointer_default(unique) <br>] <br>interface IChatItems : IDispatch <br>{ <br>[propget, id(1)] HRESULT AssociatedType([out, retval] BSTR *pVal); <br>[propput, id(1)] HRESULT AssociatedType([in] BSTR newVal); <br>[propget, id(2)] HRESULT ValidItems([out, retval] VARIANT *pVal); <br>[propget, id(3)] HRESULT ItemValid([in] BSTR ItemName, [out, retval] BOOL *pVal); <br>[propget, id(4)] HRESULT Item([in] BSTR ItemName, [out, retval] VARIANT *pVal); <br>[propput, id(4)] HRESULT Item([in] BSTR ItemName, [in] VARIANT newVal); <br>[id(55)] HRESULT InvalidateItem([in] BSTR ItemName); <br>}; <br> <br>[ <br>        uuid(011EEE46-46DF-11D0-99CB-00C04FD64497), <br>helpstring("Microsoft ChatItems Object") <br>] <br>coclass ChatItems <br>{ <br>[default] interface IChatItems; <br>}; <br> <br> <br>[ <br>object, <br>        uuid(011eee43-46df-11d0-99cb-00c04fd64497), <br>dual, <br>helpstring("IChannelObject Interface"), <br>pointer_default(unique) <br>] <br>interface IChannelObject : IDispatch <br>{ <br>[propget, id(10)] HRESULT Index([out, retval] long *pVal); <br>[propget, id(11)] HRESULT ChannelState([out, retval] enumChannelState *pVal); <br>[propget, id(12)] HRESULT ChannelName([out, retval] BSTR *pVal); <br>[propput, id(12)] HRESULT ChannelName([in] BSTR newVal); <br>[propget, id(13)] HRESULT ChannelTopic([out, retval] BSTR *pVal); <br>[propget, id(14)] HRESULT MemberCount([out, retval] long *pVal); <br>[propget, id(15)] HRESULT MemberIdentity([in,optional] VARIANT vMemberNickname, [out, retval] BSTR *pVal); <br>[propget, id(16)] HRESULT MemberModes([in,optional] VARIANT vMemberNickname, [out, retval] long *pVal); <br>[propget, id(17)] HRESULT ChannelProperty([in] BSTR ChannelPropertyName, [out, retval] IChatItems* *pVal); <br>[propget, id(18)] HRESULT MemberProperty([in] BSTR MemberPropertyName, [in,optional] VARIANT vMemberNickname, [out, retval] IChatItems* *pVal); <br>[id(60)] HRESULT CreateChannel([in,optional] VARIANT ChannelName, [in,optional] VARIANT ChannelKeyword, [in,optional] VARIANT ChannelModes, [in,optional] VARIANT MaxMemberCount); <br>[id(61)] HRESULT JoinChannel([in,optional] VARIANT ChannelName, [in,optional] VARIANT ChannelKeyword); <br>[id(62)] HRESULT LeaveChannel(); <br>[id(63)] HRESULT SendMessage([in] long MessageType, [in] VARIANT Message, [in,optional] VARIANT RecipientNicknames, [in,optional] VARIANT DataMessageTag); <br>[id(64)] HRESULT SendInvitation([in] BSTR Nickname); <br>[id(65)] HRESULT ListMembers([in] ChatItems* MemberQueryItems); <br>[id(66)] HRESULT QueryMemberProperty([in] BSTR MemberPropertyName, [in,optional] VARIANT MemberNickname); <br>[id(67)] HRESULT ChangeMemberProperty([in] BSTR MemberPropertyName, [in] VARIANT NewMemberProperty, [in,optional] VARIANT MemberNickname); <br>[id(68)] HRESULT BanMembers([in] ChatItems* MemberItems, [in] BOOL Set); <br>[id(69)] HRESULT KickMember([in] BSTR MemberNickname, [in,optional] VARIANT Reason); <br>[id(70)] HRESULT QueryChannelProperty([in] BSTR ChannelPropertyName); <br>[id(71)] HRESULT ChangeChannelProperty([in] BSTR ChannelPropertyName, [in] VARIANT NewChannelProperty); <br>}; <br> <br>[ <br>        uuid(011EEE44-46DF-11D0-99CB-00C04FD64497), <br>helpstring("Microsoft Channel Object") <br>] <br>coclass Channel <br>{ <br>[default] interface IChannelObject; <br>}; <br> <br> <br>[ <br>object, <br>        uuid(011eee41-46df-11d0-99cb-00c04fd64497), <br>dual, <br>helpstring("IChannelsCollection Interface"), <br>pointer_default(unique) <br>] <br>interface IChannelsCollection : IDispatch <br>{ <br>[propget, id(DISPID_VALUE)] HRESULT Item([in,optional] VARIANT vIndex, [out, retval] IChannelObject* *pVal); <br>[propget, id(DISPID_NEWENUM)] HRESULT _NewEnum([out, retval] IUnknown* *pVal); <br>[propget, id(30)] HRESULT Count([out, retval] long *pVal); <br>[id(80)] HRESULT Add([in,optional] VARIANT vIndex, [in,optional] VARIANT vKey, [out, retval] IChannelObject** ppChannelObject); <br>[id(81)] HRESULT Remove([in] VARIANT vIndex); <br>}; <br> <br>[ <br>        uuid(011EEE42-46DF-11D0-99CB-00C04FD64497), <br>helpstring("Microsoft Channels Collection Object") <br>] <br>coclass Channels <br>{ <br>[default] interface IChannelsCollection; <br>}; <br> <br> <br>[ <br>object, <br>        uuid(011eee40-46df-11d0-99cb-00c04fd64497), <br>dual, <br>helpstring("IMsChatPr Interface"), <br>pointer_default(unique) <br>] <br>interface IMsChatPr : IDispatch <br>{ <br>[propget, id(40)] HRESULT ConnectionState([out, retval] enumConnectionState *pVal); <br>[propget, id(41)] HRESULT ConnectionType([out, retval] enumConnectionType *pVal); <br>[propget, id(42)] HRESULT OpeningChannels([out, retval] long *pVal); <br>[propget, id(43)] HRESULT PropertyAccessTimeOut([out, retval] long *pVal); <br>[propput, id(43)] HRESULT PropertyAccessTimeOut([in] long newVal); <br>[propget, id(44)] HRESULT ProcessProtocolMessages([out, retval] BOOL *pVal); <br>[propput, id(44)] HRESULT ProcessProtocolMessages([in] BOOL newVal); <br>[propget, id(45)] HRESULT ConvertedString([in] enumConversionType ConversionType, [in] enumConversionSource ConversionSource, [in] BSTR Source, [in] BOOL PostProcess, [out, retval] BSTR *pVal); <br>[propget, id(46)] HRESULT Channels([out, retval] IDispatch* *pVal); <br>[propget, id(47)] HRESULT NewChatItems([out, retval] IChatItems* *pVal); <br>[propget, id(48)] HRESULT MaxStringLength([in] enumStringType StringType, [out, retval] long *pVal); <br>[propget, id(49)] HRESULT ServerName([out, retval] BSTR *pVal); <br>[propget, id(50)] HRESULT Nickname([out, retval] BSTR *pVal); <br>[propget, id(51)] HRESULT UserProperty([in] BSTR UserPropertyName, [in,optional] VARIANT Nickname, [out, retval] IChatItems* *pVal); <br>[propget, id(52)] HRESULT ChannelProperty([in] BSTR ChannelPropertyName, [in,optional] VARIANT ChannelName, [out, retval] IChatItems* *pVal); <br>[propget, id(53)] HRESULT ServerProperty([in] BSTR ServerPropertyName, [out, retval] IChatItems* *pVal); <br>[id(90)] HRESULT AboutBox(); <br>[id(91)] HRESULT Connect([in] BSTR ServerName); <br>[id(92)] HRESULT Login([in] BSTR ServerName, [in] BSTR Nickname, [in,optional] VARIANT UserName, [in,optional] VARIANT RealName, [in,optional] VARIANT Password, [in,optional] VARIANT SecurityPackages); <br>[id(93)] HRESULT Disconnect(); <br>[id(94)] HRESULT CancelConnectLogin(); <br>[id(95)] HRESULT ListChannels([in] ChatItems* ChannelQueryItems); <br>[id(96)] HRESULT QueryChannelProperty([in] BSTR ChannelPropertyName, [in,optional] VARIANT ChannelName); <br>[id(97)] HRESULT KillChannel([in] BSTR ChannelName, [in,optional] VARIANT Reason); <br>[id(98)] HRESULT ListUsers([in] ChatItems* UserQueryItems); <br>[id(99)] HRESULT QueryUserProperty([in] BSTR UserPropertyName, [in,optional] VARIANT Nickname); <br>[id(100)] HRESULT ChangeUserProperty([in] BSTR UserPropertyName, [in] VARIANT NewUserProperty, [in,optional] VARIANT Nickname); <br>[id(101)] HRESULT IgnoreUsers([in] ChatItems* UserItems, [in] BOOL Set); <br>[id(102)] HRESULT BanUsers([in] ChatItems* UserItems, [in] BOOL Set, [in,optional] VARIANT Reason, [in,optional] VARIANT Duration); <br>[id(103)] HRESULT KickUser([in] BSTR Nickname, [in,optional] VARIANT Reason); <br>[id(104)] HRESULT ChangeNickname([in] BSTR NewNickname); <br>[id(105)] HRESULT SetAway([in] BOOL Away, [in,optional] VARIANT TextMessage); <br>[id(106)] HRESULT QueryServerProperty([in] BSTR ServerPropertyName); <br>[id(107)] HRESULT SendInvitation([in] BSTR Nickname, [in,optional] VARIANT ChannelName); <br>[id(108)] HRESULT SendPrivateMessage([in] long PrivateMessageType, [in] VARIANT Message, [in] VARIANT RecipientNicknames, [in,optional] VARIANT DataMessageTag); <br>[id(109)] HRESULT SendProtocolMessage([in] BSTR TextMessage); <br>}; <br> <br>[ <br>        uuid(0254af20-46df-11d0-99cb-00c04fd64497), <br>helpstring("IMsChatPrEvent Interface") <br>] <br>dispinterface _IMsChatPrEvent <br>{ <br>properties: <br>//  Event interface has no properties <br>methods: <br>[id(110)] <br>void OnConnectionState(enumConnectionState NewConnectionState); <br> <br>[id(111)] <br>void OnConnectionError(long ErrorCode,  <br>   BSTR Description,  <br>   VARIANT ChannelName); <br> <br>[id(112)] <br>void OnChannelState(Channel* Channel,  <br>enumChannelState NewChannelState); <br> <br>[id(113)] <br>void OnChannelError(Channel* Channel,  <br>long ErrorCode,  <br>BSTR Description); <br> <br>[id(114)] <br>void OnBeginEnumeration(Channel* Channel,  <br>enumEnumType EnumType); <br> <br>[id(115)] <br>void OnEndEnumeration(Channel* Channel,  <br>  enumEnumType EnumType); <br> <br>[id(116)] <br>void OnAddMember(Channel* Channel,  <br> BSTR Nickname,  <br> ChatItems* MemberItems); <br> <br>[id(117)] <br>void OnDelMember(Channel* Channel,  <br> BSTR Nickname); <br> <br>[id(118)] <br>void OnUserProperty(ChatItems* UserItems); <br> <br>[id(119)] <br>void OnUserPropertyChanged(BSTR ModifiedNickname,  <br>   BSTR ModifierNickname,  <br>   BSTR UserPropertyName, <br>   VARIANT OldUserProperty,  <br>   VARIANT NewUserProperty); <br> <br>[id(120)] <br>void OnMemberProperty(Channel* Channel, ChatItems* MemberItems); <br> <br>[id(121)] <br>void OnMemberPropertyChanged(Channel* Channel,  <br> BSTR ModifiedNickname,  <br> BSTR ModifierNickname,  <br> BSTR MemberPropertyName, <br> VARIANT OldMemberProperty,  <br> VARIANT NewMemberProperty); <br> <br>[id(122)] <br>void OnMemberKicked(Channel* Channel,  <br>BSTR KickedNickname,  <br>BSTR KickerNickname,  <br>BSTR Reason); <br> <br>[id(123)] <br>void OnChannelProperty(Channel* Channel,  <br>   ChatItems* ChannelItems); <br> <br>[id(124)] <br>void OnChannelPropertyChanged(Channel* Channel,  <br>  BSTR ModifierNickname,  <br>  BSTR ChannelPropertyName, <br>  VARIANT OldChannelProperty,  <br>  VARIANT NewChannelProperty); <br>   <br>[id(125)] <br>void OnServerProperty(ChatItems* ServerItems); <br> <br>[id(126)] <br>void OnInvitation(BSTR ChannelName,  <br>  ChatItems* InviterItems); <br> <br>[id(127)] <br>void OnKnock(Channel* Channel,  <br> ChatItems* KnockerItems, <br> long ErrorCode); <br> <br>[id(128)] <br>void OnPrivateMessage(BSTR SenderNickname, <br>  long PrivateMessageType, <br>  VARIANT Message, <br>  VARIANT DataMessageTag); <br> <br>[id(129)] <br>void OnServerTextMessage(enumServerMessageType ServerMessageType, <br> BSTR Text); <br> <br>[id(130)] <br>void OnMessage(Channel* Channel,  <br>   BSTR SenderNickname,  <br>   long MessageType, <br>   VARIANT Message, <br>   VARIANT RecipientNicknames, <br>   VARIANT DataMessageTag); <br> <br>[id(131)] <br>void OnProtocolMessage(BSTR MessagePrefix,  <br>   BSTR MessageCommand,  <br>   VARIANT MessageParameters, <br>   OLE_ENABLEDEFAULTBOOL* EnableDefault); <br>}; <br> <br>[ <br>        uuid(039397C0-46DF-11D0-99CB-00C04FD64497), <br>helpstring("Microsoft Chat Protocol Control") <br>] <br>coclass MsChatPr <br>{ <br>[default] interface IMsChatPr; <br>[default, source] interface _IMsChatPrEvent; <br>}; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

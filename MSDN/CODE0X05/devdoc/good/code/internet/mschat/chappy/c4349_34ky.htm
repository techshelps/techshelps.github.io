<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4372"></a>MAINFRM.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chappy.EXE <br>//  File:       MainFrm.cpp : implementation of the CMainFrame class <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1996-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "stdafx.h" <br>#include "Chappy.h" <br>#include "ChppyVW.h" <br> <br>#include "MainFrm.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame <br> <br>IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd) <br> <br>BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd) <br>//{{AFX_MSG_MAP(CMainFrame) <br>// NOTE - the ClassWizard will add and remove mapping macros here. <br>//    DO NOT EDIT what you see in these blocks of generated code ! <br>ON_WM_CREATE() <br>ON_UPDATE_COMMAND_UI(IDS_CS_DISCONNECTED, OnUpdateStatus) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>static UINT indicators[] = <br>{ <br>ID_SEPARATOR,           // status line indicator <br>IDS_CS_DISCONNECTED, <br>ID_INDICATOR_CAPS, <br>ID_INDICATOR_NUM, <br>ID_INDICATOR_SCRL <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame construction/destruction <br> <br>CMainFrame::CMainFrame() <br>{ <br>// TODO: add member initialization code here <br> <br>} <br> <br>CMainFrame::~CMainFrame() <br>{ <br>} <br> <br>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>if (CFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>if (!m_wndToolBar.Create(this) || <br>!m_wndToolBar.LoadToolBar(IDR_MAINFRAME)) <br>{ <br>TRACE0("Failed to create toolbar\n"); <br>return -1;      // fail to create <br>} <br> <br>if (!m_wndStatusBar.Create(this) || <br>!m_wndStatusBar.SetIndicators(indicators, <br>  sizeof(indicators)/sizeof(UINT))) <br>{ <br>TRACE0("Failed to create status bar\n"); <br>return -1;      // fail to create <br>} <br> <br>// TODO: Remove this if you don't want tool tips or a resizeable toolbar <br>m_wndToolBar.SetBarStyle(m_wndToolBar.GetBarStyle() | <br>CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC); <br> <br>// TODO: Delete these three lines if you don't want the toolbar to <br>//  be dockable <br>m_wndToolBar.EnableDocking(CBRS_ALIGN_ANY); <br>EnableDocking(CBRS_ALIGN_ANY); <br>DockControlBar(&amp;m_wndToolBar); <br> <br>return 0; <br>} <br> <br>BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs) <br>{ <br>// TODO: Modify the Window class or styles here by modifying <br>//  the CREATESTRUCT cs <br> <br>return CFrameWnd::PreCreateWindow(cs); <br>} <br> <br>void CMainFrame::OnUpdateStatus(CCmdUI *pCmdUI) <br>{ <br>CChappyView *TheView = (CChappyView *)GetActiveView(); <br>if (!TheView) return; //the view is gone <br> <br>    pCmdUI-&gt;Enable();  <br> <br>CString szLogStatus; <br>szLogStatus.LoadString (IDS_CS_DISCONNECTED + TheView-&gt;GetServerConnectionState()); <br> <br>CString szCT; <br>szCT.LoadString (IDS_CT_IRC + TheView-&gt;GetServerConnectionType()); <br> <br>szCT += szLogStatus; <br>pCmdUI-&gt;SetText(szCT); <br> <br>//While I'm at it I'm going to update the text of the first pane <br>//TheView-&gt;GetCurrentChannelState(); <br> <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame diagnostics <br> <br>#ifdef _DEBUG <br>void CMainFrame::AssertValid() const <br>{ <br>CFrameWnd::AssertValid(); <br>} <br> <br>void CMainFrame::Dump(CDumpContext&amp; dc) const <br>{ <br>CFrameWnd::Dump(dc); <br>} <br> <br>#endif //_DEBUG </code></pre>
<p>&nbsp;</p></body>
</HTML>

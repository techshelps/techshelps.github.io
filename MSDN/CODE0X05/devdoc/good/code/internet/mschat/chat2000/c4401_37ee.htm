<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C2VIEW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4406"></a>C2VIEW.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chat2000.EXE <br>//  File:       C2View.cpp : implementation of the CChat2000View class <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "stdafx.h" <br>#include "Chat2000.h" <br> <br>#include "C2Doc.h" <br>#include "C2View.h" <br>#include "MainFrm.h" <br> <br>#include "EnterDlg.h" <br>#include "KickBan.h" <br>#include "BanDlg.h" <br>#include "InfoDlg.h" <br>#include "TopicDlg.h" <br> <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CChat2000View <br> <br>IMPLEMENT_DYNCREATE(CChat2000View, CView) <br> <br>BEGIN_MESSAGE_MAP(CChat2000View, CView) <br>//{{AFX_MSG_MAP(CChat2000View) <br>ON_WM_CREATE() <br>ON_COMMAND(IDM_CHAT_ENTERROOM, OnChatEnterRoom) <br>ON_COMMAND(IDM_CHAT_EXITROOM, OnChatExitRoom) <br>ON_UPDATE_COMMAND_UI(IDM_CHAT_ENTERROOM, OnUpdateChatEnterRoom) <br>ON_UPDATE_COMMAND_UI(IDM_CHAT_EXITROOM, OnUpdateChatExitRoom) <br>ON_WM_SIZE() <br>ON_WM_PARENTNOTIFY() <br>ON_COMMAND(ID_CHAT_ABOUTMSCHAT, OnChatAboutmschat) <br>ON_COMMAND(ID_CHAT_KICKPARTICIPANT, OnChatKickParticipant) <br>ON_UPDATE_COMMAND_UI(ID_CHAT_KICKPARTICIPANT, OnUpdateChatKickparticipant) <br>ON_COMMAND(ID_CHAT_CLEARHISTORY, OnChatClearhistory) <br>ON_COMMAND(ID_CHAT_BANPARTICIPANT, OnChatBanparticipant) <br>ON_UPDATE_COMMAND_UI(ID_CHAT_BANPARTICIPANT, OnUpdateChatBanparticipant) <br>ON_COMMAND(ID_CHAT_SHOWINFO, OnChatShowinfo) <br>ON_COMMAND(ID_CHAT_SETROOMTOPIC, OnChatSetroomtopic) <br>ON_UPDATE_COMMAND_UI(ID_CHAT_SETROOMTOPIC, OnUpdateChatSetroomtopic) <br>//}}AFX_MSG_MAP <br>// Standard printing commands <br>//ON_COMMAND(ID_FILE_PRINT, CView::OnFilePrint) <br>//ON_COMMAND(ID_FILE_PRINT_DIRECT, CView::OnFilePrint) <br>//ON_COMMAND(ID_FILE_PRINT_PREVIEW, CView::OnFilePrintPreview) <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CChat2000View construction/destruction <br> <br>CChat2000View::CChat2000View() <br>{ <br>m_iXppli = m_iYppli = 0; <br>m_posThisParticipant = NULL; <br>m_bActive = FALSE; <br>} <br> <br>CChat2000View::~CChat2000View() <br>{ <br>} <br> <br>BOOL CChat2000View::PreCreateWindow(CREATESTRUCT&amp; cs) <br>{ <br>// TODO: Modify the Window class or styles here by modifying <br>//  the CREATESTRUCT cs <br> <br>return CView::PreCreateWindow(cs); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CChat2000View drawing <br> <br>void CChat2000View::OnDraw(CDC* pDC) <br>{ <br>CChat2000Doc* pDoc = GetDocument(); <br>ASSERT_VALID(pDoc); <br> <br>// TODO: add draw code for native data here <br>//Call the CWnd method for Redrawing the OCX. <br>m_ocxChat.RedrawWindow(); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CChat2000View diagnostics <br> <br>#ifdef _DEBUG <br>void CChat2000View::AssertValid() const <br>{ <br>CView::AssertValid(); <br>} <br> <br>void CChat2000View::Dump(CDumpContext&amp; dc) const <br>{ <br>CView::Dump(dc); <br>} <br> <br>CChat2000Doc* CChat2000View::GetDocument() // non-debug version is inline <br>{ <br>ASSERT(m_pDocument-&gt;IsKindOf(RUNTIME_CLASS(CChat2000Doc))); <br>return (CChat2000Doc*)m_pDocument; <br>} <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CChat2000View message handlers <br> <br>int CChat2000View::OnCreate(LPCREATESTRUCT lpCreateStruct)  <br>{ <br>if (CView::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>//enable OCX embeding <br>AfxEnableControlContainer(); <br> <br>//Get pixels per logical inch, used to calculate the size of the control <br>CClientDC MyCDC(NULL); <br>m_iXppli = MyCDC.GetDeviceCaps(LOGPIXELSX); <br>m_iYppli = MyCDC.GetDeviceCaps(LOGPIXELSY); <br> <br>//Create the ChatOCX and initialize the UI <br>RECT rect; <br> <br>rect.left= 1; <br>rect.top= 1; <br>rect.right= 5000;//lpCreateStruct-&gt;cx; <br>rect.bottom= 5000;//lpCreateStruct-&gt;cy; <br> <br>if (!m_ocxChat.Create(NULL, WS_VISIBLE | WS_BORDER, rect, this, IDC_OCX_CHAT)) <br>{ <br>CString szFailMessage; <br>szFailMessage.LoadString(IDS_FAIL_TO_LOAD_OCX); <br>if (IDYES == AfxMessageBox (szFailMessage,MB_YESNO ) ) <br>{ <br>CString szURLtoChat; <br>szURLtoChat.LoadString(IDS_URL_TO_CHAT); <br>//start default web browser to load the chat OCX <br>HINSTANCE hResults = ShellExecute (NULL, "open", szURLtoChat, "",NULL,SW_SHOWNORMAL); <br>//if ((int) hResult &lt;= 32) // error starting the browser <br>//TODO handle the ShellExecute faillure <br>} <br>return -1; <br>} <br> <br>//resize the OCX so that the UI looks proportionate <br>m_ocxChat.SetWidth(MAP_PIX_TO_LOGHIM (1000,m_iXppli)); <br>m_ocxChat.SetHeight(MAP_PIX_TO_LOGHIM (1000,m_iYppli)); <br>m_ocxChat.SetUIOption(UI_OPT_ALL - UI_OPT_DISPLAY_ERRORMESSAGES - UI_OPT_ALLOW_RESIZING); <br> <br>//set the Status UI  <br>UpdateStatusUI(); <br> <br>return 0; <br>} <br> <br>void CChat2000View::OnSize(UINT nType, int cx, int cy)  <br>{ <br>CView::OnSize(nType, cx, cy); <br> <br>//TRACE ("OnSize\n"); <br> <br>if (m_ocxChat &amp;&amp; cx &amp;&amp; cy) //do not resize to 0 <br>{ <br>m_ocxChat.SetWidth(MAP_PIX_TO_LOGHIM (cx,m_iXppli)); <br>m_ocxChat.SetHeight(MAP_PIX_TO_LOGHIM (cy,m_iYppli)); <br>} <br>} <br> <br> <br>void CChat2000View::OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView)  <br>{ <br>m_bActive = bActivate; <br>CView::OnActivateView(bActivate, pActivateView, pDeactiveView); <br>UpdateStatusUI(); <br>} <br> <br>void CChat2000View::OnParentNotify(UINT message, LPARAM lParam)  <br>{ <br>//to trap the WM_PARENTNOTIFY message we need to set the 'Message Filter' dropdown <br>//in the 'advaced options' section on the 'Class Info' tab of the 'Class Wizard' to <br>//Window'.  The View is originally set as 'Child Window' <br> <br>CView::OnParentNotify(message, lParam); <br> <br>//We might not have focus yet. We risk to pop up the wrong menu <br>//To avoid that we check if the view got activated <br> <br>if ( (message == WM_RBUTTONDOWN) &amp;&amp; (m_bActive) ) <br>{ <br>CMenu menu; <br>CMenu *submenu; <br>//Load the menu. <br>menu.LoadMenu(IDR_CHAT20TYPE); <br>//Get the pop-up menu. <br>submenu = menu.GetSubMenu(POPUPMENU); <br> <br>CPoint pt(LOWORD(lParam),HIWORD(lParam)); <br>//Convert to screen coordinates. <br>ClientToScreen(&amp;pt); <br>//Post the menu. <br>submenu-&gt;TrackPopupMenu(TPM_LEFTALIGN|TPM_RIGHTBUTTON, <br>pt.x,    pt.y, <br>AfxGetApp()-&gt;m_pMainWnd,NULL); <br>} <br>} <br> <br>//----------------------------------------------------------------------------- <br>//Command handlers <br>void CChat2000View::OnChatEnterRoom()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CEnterDlgdlgEnter; <br> <br>int iDlgRet = dlgEnter.DoModal(); <br> <br>if (iDlgRet == IDOK) <br>{ <br> <br>TRACE1("Room URL: %s",(LPCTSTR) dlgEnter.m_szRoom); <br>m_ocxChat.EnterRoom((LPCTSTR) dlgEnter.m_szRoom, dlgEnter.m_szPassword, dlgEnter.m_szNickName,_T("NTLM;ALL"), dlgEnter.m_iFlags, dlgEnter.m_iTypes); <br>} <br>else <br>{ <br>if (iDlgRet != IDCANCEL) <br>{ <br>AfxMessageBox ("Error Displaying the dialog: %i", iDlgRet); <br>} <br>} <br> <br>} <br> <br>void CChat2000View::OnChatExitRoom()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>//exit or cancel <br>int iState = m_ocxChat.GetState(); <br>ASSERT(iState != STATE_DISCONNECTED); <br> <br>if ( iState == STATE_CONNECTED) <br>{ <br>m_ocxChat.ExitRoom(); <br>} <br>else <br>{ <br>m_ocxChat.CancelEntering(); <br>} <br>} <br> <br>void CChat2000View::OnChatAboutmschat()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>m_ocxChat.AboutBox(); <br>} <br> <br>void CChat2000View::OnChatKickParticipant()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CKickBanDlgdlgKickBan; <br> <br>int iDlgRet = dlgKickBan.DoModal(); <br> <br>if (iDlgRet == IDOK) <br>{ <br>m_ocxChat.KickParticipant(-1,dlgKickBan.m_Comment); <br>} <br>else <br>{ <br>if (iDlgRet != IDCANCEL) <br>{ <br>AfxMessageBox ("Error Displaying the dialog: %i", iDlgRet); <br>} <br>} <br>} <br> <br>void CChat2000View::OnChatClearhistory()  <br>{ <br>ASSERT(m_ocxChat); <br>m_ocxChat.ClearHistory(); <br>} <br> <br> <br>void CChat2000View::OnChatBanparticipant()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CBanDlgdlgBan; <br> <br>//set the control values <br>dlgBan.m_Set = 0; //ban <br>dlgBan.m_pListOfPart = &amp;m_ListOfPart; <br> <br>int iDlgRet = dlgBan.DoModal(); <br> <br>if ( (iDlgRet == IDOK) &amp;&amp; (!dlgBan.m_Name.IsEmpty()) ) <br>{ <br>m_ocxChat.BanParticipant(dlgBan.m_Name,(dlgBan.m_Set==0)); <br>} <br>} <br> <br>void CChat2000View::OnChatSetroomtopic()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CTopicDlgdlgTopic; <br> <br>int iDlgRet = dlgTopic.DoModal(); <br> <br>if ( iDlgRet == IDOK ) <br>{ <br>m_ocxChat.SetRoomTopic(dlgTopic.m_szTopic); <br>} <br> <br>} <br> <br>void CChat2000View::OnChatShowinfo()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CInfoDlgdlgInfo; <br> <br>dlgInfo.m_szMaxNumOfMembers.Format("%u", m_ocxChat.GetMaxMembers()); <br>dlgInfo.m_szNumberOfMembers.Format("%u",m_ocxChat.GetMemberCount()); <br>dlgInfo.m_szAlias = m_ocxChat.GetThisParticipantAlias(); <br>dlgInfo.m_szID.Format("%u", m_ocxChat.GetThisParticipantID()); <br>dlgInfo.m_szPath = m_ocxChat.GetRoomPath(); <br>dlgInfo.m_szRatings = m_ocxChat.GetRating(); <br>dlgInfo.m_szTopic = m_ocxChat.GetRoomTopic(); <br> <br>dlgInfo.DoModal(); <br>} <br> <br> <br>//----------------------------------------------------------------------------- <br>//UI Update functions <br>void CChat2000View::OnUpdateChatEnterRoom(CCmdUI* pCmdUI)  <br>{ <br>ASSERT(m_ocxChat); <br>pCmdUI-&gt;Enable((m_ocxChat.GetState() == STATE_DISCONNECTED)); <br> <br>} <br> <br>void CChat2000View::OnUpdateChatExitRoom(CCmdUI* pCmdUI)  <br>{ <br>ASSERT(m_ocxChat); <br>short nState = m_ocxChat.GetState(); <br> <br>//enable/disable the menu <br>pCmdUI-&gt;Enable(nState != STATE_DISCONNECTED); <br> <br>if (nState != STATE_DISCONNECTED) <br>{ <br>CString szNewMenuText; <br> <br>if (nState == STATE_CONNECTING) <br>{ <br>szNewMenuText.LoadString(IDS_MNU_CANCEL_ENTERING); <br>} <br>else <br>{ <br>szNewMenuText.LoadString(IDS_MNU_EXIT_ROOM); <br>} <br> <br>pCmdUI-&gt;SetText(szNewMenuText); <br>} <br>} <br> <br>void CChat2000View::OnUpdateChatKickparticipant(CCmdUI* pCmdUI)  <br>{ <br>if (IsValidPos(m_posThisParticipant)) <br>{ <br>//enable the menu only if we are hosts <br>pCmdUI-&gt;Enable( GetParticipantPos(m_posThisParticipant)-&gt;GetStatus() == PARTICIPANT_STATE_HOST); <br>} <br>else <br>{ <br>pCmdUI-&gt;Enable(FALSE); <br>} <br> <br>} <br> <br>void CChat2000View::OnUpdateChatBanparticipant(CCmdUI* pCmdUI)  <br>{ <br> <br>if (IsValidPos(m_posThisParticipant)) <br>{ <br>//enable the menu only if we are hosts <br>pCmdUI-&gt;Enable( GetParticipantPos(m_posThisParticipant)-&gt;GetStatus() == PARTICIPANT_STATE_HOST); <br>} <br>else <br>{ <br>pCmdUI-&gt;Enable(FALSE); <br>} <br>} <br> <br>void CChat2000View::OnUpdateChatSetroomtopic(CCmdUI* pCmdUI)  <br>{ <br>ASSERT(m_ocxChat); <br>short nState = m_ocxChat.GetState(); <br> <br>pCmdUI-&gt;Enable(nState != STATE_DISCONNECTED); <br>} <br> <br> <br> <br>//----------------------------------------------------------------------------- <br>//Helper functions <br>void CChat2000View::UpdateStatusUI()  <br>{ <br>ASSERT(m_ocxChat); <br> <br>UpdateStatusUI(m_ocxChat.GetState()); <br> <br>} <br> <br>void CChat2000View::UpdateStatusUI(short NewState_p)  <br>{ <br>ASSERT(m_ocxChat); <br> <br>CString szOut; <br>szOut.LoadString(IDS_MDI_TITLE+NewState_p); <br> <br>//add the room info <br>szOut +=  ((NewState_p != STATE_DISCONNECTED) ? (_T("[")+m_ocxChat.GetRoomPath()+_T("]")) : _T("")); <br> <br>if ( (NewState_p == STATE_CONNECTED) &amp;&amp; (IsValidPos(m_posThisParticipant)) ) <br>{ <br>//add the user alias <br>szOut = m_ocxChat.GetThisParticipantAlias() + _T(" ") + szOut; <br>} <br> <br>CMainFrame *MainFrame = (CMainFrame *)GetParentFrame()-&gt;GetParentFrame(); <br>ASSERT (MainFrame);  <br>MainFrame-&gt;m_wndStatusBar.SetPaneText(0,(LPCTSTR) szOut,TRUE); <br>MainFrame-&gt;GetActiveFrame()-&gt;SetWindowText((LPCTSTR) szOut); <br>} <br> <br>CString CChat2000View::GetHistory() <br>{ <br>ASSERT(m_ocxChat); <br>//wrap this because it is used by the Doc class <br>return m_ocxChat.GetHistory(); <br>} <br> <br>//----------------------------------------------------------------------------- <br>//Events from the OCX <br>//since we created the OCX dinamically, the ClassWizard does not generate this code automatically <br>//Added manually.   <br>//An easy way to get this code is to create a project and insert the OCX in a dialog, let the Wizard generate the code, <br>//Cut and paste in here and change the class references. <br> <br>BEGIN_EVENTSINK_MAP(CChat2000View, CView) <br>    //{{AFX_EVENTSINK_MAP(CChat2000View) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 111 /* OnStateChanged */, OnOnStateChangedOcxChat, VTS_I2) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 106 /* OnParticipantStatusChanged */, OnOnParticipantStatusChangedOcxChat, VTS_I4 VTS_I2) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 101 /* OnBeginEnumeration */, OnOnBeginEnumerationOcxChat, VTS_NONE) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 102 /* OnEndEnumeration */, OnOnEndEnumerationOcxChat, VTS_NONE) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 104 /* OnExitParticipant */, OnOnExitParticipantOcxChat, VTS_I4) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 103 /* OnEnterParticipant */, OnOnEnterParticipantOcxChat, VTS_I4 VTS_BSTR VTS_I2) <br>ON_EVENT(CChat2000View, IDC_OCX_CHAT, 114 /* OnError */, OnOnErrorOcxChat, VTS_I2 VTS_BSTR) <br>//}}AFX_EVENTSINK_MAP <br>END_EVENTSINK_MAP() <br> <br>void CChat2000View::OnOnStateChangedOcxChat(short NewState)  <br>{ <br>TRACE("CChat2000View::OnOnStateChangedOcxChat\n"); <br>UpdateStatusUI(NewState); <br> <br>//remove all participants from the list <br>if (NewState == STATE_DISCONNECTED) <br>{ <br>DelAll(); <br>} <br>} <br> <br>void CChat2000View::OnOnParticipantStatusChangedOcxChat(long ParticipantID, short Status)  <br>{ <br>TRACE("CChat2000View::OnOnParticipantStatusChangedOcxChat\n"); <br> <br>ASSERT(ParticipantID); <br>//set the participant status <br>GetParticipantID((short)ParticipantID)-&gt;SetStatus (Status); <br>} <br> <br>void CChat2000View::OnOnBeginEnumerationOcxChat()  <br>{ <br>TRACE("CChat2000View::OnOnBeginEnumerationOcxChat\n"); <br>} <br> <br>void CChat2000View::OnOnEndEnumerationOcxChat()  <br>{ <br>TRACE("CChat2000View::OnOnEndEnumerationOcxChat\n"); <br> <br>//The OCX is done enumerating, now we can find out who we are <br>m_posThisParticipant = FindParticipantID((short)m_ocxChat.GetThisParticipantID());  <br> <br>//we entered a room, set the UI <br>UpdateStatusUI(); <br>} <br> <br>void CChat2000View::OnOnExitParticipantOcxChat(long ParticipantID)  <br>{ <br>TRACE("CChat2000View::OnOnExitParticipantOcxChat\n"); <br> <br>DelParticipantID((short)ParticipantID); <br>} <br> <br>void CChat2000View::OnOnEnterParticipantOcxChat(long ParticipantID, LPCTSTR Alias, short Status)  <br>{ <br>TRACE("CChat2000View::OnOnEnterParticipantOcxChat\n"); <br> <br>AddParticipant (ParticipantID, Alias, Status); <br>} <br> <br>void CChat2000View::OnOnErrorOcxChat(short ErrorCode, LPCTSTR Description)  <br>{ <br>//catch those asyncronous errors <br>AfxMessageBox(Description,MB_ICONSTOP | MB_OK); <br>} <br> <br>//----------------------------------------------------------------------------- <br>//participant list manager <br> <br>inline void CChat2000View::AddParticipant(CParticipant &amp;Part_p) <br>{ <br>m_ListOfPart.AddTail(Part_p); <br>} <br> <br>inline void CChat2000View::AddParticipant(long ParticipantID, LPCTSTR Alias, short Status) <br>{ <br>CParticipant Part(ParticipantID, Alias, Status); <br>m_ListOfPart.AddTail(Part); <br>} <br> <br>inline void CChat2000View::DelParticipantID(short iID_p) <br>{ <br>CParticipant Part(iID_p); <br>m_ListOfPart.RemoveAt(m_ListOfPart.Find(Part)); <br>if (iID_p == m_ocxChat.GetThisParticipantID()) <br>{ <br>m_posThisParticipant = NULL; <br>} <br>} <br> <br>inline void CChat2000View::DelAll() <br>{ <br>m_ListOfPart.RemoveAll(); <br>m_posThisParticipant = NULL; <br>} <br>  <br>inline POSITION CChat2000View::FindParticipantID(short iID_p) <br>{ <br>CParticipant Part(iID_p); <br>return m_ListOfPart.Find(Part); <br>} <br> <br>inline CParticipant *CChat2000View::GetParticipantPos(POSITION Pos_p) <br>{ <br>return &amp;m_ListOfPart.GetAt(Pos_p); <br>} <br> <br>inline CParticipant *CChat2000View::GetParticipantID(short iID_p) <br>{ <br>return GetParticipantPos(FindParticipantID(iID_p)); <br>} <br> <br>inline BOOL CChat2000View::IsValidPos(POSITION Pos_p) <br>{ <br>return (Pos_p != NULL); <br>//we could check if the pos falls between the head and tail of the list <br>//but we will rely on the fact that we keep a consistent list <br>} <br> <br>inline CString CChat2000View::GetParticipantAlias() <br>{ <br>static POSITION CurrentPos = m_ListOfPart.GetHeadPosition(); <br> <br>if (IsValidPos (CurrentPos)) <br>{ <br>//return the alias, set the position to the next element of the list <br>return (m_ListOfPart.GetNext(CurrentPos)).GetAlias(); <br>} <br>else <br>{ <br>//we reached the end of the list or the list is empty <br>//go back to the head <br>CurrentPos = m_ListOfPart.GetHeadPosition(); <br>return ""; <br>} <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

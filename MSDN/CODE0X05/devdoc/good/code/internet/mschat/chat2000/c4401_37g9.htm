<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4419"></a>MAINFRM.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chat2000.EXE <br>//  File:       MainFrm.cpp : implementation of the CMainFrame class <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "stdafx.h" <br>#include "Chat2000.h" <br> <br> <br>#include "MainFrm.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame <br> <br>IMPLEMENT_DYNAMIC(CMainFrame, CMDIFrameWnd) <br> <br>BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd) <br>//{{AFX_MSG_MAP(CMainFrame) <br>ON_WM_CREATE() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>static UINT indicators[] = <br>{ <br>ID_SEPARATOR,           // status line indicator <br>ID_INDICATOR_CAPS, <br>ID_INDICATOR_NUM, <br>ID_INDICATOR_SCRL, <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame construction/destruction <br> <br>CMainFrame::CMainFrame() <br>{ <br>// TODO: add member initialization code here <br> <br>} <br> <br>CMainFrame::~CMainFrame() <br>{ <br>} <br> <br>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>if (CMDIFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>if (!m_wndToolBar.Create(this) || <br>!m_wndToolBar.LoadToolBar(IDR_MAINFRAME)) <br>{ <br>TRACE0("Failed to create toolbar\n"); <br>return -1;      // fail to create <br>} <br> <br>if (!m_wndStatusBar.Create(this) || <br>!m_wndStatusBar.SetIndicators(indicators, <br>  sizeof(indicators)/sizeof(UINT))) <br>{ <br>TRACE0("Failed to create status bar\n"); <br>return -1;      // fail to create <br>} <br> <br>// TODO: Remove this if you don't want tool tips or a resizeable toolbar <br>m_wndToolBar.SetBarStyle(m_wndToolBar.GetBarStyle() | <br>CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC); <br> <br>// TODO: Delete these three lines if you don't want the toolbar to <br>//  be dockable <br>m_wndToolBar.EnableDocking(CBRS_ALIGN_ANY); <br>EnableDocking(CBRS_ALIGN_ANY); <br>DockControlBar(&amp;m_wndToolBar); <br> <br>return 0; <br>} <br> <br>BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs) <br>{ <br>// TODO: Modify the Window class or styles here by modifying <br>//  the CREATESTRUCT cs <br> <br>return CMDIFrameWnd::PreCreateWindow(cs); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame diagnostics <br> <br>#ifdef _DEBUG <br>void CMainFrame::AssertValid() const <br>{ <br>CMDIFrameWnd::AssertValid(); <br>} <br> <br>void CMainFrame::Dump(CDumpContext&amp; dc) const <br>{ <br>CMDIFrameWnd::Dump(dc); <br>} <br> <br>#endif //_DEBUG </code></pre>
<p>&nbsp;</p></body>
</HTML>

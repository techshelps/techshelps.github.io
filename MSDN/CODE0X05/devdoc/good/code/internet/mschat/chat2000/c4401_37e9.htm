<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ABSTRACT.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4401"></a>ABSTRACT.TXT</h2>
<pre><code>Chat2000 is a sample app that demonstrate how to use the Chat OCX inside an MDI MFC application. The  <br>goal of this sample is to clearly show how to: <br>* Create multiple OCX instances dynamically <br>* Use OCX methods <br>* Set and Get OCX properties <br>* Handle OCX events <br> <br>The Sample does not fully implement its own UI but rather extends the standard OCX one with the  <br>following features: <br>* Multiple chat sessions.  Join as many chat rooms as you want. <br>* Content sensitive right-click pop up menu <br>* Kick and Ban participants <br>* Set your preferences for every Chat session you join or create <br>* Clear or Save history in .rtf file <br>* Status info displayed in Status bar and MDI title <br>* Get MSChat info <br> <br>The Sample uses the Document/view architecture of the Microsoft Foundation Classes.  The application  <br>was generated by the AppWizard as an MDI-type application.  The support for OLE controls was added  <br>manually. <br> <br>The CMSChat class was generated by the ClassWizard using the Insert Component menu.  Some  <br>methods were changed to facilitate the development process but no changes are necessary to use the Class. <br> <br>The OCXes are created at runtime in the view method CChat2000View::OnCreate().  The view owns the  <br>OCX because is not possible to implement multiple view of the same chat room without re-implementing  <br>the UI completely.  The view exports the only data needed by the document using the wrapper function  <br>CChat2000View::GetHistory().   The OCX Methods are generally called within appropriate command  <br>handler functions.   The view is also responsible for updating the status bar and the MDI title.  OCX events  <br>are trapped using the MFC standard event sink mechanism (BEGIN_EVENTSINK_MAP /  <br>END_EVENTSINK_MAP).  Unfortunately the ClassWizard does not help generate the sink map, so this  <br>code needs to be added manually. <br> <br>This example also illustrates how to use MFC CList template how to implement a pop-up menu for a  <br>control.  The application uses the CList template to implement a list of participants (CParticipant object).   <br>The list is used to verify the status of  this participant  and to fill up the Drop-down in the  Ban  dialog.   <br>The Pop-up menu is created in the CChat2000View::OnParentNotify() function.  This function wraps up  <br>the WM_PARENTNOTIFY window message used by child controls to notify the parent of events such as  <br>creation, destruction and mouse clicks.  Since the OCX covers all the view the WM_FOCUS message gets  <br>to the view after the WM_PARENTNOTIFY.  This leaves the pop up menu in an incorrect state.  To  <br>alleviate the problem the view keeps track of its own activation/deactivation giving a chance to the MFC  <br>OnUpdate functions to take care of the menu items states. <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

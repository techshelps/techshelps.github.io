<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHAT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4421"></a>MSCHAT.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chat2000.EXE <br>//  File:       MsChat.Cpp <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ <br> <br>// NOTE: Do not modify the contents of this file.  If this class is regenerated by <br>//  Microsoft Visual C++, your modifications will be overwritten. <br> <br> <br>#include "stdafx.h" <br>#include "mschat.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMSChat <br> <br>IMPLEMENT_DYNCREATE(CMSChat, CWnd) <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMSChat properties <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMSChat operations <br> <br>unsigned long CMSChat::AddRef() <br>{ <br>unsigned long result; <br>InvokeHelper(0x60000001, DISPATCH_METHOD, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>unsigned long CMSChat::Release() <br>{ <br>unsigned long result; <br>InvokeHelper(0x60000002, DISPATCH_METHOD, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>unsigned long CMSChat::GetBackColor() <br>{ <br>unsigned long result; <br>InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetBackColor(unsigned long newValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> newValue); <br>} <br> <br>short CMSChat::GetWidth() <br>{ <br>short result; <br>InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetWidth(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetHeight() <br>{ <br>short result; <br>InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetHeight(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetUIOption() <br>{ <br>short result; <br>InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetUIOption(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetState() <br>{ <br>short result; <br>InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetState(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetBorderStyle() <br>{ <br>short result; <br>InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetBorderStyle(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetAppearance() <br>{ <br>short result; <br>InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetAppearance(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>short CMSChat::GetMaxMessageLength() <br>{ <br>short result; <br>InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetMaxMessageLength(short nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>long CMSChat::GetMaxHistoryLength() <br>{ <br>long result; <br>InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetMaxHistoryLength(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>long CMSChat::GetMemberCount() <br>{ <br>long result; <br>InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetMemberCount(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>long CMSChat::GetMaxMembers() <br>{ <br>long result; <br>InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetMaxMembers(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>CString CMSChat::GetRating() <br>{ <br>CString result; <br>InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetRating(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>long CMSChat::GetThisParticipantID() <br>{ <br>long result; <br>InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetThisParticipantID(long nNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_I4; <br>InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> nNewValue); <br>} <br> <br>CString CMSChat::GetThisParticipantName() <br>{ <br>CString result; <br>InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetThisParticipantName(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetThisParticipantAlias() <br>{ <br>CString result; <br>InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetThisParticipantAlias(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetRoomPath() <br>{ <br>CString result; <br>InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetRoomPath(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetRoomTopic() <br>{ <br>CString result; <br>InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetRoomTopic(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetLastMessageSent() <br>{ <br>CString result; <br>InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetLastMessageSent(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetLastMessageReceived() <br>{ <br>CString result; <br>InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetLastMessageReceived(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>CString CMSChat::GetHistory() <br>{ <br>CString result; <br>InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); <br>return result; <br>} <br> <br>void CMSChat::SetHistory(LPCTSTR lpszNewValue) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR; <br>InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, <br> lpszNewValue); <br>} <br> <br>void CMSChat::GetParticipantRealName(long ParticipantID, LPCTSTR Alias, BOOL Synchronous, BSTR* RealName) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_BSTR VTS_BOOL VTS_PBSTR; <br>InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ParticipantID, Alias, Synchronous, RealName); <br>} <br> <br>void CMSChat::SelectParticipants(short Selection) <br>{ <br>static BYTE parms[] = <br>VTS_I2; <br>InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Selection); <br>} <br> <br>void CMSChat::MoveSplitBar() <br>{ <br>InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMSChat::ClearHistory() <br>{ <br>InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMSChat::EnterRoom(LPCTSTR URL, LPCTSTR RoomPassword, LPCTSTR ThisParticipantAlias, LPCTSTR SecurityPackage, short Flags, short Type) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2 VTS_I2; <br>InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> URL, RoomPassword, ThisParticipantAlias, SecurityPackage, Flags, Type); <br>} <br> <br>void CMSChat::CancelEntering() <br>{ <br>InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMSChat::ExitRoom() <br>{ <br>InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} <br> <br>void CMSChat::SetParticipantStatus(long ParticipantID, short Mask, short Status) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_I2 VTS_I2; <br>InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ParticipantID, Mask, Status); <br>} <br> <br>void CMSChat::KickParticipant(long ParticipantID, LPCTSTR Comment) <br>{ <br>static BYTE parms[] = <br>VTS_I4 VTS_BSTR; <br>InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> ParticipantID, Comment); <br>} <br> <br>void CMSChat::BanParticipant(LPCTSTR Alias, BOOL Set) <br>{ <br>static BYTE parms[] = <br>VTS_BSTR VTS_BOOL; <br>InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> Alias, Set); <br>} <br> <br>void CMSChat::SendMessage(const VARIANT&amp; DestList, short Count, const VARIANT&amp; Message) <br>{ <br>static BYTE parms[] = <br>VTS_VARIANT VTS_I2 VTS_VARIANT; <br>InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, <br> &amp;DestList, Count, &amp;Message); <br>} <br> <br>void CMSChat::AboutBox() <br>{ <br>InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

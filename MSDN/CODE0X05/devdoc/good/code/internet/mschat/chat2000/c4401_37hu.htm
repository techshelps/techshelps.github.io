<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSCHAT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4422"></a>MSCHAT.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     Chat2000.EXE <br>//  File:       MsChat.H <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef __MSCHAT_H__ <br>#define __MSCHAT_H__ <br> <br> <br>#include "globals.h" <br> <br>// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ <br> <br>// NOTE: Do not modify the contents of this file.  If this class is regenerated by <br>//  Microsoft Visual C++, your modifications will be overwritten. <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMSChat wrapper class <br> <br>class CMSChat : public CWnd <br>{ <br>protected: <br>DECLARE_DYNCREATE(CMSChat) <br>public: <br>CLSID const&amp; GetClsid() <br>{ <br>static CLSID const clsid <br>= { 0xd6526fe0, 0xe651, 0x11cf, { 0x99, 0xcb, 0x0, 0xc0, 0x4f, 0xd6, 0x44, 0x97 } }; <br>return clsid; <br>} <br>virtual BOOL Create(LPCTSTR lpszClassName, <br>LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, <br>CWnd* pParentWnd, UINT nID, <br>CCreateContext* pContext = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); } <br> <br>    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, CWnd* pParentWnd, UINT nID, <br>CFile* pPersist = NULL, BOOL bStorage = FALSE, <br>BSTR bstrLicKey = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID, <br>pPersist, bStorage, bstrLicKey); } <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>// method 'QueryInterface' not emitted because of invalid return type or parameter type <br>unsigned long AddRef(); <br>unsigned long Release(); <br>// method 'GetTypeInfoCount' not emitted because of invalid return type or parameter type <br>// method 'GetTypeInfo' not emitted because of invalid return type or parameter type <br>// method 'GetIDsOfNames' not emitted because of invalid return type or parameter type <br>// method 'Invoke' not emitted because of invalid return type or parameter type <br>unsigned long GetBackColor(); <br>void SetBackColor(unsigned long newValue); <br>short GetWidth(); <br>void SetWidth(short nNewValue); <br>short GetHeight(); <br>void SetHeight(short nNewValue); <br>short GetUIOption(); <br>void SetUIOption(short nNewValue); <br>short GetState(); <br>void SetState(short nNewValue); <br>short GetBorderStyle(); <br>void SetBorderStyle(short nNewValue); <br>short GetAppearance(); <br>void SetAppearance(short nNewValue); <br>short GetMaxMessageLength(); <br>void SetMaxMessageLength(short nNewValue); <br>long GetMaxHistoryLength(); <br>void SetMaxHistoryLength(long nNewValue); <br>long GetMemberCount(); <br>void SetMemberCount(long nNewValue); <br>long GetMaxMembers(); <br>void SetMaxMembers(long nNewValue); <br>CString GetRating(); <br>void SetRating(LPCTSTR lpszNewValue); <br>long GetThisParticipantID(); <br>void SetThisParticipantID(long nNewValue); <br>CString GetThisParticipantName(); <br>void SetThisParticipantName(LPCTSTR lpszNewValue); <br>CString GetThisParticipantAlias(); <br>void SetThisParticipantAlias(LPCTSTR lpszNewValue); <br>CString GetRoomPath(); <br>void SetRoomPath(LPCTSTR lpszNewValue); <br>CString GetRoomTopic(); <br>void SetRoomTopic(LPCTSTR lpszNewValue); <br>CString GetLastMessageSent(); <br>void SetLastMessageSent(LPCTSTR lpszNewValue); <br>CString GetLastMessageReceived(); <br>void SetLastMessageReceived(LPCTSTR lpszNewValue); <br>CString GetHistory(); <br>void SetHistory(LPCTSTR lpszNewValue); <br>void GetParticipantRealName(long ParticipantID, LPCTSTR Alias, BOOL Synchronous, BSTR* RealName); <br>void SelectParticipants(short Selection); <br>void MoveSplitBar(); <br>void ClearHistory(); <br>//AR modified to have default parms <br>void EnterRoom(LPCTSTR URL, LPCTSTR RoomPassword = _T(""), LPCTSTR ThisParticipantAlias = _T("anonymous"), LPCTSTR SecurityPackage = _T("ANON"), short Flags = ENTER_FLAG_JOIN_CREATE, short Type = ENTER_TYPE_ANY_USER); <br>void CancelEntering(); <br>void ExitRoom(); <br>void SetParticipantStatus(long ParticipantID, short Mask, short Status); <br>void KickParticipant(long ParticipantID, LPCTSTR Comment); <br>void BanParticipant(LPCTSTR Alias, BOOL Set); <br>void SendMessage(const VARIANT&amp; DestList, short Count, const VARIANT&amp; Message); <br>void AboutBox(); <br>}; <br> <br>#endif // __MSCHAT_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

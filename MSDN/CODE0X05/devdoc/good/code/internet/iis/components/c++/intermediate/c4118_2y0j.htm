<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POWER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4123"></a>POWER.CPP</h2>
<pre><code>// Power.cpp : Implementation of CCATLPwrApp and DLL registration. <br> <br>#include "stdafx.h" <br>#include "CATLPwr.h" <br>#include "Power.h" <br>#include "context.h" <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CPower::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>    static const IID* arr[] =  <br>    { <br>        &amp;IID_IPower, <br>    }; <br> <br>    for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>    { <br>        if (InlineIsEqualGUID(*arr[i],riid)) <br>            return S_OK; <br>    } <br>    return S_FALSE; <br>} <br> <br>// Ctor <br>CPower::CPower() <br>    : m_bstrMyProperty(OLESTR("C++ ATL Power Component")) <br>{} <br> <br>// Get function for myProperty <br>STDMETHODIMP CPower::get_myProperty(BSTR* pbstrOutValue) <br>{ <br>    if (pbstrOutValue == NULL) <br>        return E_POINTER; <br> <br>    // Get Value from Property <br>    *pbstrOutValue = m_bstrMyProperty.Copy(); <br>     <br>    return S_OK; <br>} <br> <br>// Put function for myProperty <br>STDMETHODIMP CPower::put_myProperty(BSTR bstrInValue) <br>{ <br>    if (bstrInValue == NULL) <br>        return E_POINTER; <br> <br>    m_bstrMyProperty = bstrInValue; <br> <br>    return S_OK; <br>} <br> <br>// Basic Method which Converts bstrIn to Upper Case <br>STDMETHODIMP CPower::myMethod(BSTR bstrIn, BSTR* pbstrOut)   <br>{ <br>    if (bstrIn == NULL || pbstrOut == NULL) <br>        return E_POINTER; <br> <br>    // Create a temporary CComBSTR <br>    CComBSTR bstrTemp(bstrIn); <br> <br>    if (!bstrTemp) <br>        return E_OUTOFMEMORY; <br> <br>    // Make string uppercase    <br>    wcsupr(bstrTemp);   <br>     <br>    // Return m_str member of bstrTemp <br>    *pbstrOut = bstrTemp.Detach(); <br> <br>    return S_OK; <br>} <br> <br> <br>///////////// ASP-Specific Component Methods //////////////// <br> <br>// Get Function Returns the Name of the Current Script <br>STDMETHODIMP CPower::get_myPowerProperty(BSTR* pbstrOutValue) <br>{ <br>// the Context class is an easy way to use IIS 4's new way <br>// of getting instrinic objects.  The new method may seem <br>// more complex, but it is more powerful since obects no <br>// longer have to be page/session level to get access <br>// to them. <br>CContext cxt; <br>if ( FAILED( cxt.Init( CContext::get_Request ) ) ) <br>{ <br>return E_FAIL; <br>} <br> <br>// Do we have somewhere valid to store the return value? <br>if (pbstrOutValue == NULL) <br>return E_POINTER; <br> <br>// Initialize the return value <br>*pbstrOutValue = NULL; <br> <br>// Get the ServerVariables Collection <br>CComPtr&lt;IRequestDictionary&gt; piServerVariables; <br>HRESULT hr = cxt.Request()-&gt;get_ServerVariables(&amp;piServerVariables); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    // Get the SCRIPT_NAME item from the ServerVariables collection <br>    CComVariant vtIn(OLESTR("SCRIPT_NAME")), vtOut; <br>    hr = piServerVariables-&gt;get_Item(vtIn, &amp;vtOut); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    // Get the SCRIPT_NAME item from the ServerVariables collection <br>    // vtOut Contains an IDispatch Pointer.  To fetch the value <br>    // for SCRIPT_NAME, you must get the Default Value for the  <br>    // Object stored in vtOut using VariantChangeType. <br>    hr = VariantChangeType(&amp;vtOut, &amp;vtOut, 0, VT_BSTR); <br> <br>    // Copy and return SCRIPT_NAME <br>    if (SUCCEEDED(hr)) <br>        *pbstrOutValue = ::SysAllocString(V_BSTR(&amp;vtOut)); <br>     <br>    return hr; <br>} <br> <br>// ASP-specific Power Method <br>STDMETHODIMP CPower::myPowerMethod()   <br>{ <br>CContext cxt; <br>if ( FAILED( cxt.Init( CContext::get_Request | CContext::get_Response ) ) ) <br>{ <br>return E_FAIL; <br>} <br> <br>    // Get the ServerVariables Collection <br>    CComPtr&lt;IRequestDictionary&gt; piServerVariables; <br>    HRESULT hr = cxt.Request()-&gt;get_ServerVariables(&amp;piServerVariables); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    // Get the HTTP_USER_AGENT item from the ServerVariables collection <br>    CComVariant vtIn(OLESTR("HTTP_USER_AGENT")), vtOut; <br>    hr = piServerVariables-&gt;get_Item(vtIn, &amp;vtOut); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    // vtOut Contains an IDispatch Pointer.  To fetch the value <br>    // for HTTP_USER_AGENT, you must get the Default Value for the  <br>    // Object stored in vtOut using VariantChangeType. <br>    hr = VariantChangeType(&amp;vtOut, &amp;vtOut, 0, VT_BSTR); <br> <br>    if (SUCCEEDED(hr)) <br>    {  <br>        // Look for "MSIE" in HTTP_USER_AGENT string <br>        if (wcsstr(vtOut.bstrVal, L"MSIE") != NULL) <br>            cxt.Response()-&gt;Write(CComVariant( <br>                OLESTR("You are using a very powerful browser.")));  <br>        else <br>            cxt.Response()-&gt;Write(CComVariant( <br>                OLESTR("Try Internet Explorer today!"))); <br>    } <br>         <br>    return hr; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

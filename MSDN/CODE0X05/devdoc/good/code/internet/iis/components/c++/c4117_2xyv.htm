<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4117"></a>README.TXT</h2>
<pre><code>Multilingual Simple and Power Samples <br>                ===================================== <br> <br> <br>Table of Contents <br>================= <br> <br>    Overview <br>    Developing Components <br>    C++ <br>    ATL <br>    Installation <br>    Directory List <br>    Usage <br>    Sample ASP scripts <br>    Support <br>    Change Notes <br> <br> <br>Overview <br>======== <br> <br>Here, for your edification, are two Active Server Pages components, <br>each implemented in two different environments: C++/ATL (Microsoft <br>ActiveX Template Library) and Microsoft Visual Basic 5. <br> <br>The implementations are functionally equivalent.  Each implementation <br>should behave in exactly the same way.  Each implementation is written <br>in an idiomatic style to demonstrate the best way to implement the <br>component in that environment. <br> <br>The Simple component has one method (myMethod) and one property <br>(myProperty), which can be both retrieved (get) and modified (set). <br>MyMethod converts a string to uppercase; myProperty is a string in the <br>object that can be get or set.  There is nothing ASP-specific about <br>the Simple component and, if desired, it could be used from any OLE <br>container. <br> <br>The Power component (found in the \intermediate folder) is a superset <br>of the Simple component.  In addition to myMethod and myProperty, it  <br>has myPowerMethod and myPowerProperty (gettable but not settable),  <br>which demonstrate some ASP-specific features.  Two other standard but <br>optional ASP methods are also provided: OnStartPage and OnEndPage.   <br>These methods bracket the lifetime of a page.  OnStartPage is needed  <br>to gain access to the intrinsic ASP objects: Request, Response,  <br>Server, Application, and Session. <br> <br>MyPowerMethod and myPowerProperty make use of the Request and Response <br>objects: Request to gain access to the ServerVariables collection and <br>thereby the ScriptName and the HttpUserAgent (user's browser) <br>variables; Response to write directly back to the user's browser. <br>MyPowerProperty returns the name of the ASP script from which it was <br>called.  MyPowerMethod writes a browser-dependent message back to the <br>user's browser; one for Microsoft Internet Explorer, a different one <br>for anything else. <br> <br> <br>Developing Components <br>===================== <br> <br>You can develop ASP components in Visual C++, Visual J++, Visual <br>Basic, or any other language that builds ActiveX COM objects. <br> <br>These samples are written for IIS 4.0.  You must have the latest <br>version of IIS to compile and use these components.  You must <br>also have installed Microsoft Transaction Server (part of the Windows <br>NT 4.0 Option Pack). <br> <br> <br>C++ <br>=== <br> <br>The C++ samples require Microsoft Visual C++ 5.0 or newer along with <br>ATL (which comes with VC5). <br> <br>If you get an error about "don't know how to make asptlb.h" for the <br>power samples, you will need to copy <br> <br>&lt;InstallDir&gt;\iissamples\sdk\include <br> <br>to your include directory, \Program Files\DevStudio\VC\include.   <br>The default installation directory is C:\Inetpub. <br> <br>Finally you must have the lastest version of MS Transaction Server <br>installed (part of Windows NT 4.0 Option Pack).  Add the include path  <br>and library path of MTX before any system directories under <br>Tools:Options....  So your include path might look like this: <br>c:\program files\mts\include;c:program files\devstudio\vc\include;... <br>(depending on where you have installed MTX). <br> <br>If you intend to build from the command line, you must edit  <br>vcvars32.bat accordingly as well. <br> <br> <br>ATL <br>=== <br> <br>The ATL samples also requires the latest version of ATL (Microsoft <br>Active Template Library).  ATL ships with Visual C++ 5.0. <br> <br>ATL is the recommended library for writing ASP and other ActiveX <br>components in C++: <br>    * produces small, fast, industrial-strength components ("lean and mean") <br>    * supports all COM threading models (single, apartment, free) <br>    * supports IDispatch interfaces <br>    * dual interfaces are easy <br>    * supports the OLE error mechanism <br>    * methods are called very quickly <br>    * fine control over COM features ("closer to the metal") <br>    * many other features <br> <br>For ATL 2.0, in order to add a method or a property to a component, it <br>is necessary to modify the .idl, .h, and .cpp files by hand.  With ATL <br>2.1, the wizards in Visual C++ 5.0 automates much of this for you. <br> <br>To create a new component with ATL: <br>    * Start a New Project Workspace in Developer Studio <br>    * Select ATL COM AppWizard <br>    * Enter the name and location of the project <br>    * Hit Create. <br>    * Accept the defaults and hit Finish. <br> <br>Now that you've created the project, it's time to create a COM object <br>within the project.  In Visual C++ 5.0, you can go to the Insert menu <br>where you'll see New ATL Object... or you can right-click on the classes <br>in the ClassView pane, where you'll also see New ATL Object.... <br> <br>When the ATL Object Wizard pops up, you'll see two panes.  In the left <br>pane, click on Objects.  In the right pane, double-click on Simple Object. <br>If you have VC 5.0, you'll see a number of additional objects; click on <br>ActiveX Server Component instead. <br> <br>The ATL Object Wizard Properties dialog will appear.  On the Names tab, <br>type in the short name of your object.  The other names will be filled in <br>automatically.  You can edit them if you wish.  It's quite likely that <br>you'll want to edit the Prog ID. <br> <br>On the Attributes tab, you may want to change the Threading Model to Both. <br>You probably don't need to support Aggregation.  You ought to Support <br>ISupportErrorInfo.  The other attributes should not need to be changed. <br> <br>On the ASP tab, you can enable OnStartPage and OnEndPage methods and select <br>which of the ASP intrinsic objects you want to use.  However, it is now <br>recommended that you use the Object Context (which doesn't require the <br>OnStartPage and OnEndPage methods) rather than the Scripting Context (which <br>is what OnStartPage supplies you with).  This allows you to create more <br>powerful application state objects.  All the samples that need it use the <br>Object Context rather than the scripting context. <br> <br>Note the use of the ATL wrapper classes CComBSTR, CComVariant, <br>CComPtr, and CComQIPtr in the ATL samples to simplify management of <br>COM data types. <br> <br> <br>Installation <br>============ <br> <br>To install these sample components, you must first compile them with <br>Microsoft Visual C++.  Load the individual project files into VC++  <br>and build the DLLs.  You can also build the DLLs by just typing  <br>"nmake" in the command line.  Running nmake in the top level directory <br>(the directory this file is in) will build both the simple and power <br>DLLs. <br> <br>These components may not compile correctly unless you have the correct <br>header and library files.  You may need to copy all the header files <br>in ...\iissamples\sdk\include (default is C:\Inetpub\...) to your VC++  <br>include directory.  In addition, you may need to copy the MTS header  <br>and library files to the VC++ include and library directory.  The MTS  <br>header files are located in ...\MTS\include (default is C:\Program  <br>Files\...) while the MTS library files are located in ...\MTS\lib. <br> <br>*** NOTE: The MTS header and library files are not installed by  <br>default.  In most cases, you will need to install this using the  <br>Windows NT 4.0 Option Pack setup. <br> <br>If you intend to run these components on a machine other than the one  <br>on which they are compiled, you will need to copy the DLLs to the  <br>target machine and <br>    regsvr32 /s /c SAMPLE.dll <br>(the samples will be registered automatically on the machine they're <br>built on). <br> <br>If you have trouble registering components, you may be using the <br>wrong version of RegSvr32.exe.  Please use the version installed by <br>default in the directory \&lt;winnt-directory&gt;\system32\inetsrv. <br> <br> <br>Directory List <br>============== <br> <br>Directory        Description <br>---------        ----------- <br> <br> Simple          C++ ATL Simple Sample <br> Intermediate    C++ ATL Power Sample <br> <br> <br>Usage <br>===== <br> <br>To use the samples, simply call Server.CreateObject("IISSample.XXX") <br>to create the object, where "XXX" is one of <br>    C++ATLSimple     C++ATLPower <br>Then you may access the object's methods and properties from your ASP <br>script.  Read any of the sample ASP scripts to discover how to use the <br>objects. <br> <br> <br>Sample ASP scripts <br>================== <br> <br>You must copy the sample ASP scripts to a virtual directory (it need <br>not be a virtual root) on the IIS Server where you have installed the <br>sample components before they will work. <br> <br> <br>Support <br>======= <br> <br>This component is not officially supported by Microsoft Corporation. <br>Peer support is available on the Active Server Pages mailing list or on <br>the microsoft.public.inetserver.iis.activeserverpages newsgroup. <br> <br>To subscribe to the Active Server Pages mailing list, send mail to <br>listserv@listserv.msn.com with <br> <br>subscribe ActiveServerPages [firstname lastname] <br> <br>in the body of the message, and then follow the directions carefully. <br>(firstname and lastname are optional.) <br> <br>You can reach the newsgroup through msnews.microsoft.com and other NNTP <br>servers. <br> <br> <br>Change Notes <br>============ <br> <br>Version 1.0 Beta 1: February 1997 <br>--------------------------------- <br> <br>First release. <br> <br> <br>Version 1.0 Beta 2: March 1997 <br>------------------------------ <br> <br>* Fixed Developer Studio makefile problems in C++ components. <br>* Upgraded to build cleanly with ATL 2.0 (Visual C++ 4.2b) and ATL 2.0 (VC5). <br>* Better comments in Power components. <br> <br> <br>Version 2.0 Beta 3: September 1997 <br>---------------------------------- <br> <br>* Updated for IIS4.0 <br>* Using IObjectContext instead of IScriptingContext. <br> <br> <br>Version 2.1: October 1997 <br>------------------------- <br> <br>* Modified for the IIS4.0 SDK release <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

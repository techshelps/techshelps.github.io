<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPLE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4134"></a>SIMPLE.CPP</h2>
<pre><code>// Simple.cpp : Implementation of CSimple <br> <br>#include "stdafx.h" <br>#include "CATLSmpl.h" <br>#include "Simple.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>// Created by the ATL 1.1 COM Wizard <br>STDMETHODIMP CSimple::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>    static const IID* arr[] =  <br>    { <br>        &amp;IID_ISimple, <br>    }; <br> <br>    for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>    { <br>        if (InlineIsEqualGUID(*arr[i],riid)) <br>            return S_OK; <br>    } <br>    return S_FALSE; <br>} <br> <br>//Ctor <br>CSimple::CSimple() <br>    : m_bstrMyProperty(OLESTR("C++ ATL Simple Component")) <br>{} <br> <br>//Put function for myProperty <br>STDMETHODIMP CSimple::put_myProperty(BSTR bstrInValue) <br>{ <br>    if (bstrInValue == NULL) <br>        return E_POINTER; <br> <br>    m_bstrMyProperty = bstrInValue; <br> <br>    return S_OK; <br>} <br> <br>//Get function for myProperty <br>STDMETHODIMP CSimple::get_myProperty(BSTR* pbstrOutValue) <br>{ <br>    if (pbstrOutValue == NULL) <br>        return E_POINTER; <br> <br>    // Get Value from Property <br>    *pbstrOutValue = m_bstrMyProperty.Copy(); <br>     <br>    return S_OK; <br>} <br> <br>//Basic Method to convert a string to uppercase <br>STDMETHODIMP CSimple::myMethod(BSTR bstrIn, BSTR* pbstrOut)   <br>{ <br>    if (bstrIn == NULL || pbstrOut == NULL) <br>        return E_POINTER; <br> <br>    // Create a temporary CComBSTR <br>    CComBSTR bstrTemp(bstrIn); <br> <br>    if (!bstrTemp) <br>        return E_OUTOFMEMORY; <br> <br>    // Make string uppercase    <br>    wcsupr(bstrTemp);   <br>     <br>    // Return m_str member of bstrTemp <br>    *pbstrOut = bstrTemp.Detach(); <br> <br>    return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4152"></a>README.TXT</h2>
<pre><code>Multilingual Simple and Power Samples <br>                ===================================== <br> <br> <br>Table of Contents <br>================= <br> <br>    Overview <br>    Developing Components <br>    Visual Basic 5 <br>    Installation <br>    Directory List <br>    Usage <br>    Sample ASP scripts <br>    Support <br>    Change Notes <br> <br> <br>Overview <br>======== <br> <br>Here, for your edification, are two Active Server Pages components, <br>each implemented in two different environments: C++/ATL (Microsoft <br>ActiveX Template Library) and Microsoft Visual Basic 5. <br> <br>The implementations are functionally equivalent.  Each implementation <br>should behave in exactly the same way.  Each implementation is written <br>in an idiomatic style to demonstrate the best way to implement the <br>component in that environment. <br> <br>The Simple component has one method (myMethod) and one property <br>(myProperty), which can be both retrieved (get) and modified (set). <br>MyMethod converts a string to uppercase; myProperty is a string in the <br>object that can be get or set.  There is nothing ASP-specific about <br>the Simple component and, if desired, it could be used from any OLE <br>container. <br> <br>The Power component (located in the \intermediate directory) is a  <br>superset of the Simple component.  In addition to myMethod and  <br>myProperty, it has myPowerMethod and myPowerProperty (gettable but not  <br>settable), which demonstrate some ASP-specific features.  Two other  <br>standard but optional ASP methods are also provided: OnStartPage and  <br>OnEndPage.  These methods bracket the lifetime of a page.  OnStartPage  <br>is needed to gain access to the intrinsic ASP objects: Request,  <br>Response, Server, Application, and Session. <br> <br>MyPowerMethod and myPowerProperty make use of the Request and Response <br>objects: Request to gain access to the ServerVariables collection and <br>thereby the ScriptName and the HttpUserAgent (user's browser) <br>variables; Response to write directly back to the user's browser. <br>MyPowerProperty returns the name of the ASP script from which it was <br>called.  MyPowerMethod writes a browser-dependent message back to the <br>user's browser; one for Microsoft Internet Explorer, a different one <br>for anything else. <br> <br> <br>Developing Components <br>===================== <br> <br>You can develop ASP components in Visual C++, Visual J++, Visual <br>Basic, or any other language that builds ActiveX COM objects. <br> <br>These samples are written for IIS 4.0.  You must have the latest <br>version of IIS to compile and use these components.  You must <br>also have installed Microsoft Transaction Server (part of Windows NT <br>4.0 Option Pack). <br> <br> <br>Visual Basic 5 <br>============== <br> <br>These samples requires Visual Basic 5.0. <br>Follow these steps to build a project: <br> <br>1) Open the .vbp file in Visual Basic. <br>2) From the File menu, select 'Make XXX dll...' and provide a dll name. <br> <br>This procedure will build and register the sample component. <br> <br> <br>Installation <br>============ <br> <br>To install these sample components, you must first compile them with <br>Microsoft Visual Basic.  No binaries are supplied as these components  <br>are of interest only to developers.  If you intend to run these  <br>components on a machine other than the one on which they are compiled,  <br>you will need to copy the DLLs to the target machine and <br>    regsvr32 /s /c SAMPLE.dll <br>(the samples will be registered automatically on the machine they're <br>built on). <br> <br>If you have trouble registering components, you may be using the <br>wrong version of RegSvr32.exe.  Please use the version installed by <br>default in the directory &lt;winnt-dir&gt;\system32\inetsrv. <br> <br> <br>Directory List <br>============== <br> <br>Directory        Description <br>---------        ----------- <br> <br> Simple          Visual Basic 5 Simple Sample <br> Intermediate    Visual Basic 5 Power Sample <br> <br> <br>Usage <br>===== <br> <br>To use the samples, simply call Server.CreateObject("IISSample.XXX") <br>to create the object, where "XXX" is one of <br>    VB5Simple        VB5Power <br>Then you may access the object's methods and properties from your ASP <br>script.  Read any of the sample ASP scripts to discover how to use the <br>objects. <br> <br> <br>Sample ASP scripts <br>================== <br> <br>You must copy the sample ASP scripts to a virtual directory (it need <br>not be a virtual root) on the IIS Server where you have installed the <br>sample components before they will work. <br> <br> <br>Support <br>======= <br> <br>This component is not officially supported by Microsoft Corporation. <br>Peer support is available on the Active Server Pages mailing list or on <br>the microsoft.public.inetserver.iis.activeserverpages newsgroup. <br> <br>To subscribe to the Active Server Pages mailing list, send mail to <br>listserv@listserv.msn.com with <br> <br>subscribe ActiveServerPages [firstname lastname] <br> <br>in the body of the message, and then follow the directions carefully. <br>(firstname and lastname are optional.) <br> <br>You can reach the newsgroup through msnews.microsoft.com and other NNTP <br>servers. <br> <br> <br>Change Notes <br>============ <br> <br>Version 1.0 Beta 1: February 1997 <br>--------------------------------- <br> <br>First release. <br> <br> <br>Version 1.0 Beta 2: March 1997 <br>------------------------------ <br> <br>* Fixed Developer Studio makefile problems in C++ components. <br>* Upgraded to build cleanly with ATL 2.0 (Visual C++ 4.2b) and ATL 2.0 (VC5). <br>* Better comments in Power components. <br> <br> <br>Version 2.0 Beta 3: September 1997 <br>---------------------------------- <br> <br>* Updated for IIS4.0 <br>* Using IObjectContext instead of IScriptingContext. <br> <br> <br>Version 2.1: October 1997 <br>------------------------- <br> <br>* Modified for the IIS4.0 SDK release <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

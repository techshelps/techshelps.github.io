<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4164"></a>README.TXT</h2>
<pre><code>FORMDUMP - Form Decoder and Dumper, an Internet Information Server extension <br> <br>NOTE: FORMDUMP has been revised from its first release <br> <br>This sample is a Microsoft Internet Server extension, similar to CGI <br>extensions common to many internet servers.  FORMDUMP illustrates how <br>to write a DLL that can be used to obtain form data from a web <br>browser, and also how to build a reply to the form. <br> <br>This version of FORMDUMP incorporates two new features useful in <br>exploring how forms are submitted.  The original version of FORMDUMP <br>is structured into two major parts: organizing inbound data <br>into a memory structure, and using that data to build a HTML page. <br>This version adds a dump of the server variables as well as the <br>security context in which the DLL thread runs in. <br> <br>HttpExtensionProc does the following: <br> <br>1. Sends the header of the HTML response <br>2. Parses inbound form fields and send them back as HTML <br>3. Determines the security context in which the thread is running, <br>   and return the domain and user as HTML <br>4. Uses GetServerVariable to retrieve all server variables, and <br>   send them back as HTML <br>5. Sends the footer of the HTML resoponse <br>6. Returns control to IIS <br> <br>This version also adds an HtmlPrintf() function in html.h. <br> <br>To build this sample, you must have the Internet SDK installed, <br>and the environment of your compiler properly set.  A Visual C++  <br>4.0 makefile is included. <br> <br>The following files are included in the sample: <br> <br>FORMDUMP.CPP - The main source file and entry point for the DLL. <br> <br>KEYS.CPP     - A set of reusable form data decoding functions.  They <br>               implement an interface that you can use in your own <br>               extension. <br> <br>HTML.CPP     - A set of wrappers for common HTML features.  These <br>               wrappers can also be reused. <br> <br>KEYS.H       - The header file for the external interface <br>               implemented in KEYS.CPP. <br> <br>HTML.H       - The header file for all functions available in HTML.CPP. <br> <br>FORMDUMP.DEF - The definition file (one is required for all Win32 DLLs). <br> <br>FORMDUMP.MAK - A Visual C++ 4.0 make file. <br> <br>MAKEFILE     - A generic make file <br> <br> <br>NOTE: The source files all have .CPP extensions, though they really don't <br>rely on any C++ specific features.  However, you can use C++ features, <br>and if you use any of these .CPP files, you do not need extern "C". <br> <br>To Build the DLL <br>---------------- <br> <br>Simply run NMAKE in the directory containing FORMDUMP.CPP, KEYS.CPP, HTML.CPP, <br>and so on.  You must have the multi-threaded C Runtime libraries installed, <br>and your environment must point to: <br> <br>PATH=C:\MSTOOLS\BIN;C:\COMPILER\BIN <br>INCLUDE=C:\MSTOOLS\INCLUDE;C:\INETSDK\INCLUDE <br>LIB=C:\MSTOOLS\LIB <br>WWWROOT=C:\INETSRV\WWWROOT <br>WWWSCRIPTS=C:\INETSRV\SCRIPTS <br> <br>Where C:\MSTOOLS points to the Win32 SDK, C:\INETSDK points to the Internet <br>SDK, and C:\COMPILER points to your C++ compiler. <br> <br>When setting WWWROOT and WWWSCRIPTS to your Internet Information Server <br>locations, use a local or mapped drive.  If you want to use UNC names, be <br>careful with using a $ in the name, because NMAKE will treat it as a macro.   <br>If you must have a $ in the environment variable, preceed it with two <br>carets (^^$) because both the command prompt and NMAKE will convert the <br>caret symbol.  Here is an example of how to map to \\myserver\c$:  <br> <br>SET WWWROOT=\\myserver\C^^$\inetsrv\wwwroot <br> <br>Another issue is the type of C Runtimes that are linked with the ISAPI  <br>extension. Make sure the DLL version of the C Runtimes is installed on your <br>server, in the SYSTEM32 directory.  For Visual C++, the DLLs are MSVCRT40.DLL <br>and MSVCR40D.DLL.  If these DLLs are not available, you will see error 500 <br>when trying to access the DLL from a Web browser. </code></pre>
<p>&nbsp;</p></body>
</HTML>

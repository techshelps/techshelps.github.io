<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPLE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4194"></a>SIMPLE.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    Simple.cpp <br> <br>Abstract: <br> <br>    This module shows the basic functions needed for ISAPI extension <br> <br>--*/ <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br> <br> <br>  <br>BOOL WINAPI  <br>DllMain(  <br>    IN HINSTANCE hinstDll,  <br>    IN DWORD dwReason, <br>    IN LPVOID lpvContext  <br>) <br>/*++ <br>Function :  DllMain <br> <br>Description: <br> <br>    The initialization function for this DLL. <br> <br>Arguments: <br> <br>    hinstDll - Instance handle of the DLL <br>    dwReason - Reason why NT called this DLL <br>    lpvContext - Reserved parameter for future use <br> <br>Return Value: <br> <br>    Returns TRUE if successfull; otherwise FALSE. <br> <br>--*/ <br>{ <br>    // Note that appropriate initialization and termination code <br>    // would be written within the switch statement below.  Because <br>    // this example is very simple, none is currently needed. <br> <br>    switch( dwReason ) { <br>    case DLL_PROCESS_ATTACH: <br>        break; <br> <br>    case DLL_PROCESS_DETACH: <br>        break; <br>    } <br> <br>    return(TRUE); <br>} <br> <br>  <br>BOOL WINAPI  <br>GetExtensionVersion(  <br>    OUT HSE_VERSION_INFO * pVer  <br>) <br>/*++ <br> <br>Purpose: <br> <br>    The first function called after IIS successfully  <br>    loads the DLL.  The function should use the  <br>    version structure provided by IIS to set the ISAPI <br>    architectural version number of this extension. <br> <br>    A simple text-string is also set so that  <br>    administrators can identify the DLL. <br> <br>    Note that HSE_VERSION_MINOR and HSE_VERSION_MAJOR <br>    are constants defined in httpext.h. <br> <br>Arguments:  <br> <br>    pVer - points to extension version structure <br> <br>Return Value: <br> <br>    TRUE if successful; FALSE otherwise.     <br> <br>--*/ <br>{ <br>    pVer-&gt;dwExtensionVersion = MAKELONG( HSE_VERSION_MINOR, <br>                                             HSE_VERSION_MAJOR ); <br> <br>    strcpy( pVer-&gt;lpszExtensionDesc, <br>            "IIS SDK Simple ISAPI Extension" ); <br> <br>    return TRUE; <br>} <br> <br>  <br>DWORD WINAPI  <br>HttpExtensionProc(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB <br>) <br>/*++ <br> <br>Purpose:     <br> <br>    Function called by the IIS Server when a request  <br>    for the ISAPI dll arrives.  The HttpExtensionProc                   <br>    function processes the request and outputs the <br>    appropriate response to the web client using <br>    WriteClient(). <br> <br>Argument: <br> <br>    pECB - pointer to extention control block. <br> <br>Return Value: <br> <br>    HSE_STATUS_SUCCESS <br> <br>--*/ <br>{ <br>    static char szMessage[] =  <br>    "&lt;HTML&gt;" <br>    "&lt;HEAD&gt;&lt;TITLE&gt; Simple ISAPI Extension DLL &lt;/TITLE&gt;" <br>    "&lt;/HEAD&gt;\r\n" <br>    "&lt;BODY&gt;" <br>    "&lt;P&gt;Hello from Simple ISAPI Extension DLL!&lt;/P&gt;\r\n" <br>    "&lt;/BODY&gt;&lt;/HTML&gt;\r\n\r\n"; <br> <br>    HSE_SEND_HEADER_EX_INFO HeaderExInfo; <br> <br>    // <br>    // prepare headers  <br>    // <br> <br>    HeaderExInfo.pszStatus = "200 OK"; <br>    HeaderExInfo.pszHeader = "Content-type: text/html\r\n\r\n"; <br>    HeaderExInfo.cchStatus = strlen( HeaderExInfo.pszStatus ); <br>    HeaderExInfo.cchHeader = strlen( HeaderExInfo.pszHeader ); <br>    HeaderExInfo.fKeepConn = FALSE; <br> <br>     <br>    // <br>    // send headers using IIS-provided callback <br>    // (note - if we needed to keep connection open, <br>    //  we would set fKeepConn to TRUE *and* we would <br>    //  need to provide correct Content-Length: header) <br> <br>    pECB-&gt;ServerSupportFunction( <br>        pECB-&gt;ConnID, <br>        HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>        &amp;HeaderExInfo, <br>        NULL, <br>        NULL <br>        ); <br> <br>    // <br>    // Calculate length of string to output to client <br>    // <br> <br>    DWORD dwBytesToWrite = strlen( szMessage ); <br>     <br> <br>    // <br>    // send text using IIS-provied callback <br>    // <br> <br>    pECB-&gt;WriteClient( pECB-&gt;ConnID, szMessage, &amp;dwBytesToWrite, 0 ); <br> <br>    // <br>    // Indicate that the call to HttpExtensionProc was successful <br>    // <br> <br>    return HSE_STATUS_SUCCESS; <br>} <br> <br> <br>  <br>BOOL WINAPI <br>TerminateExtension(  <br>    IN DWORD dwFlags  <br>) <br>/*++ <br> <br>Routine Description: <br> <br>    This function is called when the WWW service is shutdown <br> <br>Arguments: <br> <br>    dwFlags - HSE_TERM_ADVISORY_UNLOAD or HSE_TERM_MUST_UNLOAD <br> <br>Return Value: <br> <br>    TRUE if extension is ready to be unloaded, <br>    FALSE otherwise <br> <br>--*/ <br>{ <br>    // Note: We must not agree to be unloaded if we have <br>    // any pending requests. <br> <br>    return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

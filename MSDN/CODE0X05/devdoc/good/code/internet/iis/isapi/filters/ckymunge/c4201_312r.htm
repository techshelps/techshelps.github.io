<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4203"></a>DEBUG.CPP</h2>
<pre><code>#include "CkyPch.h" <br>#include "debug.h" <br> <br> <br>#ifdef _DEBUG <br> <br>void __cdecl <br>Trace( <br>    LPCTSTR ptszFormat, <br>    ...) <br>{ <br>    TCHAR tszBuff[2048]; <br>    va_list args; <br>     <br>    va_start(args, ptszFormat); <br>    _vstprintf(tszBuff, ptszFormat, args); <br>    va_end(args); <br> <br>    OutputDebugString(tszBuff); <br>} <br> <br> <br>#define ACTIVE_SERVER_PAGES <br> <br># if defined(_MSC_VER)  &amp;&amp;  (_MSC_VER &gt;= 1000) <br> <br> <br>#  ifdef ACTIVE_SERVER_PAGES <br> <br>// The default assertion mechanism set up by Visual C++ 4 will not <br>// work with Active Server Pages because it's running inside a service <br>// and there is no desktop to interact with. <br> <br>// Note: for this to work properly, #define _WIN32_WINNT 0x400 before <br>// including &lt;winuser.h&gt; or MB_SERVICE_NOTIFICATION won't be #define'd. <br> <br>int <br>AspAssertHandler( <br>    int   nReportType, <br>    char* pszErrorText, <br>    int*  pnReturn) <br>{ <br>    const char szInfo[] = " (Press ABORT to terminate IIS," <br>                          " RETRY to debug this failure," <br>                          " or IGNORE to continue.)"; <br>    char* pszMessageTitle = NULL; <br>     <br>    // These flags enable message boxes to show up on the user's console <br>    switch (nReportType) <br>    { <br>    case _CRT_WARN: <br>        pszMessageTitle = "Warning"; <br>        break; <br>    case _CRT_ERROR: <br>        pszMessageTitle = "Fatal Error"; <br>        break; <br>    case _CRT_ASSERT: <br>        pszMessageTitle = "Assertion Failed"; <br>        break; <br>    }    <br>     <br>    char* pszMessageText = <br>        static_cast&lt;char*&gt;(_alloca(strlen(pszErrorText) + strlen(szInfo) + 1)); <br> <br>    strcpy(pszMessageText, pszErrorText); <br>    strcat(pszMessageText, szInfo); <br>     <br>    const int n = MessageBoxA(NULL, pszMessageText, pszMessageTitle, <br>                              (MB_SERVICE_NOTIFICATION | MB_TOPMOST <br>                               | MB_ABORTRETRYIGNORE | MB_ICONEXCLAMATION)); <br> <br>    if (n == IDABORT) <br>    { <br>        exit(1); <br>    } <br>    else if (n == IDRETRY) <br>    { <br>        *pnReturn = 1;   // tell _CrtDbgReport to start the debugger <br>        return TRUE;     // tell _CrtDbgReport to run <br>    } <br>     <br>    *pnReturn = 0;       // nothing for _CrtDbgReport to do <br> <br>    return FALSE; <br>} <br> <br>#  endif // ACTIVE_SERVER_PAGES <br># endif // _MSC_VER &gt;= 1000 <br> <br> <br> <br>void <br>DebugInit() <br>{ <br># if defined(_MSC_VER)  &amp;&amp;  (_MSC_VER &gt;= 1000) <br>#  ifdef ACTIVE_SERVER_PAGES <br>    // If we end up in _CrtDbgReport, don't put up a message box <br>    _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG); <br>    _CrtSetReportMode(_CRT_WARN,   _CRTDBG_MODE_DEBUG); <br>    _CrtSetReportMode(_CRT_ERROR,  _CRTDBG_MODE_DEBUG); <br> <br>    // Use AspAssertHandler to put up a message box instead <br>    _CrtSetReportHook(AspAssertHandler); <br>#  endif // ACTIVE_SERVER_PAGES <br> <br>    // Enable debug heap allocations &amp; check for memory leaks at program exit <br>    // The memory leak check will not be performed if inetinfo.exe is <br>    // run directly under a debugger, only if it is run as a service. <br>    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF <br>                   | _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG)); <br># endif // _MSC_VER &gt;= 1000 <br>} <br> <br> <br> <br>void <br>DebugTerm() <br>{ <br># if defined(_MSC_VER)  &amp;&amp;  (_MSC_VER &gt;= 1000) <br>#  ifdef ACTIVE_SERVER_PAGES <br>    // Turn off AspAssertHandler, so that we don't get numerous message boxes <br>    // if there are memory leaks on shutdown <br>    _CrtSetReportHook(NULL); <br>#  endif // ACTIVE_SERVER_PAGES <br># endif // _MSC_VER &gt;= 1000 <br>} <br> <br>#endif //_DEBUG <br> <br> <br> <br>BOOL <br>IsValidString( <br>    LPCTSTR ptsz, <br>    int nLength /* =-1 */) <br>{ <br>    if (ptsz == NULL) <br>        return FALSE; <br> <br>    return !IsBadStringPtr(ptsz, nLength); <br>} <br> <br> <br> <br>BOOL <br>IsValidAddress( <br>    LPCVOID pv, <br>    UINT nBytes, <br>    BOOL fReadWrite /* =TRUE */) <br>{ <br>    return (pv != NULL <br>            &amp;&amp;  !IsBadReadPtr(pv, nBytes) <br>            &amp;&amp;  (!fReadWrite  ||  !IsBadWritePtr((LPVOID) pv, nBytes))); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>THREADPOOL.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4188"></a>THREADPOOL.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name:    ThreadPool.c <br> <br>Abstract: <br> <br>    Work queue management functions. <br> <br>--*/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br>#include "threadpool.h" <br> <br> <br>// <br>// Structure to create simple linked list <br>// <br> <br>typedef struct { <br>EXTENSION_CONTROL_BLOCK *pECB;    // Data for list entry <br>DWORD dwNextEntry;        // Pointer to next entry <br>} ECB_QUEUE_ENTRY; <br> <br> <br>// <br>// Array that is a simple linked list <br>// <br> <br>ECB_QUEUE_ENTRY ECBqueue[WORK_QUEUE_ENTRIES]; <br> <br> <br>// <br>// Index of next ECBqueue entry to use, and last Entry in use. <br>// <br> <br>DWORD dwCurrentEntry, dwLastEntry; <br> <br> <br>// <br>// Flag to indicate that there are no other entries in the ECBqueue <br>// <br> <br>BOOL fQueueEmpty; <br> <br> <br>BOOL  <br>InitThreadPool( <br>    void <br>) <br>/*++ <br>Purpose: <br> <br>    Initialize our thread pool. <br> <br>--*/ <br>{ <br>DWORD i; <br>DWORD dwThreadID; <br> <br>    // <br>    // Create Semaphore in nonsignaled state <br>    // <br> <br>    if ( (hWorkSem = CreateSemaphore( NULL, 0, 0x7fffffff, NULL )) == NULL ) { <br>return FALSE; <br>    } <br> <br>InitializeCriticalSection( &amp;csQueueLock ); <br> <br>fQueueEmpty = TRUE; <br> <br>    // <br>// Create Pool Threads <br>    // <br> <br>for ( i = 0; i &lt; POOL_THREADS; i++ ) { <br>if ( CreateThread(  <br>                NULL,  <br>                0,  <br>                WorkerFunction,  <br>                (LPVOID) i,  <br>                0,  <br>                &amp;dwThreadID <br>                ) == NULL ) { <br>return FALSE; <br>        } <br>} <br> <br>    // <br>// Clear work queue <br>    // <br> <br>ZeroMemory( ECBqueue, WORK_QUEUE_ENTRIES * sizeof (ECB_QUEUE_ENTRY) ); <br> <br> <br>return TRUE; <br>} <br> <br> <br>BOOL  <br>AddWorkQueueEntry( <br>    IN EXTENSION_CONTROL_BLOCK * pECB <br>) <br>/*++ <br> <br>Purpose: <br> <br>    Add single work unit to the queue <br> <br>Arguments: <br> <br>    pECB - pointer to the extension control block <br> <br>Returns: <br>     <br>    TRUE if the unit was successfully queued <br>    FALSE if queue is full <br> <br>--*/ <br>{ <br>DWORD i; <br> <br>for ( i = 0; i &lt; WORK_QUEUE_ENTRIES; i++ ) { <br>if ( ECBqueue[i].pECB == NULL ) { <br>if ( fQueueEmpty ) { <br>dwCurrentEntry = i; <br>fQueueEmpty = FALSE; <br>            } else { <br>ECBqueue[dwLastEntry].dwNextEntry = i; <br>            } <br> <br>ECBqueue[i].pECB = pECB; <br>dwLastEntry = i; <br> <br>return TRUE; <br>} <br>} <br> <br>// If no NULL queue entry found, indicate failure <br>return FALSE; <br>} <br> <br>BOOL  <br>GetWorkQueueEntry( <br>    OUT EXTENSION_CONTROL_BLOCK ** ppECB <br>) <br>/*++ <br> <br>Purpose: <br> <br>Arguments: <br> <br>Returns: <br> <br>--*/ <br>{ <br>    if ( (*ppECB = ECBqueue[dwCurrentEntry].pECB) == NULL ) { <br>return FALSE; <br>    } else { <br>ECBqueue[dwCurrentEntry].pECB = NULL; <br>if (dwCurrentEntry == dwLastEntry)// If this is only pending item <br> <br>fQueueEmpty = TRUE; <br>else <br>dwCurrentEntry = ECBqueue[dwCurrentEntry].dwNextEntry; <br>} <br> <br>return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOKEN.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4217"></a>TOKEN.H</h2>
<pre><code>#ifndef __TOKEN_H__ <br>#define __TOKEN_H__ <br> <br>#include &lt;string&gt; <br>#include &lt;tchar.h&gt; <br> <br>#include "state.h" <br>#include "trie.h" <br> <br> <br>//+--------------------------------------------------------------------- <br>// CToken: <br> <br>class CToken <br>{ <br>public: <br>    enum BOUNDARY { <br>        IRRELEVANT = 1, <br>        WHITESPACE, <br>        ALPHA, <br>        NUMERIC, <br>        ALPHANUMERIC, <br>        NEWLINE, <br>    }; <br> <br>    CToken( <br>        const string&amp;  rstr, <br>        const BOUNDARY bndPrefix = IRRELEVANT, <br>        const BOUNDARY bndSuffix = IRRELEVANT); <br> <br>    static BOOL <br>    MatchesBoundaryClass( <br>        const TCHAR    tch, <br>        const BOUNDARY bnd); <br> <br>    BOOL <br>    MatchesPrefixBoundary( <br>        const TCHAR tch) const <br>    {return MatchesBoundaryClass(tch, m_bndPrefix);} <br> <br>    BOOL <br>    MatchesSuffixBoundary( <br>        const TCHAR tch) const <br>    {return MatchesBoundaryClass(tch, m_bndSuffix);} <br> <br>    virtual UINT <br>    CountBytes( <br>        CStateStack&amp; rss, <br>        LPCTSTR      ptszData, <br>        UINT         cchData) const = 0; <br> <br>    virtual UINT <br>    DoFilter( <br>        CStateStack&amp; rss, <br>        LPCTSTR&amp;     rptszData, <br>        UINT     cchData, <br>        LPTSTR&amp;      rptszOutBuf) const; <br> <br>    const string    m_str; <br>    const BOUNDARY  m_bndPrefix; <br>    const BOUNDARY  m_bndSuffix; <br>     <br>// Implementation <br>public: <br>#ifdef _DEBUG <br>    virtual void <br>    AssertValid() const; <br> <br>    virtual void <br>    Dump() const; <br>#endif <br> <br>    virtual <br>    ~CToken(); <br>}; <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// CTokenTrie: <br> <br>class CTokenTrie : public CTrie&lt;CToken, true, true&gt; <br>{ <br>public: <br>    CTokenTrie(); <br>     <br>    bool <br>    AddToken( <br>        const CToken* ptok); <br>     <br>    int <br>    EndOfBuffer( <br>        PHTTP_FILTER_RAW_DATA pRawData, <br>        int iStart); <br>     <br>private: <br>    // bit array for last letter of all tokens <br>    BYTE  m_afLastChar[(CHAR_MAX - CHAR_MIN + 1 + 7) / 8]; <br> <br>    bool <br>    _LastCharPresent( <br>        CHAR ch) const; <br> <br>    void <br>    _SetLastCharPresent( <br>        CHAR ch, <br>        bool f); <br>}; <br> <br>#endif // __TOKEN_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INVOKOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4163"></a>INVOKOBJ.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name:    InvokObj.cpp <br> <br>Abstract: <br> <br>    ISAPI Extension sample to invoke an automation server method <br> <br>--*/ <br> <br>#define _WIN32_WINNT 0x0400 <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br> <br> <br>// <br>// Import type library information about the COM object <br>// <br> <br>#import "GetUserName.dll" <br> <br> <br>BOOL WINAPI  <br>GetExtensionVersion( <br>    HSE_VERSION_INFO *pVer <br>    ) <br>/*++ <br> <br>Purpose: <br> <br>    This is required ISAPI Extension DLL entry point. <br> <br>Arguments: <br> <br>    pVer - poins to extension version info structure  <br> <br>Returns: <br> <br>    always returns TRUE <br> <br>--*/ <br>{ <br>    pVer-&gt;dwExtensionVersion = MAKELONG( HSE_VERSION_MINOR,  <br>                                         HSE_VERSION_MAJOR ); <br>    lstrcpyn( pVer-&gt;lpszExtensionDesc,  <br>        "InvokObj ISAPI Sample", HSE_MAX_EXT_DLL_NAME_LEN ); <br> <br>    // <br>    // Ensure COM is initialized <br>    // <br> <br>    CoInitialize( NULL ); <br> <br>    return TRUE; <br>} <br> <br>  <br>DWORD WINAPI  <br>HttpExtensionProc( <br>    EXTENSION_CONTROL_BLOCK *pECB <br>    ) <br>/*++ <br> <br>Purpose: <br> <br>    Demonstrate how to create an instance of the automation object <br>    using VC++ 5.0 extensions and how to invoke its method. <br> <br>Arguments: <br> <br>    pECB - pointer to the extenstion control block  <br> <br>Returns: <br> <br>    HSE_STATUS_SUCCESS on successful transmission completion <br>    HSE_STATUS_ERROR on failure <br> <br>--*/ <br>{ <br>    char szOutput[1024]; <br>    DWORD dwBuffSize; <br>    GETUSERNAMELib::IGetUserNameObjPtr pItf; <br>    HSE_SEND_HEADER_EX_INFO HeaderExInfo; <br>    HRESULT hr; <br> <br>    // <br>    // Send headers back to client <br>    // <br> <br>    HeaderExInfo.pszStatus = "200 OK"; <br>    HeaderExInfo.cchStatus = strlen( HeaderExInfo.pszStatus ); <br>    HeaderExInfo.pszHeader = "Content-type: text/html\r\n\r\n"; <br>    HeaderExInfo.cchHeader = strlen( HeaderExInfo.pszHeader ); <br>    HeaderExInfo.fKeepConn = FALSE; <br> <br>    pECB-&gt;ServerSupportFunction( pECB-&gt;ConnID,  <br>        HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>        &amp;HeaderExInfo, NULL, NULL ); <br> <br>    // <br>    // Initialize an instance of the automation server <br>    // <br>     <br>    hr = pItf.CreateInstance( L"GetUserNameObj.GetUserNameObj.1" ); <br> <br>    if ( FAILED( hr ) ) <br>    { <br>        wsprintf( szOutput, "&lt;h1&gt;Error.&lt;/h1&gt;&lt;hr&gt;Attempt to create instance " <br>            "of GetUserNameObj object failed with error %x.", hr ); <br>        dwBuffSize = strlen( szOutput ); <br> <br>        pECB-&gt;WriteClient( pECB-&gt;ConnID, szOutput, &amp;dwBuffSize, 0 ); <br> <br>        return HSE_STATUS_SUCCESS; <br>    } <br> <br> <br>    // <br>    // Build the output using the result of the call to <br>    // GetUserNameObj's GetMyName method <br>    // <br>     <br>    wsprintf( szOutput, "&lt;h1&gt;GetUserNameObj successfully instantiated." <br>        "&lt;/h1&gt;&lt;hr&gt;The GetMyName method returned %s.",  <br>        (char *)pItf-&gt;GetMyName( ) ); <br>     <br> <br>    // <br>    // Send the output back to the client <br>    // <br>     <br>    dwBuffSize = strlen( szOutput ); <br>    pECB-&gt;WriteClient( pECB-&gt;ConnID, szOutput, &amp;dwBuffSize, 0 ); <br> <br> <br>    return HSE_STATUS_SUCCESS; <br>} <br> <br>  <br>BOOL WINAPI  <br>TerminateExtension( <br>    DWORD dwFlags <br>    ) <br>/*++ <br> <br>Purpose: <br> <br>    This is optional ISAPI extension DLL entry point. <br>    If present, it will be called before unloading the DLL, <br>    giving it a chance to perform any shutdown procedures. <br>     <br>Arguments: <br>     <br>    dwFlags - specifies whether the DLL can refuse to unload or not <br>     <br>Returns: <br>     <br>    TRUE, if the DLL can be unloaded <br>     <br>--*/ <br>{ <br>    // <br>    // Balance the call to CoInitialize that we made in GetExtensionVersion <br>    // <br> <br>    CoUninitialize( ); <br> <br>    // <br>    // It is now OK to unload <br>    // <br>     <br>    return TRUE; <br>} <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

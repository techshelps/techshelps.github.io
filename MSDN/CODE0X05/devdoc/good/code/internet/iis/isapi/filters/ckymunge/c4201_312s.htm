<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4204"></a>DEBUG.H</h2>
<pre><code>/* <br> * Some simple debugging macros that look and behave a lot like their <br> * namesakes in MFC.  These macros should work in both C and C++ and <br> * do something useful with almost any Win32 compiler. <br> * <br> * George V. Reilly  &lt;georgere@microsoft.com&gt; <br> */ <br> <br>#ifndef __DEBUG_H__ <br>#define __DEBUG_H__ <br> <br>#include &lt;tchar.h&gt; <br> <br>#ifdef _DEBUG <br> <br># if defined(_MSC_VER)  &amp;&amp;  (_MSC_VER &gt;= 1000) <br>   /* Use the new debugging tools in Visual C++ 4.x */ <br>#  include &lt;crtdbg.h&gt; <br>   /* _ASSERTE will give a more meaningful message, but the string takes <br>    * space.  Use _ASSERT if this is an issue. */ <br>#  define ASSERT(f) _ASSERTE(f) <br># else <br>#  include &lt;assert.h&gt; <br>#  define ASSERT(f) assert(f) <br># endif <br> <br># define VERIFY(f)               ASSERT(f) <br># define DEBUG_ONLY(f)           (f) <br># define TRACE                   Trace <br># define TRACE0(psz)             Trace(_T("%s"), _T(psz)) <br># define TRACE1(psz, p1)         Trace(_T(psz), p1) <br># define TRACE2(psz, p1, p2)     Trace(_T(psz), p1, p2) <br># define TRACE3(psz, p1, p2, p3) Trace(_T(psz), p1, p2, p3) <br># define ASSERT_VALID(pObj)  \ <br>    do {ASSERT((pObj) != NULL); (pObj)-&gt;AssertValid();} while (0) <br># define DUMP(pObj)  \ <br>    do {ASSERT((pObj) != NULL); (pObj)-&gt;Dump();} while (0) <br># define DEBUG_INIT()            DebugInit() <br># define DEBUG_TERM()            DebugTerm() <br> <br>#else /* !_DEBUG */ <br> <br>  /* These macros should all compile away to nothing */ <br># define ASSERT(f)               ((void)0) <br># define VERIFY(f)               ((void)(f)) <br># define DEBUG_ONLY(f)           ((void)0) <br># define TRACE                   1 ? (void)0 : Trace <br># define TRACE0(psz) <br># define TRACE1(psz, p1) <br># define TRACE2(psz, p1, p2) <br># define TRACE3(psz, p1, p2, p3) <br># define ASSERT_VALID(pObj)      ((void)0) <br># define DUMP(pObj)              ((void)0) <br># define DEBUG_INIT()            ((void)0) <br># define DEBUG_TERM()            ((void)0) <br> <br>#endif /* !_DEBUG */ <br> <br> <br>#define ASSERT_POINTER(p, type) \ <br>    ASSERT(((p) != NULL)  &amp;&amp;  IsValidAddress((p), sizeof(type), FALSE)) <br> <br>#define ASSERT_NULL_OR_POINTER(p, type) \ <br>    ASSERT(((p) == NULL)  ||  IsValidAddress((p), sizeof(type), FALSE)) <br> <br> <br>/* Declarations for non-Windows apps */ <br> <br>#ifndef _WINDEF_ <br>typedef void*           LPVOID; <br>typedef const void*     LPCVOID; <br>typedef unsigned int    UINT; <br>typedef int             BOOL; <br>typedef const char*     LPCTSTR; <br>#endif /* _WINDEF_ */ <br> <br>#ifndef TRUE <br># define FALSE  0 <br># define TRUE   1 <br>#endif <br> <br> <br>#ifdef __cplusplus <br>extern "C" { <br> <br>/* Low-level sanity checks for memory blocks */ <br>BOOL IsValidAddress(LPCVOID pv, UINT nBytes, BOOL fReadWrite = TRUE); <br>BOOL IsValidString(LPCTSTR ptsz, int nLength = -1); <br> <br>#else /* !__cplusplus */ <br> <br>/* Low-level sanity checks for memory blocks */ <br>BOOL IsValidAddress(LPCVOID pv, UINT nBytes, BOOL fReadWrite); <br>BOOL IsValidString(LPCTSTR ptsz, int nLength); <br> <br>#endif /* !__cplusplus */ <br> <br>/* in debug version, writes trace messages to debug stream */ <br>void __cdecl <br>Trace( <br>    LPCTSTR pszFormat, <br>    ...); <br> <br>/* should be called from main(), WinMain(), or DllMain() */ <br>void <br>DebugInit(); <br> <br>void <br>DebugTerm(); <br> <br>#ifdef __cplusplus <br>} <br>#endif /* __cplusplus */ <br> <br>#endif /* __DEBUG_H__ */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

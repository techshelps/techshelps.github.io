<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KEEPALIVEP.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4187"></a>KEEPALIVEP.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name: KeepAliveP.c <br> <br>Abstract: <br> <br>      Sample ISAPI Extension demonstrating Keep-Alive with a thread pool. <br> <br>--*/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "threadpool.h" <br> <br>BOOL WINAPI  <br>DllMain(  <br>    IN HINSTANCE hinstDll,  <br>    IN DWORD fdwReason,  <br>    IN LPVOID lpvContext <br>)  <br>/*++ <br> <br>Purpose: <br>     <br>    Initialize the thread pool when the DLL is loaded by IIS. <br> <br>Arguments: <br> <br>    hinstDLL - DLL instance handle <br>    fdwReason - notification code <br>    lpdvContext - reserved <br> <br>Returns: <br> <br>    TRUE if notification was successfully processed by the DLL <br>    FALSE to indicate a failure <br> <br>--*/ <br>{ <br>BOOL fReturn = TRUE; <br> <br>switch ( fdwReason ) { <br> <br>case DLL_PROCESS_ATTACH: <br>fReturn = InitThreadPool( ); <br>break; <br>} <br> <br>return fReturn; <br>} <br> <br> <br>BOOL WINAPI  <br>GetExtensionVersion(  <br>    OUT HSE_VERSION_INFO * pVer <br>) <br>/*++ <br> <br>Purpose: <br> <br>    This is required ISAPI Extension DLL entry point. <br> <br>Arguments: <br> <br>    pVer - poins to extension version info structure  <br> <br>Returns: <br> <br>    always returns TRUE <br> <br>--*/ <br>{ <br>pVer-&gt;dwExtensionVersion = MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR ); <br>lstrcpyn(  <br>        pVer-&gt;lpszExtensionDesc,  <br>        "ISAPI Keep-Alive with Thread Pool Extension Sample", <br>HSE_MAX_EXT_DLL_NAME_LEN ); <br> <br>return TRUE; <br>} <br> <br> <br>DWORD WINAPI  <br>HttpExtensionProc(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB <br>) <br>/*++ <br> <br>Purpose: <br>    Demonstrate usage of persistent connections serviced by a thread pool. <br> <br>Arguments: <br> <br>    pECB - points to the extension control block <br> <br>Returns: <br>     <br>    HSE_STATUS_PENDING if request was successfully queued  <br>    HSE_SUCCESS_AND_KEEP_CONN if request was served immediately <br>        (presumably because the queue was full) <br> <br>--*/ <br>{ <br>DWORD dwSize; <br>    HSE_SEND_HEADER_EX_INFO HeaderExInfo; <br> <br>char szHeader[] =  <br>        "Connection: Keep-Alive\r\n" <br>        "Content-Length: %lu\r\n" <br>        "Content-type: text/html\r\n\r\n"; <br> <br>char szBusyMessage[] =  <br>        "&lt;html&gt; &lt;form method=get action=KeepAliveP.dll&gt; &lt;input type=submit&gt; " <br>    "&lt;br&gt;pECB-&gt;ConnID=%lu  &lt;br&gt;Server was too busy. &lt;/form&gt;&lt;/html&gt;"; <br> <br>char szBuffer[4096]; <br>char szBuffer2[4096]; <br> <br>EnterCriticalSection( &amp;csQueueLock ); <br> <br>    if ( !AddWorkQueueEntry( pECB ) ) { <br> <br>        // <br>        // if ECB could not be assigned <br>        // <br> <br>LeaveCriticalSection( &amp;csQueueLock ); <br> <br>sprintf( szBuffer2, szBusyMessage, pECB-&gt;ConnID ); <br> <br>        // <br>// Send outgoing header <br>        // <br> <br>sprintf( szBuffer, szHeader, strlen( szBuffer2 ) ); <br> <br>        HeaderExInfo.pszHeader = szBuffer; <br>        HeaderExInfo.cchHeader = strlen( szBuffer ); <br>        HeaderExInfo.pszStatus = "200 OK"; <br>        HeaderExInfo.cchStatus = strlen( HeaderExInfo.pszStatus ); <br>        HeaderExInfo.fKeepConn = TRUE; <br> <br> <br>pECB-&gt;ServerSupportFunction(  <br>            pECB-&gt;ConnID,  <br>            HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>            &amp;HeaderExInfo, <br>            NULL, <br>NULL <br>            ); <br> <br>        // <br>// Send content <br>        // <br> <br>dwSize = strlen( szBuffer2 ); <br>pECB-&gt;WriteClient( pECB-&gt;ConnID, szBuffer2, &amp;dwSize, 0 ); <br> <br>return HSE_STATUS_SUCCESS_AND_KEEP_CONN; <br> <br>} else { <br> <br>        // <br>        // release 1 thread from the pool <br>        // <br> <br>ReleaseSemaphore( hWorkSem, 1, NULL ); <br> <br>LeaveCriticalSection( &amp;csQueueLock ); <br>} <br> <br>return HSE_STATUS_PENDING; <br>} <br> <br>  <br>BOOL WINAPI <br>TerminateExtension(  <br>    IN DWORD dwFlags  <br>) <br>/*++ <br> <br>Routine Description: <br> <br>    This function is called when the WWW service is shutdown <br> <br>Arguments: <br> <br>    dwFlags - HSE_TERM_ADVISORY_UNLOAD or HSE_TERM_MUST_UNLOAD <br> <br>Return Value: <br> <br>    TRUE if extension is ready to be unloaded, <br>    FALSE otherwise <br> <br>--*/ <br>{ <br>    return TRUE; <br>} <br> <br> <br> <br>DWORD WINAPI  <br>WorkerFunction(  <br>    IN LPVOID pvThreadNum <br>) <br>/*++ <br> <br>Purpose: <br>     <br>    Worker thread function - simulates extended processing <br>    of the HTTP request <br> <br>Arguments: <br> <br>    pvThreadNum - thread number <br> <br>Returns: <br>     <br>    alsways returns 0 <br> <br>--*/ <br>{ <br>EXTENSION_CONTROL_BLOCK *pECB; <br>DWORD dwRet, dwState, dwSize, dwThreadNum; <br>    HSE_SEND_HEADER_EX_INFO HeaderExInfo; <br> <br>//This header will be filled in with the content length <br>char szHeader[] =  <br>        "Connection: Keep-Alive\r\nContent-Length: %lu\r\n" <br>        "Content-type: text/html\r\n\r\n"; <br> <br>char szContent[] =  <br>        "&lt;html&gt; &lt;form method=get action=KeepAliveP.dll&gt;&lt;input type=submit&gt; "  <br>    "&lt;br&gt;pECB-&gt;ConnID=%lu  &lt;br&gt;dwThreadNum=%lu&lt;/form&gt;&lt;/html&gt;"; <br> <br>char szBuffer[4096]; <br>char szBuffer2[4096]; <br> <br>dwThreadNum = ( DWORD ) pvThreadNum; <br> <br>while ( TRUE ) { <br> <br>dwRet = WaitForSingleObject( hWorkSem, INFINITE ); <br>if ( dwRet == WAIT_OBJECT_0 ) { <br> <br>EnterCriticalSection( &amp;csQueueLock ); <br> <br>            if ( GetWorkQueueEntry( &amp;pECB ) ) { <br>                 <br>                // <br>                // Found work to do <br>                // <br> <br>LeaveCriticalSection( &amp;csQueueLock ); <br> <br>sprintf( szBuffer2, szContent, pECB-&gt;ConnID, dwThreadNum ); <br> <br>// Send outgoing header <br>sprintf( szBuffer, szHeader, strlen( szBuffer2 ) ); <br> <br>                HeaderExInfo.pszHeader = szBuffer; <br>                HeaderExInfo.cchHeader = strlen( szBuffer ); <br>                HeaderExInfo.pszStatus = "200 OK"; <br>                HeaderExInfo.cchStatus = strlen( HeaderExInfo.pszStatus ); <br>                HeaderExInfo.fKeepConn = TRUE; <br> <br>pECB-&gt;ServerSupportFunction(  <br>                    pECB-&gt;ConnID,  <br>                    HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>&amp;HeaderExInfo,  <br>                    NULL, <br>                    NULL <br>                    ); <br> <br>                // <br>// Simulate extended processing <br>                // <br> <br>Sleep( 3000 ); <br> <br>// <br>                // Send content <br>                // <br> <br>dwSize = strlen( szBuffer2 ); <br>pECB-&gt;WriteClient( pECB-&gt;ConnID, szBuffer2, &amp;dwSize, 0 ); <br> <br>// <br>                // Tell IIS to keep the connection open <br>                // <br> <br>dwState = HSE_STATUS_SUCCESS_AND_KEEP_CONN; <br> <br>pECB-&gt;ServerSupportFunction(  <br>                    pECB-&gt;ConnID,  <br>                    HSE_REQ_DONE_WITH_SESSION,  <br>                    &amp;dwState,  <br>                    NULL,  <br>                    0  <br>                    ); <br> <br>            } else { <br> <br>                // <br>                // No item found is unexpected condition - exit thread <br>                // <br> <br>LeaveCriticalSection( &amp;csQueueLock ); <br>ExitThread( 0 ); <br>} <br> <br>        } else { <br>break; <br>        } <br>} <br> <br>return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

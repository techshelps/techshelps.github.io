<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPENF.H</title>
<link disabled rel=stylesheet href=../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4174"></a>OPENF.H</h2>
<pre><code>/*++ <br> <br>   Copyright    (c)    1995-1997    Microsoft Corporation <br> <br>   Module  Name : <br>      <br>     openf.h <br> <br>   Abstract: <br> <br>     This module defines functions for opening and closing files <br>      and provides transparent caching for file handles <br> <br>   Project: <br>    <br>       Internet Server API Extnensions Samples DLL <br> <br>   Revision History: <br> <br>--*/ <br> <br># ifndef _OPENF_HXX_ <br># define _OPENF_HXX_ <br> <br>/************************************************************ <br> *     Include Headers <br> ************************************************************/ <br> <br># include &lt;windows.h&gt; <br># include &lt;httpext.h&gt; <br> <br>/************************************************************ <br> *   Type Definitions   <br> ************************************************************/ <br> <br>// <br>//  Doubly linked list structure.  Can be used as either a list head, or <br>//  as link words. <br>// <br> <br>// typedef struct _LIST_ENTRY { <br>//   struct _LIST_ENTRY * volatile Flink; <br>//   struct _LIST_ENTRY * volatile Blink; <br>// } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY; <br> <br> <br>// <br>//  Doubly-linked list manipulation routines.  Implemented as macros <br>//  but logically these are procedures. <br>// <br> <br>// <br>//  VOID <br>//  InitializeListHead( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define InitializeListHead(ListHead) (\ <br>    (ListHead)-&gt;Flink = (ListHead)-&gt;Blink = (ListHead)) <br> <br>// <br>//  BOOLEAN <br>//  IsListEmpty( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define IsListEmpty(ListHead) \ <br>    ((ListHead)-&gt;Flink == (ListHead)) <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveHeadList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveHeadList(ListHead) \ <br>    (ListHead)-&gt;Flink;\ <br>{RemoveEntryList((ListHead)-&gt;Flink)} <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveTailList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveTailList(ListHead) \ <br>    (ListHead)-&gt;Blink;\ <br>{RemoveEntryList((ListHead)-&gt;Blink)} <br> <br>// <br>//  VOID <br>//  RemoveEntryList( <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define RemoveEntryList(Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    _EX_Flink = (Entry)-&gt;Flink;\ <br>    _EX_Blink = (Entry)-&gt;Blink;\ <br>    _EX_Blink-&gt;Flink = _EX_Flink;\ <br>    _EX_Flink-&gt;Blink = _EX_Blink;\ <br>                            } <br> <br>// <br>//  VOID <br>//  InsertTailList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertTailList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Blink = _EX_ListHead-&gt;Blink;\ <br>    (Entry)-&gt;Flink = _EX_ListHead;\ <br>    (Entry)-&gt;Blink = _EX_Blink;\ <br>    _EX_Blink-&gt;Flink = (Entry);\ <br>    _EX_ListHead-&gt;Blink = (Entry);\ <br>                                    } <br> <br>// <br>//  VOID <br>//  InsertHeadList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertHeadList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Flink = _EX_ListHead-&gt;Flink;\ <br>    (Entry)-&gt;Flink = _EX_Flink;\ <br>    (Entry)-&gt;Blink = _EX_ListHead;\ <br>    _EX_Flink-&gt;Blink = (Entry);\ <br>    _EX_ListHead-&gt;Flink = (Entry);\ <br>                                    } <br> <br> <br>/************************************************************ <br> *   Function Definitions   <br> ************************************************************/ <br> <br> <br>// <br>// Initialization and cleanup functions <br>// <br> <br>DWORD   InitFileHandleCache(VOID); <br>DWORD   CleanupFileHandleCache(VOID); <br> <br>HANDLE  FcOpenFile(IN EXTENSION_CONTROL_BLOCK * pecb, IN LPCSTR pszFile); <br>DWORD   FcCloseFile(IN HANDLE hFile); <br> <br>BOOL    FcReadFromFile( <br>               IN  HANDLE hFile, <br>               OUT CHAR * pchBuffer, <br>               IN  DWORD  dwBufferSize, <br>               OUT LPDWORD  pcbRead, <br>               IN OUT LPOVERLAPPED  pov <br>               ); <br> <br> <br># endif // _OPENF_HXX_ <br> <br>/************************ End of File ***********************/ <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

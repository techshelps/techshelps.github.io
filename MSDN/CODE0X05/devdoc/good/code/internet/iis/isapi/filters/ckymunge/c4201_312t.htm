<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILTER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4205"></a>FILTER.CPP</h2>
<pre><code>#include "CkyPch.h" <br> <br>#include "filter.h" <br>#include "keyword.h" <br>#include "utils.h" <br>#include "globals.h" <br> <br> <br> <br>// <br>// First pass through the data: count how many extra bytes we're going to <br>// need to allocate to hold the modified data, if any. <br>// <br> <br>int <br>CountExtraBytes( <br>    LPCTSTR ptszStart, <br>    UINT    cch) <br>{ <br>    ASSERT(ptszStart != NULL); <br>     <br>    LPCTSTR ptszEnd = ptszStart + cch; <br>    CStateStack ss; <br>    int cb = 0; <br>     <br>    for (LPCTSTR ptsz = ptszStart;  ptsz &lt; ptszEnd; ) <br>    { <br>        int cLen; <br>        const CToken* ptok = g_trie.Search(ptsz, &amp;cLen, ptszEnd - ptsz); <br> <br>        if (ptok == NULL) <br>            ++ptsz; <br>        else <br>        { <br>            cb += ptok-&gt;CountBytes(ss, ptsz, ptszEnd - ptsz); <br>            ptsz += ptok-&gt;m_str.length(); <br>        } <br>    } <br> <br>    return cb; <br>} <br> <br> <br> <br>// <br>// Second pass: munge the data <br>// <br> <br>void <br>DoFilter( <br>    LPCTSTR ptszStart, <br>    UINT    cch, <br>    LPCTSTR ptszSessionID, <br>    LPTSTR  ptszOutBuf) <br>{ <br>    ASSERT(ptszStart != NULL  &amp;&amp;  cch &gt; 0); <br>    ASSERT(ptszSessionID != NULL  &amp;&amp;  _tcslen(ptszSessionID) &gt; 0); <br>    ASSERT(ptszOutBuf != NULL); <br>     <br>    LPCTSTR ptszEnd = ptszStart + cch; <br>    // const int cchUrl = _tcslen(ptszSessionID); <br>    // const int cchUrlNameValue = _tcslen(s_szUrlNameValue); <br>    CStateStack ss(ptszSessionID); <br>     <br>    for (LPCTSTR ptsz = ptszStart;  ptsz &lt; ptszEnd; ) <br>    { <br>        int cLen; <br>        const CToken* ptok = g_trie.Search(ptsz, &amp;cLen, ptszEnd - ptsz); <br> <br>        if (ptok == NULL) <br>        { <br>            // TRACE("%c", *ptsz); <br>            *ptszOutBuf++ = *ptsz++; <br>        } <br>        else <br>        { <br>            // DoFilter is supposed to copy itself, if appropriate, <br>            // and adjust ptsz and ptszOutBuf <br>            ptok-&gt;DoFilter(ss, ptsz, ptszEnd - ptsz, ptszOutBuf); <br>        } <br>    } <br>} <br> <br> <br> <br>int <br>Filter( <br>    PHTTP_FILTER_CONTEXT  pfc, <br>    PHTTP_FILTER_RAW_DATA pRawData, <br>    LPCSTR                pszStart, <br>    UINT                  cch, <br>    int                   iStart, <br>    LPCSTR                pszSessionID) <br>{ <br>    ASSERT(pszSessionID != NULL); <br> <br>    // If empty SessionID (typically happens on plain HTML pages), nothing <br>    // useful can be done <br>    if (strlen(pszSessionID) == 0) <br>        return 0; <br> <br>    const int nExtra = CountExtraBytes(pszStart + iStart, cch - iStart); <br> <br>    if (nExtra &gt; 0) <br>    { <br>        TRACE("Filtering `%s', found %d extra bytes\n", pszSessionID, nExtra); <br>        const int nNewSize = nExtra + cch; <br>        TRACE("FilterNew: "); <br>        LPSTR pchNew = (LPSTR) AllocMem(pfc, nNewSize); <br>         <br>        memcpy(pchNew, pszStart, iStart); <br>        DoFilter(pszStart + iStart, cch - iStart, <br>                 pszSessionID, pchNew + iStart); <br>        pRawData-&gt;pvInData = pchNew; <br>        pRawData-&gt;cbInData = pRawData-&gt;cbInBuffer = nNewSize; <br>    } <br> <br>    return nExtra; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUMPVARS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4193"></a>DUMPVARS.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name:    DumpVars.cpp <br> <br>Abstract: <br> <br>    ISAPI Extension sample to dump server variables <br> <br>--*/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br> <br>  <br>DWORD WINAPI  <br>HttpExtensionProc(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB <br>) <br>/*++ <br> <br>Purpose: <br> <br>    Use WriteClient() function to dump the value of each  <br>    server variable in the table. <br> <br>Arguments: <br> <br>    pECB - pointer to the extenstion control block  <br> <br>Returns: <br> <br>    HSE_STATUS_SUCCESS <br> <br>--*/ <br>{ <br>char * aszServerVariables[] = <br>    {"APPL_MD_PATH", "APPL_PHYSICAL_PATH", "AUTH_PASSWORD", <br>"AUTH_TYPE", "AUTH_USER", "CERT_COOKIE", "CERT_FLAGS", <br>"CERT_ISSUER", "CERT_KEYSIZE", "CERT_SECRETKEYSIZE", <br>"CERT_SERIALNUMBER", "CERT_SERVER_ISSUER", <br>"CERT_SERVER_SUBJECT", "CERT_SUBJECT", "CONTENT_LENGTH", <br>"CONTENT_TYPE", "HTTP_ACCEPT", "HTTPS", "HTTPS_KEYSIZE", <br>"HTTPS_SECRETKEYSIZE", "HTTPS_SERVER_ISSUER", <br>"HTTPS_SERVER_SUBJECT", "INSTANCE_ID", "INSTANCE_META_PATH", <br>"PATH_INFO", "PATH_TRANSLATED", "QUERY_STRING", <br>"REMOTE_ADDR", "REMOTE_HOST", "REMOTE_USER", <br>"REQUEST_METHOD", "SCRIPT_NAME", "SERVER_NAME", <br>"SERVER_PORT", "SERVER_PORT_SECURE", "SERVER_PROTOCOL", <br>"SERVER_SOFTWARE", "URL"}; <br>char szOutput[2048], szValue[1024]; <br>DWORD dwBuffSize, dwNumVars, dwError, x; <br>    HSE_SEND_HEADER_EX_INFO HeaderExInfo; <br> <br>    // <br>// Send headers to the client <br>    // <br>    HeaderExInfo.pszStatus = "200 OK"; <br>    HeaderExInfo.pszHeader = "Content-type: text/html\r\n\r\n"; <br>    HeaderExInfo.cchStatus = strlen( HeaderExInfo.pszStatus ); <br>    HeaderExInfo.cchHeader = strlen( HeaderExInfo.pszHeader ); <br>    HeaderExInfo.fKeepConn = FALSE; <br>     <br>    pECB-&gt;ServerSupportFunction(  <br>        pECB-&gt;ConnID, <br>        HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>        &amp;HeaderExInfo, <br>        NULL, <br>        NULL <br>        ); <br> <br> <br>    // <br>// Begin sending back HTML to the client <br>    // <br> <br>strcpy(  <br>        szOutput,  <br>        "&lt;HTML&gt;\r\n&lt;BODY&gt;&lt;h1&gt;Server Variable Dump&lt;/h1&gt;\r\n&lt;hr&gt;\r\n" <br>        ); <br>dwBuffSize = strlen( szOutput ); <br>pECB-&gt;WriteClient( pECB-&gt;ConnID, szOutput, &amp;dwBuffSize, 0 ); <br> <br> <br>dwNumVars = ( sizeof aszServerVariables )/( sizeof aszServerVariables[0] ); <br> <br>    // <br>// Get the server variables and send them <br>    // <br> <br>for ( x = 0; x &lt; dwNumVars; x++ ) { <br> <br>dwBuffSize = 1024; <br>        szValue[0] = '\0'; <br>if ( !pECB-&gt;GetServerVariable(  <br>                pECB-&gt;ConnID,  <br>                aszServerVariables[x],  <br>                szValue,  <br>                &amp;dwBuffSize <br>                ) ) { <br> <br>            // <br>            // Analyze the problem and report result to user <br>            // <br> <br>switch (dwError = GetLastError( )) { <br>case ERROR_INVALID_PARAMETER: <br>strcpy( szValue, "ERROR_INVALID_PARAMETER" ); <br>break; <br> <br>case ERROR_INVALID_INDEX: <br>strcpy( szValue, "ERROR_INVALID_INDEX" ); <br>break; <br> <br>case ERROR_INSUFFICIENT_BUFFER: <br>wsprintf(  <br>                    szValue,  <br>                    "ERROR_INSUFFICIENT_BUFFER - %d bytes required.",  <br>                    dwBuffSize <br>                    ); <br>break; <br> <br>case ERROR_MORE_DATA: <br>strcpy( szValue, "ERROR_MORE_DATA" ); <br>break; <br> <br>case ERROR_NO_DATA: <br>strcpy( szValue, "ERROR_NO_DATA" ); <br>break; <br> <br>default: <br>wsprintf(  <br>                    szValue,  <br>                    "*** Error %d occured retrieving server variable ***", <br>                    dwError <br>                    ); <br>} <br>} <br> <br>        //  <br>        // Dump server variable name and value <br>        // <br> <br>wsprintf( szOutput, "%s: %s&lt;br&gt;\r\n", aszServerVariables[x], szValue ); <br>dwBuffSize = strlen( szOutput ); <br> <br>        // <br>        // Send the line to client <br>        // <br> <br>pECB-&gt;WriteClient( pECB-&gt;ConnID, szOutput, &amp;dwBuffSize, 0 ); <br>} <br> <br>// <br>    // End HTML page <br>    // <br> <br>strcpy( szOutput, "&lt;/BODY&gt;\r\n&lt;/HTML&gt;\r\n\r\n" ); <br>dwBuffSize = strlen( szOutput ); <br>pECB-&gt;WriteClient( pECB-&gt;ConnID, szOutput, &amp;dwBuffSize, 0 ); <br> <br>return HSE_STATUS_SUCCESS; <br>} <br> <br>  <br>BOOL WINAPI  <br>GetExtensionVersion(  <br>    OUT HSE_VERSION_INFO * pVer <br> ) <br>/*++ <br> <br>Purpose: <br> <br>    This is required ISAPI Extension DLL entry point. <br> <br>Arguments: <br> <br>    pVer - poins to extension version info structure  <br> <br>Returns: <br> <br>    always returns TRUE <br> <br>--*/ <br>{ <br>pVer-&gt;dwExtensionVersion =  <br>        MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR ); <br> <br>lstrcpyn(  <br>        pVer-&gt;lpszExtensionDesc,  <br>        "DumpVars ISAPI Sample",  <br>        HSE_MAX_EXT_DLL_NAME_LEN ); <br> <br>return TRUE; <br>} <br> <br>  <br>BOOL WINAPI <br>TerminateExtension(  <br>    IN DWORD dwFlags  <br>) <br>/*++ <br> <br>Routine Description: <br> <br>    This function is called when the WWW service is shutdown <br> <br>Arguments: <br> <br>    dwFlags - HSE_TERM_ADVISORY_UNLOAD or HSE_TERM_MUST_UNLOAD <br> <br>Return Value: <br> <br>    TRUE if extension is ready to be unloaded, <br>    FALSE otherwise <br> <br>--*/ <br>{ <br>    return TRUE; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REDIRECT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4191"></a>REDIRECT.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    redirect.cpp <br> <br>Abstract: <br> <br>    Redirect is a sample ISAPI extension to demonstrate redirecting <br>    a request.  It redirects requests to a URL specified on the <br>    query string.   <br> <br>--*/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#define BUFF_SIZE   2048 <br> <br>// <br>// local prototypes <br>// <br> <br>DWORD SendInstructionPage( EXTENSION_CONTROL_BLOCK * pECB ); <br> <br> <br> <br>  <br>BOOL WINAPI  <br>GetExtensionVersion(  <br>    OUT HSE_VERSION_INFO * pVer  <br>) <br>/*++ <br> <br>Purpose: <br> <br>    This is required ISAPI Extension DLL entry point. <br> <br>Arguments: <br> <br>    pVer - poins to extension version info structure  <br> <br>Returns: <br> <br>    always returns TRUE <br> <br>--*/ <br>{ <br>pVer-&gt;dwExtensionVersion =  <br>        MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR ); <br> <br>lstrcpyn(  <br>        pVer-&gt;lpszExtensionDesc,  <br>        "Redirect ISAPI Sample",  <br>        HSE_MAX_EXT_DLL_NAME_LEN ); <br> <br>return TRUE; <br>} <br> <br>  <br>DWORD WINAPI  <br>HttpExtensionProc(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>/*++ <br> <br>Purpose: <br> <br>    If no query string is present, or if the query <br>    string is not identified as a legal target for redirection, <br>    Redirect.dll will return a page to the client with brief  <br>    instructions for its use. <br> <br>    Redirections to a resource on the same server as the dll will <br>    be handled by IIS and will be transparent to the browser <br>    (HSE_REQ_SEND_URL). <br> <br>    Redirections to a resource on a different server will result <br>    in an HTTP 302 response instructing the browser to obtain the  <br>    resource from another location (HSE_REQ_SEND_URL_REDIRECT_RESP). <br> <br>Arguments: <br> <br>    pECB - pointer to the extenstion control block  <br> <br>Returns: <br> <br>    HSE_STATUS_SUCCESS on successful completion <br>    HSE_STATUS_ERROR on failure <br> <br>--*/ <br>{ <br>    //         <br>// If no query string is present, return the instruction page <br>    // <br> <br>    if ( !strlen( pECB-&gt;lpszQueryString ) ) { <br> <br>return SendInstructionPage( pECB ); <br>    } <br> <br>    // <br>// Check to see if the redirect URL is on another server. If it is, use <br>// HSE_REQ_SEND_URL_REDIRECT_RESP.  If it's on this local server, use <br>// HSE_REQ_SEND_URL to return the specified URL without using an HTTP 302 <br>// status code. <br>    // <br> <br>DWORD dwBuffSize = strlen( pECB-&gt;lpszQueryString ); <br> <br> <br>    if ( !strnicmp( pECB-&gt;lpszQueryString, "http://", 7 ) ) { <br> <br>        pECB-&gt;ServerSupportFunction(  <br>            pECB-&gt;ConnID,  <br>            HSE_REQ_SEND_URL_REDIRECT_RESP,  <br>            pECB-&gt;lpszQueryString,  <br>            &amp;dwBuffSize,  <br>            NULL  <br>            ); <br> <br>    } else { <br> <br>        // <br>// Check to make sure that query string begins with a '/'. <br>        // <br> <br>        if ( *( pECB-&gt;lpszQueryString ) != '/' ) { <br> <br>return SendInstructionPage( pECB ); <br>        } <br> <br>pECB-&gt;ServerSupportFunction(  <br>            pECB-&gt;ConnID,  <br>            HSE_REQ_SEND_URL,  <br>            pECB-&gt;lpszQueryString,  <br>            &amp;dwBuffSize,  <br>            NULL  <br>            ); <br>} <br> <br>return HSE_STATUS_SUCCESS; <br>} <br> <br>  <br>DWORD  <br>SendInstructionPage(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>/*++ <br> <br>Purpose: <br>    Send short http usage description to the user. <br> <br>Arguments: <br> <br>    pECB - pointer to the extenstion control block  <br>     <br>Returns: <br> <br>    HSE_STATUS_SUCCESS on successful completion <br>    HSE_STATUS_ERROR on failure <br> <br>--*/ <br>{ <br> <br>char szStatus[] = "200 OK"; <br>char szContent[] = <br>"&lt;html&gt;" <br>"&lt;head&gt;&lt;title&gt;Redirect URL&lt;/title&gt;&lt;/head&gt;" <br>"&lt;body&gt;" <br>"&lt;h1&gt;Redirect.dll&lt;/h1&gt;\r\n&lt;hr&gt;\r\n" <br>"Redirect.dll returns the resource specified on the query string.&lt;br&gt;\r\n&lt;br&gt;\r\n" <br>"To specify a resource on the same server as Redirect.dll, use the following form:&lt;br&gt;\r\n&lt;br&gt;\r\n" <br>"&lt;code&gt; http://server/scripts/Redirect.dll?/virtualdir/file.htm &lt;/code&gt;&lt;br&gt;\r\n&lt;br&gt;\r\n" <br>"To specify a resource on another server, use the following form:&lt;br&gt;\r\n&lt;br&gt;\r\n" <br>"&lt;code&gt; http://server/scripts/Redirect.dll?http://server/virtualdir/file.htm &lt;/code&gt;" <br>"&lt;/body&gt;" <br>"&lt;/html&gt;"; <br> <br>char szHeaderBase[] = "Content-Length: %lu\r\nContent-type: text/html\r\n\r\n"; <br>char szHeader[BUFF_SIZE]; <br> <br> <br> <br>// <br>//  fill in byte count in Content-Length header <br>// <br> <br>    DWORD cchContent = strlen( szContent ); <br> <br>sprintf( szHeader, szHeaderBase, cchContent ); <br> <br> <br>// <br>//  Populate SendHeaderExInfo struct <br>// <br> <br>HSE_SEND_HEADER_EX_INFO SendHeaderExInfo; <br> <br>SendHeaderExInfo.pszStatus = szStatus; <br>SendHeaderExInfo.pszHeader = szHeader; <br>SendHeaderExInfo.cchStatus = strlen( szStatus ); <br>SendHeaderExInfo.cchHeader = strlen( szHeader ); <br>SendHeaderExInfo.fKeepConn = FALSE; <br> <br>    // <br>    // Send header <br>    // <br> <br>if ( !pECB-&gt;ServerSupportFunction(  <br>pECB-&gt;ConnID, <br>HSE_REQ_SEND_RESPONSE_HEADER_EX, <br>&amp;SendHeaderExInfo, <br>NULL, <br>NULL <br>    ) ) { <br> <br>return HSE_STATUS_ERROR; <br>} <br> <br>// <br>//  Send content <br>// <br> <br>if ( !pECB-&gt;WriteClient( pECB-&gt;ConnID, szContent, &amp;cchContent, 0 ) ) { <br> <br>return HSE_STATUS_ERROR; <br>} <br> <br>return HSE_STATUS_SUCCESS; <br> <br>} <br> <br>  <br>BOOL WINAPI <br>TerminateExtension(  <br>    IN DWORD dwFlags  <br>) <br>/*++ <br> <br>Routine Description: <br> <br>    This function is called when the WWW service is shutdown <br> <br>Arguments: <br> <br>    dwFlags - HSE_TERM_ADVISORY_UNLOAD or HSE_TERM_MUST_UNLOAD <br> <br>Return Value: <br> <br>    TRUE if extension is ready to be unloaded, <br>    FALSE otherwise <br> <br>--*/ <br>{ <br>    return TRUE; <br>} <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

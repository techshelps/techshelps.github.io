<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NOTIFY.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4212"></a>NOTIFY.H</h2>
<pre><code>#ifndef __NOTIFY_H__ <br>#define __NOTIFY_H__ <br> <br> <br>#define SZ_SESSION_ID_COOKIE_NAME      "ASPSESSIONID" <br>#define SZ_SESSION_ID_COOKIE_NAME_SIZE 12 // strlen(SZ_SESSION_ID_COOKIE_NAME) <br>#define MAX_SESSION_ID_SIZE 24 <br> <br>// the different types of munging available <br>// off-no munging will be done <br>// on-munging will always be done <br>// smart-the munger will "test the waters" to see if cookies are getting through for each session. <br>//If they are, the munger will not be effectively off for this session.  Otherwise, cookies <br>//will be munged as usual. <br>typedef enum <br>{ <br>MungeMode_Off=0, <br>MungeMode_On, <br>MungeMode_Smart <br>} MungeModeT; <br> <br>// the munging mode.  This will be read from the registry upon initialization <br>extern intg_mungeMode; <br> <br>// the session ID size is either 16 or 24 characters (depending on the server version) <br>extern long g_SessionIDSize; <br> <br>extern CHAR g_szCookieExtra[]; <br> <br>// states for OnSendRawData <br> <br>enum HN_STATE { <br>    HN_UNDEFINED = 0, <br>    HN_SEEN_URL, <br>    HN_IN_HEADER, <br>    HN_IN_BODY, <br>}; <br> <br> <br>enum CONTENT_TYPE { <br>    CT_UNDEFINED = 0, <br>    CT_TEXT_HTML, <br>}; <br> <br>class CNotification <br>{ <br>public: <br>    enum {SPARE_BYTES = 2}; <br>     <br>    static <br>    CNotification* <br>    Create( <br>        PHTTP_FILTER_CONTEXT pfc, <br>        LPCSTR               pszCookie); <br>         <br>    static <br>    void <br>    Destroy( <br>        PHTTP_FILTER_CONTEXT pfc); <br> <br>    static <br>    CNotification* <br>    Get( <br>        PHTTP_FILTER_CONTEXT pfc) <br>    {return static_cast&lt;CNotification*&gt;(pfc-&gt;pFilterContext);} <br> <br>    static <br>    CNotification* <br>    SetSessionID( <br>        PHTTP_FILTER_CONTEXT pfc, <br>        LPCSTR               pszCookie); <br>     <br>    LPCSTR <br>    SessionID() const <br>    {return m_szSessionID;} <br> <br>    HN_STATE <br>    State() const <br>    {return m_nState;} <br> <br>    void <br>    AppendToken( <br>        PHTTP_FILTER_CONTEXT pfc, <br>        LPCSTR               pszNewData, <br>        int                  cchNewData); <br> <br>bool MungingOff() const <br>{return ( !m_fEatCookies ) &amp;&amp; ( !m_fTestCookies );} <br> <br>protected: <br>    CNotification( <br>        LPCSTR pszCookie); <br> <br>    ~CNotification(); <br>     <br>public: <br>    HN_STATE     m_nState; <br>    CONTENT_TYPE m_ct; <br>    CHAR         m_szSessionID[ MAX_SESSION_ID_SIZE ]; <br>    LPSTR        m_pszUrl; <br>    LPBYTE       m_pbPartialToken; <br>    int          m_cbPartialToken; <br>    LPBYTE       m_pbTokenBuffer; <br>    int          m_cbTokenBuffer; <br>    DWORD        m_cchContentLength; <br>    bool         m_fEatCookies; <br>bool         m_fTestCookies; <br>}; <br> <br>#endif // __NOTIFY_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTML.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4165"></a>HTML.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name:    html.cpp <br> <br>Abstract: <br> <br>   This module contains simple HTML authoring functions. <br> <br> <br>--*/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;httpext.h&gt; <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdarg.h&gt; <br> <br>#include "html.h" <br> <br> <br>void <br>WriteString(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpsz <br>) <br>{ <br>    DWORD dwBytesWritten; <br> <br>    dwBytesWritten = lstrlen( lpsz ); <br>    pECB-&gt;WriteClient( pECB-&gt;ConnID, (PVOID) lpsz, &amp;dwBytesWritten, 0 ); <br>} <br> <br> <br>void  <br>HtmlCreatePage(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszTitle <br>) <br>{ <br>    WriteString( pECB, "&lt;HTML&gt;\r\n\r\n" ); <br> <br>    if ( lpszTitle ) { <br>        WriteString( pECB, "&lt;HEAD&gt;&lt;TITLE&gt;" ); <br>        HtmlWriteText( pECB, lpszTitle ); <br>        WriteString( pECB, "&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n\r\n" ); <br>    } <br>    WriteString( pECB, "&lt;BODY&gt;\r\n\r\n" ); <br>} <br> <br> <br>void  <br>HtmlEndPage(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB <br>) <br>{ <br>    WriteString( pECB, "&lt;/BODY&gt;\r\n\r\n" ); <br>    WriteString( pECB, "&lt;/HTML&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlHeading(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN int nHeading, <br>    IN LPCSTR lpszText <br>) <br>{ <br>    HtmlBeginHeading( pECB, nHeading ); <br>    HtmlWriteText( pECB, lpszText ); <br>    HtmlEndHeading( pECB, nHeading ); <br>} <br> <br> <br>void  <br>HtmlBeginHeading(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN int nHeading <br>) <br>{ <br>    char szCode[16]; <br> <br>    wsprintf( szCode, "&lt;H%i&gt;", nHeading ); <br>    WriteString( pECB, szCode ); <br>} <br> <br> <br>void  <br>HtmlEndHeading(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN int nHeading <br>) <br>{ <br>    char szCode[16]; <br> <br>    wsprintf( szCode, "&lt;/H%i&gt;", nHeading ); <br>    WriteString( pECB, szCode ); <br>} <br> <br> <br>void  <br>HtmlWriteTextLine(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpsz <br>) <br>{ <br>    HtmlWriteText( pECB, lpsz ); <br>    WriteString( pECB, "\r\n" ); <br>} <br> <br> <br>void  <br>HtmlWriteText(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpsz <br>) <br>{ <br>    char szBuf[1028]; <br>    int nLen; <br>    int i; <br> <br>    //  <br>    // Build up enough data to make call to WriteString <br>    // worthwhile; convert special chars too. <br>    //  <br>    nLen = 0; <br>    for ( i = 0; lpsz[i]; i++ ) { <br>        if ( lpsz[i] == '&lt;' ) <br>            lstrcpy( &amp;szBuf[nLen], "&amp;lt;" ); <br>        else if ( lpsz[i] == '&gt;' ) <br>            lstrcpy( &amp;szBuf[nLen], "&amp;gt;" ); <br>        else if ( lpsz[i] == '&amp;' ) <br>            lstrcpy( &amp;szBuf[nLen], "&amp;amp;" ); <br>        else if ( lpsz[i] == '\"' ) <br>            lstrcpy( &amp;szBuf[nLen], "&amp;quot;" ); <br>        else { <br>            szBuf[nLen] = lpsz[i]; <br>            szBuf[nLen + 1] = 0; <br>        } <br> <br>        nLen += lstrlen( &amp;szBuf[nLen] ); <br> <br>        if ( nLen &gt;= 1024 ) { <br>            WriteString( pECB, szBuf ); <br>            nLen = 0; <br>        } <br>    } <br> <br>    if ( nLen ) <br>        WriteString( pECB, szBuf ); <br>} <br> <br> <br>void  <br>HtmlEndParagraph(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;P&gt;\r\n" ); <br>} <br> <br> <br>// <br>// HtmlHyperLink adds a hyptertext link.  lpszDoc is the destination <br>// document, and lpszText is the display text. <br>//  <br>// HtmlHyperLinkAndBookmark adds a hyperlink with a bookmark link. <br>// HtmlBookmarkLink adds only a bookmark link. <br>//  <br> <br>void  <br>HtmlHyperLink(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszDoc,  <br>    IN LPCSTR lpszText <br>) <br>{ <br>    WriteString( pECB, "&lt;A HREF=\"" ); <br>    HtmlWriteText( pECB, lpszDoc ); <br>    WriteString( pECB, "\"&gt;" ); <br>    HtmlWriteText( pECB, lpszText ); <br>    WriteString( pECB, "&lt;/A&gt;\r\n" ); <br>} <br> <br>void  <br>HtmlHyperLinkAndBookmark(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB, <br>    IN LPCSTR lpszDoc,  <br>    IN LPCSTR lpszBookmark, <br>    IN LPCSTR lpszText <br>) <br>{ <br>    WriteString( pECB, "&lt;A HREF=\"" ); <br>    if ( lpszDoc ) <br>        HtmlWriteText( pECB, lpszDoc ); <br>    WriteString( pECB, "#" ); <br>    HtmlWriteText( pECB, lpszBookmark ); <br>    WriteString( pECB, "\"&gt;" ); <br>    HtmlWriteText( pECB, lpszText ); <br>    WriteString( pECB, "&lt;/A&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlBookmarkLink(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszBookmark, <br>    IN LPCSTR lpszText <br>) <br>{ <br>    HtmlHyperLinkAndBookmark( pECB, NULL, lpszBookmark, lpszText ); <br>} <br> <br> <br>// <br>// The following support list formatting. <br>//  <br> <br>void  <br>HtmlBeginUnnumberedList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;UL&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlBeginListItem(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;LI&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndUnnumberedList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/UL&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginNumberedList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;OL&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndNumberedList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/OL&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginDefinitionList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;DL&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndDefinitionList(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/DL&gt;" ); <br>} <br> <br> <br>void  <br>HtmlDefinition(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszTerm, <br>    IN LPSTR lpszDef <br>) <br>{ <br>    int nStart, nEnd, nLen; <br>    char tcHolder; <br> <br>    WriteString( pECB, "&lt;DT&gt; " ); <br>    HtmlWriteText( pECB, lpszTerm ); <br>    WriteString( pECB, "\r\n" ); <br>    WriteString( pECB, "&lt;DD&gt; " ); <br> <br>    nStart = 0; <br>    nLen = lstrlen( lpszDef ); <br>    do { <br>        nEnd = nStart + 70; <br>        if ( nEnd &gt;= nLen ) { <br>            HtmlWriteText( pECB, &amp;lpszDef[nStart] ); <br>            WriteString( pECB, "\r\n" ); <br>            break; <br>        } <br>        while ( nEnd &gt; nStart ) <br>            if ( lpszDef[nEnd] == ' ' ) <br>                break; <br> <br>        if ( nEnd == nStart ) <br>            // too long! <br>            nEnd = nStart + 70; <br> <br>        // write defintion segment <br>        tcHolder = lpszDef[nEnd]; <br>        lpszDef[nEnd] = 0; <br>        HtmlWriteText( pECB, &amp;lpszDef[nStart] ); <br>        WriteString( pECB, "\r\n" ); <br>        lpszDef[nEnd] = tcHolder; <br>        nStart = nEnd; <br> <br>        // skip excess whitespace <br>        while ( lpszDef[nStart] == ' ' ) <br>            nStart++; <br> <br>        // pretty formatting <br>        if ( nStart &lt; nLen ) <br>            WriteString( pECB, "     " ); <br>    } while ( nStart &lt; nLen ); <br>} <br> <br> <br>// For complex defintions <br>void  <br>HtmlBeginDefinitionTerm(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;DT&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginDefinition(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;DD&gt;" ); <br>} <br> <br> <br>// <br>// Text formatting <br>//  <br> <br>void  <br>HtmlBeginPreformattedText(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;PRE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndPreformattedText(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/PRE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginBlockQuote(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;BLOCKQUOTE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndBlockQuote(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/BLOCKQUOTE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginAddress(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;ADDRESS&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndAddress(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/ADDRESS&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginDefine(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;DFN&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndDefine(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/DFN&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginEmphasis(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;EM&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndEmphasis(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/EM&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginCitation(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;CITE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndCitation(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/CITE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginCode(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;CODE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndCode(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/CODE&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginKeyboard(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;KBD&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndKeyboard(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/KBD&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginStatus(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;SAMP&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndStatus(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/SAMP&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginStrong(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;STRONG&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndStrong(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/STRONG&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBeginVariable(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;VAR&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndVariable(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/VAR&gt;" ); <br>} <br> <br> <br>void  <br>HtmlBold(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszText <br>) <br>{ <br>    HtmlBeginBold( pECB ); <br>    HtmlWriteText( pECB, lpszText ); <br>    HtmlEndBold( pECB ); <br>} <br> <br> <br>void  <br>HtmlBeginBold(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;B&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndBold(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/B&gt;" ); <br>} <br> <br> <br>void  <br>HtmlItalic(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszText <br>) <br>{ <br>    HtmlBeginItalic( pECB ); <br>    HtmlWriteText( pECB, lpszText ); <br>    HtmlEndItalic( pECB ); <br>} <br> <br> <br>void  <br>HtmlBeginItalic(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;I&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndItalic(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/I&gt;" ); <br>} <br> <br> <br>void  <br>HtmlFixed(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszText <br>) <br>{ <br>    HtmlBeginFixed( pECB ); <br>    HtmlWriteText( pECB, lpszText ); <br>    HtmlEndFixed( pECB ); <br>} <br> <br> <br>void  <br>HtmlBeginFixed(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;TT&gt;" ); <br>} <br> <br> <br>void  <br>HtmlEndFixed(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;/TT&gt;" ); <br>} <br> <br> <br>void  <br>HtmlLineBreak(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "&lt;BR&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlHorizontalRule(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB  <br>) <br>{ <br>    WriteString( pECB, "\r\n&lt;HR&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlImage(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszPicFile, <br>    IN LPCSTR lpszAltText <br>) <br>{ <br>    WriteString( pECB, "&lt;IMG SRC = \"" ); <br>    HtmlWriteText( pECB, lpszPicFile ); <br>    WriteString( pECB, "\"" ); <br>    if ( lpszAltText ) { <br>        WriteString( pECB, " ALT = \"" ); <br>        HtmlWriteText( pECB, lpszAltText ); <br>        WriteString( pECB, "\"" ); <br>    } <br>    WriteString( pECB, "&gt;\r\n" ); <br>} <br> <br> <br>void  <br>HtmlPrintf(  <br>    IN EXTENSION_CONTROL_BLOCK * pECB,  <br>    IN LPCSTR lpszFormat, <br>    ... <br>) <br>{ <br>    char szBuf[8192]; <br> <br>    va_list list; <br> <br>    va_start( list, lpszFormat ); <br> <br>    vsprintf( szBuf, lpszFormat, list ); <br>    WriteString( pECB, szBuf ); <br> <br>    va_end( list ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

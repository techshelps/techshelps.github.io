<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PERCYCTL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3926"></a>PERCYCTL.H</h2>
<pre><code>// percyctl.h : Declaration of the Cpercyctl <br> <br>#ifndef __PERCYCTL_H_ <br>#define __PERCYCTL_H_ <br> <br>#include "resource.h"       // main symbols <br>#include "perhist.h" <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IPersistHistoryImpl <br> <br>template &lt;class T&gt; <br>class ATL_NO_VTABLE IPersistHistoryImpl <br>{ <br>public: <br>// IUnknown <br>// <br>STDMETHOD(QueryInterface)(REFIID riid, void ** ppvObject) = 0; <br>_ATL_DEBUG_ADDREF_RELEASE_IMPL(IPersistStreamInitImpl) <br> <br>// IPersist <br>STDMETHOD(GetClassID)(CLSID *pClassID) <br>{ <br>ATLTRACE(_T("IPersistStreamInitImpl::GetClassID\n")); <br>T* pT = static_cast&lt;T*&gt;(this); <br>*pClassID = pT-&gt;GetObjectCLSID(); <br>return S_OK; <br>} <br> <br>STDMETHOD(LoadHistory)( IStream __RPC_FAR *pStream, <br>            /* [in] */ IBindCtx __RPC_FAR *pbc) <br>{ return S_OK;} <br>         <br>STDMETHOD(SaveHistory)( IStream __RPC_FAR *pStream) <br>{ return S_OK;} <br> <br>STDMETHOD(SetPositionCookie)( DWORD dwPositioncookie) <br>{ return S_OK;} <br>        <br>STDMETHOD(GetPositionCookie)( DWORD dwPositioncookie) <br>{ return S_OK;} <br>         <br>}; <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Cpercyctl <br>class ATL_NO_VTABLE Cpercyctl : <br>public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public CComCoClass&lt;Cpercyctl,&amp;CLSID_percyctl&gt;, <br>public CComControl&lt;Cpercyctl&gt;, <br>public IDispatchImpl&lt;Ipercyctl, &amp;IID_Ipercyctl, &amp;LIBID_PERCYLib&gt;, <br>public IPersistStreamInitImpl&lt;Cpercyctl&gt;, <br>public IOleControlImpl&lt;Cpercyctl&gt;, <br>public IOleObjectImpl&lt;Cpercyctl&gt;, <br>public IOleInPlaceActiveObjectImpl&lt;Cpercyctl&gt;, <br>public IViewObjectExImpl&lt;Cpercyctl&gt;, <br>public IOleInPlaceObjectWindowlessImpl&lt;Cpercyctl&gt;, <br>public IObjectSafetyImpl&lt;Cpercyctl&gt;, <br>public IPersistHistoryImpl&lt;Cpercyctl&gt; <br>{ <br>public: <br>CContainedWindow m_ctlEdit; <br> <br>char m_pstr[20]; <br> <br>Cpercyctl():m_ctlEdit(_T("Edit"), this, 1) <br>{ <br>  <br>m_bWindowOnly = TRUE;  <br>m_pstr[0] = 0; <br>} <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_PERCYCTL) <br> <br>BEGIN_COM_MAP(Cpercyctl)  <br>COM_INTERFACE_ENTRY(IDispatch) <br>COM_INTERFACE_ENTRY(Ipercyctl) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject2, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL(IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleWindow, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleInPlaceObject, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceActiveObject) <br>COM_INTERFACE_ENTRY_IMPL(IOleControl) <br>COM_INTERFACE_ENTRY_IMPL(IOleObject) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStreamInit) <br>COM_INTERFACE_ENTRY_IMPL(IObjectSafety) <br>COM_INTERFACE_ENTRY_IMPL(IPersistHistory) <br>END_COM_MAP() <br> <br>BEGIN_PROPERTY_MAP(Cpercyctl) <br>// Example entries <br>// PROP_ENTRY("Property Description", dispid, clsid) <br>// PROP_PAGE(CLSID_StockColorPage) <br>END_PROPERTY_MAP() <br> <br> <br>BEGIN_MSG_MAP(Cpercyctl) <br>MESSAGE_HANDLER(WM_PAINT, OnPaint) <br>MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus) <br>MESSAGE_HANDLER(WM_KILLFOCUS, OnKillFocus) <br>MESSAGE_HANDLER(WM_CREATE, OnCreate) <br>ALT_MSG_MAP(1) <br>// Replace this with message map entries for subclassed Edit <br>END_MSG_MAP() <br> <br>LRESULT OnCreate(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled) <br>{ <br>RECT rc; <br>GetWindowRect(&amp;rc); <br>rc.right -= rc.left; <br>rc.bottom -= rc.top; <br>rc.top = rc.left = 0; <br>m_ctlEdit.Create(m_hWnd, rc, NULL, WS_CHILD | WS_VISIBLE | WS_BORDER); <br>// Set the initial value to whatever was passed to us using IPersistHistory <br>::SetWindowText( m_ctlEdit.m_hWnd, m_pstr); <br>return 0; <br>} <br>STDMETHOD(SetObjectRects)(LPCRECT prcPos,LPCRECT prcClip) <br>{ <br>IOleInPlaceObjectWindowlessImpl&lt;Cpercyctl&gt;::SetObjectRects(prcPos, prcClip); <br>int cx, cy; <br>cx = prcPos-&gt;right - prcPos-&gt;left; <br>cy = prcPos-&gt;bottom - prcPos-&gt;top; <br>::SetWindowPos(m_ctlEdit.m_hWnd, NULL, 0, <br>0, cx, cy, SWP_NOZORDER | SWP_NOACTIVATE); <br>return S_OK; <br>} <br> <br>// IViewObjectEx <br>STDMETHOD(GetViewStatus)(DWORD* pdwStatus) <br>{ <br>ATLTRACE(_T("IViewObjectExImpl::GetViewStatus\n")); <br>*pdwStatus = VIEWSTATUS_SOLIDBKGND | VIEWSTATUS_OPAQUE; <br>return S_OK; <br>} <br> <br>// IPersistHistory <br>STDMETHOD(LoadHistory)( IStream __RPC_FAR *pStream, <br>            /* [in] */ IBindCtx __RPC_FAR *pbc) <br>{  <br>// LoadHistory is called if the browser has anything to  persist ino the control <br>// we just put that into our string for later use when the edit control get's initialised <br>pStream-&gt;Read( m_pstr,19,NULL); <br>return S_OK; <br>} <br>         <br>STDMETHOD(SaveHistory)( IStream __RPC_FAR *pStream) <br>{  <br>// Get the content from the edit control. <br>// and write it to the stream supplied <br>::GetWindowText(m_ctlEdit.m_hWnd, m_pstr, 19); <br>pStream-&gt;Write( m_pstr,19, NULL); <br>return S_OK; <br>} <br> <br>// IObjectSafety so we support IPersistHistory as safe as well. <br>STDMETHOD(GetInterfaceSafetyOptions)(REFIID riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions) <br>{ <br>ATLTRACE(_T("IObjectSafetyImpl::GetInterfaceSafetyOptions\n")); <br>if (pdwSupportedOptions == NULL || pdwEnabledOptions == NULL) <br>return E_POINTER; <br>HRESULT hr = S_OK; <br>if (riid == IID_IDispatch || riid == IID_IPersistHistory) <br>{ <br>*pdwSupportedOptions = INTERFACESAFE_FOR_UNTRUSTED_CALLER; <br>*pdwEnabledOptions = m_dwSafety &amp; INTERFACESAFE_FOR_UNTRUSTED_CALLER; <br>} <br>else <br>{ <br>*pdwSupportedOptions = 0; <br>*pdwEnabledOptions = 0; <br>hr = E_NOINTERFACE; <br>} <br>return hr; <br>} <br>STDMETHOD(SetInterfaceSafetyOptions)(REFIID riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions) <br>{ <br>ATLTRACE(_T("IObjectSafetyImpl::SetInterfaceSafetyOptions\n")); <br>// If we're being asked to set our safe for scripting option then oblige <br>if (riid == IID_IDispatch || riid == IID_IPersistHistory) <br>{ <br>// Store our current safety level to return in GetInterfaceSafetyOptions <br>m_dwSafety = dwEnabledOptions &amp; dwOptionSetMask; <br>return S_OK; <br>} <br>else <br> <br>return E_NOINTERFACE; <br>} <br> <br> <br> <br>// Ipercyctl <br>public: <br> <br>HRESULT OnDraw(ATL_DRAWINFO&amp; di); <br> <br> <br>}; <br> <br>#endif //__PERCYCTL_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

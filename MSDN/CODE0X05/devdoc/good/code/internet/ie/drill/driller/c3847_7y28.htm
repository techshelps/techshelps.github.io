<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WEBBRO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3860"></a>WEBBRO.H</h2>
<pre><code><br>//=--------------------------------------------------------------------------= <br>//  (C) Copyright 1996-1997 Microsoft Corporation. All Rights Reserved. <br>//=--------------------------------------------------------------------------= <br>#ifndef __WEBBROWSER2_H__ <br>#define __WEBBROWSER2_H__ <br> <br>// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ <br> <br>// NOTE: Do not modify the contents of this file.  If this class is regenerated by <br>//  Microsoft Visual C++, your modifications will be overwritten. <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CWebBrowser2 wrapper class <br> <br>class CWebBrowser2 : public CWnd <br>{ <br>protected: <br>DECLARE_DYNCREATE(CWebBrowser2) <br>public: <br>CLSID const&amp; GetClsid() <br>{ <br>static CLSID const clsid <br>= { 0x8856f961, 0x340a, 0x11d0, { 0xa9, 0x6b, 0x0, 0xc0, 0x4f, 0xd7, 0x5, 0xa2 } }; <br>return clsid; <br>} <br>virtual BOOL Create(LPCTSTR lpszClassName, <br>LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, <br>CWnd* pParentWnd, UINT nID, <br>CCreateContext* pContext = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); } <br> <br>    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, <br>const RECT&amp; rect, CWnd* pParentWnd, UINT nID, <br>CFile* pPersist = NULL, BOOL bStorage = FALSE, <br>BSTR bstrLicKey = NULL) <br>{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID, <br>pPersist, bStorage, bstrLicKey); } <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br>// method 'QueryInterface' not emitted because of invalid return type or parameter type <br>unsigned long AddRef(); <br>unsigned long Release(); <br>// method 'GetTypeInfoCount' not emitted because of invalid return type or parameter type <br>// method 'GetTypeInfo' not emitted because of invalid return type or parameter type <br>// method 'GetIDsOfNames' not emitted because of invalid return type or parameter type <br>// method 'Invoke' not emitted because of invalid return type or parameter type <br>void GoBack(); <br>void GoForward(); <br>void GoHome(); <br>void GoSearch(); <br>void Navigate(LPCTSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers); <br>void Refresh(); <br>void Refresh2(VARIANT* Level); <br>void Stop(); <br>LPDISPATCH GetApplication(); <br>LPDISPATCH GetParent(); <br>LPDISPATCH GetContainer(); <br>LPDISPATCH GetDocument(); <br>BOOL GetTopLevelContainer(); <br>CString GetType(); <br>long GetLeft(); <br>void SetLeft(long nNewValue); <br>long GetTop(); <br>void SetTop(long nNewValue); <br>long GetWidth(); <br>void SetWidth(long nNewValue); <br>long GetHeight(); <br>void SetHeight(long nNewValue); <br>CString GetLocationName(); <br>CString GetLocationURL(); <br>BOOL GetBusy(); <br>void Quit(); <br>void ClientToWindow(long* pcx, long* pcy); <br>void PutProperty(LPCTSTR szProperty, const VARIANT&amp; vtValue); <br>VARIANT GetProperty(LPCTSTR szProperty); <br>CString GetName(); <br>long GetHwnd(); <br>CString GetFullName(); <br>CString GetPath(); <br>BOOL GetVisible(); <br>void SetVisible(BOOL bNewValue); <br>BOOL GetStatusBar(); <br>void SetStatusBar(BOOL bNewValue); <br>CString GetStatusText(); <br>void SetStatusText(LPCTSTR lpszNewValue); <br>long GetToolBar(); <br>void SetToolBar(long nNewValue); <br>BOOL GetMenuBar(); <br>void SetMenuBar(BOOL bNewValue); <br>BOOL GetFullScreen(); <br>void SetFullScreen(BOOL bNewValue); <br>void Navigate2(VARIANT* URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers); <br>long QueryStatusWB(long cmdID); <br>void ExecWB(long cmdID, long cmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut); <br>long GetReadyState(); <br>BOOL GetOffline(); <br>void SetOffline(BOOL bNewValue); <br>BOOL GetSilent(); <br>void SetSilent(BOOL bNewValue); <br>BOOL GetRegisterAsBrowser(); <br>void SetRegisterAsBrowser(BOOL bNewValue); <br>BOOL GetRegisterAsDropTarget(); <br>void SetRegisterAsDropTarget(BOOL bNewValue); <br>}; <br> <br>#endif // __WEBBROWSER2_H__ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

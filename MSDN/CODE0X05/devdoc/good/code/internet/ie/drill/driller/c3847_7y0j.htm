<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDISPIMP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3853"></a>IDISPIMP.CPP</h2>
<pre><code>/* <br> * idispimp.CPP <br> * IDispatch for Extending Dynamic HTML Object Model <br> * <br> * Copyright (c)1995-1997 Microsoft Corporation, All Rights Reserved <br> */ <br> <br>#include "stdafx.h" <br>#include "idispimp.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br> <br>// Hardcoded information for extending the Object Model  <br>// Typically this would be supplied through a TypeInfo <br>// In this case the name "xxyyzz" maps to DISPID_Extend  <br>constWCHAR pszExtend[10]=L"xxyyzz"; <br>#define DISPID_Extend 12345 <br> <br> <br> <br>/* <br> * CImpIDispatch::CImpIDispatch <br> * CImpIDispatch::~CImpIDispatch <br> * <br> * Parameters (Constructor): <br> *  pSite           PCSite of the site we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDispatch::CImpIDispatch( void ) <br>{ <br>    m_cRef = 0; <br>} <br> <br>CImpIDispatch::~CImpIDispatch( void ) <br>{ <br>ASSERT( m_cRef == 0 ); <br>} <br> <br> <br>/* <br> * CImpIDispatch::QueryInterface <br> * CImpIDispatch::AddRef <br> * CImpIDispatch::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIDispatch object. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::QueryInterface( REFIID riid, void **ppv ) <br>{ <br>    *ppv = NULL; <br> <br> <br>    if ( IID_IDispatch == riid ) <br>{ <br>        *ppv = this; <br>} <br> <br>if ( NULL != *ppv ) <br>    { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>    } <br> <br>return E_NOINTERFACE; <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::AddRef(void) <br>{ <br>    return ++m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::Release(void) <br>{ <br>    return --m_cRef; <br>} <br> <br> <br>//IDispatch <br>STDMETHODIMP CImpIDispatch::GetTypeInfoCount(UINT* /*pctinfo*/) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfo(/* [in] */ UINT /*iTInfo*/, <br>            /* [in] */ LCID /*lcid*/, <br>            /* [out] */ ITypeInfo** /*ppTInfo*/) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>STDMETHODIMP CImpIDispatch::GetIDsOfNames( <br>            /* [in] */ REFIID riid, <br>            /* [size_is][in] */ OLECHAR** rgszNames, <br>            /* [in] */ UINT cNames, <br>            /* [in] */ LCID lcid, <br>            /* [size_is][out] */ DISPID* rgDispId) <br>{ <br>HRESULT hr; <br>UINTi; <br> <br>// Assume some degree of success <br>hr = NOERROR; <br> <br>// Hardcoded mapping for this sample <br>// A more usual procedure would be to use a TypeInfo <br>for ( i=0; i &lt; cNames; i++) <br>{ <br>if (  2 == CompareString( lcid, NORM_IGNOREWIDTH, (char*)pszExtend, 3, (char*)rgszNames[i], 3 ) ) <br>{ <br>rgDispId[i] = DISPID_Extend; <br>} <br>else <br>{ <br>// One or more are unknown so set the return code accordingly <br>hr = ResultFromScode(DISP_E_UNKNOWNNAME); <br>rgDispId[i] = DISPID_UNKNOWN; <br>} <br>} <br>return hr; <br>} <br> <br>STDMETHODIMP CImpIDispatch::Invoke( <br>            /* [in] */ DISPID dispIdMember, <br>            /* [in] */ REFIID /*riid*/, <br>            /* [in] */ LCID /*lcid*/, <br>            /* [in] */ WORD wFlags, <br>            /* [out][in] */ DISPPARAMS* pDispParams, <br>            /* [out] */ VARIANT* pVarResult, <br>            /* [out] */ EXCEPINFO* /*pExcepInfo*/, <br>            /* [out] */ UINT* puArgErr) <br>{ <br> <br>// For this sample we only support a Property Get on DISPID_Extend <br>// returning a BSTR with "Wibble" as the value <br>if ( dispIdMember == DISPID_Extend ) <br>{ <br>if ( wFlags &amp; DISPATCH_PROPERTYGET ) <br>{ <br>if ( pVarResult != NULL ) <br>{ <br>WCHAR buff[10]=L"Wibble"; <br>BSTR bstrRet = SysAllocString( buff ); <br>VariantInit(pVarResult); <br>V_VT(pVarResult)=VT_BSTR; <br>V_BSTR(pVarResult) = bstrRet; <br>} <br>} <br>} <br> <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

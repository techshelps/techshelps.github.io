<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3847"></a>README.TXT</h2>
<pre><code>====================================================== <br>Notes for Driller <br>====================================================== <br> <br>Driller is an MFC based control host, that hosts the  <br>WebBrowser Control. Built Using VC++5.0. <br> <br>The functionality of drilling into the document hosted  <br>and listing the tags found in the listbox is discussed  <br>in the readme file for Drill which additionally covers  <br>the DrillVB sample. <br> <br>Addtional functionality that is present in the Driller  <br>sample is providing extra control through the implementation  <br>of the IDocHostUIHandler interface. This interface is  <br>documented in the SDK, this sample shows how this  <br>interface can be used to control the context menu's  <br>and extend the Dynamic HTML Object Model. <br> <br>The Context menu's that appear as standard for a  <br>right mouse click are disabled within the Driller  <br>sample. This is achieved by returning S_OK from the  <br>ShowContextMenu method of the IDocHostUIHandler  <br>interface, indicating that the host has handled the  <br>call and the IE4 components need not perform the  <br>standard processing. <br> <br>The Dynamic HTML Object Model is also extended in the  <br>Driller sample by providing an IDispatch interface to  <br>the getExternal method of the IDocHostUIhandler  <br>interface. This IDispatch is used whenever the script  <br>within the HTML document refers to window.external,  <br>whatever follows this will be handed to the GetIDsof  <br>Names member function of the IDispatch interface to be  <br>resolved. <br>This can be seen by loading the extend.htm file supplied  <br>into Driller and pressing the Extend button. <br> <br>To implement the IDocHostUIHandler, the client site needs <br>to implement the interface. In MFC, the class COleControlSite <br>encapsulates the client site. In this example we are subclassing <br>MFC, a class CCustomControlSite, is derived from COleControlSite  <br>and CCustomControlSite implements IDocHostUIHandler. To hook <br>in the CCustomControlSite, a class CCustomOccManager is derived  <br>from COccManager. Subclassing COccManager and <br>COleControlSite in such a manner is implementation specific <br>to MFC. So, if future versions of MFC change the implementation <br>of COleControlSite or COccManager, this sample (and your code <br>if you use this technique) might not work. We are looking at  <br>possible ways to have MFC expose the client site for <br>customization. If in future MFC does expose the client <br>site, then we will modify this sample to use that functionality. <br> <br>If you are using this sample, to design your code please be  <br>advised that you may have to change your code in the future. <br> <br>It is possible that this sample will not compile because  <br>an include directory has not been identified.  The program <br>looks for the file called occimpl.h.  Prepended to  <br>the header file is the directory where that file <br>was located on the test machine.  This maybe different  <br>than most users.  The solution is to delete the prepended <br>directory and under project==&gt; settings, go to the C/C++ tab,  <br>look under Preprocessor and then add the  <br>include directory to the additional include directories.  An  <br>example of what that might look like is: <br>c:\program files\devstudio\vc\mfc. </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRILLDLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3849"></a>DRILLDLG.CPP</h2>
<pre><code><br>//=--------------------------------------------------------------------------= <br>//  (C) Copyright 1996-1997 Microsoft Corporation. All Rights Reserved. <br>//=--------------------------------------------------------------------------= <br>// drillerDlg.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "driller.h" <br>#include "drillDlg.h" <br>#include "WebBro.h" <br>#include &lt;mshtml.h&gt; <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutDlg dialog used for App About <br> <br>class CAboutDlg : public CDialog <br>{ <br>public: <br>CAboutDlg(); <br> <br>// Dialog Data <br>//{{AFX_DATA(CAboutDlg) <br>enum { IDD = IDD_ABOUTBOX }; <br>//}}AFX_DATA <br> <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CAboutDlg) <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br>protected: <br>//{{AFX_MSG(CAboutDlg) <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD) <br>{ <br>//{{AFX_DATA_INIT(CAboutDlg) <br>//}}AFX_DATA_INIT <br>} <br> <br>void CAboutDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutDlg) <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CAboutDlg, CDialog) <br>//{{AFX_MSG_MAP(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CDrillerDlg dialog <br> <br>CDrillerDlg::CDrillerDlg(CWnd* pParent /*=NULL*/) <br>: CDialog(CDrillerDlg::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CDrillerDlg) <br>// NOTE: the ClassWizard will add member initialization here <br>//}}AFX_DATA_INIT <br>// Note that LoadIcon does not require a subsequent DestroyIcon in Win32 <br>m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME); <br>} <br> <br>void CDrillerDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CDrillerDlg) <br>DDX_Control(pDX, IDC_LIST1, m_listTags); <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CDrillerDlg, CDialog) <br>//{{AFX_MSG_MAP(CDrillerDlg) <br>ON_WM_SYSCOMMAND() <br>ON_WM_PAINT() <br>ON_WM_QUERYDRAGICON() <br>ON_BN_CLICKED(IDC_BTN_GO, OnBtnGo) <br>ON_BN_CLICKED(IDC_BTN_DRILL, OnBtnDrill) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CDrillerDlg message handlers <br> <br>BOOL CDrillerDlg::OnInitDialog() <br>{ <br>CDialog::OnInitDialog(); <br> <br>// Add "About..." menu item to system menu. <br> <br>// IDM_ABOUTBOX must be in the system command range. <br>ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX); <br>ASSERT(IDM_ABOUTBOX &lt; 0xF000); <br> <br>CMenu* pSysMenu = GetSystemMenu(FALSE); <br>CString strAboutMenu; <br>strAboutMenu.LoadString(IDS_ABOUTBOX); <br>if (!strAboutMenu.IsEmpty()) <br>{ <br>pSysMenu-&gt;AppendMenu(MF_SEPARATOR); <br>pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu); <br>} <br> <br>// Set the icon for this dialog.  The framework does this automatically <br>//  when the application's main window is not a dialog <br>SetIcon(m_hIcon, TRUE);// Set big icon <br>SetIcon(m_hIcon, FALSE);// Set small icon <br> <br>// TODO: Add extra initialization here <br> <br>return TRUE;  // return TRUE  unless you set the focus to a control <br>} <br> <br>void CDrillerDlg::OnSysCommand(UINT nID, LPARAM lParam) <br>{ <br>if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX) <br>{ <br>CAboutDlg dlgAbout; <br>dlgAbout.DoModal(); <br>} <br>else <br>{ <br>CDialog::OnSysCommand(nID, lParam); <br>} <br>} <br> <br>// If you add a minimize button to your dialog, you will need the code below <br>//  to draw the icon.  For MFC applications using the document/view model, <br>//  this is automatically done for you by the framework. <br> <br>void CDrillerDlg::OnPaint()  <br>{ <br>if (IsIconic()) <br>{ <br>CPaintDC dc(this); // device context for painting <br> <br>SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0); <br> <br>// Center icon in client rectangle <br>int cxIcon = GetSystemMetrics(SM_CXICON); <br>int cyIcon = GetSystemMetrics(SM_CYICON); <br>CRect rect; <br>GetClientRect(&amp;rect); <br>int x = (rect.Width() - cxIcon + 1) / 2; <br>int y = (rect.Height() - cyIcon + 1) / 2; <br> <br>// Draw the icon <br>dc.DrawIcon(x, y, m_hIcon); <br>} <br>else <br>{ <br>CDialog::OnPaint(); <br>} <br>} <br> <br>// The system calls this to obtain the cursor to display while the user drags <br>//  the minimized window. <br>HCURSOR CDrillerDlg::OnQueryDragIcon() <br>{ <br>return (HCURSOR) m_hIcon; <br>} <br> <br>void CDrillerDlg::OnBtnGo()  <br>{ <br>CWebBrowser2* pBrowser = (CWebBrowser2*)GetDlgItem( IDC_EXPLORER1 ); <br>CString strURL; <br>GetDlgItemText( IDC_EDIT1, strURL ); <br>COleVariant* pvarURL = new COleVariant( strURL ); <br>COleVariant* pvarEmpty = new COleVariant; <br>pBrowser-&gt;Navigate2( pvarURL, pvarEmpty, pvarEmpty, pvarEmpty, pvarEmpty ); <br>delete pvarURL; <br>delete pvarEmpty; <br>} <br> <br>void CDrillerDlg::OnBtnDrill()  <br>{ <br>m_listTags.ResetContent(); <br> <br>CWebBrowser2* pBrowser = (CWebBrowser2*)GetDlgItem( IDC_EXPLORER1 ); <br> <br>IDispatch* pDisp = pBrowser-&gt;GetDocument(); <br> <br>if (pDisp != NULL ) <br>{ <br>IHTMLDocument2* pHTMLDocument2; <br>HRESULT hr; <br>hr = pDisp-&gt;QueryInterface( IID_IHTMLDocument2, (void**)&amp;pHTMLDocument2 ); <br>if (hr == S_OK) <br>{ <br> <br>IHTMLElementCollection* pColl; <br>hr = pHTMLDocument2-&gt;get_all( &amp;pColl ); <br>if (hr == S_OK) <br>{ <br>LONG celem; <br>hr = pColl-&gt;get_length( &amp;celem ); <br> <br>if ( hr == S_OK ) <br>{ <br>for ( int i=0; i&lt; celem; i++ ) <br>{ <br>VARIANT varIndex; <br>varIndex.vt = VT_UINT; <br>varIndex.lVal = i; <br>VARIANT var2; <br>VariantInit( &amp;var2 ); <br>IDispatch* pDisp;  <br> <br>hr = pColl-&gt;item( varIndex, var2, &amp;pDisp ); <br> <br>if ( hr == S_OK ) <br>{ <br> <br>IHTMLElement* pElem; <br> <br>hr = pDisp-&gt;QueryInterface( IID_IHTMLElement, (void **)&amp;pElem ); <br>if ( hr == S_OK ) <br>{ <br> <br>BSTR bstr; <br>hr = pElem-&gt;get_tagName(&amp;bstr); <br>CString strTag = bstr; <br> <br>IHTMLImgElement* pImgElem; <br>hr = pDisp-&gt;QueryInterface( IID_IHTMLImgElement, (void **)&amp;pImgElem ); <br>if ( hr == S_OK ) <br>{ <br>pImgElem-&gt;get_href(&amp;bstr); <br>strTag += " - "; <br>strTag += bstr; <br>pImgElem-&gt;Release(); <br>} <br>else <br>{ <br>IHTMLAnchorElement* pAnchElem; <br>hr = pDisp-&gt;QueryInterface( IID_IHTMLAnchorElement, (void **)&amp;pAnchElem ); <br>if ( hr == S_OK ) <br>{ <br>pAnchElem-&gt;get_href(&amp;bstr); <br>strTag += " - "; <br>strTag += bstr; <br>pAnchElem-&gt;Release(); <br>} <br>} <br> <br>m_listTags.AddString( strTag ); <br> <br>pElem-&gt;Release(); <br>} <br>pDisp-&gt;Release(); <br>} <br>} <br>} <br> <br>pColl-&gt;Release(); <br>} <br>pHTMLDocument2-&gt;Release(); <br>} <br>pDisp-&gt;Release(); <br>} <br> <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CUSTSITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3855"></a>CUSTSITE.CPP</h2>
<pre><code><br>//=--------------------------------------------------------------------------= <br>//  (C) Copyright 1996-1997 Microsoft Corporation. All Rights Reserved. <br>//=--------------------------------------------------------------------------= <br> <br> <br>//  <br>// NOTE:  <br>// Some of the code in this file is MFC implementation specific. <br>// Changes in future versions of MFC implementation may require <br>// the code to be changed. Please check the readme of this <br>// sample for more information  <br>//  <br> <br>#include "stdafx.h" <br>#undef AFX_DATA <br>#define AFX_DATA AFX_DATA_IMPORT <br> <br> <br>// NOTE: THis line is a hardcoded reference to an MFC header file <br>//  this path may need to be changed to refer to the location of VC5 install <br>//  for successful compilation. <br> <br> <br>#include &lt;..\src\occimpl.h&gt; <br>#undef AFX_DATA <br>#define AFX_DATA AFX_DATA_EXPORT <br>#include "custsite.h" <br>#include "driller.h" <br> <br> <br>BEGIN_INTERFACE_MAP(CCustomControlSite, COleControlSite) <br>INTERFACE_PART(CCustomControlSite, IID_IDocHostUIHandler, DocHostUIHandler) <br>END_INTERFACE_MAP() <br> <br> <br> <br>ULONG FAR EXPORT  CCustomControlSite::XDocHostUIHandler::AddRef() <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>return pThis-&gt;ExternalAddRef(); <br>} <br> <br> <br>ULONG FAR EXPORT  CCustomControlSite::XDocHostUIHandler::Release() <br>{                             <br>    METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>return pThis-&gt;ExternalRelease(); <br>} <br> <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::QueryInterface(REFIID riid, void **ppvObj) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    HRESULT hr = (HRESULT)pThis-&gt;ExternalQueryInterface(&amp;riid, ppvObj); <br>return hr; <br>} <br> <br>// * CImpIDocHostUIHandler::GetHostInfo <br>// * <br>// * Purpose: Called at initialisation <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::GetHostInfo( DOCHOSTUIINFO* pInfo ) <br>{ <br> <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>pInfo-&gt;dwFlags = DOCHOSTUIFLAG_NO3DBORDER; <br>    pInfo-&gt;dwDoubleClick = DOCHOSTUIDBLCLK_DEFAULT; <br> <br>    return S_OK; <br>} <br> <br>// * CImpIDocHostUIHandler::ShowUI <br>// * <br>// * Purpose: Called when MSHTML.DLL shows its UI <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::ShowUI( <br>DWORD dwID,  <br>IOleInPlaceActiveObject * /*pActiveObject*/, <br>IOleCommandTarget * pCommandTarget, <br>IOleInPlaceFrame * /*pFrame*/, <br>IOleInPlaceUIWindow * /*pDoc*/) <br>{ <br> <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>// We've already got our own UI in place so just return S_OK <br>    return S_OK; <br>} <br> <br>// * CImpIDocHostUIHandler::HideUI <br>// * <br>// * Purpose: Called when MSHTML.DLL hides its UI <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::HideUI(void) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return S_OK; <br>} <br> <br>// * CImpIDocHostUIHandler::UpdateUI <br>// * <br>// * Purpose: Called when MSHTML.DLL updates its UI <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::UpdateUI(void) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>// MFC is pretty good about updating it's UI in it's Idle loop so I don't do anything here <br>return S_OK; <br>} <br> <br>// * CImpIDocHostUIHandler::EnableModeless <br>// * <br>// * Purpose: Called from MSHTML.DLL's IOleInPlaceActiveObject::EnableModeless <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::EnableModeless(BOOL /*fEnable*/) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> <br>// * CImpIDocHostUIHandler::OnDocWindowActivate <br>// * <br>// * Purpose: Called from MSHTML.DLL's IOleInPlaceActiveObject::OnDocWindowActivate <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::OnDocWindowActivate(BOOL /*fActivate*/) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> <br>// * CImpIDocHostUIHandler::OnFrameWindowActivate <br>// * <br>// * Purpose: Called from MSHTML.DLL's IOleInPlaceActiveObject::OnFrameWindowActivate <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::OnFrameWindowActivate(BOOL /*fActivate*/) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> <br>// * CImpIDocHostUIHandler::ResizeBorder <br>// * <br>// * Purpose: Called from MSHTML.DLL's IOleInPlaceActiveObject::ResizeBorder <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::ResizeBorder( <br>LPCRECT /*prcBorder*/,  <br>IOleInPlaceUIWindow* /*pUIWindow*/, <br>BOOL /*fRameWindow*/) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> <br>// * CImpIDocHostUIHandler::ShowContextMenu <br>// * <br>// * Purpose: Called when MSHTML.DLL would normally display its context menu <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::ShowContextMenu( <br>DWORD /*dwID*/,  <br>POINT* /*pptPosition*/, <br>IUnknown* /*pCommandTarget*/, <br>IDispatch* /*pDispatchObjectHit*/) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return S_OK; // We've shown our own context menu. MSHTML.DLL will no longer try to show its own. <br>} <br> <br>// * CImpIDocHostUIHandler::TranslateAccelerator <br>// * <br>// * Purpose: Called from MSHTML.DLL's TranslateAccelerator routines <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::TranslateAccelerator(LPMSG lpMsg, <br>            /* [in] */ const GUID __RPC_FAR *pguidCmdGroup, <br>            /* [in] */ DWORD nCmdID) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return S_FALSE; <br>} <br> <br>// * CImpIDocHostUIHandler::GetOptionKeyPath <br>// * <br>// * Purpose: Called by MSHTML.DLL to find where the host wishes to store  <br>// *its options in the registry <br>// * <br>HRESULT FAR EXPORT  CCustomControlSite::XDocHostUIHandler::GetOptionKeyPath(BSTR* pbstrKey, DWORD) <br>{ <br> <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>return E_NOTIMPL; <br>} <br> <br>STDMETHODIMP CCustomControlSite::XDocHostUIHandler::GetDropTarget(  <br>            /* [in] */ IDropTarget __RPC_FAR *pDropTarget, <br>            /* [out] */ IDropTarget __RPC_FAR *__RPC_FAR *ppDropTarget) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> <br>STDMETHODIMP CCustomControlSite::XDocHostUIHandler::GetExternal(  <br>            /* [out] */ IDispatch __RPC_FAR *__RPC_FAR *ppDispatch) <br>{ <br>// return the IDispatch we have for extending the object Model <br>IDispatch* pDisp = (IDispatch*)theApp.m_pDispOM; <br>pDisp-&gt;AddRef(); <br>*ppDispatch = pDisp; <br>    return S_OK; <br>} <br>         <br>STDMETHODIMP CCustomControlSite::XDocHostUIHandler::TranslateUrl(  <br>            /* [in] */ DWORD dwTranslate, <br>            /* [in] */ OLECHAR __RPC_FAR *pchURLIn, <br>            /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *ppchURLOut) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br>         <br>STDMETHODIMP CCustomControlSite::XDocHostUIHandler::FilterDataObject(  <br>            /* [in] */ IDataObject __RPC_FAR *pDO, <br>            /* [out] */ IDataObject __RPC_FAR *__RPC_FAR *ppDORet) <br>{ <br>METHOD_PROLOGUE(CCustomControlSite, DocHostUIHandler) <br>    return E_NOTIMPL; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

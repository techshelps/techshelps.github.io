<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3944"></a><sup></sup>TDC.CPP</h2>
<pre><code>// TDC.cpp : Implementation of DLL Exports. <br> <br>// You will need the NT SUR Beta 2 SDK or VC 4.2 or higher in order to build  <br>// this project.  This is because you will need MIDL 3.00.15 or higher and new <br>// headers and libs.  If you have VC 4.2 installed, then everything should <br>// already be configured correctly. <br> <br>// Note: Proxy/Stub Information <br>//      To build a separate proxy/stub DLL,  <br>//      run nmake -f TDCps.mak in the project directory. <br> <br>#include "stdafx.h" <br>#include "resource.h" <br>#include "std.h" <br>#include "TDCIds.h" <br>#include "TDC.h" <br>#include &lt;MLang.h&gt; <br> <br>#define IID_DEFINED         // for now avoid a conflict with ATL <br>#include "TDC_i.c" <br>#include "STD_i.c" <br>//#include "mlang_i.c" <br>#include "Notify.h" <br>#include "TDCParse.h" <br>#include "TDCArr.h" <br>#include "SimpData.h" <br>#include "TDCCtl.h" <br> <br>CComModule _Module; <br> <br>BEGIN_OBJECT_MAP(ObjectMap) <br>    OBJECT_ENTRY(CLSID_CTDCCtl, CTDCCtl) <br>//MM    OBJECT_ENTRY(CLSID_CSimpleTabularData, CSimpleTabularData) <br>END_OBJECT_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DLL Entry Point <br> <br>extern "C" <br>BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/) <br>{ <br>    if (dwReason == DLL_PROCESS_ATTACH) <br>    { <br>        _Module.Init(ObjectMap, hInstance); <br>        DisableThreadLibraryCalls(hInstance); <br>    } <br>    else if (dwReason == DLL_PROCESS_DETACH) <br>        _Module.Term(); <br>    return TRUE;    // ok <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Used to determine whether the DLL can be unloaded by OLE <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>    return (_Module.GetLockCount()==0) ? S_OK : S_FALSE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Returns a class factory to create an object of the requested type <br> <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv) <br>{ <br>    return _Module.GetClassObject(rclsid, riid, ppv); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllRegisterServer - Adds entries to the system registry <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>    // registers object, typelib and all interfaces in typelib <br>    return _Module.RegisterServer(TRUE); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllUnregisterServer - Removes entries from the system registry <br> <br>STDAPI DllUnregisterServer(void) <br>{ <br>    _Module.UnregisterServer(); <br>#if _WIN32_WINNT &gt;= 0x0400 <br>    UnRegisterTypeLib(LIBID_TDCLib, 1, 1, NULL, SYS_WIN32); <br>#endif <br>    return S_OK; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

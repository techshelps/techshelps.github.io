<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STD.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3940"></a><sup></sup>STD.IDL</h2>
<pre><code>//+------------------------------------------------------------------------ <br>// <br>//  OLEDBSimpleProvider interface <br>// <br>//  Copyright (C) Microsoft Corporation, 1993 - 1997. <br>// <br>//  File:       std.idl <br>// <br>//------------------------------------------------------------------------- <br> <br>//------------------------------------------------------------------------- <br>// <br>// This file is copied from IE4 build \ie\public\sdk\inc\simpdata.dil <br>// <br>//------------------------------------------------------------------------- <br> <br>//  Usage in MSDEV: <br>// <br>//  1. Select Tools/Customize <br>//  2. Go to Tools tab. <br>//  3. Click on Add... <br>//  4. Type  MIDL.EXE  and click OK (or press ENTER) <br>//  5. Fill in definition of a new tool as follows: <br>//      Menu Text:      Compile &amp;IDL file <br>//      Command:        MIDL.EXE <br>//      Arguments:      /ms_ext /char unsigned /c_ext $(FileName)$(FileExt) <br>//      Initial Dir:    $(FileDir) <br>//  6. Click on Close <br>// <br>//  Having done this, you can now use MSDEV to compile IDL files (such as <br>//  this one).  Just open the file and select Tools/Compile IDL file. <br>// <br>//  Contact: tedsmith, jerryd, terrylu, or cfranks <br>// <br>//------------------------------------------------------------------------- <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  OLEDBSimpleProvider interface <br>// <br>//  Copyright (C) Microsoft Corporation, 1993 - 1997. <br>// <br>//  File:       simpdata.idl <br>// <br>//------------------------------------------------------------------------- <br> <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("// simpdata.h") <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("// (C) Copyright 1995-1997 Microsoft Corporation.  All Rights Reserved.") <br>cpp_quote("//") <br>cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF") <br>cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO") <br>cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A") <br>cpp_quote("// PARTICULAR PURPOSE.") <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("") <br>cpp_quote("#pragma comment(lib,\"uuid.lib\")") <br>cpp_quote("") <br>cpp_quote("//--------------------------------------------------------------------------") <br>cpp_quote("// Simple Tabular Data.") <br>cpp_quote("") <br>cpp_quote("#ifndef SIMPDATA_H") <br>cpp_quote("#define SIMPDATA_H") <br> <br>//import "ocidl.idl"; <br>import "objidl.idl"; <br>import "oleidl.idl"; <br>import "oaidl.idl"; <br> <br>// We use signed integers for row and column numbers, starting with the value 1. <br>// The value 0 refers to any "label" or "header" information, distinct from the <br>// data.  The value -1 refers to any an unknown value, or all values, so, for <br>// example, iRow = -1, iCol = 2 refers to all of column 2 <br> <br>cpp_quote("#define OSP_IndexLabel      (0)") <br>cpp_quote("#define OSP_IndexAll        (~0ul)") <br>cpp_quote("#define OSP_IndexUnknown    (~0ul)") <br>cpp_quote("") <br> <br>[ <br>        uuid(E0E270C2-C0BE-11d0-8FE4-00A0C90A6341), <br>        helpstring("OLE-DB Simple Provider Type Library"), <br>        lcid(0x409), <br>        version(1.4) <br>] <br>library std <br>{ <br> <br>typedef enum OSPFORMAT <br>{ <br>    OSPFORMAT_RAW = 0,     // set/get variant as is <br>    OSPFORMAT_DEFAULT = 0, // default is RAW <br>    OSPFORMAT_FORMATTED = 1,   // all variants converted to string representation <br>    OSPFORMAT_HTML = 2      // variant converted to HTML string representation <br>                            // (providers not required to implement this). <br>} OSPFORMAT; <br> <br>typedef enum OSPRW <br>{ <br>    // All cells are presumed to be readable. <br>    OSPRW_DEFAULT = 1, <br>    OSPRW_READONLY = 0,     // readonly <br>    OSPRW_READWRITE = 1,    // readwrite <br>    OSPRW_MIXED = 2         // mixed or unknown; most callers will treat <br>                                     // as READWRITE "Lazy" provider should just <br>                                     // return OSPRW_MIXED <br>} OSPRW; <br> <br>typedef enum OSPFIND <br>{ <br>    OSPFIND_DEFAULT = 0, <br>    OSPFIND_UP = 1,             // scan backwards(decreasing row #s) <br>    OSPFIND_CASESENSITIVE = 2 <br>} OSPFIND; <br> <br>typedef enum OSPCOMP <br>{ <br>                            // These values derived from bitmasks <br>                            // i.e.       GT  LT  EQ     <br>    OSPCOMP_EQ = 1,         // OSPCOMP_EQ          1 Equal <br>    OSPCOMP_DEFAULT = 1,    // OSPCOMP_EQ is the default <br>    OSPCOMP_LT = 2,         // OSPCOMP_LT      1   0 Less than <br>    OSPCOMP_LE = 3,         // OSPCOMP_LE      1   1 Less than or equal <br>    OSPCOMP_GE = 4,         // OSPCOMP_GT  1   0   0 Greater than or equal <br>    OSPCOMP_GT = 5,         // OSPCOMP_GE  1   0   1 Greater than <br>    OSPCOMP_NE = 6,         // OSPCOMP_NE  1   1   0 Not equal <br>} OSPCOMP; <br> <br>typedef enum OSPXFER <br>{ <br>    OSPXFER_COMPLETE = 0, <br>    OSPXFER_ABORT = 1, <br>    OSPXFER_ERROR = 2 <br>} OSPXFER; <br> <br>[ <br>        object, <br>        uuid(E0E270C1-C0BE-11d0-8FE4-00A0C90A6341), <br>        pointer_default(unique), <br>        local, <br>        version(1.4) <br>] <br>interface OLEDBSimpleProviderListener : IUnknown <br>{ <br>      // As noted above; a -1 (STD_IndexAll) can be used in the row or column <br>      // (or both).  For example, CellChanged(STD_IndexAll, OSP_IndexAll) <br>      // implies that all rows and columns changed shape. <br>   <br>      HRESULT aboutToChangeCell([in] long iRow, [in] long iColumn); <br>      HRESULT cellChanged([in] long iRow, [in] long iColumn); <br>      HRESULT aboutToDeleteRows([in] long iRow, [in] long iColumn); <br>      HRESULT deletedRows([in] long iRow, [in] long cRows); <br>      HRESULT aboutToInsertRows([in] long iRow, [in] long cRows); <br>      HRESULT insertedRows([in] long iRow, [in] long cRows); <br>      HRESULT rowsAvailable([in] long iRow, [in] long cRows); <br>      HRESULT transferComplete([in] OSPXFER xfer); <br>} <br> <br>[ <br>        object, <br>        uuid(E0E270C0-C0BE-11d0-8FE4-00A0C90A6341), <br>        pointer_default(unique), <br>        local, <br>        version(1.4) <br>] <br>interface OLEDBSimpleProvider : IUnknown <br>{ <br>      // Info-retrieving functions: <br>      // ========================== <br>      // <br>      // Note that column names are retrieved using GetString or GetVariant <br>      // with iRow == OSP_IndexLabel.  RWStatus for a whole row or column <br>          // can be made with iRow or iColumn == OSP_IndexAll. <br> <br>      HRESULT getRowCount([out,retval] long *pcRows); <br>      HRESULT getColumnCount([out,retval] long *pcColumns); <br> <br> <br>      HRESULT getRWStatus([in] long iRow, [in] long iColumn, <br>              [out, retval] OSPRW *prwStatus); <br> <br>      // Variant-oriented Get/Set: <br>      // ========================= <br>      // <br>      // Note that use of VARIANT precludes references. <br> <br>      HRESULT getVariant([in] long iRow, [in] long iColumn, <br>                         [in] OSPFORMAT format, [out, retval] VARIANT *pVar ); <br>      HRESULT setVariant([in] long iRow, [in] long iColumn, <br>                         [in] OSPFORMAT format, [in] VARIANT Var ); <br> <br>      // Locale information: <br>      // =================== <br>      // <br> <br>      HRESULT getLocale([out,retval] BSTR *pbstrLocale); <br> <br>      // Deletion and Insertion: <br>      // ======================= <br>      // <br>      // For insertion, iRow or iColumn is index *before* which to insert; the <br>      // first inserted row or column will end up with that index. <br>      // <br>      // In case of error, provider may choose to insert or delete only the <br>      // first m of n rows or columns which client requested.  OUT parameter <br>      // indicates how many rows or columns actually inserted or deleted.  In <br>      // case of success, OUT parameter should be filled in with cRows. <br> <br>      HRESULT deleteRows([in] long iRow, [in] long cRows, <br>             [out, retval] long *pcRowsDeleted ); <br>      HRESULT insertRows([in] long iRow, [in] long cRows, <br>             [out, retval] long *pcRowsInserted ); <br> <br>      // Find <br>      // Find the first row in column iColumn that contains a value which <br>      // matches val according to the compType. <br>      // To continue searching past the found row, the caller should pass <br>      // *piRowFound+1 as the next iRowStart, or *piRowFound-1 for backward <br>      // searches (STDFIND_UP). <br> <br>      HRESULT find([in] long iRowStart, [in] long iColumn, <br>                   [in] VARIANT val, <br>                   [in] OSPFIND findFlags, <br>                   [in] OSPCOMP compType, <br>                   [out, retval] long *piRowFound ); <br> <br>      // Establish or detach single event sink. <br> <br>      HRESULT addOLEDBSimpleProviderListener([in] OLEDBSimpleProviderListener *pospIListener); <br>      HRESULT removeOLEDBSimpleProviderListener([in] OLEDBSimpleProviderListener *pospIListener); <br> <br>      // Asynch support <br> <br>      HRESULT isAsync([out, retval] bool *pbAsynch); <br> <br>      HRESULT getEstimatedRows([out, retval] long *piRows); <br> <br>      // Stops any asynchronous download that may be in progress. <br>      HRESULT stopTransfer(); <br>} <br> <br>cpp_quote("typedef OLEDBSimpleProvider *LPOLEDBSimpleProvider;") <br> <br>} <br> <br>cpp_quote("#endif") </code></pre>
<p>&nbsp;</p></body>
</HTML>

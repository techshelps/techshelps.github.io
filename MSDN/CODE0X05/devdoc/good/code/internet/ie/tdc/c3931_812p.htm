<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LANGCODE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3931"></a><sup></sup>LANGCODE.CPP</h2>
<pre><code>//+----------------------------------------------------------------------- <br>// <br>//  Tabular Data Control Language Support <br>//  Copyright (C) Microsoft Corporation, 1996, 1997 <br>// <br>//  File:       LangCode.cpp <br>// <br>//  Contents:   Implementation of the LocalNameToLCID() function. <br>// <br>//------------------------------------------------------------------------ <br> <br>#include "stdafx.h" <br>#include "LangCode.h" <br>#include "wch.h" <br> <br> <br>//=======================================================================// <br> <br>typedef struct <br>{ <br>    LCID    lcid;       // DWORD Locale <br>    WCHAR   *pwchAbbrev;// ISO 369 abbreviated (no hyphen) language string <br>    WCHAR   *pwchFull;  // ISO 369 standard accept language string <br>}  <br>    LANGPROP; <br> <br>static LANGPROP langs[] = <br>{    <br>    { 0x0436, L"af",    L"af"   }, //Afrikaans <br>    { 0x041c, L"sq",    L"sq"   }, //Albanian <br>    { 0x0401, L"ar-sa", L"arsa" }, // Arabic(Saudi Arabia) <br>    { 0x0801, L"ar-iq", L"ariq" }, // Arabic(Iraq) <br>    { 0x0C01, L"ar-eg", L"areg" }, // Arabic(Egypt) <br>    { 0x1001, L"ar-ly", L"arly" }, // Arabic(Libya) <br>    { 0x1401, L"ar-dz", L"ardz" }, // Arabic(Algeria) <br>    { 0x1801, L"ar-ma", L"arma" }, // Arabic(Morocco) <br>    { 0x1C01, L"ar-tn", L"artn" }, // Arabic(Tunisia) <br>    { 0x2001, L"ar-om", L"arom" }, // Arabic(Oman) <br>    { 0x2401, L"ar-ye", L"arye" }, // Arabic(Yemen) <br>    { 0x2801, L"ar-sy", L"arsy" }, // Arabic(Syria) <br>    { 0x2C01, L"ar-jo", L"arjo" }, // Arabic(Jordan) <br>    { 0x3001, L"ar-lb", L"arlb" }, // Arabic(Lebanon) <br>    { 0x3401, L"ar-kw", L"arkw" }, // Arabic(Kuwait) <br>    { 0x3801, L"ar-ae", L"arae" }, // Arabic(U.A.E.) <br>    { 0x3C01, L"ar-bh", L"arbh" }, // Arabic(Bahrain) <br>    { 0x4001, L"ar-qa", L"arqa" }, // Arabic(Qatar) <br>    { 0x042D, L"eu",    L"eu"   }, // Basque <br>    { 0x0402, L"bg",    L"bg"   }, // Bulgarian <br>    { 0x0423, L"be",    L"be"   }, // Belarusian <br>    { 0x0403, L"ca",    L"ca"   }, // Catalan <br>    { 0x0404, L"zh-tw", L"zhtw" }, // Chinese(Taiwan Region) <br>    { 0x0804, L"zh-cn", L"zhcn" }, // Chinese(PRC) <br>    { 0x0C04, L"zh-hk", L"zhhk" }, // Chinese(Hong Kong SAR, PRC) <br>    { 0x1004, L"zh-sg", L"zhsg" }, // Chinese(Singapore) <br>    { 0x041a, L"hr",    L"hr"   }, // Croatian <br>    { 0x0405, L"cs",    L"cs"   }, // Czech <br>    { 0x0406, L"da",    L"da"   }, // Danish <br>    { 0x0413, L"nl",    L"nl"   }, // Dutch(Standard) <br>    { 0x0813, L"nl-be", L"nlbe" }, // Dutch(Belgian) <br>    { 0x0009, L"en",    L"en"   }, // English <br>    { 0x0409, L"en-us", L"enus" }, // English(United States) <br>    { 0x0809, L"en-gb", L"engb" }, // English(British) <br>    { 0x0c09, L"en-au", L"enau" }, // English(Australian) <br>    { 0x1009, L"en-ca", L"enca" }, // English(Canadian) <br>    { 0x1409, L"en-nz", L"ennz" }, // English(New Zealand) <br>    { 0x1809, L"en-ie", L"enie" }, // English(Ireland) <br>    { 0x1c09, L"en-za", L"enza" }, // English(South Africa) <br>    { 0x2009, L"en-jm", L"enjm" }, // English(Jamaica) <br>    { 0x2409, L"en",    L"en"   }, // English(Caribbean) <br>    { 0x2809, L"en-bz", L"enbz" }, // English(Belize) <br>    { 0x2c09, L"en-tt", L"entt" }, // English(Trinidad) <br>    { 0x0425, L"et",    L"et"   }, // Estonian <br>    { 0x0438, L"fo",    L"fo"   }, // Faeroese <br>    { 0x0429, L"fa",    L"fa"   }, // Farsi <br>    { 0x040b, L"fi",    L"fi"   }, // Finnish <br>    { 0x040c, L"fr",    L"fr"   }, // French(Standard) <br>    { 0x080c, L"fr-be", L"frbe" }, // French(Belgian) <br>    { 0x0c0c, L"fr-ca", L"frca" }, // French(Canadian) <br>    { 0x100c, L"fr-ch", L"frch" }, // French(Swiss) <br>    { 0x140c, L"fr-lu", L"frlu" }, // French(Luxembourg) <br>    { 0x043c, L"gd",    L"gd"   }, // Gaelic(Scots) <br>    { 0x083c, L"gd-ie", L"gdie" }, // Gaelic(Irish) <br>    { 0x0407, L"de",    L"de"   }, // German(Standard) <br>    { 0x0807, L"de-ch", L"dech" }, // German(Swiss) <br>    { 0x0c07, L"de-at", L"deat" }, // German(Austrian) <br>    { 0x1007, L"de-lu", L"delu" }, // German(Luxembourg) <br>    { 0x1407, L"de-li", L"deli" }, // German(Liechtenstein) <br>    { 0x0408, L"el",    L"el"   }, // Greek <br>    { 0x040D, L"he",    L"he"   }, // Hebrew <br>    { 0x0439, L"hi",    L"hi"   }, // Hindi <br>    { 0x040e, L"hu",    L"hu"   }, // Hungarian <br>    { 0x040F, L"is",    L"is"   }, // Icelandic <br>    { 0x0421, L"in",    L"in"   }, // Indonesian <br>    { 0x0410, L"it",    L"it"   }, // Italian(Standard) <br>    { 0x0810, L"it-ch", L"itch" }, // Italian(Swiss) <br>    { 0x0411, L"ja",    L"ja"   }, // Japanese <br>    { 0x0412, L"ko",    L"ko"   }, // Korean <br>    { 0x0812, L"ko",    L"ko"   }, // Korean(Johab) <br>    { 0x0426, L"lv",    L"lv"   }, // Latvian <br>    { 0x0427, L"lt",    L"lt"   }, // Lithuanian <br>    { 0x042f, L"mk",    L"mk"   }, // Macedonian <br>    { 0x043e, L"ms",    L"ms"   }, // Malaysian <br>    { 0x043a, L"mt",    L"mt"   }, // Maltese <br>    { 0x0414, L"no",    L"no"   }, // Norwegian(Bokmal) <br>    { 0x0814, L"no",    L"no"   }, // Norwegian(Nynorsk) <br>    { 0x0415, L"pl",    L"pl"   }, // Polish <br>    { 0x0416, L"pt-br", L"ptbr" }, // Portuguese(Brazilian) <br>    { 0x0816, L"pt",    L"pt"   }, // Portuguese(Standard) <br>    { 0x0417, L"rm",    L"rm"   }, // Rhaeto-Romanic <br>    { 0x0418, L"ro",    L"ro"   }, // Romanian <br>    { 0x0818, L"ro-mo", L"romo" }, // Romanian(Moldavia) <br>    { 0x0419, L"ru",    L"ru"   }, // Russian <br>    { 0x0819, L"ru-mo", L"rumo" }, // Russian(Moldavia) <br>    { 0x043b, L"sz",    L"sz"   }, // Sami(Lappish) <br>    { 0x0c1a, L"sr",    L"sr"   }, // Serbian(Cyrillic) <br>    { 0x081a, L"sr",    L"sr"   }, // Serbian(Latin) <br>    { 0x041b, L"sk",    L"sk"   }, // Slovak <br>    { 0x0424, L"sl",    L"sl"   }, // Slovenian <br>    { 0x042e, L"sb",    L"sb"   }, // Sorbian <br>    { 0x040a, L"es",    L"es"   }, // Spanish(Spain - Traditional Sort) <br>    { 0x080a, L"es-mx", L"esmx" }, // Spanish(Mexican) <br>    { 0x0c0a, L"es",    L"es"   }, // Spanish(Spain - Modern Sort) <br>    { 0x100a, L"es-gt", L"esgt" }, // Spanish(Guatemala) <br>    { 0x140a, L"es-cr", L"escr" }, // Spanish(Costa Rica) <br>    { 0x180a, L"es-pa", L"espa" }, // Spanish(Panama) <br>    { 0x1c0a, L"es-do", L"esdo" }, // Spanish(Dominican Republic) <br>    { 0x200a, L"es-ve", L"esve" }, // Spanish(Venezuela) <br>    { 0x240a, L"es-co", L"esco" }, // Spanish(Colombia) <br>    { 0x280a, L"es-pe", L"espe" }, // Spanish(Peru) <br>    { 0x2c0a, L"es-ar", L"esar" }, // Spanish(Argentina) <br>    { 0x300a, L"es-ec", L"esec" }, // Spanish(Ecuador) <br>    { 0x340a, L"es-cl", L"escl" }, // Spanish(Chile) <br>    { 0x380a, L"es-uy", L"esuy" }, // Spanish(Uruguay) <br>    { 0x3c0a, L"es-py", L"espy" }, // Spanish(Paraguay) <br>    { 0x400a, L"es-bo", L"esbo" }, // Spanish(Bolivia) <br>    { 0x440a, L"es-sv", L"essv" }, // Spanish(El Salvador) <br>    { 0x480a, L"es-hn", L"eshn" }, // Spanish(Honduras) <br>    { 0x4c0a, L"es-ni", L"esni" }, // Spanish(Nicaragua) <br>    { 0x500a, L"es-pr", L"espr" }, // Spanish(Puerto Rico) <br>    { 0x0430, L"sx",    L"sx"   }, // Sutu <br>    { 0x041D, L"sv",    L"sv"   }, // Swedish <br>    { 0x081d, L"sv-fi", L"svfi" }, // Swedish(Finland) <br>    { 0x041E, L"th",    L"th"   }, // Thai <br>    { 0x0431, L"ts",    L"ts"   }, // Tsonga <br>    { 0x0432, L"tn",    L"tn"   }, // Tswana <br>    { 0x041f, L"tr",    L"tr"   }, // Turkish <br>    { 0x0422, L"uk",    L"uk"   }, // Ukrainian <br>    { 0x0420, L"ur",    L"ur"   }, // Urdu <br>    { 0x0433, L"ve",    L"ve"   }, // Venda <br>    { 0x042a, L"vi",    L"vi"   }, // Vietnamese <br>    { 0x0434, L"xh",    L"xh"   }, // Xhosa <br>    { 0x043d, L"ji",    L"ji"   }, // Yiddish <br>    { 0x0435, L"zu",    L"zu"   }, // Zulu <br>}; <br> <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Function:   LocalNametoLCID() <br>// <br>//  Synopsis:   Searches for the locale ID corresponding to the given <br>//              ISO 369 locale name. <br>// <br>//  Arguments:  pwchLocaleName    Name of locale to match. <br>// <br>//  Returns:    Locale ID if a match is found <br>//              NULL Locale (0x0000) if no match is found <br>// <br>//------------------------------------------------------------------------ <br> <br>LCID LocalNameToLCID(LPWCH pwchLocaleName) <br>{ <br>    int i; <br>    LCID    lcid    = 0x0000; <br> <br>    for (i = 0; i &lt; sizeof(langs) / sizeof(langs[0]); i++) <br>    { <br>        LANGPROP    *pLang  = &amp;langs[i]; <br> <br>        if (wch_icmp(pwchLocaleName, pLang-&gt;pwchAbbrev) == 0 || <br>            wch_icmp(pwchLocaleName, pLang-&gt;pwchFull) == 0) <br>        { <br>            lcid = pLang-&gt;lcid; <br>            break; <br>        } <br>    } <br>    return lcid; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

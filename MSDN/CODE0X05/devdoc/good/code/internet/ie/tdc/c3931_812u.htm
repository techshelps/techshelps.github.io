<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NOTIFY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3936"></a><sup></sup>NOTIFY.H</h2>
<pre><code>//+----------------------------------------------------------------------- <br>// <br>//  TDC / STD Notifications <br>//  Copyright (C) Microsoft Corporation, 1996, 1997 <br>// <br>//  File:       Notify.h <br>// <br>//  Contents:   Declaration of the CEventBroker class. <br>//              This class translates internal TDC / STD events into <br>//              appropriate notifications for the external world. <br>// <br>//------------------------------------------------------------------------ <br> <br>#include "msdatsrc.h" <br> <br>template &lt;class T&gt; class CMyBindStatusCallback; <br>class CTDCCtl; <br> <br>interface DATASRCListener : public IUnknown <br>{ <br>    STDMETHOD(datasrcChanged)(BSTR bstrQualifier, BOOL fDataAvail); <br>}; <br> <br>//------------------------------------------------------------------------ <br>// <br>//  CEventBroker <br>// <br>//  This class translates internal STD / TDC events into appropriate <br>//  notifications for the outside world. <br>// <br>//------------------------------------------------------------------------ <br> <br>class CEventBroker <br>{ <br>public: <br>    STDMETHOD_(ULONG,AddRef)    (THIS); <br>    STDMETHOD_(ULONG,Release)   (THIS); <br>// ;begin_internal <br>    STDMETHOD(SetDATASRCListener)(DATASRCListener *); <br>// ;end_internal <br>    STDMETHOD(SetDataSourceListener)(DataSourceListener *); <br>    STDMETHOD(SetSTDEvents)(OLEDBSimpleProviderListener *); <br>    inline DataSourceListener *GetDataSourceListener(); <br>    inline DATASRCListener *GetDATASRCListener(); <br>    inline OLEDBSimpleProviderListener *GetSTDEvents(); <br> <br>    CEventBroker(CTDCCtl *pReadyStateControl); <br>    ~CEventBroker(); <br> <br>    STDMETHOD(aboutToChangeCell)(LONG iRow, LONG iCol); <br>    STDMETHOD(cellChanged)(LONG iRow, LONG iCol); <br>    STDMETHOD(aboutToDeleteRows)(LONG iRowStart, LONG iRowCount); <br>    STDMETHOD(deletedRows)(LONG iRowStart, LONG iRowCount); <br>    STDMETHOD(aboutToInsertRows)(LONG iRowStart, LONG iRowCount); <br>    STDMETHOD(insertedRows)(LONG iRowStart, LONG iRowCount); <br>    STDMETHOD(rowsAvailable)(LONG iRowStart, LONG iRowCount); <br> <br>    STDMETHOD(RowChanged)(LONG iRow); <br>    STDMETHOD(ColChanged)(LONG iCol); <br>// ;begin_internal <br>#ifdef NEVER <br>    STDMETHOD(DeletedCols)(LONG iColStart, LONG iColCount); <br>    STDMETHOD(InsertedCols)(LONG iColStart, LONG iColCount); <br>#endif <br>// ;end_internal <br>    STDMETHOD(STDLoadStarted)(CComObject&lt;CMyBindStatusCallback&lt;CTDCCtl&gt; &gt; *pBSC, <br>                              boolean fAppending); <br>    STDMETHOD(STDLoadCompleted)(); <br>    STDMETHOD(STDLoadStopped)(); <br>    STDMETHOD(STDLoadedHeader)(); <br>    STDMETHOD(STDDataSetChanged)(); <br> <br>    STDMETHOD(GetReadyState)(LONG *plReadyState); <br>    STDMETHOD(UpdateReadyState)(LONG lReadyState);     <br>    CMyBindStatusCallback&lt;CTDCCtl&gt; *m_pBSC; <br> <br>private: <br>    ULONG                    m_cRef;         // interface reference count <br>    DataSourceListener      *m_pDataSourceListener; <br>// ;begin_internal <br>    DATASRCListener         *m_pDATASRCListener; <br>// ;end_internal <br>    OLEDBSimpleProviderListener *m_pSTDEvents; <br>    LONG                     m_lReadyState; <br>    CTDCCtl                  *m_pReadyStateControl; <br>}; <br> <br>inline DataSourceListener *CEventBroker::GetDataSourceListener() <br>{ <br>    return m_pDataSourceListener; <br>} <br> <br>// ;begin_internal <br>inline DATASRCListener *CEventBroker::GetDATASRCListener() <br>{ <br>    return m_pDATASRCListener; <br>} <br>// ;end_internal <br> <br>inline OLEDBSimpleProviderListener *CEventBroker::GetSTDEvents() <br>{ <br>    return m_pSTDEvents; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPDATA.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3939"></a><sup></sup>SIMPDATA.H</h2>
<pre><code>//+----------------------------------------------------------------------- <br>// <br>//  Simple Tabular Data Object <br>//  Copyright (C) Microsoft Corporation, 1996, 1997 <br>// <br>//  File:       SimpData.h <br>// <br>//  Contents:   Declaration of the CSimpleTabularData COM object. <br>// <br>//------------------------------------------------------------------------ <br> <br>#include "resource.h"       // main symbols <br>#include "std.h" <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Class:     CSimpleTabularData <br>// <br>//  Synopsis:  This is the STD interface presented to the outside world. <br>//             The calls are passed directly to the attached TDCArr object. <br>//             This allows the CSimpleTabularData interfaces to expire <br>//             independently of the CTDC control. <br>// <br>//------------------------------------------------------------------------ <br> <br>class CSimpleTabularData : public OLEDBSimpleProvider <br>{ <br>public: <br>    CSimpleTabularData(); <br>    ~CSimpleTabularData(); <br> <br>    //  This method is used to initialise the object once after construction <br>    void Create(CTDCArr *pTDCArr); <br> <br>    //  This method is used to mark the interface as invalid <br>    STDMETHOD(Invalidate)(); <br> <br>    // IUnknown <br> <br>    STDMETHOD(QueryInterface)   (REFIID, LPVOID FAR*); <br>    STDMETHOD_(ULONG,AddRef)    (THIS); <br>    STDMETHOD_(ULONG,Release)   (THIS); <br> <br>// These methods and members implement the ISimpleTabularData interface <br>// <br>private: <br>    CTDCArr *m_pTDCArr; <br>    ULONG   m_cRef;         // interface reference count <br> <br>public: <br> <br>    //  The STD methods are passed directly to the attached TDCArr object <br>    // <br>    inline STDMETHOD(getRowCount)(LONG *pcRows); <br>    inline STDMETHOD(getColumnCount)(LONG *pcColumns); <br>    inline STDMETHOD(getRWStatus)(LONG iRow, LONG iCol, OSPRW *prwStatus); <br>    inline STDMETHOD(getVariant)(LONG iRow, LONG iCol, <br>                                 OSPFORMAT fmt, VARIANT *pVar); <br>    inline STDMETHOD(setVariant)(LONG iRow, LONG iCol, <br>                                 OSPFORMAT fmt, VARIANT Var); <br>    inline STDMETHOD(getLocale)(BSTR *pbstrLocale); <br>    inline STDMETHOD(deleteRows)(LONG iRow, LONG cRows, LONG *pcRowsDeleted); <br>    inline STDMETHOD(insertRows)(LONG iRow, LONG cRows, LONG *pcRowsInserted); <br>// ;begin_internal <br>    inline STDMETHOD(DeleteColumns)(LONG iColumn, LONG cCols, <br>                                    LONG *pcColsDeleted); <br>    inline STDMETHOD(InsertColumns)(LONG iColumn, LONG cCols, <br>                                    LONG *pcColsInserted); <br>// ;end_internal <br>    inline STDMETHOD(find)(LONG iRowStart, LONG iColumn, VARIANT val, <br>              OSPFIND findFlags, OSPCOMP compType, LONG *piRowFound); <br>    inline STDMETHOD(addOLEDBSimpleProviderListener)(OLEDBSimpleProviderListener *pospIListener); <br>    inline STDMETHOD(removeOLEDBSimpleProviderListener)(OLEDBSimpleProviderListener *pospIListener); <br>    inline STDMETHOD(getEstimatedRows)(LONG *pcRows);     <br>    inline STDMETHOD(isAsync)(BOOL *pbAsync); <br>    inline STDMETHOD(stopTransfer)(); <br>}; <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getRowCount(LONG *pcRows) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getRowCount(pcRows); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getColumnCount(LONG *pcColumns) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getColumnCount(pcColumns); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getRWStatus(LONG iRow, LONG iColumn, OSPRW *prwStatus) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getRWStatus(iRow, iColumn, prwStatus); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getVariant(LONG iRow, LONG iColumn, OSPFORMAT format, VARIANT *pVar) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getVariant(iRow, iColumn, format, pVar); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::setVariant(LONG iRow, LONG iColumn, OSPFORMAT format, VARIANT Var) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;setVariant(iRow, iColumn, format, Var); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getLocale(BSTR *pbstrLocale) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getLocale(pbstrLocale); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::deleteRows(LONG iRow, LONG cRows, LONG *pcRowsDeleted) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;deleteRows(iRow, cRows, pcRowsDeleted); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::insertRows(LONG iRow, LONG cRows, LONG *pcRowsInserted) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;insertRows(iRow, cRows, pcRowsInserted); <br>} <br> <br>// ;begin_internal <br>inline STDMETHODIMP <br>CSimpleTabularData::DeleteColumns(LONG iColumn, LONG cColumns, LONG *pcColumnsDeleted) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;DeleteColumns(iColumn, cColumns, pcColumnsDeleted); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::InsertColumns(LONG iColumn, LONG cColumns, LONG *pcColumnsInserted) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;InsertColumns(iColumn, cColumns, pcColumnsInserted); <br>} <br>// ;end_internal <br> <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::find(LONG iRowStart, LONG iColumn, VARIANT val, <br>        OSPFIND findFlags, OSPCOMP compType, LONG *piRowFound) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;find(iRowStart, iColumn, val, <br>                                    findFlags, compType, piRowFound); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::addOLEDBSimpleProviderListener(OLEDBSimpleProviderListener *pospIListener) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;addOLEDBSimpleProviderListener(pospIListener); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::removeOLEDBSimpleProviderListener(OLEDBSimpleProviderListener *pospIListener) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;removeOLEDBSimpleProviderListener(pospIListener); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::getEstimatedRows(LONG *pcRows) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;getEstimatedRows(pcRows); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::isAsync(BOOL *pbAsync) <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;isAsync(pbAsync); <br>} <br> <br>inline STDMETHODIMP <br>CSimpleTabularData::stopTransfer() <br>{ <br>    return m_pTDCArr == NULL ? E_UNEXPECTED : <br>        m_pTDCArr-&gt;stopTransfer(); <br>} <br> <br>typedef CSimpleTabularData *LPSTD; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDC.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3945"></a><sup></sup>TDC.IDL</h2>
<pre><code>#include &lt;olectl.h&gt; <br>// TDC.idl : IDL source for TDC.dll <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (TDC.tlb) and marshalling code. <br> <br>#include "TDCIds.h" <br> <br>[ <br>    uuid(761279e6-2dee-11d1-9544-00c04fb66f5d), <br>    version(1.1), <br>    helpstring("Tabular Data Control sample 1.1 Type Library") <br>] <br>library TDCLib <br>{ <br>    importlib("stdole32.tlb");  // don't remove this! <br> <br> <br>    [ uuid(E0E270C0-C0BE-11d0-8FE4-00A0C90A6341), odl, dual] <br>    interface OLEDBSimpleProviderX : IDispatch <br>    { <br>    }; <br> <br>    [ <br>    object, <br>        uuid(761279e8-2dee-11d1-9544-00c04fb66f5d), <br>    dual, <br>    helpstring("ITDCCtl Interface"), <br>    pointer_default(unique) <br>    ] <br> <br> <br>    interface ITDCCtl : IDispatch <br>    { <br> <br>    // Properties <br> <br>    [propget, id(DISPID_FIELDDELIM)] <br>        HRESULT FieldDelim([out, retval] BSTR* pbstrFieldDelim); <br>    [propput, id(DISPID_FIELDDELIM)] <br>        HRESULT FieldDelim([in] BSTR bstrFieldDelim); <br> <br>    [propget, id(DISPID_ROWDELIM)] <br>        HRESULT RowDelim([out, retval] BSTR* pbstrRowDelim); <br>    [propput, id(DISPID_ROWDELIM)] <br>        HRESULT RowDelim([in] BSTR bstrRowDelim); <br> <br>    [propget, id(DISPID_TEXTQUALIFIER)] <br>        HRESULT TextQualifier([out, retval] BSTR* pbstrTextQualifier); <br>    [propput, id(DISPID_TEXTQUALIFIER)] <br>        HRESULT TextQualifier([in] BSTR bstrTextQualifier); <br> <br>    [propget, id(DISPID_ESCAPECHAR)] <br>        HRESULT EscapeChar([out, retval] BSTR* pbstrEscapeChar); <br>    [propput, id(DISPID_ESCAPECHAR)] <br>        HRESULT EscapeChar([in] BSTR bstrEscapeChar); <br> <br>    [propget, id(DISPID_USEHEADER)] <br>        HRESULT UseHeader([out, retval] VARIANT_BOOL* pfUseHeader); <br>    [propput, id(DISPID_USEHEADER)] <br>        HRESULT UseHeader([in] VARIANT_BOOL fUseHeader); <br> <br>    [propget, id(DISPID_SORTCOLUMN), hidden] <br>        HRESULT SortColumn([out, retval] BSTR* pbstrSortColumn); <br>    [propput, id(DISPID_SORTCOLUMN), hidden] <br>        HRESULT SortColumn([in] BSTR bstrSortColumn); <br> <br>    [propget, id(DISPID_SORTASCENDING), hidden] <br>        HRESULT SortAscending([out, retval] VARIANT_BOOL *pfSortAscending); <br>    [propput, id(DISPID_SORTASCENDING), hidden] <br>        HRESULT SortAscending([in] VARIANT_BOOL fSortAscending); <br> <br>    [propget, id(DISPID_FILTERVALUE), hidden] <br>        HRESULT FilterValue([out, retval] BSTR* pbstrFilterValue); <br>    [propput, id(DISPID_FILTERVALUE), hidden] <br>        HRESULT FilterValue([in] BSTR bstrFilterValue); <br> <br>    [propget, id(DISPID_FILTERCRITERION), hidden] <br>        HRESULT FilterCriterion([out, retval] BSTR* pbstrFilterCriterion); <br>    [propput, id(DISPID_FILTERCRITERION), hidden] <br>        HRESULT FilterCriterion([in] BSTR bstrFilterCriterion); <br> <br>    [propget, id(DISPID_FILTERCOLUMN), hidden] <br>        HRESULT FilterColumn([out, retval] BSTR* pbstrFilterColumn); <br>    [propput, id(DISPID_FILTERCOLUMN), hidden] <br>        HRESULT FilterColumn([in] BSTR bstrFilterColumn); <br> <br>    [propget, id(DISPID_CHARSET)] <br>        HRESULT CharSet([out, retval] BSTR *pbstrCharSet); <br>    [propput, id(DISPID_CHARSET)] <br>        HRESULT CharSet([in] BSTR bstrCharSet); <br> <br>    [propget, id(DISPID_LANGUAGE)] <br>        HRESULT Language([out, retval] BSTR *pbstrLanguage); <br>    [propput, id(DISPID_LANGUAGE)] <br>        HRESULT Language([in] BSTR bstrLanguage); <br> <br>    [propget, id(DISPID_CASESENSITIVE)] <br>        HRESULT CaseSensitive([out, retval] VARIANT_BOOL *pfCaseSensitive); <br>    [propput, id(DISPID_CASESENSITIVE)] <br>        HRESULT CaseSensitive([in] VARIANT_BOOL fCaseSensitive); <br> <br>    //  This will be tagged differently when we learn more about the HTML <br>    //  sub-tag "OBJECT" <br>    [propget, id(DISPID_DATAURL)] <br>        HRESULT DataURL([out, retval] BSTR* pbstrDataURL); <br>    [propput, id(DISPID_DATAURL)] <br>        HRESULT DataURL([in] BSTR bstrDataURL); <br> <br>    [restricted, id(-3900)] <br>    HRESULT msDataSourceObject([in] BSTR qualifier, <br>                   [out, retval] IUnknown **ppUnk); <br> <br>    [restricted, id(-3901)] <br>    HRESULT addDataSourceListener([in] IUnknown *pEvent); <br> <br>    // Methods <br> <br>    HRESULT Reset(); <br> <br>    // New properties/methods - put here to existing preserve vtable order <br> <br>// ;begin_internal <br>#ifdef NEVER <br>    [propget, id(DISPID_TIMER)] <br>        HRESULT RefreshInterval([out, retval] LONG *plSecs); <br>    [propput, id(DISPID_TIMER)] <br>        HRESULT RefreshInterval([in] LONG lSecs); <br>#endif <br>// ;end_internal <br> <br>    [hidden, restricted] <br>    HRESULT _OnTimer(); <br> <br>    [propget, id(DISPID_FILTER)] <br>        HRESULT Filter([out, retval] BSTR* pbstrFilterExpr); <br>    [propput, id(DISPID_FILTER)] <br>        HRESULT Filter([in] BSTR bstrFilterExpr); <br> <br>    [propget, id(DISPID_SORT)] <br>        HRESULT Sort([out, retval] BSTR* pbstrSortExpr); <br>    [propput, id(DISPID_SORT)] <br>        HRESULT Sort([in] BSTR bstrSortExpr); <br> <br>    [propget, id(DISPID_READYSTATE)] <br>        HRESULT ReadyState([out, retval] long *state); <br>    [propput, id(DISPID_READYSTATE)] <br>        HRESULT ReadyState([in] long state); <br> <br>    [propget, id(DISPID_APPENDDATA)] <br>        HRESULT AppendData([out, retval] VARIANT_BOOL *pfAppendData); <br>    [propput, id(DISPID_APPENDDATA)] <br>        HRESULT AppendData([in] VARIANT_BOOL fAppendData); <br> <br>    [propget, id(DISPID_OSP), hidden] <br>        HRESULT OSP([out, retval] OLEDBSimpleProviderX ** ppISTD); <br>    }; <br> <br>    [ <br>        object, <br>        uuid(761279e9-2dee-11d1-9544-00c04fb66f5d), <br>        dual, <br>    helpstring("Tabular Data Control Event interface"), <br>        pointer_default(unique) <br>    ] <br>    interface ITDCCtlEvents: IDispatch <br>    { <br>        [id(DISPID_READYSTATECHANGE)] <br>            void onreadystatechange(); <br>    }; <br> <br>    [ <br>        uuid(761279ea-2dee-11d1-9544-00c04fb66f5d), <br>    helpstring("Tabular Data Control") <br>    ] <br>    coclass CTDCCtl <br>    { <br>    [default] interface ITDCCtl; <br>        [default, source] interface ITDCCtlEvents; <br>    }; <br> <br> <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

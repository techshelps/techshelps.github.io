<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MLANG.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3933"></a><sup></sup>MLANG.IDL</h2>
<pre><code>//+------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright (C) Microsoft Corporation, 1992-1997. <br>// <br>//  File: mlang.idl <br>// <br>//  Contents: IMultiLanguage interface definition <br>// <br>// <br>//-------------------------------------------------------------------------- <br> <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("// MLang.h") <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("// (C) Copyright 1995-1997 Microsoft Corporation.  All Rights Reserved.") <br>cpp_quote("//") <br>cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF") <br>cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO") <br>cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A") <br>cpp_quote("// PARTICULAR PURPOSE.") <br>cpp_quote("//=--------------------------------------------------------------------------=") <br>cpp_quote("") <br>cpp_quote("#pragma comment(lib,\"uuid.lib\")") <br>cpp_quote("") <br>cpp_quote("//--------------------------------------------------------------------------") <br>cpp_quote("// IMultiLanguage Interfaces.") <br>cpp_quote("") <br> <br>#ifndef DO_NO_IMPORTS <br>import "unknwn.idl"; <br>#endif <br> <br>[ <br>    uuid(275c23e0-3747-11d0-9fea-00aa003f8646), <br>    helpstring("MultiLanguage Object Model"), <br>    lcid(0x0000), <br>    version(0.1) <br>] <br>library MultiLanguage <br>{ <br>    importlib("stdole2.tlb"); <br> <br> <br>    [ <br>      object, <br>      uuid(275c23e3-3747-11d0-9fea-00aa003f8646), <br>      pointer_default(unique) <br>    ] <br>    interface IEnumCodePage : IUnknown <br>    { <br>        const USHORT MAX_MIMECP_NAME    = 65; <br>        const USHORT MAX_MIMECSET_NAME  = 50; <br>        const USHORT MAX_MIMEFACE_NAME  = 32; <br> <br>        typedef enum tagMIMECONTF <br>        { <br>            MIMECONTF_MAILNEWS          = 1, <br>            MIMECONTF_BROWSER           = 2, <br>            MIMECONTF_MINIMAL           = 4, <br>            MIMECONTF_VALID             = 256 <br>        } MIMECONTF; <br> <br>        typedef struct tagMIMECPINFO <br>        { <br>            DWORD   dwFlags; <br>            UINT    uiCodePage; <br>            UINT    uiFamilyCodePage; <br>            WCHAR   wszDescription[MAX_MIMECP_NAME]; <br>            WCHAR   wszWebCharset[MAX_MIMECSET_NAME]; <br>            WCHAR   wszHeaderCharset[MAX_MIMECSET_NAME]; <br>            WCHAR   wszBodyCharset[MAX_MIMECSET_NAME]; <br>            WCHAR   wszFixedWidthFont[MAX_MIMEFACE_NAME]; <br>            WCHAR   wszProportionalFont[MAX_MIMEFACE_NAME]; <br>            BYTE    bGDICharset; <br>        } MIMECPINFO, *PMIMECPINFO; <br> <br>        typedef struct tagMIMECSETINFO <br>        { <br>            UINT    uiCodePage; <br>            UINT    uiInternetEncoding; <br>            WCHAR   wszCharset[MAX_MIMECSET_NAME]; <br>        } MIMECSETINFO, *PMIMECSETINFO; <br> <br>        typedef [unique] IEnumCodePage *LPENUMCODEPAGE; <br> <br>        HRESULT Clone <br>        ( <br>            [out] IEnumCodePage **ppEnum <br>        ); <br> <br>        HRESULT Next <br>        ( <br>            [in]  ULONG         celt, <br>            [out] PMIMECPINFO   rgelt, <br>            [out] ULONG         *pceltFetched <br>        ); <br> <br>        HRESULT Reset(); <br> <br>        HRESULT Skip <br>        ( <br>            [in]  ULONG         celt <br>        ); <br>    }; <br> <br>    [ <br>      object, <br>      uuid(275c23e1-3747-11d0-9fea-00aa003f8646), <br>      pointer_default(unique) <br>    ] <br>    interface IMultiLanguage : IUnknown <br>    { <br>        typedef [unique] IMultiLanguage *LPMULTILANGUAGE; <br> <br>        HRESULT GetNumberOfCodePageInfo <br>        ( <br>            [out] UINT          *pcCodePage <br>        ); <br> <br>        HRESULT GetCodePageInfo <br>        ( <br>            [in]  UINT          uiCodePage, <br>            [out] PMIMECPINFO   pCodePageInfo <br>        ); <br> <br>        HRESULT GetFamilyCodePage <br>        ( <br>            [in]  UINT          uiCodePage, <br>            [out] UINT          *puiFamilyCodePage <br>        ); <br> <br>        HRESULT EnumCodePages <br>        ( <br>            [in]  DWORD         grfFlags, <br>            [out] IEnumCodePage **ppEnumCodePage <br>        ); <br> <br>        HRESULT GetCharsetInfo <br>        ( <br>            [in]  BSTR          Charset, <br>            [out] PMIMECSETINFO pCharsetInfo <br>        ); <br> <br>        HRESULT IsConvertible <br>        ( <br>            [in]  DWORD         dwSrcEncoding, <br>            [in]  DWORD         dwDstEncoding <br>        ); <br> <br>        HRESULT ConvertString <br>        ( <br>            [in]  DWORD         dwSrcEncoding, <br>            [in]  DWORD         dwDstEncoding, <br>            [in]  BYTE          *pSrcStr, <br>            [in,out]  UINT      *pcSrcSize, <br>            [in]  BYTE          *pDstStr, <br>            [in,out]  UINT      *pcDstSize <br>        ); <br> <br>        HRESULT ConvertStringToUnicode <br>        ( <br>            [in]  DWORD         dwEncoding, <br>            [in]  CHAR          *pSrcStr, <br>            [in,out]  UINT      *pcSrcSize, <br>            [in]  WCHAR         *pDstStr, <br>            [in,out]  UINT      *pcDstSize <br>        ); <br>         <br>        HRESULT ConvertStringFromUnicode <br>        ( <br>            [in]  DWORD         dwEncoding, <br>            [in]  WCHAR         *pSrcStr, <br>            [in,out]  UINT      *pcSrcSize, <br>            [in]  CHAR          *pDstStr, <br>            [in,out]  UINT      *pcDstSize <br>        );         <br>    }; <br> <br>    [ <br>      uuid(275c23e2-3747-11d0-9fea-00aa003f8646), <br>    ] <br>    coclass CMultiLanguage <br>    { <br>        [default] interface IMultiLanguage; <br>    }; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

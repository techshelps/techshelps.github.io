<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NOTIFY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3935"></a><sup></sup>NOTIFY.CPP</h2>
<pre><code><br>//+----------------------------------------------------------------------- <br>// <br>//  TDC / STD Notifications <br>//  Copyright (C) Microsoft Corporation, 1996, 1997 <br>// <br>//  File:       Notify.cpp <br>// <br>//  Contents:   Implementation of the CEventBroker class. <br>//              This class translates internal TDC / STD events into <br>//              appropriate notifications for the external world. <br>// <br>//------------------------------------------------------------------------ <br> <br>#include "stdafx.h" <br>#include "STD.h" <br>#include "TDC.h" <br>#include &lt;MLang.h&gt; <br>#include "Notify.h" <br>#include "TDCParse.h" <br>#include "TDCArr.h" <br>#include "SimpData.h" <br>#include "TDCIds.h" <br>#include "TDCCtl.h" <br> <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    CEventBroker() <br>// <br>//  Synopsis:  Class constructor <br>// <br>//  Arguments: None <br>// <br>//------------------------------------------------------------------------ <br> <br>CEventBroker::CEventBroker(CTDCCtl *pReadyStateControl) <br>{ <br>    m_cRef = 1; <br>    m_pSTDEvents = NULL; <br>// ;begin_internal <br>    m_pDATASRCListener = NULL; <br>// ;end_internal <br>    m_pDataSourceListener = NULL; <br>    m_pBSC = NULL; <br> <br>    //  Can't AddRef this control, since it has a ref on this object; <br>    //  would lead to circular refs &amp; zombie objects. <br>    // <br>    m_pReadyStateControl = pReadyStateControl; <br> <br>    // When we're born, we'd better be born READYSTATE_COMPLETE. <br>    // If and when a query starts, we can go READYSTATE_LOADED. <br>    m_lReadyState = READYSTATE_COMPLETE; <br>} <br> <br>CEventBroker::~CEventBroker() <br>{ <br> <br>    SetDataSourceListener(NULL); <br>// ;begin_internal <br>    SetDATASRCListener(NULL); <br>// ;end_internal <br>    SetSTDEvents(NULL); <br>} <br> <br>//+----------------------------------------------------------------------- <br>// <br>//  Method:    AddRef() <br>// <br>//  Synopsis:  Implements part of the standard IUnknown COM interface. <br>//               (Adds a reference to this COM object) <br>// <br>//  Arguments: None <br>// <br>//  Returns:   Number of references to this COM object. <br>// <br>//+----------------------------------------------------------------------- <br> <br>STDMETHODIMP_(ULONG) <br>CEventBroker::AddRef () <br>{ <br>    return ++m_cRef; <br>} <br> <br> <br>//+----------------------------------------------------------------------- <br>// <br>//  Method:    Release() <br>// <br>//  Synopsis:  Implements part of the standard IUnknown COM interface. <br>//               (Removes a reference to this COM object) <br>// <br>//  Arguments: None <br>// <br>//  Returns:   Number of remaining references to this COM object. <br>//             0 if the COM object is no longer referenced. <br>// <br>//+----------------------------------------------------------------------- <br> <br>STDMETHODIMP_(ULONG) <br>CEventBroker::Release () <br>{ <br>    ULONG retval; <br> <br>    retval = --m_cRef; <br> <br>    if (m_cRef == 0) <br>    { <br>        m_cRef = 0xffff; <br>        delete this; <br>    } <br> <br>    return retval; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    GetReadyState() <br>// <br>//  Synopsis:  Returns the current ReadyState in the supplied pointer. <br>// <br>//  Arguments: plReadyState    Pointer to space to hold ReadyState result <br>// <br>//  Returns:   S_OK indicating success. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::GetReadyState(LONG *plReadyState) <br>{ <br>    *plReadyState = m_lReadyState; <br>    return S_OK; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    UpdateReadySTate() <br>// <br>//  Synopsis:  Update our ReadyState and FireOnChanged iif it changed <br>// <br>//  Arguments: lReadyState    new ReadyState <br>// <br>//  Returns:   S_OK indicating success. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::UpdateReadyState(LONG lReadyState) <br>{ <br>    // If we're actually stopping something, then fire READYSTATE_COMPLETE <br>    if (m_lReadyState != lReadyState) <br>    { <br>        m_lReadyState = lReadyState; <br>        if (m_pReadyStateControl != NULL) <br>        { <br>            m_pReadyStateControl-&gt;FireOnChanged(DISPID_READYSTATE); <br>            m_pReadyStateControl-&gt;FireOnReadyStateChanged(); <br>        } <br>    } <br> <br>    return S_OK; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    SetDataSourceListener() <br>// <br>//  Synopsis:  Sets the COM object which should receive DATASRC <br>//             notification events. <br>// <br>//  Arguments: pDataSourceLIstener  Pointer to COM object to receive notification <br>//                               events, or NULL if no notifications to be sent. <br>// <br>//  Returns:   S_OK indicating success. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::SetDataSourceListener(DataSourceListener *pDataSourceListener) <br>{ <br>    // If we've changed/reset the data source listener, make sure we don't <br>    // think we've fired dataMemberChanged on it yet. <br>    ClearInterface(&amp;m_pDataSourceListener); <br> <br>    if (pDataSourceListener != NULL) <br>    { <br>        m_pDataSourceListener = pDataSourceListener; <br>        m_pDataSourceListener-&gt;AddRef(); <br>    } <br>    return S_OK; <br>} <br> <br>// ;begin_internal <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    SetDATASRCListener() <br>// <br>//  Synopsis:  Sets the COM object which should receive DATASRC <br>//             notification events. <br>// <br>//  Arguments: pDATASRCLIstener  Pointer to COM object to receive notification <br>//                               events, or NULL if no notifications to be sent. <br>// <br>//  Returns:   S_OK indicating success. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::SetDATASRCListener(DATASRCListener *pDATASRCListener) <br>{ <br>    // If we've changed/reset the data source listener, make sure we don't <br>    // think we've fired dataMemberChanged on it yet. <br>    ClearInterface(&amp;m_pDATASRCListener); <br> <br>    if (pDATASRCListener != NULL) <br>    { <br>        m_pDATASRCListener = pDATASRCListener; <br>        m_pDATASRCListener-&gt;AddRef(); <br>    } <br>    return S_OK; <br>} <br>// ;end_internal <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    SetSTDEvents() <br>// <br>//  Synopsis:  Sets the COM object which should receive DATASRC <br>//             notification events. <br>// <br>//  Arguments: pSTDEvents     Pointer to COM object to receive notification <br>//                            events, or NULL if no notifications to be sent. <br>// <br>//  Returns:   S_OK indicating success. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::SetSTDEvents(OLEDBSimpleProviderListener *pSTDEvents) <br>{ <br>    ClearInterface(&amp;m_pSTDEvents); <br> <br>    if (pSTDEvents != NULL) <br>    { <br>        m_pSTDEvents = pSTDEvents; <br>        m_pSTDEvents-&gt;AddRef(); <br>    } <br>    return S_OK; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    aboutToChangeCell() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a particular cell <br>//             is about to change. <br>// <br>//  Arguments: iRow           Row number of the cell that has changed. <br>//             iCol           Column number of the cell that has changed. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::aboutToChangeCell(LONG iRow, LONG iCol) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRow &gt;= 0); <br>    _ASSERT(iCol &gt;= 1); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;aboutToChangeCell(iRow, iCol); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    CellChanged() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a particular cell <br>//             has changed. <br>// <br>//  Arguments: iRow           Row number of the cell that has changed. <br>//             iCol           Column number of the cell that has changed. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::cellChanged(LONG iRow, LONG iCol) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRow &gt;= 0); <br>    _ASSERT(iCol &gt;= 1); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;cellChanged(iRow, iCol); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    RowChanged() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a particular row <br>//             has changed. <br>// <br>//  Arguments: iRow           Number of the row that has changed. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::RowChanged(LONG iRow) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRow &gt;= 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;cellChanged(iRow, -1); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    ColChanged() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a particular column <br>//             has changed. <br>// <br>//  Arguments: iCol           Number of the column that has changed. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::ColChanged(LONG iCol) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iCol &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;cellChanged(-1, iCol); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    aboutToDeleteRows() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some rows <br>//             have been deleted. <br>// <br>//  Arguments: iRowStart      Number of row on which deletion started. <br>//             iRowCount      Number of rows deleted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::aboutToDeleteRows(LONG iRowStart, LONG iRowCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRowStart &gt;= 0); <br>    _ASSERT(iRowCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;aboutToDeleteRows(iRowStart, iRowCount); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    deletedRows() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some rows <br>//             have been deleted. <br>// <br>//  Arguments: iRowStart      Number of row on which deletion started. <br>//             iRowCount      Number of rows deleted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::deletedRows(LONG iRowStart, LONG iRowCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRowStart &gt;= 0); <br>    _ASSERT(iRowCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;deletedRows(iRowStart, iRowCount); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    aboutToInsertRows() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some rows <br>//             have been inserted. <br>// <br>//  Arguments: iRowStart      Number of row on which insertion started. <br>//             iRowCount      Number of rows inserted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::aboutToInsertRows(LONG iRowStart, LONG iRowCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRowStart &gt;= 0); <br>    _ASSERT(iRowCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>            m_pSTDEvents-&gt;aboutToInsertRows(iRowStart, iRowCount); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    insertedRows() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some rows <br>//             have been inserted. <br>// <br>//  Arguments: iRowStart      Number of row on which insertion started. <br>//             iRowCount      Number of rows inserted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::insertedRows(LONG iRowStart, LONG iRowCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRowStart &gt;= 0); <br>    _ASSERT(iRowCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>            m_pSTDEvents-&gt;insertedRows(iRowStart, iRowCount); <br>    return hr; <br>} <br> <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    rowsAvailable() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some rows <br>//             have arrived.  Although this is very similar to insertedRows <br>//             we want to preserve the distinction between rows that <br>//             arrive on the wire and an insert operation that might be <br>//             performed while some data is still downloading. <br>// <br>//  Arguments: iRowStart      Number of row on which insertion started. <br>//             iRowCount      Number of rows inserted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::rowsAvailable(LONG iRowStart, LONG iRowCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iRowStart &gt;= 0); <br>    _ASSERT(iRowCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;rowsAvailable(iRowStart, iRowCount); <br>    return hr; <br>} <br> <br>// ;begin_internal <br>#ifdef NEVER <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    DeletedCols() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some columns <br>//             have been deleted. <br>// <br>//  Arguments: iColStart      Number of column on which deletion started. <br>//             iColCount      Number of columns deleted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::DeletedCols(LONG iColStart, LONG iColCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iColStart &gt; 0); <br>    _ASSERT(iColCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;DeletedColumns(iColStart, iColCount); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    InsertedCols() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that a some columns <br>//             have been inserted. <br>// <br>//  Arguments: iColStart      Number of column on which insertion started. <br>//             iColCount      Number of columns inserted. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::InsertedCols(LONG iColStart, LONG iColCount) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _ASSERT(iColStart &gt; 0); <br>    _ASSERT(iColCount &gt; 0); <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;InsertedColumns(iColStart, iColCount); <br>    return hr; <br>} <br>#endif <br>// ;end_internal <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    STDLoadStarted() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that the STD control <br>//             has begun loading its data. <br>// <br>//  Arguments: pBSC      Pointer to data-retrieval object. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::STDLoadStarted(CComObject&lt;CMyBindStatusCallback&lt;CTDCCtl&gt; &gt; *pBSC, boolean fAppending) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    m_pBSC = pBSC; <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    STDLoadCompleted() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that the STD control <br>//             has loaded all of its data. <br>//             Note this function should be idempotent -- i.e. it may be <br>//             called more than once in synchronous cases, once when the <br>//             transfer actually completes, and again as soon as the event <br>//             sink is actually hooked up in order to fire the transferComplete <br>//             event. <br>// <br>//  Arguments: None. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::STDLoadCompleted() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    m_pBSC = NULL; <br>    if (m_pSTDEvents != NULL) <br>        hr = m_pSTDEvents-&gt;transferComplete(OSPXFER_COMPLETE); <br>    UpdateReadyState(READYSTATE_COMPLETE); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    STDLoadStopped() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that the STD control <br>//             has aborted the data load operation. <br>// <br>//  Arguments: OSPXFER giving reason for stop <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::STDLoadStopped() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if (m_pBSC &amp;&amp; m_pBSC-&gt;m_spBinding) <br>    { <br>        hr = m_pBSC-&gt;m_spBinding-&gt;Abort(); <br>        m_pBSC = NULL; <br>    } <br> <br>    // Right now, any error results in not returning an STD object, <br>    // therefore we should not fire transfer complete. <br>    if (m_pSTDEvents) <br>        hr = m_pSTDEvents-&gt;transferComplete(OSPXFER_ABORT); <br> <br>    UpdateReadyState(READYSTATE_COMPLETE); <br> <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    STDLoadedHeader() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that the STD control <br>//             has loaded its header row. <br>// <br>//  Arguments: None. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::STDLoadedHeader() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    hr = STDDataSetChanged(); <br> <br>    UpdateReadyState(READYSTATE_INTERACTIVE); <br>    return hr; <br>} <br> <br>//------------------------------------------------------------------------ <br>// <br>//  Method:    STDSortFilterCompleted() <br>// <br>//  Synopsis:  Notifies anyone who wants to know that the STD control <br>//             has refiltered / resorted its data. <br>// <br>//  Returns:   S_OK upon success. <br>//             Error code upon failure. <br>// <br>//------------------------------------------------------------------------ <br> <br>STDMETHODIMP <br>CEventBroker::STDDataSetChanged() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if (m_pDataSourceListener != NULL) <br>        hr = m_pDataSourceListener-&gt;dataMemberChanged(NULL); <br>// ;begin_internal <br>    if (m_pDATASRCListener != NULL) <br>        hr = m_pDATASRCListener-&gt;datasrcChanged(NULL, TRUE); <br>// ;end_internal <br>    return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

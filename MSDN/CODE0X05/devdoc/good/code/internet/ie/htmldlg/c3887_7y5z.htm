<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTMLDLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3887"></a>HTMLDLG.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          HTMLDlg.cpp <br>    <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   Include Files <br>**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;urlmon.h&gt; <br>#include &lt;mshtmhst.h&gt; <br> <br>#define ARRAYSIZE(a)    (sizeof(a)/sizeof((a)[0])) <br> <br>int BSTRToLocal(LPTSTR pLocal, BSTR pWide, DWORD dwChars); <br>int LocalToBSTR(BSTR pWide, LPTSTR pLocal, DWORD dwChars); <br> <br>/************************************************************************** <br> <br>   WinMain() <br> <br>**************************************************************************/ <br> <br>int PASCAL WinMain(  HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance, <br>                     LPSTR lpCmdLine, <br>                     int nCmdShow) <br>{ <br>HINSTANCE   hinstMSHTML = LoadLibrary(TEXT("MSHTML.DLL")); <br> <br>if(hinstMSHTML) <br>   { <br>   SHOWHTMLDIALOGFN  *pfnShowHTMLDialog; <br>       <br>   pfnShowHTMLDialog = (SHOWHTMLDIALOGFN*)GetProcAddress(hinstMSHTML, TEXT("ShowHTMLDialog")); <br> <br>   if(pfnShowHTMLDialog) <br>      { <br>      IMoniker *pmk; <br>      TCHAR    szTemp[MAX_PATH*2]; <br>      OLECHAR  bstr[MAX_PATH*2]; <br> <br>      lstrcpy(szTemp, TEXT("res://")); <br>      GetModuleFileName(hInstance, szTemp + lstrlen(szTemp), ARRAYSIZE(szTemp) - lstrlen(szTemp)); <br>      lstrcat(szTemp, TEXT("/HTML_RESOURCE")); <br> <br>      LocalToBSTR(bstr, szTemp, ARRAYSIZE(bstr)); <br> <br>      CreateURLMoniker(NULL, bstr, &amp;pmk); <br> <br>      if(pmk) <br>         { <br>         HRESULT  hr; <br>         VARIANT  varArgs, varReturn; <br>          <br>         VariantInit(&amp;varReturn); <br> <br>         varArgs.vt = VT_BSTR; <br>         varArgs.bstrVal = SysAllocString(L"Argument 1;Argument 2;Argument 3;Argument 4"); <br> <br>         hr = (*pfnShowHTMLDialog)(NULL, pmk, &amp;varArgs, NULL, &amp;varReturn); <br> <br>         VariantClear(&amp;varArgs); <br>          <br>         pmk-&gt;Release(); <br> <br>         if(SUCCEEDED(hr)) <br>            { <br>            switch(varReturn.vt) <br>               { <br>               case VT_BSTR: <br>                  { <br>                  TCHAR szData[MAX_PATH]; <br> <br>                  BSTRToLocal(szData, varReturn.bstrVal, ARRAYSIZE(szData)); <br> <br>                  wsprintf(szTemp, TEXT("The selected item was \"%s\"."), szData); <br> <br>                  VariantClear(&amp;varReturn); <br>                  } <br>                  break; <br> <br>               default: <br>                  lstrcpy(szTemp, TEXT("Cancel was selected.")); <br>                  break; <br>               } <br>            MessageBox(NULL, szTemp, TEXT("HTML Dialog Sample"), MB_OK | MB_ICONINFORMATION); <br>            } <br>         else <br>            MessageBox(NULL, TEXT("ShowHTMLDialog Failed."), TEXT("HTML Dialog Sample"), MB_OK | MB_ICONERROR); <br>             <br>         } <br>      } <br>   FreeLibrary(hinstMSHTML); <br>   } <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   BSTRToLocal() <br>    <br>**************************************************************************/ <br> <br>int BSTRToLocal(LPTSTR pLocal, BSTR pWide, DWORD dwChars) <br>{ <br>*pLocal = 0; <br> <br>#ifdef UNICODE <br>lstrcpyn(pLocal, pWide, dwChars); <br>#else <br>WideCharToMultiByte( CP_ACP,  <br>                     0,  <br>                     pWide,  <br>                     -1,  <br>                     pLocal,  <br>dwChars,  <br>                     NULL,  <br>                     NULL); <br>#endif <br> <br>return lstrlen(pLocal); <br>} <br> <br>/************************************************************************** <br> <br>   LocalToBSTR() <br>    <br>**************************************************************************/ <br> <br>int LocalToBSTR(BSTR pWide, LPTSTR pLocal, DWORD dwChars) <br>{ <br>*pWide = 0; <br> <br>#ifdef UNICODE <br>lstrcpyn(pWide, pLocal, dwChars); <br>#else <br>MultiByteToWideChar( CP_ACP,  <br>                     0,  <br>                     pLocal,  <br>                     -1,  <br>                     pWide,  <br>                     dwChars);  <br>#endif <br> <br>return lstrlenW(pWide); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

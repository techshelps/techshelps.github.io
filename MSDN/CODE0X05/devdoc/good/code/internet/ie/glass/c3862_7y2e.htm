<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLASS.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3866"></a>GLASS.IDL</h2>
<pre><code>#include &lt;olectl.h&gt; <br>#include "DispIDs.h" <br>// Glass.idl : IDL source for Glass.dll <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (Glass.tlb) and marshalling code. <br>import "oaidl.idl"; <br>import "ocidl.idl"; <br> <br> <br> <br>[ <br>object, <br>uuid(32F4F486-7F80-11D0-B835-00A0C911837F), <br>dual, <br>helpstring("IGlassControl Interface"), <br>pointer_default(unique) <br>] <br>interface IGlassControl : IDispatch <br>{ <br>// properties <br>// <br>        [propget, id(DISPID_GLASS_LINEWIDTH)] <br>            HRESULT LineWidth([out, retval] long *plWidth); <br>        [propput, id(DISPID_GLASS_LINEWIDTH)] <br>            HRESULT LineWidth([in] long lWidth); <br>        [propget, id(DISPID_GLASS_BRIGHTNESS)] <br>            HRESULT Brightness([out, retval] long *plBrightness); <br>        [propput, id(DISPID_GLASS_BRIGHTNESS)] <br>            HRESULT Brightness([in] long lBrightness); <br>        [propget, id(DISPID_GLASS_DYNAMICFADE)] <br>            HRESULT DynamicFade([out, retval] long *plDynamicFade); <br>        [propput, id(DISPID_GLASS_DYNAMICFADE)] <br>            HRESULT DynamicFade([in] long lDynamicFade); <br>        [propget, id(DISPID_GLASS_FADEINTERVAL)] <br>            HRESULT FadeInterval([out, retval] long *plFadeInterval); <br>        [propput, id(DISPID_GLASS_FADEINTERVAL)] <br>            HRESULT FadeInterval([in] long lFadeInterval); <br>        [propget, id(DISPID_GLASS_FREEZE)] <br>            HRESULT Freeze([out, retval] long *plFreeze); <br>        [propput, id(DISPID_GLASS_FREEZE)] <br>            HRESULT Freeze([in] long lFreeze); <br>        [propget, id(DISPID_GLASS_ENABLED)] <br>            HRESULT Enabled([out, retval] long *plEnabled); <br>        [propput, id(DISPID_GLASS_ENABLED)] <br>            HRESULT Enabled([in] long lEnabled); <br> <br>        //methods <br>// <br>}; <br>[ <br>uuid(32F4F480-7F80-11D0-B835-00A0C911837F), <br>version(1.0), <br>helpstring("GlassControl 1.0 Type Library") <br>] <br>library GLASSLib <br>{ <br>importlib("stdole32.tlb"); <br>importlib("stdole2.tlb"); <br> <br> <br> <br>[ <br>uuid(234A2FA2-8039-11d0-B835-00A0C911837F), <br>helpstring("Event Interface for GlassControl") <br>] <br>dispinterface _GlassEvents <br>{ <br>properties: <br>methods: <br>// for some reason OLE_XPOS_PIXELS AND OLE_YPOS_PIXELS cause a compile error <br>[id(DISPID_MOUSEDOWN)]  <br>void OnMouseDown(short Button, short Shift, long x, long y); <br>[id(DISPID_MOUSEMOVE)]  <br>void OnMouseMove(short Button, short Shift, long x, long y); <br>[id(DISPID_MOUSEUP)]  <br>void OnMouseUp(short Button, short Shift, long x, long y); <br>}; <br> <br>[ <br>uuid(32F4F485-7F80-11D0-B835-00A0C911837F), <br>helpstring("GlassControl Class") <br>] <br>coclass GlassControl <br>{ <br>[default] interface IGlassControl; <br>[default,source] dispinterface _GlassEvents; <br>}; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLASSCTL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3868"></a>GLASSCTL.H</h2>
<pre><code>// GlassControl.h : Declaration of the CGlassControl <br> <br>#ifndef __GLASSCONTROL_H_ <br>#define __GLASSCONTROL_H_ <br> <br>#include "resource.h"       // main symbols <br>#include "CPGlass.h" <br>#include &lt;mshtml.h&gt;         // for ICSSFilter <br>#include &lt;ocmm.h&gt; <br>#include &lt;DDraw.H&gt; <br>#include &lt;DDrawEx.H&gt; <br> <br>typedef struct tagGLASSSTATE <br>{ <br> <br>    int         iWidth; <br>    int         Brightness; <br>    DWORD       DynamicFade;    // 0 = no fade, otherwise, value = interval <br>    int         FadeInterval;   // the change in brightness <br>    unsigned    fFreeze:1;          <br>    unsigned    fEnabled:1;     // CSSFilter state <br>    unsigned    fInvalid:1;     // get drawn the first time around <br>} GLASSSTATE; <br> <br>#define LEFT_BUTTON     0x01 <br>#define RIGHT_BUTTON    0x02 <br>#define MIDDLE_BUTTON   0x04 <br> <br>#define CHECK_POINTER(val) \ <br>    if (!(val) || IsBadWritePtr((void *)(val), sizeof(void *))) return E_POINTER <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CGlassControl <br>class ATL_NO_VTABLE CGlassControl :  <br>public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public CComCoClass&lt;CGlassControl, &amp;CLSID_GlassControl&gt;, <br>public CComControl&lt;CGlassControl&gt;, <br>public IDispatchImpl&lt;IGlassControl, &amp;IID_IGlassControl, &amp;LIBID_GLASSLib&gt;, <br>public IProvideClassInfo2Impl&lt;&amp;CLSID_GlassControl, &amp;DIID__GlassEvents, &amp;LIBID_GLASSLib&gt;, <br>public IPersistStreamInitImpl&lt;CGlassControl&gt;, <br>public IPersistStorageImpl&lt;CGlassControl&gt;, <br>public IPersistPropertyBagImpl&lt;CGlassControl&gt;, <br>public IQuickActivateImpl&lt;CGlassControl&gt;, <br>public IOleControlImpl&lt;CGlassControl&gt;, <br>public IOleObjectImpl&lt;CGlassControl&gt;, <br>public IOleInPlaceActiveObjectImpl&lt;CGlassControl&gt;, <br>public IViewObjectExImpl&lt;CGlassControl&gt;, <br>public IOleInPlaceObjectWindowlessImpl&lt;CGlassControl&gt;, <br>public IDataObjectImpl&lt;CGlassControl&gt;, <br>public ISpecifyPropertyPagesImpl&lt;CGlassControl&gt;, <br>    public CProxy_GlassEvents&lt;CGlassControl&gt;, <br>    public IConnectionPointContainerImpl&lt;CGlassControl&gt;, <br>    public IObjectSafetyImpl&lt;CGlassControl&gt;, <br>public IViewFilter, <br>public IViewFilterSite, <br>public ICSSFilter <br>{ <br>public: <br>    friend class CGlassControlSink; <br> <br>    CGlassControl(); <br>    ~CGlassControl(); <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_GLASSCONTROL) <br> <br>BEGIN_COM_MAP(CGlassControl) <br>COM_INTERFACE_ENTRY(IGlassControl) <br>COM_INTERFACE_ENTRY(IDispatch) <br>COM_INTERFACE_ENTRY_IMPL(IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject2, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleInPlaceObject, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleWindow, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceActiveObject) <br>COM_INTERFACE_ENTRY_IMPL(IOleControl) <br>COM_INTERFACE_ENTRY_IMPL(IOleObject) <br>COM_INTERFACE_ENTRY_IMPL(IQuickActivate) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStorage) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStreamInit) <br>COM_INTERFACE_ENTRY_IMPL(IPersistPropertyBag) <br>COM_INTERFACE_ENTRY_IMPL(ISpecifyPropertyPages) <br>COM_INTERFACE_ENTRY_IMPL(IDataObject) <br>COM_INTERFACE_ENTRY(IProvideClassInfo) <br>COM_INTERFACE_ENTRY(IProvideClassInfo2) <br>COM_INTERFACE_ENTRY_IMPL(IConnectionPointContainer) <br>COM_INTERFACE_ENTRY_IMPL(IObjectSafety) <br>COM_INTERFACE_ENTRY(IViewFilter) <br>COM_INTERFACE_ENTRY(IViewFilterSite) <br>COM_INTERFACE_ENTRY(ICSSFilter) <br>END_COM_MAP() <br> <br>BEGIN_CONNECTION_POINT_MAP(CGlassControl) <br>CONNECTION_POINT_ENTRY(DIID__GlassEvents) <br>END_CONNECTION_POINT_MAP() <br> <br>BEGIN_PROPERTY_MAP(CGlassControl) <br>// Example entries <br>// PROP_ENTRY("Property Description", dispid, clsid) <br>PROP_PAGE(CLSID_StockColorPage) <br>END_PROPERTY_MAP() <br> <br> <br>BEGIN_MSG_MAP(CGlassControl) <br>MESSAGE_HANDLER(WM_PAINT, OnPaint) <br>MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus) <br>MESSAGE_HANDLER(WM_KILLFOCUS, OnKillFocus) <br>    MESSAGE_RANGE_HANDLER(WM_MOUSEMOVE, WM_MBUTTONUP, OnMouse) <br>END_MSG_MAP() <br> <br> <br>// IViewObjectEx <br>#define VIEWSTATUS_SURFACE 16 <br>STDMETHOD(GetViewStatus)(DWORD* pdwStatus) <br>{ <br>ATLTRACE(_T("IViewObjectExImpl::GetViewStatus\n")); <br>*pdwStatus = VIEWSTATUS_DVASPECTTRANSPARENT | VIEWSTATUS_SURFACE; <br>return S_OK; <br>} <br> <br>// IGlassControl <br>public: <br>HRESULT OnDraw(ATL_DRAWINFO&amp; di); <br> <br>    // IViewObjectEX overrides <br>    STDMETHOD(QueryHitPoint)(DWORD dwAspect, LPCRECT pRectBounds, POINT ptlLoc, LONG lCloseHint, DWORD *pHitResult); <br>         <br>    // Event handling methods <br>    LRESULT OnMouse(UINT msg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br> <br>    // IGlass properties <br>    // <br>    STDMETHOD(get_LineWidth)(long FAR* plWidth); <br>    STDMETHOD(put_LineWidth)(long lWidth); <br>    STDMETHOD(get_Brightness)(long FAR* plBrightness); <br>    STDMETHOD(put_Brightness)(long lBrightness); <br>    STDMETHOD(get_DynamicFade)(long FAR* plDynamicFade); <br>    STDMETHOD(put_DynamicFade)(long lDynamicFade); <br>    STDMETHOD(get_FadeInterval)(long FAR* plFadeInterval); <br>    STDMETHOD(put_FadeInterval)(long lFadeInterval); <br>    STDMETHOD(get_Freeze)(long FAR* plFreeze); <br>    STDMETHOD(put_Freeze)(long lFreeze);       <br>    STDMETHOD(get_Enabled)(long FAR* plEnabled); <br>    STDMETHOD(put_Enabled)(long lEnabled);       <br> <br>    STDMETHOD(HandleOnTimer)( DWORD timeAdvise ); <br> <br>// IViewFilter <br>public: <br>    STDMETHOD(SetSource)(IViewFilter *pSource); <br>    STDMETHOD(GetSource)(IViewFilter **ppSource); <br>    STDMETHOD(SetSite)(IViewFilterSite *pSink); <br>    STDMETHOD(GetSite)(IViewFilterSite **ppSink); <br>    STDMETHOD(SetPosition)(LPCRECT prc); <br>    STDMETHOD(Draw)(HDC hdc, LPCRECT prcBounds); <br>    STDMETHOD(GetStatusBits)(DWORD *pdwFlags); <br> <br>// IViewFilterSite <br>public: <br>    STDMETHOD(GetDC)(LPCRECT prc, DWORD dwFlags, HDC *phdc); <br>    STDMETHOD(ReleaseDC)(HDC hdc); <br>    STDMETHOD(InvalidateRect)(LPCRECT prc, BOOL fErase); <br>    STDMETHOD(InvalidateRgn)(HRGN hrgn, BOOL fErase); <br>    STDMETHOD(OnStatusBitsChange)(DWORD dwFlags); <br> <br>// ICSSFilter methods <br>    STDMETHOD(SetSite)(ICSSFilterSite *pSite); <br>    STDMETHOD(OnAmbientPropertyChange)(DISPID dispid); <br> <br>// IPersistPropertyBag methods <br>STDMETHOD(Load)(IPropertyBag *pPropBag, IErrorLog *pErrorLog); <br> <br>// IObjectSafety methods <br>    STDMETHOD(GetInterfaceSafetyOptions)(REFIID riid,  <br>                                         DWORD *pdwSupportedOptions,  <br>                                         DWORD *pdwEnabledOptions); <br>STDMETHOD(SetInterfaceSafetyOptions)(REFIID riid,  <br>                                         DWORD dwOptionSetMask,  <br>                                         DWORD dwEnabledOptions); <br> <br> <br>    // private state information. <br>    // <br>    GLASSSTATE          m_state; <br>    IDirectDraw3        *m_pDirectDraw3; <br>    ITimer              *m_pTimer; <br>    CGlassControlSink   *m_pTimerSink; <br>    DWORD               m_TimerCookie; <br>    DWORD               m_timeLastAdvise; <br> <br>    IViewFilter         *m_pSource; <br>    IViewFilterSite     *m_pSite; <br>    RECT                m_rc; <br>    ICSSFilterSite      *m_pCSSSite; <br>}; <br> <br>class CGlassControlSink : public ITimerSink  <br>{ <br> <br>    friend class CGlassControl; <br> <br>  public: <br> <br>    CGlassControlSink( CGlassControl *pGC ) { m_pGC = pGC; m_cRefs = 0; } <br>    ~CGlassControlSink() { if ( m_pGC ) m_pGC-&gt;m_pTimerSink = NULL; } <br> <br>    // IUnknown methods <br>    STDMETHODIMP_(ULONG) AddRef(); <br>    STDMETHODIMP_(ULONG) Release(); <br>    STDMETHODIMP QueryInterface (REFIID iid, void **ppvObj); <br> <br>    // ITimerSink methods <br>    STDMETHOD(OnTimer)(VARIANT timeAdvise); <br> <br>  protected: <br>    ULONG               m_cRefs; <br>    CGlassControl      *m_pGC; <br>}; <br> <br>#endif //__GLASSCONTROL_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WABTOOLDLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3999"></a>WABTOOLDLG.CPP</h2>
<pre><code>// wabtoolDlg.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "wabtool.h" <br>#include "wabobject.h" <br>#include "wabtoolDlg.h" <br>#include "DlgProp.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>CWAB * g_pWAB; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutDlg dialog used for App About <br> <br>class CAboutDlg : public CDialog <br>{ <br>public: <br>CAboutDlg(); <br> <br>// Dialog Data <br>//{{AFX_DATA(CAboutDlg) <br>enum { IDD = IDD_ABOUTBOX }; <br>//}}AFX_DATA <br> <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CAboutDlg) <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br>protected: <br>//{{AFX_MSG(CAboutDlg) <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD) <br>{ <br>//{{AFX_DATA_INIT(CAboutDlg) <br>//}}AFX_DATA_INIT <br>} <br> <br>void CAboutDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutDlg) <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CAboutDlg, CDialog) <br>//{{AFX_MSG_MAP(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CWabtoolDlg dialog <br> <br>CWabtoolDlg::CWabtoolDlg(CWnd* pParent /*=NULL*/) <br>: CDialog(CWabtoolDlg::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CWabtoolDlg) <br>// NOTE: the ClassWizard will add member initialization here <br>//}}AFX_DATA_INIT <br>// Note that LoadIcon does not require a subsequent DestroyIcon in Win32 <br>m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME); <br>} <br> <br>void CWabtoolDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CWabtoolDlg) <br>// NOTE: the ClassWizard will add DDX and DDV calls here <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CWabtoolDlg, CDialog) <br>//{{AFX_MSG_MAP(CWabtoolDlg) <br>ON_WM_SYSCOMMAND() <br>ON_WM_PAINT() <br>ON_WM_QUERYDRAGICON() <br>ON_NOTIFY(NM_DBLCLK, IDC_LIST, OnDblclkList) <br>ON_BN_CLICKED(IDC_BUTTON_BROWSE, OnButtonBrowse) <br>ON_NOTIFY(LVN_ITEMCHANGED, IDC_LIST, OnItemchangedList) <br>ON_LBN_SELCHANGE(IDC_LIST_TAGS, OnSelchangeListTags) <br>ON_BN_CLICKED(IDC_BUTTON_DETAILS, OnButtonDetails) <br>ON_BN_CLICKED(IDC_BUTTON_NEW, OnButtonNew) <br>ON_BN_CLICKED(IDC_BUTTON_DELETE, OnButtonDelete) <br>ON_BN_CLICKED(IDC_BUTTON_ADDPROP, OnButtonAddprop) <br>ON_BN_CLICKED(IDC_BUTTON_MODIFYPROP, OnButtonModifyprop) <br>ON_LBN_DBLCLK(IDC_LIST_TAGS, OnDblclkListTags) <br>ON_BN_CLICKED(IDC_BUTTON_REFRESH, OnButtonRefresh) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CWabtoolDlg message handlers <br> <br>BOOL CWabtoolDlg::OnInitDialog() <br>{ <br>CDialog::OnInitDialog(); <br> <br>// Add "About..." menu item to system menu. <br> <br>// IDM_ABOUTBOX must be in the system command range. <br>ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX); <br>ASSERT(IDM_ABOUTBOX &lt; 0xF000); <br> <br>CMenu* pSysMenu = GetSystemMenu(FALSE); <br>if (pSysMenu != NULL) <br>{ <br>CString strAboutMenu; <br>strAboutMenu.LoadString(IDS_ABOUTBOX); <br>if (!strAboutMenu.IsEmpty()) <br>{ <br>pSysMenu-&gt;AppendMenu(MF_SEPARATOR); <br>pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu); <br>} <br>} <br> <br>// Set the icon for this dialog.  The framework does this automatically <br>//  when the application's main window is not a dialog <br>SetIcon(m_hIcon, TRUE);// Set big icon <br>SetIcon(m_hIcon, FALSE);// Set small icon <br> <br>// TODO: Add extra initialization here <br>    InitCommonControls(); <br> <br>    LoadContents(TRUE); <br> <br>return TRUE;  // return TRUE  unless you set the focus to a control <br>} <br> <br>void CWabtoolDlg::OnSysCommand(UINT nID, LPARAM lParam) <br>{ <br>if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX) <br>{ <br>CAboutDlg dlgAbout; <br>dlgAbout.DoModal(); <br>} <br>else <br>{ <br>CDialog::OnSysCommand(nID, lParam); <br>} <br>} <br> <br>// If you add a minimize button to your dialog, you will need the code below <br>//  to draw the icon.  For MFC applications using the document/view model, <br>//  this is automatically done for you by the framework. <br> <br>void CWabtoolDlg::OnPaint()  <br>{ <br>if (IsIconic()) <br>{ <br>CPaintDC dc(this); // device context for painting <br> <br>SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0); <br> <br>// Center icon in client rectangle <br>int cxIcon = GetSystemMetrics(SM_CXICON); <br>int cyIcon = GetSystemMetrics(SM_CYICON); <br>CRect rect; <br>GetClientRect(&amp;rect); <br>int x = (rect.Width() - cxIcon + 1) / 2; <br>int y = (rect.Height() - cyIcon + 1) / 2; <br> <br>// Draw the icon <br>dc.DrawIcon(x, y, m_hIcon); <br>} <br>else <br>{ <br>CDialog::OnPaint(); <br>} <br>} <br> <br>// The system calls this to obtain the cursor to display while the user drags <br>//  the minimized window. <br>HCURSOR CWabtoolDlg::OnQueryDragIcon() <br>{ <br>return (HCURSOR) m_hIcon; <br>} <br> <br>BOOL CWabtoolDlg::DestroyWindow()  <br>{ <br>// TODO: Add your specialized code here and/or call the base class <br>    ClearCurrentWAB(TRUE); <br>     <br>return CDialog::DestroyWindow(); <br>} <br> <br>// <br>// Double-clicking the contents list view shows Details on the  <br>// selected entries <br>// <br>void CWabtoolDlg::OnDblclkList(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>    g_pWAB-&gt;ShowSelectedItemDetails(m_hWnd); <br> <br>*pResult = 0; <br>} <br> <br>// <br>// Clicking the browse button lets the user select a new WAB file <br>// to inspect <br>// <br>void CWabtoolDlg::OnButtonBrowse()  <br>{ <br> <br>    char szFilters[]="WAB Files (*.wab)|*.wab|All Files (*.*)|*.*||"; <br>    CFileDialog CFileDlg (TRUE, "wab", "*.wab", <br>                        OFN_FILEMUSTEXIST, szFilters, this); <br> <br>    if(CFileDlg.DoModal() == IDOK) <br>    { <br>        delete m_pszFileName; <br>        m_pszFileName = new CString(CFileDlg.GetPathName()); <br> <br>        ClearCurrentWAB(TRUE); <br>     <br>        LoadContents(TRUE); <br> <br>    } <br>} <br> <br>// Loads the WAB contents into the list view <br>//  <br>// bLoadNew is true if we are loading a new file <br>// <br>void CWabtoolDlg::LoadContents(BOOL bLoadNew) <br>{ <br> <br>    CListCtrl * pListView = (CListCtrl *) GetDlgItem(IDC_LIST); <br> <br>    if(bLoadNew) <br>        g_pWAB = new CWAB(m_pszFileName); <br> <br>    g_pWAB-&gt;LoadWABContents(pListView); <br> <br>    CStatic * pFileName = (CStatic *) GetDlgItem(IDC_STATIC_FILENAME); <br>    pFileName-&gt;SetWindowText((LPTSTR) (LPCTSTR) *m_pszFileName); <br> <br>    TCHAR sz[256]; <br>    wsprintf(sz, "%d entries", pListView-&gt;GetItemCount()); <br>    CStatic * pCount = (CStatic *) GetDlgItem(IDC_STATIC_NUMENTRIES); <br>    pCount-&gt;SetWindowText(sz); <br> <br>    // select the first item in the list view <br>    pListView-&gt;SetItem( 0, 0, <br>                        LVIF_STATE,NULL, <br>                        0, <br>                        LVNI_SELECTED | LVNI_FOCUSED, <br>                        LVNI_SELECTED | LVNI_FOCUSED, <br>                        NULL); <br> <br>} <br> <br>// <br>// Clear out the currently loaded WAB <br>// <br>void CWabtoolDlg::ClearCurrentWAB(BOOL bLoadNew) <br>{ <br>    CListCtrl * pListView = (CListCtrl *) GetDlgItem(IDC_LIST); <br>    g_pWAB-&gt;ClearWABLVContents(pListView); <br>     <br>    if(bLoadNew) // we'll be loading a new address book so lose this object <br>        delete g_pWAB; <br>} <br> <br>void CWabtoolDlg::OnItemchangedList(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR; <br> <br>    CListCtrl * pListView = (CListCtrl *) GetDlgItem(IDC_LIST); <br> <br>    static int oldItem = -1; <br> <br>    int newItem = pListView-&gt;GetNextItem(-1, LVNI_SELECTED); <br> <br>    if(newItem != oldItem &amp;&amp; newItem != -1) <br>    { <br>        g_pWAB-&gt;SetSelection(pListView); <br>        g_pWAB-&gt;GetSelectedItemPropArray(); <br> <br>        UpdatePropTagData(); <br> <br>        OnSelchangeListTags(); <br> <br>        oldItem = newItem; <br>    } <br> <br>*pResult = 0; <br>} <br> <br>void CWabtoolDlg::UpdatePropTagData() <br>{ <br>    g_pWAB-&gt;LoadPropTags((CListBox *) GetDlgItem(IDC_LIST_TAGS)); <br>} <br> <br>void CWabtoolDlg::OnSelchangeListTags()  <br>{ <br>    TCHAR sz[64]; <br> <br>    CListBox * pList = (CListBox *) GetDlgItem(IDC_LIST_TAGS); <br> <br>    ULONG ulPropTag = (ULONG) pList-&gt;GetItemData(pList-&gt;GetCurSel()); <br> <br>    pList-&gt;GetText(pList-&gt;GetCurSel(), sz); <br> <br>    SetPropTagString(sz); <br>    SetPropTypeString(ulPropTag); <br>    SetPropNameString(ulPropTag); <br>    SetPropDataString(ulPropTag); <br> <br>} <br> <br>LPTSTR PropTypeString(ULONG ulPropType) { <br>    switch (ulPropType) { <br>        case PT_UNSPECIFIED: <br>            return("PT_UNSPECIFIED"); <br>        case PT_NULL: <br>            return("PT_NULL       "); <br>        case PT_I2: <br>            return("PT_I2         "); <br>        case PT_LONG: <br>            return("PT_LONG       "); <br>        case PT_R4: <br>            return("PT_R4         "); <br>        case PT_DOUBLE: <br>            return("PT_DOUBLE     "); <br>        case PT_CURRENCY: <br>            return("PT_CURRENCY   "); <br>        case PT_APPTIME: <br>            return("PT_APPTIME    "); <br>        case PT_ERROR: <br>            return("PT_ERROR      "); <br>        case PT_BOOLEAN: <br>            return("PT_BOOLEAN    "); <br>        case PT_OBJECT: <br>            return("PT_OBJECT     "); <br>        case PT_I8: <br>            return("PT_I8         "); <br>        case PT_STRING8: <br>            return("PT_STRING8    "); <br>        case PT_UNICODE: <br>            return("PT_UNICODE    "); <br>        case PT_SYSTIME: <br>            return("PT_SYSTIME    "); <br>        case PT_CLSID: <br>            return("PT_CLSID      "); <br>        case PT_BINARY: <br>            return("PT_BINARY     "); <br>        case PT_MV_I2: <br>            return("PT_MV_I2      "); <br>        case PT_MV_LONG: <br>            return("PT_MV_LONG    "); <br>        case PT_MV_R4: <br>            return("PT_MV_R4      "); <br>        case PT_MV_DOUBLE: <br>            return("PT_MV_DOUBLE  "); <br>        case PT_MV_CURRENCY: <br>            return("PT_MV_CURRENCY"); <br>        case PT_MV_APPTIME: <br>            return("PT_MV_APPTIME "); <br>        case PT_MV_SYSTIME: <br>            return("PT_MV_SYSTIME "); <br>        case PT_MV_STRING8: <br>            return("PT_MV_STRING8 "); <br>        case PT_MV_BINARY: <br>            return("PT_MV_BINARY  "); <br>        case PT_MV_UNICODE: <br>            return("PT_MV_UNICODE "); <br>        case PT_MV_CLSID: <br>            return("PT_MV_CLSID   "); <br>        case PT_MV_I8: <br>            return("PT_MV_I8      "); <br>        default: <br>            return("   &lt;unknown&gt;  "); <br>    } <br>} <br> <br>void CWabtoolDlg::SetPropTypeString(ULONG ulPropTag) <br>{ <br>    ((CStatic *) GetDlgItem(IDC_STATIC_PROPTYPE))-&gt;SetWindowText(PropTypeString(PROP_TYPE(ulPropTag))); <br>} <br> <br>void CWabtoolDlg::SetPropTagString(LPTSTR lpTag) <br>{ <br>    ((CStatic *) GetDlgItem(IDC_STATIC_PROPTAG))-&gt;SetWindowText(lpTag); <br>} <br> <br>void CWabtoolDlg::OnButtonDetails()  <br>{ <br>    g_pWAB-&gt;ShowSelectedItemDetails(m_hWnd); <br>    // refresh the list view <br>    OnButtonRefresh(); <br>} <br> <br>#define RETURN_PROP_CASE(pt) case PROP_ID(pt): return(#pt) <br> <br>/*************************************************************************** <br> <br>    Name      : PropTagName <br> <br>    Purpose   : Associate a name with a property tag <br> <br>    Parameters: ulPropTag = property tag <br> <br>    Returns   : none <br> <br>    Comment   : Add new Property ID's as they become known <br> <br>***************************************************************************/ <br>LPTSTR PropTagName(ULONG ulPropTag) { <br>    static TCHAR szPropTag[35]; // see string on default <br> <br>    switch (PROP_ID(ulPropTag)) { <br>        RETURN_PROP_CASE(PR_7BIT_DISPLAY_NAME); <br>        RETURN_PROP_CASE(PR_ACCOUNT); <br>        RETURN_PROP_CASE(PR_ADDRTYPE); <br>        RETURN_PROP_CASE(PR_ALTERNATE_RECIPIENT); <br>        RETURN_PROP_CASE(PR_ASSISTANT); <br>        RETURN_PROP_CASE(PR_ASSISTANT_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_BIRTHDAY); <br>        RETURN_PROP_CASE(PR_BUSINESS_FAX_NUMBER); <br>        RETURN_PROP_CASE(PR_BUSINESS_HOME_PAGE); <br>        RETURN_PROP_CASE(PR_BUSINESS_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_BUSINESS2_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_CALLBACK_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_CAR_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_CELLULAR_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_CHILDRENS_NAMES); <br>        RETURN_PROP_CASE(PR_COMMENT); <br>        RETURN_PROP_CASE(PR_COMPANY_MAIN_PHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_COMPANY_NAME); <br>        RETURN_PROP_CASE(PR_COMPUTER_NETWORK_NAME); <br>        RETURN_PROP_CASE(PR_CONTACT_ADDRTYPES); <br>        RETURN_PROP_CASE(PR_CONTACT_DEFAULT_ADDRESS_INDEX); <br>        RETURN_PROP_CASE(PR_CONTACT_EMAIL_ADDRESSES); <br>        RETURN_PROP_CASE(PR_CONTACT_ENTRYIDS); <br>        RETURN_PROP_CASE(PR_CONTACT_VERSION); <br>        RETURN_PROP_CASE(PR_CONVERSION_PROHIBITED); <br>        RETURN_PROP_CASE(PR_COUNTRY); <br>        RETURN_PROP_CASE(PR_CUSTOMER_ID); <br>        RETURN_PROP_CASE(PR_DEPARTMENT_NAME); <br>        RETURN_PROP_CASE(PR_DISCLOSE_RECIPIENTS); <br>        RETURN_PROP_CASE(PR_DISPLAY_NAME); <br>        RETURN_PROP_CASE(PR_DISPLAY_NAME_PREFIX); <br>        RETURN_PROP_CASE(PR_EMAIL_ADDRESS); <br>        RETURN_PROP_CASE(PR_ENTRYID); <br>        RETURN_PROP_CASE(PR_FTP_SITE); <br>        RETURN_PROP_CASE(PR_GENDER); <br>        RETURN_PROP_CASE(PR_GENERATION); <br>        RETURN_PROP_CASE(PR_GIVEN_NAME); <br>        RETURN_PROP_CASE(PR_GOVERNMENT_ID_NUMBER); <br>        RETURN_PROP_CASE(PR_HOBBIES); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_CITY); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_COUNTRY); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_POST_OFFICE_BOX); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_POSTAL_CODE); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_STATE_OR_PROVINCE); <br>        RETURN_PROP_CASE(PR_HOME_ADDRESS_STREET); <br>        RETURN_PROP_CASE(PR_HOME_FAX_NUMBER); <br>        RETURN_PROP_CASE(PR_HOME_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_HOME2_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_INITIALS); <br>        RETURN_PROP_CASE(PR_ISDN_NUMBER); <br>        RETURN_PROP_CASE(PR_KEYWORD); <br>        RETURN_PROP_CASE(PR_LANGUAGE); <br>        RETURN_PROP_CASE(PR_LOCALITY); <br>        RETURN_PROP_CASE(PR_LOCATION); <br>        RETURN_PROP_CASE(PR_MAIL_PERMISSION); <br>        RETURN_PROP_CASE(PR_MANAGER_NAME); <br>        RETURN_PROP_CASE(PR_MHS_COMMON_NAME); <br>        RETURN_PROP_CASE(PR_MIDDLE_NAME); <br>        RETURN_PROP_CASE(PR_NICKNAME); <br>        RETURN_PROP_CASE(PR_OBJECT_TYPE); <br>        RETURN_PROP_CASE(PR_OFFICE_LOCATION); <br>        RETURN_PROP_CASE(PR_ORGANIZATIONAL_ID_NUMBER); <br>        RETURN_PROP_CASE(PR_ORIGINAL_DISPLAY_NAME); <br>        RETURN_PROP_CASE(PR_ORIGINAL_ENTRYID); <br>        RETURN_PROP_CASE(PR_ORIGINAL_SEARCH_KEY); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_CITY); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_COUNTRY); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_POST_OFFICE_BOX); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_POSTAL_CODE); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_STATE_OR_PROVINCE); <br>        RETURN_PROP_CASE(PR_OTHER_ADDRESS_STREET); <br>        RETURN_PROP_CASE(PR_OTHER_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_PAGER_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_PERSONAL_HOME_PAGE); <br>        RETURN_PROP_CASE(PR_POST_OFFICE_BOX); <br>        RETURN_PROP_CASE(PR_POSTAL_ADDRESS); <br>        RETURN_PROP_CASE(PR_POSTAL_CODE); <br>        RETURN_PROP_CASE(PR_PREFERRED_BY_NAME); <br>        RETURN_PROP_CASE(PR_PRIMARY_FAX_NUMBER); <br>        RETURN_PROP_CASE(PR_PRIMARY_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_PROFESSION); <br>        RETURN_PROP_CASE(PR_RADIO_TELEPHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_SEND_INTERNET_ENCODING); <br>        RETURN_PROP_CASE(PR_SEND_RICH_INFO); <br>        RETURN_PROP_CASE(PR_SPOUSE_NAME); <br>        RETURN_PROP_CASE(PR_STATE_OR_PROVINCE); <br>        RETURN_PROP_CASE(PR_STREET_ADDRESS); <br>        RETURN_PROP_CASE(PR_SURNAME); <br>        RETURN_PROP_CASE(PR_TELEX_NUMBER); <br>        RETURN_PROP_CASE(PR_TITLE); <br>        RETURN_PROP_CASE(PR_TRANSMITABLE_DISPLAY_NAME); <br>        RETURN_PROP_CASE(PR_TTYTDD_PHONE_NUMBER); <br>        RETURN_PROP_CASE(PR_USER_CERTIFICATE); <br>        RETURN_PROP_CASE(PR_USER_X509_CERTIFICATE); <br>        RETURN_PROP_CASE(PR_WEDDING_ANNIVERSARY); <br>        RETURN_PROP_CASE(PR_SEARCH_KEY); <br> <br>        default: <br>            wsprintf(szPropTag, "Unknown property tag 0x%x", PROP_ID(ulPropTag)); <br>            return(szPropTag); <br>    } <br>} <br> <br> <br>void CWabtoolDlg::SetPropNameString(ULONG ulPropTag) <br>{ <br>    LPTSTR lp = PropTagName(ulPropTag); <br> <br>    CStatic * pType = (CStatic *) GetDlgItem(IDC_STATIC_PROPNAME); <br> <br>    pType-&gt;SetWindowText(lp); <br>} <br> <br> <br>void CWabtoolDlg::SetPropDataString(ULONG ulPropTag) <br>{ <br>    CEdit * pEdit = (CEdit *) GetDlgItem(IDC_EDIT_PROPDATA); <br>     <br>    g_pWAB-&gt;SetPropString(pEdit, ulPropTag); <br>} <br> <br>void CWabtoolDlg::OnButtonNew()  <br>{ <br> <br>    HRESULT hr = g_pWAB-&gt;ShowNewEntryDialog(m_hWnd); <br> <br>    if(!hr) <br>        OnButtonRefresh(); <br>} <br> <br>void CWabtoolDlg::OnButtonDelete()  <br>{ <br>    g_pWAB-&gt;DeleteEntry(); <br>    // refresh the list view <br>    OnButtonRefresh(); <br>} <br> <br>void CWabtoolDlg::OnButtonAddprop()  <br>{ <br>    TCHAR sz[512]; <br>    *sz = '\0'; <br>    CDlgProp dlgProp; <br> <br>    dlgProp.m_ulPropTag = 0; <br>    dlgProp.m_lpszPropVal = sz; <br>    dlgProp.m_cbsz = sizeof(sz); <br> <br>    if(dlgProp.DoModal()) <br>    { <br>        g_pWAB-&gt;SetSingleStringProp(m_hWnd, dlgProp.m_ulPropTag, sz); <br>        UpdatePropTagData(); <br>        OnSelchangeListTags(); <br>    } <br> <br>} <br> <br>void CWabtoolDlg::OnButtonModifyprop()  <br>{ <br> <br>    CListBox * pList = (CListBox *) GetDlgItem(IDC_LIST_TAGS); <br> <br>    ULONG ulPropTag = (ULONG) pList-&gt;GetItemData(pList-&gt;GetCurSel()); <br> <br>    TCHAR sz[512]; <br> <br>    if(g_pWAB-&gt;GetStringPropVal(m_hWnd, ulPropTag, sz, sizeof(sz))) <br>    { <br>        CDlgProp dlgProp; <br> <br>        dlgProp.m_ulPropTag = ulPropTag; <br>        dlgProp.m_lpszPropVal = sz; <br>        dlgProp.m_cbsz = sizeof(sz); <br> <br>        if(dlgProp.DoModal()) <br>        { <br>            g_pWAB-&gt;SetSingleStringProp(m_hWnd, ulPropTag, sz); <br>            UpdatePropTagData(); <br>            OnSelchangeListTags(); <br>        } <br> <br> <br>    } <br> <br>} <br> <br>void CWabtoolDlg::OnDblclkListTags()  <br>{ <br>    OnButtonModifyprop(); <br>} <br> <br>void CWabtoolDlg::OnButtonRefresh()  <br>{ <br>    // refresh the list view <br>    ClearCurrentWAB(FALSE); <br>    LoadContents(FALSE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTTPAUTH.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4006"></a>HTTPAUTH.CPP</h2>
<pre><code>// =========================================================================== <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;fcntl.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;wininet.h&gt; <br> <br>//============================================================================== <br>BOOL NeedAuth (HINTERNET hRequest) <br>{ <br>    // Get status code. <br>    DWORD dwStatus; <br>    DWORD cbStatus = sizeof(dwStatus); <br>    HttpQueryInfo <br>    ( <br>        hRequest, <br>        HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_STATUS_CODE, <br>        &amp;dwStatus, <br>        &amp;cbStatus, <br>        NULL <br>    ); <br>    fprintf (stderr, "Status: %d\n", dwStatus); <br> <br>    // Look for 401 or 407. <br>    DWORD dwFlags; <br>    switch (dwStatus) <br>    { <br>        case HTTP_STATUS_DENIED: <br>            dwFlags = HTTP_QUERY_WWW_AUTHENTICATE; <br>            break; <br>        case HTTP_STATUS_PROXY_AUTH_REQ: <br>            dwFlags = HTTP_QUERY_PROXY_AUTHENTICATE; <br>            break;             <br>        default: <br>            return FALSE; <br>    } <br> <br>    // Enumerate the authentication types. <br>    BOOL fRet; <br>    char szScheme[64]; <br>    DWORD dwIndex = 0; <br>    do <br>    { <br>        DWORD cbScheme = sizeof(szScheme); <br>        fRet = HttpQueryInfo <br>            (hRequest, dwFlags, szScheme, &amp;cbScheme, &amp;dwIndex); <br>        if (fRet) <br>            fprintf (stderr, "Found auth scheme: %s\n", szScheme); <br>    } <br>        while (fRet); <br> <br>    return TRUE; <br>} <br> <br> <br>//============================================================================== <br>DWORD DoCustomUI (HINTERNET hConnect, HINTERNET hRequest) <br>{ <br>    // Prompt for username and password. <br>    char  szUser[64], szPass[64]; <br>    fprintf (stderr, "Enter Username: "); <br>    if (!fscanf (stdin, "%s", szUser)) <br>        return ERROR_INTERNET_LOGIN_FAILURE; <br>    fprintf (stderr, "Enter Password: "); <br>    if (!fscanf (stdin, "%s", szPass)) <br>        return ERROR_INTERNET_LOGIN_FAILURE; <br> <br>    // Set the values in the handle. <br>    InternetSetOption <br>        (hConnect, INTERNET_OPTION_USERNAME, szUser, sizeof(szUser)); <br>    InternetSetOption <br>        (hConnect, INTERNET_OPTION_PASSWORD, szPass, sizeof(szPass)); <br> <br>    // Drain the socket. <br>    BYTE bBuf[1000]; <br>    DWORD cbBuf = sizeof(bBuf); <br>    DWORD cbRead; <br>    while (InternetReadFile (hRequest, bBuf, cbBuf, &amp;cbRead) &amp;&amp; cbRead); <br>     <br>    return ERROR_INTERNET_FORCE_RETRY; <br>} <br> <br> <br>//============================================================================== <br>int main (int argc, char **argv) <br>{ <br>    HINTERNET hInternet = NULL; <br>    HINTERNET hConnect  = NULL; <br>    HINTERNET hRequest  = NULL; <br>    PSTR pszErr = NULL; <br>    BOOL fRet; <br>     <br>#define CHECK_ERROR(cond, err) if (!(cond)) {pszErr=(err); goto done;} <br> <br>    // Check usage. <br>    if (argc &lt; 2) <br>    { <br>        fprintf (stderr, "Usage:   httpauth [-c] &lt;server&gt; [&lt;object&gt; [&lt;user&gt; [&lt;pass&gt;]]]\n"); <br>        fprintf (stderr, "  -c: Use custom UI to prompt for user/pass"); <br>        exit (1); <br>    } <br> <br>    // Parse arguments. <br>    BOOL fAllowCustomUI = FALSE; <br>    if (argc &gt;= 2 &amp;&amp; argv[1][0] == '-') <br>    { <br>        fAllowCustomUI = TRUE; <br>        argv++; <br>        argc--; <br>    } <br>    PSTR pszHost   = argv[1]; <br>    PSTR pszObject = argc &gt;= 3 ? argv[2] : "/"; <br>    PSTR pszUser   = argc &gt;= 4 ? argv[3] : NULL; <br>    PSTR pszPass   = argc &gt;= 5 ? argv[4] : NULL; <br> <br>    // Initialize wininet. <br>    hInternet = InternetOpen <br>    ( <br>        "HttpAuth Sample",            // app name <br>        INTERNET_OPEN_TYPE_PRECONFIG, // access type <br>        NULL,                         // proxy server <br>        0,                            // proxy port <br>        0                             // flags <br>    ); <br>    CHECK_ERROR (hInternet, "InternetOpen"); <br> <br>    // Connect to host. <br>    hConnect = InternetConnect <br>    ( <br>        hInternet,                    // wininet handle, <br>        pszHost,                      // host <br>        0,                            // port <br>        pszUser,                      // user <br>        NULL,                         // pass <br>        INTERNET_SERVICE_HTTP,        // service <br>        0,                            // flags <br>        0                             // context <br>    ); <br>    CHECK_ERROR (hConnect, "InternetConnect"); <br> <br>    if (pszPass) <br>    { <br>        // Work around InternetConnect disallowing empty passwords. <br>        InternetSetOption (hConnect, INTERNET_OPTION_PASSWORD, <br>            pszPass, lstrlen(pszPass)+1); <br>    } <br>     <br>    // Create request. <br>    hRequest = HttpOpenRequest <br>    ( <br>        hConnect,                     // connect handle <br>        "GET",                        // request method <br>        pszObject,                    // object name <br>        NULL,                         // version <br>        NULL,                         // referer <br>        NULL,                         // accept types <br>        INTERNET_FLAG_KEEP_CONNECTION // flags: keep-alive <br>             | INTERNET_FLAG_RELOAD,  // flags: bypass cache <br>        0                             // context <br>    ); <br>    CHECK_ERROR (hRequest, "HttpOpenRequest"); <br> <br>resend: <br> <br>    // Send request. <br>    fRet = HttpSendRequest <br>    ( <br>        hRequest,                     // request handle <br>        "",                           // header string <br>        0,                            // header length <br>        NULL,                         // post data <br>        0                             // post length <br>    ); <br> <br>    // Handle any authentication dialogs. <br>    if (NeedAuth(hRequest) &amp;&amp; fAllowCustomUI) <br>    { <br>        if (DoCustomUI (hConnect, hRequest) == ERROR_INTERNET_FORCE_RETRY) <br>            goto resend; <br>    } <br>    else <br>    { <br>        DWORD dwErr; <br>        dwErr = InternetErrorDlg <br>        ( <br>            GetDesktopWindow(),                      <br>            hRequest,                                <br>            fRet ? ERROR_SUCCESS : GetLastError(),                          <br>            FLAGS_ERROR_UI_FILTER_FOR_ERRORS  |      <br>                FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS | <br>                FLAGS_ERROR_UI_FLAGS_GENERATE_DATA,  <br>            NULL <br>        ); <br> <br>        if (dwErr == ERROR_INTERNET_FORCE_RETRY) <br>            goto resend; <br>    } <br> <br>    // Dump some bytes. <br>    BYTE bBuf[1024]; <br>    DWORD cbBuf; <br>    DWORD cbRead; <br>    cbBuf = sizeof(bBuf); <br>    _setmode( _fileno( stdout ), _O_BINARY ); <br>    while (InternetReadFile (hRequest, bBuf, cbBuf, &amp;cbRead) &amp;&amp; cbRead) <br>        fwrite (bBuf, 1, cbRead, stdout); <br>     <br>done: // Clean up. <br> <br>    if (pszErr) <br>        fprintf (stderr, "Failed on %s, last error %d\n", pszErr, GetLastError()); <br>    if (hRequest) <br>        InternetCloseHandle (hRequest); <br>    if (hConnect) <br>        InternetCloseHandle (hConnect); <br>    if (hInternet) <br>        InternetCloseHandle (hInternet); <br>    return 0; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

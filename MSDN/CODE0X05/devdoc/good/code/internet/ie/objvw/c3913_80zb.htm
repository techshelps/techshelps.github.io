<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJVWCTL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3917"></a>OBJVWCTL.H</h2>
<pre><code>// ObjVwCtl.h : Declaration of the CObjVw <br> <br>#ifndef __OBJVW_H_ <br>#define __OBJVW_H_ <br> <br>#include "resource.h"       // main symbols <br>#include &lt;commctrl.h&gt; <br> <br>#import "mshtml.dll"  <br>#import "shdocvw.dll" exclude("tagREADYSTATE") <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CObjVw <br>class ATL_NO_VTABLE CObjVw : <br>public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public CComCoClass&lt;CObjVw,&amp;CLSID_ObjVw&gt;, <br>public CComControl&lt;CObjVw&gt;, <br>public IDispatchImpl&lt;IObjVw, &amp;IID_IObjVw, &amp;LIBID_OBJVWLib&gt;, <br>public IDispatchImpl&lt;DWebBrowserEvents2, &amp;IID_DWebBrowserEvents2, &amp;LIBID_OBJVWLib&gt;, <br>public IPersistStreamInitImpl&lt;CObjVw&gt;, <br>public IOleControlImpl&lt;CObjVw&gt;, <br>public IOleObjectImpl&lt;CObjVw&gt;, <br>public IOleInPlaceActiveObjectImpl&lt;CObjVw&gt;, <br>public IViewObjectExImpl&lt;CObjVw&gt;, <br>public ISupportErrorInfo, <br>public IConnectionPointContainerImpl&lt;CObjVw&gt;, <br>public IOleInPlaceObjectWindowlessImpl&lt;CObjVw&gt;, <br>public IObjectSafetyImpl&lt;CObjVw&gt; <br>{ <br>public: <br>CContainedWindow m_ctlSysTreeView32; <br>SHDocVw::IWebBrowserPtr m_spWebBrowser; <br>DWORD m_dwAdviseCookie; <br> <br> <br>CObjVw() : <br>m_ctlSysTreeView32(_T("SysTreeView32"), this, 1) <br>{ <br>m_bWindowOnly = TRUE;  <br>m_dwAdviseCookie = 0; <br>} <br> <br>void EnumFrames(); <br>void RecurseWindows(MSHTML::IHTMLDocument2Ptr spDocument, LPVOID pvTreeParent = NULL); <br>void GetPageContents(MSHTML::IHTMLDocument2Ptr spDocument, LPVOID pvTreeParent); <br>bool CObjVw::GetControlInfo(IUnknownPtr spUnk, LPSTR szClassInfo); <br> <br>bool InsertTreeItem(LPTSTR pszItemText, LPVOID pvTreeParent, LPVOID* ppvTree); <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_OBJVW) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CObjVw)  <br>COM_INTERFACE_ENTRY2(IDispatch, IObjVw) <br>COM_INTERFACE_ENTRY_IID(IID_IObjVw, IObjVw) <br>COM_INTERFACE_ENTRY_IID(IID_DWebBrowserEvents2, DWebBrowserEvents2) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject2, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL(IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleWindow, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleInPlaceObject, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceActiveObject) <br>COM_INTERFACE_ENTRY_IMPL(IOleControl) <br>COM_INTERFACE_ENTRY_IMPL(IOleObject) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStreamInit) <br>COM_INTERFACE_ENTRY(ISupportErrorInfo) <br>COM_INTERFACE_ENTRY_IMPL(IConnectionPointContainer) <br>COM_INTERFACE_ENTRY_IMPL(IObjectSafety) <br>END_COM_MAP() <br> <br>BEGIN_PROPERTY_MAP(CObjVw) <br>// Example entries <br>// PROP_ENTRY("Property Description", dispid, clsid) <br>// PROP_PAGE(CLSID_StockColorPage) <br>END_PROPERTY_MAP() <br> <br> <br>BEGIN_CONNECTION_POINT_MAP(CObjVw) <br>END_CONNECTION_POINT_MAP() <br> <br> <br>BEGIN_MSG_MAP(CObjVw) <br>MESSAGE_HANDLER(WM_PAINT, OnPaint) <br>MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus) <br>MESSAGE_HANDLER(WM_KILLFOCUS, OnKillFocus) <br>MESSAGE_HANDLER(WM_CREATE, OnCreate) <br>ALT_MSG_MAP(1) <br>// Replace this with message map entries for subclassed SysTreeView32 <br>END_MSG_MAP() <br> <br>LRESULT OnCreate(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled) <br>{ <br>RECT rc; <br>GetWindowRect(&amp;rc); <br>rc.right -= rc.left; <br>rc.bottom -= rc.top; <br>rc.top = rc.left = 0; <br> <br>m_ctlSysTreeView32.Create(m_hWnd, rc, _T(""),  <br>WS_VISIBLE | WS_CHILD | WS_BORDER | TVS_HASLINES | TVS_HASBUTTONS); <br> <br>return 0; <br>} <br>STDMETHOD(SetObjectRects)(LPCRECT prcPos,LPCRECT prcClip) <br>{ <br>IOleInPlaceObjectWindowlessImpl&lt;CObjVw&gt;::SetObjectRects(prcPos, prcClip); <br>int cx, cy; <br>cx = prcPos-&gt;right - prcPos-&gt;left; <br>cy = prcPos-&gt;bottom - prcPos-&gt;top; <br>::SetWindowPos(m_ctlSysTreeView32.m_hWnd, NULL, 0, <br>0, cx, cy, SWP_NOZORDER | SWP_NOACTIVATE); <br>return S_OK; <br>} <br> <br>STDMETHOD(SetClientSite)(IOleClientSite* pClientSite); <br> <br>// ISupportsErrorInfo <br>STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid); <br> <br>// IViewObjectEx <br>STDMETHOD(GetViewStatus)(DWORD* pdwStatus) <br>{ <br>ATLTRACE(_T("IViewObjectExImpl::GetViewStatus\n")); <br>*pdwStatus = VIEWSTATUS_SOLIDBKGND | VIEWSTATUS_OPAQUE; <br>return S_OK; <br>} <br> <br>// IObjVw <br>public: <br>HRESULT OnDraw(ATL_DRAWINFO&amp; di); <br> <br>// DWebBrowserEvents2 <br>public: <br>STDMETHOD(Recalc)(); <br>STDMETHOD(StatusTextChange)(BSTR Text); <br>STDMETHOD(ProgressChange)(long Progress, long ProgressMax); <br>STDMETHOD(CommandStateChange)(long Command, VARIANT_BOOL Enable); <br>STDMETHOD(DownloadBegin)(); <br>STDMETHOD(DownloadComplete)(); <br>STDMETHOD(TitleChange)(BSTR Text); <br>STDMETHOD(PropertyChange)(BSTR szProperty); <br>STDMETHOD(BeforeNavigate2)(IDispatch* pDisp, VARIANT* URL, VARIANT* Flags,  <br>VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers,  <br>VARIANT_BOOL* Cancel); <br>STDMETHOD(NewWindow2)(IDispatch** ppDisp, VARIANT_BOOL* Cancel); <br>STDMETHOD(NavigateComplete2)(IDispatch* pDisp, VARIANT* URL); <br>STDMETHOD(DocumentComplete)(IDispatch* pDisp, VARIANT* URL); <br>STDMETHOD(OnQuit)(); <br>STDMETHOD(OnVisible)(VARIANT_BOOL Visible); <br>STDMETHOD(OnToolBar)(VARIANT_BOOL ToolBar); <br>STDMETHOD(OnMenuBar)(VARIANT_BOOL MenuBar); <br>STDMETHOD(OnStatusBar)(VARIANT_BOOL StatusBar); <br>STDMETHOD(OnFullScreen)(VARIANT_BOOL FullScreen); <br>STDMETHOD(OnTheaterMode)(VARIANT_BOOL TheaterMode); <br>}; <br> <br>#endif //__OBJVW_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

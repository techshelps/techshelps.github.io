<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3913"></a>README.TXT</h2>
<pre><code>//------------------------------------------------------------------------- <br>// Readme.txt <br>//------------------------------------------------------------------------- <br>// Objvw: A sample that illustrates using IE's Automation and scripting interfaces <br>// from a contained control <br>//------------------------------------------------------------------------- <br>// (C) Copyright 1992-1996 by Microsoft Corporation.  All rights reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//------------------------------------------------------------------------- <br> <br>PURPOSE <br>======= <br> <br>This sample has been updated for IE4.0. It no longer uses the Base Control  <br>framework.  For the sake of simplicity, the sample is not backwards compatible  <br>with IE 3.X.  The original ObjVw sample can be referenced for information on  <br>the IE 3.0 object model. <br> <br>   - illustrates accessing IE's Automation model and scripting model from within a  <br>     contained ATL control.   <br> <br>   - illustrates enumerating all ActiveX controls and links in a page and sub  <br>     pages.  This includes an algorithm for recursively enumerating floating  <br>     frames and framesets. <br> <br>   - illustrate implementing an event sink in a ATL control. <br> <br>   - illustrates using the DocumentComplete event to identify when pages have been  <br>     completely loaded.  DocumentComplete is fired for each frame in a document. <br>     DocumentComplete returns the IDispatch for the document that has completed  <br>     loading.  The outermost frame will always fire last so by comparing the  <br>     IDispatch pointer returned by DocumentComplete with the IDispatch of the  <br>     outer frame, it is possible to tell when all frames have completely loaded. <br> <br>   - Illustrates marking an ATL control "Safe for scripting". <br> <br>FILES SUPPLIED <br>============== <br>     This is a standard VC 5.0 project.  All code relevant to the sample is located  <br>     in ObjVwCtl.cpp and ObjVwCtl.h. <br> <br>RUNNING THE SAMPLE <br>================== <br>     Compile the sample with VC 5.0 ( this will also register the control ).  Open  <br>     the file TestCtl.htm.  This file contains an instance of the control and links  <br>     to several test pages.   <br> <br>SINKING EVENTS <br>============== <br>     This ATL control directly implements the DWebBrowserEvents2 interface.  An  <br>     alternative approach would be to implement the sink as a separate object and  <br>     use CComObject::CreateObject to instantiate the sink.  The event sink is  <br>     connected and disconnected in the CObjVw::SetClientSite function.  <br>      <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

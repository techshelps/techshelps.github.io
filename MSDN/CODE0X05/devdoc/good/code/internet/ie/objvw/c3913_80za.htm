<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJVWCTL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3916"></a>OBJVWCTL.CPP</h2>
<pre><code>// ObjVwCtl.cpp : Implementation of CObjVw <br>#include "stdafx.h" <br>#include "ObjVw.h" <br>#include "ObjVwCtl.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CObjVw <br> <br>STDMETHODIMP CObjVw::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IObjVw, <br>}; <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br>HRESULT CObjVw::SetClientSite(IOleClientSite *pClientSite) <br>{ <br>HRESULT hr = S_OK; <br> <br>if(NULL != pClientSite) <br>{ <br>ATLTRACE(_T("SetClientSite called\n")); <br> <br>if(m_spClientSite) <br>m_spClientSite-&gt;Release(); <br> <br>m_spClientSite = pClientSite;  // This AddRefs the client site <br>} <br>else <br>{ <br>_ASSERT(0 != m_dwAdviseCookie); <br>_ASSERT(m_spWebBrowser != NULL); <br> <br>ATLTRACE(_T("SetClientSite NULL called\n")); <br> <br>hr = AtlUnadvise( m_spWebBrowser, __uuidof(SHDocVw::DWebBrowserEvents2),  <br>m_dwAdviseCookie ); <br> <br>m_spWebBrowser.Release(); <br> <br>returnS_OK; <br>} <br> <br>try <br>{ <br>IServiceProviderPtr spSP((LPOLECLIENTSITE)m_spClientSite); <br> <br>if(NULL == spSP) <br>return hr; <br> <br>spSP-&gt;QueryService(__uuidof(SHDocVw::IWebBrowserApp),  <br>__uuidof(SHDocVw::IWebBrowser2), (void**)&amp;m_spWebBrowser); <br> <br>hr = AtlAdvise(m_spWebBrowser, GetControllingUnknown(),  <br>__uuidof(SHDocVw::DWebBrowserEvents2), &amp;m_dwAdviseCookie); <br>} <br>catch(...) <br>{ <br>return S_FALSE; <br>} <br> <br>return hr; <br>} <br> <br>HRESULT CObjVw::OnDraw(ATL_DRAWINFO&amp; di) <br>{ <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::Recalc() <br>{ <br>EnumFrames(); <br>return S_OK; <br>} <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CIEDriveView message handlers <br> <br>void CObjVw::EnumFrames()  <br>{ <br>// Empty the tree view <br>TreeView_DeleteAllItems(m_ctlSysTreeView32.m_hWnd); <br> <br>try <br>{ <br>MSHTML::IHTMLDocument2Ptr spDocument(m_spWebBrowser-&gt;GetDocument()); <br>RecurseWindows(spDocument); <br>} <br>catch(_com_error Error) <br>{ <br>ATLTRACE(Error.ErrorMessage()); <br>} <br>catch(...) <br>{ <br>ATLTRACE(_T("Unspecified exception thrown in OnTestEnumlinks\n")); <br>} <br> <br>HTREEITEM hFirst = TreeView_GetRoot(m_ctlSysTreeView32.m_hWnd);  <br>TreeView_Expand(m_ctlSysTreeView32.m_hWnd, hFirst, TVE_EXPAND);  <br>} <br> <br>void CObjVw::RecurseWindows(MSHTML::IHTMLDocument2Ptr spDocument, LPVOID pvTreeParent) <br>{ <br>// I am passing in a pointer to the parent node to insert items in the Tree View. <br>// Obviously this is specific to this application and has little to do with  <br>// enumerating frames in a document. <br> <br>LPVOID ppvTree = NULL; <br> <br>if(spDocument == NULL) <br>// Not an HTLM document <br>return; <br> <br>try <br>{ <br>// Insert a root node for this page.   <br>_bstr_t bstrDocTitle = spDocument-&gt;Gettitle(); <br> <br>_bstr_t bstrNoTitle(""); <br>if(bstrDocTitle == bstrNoTitle) <br>bstrDocTitle = "Untitled Document"; <br> <br>InsertTreeItem(bstrDocTitle, pvTreeParent, &amp;ppvTree);  <br> <br>// Find out if this page has a "BODY".  If it does, it will not have a  <br>// &lt;FRAMESET&gt; but may still have a floating frame. <br> <br>MSHTML::IHTMLElementPtr spBodyElement = spDocument-&gt;Getbody(); <br> <br>_bstr_t bstrBody("BODY"); <br>_bstr_t bstrTagName = spBodyElement-&gt;GettagName(); <br> <br>if(bstrBody == bstrTagName) <br>{ <br>ATLTRACE(_T("Found a body\n")); <br> <br>GetPageContents(spDocument, ppvTree); <br>} <br> <br>MSHTML::IHTMLFramesCollection2Ptr spFrameset = spDocument-&gt;Getframes(); <br> <br>for(long i = 0; i &lt; spFrameset-&gt;Getlength(); i++) <br>{ <br>_variant_t va(i, VT_I4); <br> <br>MSHTML::IHTMLWindow2Ptr spWindow2Next = spFrameset-&gt;item(&amp;va); <br>MSHTML::IHTMLDocument2Ptr spNextDocPtr; <br>try <br>{ <br>// This will die in the case of a cross frame security violation. <br>// It would be a security risk to allow a page to access the contents  <br>// of a page in another domain or zone. <br> <br>spNextDocPtr = spWindow2Next-&gt;Getdocument(); <br>} <br>catch(_com_error Error) <br>{ <br>HRESULT hr = 0x80070005; <br> <br>ATLTRACE(Error.ErrorMessage()); <br>if(hr == Error.Error()) <br>InsertTreeItem(_T("Page - Access Denied"), ppvTree, NULL);  <br> <br>continue; <br>} <br>catch(...) <br>{ <br>ATLTRACE(_T("Unspecified exception thrown in RecurseWindows\n")); <br>continue; <br>} <br> <br>RecurseWindows(spNextDocPtr, ppvTree); <br>} <br>} <br>catch(_com_error Error) <br>{ <br>ATLTRACE(Error.ErrorMessage()); <br>} <br>catch(...) <br>{ <br>ATLTRACE(_T("Unspecified exception thrown in RecurseWindows\n")); <br>} <br>} <br> <br>void CObjVw::GetPageContents(MSHTML::IHTMLDocument2Ptr spDocument, LPVOID pvTreeParent) <br>{ <br>try <br>{ <br>MSHTML::IHTMLElementPtr spAnElement; <br>MSHTML::IHTMLElementCollectionPtr spAllElements = spDocument-&gt;Getall(); <br> <br>for(long i = 0; i &lt; spAllElements-&gt;Getlength(); i++) <br>{ <br>_variant_t va(i, VT_I4); <br>spAnElement = spAllElements-&gt;item(va); <br> <br>_bstr_t bstrIsControl("OBJECT"); <br>_bstr_t bstrIsLink("A"); <br>_bstr_t bstrTagName = spAnElement-&gt;GettagName(); <br> <br>if(bstrTagName == bstrIsControl) <br>{ <br>// This will get you any ActiveX controls in a page.  It is possible  <br>// to call methods and properties of the  control off the IHTMLElementPtr. <br> <br>////This is for illustration only <br>//{ <br>//OLECHAR* rgwzCaption[] = {OLESTR("Caption")}; <br>//DISPID rgdispidCaption[1]; <br>// <br>//_bstr_t bstrLabel1("Label1"); <br>//if(spAnElement-&gt;Getid() == bstrLabel1) <br>//{ <br>//IDispatchPtr pDispatch(spAnElement); <br>//HRESULT hr = pDispatch-&gt;GetIDsOfNames(IID_NULL, rgwzCaption, 1,  <br>//LOCALE_SYSTEM_DEFAULT, rgdispidCaption); <br>// <br>//if(SUCCEEDED(hr)) <br>//{ <br>//// You would call Invoke at this point <br>//} <br>//} <br>//} <br> <br>_bstr_t bstrTagID("ActiveX Control - "); <br>bstrTagID += spAnElement-&gt;Getid(); <br> <br>InsertTreeItem(bstrTagID, pvTreeParent, NULL);  <br>} <br>if(bstrTagName == bstrIsLink) <br>{ <br>MSHTML::IHTMLAnchorElementPtr spAnchor(spAnElement); <br>_bstr_t bstrHref = spAnchor-&gt;Gethref(); <br>InsertTreeItem(bstrHref, pvTreeParent, NULL);  <br>} <br>} <br>} <br>catch(_com_error Error) <br>{ <br>ATLTRACE(Error.ErrorMessage()); <br>} <br>catch(...) <br>{ <br>ATLTRACE(_T("Unspecified exception thrown in GetPageContents\n")); <br>} <br>} <br> <br>bool CObjVw::InsertTreeItem(LPTSTR pszItemText, LPVOID pvTreeParent, LPVOID* ppvTree) <br>{ <br>    TV_ITEM         tvitem; <br>    TV_INSERTSTRUCT tvis; <br>    HTREEITEM*      ppTree = (HTREEITEM*)ppvTree; <br>    HTREEITEM       pTreeParent = (HTREEITEM)pvTreeParent; <br>    HTREEITEM       pretTree; <br> <br>    tvitem.mask = TVIF_TEXT; <br>    tvitem.pszText = pszItemText; <br>    tvitem.cchTextMax = _tcslen(pszItemText); <br>    tvis.item = tvitem; <br>    tvis.hInsertAfter = (HTREEITEM)TVI_LAST; <br>    tvis.hParent = pTreeParent; <br> <br>    pretTree = (HTREEITEM)::SendMessage(m_ctlSysTreeView32.m_hWnd, TVM_INSERTITEM, 0, (LPARAM)&amp;tvis); <br>    if(!pretTree) <br>        return false; <br>     <br>    if ( ppvTree ) <br>        (*ppvTree) = (LPVOID)pretTree; <br> <br>    return true; <br>} <br> <br>// DWebBrowserEvents2 <br> <br>STDMETHODIMP CObjVw::StatusTextChange(BSTR Text) <br>{ <br>ATLTRACE(_T("StatusTextChange called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::ProgressChange(long Progress, long ProgressMax) <br>{ <br>ATLTRACE(_T("ProgressChange called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::CommandStateChange(long Command, VARIANT_BOOL Enable) <br>{ <br>ATLTRACE(_T("CommandStateChange called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::DownloadBegin() <br>{ <br>ATLTRACE(_T("DownloadBegin called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::DownloadComplete() <br>{ <br>ATLTRACE(_T("DownloadComplete called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::TitleChange(BSTR Text) <br>{ <br>ATLTRACE(_T("TitleChange called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::PropertyChange(BSTR szProperty) <br>{ <br>ATLTRACE(_T("PropertyChange called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::BeforeNavigate2(IDispatch* pDisp, VARIANT* URL, VARIANT* Flags,  <br>VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers,  <br>VARIANT_BOOL* Cancel) <br>{ <br>ATLTRACE(_T("BeforeNavigate2 called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::NewWindow2(IDispatch** ppDisp, VARIANT_BOOL* Cancel) <br>{ <br>ATLTRACE(_T("NewWindow2 called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::NavigateComplete2(IDispatch* pDisp, VARIANT* URL) <br>{ <br>ATLTRACE(_T("NavigateComplete2 called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::DocumentComplete(IDispatch* pDisp, VARIANT* URL) <br>{ <br>// DocumentComplete is fired for each frame that has completed loading. <br>// The outer most frame will fire last. <br> <br>ATLTRACE(_T("DocumentComplete called\n")); <br> <br>if(m_spWebBrowser == pDisp) <br>{ <br>EnumFrames(); <br>} <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnQuit() <br>{ <br>ATLTRACE(_T("OnQuit called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnVisible(VARIANT_BOOL Visible) <br>{ <br>ATLTRACE(_T("OnVisible called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnToolBar(VARIANT_BOOL ToolBar) <br>{ <br>ATLTRACE(_T("OnToolBar called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnMenuBar(VARIANT_BOOL MenuBar) <br>{ <br>ATLTRACE(_T("OnMenuBar called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnStatusBar(VARIANT_BOOL StatusBar) <br>{ <br>ATLTRACE(_T("OnStatusBar called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnFullScreen(VARIANT_BOOL FullScreen) <br>{ <br>ATLTRACE(_T("OnFullScreen called\n")); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CObjVw::OnTheaterMode(VARIANT_BOOL TheaterMode) <br>{ <br>ATLTRACE(_T("OnTheaterMode called\n")); <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

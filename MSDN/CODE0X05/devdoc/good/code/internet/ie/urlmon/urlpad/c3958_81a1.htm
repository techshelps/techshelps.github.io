<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAGESET.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3979"></a>PAGESET.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// PageSet.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the CPageSetup class <br>// <br> <br>#include "stdafx.h" <br>#include "superpad.h" <br>#include &lt;malloc.h&gt; <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPageSetupDlg dialog <br> <br>IMPLEMENT_DYNAMIC(CPageSetupDlg, CDialog) <br> <br>CPageSetupDlg::CPageSetupDlg(CWnd* pParent /*=NULL*/) <br>: CDialog(CPageSetupDlg::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CPageSetupDlg) <br>m_iFooterTime = -1; <br>m_iHeaderTime = -1; <br>//}}AFX_DATA_INIT <br>} <br> <br>void CPageSetupDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CPageSetupDlg) <br>DDX_Text(pDX, IDC_FOOTER, m_strFooter); <br>DDX_Text(pDX, IDC_HEADER, m_strHeader); <br>DDX_Radio(pDX, IDC_FOOTER_FILE, m_iFooterTime); <br>DDX_Radio(pDX, IDC_HEADER_FILE, m_iHeaderTime); <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CPageSetupDlg, CDialog) <br>//{{AFX_MSG_MAP(CPageSetupDlg) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPageSetup member functions <br> <br>static void Replace(CString&amp; strModify, LPCTSTR pszWhat, LPCTSTR pszWith) <br>// replace pszWhat with pwzWith in string strModify <br>{ <br>int i; <br>if ((i = strModify.Find(pszWhat)) &gt;= 0) <br>{ <br>strModify = strModify.Left(i) + pszWith + <br>strModify.Mid(i+lstrlen(pszWhat)); <br>} <br>} <br> <br>void CPageSetupDlg::FormatFilePage(CString&amp; strFormat, <br>LPCTSTR pszFileName, UINT nPage) <br>{ <br>TCHAR sz[32]; <br>wsprintf(sz, _T("%d"), nPage); <br>::Replace(strFormat, _T("&amp;p"), sz); <br>if (pszFileName == NULL) <br>{ <br>pszFileName = sz; <br>sz[0] = 0; <br>} <br>::Replace(strFormat, _T("&amp;f"), pszFileName); <br>} <br> <br>void CPageSetupDlg::FormatHeader(CString&amp; strHeader, CTime&amp; time, <br>LPCTSTR pszFileName, UINT nPage) <br>{ <br>CString strFormat = m_strHeader; <br>FormatFilePage(strFormat, pszFileName, nPage); <br>#ifdef _UNICODE <br>int nLen = strFormat.GetLength(); <br>char *pszFormat = (char*)_alloca(nLen+1); <br>wcstombs(pszFormat, strFormat, nLen+1); <br>strHeader = time.Format(pszFormat); <br>#else <br>strHeader = time.Format(strFormat); <br>#endif <br>} <br> <br>void CPageSetupDlg::FormatFooter(CString&amp; strFooter, CTime&amp; time, <br>LPCTSTR pszFileName, UINT nPage) <br>{ <br>CString strFormat = m_strFooter; <br>FormatFilePage(strFormat, pszFileName, nPage); <br>#ifdef _UNICODE <br>int nLen = strFormat.GetLength(); <br>char *pszFormat = (char*)_alloca(nLen+1); <br>wcstombs(pszFormat, strFormat, nLen+1); <br>strFooter = time.Format(pszFormat); <br>#else <br>strFooter = time.Format(strFormat); <br>#endif <br>} <br> <br> <br>static TCHAR BASED_CODE szPageSetup[] = _T("PageSetup"); <br>static TCHAR BASED_CODE szHeader[] = _T("Header"); <br>static TCHAR BASED_CODE szFooter[] = _T("Footer"); <br>static TCHAR BASED_CODE szHeaderTime[] = _T("HeaderTime"); <br>static TCHAR BASED_CODE szFooterTime[] = _T("FooterTime"); <br> <br>void CPageSetupDlg::Initialize() <br>{ <br>m_strHeader = AfxGetApp()-&gt;GetProfileString(szPageSetup, szHeader, <br>_T("File: &amp;f")); <br>m_strFooter = AfxGetApp()-&gt;GetProfileString(szPageSetup, szFooter, <br>_T("Page: &amp;p")); <br>m_iHeaderTime = AfxGetApp()-&gt;GetProfileInt(szPageSetup, szHeaderTime, 0); <br>m_iFooterTime = AfxGetApp()-&gt;GetProfileInt(szPageSetup, szFooterTime, 0); <br>m_strHeaderOld = m_strHeader; <br>m_strFooterOld = m_strFooter; <br>m_iHeaderTimeOld = m_iHeaderTime; <br>m_iFooterTimeOld = m_iFooterTime; <br>} <br> <br>void CPageSetupDlg::Terminate() <br>{ <br>if (m_strHeader != m_strHeaderOld) <br>AfxGetApp()-&gt;WriteProfileString(szPageSetup, szHeader, m_strHeader); <br>if (m_strFooter != m_strFooterOld) <br>AfxGetApp()-&gt;WriteProfileString(szPageSetup, szFooter, m_strFooter); <br>if (m_iHeaderTime != m_iHeaderTimeOld) <br>AfxGetApp()-&gt;WriteProfileInt(szPageSetup, szHeaderTime, m_iHeaderTime); <br>if (m_iFooterTime != m_iFooterTimeOld) <br>AfxGetApp()-&gt;WriteProfileInt(szPageSetup, szFooterTime, m_iFooterTime); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPageSetupDlg message handlers </code></pre>
<p>&nbsp;</p></body>
</HTML>

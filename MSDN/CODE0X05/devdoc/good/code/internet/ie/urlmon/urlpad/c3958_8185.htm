<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPFRAME.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3965"></a>IPFRAME.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// IPFrame.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the CInPlaceFrame class <br>// <br> <br>#include "stdafx.h" <br>#include "superpad.h" <br>#include "ipframe.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CInPlaceFrame <br> <br>IMPLEMENT_DYNCREATE(CInPlaceFrame, COleIPFrameWnd) <br> <br>BEGIN_MESSAGE_MAP(CInPlaceFrame, COleIPFrameWnd) <br>//{{AFX_MSG_MAP(CInPlaceFrame) <br>ON_WM_CREATE() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// arrays of IDs used to initialize control bars <br> <br>// toolbar buttons - IDs are command buttons <br>static UINT BASED_CODE buttons[] = <br>{ <br>// same order as in the bitmap 'toolbar.bmp' <br>ID_EDIT_CUT, <br>ID_EDIT_COPY, <br>ID_EDIT_PASTE, <br>ID_SEPARATOR, <br>ID_APP_ABOUT, <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CInPlaceFrame construction/destruction <br> <br>CInPlaceFrame::CInPlaceFrame() <br>{ <br>} <br> <br>CInPlaceFrame::~CInPlaceFrame() <br>{ <br>} <br> <br>int CInPlaceFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>if (COleIPFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>if (!m_wndResizeBar.Create(this)) <br>{ <br>TRACE0("Failed to create resize bar\n"); <br>return -1;      // fail to create <br>} <br>return 0; <br>} <br> <br>// OnCreateControlBars is called by the framework to create control <br>//  bars on the client applications windows. <br>BOOL CInPlaceFrame::OnCreateControlBars(CWnd* pWndFrame, CWnd* /*pWndDoc*/) <br>{ <br>// create toolbar on client's frame window <br>if (!m_wndToolBar.Create(pWndFrame) || <br>!m_wndToolBar.LoadBitmap(IDR_TEXTTYPE_INPLACE) || <br>!m_wndToolBar.SetButtons(buttons, <br>  sizeof(buttons)/sizeof(UINT))) <br>{ <br>TRACE0("Failed to create toolbar\n"); <br>return FALSE; <br>} <br> <br>// set owner to this window, so messages are delivered to correct app <br>m_wndToolBar.SetOwner(this); <br>return TRUE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CInPlaceFrame diagnostics <br> <br>#ifdef _DEBUG <br>void CInPlaceFrame::AssertValid() const <br>{ <br>COleIPFrameWnd::AssertValid(); <br>} <br> <br>void CInPlaceFrame::Dump(CDumpContext&amp; dc) const <br>{ <br>COleIPFrameWnd::Dump(dc); <br>} <br> <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CInPlaceFrame commands </code></pre>
<p>&nbsp;</p></body>
</HTML>

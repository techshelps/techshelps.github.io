<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3969"></a>MAINFRM.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// MainFrm.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the CMainFrame class <br>// <br> <br>#include "stdafx.h" <br>#include "superpad.h" <br>#include "mainfrm.h" <br> <br> <br>IMPLEMENT_DYNCREATE(CMainFrame, CMDIFrameWnd) <br>BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd) <br>//{{AFX_MSG_MAP(CMainFrame) <br>ON_WM_CREATE() <br>ON_WM_CLOSE() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>static UINT BASED_CODE buttons[] = <br>{ <br>// same order as in the bitmap 'toolbar.bmp' <br>ID_FILE_NEW, ID_FILE_OPEN, ID_FILE_SAVE, 0, <br>ID_EDIT_CUT, ID_EDIT_COPY, ID_EDIT_PASTE, 0, <br>ID_FILE_PRINT, ID_APP_ABOUT, <br>}; <br> <br>static UINT BASED_CODE indicators[] = <br>{ <br>0, ID_INDICATOR_CAPS, ID_INDICATOR_NUM, ID_INDICATOR_SCRL, <br>}; <br> <br>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>if (CMDIFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br>if (!m_wndToolBar.Create(this) || <br>!m_wndToolBar.LoadBitmap(IDR_MAINFRAME) || <br>!m_wndToolBar.SetButtons(buttons, sizeof(buttons)/sizeof(UINT))) <br>{ <br>return -1;      // fail to create <br>} <br>if (!m_wndStatusBar.Create(this) || <br>!m_wndStatusBar.SetIndicators(indicators, <br>sizeof(indicators)/sizeof(UINT))) <br>{ <br>return -1;      // fail to create <br>} <br>return 0; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Helpers for saving/restoring window state <br> <br>static TCHAR BASED_CODE szSection[] = _T("Settings"); <br>static TCHAR BASED_CODE szWindowPos[] = _T("WindowPos"); <br>static TCHAR szFormat[] = _T("%u,%u,%d,%d,%d,%d,%d,%d,%d,%d"); <br> <br>static BOOL PASCAL NEAR ReadWindowPlacement(LPWINDOWPLACEMENT pwp) <br>{ <br>CString strBuffer = AfxGetApp()-&gt;GetProfileString(szSection, szWindowPos); <br>if (strBuffer.IsEmpty()) <br>return FALSE; <br> <br>WINDOWPLACEMENT wp; <br>int nRead = _stscanf(strBuffer, szFormat, <br>&amp;wp.flags, &amp;wp.showCmd, <br>&amp;wp.ptMinPosition.x, &amp;wp.ptMinPosition.y, <br>&amp;wp.ptMaxPosition.x, &amp;wp.ptMaxPosition.y, <br>&amp;wp.rcNormalPosition.left, &amp;wp.rcNormalPosition.top, <br>&amp;wp.rcNormalPosition.right, &amp;wp.rcNormalPosition.bottom); <br> <br>if (nRead != 10) <br>return FALSE; <br> <br>wp.length = sizeof wp; <br>*pwp = wp; <br>return TRUE; <br>} <br> <br>static void PASCAL NEAR WriteWindowPlacement(LPWINDOWPLACEMENT pwp) <br>// write a window placement to settings section of app's ini file <br>{ <br>TCHAR szBuffer[sizeof("-32767")*8 + sizeof("65535")*2]; <br> <br>wsprintf(szBuffer, szFormat, <br>pwp-&gt;flags, pwp-&gt;showCmd, <br>pwp-&gt;ptMinPosition.x, pwp-&gt;ptMinPosition.y, <br>pwp-&gt;ptMaxPosition.x, pwp-&gt;ptMaxPosition.y, <br>pwp-&gt;rcNormalPosition.left, pwp-&gt;rcNormalPosition.top, <br>pwp-&gt;rcNormalPosition.right, pwp-&gt;rcNormalPosition.bottom); <br>AfxGetApp()-&gt;WriteProfileString(szSection, szWindowPos, szBuffer); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br>void CMainFrame::InitialShowWindow(UINT nCmdShow) <br>{ <br>WINDOWPLACEMENT wp; <br>if (!ReadWindowPlacement(&amp;wp)) <br>{ <br>ShowWindow(nCmdShow); <br>return; <br>} <br>if (nCmdShow != SW_SHOWNORMAL) <br>wp.showCmd = nCmdShow; <br>SetWindowPlacement(&amp;wp); <br>ShowWindow(wp.showCmd); <br>} <br> <br>void CMainFrame::OnClose() <br>{ <br>// before it is destroyed, save the position of the window <br>WINDOWPLACEMENT wp; <br>wp.length = sizeof wp; <br>if (GetWindowPlacement(&amp;wp)) <br>{ <br>wp.flags = 0; <br>if (IsZoomed()) <br>wp.flags |= WPF_RESTORETOMAXIMIZED; <br>// and write it to the .INI file <br>WriteWindowPlacement(&amp;wp); <br>} <br> <br>CMDIFrameWnd::OnClose(); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// MyShowPane( LPCSTR text ) <br>// This displays the progress notification on the status bar <br>void CMainFrame::MyShowPane( LPCSTR text ) <br>{  <br>    m_wndStatusBar.SetPaneText(0,text,TRUE) ; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

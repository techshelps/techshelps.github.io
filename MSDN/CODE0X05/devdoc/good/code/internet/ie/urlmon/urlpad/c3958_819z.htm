<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PADVIEW.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3977"></a>PADVIEW.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// PadView.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the CPadView class <br>// <br> <br>#include "stdafx.h" <br>#include "superpad.h" <br>#include "padview.h" <br>#include "paditem.h" <br>#include "linkitem.h" <br>#include "tabstop.h" <br>#include &lt;afxpriv.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView <br> <br>IMPLEMENT_DYNCREATE(CPadView, CEditView) <br> <br>BEGIN_MESSAGE_MAP(CPadView, CEditView) <br>//{{AFX_MSG_MAP(CPadView) <br>ON_WM_CREATE() <br>ON_COMMAND(ID_CHOOSE_FONT, OnChooseFont) <br>ON_COMMAND(ID_WORD_WRAP, OnWordWrap) <br>ON_UPDATE_COMMAND_UI(ID_WORD_WRAP, OnUpdateWordWrap) <br>ON_WM_RBUTTONDOWN() <br>ON_COMMAND(ID_CHOOSE_PRINT_FONT, OnChoosePrintFont) <br>ON_COMMAND(ID_MIRROR_DISPLAY_FONT, OnMirrorDisplayFont) <br>ON_UPDATE_COMMAND_UI(ID_MIRROR_DISPLAY_FONT, OnUpdateMirrorDisplayFont) <br>ON_UPDATE_COMMAND_UI(ID_CHOOSE_PRINT_FONT, OnUpdateChoosePrintFont) <br>ON_WM_SIZE() <br>ON_CONTROL_REFLECT(EN_CHANGE, OnEditChange) <br>ON_COMMAND(ID_EDIT_COPY, OnEditCopy) <br>ON_COMMAND(ID_EDIT_CUT, OnEditCut) <br>ON_WM_TIMER() <br>//}}AFX_MSG_MAP <br>ON_COMMAND(ID_FILE_PRINT_PREVIEW, CView::OnFilePrintPreview) <br> <br>#ifndef _MAC <br>ON_COMMAND(ID_SET_TABSTOPS, OnSetTabStops) <br>#endif <br> <br>END_MESSAGE_MAP() <br> <br>UINT CPadView::m_nDefTabStops; <br>UINT CPadView::m_nDefTabStopsOld; <br>BOOL CPadView::m_bDefWordWrap; <br>BOOL CPadView::m_bDefWordWrapOld; <br>LOGFONT NEAR CPadView::m_lfDefFont; <br>LOGFONT NEAR CPadView::m_lfDefFontOld; <br>LOGFONT NEAR CPadView::m_lfDefPrintFont; <br>LOGFONT NEAR CPadView::m_lfDefPrintFontOld; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Static initialization/termination <br> <br>static TCHAR BASED_CODE szSettings[] = _T("Settings"); <br>static TCHAR BASED_CODE szTabStops[] = _T("TabStops"); <br>static TCHAR BASED_CODE szFont[] = _T("Font"); <br>static TCHAR BASED_CODE szPrintFont[] = _T("PrintFont"); <br>static TCHAR BASED_CODE szHeight[] = _T("Height"); <br>static TCHAR BASED_CODE szWeight[] = _T("Weight"); <br>static TCHAR BASED_CODE szItalic[] = _T("Italic"); <br>static TCHAR BASED_CODE szUnderline[] = _T("Underline"); <br>static TCHAR BASED_CODE szPitchAndFamily[] = _T("PitchAndFamily"); <br>static TCHAR BASED_CODE szCharSet[] = _T("CharSet"); <br>static TCHAR BASED_CODE szFaceName[] = _T("FaceName"); <br>static TCHAR BASED_CODE szSystem[] = _T("System"); <br>static TCHAR BASED_CODE szWordWrap[] = _T("WordWrap"); <br> <br>static void GetProfileFont(LPCTSTR szSec, LOGFONT* plf) <br>{ <br>CWinApp* pApp = AfxGetApp(); <br>plf-&gt;lfHeight = pApp-&gt;GetProfileInt(szSec, szHeight, 0); <br>if (plf-&gt;lfHeight != 0) <br>{ <br>plf-&gt;lfWeight = pApp-&gt;GetProfileInt(szSec, szWeight, 0); <br>plf-&gt;lfItalic = (BYTE)pApp-&gt;GetProfileInt(szSec, szItalic, 0); <br>plf-&gt;lfUnderline = (BYTE)pApp-&gt;GetProfileInt(szSec, szUnderline, 0); <br>plf-&gt;lfPitchAndFamily = (BYTE)pApp-&gt;GetProfileInt(szSec, szPitchAndFamily, 0); <br>plf-&gt;lfCharSet = (BYTE)pApp-&gt;GetProfileInt(szSec, szCharSet, DEFAULT_CHARSET); <br>CString strFont = pApp-&gt;GetProfileString(szSec, szFaceName, szSystem); <br>lstrcpyn((TCHAR*)plf-&gt;lfFaceName, strFont, sizeof plf-&gt;lfFaceName); <br>plf-&gt;lfFaceName[sizeof plf-&gt;lfFaceName-1] = 0; <br>} <br>} <br> <br>static void WriteProfileFont(LPCTSTR szSec, const LOGFONT* plf, LOGFONT* plfOld) <br>{ <br>CWinApp* pApp = AfxGetApp(); <br> <br>if (plf-&gt;lfHeight != plfOld-&gt;lfHeight) <br>pApp-&gt;WriteProfileInt(szSec, szHeight, plf-&gt;lfHeight); <br>if (plf-&gt;lfHeight != 0) <br>{ <br>if (plf-&gt;lfHeight != plfOld-&gt;lfHeight) <br>pApp-&gt;WriteProfileInt(szSec, szHeight, plf-&gt;lfHeight); <br>if (plf-&gt;lfWeight != plfOld-&gt;lfWeight) <br>pApp-&gt;WriteProfileInt(szSec, szWeight, plf-&gt;lfWeight); <br>if (plf-&gt;lfItalic != plfOld-&gt;lfItalic) <br>pApp-&gt;WriteProfileInt(szSec, szItalic, plf-&gt;lfItalic); <br>if (plf-&gt;lfUnderline != plfOld-&gt;lfUnderline) <br>pApp-&gt;WriteProfileInt(szSec, szUnderline, plf-&gt;lfUnderline); <br>if (plf-&gt;lfPitchAndFamily != plfOld-&gt;lfPitchAndFamily) <br>pApp-&gt;WriteProfileInt(szSec, szPitchAndFamily, plf-&gt;lfPitchAndFamily); <br>if (plf-&gt;lfCharSet != plfOld-&gt;lfCharSet) <br>pApp-&gt;WriteProfileInt(szSec, szCharSet, plf-&gt;lfCharSet); <br>if (_tcscmp(plf-&gt;lfFaceName, plfOld-&gt;lfFaceName) != 0) <br>pApp-&gt;WriteProfileString(szSec, szFaceName, (LPCTSTR)plf-&gt;lfFaceName); <br>} <br>*plfOld = *plf; <br>} <br> <br>void CPadView::Initialize() <br>{ <br>CWinApp* pApp = AfxGetApp(); <br>m_bDefWordWrap = pApp-&gt;GetProfileInt(szSettings, szWordWrap, 0); <br>m_bDefWordWrapOld = m_bDefWordWrap; <br>m_nDefTabStops = pApp-&gt;GetProfileInt(szSettings, szTabStops, 8*4); <br>m_nDefTabStopsOld = m_nDefTabStops; <br>GetProfileFont(szFont, &amp;m_lfDefFont); <br>m_lfDefFontOld = m_lfDefFont; <br>GetProfileFont(szPrintFont, &amp;m_lfDefPrintFont); <br>m_lfDefPrintFontOld = m_lfDefPrintFont; <br>} <br> <br>void CPadView::Terminate() <br>{ <br>CWinApp* pApp = AfxGetApp(); <br>if (m_nDefTabStops != m_nDefTabStopsOld) <br>pApp-&gt;WriteProfileInt(szSettings, szTabStops, m_nDefTabStops); <br>if (m_bDefWordWrap != m_bDefWordWrapOld) <br>pApp-&gt;WriteProfileInt(szSettings, szWordWrap, m_bDefWordWrap); <br>WriteProfileFont(szFont, &amp;m_lfDefFont, &amp;m_lfDefFontOld); <br>WriteProfileFont(szPrintFont, &amp;m_lfDefPrintFont, &amp;m_lfDefPrintFontOld); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView construction/destruction <br> <br>CPadView::CPadView() <br>{ <br>#ifndef _MAC <br>m_nTabStops = m_nDefTabStops; <br>#endif <br> <br>m_uTimerID = 0; <br>} <br> <br>BOOL CPadView::PreCreateWindow(CREATESTRUCT&amp; cs) <br>{ <br>if (!CEditView::PreCreateWindow(cs)) <br>return FALSE; <br> <br>if (m_bDefWordWrap) <br>cs.style &amp;= ~(WS_HSCROLL|ES_AUTOHSCROLL); <br> <br>return TRUE; <br>} <br> <br>int CPadView::OnCreate(LPCREATESTRUCT lpcs) <br>{ <br>if (CEditView::OnCreate(lpcs) != 0) <br>return -1; <br>if (m_lfDefFont.lfHeight != 0) <br>{ <br>m_font.CreateFontIndirect(&amp;m_lfDefFont); <br>SetFont(&amp;m_font); <br>} <br>if (m_lfDefPrintFont.lfHeight != 0) <br>{ <br>m_fontPrint.CreateFontIndirect(&amp;m_lfDefPrintFont); <br>SetPrinterFont(&amp;m_fontPrint); <br>} <br>return 0; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView Word Wrap support <br> <br>BOOL CPadView::IsWordWrap() const <br>{ <br>return (GetStyle() &amp; ES_AUTOHSCROLL) == 0; <br>} <br> <br>BOOL CPadView::SetWordWrap(BOOL bWordWrap) <br>{ <br>bWordWrap = !!bWordWrap;    // make sure ==TRUE || ==FALSE <br>if (IsWordWrap() == bWordWrap) <br>return FALSE; <br> <br>// preserve original control's state. <br>CFont* pFont = GetFont(); <br>int nLen = GetBufferLength(); <br>TCHAR* pSaveText = new TCHAR[GetBufferLength()+1]; <br>GetWindowText(pSaveText, nLen+1); <br> <br>// create new edit control with appropriate style and size. <br>DWORD dwStyle = dwStyleDefault &amp; ~(ES_AUTOHSCROLL|WS_HSCROLL|WS_VISIBLE); <br>if (!bWordWrap) <br>dwStyle |= ES_AUTOHSCROLL|WS_HSCROLL; <br> <br>CWnd* pParent = GetParent(); <br>CRect rect; <br>GetWindowRect(rect); <br>pParent-&gt;ScreenToClient(rect); <br>CWnd* pFocus = GetFocus(); <br> <br>UINT nID = GetDlgCtrlID(); <br> <br>HWND hWnd = ::CreateWindow(_T("edit"), NULL, dwStyle, <br>rect.left, rect.top, rect.right-rect.left, rect.bottom-rect.top, <br>pParent-&gt;m_hWnd, (HMENU)nID, AfxGetInstanceHandle(), NULL); <br> <br>if (hWnd == NULL) <br>{ <br>delete[] pSaveText; <br>return FALSE; <br>} <br> <br>// set the window text to nothing to make sure following set doesn't fail <br>SetWindowText(NULL); <br> <br>// restore visual state <br>::SetWindowText(hWnd, pSaveText); <br>delete[] pSaveText; <br>if (pFont != NULL) <br>{ <br>ASSERT(pFont-&gt;m_hObject != NULL); <br>::SendMessage(hWnd, WM_SETFONT, (WPARAM)pFont-&gt;m_hObject, 0); <br>} <br> <br>// detach old window, attach new <br>SetDlgCtrlID(nID+1); <br>HWND hWndOld = Detach(); <br>::SetWindowLong(hWndOld, GWL_WNDPROC, (LONG)*GetSuperWndProcAddr()); <br>ASSERT(m_hWnd == NULL); <br>SubclassWindow(hWnd); <br>ASSERT(m_hWnd == hWnd); <br>GetParentFrame()-&gt;SendMessage(WM_RECALCPARENT); <br>     <br>#ifndef _MAC <br>UINT nTabStops = m_nTabStops; <br>GetEditCtrl().SetTabStops(nTabStops); <br>#endif <br> <br>    GetClientRect(&amp;rect); <br>SetWindowPos(NULL, 0, 0, 0, 0, <br>SWP_NOMOVE|SWP_NOSIZE|SWP_NOACTIVATE|SWP_NOZORDER|SWP_SHOWWINDOW); <br>SetWindowPos(NULL, 0, 0, 0, 0, <br>SWP_NOMOVE|SWP_NOSIZE|SWP_NOACTIVATE|SWP_NOZORDER|SWP_DRAWFRAME); <br>SetWindowPos(NULL, 0, 0, 0, 0, SWP_NOMOVE|SWP_NOSIZE|SWP_NOACTIVATE); <br>UpdateWindow(); <br> <br>// destroy old <br>::SetWindowPos(hWndOld, NULL, 0, 0, 0, 0, <br>SWP_HIDEWINDOW|SWP_NOREDRAW|SWP_NOMOVE|SWP_NOSIZE|SWP_NOACTIVATE| <br>SWP_NOZORDER); <br>::DestroyWindow(hWndOld); <br> <br>// restore rest of state... <br>GetEditCtrl().LimitText(nMaxSize); <br>if (pFocus == this) <br>SetFocus(); <br> <br>// notify container that doc changed <br>GetDocument()-&gt;UpdateAllItems(NULL); <br> <br>ASSERT_VALID(this); <br>return TRUE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView Printing support <br> <br>void CPadView::OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo) <br>{ <br>CEditView::OnBeginPrinting(pDC, pInfo); <br> <br>LPCTSTR pszFileName = GetDocument()-&gt;GetPathName(); <br>BOOL bForceSysTime = _tcschr(pszFileName, '.') == NULL; <br>CTime timeSys = CTime::GetCurrentTime(); <br>CFileStatus status; <br>CFile::GetStatus(pszFileName, status); <br> <br>if (dlgPageSetup.m_iHeaderTime != 0 || bForceSysTime) <br>m_timeHeader = timeSys; <br>else <br>m_timeHeader = status.m_mtime; <br> <br>if (dlgPageSetup.m_iFooterTime != 0 || bForceSysTime) <br>m_timeFooter = timeSys; <br>else <br>m_timeFooter = status.m_mtime; <br> <br>if (!pInfo-&gt;m_bPreview) <br>return; <br> <br>CWaitCursor wait; <br>pInfo-&gt;m_nCurPage = 0xFFFF; <br>OnPrepareDC(pDC, pInfo); <br> <br>UINT nIndex = LOWORD(GetEditCtrl().GetSel()); <br>UINT nCurPage = 1; <br>while (nCurPage &lt; (UINT)m_aPageStart.GetSize()) <br>{ <br>if (nIndex &lt; m_aPageStart[nCurPage]) <br>break; <br>nCurPage++; <br>} <br>pInfo-&gt;m_nCurPage = nCurPage; <br>pInfo-&gt;SetMaxPage(m_aPageStart.GetSize()); <br>m_nPreviewPage = nCurPage; <br>} <br> <br>void CPadView::OnPrint(CDC* pDC, CPrintInfo* pInfo) <br>{ <br>// get string to show as "filename" in header/footer <br>LPCTSTR pszFileName = GetDocument()-&gt;GetPathName(); <br>if (pszFileName[0] == 0) <br>pszFileName = GetDocument()-&gt;GetTitle(); <br> <br>// go thru global CPageSetupDlg to format the header and footer <br>CString strHeader; <br>dlgPageSetup.FormatHeader(strHeader, m_timeHeader, pszFileName, <br>pInfo-&gt;m_nCurPage); <br>CString strFooter; <br>dlgPageSetup.FormatFooter(strFooter, m_timeFooter, pszFileName, <br>pInfo-&gt;m_nCurPage); <br> <br>TEXTMETRIC tm; <br>pDC-&gt;GetTextMetrics(&amp;tm); <br>int cyChar = tm.tmHeight; <br>CRect rectPage = pInfo-&gt;m_rectDraw; <br> <br>// draw and exclude space for header <br>if (!strHeader.IsEmpty()) <br>{ <br>pDC-&gt;TextOut(rectPage.left, rectPage.top, strHeader); <br>rectPage.top += cyChar + cyChar / 4; <br>pDC-&gt;MoveTo(rectPage.left, rectPage.top); <br>pDC-&gt;LineTo(rectPage.right, rectPage.top); <br>rectPage.top += cyChar / 4; <br>} <br> <br>// allow space for footer <br>pInfo-&gt;m_rectDraw = rectPage; <br>if (!strFooter.IsEmpty()) <br>pInfo-&gt;m_rectDraw.bottom -= cyChar + cyChar/4 + cyChar/4; <br> <br>// draw body text <br>CEditView::OnPrint(pDC, pInfo); <br> <br>// draw footer <br>if (!strFooter.IsEmpty()) <br>{ <br>rectPage.bottom -= cyChar; <br>pDC-&gt;TextOut(rectPage.left, rectPage.bottom, strFooter); <br>rectPage.bottom -= cyChar / 4; <br>pDC-&gt;MoveTo(rectPage.left, rectPage.bottom); <br>pDC-&gt;LineTo(rectPage.right, rectPage.bottom); <br>rectPage.bottom -= cyChar / 4; <br>} <br>} <br> <br>void CPadView::OnScrollTo(CDC*, CPrintInfo* pInfo, POINT) <br>{ <br>UINT nPage = pInfo-&gt;m_nCurPage; <br>ASSERT(nPage &lt; (UINT)m_aPageStart.GetSize()); <br>if (nPage != m_nPreviewPage) <br>{ <br>UINT nIndex = m_aPageStart[nPage]; <br>GetEditCtrl().SetSel((int)nIndex, (int)nIndex); <br>} <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView Font Handling <br> <br>void CPadView::OnChooseFont() <br>{ <br>   // get current font description <br>   CFont* pFont = GetFont(); <br>   LOGFONT lf; <br>   if (pFont != NULL) <br>   pFont-&gt;GetObject(sizeof(LOGFONT), &amp;lf); <br>   else <br>   ::GetObject(GetStockObject(SYSTEM_FONT), sizeof(LOGFONT), &amp;lf); <br> <br>CFontDialog dlg(&amp;lf, CF_SCREENFONTS|CF_INITTOLOGFONTSTRUCT); <br>if (dlg.DoModal() == IDOK) <br>{ <br>// switch to new font. <br>m_font.DeleteObject(); <br>if (m_font.CreateFontIndirect(&amp;lf)) <br>{ <br>CWaitCursor wait; <br>SetFont(&amp;m_font); <br>m_lfDefFont = lf; <br> <br>if (GetPrinterFont() == NULL) <br>{ <br>// notify container that content has changed <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br>} <br>} <br>} <br> <br>static void ScaleLogFont(LPLOGFONT plf, const CDC&amp; dcFrom, const CDC&amp; dcTo) <br>// helper to scale log font member from one DC to another! <br>{ <br>plf-&gt;lfHeight = MulDiv(plf-&gt;lfHeight, <br>dcTo.GetDeviceCaps(LOGPIXELSY), dcFrom.GetDeviceCaps(LOGPIXELSY)); <br>plf-&gt;lfWidth = MulDiv(plf-&gt;lfWidth, <br>dcTo.GetDeviceCaps(LOGPIXELSX), dcFrom.GetDeviceCaps(LOGPIXELSX)); <br>} <br> <br>void CPadView::OnChoosePrintFont() <br>{ <br>CWaitCursor wait; <br>CFont* pFont = GetPrinterFont(); <br>LOGFONT lf; <br>LPLOGFONT plf = NULL; <br>if (pFont != NULL) <br>{ <br>pFont-&gt;GetObject(sizeof(LOGFONT), &amp;lf); <br>plf = &amp;lf; <br>} <br> <br>// magic to get printer dialog that would be used if we were printing! <br>CPrintDialog dlgPrint(FALSE); <br>if (!AfxGetApp()-&gt;GetPrinterDeviceDefaults(&amp;dlgPrint.m_pd)) <br>{ <br>AfxMessageBox(IDP_ERR_GET_DEVICE_DEFAULTS); <br>return; <br>} <br>wait.Restore(); <br>HDC hdcPrint = dlgPrint.CreatePrinterDC(); <br>if (hdcPrint == NULL) <br>{ <br>AfxMessageBox(IDP_ERR_GET_PRINTER_DC); <br>return; <br>} <br> <br>CDC dcScreen; <br>dcScreen.Attach(::GetDC(NULL)); <br>CDC dcPrint; <br>dcPrint.Attach(hdcPrint); <br> <br>if (plf != NULL) <br>{ <br>// need to map initial logfont to screen metrics. <br>::ScaleLogFont(plf, dcPrint, dcScreen); <br>} <br> <br>// now bring up the dialog since we know the printer DC <br>CFontDialog dlg(plf, CF_PRINTERFONTS, &amp;dcPrint); <br>if (dlg.DoModal() == IDOK) <br>{ <br>// map the resulting logfont back to printer metrics. <br>lf = dlg.m_lf; <br>::ScaleLogFont(&amp;lf, dcScreen, dcPrint); <br> <br>m_fontPrint.DeleteObject(); <br>if (m_fontPrint.CreateFontIndirect(&amp;lf)) <br>{ <br>SetPrinterFont(&amp;m_fontPrint); <br>m_lfDefPrintFont = lf; <br> <br>// notify container that content has changed <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br>} <br>//NOTE: destructor will call dcPrint.DeleteDC <br> <br>::ReleaseDC(NULL, dcScreen.Detach()); <br>} <br> <br>void CPadView::OnMirrorDisplayFont() <br>{ <br>if (GetPrinterFont() != NULL) <br>{ <br>SetPrinterFont(NULL); <br>m_lfDefPrintFont.lfHeight = 0; <br> <br>// notify container that content changed <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br>} <br> <br>void CPadView::OnUpdateChoosePrintFont(CCmdUI* pCmdUI) <br>{ <br>pCmdUI-&gt;SetCheck(GetPrinterFont() != NULL); <br>} <br> <br>void CPadView::OnUpdateMirrorDisplayFont(CCmdUI* pCmdUI) <br>{ <br>pCmdUI-&gt;SetCheck(GetPrinterFont() == NULL); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView Tab Stops <br> <br>#ifndef _MAC // CEditView::SetTabStops is not supported on the MAC <br>void CPadView::OnSetTabStops() <br>{ <br>CSetTabStops dlg; <br>dlg.m_nTabStops = m_nTabStops/4; <br>if (dlg.DoModal() == IDOK) <br>{ <br>CWaitCursor wait; <br>SetTabStops(dlg.m_nTabStops*4); <br>m_nDefTabStops = m_nTabStops; <br> <br>// notify container that content changed <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br>} <br>#endif  <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView Word Wrap <br> <br>void CPadView::OnUpdateWordWrap(CCmdUI* pCmdUI) <br>{ <br>pCmdUI-&gt;SetCheck(IsWordWrap()); <br>} <br> <br>void CPadView::OnWordWrap() <br>{ <br>CWaitCursor wait; <br>SetWordWrap(!IsWordWrap()); <br>m_bDefWordWrap = IsWordWrap(); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView commands <br> <br>void CPadView::OnRButtonDown(UINT, CPoint) <br>{ <br>GetParentFrame()-&gt;BringWindowToTop(); <br>} <br> <br>void CPadView::OnSize(UINT nType, int cx, int cy) <br>{ <br>CWaitCursor wait; <br>CEditView::OnSize(nType, cx, cy); <br> <br>CFrameWnd* pFrameWnd = GetParentFrame(); <br>ASSERT_VALID(pFrameWnd); <br> <br>if ((pFrameWnd-&gt;GetStyle() &amp; WS_VISIBLE) &amp;&amp; <br>pFrameWnd-&gt;IsKindOf(RUNTIME_CLASS(COleIPFrameWnd))) <br>{ <br>// update the cx part of the extent to the width of the control <br>COleServerItem* pItem = GetDocument()-&gt;GetEmbeddedItem(); <br> <br>// only update if it has actually changed <br>if ((int)pItem-&gt;m_sizeExtent.cx != cx) <br>{ <br>pItem-&gt;m_sizeExtent.cx = cx; <br>OnEditChange(); <br>} <br>} <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView OLE support <br> <br>void CPadView::OnEditChange() <br>{ <br>CEditView::OnEditChange(); <br> <br>if (m_uTimerID != 0) // if outstanding timer kill it <br>KillTimer(m_uTimerID); <br>m_uTimerID = SetTimer(1, 200, NULL); //set a timer for 200 milliseconds <br>if (m_uTimerID == 0) // no timer available so force update now <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br> <br>void CPadView::OnEditCopy() <br>{ <br>CWaitCursor wait; <br> <br>// get the current selection <br>UINT nFrom, nTo; <br>GetEditCtrl().GetSel((int&amp;)nFrom, (int&amp;)nTo); <br> <br>// what gets copied depends on partial vs. full selection <br>if ((nFrom == 0 &amp;&amp; nTo == (UINT)GetWindowTextLength())) <br>{ <br>// copy entire document to the clipboard <br>GetDocument()-&gt;GetEmbeddedItem()-&gt;CopyToClipboard(TRUE); <br>} <br>else <br>{ <br>// copy linked item to clipboard <br>CPadLinkItem item(GetDocument(), nFrom, nTo); <br>item.CopyToClipboard(TRUE); <br>} <br>} <br> <br>void CPadView::OnEditCut() <br>{ <br>OnEditCopy(); <br>CEditView::OnEditCut(); <br>} <br> <br>void CPadView::OnTimer(UINT nIDEvent) <br>{ <br>if (m_uTimerID != nIDEvent) // not our timer <br>{ <br>CEditView::OnTimer(nIDEvent); <br>return; <br>} <br> <br>KillTimer(m_uTimerID); // kill one-shot timer <br>m_uTimerID = 0; <br>GetDocument()-&gt;UpdateAllItems(NULL); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadView diagnostics <br> <br>#ifdef _DEBUG <br>void CPadView::AssertValid() const <br>{ <br>CEditView::AssertValid(); <br>} <br> <br>void CPadView::Dump(CDumpContext&amp; dc) const <br>{ <br>CEditView::Dump(dc); <br>} <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// </code></pre>
<p>&nbsp;</p></body>
</HTML>

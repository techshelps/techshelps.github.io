<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PADVIEW.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3978"></a>PADVIEW.H</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// PadView.h <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// Definition of the CPadView class <br>// <br> <br>#ifndef __PADVIEW_H__ <br>#define __PADVIEW_H__ <br> <br>#include &lt;afxdlgs.h&gt; <br>#include &lt;afxext.h&gt; <br>#include "paddoc.h" <br> <br>class CPadView : public CEditView <br>{ <br>DECLARE_DYNCREATE(CPadView) <br> <br>// Construction <br>CPadView(); <br>BOOL PreCreateWindow(CREATESTRUCT&amp; cs); <br> <br>// Attributes <br>public: <br>// static init/term... <br>static void Initialize(); <br>static void Terminate(); <br> <br>CPadDoc* GetDocument() <br>{ return (CPadDoc*)m_pDocument; } <br> <br>// Operations <br>public: <br>// Word wrap... <br>BOOL IsWordWrap() const; <br>BOOL SetWordWrap(BOOL bWordWrap); <br> <br>// Printing... <br>virtual void OnPrint(CDC* pDC, CPrintInfo *pInfo); <br>virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo); <br>virtual void OnScrollTo(CDC* pDC, CPrintInfo* pInfo, POINT point); <br> <br>// Buffer access... <br>LPCTSTR LockBuffer() const <br>{ return CEditView::LockBuffer(); } <br>void UnlockBuffer() const <br>{ CEditView::UnlockBuffer(); } <br> <br>// Implementation <br>public: <br>BOOL IsUpdatePending() {return (m_uTimerID != NULL);} <br> <br>#ifdef _DEBUG <br>virtual void AssertValid() const; <br>virtual void Dump(CDumpContext&amp; dc) const; <br>#endif <br> <br>protected: <br>UINT m_uTimerID; // ==0 when no outstanding <br> <br>static LOGFONT NEAR m_lfDefFont; <br>static LOGFONT NEAR m_lfDefFontOld; <br>CFont m_font; <br> <br>static LOGFONT NEAR m_lfDefPrintFont; <br>static LOGFONT NEAR m_lfDefPrintFontOld; <br>CFont m_fontPrint; <br> <br>static UINT m_nDefTabStops; <br>static UINT m_nDefTabStopsOld; <br>static BOOL m_bDefWordWrap; <br>static BOOL m_bDefWordWrapOld; <br> <br>UINT m_nPreviewPage; <br>CTime m_timeHeader; <br>CTime m_timeFooter; <br> <br>//{{AFX_MSG(CPadView) <br>afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct); <br>afx_msg void OnChooseFont(); <br>afx_msg void OnWordWrap(); <br>afx_msg void OnUpdateWordWrap(CCmdUI* pCmdUI); <br>afx_msg void OnRButtonDown(UINT nFlags, CPoint point); <br>afx_msg void OnChoosePrintFont(); <br>afx_msg void OnMirrorDisplayFont(); <br>afx_msg void OnUpdateMirrorDisplayFont(CCmdUI* pCmdUI); <br>afx_msg void OnUpdateChoosePrintFont(CCmdUI* pCmdUI); <br>afx_msg void OnSize(UINT nType, int cx, int cy); <br>afx_msg void OnEditChange(); <br>afx_msg void OnEditCopy(); <br>afx_msg void OnEditCut(); <br>afx_msg void OnTimer(UINT nIDEvent); <br>//}}AFX_MSG <br> <br>    #ifndef _MAC <br>afx_msg void OnSetTabStops(); <br>#endif <br> <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>#endif  // __PADVIEW_H__ <br> <br>///////////////////////////////////////////////////////////////////////////// </code></pre>
<p>&nbsp;</p></body>
</HTML>

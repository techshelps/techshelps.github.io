<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PADDOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3971"></a>PADDOC.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// PadDoc.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the CPadDoc class <br>// <br> <br>#include "stdafx.h" <br>#include "superpad.h" <br>#include "paddoc.h" <br>#include "paditem.h" <br>#include "linkitem.h" <br> <br>#include &lt;wpapi.h&gt; <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadDoc <br> <br>IMPLEMENT_DYNCREATE(CPadDoc, COleServerDoc) <br> <br>BEGIN_MESSAGE_MAP(CPadDoc, COleServerDoc) <br>//{{AFX_MSG_MAP(CPadDoc) <br>ON_COMMAND(ID_VIEW_UPDATENOW, OnViewUpdatenow) <br>ON_COMMAND(ID_CANCEL_INPLACE, OnCancelInplace) <br>ON_COMMAND(ID_FILE_SAVE, OnFileSave) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPadDoc delegation to CEditView <br> <br>CPadDoc::CPadDoc() <br>{ <br>m_urlflag=FALSE; <br>} <br> <br>CPadDoc::~CPadDoc() <br>{ <br>if (m_urlflag!=FALSE) <br>DeleteFile(GetPathName()); <br>} <br> <br>void CPadDoc::DeleteContents() <br>{ <br>COleServerDoc::DeleteContents(); <br>if (m_viewList.IsEmpty()) <br>return; <br>CEditView* pView = (CEditView*)m_viewList.GetHead(); <br>ASSERT_KINDOF(CEditView, pView); <br>pView-&gt;DeleteContents(); <br>} <br> <br>void CPadDoc::Serialize(CArchive&amp; ar) <br>{ <br>CEditView* pView = (CEditView*)m_viewList.GetHead(); <br>ASSERT_KINDOF(CEditView, pView); <br>pView-&gt;SerializeRaw(ar); <br>} <br> <br>COleServerItem* CPadDoc::OnGetEmbeddedItem() <br>{ <br>CEmbeddedItem* pItem = new CEmbeddedItem(this); <br>ASSERT_VALID(pItem); <br>return pItem; <br>} <br> <br>COleServerItem* CPadDoc::OnGetLinkedItem(LPCTSTR lpszItemName) <br>{ <br>CPadLinkItem *pItem = <br>(CPadLinkItem*)COleServerDoc::OnGetLinkedItem(lpszItemName); <br>if (pItem == NULL) <br>pItem = new CPadLinkItem(this, lpszItemName); <br> <br>ASSERT_VALID(pItem); <br>return pItem; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br>void CPadDoc::OnViewUpdatenow() <br>{ <br>UpdateAllItems(NULL); <br>} <br> <br>// Note: both the server and the container should have a keyboard method <br>//  of deactivating an active in-place item. <br> <br>void CPadDoc::OnCancelInplace() <br>{ <br>if (IsInPlaceActive()) <br>OnDeactivateUI(FALSE); <br>} <br> <br>void CPadDoc::SetSelection(int nBeg, int nEnd) <br>{ <br>CEditView* pView = (CEditView*)m_viewList.GetHead(); <br>ASSERT_KINDOF(CEditView, pView); <br>pView-&gt;GetEditCtrl().SetSel(nBeg, nEnd); <br>} <br> <br>void CPadDoc::OnFileSave()  <br>{ <br>// If the file being saved is not URL file then call standard save <br>if (m_urlflag==FALSE) <br>{ <br>CDocument::OnFileSave(); <br>return; <br>} <br> <br>// Make a local copy of the file so that you can post by the same name <br>// as that of URL and not the temporary file name. <br>LONG lRet; <br>LPTSTR lpszFileName=m_urlfile.GetBuffer(MAX_PATH); <br>LPTSTR tempPath= new CHAR[MAX_PATH]; <br>::GetTempPath(MAX_PATH,tempPath); <br>strcat(tempPath,lpszFileName); <br>CDocument::OnSaveDocument(tempPath); <br> <br>// Call WebPost Wizard <br>lRet = WpPost(NULL,// hWin <br>1,// count of files <br>&amp;tempPath,// file list <br>NULL,// lpcbSiteName <br>NULL,// lpszSiteName <br>NULL,// lpcbURL <br>NULL,// lpszURL <br>0 );// flags <br>DeleteFile(tempPath);  // Delete the temporary file which holds the HTM file <br>return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

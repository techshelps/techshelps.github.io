<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ABOUTBOX.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3958"></a>ABOUTBOX.CPP</h2>
<pre><code>//=------------------------------------------------------------------------= <br>// AboutBox.Cpp <br>//=------------------------------------------------------------------------= <br>// Copyright 1992-1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// CAboutBox implementation <br>// <br> <br> <br>#include "stdafx.h" <br>#include "resource.h" <br>#include "aboutbox.h" <br>#include &lt;dos.h&gt; <br>#include &lt;direct.h&gt; <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutBox dialog <br> <br>BEGIN_MESSAGE_MAP(CAboutBox, CDialog) <br>//{{AFX_MSG_MAP(CAboutBox) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>CAboutBox::CAboutBox(CWnd* pParent /*=NULL*/) <br>: CDialog(CAboutBox::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CAboutBox) <br>// NOTE: the ClassWizard will add member initialization here <br>//}}AFX_DATA_INIT <br>} <br> <br>void CAboutBox::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutBox) <br>// NOTE: the ClassWizard will add DDX and DDV calls here <br>//}}AFX_DATA_MAP <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutBox message handlers <br> <br>BOOL CAboutBox::OnInitDialog() <br>{ <br>CDialog::OnInitDialog(); <br> <br>// initialize the big icon control <br>m_icon.SubclassDlgItem(IDC_BIGICON, this); <br>m_icon.SizeToContent(); <br> <br>#ifndef _MAC <br>// fill available memory <br>CString str, strFmt; <br>strFmt.LoadString(IDS_PHYSICAL_MEM); <br> <br>MEMORYSTATUS MemStat; <br>MemStat.dwLength = sizeof(MEMORYSTATUS); <br>GlobalMemoryStatus(&amp;MemStat); <br>wsprintf(str.GetBuffer(80), strFmt, MemStat.dwTotalPhys / 1024L); <br>str.ReleaseBuffer(); <br>SetDlgItemText(IDC_PHYSICAL_MEM, str); <br> <br>// fill disk free information <br>struct _diskfree_t diskfree; <br>if (_getdiskfree(_getdrive(), &amp;diskfree) == 0) <br>{ <br>strFmt.LoadString(IDS_DISK_SPACE); <br>wsprintf(str.GetBuffer(80), strFmt, <br>(DWORD)diskfree.avail_clusters * <br>(DWORD)diskfree.sectors_per_cluster * <br>(DWORD)diskfree.bytes_per_sector / (DWORD)1024L); <br>str.ReleaseBuffer(); <br>} <br>else <br>str.LoadString(IDS_DISK_SPACE_UNAVAIL); <br>SetDlgItemText(IDC_DISK_SPACE, str); <br>#endif //_MAC <br> <br>return TRUE;  // return TRUE  unless you set the focus to a control <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSplashWnd dialog <br> <br>BEGIN_MESSAGE_MAP(CSplashWnd, CDialog) <br>//{{AFX_MSG_MAP(CSplashWnd) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>void CSplashWnd::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CSplashWnd) <br>// NOTE: the ClassWizard will add DDX and DDV calls here <br>//}}AFX_DATA_MAP <br>} <br> <br>BOOL CSplashWnd::Create(CWnd* pParent) <br>{ <br>//{{AFX_DATA_INIT(CSplashWnd) <br>// NOTE: the ClassWizard will add member initialization here <br>//}}AFX_DATA_INIT <br> <br>if (!CDialog::Create(CSplashWnd::IDD, pParent)) <br>{ <br>TRACE0("Warning: creation of CSplashWnd dialog failed\n"); <br>return FALSE; <br>} <br> <br>return TRUE; <br>} <br> <br>BOOL CSplashWnd::OnInitDialog() <br>{ <br>CDialog::OnInitDialog(); <br>CenterWindow(); <br> <br>// initialize the big icon control <br>m_icon.SubclassDlgItem(IDC_BIGICON, this); <br>m_icon.SizeToContent(); <br> <br>return TRUE;  // return TRUE  unless you set the focus to a control <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSplashWnd message handlers <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CBigIcon <br> <br>BEGIN_MESSAGE_MAP(CBigIcon, CButton) <br>//{{AFX_MSG_MAP(CBigIcon) <br>ON_WM_DRAWITEM() <br>ON_WM_ERASEBKGND() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CBigIcon message handlers <br> <br>#define CY_SHADOW   4 <br>#define CX_SHADOW   4 <br> <br>void CBigIcon::SizeToContent() <br>{ <br>// get system icon size <br>int cxIcon = ::GetSystemMetrics(SM_CXICON); <br>int cyIcon = ::GetSystemMetrics(SM_CYICON); <br> <br>// a big icon should be twice the size of an icon + shadows <br>SetWindowPos(NULL, 0, 0, cxIcon*2 + CX_SHADOW + 4, cyIcon*2 + CY_SHADOW + 4, <br>SWP_NOACTIVATE|SWP_NOMOVE|SWP_NOZORDER); <br>} <br> <br>void CBigIcon::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct) <br>{ <br>CDC* pDC = CDC::FromHandle(lpDrawItemStruct-&gt;hDC); <br>ASSERT(pDC != NULL); <br> <br>CRect rect; <br>GetClientRect(rect); <br>int cxClient = rect.Width(); <br>int cyClient = rect.Height(); <br> <br>// load icon <br>HICON hicon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME); <br>if (hicon == NULL) <br>return; <br> <br>// draw icon into off-screen bitmap <br>int cxIcon = ::GetSystemMetrics(SM_CXICON); <br>int cyIcon = ::GetSystemMetrics(SM_CYICON); <br> <br>CBitmap bitmap; <br>if (!bitmap.CreateCompatibleBitmap(pDC, cxIcon, cyIcon)) <br>return; <br>CDC dcMem; <br>if (!dcMem.CreateCompatibleDC(pDC)) <br>return; <br>CBitmap* pBitmapOld = dcMem.SelectObject(&amp;bitmap); <br>if (pBitmapOld == NULL) <br>return; <br> <br>// blt the bits already on the window onto the off-screen bitmap <br>dcMem.StretchBlt(0, 0, cxIcon, cyIcon, pDC, <br>2, 2, cxClient-CX_SHADOW-4, cyClient-CY_SHADOW-4, SRCCOPY); <br> <br>// draw the icon on the background <br>dcMem.DrawIcon(0, 0, hicon); <br> <br>// draw border around icon <br>CPen pen; <br>pen.CreateStockObject(BLACK_PEN); <br>CPen* pPenOld = pDC-&gt;SelectObject(&amp;pen); <br>pDC-&gt;Rectangle(0, 0, cxClient-CX_SHADOW, cyClient-CY_SHADOW); <br>if (pPenOld) <br>pDC-&gt;SelectObject(pPenOld); <br> <br>// draw shadows around icon <br>CBrush br; <br>br.CreateStockObject(DKGRAY_BRUSH); <br>rect.SetRect(cxClient-CX_SHADOW, CY_SHADOW, cxClient, cyClient); <br>pDC-&gt;FillRect(rect, &amp;br); <br>rect.SetRect(CX_SHADOW, cyClient-CY_SHADOW, cxClient, cyClient); <br>pDC-&gt;FillRect(rect, &amp;br); <br> <br>// draw the icon contents <br>pDC-&gt;StretchBlt(2, 2, cxClient-CX_SHADOW-4, cyClient-CY_SHADOW-4, <br>&amp;dcMem, 0, 0, cxIcon, cyIcon, SRCCOPY); <br>} <br> <br>BOOL CBigIcon::OnEraseBkgnd(CDC*) <br>{ <br>return TRUE;    // we don't do any erasing... <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// </code></pre>
<p>&nbsp;</p></body>
</HTML>

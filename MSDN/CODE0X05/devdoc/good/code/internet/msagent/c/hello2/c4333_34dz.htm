<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HELLO2.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4337"></a>HELLO2.CPP</h2>
<pre><code>#include "Hello2.h" <br>#include "AgtSvr_i.c" <br>#include "Notify.h" <br> <br> <br>//========================================================================== <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (C) 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>//-------------------------------------------------------------------------- <br>// <br>// This sample demonstrates the simplest Microsoft Agent application that <br>// uses a notification sink. <br>// <br>//========================================================================== <br> <br> <br>static const LPWSTR kpwszCharacter = L"\\Program Files\\Microsoft Agent\\characters\\genie.acs"; <br>static const LPTSTR kpszAppTitle = _T("Microsoft Agent Samples"); <br> <br>extern long g_lDone = 0; <br> <br> <br>// This function checks to see if the version of Microsoft Agent <br>// installed on the user's system is compatible with the version <br>// we compiled with, i.e. it's version is greater than or equal to <br>// constants defined in AgentServer.h.  Microsoft Agent guarantees <br>// backward compatibility. <br> <br>BOOL IsValidAgentVersion(IAgent *pAgent) { <br> <br>HRESULT hRes; <br>IDispatch *pdAgent = NULL; <br>ITypeInfo *pTypeInfo = NULL; <br>ITypeLib *pTypeLib = NULL; <br>TLIBATTR *pTypeLibAttr = NULL; <br>BOOL bValid = FALSE; <br>UINT uiIndex; <br> <br>__try { <br> <br>// Query for IDispatch <br> <br>hRes = pAgent-&gt;QueryInterface(IID_IDispatch, (LPVOID *)&amp;pdAgent); <br> <br>if (FAILED(hRes)) <br>__leave; <br> <br>// Get the TypeInfo <br> <br>hRes = pdAgent-&gt;GetTypeInfo(0, 0, &amp;pTypeInfo); <br> <br>if (FAILED(hRes)) <br>__leave; <br> <br>// Get it's containing TypeLib <br> <br>hRes = pTypeInfo-&gt;GetContainingTypeLib(&amp;pTypeLib, &amp;uiIndex); <br> <br>if (FAILED(hRes)) <br>__leave; <br> <br>// Get the attributes of the TypeLib <br> <br>hRes = pTypeLib-&gt;GetLibAttr(&amp;pTypeLibAttr); <br> <br>if (FAILED(hRes)) <br>__leave; <br> <br>// Check the major and minor versions of the type library <br>// to those in AgentServer.h. <br> <br>if ((pTypeLibAttr-&gt;wMajorVerNum &gt; AGENT_VERSION_MAJOR) || <br>((pTypeLibAttr-&gt;wMajorVerNum == AGENT_VERSION_MAJOR) &amp;&amp; <br> (pTypeLibAttr-&gt;wMinorVerNum &gt;= AGENT_VERSION_MINOR))) <br>bValid = TRUE; <br> <br>} <br>__finally { <br>} <br> <br>if (pTypeLib) { <br> <br>if (pTypeLibAttr) <br>pTypeLib-&gt;ReleaseTLibAttr(pTypeLibAttr); <br> <br>pTypeLib-&gt;Release(); <br>} <br> <br>if (pTypeInfo) <br>pTypeInfo-&gt;Release(); <br> <br>if (pdAgent) <br>pdAgent-&gt;Release(); <br> <br>return bValid; <br>} <br> <br> <br>extern "C" int PASCAL WinMain(HINSTANCE hInst, <br>  HINSTANCE hInstPrev, <br>  LPSTR lpCmdLine, <br>  int nCmdShow) { <br> <br>HRESULThRes; <br>_TCHARszError[256]; <br>VARIANTvPath; <br>BSTRbszSpeak; <br>MSGmsg; <br>longlCharID; <br>longlRequestID; <br>longlNotifySinkID = -1; <br>IAgent   *pAgent; <br>IDispatch   *pdCharacter; <br>IAgentCharacter    *pCharacter = NULL; <br>AgentNotifySink   *pSink = NULL; <br> <br>// Initialize OLE <br> <br>    if (FAILED(OleInitialize(NULL))) { <br>MessageBox(NULL,  <br>   _T("There was an error initializing OLE."),  <br>   kpszAppTitle,  <br>   MB_OK | MB_ICONERROR); <br>        return -1; <br>} <br> <br>// Create an instance of the Agent server <br> <br>hRes = CoCreateInstance(CLSID_AgentServer, <br>NULL, <br>CLSCTX_SERVER, <br>IID_IAgent, <br>(LPVOID *)&amp;pAgent); <br>if (FAILED(hRes)) { <br> <br>wsprintf(szError, _T("There was an error initializing Microsoft Agent, code = 0x%x"), hRes); <br> <br>MessageBox(NULL,  <br>   szError,  <br>   kpszAppTitle,  <br>   MB_OK | MB_ICONERROR); <br>return -1; <br>} <br> <br>// Check to see if it is a compatible version <br> <br>if (!IsValidAgentVersion(pAgent)) { <br> <br>pAgent-&gt;Release(); <br> <br>MessageBox(NULL, <br>   _T("The version of Microsoft Agent installed on this system is out of date.\nUpgrade to a new version of Microsoft Agent."), <br>   kpszAppTitle, <br>   MB_OK | MB_ICONEXCLAMATION | MB_TOPMOST); <br>return -1; <br>} <br> <br>// Create a notify sink <br> <br>pSink = new AgentNotifySink; <br> <br>if (pSink == NULL) { <br> <br>MessageBox(NULL,  <br>   _T("Out of memory!"),  <br>   kpszAppTitle,  <br>   MB_OK | MB_ICONERROR); <br> <br>return -1; <br>} <br> <br>pSink-&gt;AddRef(); <br> <br>// And register it with Microsoft Agent <br> <br>hRes = pAgent-&gt;Register((IUnknown *)pSink, &amp;lNotifySinkID); <br> <br>if (FAILED(hRes)) <br>return -1; <br> <br>// Create a variant to store the full path of the character to load <br> <br>VariantInit(&amp;vPath); <br> <br>vPath.vt = VT_BSTR; <br>vPath.bstrVal = SysAllocString(kpwszCharacter); <br> <br>if (vPath.bstrVal == NULL) { <br> <br>MessageBox(NULL,  <br>   _T("Out of memory!"),  <br>   kpszAppTitle,  <br>   MB_OK | MB_ICONERROR); <br> <br>return -1; <br>} <br> <br>try { <br> <br>// Load the character <br> <br>hRes = pAgent-&gt;Load(vPath, &amp;lCharID, &amp;lRequestID); <br> <br>if (FAILED(hRes)) <br>throw hRes; <br> <br>// Get it's dispinterface <br> <br>hRes = pAgent-&gt;GetCharacter(lCharID, &amp;pdCharacter); <br> <br>if (FAILED(hRes)) <br>throw hRes; <br> <br>// Query for IAgentCharacter <br> <br>hRes = pdCharacter-&gt;QueryInterface(IID_IAgentCharacter, (LPVOID *)&amp;pCharacter); <br> <br>// Release the IDispatch <br> <br>pdCharacter-&gt;Release(); <br> <br>// Did we get the IAgentCharacter interface? <br> <br>if (FAILED(hRes)) <br>throw hRes; <br> <br>// Show the character.  The first parameter tells Microsoft <br>// Agent to show the character by playing an animation. <br> <br>hRes = pCharacter-&gt;Show(FALSE, &amp;lRequestID); <br> <br>if (FAILED(hRes)) <br>throw hRes; <br> <br>// Make the character speak <br> <br>bszSpeak = SysAllocString(L"Hello World!"); <br> <br>hRes = pCharacter-&gt;Speak(bszSpeak, NULL, &amp;g_lDone); <br> <br>SysFreeString(bszSpeak); <br> <br>if (FAILED(hRes)) <br>throw hRes; <br> <br>} <br>catch (HRESULT) { <br> <br>wsprintf(szError, _T("An error occurred in Microsoft Agent, code = 0x%x"), hRes); <br> <br>MessageBox(NULL,  <br>   szError,  <br>   kpszAppTitle,  <br>   MB_OK | MB_ICONERROR); <br>} <br> <br>// Start the message loop.  A WM_QUIT message will be posted <br>// when we get the RequestComplete notification from Microsoft Agent. <br> <br>if (SUCCEEDED(hRes)) { <br>while (GetMessage(&amp;msg, NULL, 0, 0) &gt; 0) <br>DispatchMessage(&amp;msg); <br>} <br> <br>// Clean up <br> <br>if (pCharacter) { <br> <br>// Release the character interface <br> <br>pCharacter-&gt;Release(); <br> <br>// Unload the character.  NOTE:  releasing the character <br>// interface does NOT make the character go away.  You must <br>// call Unload. <br> <br>pAgent-&gt;Unload(lCharID); <br>} <br> <br>// Release objects <br> <br>if (pSink) { <br> <br>if (lNotifySinkID != -1) <br>pAgent-&gt;Unregister(lNotifySinkID); <br> <br>pSink-&gt;Release(); <br>} <br> <br>pAgent-&gt;Release(); <br> <br>VariantClear(&amp;vPath); <br> <br>OleUninitialize(); <br> <br>return 0; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DISPTREE.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4224"></a>DISPTREE.CXX</h2>
<pre><code>//+------------------------------------------------------------------------- <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// FILE:     disptree.cxx <br>// <br>// PURPOSE:  Displays a command tree, for debugging. <br>// <br>// PLATFORM: Windows NT <br>// <br>//-------------------------------------------------------------------------- <br> <br>#define UNICODE <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;windows.h&gt; <br> <br>#define OLEDBVER 0x0200 // need the command tree definitions <br> <br>#include &lt;oledberr.h&gt; <br>#include &lt;oledb.h&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Function:   PrintVectorItems <br>// <br>//  Synopsis:   Prints items in a PROPVARIANT vector <br>// <br>//  Arguments:  [pVal]  - The array of values <br>//              [cVals] - The count of values <br>//              [pcFmt] - The format string <br>// <br>//-------------------------------------------------------------------------- <br> <br>template&lt;class T&gt; void PrintVectorItems( <br>    T *     pVal, <br>    ULONG   cVals, <br>    char *  pcFmt ) <br>{ <br>    printf( "{ " ); <br> <br>    for( ULONG iVal = 0; iVal &lt; cVals; iVal++ ) <br>    { <br>        if ( 0 != iVal ) <br>            printf( "," ); <br>        printf( pcFmt, *pVal++ ); <br>    } <br> <br>    printf( " }" ); <br>} //PrintVectorItems <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Function:   DisplayVariant <br>// <br>//  Synopsis:   Displays a PROPVARIANT.  This is not a complete <br>//              implementation; many VT_ types are not complete. <br>// <br>//  Arguments:  [pNode]  - The command tree node <br>//              [iLevel] - The 0-based level in the tree <br>// <br>//-------------------------------------------------------------------------- <br> <br>void DisplayVariant( PROPVARIANT * pVar ) <br>{ <br>    if ( 0 == pVar ) <br>    { <br>        printf( "NULL" ); <br>        return; <br>    } <br> <br>    PROPVARIANT &amp; v = *pVar; <br> <br>    switch ( v.vt ) <br>    { <br>        case VT_I4 : printf( "VT_I4 %d", v.lVal ); break; <br>        case VT_UI1 : printf( "VT_UI1 %d", v.bVal ); break; <br>        case VT_I2 : printf( "VT_I2 %d", v.iVal ); break; <br>        case VT_R4 : printf( "VT_R4 %f", v.fltVal ); break; <br>        case VT_R8 : printf( "VT_R8 %lf", v.dblVal ); break; <br>        case VT_BOOL : printf( "VT_BOOL %d", v.boolVal ); break; <br>        case VT_ERROR : printf( "VT_ERROR %#x", v.scode ); break; <br>        case VT_CY : printf( "VT_CY " ); break; <br>        case VT_DATE : printf( "VT_DATE " ); break; <br>        case VT_BSTR : printf( "VT_BSTR '%ws'", v.bstrVal ); break; <br>        case VT_UNKNOWN : printf( "VT_UNKNOWN " ); break; <br>        case VT_DISPATCH : printf( "VT_DISPATCH " ); break; <br>        case VT_BYREF|VT_UI1 : printf( "VT_BYREF|VT_UI1 " ); break; <br>        case VT_BYREF|VT_I2 : printf( "VT_BYREF|VT_I2 " ); break; <br>        case VT_BYREF|VT_I4 : printf( "VT_BYREF|VT_I4 " ); break; <br>        case VT_BYREF|VT_R4 : printf( "VT_BYREF|VT_R4 " ); break; <br>        case VT_BYREF|VT_R8 : printf( "VT_BYREF|VT_R8 " ); break; <br>        case VT_BYREF|VT_BOOL : printf( "VT_BYREF|VT_BOOL " ); break; <br>        case VT_BYREF|VT_ERROR : printf( "VT_BYREF|VT_ERROR " ); break; <br>        case VT_BYREF|VT_CY : printf( "VT_BYREF|VT_CY " ); break; <br>        case VT_BYREF|VT_DATE : printf( "VT_BYREF|VT_DATE " ); break; <br>        case VT_BYREF|VT_BSTR : printf( "VT_BYREF|VT_BSTR " ); break; <br>        case VT_BYREF|VT_UNKNOWN : printf( "VT_BYREF|VT_UNKNOWN " ); break; <br>        case VT_BYREF|VT_DISPATCH : printf( "VT_BYREF|VT_DISPATCH " ); break; <br>        case VT_BYREF|VT_ARRAY : printf( "VT_BYREF|VT_ARRAY " ); break; <br>        case VT_BYREF|VT_VARIANT : printf( "VT_BYREF|VT_VARIANT " ); break; <br>        case VT_I1 : printf( "VT_I1 %d", v.bVal ); break; <br>        case VT_UI2 : printf( "VT_UI2 %u", v.uiVal ); break; <br>        case VT_UI4 : printf( "VT_UI4 %u", v.ulVal ); break; <br>        case VT_INT : printf( "VT_INT %d", v.lVal ); break; <br>        case VT_UINT : printf( "VT_UINT %u", v.ulVal ); break; <br>        case VT_BYREF|VT_DECIMAL : printf( "VT_BYREF|VT_DECIMAL " ); break; <br>        case VT_BYREF|VT_I1 : printf( "VT_BYREF|VT_I1 " ); break; <br>        case VT_BYREF|VT_UI2 : printf( "VT_BYREF|VT_UI2 " ); break; <br>        case VT_BYREF|VT_UI4 : printf( "VT_BYREF|VT_UI4 " ); break; <br>        case VT_BYREF|VT_INT : printf( "VT_BYREF|VT_INT " ); break; <br>        case VT_BYREF|VT_UINT : printf( "VT_BYREF|VT_UINT " ); break; <br>        case VT_LPSTR : printf( "VT_LPSTR '%s'", v.pszVal ); break; <br>        case VT_LPWSTR : printf( "VT_LPWSTR '%ws'", v.pwszVal ); break; <br>        case VT_I8 : printf( "VT_I8 %I64d", v.hVal ); break; <br>        case VT_UI8 : printf( "VT_I8 %I64u", v.hVal ); break; <br>        case VT_VECTOR | VT_I1: <br>            printf( "VT_VECTOR | VT_I1 " ); <br>            PrintVectorItems( v.caub.pElems, v.caub.cElems, "%d" ); <br>            break; <br>        case VT_VECTOR | VT_I2: <br>            printf( "VT_VECTOR | VT_I2 " ); <br>            PrintVectorItems( v.cai.pElems, v.cai.cElems, "%d" ); <br>            break; <br>        case VT_VECTOR | VT_I4: <br>            printf( "VT_VECTOR | VT_I4 " ); <br>            PrintVectorItems( v.cal.pElems, v.cal.cElems, "%d" ); <br>            break; <br>        case VT_VECTOR | VT_I8: <br>            printf( "VT_VECTOR | VT_I8 " ); <br>            PrintVectorItems( v.cah.pElems, v.cah.cElems, "%I64d" ); <br>            break; <br>        case VT_VECTOR | VT_UI1: <br>            printf( "VT_VECTOR | VT_UI1 " ); <br>            PrintVectorItems( v.caub.pElems, v.caub.cElems, "%u" ); <br>            break; <br>        case VT_VECTOR | VT_UI2: <br>            printf( "VT_VECTOR | VT_UI2 " ); <br>            PrintVectorItems( v.caui.pElems, v.caui.cElems, "%u" ); <br>            break; <br>        case VT_VECTOR | VT_UI4: <br>            printf( "VT_VECTOR | VT_UI4 " ); <br>            PrintVectorItems( v.caul.pElems, v.caul.cElems, "%u" ); <br>            break; <br>        case VT_VECTOR | VT_UI8: <br>            printf( "VT_VECTOR | VT_UI8 " ); <br>            PrintVectorItems( v.cauh.pElems, v.cauh.cElems, "%I64u" ); <br>            break; <br>        case VT_VECTOR | VT_BSTR: <br>            printf( "VT_VECTOR | VT_BSTR " ); <br>            PrintVectorItems( v.cabstr.pElems, v.cabstr.cElems, "%ws" ); <br>            break; <br>        case VT_VECTOR | VT_LPSTR: <br>            printf( "VT_VECTOR | VT_LPSTR " ); <br>            PrintVectorItems( v.calpstr.pElems, v.calpstr.cElems, "%s" ); <br>            break; <br>        case VT_VECTOR | VT_LPWSTR: <br>            printf( "VT_VECTOR | VT_LPWSTR " ); <br>            PrintVectorItems( v.calpwstr.pElems, v.calpwstr.cElems, "%ws" ); <br>            break; <br>        case VT_VECTOR | VT_R4: <br>            printf( "VT_VECTOR | VT_R4 " ); <br>            PrintVectorItems( v.caflt.pElems, v.caflt.cElems, "%f" ); <br>            break; <br>        case VT_VECTOR | VT_R8: <br>            printf( "VT_VECTOR | VT_R8 " ); <br>            PrintVectorItems( v.cadbl.pElems, v.cadbl.cElems, "%lf" ); <br>            break; <br>        default : printf( "unknown vt %#x", v.vt ); <br>    } <br>} //DisplayVariant <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Function:   PrintSpace <br>// <br>//  Synopsis:   Prints white space. <br>// <br>//  Arguments:  [cPlaces] - Number of levels to print <br>// <br>//-------------------------------------------------------------------------- <br> <br>void PrintSpace( ULONG cPlaces ) <br>{ <br>    for( ULONG iPlace = 0; iPlace &lt; cPlaces; iPlace++ ) <br>        printf( "  " ); <br>} //PrintSpace <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Function:   DisplayCommandTree <br>// <br>//  Synopsis:   Displays the command tree, useful for debugging.  This is <br>//              not a complete implementation; many DBVALUEKINDs are not <br>//              complete. <br>// <br>//  Arguments:  [pNode]  - The command tree node <br>//              [iLevel] - The 0-based level in the tree <br>// <br>//-------------------------------------------------------------------------- <br> <br>void DisplayCommandTree( <br>    DBCOMMANDTREE * pNode, <br>    ULONG           iLevel ) <br>{ <br>    PrintSpace( iLevel ); <br>    printf( "op: (%d) ", pNode-&gt;op ); <br>    switch ( pNode-&gt;op ) <br>    { <br>        case DBOP_scalar_constant : printf( "DBOP_scalar_constant" ); break; <br>        case DBOP_DEFAULT : printf( "DBOP_DEFAULT" ); break; <br>        case DBOP_NULL : printf( "DBOP_NULL" ); break; <br>        case DBOP_bookmark_name : printf( "DBOP_bookmark_name" ); break; <br>        case DBOP_catalog_name : printf( "DBOP_catalog_name" ); break; <br>        case DBOP_column_name : printf( "DBOP_column_name" ); break; <br>        case DBOP_schema_name : printf( "DBOP_schema_name" ); break; <br>        case DBOP_outall_name : printf( "DBOP_outall_name" ); break; <br>        case DBOP_qualifier_name : printf( "DBOP_qualifier_name" ); break; <br>        case DBOP_qualified_column_name : printf( "DBOP_qualified_column_name" ); break; <br>        case DBOP_table_name : printf( "DBOP_table_name" ); break; <br>        case DBOP_nested_table_name : printf( "DBOP_nested_table_name" ); break; <br>        case DBOP_nested_column_name : printf( "DBOP_nested_column_name" ); break; <br>        case DBOP_row : printf( "DBOP_row" ); break; <br>        case DBOP_table : printf( "DBOP_table" ); break; <br>        case DBOP_sort : printf( "DBOP_sort" ); break; <br>        case DBOP_distinct : printf( "DBOP_distinct" ); break; <br>        case DBOP_distinct_order_preserving : printf( "DBOP_distinct_order_preserving" ); break; <br>        case DBOP_alias : printf( "DBOP_alias" ); break; <br>        case DBOP_cross_join : printf( "DBOP_cross_join" ); break; <br>        case DBOP_union_join : printf( "DBOP_union_join" ); break; <br>        case DBOP_inner_join : printf( "DBOP_inner_join" ); break; <br>        case DBOP_left_semi_join : printf( "DBOP_left_semi_join" ); break; <br>        case DBOP_right_semi_join : printf( "DBOP_right_semi_join" ); break; <br>        case DBOP_left_anti_semi_join : printf( "DBOP_left_anti_semi_join" ); break; <br>        case DBOP_right_anti_semi_join : printf( "DBOP_right_anti_semi_join" ); break; <br>        case DBOP_left_outer_join : printf( "DBOP_left_outer_join" ); break; <br>        case DBOP_right_outer_join : printf( "DBOP_right_outer_join" ); break; <br>        case DBOP_full_outer_join : printf( "DBOP_full_outer_join" ); break; <br>        case DBOP_natural_join : printf( "DBOP_natural_join" ); break; <br>        case DBOP_natural_left_outer_join : printf( "DBOP_natural_left_outer_join" ); break; <br>        case DBOP_natural_right_outer_join : printf( "DBOP_natural_right_outer_join" ); break; <br>        case DBOP_natural_full_outer_join : printf( "DBOP_natural_full_outer_join" ); break; <br>        case DBOP_set_intersection : printf( "DBOP_set_intersection" ); break; <br>        case DBOP_set_union : printf( "DBOP_set_union" ); break; <br>        case DBOP_set_left_difference : printf( "DBOP_set_left_difference" ); break; <br>        case DBOP_set_right_difference : printf( "DBOP_set_right_difference" ); break; <br>        case DBOP_set_anti_difference : printf( "DBOP_set_anti_difference" ); break; <br>        case DBOP_bag_intersection : printf( "DBOP_bag_intersection" ); break; <br>        case DBOP_bag_union : printf( "DBOP_bag_union" ); break; <br>        case DBOP_bag_left_difference : printf( "DBOP_bag_left_difference" ); break; <br>        case DBOP_bag_right_difference : printf( "DBOP_bag_right_difference" ); break; <br>        case DBOP_bag_anti_difference : printf( "DBOP_bag_anti_difference" ); break; <br>        case DBOP_division : printf( "DBOP_division" ); break; <br>        case DBOP_relative_sampling : printf( "DBOP_relative_sampling" ); break; <br>        case DBOP_absolute_sampling : printf( "DBOP_absolute_sampling" ); break; <br>        case DBOP_transitive_closure : printf( "DBOP_transitive_closure" ); break; <br>        case DBOP_recursive_union : printf( "DBOP_recursive_union" ); break; <br>        case DBOP_aggregate : printf( "DBOP_aggregate" ); break; <br>        case DBOP_remote_table : printf( "DBOP_remote_table" ); break; <br>        case DBOP_select : printf( "DBOP_select" ); break; <br>        case DBOP_order_preserving_select : printf( "DBOP_order_preserving_select" ); break; <br>        case DBOP_project : printf( "DBOP_project" ); break; <br>        case DBOP_project_order_preserving : printf( "DBOP_project_order_preserving" ); break; <br>        case DBOP_top : printf( "DBOP_top" ); break; <br>        case DBOP_top_percent : printf( "DBOP_top_percent" ); break; <br>        case DBOP_top_plus_ties : printf( "DBOP_top_plus_ties" ); break; <br>        case DBOP_top_percent_plus_ties : printf( "DBOP_top_percent_plus_ties" ); break; <br>        case DBOP_rank : printf( "DBOP_rank" ); break; <br>        case DBOP_rank_ties_equally : printf( "DBOP_rank_ties_equally" ); break; <br>        case DBOP_rank_ties_equally_and_skip : printf( "DBOP_rank_ties_equally_and_skip" ); break; <br>        case DBOP_navigate : printf( "DBOP_navigate" ); break; <br>        case DBOP_nesting : printf( "DBOP_nesting" ); break; <br>        case DBOP_unnesting : printf( "DBOP_unnesting" ); break; <br>        case DBOP_nested_apply : printf( "DBOP_nested_apply" ); break; <br>        case DBOP_cross_tab : printf( "DBOP_cross_tab" ); break; <br>        case DBOP_is_NULL : printf( "DBOP_is_NULL" ); break; <br>        case DBOP_is_NOT_NULL : printf( "DBOP_is_NOT_NULL" ); break; <br>        case DBOP_equal : printf( "DBOP_equal" ); break; <br>        case DBOP_not_equal : printf( "DBOP_not_equal" ); break; <br>        case DBOP_less : printf( "DBOP_less" ); break; <br>        case DBOP_less_equal : printf( "DBOP_less_equal" ); break; <br>        case DBOP_greater : printf( "DBOP_greater" ); break; <br>        case DBOP_greater_equal : printf( "DBOP_greater_equal" ); break; <br>        case DBOP_equal_all : printf( "DBOP_equal_all" ); break; <br>        case DBOP_not_equal_all : printf( "DBOP_not_equal_all" ); break; <br>        case DBOP_less_all : printf( "DBOP_less_all" ); break; <br>        case DBOP_less_equal_all : printf( "DBOP_less_equal_all" ); break; <br>        case DBOP_greater_all : printf( "DBOP_greater_all" ); break; <br>        case DBOP_greater_equal_all : printf( "DBOP_greater_equal_all" ); break; <br>        case DBOP_equal_any : printf( "DBOP_equal_any" ); break; <br>        case DBOP_not_equal_any : printf( "DBOP_not_equal_any" ); break; <br>        case DBOP_less_any : printf( "DBOP_less_any" ); break; <br>        case DBOP_less_equal_any : printf( "DBOP_less_equal_any" ); break; <br>        case DBOP_greater_any : printf( "DBOP_greater_any" ); break; <br>        case DBOP_greater_equal_any : printf( "DBOP_greater_equal_any" ); break; <br>        case DBOP_anybits : printf( "DBOP_anybits" ); break; <br>        case DBOP_allbits : printf( "DBOP_allbits" ); break; <br>        case DBOP_anybits_any : printf( "DBOP_anybits_any" ); break; <br>        case DBOP_allbits_any : printf( "DBOP_allbits_any" ); break; <br>        case DBOP_anybits_all : printf( "DBOP_anybits_all" ); break; <br>        case DBOP_allbits_all : printf( "DBOP_allbits_all" ); break; <br>        case DBOP_between : printf( "DBOP_between" ); break; <br>        case DBOP_between_unordered : printf( "DBOP_between_unordered" ); break; <br>        case DBOP_match : printf( "DBOP_match" ); break; <br>        case DBOP_match_unique : printf( "DBOP_match_unique" ); break; <br>        case DBOP_match_partial : printf( "DBOP_match_partial" ); break; <br>        case DBOP_match_partial_unique : printf( "DBOP_match_partial_unique" ); break; <br>        case DBOP_match_full : printf( "DBOP_match_full" ); break; <br>        case DBOP_match_full_unique : printf( "DBOP_match_full_unique" ); break; <br>        case DBOP_scalar_parameter : printf( "DBOP_scalar_parameter" ); break; <br>        case DBOP_scalar_function : printf( "DBOP_scalar_function" ); break; <br>        case DBOP_plus : printf( "DBOP_plus" ); break; <br>        case DBOP_minus : printf( "DBOP_minus" ); break; <br>        case DBOP_times : printf( "DBOP_times" ); break; <br>        case DBOP_over : printf( "DBOP_over" ); break; <br>        case DBOP_div : printf( "DBOP_div" ); break; <br>        case DBOP_modulo : printf( "DBOP_modulo" ); break; <br>        case DBOP_power : printf( "DBOP_power" ); break; <br>        case DBOP_like : printf( "DBOP_like" ); break; <br>        case DBOP_sounds_like : printf( "DBOP_sounds_like" ); break; <br>        case DBOP_like_any : printf( "DBOP_like_any" ); break; <br>        case DBOP_like_all : printf( "DBOP_like_all" ); break; <br>        case DBOP_is_INVALID : printf( "DBOP_is_INVALID" ); break; <br>        case DBOP_is_TRUE : printf( "DBOP_is_TRUE" ); break; <br>        case DBOP_is_FALSE : printf( "DBOP_is_FALSE" ); break; <br>        case DBOP_and : printf( "DBOP_and" ); break; <br>        case DBOP_or : printf( "DBOP_or" ); break; <br>        case DBOP_xor : printf( "DBOP_xor" ); break; <br>        case DBOP_equivalent : printf( "DBOP_equivalent" ); break; <br>        case DBOP_not : printf( "DBOP_not" ); break; <br>        case DBOP_implies : printf( "DBOP_implies" ); break; <br>        case DBOP_overlaps : printf( "DBOP_overlaps" ); break; <br>        case DBOP_case_condition : printf( "DBOP_case_condition" ); break; <br>        case DBOP_case_value : printf( "DBOP_case_value" ); break; <br>        case DBOP_nullif : printf( "DBOP_nullif" ); break; <br>        case DBOP_cast : printf( "DBOP_cast" ); break; <br>        case DBOP_coalesce : printf( "DBOP_coalesce" ); break; <br>        case DBOP_position : printf( "DBOP_position" ); break; <br>        case DBOP_extract : printf( "DBOP_extract" ); break; <br>        case DBOP_char_length : printf( "DBOP_char_length" ); break; <br>        case DBOP_octet_length : printf( "DBOP_octet_length" ); break; <br>        case DBOP_bit_length : printf( "DBOP_bit_length" ); break; <br>        case DBOP_substring : printf( "DBOP_substring" ); break; <br>        case DBOP_upper : printf( "DBOP_upper" ); break; <br>        case DBOP_lower : printf( "DBOP_lower" ); break; <br>        case DBOP_trim : printf( "DBOP_trim" ); break; <br>        case DBOP_translate : printf( "DBOP_translate" ); break; <br>        case DBOP_convert : printf( "DBOP_convert" ); break; <br>        case DBOP_string_concat : printf( "DBOP_string_concat" ); break; <br>        case DBOP_current_date : printf( "DBOP_current_date" ); break; <br>        case DBOP_current_time : printf( "DBOP_current_time" ); break; <br>        case DBOP_current_timestamp : printf( "DBOP_current_timestamp" ); break; <br>        case DBOP_content_select : printf( "DBOP_content_select" ); break; <br>        case DBOP_content : printf( "DBOP_content" ); break; <br>        case DBOP_content_freetext : printf( "DBOP_content_freetext" ); break; <br>        case DBOP_content_proximity : printf( "DBOP_content_proximity" ); break; <br>        case DBOP_content_vector_or : printf( "DBOP_content_vector_or" ); break; <br>        case DBOP_delete : printf( "DBOP_delete" ); break; <br>        case DBOP_update : printf( "DBOP_update" ); break; <br>        case DBOP_insert : printf( "DBOP_insert" ); break; <br>        case DBOP_min : printf( "DBOP_min" ); break; <br>        case DBOP_max : printf( "DBOP_max" ); break; <br>        case DBOP_count : printf( "DBOP_count" ); break; <br>        case DBOP_sum : printf( "DBOP_sum" ); break; <br>        case DBOP_avg : printf( "DBOP_avg" ); break; <br>        case DBOP_any_sample : printf( "DBOP_any_sample" ); break; <br>        case DBOP_stddev : printf( "DBOP_stddev" ); break; <br>        case DBOP_stddev_pop : printf( "DBOP_stddev_pop" ); break; <br>        case DBOP_var : printf( "DBOP_var" ); break; <br>        case DBOP_var_pop : printf( "DBOP_var_pop" ); break; <br>        case DBOP_first : printf( "DBOP_first" ); break; <br>        case DBOP_last : printf( "DBOP_last" ); break; <br>        case DBOP_in : printf( "DBOP_in" ); break; <br>        case DBOP_exists : printf( "DBOP_exists" ); break; <br>        case DBOP_unique : printf( "DBOP_unique" ); break; <br>        case DBOP_subset : printf( "DBOP_subset" ); break; <br>        case DBOP_proper_subset : printf( "DBOP_proper_subset" ); break; <br>        case DBOP_superset : printf( "DBOP_superset" ); break; <br>        case DBOP_proper_superset : printf( "DBOP_proper_superset" ); break; <br>        case DBOP_disjoint : printf( "DBOP_disjoint" ); break; <br>        case DBOP_pass_through : printf( "DBOP_pass_through" ); break; <br>        case DBOP_defined_by_GUID : printf( "DBOP_defined_by_GUID" ); break; <br>        case DBOP_text_command : printf( "DBOP_text_command" ); break; <br>        case DBOP_SQL_select : printf( "DBOP_SQL_select" ); break; <br>        case DBOP_prior_command_tree : printf( "DBOP_prior_command_tree" ); break; <br>        case DBOP_add_columns : printf( "DBOP_add_columns" ); break; <br>        case DBOP_column_list_anchor : printf( "DBOP_column_list_anchor" ); break; <br>        case DBOP_column_list_element : printf( "DBOP_column_list_element" ); break; <br>        case DBOP_command_list_anchor : printf( "DBOP_command_list_anchor" ); break; <br>        case DBOP_command_list_element : printf( "DBOP_command_list_element" ); break; <br>        case DBOP_from_list_anchor : printf( "DBOP_from_list_anchor" ); break; <br>        case DBOP_from_list_element : printf( "DBOP_from_list_element" ); break; <br>        case DBOP_project_list_anchor : printf( "DBOP_project_list_anchor" ); break; <br>        case DBOP_project_list_element : printf( "DBOP_project_list_element" ); break; <br>        case DBOP_row_list_anchor : printf( "DBOP_row_list_anchor" ); break; <br>        case DBOP_row_list_element : printf( "DBOP_row_list_element" ); break; <br>        case DBOP_scalar_list_anchor : printf( "DBOP_scalar_list_anchor" ); break; <br>        case DBOP_scalar_list_element : printf( "DBOP_scalar_list_element" ); break; <br>        case DBOP_set_list_anchor : printf( "DBOP_set_list_anchor" ); break; <br>        case DBOP_set_list_element : printf( "DBOP_set_list_element" ); break; <br>        case DBOP_sort_list_anchor : printf( "DBOP_sort_list_anchor" ); break; <br>        case DBOP_sort_list_element : printf( "DBOP_sort_list_element" ); break; <br>        case DBOP_alter_character_set : printf( "DBOP_alter_character_set" ); break; <br>        case DBOP_alter_collation : printf( "DBOP_alter_collation" ); break; <br>        case DBOP_alter_domain : printf( "DBOP_alter_domain" ); break; <br>        case DBOP_alter_index : printf( "DBOP_alter_index" ); break; <br>        case DBOP_alter_procedure : printf( "DBOP_alter_procedure" ); break; <br>        case DBOP_alter_schema : printf( "DBOP_alter_schema" ); break; <br>        case DBOP_alter_table : printf( "DBOP_alter_table" ); break; <br>        case DBOP_alter_trigger : printf( "DBOP_alter_trigger" ); break; <br>        case DBOP_alter_view : printf( "DBOP_alter_view" ); break; <br>        case DBOP_coldef_list_anchor : printf( "DBOP_coldef_list_anchor" ); break; <br>        case DBOP_coldef_list_element : printf( "DBOP_coldef_list_element" ); break; <br>        case DBOP_create_assertion : printf( "DBOP_create_assertion" ); break; <br>        case DBOP_create_character_set : printf( "DBOP_create_character_set" ); break; <br>        case DBOP_create_collation : printf( "DBOP_create_collation" ); break; <br>        case DBOP_create_domain : printf( "DBOP_create_domain" ); break; <br>        case DBOP_create_index : printf( "DBOP_create_index" ); break; <br>        case DBOP_create_procedure : printf( "DBOP_create_procedure" ); break; <br>        case DBOP_create_schema : printf( "DBOP_create_schema" ); break; <br>        case DBOP_create_synonym : printf( "DBOP_create_synonym" ); break; <br>        case DBOP_create_table : printf( "DBOP_create_table" ); break; <br>        case DBOP_create_temporary_table : printf( "DBOP_create_temporary_table" ); break; <br>        case DBOP_create_translation : printf( "DBOP_create_translation" ); break; <br>        case DBOP_create_trigger : printf( "DBOP_create_trigger" ); break; <br>        case DBOP_create_view : printf( "DBOP_create_view" ); break; <br>        case DBOP_drop_assertion : printf( "DBOP_drop_assertion" ); break; <br>        case DBOP_drop_character_set : printf( "DBOP_drop_character_set" ); break; <br>        case DBOP_drop_collation : printf( "DBOP_drop_collation" ); break; <br>        case DBOP_drop_domain : printf( "DBOP_drop_domain" ); break; <br>        case DBOP_drop_index : printf( "DBOP_drop_index" ); break; <br>        case DBOP_drop_procedure : printf( "DBOP_drop_procedure" ); break; <br>        case DBOP_drop_schema : printf( "DBOP_drop_schema" ); break; <br>        case DBOP_drop_synonym : printf( "DBOP_drop_synonym" ); break; <br>        case DBOP_drop_table : printf( "DBOP_drop_table" ); break; <br>        case DBOP_drop_translation : printf( "DBOP_drop_translation" ); break; <br>        case DBOP_drop_trigger : printf( "DBOP_drop_trigger" ); break; <br>        case DBOP_drop_view : printf( "DBOP_drop_view" ); break; <br>        case DBOP_foreign_key : printf( "DBOP_foreign_key" ); break; <br>        case DBOP_grant_privileges : printf( "DBOP_grant_privileges" ); break; <br>        case DBOP_index_list_anchor : printf( "DBOP_index_list_anchor" ); break; <br>        case DBOP_index_list_element : printf( "DBOP_index_list_element" ); break; <br>        case DBOP_primary_key : printf( "DBOP_primary_key" ); break; <br>        case DBOP_property_list_anchor : printf( "DBOP_property_list_anchor" ); break; <br>        case DBOP_property_list_element : printf( "DBOP_property_list_element" ); break; <br>        case DBOP_referenced_table : printf( "DBOP_referenced_table" ); break; <br>        case DBOP_rename_object : printf( "DBOP_rename_object" ); break; <br>        case DBOP_revoke_privileges : printf( "DBOP_revoke_privileges" ); break; <br>        case DBOP_schema_authorization : printf( "DBOP_schema_authorization" ); break; <br>        case DBOP_unique_key : printf( "DBOP_unique_key" ); break; <br>        default : printf( "unknown DBOP" ); break; <br>    } <br> <br>    printf( "\n" ); <br> <br>    PrintSpace( iLevel ); <br>    printf( "wKind: (%d) ", pNode-&gt;wKind ); <br>    switch( pNode-&gt;wKind ) <br>    { <br>        case DBVALUEKIND_BYGUID : <br>        { <br>            printf( "DBVALUEKIND_BYGUID " ); <br>            break; <br>        } <br>        case DBVALUEKIND_COLDESC : <br>        { <br>            printf( "DBVALUEKIND_COLDESC " ); <br>            break; <br>        } <br>        case DBVALUEKIND_ID : <br>        { <br>            printf( "DBVALUEKIND_ID: " ); <br>            if ( 0 == pNode-&gt;value.pdbidValue ) <br>                printf( "NULL" ); <br>            else <br>            { <br>                DBKIND kind = pNode-&gt;value.pdbidValue-&gt;eKind; <br> <br>                if ( DBKIND_GUID        == kind || <br>                     DBKIND_GUID_NAME   == kind || <br>                     DBKIND_GUID_PROPID == kind ) <br>                { <br>                    GUID &amp;g = pNode-&gt;value.pdbidValue-&gt;uGuid.guid; <br>                    printf( "%8.8x-%4.4x-%4.4x-%2.2x%2.2x-" <br>                            "%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x", <br>                            g.Data1,g.Data2,g.Data3,g.Data4[0], <br>                            g.Data4[1],g.Data4[2],g.Data4[3],g.Data4[4], <br>                            g.Data4[5],g.Data4[6],g.Data4[7] ); <br>                } <br>                if ( DBKIND_GUID_PROPID == kind || <br>                     DBKIND_PROPID      == kind ) <br>                    printf( " %d", pNode-&gt;value.pdbidValue-&gt;uName.ulPropid ); <br>                if ( DBKIND_GUID_NAME == kind || <br>                     DBKIND_NAME      == kind ) <br>                    printf( " '%ws'", pNode-&gt;value.pdbidValue-&gt;uName.pwszName ); <br>            } <br>            break; <br>        } <br>        case DBVALUEKIND_CONTENT : <br>        { <br>            printf( "DBVALUEKIND_CONTENT: " ); <br>            if ( 0 == pNode-&gt;value.pdbcntntValue ) <br>                printf( "NULL" ); <br>            else <br>                printf( "'%ws', method %d, weight %d, lcid %#x", <br>                        pNode-&gt;value.pdbcntntValue-&gt;pwszPhrase, <br>                        pNode-&gt;value.pdbcntntValue-&gt;dwGenerateMethod, <br>                        pNode-&gt;value.pdbcntntValue-&gt;lWeight, <br>                        pNode-&gt;value.pdbcntntValue-&gt;lcid ); <br>            break; <br>        } <br>        case DBVALUEKIND_CONTENTVECTOR : <br>        { <br>            printf( "DBVALUEKIND_CONTENTVECTOR: " ); <br>            DBCONTENTVECTOR *p = pNode-&gt;value.pdbcntntvcValue; <br>            if ( 0 == p ) <br>                printf( "NULL" ); <br>            else <br>            { <br>                printf( "method %d, weight %d ", <br>                         p-&gt;dwRankingMethod, <br>                         p-&gt;lWeight ); <br>            } <br>            break; <br>        } <br>        case DBVALUEKIND_GROUPINFO : <br>        { <br>            printf( "DBVALUEKIND_GROUPINFO " ); <br>            break; <br>        } <br>        case DBVALUEKIND_PARAMETER : <br>        { <br>            printf( "DBVALUEKIND_PARAMETER " ); <br>            break; <br>        } <br>        case DBVALUEKIND_PROPERTY : <br>        { <br>            printf( "DBVALUEKIND_PROPERTY " ); <br>            break; <br>        } <br>        case DBVALUEKIND_SETFUNC : <br>        { <br>            printf( "DBVALUEKIND_SETFUNC " ); <br>            break; <br>        } <br>        case DBVALUEKIND_SORTINFO : <br>        { <br>            printf( "DBVALUEKIND_SORTINFO: " ); <br>            if ( 0 == pNode-&gt;value.pdbsrtinfValue ) <br>                printf( "NULL" ); <br>            else <br>                printf( "fDesc %d, lcid %#x", <br>                        pNode-&gt;value.pdbsrtinfValue-&gt;fDesc, <br>                        pNode-&gt;value.pdbsrtinfValue-&gt;lcid ); <br>            break; <br>        } <br>        case DBVALUEKIND_TEXT : <br>        { <br>            printf( "DBVALUEKIND_TEXT " ); <br>            break; <br>        } <br>        case DBVALUEKIND_COMMAND : <br>        { <br>            printf( "DBVALUEKIND_COMMAND " ); <br>            break; <br>        } <br>        case DBVALUEKIND_MONIKER : <br>        { <br>            printf( "DBVALUEKIND_MONIKER " ); <br>            break; <br>        } <br>        case DBVALUEKIND_ROWSET : <br>        { <br>            printf( "DBVALUEKIND_ROWSET " ); <br>            break; <br>        } <br>        case DBVALUEKIND_IDISPATCH : <br>        { <br>            printf( "DBVALUEKIND_IDISPATCH " ); <br>            break; <br>        } <br>        case DBVALUEKIND_IUNKNOWN : <br>        { <br>            printf( "DBVALUEKIND_IUNKNOWN " ); <br>            break; <br>        } <br>        case DBVALUEKIND_EMPTY : <br>        { <br>            printf( "DBVALUEKIND_EMPTY " ); <br>            break; <br>        } <br>        case DBVALUEKIND_NULL : <br>        { <br>            printf( "DBVALUEKIND_NULL " ); </code></pre>
<p>
</p>
<pre><code>break; <br>        } <br>        case DBVALUEKIND_I2 : <br>        { <br>            printf( "DBVALUEKIND_I2: %d", pNode-&gt;value.sValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_I4 : <br>        { <br>            printf( "DBVALUEKIND_I4: %d", pNode-&gt;value.lValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_R4 : <br>        { <br>            printf( "DBVALUEKIND_R4: %f", pNode-&gt;value.flValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_R8 : <br>        { <br>            printf( "DBVALUEKIND_R8: %lf", pNode-&gt;value.dblValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_CY : <br>        { <br>            printf( "DBVALUEKIND_CY " ); <br>            break; <br>        } <br>        case DBVALUEKIND_DATE : <br>        { <br>            printf( "DBVALUEKIND_DATE " ); <br>            break; <br>        } <br>        case DBVALUEKIND_BSTR : <br>        { <br>            printf( "DBVALUEKIND_BSTR: '%ws'", pNode-&gt;value.pbstrValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_ERROR : <br>        { <br>            printf( "DBVALUEKIND_ERROR: %d", pNode-&gt;value.scodeValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_BOOL : <br>        { <br>            printf( "DBVALUEKIND_BOOL: %d", pNode-&gt;value.fValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_VARIANT : <br>        { <br>            printf( "DBVALUEKIND_VARIANT " ); <br> <br>            // Index Server uses PROPVARIANTs (extended VARIANTs) <br> <br>            DisplayVariant( (PROPVARIANT *) pNode-&gt;value.pvarValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_I1 : <br>        { <br>            printf( "DBVALUEKIND_I1: %d", pNode-&gt;value.schValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_UI1 : <br>        { <br>            printf( "DBVALUEKIND_UI1: %ud", pNode-&gt;value.uchValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_UI2 : <br>        { <br>            printf( "DBVALUEKIND_UI2: %ud", pNode-&gt;value.usValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_UI4 : <br>        { <br>            printf( "DBVALUEKIND_UI4: %ud", pNode-&gt;value.ulValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_I8 : <br>        { <br>            printf( "DBVALUEKIND_I8: %I64d", pNode-&gt;value.llValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_UI8 : <br>        { <br>            printf( "DBVALUEKIND_UI8: %I64u", pNode-&gt;value.llValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_GUID : <br>        { <br>            printf( "DBVALUEKIND_GUID " ); <br>            break; <br>        } <br>        case DBVALUEKIND_BYTES : <br>        { <br>            printf( "DBVALUEKIND_BYTES " ); <br>            break; <br>        } <br>        case DBVALUEKIND_STR : <br>        { <br>            printf( "DBVALUEKIND_STR: '%s'", pNode-&gt;value.pzValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_WSTR : <br>        { <br>            printf( "DBVALUEKIND_WSTR: '%ws'", pNode-&gt;value.pwszValue ); <br>            break; <br>        } <br>        case DBVALUEKIND_NUMERIC : <br>        { <br>            printf( "DBVALUEKIND_NUMERIC " ); <br>            break; <br>        } <br>        case DBVALUEKIND_DBDATE : <br>        { <br>            printf( "DBVALUEKIND_DBDATE " ); <br>            break; <br>        } <br>        case DBVALUEKIND_DBTIME : <br>        { <br>            printf( "DBVALUEKIND_DBTIME " ); <br>            break; <br>        } <br>        case DBVALUEKIND_DBTIMESTAMP : <br>        { <br>            printf( "DBVALUEKIND_DBTIMESTAMP " ); <br>            break; <br>        } <br>        default : <br>        { <br>            printf( "unknown DBVALUEKIND " ); <br>            break; <br>        } <br>    } <br> <br>    printf( "\n" ); <br> <br>    if ( pNode-&gt;pctFirstChild ) <br>    { <br>        PrintSpace( iLevel ); <br>        printf( "first child:\n" ); <br>        DisplayCommandTree( pNode-&gt;pctFirstChild, iLevel + 1 ); <br>    } <br> <br>    if ( pNode-&gt;pctNextSibling ) <br>    { <br>        PrintSpace( iLevel ); <br>        printf( "next sibling:\n" ); <br>        DisplayCommandTree( pNode-&gt;pctNextSibling, iLevel + 1 ); <br>    } <br> <br>    if ( 0 == iLevel ) <br>        printf( "\n" ); <br>} //DisplayCommandTree <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

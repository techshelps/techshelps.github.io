<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATBAR.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4232"></a>STATBAR.CXX</h2>
<pre><code>/*++ <br> <br>Copyright 1992 - 1998 Microsoft Corporation, All rights reserved. <br> <br>    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>    PARTICULAR PURPOSE. <br> <br>Module Name: <br> <br>    statbar.cxx <br> <br>Abstract: <br> <br>    Functions required to support the status bar on the bottom of the window <br> <br>Revision History: <br> <br>    Steve Firebaugh     9-97          Created from previous samples <br> <br>--*/ <br> <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;commctrl.h&gt;           // prototypes and defs for common controls <br>#include "catq.h" <br> <br> <br> <br> <br>int catqCreateStatusBar(HWND hwnd) <br>/*++ <br> <br>    When the main window is created, call this function to create a status <br>     bar on the bottom of it.  Here, we also create a progress bar as a <br>     child of the status bar, and then size it in the partition routine. <br> <br>    Notice that the Win32 API InitCommonControls() must be called before <br>     this function in order for CreateWindowEx() to succeed with the <br>     window classes that we are using here. <br> <br>--*/ <br>{ <br>    HWND hwndStatusBar, hwndProgressBar; <br> <br>    hwndStatusBar = CreateWindowEx ( NULL, <br>                                     STATUSCLASSNAME, <br>                                     TEXT("Comments"), <br>                                     WS_CHILD | WS_VISIBLE | WS_BORDER, <br>                                     0,0,0,0, <br>                                     hwnd, <br>                                     (HMENU)DID_STATUSBAR, <br>                                     NULL, <br>                                     NULL); <br> <br> <br>    hwndProgressBar = CreateWindowEx ( NULL, <br>                                       PROGRESS_CLASS, <br>                                       TEXT(""), <br>                                       WS_CHILD | WS_VISIBLE | PBS_SMOOTH, <br>                                       0,0,20, 30, <br>                                       hwndStatusBar, <br>                                       (HMENU)DID_PROGRESSBAR, <br>                                       NULL, <br>                                       NULL); <br> <br>    catqPartitionStatusBar (hwndStatusBar); <br>    catqUpdateProgress (hwndStatusBar, CATQ_PROGRESS_ERROR, 0, 0) ; <br> <br>    return TRUE; <br>} <br> <br> <br> <br>int catqPartitionStatusBar(HWND hwndStatusBar) <br>/*++ <br> <br>    Divide the status bar up into separate "partitions." <br> <br>    hwndStatusBar - the window handle to the status bar <br> <br>--*/ <br>{ <br>    int   ptArray[3]; <br>    RECT  rect; <br>    HDC   hDC; <br>    int   iQuantum; <br> <br>    // <br>    // Fill in the ptArray values with the spacing of the different partitions. <br>    // <br> <br>    hDC = GetDC(hwndStatusBar); <br>    GetClientRect(hwndStatusBar, &amp;rect); <br>    ReleaseDC(hwndStatusBar, hDC); <br> <br>    iQuantum = rect.right; <br>    iQuantum -= rect.bottom; <br>    iQuantum /= 4; <br> <br>    ptArray[0] = iQuantum *2; <br>    ptArray[1] = ptArray[0] + iQuantum; <br>    ptArray[2] = ptArray[1] + iQuantum; <br> <br> <br>    // <br>    // Send this array to the status bar window... <br>    // <br> <br>    SendMessage(hwndStatusBar, <br>                SB_SETPARTS, <br>                sizeof(ptArray)/sizeof(ptArray[0]), <br>                (LPARAM)(LPINT)ptArray); <br> <br>    // <br>    // Now that the status bar is partitioned correctly, position the <br>    //  progress bar in the right most partition. <br>    // <br> <br>    SetWindowPos ( GetDlgItem (hwndStatusBar, DID_PROGRESSBAR), <br>                    NULL, <br>                    ptArray[1]+2, <br>                    2, <br>                    iQuantum, <br>                    rect.bottom-2, <br>                    SWP_NOZORDER); <br> <br>    return TRUE; <br> <br>} <br> <br> <br> <br> <br>int catqUpdateProgress( HWND hwndStatusBar, <br>                        int iProgress, <br>                        LONG lToBeFiltered, <br>                        LONG lTotal ) <br>/*++ <br> <br> <br>    hwndStatusBar - the window handle to the status bar <br> <br>--*/ <br>{ <br>#define SBTID_PROGRESS 1 <br> <br>    TCHAR lpszProgressString[MAX_PATH]; <br> <br>    if (iProgress == CATQ_PROGRESS_ERROR) <br>      wsprintf (lpszProgressString, TEXT("no CISVC status available")); <br>    else <br>      wsprintf (lpszProgressString, <br>                TEXT("To filter: %d / %d.  Done: %d %%"), <br>                lToBeFiltered, lTotal, <br>                iProgress); <br> <br>    SendMessage(hwndStatusBar, <br>                SB_SETTEXT, <br>                SBTID_PROGRESS, <br>                (LPARAM)lpszProgressString); <br> <br>    SendMessage (GetDlgItem (hwndStatusBar, DID_PROGRESSBAR), PBM_SETPOS, iProgress, 0); <br> <br>    return TRUE; <br>} <br> <br> <br> <br> <br>int catqUpdateStatusComment(HWND hwndStatusBar, LPTSTR lpszStatusString) <br>{ <br>/*++ <br> <br>    Set the second parameter string into the text of the status bar in <br>     the first partition.  This is where we report "comments" to the user. <br> <br>--*/ <br> <br>    SendMessage(hwndStatusBar, <br>                SB_SETTEXT, <br>                0, <br>                (LPARAM)lpszStatusString); <br> <br>    return TRUE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

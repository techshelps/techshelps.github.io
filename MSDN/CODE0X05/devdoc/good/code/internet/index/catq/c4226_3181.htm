<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVICE.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4231"></a>SERVICE.CXX</h2>
<pre><code>/*++ <br> <br>Copyright 1992 - 1998 Microsoft Corporation, All rights reserved. <br> <br>    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>    PARTICULAR PURPOSE. <br> <br>Module Name: <br> <br>    service.cxx <br> <br>Abstract: <br> <br>    Start the content indexing service (CISVC) <br> <br>Revision History: <br> <br>    Steve Firebaugh     9-97          Created from previous samples <br> <br>--*/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "catq.h" <br> <br> <br> <br>int catqStartCIService ( HWND hwnd ) <br>/*++ <br> <br>    Query the state of the content indexing service.  If it is not <br>     running, then attempt to start it up.  Access to the service <br>     is via the Windows NT "service control manager." <br> <br>--*/ <br>{ <br> <br>    SC_HANDLE   schCIService = NULL; <br>    SC_HANDLE   schSCManager = NULL; <br>    int iFunctionRet = TRUE;     // store function return value, assume success. <br>    int iLocalRet; <br>    SERVICE_STATUS ssStatus; <br>    TCHAR szBuffer[MAX_PATH]; <br> <br> <br>    // <br>    // Service control manager works by first "opening" it... <br>    // <br> <br>    schSCManager = OpenSCManager( <br>                        NULL,                   // machine (NULL == local) <br>                        NULL,                   // database (NULL == default) <br>                        SC_MANAGER_ALL_ACCESS); // access required <br> <br>    if (!schSCManager) { <br>        catqReportError ( GetLastError() ); <br>        iFunctionRet = FALSE; <br>        goto CloseSCAndReturn; <br>    } <br> <br> <br>    // <br>    // With the service control manager handle, now try and open the <br>    //  specific service that we are interested in. <br>    // <br> <br>    schCIService = OpenService (schSCManager, <br>                              SZ_CISERVICE_NAME,  // known name from .h file <br>                              SERVICE_ALL_ACCESS); <br> <br>    if (!schCIService) { <br>        catqReportError ( GetLastError() ); <br>        iFunctionRet = FALSE; <br>        goto CloseSCAndReturn; <br>    } <br> <br> <br>    // <br>    // With the CI service handle, now query its status <br>    // <br> <br>    iLocalRet = QueryServiceStatus (schCIService, &amp;ssStatus); <br> <br>    if (!iLocalRet) { <br>        catqReportError ( GetLastError() ); <br>        iFunctionRet = FALSE; <br>        goto CloseCIAndReturn; <br>    } <br> <br> <br>    // <br>    // Report to the user the status of the service <br>    // <br> <br>    wsprintf (szBuffer, TEXT("The service %s "), SZ_CISERVICE_NAME); <br>    switch ( ssStatus.dwCurrentState ) { <br>        case SERVICE_RUNNING: lstrcat (szBuffer, TEXT("is running.")); break; <br>        case SERVICE_PAUSED:  lstrcat (szBuffer, TEXT("was paused."));  break; <br>        case SERVICE_STOPPED: lstrcat (szBuffer, TEXT("was stopped.")); break; <br>        default:              lstrcat (szBuffer, TEXT("is pending.")); break; <br>    } // end switch <br> <br>    // <br>    // If it is stopped or paused, then try to start it. <br>    // <br> <br>    if ((ssStatus.dwCurrentState == SERVICE_STOPPED) || <br>        (ssStatus.dwCurrentState == SERVICE_PAUSED)) { <br>            lstrcat (szBuffer, TEXT(" ... Attempting to start it.")); <br> <br>            iLocalRet = StartService (schCIService, 0, NULL); <br>            if (!iLocalRet) { <br>                catqReportError ( GetLastError() ); <br>                iFunctionRet = FALSE; <br>                goto CloseCIAndReturn; <br>            } <br>    } <br> <br> <br>    // <br>    // Exit this function here at the end to ensure that the SC Manager <br>    //  handle is freed correctly. <br>    // <br> <br>CloseCIAndReturn: <br> <br>    catqLogComment (szBuffer); <br> <br>    CloseServiceHandle(schCIService); <br> <br>CloseSCAndReturn: <br> <br>    CloseServiceHandle(schSCManager); <br> <br>    return iFunctionRet; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

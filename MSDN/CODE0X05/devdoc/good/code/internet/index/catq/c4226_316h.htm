<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROGRESS.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4229"></a>PROGRESS.CXX</h2>
<pre><code>/*++ <br> <br>Copyright 1992 - 1998 Microsoft Corporation, All rights reserved. <br> <br>    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>    PARTICULAR PURPOSE. <br> <br>Module Name: <br> <br>    pdhprog.cxx <br> <br>Abstract: <br> <br>    functions to query the performance data helper (PDH) DLL in order to <br>     get the current status of the content indexing effort. <br> <br>Revision History: <br> <br>    Steve Firebaugh     9-97          Created from previous samples <br> <br>--*/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;pdh.h&gt; <br>#include "catq.h" <br> <br> <br>// <br>// Here are the names of two of the performance counters that the CISVC <br>//  service logs to the performance registry.  See Content Indexing doc. <br>//  (or perfmon) for the others. <br>// <br> <br>#define PSZ_COUNTER_TOBEFILTERED TEXT ("\\\\.\\Content Index(System)\\Files to be filtered") <br>#define PSZ_COUNTER_TOTALNUMDOCS TEXT ("\\\\.\\Content Index(System)\\Total # documents") <br> <br> <br> <br>int catqPDHQueryProgress ( LPLONG lpToBeFiltered, LPLONG lpTotal) <br>/*++ <br> <br>    Query the current status of the content indexing service by <br>     querying performance data via the "performance data helper" DLL <br>     (first introduced in NT4 and now a part of the operating system). <br>     The return value is the approximate percentage complete, the two <br>     long parameters are the numerator and denominator of that ratio. <br> <br>    Return value in [0,100] if success, else CATQ_PROGRESS_ERROR <br> <br>--*/ <br>{ <br>    int        iReturn = CATQ_PROGRESS_ERROR; <br>    HQUERY     hQuery; <br>    HCOUNTER   arCounter[2] = {0,0}; <br>    PDH_STATUS pdhStatus; <br>    PDH_FMT_COUNTERVALUE   arFmtValue[2]; <br>    DWORD           ctrType; <br> <br>    // <br>    // First step in using PDH is to open a "query"... <br>    // <br> <br>    pdhStatus = PdhOpenQuery (0, 0, &amp;hQuery); <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhOpenQuery failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br> <br>    // <br>    // With the query handle, we now add two "counters"... <br>    // <br> <br>    pdhStatus = PdhAddCounter (hQuery, <br>                               PSZ_COUNTER_TOBEFILTERED, <br>                               0, <br>                               &amp;arCounter[0]); <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhAddCounter failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br>    pdhStatus = PdhAddCounter (hQuery, <br>                               PSZ_COUNTER_TOTALNUMDOCS, <br>                               0, <br>                               &amp;arCounter[1]); <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhAddCounter failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br>    // <br>    // Now that everything is setup, actually do the query to bind <br>    //  values to the counters... <br>    // <br> <br>    pdhStatus = PdhCollectQueryData (hQuery); <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhCollectQueryData failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br> <br>    // <br>    // And finally, get the formatted values... <br>    // <br> <br>    pdhStatus = PdhGetFormattedCounterValue (arCounter[0], <br>                                             PDH_FMT_LONG, <br>                                             &amp;ctrType, <br>                                             &amp;arFmtValue[0]); <br> <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhGetFormattedCounterValue failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br>    *lpToBeFiltered = arFmtValue[0].longValue; <br> <br>    pdhStatus = PdhGetFormattedCounterValue (arCounter[1], <br>                                             PDH_FMT_LONG, <br>                                             &amp;ctrType, <br>                                             &amp;arFmtValue[1]); <br> <br>    if (pdhStatus != ERROR_SUCCESS) { <br>      catqLogComment (TEXT("PdhGetFormattedCounterValue failed")); <br>      goto ClosePDHAndReturn; <br>    } <br> <br>    *lpTotal = arFmtValue[1].longValue; <br> <br> <br>    // <br>    // We succeeded in getting formatted performance data. <br>    //  Compute the return value, clip it to the spec.ed bounds... <br>    // <br> <br>    if (*lpTotal != 0) <br>      iReturn = (int) (((*lpTotal - *lpToBeFiltered) *100 ) / *lpTotal); <br> <br>    if (iReturn &lt;0 )   iReturn = 0; <br>    if (iReturn &gt;100 ) iReturn = 100; <br> <br> <br>    // <br>    // Close the handle and return. <br>    // <br> <br>ClosePDHAndReturn: <br> <br>    PdhRemoveCounter( arCounter[0] ); <br>    PdhRemoveCounter( arCounter[1] ); <br> <br>    pdhStatus = PdhCloseQuery (hQuery); <br>    return iReturn; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>START.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4261"></a>START.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       start.cxx <br>// <br>//  Contents:   Parsing algorithm at the beginning of an Html file <br>// <br>//  Classes:    CStartOfFileElement <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;start.hxx&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CStartOfFileElement::CStartOfFileElement <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]    -- Html IFilter <br>//              [serialStream]   -- Input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CStartOfFileElement::CStartOfFileElement( CHtmlIFilter&amp; htmlIFilter, <br>                                          CSerialStream&amp; serialStream ) <br>    : CHtmlElement(htmlIFilter, serialStream) <br>{ <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CStartOfFileElement::GetChunk <br>// <br>//  Synopsis:   Gets the next chunk and returns chunk information in pStat <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CStartOfFileElement::GetChunk( STAT_CHUNK * pStat ) <br>{ <br>    // <br>    // This is the first GetChunk call ever, hence setup the correct <br>    // Html Element <br>    // <br>    SCODE sc = SwitchToNextHtmlElement( pStat ); <br> <br>    return sc; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CStartOfFileElement::GetText <br>// <br>//  Synopsis:   Retrieves text from current chunk <br>// <br>//  Arguments:  [pcwcOutput] -- count of UniCode characters in buffer <br>//              [awcBuffer]  -- buffer for text <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CStartOfFileElement::GetText( ULONG *pcwcOutput, WCHAR *awcBuffer ) <br>{ <br>    // <br>    // CStartOfFile is used to set up the first chunk correctly, and the first <br>    // chunk cannot be of type CStartOfFile <br>    // <br>    Win4Assert( !"CStartOfFileElement::GetText() call unexpected" ); <br> <br>    return E_FAIL; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CStartOfFileElement::InitStatChunk <br>// <br>//  Synopsis:   Initializes the STAT_CHUNK <br>// <br>//  Arguments:  [pStat] -- STAT_CHUNK to initialize <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CStartOfFileElement::InitStatChunk( STAT_CHUNK *pStat ) <br>{ <br>    Win4Assert( !"CStartOfFileElement::InitStatChunk() call unexpected" ); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

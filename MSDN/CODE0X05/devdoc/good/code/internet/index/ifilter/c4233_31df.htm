<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEXTELEM.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4263"></a>TEXTELEM.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       textelem.cxx <br>// <br>//  Contents:   Parsing algorithm for vanilla text in Html <br>// <br>//  Classes:    CTextElement <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;textelem.hxx&gt; <br>#include &lt;htmlguid.hxx&gt; <br>#include &lt;stgprop.h&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTextElement::CTextElement <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]    -- Html IFilter <br>//              [serialStream]   -- Input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CTextElement::CTextElement( CHtmlIFilter&amp; htmlIFilter, <br>                            CSerialStream&amp; serialStream ) <br>    : CHtmlElement(htmlIFilter, serialStream), <br>      _fNoMoreText(TRUE), <br>      _eTokTypeNext(GenericToken), <br>      _idChunk(0), <br>      _cTextChars(0) <br>{ <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTextElement::GetChunk <br>// <br>//  Synopsis:   Gets the next chunk and returns chunk information in pStat <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CTextElement::GetChunk( STAT_CHUNK * pStat ) <br>{ <br>    if ( _serialStream.Eof() ) <br>        return FILTER_E_END_OF_CHUNKS; <br> <br>    if ( _fNoMoreText ) <br>    { <br>        // <br>        // This is the GetChunk call after we've returned FILTER_E_NO_MORE_TEXT <br>        // for the previous chunk <br>        // <br>        CHtmlElement *pHtmlElemNext = _htmlIFilter.QueryHtmlElement( _eTokTypeNext ); <br>        Win4Assert( pHtmlElemNext ); <br>        pHtmlElemNext-&gt;InitStatChunk( pStat ); <br>        _htmlIFilter.ChangeState( pHtmlElemNext ); <br>    } <br>    else <br>    { <br>        // <br>        // GetChunk was called even though we had not returned <br>        // FILTER_E_NO_MORE_TEXT. <br>        // <br>        SCODE sc = SkipRemainingTextAndGotoNextChunk( pStat ); <br> <br>        return sc; <br>    } <br> <br>    return S_OK; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTextElement::GetText <br>// <br>//  Synopsis:   Retrieves text from current chunk <br>// <br>//  Arguments:  [pcwcOutput] -- count of UniCode characters in buffer <br>//              [awcBuffer]  -- buffer for text <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CTextElement::GetText( ULONG *pcwcOutput, WCHAR *awcBuffer ) <br>{ <br>    if ( _fNoMoreText || _serialStream.Eof() ) <br>    { <br>        *pcwcOutput = 0; <br>        return FILTER_E_NO_MORE_TEXT; <br>    } <br> <br>    ULONG cCharsRead = 0;  // count of chars read from input <br>    while ( cCharsRead &lt; *pcwcOutput ) <br>    { <br>        CToken token; <br>        ULONG cCharsScanned; <br>        ULONG cCharsNeeded = *pcwcOutput - cCharsRead; <br> <br>        _scanner.GetBlockOfChars( cCharsNeeded, <br>                                  awcBuffer + cCharsRead, <br>                                  cCharsScanned, <br>                                  token ); <br> <br>        cCharsRead += cCharsScanned; <br>        if ( cCharsScanned == cCharsNeeded ) <br>        { <br>            // <br>            // We've read the #chars requested by the user <br>            // <br>            break; <br>        } <br> <br>        HtmlTokenType eTokType = token.GetTokenType(); <br>        if ( eTokType == EofToken || _htmlIFilter.IsStopToken( token ) ) <br>        { <br>            // <br>            // End of file, or we've hit an interesting token <br>            // <br>            _fNoMoreText = TRUE; <br>            _eTokTypeNext = eTokType;         // Need the token type to set up the next chunk <br> <br>            break; <br>        } <br>        else if ( eTokType == BreakToken ) <br>        { <br>            // <br>            // Insert a newline char <br>            // <br>            Win4Assert( cCharsRead &lt; *pcwcOutput ); <br>            awcBuffer[cCharsRead++] = L'\n'; <br>            _scanner.EatTag(); <br>        } <br>        else <br>        { <br>            // <br>            // Skip over uninteresting tag and continue processing <br>            // <br>            _scanner.EatTag(); <br>        } <br>    } <br> <br>    *pcwcOutput = cCharsRead; <br> <br>    _cTextChars += cCharsRead; <br> <br>    if ( _fNoMoreText ) <br>        return FILTER_S_LAST_TEXT; <br>    else <br>        return S_OK; <br>} <br> <br> <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTextElement::InitStatChunk <br>// <br>//  Synopsis:   Initializes the STAT_CHUNK <br>// <br>//  Arguments:  [pStat] -- STAT_CHUNK to initialize <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CTextElement::InitStatChunk( STAT_CHUNK *pStat ) <br>{ <br>    // <br>    // There is more text to be returned <br>    // <br>    _fNoMoreText = FALSE; <br> <br>    pStat-&gt;idChunk = _htmlIFilter.GetNextChunkId(); <br>    pStat-&gt;flags = CHUNK_TEXT; <br>    pStat-&gt;locale = _htmlIFilter.GetLocale(); <br>    pStat-&gt;attribute.guidPropSet = CLSID_Storage; <br>    pStat-&gt;attribute.psProperty.ulKind = PRSPEC_PROPID; <br>    pStat-&gt;attribute.psProperty.propid = PID_STG_CONTENTS; <br>    pStat-&gt;breakType = CHUNK_EOS; <br>    pStat-&gt;idChunkSource = pStat-&gt;idChunk; <br>    pStat-&gt;cwcStartSource = 0; <br>    pStat-&gt;cwcLenSource = 0; <br> <br>    _idChunk = pStat-&gt;idChunk; <br>    _cTextChars = 0; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTextElement::InitFilterRegion <br>// <br>//  Synopsis:   Initializes the filter region corresponding to this chunk <br>// <br>//  Arguments:  [idChunkSource]  -- Id of source chunk <br>//              [cwcStartSource] -- Offset of source text in chunk <br>//              [cwcLenSource]   -- Length of source text in chunk <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CTextElement::InitFilterRegion( ULONG&amp; idChunkSource, <br>                                     ULONG&amp; cwcStartSource, <br>                                     ULONG&amp; cwcLenSource ) <br>{ <br>    idChunkSource = _idChunk; <br>    cwcStartSource = 0; <br>    cwcLenSource = _cTextChars; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

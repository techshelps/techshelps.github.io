<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TITLETAG.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4264"></a>TITLETAG.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       titletag.cxx <br>// <br>//  Contents:   Parsing algorithm for title tag in Html <br>// <br>//  Classes:    CTitleTag <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;titletag.hxx&gt; <br>#include &lt;htmlguid.hxx&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTitleTag::CTitleTag <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]  -- Reference to Html filter <br>//              [serialStream] -- Reference to input stream <br>//              [propSpec]     -- Property spec <br>//              [eTokType]     -- Token corresponding to this property <br>// <br>//-------------------------------------------------------------------------- <br> <br>CTitleTag::CTitleTag( CHtmlIFilter&amp; htmlIFilter, <br>                      CSerialStream&amp; serialStream, <br>                      CFullPropSpec&amp; propSpec, <br>                      HtmlTokenType eTokType ) <br>    : CPropertyTag(htmlIFilter, serialStream, propSpec, eTokType) <br>{ <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTitleTag::GetChunk <br>// <br>//  Synopsis:   Gets the next chunk and returns chunk information in pStat <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CTitleTag::GetChunk( STAT_CHUNK * pStat ) <br>{ <br>    switch ( _eState ) <br>    { <br>    case NoMoreProperty: <br>        _eState = FilteringValueProperty; <br> <br>        pStat-&gt;idChunk = _htmlIFilter.GetNextChunkId(); <br>        pStat-&gt;breakType = CHUNK_EOS; <br>        pStat-&gt;flags = CHUNK_VALUE; <br>        pStat-&gt;locale = _htmlIFilter.GetLocale(); <br>        pStat-&gt;attribute.guidPropSet = _propSpec.GetPropSet(); <br> <br>        Win4Assert( _propSpec.IsPropertyPropid() ); <br> <br>        pStat-&gt;attribute.psProperty.ulKind = PRSPEC_PROPID; <br>        pStat-&gt;attribute.psProperty.propid = _propSpec.GetPropertyPropid(); <br>        pStat-&gt;idChunkSource = _ulIdContentChunk; <br>        pStat-&gt;cwcStartSource = 0; <br>        pStat-&gt;cwcLenSource = 0; <br> <br>        return S_OK; <br> <br>    case FilteringValueProperty: <br>    case NoMoreValueProperty: <br>        // <br>        // Skip over the end property tag <br>        // <br>        _scanner.EatTag(); <br> <br>        return SwitchToNextHtmlElement( pStat ); <br> <br>    default: <br>        return CPropertyTag::GetChunk( pStat ); <br>    } <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTitleTag::GetText <br>// <br>//  Synopsis:   Retrieves text from current chunk <br>// <br>//  Arguments:  [pcwcBuffer] -- count of UniCode characters in buffer <br>//              [awcBuffer]  -- buffer for text <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CTitleTag::GetText( ULONG *pcwcOutput, WCHAR *awcBuffer ) <br>{ <br>    switch ( _eState ) <br>    { <br>    case FilteringValueProperty: <br>    case NoMoreValueProperty: <br>        return FILTER_E_NO_TEXT; <br> <br>    default: <br>        return CPropertyTag::GetText( pcwcOutput, awcBuffer ); <br>    } <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CTitleTag::GetValue <br>// <br>//  Synopsis:   Retrieves value from current chunk <br>// <br>//  Arguments:  [ppPropValue] -- Value returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CTitleTag::GetValue( VARIANT **ppPropValue ) <br>{ <br>    switch (_eState) <br>    { <br>    case FilteringContent: <br>    case NoMoreContent: <br>    case FilteringProperty: <br>    case FilteringPropertyButContentNotFiltered: <br>    case NoMoreProperty: <br>        return FILTER_E_NO_VALUES; <br> <br>    case FilteringValueProperty: <br>    { <br>        ConcatenateProperty( L"\0", 1 );     // Null terminate for SetLPWSTR <br> <br>        PROPVARIANT *pPropVar = (PROPVARIANT *) CoTaskMemAlloc( sizeof PROPVARIANT ); <br>        if ( pPropVar == 0 ) <br>            return E_OUTOFMEMORY; <br> <br>        pPropVar-&gt;vt = VT_LPWSTR; <br>        int cb = ( wcslen(_pwcPropBuf) + 1 ) * sizeof( WCHAR ); <br>        pPropVar-&gt;pwszVal = (WCHAR *) CoTaskMemAlloc( cb ); <br> <br>        if ( pPropVar-&gt;pwszVal == 0 ) <br>        { <br>            CoTaskMemFree( (void *) pPropVar ); <br>            return E_OUTOFMEMORY; <br>        } <br> <br>        RtlCopyMemory( pPropVar-&gt;pwszVal, _pwcPropBuf, cb ); <br> <br>        *ppPropValue = pPropVar; <br> <br>        _eState = NoMoreValueProperty; <br>        return S_OK; <br>    } <br> <br>    case NoMoreValueProperty: <br>        return FILTER_E_NO_MORE_VALUES; <br> <br>    default: <br>        Win4Assert( !"Unknown value of _eState" ); <br>        htmlDebugOut(( DEB_ERROR, <br>                       "CTitleTag::GetValue, unknown value of _eState: %d\n", <br>                       _eState )); <br>        return E_FAIL; <br>    } <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

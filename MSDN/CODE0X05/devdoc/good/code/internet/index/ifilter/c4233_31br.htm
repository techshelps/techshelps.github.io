<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANCHOR.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4257"></a>ANCHOR.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       anchor.cxx <br>// <br>//  Contents:   Parsing algorithm for anchor tag in Html <br>// <br>//  Classes:    CAnchorTag <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;anchor.hxx&gt; <br>#include &lt;htmlguid.hxx&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CAnchorTag::CAnchorTag <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]    -- Html IFilter <br>//              [serialStream]   -- Input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CAnchorTag::CAnchorTag( CHtmlIFilter&amp; htmlIFilter, <br>                        CSerialStream&amp; serialStream ) <br>    : CHtmlElement(htmlIFilter, serialStream), <br>      _eState(StartAnchor), <br>      _pwcHrefBuf(0), <br>      _uLenHrefBuf(0), <br>      _cHrefChars(0), <br>      _cHrefCharsFiltered(0) <br>{ <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CAnchorTag::~CAnchorTag <br>// <br>//  Synopsis:   Destructor <br>// <br>//  Arguments:  [htmlIFilter]    -- Html IFilter <br>//              [serialStream]   -- Input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CAnchorTag::~CAnchorTag() <br>{ <br>    delete[] _pwcHrefBuf; <br>} <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CAnchorTag::GetChunk <br>// <br>//  Synopsis:   Gets the next chunk and returns chunk information in pStat <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CAnchorTag::GetChunk( STAT_CHUNK * pStat ) <br>{ <br>    // <br>    // Toggle state <br>    // <br>    if ( _eState == StartAnchor ) <br>        _eState = EndAnchor; <br>    else <br>        _eState = StartAnchor; <br> <br>    SCODE sc = SwitchToNextHtmlElement( pStat ); <br> <br>    return sc; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CAnchorTag::GetText <br>// <br>//  Synopsis:   Retrieves text from current chunk <br>// <br>//  Arguments:  [pcwcOutput] -- count of UniCode characters in buffer <br>//              [awcBuffer]  -- buffer for text <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CAnchorTag::GetText( ULONG *pcwcOutput, WCHAR *awcBuffer ) <br>{ <br>    if ( _eState == StartAnchor ) <br>    { <br>        *pcwcOutput = 0; <br>        return FILTER_E_NO_MORE_TEXT; <br>    } <br> <br>    ULONG cCharsRemaining = _cHrefChars - _cHrefCharsFiltered; <br> <br>    if ( cCharsRemaining == 0 ) <br>    { <br>        *pcwcOutput = 0; <br>        return FILTER_E_NO_MORE_TEXT; <br>    } <br> <br>    if ( *pcwcOutput &lt; cCharsRemaining ) <br>    { <br>        RtlCopyMemory( awcBuffer, <br>                       _pwcHrefBuf + _cHrefCharsFiltered, <br>                       *pcwcOutput * sizeof(WCHAR) ); <br>        _cHrefCharsFiltered += *pcwcOutput; <br> <br>        return S_OK; <br>    } <br>    else <br>    { <br>        RtlCopyMemory( awcBuffer, <br>                       _pwcHrefBuf + _cHrefCharsFiltered, <br>                       cCharsRemaining * sizeof(WCHAR) ); <br>        _cHrefCharsFiltered += cCharsRemaining; <br>        *pcwcOutput = cCharsRemaining; <br> <br>        return FILTER_S_LAST_TEXT; <br>    } <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CAnchorTag::InitStatChunk <br>// <br>//  Synopsis:   Initializes the STAT_CHUNK <br>// <br>//  Arguments:  [pStat] -- STAT_CHUNK to initialize <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CAnchorTag::InitStatChunk( STAT_CHUNK *pStat ) <br>{ <br>    pStat-&gt;idChunk = _htmlIFilter.GetNextChunkId(); <br>    pStat-&gt;flags = CHUNK_TEXT; <br>    pStat-&gt;locale = _htmlIFilter.GetLocale(); <br>    pStat-&gt;attribute.guidPropSet = CLSID_HtmlInformation; <br>    pStat-&gt;attribute.psProperty.ulKind = PRSPEC_PROPID; <br>    pStat-&gt;attribute.psProperty.propid = PID_HREF; <br>    pStat-&gt;breakType = CHUNK_EOS; <br> <br>    if ( _eState == StartAnchor) <br>    { <br>        // <br>        // Start tag, hence read href field into local buffer <br>        // <br>        _scanner.ReadTagIntoBuffer(); <br> <br>        WCHAR *pwcHrefBuf; <br>        unsigned cHrefChars; <br>        _scanner.ScanTagBuffer( L"href=\"", pwcHrefBuf, cHrefChars ); <br> <br>        // <br>        // Need to grow internal buffer ? <br>        // <br>        if ( cHrefChars &gt; _uLenHrefBuf ) <br>        { <br>            delete[] _pwcHrefBuf; <br>            _pwcHrefBuf = 0; <br>            _uLenHrefBuf = 0; <br> <br>            _pwcHrefBuf = newk(mtNewX, NULL) WCHAR[cHrefChars]; <br>            _uLenHrefBuf = cHrefChars; <br>        } <br> <br>        RtlCopyMemory( _pwcHrefBuf, pwcHrefBuf, cHrefChars*sizeof(WCHAR) ); <br>        _cHrefChars = cHrefChars; <br>        _cHrefCharsFiltered = 0; <br> <br>        pStat-&gt;idChunkSource = 0; <br>        pStat-&gt;cwcStartSource = 0; <br>        pStat-&gt;cwcLenSource = 0; <br>    } <br>    else <br>    { <br>        Win4Assert( _eState == EndAnchor ); <br> <br>        _scanner.EatTag(); <br> <br>        // <br>        // Set up the filter region to be the one between the start and end <br>        // anchor tags, i.e. the region belonging to the current Html element, <br>        // because we haven't changed state yet. <br>        // <br>        _htmlIFilter.GetCurHtmlElement()-&gt;InitFilterRegion( pStat-&gt;idChunkSource, <br>                                                            pStat-&gt;cwcStartSource, <br>                                                            pStat-&gt;cwcLenSource ); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

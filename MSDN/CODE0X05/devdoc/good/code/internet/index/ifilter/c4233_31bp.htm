<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPSPEC.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4255"></a>PROPSPEC.CXX</h2>
<pre><code>//+------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation <br>// <br>//  File:       propspec.cxx <br>// <br>//  Contents:   C++ wrappers for FULLPROPSPEC <br>// <br>//-------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;propspec.hxx&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CFullPropSpec::CFullPropSpec, public <br>// <br>//  Synopsis:   Default constructor <br>// <br>//  Effects:    Defines property with null guid and propid 0 <br>// <br>//-------------------------------------------------------------------------- <br> <br>CFullPropSpec::CFullPropSpec() <br>{ <br>    memset( &amp;_guidPropSet, 0, sizeof( _guidPropSet ) ); <br>    _psProperty.ulKind = PRSPEC_PROPID; <br>    _psProperty.propid = 0; <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CFullPropSpec::CFullPropSpec, public <br>// <br>//  Synopsis:   Construct propid based propspec <br>// <br>//  Arguments:  [guidPropSet]  -- Property set <br>//              [pidProperty] -- Property <br>// <br>//-------------------------------------------------------------------------- <br> <br>CFullPropSpec::CFullPropSpec( GUID const &amp; guidPropSet, PROPID pidProperty ) <br>        : _guidPropSet( guidPropSet ) <br>{ <br>    _psProperty.ulKind = PRSPEC_PROPID; <br>    _psProperty.propid = pidProperty; <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CFullPropSpec::CFullPropSpec, public <br>// <br>//  Synopsis:   Construct name based propspec <br>// <br>//  Arguments:  [guidPropSet] -- Property set <br>//              [wcsProperty] -- Property <br>// <br>//-------------------------------------------------------------------------- <br> <br>CFullPropSpec::CFullPropSpec( GUID const &amp; guidPropSet, <br>                              WCHAR const * wcsProperty ) <br>        : _guidPropSet( guidPropSet ) <br>{ <br>    _psProperty.ulKind = PRSPEC_PROPID; <br>    SetProperty( wcsProperty ); <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CFullPropSpec::CFullPropSpec, public <br>// <br>//  Synopsis:   Copy constructor <br>// <br>//  Arguments:  [src] -- Source property spec <br>// <br>//-------------------------------------------------------------------------- <br> <br>CFullPropSpec::CFullPropSpec( CFullPropSpec const &amp; src ) <br>        : _guidPropSet( src._guidPropSet ) <br>{ <br>    _psProperty.ulKind = src._psProperty.ulKind; <br> <br>    if ( _psProperty.ulKind == PRSPEC_LPWSTR ) <br>    { <br>        if ( src._psProperty.lpwstr ) <br>        { <br>            _psProperty.ulKind = PRSPEC_PROPID; <br>            SetProperty( src._psProperty.lpwstr ); <br>        } <br>        else <br>            _psProperty.lpwstr = 0; <br> <br>    } <br>    else <br>    { <br>        _psProperty.propid = src._psProperty.propid; <br>    } <br>} <br> <br>inline void * operator new( size_t size, void * p ) <br>{ <br>    return( p ); <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CFullPropSpec::operator=, public <br>// <br>//  Synopsis:   Assignment operator <br>// <br>//  Arguments:  [Property] -- Source property <br>// <br>//-------------------------------------------------------------------------- <br> <br>CFullPropSpec &amp; CFullPropSpec::operator=( CFullPropSpec const &amp; Property ) <br>{ <br>    // <br>    // Clean up. <br>    // <br> <br>    CFullPropSpec::~CFullPropSpec(); <br> <br>    new (this) CFullPropSpec( Property ); <br> <br>    return *this; <br>} <br> <br> <br>CFullPropSpec::~CFullPropSpec() <br>{ <br>    if ( _psProperty.ulKind == PRSPEC_LPWSTR &amp;&amp; <br>         _psProperty.lpwstr ) <br>    { <br>        CoTaskMemFree( _psProperty.lpwstr ); <br>    } <br>} <br> <br> <br>void CFullPropSpec::SetProperty( PROPID pidProperty ) <br>{ <br>    if ( _psProperty.ulKind == PRSPEC_LPWSTR &amp;&amp; <br>         0 != _psProperty.lpwstr ) <br>    { <br>        CoTaskMemFree( _psProperty.lpwstr ); <br>    } <br> <br>    _psProperty.ulKind = PRSPEC_PROPID; <br>    _psProperty.propid = pidProperty; <br>} <br> <br>BOOL CFullPropSpec::SetProperty( WCHAR const * wcsProperty ) <br>{ <br>    if ( _psProperty.ulKind == PRSPEC_LPWSTR &amp;&amp; <br>         0 != _psProperty.lpwstr ) <br>    { <br>        CoTaskMemFree( _psProperty.lpwstr ); <br>    } <br> <br>    _psProperty.ulKind = PRSPEC_LPWSTR; <br> <br>    int len = (wcslen( wcsProperty ) + 1) * sizeof( WCHAR ); <br> <br>    _psProperty.lpwstr = (WCHAR *)CoTaskMemAlloc( len ); <br> <br>    if ( 0 != _psProperty.lpwstr ) <br>    { <br>        memcpy( _psProperty.lpwstr, <br>                wcsProperty, <br>                len ); <br>        return( TRUE ); <br>    } <br>    else <br>    { <br>        _psProperty.lpwstr = 0; <br>        return( FALSE ); <br>    } <br>} <br> <br>int CFullPropSpec::operator==( CFullPropSpec const &amp; prop ) const <br>{ <br>    if ( memcmp( &amp;prop._guidPropSet, <br>                 &amp;_guidPropSet, <br>                 sizeof( _guidPropSet ) ) != 0 || <br>         prop._psProperty.ulKind != _psProperty.ulKind ) <br>    { <br>        return( 0 ); <br>    } <br> <br>    switch( _psProperty.ulKind ) <br>    { <br>    case PRSPEC_LPWSTR: <br>        return( _wcsicmp( GetPropertyName(), prop.GetPropertyName() ) == 0 ); <br>        break; <br> <br>    case PRSPEC_PROPID: <br>        return( GetPropertyPropid() == prop.GetPropertyPropid() ); <br>        break; <br> <br>    default: <br>        return( 0 ); <br>        break; <br>    } <br>} <br> <br>int CFullPropSpec::operator!=( CFullPropSpec const &amp; prop ) const <br>{ <br>    if (*this == prop) <br>        return( 0 ); <br>    else <br>        return( 1 ); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

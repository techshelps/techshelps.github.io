<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHARHASH.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4236"></a>CHARHASH.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       charhash.cxx <br>// <br>//  Contents:   Hash table that maps special characters to Unicode <br>// <br>//  Classes:    CSpecialCharHashTable <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;charhash.hxx&gt; <br>#include &lt;htmlfilt.hxx&gt; <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashEntry::CSpecialCharHashEntry <br>// <br>//  Synopsis:   Constructor <br>// <br>//-------------------------------------------------------------------------- <br> <br>CSpecialCharHashEntry::CSpecialCharHashEntry( WCHAR *pwszName, WCHAR wch ) <br>    : _wch(wch), <br>      _pHashEntryNext(0) <br>{ <br>    Win4Assert( wcslen(pwszName) + 1 &lt; MAX_TAG_LENGTH ); <br>    wcscpy( _wszName, pwszName ); <br>} <br> <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashTable::~CSpecialCharHashTable <br>// <br>//  Synopsis:   Destructor <br>// <br>//-------------------------------------------------------------------------- <br> <br>CSpecialCharHashTable::~CSpecialCharHashTable() <br>{ <br>    for ( unsigned i=0; i&lt;SPECIAL_CHAR_HASH_TABLE_SIZE; i++) <br>    { <br>        CSpecialCharHashEntry *pHashEntry = _aHashTable[i]; <br>        while ( pHashEntry != 0 ) <br>        { <br>            CSpecialCharHashEntry *pHashEntryNext = pHashEntry-&gt;GetNextHashEntry(); <br>            delete pHashEntry; <br>            pHashEntry = pHashEntryNext; <br>        } <br>    } <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashTable::Add <br>// <br>//  Synopsis:   Add a special char -&gt; Unicode char mapping <br>// <br>//  Arguments:  [pwszName] -- the special char <br>//              [wch]      -- the corresponding Unicode char <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CSpecialCharHashTable::Add( WCHAR *pwszName, WCHAR wch ) <br>{ <br>#if DBG == 1 <br>    // <br>    // Check for duplicate entries <br>    // <br>    WCHAR wchExisting; <br> <br>    BOOL fFound = Lookup( pwszName, wcslen(pwszName), wchExisting ); <br>    Win4Assert( !fFound ); <br>#endif <br> <br>    CSpecialCharHashEntry *pHashEntry = newk(mtNewX, NULL) CSpecialCharHashEntry( pwszName, <br>                                                                                  wch ); <br>    unsigned uHashValue = Hash( pwszName, wcslen(pwszName) ); <br>    pHashEntry-&gt;SetNextHashEntry( _aHashTable[uHashValue] ); <br>    _aHashTable[uHashValue] = pHashEntry; <br>} <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashTable::Lookup <br>// <br>//  Synopsis:   Return the Unicode mapping corresponding to given special char <br>// <br>//  Arguments:  [pwcInputBuf] -- input buffer <br>//              [uLen]      -- Length of input (not \0 terminated) <br>//              [wch]       -- Unicode mapping returned here <br>// <br>//  Returns:    True if a mapping was found in the hash table <br>// <br>//-------------------------------------------------------------------------- <br> <br>BOOL CSpecialCharHashTable::Lookup( WCHAR *pwcInputBuf, <br>                                    unsigned uLen, <br>                                    WCHAR&amp; wch ) <br>{ <br>    unsigned uHashValue = Hash( pwcInputBuf, uLen ); <br> <br>    Win4Assert( uHashValue &lt; SPECIAL_CHAR_HASH_TABLE_SIZE ); <br> <br>    for ( CSpecialCharHashEntry *pHashEntry = _aHashTable[uHashValue]; <br>          pHashEntry != 0; <br>          pHashEntry = pHashEntry-&gt;GetNextHashEntry() ) <br>    { <br>        if ( wcsncmp( pwcInputBuf, pHashEntry-&gt;GetName(), uLen ) == 0 ) <br>        { <br>            wch  = pHashEntry-&gt;GetWideChar(); <br>            return TRUE; <br>        } <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashTable::Hash <br>// <br>//  Synopsis:   Implements the hash function <br>// <br>//  Arguments:  [pwszName]  -- name to hash <br>//              [cLen]     -- length of pszName (it is not null terminated) <br>// <br>//  Returns:    Position of chained list in hash table <br>// <br>//-------------------------------------------------------------------------- <br> <br>unsigned CSpecialCharHashTable::Hash( WCHAR *pwszName, unsigned cLen ) <br>{ <br>    for ( ULONG uHashValue=0; cLen&gt;0; pwszName++ ) <br>    { <br>        uHashValue = *pwszName + 31 * uHashValue; <br>        cLen--; <br>    } <br> <br>    return uHashValue % SPECIAL_CHAR_HASH_TABLE_SIZE; <br>} <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CSpecialCharHashTable::CSpecialCharHashTable <br>// <br>//  Synopsis:   Constructor <br>// <br>//-------------------------------------------------------------------------- <br> <br>CSpecialCharHashTable::CSpecialCharHashTable() <br>{ <br>    for (unsigned i=0; i&lt;SPECIAL_CHAR_HASH_TABLE_SIZE; i++) <br>        _aHashTable[i] = 0; <br> <br>    // <br>    // Initialize the table with various Ascii string-&gt;Unicode mappings <br>    // <br> <br>    // <br>    // For lt and gt, use Unicode chars from private use area to avoid <br>    // collision with '&lt;' and '&gt;' chars in Html tags. These will be <br>    // mapped back to '&lt;' and '&gt;' by the scanner. <br>    // <br>    Add(L"lt",      PRIVATE_USE_MAPPING_FOR_LT); <br>    Add(L"gt",      PRIVATE_USE_MAPPING_FOR_GT); <br> <br>    Add(L"amp",     0x26); <br>    Add(L"quot",    0x22); <br>    Add(L"nbsp",    0xa0); <br>    Add(L"shy",     0xad); <br>    Add(L"Agrave",  0xc0); <br>    Add(L"agrave",  0xe0); <br>    Add(L"Aacute",  0xc1); <br>    Add(L"aacute",  0xe1); <br>    Add(L"Acirc",   0xc2); <br>    Add(L"acirc",   0xe2); <br>    Add(L"Atilde",  0xc3); <br>    Add(L"atilde",  0xe3); <br>    Add(L"Auml",    0xc4); <br>    Add(L"auml",    0xe4); <br>    Add(L"Aring",   0xc5); <br>    Add(L"aring",   0xe5); <br>    Add(L"AElig",   0xc6); <br>    Add(L"aelig",   0xe6); <br>    Add(L"Ccedil",  0xc7); <br>    Add(L"ccedil",  0xe7); <br>    Add(L"Egrave",  0xc8); <br>    Add(L"egrave",  0xe8); <br>    Add(L"Eacute",  0xc9); <br>    Add(L"eacute",  0xe9); <br>    Add(L"Ecirc",   0xca); <br>    Add(L"ecirc",   0xea); <br>    Add(L"Euml",    0xcb); <br>    Add(L"euml",    0xeb); <br>    Add(L"Igrave",  0xcc); <br>    Add(L"igrave",  0xec); <br>    Add(L"Iacute",  0xcd); <br>    Add(L"iacute",  0xed); <br>    Add(L"Icirc",   0xce); <br>    Add(L"icirc",   0xee); <br>    Add(L"Iuml",    0xcf); <br>    Add(L"iuml",    0xef); <br>    Add(L"ETH",     0xd0); <br>    Add(L"eth",     0xf0); <br>    Add(L"Ntilde",  0xd1); <br>    Add(L"ntilde",  0xf1); <br>    Add(L"Ograve",  0xd2); <br>    Add(L"ograve",  0xf2); <br>    Add(L"Oacute",  0xd3); <br>    Add(L"oacute",  0xf3); <br>    Add(L"Ocirc",   0xd4); <br>    Add(L"ocirc",   0xf4); <br>    Add(L"Otilde",  0xd5); <br>    Add(L"otilde",  0xf5); <br>    Add(L"Ouml",    0xd6); <br>    Add(L"ouml",    0xf6); <br>    Add(L"Oslash",  0xd8); <br>    Add(L"oslash",  0xf8); <br>    Add(L"Ugrave",  0xd9); <br>    Add(L"ugrave",  0xf9); <br>    Add(L"Uacute",  0xda); <br>    Add(L"uacute",  0xfa); <br>    Add(L"Ucirc",   0xdb); <br>    Add(L"ucirc",   0xfb); <br>    Add(L"Uuml",    0xdc); <br>    Add(L"uuml",    0xfc); <br>    Add(L"Yacute",  0xdd); <br>    Add(L"yacute",  0xfd); <br>    Add(L"THORN",   0xde); <br>    Add(L"thorn",   0xfe); <br>    Add(L"szlig",   0xdf); <br>    Add(L"yuml",    0xff); <br>    Add(L"iexcl",   0xa1); <br>    Add(L"cent",    0xa2); <br>    Add(L"pound",   0xa3); <br>    Add(L"curren",  0xa4); <br>    Add(L"yen",     0xa5); <br>    Add(L"brvbar",  0xa6); <br>    Add(L"sect",    0xa7); <br>    Add(L"die",     0xa8); <br>    Add(L"copy",    0xa9); <br>    Add(L"laquo",   0xab); <br>    Add(L"reg",     0xae); <br>    Add(L"macron",  0xaf); <br>    Add(L"deg",     0xb0); <br>    Add(L"plusmn",  0xb1); <br>    Add(L"sup2",    0xb2); <br>    Add(L"sup3",    0xb3); <br>    Add(L"acute",   0xb4); <br>    Add(L"micro",   0xb5); <br>    Add(L"para",    0xb6); <br>    Add(L"middot",  0xb7); <br>    Add(L"cedil",   0xb8); <br>    Add(L"supl",    0xb9); <br>    Add(L"raquo",   0xbb); <br>    Add(L"frac14",  0xbc); <br>    Add(L"frac12",  0xbd); <br>    Add(L"frac34",  0xbe); <br>    Add(L"iquest",  0xbf); <br>    Add(L"times",   0xd7); <br>    Add(L"divide",  0xf7); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

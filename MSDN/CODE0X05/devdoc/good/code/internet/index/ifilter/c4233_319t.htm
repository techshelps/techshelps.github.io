<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTMLELEM.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4241"></a>HTMLELEM.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       htmlelem.cxx <br>// <br>//  Contents:   Base class for Html element <br>// <br>//  Classes:    CHtmlElement <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;htmlelem.hxx&gt; <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CHtmlElement::CHtmlElement <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]     -- Reference to IFilter <br>//              [mmSerialStream]  -- Reference to input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CHtmlElement::CHtmlElement( CHtmlIFilter&amp; htmlIFilter, <br>                            CSerialStream&amp; serialStream ) <br>    : _htmlIFilter(htmlIFilter), <br>      _serialStream(serialStream), <br>      _scanner(htmlIFilter, serialStream) <br>{ <br>} <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CHtmlElement::GetValue <br>// <br>//  Synopsis:   Default implementation for returning value in current chunk <br>// <br>//  Arguments:  [ppPropValue]  -- Value returned here <br>// <br>//-------------------------------------------------------------------------- <br>SCODE CHtmlElement::GetValue( VARIANT ** ppPropValue ) <br>{ <br>    return FILTER_E_NO_VALUES; <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CHtmlElement::InitFilterRegion <br>// <br>//  Synopsis:   Initializes the filter region of a chunk to default value <br>// <br>//  Arguments:  [idChunkSource]  -- Id of source chunk <br>//              [cwcStartSource] -- Offset of source text in chunk <br>//              [cwcLenSource]   -- Length of source text in chunk <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CHtmlElement::InitFilterRegion( ULONG&amp; idChunkSource, <br>                                     ULONG&amp; cwcStartSource, <br>                                     ULONG&amp; cwcLenSource ) <br>{ <br>    idChunkSource = 0; <br>    cwcStartSource = 0; <br>    cwcLenSource = 0; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CHtmlElement::SwitchToNextHtmlElement <br>// <br>//  Synopsis:   Find the next Html element and switch to it's parsing algorithm <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CHtmlElement::SwitchToNextHtmlElement( STAT_CHUNK *pStat ) <br>{ <br>    CToken token; <br> <br>    _scanner.SkipCharsUntilNextRelevantToken( token ); <br>    HtmlTokenType eTokType = token.GetTokenType(); <br>    if ( eTokType == EofToken ) <br>        return FILTER_E_END_OF_CHUNKS; <br> <br>    CHtmlElement *pHtmlElemNext = _htmlIFilter.QueryHtmlElement( eTokType ); <br>    Win4Assert( pHtmlElemNext ); <br>    pHtmlElemNext-&gt;InitStatChunk( pStat ); <br>    _htmlIFilter.ChangeState( pHtmlElemNext ); <br> <br>    return S_OK; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CHtmlElement::SkipRemainingTextAndGotoNextChunk <br>// <br>//  Synopsis:   Move to the next chunk <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CHtmlElement::SkipRemainingTextAndGotoNextChunk( STAT_CHUNK *pStat ) <br>{ <br>    ULONG ulBufSize  = TEMP_BUFFER_SIZE; <br> <br>    // <br>    // Loop until text in current chunk has been exhausted <br>    // <br>    SCODE sc = GetText( &amp;ulBufSize, _aTempBuffer ); <br>    while ( SUCCEEDED(sc) ) <br>    { <br>        sc = GetText( &amp;ulBufSize, _aTempBuffer ); <br>    } <br> <br>    sc = GetChunk( pStat ); <br> <br>    return sc; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

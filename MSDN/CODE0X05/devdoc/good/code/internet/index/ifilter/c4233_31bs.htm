<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGACC32.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4258"></a>REGACC32.CXX</h2>
<pre><code>//+------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation <br>// <br>//  File:       RegAcc.hxx <br>// <br>//  Contents:   'Simple' registry access <br>// <br>// <br>//-------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;osv.hxx&gt; <br>#include &lt;regacc32.hxx&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CRegAccess::CRegAccess, public <br>// <br>//  Synopsis:   Initialize registry access object <br>// <br>//  Arguments:  [ulRelative] -- Position in registry from which [pwcsRegPath] <br>//                              begins. <br>//              [pwcsRegPath] -- Path to node. <br>// <br>//-------------------------------------------------------------------------- <br> <br>CRegAccess::CRegAccess( HKEY keyRelative, WCHAR const * pwcsRegPath ) <br>        : _hKey( (HKEY)0xFFFFFFFF ), <br>          _wcsPath( 0 ) <br>{ <br>    if ( GetOSVersion() == VER_PLATFORM_WIN32_NT ) <br>    { <br>        RegOpenKey( keyRelative, pwcsRegPath, &amp;_hKey ); <br>    } <br>    else // win95 <br>    { <br>        int nPathLen = wcslen( pwcsRegPath ) * 2;  // some multibyte chars are 2 bytes long <br> <br>        char * pszPath = new char [nPathLen]; <br> <br>        if ( NULL != pszPath ) <br>        { <br>            wcstombs( pszPath, pwcsRegPath, nPathLen ); <br> <br>            RegOpenKeyA( keyRelative, pszPath, &amp;_hKey ); <br>        } <br> <br>        delete [] pszPath; <br>    } <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CRegAccess::~CRegAccess, public <br>// <br>//  Synopsis:   Destructor <br>// <br>//-------------------------------------------------------------------------- <br> <br>CRegAccess::~CRegAccess() <br>{ <br>    RegCloseKey( _hKey ); <br>    delete [] _wcsPath; <br>} <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Member:     CRegAccess::Get, public <br>// <br>//  Synopsis:   Retrive value of specified key from registry. <br>// <br>//  Arguments:  [pwcsKey] -- Key to retrieve value of. <br>//              [wcsVal]  -- String stored here. <br>//              [cc]      -- Size (in characters) of [wcsVal] <br>// <br>//  Notes:      Key must be string for successful retrieval. <br>// <br>//-------------------------------------------------------------------------- <br> <br>BOOL CRegAccess::Get( WCHAR const * pwcsKey, WCHAR * wcsVal, unsigned cc ) <br>{ <br>    if ( _hKey == (HKEY)0xFFFFFFFF ) <br>        return FALSE; <br> <br>    DWORD dwType; <br>    DWORD cb = cc * sizeof(WCHAR); <br>    wcsVal[0] = 0; <br> <br>    BOOL fOk; <br> <br>    if ( GetOSVersion() == VER_PLATFORM_WIN32_NT ) <br>    { <br>        fOk = ( ERROR_SUCCESS == RegQueryValueEx( _hKey, <br>                                                  pwcsKey, <br>                                                  0, <br>                                                  &amp;dwType, <br>                                                  (BYTE *)wcsVal, <br>                                                  &amp;cb ) ) &amp;&amp; <br>              ( wcsVal[0] != 0 ); <br>    } <br>    else // win95 <br>    { <br>        // Worst case - size of multibyte == size of Unicode <br>        int nKeyLen = wcslen( pwcsKey ) * 2; <br> <br>        char * pszKey = new char [nKeyLen]; <br> <br>        if ( NULL != pszKey ) <br>        { <br>            char * pszVal = new char [cc*2]; <br> <br>            if ( NULL != pszVal ) <br>            { <br>                wcstombs( pszKey, pwcsKey, nKeyLen ); <br> <br>                fOk = (ERROR_SUCCESS == RegQueryValueExA( _hKey, <br>                                                          pszKey, <br>                                                          0, <br>                                                          &amp;dwType, <br>                                                         (BYTE *)pszVal, <br>                                                         &amp;cb ) ); <br> <br>                mbstowcs( wcsVal, pszVal, cb );     // cb since it will convert fewer when it hits terminator <br> <br>                delete [] pszVal; <br>            } <br>            else <br>            { <br>                fOk = FALSE; <br>            } <br> <br>            delete [] pszKey; <br>        } <br>        else <br>        { <br>            fOk = FALSE; <br>        } <br>    } <br> <br>    return fOk; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     StringToClsid <br>// <br>//  Synopsis:   Convert string containing CLSID to CLSID <br>// <br>//  Arguments:  [wszClass] -- string containg CLSID <br>//              [guidClass] -- output guid <br>// <br>//-------------------------------------------------------------------------- <br> <br>void StringToClsid( WCHAR *wszClass, GUID&amp; guidClass ) <br>{ <br>    wszClass[9] = 0; <br>    guidClass.Data1 = wcstoul( &amp;wszClass[1], 0, 16 ); <br>    wszClass[14] = 0; <br>    guidClass.Data2 = (USHORT)wcstoul( &amp;wszClass[10], 0, 16 ); <br>    wszClass[19] = 0; <br>    guidClass.Data3 = (USHORT)wcstoul( &amp;wszClass[15], 0, 16 ); <br> <br>    WCHAR wc = wszClass[22]; <br>    wszClass[22] = 0; <br>    guidClass.Data4[0] = (unsigned char)wcstoul( &amp;wszClass[20], 0, 16 ); <br>    wszClass[22] = wc; <br>    wszClass[24] = 0; <br>    guidClass.Data4[1] = (unsigned char)wcstoul( &amp;wszClass[22], 0, 16 ); <br> <br>    for ( int i = 0; i &lt; 6; i++ ) <br>    { <br>       wc = wszClass[27+i*2]; <br>       wszClass[27+i*2] = 0; <br>       guidClass.Data4[2+i] = (unsigned char)wcstoul( &amp;wszClass[25+i*2], 0, 16 ); <br>       wszClass[27+i*2] = wc; <br>    } <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CODEPAGE.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4237"></a>CODEPAGE.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright (C) Microsoft Corporation, 1991 - 1996 <br>// <br>//  File:   codepage.hxx <br>// <br>//  Contents:   Locale to codepage <br>// <br>//----------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;osv.hxx&gt; <br>#include &lt;codepage.hxx&gt; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   LocaleToCodepage <br>// <br>//  Purpose:    Returns a codepage from a locale <br>// <br>//  Arguments:  [lcid]  --  Locale <br>// <br>//  History:    08-Jul-96   SitaramR    Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>ULONG LocaleToCodepage( LCID lcid ) <br>{ <br>    const BUFFER_LENGTH = 10; <br>    WCHAR wcsCodePage[BUFFER_LENGTH]; <br>    int cwc; <br> <br>    if ( GetOSVersion() == VER_PLATFORM_WIN32_NT ) <br>    { <br>        cwc = GetLocaleInfoW( lcid, LOCALE_IDEFAULTANSICODEPAGE, wcsCodePage, BUFFER_LENGTH ); <br>    } <br>    else // win95 <br>    { <br>        char *pszCodePage = new char[BUFFER_LENGTH*2]; <br> <br>        if ( pszCodePage == NULL ) <br>        { <br>            cwc = 0; <br>            SetLastErrorEx( ERROR_INVALID_PARAMETER, SLE_ERROR ); <br>        } <br>        else <br>        { <br>            cwc = GetLocaleInfoA( lcid, <br>                                  LOCALE_IDEFAULTANSICODEPAGE, <br>                                  pszCodePage, <br>                                  BUFFER_LENGTH ); <br> <br>            if ( cwc &amp;&amp; mbstowcs( wcsCodePage, pszCodePage, cwc ) == -1 ) <br>            { <br>                cwc = 0; <br>                SetLastErrorEx( ERROR_INVALID_PARAMETER, SLE_ERROR ); <br>            } <br> <br>            delete [] pszCodePage; <br>            pszCodePage = NULL; <br>        } <br>    } <br> <br>    // <br>    // If error, return Ansi code page <br>    // <br>    if ( cwc == 0 ) <br>    { <br>         htmlDebugOut(( DEB_ERROR, "GetLocaleInfoW for lcid %d returned %d\n", lcid, GetLastError() )); <br> <br>         return CP_ACP; <br>    } <br> <br>    return wcstoul( wcsCodePage, 0 , 10 ); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INPUTTAG.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4248"></a>INPUTTAG.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       inputtag.cxx <br>// <br>//  Contents:   Parsing algorithm for input tag in Html <br>// <br>//  Classes:    CInputTag <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;pch.cxx&gt; <br>#pragma hdrstop <br> <br>#include &lt;inputtag.hxx&gt; <br>#include &lt;htmlguid.hxx&gt; <br>#include &lt;stgprop.h&gt; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CInputTag::CInputTag <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Arguments:  [htmlIFilter]    -- Html IFilter <br>//              [serialStream]   -- Input stream <br>// <br>//-------------------------------------------------------------------------- <br> <br>CInputTag::CInputTag( CHtmlIFilter&amp; htmlIFilter, <br>                      CSerialStream&amp; serialStream ) <br>    : CHtmlElement(htmlIFilter, serialStream), <br>      _pwcValueBuf(0), <br>      _cValueChars(0), <br>      _cValueCharsFiltered(0) <br>{ <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CInputTag::GetChunk <br>// <br>//  Synopsis:   Gets the next chunk and returns chunk information in pStat <br>// <br>//  Arguments:  [pStat] -- chunk information returned here <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CInputTag::GetChunk( STAT_CHUNK * pStat ) <br>{ <br>    SCODE sc = SwitchToNextHtmlElement( pStat ); <br> <br>    return sc; <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CInputTag::GetText <br>// <br>//  Synopsis:   Retrieves text from current chunk <br>// <br>//  Arguments:  [pcwcOutput] -- count of UniCode characters in buffer <br>//              [awcBuffer]  -- buffer for text <br>// <br>//-------------------------------------------------------------------------- <br> <br>SCODE CInputTag::GetText( ULONG *pcwcOutput, WCHAR *awcBuffer ) <br>{ <br>    ULONG cCharsRemaining = _cValueChars - _cValueCharsFiltered; <br> <br>    if ( cCharsRemaining == 0 ) <br>    { <br>        *pcwcOutput = 0; <br>        return FILTER_E_NO_MORE_TEXT; <br>    } <br> <br>    if ( *pcwcOutput &lt; cCharsRemaining ) <br>    { <br>        RtlCopyMemory( awcBuffer, <br>                       _pwcValueBuf + _cValueCharsFiltered, <br>                       *pcwcOutput * sizeof(WCHAR) ); <br>        _cValueCharsFiltered += *pcwcOutput; <br> <br>        return S_OK; <br>    } <br>    else <br>    { <br>        RtlCopyMemory( awcBuffer, <br>                       _pwcValueBuf + _cValueCharsFiltered, <br>                       cCharsRemaining * sizeof(WCHAR) ); <br>        _cValueCharsFiltered += cCharsRemaining; <br>        *pcwcOutput = cCharsRemaining; <br> <br>        return FILTER_S_LAST_TEXT; <br>    } <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Method:     CInputTag::InitStatChunk <br>// <br>//  Synopsis:   Initializes the STAT_CHUNK <br>// <br>//  Arguments:  [pStat] -- STAT_CHUNK to initialize <br>// <br>//-------------------------------------------------------------------------- <br> <br>void CInputTag::InitStatChunk( STAT_CHUNK *pStat ) <br>{ <br>    _cValueCharsFiltered = 0; <br> <br>    pStat-&gt;idChunk = _htmlIFilter.GetNextChunkId(); <br>    pStat-&gt;flags = CHUNK_TEXT; <br>    pStat-&gt;locale = _htmlIFilter.GetLocale(); <br>    pStat-&gt;attribute.guidPropSet = CLSID_Storage; <br>    pStat-&gt;attribute.psProperty.ulKind = PRSPEC_PROPID; <br>    pStat-&gt;attribute.psProperty.propid = PID_STG_CONTENTS; <br>    pStat-&gt;breakType = CHUNK_EOS; <br>    pStat-&gt;idChunkSource = pStat-&gt;idChunk; <br>    pStat-&gt;cwcStartSource = 0; <br>    pStat-&gt;cwcLenSource = 0; <br> <br>    _scanner.ReadTagIntoBuffer(); <br> <br>    // <br>    // Check input type <br>    // <br>    WCHAR *pwcType; <br>    unsigned cwcType; <br>    _scanner.ScanTagBuffer( L"type=\"", pwcType, cwcType ); <br> <br>    if ( cwcType == 6           // 6 == wcslen( L"hidden" ) <br>         &amp;&amp; _wcsnicmp( pwcType, L"hidden", 6 ) == 0 ) <br>    { <br>        // <br>        // Input is hidden, so don't output value field <br>        // <br>        _pwcValueBuf = 0; <br>        _cValueChars = 0; <br> <br>        return; <br>    } <br> <br>    // <br>    // Read the value field <br>    // <br>    _scanner.ScanTagBuffer( L"value=\"", _pwcValueBuf, _cValueChars ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>USERS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4568"></a>USERS.CPP</h2>
<pre><code>//************************************************************************* <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       users.cpp <br>//  Content:    This file contains user object manipulation functions. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include "ilstest.h" <br>#include "notify.h" <br> <br>//**************************************************************************** <br>// <br>// HRESULT EnumUsers(HWND hwnd, BOOL fShort) <br>// <br>// This function starts the user information display dialogs <br>// <br>//**************************************************************************** <br> <br>HRESULT EnumUsers(HWND hwnd, BOOL fShort) <br>{ <br>HRESULT hr = E_FAIL; <br>ULONG uReqID; <br>IIlsFilter *pFilter; <br>SERVERNODE *pNode; <br>POSITION pos; <br> <br>// Use the global USER filter <br>pFilter = g_pUserFilter; <br> <br>if(g_pServerList-&gt;IsEmpty()) <br>MyTextOut(TEXT("No server objects defined.\r\n")); <br>else <br>{ <br> <br>// Do the enumerations for all server objects  <br>// <br>pos = g_pServerList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pNode = (PSERVERNODE)g_pServerList-&gt;GetFromPosition(pos); <br> <br>if (fShort) // we are only interested in user names <br>{ <br>hr = g_pIls-&gt;EnumUserNames(pNode-&gt;pSrv, pFilter, NULL, &amp;uReqID); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIls::EnumUserNames(%x) pending for server %s.\r\n"), <br>uReqID, pNode-&gt;szName); <br>} <br>else <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::EnumUserNames fails."), hr); <br>} <br>} <br>else // retrieve the entire user object <br>{ <br>// set up the attributes object here so the  <br>// desired extended attributes get returned. <br>IIlsAttributes *pAttrib = NULL; <br>hr = GetNMAttributesObject(g_pIls, &amp;pAttrib); <br> <br>if (SUCCEEDED(hr)) <br>{ <br> <br>hr = g_pIls-&gt;EnumUsers(pNode-&gt;pSrv, pFilter, pAttrib, NULL, &amp;uReqID); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIls::EnumUsers(%x) pending for server %s.\r\n"), uReqID, pNode-&gt;szName); <br>} <br>else <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::EnumUsers fails."), hr); <br>} <br>} <br>} <br>g_pServerList-&gt;GetNext(pos); <br>} <br>} <br>return hr; <br>}; <br> <br>//**************************************************************************** <br>// <br>// HRESULT RegisterUser(HWND hwnd, IIlsUser *pu, IIlsServer *ps, LPTSTR szServerName) <br>// <br>// This function registers a specific user on all servers <br>// <br>//**************************************************************************** <br> <br>HRESULT RegisterUser(HWND hwnd, IIlsUser *pu, IIlsServer *ps, LPTSTR szServerName) <br>{ <br>HRESULT hr = E_FAIL; <br>ULONG uReqID; <br>LPTSTR szUserName; <br>BSTR bstrUserName; <br> <br> <br>// Get the user ID <br>// <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrUserName); <br> <br>if(SUCCEEDED(hr)) <br>BSTR_to_LPTSTR(&amp;szUserName, bstrUserName); <br>else <br>strcpy(szUserName, TEXT("&lt;unknown&gt;")); <br> <br>// Register the user <br>// <br>hr = pu-&gt;Register(ps, &amp;uReqID); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIlsUser::Register(%x) pending for user %s on server %s.\r\n"), <br>uReqID, szUserName, szServerName); <br>} <br>else <br>ErrorMessage(hwnd, TEXT("IIlsUser::Register fails."), hr); <br> <br>return hr; <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT UnregisterUser(HWND hwnd, IIlsUser *pu, BOOL fSilent) <br>// <br>// This function registers a specific user on all servers <br>// <br>//**************************************************************************** <br> <br>HRESULT UnregisterUser(HWND hwnd, IIlsUser *pu, BOOL fSilent) <br>{ <br>HRESULT hr = E_FAIL; <br>ULONG uReqID; <br>LPTSTR szUserName; <br>BSTR bstrUserName; <br> <br> <br>// Get the user ID <br>// <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrUserName); <br> <br>if(SUCCEEDED(hr)) <br>BSTR_to_LPTSTR(&amp;szUserName, bstrUserName); <br>else <br>strcpy(szUserName, TEXT("&lt;unknown&gt;")); <br> <br>// Unregister the user <br>// <br>hr = pu-&gt;Unregister(&amp;uReqID); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIlsUser::Unregister(%x) pending for user %s.\r\n"), <br>uReqID, szUserName); <br>} <br>else <br>{ <br>if(!fSilent) // Do we really want error messages? <br>ErrorMessage(hwnd, TEXT("IIlsUser::Unregister fails."), hr); <br>} <br> <br>return hr; <br>}; <br> <br>//**************************************************************************** <br>// <br>// HRESULT OnILSUserAdviseUnadvise(HWND hwnd, PILSUSER pIlsUser, BOOL fAdvise) <br>// <br>// This function enables/disables the user object notifications. <br>// <br>//**************************************************************************** <br> <br>HRESULT OnILSUserAdviseUnadvise(HWND hwnd, PUSERNODE pUserNode, BOOL fAdvise) <br>{ <br>IConnectionPointContainer *pcnpcnt; <br>HRESULT hr; <br> <br>// Get the ConnectionPointContainer <br>// <br>hr = pUserNode-&gt;pu-&gt;QueryInterface(IID_IConnectionPointContainer, <br>(void**)&amp;pcnpcnt); <br>if (FAILED(hr)) <br>{ <br>ErrorMessage(NULL, TEXT("Cannot query IID_IConnectionPointContainer: returns "), <br>hr); <br>} <br>else <br>{ <br>IConnectionPoint *pcnp; <br> <br>// Instead of an easy thing as follows <br>// Let's do the hard thing through enumeration <br>// <br>hr = pcnpcnt-&gt;FindConnectionPoint(IID_IIlsUserNotify, &amp;pcnp); <br> <br>if (hr != S_OK) <br>{ <br>ErrorMessage(NULL, TEXT("Cannot find ConnectionPoint: returns "), <br>hr);                 <br>} <br>else <br>{ <br>CIlsUserNotify *pun; <br> <br>if (fAdvise) <br>{ <br>DWORD dwCookie; <br> <br>pun = new CIlsUserNotify (hwnd); <br>hr = pcnp-&gt;Advise((IUnknown *)pun, &amp;dwCookie); <br> <br>if (hr == S_OK) <br>{ <br>MyTextOut(TEXT("User Advise succeeded.\r\n")); <br>pun-&gt;AddRef(); <br>pun-&gt;SetCookie(dwCookie); <br>pUserNode-&gt;puNotify = pun; <br>}; <br>} <br>else <br>{ <br>pun = pUserNode-&gt;puNotify; <br> <br>if (pun != NULL) <br>{ <br>hr = pcnp-&gt;Unadvise(pun-&gt;GetCookie()); <br> <br>if (hr == S_OK) <br>{ <br>MyTextOut(TEXT("User Unadvise succeeded.\r\n")); <br>pun-&gt;Release(); <br>pUserNode-&gt;puNotify = NULL; <br>}; <br>}; <br>}; <br>pcnp-&gt;Release(); <br>}; <br>pcnpcnt-&gt;Release(); <br>}; <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// int DisplayIlsUserInfo(HWND hwnd, IIlsUser *pu) <br>// <br>// Displays the "easy" attributes for a user. <br>// for a more detailed look, use "Get User Info" <br>//**************************************************************************** <br> <br>int DisplayIlsUserInfo(HWND hwnd, IIlsUser *pu) <br>{ <br>HRESULT hr = E_FAIL; <br> <br>MyTextOut(" ======================== \r\n"); <br> <br>// The standard attributes... <br>DisplayStdAtt(pu, ILS_STDATTR_IP_ADDRESS,   "IP address  ", USER); <br>DisplayStdAtt(pu, ILS_STDATTR_EMAIL_NAME,   "Email name  ", USER); <br>DisplayStdAtt(pu, ILS_STDATTR_FIRST_NAME,   "First name  ", USER); <br>DisplayStdAtt(pu, ILS_STDATTR_LAST_NAME,    "Last name  ",  USER); <br>DisplayStdAtt(pu, ILS_STDATTR_CITY_NAME,    "City name  ",  USER); <br>DisplayStdAtt(pu, ILS_STDATTR_COUNTRY_NAME, "Ctry name ",   USER); <br>DisplayStdAtt(pu, ILS_STDATTR_COMMENT,      "Comment  ",    USER); <br>DisplayStdAtt(pu, ILS_STDATTR_APP_NAME,     "App name  ",   USER); <br>DisplayStdAtt(pu, ILS_STDATTR_APP_MIME_TYPE,"App Mime  ",   USER); <br> <br>MyTextOut(" ---------------------- \r\n"); <br> <br>// The extended attributes... <br>DisplayExtAtt(pu, NM_RESTRICTION,"User type  ",   USER); <br>DisplayExtAtt(pu, NM_IN_A_CALL,"In a call  ",    USER); <br>DisplayExtAtt(pu, NM_SEND_AUDIO,"Video capable  ",   USER); <br>DisplayExtAtt(pu, NM_SEND_VIDEO,"Audio capable  ",   USER); <br> <br>MyTextOut(" ======================== \r\n"); <br> <br>  return 1; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT DisplayIlsUsers(HWND hwnd, IEnumIlsUsers *pEnum) <br>// <br>// This function displays user information for all users <br>// <br>//**************************************************************************** <br> <br>HRESULT DisplayIlsUsers(HWND hwnd, IEnumIlsUsers *pEnum) <br>{ <br>IIlsUser *pu; <br>BOOL fCancel = FALSE; <br> <br>// For each user name... <br>// <br>while (!fCancel &amp;&amp; (pEnum-&gt;Next(1, &amp;pu, NULL) == NOERROR)) <br>{ <br>fCancel = (DisplayIlsUserInfo(hwnd, pu) == IDCANCEL); <br>pu-&gt;Release(); <br>}; <br>pEnum-&gt;Release(); <br> <br>return NOERROR; <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBLIST.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4562"></a>OBLIST.CPP</h2>
<pre><code>//**************************************************************************** <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       oblist.cpp <br>//  Content:    This file contains the list class functions. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include &lt;windows.h&gt; <br>#include "oblist.h" <br> <br>//**************************************************************************** <br>// void* COBLIST::GetTail() <br>// <br>// Returns the end of the list. <br>// <br>//**************************************************************************** <br>VOID* COBLIST::GetTail() <br>{ <br>return m_pTail-&gt;pItem; <br>} <br> <br>//**************************************************************************** <br>// VOID* COBLIST::GetNext(POSITION&amp; rPos) <br>// <br>// Returns the next item of the list. <br>// <br>//**************************************************************************** <br>VOID* COBLIST::GetNext(POSITION&amp; rPos) <br>{ <br>VOID* pReturn = rPos-&gt;pItem; <br>rPos = rPos-&gt;pNext; <br>return pReturn; <br>} <br> <br>//**************************************************************************** <br>// VOID* COBLIST::RemoveAt(POSITION Pos) <br>// <br>// Removes an item from the list. <br>// <br>//**************************************************************************** <br>VOID* COBLIST::RemoveAt(POSITION Pos) <br>{ <br>VOID* pReturn = NULL; <br> <br>if (m_pHead) <br>{ <br>if (m_pHead == Pos) <br>{ <br>// Removing the first element in the list <br> <br>m_pHead = Pos-&gt;pNext; <br>pReturn = Pos-&gt;pItem; <br>delete Pos; <br> <br>if (NULL == m_pHead) <br>{ <br>// Removing the only element! <br>m_pTail = NULL; <br>} <br>} <br>else <br>{ <br>POSITION pCur = m_pHead; <br> <br>while (pCur &amp;&amp; pCur-&gt;pNext) <br>{ <br>if (pCur-&gt;pNext == Pos) <br>{ <br>// Removing  <br> <br>pCur-&gt;pNext = Pos-&gt;pNext; <br>if (m_pTail == Pos) <br>{ <br>m_pTail = pCur; <br>} <br>pReturn = Pos-&gt;pItem; <br>delete Pos; <br>} <br> <br>pCur = pCur-&gt;pNext; <br>} <br>} <br>} <br> <br>return pReturn; <br>} <br> <br> <br>//**************************************************************************** <br>// POSITION COBLIST::AddTail(VOID* pItem) <br>// <br>// Add to the end of the list. <br>// <br>//**************************************************************************** <br>POSITION COBLIST::AddTail(VOID* pItem) <br>{ <br>POSITION posRet = NULL; <br> <br>if (m_pTail) <br>{ <br>if (m_pTail-&gt;pNext = new COBNODE) <br>{ <br>m_pTail = m_pTail-&gt;pNext; <br>m_pTail-&gt;pItem = pItem; <br>m_pTail-&gt;pNext = NULL; <br>} <br>} <br>else <br>{ <br>if (m_pHead = new COBNODE) <br>{ <br>m_pTail = m_pHead; <br>m_pTail-&gt;pItem = pItem; <br>m_pTail-&gt;pNext = NULL; <br>} <br>} <br> <br>return m_pTail; <br>} <br> <br>//**************************************************************************** <br>// POSITION COBLIST::EmpytList(VOID* pItem) <br>// <br>// Frees the entire list. <br>// <br>//**************************************************************************** <br>void COBLIST::EmptyList() <br>{ <br>while (!IsEmpty()) { <br>RemoveAt(GetHeadPosition()); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// POSITION COBLIST::GetPosition(VOID* _pItem) <br>// <br>// return the position of an item in the list <br>// <br>//**************************************************************************** <br>POSITION COBLIST::GetPosition(void* _pItem) <br>{ <br>POSITION Position = m_pHead; <br> <br>while (Position) { <br>if (Position-&gt;pItem == _pItem) { <br>break; <br>} <br>GetNext(Position); <br>} <br>return Position; <br>} <br> <br>//**************************************************************************** <br>// POSITION COBLIST::Lookup(VOID* _pItem) <br>// <br>// <br>//**************************************************************************** <br>POSITION COBLIST::Lookup(void* pComparator) <br>{ <br>POSITION    Position = m_pHead; <br> <br>while (Position) { <br>if (Compare(Position-&gt;pItem, pComparator)) { <br>break; <br>} <br>GetNext(Position); <br>} <br>return Position; <br>} <br> <br> <br>//**************************************************************************** <br>// POSITION COBLIST::SafeGetFromPosition(POSITION Pos) <br>// <br>// Safe way to validate that an entry is still in the list, <br>// <br>//**************************************************************************** <br>void * COBLIST::SafeGetFromPosition(POSITION Pos) <br>{ <br>POSITION PosWork = m_pHead; <br> <br>while (PosWork) { <br>if (PosWork == Pos) { <br>return Pos-&gt;pItem; <br>} <br>GetNext(PosWork); <br>} <br>return NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

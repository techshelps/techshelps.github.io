<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ILSTEST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4558"></a>ILSTEST.H</h2>
<pre><code>//**************************************************************************** <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       ilstest.h <br>//  Content:    The main header file. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;olectl.h&gt; <br>#include "ils.h" <br>#include "resource.h" <br>#include &lt;commctrl.h&gt; <br>#include "oblist.h" <br>#include "notify.h" <br>#include &lt;mapidefs.h&gt; <br> <br>//**************************************************************************** <br>// General Constants <br>//**************************************************************************** <br>// <br>#define SERVER_MENU_POS 1 <br>#define SERVER_LIST_POS 2 <br> <br>#define MAX_NAME 260 <br>#define MAX_SERVER_COUNT 20 <br>#define MAX_USER_COUNT 20 <br> <br> <br>#define WM_ILSTEST                  (WM_USER+100) <br>#define WM_IT_ENUM_NAMES_RESULT     (WM_ILSTEST+0) <br>#define WM_IT_ENUM_USERS_RESULT     (WM_ILSTEST+1) <br>#define WM_IT_RESOLVE_USER_RESULT   (WM_ILSTEST+2) <br>#define WM_IT_RESOLVE_PROT_RESULT   (WM_ILSTEST+3) <br> <br>//**************************************************************************** <br>// Macros <br>//**************************************************************************** <br>// <br>#define ARRAYSIZE(array)    (sizeof(array)/sizeof(array[0])) <br> <br>//**************************************************************************** <br>// Global Parameters <br>//**************************************************************************** <br>// <br>extern HINSTANCE         ghInstance; <br>extern HWND              g_hwndMain; <br>extern LPILS_MAIN        g_pIls; <br>extern IConnectionPoint  *g_pcnp; <br> <br>extern IIlsFilter        *g_pProtFilter; <br>extern IIlsFilter        *g_pUserFilter; <br> <br>extern CHAR              g_szServer[]; <br>extern LPTSTR            g_pszServer; <br>extern IIlsServer        *g_pServer; <br>extern COBLIST           *g_pServerList; <br>extern COBLIST           *g_pUserList; <br> <br>extern GUID g_GUID; <br> <br>extern const TCHAR g_szAppID[]; <br>extern const TCHAR g_szProtID[]; <br> <br>enum OBJECT_TYPE {PROTOCOL, USER}; <br>enum FILTER_USAGE {USERFILTER, PROTFILTER}; <br> <br>#define NM_IN_A_CALL   400 <br>#define NM_SEND_AUDIO  501 <br>#define NM_SEND_VIDEO  503 <br>#define NM_RESTRICTION 600 <br> <br> <br>//**************************************************************************** <br>// Useful data structures <br>//**************************************************************************** <br>// <br> <br>typedef struct tagServerNode <br>{ <br>char        szName[MAX_NAME]; <br>IIlsServer  *pSrv; <br>} SERVERNODE, *PSERVERNODE; <br> <br>typedef struct tagUserInfo <br>{ <br>char        szFirstName[MAX_NAME]; <br>char        szLastName[MAX_NAME]; <br>char        szEmailName[MAX_NAME]; <br>char        szCity[MAX_NAME]; <br>char        szCountry[MAX_NAME]; <br>char        szComment[MAX_NAME*2]; <br>char        szIPAddress[MAX_NAME]; <br>BOOLfModify; <br>} USERINFO, *PUSERINFO; <br> <br>typedef struct  tagILSUser { <br>IIlsUser        *pu; <br>CIlsUserNotify  *puNotify; <br>COBLIST         *pProtList; <br>}   USERNODE, *PUSERNODE; <br> <br>typedef struct  tagServerInfo { <br>LPTSTR      szServerName; <br>LPTSTR      szLogonName; <br>LPTSTR      szPassword; <br>ILS_ENUM_AUTH_METHOD eam; <br>LPTSTR      szDomain; <br>LPTSTR      szCredential; <br>LPTSTR      szBaseDN; <br>DWORD       dwTimeout; <br>}   SERVERINFO, *PSERVERINFO; <br> <br>typedef struct  tagFilterInfo { <br> <br>ILS_STD_ATTR_NAME attName1; <br>LPTSTR            szValue1; <br>ILS_FILTER_OP     fOp1; <br> <br>ILS_STD_ATTR_NAME attName2; <br>LPTSTR            szValue2; <br>ILS_FILTER_OP     fOp2; <br> <br>ILS_FILTER_OP     fOpComp; <br>FILTER_USAGE      fUsage;     // usage: USER, PROTOCOL <br>ILS_FILTER_TYPE   fType;      // type:  SIMPLE, COMPOSITE <br> <br>}   FILTERINFO, *PFILTERINFO; <br> <br>typedef struct  tagProtocolInfo { <br> <br>LPTSTR     szProtName; <br>LPTSTR     szProtMime; <br>ULONG      uPortNumber;        <br> <br>}   PROTOCOLINFO, *PPROTOCOLINFO; <br> <br> <br>typedef struct  tagEnumProtocol { <br> <br>USERNODE  *pun; <br>IIlsProtocol *ppSelected; <br> <br>}   ENUMPROTINFO, *PENUMPROTINFO; <br> <br> <br>//**************************************************************************** <br>// Function prototypes <br>//**************************************************************************** <br>// <br>// ****  from utils.cpp <br>void      _cdecl MyTextOut (LPCTSTR szFmt, ...); <br>void      ErrorMessage(HWND hwnd, LPCTSTR szPrefix, HRESULT hr); <br>LPTSTR    AllocLPTSTR (ULONG cb); <br>HRESULT   FreeLPTSTR (LPTSTR pszName); <br>HRESULT   SetLPTSTR (LPTSTR *ppszName, LPCTSTR pszUserName); <br>HRESULT   LPTSTR_to_BSTR (BSTR *pbstr, LPCTSTR psz); <br>HRESULT   BSTR_to_LPTSTR (LPTSTR *ppsz, BSTR bstr); <br>LPCTSTR   GetErrorString(HRESULT hr); <br>void      DisplayStdAtt(void *pobj, ILS_STD_ATTR_NAME stdAttr, LPTSTR szDesc, OBJECT_TYPE ot); <br>void      DisplayExtAtt(void *pobj, DWORD dwExtAttr, LPTSTR szDesc, OBJECT_TYPE ot); <br>BOOL      InitTreeViewImageLists(HWND hwndTV);  <br>HTREEITEM AddItemToTree(HWND hwndTV, LPSTR lpszItem, int nLevel); <br>VOID      DisplayAboutBox(HWND hwnd); <br>HRESULT   DisplayIlsNames(HWND hwnd, IEnumIlsNames *pEnum, LPTSTR szNames); <br>int       StringFromGuid (REFIID riid, LPTSTR pszBuf); <br>int       GetRadioButton(HWND hdlg, int idrFirst, int idrLast); <br>BOOL      MyIsGoodString(LPTSTR psz); <br>HRESULT   GetNMAttributesObject( IIlsMain *pIls, IIlsAttributes **ppa ); <br> <br> <br> <br> <br>// ****  from users.cpp <br>HRESULT DisplayIlsUsers(HWND hwnd, IEnumIlsUsers *pEnum); <br>HRESULT RegisterUser(HWND hwnd, IIlsUser *pu, IIlsServer *ps, LPTSTR szServerName); <br>HRESULT UnregisterUser(HWND hwnd, IIlsUser *pu, BOOL fSilent); <br>HRESULT EnumUsers(HWND hwnd, BOOL fShort); <br>HRESULT OnILSUserAdviseUnadvise(HWND hwnd, PUSERNODE pUserNode, BOOL fAdvise); <br>HRESULT DisplayIlsUserDialog(HWND hwnd, IIlsUser *pu); <br>  <br> <br> <br>// ****  from svrinfo.cpp <br>int     ServerDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>HRESULT NewServerDialog(HWND hwnd); <br>HRESULT RemoveServerDialog(HWND hwnd); <br>void    NewServerNode(IIlsServer *pServer, LPTSTR szName); <br>int     ServerListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>void    SetServerInfo(HWND hwnd, IIlsServer *ps, PSERVERINFO psi); <br> <br> <br>// ****  from usrinfo.cpp <br>HRESULT NewUserDialog(HWND hwnd); <br>HRESULT ModifyUserDialog(HWND hwnd); <br>HRESULT CloneUserDialog(HWND hwnd); <br>HRESULT RemoveUserDialog(HWND hwnd); <br>HRESULT RegUnregUserDialog(HWND hwnd, BOOL fRegister); <br>int     UserNameDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>HRESULT GetUserInfoDialog(HWND hwnd); <br>HRESULT GetUserInfoDialog(HWND hwnd, IIlsUser *pu); <br>int     UserDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>void    InitIlsUser(HWND hwnd, IIlsUser *pu); <br>void    NewUserNode(PUSERNODE pUser); <br>void    SetUserInfo(HWND hwnd, IIlsUser *pu, USERINFO *pUserInfo); <br>void    GetUserInfo(HWND hwnd, IIlsUser *pu, USERINFO *pUserInfo); <br>void    SaveUserInfo(HWND hwnd, PUSERINFO pui); <br>int     UserListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>void    UnregisterAllUsers(HWND hwnd); <br>HRESULT ChangeAttribute(IIlsUser *pu, ILS_STD_ATTR_NAME attr, LPTSTR psz); <br> <br> <br> <br>// ****  from proto.cpp <br>HRESULT EnumUserProtocols(HWND hwnd, IIlsUser *pu); <br>int     ProtocolDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>void    CreateProtocolDialog(HWND hwnd); <br>void    SaveProtInfo(HWND hwnd, PPROTOCOLINFO ppi); <br>void    DestroyProtocolDialog(HWND hwnd); <br>int     ProtoListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>HRESULT DisplayProtocolInfo(HWND hwnd, IIlsProtocol *pp); <br>HRESULT DisplayProtocol(HWND hwnd, IIlsUser *pu); <br>int     ProtoNameDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br> <br> <br> <br> <br> <br>// ****  from attrib.cpp <br>HRESULT EnumUserExAttributes(HWND hwnd, IIlsUser *pu); <br> <br> <br>// ****  from filter.cpp <br>HRESULT CreateFilterDialog(HWND hwnd, FILTER_USAGE fUsage); <br>int     FilterDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>HRESULT DestroyFilter(HWND hwnd, FILTER_USAGE fUsage); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>USRINFO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4569"></a>USRINFO.CPP</h2>
<pre><code>//**************************************************************************** <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       usrinfo.cpp <br>//  Content:    This file contains the user info dialog functions. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include "ilstest.h" <br>#include "notify.h" <br>#include "appguid.h" <br> <br> <br>//**************************************************************************** <br>// <br>// int NewUserDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog procedure for the user dialog box. <br>// <br>//**************************************************************************** <br> <br>int NewUserDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>USERINFO *pUserInfo; <br> <br>pUserInfo = (USERINFO *)GetWindowLong(hwnd, DWL_USER); <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>pUserInfo = (USERINFO *)lParam; <br> <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_FIRSTNAME), pUserInfo-&gt;szFirstName); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_LASTNAME),  pUserInfo-&gt;szLastName); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_CITY),      pUserInfo-&gt;szCity); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_COMMENT),   pUserInfo-&gt;szComment); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_IPADD),     pUserInfo-&gt;szIPAddress); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_EMAIL),     pUserInfo-&gt;szEmailName); <br>SetWindowText(GetDlgItem(hwnd, IDC_UI_COUNTRY),   pUserInfo-&gt;szCountry); <br> <br>// Can't change email or country once set. <br>// See if we are creating or modifying <br>if(pUserInfo-&gt;fModify) <br>{ <br>EnableWindow(GetDlgItem(hwnd, IDC_UI_EMAIL), FALSE); <br>EnableWindow(GetDlgItem(hwnd, IDC_UI_COUNTRY), FALSE); <br>} <br> <br>SetFocus (GetDlgItem(hwnd, IDC_UI_FIRSTNAME)); <br>break; <br>} <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>SaveUserInfo(hwnd, pUserInfo); <br> <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT NewUserDialog(HWND hwnd) <br>// <br>// This function starts the user information dialog box. <br>// <br>//**************************************************************************** <br> <br>HRESULT NewUserDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br>IIlsUser *pUser; <br>USERINFO UserInfo; <br>BSTR bstrAppID, bstrUserID; <br>USERNODE un; <br>PUSERNODE pun; <br> <br>HMENU hMenu; <br> <br>pun = &amp;un; <br> <br>// clear the UserInfo structure <br>strcpy(UserInfo.szFirstName,""); <br>strcpy(UserInfo.szLastName,""); <br>strcpy(UserInfo.szEmailName,""); <br>strcpy(UserInfo.szCity,""); <br>strcpy(UserInfo.szCountry,""); <br>strcpy(UserInfo.szComment,""); <br>strcpy(UserInfo.szIPAddress,""); <br> <br>UserInfo.fModify = FALSE; <br> <br> <br>// Allow only one dialog at a time <br>// <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_NEWUSER, MF_BYCOMMAND | MF_GRAYED); <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_USERINFO), <br>hwnd, (DLGPROC)NewUserDlgProc, (LPARAM)&amp;UserInfo) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(UserInfo.szEmailName)) <br>{ <br>MyTextOut(TEXT("Email name is empty - no user object created.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br>// Convert the necessary strings to BSTRs <br>// <br>LPTSTR_to_BSTR(&amp;bstrUserID, UserInfo.szEmailName); <br>LPTSTR_to_BSTR(&amp;bstrAppID, g_szAppID); // Use "ms-netmeeting" so NM can see this user <br> <br>// Create the user object <br>hr = g_pIls-&gt;CreateUser(bstrUserID, bstrAppID, &amp;pUser); <br> <br>if(SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIls::CreateUser succeeded. %s\r\n"), UserInfo.szEmailName); <br> <br>pun-&gt;pu = pUser; <br> <br>// Hookup the notification callback <br>OnILSUserAdviseUnadvise(hwnd, pun, TRUE); <br> <br>// Set the rest of the user info fields <br>//  <br>SetUserInfo(hwnd, pun-&gt;pu, &amp;UserInfo); <br> <br>// Add to the list of users <br>NewUserNode(pun); <br> <br>if(!g_pUserList-&gt;IsEmpty()) // The user list is not empty, enable menu items <br>{ <br>EnableMenuItem(hMenu, IDM_DESTROYUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_CLONEUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_MODIFYUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_CREATE_PROT, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_DESTROY_PROT, MF_BYCOMMAND | MF_ENABLED); <br>if(!g_pServerList-&gt;IsEmpty())  // only enable Reg/Unreg if there servers in the list <br>{ <br>EnableMenuItem(hMenu, IDM_REGISTERUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_UNREGISTERUSER, MF_BYCOMMAND | MF_ENABLED); <br>} <br>} <br> <br>} <br>else <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateUser fails."), hr); <br>} <br> <br>// Clean up <br>SysFreeString(bstrAppID); <br>SysFreeString(bstrUserID); <br> <br>} <br>else <br>{ <br>// User cancelled <br>// <br>MyTextOut(TEXT("Create User cancelled.\r\n")); <br> <br>}; <br> <br>MyExit: <br> <br>EnableMenuItem(hMenu, IDM_NEWUSER, MF_BYCOMMAND | MF_ENABLED); <br>return hr; <br>}; <br> <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CloneUserDialog(HWND hwnd) <br>// <br>// This function starts the user information dialog box to copy a user. <br>// <br>//**************************************************************************** <br> <br>HRESULT CloneUserDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br> <br>BSTR bstrName; <br>USERNODE un; <br>PUSERNODE pun; <br>char szUserName[MAX_NAME]; <br>LPTSTR psz; <br>POSITION pos; <br>USERNODE unClone; <br>PUSERNODE punClone; <br>HMENU hMenu; <br> <br>IIlsUser *pUserClone; <br> <br>pun = &amp;un; <br>punClone = &amp;unClone; <br> <br>// Allow only one dialog at a time <br>// <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_CLONEUSER, MF_BYCOMMAND | MF_GRAYED); <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)UserListDlgProc, (LPARAM)&amp;szUserName) == IDOK) <br>{ <br>if(!MyIsGoodString(szUserName)) <br>{ <br>MyTextOut(TEXT("User name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br> <br>// Find the specified user in the list <br>pos = g_pUserList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>hr = pun-&gt;pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrName); <br>BSTR_to_LPTSTR(&amp;psz, bstrName); <br>if(strcmp(psz, szUserName) == 0) <br>{ <br>FreeLPTSTR(psz); <br>break; <br>} <br>g_pUserList-&gt;GetNext(pos); <br>FreeLPTSTR(psz); <br>} <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>// Clone the specified user object <br>hr = pun-&gt;pu-&gt;Clone(&amp;pUserClone); <br> <br>if(SUCCEEDED(hr)) <br>{ <br>// the user name is in psz and bstrName now <br>// <br>MyTextOut(TEXT("IIlsUser::Clone succeeded for user %s\r\n"), psz); <br> <br>punClone-&gt;pu = pUserClone; <br> <br>// Hookup the notification callback <br>OnILSUserAdviseUnadvise(hwnd, punClone, TRUE); <br> <br>// Add to the list of users <br>NewUserNode(punClone); <br> <br>} <br>else <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::CloneUser fails."), hr); <br>} <br>} <br>else <br>{ <br>// User cancelled <br>// <br>MyTextOut(TEXT("Clone User cancelled.\r\n")); <br> <br>}; <br>MyExit: <br> <br>EnableMenuItem(hMenu, IDM_CLONEUSER, MF_BYCOMMAND | MF_ENABLED); <br>return hr; <br>}; <br> <br> <br> <br>//**************************************************************************** <br>// <br>// void NewUserNode (PUSERNODE pUser) <br>// <br>// Create a new node and add to the linked list <br>//**************************************************************************** <br>void NewUserNode(PUSERNODE pUserNode) <br>{ <br>PUSERNODE pun; <br> <br>pun = (PUSERNODE)LocalAlloc(LMEM_FIXED, sizeof(USERNODE)); <br> <br>pun-&gt;pu = pUserNode-&gt;pu; <br>pun-&gt;puNotify = pUserNode-&gt;puNotify; <br>pun-&gt;pProtList = new COBLIST; <br> <br>g_pUserList-&gt;AddTail( (void *)pun ); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void SetUserInfo (HWND hwnd, IlsUser *pUser, USERINFO *pUserInfo) <br>// <br>//**************************************************************************** <br>void SetUserInfo(HWND hwnd, IIlsUser *pu, USERINFO *pUserInfo) <br>{ <br>HRESULT hr = E_FAIL; <br>BSTR bstrFirstName = NULL, bstrLastName = NULL, bstrEmailName = NULL; <br>BSTR bstrCity = NULL, bstrCountry = NULL, bstrComment = NULL, bstrIPAddress = NULL; <br>GUID *pGUID; <br> <br>pGUID = (GUID *)&amp;GUID_ILSTest; <br> <br>// FirstName <br>// <br>LPTSTR_to_BSTR(&amp;bstrFirstName, pUserInfo-&gt;szFirstName); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_FIRST_NAME, bstrFirstName); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br>// LastName <br>// <br>LPTSTR_to_BSTR(&amp;bstrLastName, pUserInfo-&gt;szLastName); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_LAST_NAME, bstrLastName); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br>// EmailName <br>// <br>LPTSTR_to_BSTR(&amp;bstrEmailName, pUserInfo-&gt;szEmailName); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_EMAIL_NAME, bstrEmailName); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br>// City/State <br>// <br>LPTSTR_to_BSTR(&amp;bstrCity, pUserInfo-&gt;szCity); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_CITY_NAME, bstrCity); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br>// Country <br>// <br>LPTSTR_to_BSTR(&amp;bstrCountry, pUserInfo-&gt;szCountry); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_COUNTRY_NAME, bstrCountry); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br>// IP_Address <br>// <br>LPTSTR_to_BSTR(&amp;bstrIPAddress, pUserInfo-&gt;szIPAddress); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_IP_ADDRESS, bstrIPAddress); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br> <br> <br>// Comment <br>// <br>LPTSTR_to_BSTR(&amp;bstrComment, pUserInfo-&gt;szComment); <br>hr = pu-&gt;SetStandardAttribute(ILS_STDATTR_COMMENT, bstrComment); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::SetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br> <br> <br>// Make us visible to the rest of the world <br>// <br>hr = pu-&gt;SetVisible(0x01); <br> <br>// Set the GUID for the user <br>// <br>hr = pu-&gt;SetGuid(pGUID); <br> <br>MyExit: <br>// Cleanup <br>if(bstrFirstName) <br>SysFreeString(bstrFirstName); <br>if(bstrLastName) <br>SysFreeString(bstrLastName); <br>if(bstrEmailName) <br>SysFreeString(bstrEmailName); <br>if(bstrCity) <br>SysFreeString(bstrCity); <br>if(bstrCountry) <br>SysFreeString(bstrCountry); <br>if(bstrComment) <br>SysFreeString(bstrComment); <br>if(bstrIPAddress) <br>SysFreeString(bstrIPAddress); <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void GeUserInfo (HWND hwnd, IlsUser *pUser, USERINFO *pUserInfo) <br>// <br>//**************************************************************************** <br>void GetUserInfo(HWND hwnd, IIlsUser *pu, USERINFO *pUserInfo) <br>{ <br>HRESULT hr = E_FAIL; <br>BSTR bstrName = NULL; <br>GUID *pGUID; <br>LPTSTR szTemp; <br> <br>pGUID = (GUID *)&amp;GUID_ILSTest; <br> <br>// FirstName <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_FIRST_NAME, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szFirstName, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// LastName <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_LAST_NAME, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szLastName, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// EMailName <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_EMAIL_NAME, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szEmailName, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// City <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_CITY_NAME, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szCity, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// Country <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_COUNTRY_NAME, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szCountry, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// IP Address <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_IP_ADDRESS, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szIPAddress, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>// Comment <br>hr = pu-&gt;GetStandardAttribute(ILS_STDATTR_COMMENT, &amp;bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::GetStandardAttribute fails."), hr); <br>goto MyExit; <br>} <br>BSTR_to_LPTSTR(&amp;szTemp, bstrName); <br>strcpy(pUserInfo-&gt;szComment, szTemp); <br> <br>if(bstrName) <br>SysFreeString(bstrName); <br>MyExit: <br> <br>return; <br>} <br> <br> <br> <br> <br>//**************************************************************************** <br>// <br>// void SaveUserInfo(HWND hwnd, PUSERINFO pUserInfo) <br>// <br>// This function saves the changes in the user information. <br>// to the USERINFO structure <br>// <br>//**************************************************************************** <br>void SaveUserInfo(HWND hwnd, PUSERINFO pUserInfo) <br>{ <br>HWND    hCtrl; <br>TCHAR   szText[MAX_NAME]; <br> <br>// Get each information field <br>// <br>hCtrl = GetDlgItem(hwnd, IDC_UI_FIRSTNAME); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szFirstName, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_LASTNAME); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szLastName, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_EMAIL); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szEmailName, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_CITY); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szCity, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_COUNTRY); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szCountry, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_COMMENT); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szComment, szText); <br> <br>hCtrl = GetDlgItem(hwnd, IDC_UI_IPADD); <br>Edit_GetText(hCtrl, (LPTSTR)szText, ARRAYSIZE(szText)); <br>strcpy(pUserInfo-&gt;szIPAddress, szText); <br> <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT RemoveUserDialog(HWND hwnd) <br>// <br>// This function starts the dialog box for  <br>// destroying a user object. <br>// <br>//**************************************************************************** <br>HRESULT RemoveUserDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br>HMENU hMenu; <br>char szUserName[MAX_NAME]; <br>char *psz; <br>POSITION pos; <br>USERNODE *pun; <br>BSTR bstrName; <br> <br>szUserName[0] = NULL; <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)UserListDlgProc, (LPARAM)szUserName) == IDOK) <br>{ <br>if(!MyIsGoodString(szUserName)) <br>{ <br>MyTextOut(TEXT("User name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>// match name to usernode <br>pos = g_pUserList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>hr = pun-&gt;pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrName); <br>BSTR_to_LPTSTR(&amp;psz, bstrName); <br>if(strcmp(psz, szUserName) == 0) <br>{ <br>FreeLPTSTR(psz); <br>break; <br>} <br>g_pUserList-&gt;GetNext(pos); <br>FreeLPTSTR(psz); <br>} <br> <br>// Disconnect the notification callbacks <br>// <br>OnILSUserAdviseUnadvise(hwnd, pun, FALSE); <br> <br>// free user object <br>pun-&gt;pu-&gt;Release(); <br>pun-&gt;pu = NULL; <br> <br>// free the protocol list <br>delete pun-&gt;pProtList; <br> <br>// remove node from list <br>g_pUserList-&gt;RemoveAt(pos); <br> <br>LocalFree(pun); <br>pun = NULL; <br> <br>// if the list is now empty, disable the menu item <br>if(g_pUserList-&gt;IsEmpty()) <br>{ <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_DESTROYUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_REGISTERUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_UNREGISTERUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_CLONEUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_MODIFYUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_CREATE_PROT, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_DESTROY_PROT, MF_BYCOMMAND | MF_GRAYED); <br> <br>} <br>MyTextOut(TEXT("User %s removed.\r\n"), szUserName); <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Destroy user cancelled.\r\n")); <br>} <br>MyExit: <br> <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// int UserListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog proc that displays the current user objects <br>// and returns the chosen item. <br>// <br>//**************************************************************************** <br>int UserListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br> <br>USERNODE *pun; <br>LPTSTR pszTemp; <br>POSITION pos; <br>HWND hwndList; <br>char *psz; <br>int iIndex; <br>HRESULT hr = E_FAIL; <br>BSTR bstrName; <br> <br> <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>hwndList = GetDlgItem(hwnd, IDC_LIST); <br>SetWindowLong (hwnd, DWL_USER, lParam); <br> <br>// Walk the list of servers and fill the listbox with names <br>pos = g_pUserList-&gt;GetHeadPosition(); <br>SetWindowText(hwnd, "User List"); <br> <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br>hr = pun-&gt;pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrName); <br>BSTR_to_LPTSTR(&amp;psz, bstrName); <br>SendMessage(hwndList, LB_ADDSTRING, 0, (LPARAM)psz); <br>g_pUserList-&gt;GetNext(pos); <br>FreeLPTSTR(psz); <br>} <br> <br>SetFocus(GetDlgItem(hwnd, IDC_LIST)); <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>hwndList = GetDlgItem(hwnd, IDC_LIST); <br> <br>// return the name of the user chosen  <br>pszTemp = (LPTSTR)GetWindowLong(hwnd, DWL_USER); <br>iIndex = SendMessage(hwndList, LB_GETCURSEL, 0,0); <br>if(iIndex == -1) // default to the first item in the list if none selected <br>iIndex = 0; <br>iIndex = SendMessage(hwndList, LB_GETTEXT, iIndex, (LPARAM)pszTemp); <br> <br>// Fall through to end the dialog!! <br> <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT RegisterUserDialog(HWND hwnd, BOOL fRegister) <br>// <br>// This function starts the dialog box for  <br>// registering or unregistering a user object on a server. <br>// <br>//**************************************************************************** <br>HRESULT RegUnregUserDialog(HWND hwnd, BOOL fRegister) <br>{ <br>HRESULT hr = E_FAIL; <br>char szUserName[MAX_NAME]; <br>char szServerName[MAX_NAME]; <br>char *psz; <br>POSITION pos; <br>BSTR bstrName; <br>PUSERNODE pun; <br>PSERVERNODE psn; <br> <br>// Ask which user to reg/unreg <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)UserListDlgProc, (LPARAM)szUserName) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(szUserName)) <br>{ <br>MyTextOut(TEXT("User name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br> <br>// match name to usernode <br>pos = g_pUserList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>hr = pun-&gt;pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrName); <br>BSTR_to_LPTSTR(&amp;psz, bstrName); <br>if(strcmp(psz, szUserName) == 0) <br>{ <br>FreeLPTSTR(psz); <br>break; <br>} <br>g_pUserList-&gt;GetNext(pos); <br>FreeLPTSTR(psz); <br>} <br> <br>if(fRegister) <br>{ <br>// Got the user, now ask which server to use <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)ServerListDlgProc, (LPARAM)szServerName) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(szServerName)) <br>{ <br>MyTextOut(TEXT("Server name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>// match name to servernode <br>pos = g_pServerList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>psn = (PSERVERNODE)g_pServerList-&gt;GetFromPosition(pos); <br>if(strcmp(psn-&gt;szName, (LPCTSTR)szServerName) == 0) <br>break; <br>g_pServerList-&gt;GetNext(pos); <br>} <br>} <br> <br>RegisterUser(hwnd, pun-&gt;pu, psn-&gt;pSrv, psn-&gt;szName); <br>} <br>else <br>{ <br>UnregisterUser(hwnd, pun-&gt;pu, FALSE); <br>} <br> <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Reg/Unreg cancelled.\r\n")); <br>} <br> <br>MyExit: <br> <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT GetUserInfoDialog(HWND hwnd) <br>// <br>// This function displays user information for all users <br>// <br>//**************************************************************************** <br>HRESULT GetUserInfoDialog(HWND hwnd) <br>{ <br>ULONG uReqID; <br>BOOL fCancel = FALSE; <br>HRESULT hr = E_FAIL; <br>char szUserID[MAX_NAME]; <br>char szServerName[MAX_NAME]; <br>POSITION pos; <br>PSERVERNODE psn; <br>BSTR bstrUserID = NULL, bstrAppID = NULL, bstrProtID = NULL; <br> <br>// Ask which user to query <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_USERNAME), <br>hwnd, (DLGPROC)UserNameDlgProc, (LPARAM)szUserID) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(szUserID)) <br>{ <br>MyTextOut(TEXT("User ID is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>LPTSTR_to_BSTR(&amp;bstrUserID, (LPCTSTR)szUserID); <br> <br>// Got the user, now ask which server to use <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)ServerListDlgProc, (LPARAM)szServerName) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(szServerName)) <br>{ <br>MyTextOut(TEXT("Server name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>// match name to servernode <br>pos = g_pServerList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>psn = (PSERVERNODE)g_pServerList-&gt;GetFromPosition(pos); <br>if(strcmp(psn-&gt;szName, (LPCTSTR)szServerName) == 0) <br>break; <br>g_pServerList-&gt;GetNext(pos); <br>} <br> <br> <br>LPTSTR_to_BSTR(&amp;bstrProtID, g_szProtID); // TODO - allow user to specify protocol ID here <br> <br>LPTSTR_to_BSTR(&amp;bstrAppID, g_szAppID); // Use "ms-netmeeting" <br> <br>// set up the attributes object here so the  <br>// desired extended attributes get returned. <br>IIlsAttributes *pAttrib = NULL; <br>hr = GetNMAttributesObject(g_pIls, &amp;pAttrib); <br> <br>hr = g_pIls-&gt;GetUser(psn-&gt;pSrv, bstrUserID, bstrAppID, bstrProtID, pAttrib, NULL, &amp;uReqID); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIlsMain::GetUser(%x) pending for user %s on server %s.\r\n"), <br>uReqID, szUserID, szServerName); <br>} <br>else <br>ErrorMessage(hwnd, TEXT("IIlsMain::GetUser fails."), hr); <br> <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Server List cancelled.\r\n")); <br>} <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Get User cancelled.\r\n")); <br>} <br> <br>MyExit: <br>// Cleanup <br>// <br>if(bstrUserID) <br>SysFreeString(bstrUserID); <br>if(bstrAppID) <br>SysFreeString(bstrAppID); <br>if(bstrProtID) <br>SysFreeString(bstrProtID); <br> <br>return hr; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// int UserNameDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog proc that displays the current user objects <br>// and returns the chosen item. <br>// <br>//**************************************************************************** <br>int UserNameDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>LPTSTR pszTemp; <br>HRESULT hr = E_FAIL; <br> <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>SetFocus(GetDlgItem(hwnd, IDC_USER_NAME)); <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>// return the name of the user chosen  <br>pszTemp = (LPTSTR)GetWindowLong(hwnd, DWL_USER); <br>GetDlgItemText(hwnd, IDC_USER_NAME, pszTemp, MAX_NAME); <br> <br>// Fall through to end the dialog!! <br> <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT DisplayIlsUserDialog(HWND hwnd, IIlsUser *pu) <br>// <br>// This function displays user information for all users <br>// <br>//**************************************************************************** <br>HRESULT DisplayIlsUserDialog(HWND hwnd, IIlsUser *pu) <br>{ <br> <br>HRESULT hr = E_FAIL; <br> <br>// Display the specified user details <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_ILSUSER), <br>hwnd, (DLGPROC)UserDlgProc, (LPARAM)pu) != IDOK) <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Get User cancelled.\r\n")); <br>} <br> <br>return hr; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// int UserDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog proc that displays the current user objects <br>// and returns the chosen item. <br>// <br>//**************************************************************************** <br>int UserDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>IIlsUser *pu; <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>pu = (IIlsUser *)lParam; <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>InitIlsUser(hwnd, pu); <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>case IDC_UU_PROT:  // Display the protocols in the main window <br>{ <br>IIlsUser *pu; <br> <br>pu = (IIlsUser *)GetWindowLong(hwnd, DWL_USER); <br>EnumUserProtocols(hwnd, pu); <br>break; <br>} <br>case IDC_UU_EXATTR:  // display the extended attributes in the main window <br>{ <br>IIlsUser *pu; <br> <br>pu = (IIlsUser *)GetWindowLong(hwnd, DWL_USER); <br>EnumUserExAttributes(hwnd, pu); <br>break; <br>} <br> <br>case IDC_UU_GETPROT:  // Display the protocol information in the main window <br>{ <br>IIlsUser *pu; <br> <br>pu = (IIlsUser *)GetWindowLong(hwnd, DWL_USER); <br>DisplayProtocol(hwnd, pu); <br>break; <br>} <br> <br> <br>case WM_IT_ENUM_NAMES_RESULT: <br>DisplayIlsNames(hwnd, (IEnumIlsNames *)lParam, "protocols"); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br> <br> <br>//**************************************************************************** <br>// <br>// void InitIlsUser(HWND hwnd, IIlsUser *pu) <br>//  <br>// Retrieve the standard attributes and display them in a dialog. <br>// <br>//**************************************************************************** <br>void InitIlsUser(HWND hwnd, IIlsUser *pu) <br>{ <br> <br>LPTSTR szID, szFirstName, szLastName, szEmailName, szCityName, szCountryName; <br>LPTSTR szComment, szAppID, szAppMimeType, szIPAdd; <br>TCHAR szVisible[MAX_NAME]; <br>TCHAR szGuid[MAX_NAME]; <br>HRESULT hr = E_FAIL; <br>BSTR bstrTemp; <br>TCHAR szText[512]; <br>DWORD fVisible; <br>GUID guid; <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szID, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_IP_ADDRESS, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szIPAdd, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_EMAIL_NAME, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szEmailName, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_FIRST_NAME, &amp;bstrTemp); </code></pre>
<p>
</p>
<pre><code>BSTR_to_LPTSTR(&amp;szFirstName, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_LAST_NAME, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szLastName, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_CITY_NAME, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szCityName, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_COUNTRY_NAME, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szCountryName, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_COMMENT, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szComment, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_APP_NAME, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szAppID, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>pu-&gt;GetStandardAttribute(ILS_STDATTR_APP_MIME_TYPE, &amp;bstrTemp); <br>BSTR_to_LPTSTR(&amp;szAppMimeType, bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>// English interpretation of Visibile flags <br>hr = pu-&gt;GetVisible(&amp;fVisible); <br>if(SUCCEEDED(hr)) <br>strcpy(szVisible, (fVisible == 0x01 ? TEXT("visible") : TEXT("hidden"))); <br>else <br>strcpy(szVisible, TEXT("ERROR")); <br> <br>hr = pu-&gt;GetGuid(&amp;guid); <br>if(SUCCEEDED(hr)) <br>StringFromGuid(guid, szGuid); <br>else <br>strcpy(szGuid, TEXT("ERROR")); <br> <br>wsprintf(szText,  <br>TEXT("ID:\t\t%s\nFirst:\t\t%s\nLast:\t\t%s\nE-mail:\t\t%s\nCity:\t\t%s\nCountry:\t\t%s\nComment:\t%s\nIP:\t\t%s\nAppID:\t\t%s\nMime Type:\t%s\nVisibility:\t\t%s\nGUID:\t%s"), <br>szID, szFirstName, szLastName, szEmailName, szCityName, szCountryName,  <br>szComment, szIPAdd, szAppID, szAppMimeType, szVisible, szGuid); <br> <br>SetDlgItemText(hwnd, IDC_UU_INFO, szText); <br> <br>FreeLPTSTR(szID); <br>FreeLPTSTR(szIPAdd); <br>FreeLPTSTR(szEmailName); <br>FreeLPTSTR(szFirstName); <br>FreeLPTSTR(szLastName); <br>FreeLPTSTR(szCityName); <br>FreeLPTSTR(szCountryName); <br>FreeLPTSTR(szComment); <br>FreeLPTSTR(szAppID); <br>FreeLPTSTR(szAppMimeType); <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT UnregisterAllUsers(HWND hwnd) <br>// <br>// This function removes all our users from the servers <br>// <br>//**************************************************************************** <br> <br>void UnregisterAllUsers(HWND hwnd) <br>{ <br>POSITION pos; <br>PUSERNODE pun; <br> <br>// Walk the list of users <br>pos = g_pUserList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br>UnregisterUser(hwnd, pun-&gt;pu, TRUE); <br> <br>g_pUserList-&gt;GetNext(pos); <br>} <br>return; <br>}; <br> <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT ModifyUserDialog(HWND hwnd) <br>// <br>// This function starts the user information modify dialog box. <br>// <br>//**************************************************************************** <br> <br>HRESULT ModifyUserDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br>USERINFO UserInfo; <br>BSTR bstrName = NULL; <br>LPTSTR psz = NULL; <br>char szUserName[MAX_NAME]; <br>USERNODE un; <br>PUSERNODE pun; <br>POSITION pos; <br>ULONG uReqID; <br>HMENU hMenu; <br> <br>pun = &amp;un; <br> <br>// Allow only one dialog at a time <br>// <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_NEWUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_MODIFYUSER, MF_BYCOMMAND | MF_GRAYED); <br> <br>// Ask which user to query <br>// <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)UserListDlgProc, (LPARAM)&amp;szUserName) == IDOK) <br>{ <br> <br>// Check the user name <br>if(!MyIsGoodString(szUserName)) <br>{ <br>MyTextOut(TEXT("User Name is invalid.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>// Find the specified user in the list <br>pos = g_pUserList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>hr = pun-&gt;pu-&gt;GetStandardAttribute(ILS_STDATTR_USER_ID, &amp;bstrName); <br>BSTR_to_LPTSTR(&amp;psz, bstrName); <br>if(strcmp(psz, szUserName) == 0) <br>{ <br>FreeLPTSTR(psz); <br>break; <br>} <br>g_pUserList-&gt;GetNext(pos); <br>FreeLPTSTR(psz); <br>} <br>pun = (PUSERNODE)g_pUserList-&gt;GetFromPosition(pos); <br> <br>// Get the user info stuff here... <br>GetUserInfo(hwnd, pun-&gt;pu, &amp;UserInfo); <br> <br>// Mark this for modification <br>UserInfo.fModify = TRUE; <br> <br>// Show the user info dialog box and allow the user make changes <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_USERINFO), <br>hwnd, (DLGPROC)NewUserDlgProc, (LPARAM)&amp;UserInfo) == IDOK) <br>{ <br>// For now we assume that if they've pressed OK, they actually changed something <br> <br>// Can't change EMAIL_NAME or COUNTRY_NAME -- see SDK documentation <br>// <br>//ChangeAttribute(pun-&gt;pu, ILS_STDATTR_EMAIL_NAME,   UserInfo.szEmailName); <br>//ChangeAttribute(pun-&gt;pu, ILS_STDATTR_COUNTRY_NAME, UserInfo.szCountry); <br> <br>ChangeAttribute(pun-&gt;pu, ILS_STDATTR_FIRST_NAME,   UserInfo.szFirstName); <br>ChangeAttribute(pun-&gt;pu, ILS_STDATTR_LAST_NAME,    UserInfo.szLastName); <br>ChangeAttribute(pun-&gt;pu, ILS_STDATTR_CITY_NAME,    UserInfo.szCity); <br>ChangeAttribute(pun-&gt;pu, ILS_STDATTR_COMMENT,      UserInfo.szComment); <br>ChangeAttribute(pun-&gt;pu, ILS_STDATTR_IP_ADDRESS,   UserInfo.szIPAddress); <br> <br>// Now we've got the local user changed, write it to the server <br>hr = pun-&gt;pu-&gt;Update(&amp;uReqID); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsUser::Update fails."), hr); <br>goto MyExit; <br>} <br>} <br>else <br>{ <br>// User cancelled <br>// <br>MyTextOut(TEXT("Modify User cancelled.\r\n")); <br>}; <br>} <br>MyExit: <br>EnableMenuItem(hMenu, IDM_NEWUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_MODIFYUSER, MF_BYCOMMAND | MF_ENABLED); <br>return hr; <br>}; <br> <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT ChangeAttribute(ILS_STD_ATTR_NAME attr, LPTSTR psz) <br>// <br>// This function removes all our users from the servers <br>// <br>//**************************************************************************** <br>HRESULT ChangeAttribute(IIlsUser *pu, ILS_STD_ATTR_NAME attr, LPTSTR psz) <br>{ <br>BSTR bstr; <br>HRESULT hr = E_FAIL; <br> <br>if(MyIsGoodString(psz)) <br>{ <br>LPTSTR_to_BSTR(&amp;bstr, psz); <br>hr = pu-&gt;SetStandardAttribute(attr, bstr); <br> <br>if(SUCCEEDED(hr)) <br>SysFreeString(bstr); <br>} <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SVRINFO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4567"></a>SVRINFO.CPP</h2>
<pre><code>//**************************************************************************** <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       svrinfo.cpp <br>//  Content:    This file contains the server info dialog functions. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include "ilstest.h" <br>#include "notify.h" <br> <br>//**************************************************************************** <br>// <br>// HRESULT NewServerDialog(HWND hwnd) <br>// <br>// This function starts the server information dialog box for creating a server. <br>// <br>//**************************************************************************** <br>HRESULT NewServerDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br>HMENU hMenu; <br>BSTR bstrServerName; <br>IIlsServer *ps; <br>SERVERINFO si; <br>PSERVERINFO psi; <br> <br>psi = &amp;si; <br> <br>// Set up the server info structure <br>// <br>psi-&gt;szServerName = NULL; <br>psi-&gt;szLogonName = NULL; <br>psi-&gt;szPassword = NULL; <br>psi-&gt;eam = ILS_AUTH_ANONYMOUS; <br>psi-&gt;szDomain = NULL; <br>psi-&gt;szCredential = NULL; <br>psi-&gt;szBaseDN = NULL; <br>psi-&gt;dwTimeout = 0; <br> <br>// Allow only one dialog at a time <br>// <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_CREATESERVER, MF_BYCOMMAND | MF_GRAYED); <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_SERVERNAME), <br>hwnd, (DLGPROC)ServerDlgProc, (LPARAM)psi) == IDOK) <br>{ <br> <br>if(!MyIsGoodString(psi-&gt;szServerName)) <br>{ <br>MyTextOut(TEXT("Server name is empty - no server object created\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>LPTSTR_to_BSTR(&amp;bstrServerName, psi-&gt;szServerName); <br> <br>// Create the server object <br>hr = g_pIls-&gt;CreateServer(bstrServerName, &amp;ps); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>MyTextOut(TEXT("IIls::CreateServer succeeded. %s\r\n"), psi-&gt;szServerName); <br> <br>// Set the server parameters <br>// <br>SetServerInfo(hwnd, ps, psi); <br> <br>// Add this server to the global list of servers <br>// <br>NewServerNode(ps, psi-&gt;szServerName); <br> <br> <br>if(!g_pServerList-&gt;IsEmpty()) // Check if any menu items should be enabled <br>{ <br>EnableMenuItem(hMenu, IDM_DESTROYSERVER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_ENUMUSERS, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_ENUMUSERNAMES, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_GETUSERINFO, MF_BYCOMMAND | MF_ENABLED); <br>if(!g_pUserList-&gt;IsEmpty())  // only enable Reg/Unreg if are users in the list <br>{ <br>EnableMenuItem(hMenu, IDM_REGISTERUSER, MF_BYCOMMAND | MF_ENABLED); <br>EnableMenuItem(hMenu, IDM_UNREGISTERUSER, MF_BYCOMMAND | MF_ENABLED); <br>} <br> <br>} <br> <br>} <br>else <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateServer fails."), hr); <br>}; <br>SysFreeString(bstrServerName); <br>} <br>else <br>{ <br>// User cancelled <br>// <br>MyTextOut(TEXT("IIls::CreateServer cancelled.\r\n")); <br> <br>} <br> <br>MyExit: <br> <br>// Clean up <br>if(psi-&gt;szServerName != NULL) <br>FreeLPTSTR(psi-&gt;szServerName); <br> <br>if(psi-&gt;szLogonName != NULL) <br>FreeLPTSTR(psi-&gt;szLogonName); <br> <br>if(psi-&gt;szPassword != NULL) <br>FreeLPTSTR(psi-&gt;szPassword); <br> <br>if(psi-&gt;szDomain != NULL) <br>FreeLPTSTR(psi-&gt;szDomain); <br> <br>if(psi-&gt;szCredential != NULL) <br>FreeLPTSTR(psi-&gt;szCredential); <br> <br>if(psi-&gt;szBaseDN != NULL) <br>FreeLPTSTR(psi-&gt;szBaseDN); <br> <br> <br> <br> <br>EnableMenuItem(hMenu, IDM_CREATESERVER, MF_BYCOMMAND | MF_ENABLED); <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// int ServerDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog procedure for the server prompt dialog box. <br>// <br>//**************************************************************************** <br> <br>int ServerDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>PSERVERINFO psInfo; <br>HWND hwndCombo; <br>BOOL fSuccess; <br>int iIndex; <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>hwndCombo = GetDlgItem(hwnd, IDC_AUTH_METHOD); <br> <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>SetFocus(GetDlgItem(hwnd, IDC_SVR_NAME)); <br> <br>//  set the auth method strings in the list <br>// <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"ANONYMOUS"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"CLEAR_TEXT"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"NTLM"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"DPA"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"MSN"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"SICILY"); <br>SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)"SSPI"); <br> <br>// set default auth method <br>SendMessage(hwndCombo, CB_SETCURSEL, 0, 0); <br> <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>{ <br>TCHAR szTemp[MAX_NAME]; <br> <br>psInfo = (PSERVERINFO)GetWindowLong(hwnd, DWL_USER); <br>hwndCombo = GetDlgItem(hwnd, IDC_AUTH_METHOD); <br> <br>// clear the server info <br>// <br>psInfo-&gt;szServerName = NULL; <br>psInfo-&gt;szLogonName = NULL; <br>psInfo-&gt;szPassword = NULL; <br>psInfo-&gt;szCredential = NULL; <br>psInfo-&gt;szDomain = NULL; <br>psInfo-&gt;szBaseDN = NULL; <br> <br> <br>// Get the server name (required) <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_SVR_NAME, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szServerName = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szServerName, CharUpper(szTemp)); <br>} <br> <br>// Get the server logon name <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_LOGON_NAME, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szLogonName = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szLogonName, szTemp); <br>} <br> <br> <br>// Get the server password <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_PASSWORD, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szPassword = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szPassword, szTemp); <br>} <br> <br> <br>// Get the server credential to use <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_AUTH_CRED, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szCredential = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szCredential, szTemp); <br>} <br> <br>// Get the domain name use <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_DOMAIN, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szDomain = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szDomain, szTemp); <br>} <br> <br> <br>// Get the Base Distinguished Name use <br>// <br>if(0 != GetDlgItemText(hwnd, IDC_BASEDN, szTemp, MAX_PATH)) <br>{ <br>psInfo-&gt;szBaseDN = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(psInfo-&gt;szBaseDN, szTemp); <br>} <br> <br>// Get the server timeout to use <br>// <br>psInfo-&gt;dwTimeout = GetDlgItemInt(hwnd, IDC_TIMEOUT, &amp;fSuccess, FALSE); <br> <br> <br>// Get the currently selected authentication method <br>// <br>iIndex = SendMessage(hwndCombo, CB_GETCURSEL, 0, 0); <br>psInfo-&gt;eam = (ILS_ENUM_AUTH_METHOD)iIndex; <br> <br>// Fall through to end the dialog!! <br>} <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void NewServerNode (IlsServer *pServer, LPTSTR szName) <br>// <br>//**************************************************************************** <br>void NewServerNode(IIlsServer *pServer, LPTSTR szName) <br>{ <br>PSERVERNODE psn; <br> <br>// Alloc memory for the new node <br>// <br>psn = (PSERVERNODE)LocalAlloc(LMEM_FIXED, sizeof(SERVERNODE)); <br> <br>// set the pointers to the new server <br>psn-&gt;pSrv = pServer; <br>strcpy(psn-&gt;szName, szName); <br> <br>// add to the list <br>g_pServerList-&gt;AddTail( (void *)psn ); <br> <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT RemoveServerDialog(HWND hwnd) <br>// <br>// This function starts the server information dialog box for  <br>// destroying a server. <br>// <br>//**************************************************************************** <br>HRESULT RemoveServerDialog(HWND hwnd) <br>{ <br>HRESULT hr = E_FAIL; <br>HMENU hMenu; <br>PSERVERNODE psn; <br>char szServerName[MAX_NAME]; <br>POSITION pos; <br> <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_LIST), <br>hwnd, (DLGPROC)ServerListDlgProc, (LPARAM)szServerName) == IDOK) <br>{ <br>if(!MyIsGoodString(szServerName)) <br>{ <br>MyTextOut(TEXT("Server name is empty.\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>// match name to servernode <br>pos = g_pServerList-&gt;GetHeadPosition(); <br> <br>while(pos) <br>{ <br>psn = (PSERVERNODE)g_pServerList-&gt;GetFromPosition(pos); <br>if(strcmp(psn-&gt;szName, szServerName) == 0) <br>break; <br>g_pServerList-&gt;GetNext(pos); <br>} <br> <br>// free server object <br>psn-&gt;pSrv-&gt;Release(); <br>psn-&gt;pSrv = NULL; <br> <br>// free server name string <br>LocalFree(psn-&gt;szName); <br> <br>// remove node from list <br>g_pServerList-&gt;RemoveAt(pos); <br> <br> <br>// if the list is now empty, disable the menu item <br>if(g_pServerList-&gt;IsEmpty()) <br>{ <br>hMenu = GetMenu(hwnd); <br>EnableMenuItem(hMenu, IDM_DESTROYSERVER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_ENUMUSERS, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_ENUMUSERNAMES, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_REGISTERUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_UNREGISTERUSER, MF_BYCOMMAND | MF_GRAYED); <br>EnableMenuItem(hMenu, IDM_GETUSERINFO, MF_BYCOMMAND | MF_GRAYED); <br>} <br> <br>MyTextOut(TEXT("Server %s removed.\r\n"), szServerName); <br> <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Destroy server cancelled.\r\n")); <br>} <br> <br>MyExit: <br> <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// int ServerListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog procedure for the remove server prompt dialog box. <br>// <br>//**************************************************************************** <br> <br>int ServerListDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>PSERVERNODE psn; <br>LPTSTR pszTemp; <br>POSITION pos; <br>HWND hwndList; <br>int iIndex; <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>hwndList = GetDlgItem(hwnd, IDC_LIST); <br> <br>// Walk the list of servers and fill the listbox with names <br>pos = g_pServerList-&gt;GetHeadPosition(); <br>SetWindowText(hwnd, "Server List"); <br> <br>while(pos) <br>{ <br>psn = (PSERVERNODE)g_pServerList-&gt;GetFromPosition(pos); <br>SendMessage(hwndList, LB_ADDSTRING, 0, (LPARAM)psn-&gt;szName); <br>g_pServerList-&gt;GetNext(pos); <br>} <br> <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>// return the name of the server chosen <br>hwndList = GetDlgItem(hwnd, IDC_LIST); <br>pszTemp = (LPTSTR)GetWindowLong(hwnd, DWL_USER); <br>iIndex = SendMessage(hwndList, LB_GETCURSEL, 0,0); <br>if(iIndex == -1) <br>iIndex = 0; <br>iIndex = SendMessage(hwndList, LB_GETTEXT, iIndex, (LPARAM)pszTemp); <br> <br>// Fall through to end the dialog!! <br> <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int SetServerInfo (HWND hwnd, IIlsServer *ps, PSERVERINFO psi) <br>// <br>// set the server options based on the server dialog settings <br>// <br>//**************************************************************************** <br>void SetServerInfo(HWND hwnd, IIlsServer *ps, PSERVERINFO psi) <br>{ <br>HRESULT hr = E_FAIL; <br>BSTR bstrTemp; <br> <br>// Auth method <br>// <br>hr = ps-&gt;SetAuthenticationMethod(psi-&gt;eam); <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetAuthentication method succeeded.\r\n"); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetAuthenticationMethod fails."), hr); <br> <br> <br>// Logon name <br>// <br>if(psi-&gt;szLogonName) <br>{ <br>LPTSTR_to_BSTR(&amp;bstrTemp, psi-&gt;szLogonName); <br>hr = ps-&gt;SetLogonName(bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetLogonName, set to %s.\r\n", psi-&gt;szLogonName); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetLogonName fails."), hr); <br> <br>FreeLPTSTR(psi-&gt;szLogonName); <br>psi-&gt;szLogonName = NULL; <br> <br>} <br> <br>// Password <br>// <br>if(psi-&gt;szPassword) <br>{ <br>LPTSTR_to_BSTR(&amp;bstrTemp, psi-&gt;szPassword); <br>hr = ps-&gt;SetLogonPassword(bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetLogonPassword, set to %s.\r\n", psi-&gt;szPassword); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetLogonPassword fails."), hr); <br> <br>FreeLPTSTR(psi-&gt;szPassword); <br>psi-&gt;szPassword = NULL; <br> <br>} <br> <br>// Domain <br>// <br>if(psi-&gt;szDomain) <br>{ <br>LPTSTR_to_BSTR(&amp;bstrTemp, psi-&gt;szDomain); <br>hr = ps-&gt;SetDomain(bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetDomain method, set to %s.\r\n", psi-&gt;szDomain); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetDomain fails."), hr); <br> <br>FreeLPTSTR(psi-&gt;szDomain); <br>psi-&gt;szDomain = NULL; <br> <br>} <br> <br>// BaseDN <br>// <br>if(psi-&gt;szBaseDN) <br>{ <br>LPTSTR_to_BSTR(&amp;bstrTemp, psi-&gt;szBaseDN); <br>hr = ps-&gt;SetBaseDN(bstrTemp); <br>SysFreeString(bstrTemp); <br> <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetBaseDN method, set to %s.\r\n", psi-&gt;szBaseDN); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetBaseDN fails."), hr); <br> <br>FreeLPTSTR(psi-&gt;szBaseDN); <br>psi-&gt;szBaseDN = NULL; <br> <br>} <br> <br>// Time out <br>// <br>if(psi-&gt;dwTimeout != 0) <br>{ <br>hr = ps-&gt;SetTimeout(psi-&gt;dwTimeout); <br> <br>if(SUCCEEDED(hr)) <br>MyTextOut("IIlsServer::SetTimeout, set to %d seconds.\r\n", psi-&gt;dwTimeout); <br>else <br>ErrorMessage(hwnd, TEXT("IIlsServer::SetTimeout fails."), hr); <br>} <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILTER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4556"></a>FILTER.CPP</h2>
<pre><code>//**************************************************************************** <br>// <br>//  SKIPPY! sample for Microsoft NetMeeting SDK <br>// <br>//  File:       filter.cpp <br>//  Content:    This file contains filter functions. <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>//  All rights reserved <br>// <br>//**************************************************************************** <br> <br>#include "ilstest.h" <br> <br>void UpdateControls(HWND hwnd, BOOL fEnable); <br>void InitFilterDlg(HWND hwnd, PFILTERINFO pfi); <br>void GetFilterDlg(HWND hwnd, PFILTERINFO pfi); <br>void AddUserStrings(HWND hwnd); <br>void AddProtStrings(HWND hwnd); <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CreateFilterDialog(HWND hwnd, FILTER_TYPE fType) <br>// <br>//**************************************************************************** <br>HRESULT CreateFilterDialog(HWND hwnd, FILTER_USAGE fUsage) <br>{ <br>HRESULT hr = E_FAIL; <br>IIlsFilter *pf, *pf1, *pf2; <br>BSTR bstrName = NULL; <br> <br>FILTERINFO fi; <br>PFILTERINFO pfi; <br>HMENU hMenu; <br> <br>pfi = &amp;fi; <br>pfi-&gt;fUsage = fUsage; <br>pfi-&gt;fType = ILS_FILTERTYPE_SIMPLE; <br> <br>hMenu = GetMenu(hwnd); <br> <br>if(DialogBoxParam(ghInstance, MAKEINTRESOURCE(IDD_DLG_FILTER), <br>hwnd, (DLGPROC)FilterDlgProc, (LPARAM)pfi) == IDOK) <br>{ <br> <br>if(pfi-&gt;fType == ILS_FILTERTYPE_SIMPLE) <br>{ <br> <br>if(!MyIsGoodString(pfi-&gt;szValue1)) <br>{ <br>MyTextOut(TEXT("Filter value is empty - no filter object created\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br> <br>MyTextOut(TEXT("Creating simple filter.\r\n")); <br> <br>// Filter type is simple, create one <br>hr = g_pIls-&gt;CreateFilter(ILS_FILTERTYPE_SIMPLE, pfi-&gt;fOp1, &amp;pf); <br> <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateFilter fails."), hr); <br>goto MyExit; <br>}  <br> <br>// Set the attribute name <br>// <br>hr = pf-&gt;SetStandardAttributeName(pfi-&gt;attName1); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetStandardAttributeName fails."), hr); <br>goto MyExit; <br>} <br> <br>// Set the attribute value <br>LPTSTR_to_BSTR(&amp;bstrName, pfi-&gt;szValue1); <br>hr = pf-&gt;SetAttributeValue(bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetAttributeValue fails."), hr); <br>goto MyExit; <br>} <br> <br>MyTextOut(TEXT("Simple filter created.\r\n")); <br> <br>} <br>else // ILS_FILTERTYPE_COMPOSITE <br>{ <br>if(!MyIsGoodString(pfi-&gt;szValue1) || !MyIsGoodString(pfi-&gt;szValue2)) <br>{ <br>MyTextOut(TEXT("Filter value is empty - no filter object created\r\n")); <br>hr = E_FAIL; <br>goto MyExit; <br>} <br> <br>MyTextOut(TEXT("Creating composite filter.\r\n")); <br> <br>// Filter type is composite, create three <br>// <br>// create first simple <br>hr = g_pIls-&gt;CreateFilter(ILS_FILTERTYPE_SIMPLE, pfi-&gt;fOp1, &amp;pf1); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateFilter fails."), hr); <br>goto MyExit; <br>} <br>// Set the first attribute name <br>// <br>hr = pf1-&gt;SetStandardAttributeName(pfi-&gt;attName1); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetStandardAttributeName fails."), hr); <br>goto MyExit; <br>} <br> <br>// Set the first attribute value <br>LPTSTR_to_BSTR(&amp;bstrName, pfi-&gt;szValue1); <br>hr = pf1-&gt;SetAttributeValue(bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetAttributeValue fails."), hr); <br>goto MyExit; <br>} <br> <br>// create second simple <br>hr = g_pIls-&gt;CreateFilter(ILS_FILTERTYPE_SIMPLE, pfi-&gt;fOp2, &amp;pf2); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateFilter fails."), hr); <br>goto MyExit; <br>} <br> <br>// Set the second attribute name <br>// <br>hr = pf2-&gt;SetStandardAttributeName(pfi-&gt;attName2); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetStandardAttributeName fails."), hr); <br>goto MyExit; <br>} <br> <br>// Set the second attribute value <br>LPTSTR_to_BSTR(&amp;bstrName, pfi-&gt;szValue2); <br>hr = pf2-&gt;SetAttributeValue(bstrName); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::SetAttributeValue fails."), hr); <br>goto MyExit; <br>} <br> <br> <br>// Create the composite filter <br>hr = g_pIls-&gt;CreateFilter(ILS_FILTERTYPE_COMPOSITE, pfi-&gt;fOpComp, &amp;pf); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIls::CreateFilter fails."), hr); <br>goto MyExit; <br>} <br> <br>// add filter one <br>hr = pf-&gt;AddSubFilter(pf1); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::AddSubFilter fails."), hr); <br>goto MyExit; <br>} <br> <br>// add filter two <br>hr = pf-&gt;AddSubFilter(pf2); <br>if(FAILED(hr)) <br>{ <br>ErrorMessage(hwnd, TEXT("IIlsFilter::AddSubFilter fails."), hr); <br>goto MyExit; <br>} <br> <br>MyTextOut(TEXT("Composite filter created.\r\n")); <br> <br>} <br> <br>// Set the global filter pointers <br>// destroy existing ones, only allow one at a time <br>if(fUsage == USERFILTER) <br>{ <br>if(g_pUserFilter) <br>g_pUserFilter-&gt;Release(); <br> <br>g_pUserFilter = pf; <br>EnableMenuItem(hMenu, IDM_DESTROY_USERFILTER, MF_BYCOMMAND | MF_ENABLED); <br>} <br>else if(fUsage == PROTFILTER) <br>{ <br>if(g_pProtFilter) <br>g_pProtFilter-&gt;Release(); <br> <br>g_pProtFilter = pf; <br>EnableMenuItem(hMenu, IDM_DESTROY_PROTFILTER, MF_BYCOMMAND | MF_ENABLED); <br>} <br>else <br>ErrorMessage(hwnd, TEXT("filter usage is indeterminate.\r\n"), E_FAIL); <br> <br>} <br>else <br>{ <br>//User cancelled <br>MyTextOut(TEXT("Create Filter cancelled.\r\n")); <br>} <br> <br>MyExit: <br> <br>// Cleanup <br>// <br>if(bstrName) <br>SysFreeString(bstrName); <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int FilterDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>// <br>// This function is the dialog proc that displays the current user objects <br>// and returns the chosen item. <br>// <br>//**************************************************************************** <br>int FilterDlgProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>PFILTERINFO pfi; <br> <br>switch (msg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>SetWindowLong (hwnd, DWL_USER, lParam); <br>InitFilterDlg(hwnd, (PFILTERINFO)lParam); <br>break; <br>} <br> <br>case WM_COMMAND: <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>// return the filter info <br>pfi = (FILTERINFO *)GetWindowLong(hwnd, DWL_USER); <br>GetFilterDlg(hwnd, pfi); <br> <br>// FALL THROUGH !!! <br>// <br>case IDCANCEL: <br>EndDialog(hwnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>break; <br> <br>case IDC_SIMPLE: <br>{ <br>// Turn on/off dialog controls <br>// <br>UpdateControls(hwnd, FALSE); <br>break; <br>} <br>case IDC_COMPOSITE: <br>{ <br>// Turn on/off dialog controls <br>// <br>UpdateControls(hwnd, TRUE); <br>break; <br>} <br> <br>default: <br>break; <br>}; <br>break; <br>} <br> <br>case WM_ENABLE: <br>return 1; <br>break; <br> <br>default: <br>break; <br>}; <br> <br>return 0; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// int InitFilterDlg (HWND hwnd, PFILTERINFO pfi) <br>// <br>//**************************************************************************** <br>void InitFilterDlg(HWND hwnd, PFILTERINFO pfi) <br>{ <br> <br>// select the correct radio buttons <br>// <br>CheckRadioButton( hwnd, IDC_SIMPLE, IDC_COMPOSITE, IDC_SIMPLE); <br>CheckRadioButton( hwnd, IDC_OP_EQUAL1, IDC_OP_EXIST1, IDC_OP_EQUAL1); <br>CheckRadioButton( hwnd, IDC_OP_EQUAL2, IDC_OP_EXIST2, IDC_OP_EQUAL2); <br>CheckRadioButton( hwnd, IDC_AND, IDC_NOT, IDC_AND); <br> <br>if(pfi-&gt;fUsage == USERFILTER) <br>{ <br>AddUserStrings(GetDlgItem(hwnd, IDC_ATT_LIST1)); <br>AddUserStrings(GetDlgItem(hwnd, IDC_ATT_LIST2)); <br>} <br>else // PROTFILTER <br>{ <br>AddProtStrings(GetDlgItem(hwnd, IDC_ATT_LIST1)); <br>AddProtStrings(GetDlgItem(hwnd, IDC_ATT_LIST2)); <br>} <br> <br> <br>// send a message to disable controls <br>// <br>SendMessage(hwnd, WM_COMMAND, IDC_SIMPLE, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int UpdateControls (HWND hwnd, BOOL fEnable) <br>// <br>//**************************************************************************** <br>void UpdateControls(HWND hwnd, BOOL fEnable) <br>{ <br>EnableWindow(GetDlgItem(hwnd, IDC_COMP_FRAME), fEnable); <br> <br>EnableWindow(GetDlgItem(hwnd, IDC_AND), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_NOT), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OR), fEnable); <br> <br>EnableWindow(GetDlgItem(hwnd, IDC_STD_TXT2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_ATT_LIST2), fEnable); <br> <br>EnableWindow(GetDlgItem(hwnd, IDC_ATT_TXT2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_VALUE2), fEnable); <br> <br>EnableWindow(GetDlgItem(hwnd, IDC_FIL_OP2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OP_EQUAL2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OP_APPROX2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OP_LESSTHAN2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OP_GREATERTHAN2), fEnable); <br>EnableWindow(GetDlgItem(hwnd, IDC_OP_EXIST2), fEnable); <br>} <br> <br>//**************************************************************************** <br>// <br>// int GetFilterDlg(HWND hwnd, PFILTERINFO pfi) <br>// <br>// Fill in the FILTERINFO structure <br>// <br>//**************************************************************************** <br>void GetFilterDlg(HWND hwnd, PFILTERINFO pfi) <br>{ <br>TCHAR szTemp[MAX_NAME]; <br>HWND hwndCombo; <br> <br>// Get standard attribute name for first simple filter <br>// <br>hwndCombo = GetDlgItem(hwnd, IDC_ATT_LIST1); <br>pfi-&gt;attName1 = (ILS_STD_ATTR_NAME)(SendMessage(hwndCombo, CB_GETCURSEL, 0, 0) + 1); <br> <br>// Get standard attribute value for first simple filter <br>// <br>GetDlgItemText(hwnd, IDC_VALUE1, szTemp, MAX_NAME); <br>pfi-&gt;szValue1 = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(pfi-&gt;szValue1, szTemp); <br> <br> <br>// Get standard attribute name for second simple filter <br>// <br>hwndCombo = GetDlgItem(hwnd, IDC_ATT_LIST2); <br>pfi-&gt;attName2 = (ILS_STD_ATTR_NAME)(SendMessage(hwnd, CB_GETCURSEL, 0, 0) + 1); <br> <br>// Get standard attribute value for second simple filter <br>// <br>GetDlgItemText(hwnd, IDC_VALUE2, szTemp, MAX_NAME); <br>pfi-&gt;szValue2 = AllocLPTSTR(lstrlen(szTemp) + 1); <br>strcpy(pfi-&gt;szValue2, szTemp); <br> <br> <br>// some fancy arithmetic to calculate filter operations <br>// <br>pfi-&gt;fOp1 = (ILS_FILTER_OP)((int)ILS_FILTEROP_EQUAL + GetRadioButton(hwnd, IDC_OP_EQUAL1, IDC_OP_EXIST1) - IDC_OP_EQUAL1); <br>pfi-&gt;fOp2 = (ILS_FILTER_OP)((int)ILS_FILTEROP_EQUAL + GetRadioButton(hwnd, IDC_OP_EQUAL2, IDC_OP_EXIST2) - IDC_OP_EQUAL2); <br> <br>pfi-&gt;fOpComp = (ILS_FILTER_OP)((int)ILS_FILTEROP_AND + GetRadioButton(hwnd, IDC_AND, IDC_NOT) - IDC_AND); <br> <br>pfi-&gt;fType = ((GetRadioButton(hwnd, IDC_SIMPLE, IDC_COMPOSITE) == IDC_SIMPLE) ? ILS_FILTERTYPE_SIMPLE : ILS_FILTERTYPE_COMPOSITE); <br> <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// void AddUserStrings(HWND hwnd) <br>// <br>//**************************************************************************** <br>void AddUserStrings(HWND hwnd) <br>{ <br>// Add USER atttibute strings to the combo box <br>// <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"USER_ID"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"IP_ADDRESS"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"EMAIL_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"FIRST_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"LAST_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"CITY_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"COUNTRY_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"COMMENT"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"FLAGS"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"APP_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"APP_MIME_TYPE"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"APP_GUID"); <br> <br>// set default <br>SendMessage(hwnd, CB_SETCURSEL, 0, 0); <br> <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void AddProtStrings(HWND hwnd) <br>// <br>//**************************************************************************** <br>void AddProtStrings(HWND hwnd) <br>{ <br>// Add PROTOCOL atttibute strings to the combo box <br>// <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"PROTOCOL_NAME"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"PROTOCOL_MIME_TYPE"); <br>SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM)"PROTOCOL_PORT"); <br> <br>// set default <br>SendMessage(hwnd, CB_SETCURSEL, 0, 0); <br> <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void DestroyFilter(HWND hwnd, FILTER_TYPE fType) <br>// <br>//  Free the global filters <br>// <br>//**************************************************************************** <br>HRESULT DestroyFilter(HWND hwnd, FILTER_USAGE fUsage) <br>{ <br>HMENU hMenu; <br> <br>hMenu = GetMenu(hwnd); <br> <br>if(fUsage == USERFILTER) <br>{ <br>if(g_pUserFilter) <br>{ <br>g_pUserFilter-&gt;Release(); <br>g_pUserFilter = NULL; <br>EnableMenuItem(hMenu, IDM_DESTROY_USERFILTER, MF_BYCOMMAND | MF_GRAYED); <br>MyTextOut(TEXT("User filter destroyed.\r\n")); <br>} <br> <br>} <br>else if(fUsage == PROTFILTER) <br>{ <br>if(g_pProtFilter) <br>{ <br>g_pProtFilter-&gt;Release(); <br>g_pProtFilter = NULL; <br>EnableMenuItem(hMenu, IDM_DESTROY_PROTFILTER, MF_BYCOMMAND | MF_GRAYED); <br>MyTextOut(TEXT("Protocol filter destroyed.\r\n")); <br>} <br>} <br>else <br>ErrorMessage(hwnd, TEXT("DestroyFilter: usage is indeterminate.\r\n"), E_FAIL); <br> <br>return S_OK; <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4486"></a>MAIN.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       MAIN.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// Global Variables <br>// <br>//**************************************************************************** <br> <br>HINSTANCE ghInst       = NULL;          // Current Instance <br>HACCEL    ghAccelTable = NULL;          // Menu accelerators <br>HMENU     ghMenu       = NULL;          // Main Menu <br>HWND      ghwndMain    = NULL;          // Main Window <br>HWND      ghwndMsg     = hwndNil;       // Message window <br>HWND      ghwndEdit    = hwndNil;       // Edit Control <br>HWND      ghwndUser    = hwndNil;       // User List <br>HFONT     ghfontMsg    = hfontNil;      // Font for messages <br> <br> <br>TCHAR gszAppTitle[]     = TEXT("NetMeeting Chat Test Application"); <br> <br>// string constants (no change for international) <br>TCHAR gszAppClassName[] = TEXT("NMCHAT"); <br>TCHAR gszAppName[]      = TEXT("NmChat"); <br> <br>// List column information <br> <br>typedef struct _tagCol { <br>UINT  dwWidth; <br>LPTSTR lpsz; <br>} COL; <br>typedef COL * LPCOL; <br> <br> <br>// See ILV_* <br>static COL _rgColMsg[] = { <br>{DXP_USER,  TEXT("Name")}, <br>{80,  TEXT("Time")}, <br>{400, TEXT("Message")}, <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateMsgWindow(void) <br>// <br>// Create the main message listview <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateMsgWindow(void) <br>{ <br>ghwndMsg = CreateWindow(TEXT("SysListView32"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_BORDER | LVS_REPORT, <br>0, 0, 0, 0, <br>ghwndMain, (HMENU) IDW_USER, ghInst, NULL); <br>if (ghwndMsg == NULL) <br>return FALSE; <br> <br>// Initialize column data <br>{ <br>int   iCol; <br>LPCOL lpCol; <br>LV_COLUMN lvc; <br> <br>lpCol = _rgColMsg; <br>ClearStruct(&amp;lvc); <br>lvc.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; <br>lvc.fmt = LVCFMT_LEFT; <br>for (iCol = 0; iCol &lt; ARRAY_ELEMENTS(_rgColMsg); iCol++) <br>{ <br>lvc.iSubItem = iCol; <br>lvc.cx = lpCol-&gt;dwWidth; <br>lvc.pszText = lpCol-&gt;lpsz; <br>if (ListView_InsertColumn(ghwndMsg, iCol, &amp;lvc) == -1) <br>return FALSE; <br>lpCol++; <br>} <br>} <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateUserList(void) <br>// <br>// Create a listbox for the users <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateUserList(void) <br>{ <br>ghwndUser = CreateWindow(TEXT("SysListView32"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_BORDER | LVS_REPORT | LVS_SHOWSELALWAYS, <br>0, 0, DXP_USER, 0, <br>ghwndMain, (HMENU) IDW_MSG, ghInst, NULL); <br> <br>if (NULL == ghwndUser) <br>return FALSE; <br> <br>// Initialize column data <br>{ <br>LV_COLUMN lvc; <br> <br>ClearStruct(&amp;lvc); <br>lvc.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; <br>lvc.fmt = LVCFMT_LEFT; <br>lvc.iSubItem = 0; <br>lvc.cx = DXP_USER; <br>lvc.pszText = TEXT("Send To"); <br>if (ListView_InsertColumn(ghwndUser, 0, &amp;lvc) == -1) <br>return FALSE; <br>} <br> <br>return TRUE; <br>} <br> <br> <br>WNDPROC lpProcEdit = NULL; <br>LRESULT FAR PASCAL SubClsEdit(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam); <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT FAR PASCAL SubClsEdit(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT FAR PASCAL SubClsEdit(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>if ((uMsg == WM_CHAR) &amp;&amp; (VK_RETURN == wParam)) <br>{ <br>SendText(); <br>return 0L; <br>} <br> <br>return CallWindowProc(lpProcEdit, hwnd, uMsg, wParam, lParam); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateEditWindow(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateEditWindow(void) <br>{ <br>ghwndEdit = CreateWindow(TEXT("EDIT"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL, <br>0, 0, 0, DYP_EDIT, <br>ghwndMain, (HMENU) IDW_EDIT, ghInst, NULL); <br>if (ghwndEdit == NULL) <br>return FALSE; <br> <br>// set the font for the window <br> <br>lpProcEdit = (WNDPROC) GetWindowLong(ghwndEdit, GWL_WNDPROC); <br>SetWindowLong(ghwndEdit, GWL_WNDPROC, (LONG)(WNDPROC) SubClsEdit); <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitMain(void) <br>// <br>// Initialize the window data and register the window class <br>// <br>//**************************************************************************** <br> <br>BOOL FInitMain(void) <br>{ <br>TCHAR szTitle[MAX_PATH]; <br>WNDCLASS  wc; <br> <br>ASSERT(NULL != ghInst); <br> <br>ghAccelTable = LoadAccelerators(ghInst, MAKEINTRESOURCE(ID_APPACCEL)); <br> <br>LoadString(ghInst, IDS_APP_TITLE, szTitle, CCHMAX(szTitle)); <br> <br>wc.style         = CS_HREDRAW | CS_VREDRAW; <br>wc.lpfnWndProc   = (WNDPROC)WndProc; <br>wc.cbClsExtra    = 0; <br>wc.cbWndExtra    = 0; <br>wc.hInstance     = ghInst; <br>wc.hIcon         = LoadIcon(ghInst, MAKEINTRESOURCE(ICO_MAIN)); <br>wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>wc.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1); <br>wc.lpszMenuName  = MAKEINTRESOURCE(IDM_APP); <br>wc.lpszClassName = gszAppClassName; <br> <br>// Register the window class and return FALSE if unsuccesful. <br>if (!RegisterClass(&amp;wc)) <br>return FALSE; <br> <br>// Create a main window for this application instance. <br>ghwndMain = CreateWindow(gszAppClassName, szTitle, WS_OVERLAPPEDWINDOW, <br>0, 0, 400, 300, <br>NULL, NULL, ghInst, NULL); <br>if (ghwndMain == NULL) <br>return FALSE; <br> <br>ghMenu = GetMenu(ghwndMain); <br>return (NULL != ghMenu); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitApp(LPSTR lpszCmd, int nCmdShow) <br>// <br>// Initialize the application after checking command line, etc. <br>// <br>//**************************************************************************** <br> <br>BOOL FInitApp(LPSTR lpszCmd, int nCmdShow) <br>{ <br>InitCommonControls(); <br> <br> if (FAILED(CoInitialize(NULL))) <br>return FALSE; <br> <br>if (!FInitMain()) <br>return FALSE; <br> <br>if (!FCreateMsgWindow()) <br>return FALSE; <br> <br>if (!FCreateUserList()) <br>return FALSE; <br> <br>if (!FCreateEditWindow()) <br>return FALSE; <br> <br>ASSERT(NULL != ghwndMain); <br>ShowWindow(ghwndMain, nCmdShow); <br>UpdateWindow(ghwndMain); <br> <br>SetFocus(ghwndEdit); <br> <br>return S_OK == InitConfMgr(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID TerminateApp(void) <br>// <br>//**************************************************************************** <br> <br>VOID TerminateApp(void) <br>{ <br>// Release all objects to which this app has a reference <br>FreeDataChannel(); <br>FreeAllUsers(); <br>FreeConference(); <br>FreeConfMgr(); <br> <br>    // Uninitialize OLE <br>    CoUninitialize(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hInstPrev, LPSTR  lpszCmd, int nCmdShow) <br>// <br>// Main Windows entrypoint <br>// <br>//**************************************************************************** <br> <br>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hInstPrev, LPSTR  lpszCmd, int nCmdShow) <br>{ <br>ghInst = hInstance; <br> <br>if (FInitApp(lpszCmd, nCmdShow)) <br>{ <br>MSG  msg; <br>while (GetMessage(&amp;msg, NULL, 0, 0)) <br>{ <br>if (!TranslateAccelerator(msg.hwnd, ghAccelTable, &amp;msg)) <br>{ <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>} <br>} <br>} <br> <br>TerminateApp(); <br> <br>return 0; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

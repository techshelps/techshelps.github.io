<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDATA.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4476"></a>CDATA.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       CDATA.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>INmChannelData * g_pChannelData; <br>CDataNotify * g_pNotifyData; <br> <br>//**************************************************************************** <br>// <br>// VOID DisplayMsg(LPTSTR pszMsg, INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID DisplayMsg(LPTSTR pszMsg, INmMember * pMember) <br>{ <br>#ifdef NM2_CHAT_PROTOCOL <br>#ifndef UNICODE <br>// Convert UNICODE to ANSI <br>char sz[MAX_PATH]; <br>WideCharToMultiByte(CP_ACP, 0, (LPWSTR) pszMsg, -1, sz, MAX_PATH, NULL, NULL); <br>pszMsg = sz; <br>#endif /* UNICODE */ <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>DisplaySysMsg(pszMsg, pMember); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DisplaySysMsg(LPTSTR pszMsg, INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID DisplaySysMsg(LPTSTR pszMsg, INmMember * pMember) <br>{ <br>LPTSTR pszUser = NULL; <br> <br>if (NULL != pMember) <br>{ <br>PUSER pUser = PUserFromINmMember(pMember); <br>if (NULL != pUser) <br>pszUser = pUser-&gt;pszName; <br>} <br> <br>if (NULL == pszUser) <br>{ <br>pszUser = TEXT(""); <br>} <br> <br>DisplayMessage(pszMsg, pszUser); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DisplayMessage(LPTSTR pszMsg, LPTSTR pszUser) <br>// <br>//**************************************************************************** <br> <br>VOID DisplayMessage(LPTSTR pszMsg, LPTSTR pszUser) <br>{ <br>int iItem; <br>LV_ITEM  lvItem; <br> <br>ClearStruct(&amp;lvItem); <br>lvItem.iItem = 0x0FFFFFFF; <br>lvItem.mask = LVIF_PARAM | LVIF_TEXT; <br>lvItem.pszText = pszUser; <br>lvItem.cchTextMax = lstrlen(lvItem.pszText); <br>iItem = ListView_InsertItem(ghwndMsg, &amp;lvItem); <br> <br>{ <br>TCHAR sz[MAX_PATH]; <br>SYSTEMTIME sysTime; <br>GetLocalTime(&amp;sysTime); <br>wsprintf(sz, "%02d:%02d:%02d", sysTime.wHour, sysTime.wMinute, sysTime.wSecond); <br>ListView_SetItemText(ghwndMsg, iItem, ILV_TIME, sz); <br>} <br> <br>ListView_SetItemText(ghwndMsg, iItem, ILV_TEXT, pszMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookData(INmChannelData * pChannelData) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookData(INmChannelData * pChannelData) <br>{ <br>HRESULT hr; <br>CDataNotify * pNotify; <br> <br>ASSERT(NULL != pChannelData); <br>ASSERT(NULL == g_pChannelData); <br> <br>g_pChannelData = pChannelData; <br> <br>    // Connect to the channel object <br>    pNotify = new CDataNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(pChannelData); <br>if (SUCCEEDED(hr)) <br>{ <br>g_pNotifyData = pNotify; <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>FreeDataChannel(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeDataChannel(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeDataChannel(void) <br>{ <br>// Release all notify <br>if (NULL != g_pNotifyData) <br>{ <br>g_pNotifyData-&gt;Disconnect(); <br>g_pNotifyData-&gt;Release(); <br>g_pNotifyData = NULL; <br>} <br> <br>if (NULL != g_pChannelData) <br>{ <br>g_pChannelData-&gt;Release(); <br>g_pChannelData = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CDataNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CDataNotify::CDataNotify() : RefCount(), CNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>CDataNotify::~CDataNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CDataNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CDataNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>} <br>else if (riid == IID_INmChannelDataNotify) <br>{ <br>*ppvObject = (INmChannelDataNotify *)this; <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmChannelDataNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from INmChannelNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::NmUI(CONFN uNotify) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>if (NM_MEMBER_ADDED == uNotify) <br>{ <br>AddMember(pMember); <br>} <br>else if (NM_MEMBER_REMOVED == uNotify) <br>{ <br>RemoveMember(pMember); <br>} <br> <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::DataSent(INmMember *pMember, ULONG uSize, LPBYTE pb) <br>{ <br>LPTSTR psz; <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>ASSERT(uSize &gt; CB_NM2_HDR); <br>psz = (LPTSTR) (pb + *(LPDWORD) pb);  // skip past header <br>#else <br>psz = (LPTSTR) pb; <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>DisplayMsg(psz, g_pMemberLocal); <br> <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::DataReceived(INmMember *pMember, ULONG uSize, LPBYTE pb, ULONG dwFlags) <br>{ <br>LPTSTR psz; <br> <br>// Warning : Doesn't handle broken packets <br>// TODO: Check dwFlags &amp; NM_DF_SEGMENT_END <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>ASSERT(uSize &gt; CB_NM2_HDR); <br>psz = (LPTSTR) (pb + *(LPDWORD) pb);  // skip past header <br>#else <br>psz = (LPTSTR) pb; <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>DisplayMsg(psz, pMember); <br> <br>return S_OK; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

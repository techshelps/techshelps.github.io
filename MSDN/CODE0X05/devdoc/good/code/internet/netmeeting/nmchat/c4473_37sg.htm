<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMD.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4480"></a>CMD.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       CMD.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdOptions(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdOptions(void) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdClear(void) <br>// <br>// Clear the message window <br>// <br>//**************************************************************************** <br> <br>VOID CmdClear(void) <br>{ <br>ClearText(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdExit(void) <br>// <br>// Shutdown the application. <br>// <br>//**************************************************************************** <br> <br>VOID CmdExit(void) <br>{ <br>DestroyWindow(ghwndMain); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdHelp(void) <br>// <br>// Bring up help for the application <br>// <br>//**************************************************************************** <br> <br>VOID CmdHelp(void) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdFont(void) <br>// <br>// Change the font for the message window <br>// <br>//**************************************************************************** <br> <br>VOID CmdFont(void) <br>{ <br>#ifdef NOTUSED <br>CHOOSEFONT cf; <br>LOGFONT    lf; <br>HFONT      hfont; <br> <br>lf = gPref.lf; <br> <br>ClearStruct(&amp;cf); <br>cf.lStructSize = sizeof(CHOOSEFONT); <br>cf.hwndOwner = ghwndMain; <br>cf.lpLogFont = &amp;lf; <br>cf.iPointSize = 10; <br>cf.Flags = CF_SCREENFONTS | CF_EFFECTS | CF_INITTOLOGFONTSTRUCT; <br> <br>if (ChooseFont(&amp;cf) != TRUE) <br>return; <br> <br>hfont= CreateFontIndirect(cf.lpLogFont); <br>if (hfont == hfontNil) <br>return; <br> <br>MaybeDeleteObject((HGDIOBJ *) &amp;ghfontEntry); <br>ghfontEntry = hfont; <br>SendMessage(ghwndMsg, WM_SETFONT, <br>(WPARAM) ghfontEntry, MAKELPARAM(TRUE, 0)); <br> <br>gPref.lf = lf; <br>#endif <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdAbout(void) <br>// <br>// Display the about box <br>// <br>//**************************************************************************** <br> <br>VOID CmdAbout(void) <br>{ <br>TCHAR szVersion[MAX_PATH]; <br> <br>LoadString(ghInst, IDS_VERSION, szVersion, CCHMAX(szVersion)); <br> <br>ShellAbout(ghwndMain, szVersion, NULL, LoadIcon(ghInst, MAKEINTRESOURCE(ICO_MAIN))); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Main window command table definition. <br>// <br>//**************************************************************************** <br> <br>static CMD _rgcmdMain[] = <br>{ <br>{IDM_EXIT,                CmdExit}, <br> <br>{IDM_VIEW_CLEAR,          CmdClear}, <br>{IDM_VIEW_FONT,           CmdFont}, <br>{IDM_OPTIONS,             CmdOptions}, <br> <br>{IDM_HELP,                CmdHelp}, <br>{IDM_ABOUT,               CmdAbout}, <br> <br>{0, NULL}  // MUST be last entry in the table <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgCmdMain(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>// <br>// Handle a WM_COMMAND message <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgCmdMain(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>{ <br>UINT wCmd = (UINT) GET_WM_COMMAND_ID(wparam, lparam); <br> <br>for (LPCMD lpcmd = _rgcmdMain; 0 != lpcmd-&gt;wCmd; lpcmd++) <br>{ <br>if (wCmd == lpcmd-&gt;wCmd) <br>{ <br>lpcmd-&gt;pfncmd(); <br>break; <br>} <br>} <br> <br>return 0L; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

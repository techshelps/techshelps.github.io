<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4491"></a>UTIL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       UTIL.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SendText(void) <br>// <br>// Send the line of text in the edit control. <br>// <br>//**************************************************************************** <br> <br>VOID SendText(void) <br>{ <br>UINT  cb; <br>TCHAR sz[MAX_PATH]; <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>BYTE   buffer[CB_NM2_HDR + (MAX_PATH*2)]; <br> <br>// Get the text line <br>cb = SendMessage(ghwndEdit, WM_GETTEXT, (WPARAM) MAX_PATH, (LPARAM) sz); <br>SendMessage(ghwndEdit, EM_SETSEL, (WPARAM) 0, (LPARAM)-1); <br>SendMessage(ghwndEdit, WM_SETTEXT, (WPARAM) 0, (LPARAM) ""); <br> <br>if ((0 != cb) &amp;&amp; (NULL != g_pChannelData)) <br>{ <br>INmMember * pMember = GetSelectedMember(); <br>if ((pMember != NULL) &amp;&amp; (S_OK == pMember-&gt;IsSelf())) <br>{ <br>// Local Member =&gt; Everyone =&gt; Broadcast <br>pMember = NULL; <br>} <br> <br>cb++; // include final null <br>#ifdef UNICODE <br>lstrcpy(&amp;buffer[CB_NM2_HDR], sz); <br>#else <br>cb = MultiByteToWideChar(CP_ACP, 0, sz, cb, (LPWSTR) &amp;buffer[CB_NM2_HDR], MAX_PATH); <br>cb *= 2; // adjust for UNICODE <br>#endif /* !UNICODE */ <br> <br>// Add special prefix <br>cb += CB_NM2_HDR; <br>ZeroMemory(buffer, CB_NM2_HDR); <br>* ((LPDWORD) buffer) = CB_NM2_HDR; <br> <br>g_pChannelData-&gt;SendData(pMember, cb, buffer, 0); <br>} <br> <br>#else <br>// Get the text line <br>cb = SendMessage(ghwndEdit, WM_GETTEXT, (WPARAM) CCHMAX(sz), (LPARAM) sz); <br>SendMessage(ghwndEdit, EM_SETSEL, (WPARAM) 0, (LPARAM)-1); <br>SendMessage(ghwndEdit, WM_SETTEXT, (WPARAM) 0, (LPARAM) ""); <br> <br>if ((0 != cb) &amp;&amp; (NULL != g_pChannelData)) <br>{ <br>INmMember * pMember = GetSelectedMember(); <br>if ((pMember != NULL) &amp;&amp; (S_OK == pMember-&gt;IsSelf())) <br>{ <br>// Local Member =&gt; Everyone =&gt; Broadcast <br>pMember = NULL; <br>} <br> <br>cb++; // include final null <br>g_pChannelData-&gt;SendData(pMember, cb, (LPBYTE) sz, 0); <br>} <br>#endif /* NM2_CHAT_PROTOCOL */ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ClearText(void) <br>// <br>//**************************************************************************** <br> <br>VOID ClearText(void) <br>{ <br>ListView_DeleteAllItems(ghwndMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SizeMsgWindow(int dx, int dy) <br>// <br>//**************************************************************************** <br> <br>VOID SizeMsgWindow(int dx, int dy) <br>{ <br>MoveWindow(ghwndEdit, XP_LEFT, dy - DYP_EDIT, dx, DYP_EDIT, TRUE); <br>dy -= (YP_TOP + DYP_EDIT); <br> <br>MoveWindow(ghwndUser, XP_LEFT, YP_TOP, DXP_USER, dy, TRUE); <br>dx -= DXP_USER; <br> <br>MoveWindow(ghwndMsg, XP_LEFT + DXP_USER, YP_TOP, dx, dy, TRUE); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID RecalcMsgWindow(void) <br>// <br>//**************************************************************************** <br> <br>VOID RecalcMsgWindow(void) <br>{ <br>RECT rc; <br> <br>GetClientRect(ghwndMain, &amp;rc); <br>SizeMsgWindow(rc.right, rc.bottom); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPVOID LpvAlloc(int cb) <br>// <br>// Return a pointer to an allocated array of bytes <br>// <br>//**************************************************************************** <br> <br>LPVOID LpvAlloc(int cb) <br>{ <br>return LocalAlloc(LMEM_FIXED, cb); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPTSTR PszAlloc(int cch) <br>// <br>//**************************************************************************** <br> <br>LPTSTR PszAlloc(int cch) <br>{ <br>return (LPTSTR) LocalAlloc(LMEM_FIXED, sizeof(TCHAR) * (cch+1)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreePlpv(LPVOID plpv) <br>// <br>// Free the data pointed to by plpv and set *plpv to NULL <br>// <br>//**************************************************************************** <br> <br>VOID FreePlpv(LPVOID plpv) <br>{ <br>if ((plpv == NULL) || (*(VOID FAR * FAR *)plpv == NULL)) { <br>return; <br>} <br> <br>LocalFree(*(VOID FAR * FAR *)plpv); <br>*(VOID FAR * FAR *)plpv = NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID MaybeDeleteObject(HGDIOBJ * phgdi) <br>// <br>// Check usage count, delete if we can <br>// <br>//**************************************************************************** <br> <br>VOID MaybeDeleteObject(HGDIOBJ * phgdi) <br>{ <br>if (*phgdi == hgdiNil) <br>return; <br> <br>DeleteObject(*phgdi); <br>*phgdi = hgdiNil; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

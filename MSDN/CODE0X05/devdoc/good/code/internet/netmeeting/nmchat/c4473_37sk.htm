<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBAL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4484"></a>GLOBAL.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       GLOBAL.H <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef GLOBAL_H <br>#define GLOBAL_H <br> <br>// #define NM2_CHAT_PROTOCOL  // Define this to use the NM 2.0 chat protocol <br>#ifdef NM2_CHAT_PROTOCOL <br>#define CB_NM2_HDR   8     // NetMeeting 2.0 chat protocol has an 8 byte header <br>#endif <br> <br> <br>//------------------------------------------------------- <br>// Useful constants <br> <br>#define chNull   ('\0') <br>#define lpNil    (NULL) <br> <br>#define hwndNil      ((HWND) NULL) <br>#define hfontNil     ((HFONT) NULL) <br>#define hgdiNil      ((HGDIOBJ) NULL) <br> <br> <br>//------------------------------------------------------- <br>// Useful macros <br> <br>#define ClearBytes(lpv, cb)ZeroMemory((LPVOID) (lpv), (cb)) <br>#define ClearStruct(lpv)ZeroMemory((LPVOID) (lpv), sizeof(*(lpv))) <br>#define InitStruct(lpv)        {ClearStruct(lpv); (* (LPDWORD) lpv) = sizeof(*(lpv));} <br>#define CopyStruct(pDest, pSrc)  CopyMemory(pDest, pSrc, sizeof(*(pDest))) <br> <br>#define SetEmptySz(sz)( *(sz) = _T('\0') ) <br>#define FEmptySz(sz)            (((sz) == NULL) || (*(sz) == _T('\0'))) <br> <br>#define ARRAY_ELEMENTS(rg)      (sizeof(rg) / sizeof(rg[0])) <br>#define CCHMAX(sz)              (sizeof(sz) / sizeof(TCHAR)) <br> <br> <br> <br> <br>#ifdef DEBUG <br>VOID FAR PASCAL AssertProc(LPTSTR lpszMsg, LPTSTR lpszAssert, LPTSTR lpszFile, UINT line); <br> <br>#define DEBASSERT(exp,szMsg)  \ <br>if (!(exp))                                                      \ <br>{                                                                \ <br>static char _szAssert[] = #exp ;   \ <br>static char _szMsg[]    = szMsg;   \ <br>AssertProc(_szMsg,_szAssert,__FILE__,__LINE__); \ <br>} <br> <br>#define ASSERT(f)       DEBASSERT(f, "(" #f ")") <br>#define AssertSz(f,sz)  DEBASSERT(f, sz) <br>#define NotReached()    DEBASSERT(FALSE, "NotReached declaration was reached!") <br>#else <br>#define ASSERT(f) <br>#define AssertSz(f, sz) <br>#define NotReached() <br>#endif <br> <br> <br>//**************************************************************************** <br>// <br>// Functions for handling main window messages.  The message-dispatching <br>// mechanism expects all message-handling functions to have the following <br>// prototype: <br>// <br>// Function pointer prototype for message handling functions: <br>// LRESULT FunctionName(HWND, UINT, WPARAM, LPARAM); <br>// <br>//**************************************************************************** <br> <br> <br> <br>typedef LRESULT (*PFNMSG)(HWND, UINT, WPARAM, LPARAM); <br> <br>// This structure maps messages to message handling functions. <br>typedef struct _MSD <br>{ <br>UINT   uMsg; <br>PFNMSG pfnmsg; <br>} MSD;                 // MeSsage Dispatch structure <br>typedef MSD * LPMSD; <br> <br> <br>//**************************************************************************** <br>// <br>// Functions for handling main window commands--ie. functions for <br>// processing WM_COMMAND messages based on the wParam value. <br>// The message-dispatching mechanism expects all command-handling <br>// functions to have the following prototype: <br>// <br>//**************************************************************************** <br> <br>typedef VOID (*PFNCMD)(VOID); <br> <br>// This structure maps command IDs to command handling functions. <br>typedef struct _CMD <br>{ <br>UINT     wCmd; <br>PFNCMD pfncmd; <br>} CMD;                 // CoMmand Dispatch structure <br>typedef CMD * LPCMD; <br> <br> <br>//**************************************************************************** <br>// <br>// Special resource constants <br>// <br>//**************************************************************************** <br> <br>#define IDW_MSG   100 <br>#define IDW_USER  101 <br>#define IDW_EDIT  102 <br> <br>// See _rgColMember <br>#define ILV_NAME    0 <br>#define ILV_TIME    1 <br>#define ILV_TEXT    2 <br> <br>const int DYP_EDIT   = 30;  // Fixed Height of Edit control <br>const int DXP_USER   = 80;  // Fixed Width of User List <br>const int YP_TOP     = 3; <br>const int XP_LEFT    = 0; <br> <br> <br>//**************************************************************************** <br>// <br>// Global Function Prototypes. <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>// from util.cpp <br>LPVOID LpvAlloc(int cb); <br>LPTSTR PszAlloc(int cch); <br>VOID FreePlpv(LPVOID plpv); <br>VOID MaybeDeleteObject(HGDIOBJ * phgdi); <br>VOID SizeMsgWindow(int dx, int dy); <br>VOID RecalcMsgWindow(void); <br> <br>VOID SendText(void); <br>VOID ClearText(void); <br>VOID DisplayMsg(LPTSTR pszMsg, INmMember * pMember); <br>VOID DisplaySysMsg(LPTSTR pszMsg, INmMember * pMember); <br>VOID DisplayMessage(LPTSTR pszMsg, LPTSTR pszUser); <br> <br> <br>//**************************************************************************** <br>// <br>// Global Variables <br>// <br>//**************************************************************************** <br> <br>extern HINSTANCE ghInst;          // The current instance handle <br>extern HACCEL    ghAccelTable;    // Menu accelerators <br>extern HWND      ghwndMain;       // Main Window <br>extern HMENU     ghMenu;          // Main Menu <br>extern HWND      ghwndMsg;        // Message Window <br>extern HWND      ghwndUser;       // User List <br>extern HWND      ghwndEdit;       // Edit control <br>extern HFONT     ghfontEntry;     // Font for message Window <br> <br>extern const GUID g_guidApp;      // Our NmChat Guid <br>extern const GUID g_guidNM2Chat;  // NM 2.0 Chat guid <br> <br>#endif /* GLOBAL_H */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

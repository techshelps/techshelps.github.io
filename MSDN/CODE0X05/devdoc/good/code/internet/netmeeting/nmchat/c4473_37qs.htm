<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCONF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4474"></a>CCONF.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMCHAT.EXE <br>//  File:       CCONF.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>// Global Varaiables <br>INmManager * g_pMgr  = NULL;             // The Conference Manager <br>CMgrNotify * g_pMgrNotify = NULL;        // Notifications for the Manager <br>INmConference * g_pConference = NULL;    // The Current Conference <br>CConfNotify * g_pConferenceNotify =NULL; // Notifications for the Conference <br> <br>// Local Application Guid : {D29A8C50-774F-11d0-8B1D-00A0C91BC90E} <br>const GUID g_guidApp =  <br>{ 0xd29a8c51, 0x774f, 0x11d0, { 0x8b, 0x1d, 0x0, 0xa0, 0xc9, 0x1b, 0xc9, 0xe} }; <br> <br>// NetMeeting 2.0 chat guid: {340F3A60-7067-11D0-A041-444553540000} <br>const GUID g_guidNM2Chat = <br>{ 0x340f3a60, 0x7067, 0x11d0, { 0xa0, 0x41, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0 } }; <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CMgrNotify <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CMgrNotify::CMgrNotify() : RefCount(), CNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>CMgrNotify::~CMgrNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CMgrNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CMgrNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>} <br>else if (riid == IID_INmManagerNotify) <br>{ <br>*ppvObject = (INmManagerNotify *)this; <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT InitConfMgr(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT InitConfMgr(void) <br>{ <br>HRESULT hr; <br>LPCLASSFACTORY pcf; <br> <br>    // Notify the system we want to use the conferencing services <br>    // by creating a conference manager object <br>    hr = CoGetClassObject(CLSID_NmManager, <br>                          CLSCTX_INPROC, <br>                          NULL, <br>                          IID_IClassFactory, <br>                          (void**)&amp;pcf); <br>    if (SUCCEEDED(hr)) <br>    { <br>        // Get the conference manager object <br>        hr = pcf-&gt;CreateInstance(NULL, IID_INmManager, (void**)&amp;g_pMgr); <br>    if (SUCCEEDED(hr)) <br>        { <br>            // Connect to the conference manager object <br>            g_pMgrNotify = new CMgrNotify(); <br>            if (NULL != g_pMgrNotify) <br>            { <br>                hr = g_pMgrNotify-&gt;Connect(g_pMgr); <br>    if (SUCCEEDED(hr)) <br>                { <br>                ULONG uchCaps = NMCH_ALL; <br>                ULONG uOptions = 0; <br>hr = g_pMgr-&gt;Initialize(&amp;uOptions, &amp;uchCaps); <br>} <br>            } <br>        } <br> <br>        pcf-&gt;Release(); <br>    } <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeConfMgr(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeConfMgr(void) <br>{ <br>// Release conference manager notify <br>if (NULL != g_pMgrNotify) <br>{ <br>g_pMgrNotify-&gt;Disconnect(); <br>g_pMgrNotify-&gt;Release(); <br>g_pMgrNotify = NULL; <br>} <br> <br>// Release conference manager <br>if (NULL != g_pMgr) <br>{ <br>g_pMgr-&gt;Release(); <br>g_pMgr = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeConference(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeConference(void) <br>{ <br>if (NULL != g_pConferenceNotify) <br>{ <br>g_pConferenceNotify-&gt;Disconnect(); <br>g_pConferenceNotify-&gt;Release(); <br>g_pConferenceNotify = NULL; <br>} <br> <br>if (NULL != g_pConference) <br>{ <br>g_pConference-&gt;Release(); <br>g_pConference = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmManagerNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from INmManagerNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::NmUI(CONFN confn) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::CallCreated(INmCall *pCall) <br>{ <br>return S_OK; <br>} <br> <br>// As soon as a conference is available, create the data channel <br>HRESULT STDMETHODCALLTYPE CMgrNotify::ConferenceCreated(INmConference *pConference) <br>{ <br>ASSERT(NULL == g_pConference); <br>ASSERT(NULL == g_pChannelData); <br> <br>HookConference(pConference); <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookConference(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookConference(INmConference * pConference) <br>{ <br>HRESULT hr; <br> <br>ASSERT(NULL != pConference); <br>ASSERT(NULL == g_pConference); <br>g_pConference = pConference; <br> <br>pConference-&gt;AddRef(); <br> <br>    // Connect to the conference object <br>    ASSERT(NULL == g_pConferenceNotify) <br>    g_pConferenceNotify = new CConfNotify(); <br>    if (NULL == g_pConferenceNotify) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = g_pConferenceNotify-&gt;Connect(pConference); <br>if (FAILED(hr)) <br>{ <br>g_pConferenceNotify-&gt;Release(); <br>g_pConferenceNotify = NULL; <br>} <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CConfNotify <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CConfNotify::CConfNotify() : RefCount(), CNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>CConfNotify::~CConfNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>} <br>else if (riid == IID_INmConferenceNotify) <br>{ <br>*ppvObject = (INmConferenceNotify *)this; <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmConferenceNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::NmUI(CONFN uNotify) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::StateChanged(NM_CONFERENCE_STATE uState) <br>{ <br>if (NULL == g_pConference) <br>return S_OK; // weird <br> <br>switch (uState) <br>{ <br>case NM_CONFERENCE_ACTIVE: <br>{ <br>HRESULT hr; <br>INmChannelData * pChannelData; <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>hr = g_pConference-&gt;CreateDataChannel(&amp;pChannelData, g_guidNM2Chat); <br>#else <br>hr = g_pConference-&gt;CreateDataChannel(&amp;pChannelData, g_guidApp); <br>#endif /* NM2_CHAT_PROTOCOL */ <br>if (S_OK == hr) <br>{ <br>hr = HookData(pChannelData);  // Real hook is g_pChannelData <br>} <br>DisplaySysMsg((S_OK == hr) ? TEXT("Chat Started") : TEXT("Chat failed to start!"), NULL); <br>break; <br>} <br> <br>case NM_CONFERENCE_INITIALIZING: <br>break; // can't do anything just yet <br> <br>case NM_CONFERENCE_WAITING: <br>FreeDataChannel(); <br>DisplaySysMsg(TEXT("Waiting in Host Mode"), NULL); <br>break; <br> <br>case NM_CONFERENCE_IDLE: <br>FreeDataChannel(); <br>FreeConference(); <br>DisplaySysMsg(TEXT("No conference"), NULL); <br>break; <br>} <br> <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::ChannelChanged(NM_CHANNEL_NOTIFY uNotify, INmChannel *pChannel) <br>{ <br>return S_OK; <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

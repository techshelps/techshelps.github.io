<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDATA.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4531"></a>CDATA.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE <br>//  File:       CDATA.CPP <br>//  Content:    INmChannelData Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>INmChannelData * g_pChannelData; <br>CDataNotify * g_pNotifyData; <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookData(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookData(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>CDataNotify * pNotify; <br> <br>ASSERT(NULL != pChannel); <br>if (NULL != g_pChannelData) <br>{ <br>ERROR_MSG("HookData: replacing existing g_pChannelData"); <br>} <br> <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelData, (void **)&amp;g_pChannelData); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("HookData:Unable to get Data Channel"); <br>return hr; <br>} <br>// keep QI ref around <br> <br>    // Connect to the channel object <br>    pNotify = new CDataNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(g_pChannelData); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("CConfNotify Failed (%s)", GetHrSz(hr)); <br>pNotify-&gt;Release(); <br>} <br>else <br>{ <br>OBJECT_MSG("Data Connection point established successfully"); <br>g_pNotifyData = pNotify; <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>g_pChannelData-&gt;Release(); <br>g_pChannelData = NULL; <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeDataChannel(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeDataChannel(void) <br>{ <br>// Release all notify <br>if (NULL != g_pNotifyData) <br>{ <br>OBJECT_MSG("[%08X] data notify released", g_pNotifyData); <br>g_pNotifyData-&gt;Disconnect(); <br>g_pNotifyData-&gt;Release(); <br>g_pNotifyData = NULL; <br>} <br> <br>if (NULL != g_pChannelData) <br>{ <br>OBJECT_MSG("[%08X] data channel released", g_pChannelData); <br>g_pChannelData-&gt;Release(); <br>g_pChannelData = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CDataNotify <br>// <br>//**************************************************************************** <br> <br>CDataNotify::CDataNotify() : RefCount(), CNotify() <br>{ <br>OBJECT_MSG("CDataNotify created"); <br>} <br> <br>CDataNotify::~CDataNotify() <br>{ <br>OBJECT_MSG("CDataNotify destroyed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CDataNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CDataNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>OBJECT_MSG("CDataNotify::QueryInterface(): Returning IUnknown."); <br>} <br>else if (riid == IID_INmChannelDataNotify) <br>{ <br>*ppvObject = (INmChannelDataNotify *)this; <br>OBJECT_MSG("CDataNotify::QueryInterface(): Returning INmChannelDataNotify."); <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>OBJECT_MSG("CDataNotify::QueryInterface(): Called on unknown interface."); <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmChannelDataNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CDataNotify::NmUI(CONFN uNotify) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::NmUI(CONFN uNotify) <br>{ <br>NOTIFY_MSG("CDataNotify::NmUI uNotify=%08X, pChannel=%08X", uNotify, CNotify::GetPunk()); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CDataNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>NOTIFY_MSG("CDataNotify::MemberChanged uNotify=%d pMember=%08X, pChannel=%08X", uNotify, pMember, CNotify::GetPunk()); <br> <br>PUSER pUser = PUserFromINmMember(pMember); <br>if (NULL != pUser) <br>{ <br>UpdateUserChannel(pUser, (INmChannel *) (CNotify::GetPunk()), uNotify); <br>} <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CDataNotify::DataSent(INmMember *pMember, ULONG uSize, LPBYTE pb) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::DataSent(INmMember *pMember, ULONG uSize, LPBYTE pb) <br>{ <br>LPTSTR psz; <br>NOTIFY_MSG("CDataNotify::DataSent uSize=%08X", uSize); <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>ASSERT(uSize &gt; CB_NM2_HDR); <br>psz = (LPTSTR) (pb + *(LPDWORD) pb);  // skip past header <br>#else <br>psz = (LPTSTR) pb; <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>DisplayChatMsg(pMember, psz, MSG_SENT); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CDataNotify::DataReceived(INmMember *pMember, ULONG uSize, LPBYTE pb, ULONG dwFlags) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CDataNotify::DataReceived(INmMember *pMember, ULONG uSize, LPBYTE pb, ULONG dwFlags) <br>{ <br>LPTSTR psz; <br>NOTIFY_MSG("CDataNotify::DataReceived uSize=%08X", uSize); <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>ASSERT(uSize &gt; CB_NM2_HDR); <br>psz = (LPTSTR) (pb + *(LPDWORD) pb);  // skip past header <br>#else <br>psz = (LPTSTR) pb; <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>if (dwFlags &amp; NM_DF_SEGMENT_BEGIN) <br>{ <br>DisplayChatMsg(pMember, psz, MSG_RECEIVED, dwFlags); <br>} <br>else <br>{ <br>WARN_MSG("Partial data received"); <br>} <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DisplayChatMsg(INmMember * pMember, PTCHAR pszMsg, int msgType, DWORD dwFlags) <br>// <br>//**************************************************************************** <br> <br>VOID DisplayChatMsg(INmMember * pMember, PTCHAR pszMsg, int msgType, DWORD dwFlags) <br>{ <br>COLORREF cv; <br>TCHAR sz[MAX_PATH]; <br> <br>PUSER pUser = PUserFromINmMember(pMember); <br> <br>switch (msgType) <br>{ <br>case MSG_SENT: <br>{ <br>cv = RGB(127, 0, 127); <br>if (NULL == pUser) <br>{ <br>lstrcpy(sz, "Msg to Everyone"); <br>} <br>else <br>{ <br>wsprintf(sz, "Whisper to %s", pUser-&gt;pszName);  <br>} <br>break; <br>} <br>case MSG_RECEIVED: <br>{ <br>cv = RGB(255, 0, 255); <br>if (NULL == pUser) <br>{ <br>lstrcpy(sz, "Message from ????"); <br>} <br>else if (dwFlags &amp; NM_DF_PRIVATE) <br>{ <br>wsprintf(sz, "Whisper from %s", pUser-&gt;pszName);  <br>} <br>else if (dwFlags &amp; NM_DF_BROADCAST) <br>{ <br>wsprintf(sz, "Message from %s", pUser-&gt;pszName);  <br>} <br>break; <br>} <br>default: <br>cv = RGB(0, 0, 0); <br>break; <br>} <br> <br>Log(RGB(0, 0, 0), sz); <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>#ifndef UNICODE <br>// Convert UNICODE to ANSI <br>WideCharToMultiByte(CP_ACP, 0, (LPWSTR) pszMsg, -1, sz, MAX_PATH, NULL, NULL); <br>pszMsg = sz; <br>#endif /* UNICODE */ <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>Log(cv, pszMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoSendChatMsg(LPTSTR psz, INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID DoSendChatMsg(LPTSTR psz, INmMember * pMember) <br>{ <br>HRESULT hr; <br>UINT cb = lstrlen(psz) + 1; // include final null <br>if ((1 == cb) || (NULL == g_pChannelData)) <br>{ <br>return; <br>} <br> <br>#ifdef NM2_CHAT_PROTOCOL <br>BYTE buffer[CB_NM2_HDR + (MAX_PATH*2)]; <br> <br>#ifdef UNICODE <br>lstrcpy(&amp;buffer[CB_NM2_HDR], psz); <br>#else <br>cb = MultiByteToWideChar(CP_ACP, 0, psz, cb, (LPWSTR) &amp;buffer[CB_NM2_HDR], MAX_PATH); <br>cb *= 2; // adjust for UNICODE <br>#endif /* !UNICODE */ <br> <br>// Add special prefix <br>cb += CB_NM2_HDR; <br>ZeroMemory(buffer, CB_NM2_HDR); <br>* ((LPDWORD) buffer) = CB_NM2_HDR; <br> <br>psz = (LPTSTR) buffer; <br> <br>#else <br>cb++; // include final null <br>#endif /* NM2_CHAT_PROTOCOL */ <br> <br>if ((NULL != pMember) &amp;&amp; (S_OK == pMember-&gt;IsSelf())) <br>pMember = NULL; // local machine = everyone <br> <br>hr = g_pChannelData-&gt;SendData(pMember, cb, (LPBYTE) psz, 0); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("DoSendChatMsg: SendData failed: %s", GetHrSz(hr)); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoCreateDataChannel(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>VOID DoCreateDataChannel(INmConference * pConference) <br>{ <br>INmChannelData * pChannelData; <br>HRESULT hr; <br> <br>if (NULL == pConference) <br>{ <br>WARN_MSG("No conference."); <br>return; <br>} <br> <br>if (NULL != g_pChannelData) <br>{ <br>WARN_MSG("Data channel already exists"); <br>} <br> <br>hr = pConference-&gt;CreateDataChannel(&amp;pChannelData, g_guidNM2Chat); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("CreateDataChannel: Failed hr=%s", GetHrSz(hr)); <br>return; <br>} <br> <br>if (NULL == g_pChannelData) <br>{ <br>ERROR_MSG("DoCreateDataChannel: Failed to hook"); <br>} <br>else <br>{ <br>// The AddRef was done in the hook code. <br>pChannelData-&gt;Release(); <br>} <br> <br>TRACE_MSG("Created Data Channel"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoActivateDataChannel(BOOL fActive) <br>// <br>//**************************************************************************** <br> <br>VOID DoActivateDataChannel(BOOL fActive) <br>{ <br>HRESULT hr; <br> <br>if (NULL == g_pChannelData) <br>return; <br> <br>hr = g_pChannelData-&gt;IsActive(); <br>TRACE_MSG("Data channel is %s", (S_OK == hr) ? "Active" : "Inactive"); <br> <br>hr = g_pChannelData-&gt;SetActive(fActive); <br>TRACE_MSG("Data channel SetActive Result=%s", GetHrSz(hr)); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

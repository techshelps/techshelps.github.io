<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4542"></a>DEBUG.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       DEBUG.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>#define STRING_CASE(val)               case val: pcsz = #val; break <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR GetHrSz(HRESULT hr) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR GetHrSz(HRESULT hr) <br>{ <br>LPCTSTR pcsz; <br>static TCHAR _szHRESULT[] = "0x12345678"; <br> <br>switch (hr) <br>{ <br>STRING_CASE(S_OK); <br>STRING_CASE(S_FALSE); <br> <br>STRING_CASE(NM_E_NOT_INITIALIZED); <br>STRING_CASE(NM_E_CHANNEL_ALREADY_EXISTS); <br>STRING_CASE(NM_E_NO_T120_CONFERENCE); <br>STRING_CASE(NM_E_NOT_ACTIVE); <br> <br>STRING_CASE(DRAGDROP_S_CANCEL); <br>STRING_CASE(DRAGDROP_S_DROP); <br>STRING_CASE(DRAGDROP_S_USEDEFAULTCURSORS); <br> <br>STRING_CASE(E_UNEXPECTED); <br>STRING_CASE(E_NOTIMPL); <br>STRING_CASE(E_OUTOFMEMORY); <br>STRING_CASE(E_INVALIDARG); <br>STRING_CASE(E_NOINTERFACE); <br>STRING_CASE(E_POINTER); <br>STRING_CASE(E_HANDLE); <br>STRING_CASE(E_ABORT); <br>STRING_CASE(E_FAIL); <br>STRING_CASE(E_ACCESSDENIED); <br> <br>STRING_CASE(CLASS_E_NOAGGREGATION); <br> <br>STRING_CASE(CO_E_NOTINITIALIZED); <br>STRING_CASE(CO_E_ALREADYINITIALIZED); <br>STRING_CASE(CO_E_INIT_ONLY_SINGLE_THREADED); <br> <br>STRING_CASE(REGDB_E_INVALIDVALUE); <br>STRING_CASE(REGDB_E_CLASSNOTREG); <br>STRING_CASE(REGDB_E_IIDNOTREG); <br> <br>STRING_CASE(DV_E_DVASPECT); <br>STRING_CASE(DV_E_LINDEX); <br>STRING_CASE(DV_E_TYMED); <br>STRING_CASE(DV_E_FORMATETC); <br> <br>default: <br>wsprintf(_szHRESULT, TEXT("%#lx"), hr); <br>pcsz = _szHRESULT; <br>break; <br>} <br> <br>return pcsz; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR GetConfnSz(CONFN confn) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR GetConfnSz(CONFN confn) <br>{ <br>LPCTSTR pcsz; <br>static TCHAR _szMsg[256]; <br> <br>switch (confn) <br>{ <br>STRING_CASE(CONFN_FT_UI); <br>STRING_CASE(CONFN_FT_OFFERED); <br>STRING_CASE(CONFN_FT_STARTED); <br>STRING_CASE(CONFN_FT_PROGRESS); <br>STRING_CASE(CONFN_FT_COMPLETE); <br>STRING_CASE(CONFN_FT_CANCELED); <br> <br>STRING_CASE(CONFN_CALL_INCOMPATIBLE); <br>STRING_CASE(CONFN_CALL_OLDER); <br>STRING_CASE(CONFN_CALL_NEWER); <br>STRING_CASE(CONFN_CALL_IGNORED); <br>STRING_CASE(CONFN_CALL_FAILED); <br>STRING_CASE(CONFN_CALL_IN_CONFERENCE); <br> <br>STRING_CASE(CONFN_NM_STARTED); <br>STRING_CASE(CONFN_NM_STOPPED); <br> <br>default: <br>wsprintf(_szMsg, TEXT("CONFN_%08X"), confn); <br>pcsz = _szMsg; <br>break; <br>} <br>return pcsz; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR GetNmchSz(ULONG uch) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR GetNmchSz(ULONG uch) <br>{ <br>LPCTSTR pcsz; <br>static TCHAR _szMsg[256]; <br> <br>switch (uch) <br>{ <br>case NMCH_DATA:  pcsz = TEXT("Data");  break; <br>case NMCH_AUDIO: pcsz = TEXT("Audio"); break; <br>case NMCH_VIDEO: pcsz = TEXT("Video"); break; <br>case NMCH_SHARE: pcsz = TEXT("Share"); break; <br>case NMCH_FT:    pcsz = TEXT("Ft");    break; <br> <br>case NMCH_ALL: <br>case NMCH_NONE: <br>default: <br>wsprintf(_szMsg, TEXT("%04X"), uch); <br>pcsz = _szMsg; <br>break; <br>} <br>return pcsz; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR GetCallStateSz(NM_CALL_STATE uState) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR GetCallStateSz(NM_CALL_STATE uState) <br>{ <br>LPCTSTR pcsz; <br>static TCHAR _szMsg[256]; <br> <br>switch (uState) <br>{ <br>STRING_CASE(NM_CALL_INVALID); <br>STRING_CASE(NM_CALL_INIT); <br>STRING_CASE(NM_CALL_RING); <br>STRING_CASE(NM_CALL_SEARCH); <br>STRING_CASE(NM_CALL_WAIT); <br>STRING_CASE(NM_CALL_ACCEPTED); <br>STRING_CASE(NM_CALL_REJECTED); <br>STRING_CASE(NM_CALL_CANCELED); <br> <br>default: <br>wsprintf(_szMsg, TEXT("NM_CALL_%04X"), uState); <br>pcsz = _szMsg; <br>break; <br>} <br>return pcsz; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR GetConferenceStateSz(NM_CONFERENCE_STATE uState) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR GetConferenceStateSz(NM_CONFERENCE_STATE uState) <br>{ <br>LPCTSTR pcsz; <br>static TCHAR _szMsg[256]; <br> <br>switch (uState) <br>{ <br>STRING_CASE(NM_CONFERENCE_IDLE); <br>STRING_CASE(NM_CONFERENCE_WAITING); <br>STRING_CASE(NM_CONFERENCE_INITIALIZING); <br>STRING_CASE(NM_CONFERENCE_ACTIVE); <br> <br>default: <br>wsprintf(_szMsg, TEXT("NM_CONFERENCE_%04X"), uState); <br>pcsz = _szMsg; <br>break; <br>} <br>return pcsz; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID FAR PASCAL AssertProc(LPSTR lpszMsg, LPSTR lpszAssert, LPSTR lpszFile, UINT line) <br>// <br>//**************************************************************************** <br> <br>VOID FAR PASCAL AssertProc(LPSTR lpszMsg, LPSTR lpszAssert, LPSTR lpszFile, UINT line) <br>{ <br>int  id; <br>TCHAR szBuffer[1024]; // a big buffer <br> <br>wsprintf((LPSTR)szBuffer, <br>"Assert: %s\nFile %s, Line %d", <br>(lpszMsg &amp;&amp; *lpszMsg) ? lpszMsg  : lpszAssert, <br>lpszFile ? lpszFile : "", line); <br> <br>OutputDebugString(szBuffer); <br> <br>do { <br>id = MessageBox(NULL, (LPSTR)szBuffer, TEXT("NmUi Assert"), <br>MB_ICONHAND | MB_ABORTRETRYIGNORE | MB_SYSTEMMODAL); <br> <br>switch (id) <br>{ <br>case IDRETRY: <br>DebugBreak(); <br>break; <br>case IDABORT: <br>FatalAppExit(0, (LPSTR)szBuffer); <br>break; <br>case IDIGNORE: <br>default: <br>break; <br>} <br>} while (id == IDRETRY); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID Log(COLORREF cv, LPTSTR pszMsg) <br>// <br>//**************************************************************************** <br> <br>VOID Log(COLORREF cv, LPTSTR pszMsg) <br>{ <br>int iItem; <br>iItem = SendMessage(ghwndMsg, LB_ADDSTRING, 0, (LPARAM) pszMsg); <br> <br>SendMessage(ghwndMsg, LB_SETITEMDATA, (WPARAM)iItem, (LPARAM) cv); <br> <br>PostMessage(ghwndMsg, WM_VSCROLL, SB_BOTTOM, 0); <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID ClearLog(void) <br>// <br>//**************************************************************************** <br> <br>VOID ClearLog(void) <br>{ <br>SendMessage(ghwndMsg, LB_RESETCONTENT, 0, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID TraceMsg(PSTR pszFormat,...) <br>// <br>//**************************************************************************** <br> <br>VOID TraceMsg(PSTR pszFormat,...) <br>{ <br>TCHAR szMsg[1024]; <br>va_list v1; <br> <br>va_start(v1, pszFormat); <br>wvsprintfA(szMsg, pszFormat, v1); <br>va_end(v1); <br> <br>Log(RGB(0, 0, 0), szMsg); <br> <br>lstrcat(szMsg, "\r\n"); <br>OutputDebugString(szMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID WarnMsg(PSTR pszFormat,...) <br>// <br>//**************************************************************************** <br> <br>VOID WarnMsg(PSTR pszFormat,...) <br>{ <br>TCHAR szMsg[1024]; <br>va_list v1; <br> <br>va_start(v1, pszFormat); <br>wvsprintfA(szMsg, pszFormat, v1); <br>va_end(v1); <br> <br>Log(RGB(0, 0, 255), szMsg); <br> <br>lstrcat(szMsg, "\r\n"); <br>OutputDebugString(szMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ErrorMsg(PSTR pszFormat,...) <br>// <br>//**************************************************************************** <br> <br>VOID ErrorMsg(PSTR pszFormat,...) <br>{ <br>TCHAR szMsg[1024]; <br>va_list v1; <br> <br>va_start(v1, pszFormat); <br>wvsprintfA(szMsg, pszFormat, v1); <br>va_end(v1); <br> <br>Log(RGB(255, 0, 0), szMsg); <br> <br>lstrcat(szMsg, "\r\n"); <br>OutputDebugString(szMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID LogMsg(COLORREF cv, PSTR pszFormat,...) <br>// <br>//**************************************************************************** <br> <br>VOID LogMsg(COLORREF cv, PSTR pszFormat,...) <br>{ <br>TCHAR szMsg[1024]; <br>va_list v1; <br> <br>va_start(v1, pszFormat); <br>wvsprintfA(szMsg, pszFormat, v1); <br>va_end(v1); <br> <br>Log(cv, szMsg); <br> <br>lstrcat(szMsg, "\r\n"); <br>OutputDebugString(szMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpCallInfo(INmCall * pCall) <br>// <br>//**************************************************************************** <br> <br>VOID DumpCallInfo(INmCall * pCall) <br>{ <br>HRESULT hr; <br>BSTR bstrName; <br>BSTR bstrAddr; <br>NM_ADDR_TYPE uType; <br>NM_CALL_STATE uState; <br>INmConference * pConference = NULL; <br> <br>OBJECT_MSG("[%08X] - dump call info", pCall); <br>if (NULL == pCall) <br>{ <br>ERROR_MSG("DumpCallInfo: Invalid Call"); <br>return; <br>} <br> <br>hr = pCall-&gt;GetName(&amp;bstrName); <br>if (FAILED(hr)) <br>{ <br>bstrName = NULL; <br>    ERROR_MSG("DumpCallInfo: GetName failed"); <br>} <br> <br>if (FAILED(pCall-&gt;GetAddr(&amp;bstrAddr, &amp;uType))) <br>{ <br>bstrAddr = NULL; <br>uType = NM_ADDR_UNKNOWN;  <br>    ERROR_MSG("DumpCallInfo: GetAddr failed"); <br>} <br> <br>    if (FAILED(pCall-&gt;GetState(&amp;uState))) <br>    { <br>uState = NM_CALL_INVALID;  <br>    ERROR_MSG("DumpCallInfo: GetState failed"); <br>    } <br> <br>hr = pCall-&gt;GetConference(&amp;pConference); <br>if (FAILED(hr)) <br>{ <br>    WARN_MSG("DumpCallInfo: GetConference failed %s", GetHrSz(hr)); <br>} <br> <br>TRACE_MSG("Call=[%s] Addr=[%s], Type=%d, State=%s %s conf=%08X", <br>(LPTSTR) BTSTR(bstrName), (LPTSTR) BTSTR(bstrAddr), <br>uType, GetCallStateSz(uState), <br>(S_OK == pCall-&gt;IsIncoming()) ? TEXT("(Incoming)") : TEXT(""), pConference); <br> <br>if (NULL != pConference) <br>{ <br>pConference-&gt;Release(); <br>} <br> <br>SysFreeString(bstrName); <br>SysFreeString(bstrAddr); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpAllCalls(void) <br>// <br>//**************************************************************************** <br> <br>VOID DumpAllCalls(void) <br>{ <br>if (NULL == g_pListCall) <br>return; <br> <br>for (POSITION pos = g_pListCall-&gt;GetHeadPosition(); NULL != pos; ) <br>{ <br>INmCall * pCall = (INmCall *) g_pListCall-&gt;GetNext(pos); <br>DumpCallInfo(pCall); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpConferenceInfo(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>VOID DumpConferenceInfo(INmConference * pConference) <br>{ <br>HRESULT hr; <br>BSTR bstr; <br>ULONG cMember; <br>ULONG cChannel; <br>NM_CONFERENCE_STATE uState; <br> <br>if (NULL == pConference) <br>{ <br>ERROR_MSG("DumpConferenceInfo: Invalid conference"); <br>return; <br>} <br> <br>hr = pConference-&gt;GetName(&amp;bstr); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetName failed"); <br>bstr = NULL; <br>} <br> <br>hr = pConference-&gt;GetState(&amp;uState); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetState failed?"); <br>} <br> <br>hr = pConference-&gt;GetMemberCount(&amp;cMember); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetMemberCount failed"); <br>cMember = 0; <br>} <br> <br>hr = pConference-&gt;GetChannelCount(&amp;cChannel); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetChannelCount failed"); <br>cChannel = 0; <br>} <br> <br>TRACE_MSG("[%08X] - Conference=[%s] state=%s", pConference, <br>(LPTSTR) BTSTR(bstr), GetConferenceStateSz(uState)); <br>TRACE_MSG("  MemberCount=%d, ChannelCount=%d", cMember, cChannel); <br> <br>SysFreeString(bstr); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpMemberInfo(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID DumpMemberInfo(INmMember * pMember) <br>{ <br>HRESULT hr; <br>BSTR bstr; <br>BOOL fLocal; <br>BOOL fMcu; <br>BOOL fTop; <br>ULONG uchCaps; <br>ULONG uVer; <br>INmConference * pConference; <br> <br>hr = pMember-&gt;GetName(&amp;bstr); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Problem with GetName"); <br>} <br> <br>hr = pMember-&gt;GetNmchCaps(&amp;uchCaps); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Problem with GetNmchCaps"); <br>uchCaps = 0; <br>} <br> <br>hr = pMember-&gt;GetNmVersion(&amp;uVer); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Problem with GetNmVersion"); <br>uVer = 0; <br>} <br> <br>fLocal = S_OK == pMember-&gt;IsSelf(); <br>fMcu = S_OK == pMember-&gt;IsMCU(); <br> <br>fTop = FALSE; <br>hr = pMember-&gt;GetConference(&amp;pConference); <br>if (FAILED(hr)) <br>{ <br>TRACE_MSG("Problem with GetConference"); <br>} <br>else <br>{ <br>INmMember * pMemberTop; <br>if (SUCCEEDED(pConference-&gt;GetTopProvider(&amp;pMemberTop))) <br>{ <br>fTop = (pMember == pMemberTop); <br>pMemberTop-&gt;Release(); <br>} <br>pConference-&gt;Release(); <br>} <br> <br>TRACE_MSG("[%08X] Member=[%s] ", pMember, (LPTSTR) BTSTR(bstr)); <br>TRACE_MSG("  Local=%d, MCU=%d, Top=%d, uch=%08X, version=%d", fLocal, fMcu, fTop, uchCaps, uVer); <br> <br>SysFreeString(bstr); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpChannelInfo(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>VOID DumpChannelInfo(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>ULONG uch; <br>ULONG cMember; <br> <br>hr = pChannel-&gt;GetNmch(&amp;uch); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetNmch failed"); <br>uch = 0; <br>} <br> <br>hr = pChannel-&gt;GetMemberCount(&amp;cMember); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetMemberCount failed"); <br>cMember = 0; <br>} <br> <br>TRACE_MSG("[%08X] - Channel=[%s] MemberCount=%d", pChannel, GetNmchSz(uch), cMember); <br>switch (uch) <br>{ <br>case NMCH_AUDIO: <br>{ <br>INmChannelAudio * pChannelAudio; <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelAudio, (void **)&amp;pChannelAudio); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Not an audio channel?"); <br>} <br>else <br>{ <br>NM_AUDIO_STATE uState; <br>pChannelAudio-&gt;GetState(&amp;uState); <br>TRACE_MSG("Audio State: %d", uState); <br>pChannelAudio-&gt;Release(); <br>} <br>break; <br>} <br> <br>case NMCH_VIDEO: <br>{ <br>INmChannelVideo * pChannelVideo; <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelVideo, (void **)&amp;pChannelVideo); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Not an video channel?"); <br>} <br>else <br>{ <br>NM_VIDEO_STATE uState; <br>pChannelVideo-&gt;GetState(&amp;uState); <br>TRACE_MSG("Video State: %d (%s)", uState, <br>(S_OK == pChannelVideo-&gt;IsActive()) ? TEXT("Active") : TEXT("Inactive")); <br>pChannelVideo-&gt;Release(); <br>} <br>break; <br>} <br> <br>case NMCH_DATA: <br>{ <br>INmChannelData * pChannelData; <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelData, (void **)&amp;pChannelData); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Not a data channel?"); <br>} <br>else <br>{ <br>TRACE_MSG("Data channel is %s", <br>(S_OK == pChannelData-&gt;IsActive()) ? TEXT("Active") : TEXT("Inactive")); <br>pChannelData-&gt;Release(); <br>} <br>break; <br>} <br>default: <br>break; <br>} <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID DoEnumChannelMember(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>VOID DoEnumChannelMember(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>IEnumNmMember * pEnum; <br>ULONG cFetched; <br>ULONG cMember; <br> <br>ASSERT(NULL != pChannel); <br> <br>hr = pChannel-&gt;GetMemberCount(&amp;cMember); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("GetMemberCount Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br>TRACE_MSG("%d members in channel (%08X)", cMember, pChannel); <br> <br>if (0 == cMember) <br>return; <br> <br>if (cMember &gt; 10) <br>cMember = 10; <br> <br>hr = pChannel-&gt;EnumMember(&amp;pEnum); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumMember Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br> <br>INmMember * rgpMember[10]; <br>hr = pEnum-&gt;Next(cMember, rgpMember, &amp;cFetched); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumMember Failed (%s)", GetHrSz(hr)); <br>} <br>else <br>{ <br>for (UINT iMember = 0; iMember &lt; cFetched; iMember++) <br>{ <br>DumpMemberInfo(rgpMember[iMember]); <br>rgpMember[iMember]-&gt;Release(); <br>} <br>} <br> <br>pEnum-&gt;Release(); <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoEnumConferenceMember(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>VOID DoEnumConferenceMember(INmConference * pConference) <br>{ <br>HRESULT hr; <br>IEnumNmMember * pEnum; <br>ULONG cFetched; <br>ULONG cMember; <br> <br>ASSERT(NULL != pConference); <br>hr = pConference-&gt;GetMemberCount(&amp;cMember); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("GetMemberCount Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br>TRACE_MSG("%d members in conference (%08X)", cMember, pConference); <br> <br>if (cMember &gt; 10) <br>cMember = 10; <br> <br>hr = pConference-&gt;EnumMember(&amp;pEnum); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumMember Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br> <br>INmMember * rgpMember[10]; <br>hr = pEnum-&gt;Next(cMember, rgpMember, &amp;cFetched); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumMember Failed (%s)", GetHrSz(hr)); <br>} <br>else <br>{ <br>for (UINT iMember = 0; iMember &lt; cFetched; iMember++) <br>{ <br>DumpMemberInfo(rgpMember[iMember]); <br>rgpMember[iMember]-&gt;Release(); <br>} <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoEnumAll(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoEnumAll(void) <br>{ <br>HRESULT hr; <br>IEnumNmChannel * pEnum; <br>ULONG cFetched; <br>ULONG cChannel; <br>INmConference * pConference = GetCurrentConference(); <br> <br>if (NULL == pConference) <br>{ <br>TRACE_MSG("No current conference"); <br>return; <br>} <br> <br>DumpConferenceInfo(pConference); <br> <br>DoEnumConferenceMember(pConference); <br> <br>hr = pConference-&gt;GetChannelCount(&amp;cChannel); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("GetChannelCount Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br>TRACE_MSG("%d channels in conference", cChannel); <br> <br>if (cChannel &gt; 10) <br>cChannel = 10; <br> <br>hr = pConference-&gt;EnumChannel(&amp;pEnum); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumChannel Failed (%s)", GetHrSz(hr)); <br>    return; <br>} <br> <br>INmChannel * rgpChannel[10]; <br>hr = pEnum-&gt;Next(cChannel, rgpChannel, &amp;cFetched); <br>if (FAILED(hr)) <br>{ <br>    ERROR_MSG("EnumMember Failed (%s)", GetHrSz(hr)); <br>} <br>else <br>{ <br>for (UINT iChannel = 0; iChannel &lt; cFetched; iChannel++) <br>{ <br>DumpChannelInfo(rgpChannel[iChannel]); <br>DoEnumChannelMember(rgpChannel[iChannel]); <br>rgpChannel[iChannel]-&gt;Release(); <br>} <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4546"></a>INIT.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       INIT.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>TCHAR gszAppTitle[]     = TEXT("NetMeeting UI Test Application"); <br> <br>// string constants (no change for international) <br>TCHAR gszAppClassName[] = TEXT("NMUI"); <br>TCHAR gszAppName[]      = TEXT("NmUi"); <br>TCHAR gszIniName[]      = TEXT("NmUi.ini"); <br> <br>// Section Names <br>TCHAR gszMainWnd[]  = TEXT("MainWnd"); <br>TCHAR gszSbar[]     = TEXT("SBar"); <br>TCHAR gszTbar[]     = TEXT("TBar"); <br>TCHAR gszChat[]     = TEXT("Chat"); <br>TCHAR gszMsg[]      = TEXT("Messages"); <br>TCHAR gszMsgFont[]  = TEXT("Message Font"); <br>TCHAR gszAddr[]     = TEXT("Addr"); <br>TCHAR gszAddrType[] = TEXT("AddrType"); <br>TCHAR gszConferenceName[] = TEXT("Conference Name"); <br>TCHAR gszFileName[] = TEXT("Filename"); <br> <br>TCHAR gszIniCallType[] = TEXT("CallType"); <br> <br>TCHAR gszIniAutoMonitor[] = TEXT("AutoMonitor"); <br>TCHAR gszIniAutoHost[]    = TEXT("AutoHost"); <br>TCHAR gszIniAutoCall[]    = TEXT("AutoCall"); <br>TCHAR gszIniAutoChat[]    = TEXT("AutoChat"); <br> <br>TCHAR gszIniInit[]        = TEXT("Init"); <br> <br>TCHAR gszIniMsgTrace[]    = TEXT("Trace Msgs"); <br>TCHAR gszIniMsgObjects[]  = TEXT("Object Msgs"); <br>TCHAR gszIniMsgNotify[]   = TEXT("Notify Msgs"); <br> <br>// See ILV_* <br>static COL _rgColMember[] = { <br>{80, "Name"}, <br>{40, "Ver"}, <br>{60, "Caps"}, <br>{60, "Audio"}, <br>{60, "Video"}, <br>{60, "Ft"}, <br>{90, "App Sharing"}, <br>{40, "MCU"}, <br>{40, "Local"}, <br>{80, "IP Addr"}, <br>{80, "ID"}, <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ReadPref(void) <br>// <br>// Reads the current preferences from the NmUi.ini file. <br>// <br>//**************************************************************************** <br> <br>VOID ReadPref(void) <br>{ <br>ClearStruct(&amp;gPref); <br> <br>gPref.fSbar       = GetIniBool(gszSbar, TRUE); <br>gPref.fTbar       = GetIniBool(gszTbar, TRUE); <br>gPref.fMsg        = GetIniBool(gszMsg, TRUE); <br>gPref.fChat       = GetIniBool(gszChat, TRUE); <br> <br>gPref.pszConferenceName = GetIniStr(gszConferenceName, TEXT("NmUi Conference")); <br> <br>gPref.pszAddr = GetIniStr(gszAddr, TEXT("User 1")); <br>gPref.nmAddrType = (NM_ADDR_TYPE) GetIniInt(gszAddrType, NM_ADDR_UNKNOWN); <br>gPref.nmCallType = (NM_CALL_TYPE) GetIniInt(gszIniCallType, (int) NM_CALL_DEFAULT); <br> <br>GetIniHex(gszMainWnd, &amp;gPref.wpMain, sizeof(WINDOWPLACEMENT)); <br>GetIniHex(gszMsgFont, &amp;gPref.lf, sizeof(LOGFONT)); <br> <br>gPref.fAutoMonitor= GetIniBool(gszIniAutoMonitor, FALSE); <br>gPref.fAutoHost   = GetIniBool(gszIniAutoHost, FALSE); <br>gPref.fAutoCall   = GetIniBool(gszIniAutoCall, FALSE); <br>gPref.fAutoChat   = GetIniBool(gszIniAutoChat, FALSE); <br> <br>gPref.fMsgTrace   = GetIniBool(gszIniMsgTrace, TRUE); <br>gPref.fMsgObjects = GetIniBool(gszIniMsgObjects, FALSE); <br>gPref.fMsgNotify  = GetIniBool(gszIniMsgNotify, TRUE); <br> <br>gPref.iInit       = GetIniInt(gszIniInit, NM_INIT_NORMAL); <br> <br>gPref.pszFileName = GetIniStr(gszFileName, TEXT("C:\\autoexec.bat")); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID WritePref(void) <br>// <br>// Write the current preferences <br>// <br>//**************************************************************************** <br> <br>VOID WritePref(void) <br>{ <br>WriteIniBool(gszSbar, gPref.fSbar); <br>WriteIniBool(gszTbar, gPref.fTbar); <br>WriteIniBool(gszMsg, gPref.fMsg); <br>WriteIniBool(gszChat, gPref.fChat); <br> <br>WriteIniStr(gszConferenceName, gPref.pszConferenceName); <br>FreePlpv(&amp;gPref.pszConferenceName); <br> <br>WriteIniStr(gszFileName, gPref.pszFileName); <br>FreePlpv(&amp;gPref.pszFileName); <br> <br>WriteIniStr(gszAddr, gPref.pszAddr); <br>FreePlpv(&amp;gPref.pszAddr); <br>WriteIniInt(gszAddrType, (int) gPref.nmAddrType); <br>WriteIniInt(gszIniCallType, (int) gPref.nmCallType); <br> <br>if (NULL != ghwndMain) <br>{ <br>gPref.wpMain.length = sizeof(WINDOWPLACEMENT); <br>GetWindowPlacement(ghwndMain, &amp;gPref.wpMain); <br>} <br>WriteIniHex(gszMainWnd, &amp;gPref.wpMain, sizeof(WINDOWPLACEMENT)); <br> <br>WriteIniHex(gszMsgFont, &amp;gPref.lf, sizeof(LOGFONT)); <br> <br>WriteIniTbar(); <br> <br>WriteIniBool(gszIniAutoMonitor, gPref.fAutoMonitor); <br>WriteIniBool(gszIniAutoHost,    gPref.fAutoHost); <br>WriteIniBool(gszIniAutoCall,    gPref.fAutoCall); <br>WriteIniBool(gszIniAutoChat,    gPref.fAutoChat); <br> <br>WriteIniInt(gszIniInit,        gPref.iInit); <br> <br>WriteIniBool(gszIniMsgTrace,    gPref.fMsgTrace); <br>WriteIniBool(gszIniMsgObjects,  gPref.fMsgObjects); <br>WriteIniBool(gszIniMsgNotify,   gPref.fMsgNotify); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateLView(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateLView(void) <br>{ <br>ghwndLView = CreateWindow(TEXT("SysListView32"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_BORDER | WS_CLIPSIBLINGS | LVS_REPORT, <br>0, 0, 0, 0, <br>ghwndMain, (HMENU) IDW_LVIEW, ghInst, NULL); <br>if (ghwndLView == NULL) <br>return FALSE; <br> <br>ListView_SetExtendedListViewStyle(ghwndLView, LVS_EX_FULLROWSELECT); <br> <br>// Initialize column data <br>{ <br>int   iCol; <br>LPCOL lpCol; <br>LV_COLUMN lvc; <br> <br>lpCol = _rgColMember; <br>ClearStruct(&amp;lvc); <br>lvc.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; <br>lvc.fmt = LVCFMT_LEFT; <br>for (iCol = 0; iCol &lt; ARRAY_ELEMENTS(_rgColMember); iCol++) <br>{ <br>lvc.iSubItem = iCol; <br>lvc.cx = lpCol-&gt;dwWidth; <br>lvc.pszText = lpCol-&gt;lpsz; <br>if (ListView_InsertColumn(ghwndLView, iCol, &amp;lvc) == -1) <br>return FALSE; <br>lpCol++; <br>} <br>} <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateMsgWindow(void) <br>// <br>// Create the main message window <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateMsgWindow(void) <br>{ <br>ghwndMsg = CreateWindow(TEXT("LISTBOX"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_BORDER | WS_CLIPSIBLINGS | <br>LBS_USETABSTOPS | LBS_NOINTEGRALHEIGHT | LBS_OWNERDRAWFIXED | LBS_HASSTRINGS , <br>0, 0, 0, 0, <br>ghwndMain, (HMENU) IDW_MSG, ghInst, NULL); <br>if (ghwndMsg == NULL) <br>return FALSE; <br> <br>// set the font for the window <br>ghfontEntry = CreateFontIndirect(&amp;gPref.lf); <br>if (ghfontEntry == hfontNil) <br>return TRUE; <br> <br>SendMessage(ghwndMsg, WM_SETFONT, (WPARAM) ghfontEntry, MAKELPARAM(TRUE, 0)); <br> <br>return TRUE; <br>} <br> <br> <br>WNDPROC lpProcEdit = NULL; <br>VOID CmdChat(void); <br>LRESULT FAR PASCAL SubClsEdit(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam); <br> <br>LRESULT FAR PASCAL SubClsEdit(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>if ((uMsg == WM_CHAR) &amp;&amp; (VK_RETURN == wParam)) <br>{ <br>CmdChat(); <br>return 0L; <br>} <br> <br>return CallWindowProc(lpProcEdit, hwnd, uMsg, wParam, lParam); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateChatWindow(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateChatWindow(void) <br>{ <br>ghwndChat = CreateWindow(TEXT("EDIT"), NULL, <br>WS_CHILD | WS_VISIBLE | WS_BORDER | WS_CLIPSIBLINGS |  WS_TABSTOP | <br>ES_AUTOHSCROLL, <br>0, 0, DXP_SEND, DYP_SEND, <br>ghwndMain, (HMENU) IDW_CHAT, ghInst, NULL); <br>if (ghwndChat == NULL) <br>return FALSE; <br> <br>// set the font for the window <br> <br>ghwndSend = CreateWindow(TEXT("BUTTON"), TEXT("Send To"), <br>WS_CHILD | WS_VISIBLE | WS_BORDER | WS_CLIPSIBLINGS | WS_TABSTOP | <br>BS_DEFPUSHBUTTON, <br>0, 0, DXP_SEND, DYP_SEND, <br>ghwndMain, (HMENU) IDW_SEND, ghInst, NULL); <br>if (ghwndSend == NULL) <br>return FALSE; <br> <br>lpProcEdit = (WNDPROC) GetWindowLong(ghwndChat, GWL_WNDPROC); <br>SetWindowLong(ghwndChat, GWL_WNDPROC, (LONG)(WNDPROC) SubClsEdit); <br> <br>ghwndUList = CreateWindow(TEXT("COMBOBOX"), TEXT("Everyone"), <br>WS_CHILD | WS_VISIBLE | WS_BORDER | WS_CLIPSIBLINGS | WS_VSCROLL | WS_TABSTOP | <br>CBS_DROPDOWNLIST | CBS_OWNERDRAWFIXED, <br>0, 0, DXP_ULIST, DYP_ULIST, <br>ghwndMain, (HMENU) IDL_USERS, ghInst, NULL); <br>if (ghwndUList == NULL) <br>return FALSE; <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitMain(void) <br>// <br>// Initialize the window data and register the window class <br>// <br>//**************************************************************************** <br> <br>BOOL FInitMain(void) <br>{ <br>TCHAR szTitle[MAX_PATH]; <br>WNDCLASS  wc; <br> <br>ASSERT(NULL != ghInst); <br> <br>ghAccelTable = LoadAccelerators(ghInst, MAKEINTRESOURCE(ID_APPACCEL)); <br> <br>LoadString(ghInst, IDS_APP_TITLE, szTitle, CCHMAX(szTitle)); <br> <br>wc.style         = CS_HREDRAW | CS_VREDRAW; <br>wc.lpfnWndProc   = (WNDPROC)WndProc; <br>wc.cbClsExtra    = 0; <br>wc.cbWndExtra    = 0; <br>wc.hInstance     = ghInst; <br>wc.hIcon         = LoadIcon(ghInst, MAKEINTRESOURCE(ICO_MAIN)); <br>wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>wc.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1); <br>wc.lpszMenuName  = MAKEINTRESOURCE(IDM_APP); <br>wc.lpszClassName = gszAppClassName; <br> <br>// Register the window class and return FALSE if unsuccesful. <br>if (!RegisterClass(&amp;wc)) <br>return FALSE; <br> <br>// MAIN WINDOW <br>// Create a main window for this application instance. <br>ghwndMain = CreateWindow(gszAppClassName, szTitle, WS_OVERLAPPEDWINDOW, <br>CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, <br>NULL, NULL, ghInst, NULL); <br>if (ghwndMain == NULL) <br>return FALSE; <br> <br>ghMenu = GetMenu(ghwndMain); <br>if (NULL == ghMenu) <br>return FALSE; <br> <br>if (!FCreateSbar() || !FCreateTbar() || <br>!FCreateLView() || !FCreateMsgWindow() || !FCreateChatWindow()) <br>return FALSE; <br> <br>ShowHwnd(ghwndTbar, gPref.fTbar, IDM_VIEW_TBAR); <br>ShowHwnd(ghwndSbar, gPref.fSbar, IDM_VIEW_SBAR); <br> <br>if (gPref.wpMain.length != 0) <br>SetWindowPlacement(ghwndMain, &amp;gPref.wpMain); <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitApp(LPSTR lpszCmd, int nCmdShow) <br>// <br>// Initialize the application after checking command line, etc. <br>// <br>//**************************************************************************** <br> <br>BOOL FInitApp(LPSTR lpszCmd, int nCmdShow) <br>{ <br>InitCommonControls(); <br> <br> if (FAILED(CoInitialize(NULL))) <br>return FALSE; <br> <br>ReadPref(); <br> <br>if (!FInitMain()) <br>return FALSE; <br> <br>ASSERT(NULL != ghwndMain); <br>ShowWindow(ghwndMain, nCmdShow); <br>UpdateWindow(ghwndMain); <br> <br>TRACE_MSG("System Initialized"); <br> <br>OnStartup(); <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeAllComObjects(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeAllComObjects(void) <br>{ <br>// Release all objects to which this app has a reference <br>FreeAs(); <br>FreeFt(); <br>FreeDataChannel(); <br>FreeAllUsers(); <br>FreeChannels(); <br>FreeCalls(); <br>FreeConferences(); <br>FreeConfMgr(); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCALL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4525"></a>CCALL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       CCALL.CPP <br>//  Content:    INmCall Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListCall = (COBLIST *) NULL; <br>COBLIST * g_pListCallNotify = (COBLIST *) NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// INmCall * GetCurrentCall(void) <br>// <br>//**************************************************************************** <br> <br>INmCall * GetCurrentCall(void) <br>{ <br>if (NULL == g_pListCall) <br>return NULL; <br> <br>return (INmCall *) g_pListCall-&gt;GetTail(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookCall(INmCall * pCall) <br>// <br>// Hook into notification callback for the call <br>// <br>//**************************************************************************** <br> <br>HRESULT HookCall(INmCall * pCall) <br>{ <br>HRESULT hr; <br>CCallNotify * pNotify; <br> <br>ASSERT(NULL != pCall); <br>pCall-&gt;AddRef(); <br>AddNode(pCall, &amp;g_pListCall); <br> <br>    // Connect to the conference object <br>    pNotify = new CCallNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(pCall); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("CConfNotify Failed (%s)", GetHrSz(hr)); <br>pNotify-&gt;Release(); <br>} <br>else <br>{ <br>OBJECT_MSG("Call Connection point established successfully"); <br>AddNode(pNotify, &amp;g_pListCallNotify); <br>} <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeCalls(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeCalls(void) <br>{ <br>// Release all notify <br>if (NULL != g_pListCallNotify) <br>{ <br>while (!g_pListCallNotify-&gt;IsEmpty()) <br>{ <br>CCallNotify * pNotify = (CCallNotify *) g_pListCallNotify-&gt;RemoveHead(); <br>ASSERT(NULL != pNotify); <br>OBJECT_MSG("[%08X] call notify released", pNotify); <br>pNotify-&gt;Disconnect(); <br>pNotify-&gt;Release(); <br>} <br>} <br> <br>if (NULL != g_pListCall) <br>{ <br>while (!g_pListCall-&gt;IsEmpty()) <br>{ <br>INmCall * pCall = (INmCall *) g_pListCall-&gt;RemoveHead(); <br>ASSERT(NULL != pCall); <br>OBJECT_MSG("[%08X] call released", pCall); <br>pCall-&gt;Release(); <br>} <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CCallNotify <br>// <br>//**************************************************************************** <br> <br>CCallNotify::CCallNotify() : RefCount(), CNotify() <br>{ <br>OBJECT_MSG("CCallNotify created"); <br>} <br> <br>CCallNotify::~CCallNotify() <br>{ <br>OBJECT_MSG("CCallNotify destroyed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CCallNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CCallNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>OBJECT_MSG("CCallNotify::QueryInterface(): Returning IUnknown."); <br>} <br>else if (riid == IID_INmCallNotify) <br>{ <br>*ppvObject = (INmCallNotify *)this; <br>OBJECT_MSG("CCallNotify::QueryInterface(): Returning INmCallNotify."); <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>OBJECT_MSG("CCallNotify::QueryInterface(): Called on unknown interface."); <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmCallNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CCallNotify::StateChanged(NM_CALL_STATE uState) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::StateChanged(NM_CALL_STATE uState) <br>{ <br>NOTIFY_MSG("CCallNotify::StateChanged uState=%s", GetCallStateSz(uState)); <br>DumpCallInfo((INmCall *) CNotify::GetPunk()); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CCallNotify::Failed(ULONG uError) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::Failed(ULONG uError) <br>{ <br>LOG_MSG(RGB(255, 0, 0), "CCallNotify::Failed uError=%08X", uError); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CCallNotify::Accepted(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::Accepted(INmConference * pConference) <br>{ <br>NOTIFY_MSG("CCallNotify::Accepted"); <br>DumpConferenceInfo(pConference); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CCallNotify::NmUI(CONFN uNotify) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CCallNotify::NmUI(CONFN uNotify) <br>{ <br>LOG_MSG(RGB(255, 0, 255), "CCallNotify::NmUI uNotify=%s", GetConfnSz(uNotify)); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoCallConference(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoCallConference(void) <br>{ <br>HRESULT hr; <br>BSTRING bstrAddr(gPref.pszAddr); <br>BSTRING bstrConference(gPref.pszConferenceName); <br>BSTRING bstrPassword(gPref.pszPassword); <br>INmCall * pCall; <br>INmConference * pConference; <br> <br>// Validate system <br>if (NULL == g_pMgr) <br>{ <br>ERROR_MSG("No conference manager object"); <br>return; <br>} <br> <br>pConference = GetCurrentConference(); <br>if (NULL != pConference) <br>{ <br>WARN_MSG("can't join conferences!"); <br>} <br> <br>hr = g_pMgr-&gt;CallConference(&amp;pCall, gPref.nmCallType, gPref.nmAddrType, <br>bstrAddr, bstrConference, bstrPassword); <br> <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("CallConference failed HResult=%s", GetHrSz(hr)); <br>} <br>else <br>{ <br>ASSERT(pCall == GetCurrentCall()); <br>pCall-&gt;Release(); <br>TRACE_MSG("CallConference succeeded"); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoCallCreate(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoCallCreate(void) <br>{ <br>HRESULT hr; <br>BSTRING bstrAddr(gPref.pszAddr); <br>INmCall * pCall; <br>INmConference * pConference; <br> <br>// Validate system <br>if (NULL == g_pMgr) <br>{ <br>ERROR_MSG("No conference manager object"); <br>return; <br>} <br> <br>pConference = GetCurrentConference(); <br>if (NULL == pConference) <br>{ <br>TRACE_MSG("using no conference"); <br>} <br> <br>hr = g_pMgr-&gt;CreateCall(&amp;pCall, gPref.nmCallType, gPref.nmAddrType, bstrAddr, pConference); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("CreateCall failed HResult=%s", GetHrSz(hr)); <br>} <br>else <br>{ <br>ASSERT(pCall == GetCurrentCall()); <br>pCall-&gt;Release(); <br>TRACE_MSG("CreateCall succeeded"); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoHandleCall(BOOL fAccept) <br>// <br>//**************************************************************************** <br> <br>VOID DoHandleCall(BOOL fAccept) <br>{ <br>HRESULT hr; <br>INmCall * pCall = GetCurrentCall(); <br> <br>if (NULL == pCall) <br>{ <br>TRACE_MSG("No call to handle?"); <br>return; <br>} <br> <br>if (fAccept) <br>{ <br>hr = pCall-&gt;Accept(); <br>} <br>else <br>{ <br>hr = pCall-&gt;Reject(); <br>} <br> <br>TRACE_MSG("Call result = %s", GetHrSz(hr)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoCancelCall(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoCancelCall(void) <br>{ <br>HRESULT hr; <br>INmCall * pCall = GetCurrentCall(); <br> <br>if (NULL == pCall) <br>{ <br>TRACE_MSG("No call to destroy?"); <br>return; <br>} <br> <br>hr = pCall-&gt;Cancel(); <br>TRACE_MSG("Call Cancel result = %s", GetHrSz(hr)); <br> <br>// Free just the single call - watch the notify proc <br>FreeCalls(); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

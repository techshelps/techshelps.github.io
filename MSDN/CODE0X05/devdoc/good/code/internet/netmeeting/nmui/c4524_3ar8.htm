<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBAL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4544"></a>GLOBAL.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       GLOBAL.H <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef GLOBAL_H <br>#define GLOBAL_H <br> <br>//------------------------------------------------------- <br>// Useful constants <br> <br>#define chNull   ('\0') <br>#define lpNil    (NULL) <br> <br>#define hwndNil      ((HWND) NULL) <br>#define hfontNil     ((HFONT) NULL) <br>#define hgdiNil      ((HGDIOBJ) NULL) <br> <br> <br>//------------------------------------------------------- <br>// Useful macros <br> <br>#define CchSz(pcsz)( lstrlen(pcsz) ) <br>#define CbSz(pcsz)( lstrlen(pcsz) + 1*sizeof(TCHAR) ) <br> <br>#define ClearBytes(lpv, cb)ZeroMemory((LPVOID) (lpv), (cb)) <br>#define ClearStruct(lpv)ZeroMemory((LPVOID) (lpv), sizeof(*(lpv))) <br>#define InitStruct(lpv)        {ClearStruct(lpv); (* (LPDWORD) lpv) = sizeof(*(lpv));} <br>#define CopyStruct(pDest, pSrc)  CopyMemory(pDest, pSrc, sizeof(*(pDest))) <br> <br>#define SetEmptySz(sz)( *(sz) = _T('\0') ) <br>#define FEmptySz(sz)            (((sz) == NULL) || (*(sz) == _T('\0'))) <br> <br>#define ARRAY_ELEMENTS(rg)      (sizeof(rg) / sizeof(rg[0])) <br>#define CCHMAX(sz)              (sizeof(sz) / sizeof(TCHAR)) <br> <br> <br> <br> <br>#ifdef DEBUG <br>VOID FAR PASCAL AssertProc(LPTSTR lpszMsg, LPTSTR lpszAssert, LPTSTR lpszFile, UINT line); <br> <br>#define DEBASSERT(exp,szMsg)  \ <br>if (!(exp))                                                      \ <br>{                                                                \ <br>static char _szAssert[] = #exp ;   \ <br>static char _szMsg[]    = szMsg;   \ <br>AssertProc(_szMsg,_szAssert,__FILE__,__LINE__); \ <br>} <br> <br>#define ASSERT(f)       DEBASSERT(f, "(" #f ")") <br>#define AssertSz(f,sz)  DEBASSERT(f, sz) <br>#define NotReached()    DEBASSERT(FALSE, "NotReached declaration was reached!") <br>#else <br>#define ASSERT(f) <br>#define AssertSz(f, sz) <br>#define NotReached() <br>#endif <br> <br> <br>VOID TraceMsg(PSTR pszFormat,...); <br>VOID ErrorMsg(PSTR pszFormat,...); <br>VOID WarnMsg(PSTR pszFormat,...); <br>#define WARN_MSG   ::WarnMsg <br>#define ERROR_MSG  ::ErrorMsg <br> <br>#define TRACE_MSG  (!gPref.fMsgTrace)   ? (void) 0 : ::TraceMsg <br>#define OBJECT_MSG (!gPref.fMsgObjects) ? (void) 0 : ::TraceMsg <br>#define NOTIFY_MSG (!gPref.fMsgNotify)  ? (void) 0 : ::TraceMsg <br> <br>VOID LogMsg(COLORREF cv, PSTR pszFormat,...); <br>#define LOG_MSG ::LogMsg <br> <br>// no debug messages: <br>// inline void WINAPI Trace(LPCTSTR, ...) { } <br>// #define TRACE_MSG     1 ? (void)0 : ::TraceMsg <br>// #define WARN_MSG      1 ? (void)0 : ::TraceMsg <br>// #define ERROR_MSG     1 ? (void)0 : ::TraceMsg <br> <br>#ifndef NEEDDEBUG <br>LPCTSTR GetHrSz(HRESULT hr); <br>LPCTSTR GetConfnSz(CONFN confn); <br>LPCTSTR GetNmchSz(ULONG uch); <br>LPCTSTR GetCallStateSz(NM_CALL_STATE uState); <br>LPCTSTR GetConferenceStateSz(NM_CONFERENCE_STATE uState); <br>VOID DumpCallInfo(INmCall * pCall); <br>VOID DumpAllCalls(void); <br>VOID DumpMemberInfo(INmMember * pMember); <br>VOID DumpConferenceInfo(INmConference * pConference); <br>VOID DumpChannelInfo(INmChannel * pChannel); <br>#else <br>#define GetHrSz(hr)       TEXT("") <br>#define GetConfnSz(confn) TEXT("") <br>#define GetNmchSz(uch)    TEXT("") <br>#define GetCallStateSz(uState)  TEXT("") <br>#define GetConferenceStateSz(uState) TEXT("") <br>#define DumpCallInfo(pCall); <br>#define DumpMemberInfo(pMember); <br>#define DumpConferenceInfo(pConference); <br>#define DumpChannelInfo(pChannel); <br>#endif <br> <br> <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window messages.  The message-dispatching <br>// mechanism expects all message-handling functions to have the following <br>// prototype: <br>// <br>// Function pointer prototype for message handling functions. <br>//     LRESULT FunctionName(HWND, UINT, WPARAM, LPARAM); <br> <br>typedef LRESULT (*PFNMSG)(HWND, UINT, WPARAM, LPARAM); <br> <br>// This structure maps messages to message handling functions. <br>typedef struct _MSD <br>{ <br>UINT   uMsg; <br>PFNMSG pfnmsg; <br>} MSD;                 // MeSsage Dispatch structure <br>typedef MSD * LPMSD; <br> <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window commands--ie. functions for <br>// processing WM_COMMAND messages based on the wParam value. <br>// The message-dispatching mechanism expects all command-handling <br>// functions to have the following prototype: <br> <br>typedef VOID (*PFNCMD)(VOID); <br> <br>// This structure maps command IDs to command handling functions. <br>typedef struct _CMD <br>{ <br>UINT     wCmd; <br>PFNCMD pfncmd; <br>} CMD;                 // CoMmand Dispatch structure <br>typedef CMD * LPCMD; <br> <br>//------------------------------------------------------------------------- <br>// Preferences <br>typedef struct _PREF <br>{  <br>BOOL    fConfirm;           // Confirm before receiving files <br>BOOL    fSbar;              // Show status bar <br>BOOL    fTbar;              // Show tool bar <br>BOOL    fMsg;               // Show message window <br>BOOL    fChat;              // Show Chat Window <br> <br>LOGFONT lf;                 // Font to use for main message window <br>WINDOWPLACEMENT wpMain; <br>PTCHAR  pszAddr;            // Default Address information (machine name, ip addr) <br>NM_ADDR_TYPE nmAddrType;    // Address Type (pszUserAddr) <br> <br>DWORD   dwNmch;             // Allowable channel types <br>PTCHAR  pszConferenceName;  // Conference Name <br>PTCHAR  pszPassword;        // Conference password <br>PTCHAR  pszFileName;        // File name <br> <br>int     iInit;              // Initialize option (NM_INIT_NORMAL) <br> <br>BOOL    fAutoMonitor; <br>BOOL    fAutoHost; <br>BOOL    fAutoCall; <br>BOOL    fAutoChat; <br> <br>BOOL    fMsgTrace; <br>BOOL    fMsgObjects; <br>BOOL    fMsgNotify; <br> <br>NM_CALL_TYPE nmCallType; <br>} PREF; <br> <br> <br>// List column information <br> <br>typedef struct _tagCol { <br>UINT  dwWidth; <br>LPSTR lpsz; <br>} COL; <br>typedef COL * LPCOL; <br> <br>// Generic int, string array <br>typedef struct { <br>DWORD  dw; <br>LPTSTR psz; <br>} DWSTR; <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Special resource constants <br>#define IDW_MSG   100 <br>#define IDW_LVIEW 101 <br>#define IDW_SBAR  102 <br>#define IDW_TBAR  103 <br>#define IDW_CHAT  104 <br>#define IDW_SEND  105 <br> <br>// toolbar constants <br>#define NUMIMAGES       29 <br>#define IMAGEWIDTH      16 <br>#define IMAGEHEIGHT     16 <br>#define BUTTONWIDTH     16 <br>#define BUTTONHEIGHT    16 <br> <br>#define STATUSICONSIZE  16 <br> <br>// status bar parts <br>#define IDSBP_MSG        0 <br>#define IDSBP_USERCOUNT  1 <br>#define IDSBP_ICON       2 <br> <br>// See _rgColMember <br>#define ILV_NAME    0 <br>#define ILV_VERSION 1 <br>#define ILV_CAPS    2 <br>#define ILV_AUDIO   3 <br>#define ILV_VIDEO   4 <br>#define ILV_FT      5 <br>#define ILV_AS      6 <br>#define ILV_MCU     7 <br>#define ILV_LOCAL   8 <br>#define ILV_ADDR    9 <br>#define ILV_ID     10 <br> <br>#define DXP_SEND   60   // Width of the "Send" button <br>#define DYP_SEND   25   // Height of the "Send" button <br>#define DXP_ULIST  120  // Width of the chat user list <br>#define DYP_ULIST  90   // Height of the list when dropped down <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Global Function Prototypes. <br> <br> <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>VOID DlgExit(HWND, WORD, WORD, HWND); <br> <br>// from util.cpp <br>BOOL  GetIniBool(LPTSTR szEntry, BOOL f); <br>DWORD GetIniInt(LPTSTR szEntry, DWORD dwDefault); <br>LPTSTR GetIniStr(LPTSTR szEntry, LPTSTR szDefault); <br>VOID GetIniHex(LPTSTR szEntry, LPVOID lpv, int cb); <br>VOID WriteIniBool(LPTSTR szEntry, BOOL f); <br>VOID WriteIniInt(LPTSTR szEntry, DWORD dw); <br>VOID WriteIniStr(LPTSTR szEntry, LPTSTR sz); <br>VOID WriteIniHex(LPTSTR szEntry, LPVOID lpv, int cb); <br>VOID CenterWindow(HWND hwndChild, HWND hwndParent); <br>LPVOID LpvAlloc(int cb); <br>LPTSTR PszAlloc(int cch); <br>VOID FreePlpv(LPVOID plpv); <br>VOID UpdateHdlgIdText(HWND hdlg, int id, LPVOID lpv); <br>VOID UpdateHdlgIdInt(HWND hdlg, int id, LPINT lpint); <br>char ChFromHex(LPTSTR lpch); <br>VOID GetDlgItemsRc(HWND hdlg, int id1, int id2, LPRECT prc); <br>VOID HexToData(LPTSTR lpchSrc, LPVOID lpchDest, int cb); <br>VOID DataToHex(LPTSTR lpchSrc, LPTSTR lpchDest, int cb); <br>VOID SetMenuCheck(UINT idm, BOOL fCheck); <br>VOID MaybeDeleteObject(HGDIOBJ * phgdi); <br>int GetRadioButton(HWND hdlg, int idrFirst, int idrLast); <br>VOID GetDlgItemPsz(HWND hdlg, UINT id, LPTSTR *ppsz); <br> <br>VOID GuidToSz(GUID * pguid, LPTSTR sz); <br>VOID SzToGuid(LPTSTR sz, GUID * pguid); <br>LPTSTR SzFindLastCh(LPTSTR lpsz, TCHAR ch); <br> <br> <br>// from rtns.cpp <br>VOID SizeStatus(int dxClient, int dy); <br>VOID SizeMsgWindow(int dx, int dy); <br>VOID RecalcMsgWindow(void); <br>VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm); <br> <br>// from dlg.cpp <br>BOOL DlgNewConference(VOID); <br>BOOL DlgNewCall(VOID); <br>BOOL DlgCallConf(VOID); <br>BOOL DlgSendFile(VOID); <br>BOOL DlgOptions(VOID); <br>BOOL DlgAudio(VOID); <br>BOOL DlgShare(VOID); <br>BOOL DlgLaunch(VOID); <br>BOOL DlgEject(VOID); <br>VOID InitializeUserList(HWND hwndCombo, BOOL fEveryone); <br>VOID DrawUserItem(LPDRAWITEMSTRUCT lpdis); <br>BOOL DlgVideo(VOID); <br> <br> <br>// from init.cpp <br>BOOL FInitApp(LPTSTR lpszCmd, int nCmdShow); <br>VOID FreeAllComObjects(void); <br>VOID ReadPref(void); <br>VOID WritePref(void); <br> <br>// from dlg.cpp <br>VOID DisplayStatus(BOOL fShow); <br>VOID DisplayDlg(BOOL fShow, HWND * phdlg, int id, int idm); <br> <br> <br>// from sbar.cpp <br>BOOL FCreateSbar(void); <br>VOID UpdateStatusIcon(DWORD dwId); <br>VOID UpdateStatusBar(LPTSTR lpsz, WORD wPart, WORD wFlags); <br>VOID StatusMsg(LPTSTR sz); <br>VOID WriteIniTbar(void); <br>VOID SetToolbarCheck(int idm, BOOL fCheck); <br> <br> <br>// from tbar.cpp <br>BOOL FCreateTbar(void); <br> <br>// from cmd.cpp <br>VOID RecalcMsgWindow(void); <br>VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm); <br>VOID OnStartup(void); <br> <br>// from msg.cpp <br>INT MsgBoxIMbd(int iMbd); <br>INT MsgBoxIMbdDw(int iMbd, DWORD dw); <br>INT MsgBoxIMbdSz(int iMbd, LPTSTR lpsz); <br> <br>// from util.cpp <br>VOID Log(COLORREF cv, LPTSTR lpsz); <br>VOID ClearLog(void); <br>VOID LogTestStart(LPTSTR sz); <br>VOID LogTestStop(LPTSTR sz); <br>VOID LogTestCancel(LPTSTR sz); <br>VOID LogResult(LPTSTR sz, DWORD dwTest, DWORD dwResult); <br>VOID InitDbg(void); <br>LPTSTR ConfErrToSz(DWORD dwError, LPTSTR sz); <br>BOOL FGetFileName(LPTSTR szFileName); <br>BOOL FGetDirectory(LPTSTR szDir); <br> <br>VOID DoEnumChannelMember(INmChannel * pChannel); <br>VOID DoEnumConferenceMember(INmConference * pConference); <br>VOID DoEnumAll(void); <br> <br>#define SetPropResult(hdlg, f)  SetWindowLong(GetParent(hdlg), DWL_MSGRESULT, f) <br> <br>//------------------------------------------------------------------------- <br>// Global Variables <br> <br>extern HINSTANCE ghInst;          // The current instance handle <br>extern HACCEL    ghAccelTable;    // Menu accelerators <br>extern PREF      gPref;           // User preferences <br>extern HWND      ghwndMain;       // Main Window <br>extern HMENU     ghMenu;          // Main Menu <br>extern HWND      ghdlgStatus;     // Modeless Status Dialog <br>extern HWND      ghwndSbar;       // Status bar <br>extern HWND      ghwndTbar;       // Toolbar <br>extern HWND      ghwndMsg;        // Message Window <br>extern HWND      ghwndLView;      // Main List View <br>extern HWND      ghwndChat;       // Chat Edit control <br>extern HWND      ghwndSend;       // Send Button <br>extern HWND      ghwndUList;      // User List <br>extern HFONT     ghfontEntry;     // Font for message Window <br> <br>extern int       gdxWndMin;       // maximum width of window <br>extern int       gdyWndMin;       // maximum width of window <br> <br>extern TCHAR gszAppName[]; <br>extern TCHAR gszIniName[]; <br> <br> <br>#endif /* GLOBAL_H */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

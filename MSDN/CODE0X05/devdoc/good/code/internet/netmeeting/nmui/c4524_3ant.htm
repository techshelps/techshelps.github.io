<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCONF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4529"></a>CCONF.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE <br>//  File:       CCONF.CPP  <br>//  Content:    INmConference Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListConference = (COBLIST *) NULL; <br>COBLIST * g_pListConferenceNotify = (COBLIST *) NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// INmConference * GetCurrentConference(void) <br>// <br>//**************************************************************************** <br> <br>INmConference * GetCurrentConference(void) <br>{ <br>if (NULL == g_pListConference) <br>return NULL; <br> <br>return (INmConference *) g_pListConference-&gt;GetTail(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookConference(INmConference * pConference) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookConference(INmConference * pConference) <br>{ <br>HRESULT hr; <br>CConfNotify * pNotify; <br> <br>ASSERT(NULL != pConference); <br>pConference-&gt;AddRef(); <br>AddNode(pConference, &amp;g_pListConference); <br> <br>    // Connect to the conference object <br>    pNotify = new CConfNotify(); <br>    if (NULL == pNotify) <br>    { <br>        hr = E_OUTOFMEMORY; <br>        ERROR_MSG("Unable to allocate CConfNotify"); <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(pConference); <br>if (FAILED(hr)) <br>{ <br>TRACE_MSG("CConfNotify Failed (%s)", GetHrSz(hr)); <br>pNotify-&gt;Release(); <br>pNotify = NULL; <br>} <br>else <br>{ <br>TRACE_MSG("Conference Connection point established successfully"); <br>AddNode(pNotify, &amp;g_pListConferenceNotify); <br>} <br>} <br> <br>if (SUCCEEDED(hr)) <br>{ <br>UpdateStatusIcon(ICO_PHONE); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeConferences(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeConferences(void) <br>{ <br>// Release all notify <br>if (NULL != g_pListConferenceNotify) <br>{ <br>while (!g_pListConferenceNotify-&gt;IsEmpty()) <br>{ <br>CConfNotify * pNotify = (CConfNotify *) g_pListConferenceNotify-&gt;RemoveHead(); <br>ASSERT(NULL != pNotify); <br>OBJECT_MSG("[%08X] conference notify released", pNotify); <br>pNotify-&gt;Disconnect(); <br>pNotify-&gt;Release(); <br>} <br>} <br> <br>if (NULL != g_pListConference) <br>{ <br>while (!g_pListConference-&gt;IsEmpty()) <br>{ <br>INmConference * pConference = (INmConference *) g_pListConference-&gt;RemoveHead(); <br>ASSERT(NULL != pConference); <br>OBJECT_MSG("[%08X] conference released", pConference); <br>pConference-&gt;Release(); <br>} <br>} <br> <br>UpdateStatusIcon(NULL); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoConferenceCreate(void) <br>// <br>// Create a local conference object <br>// <br>//**************************************************************************** <br> <br>VOID DoConferenceCreate(void) <br>{ <br>HRESULT hr; <br>INmConference * pConference; <br> <br>// Validate system <br>if (NULL == g_pMgr) <br>{ <br>ERROR_MSG("No conference manager object"); <br>return; <br>} <br>if (NULL != GetCurrentConference()) <br>{ <br>WARN_MSG("Attempting to create second conference"); <br>} <br> <br>// Create Local Conference <br>BSTRING bstrName(gPref.pszConferenceName); <br> <br>hr = g_pMgr-&gt;CreateConference(&amp;pConference, bstrName, NULL, NMCH_ALL); <br>if (SUCCEEDED(hr)) <br>{ <br>if (NULL != pConference) <br>{ <br>hr = pConference-&gt;Host(); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Failed to host conference"); <br>} <br>// Release here, because we always AddRef in INmManager.ConferenceCreated <br>ASSERT(pConference == GetCurrentConference()); <br>pConference-&gt;Release(); <br>} <br>TRACE_MSG("CreateConference succeeded"); <br>} <br>else <br>{ <br>ERROR_MSG("CreateConference failed HResult=%s", GetHrSz(hr)); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoConferenceLeave(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoConferenceLeave(void) <br>{ <br>HRESULT hr; <br>INmConference * pConference; <br> <br>pConference = GetCurrentConference(); <br>if (NULL == pConference) <br>{ <br>ERROR_MSG("No conference object"); <br>return; <br>} <br> <br>hr = pConference-&gt;Leave(); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Conference Leave hresult=%s", GetHrSz(hr)); <br>} <br>else <br>{ <br>TRACE_MSG("Conference Leave successful..."); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CConfNotify <br>// <br>//**************************************************************************** <br> <br>CConfNotify::CConfNotify() : RefCount(), CNotify() <br>{ <br>OBJECT_MSG("CConfNotify created"); <br>} <br> <br>CConfNotify::~CConfNotify() <br>{ <br>OBJECT_MSG("CConfNotify destroyed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>OBJECT_MSG("CConfNotify::QueryInterface(): Returning IUnknown."); <br>} <br>else if (riid == IID_INmConferenceNotify) <br>{ <br>*ppvObject = (INmConferenceNotify *)this; <br>OBJECT_MSG("CConfNotify::QueryInterface(): Returning INmConferenceNotify."); <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>OBJECT_MSG("CConfNotify::QueryInterface(): Called on unknown interface."); <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmConferenceNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::NmUI(CONFN uNotify) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::NmUI(CONFN uNotify) <br>{ <br>LOG_MSG(RGB(255, 0, 255), "INmConference.NmUI CONFN=%s", GetConfnSz(uNotify)); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::StateChanged(NM_CONFERENCE_STATE uState) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::StateChanged(NM_CONFERENCE_STATE uState) <br>{ <br>NOTIFY_MSG("INmConference.StateChanged uState=%s", GetConferenceStateSz(uState)); <br> <br>switch (uState) <br>{ <br>case NM_CONFERENCE_ACTIVE: <br>{ <br>if (gPref.fAutoChat) <br>{ <br>DoCreateDataChannel(GetCurrentConference()); <br>} <br>break; <br>} <br>case NM_CONFERENCE_IDLE: <br>{ <br>FreeDataChannel(); <br>FreeAllUsers(); <br>FreeChannels(); <br>break; <br>} <br>default: <br>break; <br>} /* switch (uState) */ <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>NOTIFY_MSG("INmConference.MemberChanged uNotify=%d", uNotify); <br>DumpMemberInfo(pMember); <br> <br>switch (uNotify) <br>{ <br>case NM_MEMBER_ADDED: <br>AddMember(pMember); <br>break; <br>case NM_MEMBER_REMOVED: <br>RemoveMember(pMember); <br>break; <br>default: <br>break; <br>} <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::ChannelChanged(NM_CHANNEL_NOTIFY uNotify, INmChannel *pChannel) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::ChannelChanged(NM_CHANNEL_NOTIFY uNotify, INmChannel *pChannel) <br>{ <br>NOTIFY_MSG("INmConference.ChannelChanged uNotify=%d", uNotify); <br>DumpChannelInfo(pChannel); <br> <br>switch (uNotify) <br>{ <br>case NM_CHANNEL_ADDED: <br>HookChannel(pChannel); <br>break; <br>case NM_CHANNEL_REMOVED: <br>UnHookChannel(pChannel); <br>break; <br>case NM_CHANNEL_UPDATED: <br>UpdateChannelState(pChannel); <br>break; <br>default: <br>break; <br>} <br> <br>return S_OK; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

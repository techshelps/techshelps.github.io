<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4548"></a>MSG.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       MSG.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>// from cmd.cpp <br>VOID CmdExit(void); <br>LRESULT MsgCmdMain(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam); <br> <br>// from tbar.cpp <br>LRESULT MsgNotifyTbar(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam); <br>LRESULT MsgMenuSelect(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam); <br> <br> <br>//**************************************************************************** <br>// <br>// Handle a WM_DESTROY message <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgDestroy(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lParam) <br>{ <br>FreeAllComObjects(); <br>PostQuitMessage(0); <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgCreate(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgCreate(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lParam) <br>{ <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Handle a WM_CLOSE message <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgClose(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>{ <br>FreeAllComObjects(); <br>CmdExit(); <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Handle a WM_SIZE message <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgSize(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>{ <br>int dxClient = LOWORD(lparam);  // width of client area <br>int dyClient = HIWORD(lparam);  // height of client area <br> <br>SizeMsgWindow(dxClient, dyClient); <br>SizeStatus(dxClient, 0); <br>SendMessage(ghwndSbar, uMsg, wparam, lparam); <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Handle a WM_GETMINMAXINFO message <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgGetMinMax(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>{ <br>LPMINMAXINFO lpminmax = (LPMINMAXINFO) lparam; <br> <br>if (gdxWndMin == 0 || gdyWndMin == 0) <br>return 0; <br> <br>lpminmax-&gt;ptMinTrackSize.x = gdxWndMin; <br>lpminmax-&gt;ptMinTrackSize.y = gdyWndMin; <br> <br>return 0; <br>} <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgDrawItem(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgDrawItem(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (wParam) <br>{ <br>case IDW_MSG: <br>{ <br>LPDRAWITEMSTRUCT lpdi = (LPDRAWITEMSTRUCT)lParam; <br>TCHAR sz[MAX_PATH]; <br> <br>COLORREF cv = SendMessage(ghwndMsg, LB_GETITEMDATA, (WPARAM)lpdi-&gt;itemID, (LPARAM)0); <br>SetTextColor(lpdi-&gt;hDC, cv); <br> <br>SendMessage(ghwndMsg, LB_GETTEXT, (WPARAM)lpdi-&gt;itemID, (LPARAM)sz); <br>DrawText(lpdi-&gt;hDC, sz, -1, &amp;lpdi-&gt;rcItem, DT_LEFT | DT_SINGLELINE); <br>break; <br>} <br>case IDW_SBAR: <br>{ <br>if (0 != (((LPDRAWITEMSTRUCT) lParam)-&gt;itemData)) <br>{ <br>DrawIconEx(((LPDRAWITEMSTRUCT) lParam)-&gt;hDC,  <br>((LPDRAWITEMSTRUCT) lParam)-&gt;rcItem.left,  <br>((LPDRAWITEMSTRUCT) lParam)-&gt;rcItem.top,  <br>(HICON) (((LPDRAWITEMSTRUCT) lParam)-&gt;itemData), <br>STATUSICONSIZE, STATUSICONSIZE, 0, NULL, DI_NORMAL); <br>} <br>break; <br>} <br> <br>case IDL_USERS: <br>{ <br>DrawUserItem((LPDRAWITEMSTRUCT) lParam); <br>break; <br>} <br> <br>default: <br>break; <br>} /* switch */                                                           <br> <br>return 0; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgNotify(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgNotify(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (((LPNMHDR) lParam)-&gt;idFrom) <br>        { <br>    case IDW_TBAR: <br>        return MsgNotifyTbar(hwnd, uMsg, wParam, lParam); <br>    default: <br>        // It might still be for the toolbar (tooltips) <br>        return MsgNotifyTbar(hwnd, uMsg, wParam, lParam); <br>        } <br> <br>    return 0; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////////// <br>// Main window message table definition. <br>static MSD _rgmsdMain[] = <br>{ <br>{WM_COMMAND,       MsgCmdMain}, <br>{WM_NOTIFY,        MsgNotify}, <br>{WM_CREATE,        MsgCreate}, <br>{WM_DESTROY,       MsgDestroy}, <br>{WM_CLOSE,         MsgClose}, <br>{WM_SIZE,          MsgSize}, <br>{WM_MENUSELECT,    MsgMenuSelect}, <br>{WM_GETMINMAXINFO, MsgGetMinMax}, <br>{WM_DRAWITEM,      MsgDrawItem}, <br> <br>{0, NULL}  // MUST be the last entry <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// Main Window proc <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK WndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>for (LPMSD lpmsd = _rgmsdMain; 0 != lpmsd-&gt;uMsg; lpmsd++) <br>{ <br>if (lpmsd-&gt;uMsg == uMsg) <br>{ <br>return lpmsd-&gt;pfnmsg(hwnd, uMsg, wParam, lParam); <br>} <br>} <br> <br>return DefWindowProc(hwnd, uMsg, wParam, lParam); <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

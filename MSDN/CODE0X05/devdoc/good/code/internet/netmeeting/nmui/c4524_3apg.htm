<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLUTIL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4534"></a>CLUTIL.H</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       CLUTIL.H <br>//  Content:    Utility Classes <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#ifndef _CL_UTIL_H_ <br>#define _CL_UTIL_H_ <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS RefCount <br>// <br>//**************************************************************************** <br> <br>class RefCount <br>{ <br>private: <br>   LONG m_cRef; <br> <br>public: <br>   RefCount(); <br>   // Virtual destructor defers to destructor of derived class. <br>   virtual ~RefCount(); <br> <br>   // IUnknown methods <br> <br>   ULONG STDMETHODCALLTYPE AddRef(void); <br>   ULONG STDMETHODCALLTYPE Release(void); <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CNotify <br>// <br>// Notification sink <br>// <br>//**************************************************************************** <br> <br>class CNotify <br>{ <br>private: <br>    DWORD  m_dwCookie; <br>IUnknown * m_pUnk; <br>    IConnectionPoint           * m_pcnp; <br>    IConnectionPointContainer  * m_pcnpcnt; <br>public: <br>    CNotify(void); <br>    ~CNotify(); <br> <br>    HRESULT Connect(IUnknown *pUnk, REFIID riid, IUnknown *pUnkN); <br>    HRESULT Disconnect(void); <br> <br>    IUnknown * GetPunk() {return m_pUnk;} <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS COBLIST <br>// <br>//**************************************************************************** <br> <br>#define POSITION COBNODE* <br> <br>struct COBNODE <br>{ <br>POSITIONpNext; <br>void*pItem; <br>}; <br> <br>class COBLIST <br>{ <br>protected: <br>POSITION m_pHead; <br>POSITION m_pTail; <br>    virtual BOOL Compare(void* pItemToCompare, void* pComparator)  <br>                       { return(pItemToCompare == pComparator); }; <br>public: <br>COBLIST() : m_pHead(NULL), m_pTail(NULL) { }; <br>    virtual         ~COBLIST(); <br> <br>virtual void *  RemoveAt(POSITION rPos); <br>    void            EmptyList(); <br>POSITION    AddTail(void* pItem); <br>void *    GetTail(); <br>void *    GetNext(POSITION&amp; rPos); <br>    void *          SafeGetFromPosition(POSITION rPos); <br>    POSITION        GetPosition(void* pItem); <br>    POSITION        Lookup(void* pComparator); <br>POSITION    GetHeadPosition()  { return (m_pHead); }; <br>POSITION    GetTailPosition()  { return (m_pTail); }; <br>BOOL    IsEmpty()          { return (!m_pHead); }; <br>#ifdef DEBUG <br>void *    GetHead(); <br>void *    RemoveHead(); <br>void *        RemoveTail(); <br>void *    GetFromPosition(POSITION rPos); <br>#else <br>void *    GetHead()          { return GetFromPosition(GetHeadPosition());}; <br>void *    RemoveHead()       { return RemoveAt(m_pHead); }; <br>void *        RemoveTail()       { return RemoveAt(m_pTail); }; <br>void *    GetFromPosition(POSITION rPos){return(rPos-&gt;pItem);}; <br>#endif <br>}; <br> <br>//**************************************************************************** <br>// <br>// Utility Functions <br>// <br>//**************************************************************************** <br> <br>POSITION AddNode(PVOID pv, COBLIST ** ppList); <br>PVOID RemoveNode(POSITION * pPos, COBLIST *pList); <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BSTRING <br>// <br>//**************************************************************************** <br> <br>class BSTRING <br>{ <br>private: <br>BSTR   m_bstr; <br> <br>public: <br>// Constructors <br>BSTRING() {m_bstr = NULL;} <br> <br>inline BSTRING(LPCWSTR lpcwString); <br> <br>#if !defined(UNICODE) <br>// We don't support construction from an ANSI string in the Unicode build. <br>BSTRING(LPCSTR lpcString); <br>#endif // !defined(UNICODE) <br> <br>// Destructor <br>inline ~BSTRING(); <br> <br>// Cast to BSTR <br>operator BSTR() {return m_bstr;} <br>inline LPBSTR GetLPBSTR(void); <br>}; <br> <br> <br>BSTRING::BSTRING(LPCWSTR lpcwString) <br>{ <br>if (NULL != lpcwString) <br>{ <br>m_bstr = SysAllocString(lpcwString); <br>ASSERT(NULL != m_bstr); <br>} <br>else <br>{ <br>m_bstr = NULL; <br>} <br>} <br> <br>BSTRING::~BSTRING() <br>{ <br>if (NULL != m_bstr) <br>{ <br>SysFreeString(m_bstr); <br>} <br>} <br> <br>inline LPBSTR BSTRING::GetLPBSTR(void) <br>{ <br>ASSERT(NULL == m_bstr); <br> <br>return &amp;m_bstr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BTSTR <br>// <br>//**************************************************************************** <br> <br>class BTSTR <br>{ <br>private: <br>LPTSTR m_psz; <br> <br>public: <br>BTSTR(BSTR bstr); <br>~BTSTR(); <br> <br>// Cast to BSTR <br>operator LPTSTR() {return (NULL == m_psz) ? TEXT("&lt;null&gt;") : m_psz;} <br>}; <br> <br>LPTSTR PszFromBstr(BSTR bst); <br> <br> <br>#endif  // _CL_UTIL_H_ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

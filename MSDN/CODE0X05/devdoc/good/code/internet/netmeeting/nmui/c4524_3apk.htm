<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMGR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4538"></a>CMGR.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       CMGR.CPP <br>//  Content:    Conference Manager Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>// There should be only one conference manager <br>INmManager * g_pMgr  = NULL; <br>CMgrNotify * g_pMgrNotify = NULL; <br> <br> <br>// {D29A8C50-774F-11d0-8B1D-00A0C91BC90E} <br>const GUID g_guid =  <br>{ 0xd29a8c51, 0x774f, 0x11d0, { 0x8b, 0x1d, 0x0, 0xa0, 0xc9, 0x1b, 0xc9, 0xe} }; <br> <br>// NetMeeting 2.0 chat guid: {340F3A60-7067-11D0-A041-444553540000} <br>const GUID g_guidNM2Chat = <br>{ 0x340f3a60, 0x7067, 0x11d0, { 0xa0, 0x41, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0 } }; <br> <br> <br>HRESULT InitializeNm(void) <br>{ <br>HRESULT hr; <br>ULONG uchCaps = 0; <br>ULONG uOptions = (ULONG) gPref.iInit; <br> <br>hr = g_pMgr-&gt;Initialize(&amp;uOptions, &amp;uchCaps); <br>TRACE_MSG("CConfMgr result=%s uOptions=%08X", GetHrSz(hr), uOptions); <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT InitConfMgr(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT InitConfMgr(void) <br>{ <br>HRESULT hr; <br>LPCLASSFACTORY pcf; <br> <br>    // Notify the system we want to use the conferencing services <br>    // by creating a conference manager object <br>    hr = CoGetClassObject(CLSID_NmManager, <br>                          CLSCTX_INPROC, <br>                          NULL, <br>                          IID_IClassFactory, <br>                          (void**)&amp;pcf); <br>    if (FAILED(hr)) <br>    { <br>    ERROR_MSG("CoGetClassObject Failed (%s)", GetHrSz(hr)); <br>    } <br>    else <br>    { <br>        // Get the conference manager object <br>        hr = pcf-&gt;CreateInstance(NULL, IID_INmManager, (void**)&amp;g_pMgr); <br>        if (FAILED(hr)) <br>        { <br>    ERROR_MSG("CreateInstance Failed (%s)", GetHrSz(hr)); <br>        } <br>        else <br>        { <br>            // Connect to the conference manager object <br>            g_pMgrNotify = new CMgrNotify(); <br>            if (g_pMgrNotify == NULL) <br>            { <br>                hr = E_OUTOFMEMORY; <br>    ERROR_MSG("CConfMgrNotify: out of memory!"); <br>            } <br>            else <br>            { <br>                hr = g_pMgrNotify-&gt;Connect(g_pMgr); <br>                if (FAILED(hr)) <br>                { <br>    ERROR_MSG("CConfMgrNotify Failed (%s)", GetHrSz(hr)); <br>                    g_pMgrNotify-&gt;Release(); <br>                    g_pMgrNotify = NULL; <br>                } <br>                else <br>                { <br>DumpSysInfo(); <br>                hr = InitializeNm(); <br>                DumpLaunchInfo(); <br>} <br>            } <br>        } <br> <br>        pcf-&gt;Release(); <br>    } <br> <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID FreeConfMgr(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeConfMgr(void) <br>{ <br>// Release conference manager notify <br>if (NULL != g_pMgrNotify) <br>{ <br>OBJECT_MSG("Freeing g_pMgrNotify"); <br>g_pMgrNotify-&gt;Disconnect(); <br>g_pMgrNotify-&gt;Release(); <br>g_pMgrNotify = NULL; <br>} <br> <br>// Release conference manager <br>if (NULL != g_pMgr) <br>{ <br>OBJECT_MSG("Freeing g_pMgr"); <br>g_pMgr-&gt;Release(); <br>g_pMgr = NULL; <br>} <br>} <br> <br>//**************************************************************************** <br>// <br>// CLASS CMgrNotify <br>// <br>//**************************************************************************** <br> <br>CMgrNotify::CMgrNotify() : RefCount(), CNotify() <br>{ <br>OBJECT_MSG("CMgrNotify created"); <br>} <br> <br>CMgrNotify::~CMgrNotify() <br>{ <br>OBJECT_MSG("CMgrNotify destroyed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CMgrNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CMgrNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>OBJECT_MSG("CMgrNotify::QueryInterface(): Returning IUnknown."); <br>} <br>else if (riid == IID_INmManagerNotify) <br>{ <br>*ppvObject = (INmManagerNotify *)this; <br>OBJECT_MSG("CMgrNotify::QueryInterface(): Returning INmManagerNotify."); <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>OBJECT_MSG("CMgrNotify::QueryInterface(): Called on unknown interface."); <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmManagerNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from INmManagerNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::NmUI(CONFN confn) <br>{ <br>NOTIFY_MSG("CMgrNotify::NmUI"); <br>TRACE_MSG("CONFN=%s", GetConfnSz(confn)); <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::CallCreated(INmCall *pCall) <br>{ <br>NOTIFY_MSG("CMgrNotify::CallCreated"); <br> <br>DumpCallInfo(pCall); <br>HookCall(pCall); <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CMgrNotify::ConferenceCreated(INmConference *pConference) <br>{ <br>NOTIFY_MSG("CMgrNotify::ConferenceCreated"); <br> <br>DumpConferenceInfo(pConference); <br>HookConference(pConference); <br>return S_OK; <br>} <br> <br> <br>DWSTR _rgSysInfo[] = { <br>{NM_SYSPROP_EMAIL_NAME,    TEXT("Email     ")}, <br>{NM_SYSPROP_SERVER_NAME,   TEXT("Server    ")}, <br>{NM_SYSPROP_RESOLVE_NAME,  TEXT("Resolve   ")}, <br>{NM_SYSPROP_FIRST_NAME,    TEXT("First Name")}, <br>{NM_SYSPROP_LAST_NAME,     TEXT("Last Name ")}, <br>{NM_SYSPROP_USER_NAME,     TEXT("Name      ")}, <br>{NM_SYSPROP_USER_CITY,     TEXT("City      ")}, <br>{NM_SYSPROP_USER_COUNTRY,  TEXT("Country   ")}, <br>{NM_SYSPROP_USER_COMMENTS, TEXT("Comments  ")}, <br>{NM_SYSPROP_USER_CATEGORY, TEXT("Category  ")}, <br>{NM_SYSPROP_INSTALL_DIRECTORY, TEXT("Directory ")}, <br>{NM_SYSPROP_APP_NAME,      TEXT("App Name  ")}, <br>{NM_SYSPROP_IS_RUNNING,    TEXT("Is Running")}, <br>{NM_SYSPROP_IN_CONFERENCE, TEXT("In Conference")}, <br>{NM_SYSPROP_H323_GATEWAY,  TEXT("H323 Gateway ")}, <br>{NM_SYSPROP_H323_GATEWAY_ENABLE, TEXT("H323 Enable  ")}, <br>{NM_SYSPROP_ICA_ENABLE,    TEXT("ICA Enable   ")}, <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpSysInfo(void) <br>// <br>//**************************************************************************** <br> <br>VOID DumpSysInfo(void) <br>{ <br>HRESULT hr; <br>INmSysInfo * pSysInfo; <br> <br>if (NULL == g_pMgr) <br>return; <br> <br>if (FAILED(g_pMgr-&gt;GetSysInfo(&amp;pSysInfo))) <br>{ <br>return; <br>} <br> <br>hr = pSysInfo-&gt;IsInstalled(); <br>TRACE_MSG("NetMeeting IsInstalled (%s)", GetHrSz(hr)); <br> <br>TRACE_MSG("--- NetMeeting System Information ---"); <br> <br>for (int i = 0; i &lt; ARRAY_ELEMENTS(_rgSysInfo); i++) <br>{ <br>BSTR bstr; <br>hr = pSysInfo-&gt;GetProperty((NM_SYSPROP)_rgSysInfo[i].dw, &amp;bstr); <br>if (S_OK != hr) <br>{ <br>TRACE_MSG("%s: HRESULT = %s", _rgSysInfo[i].psz, GetHrSz(hr)); <br>} <br>else <br>{ <br>LPTSTR psz = PszFromBstr(bstr); <br>TRACE_MSG("%s = [%s]", _rgSysInfo[i].psz, psz); <br>FreePlpv(&amp;psz); <br>SysFreeString(bstr); <br>} <br>} <br>TRACE_MSG("--- NetMeeting System Information ---"); <br> <br>ULONG nmch; <br>hr = pSysInfo-&gt;GetNmchCaps(&amp;nmch); <br>TRACE_MSG("Caps=%08X  hr=%s", nmch, GetHrSz(hr)); <br> <br>pSysInfo-&gt;Release(); <br> <br>DumpAllCalls(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DumpLaunchInfo(void) <br>// <br>//**************************************************************************** <br> <br>VOID DumpLaunchInfo(void) <br>{ <br>HRESULT hr; <br>INmSysInfo * pSysInfo; <br>INmConference * pConference; <br>INmMember * pMember; <br> <br>if (NULL == g_pMgr) <br>return; <br> <br>if (FAILED(g_pMgr-&gt;GetSysInfo(&amp;pSysInfo))) <br>{ <br>return; <br>} <br> <br>hr = pSysInfo-&gt;GetLaunchInfo(&amp;pConference, &amp;pMember); <br>TRACE_MSG("GetLaunchInfo: (%s) Conference=%08X Member=%08X", GetHrSz(hr), pConference, pMember); <br>if (NULL != pConference) <br>pConference-&gt;Release(); <br>if (NULL != pMember) <br>pMember-&gt;Release(); <br> <br>pSysInfo-&gt;Release(); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

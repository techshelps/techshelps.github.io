<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMEMB.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4536"></a>CMEMB.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       CMEMB.CPP <br>//  Content:    INmMember Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListUser = (COBLIST *) NULL; <br> <br>UINT gcUsers = 0; <br> <br> <br>//**************************************************************************** <br>// <br>// PUSER PUserFromINmMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>PUSER PUserFromINmMember(INmMember * pMember) <br>{ <br>if (NULL != g_pListUser) <br>{ <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>if (pMember == pUser-&gt;pMember) <br>return pUser; <br>} <br>} <br> <br>return NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int ItemFromPUser(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>int ItemFromPUser(PUSER pUser) <br>{ <br>if (NULL == ghwndLView) <br>return -1; <br> <br>LV_FINDINFO findInfo; <br>ClearStruct(&amp;findInfo); <br>findInfo.flags = LVFI_PARAM; <br>    findInfo.lParam = (LPARAM) pUser;  <br>    return ListView_FindItem(ghwndLView, -1, &amp;findInfo); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// PUSER PUserLocal() <br>// <br>// Return a pointer to the local user information <br>// <br>//**************************************************************************** <br> <br>PUSER PUserLocal() <br>{ <br>if (NULL != g_pListUser) <br>{ <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>if (pUser-&gt;fLocal) <br>return pUser; <br>} <br>} <br> <br>return NULL; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateUserDisplay(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateUserDisplay(PUSER pUser) <br>{ <br>int iItem = ItemFromPUser(pUser); <br>TCHAR sz[MAX_PATH]; <br> <br>ASSERT(NULL != ghwndLView); <br> <br>wsprintf(sz, "%d", pUser-&gt;uVersion); <br>ListView_SetItemText(ghwndLView, iItem, ILV_VERSION, sz); <br> <br>wsprintf(sz, "%d", pUser-&gt;fMcu); <br>ListView_SetItemText(ghwndLView, iItem, ILV_MCU, sz); <br> <br>wsprintf(sz, "%d", pUser-&gt;fLocal); <br>ListView_SetItemText(ghwndLView, iItem, ILV_LOCAL, sz); <br> <br>wsprintf(sz, "%X", pUser-&gt;m_pChannelAudio); <br>ListView_SetItemText(ghwndLView, iItem, ILV_AUDIO, sz); <br> <br>wsprintf(sz, "%X", pUser-&gt;m_pChannelVideo); <br>ListView_SetItemText(ghwndLView, iItem, ILV_VIDEO, sz); <br> <br>wsprintf(sz, "%X", pUser-&gt;m_pChannelAs); <br>ListView_SetItemText(ghwndLView, iItem, ILV_AS, sz); <br> <br>wsprintf(sz, "%X", pUser-&gt;m_pChannelFt); <br>ListView_SetItemText(ghwndLView, iItem, ILV_FT, sz); <br> <br>wsprintf(sz, "%08X", pUser-&gt;uchCaps); <br>ListView_SetItemText(ghwndLView, iItem, ILV_CAPS, sz); <br> <br>ListView_SetItemText(ghwndLView, iItem, ILV_ADDR, <br>(NULL == pUser-&gt;pszAddr) ? TEXT("?") : pUser-&gt;pszAddr); <br> <br>wsprintf(sz, "%08X", pUser-&gt;uId); <br>ListView_SetItemText(ghwndLView, iItem, ILV_ID, sz); <br> <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateUserCount(void) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateUserCount(void) <br>{ <br>TCHAR sz[MAX_PATH]; <br> <br>if (1 == gcUsers) <br>lstrcpy(sz, TEXT("1 user")); <br>else <br>wsprintf(sz, TEXT("%d users"), gcUsers); <br> <br>UpdateStatusBar(sz, IDSBP_USERCOUNT, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// PUSER AllocUser(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>PUSER AllocUser(INmMember * pMember) <br>{ <br>HRESULT hr; <br>BSTR bstr; <br>INmConference * pConference; <br> <br>PUSER pUser = new USER; <br>if (NULL == pUser) <br>{ <br>return NULL; <br>} <br>ClearStruct(pUser); <br>pUser-&gt;pMember = pMember; <br>pMember-&gt;AddRef(); <br> <br>hr = pMember-&gt;GetName(&amp;bstr); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetName"); <br>} <br>else <br>{ <br>pUser-&gt;pszName = PszFromBstr(bstr); <br>SysFreeString(bstr); <br>} <br> <br>hr = pMember-&gt;GetAddr(&amp;bstr, &amp;pUser-&gt;uType); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetAddr"); <br>} <br>else <br>{ <br>pUser-&gt;pszAddr = PszFromBstr(bstr); <br>SysFreeString(bstr); <br>} <br> <br>hr = pMember-&gt;GetNmchCaps(&amp;pUser-&gt;uchCaps); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetNmchCaps"); <br>pUser-&gt;uchCaps = 0; <br>} <br> <br>hr = pMember-&gt;GetNmVersion(&amp;pUser-&gt;uVersion); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetNmVersion"); <br>pUser-&gt;uVersion = 0; <br>} <br> <br>hr = pMember-&gt;GetID(&amp;pUser-&gt;uId); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetID"); <br>pUser-&gt;uId = 0; <br>} <br> <br>pUser-&gt;fLocal = S_OK == pMember-&gt;IsSelf(); <br>pUser-&gt;fMcu = S_OK == pMember-&gt;IsMCU(); <br>pUser-&gt;fTop = FALSE; <br>hr = pMember-&gt;GetConference(&amp;pConference); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetConference"); <br>} <br>else <br>{ <br>INmMember * pMemberTop; <br>if (SUCCEEDED(pConference-&gt;GetTopProvider(&amp;pMemberTop))) <br>{ <br>pUser-&gt;fTop = (pMember == pMemberTop); <br>pMemberTop-&gt;Release(); <br>} <br>pConference-&gt;Release(); <br>} <br> <br>return pUser; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID FreeUser(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>VOID FreeUser(PUSER pUser) <br>{ <br>ASSERT(NULL != pUser); <br> <br>FreePlpv(&amp;pUser-&gt;pszName); <br>FreePlpv(&amp;pUser-&gt;pszAddr); <br> <br>if (NULL != pUser-&gt;pMember) <br>{ <br>OBJECT_MSG("[%08X] member released", pUser-&gt;pMember); <br>pUser-&gt;pMember-&gt;Release(); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeAllUsers(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeAllUsers(void) <br>{ <br>if (NULL != g_pListUser) <br>{ <br>while (!g_pListUser-&gt;IsEmpty()) <br>{ <br>RemoveMember(((PUSER) g_pListUser-&gt;GetHead())-&gt;pMember); <br>} <br>} <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID AddMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID AddMember(INmMember * pMember) <br>{ <br>PUSER pUser = AllocUser(pMember); <br>if (NULL == pUser) <br>{ <br>return; <br>} <br> <br>AddNode(pUser, &amp;g_pListUser); <br> <br>LV_ITEM  lvItem; <br>ClearStruct(&amp;lvItem); <br>lvItem.iItem = gcUsers; <br>lvItem.mask = LVIF_PARAM | LVIF_TEXT; <br>lvItem.pszText = pUser-&gt;pszName; <br>lvItem.cchTextMax = lstrlen(pUser-&gt;pszName); <br>lvItem.lParam = (LPARAM) pUser; <br>ListView_InsertItem(ghwndLView, &amp;lvItem); <br> <br>gcUsers++; <br>UpdateUserCount(); <br>UpdateUserDisplay(pUser); <br> <br>AddUserToUList(pUser, ghwndUList, FALSE); <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID RemoveMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID RemoveMember(INmMember * pMember) <br>{ <br>if (NULL == g_pListUser) <br>return; <br> <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>POSITION posSav = pos; <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>if (pMember == pUser-&gt;pMember) <br>{ <br>RemoveUserFromUList(pUser, ghwndUList); <br>ListView_DeleteItem(ghwndLView, ItemFromPUser(pUser)); <br>FreeUser(pUser); <br>g_pListUser-&gt;RemoveAt(posSav); <br> <br>gcUsers--; <br>UpdateUserCount(); <br>return; <br>} <br>} <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateUserChannel(PUSER pUser, INmChannel * pChannel, NM_MEMBER_NOTIFY uNotify) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateUserChannel(PUSER pUser, INmChannel * pChannel, NM_MEMBER_NOTIFY uNotify) <br>{ <br>ULONG uch; <br>PVOID *ppChannel = NULL; <br> <br>ASSERT(NULL != pChannel); <br> <br>if (FAILED(pChannel-&gt;GetNmch(&amp;uch))) <br>{ <br>return; <br>} <br> <br>if (NM_MEMBER_ADDED == uNotify) <br>{ <br>switch (uch) <br>{ <br>case NMCH_AUDIO: <br>{ <br>INmChannelAudio * pChannelAudio; <br>if (SUCCEEDED(pChannel-&gt;QueryInterface(IID_INmChannelAudio, (PVOID *) &amp;pChannelAudio))) <br>{ <br>if ((S_OK == pChannelAudio-&gt;IsIncoming()) != pUser-&gt;fLocal) <br>{ <br>ASSERT((NULL == pUser-&gt;m_pChannelAudio) || (pChannelAudio == pUser-&gt;m_pChannelAudio)); <br>// This is non-standard - we're storing a pointer to the specific channel, <br>// yet keeping a lock on the generic channel - weird.... <br>pUser-&gt;m_pChannelAudio = pChannelAudio; <br>} <br>pChannelAudio-&gt;Release(); <br>} <br>break; <br>} <br>case NMCH_VIDEO: <br>{ <br>INmChannelVideo * pChannelVideo; <br>if (SUCCEEDED(pChannel-&gt;QueryInterface(IID_INmChannelVideo, (PVOID *) &amp;pChannelVideo))) <br>{ <br>if ((S_OK == pChannelVideo-&gt;IsIncoming()) != pUser-&gt;fLocal) <br>{ <br>ASSERT((NULL == pUser-&gt;m_pChannelVideo) || (pChannelVideo == pUser-&gt;m_pChannelVideo)); <br>pUser-&gt;m_pChannelVideo = pChannelVideo; <br>} <br>pChannelVideo-&gt;Release(); <br>} <br>break; <br>} <br>case NMCH_SHARE: <br>if (NULL == pUser-&gt;m_pChannelAs) <br>{ <br>INmChannelAppShare * pChannelAs; <br>if (SUCCEEDED(pChannel-&gt;QueryInterface(IID_INmChannelAppShare, (PVOID *) &amp;pChannelAs))) <br>{ <br>pUser-&gt;m_pChannelAs = pChannelAs; <br>pChannelAs-&gt;Release(); <br>} <br>} <br>break; <br>case NMCH_FT: <br>if (NULL == pUser-&gt;m_pChannelFt) <br>{ <br>INmChannelFt * pChannelFt; <br>if (SUCCEEDED(pChannel-&gt;QueryInterface(IID_INmChannelFt, (PVOID *) &amp;pChannelFt))) <br>{ <br>pUser-&gt;m_pChannelFt = pChannelFt; <br>pChannelFt-&gt;Release(); <br>} <br>} <br>break; <br>case NMCH_DATA: <br>ppChannel = (PVOID *) &amp;(pUser-&gt;m_pChannelData); <br>break; <br>case NMCH_NONE: <br>case NMCH_ALL: <br>default: <br>break; <br>} <br>} /* CONFN_MEMBER_ADDED */ <br> <br>UpdateUserDisplay(pUser); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateUserInfo(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateUserInfo(PUSER pUser) <br>{ <br>ULONG   ul; <br>HRESULT hr; <br>LPTSTR  psz; <br>BSTR    bstr; <br>INmMember * pMember = pUser-&gt;pMember; <br> <br>hr = pMember-&gt;GetName(&amp;bstr); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetName"); <br>} <br>else <br>{ <br>psz = PszFromBstr(bstr); <br>SysFreeString(bstr); <br> <br>if (0 != lstrcmp(pUser-&gt;pszName, psz)) <br>{ <br>WARN_MSG("Replacing Name [%s] =&gt; [%s]", pUser-&gt;pszName, psz); <br>} <br>FreePlpv(&amp;pUser-&gt;pszName); <br>pUser-&gt;pszName = psz; <br>} <br> <br>hr = pMember-&gt;GetAddr(&amp;bstr, &amp;pUser-&gt;uType); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetAddr"); <br>} <br>else <br>{ <br>psz = PszFromBstr(bstr); <br>SysFreeString(bstr); <br> <br>if (0 != lstrcmp(pUser-&gt;pszAddr, psz)) <br>{ <br>WARN_MSG("Replacing Addr [%s] =&gt; [%s]", pUser-&gt;pszAddr, psz); <br>} <br>FreePlpv(&amp;pUser-&gt;pszAddr); <br>pUser-&gt;pszAddr = psz; <br>} <br> <br>hr = pMember-&gt;GetNmchCaps(&amp;ul); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetNmchCaps"); <br>pUser-&gt;uchCaps = 0; <br>} <br>else if (pUser-&gt;uchCaps != ul) <br>{ <br>WARN_MSG("Updating uchCaps [%08X] =&gt; [%08X]", pUser-&gt;uchCaps, ul); <br>pUser-&gt;uchCaps = ul; <br>} <br> <br>hr = pMember-&gt;GetNmVersion(&amp;ul); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("Problem with GetNmVersion"); <br>pUser-&gt;uVersion = 0; <br>} <br>else if (pUser-&gt;uVersion != ul) <br>{ <br>WARN_MSG("Updating version [%08X] =&gt; [%08X]", pUser-&gt;uVersion, ul); <br>pUser-&gt;uchCaps = ul; <br>} <br> <br> <br>if (pUser-&gt;fLocal != (S_OK == pMember-&gt;IsSelf()) ) <br>{ <br>ERROR_MSG("Local User status changed?"); <br>} <br> <br>if (pUser-&gt;fMcu != (S_OK == pMember-&gt;IsMCU())) <br>{ <br>ERROR_MSG("MCU status changed?"); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateConfView(void) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateConfView(void) <br>{ <br>if (NULL == g_pListUser) <br>return; <br> <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>UpdateUserInfo(pUser); <br>UpdateUserDisplay(pUser); <br>} <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

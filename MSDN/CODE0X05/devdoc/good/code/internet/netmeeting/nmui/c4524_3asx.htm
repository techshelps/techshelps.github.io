<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RTNS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4551"></a>RTNS.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       RTNS.CPP <br>//  Content:    General utility routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SizeStatus(int dxClient, int dy) <br>// <br>//**************************************************************************** <br> <br>VOID SizeStatus(int dxClient, int dy) <br>{ <br>int rgdxp[3]; <br> <br>rgdxp[2] = dxClient; <br>dxClient -= 50; <br>rgdxp[1] = dxClient; <br>dxClient -= 75; <br>rgdxp[0] = dxClient; <br>SendMessage(ghwndSbar, SB_SETPARTS, (WPARAM) 3, (LPARAM) rgdxp); <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID SizeMsgWindow(int dx, int dy) <br>// <br>//**************************************************************************** <br> <br>VOID SizeMsgWindow(int dx, int dy) <br>{ <br>RECT rc; <br>int xLeft; <br>int yTop; <br>int d; <br>int dyLView; <br> <br>xLeft = 0; <br>yTop = 3; <br>dy -= 3; <br> <br>if (gPref.fTbar) <br>{ <br>// adjust for Toolbar <br>GetClientRect(ghwndTbar, &amp;rc); <br>d = (rc.bottom - rc.top); <br>yTop += d; <br>dy -= d; <br>} <br> <br>if (gPref.fSbar) <br>{ <br>// adjust for status bar <br>GetClientRect(ghwndSbar, &amp;rc); <br>d = (rc.bottom - rc.top); <br>dy -= d; <br>} <br> <br>if (gPref.fChat) <br>{ <br>// adjust for status bar <br>GetClientRect(ghwndChat, &amp;rc); <br>d = (rc.bottom - rc.top); <br>dy -= d; <br>MoveWindow(ghwndChat, xLeft, yTop + dy, dx-(DXP_SEND+DXP_ULIST), d, TRUE); <br>MoveWindow(ghwndSend, xLeft+dx-(DXP_SEND+DXP_ULIST), yTop + dy, DXP_SEND, DYP_SEND, TRUE); <br>MoveWindow(ghwndUList, xLeft+dx-DXP_ULIST, yTop + dy, DXP_ULIST, DYP_ULIST, TRUE); <br>} <br> <br>dyLView = dy; <br>if (gPref.fMsg) <br>{ <br>dyLView = dyLView / 2; <br>MoveWindow(ghwndMsg, xLeft, yTop+dyLView, dx, dyLView, TRUE); <br>} <br> <br>MoveWindow(ghwndLView, xLeft, yTop, dx, dyLView, TRUE); <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID RecalcMsgWindow(void) <br>// <br>//**************************************************************************** <br> <br>VOID RecalcMsgWindow(void) <br>{ <br>RECT rc; <br> <br>GetClientRect(ghwndMain, &amp;rc); <br>SizeMsgWindow(rc.right, rc.bottom); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm) <br>// <br>//**************************************************************************** <br> <br>VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm) <br>{ <br>if (IsWindow(hwnd)) <br>{ <br>ShowWindow(hwnd, fShow ? SW_SHOW : SW_HIDE); <br>SetMenuCheck(idm, fShow); <br>RecalcMsgWindow(); <br>} <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

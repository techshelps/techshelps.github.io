<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4543"></a>DLG.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       DLG.CPP <br>//  Content:    Dialog Box Procedures <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>DWSTR _rgCallType[] = { <br>{NM_CALL_DEFAULT, TEXT("Default")}, <br>{NM_CALL_T120,    TEXT("T120")}, <br>{NM_CALL_H323,    TEXT("H323")}, <br>}; <br> <br>DWSTR _rgAddrType[] = { <br>{NM_ADDR_UNKNOWN,      TEXT("Unknown")}, <br>{NM_ADDR_IP,           TEXT("IP")}, <br>{NM_ADDR_MACHINENAME,  TEXT("Machine name")}, <br>{NM_ADDR_PSTN,         TEXT("PSTN")}, <br>{NM_ADDR_ULS,          TEXT("ULS")}, <br>{NM_ADDR_H323_GATEWAY, TEXT("H323 Gateway")}, <br>}; <br> <br>VOID InitLBox(HWND hwndCombo, DWSTR *pdwstr, UINT cElt, DWORD dwDefault) <br>{ <br>DWORD dwIndex; <br>DWORD iSel = 0; <br> <br>ASSERT(NULL != hwndCombo); <br> <br>for ( ; cElt &gt; 0; cElt--, pdwstr++) <br>{ <br>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM) pdwstr-&gt;psz);  <br>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, (LPARAM) pdwstr-&gt;dw); <br>if (pdwstr-&gt;dw == dwDefault) <br>{ <br>iSel = dwIndex; <br>} <br>} <br> <br>SendMessage(hwndCombo, CB_SETCURSEL, dwDefault, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// DWORD GetLBoxDw(HWND hwndCombo) <br>// <br>//**************************************************************************** <br> <br>DWORD GetLBoxDw(HWND hwndCombo) <br>{ <br>int iSel = SendMessage(hwndCombo, CB_GETCURSEL, 0, 0); <br>if (CB_ERR == iSel) <br>return 0; <br> <br>return SendMessage(hwndCombo, CB_GETITEMDATA, (WPARAM) iSel, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID InitUserLBox(HWND hdlg, BOOL fEveryone) <br>// <br>//**************************************************************************** <br> <br>VOID InitUserLBox(HWND hdlg, BOOL fEveryone) <br>{ <br>HWND hwndCombo = GetDlgItem(hdlg, IDL_USERS); <br>ASSERT(NULL != hwndCombo); <br>InitializeUserList(hwndCombo, fEveryone); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID InitializeUserList(HWND hwndCombo, BOOL fEveryone) <br>// <br>//**************************************************************************** <br> <br>VOID InitializeUserList(HWND hwndCombo, BOOL fEveryone) <br>{ <br>if (NULL == g_pListUser) <br>return; <br> <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>POSITION posSav = pos; <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>AddUserToUList(pUser, hwndCombo, fEveryone); <br>} <br> <br>SendMessage(hwndCombo, CB_SETCURSEL, 0, 0);  <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID AddUserToUList(PUSER pUser, HWND hwndCombo, BOOL fEveryone) <br>// <br>//**************************************************************************** <br> <br>VOID AddUserToUList(PUSER pUser, HWND hwndCombo, BOOL fEveryone) <br>{ <br>DWORD dwIndex; <br>ASSERT(NULL != pUser); <br>if (fEveryone &amp;&amp; (S_OK == pUser-&gt;pMember-&gt;IsSelf())) <br>{ <br>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM) TEXT("&lt;all&gt;"));  <br>} <br>else <br>{ <br>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM) pUser-&gt;pszName);  <br>} <br>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, (LPARAM) pUser);  <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID RemoveUserFromUList(PUSER pUser, HWND hwndCombo) <br>// <br>//**************************************************************************** <br> <br>VOID RemoveUserFromUList(PUSER pUser, HWND hwndCombo) <br>{ <br>ASSERT(NULL != pUser); <br> <br>if (!IsWindow(hwndCombo)) <br>{ <br>ERROR_MSG("RemoveUserFromUList: invalid hwndcombo?"); <br>return; <br>} <br> <br>for (DWORD dwIndex = 0; ; dwIndex++) <br>{ <br>DWORD dw = SendMessage(hwndCombo, CB_GETITEMDATA, dwIndex, 0); <br>if (CB_ERR == dw) <br>{ <br>break; <br>} <br>if (pUser == (PUSER) dw) <br>{ <br>SendMessage(hwndCombo, CB_DELETESTRING, (WPARAM)dwIndex, 0);  <br>return; <br>} <br>} <br> <br>ERROR_MSG("RemoveUserFromUList: Unable to delete [%s]", pUser-&gt;pszName); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DrawUserItem(LPDRAWITEMSTRUCT lpdis) <br>// <br>//**************************************************************************** <br> <br>VOID DrawUserItem(LPDRAWITEMSTRUCT lpdis) <br>{ <br>if (lpdis-&gt;itemID == -1) <br>return;  <br> <br>PUSER pUser = (PUSER) lpdis-&gt;itemData; <br>COLORREF cvText; <br>COLORREF cvBack; <br> <br>cvText = SetTextColor(lpdis-&gt;hDC, GetSysColor((lpdis-&gt;itemState &amp; ODS_SELECTED) <br>? COLOR_HIGHLIGHTTEXT : COLOR_WINDOWTEXT));  <br> <br>cvBack = SetBkColor(lpdis-&gt;hDC, GetSysColor((lpdis-&gt;itemState &amp; ODS_SELECTED) <br>? COLOR_HIGHLIGHT : COLOR_WINDOW));  <br> <br>if (NULL == pUser-&gt;pszName) <br>{ <br>static const TCHAR szUnknownUser[] = TEXT("? user"); <br>ExtTextOut(lpdis-&gt;hDC, lpdis-&gt;rcItem.left+2, lpdis-&gt;rcItem.top+2,  <br>ETO_CLIPPED | ETO_OPAQUE, &amp;lpdis-&gt;rcItem, <br>szUnknownUser, CCHMAX(szUnknownUser)-1, NULL);  <br>} <br>else <br>{ <br>ExtTextOut(lpdis-&gt;hDC, lpdis-&gt;rcItem.left+2, lpdis-&gt;rcItem.top+2,  <br>ETO_CLIPPED | ETO_OPAQUE, &amp;lpdis-&gt;rcItem, <br>pUser-&gt;pszName, lstrlen(pUser-&gt;pszName), NULL);  <br>} <br> <br>SetTextColor(lpdis-&gt;hDC, cvText);  <br>SetBkColor(lpdis-&gt;hDC, cvBack);  <br>  <br>if (lpdis-&gt;itemState &amp; ODS_FOCUS) <br>{ <br>DrawFocusRect(lpdis-&gt;hDC, &amp;lpdis-&gt;rcItem);  <br>} <br>} <br>    <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK ConferenceDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK ConferenceDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>CenterWindow(hdlg, ghwndMain); <br> <br>SetDlgItemText(hdlg, IDE_NAME, gPref.pszConferenceName); <br>SetDlgItemText(hdlg, IDE_PASSWORD, gPref.pszPassword); <br> <br>{ // check channel types <br>DWORD dwFlag = 0x01; <br>for (int id = IDC_NMCH_FIRST; id &lt;= IDC_NMCH_LAST; id++) <br>{ <br>CheckDlgButton(hdlg, id, 0 != (gPref.dwNmch &amp; dwFlag)); <br>dwFlag &lt;&lt;= 1; <br>} <br>} <br> <br>return TRUE; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>GetDlgItemPsz(hdlg, IDE_NAME, &amp;gPref.pszConferenceName); <br>GetDlgItemPsz(hdlg, IDE_PASSWORD, &amp;gPref.pszPassword); <br> <br>{ // check media types <br>DWORD dwFlag = 0x01; <br>gPref.dwNmch = 0; <br>for (int id = IDC_NMCH_FIRST; id &lt;= IDC_NMCH_LAST; id++) <br>{ <br>if (IsDlgButtonChecked(hdlg, id)) <br>gPref.dwNmch |= dwFlag; <br>dwFlag &lt;&lt;= 1; <br>} <br>} <br> <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgNewConference(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgNewConference(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_CONFERENCE), <br>ghwndMain, (DLGPROC)ConferenceDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK SendFileDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK SendFileDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>HWND hwnd; <br> <br>CenterWindow(hdlg, ghwndMain); <br> <br>hwnd = GetDlgItem(hdlg, IDC_USERNAME); <br> <br>InitUserLBox(hdlg, TRUE); <br> <br>// Set the default filename <br>SetDlgItemText(hdlg, IDE_FILENAME, gPref.pszFileName); <br> <br>return TRUE; <br>} <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>{ <br>INmMember * pMember = NULL; <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>if (NULL != pUser) <br>{ <br>pMember = pUser-&gt;pMember; <br>if (S_OK == pMember-&gt;IsSelf()) <br>pMember = NULL; // everyone <br>} <br>} <br>GetDlgItemPsz(hdlg, IDE_FILENAME, &amp;gPref.pszFileName); <br> <br>SendFile(pMember); <br>EndDialog(hdlg, 0); <br>return TRUE; <br>} <br> <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>case IDB_BROWSE: <br>{ <br>TCHAR szFileName[MAX_PATH]; <br> <br>// Get the file name <br>if (!FGetFileName(szFileName)) <br>return FALSE; <br> <br>SetDlgItemText(hdlg, IDE_FILENAME, szFileName); <br>return TRUE; <br>} <br> <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgSendFile(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgSendFile(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_SENDFILE), <br>ghwndMain, (DLGPROC)SendFileDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK CallConfDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK CallConfDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>CenterWindow(hdlg, ghwndMain); <br> <br>SetDlgItemText(hdlg, IDE_ADDR,       gPref.pszAddr); <br>SetDlgItemText(hdlg, IDE_CONFERENCE, gPref.pszConferenceName); <br>SetDlgItemText(hdlg, IDE_PASSWORD,   gPref.pszPassword); <br> <br>InitLBox(GetDlgItem(hdlg, IDL_ADDR_TYPE), <br>_rgAddrType, ARRAY_ELEMENTS(_rgAddrType), gPref.nmAddrType); <br>InitLBox(GetDlgItem(hdlg, IDL_CALL_TYPE), <br>_rgCallType, ARRAY_ELEMENTS(_rgCallType), gPref.nmCallType); <br>return TRUE; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>GetDlgItemPsz(hdlg, IDE_ADDR,       &amp;gPref.pszAddr); <br>GetDlgItemPsz(hdlg, IDE_CONFERENCE, &amp;gPref.pszConferenceName); <br>GetDlgItemPsz(hdlg, IDE_PASSWORD,   &amp;gPref.pszPassword); <br> <br>gPref.nmAddrType = (NM_ADDR_TYPE) GetLBoxDw(GetDlgItem(hdlg, IDL_ADDR_TYPE)); <br>gPref.nmCallType = (NM_CALL_TYPE) GetLBoxDw(GetDlgItem(hdlg, IDL_CALL_TYPE)); <br> <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgCallConf(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgCallConf(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_CALL_CONF), <br>ghwndMain, (DLGPROC)CallConfDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK CallDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK CallDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>CenterWindow(hdlg, ghwndMain); <br> <br>SetDlgItemText(hdlg, IDE_ADDR, gPref.pszAddr); <br>InitLBox(GetDlgItem(hdlg, IDL_ADDR_TYPE), <br>_rgAddrType, ARRAY_ELEMENTS(_rgAddrType), gPref.nmAddrType); <br>InitLBox(GetDlgItem(hdlg, IDL_CALL_TYPE), <br>_rgCallType, ARRAY_ELEMENTS(_rgCallType), gPref.nmCallType); <br>return TRUE; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>GetDlgItemPsz(hdlg, IDE_ADDR, &amp;gPref.pszAddr); <br> <br>gPref.nmAddrType = (NM_ADDR_TYPE) GetLBoxDw(GetDlgItem(hdlg, IDL_ADDR_TYPE)); <br>gPref.nmCallType = (NM_CALL_TYPE) GetLBoxDw(GetDlgItem(hdlg, IDL_CALL_TYPE)); <br> <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgNewCall(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgNewCall(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_CALL), <br>ghwndMain, (DLGPROC)CallDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK OptionsDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK OptionsDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>CenterWindow(hdlg, ghwndMain); <br> <br>CheckDlgButton(hdlg, IDC_MONITOR, gPref.fAutoMonitor); <br> <br>CheckDlgButton(hdlg, IDC_HOST, gPref.fAutoHost); <br>SetDlgItemText(hdlg, IDE_CONFERENCE_NAME, gPref.pszConferenceName); <br> <br>CheckDlgButton(hdlg, IDC_CALL_USER, gPref.fAutoCall); <br>SetDlgItemText(hdlg, IDE_USER_NAME, gPref.pszAddr); <br> <br>CheckDlgButton(hdlg, IDC_AUTO_CHAT, gPref.fAutoChat); <br> <br>CheckDlgButton(hdlg, IDC_MSG_TRACE,   gPref.fMsgTrace); <br>CheckDlgButton(hdlg, IDC_MSG_OBJECTS, gPref.fMsgObjects); <br>CheckDlgButton(hdlg, IDC_MSG_NOTIFY,  gPref.fMsgNotify); <br> <br>CheckRadioButton(hdlg, IDR_INIT_NORMAL, IDR_INIT_NO_LAUNCH, <br>gPref.iInit + IDR_INIT_NORMAL); <br>return TRUE; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>gPref.fAutoMonitor= IsDlgButtonChecked(hdlg, IDC_MONITOR); <br> <br>gPref.fAutoHost   = IsDlgButtonChecked(hdlg, IDC_HOST); <br>GetDlgItemPsz(hdlg, IDE_CONFERENCE_NAME, &amp;gPref.pszConferenceName); <br> <br>gPref.fAutoCall   = IsDlgButtonChecked(hdlg, IDC_CALL_USER); <br>GetDlgItemPsz(hdlg, IDE_USER_NAME, &amp;gPref.pszAddr); <br> <br>gPref.fAutoChat   = IsDlgButtonChecked(hdlg, IDC_AUTO_CHAT); <br> <br>gPref.fMsgTrace   = IsDlgButtonChecked(hdlg, IDC_MSG_TRACE); <br>gPref.fMsgObjects = IsDlgButtonChecked(hdlg, IDC_MSG_OBJECTS); <br>gPref.fMsgNotify  = IsDlgButtonChecked(hdlg, IDC_MSG_NOTIFY); <br> <br>if (IsDlgButtonChecked(hdlg, IDR_INIT_NORMAL)) <br>gPref.iInit = NM_INIT_NORMAL; <br>else if (IsDlgButtonChecked(hdlg, IDR_INIT_CONTROL)) <br>gPref.iInit = NM_INIT_CONTROL; <br>else if (IsDlgButtonChecked(hdlg, IDR_INIT_NO_LAUNCH)) <br>gPref.iInit = NM_INIT_NO_LAUNCH; <br> <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgOptions(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgOptions(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_OPTIONS), <br>ghwndMain, (DLGPROC)OptionsDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateAudioSettings(HWND hdlg) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateAudioSettings(HWND hdlg) <br>{ <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR == iSel) <br>return; <br> <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>INmChannelAudio * pChannel = pUser-&gt;m_pChannelAudio; <br>if (NULL != pChannel) <br>{ <br>NM_AUDIO_STATE uState; <br>if (SUCCEEDED(pChannel-&gt;GetState(&amp;uState))) <br>{ <br>TRACE_MSG("Audio State is %d", uState); <br>} <br> <br>DWORD dwLevel; <br>if (SUCCEEDED(pChannel-&gt;GetProperty(NM_AUDPROP_LEVEL, &amp;dwLevel))) <br>{ <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETPOS, TRUE, <br>dwLevel ); <br> <br>SetDlgItemInt(hdlg, IDE_LEVEL, dwLevel, FALSE); <br>} <br> <br>CheckDlgButton(hdlg, IDC_ACTIVE, <br>(S_OK == pChannel-&gt;IsActive()) ? BST_CHECKED : BST_UNCHECKED); <br> <br>DWORD fPause = FALSE; <br>pChannel-&gt;GetProperty(NM_AUDPROP_PAUSE, &amp;fPause); <br>CheckDlgButton(hdlg, IDC_PAUSE, fPause ? BST_CHECKED : BST_UNCHECKED); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK AudioDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK AudioDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>HRESULT hr; <br> <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>CenterWindow(hdlg, ghwndMain); <br> <br>InitUserLBox(hdlg, FALSE); <br> <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETRANGEMIN, FALSE, <br>0 ); <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETRANGEMAX, FALSE, <br>NM_MAX_AUDIO_LEVEL ); <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETTICFREQ,  <br>8096, 0 ); <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETPAGESIZE,  <br>0, 8096 ); <br>SendDlgItemMessage (hdlg, IDC_LEVEL, TBM_SETLINESIZE,  <br>0, 256 ); <br> <br>UpdateAudioSettings(hdlg); <br>return TRUE; <br>} <br> <br>case WM_DRAWITEM:  <br>DrawUserItem((LPDRAWITEMSTRUCT) lParam); <br>break; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>case IDCANCEL: <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>case IDB_UPDATE: <br>{ <br>UpdateAudioSettings(hdlg); <br>return TRUE; <br>} <br> <br>case IDC_ACTIVE: <br>{ <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>INmChannelAudio * pChannel = pUser-&gt;m_pChannelAudio; <br>if (NULL != pChannel) <br>{ <br>// Flip the active state <br>BOOL fActive = (S_OK != pChannel-&gt;IsActive()); <br>hr = pChannel-&gt;SetActive(fActive); <br>TRACE_MSG("SetActive result=%s", GetHrSz(hr)); <br>} <br>} <br>return TRUE; <br>} <br> <br>case IDC_PAUSE: <br>{ <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>INmChannelAudio * pChannel = pUser-&gt;m_pChannelAudio; <br>if (NULL != pChannel) <br>{ <br>// Flip the pause state <br>DWORD fPause = IsDlgButtonChecked(hdlg, IDC_PAUSE); <br>hr = pChannel-&gt;SetProperty(NM_AUDPROP_PAUSE, fPause); <br>TRACE_MSG("SetProperty result=%s", GetHrSz(hr)); <br>} <br>} <br>return TRUE; <br>} <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>case WM_HSCROLL: <br>{ <br>DWORD dwLevel = SendDlgItemMessage( hdlg, IDC_LEVEL, <br>TBM_GETPOS, 0, 0 ); <br>SetDlgItemInt(hdlg, IDE_LEVEL, dwLevel, FALSE); <br> <br>if (TB_ENDTRACK == LOWORD(wParam)) <br>{ <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>INmChannelAudio * pChannel = pUser-&gt;m_pChannelAudio; <br>if (NULL != pChannel) <br>{ <br>hr = pChannel-&gt;SetProperty(NM_AUDPROP_LEVEL, dwLevel); <br>TRACE_MSG("SetProperty result=%s", GetHrSz(hr)); <br>} <br>} <br>} <br>return TRUE; <br>} <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgAudio(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgAudio(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_AUDIO), <br>ghwndMain, (DLGPROC)AudioDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Application sharing <br>// <br>//**************************************************************************** <br> <br>#define ILV_AS_HWND   0 <br>#define ILV_AS_STATUS 1 <br>#define ILV_AS_NAME   2 <br> <br>static COL _rgColShare[] = { <br>{70,  "Hwnd"}, <br>{70,  "Status"}, <br>{120, "Name"}, <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeShareList(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>VOID FreeShareList(HWND hwnd) <br>{ <br>LV_ITEM lvi; <br> <br>ClearStruct(&amp;lvi); <br>lvi.mask = LVIF_PARAM; <br> <br>for (int iItem = 0; ; iItem++) <br>{ <br>lvi.iItem = iItem; <br>if (!ListView_GetItem(hwnd, &amp;lvi)) <br>break; <br> <br>INmSharableApp * pApp = (INmSharableApp *) lvi.lParam; <br>ASSERT(NULL != pApp); <br>pApp-&gt;Release(); <br>} <br> <br>ListView_DeleteAllItems(hwnd); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateShareList(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateShareList(HWND hwnd) <br>{ <br>LV_ITEM  lvItem; <br>HRESULT hr; <br>ULONG cFetched; <br>IEnumNmSharableApp * pEnum; <br>INmSharableApp * pApp; <br>NM_SHAPP_STATE uState; <br>HWND   hwndApp; <br>int    iItem; <br>BSTR   bstr; <br>LPTSTR psz; <br>TCHAR  sz[MAX_PATH]; <br> <br>FreeShareList(hwnd); <br> <br>if (NULL == g_pChannelShare) <br>return; <br> <br>ClearStruct(&amp;lvItem); <br>lvItem.mask = LVIF_PARAM | LVIF_TEXT; <br> <br>hr = g_pChannelShare-&gt;EnumSharableApp(&amp;pEnum); <br>if (FAILED(hr)) <br>{ <br>    return; <br>} <br> <br>for ( ; ; ) <br>{ <br>hr = pEnum-&gt;Next(1, &amp;pApp, &amp;cFetched); <br>if (S_OK != hr) <br>break; <br> <br>hr = pApp-&gt;GetHwnd(&amp;hwndApp); <br>wsprintf(sz, "%08X", hwndApp); <br> <br>lvItem.pszText = sz; <br>lvItem.cchTextMax = lstrlen(sz); <br>lvItem.lParam = (LPARAM) pApp; <br>iItem = ListView_InsertItem(hwnd, &amp;lvItem); <br> <br>hr = pApp-&gt;GetState(&amp;uState); <br>ListView_SetItemText(hwnd, iItem, ILV_AS_STATUS, <br>(NM_SHAPP_SHARED == uState) ? TEXT("Shared") : TEXT("Not Shared")); <br> <br>hr = pApp-&gt;GetName(&amp;bstr); <br>psz = PszFromBstr(bstr); <br>ListView_SetItemText(hwnd, iItem, ILV_AS_NAME, psz); <br>SysFreeString(bstr); <br>FreePlpv(&amp;psz); <br> <br>// pApp-&gt;Release();  // Release this in FreeShareList() <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID InitShareList(HWND hdlg) <br>// <br>//**************************************************************************** <br> <br>VOID InitShareList(HWND hdlg) <br>{ <br>HWND hwnd = GetDlgItem(hdlg, IDL_APP); <br>ASSERT(NULL != hwnd); <br> <br>// Initialize column data <br>{ <br>int   iCol; <br>LPCOL lpCol; <br>LV_COLUMN lvc; <br> <br>lpCol = _rgColShare; <br>ClearStruct(&amp;lvc); <br>lvc.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; <br>lvc.fmt = LVCFMT_LEFT; <br>for (iCol = 0; iCol &lt; ARRAY_ELEMENTS(_rgColShare); iCol++) <br>{ <br>lvc.iSubItem = iCol; <br>lvc.cx = lpCol-&gt;dwWidth; <br>lvc.pszText = lpCol-&gt;lpsz; <br>if (ListView_InsertColumn(hwnd, iCol, &amp;lvc) == -1) <br>return; <br>lpCol++; <br>} <br>} <br> <br>UpdateShareList(hwnd); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK ShareDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK ShareDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>CenterWindow(hdlg, ghwndMain); <br>InitShareList(hdlg); <br>return TRUE; <br>} <br> <br>case WM_COMMAND: <br>{ <br>UINT wCmd = GET_WM_COMMAND_ID(wParam, lParam); <br>switch (wCmd) <br>{ <br>case IDOK: <br>case IDCANCEL: <br>FreeShareList(GetDlgItem(hdlg, IDL_APP)); <br>EndDialog(hdlg, 1); <br>return TRUE; <br> <br>case IDB_UPDATE: <br>UpdateShareList(GetDlgItem(hdlg, IDL_APP)); <br>break; <br> <br>case IDB_SHARE: <br>case IDB_UNSHARE: <br>{ <br>HRESULT hr; <br>NM_SHAPP_STATE uState; <br>HWND hwndLv = GetDlgItem(hdlg, IDL_APP); <br>int iItem = ListView_GetNextItem(hwndLv, -1, LVNI_ALL | LVNI_SELECTED); <br>if (-1 == iItem) <br>break; <br> <br>LV_ITEM lvi; <br>ClearStruct(&amp;lvi); <br>lvi.iItem = iItem; <br>lvi.mask = LVIF_PARAM; <br>if (!ListView_GetItem(hwndLv, &amp;lvi)) <br>break; <br> <br>INmSharableApp * pApp = (INmSharableApp *) lvi.lParam; <br>ASSERT(NULL != pApp); <br>hr = pApp-&gt;GetState(&amp;uState); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("Invalid hwnd? hr=%s", GetHrSz(hr)); <br>break; <br>} <br>TRACE_MSG("hwnd state=%d", uState); <br>hr = pApp-&gt;SetState((IDB_SHARE == wCmd) ? NM_SHAPP_SHARED : NM_SHAPP_NOT_SHARED); <br>return TRUE; <br>} <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br>} <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgShare(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgShare(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_SHARE), <br>ghwndMain, (DLGPROC)ShareDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID _InitGuidLBox(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>VOID _InitGuidLBox(HWND hwnd) <br>{ <br>HRESULT hr; <br>DWORD dwIndex; <br>GUID  guid; <br>TCHAR szGuid[MAX_PATH]; <br>INmSysInfo * pSysInfo; <br> <br>hr = g_pMgr-&gt;GetSysInfo(&amp;pSysInfo); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("GetSysInfo Failed hr=%s", GetHrSz(hr)); <br>return; <br>} <br> <br>// TODO: use INmMgr::GetNmApp to enumerate local items <br> <br>GuidToSz((GUID *)&amp;g_guid, szGuid); <br>dwIndex = SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM) szGuid);  <br> <br>GuidToSz((GUID *)&amp;g_guidNM2Chat, szGuid); <br>dwIndex = SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM) szGuid);  <br> <br>memset(&amp;guid, 0x00, sizeof(GUID)); <br>GuidToSz((GUID *)&amp;guid, szGuid); <br>dwIndex = SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM) szGuid);  <br> <br>memset(&amp;guid, 0x11, sizeof(GUID)); <br>GuidToSz((GUID *)&amp;guid, szGuid); <br>dwIndex = SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM) szGuid);  <br> <br>memset(&amp;guid, 0x22, sizeof(GUID)); <br>GuidToSz((GUID *)&amp;guid, szGuid); <br>dwIndex = SendMessage(hwnd, CB_ADDSTRING, 0, (LPARAM) szGuid);  <br> <br> <br>SendMessage(hwnd, CB_SETCURSEL, 0, 0);  <br>pSysInfo-&gt;Release(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK LaunchDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK LaunchDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>CenterWindow(hdlg, ghwndMain); <br> <br>InitUserLBox(hdlg, TRUE); <br>_InitGuidLBox(GetDlgItem(hdlg, IDL_GUID)); <br>return TRUE; <br>} <br> <br>case WM_DRAWITEM:  <br>DrawUserItem((LPDRAWITEMSTRUCT) lParam); <br>break; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>{ <br>// Get the Member <br>INmMember * pMember = NULL; <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>if (NULL != pUser) <br>{ <br>pMember = pUser-&gt;pMember; <br>if (S_OK == pMember-&gt;IsSelf()) <br>pMember = NULL; // everyone <br>} <br>} <br> <br>// Get the Guid <br>GUID guid; <br>TCHAR szGuid[MAX_PATH]; <br>GetDlgItemText(hdlg, IDL_GUID, szGuid, CCHMAX(szGuid)); <br>SzToGuid(szGuid, &amp;guid); <br> <br>INmConference * pConference = GetCurrentConference(); <br>HRESULT hr; <br>if (NULL == pConference) <br>{ <br>hr = E_FAIL; <br>} <br>else <br>{ <br>hr = pConference-&gt;LaunchRemote(guid, pMember); <br>} <br> <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("LaunchRemote Failed hr=%s", GetHrSz(hr)); <br>} <br>else <br>{ <br>EndDialog(hdlg, 1); <br>} <br>return TRUE; <br>} <br>case IDCANCEL: <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgLaunch(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgLaunch(VOID) </code></pre>
<p>
</p>
<pre><code>{ <br>if (NULL == GetCurrentConference()) <br>return FALSE; <br> <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_LAUNCH), <br>ghwndMain, (DLGPROC)LaunchDlgProc)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK EjectDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK EjectDlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>{ <br>CenterWindow(hdlg, ghwndMain); <br> <br>InitUserLBox(hdlg, FALSE); <br>return TRUE; <br>} <br> <br>case WM_DRAWITEM:  <br>DrawUserItem((LPDRAWITEMSTRUCT) lParam); <br>break; <br> <br>case WM_COMMAND: <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>{ <br>// Get the Member <br>INmMember * pMember = NULL; <br>int iSel = SendDlgItemMessage(hdlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(hdlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iSel, 0); <br>if (NULL != pUser) <br>pMember = pUser-&gt;pMember; <br>} <br> <br>if (NULL != pMember) <br>{ <br>HRESULT hr = pMember-&gt;Eject(); <br> <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("LaunchRemote Failed hr=%s", GetHrSz(hr)); <br>} <br>} <br> <br>EndDialog(hdlg, 1); <br>return TRUE; <br>} <br>case IDCANCEL: <br>EndDialog(hdlg, 0); <br>return TRUE; <br> <br>default: <br>return TRUE; <br>} /* switch (cmd) */ <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgEject(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgEject(VOID) <br>{ <br>return (0 == DialogBox(ghInst, MAKEINTRESOURCE(IDD_EJECT), <br>ghwndMain, (DLGPROC)EjectDlgProc)); <br>} <br> <br> <br>const int iMinVideoQuality = NM_VIDEO_MIN_QUALITY; <br>const int iMaxVideoQuality = NM_VIDEO_MAX_QUALITY; <br> <br>const int iMinAutoSize = 0; <br>const int iMaxAutoSize = 400; <br> <br>//**************************************************************************** <br>// <br>// CLASS CVideoDlg <br>// <br>//**************************************************************************** <br> <br>class CVideoDlg <br>{ <br>private: <br>HWND m_hDlg; <br>CVideoNotify *m_pVideoNotify[10]; <br>BOOL m_fPaused; <br> <br>INmChannelVideo* CVideoDlg::GetChannel(int iChnl); <br>INmChannelVideo* CVideoDlg::GetCurrentChannel(); <br> <br>VOID FormatDialog(); <br>VOID SourceDialog(); <br>VOID SetFrameSize(DWORD dwFrameSize); <br>VOID SetQuality(DWORD dwQuality); <br>VOID Pause(BOOL fPause); <br>VOID ShowWindow(BOOL fShow); <br>VOID SetTopMost(BOOL fTopMost); <br>VOID AdjustSize(int cx, int cy); <br>VOID AdjustPosition(int cx, int cy); <br>VOID SetAutoSize(DWORD dwSize); <br>VOID Activate(BOOL fActive); <br> <br>BOOL ProcessInitDialog(HWND hDdlg); <br>BOOL ProcessCommand(WPARAM wParam, LPARAM lParam); <br>BOOL ProcessQualitySlider(WPARAM wParam); <br>BOOL ProcessAutoSizeSlider(WPARAM wParam); <br>BOOL ProcessDestroy(); <br> <br>public: <br>CVideoDlg(); <br>VOID UpdateControls(); <br>VOID UpdateStatus(DWORD dwProperty); <br> <br>static LRESULT CALLBACK DlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam); <br>static VOID StateChanged(NM_VIDEO_STATE uState, DWORD dwParam); <br>static VOID PropertyChanged(DWORD dwProperty, DWORD dwParam); <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CVideoDlg::CVideoDlg() : <br>m_fPaused(TRUE) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// INmChannelVideo* CVideoDlg::GetChannel(int iChnl) <br>// <br>//**************************************************************************** <br> <br>INmChannelVideo* CVideoDlg::GetChannel(int iChnl) <br>{ <br>PUSER pUser = (PUSER) SendDlgItemMessage(m_hDlg, IDL_USERS, <br>CB_GETITEMDATA, (WPARAM) iChnl, 0); <br>return pUser-&gt;m_pChannelVideo; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// INmChannelVideo* CVideoDlg::GetCurrentChannel() <br>// <br>//**************************************************************************** <br> <br>INmChannelVideo* CVideoDlg::GetCurrentChannel() <br>{ <br>int iSel = SendDlgItemMessage(m_hDlg, IDL_USERS, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>return GetChannel(iSel); <br>} <br>return NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::UpdateControls() <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::UpdateControls() <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>BOOL fCapturing = FALSE; <br>    BOOL fIncoming  = (S_OK == pChannel-&gt;IsIncoming()); <br>LPTSTR lpszState = "Unknown"; <br>NM_VIDEO_STATE uState; <br>pChannel-&gt;GetState(&amp;uState); <br>switch (uState) <br>{ <br>case NM_VIDEO_IDLE: <br>lpszState = "Idle"; <br>break; <br>case NM_VIDEO_LOCAL_PAUSED: <br>lpszState = "Local Paused"; <br>break; <br>case NM_VIDEO_PREVIEWING: <br>lpszState = "Previewing"; <br>fCapturing = !fIncoming; <br>break; <br>case NM_VIDEO_TRANSFERRING: <br>lpszState = "Transferring"; <br>fCapturing = !fIncoming; <br>break; <br>case NM_VIDEO_BOTH_PAUSED: <br>lpszState = "Both Paused"; <br>break; <br>case NM_VIDEO_REMOTE_PAUSED: <br>lpszState = "Remote Paused"; <br>fCapturing = !fIncoming; <br>break; <br>} <br>SetDlgItemText(m_hDlg, IDC_VIDEO_STATE, lpszState); <br> <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_SMALL), !fIncoming); <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_MEDIUM), !fIncoming); <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_LARGE), !fIncoming); <br>         <br>        ULONG uValue; <br>pChannel-&gt;GetProperty(NM_VIDPROP_IMAGE_PREFERRED_SIZE, &amp;uValue); <br>switch (uValue) <br>{ <br>case 0x01: <br>uValue = 0; <br>break; <br>default: <br>case 0x02: <br>uValue = 1; <br>break; <br>case 0x04: <br>uValue = 2; <br>break; <br>} <br>CheckRadioButton(m_hDlg, <br>IDC_VIDEO_SMALL, <br>IDC_VIDEO_LARGE, <br>IDC_VIDEO_SMALL + uValue); <br> <br>if (fCapturing) <br>{ <br>pChannel-&gt;GetProperty(NM_VIDPROP_CAMERA_DIALOG, &amp;uValue); <br>} <br>else <br>{ <br>uValue = 0; <br>} <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_SOURCE), uValue &amp; 0x01); <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_FORMAT), uValue &amp; 0x02); <br> <br>uValue = (S_OK == pChannel-&gt;IsActive()); <br>EnableWindow(GetDlgItem(m_hDlg, IDC_ACTIVE), fIncoming || uValue); <br>CheckDlgButton(m_hDlg, IDC_ACTIVE, uValue ? BST_CHECKED : BST_UNCHECKED); <br> <br>pChannel-&gt;GetProperty(NM_VIDPROP_PAUSE, &amp;uValue); <br>CheckDlgButton(m_hDlg, IDC_PAUSE, uValue ? BST_CHECKED : BST_UNCHECKED); <br> <br>EnableWindow(GetDlgItem(m_hDlg, IDC_VIDEO_QUALITY), fIncoming); <br>if (fIncoming) <br>{ <br>pChannel-&gt;GetProperty(NM_VIDPROP_IMAGE_QUALITY, &amp;uValue); <br>} <br>else <br>{ <br>uValue = 0; <br>} <br>SendDlgItemMessage (m_hDlg, IDC_VIDEO_QUALITY, TBM_SETRANGE, FALSE, <br>MAKELONG (iMinVideoQuality, iMaxVideoQuality )); <br> <br>SendDlgItemMessage (m_hDlg, IDC_VIDEO_QUALITY, TBM_SETTICFREQ,  <br>( iMaxVideoQuality - iMinVideoQuality ) / 8, 0 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_VIDEO_QUALITY, TBM_SETPAGESIZE,  <br>0, ( iMaxVideoQuality - iMinVideoQuality ) / 8 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_VIDEO_QUALITY, TBM_SETLINESIZE,  <br>0, 1 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_VIDEO_QUALITY, TBM_SETPOS, TRUE, <br>iMaxVideoQuality - uValue ); <br> <br>pChannel-&gt;GetProperty(NM_VIDPROP_WINDOW_AUTO_SIZE, &amp;uValue); <br>SetDlgItemInt(m_hDlg, IDC_E_AUTOSIZE, uValue, FALSE); <br> <br>SendDlgItemMessage (m_hDlg, IDC_S_AUTOSIZE, TBM_SETRANGE, FALSE, <br>MAKELONG (iMinAutoSize, iMaxAutoSize )); <br> <br>SendDlgItemMessage (m_hDlg, IDC_S_AUTOSIZE, TBM_SETTICFREQ,  <br>100, 0 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_S_AUTOSIZE, TBM_SETPAGESIZE,  <br>0, 100 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_S_AUTOSIZE, TBM_SETLINESIZE,  <br>0, 10 ); <br> <br>SendDlgItemMessage (m_hDlg, IDC_S_AUTOSIZE, TBM_SETPOS, TRUE, <br>uValue ); <br> <br>pChannel-&gt;GetProperty(NM_VIDPROP_WINDOW_VISIBLE, &amp;uValue); <br>CheckDlgButton(m_hDlg, IDC_VISIBLE, uValue ? BST_CHECKED : BST_UNCHECKED); <br> <br>pChannel-&gt;GetProperty(NM_VIDPROP_WINDOW_TOP_MOST, &amp;uValue); <br>CheckDlgButton(m_hDlg, IDC_TOPMOST, uValue ? BST_CHECKED : BST_UNCHECKED); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::UpdateStatus(DWORD dwProperty) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::UpdateStatus(DWORD dwProperty) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>ULONG uValue; <br>pChannel-&gt;GetProperty((NM_VIDPROP)dwProperty, &amp;uValue); <br> <br>TCHAR szProperty[MAX_PATH]; <br> <br>switch (dwProperty) <br>{ <br>case NM_VIDPROP_PAUSE: <br>wsprintf(szProperty, "Pause: %d", uValue); <br>break; <br>case NM_VIDPROP_WINDOW_AUTO_SIZE: <br>wsprintf(szProperty, "Window Auto Size: %d", uValue); <br>break; <br>case NM_VIDPROP_WINDOW_SIZE: <br>wsprintf(szProperty, "Window Size: (%d, %d)", <br>(short)LOWORD(uValue), (short)HIWORD(uValue)); <br>break; <br>case NM_VIDPROP_WINDOW_POSITION: <br>wsprintf(szProperty, "Window Position: (%d, %d)", <br>(short)LOWORD(uValue), (short)HIWORD(uValue)); <br>break; <br>case NM_VIDPROP_WINDOW_TOP_MOST: <br>wsprintf(szProperty, "Window Top Most: %d", uValue); <br>break; <br>case NM_VIDPROP_WINDOW_VISIBLE: <br>wsprintf(szProperty, "Window Visible: %d", uValue); <br>break; <br>case NM_VIDPROP_IMAGE_PREFERRED_SIZE: <br>wsprintf(szProperty, "Image Prefered Size: %d", uValue); <br>break; <br>case NM_VIDPROP_IMAGE_QUALITY: <br>wsprintf(szProperty, "Image Quality: %d", uValue); <br>break; <br>case NM_VIDPROP_CAMERA_DIALOG: <br>wsprintf(szProperty, "Camera Dialog: %d", uValue); <br>break; <br>default: <br>wsprintf(szProperty, "Unknown Property: %d", dwProperty); <br>break; <br>} <br>SetDlgItemText(m_hDlg, IDC_VIDEO_STATUS, szProperty); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::SourceDialog() <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::SourceDialog() <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_CAMERA_DIALOG, NM_VIDEO_SOURCE_DIALOG); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::FormatDialog() <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::FormatDialog() <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_CAMERA_DIALOG, NM_VIDEO_FORMAT_DIALOG); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::SetFrameSize(DWORD dwFrameSize) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::SetFrameSize(DWORD dwFrameSize) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_IMAGE_PREFERRED_SIZE, dwFrameSize); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::SetQuality(DWORD dwQuality) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::SetQuality(DWORD dwQuality) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_IMAGE_QUALITY, iMaxVideoQuality - dwQuality); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL CVideoDlg::ProcessInitDialog(HWND hDlg) <br>// <br>//**************************************************************************** <br> <br>BOOL CVideoDlg::ProcessInitDialog(HWND hDlg) <br>{ <br>m_hDlg = hDlg; <br> <br>CenterWindow(hDlg, ghwndMain); <br> <br>InitUserLBox(hDlg, FALSE); <br> <br>UpdateControls(); <br> <br>int iCnt = SendDlgItemMessage(hDlg, IDL_USERS, CB_GETCOUNT, 0, 0); <br> <br>for (int i = 0; i &lt; iCnt; ++i) <br>{ <br>INmChannelVideo * pChannel = GetChannel(i); <br>if (NULL != pChannel) <br>{ <br>m_pVideoNotify[i] = new CVideoNotify(CVideoDlg::StateChanged, CVideoDlg::PropertyChanged, (DWORD)this); <br>m_pVideoNotify[i]-&gt;Connect(pChannel); <br>} <br>} <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::Pause(BOOL fPause) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::Pause(BOOL fPause) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_PAUSE, fPause); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::ShowWindow(BOOL fShow) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::ShowWindow(BOOL fShow) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>DWORD dwShow = fShow; <br>pChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_VISIBLE, dwShow); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::SetTopMost(BOOL fTopMost) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::SetTopMost(BOOL fTopMost) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>DWORD dwTopMost = fTopMost; <br>pChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_TOP_MOST, dwTopMost); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::AdjustSize(int cx, int cy) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::AdjustSize(int cx, int cy) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>DWORD dwSize; <br>WORD x, y; <br>pChannel-&gt;GetProperty(NM_VIDPROP_WINDOW_SIZE, &amp;dwSize); <br>x = LOWORD(dwSize) + cx; <br>y = HIWORD(dwSize) + cy; <br>dwSize = MAKELONG(x, y); <br>pChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_SIZE, dwSize); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::AdjustPosition(int cx, int cy) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::AdjustPosition(int cx, int cy) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>DWORD dwPos; <br>WORD x, y; <br>pChannel-&gt;GetProperty(NM_VIDPROP_WINDOW_POSITION, &amp;dwPos); <br>x = LOWORD(dwPos) + cx; <br>y = HIWORD(dwPos) + cy; <br>dwPos = MAKELONG(x, y); <br>pChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_POSITION, dwPos); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::SetAutoSize(DWORD dwSize) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::SetAutoSize(DWORD dwSize) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_AUTO_SIZE, dwSize); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::Activate(BOOL fActive) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::Activate(BOOL fActive) <br>{ <br>INmChannelVideo * pChannel = GetCurrentChannel(); <br>if (NULL != pChannel) <br>{ <br>pChannel-&gt;SetActive(fActive); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL CVideoDlg::ProcessCommand(WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>BOOL CVideoDlg::ProcessCommand(WPARAM wParam, LPARAM lParam) <br>{ <br>switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>{ <br>case IDOK: <br>case IDCANCEL: <br>EndDialog(m_hDlg, 1); <br>break; <br> <br>case IDC_ACTIVE: <br>Activate(IsDlgButtonChecked(m_hDlg, IDC_ACTIVE)); <br>break; <br> <br>case IDB_UPDATE: <br>UpdateControls(); <br>break; <br> <br>case IDC_VIDEO_SOURCE: <br>SourceDialog(); <br>break; <br> <br>case IDC_VIDEO_FORMAT: <br>FormatDialog(); <br>break; <br> <br>case IDC_PAUSE: <br>Pause(IsDlgButtonChecked(m_hDlg, IDC_PAUSE)); <br>break; <br> <br>case IDL_USERS: <br>UpdateControls(); <br>break; <br> <br>case IDC_VIDEO_SMALL: <br>SetFrameSize(NM_VIDEO_SMALL); <br>break; <br>case IDC_VIDEO_MEDIUM: <br>SetFrameSize(NM_VIDEO_MEDIUM); <br>break; <br>case IDC_VIDEO_LARGE: <br>SetFrameSize(NM_VIDEO_LARGE); <br>break; <br> <br>case IDC_VISIBLE: <br>ShowWindow(IsDlgButtonChecked(m_hDlg, IDC_VISIBLE)); <br>break; <br> <br>case IDC_TOPMOST: <br>SetTopMost(IsDlgButtonChecked(m_hDlg, IDC_TOPMOST)); <br>break; <br> <br>case IDC_TALL: <br>AdjustSize(0, 10); <br>break; <br>case IDC_SHORT: <br>AdjustSize(0, -10); <br>break; <br>case IDC_THIN: <br>AdjustSize(-10, 0); <br>break; <br>case IDC_WIDE: <br>AdjustSize(10, 0); <br>break; <br> <br>case IDC_UP: <br>AdjustPosition(0, -10); <br>break; <br>case IDC_DOWN: <br>AdjustPosition(0, 10); <br>break; <br>case IDC_LEFT: <br>AdjustPosition(-10, 0); <br>break; <br>case IDC_RIGHT: <br>AdjustPosition(10, 0); <br>break; <br> <br>default: <br>return FALSE; <br>} /* switch (cmd) */ <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL CVideoDlg::ProcessQualitySlider(WPARAM wParam) <br>// <br>//**************************************************************************** <br> <br>BOOL CVideoDlg::ProcessQualitySlider(WPARAM wParam) <br>{ <br>if (TB_ENDTRACK == LOWORD(wParam)) <br>{ <br>DWORD dwValue = SendDlgItemMessage( m_hDlg, IDC_VIDEO_QUALITY, <br>TBM_GETPOS, 0, 0 ); <br> <br>{ <br>SetQuality(dwValue); <br>return TRUE; <br>} <br>} <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL CVideoDlg::ProcessAutoSizeSlider(WPARAM wParam) <br>// <br>//**************************************************************************** <br> <br>BOOL CVideoDlg::ProcessAutoSizeSlider(WPARAM wParam) <br>{ <br>if (TB_ENDTRACK == LOWORD(wParam)) <br>{ <br>DWORD dwValue = SendDlgItemMessage( m_hDlg, IDC_S_AUTOSIZE, <br>TBM_GETPOS, 0, 0 ); <br> <br>{ <br>SetAutoSize(dwValue); <br>return TRUE; <br>} <br>} <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL CVideoDlg::ProcessDestroy() <br>// <br>//**************************************************************************** <br> <br>BOOL CVideoDlg::ProcessDestroy() <br>{ <br>int iCnt = SendDlgItemMessage(m_hDlg, IDL_USERS, CB_GETCOUNT, 0, 0); <br>for (int i = 0; i &lt; iCnt; ++i) <br>{ <br>m_pVideoNotify[i]-&gt;Disconnect(); <br>m_pVideoNotify[i]-&gt;Release(); <br>} <br>return TRUE; <br>} <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK CVideoDlg::DlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK CVideoDlg::DlgProc(HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>CVideoDlg* pVideoDlg = (CVideoDlg*)GetWindowLong(hdlg, GWL_USERDATA); <br> <br>switch (uMsg) <br>{ <br>case WM_INITDIALOG: <br>SetWindowLong(hdlg, GWL_USERDATA, lParam); <br> <br>pVideoDlg = (CVideoDlg*)lParam; <br>return pVideoDlg-&gt;ProcessInitDialog(hdlg); <br> <br>case WM_DRAWITEM:  <br>DrawUserItem((LPDRAWITEMSTRUCT) lParam); <br>break; <br> <br>case WM_COMMAND: <br>return pVideoDlg-&gt;ProcessCommand(wParam, lParam); <br> <br>case WM_VSCROLL: <br>return pVideoDlg-&gt;ProcessQualitySlider(wParam); <br> <br>case WM_HSCROLL: <br>return pVideoDlg-&gt;ProcessAutoSizeSlider(wParam); <br> <br>case WM_DESTROY: <br>return pVideoDlg-&gt;ProcessDestroy(); <br> <br>default: <br>break; <br>} /* switch (uMsg) */ <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::StateChanged(NM_VIDEO_STATE uState, DWORD dwParam) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::StateChanged(NM_VIDEO_STATE uState, DWORD dwParam) <br>{ <br>((CVideoDlg*)dwParam)-&gt;UpdateControls(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CVideoDlg::PropertyChanged(DWORD dwProperty, DWORD dwParam) <br>// <br>//**************************************************************************** <br> <br>VOID CVideoDlg::PropertyChanged(DWORD dwProperty, DWORD dwParam) <br>{ <br>((CVideoDlg*)dwParam)-&gt;UpdateControls(); <br>((CVideoDlg*)dwParam)-&gt;UpdateStatus(dwProperty); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL DlgVideo(VOID) <br>// <br>//**************************************************************************** <br> <br>BOOL DlgVideo(VOID) <br>{ <br>CVideoDlg VideoDlg; <br> <br>return (0 == DialogBoxParam(ghInst, MAKEINTRESOURCE(IDD_VIDEO), <br>ghwndMain, (DLGPROC)CVideoDlg::DlgProc, (LPARAM)&amp;VideoDlg)); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCHAN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4527"></a>CCHAN.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE <br>//  File:       CCHAT.CPP <br>//  Content:    INmChannel Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListChannel = (COBLIST *) NULL; <br>COBLIST * g_pListChannelNotify = (COBLIST *) NULL; <br> <br>INmFt * g_pFt = NULL; <br>INmChannelAppShare * g_pChannelShare = NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookChannel(INmChannel * pChannel) <br>// <br>// Hook into notification callback for the channel <br>//  <br>//**************************************************************************** <br> <br>HRESULT HookChannel(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>CChannelNotify * pNotify; <br> <br>ULONG uch; <br>pChannel-&gt;GetNmch(&amp;uch); <br>TRACE_MSG("[%08X] - Channel=[%s] Added", pChannel, GetNmchSz(uch)); <br> <br>ASSERT(NULL != pChannel); <br>pChannel-&gt;AddRef(); <br>AddNode(pChannel, &amp;g_pListChannel); <br> <br>    pNotify = new CChannelNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(pChannel); <br>if (FAILED(hr)) <br>{ <br>WARN_MSG("CConfNotify Failed (%s)", GetHrSz(hr)); <br>pNotify-&gt;Release(); <br>} <br>else <br>{ <br>OBJECT_MSG("Conference Connection point established successfully"); <br>AddNode(pNotify, &amp;g_pListChannelNotify); <br>} <br>} <br> <br>if (SUCCEEDED(hr)) <br>{ <br>ULONG uch; <br>if (SUCCEEDED(pChannel-&gt;GetNmch(&amp;uch))) <br>{ <br>switch (uch) <br>{ <br>case NMCH_SHARE: <br>{ <br>if (NULL != g_pChannelShare) <br>{ <br>WARN_MSG("Replacing App Sharing Channel"); <br>g_pChannelShare-&gt;Release(); <br>g_pChannelShare = NULL; <br>} <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelAppShare, (void **)&amp;g_pChannelShare); <br>if (FAILED(hr)) <br>{ <br>ERROR_MSG("HookData:Unable to get Data Channel"); <br>} <br>break; <br>} <br>case NMCH_DATA: <br>HookData(pChannel); <br>break; <br>default: <br>break; <br>} <br>} <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UnHookChannel(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>VOID UnHookChannel(INmChannel * pChannel) <br>{ <br>POSITION pos; <br>POSITION posSav; <br>IUnknown * pUnk = pChannel; <br> <br>ULONG uch; <br>pChannel-&gt;GetNmch(&amp;uch); <br>TRACE_MSG("[%08X] - Channel=[%s] Removed", pChannel, GetNmchSz(uch)); <br> <br>// Search for the notify object responsible for this channel <br>ASSERT(NULL != g_pListChannelNotify); <br>for (pos = g_pListChannelNotify-&gt;GetHeadPosition(); NULL != pos; ) <br>{ <br>posSav = pos; <br>CChannelNotify * pNotify = (CChannelNotify *) g_pListChannelNotify-&gt;GetNext(pos); <br>ASSERT(NULL != pNotify); <br> <br>if (S_OK == pChannel-&gt;IsSameAs((INmChannel *) pNotify-&gt;GetPunk())) <br>{ <br>g_pListChannelNotify-&gt;RemoveAt(posSav); <br>pNotify-&gt;Disconnect(); <br>pNotify-&gt;Release(); <br>break; <br>} <br>} <br> <br>// Search for the channel in the list <br>ASSERT(NULL != g_pListChannel); <br>for (pos = g_pListChannel-&gt;GetHeadPosition(); NULL != pos; ) <br>{ <br>posSav = pos; <br>if (S_OK == pChannel-&gt;IsSameAs((INmChannel *) g_pListChannel-&gt;GetNext(pos))) <br>{ <br>g_pListChannel-&gt;RemoveAt(posSav); <br>pChannel-&gt;Release(); <br>break; <br>} <br>} <br> <br>OBJECT_MSG("Channel connection point removed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateChannelState(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateChannelState(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>ULONG nmch; <br>BOOL  fActive; <br>ULONG cMember; <br> <br>hr = pChannel-&gt;GetNmch(&amp;nmch); <br>if (FAILED(hr)) <br>{ <br>return; <br>} <br>fActive = S_OK == pChannel-&gt;IsActive(); <br>pChannel-&gt;GetMemberCount(&amp;cMember); <br>TRACE_MSG("%s channel %08X is %s with %d members", GetNmchSz(nmch), pChannel, <br>fActive ? TEXT("Active") : TEXT("Inactive"), cMember); <br> <br>switch (nmch) <br>{ <br>case NMCH_DATA: <br>{ <br>INmChannelData * pChannelData; <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelData, (void **)&amp;pChannelData); <br>if (FAILED(hr)) <br>return; <br>if (pChannelData != g_pChannelData) <br>{ <br>WARN_MSG("second data channel?"); <br>} <br>SetMenuCheck(IDM_CHANNEL_DATA, fActive); <br>pChannelData-&gt;Release(); <br>break; <br>} <br>case NMCH_AUDIO: <br>case NMCH_VIDEO: <br>break; <br>case NMCH_SHARE: <br>{ <br>if (fActive) <br>break; <br> <br>if (NULL == g_pChannelShare) <br>break; <br>g_pChannelShare-&gt;Release(); <br>g_pChannelShare = NULL; <br>break; <br>} <br>break; <br>default: <br>break; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeChannels(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeChannels(void) <br>{ <br>// Release all notify <br>if (NULL != g_pListChannelNotify) <br>{ <br>while (!g_pListChannelNotify-&gt;IsEmpty()) <br>{ <br>CChannelNotify * pNotify = (CChannelNotify *) g_pListChannelNotify-&gt;RemoveHead(); <br>ASSERT(NULL != pNotify); <br>OBJECT_MSG("[%08X] channel notify released", pNotify); <br>pNotify-&gt;Disconnect(); <br>pNotify-&gt;Release(); <br>} <br>} <br> <br>if (NULL != g_pListChannel) <br>{ <br>while (!g_pListChannel-&gt;IsEmpty()) <br>{ <br>INmChannel * pChannel = (INmChannel *) g_pListChannel-&gt;RemoveHead(); <br>ASSERT(NULL != pChannel); <br>OBJECT_MSG("[%08X] channel released", pChannel); <br>pChannel-&gt;Release(); <br>} <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CChannelNotify <br>// <br>//**************************************************************************** <br> <br>CChannelNotify::CChannelNotify() : RefCount(), CNotify() <br>{ <br>OBJECT_MSG("CChannelNotify created"); <br>} <br> <br>CChannelNotify::~CChannelNotify() <br>{ <br>OBJECT_MSG("CChannelNotify destroyed"); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CChannelNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CChannelNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CChannelNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>OBJECT_MSG("CChannelNotify::QueryInterface(): Returning IUnknown."); <br>} <br>else if (riid == IID_INmChannelNotify) <br>{ <br>*ppvObject = (INmChannelNotify *)this; <br>OBJECT_MSG("CChannelNotify::QueryInterface(): Returning INmChannelNotify."); <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>OBJECT_MSG("CChannelNotify::QueryInterface(): Called on unknown interface."); <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CChannelNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmChannelNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CChannelNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CChannelNotify::NmUI(CONFN uNotify) <br>{ <br>NOTIFY_MSG("CChannelNotify::NmUI uNotify=%08X, pChannel=%08X", uNotify, CNotify::GetPunk()); <br>return S_OK; <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CChannelNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>NOTIFY_MSG("CChannelNotify::MemberChanged uNotify=%d pMember=%08X, pChannel=%08X", uNotify, pMember, CNotify::GetPunk()); <br> <br>PUSER pUser = PUserFromINmMember(pMember); <br>if (NULL != pUser) <br>{ <br>UpdateUserChannel(pUser, (INmChannel *) (CNotify::GetPunk()), uNotify); <br>} <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SendFile(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID SendFile(INmMember * pMember) <br>{ <br>PUSER pUser = PUserLocal(); <br>if (NULL == pUser) <br>{ <br>return; <br>} <br> <br>if (NULL == pUser-&gt;m_pChannelFt) <br>{ <br>return; <br>} <br> <br>INmFt * pFt; <br>BSTRING bstrFileName(gPref.pszFileName); <br>HRESULT hr = pUser-&gt;m_pChannelFt-&gt;SendFile(&amp;pFt, pMember, bstrFileName, 0); <br>if (SUCCEEDED(hr)) <br>{ <br>FreeFt(); <br>g_pFt = pFt; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DoFtCancel(void) <br>// <br>//**************************************************************************** <br> <br>VOID DoFtCancel(void) <br>{ <br>if (NULL == g_pFt) <br>return; <br> <br>HRESULT hr = g_pFt-&gt;Cancel(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeFt(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeFt(void) <br>{ <br>if (NULL != g_pFt) <br>{ <br>g_pFt-&gt;Release(); <br>g_pFt = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeAs(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeAs(void) <br>{ <br>if (NULL != g_pChannelShare) <br>{ <br>g_pChannelShare-&gt;Release(); <br>g_pChannelShare = NULL; <br>} <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SBAR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4552"></a>SBAR.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       SBAR.CPP        <br>//  Content:    Status Bar Routines <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>TBBUTTON _rgtbb[] = <br>{ <br>    {0,   0,                      TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0,  0, 0}, <br>    {28,  IDM_MONITOR,            TBSTATE_ENABLED, TBSTYLE_CHECK,  0, 0,  1, 0}, <br>    {10,  IDM_CONF_START,         TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  2, 0}, <br>    {6,   IDM_CONF_STOP,          TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  3, 0}, <br>    {4,   IDM_VIEW_CLEAR,         TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  4, 0}, <br>    {5,   IDM_CALL,               TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  5, 0}, <br>    {1,   IDM_VIEW_MSG,           TBSTATE_ENABLED, TBSTYLE_CHECK,  0, 0,  6, 0}, <br>    {0,   IDM_VIEW_CLEAR,         TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  7, 0}, <br>    {6,   IDM_VIEW_FONT,          TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  8, 0}, <br>    {10,  IDM_CHANNEL_DATA,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0,  9, 0}, <br>    {11,  IDM_CHANNEL_AUDIO,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0, 10, 0}, <br>    {12,  IDM_CHANNEL_VIDEO,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0, 11, 0}, <br>    {26,  IDM_CHANNEL_FT,         TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0, 12, 0}, <br>    {14,  IDM_CHANNEL_SHARE,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0, 13, 0}, <br>    {3,   IDM_FT_CANCEL,          TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0, 14, 0}, <br> <br>}; <br> <br>// default ordering of toolbar buttons <br>static char _szBtnDefault[] = "0100020304000500060007"; <br> <br>static char _szToolbar[] = "Toolbar"; <br> <br> <br>//**************************************************************************** <br>// <br>// LPTBBUTTON _GetDefaultTbb(DWORD * pcTbb, BOOL fReset) <br>// <br>//**************************************************************************** <br> <br>LPTBBUTTON _GetDefaultTbb(DWORD * pcTbb, BOOL fReset) <br>{ <br>DWORD iBtn, cBtn; <br>LPSTR lpsz, lpch; <br>LPTBBUTTON pttb; <br> <br>if (fReset) <br>lpsz = _szBtnDefault; <br>else <br>lpsz = GetIniStr(_szToolbar, _szBtnDefault); <br> <br>lpch = lpsz; <br>cBtn = lstrlen(lpsz) / 2; <br> <br>pttb = (LPTBBUTTON) LpvAlloc(sizeof(TBBUTTON) * cBtn); <br>if (NULL == pttb) <br>return NULL; <br>for (iBtn = 0; iBtn &lt; cBtn; iBtn++) <br>{ <br>CopyStruct(pttb + iBtn, &amp;_rgtbb[ChFromHex(lpch)]); <br>lpch += 2; <br>} <br> <br>if (!fReset) <br>FreePlpv(&amp;lpsz); <br> <br>*pcTbb = cBtn; <br>return pttb; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID ResetToolbar(void) <br>// <br>// Reset the toolbar to the initial defaults <br>// <br>//**************************************************************************** <br> <br>VOID ResetToolbar(void) <br>{ <br>DWORD cBtn, iBtn; <br>LPTBBUTTON ptbb; <br> <br>ptbb = _GetDefaultTbb(&amp;cBtn, TRUE /* fReset */); <br>if (NULL == ptbb) <br>return; <br> <br>iBtn = SendMessage(ghwndTbar, TB_BUTTONCOUNT, 0, 0); <br>while (iBtn != 0) <br>{ <br>SendMessage(ghwndTbar, TB_DELETEBUTTON, (WPARAM) --iBtn, 0); <br>} <br> <br>SendMessage(ghwndTbar, TB_ADDBUTTONS, (WPARAM) cBtn, (LPARAM) ptbb); <br> <br>FreePlpv(&amp;ptbb); <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateTbar(void) <br>// <br>// Create the toolbar <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateTbar(void) <br>{ <br>DWORD cBtn; <br>LPTBBUTTON ptbb; <br> <br>ptbb = _GetDefaultTbb(&amp;cBtn, FALSE /* fReset */); <br>if (NULL == ptbb) <br>return FALSE; <br> <br>ghwndTbar = CreateToolbarEx(ghwndMain, <br>WS_CHILD | CCS_ADJUSTABLE | <br>TBSTYLE_TOOLTIPS | TBSTYLE_ALTDRAG, // | TBSTYLE_WRAPABLE  <br>IDW_TBAR, <br>NUMIMAGES, <br>ghInst, <br>IDC_TOOLBAR, <br>ptbb, <br>cBtn, <br>BUTTONWIDTH, <br>BUTTONHEIGHT, <br>IMAGEWIDTH, <br>IMAGEHEIGHT, <br>sizeof(TBBUTTON)); <br> <br>FreePlpv(&amp;ptbb); <br> <br>return (ghwndTbar != NULL); <br>} <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgNotifyTbar(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgNotifyTbar(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>LPTOOLTIPTEXT lpToolTipText; <br>static TCHAR szBuffer[MAX_PATH]; <br> <br>lpToolTipText = (LPTOOLTIPTEXT)lparam; <br> <br>switch (lpToolTipText-&gt;hdr.code) <br>{ <br>case TTN_NEEDTEXT: <br>{ <br>int cb; <br> <br>cb = LoadString(ghInst, lpToolTipText-&gt;hdr.idFrom,   // string ID == command ID <br>szBuffer, CCHMAX(szBuffer)); <br>if (cb == 0) <br>{ <br>szBuffer[0] = '\0'; <br>} <br> <br>lpToolTipText-&gt;lpszText = szBuffer; <br>return 1; <br>} <br>case TBN_QUERYINSERT: <br>return 1; // allow insert <br>case TBN_QUERYDELETE: <br>return 1; // allow delete <br>case TBN_RESET: <br>ResetToolbar(); <br>return 1; <br>case TBN_GETBUTTONINFO: <br>{ <br>LPTBNOTIFY ptbn = (LPTBNOTIFY) lparam; <br>int iBtn = ptbn-&gt;iItem+1; <br> <br>if (iBtn &gt;= (ARRAY_ELEMENTS(_rgtbb))) <br>return 0; // all button data has been passed to the control <br> <br>LoadString(ghInst, _rgtbb[iBtn].idCommand, <br>ptbn-&gt;pszText, ptbn-&gt;cchText); <br>//?ptbn-&gt;tbButton = _rgtbb[iBtn]; <br>return 1; <br> <br>} <br>case TBN_CUSTHELP: <br>break; <br>case TBN_TOOLBARCHANGE: <br>break; // changes handled when exiting <br>default: <br>break; <br>} <br> <br>return 0; <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID SetToolbarCheck(int idm, BOOL fCheck) <br>// <br>// Change the status of a toolbar command to be checked <br>// <br>//**************************************************************************** <br> <br>VOID SetToolbarCheck(int idm, BOOL fCheck) <br>{ <br>SendMessage(ghwndTbar, TB_CHECKBUTTON, <br>(WPARAM) idm, (LPARAM) MAKELONG(fCheck, 0)); <br>} <br> <br>//**************************************************************************** <br>// <br>// VOID CmdToolbar(HWND hwnd, WORD wCmd, WORD wNotify, HWND hwndCtrl) <br>// <br>//**************************************************************************** <br> <br>VOID CmdToolbar(HWND hwnd, WORD wCmd, WORD wNotify, HWND hwndCtrl) <br>{ <br>SendMessage(ghwndTbar, TB_CUSTOMIZE, 0, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID WriteIniTbar(void) <br>// <br>//**************************************************************************** <br> <br>VOID WriteIniTbar(void) <br>{ <br>int   iBtn; <br>int   cBtn; <br>LPSTR lpsz; <br>LPSTR lpch; <br>TBBUTTON tbb; <br> <br>if (NULL == ghwndTbar) <br>return; // no toolbar? <br> <br>cBtn = SendMessage(ghwndTbar, TB_BUTTONCOUNT, 0, 0); <br>if (0 == cBtn) <br>return; <br> <br>lpsz = (LPSTR) LpvAlloc(cBtn*2 + 1); <br>if (NULL == lpsz) <br>return; <br> <br>lpch = lpsz; <br>for (iBtn = 0; iBtn &lt; cBtn; iBtn++) <br>{ <br>SendMessage(ghwndTbar, TB_GETBUTTON, (WPARAM) iBtn, (LPARAM) (LPTBBUTTON) &amp;tbb); <br>wsprintf(lpch, TEXT("%02X"), LOBYTE(tbb.dwData)); <br>lpch += 2; <br>} <br>WriteIniStr(_szToolbar, lpsz); <br>FreePlpv(&amp;lpsz); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FCreateSbar(void) <br>// <br>// Create the status bar. <br>// <br>//**************************************************************************** <br> <br>BOOL FCreateSbar(void) <br>{ <br>ghwndSbar = CreateWindow(STATUSCLASSNAME, NULL, <br>WS_CHILD | SBARS_SIZEGRIP, <br>0, 0, 0, 0, <br>ghwndMain, (HMENU) IDW_SBAR, ghInst, NULL); <br> <br>return (ghwndSbar != NULL); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateStatusBar(LPTSTR lpsz, WORD wPart, WORD wFlags) <br>// <br>// Update the text for part of the status bar <br>// <br>//**************************************************************************** <br> <br>VOID UpdateStatusBar(LPTSTR lpsz, WORD wPart, WORD wFlags) <br>{ <br>    SendMessage(ghwndSbar, SB_SETTEXT, wPart | wFlags, (LPARAM) lpsz); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID StatusMsg(LPTSTR sz) <br>// <br>//**************************************************************************** <br> <br>VOID StatusMsg(LPTSTR sz) <br>{ <br>UpdateStatusBar(sz, IDSBP_MSG, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateStatusIcon(DWORD dwId) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateStatusIcon(DWORD dwId) <br>{ <br>static DWORD m_idIconStatus = 0; <br>static HICON m_hIconStatus = 0; <br> <br>if (dwId == m_idIconStatus) <br>return; <br> <br>HICON hIcon = (HICON) LoadImage(ghInst, <br>MAKEINTRESOURCE(dwId), IMAGE_ICON, <br>STATUSICONSIZE, STATUSICONSIZE, <br>LR_DEFAULTCOLOR | LR_SHARED); <br>if (NULL == hIcon) <br>{ <br>return; <br>} <br> <br>m_idIconStatus = dwId; <br>m_hIconStatus = hIcon; <br>SendMessage(ghwndSbar, SB_SETTEXT,  <br>IDSBP_ICON | SBT_OWNERDRAW, (LPARAM) m_hIconStatus); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgMenuSelect(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>// <br>// Change the status bar text to display the menu help. <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgMenuSelect(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>TCHAR  szBuffer[MAX_PATH]; <br>UINT   nStringID = 0; <br>UINT   fuFlags = GET_WM_MENUSELECT_FLAGS(wparam, lparam) &amp; 0xffff; <br>UINT   uCmd    = GET_WM_MENUSELECT_CMD(wparam, lparam); <br>HMENU  hMenu   = GET_WM_MENUSELECT_HMENU(wparam, lparam); <br> <br>szBuffer[0] = 0; <br>nStringID = 0; <br> <br>if (fuFlags == 0xffff &amp;&amp; hMenu == NULL)     // Menu has been closed <br>{ <br>return 0; <br>//nStringID = IDS_DESCRIPTION; <br>} <br>else if (fuFlags &amp; MFT_SEPARATOR)           // Ignore separators <br>{ <br>nStringID = 0; <br>} <br>else if (fuFlags &amp; MF_POPUP)                // Popup menu <br>{ <br>if (fuFlags &amp; MF_SYSMENU)               // System menu <br>nStringID = IDS_SYSMENU; <br>} <br>else                                        // Must be a command item <br>{ <br>nStringID = uCmd;               // String ID == Command ID <br>} <br> <br>// Load the string if we have an ID <br>if (nStringID != 0) <br>{ <br>LoadString(ghInst, nStringID, szBuffer, CCHMAX(szBuffer)); <br>} <br> <br>// Finally... send the string to the status bar <br>UpdateStatusBar(szBuffer, IDSBP_MSG, 0); <br> <br>return 0; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

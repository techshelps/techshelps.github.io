<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMD.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4535"></a>CMD.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMUI.EXE      <br>//  File:       CMD.CPP <br>//  Content:    Main Command Routines <br>//        All functions in this file have the format: <br>//                VOID CmdXxx(void); <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdMonitor(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdMonitor(void) <br>{ <br>if (NULL == g_pMgr) <br>{ <br>if (FAILED(InitConfMgr())) <br>{ <br>ERROR_MSG("Failed to monitor incoming calls"); <br>} <br>else <br>{ <br>TRACE_MSG("Monitoring incoming calls"); <br>} <br>} <br>else <br>{ <br>FreeConfMgr(); <br>ASSERT(NULL == g_pMgr); <br>} <br> <br>BOOL fChecked = NULL != g_pMgr; <br>SetToolbarCheck(IDM_MONITOR, fChecked); <br>SetMenuCheck(IDM_MONITOR, fChecked); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdConfStart(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdConfStart(void) <br>{ <br>if (!DlgNewConference()) <br>return; <br> <br>TRACE_MSG("Starting conference [%s] nmch=%08X", gPref.pszConferenceName, gPref.dwNmch); <br>DoConferenceCreate(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdConfStop(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdConfStop(void) <br>{ <br>TRACE_MSG("Stopping conference..."); <br>DoConferenceLeave(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdCall(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdCall(void) <br>{ <br>if (!DlgNewCall()) <br>return; <br>DoCallCreate(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdCallConf(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdCallConf(void) <br>{ <br>if (!DlgCallConf()) <br>return; <br>DoCallConference(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdCallAccept(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdCallAccept(void) <br>{ <br>DoHandleCall(TRUE); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdCallReject(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdCallReject(void) <br>{ <br>DoHandleCall(FALSE); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdCallCancel(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdCallCancel(void) <br>{ <br>DoCancelCall(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdShare(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdShare(void) <br>{ <br>DlgShare(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdLaunch(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdLaunch(void) <br>{ <br>DlgLaunch(); <br>} <br> <br>VOID CmdEject(void) <br>{ <br>DlgEject(); <br>} <br> <br>VOID CmdFtCancel(void) <br>{ <br>DoFtCancel(); <br>} <br> <br>VOID CmdDataEnable(void) <br>{ <br>if (NULL == g_pChannelData) <br>return; <br> <br>DoActivateDataChannel(S_OK != g_pChannelData-&gt;IsActive()); <br>} <br> <br> <br>VOID CmdChannelData(void) <br>{ <br>DoCreateDataChannel(GetCurrentConference()); <br>} <br> <br>VOID CmdChat(void) <br>{ <br>TCHAR sz[MAX_PATH]; <br> <br>// Get the text line <br>SendMessage(ghwndChat, WM_GETTEXT, (WPARAM) CCHMAX(sz), (LPARAM) sz); <br>SendMessage(ghwndChat, EM_SETSEL, (WPARAM) 0, (LPARAM)-1); <br>SendMessage(ghwndChat, WM_SETTEXT, (WPARAM) 0, (LPARAM) ""); <br> <br>if (NULL != g_pChannelData) <br>{ <br>INmMember * pMember = NULL; <br>int iSel = SendMessage(ghwndUList, CB_GETCURSEL, 0, 0); <br>if (CB_ERR != iSel) <br>{ <br>PUSER pUser = (PUSER) SendMessage(ghwndUList, CB_GETITEMDATA, (WPARAM) iSel, 0); <br>if (NULL != pUser) <br>pMember = pUser-&gt;pMember; <br>} <br>DoSendChatMsg(sz, pMember); <br>} <br> <br>SetFocus(ghwndChat); <br>} <br> <br>VOID CmdAudio(void) <br>{ <br>DlgAudio(); <br>} <br> <br> <br>VOID CmdVideo(void) <br>{ <br>DlgVideo(); <br>} <br> <br> <br>VOID CmdSendFile(void) <br>{ <br>DlgSendFile(); <br>} <br> <br>VOID CmdSysInfo(void) <br>{ <br>DumpSysInfo(); <br>} <br> <br>VOID CmdConfInfo(void) <br>{ <br>DoEnumAll(); <br>} <br> <br> <br>VOID CmdOptions(void) <br>{ <br>DlgOptions(); <br>} <br> <br> <br>VOID CmdUpdate(void) <br>{ <br>UpdateConfView(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdViewSbar(void) <br>// <br>// Show/Hide the status bar <br>// <br>//**************************************************************************** <br> <br>VOID CmdViewSbar(void) <br>{ <br>gPref.fSbar = !gPref.fSbar; <br>ShowHwnd(ghwndSbar, gPref.fSbar, IDM_VIEW_SBAR); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdViewTbar(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdViewTbar(void) <br>{ <br>gPref.fTbar = !gPref.fTbar; <br>ShowHwnd(ghwndTbar, gPref.fTbar, IDM_VIEW_TBAR); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdViewChat(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdViewChat(void) <br>{ <br>gPref.fChat = !gPref.fChat; <br>ShowWindow(ghwndSend, gPref.fChat ? SW_SHOW : SW_HIDE); <br>ShowWindow(ghwndUList, gPref.fChat ? SW_SHOW : SW_HIDE); <br>ShowHwnd(ghwndChat, gPref.fChat, IDM_VIEW_CHAT); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdViewMsg(void) <br>// <br>//**************************************************************************** <br> <br>VOID CmdViewMsg(void) <br>{ <br>gPref.fMsg = !gPref.fMsg; <br>ShowHwnd(ghwndMsg, gPref.fMsg, IDM_VIEW_MSG); <br>SetToolbarCheck(IDM_VIEW_MSG, gPref.fMsg); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdClear(void) <br>// <br>// Clear the message window <br>// <br>//**************************************************************************** <br> <br>VOID CmdClear(void) <br>{ <br>ClearLog(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdClear(void) <br>// <br>// Shutdown the application. <br>// <br>//**************************************************************************** <br> <br>VOID CmdExit(void) <br>{ <br>WritePref(); <br>DestroyWindow(ghwndMain); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdHelp(void) <br>// <br>// Bring up help for the application <br>// <br>//**************************************************************************** <br> <br>VOID CmdHelp(void) <br>{ <br>TCHAR  szFile[MAX_PATH]; <br>GetModuleFileName(ghInst, szFile, CCHMAX(szFile)); <br> <br>// convert the app name to the help filename (foo.exe =&gt; foo.hlp) <br>PTCHAR pch = SzFindLastCh(szFile, _T('.')); <br>if (NULL != pch) <br>{ <br>lstrcat(szFile, TEXT(".hlp")); <br>WinHelp(ghwndMain, szFile, HELP_CONTENTS, 0); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdFont(void) <br>// <br>// Change the font for the message window <br>// <br>//**************************************************************************** <br> <br>VOID CmdFont(void) <br>{ <br>CHOOSEFONT cf; <br>LOGFONT    lf; <br>HFONT      hfont; <br> <br>lf = gPref.lf; <br> <br>ClearStruct(&amp;cf); <br>cf.lStructSize = sizeof(CHOOSEFONT); <br>cf.hwndOwner = ghwndMain; <br>cf.lpLogFont = &amp;lf; <br>cf.iPointSize = 10; <br>cf.Flags = CF_SCREENFONTS | CF_EFFECTS | CF_INITTOLOGFONTSTRUCT; <br> <br>if (ChooseFont(&amp;cf) != TRUE) <br>return; <br> <br>hfont= CreateFontIndirect(cf.lpLogFont); <br>if (hfont == hfontNil) <br>return; <br> <br>MaybeDeleteObject((HGDIOBJ *) &amp;ghfontEntry); <br>ghfontEntry = hfont; <br>SendMessage(ghwndMsg, WM_SETFONT, <br>(WPARAM) ghfontEntry, MAKELPARAM(TRUE, 0)); <br> <br>gPref.lf = lf; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID CmdAbout(void) <br>//  <br>// Display the about box <br>// <br>//**************************************************************************** <br> <br>VOID CmdAbout(void) <br>{ <br>TCHAR szVersion[MAX_PATH]; <br> <br>LoadString(ghInst, IDS_VERSION, szVersion, CCHMAX(szVersion)); <br> <br>ShellAbout(ghwndMain, szVersion, NULL, LoadIcon(ghInst, MAKEINTRESOURCE(ICO_MAIN))); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID OnStartup(void) <br>//  <br>// Perform any automatic startup commands <br>// <br>//**************************************************************************** <br> <br>VOID OnStartup(void) <br>{ <br>if (gPref.fAutoMonitor) <br>{ <br>CmdMonitor(); <br>} <br> <br>if (gPref.fAutoHost) <br>{ <br>DoConferenceCreate(); <br>} <br> <br>if (gPref.fAutoCall) <br>{ <br>DoCallCreate(); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Main window command table definition. <br>//  <br>//**************************************************************************** <br> <br> <br>static CMD _rgcmdMain[] = <br>{ <br>{IDM_MONITOR,             CmdMonitor}, <br>{IDM_SYSINFO,             CmdSysInfo}, <br>{IDM_EXIT,                CmdExit}, <br> <br>{IDM_CONF_START,          CmdConfStart}, <br>{IDM_CONF_STOP,           CmdConfStop}, <br>{IDM_CONFINFO,            CmdConfInfo}, <br> <br>{IDM_VIEW_SBAR,           CmdViewSbar}, <br>{IDM_VIEW_TBAR,           CmdViewTbar}, <br>{IDM_VIEW_MSG,            CmdViewMsg}, <br>{IDM_VIEW_CHAT,           CmdViewChat}, <br>{IDM_VIEW_CLEAR,          CmdClear}, <br>{IDM_VIEW_FONT,           CmdFont}, <br>{IDM_OPTIONS,             CmdOptions}, <br> <br>{IDM_LAUNCH,              CmdLaunch}, <br>{IDM_EJECT,               CmdEject}, <br>{IDM_UPDATE,              CmdUpdate}, <br> <br>{IDM_CALL,                CmdCall}, <br>{IDM_CALL_CONF,           CmdCallConf}, <br>{IDM_CALL_ACCEPT,         CmdCallAccept}, <br>{IDM_CALL_REJECT,         CmdCallReject}, <br>{IDM_CALL_CANCEL,         CmdCallCancel}, <br> <br>{IDM_CHANNEL_DATA,        CmdChannelData}, <br>{IDM_CHANNEL_AUDIO,       CmdAudio}, <br>{IDM_CHANNEL_VIDEO,       CmdVideo}, <br>{IDM_CHANNEL_FT,          CmdSendFile}, <br>{IDM_CHANNEL_SHARE,       CmdShare}, <br> <br>{IDW_SEND,                CmdChat}, <br>{IDM_FT_CANCEL,           CmdFtCancel}, <br>{IDM_DATA_ENABLE,         CmdDataEnable}, <br> <br>{IDM_HELP,                CmdHelp}, <br>{IDM_ABOUT,               CmdAbout}, <br> <br>{0, NULL}  // MUST be last entry in the table <br>}; <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgCmdMain(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>// <br>// Handle a WM_COMMAND message <br>//  <br>//**************************************************************************** <br> <br>LRESULT MsgCmdMain(HWND hwnd, UINT uMsg, WPARAM wparam, LPARAM lparam) <br>{ <br>UINT wCmd = (UINT) GET_WM_COMMAND_ID(wparam, lparam); <br> <br>for (LPCMD lpcmd = _rgcmdMain; 0 != lpcmd-&gt;wCmd; lpcmd++) <br>{ <br>if (wCmd == lpcmd-&gt;wCmd) <br>{ <br>lpcmd-&gt;pfncmd(); <br>break; <br>} <br>} <br> <br>return 0L; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

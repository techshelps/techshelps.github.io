<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMEMB.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4511"></a>CMEMB.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMSHARE.EXE      <br>//  File:       CMEMB.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListUser = (COBLIST *) NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// PUSER PUserFromINmMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>PUSER PUserFromINmMember(INmMember * pMember) <br>{ <br>if (NULL != g_pListUser) <br>{ <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>if (pMember == pUser-&gt;pMember) <br>{ <br>ASSERT(pMember == pUser-&gt;pMember); <br>return pUser; <br>} <br>} <br>} <br> <br>return NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int ItemFromPUser(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>int ItemFromPUser(PUSER pUser) <br>{ <br>if (NULL == ghwndUser) <br>return -1; <br> <br>LV_FINDINFO findInfo; <br>ClearStruct(&amp;findInfo); <br>findInfo.flags = LVFI_PARAM; <br>    findInfo.lParam = (LPARAM) pUser;  <br>    return ListView_FindItem(ghwndUser, -1, &amp;findInfo); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// PUSER AllocUser(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>PUSER AllocUser(INmMember * pMember) <br>{ <br>HRESULT hr; <br>BSTR bstr; <br> <br>PUSER pUser = new USER; <br>if (NULL == pUser) <br>{ <br>return NULL; <br>} <br>ClearStruct(pUser); <br> <br>pUser-&gt;pMember = pMember; <br>pMember-&gt;AddRef(); <br> <br>hr = pMember-&gt;GetName(&amp;bstr); <br>if (SUCCEEDED(hr)) <br>{ <br>pUser-&gt;pszName = PszFromBstr(bstr); <br>SysFreeString(bstr); <br>} <br> <br>return pUser; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeUser(PUSER pUser) <br>// <br>//**************************************************************************** <br> <br>VOID FreeUser(PUSER pUser) <br>{ <br>ASSERT(NULL != pUser); <br> <br>FreePlpv(&amp;pUser-&gt;pszName); <br> <br>if (NULL != pUser-&gt;pMember) <br>{ <br>pUser-&gt;pMember-&gt;Release(); <br>} <br>} <br> <br>VOID FreeAllUsers(void) <br>{ <br>if (NULL != g_pListUser) <br>{ <br>while (!g_pListUser-&gt;IsEmpty()) <br>{ <br>RemoveMember(((PUSER) g_pListUser-&gt;GetHead())-&gt;pMember); <br>} <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID AddMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID AddMember(INmMember * pMember) <br>{ <br>PUSER pUser = AllocUser(pMember); <br>if (NULL == pUser) <br>{ <br>return; <br>} <br> <br>AddNode(pUser, &amp;g_pListUser); <br> <br>LV_ITEM  lvItem; <br>ClearStruct(&amp;lvItem); <br>lvItem.iItem = g_pListUser-&gt;GetItemCount(); <br>lvItem.mask = LVIF_PARAM | LVIF_TEXT; <br>lvItem.pszText = pUser-&gt;pszName; <br>lvItem.cchTextMax = lstrlen(pUser-&gt;pszName); <br>lvItem.lParam = (LPARAM) pUser; <br>ListView_InsertItem(ghwndUser, &amp;lvItem); <br> <br>{ <br>TCHAR szMsg[MAX_PATH]; <br>wsprintf(szMsg, TEXT("%s joined"), pUser-&gt;pszName); <br>DisplayMsg(szMsg); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID RemoveMember(INmMember * pMember) <br>// <br>//**************************************************************************** <br> <br>VOID RemoveMember(INmMember * pMember) <br>{ <br>if (NULL == g_pListUser) <br>return; <br> <br>POSITION pos = g_pListUser-&gt;GetHeadPosition(); <br>while (NULL != pos) <br>{ <br>POSITION posSav = pos; <br>PUSER pUser = (PUSER) g_pListUser-&gt;GetNext(pos); <br>if (pMember == pUser-&gt;pMember) <br>{ <br>TCHAR szMsg[MAX_PATH]; <br>wsprintf(szMsg, TEXT("%s left"), pUser-&gt;pszName); <br>DisplayMsg(szMsg); <br> <br>ListView_DeleteItem(ghwndUser, ItemFromPUser(pUser)); <br>FreeUser(pUser); <br>g_pListUser-&gt;RemoveAt(posSav); <br>return; <br>} <br>} <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSHARE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4513"></a>CSHARE.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMSHARE.EXE      <br>//  File:       CSHARE.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>INmChannelAppShare * g_pChannelAppShare = NULL; <br>CAppShareNotify * g_pNotifyAppShare = NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookChannel(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookChannel(INmChannel * pChannel) <br>{ <br>HRESULT hr; <br>CAppShareNotify * pNotify; <br>INmChannelAppShare * pChannelAs; <br> <br>ASSERT(NULL != pChannel); <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelAppShare, (void **)&amp;pChannelAs); <br>if (FAILED(hr)) <br>{ <br>// Not an app sharing channel <br>return hr; <br>} <br>if (NULL != g_pChannelAppShare) <br>{ <br>g_pChannelAppShare = NULL; <br>} <br>g_pChannelAppShare = pChannelAs; <br>// keep QI ref around <br> <br>    // Connect to the channel object <br>    pNotify = new CAppShareNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(g_pChannelAppShare); <br>if (FAILED(hr)) <br>{ <br>pNotify-&gt;Release(); <br>} <br>else <br>{ <br>g_pNotifyAppShare = pNotify; <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>g_pChannelAppShare-&gt;Release(); <br>g_pChannelAppShare = NULL; <br>} <br>else <br>{ <br>DoEnumApps(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookChannel(INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>VOID UnHookChannel(INmChannel * pChannel) <br>{ <br>if (NULL == g_pChannelAppShare) <br>return; <br> <br>if (S_OK != g_pChannelAppShare-&gt;IsSameAs(pChannel)) <br>return; <br> <br>FreeAppShareChannel(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeAppShareChannel(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeAppShareChannel(void) <br>{ <br>// Release all notify <br>if (NULL != g_pNotifyAppShare) <br>{ <br>g_pNotifyAppShare-&gt;Disconnect(); <br>g_pNotifyAppShare-&gt;Release(); <br>g_pNotifyAppShare = NULL; <br>} <br> <br>if (NULL != g_pChannelAppShare) <br>{ <br>g_pChannelAppShare-&gt;Release(); <br>g_pChannelAppShare = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CAppShareNotify <br>// <br>//**************************************************************************** <br> <br>CAppShareNotify::CAppShareNotify() : RefCount(), CNotify() <br>{ <br>} <br> <br>CAppShareNotify::~CAppShareNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CAppShareNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CAppShareNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>} <br>else if (riid == IID_INmChannelAppShareNotify) <br>{ <br>*ppvObject = (INmChannelAppShareNotify *)this; <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmChannelAppShareNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from INmChannelNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::NmUI(CONFN uNotify) <br>{ <br>LPTSTR psz; <br> <br>switch (uNotify) <br>{ <br>case CONFN_CLICK_CONTROL: <br>psz = TEXT("Click: requesting control"); <br>break; <br>case CONFN_CLICK_OBSCURE: <br>psz = TEXT("Click: obscured area"); <br>break; <br>case CONFN_CLICK_REMOTE_NOT_COLLABORATING: <br>psz = TEXT("Click: Remote not collaborating"); <br>break; <br>case CONFN_CLICK_LOCAL_NOT_COLLABORATING: <br>psz = TEXT("Click: Local not collaborating"); <br>break; <br>default: <br>psz = TEXT("Unknown confn"); <br>break; <br>} <br> <br>DisplayMsg(psz); <br> <br>return S_OK; <br>} <br> <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>PUSER pUser = PUserFromINmMember(pMember); <br>if (NULL != pUser) <br>{ <br>//UpdateUserChannel(pUser, (INmChannel *) (CNotify::GetPunk()), uNotify); <br>#ifdef DEBUG <br>TCHAR szMsg[MAX_PATH]; <br>wsprintf(szMsg, TEXT("%s changed sharing status"), pUser-&gt;pszName); <br>DisplayMsg(szMsg); <br>#endif <br> <br>if (S_OK == pMember-&gt;IsSelf()) <br>{ <br>NM_SHARE_STATE uState; <br>if (SUCCEEDED(pMember-&gt;GetShareState(&amp;uState))) <br>{ <br>SetMenuCheck(IDM_WORK_ALONE,  (NM_SHARE_WORKING_ALONE == uState)); <br>SetMenuCheck(IDM_COLLABORATE, (NM_SHARE_COLLABORATING == uState) <br>|| (NM_SHARE_IN_CONTROL == uState)); <br>SetMenuCheck(IDM_IN_CONTROL,  (NM_SHARE_IN_CONTROL == uState)); <br> <br>#ifdef DEBUG <br>switch (uState) <br>{ <br>case NM_SHARE_WORKING_ALONE: DisplayMsg(TEXT("Working Alone"));       break; <br>case NM_SHARE_COLLABORATING: DisplayMsg(TEXT("Collaborating"));       break; <br>case NM_SHARE_IN_CONTROL:    DisplayMsg(TEXT("In Control"));          break; <br>default:                     DisplayMsg(TEXT("Uknown Share State?")); break; <br>} <br>#endif <br>} <br>} <br>else <br>{ <br>#ifdef DEBUG <br>NM_SHARE_STATE uState; <br>if (SUCCEEDED(pMember-&gt;GetShareState(&amp;uState))) <br>{ <br>LPTSTR pszState = TEXT("?"); <br>switch (uState) <br>{ <br>case NM_SHARE_WORKING_ALONE: pszState = TEXT("Working Alone");       break; <br>case NM_SHARE_COLLABORATING: pszState = TEXT("Collaborating");       break; <br>case NM_SHARE_IN_CONTROL:    pszState = TEXT("In Control");          break; <br>default:                     pszState = TEXT("Uknown Share State?"); break; <br>} <br> <br>BSTR  bstrName; <br>if (SUCCEEDED(pMember-&gt;GetName(&amp;bstrName))) <br>{ <br>TCHAR sz[MAX_PATH]; <br>wsprintf(sz, "%s is %s", (LPTSTR) BTSTR(bstrName), pszState); <br>DisplayMsg(sz); <br>SysFreeString(bstrName); <br>} <br>} <br>#endif <br>} <br>} <br> <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CAppShareNotify::StateChanged(NM_SHAPP_STATE uState, INmSharableApp *pApp) <br>{ <br>TCHAR szMsg[MAX_PATH]; <br>wsprintf(szMsg, TEXT("%08X %s"), pApp, <br>(NM_SHAPP_SHARED == uState) ? TEXT("Shared") : TEXT("not shared")); <br>DisplayMsg(szMsg); <br>UpdateApp(pApp); <br>return S_OK; <br>} <br> <br> <br>VOID DoEnumApps(void) <br>{ <br>HRESULT hr; <br>ULONG cFetched; <br>IEnumNmSharableApp * pEnum; <br>INmSharableApp * pApp; <br> <br>if (NULL == g_pChannelAppShare) <br>return; <br> <br>hr = g_pChannelAppShare-&gt;EnumSharableApp(&amp;pEnum); <br>if (FAILED(hr)) <br>{ <br>    return; <br>} <br> <br>for ( ; ; ) <br>{ <br>hr = pEnum-&gt;Next(1, &amp;pApp, &amp;cFetched); <br>if (S_OK != hr) <br>break; <br> <br>UpdateApp(pApp); <br>pApp-&gt;Release(); <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br> <br>VOID DoWorkAlone(void) <br>{ <br>if (NULL == g_pChannelAppShare) <br>return; <br> <br>HRESULT hr = g_pChannelAppShare-&gt;SetState(NM_SHARE_WORKING_ALONE); <br>} <br> <br>VOID DoCollaborate(void) <br>{ <br>if (NULL == g_pChannelAppShare) <br>return; <br> <br>HRESULT hr = g_pChannelAppShare-&gt;SetState(NM_SHARE_COLLABORATING); <br>} <br> <br>VOID DoTakeControl(void) <br>{ <br>if (NULL == g_pChannelAppShare) <br>return; <br> <br>HRESULT hr = g_pChannelAppShare-&gt;SetState(NM_SHARE_IN_CONTROL); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

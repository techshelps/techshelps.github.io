<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4523"></a>UTIL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMSHARE.EXE      <br>//  File:       UTIL.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ClearText(void) <br>// <br>//**************************************************************************** <br> <br>VOID ClearText(void) <br>{ <br>SendMessage(ghwndMsg, LB_RESETCONTENT, 0, 0); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID DisplayMsg(LPTSTR pszMsg) <br>// <br>//**************************************************************************** <br> <br>VOID DisplayMsg(LPTSTR pszMsg) <br>{ <br>SendMessage(ghwndMsg, LB_ADDSTRING, 0, (LPARAM) pszMsg); <br>PostMessage(ghwndMsg, WM_VSCROLL, SB_BOTTOM, 0); <br>} <br> <br> <br>#ifdef NOTUSED <br> <br>//**************************************************************************** <br>// <br>// VOID SizeStatus(int dxClient, int dy) <br>// <br>//**************************************************************************** <br> <br>VOID SizeStatus(int dxClient, int dy) <br>{ <br>int rgdxp[3]; <br> <br>rgdxp[2] = dxClient; <br>dxClient -= 50; <br>rgdxp[1] = dxClient; <br>dxClient -= 75; <br>rgdxp[0] = dxClient; <br>SendMessage(ghwndSbar, SB_SETPARTS, (WPARAM) 3, (LPARAM) rgdxp); <br>} <br>#endif <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SizeMsgWindow(int dx, int dy) <br>// <br>//**************************************************************************** <br> <br>VOID SizeMsgWindow(int dx, int dy) <br>{ <br>int dyT = dy; <br>int dxLeft = XP_LEFT; <br> <br>if (gPref.fMsgWindow) <br>{ <br>dyT = dy / 2; <br>MoveWindow(ghwndMsg, XP_LEFT, dy - dyT, dx, dyT, TRUE); <br>dy -= (YP_TOP + dyT); <br>} <br> <br> <br>if (gPref.fUserList) <br>{ <br>MoveWindow(ghwndUser, XP_LEFT, YP_TOP, DXP_USER, dyT, TRUE); <br>dxLeft += DXP_USER; <br>dx -= DXP_USER; <br>} <br> <br>MoveWindow(ghwndApp, dxLeft, YP_TOP, dx, dy, TRUE); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID RecalcMsgWindow(void) <br>// <br>//**************************************************************************** <br> <br>VOID RecalcMsgWindow(void) <br>{ <br>RECT rc; <br> <br>GetClientRect(ghwndMain, &amp;rc); <br>SizeMsgWindow(rc.right, rc.bottom); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm) <br>// <br>// Show/Hide a window <br>// <br>//**************************************************************************** <br> <br>VOID ShowHwnd(HWND hwnd, BOOL fShow, int idm) <br>{ <br>if (IsWindow(hwnd)) <br>{ <br>ShowWindow(hwnd, fShow ? SW_SHOW : SW_HIDE); <br>SetMenuCheck(idm, fShow); <br>RecalcMsgWindow(); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPVOID LpvAlloc(int cb) <br>// <br>// Return a pointer to an allocated array of bytes <br>// <br>//**************************************************************************** <br> <br>LPVOID LpvAlloc(int cb) <br>{ <br>return LocalAlloc(LMEM_FIXED, cb); <br>} <br> <br>LPTSTR PszAlloc(int cch) <br>{ <br>return (LPTSTR) LocalAlloc(LMEM_FIXED, sizeof(TCHAR) * (cch+1)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreePlpv(LPVOID plpv) <br>// <br>// Free the data pointed to by plpv and set *plpv to NULL <br>// <br>//**************************************************************************** <br> <br>VOID FreePlpv(LPVOID plpv) <br>{ <br>if ((plpv == NULL) || (*(VOID FAR * FAR *)plpv == NULL)) { <br>return; <br>} <br> <br>LocalFree(*(VOID FAR * FAR *)plpv); <br>*(VOID FAR * FAR *)plpv = NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID MaybeDeleteObject(HGDIOBJ * phgdi) <br>// <br>// Check usage count, delete if we can <br>// <br>//**************************************************************************** <br> <br>VOID MaybeDeleteObject(HGDIOBJ * phgdi) <br>{ <br>if (*phgdi == hgdiNil) <br>return; <br> <br>DeleteObject(*phgdi); <br>*phgdi = hgdiNil; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID SetMenuCheck(UINT idm, BOOL fCheck) <br>// <br>// Set the menu item's check mark. <br>// <br>//**************************************************************************** <br> <br>VOID SetMenuCheck(UINT idm, BOOL fCheck) <br>{ <br>CheckMenuItem(ghMenu, idm, <br>fCheck ? (MF_CHECKED  | MF_BYCOMMAND) : (MF_UNCHECKED | MF_BYCOMMAND)); <br>} <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

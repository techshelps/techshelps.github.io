<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHWND.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4507"></a>CHWND.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMSHARE.EXE      <br>//  File:       CHWND.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>COBLIST * g_pListApp = (COBLIST *) NULL; <br> <br> <br>//**************************************************************************** <br>// <br>// int AddApp(INmSharableApp * pApp) <br>// <br>//**************************************************************************** <br> <br>int AddApp(INmSharableApp * pApp) <br>{ <br>TCHAR sz[MAX_PATH]; <br>wsprintf(sz, TEXT("%08X"), pApp); <br> <br>pApp-&gt;AddRef(); <br>AddNode(pApp, &amp;g_pListApp); <br> <br>LV_ITEM  lvItem; <br>ClearStruct(&amp;lvItem); <br>lvItem.iItem = g_pListApp-&gt;GetItemCount(); <br>lvItem.mask = LVIF_PARAM | LVIF_TEXT; <br>lvItem.pszText = sz; <br>lvItem.cchTextMax = lstrlen(sz); <br>lvItem.lParam = (LPARAM) pApp; <br>return ListView_InsertItem(ghwndApp, &amp;lvItem); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int ItemFromPApp(INmSharableApp * pApp) <br>// <br>//**************************************************************************** <br> <br>int ItemFromPApp(INmSharableApp * pApp) <br>{ <br>if (NULL == ghwndApp) <br>return -1; <br> <br>LV_FINDINFO findInfo; <br>ClearStruct(&amp;findInfo); <br>findInfo.flags = LVFI_PARAM; <br>    findInfo.lParam = (LPARAM) pApp;  <br>    return ListView_FindItem(ghwndApp, -1, &amp;findInfo); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeAllApps(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeAllApps(void) <br>{ <br>if (NULL != g_pListApp) <br>{ <br>while (!g_pListApp-&gt;IsEmpty()) <br>{ <br>INmSharableApp * pApp = (INmSharableApp *) g_pListApp-&gt;RemoveHead(); <br>ASSERT(NULL != pApp); <br>pApp-&gt;Release(); <br>} <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateApp(INmSharableApp * pApp) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateApp(INmSharableApp * pApp) <br>{ <br>HRESULT hr; <br>LPTSTR  psz; <br>BSTR    bstr; <br>HWND    hwnd; <br>int     iItem; <br>NM_SHAPP_STATE uState; <br> <br>iItem = ItemFromPApp(pApp); <br>if (-1 == iItem) <br>{ <br>iItem = AddApp(pApp); <br>if (-1 == iItem) <br>return; <br>} <br> <br>hr = pApp-&gt;GetHwnd(&amp;hwnd); <br>if (SUCCEEDED(hr)) <br>{ <br>TCHAR sz[MAX_PATH]; <br>wsprintf(sz, TEXT("%08X"), hwnd); <br>ListView_SetItemText(ghwndApp, iItem, ILV_HWND, sz); <br>} <br> <br>hr = pApp-&gt;GetState(&amp;uState); <br>if (SUCCEEDED(hr)) <br>{ <br>ListView_SetItemText(ghwndApp, iItem, ILV_STATUS, <br>(NM_SHAPP_SHARED == uState) ? TEXT("Shared") : TEXT("Not Shared")); <br>} <br> <br>hr = pApp-&gt;GetName(&amp;bstr); <br>if (SUCCEEDED(hr)) <br>{ <br>psz = PszFromBstr(bstr); <br>SysFreeString(bstr); <br> <br>ListView_SetItemText(ghwndApp, iItem, ILV_NAME, psz); <br>FreePlpv(&amp;psz); <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID UpdateAppList(void) <br>// <br>//**************************************************************************** <br> <br>VOID UpdateAppList(void) <br>{ <br>// Update all apps <br>// - enumerate all <br>// - ensure all are in list <br>// - check data for each <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LRESULT MsgNotifyAppList(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT MsgNotifyAppList(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>LV_DISPINFO *pLvdi = (LV_DISPINFO *)lParam; <br> <br>switch(pLvdi-&gt;hdr.code) <br>{ <br>case NM_DBLCLK: <br>case NM_RETURN: <br>{ <br>HRESULT hr; <br>NM_SHAPP_STATE uState; <br> <br>int iItem = ListView_GetNextItem(ghwndApp, -1, LVNI_ALL | LVNI_SELECTED); <br>if (-1 == iItem) <br>break; <br> <br>LV_ITEM lvi; <br>ClearStruct(&amp;lvi); <br>lvi.iItem = iItem; <br>lvi.mask = LVIF_PARAM; <br>if (!ListView_GetItem(ghwndApp, &amp;lvi)) <br>break; <br> <br>INmSharableApp * pApp = (INmSharableApp *) lvi.lParam; <br>ASSERT(NULL != pApp); <br>hr = pApp-&gt;GetState(&amp;uState); <br>if (FAILED(hr)) <br>break; <br> <br>if (NM_SHAPP_NOT_SHARED == uState) <br>uState = NM_SHAPP_SHARED; <br>else <br>uState = NM_SHAPP_NOT_SHARED; <br> <br>hr = pApp-&gt;SetState(uState); <br>break; <br>} <br>default: <br>break; <br>} <br> <br>return 0; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

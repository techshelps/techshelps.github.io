<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CNFNTFY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4460"></a>CNFNTFY.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     AVPHONE.EXE      <br>//  File:       CNFNTFY.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>//**************************************************************************** <br>// <br>// CLASS CConfNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Construction/Destruction <br>// <br>//**************************************************************************** <br> <br>CConfNotify::CConfNotify() <br>{ <br> <br>} <br> <br>CConfNotify::CConfNotify(Conf *pConf) <br>{ <br>m_pConf = pConf; <br>} <br> <br>CConfNotify::~CConfNotify() <br>{ <br> <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// ULONG STDMETHODCALLTYPE CConfNotify::AddRef() <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::AddRef() <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// ULONG STDMETHODCALLTYPE CConfNotify::Release() <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CConfNotify::Release() <br>{ <br>return RefCount::Release(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::QueryInterface(REFIID riid, PVOID * ppvObject) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::QueryInterface(REFIID riid, PVOID * ppvObject) <br>{ <br>*ppvObject = NULL; <br> <br>if (riid == IID_IUnknown) <br>*ppvObject = (PVOID *)this; <br>else if (riid == IID_INmConferenceNotify) <br>*ppvObject = (PVOID *)this; <br>else <br>return E_NOINTERFACE; <br> <br>AddRef(); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Sink connection methods <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// HRESULT CConfNotify::Connect(IUnknown * pUnkOuter) <br>// <br>// Connects to container <br>// <br>//**************************************************************************** <br> <br>HRESULT CConfNotify::Connect(IUnknown * pUnkOuter) <br>{ <br>return CNotify::Connect(pUnkOuter, IID_INmConferenceNotify, (IUnknown *)this); <br>} <br> <br>HRESULT CConfNotify::Disconnect() <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Main sink notification methods <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::ChannelChanged(NM_CHANNEL_NOTIFY uNotify, INmChannel * pChannel) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::ChannelChanged(NM_CHANNEL_NOTIFY uNotify, INmChannel * pChannel) <br>{ <br>INmChannelVideo *pVidChannel; <br>ULONG uCh; <br>IID iid; <br>HRESULT hr; <br> <br>pChannel-&gt;AddRef(); <br> <br> <br>// When notified that a video channel has been added, display the video window. <br> <br>if (uNotify == NM_CHANNEL_ADDED) <br>{ <br>pChannel-&gt;GetNmch(&amp;uCh); <br>if (uCh==NMCH_VIDEO) <br>{ <br>pChannel-&gt;GetInterface(&amp;iid); <br>hr = pChannel-&gt;QueryInterface(iid,(void **)&amp;pVidChannel); <br> <br>if (SUCCEEDED(hr)) <br>{ <br>pVidChannel-&gt;SetProperty(NM_VIDPROP_IMAGE_PREFERRED_SIZE,NM_VIDEO_SMALL); <br>pVidChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_AUTO_SIZE,100); <br>pVidChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_TOP_MOST,1); <br>pVidChannel-&gt;SetProperty(NM_VIDPROP_WINDOW_VISIBLE,1); <br> <br>// if video channel is incoming, be sure to not pause by default <br>if (pVidChannel-&gt;IsIncoming()==S_OK) <br>pVidChannel-&gt;SetProperty(NM_VIDPROP_PAUSE,0); <br> <br>pVidChannel-&gt;Release(); <br>} <br>} <br>} <br> <br>pChannel-&gt;Release(); <br> <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember * pMember) <br>// <br>// This function gets called when a member as changed <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember * pMember) <br>{ <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::NmUI(CONFN uNotify) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::NmUI(CONFN uNotify) <br>{ <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT STDMETHODCALLTYPE CConfNotify::StateChanged(NM_CONFERENCE_STATE uState) <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CConfNotify::StateChanged(NM_CONFERENCE_STATE uState) <br>{ <br>// Notify my Conf object that the remote hungup. <br>if (uState==NM_CONFERENCE_IDLE) <br>m_pConf-&gt;RemoteHungup(); <br> <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

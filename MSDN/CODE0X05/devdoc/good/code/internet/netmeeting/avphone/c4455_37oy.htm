<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4462"></a>CONF.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     AVPHONE.EXE      <br>//  File:       CONF.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS Conf <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Construction/Destruction <br>// <br>//**************************************************************************** <br> <br>Conf::Conf(HWND hWnd) <br>{ <br>// Create Sink Objects. <br>// During construction, AddRef occurs <br>m_pMgrNotify = new CMgrNotify(this);   <br>m_pCallNotify = new CCallNotify(this); <br>m_pConfNotify = new CConfNotify(this); <br> <br>// Initialize other member variables <br>m_pINmMgr=NULL; <br>m_pINmConf=NULL; <br>m_pINmCall=NULL; <br>m_bInConnection=FALSE; <br>m_hWnd=hWnd; <br>} <br> <br>Conf::~Conf() <br>{ <br>//clean up the notification sink objects <br>m_pMgrNotify-&gt;Release();   <br>m_pCallNotify-&gt;Release(); <br>m_pConfNotify-&gt;Release(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::Initialize() <br>// <br>// Initiate NetMeeting, obtain a pointer to INmManager, connect the MgrNotify  <br>// sink object and initialize INmManager. <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::Initialize() <br>{ <br>HRESULT hr=S_OK; <br> <br>if (FAILED(CoCreateInstance(CLSID_NmManager,NULL,CLSCTX_INPROC_SERVER,IID_INmManager,(VOID **)&amp;m_pINmMgr))) <br>return E_FAIL; <br> <br>ULONG uOptions = NM_INIT_CONTROL; // Don't display the NetMeeting UI <br>ULONG uCaps = NMCH_AUDIO|NMCH_VIDEO; <br> <br>hr =m_pMgrNotify-&gt;Connect(m_pINmMgr); <br>if (SUCCEEDED (hr)) <br>hr=m_pINmMgr-&gt;Initialize(&amp;uOptions,&amp;uCaps); <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::Uninitialize() <br>// <br>// Disconnect MgrNotify sink object and release the interface INmManager  <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::Uninitialize() <br>{ <br> <br> <br>m_pMgrNotify-&gt;Disconnect(); <br>if (m_pINmMgr) <br>m_pINmMgr-&gt;Release(); <br> <br>return S_OK; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::Call(LPSTR szMachineName) <br>// <br>// This function initiates an AV conference to the remote machine specified  <br>// by szMachineName. <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::Call(LPSTR szMachineName) <br>{ <br>HRESULT hr = S_OK; <br>BSTRING bstrName(szMachineName); <br>hr = m_pINmMgr-&gt;CreateCall(&amp;m_pINmCall,NM_CALL_H323 ,NM_ADDR_MACHINENAME ,bstrName,NULL); <br> <br>if (FAILED(hr)) <br>{ <br>// Call object sometimes needs to be released. <br>if (m_pINmCall) <br>{ <br>m_pCallNotify-&gt;Disconnect(); <br>m_pINmCall-&gt;Release(); <br>} <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::HangUp() <br>// <br>// Leave the conference <br>// <br>//**************************************************************************** <br> <br> <br>HRESULT Conf::HangUp() <br>{ <br>HRESULT hr=S_OK; <br> <br>// if call hungup before Call accepted or rejected, release INmCall and  <br>// disconnect CallNotify sink <br>if (m_pINmCall) <br>{ <br>hr = m_pINmCall-&gt;Cancel(); <br>m_pCallNotify-&gt;Disconnect(); <br>m_pINmCall-&gt;Release(); <br>m_pINmCall=NULL; <br>} <br>else <br>if (m_pINmConf) <br>hr = m_pINmConf-&gt;Leave(); <br> <br> <br>// Release INmConf and disconnect the ConfNotify sink <br>if (m_pINmConf) <br>{ <br>m_pINmConf-&gt;Release(); <br>m_pINmConf=NULL; <br>m_pConfNotify-&gt;Disconnect(); <br>} <br> <br>m_bInConnection=FALSE; <br> <br>if (m_hWnd) <br>SendMessage(m_hWnd,WM_DISCONNECTED,0,0); <br> <br>return hr; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::CallCreated(INmCall * pCall) <br>// <br>// Callback from the MgrNotify sink object <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::CallCreated(INmCall * pCall) <br>{ <br>m_pINmCall = pCall; <br>m_pINmCall-&gt;AddRef(); <br>m_pCallNotify-&gt;Connect(pCall); <br>m_bInConnection=TRUE; <br> <br>if (m_hWnd) <br>SendMessage(m_hWnd,WM_CONNECTING,0,0); <br>return S_OK; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::AcceptCall() <br>// <br>// Accept the incoming call <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::AcceptCall() <br>{ <br>return m_pINmCall-&gt;Accept(); <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::RejectCall() <br>// <br>// Reject the incoming call <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::RejectCall()   <br>{ <br>return m_pINmCall-&gt;Reject(); <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::ConferenceCreated(INmConference *pINmConf) <br>// <br>// Callback from the MgrNotify sink object that a new conference has been  <br>// created <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::ConferenceCreated(INmConference *pINmConf) <br>{ <br>//Add Conference notification sink to handle channels. <br>m_pINmConf=pINmConf; <br>m_pINmConf-&gt;AddRef(); <br>m_pConfNotify-&gt;Connect(pINmConf); <br>m_bInConnection=TRUE; <br> <br>if (m_hWnd) <br>SendMessage(m_hWnd,WM_CONNECTED,0,0); <br>return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::CallAccepted()   <br>// <br>// Callback from the CallNotify sink object that the new call has been accepted <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::CallAccepted()   <br>{ <br>// Release INmCall, and let send window message that a user has connected <br>if (m_pINmCall) <br>m_pINmCall-&gt;Release(); <br> <br>m_pINmCall=NULL; <br>m_pCallNotify-&gt;Disconnect(); <br>m_bInConnection=TRUE; <br> <br>return S_OK; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::CallRejected()   <br>// <br>// Callback from the CallNotify sink object that the new call has been rejected <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::CallRejected()  <br>{ <br>// Release INmCall, INmConf, disconnect CallNotify and ConfNotify <br>// sink objects, and send message to main window that the user has  <br>// disconnected. <br> <br>if (m_pINmCall) <br>{ <br>m_pCallNotify-&gt;Disconnect(); <br>m_pINmCall-&gt;Release(); <br>m_pINmCall=NULL; <br>} <br> <br>if (m_pINmConf) <br>{ <br>m_pINmConf-&gt;Release(); <br>m_pINmConf=NULL; <br>} <br>m_pConfNotify-&gt;Disconnect(); <br>m_bInConnection=FALSE; <br> <br>if (m_hWnd) <br>SendMessage(m_hWnd,WM_DISCONNECTED,0,0); <br> <br>return S_OK; <br>} <br> <br>//**************************************************************************** <br>// <br>// HRESULT Conf::RemoteHungup() <br>// <br>// Callback from the ConfNotify sink object that a member has left the <br>// conference <br>// <br>//**************************************************************************** <br> <br>HRESULT Conf::RemoteHungup() <br>{ <br> <br>// Release INmConf, disconnect ConfNotify sink object, and send message to  <br>// main window that the remote node has disconnected. <br> <br>m_pINmConf-&gt;Release(); <br>m_pINmConf=NULL; <br>m_pConfNotify-&gt;Disconnect(); <br>m_bInConnection=FALSE; <br> <br>if (m_hWnd) <br>SendMessage(m_hWnd,WM_DISCONNECTED,0,0); <br> <br>return S_OK; <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL Conf::InConference() <br>// <br>//**************************************************************************** <br> <br>BOOL Conf::InConnection() <br>{ <br>return m_bInConnection; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLUTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4458"></a>CLUTIL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     AVPHONE.EXE      <br>//  File:       CLUTIL.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1995-1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS RefCount <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>RefCount::RefCount(void) <br>{ <br>m_cRef = 1; <br>} <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>RefCount::~RefCount(void) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// ULONG STDMETHODCALLTYPE RefCount::AddRef(void) <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE RefCount::AddRef(void) <br>{ <br>   ASSERT(m_cRef &gt;= 0); <br> <br>   InterlockedIncrement(&amp;m_cRef); <br> <br>   return (ULONG) m_cRef; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// ULONG STDMETHODCALLTYPE RefCount::Release(void) <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE RefCount::Release(void) <br>{ <br>if (0 == InterlockedDecrement(&amp;m_cRef)) <br>{ <br>delete this; <br>return 0; <br>} <br> <br>ASSERT(m_cRef &gt; 0); <br>return (ULONG) m_cRef; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CNotify <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CNotify::CNotify() : <br>m_pcnpcnt(NULL), <br>    m_pcnp(NULL), <br>    m_dwCookie(0), <br>    m_pUnk(NULL) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// destructor <br>// <br>//**************************************************************************** <br> <br>CNotify::~CNotify() <br>{ <br>Disconnect(); // Make sure we're disconnected <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CNotify::Connect(IUnknown *pUnk, REFIID riid, IUnknown *pUnkN) <br>// <br>// Connects the sink to the container <br>// <br>//**************************************************************************** <br> <br>HRESULT CNotify::Connect(IUnknown *pUnk, REFIID riid, IUnknown *pUnkN) <br>{ <br>HRESULT hr; <br> <br>ASSERT(0 == m_dwCookie); <br> <br>// Get the connection container <br>hr = pUnk-&gt;QueryInterface(IID_IConnectionPointContainer, (void **)&amp;m_pcnpcnt); <br>if (SUCCEEDED(hr)) <br>{ <br>// Find an appropriate connection point <br>hr = m_pcnpcnt-&gt;FindConnectionPoint(riid, &amp;m_pcnp); <br>if (SUCCEEDED(hr)) <br>{ <br>ASSERT(NULL != m_pcnp); <br>// Connect the sink object <br>hr = m_pcnp-&gt;Advise((IUnknown *)pUnkN, &amp;m_dwCookie); <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>m_dwCookie = 0; <br>} <br>else <br>{ <br>    m_pUnk = pUnk; // keep around for caller <br>    } <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CNotify::Disconnect (void) <br>// <br>// Disconnects the sink from the container <br>// <br>//**************************************************************************** <br> <br>HRESULT CNotify::Disconnect (void) <br>{ <br>    if (0 != m_dwCookie) <br>    { <br> <br>        // Disconnect the sink object <br>        m_pcnp-&gt;Unadvise(m_dwCookie); <br>        m_dwCookie = 0; <br> <br>        m_pcnp-&gt;Release(); <br>        m_pcnp = NULL; <br> <br>        m_pcnpcnt-&gt;Release(); <br>        m_pcnpcnt = NULL; <br> <br>        m_pUnk = NULL; <br>    } <br> <br>    return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BSTRING <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>// We don't support construction from an ANSI string in the Unicode build. <br>#if !defined(UNICODE) <br> <br>BSTRING::BSTRING(LPCSTR lpcString) <br>{ <br>m_bstr = NULL; <br> <br>// Compute the length of the required BSTR, including the null <br>int cWC =  MultiByteToWideChar(CP_ACP, 0, lpcString, -1, NULL, 0); <br>if (cWC &lt;= 0) <br>return; <br> <br>// Allocate the BSTR, including the null <br>m_bstr = SysAllocStringLen(NULL, cWC - 1); // SysAllocStringLen adds another 1 <br> <br>ASSERT(NULL != m_bstr); <br>if (NULL == m_bstr) <br>{ <br>return; <br>} <br> <br>// Copy the string <br>MultiByteToWideChar(CP_ACP, 0, lpcString, -1, (LPWSTR) m_bstr, cWC); <br> <br>// Verify that the string is null terminated <br>ASSERT(0 == m_bstr[cWC - 1]); <br>} <br> <br>#endif // !defined(UNICODE) <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BTSTR <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>BTSTR::BTSTR(BSTR bstr) <br>{ <br>m_psz = PszFromBstr(bstr); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>BTSTR::~BTSTR() <br>{ <br>if (NULL != m_psz) <br>LocalFree(m_psz); <br>} <br> <br>//**************************************************************************** <br>// <br>// LPTSTR PszFromBstr(BSTR bstr) <br>// <br>// Converts a BSTR to a LPSTR <br>// <br>//**************************************************************************** <br> <br>LPTSTR PszFromBstr(BSTR bstr) <br>{ <br>if (NULL == bstr) <br>return NULL; <br>int cch =  WideCharToMultiByte(CP_ACP, 0, (LPWSTR)bstr, -1, NULL, 0, NULL, NULL); <br>if (cch &lt;= 0) <br>return NULL; <br> <br>LPTSTR psz = (char *)LocalAlloc(LPTR,cch); <br>if (NULL == psz) <br>return NULL; <br> <br>WideCharToMultiByte(CP_ACP, 0, (LPWSTR)bstr, -1, psz, cch+1, NULL, NULL); <br>return psz; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

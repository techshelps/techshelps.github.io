<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLUTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4494"></a>CLUTIL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMFT.EXE <br>//  File:       CLUTIL.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br> <br>#include "precomp.h" <br> <br>//**************************************************************************** <br>// <br>// CLASS RefCount <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>RefCount::RefCount(void) <br>{ <br>m_cRef = 1; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>RefCount::~RefCount(void) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE RefCount::AddRef(void) <br>{ <br>   ASSERT(m_cRef &gt;= 0); <br> <br>   InterlockedIncrement(&amp;m_cRef); <br> <br>   return (ULONG) m_cRef; <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE RefCount::Release(void) <br>{ <br>if (0 == InterlockedDecrement(&amp;m_cRef)) <br>{ <br>delete this; <br>return 0; <br>} <br> <br>ASSERT(m_cRef &gt; 0); <br>return (ULONG) m_cRef; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CNotify::CNotify() : <br>m_pcnpcnt(NULL), <br>    m_pcnp(NULL), <br>    m_dwCookie(0), <br>    m_pUnk(NULL) <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>CNotify::~CNotify() <br>{ <br>Disconnect(); // Make sure we're disconnected <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CNotify::Connect(IUnknown *pUnk, REFIID riid, IUnknown *pUnkN) <br>// <br>//**************************************************************************** <br> <br>HRESULT CNotify::Connect(IUnknown *pUnk, REFIID riid, IUnknown *pUnkN) <br>{ <br>HRESULT hr; <br> <br>ASSERT(0 == m_dwCookie); <br> <br>// Get the connection container <br>hr = pUnk-&gt;QueryInterface(IID_IConnectionPointContainer, (void **)&amp;m_pcnpcnt); <br>if (SUCCEEDED(hr)) <br>{ <br>// Find an appropriate connection point <br>hr = m_pcnpcnt-&gt;FindConnectionPoint(riid, &amp;m_pcnp); <br>if (SUCCEEDED(hr)) <br>{ <br>ASSERT(NULL != m_pcnp); <br>// Connect the sink object <br>hr = m_pcnp-&gt;Advise((IUnknown *)pUnkN, &amp;m_dwCookie); <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>m_dwCookie = 0; <br>} <br>else <br>{ <br>    m_pUnk = pUnk; // keep around for caller <br>    } <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT CNotify::Disconnect (void) <br>// <br>//**************************************************************************** <br> <br>HRESULT CNotify::Disconnect (void) <br>{ <br>    if (0 != m_dwCookie) <br>    { <br>        // Disconnect the sink object <br>        m_pcnp-&gt;Unadvise(m_dwCookie); <br>        m_dwCookie = 0; <br> <br>        m_pcnp-&gt;Release(); <br>        m_pcnp = NULL; <br> <br>        m_pcnpcnt-&gt;Release(); <br>        m_pcnpcnt = NULL; <br> <br>        m_pUnk = NULL; <br>    } <br> <br>    return S_OK; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS COBLIST <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>COBLIST::~COBLIST() <br>{ <br>    ASSERT(IsEmpty()); <br>} <br> <br> <br>#ifdef DEBUG <br>VOID* COBLIST::GetHead() <br>{ <br>ASSERT(m_pHead); <br> <br>return m_pHead-&gt;pItem; <br>} <br>    <br>VOID* COBLIST::GetTail() <br>{ <br>ASSERT(m_pTail); <br> <br>return m_pTail-&gt;pItem; <br>} <br>#endif /* DEBUG */ <br> <br> <br>//**************************************************************************** <br>// <br>// VOID* COBLIST::GetNext(POSITION&amp; rPos) <br>// <br>//**************************************************************************** <br> <br>VOID* COBLIST::GetNext(POSITION&amp; rPos) <br>{ <br>ASSERT(rPos); <br> <br>VOID* pReturn = rPos-&gt;pItem; <br>rPos = rPos-&gt;pNext; <br> <br>return pReturn; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID* COBLIST::RemoveAt(POSITION Pos) <br>// <br>//**************************************************************************** <br> <br>VOID* COBLIST::RemoveAt(POSITION Pos) <br>{ <br>VOID* pReturn = NULL; <br> <br>if (m_pHead) <br>{ <br>if (m_pHead == Pos) <br>{ <br>// Removing the first element in the list <br> <br>m_pHead = Pos-&gt;pNext; <br>pReturn = Pos-&gt;pItem; <br>delete Pos; <br>m_cItem--; <br>ASSERT(0 &lt;= m_cItem); <br> <br>if (NULL == m_pHead) <br>{ <br>// Removing the only element! <br>m_pTail = NULL; <br>} <br>} <br>else <br>{ <br>POSITION pCur = m_pHead; <br> <br>while (pCur &amp;&amp; pCur-&gt;pNext) <br>{ <br>if (pCur-&gt;pNext == Pos) <br>{ <br>// Removing  <br> <br>pCur-&gt;pNext = Pos-&gt;pNext; <br>if (m_pTail == Pos) <br>{ <br>m_pTail = pCur; <br>} <br>pReturn = Pos-&gt;pItem; <br>delete Pos; <br> <br>m_cItem--; <br>ASSERT(0 &lt;= m_cItem); <br>} <br> <br>pCur = pCur-&gt;pNext; <br>} <br>} <br>} <br> <br>return pReturn; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// POSITION COBLIST::AddTail(VOID* pItem) <br>// <br>//**************************************************************************** <br> <br>POSITION COBLIST::AddTail(VOID* pItem) <br>{ <br>POSITION posRet = NULL; <br> <br>if (m_pTail) <br>{ <br>if (m_pTail-&gt;pNext = new COBNODE) <br>{ <br>m_pTail = m_pTail-&gt;pNext; <br>m_pTail-&gt;pItem = pItem; <br>m_pTail-&gt;pNext = NULL; <br>m_cItem++; <br>} <br>} <br>else <br>{ <br>ASSERT(!m_pHead); <br>if (m_pHead = new COBNODE) <br>{ <br>m_pTail = m_pHead; <br>m_pTail-&gt;pItem = pItem; <br>m_pTail-&gt;pNext = NULL; <br>m_cItem++; <br>} <br>} <br> <br>return m_pTail; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void COBLIST::EmptyList() <br>// <br>//**************************************************************************** <br> <br>void COBLIST::EmptyList() <br>{ <br>    while (!IsEmpty()) { <br>        RemoveAt(GetHeadPosition()); <br>    } <br>} <br> <br> <br>#ifdef DEBUG <br>VOID* COBLIST::RemoveTail() <br>{ <br>ASSERT(m_pHead); <br>ASSERT(m_pTail); <br> <br>return RemoveAt(m_pTail); <br>} <br> <br>VOID* COBLIST::RemoveHead() <br>{ <br>ASSERT(m_pHead); <br>ASSERT(m_pTail); <br> <br>return RemoveAt(m_pHead); <br>} <br> <br>void * COBLIST::GetFromPosition(POSITION Pos) <br>{ <br>    void * Result = SafeGetFromPosition(Pos); <br>ASSERT(Result); <br>return Result; <br>} <br>#endif /* DEBUG */ <br> <br> <br>//**************************************************************************** <br>// <br>// POSITION COBLIST::GetPosition(void* _pItem) <br>// <br>//**************************************************************************** <br> <br>POSITION COBLIST::GetPosition(void* _pItem) <br>{ <br>    POSITION    Position = m_pHead; <br> <br>    while (Position) { <br>        if (Position-&gt;pItem == _pItem) { <br>            break; <br>        } <br>GetNext(Position); <br>    } <br>    return Position; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// POSITION COBLIST::Lookup(void* pComparator) <br>// <br>//**************************************************************************** <br> <br>POSITION COBLIST::Lookup(void* pComparator) <br>{ <br>    POSITION    Position = m_pHead; <br> <br>    while (Position) { <br>        if (Compare(Position-&gt;pItem, pComparator)) { <br>            break; <br>        } <br>GetNext(Position); <br>    } <br>    return Position; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// void * COBLIST::SafeGetFromPosition(POSITION Pos) <br>// <br>//**************************************************************************** <br> <br>void * COBLIST::SafeGetFromPosition(POSITION Pos) <br>{ <br>// Safe way to validate that an entry is still in the list, <br>// which ensures bugs that would reference deleted memory, <br>// reference a NULL pointer instead <br>// (e.g. an event handler fires late/twice). <br>// Note that versioning on entries would provide an additional  <br>// safeguard against re-use of a position. <br>// Walklist to find entry. <br> <br>POSITION PosWork = m_pHead; <br> <br>while (PosWork) { <br>if (PosWork == Pos) { <br>return Pos-&gt;pItem; <br>} <br>GetNext(PosWork); <br>} <br>return NULL; <br>} <br> <br>//**************************************************************************** <br>// <br>// COBLIST Utility routines <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// POSITION AddNode(PVOID pv, COBLIST ** ppList) <br>// <br>// Add a node to a list. <br>// Initializes the ObList, if necessary. <br>// Returns the position in the list or NULL if there was a problem. <br>// <br>//**************************************************************************** <br> <br>POSITION AddNode(PVOID pv, COBLIST ** ppList) <br>{ <br>ASSERT(NULL != ppList); <br>if (NULL == *ppList) <br>{ <br>*ppList = new COBLIST(); <br>if (NULL == *ppList) <br>return NULL; <br>} <br> <br>return (*ppList)-&gt;AddTail(pv); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// PVOID RemoveNode(POSITION * pPos, COBLIST *pList) <br>// <br>// Remove a node from a list. <br>// Sets pPos to NULL <br>// <br>//**************************************************************************** <br> <br>PVOID RemoveNode(POSITION * pPos, COBLIST *pList) <br>{ <br>if ((NULL == pList) || (NULL == pPos)) <br>return NULL; <br> <br>PVOID pv = pList-&gt;RemoveAt(*pPos); <br>*pPos = NULL; <br>return pv; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BSTRING <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>// We don't support construction from an ANSI string in the Unicode build. <br>// <br>//**************************************************************************** <br> <br>#if !defined(UNICODE) <br> <br>BSTRING::BSTRING(LPCSTR lpcString) <br>{ <br>m_bstr = NULL; <br> <br>// Compute the length of the required BSTR, including the null <br>int cWC =  MultiByteToWideChar(CP_ACP, 0, lpcString, -1, NULL, 0); <br>if (cWC &lt;= 0) <br>return; <br> <br>// Allocate the BSTR, including the null <br>m_bstr = SysAllocStringLen(NULL, cWC - 1); // SysAllocStringLen adds another 1 <br> <br>ASSERT(NULL != m_bstr); <br>if (NULL == m_bstr) <br>{ <br>return; <br>} <br> <br>// Copy the string <br>MultiByteToWideChar(CP_ACP, 0, lpcString, -1, (LPWSTR) m_bstr, cWC); <br> <br>// Verify that the string is null terminated <br>ASSERT(0 == m_bstr[cWC - 1]); <br>} <br> <br>#endif // !defined(UNICODE) <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS BTSTR <br>// <br>//**************************************************************************** <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>BTSTR::BTSTR(BSTR bstr) <br>{ <br>m_psz = PszFromBstr(bstr); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>BTSTR::~BTSTR() <br>{ <br>if (NULL != m_psz) <br>LocalFree(m_psz); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPTSTR PszFromBstr(BSTR bstr) <br>// <br>// Converts a BSTR to a LPSTR <br>// <br>//**************************************************************************** <br> <br>LPTSTR PszFromBstr(BSTR bstr) <br>{ <br>if (NULL == bstr) <br>return NULL; <br>int cch =  WideCharToMultiByte(CP_ACP, 0, (LPWSTR)bstr, -1, NULL, 0, NULL, NULL); <br>if (cch &lt;= 0) <br>return NULL; <br> <br>LPTSTR psz = PszAlloc(cch); <br>if (NULL == psz) <br>return NULL; <br> <br>WideCharToMultiByte(CP_ACP, 0, (LPWSTR)bstr, -1, psz, cch+1, NULL, NULL); <br>return psz; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

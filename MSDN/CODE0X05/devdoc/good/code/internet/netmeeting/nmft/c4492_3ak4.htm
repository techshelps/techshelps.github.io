<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4504"></a>UTIL.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMFT.EXE <br>//  File:       UTIL.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>static TCHAR _szFilter[] = TEXT("All Files\0*.*\0Text Files (*.txt)\0*.TXT\0"); <br>static TCHAR _szPickMsg[] = TEXT("Select a file to send"); <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FGetFileName(LPTSTR szFileName) <br>// <br>//**************************************************************************** <br> <br>BOOL FGetFileName(LPTSTR szFileName) <br>{ <br>OPENFILENAME ofn; <br> <br>SetEmptySz(szFileName); <br>ClearStruct(&amp;ofn); <br> <br>ofn.lStructSize   = sizeof(OPENFILENAME); <br>ofn.hwndOwner     = ghwndMain; <br>ofn.hInstance     = (HINSTANCE) ghInst; <br>ofn.lpstrFilter   = _szFilter; <br>ofn.nFilterIndex  = 1L; <br>ofn.lpstrFile     = (LPSTR) szFileName; <br>ofn.nMaxFile      = MAX_PATH; // really CCHMAX(szFileName) <br>ofn.lpstrTitle    = _szPickMsg; <br>ofn.lpstrInitialDir = NULL; <br>ofn.Flags = OFN_HIDEREADONLY | OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_EXPLORER; <br> <br>return GetOpenFileName(&amp;ofn); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FFileExists(LPCTSTR szFile) <br>// <br>//**************************************************************************** <br> <br>BOOL FFileExists(LPCTSTR szFile) <br>{ <br>HANDLE hFile; <br> <br>if ((NULL == szFile) || (_T('\0') == *szFile)) <br>return FALSE; <br> <br>UINT uErrorMode = SetErrorMode(SEM_NOOPENFILEERRORBOX | SEM_FAILCRITICALERRORS); <br>hFile = CreateFile(szFile, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, <br>NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL); <br>SetErrorMode(uErrorMode); // Restore error mode <br> <br>if (hFile == INVALID_HANDLE_VALUE) <br>return FALSE; <br> <br>CloseHandle(hFile); <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPVOID LpvAlloc(int cb) <br>// <br>// Return a pointer to an allocated array of bytes <br>// <br>//**************************************************************************** <br> <br>LPVOID LpvAlloc(int cb) <br>{ <br>return LocalAlloc(LMEM_FIXED, cb); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPTSTR PszAlloc(int cch) <br>// <br>//**************************************************************************** <br> <br>LPTSTR PszAlloc(int cch) <br>{ <br>return (LPTSTR) LocalAlloc(LMEM_FIXED, sizeof(TCHAR) * (cch+1)); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreePlpv(LPVOID plpv) <br>// <br>// Free the data pointed to by plpv and set *plpv to NULL <br>// <br>//**************************************************************************** <br> <br>VOID FreePlpv(LPVOID plpv) <br>{ <br>if ((plpv == NULL) || (*(VOID FAR * FAR *)plpv == NULL)) { <br>return; <br>} <br> <br>LocalFree(*(VOID FAR * FAR *)plpv); <br>*(VOID FAR * FAR *)plpv = NULL; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// LPCTSTR StrChr(LPCTSTR pcsz, TCHAR ch) <br>// <br>//**************************************************************************** <br> <br>LPCTSTR StrChr(LPCTSTR pcsz, TCHAR ch) <br>{ <br>    LPCTSTR pcszFound = NULL; <br> <br>    if (pcsz) <br>    { <br>        while (*pcsz) <br>        { <br>            if (*pcsz == ch) <br>            { <br>                pcszFound = pcsz; <br>                break; <br>            } <br> <br>            pcsz = CharNext(pcsz); <br>        } <br>    } <br> <br>    return pcszFound; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

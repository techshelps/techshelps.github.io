<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCONF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4502"></a>CCONF.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMFT.EXE <br>//  File:       CCONF.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br>// Global Varaiables <br>INmManager    * g_pMgr  = NULL;         // The Conference Manager <br>INmConference * g_pConference = NULL;   // The Current Conference <br>INmChannelFt  * g_pChannelFt = NULL;    // The File Transfer Channel <br>CFtNotify     * g_pNotifyFt = NULL;     // The File Transfer Notify Hook <br>INmMember     * g_pMember = NULL;       // The destination <br>INmFt         * g_pFt = NULL;           // The File Transfer Object <br> <br> <br>// Local Application Guid : {3582DED0-9CCF-11d0-8B26-00A0C91BC90E} <br>const GUID g_guidApp =  <br>{0x3582ded0, 0x9ccf, 0x11d0, { 0x8b, 0x26, 0x0, 0xa0, 0xc9, 0x1b, 0xc9, 0xe} }; <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT InitConfMgr(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT InitConfMgr(void) <br>{ <br>HRESULT hr; <br>LPCLASSFACTORY pcf; <br> <br>// Notify the system we want to use the conferencing services <br>// by creating a conference manager object <br>hr = CoGetClassObject(CLSID_NmManager, CLSCTX_INPROC, <br>              NULL, IID_IClassFactory, (void**)&amp;pcf); <br>if (SUCCEEDED(hr)) <br>{ <br>// Get the conference manager object <br>hr = pcf-&gt;CreateInstance(NULL, IID_INmManager, (void**)&amp;g_pMgr); <br>if (SUCCEEDED(hr)) <br>{ <br>ULONG uchCaps = NMCH_ALL; <br>ULONG uOptions = 0; <br>hr = g_pMgr-&gt;Initialize(&amp;uOptions, &amp;uchCaps); <br>} <br> <br>pcf-&gt;Release(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT GetActiveConference(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT GetActiveConference(void) <br>{ <br>HRESULT hr; <br>IEnumNmConference * pEnum; <br> <br>if (NULL == g_pMgr) <br>{ <br>return E_FAIL; <br>} <br> <br>hr = g_pMgr-&gt;EnumConference(&amp;pEnum); <br>if (SUCCEEDED(hr)) <br>{ <br>hr = pEnum-&gt;Next(1, &amp;g_pConference, NULL); <br>if (S_OK == hr) <br>{ <br>NM_CONFERENCE_STATE confState; <br>hr = g_pConference-&gt;GetState(&amp;confState); <br>if (SUCCEEDED(hr)) <br>{ <br>hr = (NM_CONFERENCE_ACTIVE == confState) ? S_OK : S_FALSE; <br>} <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeFtChannel(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeFtChannel(void) <br>{ <br>if (NULL != g_pFt) <br>{ <br>g_pFt-&gt;Release(); <br>g_pFt = NULL; <br>} <br> <br>// Release all notify <br>if (NULL != g_pNotifyFt) <br>{ <br>g_pNotifyFt-&gt;Disconnect(); <br>g_pNotifyFt-&gt;Release(); <br>g_pNotifyFt = NULL; <br>} <br> <br>if (NULL != g_pChannelFt) <br>{ <br>g_pChannelFt-&gt;Release(); <br>g_pChannelFt = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT GetFtChannel(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT GetFtChannel(void) <br>{ <br>HRESULT hr; <br>BOOL  fFound; <br>ULONG nmch; <br>INmChannel * pChannel; <br>IEnumNmChannel * pEnum; <br> <br>if (NULL == g_pConference) <br>{ <br>return E_FAIL; <br>} <br> <br>// TODO: Check if active and in data conference <br> <br>fFound = FALSE; <br> <br>hr = g_pConference-&gt;EnumChannel(&amp;pEnum); <br>if (SUCCEEDED(hr)) <br>{ <br>while ((S_OK == hr) &amp;&amp; !fFound) <br>{ <br>hr = pEnum-&gt;Next(1, &amp;pChannel, NULL); <br>if (S_OK != hr) <br>break; <br>hr = pChannel-&gt;GetNmch(&amp;nmch); <br>if ((S_OK == hr) &amp;&amp; (NMCH_FT == nmch)) <br>{ <br>hr = pChannel-&gt;QueryInterface(IID_INmChannelFt, (PVOID *) &amp;g_pChannelFt); <br>fFound = (S_OK == hr); <br>} <br>pChannel-&gt;Release(); <br>} <br> <br>pEnum-&gt;Release(); <br>} <br> <br>return fFound ? S_OK : hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT HookFtChannel(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT HookFtChannel(void) <br>{ <br>HRESULT hr; <br>CFtNotify * pNotify; <br> <br>ASSERT(NULL != g_pChannelFt); <br> <br>    // Connect to the channel object <br>    pNotify = new CFtNotify(); <br>    if (pNotify == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    else <br>    { <br>hr = pNotify-&gt;Connect(g_pChannelFt); <br>if (SUCCEEDED(hr)) <br>{ <br>g_pNotifyFt = pNotify; <br>} <br>} <br> <br>if (FAILED(hr)) <br>{ <br>FreeFtChannel(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// HRESULT SendFile(void) <br>// <br>//**************************************************************************** <br> <br>HRESULT SendFile(void) <br>{ <br>HRESULT hr; <br>if (NULL == g_pChannelFt) <br>{ <br>return E_FAIL; <br>} <br> <br>BSTRING bstrFile(g_szFile); <br>hr = g_pChannelFt-&gt;SendFile(&amp;g_pFt, g_pMember, bstrFile, 0); <br>return hr; <br>} <br> <br> <br>HWND ghwndProgress = NULL; <br> <br>VOID UpdateProgress(CONFN uNotify) <br>{ <br>HRESULT hr; <br> <br>if ((NULL == g_pFt) || (NULL == ghwndMain)) <br>{ <br>return; <br>} <br> <br>NM_FT_STATE uState; <br>hr = g_pFt-&gt;GetState(&amp;uState); <br> <br> <br>switch (uNotify) <br>{ <br>case CONFN_FT_STARTED: <br>{ <br>TCHAR szFmt[MAX_PATH]; <br>TCHAR szMsg[MAX_PATH]; <br> <br>// Fill out "Sending &lt;filename&gt;" <br>GetDlgItemText(ghwndMain, IDE_SEND, szFmt, MAX_PATH); <br>wsprintf(szMsg, szFmt, g_szFile); <br>SetDlgItemText(ghwndMain, IDE_SEND, szMsg); <br> <br>ULONG uBytes; <br>if (FAILED(g_pFt-&gt;GetSize(&amp;uBytes))) <br>uBytes = 0; <br> <br>// Fill out "to &lt;user&gt; (x bytes)" <br>GetDlgItemText(ghwndMain, IDE_DEST, szFmt, MAX_PATH); <br> <br>SetDlgItemText(ghwndMain, IDE_DEST, szMsg); <br> <br>ghwndProgress = GetDlgItem(ghwndMain, IDC_PROGRESS); <br>ASSERT(NULL != ghwndProgress); <br> <br>SendMessage(ghwndProgress, PBM_SETPOS, 0, 0); <br>ShowWindow(ghwndMain, SW_SHOW); <br>SetFocus(GetDlgItem(ghwndMain, IDCANCEL)); <br>break; <br>} <br> <br>case CONFN_FT_PROGRESS: <br>{ <br>ULONG uPercent; <br>ULONG uBytesCurr; <br>ULONG uBytesTotal; <br> <br>if (FAILED(g_pFt-&gt;GetBytesTransferred(&amp;uBytesCurr)) || <br>FAILED(g_pFt-&gt;GetSize(&amp;uBytesTotal))) <br>{ <br>return; <br>} <br> <br>if (0 == uBytesTotal) <br>uPercent = 100; <br>else <br>uPercent = uBytesCurr * 100 / uBytesTotal; <br> <br>SendMessage(ghwndProgress, PBM_SETPOS, uPercent, 0); <br>break; <br>} <br> <br>case CONFN_FT_COMPLETE: <br>case CONFN_FT_CANCELED: <br>{ <br>SetDlgItemText(ghwndMain, IDCANCEL, TEXT("Close")); <br>break; <br>} <br> <br>default: <br>return; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// CLASS CNotify <br>// <br>//**************************************************************************** <br> <br> <br>//**************************************************************************** <br>// <br>// Constructor <br>// <br>//**************************************************************************** <br> <br>CFtNotify::CFtNotify() : RefCount(), CNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Destructor <br>// <br>//**************************************************************************** <br> <br>CFtNotify::~CFtNotify() <br>{ <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IUnknown <br>// <br>//**************************************************************************** <br> <br>ULONG STDMETHODCALLTYPE CFtNotify::AddRef(void) <br>{ <br>return RefCount::AddRef(); <br>} <br> <br> <br>ULONG STDMETHODCALLTYPE CFtNotify::Release(void) <br>{ <br>return RefCount::Release(); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::QueryInterface(REFIID riid, PVOID *ppvObject) <br>{ <br>HRESULT hr = S_OK; <br> <br>if (riid == IID_IUnknown) <br>{ <br>*ppvObject = (IUnknown *)this; <br>} <br>else if (riid == IID_INmChannelFtNotify) <br>{ <br>*ppvObject = (INmChannelFtNotify *)this; <br>} <br>else <br>{ <br>hr = E_NOINTERFACE; <br>*ppvObject = NULL; <br>} <br> <br>if (S_OK == hr) <br>{ <br>AddRef(); <br>} <br> <br>return hr; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from ICNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::Connect(IUnknown *pUnk) <br>{ <br>return CNotify::Connect(pUnk, IID_INmChannelFtNotify, (IUnknown *)this); <br>} <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::Disconnect(void) <br>{ <br>return CNotify::Disconnect(); <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// Methods from IConfNotify <br>// <br>//**************************************************************************** <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::NmUI(CONFN uNotify) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::MemberChanged(NM_MEMBER_NOTIFY uNotify, INmMember *pMember) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT STDMETHODCALLTYPE CFtNotify::FtUpdate(CONFN uNotify, INmFt * pFt) <br>{ <br>if (pFt == g_pFt) <br>{ <br>UpdateProgress(uNotify); <br>} <br> <br>return S_OK; <br>} <br> <br> <br> <br>//**************************************************************************** <br>// <br>// VOID FreeNmObjects(void) <br>// <br>//**************************************************************************** <br> <br>VOID FreeNmObjects(void) <br>{ <br>FreeFtChannel(); <br> <br>// Release conference <br>if (NULL != g_pConference) <br>{ <br>g_pConference-&gt;Release(); <br>g_pConference = NULL; <br>} <br> <br>// Release conference manager <br>if (NULL != g_pMgr) <br>{ <br>g_pMgr-&gt;Release(); <br>g_pMgr = NULL; <br>} <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitNm(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FInitNm(void) <br>{ <br>if (S_OK != InitConfMgr()) <br>return FALSE; <br> <br>if (S_OK != GetActiveConference()) <br>return FALSE; <br> <br>if (S_OK != GetFtChannel()) <br>return FALSE; <br> <br>if (S_OK != HookFtChannel()) <br>return FALSE; <br> <br>return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4499"></a>MAIN.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:     NMFT.EXE <br>//  File:       MAIN.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include "precomp.h" <br> <br> <br>//**************************************************************************** <br>// <br>// Global variables. <br>// <br>//**************************************************************************** <br> <br>HINSTANCE ghInst        = NULL;   // Current Instance <br>HWND      ghwndMain     = NULL;   // Main Window <br>BOOL      g_fQuiet      = FALSE;  //  <br>TCHAR     g_szFile[MAX_PATH];     // <br> <br>CONST TCHAR g_szAppClassName[] = TEXT("NMFT Dialog"); <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL ParseCmdLine(void) <br>// <br>//**************************************************************************** <br> <br>BOOL ParseCmdLine(void) <br>{ <br>LPTSTR pch = ::GetCommandLine(); <br>if (NULL == pch) <br>return FALSE; <br> <br>// Work on a copy of the buffer <br>TCHAR sz[MAX_PATH*2]; <br>lstrcpyn(sz, pch, CCHMAX(sz)); <br>pch = sz; <br> <br>BOOL fInStr = FALSE; <br>BOOL fInName = FALSE; <br>BOOL fInApp = TRUE; <br>TCHAR ch; <br>LPTSTR lpsz = NULL; <br> <br>// walk through the command line, parsing filenames and options <br>while (_T('\0') != (ch = *pch)) <br>{ <br>switch (ch) <br>{ <br>case _T('\"'):      // Double quoted filename <br>fInStr = !fInStr; <br>if (fInStr) <br>{ <br> lpsz = CharNext(pch); <br> break; <br> } <br> <br>case _T(' '):       // Space usually terminates a filename <br>if (fInStr)  // except in a long filename <br>break; <br> <br>case _T('\0'): <br>if (fInApp) <br>{ <br>// Skip the application name (first string on command line) <br>fInApp = FALSE; <br>fInName = FALSE; <br> lpsz = CharNext(pch); <br>break; <br>} <br> <br>if (!fInName) <br>{ <br> lpsz = CharNext(pch); <br>break; // ignore extra whitespace <br>} <br> <br>{ <br>LPTSTR pchT = CharNext(pch); <br>*pch = _T('\0'); // null terminate string <br>fInName = FALSE; <br>pch = pchT; <br>continue; // continue loop <br>} <br>break; <br> <br>case _T('/'):      // Command line option <br>{ <br>if (fInName || fInStr) <br>break; <br> <br>pch = CharNext(pch); <br>ch = *pch; <br>if (_T('\0') == ch) <br>return FALSE; <br> <br>if ((_T('Q') == ch) || (_T('q') == ch)) <br>{ <br>g_fQuiet = TRUE; <br>} <br>// TODO: other options <br> <br> break; <br>} <br> <br>default:        // Normal character <br>fInName = TRUE; <br>break; <br>} /* switch (ch) */ <br> <br>pch = CharNext(pch); <br>} <br> <br>if ((NULL == lpsz) || (_T('\0') == *lpsz)) <br>return FALSE; <br> <br>lstrcpyn(g_szFile, lpsz, MAX_PATH); <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FVerifyFile(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FVerifyFile(void) <br>{ <br>// Check if filename was specified on command line <br>if (ParseCmdLine()) <br>return TRUE; <br> <br>// Prompt the user to select a file <br>if (FGetFileName(g_szFile)) <br>return TRUE; <br> <br>return FALSE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// BOOL FInitMain(void) <br>// <br>//**************************************************************************** <br> <br>BOOL FInitMain(void) <br>{ <br>TCHAR szTitle[MAX_PATH]; <br>WNDCLASS  wc; <br> <br>ASSERT(NULL != ghInst); <br> <br>LoadString(ghInst, IDS_APP_TITLE, szTitle, CCHMAX(szTitle)); <br> <br>ClearStruct(&amp;wc); <br> <br>wc.style         = CS_HREDRAW | CS_VREDRAW; <br>wc.lpfnWndProc   = (WNDPROC)WndProc; <br>wc.cbClsExtra    = 0; <br>wc.cbWndExtra    = DLGWINDOWEXTRA; <br>wc.hInstance     = ghInst; <br>wc.hIcon         = LoadIcon(ghInst, MAKEINTRESOURCE(ICO_MAIN)); <br>wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>wc.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1); <br>wc.lpszMenuName  = MAKEINTRESOURCE(IDM_APP); <br>wc.lpszClassName = g_szAppClassName; <br> <br>// Register the window class and return FALSE if unsuccesful. <br>if (!RegisterClass(&amp;wc)) <br>return FALSE; <br> <br>ghwndMain = CreateDialog(ghInst, MAKEINTRESOURCE(IDD_PROGRESS), 0, NULL); <br> <br>if (NULL == ghwndMain) <br>return FALSE; <br> <br>if (!FInitNm()) <br>{ <br>// TODO: Display error message <br>// Unable to initialize, no conference, etc. <br>return FALSE; <br>} <br> <br>if (!FVerifyFile()) <br>return FALSE; <br> <br>LPTSTR pszFile; <br>GetFullPathName(g_szFile, MAX_PATH, g_szFile, &amp;pszFile); <br> <br>if (!FFileExists(g_szFile)) <br>{ <br>TCHAR szMsg[MAX_PATH*2]; <br>wsprintf(szMsg, TEXT("Unable to send the file\r\n%s"), g_szFile); <br>MessageBox(NULL, szMsg, TEXT("NmFt Error"), MB_OK | MB_ICONSTOP); <br>return FALSE; <br>} <br> <br>if (FAILED(SendFile())) <br>return FALSE; <br> <br>return TRUE; <br>} <br> <br> <br>//**************************************************************************** <br>// <br>// int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow) <br>// <br>// Main Windows entrypoint <br>// <br>//**************************************************************************** <br> <br>#ifdef _DEBUG <br>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow) <br>#else  // _DEBUG <br>int __cdecl main() <br>#endif // _DEBUG <br>{ <br>#ifdef _DEBUG <br>ghInst = hInstance; <br>#else <br>ghInst = ::GetModuleHandle(NULL); <br>#endif // ! _DEBUG <br> <br>InitCommonControls(); <br> <br> if (FAILED(CoInitialize(NULL))) <br>return 0; <br> <br>if (FInitMain() &amp;&amp; !g_fQuiet) <br>{ <br>MSG  msg; <br>while (GetMessage(&amp;msg, NULL, 0, 0)) <br>{ <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>} <br>} <br> <br>FreeNmObjects(); <br>    CoUninitialize(); <br> <br>#ifndef DEBUG <br>ExitProcess(0); <br>#endif <br> <br>return 0; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

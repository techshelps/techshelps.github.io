<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSTCODC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4471"></a>INSTCODC.CPP</h2>
<pre><code>//**************************************************************************** <br>//  Module:      INSTCODC.EXE <br>//  File:        INSTCODC.CPP <br>//  Content:     <br>//               <br>// <br>//  Copyright (c) Microsoft Corporation 1997 <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//**************************************************************************** <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;objbase.h&gt; <br>#include &lt;initguid.h&gt; <br> <br>#include "resource.h" <br>#include "codecs.h" <br> <br> <br>typedef enum {AUDIOCODEC, NONE} CODECTYPE; <br> <br>//******************* <br>//GLOBALS <br>//******************* <br> <br>const int MID_SZ = 128; <br>CODECTYPE gtCodec = AUDIOCODEC;  // Global depicting type of codec being displayed, installed, <br> // removed, or reordered. <br> <br>HINSTANCE ghInstance; <br> <br>//Structures used for adding and removing codecs <br>WAVEFORMATEX *gpWFmt; <br>AUDCAP_INFO gWInfo; <br> <br> <br>//CAP_INFO lists  <br>AUDCAP_INFO_LIST *gpsAudCapInfoList = NULL;  // Contains a list of the installed <br> // audio codecs and their properties. <br>int *gpnAudCapOrderedIndex = NULL; // Contains, in installed order, indexes <br> // of the structures in the AUDCAP_INFO_LIST. <br> <br>  <br>//******************* <br>//GLOBAL Interfaces <br>//******************* <br> <br>static IInstallAudioCodecs *pAudio=NULL; <br>  <br>//******************* <br>//MAIN UI FUNCTIONS <br>//******************* <br> <br>LRESULT CALLBACK MainUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam); <br>LRESULT CALLBACK ReorderUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam); <br>BOOL InitAppInstance (HINSTANCE hInstance); <br>void DeinitAppInstance(HINSTANCE hInstance); <br> <br>//******************* <br>//Misc. Functions <br>//******************* <br> <br>void LoadInstalledCodecs(void); <br>void IndexInstalledCodecs(void); <br>void UpdateCapInfoListsFromIndex(void); <br>void DlgDisplayInstalledCodecs(HWND); <br> <br>//******************* <br>//helper function  converts HRESULT to error message <br>//******************* <br> <br>TCHAR gszHRError[MID_SZ]; <br>inline void HRErrorToString(HRESULT hr) <br>{ <br>FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,NULL,(DWORD)hr,LANG_SYSTEM_DEFAULT,gszHRError,200,NULL); <br>} <br> <br> <br> <br> <br>//**************************************************************************** <br>// <br>//    FUNCTION: WinMain(HANDLE, HANDLE, LPSTR, int) <br>// <br>//    PURPOSE: calls initialization function <br>// <br>//    COMMENTS: <br>// <br>//        Windows recognizes this function by name as the initial entry point  <br>//        for the program.  This function calls the application initialization  <br>//        routine.   <br>// <br>//**************************************************************************** <br> <br> <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>LPSTR lpszCmdLine, int nCmdShow) <br>{  <br>BOOL fProcessed=InitAppInstance(hInstance); <br>DeinitAppInstance(hInstance); <br>return fProcessed; <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL InitAppInstance (HINSTANCE hInstance) <br>// <br>// This function initializes this instance of the application. <br>// <br>//**************************************************************************** <br> <br>BOOL InitAppInstance (HINSTANCE hInstance) <br>{ <br>WNDCLASS wc; <br> <br>ghInstance=hInstance; <br> <br>//Register WNDCLASS for the app. <br> <br>//This class enables the main dialog box to have additional properties  <br>//such as an icon. <br>    wc.style = CS_DBLCLKS | CS_SAVEBITS | CS_BYTEALIGNWINDOW; <br>    wc.lpfnWndProc = DefDlgProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = DLGWINDOWEXTRA; <br>    wc.hInstance = hInstance; <br>wc.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_INSTCODC)); <br>    wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); <br>    wc.lpszMenuName = NULL; <br>    wc.lpszClassName = "CodecInstClass"; <br> <br>    if (!RegisterClass(&amp;wc)) <br>return FALSE; <br> <br> <br>//Setup audio codec structures <br>//This particular codec is: GSM 6.10, 8,000 Hz, Mono <br> <br>BYTE gWFmtEx[2] = {0x40,0x01}; <br> <br>gpWFmt = (WAVEFORMATEX *)LocalAlloc(LPTR,sizeof(WAVEFORMATEX)+sizeof(gWFmtEx)); <br> <br>gpWFmt-&gt;wFormatTag = 49; <br>gpWFmt-&gt;nChannels = 1; <br>gpWFmt-&gt;nSamplesPerSec = 8000; <br>gpWFmt-&gt;nAvgBytesPerSec = 1625; <br>gpWFmt-&gt;nBlockAlign = 65; <br>gpWFmt-&gt;wBitsPerSample = 0; <br>gpWFmt-&gt;cbSize = sizeof(gWFmtEx); <br> <br>CopyMemory((gpWFmt + 1),&amp;gWFmtEx,gpWFmt-&gt;cbSize); <br> <br>ZeroMemory(&amp;gWInfo,sizeof(AUDCAP_INFO)); <br>gWInfo.wFormatTag = 49; <br>gWInfo.uAvgBitrate = 13000; <br>gWInfo.wCPUUtilizationEncode = 50; //arbitrary <br>gWInfo.wCPUUtilizationDecode = 20; //artitrary <br>gWInfo.bSendEnabled = 1; <br>gWInfo.bRecvEnabled = 1; <br> <br> <br>//Setup COM support <br>if (FAILED(CoInitialize(NULL))) <br>return FALSE; <br> <br>//Application is a Modal Dialog.   <br>return DialogBox(hInstance,MAKEINTRESOURCE(IDD_MAINUI),0,(DLGPROC)MainUIProc); <br>} <br> <br>//**************************************************************************** <br>// <br>// void DeinitAppInstance (HINSTANCE hInstance) <br>// <br>// This function initializes this instance of the application. <br>// <br>//**************************************************************************** <br> <br>void DeinitAppInstance(HINSTANCE hInstance) <br>{ <br>//End COM support <br>CoUninitialize(); <br> <br>//free the allocated memory <br>LocalFree (gpWFmt); <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL MainUI_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) <br>// <br>// This function is called when the Main Dialog initializes.  It sets up  <br>// the initial interface pointers and updates the dialog accordingly <br>// <br>//**************************************************************************** <br> <br>BOOL MainUI_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) <br>{ <br>HRESULT hr; <br>TCHAR szString[MID_SZ]; <br> <br>gtCodec=NONE; <br> <br> <br>//Get an interface to the audio codec methods <br>hr = CoCreateInstance(CLSID_InstallCodecs, <br>NULL, <br>CLSCTX_INPROC_SERVER, <br>IID_IInstallAudioCodecs, <br>(void **) &amp;pAudio); <br> <br>if (FAILED(hr)) <br>{ <br>pAudio=NULL; <br>HRErrorToString(hr); <br>LoadString(ghInstance,IDS_GETIAUDIO,szString,MID_SZ); <br>MessageBox(NULL,gszHRError,szString,MB_OK); <br>} <br>else <br>{ <br>gtCodec = AUDIOCODEC; <br>} <br> <br> <br>// If no interfaces were available, disable everything. <br>if (gtCodec == NONE) <br>{ <br>EnableWindow(GetDlgItem(hwnd,IDC_INSTALL),FALSE); <br>EnableWindow(GetDlgItem(hwnd,IDC_UNINSTALL),FALSE); <br>EnableWindow(GetDlgItem(hwnd,IDC_REORDER),FALSE); <br>EnableMenuItem(GetMenu(hwnd),0,MF_BYPOSITION|MF_GRAYED); <br>return TRUE; <br>} <br> <br>//Load installed codec formats <br>LoadInstalledCodecs(); <br> <br>//display codecs <br>DlgDisplayInstalledCodecs(hwnd); <br>return TRUE; <br>} <br> <br>//**************************************************************************** <br>// <br>// void MainUI_OnDestroy(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>void MainUI_OnDestroy(HWND hwnd) <br>{ <br> <br>// Free CapInfo structures <br>if (gpsAudCapInfoList) <br>pAudio-&gt;FreeBuffer(gpsAudCapInfoList); <br> <br>// Release the interfaces <br>if (pAudio) <br>pAudio-&gt;Release(); <br> <br>// Free CapInfoIndexs <br>if (gpnAudCapOrderedIndex) <br>LocalFree(gpnAudCapOrderedIndex); <br>} <br> <br>//**************************************************************************** <br>// <br>// void MainUI_OnClose(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>void MainUI_OnClose(HWND hwnd) <br>{ <br>EndDialog(hwnd,0); <br>} <br> <br>//**************************************************************************** <br>// <br>// void MainUI_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) <br>// <br>//**************************************************************************** <br> <br>void MainUI_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) <br>{ <br>TCHAR szString[MID_SZ]; <br>TCHAR szString2[MID_SZ]; <br> <br> <br>switch(id) <br>{ <br>//Install the codec <br>case IDC_INSTALL: <br>{ <br>if (gtCodec==AUDIOCODEC) <br>{ <br>if (FAILED(pAudio-&gt;AddACMFormat(gpWFmt,&amp;gWInfo))) <br>{ <br>LoadString(ghInstance,IDS_IAFMT,szString,MID_SZ); <br>LoadString(ghInstance,IDS_AAFMT,szString2,MID_SZ); <br>MessageBox(hwnd,szString,szString2,MB_OK|MB_ICONEXCLAMATION); <br>} <br>} <br>LoadInstalledCodecs(); <br>break; <br>} <br> <br>// Uninstall the codec <br>case IDC_UNINSTALL: <br>{ <br>if (gtCodec==AUDIOCODEC) <br>{ <br>if (FAILED(pAudio-&gt;RemoveACMFormat(gpWFmt))) <br>{ <br>LoadString(ghInstance,IDS_UAFMT,szString,MID_SZ); <br>LoadString(ghInstance,IDS_RAFMT,szString2,MID_SZ); <br>MessageBox(hwnd,szString,szString2,MB_OK|MB_ICONEXCLAMATION); <br>} <br>} <br> <br>LoadInstalledCodecs(); <br>break; <br>} <br> <br>// Reorder the codecs <br>case IDC_REORDER: <br>{ <br>DialogBox(ghInstance,MAKEINTRESOURCE(IDD_REORDER),hwnd,(DLGPROC)ReorderUIProc); <br>break; <br>}  <br>} <br> <br>DlgDisplayInstalledCodecs(hwnd); <br>} <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK MainUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK MainUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam) <br>{ <br> <br>LRESULT fProcessed=TRUE; <br> <br>switch(message) <br>{ <br>HANDLE_MSG(hwnd,WM_INITDIALOG,MainUI_OnInitDialog); <br>HANDLE_MSG(hwnd,WM_CLOSE,MainUI_OnClose); <br>HANDLE_MSG(hwnd,WM_DESTROY,MainUI_OnDestroy); <br>HANDLE_MSG(hwnd,WM_COMMAND,MainUI_OnCommand); <br> <br>default: <br>fProcessed=FALSE; <br>break; <br>} <br>return (fProcessed); <br>} <br> <br>//**************************************************************************** <br>// <br>// BOOL ReorderUI_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) <br>// <br>//**************************************************************************** <br> <br>BOOL ReorderUI_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) <br>{ <br> <br>DlgDisplayInstalledCodecs(hwnd); <br>return TRUE; <br>} <br> <br>//**************************************************************************** <br>// <br>// void ReorderUI_OnDestroy(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>void ReorderUI_OnDestroy(HWND hwnd) <br>{ <br>EndDialog(hwnd,TRUE); <br>} <br> <br>//**************************************************************************** <br>// <br>// void ReorderUI_OnClose(HWND hwnd) <br>// <br>//**************************************************************************** <br> <br>void ReorderUI_OnClose(HWND hwnd) <br>{ <br>IndexInstalledCodecs(); <br>ReorderUI_OnDestroy(hwnd); <br>} <br> <br>//**************************************************************************** <br>// <br>// void ReorderUI_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) <br>// <br>//**************************************************************************** <br> <br>void ReorderUI_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) <br>{ <br> <br>HWND hListBox; <br>int tmp; <br> <br>switch(id) <br>{ <br> <br>// Move the selected codec up in the list box, and update the CapInfoIndex <br>case IDC_UP: <br>{ <br> <br>hListBox = GetDlgItem(hwnd,IDC_LBINSTALLEDCODECS); <br> <br>//get text of current selection <br>int index =SendMessage(hListBox,LB_GETCURSEL,0,0); <br> <br>//if wasn't able to get selection <br>if (index==0 || index==LB_ERR) <br>return; <br> <br>SendMessage(hListBox,LB_DELETESTRING,index,0); <br>SendMessage(hListBox,LB_INSERTSTRING,index-1,(LPARAM)(LPCSTR)gpsAudCapInfoList-&gt;aFormats[gpnAudCapOrderedIndex[index]].szFormat); <br> <br>tmp = gpnAudCapOrderedIndex[index-1]; <br>gpnAudCapOrderedIndex[index-1] = gpnAudCapOrderedIndex[index]; <br>gpnAudCapOrderedIndex[index] = tmp; <br> <br>SendMessage(hListBox,LB_SETCURSEL,index-1,0); <br>break; <br>} <br> <br>// Move the selected codec down in the list box, and update the CapInfoIndex <br>case IDC_DOWN: <br>{ <br> <br>hListBox = GetDlgItem(hwnd,IDC_LBINSTALLEDCODECS); <br> <br>//get text of current selection <br>int unsigned index =SendMessage(hListBox,LB_GETCURSEL,0,0); <br> <br>if (index==gpsAudCapInfoList-&gt;cFormats-1 || index==LB_ERR) <br>return; <br> <br>SendMessage(hListBox,LB_DELETESTRING,index,0); <br>SendMessage(hListBox,LB_INSERTSTRING,index+1,(LPARAM)(LPCSTR)gpsAudCapInfoList-&gt;aFormats[gpnAudCapOrderedIndex[index]].szFormat); <br> <br>tmp = gpnAudCapOrderedIndex[index+1]; <br>gpnAudCapOrderedIndex[index+1] = gpnAudCapOrderedIndex[index]; <br>gpnAudCapOrderedIndex[index] = tmp; <br> <br>SendMessage(hListBox,LB_SETCURSEL,index+1,0); <br>break; <br>} <br> <br> <br>// Update the CapInfoList from the CapInfoIndex <br>// Call ReorderFormats to reorder the codecs in NetMtg <br>// Reload the CapInfoList w/ the new info. <br>case IDC_OK: <br>{ <br>UpdateCapInfoListsFromIndex(); <br> <br>pAudio-&gt;ReorderFormats(gpsAudCapInfoList); <br> <br>//refresh display <br>LoadInstalledCodecs(); <br>EndDialog(hwnd,TRUE); <br>break; <br>} <br> <br>// Cancel changes by reinitializing the CapInfoIndexs from the  <br>// CapInfoLists and ending the dialog. <br>case IDC_CANCEL: <br>{ <br>IndexInstalledCodecs(); <br>EndDialog(hwnd,TRUE); <br>break; <br>} <br>} <br>} <br> <br>//**************************************************************************** <br>// <br>// LRESULT CALLBACK ReorderUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam) <br>// <br>//**************************************************************************** <br> <br>LRESULT CALLBACK ReorderUIProc (HWND hwnd, UINT message, UINT wParam, LONG lParam) <br>{ <br>LRESULT fProcessed=TRUE; <br> <br>switch(message) <br>{ <br>HANDLE_MSG(hwnd,WM_INITDIALOG,ReorderUI_OnInitDialog); <br>HANDLE_MSG(hwnd,WM_CLOSE,ReorderUI_OnClose); <br>HANDLE_MSG(hwnd,WM_DESTROY,ReorderUI_OnDestroy); <br>HANDLE_MSG(hwnd,WM_COMMAND,ReorderUI_OnCommand); <br> <br>default: <br>fProcessed=FALSE; <br>break; <br>} <br>return (fProcessed); <br>} <br> <br>//**************************************************************************** <br>// <br>// void LoadInstalledCodecs(void) <br>// <br>// Loads a list of the installed codecs w/ their properties. <br>// <br>//**************************************************************************** <br> <br>void LoadInstalledCodecs(void) <br>{ <br> <br>//free any existing info <br>if (gtCodec==AUDIOCODEC) <br>{ <br>if (gpsAudCapInfoList) <br>pAudio-&gt;FreeBuffer(gpsAudCapInfoList); <br> <br>//Get Installed Audio Codecs <br>if (FAILED(pAudio-&gt;EnumFormats(&amp;gpsAudCapInfoList))) <br>gpsAudCapInfoList=NULL; <br>else <br>{ <br>if (gpnAudCapOrderedIndex) <br>LocalFree(gpnAudCapOrderedIndex); <br>gpnAudCapOrderedIndex = (int *)LocalAlloc(LPTR,sizeof(int) * gpsAudCapInfoList-&gt;cFormats); <br>} <br>} <br> <br>//Structures returned by EnumFormats not guarenteed to be inorder. <br>IndexInstalledCodecs();  <br>} <br> <br>//**************************************************************************** <br>// <br>// void IndexInstalledCodecs(void) <br>// <br>// Updates the CapOrderedIndexes to contain lists of indexes to the codecs  <br>// represented in the CapInfoLists in installed order. <br>// <br>//**************************************************************************** <br> <br>void IndexInstalledCodecs(void) <br>{ <br>unsigned int i; <br> <br>if (gtCodec==AUDIOCODEC &amp;&amp; gpsAudCapInfoList) <br>for (i=0;i&lt;gpsAudCapInfoList-&gt;cFormats;i++) <br>gpnAudCapOrderedIndex[gpsAudCapInfoList-&gt;aFormats[i].wSortIndex]=i; <br> <br>} <br> <br>//**************************************************************************** <br>// <br>// void UpdateCapInfoListsFromIndex(void) <br>// <br>// Updates the CapInfoLists with the installed order represended in the CapOrderedIndexes <br>// <br>//**************************************************************************** <br> <br>void UpdateCapInfoListsFromIndex(void) <br>{ <br>unsigned int i; <br> <br>if (gtCodec==AUDIOCODEC) <br>for (i=0;i&lt;gpsAudCapInfoList-&gt;cFormats;i++) <br>gpsAudCapInfoList-&gt;aFormats[gpnAudCapOrderedIndex[i]].wSortIndex=i; <br> <br>} <br> <br>//**************************************************************************** <br>// <br>// void DlgDisplayInstalledCodecs(HWND hwnd) <br>// <br>// Displays the installed codecs in the order specified by the CapOrderedIndexes. <br>// <br>//**************************************************************************** <br> <br>void DlgDisplayInstalledCodecs(HWND hwnd) <br>{ <br>unsigned int i; <br>  <br>//Display Installed Codecs <br>HWND hListBox = GetDlgItem(hwnd,IDC_LBINSTALLEDCODECS); <br>SendMessage(hListBox,LB_RESETCONTENT,0,0); <br> <br>if ((gtCodec==AUDIOCODEC)&amp;&amp; gpsAudCapInfoList) <br>for (i=0;i&lt;gpsAudCapInfoList-&gt;cFormats;i++) <br>SendMessage(hListBox,LB_ADDSTRING,0,(LPARAM)(LPCSTR)gpsAudCapInfoList-&gt;aFormats[gpnAudCapOrderedIndex[i]].szFormat); <br> <br>} <br> <br>//***************************************************************************** </code></pre>
<p>&nbsp;</p></body>
</HTML>

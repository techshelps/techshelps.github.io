<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateQueryDef Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateQueryDef Method</H2>Applies To</P>
<B>Database </B>Object.</P>
Description</P>
Creates a new <B>QueryDef</B> object in a specified database.</P>
Syntax</P>
<B>Set</B> <I>querydef</I> = <I>database</I><B>.CreateQueryDef(</B>[<I>name</I>][, <I>sqltext</I>]<B>)</B></P>
The <B>CreateQueryDef</B> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>querydef</I></P></TD><TD VALIGN="TOP">A variable of an object data type that references the <B>QueryDef</B> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><I>database</I></P></TD><TD VALIGN="TOP">A variable of an object data type that references the open <B>Database</B> object that contains the new <B>QueryDef</B>.</P></TD></TR><TR><TD VALIGN="TOP"><I>name</I></P></TD><TD VALIGN="TOP">A string expression identifying the new <B>QueryDef</B>.</P></TD></TR><TR><TD VALIGN="TOP"><I>sqltext</I></P></TD><TD VALIGN="TOP">A string expression (a valid SQL statement) that defines the <B>QueryDef</B>. If you omit this argument, you can define the <B>QueryDef</B> by setting its <B>SQL</B> property before or after you append it to a collection.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
If you include <I>name</I> but omit <I>sqltext</I> or include both <I>name </I>and <I>sqltext, </I>the <B>QueryDef</B> is automatically saved when you create or change it.</P>
If the object specified by <I>name</I> is already a member of the <B>QueryDefs</B> collection, a trappable error occurs.</P>
You can create a temporary <B>QueryDef</B> by setting the <B>Name</B> property of a newly created <B>QueryDef </B>to a zero-length string ("") or by using a zero-length string for the <I>name</I> argument when you execute the <B>CreateQueryDef</B> method. You can't append a temporary <B>QueryDef</B> to any collection because a zero-length string isn't a valid name for a permanent <B>QueryDef</B>. You can set the <B>Name</B> and <B>SQL</B> properties of the newly created <B>QueryDef</B> and subsequently append the <B>QueryDef</B> to the <B>QueryDefs</B> collection where it's stored in the database. If you provide anything other than a zero-length string for the name when you create a <B>QueryDef</B>, the resulting <B>QueryDef</B> object is automatically appended to the <B>QueryDefs</B> collection.</P>
To remove a <B>QueryDef</B> object from a <B>QueryDefs</B> collection, use the <B>Delete</B> method on the collection.</P>
To run the SQL statement in a <B>QueryDef</B> object, use the <B>Execute</B> method.</P>
Using a <B>QueryDef</B> object is the preferred way to perform SQL pass-through queries with ODBC databases. See the <B>QueryDef</B> object for more information.</P>
See Also</P>
<B>Append </B>Method,<B> Connect </B>Property,<B> CreateProperty </B>Method,<B> Delete </B>Method,<B> LogMessages </B>Property,<B> Name </B>Property,<B> OpenRecordset </B>Method,<B> QueryDef </B>Object,<B> ReturnsRecords </B>Property,<B> SQL </B>Property,<B> Type </B>Property,<B> Value </B>Property.</P>
<P></P>
Example</P>
This example creates a <B>QueryDef</B> named All Pubs with an SQL statement, and then creates a dynaset-type <B>Recordset</B> based on the query.</P>
<BR></P>
<PRE>Dim dbsBiblio As Database, qdfAllPubs As QueryDef
Dim rstAllPubs As Recordset
' Open a database.
Set dbsBiblio = DBEngine.Workspaces(0).OpenDatabase("Biblio.mdb")
' Create a QueryDef.
Set qdfAllPubs = dbsBiblio.CreateQueryDef("All Pubs", _
    "SELECT * FROM Publishers;")
' Create Recordset from query.
Set rstAllPubs = qdfAllPubs.OpenRecordset
...
</PRE>
Example (Microsoft Access)</P>
The following example creates a new <B>QueryDef</B> object, then opens the query in Datasheet view.</P>
<BR></P>
<PRE>Sub NewQuery()
    Dim dbs As Database, qdf As QueryDef, strSQL As String

    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    strSQL = "SELECT * FROM Employees WHERE [HireDate] &gt;= #1-1-95#"
    Set qdf = dbs.CreateQueryDef("RecentHires", strSQL)
    DoCmd.OpenQuery qdf.Name
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example creates a new query based on the Customer recordset in the NWINDEX.MDB database. The query selects a snapshot of all customers in the state of Washington and then copies it onto Sheet1.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase </B>method.</P>
<BR></P>
<PRE>Dim db As Database, qDef As QueryDef, rs As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set qDef = db.CreateQueryDef("WA Region")
qDef.SQL = "SELECT * FROM Customer WHERE [Region] = 'WA';"
Set rs = db.OpenRecordset("WA Region")
numberOfRows = Sheets("Sheet1").Cells(1, 1).CopyFromRecordset(rs)
Sheets("Sheet1").Activate
MsgBox numberOfRows &amp; " records have been copied."
rs.Close
db.Close

</PRE>
<P></P></BODY>
</HTML>

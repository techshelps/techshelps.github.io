<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Database Object</h2>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Description</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

A <b>Database</b> object
represents an open database.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Remarks</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You manipulate an open database
using a <b>Database</b> object and its methods and properties.
You can examine the collections in a <b>Database</b> object to
learn about its tables, queries, and relationships. You can also
use its collections to modify or create tables, queries,
recordsets, and relationships. For example, you can:</p>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<SPAN CLASS="list">

<ul>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Use the <b>Execute</b> method to run
        an action <b>QueryDef</b> object or pass an SQL string to
        an ODBC database.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Use the <b>OpenRecordset</b> method
        to create a new <b>Recordset</b> object directly from the
        <b>Database</b> object.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Use the <b>Close</b> method to close
        an open database.</li>
</ul>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

</SPAN>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You use the <b>CreateDatabase</b>
method to create a new, persistent <b>Database</b> object and
append it to the <b>Databases</b> collection, thereby saving it
to disk. After you create a new database, you must create new
tables to hold your data. You can also create new indexes and
table relationships, attach existing external tables, or
establish a protection scheme using permissions, groups, and
users.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

To open an existing <b>Database</b>
object, use the <b>OpenDatabase</b> method, which appends the
object to the <b>Databases</b> collection. The <b>OpenDatabase</b>
method applies to the <b>Workspace</b> object. You can use the <b>OpenDatabase</b>
method on the default <b>Workspace</b>(0) object, or on a
different opened <b>Workspace</b> object.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

When you use one of the
transaction methods (<b>BeginTrans</b>, <b>CommitTrans</b>, or <b>Rollback</b>)
on the <b>Workspace</b> object, these transactions apply to all
databases opened on the <b>Workspace</b> from which the <b>Database</b>
object was opened. If you want to use independent transactions,
you must first open an additional <b>Workspace</b> object, and
then open another <b>Database</b> object in that <b>Workspace</b>
object. For example, the following creates two independent <b>Database</b>
objects:</p>

<br>
</p>

<pre>Dim dbsThisOne As Database, dbsThatOne As Database
Dim wspFirst As Workspace, wspSecond As Workspace
Dim strUserName As String
Set wspFirst = Workspaces(0)    ' Use the default Workspace.
Set dbsThisOne = wspFirst.OpenDatabase(&quot;Biblio.mdb&quot;)

' Get UserName of default Workspace.
strUserName = wspFirst.UserName
' Create new Workspace.
Set wspSecond = DBEngine.CreateWorkspace(&quot;Special&quot;, strUserName, _
    &quot;SpecialPW&quot;)
Set dbsThatOne = wspSecond.OpenDatabase(&quot;Biblio.mdb&quot;)
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You don't need to specify the <b>DBEngine</b>
object when using the <b>OpenDatabase</b> method. If you need to
open a <b>Database</b> object in a separate transaction context,
then you must reference a specific <b>Workspace</b> object. For
example, the following statements are equivalent:</p>

<br>
</p>

<pre>Set dbsBiblio = DBEngine.Workspaces(0).OpenDatabase(&quot;Biblio.mdb&quot;)
Set dbsBiblio = Workspaces(0).OpenDatabase(&quot;Biblio.mdb&quot;)
Set dbsBiblio = OpenDatabase(&quot;Biblio.mdb&quot;)
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Opening a database with
attached tables doesn't automatically establish links to the
specified external files or external ODBC databases; either the
table's <b>TableDef</b> or <b>Field</b> objects must be
referenced, or a <b>Recordset</b> object opened on it. If links
to these tables can't be established, a trappable error occurs.
You may also need permission to access the database, or the
database may already be open for exclusive use by another user.
In these cases, trappable errors occur.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You can also open an external
database (such as FoxPro, dBASE, and Paradox) directly instead of
opening a Microsoft Jet database that has links to its tables.
See the <b>OpenDatabase</b> method for more information. </p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

For example, to open a FoxPro
database, you could use the following code.</p>

<br>
</p>

<pre>Dim dbsFoxFiles As Database
Set dbsFoxFiles = Workspaces(0).OpenDatabase(&quot;C:\FoxFiles&quot;, _
    False,False,&quot;FoxPro 2.5&quot;)
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Note</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Opening a <b>Database</b>
object directly on an ODBC data source such as Microsoft
SQLServer is not recommended because query performance is much
slower than when using linked tables. Performance is not a
problem with opening a <b>Database</b> object on an external ISAM
database, such as FoxPro, Paradox, etc.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You use the <b>Close</b> method
to remove a <b>Database</b> object from the <b>Databases</b>
collection without deleting it from disk. Any open <b>Recordset</b>
objects in the database are closed automatically when the <b>Database</b>
object is closed.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

When a procedure that declares
a <b>Database</b> object completes execution, these local <b>Database</b>
objects are closed along with any open <b>Recordset</b> objects.
Any pending updates are lost and any pending transactions are
rolled back, but no trappable error occurs. You should explicitly
complete any pending transactions or edits and close <b>Recordset</b>
objects and <b>Database</b> objects before exiting procedures
that declare these object variables locally.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

The first database opened is <b>Databases</b>(0).
The <b>Name</b> property setting of a database is a string that
specifies the path of the database file. The <b>Connect</b>
property specifies the database type and any other parameters
used to connect to external databases. You can refer to any <b>Database</b>
object by its <b>Name</b> property setting using this syntax:</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>Databases</b>(&quot;<i>name</i>&quot;)</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You can also refer to the
object by its ordinal number using this syntax (which refers to
the first member of the <b>Databases</b> collection):</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>Databases</b>(0)</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Properties</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>CollatingOrder</b> Property,
<b>Connect</b> Property, <b>Name</b> Property, <b>QueryTimeout</b>
Property, <b>RecordsAffected</b> Property, <b>Replicable</b>
Property, <b>ReplicaID</b> Property, <b>Transactions</b>
Property, <b>Updatable</b> Property, <b>Version</b> Property.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Methods</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>Close </b>Method, <b>CreateProperty
</b>Method, <b>CreateQueryDef </b>Method, <b>CreateRelation </b>Method,
<b>CreateTableDef </b>Method, <b>Execute </b>Method, <b>MakeReplica
</b>Method, <b>NewPassword </b>Method, <b>OpenRecordset </b>Method,
<b>Synchronize </b>Method.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>See Also</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>OpenDatabase </b>Method;
Appendix, &quot;Data Access Object Hierarchy.&quot;</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Specifics (Microsoft Access)</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

When working with data access
objects from Microsoft Access, you will often need a <b>Database</b>
object variable that represents the current database. Use the <b>CurrentDb</b>
function to return a <b>Database</b> object for the database that
is currently open. This <b>Database</b> object is automatically
appended to the <b>Databases</b> collection.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

For example, suppose you are
currently working with the Northwind sample database in Microsoft
Access. You can create a <b>Database</b> object that refers to
that database by first declaring a <b>Database</b> object
variable, then pointing it to the <b>Database</b> object returned
by the <b>CurrentDb</b> function.</p>

<br>
</p>

<pre>Dim dbs As Database
Set dbs = CurrentDb
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You don't need to know the name
of the database or its position in the <b>Databases</b>
collection in order to use the current database. If you do want
to know the name of the current database, check the <b>Name</b>
property of the <b>Database</b> object, which contains the path
and filename of the database. To find its position in the <b>Databases</b>
collection, enumerate through the collection.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You can open only one database
at a time in the Microsoft Access window. From Visual Basic code,
however, you can create multiple independent <b>Database</b>
object variables to represent multiple open databases. In this
way, you can manipulate more than one database at a time from
code. You can also create multiple <b>Database</b> object
variables and point them to the current database.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Note</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

In your Visual Basic code, use
the <b>CurrentDb</b> function to return a <b>Database</b> object
that refers to the current database, rather than the <b>DBEngine</b>(0)(0)
syntax. The <b>CurrentDb</b> function creates another instance of
the current database, while the <b>DBEngine</b>(0)(0) syntax
refers to the open copy of the current database. Using the <b>CurrentDb</b>
function enables you to create more than one variable of type <b>Database</b>
that refers to the current database. Microsoft Access still
supports the <b>DBEngine</b>(0)(0) syntax, but you should
consider making this modification to your code in order to avoid
possible conflicts in a multiuser environment.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Example</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

This example creates a new <b>Database</b>
object and opens it (thereby appending it to the <b>Databases</b>
collection) in the default <b>Workspace</b> object. Then it
enumerates all the collections contained by each <b>Database</b>
object and the properties of the new <b>Database</b> object and
closes the new <b>Database</b>.</p>

<br>
</p>

<pre>Function EnumerateDatabase () As Integer
    Dim wrkDefault As Workspace
    Dim dbsEnum As Database, dbsTemp As Database
    Dim intOBJ As Integer, intDB As Integer
    Set wrkDefault = Workspaces(0)
    Set dbsEnum = wrkDefault.CreateDatabase(&quot;Northwind.mdb&quot;, _
        dbLangGeneral)
' Enumerate all open databases.
    For intDB = 0 To wrkDefault.Databases.Count - 1
        Set dbsTemp = wrkDefault.Databases(intDB)
        Debug.Print
        Debug.Print &quot;Enumeration of Databases: &quot;; dbsTemp.Name
        Debug.Print
' Enumerate containers.
        Debug.Print &quot;Container: Name, Owner&quot;
        For intOBJ = 0 To dbsTemp.Containers.Count - 1
            Debug.Print &quot;  &quot;; dbsTemp.Containers(intOBJ).Name;
            Debug.Print &quot;, &quot;; dbsTemp.Containers(intOBJ).Owner
        Next intOBJ
        Debug.Print
' Enumerate query definitions.
        Debug.Print &quot;QueryDef: Name&quot;
        For intOBJ = 0 To dbsTemp.QueryDefs.Count - 1
            Debug.Print &quot;  &quot;; dbsTemp.QueryDefs(intOBJ).Name
        Next intOBJ
        Debug.Print
' Enumerate Recordsets.
' No output because no Recordset is open.
        Debug.Print &quot;Recordset: Name&quot;
        For intOBJ = 0 To dbsTemp.Recordsets.Count - 1
            Debug.Print &quot;  &quot;; dbsTemp.Recordsets(intOBJ).Name
        Next intOBJ
        Debug.Print</pre>

<br>
</p>

<pre>' Enumerate relationships.
        Debug.Print &quot;Relation: Name, Table, ForeignTable&quot;
        For intOBJ = 0 To dbsTemp.Relations.Count - 1
            Debug.Print &quot;  &quot;; dbsTemp.Relations(intOBJ).Name;
            Debug.Print &quot;, &quot;; dbsTemp.Relations(intOBJ).Table;
            Debug.Print &quot;, &quot;; dbsTemp.Relations(intOBJ).ForeignTable
        Next intOBJ
        Debug.Print
' Enumerate table definitions.
        Debug.Print &quot;TableDef: Name, DateCreated&quot;
        For intOBJ = 0 To dbsTemp.TableDefs.Count - 1
            Debug.Print &quot;  &quot;; dbsTemp.TableDefs(intOBJ).Name;
            Debug.Print &quot;, &quot;; dbsTemp.TableDefs(intOBJ).DateCreated
        Next intOBJ
        Debug.Print
    Next intDB
' Enumerate built-in properties of dbsEnum.
    Debug.Print &quot; dbsEnum.Name: &quot;; dbsEnum.Name
    Debug.Print &quot; dbsEnum.CollatingOrder: &quot;; dbsEnum.CollatingOrder
    Debug.Print &quot; dbsEnum.Connect: &quot;; dbsEnum.Connect
    Debug.Print &quot; dbsEnum.QueryTimeout: &quot;; dbsEnum.QueryTimeout
    Debug.Print &quot; dbsEnum.Transactions: &quot;; dbsEnum.Transactions
    Debug.Print &quot; dbsEnum.Updatable: &quot;; dbsEnum.Updatable
    Debug.Print
    dbsEnum.Close    ' File remains on disk.
    EnumerateDatabase = True
End Function
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Example (Microsoft
Access)</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

The following example show
three ways to return a <b>Database</b> object in Microsoft
Access. The procedure returns a <b>Database</b> object
representing the current database, which is open in the Microsoft
Access window. Next, the procedure creates another database
called Newdb.mdb and saves it to disk. Then it opens an existing
database called Another.mdb. Finally, it enumerates all <b>Database</b>
objects in the <b>Databases</b> collection.</p>

<br>
</p>

<pre>Sub ReferenceDatabases()
    Dim wsp As Workspace
    Dim dbsCurrent As Database, dbsNew As Database,
    Dim dbsAnother As Database, dbs As Database

    ' Return Database object pointing to current database.
    Set dbsCurrent = CurrentDb
    ' Return Workspace object pointing to current workspace.
    Set wsp = DBEngine.Workspaces(0)
    ' Create new Database object.
    Set dbsNew = wsp.CreateDatabase(&quot;Newdb.mdb&quot;, dbLangGeneral)
    ' Open database other than current database.
    set dbsAnother = wsp.OpenDatabase(&quot;Another.mdb&quot;, dbLangGeneral)
    ' Enumerate all open databases.</pre>

<br>
</p>

<pre>    For Each dbs in wsp.Databases
        Debug.Print dbs.Name
    Next dbs
End Sub
</pre>
</BODY>

</html>

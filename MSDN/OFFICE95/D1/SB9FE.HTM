<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Snapshot-Type Recordset Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Snapshot-Type Recordset Object</H2>Description</P>
A snapshot-type <B>Recordset</B> object is a static set of records that you can use to examine data in an underlying table or tables. A snapshot-type <B>Recordset</B> object can contain fields from one or more tables in a database but can't be updated.</P>
Remarks</P>
When you create a snapshot-type <B>Recordset</B> object, data values for all fields (except Memo and OLE Object field data types in .mdb files) are brought into memory. Once loaded, changes made to base table data aren't reflected in the snapshot-type <B>Recordset</B> object data. To reload the snapshot-type <B>Recordset</B> object with current data, use the <B>Requery</B> method, or re-execute the <B>OpenRecordset</B> method.</P>
The order of snapshot-type <B>Recordset</B> object data doesn't necessarily follow any specific sequence. To order your data, use an SQL statement with an ORDER BY clause to create the <B>Recordset</B> object. You can also use this technique to filter the records so that only certain records are added to the <B>Recordset</B> object. For example, the following code selects only titles whose name contains the string "VBSQL" and sorts the resulting records by ISBN:</P>
<BR></P>
<PRE>Dim dbsBiblio As Database, rstTitles As Recordset<BR>Dim strSelect As String
Set dbsBiblio = Workspaces(0).OpenDatabase("Biblio.mdb")
strSelect = "SELECT * FROM Titles WHERE Title like '*VBSQL*' " &amp; _<BR>    "ORDER BY ISBN;"
Set rstTitles = dbsBiblio.OpenRecordset(strSelect,dbOpenSnapshot)
</PRE>
Using this technique instead of using the <B>Filter</B> or <B>Sort</B> properties or testing each record individually generally results in faster access to your data.</P>
To create a snapshot-type <B>Recordset</B> object, use the <B>OpenRecordset</B> method on an open database, on another dynaset- or snapshot-type <B>Recordset</B> object, or on a <B>QueryDef</B> object.</P>
Snapshot-type <B>Recordset</B> objects are generally faster to create and access than dynaset-type <B>Recordset</B> objects because their records are either in memory or stored in TEMP disk space, and the Microsoft Jet database engine doesn't need to lock pages or handle multiuser issues. However, snapshot-type <B>Recordset</B> objects use more resources than dynaset-type <B>Recordset</B> objects because the entire record is downloaded to local memory.</P>
Properties</P>
<B>AbsolutePosition</B> Property; <B>BOF</B>,<B> EOF</B> Properties; <B>Bookmark</B> Property; <B>Bookmarkable</B> Property; <B>Filter</B> Property; <B>Name</B> Property; <B>NoMatch</B> Property; <B>PercentPosition</B> Property; <B>RecordCount</B> Property; <B>Restartable</B> Property; <B>Sort</B> Property; <B>Transactions</B> Property; <B>Type</B> Property; <B>Updatable</B> Property; <B>ValidationRule</B> Property; <B>ValidationText</B> Property.</P>
<P></P>
Methods</P>
<B>Clone </B>Method;<B> Close </B>Method;<B> CopyQueryDef </B>Method;<B> FindFirst</B>,<B> FindLast</B>,<B> FindNext</B>,<B> FindPrevious </B>Methods;<B> GetRows </B>Method;<B> Move </B>Method;<B> MoveFirst</B>,<B> MoveLast</B>,<B> MoveNext</B>,<B> MovePrevious </B>Methods;<B> OpenRecordset </B>Method;<B> Requery </B>Method.</P>
See Also</P>
<B>OpenRecordset </B>Method,<B> Recordset </B>Object; Appendix, "Data Access Object Hierarchy."</P>
Example</P>
This example creates a new snapshot-type <B>Recordset</B> object and opens it, appending it to the <B>Recordsets</B> collection in the default database. It then finds a record and prints it.</P>
<BR></P>
<PRE>Function ShowVBSQL () As Integer
    Dim dbsPublish As Database, rstTitles As Recordset
    Dim I As Integer, J As Integer
    Set dbsPublish = DBEngine.Workspaces(0).OpenDatabase("Biblio.mdb") 
    Set rstTitles = dbsPublish.OpenRecordset("Titles", dbOpenSnapshot)
    If rstTitles.RecordCount &gt; 0 Then
        rstTitles.FindFirst "Title Like '*VBSQL*'"  ' Any title on VBSQL
            Do until rstTitles.NoMatch = True
                Debug.Print rstTitles!Title
                rstTitles.FindNext "Title Like '*VBSQL*'"
            Loop
    Else
        Debug.Print "No such title"
    End If
    dbsPublish.Close
    ShowVBSQL = True
End Function
</PRE>
Example (Microsoft Access)</P>
The following example creates a snapshot-type <B>Recordset</B> object from an SQL statement, then prints the value of the <B>Updatable</B> property for the <B>Recordset</B> object. Since snapshot-type <B>Recordset</B> objects are never updatable, the value of this property will always be <B>False</B> (0).</P>
<BR></P>
<PRE>Sub LongTermEmployees()
    Dim dbs As Database, qdf As QueryDef, rst As Recordset
    Dim strSQL As String

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    strSQL = "SELECT * FROM Employees WHERE HireDate &lt;= #1-1-95#;"
    Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)
    Debug.Print rst.Updatable
End Sub
</PRE>
<P></P></BODY>
</HTML>

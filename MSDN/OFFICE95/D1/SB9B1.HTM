<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Error Object</H2>Description</P>
The <B>Error</B> object contains details about data access errors, each of which pertains to a single operation involving data access objects (DAO).</P>
Remarks</P>
Any operation involving data access objects can generate one or more errors. As each error occurs, one or more <B>Error</B> objects are placed in the <B>Errors</B> collection of the <B>DBEngine</B> object.</P>
When another DAO operation generates an error, the <B>Errors</B> collection is cleared, and the new <B>Error</B> object is placed in the <B>Errors</B> collection. DAO operations that don't generate an error have no effect on the <B>Errors</B> collection.</P>
<P></P>
Elements of the <B>Errors</B> collection aren't appended as they typically are with other collections. The set of <B>Error</B> objects in the <B>Errors</B> collection describes one error. The first <B>Error</B> object is the lowest level error, the second the next higher level, and so forth. For example, if an ODBC error occurs while trying to open a <B>Recordset</B> object, the last <B>Error</B> object contains the DAO error indicating that the object couldn't be opened. The first error object contains the lowest level ODBC error; subsequent errors contain the ODBC errors returned by the various layers of ODBC. In this case, the driver manager, and possibly the driver itself, return separate <B>Error</B> objects.</P>
<P></P>
Note</P>
If you use the <B>New</B> keyword to create an object that subsequently causes an error before that object has been appended to a collection, the <B>DBEngine Errors</B> collection will not contain an entry for that object's error (because it might still contain information from a previous error).</P>
<P></P>
To determine if the error information in the <B>Errors</B> collection is valid, compare the <B>Number</B> property of the first element of the <B>Errors</B> collection (<B>DBEngine</B>.<B>Errors</B>(0)) with the value of the Visual Basic <B>Err</B> object.</P>
Error handling code should examine the <B>Errors</B> collection whenever you anticipate a data access error. If you are writing a centralized error handler, test the Visual Basic <B>Err</B> object. If it matches the <B>Errors</B>(0) object, you can then use a series of <B>Select Case</B> statements to identify the particular data access error or errors that occurred.</P>
Properties</P>
<B>Description </B>Property;<B> HelpContext</B>,<B> HelpFile </B>Properties;<B> Number </B>Property;<B> Source </B>Property.</P>
See Also</P>
Appendix, "Data Access Object Hierarchy."</P>
Example</P>
See the <B>Description</B> property example.</P>
Example (Microsoft Access)</P>
The following example generates an error by attempting to open a <B>Recordset</B> object on a non-existent Students table. Information about the error is stored in both the data access <B>Error</B> object and the Visual Basic <B>Err</B> object. The procedure prints the value of the <B>Description</B>, <B>Source</B>, and <B>Number</B> properties of the <B>Error</B> object. Then it prints the values of the corresponding properties of the <B>Err</B> object.</P>
Note that the first <B>Error</B> object in the <B>Errors</B> collection, Errors(0), should always refer to the same error as the <B>Err</B> object. If it doesn't, information in the <B>Errors</B> collection may be outdated. Use the <B>Refresh</B> method to ensure that the <B>Errors</B> collection includes the most recent error information.</P>
<BR></P>
<PRE>Sub CheckError()
    Dim dbs As Database, tdf As TableDef, rst As Recordset
    Dim prp As Property
    ' Declare Error variable for enumeration of Errors collection.
    Dim errX As Error</PRE>
<P></P>
<BR></P>
<PRE>    
    ' Ignore errors.
    On Error Resume Next
    ' Clear error in Err object.
    Err.Clear
    ' Refresh Errors collection.
    Errors.Refresh
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    ' Attempt to open Recordset object on nonexistent table.
    Set rst = dbs.OpenRecordset("Students")
    Debug.Print "DAO Error Object:"
    ' Print number of errors in Errors collection.
    Debug.Print "&gt;&gt;&gt;Number of errors: "; Errors.Count
    ' Enumerate Errors collection and key properties.
    For Each errX In DBEngine.Errors
        Debug.Print errX.Description
        Debug.Print errX.Source
        Debug.Print errX.Number
    Next errX
    Debug.Print
    Debug.Print "VBA Err Object:"
    ' Display corresponding properties of Err object.
    Debug.Print Err.Description
    Debug.Print Err.Source
    Debug.Print Err.Number
End Sub
</PRE>
</P></BODY>
</HTML>

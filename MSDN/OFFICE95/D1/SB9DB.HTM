<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OrdinalPosition Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>OrdinalPosition Property</H2>Applies To</P>
<B>Field </B>Object.</P>
Description</P>
Sets or returns the relative position of a <B>Field</B> object within the <B>Fields</B> collection to which it is appended. For an object not yet appended to the <B>Fields</B> collection, this property is read/write.</P>
Settings and Return Values</P>
The setting or return value is an integer that specifies the numeric order of fields. The default is 0. The data type is <B>Integer</B>.</P>
Remarks</P>
For a <B>Field</B> object, use of the <B>OrdinalPosition</B> property depends on the object that contains the <B>Fields</B> collection that the <B>Field</B> object is appended to, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="218pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Object appended to</P></TD><TD VALIGN="TOP">Usage</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Index</B></P></TD><TD VALIGN="TOP">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><B>QueryDef</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Recordset</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Relation</B></P></TD><TD VALIGN="TOP">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><B>TableDef</B></P></TD><TD VALIGN="TOP">Read/write</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Generally, the ordinal position of an object that you append to a collection depends on the order in which you append the object. The first appended object is in the first position (0), the second appended object is in the second position (1), and so on. The last appended object is in ordinal position <I>count</I> –1, where <I>count</I> is the number of objects in the collection as specified by the <B>Count</B> property setting.</P>
<P></P>
Using the <B>OrdinalPosition</B> property, you can specify an ordinal position for new <B>Field</B> objects that differs from the order in which you append those objects to a collection. This enables you to specify a field order for your tables, queries, and recordsets when you use them in an application. For example, the order in which fields are returned in a SELECT * query would be determined by the current <B>OrdinalPosition</B> property values.</P>
You can permanently reset the order in which fields are returned in recordsets by setting the <B>OrdinalPosition</B> property to any positive integer.</P>
Two or more <B>Field</B> objects in the same collection can have the same <B>OrdinalPosition</B> property value, in which case they will be ordered alphabetically. For example, if you have a field named Age set to 4 and you set a second field named Weight to 4, Weight is returned after Age.</P>
You can specify a number that is greater than the number of fields – 1. The field will be returned in an order relative to the largest number. For example, if you set a field's <B>OrdinalPosition</B> property to 20 (and there are only 5 fields) and you've set the <B>OrdinalPosition</B> property for two other fields to 10 and 30, respectively, the field set to 20 is returned between the fields set to 10 and 30.</P>
After you change the <B>OrdinalPosition</B> property setting, you can use the property to return the current setting. However, the fields aren't reordered until the <B>Fields</B> collection is repopulated. For example:</P>
<BR></P>
<PRE>TableDefs("Titles").Fields(0).OrdinalPosition = 3
</PRE>
This code changes which <B>Field</B> object is referenced in the fourth position (0 relative). Because <B>Field</B>(0) was Title, <B>Field</B>(2) now refers to Title, and <B>Field</B>(0) refers to the first (lowest) field in the sequence.</P>
It is simpler to reference <B>Field</B> objects by their <B>Name</B> property. For example, this code assigns the AU_ID field to the third field position:</P>
<BR></P>
<PRE>TableDefs("Titles").Fields("AU_ID").OrdinalPosition = 2
</PRE>
<P></P>
Note</P>
Changing the <B>OrdinalPosition</B> property setting of a <B>Field</B> object in the <B>Fields</B> collection will not immediately change its position in the collection.  You will need to use the <B>Refresh</B> method on the collection to force the <B>Field</B> into its new position. Further, the <B>OrdinalPosition</B> setting is not the same as the field's index within a collection, although they may be equal.</P>
<P></P>
See Also</P>
<B>Count </B>Property,<B> QueryDef </B>Object,<B> Refresh </B>Method.</P>
<P></P>
Example (Microsoft Access)</P>
The following example changes the setting of the <B>OrdinalPosition</B> property for the first field in a Products table.</P>
<BR></P>
<PRE>Sub SetPosition()
    Dim dbs As Database, tdf As TableDef
    Dim fldFirst As Field, fld As Field

    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Products
    ' Return Field object pointing to first field in table.
    Set fldFirst = tdf.Fields(0)
    ' Set OrdinalPosition property to last position in collection.
    fldFirst.OrdinalPosition = tdf.Fields.Count
    ' Refresh Fields collection.
    tdf.Fields.Refresh
    ' Enumerate all fields and print ordinal position.
    For Each fld In tdf.Fields
        Debug.Print fld.Name, fld.OrdinalPosition
    Next fld
End Sub
</PRE>
</P></BODY>
</HTML>

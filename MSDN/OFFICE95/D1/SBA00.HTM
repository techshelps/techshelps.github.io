<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Source Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Source Property</H2>Applies To</P>
<B>Error </B>Object.</P>
Description</P>
Returns the name of the object or application that originally generated the error.</P>
Return Values</P>
The return value is a string expression representing the object or application that generated the error.</P>
Remarks</P>
The <B>Source</B> property specifies a string expression representing the object that originally generated the error; the expression is usually the object's class name or programmatic ID. Use the <B>Source</B> property to provide your users with information when your code is unable to handle an error generated in an accessed object. For example, if you access Microsoft Excel and it generates a Division by zero error, Microsoft Excel sets <B>Error</B>.<B>Number</B> to its error code for that error and sets the <B>Source</B> property to Excel.Application. Note that if the error is generated in another object called by Microsoft Excel, Microsoft Excel intercepts the error and sets <B>Error</B>.<B>Number</B> to its own code for Division by zero. However, it leaves the other <B>Error</B> object properties (including the <B>Source</B> property) as set by the object that generated the error. The <B>Source</B> property always contains the name of the object that originally generated the error — your code can try to handle the error according to the error documentation of the object you accessed. If your error handler fails, you can use the <B>Error</B> object information to describe the error to your user, using the <B>Source</B> property and the other <B>Error</B> properties to inform the user which object originally caused the error, its description of the error, and so forth.</P>
<P></P>
<P></P>
Note</P>
The <B>On Error Resume Next</B> construct may be preferable to <B>On Error GoTo</B> when dealing with errors generated during access to other objects. Checking the <B>Error</B> object property after each interaction with an object removes ambiguity about which object your code was accessing when the error occurred. Thus, you can be sure which object placed the error code in <B>Error</B>.<B>Number</B>, as well as which object originally generated the error (the one specified in <B>Error</B>.<B>Source</B>).</P>
<P></P>
See Also</P>
<B>Description </B>Property.</P>
Specifics (Microsoft Access)</P>
The data access <B>Source</B> property applies to the <B>Error</B> object and can be read only from Visual Basic.</P>
<P></P>
Note</P>
Don't confuse this property with the Microsoft Access <B>Source</B> property, which applies to a query and specifies the source connection string and source database for the query's input table or query.</P>
<P></P>
<P></P>
Example</P>
See the <B>Decription</B> property example.</P>
<BR></P></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateProperty Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateProperty Method</H2>Applies To</P>
<B>Database </B>Object,<B> Field </B>Object,<B> Index </B>Object,<B> QueryDef </B>Object,<B> TableDef </B>Object.</P>
<P></P>
Description</P>
Creates a new user-defined <B>Property</B> object.</P>
Syntax</P>
<B>Set</B> <I>variable</I> =<I> object</I><B>.CreateProperty(</B>[<I>name</I>[, <I>type</I>[, <I>value</I>[, <I>fDDL</I>]]]]<B>)</B></P>
The <B>CreateProperty</B> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>variable</I></P></TD><TD VALIGN="TOP">A variable declared as an object data type <B>Property</B>.</P></TD></TR><TR><TD VALIGN="TOP"><I>object</I></P></TD><TD VALIGN="TOP">The variable name of the <B>Database</B>, <B>Field</B>, <B>Index</B>, <B>QueryDef</B>, or <B>TableDef</B> object you want to use to create the new <B>Property</B> object.</P></TD></TR><TR><TD VALIGN="TOP"><I>name</I></P></TD><TD VALIGN="TOP">A <B>String</B> variable that uniquely names the new <B>Property</B> object. See the <B>Name</B> property for details on valid <B>Property</B> names.</P></TD></TR><TR><TD VALIGN="TOP"><I>type</I></P></TD><TD VALIGN="TOP">An <B>Integer</B> constant that defines the data type of the new <B>Property</B> object. See the <B>Type</B> property for valid data types.</P></TD></TR><TR><TD VALIGN="TOP"><I>value</I></P></TD><TD VALIGN="TOP">A <B>Variant</B> variable containing the initial property value. See the <B>Value</B> property for details.</P></TD></TR><TR><TD VALIGN="TOP"><I>fDDL</I></P></TD><TD VALIGN="TOP">A Boolean variable indicating whether or not the <B>Property</B> is a DDL object. The default is <B>False</B>. If the <I>fDDL </I>is <B>True</B>, this <B>Property</B> object can't be changed or deleted unless the user has <B>dbSecWriteDef</B> permission.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
You can create a user-defined <B>Property</B> object only in the <B>Properties</B> collection of an object that is persistent (that is, already stored on disk).</P>
If you omit one or more of the optional parts when you use <B>CreateProperty</B>, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the object, you can alter some but not all of its property settings. See the individual property topics for more details.</P>
If <I>name</I> refers to an object that is already a member of the collection, a trappable error occurs when you use the <B>Append</B> method.</P>
To remove a user-defined <B>Property</B> object from the collection, use the <B>Delete</B> method on the <B>Properties</B> collection. You can't delete built-in properties.</P>
<P></P>
Note</P>
If you omit the <I>fDDL </I>part, it defaults to <B>False</B> (non-DDL). Because no corresponding DDL property is exposed, you must delete and re-create a <B>Property</B> object you want to change from DDL to non-DDL.</P>
<P></P>
See Also</P>
<B>Append </B>Method,<B> Delete </B>Method,<B> Name </B>Property,<B> Type </B>Property,<B> Value </B>Property.</P>
<P></P>
Specifics (Microsoft Access)</P>
Microsoft Access defines a number of properties on data access objects. These properties are not automatically recognized by the Microsoft Jet database engine. In order to set or return values for a Microsoft Access-defined property in Visual Basic, you must specifically add the property to the <B>Properties</B> collection of the object to which it applies. You can do this by using the <B>CreateProperty</B> method to create the property and then appending it to the <B>Properties</B> collection.</P>
A Microsoft Access-defined property is automatically added to the <B>Properties</B> collection when it is first set from the Microsoft Access window. If the property has already been set in this way, then you don't need to add it to the <B>Properties</B> collection.</P>
When you write code to set a Microsoft Access-defined property, you should include an error-handling routine that creates a <B>Property</B> object representing that property and appends it to the <B>Properties</B> collection if it does not already exist in the collection.</P>
When you refer to a Microsoft Access-defined property in Visual Basic, you must explicitly refer to the <B>Properties</B> collection. For example, you would refer to the <B>AppTitle</B> property in the following manner, once it exists within the <B>Properties</B> collection of a <B>Database</B> object representing the current database.</P>
<BR></P>
<PRE>Dim dbs As Database
Set dbs = CurrentDb
dbs.Properties!AppTitle = "Northwind Traders"
</PRE>
<P></P>
Note</P>
You need to create and append only the Microsoft Access properties that apply to data access objects. You can set other Microsoft Access properties in Visual Basic using the standard <I>object</I>.<I>property</I> syntax.</P>
<P></P>
<P></P>
Example</P>
This example creates a new <B>Property</B> object.</P>
<BR></P>
<PRE>Dim prpPrivilege As Property
Dim dbsNorthwind As Database
Set dbsNorthwind = DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
' Create new Property object.
Set prpPrivilege = dbsNorthwind.CreateProperty("Privilege")
' Set other properties of prpPrivilege.
prpPrivilege.Type = dbBoolean
prpPrivilege.Value = True
' Save Property definition by appending it to Properties collection.
dbsNorthwind.Properties.Append prpPrivilege
</PRE>
<P></P>
Example (Microsoft Access)</P>
The following example sets the <B>Subject</B> property. The <B>Subject</B> property is a database property that can also be set on the Summary tab of the Database Properties dialog box, available by clicking Database Properties on the File menu.</P>
The <B>Subject</B> property applies to a data access object — the SummaryInfo <B>Document</B> object. However, it is defined by Microsoft Access, so the Microsoft Jet database engine does not automatically recognize it. Therefore, you must specifically add this property to the <B>Properties</B> collection of the <B>Document</B> object before you can set it. If the property does not exist in the <B>Properties</B> collection, Microsoft Access will generate an error when you attempt to set it.</P>
In the following example, if Microsoft Access generates an error upon trying to set the <B>Subject</B> property, the error-handling routine creates the property and appends it to the <B>Properties</B> collection.</P>
<BR></P>
<PRE>Sub SetAccessProperty()
    Dim dbs As Database, ctr As Container, doc As Document
    Dim prp As Property

    ' Enable error handling.
    On Error GoTo ErrorHandler
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    ' Return Container variable pointing to Databases container.
    Set ctr = dbs.Containers!Databases
    ' Return Document variable pointing to SummaryInfo document.
    Set doc = ctr.Documents!SummaryInfo
    ' Attempt to set Subject property.
    doc.Properties!Subject = "Business Contacts"
    Exit Sub

ErrorHandler:
    ' Check number of error that has occurred.
    If Err.Number = 3270 Then
        ' Create Subject property and set its value.
        Set prp = doc.CreateProperty("Subject", dbText, _
            "Business Contacts")
        ' Append property.
        doc.Properties.Append prp
        ' Resume main procedure.
        Resume Next
    Else
        ' If different error has occurred, display message.
        MsgBox "Unknown error!", vbCritical
    End If
End Sub

</PRE>
<P></P></BODY>
</HTML>

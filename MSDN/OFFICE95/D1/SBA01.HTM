<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SourceField, SourceTable Properties</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>SourceField, SourceTable Properties</h2>

Applies To</p>

<b>Field </b>Object.</p>
<SPAN CLASS="list">
<ul>
    <li><b>SourceField</b> &#151; returns a value that indicates
        the name of the field that is the original source of the
        data for a <b>Field</b> object.</li>
    <li><b>SourceTable</b> &#151; returns a value that indicates
        the name of the table that is the original source of the
        data for a <b>Field</b> object.</li>
</ul>
</SPAN>
This property is not available at design time and is
read-only at run time.</p>

Return Values</p>

The return value is a string expression specifying
the name of the field or table that is the source of data. The
data type is <b>String</b>.</p>

Remarks</p>

For a <b>Field</b> object, use of the <b>SourceField</b>
and <b>SourceTable</b> properties depends on the object that
contains the <b>Fields</b> collection that the <b>Field</b>
object is appended to, as shown in the following table.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="125pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top">Object appended to</td>
        <TD valign="top">Usage</td>
    </tr>
    <tr>
        <TD valign="top" colspan="2">&nbsp;</td>
    </tr>
    <tr>
        <TD valign="top"><b>Index</b></td>
        <TD valign="top">Not supported</td>
    </tr>
    <tr>
        <TD valign="top"><b>QueryDef</b></td>
        <TD valign="top">Read-only</td>
    </tr>
</TBODY></table>

<br>
</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="125pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top">Object appended to</td>
        <TD valign="top">Usage</td>
    </tr>
    <tr>
        <TD valign="top" colspan="2">&nbsp;</td>
    </tr>
    <tr>
        <TD valign="top"><b>Recordset</b></td>
        <TD valign="top">Read-only</td>
    </tr>
    <tr>
        <TD valign="top"><b>Relation</b></td>
        <TD valign="top">Not supported</td>
    </tr>
    <tr>
        <TD valign="top"><b>TableDef</b></td>
        <TD valign="top">Read-only</td>
    </tr>
</TBODY></table>

<br>
</p>

These properties indicate the original field and
table names associated with a <b>Field</b> object. For example,
you could use these properties to determine the original source
of the data in a query field whose name is unrelated to the name
of the field in the underlying table.</p>

See Also</p>

<b>QueryDef </b>Object,<b> SourceTableName </b>Property.</p>

Example</p>

This example creates a <b>Recordset</b> object using
an SQL statement that creates aliases for fields in two different
tables in the database. The example then prints the name of the
field, the original table, and the original field.</p>

<br>
</p>

<pre>Function SourceInfo () As Integer
    Dim dbsNorthwind As Database
    Dim rstEmployCustID As Recordset, fldEnum As Field
    Dim strSelect As String, intStep As Integer
    ' Open database.
    Set dbsNorthwind = _
        DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
    ' Construct SQL statement.
    strSelect = &quot;SELECT EmployeeID As EmpID, CustomerID As &quot; &amp; _
        &quot;CustID FROM Employees, Customers;&quot;
    Set rstEmployCustID = dbsNorthwind.OpenRecordset(strSelect)
    For intStep = 0 To rstEmployCustID.Fields.Count - 1
        Set fldEnum = rstEmployCustID.Fields(intStep)
        Debug.Print fldEnum.Name            ' Print field name.
        Debug.Print fldEnum.SourceTable    ' Print original table name.
        Debug.Print fldEnum.SourceField    ' Print original field name.
    Next intStep
    SourceInfo = True
End Function
</pre>

Example (Microsoft Access)</p>

The following example creates a <b>Recordset</b>
object using an SQL statement that creates aliases for fields in
two different tables in the database. The example then prints the
name of the field, the original table, and the original field.</p>

<br>
</p>

<pre>Sub SourceInfo()
    Dim dbs As Database, rst As Recordset, fld As Field
    Dim strSQL As String

    ' Return Database object that points to current database.
    Set dbs = CurrentDb
    ' Construct SQL statement.
    strSQL = &quot;SELECT ProductID As ProductCode, &quot; &amp; _
        &quot;CategoryName As TypeOfProduct FROM Products, Categories;&quot;</pre>

<br>
</p>

<pre>    Set rst = dbs.OpenRecordset(strSQL)
    For Each fld in rst.Fields
        Debug.Print fld.Name        ' Print field name.
        Debug.Print fld.SourceTable    ' Print original table name.
        Debug.Print fld.SourceField    ' Print original field name.
        Debug.Print
    Next fld
End Sub
</pre>
</BODY>

</html>

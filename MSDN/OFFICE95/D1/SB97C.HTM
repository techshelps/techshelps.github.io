<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clone Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Clone Method</H2>Applies To</P>
Dynaset-Type<B> Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type<B> Recordset </B>Object, Table-Type<B> Recordset </B>Object.</P>
Description</P>
Creates a duplicate <B>Recordset</B> object that refers to the original object.</P>
Syntax</P>
<B>Set</B> <I>duplicate</I> = <I>original</I><B>.Clone( )</B></P>
The <B>Clone</B> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>duplicate</I></P></TD><TD VALIGN="TOP">A variable of an object data type identifying the duplicate <B>Recordset </B>object you're creating.</P></TD></TR><TR><TD VALIGN="TOP"><I>original</I></P></TD><TD VALIGN="TOP">A variable of an object data type identifying the <B>Recordset </B>object<B> </B>you want to duplicate.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
Remarks</P>
Use the <B>Clone</B> method to create multiple, duplicate <B>Recordset </B>objects. Each recordset can have its own current record. Using <B>Clone</B> by itself doesn't change the data in the objects or in their underlying structures. Using the <B>Clone</B> method, you can share bookmarks between two or more recordsets because their bookmarks are interchangeable.</P>
<P></P>
Note</P>
When used on a table-type <B>Recordset</B> object, the <B>Index</B> property setting is not cloned on the new copy of the <B>Recordset</B>. You must copy the <B>Index</B> property setting manually.</P>
<P></P>
You can use <B>Clone</B> when you want to perform an operation on a recordset<B> </B>that requires multiple current records. This is faster and more efficient than creating a second recordset.</P>
A recordset you create with <B>Clone</B> initially lacks a current record. To make a record current before you use the recordset object specified by <I>duplicate</I>, you must set the <B>Bookmark</B> property or use one of the Move methods, one of the Find methods (for dynaset- and snapshot-type <B>Recordset</B> objects only), or the <B>Seek</B> method (for table-type <B>Recordset</B> objects only).</P>
Cloning a recordset that resulted from running a <B>QueryDef</B> object doesn't run the query again.</P>
Using the <B>Close</B> method on either the original or duplicate object doesn't affect the other object. For example, using <B>Close</B> on the original <B>Recordset</B> does not close the clone.</P>
<P></P>
Note</P>
You can't use the <B>Clone</B> method with forward-only-scrolling snapshots.</P>
<P></P>
See Also</P>
<B>Bookmark </B>Property.</P>
Specifics (Microsoft Access)</P>
If you use the <B>Bookmark</B> property of a <B>Recordset</B> object in a Microsoft Access module, you must include an <B>Option Compare Binary</B> statement in the Declarations section of the module. A bookmark is a <B>Variant</B> array of <B>Byte</B> data, so the string comparison method for the module must be binary. If a bookmark is evaluated with a text-based string comparison method, such as the <B>Option Compare Text</B> statement or the default setting for the <B>Option Compare Database</B> statement, the current record may be set to an incorrect record.</P>
Example</P>
This example creates a <B>Recordset</B> object based on the Orders table in the Northwind database and uses the <B>Clone</B> method to create a second <B>Recordset</B> object. Each <B>Recordset</B> object has its own current record that can be moved independently of the other. A bookmark is used to initially make the same record current in both <B>Recordset</B> objects. </P>
<BR></P>
<PRE>Dim dbsNorthwind As DatabaseDim rstOriginal As Recordset, rstDuplicate _     As RecordsetDim strPosition As String</PRE>
<P></P>
<BR></P>
<PRE>Set dbsNorthwind = DBEngine.Workspaces(0).Databases("Northwind.mdb")
' Create first Recordset.
Set rstOriginal = dbsNorthwind![Orders].OpenRecordset(dbOpenDynaset)
strPosition = rstOriginal.Bookmark    ' Save current record position.
rstDuplicate = rstOriginal.Clone ()    ' Create duplicate. Recordset.rstDuplicate.Bookmark = strPosition    ' Go to same record.
</PRE>
Example (Microsoft Access)</P>
The following example creates a <B>Recordset</B> object using an SQL statement on an Employees table and then uses the <B>Clone</B> method to create a clone of the <B>Recordset</B> object so that bookmarks can be shared between the two objects. This technique is especially useful when you have to compare the results of a query from more than one point at the same time.</P>
The following function creates a dynaset-type <B>Recordset</B> object on an Employees table, then creates a clone of that <B>Recordset</B> object. The function reads and stores in a string variable the value of the <B>Bookmark</B> property for the current record, in this case the second record in the original <B>Recordset</B> object. The <B>Bookmark</B> property of the duplicate <B>Recordset</B> object is set to this string, making the second record the current record in this <B>Recordset</B> object as well. The current values of the LastName field for both recordsets are identical, as you can see once they are printed in the Debug window.</P>
<BR></P>
<PRE>Sub CreateClone()
    Dim dbs As Database
    Dim rstEmployees As Recordset, rstDuplicate As Recordset
    Dim fldName As Field, strBook As String

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    ' Open dynaset-type Recordset object.
    Set rstEmployees = dbs.OpenRecordset("SELECT * FROM Employees " &amp; _
        " ORDER by [LastName]")
    ' Clone Recordset object.
    Set rstDuplicate = rstEmployees.Clone
    Set fldName = rstEmployees.Fields!LastName
    ' Set current record.
    rstEmployees.MoveFirst
    ' Move to second record.
    rstEmployees.MoveNext
    ' Get Bookmark value and print current field value.
    If rstEmployees.Bookmarkable Then
        strBook = rstEmployees.Bookmark
        Debug.Print fldName.value
    Else
    ' If Recordset object doesn't support bookmarks, exit procedure.
        Exit Sub
    End If
    ' Set Bookmark property of clone to obtained value.</PRE>
<P></P>
<BR></P>
<PRE>    rstDuplicate.Bookmark = strBook
    Debug.Print fldName.value
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example displays a custom dialog box containing the lists of data from the CONTACTS and CUSTMR_ID fields in the Customer recordset of the NWINDEX.MDB database.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase </B>method.</P>
<BR></P>
<PRE>Dim db As Database
Dim rs1 As Recordset, rs2 As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs1 = db.OpenRecordset("SELECT * FROM Customer" _
    &amp; " WHERE [REGION] = 'WA' ORDER BY [CUSTMR_ID];")
Set theDialog = DialogSheets.Add
Set list1 = theDialog.ListBoxes.Add(78, 42, 84, 80)
Set list2 = theDialog.ListBoxes.Add(183, 42, 84, 80)
Set rs2 = rs1.Clone()
rs2.MoveFirst
Do Until rs1.EOF
    list1.AddItem (rs1.Fields("CONTACT").Value)
    rs1.MoveNext
Loop
Do Until rs2.EOF
    list2.AddItem (rs2.Fields("CUSTMR_ID").Value)
    rs2.MoveNext
Loop
rs1.Close
rs2.Close
db.Close
</PRE>
</P></BODY>
</HTML>

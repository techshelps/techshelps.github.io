<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Count Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Count Function</H2>Description</P>
Calculates the number of records returned by a query.</P>
Syntax</P>
<B>Count(</B><I>expr</I><B>)</B></P>
The <I>expr</I> placeholder represents a string expression identifying the field that contains the data you want to count or an expression that performs a calculation using the data in the field. Operands in <I>expr</I> can include the name of a table field or function (which can be either intrinsic or user-defined but not other SQL aggregate functions). You can count any kind of data, including text.</P>
Remarks</P>
You can use <B>Count</B> to count the number of records in an underlying query. For example, you could use <B>Count</B> to count the number of orders shipped to a particular country.</P>
Although <I>expr</I> can perform a calculation on a field, <B>Count</B> simply tallies the number of records. It doesn't matter what values are stored in the records.</P>
The <B>Count</B> function doesn't count records that have null fields unless <I>expr</I> is the asterisk (*) wildcard character. If you use an asterisk, <B>Count</B> calculates the total number of records, including those that contain null fields. <B>Count(</B>*<B>)</B> is considerably faster than <B>Count(</B>[<I>Column Name</I>]<B>)</B>. Don't enclose the asterisk in quotation marks (" "). The following example calculates the number of records in the Orders table:</P>
<BR></P>
<PRE>SELECT Count(*)AS TotalOrders FROM Orders;
</PRE>
If <I>expr</I> identifies multiple fields, the <B>Count</B> function counts a record only if at least one of the fields is not <B>Null</B>. If all of the specified fields are <B>Null</B>, the record isn't counted. Separate the field names with an ampersand (&amp;). The following example shows how you can limit the count to records in which either Shipped Date or Freight isn't <B>Null</B>:</P>
<BR></P>
<PRE>SELECT Count('ShippedDate &amp; Freight')<BR>AS [Not Null] FROM Orders;
</PRE>
You can use <B>Count</B> in a query expression. You can also use this expression in the <B>SQL</B> property of a <B>QueryDef</B> object or when creating a <B>Recordset</B> object based on an SQL query.</P>
See Also</P>
SQL Aggregate Functions, <B>Sum</B> Function.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, you can use the <B>Count</B> function in the query design grid, in an SQL statement in SQL view of the Query window, or in an SQL statement within Visual Basic code. You can also use the <B>Count</B> function in a calculated control on a form or report.</P>
<P></P>
The <B>Count</B> function is most useful in totals queries and crosstab queries. It functions the same way whether you create the query in the query design grid or as an SQL statement in SQL view.</P>
In the query design grid, you can create a new totals query by clicking the Totals button on the toolbar. The Total row is then inserted in the grid. You can set the Total cell beneath a field to the aggregate function to perform on the data in that field.</P>
The fastest way to count all the records in a query is to use the <B>Count(*)</B> function. You can use the <B>Count(*)</B> function in a calculated field in a query.</P>
For example, suppose you have an Orders table that has both an OrderID field and a ShipCity field. You can create a query that displays the number of orders sent to each city. Create a new totals query, and drag the ShipCity field to the query design grid. Set the Total cell beneath the ShipCity field to Group By.</P>
Next, create a calculated field by typing the following expression into a new Field cell.</P>
<BR></P>
<PRE>CountOfOrders: Count(*)
</PRE>
Then, set the Total cell beneath this field to Expression. When you run the query, it will display the number of orders sent to each city.</P>
You can view the SQL statement for this query by switching to SQL view. In this example, Microsoft Access creates the following SQL statement.</P>
<BR></P>
<PRE>SELECT DISTINCTROW Count(*) AS CountOfOrders, Orders.ShipCity
FROM Orders
GROUP BY Orders.ShipCity;
</PRE>
You can achieve the same results by dragging the OrderID field to the query design grid, and choosing Count in the Total cell beneath it. This query will be slightly slower than the one that uses the <B>Count(*)</B> function. Note the differences between the following SQL statements.</P>
<BR></P>
<PRE>SELECT DISTINCTROW Count(Orders.OrderID) 
AS CountOfOrderID, Orders.ShipCity
FROM Orders
GROUP BY Orders.ShipCity;
</PRE>
You can also use an SQL statement such as this one within Visual Basic code. For example, using the following code you can create a <B>Recordset</B> object based on the query defined by this SQL statement.</P>
<BR></P>
<PRE>Dim dbs As DatabAse, rst As Recordset, strSQL As String
Set dbs = CurrentDb
strSQL = "SELECT DISTINCTROW Count(*) AS CountOfOrders, Orders.ShipCity FROM Orders GROUP BY Orders.ShipCity;"</PRE>
<P></P>
<BR></P>
<PRE>Set rst = dbs.OpenRecordset(strSQL)
</PRE>
To use the <B>Count</B> function in a calculated control, set the control's <B>ControlSource</B> property to an expression containing the <B>Count</B> function. For example, to display the number of orders in a set of orders in a text box, enter the following expression in the <B>ControlSource</B> property of the text box.</P>
<BR></P>
<PRE>= Count([OrderID])
</PRE>
If you use the <B>Count</B> function in a calculated control, you can restrict the set of records against which the function is performed by setting the form's <B>Filter</B> property.</P>
Example</P>
This example uses the Orders table to calculate the number of orders shipped to the United Kingdom.</P>
<BR></P>
<PRE>SELECT Count(ShipCountry)AS [UK Orders] FROM Orders <BR>WHERE ShipCountry = 'UK';
</PRE>
Example (Microsoft Access)</P>
The following example assumes that you have an Orders table that contains a field called ShipCountry. You can use the <B>Count</B> function to calculate the number of orders shipped to the United Kingdom. Enter the following expression in SQL view in the Query window.</P>
<BR></P>
<PRE>SELECT Count([ShipCountry]) AS [UKOrders] FROM Orders <BR>WHERE [ShipCountry] = 'UK';
</PRE>
The next example creates a calculated control that displays the number of orders in the same Orders table. Open a new form and set its <B>RecordSource</B> property to Orders. Enter the following expression in the <B>ControlSource</B> property of a text box on the form. To apply a condition that limits the count to only some records, such as those for orders shipped to the United Kingdom, set the form's <B>Filter</B> property.</P>
<BR></P>
<PRE>= Count([ShipCountry])
</PRE>
</P></BODY>
</HTML>

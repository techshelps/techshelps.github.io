<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Refresh Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Refresh Method</H2>Applies To</P>
<B>Databases </B>Collection, <B>Documents </B>Collection, <B>Errors </B>Collection, <B>Fields </B>Collection, <B>Groups </B>Collection, <B>Indexes </B>Collection, <B>Parameters </B>Collection, <B>Properties </B>Collection, <B>QueryDefs </B>Collection, <B>Recordsets </B>Collection, <B>Relations </B>Collection, <B>TableDefs </B>Collection, <B>Users </B>Collection, <B>Workspaces </B>Collection.</P>
Description</P>
Updates the objects in a collection to reflect the current database's schema.</P>
Syntax</P>
<I>collection</I><B>.Refresh</B></P>
Remarks</P>
The <B>Refresh</B> method can't be used with collections that aren't persistent, such as <B>Databases</B>, <B>Recordsets</B>, or <B>Workspaces</B>.</P>
<P></P>
Note</P>
To determine the position that the Microsoft Jet database engine uses for <B>Field</B> objects in the <B>Fields</B> collection of a <B>QueryDef</B>, <B>Recordset</B>, or <B>TableDef</B> object, use the <B>OrdinalPosition</B> property of each <B>Field</B> object. The <B>Refresh</B> method may change the order of objects within the <B>Fields</B> collection, if the <B>OrdinalPosition</B> property of a <B>Field</B> object in the collection has been changed.</P>
<P></P>
Use the <B>Refresh</B> method in multiuser environments in which other users may change the database. You may also need to use it on any collections that are indirectly affected by changes to the database. For example, if you change a <B>Users</B> collection, you may need to refresh a <B>Groups</B> collection before using the <B>Groups</B> collection.</P>
<P></P>
Tip</P>
A collection is filled with objects the first time it's referred to and won't automatically reflect subsequent changes made to it by other users. If it's likely that a collection has been changed by another user, use the <B>Refresh</B> method on the collection immediately before carrying out any task in your application that assumes the presence or absence of a particular object in the collection. This will ensure that the collection is as up-to-date as possible.</P>
<P></P>
See Also</P>
<B>Append </B>Method,<B> Close </B>Method,<B> Delete </B>Method,<B> OrdinalPosition </B>Property,<B> Requery </B>Method.</P>
Example</P>
This example refreshes the <B>Tables</B> collection in a database in a multiuser environment in case another user has made changes.</P>
<BR></P>
<PRE>Dim wspDefault As Workspace, dbsNorthwind As Database
' Get default workspace.
Set wspDefault = DBEngine.Workspaces(0)
' Open database.
Set dbsNorthwind = wspDefault.OpenDatabase("Northwind.mdb")
...</PRE>
<P></P>
<BR></P>
<PRE>' Refresh possibly changed collection.
dbsNorthwind.Containers("Tables").Documents.Refresh
</PRE>
Example (Microsoft Access)</P>
The following example refreshes the <B>Indexes</B> collection of a <B>TableDef</B> object. In a database in a multiuser environment, you can use the <B>Refresh</B> method to show changes made by other users.</P>
<BR></P>
<PRE>Sub RefreshIndex()
    Dim dbs As Database, tdf As TableDef
    Dim idx As Index, fld As Field
    
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Employees
    tdf.Indexes.Refresh
    For Each idx In tdf.Indexes
        Debug.Print idx.Name; ":"
        For Each fld In idx.Fields
            Debug.Print "   "; fld.Name
        Next fld
    Next idx
End Sub
</PRE>
</P></BODY>
</HTML>

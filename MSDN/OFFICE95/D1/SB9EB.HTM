<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RecordCount Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>RecordCount Property</H2>Applies To</P>
Dynaset-Type <B>Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type <B>Recordset </B>Object,<B> </B>Table-Type<B> Recordset </B>Object,<B> TableDef </B>Object.</P>
Description</P>
Returns the number of records accessed in a Dynaset-type or Snapshot-type <B>Recordset</B> object, or the total number of records in a Table-type <B>Recordset</B> or <B>TableDef</B> object. This property setting is read-only.</P>
Return Values</P>
The return value is a <B>Long Integer</B>.</P>
Remarks</P>
Use the <B>RecordCount</B> property to find out how many records in a <B>Recordset</B> or <B>TableDef</B> object have been accessed. The <B>RecordCount</B> property doesn't indicate how many records are contained in a dynaset- or snapshot-type <B>Recordset</B> object until all records have been accessed.</P>
Once the last record has been accessed, the <B>RecordCount</B> property indicates the total number of undeleted records in the <B>Recordset</B> or <B>TableDef</B> object. To force the last record to be accessed, use the <B>MoveLast</B> method on the <B>Recordset</B> object. You can also use an SQL <B>Count</B> function to determine the approximate number of records your query will return.</P>
As your application deletes records in a dynaset-type <B>Recordset</B> object, the value of the <B>RecordCount</B> property decreases. However, records deleted by other users aren't reflected by the <B>RecordCount</B> property until the current record is positioned to a deleted record. If you execute a transaction that affects the <B>RecordCount</B> property setting and subsequently rolls back the transaction, the <B>RecordCount</B> property won't reflect the actual number of remaining records.</P>
The <B>RecordCount</B> property of a snapshot-type <B>Recordset</B> object isn't affected by changes in the underlying tables.</P>
A <B>Recordset</B> or <B>TableDef</B> object with no records has a <B>RecordCount</B> property setting of 0.</P>
When working with attached <B>TableDef</B> objects, the <B>RecordCount</B> property setting is always –1.</P>
Using the <B>Requery</B> method on a <B>Recordset</B> object resets the <B>RecordCount</B> property just as if the query were re-executed.</P>
See Also</P>
<B>MoveFirst</B>,<B> MoveLast</B>,<B> MoveNext</B>,<B> MovePrevious </B>Methods;<B> Requery </B>Method.</P>
Example</P>
This example creates a <B>Recordset </B>object based on the Employees table and then determines the number of records in the <B>Recordset</B>.</P>
<BR></P>
<PRE>Dim dbsNorthwind As Database, rstEmployees As Recordset
Dim lngTotal As Long
Set dbsNorthwind =  DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")</PRE>
<P></P>
<BR></P>
<PRE>Set rstEmployees = dbsNorthwind.OpenRecordset("Employees")
rstEmployees.MoveLast
lngTotal = rstEmployees.RecordCount
If lngTotal = -1 Then
    Debug.Print "Count not available."
End If
</PRE>
Example (Microsoft Access)</P>
The following example creates a <B>Recordset</B> object based on the Orders table and then determines the number of records in the <B>Recordset</B> object.</P>
<BR></P>
<PRE>Sub CountRecords()
    Dim dbs As Database, rstOrders As Recordset
    Dim lngTotal As Long

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    ' Open table-type Recordset object.
    Set rstOrders = dbs.OpenRecordset("Orders")
    ' Fully populate Recordset object.
    rstOrders.MoveLast
    Debug.Print rstOrders.RecordCount
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example displays the number of records in the Customer recordset in the NWINDEX.MDB database.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase </B>method.</P>
<BR></P>
<PRE>Sub CountRecords()
    Dim db As Database, rs As Recordset
    Set db = Workspaces(0).OpenDatabase(Application.Path _
        &amp; "\NWINDEX.MDB")
    Set rs = db.OpenRecordset("Customer")
    On Error GoTo errorHandler
    rs.MoveLast
    MsgBox "There are " &amp; rs.RecordCount &amp; " records in " _<BR>        &amp; rs.Name
    rs.Close
    db.Close
    Exit Sub
errorHandler:
    MsgBox "There are no records in " &amp; rs.Name
    rs.Close
    db.Close
End Sub
</PRE></BODY>
</HTML>

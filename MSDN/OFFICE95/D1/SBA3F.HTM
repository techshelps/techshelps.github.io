<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNION Operation</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>UNION Operation</h2>

Description</p>

Creates a union query, which combines the results of
two or more independent queries or tables.</p>

Syntax</p>

[TABLE] <i>query1</i> UNION [ALL]<i> </i>[TABLE] <i>query2</i>
<br>
[UNION [ALL]<i> </i>[TABLE] <i>query1&#150;n</i> [ ... ]]</p>

The UNION operation has this part.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="253pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top">Part</td>
        <TD valign="top">Description</td>
    </tr>
    <tr>
        <TD valign="top" colspan="2">&nbsp;</td>
    </tr>
    <tr>
        <TD valign="top"><i>query1&#150;n</i></td>
        <TD valign="top">A SELECT statement, the name of a stored
        query, or the name of a stored table preceded by the
        TABLE keyword.</td>
    </tr>
</TBODY></table>

<br>
</p>

Remarks</p>

You can merge the results of two or more queries,
tables, and SELECT statements, in any combination, in a single
UNION operation. The following example merges an existing table
named New Accounts and a SELECT statement:</p>

<br>
</p>

<pre>TABLE [New Accounts] UNION ALL
SELECT *
FROM Customers
WHERE OrderAmount &gt; 1000;
</pre>

By default, no duplicate records are returned when
you use a UNION operation; however, you can include the ALL
predicate to ensure that all records are returned. This also
makes the query run faster.</p>

All queries in a UNION operation must request the
same number of fields; however, the fields don't have to be of
the same size or data type.</p>

Use aliases only in the first SELECT clause because
they are ignored in any others. In the ORDER BY clause, refer to
fields by what they are called in the first SELECT clause.</p>

Notes</p>
<SPAN CLASS="list">
<ul>
    <li>You can use a GROUP BY and/or HAVING clause in each <i>query</i>
        argument to group the returned data.</li>
    <li>You can use an ORDER BY clause at the end of the last <i>query</i>
        argument to display the returned data in a specified
        order.</li>
</ul>
</SPAN>
See Also</p>

ALL, DISTINCT, DISTINCTROW, TOP Predicates; GROUP BY
Clause; HAVING Clause; INNER JOIN Operation; LEFT JOIN, RIGHT
JOIN Operations; ORDER BY Clause; SELECT Statement; SQL
Subqueries; WHERE Clause.</p>

Specifics (Microsoft Access)</p>

In Microsoft Access, the arguments for the UNION
operation (<i>query1, query2,...queryn</i>) can be a SELECT
statement, the name of a stored Microsoft Access query, or the
name of a stored Microsoft Access table preceded by the TABLE
reserved word.</p>

You can view a union query only in SQL view, not in
the query design grid.</p>

Example</p>

This example retrieves the names and cities of all
suppliers and customers in Brazil.</p>

<br>
</p>

<pre>SELECT CompanyName, City FROM Suppliers WHERE Country = &quot;Brazil&quot; UNION SELECT CompanyName, City FROM Customers WHERE Country = &quot;Brazil&quot;;
</pre>

This example retrieves the names and cities of all
suppliers and customers located in Brazil, using constants, an
alias, and ordering by an alias.</p>

<br>
</p>

<pre>SELECT CompanyName, City, &quot;Supplier&quot; AS Source FROM Suppliers 
WHERE Country = &quot;Brazil&quot; UNION SELECT CompanyName, City, &quot;Customer&quot; 
FROM Customers WHERE Country = &quot;Brazil&quot; ORDER BY City, Source;
</pre>

This example retrieves the names and cities of all
suppliers and customers in Brazil and the last names and cities
of all employees in South America.</p>

<br>
</p>

<pre>SELECT CompanyName, City FROM Suppliers WHERE Country = &quot;Brazil&quot; UNION SELECT CompanyName, City FROM Customers WHERE Country = &quot;Brazil&quot; UNION SELECT LastName, City FROM Employees WHERE Region = &quot;South America&quot;;
</pre>

This example retrieves the names and IDs of all
suppliers and customers. This union assumes that there are the
same number of columns in each table.</p>

<br>
</p>

<pre>TABLE Customers UNION TABLE Suppliers;
</pre>
</BODY>

</html>

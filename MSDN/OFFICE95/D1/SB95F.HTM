<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Data Access Objects</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Using Data Access Objects</H2>Data access objects provide a way to control your database from Visual Basic. If you are working in Microsoft Access, you can do many of the same things in Visual Basic code that you do from the Microsoft Access interface. Many data access objects have graphical representations in Microsoft Access. For instance, a <B>TableDef </B>object corresponds to a Microsoft Access table. </P>
Programming with data access objects gives you a finer degree of control over your application than you have from the Microsoft Access interface, and enables you to adapt your application to changing environments. You don't have to create an entire database from Visual Basic. To speed development, you can create objects in Microsoft Access and write Visual Basic code later to enhance and complete your application.</P>
If you are working in Microsoft Excel, you must use data access objects to manipulate your database, because Microsoft Excel does not have graphical representations of these objects. If you need to control a database from Microsoft Excel, you can create that database graphically in Microsoft Access and write code later to manipulate it from Microsoft Excel. Because both Microsoft Access and Microsoft Excel include the Jet database engine, both applications can use the same database files. Database files are saved with the .MDB filename extension.</P>
Data access objects represent the different components of a database. The objects have a hierarchical relationship to one another; one type of object or collection contains or is contained by another type of object or collection. For a graphical representation of the data access object hierarchy, see "Data Access Object Hierarchy" in the Appendix or in online Help.</P>
<P></P>
</P>
<H3><A NAME="sec0"></A>DBEngine Object</H3>At the top of the hierarchy is the <B>DBEngine </B>object. This object represents the Jet database engine. The <B>DBEngine </B>object exists whenever you launch Microsoft Access or reference the Microsoft DAO 3.0 Object Library in Microsoft Excel. You don't have to create it explicitly.</P>
<H3><A NAME="sec1"></A>Workspace Object</H3>The Jet database engine supports multiple sessions, each of which begins when a particular user logs on and ends when that user logs off. Each session is represented by a <B>Workspace </B>object. Unless you're programming security into your application, you're usually using the default <B>Workspace </B>object implicitly.</P>
<H3><A NAME="sec2"></A>Database Object</H3>Within a session, you can open one or more databases, each of which is represented by a <B>Database </B>object. A <B>Database </B>object corresponds to a saved .MDB file. A <B>Database </B>object contains all the other objects and the data in your database. If you're working in Microsoft Access, the database that is currently open can be represented by a <B>Database </B>object.</P>
<H3><A NAME="sec3"></A>TableDef, QueryDef Objects</H3>Within a <B>Database</B> object are the tables that contain data, represented by <B>TableDef </B>objects. <B>QueryDef </B>objects represent saved queries of any type and contain combined data from one or more tables. These objects are stored in the database file, so you don't have to recreate them each time you use them. The data in a table or query is organized into fields, represented by <B>Field </B>objects.</P>
<H3><A NAME="sec4"></A>Index Object</H3>An <B>Index </B>object corresponds to an index on a table. An index is a cross-reference on one or more fields in a table and enables faster access to data. An index is also useful for defining some rules about data, such as whether the combination of data entered in certain fields must be unique.</P>
<H3><A NAME="sec5"></A>Parameter Object</H3>A <B>Parameter </B>object represents any parameters defined for a query. You can use <B>Parameter </B>objects to change the values of query parameters from code before you run the query.</P>
<H3><A NAME="sec6"></A>Recordset Object</H3>A <B>Recordset </B>object represents a set of data, or recordset. A recordset is created using data in a table or query. Unlike tables and queries, however, recordsets are not stored to disk and must be re-created each time you use them. Data in <B>Recordset </B>objects is organized into <B>Field </B>objects representing fields in the underlying table or query.</P>
You can think of a <B>TableDef </B>or <B>QueryDef </B>object as an object that defines the structure of a table or query, and a <B>Recordset </B>object as the object that represents the data stored in the table or query. To add, delete, or change data in your database, you must create a <B>Recordset</B>. You can manipulate data by applying the methods of the <B>Recordset </B>and setting and returning its properties.</P>
There are three types of <B>Recordset </B>objects: table-type, dynaset-type, and snapshot-type. Not all <B>Recordset</B> types are updatable in all situations. To determine when you should use each one, see the topics discussing these objects.</P>
<P></P>
</P>
<H3><A NAME="sec7"></A>Relation Object</H3>A <B>Relation </B>object represents a relationship between fields in two tables in a database. Relationships are a key structural component of your database, in that they link like fields in your tables. They also determine how data in one table is affected when corresponding data in another table is changed or deleted.</P>
<H3><A NAME="sec8"></A>Container Object</H3>A <B>Container </B>object represents a type of object in your database. Both Microsoft Access and Microsoft Excel provide the Databases, Tables, and Relations <B>Container </B>objects. Microsoft Access also provides Forms, Modules, Reports, and Scripts <B>Container </B>objects.</P>
<H3><A NAME="sec9"></A>Document Object</H3>A <B>Document </B>object represents an object of the type defined by its corresponding <B>Container </B>object. For instance, each database has at least one Table <B>Document </B>object within the Tables <B>Container </B>object. You use <B>Container </B>and <B>Document </B>objects together with <B>User </B>and <B>Group </B>objects to program security into your application.</P>
<H3><A NAME="sec10"></A>User, Group Objects</H3>A <B>User </B>object represents a user account with certain access permissions. A <B>Group </B>object represents a group of user accounts with common access permissions. You use <B>User </B>and <B>Group </B>objects together with <B>Container </B>and <B>Document </B>objects to program security into your application.</P>
<H3><A NAME="sec11"></A>Error Object</H3>An <B>Error </B>object stores information about data access errors that have occurred. Several data access errors can occur at the same time; information about each is stored in an <B>Error </B>object in the <B>Errors </B>collection. The <B>Errors </B>collection is cleared each time a new error occurs.</P>
<H3><A NAME="sec12"></A>Property Object</H3>Every data access object has a set of properties, which are represented by <B>Property </B>objects and stored in the <B>Properties </B>collection associated with that object.</P></BODY>
</HTML>

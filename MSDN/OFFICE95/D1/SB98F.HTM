<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateRelation Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateRelation Method</H2>Applies To</P>
<B>Database </B>Object.</P>
Description</P>
Creates a new <B>Relation</B> object.</P>
Syntax</P>
<B>Set</B> <I>variable</I> = <I>database</I><B>.CreateRelation(</B>[<I>name</I>[, <I>table</I>[, <I>foreigntable</I>[, <BR><SPAN CLASS="Symbol">ú</SPAN><I>attributes</I>]]]]<B>)</B></P>
The <B>CreateRelation</B> method syntax uses these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="263pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>variable</I></P></TD><TD VALIGN="TOP">A variable declared as an object data type <B>Relation</B>.</P></TD></TR><TR><TD VALIGN="TOP"><I>database</I></P></TD><TD VALIGN="TOP">The variable name of the <B>Database</B> object you want to use to create the new <B>Relation</B> object.</P></TD></TR><TR><TD VALIGN="TOP"><I>name</I></P></TD><TD VALIGN="TOP">A <B>String</B> variable that uniquely names the new <B>Relation</B> object. See the <B>Name</B> property for details on valid <B>Relation</B> names.</P></TD></TR><TR><TD VALIGN="TOP"><I>table</I></P></TD><TD VALIGN="TOP">A <B>String</B> variable that names the primary table in the relation. If the table doesn't exist before you append the <B>Relation</B> object, a trappable error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><I>foreigntable</I></P></TD><TD VALIGN="TOP">A <B>String</B> variable that names the foreign table in the relation. If the table doesn't exist before you append the <B>Relation</B> object, a trappable error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><I>attributes</I></P></TD><TD VALIGN="TOP">A <B>Long</B> variable that contains information about the relationship type. See the <B>Attributes</B> property for details.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
The <B>Relation</B> object relays information to the Microsoft Jet database engine about the relationship between fields in two <B>TableDef </B>or <B>QueryDef</B> objects. The Jet database engine can provide referential integrity through the <B>Attributes</B> property.</P>
If you omit one or more of the optional parts when you use <B>CreateRelation</B>, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the object, none of its property settings can be altered. See the individual property topics for more details.</P>
Before you can use the <B>Append</B> method on a <B>Relation</B> object, you must append the appropriate <B>Field</B> objects to define the primary and foreign key relationship tables.</P>
If <I>name</I> refers to an object that is already a member of the collection or if the <B>Field</B> object names provided in the subordinate <B>Fields</B> collection are invalid, a trappable error occurs when you use the <B>Append</B> method.</P>
To remove a <B>Relation</B> object from a collection, use the <B>Delete</B> method on the collection.</P>
<P></P>
See Also</P>
<B>Append </B>Method,<B> Attributes </B>Property,<B> Delete </B>Method,<B> Name </B>Property,<B> TableDef </B>Object.</P>
Example</P>
This example creates a new <B>Relation</B> object. In this case, the Customers table is related to a ValidStates table. Once established, the relationship requires that an entry exist in the ValidStates table corresponding to the Customers.CustState field before it can be added to the Customers table. Any changes to the State field that violate this relationship trigger a trappable error. </P>
By setting the <B>dbRelationUpdateCascade</B> attribute, the Microsoft Jet database engine changes the Primary table Customers.CustState if a corresponding value changes in the ValidStates table. For example, if the ValidState entry TR was changed to TX, all Customers records having TR as a CustState code would be changed to TX. </P>
<BR></P>
<PRE>Dim relTableOne As Relation
Dim dbsNorthwind As Database
Dim fldCustState As Field
Set dbsNorthwind = DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
' Create new Relation object.
Set relTableOne = dbsNorthwind.CreateRelation("TableRelationOne")
relTableOne.Table = "Customers"    'Name the Primary Table.
relTableOne.ForeignTable = "ValidStates"    'Name the Foreign Table.
relTableOne.Attributes = dbRelationUpdateCascade
Set fldCustState = relTableOne.CreateField("CustState")
fldCustState.ForeignName = "StateCode"
relTableOne.Fields.Append fldCustState
' Save Relation definition by appending it to Relations collection.
dbsNorthwind.Relations.Append relTableOne
</PRE>
Example (Microsoft Access)</P>
The following example creates a new <B>Relation</B> object that defines a relationship between a Categories table and a Products table. The Categories table is the primary table in the relationship, and the Products table is the foreign table. The CategoryID field is the primary key in the Categories table, and a foreign key in the Products table.</P>
To test this example in the Northwind database, click Relationships on the Tools menu, and delete the relationship between the Categories table and the Products table. Close the Relationships window, saving the current configuration at the prompt. Run the following procedure. Then view the Relationships window again to see the new relationship.</P>
<BR></P>
<PRE>Sub NewRelation()
    Dim dbs As Database, rel As Relation, fld As Field
    
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb</PRE>
<P></P>
<BR></P>
<PRE>    ' Create new Relation object and specify foreign table.
    Set rel = dbs.CreateRelation("CategoryID", "Categories", "Products")
    ' Set attributes to enforce referential integrity.
    rel.Attributes = dbRelationUpdateCascade + dbRelationDeleteCascade
    ' Create field in relation.
    Set fld = rel.CreateField("CategoryID")
    ' Specify field name in foreign table.
    fld.ForeignName = "CategoryID"
    ' Append Field object to Fields collection of Relation object.
    rel.Fields.Append fld
    ' Append Relation object to Relations collection.
    dbs.Relations.Append rel
End Sub
</PRE>
</P></BODY>
</HTML>

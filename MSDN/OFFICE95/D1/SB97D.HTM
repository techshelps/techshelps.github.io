<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Close Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Close Method</H2>Applies To</P>
<B>Database </B>Object,<B> </B>Dynaset-Type<B> Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type<B> Recordset </B>Object,<B> </B>Table-Type<B> Recordset </B>Object,<B> Workspace </B>Object.</P>
Description</P>
Closes an open data access object.</P>
Syntax</P>
<I>object</I><B>.Close</B></P>
The <I>object</I> placeholder represents the name of an open <B>Database</B>, <B>Recordset</B>, or <B>Workspace</B> object.</P>
<P></P>
Remarks</P>
Closing an open object removes it from the collection to which it's appended. Any attempt to close the default workspace is ignored.</P>
To remove objects from collections other than the <B>Databases</B>, <B>Recordsets</B>, and <B>Workspaces</B> collections, use the <B>Delete</B> method on those collections.</P>
<P></P>
Caution</P>
Use the <B>Update</B> method (if there are pending edits) and the <B>Close</B> method on all open recordset objects before you close a database. If you exit a procedure that declares recordset or <B>Database</B> objects, the database<B> </B>is closed, any unsaved changes are lost, all pending transactions are rolled back, and any pending edits to your data are lost.</P>
<P></P>
If you try to close a <B>Database</B> object while any recordset objects are open, or if you try to close a <B>Workspace</B> object while any <B>Database</B> objects belonging to that specific <B>Workspace</B> are open, those <B>Recordset</B> objects will be closed and any pending updates or edits will be rolled back.</P>
If you try to close a <B>Workspace</B> object while any <B>Database</B> objects belonging to it are open, the operation closes all <B>Database</B> objects belonging to that specific <B>Workspace</B> object which may result in <B>Recordset</B> objects being closed and pending edits lost.</P>
If the <B>Database</B> object is defined outside the scope of the procedure, and you exit the procedure without closing it, the <B>Database</B> object will remain open until explicitly closed or the module in which it is defined is out of scope.</P>
If the <B>Database</B>, <B>Recordset</B>, or <B>Workspace </B>object named by <I>object</I> is already closed when you use <B>Close</B>, a trappable error occurs.</P>
Using the <B>Close</B> method on either the original or duplicate object doesn't affect the other object. For example, using <B>Close</B> on the original <B>Recordset</B> does not close the clone.</P>
See Also</P>
<B>Clone </B>Method,<B> Delete </B>Method,<B> OpenDatabase </B>Method,<B> OpenRecordset </B>Method.</P>
Specifics (Microsoft Access)</P>
If a Visual Basic procedure contains an object variable that represents the database currently open in Microsoft Access, using the <B>Close</B> method on that object will cause the variable to go out of scope. The <B>Close</B> method will not affect the database that is open in the Microsoft Access Database window.</P>
Example</P>
This example opens and then closes a database and a table-type <B>Recordset</B> object for the Customers table<B> </B>in the database.</P>
<BR></P>
<PRE>Dim dbsNorthwind As Database, rstCustomers As Recordset
' Open database.
Set dbsNorthwind = DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
' Open table.
Set rstCustomers = dbsNorthwind.OpenRecordset("Customers")</PRE>
<P></P>
<BR></P>
<PRE>...
rstCustomers.Close    ' Close recordset.
dbsNorthwind.Close    ' Close database.
</PRE>
Example (Microsoft Access)</P>
The following example creates a <B>Database</B> object that points to the current database and opens a table-type <B>Recordset</B> object based on a Customers table in the database. It then uses the <B>Close</B> method on these object variables, which causes them to go out of scope and frees the memory resources they have been using.</P>
<BR></P>
<PRE>Sub UseClose()
    Dim dbs As Database, rst As Recordset

    ' Return Database object that represents current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset.
    Set rst = dbs.OpenRecordset("Customers")
    .
    .
    .
    rst.Close                    ' Close recordset.
    dbs.Close                    ' Close database.
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example opens the Customer recordset of the NWINDEX.MDB database, counts how many records are available, and enters the result on Sheet1.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase</B> method.</P>
<BR></P>
<PRE>Dim db As Database, rs As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("Customer")
Set resultsSheet = Sheets("Sheet1")
resultsSheet.Activate
With resultsSheet.Cells(1, 1)
    .Value = "Records in " &amp; rs.Name &amp; " table:"
    .Font.Bold = True
    .EntireColumn.AutoFit
End With
rs.MoveLast
resultsSheet.Cells(1, 2).Value = rs.RecordCount
rs.Close
db.Close
</PRE>
<P></P></BODY>
</HTML>

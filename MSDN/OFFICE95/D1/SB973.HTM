<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Append Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Append Method</H2>Applies To</P>
<B>Documents </B>Collection;<B> Fields </B>Collection;<B> Groups </B>Collection;<B> Indexes </B>Collection;<B> Properties </B>Collection;<B> QueryDefs </B>Collection;<B> Relations </B>Collection;<B> TableDefs </B>Collection;<B> Users </B>Collection;<B> Workspaces </B>Collection.</P>
Description</P>
Adds a new data access object to a collection.</P>
Syntax</P>
<I>collection</I><B>.Append</B> <I>object</I></P>
The <B>Append</B> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>collection</I></P></TD><TD VALIGN="TOP">Any collection that can accept new objects (for limitations, see the following table).</P></TD></TR><TR><TD VALIGN="TOP"><I>object</I></P></TD><TD VALIGN="TOP">A variable of an object data type identifying the object being appended, which must be of the same type as the elements of <I>collection.</I></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
Uses of the <B>Append</B> method include adding a new table to a database, adding a field to a table, and adding a field to an index.</P>
The appended object becomes a persistent object, stored on disk, until you delete it using the <B>Delete</B> method. If the collection is a <B>Workspaces</B> collection (which is stored only in memory), the object is active until you remove it using the <B>Close</B> method.</P>
<P></P>
The addition of a new object occurs immediately, but you should use the <B>Refresh</B> method on any other collections that may be affected by changes to the database structure.</P>
If the object being appended isn't complete (such as when you haven't appended any <B>Field</B> objects to a <B>Fields</B> collection of an <B>Index</B> object before it's appended to an <B>Indexes</B> collection) or if the properties set in one or more subordinate objects are incorrect, the <B>Append</B> method triggers a trappable error. For example, if you haven't specified a field type and then try to append the <B>Field</B> object to the <B>Fields</B> collection in a <B>TableDef</B> object, the <B>Append</B> method triggers a trappable error.</P>
The following table shows some limitations on the use of the <B>Append</B> method. The object in the first column is an object containing the collection in the second column. The third column indicates when, if ever, you can append an object to that collection (for example, you can never append a <B>Container</B> object to the <B>Containers</B> collection of a <B>Database</B> object).</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="112pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="145pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Object</P></TD><TD VALIGN="TOP">Collection</P></TD><TD VALIGN="TOP">When you can use Append</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Workspace</B></P></TD><TD VALIGN="TOP"><B>Databases</B></P></TD><TD VALIGN="TOP">Never; use the <B>OpenDatabase</B> method instead</P></TD></TR><TR><TD VALIGN="TOP"><B>Database</B></P></TD><TD VALIGN="TOP"><B>Containers</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>Database</B></P></TD><TD VALIGN="TOP"><B>Recordsets</B></P></TD><TD VALIGN="TOP">Never; use the <B>OpenRecordset</B> method instead</P></TD></TR><TR><TD VALIGN="TOP"><B>Container</B></P></TD><TD VALIGN="TOP"><B>Documents</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>Index</B></P></TD><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">When the <B>Index</B> object is a new, unappended object</P></TD></TR><TR><TD VALIGN="TOP"><B>QueryDef</B></P></TD><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>QueryDef</B></P></TD><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>Recordset</B></P></TD><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>Relation</B></P></TD><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">Never</P></TD></TR><TR><TD VALIGN="TOP"><B>TableDef</B></P></TD><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">When the <B>Updatable</B> property of the <B>TableDef</B> is set to <B>True</B></P></TD></TR><TR><TD VALIGN="TOP"><B>TableDef</B></P></TD><TD VALIGN="TOP"><B>Indexes</B></P></TD><TD VALIGN="TOP">When the <B>Updatable</B> property of the <B>TableDef</B> is set to <B>True</B></P></TD></TR><TR><TD VALIGN="TOP"><B>Database</B>, <B>Field,</B> <B>Index</B>, <B>QueryDef</B>, <B>TableDef</B></P></TD><TD VALIGN="TOP"><B>Properties</B></P></TD><TD VALIGN="TOP">When the <B>Database</B>, <B>Field</B>, <B>Index</B>, <B>QueryDef</B>, or <B>TableDef</B> is persistent</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
See Also</P>
<B>Delete </B>Method,<B> GetChunk </B>Method,<B> Refresh </B>Method,<B> Type </B>Property.</P>
<P></P>
Example</P>
The following example defines a new field and appends it to a <B>Fields</B> collection.</P>
<BR></P>
<PRE>Dim dbsBiblio As Database, fldPhone As Field, tdfAuthors As TableDef
            ' Open a database.
Set dbsBiblio = DBEngine.Workspaces(0).OpenDatabase("Biblio.mdb")
Set tdfAuthors = dbsBiblio.TableDefs("Authors")
Set fldPhone = dbsBiblio.CreateField()
fldPhone.Name = "Phone"    ' Set field properties.
fldPhone.Type = dbText
fldPhone.Size = 15
' Append field to collection.
dbsBiblio.tdfAuthors.Fields.Append fldPhone
dbsBiblio.tdfAuthors.Fields.Delete "Phone"
dbsBiblio.Close
</PRE>
Example (Microsoft Access)</P>
The following example defines a new <B>Field</B> object and appends it to the <B>Fields</B> collection of a <B>TableDef</B> object.</P>
<BR></P>
<PRE>Sub NewField()
    Dim dbs As Database, tdf As TableDef, fld As Field

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Employees
    ' Create new field in Employees table.
    Set fld = tdf.CreateField("SocialSecurity#", dbText, 15)
    ' Append field to collection.
    dbs.TableDefs!Employees.Fields.Append fld
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example creates a new database (NWINDEX.MDB). The example attaches two tables from the C:\Program Files\Common Files\Microsoft Shared\MSquery folder to the database. (On Windows NT&trade;, the two tables are in the \WINDOWS\MSAPPS\MSQUERY folder.)</P>
<BR></P>
<PRE>Const sourceDir = "C:\Program Files\Common Files\Microsoft Shared\"

Sub createNWindEx()
    Dim nWindEx As Database, customerTable As TableDef, _<BR>        supplierTable As TableDef
    Dim dataSource As String
    dataSource = "dbase IV;DATABASE=" &amp; sourceDir &amp; "MSquery"    appPath = Application.Path
    Set nWindEx = Workspaces(0).CreateDatabase(Application.Path _
        &amp; "\NWINDEX.MDB", dbLangGeneral)
    Set customerTable = nWindEx.CreateTableDef("Customer")
    customerTable.Connect = dataSource
    customerTable.SourceTableName = "Customer"
    nWindEx.TableDefs.Append customerTable
    Set supplierTable = nWindEx.CreateTableDef("Supplier")</PRE>
<P></P>
<BR></P>
<PRE>    supplierTable.Connect = dataSource
    supplierTable.SourceTableName = "Supplier"
    nWindEx.TableDefs.Append supplierTable
    MsgBox "The database " &amp; nWindEx.Name &amp; " has been created."
    nWindEx.Close
End Sub
</PRE>
</P></BODY>
</HTML>

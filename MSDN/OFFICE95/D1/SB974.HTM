<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AppendChunk Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>AppendChunk Method</H2>Applies To</P>
<B>Field </B>Object.</P>
Description</P>
Appends data from a string expression to a Memo or OLE Object <B>Field</B> object in the <B>Fields</B> collection of a <B>Recordset</B> object.</P>
Syntax</P>
<I>recordset</I><I> </I><B>!</B> <I>field</I><B>.AppendChunk</B> <I>source</I></P>
The <B>AppendChunk</B> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>recordset</I></P></TD><TD VALIGN="TOP">A variable of an object data type that refers to the <B>Recordset</B> object containing the <B>Fields</B> collection.</P></TD></TR><TR><TD VALIGN="TOP"><I>field</I></P></TD><TD VALIGN="TOP">The name of a <B>Field</B> object whose <B>Type</B> property is set to <B>dbMemo</B> (Memo), <B>dbLongBinary</B> (OLE Object), or the equivalent.</P></TD></TR><TR><TD VALIGN="TOP"><I>source</I></P></TD><TD VALIGN="TOP">A string expression or variable containing the data you want to append to the <B>Field</B> object specified by <I>field.</I></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
You can use the <B>AppendChunk</B> and <B>GetChunk</B> methods to access subsets of data in a Memo and OLE Object field.</P>
You can also use these methods to conserve string space when you work with Memo and OLE Object fields. Certain operations (copying, for example) involve temporary strings. If string space is limited, you may need to work with chunks of a field instead of the entire field.</P>
If there is no current record when you use <B>AppendChunk</B>, an error occurs.</P>
<P></P>
Note</P>
The initial <B>AppendChunk</B> (after the first <B>Edit</B> method), even if the record already contains data, will simply place the data in the field as the only data. Subsequent <B>AppendChunk</B> calls within a single <B>Edit</B> session will then add to the data.</P>
<P></P>
See Also</P>
<B>FieldSize </B>Method,<B> GetChunk </B>Method,<B> Type </B>Property.</P>
<P></P>
Example</P>
This example uses the <B>GetChunk</B> method to return consecutive 16K chunks of the Notes field in the Employees table of the database Northwind.mdb. It uses <B>FieldSize</B> to determine how many chunks it needs to copy and then copies the chunks to the string array NoteArray() where they can be changed. It then uses <B>AppendChunk</B> to copy NoteArray() back to Notes.</P>
<BR></P>
<PRE>' This line should be in Declarations section.
Option Base 1

Sub GetNotes
    Const ChunkSize = 16384    ' Set size of chunk.
    Dim intChunks As Integer, lngTotalSize As Long, intX As Integer
    Dim dbsNorthwind As Database, rstEmployees As Recordset
    Set dbsNorthwind = _<BR>        DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
            ' Open table.
    Set rstEmployees = dbsNorthwind.OpenRecordset("Employees")   
    ' Get field size.
    lngTotalSize = rstEmployees![Notes].FieldSize()   
    ' How many chunks?
    intChunks = lngTotalSize\ChunkSize - (lngTotalSize Mod ChunkSize _ <BR>        &lt;&gt; 0)
    ReDim NoteArray(intChunks) As String * ChunkSize
    ' Get current Notes field.
    For intX = 1 To intChunks
        NoteArray(intX) = rstEmployees![Notes].GetChunk((intX - 1) * _
            ChunkSize, ChunkSize)
    Next intX
    ...        ' Make changes.
    rstEmployees.Edit    ' Enable editing.
    rstEmployees!Notes = ""    ' Initialize Notes field.
    For intX = 1 To intChunks
        ' Replace with edited Notes.
        rstEmployees![Notes].AppendChunk NoteArray(intX)
    Next intX
    rstEmployees.Update    ' Save changes.
    rstEmployees.Close
dbsNorthwind.Close     ' Close database.
End Sub
</PRE>
Example (Microsoft Access)</P>
The following example appends data to a Notes field in an Employees table. The Notes field is Memo data type. The procedure then returns the contents of the field using the <B>GetChunk</B> method, adds to the data, and appends the altered data back to the Notes field using the <B>AppendChunk</B> method.</P>
<BR></P>
<PRE>Sub AddToMemo()
    Dim dbs As Database, rst As Recordset
    Dim fldNotes As Field, fldFirstName As Field
    Dim lngSize As Long, strChunk As String</PRE>
<P></P>
<BR></P>
<PRE>    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees")
    Set fldNotes = rst.Fields!Notes
    Set fldFirstName = rst.Fields!FirstName
    rst.MoveLast                ' Populate Recordset object.
    rst.MoveFirst            ' Move to first record.
    Do Until rst.EOF            
        ' Determine size of field in current record.
        lngSize = fldNotes.FieldSize
        If lngSize = 0 Then
            MsgBox "No text in " &amp; fldNotes.Name &amp; " field!"
            Exit Do
        Else
            ' Return contents of Notes field.
            strChunk = fldNotes.GetChunk(0, lngSize)
            ' Alter data.
            strChunk = strChunk &amp; "  " &amp; fldFirstName.Value &amp; _
                " is a terrific employee!"
            With rst
                .Edit                ' Enable editing.
                .[Notes] = ""            ' Initialize field.
                .[Notes].AppendChunk strChunk    ' Append altered data.
                .Update            ' Save changes.
                .MoveNext            ' Move to next record.
            End With
        End If
    Loop
End Sub
</PRE>
</P></BODY>
</HTML>

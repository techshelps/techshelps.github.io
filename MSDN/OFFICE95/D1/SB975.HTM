<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Attributes Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Attributes Property</H2>Applies To</P>
<B>Field </B>Object,<B> Relation </B>Object,<B> TableDef </B>Object.</P>
Description</P>
Sets or returns a value that indicates one or more characteristics of a <B>Field</B> object, a <B>Relation</B> object, or a <B>TableDef</B> object. For an object not yet appended to a collection, this property is read/write. For an appended <B>TableDef</B> object, the property is read/write, although not all of the constants may be set if the object is appended, as noted below.</P>
<P></P>
Settings and Return Values</P>
The data type of the setting or return value is <B>Long</B>.</P>
<P></P>
For a <B>Field</B> object, the value<I> </I>specifies characteristics of the field represented by the <B>Field</B> object and can be a sum of these constants.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="115pt" VALIGN="TOP"><COL WIDTH="233pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Constant</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dbFixedField</B></P></TD><TD VALIGN="TOP">The field size is fixed (default for Numeric fields).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbVariableField</B></P></TD><TD VALIGN="TOP">The field size is variable (Text fields only).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbAutoIncrField</B></P></TD><TD VALIGN="TOP">The field value for new records is automatically incremented to a unique <B>Long</B> integer that can't be changed (supported only for Microsoft Jet database tables).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbUpdatableField</B></P></TD><TD VALIGN="TOP">The field value can be changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbDescending</B></P></TD><TD VALIGN="TOP">The field is sorted in descending (Z to A or 100 to 0) order (applies only to a <B>Field</B> object in a <B>Fields</B> collection of an <B>Index</B> object). If you omit this constant, the field is sorted in ascending (A to Z or 0 to 100) order (default).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbSystemField</B></P></TD><TD VALIGN="TOP">The field is a replication field (on a <B>TableDef</B> object) used on replicable databases and cannot be deleted.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
For a <B>Relation</B> object, value<I> </I>specifies characteristics of the relationship represented by the <B>Relation</B> object and can be a sum of these constants.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="160pt" VALIGN="TOP"><COL WIDTH="188pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Constant</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dbRelationUnique</B></P></TD><TD VALIGN="TOP">Relationship is one-to-one.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbRelationDontEnforce</B></P></TD><TD VALIGN="TOP">Relationship isn't enforced (no referential integrity).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbRelationInherited</B></P></TD><TD VALIGN="TOP">Relationship exists in a noncurrent database that contains the two attached tables.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbRelationUpdateCascade</B></P></TD><TD VALIGN="TOP">Updates will cascade.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbRelationDeleteCascade</B></P></TD><TD VALIGN="TOP">Deletions will cascade.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
Note</P>
If you set the <B>Relation</B> object's <B>Attributes</B> property to activate cascade operations, the Microsoft Jet database engine automatically updates or deletes records in one or more other tables when changes are made to related primary key tables.</P>
For example, suppose you establish a cascade delete relationship between a Customers table and an Orders table. When you delete records from the Customers table, records in the Orders table related to that customer are also deleted. In addition, if you establish cascade delete relationships between the Orders table and other tables, records from those tables are automatically deleted when you delete records from the Customers table.</P>
<P></P>
For a <B>TableDef</B> object, value<I> </I>specifies characteristics of the table represented by the <B>TableDef</B> object and can be a sum of these <B>Long</B> constants.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="218pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Constant</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dbAttachExclusive</B></P></TD><TD VALIGN="TOP">For databases that use the Jet database engine, indicates the table is an attached table opened for exclusive use. This constant can be set on an appended <B>TableDef</B> object for a local table, but not for a remote table.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbAttachSavePWD</B></P></TD><TD VALIGN="TOP">For databases that use the Jet database engine, indicates that the user ID and password for the remotely attached table are saved with the connection information. This constant can be set on an appended <B>TableDef</B> object for a remote table, but not for a local table.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbSystemObject</B></P></TD><TD VALIGN="TOP">Indicates the table is a system table provided by the Jet database engine. This constant can be set on an appended <B>TableDef</B> object.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbHiddenObject</B></P></TD><TD VALIGN="TOP">Indicates the table is a hidden table provided by the Jet database engine. This constant can be set on an appended <B>TableDef</B> object.</P></TD></TR><TR><TD VALIGN="TOP"><B>dbAttachedTable</B></P></TD><TD VALIGN="TOP">Indicates the table is an attached table from a non-ODBC database, such as a Microsoft Jet or Paradox&reg; database (read-only).</P></TD></TR><TR><TD VALIGN="TOP"><B>dbAttachedODBC</B></P></TD><TD VALIGN="TOP">Indicates the table is an attached table from an ODBC database, such as Microsoft SQL Server (read-only).</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
These constants are listed in the Data Access (DAO) object library in the Object Browser.</P>
For a <B>Field</B> object, use of the <B>Attributes</B> property depends on the object that contains the <B>Fields</B> collection that the <B>Field</B> object is appended to, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="218pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Object appended to</P></TD><TD VALIGN="TOP">Usage</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Index</B></P></TD><TD VALIGN="TOP">Read/write until the <B>TableDef</B> object that the <B>Index</B> object is appended to is appended to a <B>Database</B> object; then the property is read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>QueryDef</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Recordset</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Relation</B></P></TD><TD VALIGN="TOP">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><B>TableDef</B></P></TD><TD VALIGN="TOP">Read/write</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
For a <B>Relation</B> object, the <B>Attributes</B> property setting is read-only for an object appended to a collection.</P>
<P></P>
When setting multiple attributes, you can combine them by summing the appropriate constants. Any nonmeaningful values are ignored without producing an error. For example, to use the <B>Attributes</B> property to make the Text field represented by a new <B>Field</B> object variable-sized and changeable, you can use this code:</P>
<BR></P>
<PRE>fldLastName.Attributes = dbVariableField + dbUpdatableField
</PRE>
Example (Microsoft Access)</P>
The following example checks the <B>Attributes</B> property for each table in the current database, and prints the names of system and hidden tables provided by the Microsoft Jet database engine.</P>
Note that the <B>And</B> operator performs a bitwise comparison to determine whether an attribute is currently set.</P>
<BR></P>
<PRE>Sub CheckAttributes()
    Dim dbs As Database, tdf As TableDef

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    For Each tdf In dbs.TableDefs
        ' Compare property setting and constant in question.
        If (tdf.Attributes And dbSystemObject) Or _
            (tdf.Attributes And dbHiddenObject) Then
            Debug.Print tdf.Name
        End If
    Next tdf
End Sub
</PRE>
</P></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IgnoreNulls Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>IgnoreNulls Property</H2>Applies To</P>
<B>Index </B>Object.</P>
Description</P>
Sets or returns a value that indicates whether records that have <B>Null</B> values in their index fields have index entries. This property is read/write for a new <B>Index</B> object not yet appended to a collection and read-only for an existing <B>Index</B> object in an <B>Indexes</B> collection.</P>
Settings and Return Values</P>
This property is a Boolean expression that indicates index entries. The data type is Boolean. <B>True</B> (-1) indicates that the fields with <B>Null</B> values don't have an index entry.</P>
Remarks</P>
To make searching for records using a field faster, you can define an index for the field. If you allow <B>Null</B> entries in an indexed field and expect many of the entries to be <B>Null</B>, you can set the <B>IgnoreNulls</B> property for the <B>Index</B> object to <B>True</B> to reduce the amount of storage space that the index uses.</P>
The <B>IgnoreNulls </B>property setting and the <B>Required</B> property setting together determine whether a record with a <B>Null</B> index value has an index entry, as the following table shows.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="60pt" VALIGN="TOP"><COL WIDTH="198pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">IgnoreNulls</P></TD><TD VALIGN="TOP">Required</P></TD><TD VALIGN="TOP">Null in index field</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>True</B></P></TD><TD VALIGN="TOP"><B>False</B></P></TD><TD VALIGN="TOP"><B>Null</B> value allowed; no index entry added</P></TD></TR><TR><TD VALIGN="TOP"><B>False</B></P></TD><TD VALIGN="TOP"><B>False</B></P></TD><TD VALIGN="TOP"><B>Null</B> value allowed; index entry added</P></TD></TR><TR><TD VALIGN="TOP"><B>True</B> or <B>False</B></P></TD><TD VALIGN="TOP"><B>True</B></P></TD><TD VALIGN="TOP"><B>Null</B> value not allowed; no index entry added</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
See Also</P>
<B>Required </B>Property.</P>
Example (Microsoft Access)</P>
The following example adds a new index to a <B>TableDef</B> object, makes that index the current index, and invokes the <B>Seek</B> method based on that index. The names of the <B>Field</B> objects created and appended to the <B>Fields</B> collection of the <B>Index</B> object correspond to the names of current fields in the table.</P>
<BR></P>
<PRE>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef
    Dim idx As Index, fldID As Field, fldName As Field
</PRE>
<P></P>
<BR></P>
<PRE>    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Products
    ' Return Index object that points to new index.
    Set idx = tdf.CreateIndex("IDName")
    ' Create and append index fields.
    Set fldID = idx.CreateField("ProductID")
    Set fldName = idx.CreateField("ProductName")
    idx.Fields.Append fldID
    idx.Fields.Append fldName
    ' Set index properties.
    idx.IgnoreNulls = True
    idx.Unique = True
    ' Append the new Index object to the Indexes collection.
    tdf.Indexes.Append idx
End Sub
</PRE>
</P></BODY>
</HTML>

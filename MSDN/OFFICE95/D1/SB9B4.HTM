<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Field Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Field Object</h2>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Description</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

A <b>Field</b> object
represents a column of data with a common data type and a common
set of properties.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Remarks</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

The <b>Fields</b> collections
of <b>Index</b>, <b>QueryDef</b>, <b>Relation</b>, and <b>TableDef</b>
objects contain the specifications for the fields those objects
represent. The <b>Fields</b> collection of a <b>Recordset</b>
object represents the <b>Field</b> objects in a row of data, or
in a record. You use the <b>Field</b> objects in a <b>Recordset</b>
object to read and set values for the fields in the current
record of the <b>Recordset</b> object.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You manipulate a field using a <b>Field</b>
object and its methods and properties. For example, you can:</p>

<ul>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Get or set the presentation order of
        the <b>Field</b> object in a <b>Fields</b> collection
        using the <b>OrdinalPosition</b> property.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Read the <b>SourceField</b> and <b>SourceTable</b>
        property settings to determine the original source of the
        data.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Read or set the <b>ForeignName</b>
        property setting for a field in a <b>Relation</b> object.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Read or set the <b>AllowZeroLength</b>,
        <b>DefaultValue</b>, <b>Required</b>, <b>ValidateOnSet</b>,
        <b>ValidationRule</b>, or <b>ValidationText</b> property
        setting to find or specify validation conditions.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Read or set the <b>Value</b>
        property of a <b>Recordset</b> object.</li>
    <li>

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Use the <b>AppendChunk</b>, <b>FieldSize</b>,
        and <b>GetChunk</b> methods to get or set a value in an
        OLE Object or Memo field of a <b>Recordset</b> object.</li>
</ul>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You can refer to the <b>Value</b>
property of a <b>Field</b> object that you create and append to a
<b>Fields</b> collection by its <b>Name</b> property setting
using following syntax:</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>Fields</b>(&quot;<i>name</i>&quot;)</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Note</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Fields that have names with
embedded spaces must be delimited with brackets ([ ]), for
example [Part Number], or enclosed in single quotation marks
('&nbsp;') or double quotation marks (&quot; &quot;), as in 'Part
Number' or &quot;Part Number&quot;.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

You can also refer to the <b>Value</b>
property of a <b>Field</b> object that you create and append to a
<b>Fields</b> collection by its position in the <b>Fields</b>
collection using this syntax:</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>Fields</b>(0)</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

To create a new <b>Field</b>
object in an <b>Index</b>, <b>TableDef</b>, or <b>Relation</b>
object, use the <b>CreateField </b>method.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

When the <b>Field</b> object is
accessed as part of a <b>Recordset</b> object, data from the
current record is visible in the <b>Field</b> object's <b>Value</b>
property. To manipulate data in the <b>Recordset</b> object, you
don't usually reference the <b>Fields</b> collection directly;
instead you indirectly reference the <b>Value</b> property of the
<b>Field</b> object in the <b>Fields</b> collection of the <b>Recordset</b>
object, as in the following example.</p>

&nbsp;</p>

<pre>Dim dbsCatalog As Database, rstParts As Recordset
Dim strSelect As String

Set dbsCatalog = Workspaces(0).OpenDatabase(&quot;Catalog.mdb&quot;)
strSelect = &quot;SELECT [Part Name], Size,  &quot; _
    &amp; &quot;[Part Type], [Part Age] AS Age FROM Parts&quot;
Set rstParts = dbsCatalog.OpenRecordset(strSelect)</pre>

<br>
</p>

<pre>'Return Part Name field in Recordset object.
Debug.Print rstParts.Fields(0).Value
' Otherwise, use indirect coding.
Debug.Print rstParts(0)    ' Return value of Part Name field.
Debug.Print rstParts![Part Name]    ' Also return Part Name field value.
Debug.Print rstParts![Part Type]    ' Return Part Type field.
Debug.Print rstParts!Age    ' Return Part Age field aliased as Age.
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Properties</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>AllowZeroLength </b>Property;<b>
Attributes </b>Property;<b> CollatingOrder </b>Property;<b>
DataUpdatable </b>Property;<b> DefaultValue </b>Property;<b>
ForeignName </b>Property;<b> Name </b>Property;<b>
OrdinalPosition </b>Property;<b> Required </b>Property;<b> Size </b>Property;<b>
SourceField</b>,<b> SourceTable </b>Properties;<b> Type </b>Property;<b>
V1xNullBehavior </b>Property;<b> ValidateOnSet </b>Property;<b>
ValidationRule </b>Property;<b> ValidationText </b>Property;<b>
Value </b>Property.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Methods</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>AppendChunk </b>Method,<b>
CreateProperty </b>Method,<b> FieldSize </b>Method,<b> GetChunk </b>Method.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>See Also</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<b>CreateField </b>Method;
Appendix, &quot;Data Access Object Hierarchy.&quot;</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Specifics (Microsoft
Access)</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

In addition to the properties
defined by the Microsoft Jet database engine, a <b>Field</b>
object in the <b>Fields</b> collection of a <b>QueryDef</b>
object or a <b>TableDef</b> object may also contain the following
Microsoft Access application-defined properties.</p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Example</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

This example creates a <b>TableDef</b>
object and a <b>Field</b> object, appends the <b>Field</b> to the
<b>Fields</b> collection in the new <b>TableDef</b>, and appends
the <b>TableDef</b> to the <b>TableDefs</b> collection in the
current database. The example enumerates all the fields in the
new <b>TableDef</b> object and all the properties of the new <b>Field</b>.
See the methods and properties listed in the <b>Field</b> summary
topic for additional examples.</p>

<br>
</p>

<pre>Function EnumerateField () As Integer
    Dim dbsNorthwind As Database
    Dim tdfTest As TableDef
    Dim fldTest As Field
    Dim I As Integer
    Set dbsNorthwind =_
        DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
    Set tdfTest = dbsNorthwind.CreateTableDef(&quot;MyTable&quot;) 
    Set fldTest = tdfTest.CreateField(&quot;MyField&quot;, dbDate)
    tdfTest.Fields.Append fldTest
    dbsNorthwind.TableDefs.Append tdfTest
' Get database name. 
    Debug.Print
    Debug.Print &quot;Database Name: &quot;; dbsNorthwind.Name
    Debug.Print
' Enumerate all fields in tdfTest.
    Debug.Print &quot;TableDefs: Name; Fields: Name&quot;
    For I = 0 To tdfTest.Fields.Count - 1
        Debug.Print &quot;  &quot;; tdfTest.Name;</pre>

<br>
</p>

<pre>        Debug.Print &quot;; &quot;; tdfTest.Fields(I).Name
    Next I
    Debug.Print
' Enumerate built-in properties of fldTest.
    Debug.Print &quot;fldTest.Name: &quot;; fldTest.Name
    Debug.Print &quot;AllowZeroLength: &quot;; fldTest.AllowZeroLength
    Debug.Print &quot;Attributes: &quot;; fldTest.Attributes
    Debug.Print &quot;CollatingOrder: &quot;; fldTest.CollatingOrder
    Debug.Print &quot;DefaultValue: &quot;; fldTest.DefaultValue
    Debug.Print &quot;OrdinalPosition: &quot;; fldTest.OrdinalPosition
    Debug.Print &quot;Required: &quot;; fldTest.Required
    Debug.Print &quot;Size: &quot;; fldTest.Size
    Debug.Print &quot;SourceField: &quot;; fldTest.SourceField
    Debug.Print &quot;SourceTable: &quot;; fldTest.SourceTable
    Debug.Print &quot;Type: &quot;; fldTest.Type
    Debug.Print &quot;ValidationRule: &quot;; fldTest.ValidationRule
    Debug.Print &quot;ValidationText: &quot;; fldTest.ValidationText
    EnumerateField = True
End Function
</pre>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<strong>Example (Microsoft
Access)</strong></p>



	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

The following example creates a
new <b>Field</b> object, sets some of its properties, and appends
it to the <b>Fields</b> collection of a <b>TableDef</b> object.
The procedure then enumerates all fields in the <b>Fields</b>
collection of the <b>TableDef</b> object.</p>

<br>
</p>

<pre>Sub NewField()
    Dim dbs As Database, tdf As TableDef
    Dim fld As Field

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Employees
    ' Create new Field object.
    Set fld = tdf.CreateField(&quot;SSN#&quot;)
    ' Set Type and Size properties of Field object.
    fld.Type = dbText
    fld.Size = 11
    ' Append field.
    tdf.Fields.Append fld
    ' Enumerate all fields in Fields collection of TableDef object.
    For Each fld in tdf.Fields
        Debug.Print fld.Name
    Next fld
End Sub

</pre>
</BODY>

</html>

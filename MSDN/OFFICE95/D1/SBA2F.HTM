<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LEFT JOIN, RIGHT JOIN Operations</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>LEFT JOIN, RIGHT JOIN Operations</h2>

Description</p>

Combines source-table records when used in any FROM
clause.</p>

Syntax</p>

FROM <i>table1</i> [ LEFT | RIGHT ] JOIN <i>table2</i>
<br>
ON <i>table1.field1</i> <i>compopr table2.field2</i></p>

The LEFT JOIN and RIGHT JOIN operations have these
parts.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="263pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top">Part</td>
        <TD valign="top">Description</td>
    </tr>
    <tr>
        <TD valign="top" colspan="2">&nbsp;</td>
    </tr>
    <tr>
        <TD valign="top"><i>table1</i>,<i> table2</i></td>
        <TD valign="top">The names of the tables from which
        records are combined.</td>
    </tr>
    <tr>
        <TD valign="top"><i>field1</i>,<i> field2</i></td>
        <TD valign="top">The names of the fields that are joined.
        The fields must be of the same data type and contain the
        same kind of data, but they don't need to have the same
        name.</td>
    </tr>
    <tr>
        <TD valign="top"><i>compopr</i></td>
        <TD valign="top">Any relational comparison operator: <b>=</b>,
        <b>&lt;</b>, <b>&gt;</b>, <b>&lt;=</b>, <b>&gt;=</b>, or <b>&lt;&gt;</b>.</td>
    </tr>
</TBODY></table>

<br>
</p>

Remarks</p>

Use a LEFT JOIN operation to create a left outer
join. Left outer joins include all of the records from the first
(left) of two tables, even if there are no matching values for
records in the second (right) table.</p>

Use a RIGHT JOIN operation to create a right outer
join. Right outer joins include all of the records from the
second (right) of two tables, even if there are no matching
values for records in the first (left) table.</p>

For example, you could use LEFT JOIN with the
Departments (left) and Employees (right) tables to select all
departments, including those that have no employees assigned to
them. To select all employees, including those who aren't
assigned to a department, you would use RIGHT JOIN.</p>

The following example shows how you could join the
Categories and Products tables on the Category ID field. The
query produces a list of all categories, including those that
contain no products:</p>

<br>
</p>

<pre>SELECT CategoryName, ProductName
FROM Categories LEFT JOIN Products
ON Categories.CategoryID = Products.CategoryID;
</pre>

In this example, Category ID is the joined field,
but it isn't included in the query results because it isn't
included in the SELECT statement. To include the joined field,
enter the field name in the SELECT statement &#151; in this case,
Categories.CategoryID.</p>
<SPAN CLASS="list">
<ul>
    <li><b>Notes</b></li>
    <li>To create a query that includes only records in which the
        data in the joined fields is the same, use an INNER JOIN
        operation.</li>
    <li>A LEFT JOIN or a RIGHT JOIN can be nested inside an INNER
        JOIN, but an INNER JOIN cannot be nested inside a LEFT
        JOIN or a RIGHT JOIN. See the discussion of nesting in
        the INNER JOIN topic to see how to nest joins within
        other joins.</li>
    <li>You can link multiple ON clauses. See the discussion of
        clause linking in the INNER JOIN topic to see how this is
        done.</li>
    <li>If you try to join fields containing Memo or OLE Object
        data, an error occurs.</li>
</ul>
</SPAN>
See Also</p>

INNER JOIN Operation, UNION Operation.</p>

Example</p>

These examples assume the existence of hypothetical
Department Name and Department ID fields in an Employees table. </p>

This example selects all departments, including
those without employees.</p>

<br>
</p>

<pre>SELECT [Department Name], FirstName &amp; &quot; &quot; &amp; LastName AS Name 
FROM Departments LEFT JOIN Employees 
ON Departments.[Department ID] = Employees.[Department ID] 
ORDER BY [Department Name];
</pre>

This example selects all employees, including those
not assigned to a department.</p>

<br>
</p>

<pre>SELECT LastName &amp; &quot;, &quot; &amp; FirstName AS Name, [Department Name] 
FROM Departments RIGHT JOIN Employees 
ON Departments.[Department ID] = Employees.[Department ID] 
ORDER BY LastName &amp; &quot;, &quot; &amp; FirstName;
</pre>
</BODY>

</html>

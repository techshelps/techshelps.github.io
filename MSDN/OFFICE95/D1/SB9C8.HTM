<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inherited Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Inherited Property</H2>Applies To</P>
<B>Property </B>Object.</P>
Description</P>
Returns a value that indicates whether a <B>Property</B> object is inherited from an underlying object. This property setting is read-only. <B>True</B> (-1) indicates that the Property object is inherited. For built-in <B>Property</B> objects that represent predefined properties, <B>False</B> (0) is the only possible return value.</P>
Remarks</P>
You can use the <B>Inherited</B> property to determine whether a user-defined property was created for the object it applies to or whether the property was created for another object. For example, suppose you create a property for a <B>QueryDef</B> object and then open a <B>Recordset</B> object from the <B>QueryDef</B> object. This property will be part of the <B>Recordset</B> object's <B>Properties</B> collection, and its <B>Inherited</B> property will be set to <B>True</B> because the property was created for the <B>QueryDef</B> object, not the <B>Recordset</B> object.</P>
See Also</P>
<B>CreateProperty </B>Method,<B> QueryDef </B>Object.</P>
Specifics (Microsoft Access)</P>
Microsoft Access defines a number of properties which apply to data access objects. Because these properties are defined by Microsoft Access, the Microsoft Jet database engine doesn't recognize them automatically. To set one of these properties in Visual Basic, you must first create the property using the <B>CreateProperty</B> method and then append it to the <B>Properties</B> collection of the object. For more information, search the online index for the <B>Property</B> object topic.</P>
When you create an object based on another object, the derived object inherits the properties of the original object. You can use the <B>Inherited</B> property to determine whether one of these properties was created for the object it is applied to, or if the property was inherited from another object.</P>
<P></P>
For example, suppose you want to set the Microsoft Access <B>DatasheetFontName</B> property for a <B>TableDef</B> object. If you are setting this property for the first time, you will need to create a corresponding <B>Property</B> object and append it to the <B>Properties</B> collection of the <B>TableDef</B> object. The <B>Inherited</B> property of the new <B>Property</B> object returns <B>False</B>.</P>
If you then create a new <B>QueryDef</B> object based on the table corresponding to the <B>TableDef</B> object, the <B>DatasheetFontName</B> property will be included in the <B>Properties</B> collection of the <B>QueryDef</B> object. The <B>Inherited</B> property of a <B>Property</B> object corresponding to this property returns <B>True</B>.</P>
Example</P>
This example creates a <B>Recordset</B> object from a <B>QueryDef</B> object, creates a new property, and indicates whether the property is inherited. Then the example prints the name of each field in the <B>Recordset</B> and, for each property of each field, it prints the <B>Name</B>, <B>Type</B>, <B>Value</B>, and <B>Inherited</B> property <I>value </I>settings.</P>
<BR></P>
<PRE>Dim dbsDefault As Database, qdfTest As QueryDef
Dim rstTest As Recordset, prpMoose As Property
Dim intField As Integer, intProp As Integer
Set dbsDefault =  DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
Set qdfTest = dbsDefault.QueryDefs(0)
Set prpMoose = qdfTest.CreateProperty("Moose",dbBoolean, True)
qdfTest.Properties.Append prpMoose
Set rstTest = qdfTest.OpenRecordset()
Debug.Print "Is qdfTest.Properties(""Moose"")inherited? "
Debug.Print qdfTest.Properties("Moose").Inherited
Debug.Print "Is rstTest.Properties(""Moose"")inherited? "
Debug.Print rstTest.Properties("Moose").Inherited
For intField = 0 To rstTest.Fields.Count - 1
    Debug.Print rstTest.Fields(intField).Name
    On Error Resume Next
    For intProp = 0 To rstTest.Fields(intField).Properties.Count - 1
        Debug.Print rstTest.Fields(intField).Properties(intProp).Name
        Debug.Print rstTest.Fields(intField).Properties(intProp).Type
        Debug.Print rstTest.Fields(intField).Properties(intProp).Value
        Debug.Print _<BR>            rstTest.Fields(intField).Properties(intProp).Inherited
    Next intProp
Next intField
dbsDefault.Close
</PRE>
Example (Microsoft Access)</P>
The following example creates a <B>Property</B> object in the <B>Properties</B> collection of a <B>TableDef</B> object, and then creates a new <B>QueryDef</B> object based on the same table. The <B>Property</B> object automatically exists in the <B>Properties</B> collection of the new <B>QueryDef</B> object. Next, the procedure checks the <B>Inherited</B> property for the <B>Property</B> objects in the <B>Properties</B> collections of both the <B>TableDef</B> and the <B>QueryDef</B> objects.</P>
<P></P>
In the following example, the Microsoft Access <B>DatasheetFontItalic</B> property is created and appended to the <B>Properties</B> collection of the <B>TableDef</B> object. The <B>DatasheetFontItalic</B> property is defined by Microsoft Access rather than by the Microsoft Jet database engine. However, the property applies to data access objects. Therefore, in order to set it from Visual Basic code, you must first create a <B>Property</B> object corresponding to that property and append it to the <B>Properties</B> collection of the data access object. It is necessary to create the property only the first time you set it.</P>
<BR></P>
<PRE>Sub CheckInherited()
    Dim dbs As Database, tdfOrders As TableDef, qdfOrders As QueryDef
    Dim prpTableDef As Property, prpQueryDef As Property
    Dim strSQL As String

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    Set tdfOrders = dbs.TableDefs!Orders
    ' Create Property object and append to Properties collection.
    Set prpTableDef = tdfOrders.CreateProperty("DatasheetFontItalic", _
        dbBoolean, True)
    tdfOrders.Properties.Append prpTableDef
    Debug.Print prpTableDef.Inherited
    ' Create QueryDef based on Orders table.
    strSQL = "SELECT * FROM Orders WHERE ShipCountry = 'USA'"
    Set qdfOrders = dbs.CreateQueryDef("USAOrders", strSQL)
    ' Return Property object pointing to property.
     Set prpQueryDef = qdfOrders.Properties!DatasheetFontItalic
     Debug.Print prpQueryDef.Inherited
End Sub
</PRE>
</P></BODY>
</HTML>

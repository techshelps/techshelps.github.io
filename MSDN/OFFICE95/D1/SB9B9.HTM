<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FindFirst, FindLast, FindNext, FindPrevious Methods</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>FindFirst, FindLast, FindNext, FindPrevious Methods</H2>Applies To</P>
Dynaset-Type <B>Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type <B>Recordset </B>Object.</P>
Description</P>
Locates the first, last, next, or previous record in a dynaset- or Snapshot-Type <B>Recordset</B> object that satisfies the specified criteria and makes that record the current record.</P>
Syntax</P>
<I>recordset</I><B>.</B>{<B>FindFirst</B> | <B>FindLast</B> | <B>FindNext</B> | <B>FindPrevious</B>}<B> </B><I>criteria</I></P>
The Find methods have these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>recordset</I></P></TD><TD VALIGN="TOP">The name of an existing dynaset- or Snapshot-Type <B>Recordset</B> object.</P></TD></TR><TR><TD VALIGN="TOP"><I>criteria</I></P></TD><TD VALIGN="TOP">A string expression (like the WHERE clause in an SQL statement without the word WHERE) used to locate the record.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
If you want to include all the records in your search — not just those that meet a specific condition — use the Move methods to move from record to record. To locate a record in a table-type <B>Recordset</B>, use the <B>Seek</B> method.</P>
If a record matching the criteria isn't located, the current record pointer is undetermined, and the <B>NoMatch</B> property is set to <B>True</B>. If <I>recordset</I> contains more than one record that satisfies the criteria, <B>FindFirst</B> locates the first occurrence, <B>FindNext</B> locates the next occurrence, and so on. </P>
<P></P>
Caution</P>
If you edit the current record, be sure you save the changes using the <B>Update</B> method before you move to another record. If you move to another record without updating, your changes are lost without warning.</P>
<P></P>
Each of the Find methods begins its search from the location and in the direction specified in the following table.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="128pt" VALIGN="TOP"><COL WIDTH="128pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Find methods</P></TD><TD VALIGN="TOP">Begin</P></TD><TD VALIGN="TOP">Search direction</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>FindFirst</B></P></TD><TD VALIGN="TOP">Beginning of recordset</P></TD><TD VALIGN="TOP">End of recordset </P></TD></TR><TR><TD VALIGN="TOP"><B>FindLast</B></P></TD><TD VALIGN="TOP">End of recordset</P></TD><TD VALIGN="TOP">Beginning of recordset </P></TD></TR><TR><TD VALIGN="TOP"><B>FindNext</B></P></TD><TD VALIGN="TOP">Current record</P></TD><TD VALIGN="TOP">End of recordset </P></TD></TR><TR><TD VALIGN="TOP"><B>FindPrevious</B></P></TD><TD VALIGN="TOP">Current record</P></TD><TD VALIGN="TOP">Beginning of recordset </P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
When you use the <B>FindLast</B> method, the Microsoft Jet database engine fully populates your recordset before beginning the search, if this hasn't already been done.</P>
<P></P>
Using one of the Find methods isn't the same as using a Move method, however, which simply makes the first, last, next or previous record current without specifying a condition. You can follow a Find operation with a Move operation.</P>
Always check the value of the <B>NoMatch</B> property to determine whether the Find operation has succeeded. If the search succeeds, <B>NoMatch</B> is set to <B>False</B>. If it fails, <B>NoMatch</B> is set to <B>True</B> and the current record isn't defined. In this case, you must position the current record pointer back to a valid record, as shown in the following example.</P>
<BR></P>
<PRE>Dim Here as Variant
Here = rstCustomers.Bookmark
rstCustomers.Find "Name = 'Ms. Schmidt'"    'Search for a name in the <BR>                    ' recordset.
If rstCustomers.NoMatch then     'Was it found?
    rstCustomers.Bookmark = Here    'If not, go back to <BR>                    ' previously current record.
Else
.                     'Match found.
...
...
End If
</PRE>
Using the Find methods with ODBC-accessed recordsets can be inefficient. You may find that rephrasing your <I>criteria</I> to locate a specific record is faster, especially when working with large recordsets.</P>
You should use the U.S. date format (month-day-year) when you search for fields containing dates, even if you're not using the U.S. version of the Jet database engine; otherwise, the data may not be found. Use the Visual Basic <B>Format</B> function to convert the date. For example:</P>
<BR></P>
<PRE>rstEmployees.FindFirst "HireDate &gt; #" &amp; Format(mydate, 'm/d/yy' ) &amp; "#"
</PRE>
When working with ODBC databases and large dynasets, you might discover that using the Find methods or using the <B>Sort</B> or <B>Filter</B> properties is slow. You can improve performance by using SQL queries with customized ORDER BY or WHERE clauses, parameter queries, or <B>QueryDef</B> objects that retrieve specific indexed records.</P>
<P></P>
Note</P>
You can't use the Find methods with forward-only-scrolling snapshots.</P>
<P></P>
See Also</P>
<B>AbsolutePosition </B>Property;<B> Move </B>Method;<B> MoveFirst</B>,<B> MoveLast</B>,<B> MoveNext</B>,<B> MovePrevious </B>Methods;<B> NoMatch </B>Property;<B> Seek </B>Method.</P>
Specifics (Microsoft Access)</P>
When specifying criteria for the <B>Find</B> methods, you must be careful to reference fields and controls properly, and to construct the criteria string correctly. </P>
<P></P>
When you use a bookmark in a Microsoft Access module, you must include an <B>Option Compare Binary</B> statement in the Declarations section of the module. A bookmark is a <B>Variant</B> array of <B>Byte</B> data, so the string comparison method for the module must be binary. If a bookmark is evaluated with a text-based string comparison method, such as the <B>Option Compare Text</B> statement or the default setting for the <B>Option Compare Database</B> statement, the current record may be set to an incorrect record.</P>
You should use the the month-day-year format when you search for fields containing dates, even if the Regional Settings of the Windows&reg; Control Panel is set to a different format; otherwise, the data may not be found. You can use the Visual Basic <B>Format</B> function to make this easier. The following code requests a date from the user and constructs a string on which to search.</P>
<BR></P>
<PRE>dim dteAny As Date
dteAny = InputBox ("Please enter a date in month-day-year format.")
rstOrders.FindFirst "[OrderDate] &gt; #" &amp; Format(dteAny, "m/d/yy") &amp; "#"
</PRE>
Example</P>
This example uses <B>FindFirst</B> to find the first record matching the specified criteria in a <B>Recordset</B> object and then uses <B>FindNext</B> to find the next matching record.</P>
<BR></P>
<PRE>Dim strCriteria As String
strCriteria = "State = 'NY'"    ' Set the criteria.
rstAddress.FindFirst strCriteria    ' Find first matching record.
If rstAddress.NoMatch = False Then    ' Check if record is found.
    rstAddress.FindNext strCriteria    ' Find next matching record.
...
</PRE>
This example creates a dynaset-type <B>Recordset</B> object and then uses <B>FindFirst</B> to locate the first record satisfying the title condition.</P>
<BR></P>
<PRE>Dim strCriteria As String
Dim dbsBiblio As Database, rstPublishers As Recordset
strCriteria = "State = 'NY'"     ' Define search criteria.
Set dbsBiblio = DBEngine.Workspaces(0).OpenDatabase("Biblio.mdb")
' Create a dynaset-type Recordset based on Publishers table.
Set rstPublishers = dbsBiblio.OpenRecordset("Publishers",dbOpenDynaset)
rstPublishers.FindFirst strCriteria    ' Find first matching record.
If rstPublishers.NoMatch = False Then<B>    </B>' Check if record is found.
    rstPublishers.FindNext strCriteria    ' Find next matching record.
...
</PRE>
Example (Microsoft Access)</P>
The following example creates a dynaset-type <B>Recordset</B> object and then uses the <B>FindFirst</B> method to locate the first record satisfying the specified criteria. The procedure then finds the remaining records that satisfy the criteria.</P>
<BR></P>
<PRE>Sub FindRecord()
    Dim dbs As Database, rst As Recordset
    Dim strCriteria As String</PRE>
<P></P>
<BR></P>
<PRE>    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    ' Define search criteria.
    strCriteria = "[ShipCountry] = 'UK' And [OrderDate] &gt;= #1-1-95#"
    ' Create a dynaset-type Recordset object based on Orders table.
    Set rst = dbs.OpenRecordset("Orders", dbOpenDynaset)
    ' Find first matching record.
    rst.FindFirst strCriteria
    ' Check if record is found.
    If rst.NoMatch Then
        MsgBox "No record found."
    Else
        ' Find other matching records.
        Do Until rst.NoMatch
            Debug.Print rst!ShipCountry; "   "; rst!OrderDate
            rst.FindNext strCriteria
        Loop
    End If
End Sub
</PRE>
</P></BODY>
</HTML>

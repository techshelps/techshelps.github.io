<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetRows Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>GetRows Method</H2>Applies To</P>
Dynaset-Type <B>Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type <B>Recordset </B>Object,<B> Table-Type Recordset </B>Object.</P>
Description</P>
Retrieves multiple rows of a <B>Recordset</B> into an array.</P>
Syntax</P>
<I>varArray</I> = <I>object</I>.<B>GetRows (</B><I>numrows</I><B>)</B></P>
The <B>GetRows</B> Method syntax has the following parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>varArray</I></P></TD><TD VALIGN="TOP">The name of a Variant type variable to store the returned data.</P></TD></TR><TR><TD VALIGN="TOP"><I>object</I> </P></TD><TD VALIGN="TOP">An object expression that evaluates to an object in the Applies To list.</P></TD></TR><TR><TD VALIGN="TOP"><I>numrows</I></P></TD><TD VALIGN="TOP">The number of rows to retrieve.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
Use the <B>GetRows</B> method to copy one or more entire records from a <B>Recordset</B>. <B>GetRows</B> returns a two-dimensional array. The first subscript identifies the field and the second identifies the row number, as follows:</P>
<BR></P>
<PRE>avarRecords(intField, intRecord)
</PRE>
To get the first field value in the second row returned, use the following:</P>
<BR></P>
<PRE>field1 = avarRecords(0,1)
</PRE>
To get the second field value in the first row, use the following:</P>
<BR></P>
<PRE>field2 = avarRecords(1,0)
</PRE>
If more rows are requested than are available, then only the number available are returned. Use <B>Ubound</B> to determine how many rows were actually fetched, as the array is sized to fit how many rows were returned. For example, if you returned the results into a variant called varA, you could determine how many rows were actually returned by using:</P>
<BR></P>
<PRE>numReturned = Ubound(varA,2) + 1
</PRE>
<P></P>
The "+ 1" is used because the first data returned is in the 0 element of the array. The number of rows that can be fetched is constrained by available memory and should be chosen to suit your application — don't expect to use <B>GetRows</B> to bring your whole table into an array if it is a large table.</P>
Because all fields of the recordset are returned in the array, including long memo and binary fields, you might want to use a query that restricts the columns returned.</P>
After a call to <B>GetRows</B>, the current record is positioned at the next unread row. That is, <B>GetRows</B> has an equivalent positioning effect to <B>Move</B> <I>numrows</I>.</P>
If you are trying to fetch all the rows using multiple <B>GetRows</B> calls, use the <B>EOF</B> property to be sure that you're at the end of the <B>Recordset</B>. <B>GetRows</B> returns less than the number requested either at the end of the <B>Recordset</B>, or if it cannot fetch a row in the range requested. For example, if a fifth record cannot be retrieved in a group of ten records that you're trying to fetch, <B>GetRows</B> returns four records and leaves currency on the record that caused a problem. It will not generate a run-time error. This situation might occur if a record in a dynaset has been deleted by another user.</P>
See Also</P>
<B>FillCache </B>Method,<B> Move </B>Method,<B> Value </B>Property.</P>
Example</P>
The following example uses an SQL statement to retrieve three fields from an Employees table into a <B>Recordset</B> object. It then uses the <B>GetRows</B> method to retrieve the first three records of the <B>Recordset</B>, and stores the selected records in a two-dimensional array. Each record is then printed, one field at a time, using the two array indexes to select specific fields and records.</P>
<P></P>
Note</P>
To clearly illustrate how the array indexes are used, the example uses a separate statement to identify and print each field of each record. In practice, it would be more reliable to use two loops, one nested in the other, and provide integer variables for the indexes, to step through both dimensions of the array.</P>
<P></P>
<BR></P>
<PRE>Sub GetRows_Test()

    Dim dbsCurrent As Database, rstEmployees As Recordset<BR>    Dim varRecords As Variant<BR> <BR>    Set dbsCurrent = CurrentDB()<BR>    Set rstEmployees = dbsCurrent.OpenRecordset("SELECT FirstName, " &amp; _<BR>        "LastName, Title FROM Employees", dbOpenSnapshot)<BR><BR>    varRecords = rstEmployees.GetRows(3)
<BR>    Debug.Print "First Name", "Last Name", "Title"
    Debug.Print varRecords(0, 0),
    Debug.Print varRecords(1, 0),
    Debug.Print varRecords(2, 0)</PRE>
<P></P>
<BR></P>
<PRE>    Debug.Print varRecords(0, 1),
    Debug.Print varRecords(1, 1),
    Debug.Print varRecords(2, 1)
    Debug.Print varRecords(0, 2),
    Debug.Print varRecords(1, 2),
    Debug.Print varRecords(2, 2)

End Sub
</PRE>
Example (Microsoft Access)</P>
The following example uses the <B>GetRows</B> method to return a two-dimensional array containing the first ten rows of data in a <B>Recordset</B> object.</P>
<BR></P>
<PRE>Sub RowsArray()
    Dim dbs As Database, rst As Recordset, strSQL As String
    Dim varRecords As Variant, intI As Integer, intJ As Integer
    
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    ' Build SQL statement that returns specified fields.
    strSQL = "SELECT [FirstName], [LastName], [HireDate] " &amp; _
        "FROM [Employees]"
    ' Open dynaset-type Recordset object.
    Set rst = dbs.OpenRecordset(strSQL)
    ' Return first ten rows into array.
    varRecords = rst.GetRows(10)
    ' Find upper bound of second dimension.
    For intI = 0 To UBound(varRecords, 2)
        Debug.Print
        ' Find upper bound of first dimension.
        For intJ = 0 To UBound(varRecords, 1)
            ' Print data from each row in array.
            Debug.Print varRecords(intJ, intI)
        Next intJ
    Next intI
End Sub
</PRE>
Example (Microsoft Excel)</P>
This example copies records from a selection of the Customer recordset in the NWINDEX.MDB database to Sheet1.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase </B>method.</P>
<BR></P>
<PRE>Dim db As Database, rs As Recordset
Dim data As Variant
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("SELECT CUSTMR_ID, CONTACT FROM Customer;")
data = rs.GetRows(6)
Sheets("Sheet1").Activate
For r = 1 to UBound(data, 2) + 1</PRE>
<P></P>
<BR></P>
<PRE>    For c = 1 to 2
        Cells(r, c).Value = data(c - 1, r - 1)
    Next
Next
rs.Close
db.Close
</PRE>
</P></BODY>
</HTML>

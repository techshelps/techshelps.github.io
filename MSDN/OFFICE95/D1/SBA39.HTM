<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Expressions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>SQL Expressions</H2>Description</P>
An SQL expression is a string that makes up all or part of an SQL statement. For example, the <B>FindFirst</B> method on a <B>Recordset</B> object uses an SQL expression, consisting of the selection criteria found in an SQL WHERE clause.</P>
The Microsoft Jet Database Engine uses the Visual Basic for Applications (or VBA) expression service to perform simple arithmetic and function evaluation. All of the expressions operators used in Jet database engine SQL expressions (except <B>Between</B>, <B>In</B>, and <B>Like</B>) are defined by the VBA expression service. In addition, the VBA expression service offers over 100 VBA functions that can be used in SQL expressions. For example, an SQL query composed in the SQL View of the Microsoft Access Query Design window can use these VBA functions, and so can an SQL query used in the DAO <B>OpenRecordset</B> method in Microsoft Visual C++&trade;, Microsoft Visual Basic, and Microsoft Excel code.</P>
Specifics (Microsoft Access)</P>
You can use many Visual Basic functions in SQL strings while in Visual Basic code, in SQL view of the Query window, or in the query design grid.</P>
For example, you can include Visual Basic functions in an SQL statement that you use to define a <B>QueryDef</B> object or a dynaset-type or snapshot-type <B>Recordset</B> object. In the Microsoft Access query design grid, you can include Visual Basic functions in criteria expressions, or in a calculated field expression.</P>
Example (Microsoft Access)</P>
The following example creates a dynaset-type <B>Recordset</B> object from an SQL statement. The SQL statement includes the <B>Year</B> function in a WHERE clause to return only records for orders placed in 1995.</P>
<BR></P>
<PRE>Sub Orders95()
    Dim dbs As Database, rst As Recordset, strSQL As String
    Dim fld As Field
</PRE>
<P></P>
<BR></P>
<PRE>    Set dbs = CurrentDb
    strSQL = "SELECT DISTINCTROW OrderID, OrderDate " &amp; _
        "FROM Orders WHERE ((Year([OrderDate])=1995));"
    Set rst = dbs.OpenRecordset(strSQL, dbOpenDynaset)
    rst.MoveLast
    Debug.Print rst.RecordCount
End Sub
</PRE>
The next example shows how you can include a Visual Basic function in an SQL statement in SQL view in the Query window. The following SQL statement defines a query that displays the ShipName field from an Orders table, calculates the number of characters in that field for each record using the <B>Len</B> function, and displays that calculation in another column.</P>
<BR></P>
<PRE>SELECT DISTINCTROW ShipName, Len([ShipName]) AS LengthOfShipName
FROM Orders;
</PRE>
You can create the same query in the query design grid. Create a new query and add the Orders table. Drag the ShipName field onto the Field cell in the first column in the grid. In another Field cell, create a calculated field expression by entering the following expression.</P>
<BR></P>
<PRE>LengthOfShipName: Len([ShipName])
</PRE>
</P></BODY>
</HTML>

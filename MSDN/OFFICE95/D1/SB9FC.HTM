<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Seek Method</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Seek Method</h2>

Applies To</p>

<b>Recordset </b>Object,<b> </b>Table-Type<b>
Recordset </b>Object.</p>

Description</p>

Locates the record in an indexed table-type <b>Recordset</b>
object that satisfies the specified criteria for the current
index and makes that record the current record.</p>

Syntax</p>

<i>table</i><b>.Seek</b> <i>comparison</i>, <i>key1</i>,
<i>key2</i>...</p>

The <b>Seek</b> method syntax has the following
parts.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="263pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top">Part</td>
        <TD valign="top">Description</td>
    </tr>
    <tr>
        <TD valign="top" colspan="2">&nbsp;</td>
    </tr>
    <tr>
        <TD valign="top"><i>table</i></td>
        <TD valign="top">The name of an existing table-type <b>Recordset</b>
        object that has a defined index as specified by the <b>Recordset</b>
        object's <b>Index</b> property.</td>
    </tr>
    <tr>
        <TD valign="top"><i>comparison</i></td>
        <TD valign="top">One of the following string expressions:
        &lt;, &lt;=, =, &gt;=, or &gt;.</td>
    </tr>
    <tr>
        <TD valign="top"><i>key1</i>, <i>key2</i>...</td>
        <TD valign="top">One or more values corresponding to
        fields in the <b>Recordset</b> object's current index, as
        specified by its <b>Index</b> property setting.</td>
    </tr>
</TBODY></table>

<br>
</p>

Remarks</p>

You must set the current index with the <b>Index</b>
property before you use <b>Seek</b>. If the index identifies a
nonunique key field, <b>Seek</b> locates the first record that
satisfies the criteria.</p>

Caution</p>

If you edit the current record, be sure you save
the changes using the <b>Update</b> method before you move to
another record. If you move to another record without using <b>Update</b>,
your changes are lost without warning.</p>

The <b>Seek</b> method searches through the
specified key fields and locates the first record that satisfies
the criteria specified by <i>comparison</i> and <i>key1</i>. Once
found, it makes that record current and the <b>NoMatch</b>
property is set to <b>False</b>. If the <b>Seek</b> method fails
to locate a match, the <b>NoMatch</b> property is set to <b>True</b>,
and the current record is undefined. </p>

If <i>comparison</i> is equal (=), greater than or
equal (&gt;=), or greater than (&gt;), <b>Seek</b> starts at the
beginning of the index. If <i>comparison</i> is greater than
(&lt;) or greater than or equal (&lt;=), <b>Seek</b> starts at
the end of the index and searches backward unless there are
duplicate index entries at the end. In this case, <b>Seek</b>
starts at an arbitrary entry among the duplicate index entries at
the end of the index.</p>

You must specify values for all fields defined in
the index. If you use <b>Seek</b> with a multi-column index, and
you don't specify a comparison value for every field in the
index, then you cannot use the equal (=) operator in the
comparison. That's because some of the criteria fields (key2,
key3, and so on) will default to NULL, which will probably not
match. Therefore, the equal operator will work correctly only if
you have a record which is all NULL except the key you're looking
for. It's recommended that you use the greater than or equal
operator instead.</p>

The <i>key1</i> argument must be of the same field
data type as the corresponding field in the current index. For
example, if the current index refers to a number field (such as
Employee ID), <i>key1</i> must be numeric. Similarly, if the
current index refers to a Text field (such as Last Name), <i>key1</i>
must be a string.</p>

There doesn't have to be a current record when you
use <b>Seek</b>.</p>

You can use the <b>Indexes</b> collection to
enumerate the existing indexes.</p>

Notes</p>
<SPAN CLASS="list">
<ul>
    <li>Always check the value of the <b>NoMatch</b> property
        setting to determine whether the <b>Seek</b> method has
        succeeded. If it fails, <b>NoMatch</b> is set to <b>True</b>
        and the current record is undefined.</li>
    <li>To locate a record in a dynaset- or snapshot-type <b>Recordset</b>
        that satisfies a specific condition, use the <b>Find</b>
        methods. To include all records, not just those that
        satisfy a specific condition, use the <b>Move</b> methods
        to move from record to record.</li>
</ul>
</SPAN>
You can't use the <b>Seek</b> method on an attached
table of any type because attached tables must be opened as
dynaset- or snapshot-type <b>Recordset</b> objects, which don't
support the <b>Seek</b> method. However, if you use the <b>OpenDatabase</b>
method to directly open an installable ISAM database, you can use
<b>Seek</b> on tables in that database.</p>

See Also</p>

<b>AbsolutePosition </b>Property;<b> BOF</b>,<b> EOF
</b>Properties;<b> FindFirst</b>,<b> FindLast</b>,<b> FindNext</b>,<b>
FindPrevious </b>Methods;<b> Index </b>Object;<b> Index </b>Property;<b>
Move </b>Method;<b> MoveFirst</b>,<b> MoveLast</b>,<b> MoveNext</b>,<b>
MovePrevious </b>Methods;<b> NoMatch </b>Property;<b>
OpenDatabase </b>Method.</p>

Example</p>

This example uses <b>Seek</b> to locate the first
record in the Publishers table where the PubID field is 3, using
the existing primary key index.</p>

<br>
</p>

<pre>Dim dbsBiblio As Database, rstPublishers As Recordset
' Open a database.
Set dbsBiblio = DBEngine.Workspaces(0).OpenDatabase(&quot;Biblio.mdb&quot;)
' Open a table.
Set rstPublishers = dbsBiblio.OpenRecordset(&quot;Publishers&quot;)
rstPublishers.Index = &quot;PrimaryKey&quot;    ' Define current index.
rstPublishers.Seek &quot;=&quot;, 3    ' Seek record.</pre>

<br>
</p>

<pre>If rstPublishers.NoMatch Then...
</pre>

This example uses the <b>OpenDatabase</b> method to
directly open an installable ISAM database and then uses <b>Seek</b>
to locate a record in a table in that database.</p>

<br>
</p>

<pre>Dim dbsFoxData as Database, rstParts as Recordset
Dim varSaveHere as Variant
Set dbsFoxData = OpenDatabase(&quot;C:\FoxData&quot;, False, False,&quot;Fox 2.5&quot;)
Set rstParts = dbsFoxData.OpenRecordset(&quot;PARTS.dbf&quot;, dbOpenTable)
' Choose record order and Seek index.
rstParts.Index = &quot;PartNameIndex&quot;
varSaveHere = rstParts.BookMark    ' Save current location.
' Search for first instance of a chosen part.
rstParts.Seek &quot;=&quot;, &quot;Framis Lever&quot;
If rstParts.NoMatch then     ' Test for success.
    rstParts.BookMark = varSaveHere    ' Seek not successful.
    ...
Else    ' Seek worked; use current record.
    Debug.Print rstParts!PartName
End If
</pre>

Example (Microsoft Access)</p>

The following example creates a new <b>Index</b>
object on an Employees table. The new index consists of two
fields, LastName and FirstName. The procedure then uses the <b>Seek</b>
method to find a specified record.</p>

<br>
</p>

<pre>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef, idx As Index
    Dim fldLastName As Field, fldFirstName As Field, rst As Recordset
    
    ' Return Database variable pointing to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Employees
    ' Return Index object that points to new index.
    Set idx = tdf.CreateIndex(&quot;FullName&quot;)
    ' Create and append index fields.
    Set fldLastName = idx.CreateField(&quot;LastName&quot;, dbText)
    Set fldFirstName = idx.CreateField(&quot;FirstName&quot;, dbText)
    idx.Fields.Append fldLastName
    idx.Fields.Append fldFirstName
    ' Append Index object.
    tdf.Indexes.Append idx
    ' Open table-type Recordset object.
    Set rst = dbs.OpenRecordset(&quot;Employees&quot;)
    ' Set current index to new index.
    rst.Index = idx.Name
    ' Specify record to find.
    rst.Seek &quot;=&quot;, &quot;Fuller&quot;, &quot;Andrew&quot;
    If rst.NoMatch Then
        Debug.Print &quot;Seek unsuccessful!&quot;
    Else</pre>

<br>
</p>

<pre>        Debug.Print &quot;Seek successful.&quot;
    End If
End Sub
</pre>

Example (Microsoft Excel)</p>

This example opens PRODUCT.DBF (a dBASE IV table
located in the \Program Files\Common Files\Microsoft
Shared\MSquery folder), locates a record, and then copies the
values into cells B2:C2 on Sheet1. (On Windows NT&trade;,
PRODUCT.DBF is located in the WINDOWS\MSAPPS\MSQUERY folder.)</p>

<br>
</p>

<pre>Const sourceDir = &quot;C:\Program Files\Common Files\Microsoft Shared\&quot; _
    &amp; &quot;MSquery&quot;
Dim db As Database, rs As Recordset
Sheets(&quot;Sheet1&quot;).Activate
Set db = OpenDatabase(sourceDir, False, False, &quot;dBASE IV&quot;)
Set rs = db.OpenRecordset(&quot;PRODUCT.DBF&quot;, dbOpenTable)
rs.Index = &quot;PRODUCT&quot;
rs.Seek &quot;=&quot;, &quot;1&quot;
If rs.NoMatch Then
    MsgBox &quot;Couldn't find any records&quot;
Else
    ActiveSheet.Cells(2, 2) = rs.Fields(&quot;CATEGORY&quot;).Value
    ActiveSheet.Cells(3, 2) = rs.Fields(&quot;PROD_NAME&quot;).Value
End If
rs.Close
db.Close
</pre>
</BODY>

</html>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sort Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Sort Property</H2>Applies To</P>
Dynaset-Type <B>Recordset </B>Object,<B> Recordset </B>Object,<B> </B>Snapshot-Type <B>Recordset </B>Object.</P>
Description</P>
Sets or returns the sort order for records in a <B>Recordset</B> object.</P>
Settings and Return Values</P>
The setting or return value is a string expression that contains the ORDER BY clause of an SQL statement without the reserved words ORDER BY. (Data type is <B>String</B>.)</P>
Remarks</P>
You can use the <B>Sort</B> property with dynaset- and snapshot-type <B>Recordset</B> objects.</P>
When you set this property for an object, sorting occurs when a subsequent <B>Recordset</B> object is created from that object. The <B>Sort</B> property setting overrides any sort order specified for a <B>QueryDef</B> object.</P>
The default sort order is ascending (A to Z or 0 to 100). The following examples show how you can set the sort order to ascending or descending (Z to A or 100 to 0):</P>
<BR></P>
<PRE>rstOrders.Sort = "ShipCountry"    ' Defaults to ascending.
rstOrders.Sort = "ShipCountry Asc"    ' Ascending.
rstOrders.Sort = "ShipCountry Desc"    ' Descending.
</PRE>
The <B>Sort</B> property doesn't apply to table-type <B>Recordset</B> objects. To sort a table-type <B>Recordset</B> object, use the <B>Index</B> property.</P>
<P></P>
Tip</P>
In many cases, it's faster to open a new <B>Recordset</B> object using an SQL statement that includes the sorting criteria.</P>
<P></P>
See Also</P>
<B>Filter </B>Property,<B> Index </B>Property,<B> QueryDef </B>Object,<B> SQL </B>Property.</P>
Example</P>
This example uses the <B>Sort</B> property to set the sort order of a dynaset-type <B>Recordset</B> based on an Orders table. The records in rstSorted will be in ascending Ship Country order.</P>
<BR></P>
<PRE>Dim dbsNorthwind As Database
Dim rstOrders As Recordset, rstSorted As Recordset
Set dbsNorthwind =  DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
Set rstOrders = dbsNorthwind.OpenRecordset("Orders", dbOpenDynaset)
rstOrders.Sort = "ShipCountry"    ' Set sort order.
Set rstSorted = rstOrders.OpenRecordset()    ' Create second dynaset.
</PRE>
<P></P>
<P></P>
Tip</P>
In some situations, it may be more efficient to create the second <B>Recordset</B> object with the conditions you want in one step. As a general rule, when you know the data you want to select, it's usually more efficient to create a <B>Recordset</B> with an SQL statement. This example shows how you can create just one <B>Recordset</B> and obtain the same results as in the preceding example.</P>
<BR></P>
<PRE>Dim dbsNorthwind As Database, rstOrders As Recordset
Dim strSelect As String
Set dbsNorthwind =  DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
strSelect = "SELECT * FROM Orders ORDER BY ShipCountry;"
Set rstOrders = dbsNorthwind.OpenRecordset(strSelect)</PRE>
<P></P>
<P></P>
Example (Microsoft Access)</P>
The following example uses the <B>Sort</B> property to set the sort order of a dynaset-type <B>Recordset</B> object based on an Orders table. The records in the rstSorted  recordset variable will be ordered alphabetically by ship country.</P>
Note that you first create a dynaset-type <B>Recordset</B> object and set its <B>Sort</B> property, then open a second dynaset-type <B>Recordset</B> object based on the first. Setting the <B>Sort</B> property of the first <B>Recordset</B> object doesn't actually affect the order of the records that it contains, so you need to create a second <B>Recordset</B> object in order to see the effects of the sort.</P>
<BR></P>
<PRE>Sub SortByCountry()
    Dim dbs As Database
    Dim rstOrders As Recordset, rstSorted As Recordset</PRE>
<P></P>
<BR></P>
<PRE>    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    ' Create dynaset-type Recordset object on Orders table.
    Set rstOrders = dbs.OpenRecordset("Orders", dbOpenDynaset)
    ' Set sort order.
    rstOrders.Sort = "ShipCountry"
    ' Create second dynaset-type Recordset object.
    Set rstSorted = rstOrders.OpenRecordset()
End Sub
</PRE>
<P></P>
Tip</P>
In most situations, it is more efficient to create the second <B>Recordset</B> object with the desired conditions in one step. As a general rule, when you know the data you want to select, it's usually more efficient to create a <B>Recordset</B> object with an SQL statement. The following example shows how you can create just one <B>Recordset</B> object and obtain the same results as in the preceding example.</P>
<BR></P>
<PRE>Dim dbs As Database, rstOrders As Recordset
Dim strSelect As String
Set dbs = CurrentDb
strSelect = "SELECT * FROM Orders ORDER BY [ShipCountry];"
Set rstOrders = dbs.OpenRecordset(strSelect)</PRE>
<P></P>
<P></P>
Example (Microsoft Excel)</P>
This example creates a new recordset from the Supplier recordset in the NWINDEX.MDB database, and then it copies the new recordset onto Sheet1. The new recordset is sorted on the COUNTRY field, in ascending order.</P>
To create the NWINDEX.MDB database, run the Microsoft Excel example for the <B>CreateDatabase </B>method.</P>
<BR></P>
<PRE>Dim db As Database, rs As Recordset, sortedSet As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("Supplier", dbOpenDynaset)
rs.Sort = "[COUNTRY]"
Set sortedSet = rs.OpenRecordset()
Sheets("Sheet1").Activate
ActiveCell.CopyFromRecordset sortedSet
sortedSet.Close
rs.Close
db.Close
</PRE>
</P></BODY>
</HTML>

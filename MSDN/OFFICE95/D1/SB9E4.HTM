<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Properties Collection</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Properties Collection</h2>

Description</p>

A <b>Properties</b> collection contains all the <b>Property</b>
objects for a specific instance of an object.</p>

Remarks</p>

Every data access object contains a <b>Properties</b>
collection, which has certain built-in <b>Property</b> objects.
These <b>Property</b> objects (which are often just called
properties) uniquely characterize that instance of the object.</p>

In addition to the built-in properties, some objects
allow you to create and add your own user-defined properties. To
add a user-defined property to an existing instance of an object,
first define its characteristics with the <b>CreateProperty</b>
method, then add it to the collection with the <b>Append</b>
method.</p>

You can use the <b>Delete</b> method to remove
user-defined properties from the <b>Properties</b> collection,
but you can't remove built-in properties.</p>

Note</p>

A user-defined property (<b>Property</b> object) is
associated only with the specific instance of the object whose <b>Properties</b>
collection you append it to. The property isn't defined for all
instances of objects of the selected type.</p>

You can use the <b>Properties</b> collection of an
object to enumerate the object's built-in and user-defined
properties. You don't need to know beforehand exactly which
properties exist or what their characteristics (<b>Name</b> and <b>Type</b>
properties) are to manipulate them. However, if you try to read a
write-only property, an error occurs.</p>

You can refer to an existing built-in or
user-defined property by its <b>Name</b> property setting using
this syntax:</p>

<i>object</i>.<b>Properties</b>(&quot;<i>name</i>&quot;)</p>

For a built-in property, you can also use this
syntax:</p>

<i>object</i>.<i>name</i></p>

You can also reference properties by their ordinal
position. For example, this syntax refers to the first member of
the <b>Properties</b> collection:</p>

<i>object</i>.<b>Properties</b>(0)</p>

Note</p>

A user-defined property differs from a built-in
property of a data access object in that you must refer to a
user-defined property using the full <b>Properties</b>(&quot;<i>name</i>&quot;)
syntax.</p>

Properties</p>

<b>Count</b> Property.</p>

Methods</p>

<b>Append </b>Method,<b> Delete </b>Method,<b>
Refresh </b>Method.</p>

See Also</p>

Appendix, &quot;Data Access Object Hierarchy.&quot;</p>

Specifics (Microsoft Access)</p>

Several types of properties exist in Microsoft
Access. Each of these properties can be represented in Visual
Basic code by a <b>Property</b> object variable, and each is a
member of a <b>Properties</b> collection.</p>

<H3><a name="sec0"></a>Properties that apply to data
access objects</h3>
<SPAN CLASS="list">
<ul>
    <li>Built-in properties are defined by the Microsoft Jet
        database engine for each data access object.</li>
    <li>User-defined properties can be added to some data access
        objects. These data access objects include <b>Database</b>,
        <b>Index</b>, <b>QueryDef</b>, and <b>TableDef</b>
        objects, and <b>Field</b> objects in the <b>Fields</b>
        collection of a <b>QueryDef</b> or <b>TableDef</b>
        object.</li>
    <li>Some properties defined by Microsoft Access apply to data
        access objects. These properties can generally be set
        either in the Microsoft Access window or from Visual
        Basic. The Jet database engine cannot recognize these
        properties until corresponding <b>Property</b> objects
        are specifically created and appended to the <b>Properties</b>
        collection. The data access objects to which such
        properties may apply are <b>QueryDef</b> and <b>TableDef</b>
        objects, and <b>Field</b> objects in the <b>Fields</b>
        collection of a <b>QueryDef</b> or <b>TableDef</b>
        object. For lists of these Microsoft Access-defined
        properties, see the Specifics (Microsoft Access) sections
        in the topics for the <b>TableDef</b>, <b>QueryDef</b>,
        and <b>Field</b> objects.</li>
</ul>
</SPAN>
Microsoft Access-defined properties that apply to
data access objects differ from properties defined by the Jet
database engine in several ways.</p>

To refer to a user-defined property or a property
defined by Microsoft Access, you must explicitly refer to the <b>Properties</b>
collection. The fastest way to refer to a Microsoft Access
property is by the following syntax.</p>

<br>
</p>

<pre>object.Properties!<i>name</i>
</pre>

You can also use the following, slightly slower
syntax.</p>

<br>
</p>

<pre>object.Properties(&quot;<i>name</i>&quot;)
</pre>

In contrast, to refer to properties defined by the
Jet database engine, you can simply use the object.<i>name</i>
syntax.</p>

If you are setting the value of a Microsoft
Access-defined property for the first time, you first need to
create it using the <b>CreateProperty</b> method. For example,
the <b>Caption</b> property of a <b>Field</b> object is a
Microsoft Access-defined property. If you have not previously set
the <b>Caption</b> property in table Design view, but are setting
the property for the first time from Visual Basic code, you must
first create that property using the <b>CreateProperty</b> method
and append it to the <b>Properties</b> collection before you can
set its value.</p>

A Microsoft Access-defined property is automatically
appended to the <b>Properties</b> collection the first time it is
set in the Microsoft Access window, so if you have already set a
property in the user interface, you don't need to create and
append the property in code. For example, you can set the <b>Caption</b>
property for a table in Datasheet view by clicking Font on the
Format menu. This property is then included in the <b>Properties</b>
collection of a <b>TableDef</b> object that points to the table.</p>

Until you have set a Microsoft Access-defined
property either in table Design view or from Visual Basic code,
that property will not appear in the <b>Properties</b>
collection. When you set these properties from Visual Basic, you
should include error-handling code that checks to see if the
property exists in the <b>Properties </b>collection, and creates
and appends the property if it does not.</p>

<H3><a name="sec1"></a>Properties that apply to
Microsoft Access objects</h3>

Like data access objects, every Microsoft Access
object contains a <b>Properties</b> collection, which has
built-in <b>Property</b> objects. For example, <b>Property</b>
objects that apply to a form are members of the <b>Properties</b>
collection of the <b>Form</b> object.</p>

You can also create user-defined properties for
Microsoft Access objects. For example, you might create a
property called TextType that applies to a text box control.</p>

<b>Property</b> objects in the <b>Properties</b>
collections of <b>Form</b>, <b>Report</b>, and <b>Control</b>
objects differ from data access <b>Property</b> objects in that
they do not have an <b>Inherited</b> property.</p>

You can enumerate the <b>Property</b> objects in the
<b>Properties</b> collections of <b>Form</b>, <b>Report</b>, and <b>Control</b>
objects. However, the Microsoft Access <b>Application</b> object
and the <b>Screen</b> object have <b>Properties</b> collections
that can't be enumerated. Additionally, the properties of these
objects are read-only.</p>

Example</p>

This example creates a user-defined property for the
current database, sets its <b>Type</b> and <b>Value</b>
properties, and appends it to the <b>Properties</b> collection of
the database. Then the example enumerates all properties in the
database.</p>

<br>
</p>

<pre>Function EnumerateProperty () As Integer
    Dim wrkDefault As Workspace, dbsExample As Database
    Dim prpUserDefined As Property, prpEnum As Property
    Dim I As Integer
    ' Get default workspace and current database.
    Set wrkDefault = DBEngine.Workspaces(0)
    Set dbsExample = wrkDefault.OpenDatabase(&quot;Northwind.mdb&quot;)
    ' Create user-defined property.
    Set prpUserDefined = dbsExample.CreateProperty()
    ' Set properties of new property.
    prpUserDefined.Name = &quot;UserDefinedProperty&quot;
    prpUserDefined.Type = dbText
    prpUserDefined.Value = &quot;This is a user-defined property.&quot;
    ' Append property to current database.</pre>

<br>
</p>

<pre>    dbsExample.Properties.Append prpUserDefined
    ' Enumerate all properties of current database.
    Debug.Print &quot;Properties of Database &quot;; dbsExample.Name
    For I = 0 To dbsExample.Properties.Count - 1
        Set prpEnum = dbsExample.Properties(I)
        Debug.Print
        Debug.Print &quot; Properties(&quot;; I; &quot;)&quot;
        Debug.Print &quot;  Name: &quot;; prpEnum.Name
        Debug.Print &quot;  Type: &quot;; prpEnum.Type
        Debug.Print &quot;  Value: &quot;; prpEnum.Value
        Debug.Print &quot;  Inherited: &quot;; prpEnum.Inherited
    Next I
    Debug.Print
    EnumerateProperty = True
End Function
</pre>

This example shows how you can set an
application-defined property (or any user-defined property that
may not yet exist) without causing a run-time error. The example
sets an arbitrary property of a <b>Field</b> object. The return
value of the function is <b>True</b> if the value was properly
set. The return value is <b>False</b> if an unexpected error
occurs when the property is set.</p>

<br>
</p>

<pre>Function SetFieldProperty (fldPropVal As Field, strName As String, intType As Integer, varValue As Variant) As Integer
    Const ERR_PROPERTY_NONEXISTENT = 3270
    Dim prpUserDefined As Property
    On Error Resume Next    ' Function handles errors.
    SetFieldProperty = True
    fldPropVal.Properties(strName) = varValue
    If Err &lt;&gt; 0 Then    ' Error occurred when value was set.
        If Err &lt;&gt; ERR_PROPERTY_NONEXISTENT
            On Error GoTo 0
            SetFieldProperty = False
        Else
            ' Create Property object, setting its Name, Type, and Value
            ' properties.
            On Error Resume Next
            Set prpUserDefined = fldPropVal.CreateProperty(strName, _ 
                intType, varValue)
            fldPropVal.Properties.Append prpUserDefined
            If Err &lt;&gt; 0 Then
                SetFieldProperty = False
            End If
            On Error GoTo 0
        End If
    End If
End Function
</pre>

Example (Microsoft Access)</p>

The following example creates a new user-defined
property, sets its initial value, and appends it to the <b>Properties</b>
collection of a <b>TableDef</b> object.</p>

<br>
</p>

<pre>Sub CreateNewProperty()
    Dim dbs As Database, tdf As TableDef
    Dim prp As Property
    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Orders
    ' Create new property, denote type, and set initial value.
    Set prp = tdf.CreateProperty(&quot;LastSaved&quot;, dbText, &quot;New&quot;)
    ' Append to Properties collection of TableDef object.
    tdf.Properties.Append prp
End Sub</pre>

The next example creates a property that is defined
by Microsoft Access, but applies to data access objects. Because
the Microsoft Jet database engine cannot recognize properties
defined by Microsoft Access, you must create a new <b>Property</b>
object and append it to the <b>Properties</b> collection if you
are setting the property for the first time.</p>

Note that you must specify the correct constant for
the <i>type </i>argument when you create the property. If you're
not certain which data type you should use, see the topic for the
individual property.</p>

<br>
</p>

<pre>Sub CreateAccessProperty()
    Dim dbs As Database, tdf As TableDef
    Dim prp As Property

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs!Orders
    ' Create property, denote type, and set initial value.
    Set prp = tdf.CreateProperty(&quot;DatasheetFontItalic&quot;, dbBoolean, True)
    ' Append Property object to Properties collection.
    tdf.Properties.Append prp
End Sub
</pre>
</BODY>

</html>

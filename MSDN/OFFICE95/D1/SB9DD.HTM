<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameter Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Parameter Object</h2>

Description</p>

A <b>Parameter</b> object represents a parameter
associated with a <b>QueryDef</b> object created from a parameter
query.</p>

Remarks</p>

Using the properties of a <b>Parameter</b> object,
you can set a query parameter that can be changed before the
query is run. You can:</p>
<SPAN CLASS="list">
<ul>
    <li>Check the <b>Name</b> property setting to determine the
        name of a parameter.</li>
    <li>Check or set the <b>Value</b> property (default) of a
        parameter. For example:</li>
</ul>
</SPAN>
<br>
</p>

<pre>qdfNewHires.Parameters(0) = 5</pre>
<SPAN CLASS="list">
<ul>
    <li>Check the <b>Type</b> property setting to determine the
        data type of the <b>Parameter</b> object.</li>
</ul>
</SPAN>
The <b>Parameters</b> collection provides
information only about existing parameters. You can't append
objects to, or delete objects from, the <b>Parameters</b>
collection.</p>

The only method supported by the <b>Parameters</b>
collection is the <b>Refresh</b> method.</p>

Properties</p>

<b>Name </b>Property,<b> Type </b>Property,<b> Value
</b>Property.</p>

See Also</p>

Appendix, &quot;Data Access Object Hierarchy.&quot;</p>

Example</p>

This example sets two query parameters for a
hypothetical parameter query named &quot;ParamQuery,&quot;
executes the query by opening a <b>Recordset</b> from the <b>QueryDef</b>,
and then prints the properties of each parameter. Note that this
query does not actually exist in the Northwind sample database.
The parameter data types are of type <b>Date</b>. </p>

<br>
</p>

<pre>Dim dbsCurrent As Database
Dim qdfParam As QueryDef, prmEnum As Parameter
Dim rstParam As Recordset
Dim X As Integer
Set dbsCurrent = DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
Set qdfParam = dbsCurrent.QueryDefs(&quot;ParamQuery&quot;)    ' Open existing 
                                                    ' QueryDef.
qdfParam.Parameters(&quot;Order Date&quot;) = &quot;10/11/94&quot;        ' Set parameters.
qdfParam.Parameters(&quot;Ship Date&quot;) = &quot;11/4/94&quot;
Set rstParam = qdfParam.OpenRecordset()                ' Open Recordset.
For X = 0 To qdfParam.Parameters.Count - 1
    Set prmEnum = qdfParam.Parameters(X)
    Debug.Print prmEnum.Name            ' Print parameter properties.
    Debug.Print prmEnum.Type
    Debug.Print prmEnum.Value
Next X
rstParam.Close
</pre>

Example (Microsoft Access)</p>

The following example creates a new parameter query
and supplies values for the parameters.</p>

<br>
</p>

<pre>Sub NewParameterQuery()
    Dim dbs As Database, qdf As QueryDef, rst As Recordset
    Dim prm As Parameter, strSQL As String

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    ' Construct SQL string.
    strSQL = &quot;PARAMETERS [Beginning OrderDate] DateTime, &quot; &amp; _
        &quot;[Ending OrderDate] DateTime; SELECT * FROM Orders &quot; &amp; _
        &quot;WHERE ([OrderDate] Between[Beginning OrderDate] &quot; &amp; _
        &quot;And [Ending OrderDate]);&quot;
    ' Create new QueryDef object.
    Set qdf = dbs.CreateQueryDef(&quot;ParameterQuery&quot;, strSQL)
    ' Supply values for parameters.
    qdf.Parameters![Beginning OrderDate] = #4-1-95#
    qdf.Parameters![Ending OrderDate] = #4-30-95#
End Sub

</pre>
</BODY>

</html>

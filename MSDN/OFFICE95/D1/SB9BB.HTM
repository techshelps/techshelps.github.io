<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ForeignName Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>ForeignName Property</H2>Applies To</P>
<B>Field </B>Object.</P>
Description</P>
Sets or returns a value that, in a relationship, specifies the name of the <B>Field</B> object in a foreign table that corresponds to a field in a primary table.</P>
Settings and Return Values</P>
The setting or return value is a string expression that evaluates to the name of a <B>Field</B> in the associated <B>TableDef</B> object's <B>Fields</B> collection.</P>
Remarks</P>
Only a <B>Field</B> object that belongs to a <B>Fields</B> collection contained by a <B>Relation</B> object can support the <B>ForeignName</B> property. If the <B>Relation</B> isn't appended to the <B>Database</B>, but the <B>Field </B>is appended to the <B>Relation</B>, you can still change the <B>ForeignName</B> property. Once the <B>Relation</B> object is appended to the database, the properties of the <B>Field</B> object are read-only.</P>
The <B>Name</B> and <B>ForeignName</B> property <I>value </I>settings for a <B>Field</B> object specify the names of the corresponding fields in the primary and foreign tables of a relationship. The <B>Table</B> and <B>ForeignTable</B> property <I>value </I>argument settings of a <B>Relation</B> object determine the primary and foreign tables of a relationship.</P>
For example, if you had a list of valid part codes (in a field named PartNo) stored in a ValidParts table, you could establish a relationship with an OrderItem table such that if a part code was entered into the OrderItem table it must exist in the ValidParts table. If the part code did not exist in the ValidParts table and you had not indicated no enforcement of referential integrity in the <B>Attributes</B> property, a trappable error would occur.</P>
In this case, the ValidParts table would be an example of a Primary table, so the <B>ForeignTable</B> property of the <B>Relation</B> object would be set to OrderItem and the <B>Table</B> property of the <B>Relation</B> object would be set to ValidParts. The <B>Name</B> property and <B>ForeignName</B> property of the <B>Field</B> object would both be PartNo.</P>
See Also</P>
<B>ForeignTable </B>Property,<B> Name </B>Property,<B> Table </B>Property.</P>
<P></P>
Example</P>
This example shows how you can use the <B>ForeignName</B>, <B>ForeignTable</B>, and <B>Table</B> properties when you create a relationship between two existing tables — in this case, Table1 (the primary table) and Table2 (the foreign table) in the specified database. Field1 is the primary key in Table1, and Field2 is a foreign key in Table2. The relationship is one-to-many and referential integrity is enforced.</P>
<BR></P>
<PRE>Function ForeignNameTable () As Integer
    Dim dbsDefault As Database
    Dim fldLocal As Field, relForeign As Relation
' Get database.
    Set dbsDefault = _<BR>         DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
' Create new relationship and set its properties.
    Set relForeign = dbsDefault.CreateRelation("MyRelation") 
    relForeign.Table = "Table1"
    relForeign.ForeignTable = "Table2"
' Create field and set its properties.
    Set fldLocal = relForeign.CreateField("Field1")
    fldLocal.ForeignName = "Field2"
' Append field to relation and relation to database.
    relForeign.Fields.Append fldLocal
    dbsDefault.Relations.Append relForeign
    dbsDefault.Close
End Function
</PRE>
Example (Microsoft Access)</P>
The following example shows how you can use the <B>ForeignName</B>, <B>ForeignTable</B>, and <B>Table</B> properties when you create a relationship between two existing tables — in this case, Employees (the primary table) and Orders (the foreign table) in the current database. EmployeeID is the primary key in the Employees table, and also a foreign key in the Orders table. The relationship is one-to-many and referential integrity is enforced.</P>
To test the following example in Microsoft Access, open the Northwind database and click Relationships on the Tools menu. Delete the relationship between the Employees table and the Orders table. Close the Relationships window, saving the current configuration when prompted. Then run the following procedure from a standard module, and view the Relationships window again to see the new relationship.</P>
<BR></P>
<PRE>Sub ForeignNameTable()
    Dim dbs As Database
    Dim fld As Field, rel As Relation

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    ' Create new relationship and set its properties.
    Set rel = dbs.CreateRelation("EmployeesRelation")
    ' Denote primary table.
    rel.Table = "Employees"</PRE>
<P></P>
<BR></P>
<PRE>    ' Denote foreign table.
    rel.ForeignTable = "Orders"
    rel.Attributes = dbRelationUpdateCascade + dbRelationDeleteCascade
    ' Create field in Fields collection of Relation.
    Set fld = rel.CreateField("EmployeeID")
    ' Provide name of foreign key field.
    fld.ForeignName = "EmployeeID"
    ' Append field to Relation and Relation to database.
    rel.Fields.Append fld
    dbs.Relations.Append rel
End Sub
</PRE>
</P></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryDef Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>QueryDef Object</h2>

Description</p>

A <b>QueryDef</b> object is a stored definition of a
query in a Microsoft Jet database.</p>

Remarks</p>

The <b>QueryDef</b> object corresponds to a stored
query definition in a database. You can think of a saved query as
a compiled SQL statement.</p>

You can use the properties of a <b>QueryDef</b>
object to define a query. For example, you can:</p>
<SPAN CLASS="list">
<ul>
    <li>Check and modify the <b>SQL</b> property setting, set its
        parameters, and then run the query.</li>
    <li>Set query parameters using the <b>QueryDef</b> object's <b>Parameters</b>
        collection.</li>
    <li>Set or check the <b>Type</b> property to determine
        whether the query selects records from an existing table,
        makes a new table, inserts records from one table into
        another table, deletes records, or updates records.</li>
    <li>Retrieve data from an ODBC data source by setting the <b>ODBCTimeout</b>
        and <b>Connect</b> properties and, if the query isn't a
        select query, setting the <b>ReturnsRecords</b> property
        to <b>False</b>.</li>
    <li>Indicate the query is to be passed to an external ODBC
        server by setting the <b>Connect</b> property, making it
        an SQL pass through query.</li>
    <li>Use the <b>ReturnsRecords</b> property to indicate that
        the query returns records. The <b>ReturnsRecords</b>
        property is only valid on SQL pass through queries.</li>
    <li>Use the <b>ODBCTimeout</b> property to indicate how long
        to wait before the query returns records. The <b>ODBCTimeout</b>
        property applies to any query that accesses ODBC data.</li>
</ul>
</SPAN>
Queries executed from <b>QueryDef</b> objects run
faster than queries specified by the <b>OpenRecordset</b> method
because the Microsoft Jet database engine doesn't need to compile
the query before executing it.</p>

The preferred way to use the native SQL dialect of
an external database engine is by using <b>QueryDef</b> objects.
For example, you can create a Transact SQL query (as used with
Microsoft SQL Server) and store it in a <b>QueryDef</b> object.
When you need to use a non-Jet database engine SQL query, you
must provide a <b>Connect</b> property string that points to the
external data source. Queries with valid <b>Connect</b>
properties bypass the Jet database engine and pass the query
directly to the external database server for processing.</p>

To create a new <b>QueryDef</b> object, use the <b>CreateQueryDef</b>
method.</p>

Properties</p>

<b>Connect</b> Property; <b>DateCreated</b>, <b>LastUpdated</b>
Properties; <b>KeepLocal</b> Property; <b>LogMessages</b>
Property; <b>Name</b> Property; <b>ODBCTimeout</b> Property; <b>RecordsAffected</b>
Property; <b>Replicable</b> Property; <b>ReturnsRecords</b>
Property; <b>SQL</b> Property; <b>Type</b> Property; <b>Updatable</b>
Property.</p>

Methods</p>

<b>CreateProperty </b>Method,<b> Execute </b>Method,<b>
OpenRecordset </b>Method.</p>

See Also</p>

<b>CreateQueryDef </b>Method; Appendix, &quot;Data
Access Object Hierarchy.&quot;</p>

Specifics (Microsoft Access)</p>

In addition to the properties defined by the
Microsoft Jet database engine, a <b>QueryDef</b> object may also
contain these Microsoft Access application-defined properties.
For details on checking and setting these properties, see the
topics for the individual properties and the <b>Property</b>
object.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="162pt" VALIGN="TOP"><COL WIDTH="92pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top"><b>DatasheetFontHeight </b></td>
        <TD valign="top"><b>FrozenColumns</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontItalic</b></td>
        <TD valign="top"><b>LogMessages</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontName</b></td>
        <TD valign="top"><b>RecordLocks</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontUnderline</b></td>
        <TD valign="top"><b>RowHeight</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontWeight</b></td>
        <TD valign="top"><b>ShowGrid</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>Description</b></td>
        <TD valign="top">&nbsp;</td>
    </tr>
</TBODY></table>

<br>
</p>

Example</p>

This example creates a new <b>QueryDef</b> object
and appends it to the <b>QueryDefs</b> collection in the current
database. Then the example enumerates all the <b>QueryDef</b>
objects in the database and all the properties of the new <b>QueryDef</b>.</p>

<br>
</p>

<pre>Function EnumerateQueryDef () As Integer
    Dim wrkCurrent As Workspace, dbsExample As Database, qdfTest As _ 
        QueryDef
    Dim I As Integer
    Set wrkCurrent = DBEngine.Workspaces(0)
    Set dbsExample = wrkCurrent.OpenDatabase(&quot;Northwind.mdb&quot;)
    Set qdfTest = dbsExample.CreateQueryDef(&quot;This is a test&quot;)
    Debug.Print
    ' Enumerate QueryDef objects.
    Debug.Print
    For I = 0 To dbsExample.QueryDefs.Count - 1
        Debug.Print dbsExample.QueryDefs(I).Name
    Next I
    ' Enumerate built-in properties of qdfTest.
    Debug.Print
    Debug.Print &quot;qdfTest.Name: &quot;; qdfTest.Name
    Debug.Print &quot;qdfTest.DateCreated: &quot;; qdfTest.DateCreated
    Debug.Print &quot;qdfTest.LastUpdated: &quot;; qdfTest.LastUpdated
    Debug.Print &quot;qdfTest.SQL: &quot;; qdfTest.SQL
    Debug.Print &quot;qdfTest.ODBCTimeout: &quot;; qdfTest.ODBCTimeout
    Debug.Print &quot;qdfTest.Updatable: &quot;; qdfTest.Updatable
    Debug.Print &quot;qdfTest.Type: &quot;; qdfTest.Type
    Debug.Print &quot;qdfTest.Connect: &quot;; qdfTest.Connect
    Debug.Print &quot;qdfTest.ReturnsRecords: &quot;; qdfTest.ReturnsRecords
    dbsExample.QueryDefs.Delete &quot;This is a test&quot;
    EnumerateQueryDef = True
End Function
</pre>

Example (Microsoft Access)</p>

The following example checks to see if there is a
query called RecentHires in the current database, and deletes it
from the <b>QueryDefs</b> collection if it exists. Then the
procedure creates a new <b>QueryDef</b> object and opens it in
Datasheet view.</p>

<br>
</p>

<pre>Sub NewQuery()
    Dim dbs As Database, qdf As QueryDef
    Dim strSQL As String

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    ' Refresh QueryDefs collection.
    dbs.QueryDefs.Refresh
    ' If RecentHires query exists, delete it.
    For Each qdf in dbs.QueryDefs
        If qdf.Name = &quot;RecentHires&quot; Then
            dbs.QueryDefs.Delete qdf.Name
        End If
    Next qdf
    ' Create SQL string to select employees hired after 1-1-95.
    strSQL = &quot;SELECT * FROM Employees WHERE HireDate &gt;= #1-1-95#;&quot;
    ' Create new QueryDef object.
    Set qdf = dbs.CreateQueryDef(&quot;RecentHires&quot;, strSQL)
    ' Open query in Datasheet view.
    DoCmd.OpenQuery qdf.Name
End Sub
</pre>
</BODY>

</html>

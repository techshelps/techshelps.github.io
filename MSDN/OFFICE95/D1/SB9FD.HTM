<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Size Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Size Property</H2>Applies To</P>
<B>Field </B>Object.</P>
Description</P>
Returns a value that indicates the maximum size, in bytes, of a <B>Field</B> object. For Text fields, you can also use it to set the maximum size of data that the <B>Field</B> object can hold. For an object not yet appended to the <B>Fields</B> collection, this property is read/write.</P>
Settings and Return Values</P>
The setting or return value indicates the maximum size of a <B>Field</B> object. The data type is <B>Long</B>. The setting depends on the <B>Type</B> property setting of the <B>Field</B> object and can be one of these integer values.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="105pt" VALIGN="TOP"><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="173pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Type</P></TD><TD VALIGN="TOP">Size</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dbBoolean</B></P></TD><TD VALIGN="TOP">1</P></TD><TD VALIGN="TOP">Boolean</P></TD></TR><TR><TD VALIGN="TOP"><B>dbByte</B></P></TD><TD VALIGN="TOP">1</P></TD><TD VALIGN="TOP">Byte</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="105pt" VALIGN="TOP"><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="173pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Type</P></TD><TD VALIGN="TOP">Size</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dbInteger</B></P></TD><TD VALIGN="TOP">2</P></TD><TD VALIGN="TOP">Integer</P></TD></TR><TR><TD VALIGN="TOP"><B>dbLong</B></P></TD><TD VALIGN="TOP">4</P></TD><TD VALIGN="TOP">Long</P></TD></TR><TR><TD VALIGN="TOP"><B>dbCurrency</B></P></TD><TD VALIGN="TOP">8</P></TD><TD VALIGN="TOP">Currency</P></TD></TR><TR><TD VALIGN="TOP"><B>dbSingle</B></P></TD><TD VALIGN="TOP">4</P></TD><TD VALIGN="TOP">Single</P></TD></TR><TR><TD VALIGN="TOP"><B>dbDouble</B></P></TD><TD VALIGN="TOP">8</P></TD><TD VALIGN="TOP">Double</P></TD></TR><TR><TD VALIGN="TOP"><B>dbDate</B></P></TD><TD VALIGN="TOP">8</P></TD><TD VALIGN="TOP">Date/Time</P></TD></TR><TR><TD VALIGN="TOP"><B>dbText</B></P></TD><TD VALIGN="TOP">1–255</P></TD><TD VALIGN="TOP">Text</P></TD></TR><TR><TD VALIGN="TOP"><B>dbLongBinary</B></P></TD><TD VALIGN="TOP">0</P></TD><TD VALIGN="TOP">Long Binary (OLE Object)</P></TD></TR><TR><TD VALIGN="TOP"><B>dbMemo</B></P></TD><TD VALIGN="TOP">0</P></TD><TD VALIGN="TOP">Memo</P></TD></TR><TR><TD VALIGN="TOP"><B>dbGUID</B></P></TD><TD VALIGN="TOP">16</P></TD><TD VALIGN="TOP">GUID</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
These constants are listed in the Data Access (DAO) object library in the Object Browser.</P>
Use of the <B>Size</B> property depends on the object that contains the <B>Fields</B> collection that the <B>Field</B> object is appended to, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="218pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Object appended to</P></TD><TD VALIGN="TOP">Usage</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Index</B></P></TD><TD VALIGN="TOP">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><B>QueryDef</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Recordset</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><B>Relation</B></P></TD><TD VALIGN="TOP">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><B>TableDef</B></P></TD><TD VALIGN="TOP">Read-only</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
When you create a <B>Field</B> object with a data type other than Text, the <B>Type</B> property setting automatically determines the <B>Size</B> property setting, and you don't need to set the <B>Size</B> property. For a <B>Field</B> object with the Text data type, however, <B>Size</B> can be set to any integer up to the maximum text size (for Microsoft Jet databases that maximum is 255). If you do not set the size, the field will be as large as the database allows.</P>
For OLE Object and Memo <B>Field</B> objects, <B>Size</B> is always set to 0. Use the <B>FieldSize</B> method of the <B>Field</B> object to determine the size of the data in a specific record. The maximum size of an OLE Object or Memo field is limited only by your system resources or the maximum size that the database allows.</P>
See Also</P>
<B>Attributes </B>Property,<B> Index </B>Object,<B> QueryDef </B>Object,<B> Type </B>Property.</P>
Specifics (Microsoft Access)</P>
The <B>Size</B> property is equivalent to the <B>FieldSize</B> property in table Design view. You can't set the <B>FieldSize</B> property in Visual Basic; you must use the <B>Size</B> property instead.</P>
<P></P>
In Microsoft Access, the Memo data type field can contain up to 1.2 gigabytes of information. However, Microsoft Access only displays the first 32K of data in a control on a form or report.</P>
Example</P>
This example creates a new <B>Field</B> object with a Text field type, sets its <B>Name</B> property to Fax Phone and its <B>Size</B> property to 20, and appends the new object to the <B>Fields</B> collection of the Employees table in the <B>TableDefs</B> collection of the database.</P>
<BR></P>
<PRE>Function SizeType() As Integer
    Dim dbsNorthwind As Database
    Dim fldFaxPhone As Field, tdfEmployees As TableDef
    ' Open database.
    Set dbsNorthwind = _ <BR>        DBEngine.Workspaces(0).OpenDatabase("Northwind.mdb")
    ' Get existing table reference.
    Set tdfEmployees = dbsNorthwind.TableDefs("Employees")
    ' Create Field object.
    Set fldFaxPhone = tdfEmployees.CreateField("Fax Phone")
    ' Set field properties.
    fldFaxPhone.Type = dbText
    fldFaxPhone.Size = 20
    ' Append fldFaxPhone to Fields collection.
    tdfEmployees.Fields.Append fldFaxPhone
    SizeType = True
End Function
</PRE>
You can also use the <B>CreateField</B> method if you provide <I>name, type, </I>and <I>size</I> as arguments.</P>
<BR></P>
<PRE>Set fldFaxPhone = tdfEmployees.CreateField("Fax Phone", dbText, 20)
</PRE>
Example (Microsoft Access)</P>
The following example creates a new <B>Field</B> object and sets its <B>Size</B> and <B>Type</B> properties. The procedure then appends the new object to the <B>Fields</B> collection of the Employees table in the <B>TableDefs</B> collection of the database.</P>
<BR></P>
<PRE>Sub NewField()
    Dim dbs As Database, tdf As TableDef
    Dim fld As Field

    ' Return Database object that points to current database.
    Set dbs = CurrentDb
    ' Return TableDef variable pointing to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Create Field object.
    Set fld = tdf.CreateField("DaysOfVacation")
    ' Set field properties.
    fld.Type = dbText
    fld.Size = 20</PRE>
<P></P>
<BR></P>
<PRE>    ' Append fld to Fields collection.
    tdf.Fields.Append fld
End Sub
</PRE>
You can also use the <B>CreateField</B> method to set the <B>Name</B>, <B>Type</B>, and <B>Size</B> properties if you provide <I>name, type, </I>and <I>size</I> as arguments.</P>
<BR></P>
<PRE>Set fld = tdfEmployees.CreateField("DaysOfVacation", dbText, 20)
</PRE>
Example (Microsoft Excel)</P>
This example copies onto Sheet1 all fields of the <B>Double</B> type from ORDDTAIL.DBF, a dBASE IV table located in the C:\Program Files\Common Files\Microsoft Shared\MSquery folder. (On Windows NT, ORDDTAIL.DBF is located in the \WINDOWS\MSAPPS\MSQUERY folder.)</P>
<BR></P>
<PRE>Const sourceDir = "C:\Program Files\Common Files\Microsoft Shared\" _<BR>    &amp; "MSquery"
Dim db As Database, recordsToCopy As Recordset, tDef As Recordset
Dim fieldsToStore(1000), fileName As String
fileName = "ORDDTAIL.DBF"
Set db = Workspaces(0).OpenDatabase(sourceDir, _<BR>    False, False, "dBASE IV")
Set tDef = db.OpenRecordset(fileName)
n = 0
Sheets("Sheet1").Activate
For i = 0 To tDef.Fields.Count - 1
    If tDef.Fields(i).Type = dbDouble Then
        fieldsToStore(n) = tDef.fields(i).Name
        n = n + 1
    End If
Next
If fieldsToStore(0) = "" Then
    MsgBox "There are no number fields in this table."
    Exit Sub
End If
For i = 0 To n - 1
    records = "SELECT " &amp; "[" &amp; fieldsToStore(i) &amp; "]" _<BR>        &amp; " from " &amp; db.Recordsets(fileName).Name &amp; ";"
    Set recordsToCopy = db.OpenRecordset(records)
    With ActiveSheet.Cells(1, i + 1)
        .CopyFromRecordset recordsToCopy
        .ColumnWidth = recordsToCopy.fields(0).Size
    End With
Next
recordsToCopy.Close
tDef.Close
db.Close
</PRE>
<P></P></BODY>
</HTML>

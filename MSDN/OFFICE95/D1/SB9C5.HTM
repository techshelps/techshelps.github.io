<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Index Property</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Index Property</h2>

Applies To</p>

<b>Recordset </b>Object,<b> </b>Table-Type <b>Recordset
</b>Object.</p>

Description</p>

Sets or returns a value that indicates the name of
the current <b>Index</b> object in a table-type <b>Recordset</b>
object.</p>

Settings and Return Values</p>

The setting or return value is a string expression
that evaluates to the name of an <b>Index</b> object in the <b>Indexes</b>
collection of the <b>Table</b> or table-type <b>Recordset</b>
object's <b>TableDef</b> object. The data type is <b>String</b>.</p>

Remarks</p>

Records in base tables aren't stored in any
particular order. Setting the <b>Index</b> property changes the
order of records returned from the database; it doesn't affect
the order in which the records are stored.</p>

For example, to set the <b>Index</b> property prior
to using the <b>Seek</b> method on the Titles table:</p>

<br>
</p>

<pre>Dim rstTitles as Recordset, dbsBiblio as Database
Set dbsBiblio = Workspaces(0).OpenDatabase(&quot;Biblio.mdb&quot;)
Set rstTitles = dbsBiblio.OpenRecordset(&quot;Titles&quot;,dbOpenTable)
rstTitles.Index = &quot;PubID&quot;
rstTitles.Seek &quot;=&quot;, 3
</pre>

The specified <b>Index</b> object must already be
defined. If you set the <b>Index</b> property to an <b>Index</b>
object that doesn't exist or if the <b>Index</b> property isn't
set when you use the <b>Seek</b> method, a trappable error
occurs.</p>

Examine the <b>Indexes</b> collection of a <b>TableDef</b>
object to determine what <b>Index</b> objects are available to
table-type <b>Recordset</b> objects created from that <b>TableDef</b>
object.</p>

You can create a new index for the table by creating
a new <b>Index</b> object, setting its properties, appending it
to the <b>Indexes</b> collection of the underlying <b>TableDef</b>
object, and then reopening the <b>Recordset</b> object.</p>

Records returned from a table-type <b>Recordset</b>
object can be ordered only by the indexes defined for the
underlying <b>TableDef</b> object. To sort records in some other
order, you can open a dynaset- or Snapshot-Type <b>Recordset</b>
object using an SQL statement with an ORDER BY clause.</p>

Tips</p>

<ul>
    <li>You don't have to create indexes for tables, but in
        large, unindexed tables, accessing a specific record or
        creating a <b>Recordset</b> object can take a long time.
        On the other hand, creating too many indexes slows down
        update, append, and delete operations as all indexes are
        automatically updated.</li>
    <li>Records read from tables without indexes are returned in
        no particular sequence.</li>
    <li>The <b>Attributes</b> property of each <b>Field</b>
        object in the <b>Index</b> object determines the order of
        records and consequently determines the access techniques
        to use for that index.</li>
    <li>A unique index helps optimize finding records.</li>
    <li>Indexes don't affect the physical order of a base table
        &#151; indexes affect only how the records are accessed
        by the table-type <b>Recordset</b> object when a
        particular index is chosen or when the Microsoft Jet
        database engine creates <b>Recordset</b> objects.</li>
</ul>
</SPAN>
See Also</p>

<b>Append </b>Method,<b> Index </b>Object,<b>
Primary </b>Property,<b> Seek </b>Method,<b> Sort </b>Property,<b>
TableDef </b>Object.</p>

Example</p>

This example adds a new index to a <b>TableDef</b>
object in the Biblio.mdb database, makes that index the current
index, and invokes the <b>Seek</b> method based on that index.
The names of the <b>Field</b> objects created and appended to the
<b>Fields</b> collection of the <b>Index</b> object correspond to
the names of current fields in the table.</p>

<br>
</p>

<pre>Dim rstPublishers As Recordset, dbsBiblio As Database
Dim idxPubIDName As Index, fldPubID As Field, fldName As Field
Set dbsBiblio =  DBEngine.Workspaces(0).OpenDatabase(&quot;Biblio.mdb&quot;)
Set idxPubIDName = dbsBiblio.TableDefs(&quot;Publishers&quot;).CreateIndex _ 
    (&quot;PubID Name&quot;)
Set fldPubID = idxPubIDName.CreateField(&quot;PubID&quot;)
idxPubIDName.Fields.Append fldPubID
Set fldName = idxPubIDName.CreateField(&quot;Name&quot;)
idxPubIDName.Fields.Append fldName
idxPubIDName.Unique = True
Debug.Print idxPubIDName.Fields    ' Show Fields property.
' Append the new Index to the Indexes collection.
dbsBiblio.TableDefs(&quot;Publishers&quot;).Indexes.Append idxPubIDName
'Open the table.
Set rstPublishers = dbsBiblio.OpenRecordset(&quot;Publishers&quot;,dbOpenTable)  
rstPublishers.Index = &quot;PubID Name&quot;    ' Set table's current index.
rstPublishers.Seek &quot;=&quot;, &quot;27&quot;, &quot;Yourdon Press&quot;  ' Look for Publisher.
If rstPublishers.NoMatch Then
    rstPublishers.MoveFirst
    Debug.Print &quot;Not found&quot;
Else
    Debug.Print rstPublishers!Name
End If</pre>

<br>
</p>

<pre>rstPublishers.Close
</pre>

This example sets the index for rstOrders to the
primary key. (PrimaryKey is the default name of an <b>Index</b>
object if the primary key is set in the table's Design view.)
Next, it locates the record with a matching key field value of
10,050. Notice that the current index must be set before certain
operations, such as the <b>Seek</b> method, can be performed.</p>

<br>
</p>

<pre>Dim dbsNorthwind As Database, rstOrders As Recordset
Set dbsNorthwind =  DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
Set rstOrders = dbsNorthwind.OpenRecordset(&quot;Orders&quot;, dbOpenTable)
rstOrders.Index = &quot;PrimaryKey&quot;    ' Set current index.
rstOrders.Seek &quot;=&quot;, 10050    ' Locate record.
...
rstOrders.Close    ' Close recordset.
dbsNorthwind.Close    ' Close database.
</pre>

Example (Microsoft Access)</p>

The following example sets the index for a
table-type <b>Recordset</b> object to the primary key.
&quot;PrimaryKey&quot; is the default name of an <b>Index</b>
object if the index corresponds to the primary key set in table
Design view. Next, the procedure asks the user for a value to
search on and locates the record with a matching key field value.
Note that the current index must be set before certain
operations, such as the <b>Seek</b> method, can be performed on a
table-type <b>Recordset</b> object.</p>

<br>
</p>

<pre>Sub UsePrimaryKey()
    Dim dbs As Database, rst As Recordset
    Dim fld as Field, strInput as String

    ' Return Database variable that points to current database.
    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(&quot;Orders&quot;, dbOpenTable)
    ' Set current index.
    rst.Index = &quot;PrimaryKey&quot;
    strInput = InputBox(&quot;Enter the OrderID on which to search.&quot;)
    ' Locate record.
    rst.Seek &quot;=&quot;, strInput
    If Not rst.NoMatch Then
        For Each fld in rst.Fields
            Debug.Print fld.Name; &quot;   &quot;; fld.Value
        Next fld
    End If
    ' Close Recordset object.
    rst.Close
End Sub

</pre>
</BODY>

</html>

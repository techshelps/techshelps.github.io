<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recordset Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Recordset Object</h2>

Description</p>

A <b>Recordset</b> object represents the records in
a base table or the records that result from running a query.</p>

Remarks</p>

When you use data access objects, you interact with
data almost entirely using <b>Recordset</b> objects. All <b>Recordset</b>
objects are constructed using records (rows) and fields
(columns). </p>

There are three types of <b>Recordset</b> objects:</p>
<SPAN CLASS="list">
<ul>
    <li>Table-type <b>Recordset</b> &#151; a representation in
        code of a base table that you can use to add, change, or
        delete records from a single database table.</li>
    <li>Dynaset-type <b>Recordset</b> &#151; the result of a
        query that can have updatable records. A dynaset-type <b>Recordset</b>
        object is a dynamic set of records that you can use to
        add, change, or delete records from an underlying
        database table or tables. A dynaset-type <b>Recordset</b>
        object can contain fields from one or more tables in a
        database.</li>
    <li>Snapshot-type <b>Recordset</b> &#151; a static copy of a
        set of records that you can use to find data or generate
        reports. A snapshot-type <b>Recordset</b> object can
        contain fields from one or more tables in a database but
        can't be updated.</li>
</ul>
</SPAN>
You can choose the type of <b>Recordset</b> object
you want to create using the <i>type</i> argument of the <b>OpenRecordset</b>
method. If you don't specify a <i>type</i>, the Microsoft Jet
database engine attempts to create a table-type <b>Recordset</b>
object. If this isn't possible, the Jet database engine attempts
a dynaset-type and then a snapshot-type <b>Recordset</b> object.</p>

When creating a <b>Recordset</b> object using a
nonattached <b>TableDef</b> object, table-type <b>Recordset</b>
objects are created. Only dynaset-type or snapshot-type <b>Recordset</b>
objects can be created with attached tables or tables in external
ODBC databases.</p>

The <b>Type</b> property indicates the type of <b>Recordset</b>
object created, and the <b>Updatable</b> property indicates
whether you can change the object's records.</p>

A new <b>Recordset</b> object is automatically added
to the <b>Recordsets</b> collection when you open the object, and
is automatically removed when you close it.</p>

Information about the structure of a base table,
such as the names and data types of each <b>Field</b> object and
any <b>Index</b> objects, is stored in a <b>TableDef</b> object.</p>

Note</p>

If you use variables to represent a <b>Recordset</b>
object and the <b>Database</b> object that contains the
recordset, make sure the variables have the same scope, or
lifetime. For example, if you declare a global variable that
represents a <b>Recordset</b> object, make sure the variable that
represents the database containing the recordset is also global,
or is declared in a <b>Sub</b> or <b>Function</b> procedure using
the <b>Static</b> keyword.</p>

Your application can create as many Recordset object
variables as needed. A Recordset object can refer to one or more
tables or queries, or can be an SQL statement. You can also have
a Recordset object that refers to some or all of the fields or
records in other Recordset objects.</p>

Dynaset- and snapshot-type <b>Recordset</b> objects
are stored in local memory. If there isn't enough space in local
memory to store the data, the Jet database engine saves the
additional data to TEMP disk space. If this space is exhausted, a
trappable error occurs.</p>

The default collection of a <b>Recordset</b> object
is the <b>Fields</b> collection, and the default property of a <b>Field</b>
object is the <b>Value</b> property. You can simplify your code
by using these defaults. For example, the following lines of code
all set the value of the PubID field in the current record of a <b>Recordset</b>
object.</p>

<br>
</p>

<pre>rstPublishers!PubID = 99
rstPublishers(&quot;PubID&quot;) = 99
rstPublishers.Fields(&quot;PubID&quot;).Value = 99
</pre>

When you create a <b>Recordset</b> object, the
current record is positioned to the first record if there are any
records. If there are no records, the <b>RecordCount</b> property
setting is 0, and the <b>BOF</b> and <b>EOF</b> property settings
are <b>True</b>.</p>

You can use the <b>MoveNext</b>, <b>MovePrevious</b>,
<b>MoveFirst</b>, and <b>MoveLast</b> methods to reposition the
current record. For dynaset- and snapshot-type <b>Recordset</b>
objects, you can also use the Find methods, such as <b>FindFirst</b>,
to locate a specific record based on criteria. If the record
isn't found, the <b>NoMatch</b> property is set to <b>True</b>.
For table-type <b>Recordset</b> objects, you can scan records
using the <b>Seek</b> function.</p>

To cycle through all records, you can use the <b>BOF</b>
and <b>EOF</b> properties to check for the beginning or end of
the <b>Recordset</b> object. However, it may run faster to with
an SQL query that performs operations that apply to an entire set
of records.</p>

Properties</p>

<b>AbsolutePosition</b> Property; <b>BOF</b>,<b> EOF</b>
Properties; <b>Bookmark</b> Property; <b>Bookmarkable</b>
Property; <b>CacheSize</b>, <b>CacheStart</b> Properties; <b>DateCreated</b>,
<b>LastUpdated</b> Properties; <b>EditMode</b> Property; <b>Filter</b>
Property; <b>Index</b> Property; <b>LastModified</b> Property; <b>LockEdits</b>
Property; <b>Name</b> Property; <b>NoMatch</b> Property; <b>PercentPosition</b>
Property; <b>RecordCount</b> Property; <b>Restartable</b>
Property; <b>Sort</b> Property; <b>Transactions</b> Property; <b>Type</b>
Property; <b>Updatable</b> Property; <b>ValidationRule</b>
Property; <b>ValidationText</b> Property.</p>

Methods</p>

<b>AddNew </b>Method;<b> CancelUpdate </b>Method;<b>
Clone </b>Method;<b> Close </b>Method;<b> CopyQueryDef </b>Method;<b>
Delete </b>Method;<b> Edit </b>Method;<b> FillCache </b>Method;<b>
FindFirst</b>,<b> FindLast</b>,<b> FindNext</b>,<b> FindPrevious </b>Methods;<b>
GetRows </b>Method;<b> Move </b>Method;<b> MoveFirst</b>,<b>
MoveLast</b>,<b> MoveNext</b>,<b> MovePrevious </b>Methods;<b>
OpenRecordset </b>Method;<b> Requery </b>Method;<b> Seek </b>Method;<b>
Update </b>Method.</p>

See Also</p>

Dynaset-Type <b>Recordset </b>Object;<b> Index </b>Object;<b>
OpenRecordset </b>Method;<b> </b>Snapshot-Type <b>Recordset </b>Object;<b>
</b>Table-Type<b> Recordset </b>Object; Appendix, &quot;Data
Access Object Hierarchy.&quot;</p>

Example</p>

This example creates a new <b>Recordset</b> object
and opens it (thereby appending it to the <b>Recordsets</b>
collection) in the default database. Then the example enumerates
all the <b>Recordset</b> objects in the current database and all
the fields in each <b>Recordset</b> object and closes the new <b>Recordset</b>.</p>

<br>
</p>

<pre>Function EnumerateRecordset () As Integer
    Dim dbsExample As Database, rstOrders As Recordset
    Dim rstTemp As Recordset
    Dim I As Integer, J As Integer
    Set dbsExample = _ 
        DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;) 
    Set rstOrders = dbsExample.OpenRecordset(&quot;Orders&quot;, dbOpenSnapshot)
    Debug.Print
    ' Enumerate all Recordset objects. 
    For J = 0 To dbsExample.Recordsets.Count - 1
        Set rstTemp = dbsExample.Recordsets(J)
        Debug.Print
        Debug.Print &quot;Enumeration of Recordset objects(&quot;; J; &quot;): &quot;; _ 
            rstTemp.Name
        Debug.Print
        ' Enumerate fields.
        Debug.Print &quot;Fields: Name, Type, Value&quot;
        For I = 0 To rstTemp.Fields.Count - 1
            Debug.Print &quot;  &quot;; rstTemp.Fields(I).Name;
            Debug.Print &quot;, &quot;; rstTemp.Fields(I).Type;
            If rstTemp.Fields(I).Type = dbText Then 
                Debug.Print &quot;, &quot;; rstTemp.Fields(I).Value
            End if
        Next I
    Next J
    dbsExample.Close
    EnumerateRecordset = True
End Function
</pre>

Example (Microsoft Access)</p>

The following example opens a table-type <b>Recordset</b>
object, a dynaset-type <b>Recordset</b> object, and a
snapshot-type <b>Recordset</b> object. Then it displays the value
of the <b>Updatable</b> property for the <b>Recordset</b>
objects.</p>

<br>
</p>

<pre>Sub NewRecordsets()
    Dim dbs As database, rst As Recordset
    Dim rstEmployees As Recordset, rstOrders As Recordset
    Dim rstProducts As Recordset, strSQL As String

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rstEmployees = dbs.OpenRecordset(&quot;Employees&quot;, dbOpenTable)
    ' Construct SQL string.
    strSQL = &quot;SELECT * FROM Orders WHERE OrderDate &gt;= #1-1-95#;&quot;
    ' Create dynaset-type Recordset object.
    Set rstOrders = dbs.OpenRecordset(strSQL, dbOpenDynaset)
    ' Create snapshot-type Recordset object.
    Set rstProducts = dbs.OpenRecordset(&quot;Products&quot;, dbOpenSnapshot)
    ' Print value of Updatable property for each Recordset object.
    For Each rst In dbs.Recordsets
        Debug.Print rst.Name; &quot;   &quot;; rst.Updatable
    Next rst
End Sub

</pre>
</BODY>

</html>

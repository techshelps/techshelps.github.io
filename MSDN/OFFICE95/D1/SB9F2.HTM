<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Relation Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>Relation Object</h2>

Description</p>

A <b>Relation</b> object represents a relationship
between fields in tables or queries.</p>

Remarks</p>

You can use the <b>Relation</b> object to create new
relationships and examine existing relationships in your
database. By setting the <b>Attributes</b> property, you can also
use the Microsoft Jet database engine to enforce referential
integrity.</p>

Any changes you make to the database that violate
the relationships established for the database result in a
trappable error. If you request cascade update or cascade delete
operations, the Jet database engine also modifies the primary or
foreign key tables to enforce the relationships you establish.</p>

An example of a typical relationship can be found
between the NameAddress table and the ValidStateCodes table. The
State field of the NameAddress table is the primary key, and the
State field of the ValidStateCodes table is the foreign key. For
a new record to be accepted in the NameAddress table, the Jet
database engine searches the ValidStateCodes table for a match on
the State field of the NameAddress table. If no match is found,
the Jet database engine doesn't accept the new record, and a
trappable error occurs.</p>

Using a <b>Relation</b> object and its properties,
you can:</p>
<SPAN CLASS="list">
<ul>
    <li>Specify an enforced relationship between fields in base
        tables (but not a relationship that involves a query or
        an attached table).</li>
    <li>Establish unenforced relationships between any type of
        table or query&#151; native or attached.</li>
    <li>Use the <b>Name</b> property to refer to the relationship
        between the fields in the referenced primary table and
        the referencing foreign table.</li>
    <li>Use the <b>Attributes</b> property to determine whether
        the relationship between fields in the table is
        one-to-one or one-to-many and how to enforce referential
        integrity.</li>
    <li>Use the <b>Attributes</b> property to determine whether
        the Jet database engine can perform cascade update and
        cascade delete operations on primary and foreign tables.</li>
    <li>Use the <b>Attributes</b> property to determine whether
        the relationship between fields in the table is left join
        or right join.</li>
</ul>
</SPAN><SPAN CLASS="list">
<ul>
    <li>The <b>Name</b> property settings of all <b>Field</b>
        objects in the <b>Fields</b> collection of a <b>Relation</b>
        object represent the names of the fields in the primary
        key of the referenced table. The <b>ForeignName</b>
        property settings of the <b>Field</b> objects represent
        the names of the fields in the foreign key of the
        referencing table.</li>
    <li>When you enforce referential integrity, a unique index
        must already exist for the key field of the referenced
        table. The Jet database engine automatically creates an
        index with the <b>Foreign</b> property set to act as the
        foreign key in the referencing table.</li>
</ul>
</SPAN>
To create a new <b>Relation</b> object, use the <b>CreateRelation</b>
method.</p>

Properties</p>

<b>Attributes</b> Property, <b>ForeignTable</b>
Property, <b>Name</b> Property, <b>Table</b> Property.</p>

Methods</p>

<b>CreateField </b>Method.</p>

See Also</p>

<b>CreateRelation </b>Method;<b> Foreign </b>Property;
Appendix, &quot;Data Access Object Hierarchy.&quot;</p>

Example</p>

This example creates a one-to-many relationship
between single fields in two tables. Because referential
integrity is enforced for the relationship, an index is created
for the primary table.</p>

<br>
</p>

<pre>Function EnumerateRelation () As Integer
    Dim dbsExample As Database
    Dim tdfReferenced As TableDef, tdfReferencing As TableDef
    Dim fldPrimeKey As Field, idxUnique As Index, relEnforced As _ 
        Relation
    Dim I As Integer
    ' Get database.
    Set dbsExample = _ 
        DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
    ' Create referenced table with primary key.
    Set tdfReferenced = dbsExample.CreateTableDef(&quot;Referenced&quot;)
    Set fldPrimeKey = tdfReferenced.CreateField(&quot;PrimaryKey&quot;, dbLong)  
    tdfReferenced.Fields.Append fldPrimeKey
    ' Create unique index for enforced referential integrity.
    Set idxUnique = tdfReferenced.CreateIndex(&quot;UniqueIndex&quot;) 
    idxUnique.Primary = True ' No Null values allowed.

    Set fldPrimeKey = tdfReferenced.CreateField(&quot;PrimaryKey&quot;) 
    idxUnique.Fields.Append fldPrimeKey
    tdfReferenced.Indexes.Append idxUnique
    dbsExample.TableDefs.Append tdfReferenced</pre>

<br>
</p>

<pre>    ' Create referencing table with foreign key.
    Set tdfReferencing = dbsExample.CreateTableDef(&quot;Referencing&quot;) 
    Set fldPrimeKey = tdfReferencing.CreateField(&quot;ForeignKey&quot;, dbLong) 
    tdfReferencing.Fields.Append fldPrimeKey
    dbsExample.TableDefs.Append tdfReferencing
    ' Create one-to-many relationship and enforce referential integrity.
    Set relEnforced = dbsExample.CreateRelation(&quot;EnforcedOneToMany&quot;) 
    relEnforced.Table = &quot;Referenced&quot;
    relEnforced.ForeignTable = &quot;Referencing&quot;
    ' Don't set either dbRelationUnique or dbRelationDontEnforce.
    relEnforced.Attributes = 0
    Set fldPrimeKey = relEnforced.CreateField(&quot;PrimaryKey&quot;)
    fldPrimeKey.ForeignName = &quot;ForeignKey&quot;
    relEnforced.Fields.Append fldPrimeKey
    dbsExample.Relations.Append relEnforced
    ' Enumerate relation and its fields.
    Debug.Print &quot;Relation: &quot;; relEnforced.Name
    Debug.Print &quot;  Primary Table: &quot;; relEnforced.Table
    Debug.Print &quot;  Foreign Table: &quot;; relEnforced.ForeignTable
    Debug.Print &quot;  Attributes: &quot;; relEnforced.Attributes
    Debug.Print &quot;Fields in Relation: Primary, Foreign&quot;;
    For I = 0 To relEnforced.Fields.Count - 1
        Set fldPrimeKey = relEnforced.Fields(I)
        Debug.Print &quot;  &quot;; fldPrimeKey.Name;
        Debug.Print &quot;, &quot;; fldPrimeKey.ForeignName
    Next I
    Debug.Print
    dbsExample.Relations.Delete &quot;EnforcedOneToMany&quot;
    dbsExample.TableDefs.Delete &quot;Referenced&quot;
    dbsExample.TableDefs.Delete &quot;Referencing&quot;
    EnumerateRelation = True
End Function
</pre>

Example (Microsoft Access)</p>

The following example creates a new <b>Relation</b>
object representing the relationship between an Employees table
and an Orders table.</p>

To test the following example in Microsoft Access,
open the Northwind sample database and choose Relationships from
the Tools menu. Delete the relationship between the Employees
table and the Orders table, and close the Relationships window.
Then, run the following function from a standard module, and view
the Relationships window again to see the new relationship.</p>

<br>
</p>

<pre>Sub NewRelation()
    Dim dbs As Database
    Dim fld As Field, rel As Relation
    
    ' Return Database variable that points to current database.
    Set dbs = CurrentDb</pre>

<br>
</p>

<pre>    ' Create new relationship and set its properties.
    Set rel = dbs.CreateRelation(&quot;EmployeesRelation&quot;, &quot;Employees&quot;, _ 
        &quot;Orders&quot;)
    ' Set Relation object attributes to enforce referential integrity.
    rel.Attributes = dbRelationDeleteCascade + dbRelationUpdateCascade
    ' Create field in Fields collection of Relation.
    Set fld = rel.CreateField(&quot;EmployeeID&quot;)
    ' Provide name of foreign key field.
    fld.ForeignName = &quot;EmployeeID&quot;
    ' Append field to Relation and Relation to database.
    rel.Fields.Append fld
    dbs.Relations.Append rel
End Sub
</pre>
</BODY>

</html>

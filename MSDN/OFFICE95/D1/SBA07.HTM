<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TableDef Object</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<H2>TableDef Object</h2>

Description</p>

A <b>TableDef</b> object represents the stored
definition of a base table or an attached table.</p>

Remarks</p>

You manipulate a table definition using a <b>TableDef</b>
object and its methods and properties. For example, you can:</p>
<SPAN CLASS="list">
<ul>
    <li>Examine the field and index structure of any local,
        attached, or external table in a database.</li>
    <li>Read or write the <b>Connect</b> and <b>SourceTableName</b>
        property settings for attached tables, and use the <b>RefreshLink</b>
        method to update connections to attached tables.</li>
    <li>Read (or write, if the <b>Updatable</b> property is set
        to <b>True</b> (-1)) the <b>ValidationRule</b> and <b>ValidationText</b>
        property settings to find (or specify) validation
        conditions.</li>
    <li>Use the <b>OpenRecordset</b> method to create a table-,
        dynaset-, or snapshot-type <b>Recordset</b> object, based
        on the table definition.</li>
</ul>
</SPAN>
The default collection of a <b>Database</b> object
is the <b>TableDefs</b> collection, and the default collection of
a <b>TableDef</b> object is the <b>Fields</b> collection. You can
simplify your code by using these defaults. For example, the
following statements are identical in that they both print the
number corresponding to the field data type of a <b>Field</b>
object in a <b>TableDef</b> object:</p>

<br>
</p>

<pre>Debug.Print dbsCurrent.TableDefs(&quot;Publishers&quot;).Fields(&quot;PubID&quot;).Type
Debug.Print dbsCurrent(&quot;Publishers&quot;)(&quot;PubID&quot;).Type
</pre>

The <b>Name</b> property of a <b>TableDef</b> object
isn't necessarily the same as the name of an object variable to
which it's assigned.</p>

For base tables, the <b>RecordCount</b> property
contains the number of records in the specified database table.
For attached tables, the <b>RecordCount</b> property setting is
always -1.</p>

You refer to a <b>TableDef</b> object that you
create and append to a <b>TableDefs</b> collection by its <b>Name</b>
property setting using this syntax:</p>

<b>TableDefs(</b>&quot;<i>name</i>&quot;<b>)</b></p>

To create a new <b>TableDef</b> object, use the <b>CreateTableDef</b>
method.</p>

You can delete a <b>Field</b> object from a <b>TableDefs</b>
collection if it doesn't have any indexes assigned to it, but its
underlying data is lost.</p>

Properties</p>

<b>Attributes</b> Property; <b>ConflictTable</b>
Property; <b>Connect</b> Property; <b>DateCreated</b>, <b>LastUpdated</b>
Properties; <b>KeepLocal</b> Property; <b>Name</b> Property; <b>RecordCount</b>
Property; <b>Replicable</b> Property; <b>SourceTableName</b>
Property; <b>Updatable</b> Property; <b>ValidationRule</b>
Property; <b>ValidationText</b> Property.</p>

Methods</p>

<b>CreateField </b>Method,<b> CreateIndex </b>Method,<b>
CreateProperty </b>Method,<b> OpenRecordset </b>Method,<b>
RefreshLink </b>Method.</p>

See Also</p>

<b>CreateTableDef </b>Method; Appendix, &quot;Data
Access Object Hierarchy.&quot;</p>

Specifics (Microsoft Access)</p>

In addition to the properties defined by the
Microsoft Jet database engine, a <b>TableDef</b> object may also
contain the following Microsoft Access application-defined
properties.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <TD valign="top"><b>DatasheetFontHeight</b></td>
        <TD valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontItalic</b></td>
        <TD valign="top"><b>FrozenColumns</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontName</b></td>
        <TD valign="top"><b>RowHeight</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontUnderline</b></td>
        <TD valign="top"><b>ShowGrid</b></td>
    </tr>
    <tr>
        <TD valign="top"><b>DatasheetFontWeight</b></td>
        <TD valign="top">&nbsp;</td>
    </tr>
</TBODY></table>

<br>
</p>

Example</p>

This example creates a new <b>TableDef</b> object,
adds a <b>Field</b> object to it, and appends the <b>TableDef</b>
to the <b>TableDefs</b> collection in the current database. Then
the example enumerates all the <b>TableDef</b> objects in the
current database and all the properties of the new <b>TableDef</b>.</p>

<br>
</p>

<pre>Function EnumerateTableDef () As Integer
    Dim dbsExample As Database
    Dim tdfEnum As TableDef
    Dim fldDate As Field
    Dim I As Integer
    Set dbsExample = _ 
        DBEngine.Workspaces(0).OpenDatabase(&quot;Northwind.mdb&quot;)
    Set tdfEnum = dbsExample.CreateTableDef(&quot;MyTable&quot;) 
    Set fldDate = tdfEnum.CreateField(&quot;Date&quot;, dbDate)
    tdfEnum.Fields.Append fldDate
    dbsExample.TableDefs.Append tdfEnum
    ' Get database name.
    Debug.Print &quot;Database Name: &quot;; dbsExample.Name

    ' Enumerate all fields in tdfEnum.
    Debug.Print &quot;TableDef: Name; Field: Name&quot;
    For I = 0 To tdfEnum.Fields.Count - 1
        Debug.Print &quot;  &quot;; tdfEnum.Name;
        Debug.Print &quot;; &quot;; tdfEnum.Fields(I).Name
    Next I
    Debug.Print
    ' Enumerate all indexes in tdfEnum.
    Debug.Print &quot;TableDef: Name; Index: Name&quot;
    For I = 0 To tdfEnum.Indexes.Count - 1
        Debug.Print &quot;  &quot;; tdfEnum.Name;
        Debug.Print &quot;; &quot;; tdfEnum.Indexes(I).Name
    Next I
    Debug.Print
    ' Enumerate built-in properties of tdfEnum.
    Debug.Print &quot;tdfEnum.Name: &quot;; tdfEnum.Name
    Debug.Print &quot;tdfEnum.Attributes: &quot;; tdfEnum.Attributes
    Debug.Print &quot;tdfEnum.Connect: &quot;; tdfEnum.Connect
    Debug.Print &quot;tdfEnum.DateCreated: &quot;; tdfEnum.DateCreated
    Debug.Print &quot;tdfEnum.LastUpdated: &quot;; tdfEnum.LastUpdated
    Debug.Print &quot;tdfEnum.RecordCount: &quot;; tdfEnum.RecordCount
    Debug.Print &quot;tdfEnum.SourceTableName: &quot;; tdfEnum.SourceTableName
    Debug.Print &quot;tdfEnum.Updatable: &quot;; tdfEnum.Updatable
    Debug.Print &quot;tdfEnum.ValidationRule: &quot;; tdfEnum.ValidationRule
    Debug.Print &quot;tdfEnum.ValidationText: &quot;; tdfEnum.ValidationText
    EnumerateTableDef = True
End Function</pre>

Example (Microsoft Access)</p>

The following example creates a new <b>TableDef</b>
object, defines a field within it, and appends it to the <b>TableDefs</b>
collection of the current database.</p>

<br>
</p>

<pre>Sub NewTable()
    Dim dbs As Database, tdf As TableDef, fld As Field

    ' Return Database object pointing to current database.
    Set dbs = CurrentDb
    Set tdf = dbs.CreateTableDef(&quot;Contacts&quot;)
    Set fld = tdf.CreateField(&quot;ContactName&quot;, dbText, 30)
    tdf.Fields.Append fld
    dbs.TableDefs.Append tdf
End Sub
</pre>
</BODY>

</html>

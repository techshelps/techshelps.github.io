<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BeginTrans, CommitTrans, Rollback Methods</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>>


	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>BeginTrans, CommitTrans, Rollback Methods</H2>Applies To</P>
<B>Workspace </B>Object.</P>
Description</P>
The transaction methods manage transaction processing during a session defined by a <B>Workspace</B> object as follows:</P>
<SPAN CLASS="list"><UL><B>BeginTrans</B> begins a new transaction.</LI><B>CommitTrans</B> ends the current transaction and saves the changes.</LI><B>Rollback</B> ends the current transaction and restores the databases in the <B>Workspace</B> object to the state they were in when the current transaction began.</LI></UL></SPAN><P></P>
Syntax</P>
<I>workspace</I>.<B>BeginTrans</B> | <B>CommitTrans</B> | <B>Rollback</B></P>
<P></P>
The transaction methods have this part.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Part</P></TD><TD VALIGN="TOP">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><I>workspace</I></P></TD><TD VALIGN="TOP">A variable of an object data type identifying the <B>Workspace</B>.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
Remarks</P>
You use these methods with a <B>Workspace</B> object when you want to treat a series of changes made to the databases in a session as one unit.</P>
Typically, you use transactions to maintain the integrity of your data when you must update records in two or more tables and make sure changes made are completed (committed) in all tables or none at all (rolled back). For example, if you transfer money from one account to another, you might subtract an amount from one and add the amount to another. If either update fails, the accounts no longer balance. Use the <B>BeginTrans</B> method before updating the first record, and then, if any subsequent update fails, you can use the <B>Rollback</B> method to undo all of the updates. Use the <B>CommitTrans</B> method after you successfully update the last record.</P>
<P></P>
Caution</P>
Within one <B>Workspace</B> object, transactions are always global to the <B>Workspace</B> and aren't limited to only one database or recordset. If you perform operations on more than one database or recordset within a <B>Workspace</B> transaction, the <B>Rollback</B> method restores all operations on those databases and recordsets.</P>
<P></P>
After you use <B>CommitTrans</B>, you can't undo changes made during that transaction unless the transaction is nested within another transaction that is itself rolled back. You can have up to five levels of transactions open at once in a single <B>Workspace</B> object by using multiple, nested combinations of <B>BeginTrans</B> and <B>CommitTrans</B> or <B>Rollback</B>. If you nest transactions, you must save or roll back the current transaction before you can save or roll back a transaction at a higher level of nesting. If you want to have simultaneous transactions with overlapping, non-nested scopes, you can create additional <B>Workspace</B> objects to contain the concurrent transactions.</P>
If you close a <B>Workspace</B> object without saving or rolling back any pending transactions, the transactions are automatically rolled back.</P>
If you use the <B>CommitTrans</B> or <B>Rollback</B> methods without first using the <B>BeginTrans</B> method, an error occurs.</P>
<P></P>
Some databases may not support transactions, in which case the<B> Transactions</B> property of the <B>Database</B> object or <B>Recordset</B> object is <B>False</B>. To make sure that the database supports transactions, check the value of the <B>Transactions</B> property of the <B>Database</B> object before using the <B>BeginTrans</B> method. If you are using a <B>Recordset</B> object based on more than one database, check the <B>Transactions</B> property of the <B>Recordset</B> object. If a recordset is based entirely on Microsoft Jet database engine tables, you can always use transactions. Dynaset-type <B>Recordset </B>objects based on tables created by other database products, however, may not support transactions. For example, you can't use transactions in a <B>Recordset</B> based on a Paradox table. In this case, the <B>Transactions</B> property is <B>False</B>. If the <B>Database </B>or <B>Recordset</B> doesn't support transactions, the methods are ignored and no error occurs.</P>
When using external ODBC SQL databases, you can't nest transactions.</P>
<P></P>
Tip</P>
In addition to performing transactions to maintain data integrity, you can often improve the performance of your application by breaking operations that require disk access on your database into transaction blocks. This ensures buffering of your operations and may greatly reduce the number of times a disk is accessed.</P>
<P></P>
<P></P>
Note</P>
When you begin a transaction, the Jet database engine records its operations in a file kept in the directory specified by the TEMP environment variable on the workstation. If the transaction log file exhausts the available storage on your TEMP drive, the Jet database engine triggers a trappable error (2004). At this point, if you use <B>CommitTrans</B>, an indeterminate number of operations are committed but the remaining uncompleted operations are lost, and the operation has to be restarted. Using a <B>Rollback</B> method releases the transaction log and rolls back all operations in the transaction.</P>
<P></P>
See Also</P>
<B>Close </B>Method,<B> CreateWorkspace </B>Method,<B> Refresh </B>Method,<B> Transactions </B>Property.</P>
Example</P>
This example changes the job title of all sales representatives in the Employees table of the database. After the <B>BeginTrans</B> method starts a transaction that isolates all the changes made to the Employees table, the <B>CommitTrans</B> method saves the changes. Notice that you can use the <B>Rollback</B> method to undo changes that you saved using the <B>Update</B> method. </P>
One or more table pages remain locked while the user decides whether or not to accept the changes. For this reason, this technique isn't recommended but shown only as an example. </P>
<BR></P>
<PRE>Sub ChangeTitle
    Dim strName As String, strMessage As String, strPrompt As String
    Dim wspDefault As Workspace, dbsNorthwind As Database
    Dim rstEmployees As Recordset</PRE>
<P></P>
<BR></P>
<PRE>    strPrompt = "Change title to Account Executive?"
    Set wspDefault = DBEngine.Workspaces(0)   ' Get default Workspace.
    ' Get current database.
    Set dbsNorthwind = wspDefault.OpenDatabase("Northwind.mdb")
    ' Open table.
    Set rstEmployees = dbsNorthwind.OpenRecordset("Employees", _ <BR>        dbOpenTable)
    wspDefault.BeginTrans        ' Start of transaction.
    rstEmployees.MoveFirst
    Do Until rstEmployees.EOF
        If rstEmployees![Title] = "Sales Representative" Then
            strName = rstEmployees![LastName] &amp; ", " &amp; _
                rstEmployees![FirstName]
            strMessage = "Employee: " &amp; strName &amp; vbCrLf &amp; vbCrLf
            If MsgBox(strMessage &amp; Prompt, vbQuestion + vbYesNo, _
                    "Change Job Title") = YES Then
                rstEmployees.Edit    ' Enable editing.
                rstEmployees![Title] = "Account Executive"   
                rstEmployees.Update    ' Save changes.
            End If
        End If
        rstEmployees.MoveNext        ' Move to next record.
    Loop
    If MsgBox("Save all changes?", vbQuestion + vbYesNo, _
        " Save Changes") = YES Then
        wspDefault.CommitTrans    ' Commit changes.
    Else
        wspDefault.Rollback        ' Undo changes.
    End If
    rstEmployees.Close    ' Close table.
    dbsNorthwind.Close
End Sub 
</PRE>
Example (Microsoft Access)</P>
The following example changes the job title of all sales representatives in an Employees table. After the <B>BeginTrans</B> method starts a transaction that isolates all the changes made to the Employees table, the <B>CommitTrans</B> method saves the changes. Notice that you can use the <B>Rollback</B> method to undo changes that you saved using the <B>Update</B> method.</P>
One or more table pages remain locked while the user decides whether or not to accept the changes. Consequently, this technique isn't recommended but only shown as an example.</P>
<BR></P>
<PRE>Sub ChangeTitle()
    Dim wsp As Workspace, dbs As Database, rst As Recordset
    Dim strName As String, strMessage As String, strPrompt As String

    strPrompt = "Change title to Account Executive?"
    ' Get default Workspace.
    Set wsp = DBEngine.Workspaces(0)</PRE>
<P></P>
<BR></P>
<PRE>    ' Get current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees", dbOpenTable)
    ' Start of transaction.
    wsp.BeginTrans
    rst.MoveFirst
    Do Until rst.EOF
        If rst![Title] = "Sales Representative" Then
            strName = rst![LastName] &amp; ", " &amp; rst![FirstName]
            strMessage = "Employee: " &amp; strName &amp; vbCrLf &amp; vbCrLf
            If MsgBox(strMessage &amp; strPrompt, vbQuestion + vbYesNo, _
                "Change Job Title") = vbYes Then
                ' Enable editing.
                rst.Edit
                rst![Title] = "Account Executive"
                ' Save changes.
                rst.Update
            End If
        End If
        ' Move to next record.
        rst.MoveNext
    Loop
    If MsgBox("Save all changes?", vbQuestion + vbYesNo, _
        "Save Changes") = vbYes Then
        wsp.CommitTrans            ' Commit changes.
    Else
        wsp.Rollback                ' Undo changes.
    End If
End Sub
</PRE>
</P></BODY>
</HTML>

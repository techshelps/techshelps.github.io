<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The wdCommandDispatch Function</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">The wdCommandDispatch Function</H2><P CLASS="t">An add-in library function accesses Word by calling the <B>wdCommandDispatch</B> function. This is the only function in Word that your add-ins will call. The <B>wdCommandDispatch</B> function lets you call virtually all WordBasic statements and functions. It passes the same arguments as those described for WordBasic statements and functions in Part 2, "WordBasic Reference."</P>
<P CLASS="t">Here is the syntax for the <B>wdCommandDispatch</B> function:</P>
<P CLASS="spacing"><BR></P>
<PRE>// Windows
short FAR PASCAL wdCommandDispatch( short CommandID, short DlgOptions,
    short cArgs, LPWDOPR lpwdoprArgs, LPWDOPR lpwdoprReturn );

// Macintosh
pascal short (*wdCommandDispatch) ( short CommandID, short DlgOptions,
    short cArgs, LPWDOPR lpwdoprArgs, LPWDOPR lpwdoprReturn );</PRE>
<P CLASS="t">For platform-specific details about declaring <B>wdCommandDispatch</B> in your WLL code, see "Platform-Specific Notes About wdCommandDispatch" later in this section.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Step by Step Through the Parameters</H3><P CLASS="t">Understanding each of the parameters of the <B>wdCommandDispatch</B> function is important. The following paragraphs detail the purpose and use of each parameter.</P>
<H4 CLASS="h4"><A NAME="sec1"></A>CommandID</H4><P CLASS="t">This is the WordBasic command Word is to execute. The names of available functions are provided as constants in the header file WDCMDS.H. Most of these command names closely parallel their WordBasic equivalents. </P>
<H4 CLASS="h4"><A NAME="sec2"></A>DlgOptions</H4><P CLASS="t">This is the "dialog options" parameter, and is only necessary for WordBasic commands that correspond to Word dialog boxes. This parameter is ignored if<BR>the command doesn't involve a dialog box. The following constants for this parameter are defined in WDCAPI.H.</P>
<H5 CLASS="h6"><A NAME="sec3"></A>CommandDefaults</H5><P CLASS="h">Returns default values for the dialog box's fields, without actually activating the dialog box. This is similar to the <B>GetCurValues</B> statement in WordBasic.</P>
<H5 CLASS="h6"><A NAME="sec4"></A>CommandDialog</H5><P CLASS="h">Activates the dialog box. This is similar to the <B>Dialog</B> statement in WordBasic. If the function is set to return values from Word, the field settings are just returned to the calling code, and no implied action takes place.</P>
<H5 CLASS="h6"><A NAME="sec5"></A>CommandAction</H5><P CLASS="h">Causes the action indicated by the dialog box to actually take place. When combined with CommandDialog, the dialog box will first be displayed, letting the user make any desired changes to the fields, and then the dialog box's action will take place.</P>
<P></P>
<H4 CLASS="h4"><A NAME="sec6"></A>cArgs</H4><P CLASS="t">This is the number of Word arguments being passed. (Arguments for Word commands are wrapped in a data structure called a WDOPR.) The next parameter, lpwdoprArgs, points to an array of WDOPR arguments; cArgs simply provides the count for this array.</P>
<H4 CLASS="h4"><A NAME="sec7"></A>lpwdoprArgs </H4><P CLASS="t">This is a pointer to an array of WDOPR arguments passed to the function dispatcher; in other words, these are the actual arguments for the Word command. Building up this array of arguments is an important part of preparing to call <B>wdCommandDispatch</B>. The next section explains this parameter in greater detail.</P>
<P></P>
<H4 CLASS="h4"><A NAME="sec8"></A>lpwdoprReturn</H4><P CLASS="t">This parameter points to a single WDOPR data structure that returns one data item from a WordBasic function. The returned data item can be any of the supported WDOPR data types. When using <B>wdCommandDispatch</B> to execute WordBasic statements that correspond to dialog boxes, you should set this parameter to lpwdoprNil. If you are calling a WordBasic statement that can also be called as a function — for example, <B>Bold</B> and <B>Bold</B><B>()</B> — this parameter must correspond to how you want to use the statement: as a statement or as a function.</P>
<H3 CLASS="h3"><A NAME="sec9"></A>Platform-Specific Notes About wdCommandDispatch</H3><P CLASS="t">The following topics address specific issues about accessing <B>wdCommandDispatch </B>and the Word API on the Windows 3.<I>x</I>, Windows 95, Windows NT, and Macintosh platforms.</P>
<H4 CLASS="h4"><A NAME="sec10"></A>Windows 3.<I>x</I></H4><P CLASS="t">In Windows 3.<I>x</I>, a WLL imports <B>wdCommandDispatch</B> directly from Word version 6.0 for Windows. By declaring the function as described earlier in this section and including the function in the IMPORTS section of the .DEF file for you WLL, your add-in library will work correctly in Windows 3.<I>x</I>.</P>
<H4 CLASS="h4"><A NAME="sec11"></A>Windows 95 and Windows NT</H4><P CLASS="t">In Windows 95 and Windows NT, importing functions directly from applications (as Windows 3.<I>x </I>allows) is discouraged. To use <B>wdCommandDispatch</B> successfully in Windows 95 and Windows NT, your WLL should declare the following function:</P>
<P CLASS="spacing"><BR></P>
<PRE>static unsigned int (*pfn_wdCommandDispatch) () = NULL;
{
    if (pfn_wdCommandDispatch == NULL)
        pfn_wdCommandDispatch = GetProcAddress(GetModuleHandle(NULL), 
        "wdCommandDispatch");
    return ((*pfn_wdCommandDispatch)
        (CommandID, DlgOptions, cArgs, lpwdoprArgs, lpwdoprRetrun));
}
</PRE>
<P CLASS="t">After declaring this function, the WLL should behave the same as one created for Windows 3.<I>x</I>. However, bear the following details in mind when programming 32-bit WLLs or migrating 16-bit WLLs to 32-bit WLLs:</P>
<UL><LI>    Any code that assumes an int or stack is 16 bits will cause problems in Windows 95 or Windows NT. This is especially important when calling functions in which you are expecting a variable number of parameters; the mechanism to get the parameters cannot assume a 16-bit stack.</LI><LI>    For Windows NT on x86 platforms, make sure that you use standard calling conventions (__stdcall) for all the functions you export to or import from Word. For Windows NT on a MIPS&reg; or Alpha AXP&trade; platform, use the C calling convention (__cdecl). One way to handle this is to not use any calling convention prefix at all and control stdcall or cdecl from the .MAK file by using the appropriate switch (for example, in Microsoft Visual C++, -Gz on x86 platforms and default on MIPS or Alpha AXP).</LI><LI>    Several 32-bit Windows API functions with default unicode support have a suffix: W or A. For ANSI, you need to pick the one with suffix A (for example, CallWindowProcA instead of CallWindowProcW).</LI></UL><P></P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>Passing Floating-Point Parameters on a RISC Platform</B></P>
<P CLASS="sbrt">If you are writing external DLLs or WLLs to run in Word version 6.0 for Windows NT or Word version 7.0 on a RISC platform, you should be aware of the following issue. Although some processor architectures define a special mechanism for supplying floating-point parameters to functions, WordBasic always passes parameters to external functions using the method for integers, pointers, and structures. Therefore, if your code includes functions with floating-point parameters that will be declared and called by WordBasic macros, you need to use a special technique for passing the parameters. </P>
<P CLASS="sbrt">To access floating-point parameters within a DLL or WLL, you must declare them as structures, and then copy them into a local variable for use within your routine. You can use the following structure and macro definition to accomplish this.</P>
<P CLASS="ct">struct WORDARGDBL</P>
<P CLASS="ct">{</P>
<P CLASS="ct">    char x[sizeof(double)];</P>
<P CLASS="ct">};</P>
<P CLASS="ct"></P>
<P CLASS="ct">#define DblArgValue(a)    (*(double*)&amp;(a))</P>
<P CLASS="ct"></P>
<P CLASS="sbrt">Here is an example of how you can use this structure and definition in a WLL function:</P>
<P CLASS="ct">double WINAPI AbsCapi (struct WORDARGDBL arg1)</P>
<P CLASS="ct">{</P>
<P CLASS="ct">    InitWCB (&amp;wcb, TypeDouble, NULL, 0);</P>
<P CLASS="ct">    AddDoubleParam (&amp;wcb, DblArgValue(arg1));</P>
<P CLASS="ct">    err = wdCommandDispatch (wdAbs, 0, wcb.cArgs, wcb.wdoprArgs, </P>
<P CLASS="ct">        &amp;wcb.wdoprReturn);</P>
<P CLASS="ct">    return wcb.wdoprReturn.Double;</P>
<P CLASS="ct">}</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<H4 CLASS="h4"><A NAME="sec12"></A>Macintosh</H4><P CLASS="t">A Macintosh code resource cannot import a function directly from an application. Therefore, the application must provide the resource with a pointer to the parameters for <B>wdCommandDispatch</B>. Every time Word calls the WLL, it passes a pointer to a WCDB structure. Here is the structure:</P>
<P CLASS="spacing"><BR></P>
<PRE>typedef struct _WCDB
{
    short            cac;
    char                fLock;
    char                fPurge;
    char                szFunction[66];
    pascal short        (*pfnWordCapi)();
    short            *prgParams;
    union
    {
        long        Short;
        long        Long;
        double        Double;
        uchar         *String;
    } retval;
} WCDB;
</PRE>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="276pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Element</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">cac</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">CAPI Call, the action to be taken by the main function. The defined actions are cacCallFunction, cacCallTimer, cacTerminate, cacWdAutoOpen, cacWdAutoRemove, and cacWindEvent.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">fLock</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Specifies whether the WLL should remain locked after being called.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">fPurge</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Specifies whether the WLL should be purged after being called.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">szFunction</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The function being called from WordBasic; cac is cacCallFunction. On the Macintosh, if the function being called does not exist in the WLL, the WLL should return CAPINoSuchFunction (5) to Word.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">pfnWordCapi</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A pointer to <B>wdCommandDispatch</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">prgParams</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A pointer to the parameter list passed to szFunction.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">retval (union)</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The return value of szFunction, if any, as one of the data types specified in the union.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">In the main function of the WLL, the dispatcher must be based on the value of the CAPI Call (cac) passed by Word. Apart from this behavior, a Macintosh WLL should work the same as a Windows WLL.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">On the Macintosh, WordBasic passes function names to a WLL in all uppercase. For simplicity and speed, a WLL should be written to perform a case-insensitive comparison to determine which function in the WLL is being called.</P>
<P></P>
<P CLASS="t">At the same time Word passes a pointer to the WCDB for a WLL to use, it passes a pointer to lUser, a long that holds global data for the WLL. Word initializes this value to 0 (zero); a WLL can modify the data at any time, and Word will return the current data in lUser each time it calls the WLL.</P></FONT></FONT></BODY></HTML>

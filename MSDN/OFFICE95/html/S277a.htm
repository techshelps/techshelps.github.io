<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Array Variables</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Array Variables</H2><P CLASS="t">An <I>array variable</I> gives a single name to a group of related values and organizes them in a list or table. Here are some of the advantages that using an array can provide over using regular variables:</P>
<UL><LI>    A group of related variables can be easier to work with when ordered within an array.</LI><LI>    A <B>For…Next</B> loop can be used with an array to assign values efficiently to many variables.</LI><LI>    By changing the size of an array, a macro can create variables as it runs, so you don't need to know in advance how many variables your macro may need. For example, if you want to create a variable for the name of each style in a document, you cannot know how many variables will be needed (different documents can store different numbers of styles). If you use an array, your macro can create the necessary number of variables to store the values each time it runs.</LI></UL><P></P>
<P CLASS="t">Arrays are not difficult to use or understand, but they're not usually used in simple macros. Unless your macro needs to handle a lot of values, you probably don't need to use an array. The most common use for arrays in WordBasic is to list items in a custom dialog box. For more information on using arrays in custom dialog boxes, see Chapter 5, "Working with Custom Dialog Boxes."</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Defining an Array</H3><P CLASS="t">Each variable within an array is called an <I>element</I> and shares a common name&nbsp;—&nbsp;the array name. Elements are distinguished from each other by a <I>subscript</I>, a unique number assigned to each element. Before you can assign values to the elements of an array, you must specify how many elements the array contains. To do so, you use the <B>Dim</B> statement. Here is the syntax:</P>
<P CLASS="syn"><B>Dim</B> <I>ArrayVariableName</I><B>(</B><I>LastElementNumber</I><B>)</B></P>
<P CLASS="t">The first element of a WordBasic array is always numbered 0 (zero). This can be confusing because it means that the subscript number of the last element is one less than the number of elements. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim Months$(11)                    'Define an array with 12 elements
</PRE>
<P CLASS="t">This instruction defines an array with 12 elements to hold the names of the months of the year. Because the first element is numbered 0 (zero), the twelfth element is numbered 11.</P>
<P CLASS="t">An array variable can be defined to hold either numbers or strings&nbsp;—&nbsp;a single array cannot hold <I>both</I>. The name of an array that contains string values must end with the dollar sign ($), just like a regular string variable.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Assigning Values to an Array</H3><P CLASS="t">After you have used the <B>Dim</B> statement to define an array, you can assign values to the elements within it. You can assign values to array elements just as you do to regular variables. Here is an example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim FourWinds$(3)                'Define an array with four elements
FourWinds$(0)&nbsp;=&nbsp;"East"
FourWinds$(1)&nbsp;=&nbsp;"West"
FourWinds$(2)&nbsp;=&nbsp;"North"
FourWinds$(3)&nbsp;=&nbsp;"South"
</PRE>
<P CLASS="t">Sometimes, it's useful to ignore an array's first element, numbered 0 (zero), so that you can assign your first value to the element whose subscript is 1, the second value to the element whose subscript is 2, and so on. The following example assigns string values to the array Weekdays$(7) so that the subscripts of elements 1&nbsp;through 7 correspond to a number returned by the <B>Weekday</B><B>()</B><B> </B>function:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim Weekdays$(7)                    'Define an array with eight elements
Weekdays$(0)&nbsp;=&nbsp;""                'Assign no value to first element
Weekdays$(1)&nbsp;=&nbsp;"Sunday"
Weekdays$(2)&nbsp;=&nbsp;"Monday"
Weekdays$(3)&nbsp;=&nbsp;"Tuesday"
Weekdays$(4)&nbsp;=&nbsp;"Wednesday"
Weekdays$(5)&nbsp;=&nbsp;"Thursday"
Weekdays$(6)&nbsp;=&nbsp;"Friday"
Weekdays$(7)&nbsp;=&nbsp;"Saturday"
MsgBox "Today is " + Weekdays$(WeekDay(Today()))
</PRE>
<P CLASS="t">You can use a <B>For…Next</B> loop to assign values to some arrays. The following example first defines an array that has as many elements as the number of available fonts, a value returned by the <B>CountFonts</B><B>()</B> function. Then a <B>For…Next</B> loop inserts the names of all the fonts into the array. Note that the array is dimensioned so that the number of the last element is CountFonts() - 1, since <B>CountFonts</B><B>()</B> starts its count at 1, whereas (as noted earlier) array subscript numbering starts at 0 (zero).</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim fontnames$(CountFonts() - 1)                'Define an array
For count&nbsp;=&nbsp;0 To (CountFonts() - 1)            'Repeat CountFont() times
    fontnames$(count)&nbsp;=&nbsp;Font$(count + 1)        'Assign font name Font$()
Next
</PRE>
<P CLASS="t">You could use the fontnames$() array to present the list of font names in a custom dialog box. For information on using arrays in this way, see Chapter 5, "Working with Custom Dialog Boxes."</P>
<H3 CLASS="h3"><A NAME="sec2"></A>Resizing an Array</H3><P CLASS="t">At times, it's useful for a macro to change the size of an array. For example, a macro that defines an array to hold all the fonts available on the current printer could later select another printer and reuse the original array to hold the new list of fonts. Because the second printer could have a different number of fonts available, the macro should resize the array before reusing it.</P>
<P CLASS="t">You use the <B>Redim</B> statement to resize an array. The syntax for <B>Redim</B> is exactly the same as for <B>Dim</B>:</P>
<P CLASS="syn"><B>Redim</B> <I>ArrayVariableName</I><B>(</B><I>LastElementNumber</I><B>)</B></P>
<P CLASS="t">Note that when you resize an array, you also clear its contents. If you try to use the <B>Dim</B> statement to resize an existing array, Word generates an error.</P>
<H3 CLASS="h3"><A NAME="sec3"></A>Arrays with More Than One Dimension</H3><P CLASS="t">The examples presented so far use arrays to order variables in a list. But you can also use arrays to order variables in a table. Suppose, for example, you wanted to create a variable for each day of the year. One way would be to define an array that lists 365 variables. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim Year(364)                'Define an array with 365 variables
</PRE>
<P CLASS="t">However, you could give more structure to these variables by placing them in a table. You could order them, for example, so that each row of a table represented a month and each column corresponded to a day:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim Year(11,30)                'Define an array with 12 rows and 31 columns
</PRE>
<P CLASS="t">This kind of array is called a <I>two-dimensional</I> array, while those presented earlier in the chapter are <I>one-dimensional </I>arrays. You can create arrays with three or more dimensions&nbsp;—&nbsp;as many as there is room for in memory&nbsp;—&nbsp;but in practice, arrays with more than two dimensions are rare.</P>
<P CLASS="t">You define an array with more than one dimension by listing the number of elements in each dimension in the standard <B>Dim </B>statement. Here is the syntax for a two-dimensional array:</P>
<P CLASS="syn"><B>Dim</B> <I>ArrayVariableName</I><B>(</B><I>LastElementNumber1</I>,<I> LastElementNumber2</I><B>)</B></P>
<P CLASS="t">In the following example of a two-dimensional array, both dimensions have five elements:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MailingList$(4,4)        'Define a 5-by-5 two-dimensional array
</PRE>
<P CLASS="t">Here is a visual representation of the 25 elements contained in the array.</P>
<P CLASS="a">    <img src="ATR0401.gif"></P>
<P CLASS="t">Each cell in the table represents an element in the array&nbsp;—&nbsp;a slot for a string, because Dim MailingList$(4,4) defines a string array variable. Each pair of numbers represents the subscript for an element of the array. For example, MailingList$(2,1) indicates the second element in the third row. You could use this array to store five names, each with its own street address, city, state or province, and postal code. The first column would list the names, the second column would list the street addresses, and so on.</P>
<P CLASS="t">The following example creates a two-dimensional array that contains a multiplication table up to, and including, the number 10, and inserts the table into&nbsp;the active document:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MultTable(10,10)
For N&nbsp;=&nbsp;1 to 10
    For M&nbsp;=&nbsp;1 to 10
        MultTable(N,M)&nbsp;=&nbsp;N * M
        Insert Str$(MultTable(N,M)) + Chr$(9)
    Next
    EditClear -1
    InsertPara
Next
</PRE>
<P CLASS="t">In the example, the inner loop multiplies N and M, assigns the value to the element MultTable(N,M), and then inserts the product and a tab character into the active document. At the end of each row, the macro deletes the last tab character in the row and inserts a paragraph mark to start a new row.</P>
<H3 CLASS="h3"><A NAME="sec4"></A>Sorting Arrays</H3><P CLASS="t">You can use the <B>SortArray</B> statement to sort arrays in alphabetical or numerical order. The following example assigns the available font names to the array fontnames$() and sorts the array:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim fontnames$(CountFonts() - 1)                'Define an array
For count&nbsp;=&nbsp;0 To (CountFonts() - 1)            'Repeat CountFont() times
    fontnames$(count)&nbsp;=&nbsp;Font$(count + 1)        'Assign font name Font$()
Next
SortArray fontnames$()                        'Sort font names
</PRE>
<P CLASS="t">For detailed information, see <B>SortArray</B> in Part 2, "WordBasic Reference."</P></FONT></FONT></BODY></HTML>

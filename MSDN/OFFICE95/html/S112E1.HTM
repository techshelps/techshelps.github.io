<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BeforeUpdate, AfterUpdate Events</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec84"></A>BeforeUpdate, AfterUpdate Events</H1><P CLASS="t">  </P>
<H2><A NAME="sec85"></A>Applies To</H2><P>Bound Object Frame Control, Check Box Control, Combo Box Control, List Box Control, Option Button Control, Option Group Control, Text Box Control, Toggle Button Control.</P>
<H2><A NAME="sec86"></A>Description</H2><P>These events occur:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    BeforeUpdate — before changed data in a control or record is updated.</LI><LI><SPAN CLASS="Symbol"></SPAN>    AfterUpdate — after changed data in a control or record is updated. </LI></UL></SPAN><P><A NAME="sec86PT2"></A>Notes</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Changing data in a control using a macro or Visual Basic doesn’t trigger these events for the control. However, if you then move to another record or save the record, the form’s BeforeUpdate and AfterUpdate events do occur.</LI><LI><SPAN CLASS="Symbol"></SPAN>    The BeforeUpdate and AfterUpdate events apply only to controls on a form, not controls on a report.</LI><LI><SPAN CLASS="Symbol"></SPAN>    These events don’t apply to option buttons, check boxes, or toggle buttons in an option group. They apply only to the option group itself.</LI></UL></SPAN><H2><A NAME="sec87"></A>Remarks</H2><P>The BeforeUpdate and AfterUpdate events are triggered when a control or record is updated. Within a record, changed data in each control is updated when the control loses the focus or when the user presses ENTER or TAB. When the focus leaves the record or if the user chooses the Save Record command from the File menu, the entire record is updated, and the data is saved in the database.</P>
<P>When you enter new or changed data in a control on a form and then move to another record or save the record by choosing Save Record from the File menu, the BeforeUpdate and AfterUpdate events for the form occur immediately after the BeforeUpdate and AfterUpdate events for the control. If you moved to a different record, the Exit and LostFocus events for the control then occur, followed by the Current event for the record you moved to, and the Enter and GotFocus events for the first control in this record. To run the BeforeUpdate and AfterUpdate macros or event procedures without running the Exit and LostFocus macros or event procedures, save the record using the Save Record command on the File menu.</P>
<P>BeforeUpdate and AfterUpdate macros and event procedures run only if you change the data in a control. These events don’t occur when a value changes in a calculated control. BeforeUpdate and AfterUpdate macros and event procedures for a form run only if you change the data in a record (the data in one or more controls in the record).</P>
<P>For forms, you can use the BeforeUpdate event to cancel updating of a record before moving to another record.</P>
<P>For bound controls, the <B>OldValue</B> property isn’t set to the updated value until after the AfterUpdate event occurs. Even if the user enters a new value in the control, the <B>OldValue</B> property setting isn’t changed until the data is saved. If you cancel an update, the value of the <B>OldValue</B> property replaces the existing value in the control.</P>
<P>You often use the BeforeUpdate event to validate data, especially when you perform complex validations, such as those that:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Involve conditions for more than one value on a form.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Display different error messages for different data entered.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Can be overridden by the user.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Contain references to controls on other forms or contain user-defined functions.</LI></UL></SPAN><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   To perform simple validations or more complex validations, such as requiring a value in a field or validating more than one control on a form, you can use the <B>ValidationRule</B> property for controls and the <B>ValidationRule</B> and <B>Required</B> properties for fields and records in tables.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec88"></A>See Also</H2><P>Enter, Exit Events.</P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Let Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec226"></A>Property Let Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec227"></A>Description</H2><P>Declares the name, arguments, and code that form the body of a <B>Property</B> <B>Let</B> procedure, which assigns a value to a property.</P>
<H2><A NAME="sec228"></A>Syntax</H2><P>[<B>Public</B> | <B>Private</B>][<B>Static</B>] <B>Property</B> <B>Let</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>]<BR>    [<I>statements</I>]<BR>    [<B>Exit Property</B>] <BR>    [<I>statements</I>]<BR><B>End Property</B></P>
<P>The <B>Property Let</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Public</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property</B> <B>Let</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement), the procedure is not available outside the project.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Private</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property</B> <B>Let </B>procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Static</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property Let</B> procedure’s local variables are preserved between calls. The <B>Static</B> attribute doesn’t affect variables that are declared outside the <B>Property Let</B> procedure, even if they are used in the procedure.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>name</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the <B>Property Let</B> procedure; follows standard variable naming conventions, except that the name can be the same as a <B>Property Get</B> or <B>Property Set</B> procedure in the same module.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>arglist</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">List of variables representing arguments that are passed to the <B>Property Let</B> procedure when it is called. Multiple arguments are separated by commas. The name and data type of each argument in a <B>Property Let</B> procedure (except the last one) must be the same as the corresponding arguments in a <B>Property Get</B> procedure. The last argument is the value assigned to the property on the right-hand side of an expression. The data type of the last (or sometimes the only) argument must be the same as the return type of the corresponding <B>Property Get</B> procedure.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>statements</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any group of statements to be executed within the body of the <B>Property Let</B> procedure.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>The <I>arglist</I> argument has the following syntax and parts:</P>
<P>[<B>ByVal</B> | <B>ByRef</B>] <I>varname</I>[<B>( )</B>][<B>As</B> <I>type</I>]</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByVal</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by value.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByRef</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by reference.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the argument passed to the <B>Property Let</B> procedure; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   Every <B>Property Let</B> statement must define at least one argument for the procedure it defines. That argument (or the last argument if there is more than one) contains the actual value to be assigned to the property when the procedure defined by the <B>Property Let</B> statement is invoked.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec229"></A>Remarks</H2><P>If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Property</B> procedures are public by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P>All executable code must be in procedures. You can’t define a <B>Property Let</B> procedure inside another <B>Property</B>, <B>Sub</B>, or <B>Function</B> procedure.</P>
<P>The <B>Exit Property </B>keywords cause an immediate exit from a <B>Property Let</B> procedure. Program execution continues with the statement following the statement that called the <B>Property Let</B> procedure. Any number of <B>Exit Property</B> statements can appear anywhere in a <B>Property Let</B> procedure.</P>
<P>Like a <B>Function</B> and <B>Property Get</B> procedure, a <B>Property Let</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <B>Function</B> and <B>Property Get</B> procedure, both of which return a value, you can only use a <B>Property Let</B> procedure on the left-hand side of a property assignment expression or <B>Let</B> statement.</P>
<H2><A NAME="sec230"></A>See Also</H2><P><B>Function</B> Statement, <B>Let</B> Statement, <B>Property</B> <B>Get</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Sub</B> Statement.</P>
<H2><A NAME="sec231"></A>Specifics (Microsoft Access)</H2><P>You can use the <B>Property Let</B> statement to define a property procedure that assigns the value of a property for a user-defined object. You will probably want to use the <B>Property Let</B> and <B>Property Get</B> statements together to create a property for an object. For example, you could define a <B>Property Let</B> procedure in a form module to set a new property for an object, and a <B>Property Get</B> procedure to return the value of that setting.</P>
<P>Usually you will define property procedures within a form module or report module. Property procedures in a form or report module are public by default, and will be available to procedures in other modules in the current database. However, they will not be available to other databases.</P>
<P>You can use the property procedures to create new properties on a user-defined object. You can also use them to combine a set of properties for a custom form or report object. For example, you could create a custom property called CustomFormType. Using the <B>Property Get</B> statement, you could construct the CustomFormType property procedures so that one setting would display a white form with scroll bars, navigation buttons, and caption “Type1”, while another setting would display a blue form with neither scroll bars nor navigation buttons, and caption “Type2”. Then you could set the CustomFormType property for new form objects that you create for this form. Using the <B>Property Get</B> statement, you could create a property procedure to return the value of this property once it has been set.</P>
<H2><A NAME="sec232"></A>Example</H2><P>This example uses the <B>Property Let</B> statement to define a procedure that assigns a value to a property. The property identifies the pen color for a drawing package.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim CurrentColor As IntegerBLACK = 0, RED = 1, GREEN = 2, BLUE = 3

' Set the pen color property for a Drawing package.
' The module-level variable CurrentColor is set to
' a numeric value that identifies the color used for drawing.Let PenColor(ColorName As String)
    Select Case ColorName                ' Check color name string.
        Case "Red"
            CurrentColor = RED            ' Assign value for Red.
        Case "Green"
            CurrentColor = GREEN            ' Assign value for Green.
        Case "Blue"
            CurrentColor = BLUE            ' Assign value for Blue.
        Case Else
            CurrentColor = BLACK            ' Assign default value.
    End SelectProperty
' The following code sets the PenColor property for a drawing package
' by calling the Property Let procedure.() = "Red"
</PRE>
<P CLASS="t">  </P>
<P>See also the <B>Property Get</B> statement example.</P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>For Each...Next</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>For Each...Next</H2><P CLASS="t">A <B>For Each...Next</B> loop is similar to a <B>For...Next</B> loop, except that it repeats a group of statements for each element in a collection of objects or in an array, instead of repeating the statements a specified number of times. This is especially useful if you don't know how many elements are in a collection, or if the contents of the collection might change as your procedure runs.</P>
<P CLASS="syn"><B>For Each</B> <I>element</I> <B>In</B> <I>group</I><BR>    <I>statements</I><BR><B>Next</B> <I>element</I></P>
<P CLASS="t">When Visual Basic runs a <B>For Each...Next</B> loop, it follows these steps:</P>
<P CLASS="ls">    1.    It defines <I>element</I> as naming the first element in <I>group</I> (provided that there is at least one element).</P>
<P CLASS="ls">    2.    It runs the <I>statements.</I></P>
<P CLASS="ls">    3.    It tests to see whether <I>element</I> is the last element in <I>group.</I> If so, Visual Basic exits the loop.</P>
<P CLASS="ls">    4.    It defines <I>element</I> as naming the next element in <I>group.</I></P>
<P CLASS="ls">    5.    It repeats steps 2 through 4.</P>
<P></P>
<P CLASS="t">Keep the following restrictions in mind when using the <B>For Each...Next</B> statement:</P>
<UL><LI>For collections, <I>element</I> can only be a <B>Variant</B> variable, a generic <B>Object</B> variable, or any specific OLE Automation object variable. (For information about OLE Automation objects, see Chapter 10, "Communicating with Other Applications.") For arrays, <I>element</I> can only be a <B>Variant</B> variable.</LI><LI>You cannot use the <B>For Each...Next</B> statement with an array of user-defined types because a <B>Variant</B> variable cannot contain a user-defined type. For more information about data types, see Chapter 2, "Variables, Constants, and Data Types."</LI></UL><P></P>
<P CLASS="t">The following example examines each cell in the current region for cell A1 on the worksheet named "sheet3" and deletes the cell if its value is less than -1.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c In Worksheets("sheet3").Range("a1").CurrentRegion.Cells
    If c.Value &lt; -1 Then c.Delete
Next c
</FONT></PRE>
<P CLASS="t">For more information about collections and more examples of the <B>For Each...Next</B> statement, see Chapter 4, "Objects and Collections."</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The variable name after the <B>Next</B> statement is optional, but it can make your code easier to read, especially if you have several nested <B>For</B> loops.</P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>On Error Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>On Error Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Enables an error-handling routine and specifies the location of the routine within a procedure; can also be used to disable an error-handling routine.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>On Error GoTo</B> <I>line</I> </P>
<P CLASS="syn"><B>On Error Resume Next</B></P>
<P CLASS="syn"><B>On Error GoTo 0</B></P>
<P CLASS="t">The <B>On Error</B> statement syntax can have any of the following forms:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="115pt" VALIGN="TOP"><COL WIDTH="233pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Statement</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>On Error GoTo</B> <I>line</I> </P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Enables the error-handling routine that starts at <I>line</I>, which is any line label or line number. Thereafter, if a run-time error occurs, control branches to <I>line</I>. The specified <I>line</I> must be in the same procedure as the <B>On Error</B> statement. If it isn't, a compile-time error occurs.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>On Error Resume Next</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Specifies that when a run-time error occurs, control goes to the statement immediately following the statement where the error occurred. In other words, execution continues.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>On Error GoTo 0</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Disables any enabled error handler in the current procedure.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If you don't use an <B>On Error</B> statement, any run-time error that occurs is fatal; that is, an error message is generated and execution stops.</P>
<P CLASS="t">If an error occurs while an error handler is active (between the occurrence of the error and a <B>Resume</B>, <B>Exit Sub</B>, <B>Exit Function</B>, or <B>Exit Property</B> statement), the current procedure's error handler can't handle the error. If the calling procedure has an enabled error handler, control is returned to the calling procedure and its error handler is activated to handle the error. If the calling procedure's error handler is also active, control is passed back through any previous calling procedures until an inactive error handler is found. If no inactive error handler is found, the error is fatal at the point at which it actually occurred. Each time the error handler passes control back to the calling procedure, that procedure becomes the current procedure. Once an error is handled by an error handler in any procedure, execution resumes in the current procedure at the point designated by the <B>Resume</B> statement.</P>
<P CLASS="t">Notice that an error-handling routine is not a <B>Sub</B> or <B>Function</B> procedure. It is a block of code marked by a line label or line number.</P>
<P CLASS="t">Error-handling routines rely on the value in <B>Err</B> to determine the cause of the error. The error-handling routine should test or save this value before any other error can occur or before a procedure that could cause an error is called. The value in <B>Err</B> reflects only the most recent error. You can use the <B>Error</B> function to return the error message associated with any given run-time error number returned by <B>Err</B>.</P>
<P CLASS="t"><B>On Error Resume Next</B> causes execution to continue with the statement immediately following the statement that caused the run-time error, or with the statement immediately following the most recent call out of the procedure containing the error-handling routine. This allows execution to continue despite a run-time error. You can then build the error-handling routine in line with the procedure rather than transferring control to another location within the procedure.</P>
<P CLASS="t"><B>On Error GoTo 0</B> disables error handling in the current procedure. It doesn't specify line 0 as the start of the error-handling code, even if the procedure contains a line numbered 0. Without an <B>On Error GoTo 0</B> statement, an error handler is automatically disabled when a procedure is exited.</P>
<P CLASS="t">To prevent error-handling code from running when no error has occurred, place an <B>Exit Sub</B>, <B>Exit Function</B>, or <B>Exit Property</B> statement, as appropriate, immediately ahead of the error-handling routine, as in the following example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub InitializeMatrix(Var1, Var2, Var3, Var4)
    On Error GoTo ErrorHandler
    . . .
    Exit Sub
ErrorHandler:
    . . .
    Resume Next
End Sub
</FONT></PRE>
<P CLASS="t">Here, the error-handling code follows the <B>Exit Sub</B> statement and precedes the <B>End Sub</B> statement to separate it from the normal procedure flow. This is only one possible solution; error-handling code can be placed anywhere in a procedure.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Err</B> Function, <B>Error</B> Function, <B>Resume</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>On Error GoTo </B>statement to specify the location of an error-handling routine within a procedure. Attempting to delete an open file generates error number 55. The error is handled in the error-handling routine and control is then returned to the statement that caused it.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub OnErrorStatementDemo()
    On Error GoTo ErrorHandler    ' Enable error-handling routine.
    Open "TESTFILE" For Output as #1    ' Open file for output.
    Kill "TESTFILE"    ' Attempt to delete open file.
    Exit Sub    ' Exit Sub before error handler.
ErrorHandler:    ' Error-handling routine.
    Select Case Err    ' Evaluate Error Number.
        Case 55    ' "File already open" error.
            Close #1    ' Close open file.
        Case Else
            ' Handle other situations here... 
    End Select
    Resume    ' Resume execution at same line
                ' that caused the error.
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

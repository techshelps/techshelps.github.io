<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BackColor Property</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec39"></a>BackColor Property</h1>

<h2><a name="sec40"></a>Applies To</h2>

<p>Bound Object Frame Control, Chart Control, Combo Box Control,
Image Control, Label Control, List Box Control, Option Group
Control, Rectangle Control, Text Box Control, Unbound Object
Frame Control.</p>

<h2><a name="sec41"></a>Description</h2>

<p>You can use the <b>BackColor</b> property to specify the color
for the interior of a control or section.</p>

<h2><a name="sec42"></a>Setting</h2>

<p>The <b>BackColor</b> property contains a numeric expression
that corresponds to the color used to fill a control or
section&#146;s interior.</p>

<p>You can set the <b>BackColor</b> property using the Formatting
toolbar, a control&#146;s property sheet, a macro, or Visual
Basic.</p>

<p>You can also use the Color Builder to set this property by
clicking the Build button to the right of the property in the
property sheet. Using the Color Builder enables you to define
custom back colors for controls.</p>

<p>In Visual Basic, use a numeric expression to set this
property. This property setting has a data type of <b>Long</b>.</p>

<p>For controls, you can set the default for this property using
a control&#146;s default control style.</p>

<h2><a name="sec43"></a>Remarks</h2>

<p>To use the <b>BackColor</b> property, the <b>BackStyle</b>
property, if available, must be set to Normal.</p>

<h2><a name="sec44"></a>See Also</h2>

<p><b>BackStyle</b> Property, <b>BorderColor</b> Property, <b>DrawMode</b>
Property, <b>DrawStyle</b> Property, <b>DrawWidth</b> Property, <b>FillColor</b>
Property, <b>ForeColor</b> Property, <b>PSet</b> Method, <b>QBColor</b>
Function, <b>RGB</b> Function.</p>

<h2><a name="sec45"></a>Example</h2>

<p>The following example uses the <b>RGB</b> function to set the <b>BorderColor</b>,
<b>BackColor</b>, and <b>ForeColor</b> properties depending on
the value of the txtPastDue text box. You can also use the <b>QBColor</b>
function to set these properties. Putting the following code in
the Form_Current( ) event sets the control display
characteristics as soon as the user opens a form or moves to a
new record.</p>

<p class="spacing"><br>
</p>

<pre>Sub Form_Current()
    Dim curAmntDue As Currency, lngBlack As Long
    Dim lngRed As Long, lngYellow As Long, lngWhite As Long
    If Not IsNull(Me!txtPastDue.Value) Then
        curAmntDue =Me!txtPastDue.Value
    Else
        Exit Sub
    End If
    lngRed = RGB(255, 0, 0) 
    lngBlack = RGB(0, 0, 0) 
    lngYellow = RGB(255, 255, 0) 
    lngWhite = RGB(255, 255, 255) 
    If curAmntDue &gt; 100 Then
        Me!txtPastDue.BorderColor = lngRed
        Me!txtPastDue.ForeColor = lngRed
        Me!txtPastDue.BackColor = lngYellow
    Else
        Me!txtPastDue.BorderColor = lngBlack
        Me!txtPastDue.ForeColor = lngBlack
        Me!txtPastDue.BackColor = lngWhite
    End IfSub
</pre>
</FONT></FONT></BODY>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 3: Calendar, Selection and Window Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 3: Calendar, Selection
and Window Objects</font></H1>
  <p><b><i>Lesson
    Objectives</i></b></font></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
        
            <ul>
                <li>Manipulate
                    the working calendar.</font></li>
                <li>Use
                    Date arithmetic.</font></li>
                <li>Reference
                    the active cell and task.</font></li>
                <li>Manipulate
                    Windows inside Project.</font></li>
            </ul>
        
        <p><b>Some Topics to
        be introduced in this lesson include:</b></font></p>
        
            
                <ul>
                    <li>Period Method</font></li>
                    <li>Weekday object</font></li>
                    <li>Shifts</font></li>
                    <li>Date Arithmetic.</font></li>
                    <li>ActiveCell/ActiveSelection</font></li>
                    <li>Window activating</font></li>
                </ul>
            
        
        <p><b><i>Calendar
    Object</i></b></font></p>


<p>For the objects
discussed so far, almost all of the information that is available
via the object model was accessible through Dynamic Data Exchange
(DDE) in Microsoft Project 3.0. The Calendar object presents
information which was previously only accessible through the
Microsoft Project Exchange (MPX) file format.</font></p>

<p>The Calendar
object contains information about when work can take place during
the project including the days and the times during the day that
are available for work. Additionally, each resource has its own
calendar which can contain information about differences, such as
vacations, from the normal calendar.</font></p>

<p align="center"><img
src="Image222.gif" width="508" height="244"></font></p>
  
        
            <p align="center"><font color="#000000" size="2"
            face="Verdana"><i>Calendar Object Hierarchy</i></font></p>
            <p><b>Period
            Method and Object</b></font></p>
        
    


<p>The easiest way
to access information in a calendar is to use the Period method.
The Period method takes a range of dates and returns a Period
object. A Period object is like a collection of days except that
you cannot iterate over the days in a Period. For example, to
specify Independence Day in the United States as a nonworking
day, one could do:</font></p>
  
        
            <p><b>ActiveProject.BaseCalendars(&quot;Standard&quot;).Period(&quot;7/4/94&quot;)
            _ </b></font></p>
            <p><b>.Working
            = False</b></font></p>
        
    


<p>Note that if the
finish date of a range is not given, as in this example, the
period returned is the one day.</font></p>

<p>The following
example sets July 4th and July 5th as nonworking:</font></p>
  
        
            <p><b>With
            ActiveProject.BaseCalendars(&quot;Standard&quot;)</b></font></p>
            <p><b>.Period(&quot;7/4/94&quot;,
            &quot;7/5/94&quot;).Working = False</b></font></p>
            <p><b>End
            With</b></font></p>
        
    


<p>This method is
very useful when the range you want to work with cannot be easily
described by the Year, Month, and Day objects.</font></p>
  
        
            <p><b>Year,
            Month, Day Objects</b></font></p>
        
    


<p>A more object
oriented way of manipulating information in a calendar is to
access the Year, Month and Day objects contained in the calendar.
With these objects and the collections which contain them, one
can perform more powerful operations on the calendar.</font></p>
  
        
            <p><b>For
            Each y in
            ActiveProject.BaseCalendars(&quot;Standard&quot;).Years</b></font></p>
            <p><b>y.Months(7).Days(4).Working
            = False</b></font></p>
            <p><b>Next
            y</b></font></p>
        
    


<p>By using the
objects, one can make the 4th of July a nonworking day every
year. To make the code a little more readable, one could instead
specify the name of the month like:</font></p>
  
        
            <p><b>For
            Each y in ActiveProject.Calendar.Years</b></font></p>
            <p><b>y.Months(&quot;July&quot;).Days(4).Working
            = False</b></font></p>
            <p><b>Next
            y</b></font></p>
        
    


<p><b>Weekday Objects</b></font></p>

<p>The final way of
manipulating the calendar is to access the Weekday object.
Microsoft Project allows the user to specify a day of the week as
a working day or as a day off. This makes it easy to make a 4 day
work week instead of the standard Monday through Friday.</font></p>

<p>One could make
all Fridays nonworking like:</font></p>
  
        
            <p><b>ActiveProject.BaseCalendars(&quot;Standard&quot;).Weekdays(6).Working
            = False</b></font></p>
        
    


<p>To make the code
more readable, as was done with the Month object, there are two
choices. One could use a defined constant:</font></p>
  
        
            <p><b>ActiveProject.BaseCalendars(&quot;Standard&quot;).Weekdays(pjFriday)
            _ </b></font></p>
            <p><b>.Working
            = False</b></font></p>
        
    


<p>Or use the name
of the day:</font></p>
  
        
            <p><b>ActiveProject.BaseCalendars(&quot;Standard&quot;).Weekdays(&quot;Friday&quot;)
            _ </b></font></p>
            <p><b>.Working
            = False</b></font></p>
        
    


<p><b>Properties and Methods</b></font></p>

<p>The Period,
Year, Month, Day, and Weekday objects share most of the same
properties and methods.</font></p>

<p>The Working
property that was used in the above examples sets whether or not
work can occur on the range of the calendar specified by the
object.</font></p>

<p>The Shift1,
Shift2, and Shift3 properties return a Shift object which allows
you to specify the Start and Finish time for a shift</font></p>

<p>The Default
method applies to resource calendars. It returns the object to
the state of its associated Base Calendar.</font></p>

<p>An example which
uses more of these properties would be one to make Fridays a
half-day of work:</font></p>
  
        
            <p><b>With
            ActiveProject.BaseCalendars(&quot;Standard&quot;).Weekdays(&quot;Fri&quot;)</b></font></p>
            <p><b>.Working
            = True</b></font></p>
            <p><b>.Shift1.Start
            = &quot;8:00&quot;</b></font></p>
            <p><b>.Shift1.Finish
            = &quot;12:00&quot;</b></font></p>
            <p><b>.Shift2.Clear</b></font></p>
            <p><b>.Shift3.Clear</b></font></p>
            <p><b>End
            With</b></font></p>
        
        <p><b>Scheduling
        Methods</b></font></p>
    


<p>One of the most
interesting set of methods exposed by Microsoft Project are those
which give the macro writer access to scheduling capabilities.
Microsoft Project provides methods to add and subtract dates as
well as display dates and durations in different formats.</font></p>
  
        
            <p><b>Date
            Arithmetic</b></font></p>
        
    


<p>By exposing date
arithmetic methods in Microsoft Project, a realm of different
macros are possible. It also makes it possible to include
Microsoft Project as a part of an integrated scheduling solution.
With these methods, a Solution Provider could use Microsoft
Project as a scheduling engine by either entering the information
into Microsoft Project, or by just using the date arithmetic
methods directly.</font></p>
  
        
            <p><b>DateAdd</b></font></p>
        
    


<p>The DateAdd
method accepts a start date and a duration and returns the finish
date. Optionally, you can specify a calendar to be used in the
calculation. If a calendar is not specified, then the project
calendar is used.</font></p>
  <p><b>x =
    DateAdd(&quot;7/11/94 8:00am&quot;, &quot;3d&quot;)</b></font></p>


<p>In this example,
x would be 7/13/94 at 5:00pm, since a 3d activity beginning on
July 11th at 8:00am would end at the end of July 13th.</font></p>
  
        
            <p><b>DateSubtract</b></font></p>
        
    


<p>The DateSubtract
method is the reciprocal of the DateAdd method. It accepts a
finish date and a duration and returns the start date. As with
the DateAdd method, you can optionally specify a calendar.</font></p>
  <p><b>x =
    DateSubtract(&quot;7/13/94 5:00pm&quot;, &quot;3d&quot;)</b></font></p>


<p>Being the
complement of DateAdd, this example would return 7/11/94 at
8:00am.</font></p>
  
        
            <p><b>DateDifference</b></font></p>
        
    


<p>The
DateDifference method is related to both DateAdd and DateSubtract
method. It takes two dates and returns the duration between them.
Again, a calendar can be optionally specified.</font></p>
  <p><b>x =
    DateDifference(&quot;7/11/94 8:00am&quot;, &quot;7/13/94
    5:00pm&quot;)</b></font></p>


<p>Here,
DateDifference would return 1440 minutes which is 3 days.</font></p>
  
        
            <p><b>Date
            Arithmetic Example</b></font></p>
        
    


<p>Using these
methods, you can create a fairly simple macro which will adjust
all of the dates in a project when your project start date slips:</font></p>
  
        
            <p><b>Sub
            AdjustDates()</b></font></p>
            <p></font>&nbsp;</p>
            <p><b>nCurDateFormat
            = Application.DefaultDateFormat</b></font></p>
            <p><b>Application.DefaultDateFormat
            = pjDate_mm_dd_yy_hh_mmAM</b></font></p>
            <p><b>sStartDate
            = ActiveProject.ProjectStart</b></font></p>
            <p><b>sNewStartDate
            = InputBox(Prompt:=&quot;Enter New Start Date&quot;,
            Default:=sStartDate)</b></font></p>
            <p><b>If
            sNewStartDate = &quot;&quot; Then End 'Canceled the
            InputBox</b></font></p>
            <p><b>nDelta
            = DateDifference(sStartDate, sNewStartDate)</b></font></p>
            <p><b>If
            nDelta = 0 Then</b></font></p>
            <p><b>MsgBox
            &quot;New start date must be greater than current
            start date.&quot;</b></font></p>
            <p><b>End</b></font></p>
            <p><b>End
            If</b></font></p>
            <p></font>&nbsp;</p>
            <p><b>For
            Each t In ActiveProject.Tasks</b></font></p>
            <p><b>If
            t.ConstraintDate &lt;&gt; &quot;&quot; Then</b></font></p>
            <p><b>Select
            Case t.ConstraintType</b></font></p>
            <p><b>Case
            pjMFO, pjFNLT, pjFNET</b></font></p>
            <p><b>&#145;Finish
            Constraints are fine</b></font></p>
            <p><b>t.ConstraintDate
            = DateAdd(t.ConstraintDate, nDelta)</b></font></p>
            <p><b>Case
            Else</b></font></p>
            <p><b>'Start
            Constraints are problematic.</b></font></p>
            <p><b>'8:00am
            + 1d gives 5:00pm. Since we want 8:00am the</b></font></p>
            <p><b>'next
            day, we add 1d+1m and then subtract the 1m</b></font></p>
            <p><b>t.ConstraintDate
            = DateAdd(t.ConstraintDate,nDelta + 1)</b></font></p>
            <p><b>t.ConstraintDate
            = DateSubtract(t.ConstraintDate, 1)</b></font></p>
            <p><b>End
            Select</b></font></p>
            <p><b>End
            If</b></font></p>
            <p><b>Next
            t</b></font></p>
            <p><b>ActiveProject.ProjectStart
            = sNewStartDate</b></font></p>
            <p><b>Application.DefaultDateFormat
            = intCurDateFormat</b></font></p>
            <p><b>End
            Sub</b></font></p>
        
    


<p><b>Date &amp; Duration
Formatting</b></font></p>

<p>Related to the
Date Arithmetic methods are some methods which allow you to
display dates and durations in different formats.</font></p>
  
        
            <p><b>DateFormat</b></font></p>
        
    


<p>DateFormat takes
a date and a constant specifying the format in which you want the
date to appear. The available formats are the same as the default
formats for displaying information in Microsoft Project.</font></p>
  
        
            <p><b>MsgBox
            DateFormat(&quot;12/31/94&quot;, pjDate_mmmm_dd_yyyy)</b></font></p>
        
    


<p>This example
would display &#145;December 31, 1994&#146; in a dialog box.</font></p>
  
        
            <p><b>DurationFormat</b></font></p>
        
    


<p>Similar to the
DateFormat method, DurationFormat takes a duration and a constant
specifying the units in which you want the duration to appear.
The available units are minutes, hours, days, and weeks.</font></p>
  
        
            <p><b>MsgBox
            DurationFormat(&quot;3d&quot;, pjWeeks)</b></font></p>
        
    


<p>This example
would display &#145;.6w&#146; in a dialog box.</font></p>
  
        
            <p><b>DurationValue</b></font></p>
        
    


<p>Although the
DurationValue method does not affect the formatting of a
duration, it is closely related to the DurationFormat method.
DurationValue take a string and returns the value of that string
as a duration. Microsoft Project expresses durations in minutes,
so 1 day = 8 hours = 480 minutes.</font></p>
  <p><b>x =
    DurationValue(&quot;2d&quot;)</b></font></p>


<p>Here, x would be
set to 960 which is the number of minutes in 2 days.</font></p>

<p>Because
durations are expressed in minutes, you can add durations using
normal arithmetic. For example, the following code would add the
entered duration to the selected task.</font></p>
  
        
            <p><b>x
            = DurationValue(InputBox(&quot;Enter amount by which
            to increase _ duration&quot;))</b></font></p>
            <p><b>ActiveCell.Task.Duration
            = ActiveCell.Task.Duration + x</b></font></p>
            <p><b>strTemp
            = &quot;The new duration in weeks is &quot;</b></font></p>
            <p><b>strTemp
            = strTemp &amp;
            DurationFormat(ActiveCell.Task.Duration, pjWeeks)</b></font></p>
            <p><b>MsgBox
            strTemp</b></font></p>
        
    


<p><b><u>Exercise1:
(CalRangeSet)</u></b></font></p>
  <p>Write a
    macro that schedules a Christmas break. First propmt the user
    for a date range, and set those days in that range to
    nonworking on the base calendar.</font></p>
    <p><font color="#FF0000" face="Verdana">Sub CalRangeSet()</font></p>
    <p><font color="#FF0000" face="Verdana">DRangeStart =
    InputBox(&quot;Enter the Start date of the break&quot;)</font></p>
    <p><font color="#FF0000" face="Verdana">DRangeFinish =
    InputBox(&quot;Enter the Finish date of the break&quot;)</font></p>
    <p><font color="#FF0000" face="Verdana">ActiveProject.BaseCalendars(&quot;Standard&quot;).Period(DRangeStart,
    DRangeFinish).Working = False</font></p>
    <p><font color="#FF0000" face="Verdana">End Sub</font></p>


<p><b><u>Exercise2:
(CalTaskMove)</u></b></font></p>

<p>Write a macro
that prompts the user for an amount of time (&quot;3d&quot;) and
then creates a new task that starts that many days after the
previous task. </font></p>
  <p><font color="#FF0000" face="Verdana">Sub CalTaskMove()</font></p>
    <p><font color="#FF0000" face="Verdana">Dim newTime As String</font></p>
    <p><font color="#FF0000" face="Verdana">newTime =
    InputBox(&quot;Enter the a duration&quot;)</font></p>
    <p><font color="#FF0000" face="Verdana">x =
    ActiveProject.Tasks(ActiveCell.Task.ID - 1).Start</font></p>
    <p><font color="#FF0000" face="Verdana">ActiveCell.Task.Start
    = DateAdd(x, newTime)</font></p>
    <p><font color="#FF0000" face="Verdana">End Sub</font></p>
    <p><b><i>Selection
    Objects</i></b></font></p>


<p>Even though
Microsoft Project does not supply objects for all of the user
interface elements in the product, selection of information is
provided so that macro writers can manipulate information based
on the users selection.</font></p>
  
        
            <p><b>Theory</b></font></p>
        
    


<p>Microsoft
Project supports two variations of the active selection: a Cell
object accessible from the ActiveCell property of the
Application, and a Selection object available through the
ActiveSelection property of the Application.</font></p>

<p>Since Microsoft
Project can be thought of more as a database with records and
fields than a spreadsheet with rows and columns, both the Cell
and Selection object provide information about the selected
records (tasks or resources) and the selected fields.</font></p>
  
        <p><b>Cell Object</b></font></p>
    


<p>The Cell object
allows access to the active record and field in the selection.
This is sometimes a subset of the selection, if the selection
contains more than one cell.</font></p>

<p><img
src="Image223.gif" width="476" height="130"></font></p>

<p>To determine the
record, the Cell object contains a Task and a Resource object.
This allows the macro writer to access all of the fields of the
selected record. For example:</font></p>
  
        
            <p><b>MsgBox
            &quot;You have task &quot; &amp; ActiveCell.Task.Name
            &amp; &quot; selected.&quot;</b></font></p>
        
    


<p>will display the
name of the task regardless of the field selected.</font></p>

<p>There are
occasions where a task will not be selected, for instance in a
resource view. In this case, ActiveCell.Task will return Nothing.
So a more robust version of this example would be:</font></p>
  
        
            <p><b>If
            Not (ActiveCell.Task Is Nothing) Then</b></font></p>
            <p><b>MsgBox
            &quot;You have task &quot; &amp; ActiveCell.Task.Name
            &amp; &quot; selected.&quot;</b></font></p>
            <p><b>End
            If</b></font></p>
        
    


<p>To determine the
field selected, the Cell object provides two properties. The
FieldName property contains the name of the field as a string. So
we could do:</font></p>
  
        
            <p><b>If
            Not (ActiveCell.Task is Nothing) Then</b></font></p>
            <p><b>strTemp
            = &quot;You have the &quot;</b></font></p>
            <p><b>strTemp
            = strTemp &amp; ActiveCell.FieldName</b></font></p>
            <p><b>strTemp
            = strTemp &amp; &quot; field of &quot;</b></font></p>
            <p><b>strTemp
            = strTemp &amp; ActiveCell.Task.Name</b></font></p>
            <p><b>strTemp
            = strTemp &amp; &quot; selected.&quot;</b></font></p>
            <p><b>MsgBox
            strTemp</b></font></p>
            <p><b>End
            If</b></font></p>
        
    


<p>The FieldID
property returns the ID number of the field which can be used
with either the GetField or the SetField methods discussed
earlier.</font></p>
  
        
            <p><b>If
            Not (ActiveCell.Task is Nothing) Then</b></font></p>
            <p><b>strTemp
            = InputBox(&quot;Enter value to be placed in the
            Active Cell&quot;)</b></font></p>
            <p><b>ActiveCell.Task.SetField(FieldID:=ActiveCell.FieldID,
            Value:=strTemp)</b></font></p>
            <p><b>End
            If</b></font></p>
        
    


<p><b>Selection Object</b></font></p>

<p>The Selection
object is an extension of the Cell object. Instead of the Task
and Resource objects contained in the Cell object, the Selection
object contains Tasks and Resources collections. Similarly, in
place of the FieldName and FieldID properties are FieldNameList
and FieldIDList List collections.</font></p>

<p>With the
Selection object one could implement a version of the Fill Down
command found in Microsoft Project and Excel.</font></p>
  
        
            <p><b>If
            Not (ActiveCell.Task is Nothing) Then</b></font></p>
            <p><b>strTemp
            = InputBox(&quot;Enter value to be placed in all the
            cells in the same column as the active cell&quot;)</b></font></p>
            <p><b>For
            Each t in ActiveSelection.Tasks</b></font></p>
            <p><b>t.SetField(FieldID:=ActiveCell.FieldID,
            Value:=strTemp)</b></font></p>
            <p><b>Next
            t</b></font></p>
            <p><b>End
            If</b></font></p>
        
    


<p><b><u>Exercise</u></b></font></p>
  <p>Write a
    macro that will increment a counter in a cell. For example,
    if you type a 1 in a cell and select it plus cells below and
    then run the macro, you would end up with these cells being
    filled with 1, 2, 3, 4, 5. See if you can also get it to work
    with text. Ex. Phase1, Phase2, Phase3, etc. </font></p>
    <p><b><i>Window
    &amp; Pane Objects</i></b></font></p>


<p>The Window and
Pane objects offer a limited set of properties, but are useful
when you want to manipulate some of the visual properties of your
project windows.</font></p>

<p>A Window object
provides a Close method, allowing you to close a window. This is
useful when you have multiple windows open for the same project.
This example closes the active window:</font></p>
  
        
            <p><b>ActiveWindow.Close</b></font></p>
        
    


<p>To change the
height of a window:</font></p>
  
        
            <p><b>ActiveWindow.Height
            = 400</b></font></p>
        
    
    <p>To change
    the state of the current window, use the WindowState
    property. There are three states to choose from, pjMaximized,
    pjMinimized, and pjNormal. To maximize the window use:</font></p>
    
        
            <p><b>ActiveWindow.WindowState
            = pjMaximized</b></font></p>
        
    


<p>Project also
allows control over each individual pane within the active window
through the pane object. To determine which pane is active in a
window:</font></p>
  
        
            <p><b>ActiveWindow.ActivePane</b></font></p>
        
    


<p>This returns 1
for the top pane, and 2 for the bottom pane.</font></p>

<p>You can
manipulate the panes in a window as objects directly:</font></p>
  
        
            <p><b>ActiveWindow.TopPane.Activate</b></font></p>
        
    


<p>This activates
the top pane. You could also use the Application object property
PaneNext which Activates the lower pane if the upper pane is
active or activates the upper pane if the lower pane is active.</font></p>
  
        
            <p><b>ActiveWindow.BottomPane.Close</b></font></p>
        
    


<p>This closes the
bottom pane.</font></p>

<p>Another way to
close the bottom pane is to use the Application objects PaneClose
method. This is the same as choosing remove split from the window
menu. If you want to split the screen, then use PaneCreate.</font></p>
</FONT></BODY>
</html>

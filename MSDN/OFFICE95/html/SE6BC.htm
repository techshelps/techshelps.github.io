<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sub Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Sub Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Declares the name, arguments, and code that form the body of a <B>Sub</B> procedure.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn">[<B>Private</B> | <B>Public</B>][<B>Static</B>] <B>Sub</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>] <BR>    [<I>statements</I>]<BR>    [<B>Exit Sub</B>]<BR>    [<I>statements</I>]<BR><B>End Sub</B></P>
<P CLASS="t">The <B>Sub</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Public</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Sub</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement) the procedure is not available outside the project.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Private</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Sub</B> procedure is accessible only to other procedures in the module where it is declared.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Static</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Sub</B> procedure's local variables are preserved between calls. The <B>Static</B> attribute doesn't affect variables that are declared outside the <B>Sub</B>, even if they are used in the procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>name</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the <B>Sub</B>; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>arglist</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">List of variables representing arguments that are passed to the <B>Sub</B> procedure when it is called. Multiple variables are separated by commas.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>statements</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any group of statements to be executed within the body of the <B>Sub</B> procedure.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The <I>arglist</I> argument has the following syntax and parts:</P>
<P CLASS="syn">[[<B>Optional</B>][<B>ByVal</B> | <B>ByRef</B>][<B>ParamArray</B>] <I>varname</I>[<B>( )</B>] <B>As</B> <I>type</I>]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Optional</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that an argument is not required. If used, all subsequent arguments in <I>arglist</I> must also be optional and declared using the <B>Optional</B> keyword. All <B>Optional</B> arguments must be <B>Variant</B>. <B>Optional</B> can't be used for any argument if <B>ParamArray</B> is used.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByVal</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by value.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByRef</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by reference.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ParamArray</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Used only as the last argument in <I>arglist</I> to indicate that the final argument is an <B>Optional</B> array of <B>Variant</B> elements. The <B>ParamArray</B> keyword allows you to provide an arbitrary number of arguments. May not be used with <B>ByVal</B>, <B>ByRef</B>, or <B>Optional</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable representing the argument; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the argument passed to the procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String</B> (variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Sub</B> procedures are <B>Public</B> by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P CLASS="t">All executable code must be in procedures. You can't define a <B>Sub</B> procedure inside another <B>Sub</B>, <B>Function</B>, or <B>Property</B> procedure.</P>
<P CLASS="t">The <B>Exit Sub </B>keyword causes an immediate exit from a <B>Sub</B> procedure. Program execution continues with the statement following the statement that called the <B>Sub</B> procedure. Any number of <B>Exit Sub</B> statements can appear anywhere in a <B>Sub</B> procedure.</P>
<P CLASS="t">Like a <B>Function</B> procedure, a <B>Sub</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <B>Function</B> procedure, which returns a value, a <B>Sub</B> procedure can't be used in an expression.</P>
<P CLASS="t">You call a <B>Sub</B> procedure using the procedure name followed by the argument list. See the <B>Call</B> statement for specific information on how to call <B>Sub</B> procedures.</P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt"><B>Sub</B> procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow. The <B>Static</B> keyword usually is not used with recursive <B>Sub</B> procedures.</P>
<P></P>
<P CLASS="t">Variables used in <B>Sub</B> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <B>Dim</B> or the equivalent) are always local to the procedure. Other variables used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.</P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">A procedure can use a variable that is not explicitly declared in the procedure, but a name conflict can occur if anything you have defined at the module level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant or variable, it is assumed that your procedure is referring to that module-level name. Explicitly declare variables to avoid this kind of conflict. You can use an <B>Option</B> <B>Explicit</B> statement to force explicit declaration of variables.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">You can't use <B>GoSub</B>, <B>GoTo</B>, or <B>Return</B> to enter or exit a <B>Sub</B> procedure.</P>
<P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Call</B> Statement, <B>Dim</B> Statement, <B>Function</B> Statement, <B>Option</B> <B>Explicit</B> Statement, <B>Property</B> <B>Get</B> Statement, <B>Property</B> <B>Let</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Static</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Sub</B> statement to declare the name, arguments and code that form the body of a <B>Sub</B> procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' Sub procedure definition.
Sub SubComputeArea(Length, Width)    ' Sub with two arguments.
    Dim Area As Double    ' Declare local variable.
    If Length = 0 Or Width = 0 Then    ' If either argument = 0.
        Exit Sub    ' Exit Sub immediately.
    End If
    Area = Length * Width    ' Calculate area of rectangle.
    Debug.Print Area    ' Print Area to Debug window.
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1>Type Statement</H1><P CLASS="t">  </P>
<H2>Description</H2><P CLASS="t">Used at module level to define a user-defined data type containing one or more elements.</P>
<H2>Syntax</H2><P CLASS="syn">[<B>Private</B> | <B>Public</B>] <B>Type</B> <I>varname</I><BR>    <I>elementname</I> [<B>(</B>[<I>subscripts</I>]<B>)</B>] <B>As</B> <I>type</I><BR>    [<I>elementname</I> [<B>(</B>[<I>subscripts</I>]<B>)</B>] <B>As</B> <I>type</I>]<BR>    . . .<B>End Type</B></P>
<P CLASS="syn"></P>
<P CLASS="t">The <B>Type </B>statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="268pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Public</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Used to declare user-defined types that are available to all procedures in all modules in all projects.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Private</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Used to declare user-defined types that are available only within the module where the declaration is made.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the user-defined type; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>elementname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of an element of the user-defined type. Element names also follow standard variable naming conventions, except that keywords can be used.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>subscripts</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Dimensions of an array element. Use only parentheses when declaring an array whose size can change. The <I>subscripts</I> argument uses the following syntax:</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">[<I>lower</I> <B>To</B>] <I>upper </I>[,[<I>lower</I> <B>To</B>] <I>upper</I>] . . .</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">When not explicitly stated in <I>lower</I>, the lower bound of an array is controlled by the <B>Option</B> <B>Base</B> statement. The lower bound is zero if no <B>Option</B> <B>Base</B> statement is present.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the element; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String</B>, <B>String</B> * <I>length</I> (for fixed-length strings), <B>Object</B>, <B>Variant</B>, another user-defined type, or an object type.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P>
<H2>Remarks</H2><P CLASS="t">The <B>Type</B> statement can be used only at module level. Once you have declared a user-defined type using the <B>Type</B> statement, you can declare a variable of that type anywhere within the scope of the declaration. Use <B>Dim</B>, <B>Private</B>, <B>Public</B>, <B>ReDim</B>, or <B>Static</B> to declare a variable of a user-defined type.</P>
<P CLASS="t">In standard modules, user-defined types are public by default. This visibility can be changed using the <B>Private</B> keyword. In class modules, however, user-defined types can only be private and the visibility cannot be changed using the <B>Public</B> keyword.</P>
<P CLASS="t">Line numbers and line labels aren’t allowed in <B>Type...End Type</B> blocks.</P>
<P CLASS="t">User-defined types are often used with data records, which frequently consist of a number of related elements of different data types.</P>
<P CLASS="t">The following example shows the use of fixed-size arrays in a user-defined type:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Type StateData(1 To 100) As Integer            ' Declare a static array.As String * 30TypeWashington(1 To 100) As StateData
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">In the preceding example, StateData includes the CityCode static array, and the record Washington has the same structure as StateData.</P>
<P CLASS="t">When you declare a fixed-size array within a user-defined type, its dimensions must be declared with numeric literals or constants rather than variables.</P>
<P CLASS="t">The setting of the <B>Option Base</B> statement determines the lower bound for arrays within user-defined types.</P>
<H2>See Also</H2><P CLASS="t">Data Type Summary, <B>Dim</B> Statement, <B>Option</B> <B>Base</B> Statement, <B>Private</B> Statement, <B>Public</B> Statement, <B>ReDim</B> Statement, <B>Static</B> Statement.</P>
<H2>Specifics (Microsoft Access)</H2><P CLASS="t">In Microsoft Access, user-defined types in a standard module are public by default. To make a user-defined type in a standard module private, precede the <B>Type</B> statement with the <B>Private</B> keyword.</P>
<P CLASS="t">In a form module or report module, user-defined types are private and cannot be made public.</P>
<H2>Example</H2><P CLASS="t">This example uses the <B>Type</B> statement to define a user-defined data type. The <B>Type</B> statement is used at the module level only. If it appears in a Class Module, a <B>Type</B> statement must be preceded by the keyword <B>Private</B>.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Type EmployeeRecord                ' Create user-defined type.
    ID As Integer                ' Define elements of data type.As String * 20As String * 30As LongAs DateTypeMyRecord As EmployeeRecord    ' Declare variable.
' Assignment to EmployeeRecord variable must occur in a procedure..ID = 12003                ' Assign a value to an element.
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P></FONT></FONT></BODY></html>

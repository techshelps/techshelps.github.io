<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 2: Programming Basics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817459">Lesson
2: </font></a><a name="DDE_LINK2">Programming
Basics</font></a></H1>
  <p><b><i>Lesson
    Objectives</i></b></font></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
    
    <ul>
        <li>Use
            procedures to structure and segment code for
            effectively designed applications.</font></li>
        <li>Describe
            the difference between Sub and Function procedures
            and explain when the use of each type is appropriate.</font></li>
        <li>Customize
            the programming environment by changing the size and
            color of code text and the tab width.</font></li>
        <li>Explain
            the various data types available in Visual Basic and
            utilize them when declaring data.</font></li>
        <li>Declare
            variables that are accessible within a procedure,
            within a module or within a workbook.</font></li>
        <li>Describe
            the difference between variable scope and lifetime.</font></li>
        <li>Describe
            why explicit variable declarations make code more
            efficient and less error prone.</font></li>
        <li>Practice
            effective variable declaration using the Require
            Variable Declaration option.</font></li>
        <li>Explain
            the difference between variables and constants.</font></li>
        <li>Create
            arrays and use them to store different types of data.</font></li>
        <li>Use the
            conversion functions to change the data type of a
            variable.</font></li>
        <li>Manipulate
            text strings using Visual Basic functions such as
            Left, Mid, Right and others.</font></li>
        <li>Accept
            user input using the MsgBox and InputBox functions
            and use the values returned from these function in VB
            code.</font></li>
        <li>Describe
            the Auto_Open and Auto_Close sub procedures.</font></li>
    </ul>
    
        <p><b>Some Topics to
        be introduced in this lesson include:</b></font></p>
        <ul>
            <li>Procedures</font></li>
            <li>Sub
                vs. Function Procedures</font></li>
            <li>Auto_Open
                and Auto_Close</font></li>
            <li>Creating
                and calling a procedure</font></li>
            <li>The
                Module Sheet</font></li>
            <li>Customizing
                the programming environment</font></li>
            <li>Declaring
                data - Data types</font></li>
            <li>Scope
                and lifetime</font></li>
            <li>Variables
                and constants</font></li>
            <li>Converting
                data types</font></li>
            <li>Text
                string manipulation</font></li>
            <li>Directory
                and file control</font></li>
            <li>Interaction
                (MsgBox,InputBox) </font></li>
        </ul>
    
    <p><b><i>Programming
    Basics</i></b></font></p>
    
        <p><b>Module
        Structure</b></font></p>
        <p><b><img
        src="Image213.gif" align="right" hspace="19" width="312"
        height="248"></b></font></p>
    


<p>Code within a
Module is broken up into a series of <i>procedures</i>.
Procedures are blocks of code that perform a task or tasks which
together make up a full application An application is usually
written using a series of procedures, dividing the code into more
manageable units. This code is more easily shared with other
procedures and is easier to debug. Procedures can also be defined
to perform a specific task based on a particular event (<i>event
procedures</i>). </font></p>

<p>There are three
types of procedures in Visual Basic for Applications:</font></p>
  
        
            
                <ul>
                    <li>Sub</font></li>
                    <li>Function</font></li>
                    <li>Property</font></li>
                </ul>
            
            <p><b>Sub
            Procedures</b></font></p>
        
    


<p>A Sub procedure
can accept arguments, perform a series of statements and change
the value of its arguments. These are used most often when
automating tasks and performing commands. A Sub procedure is
defined using the keyword <b>Sub</b> followed by the name of the
procedure:</font></p>
  <p><b>Sub
    PrintReport()</b></font></p>
    <p><b>'
    Procedure code goes here</b></font></p>
    <p><b>End Sub</b></font></p>


<p>Sub procedures
are the most common procedure type and will be used in code
examples which introduce the rest of the topics discussed in this
Module. </font></p>
  
        
            <p><b>Auto_Open
            and Auto_Close</b></font></p>
        
    


<p>Only two type of
auto-execute macros are supported in Project 4.0: Auto_Close and
Auto_Open. </font></p>

<p>Any sub
procedure named Auto_Open will execute automatically when the
project file is first opened. Holding down the Shift key while
opening the file will prevent the macro from executing. Note that
if the Open Last File on Startup option is selected, an Auto_Open
macro in the last saved file will be executed every time Project
is booted.</font></p>

<p>Any sub
procedure named Auto_Close will execute automatically when the
project file is closed. Holding down the Shift key while closing
the file will prevent the macro from executing. Note that if a
number of files are closed at once (File Close All, or File
Exit), all Auto_Close procedures will be executed for these
files, if they exist.</font></p>

<p>If procedures
with the same name appear in both the local project file and the
global file, the local procedures will be executed.</font></p>
  <p><b>Sub
    Auto_Open</b></font></p>
    <p><b>{Code to
    execute when the workbook is opened}</b></font></p>
    <p><b>End Sub</b></font></p>
    <p><b>Sub
    Auto_Close</b></font></p>
    <p><b>{Code to
    execute when the workbook is closed}</b></font></p>


<p>End Sub</font></p>
  
        
            <p><b>Function
            Procedures</b></font></p>
        
    


<p>A Function
procedure, sometimes referred to as a <i>user-defined function</i>,
can also accept arguments, execute a series of statements and
change the value of its arguments. Unlike a Sub procedure,
however, a Function procedure may also return a value. They most
often are used to perform some sort of calculation. Function
procedures are defined using the keyword <b>Function</b>:</font></p>
  <p><b>Function
    SalesFactor(MarkUp, Region)</b></font></p>
    <p><b>'
    Function procedure code goes here</b></font></p>
    <p><b>End
    Function</b></font></p>


<p>Function
procedures will be discussed in more detail in Lesson 4.</font></p>
  
        <p><b>Defining and
        Running a Procedure</b></font></p>
    


<p>When a procedure
is created using the <b>Sub</b>, <b>Function</b> or <b>Property </b>statement
(followed by the corresponding End statement), the procedure is
available for use. Depending on the type of procedure, the
procedure can be run from the Tools Macro command, while
debugging or from another procedure, without any special
&quot;defining&quot; process. A quick way to run a procedure is
from within the module editor. Click within the procedure, and
press the Run button on the Visual Basic toolbar.</font></p>

<p>To run a
procedure from within another procedure, simply type the name of
the procedure:</font></p>
  <p><b>PrintReport</b></font></p>


<p>or, if the
procedure resides on another module sheet, you can proceed the
name with the module sheet name (although this isn&#146;t
absolutely necessary):</font></p>
  <p><b>Module1.PrintReport</b></font></p>


<p>Procedures are,
by default, available to all other procedures within the same
library. To limit accessibility to a procedure, place the word <b>Private</b>
before the <b>Sub</b> or <b>Function </b>statement and the
procedure can only be called from within the current module:</font></p>
  <p><b>Private
    Sub PrintReport()</b></font></p>
    
        
            <p><b>General
            Declarations Section</b></font></p>
        
    


<p>All modules
contain an area at the top of a module which falls before the
first procedure in that module. This section is called the <i>general
declarations</i> section. This area is used to define options and
declare data that apply to the entire module sheet.</font></p>
  
        
            <p><b>Using
            Comments and Line Labels to Document Code</b></font></p>
        
    


<p>Line labels can
be used to separate the code within a procedure and can then be
used by certain commands to indicate branching locations. A line
label can contain any combination of characters but must begin
with a letter and end with a colon:</font></p>
  <p><b>Sub
    PrintReport()</b></font></p>
    <p><b>PrintMySelection:</b></font></p>
    <p><b>'Procedure
    code goes here</b></font></p>
    <p><b>End Sub</b></font></p>


<p>Comments can be
added to code placing either an apostrophe (') or the <b>Rem</b>
statement at the beginning of the comment. Comments can appear on
their own lines or at the end of code strings:</font></p>
  <p><b>Sub
    PrintReport()</b></font></p>
    <p><b>Selection.PrintOut
    'Prints all pages of the selection</b></font></p>
    <p><b>End Sub</b></font></p>
    
        
            <p><b>Making
            Code Easier to Read</b></font></p>
        
    


<p>At times, code
in a procedure can become so long that it extends past the edge
of the screen. This can make reading the code difficult. The
line-continuation character or the underscore (_) is used to
extend a single line of code to more than one physical lines.
There are two rules to using the line continuation character. It
must immediately follow a space and it cannot appear within a
text string.</font></p>
  <p><b><i>Declaring
    and Storing Data</i></b></font></p>


<p>An essential
element in many programs is storing data for later use. In VB,
values are stored as variables or constants. This form of data is
flexible because the type of data stored and the accessibility of
the data from other procedures can be controlled.</font></p>
  
        <p><b>Terminology
        and Concepts</b></font></p>
        
            <p><b>Variables
            vs. Constants</b></font></p>
        
    


<p>The decision to
create a variable or a constant depends on how that data will be
used. A <i>variable</i> stores values that will change at some
point in the application. For example, if the application stores
a value that increments each time a particular task is completed,
a variable should be used. A <i>constant</i> is used to store a
value that does not change.</font></p>
  
        
            <p><b>Data Types</b></font></p>
        
    


<p>In Visual Basic,
the programmer has a great deal of control over how information
is stored. The different data types available include:</font></p>

<table border="1" cellpadding="2" width="552">
    <tr>
        <td width="31%" height="17"><p align="center"><b>Data Type </b></font></p>
        </td>
        <td width="15%" height="17"><p align="center"><b>Storage Size</b></font></p>
        </td>
        <td width="47%" height="17"><p align="center"><b>Range</b></font></p>
        </td>
        <td width="8%" height="17"><p align="center"><b>Short</b></font></p>
        <p align="center"><b>cut</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="17">Boolean</font></td>
        <td width="15%" height="17">2 bytes</font></td>
        <td width="47%" height="17">True or False.</font></td>
        <td width="8%" height="17"><p align="center">n/a</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="17">Integer </font></td>
        <td width="15%" height="17">2 bytes</font></td>
        <td width="47%" height="17">-32,768 to 32,767.</font></td>
        <td width="8%" height="17"><p align="center">%</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="17">Long (long integer)</font></td>
        <td width="15%" height="17">4 bytes</font></td>
        <td width="47%" height="17">-2,147,483,648 to 2,147,483,647.</font></td>
        <td width="8%" height="17"><p align="center">&amp;</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="51">Single (single-precision
        floating-point)</font></td>
        <td width="15%" height="51">4 bytes</font></td>
        <td width="47%" height="51">-3.402823E38 to -1.401298E-45 for
        negative values; 1.401298E-45 to 3.402823E38 for positive
        values.</font></td>
        <td width="8%" height="51"><p align="center">!</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="86">Double (double-precision
        floating-point)</font></td>
        <td width="15%" height="86">8 bytes</font></td>
        <td width="47%" height="86">-1.79769313486232E308 to
        -4.94065645841247E-324 for negative values;
        4.94065645841247E-324 to 1.79769313486232E308 for
        positive values.</font></td>
        <td width="8%" height="86"><p align="center">#</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="34">Currency (scaled integer)</font></td>
        <td width="15%" height="34">8 bytes</font></td>
        <td width="47%" height="34">-922,337,203,685,477.5808 to
        922,337,203,685,477.5807.</font></td>
        <td width="8%" height="34"><p align="center">@</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="17">Date</font></td>
        <td width="15%" height="17">8 bytes</font></td>
        <td width="47%" height="17">January 1, 100 to December 31,
        9999.</font></td>
        <td width="8%" height="17"><p align="center">n/a</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="17">Object</font></td>
        <td width="15%" height="17">4 bytes</font></td>
        <td width="47%" height="17">Any Object reference.</font></td>
        <td width="8%" height="17"><p align="center">n/a</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="51">String</font></td>
        <td width="15%" height="51">1 byte per character</font></td>
        <td width="47%" height="51">0 to approximately 2 billion
        (approximately 65,535 for Microsoft Windows version 3.1
        and earlier).</font></td>
        <td width="8%" height="51"><p align="center">$</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="34">Variant</font></td>
        <td width="15%" height="34">16 bytes + 1 byte for each
        character</font></td>
        <td width="47%" height="34">Any numeric value up to the range
        of a Double or any character text.</font></td>
        <td width="8%" height="34"><p align="center">n/a</font></p>
        </td>
    </tr>
    <tr>
        <td width="31%" height="51">User-defined (using Type)</font></td>
        <td width="15%" height="51">Number required by elements</font></td>
        <td width="47%" height="51">The range of each element is the
        same as the range of its fundamental data type, listed
        above.</font></td>
        <td width="8%" height="51"><p align="center">n/a</font></p>
        </td>
    </tr>
</table>

<p>Besides
providing (in some cases) built-in error checking, assigning the
correct data type to a variable or constant also saves memory.
The storage size listed above is important because it
demonstrates how the programmer can save memory by assigning the
most appropriate data type to a variable or constant. For
example, if a declared variable is assigned the Double data type
(8 bytes) but will only actually store integer values (2 bytes),
the programmer wastes 6 bytes of storage space. This may not be
significant when there are only a few variables but can greatly
decrease performance if many variables are involved. </font></p>

<p>A variable or
constant that is not assigned a particular data type defaults to
the <i>variant</i> data type. The variant data type, while useful
because it can store virtually any type of data, can also
compound the problem described above by requiring 16 bytes of
storage space plus 1 byte for each character (when a string is
stored).</font></p>
  
        
            <p><b>Data
            Accessibility and Lifetime</b></font></p>
        
    


<p>The
accessibility or the <i>scope</i> of a variable or constant
defines how that variable is used by procedures in the
application. There are three levels of scope in Visual Basic for
Applications:</font></p>
  
        <p><b>Public</b>
        - Data declared as public in scope is directly available
        to all procedures within the same library.</font></p>
        <p><b>Module</b>
        - Data declared as module in scope is directly available
        only to procedures within the current module.</font></p>
        <p><b>Local</b>
        - Locally declared data is available only within the
        procedure where it is declared.</font></p>
    


<p>The <i>lifetime</i>
or the length of time that a variable or constant maintains its
value, is determined by the scope of the data. By default, data
that is declared with Public or Module level scope maintains its
value as long as Visual Basic is running. These variables will be
reset when the library is closed and reopened. They are also
reset if the changes are made to the library. You can manually
reset them by choosing Reset from the default Run menu. Locally
declared data maintain their values while the host procedure is
running.</font></p>
  
        <p><b>Declaring Data</b></font></p>
    


<p>Data
declarations in Visual Basic can be either <i>implicit </i>or<i>
explicit</i>. An implicit declaration can also be referred to as
an &quot;on-the-fly&quot; declaration because the programmer
declares the variable simply by assigning to it a value. For
example, the following code creates a variable called
&quot;X&quot; and assigns to it the value 100:</font></p>
  <p><b>X = 100</b></font></p>


<p>While this
method is quick and requires little prior thought or planning on
the part of the programmer, there are some reasons why this type
of declaration is not the preferred method:</font></p>
  <p>Implicitly
    declared data always uses the variant data type so regardless
    of the type of data stored there, 16+ bytes of memory are
    always allocated.</font></p>
    <p>Implicit
    variables are always local in scope and cannot be made
    available to other procedures. </font></p>


<p>Explicitly
declared data is defined at design time using one of the
following statements: <b>Dim</b>, <b>Public, Private, Static </b>or<b>
Const</b>. The statement used is determined by the desired scope
of the variable or constant. </font></p>

<p>To force Visual
Basic to always require explicitly declared variables, use the
&quot;Require Variable Declaration&quot; option in the Module
General panel of the Tools Options dialog. This places the
statement <b>Option Explicit</b> in the general declarations
section of each new module. With this option enabled, VB will
always perform a pre-runtime validity check each time the name is
used in the procedure, decreasing the chance that the programmer
will type the name incorrectly.</font></p>
  
        
            <p><b>Declaring
            Data that is Public</b></font></p>
        
    


<p>To define a
variable that is available to all procedures within the current
library, use the <b>Public</b> statement and place the
declaration in the General Declarations section of a module
sheet:</font></p>
  <p><b>Public
    VariableName {as Type}</b></font></p>


<p>It is not
possible to set the value of a variable in the same line that it
is declared. Also, the value of a variable cannot be defined in
the General Declarations section. It must be established within a
procedure.</font></p>

<p>To define a
public constant, use the <b>Public</b> and <b>Const</b>
statements in the General Declaration section:</font></p>
  <p><b>Public
    Const ConstantName {As type} = expression</b></font></p>


<p>Since the value
of a constant never changes, the value of the constant is part of
the declaration statement.</font></p>
  
        
            <p><b>Declaring
            Data that is Module in Scope</b></font></p>
        
    


<p>Variables that
are module in scope are available to all procedures that reside
in the module where the variable is declared. These are declared
in the General Declarations section using the <b>Dim</b> or <b>Private
</b>statements. Again, values must be assigned within a
procedure:</font></p>
  <p><b>Dim
    VariableName {as type}</b></font></p>


<p>or</font></p>
  <p><b>Private
    VariableName {as type}</b></font></p>


<p>Module level
constants use the <b>Private </b>statement and are located in the
General Declarations section:</font></p>
  <p><b>Private
    Const ConstantName {As type} = expression</b></font></p>
    
        
            <p><b>Declaring
            Local Data</b></font></p>
        
    


<p>Variables that
are local in scope are recognized only within the procedure where
they appear and are defined within the procedure using either the
<b>Dim</b> statement or a <b>Static</b> statements:</font></p>
  <p><b>Dim
    VariableName {as type}</b></font></p>


<p>or</font></p>
  <p><b>Static
    VariableName {as type}</b></font></p>


<p>The <b>Static</b>
statement causes a local variable, which normally loses its value
after the procedure finishes executing, to have a
&quot;permanent&quot; lifetime like that of a public or module
variable. The value of the local variable will be maintained
until the library is closed.</font></p>

<p>A constant may
also be defined locally, using the <b>Const</b> statement:</font></p>
  <p><b>Const
    ConstName {as type} = expression</b></font></p>
    
        <p><b>Using Declared
        Data</b></font></p>
    


<p>The following
code shows how the various data declarations might appear:</font></p>
  <p><b>' General
    Declarations Section</b></font></p>
    <p><b>Option
    Explicit</b></font></p>
    <p></font>&nbsp;</p>
    <p><b>Public
    Counter as Integer ' Public variable</b></font></p>
    <p><b>Dim State
    as String ' Private variable</b></font></p>
    <p><b>Public
    Const Workdays as Integer = 4 ' Public constant</b></font></p>
    <p><b>Private
    Const City as String = &quot;Seattle&quot; ' Private constant</b></font></p>
    <p><b>Sub
    MySub()</b></font></p>
    <p><b>Dim
    Birthday as Date ' Local variable</b></font></p>
    <p><b>Const
    StartDate as Date = #01/01/94# ' Local constant</b></font></p>
    <p><b>Counter =
    1</b></font></p>
    <p><b>State =
    &quot;Washington&quot;</b></font></p>
    <p><b>Birthday
    = #02/27/64#</b></font></p>
    <p><b>End Sub</b></font></p>
    <p><font color="#0000FF" size="3" face="MSIcons"><b><i></i></b></font><b><i>Try This: Using
    Declared Data</i></b></font></p>
    <ol>
<li>Assuming that <b>MySub</b> (code above) is located in Module1, what happens if the following procedure is executed from Module2? What willcorrect the problem? </font></li><br>
<br>
	<p><font color="#FF0000" size="1" face="Verdana"><b><i>The
    error &quot;Variable Not Defined&quot; appears - to correct
    the problem, change State to a public variable using Public
    in place of the Dim statement.</i></b></font></p>
	<p><b>Sub MySub2()</b></font></p>
	<p><b>Module1.MySub ' Runs the procedure MySub</b></font></p>
        <p><b>MsgBox State ' Displays </b></font></p>
        <p><b>End Sub</b></font></p>
<li>When a public or module level variable exists and
                a local variable with the same name is declared,
                which takes precedence? Run the code below for
                the: </font></li><br>
<br>
	<p><font color="#FF0000" size="1" face="Verdana"><b><i>Local
    takes precedence</i></b></font></p>
	<p><b>Sub
                MySub3()</b></font></p>
	<p><b>MySub
                ' Runs the procedure MySub</b></font></p>
	<p><b>Dim
                Counter As Integer ' Declares local variable
                Counter</b></font></p>
	<p><b>MsgBox
                &quot;MySub3 Counter = &quot; &amp; Str(Counter) </b></font></p>
	<p><b>'
                Shows value of Counter in MySub3</b></font></p>
	<p><b>MySub4
                ' Runs MySub4 (code on next page)</b></font></p>
	<p><b>End
                Sub</b></font></p>
	<p></p>
	<p><b>Sub
                MySub4()</b></font></p>
                <p><b>'
                Shows value of Counter in MySub4</b></font></p>
                <p><b>MsgBox
                &quot;MySub4 Counter = &quot; &amp; Str(Counter)</b></font></p>
                <p><b>End
                Sub</b></font></p>
</ol>
            
        
        <p><b>Arrays</b></font></p>
    


<p>Arrays are
another type of declared data, but instead of storing a single
value, arrays can store many values. By declaring data as an
array, it is possible to refer to a series of variables by the
same name and use an index to distinguish each one. To define an
array, follow the variable or constant name with a set of
parenthesis and the element range. The following declaration
creates a 5 by 100 array of integers:</font></p>
  <p><b>Dim
    MyArray(1 to 5, 1 to 100) as Integer</b></font></p>


<p>Once declared,
indexing can be used to refer to individual elements within the
array:</font></p>
  <p><b>Temp =
    MyArray(1, Counter) ' Assign the indexed value to the
    variable Temp</b></font></p>


<p>or,</font></p>
  <p><b>MyArray(1,
    Counter) = (SomeVariable*15)/.05 ' Assign a value to an
    element</b></font></p>
    <p><b>' in an
    array</b></font></p>


<p>Arrays in Visual
Basic use a zero base, by default, if a lower boundary is not
specified (e.g., &quot;100&quot;, instead of &quot;1 to
100&quot;):</font></p>
  <p><b>Dim
    MyArray(100) as Integer</b></font></p>


<p>The array will
actually contain 101 elements, with indexing starting with 0. VB
can be instructed to use a one base by placing the line <b>Option
Base 1</b> in the general declarations section of the module.
This may be prone to errors, however, if the code from the
procedure is copied to a module which does not use the Base 1
option.</font></p>
  
        
            <p><b>Arrays and
            Memory</b></font></p>
        
    


<p>Assigning the
proper data type to an array is even more important than with
regular variables and constants because the number of bytes used
is multiplied by the number of elements. The first example above
reserves 1,000 bytes of storage space (5 * 100 * 2), whereas the
same array declared as a variant:</font></p>
  <p><b>Dim
    MyArray(1 to 5, 1 to 100)</b></font></p>


<p>requires at
least 8,000 bytes (5 * 100 * 16).</font></p>

<p>The maximum size
of an array varies, based on the operating system used and how
much memory is available. Encountering this limit is unlikely,
but using arrays that exceed the amount of random-access memory
available on the system are slower because the data must be read
from and written to disk.</font></p>
  
        
            <p><b>Assigning
            Many Values to an Array</b></font></p>
        
    


<p>The <b>Array</b>
function is useful when assigning many values to an array.
Instead of using the following command to declare a 10 element
array and assign the letters &quot;A&quot; to &quot;J&quot;,</font></p>
  <p><b>Dim
    MyArray (1 to 10) as String</b></font></p>
    <p><b>MyArray(1)
    = &quot;A&quot;</b></font></p>
    <p><b>MyArray(2)
    = &quot;B&quot;</b></font></p>
    <p><b>MyArray(3)
    = &quot;C&quot;</b></font></p>
    <p><b>...</b></font></p>
    <p><b>MyArray(10)
    = &quot;J&quot;</b></font></p>


<p>declare the
array as a variant and then use the Array function to assign the
letters.</font></p>
  <p><b>Dim
    MyArray</b></font></p>
    <p><b>MyArray =
    Array(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;,
    &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;,
    &quot;H&quot;, &quot;I&quot;, &quot;J&quot;)</b></font></p>


<p>The downside to
this method is that there is no way to control the data type for
the array as it must use the variant data type. For very large
arrays this may pose memory problems. Also, unless the <b>Option
Base 1</b> statement is used, the array uses a zero base by
default. The <b>Array</b> function has other uses, which will be
discussed later in the course.</font></p>
  <p><b><i>Expressions</i></b></font></p>


<p>An expression is
a combination of keywords, operators, variables, and constants
that yield a string, number, date or object. Expressions can
perform a calculation, manipulate characters, or test data to
return the desired data type. A variety of functions and other
tools are available to use with expressions.</font></p>
  
        <p><b>Operators</b></font></p>
    


<p>Operators are
used in VB to perform calculations and comparisons within
expressions. Below are definitions for some of the operators used
in VB. Other operators not listed include: And, Or, -, *, and
&amp;</font></p>

<table border="1" cellpadding="7" width="528">
    <tr>
        <td width="17%">
            <p><b>\</b></font></p>
        
        </td>
        <td width="83%">Divides 2 numbers and returns an integer
        as the result (&quot;/&quot; returns a floating point
        number).</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>+</b></font></p>
        
        </td>
        <td width="83%">Adds 2 numbers or used like the ampersand
        (&amp;) to concatenate text strings.</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>Is</b></font></p>
        
        </td>
        <td width="83%">Compares two object reference variables.
        If they are the same, returns the value True.</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>Like</b></font></p>
        
        </td>
        <td width="83%">Compares two strings and returns True if
        they are the same. Performs pattern matching when
        wildcard characters are used.</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>Eqv</b></font></p>
        
        </td>
        <td width="83%">Compares two expressions. If both are True
        or both are False, returns the value True.</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>Imp</b></font></p>
        
        </td>
        <td width="83%">Performs a logical implication on two
        expressions. (&quot;It is true that if Exp1 is true, then
        Exp2 is also true&quot;).</font></td>
    </tr>
    <tr>
        <td width="17%">
            <p><b>Xor</b></font></p>
        
        </td>
        <td width="83%">Compares two expressions and returns True
        if one and only one expression is True. When both are
        True or both are False, it returns False.</font></td>
    </tr>
</table>
  
        <p><b>Converting
        Data Types</b></font></p>
    


<p>It is sometimes
necessary to change the data type of an expression before
assigning it to a variable or using it to set an argument. For
example, the following variable X is defined as a string.
However, when the value 10000 is assigned to the variable, the
error &quot;Type Mismatch&quot; appears:</font></p>
  <p><b>Dim X as
    String</b></font></p>
    <p><b>X = 10000</b></font></p>


<p>The problem can
be corrected by converting the value 10000 to a text string using
one of the conversion functions: </font></p>
  <p><b>X =
    Str(10000)</b></font></p>


<p>or</font></p>
  <p><b>X =
    CStr(10000)</b></font></p>


<p>Other conversion
functions include:</font></p>

<table border="1" cellpadding="7" width="520">
    <tr>
        <td width="37%">
            <p>Int(numericexpression)</font></p>
        
        </td>
        <td width="63%">Converts numeric expression to Integer</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>Chr(code)</font></p>
        
        </td>
        <td width="63%">Converts the ASCII code arguments to a
        one-character string. Often used to add a carriage return
        and line feed.</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>Val(stringexpression)</font></p>
        
        </td>
        <td width="63%">Returns the value of expression (converts
        strings to number format)</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>Str(numericexpression)</font></p>
        
        </td>
        <td width="63%">Returns a string representation of the
        numeric expression.</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>Format(expression[
            ,fmt])</font></p>
        
        </td>
        <td width="63%">Converts a number to a string and formats
        it according to fmt.</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CBool</font></p>
        
        </td>
        <td width="63%">Converts expression to Boolean</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CCur</font></p>
        
        </td>
        <td width="63%">Converts expression to Currency</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CDate</font></p>
        
        </td>
        <td width="63%">Converts expression to Date</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CDbl</font></p>
        
        </td>
        <td width="63%">Converts expression to Double</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CInt</font></p>
        
        </td>
        <td width="63%">Converts expression to Integer</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CLng</font></p>
        
        </td>
        <td width="63%">Converts expression to Long</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CSng</font></p>
        
        </td>
        <td width="63%">Converts expression to Single</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CStr</font></p>
        
        </td>
        <td width="63%">Converts expression to String</font></td>
    </tr>
    <tr>
        <td width="37%">
            <p>CVar</font></p>
        
        </td>
        <td width="63%">Converts expression to Variant</font></td>
    </tr>
</table>

<p></font>&nbsp;</p>
  <p><b>Dim x as
    Integer : x=30000</b></font></p>
    <p><b>x = x * 2</b></font></p>


<p><i>Will generate
an error since the </i>Integer<i> data type has an upper limit of
32,767.</i></font></p>
  
        <p><b>Using
        Functions</b></font></p>
    


<p>Visual Basic has
a host of functions available for a variety of uses:</font></p>
  
        <ul>
            <li>Text
                string manipulation</font></li>
            <li>Date
                and time</font></li>
            <li>File
                system</font></li>
            <li>Interaction</font></li>
            <li>Math</font></li>
        </ul>
    
    <p><font color="#0000FF" size="3" face="MSIcons"><b><i></i></b></font><font
    color="#000000" size="4" face="Verdana"><b> </b></font><b><i>Try This:
    Working with Expressions and Functions</i></b></font></p>
    
        <ul>
            <li>Choose
                the View Object Browser command (with a module
                sheet active). Select &quot;VBA&quot; under
                Libraries/Workbooks. Write down the names of 3
                functions within each of these categories:</font></li>
            <li>File
                System</font></li>
            <li>Information</font></li>
            <li>Strings</font></li>
        </ul>
        <p><b>Working with
        Arguments </b></font></p>
    


<p>When working
with functions (and <i>methods</i>, discussed in Module 2), there
are several different ways to enter arguments.</font></p>

<p>The first way is
very similar to using functions in Excel, where arguments are
entered with a comma separating each one. Assuming the <b>InputBox</b>
function:</font></p>
  <p><b>InputBox
    prompt[,title][,default][,xpos][,ypos][,helpfile,context]</b></font></p>


<p>Some arguments
are required and others are optional (shown in square brackets).
Optional arguments can be left blank with a comma serving as the
place holder. For example, the <b>InputBox</b> function with the <i>prompt</i>
and <i>default</i> arguments appear as follows:</font></p>
  <p><b>InputBox
    &quot;Enter file name&quot;,,&quot;?.MPP&quot;</b></font></p>


<p>While this
method is quick, it is not always obvious what the arguments
represent. Another method is to use <i>named arguments</i>. Every
function has a set of argument names and these can be used
directly within the function. The same command above using named
arguments looks like this:</font></p>
  <p><b>InputBox
    prompt:=&quot;Enter file name&quot;,
    default:=&quot;?.MPP&quot;</b></font></p>


<p>Note that the
argument name is followed by &quot;<b>:=</b>&quot; and, since the
name identifies the argument, the extra commas are removed
because the relative position of the argument is no longer
important.</font></p>

<p>A quick way to
enter the named arguments for a function is to find the function
in the Object Browser and use the Paste button.</font></p>

<p>If the function
returns a value and the value is to be used in an expression or
assigned to a variable, parenthesis must be placed around the
arguments. Otherwise the parenthesis may be left off. To return
the result of the input box to the variable myFile, the code
would be:</font></p>

<p>myFile =
Application.InputBox(prompt:=&quot;Enter file name&quot;,
default:=&quot;?.MPP&quot;)</font></p>
  <p><b><i>Text
    String Manipulation</i></b></font></p>


<p>VB includes
several functions for manipulating text strings. These include:
Instr, Left, Ltrim, Mid, Right, Rtrim, and Trim.</font></p>
  
        <p><b>Instr()</b></font></p>
    


<p>This function
returns the position of the first occurrence of one string within
another.</font></p>
  <p><b>SearchString
    = &quot;XXpXXpXXPXXP&quot;</b></font></p>
    <p><b>SearchChar
    = &quot;P&quot;</b></font></p>
    <p><b>MyPos =
    Instr(4,SearchString, SearchChar,1) &#145;Returns 6</b></font></p>
    
        <p><b>Left()</b></font></p>
    


<p>This function
returns the specified number of characters from the left side of
a string.</font></p>
  <p><b>AnyString
    = &quot;Hello World&quot;</b></font></p>
    <p><b>MyStr =
    Left(AnyString,1) &#145;Returns &quot;H&quot;</b></font></p>
    
        <p><b>Mid()</b></font></p>
    


<p>This function
returns the specified number of characters from a string.</font></p>
  <p><b>MyString
    = &quot;Mid Function Demo&quot;</b></font></p>
    <p><b>FirstWord
    = &quot;Mid(MyString,1,3) Returns &quot;Mid&quot;</b></font></p>
    <p><b>LastWord
    = &quot;Mid(MyString,14,4) Returns &quot;Demo&quot;</b></font></p>
    <p><b>MidWords
    = Mid(MyString,5) Returns &quot;Function Demo&quot;</b></font></p>
    
        <p><b>Right()</b></font></p>
    


<p>Returns the
specified number of characters from the right side of a string.</font></p>
  <p><b>AnyString
    = &quot;Hello World&quot;</b></font></p>
    <p><b>MyStr =
    Right(AnyString,1) Returns &quot;d&quot;</b></font></p>
    <p><b>MyStr =
    Right(AnyString,6) Returns &quot; World&quot;</b></font></p>
    <p><b><i>Controlling
    User Input</i></b></font></p>


<p>Two functions
and one method are provided to control user input for VB modules
Microsoft Project: the MsgBox function, the InputBox function,
and the Message method.</font></p>
  
        <p><b>InputBox
        Function</b></font></p>
    


<p>This function
displays a dialog box that waits for the user to input text or
choose a button and then returns the contents of the text box.</font></p>
  <p><b>Message =
    &quot;Enter a value between 1 and 3&quot; ' Set prompt.</b></font></p>
    <p><b>Title =
    &quot;InputBox Demo&quot; ' Set title.</b></font></p>
    <p><b>Default =
    &quot;1&quot; ' Set default.</b></font></p>
    <p><b>' Display
    message, title, and default value.</b></font></p>
    <p><b>MyValue =
    InputBox(Message, Title, Default)</b></font></p>
    <p></font>&nbsp;</p>
    <p><b>' Use
    helpfile and context. The help button is added automatically.</b></font></p>
    <p><b>MyValue =
    InputBox(Message, Title, , , , &quot;DEMO.HLP&quot;, 10)</b></font></p>
    <p></font>&nbsp;</p>
    <p><b>' Display
    dialog at position 100,100</b></font></p>
    <p><b>MyValue =
    InputBox(Message, Title, Default, 100, 100)</b></font></p>
    
        <p><b>MsgBox
        Function</b></font></p>
    


<p>This function
displays a message dialog box to the user and waits for the user
to choose a button. It then returns a value indicating which
button the user chose.</font></p>
  <p><b>Msg =
    &quot;Do you want to continue ?&quot; ' Define message.</b></font></p>
    <p><b>Style =
    vbYesNo + vbCritical + vbDefaultButton2 ' Define buttons.</b></font></p>
    <p><b>Title =
    &quot;MsgBox Demonstration&quot; ' Define title.</b></font></p>
    <p><b>Help =
    &quot;DEMO.HLP&quot; ' Define help file.</b></font></p>
    <p><b>Ctxt =
    1000 ' Define topic </b></font></p>
    <p><b>'
    context. </b></font></p>
    <p><b>' Display
    message.</b></font></p>
    <p><b>Response
    = MsgBox(Msg, Style, Title, Help, Ctxt)</b></font></p>
    <p><b>If
    Response = vbYES Then ' User chose Yes </b></font></p>
    <p><b>' button.</b></font></p>
    <p><b>MyString
    = &quot;Yes&quot; ' Perform some action.</b></font></p>
    <p><b>Else '
    User chose No </b></font></p>
    <p><b>' button.</b></font></p>
    <p><b>MyString
    = &quot;No&quot; ' Perform some action.</b></font></p>
    <p><b>End If</b></font></p>
    
        <p><b>Message Method</b></font></p>
    


<p>The message
method is a hold over from the Project 3.0 macro language. It
offers one significant advantage over the MsgBox function. It
allows you to specify the text that appears on the yes and no
buttons.</font></p>
  <p><b>Application.Message
    message:=&quot;Is this OK?&quot;, type:=pjYesNo, _</b></font></p>
    <p><b>yesText:=&quot;You
    bet&quot;, noText:=&quot;No way&quot;</b></font></p>


<p><a name="_Toc307792508"><font color="#000000" size="6"
face="Verdana"><b><i>Lesson 2 Exercises</i></b></font></a></p>
<ol>
  <li>You need
    to store an integer value for use in your application. It
    must be available to all the procedures in Module1 and its
    value is determined by some condition that occurs when a
    certain procedure is executed. Once the value is established,
    it will not change. Should you use a variable or a constant?
    Why? How might this appear in your module sheet?</font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>A
    variable should be used. It will be declared in the General
    Declarations section using either the Private or Dim
    statement. The value will be set in the procedure where the
    condition is tested. While the value does not change, it is
    not possible to declare a constant without assigning it a
    value and once it is declared, it cannot be modified.</li><br>
    <br>
    Dim VariableName as Integer<br>
    <br>
    Sub Sample()<br>
    VariableName = expression<br>
    End Sub</i></b></font></p>
    <li>I have a
    procedure written in Visual Basic for Applications and it
    runs very slowly. All it does is assign values to several
    public arrays. What might be the problem?</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>The
    customer may not be using the appropriate data type for the
    arrays. For example, the values may be integers but the
    arrays are declared using the variant data type. This can
    significantly slow execution if very large arrays (or many
    variables) are involved.</i></b></font></p>
    <li>Write
    code which accepts a number from the user, multiplies the
    number by 100 and displays the result in a message box.</font></li><br>
<br>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Sub
    Sample()<br>
    MsgBox Val(InputBox(&quot;Enter number&quot;)) * 100<br>
    End Sub</i></b></font></p>
    <li>Create a
    macro that runs whenever the file is opened that displays a
    message box stating the current date and time.</font></li><br>
	<br>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Sub
    Auto_Open()</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>MsgBox
    Now()</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>End
    Sub</i></b></font></p>
    <li>Input a
    procedure that prompts the user to enter 5 words separated by
    spaces, remove the last two words, clear off any extra spaces
    on the end and front of the string, and then display the
    following information on separate lines in a message box:</li><br>
	<br>
    --The first word<br>
    --The middle word<br>
    --The last word</font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Sub
    StringFun()</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Dim
    daString As String</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Dim
    vFirstWord, vMiddleWord, vLastWord As String</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Dim
    v3rdSpace, vSpacePos1, vSpacePos2 As Integer</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>daString
    = InputBox(&quot;Enter 5 words separated by spaces&quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>'Finds
    position of 3rd space and deletes everything to the right</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>v3rdSpace
    = InStr(InStr(InStr(1, daString, &quot; &quot;) + 1, _</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>daString,
    &quot; &quot;) + 1, daString, &quot; &quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>daString
    = Trim(Left(daString, v3rdSpace - 1))</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>'Determines
    positions of the two spaces between the three words</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vSpacePos1
    = InStr(1, daString, &quot; &quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vSpacePos2
    = InStr(vSpacePos1 + 1, daString, &quot; &quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>'Pulls
    out words</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vFirstWord
    = Left(daString, vSpacePos1 - 1)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vLastWord
    = Right(daString, Len(daString) - vSpacePos2)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vMiddleWord
    = Mid(daString, vSpacePos1 + 1, _</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>vSpacePos2
    - vSpacePos1 - 1)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>'Concatenates
    message with linefeeds</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>MsgBox
    vFirstWord &amp; Chr(10) &amp; vMiddleWord &amp; Chr(10)
    &amp; vLastWord</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>End
    Sub</i></b></font></p></ol>

</FONT></BODY>
</html>

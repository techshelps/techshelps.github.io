<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 3: OLE Automation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 3: OLE Automation</font></H1>
  <p><b>Lesson
    Objectives</b></font></p>
    
        
            <p>Upon
            completion of this lesson, the participant will be
            able to:</font></p>
        
    
    <ul>
        <li>Describe
            the degree of OLE Automation support provided in
            Excel, Project, Word, and VB3.</font></li>
        <li>Describe
            the general forms of GetObject and CreateObject
            possible with Excel, Project, and Word objects.</font></li>
        <li>Describe
            and demonstrate how to use GetObject(,<i>class</i>)
            where class is &quot;Excel.Application&quot; or
            &quot;MSProject.Application&quot;.</font></li>
        <li>Describe
            and demonstrate how to use CreateObject(class) where
            class is &quot;Excel.Application&quot;,
            &quot;MSProject.Application&quot;, or
            &quot;Word.Basic&quot;.</font></li>
        <li>Describe
            how Application Object Libraries can be used and what
            application currently have them.</font></li>
        <li>Define
            Invisible and Reference-Dependence Applications and
            Documents.</font></li>
        <li>Describe
            the Visible property and ways that an application can
            run invisibly</font></li>
    </ul>
    <p><b>Some Topics to be
    introduced in this lesson include:</b></font></p>
    
        
            <ul>
                <li>CreateObject</font></li>
                <li>GetObject</font></li>
                <li>Application
                    Object Libraries</font></li>
                <li>Invisible
                    Applications and Documents</font></li>
                <li>Reference-Dependent
                    Applications and Documents</font></li>
            </ul>
        
    


<p><b><i>OLE
Automation</i></b></font></p>
  <p>OLE
    Automation is the process by which a source application uses
    object variables or references to control a target
    application, or documents or other objects supported by the
    target application. You start by setting an object variable
    to the target application or some object that the target
    application supports, using <b>CreateObject</b>, <b>GetObject</b>,
    or you establish a reference to the target application's <b>Application
    Object Library </b>(if it has one). Then the object variable
    in the source macro can use the methods and properties of the
    corresponding object in the target application.</font></p>
    <p>An
    application can also use CreateObject and GetObject to refer
    to itself or one of its subordinate objects. For example the
    following is both a legal Excel macro and a legal MSProject
    macro:</font></p>
    
        <p><b>Sub
        Macro1( )</b></font></p>
        <p><b>Dim s
        As Object</b></font></p>
        <p><b>Set s
        = CreateObject(&quot;Excel.Sheet&quot;)</b></font></p>
        <p><b>s.Cells(1,
        3).Value = &quot;abc&quot;</b></font></p>
        <p><b>s.SaveAs
        &quot;d:\excel5\class\create2.xls&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>Note
            that an application cannot initiate a DDE
            conversation with itself - see the section on DDE.
            For example, the following statement is illegal in an
            MSProject macro:</font></p>
        
        <p><b>DDEInitiate
        &quot;Winproj&quot;, &quot;System&quot;</b></font></p>
    
    <p><b><i>OLE
    Automation Support</i></b></font></p>
    
        
            <p>Here's
            the degree to which Excel, MSProject, Word, and VB3
            support OLE Automation:</font></p>
        
        <p><b>Excel and
        MSProject</b></font></p>
        
            <p>Excel
            5.0 and MSProject 4.0 macros can use all three
            techniques: CreateObject, GetObject, or establishing
            a reference to another application's Application
            Object Library.</font></p>
        
        <p><b>Word</b></font></p>
        
            <p>Word
            6.0 macros cannot use OLE Automation to control other
            applications, but other applications can use OLE
            Automation to control it. When other applications use
            an object variable to control Word, they cannot use
            the Word named arguments. Word commands can be used
            by listing the values of arguments without argument
            names, but you can't skip arguments with consecutive
            commas (or whatever the list separator is). For
            example, here's the syntax for the Word Basic command
            FileOpen, with the first three arguments:</font></p>
        
        <p><b>FileOpen
        .Name = text [,.ConfirmConversions = number] [,.ReadOnly
        = number] </b></font></p>
        
            <p>Both
            of the following Word lines open the specified file
            as read only:</font></p>
        
        <p><b>FileOpen
        .Name = &quot;c:\word6\t1.doc&quot;, .ReadOnly = 1</b></font></p>
        <p><b>FileOpen
        &quot;c:\word6\test1.doc&quot;, 0, 1</b></font></p>
        
            <p>The
            second line above has a dummy 0 for the value of the
            ConfirmConversions argument - you can't skip it when
            you don't use the argument names.</font></p>
            <p>The
            MSProject macro below tells Word Basic to do the same
            thing as the above. Word does not have to open when
            the macro runs. If Word is not open before the
            MSProject macro runs, then Word will automatically
            close when the MSProject macro ends, because w is a
            local variable.</font></p>
        
        <p><b>Sub
        Sub1()</b></font></p>
        <p><b>Dim w
        As Object</b></font></p>
        <p><b>Set w
        = CreateObject(&quot;Word.Basic&quot;)</b></font></p>
        <p><b>w.FileOpen
        &quot;c:\word6\t1.doc&quot;, 0, 1</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>DDE
            actually shines here - you can use the argument names
            if you use DDEExecute. Word must be open before the
            MSProject macro below runs.</font></p>
        
        <p><b>Sub
        Sub1()</b></font></p>
        <p><b>DDEInitiate
        &quot;WinWord&quot;, &quot;system&quot;</b></font></p>
        <p><b>DDEExecute
        &quot;[FileOpen .Name =
        &quot;&quot;c:\word6\t1.doc&quot;&quot;, .ReadOnly =
        1]&quot;</b></font></p>
        <p><b>DDETerminate</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>One
            last warning about using Word Basic commands without
            argument names - there are a few problems with some
            commands. For example, the EditFind command requires
            a bogus dummy string argument between its first and
            second argument if you don't use argument names:</font></p>
        
        <p><b>EditFind
        .Find = &quot;wow&quot;, .Direction = 0 'OK</b></font></p>
        <p><b>EditFind
        &quot;wow&quot;, 0 'Doesn't work, but should</b></font></p>
        <p><b>EditFind
        &quot;wow&quot;, &quot; &quot;, 0 'Does work, but
        shouldn't</b></font></p>
        <p><b>Visual Basic</b></font></p>
        
            <p>Visual
            Basic 3.0 procedures can use OLE Automation to
            control other applications, but another application
            cannot use OLE Automation to control VB3 objects. For
            example an MSProject macro can't set an object
            variable to manipulate a text box in a VB3 form. VB3
            has some other limitations: </font></p>
        
        <p>VB3
        cannot make references to Application Object Libraries.</font></p>
        <p>VB3
        procedures can't use some of the block structures
        available in Visual Basic for Applications, such as the
        &quot;For Each&quot; loop and the &quot;With&quot; block.</font></p>
        <p>VB3
        procedures cannot used named argument, but must instead
        list the argument values in order. MSProject behaves
        inconsistently regarding skipping arguments by using
        consecutive commas (assuming the list separator is a
        comma). Skipping arguments by using consecutive commas
        causes an &quot;Argument value not valid&quot; error for
        some methods/functions in MSProject macros. Even in cases
        where it's OK in an MSProject macro, the same statement
        may cause the error when run from a VB3 procedure. </font></p>
        
            <p>The
            following table of syntax examples assumes the object
            variable x refers to MSProject:</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="462"
bordercolor="#000000">
    <tr>
        <td width="69%" bgcolor="#FFFFFF">Statement</font></td>
        <td width="18%" bgcolor="#FFFFFF"><p align="center">MSProject</font></p>
        </td>
        <td width="13%" bgcolor="#FFFFFF"><p align="center">VB3</font></p>
        </td>
    </tr>
    <tr>
        <td width="69%"><b>x.FileOpen Name:=&quot;P1.mpp&quot;</b></font></td>
        <td width="18%"><p align="center">Yes</font></p>
        </td>
        <td width="13%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
    </tr>
    <tr>
        <td width="69%"><b>x.FileOpen &quot;P1.mpp&quot;</b></font></td>
        <td width="18%"><p align="center">Yes</font></p>
        </td>
        <td width="13%"><p align="center">Yes</font></p>
        </td>
    </tr>
    <tr>
        <td width="69%"><b>x.SelectCell 3, , False</b></font></td>
        <td width="18%"><p align="center">Yes</font></p>
        </td>
        <td width="13%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
    </tr>
    <tr>
        <td width="69%"><b>x.SelectCell 3, 4, False</b></font></td>
        <td width="18%"><p align="center">Yes</font></p>
        </td>
        <td width="13%"><p align="center">Yes</font></p>
        </td>
    </tr>
    <tr>
        <td width="69%"><b>x.FilePageSetupFooter &quot;task
        sheet&quot;, _</b></font><p><b>&quot;left footer&quot;, ,
        &quot;right footer&quot;</b></font></p>
        </td>
        <td width="18%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
        <td width="13%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
    </tr>
    <tr>
        <td width="69%"><b>x.FilePageSetupFooter &quot;task
        sheet&quot;, _</b></font><p><b>&quot;left footer&quot;,
        &quot;&quot;, &quot;right footer&quot;</b></font></p>
        </td>
        <td width="18%"><p align="center">Yes</font></p>
        </td>
        <td width="13%"><p align="center">Yes</font></p>
        </td>
    </tr>
</table>
</center></div>
  <p><b><i>Some
    Terminology</i></b></font></p>
    
        
            <p>Here's
            some terminology that will be used in the OLE
            Automation examples. These terms will become clearer
            in the examples, and are discussed in greater detail
            in the &quot;Invisible Objects and Object
            Lifetime&quot; topic.</font></p>
            <p><b>Invisible
            Application</b>: An application that is running but
            doesn't show in the Windows Task List. An application
            can be made visible by setting its Visible property
            to True if it has one. In this context,
            &quot;visible&quot; means &quot;in the Windows Task
            List&quot;, not necessarily physically visible.</font></p>
            <p><b>Invisible
            Document</b>: A document in an invisible application,
            or a document in a visible application, but the
            document can't be seen and doesn't appear in the list
            of open windows. An invisible document can be
            &quot;more hidden&quot; than a &quot;hidden&quot;
            document. As you'll see later, an MSProject invisible
            project might not show up in the Window Unhide list,
            but will show in the Window New Window list.</font></p>
            <p><b>Reference-Dependent
            Object</b>: An open object that exists only as long
            as it or one of its subordinate objects is being
            referenced.</font></p>
            <p>As
            you'll see later, some objects can be toggled between
            invisible and visible. Also, some actions can cause a
            reference-dependent object to become
            reference-independent.</font></p>
            <p>Here's
            some things that can cause an object variable to stop
            pointing to an object:</font></p>
            
                <p>The
                object variable was set to some other object</font></p>
                <p>The
                object variable was set to Nothing, for example
                Set x = Nothing</font></p>
                <p>The
                object variable was a local variable and the
                macro has ended</font></p>
                <p>The
                END macro command was executed (not by choosing
                the menu command Run End)</font></p>
                <p>The
                menu command Run, Reset was used</font></p>
            
            <p>Note:
            The last two items apply to clearing the value of any
            variable.</font></p>
            <p>As
            you experiment with CreateObject and GetObject, you
            may end up running invisible copies of applications.
            The following macros can be used to make MSProject
            and Excel visible. The way GetObject is used in these
            macros requires that MSProject and Excel already be
            running (visible or not). The On Error Resume Next
            statements prevent error messages if they are not
            running. The GetObject function is discussed in
            detail later in this lesson. There are also API calls
            that can be used to make applications visible - see
            Lesson 8.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                <p>(A)
                The Excel macro below makes MSProject visible and
                active if it is running (and not busy).</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">1. Get into Excel and create
                    an new module called OLE (From the Insert
                    menu, choose Macro, and then Module).</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Enter the following macro:</font></p>
                
                <p><b>Sub
                ShowMSProject()</b></font></p>
                <p><b>Dim
                oMSP As Object</b></font></p>
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>Set
                oMSP = GetObject(,
                &quot;MSProject.Application&quot;)</b></font></p>
                <p><b>If
                Err &gt; 0 Then</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is busy or not running.&quot;</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>oMSP.Visible
                = True</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Save the workbook.</font></p>
                <p>4.
                Start MSProject, switch to Excel and run the
                ShowMSProject macro. MSProject should become
                active. As you'll see later, this macro can make
                MSProject active even if it were originally
                invisible.</font></p>
            
            <p>(B)
            The MSProject macro below makes the youngest instance
            of Excel visible and active if it is already running
            (and not busy).</font></p>
            
                <p>1.
                Get into MSProject and create an new module
                called OLE.</font></p>
                <p>2.
                Enter the following macro:</font></p>
                <p><b>Sub
                ShowExcel()</b></font></p>
                <p><b>Dim
                oXL As Object</b></font></p>
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>Set
                oXL = GetObject(, &quot;Excel.Application&quot;)</b></font></p>
                <p><b>If
                Err &gt; 0 Then</b></font></p>
                <p><b>MsgBox
                &quot;Excel is busy or not running.&quot;</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>oXL.Visible
                = True</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Excel&quot;</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Start a new instance of Excel, switch to
                MSProject and run the ShowExcel macro. The
                instance of Excel should become active. As you'll
                see later, this macro can make the youngest
                instance of Excel active even if it were
                originally invisible.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <p><b>CreateObject</b><b><i>
    </i></b><i>(class)</i></font></p>
    
        
            <p>Returns
            a reference to an object determined by the class
            argument. Depending on class, the reference may be to
            an existing object or to a newly created object. The
            object reference returned by CreateObject is usually
            assigned to an object variable.</font></p>
            <p><i><u>Class</u></i></font></p>
            <p>A
            string of the form &quot;appName.objectType&quot;.
            Here are some of the values available for MSProject,
            Excel, and Word:</font></p>
            
                <ul>
                    <li>appName objectType</font></li>
                    <li>MSProject Application
                        (Online Help left this out.)</font></li>
                    <li>MSProject Project</font></li>
                    <li>Excel Application</font></li>
                    <li>Excel Sheet</font></li>
                    <li>Excel Chart</font></li>
                    <li>Word Basic</font></li>
                </ul>
            
            <p>Note
            that Word doesn't have a Word.Application object.
            However, the Word.Basic object is like an application
            object. If Word is started as a result of
            CreateObject or GetObject then when the object
            variable ceases to exist, Word automatically closes
            all documents and the Word application without
            warnings.</font></p>
            <p>Many
            of the following examples use x as the object
            variable, but any legal object variable name could be
            used.</font></p>
        
        <p><b>Using
        CreateObject With MSProject Objects</b></font></p>
        <p><b>Set x
        = CreateObject(&quot;MSProject.Application&quot;)</b></font></p>
        
            <p>Refers
            to an existing instance if MSProject is running,
            otherwise it starts an invisible reference-dependent
            instance with no open projects. Does not activate
            MSProject. The x refers to MSProject.Application.</font></p>
            <p>Note
            that a reference-dependent instance of MSProject
            becomes reference-independent if you open any
            projects with methods like FileNew or FileOpen.</font></p>
            <p>Global.mpt
            Concerns: Project looks in the current directory and
            in the winproj.exe directory for Global.mpt, not in
            the working directory. If can't find, it creates one
            in the executable directory without warning.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">(A) The Excel macro below
                    starts MSProject, and makes it visible:</font></p>
                    
                        <p>1. Make sure MSProject is
                        not running.</font></p>
                    
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Enter the following macro
                    in Excel and run it.</font></p>
                
                <p><b>Dim
                x As Object 'In the declaration area.</b></font></p>
                <p></p>
                <p><b>Sub
                Sub1a()</b></font></p>
                <p><b>Set
                x =
                CreateObject(&quot;MSProject.Application&quot;)</b></font></p>
                <p><b>x.Visible
                = True</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">3. Switch to MSProject. You
                    should see no open projects.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">4. Switch back to the Excel
                    macro and from the Run menu, choose Reset.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">5. Check the Windows Task
                    List. MSProject should not be listed. Is it
                    running invisibly or just not running at all?
                    Did the macro start a reference-dependent or
                    reference-independent instance of MSProject.</font></p>
                
                <p>(B)
                The Excel macro below starts MSProject invisibly,
                creates a new project, and adds a new task to it.</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">1. Make sure MSProject is not
                    running.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Enter the following macro
                    in Excel and run it.</font></p>
                
                <p><b>Sub
                Sub1b()</b></font></p>
                <p><b>Dim
                x As Object</b></font></p>
                <p><b>Set
                x =
                CreateObject(&quot;MSProject.Application&quot;)</b></font></p>
                <p><b>x.FileNew</b></font></p>
                <p><b>x.ActiveProject.Tasks.Add
                Name:=&quot;wow&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Check the Windows Task List. Microsoft Project
                should not be in the list.</font></p>
                <p>4.
                Start MSProject manually in Program Manager. The
                new project and task created by the macro should
                be there. Is this instance of MSProject
                reference-dependent?</font></p>
                <p>5.
                Close MSProject and don't save changes to the new
                project.</font></p>
                <p>6.
                Change the macro so that x is declared as a
                module-level variable, i.e. move the Dim
                statement to the declaration area of the Excel
                module. Also, add the line x.Visible=True before
                the line x.FileNew.</font></p>
                <p>7.
                Run the macro again.</font></p>
                <p>8.
                Try to close MSProject - you should get a warning
                that MSProject is being used by another
                application. Cancel the message. Why didn't this
                message come up the first time you ran the macro?</font></p>
                <p>9.
                Switch back to the Excel macro and from the Run
                menu, choose Reset.</font></p>
                <p>10.
                Switch to MSProject and close it. Why no message
                this time?</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Set x
        = CreateObject(&quot;MSProject.Project&quot;)</b></font></p>
        
            <p>Starts
            an invisible reference-dependent instance of
            MSProject, if it's not running. It then creates a new
            invisible project. The x refers to the new project,
            and x.Parent refers to MSProject.Application. The new
            project is reference-dependent, unless the command
            executed as an MSProject command.</font></p>
            <p>If
            MSProject is running visibly, then the name of the
            invisible project isn't listed in the Window menu's
            open project list or in the Window Unhide list, but
            is listed in the Window New Window list. You can use
            Window New Window to make the invisible project
            become visible.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The MSProject macro below
                    creates two new invisible projects and
                    displays the names of all the
                    &quot;open&quot; projects.</font></p>
                    
                        <p>1. Enter the following
                        macro in MSProject and run it.</font></p>
                    
                
                <p><b>Sub
                Sub2a()</b></font></p>
                <p><b>Dim
                p As Object, p1 As Object, p2 As Object</b></font></p>
                <p><b>Set
                p1 = CreateObject(&quot;MSProject.Project&quot;)</b></font></p>
                <p><b>Set
                p2 = CreateObject(&quot;MSProject.Project&quot;)</b></font></p>
                <p><b>For
                Each p In Projects</b></font></p>
                <p><b>MsgBox
                p.Name</b></font></p>
                <p><b>Next</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>2.
                After the macro ends, check the MSProject Window
                menu, and you can see that the two new projects
                are not listed as open or hidden. Use Window New
                Window to make the projects visible, and then
                close them. Were these two new projects
                reference-dependent?</font></p>
                <p>3.
                Paste the above macro into an Excel module.
                Replace the word &quot;Projects&quot; in the
                &quot;For Each ...&quot; line to
                &quot;p1.Parent.Projects&quot; (without the
                quotes). Note that p1.Parent refers to MSProject.</font></p>
                <p>4.
                Run the macro. Switch to MSProject. Verify that
                the two new projects are not in the Window New
                Window list. Do you think the two projects are
                invisible or just not open at all? Were the two
                created projects reference-dependent?</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Using
        CreateObject With Excel Objects</b></font></p>
        <p><b>Set x
        = CreateObject(&quot;Excel.Application&quot;)</b></font></p>
        
            <p>Always
            starts a new invisible reference-independent instance
            of Excel. The x refers to the Excel.Application
            object of the new instance.</font></p>
        
        <p><b>Set x
        = CreateObject(&quot;Excel.Sheet&quot;)</b></font></p>
        
            <p>Starts
            an invisible reference-dependent instance of Excel if
            it's not running, otherwise it uses the *youngest
            instance. It creates a new worksheet
            &quot;Sheet1&quot; in a new reference-dependent
            workbook called &quot;Object&quot; (or &quot;Object
            2&quot; etc.). The x refers to Sheet1, x.Parent to
            the workbook, and x.Parent.Parent to
            Excel.Application. If Excel is visible, then the new
            workbook is visible, and Excel is
            reference-independent.</font></p>
            <p>*If
            there are existing instances, youngest means the one
            that was started last.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The MSProject macro below
                    creates two new workbooks, and puts the time
                    in cell A1 of Sheet1 of each workbook.</font></p>
                    
                        <p>1. Make sure Excel is not
                        running.</font></p>
                        <p>2. Enter the following
                        macro in MSProject and run it.</font></p>
                    
                
                <p><b>Dim
                s1 As Object, s2 As Object 'In the declarations
                area.</b></font></p>
                <p></p>
                <p><b>Sub
                Macro1()</b></font></p>
                <p><b>Set
                s1 = CreateObject(&quot;Excel.Sheet&quot;)</b></font></p>
                <p><b>Set
                s2 = CreateObject(&quot;Excel.Sheet&quot;)</b></font></p>
                <p><b>s1.Cells(1,
                1).Value = Format(Now, &quot;mm:ss&quot;)</b></font></p>
                <p><b>s2.Cells(1,
                1).Value = Format(Now, &quot;mm:ss&quot;)</b></font></p>
                <p><b>s1.Parent.Parent.Visible
                = True</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Check the names of the workbooks and the times in
                cell Sheet1!A1 of each workbook. Close the
                workbooks &quot;Object&quot; and &quot;Object
                2&quot;. What does s1.Parent.Parent.Visible refer
                to?</font></p>
                <p>4.
                Manually use File New to create another workbook
                in Excel and type &quot;hey&quot; in Sheet1!A1. </font></p>
                <p>5.
                Leave Excel running. Switch back to MSProject and
                run the macro again. Note that it did not
                activate the Excel window this time - setting the
                Visible property to True only activates Excel if
                it is not in the Windows Task List.</font></p>
                <p>6.
                Switch to Excel. Check the workbook names again.
                Did the macro create a new instance of Excel the
                second time it was run?</font></p>
                <p>7.
                Leave Excel running. Switch back to MSProject and
                from the Run menu choose Reset. Switch to Excel.
                Are the workbooks created by the macro still
                there? Did the macro create reference-dependent
                workbooks?</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">If s1 and s2 had been declared
                    locally, would you have seen the workbooks
                    created by the macro after the macro ended?</font></p>
                
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Set x
        = CreateObject(&quot;Excel.Chart&quot;)</b></font></p>
        
            <p>Starts
            an invisible reference-dependent instance of Excel if
            it's not running, otherwise it uses the youngest
            instance. It creates a new worksheet
            &quot;Sheet1&quot; and chart sheet &quot;Chart1&quot;
            in a new reference-dependent workbook called
            &quot;Object (or &quot;Object 2&quot; etc.). Chart1
            is based on Sheet1 which Excel populates with sample
            data. The x refers to Chart1, x.Parent to the
            workbook, and x.Parent.Parent to Excel.Application.
            If Excel is visible, then the new workbook is
            visible, and Excel is reference-independent.</font></p>
            <p><b>Question</b>:
            How can you use x to refer to Sheet1?</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The MSProject macro below
                    creates a new workbook with one worksheet and
                    one chart sheet.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">1. Enter the following macro
                    in MSProject and run it.</font></p>
                
                <p><b>Dim
                oChart As Object 'In the declarations area.</b></font></p>
                <p></p>
                <p><b>Sub
                Macro1()</b></font></p>
                <p><b>Set
                oChart = CreateObject(&quot;Excel.Chart&quot;)</b></font></p>
                <p><b>oChart.Parent.Parent.Visible
                = True</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Switch to Excel. Where is
                    the chart getting its data from? How can you
                    find out whether the workbook created is
                    reference-dependent?</font></p>
                
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Using
        CreateObject With Word Objects</b></font></p>
        <p><b>Set x
        = CreateObject(&quot;Word.Basic&quot;)</b></font></p>
        
            <p>If
            Word is not running, then a visible
            reference-dependent instance of Word is started with
            focus and with no open documents, otherwise x
            references the youngest existing instance of Word
            without activating it. The x refers to Word.Basic.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The MSProject macro below
                    creates a new Word document, enters some
                    text, and saves the document.</font></p>
                    
                        <p>1. Make sure Word is not
                        running.</font></p>
                        <p>2. Enter the following
                        macro in MSProject and run it.</font></p>
                    
                
                <p><b>Sub
                w1()</b></font></p>
                <p><b>Dim
                w as object</b></font></p>
                <p><b>Set
                w = CreateObject(&quot;Word.Basic&quot;)</b></font></p>
                <p><b>w.FileNew</b></font></p>
                <p><b>w.Insert
                &quot;hello&quot;</b></font></p>
                <p><b>w.FileSaveAs
                &quot;c:\temp.doc&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Is Word still running after the macro ends? Was
                the instance of Word created reference-dependent?
                If w had been declared as a module-level
                variable, would Word remain open after the macro
                ends? Open c:\temp.doc to see if it was created
                and saved correctly. Close temp.doc. Create a new
                doc and enter some text.</font></p>
                <p>4.
                Leave Word running. Switch to MSProject and
                change &quot;hello&quot; to &quot;wow&quot; in
                the macro and run it again. Is Word still
                running? Did it overwrite c:\temp.doc? Any
                overwrite warning? Did it use the existing
                instance of Word or start a new instance?</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <p><b>GetObject</b><b><i>
    </i></b>([<i>pathname</i>][,<i>class</i>])</font></p>
    
        
            <p>Returns
            a reference to an object determined by the arguments.
            Depending on the arguments, the reference may be to
            an existing object or to a newly created object. The
            object reference returned by CreateObject is usually
            assigned to an object variable.</font></p>
            <p><i><u>pathname</u></i></font></p>
            <p>The
            path and file name of a document file.</font></p>
            <p><i><u>class</u></i></font></p>
            <p>Has
            the same meaning as in CreateObject.</font></p>
            <p>You
            must provide one or the other or both of the
            arguments.</font></p>
            <p>You
            don't need to use the <i>class</i> argument if you
            give a document name. If you provide a document <i>pathname</i>
            but not a class, then it finds the correct
            application if the system associations are correctly
            setup, and then uses the default class for the
            application.</font></p>
            <p>If
            you use an empty string for <i>pathname</i> then
            GetObject(&quot;&quot;, class) behaves like
            CreateObject(class).</font></p>
            <p>If
            you leave out <i>pathname</i>, then GetObject(,
            class) usually requires class to be an application
            object and the application to be running.</font></p>
            <p>If
            you provide both a document pathname and a class,
            then the specified document must support that class.
            For example, the first statement below is legal and
            the second is not:</font></p>
            <p>Set
            x = GetObject(&quot;c:\winproj\p1.mpp&quot;,
            &quot;MSProject.Project&quot;) 'OK</font></p>
            <p>Set
            x = GetObject(&quot;c:\winproj\p1.mpp&quot;,
            &quot;MSProject.Application&quot;) 'Not OK</font></p>
            <p></font>&nbsp;</p>
        
        <p><b>Using
        GetObject With MSProject Objects</b></font></p>
        <p><b>Set x
        = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        
            <p>MSProject
            must be running, otherwise an OLE Automation error
            occurs. The x refers to MSProject Application.</font></p>
        
        <p><b>Set x
        = GetObject(&quot;&quot;,
        &quot;MSProject.Application&quot;)</b></font></p>
        
            <p>Behaves
            like: Set x =
            CreateObject(&quot;MSProject.Application&quot;).</font></p>
        
        <p><b>Set x
        = GetObject(&quot;&quot;, &quot;MSProject.Project&quot;)</b></font></p>
        
            <p>Behaves
            like: Set x =
            CreateObject(&quot;MSProject.Project&quot;)</font></p>
        
        <p><b>Set x
        = GetObject(&quot;c:\wprj4dat\p1.mpp&quot;)</b></font></p>
        <p><b>Set x
        = GetObject(&quot;c:\wprj4dat\p1.mpp&quot;,
        &quot;MSProject.Project&quot;)</b></font></p>
        
            <p>Each
            of these starts an invisible reference-dependent
            instance of MSProject, if it's not running. If the
            specified MPP file is not open, then it is opened
            invisibly, and is reference-dependent unless the
            command was executed as an MSProject command. The x
            refers to the project, and x.Parent refers to
            MSProject.Application.</font></p>
            <p>These
            are <b>ILLEGAL</b> :</font></p>
        
        <p><b>Set x
        = GetObject(, &quot;MSProject.Project&quot;)</b></font></p>
        <p><b>Set x
        = GetObject(&quot;c:\wprj4dat\p1.mpp&quot;,
        &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>Using
        GetObject With Excel Objects</b></font></p>
        <p><b>Set x
        = GetObject(,&quot;Excel.Application&quot;)</b></font></p>
        
            <p>Excel
            must be running, otherwise an OLE Automation error
            occurs. The x refers to</font></p>
            <p>Excel.Application
            for the youngest instance of Excel.</font></p>
        
        <p><b>Set x
        = GetObject(&quot;&quot;,&quot;Excel.Application&quot;)</b></font></p>
        
            <p>Behaves
            like: Set x =
            CreateObject(&quot;Excel.Application&quot;).</font></p>
        
        <p><b>Set x
        = GetObject(&quot;&quot;,&quot;Excel.Sheet&quot;)</b></font></p>
        
            <p>Behaves
            like: Set x = CreateObject(&quot;Excel.Sheet&quot;)</font></p>
        
        <p><b>Set x
        = GetObject(&quot;c:\Excel\test.xls&quot;)</b></font></p>
        <p><b>Set x
        = GetObject(&quot;c:\Excel\test.xls&quot;,
        &quot;Excel.Sheet&quot;)</b></font></p>
        
            <p>Each
            of these starts an invisible reference-independent
            instance of Excel, if it's not running, otherwise it
            uses the youngest existing instance. If the specified
            XLS file is not open, then it is opened as a hidden
            workbook, and is reference-dependent unless the
            command was executed as an Excel command. The x
            refers to the activesheet in the specified file.</font></p>
        
        <p><b>Set s
        = GetObject(&quot;&quot;,&quot;Excel.Chart&quot;)</b></font></p>
        
            <p>Behaves
            like: Set s = CreateObject(&quot;Excel.Chart&quot;)</font></p>
        
        <p><b>Set s
        = GetObject(&quot;c:\Excel\test.xls&quot;,
        &quot;Excel.Chart&quot;)</b></font></p>
        
            <p>Behaves
            like: GetObject(&quot;c:\Excel\test.xls&quot;) except
            that the workbook must contain at least one chart
            sheet.</font></p>
            <p>These
            are <b>ILLEGAL</b> :</font></p>
        
        <p><b>Set s
        = GetObject(,&quot;Excel.Sheet&quot;)</b></font></p>
        <p><b>Set s
        = GetObject(&quot;c:\Excel\test.xls&quot;,
        &quot;Excel.Application&quot;)</b></font></p>
    
    <p><b>Using GetObject
    With Word Objects</b></font></p>
    
        <p><b>Set w
        = GetObject(&quot;&quot;, &quot;Word.Basic&quot;)</b></font></p>
        
            <p>Behaves
            like w = CreateObject(&quot;Word.Basic&quot;)</font></p>
        
        <p><b>Set d
        = GetObject(&quot;d:\word6\test.doc&quot;)</b></font></p>
        
            <p>Doesn't
            give an error message, but you can't use it for
            anything.</font></p>
            <p>These
            are <b>ILLEGAL</b>:</font></p>
        
        <p><b>Set w
        = GetObject(, &quot;Word.Basic&quot;)</b></font></p>
        <p><b>Set w
        = GetObject(&quot;d:\word6\test.doc&quot;,
        &quot;Word.Basic&quot;)</b></font></p>
    
    <p><b><i>CreateObject
    and GetObject - Review</i></b></font></p>
    
        <p>There
        are many exotic ways to use CreateObject and GetObject,
        but only a few variations are commonly used. First of
        all, the application you want to control is usually
        already running visibly, and there usually is just one
        instance. Also, you usually set the object variable to
        refer to the application, not to a subordinate object in
        the application, like a sheet or chart. To work with
        other subordinate objects in the application, you work
        your way down the object ladder.</font></p>
        <p>The
        table on the next page summarizes the syntax variations
        of CreateObject and GetObject. The most commonly used
        forms are highlighted.</font></p>
    

<div align="center"><center>

<table border="1" cellpadding="7" width="660"
bordercolor="#000000">
    <tr>
        <td width="36%" bgcolor="#FFFFFF"><b>Set x = </b></font></td>
        <td width="64%" bgcolor="#FFFFFF"><b>Result</b></font></td>
    </tr>
    <tr>
        <td width="36%">CreateObject(&quot;MSProject.Application&quot;)</font><p>GetObject(&quot;&quot;,&quot;MSProject.Application&quot;)</font></p>
        </td>
        <td width="64%">Refers to an existing instance if
        MSProject is running, otherwise it starts an invisible
        reference-dependent instance with no projects open. The x
        refers to MSProject.Application.</font></td>
    </tr>
    <tr>
        <td width="36%">CreateObject(&quot;MSProject.Project&quot;)</font><p>GetObject(&quot;&quot;,&quot;MSProject.Project&quot;)</font></p>
        </td>
        <td width="64%">Starts an invisible reference-dependent
        instance of MSProject, if it's not running. It then
        creates a new invisible project. The x refers to the new
        project, and x.Parent refers to MSProject.Application.
        The new project is reference-dependent, unless the
        command executed as an MSProject command.</font></td>
    </tr>
    <tr>
        <td width="36%">CreateObject(&quot;Excel.Application&quot;)</font><p>GetObject(&quot;&quot;,&quot;Excel.Application&quot;)</font></p>
        </td>
        <td width="64%">Always starts a new invisible
        reference-independent instance of Excel. The x refers to
        the Excel.Application object of the new instance.</font></td>
    </tr>
    <tr>
        <td width="36%">CreateObject(&quot;Excel.Sheet&quot;)</font><p>GetObject(&quot;&quot;,&quot;Excel.Sheet&quot;)</font></p>
        </td>
        <td width="64%">Starts an invisible reference-dependent
        instance of Excel if it's not running, otherwise it uses
        the youngest instance. It creates a new worksheet
        &quot;Sheet1&quot; in a new reference-dependent workbook
        called &quot;Object&quot; (or &quot;Object 2&quot; etc.).
        The x refers to Sheet1, x.Parent to the workbook, and
        x.Parent.Parent to Excel.Application. If Excel is
        visible, then the new workbook is visible and Excel is
        reference-independent.</font></td>
    </tr>
    <tr>
        <td width="36%">CreateObject(&quot;Excel.Chart&quot;)</font><p>GetObject(&quot;&quot;,&quot;Excel.Chart&quot;)</font></p>
        </td>
        <td width="64%">Starts an invisible reference-dependent
        instance of Excel if it's not running, otherwise it uses
        the youngest instance. It creates a new worksheet
        &quot;Sheet1&quot; and chart sheet &quot;Chart1&quot; in
        a new reference-dependent workbook called &quot;Object
        (or &quot;Object 2&quot; etc.). Chart1 is based on Sheet1
        which Excel populates with sample data. The x refers to
        Chart1, x.Parent to the workbook, and x.Parent.Parent to
        Excel.Application. If Excel is visible, then the new
        workbook is visible and Excel is reference-independent.</font></td>
    </tr>
    <tr>
        <td width="36%" bgcolor="#FFFFFF"><b>CreateObject(&quot;Word.Basic&quot;)</b></font><p>GetObject(&quot;&quot;,
        &quot;Word.Basic&quot;)</font></p>
        </td>
        <td width="64%" bgcolor="#FFFFFF">If Word is not running, then a
        visible reference-dependent instance of Word is started
        with focus and with no open documents, otherwise it
        activates the youngest existing instance. The x refers to
        Word.Basic.</font></td>
    </tr>
    <tr>
        <td width="36%" bgcolor="#FFFFFF"><b>GetObject(,&quot;MSProject.Application&quot;)</b></font></td>
        <td width="64%" bgcolor="#FFFFFF">MSProject <b>must be running</b>,
        otherwise an OLE Automation error occurs. The x refers to
        MSProject Application.</font></td>
    </tr>
    <tr>
        <td width="36%">GetObject(&quot;c:\data\p1.mpp&quot;)</font><p>GetObject(&quot;c:\data\p1.mpp&quot;,
        _ MSProject.Project&quot;)</font></p>
        </td>
        <td width="64%">Starts an invisible reference-dependent
        instance of MSProject, if it's not running. If the
        specified MPP file is not open, then it is opened
        invisibly, and is reference-dependent unless the command
        was executed as an MSProject command. The x refers to the
        project, and x.Parent refers to MSProject.Application.</font></td>
    </tr>
    <tr>
        <td width="36%" bgcolor="#FFFFFF"><b>GetObject(,&quot;Excel.Application&quot;)</b></font></td>
        <td width="64%" bgcolor="#FFFFFF">Excel <b>must be running</b>,
        otherwise an OLE Automation error occurs. The x refers to
        Excel.Application for the youngest instance of Excel.</font></td>
    </tr>
    <tr>
        <td width="36%">GetObject(&quot;c:\data\test.xls&quot;)</font><p>GetObject(&quot;c:\data\test.xls&quot;,
        _</font></p>
        <p>&quot;Excel.Sheet&quot;)</font></p>
        </td>
        <td width="64%">Each of these starts an invisible
        reference-independent instance of Excel, if it's not
        running, otherwise it uses the youngest existing
        instance. If the specified XLS file is not open, then it
        is opened as a hidden workbook, and is
        reference-dependent unless the command was executed as an
        Excel command. The x refers to the activesheet in the
        specified file.</font></td>
    </tr>
    <tr>
        <td width="36%">GetObject(&quot;c:\data\test.xls&quot;, _</font><p>&quot;Excel.Chart&quot;)</font></p>
        </td>
        <td width="64%">Behaves like
        GetObject(&quot;c:\data\test.xls&quot;) except that the
        workbook must contain at least one chart sheet in the
        workbook.</font></td>
    </tr>
</table>
</center></div>
  <p><b><i>USING
    APPLICATION OBJECT LIBRARIES</i></b></font></p>
    
        
            <p>Excel
            and MSProject have their own Application Object
            Libraries. Other applications may have their own
            libraries in the future.</font></p>
            <p>Advantages
            of using object libraries:</font></p>
        
    
    <p>You don't
    need to set an object variable with either CreateObject or
    GetObject. Your macro can use the predefined object names
    that refer to the target application, for example, Excel and
    MSProject (although in some cases you must use
    Excel.Application and MSProject.Application).</font></p>
    <p>Macros in
    the source application can use the named constants from the
    target Application Object Library. For example, if Excel has
    a reference to the Microsoft Project 4.0 Object Library, then
    Excel macros would automatically understand constants like
    pjDuration.</font></p>
    
        
            <p>Disadvantages
            of using object libraries:</font></p>
        
    
    <p>Once a macro
    in a source application references a target application
    library, the <b>target application might continue to run
    invisibly</b> after the source macro ends, and even after the
    source application closes.</font></p>
    <p><b>If you
    close the target application</b> after if has been referenced
    by a source macro, then the <b>source application may have
    trouble referencing the library again</b> until you do one of
    the following in the source application.</font></p>
    
        
            <p>Choose
            the menu command Run Reset.</font></p>
            <p>Execute
            the End command in the Debug window or in a macro.</font></p>
            <p>Uncheck
            the reference to the Object Library, close the
            dialog, get back into it, and recheck the reference.</font></p>
            <p>Exit
            and restart the source application.</font></p>
        
        <p><b>Microsoft
        Project 4.0 Object Library</b></font></p>
        
            <p>To
            use the <b>Microsoft Project 4.0 Object Library from
            Excel</b>, get into an Excel module and choose Tools,
            References, and check: Microsoft Project 4.0 Object
            Library. Then you don't need CreateObject or
            GetObject to refer to MSProject. You can just use the
            name MSProject or MSProject.Application to refer to
            MSProject. You could also introduce another object
            variable with a shorter name, for example:</font></p>
        
        <p><b>Set x
        = MSProject.Application</b></font></p>
        
            <p>When
            an Excel macro references MSProject, it refers to an
            existing instance if MSProject is already running,
            otherwise it starts a new invisible instance with no
            open projects. In the latter case, MSProject
            continues to run until you do one of the following:</font></p>
            
                <p>Choose
                the Excel menu command Run Reset.</font></p>
                <p>Execute
                the End command in the Debug window or in an
                Excel macro.</font></p>
                <p>Uncheck
                the reference to the Microsoft Project 4.0 Object
                Library in Excel, close the dialog, get back into
                it, and recheck the reference.</font></p>
                <p>Exit
                Excel and restart it.</font></p>
                <p>Manually
                close MSProject or tell it to Quit via a macro.</font></p>
            
            <p>Also,
            if you close MSProject after an Excel macro has
            referenced it, then Excel macros can't reference
            MSProject again until one of the above actions is
            taken.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The Excel macro below starts
                    MSProject if not already running, makes it
                    visible and active, and creates a new visible
                    project.</font></p>
                    
                        <p>1. Enter the following
                        Excel macro and run it.</font></p>
                    
                
                <p><b>Sub
                Sub4()</b></font></p>
                <p><b>MSProject.Application.Visible
                = True</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>MSProject.FileNew</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Close MSProject (choose Yes
                    to any warning message).</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">3. Run the macro again. Did
                    you get an error message? From the Run menu,
                    choose Reset, and run the macro again.</font></p>
                
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Excel 5.0
        Object Library from MSProject</b></font></p>
        
            <p>To
            Use the <b>Excel 5.0 Object Library from MSProject,</b>
            get into the module editor and choose Tools,
            References, and check Excel 5.0 Object Library. Then
            you don't need CreateObject or GetObject to refer to
            Excel. You can just use the name Excel or
            Excel.Application. You could also use another object
            variable with a shorter name, for example:</font></p>
        
        <p><b>Set x
        = Excel.Application.</b></font></p>
        
            <p>The
            first time an MSProject macro references Excel, a new
            invisible instance is run, and all later references
            use that same instance. That instance continues
            running until you manually close it or use a macro to
            tell it to Quit. Note that there isn't a way to
            reference an existing instance of Excel using this
            library technique. If you need to reference an
            existing instance, then use GetObject.</font></p>
            <p>Also,
            if you close Excel after an MSProject macro has
            referenced it, then MSProject macros can't reference
            Excel again (via the library reference) until one of
            the following actions is taken in MSProject:</font></p>
            
                <p>Uncheck
                the reference to the Excel 5.0 Object Library,
                close the dialog, get back into it, and recheck
                the reference.</font></p>
                <p>Execute
                the End command in the Debug window or in an
                MSProject macro.</font></p>
                <p>Choose
                the menu command Run Reset.</font></p>
                <p>Exit
                MSProject and restart it.</font></p>
            
            <p>Note:
            Unlike MSProject, when you close Excel, it does not
            give a warning that another application is using
            Excel.</font></p>
        
    
    <p><b><i>Invisible
    Objects and Object Lifetime - Review</i></b></font></p>
    
        
            <p>This
            section reviews and formalized the concepts of
            reference-dependent objects and opening applications
            and documents invisibly.</font></p>
        
        <p><b>Invisible
        Application:</b></font></p>
        
            <p>An
            application that is running but doesn't show in the
            Windows Task List. This is not the same as being
            minimized or hidden under other windows. If a macro
            creates an invisible instance of an application, the
            macro may need to close the application or make it
            visible before the macro ends, to avoid having
            invisible instances eating up resources.</font></p>
            <p>If x
            refers to MSProject.Application, then MSProject can
            be made visible by using x.Visible=True,
            x.AppMaximize, x.AppMinimize, or x.AppRestore. The
            last three statements always activate MSProject, but
            x.Visible=True makes MSProject active only if
            MSProject isn't already visible. The statement
            x.Visible=False has no effect on MSProject.</font></p>
            <p>If x
            refers to Excel.Application, then x.Visible=True
            makes Excel visible, and x.Visible=False makes it
            invisible. Using x.Visible=True when Excel is already
            visible does not activate Excel.</font></p>
            <p>Microsoft
            Word can't be made invisible using OLE Automation.</font></p>
        
        <p><b>Invisible
        Document:</b></font></p>
        
            <p>A
            document that is in an invisible application, or a
            document in a visible application, but the document
            can't be seen and doesn't appear on the list of open
            files at the bottom of the application's Window menu.
            If the application is visible, the document might be
            invisible because of the method used to open it, or
            because it was made hidden by some command after it
            was opened.</font></p>
            <p>If
            you use CreateObject or GetObject to create/open a
            project in MSProject, then the project is invisible.</font></p>
            <p>If
            you use CreateObject or GetObject to create/open a
            sheet or chart in a new invisible instance of Excel,
            then the associated workbook is invisible. If Excel
            is then made visible, the workbook is still a hidden
            workbook.</font></p>
            <p>There
            are no invisible documents in Word.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">These Excel macros illustrates
                    when an invisible project can or cannot be
                    the active project.</font></p>
                    
                        <p>1. Make a test project
                        with two tasks named T1 and T2 and save
                        it as &quot;c:\p1.mpp&quot;.</font></p>
                        <p>2. Close MSProject.</font></p>
                        <p>3. Enter the following
                        Excel macro and run it.</font></p>
                    
                
                <p><b>Sub
                Macro1( )</b></font></p>
                <p><b>Dim
                x As Object, p As Object</b></font></p>
                <p><b>Set
                x =
                CreateObject(&quot;MSProject.Application&quot;)
                'Starts invisible</b></font></p>
                <p><b>x.FileOpen
                &quot;c:\p1.mpp&quot; 'Open p1.mpp</b></font></p>
                <p><b>Set
                p = x.ActiveProject 'Set object variable</b></font></p>
                <p><b>p.Tasks(2).Name
                = &quot;zawa&quot; 'Change task2 name</b></font></p>
                <p><b>x.Alerts
                False 'Save without asking</b></font></p>
                <p><b>x.Quit
                'Close MSProject</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">4. Check that the name of task
                    2 has changed to zawa.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">5. The following Excel macro
                    won't work. Enter and run it. Choose OK to
                    the MSProject error message, switch back to
                    Excel, and choose Goto in the Excel error
                    message. What's wrong with this macro?</font></p>
                
                <p><b>Sub
                Macro2()</b></font></p>
                <p><b>Dim
                x As Object, p As Object</b></font></p>
                <p><b>Set
                p = GetObject(&quot;c:\p1.mpp&quot;)</b></font></p>
                <p><b>Set
                x = p.Parent</b></font></p>
                <p><b>x.Visible
                = True</b></font></p>
                <p><b>p.Tasks(2).Name
                = &quot;zawa&quot;</b></font></p>
                <p><b>x.FileSave</b></font></p>
                <p><b>x.Quit</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">6. Here' a quick fix for the
                    above macro. Add the following three lines
                    before the x.FileSave line, and run the macro
                    again. Which application's messages is the
                    &quot;On Error&quot; line supposed to
                    prevent? Which application's messages is the
                    &quot;x.Alert&quot; line supposed to prevent?</font></p>
                
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>x.Alerts
                False</b></font></p>
                <p><b>x.FileOpen
                &quot;c:\p1.mpp&quot;</b></font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  
        <p><b>Reference-dependent
        Object:</b></font></p>
        
            <p>An
            open object that exists only as long as it or one of
            its subordinate objects is being referenced. The
            object could be an application or a subordinate
            object that the application supports, like a project
            in MSProject, or a worksheet in Excel, or Word Basic
            in Word.</font></p>
            <p>If
            you run an MSProject macro that starts Word as a
            result of</font></p>
        
        <p><b>x=CreateObject(&quot;Word.Basic&quot;)</b></font></p>
        
            <p>then
            that instance of Word.Basic is reference-dependent,
            because if the value of x changes or x ceases to
            exist, then Word will automatically close without
            warning, and without saving changes to documents.</font></p>
            <p>The
            next two definitions are specific cases:</font></p>
        
        <p><b>Reference-dependent
        document:</b></font></p>
        
            <p>An
            open document that exists only as long as it or one
            of its subordinate objects is being referenced. When
            a reference-dependent document closes automatically,
            it typically does not automatically save changes or
            ask if you want to save changes.</font></p>
            <p>For
            example, if you run an EXCEL macro that opens a
            project using</font></p>
        
        <p><b>Set
        p=GetObject(&quot;c:\winproj\p1.mpp&quot;)</b></font></p>
        
            <p>then
            p1.mpp is reference-dependent, because if the value
            of p changes or p ceases to exist, then p1.mpp
            automatically closes without warning and without
            saving changes.</font></p>
            <p><b>NOTE</b>:
            If you run the above command in an MSProject macro
            instead of an Excel macro, then p1.mpp is not
            reference-dependent. I.e. even after p ceases to
            exist, p1.mpp is still open - it's invisible, but can
            be seen on the Window New Window list.</font></p>
            <p>Similarly,
            if you run an MSProject macro that opens a worksheet
            using</font></p>
        
        <p><b>Set s
        = GetObject(&quot;c:\Excel\test.xls&quot;)</b></font></p>
        
            <p>then
            test.xls is reference-dependent, because if the value
            of s changes or s ceases to exist, then test.xls
            automatically closes. Note that test.xls opens as a
            hidden workbook and will become reference independent
            if unhidden manually or by executing </font></p>
            <p>s.Parent.Parent.Windows(&quot;test.xls&quot;).Visible
            = True</font></p>
            <p>Reference-dependent
            projects are created/opened as a result of
            CreateObject or GetObject run from another
            application like Excel, and are invisible at first.
            They can be made visible through the Window New
            Window menu command if it's available. Invisible
            reference-dependent projects can never be the active
            project.</font></p>
            <p>Reference-independent
            projects are most recently created/opened with
            methods other than CreateObject or GetObject, i.e.
            like FileNew and FileOpen.</font></p>
            <p>Technically
            there are no reference-dependent Word documents
            because Word doesn't have a Word.Document object.
            However, the Word.Basic object can be
            reference-dependent and if the Word.Basic object
            closes, it closes the application and all open
            documents without warning.</font></p>
        
        <p><b>Reference-dependent
        Application Instance:</b></font></p>
        
            <p>An
            instance of an application that exists only as long
            as it or one of its subordinate objects is being
            referenced.</font></p>
            <p>MSProject
            can be reference-dependent only if there are no open
            reference-independent projects, and if MSProject was
            started as a result of CreateObject/GetObject or a
            reference via the Microsoft Project 4.0 Object
            Library.</font></p>
            <p>For
            example, if MSProject is not running, then starting
            it with</font></p>
        
        <p><b>Set
        x=CreateObject(&quot;MSProject.Application&quot;)</b></font></p>
        
            <p>creates
            a reference-dependent instance of MSProject, because
            if the value of x changes or x ceases to exist, then
            MSProject closes automatically.</font></p>
            <p>If
            MSProject is started as the result of CreateObject or
            GetObject, then if starts out dependent on the object
            variable used in the CreateObject or GetObject
            command. After that, it can become
            reference-independent by restarting it manually, or
            by opening reference-independent projects.</font></p>
            <p>There
            are no visible reference-dependent instances of
            Excel. Once an instance of Excel shows up in the
            Windows Task List, it remains running until you
            manually close it or use some command like the Quit
            method. Invisible instances may or may not be
            reference dependent.
            CreateObject(&quot;Excel.Application&quot;) starts
            reference-independent instances.
            CreateObject(&quot;Excel.Sheet&quot;) and
            CreateObject(Excel.Chart&quot;) create
            reference-dependent instances if Excel was not
            already running.</font></p>
            <p>Technically
            Word can't be a reference-dependent application
            because there is no</font></p>
            <p>Word.Application
            object, but the Word.Basic object can be
            reference-dependent and behaves like an application
            object.</font></p>
        
    
    <p><b><i>Using
    VB3 Forms With MSProject</i></b></font></p>
    
        
            <p>Because
            Visual Basic for Applications in MSProject does not
            include rich event driven graphical interface objects
            such as text boxes, dropdown lists, etc., some
            developers will choose to create custom applications
            using VB3 and MSProject. Two possible design
            philosophies are listed below</font></p>
        
        <p>Design
        it strictly as a VB3 program that controls MSProject. No
        MSProject macro code is used at all. Advantage:
        Simplicity.</font></p>
        <p>Write
        most of the code in MSProject macros. Any
        &quot;fancy&quot; input/output dialogs are designed in
        small VB3 programs that are called from the MSProject
        macros. Advantage: Speed.</font></p>
        
            <p>The
            second approach requires some way for the VB3 program
            to return user input to the calling MSProject macro.
            The are several ways to pass data between VB3 and
            MSProject macros, including: OLE Automation, DDE, and
            API calls (for example, passing data via a global
            memory block).</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>This
            example illustrates a VB3 program returning input to
            MSProject via OLE Automation, using the Text9 and
            Text10 fields of the project summary task of the
            active project. The purpose of the example is for
            illustration only - the function it performs could be
            done without VB3. Here's a short description of the
            logic:</font></p>
            
                <p>The
                MSProject macro warns the user that the Text9 and
                Text10 fields of the project summary task will be
                modified and allows the user to cancel the macro.</font></p>
                <p>If
                the user chooses to continue, the MSProject macro
                sets the project summary Text10 field to blank.</font></p>
                <p>The
                MSProject macro uses Shell to start the VB3
                program AddTask.exe.</font></p>
                <p>The
                MSProject macro waits in a DoEvents loop until
                the project summary Text10 field is no longer
                blank. During this time, in the VB3 form, the
                user can enter the name for a new task in a
                textbox and then choose OK or Cancel. The VB3
                program returns &quot;ok&quot; or cancel&quot; in
                the project summary Text10 field, and, if OK was
                chosen, returns the new task name in the project
                summary Text9 field.</font></p>
                <p>The
                MSProject macro assigns the returned values (the
                project summary Text9 and Text10 fields) to
                variables sTextEntered and sButtonChosen. If
                sButtonChosen = &quot;ok&quot;, then a new task
                is added to the active project with the new name
                that the user entered.</font></p>
                <p></p>
                
                    
                        <p>Here are the detailed
                        steps:</font></p>
                    
                
                <p>1.
                Start VB3 (Microsoft Visual Basic 3.0). If the
                toolbox isn't showing, then from the Window menu
                choose Toolbox. Resize Form1 as shown in the
                picture. Press F4 and change the Caption property
                to &quot;Add Task&quot;.</font></p>
            
            <p><img
            src="Image224.gif" align="left" hspace="0"
            width="443" height="76"></font></p>
            
                <p></p>
            
            <p></font>&nbsp;</p>
            
                <p>2.
                Create the textbox shown in the picture (use the <img
                src="Image225.gif" width="24" height="21"> tool).
                Change its Name property to txtTextBox and change
                its Text property to blank (so it's empty).</font></p>
                <p>3.
                Create the OK command button as shown in the
                picture (use the <img src="Image226.gif"
                width="21" height="16"> tool). Change its Name
                property to cmdOK, and change its Caption
                property to &quot;OK&quot;. Double click the
                button and enter the body of the cmdOK_Click
                procedure shown below:</font></p>
            
            
                <p><b>Sub
                cmdOK_Click ()</b></font></p>
                <p><b>Dim
                oMSP As object</b></font></p>
                <p><b>Set
                oMSP = GetObject(,
                &quot;MSProject.Application&quot;)</b></font></p>
                <p><b>oMSP.ActiveProject.Text9
                = txtTextBox.Text</b></font></p>
                <p><b>oMSP.ActiveProject.Text10
                = &quot;ok&quot;</b></font></p>
                <p><b>End</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>4.
                Create the command button that says
                &quot;Cancel&quot; as shown in the picture.
                Change its Name property to cmdCancel, and change
                its Caption property to &quot;Cancel&quot;.
                Double click the button and enter the body of the
                cmdCancel_Click procedure shown below:</font></p>
                <p><b>Sub
                cmdCancel_Click ()</b></font></p>
                <p><b>Dim
                oMSP As object</b></font></p>
                <p><b>Set
                oMSP = GetObject(,
                &quot;MSProject.Application&quot;)</b></font></p>
                <p><b>oMSP.ActiveProject.Text10
                = &quot;cancel&quot;</b></font></p>
                <p><b>End</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>5.
                In MSProject, create a test project, turn on the
                option to view the project summary task (in the
                Tools Options View dialog).</font></p>
                <p>6.
                In VB3, press F5 to test run the program. If the
                form pops up successfully, enter a new task name
                in the textbox. Test both the OK and Cancel
                buttons. After each test, switch to MSProject and
                verify that Text9 and Text10 of the project
                summary task have been assigned the appropriate
                values. It won't change Text9 if Cancel is
                chosen. If you get runtime errors, use the Run
                menu End command, and fix the errors.</font></p>
                <p>7.
                Switch to File Manager and create the directory
                C:\AddTask. Switch back to VB3. From the File
                menu, choose &quot;Make Exe File ...&quot; and
                save it as C:\AddTask\AddTask.exe. Next, from the
                File menu choose &quot;Save Project&quot;, and
                save everything to the C:\AddTask directory,
                accepting the default file names. Finally, exit
                VB3.</font></p>
                <p>8.
                Enter and test run the MSProject macro below:</font></p>
                <p><b>Sub
                AddTask()</b></font></p>
                <p><b>Dim
                sTextEntered As String</b></font></p>
                <p><b>Dim
                sButtonChosen As String</b></font></p>
                <p><b>Dim
                nAnswer As Integer</b></font></p>
                <p><b>nAnswer
                = MsgBox(&quot;This macro uses Text9 and Text10
                of the &quot; &amp; _</b></font></p>
                <p><b>&quot;active
                project summary task. Continue?&quot;,
                vbOKCancel)</b></font></p>
                <p><b>If
                nAnswer = vbCancel Then End</b></font></p>
                <p></p>
                <p><b>ActiveProject.Text10
                = &quot;&quot;</b></font></p>
                <p><b>Shell
                &quot;C:\AddTask\AddTask.exe&quot;, 1 'start as
                normal window</b></font></p>
                <p></p>
                <p><b>Do</b></font></p>
                <p><b>DoEvents</b></font></p>
                <p><b>Loop
                Until ActiveProject.Text10 &lt;&gt; &quot;&quot;</b></font></p>
                <p></p>
                <p><b>sTextEntered
                = ActiveProject.Text9</b></font></p>
                <p><b>sButtonChosen
                = ActiveProject.Text10</b></font></p>
                <p></p>
                <p><b>If
                sButtonChosen = &quot;ok&quot; Then</b></font></p>
                <p><b>ActiveProject.Tasks.Add
                Name:=sTextEntered</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <H1><i>Lesson
    3 Exercises</i></H1>

<ol>
    <li>The VB3
    program described below displays the name and duration of one
    task at a time from the active project in a VB3 form, and has
    an option to update the duration. It also has buttons to move
    to the previous or next task id. Some error checking is added
    in Step (13). Follow the steps below.</font></li><br> <br>
    
        <p><img
        src="Image227.gif" width="358" height="166"></font></p>
<ol>        <li>Start VB3 (Microsoft Visual Basic 3.0). If the toolbox
        isn't showing, then from the Window menu choose Toolbox.
        Resize Form1 as shown in the picture.</font></li><br> <br>
        <li>Create the label that says &quot;# of Tasks&quot; as
        shown in the picture (click <img src="Image228.gif"
        width="22" height="19"> on the tool bar and draw a
        rectangle on Form1). With the label selected, press F4
        and change the Caption property to &quot;# of
        Tasks&quot;. Likewise create the labels that say
        &quot;Id&quot;, &quot;Name&quot;, and
        &quot;Duration&quot;.</font></li><br> <br>
        <li>Create the label to the right of &quot;# of Tasks&quot;.
        Change its Caption property to a blank and change its
        Name property to lblNumOfTasks. Similarly, create the
        labels to the right of &quot;Id&quot; and
        &quot;Name&quot;, with Name properties lblTaskID and
        lblTaskName.</font></li><br> <br>
        <li>Create a text box to the right of &quot;Duration&quot; as
        shown on the picture (use the <img src="Image225.gif"
        width="24" height="21"> tool). Change its Name property
        to txtDuration and its Text property to blank.</font></li><br> <br>
        <li>Create the command button that says &quot;Close&quot; as
        shown in the picture (use the <img src="Image226.gif"
        width="21" height="16"> tool). Change its Name property
        to cmdClose, and Caption property to &quot;Close&quot;.
        Similarly, create the &quot;Previous&quot;,
        &quot;Next&quot;, and &quot;Update&quot; buttons with
        Name properties cmdPrevious, cmdNext, and cmdUpdate, and
        Caption properties &quot;Previous&quot;,
        &quot;Next&quot;, and &quot;Update&quot;.</font></li><br> <br>
        <li>Double click on any part of Form1. Press F2. From the
        Procedures list, double click on
        &quot;(declarations)&quot;. Use the Dim command to
        dimension object variables oMSP and oTask, and integer
        variables nTaskID and nNumOfTasks.</font></li><br> <br>
        <li>Double click on an empty part of the form to get to the
        Form_Load event procedure. Enter the following event
        procedure (the Sub and End Sub are already there). When
        Form1 is loaded, this will display the # of tasks, and
        the id, name and duration of the task with Id = 1
        (assuming it's not blank).</font></li><br> <br>
        <b>Sub
        Form_Load ()</b></font>
        <br><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font>
        <br><b>nNumOfTasks
        = oMSP.ActiveProject.Tasks.Count</b></font>
        <br><b>lblNumOfTasks
        = nNumOfTasks</b></font>
        <br><b>nTaskID
        = 1</b></font>
        <br><b>lblTaskID
        = nTaskID</b></font>
        <br><b>Set
        oTask = oMSP.ActiveProject.Tasks(nTaskID)</b></font>
        <br><b>lblTaskName
        = oTask.Name</b></font>
        <br><b>txtDuration
        = oTask.Duration</b></font>
        <br><b>End
        Sub</b></font><p>
        <li>Double click each of the buttons on the form, one at a
        time, to get to each button click event procedure and
        enter the code shown below.</font></li><br> <br>
        <p>'This
        will update the task duration with the text from the
        txtDuration text box.</font>
        <p><b>Sub
        cmdUpdate_Click ()</b></font>
        <br><b>oTask.Duration
        = txtDuration</b></font>
        <br><b>End
        Sub</b></font><br> 
        <br>'This
        will close the VB3 program.</font><br> 
        <br><b>Sub
        cmdClose_Click ()</b></font>
        <br><b>End</b></font>
        <br><b>End
        Sub</b></font><br> 
        <br>'This
        will move to the previous task id unless it is already at 1.</font>
        <br> <br><b>Sub
        cmdPrevious_Click ()</b></font>
        <br><b>If nTaskID &gt; 1 Then nTaskID = nTaskID - 1</b></font>
        <br></font>&nbsp;
        <br><b>lblTaskID
        = nTaskID</b></font>
        <br><b>Set
        oTask = oMSP.ActiveProject.Tasks(nTaskID)</b></font>
        <br><b>lblTaskName
        = oTask.Name</b></font>
        <br><b>txtDuration
        = oTask.Duration</b></font>
        <br><b>End
        Sub</b></font><br> 
        <br>'This
        will move to the next task id unless is at the largest id
        in the project.</font><br> 
        <br><b>Sub
        cmdNext_Click ()</b></font>
        <br><b>If
        nTaskID &lt; nNumOfTasks Then nTaskID = nTaskID + 1</b></font>
        <br></font>&nbsp;
        <br><b>lblTaskID
        = nTaskID</b></font>
        <br><b>Set
        oTask = oMSP.ActiveProject.Tasks(nTaskID)</b></font>
        <br><b>lblTaskName
        = oTask.Name</b></font>
        <br><b>txtDuration
        = oTask.Duration</b></font>
        <br><b>End
        Sub</b></font><br> <br>
        <li>Switch to MSProject and set the default duration units to
        &quot;days&quot; (Tools Options Schedule tab, Show
        Duration In). Create a test project with tasks T1, T2,
        and T3 each with duration 1d. </font></li><br> <br>
        <li>Switch to VB3 and move Form1 if necessary so you can see
        the name and duration fields in the background. Press F5
        to run the VB3 program. When Form1 loads, T1 data should
        be displayed in the form. Test the Previous and Next
        buttons, but not the Update button yet.</font></li><br> 
        <br><b>IMPORTANT</b>:
        If you get runtime error messages, then <b><u>choose End
        from the Run menu</u></b>, check your work, and make
        corrections. </font><br> <br>
        <li>Display T1 again in the form. The duration is 480 in the
        textbox (the 480 is the duration in minutes). Enter 960
        in the duration text box and choose Update. The duration
        of T1 in the project changes to 960d. Why? Enter 2d in
        the duration text box and choose Update. The duration of
        T1 should become 2d. Why? Close Form1 and change the
        duration of T1 back to 1d.</font></li><br>
    
    <br>Here's a
    review of the rules used when setting the duration property
    of a task to a value:</font><br> <br>
        <ul><li>If the
        value has the string data type, then it behaves as if you
        had entered the characters in the duration field
        manually. A string of digits with no duration unit uses
        the default duration unit. A string that includes a
        duration unit uses that unit. Note that the value of a
        text box has the string data type.</font></li><br> <br>
        <li>If the
        value has a numeric data type (integer, long, etc.) then
        it is treated as minutes.</font></li><br> <br>
        <li>The above
    VB3 program is awkward because the duration is displayed in
    the text box as minutes with no unit, but a unit must be
    added manually before choosing Update, otherwise you end up
    with the default duration unit. One way to make it more
    consistent would be to replace txtDuration by
    CLng(txtDuration) in the cmdUpdate_Click procedure, so the
    updated duration would be interpreted as a pure number
    representing whole minutes. However, the step below shows a
    better way: It uses GetField to get the duration as a string
    (just as it looks in the project task table) instead of a
    pure integer representing minutes.</font></li><br> <br></ul>
    
        <li>In
        the Form_Load, cmdPrevious_Click, and cmdNext_Click
        procedures, replace:</font></li><br> 
        <br><b>txtDuration
        = oTask.Duration</b></font>
        <br>with:</font>
        <br><b>txtDuration
        = oTask.GetField(29)</b></font>
        <br>The
        easiest way to do this is to double click on an empty
        part of the form and then use the menu command Edit
        Replace. The 29 is from the pjTaskDuration constant
        listed in the help topic on the GetField method. Test the
        VB3 program again.</font><br> <br>
        <li>Add
        error trapping code if necessary so that the VB3 program
        sets lblTaskName and txtDuration to the empty string
        &quot;&quot; if the row at nTaskId is blank, i.e. if
        oTask is Nothing. Also, if oTask is Nothing, the
        Update_Click procedure will display the message
        &quot;Task is blank&quot; and then put &quot;&quot; in
        the txtDuration textbox. Don't bother trapping bad values
        entered in the txtDuration textbox.</font></li><br> <br>
        <li>Add
        another command button labeled GoTo that lets the user
        enter a task id in an input box, and then displays the
        id, name, and duration for that task. Start with On Error
        Resume Next to trap bad id numbers. Assign the value
        returned by the InputBox to a local integer variable N
        and then use <b>Set oTask = oMSP.ActiveProject.Tasks(N)</b>.
        If an error occurred (Err &gt; 0) then give a message
        saying &quot;Bad Id&quot; and then exit the sub.
        Otherwise, Assign N to nTaskId and update lblTaskID,
        lblTaskName, and txtDuration as in the other procedures
        (checking for blank rows).</font></li></ol><br> <br>
    
    <li>Write an
    MSProject macro that creates a new invisible project, adds
    three tasks to it called &quot;a&quot;, &quot;b&quot;, and
    &quot;c&quot;, and link the tasks in order with FS
    relationships. The project is invisible the whole time.</font></li><br> <br>
    <p>Note: You
    can't activate the invisible project or apply a view or
    select any tasks in a table or use the link tool button. Use
    CreateObject to create the project. If P is the object
    variable that refers to the new invisible project, then you
    can use the Add method several times to add the three tasks,
    for example, P.Tasks.Add Name:=&quot;a&quot;. Then you can
    put the appropriate values in the Predecessors field for
    tasks 2 and 3, for example, P.Tasks(2).Predecessors=1.</font>
    <p>After you
    run the macro, look on the Window menu to see what projects
    are open. Is the Unhide item available on the Window menu?
    Choose New Window from the Window menu and make the invisible
    project show up in a new window. Are the tasks and
    predecessors correct?</font><br> <br>
    <li>Write an
    Excel macro that uses the data on Sheet1 of the active Excel
    workbook to create a new project. Columns A, B, and C on
    Sheet1 contain a list of task names, starting dates, and
    durations, for example Sheet1 might contain the following in
    cells A1:C4</font></li>    <br>         
            <br>T1
            11/7/94 5d</font>
            <br>T2
            11/3/94 2w</font>
            <br>T3
            11/14/94 16h</font>
            <br>T4
            11/9/94 3d</font>
        
        <p>The macro
    can assume that the data starts in cell A1 and that there are
    no blank rows, but has to calculate how many rows there are.
    The macro should do the following steps:</font>
    
        <p>Start
        MSProject if it's not running: Use CreateObject and
        assign the returned value to an object variable called
        oMSP (so oMSP refers to MSProject).</font>
        <p>Make
        MSProject visible and active.</font>
        <p>Create a
        new visible project (use MSProject's FileNew method).
        Later, the new project can be referenced as
        oMSP.ActiveProject.</font>
        <p>Assign
        the number of tasks on Sheet1 to a variable, for example</font>
    
    <p><b>N =
    Sheets(&quot;Sheet1&quot;).Cells(1,
    1).CurrentRegion.Rows.Count</b></font>
    
        <p>For R =
        1 to the number of tasks on Sheet1: Use the Add method
        (with parenthesis around the Name argument) to add
        another task to the project - use the appropriate cell
        value for the Name argument, and assign the return value
        from the Add method to an object variable T (so T refers
        to the new task). Then use T to assign the appropriate
        sheet values to the start and duration of the new task.</font>
    
    <p>Use OLE
    Automation where possible, and avoid copy/paste techniques.</font>
    <p><b>Notes</b>:</font>
    
        <p>In
        Excel, to access the content of a cell at row R column C
        of Sheet1, use can use the expression: <b>Sheets(&quot;Sheet1&quot;).Cells(R,C).Value.</b></font>
        <p>In the
        For loop, R will be the loop variable, and C will be 1,
        2, or 3, depending on whether you want the name, start,
        or duration.</font>
        <p>To add a
        new task at row R in the new project and have the object
        variable T refer to the new task, use: <b>Set T =
        oMSP.ActiveProject.Tasks.Add (Name:= </b><i>value</i><b>)</b></font>
        <p>where
        the Name argument comes from row R column 1 of Sheet1.</font>
        <p>You can
        use ActiveSheet in the macro instead of
        Sheets(&quot;Sheet1&quot;). If you use ActiveSheet, then
        some worksheet (not necessarily Sheet1) must be active
        before you run the macro. The advantage of using notation
        like Sheets(&quot;Sheet1&quot;) is that Sheet1 doesn't
        have to be active - you can run the macro from the Excel
        module editor.</font>
    
    <p>Test run the
    macro once when MSProject is open and once when it's not. You
    should see the new project and tasks being added.</font><br> <br>
    <li>Create a
    VB3 program that displays the task ids and names in a list
    box (use the <img src="Image229.gif" width="25" height="17">
    tool). All the code is in the Form_Load procedure, except for
    a Close button that just has the End command. The list is
    initialized in the Form_Load procedure. Use an object
    variable oMSP to refer to MSProject and an object variable
    oTasks to refer to all the tasks in the active project. For
    n=1 to oTasks.Count, oTasks(n) represents a single task, so
    if oTasks(n) is not blank, then add an item to the list box
    where the item is the concatenation of the task Id and name
    separated by a space. In general, a string can be added to a
    list box List1 as follows: </font></li><br> <br>
    
        <p><b>List1.AddItem
        </b><b><i>string</i></b></font>
    
    <p>Note: To
    check if a task oTasks(n) is not blank, use the <b>If/EndIf</b>
    block that starts with:</font>
    
        <p><b>If
        Not oTasks(n) Is Nothing Then</b></font>
    
    <p>Open or
    create a test project with some nonblank tasks and some blank
    tasks, and run the VB3 program. Only the nonblank tasks
    should show in the list.</font>
    <p>The
    following limitations are from the VB3 Programmer's Guide,
    Appendix D: List boxes can</font>
    <p>hold 5440
    items, each item has a maximum of 1K characters, and the
    total of all characters in the list box cannot exceed 64K.</font><br> <br>
    <li>Create a
    VB3 program that, for the selected task, lists the names of
    all the resources assigned to that task in a list box. Form1
    will have a list box and a Close button. Don't do any error
    checking. To test it, switch to MSProject and select a task
    that has some resources assigned to it; then switch back to
    VB3 and run the program. You should see the resource names
    assigned to the selected task show up in the VB3 listbox on
    Form1.</font></li><br> <br>
    <li>Write an
    MSProject macro that starts a new invisible instance of Excel
    and creates a new workbook. For each nonblank task in the
    active project, the task names and durations are written to
    the first two columns of Sheet1 in the new workbook. Then the
    Excel Save As dialog comes up so you can enter a filename to
    save the new workbook. After that Excel quits. The only part
    of Excel you see is the Save As dialog and any overwrite
    warning. You don't get the &quot;Save changes?&quot; message.
    Write the macro so that the durations show up as text in the
    workbook just like they look in the task table. No blank rows
    are written to the worksheet. Test run the macro on a project
    that has several tasks including some blank rows, then open
    up the workbook it saved and see if it has the correct data.</font></li><br> <br>
    <li>Write an
    MSProject macro that switches to Excel if it's running,
    otherwise starts a new visible instance and switches to it.
    The macro maximizes the Excel window and adds a new workbook.
    The task names and durations in the active project are
    written to the first two columns of Sheet1. The durations are
    written as pure numbers representing working days relative to
    ActiveProject.HoursPerDay. Then a chart sheet is added and
    the ChartWizard method is used to specify the source range
    for the chart to be the data in Sheet1. Assuming that x
    refers to Excel.Application, and that s refers to
    x.Sheets(&quot;Sheet1&quot;), then the chart can be added
    with the following lines in the MSProject macro:</font></li><br> <br>
    
        <p><b>x.Charts.Add</b></font>
        <p><b>x.ActiveChart.ChartWizard
        _</b></font>
        <p><b>Source:=s.Cells(1,
        1).CurrentRegion, _</b></font>
        <p><b>PlotBy:=2,
        _</b></font>
        <p><b>CategoryLabels:=1</b></font></ol>
    

</FONT></BODY>
</html>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Input # Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec266"></A>Input # Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec267"></A>Description</H2><P>Reads data from an open sequential file and assigns the data to variables.</P>
<H2><A NAME="sec268"></A>Syntax</H2><P><B>Input</B> <B>#</B><I>filenumber</I><B>, </B><I>varlist</I></P>
<P>The <B>Input #</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>filenumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any valid file number.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varlist</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Comma-delimited list of variables that are assigned values read from the file — can’t be an array or object variable. However, variables that describe an element of an array or user-defined type may be used.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec269"></A>Remarks</H2><P>Use this statement only with files opened in <B>Input</B> or <B>Binary</B> mode.</P>
<P>When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="125pt" VALIGN="TOP"><COL WIDTH="242pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Data</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Value assigned to variable</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Delimiting comma or blank line</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Empty</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">#NULL#</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Null</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">#TRUE# or #FALSE#</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>True </B>or<B> False</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">#<I>yyyy-mm-dd hh:mm:ss</I>#</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The date and/or time represented by the expression</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">#ERROR <I>errornumber</I>#</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>errornumber</I> (variable is a <B>Variant</B> tagged as an error)</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>Double quotation marks (") within input data are ignored. </P>
<P>Data items in a file must appear in the same order as the variables in <I>varlist</I> and match variables of the same data type. If a variable is numeric and the data is not, a value of zero is assigned to the variable.</P>
<P>If the end of the file is reached while a data item is being input, the input is terminated and an error occurs.</P>
<P CLASS="t">  </P>
<P><B>Note</B>   To correctly read data from a file into variables, you should always use the <B>Write #</B> statement instead of the <B>Print # </B>statement to write the data to the files. Using <B>Write #</B> ensures that each separate data field is properly delimited.</P>
<P CLASS="t">  </P>
<H2><A NAME="sec270"></A>See Also</H2><P><B>Input</B> Function, <B>Open</B> Statement, <B>Print #</B> Statement, <B>Write #</B> Statement.</P>
<H2><A NAME="sec271"></A>Example</H2><P>This example uses the <B>Input #</B> statement to read data from a file into two variables. This example assumes that TESTFILE is a file with a few lines of data written to it using the <B>Write #</B> statement; that is, each line contains a string in quotations and a number separated by a comma, for example, (“Hello”, 234).</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Open "TESTFILE" For Input As #1        ' Open file for input.While Not EOF(1)                    ' Loop until end of file.
    Input #1, MyString, MyNumber        ' Read data into two variables.
    Debug.Print MyString, MyNumber    ' Print data to Debug window.#1                                ' Close file.
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

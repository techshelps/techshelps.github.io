<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Object Data Type</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>The Object Data Type</H2><P CLASS="t">A variable that contains a reference to an object within Microsoft Excel or within some other application can be declared with the <B>Object</B> data type. You can assign an object variable (using the <B>Set</B> statement) to represent any actual object recognized by the application.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim wk As Object
Set wk = Worksheets(1)
</FONT></PRE>
<P CLASS="t">Object variables are initialized to the special value <B>Nothing</B>. You can test for this value using the <B>Is</B> function.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">If wk Is Nothing Then    'object variable not set
</FONT></PRE>
<P CLASS="t">Whenever possible, declare data as the most specific object type possible. For example, declare a variable that will represent a collection of ovals as <B>Ovals</B> instead of <B>DrawingObjects</B>; or, in the preceding code , declare the variable that will represent a worksheet as <B>Worksheet</B> instead of <B>Object</B>. Visual Basic can resolve references to the properties and methods of objects with specific types before you run the application (properties and methods for objects declared with the <B>Object</B> type must be resolved at run time; this slows down your macro). Specific object types are listed in the Object Browser.</P>
<P CLASS="t">When working with objects contained in other applications, instead of using the <B>Variant</B> type or the generic <B>Object</B> type, declare objects as they're listed in the Objects/Modules box in the Object Browser. This ensures that Visual Basic recognizes the specific type of object you're referencing, allowing the reference to be resolved at compile time.</P>
<P CLASS="t">For more information about creating and assigning objects and object variables, see Chapter 4, "Objects and Collections."</P></FONT>
</FONT></BODY></HTML>

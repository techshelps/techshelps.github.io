<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 4: Function Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817461">Lesson
4: </font></a><a name="DDE_LINK6">Function
Procedures</font></a></H1>
  
        <p><b>Lesson
        Objectives</b></font></p>
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
    
    <ul>
        <li>Explain
            why Function procedures differ from Sub procedures.</font></li>
        <li>Define
            a function that accepts a variable-length argument
            list or has optional arguments.</font></li>
        <li>Write a
            function that accepts an array of values and returns
            an array of values to a worksheet.</font></li>
    </ul>


<p><b>Some Topics
to be introduced in this lesson include:</b></font></p>
  
        <ul>
            <li>How
                Function procedures differ from Sub procedures</font></li>
            <li>Returning
                data</font></li>
            <li>Arrays</font></li>
        </ul>
    
    <p><b><i>Function
    Procedures</i></b></font></p>


<p>Function
procedures differ from sub procedures in that functions may
return a value while subs may not. Further, function procedures
must be called from a Macro, they will not appear on the
Tools-Macros menu.</font></p>

<p>Function
procedures are declared using the following structure:</font></p>
  <p><b>Function </b><b><i>Name</i></b><b>
    (</b><b><i>arguments</i></b><b>)</b></font></p>
    <p><b>{Function
    code}</b></font></p>
    <p><b>Name =
    {The return value}</b></font></p>
    <p><b>End
    Function</b></font></p>


<p>For example,
this function macro accepts a temperature entered as Fahrenheit
and returns the equivalent Celsius temperature:</font></p>
  <p><b>Function
    FtoC (Temperature)</b></font></p>
    <p><b>FtoC =
    (Temperature - 32) / 1.8</b></font></p>
    <p><b>End
    Function</b></font></p>


<p>The
accessibility of the functions depends on how they are declared
when they are defined. <i>By default</i>, the functions have
Public access, and can be used by any module within the library
that contains the function. If the keyword <b>Private</b> is
placed before <b>Function</b>, that function may only be called
from within the same module.</font></p>
  
        <p><b>Passing Data
        to a Function Procedure</b></font></p>
    


<p>When an argument
is specified without a data type, VB will assume that the
argument is a reference of the Variant data type. VB will perform
the necessary conversion based on what is passed but will cause
VB to allocate more memory than is probably needed. To explicitly
specify the data type, include it in the argument list:</font></p>
  <p><b>Function
    FtoC (Temperature as Integer)</b></font></p>
    
        <p><b>Optional
        Arguments</b></font></p>
    


<p>Function
arguments can be made optional by using the <b>Optional</b>
keyword in front of the argument name when declared in the <b>Function</b>
statement. </font></p>
  <p><b>Function
    MyFunction(arg1, arg2, Optional arg3, Optional arg4)</b></font></p>


<p>All arguments
that follow this argument in the list must also be optional and
must be declared using the <b>Optional</b> keyword. Optional
arguments must be of the variant data type. The <b>IsMissing</b>
function can be used to test whether an optional argument was
included in the argument list when a function is called.</font></p>

<p>The following is
an example of using <b>Option</b> and <b>IsMissing</b>, which
sets a default of &quot;10&quot; for the second number if
IsMissing returns a true:</font></p>
  <p><b>Function
    AddEm(Number1, Optional Number2)</b></font></p>
    <p><b>If
    IsMissing(Number2) Then Number2 = 10</b></font></p>
    <p><b>AddEm =
    (Number1 + Number2)</b></font></p>
    <p><b>End
    Function</b></font></p>


<p><a name="_Toc307792512"><font color="#000000" size="6"
face="Verdana"><b><i>Lesson 4 Exercises</i></b></font></a></p>
<ol>
  <li>Explain
    the difference between Sub procedures and Function
    procedures.</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Only
    one difference: function will return a value.</i></b></font></p>
    <li>How can a
    programmer check if an optional argument was passed to a
    function?</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>He/she
    can use the IsMissing function within an If statement to
    check to see if the argument has been passed to the function.
    IsMissing will return True if no argument was passed and will
    return False if it was.</i></b></font></p>
    <li>Create a
    function that returns the square root of a number multiplied
    by 6.</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Function
    MyPoser(pNumber)<br>
    MyPower = pNumber ^ .05 * 6<br>
    End Function</i></b></font></p></ol>

</FONT></BODY>
</html>

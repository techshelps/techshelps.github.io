<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Object Browser</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Using the Object Browser</H1><P CLASS="t">While writing your Visual Basic procedures, you might want to see what objects are available in the active workbook, including the names of procedures you've already written. You can look at this information using the Object Browser.</P>
<P CLASS="t">The Object Browser performs three important functions:</P>
<UL><LI>It gives you a quick way to navigate in your code.</LI><LI>It shows you what objects are available for your procedures, including the properties and methods of those objects.</LI><LI>It gives you a way to paste code templates into a module. You can edit the pasted code to make writing procedures faster and less prone to typing errors.</LI></UL><P></P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To display the Object Browser</B></P>
<UL><LI>On the View menu, click Object Browser.</li></ul>
<P CLASS="a"><img src="20699.gif"></P>
<P>Object Browser button</P>
<P CLASS="lt1">You can also click the Object Browser button on the Visual Basic toolbar or press F2 from within a module.</P>
<P CLASS="a">        <img src="APG0410.gif"></P>
<H3><A NAME="sec0"></A>What Appears in the Object Browser</H3><P CLASS="t">The Object Browser dialog box displays either of two sets of information:</P>
<UL><LI>The names of all the objects in a library, in addition to all the properties and methods of each object</LI><LI>The names of all the Visual Basic modules in a workbook, in addition to the names of all the procedures in each module</LI></UL><P></P>
<P CLASS="t">The Object Browser contains a box that lists the names of all the <I>object libraries</I> and all the workbooks referenced by the workbook that contains the module you're creating. An object library is a file or a part of an application that provides Visual Basic with information about objects. Libraries and workbooks identify the objects you can use in your procedures. For more information about references to libraries and workbooks, see "Creating a Reference to a Workbook" in Chapter 1.</P>
<P CLASS="t">The list in the Libraries/Workbooks box includes:</P>
<UL><LI>Microsoft Excel, which provides a library of objects specific to Microsoft Excel</LI><LI>VBA (Visual Basic for applications), which provides functions and other language features you can use in Microsoft Excel</LI><LI>The open workbook, which contains your code</LI><LI>Any other libraries referenced by the code in your workbook</LI></UL><P></P>
<P CLASS="t">Below the Libraries/Workbooks box is the Objects/Modules box. The contents of this box depend on whether the selection in the Libraries/Workbooks box is an object library name or a workbook name, as described in the following table.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="160pt" VALIGN="TOP"><COL WIDTH="187pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	>
<P CLASS="thf"><B>If the Libraries/Workbooks box shows</B></P></TD><TD VALIGN="TOP">
	>
<P CLASS="th"><B>The Objects/Modules box shows</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	>
<P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP">
	>
<P CLASS="tt">The name of an object library</P></TD><TD VALIGN="TOP">
	>
<P CLASS="tt">The available objects in the library, or the categories of available functions</P></TD></TR><TR><TD VALIGN="TOP">
	>
<P CLASS="tt">The name of a workbook</P></TD><TD VALIGN="TOP">
	>
<P CLASS="tt">The names of all the modules in the workbook</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">To the right of the Objects/Modules box is the Methods/Properties box. The contents of this box depend on whether the items listed in the Objects/Modules box are the objects in a library or the modules in a workbook, as described in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="160pt" VALIGN="TOP"><COL WIDTH="188pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	>
<P CLASS="thf"><B>If the Objects/Modules box shows</B></P></TD><TD VALIGN="TOP">
	>
<P CLASS="th"><B>The Methods/Properties box shows</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	>
<P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP">
	>
<P CLASS="tt">The objects in an object library</P></TD><TD VALIGN="TOP">
	>
<P CLASS="tt">The properties and methods of each object in the library</P></TD></TR><TR><TD VALIGN="TOP">
	>
<P CLASS="tt">The modules in a workbook</P></TD><TD VALIGN="TOP">
	>
<P CLASS="tt">The names of the procedures in each module, including property procedures</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H3><A NAME="sec1"></A>Moving Between Procedures</H3><P CLASS="t">You can use the Object Browser to move quickly from one procedure in a workbook to another.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To move to a procedure in a workbook</B></P>
<P CLASS="ls">    1.    Switch to a Visual Basic module.</P>
<P CLASS="ls">    2.    On the View menu, click Object Browser.</P>
<P CLASS="ls">    3.    In the Libraries/Workbooks box, click the name of the workbook that contains the procedure you want to use.</P>
<P CLASS="ls">    4.    In the Objects/Modules box, click the name of the module that contains the procedure you want.</P>
<P CLASS="ls">    5.    In the Methods/Properties box, click the name of the procedure.</P>
<P CLASS="ls">    6.    Click Show.</P>
<P></P>
<P CLASS="t">The Object Browser moves you to the module that contains the procedure you selected. The insertion point appears to the left of the line immediately following the procedure declaration line.</P>
<H3><A NAME="sec2"></A>Browsing Objects</H3><P CLASS="t">You can also use the Object Browser to see:</P>
<UL><LI>The objects available in the libraries referenced by your workbook.</LI><LI>The properties and methods of those objects.</LI></UL><P></P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To find the properties and methods of objects</B></P>
<P CLASS="ls">    1.    On the View menu, click Object Browser.</P>
<P CLASS="ls">    2.    In the Libraries/Workbooks box, click the name of the object library you want to browse or that contains the object you want to use.</P>
<P CLASS="ls">    3.    In the Objects/Modules box, click the name of the object for which you want to see properties and methods.</P>
<P></P>
<H3><A NAME="sec3"></A>Pasting Code</H3><P CLASS="t">When you finish using the Object Browser to find an object with a property or method you want to use, you can paste a fragment of Visual Basic code from that property or method into your procedure. You can then edit the code fragment to fit the needs of your procedure. The Object Browser pastes the code fragment at the insertion point in the active module.</P>
<P CLASS="a">    <img src="APG0411.gif"></P>
<P CLASS="t">The code fragment includes syntax for named arguments when appropriate. After you paste the code fragment into your procedure, you can delete any arguments you don't need and then add the appropriate values for the arguments you want to&nbsp;use.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To paste a code fragment into a procedure</B></P>
<P CLASS="ls">    1.    In a Visual Basic module, place the insertion point at the location in the code where you want to paste the code fragment.</P>
<P CLASS="ls">    2.    On the View menu, click Object Browser.</P>
<P CLASS="ls">    3.    In the appropriate boxes, click the library and the object whose property or method you want to use.</P>
<P CLASS="ls">    4.    In the Methods/Properties box, click the property or method you want to paste into the procedure.</P>
<P CLASS="ls">    5.    Click Paste.</P>
<P CLASS="t"></P>
</BODY></HTML>

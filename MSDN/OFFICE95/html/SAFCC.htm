<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Converter API</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
	
<H1 CLASS="title">File Converter API</H1>  </P>
Microsoft Office Technical Documentation Group</P>
Created: November, 1995</P>
Microsoft Excel provides a file converter application programming interface (API) with which you can write a custom input file converter. For example, the Quattro Pro for Windows file converter that is included with Microsoft Excel 7.0 uses the file converter API.</P>
Although the file converter API is identical across operating environments, a converter is platform-specific, which means that it must be compiled into a 32-bit DLL for Windows NT and Windows 95, a 16-bit DLL for Windows 3.1, and a code resource for the Macintosh.</P>
This kit includes a sample file converter that converts the text file created by the BiffView utility. The sources and the compiled 32-bit DLL are in the \Sample\Undump folder. The 32-bit Undump project was developed and tested with Microsoft Visual C++ version 2.2.</P>
<P><OBJECT id=sample1 type="application/x-oleobject"
classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Office 95 Samples">
<PARAM name="Item2" value="3905">
</OBJECT><a href="javascript:sample1.Click()">
Click to open or copy the FILECONV project files</A></P>File Converter Background</P>
This section describes the file converter user interface, the file converter selection algorithm, file converter internals and error handling, and system registry settings that expose the converter to Microsoft Excel.</P>
File Converter User Interface</P>
File converters are seamlessly integrated into the Open dialog box (File menu). To expose the converter to the user, you add a filter option to the List Files Of Type box in the Open dialog box. This additional option is created by a key in the System Registry. If you installed the Quattro Pro for Windows converter when you installed Microsoft Excel, you can see the Quattro Pro for Windows (*.wb1) filter option in the List Files Of Type box in the Open dialog box.</P>
If you didn't install the Quattro Pro for Windows converter, you can run the Microsoft Excel setup program to add it. You can also manually add the option for the Undump.dll converter to the System Registry, as described in <A class="normal" href="#PT3">Exposing the Converter to Microsoft Excel</A>.</P>
File Converter Selection Algorithm</P>
Microsoft Excel tries to detect the file format automatically when you open a file, as shown in the following pseudocode.</P>
  </P>
</P>
For Each built-in file format except TEXT and CSV</P>
    Test the first n bytes of the file until either a format is</P>
        recognized or until all built-in formats have been tried</P>
        (except TEXT and CSV)</P>
</P>
If file format is still not recognized Then</P>
    For each file format in InstallableInputConvertersList</P>
        Tell input converter DLL to sniff the first n bytes of the</P>
            file until either a format is recognized or all of the</P>
            installable input converters have been tried</P>
</P>
If file is still not recognized Then </P>
    Assume the file is TEXT format and start the Text Import Wizard</P>
  </P>
You can force Microsoft Excel to try a particular file converter first by selecting the converter's filter option in the List Files Of Type box. In this case, Microsoft Excel attempts to detect the file format only if the file converter doesn't recognize the file format.</P>
In Undump.c, the IsFormatOk function detects the file format by comparing the passed-in string to the string in the variable szBIFF5.</P>
Inside the File Converter</P>
The file recognition function (in Undump.c, the IsFormatOk function) is the first converter function that Microsoft Excel calls. If your converter recognizes the file format, Microsoft Excel then calls the converter's initialization function to give you an opportunity to do any necessary initialization. The initialization function in Undump.c is called InitLoad.</P>
After initialization, Microsoft Excel repeatedly calls your converter to get BIFF records. Your code must provide the BIFF records in the format shown in the article <A class="normal" href="S8743.HTM">Microsoft Excel File Format</A>. Your code is also responsible for the actual conversion from the non-native data format to BIFF format. Conversion ends when your converter returns the last EOF record in the file.</P>
The converter is called three times for each BIFF record: the first call returns the BIFF record type, the second call returns the number of bytes in the record data, and the third call returns the data. To see examples of these calls in Undump.c, look for the following three functions: RtNextRecord, CbNextRecord, and DataNextRecord.</P>
To help you write a robust converter, Microsoft Excel exposes a callback function that your converter should use for memory management and for file input and output. For more information, see <A class="normal" href="#PT4">Callback Function</A>.</P>
You can compile a debug build of Undump.dll and then use the Visual C++ debugger to watch the entire conversion process. Undump is a very straightforward example of a converter, because there is a one-to-one correspondence between Undump "records" and BIFF records. The records can be processed sequentially, as they are read from the BiffView-created text file.</P>
Error Handling</P>
If Microsoft Excel encounters an error during file conversion, it calls your converter before displaying an error message to the user. This mechanism gives your code an opportunity to do last-minute cleanup (for example, freeing allocated buffers). Because Microsoft Excel provides the file input/output services, your code doesn't have to handle file cleanup. In Undump.c, the error handler is the function AbortLoad (although there is no error handling in the program, just a short cleanup function).</P>
Your converter can notify Microsoft Excel of a fatal error by returning the special BIFF record type rtNil, which is defined in the header file Biff.h in the \Sample\Undump\Win32 folder. This record causes Microsoft Excel to call your error handler and then stop the file load. The rtNil record has no record data field.</P>
<A NAME="PT3"></A>Exposing the Converter to Microsoft Excel</P>
To expose the file converter in 32-bit Windows products, you add a value to the System Registry. To expose the file converter in 16-bit Windows products, you edit the Excel5.ini file, and on the Macintosh, you edit the Excel Settings (5) file.</P>
<B>Win32</B></P>
In Microsoft Excel for Windows NT and Windows 95, you add a string value entry to the HKEY_CURRENT_USER\Software\Microsoft\Excel\7.0\Converters key. For example, Setup adds the following string value entry when you install the Quattro Pro for Windows file converter. The value name is QPro:</P>
  </P>
</P>
Quattro Pro for Windows (*.wb1), C:\MSOffice\Excel\xlqpw.dll, *.wb1</P>
  </P>
The string value entries are in the following form:</P>
  </P>
</P>
&lt;Friendly description&gt;, &lt;DLL filename, including path&gt;,</P>
    &lt;Search filter&gt;</P>
  </P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Token</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>&lt;Friendly description&gt;</td>
<td width=70%>The text that appears in the List Files Of Type box in the Open dialog box (File menu).</td></tr>
</tr>
<tr valign=top>
<td width=30%>&lt;DLL filename, including path&gt;</td>
<td width=70%>The filename and path of the converter DLL. If you omit the path, the DLL must be in the same folder as Excel.exe.</Td>
</tr>
<tr valign=top>
<td width=30%>&lt;Search filter&gt;</td>
<td width=70%>A file-filter string — for example, *.xl*</td></TBODY></TABLE>
<P CLASS="spacing"><BR></P>  </P>
<B>Note</B>   If you did not install any file converters during Microsoft Office setup (or Microsoft Excel setup), then the Converters key will not exist. In this case, you can use the Registry Editor to add the key manually, or create a .reg file to add the key automatically.</P>
  </P>
<B>Win16</B></P>
In Microsoft Excel for 16-bit Windows, the [Converters] section of Excel5.ini contains a line for each converter. The line is very similar to the string value entry in the Win32 system registry, except that a tag name is added to the string.</P>
  </P>
</P>
&lt;ConverterTag&gt; = &lt;Friendly description&gt;, &lt;DLL filename, including path&gt;,</P>
    &lt;Search filter&gt;</P>
  </P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Token</B></td>
<td class=label width=70%><B>Description</B></td>
</tr><tr valign=top>
<td width=30%>&lt;ConverterTag&gt;</TD>
<td width=70%>A unique tag name in the [Converters] section; ignored by Microsoft Excel.</TD>
</TR><tr VALIGN="TOP">
<td width=30%>&lt;Friendly description&gt;</TD>
<td width=70%>The text that appears in the List Files Of Type box in the Open dialog box (File menu).</TD>
</TR><Tr VALIGN="TOP">
<td width=30%>&lt;DLL filename, including path&gt;</TD>
<td width=70%>The filename and path of the converter DLL. If you omit the path, the DLL must be in the same folder as Excel.exe.</TD>
</TR><Tr VALIGN="TOP">
<td width=30%>&lt;Search filter&gt;</TD>
<td width=70%>A file-filter string — for example, *.xl.*</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Macintosh</B></P>
On the Macintosh, file extensions (for example, .xls) are replaced by one or more four-character file types (for example, XCEL). To add file converters to the Excel Preferences (5) file, you must use ResEdit to add a GRID resource. If a GRID resource named Converters doesn't exist, then create one. Each GRID resource is an array of words that are actually string resource IDs.</P>
Each GRID resource has the following form:</P>
  </P>
</P>
&lt;name that appears in drop-down&gt;,"&lt;full path to file converter&gt;",</P>
    &lt;list of 4-letter file types separated by ;&gt;</P>
  </P>
For example:</P>
  </P>
</P>
Undump BiffView Files,"HD80:Excel5:undump.res",lttr;XLS5</P>
  </P>
The "full path to file converter" token must contain the full path and filename of the converter code resource, and it must be enclosed in quotation marks, as shown in the preceding example. Quotation marks are optional for the other two tokens.</P>
For more information about editing the Excel Preferences (5) file, see <A class="normal" href="SADD9.HTM#sec14">Specifying Settings in Microsoft Excel version 5.0 for the Macintosh</A>.</P>
File Converter API Functions</P>
This section describes the EFCP structure, the XlConverter function, and the callback function EfcCallBack.</P>
The EFCP Structure</P>
When Microsoft Excel calls the file converter, it passes a pointer to an EFCP data structure, which is defined in Xlconv.h, as shown in the following examples and table.</P>
<B>Windows</B></P>
  </P>
</P>
typedef struct _efcParam</P>
    {</P>
    long lcb;</P>
    BYTE FAR *lprgb;</P>
    FARPROC lpfn;</P>
    } EFCP, FAR * LPEFCP;</P>
  </P>
<B>Macintosh</B></P>
  </P>
</P>
typedef struct _efcParam</P>
    {</P>
    long lcb;</P>
    unsigned char *lprgb;</P>
    ProcPtr lpfn;</P>
    } EFCP, * PEFCP;</P>
  </P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</P></TD>
<td width=70%>Byte count</P></TD></tr>
<Tr VALIGN="TOP">
<td width=30%>lprgb</P></TD>
<td width=70%>Pointer to a buffer</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</P></TD>
<td width=70%>Pointer to a Microsoft Excel callback function</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P>For more information about using this structure, see the following sections, "Converter Entry Point" and "Callback Function."</P>
Converter Entry Point</P>
The file converter should export a single function as its entry point, as shown in the following examples.</P>
<B>Win32</B></P>
  </P>
</P>
short FAR PASCAL XlConverter(iAction, lpefcp)</P>
  </P>
<B>16-bit Windows</B></P>
  </P>
</P>
short FAR PASCAL __export XlConverter(short iAction, LPEFCP lpefcp)</P>
  </P>
The __export keyword is required for 16-bit DLLs.</P>
<B>Macintosh</B></P>
  </P>
</P>
short PASCAL XlConverter(short iAction, LPEFCP lpefcp)</P>
  </P>
The lpefcp parameter is the pointer to the EFCP structure. The command ID, iAction, is the converter opcode. Its values, defined in Xlconv.h, are listed in the following table.</P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Value</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>iActionIsFormatOk</TD>
<td width=70%>Returns TRUE if the converter recognizes the file format.</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>iActionInitLoad</TD>
<td width=70%>Initializes the converter; returns TRUE if successful.</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>iActionRtNextRecord</TD>
<td width=70%>Returns the record type of the next BIFF record; the record types are defined in BIFF.H.</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>iActionCbNextRecord</TD>
<td width=70%>Returns the number of bytes in the data field of the next BIFF record.</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>iActionDataNextRecord</TD>
<td width=70%>Returns the data for the next BIFF record; see the article <A class="normal" href="S8743.HTM">Microsoft Excel File Format</A>.</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>iActionAbortLoad</TD>
<td width=70%>Indicates that Microsoft Excel has detected a fatal error; clean up now.</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P>The following sections describe the opcodes in more detail.</P>
<B>iActionIsFormatOk</B></P>
Microsoft Excel asks the converter whether it recognizes the format of the file that the user is opening.</P>
This is the first opcode sent to the converter. If the converter returns FALSE, Microsoft Excel doesn't call the converter again for this file.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=70%>Size of the file-recognition string</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lprgb</TD>
<td width=70%>Pointer to the buffer containing the file-recognition string</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</TD>
<td width=70%>Pointer to the callback function</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
TRUE if the converter recognizes this file format.</P>
FALSE if the converter doesn't recognize this file format.</P>
<B>iActionInitLoad</B></P>
Microsoft Excel asks the converter to do any preconversion initialization. This opcode is sent after the iActionIsFormatOk call returns TRUE.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=70%>Size of the input file.</TD></tr>
<Tr VALIGN="TOP">
<td width=30%>Lprgb</TD>
<td width=70%>Pointer to a buffer containing the locale ID (LCID).</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>Lpfn</TD>
<td width=70%>NULL</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
TRUE if the converter initialized successfully.</P>
FALSE if the converter encountered a fatal error. This return value causes Microsoft Excel to call the converter a final time, using the iActionAbortLoad opcode.</P>
<B>iActionRtNextRecord</B></P>
Microsoft Excel asks for the record type of the next BIFF record to be received from the converter. Record types are defined in Biff.h.</P>
This is one of the three calls (along with iActionCbNextRecord and iActionDataNextRecord) in the main conversion loop.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=70%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lprgb</TD>
<td width=70%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</TD>
<td width=70%>Unused</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
BIFF record type as defined in Biff.h. The first record type must be rtBOF. Return rtEOF to indicate the end of the conversion.</P>
<B>iActionCbNextRecord</B></P>
Microsoft Excel asks the converter for the length of the data in the next BIFF record. The return value is used to allocate buffer storage for the following iActionDataNextRecord call.</P>
This is one of the three calls (along with iActionRtNextRecord and iActionDataNextRecord) in the main conversion loop.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=70%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lprgb</TD>
<td width=70%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</TD>
<td width=70%>Unused</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
The size of the next BIFF record, in bytes. This value must be &lt;=cbBiffMax as defined in Biff.h; if it is greater than this, Excel calls iActionAbortLoad.</P>
<B>iActionDataNextRecord</B></P>
Microsoft Excel asks the converter for the BIFF record data.</P>
This is one of the three calls (along with iActionRtNextRecord and iActionCbNextRecord) in the main conversion loop.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=70%>Length of data</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lprgb</TD>
<td width=70%>Pointer to the buffer for the BIFF record data. (the size of the buffer is cbBiffMax)</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</TD>
<td width=70%>Unused</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lprgb</TD>
<td width=70%>Pointer to the actual data in the BIFF record; for BIFF record descriptions, see the article <A class="normal" href="S8743.HTM">Microsoft Excel File Format</A>. The record data starts at offset 4 in the record descriptions in that article.</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Return value</B></P>
An integer from 0 to 100 that indicates the percentage-complete status of the conversion. Microsoft Excel uses this value to update the load progress indicator in the status bar. The return value should equal 100 when your converter returns rtEOF. See the DataNextRecord function in Undump.c for an example of the percentage-complete calculation.</P>
<B>iActionAbortLoad</B></P>
Microsoft Excel informs the converter that it has detected a fatal load error; called after the converter returns FALSE for the iActionInitLoad call to the converter. This is the only chance for the converter to do any necessary cleanup. Because Microsoft Excel provides file input/output services, your code doesn't have to handle file cleanup.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lcb</TD>
<td width=30%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lprgb</TD>
<td width=30%>Unused</TD></TR>
<Tr VALIGN="TOP">
<td width=30%>lpfn</TD>
<td width=30%>Unused</TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
Ignored.</P>
<P><A NAME="PT4"></A>Callback Function</P>
Your converter should always use the callback function for memory management and for file input/output. This helps ensure peaceful coexistence with Microsoft Excel. The callback function is declared within Microsoft Excel as follows:</P>
  </P>
</P>
short FAR PASCAL EfcCallBack(            short int iefccmd,</P>
                                        BYTE FAR *lpb,</P>
                                        long int lcb)</P>
  </P>
The command ID, iefccmd, is the callback opcode. Its values, defined in Xlconv.h, are listed in the following table.</P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Value</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>iefccmdCbFromFile</TD>
<td width=70%>Asks Microsoft Excel to read lcb bytes from the input file stream</TD></TR>
<TR VALIGN="TOP">
<td width=30%>iefccmdAllocCb</TD>
<td width=70%>Asks Microsoft Excel to allocate a buffer</TD></TR>
<TR VALIGN="TOP">
<td width=30%>iefccmdFreeCb</TD>
<td width=70%>Asks Microsoft Excel to free a buffer</TD></TR>
<TR VALIGN="TOP">
<td width=30%>iefccmdGetPos</TD>
<td width=70%>Asks Microsoft Excel to get the current stream position of the file pointer</TD></TR>
<TR VALIGN="TOP">
<td width=30%>iefccmdSetPos</TD>
<td width=70%>Asks Microsoft Excel to set the current stream position of the file pointer</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P>The lpb and lcb parameters take on different meanings, as described in the following sections.</P>
<B>iefccmdCbFromFile</B></P>
Asks Microsoft Excel to read lcb bytes from the input file stream.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a buffer to hold file data (remember, the converter is responsible for allocating this buffer)</TD></TR>
<TR VALIGN="TOP">
<td width=30%>lcb</TD>
<td width=70%>Size of a file buffer</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to the buffer that contains the file data</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Return value</B></P>
The actual byte count written to the file buffer. Microsoft Excel attempts to fill the buffer completely; the actual count will be less than the requested size if an EOF is encountered in the input stream before the buffer is full.</P>
<B>iefccmdAllocCb</B></P>
Asks Microsoft Excel to allocate a buffer for the converter.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a 32-bit variable (DWORD or long) that stores the address of the allocated buffer</TD></TR>
<TR VALIGN="TOP">
<td width=30%>lcb</TD>
<td width=70%>Requested buffer size</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a 32-bit variable (DWORD or long) that stores the address of the allocated buffer</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Return value</B></P>
The actual count of bytes allocated. Returns 0 to indicate an out-of-memory condition and to give your converter an opportunity to request a smaller amount of memory instead.</P>
  </P>
<B>Note</B>   With the 16-bit Windows version 3.1, you can allocate only a 64K buffer (actually slightly less than 64K because of system overhead). With 32-bit Windows NT, you can allocate a buffer up to either the available memory limit or 4 GB — whichever is smaller.</P>
  </P>
<B>iefccmdFreeCb</B></P>
Asks Microsoft Excel to free a buffer that was previously allocated using an iefccmdAllocCb call.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a 32-bit variable (DWORD or long) that stores the address of the buffer to be freed</TD></TR>
<TR VALIGN="TOP">
<td width=30%>lcb</TD>
<td width=70%>Size of the buffer to be freed</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None.</P>
<B>Return value</B></P>
None. The converter should assume that this call always succeeds.</P>
<B>iefccmdGetPos</B></P>
Asks Microsoft Excel to get the current (zero-based) offset in the input file stream.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>lPointer to a 32-bit variable (DWORD or long) to store the stream offset</TD></TR>
<TR VALIGN="TOP">
<td width=30%>lcb</TD>
<td width=70%>lUnused</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a 32-bit variable (DWORD or long) that contains the current input stream offset</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Return value</B></P>
Unused.</P>
<B>iefccmdSetPos</B></P>
Asks Microsoft Excel to set the current (zero-based) offset in the input file stream.</P>
<B>Input</B></P>
  </P>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><B>Member</B></td>
<td class=label width=70%><B>Description</B></td>
</tr>
<tr valign=top>
<td width=30%>lpb</TD>
<td width=70%>Pointer to a 32-bit variable (DWORD or long) that contains the offset you want</TD></TR>
<TR VALIGN="TOP">
<td width=30%>lcb</TD>
<td width=70%>Unused</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><B>Output</B></P>
None; lpb is unchanged.</P>
<B>Return value</B></P>
Unused.</P>
Using File Converters from the Macro Languages</P>
In Visual Basic for applications, you can use the <B>FileConverters</B> property to return an <I>n </I>x 3<I> </I>array that contains information about installed converters, where <I>n</I> is equal to the number of installed converters. The other dimension contains the three strings from the entry in the Excel5.ini (or equivalent) file.</P>
In the Microsoft Excel version 4.0 macro language, you can use the GET.WORKSPACE(62) macro function to list the installed converters. Array-enter this function in enough cells to store the maximum number of expected converters. Uninstalled converters correspond to the #N/A error value in the cells.</P>
The <B>Open</B> method (Visual Basic) and the OPEN() macro function both contain a Converter argument that can be used to override the converter automatic detection algorithm. The argument is a 1-based index to the table of converters (as given by the <B>FileConverters</B> property or the GET.WORKSPACE(62) macro function).</P>
</P>
</P>
</P>
 </P>
</BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Friendly Names for Dialog Box Controls</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Friendly Names for Dialog Box Controls</H2><P CLASS="t">Naming an edit box "ChartDataRange" makes code is much more readable compared to Excel's default control names, which look something like "EditBox12".  Assign custom names to controls by selecting the control in the dialog editor, then clicking in the range name drop-down.  Type in any friendly name, as long as it adheres to VBA syntax rules.  After typing the name, be sure to press return to get Excel to assign it to the control.  </P>
<P CLASS="t">A caution is in order here.  After changing the name of a dialog box control, be sure to use quotes around the name when referring to it through a collection object.  Excel will accept a name without the quotes–but Excel uses an un-quoted name as a reference to a variable!  If the variable is unassigned, Excel will think it is item zero of the collection.  In this situation some very frustrating errors can happen, such as "EditBoxes method of DialogSheet class failed."  </P>
<P CLASS="t">Range Name Drop-Down, also used for entering control names.  </P>
<P CLASS="t"><img src="20501.gif"></P>
<P>Figure 3.  Using the Range Name Drop-Down to define maintainable control names</P>
<P CLASS="t">Here's an example.  To display a range address in an edit box called RangeEdit:  </P>
<P CLASS="t">Do this:  </P>
<P></P>
<P>DialogSheets("Wiz1").EditBoxes("RangeEdit").Caption = DataRange.Address</P>
<P>' or...</P>
<P>Dim REdit As String</P>
<P>REdit = "RangeEdit"</P>
<P>DialogSheets("Wiz1").EditBoxes(REdit).Caption = DataRange.Address</P>
<P></P>
<P CLASS="t">But don't do this:</P>
<P CLASS="t">  </P>
<P>'Assuming RangeEdit is not a declared variable, this won't work!</P>
<P>DialogSheets("Wiz1").EditBoxes(RangeEdit).Caption = DataRange.Address</P>
<P></P>
<P CLASS="t">Expressions also accept control names placed inside square brackets:  </P>
<P></P>
<P>DialogSheets("Wiz1").[RangeEdit].Caption = DataRange.Address</P>
<P></P>
<P CLASS="t">Spaces are permitted in control names to make them more readable.  </P></FONT>
</FONT></BODY></HTML>

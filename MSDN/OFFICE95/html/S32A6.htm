<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>On Error</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H1 CLASS="h2">On Error</H1><P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>On Error Goto</B> <I>Label</I></P>
<P CLASS="syn"><B>On Error Resume Next</B></P>
<P CLASS="syn"><B>On Error Goto 0</B></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Establishes an "error handler" — typically, a series of instructions that takes over when an error occurs. When an error occurs in a macro that does not contain the <B>On Error</B> statement, an error message is displayed and the macro quits.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="238pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>This form</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Performs this action</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>On Error Goto </B><I>Label</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Jumps from the line where the error occurred to the specified label. The instructions following this label can then determine the nature of the error (using the special variable <B>Err</B>) and take some appropriate action to correct or resolve the problem. For more information, see <B>Err</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>On Error Resume Next</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Continues running the macro from the line that follows the line where the error occurred and resets <B>Err</B> to 0 (zero). In effect, the error is ignored.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>On Error Goto 0</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Disables the error trapping established by an earlier <B>On Error Goto</B> or <B>On Error Resume Next</B> statement and sets <B>Err</B> to 0 (zero).</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Once an error triggers an error handler, no further error handling occurs until <B>Err</B> is reset to 0 (zero). Usually, you should place an Err&nbsp;=&nbsp;0 instruction at the end of your error handler. Do not include Err&nbsp;=&nbsp;0 in the middle of an error handler or you risk creating an endless loop if an error occurs within the handler.</P>
<P CLASS="t">Note that an error handler established in the main subroutine is not in effect when control passes to another subroutine. To trap all errors, each subroutine must have its own <B>On Error</B> statement and error handler. After control is returned to the main subroutine, the main <B>On Error</B> instruction is again in effect.</P>
<P CLASS="t">WordBasic generates errors with numbers less than 1000; Word itself generates errors with numbers 1000 or greater. Error handlers can trap both WordBasic and Word errors. However, if a Word error occurs, an error message is displayed, and the user must respond before the macro can continue. When the user chooses the OK button, control passes to the error handler.</P>
<P CLASS="t">For a complete list of all WordBasic and Word error messages and error numbers, see "Error Messages" later in this part.</P>
<P></P>
<P CLASS="h"><B>Examples</B></P>
<P CLASS="t">This example shows a common use of <B>On Error Resume Next</B> to avoid WordBasic error number 102, "Command failed," when a user cancels a dialog box or prompt:</P>
<P CLASS="spacing"><BR></P>
<PRE>On Error Resume Next
A$&nbsp;=&nbsp;InputBox$("Your name please:")
</PRE>
<P CLASS="t">The following macro prompts the user to specify a sequential file for input (for example, a text-only file containing a list of Word documents). If the file cannot be found, the instructions following the label specified by <B>On Error Goto </B><I>Label </I>suggest a reason corresponding to the error number.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
On Error Goto ErrorHandler
DocName$&nbsp;=&nbsp;InputBox$("Filename for input:", "", DocName$)
Open DocName$ For Input As #1
'Statements that use the input go here
Close #1
Goto Done                'If there is no error, skip the error handler
ErrorHandler:
Select Case Err
    Case 53 : MsgBox "The file " + DocName$ + " does not exist."
    Case 64 : MsgBox "The specified drive is not available."
    Case 76 : MsgBox "The specified folder does not exist."
    Case 102                'If the user cancels the dialog box
    Case Else : MsgBox "Error" + Str$(Err) + " occurred."
End Select
Err&nbsp;=&nbsp;0
Done:
End Sub
</PRE>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Err</B>,<B> Error</B>,<B> Goto</B>,<B> Select Case</B></P></FONT></FONT></BODY></HTML>

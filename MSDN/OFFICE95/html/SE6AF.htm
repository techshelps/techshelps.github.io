<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Static Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Used at the procedure level to declare variables and allocate storage space. Variables declared with the <B>Static</B> statement retain their value as long as the code is running.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>Static</B> <I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B> <I>type</I>][,<I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B> <I>type</I>]] .<B> </B>.<B> </B>.</P>
<P CLASS="t">The <B>Static</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>subscripts</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <I>subscripts</I> argument uses the following syntax:</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">[<I>lower</I> <B>To</B>] <I>upper </I>[,[<I>lower</I> <B>To</B>] <I>upper</I>] .<B> </B>.<B> </B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the variable; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(for variable-length strings), <B>String</B> * <I>length </I>(for fixed-length strings), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type. Use a separate <B>As</B> <I>type</I> clause for each variable being defined.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Once the module code is running, variables declared with the <B>Static</B> statement retain their value until the module is reset or restarted. Use the <B>Static</B> statement in nonstatic procedures to explicitly declare <B>Static</B> variables. </P>
<P CLASS="t">Use a <B>Static</B> statement within a procedure to declare the data type of a <B>Static</B> variable. For example, the following statement declares a fixed-size array of integers:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Static EmployeeNumber(200) As Integer
</FONT></PRE>
<P CLASS="t">If you do not specify a data type or object type, and there is no <B>Def</B><I>type</I> statement in the module, the variable is <B>Variant</B> by default.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The <B>Static</B> statement and the <B>Static</B> keyword affect the lifetime of variables differently. If you declare a procedure using the <B>Static</B> keyword (as in Static Sub CountSales ()), the storage space for all local variables within the procedure is allocated once and the value of the variables is preserved for the entire time the code is running. For nonstatic procedures, storage space for variables is allocated each time the procedure is called and released when the procedure is exited. The <B>Static</B> statement is used to declare variables within nonstatic procedures to preserve their value as long as the program is running.</P>
<P></P>
<P CLASS="t">When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string, and a fixed-length string is filled with zeros. <B>Variant</B> variables are initialized to <B>Empty</B>. Each element of a user-defined type variable is initialized as if it was a separate variable. A variable that refers to an object must be assigned an existing object using the <B>Set</B> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <B>Nothing</B>, which indicates that it does not refer to any particular instance of an object.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">When you use the <B>Static</B> statement in a procedure, it is a generally accepted programming practice to put the <B>Static</B> statement at the beginning of the procedure with any <B>Dim</B> statements.</P>
<P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Array</B> Function, <B>Dim</B> Statement, <B>Function</B> Statement, <B>Option</B> <B>Base</B> Statement, <B>Private</B> Statement, <B>Public</B> Statement, <B>ReDim</B> Statement, <B>Sub</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Static</B> statement to retain the value of a variable as long as module code is running.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' Function definition.
Function KeepTotal(Number)
    ' Only the variable Accumulate preserves its value between calls.
    Static Accumulate
    Accumulate = Accumulate + Number
    KeepTotal = Accumulate
End Function

' Static function definition.
Static Function MyFunction(Arg1, Arg2, Arg3)
    ' All local variables preserve value between function calls.
    Accumulate = Arg1 + Arg2 + Arg3
    Half = Accumulate / 2
    MyFunction = Half
End Function
</FONT></PRE>
<P CLASS="t">This example uses the worksheet function <B>Pmt </B>to calculate a home mortgage loan payment. Note that this example uses the <B>InputBox</B> method instead of the <B>InputBox</B> function so that the method can perform type checking. The <B>Static</B> statements cause Visual Basic to retain the values of the three variables; these are displayed as default values the next time you run the example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Static loanAmt
Static loanInt
Static loanTerm
loanAmt = Application.InputBox _
    (Prompt:="Loan amount (100,000 for example)", _
        Default:=loanAmt, Type:=1)
loanInt = Application.InputBox _
    (Prompt:="Annual interest rate (8.75 for example)", _
        Default:=loanInt, Type:=1)
loanTerm = Application.InputBox _
    (Prompt:="Term in years (30 for example)", _
        Default:=loanTerm, Type:=1)
payment = Application.Pmt(loanInt / 1200, loanTerm * 12, loanAmt)
MsgBox "Monthly payment is " &amp; Format(payment, "Currency")
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Count Property (Microsoft Access)</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec202"></A>Count Property (Microsoft Access)</H1><P CLASS="t">  </P>
<H2><A NAME="sec203"></A>Applies To</H2><P>Form, Report.</P>
<H2><A NAME="sec204"></A>Description</H2><P>You can use the <B>Count</B> property to determine the number of open forms or reports, or the number of controls on an open form or report.</P>
<H2><A NAME="sec205"></A>Setting</H2><P>The <B>Count</B> property setting is an <B>Integer</B> and is read-only in all views.</P>
<P>You can determine the <B>Count</B> property using a macro or Visual Basic.</P>
<P>If no forms or reports are open, the <B>Count</B> property setting is 0.</P>
<H2><A NAME="sec206"></A>See Also</H2><P><B>Count</B> Property (Visual Basic), <B>Count</B> Property (<I>Microsoft Office 95 Data Access Reference</I>).</P>
<H2><A NAME="sec207"></A>Example</H2><P>The following example uses the <B>Collection</B> object’s <B>Count</B> property to specify how many iterations are required to remove all elements of the <B>Collection</B> object colThings. User-defined collections are indexed numerically. For a user-defined collection, the default base index is 1. Since collections are automatically reindexed when an item is removed, the following code removes the first member on each iteration.</P>
<P>Note that you can also use the <B>For Each...Next</B> statement to manipulate items in a collection.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim intIintI = 1 to colThings.Count
    colThings.Remove 1
</PRE>
<P CLASS="t">  </P>
<P>The following example uses the <B>Count</B> property to control a loop that prints information about all open forms.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub Print_Form_Controls()
    Dim frm As Form, intI As Integer, intJ As Integer, strTab As String
    Dim intControls As Integer, intForms As Integer
    strTab = Chr(9)            ' Tab character.
    intForms = Forms.Count        ' Number of open forms.
    If intForms &gt; 0 Then
        For intI = 0 To intForms - 1
            Set frm = Forms(intI)
            Debug.Print frm.Name        ' Print form name.
            intControls = frm.Count
            If intControls &gt; 0 Then
                For intJ = 0 To intControls - 1
                    ' Print control name.
                    Debug.Print strTab; frm(intJ).Name    
                Next intJ
            Else
                Debug.Print strTab; "(no controls)"
            End If
        Next intI
    Else
        MsgBox "No open forms.", vbExclamation, "Form Controls"
    End IfSub
</PRE>
<P CLASS="t">  </P>
<P>The next example determines the number of controls on a form or report and assigns this number to a variable.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim intFormControls As IntegerintReportControls As Integer= Forms![Employees].Count= Reports![FreightCharges].Count
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

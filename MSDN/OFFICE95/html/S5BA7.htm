<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying Controls While a Dialog Box Is Visible</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Modifying Controls While a Dialog Box Is Visible</H2><P CLASS="t">You can make any dialog box you've created easier to use and understand by modifying controls while the dialog box is visible. For example, you can disable controls, change the focus, modify worksheet cell links, and change the dialog box size.</P>
<H3><A NAME="sec0"></A>Enabling a Control</H3><P CLASS="t">You can use the <B>Enabled</B><B><I> </I></B>property of a control to prevent the user from making changes to an option unless a specified condition is met. This is often used to make a set of option buttons available only when the user selects a check box, as shown in the following code. This procedure is assigned to the check box, and it runs whenever the state of the check box changes.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub SetOptions()
    With ActiveDialog
        If .CheckBoxes(1).Value = xlOn Then
            .OptionButtons(Array(1, 2, 3, 4)).Enabled = True
        Else
            With .OptionButtons(Array(1, 2, 3, 4))
                .Enabled = False
                .Value = xlOff
            End With
        End If
    End With
End Sub
</FONT></PRE>
<P CLASS="t">You could also use the <B>Enabled</B> property to create a procedure for an edit box that makes the OK button available only when the user has entered a part number that conforms to a standard pattern.</P>
<H3><A NAME="sec1"></A>Setting the Focus to a Control</H3><P CLASS="t">You can set the focus to a control in a dialog box by setting the <B>Focus</B> property of the dialog box (the control with the focus is acted on whenever the user presses ENTER). The following example sets the focus in the active dialog box to the button named "test."</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub SetFocus()
    ActiveDialog.Focus = "test"
End Sub
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">You can set the focus only while the dialog box is running. For more information, see "Focus property" in Help.</P>
<P></P>
<H3><A NAME="sec2"></A>Modifying Links Between a Control and a Worksheet</H3><P CLASS="t">You can establish links between a control and a cell on a worksheet when the control is created, but you can also create, modify, and delete links between a control and a cell while a procedure is running. You use the <B>LinkedCell </B>property of the control to do this. The <B>LinkedCell </B>property belongs to the linked control and not the linked cell. The <B>ListFillRange</B> property also specifies the input range for list boxes. For more information, see "Linking Controls to Worksheet Cells" earlier in this chapter.</P>
<H3><A NAME="sec3"></A>Changing Dialog Box Properties</H3><P CLASS="t">You can change some of the properties of the dialog box itself (such as its size) while it's running. A common use for this is to expand a dialog box to reveal additional options when the user clicks the Options button. You can place controls below what's usually the bottom border of the dialog box. When the user clicks Options, the procedure changes the vertical size of the dialog box to reveal the hidden options.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub DisplayOptions()
    ActiveDialog.DialogFrame.Height = 91
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Updating References to Procedures in Add-Ins</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Updating References to Procedures in Add-Ins</H2><P CLASS="t">When you write and debug your add-in code, the workbook that contains the code probably has the filename extension .xls. When you compile the workbook, the add-in you create has the filename extension .xla.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If your system isn't set up to display filename extensions, you won't be able to tell the difference between your source workbook and your add-in in the Open dialog box (File menu). To display filename extensions, open the Windows Explorer, and then click Options on the View menu. Next, clear the Hide MS-DOS File Extensions For File Types That Are Registered check box on the View tab.</P>
<P></P>
<P CLASS="t">Suppose you create a custom button that refers to a procedure in a workbook before it's compiled to an add-in. The button's <B>OnAction</B> property contains a reference to the original workbook filename — the one with the .xls extension. When you create an add-in from the workbook, the add-in has a different filename extension. Unless you update the button's <B>OnAction</B> property to refer to the procedure in the add-in, clicking the button will cause Microsoft Excel to open the original workbook and run the version of the procedure stored there, instead of calling the procedure in the add-in.</P>
<P CLASS="t">In most cases, you can update <B>OnAction</B> references using code similar to that shown in the following example. Remember to run this code in the workbook that contains custom buttons.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub ConvertRefs()
    For Each sh In ActiveWorkbook.Sheets
        If TypeName(sh) &lt;&gt; "Module" Then
            For Each b In sh.Buttons
                mystr = b.OnAction
                strpos = InStr(mystr, ".xls")
                If strpos &lt;&gt; 0 Then
                    l = Len(mystr)
                    b.OnAction = Left$(mystr, strpos - 1) &amp; _
                        ".xla" &amp; Right$(mystr, l - strpos - 3)
                End If
            Next b
        End If
    Next sh
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

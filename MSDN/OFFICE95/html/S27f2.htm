<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Tools</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Debugging Tools</H2><P CLASS="t">The Macro toolbar is displayed whenever you open a macro-editing window, and it provides a number of debugging tools. In addition, WordBasic includes some statements used primarily for debugging. This section describes these debugging tools and statements.</P>
<P CLASS="a">    <img src="ATR0604.gif"></P>
<H3 CLASS="h3"><A NAME="sec0"></A>Trace</H3><P CLASS="t"><img src="TRACE.gif"></P>
<P CLASS="t">The Trace button</P>
<P CLASS="t">When you click the Trace button, Word runs the active macro and highlights each instruction as it runs it. Tracing happens very quickly because the macro runs at approximately its normal speed. Tracing can be useful for macros with many conditionals and loops, in which the flow is complex. You can use tracing to quickly determine, for example, whether a particular branch of an <B>If</B> control structure is run.</P>
<P CLASS="t">Of course, the macro-editing window must be visible, or you cannot see the instructions as they are highlighted. You can use the Arrange All command on the Window menu to layer a document window and a macro-editing window horizontally. You may also want to arrange the windows vertically, as in the following illustration, so that you can see more macro instructions at the same time.</P>
<P CLASS="a">    <img src="ATR0606.gif"></P>
<P CLASS="t"></P>
<H3 CLASS="h3"><A NAME="sec1"></A>Step</H3><P CLASS="t"><img src="STEP.gif"></P>
<P CLASS="t">The Step button</P>
<P CLASS="t">The Step button, along with its close relative the Step Subs button, is probably the most useful debugging tool. You can use the Step button to run a macro literally step by step. Each time you click the Step button, Word highlights an instruction and pauses; when you click the Step button again, Word runs the instruction and highlights the next one. In this way, you can monitor the effect of each instruction in your macro. This capability is especially useful for macros that move the insertion point in complex ways.</P>
<P CLASS="a">    <img src="ATR0605.gif"></P>
<P CLASS="t">As you're stepping through a macro, you can click the Stop button to stop running the macro or the Continue button to run the remaining instructions consecutively without pausing.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If the active macro calls a subroutine or function in another macro, Word steps through the called subroutine or function as well. To see Word step through the instructions, open the macro or macros being called and arrange the macro-editing windows so they are all visible in the Word window before clicking the Step button.</P>
<P></P>
<P CLASS="t">Stepping through long macros can be inefficient, particularly if most of the macro works fine and you're stepping through a lot of instructions just to get to the one in which the problem occurs. The solution is to use a <B>Stop</B> instruction to pause the macro just before the point where the error occurs, and then use the Step button to&nbsp;step through the instructions that generate the error. For more information on using <B>Stop</B>, see "Statements Useful for Debugging" later in this section.</P>
<H3 CLASS="h3"><A NAME="sec2"></A>Step Subs</H3><P CLASS="t"><img src="STEPSUBS.gif"></P>
<P CLASS="t">The Step Subs button</P>
<P CLASS="t">The Step Subs button works just like the Step button except that it doesn't step through subroutines or user-defined functions; it only steps through the main subroutine. This button is useful when you know that the problem you're trying to&nbsp;isolate is not contained in a macro's subroutines or user-defined functions. For macros with only a main subroutine, choosing this button has the same effect as choosing the Step button.</P>
<H3 CLASS="h3"><A NAME="sec3"></A>Show Variables</H3><P CLASS="t"><img src="SHOWVAR.gif"></P>
<P CLASS="t">The Show Variables button</P>
<P CLASS="t">The Show Variables button displays the Macro Variables dialog box, in which you can see and change the values of variables. The Show Variables button is active only when the macro is paused. You can pause a macro by using the Step&nbsp;button to step through it, or you can use a <B>Stop</B> instruction to pause it at a&nbsp;certain point.</P>
<P CLASS="t">The Macro Variables dialog box can display variables defined in the main subroutine, variables defined in subroutines and user-defined functions, and variables shared by all subroutines; variables in the active subroutine are listed first. Variable names are preceded by the name of the subroutine or function for which they are defined, separated by an exclamation point. For example, in the following illustration, the string variable searchtext$ in the main subroutine is listed as MAIN!SEARCHTEXT$. The string variable owner$ in the FindAddress subroutine is listed as FINDADDRESS!OWNER$. The shared variable animal$ is&nbsp;listed as !ANIMAL$.</P>
<P CLASS="a">    <img src="ATR0607.gif"></P>
<P CLASS="t">You can use the Set button in the Macro Variables dialog box to display the Set Variable dialog box, where you can change the value of the selected variable. It's particularly useful to change the values of variables that control loops. After running the loop enough times to test it, you can change the value of the controlling variable so that the macro can escape from the loop early.</P>
<P CLASS="a">    <img src="ATR0608.gif"></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The Macro Variables dialog box does not display the values of array variables or dialog records. Use the <B>MsgBox</B> or <B>Print</B> statements to display the values of array elements.</P>
<P></P>
<H3 CLASS="h3"><A NAME="sec4"></A>Add/Remove REM</H3><P CLASS="t"><img src="MACROREM.gif"></P>
<P CLASS="t">The Add/Remove REM button</P>
<P CLASS="t">One of the most useful debugging techniques is to deactivate part of your macro by "commenting it out." You do so by turning instructions into comments, either by placing an apostrophe (') in front of them or by placing a <B>REM</B> instruction in front of the line. The Add/Remove REM button does the latter.</P>
<P CLASS="t">For example, you may want to test a macro that includes an instruction to print a document, but you probably don't want to print each time you test the macro. The solution is to comment out the <B>FilePrint</B> instruction as follows:</P>
<P CLASS="spacing"><BR></P>
<PRE>REM   FilePrint "LETTER.DOC"
</PRE>
<P CLASS="t">When you've finished testing the macro, you can select the instructions you commented out, and then click the Add/Remove REM button again to remove the <B>REM</B> statements and reactivate the instructions.</P>
<H3 CLASS="h3"><A NAME="sec5"></A>Statements Useful for Debugging</H3><P CLASS="t">The following are WordBasic statements you can insert as instructions in your macro to assist in debugging.</P>
<H4 CLASS="h4"><A NAME="sec6"></A>Stop</H4><P CLASS="t">When Word is running a macro and it encounters a <B>Stop</B> instruction, it pauses the macro at the <B>Stop</B> instruction. You can use a <B>Stop</B> instruction to pause a macro just before or after the place where you suspect a problem.</P>
<P CLASS="t">By default, the <B>Stop</B> statement produces a message box to notify you that it has paused the macro.</P>
<P CLASS="a">    <img src="ATR0609.gif"></P>
<P CLASS="h">This message box is unnecessary if the macro-editing window is visible because Word highlights the <B>Stop</B> instruction in red. You can add an argument to the <B>Stop</B> instruction so that it does not display a message box&nbsp;—&nbsp;the instruction Stop -1 suppresses the message box.</P>
<H4 CLASS="h4"><A NAME="sec7"></A>ShowVars</H4><P CLASS="t">This statement displays the Macro Variables dialog box. It's the equivalent of pausing the macro and choosing the Show Variables button at a given point in your macro.</P>
<H4 CLASS="h4"><A NAME="sec8"></A>MsgBox</H4><P CLASS="t">Although you can check the status of most variables using the Macro Variables dialog box, that dialog box does not display array variables or dialog records. You can use the <B>MsgBox</B> statement to display and monitor these values. The <B>MsgBox</B> statement does not display numeric values, but you can use the <B>Str$</B><B>()</B> function to convert numeric values into strings.</P>
<H4 CLASS="h4"><A NAME="sec9"></A>Print</H4><P CLASS="t">The <B>Print </B>statement is useful for the same reasons <B>MsgBox</B> is, but it does not interrupt the macro as a message box does. You can also use it to display numeric values&nbsp;—&nbsp;you don't have to convert them to strings first, as you do with the <B>MsgBox</B> statement.</P></FONT></FONT></BODY></HTML>

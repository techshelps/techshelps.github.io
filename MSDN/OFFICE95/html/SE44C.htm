<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>For Each...Next Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>For Each...Next Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Repeats a group of statements for each element in an array or collection.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>For</B> <B>Each</B> <I>element </I><B>In</B> <I>group<BR></I>    [<I>statements</I>]<BR>    [<B>Exit For</B>]<BR>    [<I>statements</I>]<BR><B>Next</B> [<I>element</I>]</P>
<P CLASS="t">The <B>For Each</B>...<B>Next</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>element</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Variable used to iterate through the elements of the collection or array. For collections, <I>element</I> can only be a <B>Variant</B> variable, a generic <B>Object</B> variable, or any specific OLE Automation object variable. For arrays, <I>element</I> can only be a <B>Variant</B> variable.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>group</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of an object collection or array (except an array of user-defined types).</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>statements</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">One or more statements that are executed on each item in <I>collection</I>.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="nh"><B>Important</B></P>
<P CLASS="nt">When using <B>For Each</B>...<B> Next</B> with arrays, you can only read the value contained in the array elements indicated by the control variable <I>element</I>. You cannot set the value by assigning a value to <I>element</I>.</P>
<P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">The <B>For Each</B> block is entered if there is at least one element in <I>group</I>. Once the loop has been entered, all the statements in the loop are executed for the first element in <I>group</I>. Then, as long as there are more elements in <I>group</I>, the statements in the loop continue to execute for each element. When there are no more elements in <I>group</I>, the loop is exited and execution continues with the statement following the <B>Next</B> statement.</P>
<P CLASS="t">The <B>Exit For</B> can only be used within a <B>For Each...Next</B> or <B>For...Next</B> control structure to provide an alternate way to exit. Any number of <B>Exit For</B> statements may be placed anywhere in the loop. The <B>Exit For</B> is often used with the evaluation of some condition (for example, <B>If...Then</B>),  and transfers control to the statement immediately following <B>Next</B>.</P>
<P CLASS="t">You can nest <B>For Each</B>...<B>Next</B> loops by placing one <B>For Each</B>...<B>Next</B> loop within another. However, each loop <I>element</I> must be unique.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If you omit <I>element</I> in a <B>Next</B> statement, execution continues as if you had included it. If a <B>Next</B> statement is encountered before its corresponding <B>For</B> statement, an error occurs.</P>
<P></P>
<P CLASS="t">You can't use the <B>For Each</B>...<B>Next</B> statement with an array of user-defined types because a <B>Variant</B> can't contain a user-defined type.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Do</B>...<B>Loop</B> Statement, <B>Exit</B> Statement, <B>For</B>...<B>Next</B> Statement, <B>While</B>...<B>Wend</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>For Each</B>...<B>Next</B> statement to search the Text property of all elements in a collection for the existence of the string "Hello". In the example, MyObject is a text-related object and is an element of the collection MyCollection. Both are generic names used for illustration purposes only.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Found = False    ' Initialize variable.
For Each MyObject In MyCollection    ' Iterate through each element. 
    If MyObject.Text = "Hello" Then    ' If Text equals "Hello".
        Found = True    ' Set Found to True.
        Exit For    ' Exit loop.
    End If
Next
</FONT></PRE>
<P CLASS="t">This example loops on cells A1:D10 on Sheet1. If one of the cells has a value less than 0.001, the code replaces the value with 0 (zero).</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c in Worksheets("Sheet1").Range("A1:D10")
    If c.Value &lt; .001 Then
        c.Value = 0
    End If
Next c
</FONT></PRE>
<P CLASS="t">This example loops on the range named "TestRange" and displays the number of empty cells in the range.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">numBlanks = 0
For Each c In Range("TestRange")
    If c.Value = "" Then
        numBlanks = numBlanks + 1
    End If
Next c
MsgBox "There are " &amp; numBlanks &amp; " empty cells in this range."
</FONT></PRE>
<P CLASS="t">This example closes and saves changes to all workbooks except the one that is running the example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each w In Workbooks
    If w.Name &lt;&gt; ThisWorkbook.Name Then
        w.Close savechanges:=True
    End If
Next w
</FONT></PRE>
<P CLASS="t">This example deletes every worksheet in the active workbook without displaying the confirmation dialog box.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Application.DisplayAlerts = False
For Each w In Worksheets
    w.Delete
Next w
Application.DisplayAlerts = True
</FONT></PRE>
<P CLASS="t">This example creates a new worksheet and then inserts a list of all names in the active workbook, including their formulas in A1-style notation in the language of the user.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set newSheet = ActiveWorkbook.Worksheets.Add
i = 1
For Each nm In ActiveWorkbook.Names
    newSheet.Cells(i, 1).Value = nm.NameLocal
    newSheet.Cells(i, 2).Value = "'" &amp; nm.RefersToLocal
    i = i + 1
Next nm
</FONT></PRE></FONT>
</FONT></BODY></HTML>

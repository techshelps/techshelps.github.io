<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending WordBasic with AppleScript</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Extending WordBasic with AppleScript</H2><P CLASS="t">When combined, AppleScript and WordBasic can be used to customize the Macintosh in many ways. A script can control Word and other scriptable applications, while WordBasic can run scripts that in turn do work and return data to Word. With AppleScript recording turned on, you can easily record scripts from within Word. You can also write simple macros and customize the Word interface to expose external scripts, so any user can take advantage of compiled script applications without leaving Word.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Recording Scripts</H3><P CLASS="t">AppleScript can record Word. That is, Word will generate Apple Events for all user actions when recording has been turned on for an entire Macintosh. These events can then be recorded by AppleScript.</P>
<P CLASS="t">In Word, AppleScript recording is based on the internal WordBasic recording mechanism. Because of this, WordBasic macros and AppleScript scripts cannot be recorded at the same time. If Word is in the process of recording a WordBasic macro, it will ignore requests to record from AppleScript. Similarly, if Word is recording Apple Events, the user will not be able to start WordBasic macro recording.</P>
<P CLASS="t">Just as a subset of the functionality in Word is exposed to AppleScript, only a small segment of user actions are recorded as native AppleScript. That is, most simple editing, formatting, and file manipulation actions will be recorded as one of the basic events acting on an Apple Event object (for example, opening a file or setting the style of the selection to bold). All other actions are recorded as Do Script events with the appropriate WordBasic instructions, much as the actions would be recorded within a WordBasic macro.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Using the Do Script Event</H3><P CLASS="t">Much of Word's functionality is <I>not</I> exposed directly to AppleScript because the standard suites are meant to be a common interface for objects across many applications. However, scripts can still control Word completely by using the Do Script event. With Do Script, a script can run the same WordBasic instructions that Word macros use to control the application. This effectively gives a script access to all the functionality of Word.</P>
<P CLASS="t">WordBasic is the native programming language of Word, and Word is optimized to use WordBasic. Therefore, to get the fastest performance from Word, AppleScript programmers should consider using Do Script events to control Word as much as possible.</P>
<P CLASS="t">Here is the syntax for the Do Script event:</P>
<P CLASS="h"><B>do script</B> <I>WordBasic$</I></P>
<P CLASS="t">Note that <I>WordBasic$</I> is either one instruction to execute or a list of instructions. The result of a Do Script event in a script is either one value, if Word was passed one WordBasic instruction, or a list of values, if Word was passed a list of instructions.</P>
<P CLASS="t">For example, here is a simple WordBasic macro:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
    FileOpen "Hard Drive:Microsoft Word:Sample Document"
    EditFindStyle .Style = "Heading 2"
    EditReplaceStyle .Style = "Heading 3"
    EditReplace .Direction = 0, .ReplaceAll, .Format = 1, .Wrap = 1
    FileClose 1
End Sub
</PRE>
<P CLASS="t">In AppleScript, scripting commands and objects could be used to duplicate the functionality of the original WordBasic macro, as follows:</P>
<P CLASS="spacing"><BR></P>
<PRE>tell application "Microsoft Word"
    open "Hard Drive:Microsoft Word:Sample Document"
    set countpara to count paragraphs of document "Sample Document"
    repeat with n from 1 to countpara
        if paragraph style of paragraph n = "Heading 2" then
            set paragraph style of paragraph n to "Heading 3"
        end if
    end repeat
    save document "Sample Document"
    close document "Sample Document"
end tell
</PRE>
<P CLASS="t">However, an AppleScript script can use a single Do Script event to take the most advantage of the internal functionality of Word to duplicate the original macro:</P>
<P CLASS="spacing"><BR></P>
<PRE>tell application "Microsoft Word"
    Do Script <FONT FACE="Symbol">Ø</FONT>
        "FileOpen \"Hard Drive:Microsoft Word:Sample Document\"
        EditFindStyle .Style = \"Heading 2\"
        EditReplaceStyle .Style = \"Heading 3\"
        EditReplace .Direction = 0, .ReplaceAll, .Format = 1, .Wrap = 1
        FileClose 1"
end tell
</PRE>
<H3 CLASS="h3"><A NAME="sec2"></A>Attaching Scripts</H3><P CLASS="t">A limited form of AppleScript "attachability" within Word is provided through the WordBasic <B>MacScript</B> statement and <B>MacScript$</B><B>()</B> function. With these, any interface element in Word that can be attached to a macro (for example, menu commands and toolbar buttons) can run a script.</P>
<P CLASS="t">Note that this does not provide arbitrary script object attachability. Word does not provide for attachment of scripts to any object. Thus, it is not possible to write a script which handles particular Apple Events for an attached object. For example, a script cannot be attached to a window so that the script can handle the Close event.</P>
<P CLASS="t">Here is the syntax for the <B>MacScript </B>statement:</P>
<P CLASS="t"><B>MacScript</B> <I>Script$</I></P>
<P CLASS="t"><B>MacScript</B> accepts a string parameter which may be either a path to a file, or a portion of text in the default scripting language. If the string is a path to a compiled script file or standalone script application, that file is opened and the first script resource is run. Otherwise, the string itself is passed to the default scripting language for compilation and execution.</P>
<P CLASS="t">Here is the syntax for the <B>MacScript$</B><B>()</B><B> </B>function:</P>
<P CLASS="t"><B>MacScript$(</B><I>Script$</I><B>)</B></P>
<P CLASS="t"><B>MacScript$</B><B>()</B> performs exactly as <B>MacScript</B>, except that it returns a string value. If the executed script returns a value, it is coerced into a string and returned. If the executed script does not return a value, an empty string ("") is returned.</P>
<P CLASS="t">For more information, see <B>MacScript</B> in Part 2, "WordBasic Reference."</P>
<P CLASS="t"></P></FONT></FONT></BODY></HTML>

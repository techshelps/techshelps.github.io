<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dim Statement</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec55"></a>Dim Statement</h1>

<h2><a name="sec56"></a>Description</h2>

<p>Declares variables and allocates storage space.</p>

<h2><a name="sec57"></a>Syntax</h2>

<p><b>Dim</b> <i>varname</i>[<b>(</b>[<i>subscripts</i>]<b>)</b>][<b>As</b>
[<b>New</b>] <i>type</i>][<b>, </b><i>varname</i>[<b>(</b>[<i>subscripts</i>]<b>)</b>][<b>As
</b>[<b>New</b>] å<i>type</i>]] . . .</p>

<p>The <b>Dim</b> statement syntax has these parts:</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>varname</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the variable; follows standard
        variable naming conventions.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>subscripts</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Dimensions of an array variable; up to
        60 multiple dimensions may be declared. The <i>subscripts</i>
        argument uses the following syntax:<p class="t">[<i>lower</i>
        <b>To</b>] <i>upper </i>[<b>,</b>[<i>lower</i> <b>To</b>]
        <i>upper</i>] . . .</p>
        </td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">When not explicitly stated in <i>lower</i>,
        the lower bound of an array is controlled by the <b>Option</b>
        <b>Base</b> statement. The lower bound is zero if no <b>Option</b>
        <b>Base</b> statement is present.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>New</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Keyword used to indicate that a declared
        object variable is a new instance of a Visual Basic
        object or an externally creatable OLE Automation object.
        The <b>New</b> keyword can&#146;t be used to declare
        variables of any intrinsic data type and can&#146;t be
        used to declare instances of dependent OLE Automation
        objects.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>type</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Data type of the variable; may be <b>Byte</b>,
        <b>Boolean</b>, <b>Integer</b>, <b>Long</b>, <b>Currency</b>,
        <b>Single</b>, <b>Double</b>, <b>Date</b>, <b>String </b>(for
        variable-length strings), <b>String</b> * <i>length </i>(for
        fixed-length strings), <b>Object</b>, <b>Variant</b>, a
        user-defined type, or an object type. Use a separate <b>As</b>
        <i>type</i> clause for each variable you declare.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<h2><a name="sec58"></a>Remarks</h2>

<p>Variables declared with <b>Dim</b> at the module level are
available to all procedures within the module. At the procedure
level, variables are available only within the procedure. </p>

<p>Use the <b>Dim</b> statement at module or procedure level to
declare the data type of a variable. For example, the following
statement declares a variable as an <b>Integer</b>.</p>

<p class="spacing"><br>
</p>

<pre>Dim NumberOfEmployees As Integer
</pre>

<p>Also use a <b>Dim</b> statement to declare the object type of
a variable. The following declares a variable for a new instance
of a worksheet.</p>

<p class="spacing"><br>
</p>

<pre>Dim X As New Worksheet</pre>

<p>If the <b>New</b> keyword is not used when declaring an object
variable, no instance of the object actually exists. A variable
that refers to an object must be assigned an existing object
using the <b>Set</b> statement before it can be used. Until it is
assigned an object, the declared object variable has the special
value <b>Nothing</b>, which indicates that it does not refer to
any particular instance of an object.</p>

<p>You can also use the <b>Dim</b> statement with empty
parentheses to declare a dynamic array. After declaring a dynamic
array, use the <b>ReDim</b> statement within a procedure to
define the number of dimensions and elements in the array. If you
try to redeclare a dimension for an array variable whose size was
explicitly specified in a <b>Private</b>, <b>Public</b>, or <b>Dim
</b>statement, an error occurs.</p>

<p>If you do not specify a data type or object type, and there is
no <b>Def</b><i>type</i> statement in the module, the variable is
<b>Variant</b> by default.</p>

<p>When variables are initialized, a numeric variable is
initialized to 0, a variable-length string is initialized to a
zero-length string, and a fixed-length string is filled with
zeros. <b>Variant</b> variables are initialized to <b>Empty</b>.
Each element of a user-defined type variable is initialized as if
it were a separate variable.</p>

<p><b>Tip</b> When you use the <b>Dim</b> statement in a
procedure, it is a generally accepted programming practice to put
the <b>Dim</b> statement at the beginning of the procedure.</p>

<h2><a name="sec59"></a>See Also</h2>

<p><b>Array</b> Function, <b>Option Base </b>Statement, <b>Private</b>
Statement, <b>Public</b> Statement, <b>ReDim</b> Statement, <b>Set</b>
Statement, <b>Static</b> Statement, <b>Type</b> Statement.</p>

<h2><a name="sec60"></a>Specifics (Microsoft Access)</h2>

<p>You can use the <b>New</b> keyword to declare an object
variable of a specific type. If you include the <b>New</b>
keyword in your variable declaration, you automatically create a
new instance of the object and point the object variable to it.
Therefore, if you declare an object variable using the <b>New</b>
keyword, you don&#146;t need to use the <b>Set</b> statement.</p>

<p>Using the <b>New</b> keyword, you can create an object
variable to point to any type of object &#151; a Microsoft Access
object, data access object, user-defined object, or Visual Basic <b>Collection</b>
object. For example, you can use the following statements to
create a new <b>TableDef</b> object.</p>

<p class="spacing"><br>
</p>

<pre>' Create object variable and point it to new object.tdfOrders As New TableDef
' Set Name property of object..Name = &quot;Orders&quot;
</pre>

<p>These statements are equivalent to the following two
statements.</p>

<p class="spacing"><br>
</p>

<pre>' Create an empty object variable.tdfOrders As TableDef
' Create the new TableDef object and point the object variable to it.
' &quot;dbs&quot; is an object variable pointing to the current database.tdfOrders = dbs.CreateTableDef(&quot;Orders&quot;)
</pre>

<p>You should use the <b>New</b> keyword to create a <b>Collection</b>
object. For example, the following statement creates a new <b>Collection</b>
object.</p>

<p class="spacing"><br>
</p>

<pre>Dim colCustomers As New Collection
</pre>

<p>You should also use the <b>New</b> keyword to create a new
instance of a user-defined object. For example, a form whose
module contains public procedures can be a user-defined object.
If a form called CustomerObject has a module in which you have
defined procedures as public, you can create a new instance of
this form object from another module, and its procedures become
methods and properties of the object. You can then manipulate the
form object by calling the methods and setting the properties you
defined in the form module.</p>

<p class="spacing"><br>
</p>

<pre>' Create new instance of your object.frmCustomer As New Form_CustomerObject
' Call the method Show from the form object..Show
</pre>

<p>You can use the <b>New</b> keyword to create a new instance of
a Microsoft Access object from some applications that are OLE
Automation controllers. Check the other application&#146;s
documentation to determine whether or not the application
supports this syntax.</p>

<p>For example, from another OLE Automation controller, assuming
you have established a reference to the Microsoft Access type
library, you can create a new Microsoft Access object with the
following code.</p>

<p class="spacing"><br>
</p>

<pre>Dim appAccess As New Access.Application
</pre>

<h2><a name="sec61"></a>Example</h2>

<p>This example shows various uses of the <b>Dim</b> statement to
declare variables. It also shows the <b>Dim</b> statement being
used to declare arrays. The default lower bound for array
subscripts is 0 and can be overridden at the module level using
the <b>Option Base</b> statement.</p>

<p class="spacing"><br>
</p>

<pre>' AnyValue and MyValue are declared as Variant by default with values
' set to Empty.AnyValue, MyValue
' Explicitly declare a variable of type Integer.Number As Integer
' Multiple declarations on a single line. AnotherVar is of type Variant
' because its type is omitted.AnotherVar, Choice As Boolean, BirthDate As Date
' DayArray is an array of Variants with 51 elements indexed, from
' 0 thru 50, assuming Option Base is set to 0 (default) for
' the current module.DayArray(50)
' Matrix is a two-dimensional array of integers.Matrix(3, 4) As Integer
' MyMatrix is a three-dimensional array of doubles with explicit
' bounds.MyMatrix(1 To 5,  4 To 9,  3 To 5) As Double
' BirthDay is an array of dates with indexes from 1 to 10.BirthDay(1 To 10) As Date        
' MyArray is a dynamic array of variants.MyArray()
</pre>
</FONT></FONT></BODY>
</html>

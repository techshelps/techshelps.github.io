<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Let Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Property Let Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Declares the name, arguments, and code that form the body of a <B>Property</B> <B>Let</B> procedure, which assigns a value to a property.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn">[<B>Public</B> | <B>Private</B>][<B>Static</B>] <B>Property</B> <B>Let</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>]<BR>    [<I>statements</I>]<BR>    [<B>Exit Property</B>] <BR>    [<I>statements</I>]<BR><B>End Property</B></P>
<P CLASS="t">The <B>Property Let</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Public</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Let</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement), the procedure is not available outside the project.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Private</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Let </B>procedure is accessible only to other procedures in the module where it is declared.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Static</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Let </B>procedure's local variables are preserved between calls. The <B>Static</B> attribute doesn't affect variables that are declared outside the <B>Property Let</B> procedure, even if they are used in the procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>name</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the <B>Property</B> <B>Let</B> procedure; follows standard variable naming conventions, except that the name can be the same as a <B>Property</B> <B>Get</B> or <B>Property Set</B> procedure in the same module.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>arglist</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">List of variables representing arguments that are passed to the <B>Property</B> <B>Let</B> procedure when it is called. Multiple variables are separated by commas. The last argument is the value assigned to the property on the right-hand side of an expression.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>statements</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any group of statements to be executed within the body of the <B>Property</B> <B>Let</B> procedure.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The <I>arglist</I> argument has the following syntax and parts:</P>
<P CLASS="syn">[<B>ByVal</B> | <B>ByRef</B>] <I>varname</I>[<B>( )</B>][<B>As</B> <I>type</I>]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByVal</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by value.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByRef</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by reference.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable representing the argument; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the argument passed to the <B>Property</B> <B>Let</B> procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Every <B>Property Let</B> statement must define at least one argument for the procedure it defines. That argument (or the last argument if there is more than one) will contain the actual value to be assigned to the property when the procedure defined by the <B>Property Let</B> statement is invoked.</P>
<P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Property</B> procedures are <B>Public</B> by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P CLASS="t">All executable code must be in procedures. You can't define a <B>Property</B> <B>Let</B> procedure inside another <B>Sub</B>, <B>Function</B>, or <B>Property</B> procedure.</P>
<P CLASS="t">The <B>Exit Property </B>keywords cause an immediate exit from a <B>Property Let</B> procedure. Program execution continues with the statement following the statement that called the <B>Property</B> <B>Let</B> procedure. Any number of <B>Exit Property</B> statements can appear anywhere in a <B>Property</B> <B>Let</B> procedure.</P>
<P CLASS="t">Like a <B>Function</B> and <B>Property Get</B> procedure, a <B>Property Let</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <B>Function</B> and <B>Property Get</B> procedure, both of which return a value, a <B>Property Let</B> procedure can only be used on the left side of a property assignment expression or <B>Let</B> statement.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Function</B> Statement, <B>Let</B> Statement, <B>Property</B> <B>Get</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Sub</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Property Let</B> statement to define a procedure that assigns a value to a property that identifies the pen color for a drawing package.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim CurrentColor As Integer
Const BLACK = 0, RED = 1, GREEN = 2, BLUE = 3

' Sets the pen color property for a Drawing package.
' The module level variable 'CurrentColor' is set to
' a numeric value that identifies the color used for drawing.
Property Let PenColor(ColorName as String)
    Select Case ColorName    ' Check color name string.
        Case "Red"
            CurrentColor = RED    ' Assign value for Red.
        Case "Green"
            CurrentColor = GREEN    ' Assign value for Green.
        Case "Blue"
            CurrentColor = BLUE    ' Assign value for Blue.
        Case Else
            CurrentColor = BLACK    ' Assign default value.
    End Select
End Property

' The following line sets the PenColor property for a drawing package
' by calling the Property Let procedure.

PenColor() = "Red" 
</FONT></PRE></FONT>
</FONT></BODY></HTML>

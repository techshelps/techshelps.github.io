<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Like Operator</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec240"></A>Like Operator</H1><P CLASS="t">  </P>
<H2><A NAME="sec241"></A>Description</H2><P>Used to compare two strings.</P>
<H2><A NAME="sec242"></A>Syntax</H2><P><I>result</I> <B>=</B> <I>string</I> <B>Like</B> <I>pattern</I></P>
<P>The <B>Like</B> operator syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="283pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>result</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any numeric variable.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>string</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any string expression. </P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>pattern</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any string expression conforming to the pattern-matching conventions described in Remarks.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec243"></A>Remarks</H2><P>If <I>string</I> matches <I>pattern</I>, <I>result</I> is <B>True</B>; if there is no match, <I>result</I> is <B>False</B>; and if either <I>string</I> or <I>pattern</I> is <B>Null</B>, <I>result</I> is also <B>Null</B>. </P>
<P>The behavior of the <B>Like</B> operator depends on the <B>Option Compare</B> statement. Unless otherwise specified, the default string-comparison method for each module is <B>Option Compare</B> <B>Binary</B>.</P>
<P><B>Option Compare Binary</B> results in string comparisons based on a sort order derived from the internal binary representations of the characters. Sort order is determined by the code page. In the following example, a typical binary sort order is shown:</P>
<P>A &lt; B &lt; E &lt; Z &lt; a &lt; b &lt; e &lt; z &lt; À &lt; Ê &lt; Ø &lt; à &lt; ê &lt; ø</P>
<P><B>Option Compare Text</B> results in string comparisons based on a case-insensitive textual sort order determined by your system’s locale. The same characters shown above, when sorted using <B>Option Compare Text</B>, produce the following text sort order:</P>
<P>(A=a) &lt; (À=à) &lt; (B=b) &lt; (E=e) &lt; (Ê=ê) &lt; (Z=z) &lt; (Ø=ø) </P>
<P>Built-in pattern matching provides a versatile tool for string comparisons. The pattern-matching features allow you to use wildcard characters, character lists, or character ranges, in any combination, to match strings. The following table shows the characters allowed in <I>pattern</I> and what they match:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="155pt" VALIGN="TOP"><COL WIDTH="213pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Character(s) in <I>pattern</I></B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Matches in <I>string</I></B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>?</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any single character.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">*</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Zero or more characters.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>#</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any single digit (0 – 9).</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">[<I>charlist</I>]</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any single character in <I>charlist</I>.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">[<B>!</B><I>charlist</I>]</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any single character not in <I>charlist</I>.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>A group of one or more characters (<I>charlist</I>) enclosed in brackets ([ ]) can be used to match any single character in <I>string </I>and can include almost any character code, including digits.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The special characters left bracket ([), question mark (?), number sign (#), and asterisk (*) can be used to match themselves directly only by enclosing them in brackets. The right bracket (]) can’t be used within a group to match itself, but it can be used outside a group as an individual character.</P>
<P CLASS="t">  </P>
<P></P>
<P>In addition to a simple list of characters enclosed in brackets, <I>charlist</I> can specify a range of characters by using a hyphen (<B>-</B>) to separate the upper and lower bounds of the range. For example, [A-Z] in <I>pattern</I> results in a match if the corresponding character position in <I>string</I> contains any of the uppercase letters in the range A through Z. Multiple ranges are included within the brackets without any delimiters.</P>
<P>The meaning of a specified range depends on the character ordering valid at run time (as determined by <B>Option Compare</B> and the locale setting of the system the code is running on). Using the same example shown above with <B>Option Compare Binary</B>, the range [A–E] matches A, B and E. With <B>Option Compare Text</B>, [A–E] matches A, a, À, à, B, b, E, e. Note that it does not match Ê or ê because accented characters fall after unaccented characters in the sort order.</P>
<P>Other important rules for pattern matching include the following:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    An exclamation point (<B>!</B>) at the beginning of <I>charlist</I> means that a match is made if any character except the ones in <I>charlist</I> is found in <I>string</I>. When used outside brackets, the exclamation point matches itself.</LI><LI><SPAN CLASS="Symbol"></SPAN>    The hyphen (<B>-</B>) can appear either at the beginning (after an exclamation point if one is used) or at the end of <I>charlist</I> to match itself. In any other location, the hyphen is used to identify a range of characters.</LI><LI><SPAN CLASS="Symbol"></SPAN>    When a range of characters is specified, they must appear in ascending sort order (from lowest to highest). [A-Z] is a valid pattern, but [Z-A] is not.</LI><LI><SPAN CLASS="Symbol"></SPAN>    The character sequence [] is ignored; it is considered a zero-length string.</LI></UL></SPAN><P>In some languages, there are special characters in the alphabet that actually represent two separate characters. For example, several languages use the character “æ” to represent the characters “a” and “e” when they appear together. The <B>Like</B> operator recognizes that the single special character and the two individual characters are equivalent.</P>
<P>When a language that uses one of these special characters is specified in the system locale settings, an occurrence of the single special character in either <I>pattern</I> or <I>string</I> matches the equivalent 2-character sequence in the other string. Similarly, a single special character in <I>pattern</I> enclosed in brackets (by itself, in a list, or in a range) matches the equivalent 2-character sequence in <I>string</I>.</P>
<H2><A NAME="sec244"></A>See Also</H2><P>Comparison Operators, <B>InStr</B> Function, Operator Precedence, <B>Option Compare</B> Statement, <B>StrComp</B> Function.</P>
<H2><A NAME="sec245"></A>Example</H2><P>This example uses the <B>Like</B> operator to compare a string to a pattern.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>MyCheck = "aBBBa" Like "a*a"                ' Returns True.= "F" Like "[A-Z]"                ' Returns True.= "F" Like "[!A-Z]"                ' Returns False.= "a2a" Like "a#a"                ' Returns True.= "aM5b" Like "a[L-P]#[!c-e]"    ' Returns True.= "BAT123khg" Like "B?T*"        ' Returns True.= "CAT123khg" Like "B?T*"        ' Returns False.
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sheets Collection Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Sheets Collection Object</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">A collection of all the sheets in the specified or active workbook. The <B>Sheets</B> collection can contain <B>Chart</B>, <B>DialogSheet</B>, <B>Module</B>, or <B>Worksheet</B> objects.</P>
<P CLASS="t">The <B>Sheets</B> collection is useful when you want to access sheets of any type. If you need to work with sheets of only one type, see the object topic for that sheet type.</P>
<P CLASS="h"><B>Accessors</B></P>
<P CLASS="t">Use the <B>Sheets</B> method with the sheet index number or name as an argument to access a single member of the collection or without an argument to access the entire collection at once.</P>
<P CLASS="t">The index number represents the position of the sheet on the tab bar of the workbook. Sheets(1) is the first (leftmost) sheet in the workbook; Sheets(Sheets.Count) is the last sheet. All sheets are included in the index count, even if they are hidden.</P>
<P CLASS="t">The following example hides the sheet one in the active workbook.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets(1).Visible = False
</FONT></PRE>
<P CLASS="t">The sheet name is shown on the workbook tab for the sheet. Use the <B>Name</B> property to set or return the sheet name (you cannot change the name of the sheet where the Visual Basic code is running, however). The following example protects the Visual Basic code on the sheet named "Sample Code."</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets("sample code").Protect password:="drowssap", contents:=True
</FONT></PRE>
<P CLASS="t">You can also use an array to specify more than one sheet. The following example moves the sheets named "Module1" and "Sheet1" to the beginning of the workbook.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets(Array("module1", "sheet1")).Move before:=Sheets(1)
</FONT></PRE>
<P CLASS="t">Use the <B>Add</B> method to create a new sheet and add it to the collection. The following example adds two dialog sheets to the active workbook, placing them after sheet two in the workbook.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets.Add type:=xlDialogSheet, count:=2, after:=Sheets(2)
</FONT></PRE>
<P CLASS="h"><B>Properties</B></P>
<P CLASS="t"><B>Application </B>Property,<B> Count </B>Property,<B> Creator </B>Property,<B> Parent </B>Property,<B> Visible </B>Property.</P>
<P CLASS="h"><B>Methods</B></P>
<P CLASS="t"><B>Add </B>Method (<B>Sheets </B>Collection),<B> Copy </B>Method,<B> Delete </B>Method,<B> FillAcrossSheets </B>Method,<B> Item </B>Method,<B> Move </B>Method,<B> PrintOut </B>Method,<B> PrintPreview </B>Method,<B> Select </B>Method.</P>
<P></P></FONT>
</FONT></BODY></HTML>

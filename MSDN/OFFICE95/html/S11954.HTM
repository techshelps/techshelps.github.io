<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIf Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec230"></A>IIf Function</H1><P CLASS="t">  </P>
<H2><A NAME="sec231"></A>Description</H2><P>Returns one of two parts, depending on the evaluation of an expression.</P>
<H2><A NAME="sec232"></A>Syntax</H2><P><B>IIf(<I>expr</I>,</B> <I>truepart</I><B>,</B> <I>falsepart</I><B>)</B></P>
<P>The <B>IIf</B> function syntax has these named arguments:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>expr</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Expression you want to evaluate.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>truepart</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Value or expression returned if <I>expr</I> is <B>True</B>.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>falsepart</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Value or expression returned if <I>expr</I> is <B>False</B>.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec233"></A>Remarks</H2><P><B>IIf</B> always evaluates both <I>truepart</I> and <I>falsepart</I>, even though it returns only one of them. Because of this, you should watch for undesirable side effects. For example, if evaluating <I>falsepart</I> results in a division by zero error, an error occurs even if <I>expr</I> is <B>True</B>.</P>
<H2><A NAME="sec234"></A>See Also</H2><P><B>Choose</B> Function, <B>If...Then...Else</B> Statement.</P>
<H2><A NAME="sec235"></A>Specifics (Microsoft Access)</H2><P>The <B>IIf</B> function (immediate if) is most useful in a calculated control on a form or report.</P>
<P>You can use the <B>IIf</B> function to evaluate an expression and return either of two other values, depending on whether the expression evaluates to <B>True</B> (-1) or <B>False</B> (0). For example, you can use the <B>IIf</B> function to inspect a field on a form and determine whether its value is <B>Null</B>. If it is, you can have the function return an empty string. If the field has a value that is not <B>Null</B>, the function could return the field’s contents. The following example checks the ShipCountry field in an Orders table.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>= IIf(IsNull(Forms!Orders![ShipCountry]), "", _
    Forms!Orders![ShipCountry])
</PRE>
<P CLASS="t">  </P>
<P>In Visual Basic, the <B>IIf</B> function evaluates both <I>truepart</I> and <I>falsepart</I>, even though it returns only one of them. On a Microsoft Access form or report, however, the <B>IIf</B> function evaluates either <I>truepart</I> or <I>falsepart</I>, whichever is appropriate. Therefore, you need not be concerned about the undesirable side effects of evaluating both arguments if you use the <B>IIf</B> function in a calculated control, query expression, or macro.</P>
<P CLASS="t">  </P>
<P><B>Note</B>   The Microsoft Access <B>Nz</B> function converts <B>Null</B> values to zero, a zero-length string, or another value that you specify. If your expression handles <B>Null</B> values, you may be able use the <B>Nz</B> function as an alternative to the <B>IIf</B> function.</P>
<P>The <B>IIf</B> function is most useful within expressions that are in a form or report, rather than in Visual Basic code in a module. In Visual Basic, the more full-featured <B>If...Then...Else</B> statement offers greater versatility.</P>
<P CLASS="t">  </P>
<H2><A NAME="sec236"></A>Example</H2><P>This example uses the <B>IIf</B> function to evaluate the TestMe parameter of the CheckIt procedure and returns the word “Large” if the amount is greater than 1000; otherwise, it returns the word “Small”.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Function CheckIt (TestMe As Integer)
    CheckIt = IIf(TestMe &gt; 1000, "Large", "Small")Function
</PRE>
<P CLASS="t">  </P>
<P>This example uses the <B>IIf</B> function to evaluate an OrderAmount field and returns the word “Large” if the amount is greater than 1000; otherwise, it returns the word “Small”. You can enter the following expression in the <B>ControlSource</B> property of a calculated control.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>= IIf([OrderAmount] &gt; 1000, "Large", "Small")</PRE>
<P CLASS="t">  </P>
<P>In the next example, the <B>IIf</B> function returns a zero-length string if the ShipCountry field is <B>Null</B>; otherwise, it returns the field’s contents.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>= IIf(IsNull([ShipCountry]), "", [ShipCountry])
</PRE>
<P CLASS="t">  </P>
<P>The following example shows how you can use the <B>IIf</B> function to return a string containing an employee’s first name, middle initial, and last name. If there is no middle initial, the expression returns the first and last names separated by a single space. If there is a middle initial, however, it includes the middle initial and a period.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>= [FirstName] &amp; IIf(IsNull([Initial]), "", " " &amp; [Initial] &amp; ".") &amp; " "_    &amp; [LastName]
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

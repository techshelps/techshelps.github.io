<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up Button Properties And Validating Input</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Setting Up Button Properties And Validating Input</H2><P CLASS="t">To assign properties to a command button in a dialog, right-click the button and select Format Object.  It's helpful to do things like assign a default property to one of the buttons so it will be automatically activated when the user presses the return key.</P>
<P><img src="20503.gif"></P>
<P>Figure 4.  How to assign button properties</P>
<P CLASS="t">The Dismiss property will cause the dialog box to close when the user clicks the button.  If there's no need to validate the dialog entries, go ahead and check the Dismiss box.  If validation is required it's best to keep the dialog open just in case the user needs to change something.  In that case, leave the Dismiss box blank and assign a validation macro to the button.  Do the validation steps in the macro and let the macro control whether or not the dialog should be closed (dismissed).  Here's a code sample that accomplishes this.  </P>
<P>Sub ValidateGraph()</P>
<P>Dim Btn As Object</P>
<P>'Set the DismissButton property to be True so the dialog will close</P>
<P>' if all the validation tests pass.</P>
<P>Select Case GWizReturn</P>
<P>    'Since the user could have clicked two possible buttons, make sure</P>
<P>    ' we choose the right one.  </P>
<P>Case GO_NEXT</P>
<P>    Set Btn = Wiz3.[ButtonWiz3Next]</P>
<P>Case FINISH</P>
<P>    Set Btn = Wiz3.[ButtonWiz3Finish]</P>
<P>End Select</P>
<P>Btn.DismissButton = True</P>
<P>'Check to see if:</P>
<P>'1.  Start value is less than end value</P>
<P>'2.  There are data to graph</P>
<P>'3.  Bin Width/number of bins is valid (nonzero)</P>
<P>If Wiz3.[EditStartValue].Caption = "" Then</P>
<P>    MsgBox ("Start Value must be filled in")</P>
<P>    'Keep the dialog box displayed until it passes validation.</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditStartValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>If Wiz3.[EditEndValue].Caption = "" Then</P>
<P>    MsgBox ("End Value must be filled in")</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditEndValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>If Wiz3.[EditBinValue].Caption = "" Then</P>
<P>    MsgBox ("Bin Width or Number of Bins must be filled in")</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditEndValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>If Wiz3.[EditStartValue].Caption &gt;= Wiz3.[EditEndValue].Caption Then</P>
<P>    MsgBox ("Start Value must be less than End Value")</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditStartValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>If Wiz3.[EditBinValue].Caption &lt;= 0 Then</P>
<P>    MsgBox ("Bin Width or Number of Bins must be greater than zero")</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditBinValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>If Int(Wiz3.[EditBinValue].Caption) &lt;&gt; _</P>
<P>Val(Wiz3.[EditBinValue].Caption) And _</P>
<P>Wiz3.[OptionBinCount].Value = xlOn Then</P>
<P>    MsgBox ("Number of Bins must not be fractional")</P>
<P>    Btn.DismissButton = False</P>
<P>    Wiz3.Focus = Wiz3.[EditBinValue].Name</P>
<P>    Exit Sub</P>
<P>End If</P>
<P>End Sub</P>
<P>Example 7.  Sample validation code</P>
<P CLASS="t">The code in this example is a simplified version of the ValidateGraph routine in the Wizard.  Take a look at the real routine to see the extra work needed to fully bullet-proof a dialog.  You will gain a new appreciation for the work that Microsoft development teams go through.  </P>
<P CLASS="t">Excel also supports built-in validation for edit controls.  Set this option in the control's Format Object dialog, shown in Figure 5 below.  A new feature in Excel 7 is the ability to set password validation (the code can capture typed characters, but only asterisks are displayed).  The Reference validation option checks to be sure the user types a valid cell reference.  It also tracks the mouse!  All a user needs to do is select cells in the worksheet while the dialog is open and Excel will automatically insert the reference into the edit box, updating it as the mouse moves.  </P>
<P CLASS="t"><img src="20504.gif"></P>
<P>Figure 5.  Validation options for edit boxes</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Referring to Another Application</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Referring to Another Application</H2><P CLASS="t">When you refer to another application by using OLE Automation, you actually refer to one of the application's top-level objects. The task you want to accomplish determines the object you refer to. The following table shows the most common top-level objects for Microsoft Project and Word; for a more complete list of the top-level objects in Office applications, see the <I>Microsoft Solutions Development Kit</I>.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="162pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="103pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B><BR>To return</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>From this application</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Use this <BR>class name</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">A reference to the Microsoft Project <B>Application</B> object, which allows you to use all of Microsoft Project's objects, properties, and methods</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Microsoft Project</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">MSProject.Application</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">A reference to a new <B>Project</B> object or a reference to the <B>Project</B> object specified in the <B>GetObject</B> method, which allows you to work with a specific project</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Microsoft Project</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">MSProject.Project</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">A reference to the <B>WordBasic</B> object, which allows you to run WordBasic statements</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Word</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Word.Basic</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">There are two ways to refer to a top-level object using OLE Automation from Microsoft Excel. One way is to refer to the application's object library using the References dialog box.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To establish a reference to an application's object library</B></P>
<P CLASS="ls">    1.    Switch to a Visual Basic module.</P>
<P CLASS="ls">    2.    On the Tools menu, click References.</P>
<P CLASS="ls">    3.    Click the object library you want to refer to.</P>
<P CLASS="lt1">If the object library you want doesn't appear in the Available References box, click Browse and then locate the file you want.</P>
<P></P>
<P CLASS="t">After you've established a reference to an object library, you can use commands from the library in your Microsoft Excel Visual Basic code. For example, after you've established a reference to the Word object library, you can use a command such as <B>FileOpen</B>. However, referring to objects this way can yield unpredictable results, because you cannot always be sure which object will be returned. The preferred way is either to use the <B>CreateObject</B> method to start the application and return a reference to a top-level object or to use the <B>GetObject</B> method to return a reference to a top-level object from an application that's already running. For more information about these methods, see the following sections.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">An <I>object library</I> is a catalog of an application's objects, properties, and methods. Any application that registers object libraries in the Windows system registry allow other applications to use its objects, properties, and methods as if they were native to that application.</P>
<P></P>
<P CLASS="t">Word exposes three top-level objects: the <B>Application</B> object, the <B>CurValues</B> object, and the <B>WordBasic</B> object. The <B>WordBasic</B> object is the most commonly used of the three because you execute all WordBasic commands by first referring to this object.</P>
<H3><A NAME="sec0"></A>The CreateObject Method</H3><P CLASS="t">The <B>CreateObject</B> method starts a new instance of an application invisibly and returns a reference to a new top-level object. The following code loads Microsoft Project into memory and returns the Microsoft Project <B>Application</B> object.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim projapp As Object

Set projapp = CreateObject("MSProject.Application")
</FONT></PRE>
<P CLASS="t">The following example returns a <B>Project</B> object instead of the <B>Application</B> object, specifying the <B>Project</B> class name in the <B>CreateObject</B> argument.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim projapp As Object

Set projapp = CreateObject("MSProject.Project")
</FONT></PRE>
<H3><A NAME="sec1"></A>The GetObject Function</H3><P CLASS="t">The <B>GetObject</B> function returns a top-level object reference from an application that's is already running. The <B><I>pathName</I></B> argument can be either the complete path to an existing file or an empty string, or it can be omitted altogether. If you omit this argument, you must supply the class argument; the function will then create a new instance of the application. An error will be returned if the path you specify doesn't exist. For more information about the syntax for the <B>GetObject </B>function, see "GetObject function" in Help.</P>
<P CLASS="t">The following code returns the Microsoft Project <B>Application</B> object from an instance of Microsoft Project that's already loaded into memory. You can return a <B>Project</B> object instead by specifying the <B>Project</B> class name in the <B>GetObject</B> argument.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim projapp As Object

Set projapp = GetObject("", "MSProject.Application")
</FONT></PRE></FONT>
</FONT></BODY></HTML>

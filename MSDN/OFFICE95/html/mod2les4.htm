<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 4: View, Table and Filter Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 4: View, Table and
Filter Methods</font></H1>
  <p><b><i>Lesson
    Objectives</i></b></font></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
        
            <ul>
                <li>Apply
                    Views, Tables and Filters.</font></li>
                <li>Create
                    and edit Views, Tables and Filters.</font></li>
                <li>Access
                    lists of Tables, Views and Filters.</font></li>
            </ul>
        
        <p><b>Some Topics to
        be introduced in this lesson include:</b></font></p>
        
            
                <ul>
                    <li>ViewApply and ViewEdit</font></li>
                    <li>TableApply and TableEdit</font></li>
                    <li>FilterApply and FilterEdit</font></li>
                    <li>ViewList, TableList,
                        FilterList</font></li>
                </ul>
            
        
        <p><b><i>Views
    Methods</i></b></font></p>
    <p>Project
    gives you full control over views by using Application Object
    methods. Here is a listing of the possible view methods.</font></p>
    <p>ViewApply
    Sets the view in the active window. The same as choosing View
    More Views and then applying a view from the list. To set the
    Module Editor View use the following.</font></p>
    
        <p><b>ViewApply
        name:=&quot;Module Editor&quot;, singlePane:=True</b></font></p>
        <p>ViewEditCombination
    and ViewEditSingle Methods allows the user to create or edit
    a single or combination view. The benefit is that the user
    does not have to see any dialog box displayed.</font></p>    
        <p><b>ViewEditCombination
        name := &quot;Kris' View&quot;, create := True,_ topView
        := &quot;Resource Sheet&quot;,_ bottomView :=
        &quot;Resource Graph&quot;</b></font></p>
        <p><b>ViewEditSingle
        name := &quot;Kris' Task Schedule&quot;, create := True,
        _ filter:=&quot;In Progress Tasks&quot;, table :=
        &quot;Schedule&quot;</b></font></p>
    
    <p>The ViewList
    method is used to return a view name or a list of all view
    names defined in the project. TaskViewList only returns those
    that are task views.</font></p>
    
        <p><b>For
        Each t In ActiveProject.ViewList</b></font></p>
        <p><b>MsgBox
        t</b></font></p>
        <p><b>Next
        t</b></font></p>
    
    <p>There are 15
    ViewShowXXXX methods, which allows you to format the task and
    resourse forms. The equivalent would be going to your format
    menu choosing details and then picking one type from the
    list. The 15 types are: Availability, Cost, CumulativeCost,
    CumulativeWork, Notes, Objects, Overallocation, PeakUnits,
    PercentAllocation, PredecessorsSuccessors,
    ResourcesPredecessors, ResourcesSuccessors, Schedule,
    SelectedTasks, and Work</font></p>
    
        <p><b>ViewShowSchedule</b></font></p>
    
    <p><b><u>Exercise</u></b></font></p>
    <p>Write a
    macro that creates and applies a split screen view with a
    Task Sheet on top and a Task Form on the bottom formated to
    show Resource Cost. (**Do not use the macro recorder)</font></p>
    <p><b><i>Tables
    Methods</i></b></font></p>


<p>The Tables
method is another Application Object method. It is used for
setting the active pane in the active window. If you executed the
Tables method it would simply bring up the More Table dialog box.
</font></p>

<p>In order to give
the user more control, Project supplies the TableApply method.
When used, the user must supply a valid name of a table. In
return, no dialog box will be displayed.</font></p>
  
        <p><b>TableApply
        &quot;Tracking&quot;</b></font></p>
    


<p>If you would
like to create a new or edit an existing table, you should use
the TableEdit method. This method allows full customization of 15
options in a table. The following macro command will create a new
table called Flags containing task information and does not
appear in the menu.</font></p>
  
        <p><b>TableEdit
        name := &quot;Flags&quot;, taskTable := True, create :=
        True, _ </b></font></p>
        <p><b>fieldName
        := &quot;Priority&quot;, showInMenu := False</b></font></p>
    
    <p>The
    TaskTableList and ResourceTableList methods are used to
    return a task or resource table name or a list of all task or
    resource tables currently defined in the project.</font></p>
    
        <p><b>For
        Each t In ActiveProject.TaskTableList</b></font></p>
        <p><b>MsgBox
        t</b></font></p>
        <p><b>Next
        t</b></font></p>
    
    <p><b><u>Exercise1</u></b></font></p>
    <p>Using the
    list of customizable options for a table, listed in online
    help, write a macro that creates a new table containing
    fields: ID, Name, Actual Start, and Actual Finish. Do not use
    the macro recorder. (Hint: A new TableEdit line is necessary
    for each field you add)</font></p>
    <p><b><i>Filter
    Methods</i></b></font></p>


<p>The Filters
method is another Application Object method. It is used for
setting the filter of the active pane in the active window. If
you made a call to the Filters method it would simply bring up
the More Filters dialog box. </font></p>

<p>In order to give
the user more control, Project supplies the FilterApply method.
When used, the user must supply a valid name of a filter. In
return, no dialog box will be displayed.</font></p>
  
        <p><b>FilterApply
        &quot;Milestones&quot;</b></font></p>
    


<p>If you would
like to create a new or edit an existing Filter, you should use
the FilterEdit method. This method allows full customization of
12 options in a filter. The following example creates a filter
for tasks with the highest priority (if one doesn't exist), and
then applies the filter.</font></p>
  
        <p><b>Sub
        CreateAndApplyHighestPriorityFilter()</b></font></p>
        <p><b>Dim
        TaskName ' Index for For Each loop</b></font></p>
        <p><b>Dim
        Found ' Whether or not the filter exists.</b></font></p>
        <p><b>Found
        = False ' Assume the filter doesn't exist.</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>For
        Each TaskName In ActiveProject.TaskFilterList</b></font></p>
        <p><b>If
        TaskName = &quot;Highest Priority&quot; Then</b></font></p>
        <p><b>Found
        = True</b></font></p>
        <p><b>Exit
        For</b></font></p>
        <p><b>End
        If</b></font></p>
        <p><b>Next
        TaskName</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>' If
        filter doesn't exist, create it.</b></font></p>
        <p><b>If
        Not Found Then FilterEdit Name:=&quot;Highest
        Priority&quot;, _ </b></font></p>
        <p><b>create:=True,
        taskFilter:=True,_</b></font></p>
        <p><b>FieldName:=&quot;Priority&quot;,
        _ </b></font></p>
        <p><b>test:=&quot;equals&quot;,
        value:=&quot;Highest&quot;</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>'
        Apply the filter.</b></font></p>
        <p><b>FilterApply
        &quot;Highest Priority&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p>The
    TaskFilterList and ResourceFilterList methods are used to
    return a task or resource filter name or a list of all task
    or resource filters currently defined in the project.</font></p>    
        <p><b>For
        Each t In ActiveProject.FilterTableList</b></font></p>
        <p><b>MsgBox
        t</b></font></p>
        <p><b>Next
        t</b></font></p>
    
    <p><b><u>Exercise1</u></b></font></p>
    <p>Using the
    list of customizable options for a filter, listed in online
    help, write a macro that creates a new interactive filter
    that will prompt the user to enter a beginning ID and an
    Ending ID, then displays only milestones in that range. Do
    not use the macro recorder. (Hint: A new FilterEdit line is
    necessary for each row you add)</font></p>

</FONT></BODY>
</html>

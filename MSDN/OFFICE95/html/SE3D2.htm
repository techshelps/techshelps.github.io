<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dim Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Dim Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Declares variables and allocates storage space.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>Dim</B> <I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B> <I>type</I>][,<I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As </B><I>type</I>]] .<B> </B>.<B> </B>.</P>
<P CLASS="t">The <B>Dim</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>subscripts</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <I>subscripts</I> argument uses the following syntax:</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">[<I>lower</I> <B>To</B>] <I>upper </I>[,[<I>lower</I> <B>To</B>] <I>upper</I>] .<B> </B>.<B> </B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the variable; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(for variable-length strings), <B>String</B> * <I>length </I>(for fixed-length strings), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type. Use a separate <B>As</B> <I>type</I> clause for each variable you declare.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Variables declared with <B>Dim</B> at the module level are available to all procedures within the module. At the procedure level, variables are available only within the procedure.</P>
<P CLASS="t">Use the <B>Dim</B> statement at module or procedure level to declare the data type or object type of a variable. For example, the following statement declares a variable as an <B>Integer</B>.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim NumberOfEmployees As Integer
</FONT></PRE>
<P CLASS="t">If you do not specify a data type or object type, and there is no <B>Def</B><I>type</I> statement in the module, the variable is <B>Variant</B> by default.</P>
<P CLASS="t">When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string, and a fixed-length string is filled with zeros. <B>Variant</B> variables are initialized to <B>Empty</B>. Each element of a user-defined type variable is initialized as if it was a separate variable. A variable that refers to an object must be assigned an existing object using the <B>Set</B> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <B>Nothing</B>, which indicates that it does not refer to any particular instance of an object.</P>
<P CLASS="t">You can also use the <B>Dim</B> statement with empty parentheses to declare dynamic arrays. After declaring a dynamic array, use the <B>ReDim</B> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <B>Private</B>, <B>Public</B> or <B>Dim </B>statement, an error occurs.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">When you use the <B>Dim</B> statement in a procedure, it is a generally accepted programming practice to put the <B>Dim</B> statement at the beginning of the procedure.</P>
<P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Array</B> Function, <B>Option</B> <B>Base</B> Statement, <B>Private</B> Statement, <B>Public</B> Statement, <B>ReDim</B> Statement, <B>Set</B> Statement, <B>Static</B> Statement, <B>Type</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example shows various uses of the <B>Dim</B> statement to declare variables. The <B>Dim</B> statement is also used to declare arrays. The default lower bound for array subscripts is 0 and can be overridden at the module level using the <B>Option Base</B> statement.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' AnyValue and MyValue are declared as Variant by default with values
' set to Empty.
Dim AnyValue, MyValue

'  Explicitly declare a variable of type Integer.
Dim Number As Integer

' Multiple declarations on a single line. AnotherVar is of type Variant
' since its type is omitted.
Dim AnotherVar, Choice As Boolean, BirthDate As Date

' DayArray is an array of Variants with 51 elements indexed, 
' starting at 0 thru 50, assuming Option Base is set to 0 (default) for
' the current module.
Dim DayArray(50)

' Matrix is a two-dimensional array of integers.
Dim Matrix(3,4) As Integer
' MyMatrix is a three-dimensional array of doubles with explicit
' bounds.
Dim MyMatrix(1 To 5,  4 To 9,  3 To 5) As Double

' BirthDay is an array of dates with indexes from 1 to 10.
Dim BirthDay(1 To 10) As Date        

' MyArray is a dynamic array.
Dim MyArray()
</FONT></PRE></FONT>
</FONT></BODY></HTML>

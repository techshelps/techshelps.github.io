<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Put Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Put Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Writes from a variable to a disk file.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>Put</B> [<B>#</B>]<I>filenumber</I>,[<I>recnumber</I>],<I>varname</I></P>
<P CLASS="t">The <B>Put</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>filenumber</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any valid file number.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>recnumber</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Record number (<B>Random</B> mode files) or byte number (<B>Binary</B> mode files) at which writing begins.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of variable containing data to be written to disk.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">The first record/byte in a file is at position 1, the second record/byte is at position 2, and so on. If you omit <I>recnumber</I>, the next record or byte (the one after the last <B>Get</B> or <B>Put</B> statement or the one pointed to by the last <B>Seek</B> function) is written. You must include delimiting commas, for example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Put #4,,FileBuffer
</FONT></PRE>
<P CLASS="t">For files opened in <B>Random</B> mode, the following rules apply:</P>
<UL><LI>If the length of the data being written is less than the length specified in the <B>Len</B> clause of the <B>Open</B> statement, <B>Put</B> still writes subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data can't be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</LI><LI>If the variable being written is a variable-length string, <B>Put</B> writes a 2-byte descriptor containing the string length and then the variable. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual length of the string.</LI><LI>If the variable being written is a <B>Variant</B> of a numeric type, <B>Put</B> writes 2 bytes identifying the <B>VarType</B> of the <B>Variant</B> and then the variable. For example, when writing a <B>Variant</B> of <B>VarType</B> 3, <B>Put</B> writes 6 bytes: 2 bytes identifying the <B>Variant</B> as <B>VarType</B> 3 (<B>Long</B>) and 4 bytes containing the <B>Long</B> data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual number of bytes required to store the variable.</LI><LI>If the variable being written is a <B>String</B> <B>Variant</B> (<B>VarType</B> 8), <B>Put</B> writes 2 bytes identifying the <B>VarType</B>, 2 bytes indicating the length of the string, and then the string data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 4 bytes greater than the actual length of the string.</LI><LI>If the variable being written is any other type of variable (not a variable-length string and not a <B>Variant</B>), <B>Put</B> writes only the variable data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the length of the data being written.</LI><LI><B>Put</B> writes elements of user-defined types as if each were written individually, except there is no padding between elements. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the sum of all the bytes required to write the individual elements.</LI></UL><P></P>
<P CLASS="t">For files opened in <B>Binary</B> mode, all of the <B>Random</B> rules apply except that:</P>
<UL><LI>The <B>Len</B> clause in the <B>Open</B> statement has no effect. <B>Put</B> writes all variables to disk contiguously; that is, with no padding between records.</LI><LI><B>Put</B> writes variable-length strings that are not elements of user-defined types without the 2-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 10 bytes to file number 1:
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">VarString$ = String$(10," ")
Put #1,,VarString$</FONT></PRE></LI></UL><P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Get</B> Statement, <B>Open</B> Statement, <B>VarType</B> Function.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Put</B> statement to write data to a disk file. Five records of the user-defined type Record are written to the file.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' Define user-defined type.
Type Record
    ID As Integer
    Name As String * 20
End Type
Dim MyRecord As Record    ' Declare variable.
' Open file for random access.
Open "TESTFILE" For Random As #1 Len = Len(MyRecord)
For RecordNumber = 1 To 5    ' Loop 5 times.
    MyRecord.ID = RecordNumber    ' Define ID.
    MyRecord.Name = "My Name" &amp; RecordNumber    ' Create a string.
    Put #1, RecordNumber, MyRecord    ' Write record to file.
Next RecordNumber
Close #1    ' Close file.
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Dialog Records</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Working with Dialog Records</H2><P CLASS="t">You can create a special variable called a <I>dialog record</I> that stores the settings of&nbsp;a Word dialog box. You can use dialog records for Word dialog boxes in the following two ways:</P>
<UL><LI>    To retrieve or change the settings of dialog box options without displaying the dialog box.</LI><LI>    To display a Word dialog box and change the settings of options in the dialog box. Generally, when you display a dialog box, its settings reflect the current state of the active document or of Word itself. But you might want to change the settings displayed in a dialog box. For example, the Summary Info dialog box (File menu) normally shows the name of the document's original author. A macro can place a value in a dialog record for the Summary Info dialog box so that when the dialog box is displayed, the original author's name is automatically replaced with a different name.</LI></UL><P></P>
<H3 CLASS="h3"><A NAME="sec0"></A>Defining a Dialog Record</H3><P CLASS="t">You use the <B>Dim</B> statement to define a dialog record. Here is the syntax:</P>
<P CLASS="syn"><B>Dim</B> <I>DialogRecord</I> <B>As</B> <I>DialogBoxName</I></P>
<P CLASS="t"><I>DialogRecord</I> can be any name you choose that isn't a reserved word. The limitations are the same as those for string and numeric variables (see "Variables" in Chapter 3, "WordBasic Fundamentals"). <I>DialogBoxName</I> can be any WordBasic statement name that corresponds to a dialog box. For example, the WordBasic statement that corresponds to the Open dialog box on the File menu is <B>FileOpen</B>, so "FileOpen" is a valid <I>DialogBoxName</I>. If you're not sure what the valid <I>DialogBoxName</I> for a dialog box is, see "Language Summary" and "Statements and Functions" in Part 2, "WordBasic Reference."</P>
<P CLASS="t">Here are some examples of dialog records:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim FPrec As FormatParagraph            'Define a dialog record "FPrec" for
                            'the FormatParagraph dialog box

Dim Fontrecord As FormatFont            'Define a dialog record "Fontrecord"
                            'for the FormatFont dialog box

Dim TOVrec As ToolsOptionsView        'Define a dialog record "TOVrec"
                            'for the ToolsOptionsView dialog box
</PRE>
<P CLASS="t">As the last example shows, you can sometimes specify the tab as well as the dialog box name for dialog boxes that contain tabs. That is, you can specify "ToolsOptionsView," not merely "ToolsOptions." To check whether you can specify a tab in this way for a particular dialog box, see the entry for the statement that corresponds to the dialog box in Part 2, "WordBasic Reference."</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Retrieving and Changing Dialog Box Settings</H3><P CLASS="t">Once you define a dialog record for a dialog box, you use the <B>GetCurValues</B> statement to place the current values of the dialog box into the dialog record. The following example copies the current settings of the View tab in the Options dialog box (Tools menu) into the TOVrec dialog record:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim TOVrec As ToolsOptionsView        'Define a dialog record "TOVrec"
GetCurValues TOVrec                    'Get the current values
</PRE>
<P CLASS="t">You can change or retrieve the values of the dialog box settings stored in a dialog record by referring to them with the following syntax:</P>
<P CLASS="syn"><I>DialogRecord</I><B>.</B><I>DialogBoxOption</I></P>
<P CLASS="t"><I>DialogBoxOption</I> is an argument for the WordBasic statement that corresponds to&nbsp;the dialog box whose options are stored in <I>DialogRecord</I>. For the list of valid arguments, see the entry for the corresponding WordBasic statement in Part 2, "WordBasic Reference."</P>
<P CLASS="t">The following example retrieves the current setting of the Picture Placeholders check box on the View tab in the Options dialog box (Tools menu) and places it in the variable picture:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim TOVrec As ToolsOptionsView
GetCurValues TOVrec
picture&nbsp;=&nbsp;TOVrec.PicturePlaceHolders
</PRE>
<P CLASS="t">You change the value of an option in a dialog record by assigning it a value, just as you assign a value to any other variable. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim TOVrec As ToolsOptionsView
GetCurValues TOVrec
TOVrec.PicturePlaceHolders&nbsp;=&nbsp;1
ToolsOptionsView TOVrec
</PRE>
<P CLASS="t">In this example, the .PicturePlaceHolders argument is given a value of 1, which corresponds to selecting the Picture Placeholders check box. The final instruction in the example (ToolsOptionsView TOVrec) puts the values stored in the TOVrec into effect. This instruction is required because changing values in a dialog record does not in itself cause changes to occur in Word. Only the WordBasic statement that corresponds to the dialog box can put the changes into effect.</P>
<P CLASS="t">The following WordBasic instruction is equivalent to the four instructions in the previous example:</P>
<P CLASS="spacing"><BR></P>
<PRE>ToolsOptionsView .PicturePlaceHolders&nbsp;=&nbsp;1
</PRE>
<P CLASS="t">As you can see, it's not very efficient to use a dialog record to change the value of a single option in a dialog box. But if you create a dialog record to retrieve dialog box values, you can use the dialog record to change a value conditionally. The most common use of this technique is to "toggle" a dialog box option.</P>
<H3 CLASS="h3"><A NAME="sec2"></A>Using a Dialog Record to Toggle a Check Box</H3><P CLASS="t">To <I>toggle</I> something means to reverse its current "state" or value. You can toggle a check box in a dialog box because it has two "opposite" values&nbsp;—&nbsp;selected and cleared. The same is true of some Word commands. For example, when you choose the Ruler command from the View menu, Word hides the ruler if it was displayed or displays the ruler if it was hidden. The current state of the ruler (displayed or hidden) is reversed each time.</P>
<P CLASS="t">Using the appropriate dialog record, you can create a macro to toggle any check box. You can then assign the macro to a shortcut key or menu for quick access. The following macro toggles the Paragraph Marks check box on the View tab in the Options dialog box (Tools menu) to show or hide paragraph marks:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
    Dim TOVrec As ToolsOptionsView    'Define a dialog record "TOVrec"
    GetCurValues TOVrec                'Get the current values
    If TOVrec.Paras&nbsp;=&nbsp;1 then            'If on
        TOVrec.Paras&nbsp;=&nbsp;0                'turn off
    Else                                'Otherwise
        TOVrec.Paras&nbsp;=&nbsp;1                'turn on
    End If
    ToolsOptionsView TOVrec            'Reset the dialog
End Sub
</PRE>
<P CLASS="t">The following macro uses a slightly different technique to show or hide hidden text:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
    Dim TOVrec As ToolsOptionsView            'Define a record "TOVrec"
    GetCurValues TOVrec                         'Get the current values
    TOVrec.Hidden&nbsp;=&nbsp;Abs(TOVrec.Hidden - 1)    'Reverse state
    ToolsOptionsView TOVrec                     'Reset the dialog
End Sub
</PRE>
<P CLASS="t">This macro uses the expression Abs(TOVrec.Hidden - 1) to toggle the value of the Hidden Text check box on the View tab in the Options dialog box. Here's how it works. The Hidden Text check box can have the value 0 (zero) if it is not selected or 1 if it is selected:</P>
<UL><LI>    If the check box is not selected, then TOVrec.Hidden - 1 is equivalent to 0–1, or –1. The <B>Abs</B><B>()</B> function makes the negative number positive, so the final result of Abs(TOVrec.Hidden - 1) is 1, which selects the check box.</LI><LI>    If the check box is selected, then TOVrec.Hidden - 1 is equivalent to 1–1, or 0&nbsp;(zero). The <B>Abs</B><B>()</B> function has no effect in this case, and the final result of Abs(TOVrec.Hidden - 1) is 0 (zero), which clears the check box.</LI></UL><P></P>
<H3 CLASS="h3"><A NAME="sec3"></A>Displaying a Dialog Box</H3><P CLASS="t">Once you have created a dialog record, you can use the <B>Dialog</B> statement or <B>Dialog</B><B>()</B> function to display the corresponding dialog box. This is useful if you want your macro to present a dialog box so that a user can set the options he or she wants before the macro continues. The following example displays the Options dialog box (Tools menu) with the View tab showing and then runs <B>ToolsOptionsView</B> after the user closes the dialog box.</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim TOVrec As ToolsOptionsView    'Define a dialog record "TOVrec"
GetCurValues TOVrec                'Place current values in record
Dialog TOVrec                    'Display dialog box
ToolsOptionsView TOVrec            'Run ToolsOptionsView with new settings
</PRE>
<P CLASS="t">Note that the <B>GetCurValues </B>instruction is necessary. Without this instruction, the macro would display the dialog box with no values&nbsp;—&nbsp;it would not reflect the current state of Word. The <B>ToolsOptionsView </B>instruction is necessary for the settings that the user chooses in the dialog box to have an effect. If this instruction were left out, the user could change settings and then choose the OK button, but Word would not carry out the command.</P>
<P CLASS="t">If you want to modify dialog box settings before displaying the dialog box for the&nbsp;user, you just change the settings of the dialog record options before running <B>Dialog</B> or <B>Dialog</B><B>()</B>. The following example creates a dialog record for the Summary Info dialog box (File menu) and changes the contents of the Author box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim FSIrecord as FileSummaryInfo        'Define a dialog record "FSIrecord"
GetCurValues FSIrecord                'Get the current values
FSIrecord.Author&nbsp;=&nbsp;"Louis Caspary"    'Place a name in the Author box
Dialog FSIrecord                        'Display Summary Info dialog box
FileSummaryInfo FSIrecord            'Do FileSummaryInfo instruction
</PRE>
<P CLASS="t">The <B>Dialog </B>instruction displays the Summary Info dialog box with the name "Louis Caspary" in the Author box, as shown in the following illustration.</P>
<P CLASS="a">    <img src="ATR0405.gif"></P>
<H4 CLASS="h4"><A NAME="sec4"></A>Checking How a Dialog Box Is Closed</H4><P CLASS="t">When a macro displays a dialog box, it also needs to test how the user closes the dialog box. If the user chooses the OK button, the macro should carry out the command associated with the dialog box. If the user chooses the Cancel button, the macro should not carry out the command. The way you check how a dialog box is closed depends on whether you use the <B>Dialog</B> statement or the <B>Dialog</B><B>()</B> function to display a dialog box:</P>
<UL><LI>    If a dialog box is displayed with the <B>Dialog</B><B>()</B> function, the <B>Dialog</B><B>()</B> function returns a value corresponding to the button used to dismiss the dialog box. You can then use that value in a conditional statement to determine how the macro should proceed.</LI><LI>    If a dialog box is displayed with the <B>Dialog</B> statement and the user chooses the&nbsp;OK button or the Close button, Word moves to the next statement in the macro. But if the user chooses the Cancel button, Word generates an error that you can handle with an <B>On Error</B> statement.</LI></UL><P></P>
<P CLASS="t">Here is an example that uses the <B>Dialog</B><B>()</B> function and an <B>If </B>conditional to test whether the user chooses the OK button or the Cancel button to dismiss a dialog box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim FSIrecord as FileSummaryInfo        'Define a dialog record "FSIrecord"
GetCurValues FSIrecord                'Get the current values
FSIrecord.Author&nbsp;=&nbsp;"Louis Caspary"    'Place a name in the Author box
choice&nbsp;=&nbsp;Dialog(FSIrecord)            'Display dialog and return button
If choice&nbsp;=&nbsp;-1 Then                     'If "OK" then
    FileSummaryInfo FSIrecord        'do FileSummaryInfo with changes
End If
</PRE>
<P CLASS="t">The OK button returns a value of –1; the Cancel button returns 0 (zero). In this example, the value returned by Dialog(FSIrecord) is stored in the variable choice. If the user chooses the OK button, then the macro runs the <B>FileSummaryInfo</B> statement&nbsp;—&nbsp;the WordBasic statement corresponding to the Summary Info dialog box. Otherwise, nothing happens.</P>
<P CLASS="t">In the following example, the <B>On Error Goto</B> statement is used to trap the error generated by the Cancel button when the <B>Dialog</B> statement is used to display the Open dialog box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim FOrecord as FileOpen                'Define a dialog record "FOrecord"
GetCurValues FOrecord                'Get the current values
On Error Goto trap                    'Go to the "trap" label if the user
                                    'chooses the Cancel button
Dialog FOrecord                        'Display the Open dialog box
FileOpen FOrecord                    'Carry out FileOpen with changes
Goto bye                                'Go to the "bye" label
trap:                                'Label for On Error Goto statement
MsgBox "Macro cannot proceed."        'Error message
bye:                                    'Label for Goto statement
</PRE>
<P CLASS="t">This more elaborate example uses an <B>On Error Goto</B> instruction to present a message to the user if he or she chooses the Cancel button. The <B>MsgBox</B> instruction informs the user that the macro cannot continue because the user did not open a file. For more information on error trapping, see Chapter 7, "The Well-Behaved Macro."</P>
<P CLASS="t"></P></FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clear Method</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec274"></A>Clear Method</H1><P CLASS="t">  </P>
<H2><A NAME="sec275"></A>Applies To</H2><P><B>Err</B> Object.</P>
<H2><A NAME="sec276"></A>Description</H2><P>Clears all property settings of the <B>Err</B> object.</P>
<H2><A NAME="sec277"></A>Syntax</H2><P><I>object</I><B>.Clear</B></P>
<P>The object is always the <B>Err</B> object.</P>
<H2><A NAME="sec278"></A>Remarks</H2><P>Use <B>Clear</B> to explicitly clear the <B>Err</B> object after an error has been handled. This is necessary, for example, when you use deferred error handling with <B>On Error Resume Next</B>. Visual Basic for applications calls the <B>Clear </B>method automatically whenever any of the following statements is executed:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Any type of Resume statement.</LI><LI><SPAN CLASS="Symbol"></SPAN>    <B>Exit Sub</B>, <B>Exit Function</B>, <B>Exit Property.</B></LI><LI><SPAN CLASS="Symbol"></SPAN>    Any <B>On Error </B>statement.</LI></UL></SPAN><P><B>Clear</B> is equivalent to Err = 0 in previous Basic products.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The <B>On Error Resume Next</B> construct may be preferable to <B>On Error GoTo</B> when dealing with errors generated during access to other objects. Checking <B>Err</B> after each interaction with an object removes ambiguity about which object your code was accessing when the error occurred. Thus, you can be sure which object placed the error code in <B>Err.Number</B>, as well as which object originally generated the error (the one specified in <B>Err.Source</B>).</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec279"></A>See Also</H2><P><B>Description</B> Property, <B>Err</B> Object, <B>HelpContext</B> Property (Visual Basic), <B>HelpFile</B> Property (Visual Basic), <B>LastDLLError</B> Property, <B>Number</B> Property, On <B>Error</B> Statement, <B>Raise</B> Method, <B>Source</B> Property.</P>
<H2><A NAME="sec280"></A>Example</H2><P>This example uses the <B>Err </B>object’s <B>Clear </B>method to reset the numeric properties of the <B>Err</B> object to zero and its string properties to zero-length strings. If <B>Clear</B> were omitted from the following code, the error message dialog box would be displayed on every iteration of the loop (after an error occurs) whether or not a successive calculation generated an error. </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim Result(10) As Integer            ' Declare array whose elements 
                                    ' will overflow easily.Error Resume Next                    ' Defer error trapping.
Until indx = 10
    ' Generate an occasional error or store result if no error.
    Result(indx) = Rnd * indx * 20000
    If Err.Number &lt;&gt; 0 Then
        MsgBox Err, , "Error Generated: ", Err.HelpFile, Err.HelpContext
        Err.Clear                    ' Clear Err object properties.
    Else
        indx = indx + 1
    End If</PRE>
<P CLASS="t">  </P>
<P></P>
<P></P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>
</FONT></FONT></BODY></HTML>

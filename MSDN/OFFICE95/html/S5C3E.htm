<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Optimizing DAO Code</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Optimizing DAO Code</H2><P CLASS="t">After you've gotten your application working, you can begin optimizing. There are several ways to optimize your application, many of which are described in the following paragraphs. However, the optimization you choose will depend on your computer configuration and the application you're using.</P>
<H3><A NAME="sec0"></A>Optimizing All Queries</H3><P CLASS="t">If your application updates data frequently or performs calculations on sections of large data sets, optimizing the queries that perform these actions will significantly improve the speed of your application. Small adjustments in the body of the query or in the SQL statement may be all you need to improve your application. For information about optimizing queries, see "Queries" in Help.</P>
<H3><A NAME="sec1"></A>Opening Tables Directly</H3><P CLASS="t">This method cannot be used with ODBC data sources because they cannot, by design, be opened directly as tables.</P>
<P CLASS="t">When using remote data sources, Jet provides two types of <B>Recordset</B> objects: <B>Dynaset</B> objects and <B>Snapshot</B> objects. If you don't need to update data in your result set, and if the result set contains fewer than 500 records, you can optimize your application by returning a <B>Snapshot</B> object. <B>Snapshot</B> objects are read-only optionally forward-only scrolling result sets; a <B>Snapshot</B> object is generated faster than a <B>Dynaset</B> object because it represents a picture of your data set.</P>
<H3><A NAME="sec2"></A>Replacing the Find Method with the Seek Method</H3><P CLASS="t">If you directly open a table that contains an index on the field you want to search, using the <B>Seek</B> method will always be the fastest way to locate a record. However, the <B>Seek</B> method can be used only on directly opened tables.</P>
<P CLASS="t">The <B>Find</B> method isn't as fast as the <B>Seek</B> method because of the overhead associated with dynasets or snapshots — specifically,copying matching records from a table and maintaining the indexes.</P>
<H3><A NAME="sec3"></A>Using Stored Queries Instead of SQL Text</H3><P CLASS="t">Using stored queries greatly increases processing speed — especially low-memory computers — because Jet's query compiler isn't needed. If you call a SQL text string, the query compiler is called; Jet then binds references, builds a query tree, chooses an optimization method, and then runs the query.</P>
<H3><A NAME="sec4"></A>Using Parameter Queries Instead of SQL Text</H3><P CLASS="t">If the values of a query aren't known before compile time, or if the application depends on user-supplied values for the query, it may not be possible to use stored static queries. In this case, using a parameter query is still faster than using a SQL text string because a parameter query is also a stored compiled query. For information about building a parameter query, see "parameter queries" in Help.</P>
<H3><A NAME="sec5"></A>Using Transaction Processing</H3><P CLASS="t">The <B>BeginTrans</B> method tells Jet to buffer all changes to the <B>Recordset</B> object. The changes will be written to the data set when the <B>EndTrans</B> method is applied. Without transaction processing, Jet writes changes directly to the <B>Recordset</B> object each time a change occurs, which may dramatically increase disk access. However, if the activity within the transaction is too large, changes to the <B>Recordset</B> object will be stored both in memory and in a swapfile, which increases disk access. The optimal number of records to store in a transaction depends on the computer configuration; you may need to experiment with the record numbers.</P>
<H3><A NAME="sec6"></A>Using Bookmarks Instead of the Find Method</H3><P CLASS="t">Using a bookmark instead of the <B>Find</B> method dramatically increases performance because a bookmark is essentially a stored primary key that Jet uses to return to the previous record location. In contrast, the <B>Find</B> method searches the entire data set for the previous record.</P>
<H3><A NAME="sec7"></A>Using the CopyFromRecordset Method</H3><P CLASS="t">The <B>CopyFromRecordset</B> method optimizes your application by copying large chunks of records as a unit instead of copying individual records. Variables for indexing and looping aren't needed in the result set or on the worksheet.</P>
<H3><A NAME="sec8"></A>Using the GetRows Method</H3><P CLASS="t">Whereas the <B>CopyFromRecordset</B> method copies and pastes an entire result set into a Microsoft Excel range, the <B>GetRows</B> method returns only a specified number of records from the result set (starting with the first record).</P>
<P CLASS="t">The following example pastes the first six records from the result set created by the <B>OpenRecordset</B> method into cells A1:B6 on Sheet1.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database, rs As Recordset
Dim data As Variant
Set db = OpenDatabase("c:\access\sampapps\Nwind.mdb")
Set rs = db.OpenRecordset("Select Customer.[City] from Customer;")
Do While Not rs.EOF
    data = rs.GetRows(6)
Loop
Sheets("Sheet1").Activate
For Each i In ActiveSheet.Range("A1:B6") _
    i.Value = data(i.Column - 1, i.Row - 1)
Next
rs.Close
db.Close</FONT></PRE>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Variant Data Type</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>The Variant Data Type</H2><P CLASS="t">The <B>Variant</B> data type allows you to store most types of data. You don't have to convert between these data types when assigning them to a <B>Variant</B> variable; Visual Basic automatically performs any necessary conversion, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Private someValue        ' Variant by default.
someValue = "17"
    ' someValue contains "17" (a two-character string).
someValue = someValue - 15 
    ' someValue now contains the numeric value 2.
someValue = "U" &amp; someValue
    ' someValue now contains "U2" (a two-character string).
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">A <B>Variant</B> variable isn't a variable with no data type; rather, it's a variable that can freely change its type to accommodate the data stored in the variable. An uninitialized <B>Variant</B> variable contains the special <B>Empty</B> value. As soon as you assign data to the <B>Variant</B> variable, the variable assumes the data type most appropriate for the assigned data.</P>
<P></P>
<H3><A NAME="sec0"></A>Storing Values in Variant Variables</H3><P CLASS="t">The <B>Variant</B> data type maintains an internal representation of stored values. This internal representation corresponds to one of the non-variant data types discussed earlier in this chapter, and it determines how Visual Basic treats the stored value when performing comparisons and other operations.</P>
<H4><A NAME="sec1"></A>Numeric Values Stored in Variant Variables</H4><P CLASS="t">When you store numbers in a <B>Variant</B> variable, Visual Basic uses the most compact representation possible. For example, if you store a small number without a decimal fraction, the variant uses an <B>Integer</B> representation for the value. If you then assign a larger number, Visual Basic uses a <B>Long</B> value. If the value is very large or has a fractional component, Visual Basic uses a <B>Double</B> value. (Visual Basic automatically uses the <B>Double</B> internal representation instead of the <B>Single</B> or <B>Currency</B> type to store a number with a fractional component in a variant.)</P>
<P CLASS="t">Sometimes you want to use a specific representation for a number. For example, you might want a variant to store a numeric value as <B>Currency</B> to avoid round-off errors in later calculations. Visual Basic provides several conversion functions that you can use to convert values into a specific type (see "Converting Data Types" later in this chapter). To convert a value to <B>Currency</B>, for example, you use the <B>CCur</B> function:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">payPerWeek = CCur(hours * hourlyPay)
</FONT></PRE>
<P CLASS="t">An error occurs if you attempt to perform a mathematical operation or function on a <B>Variant</B> variable that doesn't contain a number or something that can be interpreted as a number. For example, you cannot perform any arithmetic operations on the value "U2" even though it contains a numeric character, because the entire value isn't a valid number. Likewise, you cannot perform any calculations on the value "1040EZ." However, you can perform calculations on the values "+10" and " – 1.7E6" because they're valid numbers. For this reason, you'll often want to determine whether a variant contains a value that can be used as a number. The <B>IsNumeric</B> function performs this task, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Do
    anyNumber = InputBox("Enter a number")
Loop Until IsNumeric(anyNumber)
MsgBox "The square root is: " &amp; Sqr(anyNumber)
</FONT></PRE>
<P CLASS="t">If you assign a <B>Variant</B> variable containing a number to a <B>String</B> variable, Visual Basic automatically converts the representation of the number to a string. If you want to explicitly convert a number to a string, use the <B>CStr</B> function. You can also use the <B>Format</B> function to convert a number to a string that includes formatting such as currency, thousands separator, and decimal separator symbols.</P>
<P CLASS="t">For more information, see "Format" in Help. For information about writing macros for applications that will be distributed in foreign markets, see Appendix&nbsp;A, "Writing Code for International Use."</P>
<H4><A NAME="sec2"></A>Strings Stored in Variant Variables</H4><P CLASS="t">Generally, storing and using strings in <B>Variant</B> variables poses few problems. However, the result of the <B>+</B> operator can be ambiguous when it's used with two <B>Variant</B> values. If both of the <B>Variant</B> variables contain numbers, the <B>+</B> operator performs addition. If both of the <B>Variant</B> variables contain strings, the <B>+</B> operator performs string concatenation.</P>
<P CLASS="t">If one of the values is represented as a number and the other is represented as a string, the situation becomes more complicated. Visual Basic first attempts to convert the string into a number. If the conversion is successful, the <B>+</B> operator adds the two values; if the conversion is unsuccessful, it generates a "Type mismatch" error message.</P>
<P CLASS="t">To make sure that concatenation occurs, regardless of the representation of the value in the variables, use the &amp; operator, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub StringCat()
    Dim x, y

    x = "6"
    y = "7"
    With Worksheets(1)
        .Range("a1") = x + y        'concatenates values
        .Range("b1") = x &amp; y        'concatenates values
        x = 6
        .Range("a2") = x + y        'adds values
        .Range("b2") = x &amp; y        'concatenates values
    End With
End Sub
</FONT></PRE>
<P CLASS="t">The preceding example produces the following result on the worksheet:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">67        67
13        67
</FONT></PRE>
<P CLASS="t">When you type your code, make sure that you leave a space between any variable name and the &amp; operator. If you don't leave a space, Visual Basic assumes you intended to use the ampersand (&amp;) as the type-declaration character for the variable name. For more information about type-declaration characters, see "type-declaration character" in Help.</P>
<H4><A NAME="sec3"></A>Date/Time Values Stored in Variant Variables</H4><P CLASS="t"><B>Variant</B> variables can also contain date/time values. Several functions return date/time values. For example, the <B>Now</B> function returns the current date and time.</P>
<P CLASS="h">In the same way that you can use the <B>IsNumeric</B> function to determine whether a <B>Variant</B> variable contains a value that can be considered a valid numeric value, you can use the <B>IsDate</B> function to determine whether a <B>Variant</B> variable contains a value that can be considered a valid date/time value. You can then use the <B>CDate</B> function to convert the value into a date/time value. For more information, see "The Date Data Type" earlier in this chapter.</P>
<H4><A NAME="sec4"></A>Objects Stored in Variant Variables</H4><P CLASS="t"><B>Variant</B> variables can contain objects. This can be useful when you need to gracefully handle a variety of data types, including objects. For example, all the elements in an array must have the same data type. Setting the data type of an array to <B>Variant</B> allows you to store objects along with other data types in an array.</P>
<H4><A NAME="sec5"></A>Errors Stored in Variant Variables</H4><P CLASS="t">If you create your own error values using the <B>CVErr</B> function and you want to store them in variables, those variables must be of the <B>Variant </B>type. After you've assigned error values to those <B>Variant</B> variables, the variables have the <B>Error</B> subtype (<B>Error</B> is a subtype because there is no explicit <B>Error</B> data type). In the following example, myError is a <B>Variant</B> variable of subtype <B>Error</B>.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim myError
myError = CVErr(2010)
</FONT></PRE>
<P CLASS="t">Even though myError is a <B>Variant </B>variable, if you use it as an argument to the <B>TypeName</B> function, <B>TypeName</B> returns "Error," not "Variant." Using the <B>TypeName</B> function in this situation tells you whether a variable contains a user-defined error. You can also use the <B>IsError</B> function to test for error values.</P>
<P CLASS="t">For more information about user-defined errors, see Chapter 7, "Handling Run-Time Errors," or see "CVErr" or "IsError" in Help.</P>
<H4><A NAME="sec6"></A>The Empty Value</H4><P CLASS="t">A <B>Variant</B> variable contains the <B>Empty</B> value until it's assigned a value. The <B>Empty</B> value is a special value that's different from 0 (zero), a zero-length string (""), or the <B>Null</B> value. You can test for the <B>Empty</B> value using the <B>IsEmpty</B> function.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">If IsEmpty(z) Then z = 0
</FONT></PRE>
<P CLASS="t">When a <B>Variant</B> variable contains the <B>Empty</B> value, you can use it in expressions; it's treated as either 0 (zero) or a zero-length string (""), depending on the expression.</P>
<P CLASS="t">The <B>Empty</B> value in a <B>Variant </B>variable disappears as soon as any value is assigned to that variable (including the value of 0 (zero), the zero-length string, and the <B>Null</B> value). You can set a <B>Variant</B> variable back to the <B>Empty</B> value by assigning the keyword <B>Empty</B> to the <B>Variant </B>variable.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">z = Empty
</FONT></PRE>
<H4><A NAME="sec7"></A>The Null Value</H4><P CLASS="t">The <B>Variant</B> data type can contain one other special value: <B>Null</B>. <B>Null</B> is commonly used in database applications to indicate unknown or missing data. Because of the way it's used in databases, <B>Null</B> has some unique characteristics:</P>
<UL><LI>Expressions involving <B>Null</B> always result in <B>Null</B>; <B>Null</B> "propagates" through expressions. If any part of an expression evaluates to <B>Null</B>, the entire expression evaluates to <B>Null</B>.</LI><LI>Passing <B>Null</B>, a <B>Variant</B> variable containing <B>Null</B>, or an expression that evaluates to <B>Null</B> as an argument to most functions causes the function to return <B>Null</B>.</LI><LI><B>Null</B> values propagate through intrinsic functions that return <B>Variant</B> data types.</LI></UL><P></P>
<P CLASS="t">You can also assign <B>Null</B> with the <B>Null</B> keyword.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">z = Null
</FONT></PRE>
<P CLASS="t">You can use the <B>IsNull</B> function to test for whether a <B>Variant</B> variable contains <B>Null</B>.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">If IsNull(x) And IsNull(y) Then
    z = Null
Else
    z = 0
End If
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Variables aren't set to <B>Null</B> unless you explicitly assign <B>Null</B> to them, so if you don't use <B>Null</B> in your application, you don't have to write code that tests for it and handles it.</P>
<P></P>
<P CLASS="t">For more information about using <B>Null</B> in expressions, see "Null" in Help.</P>
<H3><A NAME="sec8"></A>Determining the Data Type of a Variant</H3><P CLASS="t">Most of the time, you don't have to be concerned with what internal representation Visual Basic is using for a particular stored value; Visual Basic handles conversions automatically. If you want to know what representation Visual Basic is using, however, you can use the <B>TypeName</B> or <B>VarType </B>function. The <B>TypeName</B> function returns a string for the data type; the <B>VarType</B> function returns a numeric value.</P>
<P CLASS="t">For example, if you store values with decimal fractions in a <B>Variant</B> variable, Visual Basic always uses the <B>Double</B> internal representation. If you know that your application doesn't need the high degree of accuracy (and slower speed) that a <B>Double</B> value entails, you can speed up your calculations by converting the values to <B>Single</B>, or even to <B>Currency</B>.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">If TypeName(x) = "Double" Then x = CSng(x) ' Convert to Single.
</FONT></PRE>
<P CLASS="t">For information about converting data types, see the following section, "Converting Data Types." For more information about the <B>TypeName</B> and <B>VarType</B> functions, see "TypeName" and "VarType" in Help.</P></FONT>
</FONT></BODY></HTML>

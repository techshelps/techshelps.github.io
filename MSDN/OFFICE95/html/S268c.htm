<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLExecQuery</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H3 CLASS="h2">SQLExecQuery</H3><P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>SQLExecQuery(</B><I>ConnectNum</I><B>, </B><I>Query$</I><B>)</B></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Sends a query to a data source using an existing connection and stores the entire query result in memory. </P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Unlike <B>SQLExecQuery</B>, <B>SQLQueryExec</B> does not store the entire query result in memory. To avoid resource problems when creating complex database solutions using the ODBC add-in library, use <B>SQLQueryExec</B>.</P>
<P></P>
<P CLASS="t">Before calling <B>SQLExecQuery</B>, a connection must be established with a data source using <B>SQLOpen</B>. A successful call to <B>SQLOpen</B> returns a unique connection ID number. <B>SQLExecQuery</B> uses that connection ID number to send SQL language queries to the data source.</P>
<P CLASS="t"><B>SQLExecQuery</B> only executes a query; results generated from the query are<BR>not returned. Retrieving results is handled by the <B>SQLRetrieveColumns</B>, <B>SQLRetrieveItem$</B>, and <B>SQLRetrieveRows</B> functions. If <B>SQLExecQuery</B> is called using an existing connection ID number, all pending results on that connection will automatically be discarded. The connection ID will then refer<BR>to the new query and its results.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="276pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Argument</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Explanation</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>ConnectNum</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The unique connection ID of the data source you want to query returned by a previously executed <B>SQLOpen</B> function. If <I>ConnectNum </I>is not valid, <B>SQLExecQuery</B> returns 0 (zero).</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>Query$</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The SQL language query that is to be executed on the data source. The query should follow SQL grammar; the Help file for the appropriate ODBC driver also describes any SQL language limitations or modifications for the given DBMS.</P>
<P CLASS="tt">If <B>SQLExecQuery</B> is unable to execute <I>Query$</I> on the specified data source, <B>SQLExecQuery</B> returns 0 (zero). The exact error can be obtained from the error functions. </P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">If <B>SQLExecQuery</B> is able to successfully execute the query on the specified connection, it will return one of three values, depending on the type of SQL statement that was executed.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="258pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>SQL statement</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Return value</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">SELECT </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The number of result columns available</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">UPDATE, INSERT or DELETE </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The number of rows affected by the statement</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Other </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A positive value</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">If there was an error executing the query, SQLExecQuery returns a negative error value.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">The following example sends a simple SELECT query to an established data source connection during asynchronous processing. While <B>SQLExecQuery</B> continues to return the value –2, the query is still being processed; the macro should wait for a final return value from <B>SQLExecQuery</B> before determining whether an error occurred.</P>
<P CLASS="spacing"><BR></P>
<PRE>ret = -2
While ret = -2
    ret = SQLExecQuery(connect_num, "select * from authors")
Wend
If ret &lt;= 0 Then Goto ParseErrors
</PRE></FONT></FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using OLE Automation with Word</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Using OLE Automation with Word</H2><P CLASS="t">OLE Automation is a protocol intended to replace DDE. As with DDE, an application can use OLE Automation to share data or control another application.</P>
<P CLASS="t">In OLE Automation, Word provides another application (called the "container" application) with an <I>object</I> — a unit of information similar to a topic in DDE. Word supports a single object called "WordBasic" for OLE Automation. You use the "WordBasic" object to send WordBasic instructions to Word. The technique is similar to sending commands to Word through DDE, but with OLE Automation, WordBasic instructions can return numbers or strings directly to the container application. This makes it possible to use WordBasic instructions as an extension of the container application's macro or programming language.</P>
<P CLASS="t">Note that Word can provide an object to another application for OLE Automation, but it cannot use OLE Automation to access objects in other applications. In other words, applications that support OLE Automation, such as Microsoft Excel or a Visual Basic application, can use OLE Automation to access Word, but Word cannot use OLE Automation to access them. (In DDE terms, Word can act as a server for another application but cannot act as the client.)</P>
<P CLASS="t">Microsoft Visual FoxPro version 3.0 includes an OLE Automation client example. For information about how to run and view the code associated with the OLE Automation example, see "OLE Automation Sample" in Microsoft Visual FoxPro Help. </P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Throughout this section, the term "Visual Basic" is used to refer to either Visual Basic version 3.0 or later (Windows) or Visual Basic in Microsoft Access version 7.0 (Windows) and Microsoft Excel version 5.0 or later (Windows or Macintosh), unless otherwise indicated.</P>
<P></P>
<H3 CLASS="h3"><A NAME="sec0"></A>Accessing Word</H3><P CLASS="t">The first step toward making Word available to a container application is to define an object variable that will reference the "WordBasic" object in Word. In Visual Basic, you declare a variable of type <B>Object</B>. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
</PRE>
<P CLASS="t">You then make the "WordBasic" object available to the container application by "creating" it for the application and assigning it to the object variable. In Visual Basic, you use the <B>CreateObject</B> function to create an object and the <B>Set</B> keyword to assign to the object variable. Here is the syntax:</P>
<P CLASS="syn"><B>Set</B> <I>ObjectVar</I>&nbsp;=&nbsp;<B>CreateObject("</B><I>Application</I><B>.</B><I>ObjectType</I><B>")</B></P>
<P CLASS="t">For example, in Visual Basic you could use the following instruction:</P>
<P CLASS="spacing"><BR></P>
<PRE>Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
</PRE>
<P CLASS="t">This instruction makes the "WordBasic" object in Word available to the container application for OLE Automation.</P>
<P CLASS="t">If Word version 6.0 is not running when another application needs to access it, OLE Automation starts a visible instance of Word. You don't need to include a separate instruction to start Word, as you do with DDE. An error occurs if Word cannot be found. While a visible instance is useful for debugging a Visual Basic procedure, you may want to hide the instance in the final macro. To do so, use the WordBasic <B>AppHide</B> statement:</P>
<P CLASS="spacing"><BR></P>
<PRE>Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
WordObj.AppHide</PRE>
<P CLASS="t">If Word version 7.0 is not running when another application needs to access it, OLE Automation starts a hidden instance of Word. While a hidden instance is useful for the final macro, you may want to make the instance visible while debugging the Visual Basic procedure. To do so, use the WordBasic <B>AppShow</B> statement:</P>
<P CLASS="spacing"><BR></P>
<PRE>Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
WordObj.AppShow
</PRE>
<P CLASS="t">Applications that fully support OLE Automation make their documents available as objects. Since Word supports only the "WordBasic" object for OLE Automation, you cannot use OLE Automation to directly access a Word document as an object (unless the document is embedded in the container application; see "Accessing an Embedded Word Object" later in this chapter). For example, you cannot use the <B>GetObject</B> function in Visual Basic to access a Word document. Instead, you use WordBasic instructions to access Word and to act on Word documents, as described in the following section.</P>
<P CLASS="t">If OLE Automation starts a Word session, OLE Automation will close Word when the object variable that references the "WordBasic" object expires — when either the procedure ends or the container application is closed. In Visual Basic, you can use the <B>Set</B> statement with the <B>Nothing</B> keyword to clear an object variable, which has the same effect as closing the container application.</P>
<P CLASS="t">Note that the "WordBasic" object does not support a method to close itself. That is, if Word is running when OLE Automation starts, you cannot close Word through OLE Automation; you can only close a Word session if you also used OLE Automation to start it.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Using WordBasic Statements and Functions</H3><P CLASS="t">Once you have made the "WordBasic" object available to the container application, you&nbsp;can use most WordBasic statements or functions to act on Word and Word documents. You use WordBasic instructions in OLE Automation in the same way you use them in Word macros.</P>
<P CLASS="t">WordBasic statements and functions not available to OLE Automation include the&nbsp;following: control structures, such as <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> and <B>If</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Then</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Else</B>; declaration statements such as <B>Dim</B>; statements associated with custom dialog boxes; the <B>FileExit</B> statement; and statements or functions that require array variables as arguments.</P>
<P CLASS="t">WordBasic functions that return strings end in a dollar sign ($). When using these functions in OLE Automation, you can either leave off the dollar sign or enclose it in brackets. The following instruction shows the <B>GetBookmark$</B><B>()</B> function as it might appear in a WordBasic macro:</P>
<P CLASS="spacing"><BR></P>
<PRE>mark$&nbsp;=&nbsp;GetBookmark$("Address")
</PRE>
<P CLASS="t">In Visual Basic, the same instruction might be specified as either of the following two instructions, where mark is a string variable:</P>
<P CLASS="spacing"><BR></P>
<PRE>mark&nbsp;=&nbsp;WordObj.[GetBookmark$]("Address")
mark&nbsp;=&nbsp;WordObj.GetBookmark("Address")
</PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The following WordBasic functions that return strings require the dollar sign and must be enclosed in brackets: <B>Font$</B><B>()</B>, <B>GetSystemInfo$</B><B>()</B>, and <B>Language$</B><B>()</B>. These WordBasic functions have the same keywords as WordBasic statements (for example, there is a <B>Font</B> statement as well as a <B>Font$</B><B>()</B> function); without the dollar sign WordBasic has no way to distinguish them from WordBasic statements.</P>
<P></P>
<P CLASS="t">The following example opens the Word document LETTER.DOC and then uses a&nbsp;WordBasic <B>GetBookmark$</B><B>()</B> instruction to retrieve the text of the "Address" bookmark in LETTER.DOC and display it in a message box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim mark As String
Dim WordObj As Object
Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
WordObj.FileOpen Name:= "LETTER.DOC"
mark&nbsp;=&nbsp;WordObj.GetBookmark("Address")
MsgBox mark
</PRE>
<P CLASS="t">The following example retrieves the list of bookmarks from the active document and displays their contents in a series of message boxes. These instructions use WordBasic instructions just as if they were part of the Visual Basic language. In effect, these instructions extend the functionality of Visual Basic. The only difference is that since WordBasic is not an object-oriented language with methods and properties like those of Visual Basic, the syntax of the WordBasic instructions does not match Visual Basic syntax.</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
Dim count As Integer, countmarks As Integer
countmarks&nbsp;=&nbsp;WordObj.CountBookmarks()
If countmarks &lt;&gt; 0 Then
ReDim bmarks$(1 To countmarks)
For count&nbsp;=&nbsp;1 To countmarks
    bmarks$(count)&nbsp;=&nbsp;WordObj.BookmarkName(count)
Next count
For count&nbsp;=&nbsp;1 To countmarks
    MsgBox bmarks$(count)
Next
End If
</PRE>
<P CLASS="t">In the following example, the instructions toggle the bold formatting of the selected paragraph in Word:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
WordObj.EditGoto "\Para"        'Select the current paragraph
If WordObj.Bold() &lt;&gt; 0 Then
    WordObj.Bold 0            'Remove bold from the selected text
Else
    WordObj.Bold 1            'Apply bold to the selected text
End If
</PRE>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>What Does the Instruction Act On?</B></P>
<P CLASS="sbrt">A significant difference between Visual Basic and WordBasic is that in Visual Basic, whatever a statement (or "method") acts on is specified in the statement itself. In WordBasic, however, that is not always the case. For example, an <B>EditCut</B> WordBasic instruction might cut anything from a single character to an entire document: it cuts whatever is selected in the active document when the instruction runs. Most WordBasic formatting and editing instructions work this way. If you're used to the Visual Basic way of doing things, keep in mind that when using WordBasic instructions, you usually need to be aware of the current selection or location of the insertion point.</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H3 CLASS="h3"><A NAME="sec2"></A>Accessing an Embedded Word Object</H3><P CLASS="t">So far, this section has described accessing Word as a separate application. But you can also access a Word object such as a Word document or Word picture embedded in the container application. In Visual Basic, you use the Object property to access the document or picture and to use WordBasic statements and functions to act on it. Here is the syntax for Visual Basic version 3.0 or later (not available on the Macintosh):</P>
<P CLASS="syn"><B>Set</B> <I>ObjectVar</I>&nbsp;=&nbsp;<I>OLEControlName</I>.<B>Object</B>.<B>Application</B>.<B>WordBasic</B></P>
<P CLASS="t"><I>ObjectVar</I> is a previously declared object variable; <I>OLEControlName</I> is the name of the OLE control in which the Word object is embedded. For example, you could use the following instructions to access a document embedded in an OLE control called OLE1:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj&nbsp;=&nbsp;OLE1.Object.Application.WordBasic
</PRE>
<P CLASS="t">In Microsoft Excel Visual Basic, you use the OLEObjects method to return the embedded Word object. The following example accesses a Word document object with the name Picture 1 (the name given to the object in Microsoft Excel, not a document filename) in the active worksheet:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj = ActiveSheet.OLEObjects("Picture 1")
</PRE>
<P CLASS="t">In Microsoft Access Visual Basic, you use the Object property to access an embedded Word document. For example, you could use the following instructions to access a document embedded in an OLE control called OLE1:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj = Me!OLE1.Object.Application.WordBasic
</PRE>
<P CLASS="t">The embedded object must be activated before it can be accessed. You can either include an instruction to activate the OLE control, or you can assume the object is activated in some other way (for example, the user double-clicks it). In Visual Basic version 3.0, you can use the Action property to activate OLE control. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>OLE1.Action&nbsp;=&nbsp;7
</PRE>
<P CLASS="t">In this instruction, OLE1 is the name of the OLE control in which the Word object is embedded.</P>
<P CLASS="t">In Visual Basic version 4.0, you can activate an OLE control using the Action property or the DoVerb method. For example, the following two instructions are equivalent:</P>
<P CLASS="spacing"><BR></P>
<PRE>OLE1.DoVerb(vbOLEShow)
OLE1.Action&nbsp;=&nbsp;7
</PRE>
<P CLASS="t">In Microsoft Excel Visual Basic, you use the Activate method to activate the Word object. In the following example, WordObj is an object variable in which the Word document object is stored:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.Activate
</PRE>
<P CLASS="t">In Microsoft Access Visual Basic, you use the Action property to activate the Word object. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Me!OLE1.Action = acOLEActivate
</PRE>
<P CLASS="t">The following example accesses a Word object embedded in a Visual Basic version 4.0 container application. Then it uses the WordBasic <B>EditSelectAll</B> statement to select all the text, and the WordBasic <B>Bold</B> statement to format it as bold. The Check1.SetFocus instruction deactivates the embedded Word object and returns the focus to a checkbox named "Check1."</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
OLE1.DoVerb(vbOLEShow)
Set WordObj&nbsp;=&nbsp;OLE1.Object.Application.WordBasic
WordObj.EditSelectAll
WordObj.Bold
Check1.SetFocus
Set WordObj = Nothing
</PRE>
<P CLASS="t">Here is the same example using Microsoft Excel Visual Basic. The final instruction, Range("B6").Activate, deactivates the embedded Word object and activates cell B6 in the active worksheet.</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj = ActiveSheet.OLEObjects("Picture 1")
WordObj.Activate
With WordObj.Object.Application.WordBasic
    .EditSelectAll
    .Bold
End With
Range("B6").Activate
</PRE>
<P CLASS="t">Here is the same example using Microsoft Access Visual Basic. The final instruction, DoCmd.GoToControl "Check1", activates the check box named "Check1."</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj = Me!OLE1.Object.Application.WordBasic
Me!OLE1.Action = acOLEActivate
WordObj.EditSelectAll
WordObj.Bold
DoCmd.GoToControl "Check1"
Set WordObj = Nothing
</PRE>
<H3 CLASS="h3"><A NAME="sec3"></A>Retrieving Word Dialog Box Settings</H3><P CLASS="t">You can retrieve Word dialog box settings when you're using OLE Automation to&nbsp;access either Word itself (through the "Basic" object) or an embedded Word document. To do so, you first create an object variable to hold the settings, and then place the settings in the object variable. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim TOVvar As Object
Set TOVvar&nbsp;=&nbsp;WordObj.CurValues.FileOpen
</PRE>
<P CLASS="t">The first instruction defines an object variable to hold the dialog box settings. The second instruction assigns the variable the current settings of the dialog box — in this case, the settings of the Open dialog box (File menu). WordObj is the object variable defined to access WordBasic. <B>CurValues</B> returns the dialog box settings from the dialog box specified. To specify a dialog box, you use the name of the WordBasic statement that corresponds to a Word dialog box. For example, <B>FileOpen</B> is the name of the WordBasic statement that corresponds to the Open dialog box (File menu). If you don't know the name to use for a dialog box, see "Language Summary" and "Statements and Functions" in Part 2, "WordBasic Reference."</P>
<P CLASS="t">Once you have placed the dialog box settings in an object variable, you use the following syntax to access them:</P>
<P CLASS="syn"><I>DialogObjectVar</I><B><I>.</I></B><I>DialogBoxSettingName</I></P>
<P CLASS="t"><I>DialogBoxSettingName</I> is the name of an argument for the WordBasic statement that corresponds to the dialog box whose settings are stored in <I>DialogObjectVar</I>. For the list of valid arguments, see the entry for the WordBasic statement in Part&nbsp;2, "WordBasic Reference."</P>
<P CLASS="t">The following Visual Basic example toggles the Draft Font setting on the View tab in the Options dialog box (Tools menu). Note that if you are using Visual Basic version 3.0, you cannot use the instruction WordObj.ToolsOptionsView DraftFont&nbsp;:=&nbsp;0 since DraftFont is a named argument. Instead, you specify the argument positionally, as described in "Using Positional Arguments in Visual Basic Version 3.0" later in this chapter.</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Dim TOVvar As Object
Set WordObj&nbsp;=&nbsp;CreateObject("Word.Basic")
Set TOVvar&nbsp;=&nbsp;WordObj.CurValues.ToolsOptionsView
If TOVvar.DraftFont&nbsp;=&nbsp;1 Then
    WordObj.ToolsOptionsView DraftFont&nbsp;:=&nbsp;0
Else
    WordObj.ToolsOptionsView DraftFont&nbsp;:=&nbsp;1
End If
</PRE>
<H3 CLASS="h3"><A NAME="sec4"></A>Running Word Macros and Displaying Dialog Boxes</H3><P CLASS="t">You can run a Word macro through OLE Automation, just as you can from within another Word macro. After the macro runs, control returns to the procedure that called it. You use the WordBasic <B>ToolsMacro</B> statement to run a macro. For example, the following instruction runs a macro called CountOpenWindows:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.ToolsMacro "CountOpenWindows", True
</PRE>
<P CLASS="t">Word must be the active application if the macro displays a dialog box, message box, input box, or anything that requires a response from the user before the macro can continue. If Word is not the active application, the macro comes to a halt and eventually an OLE Automation error occurs. To make Word the active application, you can use an instruction similar to the WordBasic <B>AppActivate</B> statement in the container application's macro or programming language.</P>
<P CLASS="t">You can't directly define and display a dialog box through OLE Automation, but you can run a Word macro to display the dialog box. If the dialog box is a dialog box built into Word, you can then use the <B>CurValues</B> method to retrieve its settings. If the dialog box is a custom dialog box, the macro that displays the dialog box can save the dialog box settings so that they remain after the macro is finished. For example, the macro could save the settings in a settings file. For information on settings files, see "Using Settings Files and Document Variables" in Chapter 9, "More WordBasic Techniques."</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>Passing Values to a Word Macro</B></P>
<P CLASS="sbrt">You cannot directly pass arguments to a Word macro or macro subroutine through OLE Automation. Within WordBasic, you can use the syntax <I>MacroName.Subroutine</I> [<B>(</B><I>ArgumentList</I><B>)</B>] to call subroutines in other macros and pass arguments to them, but this syntax is not supported by OLE Automation. If you want your Visual Basic code to run a WordBasic macro and to pass values to that macro, you must store those values in a location the macro can access. For example, you could store values in a settings file or in Word document variables. For information on settings files and document variables, see "Using Settings Files and Document Variables" in Chapter 9, "More WordBasic Techniques."</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The following Visual Basic example runs a Word macro called CreateAndSaveNewDoc and displays a message when the macro is finished. The Visual Basic <B>AppActivate</B> statement is used to activate Word before the macro runs, since the macro will display the Save As dialog box.</P>
<P CLASS="spacing"><BR></P>
<PRE>Dim WordObj As Object
Set WordObj = CreateObject("Word.Basic")
AppActivate "Microsoft Word"
WordObj.ToolsMacro "CreateAndSaveNewDoc", True
MsgBox "The CreateAndSaveNewDoc macro is done."
</PRE>
<P CLASS="t">You can also run this example in a Visual Basic version 3.0 application, but the Visual Basic version 3.0 <B>AppActivate</B> statement requires as an argument the same text that appears in the Word application window title bar. This text may change if a document window is maximized, so you need to add an <B>If</B> conditional to check whether this is the case and change the text specified in <B>AppActivate</B> accordingly. The following conditional uses the WordBasic functions <B>CountWindows</B>, <B>DocMaximize</B><B>()</B>, and <B>WindowName$</B><B>()</B> to accomplish this task:</P>
<P CLASS="spacing"><BR></P>
<PRE>If WordObj.CountWindows() &gt; 0 Then
    If WordObj.DocMaximize() = True Then
        AppActivate "Microsoft Word - " + WordObj.WindowName()
    Else
        AppActivate "Microsoft Word"
    End If
Else
    AppActivate "Microsoft Word"
End If
</PRE>
<P CLASS="t">Here is the CreateAndSaveNewDoc macro:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
AppMaximize "Microsoft Word"
On Error Goto bye
FileNew
FileSave
AppActivate "Microsoft Excel"
bye:
End Sub
</PRE>
<P CLASS="t">This macro maximizes the Word window (in case Word is minimized when the&nbsp;macro is called), then creates a new file and uses the <B>FileSave</B> statement to display the Save As dialog box (File menu). (This dialog box is displayed because the file has never been saved.) The <B>AppActivate</B> instruction at the end of the macro activates Microsoft Excel so that control returns to the routine that called the macro. If you are using Visual Basic version 4.0, you can use the AppActivate statement with the text from the application title bar (i.e. AppActivate "Form1")</P>
<H3 CLASS="h3"><A NAME="sec5"></A>Using Positional Arguments in Visual Basic Version 3.0</H3><P CLASS="t">WordBasic statements that correspond to Word dialog boxes use named arguments — arguments whose values are associated with names. For example, .Font is the named argument in the following instruction:</P>
<P CLASS="spacing"><BR></P>
<PRE>FormatDropCap .Font&nbsp;=&nbsp;"Arial"
</PRE>
<P CLASS="t">In Visual Basic version 4.0, Microsoft Excel Visual Basic, and Microsoft Access Visual Basic, you can call WordBasic instructions using named arguments, as shown in the following example:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.FormatDropCap Font:="Arial"
</PRE>
<P CLASS="t">You cannot call a WordBasic instruction from Visual Basic version 3.0 using named arguments. Instead, you identify arguments by position. The following example shows a WordBasic instruction as it could appear in a Word macro:</P>
<P CLASS="spacing"><BR></P>
<PRE>FormatDropCap .Position = 1, .Font = "Arial", .DropHeight = 3, .DistFromText = 6
</PRE>
<P CLASS="t">To use this instruction in a Visual Basic version 3.0 procedure, you would write the following:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.FormatDropCap 1, "Arial", 3, 6
</PRE>
<P CLASS="t">In this instruction, WordObj is an object variable that refers to WordBasic. If you want to leave out an argument, you must indicate the missing argument with a comma, as shown in the following instruction:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.FormatDropCap , "Arial", , 6
</PRE>
<P CLASS="t">Trailing commas can be omitted (for example, WordObj.FormatDropCap 1, "Arial" is valid; it isn't necessary to specify WordObj.FormatDropCap 1, "Arial", , ,).</P>
<P CLASS="t">Boolean "true" and "false" values are used to specify command buttons. For example, the following WordBasic instruction runs the macro CountOpenWindows:</P>
<P CLASS="spacing"><BR></P>
<PRE>ToolsMacro .Name&nbsp;=&nbsp;"CountOpenWindows", .Run
</PRE>
<P CLASS="t">where .Run is the named argument equivalent to the Run button in the Macro dialog box. In a Visual Basic version 3.0 procedure, the instruction might appear as follows:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.ToolsMacro "CountOpenWindows", True
</PRE>
<P CLASS="t">A true value is equivalent to choosing a command button; false is equivalent to not choosing it. The following instruction opens the CountOpenWindows macro for editing:</P>
<P CLASS="spacing"><BR></P>
<PRE>WordObj.ToolsMacro "CountOpenWindows", False, True
</PRE>
<P CLASS="t">In WordBasic, the third argument is .Edit, so in Visual Basic version 3.0 a true value in the third position is equivalent to choosing the Edit button. Omitting a command button argument is equivalent to giving it a value of false.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The syntax line for most statement and function entries in WordBasic Help describes the correct positional order of arguments. There are some exceptions, however. For a complete list of these exceptions and the correct order of their arguments, see POSITION.TXT on the Microsoft Word Developer's Kit disk (Windows).</P>
<P></P></FONT></FONT></BODY></HTML>

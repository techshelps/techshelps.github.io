<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exiting Loops and Procedures</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Exiting Loops and Procedures</H1><P CLASS="t">Usually, your macro will run through loops and procedures from beginning to end. There may be situations, however, when leaving a loop or procedure earlier than normal can save you time by avoiding unnecessary repetition.</P>
<P CLASS="t">For example, if you're searching for a value in an array using a <B>For...Next</B> loop and you find the value the first time through the loop, there's no reason to search the rest of the array — you can stop repeating the loop and continue with the rest of the procedure immediately. If an error occurs in a procedure that makes the remainder of the procedure unnecessary, you can leave the procedure immediately. You can cut a control structure off early by using one of the <B>Exit</B> statements.</P>
<P CLASS="t">While the <B>Exit</B> statements can be convenient, you should use them only where absolutely necessary and only as a response to an extraordinary condition (not in the normal flow of a loop or procedure). Overusing <B>Exit</B> statements can make your code difficult to read and debug.</P>
<P CLASS="t">There may be better ways to avoid portions of your macro. For example, instead of using an <B>Exit</B> statement inside a <B>For...Next</B> loop searching for a value in an array, you could use a <B>Do</B> loop to search the array only while an incremented index value is smaller than the array's upper bound and a Boolean variable value is <B>False</B>. When you find the array value, setting the Boolean value to <B>True</B> causes the loop to stop.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">i = LBound(searchArray)
ub = UBound(searchArray)
foundIt = False
Do
    If searchArray(i) = findThis Then foundIt = True
    i = i + 1
Loop While i &lt;= ub And Not foundIt
</FONT></PRE>
<P CLASS="t">You use the <B>Exit For</B> statement to exit directly from a <B>For</B> loop, and you use the <B>Exit Do</B> statement to exit directly from a <B>Do</B> loop.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c in rangeToSearch
    If c.Value = searchValue Then
        found = True
        Exit For
    End If
Next
</FONT></PRE>
<P CLASS="t">You use the <B>Exit Sub</B> and <B>Exit Function</B> statements to exit a procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c in rangeToSearch
    If c.Value = searchValue Then
        counter = counter + 1
    ElseIf c.Value = "Bad Data" Then
        countValues = Null
        Exit Function    'Stop testing and exit immediately.
    End If
Next c</FONT></PRE>
<P CLASS="t"></P></FONT>
</FONT></BODY></HTML>

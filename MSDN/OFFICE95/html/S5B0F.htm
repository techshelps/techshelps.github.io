<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Do...Loop</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Do...Loop</H2><P CLASS="t">Use a <B>Do...Loop</B> statement to run a block of statements an indefinite number of times. There are several variations of the <B>Do...Loop</B> statement, but each one evaluates a condition to determine whether or not to continue running. As with an <B>If...Then </B>statement, the condition must be a value or an expression that evaluates to <B>True</B> or <B>False</B>. The different variations are described in this section. For more information about the <B>Do...Loop</B> statement, see "Do...Loop" in Help.</P>
<H3><A NAME="sec0"></A>Do While...Loop</H3><P CLASS="t">Use the <B>Do While...Loop</B> statement when you want to test a condition before you run the loop and then continue to run the loop while the condition is <B>True</B>.</P>
<P CLASS="syn"><B>Do While</B> <I>condition<BR></I>    <I>statements<BR></I><B>Loop</B></P>
<P CLASS="t">The statements<I> </I>must eventually cause the condition to become <B>False</B>, or the loop will run forever (this is called an <I>infinite loop</I>). To stop an infinite loop, press Esc or CTRL+BREAK.</P>
<P CLASS="t">The following <B>Function</B> procedure counts the occurrences of a target string within another string by looping as long as the target string is found. Because the test is at the beginning of the loop, the loop runs only if the string contains the target string.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Function CountStrings(longstring, target)
    position = 1
    Do While InStr(position, longstring, target) 'Returns True/False
        position = InStr(position, longstring, target) + 1
        Count = Count + 1
    Loop
    CountStrings = Count
End Function
</FONT></PRE>
<H3><A NAME="sec1"></A>Do Until...Loop</H3><P CLASS="t">Use the <B>Do Until</B> statement if you want to test the condition at the beginning of the loop and then run the loop until the test condition becomes <B>True</B>. If the condition is initially <B>True</B>, the statements inside the loop never run.</P>
<P CLASS="syn"><B>Do Until</B> <I>condition</I><BR>    <I>statements</I><BR><B>Loop</B></P>
<P CLASS="t">With the test at the beginning of the loop in the following example, the loop doesn't run if <B>Response</B> is equal to <B>vbNo</B>.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Response = MsgBox("Do you want to process more data?", vbYesNo)
Do Until Response = vbNo
    ProcessUserData    'Call procedure to process data
    Response = MsgBox("Do you want to process more data?", vbYesNo)
Loop
</FONT></PRE>
<H3><A NAME="sec2"></A>Do...Loop While</H3><P CLASS="t">When you want to make sure that the loop will run at least once, you can put the test at the end of the loop. The statements run as long as the condition is <B>True</B>.</P>
<P CLASS="syn"><B>Do<BR></B>    <I>statements<BR></I><B>Loop While </B><I>condition</I></P>
<P CLASS="t">This variation guarantees that your procedure will run the loop at least once.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub MakeBlue()
    Set rSearch = Worksheets("sheet1").Range("a1:a10")
    Set c = rSearch.Find("test")
    If Not c Is Nothing Then
        first = c.Address
        Do
            c.Font.ColorIndex = 5
            Set c = rSearch.FindNext(c)
        Loop While (Not c Is Nothing) And (c.Address &lt;&gt; first)
    Else
        MsgBox "not found"
    End If
End Sub
</FONT></PRE>
<H3><A NAME="sec3"></A>Do...Loop Until</H3><P CLASS="t">With the <B>Loop Until</B> test at the end of the loop, the loop runs at least once and stops running when the condition becomes <B>True</B>.</P>
<P CLASS="syn"><B>Do<BR></B>    <I>statements</I><BR><B>Loop Until </B><I>condition</I></P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Do
    ProcessUserData    'Call procedure to process data
    response = MsgBox("Do you want to process more data?", vbYesNo)
Loop Until response = vbNo
</FONT></PRE></FONT>
</FONT></BODY></HTML>

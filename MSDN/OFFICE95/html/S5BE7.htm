<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exporting Data</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Exporting Data</H2><P CLASS="t">In addition to importing data into Microsoft Excel from another application, you may also want to export data from Microsoft Excel to another application so that you can create a presentation with it or combine it with other data.</P>
<H3><A NAME="sec0"></A>Exporting Data to PowerPoint</H3><P CLASS="t">You may want to present your data in an application other than Microsoft Excel. The following example charts the data from Sheet1 in the active workbook (the imported data from Microsoft Project) and places it in a PowerPoint slide for presentation. The code starts the PowerPoint application, creates a presentation, and adds one slide to it. The slide is then prepared to accept a chart, and you can chart the data from Sheet1 by using the Microsoft Excel ChartWizard.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set pptApp = CreateObject("PowerPoint.Application.7")
Set pptPres = pptApp.Presentations.Add
Set pptSlide = pptPres.Slides.Add(1, 1)
Set pptSlideObj = pptSlide.Objects _
    .AddOleObject("Excel.Chart", 1000, 1000, 5000, 5000)
Set pptChart = pptSlideObj.Object
With pptChart
    .ChartWizard Source:=Worksheets("sheet1").Range("A1:B4"), _
        Gallery:=xlPie, Format:=7, PlotBy:=xlColumns, _
        CategoryLabels:=1, SeriesLabels:=0, HasLegend:=2
    .HasTitle = True
    .ChartTitle.Text = "My Schedule"
    .ChartTitle.Font.Color = RGB(0, 0, 255)
    .HasLegend = True
End With
pptPres.SaveAs "MayWork.ppt"
</FONT></PRE>
<H3><A NAME="sec1"></A>Exporting Data to Word</H3><P CLASS="t">The customized <B>Chart</B> object that the example in the preceding section creates can be placed in a Word document by means of OLE Automation. However, the approach is different because you use WordBasic statements and functions instead of objects, properties, and methods to refer to and work with the <B>WordBasic</B> object.</P>
<P CLASS="t">The following example takes the first <B>Chart </B>object from Sheet1 in the active workbook, copies it to the Clipboard, and pastes it into the Word document called "MyDoc.doc."</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim wdbasic As Object

Worksheets("sheet1").ChartObjects(1).Copy
Set wdbasic = CreateObject("word.basic")
With wdbasic
    .FileOpen "C:\msoffice\winword\MyDoc.doc"
    .EditPaste
    .FileSave
End With
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The preceding example embeds the chart in the Word document. To link the chart into the Word document, use the <B>EditPasteSpecial</B> method. For more information about linking and embedding, see "Communicating with Embedded Word Objects" later in this chapter.</P>
<P></P>
<H4><A NAME="sec2"></A>Using Conventional Arguments</H4><P CLASS="t">When you use WordBasic commands as part of OLE Automation, you must use conventional arguments instead of named arguments — that is, you must specify arguments by position instead of by name. If you leave out a conventional argument, you must indicate the missing value with a comma; you can, however, omit trailing commas. The following line of WordBasic code uses named arguments to apply drop cap formatting.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">FormatDropCap .Position = 1, .Font = "Arial", .DropHeight = "3", \
    .DistFromText = "6"
</FONT></PRE>
<P CLASS="t">The following Visual Basic code does the same thing as the preceding example, but using conventional arguments. Your code must have already created the object variable wordobj and opened a file in Word before you run this line.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">wordobj.FormatDropCap 1, "Arial", 3, 6
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The syntax for most statement and function entries in WordBasic Help describes the correct order for conventional arguments. There are some exceptions, however. For a complete list of these exceptions and the correct order of their arguments, see the Position.txt file included on the companion disk in the <I>Microsoft Word Developer's Kit</I>.</P>
<P></P>
<H4><A NAME="sec3"></A>Running a Macro from Outside Word</H4><P CLASS="t">In addition to calling individual WordBasic commands, you can use the <B>ToolsMacro</B> command to run existing Word macros from outside Word. The following code runs a Word macro called "CreateDocandFormat." For more information about the <B>ToolsMacro</B> command and its arguments, see "ToolsMacro" in Help.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim wordobj As Object

Set wordobj = CreateObject("Word.Basic")
wordobj.toolsmacro "CreateDocandFormat", True
</FONT></PRE></FONT>
</FONT></BODY></HTML>

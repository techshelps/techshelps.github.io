<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Method</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H1>Add Method</h1>

<H2>Applies To</h2>

<p class="t"><b>Collection</b> Object.</p>

<H2>Description</h2>

<p class="t">Adds a member to a <b>Collection</b> object.</p>

<H2>Syntax</h2>

<p class="syn"><i>object</i><b>.Add(</b><b><i>item</i></b><b>,</b>
[<i>key</i>]<b>, </b>[<i>before</i>]<b>, </b>[<i>after</i>]<i>)</i></p>

<p class="t">The <b>Add</b> method syntax has the following
object qualifier and named-arguments:</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>object</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. An object expression that
        evaluates to an object in the Applies To list.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>item</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. An expression of any type that
        specifies the member to add to the collection.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>key</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A unique string expression
        that specifies a key string that can be used, instead of
        a positional index, to access a member of the collection.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>before</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. An expression that specifies a
        relative position in the collection. The member to be
        added is placed in the collection before the member
        identified by the <i>before</i> argument. If a numeric
        expression, <i>before</i> must be a number from 1 to the
        value of the collection&#146;s <b>Count</b> property. If
        a string expression, <i>before</i> must correspond to the
        <i>key</i> specified when the member being referred to
        was added to the collection. You can specify <i>before</i>
        or <i>after</i> positions but not both.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>after</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. An expression that specifies a
        relative position in the collection. The member to be
        added is placed in the collection after the member
        identified by the <i>after</i> argument. If numeric, <i>after</i>
        must be a number from 1 to the value of the
        collection&#146;s <b>Count</b> property. If a string, <i>after</i>
        must correspond to the <i>key</i> specified when the
        member being referred to was added to the collection. You
        can specify <i>before</i> or <i>after</i> positions but
        not both.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<H2>Remarks</h2>

<p class="t">An error occurs if a value provided for <i>before </i>or
<i>after </i>would not return a member of the collection when
provided to the <b>Item</b> method as the <i>index</i>. In other
words, whether the <i>before</i> or <i>after </i>argument is a
string or numeric expression, it must refer to an existing member
of the collection.</p>

<p class="t">An error also occurs if a specified <i>key</i>
duplicates the <i>key</i> for an existing member of the
collection.</p>

<H2>See Also</h2>

<p class="t"><b>Item</b> Method, <b>Remove</b> Method.</p>

<H2>Specifics (Microsoft Access)</h2>

<p class="t">Items added to a user-defined collection are
automatically indexed. You can refer to an individual item by
this index. For example, if you have a collection colThings that
contains four objects, you can refer to the third item in the
collection with the expression colThings(3).</p>

<p class="nt"><b>Note</b> When you add items to a <b>Collection</b>
object, they are automatically indexed beginning with the number
1. Therefore, when you enumerate a <b>Collection</b> object, keep
in mind that the index begins at 1. This may be different from
built-in collections, which usually are indexed beginning with 0.</p>

<p class="t">When you add an object to a user-defined collection,
you can specify a custom key for that object in addition to the
automatic index. In subsequent references to the object, you can
refer to the custom key. For example, you can add an object
objMine with the following key.</p>

<p class="spacing"><br>
</p>

<pre>colThings.Add Item := objMine, key := (&quot;A&quot;)
</pre>

<p class="t">Subsequently you can refer to this particular object
in the collection either as colThings(A), or by its numeric
index.</p>

<H2>Example</h2>

<p class="t">This example uses the <b>Add</b> method to add Inst
objects (instances of a class called Class1 containing a <b>Public
</b>variable InstanceName) to a collection called MyClasses. To
see how this works, choose the Class Module command from the
Insert menu and declare a public variable called InstanceName at
module level of Class1 (type <b>Public</b> InstanceName) to hold
the names of each instance. Leave the default name as Class1.
Copy and paste the following code into the Form_Load event
procedure. (If your host application doesn&#146;t have forms,
paste the code at module-level and enclose it in a <b>Sub...End
Sub</b> block.)</p>

<p class="spacing"><br>
</p>

<pre>Dim MyClasses As New Collection    ' Create a Collection object.Num As Integer                ' Counter for individualizing keys.TheName                        ' Holder for names user enters.
    Dim Inst As New Class1        ' Create a new instance of Class1.
    Num = Num + 1                ' Increment Num, then get a name.
    Msg = &quot;Please enter a name for this object.&quot; &amp; Chr(13) _
         &amp; &quot;Press Cancel to see names in collection.&quot;
    TheName = InputBox(Msg, &quot;Name the Collection Items&quot;)
    Inst.InstanceName = TheName    ' Put name in object instance.
    ' If user entered name, add it to the collection.
    If Inst.InstanceName &lt;&gt; &quot;&quot; Then
        ' Add the named object to the collection.
        MyClasses.Add item := Inst, key := CStr(Num)
    End If
    ' Clear the current reference in preparation for next one.
    Set Inst = NothingUntil TheName = &quot;&quot;
</pre>

<p class="t">The following example creates a user-defined
collection and uses the <b>Add</b> method to add new objects to
it. To test this example, create a new form and save it as Form1.
In the form&#146;s module, declare a public variable varInstName.
Your new user-defined objects will be derived from this form and
its module.</p>

<p class="t">You can manipulate individual objects within the
collection by calling the methods or setting the properties that
you have defined for them. In the module of Form1, enter the
following code.</p>

<p class="spacing"><br>
</p>

<pre>' Declare public variable in Declarations section of form module.varInstName As Variant
Sub ChangeCaption (strCaption As String)
    Me.Visible = True
    Me.Caption = strCaptionSub
</pre>

<p class="t">This <b>Sub</b> procedure becomes a method that you
can perform on your user-defined object, once you have created a
new instance of the object.</p>

<p class="t">With these steps completed, enter the following
procedure in a standard module. When you run this procedure, it
will create new instances of your user-defined object and add
them to the collection defined by the <b>Collection</b> object.
Then it will display the objects (forms in this case) with their
changed captions.</p>

<p class="spacing"><br>
</p>

<pre>Function MakeCollection()
    ' Create new Collection object using New keyword.
    Dim colFormObjects As New Collection
    ' Declare other variables.
    Dim strObjName As String, strList As String
    Dim strMsg As String, strCRLF As String
    Dim intI As Integer

    strCRLF = Chr(13) &amp; Chr(10)

    ' Create objects and add them to collection.
    Do
        ' Create new instance of user-defined object.
        Dim frmObject As New Form_Form1
        strMsg = (&quot;Please enter a name for this new object.&quot; &amp; strCRLF _
            &amp; &quot;Press Cancel to see the items in the collection.&quot;)
        ' Get name for this instance of object.
        strObjName = InputBox(strMsg, &quot;Name the collection item:&quot;)
        ' Store name in public variable you declared in form module.
        frmObject.varInstName = strObjName
        ' If user entered name, add object to collection.
        If frmObject.varInstName &lt;&gt; &quot;&quot; Then
            colFormObjects.Add Item := frmObject
        End If
        ' Clear object variable so it can be set to next instance.
        Set frmObject = Nothing
    Loop Until strObjName = &quot;&quot;

    ' Enumerate and display items in collection.
    ' Note that items in Collection object are indexed beginning with 1.
    intI = 1
    For Each frmObject In colFormObjects
        strList = strList &amp; frmObject.varInstName &amp; strCRLF
        frmObject.ChangeCaption (&quot;New Form #&quot; &amp; intI)
        intI = intI + 1
    Next frmObject
    ' Display list of object names.
    MsgBox strList, , &quot;Objects in colFormObjects collection&quot;Function
</pre>
</FONT></FONT></BODY>
</html>

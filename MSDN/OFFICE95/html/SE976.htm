<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declarations and Variables</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Declarations and Variables</H2><P CLASS="t">For a macro language, VBA has sophisticated data types and the means to hide or share data in the code.  For instance, use the Public statement to declare a variable that is available to all modules in all applications that support VBA.  There is also a Private statement to declare variables that are available only to procedures within the same module.  The Static statement defines variables inside procedures that retain their value as long as a macro is running.  These procedures can remember their state the last time they were called.  </P>
<P CLASS="t">As far as performance is concerned, always try to use the smallest, most specific data type to get the best speed of execution.  The Variant data type is very flexible because it can have the attributes of both a number and a string, but code that accesses Variant data frequently runs slower than code that uses a simpler data type such as String or Integer.  </P>
<P CLASS="t">Visual Basic for Applications also has an Object data type.  It can refer to any VBA object, such as a worksheet, cell, chart, or even objects in other applications.  One example would be Word's WordBasic object.  Object variables can also reduce the work needed to refer to a lengthy identifier in code.  For instance, both ways of referring to the Wiz1 dialog sheet are valid in the code below, but which is better?  </P>
<P>Const GWizBookName = "PERSONAL.XLS"</P>
<P>Dim GWiz1 As Object</P>
<P>Sub Main()</P>
<P>    ' Initializations...</P>
<P>    ' Here's one way of referring to an edit control in the Wiz1 dialog:</P>
<P>    Set GWiz1 = ThisWorkbook.DialogSheets("Wiz1")</P>
<P>    GWiz1.[RangeEdit].Caption = GDataRange.Address</P>
<P>    ' Here's another way:  </P>
<P>    Workbooks(GWizBookName).DialogSheets("Wiz1").[RangeEdit].Caption _ </P>
<P>    = GDataRange.Address</P>
<P>Example 4.  Two kinds of variable reference styles</P>
<P CLASS="t">Actually, there are many more ways than just two!. The first method, using the ThisWorkbook property, is the best way to reference contained sheets in a workbook.  ThisWorkbook returns the workbook containing the running code regardless of whether the workbook is an add-in or an ordinary workbook users can edit.  </P>
<P CLASS="t">Besides making the code more readable, using ThisWorkbook makes code independent of:</P>
<P>·    Whether it is in the active workbook</P>
<P>·    Whether the workbook is an add-in</P>
<P>·    The name of the workbook (If code references Workbooks("PERSONAL.XLS") as was done above, when the user renames the workbook the code will break).</P>
<P CLASS="t">This will become important if code is installed in PERSONAL.XLS, the personal macro workbook.  When this code runs the user's data will be in a different workbook from the one where the dialog sheets and macros are.  Using ThisWorkbook is also more maintainable because there is only one hard-coded reference to the Wiz1 dialog.  Renaming the dialog affects only one line of code.  An explicit object reference (the second method above) should be used only when code needs to refer to something in a different workbook and the names of both workbooks won't change.  </P>
<P CLASS="t">Another consideration in working with variables is performance.  With VBA objects, shorter references are better.  The reason for this is that each property or method in a variable reference counts as an IDispatch transaction.  IDispatch is one of the interfaces in Object Linking and Embedding (OLE).  In the reference </P>
<P>ActiveSheet.Worksheets(1).Range("A1").Value,<I> </I></P>
<P>     1            2            3        4</P>
<P CLASS="t"></P>
<P CLASS="t">there are four IDispatch transactions.  The more object accessors or "dot" operators there are in code, the slower it will be.  An object variable improves performance whenever a variable reference is used multiple times, as in the example below.  </P>
<P>Dim GWiz3 As Object</P>
<P>Sub Main()</P>
<P>'Use an object variable since we will be accessing this a lot.</P>
<P>Set GWiz3 = ThisWorkbook.DialogSheets("Wiz3")</P>
<P>...</P>
<P>End Sub</P>
<P>Sub OptionBinCount_Click()</P>
<P>    GWiz3.[BinWidthHelp].Visible = False</P>
<P>    GWiz3.[BinCountHelp].Visible = True</P>
<P>    GWiz3.Focus = GWiz3.[EditBinValue].Name</P>
<P>End Sub</P>
<P CLASS="t">If the same reference is needed for just a few lines of code rather than in many places, the With statement is a useful way of "factoring" an object reference.  Once inside the With...End With block an object reference is re-used for each statement.  So, instead of writing</P>
<P>ActiveDialog.Buttons.[ButtonWiz3Cancel].DismissButton = True</P>
<P>ActiveDialog.Buttons.[ButtonWiz3Back].DismissButton = True</P>
<P>ActiveDialog.Buttons.[ButtonWiz3Next].DismissButton = False</P>
<P>ActiveDialog.Buttons.[ButtonWiz3Finish].DismissButton = False</P>
<P CLASS="t">Save six IDispatch transactions (and a lot of typing!) by writing</P>
<P>With ActiveDialog.Buttons</P>
<P>    .[ButtonWiz3Cancel].DismissButton = True</P>
<P>    .[ButtonWiz3Back].DismissButton = True</P>
<P>    .[ButtonWiz3Next].DismissButton = False</P>
<P>    .[ButtonWiz3Finish].DismissButton = False</P>
<P>End With</P>
<P CLASS="t">Loops containing object references should always be factored.  The fastest way to set properties for a large number of cells is to enclose the loop in a With...End With block:  </P>
<P>With ActiveWorkbook.Sheets(2)</P>
<P>    For c = 1 to 1000</P>
<P>        .Cells(c, 1) = c</P>
<P>    Next c</P>
<P>End With</P></FONT>
</FONT></BODY></HTML>

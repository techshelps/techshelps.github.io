<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variant Data Type</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1>Variant Data Type</H1><P CLASS="t">  </P>
<H2>Description</H2><P CLASS="t">The <B>Variant</B> data type is the data type that all variables become if not explicitly declared as some other type (using statements such as <B>Dim</B>, <B>Private</B>, <B>Public</B>, or <B>Static</B>). The <B>Variant</B> data type has no type-declaration character.</P>
<P CLASS="t">The <B>Variant</B> is a special data type that can contain any kind of data except fixed-length <B>String</B> data and user-defined types. A <B>Variant</B> can also contain the special values <B>Empty</B>, <B>Error</B>, <B>Nothing</B>, and <B>Null</B>. You can determine how the data in a <B>Variant</B> is treated using the <B>VarType</B> or <B>TypeName</B> function.</P>
<P CLASS="t">Numeric data can be any integer or real number value ranging from <BR>.797693134862315E308 to -4.94066E-324 for negative values and from 4.94066E-324 to 1.797693134862315E308 for positive values. Generally, numeric <B>Variant</B> data is maintained in its original data type within the <B>Variant</B>. For example, if you assign an <B>Integer</B> to a <B>Variant</B>, subsequent operations treat the <B>Variant</B> as if it were an <B>Integer</B>. However, if an arithmetic operation is performed on a <B>Variant</B> containing a <B>Byte</B>, an <B>Integer</B>, a <B>Long</B>, or a <B>Single</B>, and the result exceeds the normal range for the original data type, the result is promoted within the <B>Variant</B> to the next larger data type. A <B>Byte</B> is promoted to an <B>Integer</B>, an <B>Integer</B> is promoted to a <B>Long</B>, and a <B>Long</B> and a <B>Single</B> are promoted to a <B>Double</B>. An error occurs when <B>Variant</B> variables containing <B>Currency</B> and <B>Double</B> values exceed their respective ranges.</P>
<P CLASS="t">You can use the <B>Variant</B> data type in place of any data type to work with data in a more flexible way. If the contents of a <B>Variant</B> variable are digits, they may be either the string representation of the digits or their actual value, depending on the context. For example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyVar As Variant= 98052
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">In the example shown above, MyVar contains a numeric representation — the actual value 98052. Arithmetic operators work as expected on <B>Variant</B> variables that contain numeric values or string data that can be interpreted as numbers. If you use the <B>+</B> operator to add MyVar to another <B>Variant</B> containing a number or to a variable of a numeric data type, the result is an arithmetic sum. See the information about addition and concatenation operators for complete information on how to use them with <B>Variant</B> data.</P>
<P CLASS="t">The value <B>Empty</B> denotes a <B>Variant</B> variable that hasn’t been initialized (assigned an initial value). A <B>Variant</B> containing <B>Empty</B> is 0 if it is used in a numeric context and a zero-length string (" ") if it is used in a string context.</P>
<P CLASS="t">Don’t confuse <B>Empty</B> with <B>Null</B>. <B>Null</B> indicates that the <B>Variant</B> variable intentionally contains no valid data.</P>
<P CLASS="t">In a <B>Variant</B>, <B>Error</B> is a special value used to indicate that an error condition has occurred in a procedure. However, unlike for other kinds of errors, normal application-level error handling does not occur. This allows you, or the application itself, to take some alternative based on the error value. <B>Error</B> values are created by converting real numbers to error values using the <B>CVErr</B> function.</P>
<H2>See Also</H2><P CLASS="t"><B>CVar</B> Function, <B>CVErr</B> Function, Data Type Summary, <B>Def</B><I>type</I> Statements, <B>Dim</B> Statement, <B>Nothing</B>, <B>Private</B> Statement, <B>Public</B> Statement, <B>Static</B> Statement, <B>TypeName</B> Function.</P>
<P CLASS="t"> </P></FONT></FONT></BODY></html>

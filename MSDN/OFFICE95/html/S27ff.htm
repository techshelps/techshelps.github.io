<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Errors</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Handling Errors</H2><P CLASS="t">When Word is asked to do something it can't do, an error condition occurs, and Word displays an error message box. An error condition is different from the WordBasic language errors described in the previous chapter; those errors are errors in the way a macro is written. However, a macro can be thoroughly debugged and still encounter error conditions. Here are some macro actions that&nbsp;can cause errors:</P>
<UL><LI>    Trying to open a file that isn't available</LI><LI>    Trying to create a bookmark with an invalid name</LI><LI>    Trying to use a command that isn't available&nbsp;—&nbsp;for example, trying to use&nbsp;the Annotations command (View menu) when the document doesn't contain&nbsp;annotations</LI></UL><P></P>
<P CLASS="t">When you encounter these errors as you're working on documents in Word, you&nbsp;just close the error message box and continue working. But when a macro encounters an error, it stops, and the rest of the instructions in the macro are not carried out&nbsp;—&nbsp;unless you include instructions to <I>trap</I>, or <I>handle</I>, the error. When a&nbsp;macro handles an error, it can respond to it and continue. WordBasic includes several statements you can use to handle errors.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>WordBasic and Word Errors</H3><P CLASS="t">When you're working on documents in Word, the only errors you encounter are&nbsp;Word errors. A macro, however, can also generate WordBasic errors. Some WordBasic errors, such as syntax errors (discussed in the previous chapter), prevent a macro from running. Others&nbsp;—&nbsp;the ones you might want to trap&nbsp;— occur&nbsp;only when a macro is running in specific situations. </P>
<P CLASS="t">The distinction between WordBasic and Word errors is important because a macro can prevent a WordBasic error message box from being displayed, but cannot prevent a Word error message box from being displayed. </P>
<P CLASS="t">For example, if you run a macro that includes a command that is not available, WordBasic displays a WordBasic error message box, as shown in the following illustration. If you include instructions in your macro to handle that error, the error message box will not be displayed; the macro will carry out the error-handling instructions. The error-handling instructions could move the insertion point to a context in which the command is available, for example.</P>
<P CLASS="a">    <img src="ATR0701.gif"></P>
<P CLASS="t">On the other hand, if a macro tries to move the insertion point to a bookmark that doesn't exist, Word generates a Word error and will display an error message box whether or not the macro includes error-handling instructions. The error-handling instructions do make a difference, however. Without them, Word stops the macro where the error occurs. With them, the macro can continue after the user closes the error message box, and the macro can respond to the error, perhaps by requesting the name of another bookmark.</P>
<P CLASS="a">    <img src="ATR0702.gif"></P>
<P CLASS="t">Every error has a number. WordBasic errors have numbers below 1000; Word errors have numbers of 1000 or above. You can use these numbers in a macro to test for and respond to different types of errors. There are a few WordBasic errors, such as "Syntax error" and "Unknown Command, Subroutine, or Function," that prevent a macro from running and that you cannot trap.</P>
<P CLASS="t">For a complete list of WordBasic and Word error messages, see "Error Messages" in Part 2, "WordBasic Reference."</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Error-Handling Instructions</H3><P CLASS="t">WordBasic provides three forms of the <B>On Error</B> statement; the special variable <B>Err</B>; and the <B>Error</B> statement for handling errors in your macros.</P>
<H4 CLASS="h4"><A NAME="sec2"></A>On Error Goto <I>Label</I></H4><P CLASS="t">This form of the <B>On Error</B> statement enables error handling. It must be placed before the instruction that can generate an error. When an error occurs, Word goes to the line indicated by <I>Label</I>.</P>
<P CLASS="t">The following example displays an input box in which the user can type the name&nbsp;of a file to open. If the user chooses the Cancel button when the input box is&nbsp;displayed, a WordBasic error is generated. (You may not consider choosing the&nbsp;Cancel button an error, but WordBasic does.)</P>
<P CLASS="t">To trap the error, you place the <B>On Error Goto </B><I>Label</I> instruction before the instruction that displays the input box. If the user chooses the Cancel button, the error is trapped, and Word goes to the line indicated by <I>Label</I>. In this case the label is bye, which is at the end of the macro. So if the user chooses the Cancel button in the input box, the macro ends without displaying an error message box.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
On Error Goto bye
ans$ = InputBox$("Please type the name of a file to open:")
FileOpen ans$
'Series of instructions that operate on the file that was opened
bye:
End Sub
</PRE>
<P CLASS="t"><B>On Error Goto</B> <I>Label</I> places the number of the error generated when the user chooses the Cancel button in the special variable <B>Err</B>, described later in this section.</P>
<H4 CLASS="h4"><A NAME="sec3"></A>On Error Resume Next</H4><P CLASS="t">This form of the <B>On Error</B> statement allows a macro to trap errors and ignore them. When an error occurs, the macro simply resumes and goes to the next instruction as if nothing had happened. Using <B>On Error Resume Next</B> is sometimes the simplest way to deal with an error.</P>
<P CLASS="t">The following version of the previous example shows another way to deal with the error that occurs if the user chooses the Cancel button to close an input box. In&nbsp;this example, if the user chooses the Cancel button, the error is ignored. The <B>If</B> conditional tests whether a value was placed in the ans$ variable. No value is placed in it if the user chooses Cancel, so the <B>FileOpen</B> instruction doesn't run in&nbsp;that case.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
On Error Resume Next
ans$ = InputBox$("Please type the name of a file to open:")
If ans$ &lt;&gt; "" Then FileOpen ans$
'Series of instructions that operate on the file that was opened
End Sub
</PRE>
<P CLASS="t">After an <B>On Error Resume Next</B> instruction, Word continues to ignore any errors that might occur until the macro ends or until it encounters an instruction that disables error trapping, such as <B>On Error Goto 0</B>. As useful as it can be to have Word ignore specific errors, such as the one generated by the Cancel button, to have <I>all</I> errors ignored can cause problems: A macro may not work properly after an unexpected error occurs. So it's a good idea to disable error trapping (or use <B>On Error Goto</B> <I>Label</I> to reset error trapping) after using <B>On Error Resume Next</B>.</P>
<P CLASS="t"><B>On Error Resume Next</B> sets the value of the special variable <B>Err</B> to 0 (zero). <B>Err</B>&nbsp;is described later in this section.</P>
<H4 CLASS="h4"><A NAME="sec4"></A>On Error Goto 0</H4><P CLASS="t">This form of the <B>On Error</B> statement is used to disable error trapping. While both <B>On Error Goto </B><I>Label</I> and <B>On Error Resume Next</B> allow the macro to continue when an error occurs, <B>On Error Goto 0</B> ensures that if an error is encountered, an error message is displayed and the macro stops.</P>
<P CLASS="t">You can use <B>On Error Goto 0</B> to limit error handling to a specific part of your macro. In the following example, <B>On Error Goto 0</B> is used to disable the error handling enabled by <B>On Error Resume Next</B>. Because the rest of the macro is meant to operate on an open file, the macro should end if no file is opened. <B>On Error Goto 0</B> ensures that the macro is stopped if the <B>FileOpen</B> instruction generates an error.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
On Error Resume Next
ans$ = InputBox$("Please type the name of a file to open:")
On Error Goto 0
If ans$ &lt;&gt; "" Then FileOpen ans$
'Series of instructions that operate on the file that was opened
End Sub
</PRE>
<H4 CLASS="h4"><A NAME="sec5"></A>Err</H4><P CLASS="t">When error trapping is enabled with <B>On Error Goto </B><I>Label</I>, the number of any error that occurs is stored in the special variable <B>Err</B>. By testing this value, the macro can take different actions according to the type of error that occurs.</P>
<P CLASS="t">In the following example, the On Error Goto trap instruction enables error handling. The error-handling instructions, beginning after the label trap, test for three different values. If <B>Err </B>is equal to 102, it means that the user chose the Cancel button in the input box, in which case the Goto bye instruction ends the macro. If <B>Err </B>is equal to 1078 or 1177, the user typed either an invalid filename or the name of a file that isn't stored in the current folder. In either case, the macro displays a message box that asks the user if he or she would like to try to open the file again. If the user chooses the Yes button, the macro resets <B>Err</B> to 0&nbsp;(zero) and goes to the tryagain label.</P>
<P CLASS="t">By default, <B>Err</B> has a value of 0 (zero). Once an error occurs and <B>Err</B> is assigned a nonzero value, error trapping is disabled until <B>Err</B> is reset to 0 (zero). In the following example, <B>Err</B> must be reset to 0 (zero) or error trapping will not work when the instructions after the tryagain label are repeated:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
tryagain:
    On Error Goto trap
    ans$ = InputBox$("Please type the name of a file to open:")
    FileOpen ans$
    'Series of instructions that operate on the file that was opened
    Goto bye
trap:
    If Err = 102 Then Goto bye            'User cancels input box
    If Err = 1078 Or Err = 1177 Then        'Not found/invalid filename
        response = MsgBox("Couldn't open the file. Try again?", 4)
                If response = -1 Then
                Err = 0
                Goto tryagain
        End If
    End If
bye:
End Sub
</PRE>
<P CLASS="t">You can look up the number that corresponds to any Word or WordBasic error message in "Error Messages" in Part 2, "WordBasic Reference."</P>
<H4 CLASS="h4"><A NAME="sec6"></A>Error</H4><P CLASS="t">You can use the <B>Error</B> statement to generate an error so that you can test whether your error trap works as intended, without having to create an actual error situation. Here is an example:</P>
<P CLASS="spacing"><BR></P>
<PRE>On Error Goto trap
Error 502                'Simulate error 502
trap:
If Err = 502 Then MsgBox "Error was trapped."
</PRE>
<P CLASS="t">If error trapping is not enabled before an <B>Error</B> instruction runs, Word highlights the <B>Error</B> instruction in the macro-editing window and stops the macro. If the error you specified is a WordBasic error, Word displays the corresponding error message box; if it is a Word error, no message is displayed.</P></FONT></FONT></BODY></HTML>

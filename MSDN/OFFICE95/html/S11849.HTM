<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Forms Collection</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec279"></A>Forms Collection</H1><P CLASS="t">  </P>
<H2><A NAME="sec280"></A>Description</H2><P>The <B>Forms</B> collection contains all of the currently open forms in a Microsoft Access database.</P>
<H2><A NAME="sec281"></A>Remarks</H2><P>Use the <B>Forms</B> collection in Visual Basic or in an expression to refer to forms that are currently open. For example, you can enumerate the <B>Forms</B> collection to set or return the values of properties of individual forms in the collection.</P>
<P CLASS="t">  </P>
<P><B>Tip</B>   The <B>For Each...Next</B> statement is useful for enumerating a collection.</P>
<P CLASS="t">  </P>
<P>You can’t add or delete a <B>Form</B> object from the <B>Forms</B> collection.</P>
<P>You can refer to an individual <B>Form</B> object in the <B>Forms</B> collection either by referring to the form by name, or by referring to its index within the collection.</P>
<P>The <B>Forms</B> collection is indexed beginning with zero. If you refer to a form by its index, the first form is Forms(0), the second form is Forms(1), and so on.</P>
<P CLASS="t">  </P>
<P><B>Note</B>   To list all forms in the database, whether open or closed, enumerate the <B>Documents</B> collection of the Forms <B>Container</B> object. You can then use the <B>Name</B> property of each individual <B>Document</B> object to return the name of a form.</P>
<P CLASS="t">  </P>
<H2><A NAME="sec282"></A>Properties</H2><P><B>Count</B> Property.</P>
<H2><A NAME="sec283"></A>See Also</H2><P><B>Application</B> Object; <B>For Each...Next</B> Statement; <B>Form</B> Object; <I>Microsoft Office 95 Data Access Reference</I>: <B>Container</B> Object, <B>Document</B> Object, <B>Documents</B> Collection.</P>
<H2><A NAME="sec284"></A>Example</H2><P>The following example enumerates the <B>Forms</B> collection and prints the name of each form in the <B>Forms</B> collection. It then enumerates the <B>Controls</B> collection of each form and prints the name of each control on the form.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub AllOpenForms()
    Dim frm As Form, ctl As Control

    ' Enumerate Forms collection.
    For Each frm In Forms
        ' Print name of form.
        Debug.Print frm.Name
        ' Enumerate Controls collection of each form.
        For Each ctl In frm.Controls
            ' Print name of each control.
            Debug.Print "&gt;&gt;&gt;"; ctl.Name
        Next ctl
    Next frmSub
</PRE>
<P CLASS="t">  </P>
<P>The following example uses the <B>Forms</B> collection in an expression. If you have a form OrderForm with a control ShipCountry, you can use the <B>IIf</B> function to return a value based on the current value of the control. If the value of ShipCountry is <B>Null</B>, the expression returns a zero-length string; otherwise, it returns the field’s contents. Enter the following expression in the <B>ControlSource</B> property of a text box on a form.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>= IIf(IsNull(Forms![Orders]![ShipCountry]), "", _    Forms![Orders]![ShipCountry])
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

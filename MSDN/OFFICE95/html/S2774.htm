<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More Conditionals and Loops</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">More Conditionals and Loops</H2><P CLASS="t">The previous chapter introduced the <B>If</B> conditional and the <B>While…Wend</B> loop. This chapter introduces the following control structures, which are typically useful in more complex macros:</P>
<UL><LI>    The <B>For…Next</B> loop</LI><LI>    The <B>Select</B> <B>Case</B> conditional</LI><LI>    The <B>Goto</B> statement</LI></UL><P></P>
<H3 CLASS="h3"><A NAME="sec0"></A>The For…Next Loop</H3><P CLASS="t">You use the <B>For…Next</B> loop when you want to carry out a group of instructions a&nbsp;specific number of times. Here is the syntax (the arguments in brackets are optional):</P>
<P CLASS="syn"><B>For </B><I>CounterVariable</I>&nbsp;=&nbsp;<I>Start </I><B>To</B> <I>End </I>[<B>Step</B><I> Increment</I>] <BR>    <I>Series of instructions</I><BR><B>Next </B>[<I>CounterVariable</I>]</P>
<P CLASS="t">Word carries out the <I>instructions</I> between <B>For</B> and <B>Next</B> as many times as it takes&nbsp;for the <I>CounterVariable</I> to increment from the <I>Start</I> value to the <I>End</I> value. The <I>CounterVariable</I> is incremented each time Word runs the <B>Next</B> instruction following the <I>instructions</I>. The <I>Increment</I> indicates how much to increment the counter; if this is omitted, as is often the case, the counter is incremented by 1.</P>
<H4 CLASS="h4"><A NAME="sec1"></A>Examples</H4><P CLASS="t">The following example displays in the status bar the numbers from 1 to 12, one at&nbsp;a time:</P>
<P CLASS="spacing"><BR></P>
<PRE>For dozen&nbsp;=&nbsp;1 To 12            'Loop 12 times
    Print dozen                'Display the value in the status bar
Next dozen                    'Return to the For statement to repeat loop
</PRE>
<P CLASS="t">The initial value of dozen is 1, as set in the <B>For</B> instruction. During the first iteration, the <B>Print</B> statement displays 1 (the value of dozen) in the status bar; during the next iteration, it displays 2; during the next, 3; and so on until month reaches 12&nbsp;—&nbsp;the end of the loop and the last number displayed in the status bar.</P>
<P CLASS="t">The following example creates a document with a sample sentence formatted in each available font:</P>
<P CLASS="spacing"><BR></P>
<PRE>For count&nbsp;=&nbsp;1 To CountFonts()        'Loop for the number of fonts
    fname$&nbsp;=&nbsp;Font$(count)            'Place a font name in "fname$"
    Font fname$                        'Apply formatting with this font
    Insert "This is " + fname$ + "."    'Insert sentence
    InsertPara                        'Insert paragraph mark
Next count
</PRE>
<P CLASS="t">The <B>CountFonts</B><B>()</B> function returns the number of available fonts. Because this value is the end value of the loop, the number of times the loop will repeat is equivalent to the number of available fonts. The <B>Font$</B><B>()</B> function returns the name of the current font from the list of available fonts. In the example, the instruction Font$(count) returns the font whose position in the list of fonts corresponds to the value of count.</P>
<P CLASS="t">Several functions begin with "Count" and work much like <B>CountFonts</B><B>()</B> does: They return the number of macros, AutoText entries, styles, and so on. These functions are often used to control <B>For…Next</B> loops just as <B>CountFonts</B><B>()</B> does in&nbsp;the previous example.</P>
<P CLASS="t">You can nest a <B>For…Next </B>loop by placing it within another <B>For…Next</B> loop. The&nbsp;following example uses a nested loop to create a simple calendar based on a&nbsp;360-day year:</P>
<P CLASS="spacing"><BR></P>
<PRE>For months&nbsp;=&nbsp;1 To 12             'Loop 12 times
    For days&nbsp;=&nbsp;1 To 30            'Loop 30 times
        Insert Str$(days)         'Insert "days" as a string
    Next days                    'Return to "For days&nbsp;=&nbsp;1..."
    InsertPara                    'Insert a paragraph mark
Next months                        'Return to "For months&nbsp;=&nbsp;1..."
</PRE>
<P CLASS="t">The outside loop repeats 12 times, corresponding to the months of the year. Then,&nbsp;for each month, the inside loop repeats for the 30 days in the month. The <B>Insert </B>instruction uses the <B>Str$</B><B>()</B><B> </B>function to convert the value stored in the numeric variable day into a string, then inserts it into a document (you cannot use the <B>Insert</B> statement to insert a numeric value).</P>
<P CLASS="t">You can set up <B>For</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Next</B> statements in many ways. The following table provides some examples of different start and end values and their possible increment values.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="180pt" VALIGN="TOP"><COL WIDTH="166pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Example</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Result</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">For dozens&nbsp;=&nbsp;0 To 144 Step 12</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The variable dozens increments from 0&nbsp;(zero) to 144 in steps of 12.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">For countdown&nbsp;=&nbsp;10 To 1 Step -1</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The variable countdown decrements from 10 to 1 in steps of –1.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">For loop&nbsp;=&nbsp;start To finish Step size</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The variable loop increments or decrements from the value of the variable start to the value of the variable finish in steps equal to the&nbsp;variable size.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">For count&nbsp;=&nbsp;count To count + 10</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The initial value of the variable count is increased by 10 in steps of 1 (the default increment).</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Note that the <B>For…Next</B> loop increment (the value after <B>Step</B>) can be a positive or negative number&nbsp;—&nbsp;positive numbers increase the counter, and negative numbers decrease it. If the end value is larger than the start value (for example, For x&nbsp;=&nbsp;1 To 10), the increment must be positive. Likewise, if the end value is smaller (for example, For x&nbsp;=&nbsp;10 To 1), the increment must be negative.</P>
<H3 CLASS="h3"><A NAME="sec2"></A>The Select Case Conditional</H3><P CLASS="t"><B>Select</B> <B>Case</B> is useful when you want to test many different conditions or a range of conditions. It's similar to the <B>If</B> conditional, but is more efficient for testing multiple conditions. Here is the syntax (arguments in brackets are optional):</P>
<P CLASS="syn"><B>Select Case</B> <I>Expression</I> <BR>    <B>Case</B> <I>CaseExpression</I><BR>        <I>Series of instruction(s)</I><BR>    [<B>Case Else<BR>    </B>    <I>Series of instruction(s)</I>]<BR><B>End Select</B></P>
<P CLASS="t">A <B>SelectCase</B> conditional can contain any number of <B>Case</B> instructions. The result of the <I>Expression</I> is compared with the <I>CaseExpression</I> values in every given <B>Case </B>instruction until a match is found. If a match is found, the instructions following the appropriate <B>Case</B> instruction are carried out. If there is no match, the&nbsp;instructions following <B>Case Else</B> are carried out. If there is no <B>Case Else</B> instruction and no match is found, Word displays an error message. To be safe, you should include a <B>Case Else</B> instruction&nbsp;—&nbsp;even if no statements follow it and it&nbsp;has no effect&nbsp;—&nbsp;to ensure that Word doesn't generate an error, regardless of the value of <I>Expression</I>. In <I>CaseExpression</I>, you can use the <B>Is</B> keyword when you want to use logical operators to compare <I>Expression</I> with a value. For example, Case Is &gt; 5. You use the <B>To</B> keyword to test for a range of values. For example, Case 10 To 20 (10 and 20 are included in the range).</P>
<H4 CLASS="h4"><A NAME="sec3"></A>Examples</H4><P CLASS="t">A macro that creates a calendar needs to determine how many days are in each month. Four of the months contain 30 days, February has 28 (in non-leap years), and the remaining months have 31 days. In the following example, the <B>Select Case</B> instruction tests the value of the month variable and then assigns the appropriate value to the lastday variable. The month variable is a number from 1&nbsp;to 12 that corresponds to a month of the year.</P>
<P CLASS="spacing"><BR></P>
<PRE>Select Case month                'Select the value of month
    Case 4,6,9,11                'If month is 4,6,9, or 11
        lastday&nbsp;=&nbsp;30                'the month has 30 days
    Case 2                        'If month is 2 (February)
        lastday&nbsp;=&nbsp;28                'the month has 28 days
    Case Else                    'Otherwise
        lastday&nbsp;=&nbsp;31                'the month has 31 days
End Select
</PRE>
<P CLASS="t">Note that the first <B>Case</B> instruction has several values, separated by commas. If&nbsp;month equals any one of these values, the instruction following the <B>Case</B> instruction (lastday&nbsp;=&nbsp;30) is carried out.</P>
<P CLASS="t">The following example uses the <B>StyleName$</B><B>()</B> function to return the name of the&nbsp;style applied to the paragraph that contains the insertion point. Each <B>Case</B> instruction proposes a style name to match the one returned by <B>StyleName$</B><B>()</B>. If&nbsp;the style name matches the proposed style, the instruction following the <B>Case</B> instruction is carried out.</P>
<P CLASS="spacing"><BR></P>
<PRE>Select Case StyleName$()                    'Select the current stylename
    Case "ListItem1"                        'If it's "ListItem1"
        ToolsBulletsNumbers .Type&nbsp;=&nbsp;0    'add a bullet
    Case "ListItem2"                        'If it's "ListItem2"
        StartOfLine                        'go to the start of the line
        Insert "-" + Chr$(9)                'and insert a hyphen and a tab
    Case Else                            'Otherwise
        MsgBox "Not a list style"        'display a message
End Select
</PRE>
<P CLASS="t">The following example demonstrates how you can use the <B>Is</B> and <B>To</B> keywords in&nbsp;<B>Case</B> instructions to test for a range of values. The example uses the <B>Rnd</B><B>()</B> function to generate a random number from 0 (zero) to 10. The <B>Case</B> instructions test the number generated by <B>Rnd</B><B>()</B> and display a corresponding message.</P>
<P CLASS="spacing"><BR></P>
<PRE>Select Case Int(Rnd() * 10)         'Select a random number from 0 to 10
    Case 0,1,3                    'If it is 0, 1, or 3
        Print "0, 1, or 3"        'print this message
    Case Is &gt; 8                    'If it is greater than 8
        Print "Greater than 8"    'print this message
    Case 4 To 8                     'If it is between 4 and 8
        Print "Between 4 and 8"    'print this message
    Case Else                     'Otherwise
        Print "It's 2"             'print this message
End Select
</PRE>
<P CLASS="t">The second <B>Case</B> instruction uses the <B>Is</B> keyword and the greater than (&gt;) operator to test for any value greater than 8. The third <B>Case</B> instruction uses the <B>To</B> keyword to test for a value that falls in the range of values between 4 and 8.</P>
<H3 CLASS="h3"><A NAME="sec4"></A>The Goto Statement</H3><P CLASS="t"><B>Goto</B> isn't a conditional or a loop, but it is included in this section because, like a&nbsp;conditional or loop, it controls the flow of a macro&nbsp;—&nbsp;the order in which Word interprets a macro's instructions. <B>Goto</B> tells Word to go to a line in the macro and carry out the instructions from that line forward. Among programmers, <B>Goto</B> is infamous for having the potential to create difficult-to-read code, often referred to&nbsp;as "spaghetti code" because it can make the flow of a program tangled and difficult to follow. Used sparingly, though, <B>Goto</B> can be useful in some situations. Also, it is usually necessary in WordBasic to use <B>Goto</B> with error-handling instructions (for information on error handling, see Chapter 7, "The Well-Behaved Macro").</P>
<P CLASS="t">Here is the syntax for <B>Goto</B>:</P>
<P CLASS="syn"><B>Goto</B> <I>Label</I></P>
<P CLASS="t">Word goes to the line in the macro that starts with <I>Label</I>, which must be within the same subroutine or user-defined function as the <B>Goto</B> instruction (see "Subroutines and User-Defined Functions" later in this chapter). A line label must begin at the start of a line (it cannot be preceded by a space or tab character) and end with a colon (:). The rules for <I>Label</I> names are the same as those for variable names (see "Variables" in Chapter 3, "WordBasic Fundamentals").</P>
<P CLASS="t">You can also use a line number with a <B>Goto</B> instruction instead of a label, although it's unusual to use line numbers in WordBasic macros. Line numbers are&nbsp;supported primarily for compatibility with old Basic programs in which line numbers were required. Like a label, a line number must begin at the start of a line; the line number can be as high as 32759. Unlike a text label, a line number does not need a colon following it. </P>
<P CLASS="t">The following example uses the <B>InputBox$</B><B>()</B> function to request a social security number, then tests to see whether the number typed by the user is longer than 11 characters. If it is, the example displays a message box that asks the user to try entering the social security number again.</P>
<P CLASS="spacing"><BR></P>
<PRE>tryagain:
answer$&nbsp;=&nbsp;InputBox$("Please enter your social security number: ")
If Len(answer$) &gt; 11 Then
    MsgBox "Too many characters. Please try again."
    Goto tryagain
End If
</PRE>
<P CLASS="t">The <B>Goto </B>instruction sends Word to the tryagain: label, so that the entire sequence of instructions is repeated. Note that when the <B>Goto</B> instruction refers to the tryagain: label, the ending colon (:) is dropped.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>Nesting Conditionals and Loops</B></P>
<P CLASS="sbrt">It's often useful to <I>nest</I> conditionals and loops — that is, to place a conditional or loop within another conditional or loop. The following example uses an <B>If</B> conditional within a <B>Select Case</B> conditional to assign 29 to the lastday variable if month is 2 (February) and it's a leap year:</P>
<P CLASS="ct">Select Case this month            'Select the value of month</P>
<P CLASS="ct">    Case 4,6,9,11                'If month is 4,6,9, or 11</P>
<P CLASS="ct">        lastday&nbsp;=&nbsp;30                'the month has 30 days </P>
<P CLASS="ct">    Case 2                        'If month is 2 (February)</P>
<P CLASS="ct">        If leapyear&nbsp;=&nbsp;1 Then        'If it's a leap year </P>
<P CLASS="ct">            lastday&nbsp;=&nbsp;29            'the month has 29 days</P>
<P CLASS="ct">        Else                        'Otherwise</P>
<P CLASS="ct">               lastday&nbsp;=&nbsp;28            'the month has 28 days</P>
<P CLASS="ct">        End If                    'End of If conditional</P>
<P CLASS="ct">    Case Else                    'Otherwise</P>
<P CLASS="ct">        lastday&nbsp;=&nbsp;31                'the month has 31 days</P>
<P CLASS="ct">End Select</P>
<P CLASS="ct"></P>
<P CLASS="sbrt">WordBasic supports up to 16 levels of nesting. Generally, though, it's best to limit nesting to no more than three or four levels; the more levels you use, the more obscure the logic of the macro can become.</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P></FONT></FONT></BODY></HTML>

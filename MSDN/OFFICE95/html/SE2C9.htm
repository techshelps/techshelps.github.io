<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AddIn Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>AddIn Object</H2><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Represents a single add-in, either installed or not installed.</P>
<P CLASS="h"><B>Accessors</B></P>
<P CLASS="t">The <B>AddIn</B> object is a member of the <B>AddIns</B> collection. The <B>AddIns</B> collection contains a list of all the add-ins available to Microsoft Excel, regardless of whether they are installed. This list corresponds to the list of add-ins displayed in the Add-Ins dialog box (Tools menu). To access a single member of the collection, use the <B>AddIns</B> method with the add-in title or index number as an argument. Do not confuse the add-in title, which appears in the Add-Ins dialog box, with the add-in name, which is the filename of the add-in.</P>
<P CLASS="t">Use the <B>Title</B> property to return the title of the add-in (this property is read-only for add-ins). You must exactly match the spelling, but not the capitalization, of the title as it is shown in the Add-Ins dialog box. The following example installs the Analysis Toolpak add-in.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">AddIns("analysis toolpak").Installed = True
</FONT></PRE>
<P CLASS="t">The index number represents the position of the add-in in the list of add-ins shown in the Add-Ins dialog box. The following example creates a list on the worksheet named "Sheet1." The list contains specified properties of the available add-ins.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub EnumerateAddIns()
    Worksheets("sheet1").Rows(1).Font.Bold = True
    Worksheets("sheet1").Range("a1:d1").Value = _
        Array("Name", "Full Name", "Title", "Installed")
    For i = 1 To AddIns.Count
        Worksheets("sheet1").Cells(i + 1, 1) = AddIns(i).Name
        Worksheets("sheet1").Cells(i + 1, 2) = AddIns(i).FullName
        Worksheets("sheet1").Cells(i + 1, 3) = AddIns(i).Title
        Worksheets("sheet1").Cells(i + 1, 4) = AddIns(i).Installed
    Next
    Worksheets("sheet1").Range("a1").CurrentRegion.Columns.AutoFit
End Sub
</FONT></PRE>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">The <B>Add</B> method adds an add-in to the list of available add-ins but does not install the add-in. Set the <B>Installed</B> property of the add-in to <B>True</B> to install it. To install an add-in not shown in the list of available add-ins, you must first use the <B>Add</B> method and then set the <B>Installed </B>property. This can be done in a single step, as shown in the following example (note that you use the name of the add-in, not the title, with the <B>Add</B> method):</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">AddIns.Add("generic.xll").Installed = True
</FONT></PRE>
<P CLASS="t">Use the <B>Workbooks</B> method with the add-in filename (not title) to return a reference to the workbook corresponding to a loaded add-in. You must use the filename because loaded add-ins do not normally appear in the <B>Workbooks</B> collection. The following example sets the wb variable to the workbook for MYADDIN.XLA.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set wb = Workbooks("myaddin.xla")
</FONT></PRE>
<P CLASS="t">The following example sets the wb variable to the workbook for the Analysis Toolpak add-in.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set wb = Workbooks(AddIns("analysis toolpak").Name)
</FONT></PRE>
<P CLASS="t">If the <B>Installed</B> property returns <B>True</B>, but calls to functions in the add-in still fail, the add-in may not actually be loaded. This is because the <B>Addin</B> object represents the existence and installed state of the add-in but doesn't represent the actual contents of the add-in workbook (the add-in dialog sheets, worksheets, and so on).To guarantee that an installed add-in is loaded, you should open the add-in workbook. The following example opens the workbook for the add-in named "My Addin" if the add-in is not already present in the <B>Workbooks </B>collection.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">On Error Resume Next    ' turn off error checking
Set wbMyAddin = Workbooks(Addins("My Addin").Name)
lastError = Err
On Error Goto 0        ' restore error checking
If lastError &lt;&gt; 0 Then
    ' the add-in workbook isn't currently open. Manually open it.
    Set wbMyAddin = Workbooks.Open(Addins("My Addin").FullName)
End If
</FONT></PRE>
<P CLASS="t">While in a Visual Basic module, you create an add-in by clicking the Make Add-In command on the Tools menu. The <B>AddIn</B> object provides a programming interface to the Add-In Manager; it doesn't actually create an add-in.</P>
<P CLASS="h"><B>Properties</B></P>
<P CLASS="t"><B>Application</B> Property, <B>Author</B> Property, <B>Comments</B> Property, <B>Creator</B> Property, <B>FullName</B> Property, <B>Installed</B> Property, <B>Keywords</B> Property, <B>Name</B> Property, <B>Parent</B> Property, <B>Path</B> Property, <B>Subject</B> Property, <B>Title</B> Property.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GoSub...Return Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec29"></A>GoSub...Return Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec30"></A>Description</H2><P>Branches to and returns from a subroutine within a procedure.</P>
<H2><A NAME="sec31"></A>Syntax</H2><P><B>GoSub</B> <I>line</I><BR>    . . .<BR>    <I>line</I><BR>    . . .<BR><B>Return</B></P>
<P>The <I>line</I> argument can be any line label or line number.</P>
<H2><A NAME="sec32"></A>Remarks</H2><P>You can use <B>GoSub</B> and <B>Return</B> anywhere in a procedure, but <B>GoSub</B> and the corresponding <B>Return</B> must be in the same procedure. A subroutine can contain more than one <B>Return</B> statement, but the first <B>Return</B> statement encountered causes the flow of execution to branch back to the statement immediately following the most recently executed <B>GoSub</B> statement.</P>
<P CLASS="t">  </P>
<P><B>Note</B>   You can’t<B> </B>enter or exit <B>Sub</B> procedures with <B>GoSub...Return</B>.</P>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P><B>Tip</B>   Creating separate procedures that you can call may provide a more structured alternative to using <B>GoSub...Return</B>.</P>
<P CLASS="t">  </P>
<H2><A NAME="sec33"></A>See Also</H2><P><B>GoTo</B> Statement; <B>On...GoSub</B>, <B>On...GoTo</B> Statements; <B>Sub</B> Statement.</P>
<H2><A NAME="sec34"></A>Example</H2><P>This example uses <B>GoSub</B> to call a subroutine within a <B>Sub</B> procedure. The <B>Return</B> statement causes the execution to resume at the statement immediately following the <B>GoSub</B> statement. The <B>Exit Sub</B> statement is used to prevent control from accidentally flowing into the subroutine.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub GosubDemo()
        ' Solicit a number from the user.
        Num = InputBox("Enter a positive number to be divided by 2.")
        ' Only use routine if user enters a positive number.
        If Num &gt; 0 Then GoSub MyRoutine    
        Debug.Print Num
        Exit Sub            ' Use Exit to prevent an error.
    MyRoutine:
        Num = Num/2        ' Perform the division.
        Return            ' Return control to statement.Sub                    ' following the GoSub statement.</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

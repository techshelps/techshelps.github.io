<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Techniques for Successful Calling</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Techniques for Successful Calling</H2><P CLASS="t">It is important to make your Word API code robust because a problem in your Word API code can cause problems in Word. Any possible error conditions should be accounted for, and proper allocation and deallocation of memory should be verified, especially when passing strings.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Handling Errors</H3><P CLASS="t">The <B>wdCommandDispatch</B> function returns an error code that should always be checked. Error constants are defined in WDERROR.H, and errors specific to the Word API are listed in "Word API Errors" later in this appendix. Any nonzero returned value indicates a problem, and your code should accommodate all cases.</P>
<P CLASS="t">In Windows, you should also be careful with function calls into other Windows DLLs, and take appropriate action for any unexpected conditions. A good working knowledge of Windows programming techniques will help make your Word API programming successful.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Allocating Memory</H3><P CLASS="t">It is the responsibility of the WLL to allocate and deallocate required memory. This means you must declare or allocate appropriate memory space for all string buffers, arrays, and so on. For dynamically allocated variables you must also remember to deallocate the memory later on.</P>
<P CLASS="t">There are two general approaches to allocating enough space for strings returned by  Word API commands: </P>
<H4 CLASS="h6"><A NAME="sec2"></A>Fixed size </H4><P CLASS="h">In general, 256 bytes is sufficient for virtually all returned strings,<BR>so you can declare or allocate character buffers of this length for most purposes.</P>
<H4 CLASS="h6"><A NAME="sec3"></A>Double calling</H4><P CLASS="h">Another useful technique is to first set BufferSize to 0 (zero), which guarantees that the command will fail. Upon return, however, BufferSize contains the number of bytes required to successfully return the string. You can then allocate a buffer of the exact size required and repeat the call. </P>
<H3 CLASS="h3"><A NAME="sec4"></A>Deallocating Memory</H3><P CLASS="t">It is important to correctly deallocate all memory dynamically allocated by your WLL. Sometimes you can deallocate immediately after a function call. In other cases the returned data will need to be passed back to Word, or kept for future reference by your WLL. In these cases, you are responsible for keeping track of and eventually deallocating these blocks of memory. For example, you might set<BR>a flag that can be checked in <B>wdAutoRemove</B> to indicate that a specific buffer is<BR>to be deallocated.</P>
<H3 CLASS="h3"><A NAME="sec5"></A>Working with Strings</H3><P CLASS="t">When a string is passed from WordBasic to a WLL function, it is automatically lengthened to a minimum of 256 bytes (including the null character) by Word. The WLL can always safely write up to 256 bytes into a passed string. If you need to pass back a longer string, you must take special steps to prevent overwriting the wrong parts of memory. For example, you might add another parameter to your function and insist that WordBasic passes the actual string length. The following WordBasic instructions demonstrate how this might work:</P>
<P CLASS="spacing"><BR></P>
<PRE>strsize = 500
x$ = String$( strsize, "x" )
rtn = MyNewCAPIFunction( strsize, x$ )
</PRE>
<P CLASS="t">It is the ultimate responsibility of your WLL code to make sure the string is long enough before overwriting its contents.</P></FONT></FONT></BODY></HTML>

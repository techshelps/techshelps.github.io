<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Number Property</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec70"></A>Number Property</H1><P CLASS="t">  </P>
<H2><A NAME="sec71"></A>Applies To</H2><P><B>Err</B> Object.</P>
<H2><A NAME="sec72"></A>Description</H2><P>Returns or sets a numeric value specifying an error. <B>Number </B>is the <B>Err</B> object’s default property.</P>
<H2><A NAME="sec73"></A>Syntax</H2><P><I>object</I><B>.Number </B>[<B>= </B><I>errornumber</I>]</P>
<P>The <B>Number</B> property syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="283pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>object</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Always the <B>Err</B> object.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>errornumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">A <B>Long</B> integer representing a Basic error number or an OLE SCode error value.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec74"></A>Remarks</H2><P>Because the <B>Number</B> property is the <B>Err</B> object’s default property, existing code that uses the Err<B> </B>function does not have to be revised. All of the following correctly return or set the <B>Number</B> property:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Err.Number = 5            ' Set the Err object's Number property to 5.= 5                    ' Set the Err object's Number property to 5..Print Err            ' Display the Err object's Number property..Print Err.Number    ' Display the Err object's Number property.
</PRE>
<P CLASS="t">  </P>
<P>When returning a user-defined error from an OLE Automation object, set <B>Err.Number</B> by adding the number you’ve chosen as an error code to the constant <B>vbObjectError</B>. For example, you use the following code to return the number 1051 as an error code:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Err.Raise Number := vbObjectError + 1051, Source:= "SomeClass"
</PRE>
<P CLASS="t">  </P>
<P>Not all Visual Basic host applications can create OLE Automation objects. See your host application’s documentation to determine whether it can create classes and OLE Automation objects. However, all host applications can create OLE Automation controllers, and should use code like the following when interpreting error codes returned from objects:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' Code to trap a specific VB object error.Err.Number = vbObjectError + 1051 Then
...    Err.Number - vbObjectError &gt; 0 Then
    ' Other Visual Basic object-generated errors are between 0-65535.
    If Err.Number - vbObjectError &lt; 65535 Then    
        ...        ' Code to handle Visual 
    End If        ' Basic object errors.Err.Number &gt; 0 Then    
' If a VB object returns a system-defined error,there is no need to
' strip vbObjectError. 
    If Err.Number &lt; 65535 Then
        ...
    End IfIf
</PRE>
<P CLASS="t">  </P>
<P>The first <B>If</B> traps a specific object-defined error by combining it with the constant <B>vbObjectError</B>. Action can then be taken for the object’s error number 1051. The first <B>ElseIf</B> traps a range of object-defined errors. It subtracts <B>vbObjectError</B> from <B>Err.Number</B>, then examines the result to see if it is in the range for an object-defined error. If it is, the action taken should depend on the documentation of the error provided by the object. The final <B>ElseIf </B>checks to see if the error is simply a Visual Basic trappable runtime error (a system error), for example File not found (Error 53) that may have been passed back by the object. Note that although the range for these is 0–65535, the actual number of defined errors is currently fewer than 1000.</P>
<P>Since <B>Number</B> is a property, it behaves like a function call, and this may be significant if <B>Err</B> is passed to a procedure. If you have existing code in which you rely on a change in <B>Err</B> being copied back to the caller through the procedure’s parameter, it may fail even if <B>Err</B> is passed <B>ByRef</B>. However, since <B>Err</B> is a global object, there is no need to pass it as an argument at all. Make any desired changes directly to <B>Err</B> or <B>Err.Number</B> in the called procedure.</P>
<H2><A NAME="sec75"></A>See Also</H2><P><B>Description</B> Property, <B>Err</B> Object, <B>HelpContext</B> Property (Visual Basic), <B>HelpFile</B> Property (Visual Basic), <B>LastDLLError</B> Property, <B>Source</B> Property.</P>
<H2><A NAME="sec76"></A>Example</H2><P>This example examines the <B>Number</B> property of the <B>Err</B> object to determine whether an error returned by an object was defined by the object, or whether it was mapped to an error defined by Visual Basic. Note that the constant <B>vbObjectError</B> is a very large negative number that an object adds to its own error code to indicate that the error is defined by the server. Therefore, subtracting it from <B>Err.Number</B> strips it out of the result. If the error is object-defined, the base number is left in MyError, which is displayed in a message box along with the original source of the error. If <B>Err.Number</B> represents a Visual Basic error, then the Visual Basic error number is displayed in the message box.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' First, strip off the constant added by the object to indicate one
' of its own errors.= Err.Number - vbObjectError
' If you subtract the vbObjectError constant, and the number is still 
' in the range 0-65,535, it is an object-defined error code.MyError &gt; 0 and MyError &lt; 65535 Then
    Msg = "The object you accessed assigned this number " &amp; _
        "to the error: " &amp; MyError &amp; ". " &amp; _
        "The originator of the error was: " &amp; Err.Source &amp; ". " &amp; _
        "Press F1 to see the originator’s Help topic. "
'Otherwise it is a Visual Basic error number.
    Msg = "This error (#" &amp; Err.Number &amp; ") " &amp; _
        "is a Visual Basic error number. Press Help button " &amp; _
        "or F1 for the Visual Basic Help topic for this error. "If
    MsgBox Msg, , "Object Error", Err.HelpFile, Err.HelpContext</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

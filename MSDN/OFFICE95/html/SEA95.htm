<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OnTime Method</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>OnTime Method</H2><P CLASS="t">An OnTime event handler runs at a specified time in the future — either at a specified time of day or after a specified period of time has passed. This event handler runs only if Microsoft Excel is running and the workbook containing the OnTime event handler is loaded. You can use the arguments to the <B>OnTime</B> method of the <B>Application</B> object to specify the time you want the handler to run and the name of the handler. For example, to accumulate and print a series of reports every day at noon, you might use the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">'Initialize trapping using OnTime method
Sub TrapTime()
    'Set OnTime arguments
    Application.OnTime _
        earliestTime := TimeValue("12:00:00"), _
        procedure := "DoReports"
End Sub

Sub DoReports()                'OnTime handler
    AssembleReports
    PrintReports
End Sub
</FONT></PRE>
<P CLASS="t">The TrapTime procedure initializes trapping of the OnTime event; at the first noon after TrapTime runs, Microsoft Excel runs the DoReports handler. To run the procedure only once, set the <B><I>earliestTime</I></B> argument to a date and a time rather than using the time alone.</P>
<P CLASS="t">If another procedure is running when the event occurs, Microsoft Excel waits for an additional interval specified by the <B><I>latestTime</I></B> argument of the <B>OnTime</B> method. For example, the following version of the TrapTime procedure waits for half an hour for Microsoft Excel to become free, and then it stops the event.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub TrapTime()                    'Initialize OnTime trapping.
    Application.OnTime _
        earliestTime := TimeValue("12:00:00"), _
        procedure := "MyOnTimeHandler", _
        latestTime := TimeValue("12:30:00")
End Sub
</FONT></PRE>
<P CLASS="t">If you don't supply the <B><I>latestTime</I></B> argument, the procedure runs when Microsoft Excel next becomes available. You can schedule multiple OnTime handlers to run at different times; if you schedule more than one OnTime handler for the same time, the last-scheduled procedure runs first.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">The initialization of an OnTime event isn't stored from session to session. To&nbsp;achieve the effect of its being stored, you can place in the startup folder a workbook that contains both an Auto_Open procedure and the OnTime handler itself. The Auto_Open procedure must initialize OnTime trapping for a specific time. Then, whenever Microsoft Excel is started, trapping of that event is reinitialized.</P>
<P></P>
<P CLASS="t">To remove a pending OnTime event, you must specify the exact time of the event and the name of its handler, and you must set the <B><I>schedule</I></B> argument to <B>False</B>. For example, if there are two OnTime events scheduled for noon — one handled by DoReports and the other one handled by a procedure called CleanUp — you can stop the CleanUp handler request with the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Application.OnTime _
    earliestTime := TimeValue("12:00:00"), _
    procedure := "CleanUp", _
    schedule := False
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">With the <B>OnTime</B> method, the user can work until an OnTime event occurs; with the <B>Wait</B> method, the user cannot interact with Microsoft Excel until the wait is over. To suspend all activity except for printing and recalculation, use the <B>Wait</B> method as shown in the following statement.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">'Wait 15 seconds
Application.Wait Now + TimeValue("00:00:15")
</FONT></PRE>
<P CLASS="nt">For more information about the <B>Wait</B> method, see "Wait method" in Help.</P>
<P></P></FONT>
</FONT></BODY></HTML>

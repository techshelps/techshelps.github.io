<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 2: Task, Resource and Assignment Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 2: Task, Resource and Assignment Objects</H1>
  <p><b><i>Lesson
    Objectives</i></b></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</p>
        <ul>
            <li>Reference
                a tasks, resources and assignments.</li>
            <li>Perform
                functions on tasks and resources.</li>
            <li>Change
                values of fields for tasks, resources and
                assignments.</li>
        </ul>
        <p><b>Some Topics to
        be introduced in this lesson include:</b></p>
        
            <ul>
                <li>Referencing
                    fields</li>
                <li>Linking
                    tasks</li>
                <li>Outlining
                    tasks</li>
                <li>Getfield
                    and Setfield functions.</li>
                <li>Accessing
                    Assignment information</li>
            </ul>
        
    
    <p><b><i>Task
    Object</i></b></p>


<p>Of course, the
main objective of the Project object is to hold the scheduling
information for the project, namely tasks and resources.</p>
  
        
            <p><b>Referencing
            a Task</b></p>
        
    


<p>As with Project
objects, tasks can be referenced in several different ways. A
task object can be referenced via the Tasks collection either by
ID, Unique ID, or Name.</p>
  
        
            <p><b>Tasks(1)</b></p>
            <p><b>Tasks.UniqueID(4)</b></p>
            <p><b>Tasks(&quot;Juggle
            the cat&quot;)</b></p>
        
    


<p>There are
advantages and disadvantages to each of these methods.
Referencing by ID (or row number) is the most straightforward,
since these numbers are displayed to the user during the normal
operation of Microsoft Project. Since inserting and deleting
tasks can cause the ID of a task to change, referencing with the
ID will not be reliable if the macro must always refer to the
same task.</p>

<p>Referencing by
UniqueID allows you to always refer to the same task, but is
conceptually more difficult because this information is not
normally viewed.</p>

<p>Lastly,
referencing by name makes for very readable code since you are
able to refer to the task by name. The drawback is that Microsoft
Project supports multiple tasks with the same name, so
referencing by name would only allow you to refer to the first
task with a particular name.</p>
  
        
            <p><b>Task
            Information</b></p>
        
    


<p>There are
basically three different kinds of information contained in a
task - Fields, Schedule Logic, and Structure. While there is some
overlap between these types, it serves as a model for organizing
the information contained in a task.</p>
  
        
            <p><b>Fields
            (Properties)</b></p>
        
    


<p>Almost all of
the information in a task can be found in one of the fields
Microsoft Project supports and so access to fields is an
important part of Visual Basic for Applications in Microsoft
Project. Microsoft Project supports many different task fields.
These fields are simply accessed as a property of the task object
which corresponds to the field name.</p>

<p>For example, to
change the duration of a task, you would do something like:</p>
  
        
            <p><b>ActiveProject.Tasks(3).Duration
            = &quot;3d&quot;</b></p>
        
    


<p>The Duration
field (or the Duration property of a Task) is a good example of
the use of a field in Visual Basic for Applications. As shown in
the example, the Duration property accepts a string. It will also
accept a number which is interpreted as the number of minutes in
the duration:</p>
  
        
            <p><b>ActiveProject.Tasks(3).Duration
            = 1440 '3d * 8h/d * 60m/h</b></p>
        
    


<p>In the normal
use of the product, there are some cases where the duration of a
task is calculated and therefore cannot be modified. The most
common occurrence is when the task is a summary task. Summary
tasks summarize the information of the subtasks indented below
them in the outline. Since Microsoft Project also supports a
Summary field, it is easy to determine whether or not the a task
is capable of having its duration changed:</p>
  
        
            <p><b>If
            Not ActiveProject.Tasks(3).Summary Then</b></p>
            <p><b>ActiveProject.Tasks(3).Duration
            = &quot;3d&quot;</b></p>
            <p><b>End
            If</b></p>
        
    


<p>Additionally,
there are many fields which one normally associates with a task,
such as Duration and BaselineStart, which are also applicable to
the project itself. For this reason, Microsoft Project supports
all the task fields in the Project object as well. As with a
summary task, most of these fields are calculated and cannot be
changed.</p>
  
        
            <p><b>MsgBox
            ActiveProject.Duration</b></p>
        
    


<p>This example
would show the length of the project in a dialog box.</p>

<p>Another
interesting example of task information is the resource
assignments. Microsoft Project supports several task fields which
can display the resources assigned to a task &#150;Resource Names
displays the names of the resources working on a task, Resource
Initials displays the initials of the resources, and Resource
Group displays the groups containing the resources.</p>

<p>As with any
other field, these are all exposed as properties of a task.</p>
  
        
            <p><b>MsgBox
            ActiveProject.Tasks(3).ResourceNames</b></p>
        
    


<p>This example
would display the names of the resources working on task 3 in the
same way as the Resource Names column in the Gantt Chart does.</p>

<p>Additionally, we
have added objects which give users access to the same
information:</p>
  
        
            <p><b>MsgBox
            ActiveProject.Tasks(3).Resources(1).Name</b></p>
        
    


<p>would display
the name of the first resource assigned to task 3.</p>

<p>Lastly, both the
Task and the Resource objects contain an Assignment object which
details the information about the assignment of a resource to a
task. The details of the Assignment object are discussed later.</p>
  
        
            <p><b>Schedule
            Logic</b></p>
        
    


<p>Another
important body of information in a task is the schedule logic. In
Microsoft Project, the logic is determined by creating
predecessor and successor relationships. One method of examining
the logic of a task is to refer to the fields which display this
information as a string:</p>
  
        
            <p><b>MsgBox
            ActiveProject.Tasks(3).Predecessors</b></p>
        
    


<p>This example
would display something like &quot;2FS+3d&quot; to indicate that
task 2 is a predecessor with a lag of 3 days.</p>

<p>As with resource
assignments, Microsoft Project provides some of this information
in an object form as well. PredecessorTasks and SuccessorTasks
are collections of tasks which are the predecessors and
successors of the task in question. So:</p>
  
        
            <p><b>MsgBox
            ActiveProject.Tasks(3).PredecessorTasks(1).Duration</b></p>
        
    


<p>would display
the duration of the first predecessor task of task 3.</p>

<p>Microsoft
Project also supplies methods for manipulating task
relationships. The LinkPredecessors and LinkSuccessors methods
allow the macro writer to create either predecessor or successor
relationships. Similarly, UnlinkPredecessors and UnlinkSuccessors
allow the removal of relationships.</p>

<p>The following
macro would unlink task 3 from all its successors:</p>
  
        
            <p><b>Set
            x = ActiveProject.Tasks(3)</b></p>
            <p><b>x.UnlinkSuccessors(x.SuccessorTasks)</b></p>
        
    


<p><b>Structure</b></p>

<p>The last kind of
information contained in a task is the structure or organization
of the tasks. In Microsoft Project, tasks are organized into an
outline where summary tasks summarize the information of the
subtasks indented below them. This is also known as a Work
Breakdown Structure or WBS.</p>

<p>Again, this
information can be derived from fields that are accessible in the
product. OutlineLevel gives the outline level of a task with 1
being the top of the outline and 10 being the lowest outline
level. OulineNumber gives the automatically generated WBS Code
based on the outline. The second task under the third summary
task would have an Outline Number of &quot;3.2&quot;.</p>

<p>As with some of
the other fields, Microsoft Project also provides this
information in an object form. OutlineChildren is a collection of
the subtasks of a given task. OutlineParent is the reverse - the
summary task of a given task. With these two collections, it is
possible to navigate the outline structure directly.</p>
  
        
            <p><b>Sub
            Siblings()</b></p>
            <p><b>Set
            objParent = ActiveCell.Task.OutlineParent</b></p>
            <p><b>For
            Each objTemp In objParent.OutlineChildren</b></p>
            <p><b>strTemp
            = objTemp.Name &amp; ListSeparator &amp; strTemp</b></p>
            <p><b>Next
            objTemp</b></p>
            <p><b>'Remove
            the last List Separator</b></p>
            <p><b>strTemp
            = Left$(strTemp, Len(strTemp) - Len(ListSeparator))</b></p>
            <p><b>MsgBox
            strTemp</b></p>
            <p><b>End
            Sub</b></p>
        
    


<p>This example
displays the names of all the tasks which have the same parent as
the currently selected task.</p>

<p>To modify the
outline, methods are exposed which move the task between outline
levels. OutlineIndent moves a task down one level in the outline
structure. OutlineOutdent does the reverse and moves the task up
in the outline structure. Additional methods are available which
change the appearance of the outline on screen.
OutlineHideSubtasks will hide the subtasks of a summary task.
OutlineShowSubtasks will show any hidden subtasks of a summary
task. OutlineShowAllTasks will show all hidden subtasks of any
summary task.</p>

<p>To link and
unlink tasks together you can use the LinkPredecessors or
LinkSuccessors methods. The following example prompts the user
for the name of a task and then makes the task a predecessor of
the selected tasks.</p>
  
        <p>><b>Sub
        LinkTasksFromPredecessor()</b></p>
        <p>><b>Dim
        Entry ' Task name entered by user</b></p>
        <p>><b>Dim T
        ' Task object used in For Each loop</b></p>
        <p>><b>Dim
        Exists ' Whether or not the resource exists</b></p>
        <p>><b>'
        Prompt the user for the name of a task to turn into a
        predecessor.</b></p>
        <p>><b>Entry
        = InputBox(&quot;Enter the name of a task:&quot;)</b></p>
        <p>><b>Exists
        = False ' Assume task doesn't exist.</b></p>
        <p>><b>'
        Search active project for the specified task.</b></p>
        <p>><b>For
        Each T in ActiveProject.Tasks</b></p>
        <p>><b>If
        T.Name = Entry Then</b></p>
        <p>><b>Exists
        = True</b></p>
        <p>><b>'
        Make the task a predecessor of the selected tasks.</b></p>
        <p>><b>ActiveSelection.Tasks(1).LinkPredecessors
        Tasks := T</b></p>
        <p>><b>End
        If</b></p>
        <p>><b>Next
        T</b></p>
        <p>&nbsp;</p>
        <p>><b>' If
        task doesn't exist, display error and quit Sub procedure.</b></p>
        <p>><b>If
        Not Exists Then</b></p>
        <p>><b>MsgBox(&quot;Task
        not found.&quot;)</b></p>
        <p>><b>Exit
        Sub</b></p>
        <p>><b>End
        If</b></p>
        <p>><b>End
        Sub</b></p>
    


<p><b><u>Exercise1:
(TaskTraverse)</u></b></p>

<p>Write a macro
that traverses a listing of tasks. If the duration is greater
than 5 days then remove 10% of the duration from that task. Also
check to see if a summary task has more than 5 children. If so
then collapses that outline.</p>
  <p>>Sub TaskTraverse()</p>
    <p>>For Each t In
    ActiveProject.Tasks</p>
    <p>>If t.Duration &gt; 5
    * 480 Then t.Duration = t.Duration * 0.9</p>
    <p>>If t.Summary Then</p>
    <p>>If t.OutlineChildren
    &gt; 5 Then t.OutlineHideSubtasks</p>
    <p>>End If</p>
    <p>>Next t</p>
    <p>>End Sub</p>


<p><b><u>Exercise2:
(TaskLink)</u></b></p>
  
        
            <p>Write
            a macro that will automatically link only the first
            two tasks under a summary task.</p>
        
    
    <p>>Sub TaskLink()</p>
    <p>>For Each t In
    ActiveProject.Tasks</p>
    <p>>i = 0</p>
    <p>>If t.Summary Then</p>
    <p>>If t.OutlineChildren
    &gt; 1 Then</p>
    <p>>idTmp1 = t.ID + 1</p>
    <p>>idTmp2 = t.ID + 2</p>
    <p>>ActiveProject.Tasks(idTmp2).LinkPredecessors
    Tasks:=ActiveProject.Tasks(idTmp1)</p>
    <p>>End If</p>
    <p>>End If</p>
    <p>>Next t</p>
    <p>>End Sub</p>


<p><b><i>Resource
Object</i></b></p>

<p>The Resource
object follows the same guidelines as the Task object. Access to
all of the fields are available directly as properties of the
object.</p>
  
        
            <p><b>Referencing
            a Resource</b></p>
        
    


<p>As with the Task
object, there are several ways of referencing a Resource object.
A Resource object can be referenced via the Resources collection
either by ID, Unique ID, or name.</p>
  
        
            <p><b>Resources(3)</b></p>
            <p><b>Resources.UniqueID(10)</b></p>
            <p><b>Resources(&quot;Ken&quot;)</b></p>
        
    


<p>The same
advantages and disadvantages of these methods that are seen in
the Task object apply to the Resource object as well. The only
difference is that you do not normally have multiple resources
with the same name, so indexing by name is more reliable with
Resource objects than it is with Task objects.</p>
  
        
            <p><b>Resource
            Information Fields (Properties)</b></p>
        
    


<p>Just like with
the Task object, the fields associated with a resource are
accessible as properties of the Resource object:</p>
  
        
            <p><b>ActiveProject.Resources(&quot;Susan&quot;).StandardRate
            = &quot;$25.00/h&quot;</b></p>
            <p><b>ActiveProject.Resources(3).BaseCalendar
            = &quot;Night Shift&quot;</b></p>
        
    


<p>This is the
easiest and most understandable way of accessing the information
for a resource.</p>
  
        
            <p><b>GetField
            and SetField Methods</b></p>
        
    


<p>Another set of
methods is also available for both Task and Resource objects
which allow you to access field information. These are the
GetField and SetField methods.</p>

<p>GetField takes a
field number and returns the contents of the field as a string.
This is useful if you want to ensure that the value returned is a
string. It is also useful if you want to programmatically access
fields at run-time.</p>

<p>This example
prompts for the name of a field and then displays the information
contained in that field on a resource view:</p>
  
        
            <p><b>Sub
            DisplayField()</b></p>
            <p><b>strTemp
            = InputBox(&quot;Enter the name of the field you want
            to see&quot;)</b></p>
            <p><b>strTemp
            = LCase(strTemp)</b></p>
            <p><b>Select
            Case strTemp</b></p>
            <p><b>Case
            &quot;name&quot;</b></p>
            <p><b>intFieldID
            = pjResourceName</b></p>
            <p><b>Case
            &quot;initials&quot;</b></p>
            <p><b>intFieldID
            = pjResourceInitials</b></p>
            <p><b>Case
            &quot;standard rate&quot;</b></p>
            <p><b>intFieldID
            = pjResourceStandardRate</b></p>
            <p><b>Case
            &quot;&quot;</b></p>
            <p><b>End</b></p>
            <p><b>Case
            Else</b></p>
            <p><b>MsgBox
            &quot;You entered a field I don&#146;t
            understand&quot;</b></p>
            <p><b>End</b></p>
            <p><b>End
            Select</b></p>
            <p><b>MsgBox(ActiveCell.Resource.GetField(FieldID:=intFieldID))</b></p>
            <p><b>End
            Sub</b></p>
        
    


<p>The SetField
method is the reciprocal of GetField. It takes a field number and
the string value to which you want to set the field.</p>
  
        
            <p><b>ActiveCell.Resource.SetField
            FieldID:=pjResourceName,_</b></p>
            <p><b>Value:=&quot;Jimbo&quot;</b></p>
        
        <p><b><u>Exercise1:</u></b></p>
    
    <p>Write a
    macro that will prompt the user to enter the name of a
    resourse and then display the value for the Max units and ask
    them if they would like change the value. If yes then get the
    new value and make the change.</p>
    <p>>Sub
    ResMaxUnits()</p>
    <p>>RName =
    InputBox(&quot;Enter the name of the resource to edit&quot;)</p>
    <p>>RMax =
    InputBox(&quot;The Max Units for &quot; &amp; RName &amp;
    &quot; is &quot; &amp; _
    ActiveProject.Resources(RName).GetField(FieldID:=pjMaxUnits)
    &amp; &quot; Do you want to Change it? Y/N&quot;)</p>
    <p>>If RMax =
    &quot;y&quot; Then </p>
    <p>>ActiveProject.Resources(RName).MaxUnits
    = InputBox(&quot;Enter new value&quot;)</p>
    <p>>End If</p>
    <p>>End Sub</p>
    <p><b><i>Assignment
    Object</i></b></p>


<p>The Assignment
object holds information about how work on a task is being
accomplished by a resource. The information includes the amount
of work, the cost, and the start and finish dates of the work on
the task. In Microsoft Project you can see this information
through either the Task Form or Resource Form views.</p>
  
        
            <p><b>Referencing
            an Assignment</b></p>
        
    


<p>Assignment
objects are referenced by a Unique ID value associated with each
assignment. Because these values are not necessarily sequential,
it is probably easier to iterate over the Assignments collection
with For Each...Next to find the particular assignment you want
to work with.</p>
  
        
            <p><b>Fields
            (Properties)</b></p>
        
    


<p>As with Task and
Resource objects, Assignment objects provide access to the
information contained in the assignment fields. This includes
fields such as Actual Cost, Overtime Work, and Units.</p>

<p>This example
provides a list of all the tasks a resource is working on in the
resource&#146;s Text1 field in much the same way that the
Resource Names field of a task displays all the resources working
on the task:</p>
  
        
            <p><b>Sub
            TaskNamesField()</b></p>
            <p><b>Dim
            Sep, strTemp As String</b></p>
            <p><b>Dim
            r, a As Object</b></p>
            <p><b>Sep
            = ListSeparator</b></p>
            <p><b>For
            Each r In ActiveProject.Resources</b></p>
            <p><b>strTemp
            = &quot;&quot;</b></p>
            <p><b>For
            Each a In r.Assignments</b></p>
            <p><b>strTemp
            = a.TaskName &amp; Sep &amp; strTemp</b></p>
            <p><b>Next
            a</b></p>
            <p><b>'Remove
            the last List Separator</b></p>
            <p><b>strTemp
            = Left$(strTemp, Len(strTemp) - Len(Sep))</b></p>
            <p><b>r.Text1
            = strTemp</b></p>
            <p><b>Next
            r</b></p>
            <p><b>End
            Sub</b></p>
        
    


<p><b>Assignment Information
Over Time</b></p>

<p>Because the work
on a task occurs over a period of time, it is often useful to
view the allocation of resources over time. While the Assignment
object does not contain this information in a time-phased manner,
the TimescaledData method of the Application object does allow
you to access it programmatically.</p>

<p>The
TimescaledData method takes several arguments to specify the task
and resource combination you wish to examine, the date range, the
type of periods (such as Week vs. Day), and the type of
information (Work vs. Cost). It returns a string containing the
values for each period separated by the List Separator. You can
then parse the string to determine the values in each period.</p>

<p>This example
displays a dialog box of the return timescaled data. It is the
assignment of resource 1&#146;s work broken down in hours across
the entire project.</p>
  <p><b>MsgBox
    TimescaledData(ActiveCell.Task.ID, 1,
    ActiveProject.ProjectStart, _</b></p>
    
        
            <p><b>ActiveProject.ProjectFinish,
            pjWork, pjTimescaleHours)</b></p>
        
    


<p><b><u>Exercise1:
(AssignWork1)</u></b></p>
  
        <p>Write a
        macro that finds all assignments of an inputed resource
        and removes 1 hour of work from each assignment.</p>
    
    <p>>Sub AssignWork1()</p>
    <p>>RName =
    InputBox(&quot;Enter the name of the resourse to remove work
    from:&quot;)</p>
    <p>>For Each t In
    ActiveProject.Tasks</p>
    <p>>For Each r In
    t.Assignments</p>
    <p>>If r.ResourceName =
    RName Then r.Work = r.Work - 60</p>
    <p>>Next r</p>
    <p>>Next t</p>
    <p>>End Sub</p>


<p><b><u>Exercise2:
(AssignWork2)</u></b></p>
  <p>Write a
    macro that finds all assignments of all task with the name
    equal to the text1 field of the task and adds 20% more work
    than it already has.</p>
    <p>>Sub AssignWork2()</p>
    <p>>For Each t In
    ActiveProject.Tasks</p>
    <p>>For Each r In
    t.Assignments</p>
    <p>>If r.ResourceName =
    t.Text1 Then r.Work = r.Work + r.Work * 0.2</p>
    <p>>Next r</p>
    <p>>Next t</p>


<p>>End Sub</p>
</BODY>
</html>

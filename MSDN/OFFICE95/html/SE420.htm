<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Err, Erl Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Err, Erl Functions</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Returns error status.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>Err</B></P>
<P CLASS="syn"><B>Erl</B></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">After an error occurs, the <B>Err</B> function returns a number that is the run-time error number, identifying the error. The <B>Erl</B> function returns a number that is the line number of the line in which the error occurred, or the numbered line most closely preceding it.</P>
<P CLASS="t">Because <B>Err</B> and <B>Erl</B> return meaningful values only after an error has occurred, they are usually used in error-handling routines to determine the error and corrective action. Both <B>Err</B> and <B>Erl</B> are reset to 0 after any form of the <B>Resume</B> or <B>On</B> <B>Error</B> statement and after an <B>Exit</B> <B>Sub</B> or <B>Exit</B> <B>Function</B> statement within an error-handling routine.</P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">If you set up an error handler using <B>On Error GoTo</B> and that error handler calls another procedure, the value of <B>Err</B> and <B>Erl</B> may be reset to 0. To make sure that the value doesn't change, assign the values of <B>Err</B> or <B>Erl</B> to variables before calling another procedure or before executing <B>Resume</B>, <B>On Error</B>, <B>Exit Sub</B>, <B>Exit Function</B>, or <B>Exit Property</B>.</P>
<P></P>
<P CLASS="t">You can directly set the value returned by the <B>Err</B> function using the <B>Err</B> statement. You can set values for both <B>Err</B> and <B>Erl</B> indirectly using the <B>Error</B> statement.</P>
<P CLASS="t">The <B>Erl</B> function returns only a line number, not a line label, located at or before the line producing the error. Line numbers greater than 65,529 are treated as line labels and can't be returned by <B>Erl</B>. If your procedure has no line numbers, or if there is no line number before the point at which an error occurs, <B>Erl</B> returns 0.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Err</B> Statement, <B>Error</B> Function, <B>Error</B> Statement, <B>On Error</B> Statement, <B>Resume</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example shows an error-handling routine which uses the <B>Err</B> and <B>Erl</B> functions. If there are no additional errors, <B>Err</B> returns error number 11 and <B>Erl</B> returns line 1030.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub ErrDemo()
1010  On Error GoTo ErrorHandler    ' Set up an error handler.
1020  B = 1: C = 0    ' Initialize variables.
1030  A = B \ C    ' Cause a "Division by zero" error.
1040  Exit Sub
ErrorHandler:    ' Error handler.
    ErrorNumber = Err     ' Get run-time error number.
    ErrorLine = Erl    ' Get line number.
    Resume Next    ' Resume execution at next line.
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

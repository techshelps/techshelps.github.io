<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CodeDb Function</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec58"></a>CodeDb Function</h1>

<h2><a name="sec59"></a>Description</h2>

<p>You can use the <b>CodeDb</b> function in a module to
determine the name of the <b>Database</b> object that refers to
the database in which code is currently executing. Use the <b>CodeDb</b>
function to access data access objects that are part of a library
database.</p>

<p>For example, you can use the <b>CodeDb</b> function in a
module in a library database to create a <b>Database</b> object
referring to the library database. You can then open a recordset
based on a table in the library database.</p>

<h2><a name="sec60"></a>Syntax</h2>

<p><b>Set</b> <i>database </i><b>= CodeDb</b>The <b>CodeDb</b>
function has the following argument.</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>database</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <b>Database</b> object variable.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<h2><a name="sec61"></a>Remarks</h2>

<p>The <b>CodeDb</b> function returns a <b>Database</b> object
for which the <b>Name</b> property is the full path name of the
database from which it is called. This function can be useful
when you need to manipulate the data access objects in your
library database.</p>

<p>When you call a function in a library database, the database
from which you have called the function remains the current
database, even while code is executing in a module in the library
database. In order to refer to the data access objects in the
library database, you need to know the name of the <b>Database</b>
object that represents the library database.</p>

<p>For instance, suppose you have a table in a library database
that lists error messages. To manipulate data in the table from
code, you could use the <b>CodeDb</b> function to determine the
name of the <b>Database</b> object that refers to the library
database that contains the table.</p>

<p>If the <b>CodeDb</b> function is executed from the current
database, it returns the name of the current database, which is
the same value returned by the <b>CurrentDb</b> function.</p>

<h2><a name="sec62"></a>See Also</h2>

<p><b>CurrentDb</b> Function.</p>

<h2><a name="sec63"></a>Example</h2>

<p>The following example uses the <b>CodeDb</b> function to
return a <b>Database</b> object that refers to a library
database. The library database contains both a table named Errors
and the code that is currently executing. After the <b>CodeDb</b>
function determines this information, the <b>GetErrorString</b>
function opens a table-type recordset based on the Errors table.
It then extracts an error message from a field named ErrorData
based on the integer value passed to the function.</p>

<p class="spacing"><br>
</p>

<pre>Function GetErrorString (ByVal intError As Integer) As String</pre>

<p class="spacing"><br>
</p>

<pre>    Dim dbs As Database, rst As Recordset

    ' Variable refers to database where code is executing.
    Set dbs = CodeDb</pre>

<p class="spacing"><br>
</p>

<pre>    ' Create table-type Recordset.</pre>

<p class="spacing"><br>
</p>

<pre>    Set rst = dbs.OpenRecordSet(&quot;Errors&quot;, dbOpenTable)
    ' Set index to primary key (ErrorID field).
    rst.Index = &quot;PrimaryKey&quot;
    ' Find error number passed into GetErrorString.</pre>

<p class="spacing"><br>
</p>

<pre>    rst.Seek &quot;=&quot;, intError
    ' Return associated error message.</pre>

<p class="spacing"><br>
</p>

<pre>    GetErrorString = rst.Fields!ErrorData.Value</pre>

<p class="spacing"><br>
</p>

<pre>    rst.Close</pre>

<p class="spacing"><br>
</p>

<pre>End Function</pre>
</FONT></FONT></BODY>
</html>

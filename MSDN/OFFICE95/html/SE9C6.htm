<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Numeric Data Types</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Numeric Data Types</H2><P CLASS="t">If you know that a variable will always contain whole numbers (such as 12) rather than fractional numbers (such as 3.57), declare it as an <B>Integer</B> or <B>Long</B> type.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Private memSize As Long
Dim loopCounter As Integer
</FONT></PRE>
<P CLASS="t">Operations are faster with <B>Integer</B> variables, which consume less memory than <B>Variant </B>variables. <B>Integer </B>variables are especially useful as the counter variables in <B>For...Next</B> loops. For more information about <B>For...Next</B> loops and other control structures, see Chapter 3, "Controlling Program Flow."</P>
<P CLASS="t">If a variable will always contain fractional numbers, declare it as a <B>Single</B>, <B>Double</B>, or <B>Currency</B> type.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Public radius As Single
Private area As Double
Dim costOfGoods As Currency
</FONT></PRE>
<P CLASS="t">The <B>Currency</B> data type supports up to four digits to the right of the decimal separator and 15 digits to the left of it, making <B>Currency</B> an accurate fixed-point data type suitable for monetary calculations. Floating-point (<B>Single</B> and <B>Double</B>) numbers have much larger ranges than <B>Currency</B>, but can be subject to small rounding errors.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Floating-point values can be expressed as <I>mmmEeee</I> or <I>mmmDeee</I>, where <I>mmm</I> is the mantissa and <I>eee</I> is the exponent (a power of 10). The highest positive value of a <B>Single</B> data type is 3.402823E+38, or 3.4 times 10 to the 38th power; the highest positive value of a <B>Double</B> data type is 1.79769313486232D+308, or about 1.8 times 10 to the 308th power. Using <I>D</I> to separate the mantissa and exponent in a numeric literal causes the value to be treated as a <B>Double</B> data type. Likewise, using <I>E</I> in the same fashion causes the value to be treated as a <B>Single</B> data type.</P>
<P></P>
<P CLASS="t">A variable or constant of any numeric data type (or the <B>Variant</B> data type) can contain any numeric data. For example, assigning the value 3.14 to a variable of the <B>Integer</B> data type doesn't generate an error, even though 3.14 isn't an integer. Visual Basic rounds off rather than truncates the fractional part of a floating-point number before assigning it to an integer.</P>
<P CLASS="t">A variable with one of the numeric data types is initialized to 0 (zero) after it's declared and before you assign another value to it. When you edit any Visual Basic module, all variables in the workbook that contains that module are reinitialized. Procedure-level variables are reinitialized when the procedure starts running.</P></FONT>
</FONT></BODY></HTML>

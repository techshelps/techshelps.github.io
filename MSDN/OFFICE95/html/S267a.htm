<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ODBC Extensions</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Using the ODBC Extensions</H2><P CLASS="t">This section contains basic information on using the ODBC extensions. Three example macros included in WBODBC.DOT illustrate the use of the functions. The sample form, INVOICE3.DOT, which shows how you can automate Word forms to take advantage of the ODBC extensions, is described at the end of this section.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Declaring the Functions</H3><P CLASS="t">To indicate that the ODBC extensions are located in the WBODBC.WLL add-in library, you must declare the functions prior to calling them in a macro. All of the <B>Declare </B>statements for the WBODBC.WLL functions documented in this appendix are included in the AllDeclarations macro stored in the WBODBC.DOT template. Copy these declarations into every macro that uses the WBODBC.WLL functions.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Sequence of Use</H3><P CLASS="t">To retrieve data, you must first establish a connection with a data source by<BR>using <B>SQLOpen</B>. A successful call to <B>SQLOpen</B> returns a unique connection identification number. The connection ID identifies the specified data source until the connection is closed by using <B>SQLClose</B> or <B>SQLCloseAll</B>. The connection ID is used by <B>SQLExecQuery</B> or <B>SQLQueryExec</B>to send a query, and the SQL retrieve functions then use the same connection ID to retrieve the query results.</P>
<P CLASS="t">You can use the following SQL retrieve functions with <B>SQLExecQuery</B>: <B>SQLRetrieveColumns</B>, <B>SQLRetrieveFlush</B>, <B>SQLRetrieveItem$</B>, <B>SQLRetrieveRows</B>, <B>SQLRetrieveToDocument</B>.</P>
<P CLASS="t">You can use the following SQL retrieve functions with <B>SQLQueryExec</B>: <B>SQLQueryFetch</B>, <B>SQLQueryRetrieve</B>, <B>SQLRetrieveColSize</B>, <B>SQLRetrieveColumns</B>, <B>SQLRetrieveFlush</B>, <B>SQLSetRowPos</B>.</P>
<H3 CLASS="h3"><A NAME="sec2"></A>Mapping the Structure of a Database</H3><P CLASS="t">Before sending a query with <B>SQLExecQuery </B>or <B>SQLQueryExec</B>, you might want to determine the underlying structure, or schema, of a DBMS. This is called <I>mapping</I> the database. For example, you might want to know whether the database is organized as "tables" or "files." Once you've mapped the database, you can more easily write macros to manipulate the data.</P>
<P CLASS="t">You map a database by using the <B>SQLGetSchema</B> and <B>SQLGetSchemaItem$</B> functions. With <B>SQLGetSchema</B>, you specify the type of information, or property, that you want to learn about the DBMS. You then use <B>SQLGetSchemaItem$</B> to retrieve a specific description of the property. The third example macro described later in this section shows how to use these functions.</P>
<H3 CLASS="h3"><A NAME="sec3"></A>Checking for Error Conditions</H3><P CLASS="t">After a call to any ODBC extension that returns a numeric value, you should check for a returned error condition, which is indicated by a 0 (zero) or a negative integer. The ODBC extensions include functions for examining errors. First you call <B>SQLCountErrors</B>, which returns a count of the number of lines of error information stored in memory after a preceding WordBasic ODBC function call returned an error value. If <B>SQLCountErrors</B> returns a positive integer, you then call <B>SQLErrorText$</B> to return each line of error message text. The returned error message text can then be evaluated by an error trap or displayed to the user.</P>
<H3 CLASS="h3"><A NAME="sec4"></A>ODBC Examples</H3><P CLASS="t">The macros shown in the following examples are available in WBODBC.DOT, the template provided on the Microsoft Word Developer's Kit disk. Only portions of the macros are included here; to review the complete code for an example, open the macro in a macro-editing window.</P>
<H4 CLASS="h4"><A NAME="sec5"></A>Example 1: Issuing SQL queries interactively</H4><P CLASS="t">When you run the Exec example macro, you type the SQL query in a dialog box. If the query string results in an error, the ParseErrors subroutine is called to display the error message. The query is then redisplayed in a dialog box so that you can edit the query string. Successful queries are stored in a new document so that you can reuse them in other macros.</P>
<P CLASS="spacing"><BR></P>
<PRE>While quit = 0
    s$ = InputBox$("SQL&gt; ", "SQL Interactive Interpreter", prompt$)
    If Len(s$) = 0 Then
        quit = 1
    Else
        ret = SQLExecQuery(connect_num, s$)
        If ret &lt;= 0 Then
            prompt$ = s$
            x$ = "Error: " + Str$(ret) + "," + Str$(SQLErrorCount)
            MsgBox x$
            ParseErrors
        Else
            If FirstLog &lt;&gt; 0 Then
                FileNew
                FirstLog = 0
            EndIf
            LogString(s$)
            prompt$ = ""
        EndIf
    EndIf
Wend
</PRE>
<P CLASS="t">And here is the ParseErrors subroutine:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub ParseErrors
nerrors = SQLCountErrors()
For i = 1 To nerrors
    MsgBox "error: class(" + SQLErrorClass(i) + ") code(" + \
            Str$(SQLErrorCode(i)) + "): " + SQLErrorText(i)
Next
End Sub
</PRE>
<H4 CLASS="h4"><A NAME="sec6"></A>Example 2: Retrieving data and inserting it into a table</H4><P CLASS="t">The Report example macro opens a Microsoft Access data source named "test.mdb," a data source set up from the Microsoft Access database TEST.MDB that is provided on the Microsoft Word Developer's Kit disk.</P>
<P CLASS="t">The SQL query string sent with the <B>SQLExecQuery</B> function selects each row, or record, of information for which there is an entry in the "name" field. (Note that the Quote2$() user-defined function, not shown here, returns the string "name" preceded and followed by Chr$(34), the ANSI character code for a double quotation mark.) Next, the macro creates a table in a new Word document and inserts each data item retrieved by <B>SQLRetrieveItem$</B> into the appropriate table cell. If the amount in any account field is less than 1, that amount is formatted as bold. If an ODBC extension returns an error value, control is passed to the MyError error handler.</P>
<P CLASS="spacing"><BR></P>
<PRE>connect_num = SQLOpen("DSN=test.mdb", output_ref$, 0)
If connect_num &lt;= 0 Then Goto MyError
ret = SQLExecQuery(connect_num, "Select * from table4 " + \
        Quote2$("name"))
If ret &lt;= 0 Then Goto MyError
col = SQLRetrieveColumns(connect_num)
row = SQLRetrieveRows(connect_num)
If col &lt;= 0 Or row &lt;= 0 Then Goto MyError
FileNew
TableInsertTable  .ConvertFrom = 0, .NumColumns = col, .NumRows = row
For i = 1 To row
        For j = 1 To Col
        item$ = SQLRetrieveItem$(connect_num, j, i)
        If (j = 1) Then
            Insert item$
        Else
            v = Val(item$)
            s$ = Str$(v / 100)
            Insert s$
            If (v &lt; 100) Then
                ParaUp 1, 1
                Bold(1)
                CharRight 1, 0
            End If
        End If
        If j &lt;&gt; col Or i &lt;&gt; row Then NextCell
    Next
Next
ret = SQLClose(connect_num)
If ret &gt; 0 Then Goto MyEnd
</PRE>
<H4 CLASS="h4"><A NAME="sec7"></A>Example 3: Mapping the database structure</H4><P CLASS="t">The Schema example macro displays a dynamic dialog box in which you can <BR>select an option corresponding to a database property to see a description of that property. The macro uses <B>SQLGetSchema</B> and <B>SQLGetSchemaItem$</B> to build a shared array of the strings describing the database properties. The array, called combobox1$(), is then displayed in the dialog box.</P>
<P CLASS="t">In the main subroutine (not shown here), the connection information for <B>SQLOpen</B> — the name of a data source, the database name, and any other required connection string arguments&nbsp;— is entered in response to dialog boxes.</P>
<P CLASS="t">After the custom dialog box is defined, it is displayed. The following subroutine, GetDBInfoWithQualifier, is called by the dialog function (or by the intermediate function GetDBInfo if there is no value for the qual$ argument) every time the user selects a different property in the dialog box. The dialog function then uses the shared array combobox1$() to update the custom dialog box.</P>
<P CLASS="spacing"><BR></P>
<PRE>Function GetDBInfoWithQualifier(itemid, qual$)
i = SQLGetSchema(connect_num, itemid, qual$)
If i &gt; 0 Then
    For j = i - 1 To MaxItem
        combobox1$(j) = ""
    Next
    For j = 0 To i - 1
        s$ = SQLGetSchemaText(connect_num, j + 1)
        combobox1$(j) = s$
    Next
Else
    MsgBox "No Information"
End If
GetDBInfoWithQualifier = i
End Function
</PRE>
<H3 CLASS="h3"><A NAME="sec8"></A>Example of Automating Forms Using ODBC</H3><P CLASS="t">The INVOICE3.DOT template included in the WBODBC folder on the Microsoft Word Developer's Kit disk contains an integrated collection of macros similar to the INVOICE2.DOT macros described in Chapter 9, "More WordBasic Techniques," in Part 1, "Learning WordBasic." The primary difference between the two templates is that INVOICE2.DOT uses dynamic data exchange (DDE) to retrieve data from and write data to a data source in a running application (a workbook open in Microsoft Excel), while INVOICE3.DOT uses the ODBC extensions to retrieve data from and write data to a data source in a DBMS (an .MDB file created in Microsoft Access).</P>
<P CLASS="t">The advantages of using the ODBC extensions to automate Word forms are simple: the ODBC functions are faster than comparable DDE commands; the ODBC functions require only a data source, not both a data source and the application that was used to create it; and the ODBC functions can be used to read and modify data sources created by DBMSs that do not support DDE. In general, the ODBC error reporting functions make debugging and handling ODBC errors more flexible than handling and debugging comparable DDE errors in WordBasic.</P>
<P CLASS="t">The following table shows a comparison of the steps that macros using DDE versus macros using the ODBC extensions must carry out to automate a form.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>DDE macro steps</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>ODBC macro steps</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Determine whether required application is running; start the application if it is not running.</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Not required.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Locate the file that will act as the data source and open it in the running application.</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Connect to an established ODBC data source (previously set up using the ODBC Administrator program).</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Execute a query in the form of the application's programming language with <B>DDEExecute</B>.</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Execute a query in ODBC SQL using <B>SQLExecQuery</B> or <B>SQLQueryExec</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Retrieve data as strings using <B>DDERequest</B>; parse as required by the application's DDE and database functionality.</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">With <B>SQLExecQuery</B>, retrieve data items as strings using row and column notation with <B>SQLRetrieveItem$</B>, or retrieve the entire query and insert it as a table with <B>SQLRetrieveToDocument</B>.</P>
<P CLASS="tt">With <B>SQLQueryExec</B>, move through rows using <B>SQLQueryFetch</B> or <B>SQLSetRowPos </B>and return data from columns using <B>SQLQueryRetrieve</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Close the DDE channel using <B>DDETerminate</B>.</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Close the data source channel using <B>SQLClose</B>.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For comparison, open the macros in the two templates on the Microsoft Word Devleoper's Kit disk: INVOICE2.DOT in the WRDBASIC folder and INVOICE3.DOT in the WBODBC folder. Looking at the areas in the macros that retrieve and write data, you can compare and contrast the amount of code, the data parsing routines, and the error handling routines required by ODBC and DDE. Create a new document based on each form and use it to run the macros and demonstrate the differences in speed.</P>
<P CLASS="t">For complete information about the purpose and functionality of the Invoice form itself and the use of form fields to trigger WordBasic macros, see "Automating Forms" in Chapter 9, "More WordBasic Techniques," in Part 1, "Learning WordBasic."</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">To run the macros in the INVOICE3.DOT template, you must have access to the NWIND.MDB or NORTHWIND.MDB file (shipped with Microsoft Access version 2.0 and version 7.0, respectively) and you must create a data source called "Northwind" associated with that database. For information about creating ODBC data sources, see "Setting Up Data Sources," earlier in this appendix.</P>
<P></P></FONT></FONT></BODY></HTML>

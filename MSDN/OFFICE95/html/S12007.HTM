<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetValue Action</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec486"></A>SetValue Action</H1><P CLASS="t">  </P>
<H2><A NAME="sec487"></A>Description</H2><P>You can use the SetValue action to set the value of a Microsoft Access field, control, or property on a form, a form datasheet, or a report.</P>
<H2><A NAME="sec488"></A>Setting</H2><P>The SetValue action uses the following arguments.</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="107pt" VALIGN="TOP"><COL WIDTH="261pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Action argument</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Item</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The name of the field, control, or property whose value you want to set. You must use the full syntax to refer to this item, such as <I>controlname</I> (for a control on the form or report from which the macro was called) or <B>Forms!</B><I>formname</I><B>!</B><I>controlname.</I> This is a required argument.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Expression</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The expression Microsoft Access uses to set the value for this item. You must always use the full syntax to refer to any objects in the expression. For example, to increase the value in a Salary control on an Employees form by 10 percent, use Forms!Employees!Salary*1.1. This is a required argument.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Note   </B>You shouldn’t use an equal sign (=) before the expression in this argument. If you do, Microsoft Access evaluates the expression and then uses this value as the expression in this argument. This can produce unexpected results if the expression is a string.</P>
<P CLASS="t">For example, if you type <B>="String1"</B> for this argument, Microsoft Access first evaluates the expression as String1. Then it uses String1 as the expression in this argument, expecting to find a control or property named String1 on the form or report that called the macro.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   To use the Expression Builder to create an expression for either of these action arguments, click the Build button to the right of the Expression box.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec489"></A>Remarks</H2><P>You can use this action to set a value for a field or control on a form, a form datasheet, or a report. You can also set the value for almost all control, form, and report properties in any view. To find out whether a particular property can be set using a macro and which views it can be set in, see the topic for that property.</P>
<P>You can also set the value for a field in a form’s underlying table even if the form doesn’t contain a control bound to the field. Use the syntax <B>Forms!</B><I>formname</I><B>!</B><I>fieldname</I> in the Item box to set the value for such a field. You can also refer to a field in a report’s underlying table using the syntax <B>Reports!</B><I>reportname</I><B>!</B><I>fieldname</I>, but there must be a control on the report bound to this field, or the field must be referred to in a calculated control on the report.</P>
<P>If you set the value of a control on a form, the SetValue action doesn’t trigger the control’s form-level validation rules, but it does trigger the underlying field’s table-level validation rules if the control is a bound control. The SetValue action also triggers recalculation, but the recalculation may not happen immediately. To trigger immediate repainting and force the recalculation to completion, use the RepaintObject action. The value you set in a control using the SetValue action is also not affected by an input mask set in the control’s or underlying field’s <B>InputMask</B> property.</P>
<P>To change the value of a control, you can use the SetValue action in a macro specified by the control’s <B>AfterUpdate</B> event property. However, you can’t use the SetValue action in a macro specified by a control’s <B>BeforeUpdate</B> event property to change the value of the control (although you can use SetValue to change the value of other controls). You can also use SetValue in a macro specified by the <B>BeforeUpdate</B> or <B>AfterUpdate</B> property of a form to change the value of any controls in the current record.</P>
<P><A NAME="sec489PT2"></A>Note</P>
<P CLASS="t">  </P>
<P><B>Note</B>   You can’t use the SetValue action to set the value of the following controls:</P>
<P CLASS="t">  </P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Bound controls and calculated controls on reports.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Calculated controls on forms.</LI></UL></SPAN><P></P>
<P CLASS="t">  </P>
<P><B>Tip</B>   You can use the SetValue action to hide or show a form in Form view. Enter <B>Forms!</B><I>formname</I><B>.Visible</B> in the Item box and No or Yes in the Expression box. Setting a modal form’s <B>Visible</B> property to No hides the form and makes it modeless. Setting the property to Yes displays the form and makes it modal again.</P>
<P CLASS="t">  </P>
<P></P>
<P>Changing the value of or adding new data in a control using the SetValue action in a macro does not trigger events such as BeforeUpdate, BeforeInsert, or Change that occur when you change or enter data in these controls in the user interface. These events also don’t occur if you set the value of the control using Visual Basic.</P>
<P>This action isn’t available in Visual Basic. Set the value directly in Visual Basic.</P>
<H2><A NAME="sec490"></A>See Also</H2><P>RepaintObject Action, SendKeys Action.</P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>

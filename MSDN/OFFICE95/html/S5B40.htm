<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with the Workbook Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Working with the Workbook Object</H2><P CLASS="t">When you open or save a file in Microsoft Excel, you're actually opening and saving a workbook. In Visual Basic, the methods for manipulating files are methods of the <B>Workbook</B> object or its collection.</P>
<H3><A NAME="sec0"></A>Opening Workbooks</H3><P CLASS="t">When you open a workbook, you use the <B>Open</B> method. The <B>Open </B>method always applies to the <B>Workbooks</B> collection, which you return using the <B>Workbooks</B> method. The following code opens the file BOOK1.XLS (in the current folder) and then displays the value that's in cell A1 of the first worksheet in the workbook.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub OpenBook1()
    Set myBook = Workbooks.Open(Filename:="BOOK1.XLS")
    MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub
</FONT></PRE>
<P CLASS="t">Notice that the return value of the <B>Open</B> method is a <B>Workbook</B> object that refers to the workbook that was just opened.</P>
<P CLASS="t">The filename in this example doesn't contain a path; therefore, the file is assumed to be in the current folder. This is guaranteed to cause a run-time error, because as soon as the user changes the current folder, Visual Basic can no longer find the file.</P>
<P CLASS="t">There are two relatively safe places to store a workbook you want to open programmatically. One place is the folder that contains the executable file for Microsoft Excel. The other place is the Library folder, which is created automatically during setup; this folder is one level down from the folder that contains the executable file.</P>
<P CLASS="t">If you want to open a workbook that's saved in the folder that contains the executable file, you can use the <B>Path</B> property to return a string that specifies the folder. The <B>PathSeparator</B> property returns the correct separator character for the current file system (for example, "\" for MS-DOS&reg;/Windows&reg; FAT or ":" for the Macintosh&reg;). The following example shows file-system-independent code you can use to open BOOK1.XLS, assuming that BOOK1.XLS is saved in the executable file's folder.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub OpenBook1()
    EXEPath = Application.Path &amp; Application.PathSeparator
    fName = EXEPath &amp; "BOOK1.XLS"
    Set myBook = Workbooks.Open(Filename:=fName)
    MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub
</FONT></PRE>
<P CLASS="t">The other relatively safe place to store a workbook is in the Library folder. You can use the <B>LibraryPath</B> property instead of the <B>Path</B> property to return a string that specifies the Library folder. The following code shows how you would alter the preceding example to use the <B>LibraryPath </B>property.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub OpenBook1()
    LibPath = Application.LibraryPath &amp; Application.PathSeparator
    fName = LibPath &amp; "BOOK1.XLS"
    Set myBook = Workbooks.Open(Filename:=fName)
    MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub
</FONT></PRE>
<P CLASS="t">Instead of hard-coding a filename in the <B>Open</B> method, you may want to allow a user to select a file to open. The <B>GetOpenFilename</B> method displays the standard Open dialog box, but it returns a string instead of opening a file. The string contains the fully qualified path and filename. The following example demonstrates the <B>GetOpenFilename</B> method by displaying the return value in a message box and then opening the file.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub DemoGetOpenFilename()
    Do
        fName = Application.GetOpenFilename
    Loop Until fName &lt;&gt; False
    MsgBox "Opening " &amp; fName
    Set myBook = Workbooks.Open(Filename:=fName)
End Sub
</FONT></PRE>
<H3><A NAME="sec1"></A>Creating and Saving Workbooks</H3><P CLASS="t">You create a new workbook by applying the <B>Add</B> method to the <B>Workbooks</B> collection. Remember to set the return value of the <B>Add</B> method to an object variable so that you can refer to the new workbook in your code.</P>
<P CLASS="t">When you save a new workbook for the first time, use the <B>SaveAs</B> method. For subsequent saves, use the <B>Save</B> method. The <B>GetSaveAsFilename</B> method is very similar to the <B>GetOpenFilename</B> method described in the preceding section. The following code shows how to create a new workbook and then save it using the <B>GetSaveAsFilename</B> method.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CreateAndSave()
    Set newBook = Workbooks.Add
    Do
        fName = Application.GetSaveAsFilename
    Loop Until fName &lt;&gt; False
    newBook.SaveAs Filename:=fName
End Sub
</FONT></PRE>
<H3><A NAME="sec2"></A>Closing Workbooks</H3><P CLASS="t">To close a workbook, use the <B>Close</B> method of the <B>Workbook</B> object. You can close a workbook without saving changes, as shown in the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub OpenChangeClose()
    Do
        fName = Application.GetOpenFilename
    Loop Until fName &lt;&gt; False
    Set myBook = Workbooks.Open(Filename:=fName)
    '
    ' make some changes to myBook
    '
    myBook.Close savechanges:=False
End Sub
</FONT></PRE>
<P CLASS="t">This code uses the <B>GetOpenFilename</B> method to select the workbook to open, makes some changes to the workbook (indicated by the comments), and then closes the workbook without saving the changes.</P>
<H3><A NAME="sec3"></A>When to Use the ThisWorkbook Property</H3><P CLASS="t">Suppose that you're developing a small application using Visual Basic and that you want to save the workbook as a Microsoft Excel add-in when you finish. The macro contains a custom dialog box, Dialog1, and you display the dialog sheet using the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Public DlgValue

Sub DisplayDialog()
    DlgValue = DialogSheets("Dialog1").Show
End Sub
</FONT></PRE>
<P CLASS="t">You finish writing and debugging the application, and then you click Make Add-In on the Tools menu, creating an add-in named MYADDIN.XLA. However, when your add-in runs the DisplayDialog procedure, a run-time error occurs (error&nbsp;1004, "DialogSheets method of Application class failed"). What happened?</P>
<P CLASS="t">In the DisplayDialog procedure, the <B>DialogSheets</B> method applies to the active workbook because you omitted the object qualifier. However, the active workbook isn't MYADDIN.XLA; it's whichever workbook is displayed by Microsoft Excel. You could try the following fix.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">DlgValue = Workbooks("MYADDIN.XLA").DialogSheets("Dialog1").Show
</FONT></PRE>
<P CLASS="t">This introduces the potential for more bugs, however, because the filename is hard-coded and must be in the current folder. You could use the folder management techniques described in "Opening Workbooks" earlier in this chapter, but there is a much safer and more robust way to fix this bug.</P>
<P CLASS="t">The <B>ThisWorkbook</B> property returns a <B>Workbook</B> object that refers to the workbook containing the code that's running. Therefore, you should use <B>ThisWorkbook</B> whenever you write code you intend to save as an add-in. The following example shows the robust code for the DisplayDialog procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Public DlgValue

Sub DisplayDialog()
    DlgValue = ThisWorkbook.DialogSheets("Dialog1").Show
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec75"></A>Static Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec76"></A>Description</H2><P>Used at procedure level to declare variables and allocate storage space. Variables declared with the <B>Static</B> statement retain their value as long as the code is running.</P>
<H2><A NAME="sec77"></A>Syntax</H2><P><B>Static</B> <I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B> [<B>New</B>] <I>type</I>][<B>, </B><I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B>[<B>New</B>] <I>type</I>]] <B>. . .</B></P>
<P>The <B>Static</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>subscripts</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <I>subscripts</I> argument uses the following syntax:</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">[<I>lower</I> <B>To</B>] <I>upper </I>[<B>,</B>[<I>lower</I> <B>To</B>] <I>upper</I>] <B>. . .</B></P>
<P CLASS="t">When not explicitly stated in <I>lower</I>, the lower bound of an array is controlled by the <B>Option</B> <B>Base</B> statement. The lower bound is zero if no <B>Option</B> <B>Base</B> statement is present.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>New</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Keyword used to indicate that a declared object variable is a new instance of a Visual Basic object or an externally creatable OLE Automation object. The <B>New</B> keyword can’t be used to create variables of any intrinsic data type and can’t be used to create dependent OLE Automation objects.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the variable; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(for variable-length strings), <B>String</B> * <I>length </I>(for fixed-length strings), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type. Use a separate <B>As</B> <I>type</I> clause for each variable being defined.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec78"></A>Remarks</H2><P>Once module code is running, variables declared with the <B>Static</B> statement retain their value until the module is reset or restarted. Use the <B>Static</B> statement in nonstatic procedures to explicitly declare <B>Static</B> variables.</P>
<P>Use a <B>Static</B> statement within a procedure to declare the data type of a <B>Static</B> variable. For example, the following statement declares a fixed-size array of integers:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Static EmployeeNumber(200) As Integer
</PRE>
<P CLASS="t">  </P>
<P>Also use the <B>Static</B> statement to declare the object type of a variable. The following declares a variable for a new instance of a worksheet:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Static X As New Worksheet
</PRE>
<P CLASS="t">  </P>
<P>If the <B>New</B> keyword is not used when declaring an object variable, no instance of the object actually exists. A variable that refers to an object must be assigned an existing object using the <B>Set</B> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <B>Nothing</B>, which indicates that it does not refer to any particular instance of an object.</P>
<P>If you do not specify a data type or object type, and there is no <B>Def</B><I>type</I> statement in the module, the variable is <B>Variant</B> by default.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The <B>Static</B> statement and the <B>Static</B> keyword affect the lifetime of variables differently. If you declare a procedure using the <B>Static</B> keyword (as in Static Sub CountSales ()), the storage space for all local variables within the procedure is allocated once and the value of the variables is preserved for the entire time the program is running. For nonstatic procedures, storage space for variables is allocated each time the procedure is called and released when the procedure is exited. The <B>Static</B> statement is used to declare variables within nonstatic procedures to preserve their value for as long as the program is running.</P>
<P CLASS="t">  </P>
<P></P>
<P>When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string, and a fixed-length string is filled with zeros. <B>Variant</B> variables are initialized to <B>Empty</B>. Each element of a user-defined type variable is initialized as if it were a separate variable.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Tip</B>   When you use the <B>Static</B> statement in a procedure, it is a generally accepted programming practice to put the <B>Static</B> statement at the beginning of the procedure with any <B>Dim</B> statements.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec79"></A>See Also</H2><P><B>Array</B> Function, <B>Dim</B> Statement, <B>Function</B> Statement, <B>Option Base</B> Statement, <B>Private</B> Statement, <B>Public</B> Statement, <B>ReDim</B> Statement, <B>Sub</B> Statement.</P>
<H2><A NAME="sec80"></A>Example</H2><P>This example uses the <B>Static</B> statement to retain the value of a variable for as long as module code is running.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' Function definition.KeepTotal(Number)
    ' Only the variable Accumulate preserves its value between calls.
    Static Accumulate
    Accumulate = Accumulate + Number
    KeepTotal = AccumulateFunction
' Static function definition.Function MyFunction(Arg1, Arg2, Arg3)
    ' All local variables preserve value between function calls.
    Accumulate = Arg1 + Arg2 + Arg3
    Half = Accumulate / 2
    MyFunction = HalfFunction
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>

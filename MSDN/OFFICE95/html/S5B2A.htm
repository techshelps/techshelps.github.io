<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Properties and Methods That Are Unique to Collections</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Properties and Methods That Are Unique to Collections</H2><P CLASS="t">Collections have a <B>Count</B> property, an <B>Add</B> method, and an <B>Item</B> method. This section describes how to use these language elements.</P>
<H3><A NAME="sec0"></A>Using the Count Property</H3><P CLASS="t">The <B>Count</B> property returns the number of elements in a collection. For example, the following code uses the <B>Count </B>property to display the number of worksheets in the active workbook.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub NumWorksheets()
    MsgBox "Number of worksheets in this workbook: " &amp; _
        ActiveWorkbook.Worksheets.Count
End Sub
</FONT></PRE>
<P CLASS="t">The <B>Count</B> property is useful when you want to loop on the elements in a collection, although in most cases a <B>For Each...Next</B> loop is recommended instead. The following example shows how you can use the <B>Count</B> property to loop on the worksheets in the active workbook, hiding every other worksheet.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub HideEveryOther()
    For i = 1 To Worksheets.Count
        If i Mod 2 = 0 Then
            Worksheets(i).Visible = False
        End If
    Next i
End Sub
</FONT></PRE>
<H3><A NAME="sec1"></A>Using the Add Method</H3><P CLASS="t">The <B>Add</B> method creates a new element in a collection. This results in a new element in Microsoft Excel also. For example, when you use the <B>Add</B> method on the <B>Worksheets</B> collection, Visual Basic adds a new <B>Worksheet</B> object to the collection, and Microsoft Excel adds a new worksheet to the workbook.</P>
<P CLASS="t">The <B>Add</B> method takes different arguments, depending on the collection it's applied to. For example, the <B>Add</B> method for the <B>Workbooks</B> collection takes one argument (<B><I>template</I></B>), but the <B>Add</B> method for the <B>Worksheets</B> collection takes four arguments (<B><I>before</I></B>,<B><I> after</I></B>,<B><I> count</I></B>,<B><I> </I></B>and<B><I> type</I></B>). You can find the arguments for the <B>Add</B> method in the Object Browser or in Help.</P>
<H4><A NAME="sec2"></A>Using the Add Method's Return Value</H4><P CLASS="t">The <B>Add</B> method returns a reference to the new object it creates. If you need to refer to the new object in your code, you should set an object variable to the return value and then use the object variable to refer to the new object.</P>
<P CLASS="t">For example, the first procedure in the following code creates a new worksheet in the active workbook and then hides the worksheet by setting its <B>Visible</B> property to the constant <B>xlVeryHidden</B>. The public object variable newSheet is set to the return value of the <B>Add</B> method. The variable newSheet can be used by any procedure in any module of the active workbook. Hidden worksheets are an excellent place for a macro to temporarily store numbers and other data, as shown in the other two procedures in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Public newSheet As Object

Sub CreateScratchWorksheet()
    Set newSheet = Worksheets.Add
    newSheet.Visible = xlVeryHidden
End Sub

Sub FillRanges()
    newSheet.Range("F9").Value = "some text"
    newSheet.Range("A1:D4").Formula = "=RAND()"
End Sub

Sub ShowValue()
    MsgBox newSheet.Range("A1").Value
End Sub
</FONT></PRE>
<H3><A NAME="sec3"></A>Using the Item Method</H3><P CLASS="t">Most of the code you see in this book and in Help uses a shorthand syntax for accessor methods. The following two lines of code, which perform the same action in Microsoft Excel, demonstrate the shorthand syntax.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("A1").Value = 3        ' shorthand

Worksheets.Item("Sheet1").Range("A1").Value = 3    ' same action
</FONT></PRE>
<P CLASS="t">You may see the <B>Item</B> method used occasionally in other books about Visual Basic. For brevity in code, you can always omit the <B>Item</B> method and use the shorthand syntax. The shorthand syntax occurs because the <B>Item</B> method is the default method for a collection object.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 5 Optimizing for Size and Speed</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1 CLASS="cht">Chapter 5 Optimizing for Size and Speed</H1><P CLASS="t">Visual Basic is an extremely flexible programming language: there are often several ways to accomplish the same task. When you first start to program, or when you write a macro that will run only once, you'll probably be satisfied with simply "getting the job done." When you write a macro that will be used many times — such as a macro that prepares a weekly report, or an Auto_Open macro that runs every time you open a workbook — or when you write a macro that will be used by other people, you'll probably want to <I>optimize</I> the macro so that it requires less time and memory to run. The techniques described in this chapter will help you write smaller, faster macros.</P>
<H5><A NAME="sec0"></A>Contents</H5><UL><LI>Minimizing OLE References</LI><LI>Using Collection Index Numbers</LI><LI>Minimizing Object Activation and Selection</LI><LI>Removing Unnecessary Recorded Expressions</LI><LI>Minimizing the Use of Variant Variables</LI><LI>Using Specific Object Types</LI><LI>Using Constants</LI><LI>Using Worksheet Functions</LI><LI>Using Special-Purpose Visual Basic Methods</LI><LI>Turning Off Screen Updating</LI></UL><P></P>
<P CLASS="t">For information about accessing external data, see Chapter 13, "Accessing External Data."</P></FONT>
</FONT></BODY></HTML>

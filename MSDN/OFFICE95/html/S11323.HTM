<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call Statement</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec150"></a>Call Statement</h1>

<h2><a name="sec151"></a>Description</h2>

<p>Transfers control to a <b>Sub</b> procedure, <b>Function</b>
procedure, dynamic-link library (DLL) procedure, or a Macintosh®
code resource procedure.</p>

<h2><a name="sec152"></a>Syntax</h2>

<p>[<b>Call</b>] <i>name</i> [<i>argumentlist</i>]</p>

<p>The <b>Call</b> statement syntax has these parts:</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Call</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional keyword; if specified, you must
        enclose <i>argumentlist</i> in parentheses. For example:</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Call MyProc(0)</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>name</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the procedure to call.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>argumentlist</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Comma-delimited list of variables,
        arrays, or expressions to pass to the procedure.
        Components of <i>argumentlist</i> may include the
        keywords <b>ByVal</b> or <b>ByRef</b> to describe how the
        arguments are to be treated by the called procedure.
        However, <b>ByVal</b> and <b>ByRef</b> can be used with <b>Call</b>
        only when making a call to a DLL procedure or a Macintosh
        code resource. </td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<h2><a name="sec153"></a>Remarks</h2>

<p>You are not required to use the <b>Call</b> keyword when
calling a procedure. However, if you use the <b>Call</b> keyword
to call a procedure that requires arguments, <i>argumentlist</i>
must be enclosed in parentheses. If you omit the <b>Call</b>
keyword, you also must omit the parentheses around <i>argumentlist</i>.
If you use either <b>Call</b> syntax to call any intrinsic or
user-defined function, the function&#146;s return value is
discarded.</p>

<p>To pass a whole array to a procedure, use the array name
followed by empty parentheses.</p>

<h2><a name="sec154"></a>See Also</h2>

<p><b>Declare</b> Statement.</p>

<h2><a name="sec155"></a>Example</h2>

<p>This example illustrates how the <b>Call</b> statement is used
to transfer control to a <b>Sub</b> procedure, an intrinsic
function, a dynamic-link library (DLL) procedure, and a procedure
in a Macintosh code resource.</p>

<p class="spacing"><br>
</p>

<pre>' Call a Sub procedure.PrintToDebugWindow(&quot;Hello World&quot;)    
' The above statement causes control to be passed to the following
' Sub procedure.PrintToDebugWindow(AnyString)
    Debug.Print AnyString            ' Print to Debug window.Sub
' Call an intrinsic function. The return value of the function is
' discarded.Shell(AppName, 1)                ' AppName contains the path of the 
                                    ' executable file.
' Call a Microsoft Windows DLL procedure. The Declare statement must be 
' Private in a Class Module, but not in a standard Module.Declare Sub MessageBeep Lib &quot;User&quot; (ByVal N As Integer)CallMyDll()
    Call MessageBeep(0)                ' Call Windows DLL procedure.
    MessageBeep 0                    ' Call again without Call keyword.Sub
' Call a Macintosh code resource.Sub MessageAlert Lib &quot;MyHd:MyAlert&quot; Alias &quot;MyAlert&quot; (ByVal N _
    As Integer)CallMyCodeResource()
    Call MessageAlert(0)                ' Call Macintosh code resource.
    MessageAlert 0                    ' Call again without Call keyword.Sub
</pre>
</FONT></FONT></BODY>
</html>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Function Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Declares the name, arguments, and code that form the body of a <B>Function</B> procedure.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn">[<B>Public</B> | <B>Private</B>][<B>Static</B>] <B>Function</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>][<B>As</B> <I>type</I>]<BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR>    [<B>Exit Function</B>] <BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR><B>End Function</B></P>
<P CLASS="t">The <B>Function</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Public</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Function</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement) the procedure is not available outside the project.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Private</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Function</B> procedure is accessible only to other procedures in the module where it is declared.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Static</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Function</B> procedure's local variables are preserved between calls. The <B>Static</B> attribute doesn't affect variables that are declared outside the <B>Function</B>, even if they are used in the procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>name</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the <B>Function</B>; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>arglist</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">List of variables representing arguments that are passed to the <B>Function</B> procedure when it is called. Multiple variables are separated by commas.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the value returned by the <B>Function</B> procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String (</B>except fixed length<B>)</B>,<B> Object</B>, <B>Variant</B> or any user-defined type. Arrays of any type can't be returned, but a <B>Variant</B> containing an array can.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>statements</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any group of statements to be executed within the body of the <B>Function</B> procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>expression</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Return value of the <B>Function</B>.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The <I>arglist</I> argument has the following syntax and parts:</P>
<P CLASS="syn">[<B>Optional</B>][<B>ByVal</B> | <B>ByRef</B>][<B>ParamArray</B>] <I>varname</I>[<B>( )</B>][<B>As</B> <I>type</I>]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Optional</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that an argument is not required. If used, all subsequent arguments in <I>arglist</I> must also be optional and declared using the <B>Optional</B> keyword. All <B>Optional</B> arguments must be <B>Variant</B>. <B>Optional</B> can't be used for any argument if <B>ParamArray</B> is used.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByVal</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by value.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByRef</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by reference.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ParamArray</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Used only as the last argument in <I>arglist</I> to indicate that the final argument is an <B>Optional</B> array of <B>Variant</B> elements. The <B>ParamArray</B> keyword allows you to provide an arbitrary number of arguments. May not be used with <B>ByVal</B>, <B>ByRef</B>, or <B>Optional</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable representing the argument; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the argument passed to the procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Function</B> procedures are <B>Public</B> by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P CLASS="t">All executable code must be in<B> </B>procedures. You can't define a <B>Function</B> procedure inside another <B>Function</B>,<B> Sub</B>, or <B>Property</B> procedure.</P>
<P CLASS="t">The <B>Exit Function </B>keywords cause an immediate exit from a <B>Function</B> procedure. Program execution continues with the statement following the statement that called the <B>Function</B> procedure. Any number of <B>Exit Function</B> statements can appear anywhere in a <B>Function</B> procedure.</P>
<P CLASS="t">Like a <B>Sub</B> procedure, a <B>Function</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <B>Sub</B> procedure, a <B>Function</B> procedure can be used on the right hand side of an expression in the same way you use any intrinsic function, such as <B>Sqr</B>, <B>Cos</B>, or <B>Chr</B>, when you want to use the value returned by the function.</P>
<P CLASS="t">You call a <B>Function</B> procedure using the function name, followed by the argument list in parentheses, in an expression. If the function has no arguments, you still must include the parentheses. See the <B>Call</B> statement for specific information on how to call <B>Function</B> procedures.</P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">Function procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow. The <B>Static</B> keyword is usually not used with recursive <B>Function</B> procedures.</P>
<P></P>
<P CLASS="t">To return a value from a function, assign the value to the function name. Any number of such assignments can appear anywhere within the procedure. If no value is assigned to <I>name</I>, the procedure returns a default value: a numeric function returns 0, a string function returns a zero-length string (""), and a <B>Variant</B> function returns <B>Empty</B>. A function that returns an object reference returns <B>Nothing</B> if no object reference is assigned to <I>name</I> (using <B>Set</B>) within the <B>Function</B>.</P>
<P CLASS="t">The following example shows how to assign a return value to a function named BinarySearch. In this case, <B>False</B> is assigned to the name to indicate that some value was not found.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Function BinarySearch(. . .) As Boolean
.<B> </B>.<B> </B>.
    ' Value not found. Return a value of False.
    If lower &gt; upper Then
        BinarySearch = False
        Exit Function
    End If
.<B> </B>.<B> </B>.
End Function
</FONT></PRE>
<P CLASS="t">Variables used in <B>Function</B> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <B>Dim</B> or the equivalent) are always local to the procedure. Other variables used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.</P>
<P></P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">A procedure can use a variable that is not explicitly declared in the procedure, but a name conflict can occur if anything you have defined at the module level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant or variable, it is assumed that your procedure is referring to that module-level name. Explicitly declare variables to avoid this kind of conflict. You can use an <B>Option Explicit</B> statement to force explicit declaration of variables.</P>
<P></P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">Arithmetic expressions may be rearranged to increase internal efficiency. Avoid using a <B>Function</B> procedure in an arithmetic expression when the function changes the value of variables in the same expression.</P>
<P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Call</B> Statement, <B>Dim</B> Statement, <B>Option</B> <B>Explicit</B> Statement, <B>Property</B> <B>Get</B> Statement, <B>Property</B> <B>Let</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Set</B> Statement, <B>Static</B> Statement, <B>Sub</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Function</B> statement to declare the name, arguments and code that form the body of a <B>Function</B> procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' The following user-defined function returns the square root of the
' argument passed to it.
Function CalculateSquareRoot(NumberArg As Double) As Double
    If NumberArg &lt; 0 Then    ' Evaluate argument.
        Exit Function    ' Exit to calling procedure.
    Else
        CalculateSquareRoot = Sqr(NumberArg)    ' Return square root.
    EndIf
End Function

' Using the ParamArray keyword enables a function to accept a variable
' number of arguments. In the following definition, FirstArg is passed
' by value.
Function CalcSum(ByVal FirstArg As Integer, ParamArray OtherArgs())
' If the function is invoked as...
ReturnValue = CalcSum(4,3,2,1)
' Local variables get the following values: FirstArg=4, OtherArgs(1)=3,
' OtherArgs(2) = 2 and so on, assuming default lower bound for 
' arrays = 1.

' If a function's arguments are defined as...
Function MyFunc(MyStr As String, Optional MyArg1, Optional MyArg2) 
' It can be invoked in the following ways.
RetVal = MyFunc("Hello", 2, "World")    ' All 3 arguments supplied.
RetVal = MyFunc("Test", , 5)    ' Second argument omitted.
RetVal = MyFunc("Test")    ' First argument only.</FONT></PRE></FONT>
</FONT></BODY></HTML>

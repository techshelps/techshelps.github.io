<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling Word from Another Application</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Calling Word from Another Application</H2><P CLASS="t">It is not possible to call a WLL from an application other than Word and then have the called WLL drive Word. The CAPI messaging interface (CMI) is a way to get around this problem. </P>
<H3 CLASS="h4"><A NAME="sec0"></A>Windows 3.<I>x</I></H3><P CLASS="t">To call <B>wdCommandDispatch</B>, a WLL must be called by Word; otherwise stack problems occur, resulting in a general protection fault. When making a Word API call, the calling application can send a message to Word (WM_WDCAPI) instead of calling <B>wdCommandDispatch</B>. As a result, Word calls <B>wdCommandDispatch</B> from its own stack (avoiding stack problems) when it processes the message.</P>
<P CLASS="t">To use the CAPI messaging interface, follow this general procedure.</P>
<P CLASS="ls">    1.    Include the following in a header file:</P>
<P CLASS="spacing"><BR></P>
<PRE>#include "wdcapi.h"
#define WM_WDCAPI    (WM_USER + 0x0300)
typedef struct
{
    short    CommandID;
    short    DlgOptions;
    short    cArgs;
    LPWDOPR    lpwdoprArgs;
    LPWDOPR    lpwdoprReturn;
} CMI;
typedef CMI far *LPCMI;
</PRE>
<P CLASS="ls">    2.    Fill the CMI structure.</P>
<P CLASS="ls">    3.    Call SendMessage in the following way:</P>
<P CLASS="spacing"><BR></P>
<PRE>err = (int)SendMessage( hWordWnd, WM_WDCAPI, 0, (LPARAM)(LPCMI)&amp;cmi );
</PRE>
<H3 CLASS="h4"><A NAME="sec1"></A>Windows 95 and Windows NT</H3><P CLASS="t">To access the CMI from Windows 95 or Windows NT, you call <B>cmiCommandDispatch</B> instead of sending the WM_WORDCAPI message to Word (in Windows 95 and Windows NT, WM_WORDCAPI returns CAPIBadMessage). To call <B>cmiCommandDispatch</B>, you can either link your application with the WIN32CMI.LIB file, or load the WIN32CMI.DLL with LoadLibrary and then call GetProcAddress to get the address of the function. <BR>The <B>cmiCommandDispatch</B> function has the same prototype as <B>wdCommandDispatch</B>; see the CMI header file (WIN32CMI.H) for this prototype. </P>
<P CLASS="t">The WIN32CMI.LIB and WIN32CMI.DLL files are located in the CAPI\WIN32CMI folder on the Microsoft Word Developer's Kit disk. The folder includes the source files required to build the LIB and DLL (a Microsoft Visual C++ version 2.0 project file is provided). If you are programming on a RISC platform, you will need to build the LIB and DLL for your platform using the source files provided.</P>
<H3 CLASS="h4"><A NAME="sec2"></A>Macintosh</H3><P CLASS="t">On the Macintosh, you can use the CMI to drive Word from an application or code resource that is not directly called by Word. CMI on the Macintosh uses Apple Events to dispatch commands to Word instead of calling <B>wdCommandDispatch</B> directly from the Word API.</P>
<P CLASS="t">To make a CMI call on the Macintosh, you calling application or code resource needs to build an Apple Event that contains all the information normally passed by <B>wdCommandDispatch</B>. After it sends the event to Word, it needs to unpack the reply event.</P>
<P CLASS="t">To use the CMI on the Macintosh, use the CMILIB.C and CMILIB.H files included in the CMI folder in the CAPI folder on the Microsoft Word Developer's Kit disk instead of the CAPILIB.C and CAPILIB.H described earlier in this appendix. With these files added to your project, you can simply make calls to <B>cmiCommandDispatch</B> instead of <B>wdCommandDispatch</B>; all of the Apple Event construction is handled by the CMI files. Review the sample provided in the CMI:SAMPLE foler to see how the CMI is used.</P></FONT></FONT></BODY></HTML>

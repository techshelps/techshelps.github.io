<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring Variables</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Declaring Variables</H2><P CLASS="t">Whereas implicit variable declaration can initially make your code easier to write, <I>explicit</I> variable declaration ultimately makes the code easier to read, modify, debug, and run. To explicitly declare a variable, you use the <B>Dim</B>, <B>Private</B>, <B>Public</B>, or <B>Static</B> keyword to specify the variable's scope (what parts of your macro can use the variable), lifetime (how long Visual Basic keeps data in the variable), and data type (what kind of information the variable contains).</P>
<P CLASS="t">Explicit variable declaration:</P>
<UL><LI>Makes code easier to understand by grouping all variable names at the beginning of modules and procedures, where you can keep track of them.</LI><LI>Helps prevent you from inadvertently creating a new variable by misspelling the name of an existing variable.</LI><LI>Helps prevent you from inadvertently using an existing variable when meaning to create a new one, thereby erasing the initial value stored in the variable.</LI><LI>Speeds code execution by specifying the exact data type of each variable. Your code runs faster when Visual Basic doesn't have to determine the data type for each variable while the code is running.</LI><LI>Matches the capitalization of each variable to the capitalization of the variable in the declaration statement and makes your code easier to read.</LI></UL><P></P>
<P>To reduce t</P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">To reduce the amount of time you spend deciphering, debugging, and running code, explicitly declare each variable and specify as much information as you can about the data to be stored in it.</P>
<P></P>
<P CLASS="t">The simplest form of explicit variable declaration creates a new variable with the <B>Variant</B> data type and procedure-level scope. The value in the variable is preserved only while the procedure is running. The following example declares two variables — radius and area.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CircleArea()
    Dim radius, area
    radi    us = InputBox("Circle Radius?")
    area = 3.14159 * radius ^ 2
    MsgBox "The area is " &amp; area
End Sub
</FONT></PRE>
<P CLASS="t">You'll learn more about using declaration statements to specify variable scope, lifetime, and data type later in this chapter.</P></FONT>
</FONT></BODY></HTML>

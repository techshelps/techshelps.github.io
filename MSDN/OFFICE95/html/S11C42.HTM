<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OldValue Property</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec133"></A>OldValue Property</H1><P CLASS="t">  </P>
<H2><A NAME="sec134"></A>Applies To</H2><P>Bound Control, Bound Object Frame Control, Check Box Control, Combo Box Control, List Box Control, Option Button Control, Option Group Control, Text Box Control, Toggle Button Control.</P>
<H2><A NAME="sec135"></A>Description</H2><P>You can use the <B>OldValue</B> property to determine the unedited value of a bound control.</P>
<H2><A NAME="sec136"></A>Setting</H2><P>The <B>OldValue</B> property contains the unedited data from a bound control and is read-only in all views.</P>
<P>You can access this property only in a macro or Visual Basic. </P>
<P>The <B>OldValue</B> property can be assigned to a variable using the following syntax.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>OriginalValue = Forms!Customers!AmountPaid.OldValue
</PRE>
<P CLASS="t">  </P>
<H2><A NAME="sec137"></A>Remarks</H2><P>Microsoft Access uses the <B>OldValue</B> property to retrieve the value of a control as it exists in the underlying record. When you edit a bound control on a form, your changes aren’t saved until you move to another record. The <B>OldValue</B> property contains the unedited version of the underlying data.</P>
<P>You can provide your own undo capability by assigning the <B>OldValue</B> property setting to a control. The following example shows how you can restore the unedited contents of the control Date.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Forms!Orders!Date = Forms!Orders!Date.OldValue
</PRE>
<P CLASS="t">  </P>
<P>If the control hasn’t been edited, this example has no effect. When you move to another record, the database is updated, so the current value and the <B>OldValue</B> property will be the same. </P>
<P>The <B>OldValue</B> property setting has the same data type as the field to which the control is bound.</P>
<H2><A NAME="sec138"></A>See Also</H2><P><B>ControlSource</B> Property, <B>Value</B> Property.</P>
<H2><A NAME="sec139"></A>Example</H2><P>The following example checks to determine if new data entered in a field is within 10 percent of the value of the original data. If the change is greater than 10 percent, the <B>OldValue</B> property is used to restore the original value.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub Validate_Field()
    Dim curNewValue As Currency, curOriginalValue As Currency
    Dim curChange As Currency, strMsg As String
    curNewValue = Forms!Employees!RaiseAmount
    curOriginalValue = Forms!Employees!RaiseAmount.OldValue
    curChange = Abs(curNewValue - curOriginalValue)
    If curChange &gt; (curOriginalValue * .1) Then
        strMsg = "Change is more than 10 percent of original."
        strMsg = strMsg &amp; vbCrLf &amp; "Restoring original value."
        MsgBox strMsg, vbExclamation, "Invalid change"
        Forms!Employees!RaiseAmount = curOriginalValue
    End IfSub</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reducing the Size of an Add-In</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Reducing the Size of an Add-In</H2><P CLASS="t">While developing an add-in, you can create and delete many variables and procedures. For example, you could create many temporary variables during debugging and then later delete them, or you could create procedures that you eventually delete as your code evolves. Visual Basic might not delete the variable and procedure names from its symbol table; this could cause the add-in to use more memory than it would if the symbol table were clean.</P>
<P CLASS="t">If you suspect that a heavily edited workbook is using an unusually large amount of memory, you can reduce its size by cleaning its symbol table.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The following technique does more than just clean the symbol table; it also removes all the information in the Macro Options dialog box, such as the shortcut key, function category, status bar text, and so on. The information is removed for every procedure in every module. If you've used the Macro Options dialog box to add any information to the procedures, you'll have to restore it after cleaning the symbol table.</P>
<P></P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To clean an add-in's symbol table</B></P>
<P CLASS="ls">    1.    Open the original source workbook.</P>
<P CLASS="ls">    2.    Save each module in the workbook to a separate text file.</P>
<P CLASS="ls">    3.    Delete every module from the workbook.</P>
<P CLASS="ls">    4.    Save the workbook.</P>
<P CLASS="ls">    5.    Create new modules, giving them the same names as the ones you deleted.</P>
<P CLASS="ls">    6.    On the Insert menu, click File to add the code back into the new modules. Be&nbsp;sure to copy the code to the correct modules.</P>
<P></P>
<P CLASS="t">Although cleaning the symbol table may be tedious, it can reduce the memory requirements of an extensively edited add-in. You can compare the values returned by the <B>MemoryUsed</B> property (which returns the amount of memory that's currently being used by Microsoft Excel) before and after cleaning to measure the saved memory.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Eval Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec4"></A>Eval Function</H1><P CLASS="t">  </P>
<H2><A NAME="sec5"></A>Description</H2><P>You can use the <B>Eval</B> function to evaluate an expression that results in a text string or a numeric value.</P>
<P>You can construct a string and then pass it to the <B>Eval</B> function as if the string were an actual expression. The <B>Eval</B> function evaluates the string expression and returns its value. For example, Eval("1 + 1") returns 2.</P>
<P>If you pass to the <B>Eval</B> function a string that contains the name of a function, the <B>Eval</B> function returns the return value of the function. For example, Eval("Chr$(65)") returns “A”.</P>
<H2><A NAME="sec6"></A>Syntax</H2><P><B>Eval(</B><I>stringexpr</I><B>)</B></P>
<P>The <I>stringexpr</I> argument is an expression that evaluates to an alphanumeric text string. For example, <I>stringexpr</I> can be a function that returns a string or a numeric value. Or it can be a reference to a control on a form. The <I>stringexpr</I> must evaluate to a string or numeric value; it cannot evaluate to a Microsoft Access object.</P>
<H2><A NAME="sec7"></A>Remarks</H2><P>You can use the <B>Eval</B> function in a calculated control on a form or report, or in a macro or module. The <B>Eval</B> function returns a <B>Variant</B> that is either a string or a numeric type.</P>
<P>The argument <I>stringexpr</I> must be an expression that is stored in a string. If you pass to the <B>Eval</B> function a string that does not contain an numeric expression or a function name but only a simple text string, a run-time error occurs. For example, Eval("Smith") results in an error.</P>
<P>You can use the <B>Eval</B> function to determine the value stored in the <B>Value</B> property of a control. The following example passes a string containing a full reference to a control to the <B>Eval</B> function. It then displays the current value of the control in a dialog box.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim ctl As Control, strCtl As Stringctl = Forms!Employees!LastName = "Forms!Employees!LastName"("The current value of " &amp; ctl.Name &amp; " is " &amp; Eval(strCtl))
</PRE>
<P CLASS="t">  </P>
<P>You can use the <B>Eval</B> function to access expression operators that aren’t ordinarily available in Visual Basic. For example, you cannot use the SQL operators <B>Between...And</B> or <B>In</B> operators directly in your code, but you can use them in an expression passed to the <B>Eval</B> function.</P>
<P>The next example determines whether the value of the ShipRegion control on an Orders form is one of several specified state abbreviations. If the field contains one of the abbreviations, intState will be <B>True</B> (-1). Note that you use single quotation marks (‘) to include one string within another string.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim intState As Integer= Eval("Forms!Orders!ShipRegion In " _
    &amp; "('AK', 'CA', 'ID', 'WA', 'MT', 'NM', 'OR')")
</PRE>
<P CLASS="t">  </P>
<H2><A NAME="sec8"></A>Example</H2><P>The following example assumes that you have a series of 50 functions defined as A1, A2, and so on. This example uses the <B>Eval</B> function to call each function in the series.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub CallSeries()
    Dim intI As Integer

    For intI = 1 To 50
        Eval("A" &amp; intI &amp; "()")
    Next intISub
</PRE>
<P CLASS="t">  </P>
<P>The next example triggers a <B>Click</B> event as if the user had clicked a button on a form. If the value of the button’s <B>OnClick</B> property begins with an equal sign (=), signifying that it is the name of a function, the <B>Eval</B> function calls the function, which is equivalent to triggering the <B>Click</B> event. If the value does not begin with an equal sign, then the value must name a macro. The <B>RunMacro</B> method of the <B>DoCmd</B> object runs the named macro.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim ctl As Control, varTemp As Variantctl = Forms!Contacts!HelpButton(Left(ctl.OnClick, 1) = "=") Then
    varTemp = Eval(Mid(ctl.OnClick,2))
    DoCmd.RunMacro ctl.OnClickIf</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

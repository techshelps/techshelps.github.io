<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 3: Program Control Structures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817460">Lesson
3: </a><a name="DDE_LINK4">Program
Control Structures</a></H1>
  
        <p><b>Lesson
        Objectives</b></p>
        <p>Upon
        completion of this lesson, the participant will be able
        to:</p>
    
    <ul>
        <li>Explain
            the difference between the GoSub and Goto statements.</li>
        <li>Compare
            and contrast the If Then Else and Select Case
            conditional statements, noting the benefits and
            limitations of using one over the other and provide
            possible uses for each structure.</li>
    </ul>


<p><b>Some Topics
to be introduced in this lesson include:</b></p>
  
        
            
                <ul>
                    <li>Conditional Statement</li>
                    <li>Branching</li>
                    <li>Looping</li>
                    <li>Nesting</li>
                </ul>
            
        
    
    <p><b><i>Program
    Control Structures</i></b></p>


<p>Program control
structures are used to shape the flow of code execution. There
are three categories of control structures: branching (or
decision), looping, and error. All structure types contain blocks
of statements that perform tasks..</p>
  
        <p><b>If...Then...Else</b></p>
    


<p>The <b>If Then
Else</b> statement has two forms. The first is used when only a
few statements are to execute based on whether the result is true
or false. This type of <b>If</b> statement is commonly used when
setting variables based on a condition. </p>

<p><b>Syntax 1:</b></p>
  <p><b>If </b><b><i>condition</i></b><b>
    Then </b><b><i>statements</i></b><b> [Else elsestatements ]</b></p>


<p>Statements are
separated by colons (:). The second form of the <b>If</b>
statement is best used with larger statement blocks.</p>

<p><b>Syntax 2:</b></p>
  <p><b>If </b><b><i>condition</i></b><b>
    Then</b></p>
    <p><b>[statements]</b></p>
    <p><b>[ElseIf </b><b><i>condition-n</i></b><b>
    Then</b></p>
    <p><b>[elseifstatements]]
    . . .</b></p>
    <p><b>[Else</b></p>
    <p><b>[elsestatements]]</b></p>
    <p><b>End If</b></p>


<p>The following
example prompts the user for a number and if the number is less
than zero, tells the user to enter a number greater than zero:</p>
  <p><b>Sub
    IfThenElse()</b></p>
    <p><b>Dim num
    as Integer</b></p>
    <p><b>Num =
    Application.InputBox(prompt:=&quot;Enter a number,
    please&quot;, type:=1)</b></p>
    <p><b>If num
    &lt;= 0 Then</b></p>
    <p><b>MsgBox
    &quot;Please enter a number greater than zero&quot;</b></p>
    <p><b>Else</b></p>
    <p><b>MsgBox
    num &amp; &quot; squared is &quot; &amp; num * num</b></p>
    <p><b>End If</b></p>
    <p><b>End Sub</b></p>


<p>The <b>If Then
Else</b> branching structure is most effective in situations
where there are conditions based on multiple variables. In
situations where one variable has a large number of values, the <b>Select
Case</b> statement is better suited.</p>
  
        <p><b>Select Case</b></p>
    


<p>The <b>Select
Case</b> statement executes a block of statements based on the
value of an expression. VB examines the <i>testexpression</i>,
and evaluates each of the <i>expressionlists</i> in turn,
searching for a match. If it finds a match, it runs the code
after the Case statement and stops when it reaches the next Case
statement. If it finds no match, it will run the code after the
Case Else statement. If more than one Case expression matches, VB
will only evaluate the first one encountered and all others will
be ignored.</p>
  <p><b>Select
    Case </b><b><i>testexpression</i></b></p>
    <p><b>[Case </b><b><i>expressionlist-n</i></b></p>
    <p><b>[statements-n]]
    . . .</b></p>
    <p><b>[Case
    Else</b></p>
    <p><b>[elsestatements]]</b></p>
    <p><b>End
    Select</b></p>


<p>The following
example shows how the <b>Select Case</b> statement is used to
display the name and telephone number of an employee in a message
box based on the day of the week:</p>
  <p><b>Sub
    AssignEmp()</b></p>
    <p>&nbsp;</p>
    <p><b>Select
    Case Weekday(Now)</b></p>
    <p><b>Case
    pjMonday , pjFriday</b></p>
    <p><b>MsgBox
    &quot;Bob Smith&quot; &amp; Chr(13) &amp;
    &quot;876-5432&quot;</b></p>
    <p><b>Case
    pjTuesday, pjThursday</b></p>
    <p><b>MsgBox
    &quot;Jane Johnson&quot; &amp; Chr(13) &amp;
    &quot;745-5844&quot;</b></p>
    <p><b>Case Else</b></p>
    <p><b>MsgBox
    &quot;Steve Simpson&quot; &amp; Chr(13) &amp;
    &quot;855-3846&quot;</b></p>
    <p><b>End
    Select</b></p>
    <p>&nbsp;</p>
    <p><b>End Sub</b></p>
    
        <p><b>For Next</b></p>
    


<p>The <b>For Next</b>
loop executes a segment of code a specific number of times.</p>
  <p><b>For </b><b><i>counter</i></b><b>
    = </b><b><i>start</i></b><b> To </b><b><i>end</i></b><b>
    [Step </b><b><i>increment</i></b><b>]</b></p>
    <p><b>[</b><b><i>statementblock</i></b><b>]</b></p>
    <p><b>Next [</b><b><i>counter</i></b><b>
    [,</b><b><i>counter</i></b><b>][,...]]</b></p>
    
        <p><b>Do Loops</b></p>
    


<p><b>Do</b> loops
continue to execute a block of code until a certain condition is
met. The condition can have one of two forms:</p>
  
        <p><li>The code will
        execute <b>While</b> the condition is True</li></p>
        <p><li>The code will
        execute <b>Until</b> the condition is True.</li></p>
    


<p>The <b>Do</b>
loops have two different forms.</p>

<p><b>Syntax 1:</b></p>
  <p><b>Do
    [{While | Until} condition]</b></p>
    <p><b>[statements]</b></p>
    <p><b>[Exit Do]</b></p>
    <p><b>[statements]</b></p>
    <p><b>Loop</b></p>


<p>The first form
of the <b>Do</b> loop checks for the condition before executing
any code. It is possible that the block of code does not execute
at all if the condition is not met on the first pass. </p>

<p><b>Syntax 2:</b></p>
  <p><b>Do</b></p>
    <p><b>[statements]</b></p>
    <p><b>[Exit Do]</b></p>
    <p><b>[statements]</b></p>
    <p><b>Loop
    [{While | Until}condition]</b></p>


<p>The second form
of the <b>Do</b> loop always executes the code at least once
because it checks for the condition at the end of the loop.</p>

<p>This example
shows how Do...Loop statements can be used. The inner Do...Loop
statement loops 10 times, sets the value of the flag to False,
and exits prematurely using the Exit Do statement (see next
section). The outer loop exits immediately upon checking the
value of the flag:</p>
  <p><b>Check =
    True: Counter = 0 ' Initialize variables.</b></p>
    <p>&nbsp;</p>
    <p><b>Do '
    Outer Loop.</b></p>
    <p><b>Do While
    Counter &lt; 20 ' Inner Loop.</b></p>
    <p><b>Counter =
    Counter + 1 ' Increment Counter.</b></p>
    <p><b>If
    Counter = 10 Then ' If condition is true.</b></p>
    <p><b>Check =
    False ' Set value of flag to False.</b></p>
    <p><b>Exit Do '
    Exit inner loop.</b></p>
    <p><b>End If</b></p>
    <p><b>Loop</b></p>
    <p><b>Loop
    Until Check = False ' Exit outer loop immediately.</b></p>
    
        <p><b>While Wend</b></p>
    


<p>The <b>While
Wend</b> statement is equivalent to the <b>Do While</b> statement
in VB. (It is provided for backwards compatibility with earlier
versions of Basic and should not be used. The <b>Do...Loop</b>
statement provides a more structured and flexible way to perform
looping.) It executes a series of statements as long as a given
condition is True.</p>
  <p><b>While </b><b><i>condition</i></b></p>
    <p><b>[statements]</b></p>
    <p><b>Wend</b></p>
    
        <p><b>Exit</b></p>
    


<p>The <b>Exit</b>
statement is used to break out of a looping structure. When a <b>Exit
Do</b>, <b>Exit For</b>, <b>Exit While</b> or <b>Exit For Each</b>
is encountered within a loop, execution of the macro proceeds to
the line following the <b>Next, Wend</b> or <b>Loop</b> statement
for the current loop.</p>
  
        <p><b>Unconditional
        Branching</b></p>
    


<p>Branching
structures that unconditionally branch to other parts of the
macro are less desirable than other structures because they make
the macro difficult to read and debug. However, there are
occasional needs for them (i.e., error checking) and they are
listed below.</p>
  
        
            <p><b>Goto</b></p>
        
    


<p>The <b>Goto</b>
statement branches unconditionally to the specified line or label
in the current procedure.</p>
  <p><b>GoTo </b><b><i>line</i></b></p>
    
        
            <p><b>GoSub</b></p>
        
    


<p>The <b>GoSub</b>
statement branches unconditionally to the specified line in the
current procedure. When the program encounters a <b>Return</b>
statement, it returns to the line following the <b>GoSub</b>
statement.</p>
  <p><b>GoSub </b><b><i>line</i></b></p>
    <p><b><i>line:</i></b></p>
    <p><b>Return</b></p>
    
        
            <p><b>On Goto,
            On GoSub</b></p>
        
    


<p><b>On Goto</b>
and <b>On GoSub</b> branch to a number of different labels or
line numbers based on the value of the expression (a number
between 1 and 255). The difference between the two is that <b>On
GoSub</b> returns to the line following the statement when it
encounters a <b>Return</b> statement, while <b>On Goto</b> does
not.</p>
  <p><b>On </b><b><i>expression</i></b><b>
    Goto </b><b><i>destination</i></b></p>
    <p><b>On </b><b><i>expression</i></b><b>
    GoSub </b><b><i>destination</i></b></p>
    
        <p><b>Nesting
        Control Structures</b></p>
    


<p>It is legal to
nest control structures within other control structures. It is
important to remember to close interior structures before closing
external structures. It is possible to close more than one
structure with the same Next statement (e.g., Next X, Y, Z). They
will move from the inner most loop to the outer most. </p>

<p><a name="_Toc307792510"><H1><b><i>Lesson 3 Exercises</i></a></H1>
<ol>
  <li>Divide
    into groups of two. You may either work together to write one
    procedure or use each other as a resource while working
    independently. Write a procedure that does the following:</li>
    
        
            <p>Create
            a 2 by 10 array (ArrayName(1 to 2, 1 to 10)).</p>
            <p>Using
            a Do Loop, If statements and For Next loops, place <i>unique</i>
            random numbers between 1 and 10 in the first column
            of the array (ArrayName(1, 1-10). (The array should
            contain all the numbers between 1 and 10, but in a
            random order).</p>
            <p>Using
            a For Next and a Select Case, assign one of these
            three strings to the second column (ArrayName(2,
            1-10)) based on the value in the first: <br>
            <br>
            If less than 5 then &quot;Smaller&quot;<br>
            If equal to 5 then &quot;Equal&quot;<br>
            If greater than 5 then &quot;Bigger&quot;</p>
            <p>Using
            a For Next loop, display in a message box the number
            and the corresponding string for each element where
            the random number is even.</p>
        
    
    <p><font color="#FF0000" size="1" face="Verdana"><b>Sub
    GenerateArrayValues()</b></p>
    <p><b>Dim
    MyArray(1 To 2, 1 To 10)</b><b><i>'Array declaration</i></b></p>
    <p><b>Dim
    Counter As Integer</b><b><i> 'Counts the number of times a
    value is assigned to the array</i></b></p>
    <p><b>Dim
    RandNum As Integer</b><b><i> 'Stores the random number</i></b></p>
    <p><b>Dim Used
    As Boolean </b><b><i>'Indicates if number has already been
    assigned to the array</i></b></p>
    <p><b>Dim i As
    Integer </b><b><i>'Used as a loop counter in various areas of
    the procedure</i></b></p>
    <p><b>Counter =
    0</b></p>
    <p><b>Randomize
    </b><b><i>'Tells VB to use system timer for seed value when
    generating</i></b></p>
    <p><b><i>'
    random numbers</i></b></p>
    <p><b><i>' This
    part of the procedure generates the random numbers and
    assigns</i></b></p>
    <p><b><i>' them
    to the array</i></b></p>
    <p><b>Do While
    Counter &lt; 10 </b><b><i>'Loop until all values are assigned</i></b></p>
    <p><b>Used =
    False</b></p>
    <p><b>RandNum =
    Int((10 - 1 + 1) * Rnd + 1)</b><b><i> 'Generates random
    number between 1-10 (see Help)</i></b></p>
    <p><b>If
    Counter = 0 Then </b><b><i>'If first time, assigns number to
    first element</i></b></p>
    <p><b>MyArray(1,
    1) = RandNum </b><b><i>' and increments counter</i></b></p>
    <p><b>Counter =
    Counter + 1</b></p>
    <p><b>Else </b><b><i>'If
    it's not the first time through the loop</i></b></p>
    <p><b>For i = 1
    To Counter </b><b><i>'For every number in the array</i></b></p>
    <p><b>If
    RandNum = MyArray(1, i) Then </b><b><i>'Compare new number to
    numbers already assigned</i></b></p>
    <p><b>Used =
    True </b><b><i>'If found, then set the flag and exit the loop</i></b></p>
    <p><b>Exit For</b></p>
    <p><b>End If</b></p>
    <p><b>Next i</b></p>
    <p><b>If Used =
    False Then </b><b><i>'If the number does not exist in the
    array</i></b></p>
    <p><b>MyArray(1,
    Counter + 1) = RandNum</b><b><i> ' then assign it to the next
    element</i></b></p>
    <p><b>Counter =
    Counter + 1 </b><b><i>' and increment the counter</i></b></p>
    <p><b>End If</b></p>
    <p><b>End If</b></p>
    <p><b>Loop</b></p>
    <p>&nbsp;</p>
    <p><b><i>' This
    part of the procedure assigns the strings to the array based</i></b></p>
    <p><b><i>' on
    the value</i></b></p>
    <p>&nbsp;</p>
    <p><b>For i = 1
    To 10 </b><b><i>'For each number in the array</i></b></p>
    <p><b>Select
    Case MyArray(1, i) </b><b><i>' compare the value and assign
    the appropriate</i></b></p>
    <p><b>Case Is
    &lt; 5 </b><b><i>' string value</i></b></p>
    <p><b>MyArray(2,
    i) = &quot;Smaller&quot;</b></p>
    <p><b>Case Is =
    5</b></p>
    <p><b>MyArray(2,
    i) = &quot;Equal&quot;</b></p>
    <p><b>Case Else</b></p>
    <p><b>MyArray(2,
    i) = &quot;Bigger&quot;</b></p>
    <p><b>End
    Select</b></p>
    <p><b>Next i</b></p>
    <p><b><i>' The
    part of the procedure displays the values that are even</i></b></p>
    <p><b>For i = 1
    To 10 </b><b><i>'For each number array, see if the remainder</i></b></p>
    <p><b>If
    MyArray(1, i) Mod 2 = 0 Then </b><b><i>' is zero when divided
    by two (= even number)</i></b></p>
    <p><b>MsgBox
    &quot;Number = &quot; &amp; MyArray(1, i) &amp; &quot; String
    = &quot; &amp; MyArray(2, i)</b></p>
    <p><b>End If</b></p>
    <p><b>Next i</b></p>
    <p><b>End Sub</b></p></font></ol>
</BODY>
</html>

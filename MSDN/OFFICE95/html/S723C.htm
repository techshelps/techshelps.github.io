<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Range Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Range Object</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Represents a cell, a row, a column, a selection of cells containing one or more contiguous blocks of cells, or a 3-D range.</P>
<P CLASS="h"><B>Accessors</B></P>
<P CLASS="t">Here are several examples of how to use the most important accessor properties and methods of the <B>Range</B> object.</P>
<H4><A NAME="sec0"></A>Range Method</H4><P CLASS="t">Use the <B>Range</B> method to return a single cell or range of cells. The following example places the value of cell A1 in cell A5.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("A5").Value = _
    Worksheets("Sheet1").Range("A1").Value
</FONT></PRE>
<P CLASS="t">The following example fills the range A1:H8 with random numbers by setting the formula for each cell in the range. When it is used without an object qualifier (an object to the left of the period), the <B>Range</B> method returns a range on the active sheet. If the active sheet is not a worksheet, the method will fail. Use the <B>Activate</B> method to activate a worksheet before you use the <B>Range</B> method without an explicit object qualifier.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("sheet1").Activate
Range("A1:H8").Formula = "=rand()"    'Range is on the active sheet
</FONT></PRE>
<P CLASS="t">The following example clears the contents of the range named "Criteria."</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets(1).Range("criteria").ClearContents
</FONT></PRE>
<P CLASS="t">If you use a text argument for the range address, you must specify the address in A1-style notation (you cannot use R1C1-style notation).</P>
<H4><A NAME="sec1"></A>Cells Method</H4><P CLASS="t">Use the <B>Cells</B> method to return a single cell by specifying the row and column. The following example sets the value of cell A1 to 24.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets(1).Cells(1, 1).Value = 24
</FONT></PRE>
<P CLASS="t">The following example sets the formula for cell A2.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">ActiveSheet.Cells(2, 1).Formula = "=sum(b1:b5)"
</FONT></PRE>
<P CLASS="t">Although you can also use Range("A1") to return cell A1, there may be times when the <B>Cells</B> method is more convenient because you can use a variable for the row or column. The following example creates column and row headings on the worksheet named "Sheet1." Notice that once the worksheet has been activated, the <B>Cells</B> method can be used without an explicit sheet declaration (it returns a cell on the active sheet).</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub SetUpTable()
Worksheets("sheet1").Activate
For theYear = 1 To 5
    Cells(1, theYear + 1).Value = 1990 + theYear
Next theYear
'
For theQuarter = 1 To 4
    Cells(theQuarter + 1, 1).Value = "Q" &amp; theQuarter
Next theQuarter
End Sub
</FONT></PRE>
<P CLASS="t">Although you could use Visual Basic string functions to alter A1-style references, it's much easier (and much better programming practice) to use the Cells(1, 1) notation.</P>
<H4><A NAME="sec2"></A>Cells and Range Methods</H4><P CLASS="t">You can also use the <B>Cells</B> method to return part of a range by specifying the row and column relative to the upper-left corner of the range. The following example sets the formula for cell C5.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets(1).Range("c5:c10").cells(1,1).formula = "=rand()"
</FONT></PRE>
<P CLASS="t">You can also use the <B>Cells</B> method inside the <B>Range</B> method to specify the start and end cells for the range. The following example sets the border line style for cells A1:J10.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">With Worksheets(1)
    .Range(.Cells(1, 1), .Cells(10, 10)).Borders.LineStyle = xlThick
End With
</FONT></PRE>
<P CLASS="t">Notice the period in front of each occurrence of the <B>Cells</B> method. The period is required to apply the result of the preceding <B>With</B> statement to the <B>Cells</B> method—in this case to indicate that the cells are on worksheet one (without the period, the <B>Cells</B> method would return cells on the active sheet).</P>
<H4><A NAME="sec3"></A>Offset Method</H4><P CLASS="t">The <B>Offset</B> method returns a range at a specified offset to another range. The following example selects the cell three rows down and one column to the right from the upper-left cell of the current selection. You cannot select a cell that is not on the active sheet, so you must first activate the worksheet.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("sheet1").Activate  'can't select unless the sheet is active
Selection.Offset(3, 1).Range("a1").Select
</FONT></PRE>
<H4><A NAME="sec4"></A>Union Method</H4><P CLASS="t">Use the <B>Union</B> method and <B>Range</B> method to return multi-area ranges (ranges composed of two or more contiguous blocks of cells). The following example creates an object called myMultiAreaRange, defines it as the union of ranges A1:B2 and C3:D4, and then selects it.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim r1, r2, myMultiAreaRange As Range
Worksheets("sheet1").Activate
Set r1 = Range("A1:B2")
Set r2 = Range("C3:D4")
Set myMultiAreaRange = Union(r1, r2)
myMultiAreaRange.Select
</FONT></PRE>
<P CLASS="t">If you work with selections containing more than one area, the <B>Areas</B> method is very useful. It divides a multi-area selection  into individual <B>Range</B> objects and then returns them as a collection. You can use the <B>Count</B> property on the returned collection to check for a selection containing more than one area, as shown in the following example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub NoMultiAreaSelection()
    numberOfSelectedAreas = Selection.Areas.Count
    If numberOfSelectedAreas &gt; 1 Then
        MsgBox "You cannot carry out this command " &amp; _
            "on multi-area selections"
    End If
End Sub
</FONT></PRE>
<P CLASS="h"><B>Properties</B></P>
<P CLASS="t"><B>AddIndent </B>Property,<B> Application </B>Property,<B> Column </B>Property,<B> ColumnWidth </B>Property,<B> Count </B>Property,<B> Creator </B>Property,<B> CurrentArray </B>Property,<B> CurrentRegion </B>Property,<B> Dependents </B>Property,<B> DirectDependents </B>Property,<B> DirectPrecedents </B>Property,<B> EntireColumn </B>Property,<B> EntireRow </B>Property,<B> Font </B>Property,<B> Formula </B>Property,<B> FormulaArray </B>Property,<B> FormulaHidden </B>Property,<B> FormulaLocal </B>Property,<B> FormulaR1C1 </B>Property,<B> FormulaR1C1Local </B>Property,<B> HasArray </B>Property,<B> HasFormula </B>Property,<B> Height </B>Property,<B> Hidden </B>Property,<B> HorizontalAlignment </B>Property,<B> Interior </B>Property,<B> Left </B>Property,<B> ListHeaderRows </B>Property,<B> LocationInTable </B>Property,<B> Locked </B>Property,<B> Name </B>Property,<B> Next </B>Property,<B> NumberFormat </B>Property,<B> NumberFormatLocal </B>Property,<B> Orientation </B>Property,<B> OutlineLevel </B>Property,<B> PageBreak </B>Property,<B> Parent </B>Property,<B> PivotField </B>Property,<B> PivotItem </B>Property,<B> PivotTable </B>Property,<B> Precedents </B>Property,<B> PrefixCharacter </B>Property,<B> Previous </B>Property,<B> Row </B>Property,<B> RowHeight </B>Property,<B> ShowDetail </B>Property,<B> SoundNote </B>Property,<B> Style </B>Property,<B> Summary </B>Property,<B> Text </B>Property,<B> Top </B>Property,<B> UseStandardHeight </B>Property,<B> UseStandardWidth </B>Property,<B> Value </B>Property,<B> VerticalAlignment </B>Property,<B> Width </B>Property,<B> Worksheet </B>Property,<B> WrapText </B>Property.</P>
<P CLASS="h"><B>Methods</B></P>
<P CLASS="t"><B>Activate </B>Method,<B> Address </B>Method,<B> AddressLocal </B>Method,<B> AdvancedFilter </B>Method,<B> ApplyNames </B>Method,<B> ApplyOutlineStyles </B>Method,<B> Areas </B>Method,<B> AutoComplete </B>Method,<B> AutoFill </B>Method,<B> AutoFilter </B>Method,<B> AutoFit </B>Method,<B> AutoFormat </B>Method<B> </B>(<B>Range </B>Object),<B> AutoOutline </B>Method,<B> BorderAround </B>Method,<B> Borders </B>Method,<B> Calculate </B>Method,<B> Cells </B>Method,<B> Characters </B>Method,<B> CheckSpelling </B>Method,<B> Clear </B>Method,<B> ClearContents </B>Method,<B> ClearFormats </B>Method,<B> ClearNotes </B>Method,<B> ClearOutline </B>Method,<B> ColumnDifferences </B>Method,<B> Columns </B>Method,<B> Consolidate </B>Method,<B> Copy </B>Method,<B> CopyFromRecordset </B>Method,<B> CopyPicture </B>Method,<B> CreateNames </B>Method,<B> CreatePublisher </B>Method,<B> Cut </B>Method,<B> DataSeries </B>Method,<B> Delete </B>Method,<B> DialogBox </B>Method,<B> End </B>Method,<B> FillDown </B>Method,<B> FillLeft </B>Method,<B> FillRight </B>Method,<B> FillUp </B>Method,<B> Find </B>Method,<B> FindNext </B>Method,<B> FindPrevious </B>Method,<B> FunctionWizard </B>Method,<B> GoalSeek </B>Method,<B> Group </B>Method,<B> Insert </B>Method,<B> Item </B>Method,<B> Justify </B>Method,<B> ListNames </B>Method,<B> NavigateArrow </B>Method,<B> NoteText </B>Method,<B> Offset </B>Method,<B> Parse </B>Method,<B> PasteSpecial </B>Method<B> </B>(<B>Range </B>Object),<B> PrintOut </B>Method,<B> PrintPreview </B>Method,<B> Range </B>Method,<B> RemoveSubtotal </B>Method,<B> Replace </B>Method,<B> Resize </B>Method,<B> RowDifferences </B>Method,<B> Rows </B>Method,<B> Run </B>Method,<B> Select </B>Method,<B> Show </B>Method,<B> ShowDependents </B>Method,<B> ShowErrors </B>Method,<B> ShowPrecedents </B>Method,<B> Sort </B>Method,<B> SortSpecial </B>Method,<B> SpecialCells </B>Method,<B> SubscribeTo </B>Method,<B> Subtotal </B>Method,<B> Table </B>Method,<B> TextToColumns </B>Method,<B> Ungroup </B>Method.</P>
<P></P></FONT>
</FONT></BODY></HTML>

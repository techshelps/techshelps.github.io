<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Helpful Hints for Add-Ins</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Helpful Hints for Add-Ins</H2><P CLASS="t">Give the add-in a name and description by filling in the file properties (file summary information) for the source workbook.  The title field appears in the add-in manager's available add-ins list, and the comments field becomes the description.  This is shown in Figure 12 below.  </P>
<P CLASS="t"><img src="20517.gif"></P>
<P CLASS="t"><img src="20518.gif"></P>
<P>Figure 12.  Setting up the add-in title and description</P>
<P CLASS="t">If add-in code accesses objects within its own workbook such as dialog sheets or internal worksheets, be sure to declare object references using the syntax </P>
<P>ThisWorkbook.DialogSheets("Wiz1") </P>
<P CLASS="t">rather than </P>
<P>Application.DialogSheets("Wiz1")<I> </I>or<I> </I>ActiveWorkbook.DialogSheets("Wiz1").</P>
<P CLASS="t">Using the reference style ActiveWorkbook.DialogSheets works as long as the active workbook actually contains the dialog, as is probably the case while writing the application.  However it won't work after making the workbook into an add-in since by definition an add-in can't be the active workbook.  </P>
<P CLASS="t">Code should convert to an add-in quite smoothly by following the guidelines above.  If there are any problems try adding Debug.Print or MsgBox statements to the code, or write data to a visible worksheet as a way of tracing errors.  </P>
<P CLASS="t">During the process of debugging an add-in there's the need to create and install new versions.  If the add-in doesn't seem to behave properly when updating to a new version be sure to clear the check box for the add-in using the Tools/Add-Ins dialog, then delete or rename the old add-in file, make a new version, close and exit Excel, then restart it and load your new version.  If this becomes a frequent process, create a small utility routine in the add-in to unload it from memory:  </P>
<P>Sub RemoveMyAddIn</P>
<P>    ThisWorkbook.Close</P>
<P>End Sub</P>
<P CLASS="t">Assign this routine to a menu item or toolbar button.  Closing a file through the add-in manager takes some time, but the add-in can close itself and this process is very fast.  When ready to update the add-in the above routine can quickly remove it from memory and install a new version without leaving Excel.  Use this method only for convenience while debugging; don't include it in the finished version.  </P>
<P CLASS="t">Comments in code are saved in the add-in file.  If there's any concern about security or reducing the file size, remove all comments from code before making the final version.  A good way to do this is to prefix all comments with two single quotes, as in the example below.  </P>
<P>''These comments will be deleted</P>
<P>''when the final version of the add-in is created</P>
<P>Sub Main()</P>
<P CLASS="t">Just before making the final version enable pattern matching in the Edit/Replace command and use it to replace all occurrences of  ''*  with null text.  </P></FONT>
</FONT></BODY></HTML>

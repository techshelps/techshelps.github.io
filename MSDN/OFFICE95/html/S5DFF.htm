<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying Variable Scope and Lifetime</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Specifying Variable Scope and Lifetime</H2><P CLASS="t">When you declare a variable within a procedure, only code within that procedure can access or change the value of that variable — that is, the variable has a <I>scope</I> that's local to that procedure. Sometimes, however, you need to use a variable with a broader scope, such as one whose value is available to all the procedures within the same module, or even to all the procedures in your entire application. Visual Basic allows you to specify the scope of a variable when you declare it.</P>
<P CLASS="t">Depending on how it's declared, a variable is scoped in one of three ways, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="48pt" VALIGN="TOP"><COL WIDTH="300pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Scope</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Declaration</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Procedure</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Dim</B> or <B>Static </B>within the procedure</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Private</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Dim</B> or <B>Private </B>at the top of the module</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Public</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Public </B>at the top of the module</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">It's generally a good idea to use the narrowest possible scope for your variables. For example, if you're using a temporary variable inside a procedure, use procedure (local) scope instead of private scope or public scope. Limiting the scope of your variables makes your macros more modular and helps reduce bugs.</P>
<P></P>
<P CLASS="t">A variable's <I>lifetime</I> is the time during which Visual Basic preserves the value in the variable. The values in private and public variables are preserved while the workbook is open, unless you edit a Visual Basic module in that workbook. When you edit a Visual Basic module, all modules in that workbook are recompiled and all variables are reset. </P>
<P CLASS="t">Although variables declared inside a procedure have the same scope level whether they're declared with <B>Dim</B> or <B>Static</B>, they have different lifetimes. Local variables declared with <B>Static</B> exist the entire time that the workbook where they're declared is open; that is, the variables retain their values between calls to the procedure. Local variables declared with <B>Dim</B> exist only while the procedure where they're declared is running. When a procedure ends, the values of its local variables aren't preserved and the memory used by the local variables is reclaimed. The next time the procedure runs, all its local variables are reinitialized.</P>
<H3><A NAME="sec0"></A>Procedure-Level Variables</H3><P CLASS="t">Procedure-level (or <I>local</I>) variables are recognized only in the procedure where they're declared. Local variables are a good choice for any kind of temporary calculation. All implicitly declared variables have local scope. You declare local variables explicitly by using the <B>Dim</B> or <B>Static</B> keyword inside the procedure, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub DoTheWork
    Dim intTemp As Integer
    Static intPermanent As Integer
.
.
.
End Sub
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">Although you can use local variables with the same name in several procedures, it's usually best to use unique variable names. Using the same name in several procedures can make your macro harder to debug.</P>
<P></P>
<H4><A NAME="sec1"></A>Preserving the Value of a Local Variable</H4><P CLASS="t">If you want to preserve the value stored in a local variable between calls to the procedure that contains it, you should declare the variable using the <B>Static</B> keyword, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Static depth
</FONT></PRE>
<P CLASS="t">The following function calculates a running total by adding a new value to the total of previous values stored in the static variable accumulate.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Function RunningTotal(num)
    Static accumulate
    accumulate = accumulate + num
    RunningTotal = accumulate
End Function
</FONT></PRE>
<P CLASS="t">If accumulate<I> </I>were declared with <B>Dim</B> instead of <B>Static</B>, the previously accumulated values would not be preserved across calls to the function, and the function would simply return the value it was called with.</P>
<P CLASS="t">You could produce the same result by declaring accumulate<I> </I>in the declarations section of the module, making it available to any procedure in the module. After you've changed the scope of a variable in this way, however, the procedure no longer has exclusive access to it. Because other procedures can access and change the value of the variable, the running totals might be unreliable and the macro is more difficult to maintain.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">Use static variables if you need to preserve the value of a local variable each time a procedure is called. For example, you could use a static variable to record the number of times the procedure has been called or to record a running total, as shown in the preceding example.</P>
<P></P>
<H4><A NAME="sec2"></A>Declaring All Local Variables as Static</H4><P CLASS="t">To make <I>all</I> local variables in a procedure static, place the <B>Static</B> keyword at the beginning of a procedure heading, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Static Function RunningTotal(num)
</FONT></PRE>
<P CLASS="t">This makes all local variables in the procedure static, regardless of whether they're declared explicitly with <B>Static</B> or <B>Dim</B> or declared implicitly. You can place <B>Static</B> in front of any <B>Sub</B> or <B>Function</B> procedure heading.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">After you edit a module, Visual Basic recompiles all modules in the workbook and resets all variables the next time you run any Visual Basic procedure or function. If you need to preserve values when the workbook is compiled or saved, use a hidden worksheet to store the values.</P>
<P></P>
<H3><A NAME="sec3"></A>Private Variables</H3><P CLASS="t">Private variables are available to all the procedures in the module where they're declared, but not to code in other modules. You create private variables by declaring them with <B>Dim</B> or <B>Private</B> in the declarations section of a module (the top section, above procedure definitions), as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim intTemp As Integer
Private intTemp2 As Integer</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">Because variables declared at the top of a module are private by default, there is no difference between variables declared with <B>Private</B> and those declared with <B>Dim</B>. However, <B>Private</B> is preferred because it readily contrasts with <B>Public</B> and makes your macros easier to read. You cannot declare variables in a procedure using the <B>Private</B> keyword.</P>
<P></P>
<H3><A NAME="sec4"></A>Public Variables</H3><P CLASS="t">Public variables are available to every procedure in every module in the workbook where they're declared, as well as in all other workbooks that contain a reference link to the workbook where those variables are declared. (For information about creating a reference link to a workbook, see Chapter 1, "Modules and Procedures.")</P>
<P CLASS="t">You use the <B>Public</B> keyword to declare a public variable. Like private variables, public variables are declared in the declarations section at the top of the module; you cannot declare private or public variables inside a procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Public intX As Integer
</FONT></PRE>
<P CLASS="t">A public variable exists and retains its value from the time a value is assigned to the variable until the workbook closes (or until you edit a procedure, thus causing Visual Basic to recompile).</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">To create a variable that's available to all modules in a given workbook but not to any other workbooks, make the variable public by declaring it with the <B>Public</B> keyword, but make the module itself private to the workbook that contains it by using the <B>Option Private Module</B> statement in the module.</P>
<P></P></FONT>
</FONT></BODY></HTML>

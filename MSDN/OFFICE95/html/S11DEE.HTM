<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Public Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec264"></A>Public Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec265"></A>Description</H2><P>Used at module level to declare public variables and allocate storage space.</P>
<H2><A NAME="sec266"></A>Syntax</H2><P><B>Public</B> <I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As </B>[<B>New</B>] <I>type</I>][<B>, </B><I>varname</I>[<B>(</B>[<I>subscripts</I>]<B>)</B>][<B>As</B>[<B>New</B>] <I>type</I>]] <B>. . .</B></P>
<P>The <B>Public</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>subscripts</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Dimensions of an array variable; up to 60 multiple dimensions may be declared. The argument <I>subscripts</I> uses the following syntax:</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">[<I>lower</I> <B>To</B>] <I>upper </I>[<B>,</B>[<I>lower</I> <B>To</B>] <I>upper</I>] <B>. . .</B></P>
<P CLASS="t">When not explicitly stated in <I>lower</I>, the lower bound of an array is controlled by the <B>Option</B> <B>Base</B> statement. The lower bound is zero if no <B>Option</B> <B>Base</B> statement is present.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>New</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Keyword used to indicate that a declared object variable is a new instance of a Visual Basic object or an externally creatable OLE Automation object. The <B>New</B> keyword can’t be used to create variables of any intrinsic data type and can’t be used to create dependent OLE Automation objects.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the variable; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(for variable-length strings), <B>String</B> * <I>length </I>(for fixed-length strings), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type. Use a separate <B>As</B> <I>type</I> clause for each variable being defined.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec267"></A>Remarks</H2><P>Variables declared using the <B>Public</B> statement are available to all procedures in all modules in all applications unless <B>Option</B> <B>Private Module</B> is in effect; in which case, the variables are public only within the project in which they reside.</P>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P><B>Caution</B>   The <B>Public</B> statement can’t be used in a class module to declare a fixed-length string variable.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P>Use the <B>Public</B> statement to declare the data type of a variable. For example, the following statement declares a variable as an <B>Integer</B>:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Public NumberOfEmployees As Integer
</PRE>
<P CLASS="t">  </P>
<P>Also use a <B>Public</B> statement to declare the object type of a variable. The following declares a variable for a new instance of a worksheet.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Public X As New Worksheet
</PRE>
<P CLASS="t">  </P>
<P>If the <B>New</B> keyword is not used when declaring an object variable, no instance of the object actually exists. A variable that refers to an object must be assigned an existing object using the <B>Set</B> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <B>Nothing</B>, which indicates that it does not refer to any particular instance of an object.</P>
<P>You can also use the <B>Public</B> statement with empty parentheses to declare a dynamic array. After declaring a dynamic array, use the <B>ReDim</B> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <B>Private</B>, <B>Public</B>, or <B>Dim</B> statement, an error occurs.</P>
<P>If you do not specify a data type or object type and there is no <B>Def</B><I>type</I> statement in the module, the variable is <B>Variant</B> by default.</P>
<P>When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string, and a fixed-length string is filled with zeros. <B>Variant</B> variables are initialized to <B>Empty</B>. Each element of a user-defined type variable is initialized as if it were a separate variable.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Tip</B>   When you use the <B>Public</B> statement in a procedure, it is a generally accepted programming practice to put the <B>Public</B> statement at the beginning of the procedure.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec268"></A>See Also</H2><P><B>Array</B> Function, <B>Const</B> Statement, <B>Dim</B> Statement, <B>Option</B> <B>Base</B> Statement, <B>Option</B> <B>Private</B> Statement, <B>Private</B> Statement, <B>Property</B> <B>Get</B> Statement, <B>Property</B> <B>Let</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>ReDim</B> Statement, <B>Set</B> Statement, <B>Static</B> Statement, <B>Type</B> Statement.</P>
<H2><A NAME="sec269"></A>Specifics (Microsoft Access)</H2><P>By default, module-level variables are private to that module. You must explicitly declare a variable as public with the <B>Public</B> statement.</P>
<P>In a standard module, module-level variables declared with the <B>Public</B> statement are available to all other procedures in all modules in all Microsoft Access databases. However, they are not visible in the Object Browser, and they are not available to any other applications other than Microsoft Access.</P>
<P>If a public variable is declared in a standard module that contains the <B>Option Private</B> statement, the variable is available to all procedures in the current database, but not to procedures in other databases.</P>
<P>A public variable declared in a form module or report module is visible to all procedures in the current database, but not to procedures in other databases. To refer to a public variable declared in a form or report module from another module, you must qualify the variable with the class name of the form or report.</P>
<P>For example, if you declare the public variable varPublic in the module of a form called OrderForm, you can refer to that variable from a standard module as follows.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Form_OrderForm.varPublic
</PRE>
<P CLASS="t">  </P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The <B>Public</B> statement can’t be used in a form or report module to declare a fixed-length string or an array.</P>
<P CLASS="t">  </P>
<P></P>
<P></P>
<H2><A NAME="sec270"></A>Example</H2><P>This example uses the <B>Public</B> statement at the module level (General section) of a standard module to explicitly declare variables as public; that is, they are available to all procedures in all modules in all applications unless <B>Option Private</B> <B>Module</B> is in effect.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Public Number As Integer                        ' Public Integer variable.NameArray(1 To 5) As String            ' Public array variable.
' Multiple declarations, two Variants and one Integer, all Public.MyVar, YourVar, ThisVar As Integer
</PRE>
<P CLASS="t">  </P>
<P>The following example uses the <B>Public</B> statement at the module level to explicitly declare variables as public. <B>Public</B> variables are available to all procedures in all modules within the current database. If they are declared in a standard module, then they are also available to a referencing database.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Public intNum As IntegerobjApplication As Object
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

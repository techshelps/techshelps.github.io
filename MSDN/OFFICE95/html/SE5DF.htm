<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Get Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Property Get Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Declares the name, arguments, and code that form the body of a <B>Property</B> procedure, which gets the value of a property.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn">[<B>Public</B> | <B>Private</B>][<B>Static</B>] <B>Property</B> <B>Get</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>][<B>As</B> <I>type</I>]<BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR>    [<B>Exit Property</B>] <BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR><B>End Property</B></P>
<P CLASS="t">The <B>Property Get</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Public</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Get</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement) the procedure is not available outside the project.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Private</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Get</B> procedure is accessible only to other procedures in the module where it is declared.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Static</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the <B>Property</B> <B>Get</B> procedure's local variables are preserved between calls. The <B>Static</B> attribute doesn't affect variables that are declared outside the <B>Property Get</B> procedure, even if they are used in the procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>name</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the <B>Property</B> <B>Get</B> procedure; follows standard variable naming conventions, except that the name can be the same as a <B>Property</B> <B>Let</B> or <B>Property Set</B> procedure in the same module.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>arglist</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">List of variables representing arguments that are passed to the <B>Property</B> <B>Get</B> procedure when it is called. Multiple variables are separated by commas.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the value returned by the <B>Property</B> <B>Get</B> procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String (</B>except fixed length<B>)</B>,<B> Object</B>, or <B>Variant</B>. Arrays of any type can't be returned, but a <B>Variant</B> containing an array can.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>statements</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any group of statements to be executed within the body of the <B>Property</B> <B>Get</B> procedure.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>expression</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Value of the property returned by the procedure defined by the <B>Property Get</B> statement.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The <I>arglist</I> argument has the following syntax and parts:</P>
<P CLASS="syn">[<B>Optional</B>][<B>ByVal</B> | <B>ByRef</B>] <I>varname</I>[<B>( )</B>][<B>As</B> <I>type</I>] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>Optional</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that an argument is not required. If used, all subsequent arguments in <I>arglist</I> must also be optional and declared using the <B>Optional</B> keyword. All <B>Optional</B> arguments must be <B>Variant</B>.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByVal</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by value.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>ByRef</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Indicates that the argument is passed by reference.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>varname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Name of the variable representing the argument; follows standard variable naming conventions.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>type</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Data type of the argument passed to the <B>Property Get</B> procedure; may be <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Property</B> procedures are <B>Public</B> by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P CLASS="t">All executable code must be in procedures. You can't define a <B>Property</B> <B>Get</B> procedure inside another <B>Sub</B>, <B>Function</B>, or <B>Property</B> procedure.</P>
<P CLASS="t">The <B>Exit Property </B>keywords cause an immediate exit from a <B>Property Get</B> procedure. Program execution continues with the statement following the statement that called the <B>Property</B> <B>Get</B> procedure. Any number of <B>Exit Property</B> statements can appear anywhere in a <B>Property</B> <B>Get </B>procedure.</P>
<P CLASS="t">Like a <B>Sub</B> and <B>Property Let</B> procedure, a <B>Property Get</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <B>Sub</B> or <B>Property Let</B> procedure, a <B>Property Get</B> procedure can be used on the right-hand side of an expression in the same way you use a <B>Function</B> or a property name when you want to return the value of a property.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Function</B> Statement, <B>Property</B> <B>Let</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Sub</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Property Get</B> Statement to define a property procedure that gets the value of a property that identifies,  as a string, the current color of a pen in a drawing package:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim CurrentColor As Integer
Const BLACK = 0, RED = 1, GREEN = 2, BLUE = 3

' Returns the current color of the pen as a string
Property Get PenColor() As String
    Select Case CurrentColor
        Case RED
            PenColor = "Red"
        Case GREEN
            PenColor = "Green"
        Case BLUE
            PenColor = "Blue"
    End Select
End Property

' The following line gets the color of the pen 
' calling the Property Get procedure.
ColorName = PenColor()
</FONT></PRE></FONT>
</FONT></BODY></HTML>

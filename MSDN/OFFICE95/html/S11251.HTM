<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1>Application Object</H1><P CLASS="t">  </P>
<H2>Description</H2><P CLASS="t">The <B>Application</B> object refers to the active Microsoft Access application.</P>
<H2>Remarks</H2><P CLASS="t">The <B>Application</B> object contains all Microsoft Access objects and collections, including the <B>Forms</B> collection, the <B>Reports</B> collection, the <B>Screen</B> object, and the <B>DoCmd</B> object.</P>
<P CLASS="t">You can use the <B>Application</B> object to apply methods or property settings to the entire Microsoft Access application. For example, you can use the <B>SetOption</B> method of the <B>Application</B> object to set database options from Visual Basic. The following example shows how you can set the Show Status Bar option.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Application.SetOption "Show Status Bar", True
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">Microsoft Access is an OLE Automation server. You can manipulate Microsoft Access objects from another application that is an OLE Automation controller. To do this, you use the <B>Application</B> object.</P>
<P CLASS="t">For example, Microsoft Visual Basic is an OLE Automation controller. You can open a Microsoft Access database from Microsoft Visual Basic and work with its objects. From Microsoft Visual Basic, first create a reference to Microsoft Access. Then create a new instance of the <B>Application</B> object and point an object variable to it, as in the following example.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim appAccess As Access.ApplicationappAccess = CreateObject("Access.Application.7")
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">Once you have created a new instance of the Microsoft Access <B>Application</B> object, you can open a database or create a new database, using either the <B>OpenCurrentDatabase</B> method or the <B>NewCurrentDatabase</B> method. You can then set the properties of the <B>Application</B> object and call its methods.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P CLASS="nt"><B>Note</B>   If you are creating an instance of the Microsoft Access <B>Application</B> object from Microsoft Excel, you must declare the object variable as type <B>Object</B>, as in the following example.</P>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim appAccess As ObjectappAccess = CreateObject("Access.Application.7")</PRE>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P CLASS="t">You can also manipulate other Microsoft Access objects through the <B>Application</B> object. For example, using the <B>OpenForm</B> method of the Microsoft Access <B>DoCmd</B> object, you can open a Microsoft Access form from Microsoft Excel.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>appAccess.DoCmd.OpenForm "OrderForm"</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE></PRE>
<P CLASS="t">  </P>
<P CLASS="t">For more information on creating a reference and controlling objects by OLE Automation, see the documentation for the application that is acting as the OLE Automation controller.</P>
<H2>Properties</H2><P CLASS="t"><B>DBEngine</B> Property.</P>
<H2>Methods</H2><P CLASS="t"><B>BuildCriteria</B> Method; <B>CloseCurrentDatabase</B> Method; <B>DefaultWorkspaceClone</B> Method; <B>Echo</B> Method; <B>GetOption</B>, <B>SetOption</B> Methods; <B>NewCurrentDatabase</B> Method; <B>OpenCurrentDatabase</B> Method; <B>Quit</B> Method; <B>RefreshTitleBar</B> Method; <B>Run</B> Method.</P>
<H2>See Also</H2><P CLASS="t"><B>CreateObject</B> Function, <B>DBEngine</B> Object, <B>DoCmd</B> Object, <B>Forms</B> Collection, <B>GetObject</B> Function, <B>Reports</B> Collection, <B>Screen</B> Object.</P>
<H2>Example</H2><P CLASS="t">The following example prints some current property settings of the <B>Application</B> object, sets an option, and then quits the application, saving all objects.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub ApplicationInformation()
    ' Print name and type of current object.
    Debug.Print Application.CurrentObjectName
    Debug.Print Application.CurrentObjectType
    ' Set Show Hidden Objects option.
    Application.SetOption "Show Hidden Objects", True
    ' Quit Microsoft Access, saving all objects.
    Application.Quit acSaveYesSub</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE></PRE>
<P CLASS="t">  </P>
<P CLASS="t">The next example shows how to use Microsoft Access as an OLE Automation server. From Microsoft Visual Basic or another application that acts as an OLE Automation controller, create a reference to Microsoft Access by clicking References on the Tools menu. Select the check box next to Microsoft Access For Windows 95. Then enter the following code in a Visual Basic module within that application.</P>
<P CLASS="t">This procedure creates a new instance of the <B>Application</B> object and opens a new database in the Microsoft Access Database window. It then creates a new form in that database.</P>
<P CLASS="t">Note that an instance of Microsoft Access will close when the variable pointing to the <B>Application</B> object goes out of scope. To prevent Microsoft Access from closing when the procedure has finished running, the variable representing the <B>Application</B> object is declared at the module level in the example below.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' Declare object variable in Declarations section of module.appAccess As Access.Application</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>NewAccessDB()
    ' Declare Database variable and Microsoft Access Form variable.
    Dim dbs As Database, frm As Access.Form

    ' Return instance of Application object.</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>    Set appAccess = CreateObject("Access.Application.7")
    ' Create new database in Microsoft Access window.
    appAccess.NewCurrentDatabase("Newdb.mdb")
    ' Create new Microsoft Access form in Design view.
    set frm = appAccess.CreateForm
    ' Restore form window.
    appAccess.DoCmd.RestoreSub
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

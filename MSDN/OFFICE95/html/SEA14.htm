<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Minimizing the Use of Variant Variables</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Minimizing the Use of Variant Variables</H1><P CLASS="t">Although you may find it convenient to use <B>Variant</B> variables in your code, Visual Basic requires more time to process a value stored in a Variant variable than it needs to process a value stored in a variable declared with an explicit data type. Your code can perform mathematical computations that don't involve fractional values faster if you use <B>Integer</B> or <B>Long</B> variables rather than <B>Variant</B> variables. <B>Integer</B> or <B>Long</B> variables are also the best choice for the index variable in <B>For...Next</B> loops. The speed you gain using explicit variable types can come at the expense of flexibility. For example, when using explicit data types, you may encounter cases of overflow that <B>Variant</B> variables handle automatically.</P>
<P CLASS="t">For more information about data types, see Chapter 2, "Variables, Constants, and Data Types."</P></FONT>
</FONT></BODY></HTML>

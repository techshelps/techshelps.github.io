<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 1: Starting, Activating, and Closing Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 1: Starting, Activating,
and Closing Applications</font></H1>
  <p><b>Lesson
    Objectives</b></font></p>
    
        
            <p>Upon
            completion of this lesson, the participant will be
            able to:</font></p>
        
        <ul>
            <li>Describe
                and demonstrate how to activate an application
                via a macro.</font></li>
            <li>Describe
                and demonstrate how to maximize or minimize an
                application via a macro.</font></li>
            <li>Describe
                and demonstrate how to start an application via a
                macro.</font></li>
            <li>Describe
                and demonstrate how to close an application via a
                macro.</font></li>
            <li>Describe
                and demonstrate how to tell if an application is
                running via a macro.</font></li>
        </ul>
        
            <p><b>Some
            Topics to be introduced in this lesson include:</b></font></p>
        
        <ul>
            <li>Activating
                Applications</font></li>
            <li>Maximizing
                and Minimizing Applications</font></li>
            <li>Starting
                Applications</font></li>
            <li>Closing
                Applications</font></li>
            <li>How
                To Tell If An Application Is Running</font></li>
        </ul>
    
    <p><b><i>Activating
    Applications</i></b></font></p>
    <p>Switching to
    another application means the same thing as &quot;giving it
    focus&quot; or &quot;activating&quot; it. There are a variety
    of ways a macro in a source application can make a target
    application active. Most of them require that the target
    application is running and is in the Windows Task List. An
    &quot;invisible&quot; application is one that is running in
    memory, but is not physically visible and does not show up in
    the Windows Task List. Throughout Module 3, unless specified
    otherwise, the phrase &quot;visible application&quot; or
    &quot;running visibly&quot; means the application is in the
    Windows Task List, not that it's physically visible. This
    concept is covered in detail in Lesson 3.</font></p>
    <p>If invisible
    applications aren't strange enough, an application can have
    no windows at all, so there is nothing to activate. Such an
    application can still show up in the Windows Task List, for
    example a VB3 program that has a Main procedure but no Forms.
    The rest of Module 3 assumes all running applications have a
    window and are in the Windows Task List unless specified
    otherwise.</font></p>
    
        
            <p>Here's
            some items related to activating an application:</font></p>
            <ul>
                <li>AppActivate</font></li>
                <li>AppMaximize,
                    AppMinimize, AppRestore (MSProject window
                    only)</font></li>
                <li>Visible
                    Property</font></li>
                <li>Shell</font></li>
                <li>AppExecute</font></li>
            </ul>
        
        <p><b>AppActivate</b></font></p>
        
            <p><i><u>The
            most common way to activate an application</u></i><i>
            </i>The application to be activated has to be in the
            Windows Task List. AppActivate is discussed in detail
            later.</font></p>
        
        <p><b>AppMaximize,
        AppMinimize, AppRestore (MSProject window only)</b></font></p>
        
            <p>Another
            application can use DDE or OLE Automation to tell
            MSProject to execute one of these. MSProject must be
            in the Windows Task List. The MSProject window is
            activated as well as changed in the specified manner.
            See MSProject Online Help for more information about
            these methods.</font></p>
        
        <p><b>Visible
        Property</b></font></p>
        
            <p>Many
            applications that support OLE Automation have a
            Visible property. If an application is running but
            not in the Windows Task List, then setting its
            Visible property to True will add it to the Windows
            Task List and activate it. If it's already in the
            Windows Task List, then setting Visible to True does
            nothing. OLE Automation and the Visible property are
            covered in detail in Lesson 3.</font></p>
        
        <p><b>Shell</b></font></p>
        
            <p>The
            Shell command is normally used to start an instance
            of an application, but can also be used to switch to
            a currently running application that supports only
            one instance. For example, using the Shell command in
            an Excel macro to start MSProject will simply switch
            to MSProject if it's already running. The Shell
            command is discussed in detail later in this lesson.</font></p>
        
        <p><b>AppExecute</b></font></p>
        
            <p>MSProject
            also has the AppExecute method which can be used to
            start or switch to a target application. The
            AppExecute method is discussed in detail later in
            this lesson.</font></p>
            <p>The
            table below provides some comments and sample code
            illustrating some of the ways to activate an
            application.</font></p>
        
    


<table border="1" cellpadding="7" width="672">
    <tr>
        <td width="15%">AppActivate</font></td>
        <td width="32%">Target Application must be in the Windows
        Task List. You specify the window title that you want to
        activate. In VB for Applications, you don't have to
        specify the name of maximized documents.</font></td>
        <td width="53%">MSProject macro that switches to an
        instance of Excel that is in the Windows Task List.</font><p><b>Sub Sub1()</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Excel&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="15%">AppMaximize</font><p>AppMinimize</font></p>
        <p>AppRestore</font></p>
        </td>
        <td width="32%">MSProject methods. Another application can
        use DDE or OLE Automation to tell MSProject to execute
        one of these. MSProject must be in the Windows Task List.</font></td>
        <td width="53%">Excel macro that switches to MSProject and
        maximizes it - MSProject must be in the Windows Task
        List.</font><p><b>Sub Sub2()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
        <p><b>x.AppMaximize</b></font></p>
        <p><b>End
        Sub</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="15%">Visible</font></td>
        <td width="32%">A property common to many applications
        that support OLE Automation. If an application is running
        but not in the Windows Task List, setting its Visible
        property to True will add it to the Windows Task List and
        activate it. If it's already in the Windows Task List,
        setting Visible to True does nothing. It's usually used
        in combination with AppActivate.</font></td>
        <td width="53%">Excel macro that activates MSProject.
        MSProject must be running but doesn't have to be in the
        Windows Task List. Setting Visible to True covers that
        possibility.</font><p><b>Sub Sub3()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
        <p><b>x.Visible
        = True</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="15%">Shell </font></td>
        <td width="32%">If the target application is already
        running (in the Windows Task List or not), and supports
        only one instance, then Shell activates it rather than
        starting it.</font></td>
        <td width="53%">Excel macro that switches to MSProject if
        it is already running, otherwise it starts MSProject.</font><p><b>Sub Sub4()</b></font></p>
        <p><b>Shell
        &quot;C:\Winproj\Winproj.exe&quot;, 3</b></font></p>
        <p><b>End
        Sub</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="15%">AppExecute</font></td>
        <td width="32%">Specific to MSProject. MSProject can use
        this to activate an application in the Windows Task List
        or to start another application. Requires an exact window
        title in order to switch to another application.</font></td>
        <td width="53%">MSProject macro to switch to Excel if
        &quot;Microsoft Excel - Book1&quot; is in the Windows
        Task List.</font><p><b>Sub Sub5()</b></font></p>
        <p><b>AppExecute
        Window:=&quot;Microsoft Excel - Book1&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        </td>
    </tr>
</table>
  
        <p><b><u>AppActivate</u></b><u>
        title [ , wait ]</u></font></p>
        
            <p>Used
            to switch to any application listed in the Windows
            Task List.</font></p>
            <p><i><u>title</u></i></font></p>
            <p>In
            VB3 this must be set to the title bar text of the
            window to be activated - including the hyphen and
            document name if there is an open maximized document.
            In applications that support Visual Basic for
            Applications, like Excel and MSProject, the title
            only needs to include the application name part of
            the title bar, but if you do include the hyphen part,
            it must match exactly. The <i>title</i> argument is
            not case sensitive.</font></p>
            <p>If
            there is more than one window that matches the
            specified title, then the most recently used instance
            (the highest one in the Windows Task List) is
            activated. Windows that are not on the Windows Task
            List can't be activated.</font></p>
            <p>AppActivate
            cannot activate an application that is running
            invisibly - i.e. one that is running but doesn't show
            in the Windows Task List.</font></p>
            <p><i><u>wait</u></i></font></p>
            <p>This
            argument is only available in applications that
            support Visual Basic for Applications. VB3 doesn't
            use this argument. Set this argument to True if the
            source macro trying to execute the AppActivate
            command must wait until the source application has
            focus before it is allowed to activate the specified
            target. The default is False.</font></p>
            <p></font>&nbsp;</p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>Suppose
            there are three instances of NotePad listed in the
            Windows Task List in the order shown:</font></p>
            <p>NotePad
            - Test2.txt</font></p>
            <p>NotePad
            - Test1.txt</font></p>
            <p>NotePad
            - (Untitled)</font></p>
            <p>The
            table below shows what would result from various uses
            of AppActivate:</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="570"
bordercolor="#000000">
    <tr>
        <td align="center" width="51%" bgcolor="#FFFFFF"><p
        align="center"><b>Command</b></font></p>
        </td>
        <td align="center" width="49%" bgcolor="#FFFFFF"><p
        align="center"><b>Result </b></font></p>
        </td>
    </tr>
    <tr>
        <td align="center" width="51%"><b>AppActivate
        &quot;NotePad&quot;</b></font></td>
        <td align="center" width="49%">Activates the first one in the
        Windows Task List.</font></td>
    </tr>
    <tr>
        <td align="center" width="51%"><b>AppActivate &quot;NotePad -
        wow&quot;</b></font></td>
        <td align="center" width="49%">Error</font></td>
    </tr>
    <tr>
        <td align="center" width="51%"><b>AppActivate &quot;NotePad -
        Test1.txt&quot;</b></font></td>
        <td align="center" width="49%">Activates the specified instance
        only.</font></td>
    </tr>
</table>
</center></div>
  <p><b>Example</b></font></p>
    
        
            <p>Suppose
            the title bar in MSProject says: <b>Microsoft Project
            - P1.MPP</b></font></p>
            <p>Then
            an Excel macro could switch focus to MSProject with
            any of the following commands:</font></p>
        
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project - P1.MPP&quot;</b></font></p>
        
            <p>A
            VB3 procedure could only use the last statement
            above. </font></p>
            <p>If a
            source application establishes an OLE conversation
            with MSProject, then it can use AppActivate with the
            Caption property of the target application. The
            Caption property represents the exact title bar text.
            The following example could be a VB3 procedure or an
            Excel macro that activates MSProject regardless of
            what's on the title bar:</font></p>
        
        <p><b>Sub
        Sub1()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
        <p><b>AppActivate
        x.Caption</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b><i>Maximizing
    and Minimizing Another Application</i></b></font></p>
    <p>Depending on
    the applications, a source application might be able to
    maximize, minimize, resize, or move a target application. You
    can manipulate the MSProject window using the MSProject
    methods AppMaximize, AppMinimize, AppRestore, AppMove, and
    AppSize (there are similar methods to manipulate the document
    windows). The above methods are specific to MSProject. Many
    applications have a WindowState property that can be used to
    maximize, minimize, or restore their application window. Some
    commands, like Shell, that are used to start applications
    include options to control how the target application window
    comes up - Shell is covered later in this lesson.</font></p>
    <p><b>Example</b></font></p>
    
        
            <p>The
            following Excel macro assumes that MSProject is
            already running. It makes MSProject visible (in case
            it was running invisibly), switches to MSProject and
            maximizes it.</font></p>
        
        <p><b>Sub
        Sub5()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>x.Visible
        = True</b></font></p>
        <p><b>x.AppMaximize</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    <p>The
    following MSProject macro assumes that an instance of Excel
    is already running. It makes that instance visible and
    maximizes it.</font></p>
    <p>Note that
    the predefined MSProject constant pjMaximized has the same
    value as the predefined Excel constant xlMaximized. The
    MSProject macro used pjMaximized instead of xlMaximized
    because the Excel constants are not recognized in MSProject
    macros automatically without establishing a reference to the
    Excel 5.0 Object Library. This is covered in detail in lesson
    3. Of course, you can use the actual value instead of the
    constant.</font></p>
    
        <p><b>Sub
        b2()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(, &quot;Excel.Application&quot;)</b></font></p>
        <p><b>x.Visible
        = True</b></font></p>
        <p><b>x.WindowState
        = pjMaximized</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b><i>Starting
    Other Applications</i></b></font></p>
    <p>There are a
    variety of ways a macro in a source application can start a
    target application. Many applications support a command like
    Shell. If both the source and target applications support OLE
    Automation, then the source can use CreateObject or GetObject
    to start the target application. MSProject also has the
    AppExecute method which can switch to, or start up, a target
    application.</font></p>
    <p>See Online
    Help for a complete discussion of related commands.</font></p>
    
        <p><b><u>Shell</u></b><u>
        </u><i><u>pathname </u></i><u>[ , </u><i><u>windowstyle </u></i><u>]</u></font></p>
        <p>Starts
        the specified application with the optional specified
        window style. To insure that the target application is
        completely started before the source macro continues,
        follow the Shell command with the DoEvents command if it
        has one.</font></p>
        <p><i><u>pathname</u></i></font></p>
        <p>Name of
        executable file including optional path. It can include
        optional command line arguments. It can not be the name
        of a document (although Online Help says it can).</font></p>
        <p><i><u>windowstyle</u></i></font></p>
        <p>Pass one
        of the following optional values to control the state of
        the target window when it starts (default is 2).</font></p>
        <p>1, 5, 9
        Normal with focus.</font></p>
        <p>2
        Minimized with focus.</font></p>
        <p>3
        Maximized with focus.</font></p>
        <p>4,8
        Normal without focus.</font></p>
        <p>6,7
        Minimized without focus.</font></p>
    
    <p>As soon as
    the target application responds that it has finished the
    initial part of its startup process, the calling macro will
    proceed to the next line of code after the Shell command. It
    will not wait for the other application to close before
    continuing. Shell can be used as a function. It returns an id
    number (called a module handle) that identifies the instance
    of the executable that it started. You can pass this id to
    some API procedures to get information about that instance,
    including whether it's still running. If you don't want your
    macro to continue until the target executable has quit, the
    GetModuleUsage API function is useful. API calls are covered
    in lesson 8. The GetModuleUsage function is used in an
    example later in this lesson. If you don't want to use the
    value returned by Shell, then don't use ( ) around the
    arguments.</font></p>
    <p>If the
    target application supports multiple instances (like Excel)
    then Shell always starts a new instance. For applications
    like MSProject that support only a single instance, Shell
    activates the existing instance.</font></p>
    <p>When Shell
    looks for the specified executable, if a directory is
    supplied with the filename, it only looks there. If no
    directory is specified, it looks at the following, in the
    order given, until it finds the executable or gives an error:
    current directory, windows directory, system directory, and
    path statement. It doesn't look in Win.ini or Reg.dat (OLE
    registry information). </font></p>
    <p>If you
    include command line arguments (like a document filename)
    with the executable name, Shell will wait only until the
    target application releases control back to the operating
    system; it doesn't necessarily wait for the document to open.</font></p>
    <p>Shell is not
    aware of &quot;working directories&quot;. If it's important,
    try using the Chdrive and Chdir commands to switch to the
    working directory before using the Shell command - that way
    the target application might find startup files it needs (for
    example MSProject's Global.mpt).</font></p>
    <p><b>Example</b></font></p>
    
        
            <p>Assume
            MSProject is not running, that winproj.exe is in
            c:\winproj and Global.mpt is in c:\winproj\workdir
            and that the current directory is c:\stuff. Then this
            Excel macro will start MSProject maximized with
            focus, but will create a new default Global.mpt
            without warning messages.</font></p>
        
        <p><b>Sub
        StartMSProject()</b></font></p>
        <p><b>Shell
        &quot;c:\winproj\winproj.exe&quot;, 3</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>With
            the same assumptions as above, the following Excel
            macro will start MSProject with the Global.mpt from
            the working directory:</font></p>
        
        <p><b>Sub
        StartMSProject()</b></font></p>
        <p><b>ChDrive
        &quot;c&quot;</b></font></p>
        <p><b>ChDir
        &quot;c:\winproj\workdir&quot;</b></font></p>
        <p><b>Shell
        &quot;c:\winproj\winproj.exe&quot;, 3</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Assume
            Excel is not running. This MSProject macro starts
            Excel maximized with focus and tells it to load the
            specified workbook. As soon as Excel finishes its
            startup screen, it lets the MSProject macro continue
            as it loads test.xls in the background.</font></p>
        
        <p><b>Sub
        Sub1()</b></font></p>
        <p><b>Shell
        &quot;c:\Excel\Excel.exe c:\Excel\data\test.xls&quot;, 3</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>End
        Sub </b></font></p>
        
            <p>Note
            that if you replace the above Shell statement with</font></p>
        
        <p><b>Shell
        &quot;c:\Excel\data\test.xls&quot;, 3 </b></font></p>
        
            <p>it
            gives an error, although Online Help says it should
            work.</font></p>
        
        <p><b><u>AppExecute</u></b><u>
        </u><i><u>window</u></i><b><i><u>,</u></i></b><i><u>
        command</u></i><b><i><u>,</u></i></b><i><u> minimize</u></i><b><i><u>,</u></i></b><i><u>
        activate</u></i></font></p>
        
            <p>MSProject
            method only. It can be used to activate or start a
            target application or both. You must provide the
            window or command argument or both.</font></p>
            <p><i><u>window</u></i></font></p>
            <p>Set
            to the title bar text of the window to be activated,
            including the hyphen and document name if there is a
            maximized document. It's not case sensitive.</font></p>
            <p><i><u>command</u></i></font></p>
            <p>The
            command used to start the target application. Similar
            to the <i>pathname</i> argument in the Shell command.</font></p>
            <p><i><u>minimize</u></i></font></p>
            <p>Set
            this to True to minimize the target window. Default
            is False.</font></p>
            <p><i><u>activate</u></i></font></p>
        
    
    <p>Set this to
    True if you want to give focus to the target application.
    Default is True.</font></p>
    <p>AppExecute
    looks at the <i>window</i> argument first if provided. If it
    finds the window, then it ignores the <i>command</i>
    argument. If the <i>window</i> argument is not given or has a
    bad value, then it looks to the <i>command</i> argument. In
    the case where it has to depend on the command argument, it
    may look for an exiting instance first or it may not,
    depending on the target application. For example, it always
    starts a new copy of NotePad. In Windows 3.1 it uses an
    existing instance of Excel, but in Windows 95 it always
    starts a new instance.</font></p>
    <p>In cases
    where AppExecute is switching to an existing instance, the
    minimize and activate arguments are ignored, and AppExecute
    switches to the most recently used instance of the target
    application (the highest one in the Windows Task List). It
    cannot be used to activate an application that is not in the
    Windows Task List.</font></p>
    <p>If
    AppExecute does have to start a new instance, it looks at the
    following to locate the executable: If a pathname is supplied
    in the command argument, it looks no further, otherwise it
    checks Reg.dat, and then in the current directory, windows
    directory, system directory, and the path statement. This is
    different from Shell which always starts a new instance, and
    never checks Reg.dat.</font></p>
    <p></font>&nbsp;</p>
    <p>You can
    specify a document file along with the executable file in the
    command argument, but then Reg.dat is not checked. You cannot
    specify just a document file for the command argument.</font></p>
    <p><b>Example</b></font></p>
    
        
            <p>Suppose
            there are two copies of Excel running and two copies
            of NotePad running, and they are in the following
            order in the Windows Task List:</font></p>
            
                <p>NotePad
                - Test2.txt</font></p>
                <p>Microsoft
                Excel - Book1</font></p>
                <p>NotePad
                - Test1.txt</font></p>
                <p>Microsoft
                Excel - Book2</font></p>
            
            <p>The
            table below shows the result of various commands,
            each starting with the above assumptions.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="558"
bordercolor="#000000">
    <tr>
        <td width="62%" bgcolor="#FFFFFF">Command</font></td>
        <td width="38%" bgcolor="#FFFFFF">Result</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute window:=&quot;Notepad&quot;</b></font></td>
        <td width="38%">Error</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute window:=&quot;Notepad -
        Test1.txt&quot;</b></font></td>
        <td width="38%">Activates that one</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute command:=&quot;Notepad&quot;</b></font></td>
        <td width="38%">Starts a new copy of NotePad</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute command:=&quot;Notepad -
        Test1.txt&quot;</b></font></td>
        <td width="38%">Error</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute command:=&quot;Excel&quot;</b></font></td>
        <td width="38%">Activates the first Excel in the Windows
        Task List</font></td>
    </tr>
    <tr>
        <td width="62%"><b>AppExecute window:=&quot;Excel -
        Book2&quot;</b></font></td>
        <td width="38%">Activates that one</font></td>
    </tr>
</table>
</center></div>
  <p><b>Example</b></font></p>
    
        
            <p>Note:
            The following command should start Excel minimized
            with focus, but gives an error if Excel is not
            already running. Get rid of the Minimize argument or
            set it to False, and it works OK.</font></p>
        
        <p><b>AppExecute
        Command:=&quot;c:\Excel\Excel.exe&quot;, Minimize:=True</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Assuming
            Excel is not running and that Excel.exe is in
            c:\Excel and that Excel is properly registered, then
            any of the following alone should start Excel and
            give it focus.</font></p>
        
        <p><b>AppExecute
        command:=&quot;c:\Excel\Excel.exe&quot;</b></font></p>
        <p><b>AppExecute
        command:=&quot;Excel.exe&quot;</b></font></p>
        <p><b>AppExecute
        command:=&quot;Excel&quot; </b></font></p>
        <p><b>AppExecute
        window:=&quot;ha ha&quot;, command:=&quot;Excel&quot; </b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Assume
            the same as the above, but also that c:\Excel is not
            in the Path statement, and that Test.xls is in
            c:\Excel. Then</font></p>
        
        <p><b>AppExecute
        command:=&quot;c:\Excel\Excel.exe test.xls&quot;</b></font></p>
        
            <p>works,
            but</font></p>
        
        <p><b>AppExecute
        command:=&quot;Excel.exe test.xls&quot;</b></font></p>
        
            <p>fails
            because it can't find Excel.exe and won't check the
            registry.</font></p>
        
        <p><b>AppExecute
        command:=&quot;c:\Excel\test.xls&quot;</b></font></p>
        
            <p>fails
            too, because it doesn't do associations.</font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>Assume
            Excel is already running, and that the title bar is
            &quot;Excel - Book1.xls&quot;. Then the following
            both work:</font></p>
        
        <p><b>AppExecute
        Window:=&quot;Excel - Book1.xls&quot;</b></font></p>
        <p><b>AppExecute
        Window:=&quot;Excel - Book1.xls&quot;, Command:=&quot;ha
        ha&quot;</b></font></p>
    
    <p><b><i>Closing
    Applications</i></b></font></p>
    <p>There are a
    couple of ways that a macro can close an application: Using
    OLE Automation to apply the Quit method of the target
    application (if it has one) or DDE to send the Quit command
    of the target application (if it has one), or, in the worse
    case, activating the target application and using a SendKeys
    command to choose File Exit or to send the Alt-F4 key
    combination. SendKeys, OLE Automation, and DDE are covered in
    later lessons.</font></p>
    <p>Applications
    that are started as a result of an OLE reference may close
    automatically when the OLE reference is destroyed.
    Reference-dependence is covered in detail in Lesson 3.</font></p>
    <p>When a macro
    tells a target application to quit, it should take into
    account the possibility that the target application might
    display &quot;alerts&quot;, warning messages, or error
    messages. An alert is usually a message that offers you a
    choice of actions. For example, when told to quit, MSProject
    might give the message &quot;Save changes to
    'Project1'?&quot;, or &quot;Some other application is using
    Microsoft Project. Do you want to exit Microsoft
    Project?&quot;. The conservative approach to handling
    potential messages is to activate the target application
    before telling it to close. Some applications have commands
    that turn off &quot;alerts&quot;. The default response for an
    alert is automatically chosen without showing the message.
    Both MSProject and Excel have the DisplayAlerts property.
    MSProject also has the Alerts method. The following lines
    have the same effect in MSProject:</font></p>
    
        <p><b>Alerts
        False</b></font></p>
        <p><b>DisplayAlerts
        = False</b></font></p>
        
            <p>With
            alerts turned off, MSProject automatically saves
            changes to projects that have been saved at least
            once in the past, and automatically brings up the
            Save As dialog for new projects that have changed. </font></p>
            <p>MSProject
            has its DisplayAlerts property equal to True by
            default. If a macro wants to be sure MSProject will
            display alerts, it should put DisplayAlerts equal to
            True, just in case some other macro had previously
            put DisplayAlerts equal to False.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The following Excel macro
                    saves any projects in MSProject that need to
                    be saved, without giving alert messages. Then
                    the macro closes MSProject.</font></p>
                
                <p>1.
                Create two new projects in MSProject. Save one
                but not the other, then enter a task in each one.</font></p>
                <p>2.
                Enter and run the following Excel macro. When it
                brings up the Save As dialog, see what happens if
                you choose cancel.</font></p>
                <p><b>Sub
                Sub1()</b></font></p>
                <p><b>Dim
                x As Object</b></font></p>
                <p><b>Set
                x = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
                <p><b>x.DisplayAlerts
                = False</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>x.Quit</b></font></p>
                <p><b>End
                Sub </b></font></p>
            
            <p>3.
            Change the macro so it assigns True to DisplayAlerts
            instead of False. Create two more projects as in step
            (1) and run the macro again.</font></p>
            
                <p>Note:
                The DisplayAlerts line could have been replaced
                by: <b>x.Alerts False</b></font></p>
                <p>MSProject
                was activated before closing it so any
                unanticipated error messages could be seen.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <p><b>Example</b></font></p>
    
        
            <p>Suppose
            several copies of NotePad are running and one has the
            title bar &quot;NotePad - Test1.txt&quot;. The
            following MSProject macro closes that specific
            instance of NotePad:</font></p>
        
        <p><b>Sub
        Sub1()</b></font></p>
        <p><b>AppActivate
        &quot;NotePad - Test1.txt&quot; </b></font></p>
        <p><b>SendKeys
        &quot;%{F4}&quot;, True</b></font></p>
        <p><b>End
        Sub </b></font></p>
        
            <p>If
            you leave off the &quot; - Test1.txt&quot; in the
            AppActivate statement, it would close one of the
            instances of NotePad, but maybe not the one you
            wanted.</font></p>
        
    
    <p><b><i>How To
    Tell If An Application Is Running</i></b></font></p>
    
        
            <p>Here's
            a couple of ways to tell if another application is
            currently running.</font></p>
        
        <p>Try to
        activate another application and trap the error if it
        fails. If it fails, you know the application's not in the
        Windows Task List, although it might be running
        &quot;invisibly&quot;.</font></p>
        <p>Try to
        establish an OLE or DDE conversation with an application
        and trap the error if it fails (although it might fail
        because the other application is running but not
        responding). This method can tell if an application is
        running even if it's not in the Windows Task List. Using
        GetObject when the target application is displaying a
        message might cause the calling macro to lock up. OLE
        Automation and DDE are covered in detail in Lessons 3 and
        4.</font></p>
        <p>API
        calls: These are covered in detail in Lesson 8. The
        FindWindow function is perhaps the cleanest way to tell
        if an application is running (in the Windows Task List or
        not). To use it, you must know the classname of the
        application. For example, the classname of MSProject 4.0
        is &quot;JWinproj-WhimperMainClass&quot;, and the
        classname of Excel 5.0 is &quot;XLMAIN&quot;. The
        GetModuleUsage function is often used with the Shell
        command to test if the application instance started with
        Shell is still running.</font></p>
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
        
        
            <p>The
            following MSProject macro tells you whether NotePad
            is in the Windows Task List or not.</font></p>
        
        
        	   
                <p><font color="#000000" size="2"
                face="verdana,arial,helvetica">1. Make sure
                NotePad is not running.</font></p>
                <p><font color="#000000" size="2"
                face="verdana,arial,helvetica">2. Enter and run
                the following MSProject macro.</font></p><br> <br>
                <p><b>Sub
                IsNotePadRunning()</b></font></p>
                <p><b>Dim
                MyErr As Integer</b></font></p>
                <p></p>
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>AppActivate
                &quot;NotePad&quot;</b></font></p>
                <p><b>MyErr
                = Err</b></font></p>
                <p><b>On
                Error GoTo 0</b></font></p>
                <p></p>
                <p><b>If
                MyErr &gt; 0 Then</b></font></p>
                <p><b>MsgBox
                &quot;NotePad is not running.&quot;</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>MsgBox
                &quot;NotePad is running&quot;</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    
                        <p>3. Start NotePad and run
                        the above macro again.</font></p>
                    
                
            
        
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The following Excel macro
                    tells you whether MSProject is responding or
                    not to GetObject.</font></p>
                
                <p>1.
                Make sure MSProject is not running.</font></p>
                <p>2.
                Enter and run the following Excel macro.</font></p>
                <p><b>Sub
                IsMSProjectRunning()</b></font></p>
                <p><b>Dim
                x As Object, MyErr As Integer</b></font></p>
                <p></p>
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>Set
                x = GetObject(,
                &quot;MSProject.Application&quot;)</b></font></p>
                <p><b>MyErr
                = Err</b></font></p>
                <p><b>On
                Error GoTo 0</b></font></p>
                <p><b>If
                MyErr &gt; 0 Then</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is not responding.&quot;</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is responding&quot;</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Start MSProject. Don't have any dialogs or
                messages open in MSProject. Run the above Excel
                macro again.</font></p>
                <p>4.
                Make sure you don't have anything important open
                in any application. Open the Tools Macros dialog
                in MSProject, switch back to Excel, and run the
                above macro again.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>The
            following Excel macro tells you whether MSProject is
            running or not. It uses the FindWindow API call with
            the classname of MSProject. The GetClassname API
            function in Lesson 8 can be used to find classnames.</font></p>
            
                <p>1.
                Make sure MSProject is not running.</font></p>
                <p>2.
                Enter and run the following Excel macro.</font></p>
                <p><b>'PLACE
                THE DECLARE LINE IN THE DECLARATION AREA OF AN
                EXCEL MODULE</b></font></p>
                <p><b>Declare
                Function FindWindow Lib &quot;USER&quot; _</b></font></p>
                <p><b>(ByVal
                lpClassName As Any, ByVal lpWindowName As Any) As
                Integer</b></font></p>
                <p></p>
                <p><b>Sub
                IsMSProjectRunning()</b></font></p>
                <p><b>If
                FindWindow(&quot;JWinproj-WhimperMainClass&quot;,
                0&amp;) = 0 Then</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is not running&quot;</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is running&quot;</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Start MSProject and run the above Excel macro
                again.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>The
            following Excel macro starts MSProject and
            establishes an OLE conversation. Then it waits in a
            DoEvents loop until it is no longer able to use the
            reference to MSProject to read the MSProject caption.</font></p>
            
                <p>1.
                Make sure MSProject is not running.</font></p>
                <p>2.
                Enter and run the following Excel macro. It
                should start and activate MSProject. Adjust the
                path to MSProject if necessary.</font></p>
                <p><b>Sub
                Sub5()</b></font></p>
                <p><b>Dim
                x As Object, s As String</b></font></p>
                <p><b>Shell
                &quot;c:\winproj\winproj.exe&quot;, 3</b></font></p>
                <p><b>On
                Error Resume Next</b></font></p>
                <p><b>Set
                x = GetObject(,
                &quot;MSProject.Application&quot;)</b></font></p>
                <p><b>Do</b></font></p>
                <p><b>DoEvents</b></font></p>
                <p><b>s
                = x.Caption</b></font></p>
                <p><b>Loop
                Until Err &gt; 0</b></font></p>
                <p><b>MsgBox
                &quot;MSProject is busy or not running.&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Exit MSProject. The MsgBox line in the above
                macro should execute.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>The
            following MSProject macro uses the Shell statement to
            start a new instance of Excel and waits in a DoEvents
            loop until that instance of Excel quits. The value
            returned by the Shell statement is stored in the
            variable moduleHandle which identifies the instance
            of Excel. The API function GetModuleUsage is passed
            the value of moduleHandle and returns a nonzero
            result as long as the instance of Excel is still
            running. </font></p>
            
                <p>1.
                Make sure Excel is not running.</font></p>
                <p>2.
                Enter and run the following MSProject macro. It
                should start and activate Excel.</font></p>
                <p><b>'PUT
                THIS IN THE DECLARATION AREA:</b></font></p>
                <p><b>Declare
                Function GetModuleUsage _</b></font></p>
                <p><b>Lib
                &quot;KERNEL&quot; (ByVal hModule As Integer) As
                Integer</b></font></p>
                <p></p>
                <p><b>Sub
                a1()</b></font></p>
                <p><b>Dim
                moduleHandle As Integer</b></font></p>
                <p><b>moduleHandle
                = Shell(&quot;c:\Excel\Excel.exe&quot;, 3)</b></font></p>
                <p><b>Do</b></font></p>
                <p><b>DoEvents</b></font></p>
                <p><b>Loop
                Until GetModuleUsage(moduleHandle) = 0</b></font></p>
                <p><b>MsgBox
                &quot;The instance of Excel is no longer
                running.&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>3.
                Exit MSProject. The MsgBox line in the above
                macro should execute.</font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <H1><i>Lesson
    1 Exercises</i></H1>    <p>Assume in
    these exercises that there are no &quot;invisible&quot;
    applications, i.e. that any applications running are listed
    in the Windows Task List. Also assume that there are no
    &quot;busy&quot; applications. Try to do these without API
    calls. They all can be done using AppActivate, SendKeys, and
    On Error Resume Next.</font></p>
<ol>
    <li>Write an
    Excel macro that tries to activate (not start) MSProject. If
    it fails, then the macro gives the following message:</font></li><br>
	<br>
    
        
            <p><b>Make
            sure Microsoft Project is running before using this
            macro.</b></font></p>
        
    
    <p>The message
    box should just have an OK button. Then the macro ends.</font></p>
    <li>Write an
    MSProject macro that tries to activate (not start) Excel. If
    it fails, then the macro gives the following message:</font></li><br> <br>
    
        
            <p><b>Excel
            is not running. Do you want to start it?</b></font></p>
        
    
    <p>The message
    box should have a Yes and No button. If the user selects Yes,
    then the macro starts a new instance of Excel, and ends. If
    the user selects No, then the macro just ends.</font></p>
    <li>Write an
    MSProject macro that tests if Excel is running. If Excel is
    not running, then the macro starts Excel and ends. If Excel
    is running, then the macro activates MSProject and displays
    the following message:</font></li>
    <br> <br>
        
            <p><b>Excel
            is already running. You can switch to it,</b></font></p>
            <p><b>or
            start a new instance.</b></font></p>
        
    
    <p>The message
    box should have 3 buttons labeled: Current, New, and Cancel.
    If the user chooses the Current button then the macro
    activates Excel and then ends. If the user chooses the New
    button, then the macro starts a new instance of Excel, makes
    it active, and ends. If the user chooses Cancel then the
    macro just ends.</font></p>
    <p>Use the
    &quot;Message&quot; method so you can change the Yes button
    caption to Current, and the No button caption to New. For
    help, look up &quot;Message&quot; in the MSProject Online
    Help, in the VB section.</font></p>
    <li>Write an
    MSProject macro that closes one instance of Excel. Make sure
    that any Excel alerts like &quot;Save changes in
    'Book1'?&quot; are shown before it closes. Test the macro by
    entering some data in a new Excel workbook, and then
    switching to MSProject and running the macro.</font></li>

</FONT></BODY>
</html>

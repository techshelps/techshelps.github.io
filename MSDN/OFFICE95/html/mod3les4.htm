<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 4: DDE vs. OLE Automation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 4: DDE vs. OLE
Automation</font></H1>
  <p><b>Lesson
    Objectives</b></font></p>
    
        
            <p>Upon
            completion of this lesson, the participant will be
            able to:</font></p>
        
    
    <ul>
        <li>List
            some of the DDE keywords found in Excel, Project,
            Word, and VB3.</font></li>
        <li>Describe
            the purpose of DDEInitiate, DDETerminate, DDEExecute,
            DDEPoke and DDERequest.</font></li>
        <li>Describe
            the error messages that can occur if a target
            application does not respond quickly enough to DDE or
            OLE Automation commands.</font></li>
        <li>Describe
            how a macro in another application can run an Excel
            or Project macro and pass arguments.</font></li>
        <li>Describe
            how a macro in another application can assign values
            to a global variable in Project.</font></li>
    </ul>
    
        
            <p><b>Some
            Topics to be introduced in this lesson include:</b></font></p>
        
        <ul>
            <li>DDE
                Commands Used in Excel, Project, Word, and VB3</font></li>
            <li>DDE
                and OLE Automation Timeouts</font></li>
            <li>Macros
                Running Another Application's Macros and Passing
                Arguments</font></li>
            <li>Macros
                Assigning Values to Another Application's Global
                Variables</font></li>
        </ul>
    
    <p><b><i>DDE
    Macro Languages - Quick Review of a DDE Conversion</i></b></font></p>
    
        
            <p>A
            source application has macro commands that allow it
            to initiate a conversation with a target application.
            It can choose to talk to the target application as a
            &quot;whole&quot; (the System topic) or with a
            specific open document. The source application can
            then use a DDE command to read (request) specific
            data from the target application or document, or to
            change (poke) the values of specific data in the
            target application or document. What request/poke
            items the target will respond to depends on the
            specific target application, and whether the source
            is talking to the system topic or to a specific
            document. The request/poke items the target will
            respond to are &quot;hard coded&quot; in the target
            application, and usually cannot be executed in the
            target's own macros. In addition to request/poke, the
            source application can also use DDE to tell the
            target to execute one of the target's own menu or
            macro commands - it usually doesn't matter whether
            the conversation is with the system topic or with a
            specific document.</font></p>
            <p>The
            exact syntax and degree of DDE support depends on the
            application. Some applications allow simultaneous
            conversations with multiple target applications,
            keeping the conversations separate by assigning each
            one a channel number (Excel and Word) or identifying
            each one with a different object in the application
            like a text box (VB3). MSProject only allows one
            conversation at a time.</font></p>
            <p>MSProject,
            Excel, and Word have common keywords, but the actual
            syntax and usage varies. VB3 has different keywords
            for properties and methods that serve a similar
            purpose, and also has a robust set of event
            procedures. The table below shows the DDE-related
            keywords in these applications. See the Online Help
            or manuals of each application for syntax details and
            examples:</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="570">
    <tr>
        <td width="20%" bgcolor="#FFFFFF">MSProject</font></td>
        <td width="19%" bgcolor="#FFFFFF">EXCEL</font></td>
        <td width="21%" bgcolor="#FFFFFF">WORD</font></td>
        <td width="40%" bgcolor="#FFFFFF">*VB3</font></td>
    </tr>
    <tr>
        <td width="20%">DDEInitiate</font></td>
        <td width="19%">DDEInitiate</font></td>
        <td width="21%">DDEInitiate</font></td>
        <td width="40%">LinkTopic, LinkMode props</font></td>
    </tr>
    <tr>
        <td width="20%">DDEExecute</font></td>
        <td width="19%">DDEExecute</font></td>
        <td width="21%">DDEExecute</font></td>
        <td width="40%">LinkExecute method</font></td>
    </tr>
    <tr>
        <td width="20%">DDETerminate</font></td>
        <td width="19%">DDETerminate</font></td>
        <td width="21%">DDETerminate</font></td>
        <td width="40%">LinkMode prop</font></td>
    </tr>
    <tr>
        <td width="20%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
        <td width="19%">DDERequest</font></td>
        <td width="21%">DDERequest</font></td>
        <td width="40%">LinkItem prop, LinkRequest method</font></td>
    </tr>
    <tr>
        <td width="20%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
        <td width="19%">DDEPoke</font></td>
        <td width="21%">DDEPoke</font></td>
        <td width="40%">LinkItem prop, LinkPoke method</font></td>
    </tr>
    <tr>
        <td width="20%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
        <td width="19%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
        <td width="21%">DDETerminateAll</font></td>
        <td width="40%"><font color="#000000"
        face="verdana,arial,helvetica"></font>&nbsp;</td>
    </tr>
</table>
</center></div>
  
        
            <p>*VB3
            also includes a LinkTimeout property, as well as the
            following event procedures: LinkClose, LinkError,
            LinkExecute, LinkNotify, and LinkOpen.</font></p>
            <p>The
            rest of this section uses the Excel keywords to
            represent the generic commands.</font></p>
        
        <p><b>Note:</b></font></p>
    
    <p>If the
    target application is not running when the source macro uses
    DDEInitiate, then you get a message asking if you want to
    start the target. For example, if Excel is not running when
    an MSProject executes <b>DDEInitiate
    &quot;Excel&quot;,&quot;System&quot;</b>, then you get the
    message: <b>Linked data not accessible. Start application
    'EXCEL.EXE' ?</b></font></p>
    <p>A DDE
    conversation can be initiated with a target application even
    if it the target application is running invisibly (not in the
    Windows Task List).</font></p>
    <p>An
    application can't initiate a DDE conversation with itself.</font></p>


<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>This
            example has an MSProject macro that uses DDEExecute
            to send a string to a VB3 program, which displays the
            string in a text box. The VB3 program is compiled as
            an executable.</font></p>
            
                <p>1.
                Create a new directory in File Manager called
                C:\VB3TEST</font></p>
                <p>2.
                In a new VB3 project, set the LinkMode property
                of Form1 to 1-Source.</font></p>
                <p>3.
                Create a text box and a command button on Form1.
                Set the Caption property of the command button to
                Close, and put the End command in its click
                procedure.</font></p>
                <p>4.
                Double click any empty part of Form1, and from
                the Proc dropdown list, choose LinkExecute. Add
                the code below to the Form_LinkExecute procedure.</font></p>
                <p><b>Sub
                Form_LinkExecute (cmdstr As String, cancel As
                Integer)</b></font></p>
                <p><b>cancel
                = False</b></font></p>
                <p><b>Text1.Text
                = cmdstr</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>5.
                From the File menu, choose &quot;Make Exe File
                ...&quot; and save it as C:\VB3TEST\VB3PROG.EXE</font></p>
                <p>6.
                From the File menu choose &quot;Save
                Project&quot; and save everything to the
                C:\VB3TEST directory accepting the default file
                names.</font></p>
                <p>7.
                Exit VB3.</font></p>
                <p>8.
                Enter and run the following MSProject macro.</font></p>
                <p><b>Sub
                Sub1()</b></font></p>
                <p><b>Shell
                &quot;C:\VB3TEST\VB3PROG.EXE&quot;, 1</b></font></p>
                <p><b>DDEInitiate
                &quot;vb3Prog&quot;, &quot;Form1&quot;</b></font></p>
                <p><b>s
                = InputBox(&quot;enter some text&quot;)</b></font></p>
                <p><b>DDEExecute
                s</b></font></p>
                <p><b>DDETerminate</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        </td>
    </tr>
</table>
  <p><b><i>Time
    Out</i></b></font></p>
    
        <p>Some
        applications include a DDEExecute timeout argument or a
        DDE timeout option setting. For example, MSProject has a <i>timeout</i>
        argument with its DDEExecute command, and VB3 has the
        LinkTimeout property. Excel's DDEExecute does not have a
        timeout argument. Setting a timeout allows you to control
        how long the source application should wait for the
        target application to finish. If you know the target is
        going to be taking a long time to finish the command, and
        if you want your calling application to continue to the
        next line after the DDEExecute statement without waiting,
        then you may want to set the timeout to the smallest
        legal value and trap the timeout error. Of course the
        source and target applications can only &quot;share&quot;
        time in a cooperative multitasking environment if they
        release control occasionally, for example, while waiting
        for input/output operations or by using commands like
        DoEvents. </font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>The
            following MSProject macro tells Excel to open a
            &quot;really large&quot; workbook. The macro waits
            the minimum 1 second for Excel to finish and then
            continues.</font></p>
        
        <p><b>Sub
        DDEProjectMacro()</b></font></p>
        <p><b>DDEInitiate
        &quot;Excel&quot;, &quot;System&quot;</b></font></p>
        <p><b>On
        Error Resume Next</b></font></p>
        <p><b>DDEExecute
        &quot;[Open(&quot;&quot;d:\excel5\class\big.xls&quot;&quot;)]&quot;,
        1</b></font></p>
        <p><b>On
        Error Goto 0</b></font></p>
        <p><b>DDETerminate</b></font></p>
        <p><b>'More
        code can go here if it doesn't</b></font></p>
        <p><b>'depend
        on Big.xls being open</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        <p>This
        example shows an MSProject macro, DDEProjMacro1, that
        runs an Excel macro, ExcelMacro1. The MSProject macro
        quickly continues after the DDEExecute command, even
        though Excel is in the background waiting for input to
        its own message. To test this, enter the MSProject macro
        in MSProject and enter the Excel macro in Excel. Then run
        the MSProject macro and OK its message. Then switch to
        Excel and OK its message.</font></p>
        <p><b>Sub
        DDEProjMacro1() 'MSProject macro</b></font></p>
        <p><b>DDEInitiate
        &quot;Excel&quot;, &quot;system&quot;</b></font></p>
        <p><b>On
        Error Resume Next</b></font></p>
        <p><b>DDEExecute
        &quot;[Run(&quot;&quot;ExcelMacro1&quot;&quot;)]&quot;, 1</b></font></p>
        <p><b>On
        Error Goto 0</b></font></p>
        <p><b>DDETerminate</b></font></p>
        <p><b>MsgBox
        &quot;DDEProjMacro1 is done.&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        ExcelMacro1() 'Excel macro run by the above MSProject
        macro</b></font></p>
        <p><b>MsgBox
        &quot;ExcelMacro1 Message&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p>There is
        no timeout option when using OLE Automation. There is not
        a consistent way that all applications handle OLE
        timeouts. If GetObject or CreateObject fail because the
        target application is not running, then you usually get
        an OLE Automation error quickly. If the target
        application is running, but busy, then the amount of time
        that the source application waits before giving a
        message, and the text of that message, depend on the
        source application. In some cases, GetObject or
        CreateObject can succeed in establishing an OLE
        reference, but when you try to use the reference to
        access the methods/properties of the target application,
        it might not respond at all, or respond by saying it's
        busy. </font></p>
        <p>The next
        two tables illustrate how MSProject and Excel macros deal
        with OLE timeout problems. The delay times given were
        derived from tests on a specific machine.</font></p>
        <p>The
        following table shows some examples of MSProject macros
        that use OLE Automation to control Excel, and some of the
        timeout problems that can occur. The bolded macro lines
        (in the second column) are executing when the messages
        occur.</font></p>
    

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="654"
bordercolor="#000000">
    <tr>
        <td width="22%" bgcolor="#FFFFFF">State of Excel before the
        MSProject macro runs.</font></td>
        <td width="40%" bgcolor="#FFFFFF">The MSProject macro.</font></td>
        <td width="38%" bgcolor="#FFFFFF">Result in MSProject after the
        MSProject macro is run.</font></td>
    </tr>
    <tr>
        <td width="22%">Excel is not running.</font></td>
        <td width="40%">Sub ProjMacro1()</font><p>Dim x As Object</font></p>
        <p><b>Set x
        = GetObject(,&quot;Excel.Application&quot;)</b></font></p>
        <p>End Sub</font></p>
        </td>
        <td width="38%">OLE Automation error.</font></td>
    </tr>
    <tr>
        <td width="22%">The Excel title bar says &quot;Microsoft
        Project - Book1&quot;.</font><p>A dialog, like File Page Setup,
        or a message box is open in Excel.</font></p>
        </td>
        <td width="40%">Sub ProjMacro2()</font><p>Dim x As Object</font></p>
        <p>Set x =
        GetObject(,&quot;Excel.Application&quot;)</font></p>
        <p><b>x.Workbooks.Add</b></font></p>
        <p>End Sub</font></p>
        </td>
        <td width="38%">The following warning dialog comes up
        after about five seconds, with options to &quot;Switch
        To&quot;, &quot;Retry&quot;, or &quot;Cancel&quot;</font><p><b><i>This action
        cannot be completed because the EXCEL application
        (Microsoft Excel - Book1) is </i></b><b><i><u>busy</u></i></b><b><i>.
        Choose &quot;Switch To&quot; to activate EXCEL and
        correct the problem</i></b>.</font></p>
        </td>
    </tr>
    <tr>
        <td width="22%">The Excel title bar says &quot;Microsoft
        Project - Book1&quot;.</font><p>Excel is &quot;Ready&quot;. The
        following Excel macro will be called from MSProject: </font></p>
        <p>Sub
        ExcelMacro1()</font></p>
        <p>MsgBox
        &quot;wow&quot;</font></p>
        <p>End Sub</font></p>
        </td>
        <td width="40%">Sub ProjMacro3()</font><p>Dim x As Object</font></p>
        <p>Set x =
        GetObject(, &quot;Excel.Application&quot;)</font></p>
        <p><b>x.Run
        &quot;ExcelMacro1&quot;</b></font></p>
        <p>MsgBox
        &quot;ProjMacro3 message&quot;</font></p>
        <p>End Sub</font></p>
        </td>
        <td width="38%">The following warning dialog comes up
        after a minimum of about five seconds if you provide any
        input to MSProject, like clicking the mouse or pressing a
        key. Your options are to &quot;Switch To&quot; or
        &quot;Retry&quot;. You can't choose Cancel.</font><p><b><i>This action
        cannot be completed because the EXCEL application
        (Microsoft Excel - Book1) is </i></b><b><i><u>not
        responding</u></i></b><b><i>. Choose &quot;Switch
        To&quot; to activate EXCEL and correct the problem</i></b><i>.</i></font></p>
        </td>
    </tr>
</table>
</center></div>
  <p>The
    following table shows some examples of Excel macros that use
    OLE Automation to control MSProject, and some of the timeout
    problems that can occur. The bolded macro lines (in the
    second column) are executing when the messages occur.</font></p>

<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="654"
bordercolor="#000000">
    <tr>
        <td width="18%" bgcolor="#FFFFFF">State of MSProject before the
        Excel macro runs.</font></td>
        <td width="47%" bgcolor="#FFFFFF">The Excel macro.</font></td>
        <td width="35%" bgcolor="#FFFFFF">Result in Excel after the Excel
        macro is run.</font></td>
    </tr>
    <tr>
        <td width="18%">MSProject is not running.</font></td>
        <td width="47%">Sub ExcelMacro1()</font><p>Dim x As Object</font></p>
        <p><b>Set x
        = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
        <p>End Sub</font></p>
        </td>
        <td width="35%">OLE Automation error.</font></td>
    </tr>
    <tr>
        <td width="18%">A dialog, like File Page Setup, or a
        message box is open in MSProject.</font></td>
        <td width="47%">Sub ExcelMacro2()</font><p>Dim x As Object</font></p>
        <p><b>Set x
        = GetObject(,&quot;MSProject.Application&quot;)</b></font></p>
        <p>End Sub</font></p>
        </td>
        <td width="35%">The following message comes up after about
        45 seconds, with OK, Cancel, and Help buttons:</font><p><b><i>The object
        is not responding. Continue waiting?</i></b></font></p>
        <p>If you
        choose Cancel, you get an OLE Automation error. If you
        choose OK then you get the following message with OK and
        Help buttons.</font></p>
        <p><b><i>Microsoft
        Excel is waiting for another application to complete an
        OLE action.</i></b></font></p>
        <p>It takes
        you back to the first message when you choose OK.</font></p>
        </td>
    </tr>
    <tr>
        <td width="18%">MSProject is &quot;Ready&quot;. The
        following MSProject macro will be called from Excel: </font><p>Sub ProjMacro1()</font></p>
        <p>MsgBox
        &quot;wow&quot;</font></p>
        <p>End Sub</font></p>
        </td>
        <td width="47%">Sub ExcelMacro3()</font><p>Dim x As Object</font></p>
        <p>Set x =
        GetObject(, &quot;MSProject.Application&quot;)</font></p>
        <p><b>x.Macro
        &quot;ProjMacro1&quot;</b></font></p>
        <p>MsgBox
        &quot;ExcelMacro1 message&quot;</font></p>
        <p>End Sub</font></p>
        </td>
        <td width="35%">The following message comes up after about
        60 seconds, with OK and Help buttons:</font><p><b><i>Microsoft
        Excel is waiting for another application to complete an
        OLE action.</i></b></font></p>
        <p>The
        message repeats each time you choose OK.</font></p>
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="614">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The MSProject macro below
                    attempts to add a new workbook in Excel, but
                    fails if an Excel dialog or message is open.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">1. Run Excel and from the File
                    menu choose Page Setup.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Leave the Excel Page Setup
                    dialog open, and switch to MSProject.</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">3. Enter and run the following
                    MSProject macro.</font></p>
                
                <p><b>Sub
                ProjMacro2()</b></font></p>
                <p><b>Dim
                x As Object</b></font></p>
                <p><b>Set
                x = GetObject(,&quot;Excel.Application&quot;)</b></font></p>
                <p><b>x.Workbooks.Add</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        </td>
    </tr>
</table>
</center></div>
  <p><b><i>Using
    DDE to Control MSProject From Another Application</i></b></font></p>
    
        
            <p>The
            file DDEINFO.WRI that shipped with Project 3.0 is not
            included with Project 4.0, however the information in
            that file applies to using DDE to control Project 4.0
            as well, except where features have been changed or
            added.</font></p>
            <p>Macros
            in other applications might use DDE or OLE Automation
            or both to control MSProject. Both OLE Automation and
            DDE can do some things, like getting/setting task,
            resource, and assignment information, but it is
            usually easier to use OLE Automation. Some things can
            be directly done only by DDE, like passing arguments
            to an MSProject sub procedure or assigning a value to
            an MSProject global variable. Some things can be
            directly done only by OLE Automation, like getting
            the list of base calendars, tables, views, and
            filters.</font></p>
            <p>Other
            applications can use DDEExecute to make MSProject
            execute many of its own macro statements. For
            example, if gVar is declared as a global variable in
            an MSProject module, then the following Excel macro
            assigns the value &quot;wow&quot; to gVar:</font></p>
        
        <p><b>Sub
        aaa()</b></font></p>
        <p><b>Dim
        chn As Integer</b></font></p>
        <p><b>chn =
        DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>DDEExecute
        chn, &quot;gVar = &quot;&quot;wow&quot;&quot;&quot;</b></font></p>
        <p><b>DDETerminate
        chn</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>The
            DDEExecute line above causes MSProject to execute the
            statement </font></p>
        
        <p><b>gVar
        = &quot;wow&quot;</b></font></p>
        
            <p>which
            assigns the value &quot;wow&quot; to the global
            variable gVar. After the above Excel macro runs, you
            could go to the Debug Window in MSProject and enter
            the following to check the value of gVar: <b>? gVar</b></font></p>
        
    
    <p><b><i>Using
    Poke and Request.</i></b></font></p>
    
        <p><b>Unique Ids</b></font></p>
        
            <p>One
            drawback to using DDERequest and DDEPoke is that you
            must specify tasks, resources, or assignments by
            Unique Ids, not ids or names.</font></p>
        
        <p><b>Data Size
        Limitations</b></font></p>
        
            <p>One
            of the advantages DDERequest and DDEPoke do have when
            talking to MSProject is the use of the asterisk
            wildcard character - but this can also be a nightmare
            depending on how much data is returned and how much
            data the calling application can deal with. MSProject
            itself doesn't want to return more than 64K at a
            time. A VB3 Text Box can only receive 32K at a time
            (that's the formal spec).</font></p>
        
        <p><b>Syntax
        Variations</b></font></p>
        
            <p>MSProject
            returns requested data (DDERequest) to other
            applications and receives poked data (DDEPoke) from
            other applications in a format that uses tabs to
            delimit fields and newline (chr(13) &amp; chr(10))
            characters to separate records. When requesting task
            or resource records from MSProject, blank rows are
            skipped. The exact syntax and approach used with
            DDERequest and DDEPoke depends on the source
            application. Excel Visual Basic macros convert
            requested data into a variant &quot;array&quot;
            that's pretty tricky to work with. VB3 on the other
            hand retrieves the same requested data as a straight
            forward string that can be parsed for the tab and
            newline characters. Of course, you wouldn't normally
            use DDE at all in an Excel macro or VB3 program to
            talk to MSProject, because they both support OLE
            Automation. Applications that don't support OLE
            Automation are stuck with DDE (if they support it).</font></p>
            <p>The
            following statements in Excel shows how the names,
            durations, and start dates of all tasks in P1.mpp can
            be requested and stored in a variant array variable
            called DataRequested (assuming P1.mpp is open):</font></p>
        
        <p><b>Dim
        DataRequested As Variant</b></font></p>
        <p><b>Dim
        channel As Integer</b></font></p>
        <p><b>channel
        = DDEInitiate (&quot;Winproj&quot;, &quot;P1.mpp&quot;)</b></font></p>
        <p><b>DataRequested
        = DDERequest(channel,
        &quot;T(*,(name,duration,start))&quot;)</b></font></p>
        
            <p>If
            only one record is returned (one task in the project)
            then one index is used and it specifies which of the
            requested fields you want (by position in the list):</font></p>
        
        <p>This...
        Accesses this ...</font></p>
        <p><b>DataRequested(1)
        </b>name (of the single task)</font></p>
        <p><b>DataRequested(2)
        </b>duration (of the single task)</font></p>
        <p><b>DataRequested(3)
        </b>start (of the single task)</font></p>
        
            <p>But
            if 2 or more records are returned then two indices
            are used - the first to specify the task record and
            the second to specify which of the requested fields
            you want. For example, to get the fields for the 56th
            task record:</font></p>
        
        <p>This...
        Accesses this ...</font></p>
        <p><b>DataRequested(56,1)
        </b>name (of the task in the 56th record)</font></p>
        <p><b>DataRequested(56,2)
        </b>duration (of the task in the 56th record)</font></p>
        <p><b>DataRequested(56,3)
        </b>start (of the task in the 56th record)</font></p>
        
            <p><b>UBound(DataRequested)
            </b>is the number of (nonblank) records returned,
            provided at least 2 (nonblank) records are returned,
            but is the number of requested fields if only one
            record is returned.</font></p>
            <p>Several
            of the following Excel macro examples compare how to
            accomplish a task using DDE versus OLE Automation. </font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these Excel macros opens the project
            c:\wprj4dat\P1.mpp.</font></p>
        
        <p><b>Sub
        DDE_12()</b></font></p>
        <p><b>Dim
        SystemChannel</b></font></p>
        <p><b>SystemChannel
        = DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>DDEExecute
        SystemChannel, &quot;FileOpen
        &quot;&quot;c:\wprj4dat\p1.mpp&quot;&quot;&quot;</b></font></p>
        <p><b>DDETerminate
        SystemChannel</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        ole_12()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>oMSP.FileOpen
        &quot;c:\wprj4dat\p1.mpp&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these Excel macros displays the name of the active
            project.</font></p>
        
        <p><b>Sub
        DDE_1()</b></font></p>
        <p><b>Dim
        SystemChannel As Integer</b></font></p>
        <p><b>Dim
        RequestedData As Variant</b></font></p>
        <p><b>Dim
        ActiveProjectName As String</b></font></p>
        <p><b>SystemChannel
        = DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>RequestedData
        = DDERequest(SystemChannel, &quot;ActiveProject&quot;)</b></font></p>
        <p><b>ActiveProjectName
        = RequestedData(1)</b></font></p>
        <p><b>MsgBox
        ActiveProjectName</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        OLE_1()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>MsgBox
        oMSP.ActiveProject.Name</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these Excel macros displays the name of the active
            project calendar.</font></p>
        
        <p><b>Sub
        DDE_3()</b></font></p>
        <p><b>Dim
        SystemChannel As Integer</b></font></p>
        <p><b>Dim
        ActiveProjectName As String</b></font></p>
        <p><b>Dim
        DocumentChannel As Integer</b></font></p>
        <p><b>Dim
        RequestedData As Variant</b></font></p>
        <p><b>Dim
        CalendarName As String</b></font></p>
        <p><b>SystemChannel
        = DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>RequestedData
        = DDERequest(SystemChannel, &quot;ActiveProject&quot;)</b></font></p>
        <p><b>ActiveProjectName
        = RequestedData(1)</b></font></p>
        <p><b>DocumentChannel
        = DDEInitiate(&quot;winproj&quot;, ActiveProjectName)</b></font></p>
        <p><b>RequestedData
        = DDERequest(DocumentChannel, &quot;P(4)&quot;)</b></font></p>
        <p><b>CalendarName
        = RequestedData(1)</b></font></p>
        <p><b>MsgBox
        CalendarName</b></font></p>
        <p><b>DDETerminate
        SystemChannel</b></font></p>
        <p><b>DDETerminate
        DocumentChannel</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        ole_3()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>MsgBox
        oMSP.ActiveProject.Calendar</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these Excel macros sets the calendar of the active
            project to &quot;Company Calendar&quot;. To test
            these, make a new base calendar called &quot;Company
            Calendar&quot;, and in Summary Info, choose Standard
            for the calendar. Then run the Excel macro.</font></p>
        
        <p><b>Sub
        DDE_2()</b></font></p>
        <p><b>Dim
        SystemChannel As Integer</b></font></p>
        <p><b>Dim
        DocumentChannel As Integer</b></font></p>
        <p><b>Dim
        ActiveProjectName As String</b></font></p>
        <p><b>Dim
        RequestedData As Variant</b></font></p>
        <p><b>Dim
        CalendarName As String</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>SystemChannel
        = DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>RequestedData
        = DDERequest(SystemChannel, &quot;ActiveProject&quot;)</b></font></p>
        <p><b>ActiveProjectName
        = RequestedData(1)</b></font></p>
        <p><b>DocumentChannel
        = DDEInitiate(&quot;winproj&quot;, ActiveProjectName)</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>'You
        must put &quot;Company Calendar&quot; in a cell on an
        Excel sheet</b></font></p>
        <p><b>'first;
        you can't hard code &quot;Company Calendar&quot; into the</b></font></p>
        <p><b>'DDEPoke
        statement</b></font></p>
        <p><b>Sheets(&quot;Sheet1&quot;).Range(&quot;A1&quot;)
        = &quot;Company Calendar&quot;</b></font></p>
        <p><b>DDEPoke
        DocumentChannel, &quot;P(4)&quot;,
        Sheets(&quot;Sheet1&quot;).Range(&quot;a1&quot;)</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>DDETerminate
        SystemChannel</b></font></p>
        <p><b>DDETerminate
        DocumentChannel</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        OLE_2()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>oMSP.ProjectSummaryInfo
        calendar:=&quot;Company Calendar&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>This
            MSProject macro displays the list of available task
            tables. That includes all task tables in Global.mpt
            and all task tables in the active project. There is
            no direct way to do this using DDE.</font></p>
        
        <p><b>Sub
        ole7()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Dim n
        As Integer</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>For n
        = 1 To oMSP.ActiveProject.TaskTableList.Count</b></font></p>
        <p><b>MsgBox
        oMSP.ActiveProject.TaskTableList(n)</b></font></p>
        <p><b>Next
        n</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b><i>RUNNING
    ANOTHER APPLICATION'S MACROS</i></b></font></p>
    
        <p><b>MSProject
        Macros Running Excel Macros</b></font></p>
        
            <p>MSProject
            macros can use DDE and OLE Automation to run Excel
            macros that take no arguments. It's also possible for
            an MSProject macro to pass arguments to an Excel
            procedure and even to get the result back from an
            Excel function procedure, but only using OLE
            Automation.</font></p>
            <p>In
            these examples, it is assumed the Excel macros being
            called are in the active workbook, and that the macro
            names are unique.</font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these MSProject macros runs the Excel macro
            ExcelSubNoArgs that takes no arguments. The Excel
            macro ExcelSubNoArgs is shown after the MSProject
            macros.</font></p>
        
        <p><b>Sub
        DDE_1()</b></font></p>
        <p><b>DDEInitiate
        &quot;Excel&quot;, &quot;System&quot;</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Excel&quot;</b></font></p>
        <p><b>DDEExecute
        &quot;[Run(&quot;&quot;ExcelSubNoArgs&quot;&quot;)]&quot;,
        60</b></font></p>
        <p><b>DDETerminate</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>MsgBox
        &quot;MSProject macro is continuing.&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>Sub
        OLE_1()</b></font></p>
        <p><b>Dim x
        As Object</b></font></p>
        <p><b>Set x
        = GetObject(, &quot;Excel.Application&quot;)</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Excel&quot;</b></font></p>
        <p><b>x.Run
        &quot;ExcelSubNoArgs&quot;</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>MsgBox
        &quot;MSProject macro is continuing.&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>Here's
            the Excel macro that is called by the above MSProject
            macros:</font></p>
        
        <p><b>Sub
        ExcelSubNoArgs()</b></font></p>
        <p><b>MsgBox
        &quot;ExcelSubNoArgs message&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p></font>&nbsp;</p>
    


<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            
                <p>This
                illustrates an MSProject macro using OLE
                Automation to pass arguments to an Excel sub
                procedure.</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">1. Enter the following Excel
                    procedure. This will be called from the
                    MSProject macro in step 2.</font></p>
                
            
            
                <p><b>Sub
                ExcelSubWithArgs(dur As Long, start As Date)</b></font></p>
                <p><b>MsgBox
                dur &amp; &quot;, &quot; &amp; start</b></font></p>
                <p><b>End
                Sub</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">2. Enter the following
                    MSProject macro and run it. It passes a
                    duration in minutes and a start date to the
                    above Excel macro.</font></p>
                
                <p><b>Sub
                MSProjectMacro1()</b></font></p>
                <p><b>Dim
                x As Object</b></font></p>
                <p><b>Set
                x = GetObject(, &quot;Excel.Application&quot;)</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Excel&quot;</b></font></p>
                <p><b>x.Run
                &quot;ExcelSubWithArgs&quot;, 480, #1/1/95
                10:00:00 AM#</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>MsgBox
                &quot;MSProject macro is continuing.&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        </td>
    </tr>
</table>
  
        
            <p><b>NOTE</b>:
            MSProject can't use DDEExecute to pass arguments to
            an Excel macro. The DDEExecute statement in the
            MSProject macro below attempts to execute the
            ExcelSubWithArgs macro above. The MSProject macro
            below causes the Excel error: <b><i>Cannot find macro
            'ExcelSubWithArgs 480, #1/1/95 10:00:00 AM#'.</i></b></font></p>
        
        <p><b>Sub
        DDE_2()</b></font></p>
        <p><b>DDEInitiate
        &quot;Excel&quot;, &quot;system&quot;</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Excel&quot;</b></font></p>
        <p><b>DDEExecute
        _</b></font></p>
        <p><b>&quot;[Run(&quot;&quot;ExcelSubWithArgs
        480, #1/1/95 10:00:00 AM#&quot;&quot;)]&quot;</b></font></p>
        <p><b>DDETerminate</b></font></p>
        <p><b>End
        Sub</b></font></p>
    


<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">This illustrates an MSProject
                    macro that uses OLE Automation to pass
                    arguments to an Excel function procedure and
                    assigns the returned value to an MSProject
                    variable.</font></p>
                
            
            <p>1.
            Enter the following Excel function procedure. This
            will be called from the MSProject macro in step 2.
            The Excel function procedure returns the largest of
            the three numbers passed to it.</font></p>
            
                <p><b>Function
                ExcelFnWithArgs(a As Double, b As Double, c As
                Double)</b></font></p>
                <p><b>Dim
                maxnum As Double</b></font></p>
                <p><b>maxnum
                = a</b></font></p>
                <p><b>If
                b &gt; maxnum Then</b></font></p>
                <p><b>maxnum
                = b</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>If
                c &gt; maxnum Then</b></font></p>
                <p><b>maxnum
                = c</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>ExcelFnWithArgs
                = maxnum</b></font></p>
                <p><b>End
                Function</b></font></p>
            
            <p>2.
            Enter the following MSProject macro and run it. It
            should display a 10 which is the largest of the three
            numbers passed to the Excel function above.</font></p>
            
                <p><b>Sub
                MSProjectMacro1()</b></font></p>
                <p><b>Dim
                x As Object, result As Double</b></font></p>
                <p><b>Set
                x = GetObject(, &quot;Excel.Application&quot;)</b></font></p>
                <p><b>result
                = x.Run(&quot;ExcelFnWithArgs&quot;, 10, 5, 3)</b></font></p>
                <p><b>MsgBox
                &quot;result is: &quot; &amp; result</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        </td>
    </tr>
</table>
  <p><b><i>Excel
    Macros Running MSProject Macros</i></b></font></p>
    
        
            <p>Excel
            macros can use DDE and OLE Automation to run
            MSProject macros that take no arguments. It's also
            possible for an Excel macro to pass arguments to an
            MSProject procedure, but only using DDEExecute. It's
            not possible for an Excel macro to directly read
            values returned by calling an MSProject function
            procedure.</font></p>
            <p>In
            these examples, it is assumed the MSProject macros
            are either in the Global.mpt or in the active
            project, and that the macro names are unique.</font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>Each
            of these Excel macros runs the MSProject macro
            &quot;ProjectMacro1&quot; shown after the Excel
            macros. Assume there is only one MSProject macro with
            that name.</font></p>
        
        <p><b>Sub
        dde9()</b></font></p>
        <p><b>Dim
        SystemChannel As Integer</b></font></p>
        <p><b>SystemChannel
        = DDEInitiate(&quot;winproj&quot;, &quot;system&quot;)</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Project&quot;</b></font></p>
        <p><b>DDEExecute
        SystemChannel, &quot;ProjectMacro1&quot;</b></font></p>
        <p><b>DDETerminate
        SystemChannel</b></font></p>
        <p><b>AppActivate
        &quot;Microsoft Excel&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p><b>Sub
        ole9()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p><b>oMSP.Macro
        &quot;ProjectMacro1&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>Here's
            the MSProject macro that was called by the above
            Excel macros:</font></p>
        
        <p><b>Sub
        ProjectMacro1()</b></font></p>
        <p><b>MsgBox
        &quot;ProjectMacro1 is running&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
    


<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The Excel macro below uses DDE
                    to pass arguments to an MSProject sub
                    procedure.</font></p>
                
            
            <p>1.
            Enter the following MSProject procedure. This will be
            called from the Excel macro in step 2.</font></p>
            
                <p><b>Sub
                MSProjectMacro1(s As String, n As Integer)</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Project&quot;</b></font></p>
                <p><b>MsgBox
                &quot;MSProjectMacro1 is running.&quot; &amp;
                Chr(10) &amp; Chr(10) _</b></font></p>
                <p><b>&amp;
                &quot;String value passed: &quot; &amp; s &amp;
                Chr(10) _ &amp; &quot;Integer value passed:
                &quot; &amp; n</b></font></p>
                <p><b>AppActivate
                &quot;Microsoft Excel&quot;</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        
            <p>2.
            Enter the following Excel macro and run it. It passes
            a string and an integer to the MSProject sub
            procedure above.</font></p>
        
        
            
                <p><b>Sub
                ExcelDDE1()</b></font></p>
                <p><b>Dim
                SystemChannel As Integer, command As String</b></font></p>
                <p><b>SystemChannel
                = DDEInitiate(&quot;winproj&quot;,
                &quot;system&quot;)</b></font></p>
                <p><b>command
                = &quot;MSProjectMacro1
                &quot;&quot;hello&quot;&quot;, 10&quot;</b></font></p>
                <p><b>MsgBox
                &quot;This is the DDEExecute command that will
                &quot; _</b></font></p>
                <p><b>&amp;
                &quot;be sent to MSProject: &quot; &amp; Chr(10)
                &amp; Chr(10) _</b></font></p>
                <p><b>&amp;
                command</b></font></p>
                <p><b>DDEExecute
                SystemChannel, command</b></font></p>
                <p><b>DDETerminate
                SystemChannel</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
            <p><b>Note</b>:
            If you want to pass the values of Excel variables s
            and n, instead of literals &quot;hello&quot; and 10,
            it might be clearer to declare QUOTE and COMMA
            constants and use them to build the DDEExecute
            command string. For example:</font></p>
            <p>Const
            QUOTE = &quot;&quot;&quot;&quot;</font></p>
            <p>Const
            COMMA = &quot;,&quot;</font></p>
            <p>command
            = &quot; MSProjectMacro1 &quot; &amp; QUOTE &amp; s
            &amp; QUOTE &amp; COMMA &amp; n</font></p>
        
        </td>
    </tr>
</table>
  
        
            <p><b>NOTE:
            </b>You can't use OLE Automation to pass arguments to
            MSProject macros. The following Excel macro attempts
            to use OLE Automation to pass arguments to
            MSProjectMacro1 from the previous &quot;Try
            This&quot; example. The Excel macro below causes the
            MSProject error: <b><i>Cannot find macro
            'ProjectMacro1 &quot;hello&quot;, 10'.</i></b></font></p>
        
        <p><b>Sub
        ole10()</b></font></p>
        <p><b>Dim
        oMSP As Object</b></font></p>
        <p><b>Set
        oMSP = GetObject(, &quot;MSProject.Application&quot;)</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>'The
        next line causes the error:</b></font></p>
        <p><b>'Cannot
        find macro 'ProjectMacro1 &quot;&quot;hello&quot;&quot;,
        10'.</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>oMSP.Macro
        &quot;ProjectMacro1 &quot;&quot;hello&quot;&quot;,
        10&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b><i>Assigning
    Values to Another Application's Global Variables</i></b></font></p>
    
        
            <p>An
            Excel macro can use DDEExecute to directly assign a
            value to an MSProject global variable.</font></p>
            <p>An
            MSProject macro can NOT directly assign a value to an
            EXCEL global variable, although it can pass an
            argument to an Excel macro that assigns the passed
            value to an Excel global variable.</font></p>
        
    


<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">The Excel macro below assigns
                    values to some global variables declared in
                    an MSProject module.</font></p>
                
            
            <p>1.
            In an MSProject module, declare the global string
            variable gProjStrVar and the global integer variable
            gProjIntVar. </font></p>
            <p>2.
            Enter and run the following Excel macro.</font></p>
            
                <p><b>Sub
                ExcelDDE1()</b></font></p>
                <p><b>Dim
                SystemChannel As Integer</b></font></p>
                <p><b>SystemChannel
                = DDEInitiate(&quot;winproj&quot;,
                &quot;system&quot;)</b></font></p>
                <p><b>DDEExecute
                SystemChannel, &quot;gProjStrVar =
                &quot;&quot;wow&quot;&quot;&quot;</b></font></p>
                <p><b>DDEExecute
                SystemChannel, &quot;gProjIntVar = 100&quot;</b></font></p>
                <p><b>DDETerminate
                SystemChannel</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
            <p>3.
            Switch to MSProject and get into the Debug Window
            (from the View menu in the Module Editor). In the
            Immediate pane of the Debug Window, examine the
            values of the global variables gProjStrVar and
            gProjIntVar. They should be wow and 100 respectively.</font></p>
        
        </td>
    </tr>
</table>

<p></font>&nbsp;</p>
  <p><b><i>Review
    of Advantages and Disadvantages of Controlling MSProject by
    DDE</i></b></font></p>
    
        
            <p>Here's
            a review of some of the advantages and disadvantages
            of using DDE to talk to MSProject from another
            application:</font></p>
        
        <p><b>Advantages</b></font></p>
        
            <ul>
                <li>Faster.
                    </font></li>
                <li>Easy
                    to get the coordinates of the selected cell.</font></li>
                <li>Asterisk
                    wild card to access &quot;all&quot; of
                    something.</font></li>
                <li>Can
                    pass arguments to MSProject macros.</font></li>
                <li>Can
                    assign values to MSProject global vars.</font></li>
            </ul>
        
        <p><b>Disadvantages</b></font></p>
        
            <ul>
                <li>Have
                    to use Unique Ids to access
                    task/resource/assignment data.</font></li>
                <li>Cryptic
                    syntax.</font></li>
                <li>Asterisk
                    wild card (overflow problems).</font></li>
                <li>Can't
                    get list of tables, views, filters, base
                    calendars.</font></li>
                <li>MSProject
                    must already be running.</font></li>
            </ul>
        
    
    <H1><i>Lesson
    4 Exercises</i></H1>    
<ol><li>Write an
    MSProject macro called AllOneDay (with no arguments) that
    sets the durations of all tasks in the active project to 1d.
    Write it so it skips blank rows. Then write an Excel macro
    that runs the AllOneDay macro. Try writing the Excel macro
    two ways: once using DDEExecute, and once using OLE
    Automation. Test each on a project that has some tasks that
    have a duration different from 1d.</font></li><br> <br>
    <li>Write an
    MSProject sub procedure called IncreaseCost that takes an
    integer argument, TaskId, and a currency argument,
    CostChange. The procedure adds the value of CostChange onto
    the FixedCost field of the task specified by TaskId. For
    example, if the current FixedCost of task 2 is $50.00, then
    the following call will increase it to $80.25:</font></li><br> <br>
            
            <p>IncreaseCost
            2, 30.25</font></p>
    
    
    <p>Write an
    Excel macro that passes the values 1 and 10.50 to the
    MSProject sub procedure IncreaseCost. Test it. It should add
    $10.50 to the FixedCost of task 1 each time you run it.</font></p>
</ol>
</FONT></BODY>
</html>

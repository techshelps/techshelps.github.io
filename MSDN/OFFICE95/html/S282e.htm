<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storing Values When a Macro Ends</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Storing Values When a Macro Ends</H2><P CLASS="t">When a macro ends, the values stored in its variables are lost. If a macro needs to preserve a value, it must store that value outside itself, preferably in a place from which the value can be easily retrieved. Consider, for example, a document-numbering macro that runs each time a document is created and assigns a unique number to the new document. Each time a document is created, the macro must "remember" the number it assigned to the previous document the last time it ran, so that it can generate an appropriate new number. Then the macro must store the new number so that the number can be referenced the next time the macro runs.</P>
<P CLASS="t">This section describes how a macro can use a settings file, document variables, document properties, or AutoText entries to store information.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>Settings Files</H3><P CLASS="t">A settings file is a file used by programs and macros to store values; you can think of a setting as a variable stored in a file. In Windows terminology, WIN.INI, the settings file used by Microsoft Windows 3.<I>x</I> and many 16-bit Windows-based applications, is a "public" settings file because it can be used by more than one application. Settings files created for use by particular applications are "private" settings files. In Windows, settings files are text files and can be opened by a text editor like any other text file. On the Macintosh, settings files are not text files; they can only be edited directly using the ResEdit&trade; program.</P>
<P CLASS="t">WordBasic provides the <B>SetPrivateProfileString</B> statement and the <B>GetPrivateProfileString$</B><B>()</B> function for accessing private settings files. You<BR>use <B>SetPrivateProfileString</B> to assign a setting to a private settings file. Here is<BR>the syntax:</P>
<P CLASS="syn"><B>SetPrivateProfileString</B> <I>Section$</I><B>,</B><I> KeyName$</I><B>,</B> <I>Setting$</I><B>,</B><I> Filename$</I></P>
<P CLASS="t"><I>Section$</I> is the name of a section within the settings file. <I>KeyName$</I> is the name of the "key" — the equivalent of a variable name. <I>Setting$</I> is the value you are assigning to the key. <I>Filename$</I> is the name of the settings file. If the file doesn't exist, <B>SetPrivateProfileString</B> creates it. Here's what a typical Windows settings file might look like if you opened it in a text editor.</P>
<P CLASS="a">    <img src="atr0901.gif"></P>
<P CLASS="t"></P>
<P CLASS="t">The settings files for Windows-based applications usually have filenames with<BR>the .INI filename extension. ("INI" is short for "initialization"; a settings file is<BR>also known as an initialization file because an application that is starting up, or initializing, can use its initialization file to retrieve settings from the last time it ran.) Although you can give any extension to the Windows settings files you create, using the .INI extension helps to make their purpose clear. On the Macintosh, it's similarly useful to include "Settings" in a settings filename. One advantage of creating a settings file with <B>SetPrivateProfileString</B> is that the file is stored automatically in the Windows folder in Windows or in the Preferences folder on the Macintosh (assuming you don't specify a path for <I>Filename$</I>). Since the instruction doesn't specify the name of the Windows or Preferences folder, your macro isn't dependent on a particular folder name or structure, and you can distribute it to other users without modification. </P>
<P CLASS="t">WordBasic does not include statements or functions to handle numeric values in settings files. To store a numeric value, first use the <B>Str$</B><B>()</B> function to convert it to a string. To retrieve the value, use the <B>Val</B><B>()</B> function to convert the string setting back to a number.</P>
<P CLASS="t">You use <B>GetPrivateProfileString$</B><B>()</B> to retrieve the value of the specified <I>KeyName$</I> stored in a settings file. Here is the syntax:</P>
<P CLASS="syn"><B>GetPrivateProfileString$(</B><I>Section$</I><B>, </B><I>KeyName$</I><B>,</B><B><I> </I></B><I>Filename$</I><B>)</B></P>
<P CLASS="t"><I>Section$</I>, <I>KeyName$</I>, and <I>Filename$</I> are used in the same way as the arguments in the <B>SetPrivateProfileString</B> statement.</P>
<P CLASS="t">You can use any number of settings files, but it's best to avoid using more files than necessary. In fact, you can use a single settings file for all your macros. Section headings provide a way to group settings and prevent key-name conflicts. For example, two different macros can both use a key called "Directory 1" without conflict, assuming the two key names are associated with different section names. In Windows, a settings file is just a text file, so you're not restricted to only using WordBasic instructions to access it. If you've forgotten what you've stored, you can always use Word to open a Windows settings file in a document window. On the Macintosh, you can use the ResEdit program to edit a settings file.</P>
<H4 CLASS="h4"><A NAME="sec1"></A>Examples</H4><P CLASS="t">Here is a simple document-tracking macro that assigns a number to every new document. The macro is an AutoNew macro that runs whenever a new document is created. The macro uses <B>GetPrivateProfileString$</B><B>()</B> to retrieve the current document number, increments it by 1, and then uses <B>SetFormResult</B> to insert the number in a form field. Finally, the macro uses <B>SetPrivateProfileString</B> to store the new number in the settings file.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
docnum$ = GetPrivateProfileString$("DocTracker", "DocNum", "MACRO.INI")
docnum$ = Str$((Val(docnum$) + 1))
SetFormResult "DocNumField", docnum$
SetPrivateProfileString "DocTracker", "DocNum", docnum$, "MACRO.INI"
End Sub
</PRE>
<P CLASS="t">Using a <B>For…Next</B> loop to retrieve or assign a large number of settings is a very useful technique. The following subroutine uses a <B>For…Next</B> loop to retrieve a list of seven folder names from a settings file and load them into an array. The key names for the folder names include numbers: "Dir 1" for the first key,<BR>"Dir 2" for the second key, and so on. The loop uses these numbers to enumerate<BR>the key names so that, instead of requiring a separate <B>GetPrivateProfileString$</B><B>()</B> for each key name, the subroutine can use just one instruction.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub GetDirNames
For count = 1 To 7
    dirListname$ =  "Dir" + LTrim$(Str$(count - 1))
    dirNames$(count - 1) = GetPrivateProfileString$("DirList", \
                            dirListname$, "MACRO.INI")
Next
End Sub
</PRE>
<P CLASS="t">This subroutine is used in the ChangeDirectory macro provided in the EXAMPLES.DOT (Windows) or MACRO EXAMPLES (Macintosh) template supplied on the Microsoft Word Developer's Kit disk. The macro displays the dialog box shown in the following illustration. By selecting one of the folders listed, the user can quickly move to that folder.</P>
<P CLASS="a">    <img src="atr0902.gif"></P>
<H3 CLASS="h3"><A NAME="sec2"></A>Using the WIN.INI File</H3><P CLASS="t">WIN.INI is the "public" settings file used by Windows 3.<I>x</I>. Using the <B>SetProfileString</B> statement and <B>GetProfileString$</B><B>()</B> function, you can store information in and retrieve information from the WIN.INI file in the same way you can with private settings files.</P>
<P CLASS="t">In addition to Windows 3.<I>x</I>, 16-bit Windows-based applications such as Word version 6.0 for Windows store settings information in WIN.INI, and this can lead to a large, inefficient file. For this reason, it's usually best not to store private settings in the WIN.INI file. But <B>SetProfileString</B> and <B>GetProfileString$</B><B>()</B> can be useful for retrieving and changing Windows environment settings in WIN.INI.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Windows 95 and Windows NT do not use the WIN.INI file. Instead, they store settings in the registry. <B>SetProfileString</B> and <B>GetProfileString$</B><B>()</B> are available in Windows 95 and Windows NT, but there is no reason to use them, as they do not affect settings in the registry; in effect, they become limited versions of <B>SetPrivateProfileString</B> and <B>GetPrivateProfileString$</B><B>()</B> that work with just one settings file that happens to be called WIN.INI.</P>
<P></P>
<H4 CLASS="h4"><A NAME="sec3"></A>Example</H4><P CLASS="t">This Word version 6.0 example checks the Windows 3.<I>x</I> "long date" format. If the format doesn't match "dddd d MMMM yyyy" (for example, "Sunday 23 May 1993"), <B>SetProfileString</B> changes the setting to that format.</P>
<P CLASS="spacing"><BR></P>
<PRE>format$ = GetProfileString$("intl", "sLongDate")
If format$ &lt;&gt; "dddd d MMMM yyyy" Then
    SetProfileString "intl", "sLongDate", "dddd d MMMM yyyy"
End If
</PRE>
<H3 CLASS="h3"><A NAME="sec4"></A>Accessing WINWORD6.INI and Word Settings (6)</H3><P CLASS="t">Word version 6.0 for Windows settings are stored in a settings file called WINWORD6.INI; in Word version 6.0 for the Macintosh, they're stored in the Word Settings (6) file. In Windows, you can use <B>GetPrivateProfileString$</B><B>()</B> and <B>SetPrivateProfileString</B> to retrieve and change settings. On the Macintosh, you can use <B>GetProfileString$</B><B>()</B> and <B>SetProfileString</B> to change settings in the Word Settings (6) file. For example, the following Word version 6.0 for Windows instruction sets the Word DDETimeOut setting to 100 seconds in WINWORD6.INI:</P>
<P CLASS="spacing"><BR></P>
<PRE>SetPrivateProfileString "Microsoft Word", "DDETimeOut", \<BR>    "100", "WINWORD6.INI"
</PRE>
<P CLASS="t">Here is the equivalent instruction for Word version 6.0 for the Macintosh:</P>
<P CLASS="spacing"><BR></P>
<PRE>SetProfileString "Microsoft Word", "DDETimeOut", "100"</PRE>
<H3 CLASS="h3"><A NAME="sec5"></A>Accessing the Windows Registry</H3><P CLASS="t">In Windows 95 and Windows NT, the registry is a system-wide database used for storing software and hardware configuration settings. The registry is created during system setup and is updated whenever you add or remove software or hardware. Windows 95 and Windows NT store settings in the registry instead of the WIN.INI file. You can view and edit the contents of the registry using the Registry Editor (REGEDIT.EXE in Windows 95, REGEDT32.EXE in <BR>Windows NT). </P>
<P CLASS="t">While most settings for Word version 6.0 for Windows are stored in WINWORD6.INI, most settings for Word version 6.0 for Windows NT and Word version 7.0 are stored in the registry under the following key: HKEY_CURRENT_USER\Software\Microsoft\Word\6.0 (or 7.0).</P>
<P CLASS="t">From WordBasic, you can access the registry information using the <B>GetPrivateProfileString$</B><B>()</B> function. You use an empty string ("") instead of the name of a settings file to specify the registry. For example, the following instruction assigns the Word version 7.0 document path (DOC-PATH) from the registry to the variable a$:</P>
<P CLASS="spacing"><BR></P>
<PRE>key$ = "HKEY_CURRENT_USER\Software\Microsoft\Word\7.0\Options"
a$ = GetPrivateProfileString$(key$, "DOC-PATH", "")
</PRE>
<P CLASS="t">You can also modify information in the registry using the <B>SetPrivateProfileString</B> statement. Note that even though you can use <B>SetPrivateProfileString</B> to add keys to the registry, macro settings are best stored in a private settings file to avoid corrupting important application settings.</P>
<H4 CLASS="h4"><A NAME="sec6"></A>Example</H4><P CLASS="t">The DateFormat setting in the registry sets the default date format for Word version 7.0. This example uses the <B>SetPrivateProfileString</B> statement to set the date format to "dddd d MMMM yyyy." A future date is calculated and the result is then displayed in the new date format. </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
key$ = "HKEY_CURRENT_USER\Software\Microsoft\Word\7.0\Options"
SetPrivateProfileString(key$, "DateFormat", "dddd d MMMM yyyy", "")
MsgBox Date$(Now() + 7)
End Sub
</PRE>
<H3 CLASS="h3"><A NAME="sec7"></A>Document Variables</H3><P CLASS="t">A document variable is a variable stored as part of a document. It is available<BR>only when the document in which it is stored is the active document. Document variables are similar to key names in a settings file; they are accessed through the complementary <B>SetDocumentVar</B> statement and <B>GetDocumentVar$</B><B>()</B><B> </B>function. Here is the syntax for <B>SetDocumentVar</B>:</P>
<P CLASS="t"><B>SetDocumentVar </B><I>VariableName$</I><B>,</B> <I>Text$</I></P>
<P CLASS="t"><I>VariableName$</I> is the name of the document variable and <I>Text$</I> is the string value you are assigning to the variable. Document variables accept only string values. Here is the syntax for <B>GetDocumentVar$</B><B>()</B>:</P>
<P CLASS="t"><B>GetDocumentVar$(</B><I>VariableName$</I><B>)</B></P>
<P CLASS="t">Document variables are available only through WordBasic instructions, so the user cannot inadvertently change them. And since they are contained within the document, they travel with it: If you move the document to another computer, for example, the document variables remain available. A document can contain any number of document variables.</P>
<P CLASS="t">If you add document variables to a template, the variables, including their values, will be stored in all new documents that are subsequently based on the template.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Document variables are not saved when a document is saved in rich-text format (RTF).</P>
<P></P>
<P CLASS="t">If you plan to store a document variable in a document that may contain other document variables, you should ensure that the variable name you are planning to use does not already exist in the document. Two functions are provided for this purpose: <B>CountDocumentVars</B><B>()</B> and <B>GetDocumentVarName$</B><B>()</B>. <B>CountDocumentVars</B><B>()</B> returns the number of document variables stored<BR>in the active document. Given a number between 1 and the value returned by <B>CountDocumentVars</B><B>()</B>, <B>GetDocumentVarName$</B><B>()</B> returns the name of the corresponding document variable. For example, the following instructions determine whether a document variable named "TrackingNum" already exists<BR>in a document:</P>
<P CLASS="spacing"><BR></P>
<PRE>For count = 1 To CountDocumentVars()
    If GetDocumentVarName$(count) = "TrackingNum" Then
        MsgBox "TrackingNum already exists."
        Goto bye
    End If
Next
bye:</PRE>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="347pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>Deleting a Document Variable</B></P>
<P CLASS="sbrt">WordBasic does not include a command to delete document variables, but if you set a document variable to an empty string, the document variable is removed. For example, the following instruction removes a document variable called ReminderMsg:</P>
<P CLASS="ct">SetDocumentVar ReminderMsg, ""</P>
<P CLASS="ct"></P>
<P CLASS="sbrt">The following instructions remove all of the document variables from a document:</P>
<P CLASS="ct">For count = 1 To CountDocumentVars()</P>
<P CLASS="ct">    SetDocumentVar GetDocumentVarName$(1), ""</P>
<P CLASS="ct">Next</P>
<P CLASS="ct"></P>
<P CLASS="sbrt">Another way to remove all of the document variables in a document is to save the document in rich-text format (RTF). Since document variables are not saved in RTF, they will no longer be in the document.</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H4 CLASS="h4"><A NAME="sec8"></A>Example</H4><P CLASS="t">This macro displays a dialog box showing the revision history for a document<BR>and providing a text box in which the user can type a new entry. Each entry in the revision history is stored in a document variable. Before displaying the dialog box, the macro retrieves the revision entries from the document variables and loads them into an array that will be displayed in a list box. If the user creates a new revision entry, the macro adds the current date as a prefix and stores the entry in a new document variable.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
If CountDocumentVars() &gt; 0 Then
    Dim docVarArray$(CountDocumentVars() - 1)
    For count = 1 To CountDocumentVars()
        docVarArray$(count - 1) = \<BR>                     GetDocumentVar$(GetDocumentVarName$(count))
    Next
Else
    Dim docVarArray$(0)
End If
Begin Dialog UserDialog 508, 214, "Revision History"
    Text 12, 133, 105, 13, "New Revision", .Text2
    TextBox 12, 149, 453, 18, .NewRevision
    OKButton 380, 186, 88, 21
    CancelButton 282, 186, 88, 21
    Text 12, 6, 80, 13, "Revisions:", .Text1
    ListBox 12, 21, 473, 106, docVarArray$(), .ListBox1
End Dialog
Dim dlg As UserDialog
x = Dialog(dlg)
If dlg.NewRevision &lt;&gt; "" Then
    revVarName$ = "rev" + LTrim$(Str$(CountDocumentVars()))
    revText$ = Date$() + " - " + dlg.NewRevision
    SetDocumentVar revVarName$, revText$
End If
End Sub
</PRE>
<P CLASS="t">Here is the dialog box, showing some sample revisions.</P>
<P CLASS="a">    <img src="ATR0903.gif"></P>
<H3 CLASS="h3"><A NAME="sec9"></A>Document Properties</H3><P CLASS="t">Like document variables, document properties allow you to store information along with a document. Document properties can be viewed and modified in the Properties dialog box (File menu). Unlike document variables, document properties can be inserted into a document using the DOCPROPERTY field. </P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Document properties are available only in Word version 7.0.</P>
<P></P>
<P CLASS="t">Document properties are defined using the <B>SetDocumentProperty</B> statement. Here is the syntax for <B>SetDocumentProperty</B>:</P>
<P CLASS="syn"><B>SetDocumentProperty</B> <I>Name$</I><B>,</B> <I>Type</I><B>, </B><I>Value[$]</I><B>, </B><I>CustomOrBuiltIn</I></P>
<P CLASS="t"><I>Name$</I> is the name of the document property and <I>Type</I> specifies the data type you want to store in the document property. <I>Value[$]</I> is the number, string, or date you are assigning to the document property. <I>CustomOrBuiltIn</I> specifies whether you are defining a custom or built-in property. (Document properties include custom properties that you add as well as built-in properties such as "Company.") </P>
<H4 CLASS="h4"><A NAME="sec10"></A>Examples</H4><P CLASS="t">This example prompts for a company name and then set the results in the built-in "Company" document property. </P>
<P CLASS="spacing"><BR></P>
<PRE>CompanyName$ = InputBox$("Type your company name", "Company Name")
SetDocumentProperty("Company", 0, CompanyName$, 1)
</PRE>
<P CLASS="t">The text you type appears as the company name on the Summary tab in the Properties dialog box (File menu).</P>
<P CLASS="t">The following macro displays a dialog box showing the built-in and custom document properties for the active document. Prior to displaying the dialog box, the macro retrieves the document property names and stores them in an array. If the user chooses OK, the contents of the selected property are inserted into the document.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
Dim prop$(CountDocumentProperties() - 1)
For count = 1 To CountDocumentProperties()
    prop$(count - 1) = DocumentPropertyName$(count)
Next
Begin Dialog UserDialog 340, 144, "Document Properties"
    OKButton 229, 104, 88, 21
    CancelButton 131, 104, 88, 21
    ListBox 24, 12, 293, 84, prop$(), .property
End Dialog
Dim dlg As UserDialog
n = Dialog(dlg)
If prop$(dlg.property) &lt;&gt; "" And n = - 1 Then
    Insert prop$(dlg.property) + ":" + Chr$(9)
    type = DocumentPropertyType(prop$(dlg.property))
    Select Case type
        Case 0, 2, 3
            text$ = GetDocumentProperty$(prop$(dlg.property))
            Insert text$
        Case 1
            Num = GetDocumentProperty(prop$(dlg.property))
            Insert LTrim$(Str$(Num))
        Case Else
    End Select
End If
End Sub
</PRE>
<P CLASS="t">The previous macro inserts document properties as plain text. You can also insert document properties using the DOCPROPERTY field. For example, the following instruction inserts a field that references the "Company" document property:</P>
<P CLASS="spacing"><BR></P>
<PRE>InsertField .Field = "DOCPROPERTY Company"
</PRE>
<P CLASS="t">The DOCPROPERTY field ensures that the latest property information appears in your document when the field is updated. </P>
<H3 CLASS="h3"><A NAME="sec11"></A>AutoText Entries</H3><P CLASS="t">AutoText entries can be used to store information in a template. The <B>SetAutoText</B> statement defines a text-only AutoText entry. Here is the syntax:</P>
<P CLASS="syn"><B>SetAutoText</B> <I>Name$</I><B>, </B><I>Text$</I> [<B>, </B><I>Context</I>]</P>
<P CLASS="t"><I>Name$</I> is the AutoText entry name, <I>Text$</I> is the text defined with the AutoText entry, and <I>Context</I> indicates where the AutoText entry is stored (the active template or the Normal template). The complementary <B>GetAutoText$</B><B>()</B> function retrieves the contents of an AutoText entry. </P>
<H4 CLASS="h4"><A NAME="sec12"></A>Example</H4><P CLASS="t">The following macro defines an entry named INVOICE# in the active template (a template other than Normal). Each time the macro is run, the invoice number in the INVOICE# AutoText entry is incremented by one. If this macro were named AutoNew and stored in a special invoice template, the macro would automatically insert an invoice number with each new invoice created. </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
number = Val(GetAutoText$("INVOICE#", 1)) + 1
InvoiceNum$ = LTrim$(Str$(number))
SetAutoText "INVOICE#", InvoiceNum$, 1
Insert "Invoice: " + invoicenum$
End Sub
</PRE></FONT></FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLQueryRetrieve</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H3 CLASS="h2">SQLQueryRetrieve</H3><P CLASS="h"><B>Syntax</B></P>
<P CLASS="t"><B>SQLQueryRetrieve(</B><I>ConnectNum</I><B>, </B><I>Column</I><B>, </B><I>DataVar</I><B>$, </B><I>DataSize</I><B>)</B></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Assigns to the <I>DataVar</I><B>$</B> variable the data in the specified <I>Column</I> of the current row (the row where <B>SQLQueryFetch</B> or <B>SQLSetRowPos</B> positioned the cursor) of the query result. To use <B>SQLQueryRetrieve</B>, a macro must have already established a connection using <B>SQLOpen</B>. Also, a query must have already been executed using <B>SQLQueryExec</B>, and results must be pending.</P>
<P CLASS="t">You cannot use <B>SQLQueryRetrieve</B> to return data from a query executed by <B>SQLExecQuery</B>.</P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt"><B>SQLQueryRetrieve</B> assigns the data to the characters in <I>DataVar</I><B>$</B>, up to the number of characters specified by <I>DataSize</I>. If the number of characters assigned to <I>DataVar</I><B>$</B> before it is used by <B>SQLQueryRetrieve</B> is less than <I>DataSize</I>, <B>SQLQueryRetrieve</B> may cause memory errors.</P>
<P CLASS="nt">To avoid memory errors, the macro must ensure that the value of <I>DataVar</I><B>$</B> is at least <I>DataSize</I> characters long before it is used in a <B>SQLQueryRetrieve</B> instruction.</P>
<P></P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="276pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Argument</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Explanation</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>ConnectNum</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The unique connection ID for a data source. The data source specified must have pending query results. If <I>ConnectNum </I>is not valid, <B>SQLQueryExec</B> would have returned an error value. In such a case, <B>SQLQueryRetrieve </B>places error information in memory for the error functions, if such information is available. </P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>Column</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The number of a column in the data source from which to retrieve data. Use <B>SQLRetrieveColumns </B>to determine the valid range of values. If the column value is out of range, <B>SQLQueryRetrieve</B> returns 0 (zero) and places the error information in memory for the error functions.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>DataVar$</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The variable to which <B>SQLQueryRetrieve</B> assigns the data, up to the number of characters specified by <I>DataSize</I>. Before the <B>SQLQueryRetrieve</B> instruction is run, the value of <I>DataVar</I><B>$</B> must be at least <I>DataSize</I> characters long. Otherwise, memory errors may occur.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><I>DataSize</I></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Specifies the width of the data at <I>Column. </I>T<I>o</I> determine the value for <I>DataSize</I>, use <B>SQLRetrieveColSize</B>. If the length of the data in <I>Column</I> exceeds <I>DataSize</I>, <B>SQLQueryRetrieve</B> truncates the data.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">If the data cannot be returned successfully, <B>SQLQueryRetrieve</B> returns 0 (zero) or a negative error value.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">The following example uses a <B>While...Wend</B> loop to return the data in each column of each row in the pending data source with <B>SQLQueryRetrieve</B> so it can be processed.</P>
<P CLASS="spacing"><BR></P>
<PRE>cols = SQLRetrieveColumns(connect_no)
ret = SQLQueryFetch(connect_no)
While ret = 1
    For i = 1 To cols
        storsize = SQLRetrieveColSize(connect_no, i)
        stor$ = String$(storsize, 50)
        SQLQueryRetrieve(connect_no, i, stor$, storsize)
        ' Statement block that processes the value of stor$
    Next i
ret = SQLQueryFetch(connect_no)
</PRE></FONT></FONT></BODY></HTML>

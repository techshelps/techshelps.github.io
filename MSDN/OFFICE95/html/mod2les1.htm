<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 1: Application and Project Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817458">Lesson
1: </font></a>Application and
Project Objects</font></H1>
  <p><b><i>Lesson
    Objectives</i></b></font></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
    
    <ul>
        <li>Navigate
            through the Object Hierarchy.</font></li>
        <li>Execute
            Application and Project Methods.</font></li>
        <li>Understand
            how to locate different Methods and Properties.</font></li>
        <li>Understand
            what a collection is.</font></li>
        <li>Understand
            how and where macros are stored.</font></li>
    </ul>
    
        <p><b>Some Topics to
        be introduced in this lesson include:</b></font></p>
        
            <ul>
                <li>Object
                    Hierarchy</font></li>
                <li>Navigation</font><font
                    color="#000000"
                    face="verdana,arial,helvetica"> </font><font
                    color="#000000" size="2" face="Verdana">Differences
                    between 3.0 and 4.0</font></li>
                <li>Moving
                    the active cell.</font></li>
                <li>Comonalities
                    between Methods and Properties</font></li>
                <li>CurrentView,
                    Table and Filter</font></li>
            </ul>
        
    
    <p><b><i>Overview
    of Object Hierarchy</i></b></font></p>


<p>Visual Basic for
Applications allows each application to extend the Visual Basic
language with application specific objects. Microsoft Excel
exposes Workbook, Chart, and Cell objects whereas Microsoft
Project exposes Project, Task, Resource, and Calendar objects. Of
course, there are places of overlap. Both Microsoft Project and
Excel expose Application and Windows objects and wherever
possible the shared objects have the same properties and methods.
</font></p>
  
        <p><b>Nesting of
        Objects</b></font></p>
    


<p>Objects are
nested within each other to form a hierarchy. The Application
contains the Projects, which contain the Tasks, which contain the
Assignments. It is probably easiest to understand the hierarchy
of the Microsoft Project object model through a figure.</font></p>

<p><img
src="Image221.gif" align="left" hspace="0" width="553"
height="444"></font>
</font></p>

<p align="center"><i>The
Object Hierarchy for Microsoft Project</i></font></p>
  
        
            <p><b>Navigation</b></font></p>
        
    


<p>As you can see,
the Application object sits at the top of the hierarchy. From the
Application object you can navigate down to any other object. For
example, the Duration field is contained in a Task which is
contained in a Project which is contained in the Application. So
to modify the Duration, you specify:</font></p>
  
        
            <p><b>Application.Projects(1).Tasks(3).Duration
            = &quot;3d&quot;</b></font></p>
        
    


<p>Fortunately,
there are some shortcuts that are available when referencing
objects. First, the Application object is optional when accessing
objects within Microsoft Project. So you can use:</font></p>
  
        
            <p><b>Projects(1).Tasks(3).Duration
            = &quot;3d&quot;</b></font></p>
        
    


<p>Additionally,
there are some pre-defined reference objects for commonly used
objects. For example, there is an ActiveProject object which
always refers to the active project. So, if Projects(1) were the
active project, the same duration field can be accessed like:</font></p>
  <p><b>ActiveProject.Tasks(3).Duration
    = &quot;3d&quot;</b></font></p>
    <p><b>ActiveCell.Task.Duration
    = &quot;5d&quot;</b></font></p>
    
        
            <p><b>Common
            Objects</b></font></p>
        
    


<p>There are some
objects which are common to Microsoft Project and Excel. For
example, both products support automatic or manual recalculation.
Hence, the Application objects in both products have a
Calculation property. For example, the following code has the
same effect in Excel as it does in Project.</font></p>

<p><b>Application.Calculation
= True</b></font></p>
  
        
            <p><b>Differences
            between Microsoft Project and Excel</b></font></p>
        
    


<p>One difference
to note between the implementation of Visual Basic for
Applications in Microsoft Project and Excel is the extent of
their respective object models. Microsoft Excel has taken the
approach of creating objects for all of the data and user
interface. In Microsoft Project, the emphasis was on exposing
objects for the unique scheduling data (tasks, resources, etc...)
and a hierarchy for navigating to that data. Most of the user
interface elements are left to statements (such as FileOpen).</font></p>

<p>This difference
can be seen in things like the way you close a file. In Microsoft
Project, you use the FileClose statement:</font></p>
  
        
            <p><b>Projects(2).Activate</b></font></p>
            <p><b>FileClose</b></font></p>
        
    


<p>In Microsoft
Excel, you can do this in one step:</font></p>
  
        
            <p><b>Workbooks(2).Close</b></font></p>
        
    


<p>Another
important difference is in the level of user input available in
Microsoft Project and Excel. Visual Basic for Applications
currently only provides the Visual Basic language. Excel has
implemented a dialog editor in the form of Dialog Sheets which
allow the user to obtain much of the benefit of the stand-alone
Visual Basic dialog editor. In Excel, you can attach code to
buttons and tie controls to worksheet cells.</font></p>

<p>Microsoft
Project, on the other hand, provides forms for entering
information about tasks or resources. These custom forms can
include any of the fields that Microsoft Project supports. If a
great level of user interaction is required beyond entering
information about tasks or resources, it may be advantageous to
use the stand-alone Visual Basic and control Microsoft Project
through OLE Automation. This way you can leverage the great
dialog tools in Visual Basic, but still access the rich
scheduling data and the user interface statements.</font></p>
  <p><b><i>Application
    Object</i></b></font></p>


<p>The Application
is at the top of the Object Model hierarchy. It is through the
Application object that all other objects can be accessed. The
Application object contains several interesting properties and
methods which are useful in macros.</font></p>
  
        
            <p><b>User
            Interface Commands and Methods</b></font></p>
        
    


<p>The Application
object contains methods which correspond to the user interface
actions. These are the same as the macro commands found in
Microsoft Project 3.0. For instance:</font></p>
  
        
            <p><b>Application.FileOpen
            Name:=&quot;project1.mpp&quot;</b></font></p>
            <p><b>Application.EditCopyPicture</b></font></p>
        
    


<p>Since the
Application object is always optional when writing macros within
Microsoft Project, you can specify these items simply by their
name:</font></p>
  
        
            <p><b>FileOpen
            Name:=&quot;project1.mpp&quot;</b></font></p>
            <p><b>EditcopyPicture</b></font></p>
        
    


<p>For people
familiar with the macro language in Microsoft Project version
3.0, there are a few differences of importance. While the names
of many of the methods remained the same, the names of some of
the methods changed to make them less tied to the menu structure
(since the menu structure tends to change from version to
version).</font></p>

<p>For example, the
3.0 command &quot;OptionsSetPlan&quot; was renamed to
&quot;BaselineSave&quot;. This change reflects both the change in
terminology introduced in Microsoft Project 4.0 (Baseline vs.
Plan) and the move away from menu-based naming.</font></p>

<p>Functionality
has been added to this class of Application methods in two ways.
First, some methods have improved functionality over their 3.0
counterparts. For example, the FileSaveAs method now has the
ability to specify a table name when exporting to a different
file format like XLS. Second, methods have been added to access
functionality that was not available in the 3.0 macro language,
like GanttBarStyleEdit. This particular command allows the macro
writer to create or modify Gantt bar styles, such as changing the
pattern and color for milestones.</font></p>
  
        <p><b>Application
        Object Methods</b></font></p>
    


<p>Application
Methods are commands that execute a Project feature. For example,
the CalculateProject method is the same as hitting F9 on your
keyboard. FileOpen is the same as choosing Open from the File
Menu.</font></p>

<p>Most of the
Application methods are used for basic Project commands. For
example, the File and Edit menu methods have the same effect as
choosing items from under your File and Edit menus.</font></p>

<p>FileNew,
FileOpen, FileClose, FileSave, FileSaveAs, FileExit, EditCut,
EditCopy, EditPaste, EditDelete, etc...</font></p>

<p>Some of the more
interesting and useful application methods are ones that enable
movement control of the active cell.</font></p>

<p>SelectCellDown,
SelectCellRight, SelectCellLeft, SelectCellUp, SelectColumn.
These allow easy movement of the active cell, similar to using
your arrow keys. The following macro calculates a formula in the
Number1 field and then moves down 3 tasks and repeats the
formula.</font></p>

<p><b>For I = 1 to
10</b></font></p>

<p><b>ActiveCell.Task.Number1
= ActiveCell.Task.Duration * 5</b></font></p>

<p><b>SelectCellDown
3</b></font></p>

<p><b>Next</b></font></p>

<p>Almost all
actions that can be performed manually in Project can be achieved
by running application methods from within a macro. When you
record a macro, you are using the user interface to issue
commands. Hence, when a macro is recorded, these Application
methods are used.</font></p>
  
        <p><b><u>Exercise1:</u></b></font></p>
    


<p>Using the record
macro feature of Project, record a macro that records as many
commands that you can think of. After you are finished recording,
edit your macro and look at the different application methods it
recorded.</font></p>
  
        <p><b><u>Exercise2:
        (MoveRect)</u></b></font></p>
    


<p>Write a macro
using application methods that saves a file you created, and then
moves the active cell around in a rectangle of any size 5 times.
Then close the file. (Do not use the macro recorder or help file,
this is an exercise to help train your mind to think in
&quot;method&quot; mode.) </font></p>
  
        <p><font color="#FF0000" face="Verdana">Sub MoveRect()</font></p>
        <p><font color="#FF0000" face="Verdana">FileSave</font></p>
        <p><font color="#FF0000" face="Verdana">For i = 1 To 5</font></p>
        <p><font color="#FF0000" face="Verdana">SelectCellRight 2</font></p>
        <p><font color="#FF0000" face="Verdana">SelectCellDown 2</font></p>
        <p><font color="#FF0000" face="Verdana">SelectCellLeft 2</font></p>
        <p><font color="#FF0000" face="Verdana">SelectCellUp 2</font></p>
        <p><font color="#FF0000" face="Verdana">Next i</font></p>
        <p><font color="#FF0000" face="Verdana">FileClose</font></p>
        <p><font color="#FF0000" face="Verdana">End Sub</font></p>
        <p><b>Application
        Object Properties</b></font></p>
    


<p>Most of the
Application Object properties are used to set up and change the
environment. For example, the Top property returns the position
on the screen of the application window. You can set this
property to a different value to reposition the window. However,
not all properties are editable. For example, the Version
property simply reports what version of Project your are
currently working with. You cannot set the value. Version = 5.0
would fail.</font></p>
  
        
            <p><b>Options
            &amp; Leveling Properties</b></font></p>
        
    


<p>Another useful
aspect of the Application object is the ability to set the option
properties which correspond to the settings found in the Options
and Leveling dialogs. Many times users need to make sure that
before running their macro certain settings are always set to
specific values. By setting a series of Application properties
ahead of time the user can insure consistancy.</font></p>

<p><b>LevelOrder =
2 &#145;Sets the leveling order to Priority,Standard</b></font></p>

<p><b>StartYearIn =
3 &#145;Sets the fiscal year to start in March</b></font></p>

<p><b>MoveAfterReturn
= True &#145;Self explanitory</b></font></p>

<p>Most of the
settings found in the Tools/Options dialog are accessible through
the Application object. The exception here are the settings which
are project specific, like the default Standard Rate for new
resources. Since these options are project specific, they are
contained in the Project object.</font></p>

<p>The Application
object also holds some of the code module settings which are
derived from the system, such as date and time formats, and the
list separator (from the Module General tab of the Options
dialog). Since these items are controlled by the operating
system, they cannot be set from within Microsoft Project. These
options are very useful when writing macros which will be run in
different countries which use different settings. For example, in
the United States, the normal date order is Month-Day-Year, but
many other countries use Day-Month-Year. A macro could query this
setting to know how to interpret dates.</font></p>
  
        <p><b><u>Exercise:</u></b></font></p>
    


<p>Using the list
of properties for the Application Object from the help file,
write a macro which displays several current values of properties
from the Options and Leveling dialogs.</font></p>
  
        <p><b>Corresponding
        Application Methods</b></font></p>
    


<p>All of the
options which can be accessed via either the Application or
Project objects property can also be set using an Application
method. There is one Application method for each tab in the
Options dialog. For example:</font></p>
  
        
            <p><b>Application.Calculation
            = pjManual</b></font></p>
        
    


<p>is the same as</font></p>
  
        
            <p><b>OptionsCalculation
            Automatic := False</b></font></p>
        
    


<p>And,</font></p>
  
        
            <p><b>ActiveProject.AutoAddResources
            = True</b></font></p>
        
    


<p>is the same as</font></p>
  
        
            <p><b>OptionsGeneral
            AutoAddResources := True</b></font></p>
        
    


<p>The advantage of
using the properties is that you can determine the current
setting of the option, as demonstrated in the following example
which saved the state of calculation before setting it to manual.</font></p>
  
        
            <p><b>bCalcSetting
            = Application.Calculation</b></font></p>
            <p><b>Application.Calculation
            = pjManual</b></font></p>
            <p><b>...</b></font></p>
            <p><b>Application.Calculation
            = bCalcSetting</b></font></p>
        
    


<p>The advantage in
using the method is that many options can be set at once. The
following example shows how you can set some of the display
options for the application using both properties and a method.</font></p>
  
        
            <p><b>Application.DisplayStatusBar
            = True</b></font></p>
            <p><b>Application.DisplayScrollBars
            = True</b></font></p>
            <p><b>Application.DisplayNotesIndicator
            = False</b></font></p>
            <p><b>OptionsView
            DisplayStatusBar:=True, DisplayEntryBar:=True,</b></font></p>
            <p><b>DisplayScrollBars:=True,
            DisplayNotesIndicator:=False</b></font></p>
        
    


<p>For the options
which are project specific, the corresponding Application method
provides the functionality to set the default for new projects.
In the Tools/Options dialog, near some of the project specific
options there is a &#145;Set as Default&quot; button which
records the settings of the current project as the default
settings for new projects. With those Application methods, there
is an accompanying SetDefaults argument which allows those
settings to be recorded. For example, to set the hours per week
to 40 for new projects, you can use the OptionsCalendar method:</font></p>
  
        
            <p><b>OptionsCalendar
            HoursPerWeek:=40, SetDefaults:=True</b></font></p>
        
    


<p>The following
sample combines the two approaches to make the current project
specific settings the defaults for new projects.</font></p>
  
        
            <p><b>OptionsCalendar
            StartTime:=ActiveProject.DefaultStartTime,</b></font></p>
            <p><b>FinishTime:=ActiveProject.DefaultFinishTime,</b></font></p>
            <p><b>HoursPerDay:=ActiveProject.HoursPer,</b></font></p>
            <p><b>HoursPerWeek:=defHoursPerWeek,</b></font></p>
            <p><b>SetDefaults:=True</b></font></p>
        
    
    <p><b><i>Project
    Object</i></b></font></p>


<p>Project objects
are located within the Application object and contain all of the
project-level information, such as the start of the project and
the manager, as well as the details of the project, namely the
tasks and resources.</font></p>
  
        
            <p><b>Referencing
            Project Objects</b></font></p>
        
    


<p>There are
several ways of referencing a project object. The easiest way is
by referencing the active project. There is a property of the
application object called ActiveProject which returns the object
corresponding to the active project.</font></p>
  
        
            <p><b>MsgBox
            ActiveProject.ProjectStart</b></font></p>
        
    


<p>This example
displays the start date of the active project in a dialog box.</font></p>

<p>You can also use
the Projects collection to refer to a particular project.
Projects can either be referenced by their index or by their
name.</font></p>
  
        
            <p><b>MsgBox
            Projects(1).ProjectStart</b></font></p>
            <p><b>MsgBox
            Projects(&quot;project1.mpp&quot;).ProjectStart</b></font></p>
            <p><b>CurrentView,
            CurrentTable and CurrentFilter</b></font></p>
        
    


<p>Some useful
properties of a Project object are those relating to the Views,
Tables, and Filters. Each project contains CurrentView,
CurrentTable, and CurrentFilter properties. These return the name
of the current view, table, and filter respectively. Using these
properties allows you to make sure that the user is in the
correct view before executing a macro or lets you save the
user&#146;s state so that it can be restored after the execution
of a macro.</font></p>

<p>The following
example records the current state of the project, prints a PERT
Chart, and then returns the user to the correct state.</font></p>
  
        
            <p><b>Sub
            PrintPERTChart()</b></font></p>
            <p><b>strView
            = ActiveProject.CurrentView</b></font></p>
            <p><b>strFilter
            = ActiveProject.CurrentFilter</b></font></p>
            <p><b>ViewApply
            &quot;PERT Chart&quot;</b></font></p>
            <p><b>FilePrint</b></font></p>
            <p><b>ViewApply
            strView</b></font></p>
            <p><b>If
            strFilter &lt;&gt; &quot;&quot; Then</b></font></p>
            <p><b>FilterApply
            strFilter</b></font></p>
            <p><b>End
            If</b></font></p>
            <p><b>End
            Sub</b></font></p>
        
    


<p><b>List Collections</b></font></p>

<p>Another useful
object found in the project object is related to the CurrentView,
CurrentTable, and CurrentFilter properties. It is the List
collection. The List collection is a collection of strings or
numbers. Because it is a collection, you can iterate over all of
the items in the list using the For Each...Next construct
discussed earlier. You can also index the items in the list
directly.</font></p>

<p>In the Project
object, there are several List collections which correspond to
the Views, Tables and Filters available for use by the project.
For example, the TaskViewList contains the names of all of the
task views available for the project. Similarly the
ResourceFilterList contains all of the resource filters.</font></p>

<p>This example is
a function which checks the current view to see if it is a task
view. It uses both the CurrentView and the TaskViewList
properties. (This example would only have problems if a resource
view had the same name as a task view.)</font></p>
  
        
            <p><b>Function
            InTaskView() As Boolean</b></font></p>
            <p><b>Dim
            bFound as Boolean</b></font></p>
            <p><b>Dim
            varTemp as Variant</b></font></p>
            <p></font>&nbsp;</p>
            <p><b>bFound
            = False</b></font></p>
            <p><b>For
            Each varTemp in ActiveProject.TaskViewList</b></font></p>
            <p><b>If
            ActiveProject.CurrentView = varTemp then</b></font></p>
            <p><b>bFound
            = True</b></font></p>
            <p><b>Exit
            For</b></font></p>
            <p><b>End
            If</b></font></p>
            <p><b>Next
            varTemp</b></font></p>
            <p><b>InTaskView
            = bFound</b></font></p>
            <p><b>End
            Function</b></font></p>
        
    


<p>Remember, even
if a view is not in the TaskViewList, this does not necessarily
mean that it is a resource view. The Module Editor view for
editing Visual Basic code is neither a task nor a resource view.</font></p>
  
        <p><b><u>Exercise:
        (ApplyAView)</u></b></font></p>
    


<p>Write a macro
that prompts the user to enter the name of a task view and them
applies it only if it is available. If it is not them return an
error message.</font></p>
  
        <p><font color="#FF0000" face="Verdana">Sub ApplyAView()</font></p>
        <p><font color="#FF0000" face="Verdana">test = False</font></p>
        <p><font color="#FF0000" face="Verdana">myView =
        InputBox(&quot;Enter a View to display: &quot;)</font></p>
        <p><font color="#FF0000" face="Verdana">For Each item In
        ActiveProject.TaskViewList</font></p>
        <p><font color="#FF0000" face="Verdana">If LCase(item) =
        LCase(myView) Then</font></p>
        <p><font color="#FF0000" face="Verdana">ViewApply
        Name:=myView</font></p>
        <p><font color="#FF0000" face="Verdana">test = True</font></p>
        <p><font color="#FF0000" face="Verdana">End If</font></p>
        <p><font color="#FF0000" face="Verdana">Next item</font></p>
        <p><font color="#FF0000" face="Verdana">If test = False
        Then MsgBox &quot;View Does not exist&quot;</font></p>
        <p><font color="#FF0000" face="Verdana">End Sub</font></p>
    

</FONT></BODY>
</html>

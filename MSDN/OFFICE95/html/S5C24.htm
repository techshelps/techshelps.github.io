<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using DAO from Microsoft Excel</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using DAO from Microsoft Excel</H2><P CLASS="t">You can use DAO properties, objects, and methods the same way you reference and use Microsoft Excel properties, objects, and methods. After you establish a reference to the DAO object library, you're free to open or create databases, run queries to create result sets, and bring the result sets back to Microsoft Excel.</P>
<H3><A NAME="sec0"></A>Referencing DAO</H3><P CLASS="t">Before you can use DAO, you must establish a reference to the DAO object library using the Microsoft Excel References dialog box.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To establish a reference to the DAO object library</B></P>
<P CLASS="ls">    1.    Switch to a Visual Basic module.</P>
<P CLASS="ls">    2.    On the Tools menu, click References.</P>
<P CLASS="ls">    3.    In the Available References box, click Microsoft DAO 3.0 Object Library.</P>
<P></P>
<P CLASS="t">If you don't see Microsoft DAO 3.0 Object Library in the Available References box, rerun Setup to install it.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To install the Microsoft DAO 3.0 Object Library</B></P>
<P CLASS="ls">    1.    Run Setup in maintenance mode, and click Custom Setup.</P>
<P CLASS="ls">    2.    Click Add/Remove.</P>
<P CLASS="ls">    3.    Clear the Data Access check box, and then click Change Option.</P>
<P CLASS="ls">    4.    Under Options, select the check boxes for the data access drivers you want to install, and then click OK.</P>
<P CLASS="ls">    5.    Click Continue, and proceed with the installation.</P>
<P></P>
<H3><A NAME="sec1"></A>Opening a Database</H3><P CLASS="t">To open an existing database using DAO, create a database variable. Then, in an open workspace, use the <B>OpenDatabase</B> method and specify the path to the existing database. The following example opens the Microsoft Access sample database Nwind.mdb.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database

Set db = OpenDatabase("e:\access\sampapps\nwind.mdb")

db.Close
End Sub
</FONT></PRE>
<H3><A NAME="sec2"></A>Running a Query and Returning a Recordset object</H3><P CLASS="t">There are two ways to query a database using DAO: you can run a query that already exists, or you can create a new query. If you run a query that already exists, you simply refer to the name of the existing query in the <B>OpenRecordset</B> method. If you create a new query, you can choose to write it back to the database when you're finished, or you can choose to load it into memory.</P>
<P CLASS="t">To run any type of query, define a database variable and then set it to the database you want to work in.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database
Set db = OpenDatabase("e:\access\sampapps\nwind.mdb")
</FONT></PRE>
<H4><A NAME="sec3"></A>Opening an Existing Query</H4><P CLASS="t">To open an existing query, use the <B>OpenRecordset</B> method to open the specified query and return the <B>Recordset </B>object. The first argument contains the name of the stored query you want to open, and the second argument describes the type of <B>Recordset </B>object<B> </B>that's returned.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim myset as Recordset
Set myset = db.OpenRecordset("Country", dbOpenDynaset)
</FONT></PRE>
<P CLASS="t">If you omit the <B>Recordset</B> object type, DAO will try to return the fastest <B>Recordset</B> object type that allows you to modify the data. If you need only to read&nbsp;the data or append new data, see "OpenRecordset method" in Help for information about <B>Option</B> arguments that may make your application run faster.</P>
<P CLASS="t">To store a query in the database, use the <B>CreateQueryDef</B> method. The result of a <B>CreateQueryDef</B> method is compiled SQL code written back to the database as a query definition. You can store the SQL code in the database this way and then run it later using the <B>OpenRecordset</B> method to return a result set. The string you specify in the first argument is the query name that will be stored in the database, and the second argument is the SQL command string.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim qd As QueryDef

Set qd = db.CreateQueryDef("Country", "select distinctrow orders. _
    [ship country],sum(orders.[freight])as SumofFreight from  _
    orders group by orders.[ship country] order by orders.[ship _
    country];")
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If you're not familiar with writing SQL code, you can examine the examples that go with a specific object, property, or method in Help, or you can construct a query in Access and view the resulting SQL code. If necessary, you can copy and paste most SQL code from the SQL view in Microsoft Access into a <B>CreateQueryDef</B> method.</P>
<P></P>
<H4><A NAME="sec4"></A>Creating a New Query from a SQL Statement</H4><P CLASS="t">To run SQL code and return a <B>Recordset</B> object that exists entirely in memory, use the <B>OpenRecordset</B> method, and specify a SQL string (instead of a stored query definition) as the first argument.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim myset As Recordset
Dim SQLString As String
</FONT></PRE>
<P CLASS="t">After you set the database variable to the database you want to work in, load the SQL string into a string variable. Then use the <B>OpenRecordset</B> method, using as arguments the name of the SQL string and the <B>Recordset</B> object type.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">SQLString = "select distinctrow orders.[ship
    country],sum(orders.[freight])as SumofFreight from orders  _
    group by orders.[ship country] order by orders.[ship country];"
Set myset = db.OpenRecordset(SQLString, dbOpenSnapshot)
</FONT></PRE>
<P CLASS="t">For information about optimizing your SQL statement, see "SQL" in Help. For information about optimizing your application, see "Optimizing DAO Code" later in this chapter. If you want to run multiple queries that differ only in the records selected, you may want to use a parameter query and provide new parameters each time you open the query. For more information about parameter queries, see "Parameter object" in Help.</P>
<H3><A NAME="sec5"></A>Filling a Range with a Result Set</H3><P CLASS="t">You can import the contents of a result set into a Microsoft Excel worksheet either by placing the records into rows one by one or by importing the entire set at once using the <B>CopyFromRecordset</B> method. After you copy the result set to the worksheet, the record values become part of the worksheet.</P>
<H4><A NAME="sec6"></A>Copying a Result Set Range Row by Row</H4><P CLASS="t">If you copy the records one by one, you'll need to keep track of index variables because these dictate where the record will be placed on the worksheet. Although keeping track of index variables can be confusing if you have many fields, copying records this way gives you complete control over where your information is placed.</P>
<H4><A NAME="sec7"></A>Copying an Entire Result Set as a Unit</H4><P CLASS="t">You can copy an entire result set to a range on a worksheet at once by using the <B>CopyFromRecordset</B> method. This method begins to copy at the current row of the result set; when the transfer is completed, the <B>Recordset</B> object pointer is positioned just past the last row, or at EOF. Other than moving the <B>Recordset</B> object pointer, this method doesn't alter the <B>Recordset</B> object.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database
Dim rs As Recordset

Set db = OpenDatabase("e:\access\sampapps\nwind.mdb")
Set rs = db.OpenRecordset("Orders")

Worksheets("Sheet1").Range("A2").CopyFromRecordset rs

rs.Close
db.Close
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">In some circumstances, if you're copying either a result set containing OLE objects or pictures (such as the Categories table in Nwind.mdb), the copy operation will fail, and an exception error will be returned.</P>
<P></P>
<P CLASS="t">For more information about the <B>CopyFromRecordset</B> method, see "Optimizing DAO Code" later in this chapter.</P>
<H3><A NAME="sec8"></A>Filling a List Box with a Result Set</H3><P CLASS="t">There are two ways to fill a list box with a result set. You can specify a range of cells on a worksheet that contains a list of items you want to appear in the list box, or you can use the <B>Additem</B> method to directly fill the list box.</P>
<H4><A NAME="sec9"></A>Filling a List Box with a Range of Cells</H4><P CLASS="t">To fill a list box with a range of cells, use the <B>ListFillRange</B> property. The following example assumes that there's at least one dialog sheet in the active workbook, that there's at least one <B>ListBox</B> object on the first dialog sheet, and that there are values in cells A1:A10 on the worksheet named "Sheet1." The following example fills the list box with the values in cells A1:A10.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">ActiveWorkbook.DialogSheets(1).ListBoxes(1).ListFillRange _
     = "Sheet1!A1:A10"
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">A cell can contain up to 255 characters; a list box can contain more than 255 characters. Therefore, if you use the <B>ListFillRange</B> property to fill a list box, be careful that the text you insert from a cell into a list box isn't truncated.</P>
<P></P>
<H4><A NAME="sec10"></A>Filling a List Box with a Single Item</H4><P CLASS="t">To fill a list box with a single item or to add selected items to a list box, use the <B>AddItem</B> method. The following example adds the second field value in the result set to the contents of the list box. The example assumes that there's at least one dialog sheet in the active workbook and that there's at least one <B>ListBox</B> object on the first dialog sheet.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database
Dim rs As Recordset
Dim x as Integer, I as Integer

Set db = OpenDatabase("d:\access\sampapps\nwind.mdb")
Set rs = db.OpenRecordset("shippers")
rs.MoveLast
x = rs.RecordCount
rs.MoveFirst

For i = 0 To x - 1
DialogSheets(1).ListBoxes(1).AddItem Text:=rs.Fields(1).Value
rs.MoveNext
Next I

rs.Close
db.Close

End Sub
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Using the <B>AddItem</B> method will delete all list box entries made with the <B>ListFillRange</B> method.</P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetObject Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>GetObject Function</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Retrieves an OLE Automation object from a file.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>GetObject(</B>[<B><I>pathname</I></B>][<B>,</B><B><I>class</I></B>]<B>)</B></P>
<P CLASS="t">The <B>GetObject</B> function syntax has these named-argument parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B><I>pathname</I></B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">The full path and name of the file containing the object to retrieve. If <B><I>pathname</I></B> is omitted, <B><I>class</I></B> is required.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B><I>class</I></B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">A string representing the class of the object.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The <B><I>class</I></B> argument uses the syntax: <B>"</B><I>appname</I><B>.</B><I>objecttype</I><B>"</B> and has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>appname</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">The name of the application providing the object.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>objecttype</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">The type or class of object to create.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If an application which supports OLE Automation exposes an object library, it is preferable to use the functions defined within the library for object access rather than use <B>GetObject</B>.</P>
<P></P>
<P CLASS="t">Use the <B>GetObject</B> function to access an OLE Automation object from a file and assign the object to an object variable. To do this, use the <B>Set</B> statement to assign the object returned by <B>GetObject</B> to the object variable. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set CADObject = GetObject("C:\CAD\SCHEMA.CAD")
</FONT></PRE>
<P CLASS="t">When this code is executed, the application associated with the specified file name is started and the object in the specified file is activated.</P>
<P CLASS="t">If <B><I>pathname</I></B> is a zero-length string (""), <B>GetObject</B> returns a new object instance of the specified type. If the <B><I>pathname</I></B> argument is omitted entirely, <B>GetObject</B> returns the currently active object of the specified type. If no object of the specified type exists, an error occurs.</P>
<P CLASS="t">The above example shows how to activate an entire file. However, some applications allow you to activate part of a file. To do this, add an exclamation point (<B>!</B>) to the end of the file name followed by a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.</P>
<P CLASS="t">For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called SCHEMA.CAD:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3")
</FONT></PRE>
<P CLASS="t">If you do not specify the object's <B><I>class</I></B>, the OLE.DLLs determine the application to invoke and the object to activate based on the file name you provide. Some files, however, may support more than one class of object. For example, a drawing might support three different types of objects: an application object, a drawing object, and a toolbar object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional <B><I>class</I></B> argument. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set MyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")
</FONT></PRE>
<P CLASS="t">In the above example, FIGMENT is the name of a drawing application and DRAWING is one of the object types it supports.</P>
<P CLASS="t">Once an object is activated, you reference it in code using the object variable you defined. In the above example, you access properties and methods of the new object using the object variable MyObject. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">MyObject.Line 9, 90
MyObject.InsertText 9, 100, "Hello, world."
MyObject.SaveAs "C:\DRAWINGS\SAMPLE.DRW"
</FONT></PRE>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>CreateObject</B> Function, <B>Set</B> Statement.</P>
<P></P></FONT>
</FONT></BODY></HTML>

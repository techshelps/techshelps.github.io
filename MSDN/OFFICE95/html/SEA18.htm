<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Special-Purpose Visual Basic Methods</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Using Special-Purpose Visual Basic Methods</H1><P CLASS="t">There are also several special-purpose Visual Basic methods that offer a concise way to perform a specific operation on a range of cells. Like worksheet functions, these specialized methods are faster than the general-purpose Visual Basic code that accomplishes the same task.</P>
<P CLASS="t">For example, the following code changes the value in each cell in a range in a relatively slow way.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c In Worksheets(1).Range("a1:a200").Cells
    If c.Value = 4 Then c.Value = 4.5
Next
</FONT></PRE>
<P CLASS="t">The code in the following example, which uses the <B>Replace</B> method, performs the same operation much faster.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets(1).Range("a1:a200").Replace "4", "4.5"
</FONT></PRE>
<P CLASS="t">The following example shows a relatively slow way to add a blue oval to each cell in the range A1:A500 that contains the value 4.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c In Worksheets(1).Range("a1:a500").Cells
    If c.Value = 4 Then
        With Worksheets(1).Ovals.Add(c.Left, c.Top, c.Width, c.Height)
            .Interior.Pattern = xlNone
            .Border.ColorIndex = 5
        End With
    End If
Next
</FONT></PRE>
<P CLASS="t">The code in the following example, which uses the <B>Find</B> and <B>FindNext</B> methods, performs the same task much faster.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">With Worksheets(1).Range("a1:a500")
    Set c = .Find(4)
    If Not c Is Nothing Then
        firstAddress = c.Address
        Do
            With Worksheets(1).Ovals.Add(c.Left, c.Top, _
                    c.Width, c.Height)
                .Interior.Pattern = xlNone
                .Border.ColorIndex = 5
            End With
            Set c = .FindNext(c)
        Loop While Not c Is Nothing And c.Address &lt;&gt; firstAddress
    End If
End With
</FONT></PRE>
<P CLASS="t">For more information about special-purpose Visual Basic methods, see the topic in Help that covers object you're working with, and examine the list of that object's methods. You can also examine the list of all Visual Basic methods on the Contents tab of Help.</P></FONT>
</FONT></BODY></HTML>

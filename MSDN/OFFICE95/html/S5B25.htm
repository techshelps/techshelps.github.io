<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Methods</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Methods</H2><P CLASS="t">When you use a method in your procedure, the expression that contains the method can have several different forms. Some methods, such as the <B>AutoFit</B> method, take no arguments, whereas other methods take several arguments. These variations are described in the following sections.</P>
<H3><A NAME="sec0"></A>Methods That Take No Arguments</H3><P CLASS="t">To use a method that takes no arguments, build an expression to return the object, and then apply the method. For example, to automatically adjust the column width of columns A through D on Sheet1 to fit the contents of the cells, you could write the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Columns("A:D").AutoFit
</FONT></PRE>
<H3><A NAME="sec1"></A>Methods That Take Arguments</H3><P CLASS="t">When a method takes arguments, the way you write your code depends on whether you want to use the value returned by the method. If you don't want to use the return value of a method, don't enclose the arguments in parentheses. For example, to sort the contents of cells A1:A10 on Sheet1, you could write the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("A1:A10").Sort _
    Worksheets("Sheet1").Range("A1")
</FONT></PRE>
<P CLASS="t">In the preceding code, the first argument to the <B>Sort</B> method is the expression Worksheets("Sheet1").Range("A1"); it isn't enclosed in parentheses because you aren't using the <B>Sort</B> method's return value.</P>
<P CLASS="t">On the other hand, if you use the return value, you must enclose the argument in parentheses. Suppose that you use the <B>CheckSpelling</B> method to check the spelling of a single word. The word becomes the argument to the method, which returns <B>True</B> if the word is spelled correctly or <B>False</B> if it isn't. You could write the following procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CheckWord()
    returnValue = Application.CheckSpelling("recieve")
    If returnValue = True Then
        MsgBox "The word is spelled correctly"
    Else
        MsgBox "The word is misspelled!"
    End If
End Sub
</FONT></PRE>
<P CLASS="t">Notice that the argument is enclosed in parentheses. If you run this code, you will get the second message box, because the word is intentionally misspelled.</P>
<H3><A NAME="sec2"></A>Using Named Arguments in Methods</H3><P CLASS="t">Many methods take more than one argument. For example, the <B>Open</B> method, which opens a workbook, takes 12 arguments. If you want to write code that opens the workbook BOOK2.XLS, which has the protection password "drowssap", you could write the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open "BOOK2.XLS", , , , "drowssap"
</FONT></PRE>
<P CLASS="t">However, this code is difficult to write correctly without introducing bugs, because you have to count the number of commas to insert between the arguments. The code is also very difficult to read, and it gives no clues about what&nbsp;the arguments represent. The following example shows a better way to write&nbsp;this code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open fileName:="BOOK2.XLS", password:="drowssap"
</FONT></PRE>
<P CLASS="t">Because every argument has a name, you can use the name and the := operator to assign a value to an argument. When you use named arguments, you don't have to remember the order of the arguments. For example, the preceding code could have been written with the order of the arguments reversed.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open password:="drowssap", fileName:="BOOK2.XLS"
</FONT></PRE>
<P CLASS="t">The preceding section's rules about parentheses apply to named arguments also. For example, the CheckWord procedure could use a named argument for the <B>CheckSpelling</B> method, as shown in the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CheckWord()
    returnValue = Application.CheckSpelling(word:="recieve")
    If returnValue = True Then
        MsgBox "The word is spelled correctly"
    Else
        MsgBox "The word is misspelled!"
    End If
End Sub
</FONT></PRE>
<H3><A NAME="sec3"></A>Using Built-in Constants as Argument Values</H3><P CLASS="t">Many methods take built-in constants as their argument values. For example, the <B>ActivateMicrosoftApp</B> method takes as its argument values<B> xlMicrosoftAccess</B>, <B>xlMicrosoftWord</B>, and so on. The Help topic for any given method contains a list of built-in constants you can use for argument values. You should always use the built-in constant, not the value that the constant represents, because the value may change in future versions of Visual Basic.</P></FONT>
</FONT></BODY></HTML>

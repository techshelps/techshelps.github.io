<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Auto_Add and Auto_Remove Subs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Auto_Add and Auto_Remove Subs</H2><P CLASS="t">The add-in manager calls the Auto_Add and Auto_Remove routines when installing or removing the add-in, allowing code to perform setup or cleanup tasks.  As an example that further illustrates working with toolbars, the code in Example 9 below sets up a toolbar manually. Set the Name property of the custom toolbar when creating it with the syntax Application.Toolbars.Add Name:="Your Toolbar Name".  Trying to set the toolbar's Name property using a separate line of code generates an error that a toolbar does not have a writeable name property.  This can be confusing because Help says the Name property is writeable for custom toolbars.  </P>
<P CLASS="t">Each new button added to the toolbar requires an ID in order for the Add method to work.  Any ID will do since the code will modify the button properties after creating it.  To insert a blank Custom button, use ID 231.  A helpful trick is to store the custom button bitmaps on one of the dialog sheets in the add-in workbook.  Just place them off to the side of the dialog and they will be invisible, but the code will be able to copy them to the toolbar button's face.  This trick eliminates the need to store button images in separate files.  </P>
<P>'Toolbar constants</P>
<P>Const TBNAME = "Custom Charts"</P>
<P>Const CUSTOMBTNID = 231</P>
<P>Sub Auto_Add()</P>
<P>'This routine is called from the add-in manager when the add-in</P>
<P>' is loaded.</P>
<P>Dim Tbar As Object</P>
<P>Dim TbarExists As Boolean</P>
<P>TbarExists = False</P>
<P>'Scan installed toolbars to see if the one for the Histogram Wizard</P>
<P>' is installed.</P>
<P>For Each Tbar In Application.Toolbars</P>
<P>    If Tbar.Name = TBNAME Then</P>
<P>        TbarExists = True</P>
<P>    End If</P>
<P>Next Tbar</P>
<P>'Install the toolbar if necessary.</P>
<P>If Not TbarExists Then</P>
<P>    Application.Toolbars.Add Name:=TBNAME</P>
<P>    Application.Toolbars(TBNAME).Visible = True</P>
<P>    'Copy the button face picture (stored in the Wiz1 dialog).</P>
<P>    ' Must copy as xlBitmap format for paste operation to work!</P>
<P>    ThisWorkbook.DialogSheets("Wiz1").[HWButtonFace].CopyPicture _ format:=xlBitmap</P>
<P>    'When accessing buttons by item number, remember that a gap</P>
<P>    ' counts as an item!</P>
<P>    'Add a button to the toolbar and define properties...</P>
<P>    Application.Toolbars(TBNAME).ToolbarButtons.Add (CUSTOMBTNID)</P>
<P>    With Application.Toolbars(TBNAME).ToolbarButtons(1)</P>
<P>        .PasteFace</P>
<P>        .Name = "Histogram"</P>
<P>        .OnAction = "HistoMain"</P>
<P>    End With</P>
<P>End If</P>
<P>End Sub</P>
<P></P>
<P>Sub Auto_Remove()</P>
<P>'This routine is called from the add-in manager when the add-in</P>
<P>' is removed.</P>
<P>On Error Resume Next</P>
<P>Application.Toolbars(TBNAME).Delete</P>
<P>On Error GoTo 0</P>
<P>End Sub</P>
<P></P>
<P>Example 9.  Auto_Add and Auto_Remove routines</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 5: Debugging and Error Handling</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817462">Lesson
5: </font></a><a name="DDE_LINK5">Debugging
and Error Handling</font></a></H1>
  
        <p><b>Lesson
        Objectives</b></font></p>
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
    
    <ul>
        <li>Successfully
            use the Visual Basic Module window interface and the
            Debug window to edit and debug code.</font></li>
        <li>Apply
            Watch Expressions to code to view the value of a
            variable or property while stepping through code.</font></li>
        <li>Execute
            Visual Basic code through the Immediate pane in the
            Debug window.</font></li>
        <li>Use the
            On Error statement to check for errors in a Visual
            Basic application and correct the error using an
            error handling routine.</font></li>
        <li>Use the
            Err and Error functions to test for errors in an
            application and perform corrective action based on
            the result of this test.</font></li>
    </ul>


<p><b>Some Topics
to be introduced in this lesson include:</b></font></p>
  
        
            <ul>
                <li>Debug
                    Interface</font></li>
                <li>Break
                    mode</font></li>
                <li>Stepping</font></li>
                <li>Watch
                    Expressions</font></li>
                <li>Immediate
                    Pane</font></li>
                <li>On
                    Error statement</font></li>
                <li>Err
                    and Error functions</font></li>
                <li>Creating
                    error conditions</font></li>
            </ul>
        
    
    <p><b><i>Testing
    and Debugging Code</i></b></font></p>
    
        <p><b>Types of
        Errors</b></font></p>
    


<p>There are three
types of errors in programming:</font></p>
  <p><li><b>Language errors</b>
    - These errors result from incorrectly constructed code. VB
    detects these errors automatically when the programmer enters
    the line or moves off the line, or immediately before the
    code executes.</li></p>
    <p><li><b>Run-time errors</b>
    - These errors occur when a statement attempts an operation
    that is impossible to carry out. The code may be
    syntactically correct but, because of the current conditions,
    is not an appropriate operation</li></p>
    <p><li><b>Logic errors</b> -
    The code has neither language or runtime errors but does not
    perform in the manner in which it was intended.</li></p>


<p>VB can provide
assistance with language and run-time errors by alerting the
programmer with a message describing the type of error. Logic
errors are more difficult to debug because no errors are detected
by VB during execution.</font></p>
  
        <p><b>Debugging
        Interface</b></font></p>
    


<p>VB includes
several tools to assist the programmer in debugging and testing
code. The first is the Debug window. Using the Debug window, the
programmer can monitor the values of expressions and variables
while stepping through each statement in the code.</font></p>

<p align="center"><img
src="Image214.gif" width="598" height="335"></font></p>

<p>Also, the Visual
Basic toolbar includes buttons for stepping through code and
adding breakpoints and watches to code. (These features are
discussed later in this lesson.)</font></p>

<p align="center"><img
src="Image215.gif" width="594" height="50"></font></p>
  
        <p><b>Break Mode</b></font></p>
    


<p>The following
tasks are available while in break mode:</font></p>
  <p><li>Determine which
    active procedures have been called.</li></p>
    <p><li>Watch the values of
    variables, properties, and statements.</li></p>
    <p><li>Change the values of
    variables and properties.</li></p>
    <p><li>Run Visual Basic
    statements immediately.</li></p>
    <p><li>Manually control the
    line-by-line execution of the code.</li></p>


<p>When in break
mode, the Debug window appears and the programmer has access to a
variety of tools. When the following occurs, VB switches to break
mode:</font></p>
  
        <p><li>Choosing one of
        the Step buttons in the Tools Macro dialog to execute a
        procedure.</li></p>
        <p><li>Execution reaches
        a line that contains a breakpoint. A breakpoint is set by
        selecting the line where the break should occur and
        pressing the Toggle Breakpoint button. (Or, select the
        Run Toggle Breakpoint command.)</li></p>
        <p><li>Execution reaches
        a Stop statement. </li></p>
        <p><li>A break
        expression defined in the Add Watch dialog changes or
        becomes true. (Discussed later in this lesson.)</li></p>
        <p><li>An untrapped
        run-time error occurs.</li></p>
        <p><li>The Debug button
        is selected in the dialog that appears after CTRL-BREAK
        or ESC is pressed.</li></p>
    


<p><i>Unlike Visual
Basic 3.0, it is not possible to edit code in the Debug window in
VB.</i></font></p>
  
        <p><b>Stepping
        Through Code</b></font></p>
    


<p>While the Debug
window is visible, the programmer may step through each line of
code using the Step Into (F8) and Step Over (Shift+F8) commands
(or the buttons on the VB toolbar.) The difference between the
two commands is that the Step Into command steps through every
command, including those in any procedures called by the current
procedure. The Step Over command behaves exactly like the Step
Into command until a call to a procedure is encountered. Step
Over executes calls to procedures as one command (instead of
stepping through each line in the called procedure) and then
continues stepping.</font></p>
  
        
            <p><b>The Stop
            Statement</b></font></p>
        
    


<p>When the
procedure encounters a Stop statement, it presents the Debug
window. The difference between the Stop statement and a
breakpoint is that the statement is part of the executable code
and is saved with the program. All break points are cleared when
the file containing the procedure is closed.</font></p>
  
        <p><b>Watch
        Expressions</b></font></p>
    


<p>A watch
expression follows the value of a particular variable or
expression and displays the value in the Watch pane of the Debug
window. </font></p>

<p align="center"><img
src="Image217.gif" width="505" height="287"></font></p>

<p>There are two
ways to use a watch expression. The first is to select the
variable name, expression or property in the code and select the
Tools Add Watch command. This adds the variable to the list of
expressions in the Watch pane. As the code executes, the value of
the expression changes. It is also possible to set the Watch Type
in this dialog. This is useful for instructing VB to break
automatically when the value of the expression becomes True or
when it changes.</font></p>

<p>A second way to
use a watch expression is to use the Instant Watch command. By
selecting a variable or expression in the code and either
pressing the Instant Watch button or selecting the command on the
Tools menu, a dialog appears which shows the current value of the
expression. Pressing the Add button adds it to the Watch pane.</font></p>
  
        <p><b>The Immediate
        Pane</b></font></p>
    


<p>The Immediate
pane displays information that results from debugging statements
in the code or statements that are typed directly in the
Immediate pane.</font></p>

<p>Information is
displayed in the Immediate pane from within a procedure using the
Print method. For example, the following code displays &quot;The
value of x is ?&quot; in the Immediate pane:</font></p>
  <p><b>Debug.Print
    &quot;The value of x is &quot; &amp; x</b></font></p>


<p>Or, the print
method may be used directly in the Immediate pane by typing:</font></p>
  <p><b>Print x</b></font></p>


<p>The question
mark (?) is the equivalent of the Print command in the Immediate
pane, so the following line produces the same result:</font></p>
  <p><b>? x</b></font></p>


<p>Pressing the
Enter key causes the statement to evaluate. The Immediate pane
will also accept other Visual Basic commands, even those that
change the values of variables and properties or change the
behavior of the code.</font></p>

<p>Multiple lines
of code can be entered on one line using the colon (:) as a
separator, which is useful for loops:</font></p>
  <p><b>For x=1
    to 5 : ? x : Next</b></font></p>
    
        <p><b>Procedure Call
        Stack</b></font></p>
        <p><b><img
    src="Image218.gif" align="left" hspace="19" width="23"
    height="18"></b></font></p>    <p>The Calls
    dialog is useful when tracking the operation of code as it
    executes through a series of procedures. This is especially
    useful when tracking nested procedures. To view a list of all
    the nested calls, select the button to the right of the
    Procedure box.</font></p>


<p align="center"><img
src="Image219.gif" width="462" height="256"></font></p>

<p>If, for example,
procedure A called procedure B, which called procedure C, the
Call dialog will list procedure C, then B, then A, with the most
recently called procedure listed at the top.</font></p>

<p>The procedures
are added to the list when they are called and removed from the
list as they are completed.</font></p>
  <p><font color="#0000FF" size="3" face="MSIcons"><b><i></i></b></font><font
    color="#000000" size="4" face="Verdana"><b> </b></font><b><i>Try This: A
    Visual Basic Debugging Interface Tour</i></b></font></p>
    
        
            
                <p>Insert
                a new Module. Display the Debug Window.</font></p>
            
            <p><b>The
            Immediate Pane</b></font></p>

<ol>
<li>Activate the Immediate pane and type the following:</font></li><br>
	<br>
	<b>x = 2 &lt;Enter&gt;</b></font><br>
	<b>y = 3 &lt;Enter&gt;</b></font><br>
	<b>z = x + y &lt;Enter&gt;</b></font><br>
	<b>? z &lt;Enter.</b></font><br>
	The result &quot;5&quot; is displayed in the Immediate pane.</font>
<li>The previous example could have been written as follows:</font></li><br>
	<br>
	<b>x = 2 : y = 3 : z = x + y : ? z &lt;Enter&gt;</b></font>
	<li>Type the following:</font></li><br>
	<br>
	<b>L = len(&quot;The len function&quot;) : ? L &lt;Enter&gt;</b></font><br>
	The result is 16.</font>
<li>Type the following:</font></li><br>
	<br>
	<b>MsgBox &quot;Howdy!&quot;</b></font><br>
	Any command that can be entered in the code window can be entered in the Immediate Pane.</font></ol>
            
<p><b>The Watch Pane</b></font></p>
            
<ol>
<li>Type the following code on a new module sheet:</font></li><br>
	<br>
	<b>Sub Main()</b></font><br>
	<b>Dim sum as Integer</b></font><br>
	<b>sum = Add (3, 6)</b></font><br>
	<b>End Sub</b></font></p><br>
<li>Insert a second Module sheet and enter the following code:</font></li><br>
	<br>
	<b>Function Add(x, y) as Integer</b></font><br>
	<b>add = x + y</b></font><br>
	<b>End Function</b></font><br>
<li>Run Main. It executes, but the value is not displayed where it can be viewed. Add the following line to Main under the &quot;sum&quot; line:</font></li><br>
<br>
	<b>Debug.Print &quot;Sum: &quot; &amp; sum</b></font>
<li>Run Main again. Now, open the Debug window and view the contents of the Immediate panel.</font><br>
<li>Use the Watch pane to display the value of x, y, add and sum during execution. In Module2, select &quot;x&quot; and then click the Instant Watch button and choose Add. Repeat with the remaining variables.</font></p>
<li>Click on &quot;Sub main()&quot; and press the F8 key (the Step Into command equivalent) the macro in Debug mode.  Select the Watch tab in the Debug window.</font></p>
<li>Step through the macro and view the values returned to the Watch pane.</font></li></ol>
        
<p><b>Procedure Call Stack</b></font></p>
<ol>
<li>Insert 3 new module sheets.</font></li>
<li>Enter the following code in Module3:</font></li><br>
	<br>
	<b>Sub one()</b></font><br>
	<b>two</b></font><br>
	<b>End Sub</b></font><br>
<li>Enter the following code in Module4:</font></li><br>
	<br>
	<b>Sub two()</b></font><br>
	<b>three</b></font><br>
	<b>End Sub</b></font><br>
<li>Enter the following code in Module5:</font></li><br>
	<br>
	<b>Sub three()</b></font><br>
	<b>one</b></font><br>
	<b>End Sub</b></font><br>
<li>Select Module3. Click on &quot;Sub one()&quot; and press the F8 key five times. Click on the Procedure Call button. The Calls dialog displays the chain of procedures that have been called but have not finished executing.</font></li>
<li>Select &quot;GLOBAL.Module3.Sub One()&quot; and press the Show key. The contents of Module3 are displayed.</font></li></ol>

<b><i>Handling Run-time Errors</i></b></font></p>

<p>As mentioned
earlier, run-time errors are errors that occur while the
procedure executes and are not syntax related. For example, the
procedure tries to open a file that does not exist, the user
enters the wrong type of data in a dialog box or the wrong type
of sheet is active when the procedure executes. Procedures can be
written to anticipate these types of errors and correct the
condition, alert the user to the problem or gracefully exit from
the procedure.</font></p>

<p>VB provides the
programmer with three tools for working with run-time errors; the
On Error statement, the Err function and the Error function.</font></p>
  
        <p><b>On Error</b></font></p>
    


<p>The <b>On Error</b>
statement has three forms</font></p>
  
        
            <p><b>On Error
            GoTo</b></font></p>
        
    


<p>The On Error
GoTo statement enables an error handling routine and specifies
the location of the routine within a procedure. The routine must
be located within the procedure which enables the error handling
routine and error checking remains active until the procedure
completes execution or it is turned off (see details below). The
On Error GoTo statement is usually placed at the top of the
procedure and then any error which occurs during the procedure
directs execution to the routine. A suggested format for the
statement is:</font></p>
  <p><b>Sub
    MySub()</b></font></p>
    <p><b>SubLabel:</b></font></p>
    <p><b>On Error
    GoTo ErrorHandler</b></font></p>
    <p><b>. . .</b></font></p>
    <p><b>Exit Sub</b></font></p>
    <p><b>ErrorHandler:</b></font></p>
    <p><b>. . .</b></font></p>
    <p><b>Resume
    Next</b></font></p>
    <p><b>End Sub</b></font></p>


<p>Notice that the
label &quot;ErrorHandler&quot; appears towards the bottom of the
procedure and the name is followed with a colon (:). This tells
VB that this is a line label. The line number may also be used
but it is not as easy to read the code when numbers are used
instead of labels.</font></p>

<p>The <b>Exit Sub</b>
statement is placed in the line preceding the error handling
routine. This prevents the routine from executing in the event
that no errors are found. The <b>Resume Next</b> statement
instructs VB to return execution to the line immediately
following the line that generated the run-time error. The <b>Resume</b>
statement could also be followed by a label to be used as a
reference for where to resume. In the above example, subsitiuting
<b>Resume SubLabel:</b> for <b>Resume Next</b> would cause the
macro to continue running at the label&#146;s location.</font></p>
  
        
            <p><b>On Error
            Resume Next</b></font></p>
        
    


<p>This form of the
<b>On Error</b> statement instructs VB to resume execution at the
line immediately following the line which generated the error.
The programmer should then write error checking into the
procedure to respond accordingly.</font></p>
  
        
            <p><b>On Error
            GoTo 0</b></font></p>
        
    


<p>This statement
disables error checking.</font></p>
  
        <p><b>The Err
        Function</b></font></p>
    


<p>The <b>Err</b>
function returns an integer which represents the most recent
error that occurred in the program. For example, when a divide by
zero error occurs, the <b>Err</b> function returns 11 or when a
file not found error occurs, the value returned to <b>Err</b> is
53. The <b>Err</b> function can be used to determine the type of
error that called an error handling routine.</font></p>

<p><img
src="Image220.gif" align="left" hspace="0" width="57" height="40"></font><font
color="#000000" size="2" face="Verdana"> <i>For a complete list
of all the error values, search for &quot;trappable errors&quot;
in the VB on-line Help.</i></font></p>
  
        <p><b>The Error
        Function</b></font></p>
    


<p>The <b>Error</b>
function returns a message as text which corresponds to a error
number. For example, the following line will display a message
which shows the error number and the error message of the most
recent error:</font></p>
  <p><b>MsgBox
    &quot;The most recent error number is &quot; &amp; Err _</b></font></p>
    <p><b>&amp;
    &quot;. Its message text is: &quot; &amp; Error(Err)</b></font></p>


<H1><i>Lesson 5 Exercises</i></H1>  
<ol>
<li>Is it
    possible to add a Watch while in Step Mode? If so, how?</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Yes,
    highlight the variable to watch in the code pane of the Debug
    window, press the Instant Watch Tool on the Visual Basic
    toolbar and choose the Add button. Or choose Tools Add Watch.</i></b></font></p>
    <li>Write a
    procedure which will do the following: Prompt the user for a
    file name. If the file exists, open the file. If the file
    does not exist, display a custom error message and then ask
    the user if they wish to try another file or stop the
    program. Take action as specified.</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Sub
    GetFile()</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Dim
    goodFile As Boolean</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>On
    Error GoTo errorHandler</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Do</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>goodFile
    = True</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>fileName
    = InputBox(prompt:=&quot;Enter a filename&quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>If
    fileName = &quot;&quot; Then Exit Sub</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>FileOpen
    fileName</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>If
    goodFile Then Exit Sub</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Loop</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>errorHandler:</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>goodFile
    = False</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>Msg =
    &quot;The file, &quot; &amp; fileName &amp; &quot;, is either
    already open or not available.&quot;</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>x =
    Application.Message(Message:=Msg, Type:=pjYesNo, _</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>YesText:=&quot;Try
    Again&quot;, NoText:=&quot;Exit Procedure&quot;)</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>If x =
    True Then Resume Next</i></b></font></p>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>End
    Sub</i></b></font></p>

</FONT></BODY>
</html>

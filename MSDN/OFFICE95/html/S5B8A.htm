<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Message and Input Dialog Boxes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Message and Input Dialog Boxes</H2><P CLASS="t">The easiest way to add a dialog box to your application is to use a <I>predefined built-in dialog box</I>. Visual Basic provides two types of predefined dialog boxes: the message box and the input box. Both types are easy to use, but you have limited control over how they look and what type of information you can get from or display for the user.</P>
<P CLASS="t">The following table lists the functions and methods for adding predefined dialog boxes to your Visual Basic application.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Use this</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>To do this</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>MsgBox</B> function</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Display a message and return a value indicating the command button the user clicked.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>InputBox </B>function</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Display a prompt and return the text the user typed.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><B>InputBox </B>method</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Display a prompt and return the information the user entered. This method is similar to the <B>InputBox</B> function, but it provides additional functionality, such as requiring input to be of a specific data type.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H3><A NAME="sec0"></A>Message Box</H3><P CLASS="t">The <B>MsgBox</B> function creates a simple dialog box that can display a short message and a predefined set of buttons. The user can click one of the buttons to respond to the message or to cancel the message box. The simplest message box contains only a message string and an OK button, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">MsgBox prompt:="Please close all files", title:="Files"
</FONT></PRE>
<P CLASS="a">    <img src="APG0801.gif"></P>
<P CLASS="t">The <B>MsgBox</B> function performs any necessary string conversions before it displays the message string. You can use any data type for the prompt argument.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">You can use a message box as a simple debugging tool. Use the message box text to display an interim value in a long calculation or to display a status message in a large procedure. For more information about debugging, see Chapter 6, "Debugging."</P>
<P></P>
<P CLASS="t">You can also create more complex message boxes that contain different icons and buttons. The following example uses the <B>MsgBox</B> function to display a message box containing the Warning Message icon and Yes and No buttons. The No button is the default response. The value that the <B>MsgBox</B> function returns depends on the button the user clicks; when you use the return value, you must enclose the <B>MsgBox</B> function arguments in parentheses (the preceding example ignores the return value, so the parentheses aren't required).</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CreateSampleBox()
    msg = "Do you want to continue?"
    dialogStyle = vbYesNo + vbExclamation + vbDefaultButton2
    title = "Error"
    response = MsgBox(msg, dialogStyle, title)    ' Get user response.
    If response = vbYes Then                        ' Evaluate response and
        msg = "You clicked Yes."                    ' act appropriately
    Else    
        msg = "You clicked No or pressed ENTER."
    End If
    MsgBox msg                                    ' Display action taken.
End Sub
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The constants <B>vbYesNo</B>, <B>vbExclamation</B>, and so on are built into Visual Basic. For a list of these constants, see "MsgBox function" in Help.</P>
<P></P>
<H3><A NAME="sec1"></A>Input Box</H3><P CLASS="t">The <B>InputBox</B> function creates and displays a simple dialog box that contains a prompt, an edit box, and OK and Cancel buttons. You can use this input box to allow the user to enter data. You can change the text in the title bar, the prompt displayed to the user, and the position of the dialog box on the screen. To create a more elaborate dialog box, you must use a dialog sheet and create a custom dialog box. For more information about creating a custom dialog box, see "Using Custom Dialog Boxes" later in this chapter.</P>
<P CLASS="t">The return value from the <B>InputBox</B> function is a string containing the data in the edit box. If the edit box is empty or the user clicks Cancel, the return value is an empty string (""). The following code displays a simple input box.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">radius = InputBox("Enter the circle's radius:", "Circle Radius")
</FONT></PRE>
<P CLASS="a">    <img src="APG0802.gif"></P>
<P CLASS="t">For more information about the <B>InputBox</B> function, including the complete syntax, see "InputBox function" in Help.</P>
<P CLASS="t">The <B>InputBox</B> method of the <B>Application</B> object works like the <B>InputBox</B> function, but the method also allows you to specify the desired data type for the entered data (a range or a string, for example). If the user enters data with an incorrect type, Microsoft Excel displays a message box indicating that the entry isn't valid.</P>
<P CLASS="t">If you specify a desired data type, the return value from the <B>InputBox</B> method has that data type if the user clicked OK or pressed ENTER to dismiss the dialog box. If you don't specify a data type, the return value is a string (which can be an empty string if the user clicked OK with nothing in the edit box). Whether or not you specify a data type for the entered data, the return value is <B>False </B>if the user clicked Cancel or pressed ESC to cancel the dialog box. For more information about the <B>InputBox</B> method, including the complete syntax, see "InputBox method" in Help.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Notice the difference between the terms <I>dismiss</I> and <I>cancel</I>. When the dialog box is dismissed, the <B>Show</B> method returns <B>True</B>, and Microsoft Excel processes the changes made to the dialog box. When the dialog box is canceled, the <B>Show</B> method returns <B>False</B>, and Microsoft Excel ignores changes made to the dialog box.</P>
<P></P>
<P CLASS="t">The following code uses the <B>InputBox</B> method to ask the user for a search range and a search value. The search range must be a valid <B>Range</B> reference (sheet1!a1:a20, for example), and the search value must be a number.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CountValues()
    cellCount = 0
    Set rangeToSearch = Application.InputBox( _
        Prompt:="Enter the range to search", _
        Type:=8)        'type 8: must be a Range object
    searchValue = Application.InputBox( _
        Prompt:="Enter the search value", _
        Type:=1)        ' type 1: must be a number
    If searchValue = False Then Exit Sub        'user clicked Cancel
    For Each c In rangeToSearch
        If c.Value = searchValue Then
            cellCount = cellCount + 1
        End If
    Next c
    MsgBox cellCount
End Sub
</FONT></PRE></FONT>
</FONT></BODY></HTML>

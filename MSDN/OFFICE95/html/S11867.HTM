<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Get Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec309"></A>Get Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec310"></A>Description</H2><P>Reads from an open disk file into a variable.</P>
<H2><A NAME="sec311"></A>Syntax</H2><P><B>Get</B> [<B>#</B>]<I>filenumber</I><B>, </B>[<I>recnumber</I>]<B>, </B><I>varname</I> </P>
<P>The <B>Get</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>filenumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any valid file number.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>recnumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Record number (<B>Random</B> mode files) or byte number (<B>Binary</B> mode files) at which reading begins.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Valid variable name into which data is read.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec312"></A>Remarks</H2><P>The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit recnumber, the next record or byte (the one after the last <B>Get</B> or <B>Put</B> statement or the one pointed to by the last <B>Seek</B> function) is read. Delimiting commas must be included, for example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Get #4,,FileBuffer
</PRE>
<P CLASS="t">  </P>
<P>For files opened in <B>Random</B> mode, the following rules apply:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the length of the data being read is less than the length specified in the <B>Len</B> clause of the <B>Open</B> statement, <B>Get</B> still reads subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data can’t be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is a variable-length string, <B>Get</B> reads a 2-byte descriptor containing the string length and then the data that goes into the variable. Therefore, the record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual length of the string.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is a <B>Variant</B> of numeric type, <B>Get</B> reads 2 bytes identifying the <B>VarType</B> of the <B>Variant</B> and then the data that goes into the variable. For example, when reading a <B>Variant</B> of <B>VarType</B> 3, <B>Get</B> reads 6 bytes: 2 bytes identifying the <B>Variant</B> as <B>VarType</B> 3 (<B>Long</B>) and 4 bytes containing the <B>Long</B> data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual number of bytes required to store the variable.</LI></UL></SPAN><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   You can use the <B>Get</B> statement to read a <B>Variant</B> array from disk but you cannot use <B>Get</B> to read a scalar <B>Variant</B> containing an array. You also cannot use <B>Get</B> to read objects from disk.</P>
<P CLASS="t">  </P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is a <B>String</B> <B>Variant</B> (<B>VarType</B> 8), <B>Get</B> reads 2 bytes identifying the <B>VarType</B>, 2 bytes indicating the length of the string, and then the string data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 4 bytes greater than the actual length of the string.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is a dynamic array, <B>Get</B> reads a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <I>NumberOfDimensions</I>. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the sum of all the bytes required to read the array data and the array descriptor. For example, the following array declaration requires 118 bytes when the array is written to disk.</LI></UL></SPAN><P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyArray(1 To 5,1 To 10) As Integer</PRE>
<P CLASS="t">  </P>
<P>The 118 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 * 2), and 100 bytes for the data (5 * 10 * 2).</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is a fixed-size array, <B>Get</B> reads only the data. No descriptor is read.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being read into is any other type of variable (not a variable-length string or a <B>Variant</B>), <B>Get</B> reads only the variable data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the length of the data being read.</LI><LI><SPAN CLASS="Symbol"></SPAN>    <B>Get </B>reads elements of user-defined types as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <B>Put</B>)<B> </B>is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <I>NumberOfDimensions</I>. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</LI></UL></SPAN><P>For files opened in <B>Binary</B> mode, all of the <B>Random</B> rules apply, except:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    In <B>Binary</B> mode, the <B>Len</B> clause in the <B>Open</B> statement has no effect. <B>Get</B> reads all variables from disk contiguously; that is, with no padding between records.</LI><LI><SPAN CLASS="Symbol"></SPAN>    For any array other than an array in a user-defined type, <B>Get</B> reads only the data. No descriptor is read.</LI><LI><SPAN CLASS="Symbol"></SPAN>    <B>Get</B> reads variable-length strings that aren’t elements of user-defined types without expecting the 2-byte length descriptor. The number of bytes read equals the number of characters already in the string. For example, the following statements read 10 bytes from file number 1:</LI></UL></SPAN><P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>VarString = String(10," ")#1,,VarString</PRE>
<P CLASS="t">  </P>
<H2><A NAME="sec313"></A>See Also</H2><P><B>Open</B> Statement, <B>Put</B> Statement, <B>Seek</B> Function, <B>Type</B> Statement, <B>VarType</B> Function.</P>
<H2><A NAME="sec314"></A>Example</H2><P>This example uses the <B>Get</B> statement to read data from a file into a variable. This example assumes that TESTFILE is a file containing five records of the user-defined type Record.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Type Record    ' Define user-defined type.
    ID As Integer
    Name As String * 20TypeMyRecord As Record    ' Declare variable.
' Open sample file for random access."TESTFILE" For Random As #1 Len = Len(MyRecord)
' Read the sample file using the Get statement.= 3    ' Define record number.#1, Position, MyRecord    ' Read third record.#1    ' Close file.</PRE>
<P CLASS="t">  </P>
<P></P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>
</FONT></FONT></BODY></HTML>

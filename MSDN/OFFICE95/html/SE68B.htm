<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SolverOptions Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>SolverOptions Function</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Allows you to specify advanced options for your Solver model. This function and its arguments correspond to the options in the Solver Options dialog box.</P>
<P CLASS="t">Before you use this function, you must establish a reference to the Solver add-in. With a Visual Basic module active, click References on the Tools menu, and then select the Solver.xla check box in the Available References box. If Solver.xla doesn't appear in the Available References box, click Browse, click Solver in the \Excel\Library\Solver folder, and then click OK.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="t"><B>SolverOptions</B>(<B><I>maxTime</I></B>,<I> </I><B><I>iterations</I></B>,<I> </I><B><I>precision</I></B>,<I> </I><B><I>assumeLinear</I></B>,<I> </I><B><I>stepThru</I></B>,<I> </I><B><I>estimates</I></B>,<I> </I><B><I>derivatives</I></B>,<I> </I><B><I>search</I></B>,<I> </I><B><I>intTolerance</I></B>,<I> </I><B><I>scaling</I></B>)</P>
<P CLASS="term1"><B><I>maxTime</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. The maximum time (in seconds) Microsoft Excel will spend solving the problem. The value must be a positive integer. The default value 100 is adequate for most small problems, but you can enter a value as high as 32,767.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>iterations</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. The maximum iterations Microsoft Excel will use in solving the problem. The value must be a positive integer. The default value 100 is adequate for most small problems, but you can enter a value as high as 32,767.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>precision</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. A number between 0 and 1 that specifies the degree of precision to be used in solving the problem. The default precision is 0.000001. A lower precision is indicated if there are fewer decimal places - for example, 0.0001. In general, the higher the precision you specify (a smaller number), the more time Solver will take to reach solutions.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>assumeLinear</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. If <B>True</B>, Solver assumes that the underlying model is linear. This speeds the solution process, but it should be used only if all the relationships in the model are linear. <B>False</B> is the default.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>stepThru</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. If <B>True</B>, Solver pauses at each trial solution. You can pass Solver a macro to run at each pause by using the <B><I>showRef</I></B> argument of the <B>SolverSolve</B> function. If <B>False</B>, Solver doesn't pause at each trial solution. <B>False</B> is the default.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>estimates</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Specifies the approach used to obtain initial estimates of the basic variables in each one-dimensional search: 1 represents Tangent estimates, and 2 represents Quadratic estimates. Tangent uses linear extrapolation from a tangent vector. Quadratic uses quadratic extrapolation; this may improve the results on highly nonlinear problems. Tangent is the default.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>derivatives</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Specifies forward differencing or central differencing for estimates of partial derivatives of the objective and constraint functions: 1 represents forward differencing, and 2 represents central differencing. Central differencing requires more worksheet recalculations, but it may help with problems that generate a message saying that Solver couldn't improve the solution. With functions whose graphical representations aren't smooth and continuous, you should use the Central differencing option. Forward differencing is the default.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>search</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Use the Search options to specify which search algorithm will be used at each iteration to decide which direction to search in: 1 represents the Newton search method, and 2 represents the Conjugate search method. Newton, which uses a quasi-Newton method, is the default search method. This method typically requires more memory than the Conjugate search method, but it requires fewer iterations. Conjugate gradient searching requires less memory than the Newton search method, but it typically requires more iterations to reach a particular level of accuracy. You can try this method if you have a large problem and memory usage is a concern. Conjugate searching is especially useful if stepping through the iterations reveals slow progress between successive trial points.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>intTolerance</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. A decimal number between 0 and 1 that specifies the integer tolerance. This argument applies only if integer constraints have been defined. You can adjust the Tolerance figure, which represents a percentage of error allowed in the optimal solution when an integer constraint is used on any element of the problem. A higher tolerance (allowable percentage of error) would tend to speed up the solution process.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>scaling</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. If <B>True</B>, and if two or more constraints differ by several orders of magnitude, Solver scales the constraints to similar orders of magnitude during computation. This is useful when the inputs ( in the By Changing Cells box in the Solver Parameters dialog box) and outputs (in the Set Target Cell and Subject To The Constraints boxes in the Solver Parameters dialog box) have large differences in magnitude - for example, maximizing percent profit based on million-dollar investments. If <B>False</B>, Solver calculates without scaling the constraints. <B>False</B> is the default.</P>
</BLOCKQUOTE>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>SolverOk</B> Function.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example sets the Precision option to .001.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Activate
SolverReset
SolverOptions precision:=0.001
SolverOK setCell:=Range("TotalProfit"), _
    maxMinVal:=1, _
    byChange:=Range("C4:E6")
SolverAdd cellRef:=Range("F4:F6"), _
    relation:=1, _
    formulaText:=100
SolverAdd cellRef:=Range("C4:E6"), _
    relation:=3, _
    formulaText:=0
SolverAdd cellRef:=Range("C4:E6"), _
    relation:=4
SolverSolve userFinish:=False
SolverSave saveArea:=Range("A33")
</FONT></PRE></FONT>
</FONT></BODY></HTML>

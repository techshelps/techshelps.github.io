<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Unanticipated Errors</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Handling Unanticipated Errors</H2><P CLASS="t">When an error occurs in a procedure that doesn't have an enabled error handler, or within an error handler that's currently running, Visual Basic searches the calls list for another enabled error handler.</P>
<P CLASS="t">For example, suppose the following sequence of calls occurs:</P>
<P CLASS="ls">    1.    Procedure A calls Procedure B.</P>
<P CLASS="ls">    2.    Procedure B calls Procedure C.</P>
<P CLASS="ls">    3.    Procedure C calls Procedure D.</P>
<P></P>
<P CLASS="t">If an error occurs in Procedure D and this procedure doesn't have an enabled error handler, Visual Basic searches backward through the calls list — first Procedure C, then Procedure B, and then Procedure A — and executes the first enabled error handler it finds. If it doesn't encounter an enabled error handler anywhere in the calls list, it displays the appropriate run-time error message and halts your procedure.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">The effect of the search backward through the calls list is hard to predict, because if a <B>Resume</B> or <B>Resume Next</B> statement is encountered in the error handler, execution continues in the procedure where the error handler is found, which isn't necessarily the procedure where the error occurred. To avoid this situation, write a fail-safe error handler that all your error handlers can call as a last resort for errors they cannot handle themselves. This fail-safe procedure can both save the user's data and close your application in an orderly way.</P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Find Method</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Find Method</H1><P CLASS="h"><B>Applies To</B></P>
<P CLASS="t"><B>Range </B>Object.</P>
<P CLASS="h"><B>Description</B></P>
<P CLASS="t">Finds specific information in a range, and returns a <B>Range</B> object that represents the first cell where it is found. Returns <B>Nothing</B> if no match is found. Does not affect the selection or active cell.</P>
<P CLASS="t">For help about using the <B>Find</B> worksheet function in Visual Basic, see "Using Worksheet Functions in Visual Basic" in online Help.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><I>object</I>.<B>Find(</B><B><I>what</I></B>,<B><I> after</I></B>,<B><I> lookIn</I></B>,<B><I> lookAt</I></B>,<B><I> searchOrder</I></B>,<B><I> searchDirection</I></B>,<B><I> matchCase</I></B>,<B><I> matchByte</I></B><B>)</B></P>
<P CLASS="term1"><I>object</I></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. The range to search.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>what</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. The contents for which you want to search. May be a string or any Microsoft Excel data type.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>after</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. The first cell after which you want to search. This corresponds to the position of the active cell when a search is done from the user interface. Note that<B><I> after</I></B> must be one cell in the range. If this argument is omitted, the top left cell of the range is used as the starting point for the search. Remember that the search begins <I>after</I> this cell; the specified cell is not searched until the method wraps back around to this cell.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>lookIn</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. One of <B>xlFormulas</B>, <B>xlValues</B>, or <B>xlNotes</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>lookAt</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. May be<B> xlWhole</B> or <B>xlPart</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>searchOrder</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. One of <B>xlByRows</B> (to search row-major) or <B>xlByColumns</B> (to search column-major).</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>searchDirection</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. <B>xlNext</B> or <B>xlPrevious</B>; if omitted it is <B>xlNext</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>matchCase</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. If <B>True</B>, case-sensitive search is performed.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>matchByte</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Used only in Far East Microsoft Excel. If <B>True</B>, double-byte characters match only double-byte characters. If <B>False</B>, double-byte characters can match their single-byte equivalents.</P>
</BLOCKQUOTE>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">The settings for <B><I>lookIn</I></B>, <B><I>lookAt</I></B>, <B><I>searchOrder</I></B>, <B><I>matchCase</I></B>, and<B> </B><B><I>matchByte</I></B> are saved each time you use this method. If you do not specify values for these arguments the next time you call the method, the saved values are used. Setting these arguments changes the settings in the Find dialog box, and changing the settings in the Find dialog box changes the saved values that are used if you omit the arguments. To avoid problems, explicitly set these arguments each time you use this method.</P>
<P CLASS="t">The <B>FindNext</B> and <B>FindPrevious</B> methods can be used to repeat the search.</P>
<P CLASS="t">When the search reaches the end of the specified search range, it wraps around to the beginning of the range. To stop a search when this wraparound occurs, save the address of the first found cell, and then test each successive found-cell address against this saved address.</P>
<P CLASS="t">To find cells matching more complicated patterns, use <B>For Each</B> with the <B>Like</B> operator. For example, the following code searches for all cells in the range A1:C5 that use a font starting with the letters "Cour". When it finds a match, it changes the font to Times New Roman:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">For Each c In [A1:C5]
    If c.Font.Name Like "Cour*" Then
        c.Font.Name = "Times New Roman"
    End If
Next
</FONT></PRE>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>FindNext</B> Method, <B>FindPrevious</B> Method, <B>Replace</B> Method.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example finds the first occurrence of the word Phoenix in column B on Sheet1 and then displays the address of the cell that contains this word. If the word is not found, the example diplays a message.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set foundCell = Worksheets("Sheet1").Columns("B").Find("Phoenix")
If foundCell Is Nothing Then
    MsgBox "The word was not found"
Else
    MsgBox "The word was found in cell " &amp; foundCell.Address
End If
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Write # Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Write # Statement</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">Writes raw data to a sequential file.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>Write</B> <B><I>#</I></B><I>filenumber</I>[,<I>outputlist</I>]</P>
<P CLASS="t">The <B>Write</B> statement syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Part</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Description</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>filenumber</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Any valid file number.</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt"><I>outputlist</I></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">One or more comma-delimited numeric or string expressions to write to a file.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">If you omit <I>outputlist </I>and include a comma after <I>filenumber</I>, a blank line prints to the file. Multiple expressions can be separated with a space, a semicolon, or a comma. A space has the same effect as a semicolon.</P>
<P CLASS="t">When <B>Write #</B> is used to output data to a file, several universal assumptions are followed so the data can always be read and correctly interpreted using<B> Input #</B>, regardless of locale:</P>
<UL><LI>Numeric data is always output using the period (.) as the decimal separator.</LI><LI>For Boolean data, either #TRUE# or #FALSE# is printed. The <B>True</B> and <B>False</B> keywords are not translated, regardless of locale.</LI><LI>Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the provided part gets written to the file.</LI><LI>Nothing is written to the file if <I>outputlist</I> data is <B>Empty</B>. However, for <B>Null</B> data, #NULL# is output.</LI><LI>For error data, the output appears as #ERROR <I>errorcode</I>#. The <B>Error</B> keyword is not translated, regardless of locale.</LI></UL><P></P>
<P CLASS="t">Unlike the <B>Print #</B> statement, the<B> Write # </B>statement inserts commas between items and quotation marks around strings as they are written to the file. You don't have to put explicit delimiters in the list. <B>Write #</B> inserts a newline character (carriage return or carriage return-linefeed) after it has written the final character in <I>outputlist</I> to the file.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Input # </B>Statement, <B>Open</B> Statement, <B>Print #</B> Statement.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example uses the <B>Write #</B> statement to write raw data to a sequential file.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Open "TESTFILE" For Output As 1    ' Open file for output.
Write #1, "Hello World", 234    ' Written data is comma delimited.
Write #1,    ' Write blank line.

' Assign Boolean, Date, Null and Error values.
MyBool = False : MyDate = #February 12, 1969# : MyNull = Null
MyError = CVErr(32767)
' Boolean data is written as #TRUE# or #FALSE#. Date literals are 
' written in universal date format. Null data is written as #NULL#. 
' Error data is written as #ERROR errorcode#.
Write #1, MyBool ; " is a Boolean value"
Write #1, MyDate ; " is a date"
Write #1, MyNull ; " is a null value"
Write #1, MyError ; " is an error value"
Close #1    ' Close file.
</FONT></PRE></FONT>
</FONT></BODY></HTML>

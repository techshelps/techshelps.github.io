<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why Use the Word API?</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Why Use the Word API?</H2><P CLASS="t">The WordBasic macro language provides one method of controlling Word through programming. WordBasic can access all of Word's functionality, and, in Windows, can even call Windows API functions directly, which provides a significant degree of power and flexibility. However, the Word API goes beyond WordBasic, providing even more flexibility and better performance.</P>
<P CLASS="t">Word API programming has several advantages over WordBasic. You can write code that is fast, efficient, and flexible. You can use pre-existing libraries of external code, or create new code using any compiler suitable for creating code modules. There are few limitations to the complexity or sophistication of WLLs that you can design and create for Word.</P>
<P CLASS="t">In Windows, a Word add-in library is a special form of a standard Windows dynamic-link library (DLL). On the Macintosh, a Word add-in library is a WDLL code resource designed to be available directly to WordBasic. You can use any language that can create a Windows DLL or Macintosh code resource, such as C, Pascal, or Assembler. However, C is the language of choice for most people. </P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">In this appendix, the term "WLL" is used to refer to a Word add-in library developed for either Windows or the Macintosh.</P>
<P></P></FONT></FONT></BODY></HTML>

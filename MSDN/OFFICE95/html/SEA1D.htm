<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Breakpoint</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using a Breakpoint</H2><P CLASS="t">When Visual Basic encounters a breakpoint while executing a procedure, it enters break mode just before executing the breakpoint line. You can set or remove a breakpoint when you're writing code in a module or whenever you're in break mode. When you set a breakpoint, Visual Basic highlights the breakpoint line with a dark red background. Visual Basic also displays a rectangular outline around the statement at which the procedure is suspended. This outline indicates the <I>current statement</I>, or the next statement to be executed.</P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To set a breakpoint</B></P>
<P CLASS="ls">    1.    In the module, move the insertion point to a line of code that isn't already a breakpoint.</P>
<P CLASS="a"><img src="dtoggbrk.gif"></P>
<P>Toggle Breakpoint <BR>button</P>
<P CLASS="ls">    2.    On the Run menu, click Toggle Breakpoint, or click the Toggle Breakpoint button on the Visual Basic toolbar.</P>
<P></P>
<P CLASS="proch"><B><img src="prcarrow.gif">    To clear a breakpoint</B></P>
<P CLASS="ls">    1.    In the module, move the insertion point to the line of code that's the breakpoint you want to clear.</P>
<P CLASS="ls">    2.    On the Run menu, click Toggle Breakpoint, or click the Toggle Breakpoint button on the Visual Basic toolbar.</P>
<P></P>
<P CLASS="t">After a breakpoint occurs, you can examine what's happened up to that point by inspecting code and data in the Immediate pane of the Debug window and by using the Calls dialog box. For more information about the Calls dialog box, see "Using the Calls Dialog Box to Trace Nested Procedures" later in this chapter.</P>
<P CLASS="t">If the problem you're trying to solve has already occurred, you know that a previously executed line of code is causing the problem. If not, a line of code that has not executed yet is causing the problem. If the breakpoint line is the cause, the problem won't occur until you execute at least one more statement. After you enter break mode, you can step through your code line by line to find the problem, as discussed later in this chapter.</P>
<P></P>
<P CLASS="nh"><B>Important</B></P>
<P CLASS="nt">The problem may be something other than a line of code. A statement can be the indirect cause of the problem if it assigns an incorrect value to a variable. You can examine the values of variables while you're in break mode. For more information, see "Inspecting Code and Data in the Immediate Pane" later in this chapter.</P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sub Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec129"></A>Sub Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec130"></A>Description</H2><P>Declares the name, arguments, and code that form the body of a <B>Sub</B> procedure.</P>
<H2><A NAME="sec131"></A>Syntax</H2><P>[<B>Private</B> | <B>Public</B>] [<B>Static</B>] <B>Sub</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>] <BR>    [<I>statements</I>]<BR>    [<B>Exit Sub</B>]<BR>    [<I>statements</I>]<B>End Sub</B></P>
<P></P>
<P>The <B>Sub</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Public</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Sub</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement) the procedure is not available outside the project.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Private</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Sub</B> procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Static</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Sub</B> procedure’s local variables are preserved between calls. The <B>Static</B> attribute doesn’t affect variables that are declared outside the <B>Sub</B>, even if they are used in the procedure.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>name</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the <B>Sub</B>; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>arglist</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">List of variables representing arguments that are passed to the <B>Sub</B> procedure when it is called. Multiple variables are separated by commas.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>statements</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any group of statements to be executed within the body of the <B>Sub</B> procedure.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>The <I>arglist</I> argument has the following syntax and parts:</P>
<P>[<B>Optional</B>][<B>ByVal</B> | <B>ByRef</B>][<B>ParamArray</B>] <I>varname</I>[<B>( )</B>] [<B>As</B> <I>type</I>]</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="279pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Optional</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that an argument is not required. If used, all subsequent arguments in <I>arglist</I> must also be optional and declared using the <B>Optional</B> keyword. All <B>Optional</B> arguments must be <B>Variant</B>. <B>Optional</B> can’t be used for any argument if <B>ParamArray</B> is used.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByVal</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by value.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByRef</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by reference.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ParamArray</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Used only as the last argument in <I>arglist</I> to indicate that the final argument is an <B>Optional</B> array of <B>Variant</B> elements. The <B>ParamArray</B> keyword allows you to provide an arbitrary number of arguments. It may not be used with <B>ByVal</B>, <B>ByRef</B>, or <B>Optional</B>.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the argument passed to the procedure; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String</B> (variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec132"></A>Remarks</H2><P>If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Sub</B> procedures are public by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P>All executable code must be in procedures. You can’t define a <B>Sub</B> procedure inside another <B>Sub</B>, <B>Function</B>, or <B>Property</B> procedure.</P>
<P>The <B>Exit Sub </B>keywords cause an immediate exit from a <B>Sub</B> procedure. Program execution continues with the statement following the statement that called the <B>Sub</B> procedure. Any number of <B>Exit Sub</B> statements can appear anywhere in a <B>Sub</B> procedure.</P>
<P>Like a <B>Function</B> procedure, a <B>Sub</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <B>Function</B> procedure, which returns a value, a <B>Sub</B> procedure can’t be used in an expression.</P>
<P>You call a <B>Sub</B> procedure using the procedure name followed by the argument list. See the <B>Call</B> statement for specific information on how to call <B>Sub</B> procedures.</P>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P><B>Caution</B>   <B>Sub</B> procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow. The <B>Static</B> keyword usually is not used with recursive <B>Sub</B> procedures.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P>Variables used in <B>Sub</B> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <B>Dim</B> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.</P>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P><B>Caution</B>   A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you have defined at the module level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant or variable, it is assumed that your procedure is referring to that module-level name. Explicitly declare variables to avoid this kind of conflict. You can use an <B>Option Explicit</B> statement to force explicit declaration of variables.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   You can’t use <B>GoSub</B>, <B>GoTo</B>, or <B>Return</B> to enter or exit a <B>Sub</B> procedure.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec133"></A>See Also</H2><P><B>Call</B> Statement, <B>Dim</B> Statement, <B>Function</B> Statement, <B>Option Explicit</B> Statement, <B>Property Get</B> Statement, <B>Property Let</B> Statement, <B>Property Set</B> Statement.</P>
<H2><A NAME="sec134"></A>Specifics (Microsoft Access)</H2><P>In Microsoft Access, a public <B>Sub</B> procedure in a standard module is available to all other procedures in the database and in all other Microsoft Access databases. However, it is not available to any other applications.</P>
<P>If a <B>Sub</B> procedure is declared as public within a private module, then the procedure is available to all other procedures in that database, but is not available to other Microsoft Access databases. Form modules and report modules are always private, as are standard modules that contain an <B>Option Private Module</B> statement.</P>
<P>If you declare a <B>Sub</B> procedure as private in any module, that procedure is available only to other procedures within the same module.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   If a <B>Sub</B> procedure is available to other Microsoft Access databases, it will be visible from those databases in the Object Browser.</P>
<P CLASS="t">  </P>
<P></P>
<P>When you create an event procedure for a form or report, Microsoft Access automatically inserts a code stub for a <B>Sub</B> procedure and precedes it with the <B>Private</B> keyword. For example, draw a command button on a new form, set its <B>OnClick</B> property to [Event Procedure], and click on the Build button to view the form’s module. Microsoft Access inserts the following code for you in the module.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Private Sub Command0_Click
Sub
</PRE>
<P CLASS="t">  </P>
<P>You can then enter the code that you want to execute when that button’s Click event occurs.</P>
<H2><A NAME="sec135"></A>Example</H2><P>This example uses the <B>Sub</B> statement to define the name, arguments, and code that form the body of a <B>Sub</B> procedure.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' Sub procedure definition.SubComputeArea(Length, TheWidth)        ' Sub procedure with two
                                        ' arguments.
    Dim Area As Double                    ' Declare local variable.
    If Length = 0 Or TheWidth = 0 Then    ' If either argument = 0.
        Exit Sub                            ' Exit Sub immediately.
    End If
    Area = Length * TheWidth                ' Calculate area of rectangle.
    Debug.Print Area                        ' Print Area to Debug window.Sub
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>

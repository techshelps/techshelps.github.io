<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoiding Circular References</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Avoiding Circular References</H2><P CLASS="t">Because constants can be defined in terms of other constants, you must be careful not to set up a circular reference between two or more constants. A circular reference occurs when you have two or more public constants that are defined in terms of each other, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">' In Module 1:
Public Const conA = conB * 2

' In Module 2:
Public Const conB = conA / 2
</FONT></PRE>
<P CLASS="t">Visual Basic generates an error when you attempt to run a macro that contains a circular reference. You cannot run the macro until you resolve the circular reference. To avoid creating a circular reference, restrict all your public constants to a single module or a small number of modules. This way, it will be easier for you to keep track of your constants and catch this kind of mistake.</P></FONT>
</FONT></BODY></HTML>

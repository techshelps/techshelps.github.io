<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Get Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec219"></A>Property Get Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec220"></A>Description</H2><P>Declares the name, arguments, and code that form the body of a <B>Property</B> procedure, which gets the value of a property.</P>
<H2><A NAME="sec221"></A>Syntax</H2><P>[<B>Public</B> | <B>Private</B>][<B>Static</B>] <B>Property</B> <B>Get</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>][<B>As</B> <I>type</I>]<BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR>    [<B>Exit Property</B>] <BR>    [<I>statements</I>]<BR>    [<I>name</I> <B>=</B> <I>expression</I>]<BR><B>End Property</B></P>
<P>The <B>Property Get</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Public</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property</B> <B>Get</B> procedure is accessible to all other procedures in all modules. If used in a private module (one that contains an <B>Option Private</B> statement) the procedure is not available outside the project.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Private</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property</B> <B>Get</B> procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Static</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the <B>Property</B> <B>Get</B> procedure’s local variables are preserved between calls. The <B>Static</B> attribute doesn’t affect variables that are declared outside the <B>Property Get</B> procedure, even if they are used in the procedure.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>name</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the <B>Property</B> <B>Get</B> procedure; follows standard variable naming conventions, except that the name can be the same as a <B>Property</B> <B>Let</B> or <B>Property Set</B> procedure in the same module.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>arglist</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">List of variables representing arguments that are passed to the <B>Property</B> <B>Get</B> procedure when it is called. Multiple arguments are separated by commas. The name and data type of each argument in a <B>Property</B> <B>Get</B> procedure must be the same as the corresponding arguments in a <B>Property</B> <B>Let</B> procedure (if one exists).</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the value returned by the <B>Property</B> <B>Get</B> procedure; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String (</B>except fixed length<B>)</B>,<B> Object</B>, <B>Variant</B>, or user-defined type. Arrays of any type can’t be returned, but a <B>Variant</B> containing an array can.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The return <I>type</I> of a <B>Property</B> <B>Get</B> procedure must be the same data type as the last (or sometimes the only) argument in a corresponding <B>Property</B> <B>Let</B> procedure (if one exists) that defines the value assigned to the property on the right-hand side of an expression.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>statements</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any group of statements to be executed within the body of the <B>Property</B> <B>Get</B> procedure.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>expression</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Value of the property returned by the procedure defined by the <B>Property Get</B> statement.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>The <I>arglist</I> argument has the following syntax and parts:</P>
<P>[<B>ByVal</B> | <B>ByRef</B>] <I>varname</I>[<B>( )</B>][<B>As</B> <I>type</I>]</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByVal</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by value.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ByRef</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Indicates that the argument is passed by reference.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the argument passed to the <B>Property Get</B> procedure; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(variable length only), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec222"></A>Remarks</H2><P>If not explicitly specified using either <B>Public</B> or <B>Private</B>, <B>Property</B> procedures are public by default. If <B>Static</B> is not used, the value of local variables is not preserved between calls.</P>
<P>All executable code must be in procedures. You can’t define a <B>Property</B> <B>Get</B> procedure inside another <B>Property</B>, <B>Sub</B>, or <B>Function</B> procedure.</P>
<P>The <B>Exit Property </B>keywords cause an immediate exit from a <B>Property Get</B> procedure. Program execution continues with the statement following the statement that called the <B>Property</B> <B>Get</B> procedure. Any number of <B>Exit Property</B> statements can appear anywhere in a <B>Property</B> <B>Get </B>procedure.</P>
<P>Like a <B>Sub</B> and <B>Property Let</B> procedure, a <B>Property Get</B> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <B>Sub</B> or <B>Property Let</B> procedure, you can use a <B>Property Get</B> procedure on the right-hand side of an expression in the same way you use a <B>Function</B> or a property name when you want to return the value of a property.</P>
<H2><A NAME="sec223"></A>See Also</H2><P><B>Function</B> Statement, <B>Property</B> <B>Let</B> Statement, <B>Property</B> <B>Set</B> Statement, <B>Sub</B> Statement.</P>
<H2><A NAME="sec224"></A>Specifics (Microsoft Access)</H2><P>You can use the <B>Property Get</B> statement to define a property procedure that gets the value of a property for a user-defined object. You will probably want to use the <B>Property Let</B> and <B>Property Get</B> statements together to create a property for an object. For example, you could define a <B>Property Let</B> procedure in a form module to set a new property for an object, and a <B>Property Get</B> procedure to return the value of that setting.</P>
<P>Usually you will define property procedures within a form or report module. Property procedures in a form or report module are public by default, and will be available to procedures in other modules in the current database. However, they will not be available to other databases.</P>
<P>You can use the property procedures to create new properties on a user-defined object. You can also use them to combine a set of properties for a custom form or report object. For example, you could create a custom property called CustomFormType. Using the <B>Property Get</B> statement, you could construct the CustomFormType property procedures so that one setting would display a white form with scroll bars, navigation buttons, and caption “Type1”, while another setting would display a blue form with neither scroll bars nor navigation buttons, and caption “Type2”. Then you could set the CustomFormType property for new form objects that you create for this form. Using the <B>Property Get</B> statement, you could create a property procedure to return the value of this property once it has been set.</P>
<H2><A NAME="sec225"></A>Example</H2><P>This example uses the <B>Property Get</B> Statement to define a property procedure that gets the value of a property. The property identifies, as a string, the current color of a pen in a drawing package.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim CurrentColor As IntegerBLACK = 0, RED = 1, GREEN = 2, BLUE = 3

' Returns the current color of the pen as a string.Get PenColor() As String
    Select Case CurrentColor
        Case RED
            PenColor = "Red"
        Case GREEN
            PenColor = "Green"
        Case BLUE
            PenColor = "Blue"
    End SelectProperty
' The following code gets the color of the pen
' calling the Property Get procedure.= PenColor()
</PRE>
<P CLASS="t">  </P>
<P>The following example shows how to use the <B>Property Let</B> and <B>Property Get</B> statements to create a custom property, CustomFormType, for a user-defined object. By setting the CustomFormType property, you apply a set of predefined characteristics to a user-defined form object. You can also read the property to determine its current setting.</P>
<P>To test this example, create a new form and save it as CustomFormTemplate. In the Declarations section of the form’s module, enter the following code.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Public intCurrent As IntegerconType1 = 1conType2 = 2
</PRE>
<P CLASS="t">  </P>
<P>Enter the following procedures in the form module. The <B>Property Let</B> procedure defines the characteristics that will be applied to the form when the CustomFormType property is set. The <B>Property Get</B> procedure returns the current setting of the CustomFormType property.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Static Property Let CustomFormType(intCustomType As Integer)
    Select Case intCustomType
        Case conType1
            With Me
                .Section(0).BackColor = RGB(255, 255, 255)
                .ScrollBars = 3
                .NavigationButtons = True
                .Caption = "Type1"
                intCurrent = conType1
            End With
        Case conType2
            With Me
                .Section(0).BackColor = RGB(127, 127, 127)
                .ScrollBars = 0
                .NavigationButtons = False
                .Caption = "Type2"
                intCurrent = conType2
            End With
        Case Else
            MsgBox "Error!"
    End SelectProperty
Property Get CustomFormType() As Integer
    Select Case intCurrent
        Case conType1
            CustomFormType = conType1
        Case conType2
            CustomFormType = conType2
        Case Else
            MsgBox "Error!"
    End SelectProperty

' Define custom method to display form.Show()
    Me.Visible = TrueSub
</PRE>
<P CLASS="t">  </P>
<P>Create a new instance of the CustomFormTemplate object in a standard module. Now you can set and read the value of the CustomFormType property just as you would any built-in property.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub SetFormProperty()
    Dim frmObject as New Form_CustomFormTemplate
    ' Call Show method to display form.
    frmObject.Show
    ' Set value of property.
    frmObject.CustomFormType = 1
    ' Return value of property.
    Debug.Print frmObject.CustomFormTypeSub
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetObject Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec11"></A>GetObject Function</H1><P CLASS="t">  </P>
<H2><A NAME="sec12"></A>Description</H2><P>Retrieves an OLE Automation object from a file.</P>
<H2><A NAME="sec13"></A>Syntax</H2><P><B>GetObject(</B>[<I>pathname</I>][<B>, <I>class</I></B>]<B>)</B></P>
<P>The <B>GetObject</B> function syntax has these named arguments:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>pathname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The full path and name of the file containing the object to retrieve. If <I>pathname</I> is omitted, <I>class</I> is required.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>class</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">A string representing the class of the object.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>The <I>class</I> argument uses the syntax “<I>appname</I><B>.</B><I>objecttype</I>” and has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>appname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The name of the application providing the object.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>objecttype</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The type or class of object to create.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec14"></A>Remarks</H2><P>Use the <B>GetObject</B> function to access an OLE Automation object from a file and assign the object to an object variable. To do this, use the <B>Set</B> statement to assign the object returned by <B>GetObject</B> to the object variable. For example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim CADObject As ObjectCADObject = GetObject("C:\CAD\SCHEMA.CAD")
</PRE>
<P CLASS="t">  </P>
<P>When this code is executed, the application associated with the specified <I>pathname</I> is started and the object in the specified file is activated.</P>
<P>If <I>pathname</I> is a zero-length string (""), <B>GetObject</B> returns a new object instance of the specified type. If the <I>pathname</I> argument is omitted entirely, <B>GetObject</B> returns a currently active object of the specified type. If no object of the specified type exists, an error occurs.</P>
<P>The above example shows how to activate an entire file. However, some applications allow you to activate part of a file. To do this, add an exclamation point (<B>!</B>) to the end of the filename and follow it with a string that identifies the partof the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.</P>
<P>For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called SCHEMA.CAD:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3")
</PRE>
<P CLASS="t">  </P>
<P>If you do not specify the object’s <I>class</I>, based on the filename you provide, OLE determines the application to start and the object to activate. Some files, however, may support more than one class of object. For example, a drawing might support three different types of objects: an application object, a drawing object, and a toolbar object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional <I>class</I><I> </I>argument. For example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyObject As ObjectMyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")
</PRE>
<P CLASS="t">  </P>
<P>In the above example, FIGMENT is the name of a drawing application and DRAWING is one of the object types it supports.</P>
<P>Once an object is activated, you reference it in code using the object variable you defined. In the above example, you access properties and methods of the new object using the object variable MyObject. For example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>MyObject.Line 9, 90.InsertText 9, 100, "Hello, world.".SaveAs "C:\DRAWINGS\SAMPLE.DRW"
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P><B>Note</B>   Use the <B>GetObject</B> function when there is a current instance of the object, or if you want to create the object with a file already loaded. If there is no current instance, and you don’t want the object started with a file loaded, use the <B>CreateObject</B> function.</P>
<P>If an object has registered itself as a single-instance object (for example, the Word.Basic object in Microsoft Word 6.0), only one instance of the object is created, no matter how many times <B>CreateObject</B> is executed. In addition, with a single-instance object, <B>GetObject</B> always returns the same instance when called with the zero-length string syntax (""), and it causes an error if the <I>pathname</I> argument is omitted. You cannot use <B>GetObject</B> to obtain a reference to a class created with Visual Basic.</P>
<P CLASS="t">  </P>
<H2><A NAME="sec15"></A>See Also</H2><P><B>CreateObject</B> Function, <B>Set</B> Statement.</P>
<H2><A NAME="sec16"></A>Example</H2><P>This example uses the <B>GetObject</B> function to get a reference to a specific Microsoft Excel <B>Worksheet </B>(MyXL). It uses the worksheet’s <B>Application</B> property to make Microsoft Excel visible, to close it, and so on. The first call to <B>GetObject</B> causes an error if Microsoft Excel is <I>not</I> already running. In the example, the error causes the ExcelWasNotRunning flag to be set to <B>True</B>. The second call to <B>GetObject </B>specifies a file to open. If Microsoft Excel is not already running, this second call starts it, and returns a reference to the worksheet represented by the specified file. The file, MYTEST.XLS in the example, must exist in the specified location; otherwise the Visual Basic error OLE Automation error is generated. Next, the example code makes both Microsoft Excel and the window containing the specified worksheet visible. Finally, if there was no previous version of Microsoft Excel running, the code uses the <B>Application</B> object’s <B>Quit</B> method to close Microsoft Excel. If the application was already running, no attempt is made to close it. The reference itself is released by setting it to <B>Nothing.</B></P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyXL As Object                    ' Variable to hold reference
                                    ' to Microsoft Excel.ExcelWasNotRunning As Boolean    ' Flag for final release.

' Test to see if there is a copy of Microsoft Excel already running.Error Resume Next                    ' Defer error trapping.
' GetObject function called without the first argument returns a 
' reference to an instance of the application. If the application isn't
' running, an  error occurs. Note the comma used as the first argument
' placeholder.MyXL = GetObject(, "Excel.Application")Err.Number &lt;&gt; 0 Then ExcelWasNotRunning = True.Clear                            ' Clear Err object in case error
                                    ' occurred.

' Set the object variable to reference the file you want to see.MyXL = GetObject("c:\vb4\MYTEST.XLS")

' Show Microsoft Excel through its Application property. Then
' show the actual window containing the file using the Windows
' collection of the MyXL object reference..Application.Visible = True.Parent.Windows(1).Visible = True
                                    ' Do manipulations of your
                                    ' file here.
                                    ' ...
' If this copy of Microsoft Excel was not already running when you
' started, close it using the Application property's Quit method.
' Note that when you try to quit Microsoft Excel, the Microsoft Excel
' title bar blinks and Microsoft Excel displays a message asking if you
' want to save any loaded files.ExcelWasNotRunning = True Then MyXL.Application.Quit
MyXL = Nothing                    ' Release reference to the
                                    ' application and spreadsheet.</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseDown, MouseUp Events -- Event Procedures</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec164"></A>MouseDown, MouseUp Events -- Event Procedures</H1><P CLASS="t">  </P>
<H2><A NAME="sec165"></A>Description</H2><P>To create an event procedure that is executed when the MouseDown or MouseUp event occurs, set the <B>OnMouseDown</B> or <B>OnMouseUp</B> property to [Event Procedure], and click the Build button.</P>
<H2><A NAME="sec166"></A>Syntax</H2><P><B>Private Sub Form_MouseDown(</B>Button<B> As Integer</B>,<B> </B>Shift<B> As Integer</B>,<B> </B>X<B> As ÂSingle</B>,<B> </B>Y<B> As Single)</B><B>Private Sub </B><I>controlname</I><B>_MouseDown(</B>Button<B> As Integer</B>,<B> </B>Shift<B> As Integer</B>,<B> </B>X<B> ÂAs Single</B>,<B> </B>Y<B> As Single)</B><B>Private Sub Form_MouseUp(</B>Button<B> As Integer</B>,<B> </B>Shift<B> As Integer</B>,<B> </B>X<B> As Single</B>,<B> Â</B>Y<B> As Single)</B><B>Private Sub</B> <I>controlname</I>_<B>MouseUp(</B>Button As Integer, Shift <B>As Integer</B>, X <B>As</B> <B>ÂSingle</B>, Y <B>As Single)</B></P>
<P></P>
<P></P>
<P></P>
<P>The MouseDown and MouseUp events use the following arguments.</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="268pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Argument</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>controlname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">A string that is the name of the control affected by the MouseDown and MouseUp event procedures.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="268pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Argument</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Button</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The button that was pressed (MouseDown) or released (MouseUp) to trigger the event. If you need to test for the Button argument, you can use one of the following intrinsic constants as bit masks:</P>
<P CLASS="t"><B>Constant    Description</B></P>
<P CLASS="t"><B>acLeftButton</B>          Bit mask for the left mouse button.</P>
<P CLASS="t"><B>acRightButton</B>        Bit mask for the right mouse button.</P>
<P CLASS="t"><B>acMiddleButton</B>     Bit mask for the middle mouse button.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Shift</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The state of the SHIFT, CTRL, and ALT keys when the button specified by the Button argument was pressed or released. If you need to test for the Shift argument, you can use one of the following intrinsic constants as bit masks:</P>
<P CLASS="t"><B>Constant</B>    <B>Description</B></P>
<P CLASS="t"><B>acShiftMask</B>    Bit mask for the SHIFT key.</P>
<P CLASS="t"><B>acCtrlMask</B>    Bit mask for the CTRL key.</P>
<P CLASS="t"><B>acAltMask</B>    Bit mask for the ALT key.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">X, Y</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The x and y coordinates for the current location of the mouse pointer. X and Y are always expressed in twips.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   If a mouse button is pressed while the pointer is over a form or control, that object receives all mouse events up to and including the last MouseUp event. This means that the X and Y arguments may not always be relative to the object that receives them.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec167"></A>Remarks</H2><P>You test for a condition by first assigning each result to a temporary <B>Integer</B> variable and then comparing the Shift or Button argument to a intrinsic constant. Use the <B>And</B> operator with the Button argument to test whether the condition is greater than 0, indicating that the left, middle, or right mouse button was pressed, as in the following example.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>LeftDown = (Button And acLeftButton) &gt; 0
</PRE>
<P CLASS="t">  </P>
<P>In an event procedure, you can test for any combination of conditions, as in the following example.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>If ShiftDown And CtrlDown Then
    .    ' Do this if SHIFT and CTRL keys are pressed.
    .
    .</PRE>
<P CLASS="t">  </P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The Button argument for the MouseDown and MouseUp events differs from the Button argument used for the MouseMove event. For the MouseDown and MouseUp events, the Button argument indicates exactly one button per event; that is, if you press two mouse buttons, two MouseDown (and MouseUp) events will occur, each with a different Button argument setting. For the MouseMove event, the Button argument indicates the current state of all buttons.</P>
<P CLASS="t">  </P>
<P></P>
<P>You can use the arguments for the KeyDown, KeyPress, and KeyUp events, in conjunction with the arguments for the MouseDown, MouseUp, and MouseMove events, to make your application work smoothly for both keyboard and mouse users.</P>
<P>You canít cancel the MouseDown or MouseUp events.</P>
<H2><A NAME="sec168"></A>See Also</H2><P>MouseDown, MouseUp Events ó Macros.</P>
<H2><A NAME="sec169"></A>Example</H2><P>The following example shows how you can find out which mouse button caused a MouseDown event.</P>
<P>To try this example, add the following code to the Declarations section of a module for a form.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Private Sub Form_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If Button = acLeftButton Then MsgBox "You pressed the left button."
    If Button = acRightButton Then _
        MsgBox "You pressed the right button."
    If Button = acMiddleButton Then _
        MsgBox "You pressed the middle button."Sub</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

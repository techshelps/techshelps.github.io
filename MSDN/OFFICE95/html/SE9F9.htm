<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Looping on a Collection</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Looping on a Collection</H2><P CLASS="t">There are several different ways you can loop on the elements of a collection. However, the recommended method for looping on a collection is to use the <B>For&nbsp;Each...Next </B>loop. In this structure, Visual Basic automatically sets an object variable to return every object in the collection. The following illustration shows the essential components of the <B>For Each...Next </B>loop.</P>
<P CLASS="a">    <img src="APG0405.gif"></P>
<P CLASS="t">The following procedure shows how you could use a <B>For Each...Next </B>loop to close every workbook except the workbook that contains the running procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub CloseWorkbooks()
    Dim wb As Workbook
    For Each wb In Application.Workbooks
        If wb.Name &lt;&gt; ThisWorkbook.Name Then
            wb.Close
        End If
    Next wb
End Sub
</FONT></PRE>
<P CLASS="t">The <B>For Each...Next </B>loop is also the recommended method for looping on a range of cells; for more information, see "Looping on a Range of Cells" later in this chapter. For more information about looping in Visual Basic, see Chapter 3, "Controlling Program Flow."</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 1: Creating and Recording Macros</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1><a name="_Toc307817458">Lesson
1: Creating and Recording Macros</font></a></H1>
  <p><b><i>Lesson
    Objectives</i></b></font></p>
    
        <p>Upon
        completion of this lesson, the participant will be able
        to:</font></p>
        
            <ul>
                <li>Create
                    new macros.</font></li>
                <li>Understand
                    the different options available when creating
                    macros.</font></li>
                <li>Understand
                    how to record a macro.</font></li>
                <li>Understand
                    how and where macros are stored.</font></li>
            </ul>
        
        <p><b>Some Topics to
        be introduced in this lesson include:</b></font></p>
        
            
                <ul>
                    <li>Macro Menu List</font></li>
                    <li>Shortcut Keys</font></li>
                    <li>Macro Recorder</font></li>
                    <li>Row References (Relative
                        and Absolute)</font></li>
                    <li>Column References
                        (Relative and Absolute)</font></li>
                </ul>
            
        
    
    <p><b><i>Creating
    and Running Macros</i></b></font></p>


<p>There are
several reasons for creating a macro in Microsoft Project. You
may want to automate a set of steps you repeat over and over or
you may want to customize the way Microsoft Project performs some
task.</font></p>

<p>In Visual Basic
for Applications, a macro corresponds to a subprocedure.</font></p>
  <p><b>Sub
    PrintMonthlyReport()</b></font></p>
    <p><b>...</b></font></p>
    <p><b>End Sub</b></font></p>


<p>So, the
subprocedure PrintMonthlyReport can also be referred to as the
macro PrintMonthlyReport.</font></p>
  
        <p><b>Recording a
        Macro</b></font></p>
    


<p>The easiest way
to automate a set of steps which you repeat over and over is to
record a macro. The macro recorder records each action which is
performed and places those commands in a macro.</font></p>
  
        
            <p><b>To record
            a macro:</b></font></p>
            
                <p>Choose
                Record Macro from the Tools menu.</font></p>
                <p>Enter
                a name for the macro and a brief description.
                This description is displayed when the macro is
                selected in the Macros dialog.</font></p>
                <p>Click
                the OK button or press ENTER.</font></p>
            
        
    
    <p align="center"><img src="Image208.gif" hspace="12"
    width="448" height="167"></font></p>


<p><i>The Record
Macro dialog box</i></font></p>

<p>There are some
advanced options which allow you to customize how Microsoft
Project records certain events and where the macro is stored. By
choosing the Options button in the Record Macro dialog, you can
set these options.</font></p>

<p align="center"><img
src="Image209.gif" width="448" height="362"></font></p>

<p><i>The Record
Macro dialog box with advanced options</i></font></p>

<p><b>Show in Macro
Menu List</b>: If this option is selected, the macro will appear
in the macro menu list, if added to a menu.</font></p>

<p><b>Shortcut Key</b>:
This option is used to assign a Ctrl + &lt;key&gt; combination
for running the macro.</font></p>
  
        
            
                <p><b>Store
                Macro in</b>:</font></p>
                <p><b>Global
                File</b>: When selected, the macro is saved to
                the GLOBAL.MPT file.</font></p>
                <p><b>Current
                Project File</b>: If this option is selected, the
                macro is saved in the project file, and is only
                available when this project is open.</font></p>
                <p><b>Row
                References</b>: </font></p>
                <p><b>Relative</b>:
                All row selections are recorded relative to the
                current row. For example, &quot;select 3 rows
                up&quot;, or &quot;select 2 rows down&quot;.</font></p>
                <p><b>Absolute
                (ID)</b>: All row selections are recorded using
                ID numbers. For example, &quot;select the row
                containing Task ID = 13&quot; or &quot;select the
                row containing Resource ID = 4&quot;.</font></p>
                <p><b>Column
                References</b>: </font></p>
                <p><b>Absolute
                (Field)</b>: All column selections are recorded
                using the Field names. For example, &quot;select
                the Work field&quot;, or &quot;select the Name
                field&quot;.</font></p>
                <p><b>Relative</b>:
                All column selections are recorded relative to
                the current column. For example, &quot;select 2
                columns right&quot;, or &quot;select 1 column
                left&quot;.</font></p>
            
        
    


<p>When you are
finished performing the actions for the macro, choose Stop
Recorder from the Tools menu to halt macro recording.</font></p>
  
        <p><b>Manually
        Creating a Macro</b></font></p>
    


<p>Selecting the
New button in the Macros dialog allows you to specify the same
options for a new macro that are allowed when recording one.
Instead of recording user actions, however, selecting New simply
takes you to the Module Editor view where a new procedure heading
is automatically added using your macro name. Code can then be
entered manually in the procedure.</font></p>
  
        <p><b>Running a
        Macro</b></font></p>
    


<p>Once a macro has
been created, the next step is to run the macro. To run a macro:</font></p>
  
        
            
                <p>Choose
                the Macros command from the Tools menu.</font></p>
                <p>Select
                the macro in the Macro Name list. Note that the
                description for the macro will be displayed at
                the bottom of the dialog.</font></p>
            
        
    


<p align="center"><img
src="Image210.gif" width="432" height="379"></font></p>

<p><i>The Macros
dialog box</i></font></p>

<p>To run the
macro, choose the Run button. When testing a macro, it is
sometimes helpful to step through the macro slowly. The Step
button in the Macros dialog will run the macro one line at a time
and display the Debug Window so that you can see the macro as it
is being executed.</font></p>
  
        <p><b>Editing a
        Macro</b></font></p>
    


<p>After running a
macro, you may want to modify the macro to perform a slightly
different task, enable it to loop through the same actions
several times, or accept input from the user. To Edit a macro,
choose the Macros command from the Tools menu. Select the macro
in the Macro Name list and choose the Edit button. The macro is
then displayed using the Module Editor view.</font></p>

<p align="center"><img
src="Image211.gif" width="576" height="434"></font></p>

<p><i>The Module
Editor view in Microsoft Project</i></font></p>

<p>The Module
Editor view gives you the same editing capabilities found in
Visual Basic. Code is automatically checked for syntax as it is
entered (as long as the option is turned on -- it is by default).
It is formatted with different colors for keywords, identifiers,
and comments. You can also set breakpoints and watch variables
for debugging.</font></p>
  
        <p><b>Integrating a
        Macro </b></font></p>
    


<p>After perfecting
your macro, the next step may be to integrate it so that the
macro appears to be a standard part of Microsoft Project. There
are two easy ways of allowing quick access to your macro.</font></p>
  
        
            <p><b>Toolbar</b></font></p>
        
    


<p>You can assign
any macro or built-in command to a button on a toolbar. To
customize a button, simply hold down the CTRL key and click on
the button with the mouse. This will display the Customize Tool
dialog.</font></p>

<p align="center"><img
src="Image212.gif" width="350" height="329"></font></p>

<p><i>The Customize
Tool dialog box in Microsoft Project</i></font></p>

<p>In the Command
box, enter &#145;Macro&#146; followed by the name of your macro.
You can also select from a list by clicking the down arrow to the
right of the Command box.</font></p>

<p>The Description
and ToolTip boxes allow you to provide additional information
about the toolbar button. The Description will appear in the
status bar when the button is pressed. The ToolTip appears when
the user &quot;hovers&quot; their mouse over the button.</font></p>

<p>The Button
Library allows you to choose between the different buttons
supplied with Microsoft Project. To create your own button or to
customize a supplied button, you can choose the Edit Button and
draw your own.</font></p>

<p>After you have
created the toolbar button, you can run the macro by simply
clicking the button.</font></p>
  
        
            <p><b>Menu Bar</b></font></p>
        
    


<p>Just as you can
assign any macro or built-in command to a toolbar button, you can
do the same for any menu item. Simply choose Customize from the
Tools menu and then choose Menu Bars. In the Menu Bars dialog,
choose the menu bar you want to edit. In most cases, this will be
<b>Standard</b>. Then choose the Edit button to display the Menu
Bar Definition dialog. In this dialog, the menu bar is displayed
in an outline. You can add new commands or menus, or modify
existing ones.</font></p>
  <p><b><i>Macro
    Storage and Organization</i></b></font></p>


<p>Before creating
macros, it is important to understand how and where Project
stores macros. Each project file (.MPP) and the Global file
(GLOBAL.MPT) are &quot;Libraries&quot; which can store Modules.
Modules contain groups of Sub Procedures and Sub Functions. The
organization is shown in the illustration below:</font></p>

<p><a name="_Toc307792506"><font color="#000000" size="6"
face="Verdana"><b><i>Lesson 1 Exercises</i></b></font></a></p>
<ol>
<li>Record a
    macro that creates five tasks and then makes the first task a
    summary task.</font></li><p>
<li>Run the
    macro created above from a toolbar button, from a menu
    command, and from the Macros dialog.</font></li><p>
<li>Record a
    macro that applies the Date Range filter. Does the resulting
    macro include the dates that you input? How could you
    workaround this?</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>No,
    make the macro non-interactive and then use a combination of
    FilterEdit and FilterApply or use the SendKeys statement
    before the FilterApply method. </i></b></font></p>
<li>Record a
    macro that prints the current view using the Print toolbar
    button. Does the resulting macro work properly? How do you
    workaround this?</font></li>
    <p><font color="#FF0000" size="1" face="Verdana"><b><i>No,
    remove the Copies:= from the statement to make it read
    &gt;&gt; FilePrint 1. Also, changing any default settings
    will fix it, i.e. add the parameter Color:=True</i></b></font></p>

</FONT></BODY>
</html>

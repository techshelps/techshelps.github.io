<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing a Multiuser Environment</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Managing a Multiuser Environment</H2><P CLASS="t">If you develop an application that allows two or more users (or applications) to refer to the same data set, you want to ensure that your application shares data effectively. This section explores strategies for managing multiuser access to data with different locking techniques, and it then discusses how to resolve locking conflicts in a multiuser environment.</P>
<H3><A NAME="sec0"></A>Sharing Data</H3><P CLASS="t">When one user is adding or changing data in a multiuser database, you need a way to prevent other users from changing the data until the first user is finished with it. To accomplish this, Jet provides three lockin<I>g</I> mechanisms. When a data set is locked, other users can read the records inside the data set, but only the user who initiated the lock can edit them.</P>
<P CLASS="t">By default, Jet locks an entire page of data when a record within the page is edited. A page is a block of record data that takes up approximately 2048 bytes (2&nbsp;kilobytes) of memory. Depending on the size of each record, a page can contain one record or many records.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">When Jet locks a record from an external database in Microsoft FoxPro, dBASE, Paradox&reg;, or Btrieve&reg; format, it locks the smallest unit of memory (that is, record, page, or file) that's lockable in the external database.</P>
<P></P>
<H4><A NAME="sec1"></A>Pessimistic Locking</H4><P CLASS="t">Pessimistic locking is the default locking scheme and is in effect when the <B>LockEdits</B> property is <B>True</B>. Jet locks the entire page containing the record you're editing as soon as you use the <B>Edit</B> method, and it releases the locked page when you either terminate a transaction or explicitly release the lock by using the <B>CancelEdit</B> method. The locked page isn't static — it moves up when you move up in the set of records, and it moves down when you move down, so it's possible to unintentionally lock a set of records.</P>
<H4><A NAME="sec2"></A>Optimistic Locking</H4><P CLASS="t">Optimistic locking is a locking scheme that allows you to edit a record in memory and to lock the record only when you're ready to write the changes to the database. This method attempts to lock the record when you call the <B>Update</B> method. The advantage of optimistic locking is that pages are locked only briefly. To use optimistic locking, set the <B>LockEdits</B> property to <B>False</B>.</P>
<H3><A NAME="sec3"></A>Recordset Operations</H3><P CLASS="t">A common practice in most applications are <B>Recordset</B> object operations: adding and editing records, or moving within a <B>Recordset</B> object. This section describes these operations.</P>
<H4><A NAME="sec4"></A>Navigating a Recordset</H4><P CLASS="t">One way to navigate inside a <B>Recordset</B> object is to move up or down one record at a time using the <B>Move </B>method. You can also use one of the <B>Find</B> methods (which one you use depends on your position in the <B>Recordset</B> object) and a specified criterion to locate a record in a dynaset or a snapshot. If your <B>Recordset</B> object is opened as a table, use the <B>Seek</B> method for optimal performance. For information about the syntax of the four <B>Find</B> methods and the <B>Seek</B> method, see the appropriate topic in Help.</P>
<H4><A NAME="sec5"></A>Adding New Records</H4><P CLASS="t">To add a new record, use the <B>AddNew</B> method to prepare the record for editing, and use the <B>Update</B> method to save the record. The <B>AddNew</B> method prepares a new, blank record and makes it the current record. The <B>Update</B> method saves the record and repositions the record pointer back to the record that was active before you used the <B>AddNew</B> method. The following code segment adds a new record to the Shippers table in Nwind.mdb.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database
Dim rs As Recordset
Set db = OpenDatabase("Nwind.mdb")
Set rs = db.OpenRecordset("Shippers", dbOpenTable)
rs.MoveFirst
rs.AddNew
    rs.Fields(0).value = "4"
    rs.Fields(2).value = "Global Parcel Service"
    rs.Fields(3).value = "(503)545-3190"
rs.Update
End If
</FONT></PRE>
<H4><A NAME="sec6"></A>Editing Records</H4><P CLASS="t">When you edit records, you use the <B>Edit</B> method to mark the start of an editing session, and you use the <B>Update </B>method to signal the completion of the session. The <B>Edit</B> method tells Jet to buffer the changes to the specified record and write the changes to the data set when the editing tasks are completed. The <B>Update</B> method saves the record. The following code changes the job title for each sales representative in the Employees table.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db As Database
Dim rs As Recordset
Set db = OpenDatabase("Nwind.mdb")
Set rs = db.OpenRecordset("Employees", dbOpenTable)
rs.MoveFirst
Do Until rs.EOF
If rs.Fields(3).value = "Sales Representative" Then
    rs.Edit
    rs.Fields(3).value = "Account Executive"
    rs.Update
End If
rs.MoveNext
Loop
</FONT></PRE>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">You must use the <B>Edit</B> method before you use the <B>Update</B> method to write changes back to a record; otherwise, an error will occur.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Advanced Note</B></P>
<P CLASS="nt">If you're changing large groups of records regularly, it's faster and easier to create a SQL statement than it is to write code. For examples that could replace the code preceding these notes, see "Update method" in Help.</P>
<P></P>
<H3><A NAME="sec7"></A>Managing Transactions</H3><P CLASS="t">If your application depends on successfully adding or deleting records in one data set before proceeding to another one, you'll probably want some assurance that the first set of tasks has been completed successfully before you begin the second set. For example, if you update accounting records, you'll want records to be posted to Receivables before you delete records from Payables — otherwise, the books won't balance. When you wrap these actions into transactions, you ensure that each transaction is performed successfully before your application continues.</P>
<H4><A NAME="sec8"></A>BeginTrans, CommitTrans, and RollBack</H4><P CLASS="t">The <B>BeginTrans</B> method marks the beginning of a transaction. When you've completed your tasks, use the <B>CommitTrans</B> method to make the changes permanent, or use the <B>RollBack</B> method to delete the changes from memory. The most common way to implement transaction processing is within an error routine that traps errors during your procedure. If an error occurs, the routine flags the error and ignores any changes to the file; otherwise, the routine makes these changes permanent.</P>
<P CLASS="t">The following example demonstrates how transaction processing works.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub ChoiceToCommit()
On Error GoTo MyErrorHandler
Dim db As Database
Dim rs As Recordset

Set db = OpenDatabase("d:\access\sampapps\nwind.mdb")
Set rs = db.OpenRecordset("Customers")
rs.MoveFirst

BeginTrans
    MsgBox "The original record value is " &amp; rs.Fields(0).Value
    rs.Edit
    rs.Fields(0).Value = 5000
    rs.Update
    action = MsgBox("We are changing the value to " &amp; rs.Fields(0).Value
    &amp; " ." &amp; Chr(13) &amp; " Do you want to continue? ", vbYesNo)
        If action = vbYes Then
            CommitTrans
        Else
            Rollback
        End If

rs.Close
db.Close
Exit Sub
MyErrorHandler:
MsgBox DBEngine.Errors(0)
End Sub
</FONT></PRE>
<P CLASS="t">In the <B>BeginTrans</B> segment of code, rs.Edit marks the beginning of an editing session within the transaction; rs.Update marks the end of the editing session and updates the record set in memory only. The first message box displays the original value of the first field in the first record of the Customers table in Nwind.mdb. The second message box tells you that the original value is about to be changed to&nbsp;5000 and asks you whether you want to continue. If you click Yes, the <B>CommitTrans</B> method is triggered, and the change becomes permanent. If you click No, the <B>RollBack</B> method is triggered, and the changes are deleted from memory, leaving the record unchanged.</P></FONT>
</FONT></BODY></HTML>

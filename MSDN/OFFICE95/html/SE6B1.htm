<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>StatusBar Property</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>StatusBar Property</H1><P CLASS="h"><B>Applies To</B></P>
<P CLASS="t"><B>Application </B>Object, <B>MenuItem </B>Object, <B>ToolbarButton </B>Object.</P>
<P CLASS="h"><B>Description</B></P>
<P CLASS="t">Returns or sets the text in the status bar. Read-write.</P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">For the <B>Application</B> object, this property returns <B>False</B> if Microsoft Excel has control of the status bar; set the property to <B>False</B> to restore the default status bar text. This works even if the status bar is hidden.</P>
<P CLASS="t">You can return or set the status bar text of custom menu items only, not built-in menu items.</P>
<P CLASS="t">Changing the macro assigned to a toolbar button with the <B>OnAction</B> property or the Assign Macro command (Tools menu) will reset the value of this property to match the status bar text of the macro.</P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>DisplayStatusBar</B> Property, <B>HelpContextID</B> Property, <B>HelpFile</B> Property.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example sets the status bar text to "Please be patient..." before it opens the workbook LARGE.XLS, and then it restores the text to the default.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">oldStatusBar = Application.DisplayStatusBar
Application.DisplayStatusBar = True
Application.StatusBar = "Please be patient..."
Workbooks.Open filename:="LARGE.XLS"
Application.StatusBar = False
Application.DisplayStatusBar = oldStatusBar
</FONT></PRE>
<P CLASS="t">This example adds a new menu item to the Help menu in the Visual Basic Module menu bar and then sets the status bar text, the Help filename, and the Help context ID for the new menu item (note that the <B>HelpFile</B> and <B>HelpContextId</B> properties are available only in Windows).</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set menuObj = MenuBars(xlModule).Menus("Help")
Set newMenuItem = menuObj.MenuItems.Add(Caption:="&amp;Read Me First", _
        OnAction:="readmeMacro", _
        Before:=1)
newMenuItem.StatusBar = "Read this topic before you begin"
newMenuItem.HelpFile = "C:\xl5\vba_xl.hlp"
newMenuItem.HelpContextID = 65535
</FONT></PRE></FONT>
</FONT></BODY></HTML>

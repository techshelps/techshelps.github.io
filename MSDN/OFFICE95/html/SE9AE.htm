<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Named Arguments</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Named Arguments</H2><P CLASS="t">Many built-in functions, statements, and methods take more than one argument. For example, the <B>Open</B> method, which opens a workbook, takes 12 arguments. If you want to write code that opens the workbook Book2.xls, which has the protection password "drowssap", you could write the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open "BOOK2.XLS", , , , "drowssap"
</FONT></PRE>
<P CLASS="t">However, this code is difficult to write correctly without introducing bugs, because you have to count the number of commas to insert between the arguments. The code is also very difficult to read, and it gives no clues about what the arguments represent. The following example shows a better way to write this code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open fileName:="BOOK2.XLS", password:="drowssap"
</FONT></PRE>
<P CLASS="t">Because every argument has a name, you can use the name and the := operator to assign a value to an argument. When you use named arguments, you don't have to remember the order of the arguments. For example, the preceding code could have been written with the order of the arguments reversed, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.Open password:="drowssap", fileName:="BOOK2.XLS"
</FONT></PRE>
<P CLASS="t">You can use named arguments with the procedures you create, too. Visual Basic automatically associates argument names with their corresponding procedures. For example, the FormatList procedure in the preceding section takes two required arguments and two optional arguments, as shown in the following declaration line.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub FormatList(startRow As Integer, startCol As Integer, _
        Optional redText, Optional sortList)
</FONT></PRE>
<P CLASS="t">The following DoList procedure calls the FormatList procedure using named arguments.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub DoList()
    FormatList redText:=True, startCol:=2, startRow:=2
End Sub
</FONT></PRE>
<P CLASS="t">The arguments are given out of order, and one of the optional arguments was omitted. Using named arguments is especially useful if your procedures have several optional arguments you don't always need to specify.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">You cannot use named arguments to avoid entering required arguments.</P>
<P></P></FONT>
</FONT></BODY></HTML>

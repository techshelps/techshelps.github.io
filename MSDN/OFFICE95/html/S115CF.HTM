<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declare Statement</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec257"></a>Declare Statement</h1>

<h2><a name="sec258"></a>Description</h2>

<p>Used at module level to declare references to external
procedures in a dynamic-link library (DLL).</p>

<h2><a name="sec259"></a>Syntax 1</h2>

<p>[<b>Public</b> | <b>Private</b> ] <b>Declare</b> <b>Sub</b> <i>name</i>
<b>Lib</b> <b>&quot;</b><i>libname</i><b>&quot;</b> [<b>Alias&quot;</b><i>aliasname</i><b>&quot;</b>
][<b>(</b>[<i>arglist</i>]<b>)</b>]</p>

<h2><a name="sec260"></a>Syntax 2</h2>

<p>[<b>Public</b> | <b>Private</b> ] <b>Declare</b> <b>Function</b>
<i>name</i> <b>Lib</b> <b>&quot;</b><i>libname</i><b>&quot;</b> [<b>Alias&quot;</b><i>aliasname</i><b>&quot;
</b>] [<b>(</b>[<i>arglist</i>]<b>)</b>][<b>As</b> <i>type</i>]</p>

<p>The <b>Declare</b> statement syntax has these parts:</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Public</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Used to declare procedures that are
        available to all other procedures in all modules.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Private</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Used to declare procedures that are
        available only within the module where the declaration is
        made.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Sub</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the procedure
        doesn&#146;t return a value.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Function</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the procedure returns a
        value that can be used in an expression.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>name</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any valid procedure name.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Lib</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that a DLL or code resource
        contains the procedure being declared. The <b>Lib</b>
        clause is required for all declarations.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>libname</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the DLL or code resource that
        contains the declared procedure.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Alias</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the procedure being
        called has another name in the DLL. This is useful when
        the external procedure name is the same as a keyword. You
        can also use <b>Alias</b> when a DLL procedure has the
        same name as a public variable or constant or any other
        procedure in the same scope. <b>Alias</b> is also useful
        if any characters in the DLL procedure name aren&#146;t
        allowed by the DLL naming convention.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>aliasname</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the procedure in the DLL or code
        resource.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">If the first character is not a #, <i>aliasname</i>
        is the name of the procedure&#146;s entry point in the
        DLL. If # is the first character, all characters that
        follow must indicate the ordinal number of the
        procedure&#146;s entry point.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The <i>resourcetype</i> is any valid
        four-character constant. If omitted, the default <i>resourcetype</i>
        is CODE. The <i>resourcename</i> is the procedure name in
        the code resource. If <i>resourcename</i> is omitted, it
        is assumed to be the same as <i>name</i>.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>arglist</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">List of variables representing arguments
        that are passed to the procedure when it is called.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>type</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Data type of the value returned by a <b>Function</b>
        procedure; may be <b>Byte</b>, <b>Boolean</b>, <b>Integer</b>,
        <b>Long</b>, <b>Currency</b>, <b>Single</b>, <b>Double</b>,
        <b>Date</b>, <b>String </b>(variable length only), <b>Object</b>,
        <b>Variant</b>, a user-defined type, or an object type.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<p>The <i>arglist</i> argument has the following syntax and
parts:</p>

<p>[<b>Optional</b>][<b>ByVal</b> | <b>ByRef</b>][<b>ParamArray</b>]
<i>varname</i>[<b>( )</b>][<b>As</b> <i>type</i>]</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Optional</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that an argument is not
        required. If used, all subsequent arguments in <i>arglist</i>
        must also be optional and declared using the <b>Optional</b>
        keyword. All <b>Optional</b> arguments must be <b>Variant</b>.
        <b>Optional</b> can&#146;t be used for any argument if <b>ParamArray</b>
        is used.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>ByVal</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the argument is passed by
        value.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>ByRef</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the argument is passed by
        reference.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>ParamArray</b></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Used only as the last argument in <i>arglist</i>
        to indicate that the final argument is an <b>Optional</b>
        array of <b>Variant</b> elements. The <b>ParamArray</b>
        keyword allows you to provide an arbitrary number of
        arguments. May not be used with <b>ByVal</b>, <b>ByRef</b>,
        or <b>Optional</b>.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>varname</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the variable representing the
        argument being passed to the procedure; follows standard
        variable naming conventions.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>type</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Data type of the argument passed to the
        procedure; may be <b>Byte</b>, <b>Boolean</b>, <b>Integer</b>,
        <b>Long</b>, <b>Currency</b>, <b>Single</b>, <b>Double</b>,
        <b>Date</b>, <b>String </b>(variable length only), <b>Object</b>,
        <b>Variant</b>, a user-defined type, or an object type.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<h2><a name="sec261"></a>Remarks</h2>

<p>For <b>Function</b> procedures, the data type of the procedure
determines the data type it returns. You can use an <b>As</b>
clause following the <i>arglist</i> to specify the return type of
the function. Within <i>arglist</i> you can use an <b>As</b>
clause to specify the data type of any of the arguments passed to
the procedure. In addition to specifying any of the standard data
types, you can specify <b>As Any</b> in the <i>arglist</i> to
inhibit type checking and allow any data type to be passed to the
procedure.</p>

<p>Empty parentheses indicate that the <b>Sub</b> or <b>Function</b>
procedure has no arguments and that Visual Basic should ensure
that none are passed. In the following example, First takes no
arguments. If you use arguments in a call to First, an error
occurs:</p>

<p class="spacing"><br>
</p>

<pre>Declare Sub First Lib &quot;MyLib&quot; ()
</pre>

<p>If you include an argument list, the number and type of
arguments are checked each time the procedure is called. In the
following example, First takes one <b>Long</b> argument:</p>

<p class="spacing"><br>
</p>

<pre>Declare Sub First Lib &quot;MyLib&quot; (X As Long)
</pre>

<p><b>Note</b> You can&#146;t have fixed-length strings in the
argument list of a <b>Declare</b> statement &#151; only
variable-length strings can be passed to procedures. Fixed-length
strings can appear as procedure arguments, but they are converted
to variable-length strings before being passed.</p>

<p><b>Note</b> A constant, <b>vbNullString</b>, is provided by
Visual Basic for use when calling external procedures, where the
external procedure requires a string whose value is zero. This is
not the same thing as a zero-length (&quot;&quot;) string.</p>

<p>In the 32-bit version of Microsoft Windows, dynamic-link
library (DLL) procedure names are case-sensitive; those in the
16-bit version of Microsoft Windows (3.1 and earlier) are not.</p>

<h2><a name="sec262"></a>See Also</h2>

<p><b>Call</b> Statement, <b>Function</b> Statement, <b>LastDLLError</b>
Property, <b>Sub</b> Statement.</p>

<h2><a name="sec263"></a>Specifics (Microsoft Access)</h2>

<p>In Microsoft Access, <b>Declare</b> statements are public by
default. In a standard module, a public <b>Declare</b> statement
is available to both the current database and any referencing
databases. You can preface a <b>Declare</b> statement with the <b>Private</b>
keyword to ensure that it is not available outside of the current
database. To use a <b>Declare</b> statement in a form module or
report module, you must precede the statement with the <b>Private</b>
keyword.</p>

<h2><a name="sec264"></a>Example</h2>

<p>In Microsoft Access, you can use the <b>Declare</b> statement
at the module level of a standard module to declare a reference
to an external procedure in a dynamic-link library (DLL). A <b>Declare</b>
statement is public by default. In order to include a <b>Declare</b>
statement in a form or report module, precede it with the <b>Private</b>
keyword.</p>

<p>The following example references a procedure in a DLL, then
calls that procedure from Visual Basic.</p>

<p class="spacing"><br>
</p>

<pre>' In standard module.Sub MessageBeep Lib &quot;User32&quot; (ByVal intN As Integer)

' In form or report module.Declare Sub MessageBeep Lib &quot;User32&quot; (ByVal intN As Integer)

' Once you have referenced procedure in DLL with Declare
' statement, you can call that procedure normally from code.SystemBeep()
    Dim intB As Integer, intI As Integer
    Dim sngStart, sngPause
    sngPause = 2
    intB = InputBox(&quot;How many beeps would you like to hear?&quot;)
    For intI = 1 to intB
        ' Call system function.
        MessageBeep(intB)
        ' Get start time.
        sngStart = Timer
        Do While Timer &lt; sngStart + sngPause
        ' Pause for two seconds.
        Loop
    Next intISub
</pre>
</FONT></FONT></BODY>
</html>

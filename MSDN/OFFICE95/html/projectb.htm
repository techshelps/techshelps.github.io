<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced VBA in MS Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana,arial,helvetica" size=2 color="#000000">
<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<blockquote>
    <H1><font size="5" face="Times New Roman">Advanced VBA in MS Project</font></H1>
</blockquote>

<blockquote>
    <p><font size="2">Presented by: Glenn Minch</font></p>
    <p><font size="2"><i>Glenn Minch is president and founder of
    Critical Path Technical Services, Inc., a Microsoft Solution
    Provider specializing in developing custom solutions using
    Microsoft Project, Microsoft Office, and Visual Basic. Glenn
    can be reached at CPTS, Inc., PO Box 52771, Bellevue, WA
    98005. CompuServe ID: 73513,403.</i></font></p>
    <p><font size="5" face="Times New Roman">Overview</font></p>
    <p><font size="2">The addition of Microsoft</font><font
    size="1">®</font><font size="2"> Visual Basic</font><font
    size="1">®</font><font size="2"> for Applications to
    Microsoft Project planning software allows developers to
    quickly create powerful applications that use Microsoft
    Project as an integral component of the overall solution. In
    this section, we will take a look at some programming
    techniques that can be used to construct complex add-on
    applications for Microsoft Project. </font></p>
    <p><font size="2">We will also examine an application that
    was created with Microsoft Project, Microsoft Excel
    spreadsheet program and Visual Basic for Applications
    programming system. This application is a &quot;real
    world&quot; solution that was created to allow the customer
    to analyze project management data in a way not possible
    using only Microsoft Project. The resulting information
    provides a set of standards, or metrics, against which the
    progress of the project can be measured. Throughout the rest
    of this paper, we will refer to the sample application as the
    Project Metrics application.</font></p>
    <p><font size="2">The Project Metrics application will serve
    to illustrate the practical usage of Visual Basic for
    Applications programming techniques. Many of the code
    fragments included are taken from the Project Metrics
    application. Although the complete code of the application is
    not included here, one complete module from the Project
    Metrics application is included.</font></p>
    <p><font size="2">The code module included here contains
    procedures that manage the instance of Microsoft Excel
    required by the Project Metrics application.</font></p>
    <p><font size="4">Sample Files</font></p>
    <p><font size="2">Several sample files are included for this
    session. The sample files contain all of the code fragments
    used to illustrate the programming techniques discussed in
    this paper. The following sample files are included:</font></p>
    <blockquote>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        PJ301A.MPP This Microsoft Project 4.0 file contains all
        of the code samples for this paper. In addition, it
        contains the complete code module used by the Project
        Metrics application to manage the instance of Microsoft
        Excel required for the application. The project schedule
        was copied from the ROLLOUT.MPT template that is included
        as a sample with Microsoft Project.</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        PJ301B.XLS This is a Microsoft Excel file that contains
        the dialog box and code used by the GetXLPrefs()
        procedure. To run the sample code provided, you must copy
        PJ301B.XLS to the directory containing your Microsoft
        Project installation (i.e., the directory that contains
        WINPROJ.EXE).</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        PJDEMO.EXE This is a Microsoft Visual Basic 3.0
        application that acts as a dialog box for the
        FormatGantt() macro. This file must also be copied to the
        same location as WINPROJ.EXE.</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        PJDEMO.FRM, PJDEMO.MAK Source code for PJDEMO.EXE.</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        STATUS.MPP This Microsoft Project file is used to display
        status messages during the performance demonstrations.</font></p>
    </blockquote>
    <p><font size="5" face="Times New Roman">Programming
    Techniques</font></p>
    <p><font size="4">Program Structures</font></p>
    <p><font size="2">Since this is intended to be an advanced
    discussion, we will not examine the basic program structures
    in this paper. However, it is worthwhile to consider the For
    Each ... Next statement, because there are special issues to
    be considered when using this statement with certain
    Microsoft Project object collections.</font></p>
    <p><b>For Each ... Next</b></p>
    <p><font size="2">The For Each ... Next statement is used to
    iterate through a collection of objects. The For Each
    statement may also be used to iterate through an array. The
    main thing to keep in mind while using For Each with a
    Microsoft Project collection is that some collections may
    contain null members. An example of this can be seen in the
    following illustration:</font></p>
    <p>{bmc ZCK0A.WPG}</p>
    <p><font size="2">In this illustration, task ID 4 is null.
    Because of this, the following code will fail with a run-time
    error 91, &quot;Object variable not Set&quot;:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Sub ForEach()</font></p>
    <p><font size="2" face="Courier New">Dim t As Task</font></p>
    <p><font size="2" face="Courier New">For Each t In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">Debug.Print t.Name</font></p>
    <p><font size="2" face="Courier New">Next t</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">To correct this problem, you must test each
    member of the collection to be sure that it is valid before
    using it in an expression. Although the TypeName function
    could be used to perform the test to determine if an object
    is valid, it is generally quicker to test to see if the
    object Is Nothing. The following code illustrates this
    technique:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Sub ForEach()</font></p>
    <p><font size="2" face="Courier New">Dim t As Task</font></p>
    <p><font size="2" face="Courier New">For Each t In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">If Not (t Is Nothing)
    Then</font></p>
    <p><font size="2" face="Courier New">Debug.Print t.Name</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">Next t</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The following three collections may contain
    null members:</font></p>
    <blockquote>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Projects </font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Tasks </font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Resources </font></p>
    </blockquote>
    <p><font size="2">As mentioned above, the For Each statement
    may also be used to iterate through an array. The following
    example demonstrates this:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Sub ForEach_Array()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim v_array As Variant</font></p>
    <p><font size="2" face="Courier New">Dim v As Variant</font></p>
    <p><font size="2" face="Courier New">v_array = Array(0, 1, 2,
    3, 4, 5, 6, 7, 8, 9)</font></p>
    <p><font size="2" face="Courier New">For Each v In v_array</font></p>
    <p><font size="2" face="Courier New">Debug.Print v</font></p>
    <p><font size="2" face="Courier New">Next v</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Note the use of the Array function to
    create an array using the Variant data type. The For Each
    statement can be used with any array.</font></p>
    <p><font size="4">Activating Applications</font></p>
    <p><font size="2">You will often need to activate another
    application from your Visual Basic for Applications code.
    Generally, you&#146;ll activate an application using the
    AppActivate method.</font></p>
    <p><font size="2">To use the AppActivate method, you must
    know the exact text (not case-sensitive) of the title of the
    application window that you want to activate. Since you
    won&#146;t always have this information, you can use an
    application object to get the caption of the window. The
    following example demonstrates this technique:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">''''''''''''''''''''</font></p>
    <p><font size="2" face="Courier New">' Activates Microsoft
    Excel (Excel must already be running).</font></p>
    <p><font size="2" face="Courier New">'</font></p>
    <p><font size="2" face="Courier New">Sub ActivateExcel()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim oExcel As Object</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Set oExcel = GetObject(,
    &quot;Excel.Application.5&quot;)</font></p>
    <p><font size="2" face="Courier New">AppActivate
    oExcel.Caption</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">A more complex example involves checking to
    see if an instance of Microsoft Excel is already running, and
    if not, starting Microsoft Excel. Since an instance of
    Microsoft Excel might be running &quot;invisibly&quot; (that
    is, Microsoft Excel does not appear in the Microsoft Windows</font><font
    size="1">®</font><font size="2"> Task List), we need a way
    to check for invisible instances of Microsoft Excel. To
    accomplish this, we&#146;ll use the FindWindow function.</font></p>
    <p><font size="2">The FindWindow function is a Microsoft
    Windows API function that is declared as follows:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Declare Function
    FindWindow Lib &quot;USER&quot; (ByVal lpClassName _ As
    String, ByVal lpWindowName As Long) As Integer</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The FindWindow function will retrieve the
    window handle of the window whose class name and window name
    match the arguments passed to FindWindow. If the class name
    parameter is null, all classes match; similarly, if the
    window name parameter is null, all window names match. We can
    take advantage of this fact by passing a null value for the
    window name parameter, and then passing the class name of the
    application we want to search for. Note that in the above
    declaration, the lpWindowName parameter is declared as the
    Long data type. This is because null pointers are passed as
    long integers with a value of zero (0&amp;).</font></p>
    <p><font size="2">The class names for various applications
    are as follows. Although the class names presented here use a
    mixture of upper- and lower-case characters for readability,
    the FindWindow function is not case sensitive.</font></p>
    <blockquote>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Microsoft Project - &quot;JWinproj-WhimperMainClass&quot;</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Microsoft Excel - &quot;XLMain&quot;</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Microsoft Word - &quot;OpusApp&quot;</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Microsoft Access - &quot;OMain&quot;</font></p>
    </blockquote>
    <p><font size="2">If FindWindow doesn&#146;t find a window
    that matches the specified window class name, it will return
    0. The following code fragment (taken from the GetXLApp()
    function of the Project Metrics application) uses FindWindow
    to check for a current instance of Microsoft Excel.</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Const XL_APPCLASS =
    &quot;Excel.Application.5&quot;</font></p>
    <p><font size="2" face="Courier New">Const XL_WNDCLASS =
    &quot;xlmain&quot;</font></p>
    <p><font size="2" face="Courier New">Const API_NULL = 0&amp;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">'Check to see if excel
    is running.</font></p>
    <p><font size="2" face="Courier New">hWnd_xl =
    FindWindow(XL_WNDCLASS, API_NULL)</font></p>
    <p><font size="2" face="Courier New">If hWnd_xl &lt;&gt; 0
    Then</font></p>
    <p><font size="2" face="Courier New">'There is at least one
    instance of Excel available; try 'to obtain obj ref</font></p>
    <p><font size="2" face="Courier New">Set obj_xl_app =
    GetObject(, XL_APPCLASS)</font></p>
    <p><font size="2" face="Courier New">Else</font></p>
    <p><font size="2" face="Courier New">'Excel is not running.
    Start Excel and obtain obj ref.</font></p>
    <p><font size="2" face="Courier New">Set obj_xl_app =
    CreateObject(XL_APPCLASS)</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
</blockquote>

<blockquote>
    <p><font size="4">Setting the Mouse Cursor</font></p>
    <p><font size="2">Unlike Visual Basic 3.0, Visual Basic for
    Applications does not provide a way to easily set the mouse
    cursor when you need to indicate that the application is
    busy. Microsoft Project will simply appear to
    &quot;hang&quot; during a lengthy operation. Using the
    Windows API functions LoadCursor and SetCursor, we can change
    the mouse cursor to the standard hourglass icon.</font></p>
    <p><font size="2">Include the following declarations and
    constants in your Visual Basic for Applications module:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Declare Function
    SetCursor Lib &quot;USER&quot; (ByVal hCursor As _ Integer)
    As Integer</font></p>
    <p><font size="2" face="Courier New">Declare Function
    LoadCursor Lib &quot;USER&quot; (ByVal hInstance _ As
    Integer, ByVal lpCursorName As Any) As Integer</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Const INT_NULL = 0</font></p>
    <p><font size="2" face="Courier New">Const IDC_WAIT =
    32514&amp;</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The following example shows how to set the
    cursor to the hourglass icon, then restore the cursor to the
    previous icon:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">'''''''''''</font></p>
    <p><font size="2" face="Courier New">' Sets the cursor to the
    Hourglass icon, then restores the </font></p>
    <p><font size="2" face="Courier New">'previous cursor.</font></p>
    <p><font size="2" face="Courier New">'</font></p>
    <p><font size="2" face="Courier New">Sub SetMousePointer()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim hPrevCursor As
    Integer 'saves a handle to the previous</font></p>
    <p><font size="2" face="Courier New">'cursor resource.</font></p>
    <p><font size="2" face="Courier New">Dim lCounter As Long</font></p>
    <p><font size="2" face="Courier New">Dim nRtn As Integer</font></p>
    <p><font size="2" face="Courier New">' Set the cursor to
    hourglass and save the previous cursor</font></p>
    <p><font size="2" face="Courier New">hPrevCursor =
    SetCursor(LoadCursor(INT_NULL, IDC_WAIT))</font></p>
    <p><font size="2" face="Courier New">' Pause a moment so we
    can see the hourglass...</font></p>
    <p><font size="2" face="Courier New">For lCounter = 1 To
    1000000</font></p>
    <p><font size="2" face="Courier New">Next lCounter</font></p>
    <p><font size="2" face="Courier New">' Restore the previous
    cursor</font></p>
    <p><font size="2" face="Courier New">nRtn =
    SetCursor(hPrevCursor)</font></p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="4">Modules</font></p>
    <p><font size="2">Visual Basic for Applications code is
    stored in code modules. Modules may be stored in the
    individual project file (*.MPP) or in the Global file
    (GLOBAL.MPT). Modules may contain variable and constant
    declarations in addition to procedures. </font></p>
    <p><b>Choose an Effective Module Layout</b></p>
    <p><font size="2">The programmer has considerable latitude
    regarding the way that a module is organized. The way that a
    module is organized can help, or hinder, development efforts.</font></p>
    <p><font size="2">The following example illustrates an
    effective method of module organization. This example is
    taken from the Project Metrics application.</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' This module contains
    the procs that are responsible for 'providing xl support
    functions to the other routines. None of 'the procs in this
    module manipulate project data.</font></p>
    <p><font size="2" face="Courier New">'</font></p>
    <p><font size="2" face="Courier New">' Procs contained in
    this module:</font></p>
    <p><font size="2" face="Courier New">' Sub GoToMetrics()</font></p>
    <p><font size="2" face="Courier New">' Function
    GetUserPref(oXL As Object, utPref As _</font></p>
    <p><font size="2" face="Courier New">' utPrefStruct) As
    Boolean</font></p>
    <p><font size="2" face="Courier New">' Function
    GetXLBook(oXLBook As Object, Status As _</font></p>
    <p><font size="2" face="Courier New">' Integer, Optional
    sTemplate As Variant) As Boolean</font></p>
    <p><font size="2" face="Courier New">' Function
    GetXLApp(oXLApp As Object) As Boolean</font></p>
    <p><font size="2" face="Courier New">' Function
    KillXL(Optional xl_obj As Variant) As Boolean</font></p>
    <p><font size="2" face="Courier New">' Sub MakeXLVisible()</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The first few lines of each module are a
    brief description of the contents of the module. This
    description is important during the development of large
    projects, and it will assist maintenance programmers during
    future modifications to the application.</font></p>
    <p><font size="2">Following the module description is a
    section that contains the procedure header for every
    procedure in the module. It is important that the procedure
    headers exactly match the actual procedures. This header
    section serves several purposes:</font></p>
    <blockquote>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Immediately indicates what procedures are contained in a
        given module;</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Allows the programmer to quickly move to a given
        procedure, by clicking on the name of the procedure using
        the right mouse button and selecting &quot;Procedure
        Definition&quot;;</font></p>
        <p><font size="2" face="SYMBOL">·</font><font size="2">
        Provides a way to quickly look up the correct order and
        type of arguments to a given procedure.</font></p>
    </blockquote>
    <p><font size="2">The module declarations section should be
    placed immediately after the initial comments and list of
    procedures. </font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' **** BEGIN MODULE
    DECLARATIONS ****</font></p>
    <p><font size="2" face="Courier New">Option Explicit</font></p>
    <p><font size="2" face="Courier New">Option Compare Text '
    Text comparisons are NOT case 'sensitive.</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Private obj_xl_app As
    Object ' This is used to cache a 'reference to the current</font></p>
    <p><font size="2" face="Courier New">'Excel application.</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Private obj_xl_book As
    Object ' This is used to cache a 'reference to the current</font></p>
    <p><font size="2" face="Courier New">'Excel metrics workbook.</font></p>
    <p><font size="2" face="Courier New">' **** END MODULE
    DECLARATIONS ****</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The declarations section should be clearly
    identified to set it apart from the procedures that follow.
    Typically, variables declared at the module or global level
    should have some sort of comment to indicate their purpose.</font></p>
    <p><b>The Option Private Statement</b></p>
    <p><font size="2">The VBA_PJ.HLP file included with Microsoft
    Project states that &quot;The Option Private statement is
    used at the module level to indicate that the entire module
    is private.&quot; This statement is somewhat misleading,
    since it implies that all of the data and procedures
    contained in a module will be private to that module if the
    Option Private statement is included in the module
    declarations.</font></p>
    <p><font size="2">The Option Private statement means that the
    procedures in a private module cannot be called from
    procedures located in a module in another project. Procedures
    contained in the private module can be called from any other
    modules in the project file where the private module is
    located.</font></p>
    <p><font size="2">If a variable is declared in a private
    module using the Public keyword, that variable will be
    visible to all other modules in the project. Furthermore, Sub
    procedures located in a private module will still appear in
    the list of macros under the Tools menu, Macros option.</font></p>
    <p><font size="2">The Option Private statement is useful for
    preventing name conflicts among procedures in different
    projects, but only if a reference exists between the
    projects.</font></p>
    <p><font size="5" face="Times New Roman">Obtaining User Input</font></p>
    <p><font size="2">Visual Basic for Applications does not
    implement dialogs, so Microsoft Project does not support
    user-defined dialog boxes. The primary mechanism for
    obtaining user input is the InputBox function. Although the
    InputBox is useful for obtaining simple user input, it does
    not allow the use of common controls such as option buttons,
    check boxes, and list boxes.</font></p>
    <p><font size="2">One solution to this problem is to use a
    dialog box created in Microsoft Excel or Microsoft Visual
    Basic 3.0 to obtain user input for your macro. However, this
    creates a minor dilemma of sorts: How to pass information
    from the dialog box back to the Microsoft Project macro?</font></p>
    <p><font size="2">Using Microsoft Excel, you are able to pass
    arguments to a macro via the application-defined Macro
    method. Although Microsoft Project supports a Macro method,
    it does not allow you to pass arguments to the macro.</font></p>
    <p><font size="2">There are several ways to return user input
    to the Microsoft Project macro. You could use DDE, OLE,
    global memory blocks, the Clipboard, or even text files. The
    method we will examine here uses OLE, and although it is not
    the fastest method, it is simple to implement and reliable.</font></p>
    <p><font size="2">The following diagram illustrates the basic
    concept.</font></p>
    <p>{bmc ZCK1A.WPG}</p>
    <p><font size="2">In this diagram, the following actions
    occur (in sequence):</font></p>
    <blockquote>
        <p><font size="2">1. A Microsoft Project macro uses the
        AppExecute method to launch a Visual Basic 3.0 form. The
        Visual Basic form will act as a dialog box to obtain user
        input for the Microsoft Project macro. The following code
        is from the example included with this paper:</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">Sub FormatGantt()</font></p>
        <p><font size="2" face="Courier New"></font>&nbsp;</p>
        <p><font size="2" face="Courier New">' Display the VB
        dialog to obtain user input.</font></p>
        <p><font size="2" face="Courier New">AppExecute
        Command:=Application.Path &amp; &quot;\pjdemo.exe&quot; _
        ,Activate:=True</font></p>
        <p><font size="2" face="Courier New"></font>&nbsp;</p>
        <p><font size="2" face="Courier New">End Sub</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2">2. The Visual Basic form handles the
        task of obtaining user input. When the user is finished
        and has selected the OK or Cancel buttons, the Visual
        Basic form establishes an OLE connection to Microsoft
        Project. </font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">Dim oProj as Object</font></p>
        <p><font size="2" face="Courier New">Set oProj =
        GetObject(, &quot;msproject.application&quot;)</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2">3. The Visual Basic form sets the value
        of certain pre-determined fields of the project summary
        task to the values obtained from the user. In the example
        provided with this paper (PJDEMO.EXE), the Visual Basic
        form sets the value of the Text 10 field.</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">If index = 0 Then
        'OK button pressed</font></p>
        <p><font size="2" face="Courier New">oProj.Activeproject.Text10
        = cboColor.List(cboColor.ListIndex)</font></p>
        <p><font size="2" face="Courier New">Else 'Cancel button
        pressed</font></p>
        <p><font size="2" face="Courier New">oProj.Activeproject.Text10
        = &quot;Cancel&quot;</font></p>
        <p><font size="2" face="Courier New">End If</font></p>
        <p><font size="2" face="Courier New"></font>&nbsp;</p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2">4. The Visual Basic form activates
        Microsoft Project. Then the Visual Basic form uses the
        Macro method to evoke a Microsoft Project macro that will
        process the user input. After the Microsoft Project macro
        is evoked, the Visual Basic form unloads itself from
        memory.</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">' Run the Microsoft
        Project macro to process the user's 'selection</font></p>
        <p><font size="2" face="Courier New">AppActivate
        oProj.Caption</font></p>
        <p><font size="2" face="Courier New">oProj.macro
        &quot;DoFormatGantt&quot;</font></p>
        <p><font size="2" face="Courier New">End</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2">5. The Microsoft Project macro examines
        the user input and takes the appropriate action.</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">''''''''''''''''</font></p>
        <p><font size="2" face="Courier New">' This sub is called
        by the VB dialog to process the user's 'selection.</font></p>
        <p><font size="2" face="Courier New">'</font></p>
        <p><font size="2" face="Courier New">Sub DoFormatGantt()</font></p>
        <p><font size="2" face="Courier New">Dim sMsg As String</font></p>
        <p><font size="2" face="Courier New">Dim nColor As
        Integer</font></p>
        <p><font size="2" face="Courier New">Const pjNoAction =
        -1</font></p>
        <p><font size="2" face="Courier New">'Check the Text10
        property of the project task to determine</font></p>
        <p><font size="2" face="Courier New">'what to do next.</font></p>
        <p><font size="2" face="Courier New">Select Case
        ActiveProject.Text10</font></p>
        <p><font size="2" face="Courier New">Case
        &quot;cancel&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        pressed the Cancel button.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjNoAction</font></p>
        <p><font size="2" face="Courier New">Case
        &quot;black&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        selected Black.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjBlack</font></p>
        <p><font size="2" face="Courier New">Case &quot;red&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        selected Red.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjRed</font></p>
        <p><font size="2" face="Courier New">Case
        &quot;yellow&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        selected Yellow.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjYellow</font></p>
        <p><font size="2" face="Courier New">Case
        &quot;blue&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        selected Blue.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjBlue</font></p>
        <p><font size="2" face="Courier New">Case
        &quot;green&quot;</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;User
        selected Green.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjGreen</font></p>
        <p><font size="2" face="Courier New">Case Else</font></p>
        <p><font size="2" face="Courier New">sMsg = &quot;The
        value returned from the dialog is not valid.&quot;</font></p>
        <p><font size="2" face="Courier New">nColor = pjNoAction</font></p>
        <p><font size="2" face="Courier New">End Select</font></p>
        <p><font size="2" face="Courier New">If nColor &lt;&gt;
        pjNoAction Then GanttBarFormat middlecolor:=nColor</font></p>
        <p><font size="2" face="Courier New">MsgBox sMsg,
        vbInformation + vbOKOnly, &quot;Format Gantt Bar&quot;</font></p>
        <p><font size="2" face="Courier New">End Sub</font></p>
    </blockquote>
</blockquote>

<blockquote>
    <p><font size="2">This general method can be extended to work
    with applications other than Visual Basic 3.0. The XL code
    module included with PJ301A.MPP contains a procedure that
    calls a Microsoft Excel dialog to obtain user input. The
    procedure name is GetUserPref().</font></p>
    <p><font size="5" face="Times New Roman">Project VBA
    Performance Issues</font></p>
    <p><font size="4">Measuring Performance</font></p>
    <p><font size="2">In order to address performance issues in
    your code, you need to be able to accurately measure the
    speed of your routines. The GetTickCount function will give
    us this capability.</font></p>
    <p><font size="2">GetTickCount is a Windows API function that
    returns the number of milliseconds that have elapsed since
    the current session of Windows was started. This function can
    be declared in a Project code module as:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Declare Function
    GetTickCount Lib &quot;USER&quot; () As Long</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Calculating the difference between this
    function&#146;s value at the beginning and end of a routine
    provides an excellent measure of the routine&#146;s
    performance. The following example illustrates the use of
    this function in a simple case.</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' This sub displays the
    number of milliseconds required</font></p>
    <p><font size="2" face="Courier New">' to run through a
    simple For...Next loop.</font></p>
    <p><font size="2" face="Courier New">Sub TimeLoop()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim lBegin As Long '
    Beginning tick count</font></p>
    <p><font size="2" face="Courier New">Dim lEnd As Long '
    Ending tick count</font></p>
    <p><font size="2" face="Courier New">Dim lIndex As Long '
    Index for loop</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For lIndex = 1 To 60000</font></p>
    <p><font size="2" face="Courier New">Next lIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">MsgBox &quot;Elapsed
    time: &quot; &amp; (lEnd - lBegin) &amp; &quot; ms.&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">We&#146;ll be using this method throughout
    this session to illustrate code performance in different
    situations.</font></p>
    <p><font size="4">Screen Updating</font></p>
    <p><font size="2">One of the major performance hits
    you&#146;ll encounter when creating Microsoft Project macro
    code is the inability to turn off screen updating while the
    macro executes. The Microsoft Project Application object does
    not include a ScreenUpdating property as Microsoft Excel
    does. Instead, Microsoft Project spends a lot of time
    refreshing its application window during the execution of
    your macro. If a graphically intense view such as the Gantt
    Chart happens to be displayed, this constant screen updating
    may result in a major performance loss.</font></p>
    <p><font size="2">To illustrate the effect the current view
    will have on your macro performance, try the following
    example. This example runs through the same loop four times,
    and in each case sets the Flag1 field of every task in the
    project to True. Each loop is executed while a different view
    is active. The difference in performance among the different
    views is displayed in a message box. Note that the test
    macros do not check for null tasks in order to simplify the
    code listing. A &quot;real&quot; macro must always check for
    null tasks.</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' This sub sets the
    Flag1 field of all tasks to True</font></p>
    <p><font size="2" face="Courier New">' in 4 different views.</font></p>
    <p><font size="2" face="Courier New">Sub SetFlagTest1()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim tskIndex As Task '
    Index for Tasks collection</font></p>
    <p><font size="2" face="Courier New">Dim lBegin As Long '
    Beginning tick count</font></p>
    <p><font size="2" face="Courier New">Dim lEnd As Long '
    Ending tick count</font></p>
    <p><font size="2" face="Courier New">Dim lGantt As Long '
    Time to execute in Gantt view</font></p>
    <p><font size="2" face="Courier New">Dim lTSheet As Long '
    Time to execute in Task Sheet view</font></p>
    <p><font size="2" face="Courier New">Dim lRSheet As Long '
    Time to execute in Resource Sheet view</font></p>
    <p><font size="2" face="Courier New">Dim lEdit As Long ' Time
    to execute in Module Editor view</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Gantt
    Chart&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lGantt = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Task
    Sheet&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lTSheet = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Resource
    Sheet&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lRSheet = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Module
    Editor&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lEdit = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">MsgBox &quot;Elapsed
    times:&quot; &amp; Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Gantt - &quot;
    &amp; lGantt / 1000 &amp; &quot; s.&quot; &amp; Chr(10) &amp;
    _</font></p>
    <p><font size="2" face="Courier New">&quot;Task Sheet -
    &quot; &amp; lTSheet / 1000 &amp; &quot; s.&quot; &amp;
    Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Resource Sheet -
    &quot; &amp; lRSheet / 1000 &amp; &quot; s.&quot; &amp; _
    Chr(10) &amp; &quot;Editor - &quot; &amp; lEdit / 1000 &amp;
    &quot; s.&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Running this macro on the sample Rollout
    project that ships with Microsoft Project (ROLLOUT.MPT) will
    give results similar to this:</font></p>
    <p>{bmc ZCK2A.WPG}</p>
    <p><font size="2">Note that since only task data is being
    updated, Microsoft Project repaints the window only when in a
    task view, hence the virtually equivalent execution times in
    the Module Editor and Resource Sheet views.</font></p>
    <p><font size="2">As an alternative to applying a different
    view, you may just want to minimize the application window.
    When minimized, Microsoft Project does not need to repaint
    its window and so your code executes at about the same rate
    as it would in the Module Editor view.</font></p>
    <p><font size="2">Try the following modification to the last
    example:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' This sub sets the
    Flag1 field of all tasks to True</font></p>
    <p><font size="2" face="Courier New">' in 4 different views.</font></p>
    <p><font size="2" face="Courier New">Sub SetFlagTest2()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim tskIndex As Task '
    Index for Tasks collection</font></p>
    <p><font size="2" face="Courier New">Dim lBegin As Long '
    Beginning tick count</font></p>
    <p><font size="2" face="Courier New">Dim lEnd As Long '
    Ending tick count</font></p>
    <p><font size="2" face="Courier New">Dim lGantt As Long '
    Time to execute in Gantt view</font></p>
    <p><font size="2" face="Courier New">Dim lTSheet As Long '
    Time to execute in Task Sheet view</font></p>
    <p><font size="2" face="Courier New">Dim lRSheet As Long '
    Time to execute in Resource Sheet view</font></p>
    <p><font size="2" face="Courier New">Dim lEdit As Long ' Time
    to execute in Module Editor view</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">' Minimize the Project
    application window</font></p>
    <p><font size="2" face="Courier New">Application.WindowState
    = pjMinimized</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Gantt
    Chart&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lGantt = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Task
    Sheet&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lTSheet = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Resource
    Sheet&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lRSheet = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">ViewApply &quot;Module
    Editor&quot;</font></p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lEdit = lEnd - lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">' Restore the Project
    application window</font></p>
    <p><font size="2" face="Courier New">Application.WindowState
    = pjNormal</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">MsgBox &quot;Elapsed
    times:&quot; &amp; Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Gantt - &quot;
    &amp; lGantt / 1000 &amp; &quot; s.&quot; &amp; Chr(10) &amp;
    _</font></p>
    <p><font size="2" face="Courier New">&quot;Task Sheet -
    &quot; &amp; lTSheet / 1000 &amp; &quot; s.&quot; &amp;
    Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Resource Sheet -
    &quot; &amp; lRSheet / 1000 &amp; &quot; s.&quot; &amp; _
    Chr(10) &amp; &quot;Editor - &quot; &amp; lEdit / 1000 &amp;
    &quot; s.&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Running this variation on the same Rollout
    project gives the following results:</font></p>
    <p>{bmc ZCK3A.WPG}</p>
    <p><font size="2">Note that while in this minimized state,
    the code executes at virtually the same speed in all cases.</font></p>
    <p><font size="2">A major drawback of minimizing Microsoft
    Project while executing your code is that the user is then
    provided with little or no visual feedback on the progress of
    the macro. At least while a task view is visible, the
    flickering screen redraws give some indication that the macro
    is still executing. For time consuming macros, users will
    generally prefer to trade a little speed for better visual
    feedback. A nice method for managing this tradeoff is to
    creatively use a dummy project.</font></p>
    <p><font size="2">Creating a dummy project that you can use
    to fill the application window provides you with two
    benefits: It eliminates excessive screen redraws and provides
    a nice medium for displaying status messages. To effectively
    use this method, you must first create the project you will
    use to provide the status messages. Take a look at the
    STATUS.MPP file provided. This project contains a single task
    and has been saved while a custom PERT view named &quot;Macro
    Status&quot; was active. While our macro is running, we open
    this file and use the single task box displayed to provide
    status messages to the user.</font></p>
    <p><font size="2">To illustrate this process, the following
    macro runs through every task in the active project twice,
    first setting the Flag1 field to True and then setting the
    Flag2 field as well.</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Sub SetFlagTest3()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim tskIndex As Task '
    Index for Tasks collection</font></p>
    <p><font size="2" face="Courier New">Dim tskStatus As Task '
    Task used to display progress</font></p>
    <p><font size="2" face="Courier New">Dim prjStatus As Project
    ' Project used to display progress</font></p>
    <p><font size="2" face="Courier New">Dim prjCurrent As
    Project ' Current project</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Set prjCurrent =
    ActiveProject</font></p>
    <p><font size="2" face="Courier New">FileOpen
    &quot;status.mpp&quot;</font></p>
    <p><font size="2" face="Courier New">Set prjStatus =
    ActiveProject</font></p>
    <p><font size="2" face="Courier New">Set tskStatus =
    prjStatus.Tasks(1)</font></p>
    <p><font size="2" face="Courier New">ActiveWindow.Caption =
    &quot;Macro Status&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now setting task Flag1 fields...&quot;</font></p>
    <p><font size="2" face="Courier New">DoEvents ' Allows view
    to refresh</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now processing task &quot; &amp; tskIndex.ID</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now setting task Flag2 fields...&quot;</font></p>
    <p><font size="2" face="Courier New">DoEvents ' Allows view
    to refresh</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag2 = True</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now processing task &quot; &amp; tskIndex.ID</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">FileClose pjDoNotSave</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Note that by taking advantage of the way
    Microsoft Project delays refreshing the displayed task box,
    the macro can actually display one message in the box while
    displaying another in the entry bar.</font></p>
    <p><font size="2">To determine how much impact these status
    messages are actually having on the macro&#146;s performance,
    we can use the following code:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">Sub SetFlagtest4()</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Dim tskIndex As Task '
    Index for Tasks collection</font></p>
    <p><font size="2" face="Courier New">Dim lBegin As Long '
    Beginning tick count</font></p>
    <p><font size="2" face="Courier New">Dim lEnd As Long '
    Ending tick count</font></p>
    <p><font size="2" face="Courier New">Dim lMsgFlag1 As Long '
    Time to set Flag1 with status messages</font></p>
    <p><font size="2" face="Courier New">Dim lMinFlag1 As Long '
    Time to set Flag1 while app minimized</font></p>
    <p><font size="2" face="Courier New">Dim lMsgFlag2 As Long '
    Time to set Flag2 with status messages</font></p>
    <p><font size="2" face="Courier New">Dim lMinFlag2 As Long '
    Time to set Flag2 while app minimized</font></p>
    <p><font size="2" face="Courier New">Dim tskStatus As Task '
    Task used to display progress</font></p>
    <p><font size="2" face="Courier New">Dim prjStatus As Project
    ' Project used to display progress</font></p>
    <p><font size="2" face="Courier New">Dim prjCurrent As
    Project ' Current project</font></p>
    <p><font size="2" face="Courier New">Set prjCurrent =
    ActiveProject</font></p>
    <p><font size="2" face="Courier New">FileOpen
    &quot;status.mpp&quot;</font></p>
    <p><font size="2" face="Courier New">Set prjStatus =
    ActiveProject</font></p>
    <p><font size="2" face="Courier New">Set tskStatus =
    prjStatus.Tasks(1)</font></p>
    <p><font size="2" face="Courier New">ActiveWindow.Caption =
    &quot;Macro Status&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now setting task Flag1 fields...&quot;</font></p>
    <p><font size="2" face="Courier New">DoEvents ' Allows view
    to refresh</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now processing task &quot; &amp; tskIndex.ID</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lMsgFlag1 = lEnd -
    lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now setting task Flag2 fields...&quot;</font></p>
    <p><font size="2" face="Courier New">DoEvents ' Allows view
    to refresh</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag2 = True</font></p>
    <p><font size="2" face="Courier New">tskStatus.Name =
    &quot;Now processing task &quot; &amp; tskIndex.ID</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lMsgFlag2 = lEnd -
    lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">FileClose pjDoNotSave</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Application.WindowState
    = pjMinimized</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag1 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lMinFlag1 = lEnd -
    lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">lBegin = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">For Each tskIndex In
    prjCurrent.Tasks</font></p>
    <p><font size="2" face="Courier New">tskIndex.Flag2 = True</font></p>
    <p><font size="2" face="Courier New">Next tskIndex</font></p>
    <p><font size="2" face="Courier New">lEnd = GetTickCount()</font></p>
    <p><font size="2" face="Courier New">lMinFlag2 = lEnd -
    lBegin</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Application.WindowState
    = pjNormal</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">MsgBox &quot;Elapsed
    times with messages:&quot; &amp; Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Flag1 - &quot;
    &amp; lMsgFlag1 / 1000 &amp; &quot; s.&quot; &amp; Chr(10)
    &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Flag2 - &quot;
    &amp; lMsgFlag2 / 1000 &amp; &quot; s.&quot; &amp; Chr(10)
    &amp; _</font></p>
    <p><font size="2" face="Courier New">Chr(10) &amp;
    &quot;While minimized:&quot; &amp; Chr(10) &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Flag1 - &quot;
    &amp; lMinFlag1 / 1000 &amp; &quot; s.&quot; &amp; Chr(10)
    &amp; _</font></p>
    <p><font size="2" face="Courier New">&quot;Flag2 - &quot;
    &amp; lMinFlag2 / 1000 &amp; &quot; s.&quot;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">End Sub</font></p>
</blockquote>

<blockquote>
    <p><font size="2">Running this macro on a project of 200
    tasks, you should get results similar to this:</font></p>
    <p>{bmc ZCK4A.WPG}</p>
    <p><font size="2">Note that providing status messages in this
    case increased execution time by about 30%. While this can
    represent a substantial increase in execution time on some
    projects, user&#146;s will generally prefer to accept the
    performance drop in return for the continuous feedback.</font></p>
    <p><font size="4">Minimize Direct Object Manipulation</font></p>
    <p><font size="2">Another way to improve the performance of a
    Microsoft Project macro is to minimize, wherever possible,
    the direct manipulation of objects in code. Although it is
    often convenient to iterate through an entire collection of
    objects while performing some action, it is usually much
    quicker to use some of Microsoft Project&#146;s built-in
    features to minimize the number of objects that must be
    examined. An example of this technique follows.</font></p>
    <p><font size="2">In this example (taken from the Project
    Metrics application) it is necessary to examine each of the
    tasks in the project to determine if there are any resources
    assigned to the task. The following code fragment
    accomplishes this by checking the count of resources assigned
    to each task in the current project&#146;s task collection:</font></p>
</blockquote>

<blockquote>
    <p><font size="2" face="Courier New">' Assign the dummy
    resource to any task that does not already 'have at least one
    resource already assigned. A maximum of 1,000 'assignments
    may be made.</font></p>
    <p><font size="2" face="Courier New">tassign = 0</font></p>
    <p><font size="2" face="Courier New">For Each t In
    ActiveProject.Tasks</font></p>
    <p><font size="2" face="Courier New">If Not (t Is Nothing)
    Then</font></p>
    <p><font size="2" face="Courier New">If t.Resources.Count
    &lt; 1 Then</font></p>
    <p><font size="2" face="Courier New">If tassign &gt; 1000
    Then Error err_assign_limit</font></p>
    <p><font size="2" face="Courier New">t.Assignments.Add
    ResourceID:=oNewRes.ID</font></p>
    <p><font size="2" face="Courier New">tassign = tassign + 1
    'keeps track of the 'number of assignments made</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">Next t</font></p>
</blockquote>

<blockquote>
    <p><font size="2">The preceding code works, but the next
    example is much faster. The difference between the first
    example and the second is that the second example sets a task
    filter, which filters out all tasks that have resources
    assigned. This filtering operation is very fast and can
    improve the performance of this routine by over 300%.</font></p>
    <p><font size="2">The cpts_nores_filter constant refers to a
    task filter that is defined as follows:</font></p>
</blockquote>

<table border="0" cellpadding="7" cellspacing="0" width="359">
    <tr>
        <td width="35%"><font size="2"><b>Field Name</b></font></td>
        <td width="20%"><font size="2"><b>Test</b></font></td>
        <td width="23%"><font size="2"><b>Value(s)</b></font></td>
        <td width="22%"><font size="2"><b>And/Or</b></font></td>
    </tr>
</table>

<p><font size="2"></font>&nbsp;</p>

<table border="0" cellpadding="7" cellspacing="0" width="359">
    <tr>
        <td width="35%"><font size="2">Resource Names</font></td>
        <td width="20%"><font size="2">Equals</font></td>
        <td width="23%">&nbsp;</td>
        <td width="22%"><font size="2">And</font></td>
    </tr>
    <tr>
        <td width="35%"><font size="2">Milestone</font></td>
        <td width="20%"><font size="2">Equals</font></td>
        <td width="23%"><font size="2">No</font></td>
        <td width="22%"><font size="2">And</font></td>
    </tr>
    <tr>
        <td width="35%"><font size="2">Summary</font></td>
        <td width="20%"><font size="2">Equals</font></td>
        <td width="23%"><font size="2">No</font></td>
        <td width="22%">&nbsp;</td>
    </tr>
</table>

<blockquote>
    <p><font size="2" face="Courier New">tassign = 0</font></p>
    <p><font size="2" face="Courier New">FilterApply
    cpts_nores_filter</font></p>
    <p><font size="2" face="Courier New">SelectAll</font></p>
    <p><font size="2" face="Courier New">If Not
    ActiveSelection.Tasks Is Nothing Then</font></p>
    <p><font size="2" face="Courier New">For Each t In
    ActiveSelection.Tasks</font></p>
    <p><font size="2" face="Courier New">With t</font></p>
    <p><font size="2" face="Courier New">If tassign &gt; 1000
    Then Error err_assign_limit</font></p>
    <p><font size="2" face="Courier New">.Assignments.Add
    ResourceID:=oNewRes.ID</font></p>
    <p><font size="2" face="Courier New">tassign = tassign + 1
    'keeps track of the number of 'assignments made</font></p>
    <p><font size="2" face="Courier New">End With</font></p>
    <p><font size="2" face="Courier New">Next t</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
</blockquote>

<blockquote>
    <p><font size="1">©</font><font size="2"> 1995 Microsoft
    Corporation. <br>
    THESE MATERIALS ARE PROVIDED &quot;AS-IS,&quot; FOR
    INFORMATIONAL PURPOSES ONLY.<br>
    NEITHER MICROSOFT NOR ITS SUPPLIERS MAKES ANY WARRANTY,
    EXPRESS OR IMPLIED WITH RESPECT TO THE CONTENT OF THESE
    MATERIALS OR THE ACCURACY OF ANY INFORMATION CONTAINED
    HEREIN, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES
    OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
    BECAUSE SOME STATES/JURISDICTIONS DO NOT ALLOW EXCLUSIONS OF
    IMPLIED WARRANTIES, THE ABOVE LIMITATION MAY NOT APPLY TO
    YOU. <br>
    NEITHER MICROSOFT NOR ITS SUPPLIERS SHALL HAVE ANY LIABILITY
    FOR ANY DAMAGES WHATSOEVER INCLUDING CONSEQUENTIAL
    INCIDENTAL, DIRECT, INDIRECT, SPECIAL, AND LOSS PROFITS.
    BECAUSE SOME STATES/JURISDICTIONS DO NOT ALLOW THE EXCLUSION
    OF CONSEQUENTIAL OR INCIDENTAL DAMAGES THE ABOVE LIMITATION
    MAY NOT APPLY TO YOU. IN ANY EVENT, MICROSOFT&#146;S AND ITS
    SUPPLIERS&#146; ENTIRE LIABILITY IN ANY MANNER ARISING OUT OF
    THESE MATERIALS, WHETHER BY TORT, CONTRACT, OR OTHERWISE
    SHALL NOT EXCEED THE SUGGESTED RETAIL PRICE OF THESE
    MATERIALS.<br>
    </font></p>
</blockquote>
</FONT></BODY>
</html>

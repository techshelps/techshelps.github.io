<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variables</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Variables</H2><P CLASS="t">A <I>variable</I> is a storage container for a string or a number. A macro can change the contents of a variable as it is running. In other words, the value of a variable&nbsp;—&nbsp;the string or number it contains&nbsp;—&nbsp;can vary, which is why a variable is so named.</P>
<P CLASS="t">Variables provide the means for flexible and powerful macros. For example, to avoid overusing the word "cool," you could write a macro to calculate how many times the word appears in your document or in a paragraph. This macro may be useful, but it is not very flexible because it counts only the word "cool." Using a variable, you can modify the macro to calculate how frequently <I>any</I> word that you specify appears in a document. For a discussion of this macro, see "Some Sample Macros" at the end of this chapter.</P>
<P CLASS="t">WordBasic supports <I>string variables </I>and <I>numeric variables</I> to store strings and numbers. A string variable is identified by a dollar sign ($) ending character. A numeric variable does not end with a dollar sign character. Here are some examples of possible string and numeric variable names.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="256pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Examples of <BR>string variable names</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Examples of <BR>numeric variable names</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">MyName$</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">Total</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">SearchText$</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">count</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">answer$</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">size</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">When creating a variable name, keep the following rules in mind:</P>
<UL><LI>    It must begin with a letter.</LI><LI>    It can contain only letters, numbers, and underscore ( _ ) characters; punctuation marks and spaces are not allowed.</LI><LI>    It cannot be longer than 40 characters.</LI><LI>    It cannot be a <I>reserved word</I>. A reserved word is a word that already has a defined meaning in WordBasic. These words include statements, functions, arguments, and operators (such as AND and MOD).</LI></UL><P></P>
<H3 CLASS="h3"><A NAME="sec0"></A>Assigning Values to Variables</H3><P CLASS="t">A variable has no value until you assign it one. In effect, it is an empty container waiting to be filled by a string or numeric value.</P>
<P CLASS="t">In some programming languages, you have to "declare" variables before you can assign values to them. In other words, before you write the body of your program, you must specify all the words that are going to be used as variable names. You do not have to declare variables in WordBasic, so often a variable appears in your macro for the first time when you assign it a value. But for complex macros that use many variables, you can make the macro more readable by declaring all the variables at the beginning of the macro. You use the <B>Dim</B> statement to declare a variable. For information, see <B>Dim</B> in Part 2, "WordBasic Reference."</P>
<P CLASS="t">To assign a value to a variable, you use an equal sign (=), placing the variable name on the left side and the value you are assigning it on the right side. The following example assigns the string "Willie" to the variable MyName$:</P>
<P CLASS="spacing"><BR></P>
<PRE>MyName$ = "Willie"
</PRE>
<P CLASS="t">Don't try to place the value you are assigning on the left side of the equal sign&nbsp;—&nbsp;this doesn't work. The following example produces a syntax error:</P>
<P CLASS="spacing"><BR></P>
<PRE>"Willie" = MyName$            'Produces a syntax error
</PRE>
<P CLASS="t">Once you have assigned a value to a variable, you can use that variable just as you&nbsp;would use a string or number. If the variable is numeric, you can use it in mathematical expressions. The first line of the following example assigns to counter a value of 6. The second line assigns to counter the result of the expression counter + 1, or 7:</P>
<P CLASS="spacing"><BR></P>
<PRE>counter = 6
counter = counter + 1
</PRE>
<P CLASS="t">You cannot assign numeric values to string variables or string values to numeric variables. The following statements are not acceptable (either statement would prevent a macro from running and cause Word to display the message "Type mismatch"):</P>
<P CLASS="spacing"><BR></P>
<PRE>strg$ = 3.14159                'Produces an error
number = "hi, there"            'Produces an error
</PRE>
<P CLASS="t">Variables often act as containers for information returned by a function. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>firstdoc$ = FileName$()
</PRE>
<P CLASS="t">In this example, firstdoc$ stores the filename of the current document.</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Changing Strings to Numbers and Numbers to Strings</H3><P CLASS="t">Sometimes you need to change a string value to a numeric value, or vice versa. You use the <B>Val</B><B>()</B> function to convert a string to a number and the <B>Str$</B><B>()</B> function to convert a number to a string. For example, the following input box asks the user to type the number of files the macro should open.</P>
<P CLASS="a">    <img src="ATR0308.gif"></P>
<P CLASS="t">The <B>InputBox$</B><B>()</B> function, which displays the input box, returns a string value. So the <B>Val</B><B>()</B> function is used to convert the string value to the NumFiles numeric value:</P>
<P CLASS="spacing"><BR></P>
<PRE>NumFilesString$ = InputBox$("How many files do you want to list?")
NumFiles = Val(NumFilesString$)
</PRE>
<P CLASS="t">On the other hand, the <B>MsgBox</B> statement accepts only string values. So if you want to use <B>MsgBox</B> to display a numeric value, you must first convert it into a string with the <B>Str$</B><B>()</B> function. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>NumFiles$ = Str$(NumFiles)
MsgBox "You have chosen to list" + NumFiles$ + " files."
</PRE>
<P CLASS="t">These instructions display the following message box.</P>
<P CLASS="a">    <img src="ATR0309.gif"></P>
<P CLASS="t">The <B>Str$</B><B>()</B> function adds a space before positive numbers. The space accommodates the minus sign (–) for negative numbers. You can use the <B>LTrim$</B><B>()</B> function to remove the space. For an example, see <B>LTrim$</B><B>()</B> in Part 2, "WordBasic Reference." For more information on <B>InputBox$</B><B>()</B> and <B>MsgBox</B>, see "Displaying Messages and Requesting Information" later in this chapter.</P></FONT></FONT></BODY></HTML>

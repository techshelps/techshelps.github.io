<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Put Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec271"></A>Put Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec272"></A>Description</H2><P>Writes from a variable to a disk file.</P>
<H2><A NAME="sec273"></A>Syntax</H2><P><B>Put</B> [<B>#</B>]<I>filenumber</I><B>, </B>[<I>recnumber</I>]<B>, </B><I>varname</I></P>
<P>The <B>Put</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="292pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>filenumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Any valid file number.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>recnumber</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Record number (<B>Random</B> mode files) or byte number (<B>Binary</B> mode files) at which writing begins.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of variable containing data to be written to disk.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec274"></A>Remarks</H2><P>The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit recnumber, the next record or byte (the one after the last <B>Get</B> or <B>Put</B> statement or the one pointed to by the last <B>Seek</B> function) is written. You must include delimiting commas, for example:</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Put #4,,FileBuffer
</PRE>
<P CLASS="t">  </P>
<P>For files opened in <B>Random</B> mode, the following rules apply:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the length of the data being written is less than the length specified in the <B>Len</B> clause of the <B>Open</B> statement, <B>Put</B> still writes subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data can’t be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than that specified in the <B>Len</B> clause of the <B>Open</B> statement, an error occurs.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is a variable-length string, <B>Put</B> writes a 2-byte descriptor containing the string length and then the variable. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual length of the string.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is a <B>Variant</B> of a numeric type, <B>Put</B> writes 2 bytes identifying the <B>VarType</B> of the <B>Variant</B> and then the variable. For example, when writing a <B>Variant</B> of <B>VarType</B> 3, <B>Put</B> writes 6 bytes: 2 bytes identifying the <B>Variant</B> as <B>VarType</B> 3 (<B>Long</B>) and 4 bytes containing the <B>Long</B> data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 2 bytes greater than the actual number of bytes required to store the variable.</LI></UL></SPAN><P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   You can use the <B>Put</B> statement to write a <B>Variant</B> array to disk but you cannot use <B>Put</B> to write a scalar <B>Variant</B> containing an array to disk. You also cannot use <B>Put</B> to write objects to disk.</P>
<P CLASS="t">  </P>
<P></P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is a <B>String</B> <B>Variant</B> (<B>VarType</B> 8), <B>Put</B> writes 2 bytes identifying the <B>VarType</B>, 2 bytes indicating the length of the string, and then the string data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be at least 4 bytes greater than the actual length of the string.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is a dynamic array, <B>Put</B> writes a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <I>NumberOfDimensions</I>. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 118 bytes when the array is written to disk.</LI></UL></SPAN><P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyArray(1 To 5,1 To 10) As Integer
</PRE>
<P CLASS="t">  </P>
<P>The 118 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 * 2), and 100 bytes for the data (5 * 10 * 2).</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is a fixed-size array, <B>Put</B> writes only the data. No descriptor is written to disk.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If the variable being written is any other type of variable (not a variable-length string or a <B>Variant</B>), <B>Put</B> writes only the variable data. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the length of the data being written.</LI><LI><SPAN CLASS="Symbol"></SPAN>    <B>Put</B> writes elements of user-defined types as if each were written individually, except there is no padding between elements. On disk, a dynamic array in a user-defined type written with <B>Put </B>is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <I>NumberOfDimensions</I>. The record length specified by the <B>Len</B> clause in the <B>Open</B> statement must be greater than or equal to the sum of all the bytes required to write the individual elements, including any arrays and their descriptors.</LI></UL></SPAN><P>For files opened in <B>Binary</B> mode, all of the <B>Random</B> rules apply except:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    The <B>Len</B> clause in the <B>Open</B> statement has no effect. <B>Put</B> writes all variables to disk contiguously; that is, with no padding between records.</LI><LI><SPAN CLASS="Symbol"></SPAN>    For any array other than an array in a user-defined type, <B>Put</B> writes only the data. No descriptor is written.</LI><LI><SPAN CLASS="Symbol"></SPAN>    <B>Put</B> writes variable-length strings that are not elements of user-defined types without the 2-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 10 bytes to file number 1:</LI></UL></SPAN><P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>VarString$ = String$(10," ")#1,,VarString$
</PRE>
<P CLASS="t">  </P>
<H2><A NAME="sec275"></A>See Also</H2><P><B>Get</B> Statement, <B>Open</B> Statement, <B>Seek</B> Function, <B>VarType</B> Function.</P>
<H2><A NAME="sec276"></A>Example</H2><P>This example uses the <B>Put</B> statement to write data to a file. Five records of the user-defined type Record are written to the file.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Type Record                                    ' Define user-defined type.
    ID As Integer
    Name As String * 20TypeMyRecord As Record                        ' Declare variable.
' Open file for random access."TESTFILE" For Random As #1 Len = Len(MyRecord)RecordNumber = 1 To 5                    ' Loop 5 times.
    MyRecord.ID = RecordNumber                ' Define ID.
    MyRecord.Name = "My Name" &amp; RecordNumber    ' Create a string.
    Put #1, RecordNumber, MyRecord            ' Write record to file.RecordNumber#1                                        ' Close file.
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

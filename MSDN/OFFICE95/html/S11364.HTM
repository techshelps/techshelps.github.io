<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Change Event</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec215"></A>Change Event</H1><P CLASS="t">  </P>
<H2><A NAME="sec216"></A>Applies To</H2><P>Combo Box Control, Text Box Control.</P>
<H2><A NAME="sec217"></A>Description</H2><P>The Change event occurs when the contents of a text box or the text portion of a combo box changes. Examples of this event include entering a character directly in the text box or combo box or changing the control’s <B>Text</B> property setting using a macro or Visual Basic.</P>
<P><A NAME="sec217PT2"></A>Notes</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Setting the value of a control using a macro or Visual Basic doesn’t trigger this event for the control. You must type the data directly into the control, or set the control’s <B>Text</B> property.</LI><LI><SPAN CLASS="Symbol"></SPAN>    This event applies only to controls on a form.</LI></UL></SPAN><H2><A NAME="sec218"></A>Remarks</H2><P>By running a macro or executing an event procedure when a Change event occurs, you can coordinate data display among controls. You can also display data or a formula in one control and the results in another control.</P>
<P>The Change event doesn’t occur when a value changes in a calculated control or when you select an item from the combo box list.</P>
<P><A NAME="sec218PT2"></A>Note</P>
<P CLASS="t">  </P>
<P><B>Note</B>   A Change event can cause a cascading event. This occurs when a macro or event procedure that runs in response to the control’s Change event alters the control’s contents — for example, by changing a property setting that determines the control’s value, such as the <B>Text</B> property for a text box. To prevent a cascading event:</P>
<P CLASS="t">  </P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    If possible, avoid attaching a Change macro or event procedure to a control that alters the control’s contents.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Avoid creating two or more controls having Change events that affect each other — for example, two text boxes that update each other.</LI></UL></SPAN><P></P>
<P>Changing the data in a text box or combo box using the keyboard causes keyboard events to occur in addition to control events like the Change event. For example, if you move to a new record and type an ANSI character in a text box in the record, the following events occur in this order:</P>
<P>    KeyDown <IMG SRC=rarrow.gif> KeyPress <IMG SRC=rarrow.gif> BeforeInsert <IMG SRC=rarrow.gif> Change <IMG SRC=rarrow.gif> KeyUp</P>
<P>The BeforeUpdate and AfterUpdate events for the text box or combo box control occur after you have entered the new or changed data in the control and moved to another control (or clicked Save Record on the Records menu), and thus after all of the Change events for the control.</P>
<P>The NotInList event occurs for combo boxes for which the <B>LimitToList</B> property is set to Yes after you enter a value that is not in the list and attempt to move to another control or save the record. It occurs after all the Change events for the combo box. In this case, the BeforeUpdate and AfterUpdate events for the combo box don’t occur, because Microsoft Access doesn’t accept a value that is not in the list.</P>
<H2><A NAME="sec219"></A>See Also</H2><P>BeforeUpdate, AfterUpdate Events; Enter, Exit Events; GotFocus, LostFocus Events; KeyDown, KeyUp Events; KeyPress Event; NotInList Event; Open, Close Events; <B>Text</B> Property.</P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

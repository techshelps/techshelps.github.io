<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using OLE Automation from Microsoft Excel</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Using OLE Automation from Microsoft Excel</H1><P CLASS="t">OLE Automation is a feature (introduced in Microsoft OLE version 2.0) that allows you to retrieve, edit, and export data by referencing another application's objects, properties, and methods. Objects that can be returned from outside the application are <I>OLE Automation objects</I>. An application that exposes its OLE Automation objects to other applications is called an <I>OLE server application</I>. An application that can access and manipulate OLE Automation objects is called an <I>OLE controller application</I>. Not all applications support OLE Automation; the applications that do support it are said to be <I>OLE compatible</I>.</P>
<P CLASS="t">To exchange data with another application by using OLE Automation while working in Microsoft Excel, you first create a reference to the application you want to communicate with (the OLE server application). Then, using the objects, properties, and methods of the other application, you add, change, or delete information. When you finish making changes, you close the OLE server application from inside the OLE controller application.</P></FONT>
</FONT></BODY></HTML>

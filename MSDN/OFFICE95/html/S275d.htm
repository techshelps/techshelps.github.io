<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conditionals and Loops</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Conditionals and Loops</H2><P CLASS="t">Conditionals and loops are key elements for building powerful and flexible macros. They are defined as follows:</P>
<UL><LI>    A <I>conditional</I> statement tells the macro to run a group of instructions only if a specified condition is met. The logic of a conditional statement is simple and familiar. "If it's raining, I'll put on my raincoat" is an example of a conditional statement.</LI><LI>    A <I>loop</I> statement tells the macro to repeat a group of statements either a specified number of times or until a condition is met. The equivalent in everyday life might be "Beat the egg whites until they are fluffy." In Word, a loop might be "Format every paragraph until you reach the end of the document."</LI></UL><P></P>
<P CLASS="t">Conditional and loop statements are often referred to as <I>control</I> <I>structures</I> because they control when and how other statements are run. Generally, a control structure is composed of a beginning instruction and an ending one, with the instructions being controlled in the middle.</P>
<P CLASS="t">WordBasic offers more than one conditional statement and more than one way to create a loop. This chapter covers the <B>If</B> conditional and the <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop; the next chapter covers the <B>Select Case</B> conditional and the <B>For</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Next</B> loop.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>What Is a Condition?</H3><P CLASS="t">A <I>condition</I> is an expression that is either true or false. WordBasic uses conditions to determine whether or not to run the statements in an <B>If</B> conditional or a <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop.</P>
<P CLASS="t">Consider the statement "Today is Monday." This statement is either true or false: either today is Monday or it isn't. The statement becomes a condition when it is put into a conditional sentence: "If today is Monday, I'll go to work." This conditional says that if the condition ("today is Monday") is true, the second part of the sentence will occur ("I'll go to work").</P>
<P CLASS="t">In WordBasic and other programming languages, you express a condition by&nbsp;comparing values. For example, if you say "Today is Monday," you are comparing today to Monday and saying that Monday and today are the same. In WordBasic, you compare values by using <I>relational operators</I>&nbsp;—&nbsp;symbols that state how values stand in relation to each other (they're equal, one is greater than the other, and so on). The symbols in the following table are probably familiar to you from math, although some might look a little different (for example, &gt;&nbsp;= rather than &gt;).</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="256pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Relational operator</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Meaning</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">=</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Equal to</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">&lt;&gt;</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Not equal to</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">&gt;</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Greater than</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">&lt;</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Less than</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">&gt;=</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Greater than or equal to</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">&lt;=</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Less than or equal to</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Word evaluates conditions&nbsp;—&nbsp;expressions that use relational operators&nbsp;—&nbsp;as either true or false. Here are some examples.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="256pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Condition</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Evaluation</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">7 = 35</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">7 &lt;&gt; 6</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">7 &lt;= 7</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">You can also compare strings. </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="256pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Condition</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Evaluation</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Bob" = "Bob"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Bob" = "bob"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Bob" &lt;&gt; "Jerry"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Blue" &lt; "Green"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"love" &gt; "life"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Most often, string comparisons are used to determine whether two strings match. For example, a macro might contain a condition such as StyleName$() = "Heading 2" which tests whether the current style name is "Heading 2." As the condition "Bob" = "bob" (which evaluates as false) reveals, the case of letters is significant in string comparisons; an uppercase "B" does not match a lowercase "b." You can use the WordBasic functions <B>LCase$</B><B>()</B> and <B>UCase$</B><B>()</B>, which return strings in lowercase and uppercase characters, to equalize case when doing string comparisons where case should be ignored.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>How Word Evaluates String Comparisons</B></P>
<P CLASS="sbrt">You can use the &gt; or &lt; operator to compare whether one string is "greater than" or "less than" another. This sort of comparison is rare, but if you do use it, you need to know a little more about how string comparisons are evaluated. Word evaluates string comparisons character by character until it finds characters that don't match; the alphabetic or character code values for each character are then compared. </P>
<P CLASS="sbrt">If the characters are letters in the alphabet, Word evaluates them according to which letter is first in the alphabet. For example, "B" follows "A" in the alphabet, so "B" is evaluated as greater than "A." Likewise, an uppercase "B" follows a lowercase "a" in alphabetic order, so "B" is evaluated as greater than "a," even though the character code for "B" (66) is less than the character code for "a" (97). (The character codes for all lowercase letters are higher than the character codes for all uppercase letters; for that reason "b" is evaluated as greater than "B.") If the characters are nonalphabetic, Word evaluates them according to their character code value. For example, a period (.) is greater than a comma (,) because 46, the code for a period, is greater than 44, the code for a comma.</P>
<P CLASS="sbrt">Thus, "Blue" &lt; "Green" is true because "B" comes before "G" in the alphabet. In the condition "love" &gt; "life", both strings begin with "l," so Word evaluates the second characters in the strings; "o" comes after "i" in the alphabet, so the first string is evaluated as greater than the second one.</P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">You can use numbers to represent "true" and "false". In a conditional, false can be represented as 0 (zero), and true can be represented as –1. Therefore, if the result of a conditional expression is 0 (zero), it is evaluated as false. If the result is any nonzero number (not just –1), it is evaluated as true. See "The While<FONT FACE="Symbol">¼</FONT>Wend Loop" later in this chapter for an example of a macro that uses this capability.</P>
<P></P>
<H4 CLASS="h4"><A NAME="sec1"></A>An Example</H4><P CLASS="t">You can create a macro that is the WordBasic equivalent of the sentence "If today is Monday, I'll go to work."</P>
<P CLASS="t">To start with, create a series of numeric variables corresponding to the days of the week:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sunday = 1
Monday = 2
Tuesday = 3
Wednesday = 4
Thursday = 5
Friday = 6
Saturday = 7
</PRE>
<P CLASS="t">Next, add this instruction:</P>
<P CLASS="spacing"><BR></P>
<PRE>ThisDay = WeekDay(Today())
</PRE>
<P CLASS="t">The numeric variable ThisDay holds the value returned by the WordBasic functions <B>Today</B><B>()</B> and <B>WeekDay</B><B>()</B>. <B>Today</B><B>()</B> returns a serial number that represents the current date; <B>WeekDay</B><B>()</B> converts that serial number into a number from 1 to 7, where 2 represents Monday, just like the variables you've set up. Now the macro is ready for the following conditional statement:</P>
<P CLASS="spacing"><BR></P>
<PRE>If ThisDay = Monday Then MsgBox "Time to go to work!"
</PRE>
<P CLASS="t">The <B>MsgBox</B> statement displays a message box, so if the day happens to be Monday and you run the macro, you'll get this message box on your screen.</P>
<P CLASS="a">    <img src="ATR0310.gif"></P>
<H3 CLASS="h3"><A NAME="sec2"></A>The If Conditional</H3><P CLASS="t">You can write the <B>If</B> conditional in several different ways, depending on how complex your control structure needs to be. The previous example used the shortest form, or syntax, as shown here:</P>
<P CLASS="syn"><B>If</B> <I>condition</I> <B>Then</B> <I>instruction</I></P>
<P CLASS="t">This syntax says that if the <I>condition</I> is true, the <I>instruction</I> will run. Generally, this form is used just for a single instruction because every instruction that is part of this form of the <B>If</B> conditional must be on the same line. In the following example, if the text is bold, bold formatting is removed:</P>
<P CLASS="spacing"><BR></P>
<PRE>If Bold() = 1 Then Bold 0
</PRE>
<P CLASS="t">You could add instructions on the same line, separating each one with a colon (:). In the following example, if the text is bold, bold formatting is removed and italic applied:</P>
<P CLASS="spacing"><BR></P>
<PRE>If Bold() = 1 Then Bold 0 : Italic 1
</PRE>
<P CLASS="t">But if you want to include more than one instruction within the <B>If</B> control structure, you generally use the following syntax:</P>
<P CLASS="syn"><B>If</B> <I>condition</I> <B>Then<BR></B>    <I>Series of instructions<BR></I><B>End If</B></P>
<P CLASS="t">All the <I>instructions</I> between <B>If</B> and <B>End If</B> are dependent on the <I>condition</I>. In the following example, <B>If</B> evaluates, or "tests," the condition to determine whether selected text is formatted as bold. If it is, the instructions remove the bold formatting and apply italic and underline formatting:</P>
<P CLASS="spacing"><BR></P>
<PRE>If Bold() = 1 Then                'If the selected text is bold, then
    Bold 0                        'remove bold formatting
    Italic 1                        'apply italic formatting
    Underline 1                    'apply underline formatting
End If
</PRE>
<P CLASS="t"><B>If</B> control structures can include an <B>Else</B> instruction. Instructions subject to <B>Else</B> run if the condition is not true:</P>
<P CLASS="syn"><B>If</B> <I>condition</I> <B>Then<BR></B>    <I>Series of instructions to run if condition is true<BR></I><B>Else<BR></B>    <I>Series of instructions to run if condition is false<BR></I><B>End If</B></P>
<P CLASS="t">The following example toggles bold formatting. That is, if the selected text is formatted as bold, the first <B>Bold</B> instruction removes bold formatting; if the text is not bold, the second <B>Bold</B> instruction applies bold formatting (this is how the Bold button on the Formatting toolbar works):</P>
<P CLASS="spacing"><BR></P>
<PRE>If Bold() = 1 Then                'If the selected text is bold, then
    Bold 0                        'remove bold formatting
Else                                'otherwise
    Bold 1                        'apply bold formatting
End If
</PRE>
<P CLASS="t">An abbreviated, one-line version of the <B>If</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Then</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Else</B> syntax is available without the ending <B>End If</B>:</P>
<P CLASS="syn"><B>If</B> <I>condition</I> <B>Then</B> <I>instruction </I><B>Else</B> <I>instruction</I></P>
<P CLASS="t">Again, this one-line structure works well for conditionals where only one or two instructions are involved. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>If Bold() = 1 Then Bold 0  Else Bold 1
</PRE>
<P CLASS="t">For cases where multiple instructions are involved, the full syntax with <B>End If</B> works better.</P>
<P CLASS="t">The most complex form of the <B>If</B> conditional includes the <B>ElseIf</B> instruction:</P>
<P CLASS="syn"><B>If</B> <I>condition1</I> <B>Then</B><BR>        <I>Series of</I> <I>instructions to run if condition1 is true<BR></I><B>ElseIf</B> <I>condition2</I> <B>Then</B><BR>        <I>Series of</I> <I>instructions to run if condition2 is true<BR></I><B>Else</B><BR>        <I>Series of instructions to run if no condition is true<BR></I><B>End</B> <B>If</B></P>
<P CLASS="t"><B>ElseIf</B> is a second <B>If</B> conditional contained within a single <B>If</B> control structure. You could add an <B>ElseIf</B> instruction to the "days of the week" example presented earlier. In English, the conditional could be expressed as "If today is Saturday or Sunday, I'll stay at home; otherwise, I'll go to work." In WordBasic, the conditional might look like the following:</P>
<P CLASS="spacing"><BR></P>
<PRE>If ThisDay = Saturday Then
    MsgBox "Stay at home!"
ElseIf ThisDay = Sunday Then
    MsgBox "Stay at home!"
Else
    MsgBox "Go to work!"
End If
</PRE>
<P CLASS="t">You can add as many <B>ElseIf</B> instructions to an <B>If</B> conditional as you need. For example, you could use <B>ElseIf</B> to test a condition for every day of the week (although this wouldn't be a very efficient technique).</P>
<H3 CLASS="h3"><A NAME="sec3"></A>The While<FONT FACE="Symbol">¼</FONT>Wend Loop</H3><P CLASS="t">You can think of a <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop as a conditional that can run the statements it controls more than once. Here's the syntax for the <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend </B>loop:</P>
<P CLASS="syn"><B>While</B> <I>condition<BR></I>    <I>Series of instructions to run if condition is true<BR></I><B>Wend</B></P>
<P CLASS="t">As with the <B>If </B>conditional, the instructions within a <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop will not run unless <I>condition</I> is true. If <I>condition</I> is true, the instructions repeat until the condition is no longer true. If the condition never changes, an "endless loop" occurs&nbsp;—&nbsp;the instructions within the loop repeat endlessly until someone interrupts the macro by pressing ESC or clicking the Stop button on the toolbar. This is not usually an effect you want to achieve, so when you create a <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop, you must build into it a means of changing the condition that starts the loop from true to false. This may sound difficult, but in practice it usually isn't. Consider the following example:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
StartOfDocument
TRUE = - 1
EditFind .Find = "cool", .Direction = 0, .MatchCase = 0, \
    .WholeWord = 0, .PatternMatch = 0, .SoundsLike = 0, \
    .FindAllWordForms = 0, .Format = 0, .Wrap = 0
count = 0
While EditFindFound() = TRUE
    count = count + 1
    RepeatFind
Wend
MsgBox "Cool was found" + Str$(count) + " times."
End Sub
</PRE>
<P CLASS="t">This macro moves the insertion point to the start of the document and then searches for the word "cool." It uses a <B>While</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Wend</B> loop to continue searching for "cool" until every instance of the word has been found. The macro then reports how many times it found the word in the document.</P>
<P CLASS="t">The condition EditFindFound() = TRUE controls the <B>While...Wend</B> loop. The&nbsp;<B>EditFindFound</B><B>()</B> function returns a value of –1 if the result of the most recent search using <B>EditFind</B> was successful. If the search wasn't successful, <B>EditFindFound</B><B>()</B> returns 0 (zero). In a condition, a result of 0 (zero) corresponds to "false," and –1 corresponds to "true." So if the search is not successful, <B>EditFindFound</B><B>()</B> returns 0 (zero) and the condition is no longer true. Note that the variable TRUE, defined earlier as –1, is used instead of –1 to make the condition easier to read.</P>
<H3 CLASS="h3"><A NAME="sec4"></A>Compound Expressions in Conditional Statements</H3><P CLASS="t">You can link two or more conditions together into a compound expression that is evaluated as a single condition. To link conditions together, you use the <I>logical operators</I> AND and OR, described as follows:</P>
<UL><LI>    When two conditions are linked by AND, <I>both</I> conditions must be true in order for the compound expression to be true.</LI><LI>    When two conditions are linked by OR, the compound expression is true if <I>either</I> condition is true.</LI></UL><P></P>
<P CLASS="t">The following table provides some examples of compound expressions.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Compound expression</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Evaluation</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">10 &gt; 5 And 100 &lt; 200</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">3 &lt; 6 And 7 &gt; 10</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">8 &lt; 7 Or 90 &gt; 80</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">2 &lt; 1 Or 3 &gt; 60</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Y" &gt; "N" And "yes" &lt;&gt; "no"</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">"Y" &lt; "N" Or 4 &lt;&gt; 4</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Earlier in this section, the <B>ElseIf</B> instruction was used in an <B>If</B> control structure to&nbsp;express the conditional "If today is Saturday or Sunday, I'll stay at home; otherwise, I'll go to work." The following example uses a compound expression instead:</P>
<P CLASS="spacing"><BR></P>
<PRE>If ThisDay = Saturday Or ThisDay = Sunday Then
    MsgBox "Stay home today!"
Else
    MsgBox "Time to go to work!"
End If
</PRE>
<P CLASS="t">The compound expression is more efficient in this case than using <B>ElseIf</B>&nbsp;—&nbsp;fewer instructions are needed to accomplish the same task and the instructions are also easier to understand, since they're closer to the way you would express the condition in English.</P>
<P CLASS="t">Note that the following instruction would not work properly:</P>
<P CLASS="spacing"><BR></P>
<PRE>If ThisDay = Saturday OR Sunday        'Produces the wrong result
</PRE>
<P CLASS="t">Although this instruction reads like English, and you might therefore expect it to&nbsp;work, it does not. The expression ThisDay = Saturday is one condition and, on&nbsp;the other side of OR, Sunday is the other condition. WordBasic reads the compound expression as something like "If today is Saturday or if Sunday is Sunday." Because Sunday is always Sunday, the compound expression is always evaluated as true, no matter what day it is.</P>
<P CLASS="t">When WordBasic evaluates compound expressions, it proceeds from left to right; all conditions are evaluated first, then all compound expressions with AND, then all compound expressions with OR. You can use parentheses to control the order of evaluation, as in mathematical expressions.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The AND and OR operators can be tricky. It is easy in some cases to use an&nbsp;OR operator when you need to use an AND. If you have any uncertainty over which one to use, test your macro.</P>
<P></P>
<H3 CLASS="h3"><A NAME="sec5"></A>The NOT Operator</H3><P CLASS="t">A third logical operator available in WordBasic is NOT. The NOT operator negates the expression that follows it. The following table shows some examples.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="238pt" VALIGN="TOP"><COL WIDTH="1pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Expression</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Evaluation</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">Not (5 &gt; 10)</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">Not (8 &lt; 7 Or 90 &gt; 80)</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">False</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="ct">Not (0)</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">True</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The logic of the last example may not be immediately obvious. Because 0 (zero) is evaluated as false, Not (0) means "not (false)," or true.</P>
<P CLASS="t">The NOT operator is useful as a way to make a condition easier to read. For example, compare the following two instructions:</P>
<P CLASS="spacing"><BR></P>
<PRE>If ViewOutline() = 0 Then ViewOutline
If Not ViewOutline() Then ViewOutline
</PRE>
<P CLASS="t">The instructions have the same effect, but the second one is closer to the way the conditional would be expressed in English: "If the document is not in outline view, then switch to outline view."</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The NOT operator works well with functions such as <B>ViewOutline</B><B>()</B> that return –1 (true) or 0 (false); it can reverse either value the function returns. It is usually not appropriate to use NOT with functions that can return other values. For more detailed information on NOT, see "Operators and Predefined Bookmarks" in Part 2, "WordBasic Reference."</P>
<P></P></FONT></FONT></BODY></HTML>

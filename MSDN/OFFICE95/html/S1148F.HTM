<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateObject Function</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h1><a name="sec232"></a>CreateObject Function</h1>

<h2><a name="sec233"></a>Description</h2>

<p>Creates an OLE Automation object.</p>

<h2><a name="sec234"></a>Syntax</h2>

<p><b>CreateObject(</b><i>class</i><b>)</b></p>

<p>The <i>class</i> argument uses the syntax &#147;<i>appname</i><b>.</b><i>objecttype</i>&#148;
and has these parts:</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</b></td>
        <td><b>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>appname</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the application providing
        the object.</td>
    </tr>
    <tr>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>objecttype</i></td>
        <td valign="top">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The type or class of object to create.</td>
    </tr>
</TBODY></table>

<p class="spacing"><br>
</p>

<h2><a name="sec235"></a>Remarks</h2>

<p>Every application that supports OLE Automation provides at
least one type of object. For example, a word processing
application may provide an application object, a document object,
and a toolbar object.</p>

<p>To create an OLE Automation object, assign the object returned
by <b>CreateObject</b> to an object variable:</p>

<p class="spacing"><br>
</p>

<pre>Dim WordBasicObject As ObjectWordBasicObject = CreateObject(&quot;Word.Basic&quot;)
</pre>

<p>When this code is executed, the application creating the
object is started (Microsoft Word in this example). If it is
already running, a new instance of the application is started,
and an object of the specified type is created. Once an object is
created, you reference it in code using the object variable you
defined. In the above example, you access properties and methods
of the new object using the object variable, WordBasicObject. For
example:</p>

<p class="spacing"><br>
</p>

<pre>WordBasicObject.Insert &quot;Hello, world.&quot;.FilePrint.FileSaveAs &quot;C:\DOCS\TEST.DOC&quot;
</pre>

<p>Similarly, you can pass the object returned by the <b>CreateObject</b>
function to a function expecting an object as an argument. For
example:</p>

<p class="spacing"><br>
</p>

<pre>Call MySub (CreateObject(&quot;Word.Basic&quot;))
</pre>

<p><b>Note</b> Use <b>CreateObject</b> when there is no current
instance of the object. If there is a current instance, or if you
want to start the application and have it load a file, you can
use the <b>GetObject</b> function. </p>

<p>If an object has registered itself as a single-instance object
(for example, the Word.Basic object in Microsoft Word 6.0), only
one instance of the object is created, no matter how many times <b>CreateObject</b>
is executed.</p>

<h2><a name="sec236"></a>See Also</h2>

<p><b>GetObject</b> Function, <b>Set</b> Statement.</p>

<h2><a name="sec237"></a>Example</h2>

<p>This example uses the <b>CreateObject</b> function to set a
reference (xlApp) to Microsoft Excel. It uses the reference to
access the <b>Visible</b> property of Microsoft Excel, then uses
the <b>Quit</b> method of Microsoft Excel to close it. Finally,
the reference itself is released.</p>

<p class="spacing"><br>
</p>

<pre>Dim xlApp As Object    ' Declare variable to hold the reference.
    xlApp = CreateObject(&quot;excel.application&quot;).Visible = True    ' You may have to set Visible property to True
        ' if you want to see the application.
        ' Use xlApp to access Microsoft Excel's 
        ' other objects..Quit    ' When you finish, use the Quit method to close xlApp = Nothing    ' the application, then release the reference.
</pre>
</FONT></FONT></BODY>
</html>

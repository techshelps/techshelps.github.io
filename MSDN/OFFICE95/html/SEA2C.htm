<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Handle Errors</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>How to Handle Errors</H1><P CLASS="t">If you haven't set up a mechanism to handle errors, run-time errors in your code can lead to a variety of unfortunate outcomes. Some errors may abruptly halt the execution of your code, leaving the user no way to recover data, correct the source of the error, or resume execution. Other errors might allow execution to continue but will cause your code to act unpredictably.</P>
<P CLASS="t">For example, the following FileExists function, which contains no error-handling code, returns <B>True</B> if the specified file exists or <B>False</B> if it doesn't exist.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Function FileExists(filename)
    FileExists = (Dir(filename) &lt;&gt; "")
End Function
</FONT></PRE>
<P CLASS="t">The <B>Dir</B> function returns the first file that matches the specified filename; it returns a zero-length string if no matching file is found. Therefore, the code Dir(filename) &lt;&gt; "" returns <B>True</B> if <B>Dir</B> returns a filename or <B>False</B> if <B>Dir</B> returns a zero-length string.</P>
<P CLASS="t">Although this code appears to cover either of the possible outcomes of the <B>Dir</B> call, if the drive letter specified in the argument doesn't refer to a valid drive, error 68 ("Device unavailable") occurs. Also, if the specified drive is a floppy disk drive, the code will work correctly only if there is a disk in the drive and the drive door is closed. If not, Visual Basic generates error 71 ("Disk not ready") and halts execution of your code.</P>
<P CLASS="t">To avoid this situation, you can use the error-handling features in Visual Basic to intercept errors and take corrective action. (Intercepting an error is also known as <I>trapping</I> it.) For example, the disk-drive errors described in the preceding paragraph could be handled by the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Function FileExists (filename)
On Error GoTo CheckError        ' Turn on error trapping so error handler<BR>                            ' responds if any error is detected.
    FileExists = (Dir(filename) &lt;&gt; "")
    Exit Function            ' Avoid executing error handler <BR>                            ' if no error occurs.

CheckError:                    ' Branch here if error occurs.<BR>    ' Define constants to represent Visual Basic error code.
    Const ERR_DISKNOTREADY = 71, ERR_DEVICEUNAVAILABLE = 68
    FileExists = False
    If Err = ERR_DISKNOTREADY Then
        Msg = "Put a floppy disk in the drive and close the drive door."
        ' Display message box with an exclamation mark icon and with OK<BR>        ' and Cancel buttons.
        If MsgBox(Msg, vbExclamation + vbOKCancel) = vbOK Then
            Resume
        Else
            Resume Next
        End If
    ElseIf Err = ERR_DEVICEUNAVAILABLE Then
        Msg = "This drive or path doesn't exist: " &amp; filename
        MsgBox Msg, vbExclamation
        Resume Next
    Else
        Msg = "Unexpected error #" &amp; Str(Err) &amp; ": " &amp; Error(Err)
        ' Display message box with Stop sign icon and OK button.
        MsgBox Msg, vbCritical
        End
    End If
End Function
</FONT></PRE>
<P CLASS="t">In the preceding code, the <B>Err </B>function returns the error number associated with the run-time error that occurred. When Visual Basic generates error 71, the FileExists function displays a message that tells the user to insert a floppy disk in the floppy disk drive and allows the user to click either OK or Cancel to dismiss the message box. </P>
<P CLASS="t">If the user clicks OK, the <B>Resume</B> statement returns program control to the statement at which the error occurred — in this case, the line containing the <B>Dir</B> function — and attempts to reexecute that statement. This statement succeeds if the user has corrected the problem; otherwise, the program returns to the error-handling code.</P>
<P CLASS="t">If the user clicks Cancel, the <B>Resume Next</B> statement returns program control to the statement following the one at which the error occurred — in this case, the <B>Exit Function</B> statement.</P>
<P CLASS="t">If error 68 occurs, Visual Basic displays a message describing the problem. The <B>Resume Next</B> statement then causes the function to continue execution at the statement following the one at which the error occurred. </P>
<P CLASS="t">If an unanticipated error occurs, Visual Basic displays an alternative message and halts the code at the <B>End</B> statement.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">In the preceding example, the error numbers that the <B>Err</B> function returns are compared with constants that you've defined. For a list of the error numbers, see "Trappable errors" in Help<I>.</I></P>
<P CLASS="nt">The constants that begin with the letters "vb" are built-in constants that pertain to dialog boxes displayed by the <B>MsgBox</B> function. For more information about the <B>MsgBox</B> function, see "MsgBox" in Help<I>.</I></P>
<P></P></FONT>
</FONT></BODY></HTML>

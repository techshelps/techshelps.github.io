<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Guidelines for Customizing the Menu System</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Guidelines for Customizing the Menu System</H2><P CLASS="t">Microsoft Excel offers you a wide range of ways to modify the menu system: you can create new menu bars; add new drop-down menus to built-in or custom menu bars; create new shortcut menus; add new menu items (commands, submenus, or separator bars) to built-in or custom drop-down menus, shortcut menus, or submenus; and assign procedures to menu items. In addition, you can restore the built-in menu system to its default state at any time.</P>
<H3><A NAME="sec0"></A>Adding Custom Components or Modifying Built-in Components</H3><P CLASS="t">Microsoft Excel comes with a built-in menu system. You can modify components of this built-in system or create and modify custom menu components, using either the Menu Editor or Visual Basic.</P>
<P CLASS="t">Modifying a built-in menu bar, menu, or menu item is appropriate if you're adding or changing a small number of components. For example, if you just want to provide menu access to a macro, you can add a menu item to a built-in menu and then link the macro to that item.</P>
<P CLASS="t">If you need to make more extensive changes, it may be more appropriate to create a completely new component. For example, if you want to add several new drop-down menus, each containing several new menu items, it may be more appropriate to create an entirely new menu bar to contain the new menus.</P>
<H3><A NAME="sec1"></A>Using Submenus</H3><P CLASS="t">If your menus become crowded and difficult to scan, you can use submenus to organize them more effectively and add clarity to your application by reducing the amount of information presented to the user at any one time. For example, suppose you create a menu that presents a number of options, as shown in the following illustration.</P>
<P CLASS="a">    <img src="APG1204.gif"></P>
<P CLASS="t">Using submenus, you can present the same items in either of the following ways.</P>
<P CLASS="a">    <img src="APG1205.gif"></P>
<P CLASS="t">With submenus, the user can browse through commands that might otherwise be available only through a series of custom dialog boxes. However, if you need to create a complicated array of submenus to present a set of commands, a dialog box may in fact be a better solution.</P>
<H3><A NAME="sec2"></A>Using Shortcut Menus</H3><P CLASS="t">If you want to give the user access to a command that applies to the limited context of a selected object, you can add the command to the shortcut menu for that object.</P>
<H3><A NAME="sec3"></A>Making Changes While the Application Is Running</H3><P CLASS="t">In addition to making changes to the design of the menu system, you can also use Visual Basic to modify properties of menu components in response to conditions that change while the application is running. For example, you can display or hide a component, enable or disable a component, or add or remove a check mark next to a menu item.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Object Variables</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Object Variables</H2><P CLASS="t">In addition to storing values, a variable can store a reference to an object. You assign an object to a variable for the same reasons you assign any other value to a variable:</P>
<UL><LI>Variable names are often shorter and easier to remember than the values they contain (or, in this case, the objects they refer to).</LI><LI>Variables can be changed to refer to other objects while your code is running.</LI><LI>Referring to a variable that contains an object is more efficient than repeatedly referring to the object itself.</LI></UL><P></P>
<H3><A NAME="sec0"></A>Declaring Object Variables</H3><P CLASS="t">You declare an object variable the same way you declare other types of variables. For example, to declare the object variable mySheet, you could write the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim mySheet As Object
</FONT></PRE>
<P CLASS="t">This declaration uses the generic <B>Object</B> type specifier. Generic object variables are useful when you don't know the specific type of object the variable will contain, or when the variable must at different times contain objects from several different classes. For example, if you set mySheet to an object returned from the <B>Sheets</B> collection, it could be one of four classes: <B>Worksheet</B>, <B>Chart</B>, <B>Module</B>, or <B>DialogSheet</B>.</P>
<P CLASS="t">You can also declare an object variable using a specific class name, as shown in the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim mySheet As Worksheet
</FONT></PRE>
<P CLASS="t">In this example, if the code tries to set mySheet to an object other than a <B>Worksheet</B> object, a run-time error occurs (error 13, "Type mismatch"). You can see this by running the following <B>Sub</B> procedure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub ListSheetTypes()
    Dim mySheet As Worksheet
    For Each mySheet In ActiveWorkbook.Sheets
        MsgBox TypeName(mySheet)
    Next
End Sub
</FONT></PRE>
<P CLASS="t">The run-time error occurs when the <B>For Each...Next </B>loop tries to set mySheet to a member of the <B>Sheets</B> collection that's not a <B>Worksheet</B> object.</P>
<P CLASS="t">Declaring object variables as specific classes can help you find bugs in your code, because the run-time error indicates that the code is doing something other than what you expected.</P>
<H3><A NAME="sec1"></A>Assigning Object Variables</H3><P CLASS="t">You assign an object to an object variable using the <B>Set</B> statement.</P>
<P CLASS="syn"><B>Set</B> <I>variable</I> <B>=</B> <I>object</I></P>
<P CLASS="t">For example, the following code sets the object variable myRange to the object that refers to cell A1 on Sheet1.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Set myRange = Worksheets("Sheet1").Range("A1")
</FONT></PRE>
<P CLASS="t">You must use the <B>Set</B> statement whenever you want an object variable to refer to an object. If you forget the <B>Set</B> statement, several different errors can occur. For example, if you previously declared the object variable, a run-time error occurs (error 91, "Object variable not set") when you run the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim myRange As Object
myRange = Worksheets("Sheet1").Range("A1")    ' error 91 occurs here
</FONT></PRE>
<P CLASS="t">If you haven't previously declared the object variable, it will be a <B>Variant</B> variable by default. In this case, if you forget the <B>Set</B> statement, Visual Basic attempts to use the default property of the object to assign a value to the variable. For example, the following code causes Visual Basic to use the default property of the <B>Range</B> object (which is the <B>Value</B> property) to assign myRange the value of cell A1.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">myRange = Worksheets("Sheet1").Range("A1")    ' forgot the Set statement!</FONT></PRE>
<P CLASS="t">In this example, no error occurs in the line of code in which you forgot the <B>Set</B> statement. However, several different run-time errors can occur later, depending on how your code uses the variable myRange. The most common errors in this case will be error 424, "Object required" and error 13, "Type mismatch." When you see either of these errors, check your code for missing <B>Set</B> statements.</P></FONT>
</FONT></BODY></HTML>

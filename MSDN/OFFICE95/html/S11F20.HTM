<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Run Method</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec255"></A>Run Method</H1><P CLASS="t">  </P>
<H2><A NAME="sec256"></A>Description</H2><P>You can use the <B>Run</B> method to carry out a specified Microsoft Access or user-defined <B>Function</B> or <B>Sub</B> procedure. This method is useful when you are controlling Microsoft Access from another application through OLE Automation. For example, you can use the <B>Run</B> method from an OLE Automation controller to carry out a <B>Sub</B> procedure that is defined within a Microsoft Access database.</P>
<H2><A NAME="sec257"></A>Syntax</H2><P><I>application</I><B>.Run </B><I>procedure</I>[<I>, arg1, arg2, ..., arg30</I>]</P>
<P>The <B>Run</B> method uses the following arguments.</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="101pt" VALIGN="TOP"><COL WIDTH="272pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Argument</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>application</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The <B>Application</B> object.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>procedure</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The name of the <B>Function</B> or <B>Sub</B> procedure to be run.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>arg1, arg2, ...</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Optional. The arguments for the specified <B>Function</B> or <B>Sub</B> procedure. You can supply a maximum of thirty arguments.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec258"></A>Remarks</H2><P>You can set a reference to the Microsoft Access type library from any other OLE Automation controller and use the objects, methods, and properties defined in that library in your code. However, you can’t set a reference to an individual Microsoft Access database from any application other than Microsoft Access. The <B>Run</B> method provides a way to call a procedure you have defined in a Microsoft Access database from another application.</P>
<P>For example, suppose you have defined a procedure NewForm in a database named WizCode.mdb. The NewForm procedure takes a string argument. You can call NewForm in the following manner from Visual Basic 4.0.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim appAccess As New Access.Application.OpenCurrentDatabase ("C:\My Documents\WizCode.mdb").Run "WizCode.NewForm", "Some String"
</PRE>
<P CLASS="t">  </P>
<P>If another procedure with the same name may reside in a different database, qualify <I>procedure </I>with the name of the database in which the desired procedure resides.</P>
<P>You can also use the <B>Run</B> method to call a procedure in a referenced Microsoft Access database from another database. Although you can call a procedure in a referenced database as though it were in the current database, doing so loads the potential call tree of the module in the referenced database. For performance and resource reasons, you may want to use the <B>Run</B> method, which loads only the module in which the procedure resides.</P>
<P>Microsoft Access ignores any value returned by a procedure called by the <B>Run</B> method.</P>
<H2><A NAME="sec259"></A>Example</H2><P>The following example runs a user-defined <B>Sub</B> procedure in a module in a Microsoft Access database from another application that acts as an OLE Automation controller.</P>
<P>To try this example, create a new database called WizCode.mdb and open a new module in that database. Enter the following code, save the module, and close the database.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Sub Greeting(strName As String)
    MsgBox("Hello, " &amp; strName)Sub
</PRE>
<P CLASS="t">  </P>
<P>Once you have completed this step, run the following code from Microsoft Excel or Microsoft Visual Basic. Make sure that you have added a reference to the Microsoft Access type library by clicking References on the Tools menu and selecting Microsoft Access For Windows 95 in the References dialog box.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' Include in Declarations section of module.
' From Microsoft Excel, use "Dim appAccess As Object".appAccess As Access.Application
RunAccessSub()
    ' Create instance of Microsoft Access Application object.
    Set appAccess = CreateObject("Access.Application.7")
    ' Open WizCode database in Microsoft Access window.
    appAccess.OpenCurrentDatabase ("C:\My Documents\WizCode.mdb")
    ' Run Sub procedure.
    appAccess.Run "Greeting", "Joe"Sub
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P></FONT></FONT></BODY></HTML>

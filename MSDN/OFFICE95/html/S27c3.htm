<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Dynamic Dialog Boxes</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Using Dynamic Dialog Boxes</H2><P CLASS="t">A <I>dynamic</I> dialog box is one whose contents can change while it is displayed. Many dialog boxes built into Word are dynamic in this sense. For example, the Open dialog box (File menu) is a dynamic dialog box: If you double-click a folder, Word updates the list of files to show the files in the folder you double-clicked.</P>
<H3 CLASS="h3"><A NAME="sec0"></A>What Can You Do with a Dynamic Dialog Box?</H3><P CLASS="t">Here are some examples that demonstrate the capabilities of dynamic dialog boxes. The macros that produce the sample dialog boxes shown in this section are stored in the EXAMPLES.DOT template (Windows) and the MACRO EXAMPLES template (Macintosh) on the Microsoft Word Developer's Kit disk.</P>
<H4 CLASS="h6"><A NAME="sec1"></A>Change button names and other text</H4><P CLASS="h">It can be useful to change the names of buttons and other controls in a dialog box in response to an action. When you choose the Start button in the StopWatch custom dialog box shown in the following illustration, the Start button becomes the Stop button, and the Pause button is enabled. While the dialog box is displayed, the text label that displays the time is updated every second.</P>
<P></P>
<P CLASS="a">    <img src="ATR0521.gif"></P>
<P CLASS="t"></P>
<H4 CLASS="h6"><A NAME="sec2"></A>Update lists</H4><P CLASS="h">In a dynamic dialog box, the list of items in a list box can change in response to a user's actions. For example, in the File Browser custom dialog box, shown in the following illustration, the user can double-click a directory in the Directories list box, and the list of files and directories changes in the two list boxes.</P>
<P CLASS="a">    <img src="ATR0522.gif"></P>
<H4 CLASS="h6"><A NAME="sec3"></A>Show or hide parts of the dialog box</H4><P CLASS="h">You can create a dialog box with more than one "panel" of controls, in which one panel is displayed and one or more other panels are hidden. This sort of dialog box is similar to the dialog boxes built into Word that have "tabs" with which you can display different controls. In the Master Document Macro custom dialog box, you can click the Master Document or Subdocuments option buttons to display two different panels of controls.</P>
<P CLASS="a">    <img src="ATR0523.gif"></P>
<P CLASS="t"></P>
<H4 CLASS="h6"><A NAME="sec4"></A>Display a built-in dialog box</H4><P CLASS="h">It is sometimes useful to provide access from within a custom dialog box to a dialog box built into Word. In the Close File custom dialog box, shown in the following illustration, you can choose the Word Count button to check the word count of the file before closing it. When you dismiss the Word Count dialog box, you return to the Close File dialog box. Note that you cannot display a second custom dialog box while the Close File dialog box is displayed; only one custom dialog box can be displayed at a time.</P>
<P CLASS="a">    <img src="ATR0524.gif"></P>
<H4 CLASS="h6"><A NAME="sec5"></A>Enable and disable controls</H4><P CLASS="h">With a dynamic dialog box, you can enable and disable controls as appropriate. In the Add File custom dialog box shown in the following illustration, the Info To Record option buttons are disabled by default but are enabled if the user selects the Record Addition In Log check box.</P>
<P CLASS="a">    <img src="ATR0525.gif"></P>
<P CLASS="h"></P>
<H3 CLASS="h3"><A NAME="sec6"></A>How to Make a Dialog Box Dynamic</H3><P CLASS="t">A dynamic dialog box begins with a standard dialog box definition. You then add three elements to make the dialog box dynamic:</P>
<UL><LI>    A <I>dialog function</I>. The dialog function responds to events and changes the appearance of the dialog box. The dialog function, in short, is what makes a dialog box dynamic. All the instructions that are carried out while the dialog box is displayed are either placed within this function or in subroutines and user-defined functions called from this function.</LI><LI>    A dialog function argument in the <B>Begin Dialog </B>instruction that calls the dialog function.</LI><LI>    Identifiers for any dialog box controls that the dialog function acts on or gets information from. Most of the instructions in a custom dialog box definition already include identifiers for the controls they describe.</LI></UL><P></P>
<H4 CLASS="h4"><A NAME="sec7"></A>How a Dialog Function Works</H4><P CLASS="t">When Word reads the <B>Dialog</B> or <B>Dialog</B><B>()</B> instruction that displays the dialog box, it calls the dialog function and begins initializing the dialog box. Initialization happens between the time the dialog function is called and the time the dialog box appears on the screen. Word calls the dialog function and says, in effect, "Is there anything you'd like to do before the dialog box is displayed?" The dialog function can do nothing or can respond in some way.</P>
<P CLASS="t">Typical actions that a dialog function might take during initialization include disabling or hiding dialog box controls. By default, dialog box controls are enabled, so if you want a control to be disabled when a dialog box is first displayed, it must be disabled during initialization. Likewise, all dialog box controls are shown by default rather than hidden, so if you want to create a dialog box with more than one panel of controls, any controls that you don't want to show when the dialog box is first displayed must be hidden during initialization.</P>
<P CLASS="t">After initialization, Word displays the dialog box. When the user takes an action, such as selecting an option button, Word calls the dialog function and passes values to the function to indicate the kind of action taken and the control that was acted upon. For example, if the dialog box contains a list of graphics filenames, and you click one of the filenames, the dialog function will be called and could respond by displaying the selected graphics file in a picture control.</P>
<P CLASS="t">Word also calls the dialog function when the dialog box is "idle"&nbsp;—&nbsp;that is, while the user is not acting on the dialog box. In fact, as soon as the dialog box begins initializing and for as long as it is displayed, Word sends a continuous stream of idle messages to the dialog function&nbsp;—&nbsp;more than one a second. This stream is interrupted only when the user acts on the dialog box in some way. Most dialog functions are designed to ignore idle messages, but they can be used to continuously update a dialog box (as in the StopWatch custom dialog box example described earlier in this section).</P>
<P CLASS="a">    <img src="ATR0526.gif"></P>
<P CLASS="t"></P>
<H4 CLASS="h4"><A NAME="sec8"></A>Calling the Dialog Function</H4><P CLASS="t">The link between the dialog box and its function is established in the dialog box definition. Specifically, a <I>.FunctionName</I> argument is added to the <B>Begin Dialog</B> instruction, where <I>.FunctionName </I>matches the name of the dialog function. Here's the syntax for the instruction:</P>
<P CLASS="syn"><B>Begin Dialog UserDialog</B> [<I>HorizPos</I><B>,</B><I> VertPos</I><B>,</B>] <I>Width</I><B>,</B> <I>Height</I><B>,</B> <I>Title$</I><B>,</B> <B>.</B><I>FunctionName</I></P>
<H4 CLASS="h4"><A NAME="sec9"></A>Dialog Box Control Identifiers</H4><P CLASS="t">A dialog function needs an identifier for each dialog box control that it acts on or&nbsp;gets information from. Normally, the dialog function uses string identifiers, but it&nbsp;can also use numeric identifiers. For information on numeric identifiers, see "Numeric Identifiers," which follows.</P>
<P CLASS="t">String identifiers are the same as the identifiers used with a dialog record. If you&nbsp;use the Dialog Editor to create a dialog box, the Dialog Editor automatically creates&nbsp;an identifier for any control that can store a value in a dialog record. For example, in the following instruction, .CheckBox1 is the string identifier created by the Dialog Editor:</P>
<P CLASS="spacing"><BR></P>
<PRE>CheckBox 398, 24, 109, 16, "Check Box", .CheckBox1</PRE>
<P CLASS="t">Don't confuse a dialog box control's <I>label</I> and its identifier. An identifier begins with a period (.) and is the last argument in a dialog box control instruction. In the previous instruction, "Check Box" is a check box label and .CheckBox1 is its identifier.</P>
<P CLASS="t">Unlike other elements of WordBasic, string identifiers are <I>case-sensitive</I>. When an instruction in a dialog function refers to an identifier, it must match the case of the identifier.</P>
<H4 CLASS="h4"><A NAME="sec10"></A>Numeric Identifiers</H4><P CLASS="t">Numeric identifiers are an alternative way of referring to dialog box controls. You can use numeric identifiers to improve the performance of a dialog function when a dialog box contains many controls. But instructions that use numeric identifiers are more difficult to read than instructions that use string identifiers.</P>
<P CLASS="t">Numeric identifiers are numbers, starting at 0 (zero), that correspond to the positions of dialog box control instructions within a dialog box definition. The following example shows the numeric identifiers for four dialog box controls. Note that the numeric identifier is not included in the instruction for a dialog box control; the number associated with a control is determined by the control's place within the dialog box definition. If the position of the control changes, so does its numeric identifier. For example, in the following dialog box definition, the <B>Text</B> instruction is first and so has a numeric identifier of 0 (zero). If you moved the instruction so that it was the last one in the dialog box definition, it would have an&nbsp;identifier of 3 (assuming no new instructions were added).</P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 370, 92, "Fax Info"
    Text 14, 7, 96, 13, "Fax Number:"        'Numeric identifier is 0
    TextBox 14, 23, 160, 18, .Fax$            'Numeric identifier is 1
    OKButton 270, 6, 88, 21                    'Numeric identifier is 2
    CancelButton 270, 30, 88, 21                'Numeric identifier is 3
End Dialog
</PRE>
<H4 CLASS="h4"><A NAME="sec11"></A>Dialog Function Syntax</H4><P CLASS="t">A dialog function is just like any other user-defined function except that it takes three required arguments. The syntax is as follows:</P>
<P CLASS="syn"><B>Function </B><I>FunctionName</I><B>(</B><I>ControlID$</I><B>,</B><I> Action</I><B>,</B><I> SuppValue</I><B>)<BR>    </B><I>Series of instructions to determine a value</I><B><BR>    </B><I>FunctionName&nbsp;=&nbsp;value</I><B><BR>End Function</B></P>
<P CLASS="t">The function will generate an error if one of the three mandatory arguments&nbsp;—&nbsp;<I>ControlID$</I>, <I>Action</I>, and <I>SuppValue</I>&nbsp;—&nbsp;is missing or if an additional argument is added. The arguments are variables, however, and you can use any variable name you want. For example, you could use id$ instead of ControlID$ as the name for the first argument.</P>
<P CLASS="t">A dialog function returns a value when the user chooses a command button&nbsp;—&nbsp;the OK button, Cancel button, or a push button. Word acts on the value returned by either closing the dialog box associated with the function or continuing to display it. By default, the dialog function returns 0 (zero), which causes Word to close the dialog box, regardless of which button was chosen. But if you assign a nonzero value to the dialog function, the dialog box remains displayed. By keeping the dialog box displayed, the dialog function allows the user to carry out more than one command from the same dialog box. For examples, see "Responding to a Double-Click" and "Responding to a Push Button" later in this chapter.</P>
<P CLASS="t">The DialogFunctionDemo macro, stored in the EXAMPLES.DOT template (Windows) and the MACRO EXAMPLES template (Macintosh) on the Microsoft Word Developer's Kit disk, displays the values of the arguments passed to a dialog function while a custom dialog box is displayed. You may find this macro, along with the following discussion, a useful starting place when you begin to work with dialog functions.</P>
<P CLASS="t">Here is a closer look at each dialog function argument.</P>
<H5 CLASS="h6"><A NAME="sec12"></A><I>ControlID$</I></H5><P CLASS="h">Receives the identifier string of the dialog box control associated with a call to the dialog function. For example, if the user selects a check box, the dialog function is called and the <I>ControlID$</I> argument receives the identifier for the check box.</P>
<H5 CLASS="h6"><A NAME="sec13"></A><I>Action </I></H5><P CLASS="h">Identifies the action that calls the dialog function. There are six possible actions that can call the dialog function, each with a corresponding <I>Action</I> value.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="292pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B><I>Action </I>value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Meaning</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">1</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to dialog box initialization. This value is passed before the dialog box becomes visible.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">2</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to choosing a command button or changing the value of&nbsp;a dialog box control (with the exception of typing in a text box or combo box). When <I>Action</I> is 2, <I>ControlID$</I> corresponds to the identifier for the control that was chosen or changed.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">3</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to a change in a text box or combo box. This value is passed when a control loses the focus (for example, when the user presses the TAB key to move to a different control) or after the user clicks an item in the list of a combo box (an <I>Action</I> value of 2 is passed first). Note that if the contents of the text box or combo box do not change, an <I>Action</I> value of 3 is not passed. When <I>Action</I> is 3, <I>ControlID$</I> corresponds to the identifier for the text box or combo box whose contents were changed.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">4</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to a change of control focus. When <I>Action</I> is 4, <I>ControlID$</I> corresponds to the identifier of the control that is gaining the focus. <I>SuppValue</I> corresponds to the numeric identifier for the control that lost the focus. A dialog function cannot display a message box or dialog box in response to an <I>Action</I> value of 4.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="292pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B><I>Action </I>value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Meaning</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">5</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to an idle state. As soon as the dialog box is initialized, Word continuously passes an <I>Action</I> value of 5 while no other action occurs. If the dialog function responds to an <I>Action</I> value of 5, the dialog function should return a nonzero value. (If the dialog function returns 0 (zero), Word continues to send idle messages only when the mouse moves.) When <I>Action</I> is 5, <I>ControlID$</I> is an empty string (""); <I>SuppValue</I> corresponds to the number of times an <I>Action</I> value of 5 has been passed so far.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">6</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Corresponds to the user moving the dialog box. This value is passed only when screen updating is turned off (using a <B>ScreenUpdating</B> instruction). When screen updating is turned off and the user moves the dialog box, the screen is refreshed once. As a result, any changes that were made by the macro after screen updating was turned off will suddenly appear. A dialog function can prevent this problem by responding to an <I>Action</I> value of 6 and controlling what will be displayed when the screen refreshes. For example, if a new document (created after screen updating was turned off) deactivates the visible document, the dialog function could activate the visible document again. Note that Word does not refresh the screen until after an <I>Action</I> value of 6 has been passed and the dialog function has ended. When <I>Action</I> is 6, <I>ControlID$</I> is an empty string (""); <I>SuppValue</I> is equal to 0 (zero).</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H5 CLASS="h6"><A NAME="sec14"></A><I>SuppValue</I></H5><P CLASS="h">Receives supplemental information about a change in a dialog box control. The information <I>SuppValue</I> receives depends on which control calls the dialog function. The following <I>SuppValue</I> values are passed when <I>Action</I> is 2 or 3.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="256pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Control</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B><I>SuppValue</I> passed</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">List box, drop-down list box, or combo box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Number of the item selected, where 0 (zero) is the first item in the list box, 1 is the second item, and so on</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Check box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">1 if selected, 0 (zero) if cleared</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Option button</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Number of the option button selected, where 0 (zero) is the first option button within a group, 1 is the second option button, and so on</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Text box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Number of characters in the text box</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Combo box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">If <I>Action</I> is 3, number of characters in the combo box</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Command button</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A value identifying the button chosen. This value is not often&nbsp;used, since the same information is available from the <I>ControlID$</I> value. If the OK button is chosen, <I>SuppValue</I> is 1; if the Cancel button is chosen, <I>SuppValue</I> is 2. The <I>SuppValue</I> for push buttons is an internal number used by Word. This number is not the same as the numeric identifier for a push button, but it does change if the instruction that defines the push&nbsp;button changes position within the dialog box definition.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H4 CLASS="h4"><A NAME="sec15"></A>Dialog Functions and Variables</H4><P CLASS="t">Like variables in other user-defined functions, variables defined in a dialog function lose their values when the function ends. A dialog function is available for as long as a dialog box is displayed, so it's easy to imagine that variables in the dialog function last that long as well. But the dialog function is called not once but many times while the dialog box is displayed, and the dialog function's variables lose their values after each call. If you need variables used in a dialog function to last as long as  a dialog box is displayed, you must use the <B>Dim</B> statement to declare them as shared variables.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="sbrh"><B>Pressing ESC to Cancel a Dynamic Dialog Box</B></P>
<P CLASS="sbrt">Normally, you can press ESC to cancel a dialog box—to cancel any settings you might have changed and close the dialog box. If you press ESC while a dynamic dialog box is displayed, however, Word interrupts the macro. (In Windows, the dialog box remains displayed when the macro is interrupted; on the Macintosh, it disappears, but will reappear if you choose the Continue button on the Macro toolbar to continue running the macro.) You can include a <B>DisableInput</B> instruction to allow the ESC key to cancel a dynamic dialog box. The <B>DisableInput</B> instruction must run before the ESC key is pressed. If you only want to disable the macro-interrupting capability of the ESC key while the dynamic dialog box is displayed, a good strategy is to place a DisableInput 1 instruction immediately before the <B>Dialog</B><B>()</B> instruction that displays the dialog box and a DisableInput 0 instruction immediately after it. For example:</P>
<P CLASS="ct">DisableInput 1                'Prevent ESC key from interrupting</P>
<P CLASS="ct">choice = Dialog(dlg)            'Display dynamic dialog box</P>
<P CLASS="ct">DisableInput 0                'Allow ESC key to interrupt</P>
<P CLASS="ct"></P>
<P CLASS="sbrh"><B></B></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H3 CLASS="h3"><A NAME="sec16"></A>Dialog Function Techniques</H3><P CLASS="t">This section provides examples that demonstrates how to carry out common dialog function tasks. These examples use a set of WordBasic statements and functions used only within dialog functions. You can recognize these statements and functions in that they all begin with "Dlg." For example, <B>DlgEnable</B> and <B>DlgFocus</B> are two statements used only in dialog functions. For a complete list of these statements and functions, see "Statements and Functions Used in Dialog Functions" later in this chapter. The macros shown in this section are stored in the EXAMPLES.DOT template (Windows) and the MACRO EXAMPLES template (Macintosh) on the Microsoft Word Developer's Kit disk.</P>
<H4 CLASS="h4"><A NAME="sec17"></A>Responding to Clearing or Selecting a Check Box</H4><P CLASS="t">When the user selects or clears a check box, Word calls the dialog function. In the following example, a dialog function causes an option button group to be enabled or disabled when the user selects or clears the Record Addition In Log check box.</P>
<P CLASS="a">    <img src="ATR0527.gif"></P>
<P CLASS="t">Word passes these values to the dialog function when the user selects or clears a check box: an <I>Action</I> value of 2, a <I>ControlID$</I> value containing the identifier for the check box, and a <I>SuppValue</I> that indicates whether the check box is selected or cleared.</P>
<P CLASS="t">The following dialog function uses a <B>Select Case</B> control structure to check the value of <I>Action</I>. (The <I>SuppValue</I> is ignored in this function.) An <B>If</B> conditional then checks the value of the <I>ControlID$</I>. If the identifier is "RecordAddition"&nbsp;—&nbsp;the identifier assigned to the Record Addition In Log check box&nbsp;—&nbsp;<B>DlgEnable</B> either enables or disables the option buttons. Because the option buttons are disabled when the dialog box is first displayed and the check box is cleared, selecting the check box corresponds to enabling the option buttons.</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub MAIN
Begin Dialog UserDialog 376, 158, "Add File ", .EnableFunction
    Text 8, 10, 73, 13, "Filename:"
    TextBox 8, 26, 160, 18, .Filenametext
    CheckBox 8, 56, 203, 16, "Record Addition in Log", .RecordAddition
    GroupBox 8, 79, 356, 70, "Info to Record:", .Group
    OptionGroup  .InfoChoice
        OptionButton 18, 100, 189, 16, "Author Information", .Authorinf
        OptionButton 18, 118, 159, 16, "File History", .History
    OKButton 277, 8, 88, 21
    CancelButton 277, 32, 88, 21
End Dialog
Dim dlg As UserDialog
DisableInput 1
x = Dialog(dlg)
DisableInput 0
End Sub

Function EnableFunction(id$, action, suppval)
Select Case action
Case 1                                'Dialog box initializes
    DlgEnable "Group", 0                'Disable group box
    DlgEnable "InfoChoice", 0        'Disable option buttons
Case 2                                'User selects a dialog box option
    If id$&nbsp;=&nbsp;"RecordAddition" Then
        DlgEnable "Group"            'Enable/disable group box
        DlgEnable "InfoChoice"        'Enable/disable option buttons 
    End If
Case Else
End Select
End Function
</PRE>
<H4 CLASS="h4"><A NAME="sec18"></A>Responding to Selecting an Item in a List Box, Drop-Down List Box, or&nbsp;Combo Box</H4><P CLASS="t">Word calls the dialog function associated with a dialog box when the user selects an item in a list box, drop-down list box, or combo box. The dialog function can identify the item selected and act accordingly. In the following example, the dialog box presents a list of graphics and displays the graphic corresponding to the selected name. When the user selects a different name, the dialog function changes the graphics display.</P>
<P CLASS="a">    <img src="ATR0528.gif"></P>
<P CLASS="t">In the following dialog function, the <B>If</B> conditional tests for an <I>Action </I>value of 2, which indicates that the user has acted on a control. A nested <B>If</B> conditional then tests <I>ControlID$</I> to see if the user acted on the list box, which has the identifier "ListBox1." Then the <B>DlgText$</B><B>()</B> function is used to return the text of the item selected in the list box. The text is the name of a graphic stored in an AutoText entry, which the <B>DlgSetPicture</B> instruction then displays. The dialog box definition that defines the dialog box is not shown in this example.</P>
<P CLASS="spacing"><BR></P>
<PRE>Function ShowPicture(id$, action, suppval)
If action&nbsp;=&nbsp;2 Then     'The user selects a control
    If id$&nbsp;=&nbsp;"ListBox1" Then
        picturename$&nbsp;=&nbsp;DlgText$("ListBox1")
        DlgSetPicture "Picture1", picturename$, 1
    End If
End If
End Function
</PRE>
<H4 CLASS="h4"><A NAME="sec19"></A>Responding to a Double-Click</H4><P CLASS="t">In most built-in dialog boxes in Word, you can double-click an option button or an item in a list to close the dialog box and carry out the settings of the dialog box. Double-clicking is usually a shortcut for selecting an item and then choosing the OK button. Custom dialog boxes work this way by default.</P>
<P CLASS="t">In some Word dialog boxes, though, double-clicking an item in a list does not close the dialog box. For example, in the Open dialog box (File menu), when you double-click a folder, Word displays the files in that folder and does not close the dialog box. Using a dialog function, you can make a custom dialog box behave in the same way. The following example shows how a custom dialog box allows the same action.</P>
<P CLASS="a">    <img src="ATR0529.gif"></P>
<P CLASS="t">Here is the dialog function, with some instructions removed for clarity:</P>
<P CLASS="spacing"><BR></P>
<PRE>Function FileBrowserFunction(id$, action, suppval)
If action&nbsp;=&nbsp;2 Then
    If id$&nbsp;=&nbsp;"OK" And DlgFocus$()&nbsp;=&nbsp;"listdirs" Then
        'Series of instructions to update the directory and file lists
        FileBrowserFunction&nbsp;=&nbsp;1
    End If
End If
End Function
</PRE>
<P CLASS="t">The first <B>If</B> conditional tests for an <I>Action </I>value of 2, meaning that the user has acted on a control. The nested <B>If</B> conditional then tests for two conditions: when the <I>ControlID$</I> value is "OK" (the identifier for the OK button) and when the focus is on the Directories list box (whose identifier is "listdirs"). This compound condition is met only when the user double-clicks an item in the Directories list box (if the user clicks just once, the <I>ControlID$</I> is "listdirs" rather than "OK"). </P>
<P CLASS="t">The final key instruction is FileBrowserFunction&nbsp;=&nbsp;1. By default, when the user chooses a command button such as the OK button, Cancel button, or a push button, Word closes the dialog box. In this case, when the user double-clicks an item in a list box, it has the same effect. But a dialog box remains displayed if the&nbsp;dialog function returns a nonzero value; that is the purpose of the FileBrowserFunction&nbsp;=&nbsp;1 instruction.</P>
<P CLASS="t">The technique described here works not only with the OK button, but with any default command button specified with the <I>DefaultButton</I> argument of a <B>Dialog</B><B>()</B> instruction. The dialog box does not need to contain an OK button. For more information on setting a default command button, see "Displaying the Dialog Box" earlier in this chapter or <B>Dialog</B> in Part 2, "WordBasic Reference."</P>
<H4 CLASS="h4"><A NAME="sec20"></A>Responding to a Push Button</H4><P CLASS="t">In the following example, the user can choose the Word Count button to display the built-in Word Count dialog box; the Close File custom dialog box remains displayed and will be available when the user closes the Word Count dialog box. Note that you cannot display a second custom dialog box while the Close File dialog box is displayed; only one custom dialog box can be displayed at a time.</P>
<P CLASS="a">    <img src="ATR0530.gif"></P>
<P CLASS="t">Here is the dialog function, with some instructions removed for clarity. The key instruction that allows the Close File dialog box to remain displayed after the Word Count button is chosen is CloseFileFunction&nbsp;=&nbsp;1, which causes the dialog box to remain displayed.</P>
<P CLASS="spacing"><BR></P>
<PRE>Function CloseFileFunction(id$, action, suppval)
If action&nbsp;=&nbsp;2 Then
    If id$&nbsp;=&nbsp;"wordcount" Then
        'Series of instructions to display the Word Count dialog box
        CloseFileFunction&nbsp;=&nbsp;1
    End If
End If
End Function
</PRE>
<H4 CLASS="h4"><A NAME="sec21"></A>Responding to Typing in a Text Box or Combo Box</H4><P CLASS="t">After the user types in a text box or combo box and uses the mouse or the TAB key to move to a different dialog box control, Word calls the dialog function and passes the following values:</P>
<UL><LI>    A <I>ControlID$</I> value equal to the identifier of the text box or combo box</LI><LI>    An <I>Action</I> value of 3 (rather than 2, as with all the other controls)</LI><LI>    A <I>SuppValue</I> value indicating the number of characters the user typed</LI></UL><P></P>
<P CLASS="t">In the following example, the dialog function is called when the user leaves the first text box. If the user does not type a valid social security number, the dialog function displays a message box.</P>
<P CLASS="a">    <img src="ATR0531.gif"></P>
<P CLASS="t">Here is the dialog function:</P>
<P CLASS="spacing"><BR></P>
<PRE>Function TestNumber(id$, action, suppval)
    If action = 3 Then            
            If id$ = "socsecnum" And suppval &lt;&gt; 11 Then
                MsgBox "Not a valid " + Chr$(13) + \
                         "social security number."
                wrongnumberflag = 1
            End If
    ElseIf action = 4 Then        
            If wrongnumberflag = 1 Then
                DlgFocus "socsecnum"
                wrongnumberflag = 0
            End If
    End If
End Function
</PRE>
<P CLASS="t">Note that the function tests for <I>Action</I> values 3, corresponding to a text change, and 4, corresponding to a change of focus. When an <I>Action</I> 3 value is passed, the function uses the <I>SuppValue</I> argument to test the number of characters in the text box. If the number of characters doesn't correspond to the number required for a correct social security number, the dialog function displays a message box and sets the variable wrongnumberflag to 1. Immediately after the <I>Action</I> 3 value is passed, an <I>Action</I> value of 4 is passed. If wrongnumberflag is set to 1, the dialog function returns the focus to the social security text box and resets wrongnumberflag to 0 (zero). You cannot use the <B>DlgFocus</B> statement when <I>Action</I> has a value of 3, because the <I>Action</I> 4 value that follows overrides it, changing the focus back to wherever the user intended to move it. Hence the wrongnumberflag variable is needed to indicate whether the focus should be changed when the <I>Action</I> 4 value is passed.</P>
<H4 CLASS="h4"><A NAME="sec22"></A>Responding to a Change in the Focus</H4><P CLASS="t">Whenever the user moves the focus from one dialog box control to another, Word calls the dialog function and passes the following values:</P>
<UL><LI>    A <I>ControlID$</I> value equal to the identifier for the control that is gaining the focus</LI><LI>    An <I>Action</I> value of 4</LI><LI>    A <I>SuppValue</I> value corresponding to the numeric identifier for the control that lost the focus</LI></UL><P></P>
<P CLASS="t">In the following example, the dialog function changes the "banter" text (the text that appears at the bottom of the dialog box) according to which control has the focus. For example, when the focus is on the Phone Number text box, the dialog function changes the banter text to read "Please enter a phone number."</P>
<P CLASS="a">    <img src="ATR0532.gif"></P>
<P CLASS="t">The following instructions would be added to the <I>Action</I> 4 instructions in the TestNumber dialog function (shown in the previous example) to include the banter text functionality:</P>
<P CLASS="spacing"><BR></P>
<PRE>If id$&nbsp;=&nbsp;"socsecnum" Then
    DlgText$ "Text1", "Please enter a social security number."
ElseIf id$&nbsp;=&nbsp;"phone" Then
    DlgText$ "Text1", "Please enter a phone number."
End If
</PRE>
<H4 CLASS="h4"><A NAME="sec23"></A>Displaying More Than One Panel of Controls</H4><P CLASS="t">Dialog functions let you define more than one panel of controls in a dialog box. By organizing controls into panels, you can present a large number of controls in a single dialog box. This example shows a two-panel dialog box.</P>
<P CLASS="t">To create a two-panel dialog box, you use the Dialog Editor to design two separate dialog boxes corresponding to the two panels of the single dialog box; you then merge the two dialog box definitions into a single definition. When Word first displays the dialog box, one of the panels must be hidden; you'll have a mess if both panels are displayed at the same time.</P>
<P CLASS="t">When the dialog box in the following illustration is first displayed, it shows the Subdocuments controls, which means that the Master Document controls must be hidden while the dialog box is being initialized.</P>
<P CLASS="a">    <img src="ATR0533.gif"></P>
<P CLASS="t">To hide the controls in the Master Document panel, the dialog function calls a subroutine named ShowHidePanel:</P>
<P CLASS="spacing"><BR></P>
<PRE>Sub ShowHidePanel(FirstCtrl, LastCtrl, ShowOrHide)
For count = FirstCtrl To LastCtrl
    DlgVisible count, ShowOrHide
Next        
End Sub
</PRE>
<P CLASS="t">In this subroutine, a <B>For</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Next</B> loop and a <B>DlgVisible</B> instruction are used to show or hide controls in a panel. The instructions to define the Master Document controls are grouped together in the dialog box definition. They have the numeric identifiers 13 through 18 (the first Master Document control is the thirteenth instruction within the dialog box definition). The <B>For</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Next</B> loop counts from FirstCtrl to LastCtrl—13 to 18, in this case. For each iteration, the <B>DlgVisible</B> instruction shows or hides the control with the numeric identifier count. If the ShowOrHide variable is 1, <B>DlgVisible</B> shows the controls; if it is 0 (zero), <B>DlgVisible</B> hides them.</P>
<P CLASS="t">In Word version 6.0 for the Macintosh and Windows NT and in Word version 7.0, a single <B>DlgVisible</B> instruction can be used to show or hide a range of controls, so a separate subroutine such as ShowHidePanel is not needed. For example, to hide the Master Document controls in the preceding example, the dialog function would simply run the following instruction:</P>
<P CLASS="spacing"><BR></P>
<PRE>DlgVisible 13, 18, 0
</PRE>
<P CLASS="t">For more information, see <B>DlgVisible</B> in Part 2, "WordBasic Reference."</P>
<P CLASS="t">To switch panels while the dialog box is displayed, the dialog function must hide the panel of controls currently displayed and show the other panel. Here is the <B>If </B>conditional that checks which panel is selected. Note that Case 2 matches an <I>Action</I> value of 2, which indicates that the user has acted on a control.</P>
<P CLASS="spacing"><BR></P>
<PRE>Case 2
    If identifier$ = "masterdocs" Then
        ShowHidePanel 13, 18, 1            'Show master doc controls
        ShowHidePanel 7, 12, 0            'Hide subdoc controls
    ElseIf identifier$ = "subdocs" Then
        ShowHidePanel 13, 18, 0            'Hide master doc controls
        ShowHidePanel 7, 12, 1            'Show subdoc controls
    End If
</PRE>
<P CLASS="t">The <B>If</B> conditional calls the ShowHidePanel subroutine and uses it to show or hide the panels as appropriate.</P>
<P CLASS="t">Numeric identifiers and <B>For</B><FONT FACE="Symbol"><B>¼</B></FONT><B>Next</B> loops provide an efficient way to manipulate panels of controls. Since the numeric identifier of a control depends on its place within the dialog box definition, you must be careful about changing the order of instructions within the dialog box definition. </P>
<P CLASS="t">The wizards that come with Word use this technique to manage the panels of a wizard dialog box. For a detailed description of managing panels in wizards, see "Creating a Wizard" in Chapter 9, "More WordBasic Techniques."</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">Many Word dialog boxes with tabs "remember" which tab was selected when the dialog box was last closed. The theory is that the user is most likely to want to use the panel of controls that was last displayed. You can achieve this effect in WordBasic by storing the final dialog box setting in a settings file. For information on using settings files, see Chapter 9, "More WordBasic Techniques."</P>
<P></P>
<H4 CLASS="h4"><A NAME="sec24"></A>Updating Text Continuously in a Dialog Box</H4><P CLASS="t">You can use a dialog function to update a dialog box continuously. In the example shown and described here, the dialog function updates the text item displaying the time elapsed every second.</P>
<P CLASS="a">    <img src="ATR0534.gif"></P>
<P CLASS="t">Here is the dialog function, with all but one <B>Case </B>in the <B>Select Case </B>control structure removed for clarity:</P>
<P CLASS="spacing"><BR></P>
<PRE>Function Stopwatch(id$, action, suppval)
Select Case action
    Case 5
        If startflag&nbsp;=&nbsp;1 Then
            newnow&nbsp;=&nbsp;(Now() - oldnow)
            thissecond$&nbsp;=&nbsp;LTrim$(Str$(Second(newnow)))
                If thissecond$ &lt;&gt; thissecondold$ Then
                    thishour$&nbsp;=&nbsp;Str$(Hour(newnow))
                    thisminute$&nbsp;=&nbsp;LTrim$(Str$(Minute(newnow)))
                    fullstring$&nbsp;=&nbsp;thishour$ + ":" + thisminute$ + ":"\
                                     + thissecond$
                    DlgText$ "Text1", fullstring$
                    thissecondold$&nbsp;=&nbsp;thissecond$
                End If
        End If
        Stopwatch&nbsp;=&nbsp;1
    Case Else
End Select
End Function
</PRE>
<P CLASS="t">Word begins sending "idle" (<I>Action</I>&nbsp;5) messages to the dialog function as soon as&nbsp;the dialog box is initialized. As long as no other action takes place, Word continues sending this idle message until the dialog box is closed. However, the text should only update after the user chooses the Start button. Therefore, all the statements following Case 5 depend on whether startflag is equal to 1 (earlier in the dialog function, startflag is set to 1 when the user chooses the Start button); if startflag is not equal to 1, the text is not updated. </P>
<P CLASS="t">A second point to observe is that Word sends idle messages to the dialog function at the rate of more than one a second. If the text were updated each time it received the idle message, the text would be jittery. The second <B>If</B> conditional therefore tests whether the time has changed and only updates the text every second. Note that startflag and thissecondold$ must be declared as shared variables before the main subroutine; if they were not declared as shared variables, they would lose their value each time the dialog function was called.</P>
<H4 CLASS="h4"><A NAME="sec25"></A>Storing and Loading Dynamic Dialog Box Settings</H4><P CLASS="t">It's often useful to store a dialog box's settings when the user closes it and to load the settings the next time the dialog box is displayed so that the settings are the same as the ones the user last saw. For example, the dialog box for the Master Document macro, shown in the following illustration, contains a number of check boxes whose settings it would be useful to save.</P>
<P CLASS="a">    <img src="ATR0534A.gif"></P>
<P CLASS="t">In Windows, you use the <B>SetPrivateProfileString</B> and <B>GetPrivateProfileString$</B><B>()</B> instructions to store dialog box settings. For information on using these instructions, see "Using Settings Files and Document Variables" in Chapter 9, "More WordBasic Techniques." </P>
<P CLASS="t">On the Macintosh, you can use the <B>DlgStoreValues</B> and <B>DlgLoadValues</B><B>()</B> instructions to store and load settings. Unlike <B>SetPrivateProfileString</B> and <B>GetPrivateProfileString$</B><B>()</B>, which require a separate instruction for each setting stored or loaded, a single <B>DlgStoreValues</B> or <B>DlgLoadValues</B><B>()</B><B> </B>instruction can store or load all of the settings in a dialog box. For dialog boxes with a large number of settings to store and load, <B>DlgStoreValues</B> or <B>DlgLoadValues</B><B>()</B> offer a significant improvement in performance. <B>DlgStoreValues</B> and <B>DlgLoadValues</B><B>()</B> require a dialog function; if you want to use them with a dialog box that would not otherwise need a dialog function, you can simply create a dialog function just for these intstructions.</P>
<P CLASS="t">The following dialog function (with some instructions removed for clarity) shows how <B>DlgStoreValues</B> and <B>DlgLoadValues</B><B>()</B> can be used to store and load check-box settings:</P>
<P CLASS="spacing"><BR></P>
<PRE>Function MyDlgFunction(id$, action, suppval)
Select Case action
    Case 1
        success = DlgLoadValues("Dialog Settings", "MasterDocDialog")
    Case 2
        If id$ = "OK" Then 
            DlgStoreValues "Dialog Settings", "MasterDocDialog")
        End If
    Case Else
End Select
End Function
</PRE>
<P CLASS="t">The <B>DlgLoadValues</B><B>()</B> instruction runs when the dialog box is initialized (<I>Action</I> 1). The <B>DlgStoreValues</B> instruction runs when the the user closes the dialog box by choosing the OK button. Note that if the user closes the dialog box by choosing the Cancel button, the dialog box settings are not stored. By default, <B>DlgStoreValues</B> and <B>DlgLoadValues</B><B>()</B> store and load most dialog box settings, but you can also control whether or not individual settings are stored and loaded. For more information, see <B>DlgStoreValues</B> and <B>DlgLoadValues</B><B>()</B> in Part 2, "WordBasic Reference."</P>
<H3 CLASS="h3"><A NAME="sec26"></A>Statements and Functions Used in Dialog Functions</H3><P CLASS="t">WordBasic includes a set of statements and functions that are used only within dialog functions. The statements act on dialog box controls and the dialog functions return information about them. For example, you use the <B>DlgVisible</B> statement to hide or display a dialog box control; <B>DlgVisible</B><B>()</B> returns a value determined by whether the control is displayed or hidden.</P>
<P CLASS="t">For complete information on these statements and functions, see the corresponding entries in Part 2, "WordBasic Reference."</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="239pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Statement or function</B></P></FONT></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Action or result</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgControlId</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Returns the numeric equivalent of <I>Identifier$</I>, the string identifier for a dialog box control.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgEnable, DlgEnable</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgEnable </B>statement is used to enable or disable a dialog box control. When a control is disabled, it is visible in the dialog box, but is dimmed and not functional. <B>DlgEnable</B><B>()</B> is used to determine whether or not the control is enabled.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgFilePreview,<BR>DlgFilePreview$</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgFilePreview</B> statement is used to display a file in the file preview item. <B>DlgFilePreview$</B><B>()</B> returns the path and filename of the document displayed.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgFocus, DlgFocus$</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgFocus</B> statement is used to set the focus on a dialog box control. (When a dialog box control has the focus, it is highlighted.) <B>DlgFocus$</B><B>()</B> returns the identifier of the control that has the focus.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgListBoxArray, DlgListBoxArray</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgListBoxArray</B> statement is used to fill a list box or combo box with the elements of an array. It can be used to change the contents of a list box or combo box while the dialog box is displayed. <B>DlgListBoxArray</B><B>()</B> returns an item in an array and the number of items in the array.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgLoadValues</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Loads dialog box settings. Available on the Macintosh only.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgSetPicture</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Sets the graphic displayed in the <B>Picture</B> dialog box control.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgStoreValues</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Stores dialog box settings. Available on the Macintosh only.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgText, DlgText$</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgText </B>statement is used to set the text or text label for a dialog box control. The <B>DlgText$</B><B>()</B> function returns the text or label of a control.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgUpdateFilePreview</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Updates a file preview item.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgValue, DlgValue</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgValue</B> statement is used to select or clear a dialog box control. The <B>DlgValue</B><B>()</B> function returns the setting of a control.</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt"><B>DlgVisible, DlgVisible</B><B>()</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The <B>DlgVisible</B> statement is used to hide or show a dialog box control. The <B>DlgVisible</B><B>()</B> function is used to determine whether a control is visible or hidden.</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t"></P>
<P CLASS="t"></P></FONT></FONT></BODY></HTML>

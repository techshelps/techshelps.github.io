<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CodeContextObject Property</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec51"></A>CodeContextObject Property</H1><P CLASS="t">  </P>
<H2><A NAME="sec52"></A>Applies To</H2><P><B>Application</B> Object.</P>
<H2><A NAME="sec53"></A>Description</H2><P>You can use the <B>CodeContextObject</B> property to determine the object in which a macro or Visual Basic code is executing.</P>
<H2><A NAME="sec54"></A>Setting</H2><P>The <B>CodeContextObject</B> property is set by Microsoft Access and is read only.</P>
<H2><A NAME="sec55"></A>Remarks</H2><P>The <B>ActiveForm</B> and <B>ActiveReport</B> properties of the <B>Screen</B> object always return the object that currently has the focus. The object with the focus may or may not be the object where a macro or Visual Basic code is currently running, for example, when Visual Basic code runs in the Timer event on a hidden form. </P>
<H2><A NAME="sec56"></A>See Also</H2><P><B>ActiveForm</B> Property, <B>ActiveReport</B> Property, <B>Application</B> Object, <B>Me</B> Property, <B>Screen</B> Object.</P>
<H2><A NAME="sec57"></A>Example</H2><P>In this example the <B>CodeContextObject</B> property is used in a function to identify the name of the object in which an error occurred. The object name is then used in the message box title as well as in the body of the error message. The <B>Error</B> statement is used in the Command1_Click() event to generate the error for this example.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Private Sub Command1_Click()
    On Error GoTo Command1_Err
    Error 11            ' Generate divide by zero error.
    Exit Sub_Err:
    If ErrorMessage("Command1_Click() Event", vbYesNo + _
    vbInformation, Err) = vbYes Then 
        Exit Sub
    Else
        Resume
    End IfSub
ErrorMessage(strText As String, intType As Integer, _
        intErrVal As Integer) As Integer
    Dim objCurrent As Object
    Dim strMsgboxTitle As String
    Set objCurrent = CodeContextObject
    strMsgboxTitle = "Error in " &amp; objCurrent.Name
    strText = strText &amp; "Error #" &amp; intErrVal &amp; _
        " occurred in " &amp;     objCurrent.Name
    ErrorMessage = MsgBox(strText, intType, strMsgboxTitle)
    Err = 0Function
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

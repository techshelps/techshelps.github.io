<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Variables Without Declaring Them</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Variables Without Declaring Them</H2><P CLASS="t">Unless you specify otherwise, Visual Basic allows you to create variables simply by using them in your code (other programming languages, such as C and Pascal, require that you explicitly declare variables before you use them). The following example assigns the value of cell A1 to the variable tempVal.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">tempVal = Worksheets(1).Range("A1").Value
</FONT></PRE>
<P CLASS="t">This is called an <I>implicit</I> variable declaration. When you use this feature, Visual Basic automatically creates a variable and gives it the <B>Variant</B> data type. Variables with the <B>Variant</B> data type can contain any data, including strings, numbers, and dates. Until you assign a value to the new <B>Variant</B> variable, it has the special value <B>Empty</B>. As soon as you assign the <B>Variant</B> variable a value, it takes the data type of the assigned value. You'll learn more about <B>Variant</B> variables, data types, and the <B>Empty</B> value later in this chapter.</P>
<P CLASS="t">A <B>Variant</B> variable works well in this example because you may not know what kind of information cell A1 contains. Keep in mind that although it's convenient to allow Visual Basic to create variables whenever you use them, this can lead to subtle errors in your macro if you misspell a variable name, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub SwapCells()
    With Worksheets(1)
        tempVal = .Range("a1").Value
        .Range("a1").Value = .Range("a2").Value
        .Range("a2").Value = temVal
    End With
End Sub
</FONT></PRE>
<P CLASS="t">At first glance, it looks as if this procedure should swap the contents of cells A1 and A2, but if you look carefully, you'll see that the tempVal variable is misspelled the second time it's used. Visual Basic doesn't know that you made a mistake and assumes that you meant to introduce a new variable, temVal. Visual Basic creates this new (empty) variable and assigns the value of cell A2 to it. After you run this procedure, the value that was in cell A2 has been moved into cell A1, and cell A2 is empty.</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso8859-1">


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>#Const Directive</title>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H1>#Const Directive</h1>

<H2>Description</h2>

<p class="t">Used to define conditional compiler constants for
Visual Basic.</p>

<H2>Syntax</h2>

<p class="syn"><b>#Const</b> <i>constname</i> <b>=</b> <i>expression</i>The
<b>#Const</b> compiler directive syntax has these parts:</p>

<table border="0" width="75%">
    <tr>
        <td valign="top" width="20%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Part</b></td>
        <td valign="top" width="50%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top" width="20%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&nbsp;</td>
        <td valign="top" width="50%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top" width="20%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>constname</i></td>
        <td valign="top" width="50%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name of the constant follows
        standard variable naming conventions.</td>
    </tr>
    <tr>
        <td valign="top" width="20%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><i>expression</i></td>
        <td valign="top" width="50%">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Literal, other conditional
        compiler constant, or any combination that includes all
        arithmetic or logical operators except <b>Is</b>.</td>
    </tr>
</table>

<H2>Remarks</h2>

<p class="t">Conditional compiler constants are always <b>Private</b>
to the module in which they appear. It is not possible to create <b>Public</b>
compiler constants using the <b>#Const</b> directive. <b>Public</b>
compiler constants can only be created in the user interface.</p>

<p class="t">Only conditional compiler constants (and literals)
can be used in <i>expression</i>. Using a standard constant (a
constant defined with <b>Const</b>) or using a constant that is
undefined causes an error to occur. Conversely, constants defined
using the <b>#Const</b> keyword can&#146;t be used for anything
but conditional compilation.</p>

<p class="t">Conditional compiler constants are always evaluated
at the module level, regardless of their placement in code.</p>

<H2>See Also</h2>

<p class="t"><b>#If...Then...#Else</b> Directive, <b>Const</b>
Statement.</p>

<H2>Specifics (Microsoft Access)</h2>

<p class="t">In Microsoft Access, you can define a public
conditional compiler constant in the Declarations section of a
module. A public compiler constant is applicable to all modules
in the current database, but not in any other database.</p>

<p class="t">You can also declare a public compiler constant by
clicking Options on the Tools menu, then clicking the Module tab.
Enter the constant in the Conditional Compilation Arguments box.</p>

<p class="t">For example, you might enter the following
expression into the Conditional Compilation Arguments box.</p>

<p class="spacing"><br>
</p>

<pre>conDebug = 1</pre>

<p class="t">You can use a public compiler constant in code in
any module. For example, you can create an <b>#If...Then...#Else</b>
construct to optionally run debug code.</p>

<p class="spacing"><br>
</p>

<pre>#If conDebug = 1 Then
    .        ' Run debug code.
    .
    .
#Else
    .        ' Run streamlined code.
    .
    .
#End If</pre>

<p class="t">To create multiple public conditional compilation
constants, declare them on separate lines in the Declarations
section. In the Conditional Compilation Arguments box, separate
them with colons. For example, you can enter the following
conditional compilation constants in the Conditional Compilation
Arguments box.</p>

<p class="spacing"><br>
</p>

<pre>conActiveLanguage = 0 : conDebug = 1</pre>

<p class="t">Using a logical operator, you can include both
constants in an <b>#If...Then...#Else</b> construct. In the
following example, you can run the first segment of code only if
an expression containing both constants is true.</p>

<p class="spacing"><br>
</p>

<pre>#If (conActiveLanguage = 0 And conDebug = 1) Then
    .        ' Run debug code for the active language version.
    .
    .
#Else
    .        ' Run another code segment.
    .
    .
#End If
</pre>

<p class="nt"><b>Note</b> A conditional compilation constant is
always evaluated with a text-based string comparison method. This
evaluation is equivalent to having an <b>Option Compare Text</b>
statement in the module and occurs even if the module contains an
<b>Option Compare Database</b> statement.</p>

<p class="nt">When writing code for conditional compilation, it
may be less confusing to view one procedure at a time rather than
all procedures in the module. To change how you view your code,
click Options on the Tools menu, then click the Module tab. In
the Code View section, clear the Full Module View check box.</p>

<H2>Example</h2>

<p class="t">This example uses the <b>#Const</b> directive to
declare conditional compiler constants for use in<b>
#If...#Else...#End If</b> constructs.</p>

<p class="spacing"><br>
</p>

<pre>#Const DebugVersion = 1    ' Will evaluate true in #If block.
</pre>
</FONT></FONT></BODY>
</html>

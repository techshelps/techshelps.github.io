<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Source Property (Visual Basic)</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec596"></A>Source Property (Visual Basic)</H1><P CLASS="t">  </P>
<H2><A NAME="sec597"></A>Applies To</H2><P><B>Err</B> Object.</P>
<H2><A NAME="sec598"></A>Description</H2><P>Returns or sets the name of the object or application that originally generated the error.</P>
<H2><A NAME="sec599"></A>Syntax</H2><P><I>object</I><B>.Source </B>[<B>= </B><I>stringexpression</I>]</P>
<P>The <B>Source </B>property syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="110pt" VALIGN="TOP"><COL WIDTH="258pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>object</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Always the <B>Err</B> object.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>stringexpression</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">A string expression representing the application that generated the error.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec600"></A>Remarks</H2><P>The <B>Source</B> property specifies a string expression representing the object that originally generated the error; the expression is usually the object’s class name or programmatic ID. Use <B>Source</B> to provide your users with information when your code is unable to handle an error generated in an accessed object. For example, if you access Microsoft Excel and it generates a Division by zero error, Microsoft Excel sets <B>Err.Number</B> to its error code for that error and sets <B>Source</B> to Excel.Application. Note that if the error is generated in another object called by Microsoft Excel, Microsoft Excel intercepts the error and sets <B>Err.Number</B> to its own code for Division by zero. However, it leaves the other <B>Err </B>object properties (including <B>Source)</B> as set by the object that generated the error. <B>Source </B>always contains the name of the object that originally generated the error — your code can try to handle the error according to the error documentation of the object you accessed. If your error handler fails, you can use the <B>Err</B> object information to describe the error to your user, using <B>Source </B>and the other <B>Err </B>properties to inform the user which object originally caused the error, its description of the error, and so forth.</P>
<P>When generating an error from code, <B>Source</B> is your application’s programmatic ID. For OLE Automation class modules, <B>Source</B> should contain a name having the form <I>project</I><I>.</I><I>class</I>. Not all Visual Basic host applications can create OLE Automation objects. See your host application’s documentation to determine whether it can create classes and OLE Automation objects.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   The <B>On Error Resume Next</B> construct may be preferable to <B>On Error GoTo</B> when dealing with errors generated during access to other objects. Checking <B>Err</B> after each interaction with an object removes ambiguity about which object your code was accessing when the error occurred. Thus, you can be sure which object placed the error code in <B>Err.Number</B>, as well as which object originally generated the error (the one specified in <B>Err.Source</B>).</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec601"></A>See Also</H2><P><B>Description</B> Property, <B>Err</B> Object, <B>GetObject</B> Function, <B>HelpContext</B> Property, <B>HelpFile</B> Property, <B>LastDLLError</B> Property, <B>Number</B> Property, <B>On Error</B> Statement.</P>
<H2><A NAME="sec602"></A>Example</H2><P>This example assigns the Programmatic ID of an OLE Automation object created in Visual Basic to the variable MyObjectID, then assigns that to the <B>Source</B> property of the <B>Err</B> object when it generates an error with the <B>Raise</B> method. When handling errors, you should not use the <B>Source </B>property (or any <B>Err </B>properties other than <B>Number</B>) programatically. The only valid use of properties other than <B>Number</B> is for displaying rich information to an end user in cases where you cannot handle an error.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' An object of type MyClass generates an error and fills all Err object
' properties, including Source, which receives MyObjectID, which is a
' combination of the Title property of the App object and the Name
' property of the MyClass object.= App.Title &amp; "." &amp; MyClass.Name.Raise Number := vbObjectError + 894, Source := MyObjectID, _
    Description := "Was not able to complete your task", _
    HelpFile := MyHelpFile, HelpContext := MyHelpContext</PRE>
<P CLASS="t">  </P>
<P></P>
<P CLASS="t"> </P></FONT></FONT></BODY></html>

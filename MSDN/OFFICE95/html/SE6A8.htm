<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLRetrieveToFile Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>SQLRetrieveToFile Function</H1><P CLASS="h"><B>Description</B></P>
<P CLASS="t">In Microsoft Excel for Windows 95, do not use <B>SQLRetrieveToFile</B> and the other ODBC functions in the XLODBC.XLA add-in; use the objects, methods, and properties in the Data Access Objects (DAO) library instead. </P>
<P CLASS="t"><B>SQLRetrieveToFile</B> retrieves all of the results from a previously executed query and places them in a file.</P>
<P CLASS="t">To use this function you must have established a connection with a data source using <B>SQLOpen</B>, executed a query using <B>SQLExecQuery</B>, and have the results of the query pending.</P>
<P CLASS="t">This function is contained in the XLODBC.XLA add-in (ODBC Add-In on the Macintosh). Before you use the function, you must establish a reference to the add-in using the References command (Tools menu).</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><B>SQLRetrieveToFile</B>(<B><I>connectionNum, destination, colNamesLogical, columnDelimiter</I></B>)</P>
<P CLASS="term1"><B><I>connectionNum </I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. The unique connection ID returned by <B>SQLOpen</B> and for which you have pending query results generated by <B>SQLExecQuery</B>.</P>
<P CLASS="dt1">If <B><I>connectionNum</I></B> is not valid, <B>SQLExecQuery</B> returns Error 2015.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>destination</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. A string that specifies the name and path of the file where you want to place the results. If the file exists, its contents are replaced with the query results. If the file does not exist, <B>SQLRetrieveToFile</B> creates and opens the file and fills it with the results.</P>
<P CLASS="dt1">The format of the data in the file is compatible with the Microsoft Excel .CSV (comma-separated value) file format.</P>
<P CLASS="dt1">Columns are separated by the character specified by <B><I>columnDelimiter</I></B>, and the individual rows are separated by a carriage return.</P>
<P CLASS="dt1">If the file specified by <B><I>destination</I></B> cannot be opened, <B>SQLRetrieveToFile</B> returns Error 2042.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>colNamesLogical </I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. <B>True</B> if you want the column names to be returned as the first row of data. <B>False</B> or omitted if you do not want the column names returned.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>columnDelimiter</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. A string that specifies the character used to separate the elements in each row. For example, use "," to specify a comma delimiter or ";" to specify a semicolon delimiter. If you omit <B><I>columnDelimiter</I></B>, the list separator character is used.</P>
</BLOCKQUOTE>
<P CLASS="h"><B>Return Value</B></P>
<P CLASS="t">If successful, <B>SQLRetrieveToFile</B> returns the query results, writes them to a file, and then returns the number of rows that were written to the file.</P>
<P CLASS="t">If <B>SQLRetrieveToFile</B> is unable to retrieve the results, it returns Error 2042, and does not write the file.</P>
<P CLASS="t">If there are no pending results on the connection, <B>SQLRetrieveToFile</B> returns Error 2042.</P>
<P CLASS="h"><B>Remarks</B></P>
<P CLASS="t">Before calling <B>SQLRetrieveToFile</B>, you must do the following:</P>
<P CLASS="ls">    1.    Establish a connection with a data source using <B>SQLOpen</B>.</P>
<P CLASS="ls">    2.    Use the connection ID returned by <B>SQLOpen</B> to send a query with <B>SQLExecQuery</B>.</P>
<P></P>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>SQLBind</B> Function, <B>SQLClose</B> Function, <B>SQLError</B> Function, <B>SQLExecQuery</B> Function, <B>SQLGetSchema</B> Function, <B>SQLOpen</B> Function, <B>SQLRequest</B> Function, <B>SQLRetrieve</B> Function.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example runs a query on the NWind sample database. The result of the query, which is a list of all products that are currently on order, is written as a delimited text file, OUTPUT.TXT, in the current directory or folder.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">If Application.OperatingSystem Like "*Win*" Then
    databaseName = "NWind"
Else        'Macintosh
    databaseName = "NorthWind"
End If
queryString = "SELECT * FROM product.dbf WHERE (product.ON_ORDER&lt;&gt;0)"
chan = SQLOpen("DSN=" &amp; databaseName)
SQLExecQuery chan, queryString
SQLRetrieveToFile chan, "OUTPUT.TXT", True
SQLClose chan
</FONT></PRE></FONT>
</FONT></BODY></HTML>

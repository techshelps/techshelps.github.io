<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ValidationRule, ValidationText Properties</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1>ValidationRule, ValidationText Properties</H1><P CLASS="t">  </P>
<H2>Applies To</H2><P CLASS="t">Check Box Control, Combo Box Control, List Box Control, Option Button Control, Option Group Control, Table Fields, Text Box Control, Toggle Button Control.</P>
<H2>Description</H2><P CLASS="t">You can use the <B>ValidationRule</B> property to specify requirements for data entered into a field or control. When data is entered that violates the <B>ValidationRule</B> setting, you can specify the message to be displayed to the user by setting the <B>ValidationText</B> property.</P>
<P CLASS="t">  </P>
<P CLASS="nt"><B>Note</B>   The <B>ValidationRule</B> and <B>ValidationText</B> properties do not apply to check box, option button, or toggle button controls when they are in an option group. They apply only to the option group itself.</P>
<P CLASS="t">  </P>
<H2>Setting</H2><P CLASS="t">Enter an expression for the <B>ValidationRule</B> property setting and text for the <B>ValidationText</B> property setting. The maximum length for each property setting is 255 characters.</P>
<P CLASS="t">For controls, you can set the property to any valid expression. For field and record validation rules, the expression can’t contain user-defined functions, domain or aggregate functions, the <B>CurrentUser</B> or <B>Eval</B> function, or references to forms, queries, or tables. In addition, field validation rules can’t contain references to other fields. For records, expressions can include references to fields in that table.</P>
<P CLASS="t">You can set the <B>ValidationRule</B> and <B>ValidationText</B> properties in:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    The lower portion of table Design view (for a field validation rule).</LI><LI><SPAN CLASS="Symbol"></SPAN>    The property sheet for a table (for a record validation rule).</LI><LI><SPAN CLASS="Symbol"></SPAN>    The property sheet for a control on a form.</LI><LI><SPAN CLASS="Symbol"></SPAN>    A macro or Visual Basic. In Visual Basic, use a string expression to set these properties.</LI></UL></SPAN><P CLASS="t">  </P>
<P CLASS="nt"><B>Note</B>   For table fields and records, you can also set these properties in Visual Basic by using the Data Access Objects <B>ValidationRule</B> property.</P>
<P CLASS="t">  </P>
<H2>Remarks</H2><P CLASS="t">Microsoft Access automatically validates values based on a field’s data type; for example Microsoft Access doesn’t allow text in a numeric field. You can set more specific rules using the <B>ValidationRule</B> property.</P>
<P CLASS="t">If you set the <B>ValidationRule</B> property but not the <B>ValidationText</B> property, Microsoft Access displays a standard error message when the validation rule is violated. If you set the <B>ValidationText</B> property, the text you enter is displayed as the error message.</P>
<P CLASS="t">For example, when a record is added for a new employee, you can enter a <B>ValidationRule</B> property requiring that the employee Start Date field fall between the company’s founding date and the current date. If the date entered isn’t in this range, you can display the <B>ValidationText</B> property message: “Start date is incorrect.”</P>
<P CLASS="t">If you create a control by dragging a field from the field list, the field’s validation rule remains in effect, although it isn’t displayed in the control’s <B>ValidationRule</B> property box in the property sheet. This is because a field’s validation rule is inherited by a control bound to that field.</P>
<P CLASS="t">Control, field, and record validation rules are applied as follows:</P>
<SPAN CLASS="list"><UL><LI><SPAN CLASS="Symbol"></SPAN>    Validation rules you set for fields and controls are applied when you edit the data and the focus leaves the field or control.</LI><LI><SPAN CLASS="Symbol"></SPAN>    Validation rules for records are applied when you move to another record.</LI><LI><SPAN CLASS="Symbol"></SPAN>    If you create validation rules for both a field and a control bound to the field, both validation rules are applied when you edit data and the focus leaves the control.</LI></UL></SPAN><P CLASS="t">The following table contains expression examples for the <B>ValidationRule</B> and <B>ValidationText</B> properties.</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="214pt" VALIGN="TOP"><COL WIDTH="153pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ValidationRule property</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>ValidationText property</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">&lt;&gt; 0</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Entry must be a non-zero value.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">&gt; 1000 Or Is Null </P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Entry must be blank or greater than 1000.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Like "A???? "</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Entry must be 5 characters and begin with the letter A.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">&gt;= #1/1/95# And &lt;#1/1/96#</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Entry must be a date in 1995.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">DLookup("[CustomerID] ", "Customers", " [CustomerID] = Forms![Customers]![CustomerID] ") Is Null</P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Entry must be unique CustomerID (form-level validation only).</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">If you create a validation rule for a field, Microsoft Access doesn’t normally allow a <B>Null</B> value to be stored in the field. If you want to allow a <B>Null</B> value, add <B>Is Null</B> to the validation rule, as in “&lt;&gt; 8 Or Is Null”.</P>
<P CLASS="t">You can’t set field or record validation rules for tables created outside Microsoft Access (for example, dBASE, Paradox, and SQL Server). For these kinds of tables, you can create validation rules for controls only.</P>
<H2>See Also</H2><P CLASS="t"><B>AllowZeroLength</B> Property; <B>Required</B> Property; <B>ValidationRule</B>, <B>ValidationText</B> Properties (<I>Microsoft Office 95 Data Access Reference</I>).</P>
<H2>Example</H2><P CLASS="t">The following example creates a validation rule for a Field that allows only values over 65 to be entered. If a number less than 65 is entered, a message is displayed. The properties are set using the SetFieldValidation function.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim strTblName As String, strFldName As StringstrValidRule As String, strValidText As String, intX As Integer= "Customers"= "Age"= "&gt;= 65"= "Enter a number greater than or equal to 65."= SetFieldValidation(strTblName, strFldName, _
    strValidRule, strValidText)
SetFieldValidation(strTblName As String, _
        strFldName As String, strValidRule As String, _
        strValidText As String) As Integer
    Dim db As Database, td As TableDef, fld As Field
    Set db = CurrentDb
    Set td = db.TableDefs(strTblName)
    Set fld = td.Fields(strFldName)
    fld.ValidationRule = strValidRule
    fld.ValidationText = strValidTextFunction</PRE>
<P CLASS="t">  </P>
<P CLASS="t">The next example uses the SetTableValidation function to set record level validation to ensure that the value in the EndDate field comes after the value in the StartDate field.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim strTblName As String, strValidRule As StringstrValidText As StringintX As Integer= "Employees"= "EndDate &gt; StartDate"= "Enter an EndDate that is later than the StartDate."= SetTableValidation(strTblName, strValidRule, strValidText)
SetTableValidation(strTblName As String, _
        strValidRule As String, strValidText As String) As Integer
    Dim db As Database, td As TableDef
    Set db = CurrentDb
    Set td = db.TableDefs(strTblName)
    td.ValidationRule = strValidRule
    td.ValidationText = strValidTextFunction
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P></FONT></FONT></BODY></html>

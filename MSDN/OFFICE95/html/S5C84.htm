<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structuring a Visual Basic Program</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Structuring a Visual Basic Program</H1><P CLASS="t">One of the goals in modern programming is to produce <I>modular</I> programs — that&nbsp;is, programs composed of small, discrete units of code, each of which acts independently to accomplish a particular task. Toward this end, Visual Basic enables you to organize your code into procedures, modules, and workbooks.</P>
<P CLASS="t">A program built from small, reliable components has many advantages over a program built as a single structure. Well-structured modular programs are:</P>
<UL><LI>Easy to write, because complex problems are broken down into a series of discrete, easy-to-understand tasks.</LI><LI>Easy to read, because a top-level procedure typically contains only a series of calls to descriptively named lower-level procedures.</LI><LI>Easy to debug, because each task is accomplished in one procedure, and you can easily isolate the source of a problem.</LI><LI>Efficient, because code that accomplishes a common task appears in only one procedure that's called many times, rather than being duplicated in many places throughout a program.</LI><LI>Easy to modify, because code that accomplishes a specific task appears in only one place in a program. Therefore, if you need to modify this code, you need only make the change in one place.</LI><LI>Reliable, because you can build up a library of dependable procedures and then construct your programs using these tested, proven components.</LI><LI>Robust, because you can hide data from all parts of a program that don't require access to the data, and thereby reduce the risk of accidentally making changes to the data.</LI><LI>Easy to manage and distribute, because you can store and distribute sets of related or frequently used procedures as a unit.</LI></UL><P></P>
<P CLASS="t">The rest of this chapter will describe how to organize your code into these components and how to control the interaction among procedures stored in different parts of a program.</P></FONT>
</FONT></BODY></HTML>

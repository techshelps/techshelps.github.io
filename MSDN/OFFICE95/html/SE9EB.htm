<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Macro Recorder to Build an Expression</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using the Macro Recorder to Build an Expression</H2><P CLASS="t">The macro recorder is probably the best way to learn how to build expressions that return objects. The recorder is especially useful when you work with the complex object hierarchies of charts, charts embedded on worksheets, and PivotTables&reg;. Use the macro recorder to build an expression that contains the properties and methods you need, and then modify the expression if necessary.</P>
<P CLASS="t">For example, suppose that you need help building an expression that changes the font style and font size for the title of a chart. You don't remember the object model, so you use the recorder to produce the following code.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub Macro1()
    ActiveChart.ChartTitle.Select
    With Selection.Font
        .Name = "Times New Roman"
        .FontStyle = "Bold"
        .Size = 24
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlNone
        .ColorIndex = xlAutomatic
        .Background = xlAutomatic
    End With
End Sub
</FONT></PRE>
<P CLASS="t">The recorder navigated the object model for you, recording the accessors for the <B>Chart</B>, <B>ChartTitle</B>, and <B>Font</B> objects. You can now modify the recorded code to:</P>
<UL><LI>Change the <B>ActiveChart</B> property to the <B>Charts</B> method and use a chart name as the argument. This allows you to run the macro from any sheet in the workbook, not just from the chart sheet.</LI><LI>Remove the selection-based code. You don't need the <B>Select</B> method or the <B>Selection</B> property. You also need to move the <B>With</B> keyword after you make this change.</LI><LI>Remove the properties of the <B>Font</B> object that the macro should not change (it should change only the <B>FontStyle</B> property and the <B>Size</B> property; it should not change any other property).</LI><LI>Change the procedure name.</LI></UL><P></P>
<P CLASS="t">The following example shows the code after modification.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub FormatChartTitle()
    With Charts("Chart1").ChartTitle.Font
        .FontStyle = "Bold"
        .Size = 24
    End With
End Sub
</FONT></PRE>
<P CLASS="t">When you record actions on cells and ranges, be sure to record using relative references (on the Tools menu, point to Record Macro, and then click Use Relative References). This ensures that the recorded code contains offsets to cells instead of absolute references to cells, which makes the code more general and more easily adaptable to your specific requirements.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Conversion Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Conversion Functions</H2><P CLASS="t">Visual Basic provides several functions that convert data from one type to another using locale settings. However, some functions aren't locale-aware. Whenever possible, use the locale-aware functions to make your code transportable. This is especially important when you're converting strings to numbers or dates.</P>
<P CLASS="t">For example, the <B>Str</B> and <B>Val</B> functions always assume that a period is the decimal separator, but <B>CStr</B>, <B>CDbl</B>, <B>CSng</B>, <B>CInt</B>, and <B>CLng</B> use the current operating system settings to determine the decimal separator.</P>
<H3><A NAME="sec0"></A>Special Considerations for Dates</H3><P CLASS="t">Never type dates as strings in your code, because date formats aren't the same in every country. Even locale-aware conversion functions can process strings in ways you might not expect. For example, the following code behaves differently in different locales.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">StartDate = "2/3/95"
NewDate = CDate(StartDate)
</FONT></PRE>
<P CLASS="t">When run in an English/United States locale, NewDate contains a value equivalent to February 3, 1995; in an English/Australia locale, NewDate contains a value equivalent to March 2, 1995. This behavior is a potential source of error when you're programming, but it's very useful for processing user input from a dialog box. <B>CDate</B> converts the user's text into the date that the user intends.</P>
<P CLASS="t">However, as the programmer, you should always code dates as literals — such as <B>#2/3/95#</B> — so that Visual Basic recognizes the exact date you intend. For example, in the following code, NewDate contains a value equivalent to either February 3, 1995, or March 2, 1995, depending on the locale of the programmer, but not the locale of the user. The date is the same for all users wherever the code is run.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">StartDate = #2/3/95#
NewDate = CDate(StartDate)
</FONT></PRE>
<P CLASS="t">The date literal is interpreted in the context of the programmer's locale.</P>
<H3><A NAME="sec1"></A>Special Considerations for Currencies</H3><P CLASS="t">Similarly, never store a currency value as a string that includes a currency symbol, because the currency symbol varies according to locale. For example, the following code doesn't run in any locale except those where the dollar sign ($) is the currency symbol.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Money = "$1.22"
NewMoney = CCur(Money)</FONT></PRE>
<P CLASS="t">Instead, store a currency value as a decimal number, as shown in the following example. (This example assumes that the period is the decimal separator in the programmer's locale, but the code runs correctly no matter what the decimal separator is in the user's locale.)</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Money = 1.22
NewMoney = CCur(Money)
</FONT></PRE></FONT>
</FONT></BODY></HTML>

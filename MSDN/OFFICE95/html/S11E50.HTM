<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReDim Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec47"></A>ReDim Statement</H1><P CLASS="t">  </P>
<H2><A NAME="sec48"></A>Description</H2><P>Used at procedure level to declare dynamic-array variables and allocate or reallocate storage space.</P>
<H2><A NAME="sec49"></A>Syntax</H2><P><B>ReDim</B> [<B>Preserve</B>] <I>varname</I><B>(</B><I>subscripts</I><B>) </B>[<B>As</B> <I>type</I>][<B>, </B><I>varname</I><B>(</B><I>subscripts</I><B>) </B>[<B>As</B><I>type</I>]] <B>. . .</B></P>
<P>The <B>ReDim</B> statement syntax has these parts:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Preserve</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Preserves the data in an existing array when you change the size of the last dimension.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>varname</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the variable; follows standard variable naming conventions.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Part</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>subscripts</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <I>subscripts</I> argument uses the following syntax:</P>
<P CLASS="t">[<I>lower</I> <B>To</B>] <I>upper</I>[,[<I>lower</I> <B>To</B>] <I>upper</I>] . . .</P>
<P CLASS="t">When not explicitly stated in <I>lower</I>, the lower bound of an array is controlled by the <B>Option</B> <B>Base</B> statement. The lower bound is zero if no <B>Option</B> <B>Base</B> statement is present.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><I>type</I></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Data type of the variable; may be <B>Byte</B>, <B>Boolean</B>, <B>Integer</B>, <B>Long</B>, <B>Currency</B>, <B>Single</B>, <B>Double</B>, <B>Date</B>, <B>String </B>(for variable-length strings), <B>String</B> * <I>length </I>(for fixed-length strings), <B>Object</B>, <B>Variant</B>, a user-defined type, or an object type. Use a separate <B>As</B> <I>type</I> clause for each variable being defined. For a <B>Variant</B> containing an array, <I>type</I> describes the type of each element of the array, but does not change the <B>Variant</B> to some other type.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2><A NAME="sec50"></A>Remarks</H2><P>The <B>ReDim</B> statement is usually used to size or resize a dynamic array that has already been formally declared using a <B>Private</B>, <B>Public</B>, or <B>Dim</B> statement with empty parentheses (without dimension subscripts).</P>
<P>You can use the <B>ReDim</B> statement repeatedly to change the number of elements and dimensions in an array. However, you can’t declare an array of one data type and later use <B>ReDim</B> to change the array to another data type, unless the array is contained in a <B>Variant</B>. If the array is contained in a <B>Variant</B>, the type of the elements can be changed using an <B>As</B> <I>type</I> clause.</P>
<P>If you use the <B>Preserve</B> keyword, you can resize only the last array dimension and you can’t change the number of dimensions at all. For example, if your array has only one dimension, you can resize that dimension because it is the last and only dimension. However, if your array has two or more dimensions you can change the size of only the last dimension and still preserve the contents of the array. The following example shows how you can increase the size of the last dimension of a dynamic array without erasing any existing data contained in the array.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>ReDim X(10, 10, 10)
. . .Preserve X(10, 10, 15)
</PRE>
<P CLASS="t">  </P>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P><B>Caution</B>   If you make an array smaller than it was, data in the eliminated elements will be lost.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P>When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string, and a fixed-length string is filled with zeros. <B>Variant</B> variables are initialized to <B>Empty</B>. Each element of a user-defined type variable is initialized as if it were a separate variable. A variable thatrefers to an object must be assigned an existing object using the <B>Set</B> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <B>Nothing</B>, which indicates that it does not refer to any particular instance of an object.</P>
<P></P>
<P CLASS="t">  </P>
<P><B>Note</B>   To resize an array contained in a <B>Variant</B>, you must explicitly declare the <B>Variant</B> variable before attempting to resize its array.</P>
<P CLASS="t">  </P>
<P></P>
<H2><A NAME="sec51"></A>See Also</H2><P><B>Array</B> Function, <B>Dim</B> Statement, <B>Option Base</B> Statement, <B>Private</B> Statement, <B>Public</B> Statement, <B>Set</B> Statement, <B>Static</B> Statement.</P>
<H2><A NAME="sec52"></A>Example</H2><P>This example uses the <B>ReDim</B> statement to allocate and reallocate storage space for dynamic-array variables. It assumes the <B>Option Base </B>is <B>1</B>.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>Dim MyArray() As Integer    ' Declare dynamic array.MyArray(5)    ' Allocate 5 elements.I = 1 To 5    ' Loop 5 times.
    MyArray(I) = I    ' Initialize array.I
</PRE>
<P CLASS="t">  </P>
<P>The next statement resizes the array and erases the elements.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>ReDim MyArray(10)    ' Resize to 10 elements.I = 1 To 10    ' Loop 10 times.
    MyArray(I) = I    ' Initialize array.I
</PRE>
<P CLASS="t">  </P>
<P>The following statement resizes the array but does not erase elements.</P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>ReDim Preserve MyArray(15)            ' Resize to 15 elements.
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

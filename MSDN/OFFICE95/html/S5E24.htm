<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User-Defined Data Types</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>User-Defined Data Types</H2><P CLASS="t">You can combine variables of several different data types to create user-defined data types (known as <I>structures</I> in the C programming language). A user-defined type is useful when you want to create a single variable that records several related pieces of information. The user-defined type encapsulates the information and makes it easier to process; for example, you can pass the entire structure to a procedure or assign all the values at once by assigning one variable to another if they're both of the same user-defined type.</P>
<P></P>
<P CLASS="nh"><B>Tip</B></P>
<P CLASS="nt">Because the <B>Variant</B> data type can store many different types of data, a <B>Variant</B> array can be used in many situations where you might expect to use a user-defined type. A <B>Variant</B> array is actually more flexible than a user-defined type because you can change the type of data you store in each element at any time, and you can make the array dynamic so that you can change its size as necessary. However, a <B>Variant</B> array always uses more memory than an equivalent user-defined type.</P>
<P></P>
<H3><A NAME="sec0"></A>Declaring a User-Defined Data Type</H3><P CLASS="t">You create a user-defined type using the <B>Type</B> statement, which must be placed in the declarations section of a module. User-defined types can be declared as either<B> Private</B> or <B>Public</B> with the appropriate<B> </B>keyword, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Private Type yourDataType
Public Type myDataType
</FONT></PRE>
<P CLASS="t">For example, you could create a user-defined type that records information about a computer system.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Private Type systemInfo
    cpu As Variant
    memory As Long
    videoColors As Integer
    cost As Currency
    purchaseDate As Variant
End Type
</FONT></PRE>
<H3><A NAME="sec1"></A>Declaring Variables That Have a User-Defined Type</H3><P CLASS="t">You can declare local, private, or public variables of the same user-defined type.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim mySystem As systemInfo, yourSystem As systemInfo
</FONT></PRE>
<P CLASS="t">The rules for determining the scope and lifetime of a variable with a user-defined type are identical to those for other types of variables. For more information, see "Specifying Variable Scope and Lifetime" earlier in this chapter.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Notice the difference between declaring the user-defined data type (using the <B>Type </B>statement) and declaring a variable of the user-defined type (using the <B>Dim</B> statement). Declaring the user-defined type simply tells Visual Basic how the data type is structured; declaring a variable actually reserves space for information organized according to the user-defined type. The scope of the <B>Type</B> declaration and the scope of the declared variable are completely independent; for example, you can declare a local variable using a data type that has been declared as <B>Public</B>.</P>
<P></P>
<H3><A NAME="sec2"></A>Using Variables That Have a User-Defined Type</H3><P CLASS="t">You access an individual variable within a structure by writing the name of the variable that has a user-defined type, followed by a period and the name of the individual variable.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">mySystem.cpu = "486"
If mySystem.purchaseDate &gt; #1/1/92# Then
</FONT></PRE>
<P CLASS="t">You can also assign one variable to another if they're both of the same user-defined type. This assigns all the elements of one variable to the same elements in the other variable, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">yourSystem = mySystem
</FONT></PRE>
<H3><A NAME="sec3"></A>User-Defined Types That Contain Arrays</H3><P CLASS="t">A user-defined type can contain a static (fixed-size) array, as in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Type systemInfo
    cpu As Variant
    memory As Long
    diskDrives(25) As String        ' Fixed-size array.
    videoColors As Integer
    cost As Currency
    purchaseDate As Variant
End Type
</FONT></PRE>
<P CLASS="t">It can also contain a dynamic array.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Type systemInfo
    cpu As Variant
    memory As Long
    diskDrives() As String        ' Dynamic array.
    videoColors As Integer
    cost As Currency
    purchaseDate As Variant
End Type
</FONT></PRE>
<P CLASS="t">You can access an array within a user-defined type just as you access any individual variable within the user-defined type, that is, by writing the name of the structured variable that contains the array, followed by a period and then the name of the array. You can then specify an individual element in the array with index numbers, just as you normally access an array member.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim mySystem As systemInfo
mySystem.diskDrives(0) = "1.44 MB"
</FONT></PRE>
<P CLASS="t">You can also declare an array of user-defined types.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim allSystems(100) As systemInfo
</FONT></PRE>
<P CLASS="t">Follow the same rules to access the components of this data structure.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">allSystems(5).CPU = "386SX"
allSystems(X).DiskDrives(2) = "100M SCSI"
</FONT></PRE>
<H3><A NAME="sec4"></A>User-Defined Types That Contain Objects</H3><P CLASS="t">User-defined types can contain objects.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Private Type inputData
    wkInput as Worksheet
    rInput as Range
End Type
</FONT></PRE>
<H3><A NAME="sec5"></A>Nesting User-Defined Types</H3><P CLASS="t">User-defined types can contain other user-defined types, as shown in the following example. To make your macros more readable and easier to debug, try to keep all the code that defines user-defined data types in one module.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Type driveInfo
    type As String
    size As Long
End Type

Type systemInfo
    cpu As Variant
    memory As Long
    diskDrives(26) As driveInfo
    cost As Currency
    purchaseDate As Variant
End Type

Dim allSystems(100) As systemInfo
allSystems(1).diskDrives(0).type = "Floppy"
</FONT></PRE></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 6: File Input/Output</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 6: File Input/Output</font></H1>
  <p><b>Lesson
    Objectives</b></font></p>
    
        
            <p>Upon
            completion of this lesson, the participant will be
            able to:</font></p>
        
        <ul>
            <li>List
                the most commands used to read and write text
                files.</font></li>
            <li>Describe
                formatting problems that can occur using the
                Write# command.</font></li>
            <li>Demonstrate
                in a macro how to use FreeFile, Open, Input#,
                Write#, EOF, and Close.</font></li>
        </ul>
        
            <p><b>Some
            Topics to be introduced in this lesson include:</b></font></p>
            <ul>
                <li>Macro
                    Commands Used To Read and Write Text Files</font></li>
                <li>Formatting
                    Data For Output To Text Files</font></li>
            </ul>
        
    
    <p><b><i>FILE
    INPUT/OUTPUT</i></b></font></p>
    
        
            <p>This
            section is a light introduction to file input/output,
            and emphasizes sequential processing of CSV files.</font></p>
            <p>Visual
            Basic for Applications has a rich set of file
            input/output commands. You can read/write data from
            any offset within a file, or read/write data
            sequentially. You can easily read/write comma
            separated files or read/write a byte at a time, a
            line at a time, or fixed length records. </font></p>
            <p>Sequential
            processing means that you read from a file or write
            to a file sequentially, starting from the beginning
            of the file. Random processing means that you can
            read data from a file or write data to a file,
            starting at any position within the file. </font></p>
            <p>Here's
            a couple of possible uses for file input/output in
            MSProject macros:</font></p>
            
                <p>Create
                custom reports that write to CSV files.</font></p>
                <p>Create
                (write) or process (read) custom mpx files.</font></p>
                <p>Use
                a temporary file to &quot;dynamically&quot;
                exchange data between MSProject and another
                application or a VB3 program.</font></p>
            
            <p>The
            following commands can handle most sequential file
            input/output needs:</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="523">
    <tr>
        <td width="16%" bgcolor="#FFFFFF"><p align="center"><b>Command</b></font></p>
        </td>
        <td width="84%" bgcolor="#FFFFFF"><p align="center"><b>Common Usage</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="16%"><b>FreeFile</b></font></td>
        <td width="84%">Get a free file handle (needed by other
        commands)</font></td>
    </tr>
    <tr>
        <td width="16%"><b>Open</b></font></td>
        <td width="84%">Open the file</font></td>
    </tr>
    <tr>
        <td width="16%"><b>Input #</b></font></td>
        <td width="84%">Read in fields and assign them to
        variables</font></td>
    </tr>
    <tr>
        <td width="16%"><b>Write #</b></font></td>
        <td width="84%">Write out data - automatically comma
        separated</font></td>
    </tr>
    <tr>
        <td width="16%"><b>Print #</b></font></td>
        <td width="84%">Write out data - not automatically comma
        separated</font></td>
    </tr>
    <tr>
        <td width="16%"><b>EOF</b></font></td>
        <td width="84%">Used to check if all records have been
        read</font></td>
    </tr>
    <tr>
        <td width="16%"><b>LOF</b></font></td>
        <td width="84%">Length of file - file must have been
        opened by Open</font></td>
    </tr>
    <tr>
        <td width="16%"><b>FileLen</b></font></td>
        <td width="84%">Length of file - must not be open - you
        specify the filename</font></td>
    </tr>
    <tr>
        <td width="16%"><b>Close</b></font></td>
        <td width="84%">Close a file opened by Open</font></td>
    </tr>
</table>
</center></div>

<p>NOTE: If you
leave out the Close command at the end of your macros, or if you
get a runtime error before the macro executes the Close command,
you may get a message telling you the file is already open when
you run the macro again. If this happens, use the menu command
Run Reset.</font></p>
  
        
            <p>If
            you need random access, then you'll want to look at
            some of these commands:</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="397">
    <tr>
        <td width="14%"><b>Put</b></font></td>
        <td width="86%">Write data starting at a specified
        position within the file</font></td>
    </tr>
    <tr>
        <td width="14%"><b>Get</b></font></td>
        <td width="86%">Read data starting at a specified position
        within the file</font></td>
    </tr>
    <tr>
        <td width="14%"><b>Seek</b></font></td>
        <td width="86%">Specify the position for the next
        read/write</font></td>
    </tr>
    <tr>
        <td width="14%"><b>Loc</b></font></td>
        <td width="86%">Returns the position for the next
        read/write</font></td>
    </tr>
</table>
</center></div>
  
        
            <p>See
            Online Help for the detailed syntax and options
            available with the above commands.</font></p>
        
        <p><b>Formatting
        Concerns</b></font></p>
        
            <p>When
            reading/writing CSV files, you need to deal with the
            formatting that the CSV file contains. Different
            applications format different kinds of data in
            different ways when creating CSV files. About the
            only thing that is consistent is that the fields are
            separated by commas. The table below shows how the
            same MSProject fields would be written out using the
            Write# command compared to using FileSaveAs with the
            CSV format. It shows how the Id, Name, Duration,
            Start, and Flag1 task properties are written out for
            a single task, with no additional formatting. The
            task has Id=1. It starts on 1/2/95 8:00 AM, but the
            current MSProject Date Format shows the date in a
            task table as 1/2/95. It is assumed that
            Activeproject.HoursPerDay is 8.</font></p>
        
    

<div align="center"><center>

<table border="1" cellpadding="7" width="469">
    <tr>
        <td width="17%" bgcolor="#FFFFFF"><p align="center"><b>Screen </b><sup><b>1</b></sup></font></p>
        </td>
        <td width="31%" bgcolor="#FFFFFF"><p align="center"><b>MsgBox </b><sup><b>2</b></sup></font></p>
        </td>
        <td width="32%" bgcolor="#FFFFFF"><p align="center"><b>Write# </b><sup><b>3</b></sup></font></p>
        </td>
        <td width="20%" bgcolor="#FFFFFF"><p align="center"><b>FileSaveAs </b><sup><b>4</b></sup></font></p>
        </td>
    </tr>
    <tr>
        <td width="17%">1</font></td>
        <td width="31%">1 </font></td>
        <td width="32%">1 </font></td>
        <td width="20%">1</font></td>
    </tr>
    <tr>
        <td width="17%">task1</font></td>
        <td width="31%">task1 </font></td>
        <td width="32%">&quot;task1&quot; </font></td>
        <td width="20%">task1</font></td>
    </tr>
    <tr>
        <td width="17%">1d</font></td>
        <td width="31%">480</font></td>
        <td width="32%">480 </font></td>
        <td width="20%">1d</font></td>
    </tr>
    <tr>
        <td width="17%">1/2/95</font></td>
        <td width="31%">1/2/95 8:00:00 AM</font></td>
        <td width="32%">#1995-01-02 8:00:00#</font></td>
        <td width="20%">1/2/95</font></td>
    </tr>
    <tr>
        <td width="17%">Yes </font></td>
        <td width="31%">True</font></td>
        <td width="32%">#TRUE# </font></td>
        <td width="20%">No</font></td>
    </tr>
</table>
</center></div>

<p><sup><b>1</b> </sup>The
Screen column shows how the data appears in the task table on
screen.</font></p>

<p><sup><b>2</b> </sup>The
MsgBox column was discovered by examining the output from:</font></p>
  
        <p><b>Set t
        = ActiveProject.Tasks(1)</b></font></p>
        <p><b>MsgBox
        t.ID</b></font></p>
        <p><b>MsgBox
        t.Name</b></font></p>
        <p><b>MsgBox
        t.Duration</b></font></p>
        <p><b>MsgBox
        t.Start</b></font></p>
        <p><b>MsgBox
        t.Flag1</b></font></p>
    


<p><sup><b>3</b> </sup>The
Write# column was discovered by writing to a text file and then
examining the text file in NotePad. The code looked like:</font></p>
  
        <p><b>Dim
        fnum As Integer, t As Object</b></font></p>
        <p><b>fnum
        = FreeFile</b></font></p>
        <p><b>Open
        &quot;c:\test.csv&quot; For Output As fnum</b></font></p>
        <p><b>Set t
        = ActiveProject.Tasks(1)</b></font></p>
        <p><b>Write
        #fnum, t.ID, t.Name, t.Duration, t.Start, t.Flag1</b></font></p>
    


<p><sup><b>4</b> </sup>The
FileSaveAs column was created manually by choosing File, Save As,
and using the CSV format.</font></p>
  <p><b>Formatting
    woes</b>: The # signs in the Write# column aren't recognized
    as date and boolean (true/false, yes/no) qualifiers when the
    CSV file created by Write# is manually read back in by
    MSProject or Excel using File Open (error messages result in
    MSProject). Also, if the pure number 480 is read back into
    MSProject using File Open, it doesn't interpret it as
    minutes, and instead would tack on the default duration
    units, so you could end up with a duration of 480d.</font></p>
    <p>The table
    below shows some ways to get around these formatting
    problems. It assumes the same data as in the previous table.</font></p>

<div align="center"><center>

<table border="1" cellpadding="7" width="475">
    <tr>
        <td width="13%" bgcolor="#FFFFFF"><p align="center"><b>Screen</b></font></p>
        </td>
        <td width="56%" bgcolor="#FFFFFF"><p align="center"><b>Command</b></font></p>
        </td>
        <td width="31%" bgcolor="#FFFFFF"><p align="center"><b>Writes this</b></font></p>
        </td>
    </tr>
    <tr>
        <td width="13%">1d</font></td>
        <td width="56%">Write# fnum, t.Duration</font></td>
        <td width="31%">480</font></td>
    </tr>
    <tr>
        <td width="13%">1d</font></td>
        <td width="56%"><sup><b>1 </b></sup>Write# fnum,
        t.Duration / 60 / 8 &amp; &quot;d&quot;<sup><b> </b></sup></font></td>
        <td width="31%">&quot;1d&quot;</font></td>
    </tr>
    <tr>
        <td width="13%" bgcolor="#FFFFFF">1d</font></td>
        <td width="56%" bgcolor="#FFFFFF"><sup><b>2 </b></sup>Write# fnum,
        t.GetField(pjTaskDuration) </font></td>
        <td width="31%" bgcolor="#FFFFFF">&quot;1d&quot;</font></td>
    </tr>
    <tr>
        <td width="13%">1/2/95</font></td>
        <td width="56%">Write# fnum, t.Start</font></td>
        <td width="31%">#1995-01-02 8:00:00#</font></td>
    </tr>
    <tr>
        <td width="13%" bgcolor="#FFFFFF">1/2/95</font></td>
        <td width="56%" bgcolor="#FFFFFF"><sup><b>2 </b></sup>Write# fnum,
        CStr(t.Start)</font></td>
        <td width="31%" bgcolor="#FFFFFF">&quot;1/2/95 8:00:00 AM&quot;</font></td>
    </tr>
    <tr>
        <td width="13%">1/2/95</font></td>
        <td width="56%">Write# fnum, t.GetField(pjTaskStart)</font></td>
        <td width="31%">&quot;1/2/95&quot;</font></td>
    </tr>
    <tr>
        <td width="13%">Yes</font></td>
        <td width="56%">Write# fnum, t.Flag1</font></td>
        <td width="31%">#TRUE#</font></td>
    </tr>
    <tr>
        <td width="13%">Yes</font></td>
        <td width="56%">Write# fnum, CStr(t.Flag1)</font></td>
        <td width="31%">&quot;True&quot;</font></td>
    </tr>
    <tr>
        <td width="13%">Yes</font></td>
        <td width="56%">Write# fnum,
        Format(t.Flag1,&quot;yes/no&quot;)</font></td>
        <td width="31%">&quot;Yes&quot; </font></td>
    </tr>
    <tr>
        <td width="13%" bgcolor="#FFFFFF">Yes</font></td>
        <td width="56%" bgcolor="#FFFFFF"><sup><b>2 </b></sup>Write# fnum,
        t.GetField(pjTaskFlag1) </font></td>
        <td width="31%" bgcolor="#FFFFFF">&quot;Yes&quot;</font></td>
    </tr>
</table>
</center></div>

<p><sup>1</sup> In
general, the expression: <b>T.Duration / 60 / 8</b></font></p>
  <p>should be
    replaced by: <b>T.Duration / 60 / Activeproject.HoursPerDay</b></font></p>


<p><sup>2 </sup>Commonly
used methods.</font></p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana">This MSProject macro writes
                    Id, Name, Duration, Start, and Flag1 values
                    for all tasks in the active project to a CSV
                    file.</font></p>
                    
                        <p>1. Open/Create a test file
                        with some tasks.</font></p>
                        <p>2. Enter and run the
                        following MSProject macro:</font></p>
                    
                
                <p><b>Sub
                write3()</b></font></p>
                <p><b>Dim
                fnum As Integer</b></font></p>
                <p><b>Dim
                oTask As Object</b></font></p>
                <p></p>
                <p><b>fnum
                = FreeFile() </b></font></p>
                <p><b>Open
                &quot;c:\test.csv&quot; For Output As fnum </b></font></p>
                <p></p>
                <p><b>For
                Each oTask In ActiveProject.Tasks</b></font></p>
                <p><b>Write
                #fnum, _ </b></font></p>
                <p><b>oTask.ID,
                _</b></font></p>
                <p><b>oTask.Name,
                _</b></font></p>
                <p><b>oTask.GetField(pjTaskDuration),
                _</b></font></p>
                <p><b>CStr(oTask.Start),
                _</b></font></p>
                <p><b>oTask.GetField(pjTaskFlag1)</b></font></p>
                <p><b>Next</b></font></p>
                <p></p>
                <p><b>Close
                fnum</b></font></p>
                <p><b>End
                Sub</b></font></p>
            
        
        
            <p>3.
            After the macro finishes, open up c:\test.csv in
            NotePad and examine how the data is formatted. Close
            NotePad.</font></p>
            <p>4.
            Open c:\test.csv in Excel and examine how the data is
            formatted. Close Excel.</font></p>
            <p>5.
            Use the MSProject menu command File Open to open
            c:\test.csv. Any problems?</font></p>
        
        <p>Did a
        task sheet view have to be active for this macro to work?
        Did there have to exist a table that begins with fields
        Id, Name, Duration, Start, and Flag1?</font></p>
        </td>
    </tr>
</table>
</center></div>

<p></font>&nbsp;</p>
<div align="center"><center>

<table border="1" cellpadding="7" cellspacing="1" width="590">
    <tr>
        <td bgcolor="#FFFFFF">
            
                <p><b>Try
                This</b></font></p>
            
            <p>This
            MSProject reads in task Text1, Name, and Duration
            fields from a text file and searches for a task in
            the active project whose Text1 and Name fields match
            those read in - the search is case sensitive for
            Text1, but not for Name. If it finds a match, it sets
            the duration of that task to the duration read in. If
            doesn't find a match then if adds a new task with the
            Text1, Name, and Durations read in.</font></p>
            
                <p>1.
                Enter the text below in NotePad. Save it as
                c:\match.txt and then exit NotePad.</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana"><b>&quot;012&quot;,&quot;task
                    x&quot;,&quot;10d&quot;</b></font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana"><b>&quot;005&quot;,&quot;task
                    y&quot;,&quot;20d&quot;</b></font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana"><b>&quot;007&quot;,&quot;task
                    w&quot;,&quot;30d&quot;</b></font></p>
                
                <p>2.
                Create a project with the following task data:</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana"><b>Id Name Duration Text1</b></font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">1 task a 1d 009</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">2 task x 1d 011</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">3 task w 1d 007</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">4 task x 1d 012</font></p>
                
                <p>3.
                Enter the following MSProject sub procedure, but
                don't run it yet.</font></p>
                <p><b>Sub
                MergeFile()</b></font></p>
                <p><b>Dim
                fnum As Integer, otask As Object</b></font></p>
                <p><b>Dim
                Text1Input$, NameInput$, DurationInput$</b></font></p>
                <p><b>Dim
                matchingID As Integer</b></font></p>
                <p><b>fnum
                = FreeFile()</b></font></p>
                <p><b>Open
                &quot;c:\match.txt&quot; For Input As fnum</b></font></p>
                <p><b>Do
                Until EOF(fnum)</b></font></p>
                <p><b>Input
                #fnum, Text1Input, NameInput, DurationInput</b></font></p>
                <p><b>matchingID
                = GetIdOfMatch(Text1Input, NameInput)</b></font></p>
                <p><b>If
                matchingID = 0 Then</b></font></p>
                <p><b>Set
                otask = ActiveProject.Tasks.Add</b></font></p>
                <p><b>Else</b></font></p>
                <p><b>Set
                otask = ActiveProject.Tasks(matchingID)</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>otask.Text1
                = Text1Input</b></font></p>
                <p><b>otask.Name
                = NameInput</b></font></p>
                <p><b>otask.Duration
                = DurationInput</b></font></p>
                <p><b>Loop</b></font></p>
                <p><b>Close
                fnum</b></font></p>
                <p><b>End
                Sub</b></font></p>
                <p>4.
                Enter the following MSProject function. It is
                passed the Text1 and Name read in, and it returns
                the ID of the first matching task it finds. If
                there is no match, it returns a 0.</font></p>
                <p><b>Function
                GetIdOfMatch(TextInput$, NameInput$) As Integer</b></font></p>
                <p><b>Dim
                otask As Object</b></font></p>
                <p><b>For
                Each otask In ActiveProject.Tasks</b></font></p>
                <p><b>If
                Not otask Is Nothing Then</b></font></p>
                <p><b>If
                otask.Text1 = TextInput _</b></font></p>
                <p><b>And
                UCase(otask.Name) = UCase(NameInput) Then</b></font></p>
                <p><b>GetIdOfMatch
                = otask.ID</b></font></p>
                <p><b>Exit
                Function</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>End
                If</b></font></p>
                <p><b>Next</b></font></p>
                <p><b>GetIdOfMatch
                = 0</b></font></p>
                <p><b>End
                Function</b></font></p>
                <p>5.
                Run the MergeFile macro and then check a task
                table to see if it updated the tasks correctly.
                It should look like this:</font></p>
                
                    <p><font color="#000000" size="2"
                    face="Verdana"><b>Id Name Duration Text1</b></font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">1 task a 1d 009</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">2 task x 1d 011</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">3 task w 30d 007</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">4 task x 10d 012</font></p>
                    <p><font color="#000000" size="2"
                    face="Verdana">5 task y 20d 005</font></p>
                
            
        
        </td>
    </tr>
</table>
</center></div>
  <p><b><i>Binary
    Examples</i></b></font></p>
    <p><b>Example</b></font></p>
    
        
            <p>This
            MSProject macro plugs the word &quot;hello&quot; into
            an existing file Test1, starting at the 3rd byte,
            without changing the rest of the file.</font></p>
        
        <p><b>Sub
        Bin1()</b></font></p>
        <p><b>Dim
        fnum As Integer</b></font></p>
        <p><b>Dim s
        As String</b></font></p>
        <p><b>fnum
        = FreeFile()</b></font></p>
        <p><b>Open
        &quot;c:\Test1&quot; For Binary As fnum</b></font></p>
        <p><b>s =
        &quot;hello&quot;</b></font></p>
        <p><b>Put
        fnum, 3, s</b></font></p>
        <p><b>Close
        fnum</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>This
            MSProject macro reads 5 characters, one character at
            a time, from the file Test1, starting with the 3rd
            byte in the file. The Ascii code for each byte read
            is displayed in a MsgBox, along with the character,
            if it's printable, or a message if it's not.</font></p>
        
        <p><b>Sub
        Bin2()</b></font></p>
        <p><b>Dim
        fnum As Integer</b></font></p>
        <p><b>Dim n
        as integer</b></font></p>
        <p><b>Dim c
        As String * 1 'String can hold 1 char only</b></font></p>
        <p><b>Dim s
        As String </b></font></p>
        <p></font>&nbsp;</p>
        <p><b>fnum
        = FreeFile()</b></font></p>
        <p><b>Open
        &quot;c:\Test1&quot; For Binary As fnum</b></font></p>
        <p></font>&nbsp;</p>
        <p><b>For n
        = 3 To 5</b></font></p>
        <p><b>Get
        fnum, n, c</b></font></p>
        <p><b>If
        Asc(c) &gt;= 32 Then</b></font></p>
        <p><b>s = c</b></font></p>
        <p><b>Else</b></font></p>
        <p><b>s =
        &quot;Can't display&quot;</b></font></p>
        <p><b>End
        If</b></font></p>
        <p><b>MsgBox
        &quot;n = &quot; &amp; n &amp; Chr(10) &amp; _</b></font></p>
        <p><b>&quot;Ascii
        code = &quot; &amp; Asc(c) &amp; Chr(10) &amp; _</b></font></p>
        <p><b>&quot;Character:
        &quot; &amp; s</b></font></p>
        <p><b>Next</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <H1><i>Lesson
    6 Exercises</i></H1>    
<ol>
<li>Write an
    MSProject macro that lets the user enter a path and filename
    in an InputBox, and then saves the comma separated Task
    UniqueId and Start fields to that file, where the UniqueId's
    are saved without quotes, and the Start dates are saved with
    quotes. For example if a task with UniqueId 7 has a start of
    10/1/94 then the record written to the CSV file looks like:</font></li><br> <br>
    
        <p>7,&quot;10/1/94
        8:00:00 AM&quot;</font></p>
    
    <p>Don't write
    out records for blank tasks. Assume there's at least one
    nonblank task in the active project. Don't bother with a
    custom error handler to handle bad filenames etc. Test this
    on a project with a couple of tasks and examine the file it
    creates (open it in NotePad).</font></p>
    <li>Create
    and save a text file in NotePad that contains the Unique Id
    and duration fields shown below:</font></li><br> <br>
    
        
            <p><b>3,&quot;5d&quot;</b></font></p>
            <p><b>1,&quot;2d&quot;</b></font></p>
            <p><b>7,&quot;3d&quot;</b></font></p>
        
    
    <p>Save the
    file as &quot;C:\M3L6E2.TXT&quot;.</font></p>
    <p>Write a
    macro that reads in this file and assigns the durations to
    the appropriate tasks (matching the Unique Ids). You can hard
    code the filename &quot;C:\M3L6E2.TXT&quot;, but make no
    assumptions as to the number of records it contains (i.e. use
    the <b>Do Until EOF(fnum)</b> loop).</font></p>
    <p>Details:
    Declare a long variable Uid and a string variable Dur. For
    each record, the Input# command reads the record into the Uid
    and Dur variables; then the duration of the task with Unique
    Id = Uid is set equal to the value of Dur. If there is no
    task with Unique Id = Uid, then display the message
    &quot;There is no task with Unique Id = &quot;, followed by
    the value of the variable Uid. Then continue on to the next
    record.</font></p>
    <p>This is much
    easier than it looks - no searching required. For example, if
    a task has Unique Id = 5, and you wanted to set its duration
    to 100d, you could use the Unique Id directly:</font></p>
    
        <p><b>ActiveProject.Tasks.UniqueId(5).Duration
        =&quot;100d&quot;</b></font></p>
    
    <p>If there is
    no task with Unique Id = 5, then the above statement would
    cause a trappable error (<b>On Error Resume Next</b> etc.).
    Of course, you're working with variables Uid and Dur instead
    of literals 5 and &quot;100d&quot;. </font></p>
    <p>Test the
    macro: Create a project with at least 7 tasks. Display the
    Unique Id column. Run the macro. Check that the durations of
    the tasks with unique ids 1, 3, and 7 have changed correctly.
    Then try deleting the task with unique id = 3 and run the
    macro again. It should give the error message about unique id
    = 3.</font></p>
</ol>
</FONT></BODY>
</html>

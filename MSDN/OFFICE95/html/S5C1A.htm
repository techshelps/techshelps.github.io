<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the DAO Object Model</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Understanding the DAO Object Model</H2><P CLASS="a"><img src="APG1301.gif"></P>
<P CLASS="t">You use data access objects the same way you use objects in the Microsoft Excel object model. For example, to change a field attribute in a specific table in your application, you first need to establish a reference to the field. Beginning at the application level (using the <B>DBEngine </B>object), you define a workspace and then enter the database. From there, you navigate through the object and collection levels until you reach the object you want to change.</P>
<H3><A NAME="sec0"></A>The DBEngine Object</H3><P CLASS="t">The <B>DBEngine</B> object represents the Microsoft Jet database "engine," which is what powers Microsoft Access; this is the engine that Visual Basic uses to program database objects. This engine is actually a set of dynamic-link libraries (DLLs) that are linked to your application at run time. This engine is commonly referred to as "Jet," and it's the top-level object in the DAO model. It's this set of DLL files that translates the DAO code you write in your application into physical operations involving the Access .mdb file (or other database files). Also built into the DBEngine is a query processor that compiles and runs the Structured Query Language (SQL) queries you write to the database.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The <I>data file</I> is the file that contains the database tables. Microsoft Access data files have the extension .mdb. Microsoft FoxPro&reg; and dBASE&reg; databases have the .dbf extension. Other database applications have different filename extensions.</P>
<P></P>
<H3><A NAME="sec1"></A>The Workspace Object</H3><P CLASS="t">The <B>Workspace</B> object represents a workspace, which is an area in memory where you can perform a set of DAO operations. It's similar to a Microsoft Excel worksheet in that more than one workspace can be open at a time, but only one workspace can be active at a time. Depending on your system configuration, you may be able to open as many as 255 workspaces at once. Because Workspace objects are zero-based, the first workspace you open is Workspace(0).</P>
<P CLASS="t">You can define a workspace variable and open any workspace you specify. Most applications use only one workspace; therefore, it's faster to use the default workspace that's automatically assigned when you open a database.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">It's possible to open a database without defining a workspace variable or using a <B>Workspace </B>object. To do this, define a database variable only; the variable will be assigned a default workspace when it's opened.</P>
<P></P>
<H3><A NAME="sec2"></A>The Database Object</H3><P CLASS="t">The <B>Database</B> object represents a Jet database, which is a collection of tables, indexes, fields, and links to outside sources. Whereas in Microsoft Excel you can define and set a range of cells as a database, in a Jet database the range you defined would be a single table. A Jet database is composed of a collection of tables (among other things).</P>
<H3><A NAME="sec3"></A>The TableDef Object</H3><P CLASS="t">The <B>TableDefs</B> collection object represents the collection of all the tables in a database. Each <B>TableDef</B> object represents a separate base table or attached table in the database.</P>
<H3><A NAME="sec4"></A>The QueryDef Object</H3><P CLASS="t">The <B>QueryDefs</B> collection object represents all the compiled SQL code in the database. Each <B>QueryDef</B> object represents one compiled SQL command string.</P>
<H3><A NAME="sec5"></A>The Recordset Object</H3><P CLASS="t">A <B>Recordset</B> object represents a set of records drawn from the database. The records can be drawn from a base table, or they can be the result of a single SQL query or a series of queries. The records that make up a <B>Recordset</B> object don't have to be stored in the same table. The <B>Recordset</B> object has three subtypes: the <B>Table</B> object, the <B>Dynaset</B> object, and the <B>Snapshot</B> object.</P>
<H4><A NAME="sec6"></A>The Table Object</H4><P CLASS="t">The <B>Table</B> object represents a base table, which is a logical set of records that are physically stored together. For example, a set of employee records can be stored in the same table because all the employees work for same company. The records can then be subdivided, or grouped with other records from other tables; in the base table, however, they're still a logical, physical set of records.</P>
<H4><A NAME="sec7"></A>The Dynaset Object</H4><P CLASS="t">The <B>Dynaset</B> object represents an updatable group of records. The group can be either a base table or a virtual table. A <B>Dynaset</B> object is updatable because the table indexes are loaded into memory, and the other fields in the record are retrieved from a buffer when they're needed.</P>
<H4><A NAME="sec8"></A>The Snapshot Object</H4><P CLASS="t">Like a <B>Dynaset</B> object, a <B>Snapshot</B> object can represent either a base table or a virtual table. Unlike a <B>Dynaset</B> object, a <B>Snapshot</B> object isn't updatable; all fields in a <B>Snapshot</B> object record are loaded into memory so that the set can be searched faster for matching records. The result of a SQL pass-through query is always a <B>Snapshot</B> object.</P></FONT>
</FONT></BODY></HTML>

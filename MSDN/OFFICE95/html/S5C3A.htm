<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using DAO to Alter a Database</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using DAO to Alter a Database</H2><P CLASS="t">One of the more powerful features of DAO is its ability to change the structure of a database. During the development of your application, you may find that you could organize your information better by adding temporary tables to the database or adding fields to a table. You can add tables while working in an application by appending a <B>TableDef</B> object to the <B>TableDefs</B> collection; you can add fields to a table by appending a <B>Field</B> object to the <B>Fields</B> collection and then appending the <B>Fields</B> collection to the <B>TableDefs</B> collection. You can also change relationships or indexes between tables.</P>
<H3><A NAME="sec0"></A>Mapping the Database</H3><P CLASS="t">Before you begin modifying the objects in a database, it's helpful to get a summary of the object names and structures in the database. Getting this summary is called "mapping the database." The following example maps the Nwind.mdb database by looping through the elements in the <B>TableDefs</B> collection and transferring the structure to Sheet1 in the active workbook. This process is similar to scanning the headings of a worksheet in Microsoft Excel.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim db as Database
Dim i As Integer, j As Integer, col As Integer, rw as Integer
Dim system_Prefix as String, Current_TableName as String
Dim hidden_prefix as String
Set db = OpenDatabase("d:\access\sampapps\nwind.mdb")
With Worksheets("Sheet1")
    col = 1
    For i = 0 To db.TableDefs.Count - 1
        Current_TableName = db.TableDefs(i).Name
        ' Omit jet system tables from the list
        system_Prefix = Left(Current_TableName, 4)
        hidden_prefix = Left(Current_TableName, 1)
        If system_Prefix &lt;&gt; "MSys" And system_Prefix &lt;&gt; "USys" And
        hidden_prefix &lt;&gt; "~" Then
            .Cells(1, col) = db.TableDefs(i).Name
            'Display the fields inside each table
            rw = 2
            For j = 0 To db.TableDefs(i).Fields.Count - 1
                .Cells(rw, col) = db.TableDefs(i).Fields(j).Name
                .Cells(rw, col + 1) = db.TableDefs(i).Fields(j).Type
                rw = rw + 1
            Next j
        col = col + 2
        End If
    Next i
End With
</FONT></PRE>
<P CLASS="t">You can set up a similar procedure to loop through the query names in the database by specifying the <B>QueryDefs</B> collection instead of the <B>TableDefs</B> collection and adjusting the index and looping variables.</P>
<H3><A NAME="sec1"></A>Modifying the Database Structure</H3><P CLASS="t">You can use DAO to change the structure of your database programatically. Modifying the database is similar to creating it initially. In most cases, you use the same <B>Create</B> and <B>Append</B> methods to add objects. You can add new <B>TableDef</B> objects to a database or add new <B>Field</B> and <B>Indexes</B> objects to existing tables. In addition, you can delete a <B>TableDef</B> object from a database or delete an <B>Index</B> object from a <B>TableDef</B> object.</P>
<P CLASS="t">There are some restrictions that apply to deleting field objects, however. For example, you cannot change an individual field after it's been appended to a <B>TableDef</B> object. You can delete a <B>Field</B> object only if it's not part of any <B>Index</B> or <B>Relation</B> objects. To delete an individual <B>Field</B> object, use the <B>Delete</B> method of the <B>TableDef</B> object. To change a <B>Field</B> object, you must first add a new <B>TableDef </B>object that reflects the desired changes in the structure, and then you must move the data to the new table and delete the old table. For more information about modifying the database structure, see "TableDef object" in&nbsp;Help.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">To delete an indexed field, you must first delete the index. You must also delete any affected <B>Relation</B> objects before you can delete a <B>Field</B> object or a <B>TableDef</B> object that's part of a relationship.</P>
<P></P>
<H3><A NAME="sec2"></A>Attaching Tables</H3><P CLASS="t">In addition to defining your own tables, you can attach tables from any supported database to the database you're working in. When you attach an external table, the connection information is stored in your database, and the connection to the outside table is activated when you open the table. The data itself remains in the external database.</P>
<P CLASS="t">You can use attached tables the same way you use any other table in your database. You can create <B>Recordset</B> objects that include fields from attached and local tables, giving you the flexibility to perform queries with multiple databases. When you attach an external table, you must specify a <B>SourceTableName </B>string and a <B>Connect</B> string as you create the <B>TableDef</B> object.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Because an attached table isn't controlled by Jet, you cannot change the fields inside the table, add new fields to its structure, or delete its indexes.</P>
<P></P>
<P CLASS="t">Use the <B>CreateTableDef</B> method to create a new table object in your database. The name of the table in the argument is the name of the table as it will appear in your database; the table may have a different name in its native database.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Dim tb as TableDef

Set tb = db.CreateTableDef("Attached Customers Table")
</FONT></PRE>
<P CLASS="t">Set the <B>SourceTableName</B> property to the name of the table in the source database that you want to connect to. You must specify the table name as it appears in its native database.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">tb.SourceTableName = "Customers"
</FONT></PRE>
<P CLASS="t">Set the <B>Connect </B>property by first specifying the path and filename of the source database and then appending the new table to the <B>Tabledefs </B>collection.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">tb.Connect = ";database=e:\access\sampapps\nwind.mdb"
db.TableDefs.Append tb
</FONT></PRE></FONT>
</FONT></BODY></HTML>

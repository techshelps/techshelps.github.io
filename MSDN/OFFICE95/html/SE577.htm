<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenText Method</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>OpenText Method</H1><P CLASS="h"><B>Applies To</B></P>
<P CLASS="t"><B>Workbooks </B>Collection.</P>
<P CLASS="h"><B>Description</B></P>
<P CLASS="t">Loads and parses a text file as a new workbook with a single sheet containing the parsed text-file data.</P>
<P CLASS="h"><B>Syntax</B></P>
<P CLASS="syn"><I>object</I>.<B>OpenText(</B><B><I>filename</I></B>,<B><I> origin</I></B>,<B><I> startRow</I></B>,<B><I> dataType</I></B>,<B><I> textQualifier</I></B>,<B><I> consecutiveDelimiter</I></B>,<B><I> tab</I></B>,<B><I> semicolon</I></B>,<B><I> comma</I></B>,<B><I> space</I></B>,<B><I> other</I></B>,<B><I> otherChar</I></B>,<B><I> fieldInfo</I></B><B>)</B></P>
<P CLASS="term1"><I>object</I></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. The <B>Workbooks</B> object.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>filename</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Required. Specifies the filename of the text file to open and parse.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>origin</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Specifies the origin of the text file (one of <B>xlMacintosh</B>, <B>xlWindows</B>, or <B>xlMSDOS</B>). If this argument is omitted, the method uses the current setting in the File Origin option of the Text Import Wizard.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>startRow</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. The row number at which to start parsing text. The first row is 1. If omitted, 1 is assumed.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>dataType</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Specifies the column format of the data within the file (either <B>xlDelimited</B> or <B>xlFixedWidth</B>). The default is <B>xlDelimited</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>textQualifier</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. Specifies the text qualifier. Can be one of <B>xlDoubleQuote</B>, <B>xlSingleQuote</B>, or <B>xlNone</B>. The default is <B>xlDoubleQuote</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>consecutiveDelimiter</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. <B>True</B> if consecutive delimiters should be considered as one delimiter. The default is <B>False</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>tab</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. <B>True</B> if <B><I>dataType</I></B> is <B>xlDelimited</B> and the tab character is a delimiter. The default is <B>False</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>semicolon</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. True if <I>dataType</I> is xlDelimited and the semicolon character is a delimiter. The default is False.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>comma</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. True if <I>dataType</I> is xlDelimited and the comma character is a delimiter. The default is False.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>space</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. True if <I>dataType</I> is xlDelimited and the space character is a delimiter. The default is False.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>other</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. <B>True</B> if <B><I>dataType</I></B> is <B>xlDelimited</B> and the character specified by the <B><I>otherChar</I></B> argument is a delimiter. The default is <B>False</B>.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>otherChar</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional (required if <B><I>other</I></B> is <B>True</B>). Specifies the delimiter character when <B><I>other</I></B> is True. If more than one character is specified, only the first character of the string is used, remaining characters are ignored.</P>
</BLOCKQUOTE>
<P CLASS="term1"><B><I>fieldInfo</I></B></P>
<BLOCKQUOTE>
<P CLASS="dt1">Optional. An array containing parse information for the individual columns of data. The interpretation depends on the value of <B><I>dataType</I></B>.</P>
</BLOCKQUOTE>
<P CLASS="dt1">When the data is delimited, this argument is an array of two-element arrays, with each two-element array specifying the conversion options for a particular column. The first element is the column number (one based), and the second element is one of the following numbers specifying how the column in parsed:</P>
<P CLASS="tt">1    General</P>
<P CLASS="tt">2    Text</P>
<P CLASS="tt">3    MDY date</P>
<P CLASS="tt">4    DMY date</P>
<P CLASS="tt">5    YMD date</P>
<P CLASS="tt">6    MYD date</P>
<P CLASS="tt">7    DYM date</P>
<P CLASS="tt">8    YDM date</P>
<P CLASS="tt">9    Skip the column</P>
<P></P>
<P CLASS="dt1">The column specifiers may be in any order. If a column specifier is not present for a particular column in the input data, the column is parsed using the General setting. This example causes the third column to be skipped, the first column to be parsed as text, and the remaining columns in the source data to be parsed with the General setting.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Array(Array(3, 9), Array(1, 2))
</FONT></PRE>
<P CLASS="dt1">If the source data has fixed-width columns, the first element of each two-element array specifies the starting character position in the column (as an integer; character zero is the first character). The second element of the two-element array specifies the parse option for the column as a number from one through nine, as listed above.</P>
<P CLASS="dt1">The following example parses two columns from a fixed-width text file. The first column includes characters 1 through 10. Characters 11, 12, 13, 14, and 15 are skipped. The second column includes characters 16 through the last character in the line.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Array(Array(0, 1), Array(10, 9), Array(15, 1))
</FONT></PRE>
<P CLASS="h"><B>See Also</B></P>
<P CLASS="t"><B>Close</B> Method, <B>Open</B> Method, <B>TextToColumns</B> Method.</P>
<P CLASS="h"><B>Example</B></P>
<P CLASS="t">This example opens the file DATA.TXT and uses tab delimiters to parse the text file into a worksheet.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Workbooks.OpenText filename:="DATA.TXT", _
    dataType:=xlDelimited, tab:=True
</FONT></PRE></FONT>
</FONT></BODY></HTML>

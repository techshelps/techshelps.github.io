<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Minimizing Object Activation and Selection</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>Minimizing Object Activation and Selection</H1><P CLASS="t">Most of the time, your code can operate on objects without activating them. If you learned Visual Basic programming by using the macro recorder, you're probably accustomed to activating or selecting an object before you do anything to that object. The macro recorder does this because it must follow your keystrokes as you select and activate sheets and cells. However, you can usually write much simpler and faster Visual Basic code that produces the same results without activating or selecting each object before working with it. For example, filling cells C1:C20 on Sheet5 with random numbers (using the <B>AutoFill</B> method) produces the macro recorder output shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets("Sheet5").Select
Range("C1").Select
ActiveCell.FormulaR1C1 = "=RAND()"
Selection.AutoFill Destination:=Range("C1:C20"), Type:=xlFillDefault
Range("C1:C20").Select
</FONT></PRE>
<P CLASS="t">All of the <B>Select</B> method calls are unnecessary. You can use the <B>With</B> statement to write code that operates directly on the worksheet and range, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">With Sheets("Sheet5")
    .Range("C1").FormulaR1C1 = "=RAND()"
    .Range("C1").AutoFill Destination:=.Range("C1:C20"), _
        Type:=xlFillDefault
End With
</FONT></PRE>
<P CLASS="t">Keep in mind that the macro recorder records exactly what you do — it cannot optimize anything on its own. The recorded macro uses the <B>AutoFill</B> method because that's how the user entered the random numbers. This isn't the most efficient way to fill a range with random numbers. You can do the same thing with a single line, as shown in the following example.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sheets("Sheet5").Range("C1:C20").Formula = "=RAND()"
</FONT></PRE>
<P CLASS="t">When you optimize recorded code, think about what you're trying to do with the macro. Some of the operations you can perform in the user interface (such as dragging a formula from a single cell into a range) are recorded as methods (such as <B>AutoFill</B>) that can be eliminated in the optimized code because there is a faster way to perform the same operation in Visual Basic.</P></FONT>
</FONT></BODY></HTML>

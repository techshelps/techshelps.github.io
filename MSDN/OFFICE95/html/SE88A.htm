<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGISTER</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><META NAME="MS-HKWD" CONTENT="code resources, registering"><META NAME="MS-HKWD" CONTENT="DLLs, registering"><META NAME="MS-HKWD" CONTENT="dynamic link libraries, registering"><META NAME="MS-HKWD" CONTENT="REGISTER function"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H1>    REGISTER</H1><P CLASS="t">Macro Sheets Only</P>
<P CLASS="t">Registers the specified dynamic link library (DLL) or code resource and returns the register ID. You can also specify a custom function name and argument names that will appear in the Function Wizard. If you register a command (macro_type = 2), you can also specify a shortcut key. Because Microsoft Excel for Windows and Microsoft Excel for the Macintosh use different types of code resources, REGISTER has a slightly different syntax form when used in each operating environment.</P>
<P CLASS="t"></P>
<P></P>
<P CLASS="nh"><B><B>Important</B>   This function is provided for advanced users only. If you use the CALL function incorrectly, you could cause errors that will require you to restart your computer.</B></P>
<P></P>
<P CLASS="h"><B>Syntax 1</B></P>
<P CLASS="t">For Microsoft Excel for Windows</P>
<P CLASS="syn"><B>REGISTER</B>(<B>module_text, </B>procedure, type_text, function_text, argument_text, macro_type, category, shortcut_text, help_topic, function_help, argument_help1, argument_help2,...)</P>
<P CLASS="h"><B>Syntax 2</B></P>
<P CLASS="t">For Microsoft Excel for the Macintosh</P>
<P CLASS="syn"><B>REGISTER</B>(<B>file_text, </B>resource, type_text, function_text, argument_text, macro_type, category, shortcut_text, help_topic, function_help, argument_help1, argument_help2,...)</P>
<P CLASS="t">Module_text or file_text    is text specifying the name of the DLL that contains the function (in Microsoft Excel for Windows) or the name of the file that contains the code resource (in Microsoft Excel for the Macintosh).</P>
<P CLASS="t">Procedure or resource    is text specifying the name of the function in the DLL (in Microsoft Excel for Windows) or the name of the code resource (in Microsoft Excel for the Macintosh). In Microsoft Excel for Windows, you can also use the ordinal value of the function from the EXPORTS statement in the module-definition file (.DEF). In Microsoft Excel for the Macintosh, you can also use the resource ID number. The ordinal value or resource ID number should not be in text form.</P>
<P CLASS="t">This argument may be omitted for stand-alone DLLs or code resources. In this case, REGISTER will register all functions or code resources and then return module_text or file_text.</P>
<P CLASS="t">Type_text    is text specifying the data type of the return value and the data types of all arguments to the DLL or code resource. The first letter of type_text specifies the return value.</P>
<P CLASS="t">Function_text    is text specifying the name of the function as you want it to appear in the Function Wizard. If you omit this argument, the function will not appear in the Function Wizard.</P>
<P CLASS="t">Argument_text    is text specifying the names of the arguments you want to appear in the Function Wizard. Argument names should be separated by commas.</P>
<P CLASS="t">Macro_type    specifies the macro type: 1 for a function or 2 for a command. If macro_type is omitted, it is assumed to be 1 (function).</P>
<P CLASS="t">Category    specifies the function category in the Function Wizard in which you want the registered function to appear. You can use the category number or the category name for category. If you use the category name, be sure to enclose it in double quotation marks. If category is omitted, it is assumed to be 14 (User Defined).</P>
<P>Category number    Category name</P>
<P CLASS="tr">    </P>
<P>1    Financial</P>
<P>2    Date &amp; Time</P>
<P>3    Math &amp; Trig</P>
<P>4    Text</P>
<P>5    Logical</P>
<P>6    Lookup &amp; Matrix</P>
<P>7    Database</P>
<P>8    Statistical</P>
<P>9    Information</P>
<P>10    Commands (macro sheets only)</P>
<P>11    Actions (macro sheets only)</P>
<P>12    Customizing (macro sheets only)</P>
<P>13    Macro Control (macro sheets only)</P>
<P>14    User Defined</P>
<P CLASS="t"></P>
<P CLASS="t">Shortcut_text    is a character specifying the shortcut key for the registered command. The shortcut key is case-sensitive. This argument is used only if macro_type = 2 (command). If shortcut_text is omitted, the command will not have a shortcut key.</P>
<P CLASS="t">Help_topic    is the reference (including path) to the help file that you want displayed when the user chooses the Help button when your custom function is displayed.</P>
<P CLASS="t">Function_help    is a text string describing your custom function when it is selected in the Function Wizard. The maximum number of characters is 255.</P>
<P CLASS="t">Argument_help1, argument_help2    are 1 to 21 text strings that describes you custom function's arguments when the function is selected in the Function Wizard.</P>
<P CLASS="h"><B>Example    <BR>Syntax 1</B></P>
<P CLASS="t">In Microsoft Excel for Windows, the following macro formula registers the GetTickCount function from Microsoft Windows. This function returns the number of milliseconds that have elapsed since Microsoft Windows was started.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">REGISTER("User", "GetTickCount", "J")
</FONT></PRE>
<P CLASS="t">Assuming that the REGISTER function is in cell A5, after your macro registers GetTickCount, you can use the CALL function to return the number of milliseconds that have elapsed:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">CALL(A5)
</FONT></PRE>
<P CLASS="h"><B>Example    <BR>Syntax 1 with optional function_text</B></P>
<P CLASS="t">You can use the following macro formula to register the GetTickCount function from Microsoft Windows and assign the custom name GetTicks to it. To do this, include "GetTicks" as the optional function_text argument to the REGISTER function.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">REGISTER("User", "GetTickCount", "J", "GetTicks", , 1, 9)
</FONT></PRE>
<P CLASS="t">After the function is registered, the custom name GetTicks will appear in the Information function category (category = 9) in the Function Wizard.</P>
<P CLASS="t">You can call the function from the same macro sheet on which it was registered using the following formula:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">GetTicks()
</FONT></PRE>
<P CLASS="t">You can call the function from another sheet or macro sheet by including the name of the original macro sheet in the formula. For example, assuming the macro sheet on which GetTicks was registered is named MACRO1.XLS, the following formula calls the function from another sheet:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">MACRO1.XLS!GetTicks()
</FONT></PRE>
<P></P>
<P CLASS="nh"><B><B>Tip</B>    You can use functions in a DLL or code resource directly on a sheet without first registering them from a macro sheet. Use syntax 2a or 2b of the CALL function. For more information, see CALL.</B></P>
<P></P>
<P CLASS="h"><B>Related Functions</B></P>
<P><A class="normal" href="SE8B7.HTM">UNREGISTER</A>    Removes a registered code resource from memory</P>
<P>List of <A class="normal" href="SE746.HTM">DDE/External Functions</A></P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lesson 2: SendKeys</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<H1>Lesson 2: SendKeys</font></H1>
  <p><b>Lesson
    Objectives</b></font></p>
    
        
            <p>Upon
            completion of this lesson, the participant will be
            able to:</font></p>
            <ul>
                <li>Describe
                    and demonstrate how to use SendKeys to send
                    key strokes to another application.</font></li>
            </ul>
            <p><b>Some
            Topics to be introduced in this lesson include:</b></font></p>
            
                <p><font color="#000000" size="2" face="Symbol">·</font><font
                color="#000000" size="2"
                face="verdana,arial,helvetica"> </font><font
                color="#000000" size="2" face="Verdana">Sending
                key strokes to another application with SendKeys</font></p>
            
        
    
    <p><b><i>SendKeys</i></b></font></p>
    
        
            <p>The
            macro languages in many applications support a
            SendKeys statement that can be used to send key
            strokes to the active object in the active
            application. Here's the form of SendKeys in
            MSProject, Excel, Word, and VB3:</font></p>
            <p><b><u>SendKeys</u></b><u>
            </u><i><u>string,[wait]</u></i></font></p>
            <p><i><u>string</u></i></font></p>
            <p>String
            that contains the keys you want to send. This
            includes text as well as special keys like {HOME},
            {ESC}<i>,</i> and {ENTER}. See Online Help for the
            rest of the special keys. The shift, control and alt
            keys are represented by the single characters +, ^,
            and %. The following eight characters must be
            enclosed in braces to send them as literals without
            interpretation:</font></p>
            <p>+ ^
            % { } [ ] ~</font></p>
            <p>The
            ~ is shorthand for {ENTER}, although it's not listed
            in Online Help. It's easier to read a macro that
            doesn't use this shortcut.</font></p>
            <p>To
            repeat a key several times, put the key followed by a
            space and the number of repetitions inside braces. </font></p>
            <p>SendKeys
            can't send the PRINT SCREEN (PRTSC) key.</font></p>
            <p><i><u>wait</u></i></font></p>
            <p>Optional
            argument that can be set to True to force the calling
            macro to wait until the target application has
            finished processing the key strokes. The default is
            False which allows the calling macro to continue
            immediately.</font></p>
            <p>If
            the target application has its own SendKeys command
            and supports DDE, then the source application could
            use DDEExecute to tell the target application to use
            the SendKeys command in the target application, for
            example:</font></p>
        
        <p><b>DDEExecute
        &quot;SendKeys &quot;&quot;hello&quot;&quot;&quot;</b></font></p>
        
            <p>However
            it's better to use the source application's SendKeys
            command directly:</font></p>
        
        <p><b>SendKeys
        &quot;hello&quot;</b></font></p>
        
            <p>In
            both cases, the target application must be made
            active first, for example by using AppActivate.</font></p>
            <p>To
            improve code readability you can use several SendKeys
            statements instead of one long one.</font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>The
            MSProject macro below starts a new copy of NotePad
            maximized, enters the name, start, and finish of the
            active project along with some text, saves the file,
            and closes the instance of NotePad. The &quot;Y&quot;
            is sent to choose Yes to the overwrite warning in
            case the file already exists,</font></p>
        
        <p><b>Sub
        SK3()</b></font></p>
        <p><b>Shell
        &quot;NotePad&quot;, 3</b></font></p>
        <p><b>SendKeys
        &quot;Project Summary Information:{Enter 2}&quot;, True</b></font></p>
        <p><b>SendKeys
        &quot;Name: &quot; &amp; ActiveProject.Name &amp;
        &quot;{Enter}&quot;, True</b></font></p>
        <p><b>SendKeys
        &quot;Start: &quot; &amp; ActiveProject.Start &amp;
        &quot;{Enter}&quot;, True</b></font></p>
        <p><b>SendKeys
        &quot;Finish: &quot; &amp; ActiveProject.Finish &amp;
        &quot;{Enter}&quot;, True</b></font></p>
        <p><b>SendKeys
        &quot;%FS&quot;</b></font></p>
        <p><b>SendKeys
        &quot;C:\TEST2.TXT{ENTER}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;Y&quot; 'in case get overwrite message</b></font></p>
        <p><b>SendKeys
        &quot;%{F4}&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
    
    <p><b>Example</b></font></p>
    
        
            <p>The
            following MSProject macro sends keys to itself. It
            should be attached to a button on a toolbar and used
            only when in the module editor. When run, it creates
            a Sub/End Sub template with top and bottom comment
            borders, and positions the cursor one space to the
            right of the first word Sub.</font></p>
        
        <p><b>Sub
        NewSub()</b></font></p>
        <p><b>SendKeys
        &quot;'{= 20}{Enter}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;Sub{Enter 5}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;End Sub{ENTER}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;'{= 20}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;{Up 6}{END}&quot;</b></font></p>
        <p><b>SendKeys
        &quot; &quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        
            <p>Here's
            what the key strokes do:</font></p>
            <p><b>'
            </b>Apostrophe for a comment line for the top border</font></p>
            <p>{=
            20} Top border: ====================</font></p>
            <p>{Enter}
            Next line</font></p>
            <p>Sub
            String for the start of the sub</font></p>
            <p>{Enter
            5} 5 blank lines</font></p>
            <p>End
            Sub String for the end of the sub</font></p>
            <p>{Enter}
            Next line </font></p>
            <p><b>'
            </b>Apostrophe for a comment line for the bottom
            border</font></p>
            <p>{=
            20} Bottom border: ==================== </font></p>
            <p>{UP
            6}{END} Position cursor after the first word Sub</font></p>
            <p>Note:
            There is a space at the end of the string s so that
            the cursor moves one space to the right of the first
            word Sub.</font></p>
        
    
    <p><b>Example</b></font></p>
    
        
            <p>The
            following MSProject macro sends keys to itself. It
            assumes there are at least three objects in the Gantt
            drawing layer of the active project. It applies the
            Gantt Chart full screen and enters some text in the
            THIRD drawing layer object which is assumed to be a
            text box.</font></p>
        
        <p><b>Sub
        SendKeysToTextBox()</b></font></p>
        <p><b>ViewApply
        Name:=&quot;&amp;Gantt Chart&quot;, SinglePane:=True</b></font></p>
        <p><b>SendKeys
        &quot;{F6}{TAB 2}{F2}&quot;</b></font></p>
        <p><b>SendKeys
        &quot;{HOME}+{END}Hello{ENTER}Goodbye {! 10}{F6}&quot;</b></font></p>
        <p><b>End
        Sub</b></font></p>
        <p>Here's
        what the key strokes do:</font></p>
        
            <p>{F6}
            Put focus on the first drawing layer object</font></p>
            <p>{TAB
            2} Put focus on the third object - a text box</font></p>
            <p>{F2}
            Put the text box in edit mode (flashing cursor)</font></p>
            <p>{HOME}+{END}
            Select all the text currently in the text box.</font></p>
            <p>Hello
            Enter some text</font></p>
            <p>{Enter}
            New line</font></p>
            <p>Goodbye
            Enter some text</font></p>
            <p>{!
            10} Enter 10 exclamation points.</font></p>
            <p>{F6}
            Switch focus back to Gantt Chart table</font></p>
        
        <p>In
        general, the {F6} key cycles focus from the top pane, to
        the drawing layer (if the top pane is a Gantt Chart) to
        the bottom pane (the bottom pane has no drawing layer).
        Once the drawing layer has focus, the {TAB} key cycles
        focus though the objects in the order they were created.</font></p>
    
    <H1><i>Lesson
    2 Exercises</i></H1>    
<ol>
<li>Write an
    MSProject macro that lets the user enter some text in an
    input box and assigns it to a string variable. Then the macro
    starts a new instance of NotePad maximized with focus, and
    uses SendKeys to put the string variable contents into the
    new NotePad file. Note that if S is a string variable, then
    you can send it with SendKeys without quotes.</font></li> <br> <br>
    <li>Write an
    MSProject macro that selects and copies the task name column
    from the active project, starts a new maximized instance of
    NotePad with focus, and uses SendKeys to paste the task names
    into NotePad. If you have to, use the macro recorder to find
    out how to apply the Gantt view, select the name column, and
    do Edit Copy. Test it when the active project has tasks and
    when it doesn't.</font></li><br> <br>
    <li>Write an
    MSProject macro that does the same thing as the above
    exercise without using copy/paste. After the macro starts
    NotePad, it uses a For Each loop - for each task T in the
    active project, it uses SendKeys to send the task name as key
    strokes and then sends the {Enter} key to get to the next
    row. Note that T.Name is a string and can be sent using
    SendKeys without quotes around it.</font></li><br> <br>
    <li>Write an
    MSProject macro, to be run from a toolbar button, that enters
    the following text when you are in the Module Editor:</font></li><br> <br>
    <p><b>If Then</b></font></p>
    <p><b>End If</b></font></p>
    <p>It should
    put 2 spaces between &quot;If&quot; and &quot;Then&quot; and
    1 blank row before the &quot;End If&quot; line, and the
    cursor should end up on space to the right of the first
    &quot;If&quot;. The indentation of the two lines should be
    determined by the position of the cursor when the macro was
    run.</font></p></ol>

</FONT></BODY>
</html>

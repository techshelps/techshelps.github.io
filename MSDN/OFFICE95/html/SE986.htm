<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use The Macro Recorder</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Use The Macro Recorder</H2><P CLASS="t">Really.  USE IT!  It's not just a tool for dummies, the macro recorder can save valuable time.  For instance, what's the fastest way to find the name of the property to make a text box scale automatically when a chart is re-sized?  First try right-clicking the text box and selecting Format Object, then click the Properties tab.  This dialog appears:  </P>
<P CLASS="t"><img src="20516.gif"></P>
<P CLASS="t">Searching Help for Object Positioning, Text Boxes, positioning, Size, and Chart turns up a big goose egg.  Ah, what a productive morning!  But, wait a minute.  Because it's interactive, the macro recorder can write code faster than trying to look it up in Help.  Turn it on, and in five seconds, the answer:  set the Placement property to xlMoveAndSize.</P>
<P CLASS="t">Here's an example of code the macro recorder produces and how to adapt it to an existing macro.  To follow along, select a chart and then start the macro recorder to change the font size on the axis.  The recorded code:  </P>
<P>ActiveChart.Axes(xlValue).Select</P>
<P>With Selection.TickLabels.Font</P>
<P>    .Size = 8</P>
<P>End With</P>
<P></P>
<P CLASS="t">becomes...</P>
<P>With DialogSheets("Wiz4").DrawingObjects(GWiz4ChartName)</P>
<P>    .Chart.Axes(xlValue).TickLabels.Font.Size = 8</P>
<P>End With</P>
<P></P>
<P CLASS="t">In this case, it's not a good idea to have the chart active while working with it because the user would see the changes the macro was making.  So, replace the selection code and references to the selection with a With...End With block that has an explicit reference to the chart.  Writing the code this way also makes it independent of what is currently selected.  </P>
<P CLASS="t">The macro recorder can record using absolute or relative references.  Absolute references are useful when code needs to work with the exact same cells every time it runs.  Relative references are useful to write code that could work with cells anywhere on a worksheet.  For example, code that creates a list of the worksheet names in a workbook would place a sheet name in a cell, then move the selection down a row and insert the next name.  The row number is not important, just the fact that the selection must move down one row.  </P>
<P CLASS="t">To record this example using relative references, mark the position in code where the move operation should happen with the menu option Tools/Record Macro/Mark Position for Recording, then select the option Tools/Record Macro/Use Relative References.  Now switch back to the worksheet, place the cursor in the list, and select Tools/Record Macro/Record at Mark.  Use the arrow key to move the selection down a row, then click the Stop Recording button on the floating toolbar.  The recorder will generate a relative reference in the code, as shown below:  </P>
<P>Sub Main()</P>
<P>Dim ws As Object</P>
<P>For Each ws In ActiveWorkbook.Sheets</P>
<P>    ActiveCell.Value = ws.Name</P>
<P>    'The following line was recorded with relative references:</P>
<P>    ActiveCell.Offset(1, 0).Range("A1").Select</P>
<P>Next ws</P>
<P>End Sub</P></FONT>
</FONT></BODY></HTML>

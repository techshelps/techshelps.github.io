<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Custom Dialog Boxes</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">


<FONT FACE="ARIAL,HELVETICA" SIZE="2"><H2 CLASS="h1">Using Custom Dialog Boxes</H2><P CLASS="t">A custom dialog box is designed to display and return information. Once you have built a dialog box in the Dialog Editor and copied it into a macro, you need to add instructions to put information into the dialog box, display the dialog box, and retrieve information from it. Here's an overview of the steps involved:</P>
<P CLASS="ls">    1.    Define the dialog box. You use the Dialog Editor to define the dialog box. The instructions the Dialog Editor generates are called a <I>dialog box definition</I>.</P>
<P CLASS="ls">    2.    Create a dialog record. You use a <B>Dim</B> statement to create a dialog record for a&nbsp;custom dialog box, just as you do for a built-in dialog box.</P>
<P CLASS="ls">    3.    Put values into the dialog box. If the dialog box includes a list box, drop-down list box, or combo box, you probably want to fill it with items. You may also want to place default text in a text box or select check boxes before displaying the dialog box.</P>
<P CLASS="ls">    4.    Display the dialog box. You use a <B>Dialog</B> instruction to display the dialog box. As with built-in dialog boxes, you can use either the <B>Dialog</B> statement or the <B>Dialog</B><B>()</B> function.</P>
<P CLASS="ls">    5.    Retrieve values from the dialog box. The settings of dialog box controls are stored in the dialog record, so you retrieve information from the dialog record after the dialog box is closed. </P>
<P></P>
<H3 CLASS="h3"><A NAME="sec0"></A>The Dialog Box Definition</H3><P CLASS="t">A dialog box definition is the set of instructions that defines the contents of a dialog box as well as its size and position. When you create a dialog box in the Dialog Editor, it generates these instructions.</P>
<P CLASS="t">Dialog box definition instructions are enclosed within the <B>Begin Dialog</B><FONT FACE="Symbol"><B>¼</B></FONT><B>End Dialog</B> statement. Here is the syntax:</P>
<P CLASS="syn"><B>Begin Dialog UserDialog</B> [<I>HorizPos</I>, <I>VertPos</I>,] <I>Width</I>, <I>Height</I>,&nbsp;<I>Title$</I><BR>[,&nbsp;.<I>DialogFunction</I>]<BR>    <I>Series of instructions to define controls in the dialog box<BR></I><B>End Dialog</B></P>
<P CLASS="t">The optional <I>HorizPos</I> and <I>VertPos</I> arguments position the dialog box; if they are omitted, Word displays the dialog box at the center of the Word window. <I>Width</I> and <I>Height</I> size the dialog box. The <I>Title$</I> argument is the text that appears in the dialog box title bar. If you do not specify <I>HorizPos</I> and <I>VertPos</I>, you can omit <I>Title$</I>; you can omit <I>Title$</I> even if you specify <I>HorizPos</I> and <I>VertPos</I> if you also specify .<I>DialogFunction</I>. If you omit <I>Title$</I>, "Microsoft Word 6.0" appears in the title bar. The <I>.DialogFunction</I> argument is used only if you want to create a dynamic dialog box. For information on dynamic dialog boxes, see "Using Dynamic Dialog Boxes" later in this chapter. For complete information, see <B>Begin Dialog</B><FONT FACE="Symbol"><B>¼</B></FONT><B>End Dialog </B>in Part 2, "WordBasic Reference."</P>
<P CLASS="t">The following dialog box includes every dialog box control.</P>
<P CLASS="a">    <img src="ATR0517.gif"></P>
<P CLASS="t">Here is the dialog box definition that defines the dialog box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 612, 226, "Every Dialog Box Control", \
        .DlgFunction
    ComboBox 8, 76, 176, 111, MyList$(), .ComboBox1
    CheckBox 198, 79, 180, 16, "&amp;Check Box", .CheckBox1
    ListBox 195, 102, 189, 83, MyList$(), .ListBox1
    DropListBox 417, 5, 179, 108, MyList$(), .DropListBox1
    Text 417, 186, 35, 13, "&amp;Text"
    TextBox 417, 199, 179, 18, .TextBox1
    GroupBox 7, 4, 177, 65, "&amp;Group Box"
    OptionGroup  .OptionGroup1
        OptionButton 17, 16, 148, 16, "Option Button &amp;1"
        OptionButton 17, 33, 148, 16, "Option Button &amp;2"
        OptionButton 17, 50, 148, 16, "Option Button &amp;3"
    Picture 199, 7, 181, 62, "BIRD", 1, .Picture1
    FilePreview 417, 31, 179, 148, .fileprev
    PushButton 10, 199, 108, 21, "&amp;PushButton"
    CancelButton 131, 199, 108, 21
    OKButton 253, 199, 108, 21
End Dialog
</PRE>
<P CLASS="t">Note that each dialog box control has its own instruction within the dialog box definition. The first pair of numbers that follows each instruction for a control positions the control relative to the upper-left corner of the dialog box; the second pair defines the control's width and height.</P>
<P CLASS="t">Controls that store a value, such as combo boxes and check boxes, include in their instructions identifiers that begin with a period. For example, the <B>CheckBox </B>instruction includes the identifier .CheckBox1. These identifiers are used to access the control's value or setting in a dialog record. </P>
<P CLASS="t">To see the full syntax for a dialog box definition statement such as <B>CheckBox</B> or <B>ListBox</B>, see the corresponding entry in Part 2, "WordBasic Reference."</P>
<H3 CLASS="h3"><A NAME="sec1"></A>Creating a Dialog Record</H3><P CLASS="t">A dialog record stores the values that you put into and retrieve from a dialog box. A dialog record for a custom dialog box is defined in much the same way as one for a built-in Word dialog box:</P>
<P CLASS="syn"><B>Dim</B> <I>DialogRecord</I> <B>As UserDialog</B></P>
<P CLASS="t">The <I>DialogRecord</I> argument can be any variable name. <B>As UserDialog</B> identifies the dialog record as the record for a custom dialog box (just as As FormatFont in a&nbsp;<B>Dim </B>instruction identifies a dialog record for the Font dialog box). You can include as many custom dialog boxes in a macro as you need, but you can define only one <B>UserDialog </B>record at a time.</P>
<H3 CLASS="h3"><A NAME="sec2"></A>Placing Values into a Dialog Box</H3><P CLASS="t">It's often necessary to place initial values into a custom dialog box and to specify the default settings of some controls before the dialog box is displayed. The values you can place in a dialog box and the settings you can control include the following:</P>
<UL><LI>    The items in a list box, drop-down list box, or combo box</LI><LI>    The default text in a text box</LI><LI>    Check box values</LI><LI>    The initial focus (the item that has the focus when the dialog box is first displayed)</LI></UL><P></P>
<H4 CLASS="h4"><A NAME="sec3"></A>Placing Items into a List Box, Drop-Down List Box, or Combo Box</H4><P CLASS="t">The items displayed in a list box, drop-down list box, or combo box control are&nbsp;stored as elements of an array. Therefore, before you display a dialog box containing one of these controls, you must define an array and fill it with the items to be listed; you then refer to the array in the instruction for the control in the dialog box definition. For example, if you want a dialog box to present a list of fonts, as in the following illustration, you first create an array to hold the font names.</P>
<P CLASS="a">    <img src="ATR0518.gif"></P>
<P CLASS="t">Here are the instructions that define and fill an array, FontArray$(), for the font names:</P>
<P CLASS="spacing"><BR></P>
<PRE>lastElement = CountFonts() - 1
Dim FontArray$(lastElement)                'Define the array
For count = 0 To lastElement                'Fill the array
    FontArray$(count) = Font$(count + 1)
Next
</PRE>
<P CLASS="t">To place the array elements into a list box, you refer to the array in the <B>ListBox </B>instruction. For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>ListBox 10, 25, 160, 84, FontArray$(), .ListBox1
</PRE>
<P CLASS="t">Putting it all together, here are the complete instructions for displaying the Show Font List dialog box in the preceding illustration. The array is defined first, then the dialog box, and finally the dialog record used in the <B>Dialog</B><B>()</B> instruction to display the dialog box.</P>
<P CLASS="spacing"><BR></P>
<PRE>lastElement = CountFonts() - 1
Dim FontArray$(lastElement)                'Define the array
For count = 0 To lastElement                'Fill the array
    FontArray$(count) = Font$(count + 1)
Next
Begin Dialog UserDialog 362, 122, "Show Font List"
    ListBox 10, 9, 206, 100, FontArray$(), .FontList
    OKButton 265, 7, 88, 21
    CancelButton 265, 31, 88, 21
End Dialog
Dim dlg As UserDialog                    'Define the dialog record
buttonchoice = Dialog(dlg)                'Display the dialog box
</PRE>
<H4 CLASS="h4"><A NAME="sec4"></A>Placing Default Text in a Text Box and Setting Check Box Values</H4><P CLASS="t">A text box&nbsp;—&nbsp;a box in which the user can enter text&nbsp;—&nbsp;is usually empty when the dialog box is first displayed. But in some cases, you may want to place default text in a text box. For example, in the following dialog box the user is prompted to type his or her name and phone number. Most of the time that text will not change, so rather than force the user to type the text each time the dialog box is displayed, you can make the name and phone number default text.</P>
<P CLASS="a">    <img src="ATR0519.gif"></P>
<P CLASS="t">You place default text in a text box (or combo box) by assigning it to the dialog identifier that corresponds to the text box. Recall that the dialog record contains a value corresponding to the identifier for each dialog box control that can return a value. The identifier is part of the instruction that defines the control. The following instructions define the text boxes in the Personal Info dialog box shown in the previous illustration:</P>
<P CLASS="spacing"><BR></P>
<PRE>TextBox 7, 21, 160, 18, .Name$
TextBox 7, 64, 160, 18, .Phone$
</PRE>
<P CLASS="t">Note that .Name$ and .Phone$ are the identifiers for the text boxes (the dollar signs ($) aren't necessary, but indicate that the fields in the dialog record corresponding to these identifiers hold string values). You could use the following instructions to assign default text to these identifiers, where PersonalInfoDlgRec is the name of the dialog record:</P>
<P CLASS="spacing"><BR></P>
<PRE>PersonalInfoDlgRec.Name&nbsp;=&nbsp;"Michel Gabor"
PersonalInfoDlgRec.Phone&nbsp;=&nbsp;"(206) 555-1234"
</PRE>
<P CLASS="t">Of course, you must define a dialog record before you can assign values to identifiers within it. Here are the complete instructions to display the dialog box:</P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 320, 102, "Personal Info"
    Text 7, 5, 89, 13, "Your &amp;Name:"
    TextBox 7, 21, 160, 18, .Name$
    TextBox 7, 64, 160, 18, .Phone$
    Text 7, 47, 157, 13, "Your &amp;Phone Number:"
    OKButton 225, 3, 88, 21
    CancelButton 225, 27, 88, 21
End Dialog
Dim PersonalInfoDlgRec As UserDialog            'Define dialog record
PersonalInfoDlgRec.Name$ = "Michel Gabor"    'Assign value to .Name$
PersonalInfoDlgRec.Phone$ = "(206) 555-1234"    'Assign value to .Phone$
x = Dialog(PersonalInfoDlgRec)                'Display dialog box
</PRE>
<P CLASS="t">You can use the same method of assigning values to text boxes to specify the initial setting of a check box. After defining the dialog record, you assign one of three values to the identifier for the check box: 0 (zero) to clear the check box (this is the default), 1 to select the check box, and –1 to make it indeterminate.</P>
<H4 CLASS="h4"><A NAME="sec5"></A>Setting the Initial Focus and Tab Order</H4><P CLASS="t">When a control is active, it is said to have the <I>focus</I>, which means that you can act on it. For example, if a text box has the focus, you can type in it. You can use the tab key to move the focus and activate controls in a dialog box. The <I>tab order</I> is the order in which controls become active when you use the tab key to move to them. The tab key is particularly useful for dialog boxes that contain more than one text box; if you're typing in a text box, it's natural to use the tab key to move to the next text box.</P>
<P CLASS="t">The control that has the focus when the dialog box is first displayed is said to have the initial focus. The initial focus is important in dialog boxes in which the user is prompted to type something. For example, in the dialog box shown in the following illustration, the initial focus should be on the Fax Number text box. If it isn't and the user starts typing, nothing will happen; the dialog box will seem not to work properly.</P>
<P CLASS="a">    <img src="ATR0520.gif"></P>
<P CLASS="t">The order of the instructions within the dialog box definition determines the initial focus and the tab order: The first control in a dialog box definition has the initial focus, the second control has the focus next, and so on. Items that cannot be active, such as the text control, are ignored. (On the Macintosh, only text box and combo box controls can have the focus.)</P>
<P CLASS="t">Here are the instructions for the Fax Info dialog box shown in the previous illustration. Note that the first instruction is a <B>Text</B> instruction. Since a text control cannot have the focus, the initial focus is on the text box defined by the <B>TextBox</B> instruction.</P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 370, 92, "Fax Info"
    Text 14, 7, 96, 13, "Fax Number:"
    TextBox 14, 23, 160, 18, .TextBox1
    CheckBox 14, 57, 211, 16, "Add To Fax Number List", .FaxList
    OKButton 270, 6, 88, 21
    CancelButton 270, 30, 88, 21
End Dialog
Dim dlg As UserDialog
buttonchoice = Dialog(dlg)

</PRE>
<H3 CLASS="h3"><A NAME="sec6"></A>Displaying the Dialog Box</H3><P CLASS="t">You use the <B>Dialog</B> statement or the <B>Dialog</B><B>()</B> function to display a custom dialog&nbsp;box in the same way that you can use them to display a dialog box built into&nbsp;Word.</P>
<P CLASS="t">In general, the <B>Dialog</B><B>()</B> function rather than the <B>Dialog</B> statement is the best choice for custom dialog boxes. If you use the <B>Dialog</B> statement, Word generates an error if the user chooses the Cancel button in the dialog box. You can use the <B>On Error</B> statement to handle this error, but you can avoid it entirely by using the <B>Dialog</B><B>()</B> function. Also, if your dialog box contains a push button, you need to use the <B>Dialog</B><B>()</B> function to determine whether the push button was chosen (or which one was chosen if the dialog box contains more than one).</P>
<P CLASS="t">For complete information on the <B>Dialog </B>statement and the <B>Dialog</B><B>()</B><B> </B>function, see the entry in Part 2, "WordBasic Reference."</P>
<H4 CLASS="h4"><A NAME="sec7"></A>The Default Command Button</H4><P CLASS="t">You can use the <I>DefaultButton </I>argument of the <B>Dialog</B> statement or the <B>Dialog</B><B>()</B> function to determine the default command button. The default command button is the button that is highlighted when the dialog box is first displayed. It is also the command button that is chosen if a control other than a command button has the focus when the user presses ENTER. Unless you specify otherwise, the OK button is the default command button.</P>
<P CLASS="t">For the <I>DefaultButton</I> argument to have any effect, the instruction for the specified button must be preceded in the dialog box definition by an instruction for a non-command button dialog box control that can receive the focus, such as a list box or check box. (Note that because a text control cannot receive the focus, it does not meet this criterion.) Otherwise, the first button in the dialog box definition is the default command button.</P>
<H3 CLASS="h3"><A NAME="sec8"></A>Retrieving Values from the Dialog Box</H3><P CLASS="t">Once a custom dialog box has been displayed and the user has closed it, the macro can retrieve the settings of the dialog box controls. These values are stored in the dialog record, so retrieving values is a matter of accessing the appropriate identifiers in the dialog record.</P>
<P CLASS="t">The following table shows the values that different dialog box controls store in the dialog record.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="274pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="thf"><B>Control</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="th"><B>Value stored in the dialog record</B></P></FONT></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Check box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">If the check box is selected, 1; if the check box is clear, 0 (zero); if the check box is indeterminate, –1</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Option group</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A number corresponding to the option button selected</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">List box or drop-down list box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">The number of the item chosen, beginning with 0 (zero)</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Combo box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A text string (what the user typed or selected in the list of items)</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">Text box</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="ARIAL,HELVETICA" SIZE="2"><P CLASS="tt">A text string</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H4 CLASS="h4"><A NAME="sec9"></A>Examples</H4><P CLASS="t">The following example tests the value of the Add To Fax Number List check box in the Fax Info dialog box (shown in the following illustration) to determine whether the user selected that control.</P>
<P CLASS="a">    <img src="ATR0520A.gif"></P>
<P CLASS="t">Two nested <B>If</B> conditionals are used to test two conditions. The first <B>If</B> instruction uses the condition buttonchoice = -1 to test whether the user chose the OK button to dismiss the dialog box (<B>Dialog</B><B>()</B> returns –1 if the user chose the OK button). If this condition is true, the second <B>If</B> instruction tests the value of the Add To Fax Number List check box, which is stored in dlg.FaxList. If the check box is selected, meaning the fax number should be added to the list of fax numbers, the dialog record identifier for the check box is equal to 1. The macro then runs the instructions to add the fax number to the list of numbers.</P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 370, 92, "Fax Info"
    Text 14, 7, 96, 13, "Fax Number:"
    TextBox 14, 23, 160, 18, .TextBox1
    CheckBox 14, 57, 211, 16, "Add To Fax Number List", .FaxList
    OKButton 270, 6, 88, 21
    CancelButton 270, 30, 88, 21
End Dialog
Dim dlg As UserDialog
buttonchoice = Dialog(dlg)
If buttonchoice = -1 Then
    If dlg.CheckBox1 = 1 Then
        'Series of instructions to add fax number to list.
    End If
End If
</PRE>
<P CLASS="t">The following example formats the selected text with the font selected in the Show Font List dialog box shown in the following illustration.</P>
<P CLASS="a">    <img src="ATR0520B.gif"></P>
<P CLASS="t">As in the previous example, the <B>If</B> instruction tests whether the user chose the OK button to dismiss the dialog box (rather than the Cancel button to indicate that the dialog box should not carry out an action). If the user chose the OK button, the instruction Font FontArray$(dlg.FontList) formats the selection with or prepares to insert text in the font the user selected in the dialog box. The FontArray$() array stores the names of the fonts displayed in the dialog box. The dlg.FontList setting in the dialog record contains the number of the font selected in the list box. </P>
<P CLASS="spacing"><BR></P>
<PRE>Begin Dialog UserDialog 362, 122, "Show Font List"
    ListBox 10, 9, 206, 100, FontArray$(), .FontList
    OKButton 265, 7, 88, 21
    CancelButton 265, 31, 88, 21
End Dialog
Dim dlg As UserDialog                    'Define the dialog record
buttonchoice = Dialog(dlg)                'Display the dialog box
If buttonchoice = - 1 Then
    Font FontArray$(dlg.FontList)        'Format selected text
End If
</PRE></FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Err Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Hevetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1><A NAME="sec267"></A>Err Object</H1><P CLASS="t">  </P>
<H2><A NAME="sec268"></A>Description</H2><P>Contains information about run-time errors. Accepts the <B>Raise</B> and <B>Clear </B>methods for generating and clearing run-time errors.</P>
<H2><A NAME="sec269"></A>Syntax</H2><P><B>Err</B>[<B>.</B>{<I>property</I> | <I>method</I>}]</P>
<H2><A NAME="sec270"></A>Remarks</H2><P>The properties of the <B>Err</B> object are set by the generator of an error — Visual Basic, an OLE object, or the Visual Basic programmer.</P>
<P>The default property of the <B>Err </B>object is <B>Number. </B>Its value corresponds the value returned by the Err function in previous versions of Visual Basic. Assigning an error code to the <B>Number</B> property corresponds to specifying a number in the <B>Err</B> statement in previous versions of Visual Basic. Since the default property can be represented by the object name <B>Err</B>, existing code that expects a valid error number to be returned or set by <B>Err</B> doesn’t have to be modified. While the value of <B>Err.Number</B> is compatible with previous versions of Basic, it now contains a <B>Long</B> integer and can be used by an OLE Automation object to return an OLE SCode.</P>
<P>When a run-time error occurs, the properties of the <B>Err</B> object are filled with information that uniquely identifies the error and information that can be used to handle it. To generate a run-time error in your code, use the <B>Raise </B>method.</P>
<P>The <B>Err</B> object’s properties are reset to zero or zero-length strings ("") after any form of the <B>Resume</B> or <B>On Error</B> statement and after an <B>Exit Sub,</B> <B>Exit Function</B>, or <B>Exit Property</B> statement within an error-handling routine. The <B>Clear</B> method can be used to explicitly reset <B>Err</B>.</P>
<P CLASS="t">  </P>
<P CLASS="t"></P>
<P><B>Caution</B>   If you set up an error handler using <B>On Error GoTo</B> and that handler calls another procedure, the properties of the <B>Err</B> object may be reset to zero and zero-length strings. To retain values for later use, assign the values of <B>Err</B> properties to variables before calling another procedure, or before executing <B>Resume</B>, <B>On Error</B>, <B>Exit Sub</B>, <B>Exit Function</B>, or <B>Exit Property</B> statements.</P>
<P CLASS="t"></P>
<P CLASS="t">  </P>
<P>When writing code for an OLE Automation object in Visual Basic, use the <B>Raise</B> method (rather than the <B>Error</B> statement) to generate run-time errors. Whether or not to use the <B>Raise</B> method in new non-OLE Automation code depends on the richness of the information you want to return. In code that uses <B>Error</B> statements instead of the <B>Raise</B> method to generate errors, the properties of the <B>Err </B>object are assigned the following default values when <B>Error</B> is executed:</P>
<P CLASS="t">  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="250pt" VALIGN="TOP"></COLGROUP><TBODY><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Property</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Value</B></P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Number</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Value specified as argument to <B>Error</B> statement. Can be any valid error number.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Source</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">Name of the current Visual Basic project.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>Description</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">A string corresponding to the return of the <B>Error </B>function for the specified <B>Number</B>, if this string exists. If the string doesn’t exist, <B>Description</B> contains “Application-defined or object-defined error”.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>HelpFile</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The fully qualified drive, path, and filename of the Visual Basic Help file.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>HelpContext</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">The Visual Basic Help file context ID for the error corresponding to the <B>Number</B> property.</P></TD></TR><TR><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t"><B>LastDLLError</B></P></TD><td VALIGN="TOP">
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P CLASS="t">On 32-bit Microsoft Windows operating systems only, contains the system error code for the last call to a dynamic-link library (DLL). The <B>LastDLLError</B> property is read-only.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>There is no need to change existing code that used <B>Err </B>and the <B>Error </B>statement. However, mixing use of the <B>Err</B> object and the <B>Error</B> statement can result in unintended consequences. For instance, even if you fill in the <B>Err</B> object’s properties, they are reset to the default values indicated in the preceding table as soon as the <B>Error</B> statement is executed. Although you can still use the <B>Error</B> statement to generate Visual Basic run-time errors, it is retained principally for compatibility with existing code. Use the <B>Err </B>object and the <B>Raise</B> and <B>Clear</B> methods for system errors and in new code, especially for OLE Automation objects.</P>
<P>The <B>Err </B>object is an intrinsic object with global scope — there is no need to create an instance of it in your code.</P>
<H2><A NAME="sec271"></A>Properties</H2><P><B>Description</B> Property, <B>HelpContext</B> Property (Visual Basic), <B>HelpFile</B> Property (Visual Basic), <B>LastDLLError</B> Property, <B>Number</B> Property, <B>Source</B> Property.</P>
<H2><A NAME="sec272"></A>Methods</H2><P><B>Clear</B> Method, <B>Raise</B> Method.</P>
<H2><A NAME="sec273"></A>See Also</H2><P><B>Error</B> Function, <B>Error</B> Statement, <B>On Error </B>Statement, <B>Resume</B> Statement.</P>
<H2><A NAME="sec274"></A>Example</H2><P>This example uses the properties of the <B>Err</B> object in constructing an error-message dialog box. Note that when you generate a Visual Basic error with the <B>Raise</B> method, if you use the <B>Clear</B> method first, Visual Basic’s default values become the properties of the <B>Err</B> object. </P>
<P CLASS="t">  </P>
<P CLASS="spacing"><BR></P>
<PRE>' If an error occurs, construct an error messageError Resume Next    ' Defer error handling..Clear.Raise 6        ' Generate an "Overflow" error.
' Check for error, then show message.Err.Number &lt;&gt; 0 Then
    Msg = "Error # " &amp; Str(Err.Number) &amp; " was generated by " _
        &amp; Err.Source &amp; Chr(13) &amp; Err.Description
    MsgBox Msg, , "Error", Err.Helpfile, Err.HelpContextIf
</PRE>
<P CLASS="t">  </P>
<P CLASS="t"> </P>
</FONT></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Worksheet Functions in a Procedure</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><body bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Hevetica" SIZE="2">

<H2>Using Worksheet Functions in a Procedure</H2><P CLASS="t">Many worksheet functions can be used directly in Visual Basic procedures; the IF&nbsp;function is one exception, though, as <B>If</B> is also a keyword in Visual Basic. You can use the <B>Application</B> qualifier to run a Microsoft Excel worksheet function rather than a Visual Basic function. For example, the following procedure causes a "Sub or Function not defined" error because it doesn't identify ACOS as a worksheet function.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub MissingObject()
    x = Acos(-1)
End Sub
</FONT></PRE>
<P CLASS="t">The following procedure successfully uses the Microsoft Excel worksheet function ACOS because the code first refers to the <B>Application</B> object.</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="Courier" SIZE="2">Sub ReturnArccosine()
    x = Application.Acos(-1)
End Sub
</FONT></PRE>
<P CLASS="t">The only worksheet function that requires you to explicitly specify that you're referring to either the function's Microsoft Excel version or its Visual Basic version is the LOG function, because both function names are spelled the same way. The Microsoft Excel LOG function returns the logarithm of a number to the base you specify. The Visual Basic <B>Log</B> function returns the natural logarithm of a specified number.</P></FONT>
</FONT></BODY></HTML>

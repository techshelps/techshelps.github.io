<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugger</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefwhatsnewdebuggervisualc6.0"></a>Debugger</h1>
<p>
The following debugger features are new for Visual C++ 6.0.</p>
<p class=label>
<b><a name="wn6afxdumpstack_for_diagnosing_field-installed_applications"></a>AfxDumpStack for Diagnosing Field-Installed Applications</b></p>
<p>
The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefAfxDumpStack">
</object><a href=JavaScript:alink_1.Click()>AfxDumpStack</a> function generates an image of the current stack and dumps that image to the debug output device (for example, <b>afxDump</b>). This feature provides a mechanism with which you can get diagnostic information even if the debugger is not installed on the end user's machine. It can be used in debug and non-debug versions of the MFC libraries.</p>
<p class=label>
<b><a name="wn6edit_and_continue"></a>Edit and Continue</b></p>
<p>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowUsingEditContinue">
</object><a href=JavaScript:alink_2.Click()>Edit and Continue</a> allows you to incorporate common, simple edits during a debugging session without having to quit the session, rebuild, and restart the debugger. Changes are recompiled and applied to the executing application in memory.</p>
<p class=label>
<b><a name="wn6getlasterror()_value_displayed_as_register"></a>GetLastError() Value Displayed as Register</b></p>
<p>
This is a new pseudo-register called <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefViewingLastErrorCodeForCurrentThread">
</object><a href=JavaScript:alink_3.Click()>ERR</a> that <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefViewingLastErrorCodeForCurrentThread">
</object><a href=JavaScript:alink_4.Click()>displays the last error code for the current thread</a>. This pseudo-register is not an actual hardware register, but is displayed as though it were a hardware register. It retrieves the same value as calling the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_5.Click()>GetLastError</a> function. Using it in conjunction with the <b>,hr</b> modifier produces very useful output, showing the error message corresponding to each error code. If this register is not found, you should prefix this register with an @ sign. </p>
<p class=label>
<b><a name="wn6guids_decoded_for_display"></a>GUIDs Decoded for Display</b></p>
<p>
Types based on GUIDS (including IIDs, CLSIDs, and REFIIDs) are displayed by name (if found in the registry), or failing that, in the normal GUID hex form.</p>
<p class=label>
<b><a name="wn6improved_disassembler_output_(undecorated_symbols)"></a>Improved Disassembler Output (Undecorated Symbols)</b></p>
<p>
The <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcovrDisassemblyWindow">
</object><a href=JavaScript:alink_6.Click()>disassembly window</a> and callstack window now undecorate C++ names where they did not before, such as when displaying system callstacks from Windows NT DBG files. You now see the C++ name with a proper argument list. </p>
<p class=label>
<b><a name="wn6improved_v-table_and_function_pointer_display"></a>Improved V-Table and Function Pointer Display</b></p>
<p>
Pointers to functions and v-table entries are now displayed symbolically wherever possible, including parameters. Previously, these items were displayed as just hex addresses in Visual C++ 5.0.</p>
<p class=label>
<b><a name="wn6in-process_remote_procedure_calls"></a>In-Process Remote Procedure Calls</b></p>
<p>
RPC debugging now works with in-process remote procedure calls (RPCs), as well as out-of-process RPCs. See <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefDebuggingCOMClientsServersUsingRPC">
</object><a href=JavaScript:alink_7.Click()>Debugging COM Clients and Servers Using RPC Debugging</a>.</p>
<p class=label>
<b><a name="wn6load_coff_and_exports_option"></a>Load COFF &amp; Exports Option</b></p>
<p>
The new <b>Load COFF &amp; Exports</b> option allows additional debugging information to be loaded when the standard CodeView format debugging information is not available. This option enables you to see some useful symbols in the call stack even when CodeView debug information is not available. This option is useful for seeing window messages, for WindowProcs and COM objects, and when marshalling is involved. See <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowUsingCOFF-FormatInformationOrDLLExports">
</object><a href=JavaScript:alink_8.Click()>Using COFF-Format Information or DLL Exports</a>.</p>
<p>
<object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_dumpbin_.2f.HEADERS">
</object><a href=JavaScript:alink_9.Click()>dumpbin /headers</a>: To see what types (formats) of debug information are in a DBG file, issue the command<code> dumpbin /headers </code>against that DBG file and search the output for the Debug Directories section. Then see whether there is an entry of type coff. Type cv refers to CodeView.</p>
<p>
<object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_dumpbin_.2f.EXPORTS">
</object><a href=JavaScript:alink_10.Click()>dumpbin /exports</a>: If there is no CodeView or COFF debugging information available, (for example, when you are in Windows 95 system files, which don't have .dbg files), the <b>Load COFF &amp; Exports</b> option converts the export table of each loaded DLL into a symbol. To see what sort of symbols this will add for a particular DLL, issue the<code> dumpbin /exports </code>command against that DLL file and examine the output. These DLL files are any 32-bit system DLLs; for example, Ole32.dll or Kernel32.dll. Issuing<code> dumpbin /exports </code>enables you to see the exact function name, so that you can set a breakpoint on that function. For example, MessageBoxA is an actual function name; you might see the function written as "MessageBox" elsewhere, but this output shows that the actual function name you need to set the breakpoint on is MessageBoxA. You can see the exact function name even if the name includes non-alphanumeric characters, such as a period or underscore.</p>
<p class=label>
<b><a name="wn6masm_hex_syntax_supported"></a>MASM Hex Syntax Supported</b></p>
<p>
The debugger now supports MASM-format hex numbers in expressions, such as 1234h. This can make operations involving the Disassembly window easier, such as viewing DataTips.</p>
<p class=label>
<b><a name="wn6mmx_register_display"></a>MMX Register Display</b></p>
<p>
You can now display MMX registers in the Watch and Quickwatch windows using the symbols MM0-MM7. MMX registers are 64-bit integer registers and will be displayed on all x86 machines, whether they support the MMX instructions or not. See <object id=alink_11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowModifyingValueOfVariableOrContentsOfRegister">
</object><a href=JavaScript:alink_11.Click()>Modifying the Value of a Variable or Contents of a Register</a>.</p>
<p class=label>
<b><a name="wn6module_list_dialog_box"></a>Module List Dialog Box</b></p>
<p>
This new dialog box displays the address, name, path, and load order for all DLLs used by your program. You can use this dialog box to <object id=alink_12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowHowCanITellWhichDLLMyProgramCrashedIn">
</object><a href=JavaScript:alink_12.Click()>determine which DLL your program crashed in</a>.</p>
<p class=label>
<b><a name="wn6new_formatting_symbols"></a>New Formatting Symbols</b></p>
<p>
The following are new <object id=alink_13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcovrSymbolsForWatchVariables">
</object><a href=JavaScript:alink_13.Click()>symbols for Watch variables</a>: hr, st, mq, wm, and wc.</p>
<p class=label>
<b><a name="wn6thread_information_block"></a>Thread Information Block</b></p>
<p>
This is a new pseudo-register that displays the Thread Information Block (TIB, also known as a TEB) for the current thread. If this register is not found, you should prefix this register with an @ sign. For more information on the content of TIBs, see "Under the Hood," <i>Microsoft Systems Journal</i> May 96.</p>
<p class=label>
<b><a name="wn6variants_decoded_for_display"></a>Variants Decoded for Display</b></p>
<p>
Variants are automatically displayed in their correct form: integers are displayed numerically, BSTRs as strings, and so on. The type of the variant is also displayed.</p>
<p>
<a href="vcrefwhatsnewforvisualcversion6.0.htm">Back to What's New Overview</a></p>
</font></BODY>
</HTML>

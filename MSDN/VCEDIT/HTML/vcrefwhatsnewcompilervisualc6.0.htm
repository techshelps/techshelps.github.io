<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefwhatsnewcompilervisualc6.0"></a>Compiler</h1>
<p>
The following compiler features are new for Visual C++ 6.0.</p>
<p class=label>
<b><a name="wn6assumekeyword"></a>__assume Keyword</b></p>
<p>
The <b>__assume</b> keyword is a hint to the optimizer that says that the expression passed as the argument is true until the expression is killed. This keyword can be used in conjunction with <b>assert()</b> during debug builds to ensure that the expression used with <b>__assume</b> is always true. Specifying <b>__assume</b> for an expression enables the compiler to perform additional optimizations, the safety of which could not be determined without this hint from the programmer. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcref__assume">
</object><a href=JavaScript:alink_1.Click()>__assume</a> in the <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b><a name="wn6betterinliningcontrol"></a>Better Inlining Control</b></p>
<p>
For better inline control, there are three new keywords: <b>inline</b>, <b>__inline</b>, and <b>__forceinline</b>. The <b>inline</b> and <b>__inline</b> keywords are hints to the compiler to try to inline the function; the optimizer decides whether inlining should be performed based upon optimization switches (optimizing for size vs. speed) and other heuristics. To provide better control over which functions are inlined, the <b>__forceinline</b> keyword is now supported. This keyword tells the compiler to go beyond the current inlining heuristics and to absolutely inline the function(s) to which it is applied, except in cases in which inlining would be impossible. For more information, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_langref_inline.2c_.__inline">
</object><a href=JavaScript:alink_2.Click()>inline, __inline, __forceinline</a> in the <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b><a name="wn6dependencies_now_stored_in_a_text_file"></a>Dependencies Now Stored in a Text File</b></p>
<p>
Exported makefiles now put the file dependencies in a separate, editable text file.</p>
<p class=label>
<b><a name="dependencyfilegeneration"></a>Dependency (.dep) File Generation</b></p>
<p>
This feature provides more control over writing dependency information when you <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_asug_Exporting_a_Makefile">
</object><a href=JavaScript:alink_3.Click()>export a makefile</a>. You can set options for this feature in the following places:
<ul type=disc>
<li>
<b>ExportMakefile(s)</b> dialog box (<b>Project</b> menu, <b>Export Makefile…</b> command), <b>Write dependencies when writing makefiles</b> check box<br><br></li>
<li>
<b>Project</b> <b>Settings</b> dialog box (<b>Project</b> menu, <b>Options</b> command), <b>Allow per-configuration dependencies</b> check box<br><br></li>
<li>
<b>Build</b> tab of the <b>Options</b> dialog box (<b>Tools </b>menu, <b>Options</b> command), <b>Always write dependencies when writing makefiles</b> check box</li>
</ul>
<p class=label>
<b><a name="wn6new_and_improved_warnings"></a>New and Improved Warnings</b></p>
<p>
New compiler warnings have been added to help catch common programming errors.</p>
<p class=label>
<b><a name="wn6placement_form_of_operator_delete"></a>Placement Form of Operator Delete</b></p>
<p>
The compiler now supports the placement form of operator <b>delete</b>. Consequently, an exception, thrown during the initialization of an object, calls the proper <b>delete</b> function when the placement <b>new</b> is used.</p>
<p>
For more information, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_langref_delete_Operator">
</object><a href=JavaScript:alink_4.Click()>delete Operator</a> or <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_langref_new_Operator">
</object><a href=JavaScript:alink_5.Click()>new Operator</a> in the <i>Visual C++ Programmer's Guide</i>, or <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_pluslang_The_operator_new_Function">
</object><a href=JavaScript:alink_6.Click()>operator new Function</a> in the <i>C++ Language Reference</i>.</p>
<p class=label>
<b><a name="wn6pragma_warning"></a>Pragma Warning</b></p>
<p>
You can use <b>#pragma warning (push,</b> <i>n</i><b>)</b> and <b>#pragma warning (pop)</b> to push the current warning state (enabled or disabled) onto a stack and pop it off again. <i>n</i> represents a <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_warning">
</object><a href=JavaScript:alink_7.Click()>warning</a> level whose state is to be pushed. You can use this feature when writing headers to ensure that a programmer does not compile the header with a warning level higher than you intend.</p>
<p class=label>
<b><a name="wn6run-time_error_checks"></a>Run-Time Error Checks</b></p>
<p>
The Visual C++ compiler can embed certain run-time checks in code to detect common errors. The <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.Gd.2c_2f.Gr.2c_2f.Gz">
</object><a href=JavaScript:alink_8.Click()>/GZ compiler option</a> enables these checks. Run-time checks can only be used in debug (/Od) builds. There are new checks for auto-initialization of local variables, function pointer call stack validation, and call stack validation.</p>
<p class=label>
<b><a name="wn6throughput_improvements"></a>Throughput Improvements</b></p>
<p>
Compile-time throughput in projects with large precompiled header files (.pch) is faster. Compiler throughput on debug projects is as much as 30% faster, and on non-debug projects, as much as 15% faster.</p>
<p>
<a href="vcrefwhatsnewforvisualcversion6.0.htm">Back to What's New Overview</a></p>
</font></BODY>
</HTML>

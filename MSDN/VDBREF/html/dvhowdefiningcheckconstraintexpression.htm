<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining a Check Constraint Expression</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvhowdefiningcheckconstraintexpression"></a>Defining a Check Constraint Expression</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvhowDefiningCheckConstraintExpression_C;dvhowDefiningCheckConstraintExpressionC">
</object></p>
<p>
When you attach a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcheckconstraint">check constraint</a> to a table or column, you must include an SQL expression. For details about this operation, see <a href="dvhowattachingnewcheckconstrainttotableorcolumn.htm">Attaching a New Check Constraint to a Table or Column</a>.</p>
<p>
You can create a simple constraint expression to check data for a simple condition; or you can create a complex expression, using Boolean operators, to check data for several conditions. For example, suppose the <code>authors</code><i> </i>table has a <code>zip</code><i> </i>column where a 5-digit character string is required. This sample constraint expression guarantees that only 5-digit numbers are allowed:</p>
<pre><code>zip LIKE '[0-9][0-9][0-9][0-9][0-9]'
</code></pre>
<p>
Or suppose the <code>sales</code> table has a column called <code>qty</code><i> </i>which requires a value greater than 0. This sample constraint guarantees that only positive values are allowed:</p>
<pre><code>qty &gt; 0
</code></pre>
<p>
Or suppose the <code>orders</code> table limits the type of credit cards accepted for all credit card orders. This sample constraint guarantees that if the order is placed on a credit card, then only Visa, MasterCard, or American Express is accepted:</p>
<pre><code>NOT (payment_method = ‘credit card’) OR
   (card_type IN (‘VISA’, ‘MASTERCARD’, ‘AMERICAN EXPRESS’))
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Some databases have different functionality for check constraints. For more information about the differences between databases, see <a href="dvovrdatabaseserverconsiderations.htm">Database Server Considerations</a>. Consult your database documentation for details about how your database works with check constraints.</p>
<p class=label>
<b>To define a constraint expression</b>
<ul type=disc>
<li>
In the <b>Tables</b> tab of the property pages, type the expression in the <b>Constraint expression</b> box using the following syntax:<p class=tl>
{<i>constant</i> | <i>column_name</i> | <i>function</i> | (<i>subquery</i>)}<br>
[{<i>operator</i> | AND | OR | NOT}<br>
{<i>constant</i> | <i>column_name</i> | <i>function</i> | (<i>subquery</i>)}…]</P><p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This syntax is Microsoft® SQL Server specific. Consult your database documentation for details.</p></li>
</ul>
<p>
The SQL syntax is made up of the following parameters:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Parameter</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><i>constant</i></td>
<td width=79%>A literal value, such as numeric or character data. Character data must be enclosed within single quotation marks (<code>'</code>).</td>
</tr>
<tr valign=top>
<td width=21%><i>column_name</i></td>
<td width=79%>Specifies a column.</td>
</tr>
<tr valign=top>
<td width=21%><i>function</i></td>
<td width=79%>A built-in function. For details about functions, see "Functions" in <i>SQL Server Books Online</i> or <i>Transact-SQL Reference</i>.</td>
</tr>
<tr valign=top>
<td width=21%><i>operator</i></td>
<td width=79%>An arithmetic, bitwise, comparison, or string operator. For details about operators, see "Operators" in <i>SQL Server Books Online</i> or <i>Transact-SQL Reference</i>.</td>
</tr>
<tr valign=top>
<td width=21%>AND</td>
<td width=79%>Use in Boolean expressions to connect two expressions. Results are returned when both expressions are true.<p>
When AND and OR are both used in a statement, AND is processed first. You can change the order of execution by using parentheses.</p>
</td>
</tr>
<tr valign=top>
<td width=21%>OR</td>
<td width=79%>Use in Boolean expressions to connect two or more conditions. Results are returned when either condition is true.<p>
When AND and OR are both used in a statement, OR is evaluated after AND. You can change the order of execution by using parentheses.</p>
</td>
</tr>
<tr valign=top>
<td width=21%>NOT</td>
<td width=79%>Negates any Boolean expression (which can include keywords, such as LIKE, NULL, BETWEEN, IN, and EXISTS).<p>
When more than one logical operator is used in a statement, NOT is processed first. You can change the order of execution by using parentheses.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

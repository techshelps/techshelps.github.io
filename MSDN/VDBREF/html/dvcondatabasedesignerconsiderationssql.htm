<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Designer Considerations for SQL Server Databases</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvcondatabasedesignerconsiderationssql"></a>Database Designer Considerations for SQL Server Databases</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconDatabaseDesignerConsiderationsSQL_C">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconDatabaseDesignerConsiderationsSQL_T">
</object></p>
<p>
If you are creating database diagrams using Microsoft<sup>®</sup> SQL Server™, you can take advantage of features specific to that server. The following guidelines outline differences you will notice in the Database Designer when you work with SQL Server, and provide information about SQL Server-specific features that you can use.</p>
<p>
Below you will find information about:
<ul type=disc>
<li>
<a href="#dvmsccasesensitivity">Case Sensitivity</a><br><br></li>
<li>
<a href="#dvmscchangingcolumnproperties">Changing Column Properties</a><br><br></li>
<li>
<a href="#dvmscenforcedunenforcedtablerelationships">Enforced and Unenforced Table Relationships</a></li>
</ul>
<h2><a name="dvmsccasesensitivity"></a>Case Sensitivity</h2>
<p>
Column and table names in a SQL Server database can be stored in uppercase letters, lowercase letters, or a combination of both. For example, a column name can appear as "LASTNAME," "LastName," or "lastname."</p>
<p>
Depending on how SQL Server was installed, databases can be case-sensitive or case-insensitive. If a database is case-sensitive, you must enter owner, table, and column names using the correct combination of uppercase and lowercase characters. If the case of the name you provide does not match exactly, SQL Server returns an error reporting an "invalid object name."</p>
<p>
The objects in the Data View window always accurately reflect the case-sensitivity of your server. However, when entering column names in a database diagram, you must be careful to match names to the way they will be interpreted by the server.</p>
<p>
If the server was installed with a case-insensitive option, you can enter database object names using any combination of uppercase and lowercase characters.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To determine the case sensitivity of a server, execute the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgstoredprocedure">stored procedure</a> <code>sp_server_info</code>, and then examine the contents of row 18. If the server has been installed with the case-insensitive setting, the option for <code>sort_order</code> will be set to nocase.</p>
<h2><a name="dvmscchangingcolumnproperties"></a>Changing Column Properties</h2>
<p>
For information on the procedure you use to set column properties, see <a href="dvhowsettingcolumnproperties.htm">Setting Column Properties</a>.</p>
<p>
Although the procedure for setting column properties is similar regardless of the database you are using, the following items contain information specific to Microsoft SQL Server databases.
<ul type=disc>
<li>
<a href="#dvmscdefaultvaluesfordatatypes">Default Values for Data Types</a><br><br></li>
<li>
<a href="#dvmscchangingdatatypeassignedtocolumn">Changing the Data Type Assigned to a Column</a><br><br></li>
<li>
<a href="#dvmscchangingcolumnlength">Changing the Column Length</a><br><br></li>
<li>
<a href="#dvmscchangingcolumnprecision">Changing the Column Precision</a><br><br></li>
<li>
<a href="#dvmscchangingcolumnscale">Changing the Column Scale</a><br><br></li>
<li>
<a href="#dvmscchangingnulloptionassignedtocolumn">Changing the Null Option Assigned to a Column</a><br><br></li>
<li>
<a href="#dvmscassigningdefaultvaluetocolumn">Assigning a Default Value to a Column</a><br><br></li>
<li>
<a href="#dvmscredefiningglobaldefault">Redefining a Global Default</a><br><br></li>
<li>
<a href="#dvmscchangingcolumnsidentityproperties">Changing a Column’s Identity Properties</a></li>
</ul>
<h3><a name="dvmscdefaultvaluesfordatatypes"></a>Default Values for Data Types</h3>
<p>
The following <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdefault">default</a> values are automatically added for the new column:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Data Type</b></td>
<td class=label width=52%><b>Description</b></td>
<td class=label width=26%><b>Default value</b></td>
</tr>
<tr valign=top>
<td width=22%><b>Column Name</b></td>
<td width=52%>The name of a column in a table. Column names must conform to your database rules for identifiers and must be unique in the table.</td>
<td width=26%>Blank</td>
</tr>
<tr valign=top>
<td width=22%><b>Datatype</b></td>
<td width=52%>The data type of the column. System- or <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsguser-defineddatatype">user-defined data types</a> are acceptable.</td>
<td width=26%>Character (char)</td>
</tr>
<tr valign=top>
<td width=22%><b>Length</b></td>
<td width=52%>The maximum number of digits (for numeric data types) or characters allowed for values in the column.</td>
<td width=26%>10</td>
</tr>
<tr valign=top>
<td width=22%><b>Precision</b></td>
<td width=52%>The maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point.</td>
<td width=26%>0</td>
</tr>
<tr valign=top>
<td width=22%><b>Scale</b></td>
<td width=52%>The maximum number of decimal digits that can be stored to the right of the decimal point. This value must be less than or equal to the precision.</td>
<td width=26%>0</td>
</tr>
<tr valign=top>
<td width=22%><b>Allow Nulls</b></td>
<td width=52%>Whether or not the column can accept null values. </td>
<td width=26%>Yes (checked)</td>
</tr>
<tr valign=top>
<td width=22%><b>Default Value</b></td>
<td width=52%>The value that will be inserted into the column if the user does not make an entry. Default values are ignored for columns with a timestamp data type. If you do not define a default value and a column allows nulls, NULL will be inserted.</td>
<td width=26%>Blank</td>
</tr>
<tr valign=top>
<td width=22%><b>Identity</b></td>
<td width=52%>Whether or not the column will generate incremental values for new rows based on the <b>Identity Seed</b> and <b>Identity Increment</b> settings.</td>
<td width=26%>No (not checked)</td>
</tr>
<tr valign=top>
<td width=22%><b>Identity Seed</b></td>
<td width=52%>The value assigned to the first row in the table. If left blank, this setting default is 1.</td>
<td width=26%>Blank</td>
</tr>
<tr valign=top>
<td width=22%><b>Identity Increment</b></td>
<td width=52%>The value which is added to the <b>Identity Seed</b> and assigned to the second row in the table. Each subsequent row is increased by this value. If left blank, this setting default is 1.</td>
<td width=26%>Blank</td>
</tr>
</table><br>
<h3><a name="dvmscchangingdatatypeassignedtocolumn"></a>Changing the Data Type Assigned to a Column</h3>
<p>
A column's data type determines what kind of data can be stored in the column. A list of system-defined data types appears in the Datatype <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgproperty">property</a> column in Column Properties view.</p>
<p>
You can choose the appropriate data type for the information you want to store in the column. If <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsguser-defineddatatype">user-defined data types</a> exist for your database, they appear at the end of the Datatype list. The system-defined data type that corresponds to the user-defined data type appears in parentheses at the end of the user-defined data type name. For example: "id (varchar)."</p>
<h4>Special considerations for assigning a user-defined data type to a column</h4>
<ul type=disc>
<li>
Selecting a data type automatically sets the length, precision, and scale for the column based on the data type’s definition. You cannot change these settings for user-defined data types.<br><br></li>
<li>
You can change the Allow Nulls setting only if the user-defined data type allows null values.<br><br></li>
<li>
When you select a user-defined data type, the Default Value setting is blank, even if a bound <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdefault">default</a> is defined for the data type. You can check whether a bound default exists by saving the table and reloading it into memory. When you reopen the table, the bound default will appear in the Default Value cell. If you try to set a default value for a column that already has a bound default, an error message will prompt you to remove your entry.</li>
</ul>
<p>
For information about creating user-defined data types in Microsoft SQL Server, see "Creating User-Defined Datatypes" in <i>SQL Server Books Online</i> or <i>Database Developer’s Companion</i>.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Changing the data type recreates the table in the database when you save the table or diagram. For more information about automatically recreating tables, see <a href="dvconworkingwithdatabaseobjects.htm">Working with Database Objects</a>.</p>
<p class=indent>
<B><b>Caution&nbsp;&nbsp;&nbsp;</b></B>If this column is related to columns in other tables, then the data type of the related columns must also be changed to preserve referential integrity. When you save the table or diagram, the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefDatatypeChangeRequiredDialogBox">
</object><a href=JavaScript:alink_3.Click()>Datatype Change Required dialog box</a> enables you to automatically change the data type of the related columns.</p>
<h4>Microsoft SQL Server Data Types</h4>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Data type</b></td>
<td class=label width=82%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%><b>binary</b></td>
<td width=82%>Holds a maximum of 255 bytes of fixed-length binary data; default length is 10.<p>
Columns of this type are accessed somewhat faster than varbinary columns because they use a fixed storage length. Choose binary when you think the values entered in this column will be consistently close to the same size. You can create <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgrelationship">relationships</a> between binary columns and varbinary columns.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>bit</b></td>
<td width=82%>Holds either 1 or 0. Integer values other than 1 or 0 are accepted but are always interpreted as 1. Storage size is 1 byte. Multiple bit types in a table can be collected into bytes. For example, 7-bit columns fit into 1 byte; 9-bit columns take 2 bytes.<p>
Columns of this type cannot be NULL and cannot have <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgindex">indexes</a> on them. Choose bit for true/false or yes/no types of data.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>char</b></td>
<td width=82%>Holds a maximum of 255 characters; default length is 10.<p>
Columns of this type are accessed somewhat faster than varchar columns because they use a fixed storage length. Choose char when you think the data entries in the column will be consistently close to the same size. You can create relationships between char columns and varchar columns.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>datetime</b></td>
<td width=82%>Stored in two 4-byte integers: 4 bytes for the number of days before or after the base date of January 1, 1990, and 4 bytes for the number of milliseconds after midnight. The date segments of datetime values that represent dates prior to the base date are stored as negative values.<p>
Data values for datetime range from January 1, 1753, to December 31, 9999, to an accuracy of one three-hundredth second, or 3.33 milliseconds. Microsoft SQL Server rejects all values it cannot recognize as dates between 1753 and 9999.</p>
<p>
You can omit either portion of the value, but if you omit both, the datetime default of January 1, 1900, 12:00:00:000AM is supplied. If you omit the time portion of a datetime value, the default (12:00:00:000AM) is supplied. If you omit the date portion, the default (Jan 1 1900) is supplied.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>decimal</b></td>
<td width=82%>An exact numeric data type that holds values from 1038 - 1 through -1038. The Precision property specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point. The Scale property specifies the maximum number of decimal digits that can be stored to the right of the decimal point; it must be less than or equal to the precision.<p>
Storage size varies according to the specified precision, and ranges from a minimum of 2 bytes to a maximum of 17 bytes. As a general rule, calculate the number of storage bytes required by dividing the precision by 2. For example, precision between 17 and 19 requires 9 storage bytes. For more information, refer to your database documentation.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>float</b></td>
<td width=82%>Holds positive or negative floating-point numbers. By default, this data type has a 15-digit precision. The range of positive values is approximately from 2.23E - 308 through 1.79E 308; zero can be stored; and the range of negative values is approximately from -2.23E - 308 through -1.79E 308. Storage size is 8 bytes. All arithmetic operations except modulo are available with float.<p>
For float data with an exponential component, enter a number (with or without a decimal point and a positive or negative sign), followed by <code>e</code> or <code>E</code>, followed by an integer. The value represented by a float is the product of the first number and 10 to the power of the second number.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>image</b></td>
<td width=82%>A variable-length data type that holds a maximum of through 2E31 - 1 (2,147,483,647) bytes of binary data; default length is 16. The image data type cannot be used for variables or parameters in <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgstoredprocedure">stored procedures</a>.<p>
When image data is entered with an odd number of bytes (but fewer than 255), it is padded with a leading zero. You cannot insert image values with an odd number of characters greater than 255 bytes.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>int</b></td>
<td width=82%>Holds whole numbers from -2E31 (-2,147,483,648) through 2E31 - 1 (2,147,483,647). Storage size is 4 bytes.</td>
</tr>
<tr valign=top>
<td width=18%><b>money</b></td>
<td width=82%>Stores monetary values from -922,337,203,685,477.5808 through +922,337,203,685,477.5807, with accuracy to a ten-thousandth of a monetary unit. Money values are represented as double-precision integers. Storage size is 8 bytes.</td>
</tr>
<tr valign=top>
<td width=18%><b>numeric</b></td>
<td width=82%>Identical to the decimal data type in the Microsoft SQL Server 6.5 implementation. Both are provided for ANSI compatibility. See decimal data type, above.<p class=indent>
<B><b>Caution&nbsp;&nbsp;&nbsp;</b></B>You should use either decimal or numeric for exact numeric data types within a database to avoid conversion between decimal and numeric data types, and to allow relationships between columns with exact numeric data types.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>real</b></td>
<td width=82%>A floating point column similar to float (see above). This column has 7-digit precision. The range of positive values is approximately from 1.18E - 38 through 3.40E 38; zero can be stored; and the range of negative values is approximately from -1.18E - 38 through -3.4E 38. Storage size is 4 bytes.</td>
</tr>
<tr valign=top>
<td width=18%><b>smalldatetime</b></td>
<td width=82%>A date and time data type that is less precise than datetime. Storage size is 4 bytes, consisting of one small integer for the number of days after January 1, 1900, and one small integer for the number of minutes past midnight. Data values for smalldatetime range from January 1, 1900, through June 6, 2079, with accuracy to the minute.</td>
</tr>
<tr valign=top>
<td width=18%><b>smallint</b></td>
<td width=82%>Holds whole numbers from -2E15 (-32,768) through 2E15 - 1 (32,767). Storage size is 2 bytes.</td>
</tr>
<tr valign=top>
<td width=18%><b>smallmoney</b></td>
<td width=82%>Stores monetary values from -214,748.3648 through +214,748.3647, with accuracy to a ten-thousandth of a monetary unit. When smallmoney values are displayed, they are rounded up to two places.</td>
</tr>
<tr valign=top>
<td width=18%><b>sysname</b></td>
<td width=82%>Is the same as varchar(30) and should be assigned only to a column that references the name of a database object in the Microsoft SQL Server system tables such as <code>sysbobjects</code>.</td>
</tr>
<tr valign=top>
<td width=18%><b>text</b></td>
<td width=82%>Is a variable-length data type that can hold a maximum of 2E31 - 1 (2,147,483,647) characters; default length is 16.</td>
</tr>
<tr valign=top>
<td width=18%><b>timestamp</b></td>
<td width=82%>Automatically updated every time a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgrow">row</a> containing a timestamp column is inserted or updated. Values in timestamp columns are not datetime data, but binary(8) or varbinary(8), indicating the sequence of Microsoft SQL Server activity on the row. A table can have only one timestamp column.<p>
The timestamp data type has no relation to the system time — it is simply a monotonically-increasing counter whose values will always be unique within a database.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>tinyint</b></td>
<td width=82%>Holds whole numbers from 0 through 255. Storage size is 1 byte.</td>
</tr>
<tr valign=top>
<td width=18%><b>varbinary</b></td>
<td width=82%>A variable-length binary data type that holds a maximum of 255 bytes of variable-length binary data; default length is 50. Storage size is the actual length of the data entered.<p>
Choose varbinary when you expect null values or a variation in data size. You can create relationships between binary columns and varbinary columns.</p>
</td>
</tr>
<tr valign=top>
<td width=18%><b>varchar</b></td>
<td width=82%>Holds a maximum of 255 characters; default length is 50. Storage size is not fixed with a varchar column. Instead, storage is defined by the actual size of the data entered (ignoring all trailing blanks).<p>
Choose varchar<i> </i>when you expect null values or a wide variation in data size. You can create relationships between char columns and varchar columns.</p>
</td>
</tr>
</table><br>
<h3><a name="dvmscchangingcolumnlength"></a>Changing the Column Length</h3>
<p>
When you select a data type, the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">column</a> length is automatically defined. You can reset the length property for a column with a data type of binary, char, varbinary, or varchar if you want to increase or decrease the length of acceptable values in that column. For columns with other data types, the length is derived from the data type.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Changing the column length recreates the table in the database when you save the table or diagram. For more information about automatically recreating tables, see <a href="dvconworkingwithdatabaseobjects.htm">Working with Database Objects</a>.</p>
<h4>Default Column Lengths for Microsoft SQL Server Data Types</h4>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Data type</b></td>
<td class=label width=33%><b>Default length</b></td>
<td class=label width=34%><b>Range of allowable length values</b></td>
</tr>
<tr valign=top>
<td width=33%>binary</td>
<td width=33%>10</td>
<td width=34%>1 - 255</td>
</tr>
<tr valign=top>
<td width=33%>bit</td>
<td width=33%>1</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>char</td>
<td width=33%>10</td>
<td width=34%>1 - 255</td>
</tr>
<tr valign=top>
<td width=33%>datetime</td>
<td width=33%>8</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>decimal</td>
<td width=33%>9</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>float</td>
<td width=33%>8</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>image</td>
<td width=33%>16</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>int</td>
<td width=33%>4</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>money</td>
<td width=33%>8</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>numeric</td>
<td width=33%>9</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>real</td>
<td width=33%>4</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>smalldatetime</td>
<td width=33%>4</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>smallint</td>
<td width=33%>2</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>smallmoney</td>
<td width=33%>4</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>sysname</td>
<td width=33%>30</td>
<td width=34%>1 - 255</td>
</tr>
<tr valign=top>
<td width=33%>text</td>
<td width=33%>16</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>timestamp</td>
<td width=33%>8</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>tinyint</td>
<td width=33%>1</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>varbinary</td>
<td width=33%>50</td>
<td width=34%>1 - 255</td>
</tr>
<tr valign=top>
<td width=33%>varchar</td>
<td width=33%>50</td>
<td width=34%>1 - 255</td>
</tr>
</table><br>
<h3><a name="dvmscchangingcolumnprecision"></a>Changing the Column Precision</h3>
<p>
For most data types, the column precision is automatically defined. You can change the column precision for the decimal and numeric data types if you want to redefine the maximum number of digits these columns use. The precision of a numeric column refers to the maximum number of digits used by the selected data type. The precision of a non-numeric column generally refers to either the maximum length or the defined length of the column.</p>
<p>
The Database Designer prevents you from changing the precision of a column that does not have one of these assigned data types.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Changing the column precision recreates the table in the database when you save the table or diagram. For more information about automatically recreating tables, see <a href="dvconworkingwithdatabaseobjects.htm">Working with Database Objects</a>.</p>
<h3><a name="dvmscchangingcolumnscale"></a>Changing the Column Scale</h3>
<p>
When you select a data type, the column scale by default is set to 0. The scale of a numeric column refers to the maximum number of digits to the right of the decimal point. For columns with approximate floating point numbers, the scale is undefined because the number of digits to the right of the decimal point is not fixed.</p>
<p>
You can change the scale for a numeric or decimal column if you want to redefine the number of digits that can appear to the right of the decimal point.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Changing the column scale recreates the table in the database when you save the table or diagram. For more information about automatically recreating tables, see <a href="dvconworkingwithdatabaseobjects.htm">Working with Database Objects</a>.</p>
<h3><a name="dvmscchangingnulloptionassignedtocolumn"></a>Changing the Null Option Assigned to a Column</h3>
<p>
For each column in your table, you can specify whether to allow null values or disallow null values. A null value, or NULL, is not the same as zero (0) or blank; NULL means that no entry has been made. Its presence usually implies that the value is either unknown or undefined. For example, a null value in the <code>price</code> column of the <code>titles</code> table of the <code>pubs</code> sample database does not mean that the book has no price; it means that the price is unknown or has not been set.</p>
<p>
If null values are not allowed, the user entering data in the table must enter a value in the column or the table row cannot be accepted in the database.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You cannot change this property on a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgprimarykey">primary key</a> column. If <b>Allow Nulls</b> is not checked, but null values are stored in that column, Microsoft® SQL Server™ will generate an error message when you try to save the table. Also, Identity columns can't have null values.</p>
<p>
Changing the null option on a new, non-key column recreates the table in the database when you save the table or diagram. For more information about automatically recreating tables, see <a href="dvconworkingwithdatabaseobjects.htm">Working with Database Objects</a>.</p>
<h3><a name="dvmscassigningdefaultvaluetocolumn"></a>Assigning a Default Value to a Column</h3>
<p>
For each column in your table, you can specify a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdefault">default</a> value that will be entered in the column if the user leaves it blank. If you do not assign a default value and the user leaves the column blank, then:
<ul type=disc>
<li>
If you set the option to allow null values, NULL will be inserted into the column.<br><br></li>
<li>
If you did not set the option to allow null values, the column will remain blank.</li>
</ul>
<p>
For details on setting the <b>Allow Nulls</b> option, see <a href="#dvmscchangingnulloptionassignedtocolumn">Changing the Null Option Assigned to a Column</a>.</p>
<p>
For text strings, enclose the value in single quotation marks ('); do not use double quotation marks (") because they are reserved for quoted identifiers. For example, type: <code>98036</code> or <code>'Paris, France'</code>.</p>
<p>
If your entry in the <b>Default Value</b> column replaces a bound default (which is shown without parentheses), the default will be unbound and the new value will replace it.</p>
<h3><a name="dvmscredefiningglobaldefault"></a>Redefining a Global Default</h3>
<p>
A <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgglobaldefault">global default</a> is one that is defined for a specific database and is shared by columns of different tables. For example, suppose several of your tables have a <code>quantity</code> column. You can define a global default in your database that inserts a value of 1 in the <code>quantity</code> column whenever the user leaves that column blank in any table.</p>
<p>
If a global default is bound to a column, you can specify a different <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdefault">default</a> value for that column in a specific table. In such a case, the existing global default is unbound from the column before the new default value is bound to the column.</p>
<p class=label>
<b>To redefine a global default</b>
<ol>
<li>
In your database diagram, assign a new default value to the column you want to change.<p class=tl>
For details about assigning default values, see <a href="#dvmscassigningdefaultvaluetocolumn">Assigning a Default Value to a Column</a>.</P></li>
<li>
A message prompts you to permanently unbind the existing default in order for the new default to be applied. Choose <b>OK</b>.</li>
</ol>
<h3><a name="dvmscchangingcolumnsidentityproperties"></a>Changing a Column’s Identity Properties</h3>
<p>
You can change the identity properties of a column if you want to redefine the sequential numbers that are automatically generated and stored in that column when new rows are added to the table. You can set the identity properties on only one column per table.</p>
<p>
Columns that have the Identity property contain system-generated sequential values that uniquely identify each row within a table (for example, employee identification numbers). When inserting values into a table with an identity column, Microsoft SQL Server automatically generates the next identifier based on the last used identity value (the Identity Seed property) and the increment value (the Identity Increment property) specified during the creation of the column.</p>
<p>
The Identity property can be set only for a column with a data type of decimal, int, numeric, smallint, or tinyint; it must not allow null values; and it must not be bound by a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdefault">default</a> <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgconstraint">constraint</a>.</p>
<p class=label>
<b>To change a column’s identity properties</b>
<ol>
<li>
In your database diagram, select the table in which you want to change the identity properties of a column.<br><br></li>
<li>
If you're not already in <b>Column Properties</b> view, right-click the table and choose <b>Column Properties</b> from the shortcut menu.<br><br></li>
<li>
If the <b>Allow Nulls</b> property is set, clear the check box.<br><br></li>
<li>
Check the box inside the <b>Identity</b> cell for the column whose values you want to automatically increment. </li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Only one column per table can be defined as an identity column.
<ol start=5>
<li>
Type a value in the <b>Identity Seed</b> cell. This value will be assigned to the first row in the table. If you leave this cell blank, the value 1 will be assigned by default.<br><br></li>
<li>
Type a value in the <b>Identity Increment</b> cell. This value is the increment that will be added to the <b>Identity Seed</b> for each subsequent row. If you leave this cell blank, the value 1 will be assigned by default.</li>
</ol>
<p>
For example, suppose you want to automatically generate a 5-digit Order ID for each row added to the <code>orders</code> table, beginning with 1000 and incremented by a value of 10. To do this, you would check the <b>Identity</b> property box, type an <b>Identity Seed</b> of <code>1000</code>, and type an <b>Identity Increment</b> of <code>10</code>.</p>
<p>
If you change any of the identity properties for a table, the existing identity values will be preserved. Your new settings apply only to new rows that are added to the table.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If an identity column exists for a table with frequent deletions, gaps can occur between identity values. If you want to avoid such gaps, do not use the <b>Identity</b> property.</p>
<h2><a name="dvmscenforcedunenforcedtablerelationships"></a>Enforced and Unenforced Table Relationships</h2>
<p>
In SQL Server, the following options are available when enforcing referential integrity:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>For details about this option</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Check existing data on creation</td>
<td width=66%><a href="dvhowcheckingexistingdatawhencreatingrelationship.htm">Checking Existing Data When Creating a Relationship</a></td>
</tr>
<tr valign=top>
<td width=34%>Enable relationship for INSERT and UPDATE statements</td>
<td width=66%><a href="dvhowdisablingforeignkeyconstraintwithinsertupdatestatements.htm">Disabling a Foreign Key Constraint with INSERT and UPDATE Statements</a></td>
</tr>
<tr valign=top>
<td width=34%>Enable relationship for replication</td>
<td width=66%><a href="dvhowdisablingforeignkeyconstraintforreplication.htm">Disabling a Foreign Key Constraint for Replication</a></td>
</tr>
</table><br>
</BODY>
</HTML>

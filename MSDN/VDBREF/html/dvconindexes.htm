<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Indexes</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvconindexes"></a>Indexes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconIndexes_C;dvconIndexesC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconIndexes_T;dvconIndexesT">
</object></p>
<p>
You can use an index to gain fast access to specific information in a database table. An index is a structure that orders the values of one or more <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">columns</a> in a database table, for example the last name (<code>lname)</code> column of the <code>employee</code> table. If you were looking for a specific employee by his or her last name, the index would enable you to get that information faster than if you had to search all the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgrow">rows</a> in the table, which is sorted by employee ID.</p>
<p>
The index provides pointers to the data values stored in specified columns of the table, and then orders those pointers according to the sort order you specify. The database uses the index much as you use an index in a book: it searches the index to find a particular value and then follows the pointer to the row containing that value.</p>
<p>
In database diagrams, you can create, edit, or delete each type of index in the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefIndexKeysPropertyPage">
</object><a href=JavaScript:alink_3.Click()>Indexes/Keys property page</a> for a selected table. An index is saved in the database when you save the table that it’s attached to, or when you save the diagram in which that table appears. For details, see <a href="dvhowcreatingindex.htm">Creating an Index</a>.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Not all databases work with indexes in the same way. For more information, see <a href="dvovrdatabaseserverconsiderations.htm">Database Server Considerations</a>, or consult your database documentation.</p>
<p>
As a rule of thumb, you should create an index on a table only if the data in the indexed columns will be queried frequently. Indexes take up disk space and slow the adding, deleting, and updating of rows. In most situations, the speed advantages of indexes for data retrieval greatly outweigh these disadvantages. However, if your application updates data very frequently or if you have disk space constraints, you might want to limit the number of indexes.</p>
<p>
Before creating an index, you have two important tasks:
<ul type=disc>
<li>
<a href="#dvmscdecidingwhichcolumnstoindex">Deciding Which Columns to Index</a><br><br></li>
<li>
<a href="#dvmscchoosingtypeofindex">Choosing the Type of Index</a></li>
</ul>
<h2><a name="dvmscdecidingwhichcolumnstoindex"></a>Deciding Which Columns to Index</h2>
<p>
You can create indexes based on a single column or on multiple columns in a database table. Multiple-column indexes enable you to distinguish between rows in which one column may have the same value.</p>
<p>
Indexes are also helpful if you often search or sort by two or more columns at a time. For example, if you often set criteria for last name and first name columns in the same query, it makes sense to create a multiple-column index on those two columns.</p>
<p>
To determine the usefulness of an index:
<ul type=disc>
<li>
Examine the WHERE and JOIN clauses of your queries. Each column included in either clause is a possible candidate for an index.<br><br></li>
<li>
Experiment with the new index to examine its effect on the performance of running queries.<br><br></li>
<li>
Consider the number of indexes already created on your table. It’s best to avoid a large number of indexes on a single table.<br><br></li>
<li>
Examine the definitions of the indexes already created on your table. It’s best to avoid overlapping indexes that contain shared columns.<br><br></li>
<li>
Examine the number of unique data values in a column and compare that number with the number of rows in the table. The result is the selectivity of that column, which can help you decide if a column is a candidate for an index and, if so, what type of index.</li>
</ul>
<h2><a name="dvmscchoosingtypeofindex"></a>Choosing the Type of Index</h2>
<p>
Depending on the functionality of your database, you can create three types of indexes&nbsp;- unique, primary key, and clustered&nbsp;- in Database Designer. For details about the indexing functionality supported by your database, see your database documentation.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Although a unique index will help locate information, for the best performance results it is recommended that you use primary key or unique constraints instead. For more information about these constraints, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvovrPrimaryKeyConstraints">
</object><a href=JavaScript:alink_4.Click()>Primary Key Constraints</a> and <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvovrUniqueConstraints">
</object><a href=JavaScript:alink_5.Click()>Unique Constraints</a>.</p>
<h3>Unique Index</h3>
<p>
A unique index is one in which no two rows are permitted to have the same index value.</p>
<p>
Most databases prevent you from saving a table with a newly created unique index when there are duplicate <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgkey">key</a> values in the existing data. Your database may also prevent the addition of new data that would create duplicate key values in the table. For example, if you create a unique index on the employee’s last name (<code>lname</code>) in the <code>employee</code> table, then no two employees can share the same last name.</p>
<p>
For more information about unique indexes, see <a href="dvhowcreatinguniqueindex.htm">Creating a Unique Index</a>.</p>
<h3>Primary Key Index</h3>
<p>
A database table often has a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">column</a> or combination of columns whose value uniquely identifies each row in the table. This column is called the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgprimarykey">primary key</a> of the table.</p>
<p>
Defining a primary key for a table in a database diagram automatically creates a primary key index that is a specific type of unique index. This index requires each value in the primary key to be unique. It also permits fast access to data when you use the primary key index in queries. For more information about primary keys, see <a href="dvhowdefiningprimarykey.htm">Defining a Primary Key</a>.</p>
<h3>Clustered Index</h3>
<p>
In a clustered index, the physical order of the rows in the table is the same as the logical (indexed) order of the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgkey">key</a> values. A table can contain only one clustered index.</p>
<p>
If an index is not clustered, the physical order of the rows in the table does not match the logical order of the key values. A clustered index usually provides faster access to data than does a nonclustered index.</p>
<p>
For more information about using a clustered index, see <a href="dvhowcreatingclusteredindex.htm">Creating a Clustered Index</a>.</p>
</BODY>
</HTML>

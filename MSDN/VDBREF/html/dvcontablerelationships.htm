<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Table Relationships</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvcontablerelationships"></a>Table Relationships</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconTableRelationships_C;dvconTableRelationshipsC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconTableRelationships_T;dvconTableRelationshipsT">
</object></p>
<p>
You can create <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgrelationship">relationships</a> between your tables in a database diagram to show how the columns in one table are linked to columns in another table.</p>
<p>
In a relational database, relationships enable you to prevent redundant data. For example, if you are designing a database that will track information about books you might have a table called <code>titles</code> that stores information about each book, such as the book’s title, date of publication, and publisher. There is also information you might want to store about the publisher, such as the publisher's phone number, address, and zip code. If you were to store all of this information in the <code>titles</code> table, the publisher’s phone number would be duplicated for each title that the publisher prints.</p>
<p>
A better solution is to store the publisher information only once in a separate table, <code>publishers</code>. You would then put a pointer in the <code>titles</code> table that references an entry in the publisher table.</p>
<p>
To make sure your data is not out of sync, you can enforce <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgreferentialintegrity(ri)">referential integrity</a> between the <code>titles</code> and <code>publishers</code> tables. Referential integrity relationships help ensure information in one table matches information in another. For example, each title in the <code>titles</code> table must be associated with a specific publisher in the <code>publishers</code> table. A title cannot be added to the database for a publisher that does not exist in the database.</p>
<p>
For a better understanding of table relationships, see:
<ul type=disc>
<li>
<a href="#dvmscdefiningtablerelationships">Defining Table Relationships</a><br><br></li>
<li>
<a href="#dvmscenforcingreferentialintegrity">Enforcing Referential Integrity</a></li>
</ul>
<h2><a name="dvmscdefiningtablerelationships"></a>Defining Table Relationships</h2>
<p>
A relationship works by matching data in <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgkey">key</a> columns — usually columns with the same name in both tables. In most cases, the relationship matches the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgprimarykey">primary key</a> from one table, which provides a unique identifier for each <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgrow">row</a>, with an entry in the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgforeignkey">foreign key</a> in the other table. For example, sales can be associated with the specific titles sold by creating a relationship between the <code>title_id</code> column in the <code>titles</code> table (the primary key) and the <code>title_id</code> column in the <code>sales</code> table (the foreign key).</p>
<p>
There are three types of relationships between tables. The type of relationship that is created depends on how the related <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">columns</a> are defined.
<ul type=disc>
<li>
<a href="#dvmscone-to-manyrelationships">One-to-Many Relationships</a><br><br></li>
<li>
<a href="#dvmscmany-to-manyrelationships">Many-to-Many Relationships</a><br><br></li>
<li>
<a href="#dvmscone-to-onerelationships">One-to-One Relationships</a></li>
</ul>
<h3><a name="dvmscone-to-manyrelationships"></a>One-to-Many Relationships</h3>
<p>
A <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgone-to-manyrelationship">one-to-many relationship</a> is the most common type of relationship. In this type of relationship, a row in table A can have many matching rows in table B, but a row in table B can have only one matching row in table A. For example, the <code>publishers</code> and <code>titles</code> tables have a one-to-many relationship: each publisher produces many titles, but each title comes from only one publisher.</p>
<p>
A one-to-many relationship is created if only one of the related columns is a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgprimarykey">primary key</a> or has a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsguniqueconstraint">unique constraint</a>.</p>
<h3><a name="dvmscmany-to-manyrelationships"></a>Many-to-Many Relationships</h3>
<p>
In a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgmany-to-manyrelationship">many-to-many relationship</a>, a row in table A can have many matching rows in table B, and vice versa. You create such a relationship by defining a third table, called a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgjunctiontable">junction table</a>, whose primary key consists of the foreign keys from both table A and table B. For example, the <code>authors</code> table and the <code>titles</code> table have a many-to-many relationship that is defined by a one-to-many relationship from each of these tables to the <code>titleauthors</code> table. The primary key of the <code>titleauthors</code> table is the combination of the <code>au_id</code> column (the <code>authors</code> table’s primary key) and the <code>title_id</code> column (the <code>titles</code> table’s primary key).</p>
<h3><a name="dvmscone-to-onerelationships"></a>One-to-One Relationships</h3>
<p>
In a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgone-to-onerelationship">one-to-one relationship</a>, a row in table A can have no more than one matching row in table B, and vice versa. A one-to-one relationship is created if both of the related columns are primary keys or have unique constraints.</p>
<p>
This type of relationship is not common because most information related in this way would be all in one table. You might use a one-to-one relationship to:
<ul type=disc>
<li>
Divide a table with many columns.<br><br></li>
<li>
Isolate part of a table for security reasons.<br><br></li>
<li>
Store data that is short-lived and could be easily deleted by simply deleting the table.<br><br></li>
<li>
Store information that applies only to a subset of the main table.</li>
</ul>
<h2><a name="dvmscenforcingreferentialintegrity"></a>Enforcing Referential Integrity</h2>
<p>
Referential integrity is a system of rules that ensure relationships between rows in related tables are valid and that you don't accidentally delete or change related data.</p>
<p>
When referential integrity is enforced, you must observe the following rules:
<ul type=disc>
<li>
You can't enter a value in the foreign key column of the related table if that value doesn't exist in the primary key of the related table. However, you can enter a null in the foreign key column. For example, you can't indicate that a job is assigned to an employee who isn’t included in the <code>employee</code> table, but you can indicate that an employee has no assigned job by entering a null in the <code>job_id</code> column of the <code>employee</code> table.<br><br></li>
<li>
You can't delete a row from a primary key table if rows matching it exist in a related table. For example, you can't delete a row from the <code>jobs</code><i> </i>table if there are employees assigned to the job represented by that row in the <code>employee</code><i> </i>table.<br><br></li>
<li>
You can't change a primary key value in the primary key table if that row has related rows. For example, you can't delete an employee from the <code>employee</code> table if that employee is assigned to a job in the <code>jobs</code> table.</li>
</ul>
<p>
You can set referential integrity when all of the following conditions are met:
<ul type=disc>
<li>
The matching column from the primary table is a primary key or has a <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsguniqueconstraint">unique constraint</a>.<br><br></li>
<li>
The related columns have the same data type and size.<br><br></li>
<li>
Both tables belong to the same database.</li>
</ul>
<h3>Enforced and Unenforced Relationships in Database Diagrams</h3>
<p>
Creating a relationship line in a database diagram automatically enforces referential integrity by creating a foreign key constraint on the related table. An enforced relationship appears in your database diagram as a solid line. For example:</p>
<p>
<img src="dv3w6t1.gif" border=0></p>
<p>
An unenforced relationship, whose foreign key constraint is disabled, appears in your diagram as a dashed line. For example:</p>
<p>
<img src="dv3w6t2.gif" border=0></p>
<p>
Depending on the features of your database, you can set options to disable the foreign key constraint for certain conditions, for example, during INSERT and UPDATE transactions.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>See</b></td>
</tr>
<tr valign=top>
<td width=50%>Create relationships between database tables in a database diagram</td>
<td width=50%><a href="dvhowcreatingrelationshipbetweentables.htm">Creating a Relationship Between Tables</a></td>
</tr>
<tr valign=top>
<td width=50%>Ensure each value entered in a foreign key column matches an existing value in the related primary key column</td>
<td width=50%><a href="dvhowenforcingreferentialintegritybetweentables.htm">Enforcing Referential Integrity Between Tables</a></td>
</tr>
<tr valign=top>
<td width=50%>Link a column in a table with another column in the same table</td>
<td width=50%><a href="dvhowdrawingsingle-tablereflexiverelationship.htm">Drawing a Single-Table Reflexive Relationship</a></td>
</tr>
<tr valign=top>
<td width=50%>Relate many rows in one table to many rows in another table</td>
<td width=50%><a href="dvhowmappingmany-to-manyrelationshipstodatabasediagram.htm">Mapping Many-to-Many Relationships to a Database Diagram</a></td>
</tr>
<tr valign=top>
<td width=50%>Change the name of a relationship</td>
<td width=50%><a href="dvhowrenamingrelationship.htm">Renaming a Relationship</a></td>
</tr>
<tr valign=top>
<td width=50%>Remove the relationship between two tables</td>
<td width=50%><a href="dvhowdeletingrelationship.htm">Deleting a Relationship</a></td>
</tr>
<tr valign=top>
<td width=50%>Disable a foreign key constraint</td>
<td width=50%><a href="dvhowdisablingforeignkeyconstraintwithinsertupdatestatements.htm">Disabling a Foreign Key Constraint with INSERT and UPDATE Statements</a> and <a href="dvhowdisablingforeignkeyconstraintforreplication.htm">Disabling a Foreign Key Constraint for Replication</a></td>
</tr>
</table><br>
</BODY>
</HTML>

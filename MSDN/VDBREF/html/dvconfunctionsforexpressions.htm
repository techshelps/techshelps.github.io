<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Functions for Expressions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvconfunctionsforexpressions"></a>Functions for Expressions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconFunctionsForExpressions_C;dvconFunctionsForExpressionsC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconFunctionsForExpressions_T;dvconFunctionsForExpressionsT">
</object></p>
<p>
You can call a number of functions when you are building an <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgexpression">expression</a>, including:
<ul type=disc>
<li>
String (character) functions<br><br></li>
<li>
Date functions<br><br></li>
<li>
Mathematical functions<br><br></li>
<li>
System functions<br><br></li>
<li>
Other functions, such as those to convert data from one type to another</li>
</ul>
<p>
In general, if you are familiar with the functions available in your database, you can use the function names and syntax supported by that database. In some cases, such as when you are creating views, stored procedures, or triggers, you must use database-specific function names and syntax.</p>
<p>
If you are creating queries (not views, stored procedures, or triggers) that might be run against different databases, you can also use <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgodbc(opendatabaseconnectivity)">ODBC</a> functions, which are supported by virtually all database drivers no matter what database you are querying. ODBC syntax includes the "fn" qualifier in front of the function name and braces around the entire function. For example, the following expression uses an ODBC function to convert text to lowercase letters:</p>
<pre><code>{fn LCASE ( address ) }
</code></pre>
<p>
The Query Designer can help you work with functions by:
<ul type=disc>
<li>
Correctly inserting quotation marks in function arguments<br><br></li>
<li>
Validating the data types of arguments<br><br></li>
<li>
Validating the data types of return values</li>
</ul>
<p>
For details about functions supported by the database, refer to the documentation for the database. For details about ODBC functions, refer to the Open Database Connectivity (ODBC) SDK in the Microsoft Developer Network or to the <i>Microsoft ODBC 2.0 Programmer’s Reference and SDK Guide</i>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use a special set of functions, the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgaggregatefunction">aggregate functions</a> such as SUM(&nbsp;) and AVG(&nbsp;), to create queries that summarize data. For details, see <a href="dvconsummarizinggrouping.htm">Summarizing and Grouping</a>.</p>
<h2>String Functions</h2>
<p>
The following functions for manipulating character strings provide a sampling of those that are available in ODBC and in many databases, such as Microsoft SQL Server.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=21%><b>Description</b></td>
<td class=label width=58%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=21%><b>LCASE(&nbsp;)</b><sup>1</sup><b>,</b> <br>
<b>LOWER(&nbsp;)</b></td>
<td width=21%>Converts strings to lowercase</td>
<td width=58%><pre><code>SELECT UPPER(substring(lname, 1, 1)) + </code><pre><code>&nbsp;&nbsp;<b>LOWER(</b>substring (lname, 2, 99)<b>)</b>
FROM employee
</code></pre>
<p>
Displays a last name after the first character is converted to uppercase and the remaining characters to lowercase.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>LTRIM(&nbsp;)</b></td>
<td width=21%>Removes leading spaces from a string</td>
<td width=58%><pre><code>SELECT stor_name, <b>LTRIM(</b>stor_address<b>)
</b>FROM stores</code><pre></pre>
<p>
Displays an address <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">column</a> after extraneous spaces are removed from the front.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>SUBSTRING(&nbsp;)</b></td>
<td width=21%>Extracts one or more characters from a string</td>
<td width=58%><pre><code>SELECT <b>SUBSTRING(</b>phone,1,3<b>)</b>
FROM employee</code><pre></pre>
<p>
Displays the first three characters (the area code) of a phone number.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>UCASE(&nbsp;)</b><sup>1</sup><b>, <br>
UPPER(&nbsp;)</b></td>
<td width=21%>Converts strings to uppercase</td>
<td width=58%><pre><code>SELECT * FROM employee
WHERE <b>UPPER(</b>lname<b>)</b> = 'SMITH'</code><pre></pre>
<p>
Converts the contents of the <code>lname</code> column to uppercase before comparing them to a specific value (avoids mismatches if the search is case sensitive). For details about case sensitivity in SQL Server, see <u>Query Designer Considerations</u> .</p>
</pre>
</td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>If calling as an ODBC function, use syntax such as: <code>{ fn LCASE(</code><i>text</i><code>) }</code>.</p>
<h2>Date Functions</h2>
<p>
The following functions (or others similar to them) are available in either ODBC or in databases such as Microsoft SQL Server and Microsoft Access.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Oracle uses the TO_DATE function to format dates. For details, see <a href="dvconquerydesignerconsiderationsinoracledatabases.htm">Query Designer Considerations for Oracle Databases</a>.</p><table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=20%><b>Description</b></td>
<td class=label width=59%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=21%><b>DATEDIFF(&nbsp;)</b></td>
<td width=20%>Calculates an interval between two dates.</td>
<td width=59%><pre><code>SELECT fname, lname, hire_date
FROM employee
WHERE <b>DATEDIFF(</b>year, hire_date, getdate()<b>)</b> &gt; 5</code><pre></pre>
<p>
Locates all employees hired more than five years ago.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>DATEPART(&nbsp;)</b></td>
<td width=20%>Returns the specified portion of a date or datetime column, including the day, month, or year.</td>
<td width=59%><pre><code>SELECT <b>DATEPART(</b>year, hire_date<b>)
</b>FROM employee</code><pre></pre>
<p>
Displays only the year in which an employee was hired (not the full date).</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>CURDATE(&nbsp;)</b><sup>1</sup><b>,<br>
GETDATE(&nbsp;)</b> or <b>DATE(&nbsp;)</b></td>
<td width=20%>Returns the current date in datetime format. This function is useful as input for many other date functions, such as calculating an interval forward or backward from today.</td>
<td width=59%><pre><code>SELECT order_id
FROM orders
WHERE order_date = <b>GETDATE()</b></code><pre><code>Displays orders placed today.</code></pre>
</pre>
</td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>If calling as an ODBC function, use syntax such as: <code>{ fn CURDATE() }</code>.</p>
<h2>Mathematical Functions</h2>
<p>
ODBC and most databases provide some mathematical functions that you can use when performing calculations. The following functions are typical of those available in many databases, but you should refer to the ODBC documentation and documentation for the database for details about what functions are available and what arguments they take.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgaggregatefunction">aggregate functions</a> AVG(&nbsp;), COUNT(&nbsp;), MAX(&nbsp;), MIN(&nbsp;), and SUM(&nbsp;) to create averages and totals in your report. For details, see <a href="dvconsummarizinggrouping.htm">Summarizing and Grouping</a>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=20%><b>Description</b></td>
<td class=label width=59%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=21%><b>ROUND(&nbsp;)</b></td>
<td width=20%>Rounds a number off to the specified number of decimal places.</td>
<td width=59%><pre><code>SELECT <b>ROUND(</b>qty * (price * discount), 2<b>)</b>
FROM sales</code><pre></pre>
<p>
Displays a total price based on a discount, then rounds the results off to two decimal places.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>FLOOR(&nbsp;)</b></td>
<td width=20%>Rounds a number down to the nearest (smallest) whole number.</td>
<td width=59%><pre><code>UPDATE titles
SET price = <b>FLOOR(</b>price<b>)</b></code><pre></pre>
<p>
Rounds all prices in the <code>titles</code> table down to the nearest whole number.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>CEILING(&nbsp;)</b></td>
<td width=20%>Rounds a number up to the nearest whole number.</td>
<td width=59%><pre><code>INSERT INTO archivetitle</code><pre><code>SELECT title, <b>CEILING(</b>price<b>)</b>
FROM titles
</code></pre>
<p>
Copies the <code>title</code> and the <code>price</code> (rounded up to the nearest integer) from the <code>titles</code> table to the <code>archivetitle</code> table.</p>
</pre>
</td>
</tr>
</table><br>
<h2>System Functions</h2>
<p>
ODBC and most databases make available special functions that you can use to return information about the current database, current user, or the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgserver">server</a>. The following functions are typical of those available in many databases, but refer to the ODBC documentation or documentation for the database for details about what functions are available and what arguments they take.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=20%><b>Description</b></td>
<td class=label width=59%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=21%><b>DATALENGTH(&nbsp;)</b></td>
<td width=20%>Returns the number of bytes used by the specified expression.</td>
<td width=59%><pre><code>SELECT <b>DATALENGTH(</b>au_lname + ', ' </code><pre><code>&nbsp;&nbsp;+ au_fname<b>)</b>
FROM authors
</code></pre>
<p>
Lists the number of bytes required for the combination of last and first names.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>USER(&nbsp;)</b><sup>1</sup><b>, <br>
USER_NAME(&nbsp;)</b></td>
<td width=20%>Returns the current user name.</td>
<td width=59%><pre><code>SELECT company_name, city, phone</code><pre><code>FROM customers
WHERE salesperson = <b>USER_NAME()</b>
</code></pre>
<p>
Creates a list of customers for the salesperson who runs the query.</p>
</pre>
</td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>If calling as&nbsp; an ODBC function, use syntax such as: <code>{ fn USER() }</code>.</p>
<h2>Other Functions</h2>
<p>
In addition to the functions listed earlier, ODBC and most databases provide other functions to help you create queries, such as data type conversion or other utility functions. The following functions illustrate the type of utility functions that are available in many databases.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Function</b></td>
<td class=label width=21%><b>Description</b></td>
<td class=label width=58%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=21%><b>CONVERT(&nbsp;)</b></td>
<td width=21%>Converts data from one data type into another. Useful to format data or to use the contents of a data column as an argument in a function that requires a different data type.</td>
<td width=58%><pre><code>SELECT 'Hired: ' + <b>CONVERT(</b>char (11),</code><pre><code>&nbsp;&nbsp;hire_date<b>)</b>
FROM employee
</code></pre>
<p>
Displays a date with a caption in front of it; the CONVERT(&nbsp;) function creates a string out of the date so that it can be concatenated with a literal string.</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>SOUNDEX(&nbsp;)</b></td>
<td width=21%>Returns the Soundex code for the specified expression, which you can use to create "sounds like" searches.</td>
<td width=58%><pre><code>SELECT au_lname, au_fname
FROM authors
WHERE <b>SOUNDEX(</b>au_fname<b>)</b> = 'M240'</code><pre></pre>
<p>
Searches for names that sound like "Michael".</p>
</pre>
</td>
</tr>
<tr valign=top>
<td width=21%><b>STR(&nbsp;)</b></td>
<td width=21%>Converts numeric data into a character string so you can manipulate it with text operators.</td>
<td width=58%><pre><code>SELECT str(job_id) + ' ' + 
 &nbsp; str(job_lvl)
FROM employee</code><pre></pre>
<p>
Displays the <code>job_id</code> and <code>job_lvl</code> columns (both numeric) in a single string.</p>
</pre>
</td>
</tr>
</table><br>
</BODY>
</HTML>

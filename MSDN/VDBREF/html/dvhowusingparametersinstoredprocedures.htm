<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Parameters in Stored Procedures</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvhowusingparametersinstoredprocedures"></a>Using Parameters in Stored Procedures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvhowUsingParametersInStoredProcedures_C;dvhowUsingParametersInStoredProceduresC">
</object></p>
<p>
Parameters enable you to use the same stored procedure to search the database many times, rather than requiring you to create one stored procedure for each value that you want to match. For example, in a SQL Server database, you can add a <code>@HireDate</code> parameter to a stored procedure that searches the <code>employee</code> table for employees whose hire date matches the date you specify. You can then run the stored procedure each time you want to specify a different hire date. Or you can use a combination of parameters to specify a range of dates. For example, you can create two parameters — <code>@BeginningDate</code> and <code>@EndingDate</code> — in the <code>where</code> clause of your stored procedure, and then specify a range of hire dates when you run the procedure.</p>
<p>
When you use parameters in stored procedures, you can:
<ul type=disc>
<li>
Return a status value to another stored procedure to indicate success or failure and the reason for the failure.<br><br></li>
<li>
Return parameter values to another stored procedure.</li>
</ul>
<p>
A parameter takes the place of a constant; it cannot take the place of a table name, column name, or other database object.</p>
<p>
For more details about how your database works with parameters in stored procedures, see your database documentation.</p>
<p class=label>
<b>To view parameters for a stored procedure</b>
<ul type=disc>
<li>
In <b>Data View</b>, expand the name of the stored procedure.<p class=tl>
Parameters for the stored procedure are listed below the stored procedure name. In SQL Server databases, each parameter name begins with the "@" character. For example, @<code>percentage</code>.</P></li>
</ul>
<p>
When you run a stored procedure that contains a parameter, you specify a parameter value.</p>
<p class=label>
<b>To enter parameter values</b>
<ol>
<li>
Run the stored procedure. For details, see <a href="dvhowrunningstoredprocedure.htm">Running a Stored Procedure</a>.<p class=tl>
If the stored procedure contains one or more parameters, the <b>Run Stored Procedure</b> dialog box is displayed.</P></li>
<li>
For each parameter, enter the value to use. Be sure that you provide a value that matches the data type of the parameter.<br><br></li>
<li>
When you have finished entering parameter values, choose <b>OK</b>.</li>
</ol>
</BODY>
</HTML>

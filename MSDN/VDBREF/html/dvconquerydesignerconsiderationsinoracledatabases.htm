<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Query Designer Considerations for Oracle Databases</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="dvconquerydesignerconsiderationsinoracledatabases"></a>Query Designer Considerations for Oracle Databases</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconQueryDesignerConsiderationsInOracleDatabases_C">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconQueryDesignerConsiderationsInOracleDatabases_T">
</object></p>
<p>
If you are creating queries using the Oracle database server, you can take advantage of features specific to that <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgserver">server</a>. The following guidelines outline differences you will notice in the Query Designer when you work with the Oracle Server, and provide information about Oracle-specific features that you can use.</p>
<p>
Below you will find information about:
<ul type=disc>
<li>
<a href="#dvmscoracledriverinoracle">Oracle Driver</a><br><br></li>
<li>
<a href="#dvmscusingsynonymsinoracle">Using Synonyms</a><br><br></li>
<li>
<a href="#dvmscidentifyingdatabaseobjectsinoracle">Identifying Database Objects</a><br><br></li>
<li>
<a href="#dvmsccase-sensitivityofidentifiernamesinoracle">Case-Sensitivity of Identifier Names</a><br><br></li>
<li>
<a href="#dvmscerrormessagesinoracle">Error Messages</a><br><br></li>
<li>
<a href="#dvmsccreatingouterjoinsinoracle">Creating Outer Joins</a><br><br></li>
<li>
<a href="#dvmsccombiningallcolumnswithindividualcolumnnamesinoracle">Combining All Columns with Individual Column Names</a><br><br></li>
<li>
<a href="#dvmscconcatenatingtextinoracle">Concatenating Text</a><br><br></li>
<li>
<a href="#dvmscenteringdatesingridsqlpanesinoracle">Entering Dates in the Grid and SQL Panes</a><br><br></li>
<li>
<a href="#dvmsccreatingaggregatequeriesinoracle">Creating Aggregate Queries</a><br><br></li>
<li>
<a href="#dvmsccreatinginsertvaluesqueryinoracle">Creating an Insert Values Query</a><br><br></li>
<li>
<a href="#dvmsccreatingmaketablequeryinoracle">Creating a Make Table Query</a><br><br></li>
<li>
<a href="#dvmsccreatingcomparisonsusingdistributivesyntaxinoracle">Creating Comparisons Using Distributive Syntax</a><br><br></li>
<li>
<a href="#dvmsccreatingaliasesinoracle">Creating Aliases</a><br><br></li>
<li>
<a href="#dvmscincludingoptimizerhintcommentsinoracle">Including Optimizer Hint Comments</a><br><br></li>
<li>
<a href="#dvmscrunningquerieswithmlslabeldatatypeinoracle">Running Queries with the MLSLABEL Data Type</a><br><br></li>
<li>
<a href="#dvmscusinglevelrowidrownumpseudo-columnsinoracle">Using LEVEL, ROWID, and ROWNUM Pseudo-Columns</a><br><br></li>
<li>
<a href="#dvmscunsupportedquerytypesinoracle">Unsupported Query Types</a></li>
</ul>
<h2><a name="dvmscoracledriverinoracle"></a>Oracle Driver</h2>
<p>
It is recommended that you install and use the Oracle <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgodbc(opendatabaseconnectivity)">ODBC</a> driver provided with the Microsoft<sup>®</sup> Visual Database Tools. This driver has been tested extensively to ensure that it works properly with the Query Designer.</p>
<h2><a name="dvmscusingsynonymsinoracle"></a>Using Synonyms</h2>
<p>
Using the Query Designer, you can create queries using not only <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgtable">tables</a> and <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgview">views</a>, but using synonyms as well. You can query any synonym for which you are the owner or which you have been given permission to.</p>
<p>
If you do not see <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">column</a> names in the input source window for a synonym, synonym column information may not have been enabled for the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgodbc(opendatabaseconnectivity)">ODBC</a> driver you are using. In that case, you can use the synonym columns if you know their names by entering them in the <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgsql">SQL</a> or <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefGridPane">
</object><a href=JavaScript:alink_3.Click()>Grid panes</a>. For details about enabling synonym column names, see the documentation for the Oracle ODBC driver you are using.</p>
<h2><a name="dvmscidentifyingdatabaseobjectsinoracle"></a>Identifying Database Objects</h2>
<p>
<a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgdatabaseobject">Database objects</a> (<a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgtable">tables</a>, <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgview">views</a>, <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgcolumn">columns</a>, and synonyms) in Oracle databases are identified with unique names that consist of two parts (for tables and views) or three parts (for columns):</p>
<p>
<i>owner.table</i></p>
<p>
<i>owner.table.column</i></p>
<p>
If you are the owner of a table or view, you do not need to include the <i>owner</i> qualifier when you reference the table or view. For example, if you are working with a column called <code>PRICE</code> in the <code>TITLES</code> table in the current database, you can simply reference the column by name, as in this <a href="dvovrvisualdatabasetoolsglossary.htm#dvmsgsql">SQL</a> statement:</p>
<pre><code>SELECT PRICE
FROM TITLES
</code></pre>
<p>
If you are working in the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefDiagramPane">
</object><a href=JavaScript:alink_4.Click()>Diagram</a> and <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefGridPane">
</object><a href=JavaScript:alink_5.Click()>Grid</a> panes, the Query Designer automatically adds the owner name to the table or view if necessary.</p>
<p>
If you are not the owner of a table or view, you can reference the table and view in the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefSQLPane">
</object><a href=JavaScript:alink_6.Click()>SQL pane</a> (if you have permission) by including the owner name. For example, to display information from an <code>EMP</code> table owned by the user <code>HR,</code> you can include the owner name. If the query contains more than one table, you must also include table name qualifiers. The following query illustrates the use of the owner and table name qualifiers:</p>
<pre><code>SELECT HR.EMP.LAST_NAME, HR.EMP.FIRST_NAME, MyEmp.NOTES
FROM HR.EMP, EMP MyEmp
WHERE HR.EMP.EMPID = MyEmp.EMPID
</code></pre>
<h2><a name="dvmsccase-sensitivityofidentifiernamesinoracle"></a>Case-Sensitivity of Identifier Names</h2>
<p>
The names of database objects — tables, views, columns, and synonyms — are case-sensitive by default in the Oracle database server. For example, it is possible to have two tables whose names are distinguished only by uppercase and lowercase letters, such as <code>EMP</code> and <code>Emp</code>.</p>
<p>
When a query is executed, the Oracle database server, by default, converts all database object names to uppercase characters. If the actual object name uses lowercase or mixed-case letters, an error results because the converted uppercase name (for example, <code>EMP</code>) would not match the actual name (<code>Emp</code>).</p>
<p>
However, the Oracle database server does not convert to uppercase letters an object name that is enclosed in double quotation marks. Therefore, you can specify lowercase or mixed-case database object names by putting the names in double quotation marks. For example, in the following SQL statement, because the mixed-case table name <code>Emp</code> is in double quotation marks, the Oracle database server does not convert it to the name <code>EMP</code> when the query is run:</p>
<pre><code>SELECT "Emp".ENAME
FROM "Emp"
</code></pre>
<p>
In the Query Designer, database object names are displayed in Data View of the project workspace with the actual combination of uppercase and lowercase letters. When you drag tables or views onto the Diagram pane, and when you choose names in the Grid pane, the Query Designer automatically places double quotation marks around the name if the name is not all uppercase.</p>
<p>
If you enter lowercase or mixed-case database object names in the SQL pane, place double quotation marks around any names that contain lowercase letters. If you do not place quotation marks around the lowercase or mixed case names, the Query Designer follows this strategy in resolving the name:
<ol>
<li>
The Query Designer looks first for an exact, case-sensitive match for the name you entered. If a match is found, the Query Designer places double quotation marks around the name when you next use the Diagram or Grid pane to make changes to the query.<br><br></li>
<li>
If no match is found, the Query Designer converts the name to uppercase letters and attempts again to find a match. If a match is found, the Query Designer converts all references to the name in the SQL pane to uppercase.<br><br></li>
<li>
If still no match is found, the Query Designer leaves the name as you entered it and allows the server to make its default conversion on the name.</li>
</ol>
<h2><a name="dvmscerrormessagesinoracle"></a>Error Messages</h2>
<p>
In many cases the Query Designer catches invalid syntax and displays an appropriate message. However, in some cases&nbsp;— usually involving syntax specific to Oracle databases&nbsp;— the Query Designer does not detect all errors. When Oracle attempts to run the query, it detects an error, and it returns an error number and string to the Query Designer, which displays the information in a "raw" state.</p>
<p>
For example, if the column list in the SQL statement contains an invalid reference, Oracle might return error 00923, with the phrase "FROM keyword not found." This error indirectly indicates a problem with the column list.</p>
<p>
If you have access to Oracle documentation, you can look up the errors returned in this fashion. If not, you might have to experiment with the syntax of your query to determine where the error lies.</p>
<p>
In some other cases, it is the Microsoft Oracle ODBC driver that is returning the error. For example, the driver does not support the MLSLABEL data type. If you attempt to create a query using this data type, the driver (not Oracle) reports an "unknown error" or an error indicating that the query contains an "unsupported network data type or representation."</p>
<h2><a name="dvmsccreatingouterjoinsinoracle"></a>Creating Outer Joins</h2>
<p>
If you create an outer join between input sources, it is represented in the SQL pane using the Oracle-specific (+) syntax. For example, the following query creates a left outer join between the <code>EMP</code> and <code>DEPT</code> tables:</p>
<pre><code>SELECT EMP.EMPNO, DEPT.DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO (+) = DEPT.DEPTNO
</code></pre>
<p>
If you are creating an outer join in the SQL pane, you can use the (+) syntax. If you attempt to use the LEFT OUTER JOIN or RIGHT OUTER JOIN syntax, the Query Designer will display the <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefQueryDefinitionsDifferDialogBox">
</object><a href=JavaScript:alink_7.Click()>Query Definitions Differ Dialog Box</a> dialog box and report an error when you execute your query or change panes. You cannot use the (+) operator in the Grid pane.</p>
<p>
You can also use the ODBC <code>{&nbsp;oj&nbsp;}</code> syntax. If you do, the Query Designer might convert it to (<code>+</code>) syntax, depending on the ODBC driver you are using.</p>
<p>
Oracle does not support full outer joins. When you are working with an Oracle database, the Query Designer will prevent you from creating a full outer join by setting the properties of the Join Line.</p>
<p>
Similarly, Oracle also has restrictions on creating outer joins involving three or more tables. In general, the Query Designer will prevent you from creating a query that would not be allowed in Oracle. For more information about restrictions for outer joins, see the Oracle documentation.</p>
<h2><a name="dvmsccombiningallcolumnswithindividualcolumnnamesinoracle"></a>Combining All Columns with Individual Column Names</h2>
<p>
In the list of columns to return, Oracle does not permit you to combine column names with * (All Columns). For example, the following syntax will result in an error:</p>
<pre><code>SELECT pub_id, pr_info, *
FROM pub_info
</code></pre>
<p>
Because this syntax is allowed in some databases, the Query Designer does not prevent you from entering it in the SQL pane. However, when the SQL statement is processed, the Query Designer will display an error that might include one of the following phrases:</p>
<pre><code>(00923) FROM keyword not found where expected

(00926) Missing Expression
</code></pre>
<h2><a name="dvmscconcatenatingtextinoracle"></a>Concatenating Text</h2>
<p>
When you work with Oracle databases, the Query Designer allows you to use the <code>+</code> operator when you are using the Grid pane to create expressions that concatenate text. However, the Query Designer will convert the <code>+</code> operator to the Oracle-standard <code>||</code> operator. If you are entering expressions directly in the SQL pane, you must use the <code>||</code> operator.</p>
<h2><a name="dvmscenteringdatesingridsqlpanesinoracle"></a>Entering Dates in the Grid and SQL Panes</h2>
<p>
When you enter a valid date in the Grid pane, the Query Designer replaces the date you entered with a call to the TO_DATE(&nbsp;) function, using your date as one of the parameters. This assures that Oracle will correctly interpret that data you have entered.</p>
<p>
You can enter dates directly in the SQL pane, but you must enter them in exactly the format specified for your database, as specified by the current session's NLS_DATE_FORMAT value. Because there might not be an easy way to determine the correct format, it is advisable to use the TO_DATE(&nbsp;) format in the SQL pane. For example, a query might look like this:</p>
<pre><code>SELECT&nbsp;&nbsp; EMP_ID, HIRE_DATE
FROM&nbsp;&nbsp;&nbsp;&nbsp; EMPLOYEE
WHERE&nbsp;&nbsp;&nbsp; HIRE_DATE &gt; TO_DATE('01/01/90', 'MM/DD/YY')
</code></pre>
<p>
For details about the TO_DATE(&nbsp;) function, refer to the Oracle documentation.</p>
<h2><a name="dvmsccreatingaggregatequeriesinoracle"></a>Creating Aggregate Queries</h2>
<p>
In addition to the standard aggregate functions (AVG, SUM, and on), Oracle allows you to use the aggregate functions STDDEV(&nbsp;), which calculates the standard deviation of a summary value, and VARIANCE(&nbsp;), which returns a variance on the summary values. When you are working with an Oracle database, both of these aggregate functions, along with variants that include their optional DISTINCT qualifier, appear in the drop-down list under Group By in the Grid pane. You can also enter them directly in the SQL pane.</p>
<h2><a name="dvmsccreatinginsertvaluesqueryinoracle"></a>Creating an Insert Values Query</h2>
<p>
When you create an Insert Values query using an Oracle database, you can use named sequences in the New Values clause. For example, you can create the following named sequence:</p>
<pre><code>CREATE SEQUENCE empseq
INCREMENT BY 10
</code></pre>
<p>
You can then use this named sequence in an Insert Values query, as in the following example:</p>
<pre><code>INSERT INTO emp
VALUES (empseq.nextval, 'Ann', 'E', 'Smith', 7902, 11, '0877', SYSDATE)
</code></pre>
<h2><a name="dvmsccreatingmaketablequeryinoracle"></a>Creating a Make Table Query</h2>
<p>
In Oracle databases, a Make Table query is implemented with the Create Table as Select command. In all other respects a Make Table query functions the same as with any other database.</p>
<h2><a name="dvmsccreatingcomparisonsusingdistributivesyntaxinoracle"></a>Creating Comparisons Using Distributive Syntax</h2>
<p>
Oracle allows you to create comparisons using distributive syntax, as in the following example:</p>
<pre><code>SELECT EMP_ID, LNAME
FROM EMP
WHERE (JOB_ID, DEPT_ID) in (6669,21)
</code></pre>
<p>
You can enter this syntax directly in the SQL pane. When you change panes or execute the query, the Query Designer reformats the SQL statement by redistributing the elements in the comparisons. The above statement would be reformatted as follows:</p>
<pre><code>SELECT EMP_ID, LNAME
FROM EMP
WHERE (JOB_ID = 6669) AND (DEPT_ID = 21)
</code></pre>
<p>
Any similar distributive syntax will be reformatted in the same way. In complex statements, especially those involving NOT, the resulting statement can become quite long. However, it is always guaranteed to be logically identical to the distributive syntax that you originally entered.</p>
<h2><a name="dvmsccreatingaliasesinoracle"></a>Creating Aliases</h2>
<p>
Oracle does not support AS in table alias clauses. However, you can create an alias without the AS, as in the following example:</p>
<pre><code>SELECT *
FROM&nbsp;&nbsp;&nbsp;&nbsp; DEPT D
WHERE&nbsp;&nbsp;&nbsp; D.LOC = 'NEW YORK'
</code></pre>
<h2><a name="dvmscincludingoptimizerhintcommentsinoracle"></a>Including Optimizer Hint Comments</h2>
<p>
If you are entering a query directly in the SQL pane, you can add optimizer hints before the SELECT, UPDATE, or DELETE command to specify how the query should be parsed and compiled. When reformatting the contents of the SQL pane, the Query Designer will maintain these comments according to the following conventions:
<ul type=disc>
<li>
Only optimizer hint comments are retained. Other types of comments are stripped.<br><br></li>
<li>
Optimizer comments are retained only after the keywords listed above.<br><br></li>
<li>
Optimizer comments will be enclosed in C-style comment delimiters (/* */).<br><br></li>
<li>
Multi-line optimizer comments will be reformatted as single-line comments.<br><br></li>
<li>
The Query Designer will start a new line after each optimizer comment.<br><br></li>
<li>
Optimizer comments are not retained if you change query types.</li>
</ul>
<p>
For more details about optimizer hints, refer to the Oracle documentation.</p>
<h2><a name="dvmscrunningquerieswithmlslabeldatatypeinoracle"></a>Running Queries with the MLSLABEL Data Type</h2>
<p>
Because the MLSLABEL data type is designed for use primarily with high-security applications, it is not supported by the Microsoft Oracle ODBC driver. MLSLABEL is a legal data type in Oracle, so the Query Designer does not immediately detect an error when you use an input source that includes a column of that data type. However, when you run the query, the Query Designer displays an error message that indicates an "unknown error" or one that indicates that the query contains an "unsupported network data type or representation."</p>
<h2><a name="dvmscusinglevelrowidrownumpseudo-columnsinoracle"></a>Using LEVEL, ROWID, and ROWNUM Pseudo-Columns</h2>
<p>
The identifiers LEVEL, ROWID, and ROWNUM are pseudo-columns in Oracle that you can use in queries you create with the Query Designer. You enter the pseudo-columns into the Grid pane or directly in the SQL pane. They do not appear in the input source window in the Diagram pane.</p>
<h2><a name="dvmscunsupportedquerytypesinoracle"></a>Unsupported Query Types</h2>
<p>
Some types of legal Oracle queries cannot be represented graphically in the Query Designer. You can still enter them in the SQL pane, and they will execute correctly. However, the Query Designer will display the <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvrefQueryDefinitionsDifferDialogBox">
</object><a href=JavaScript:alink_8.Click()>Query Definitions Differ</a> dialog box and report an error when you execute your query or change panes.</p>
<p>
The following types of Oracle queries are not supported graphically:
<ul type=disc>
<li>
Queries involving the GLB(&nbsp;) or LUB(&nbsp;) functions<br><br></li>
<li>
Hierarchical Select queries<br><br></li>
<li>
Queries using INTERSECT<br><br></li>
<li>
Queries using MINUS<br><br></li>
<li>
Queries using UNION [ALL]<br><br></li>
<li>
CREATE SNAPSHOT queries</li>
</ul>
</BODY>
</HTML>

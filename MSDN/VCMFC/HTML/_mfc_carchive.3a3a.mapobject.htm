<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CArchive::MapObject</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_carchive.3a3a.mapobject"></a>CArchive::MapObject</h1>
<p>
<b>void MapObject( const CObject* </b><i>pOb</i><b> );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pOb</i></p>
<p class=indent>
A constant pointer to the object being stored.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to place objects in the map that are not really serialized to the file, but that are available for subobjects to reference. For example, you might not serialize a document, but you would serialize the items that are part of the document.&nbsp; By calling <b>MapObject</b>, you allow those items, or subobjects, to reference the document. Also, serialized subitems can serialize their <b>m_pDocument</b> back pointer.</p>
<p>
You can call <b>MapObject</b> when you store to and load from the <b>CArchive</b> object. <b>MapObject</b> adds the specified object to the internal data structures maintained by the <b>CArchive</b> object during serialization and deserialization, but unlike <a href="_mfc_carchive.3a3a.readobject.htm">ReadObject</a><b> </b>and <a href="_mfc_carchive.3a3a.writeobject.htm">WriteObject</a><b>,</b> it does not call serialize on the object.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// MyDoc.h
// Document should have DECLARE_SERIAL and IMPLEMENT_SERIAL

class CMyDocument : public CDocument
{
   CObList m_listOfSubItems;
 &nbsp;&nbsp; ...
   DECLARE_SERIAL(CMyDocument)
};

// MyDoc.cpp
...
IMPLEMENT_SERIAL(CMyDocument, CObject, 1)
...
void CMyDocument::Serialize(CArchive&amp; ar)
{
   if (ar.IsStoring())
   {
      // TODO: add storing code here
   }
   else
   {
      // TODO: add loading code here
   }

   ar.MapObject(this);&nbsp; 
   //serialize the subitems in the document;
   //they will be able to serialize their m_pDoc
   //back pointer
   m_listOfSubItems.Serialize(ar);

}


//SubItem.h
class CSubItem : public CObject
{
public:
   CSubItem(CMyDocument * pDoc)
      { m_pDoc = pDoc; }

   // back pointer to owning document
   CMyDocument* m_pDoc; 
   WORD m_i; // other item data

   virtual void Serialize(CArchive&amp; ar);
};

//SubItem.cpp
void CSubItem::Serialize(CArchive&amp; ar)
{
   if (ar.IsStoring())
   {
      // will serialize a reference 
      //to the "mapped" document pointer
      ar &lt;&lt; m_pDoc;&nbsp; 
      ar &lt;&lt; m_i;
   }
   else
   {
      // will load a reference to 
      //the "mapped" document pointer
      ar &gt;&gt; m_pDoc;
      ar &gt;&gt; m_i;
   }
}
</code></pre>
<p>
<a href="_mfc_carchive.htm">CArchive Overview</a>  |&nbsp; <a href="_mfc_carchive_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_carchive.3a3a.readobject.htm">CArchive::ReadObject</a>, <a href="_mfc_carchive.3a3a.writeobject.htm">CArchive::WriteObject</a></p>
</font></BODY>
</HTML>

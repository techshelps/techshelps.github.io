<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMemFile</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cmemfile"></a><sup></sup>CMemFile</h1>
<p>
<img src="cmemfile.gif" border=0></p>
<p>
<b>CMemFile</b> is the <a href="_mfc_cfile.htm">CFile</a>-derived class that supports memory files. These memory files behave like disk files except that the file is stored in RAM rather than on disk. A memory file is useful for fast temporary storage or for transferring raw bytes or serialized objects between independent processes.</p>
<p>
<b>CMemFile</b> objects can automatically allocate their own memory or you can attach your own memory block to the <b>CMemFile</b> object by calling <a href="_mfc_cmemfile.3a3a.attach.htm">Attach</a>. In either case, memory for growing the memory file automatically is allocated in <i>nGrowBytes</i>-sized increments if <i>nGrowBytes</i> is not zero.</p>
<p>
The memory block will automatically be deleted upon destruction of the <b>CMemFile</b> object if the memory was originally allocated by the <b>CMemFile</b> object; otherwise, you are responsible for deallocating the memory you attached to the object.</p>
<p>
You can access the memory block through the pointer supplied when you detach it from the <b>CMemFile</b> object by calling <a href="_mfc_cmemfile.3a3a.detach.htm">Detach</a>.</p>
<p>
The most common use of <b>CMemFile</b> is to create a <b>CMemFile</b> object and use it by calling <a href="_mfc_cfile.htm">CFile</a> member functions. Note that creating a <b>CMemFile</b> automatically opens it: you do not call <a href="_mfc_cfile.3a3a.open.htm">CFile::Open</a>, which is only used for disk files. Because <b>CMemFile</b> doesn't use a disk file, the data member <b>CFile::m_hFile</b> is not used and has no meaning.</p>
<p>
The <b>CFile</b> member functions <a href="_mfc_cfile.3a3a.duplicate.htm">Duplicate</a>, <a href="_mfc_cfile.3a3a.lockrange.htm">LockRange</a>, and <a href="_mfc_cfile.3a3a.unlockrange.htm">UnlockRange</a> are not implemented for <b>CMemFile</b>. If you call these functions on a <b>CMemFile</b> object, you will get a <a href="_mfc_cnotsupportedexception.htm">CNotSupportedException</a>.</p>
<p>
<b>CMemFile</b> uses the run-time library functions <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_malloc">
</object><a href=JavaScript:alink_1.Click()>malloc</a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_realloc">
</object><a href=JavaScript:alink_2.Click()>realloc</a>, and <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_free">
</object><a href=JavaScript:alink_3.Click()>free</a> to allocate, reallocate, and deallocate memory; and the intrinsic <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_memcpy">
</object><a href=JavaScript:alink_4.Click()>memcpy</a> to block copy memory when reading and writing. If you’d like to change this behavior or the behavior when <b>CMemFile</b> grows a file, derive your own class from <b>CMemFile</b> and override the appropriate functions.</p>
<p>
For more information on <b>CMemFile</b>, see the articles <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Files_in_MFC">
</object><a href=JavaScript:alink_5.Click()>Files in MFC</a> and <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Memory_Management_Topics_.28.MFC.29">
</object><a href=JavaScript:alink_6.Click()>Memory Management Topics (MFC)</a> in the <i>Visual C++ Programmer's Guide</i> and see <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_CRT_File_Handling">
</object><a href=JavaScript:alink_7.Click()>File Handling</a> in the <i>Run-Time Library Reference</i>.</p>
<p>
<b>#include &lt;afx.h&gt;</b></p>
<p>
<a href="_mfc_cmemfile_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cfile.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

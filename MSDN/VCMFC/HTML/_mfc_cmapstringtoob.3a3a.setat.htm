<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMapStringToOb::SetAt</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cmapstringtoob.3a3a.setat"></a><sup></sup>CMapStringToOb::SetAt  </h1>
<p>
<b>void</b> <b>SetAt(</b> <b>LPCTSTR</b> <i>key</i><b>,</b> <b>CObject*</b> <i>newValue</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>key</i></p>
<p class=indent>
Specifies the string that is the key of the new element.</p>
<p class=dt>
<i>newValue</i></p>
<p class=indent>
Specifies the <b>CObject</b> pointer that is the value of the new element.</p>
<p class=label>
<b>Remarks</b></p>
<p>
The primary means to insert an element in a map. First, the key is looked up. If the key is found, then the corresponding value is changed; otherwise a new key-value element is created.</p>
<p class=label>
<b>Example</b></p>
<p>
See <a href="_mfc_coblist.3a3a.coblist.htm">CObList::CObList</a> for a listing of the <code>CAge</code> class used in all collection examples.</p>
<pre><code>// example for CMapStringToOb::SetAt
   CMapStringToOb map;
   CAge* pa;

   map.SetAt( "Bart", new CAge( 13 ) );
   map.SetAt( "Lisa", new CAge( 11 ) ); // Map contains 2 
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // elements.
#ifdef _DEBUG
   afxDump.SetDepth( 1 );
   afxDump &lt;&lt; "before Lisa's birthday: " &lt;&lt; &amp;map &lt;&lt; "\n";
#endif
   if( map.Lookup( "Lisa", (CObject *&amp;)pa ) )
   { // CAge 12 pointer replaces CAge 11 pointer.
      map.SetAt( "Lisa", new CAge( 12 ) );
      delete pa;&nbsp; // Must delete CAge 11 to avoid memory leak.
   }
#ifdef _DEBUG
   afxDump &lt;&lt; "after Lisa's birthday: " &lt;&lt; &amp;map &lt;&lt; "\n";
#endif
</code></pre>
<p>
The results from this program are as follows:</p>
<pre><code>before Lisa's birthday: A CMapStringToOb with 2 elements
 &nbsp;&nbsp; [Lisa] = a CAge at $493C 11
 &nbsp;&nbsp; [Bart] = a CAge at $4654 13
after Lisa's birthday: A CMapStringToOb with 2 elements
 &nbsp;&nbsp; [Lisa] = a CAge at $49C0 12
 &nbsp;&nbsp; [Bart] = a CAge at $4654 13
</code></pre>
<p>
<a href="_mfc_cmapstringtoob.htm">CMapStringToOb Overview</a>  |&nbsp; <a href="_mfc_cmapstringtoob_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cmapstringtoob.3a3a.lookup.htm">CMapStringToOb::Lookup</a>, <a href="_mfc_cmapstringtoob.3a3a.operator_.5b_5d.htm">CMapStringToOb::operator []</a></p>
</font></BODY>
</HTML>

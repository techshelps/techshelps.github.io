<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New ATL Features</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcovrnewatlfeatures"></a>New ATL Features</h1>
<h3>Add Message Handler for ATL</h3>
<p>
You can use ClassView or WizardBar to add message handlers for any ATL class that wraps a window. This is similar to adding a message handler to an MFC class. You can also access this command from the context menu in the resource editor (Events).</p>
<p>
This feature supports creating both message handlers and event handlers.</p>
<p>
This feature is only supported by ClassView and WizardBar, not ClassWizard; you cannot use ClassWizard to invoke this command for ATL classes or ATL dialog boxes.</p>
<p>
For more information, see <a href="vcrefaddingmessagehandler.htm">Adding a Message Handler</a>.</p>
<h3>ATL Composite Control</h3>
<p>
This control, based on a dialog template, can itself host multiple controls.</p>
<p>
For more information, see <a href="vcconcompositecontrolfundamentals.htm">Composite Control Fundamentals</a>.</p>
<h3>DHTML Control Added to the ATL Object Wizard</h3>
<p>
The ATL Object Wizard enables you to create a DHTML control; you can create the user interface for a control by having the wizard generate dynamic HTML. For example, the interface for a control could consist of three buttons on an HTML page.</p>
<p>
For more information, see <a href="vcconatlsupportfordhtmlcontrols.htm">ATL Support for DHTML Controls</a>.</p>
<h3>ATL Support for Developing MMC Snap-in Tools</h3>
<p>
The ATL Object Wizard provides support for developing <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_slate_the_microsoft_management_console_overview">
</object><a href=JavaScript:alink_1.Click()>Microsoft Management Console</a> (MMC) snap-ins. Your MMC snap-ins provide Windows NT system administrators with integrated tools, which you have designed for a specific task.</p>
<p>
For more information, see <a href="vcconmmcsnapinwizard.htm">MMC Snap-In Wizard</a>.</p>
<h3>Data Access Support in the ATL Object Wizard</h3>
<p>
There is a new category in the ATL Object Wizard called "Data Access." This new category contains two wizards: Consumer and Provider. </p>
<p>
For more information, see <a href="vcrefcreatingoledbconsumer.htm">Creating an OLE DB Consumer</a> and <a href="vcconcreatingoledbprovider.htm">Creating an OLE DB Template Provider</a>.</p>
<h3>ATL Support in MFC Projects</h3>
<p>
There is now greater interoperability between MFC- and ATL-based projects, including support for adding an ATL object to an MFC project. To add ATL support to your MFC project, click <b>New ATL Object</b> on the <b>Insert</b> menu. Click <b>YES</b> to confirm adding ATL support.</p>
<p>
For more information, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowAddingATLSupportToYourMFCProject">
</object><a href=JavaScript:alink_2.Click()>Adding ATL Support to Your MFC Project</a></p>
<h3>Implementing a Connection Point Is More Automated</h3>
<p>
To generate a connection point, right-click a class (in ClassView) that implements the <b>BEGIN_COM_MAP</b> macro and choose <b>Implement Connection Point</b> from the shortcut menu. In Visual C++ 5.0, you implemented connection points with the ATL Proxy Generator, which has been removed. </p>
<p>
For more information, see <a href="_atl_adding_connection_points_to_an_object.htm">Adding Connection Points to an Object</a>.</p>
<h3>Implement Interface Wizard</h3>
<p>
This new feature automates implementing an interface from a typelib. You select an interface from a type library, and the wizard adds stubbed-out functions for the interface and wires up the ATL-specific requirements. </p>
<p>
For more information, see <a href="_atl_adding_a_new_interface_to_an_existing_object_or_control.htm">Adding a New Interface to an Existing Object or Control</a>.</p>
</font></BODY>
</HTML>

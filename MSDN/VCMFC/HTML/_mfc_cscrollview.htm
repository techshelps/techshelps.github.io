<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CScrollView</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cscrollview"></a>CScrollView</h1>
<p>
<img src="cscrollv.gif" border=0></p>
<p>
The <b>CScrollView</b> class is a <a href="_mfc_cview.htm">CView</a> with scrolling capabilities. </p>
<p>
You can handle standard scrolling yourself in any class derived from <b>CView</b> by overriding the message-mapped <a href="_mfc_cwnd.3a3a.onhscroll.htm">OnHScroll</a> and <a href="_mfc_cwnd.3a3a.onvscroll.htm">OnVScroll</a> member functions. But <b>CScrollView</b> adds the following features to its <b>CView</b> capabilities:
<ul type=disc>
<li>
It manages window and viewport sizes and mapping modes. <br><br></li>
<li>
It scrolls automatically in response to scroll-bar messages. <br><br></li>
<li>
It scrolls automatically in response to messages from the keyboard, a non-scrolling mouse, or the IntelliMouse wheel.</li>
</ul>
<p>
You can handle mouse wheel scrolling yourself by overriding the message-mapped <a href="_mfc_cwnd.3a3a.onmousewheel.htm">OnMouseWheel</a> and <a href="_mfc_cwnd.3a3a.onregisteredmousewheel.htm">OnRegisteredMouseWheel</a> member functions. As they are for <b>CScrollView</b>, these member functions support the recommended behaviour for <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_WM_MOUSEWHEEL">
</object><a href=JavaScript:alink_1.Click()>WM_MOUSEWHEEL</a>, the wheel rotation message. </p>
<p>
To take advantage of automatic scrolling, derive your view class from <b>CScrollView</b> instead of from <b>CView</b>. When the view is first created, if you want to calculate the size of the scrollable view based on the size of the document, call the <b>SetScrollSizes</b> member function from your override of either <a href="_mfc_cview.3a3a.oninitialupdate.htm">CView::OnInitialUpdate</a> or <a href="_mfc_cview.3a3a.onupdate.htm">CView::OnUpdate</a>. (You must write your own code to query the size of the document. For an example, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Scribble enhancing views">
</object><a href=JavaScript:alink_2.Click()>Enhancing Views</a> in <i>Visual C++ Tutorials</i>.)</p>
<p>
The call to the <b>SetScrollSizes</b> member function sets the view’s mapping mode, the total dimensions of the scroll view, and the amounts to scroll horizontally and vertically. All sizes are in logical units. The logical size of the view is usually calculated from data stored in the document, but in some cases you may want to specify a fixed size. For examples of both approaches, see <a href="_mfc_cscrollview.3a3a.setscrollsizes.htm">CScrollView::SetScrollSizes</a>.</p>
<p>
You specify the amounts to scroll horizontally and vertically in logical units. By default, if the user clicks a scroll bar shaft outside of the scroll box, <b>CScrollView</b> scrolls a “page.” If the user clicks a scroll arrow at either end of a scroll bar, <b>CScrollView</b> scrolls a “line.” By default, a page is 1/10 of the total size of the view; a line is 1/10 of the page size. Override these default values by passing custom sizes in the <b>SetScrollSizes</b> member function. For example, you might set the horizontal size to some fraction of the width of the total size and the vertical size to the height of a line in the current font.</p>
<p>
Instead of scrolling, <b>CScrollView</b> can automatically scale the view to the current window size. In this mode, the view has no scroll bars and the logical view is stretched or shrunk to exactly fit the window’s client area. To use this scale-to-fit capability, call <a href="_mfc_cscrollview.3a3a.setscaletofitsize.htm">CScrollView::SetScaleToFitSize</a>. (Call either <b>SetScaleToFitSize</b> or <b>SetScrollSizes</b>, but not both.)</p>
<p>
Before the <code>OnDraw</code> member function of your derived view class is called, <b>CScrollView</b> automatically adjusts the viewport origin for the <b>CPaintDC</b> device-context object that it passes to <code>OnDraw</code>.</p>
<p>
To adjust the viewport origin for the scrolling window, <b>CScrollView</b> overrides <a href="_mfc_cview.3a3a.onpreparedc.htm">CView::OnPrepareDC</a>. This adjustment is automatic for the <b>CPaintDC</b> device context that <b>CScrollView</b> passes to <code>OnDraw</code>, but you must call <b>CScrollView::OnPrepareDC</b> yourself for any other device contexts you use, such as a <b>CClientDC</b>. You can override <b>CScrollView::OnPrepareDC</b> to set the pen, background color, and other drawing attributes, but call the base class to do scaling.</p>
<p>
Scroll bars can appear in three places relative to a view, as shown in the following cases:
<ul type=disc>
<li>
Standard window-style scroll bars can be set for the view using the <b>WS_HSCROLL</b> and <b>WS_VSCROLL</b> <a href="_mfc_window_styles.htm">styles</a>.&nbsp; <br><br></li>
<li>
Scroll-bar controls can also be added to the frame containing the view, in which case the framework forwards <b>WM_HSCROLL</b> and <b>WM_VSCROLL</b> messages from the frame window to the currently active view. <br><br></li>
<li>
The framework also forwards scroll messages from a <b>CSplitterWnd</b> splitter control to the currently active splitter pane (a view). When placed in a <a href="_mfc_csplitterwnd.htm">CSplitterWnd</a> with shared scroll bars, a <b>CScrollView</b> object will use the shared ones rather than creating its own.</li>
</ul>
<p>
For more information on using <b>CScrollView</b>, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Document.2f.View_Architecture_Topics">
</object><a href=JavaScript:alink_3.Click()>Document/View Architecture Topics</a> and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Derived_View_Classes">
</object><a href=JavaScript:alink_4.Click()>Derived View Classes</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxwin.h&gt;</b></p>
<p>
<a href="_mfc_cscrollview_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cview.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DIBLOOK">
</object><a href=JavaScript:alink_5.Click()>MFC Sample DIBLOOK</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cview.htm">CView</a>, <a href="_mfc_csplitterwnd.htm">CSplitterWnd</a></p>
</font></BODY>
</HTML>

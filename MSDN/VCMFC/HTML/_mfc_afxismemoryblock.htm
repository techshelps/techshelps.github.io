<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AfxIsMemoryBlock</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_afxismemoryblock"></a>AfxIsMemoryBlock&nbsp; </h1>
<p>
<b>BOOL</b> <b>AfxIsMemoryBlock(</b> <b>const</b> <b>void*</b> <i>p</i><b>,</b> <b>UINT</b> <i>nBytes</i><b>,</b> <b>LONG*</b> <i>plRequestNumber</i> <b>=</b> <b>NULL</b> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if the memory block is currently allocated and the length is correct; otherwise 0.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>p</i></p>
<p class=indent>
Points to the block of memory to be tested.</p>
<p class=dt>
<i>nBytes</i></p>
<p class=indent>
Contains the length of the memory block in bytes.</p>
<p class=dt>
<i>plRequestNumber</i></p>
<p class=indent>
Points to a <b>long</b> integer that will be filled in with the memory block’s allocation sequence number. The variable pointed to by <i>plRequestNumber</i> will only be filled in if <b>AfxIsMemoryBlock</b> returns nonzero.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Tests a memory address to make sure it represents a currently active memory block that was allocated by the diagnostic version of <b>new</b>. It also checks the specified size against the original allocated size. If the function returns nonzero, the allocation sequence number is returned in <i>plRequestNumber</i>. This number represents the order in which the block was allocated relative to all other <b>new</b> allocations.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// example for AfxIsMemoryBlock
CAge* pcage = new CAge( 21 ); // CAge is derived from CObject.
ASSERT( AfxIsMemoryBlock( pcage, sizeof( CAge ) ) )
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_afxisvalidaddress.htm">AfxIsValidAddress</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CComClassFactory2</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_ccomclassfactory2"></a>CComClassFactory2</h1>
<p>
<b>template&lt; class</b> <i>license</i><b> &gt;<br>
class CComClassFactory2 : public CComClassFactory2Base, </b><i>license</i></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>license</i></p>
<p class=indent>
A class that implements the following static functions:
<ul type=disc>
<li>
<b>static BOOL VerifyLicenseKey( BSTR </b><i>bstr</i><b> );</b><br><br></li>
<li>
<b>static BOOL GetLicenseKey( DWORD </b><i>dwReserved</i><b>, BSTR* </b><i>pBstr</i><b> );</b><br><br></li>
<li>
<b>static BOOL IsLicenseValid( );</b></li>
</ul>
<p>
<b>CComClassFactory2</b> implements the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_IClassFactory2">
</object><a href=JavaScript:alink_1.Click()>IClassFactory2</a> interface, which is an extension of <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_IClassFactory">
</object><a href=JavaScript:alink_2.Click()>IClassFactory</a>. <b>IClassFactory2</b> controls object creation through a license. A class factory executing on a licensed machine can provide a run-time license key. This license key allows an application to instantiate objects when a full machine license does not exist.</p>
<p>
ATL objects normally acquire a class factory by deriving from <a href="_atl_ccomcoclass.htm">CComCoClass</a>. This class includes the macro <a href="_atl_declare_classfactory.htm">DECLARE_CLASSFACTORY</a>, which declares <a href="_atl_ccomclassfactory.htm">CComClassFactory</a> as the default class factory. To use <b>CComClassFactory2</b>, specify the <a href="_atl_declare_classfactory2.htm">DECLARE_CLASSFACTORY2</a> macro in your object’s class definition. For example:</p>
<pre><code>class CMyClass : ..., public CComCoClass&lt; ... &gt;
{
public:
 &nbsp; DECLARE_CLASSFACTORY2(CMyLicense)

 &nbsp; ...
};
</code></pre>
<p>
<b>CMyLicense</b>, the template parameter to <b>CComClassFactory2</b>, must implement the static functions <b>VerifyLicenseKey</b>, <b>GetLicenseKey</b>, and <b>IsLicenseValid</b>. The following is an example of a simple license class:</p>
<pre><code>class CMyLicense
{
protected:
 &nbsp; static BOOL VerifyLicenseKey(BSTR bstr)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; USES_CONVERSION;
 &nbsp;&nbsp;&nbsp;&nbsp; return !lstrcmp(OLE2T(bstr), _T("My run-time license key"));
 &nbsp; }

 &nbsp; static BOOL GetLicenseKey(DWORD dwReserved, BSTR* pBstr) 
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; USES_CONVERSION;
 &nbsp;&nbsp;&nbsp;&nbsp; *pBstr = SysAllocString( T2OLE(_T("My run-time license key"))); 
 &nbsp;&nbsp;&nbsp;&nbsp; return TRUE;
 &nbsp; }

 &nbsp; static BOOL IsLicenseValid() {&nbsp; return TRUE; }
};
</code></pre>
<p>
<b>CComClassFactory2</b> derives from both <b>CComClassFactory2Base</b> and <i>license</i>. <b>CComClassFactory2Base</b>, in turn, derives from <b>IClassFactory2</b> and <b>CComObjectRootEx&lt; CComGlobalsThreadModel &gt;</b>.</p>
<p>
<b>#include &lt;atlcom.h&gt;</b></p>
<p>
<a href="_atl_ccomclassfactory2_class_members.htm">Class Members</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_atl_ccomclassfactoryautothread.htm">CComClassFactoryAutoThread</a>, <a href="_atl_ccomclassfactorysingleton.htm">CComClassFactorySingleton</a>, <a href="_atl_ccomobjectrootex.htm">CComObjectRootEx</a>, <a href="_atl_ccomglobalsthreadmodel.htm">CComGlobalsThreadModel</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TN025: Document, View, and Frame Creation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfcnotes_tn025"></a><sup></sup>TN025: Document, View, and Frame Creation</h1>
<p>
This note describes the creation and ownership issues for WinApps, DocTemplates, Documents, Frames and Views. You can find most of this information, and other interesting creation and ownership issues, in <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b>WinApp</b></p>
<p>
There is one <b>CWinApp</b> object in the system.</p>
<p>
It is statically constructed and initialized by the framework's internal implementation of <b>WinMain</b>. You must derive from <b>CWinApp</b> to do anything useful (exception: extension DLLs should not have a <b>CWinApp</b> instance — initialization is done in <b>DllMain</b> instead).</p>
<p>
The one <b>CWinApp</b> object owns a list of document templates (a <b>CPtrList</b>). There is one or more document template per application. DocTemplates are usually loaded from the resource file (that is, a string array) in <b>CWinApp::InitInstance</b>.</p>
<pre><code>pTemplate = new CDocTemplate(IDR_MYDOCUMENT, ...);
AddDocTemplate(pTemplate);
</code></pre>
<p>
The one <b>CWinApp</b> object owns all frame windows in the application. The main frame window for the application should be stored in <b>CWinApp::m_pMainWnd</b>; usually you set <b>m_pMainWnd</b> in the <b>InitInstance</b> implementation if you have not let AppWizard do it for you. For single document interface (SDI) this is one <b>CFrameWnd</b> that serves as the main application frame window as well as the only document frame window. For multiple document interface (MDI) this is an MDI-Frame (class <b>CMDIFrameWnd</b>) which serves as the main application frame window that contains all the child <b>CFrameWnd</b>s. Each child window is of class <b>CMDIChildWnd</b> (derived from <b>CFrameWnd</b>) and serves as one of potentially many document frame windows.</p>
<p class=label>
<b>DocTemplates</b></p>
<p>
The <b>CDocTemplate</b> is the creator and manager of documents. It owns the documents which it creates. If your application uses the resource-based approach described below, it will not need to derive from <b>CDocTemplate</b>.</p>
<p>
For an SDI application, the class <b>CSingleDocTemplate</b> keeps track of one open document. For an MDI application, the class <b>CMultiDocTemplate</b> keeps a list (a <b>CPtrList</b>) of all the currently open documents created from that template. <b>CDocTemplate::AddDocument</b> and <b>CDocTemplate::RemoveDocument</b> provide the virtual member functions for adding or removing a document from the template. <b>CDocTemplate</b> is a friend of <b>CDocument</b> so we can set the protected <b>CDocument::m_pDocTemplate</b> back pointer to point back to the doc template that created the document.</p>
<p>
<b>CWinApp</b> handles the default <b>OnFileOpen</b> implementation, which will in turn query all the doc templates. The implementation includes looking for already open documents and deciding what format to open new documents in.</p>
<p>
<b>CDocTemplate</b> manages the UI binding for documents and frames.</p>
<p>
<b>CDocTemplate</b> keeps a count of the number of unnamed documents.</p>
<p class=label>
<b>CDocument</b></p>
<p>
A <b>CDocument</b> is owned by a <b>CDocTemplate</b>.</p>
<p>
Documents have a list of currently open views (derived from <b>CView</b>) that are viewing the document (a <b>CPtrList</b>).</p>
<p>
Documents do not create/destroy the views, but they are attached to each other after they are created. When a document is closed (that is, through File/Close), all attached views will be closed. When the last view on a document is closed (that is, Window/Close) the document will be closed.</p>
<p>
The <b>CDocument::AddView</b>, <b>RemoveView</b> interface is used to maintain the view list. <b>CDocument</b> is a friend of <b>CView</b> so we can set the <b>CView::m_pDocument</b> back pointer.</p>
<p class=label>
<b>CFrameWnd</b></p>
<p>
A <b>CFrameWnd</b> (also known as a frame) plays the same role as in MFC 1.0, but now the <b>CFrameWnd</b> class is designed to be used in many cases without deriving a new class. The derived classes <b>CMDIFrameWnd</b> and <b>CMDIChildWnd</b> are also enhanced so many standard commands are already implemented.</p>
<p>
The <b>CFrameWnd</b> is responsible for creating windows in the client area of the frame. Normally there is one main window filling the client area of the frame.</p>
<p>
For an MDI-Frame window, the client area is filled with the MDICLIENT control which is in turn the parent of all the MDI-Child frame windows. For an SDI-Frame window or an MDI-Child frame window, the client area is usually filled with a <b>CView</b>-derived window object. In the case of <b>CSplitterWnd</b>, the client area of the view is filled with the <b>CSplitterWnd</b> window object, and the <b>CView</b>-derived window objects (one per split pane) are created as child windows of the <b>CSplitterWnd</b>.</p>
<p>
<a href="_mfcnotes_technical_notes_by_number.htm">Technical Notes by Number</a>  |&nbsp; <a href="_mfcnotes_technical_notes_by_category.htm">Technical Notes by Category</a></p>
</font></BODY>
</HTML>

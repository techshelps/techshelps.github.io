<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The User Record</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcreftheuserrecord"></a>The User Record</h1>
<p>
The User Record provides the code and data structure that represents the column data for a rowset. A User Record can be created at compile time or at run time. When you create a Provider using the ATL Object Wizard, the wizard creates a default user record that looks like this:</p>
<pre><code>class CWindowsFile:
   public WIN32_FIND_DATA
{
public:

BEGIN_PROVIDER_COLUMN_MAP(CWindowsFile)
   PROVIDER_COLUMN_ENTRY("FileAttributes", 1, dwFileAttributes)
   PROVIDER_COLUMN_ENTRY("FileSizeHigh", 2, nFileSizeHigh)
   PROVIDER_COLUMN_ENTRY("FileSizeLow", 3, nFileSizeLow)
   PROVIDER_COLUMN_ENTRY("FileName", 4, cFileName)
   PROVIDER_COLUMN_ENTRY("AltFileName", 5, cAlternateFileName)
END_PROVIDER_COLUMN_MAP()

};
</code></pre>
<p>
The OLE DB Provider Templates handle all OLE DB specifics regarding interactions with the client. To acquire the column data needed for a response, the provider calls the <b>GetColumnInfo</b> function, which you must place in the User Record:</p>
<pre><code>template &lt;class T&gt;
static ATLCOLUMNINFO* GetColumnInfo(T* pThis, ULONG* pcCols) 
</code></pre>
<p>
The <b>PROVIDER_COLUMN_MAP</b> macros aid in creating a <b>GetColumnInfo</b> function:
<ul type=disc>
<li>
<b>BEGIN_PROVIDER_COLUMN_MAP</b> defines the function prototype and a static array of <b>ATLCOLUMNINFO</b> structures.<br><br></li>
<li>
<b>PROVIDER_COLUMN_ENTRY</b> macro defines and initializes a single <b>ATLCOUMNINFO</b>.<br><br></li>
<li>
<b>END_PROVIDER_COLUMN_MAP</b> closes the array and the function. It also places the array element count into the <b>pcCols</b> parameter.</li>
</ul>
<p>
When a User Record is created at run time, <b>GetColumnInfo </b>uses the <b>pThis</b> parameter to receive a pointer to a rowset or command instance. Commands and rowsets must support the <b>IColumnsInfo</b> interface, so column information can be obtained from this pointer.</p>
<p>
You can explicitly override <b>GetColumnInfo</b> in the User Record, as shown here:</p>
<pre><code>template &lt;class T&gt;
static ATLCOLUMNINFO* GetColumnInfo(T* pThis, ULONG* pcCols) 
</code></pre>
<p>
This is equivalent to:</p>
<pre><code>static ATLCOLUMNINFO* GetColumnInfo(CommandClass* pThis, ULONG* pcCols)
static ATLCOLUMNINFO* GetColumnInfo(RowsetClass* pThis, ULONG* pcCols)
</code></pre>
<p>
<b>CommandClass</b> and <b>RowsetClass</b> are the command and rowset that use the User Record.</p>
<p>
For an additional example of how to override <b>GetColumnInfo</b> in a User Record, see <a href="vchowimplementingsimpleread-onlyprovider.htm">Creating a Simple Read-Only Provider</a>.</p>
<p>
<a href="vccontheoledbproviderarchitecture.htm">Back to the OLE DB Provider Template Architecture</a></p>
</font></BODY>
</HTML>

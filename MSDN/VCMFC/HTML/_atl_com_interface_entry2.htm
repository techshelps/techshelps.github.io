<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM_INTERFACE_ENTRY2</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_com_interface_entry2"></a>COM_INTERFACE_ENTRY2</h1>
<p>
<b>COM_INTERFACE_ENTRY2( </b><i>x</i><b>, </b><i>x2</i><b> )</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>x</i></p>
<p class=indent>
[in] The name of an interface you want to expose from your object.</p>
<p class=dt>
<i>x2</i></p>
<p class=indent>
[in] The name of the inheritance branch from which <i>x</i> is exposed. </p>
<p class=label>
<b>Remarks</b></p>
<p>
Use this macro to disambiguate two branches of inheritance. For example, if you derive your class object from two dual interfaces, you expose <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_olemsg_IDispatch">
</object><a href=JavaScript:alink_1.Click()>IDispatch</a> using <b>COM_INTERFACE_ENTRY2</b> since <b>IDispatch</b> can be obtained from either one of the interfaces.</p>
<p>
For example, from the ATL sample <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_atl_COMMAP">
</object><a href=JavaScript:alink_2.Click()>COMMAP</a>:</p>
<pre><code>class COuter :
 &nbsp; public CChainBase, // CChainBase derives from 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // IDispatch
 &nbsp; public IDispatchImpl&lt;IOuter, &amp;IID_IOuter, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;LIBID_COMMAPLib)&gt;,
 &nbsp; public CComCoClass&lt;COuter, &amp;CLSID_COuter&gt;
{
public:
 &nbsp; COuter(){}
 &nbsp; ...

 &nbsp; BEGIN_COM_MAP(COuter)
 &nbsp;&nbsp;&nbsp;&nbsp; COM_INTERFACE_ENTRY2(IDispatch, IOuter)
 &nbsp; ...
 &nbsp; END_COM_MAP

};
</code></pre>
<p>
See <a href="_atl_com_interface_entry_macros.htm">COM_INTERFACE_ENTRY Macros</a> for remarks about COM map entries.</p>
<p>
<a href="_atl_atl_macros_and_global_functions.htm">ATL Macros and Global Functions</a></p>
</font></BODY>
</HTML>

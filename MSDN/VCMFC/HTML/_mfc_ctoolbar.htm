<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CToolBar</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ctoolbar"></a>CToolBar</h1>
<p>
<img src="ctoolbar.gif" border=0></p>
<p>
Objects of the class <b>CToolBar</b> are control bars that have a row of bitmapped buttons and optional separators. The buttons can act like pushbuttons, check-box buttons, or radio buttons. <b>CToolBar</b> objects are usually embedded members of frame-window objects derived from the class <a href="_mfc_cframewnd.htm">CFrameWnd</a> or <a href="_mfc_cmdiframewnd.htm">CMDIFrameWnd</a>.</p>
<p>
<a href="_mfc_ctoolbar.3a3a.gettoolbarctrl.htm">CToolBar::GetToolBarCtrl</a>, a member function new to MFC 4.0, allows you to take advantage of the Windows common control's support for toolbar customization and additional functionality. <b>CToolBar</b> member functions give you most of the functionality of the Windows common controls; however, when you call <b>GetToolBarCtrl</b>, you can give your toolbars even more of the characteristics of Windows 95 toolbars. When you call <b>GetToolBarCtrl</b>, it will return a reference to a <b>CToolBarCtrl</b> object. See <a href="_mfc_ctoolbarctrl.htm">CToolBarCtrl</a> for more information about designing toolbars using Windows common controls. For more general information about common controls, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_Common_Controls">
</object><a href=JavaScript:alink_1.Click()>Common Controls</a> in the <i>Windows 95 SDK Programmer’s Reference</i>.</p>
<p>
Visual C++ provides you with two methods to create a toolbar. To create a toolbar resource using the Resource Editor, follow these steps:
<ol>
<li>
Create a toolbar resource.<br><br></li>
<li>
Construct the <b>CToolBar</b> object.<br><br></li>
<li>
Call the <a href="_mfc_ctoolbar.3a3a.create.htm">Create</a> (or <a href="_mfc_ctoolbar.3a3a.createex.htm">CreateEx</a>) function to create the Windows toolbar and attach it to the <b>CToolBar</b> object.<br><br></li>
<li>
Call <a href="_mfc_ctoolbar.3a3a.loadtoolbar.htm">LoadToolBar</a> to load the toolbar resource.</li>
</ol>
<p>
Otherwise, follow these steps:
<ol>
<li>
Construct the <b>CToolBar</b> object.<br><br></li>
<li>
Call the <a href="_mfc_ctoolbar.3a3a.create.htm">Create</a> (or <a href="_mfc_ctoolbar.3a3a.createex.htm">CreateEx</a>) function to create the Windows toolbar and attach it to the <b>CToolBar</b> object.<br><br></li>
<li>
Call <a href="_mfc_ctoolbar.3a3a.loadbitmap.htm">LoadBitmap</a> to load the bitmap that contains the toolbar button images.<br><br></li>
<li>
Call <a href="_mfc_ctoolbar.3a3a.setbuttons.htm">SetButtons</a> to set the button style and associate each button with an image in the bitmap.</li>
</ol>
<p>
All the button images in the toolbar are taken from one bitmap, which must contain one image for each button. All images must be the same size; the default is 16 pixels wide and 15 pixels high. Images must be side by side in the bitmap.</p>
<p>
The <b>SetButtons</b> function takes a pointer to an array of control IDs and an integer that specifies the number of elements in the array. The function sets each button’s ID to the value of the corresponding element of the array and assigns each button an image index, which specifies the position of the button’s image in the bitmap. If an array element has the value <b>ID_SEPARATOR</b>, no image index is assigned.</p>
<p>
The order of the images in the bitmap is typically the order in which they are drawn on the screen, but you can use the <a href="_mfc_ctoolbar.3a3a.setbuttoninfo.htm">SetButtonInfo</a> function to change the relationship between image order and drawing order.</p>
<p>
All buttons in a toolbar are the same size. The default is 24 x 22 pixels, in accordance with <i>Windows Interface Guidelines for Software Design</i>. Any additional space between the image and button dimensions is used to form a border around the image.</p>
<p>
Each button has one image. The various button states and styles (pressed, up, down, disabled, disabled down, and indeterminate) are generated from that one image. Although bitmaps can be any color, you can achieve the best results with images in black and shades of gray.</p>
<p>
Toolbar buttons imitate pushbuttons by default. However, toolbar buttons can also imitate check-box buttons or radio buttons. Check-box buttons have three states: checked, cleared, and indeterminate. Radio buttons have only two states: checked and cleared.</p>
<p>
To set an individual button or separator style without pointing to an array, call <a href="_mfc_ctoolbar.3a3a.getbuttonstyle.htm">GetButtonStyle</a> to retrieve the style, and then call <a href="_mfc_ctoolbar.3a3a.setbuttonstyle.htm">SetButtonStyle</a> instead of <b>SetButtons</b>. <b>SetButtonStyle</b> is most useful when you want to change a button’s style at run time.</p>
<p>
To assign text to appear on a button, call <a href="_mfc_ctoolbar.3a3a.getbuttontext.htm">GetButtonText</a> to retrieve the text to appear on the button, and then call <a href="_mfc_ctoolbar.3a3a.setbuttontext.htm">SetButtonText</a> to set the text. </p>
<p>
To create a check-box button, assign it the style <b>TBBS_CHECKBOX</b> or use a <b>CCmdUI</b> object’s <b>SetCheck</b> member function in an <b>ON_UPDATE_COMMAND_UI</b> handler. Calling <b>SetCheck</b> turns a pushbutton into a check-box button. Pass <b>SetCheck</b> an argument of 0 for unchecked, 1 for checked, or 2 for indeterminate.</p>
<p>
To create a radio button, call a <a href="_mfc_ccmdui.htm">CCmdUI</a> object’s <a href="_mfc_ccmdui.3a3a.setradio.htm">SetRadio</a> member function from an <b>ON_UPDATE_COMMAND_UI</b> handler. Pass <b>SetRadio</b> an argument of 0 for unchecked or nonzero for checked. In order to provide a radio group’s mutually exclusive behavior, you must have <b>ON_UPDATE_COMMAND_UI</b> handlers for all of the buttons in the group.</p>
<p>
For more information on using <b>CToolBar</b>, see the article <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Toolbars">
</object><a href=JavaScript:alink_2.Click()>Toolbars</a> in <i>Visual C++ Programmer’s Guide</i> and <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_MFCNOTES_TN031">
</object><a href=JavaScript:alink_3.Click()>Technical Note 31</a>, Control Bars.</p>
<p>
<b>#include &lt;afxext.h&gt;</b></p>
<p>
<a href="_mfc_ctoolbar_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_ccontrolbar.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Samples</b>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_MFC_CTRLBARS">
</object><a href=JavaScript:alink_4.Click()>MFC Sample CTRLBARS</a>  |&nbsp; <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DLGCBR32">
</object><a href=JavaScript:alink_5.Click()>MFC Sample DLGCBR32</a>  |&nbsp; <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DOCKTOOL">
</object><a href=JavaScript:alink_6.Click()>MFC Sample DOCKTOOL</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_ctoolbarctrl.htm">CToolBarCtrl</a>, <a href="_mfc_ccontrolbar.htm">CControlBar</a>, <a href="_mfc_ctoolbar.3a3a.create.htm">CToolBar::Create</a>, <a href="_mfc_ctoolbar.3a3a.loadbitmap.htm">CToolBar::LoadBitmap</a>, <a href="_mfc_ctoolbar.3a3a.setbuttons.htm">CToolBar::SetButtons</a>, <a href="_mfc_ccmdui.3a3a.setcheck.htm">CCmdUI::SetCheck</a>, <a href="_mfc_ccmdui.3a3a.setradio.htm">CCmdUI::SetRadio</a></p>
</font></BODY>
</HTML>

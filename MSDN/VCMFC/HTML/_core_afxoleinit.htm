<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AfxOleInitModule</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_core_afxoleinit"></a>AfxOleInitModule</h1>
<p>
<b>void</b> <b>AFXAPI</b> <b>AfxOleInitModule(</b> <b>);</b></p>
<p>
<b>#include &lt;afxdll_.h&gt;</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
For OLE support from a regular DLL that is dynamically linked to MFC, call this function in your regular DLL's <b>CWinApp::InitInstance</b> function to initialize the MFC OLE DLL. The MFC OLE DLL is an extension DLL; in order for an extension DLL to get wired into a <b>CDynLinkLibrary</b> chain, it must create a <b>CDynLinkLibrary</b> object in the context of every module that will be using it. <b>AfxOleInitModule</b> creates the <b>CDynLinkLibrary</b> object in your regular DLL’s context so that it gets wired into the <b>CDynLinkLibrary</b> object chain of the regular DLL.</p>
<p>
If you are building an OLE control and are using <b>COleControlModule</b>, you should not call <b>AfxOleInitModule </b>because the <b>InitInstance</b> member function for <b>COleControlModule</b> calls <b>AfxOleInitModule</b>.</p>
</font></BODY>
</HTML>

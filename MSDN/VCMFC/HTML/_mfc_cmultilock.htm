<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMultiLock</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cmultilock"></a>CMultiLock</h1>
<p>
<b>CMultiLock</b> does not have a base class.</p>
<p>
An object of class <b>CMultiLock </b>represents the access-control mechanism used in controlling access to resources in a multithreaded program. To use the synchronization classes <a href="_mfc_csemaphore.htm">CSemaphore</a>, <a href="_mfc_cmutex.htm">CMutex</a>, and <a href="_mfc_cevent.htm">CEvent</a>,<b> </b>you can create either a <b>CMultiLock </b>or <a href="_mfc_csinglelock.htm">CSingleLock</a><b> </b>object to wait on and release the synchronization object. Use <b>CMultiLock </b>when there are multiple objects that you could use at a particular time. Use <b>CSingleLock </b>when you only need to wait on one object at a time.</p>
<p>
To use a <b>CMultiLock </b>object, first create an array of the synchronization objects that you wish to wait on. Next, call the <b>CMultiLock </b>object’s constructor inside a member function in the controlled resource’s class. Then call the <a href="_mfc_cmultilock.3a3a.lock.htm">Lock</a> member function to determine if a resource is available (signaled). If one is, continue with the remainder of the member function. If no resource is available, either wait for a specified amount of time for a resource to be released, or return failure. After use of a resource is complete, either call the <a href="_mfc_cmultilock.3a3a.unlock.htm">Unlock</a> function if the <b>CMultiLock </b>object is to be used again, or allow the <b>CMultiLock </b>object to be destroyed.</p>
<p>
<b>CMultiLock </b>objects are most useful when a thread has a large number of <b>CEvent </b>objects it can respond to. Create an array containing all the <b>CEvent </b>pointers, and call <b>Lock</b>. This will cause the thread to wait until one of the events is signaled.</p>
<p>
For more information on how to use <b>CMultiLock </b>objects, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.How_to_Use_the_Synchronization_Classes">
</object><a href=JavaScript:alink_1.Click()>Multithreading: How to Use the Synchronization Classes</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxmt.h&gt;</b></p>
<p>
<a href="_mfc_cmultilock_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

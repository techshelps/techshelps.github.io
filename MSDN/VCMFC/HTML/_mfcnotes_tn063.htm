<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TN063: Debugging Internet Extension DLLs</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfcnotes_tn063"></a>TN063: Debugging Internet Extension DLLs</h1>
<p>
If you have written an Internet Server extension DLL, you might be interested in getting it running under the debugger so you can trace its execution, set breakpoints, or monitor variable values after the extension is called. Getting the Microsoft Internet Information Server (IIS) up and running with your DLL in the debugger is a little tricky. You will need to first find a quiet server where you can debug your DLL in a controlled setting. Once you’ve found such a resource, you can start debugging your DLL.</p>
<p>
Because of differences between version 3.0 and 4.0 of IIS, it is important to know which version you will be using to debug your DLL.
<ul type=disc>
<li>
<a href="#vcrefdebuggingusinginternetinformationserver(3.0earlier)">Debugging Using Internet Information Server (3.0 and earlier)</a><br><br></li>
<li>
<a href="#vcrefdebuggingusinginternetinformationserver(4.0later)">Debugging Using Internet Information Server (4.0 and later)</a></li>
</ul>

<h2><a name="vcrefdebuggingusinginternetinformationserver(3.0earlier)"></a>Debugging Using Internet Information Server (3.0 and earlier)</h2>
<p>
Follow these steps to debug an Internet Server extension DLL using IIS 3.0:
<ol>
<li>
Stop the IIS publishing services by using the IIS Manager, or by stopping the services with the Services icon in the Windows NT Advanced Server Control Panel. Note that you must stop all three services even though you are only debugging extensions to the World Wide Web publishing service. To make things easier, you might want to make the services "Manually" started in Control Panel so you can avoid this step later in your development.<br><br></li>
<li>
Start Microsoft Visual C++, and click the <b>Close Workspace</b> command on the <b>File</b> menu to close any opened workspace.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Open Workspace</b> to open the INETINFO.EXE program. This file is in the directory where you installed the Microsoft Internet Information Server. <br><br></li>
<li>
On the <b>Project</b> menu, click <b>Settings</b>, then click the <b>Debug</b> tab in the <b>Project Settings</b> dialog box.<br><br></li>
<li>
With <b>General</b> selected in the <b>Category</b> box, type the following in the <b>Program Arguments</b> text box:<p class=tl>
<code>-e W3Svc</code></P></li>
<li>
Choose <b>Additional DLLs</b> from the <b>Category</b> drop-down list. Then, in the <b>Local Names</b> box, specify the complete path and name of your extension DLL or DLLs. Make sure the check box next to each is marked.<br><br></li>
<li>
Click <b>OK</b> to close the <b>Project Settings</b> dialog box.<br><br></li>
<li>
Make sure that the .PDB file for your DLL is in the same directory as the DLLs you plan to debug.</li>
</ol>
<p class=label>
<b>Debugging Tips</b></p>
<p>
The IIS can be run as an interactive application, making debugging much easier. To do this you need to make a few changes to your system. For the user account that you are going to run the server under, you need to add a few privileges.</p>
<p>
To add privileges, run User Manager. (If you're using Windows NT 3.51, run MUSRMGR.EXE. If you're using Windows NT 4.0, run USRMGR.EXE.) Click <b>User Rights</b> from the <b>Policies</b> menu. Select the <b>Show Advanced User Rights</b> check box. Then select <b>Act as part of the operating system</b> from the drop-down list on the right, and add the user account. </p>
<p>
Repeat this process with <b>Generate Security Audits</b> (also in the drop-down list on the right). Make sure that all Internet Services (WWW, ftp, and gopher) are stopped and INETINFO.EXE is not running (use TLIST to check). Log off and log back on. You can then load the IIS with the command line:</p>
<p>
<code>INetInfo.Exe -e W3Svc</code></p>
<p>
To load IIS under a debugger (for example, under WinDbg), use the following command line:</p>
<p>
<code>WinDbg INetInfo.Exe -e W3Svc</code></p>
<p>
You are ready to go. In Visual C++, point to <b>Debug</b> on the <b>Build</b> menu and then click <b>Go</b>. This action starts the WWW publishing service, and the debugger will be aware of symbols in your DLL. You can ignore the warning that the file doesn’t have debugging information.</p>
<p>
When you close Visual C++, save the workspace for INETINFO.EXE. That way, you can avoid reentering the settings for the debugging session. Just open the INETINFO.MDS workspace file when you are ready to start the debugger again.</p>
<p class=label>
<b>Cached DLLs</b></p>
<p>
You can adjust the registry setting at HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/W3SVC/Parameters/CacheExtensions to have the server reinitialize DLLs each time they are used. If this setting is 1, the server will keep DLLs loaded in memory as long as possible. This is the default setting for the server, since it helps the server achieve peak performance, and should only be changed if you are using the server for debugging. If you make the setting 0, the server will always reload extension DLLs each time they are used.</p>
<p>
Forcing the server to reload your DLL is helpful when your DLL might be crashing or upsetting any per-instance data that it maintains. By forcing the server to reinitialize the DLL, you can get your DLL back into a predictable state with little effort. Be sure to test your DLL using the normal CacheExtensions setting, however, to make sure code in your DLL isn’t completely dependent on that initial state.</p>

<h2><a name="vcrefdebuggingusinginternetinformationserver(4.0later)"></a>Debugging Using Internet Information Server (4.0 and later)</h2>
<p>
There are several ways to establish an environment for debugging your server components and Internet Server extension DLLs when using IIS 4.0 or later. If you are using a debugger capable of attaching to a Windows NT process, you can use this functionality to debug your component or extension. For example, if you are debugging with Visual C++, take the following steps:
<ol>
<li>
Start the iisadmin process. This can be done from the command line with the command <b>net start iisadmin</b>. You can also use the Services dialog box from the Control Panel to start the IIS Admin Service, which will start iisadmin.<br><br></li>
<li>
Start Visual C++. Point to <b>Start Debug</b> on the <b>Build</b> menu and click <b>Attach to Process</b>.<br><br></li>
<li>
Select the <b>Show System Process</b> check box.<br><br></li>
<li>
Select the inetinfo process from the list and click <b>OK</b>.<br><br></li>
<li>
Start the w3svc service. This can be done from the command line with the command <b>net start w3svc</b>. You can also use the Services dialog box in the Control Panel to start the World Wide Web Publishing Service.</li>
</ol>
<p>
If the debugger you are using cannot attach to a Windows NT process, take the following steps to establish an appropriate debugging environment:
<ol>
<li>
Open the Services dialog box in the Control Panel.<br><br></li>
<li>
Select the IIS Admin service and click the <b>Startup</b> button.<br><br></li>
<li>
Select the <b>Allow Service to Interact with Desktop</b> check box and click <b>OK</b>.<br><br></li>
<li>
Repeat steps 2 and 3 for all processes that run under the IIS Admin process, for example World Wide Web Publishing Service and FTP Publishing Service.<br><br></li>
<li>
Use the Registry Editor (REGEDIT) to add a subkey named <b>Inetinfo.Exe</b> to the HKEY_LOCAL_MACHINE/Software/Microsoft/WindowsNT/CurrentVersion/Image File Execution Options key.<br><br></li>
<li>
Add the following entry to this new key:<p class=tl>
Debugger = &lt;DebuggerExeName&gt; where DebuggerExeName is the full path to the debugger you are using.</P></li>
</ol>
<p>
When the World Wide Web Publishing Service is started, your debugger will also be launched. You can now set appropriate breakpoints in your Internet Server extension DLL.</p>
<p>
You won't be able to set breakpoints in a component's source code until the component has been loaded into memory. To do this, start Internet Explorer and view the .ASP page containing the object. As soon as the page is loaded, you should be able to set breakpoints in your component. Click <b>Refresh</b> to view the page again, and trigger the breakpoints you selected. If the component cannot be loaded even once (for instance, if the fault occurs in component startup code), you need to load the component DLL prior to starting the debugging session. (See step 11 below.)</p>
<p>
In some cases, you may not be able to use either of the two procedures outlined above. If you have difficulty using either of these strategies, there is a third approach, which has been described in previous releases of IIS. This third approach requires the establishing of Windows NT security privileges as well as making changes to the registry. It will also disable your ability to run IIS as a service. This approach should only be used if the previous two strategies have failed. 
<ol>
<li>
Use the User Manager for Domains administration tool (USRMGR) to add the <b>Log on as Service</b>, <b>Act as part of the operating system</b>, and <b>Generate security audits</b> rights on the local computer to the Windows NT account you will use when debugging the Internet Server extension DLL.<br><br></li>
<li>
Use the Distributed COM Configuration utility (DCOMCNFG) to change the identity of the IIS Admin Service to the user account you will use for debugging.<br><br></li>
<li>
Use the Registry Editor (REGEDIT) to remove the LocalService keyword from all IISADMIN-related subkeys under HKEY_CLASSES_ROOT/AppID. This keyword may be found in the following subkeys:<p class=tl>
{61738644-F196-11D0-9953-00C04FD919C1} // IIS WAMREG admin Service</P><p class=tl>
{9F0BD3A0-EC01-11D0-A6A0-00A0C922E752} // IIS Admin Crypto Extension</P><p class=tl>
{A9E69610-B80D-11D0-B9B9-00A0C922E750} // IISADMIN Service</P><p class=tl>
The LocalService keyword may be found in additional subkeys of AppID.</P></li>
<li>
Add LocalServer32 subkeys to all IISADMIN-related subkeys under the CLSID node of the registry. This will include subkeys corresponding to all of the subkeys you removed in the previous step. Set the default value of these new keys to &lt;path&gt;\inetinfo.exe -e w3svc. (&lt;path&gt; is normally "c:\winnt\system32\inetsrv".)<br><br></li>
<li>
Stop the WWW and FTP services from the Microsoft Management Console, or from the Services dialog box in the Control Panel.<br><br></li>
<li>
Start Visual C++ and select the <b>Debug</b> tab in the <b>Project Settings</b> dialog box.<br><br></li>
<li>
Type the following path in the <b>Executable for debug session</b> field:<p class=tl>
<code>C:\WINNT\System32\Inetsrv\Inetinfo.exe</code></P></li>
<li>
Type the following in the <b>Program Arguments</b> field:<p class=tl>
<code>-e w3svc</code></P></li>
<li>
Select the <b>Link</b> tab in the <b>Project Settings</b> dialog box.<br><br></li>
<li>
Enter the name and path of the Internet Server extension DLL you are debugging in the <b>Output file name</b> field.<br><br></li>
<li>
Optionally, add your component DLL to the list of <b>Additional DLLs</b> that are loaded before the application starts. This will allow you to set breakpoints in component startup code.<br><br></li>
<li>
Click the <b>Go</b> button to start the debugging session.</li>
</ol>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;After you have completed the debugging session, you must reverse steps 5 through 1 to restore the previous settings and allow IIS to run as a service.</p>
<p>
<a href="_mfcnotes_technical_notes_by_number.htm">Technical Notes by Number</a>  |&nbsp; <a href="_mfcnotes_technical_notes_by_category.htm">Technical Notes by Category</a></p>
</font></BODY>
</HTML>

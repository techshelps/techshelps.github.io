<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CFont::CreateFont</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cfont.3a3a.createfont"></a><sup></sup>CFont::CreateFont  </h1>
<p>
<b>BOOL</b> <b>CreateFont(</b> <b>int</b> <i>nHeight</i><b>,</b> <b>int</b> <i>nWidth</i><b>,</b> <b>int</b> <i>nEscapement</i><b>,</b> <b>int</b> <i>nOrientation</i><b>,</b> <b>int</b> <i>nWeight</i><b>,</b> <b>BYTE</b> <i>bItalic</i><b>,</b> <b>BYTE</b> <i>bUnderline</i><b>,</b> <b>BYTE</b> <i>cStrikeOut</i><b>,</b> <b>BYTE</b> <i>nCharSet</i><b>,</b> <b>BYTE</b> <i>nOutPrecision</i><b>,</b> <b>BYTE</b> <i>nClipPrecision</i><b>,</b> <b>BYTE</b> <i>nQuality</i><b>,</b> <b>BYTE</b> <i>nPitchAndFamily</i><b>,</b> <b>LPCTSTR</b> <i>lpszFacename</i> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if successful; otherwise 0.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nHeight</i></p>
<p class=indent>
Specifies the desired height (in logical units) of the font. The font height can be specified in the following ways:
<ul type=disc>
<li>
Greater than 0, in which case the height is transformed into device units and matched against the cell height of the available fonts.<br><br></li>
<li>
Equal to 0, in which case a reasonable default size is used.<br><br></li>
<li>
Less than 0, in which case the height is transformed into device units and the absolute value is matched against the character height of the available fonts.<p class=tl>
The absolute value of <i>nHeight</i> must not exceed 16,384 device units after it is converted. For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size or the smallest font if all the fonts exceed the requested size.</P></li>
</ul>
<p class=dt>
<i>nWidth</i></p>
<p class=indent>
Specifies the average width (in logical units) of characters in the font. If <i>nWidth</i> is 0, the aspect ratio of the device will be matched against the digitization aspect ratio of the available fonts to find the closest match, which is determined by the absolute value of the difference.</p>
<p class=dt>
<i>nEscapement</i></p>
<p class=indent>
Specifies the angle (in 0.1-degree units) between the escapement vector and the x-axis of the display surface. The escapement vector is the line through the origins of the first and last characters on a line. The angle is measured counterclockwise from the x-axis.</p>
<p class=dt>
<i>nOrientation</i></p>
<p class=indent>
Specifies the angle (in 0.1-degree units) between the baseline of a character and the x-axis. The angle is measured counterclockwise from the x-axis for coordinate systems in which the y-direction is down and clockwise from the x-axis for coordinate systems in which the y-direction is up.</p>
<p class=dt>
<i>nWeight</i></p>
<p class=indent>
Specifies the font weight (in inked pixels per 1000). Although <i>nWeight</i> can be any integer value from 0 to 1000, the common constants and values are as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=42%><b>Constant</b></td>
<td class=label width=58%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=42%><b>FW_DONTCARE</b></td>
<td width=58%>0</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_THIN</b></td>
<td width=58%>100</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_EXTRALIGHT</b></td>
<td width=58%>200</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_ULTRALIGHT</b></td>
<td width=58%>200</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_LIGHT</b></td>
<td width=58%>300</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_NORMAL</b></td>
<td width=58%>400</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_REGULAR</b></td>
<td width=58%>400</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_MEDIUM</b></td>
<td width=58%>500</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_SEMIBOLD</b></td>
<td width=58%>600</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_DEMIBOLD</b></td>
<td width=58%>600</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_BOLD</b></td>
<td width=58%>700</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_EXTRABOLD</b></td>
<td width=58%>800</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_ULTRABOLD</b></td>
<td width=58%>800</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_BLACK</b></td>
<td width=58%>900</td>
</tr>
<tr valign=top>
<td width=42%><b>FW_HEAVY</b></td>
<td width=58%>900</td>
</tr>
</table><br>
<p class=tl>
These values are approximate; the actual appearance depends on the typeface. Some fonts have only <b>FW_NORMAL</b>, <b>FW_REGULAR</b>, and <b>FW_BOLD</b> weights. If <b>FW_DONTCARE</b> is specified, a default weight is used.</P><p class=dt>
<i>bItalic</i></p>
<p class=indent>
Specifies whether the font is italic.</p>
<p class=dt>
<i>bUnderline</i></p>
<p class=indent>
Specifies whether the font is underlined.</p>
<p class=dt>
<i>cStrikeOut</i></p>
<p class=indent>
Specifies whether characters in the font are struck out. Specifies a strikeout font if set to a nonzero value.</p>
<p class=dt>
<i>nCharSet</i></p>
<p class=indent>
Specifies the font’s character set. The following constants and values are predefined:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=42%><b>Constant</b></td>
<td class=label width=58%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=42%><b>ANSI_CHARSET</b></td>
<td width=58%>0</td>
</tr>
<tr valign=top>
<td width=42%><b>DEFAULT_CHARSET</b></td>
<td width=58%>1</td>
</tr>
<tr valign=top>
<td width=42%><b>SYMBOL_CHARSET</b></td>
<td width=58%>2</td>
</tr>
<tr valign=top>
<td width=42%><b>SHIFTJIS_CHARSET</b></td>
<td width=58%>128</td>
</tr>
<tr valign=top>
<td width=42%><b>OEM_CHARSET</b></td>
<td width=58%>255</td>
</tr>
</table><br>
<p class=tl>
The OEM character set is system-dependent.</P><p class=tl>
Fonts with other character sets may exist in the system. An application that uses a font with an unknown character set must not attempt to translate or interpret strings that are to be rendered with that font. Instead, the strings should be passed directly to the output device driver.</P><p class=tl>
The font mapper does not use the <b>DEFAULT_CHARSET</b> value. An application can use this value to allow the name and size of a font to fully describe the logical font. If a font with the specified name does not exist, a font from any character set can be substituted for the specified font. To avoid unexpected results, applications should use the <b>DEFAULT_CHARSET</b> value sparingly.</P><p class=dt>
<i>nOutPrecision</i></p>
<p class=indent>
Specifies the desired output precision. The output precision defines how closely the output must match the requested font’s height, width, character orientation, escapement, and pitch. It can be any one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=42%><b>OUT_CHARACTER_PRECIS</b></td>
<td width=58%><b>OUT_STRING_PRECIS</b></td>
</tr>
<tr valign=top>
<td width=42%><b>OUT_DEFAULT_PRECIS</b></td>
<td width=58%><b>OUT_STROKE_PRECIS</b></td>
</tr>
<tr valign=top>
<td width=42%><b>OUT_DEVICE_PRECIS</b></td>
<td width=58%><b>OUT_TT_PRECIS</b></td>
</tr>
<tr valign=top>
<td width=42%><b>OUT_RASTER_PRECIS</b></td>
<td width=58%></td>
</tr>
</table><br>
<p class=tl>
Applications can use the <b>OUT_DEVICE_PRECIS</b>, <b>OUT_RASTER_PRECIS</b>, and <b>OUT_TT_PRECIS</b> values to control how the font mapper chooses a font when the system contains more than one font with a given name. For example, if a system contains a font named Symbol in raster and TrueType form, specifying <b>OUT_TT_PRECIS</b> forces the font mapper to choose the TrueType version. (Specifying <b>OUT_TT_PRECIS</b> forces the font mapper to choose a TrueType font whenever the specified font name matches a device or raster font, even when there is no TrueType font of the same name.)</P><p class=dt>
<i>nClipPrecision</i></p>
<p class=indent>
Specifies the desired clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be any one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=42%><b>CLIP_CHARACTER_PRECIS</b></td>
<td width=58%><b>CLIP_MASK</b></td>
</tr>
<tr valign=top>
<td width=42%><b>CLIP_DEFAULT_PRECIS</b></td>
<td width=58%><b>CLIP_STROKE_PRECIS</b></td>
</tr>
<tr valign=top>
<td width=42%><b>CLIP_ENCAPSULATE</b></td>
<td width=58%><b>CLIP_TT_ALWAYS</b></td>
</tr>
<tr valign=top>
<td width=42%><b>CLIP_LH_ANGLES</b></td>
<td width=58%></td>
</tr>
</table><br>
<p class=tl>
To use an embedded read-only font, an application must specify <b>CLIP_ENCAPSULATE</b>.</P><p class=tl>
To achieve consistent rotation of device, TrueType, and vector fonts, an application can use the OR operator to combine the <b>CLIP_LH_ANGLES</b> value with any of the other <i>nClipPrecision</i> values. If the <b>CLIP_LH_ANGLES</b> bit is set, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed. (For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter.) If <b>CLIP_LH_ANGLES</b> is not set, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</P><p class=dt>
<i>nQuality</i></p>
<p class=indent>
Specifies the font’s output quality, which defines how carefully the GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values:
<ul type=disc>
<li>
<b>DEFAULT_QUALITY</b>&nbsp;&nbsp;&nbsp;Appearance of the font does not matter.<br><br></li>
<li>
<b>DRAFT_QUALITY</b>&nbsp;&nbsp;&nbsp;Appearance of the font is less important than when <b>PROOF_QUALITY</b> is used. For GDI raster fonts, scaling is enabled. Bold, italic, underline, and strikeout fonts are synthesized if necessary.<br><br></li>
<li>
<b>PROOF_QUALITY</b>&nbsp;&nbsp;&nbsp;Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Bold, italic, underline, and strikeout fonts are synthesized if necessary.</li>
</ul>
<p class=dt>
<i>nPitchAndFamily</i></p>
<p class=indent>
Specifies the pitch and family of the font. The two low-order bits specify the pitch of the font and can be any one of the following values:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>DEFAULT_PITCH</b></td>
<td width=33%><b>VARIABLE_PITCH</b></td>
<td width=34%><b>FIXED_PITCH</b></td>
</tr>
</table><br>
<p class=tl>
Applications can add <b>TMPF_TRUETYPE</b> to the <i>nPitchAndFamily</i> parameter to choose a TrueType font. The four high-order bits of the parameter specify the font family and can be any one of the following values:</P><ul type=disc>
<li>
<b>FF_DECORATIVE</b>&nbsp;&nbsp;&nbsp;Novelty fonts: Old English, for example.<br><br></li>
<li>
<b>FF_DONTCARE</b>&nbsp;&nbsp;&nbsp;Don’t care or don’t know.<br><br></li>
<li>
<b>FF_MODERN</b>&nbsp;&nbsp;&nbsp;Fonts with constant stroke width (fixed-pitch), with or without serifs. Fixed-pitch fonts are usually modern faces. Pica, Elite, and Courier New are examples.<br><br></li>
<li>
<b>FF_ROMAN</b>&nbsp;&nbsp;&nbsp;Fonts with variable stroke width (proportionally spaced) and with serifs. Times New Roman and Century Schoolbook are examples.<br><br></li>
<li>
<b>FF_SCRIPT</b>&nbsp;&nbsp;&nbsp;Fonts designed to look like handwriting. Script and Cursive are examples.<br><br></li>
<li>
<b>FF_SWISS</b>&nbsp;&nbsp;&nbsp;Fonts with variable stroke width (proportionally spaced) and without serifs. MS Sans Serif is an example.<p class=tl>
An application can specify a value for <i>nPitchAndFamily</i> by using the Boolean OR operator to join a pitch constant with a family constant.</P><p class=tl>
Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface desired is not available.</P></li>
</ul>
<p class=dt>
<i>lpszFacename</i></p>
<p class=indent>
A <b>CString</b> or pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 30 characters. The Windows <b>EnumFontFamilies</b> function can be used to enumerate all currently available fonts. If <i>lpszFacename</i> is <b>NULL</b>, the GDI uses a device-independent typeface.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Initializes a <b>CFont</b> object with the specified characteristics. The font can subsequently be selected as the font for any device context. </p>
<p>
The <b>CreateFont</b> function does not create a new Windows GDI font. It merely selects the closest match from the fonts available in the GDI’s pool of physical fonts. </p>
<p>
Applications can use the default settings for most of these parameters when creating a logical font. The parameters that should always be given specific values are <i>nHeight</i> and <i>lpszFacename</i>. If <i>nHeight</i> and <i>lpszFacename</i> are not set by the application, the logical font that is created is device-dependent.</p>
<p>
When you finish with the <b>CFont</b> object created by the <b>CreateFont</b> function, first select the font out of the device context, then delete the <b>CFont</b> object.</p>
<p>
<a href="_mfc_cfont.htm">CFont Overview</a>  |&nbsp; <a href="_mfc_cfont_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cfont.3a3a.createfontindirect.htm">CFont::CreateFontIndirect</a>, <a href="_mfc_cfont.3a3a.createpointfont.htm">CFont::CreatePointFont</a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_WIN32_CreateFont">
</object><a href=JavaScript:alink_1.Click()>::CreateFont</a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_WIN32_EnumFontFamilies">
</object><a href=JavaScript:alink_2.Click()>::EnumFontFamilies</a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_WIN32_EnumFonts">
</object><a href=JavaScript:alink_3.Click()>::EnumFonts</a></p>
</font></BODY>
</HTML>

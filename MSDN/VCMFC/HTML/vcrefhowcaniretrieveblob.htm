<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Can I Retrieve a BLOB?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefhowcaniretrieveblob"></a>How Can I Retrieve a BLOB?</h1>
<p>
You can retrieve a binary large object (BLOB) in various ways. You can use <b>DBTYPE_BYTES</b> to retrieve the BLOB as a sequence of bytes, or you can use an interface like <b>ISequentialStream</b>. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="oledbblobs_and_ole_objects">
</object><a href=JavaScript:alink_1.Click()>BLOBS and OLE Objects</a> in the <i>OLE DB Programmer’s Reference</i>.</p>
<p>
The following code shows how to retrieve a BLOB using <b>ISequentialStream</b>. The macro <b>BLOB_ENTRY</b> allows you to specify the interface and the flags used for the interface. After opening the table, the code calls <b>Read</b> repeatedly on <b>ISequentialStream</b> to read bytes from the BLOB. The code calls <b>Release</b> to dispose of the interface pointer before calling <b>MoveNext</b> to obtain the next record.</p>
<pre><code>class CCategories
{
public:
   ISequentialStream*   pPicture;

BEGIN_COLUMN_MAP(CCategories)
   BLOB_ENTRY(4, IID_ISequentialStream, STGM_READ, pPicture)
END_COLUMN_MAP()
};

CTable&lt;CAccessor&lt;CCategories&gt; &gt; categories;
ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cb;
BYTE            myBuffer[65536];

categories.Open(session, "Categories");
while (categories.MoveNext() == S_OK)
{
   do
   {
      categories.pPicture-&gt;Read(myBuffer, 65536, &amp;cb);
      // Do something with the buffer
   } while (cb &gt; 0);
   categories.pPicture-&gt;Release();
}</code></pre>
</font></BODY>
</HTML>

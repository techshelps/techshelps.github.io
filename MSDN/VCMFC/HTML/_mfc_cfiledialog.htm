<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CFileDialog</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cfiledialog"></a><sup></sup>CFileDialog</h1>
<p>
<img src="cfiledlg.gif" border=0></p>
<p>
The <b>CFileDialog</b> class encapsulates the Windows common file dialog box. Common file dialog boxes provide an easy way to implement File Open and File Save As dialog boxes (as well as other file-selection dialog boxes) in a manner consistent with Windows standards.</p>
<p>
You can use <b>CFileDialog</b> “as is” with the constructor provided, or you can derive your own dialog class from <b>CFileDialog</b> and write a constructor to suit your needs. In either case, these dialog boxes will behave like standard Microsoft Foundation class dialog boxes because they are derived from the <b>CCommonDialog</b> class.</p>
<p>
To use a <b>CFileDialog</b> object, first create the object using the <b>CFileDialog</b> constructor. After the dialog box has been constructed, you can set or modify any values in the <b>m_ofn</b> structure to initialize the values or states of the dialog box’s controls. The <b>m_ofn</b> structure is of type <b>OPENFILENAME</b>. For more information, see the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_OPENFILENAME_str">
</object><a href=JavaScript:alink_1.Click()>OPENFILENAME</a> structure in the Win32 SDK documentation. </p>
<p>
After initializing the dialog box’s controls, call the <b>DoModal</b> member function to display the dialog box and allow the user to enter the path and file. <b>DoModal</b> returns whether the user selected the OK (<b>IDOK</b>) or the Cancel (<b>IDCANCEL</b>) button. </p>
<p>
If <b>DoModal</b> returns <b>IDOK</b>, you can use one of <b>CFileDialog</b>’s public member functions to retrieve the information input by the user.</p>
<p>
<b>CFileDialog</b> includes several protected members that enable you to do custom handling of share violations, filename validation, and list-box change notification. These protected members are callback functions that most applications do not need to use, since default handling is done automatically. Message-map entries for these functions are not necessary because they are standard virtual functions.</p>
<p>
You can use the Windows <b>CommDlgExtendedError</b> function to determine whether an error occurred during initialization of the dialog box and to learn more about the error.</p>
<p>
The destruction of <b>CFileDialog</b> objects is handled automatically. It is not necessary to call <b>CDialog::EndDialog</b>.</p>
<p>
To allow the user to select multiple files, set the <b>OFN_ALLOWMULTISELECT</b> flag before calling <b>DoModal</b>. You need to supply your own filename buffer to accommodate the returned list of multiple filenames. Do this by replacing <b>m_ofn.lpstrFile</b> with a pointer to a buffer you have allocated, after constructing the <b>CFileDialog</b>, but before calling <b>DoModal</b>. Additionally, you must set <b>m_ofn.nMaxFile</b> with the number of characters in the buffer pointed to by <b>m_ofn.lpstrFile</b>.</p>
<p>
<b>CFileDialog</b> relies on the COMMDLG.DLL file that ships with Windows versions 3.1 and later. </p>
<p>
If you derive a new class from <b>CFileDialog</b>, you can use a message map to handle any messages. To extend the default message handling, derive a class from <b>CWnd</b>, add a message map to the new class, and provide member functions for the new messages. You do not need to provide a hook function to customize the dialog box.</p>
<p>
To customize the dialog box, derive a class from <b>CFileDialog</b>, provide a custom dialog template, and add a message map to process the notification messages from the extended controls. Any unprocessed messages should be passed to the base class.</p>
<p>
Customizing the hook function is not required.</p>
<p>
For more information on using <b>CFileDialog</b>, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Common_Dialog_Classes">
</object><a href=JavaScript:alink_2.Click()>Common Dialog Classes</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p>
<b>#include &lt;afxdlgs.h&gt;</b></p>
<p>
<a href="_mfc_cfiledialog_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_ccommondialog.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObList::SetAt</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_coblist.3a3a.setat"></a><sup></sup>CObList::SetAt  </h1>
<p>
<b>void</b> <b>SetAt(</b> <b>POSITION</b> <i>pos</i><b>,</b> <b>CObject*</b> <i>newElement</i> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pos</i></p>
<p class=indent>
The <b>POSITION</b> of the element to be set.</p>
<p class=dt>
<i>newElement</i></p>
<p class=indent>
The <b>CObject</b> pointer to be written to the list.</p>
<p class=label>
<b>Remarks</b></p>
<p>
A variable of type <b>POSITION</b> is a key for the list. It is not the same as an index, and you cannot operate on a <b>POSITION</b> value yourself. <b>SetAt</b> writes the <b>CObject</b> pointer to the specified position in the list. </p>
<p>
You must ensure that your <b>POSITION</b> value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</p>
<p class=label>
<b>Example</b></p>
<pre><code>   CObList list;
   CObject* pa;
   POSITION pos;
   
   list.AddHead( new CAge( 21 ) );
   list.AddHead( new CAge( 40 ) ); // List now contains (40, 21).
   if( ( pos = list.GetTailPosition()) != NULL )
   {
    &nbsp;&nbsp; pa = list.GetAt( pos ); // Save the old pointer for 
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //deletion.
    &nbsp;&nbsp; list.SetAt( pos, new CAge( 65 ) );&nbsp; // Replace the tail 
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //element.
    &nbsp;&nbsp; delete pa;&nbsp; // Deletion avoids memory leak.
   }
#ifdef _DEBUG
   afxDump.SetDepth( 1 );
   afxDump &lt;&lt; "SetAt example: " &lt;&lt; &amp;list &lt;&lt; "\n";
#endif
</code></pre>
<p>
The results from this program are as follows:</p>
<pre><code>SetAt example: A CObList with 2 elements
 &nbsp;&nbsp; a CAge at $4D98 40
 &nbsp;&nbsp; a CAge at $4DB8 65
</code></pre>
<p>
<a href="_mfc_coblist.htm">CObList Overview</a>  |&nbsp; <a href="_mfc_coblist_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_coblist.3a3a.find.htm">CObList::Find</a>, <a href="_mfc_coblist.3a3a.getat.htm">CObList::GetAt</a>, <a href="_mfc_coblist.3a3a.getnext.htm">CObList::GetNext</a>, <a href="_mfc_coblist.3a3a.getprev.htm">CObList::GetPrev</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMemFile::Attach</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cmemfile.3a3a.attach"></a>CMemFile::Attach</h1>
<p>
<b>void Attach( BYTE* </b><i>lpBuffer</i><b>, UINT </b><i>nBufferSize</i><b>, UINT </b><i>nGrowBytes</i><b> = 0 );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>lpBuffer</i></p>
<p class=indent>
Pointer to the buffer to be attached to <b>CMemFile</b>.</p>
<p class=dt>
<i>nBufferSize</i></p>
<p class=indent>
An integer that specifies the size of the buffer in bytes. </p>
<p class=dt>
<i>nGrowBytes</i></p>
<p class=indent>
The memory allocation increment in bytes.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this function to attach a block of memory to <b>CMemFile</b>. This causes <b>CMemFile</b> to use the block of memory as the memory file.</p>
<p>
If <i>nGrowBytes</i> is 0, <b>CMemFile</b> will set the file length to <i>nBufferSize</i>. This means that the data in the memory block before it was attached to <b>CMemFile</b> will be used as the file. Memory files created in this manner cannot be grown.</p>
<p>
Since the file cannot be grown, be careful not to cause <b>CMemFile</b> to attempt to grow the file. For example, don’t call the <b>CMemFile</b> overrides of <a href="_mfc_cfile.3a3a.write.htm">CFile:Write</a> to write past the end or don’t call <a href="_mfc_cfile.3a3a.setlength.htm">CFile:SetLength</a> with a length longer than <i>nBufferSize</i>.</p>
<p>
If <i>nGrowBytes</i> is greater than 0, <b>CMemFile</b> will ignore the contents of the memory block you've attached. You'll have to write the contents of the memory file from scratch using the <b>CMemFile</b> override of <b>CFile::Write</b>. If you attempt to write past the end of the file or grow the file by calling the <b>CMemFile</b> override of <b>CFile::SetLength</b>, <b>CMemFile</b> will grow the memory allocation in increments of <i>nGrowBytes</i>. Growing the memory allocation will fail if the memory block you pass to <b>Attach</b> wasn't allocated with a method compatible with <a href="_mfc_cmemfile.3a3a.alloc.htm">Alloc</a>. To be compatible with the default implementation of <b>Alloc</b>, you must allocate the memory with the run-time library function <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_malloc">
</object><a href=JavaScript:alink_1.Click()>malloc</a> or <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_calloc">
</object><a href=JavaScript:alink_2.Click()>calloc</a>.</p>
<p>
<a href="_mfc_cmemfile.htm">CMemFile Overview</a>  |&nbsp; <a href="_mfc_cmemfile_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cmemfile.3a3a.cmemfile.htm">CMemFile::CMemFile</a>, <a href="_mfc_cmemfile.3a3a.detach.htm">CMemFile::Detach</a>, <a href="_mfc_cmemfile.3a3a.alloc.htm">CMemFile::Alloc</a>, <a href="_mfc_cfile.3a3a.write.htm">CFile::Write</a>, <a href="_mfc_cfile.3a3a.setlength.htm">CFile::SetLength</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CString::Replace</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cstring.3a3a.replace"></a>CString::Replace</h1>
<p>
<b>int Replace( TCHAR </b><i>chOld</i><b>, TCHAR </b><i>chNew</i><b> );</b></p>
<p>
<b>int Replace( LPCTSTR </b><i>lpszOld</i><b>, LPCTSTR </b><i>lpszNew</i><b> );</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
The number of replaced instances of the character. Zero if the string isn't changed.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>chOld</i></p>
<p class=indent>
The character to be replaced by <i>chNew</i>.</p>
<p class=dt>
<i>chNew</i></p>
<p class=indent>
The character replacing <i>chOld</i>.</p>
<p class=dt>
<i>lpszOld</i></p>
<p class=indent>
A pointer to a string containing the character to be replaced by <i>lpszNew</i>.</p>
<p class=dt>
<i>lpszNew</i></p>
<p class=indent>
A pointer to a string containing the character replacing <i>lpszOld</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to replace a character with another. The first prototype of the function replaces instances of <i>chOld</i> with <i>chNew</i> in-place in the string. The second prototype of the function replaces instances of the substring <i>lpszOld</i> with instances of the string <i>lpszNew</i>.&nbsp; </p>
<p>
The string may grow or shrink as a result of the replacement; that is, <i>lpszNew</i> and <i>lpszOld</i> do not have to be equal in length. Both versions perform case-sensitive matches.</p>
<p class=label>
<b>Example</b></p>
<pre><code>//First example, with old and new equal in length.

CString strZap("C--");
int n = strZap.Replace('-', '+');
ASSERT(n == 2);
ASSERT(strZap == "C++");

//Second example, old and new are of different lengths.

CString strBang("Everybody likes ice hockey");
n = strBang.Replace("hockey", "golf");
ASSERT(n == 1);
n = strBang.Replace("likes", "plays");
ASSERT(n == 1);
n = strBang.Replace("ice", NULL);
ASSERT(n == 1);
ASSERT(strBang == "Everybody plays&nbsp; golf");

// note that you now have an extra space in your
// sentence. To remove the extra space, include it 
// in the string to be replaced, i.e.,"ice ".
</code></pre>
<p>
<a href="_mfc_cstring.htm">CString Overview</a>  |&nbsp; <a href="_mfc_cstring_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cstring.3a3a.remove.htm">CString::Remove</a></p>
</font></BODY>
</HTML>

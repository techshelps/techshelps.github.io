<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObList</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_coblist"></a><sup></sup>CObList</h1>
<p>
<img src="coblist.gif" border=0></p>
<p>
The <b>CObList</b> class supports ordered lists of nonunique <b>CObject</b> pointers accessible sequentially or by pointer value. <b>CObList</b> lists behave like doubly-linked lists. </p>
<p>
A variable of type <b>POSITION</b> is a key for the list. You can use a <b>POSITION</b> variable both as an iterator to traverse a list sequentially and as a bookmark to hold a place. A position is not the same as an index, however. </p>
<p>
Element insertion is very fast at the list head, at the tail, and at a known <b>POSITION</b>. A sequential search is necessary to look up an element by value or index. This search can be slow if the list is long.</p>
<p>
<b>CObList</b> incorporates the <b>IMPLEMENT_SERIAL</b> macro to support serialization and dumping of its elements. If a list of <b>CObject</b> pointers is stored to an archive, either with an overloaded insertion operator or with the <b>Serialize</b> member function, each <b>CObject</b> element is serialized in turn.</p>
<p>
If you need a dump of individual <b>CObject</b> elements in the list, you must set the depth of the dump context to 1 or greater. </p>
<p>
When a <b>CObList</b> object is deleted, or when its elements are removed, only the <b>CObject</b> pointers are removed, not the objects they reference.</p>
<p>
You can derive your own classes from <b>CObList</b>. Your new list class, designed to hold pointers to objects derived from <b>CObject</b>, adds new data members and new member functions. Note that the resulting list is not strictly type safe, because it allows insertion of any <b>CObject</b> pointer.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must use the <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a> macro in the implementation of your derived class if you intend to serialize the list. </p>
<p>
For more information on using <b>CObList</b>, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Collections">
</object><a href=JavaScript:alink_1.Click()>Collections</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxcoll.h&gt;</b></p>
<p>
<a href="_mfc_coblist_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cstringlist.htm">CStringList</a>, <a href="_mfc_cptrlist.htm">CPtrList</a></p>
</font></BODY>
</HTML>

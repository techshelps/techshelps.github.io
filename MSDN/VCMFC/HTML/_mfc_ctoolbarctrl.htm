<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CToolBarCtrl</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ctoolbarctrl"></a>CToolBarCtrl</h1>
<p>
<img src="ctoolbrc.gif" border=0></p>
<p>
The <b>CToolBarCtrl</b> class provides the functionality of the Windows toolbar common control. This control (and therefore the <b>CToolBarCtrl</b> class) is available only to programs running under Windows 95 and Windows NT version 3.51 and later.</p>
<p>
A Windows toolbar common control is a rectangular child window that contains one or more buttons. These buttons can display a bitmap image, a string, or both. When the user chooses a button, it sends a command message to the toolbar’s owner window. Typically, the buttons in a toolbar correspond to items in the application’s menu; they provide a more direct way for the user to access an application’s commands.</p>
<p>
<b>CToolBarCtrl</b> objects contain several important internal data structures: a list of button image bitmaps or an image list, a list of button label stings, and a list of <b>TBBUTTON</b> structures which associate an image and/or string with the position, style, state, and command ID of the button. Each of the elements of these data structures is referred to by a zero-based index. Before you can use a <b>CToolBarCtrl</b> object, you must set up these data structures. The list of strings can only be used for button labels; you cannot retrieve strings from the toolbar.</p>
<p>
To use a <b>CToolBarCtrl</b> object, you will typically follow these steps:
<ol>
<li>
Construct the <b>CToolBarCtrl</b> object.<br><br></li>
<li>
Call <a href="_mfc_ctoolbarctrl.3a3a.create.htm">Create</a> to create the Windows toolbar common control and attach it to the <b>CToolBarCtrl</b> object. Indicate the style of toolbar by using styles, such as <b>TBSTYLE_TRANSPARENT</b> for a transparent toolbar or <b>TBSTYLE_DROPDOWN</b> for a toolbar that supports drop-down style buttons.<br><br></li>
<li>
Identify how you want the buttons on the toolbar displayed:<ul type=disc>
<li>
To use bitmap images for buttons, add the button bitmaps to the toolbar by calling <a href="_mfc_ctoolbarctrl.3a3a.addbitmap.htm">AddBitmap</a>. <br><br></li>
<li>
To use images displayed from an image list for buttons, specify the image list by calling <a href="_mfc_ctoolbarctrl.3a3a.setimagelist.htm">SetImageList</a>, <a href="_mfc_ctoolbarctrl.3a3a.sethotimagelist.htm">SetHotImageList</a>, or <a href="_mfc_ctoolbarctrl.3a3a.setdisabledimagelist.htm">SetDisabledImageList</a>.<br><br></li>
<li>
To use string labels for buttons, add the strings to the toolbar by calling <a href="_mfc_ctoolbarctrl.3a3a.addstring.htm">AddString</a> and/or <a href="_mfc_ctoolbarctrl.3a3a.addstrings.htm">AddStrings</a>.</li>
</ul>
</li>
<li>
Add button structures to the toolbar by calling <a href="_mfc_ctoolbarctrl.3a3a.addbuttons.htm">AddButtons</a>.<br><br></li>
<li>
If you want tool tips for a toolbar button in an owner window that is not a <b>CFrameWnd</b>, you need to handle the <b>TTN_NEEDTEXT</b> messages in the toolbar’s owner window as described in <a href="_mfc_ctoolbarctrl.3a_.handling_tool_tip_notifications.htm">CToolBarCtrl: Handling Tool Tip Notifications</a>. If the parent window of the toolbar is derived from <b>CFrameWnd</b>, tool tips are displayed without any extra effort from you because <b>CFrameWnd</b> provides a default handler.<br><br></li>
<li>
If you want your user to be able to customize the toolbar, handle customization notification messages in the owner window as described in <a href="_mfc_ctoolbarctrl.3a_.handling_customization_notifications.htm">CToolBarCtrl: Handling Customization Notifications</a>. </li>
</ol>
<p>
You can use <a href="_mfc_ctoolbarctrl.3a3a.savestate.htm">SaveState</a> to save the current state of a toolbar control in the registry and <a href="_mfc_ctoolbarctrl.3a3a.restorestate.htm">RestoreState</a> to restore the state based on information previously stored in the registry. In addition to saving the toolbar state between uses of the application, applications typically store the state before the user begins customizing the toolbar in case the user later wants to restore the toolbar to its original state. </p>
<p class=label>
<b>Support for Internet Explorer Version 4.0 and Later</b></p>
<p>
To support functionality introduced in Internet Explorer, version 4.0 and later, MFC provides image list support and transparent and flat styles for toolbar controls. </p>
<p>
A transparent toolbar allows the client under the toolbar to show through. To create a transparent toolbar, use both <b>TBSTYLE_FLAT</b> and <b>TBSTYLE_TRANSPARENT</b> styles. Transparent toolbars feature hot tracking; that is, when the mouse pointer moves over a hot button on the toolbar, the button's appearance changes. Toolbars created with just the <b>TBSTYLE_FLAT</b> style will contain buttons that are not transparent.</p>
<p>
Image list support allows a control greater flexibility for default behavior, hot images, and disabled images. Use <a href="_mfc_ctoolbarctrl.3a3a.getimagelist.htm">GetImageList</a>, <a href="_mfc_ctoolbarctrl.3a3a.gethotimagelist.htm">GetHotImageList</a>, and <a href="_mfc_ctoolbarctrl.3a3a.getdisabledimagelist.htm">GetDisabledImageList</a>  with the transparent toolbar to manipulate the image according to its state: </p>
<p>
For more information on using <b>CToolBarCtrl</b>, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Control_Topics">
</object><a href=JavaScript:alink_1.Click()>Control Topics</a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Using_CToolBarCtrl">
</object><a href=JavaScript:alink_2.Click()>Using CToolBarCtrl</a> in the <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxcmn.h&gt;</b></p>
<p>
<a href="_mfc_ctoolbarctrl_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cwnd.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Samples</b>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_CMNCTRL1">
</object><a href=JavaScript:alink_3.Click()>MFC Sample CMNCTRL1</a>  |&nbsp; <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_MFC_MFCIE">
</object><a href=JavaScript:alink_4.Click()>MFC Sample MFCIE</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_ctoolbar.htm">CToolBar</a></p>
</font></BODY>
</HTML>

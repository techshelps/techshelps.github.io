<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHttpServer</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_chttpserver"></a>CHttpServer</h1>
<p>
<b>CHttpServer</b> does not have a base class.</p>
<p>
The class <b>CHttpServer</b>, with <a href="_mfc_chttpservercontext.htm">CHttpServerContext</a>, provides a means to extend the functionality of an ISAPI-compliant HTTP server. The class <b>CHttpServer</b> wraps the Internet Server API (ISAPI) functionality and can process various types of client requests, including extension DLLs. <b>CHttpServer</b> cannot process client requests from Common Gateway Interface (CGI) executables. These extension DLLs are sometimes called Internet Server Applications; however, they are DLLs, rather than EXEs. For brevity’s sake, we refer to an extension DLL as an ISA.</p>
<p>
For more information on the difference between CGI and ISA, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Internet_Server_API_.28.ISAPI.29_.Extensions">
</object><a href=JavaScript:alink_1.Click()>Internet Server API (ISAPI) Extensions</a> in <i>Visual C++ Programmer’s Guide</i>. </p>
<p>
When an ISAPI HTTP server receives a request from a client browser, a <b>CHttpServer</b> object is created and initialized, and a <b>CHttpServerContext</b> object is created. Only one instance of <b>CHttpServer</b> may exist for each module; however, one <b>CHttpServerContext</b> object is created for each call to the server. A <b>CHttpServer</b> object uses multiple <b>CHttpServerContext</b> objects to run in separate threads. This design allows simultaneous, multiple calls to the <b>CHttpServer</b> object by different client connections. The <b>CHttpServer</b> object communicates with the client or server itself via the <b>CHttpServerContext</b> object.</p>
<p>
When the server loads the ISA, it calls the ISA at the entry point <a href="_mfc_chttpserver.3a3a.getextensionversion.htm">GetExtensionVersion</a> to get the version number of the specification on which the extension is based. For every client request, the <a href="_mfc_chttpserver.3a3a.httpextensionproc.htm">HttpExtensionProc</a> member function is called. The default (recommended) implementation of <b>HttpExtensionProc</b> will read client data and decide what action is to be taken. You can override this member function to customize the implementation. </p>
<p>
Other <b>CHttpServer</b> member functions process the client request, format the responses, and correspond with the client.</p>
<p>
When a client command is received by a <b>CHttpServer</b> object, the parse maps associate the command to its class member function and parameters. Only one parse map is created per <b>CHttpServer</b> object.</p>
<p>
See <a href="_mfc_internet_server_api_.28.isapi.29_.parse_maps.htm">Internet Server API (ISAPI) Parse Maps</a> for general information on using the parse map macros. See <a href="_mfc_begin_parse_map.htm">BEGIN_PARSE_MAP</a> and <a href="_mfc_end_parse_map.htm">END_PARSE_MAP</a> for information on how to create a parse map to handle client commands. </p>
<p>
See the following macro descriptions for information about how the client commands are mapped to member functions and their arguments:
<ul type=disc>
<li>
<a href="_mfc_on_parse_command.htm">ON_PARSE_COMMAND</a><br><br></li>
<li>
<a href="_mfc_on_parse_command_params.htm">ON_PARSE_COMMAND_PARAMS</a><br><br></li>
<li>
<a href="_mfc_default_parse_command.htm">DEFAULT_PARSE_COMMAND</a></li>
</ul>
<p>
For more information on using parse maps to handle client commands, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_ISAPI_Extensions.3a_.Parse_Maps">
</object><a href=JavaScript:alink_2.Click()>ISAPI Extensions: Parse Maps</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
For information on debugging internet extension DLLs, see <a href="_mfcnotes_tn063.htm">Technical Note 63</a>.</p>
<p>
<b>#include &lt;afxisapi.h&gt;</b></p>
<p>
<a href="_mfc_chttpserver_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Samples</b>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_COUNTER">
</object><a href=JavaScript:alink_3.Click()>MFC Sample COUNTER</a>  |&nbsp; <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_WWWQUOTE">
</object><a href=JavaScript:alink_4.Click()>MFC Sample WWWQUOTE</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_chtmlstream.htm">CHtmlStream</a></p>
</font></BODY>
</HTML>

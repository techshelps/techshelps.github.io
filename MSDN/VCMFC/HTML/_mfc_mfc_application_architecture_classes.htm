<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFC Application Architecture Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_mfc_application_architecture_classes"></a>MFC Application Architecture Classes</h1>
<p>
Classes in this category contribute to the architecture of a framework application. They supply functionality common to most applications. You fill in the framework to add application-specific functionality. Typically, you do so by deriving new classes from the architecture classes, then adding new members and/or overriding existing member functions.</p>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="appwiz">
</object><a href=JavaScript:alink_1.Click()>AppWizard</a> generates several types of applications, all of which use the application framework in differing ways. SDI (single document interface) and MDI (multiple document interface) applications make full use of a part of the framework called document/view architecture. Other types of applications, such as dialog-based applications, form-based applications, and DLLs, use only some of document/view architecture features.</p>
<p>
Document/view applications contain one or more sets of documents, views, and frame windows. A document-template object associates the classes for each document/view/frame set.</p>
<p>
Although you do not have to use document/view architecture in your MFC application, there are a number of advantages to doing so. MFC’s OLE container and server support is based on document/view architecture, as is support for printing and print preview.</p>
<p>
All MFC applications have at least two objects: an application object derived from <a href="_mfc_cwinapp.htm">CWinApp</a>, and some sort of main window object, derived (often indirectly) from <a href="_mfc_cwnd.htm">CWnd</a>. (Most often, the main window is derived from <a href="_mfc_cframewnd.htm">CFrameWnd</a>, <a href="_mfc_cmdiframewnd.htm">CMDIFrameWnd</a>, or <a href="_mfc_cdialog.htm">CDialog</a>, all of which are derived from <b>CWnd</b>.)</p>
<p>
Applications that use document/view architecture contain additional objects. The principal objects are as follows:
<ul type=disc>
<li>
An application object derived from class <a href="_mfc_cwinapp.htm">CWinApp</a>, as mentioned before.<br><br></li>
<li>
One or more document class objects derived from class <a href="_mfc_cdocument.htm">CDocument</a>. Document class objects are responsible for the internal representation of the data manipulated in the view. They may be associated with a data file.<br><br></li>
<li>
One or more view objects derived from class <a href="_mfc_cview.htm">CView</a>. Each view is a window that is attached to a document and associated with a frame window. Views display and manipulate the data contained in a document class object.</li>
</ul>
<p>
Document/view applications also contain frame windows (derived from <a href="_mfc_cframewnd.htm">CFrameWnd</a>) and document templates (derived from <a href="_mfc_cdoctemplate.htm">CDocTemplate</a>).</p>
</font></BODY>
</HTML>

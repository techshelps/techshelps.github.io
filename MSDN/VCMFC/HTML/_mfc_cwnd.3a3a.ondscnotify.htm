<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWnd::OnDSCNotify</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cwnd.3a3a.ondscnotify"></a>CWnd::OnDSCNotify</h1>
<p>
<b>afx_msg</b> <b>BOOL OnDSCNotify( DSCSTATE</b> <i>nState</i><b>,</b> <b>DSCREASON</b> <i>nReason</i><b>,</b> <b>BOOL</b> <i>pBool</i> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Returns <b>TRUE</b> if the operation represented by <i>nReason</i> and <i>nState</i> was handled. Otherwise, returns <b>FALSE</b>.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nState</i></p>
<p class=indent>
One of the named constants found in the <b>DSCSTATE</b> enumerator, which are listed under Remarks.</p>
<p class=dt>
<i>nReason</i></p>
<p class=indent>
One of the named constants found in the <b>DSCREASON</b> enumerator, which are listed under Remarks.</p>
<p class=dt>
<i>pBool</i></p>
<p class=indent>
A Boolean answer indicating whether the operation represented by <i>nState</i> and <i>nReason</i> should continue.</p>
<p class=label>
<b>Remarks</b></p>
<p>
This sink notification is called in response to an event that a data-source control fires when a control to which the data-source control is bound modifies or attempts to modify the underlying cursor. Use it to trap reasons (<i>nReason</i>) and states (<i>nState</i>) generated by a data-source control. All combinations of states and reasons are allowed by default. Write your code to test the states and reasons that are important to your application and return <b>TRUE</b> or <b>FALSE</b> as appropriate.</p>
<p>
To use <b>OnDSCNotify</b>, declare a sink map and a handler for the sink notification in the header of the class that wishes to receive the sink notification as follows:</p>
<pre><code>class CMyDlg : public CDialog
{
   ...
   DECLARE_EVENTSINK_MAP()
   BOOL OnDSCNotify(DSCSTATE nState,
             DSCREASON nReason, BOOL* pBool);
   ...
};
</code></pre>
<p>
Then, in the implementation of your class, define the sink map and specify the function to receive the events as follows:</p>
<pre><code>BEGIN_EVENTSINK_MAP(CMyDlg, CDialog)
   ON_DSCNOTIFY(CMyDlg, IDC_RDCCTRL1, OnDSCNotify)
END_EVENTSINK_MAP()
</code></pre>
<p>
The notification callback function, your implementation of <b>OnDSCNotify</b>, will be called when the following events occur inside the data-source control:</p>
<pre><code>enum DSCREASON
{
   dscNoReason = 0,
   dscClose, dscCommit, dscDelete,
   dscEdit, dscInsert, dscModify, dscMove
};
</code></pre>
<p>
It will also be called multiple times for each of the following states:</p>
<pre><code>enum DSCSTATE
{
   dscNoState = 0,
   dscOKToDo,
   dscCancelled,
   dscSyncBefore,
   dscAboutToDo,
   dscFailedToDo,
   dscSyncAfter,
   dscDidEvent
};
</code></pre>
<p>
The multiple calls allow you to trap an event at different times. For example, since events are usually generated in response to modification of the cursor state by a control, the first thing that the data-source control will do is to fire events asking if it is okay to actually perform that action; hence the reason for the <b>dscOKToDo</b> state. If all clients that monitor the event (the data control, your application, and so on) accept the event, the data-source control will then move into the <b>dscSyncBefore</b> state, at which time all outstanding data will be flushed, if necessary. For example, if the content of an edit field has changed, the change will be committed to the cursor. Following this event, the data-source control moves into the <b>dscAboutToDo</b> and <b>dscSyncAfter</b> states and finally into the <b>dscDidEvent</b> state. These provide you with further opportunities to catch notifications from the data-source control.</p>
<p>
<a href="_mfc_cwnd.htm">CWnd Overview</a>  |&nbsp; <a href="_mfc_cwnd_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwnd.3a3a.getdsccursor.htm">CWnd::GetDSCCursor</a>, <a href="_mfc_cwnd.3a3a.binddefaultproperty.htm">CWnd::BindDefaultProperty</a>, <a href="_mfc_cwnd.3a3a.bindproperty.htm">CWnd::BindProperty</a></p>
</font></BODY>
</HTML>

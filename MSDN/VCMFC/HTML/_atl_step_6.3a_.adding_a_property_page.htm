<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 6: Adding a Property Page</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_step_6.3a_.adding_a_property_page"></a>Step 6: Adding a Property Page</h1>
<p>
Property pages are implemented as separate COM objects, which allow property pages to be shared if required. To add a property page to your control you can use the ATL Object Wizard.</p>
<p>
Start the ATL Object Wizard and select <b>Controls</b> as the category on the left. Select <b>Property Page</b> on the right, then click <b>Next</b>.</p>
<p>
You again get the dialog box allowing you to enter the name of the new object. Call the object PolyProp and enter that name in the <b>Short Name</b> edit box. </p>
<p>
<img src="cr0114s.gif" border=0></p>
<p>
Notice that the <b>Interface</b> edit box is grayed out. This is because a property page doesn't need a custom interface.</p>
<p>
Click on the <b>Strings</b> tab to set the title of the property page. The title of the property page is the string that appears in the tab for that page. Type <b>&amp;Polygon</b> as the title. The <b>Doc String</b> is a description that a property frame uses to put in a status line or tool tip. Note that the standard property frame currently doesn't use this string, but you can set it anyway. You're not going to generate a <b>Helpfile</b> at the moment, so erase the entry in that text box. Click <b>OK</b> and the property page object will be created.</p>
<p>
<img src="cr0115s.gif" border=0></p>
<p>
The following three files are created:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>File</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>PolyProp.h</td>
<td width=73%>Contains the C++ class <code>CPolyProp</code>, which implements the property page.</td>
</tr>
<tr valign=top>
<td width=27%>PolyProp.cpp</td>
<td width=73%>Includes the PolyProp.h file.</td>
</tr>
<tr valign=top>
<td width=27%>PolyProp.rgs</td>
<td width=73%>The registry script that registers the property page object.</td>
</tr>
</table><br>
<p>
The following code changes are also made:
<ul type=disc>
<li>
The new property page is added to the object entry map in Polygon.cpp.<br><br></li>
<li>
The <code>PolyProp</code> class is added to the Polygon.idl file.<br><br></li>
<li>
The new registry script file PolyProp.rgs is added to the project resource.<br><br></li>
<li>
A dialog box template is added to the project resource for the property page.<br><br></li>
<li>
The property strings you specified are added to the resource string table.</li>
</ul>
<p>
Now add the fields that you want to appear on the property page. Notice that in Polygon.rc the dialog is empty except for a label that tells you to insert your controls here. Delete that label and add one that contains the text "Sides:". Next to the label add an edit box and give it an ID of <code>IDC_SIDES</code>. </p>
<p>
<img src="cr0110s.gif" border=0></p>
<p>
Include Polygon.h at the top of the PolyProp.h file:</p>
<pre><code>#include "Polygon.h"&nbsp; // definition of IPolyCtl
</code></pre>
<p>
Now enable the <code>CPolyProp</code> class to set the number of sides in your object when the <b>Apply</b> button is pressed. Change the <code>Apply</code> function in PolyProp.h as follows. </p>
<pre><code>STDMETHOD(Apply)(void)
{
   USES_CONVERSION;
   ATLTRACE(_T("CPolyProp::Apply\n"));
   for (UINT i = 0; i &lt; m_nObjects; i++)
   {
      CComQIPtr&lt;IPolyCtl, &amp;IID_IPolyCtl&gt; pPoly(m_ppUnk[i]);
      short nSides = (short)GetDlgItemInt(IDC_SIDES);
      if FAILED(pPoly-&gt;put_Sides(nSides))
      {
         CComPtr&lt;IErrorInfo&gt; pError;
         CComBSTR         strError;
         GetErrorInfo(0, &amp;pError);
         pError-&gt;GetDescription(&amp;strError);
         MessageBox(OLE2T(strError), _T("Error"), MB_ICONEXCLAMATION);
         return E_FAIL;
      }
   }
   m_bDirty = FALSE;
   return S_OK;
}
</code></pre>
<p>
A property page could have more than one client attached to it at a time, so the <code>Apply</code> function loops around and calls <code>put_Sides</code> on each client with the value retrieved from the edit box. You are using the <a href="_atl_ccomqiptr.htm">CComQIPtr</a> class, which performs the <b>QueryInterface</b> on each object to obtain the <code>IPolyCtl</code> interface from the <b>IUnknown</b> (stored in the <code>m_ppUnk</code> array).</p>
<p>
The code now checks that setting the Sides property actually worked. If it fails, the code displays a message box displaying error details from the <b>IErrorInfo</b> interface. Typically, a container asks an object for the <b>ISupportErrorInfo</b> interface and calls <b>InterfaceSupportsErrorInfo</b> first, to determine whether the object supports setting error information. But since it's your control, you can forego that check.</p>
<p>
<a href="_atl_ccomptr.htm">CComPtr</a> helps you by automatically handling the reference counting, so you don't need to call <b>Release</b> on the interface. <b>CComBSTR</b> helps you with <b>BSTR</b> processing, so you don't have to perform the final <b>SysFreeString</b> call. You also use one of the various string conversion classes, so you can convert the <b>BSTR</b> if necessary (this is why we add the <b>USES_CONVERSION</b> macro at the start of the function).</p>
<p>
You also must set the property page's dirty flag to indicate that the <b>Apply</b> button should be enabled. This occurs when the user changes the value in the Sides edit box. Right-click the property page class (CPolyProp) in <b>ClassView</b> and then select <b>Add Windows Message Handler...</b> from the shortcut menu.&nbsp; Select IDC_SIDES from the object box and then add the EN_CHANGE message.</p>
<p>
Now add the following code in Polyprop.h to the <code>OnChangeSides</code> function (deleting any code that the wizard put there):</p>
<pre><code>LRESULT OnChangeSides(WORD wNotify, WORD wID, HWND hWnd, BOOL&amp; bHandled)
{
   SetDirty(TRUE);
   return 0;
}
</code></pre>
<p>
<code>OnChangeSides</code> will be called when a <b>WM_COMMAND</b> message is sent with the <b>EN_CHANGE</b> notification for the <code>IDC_SIDES</code> control. <code>OnChangeSides</code> then calls <code>SetDirty</code> and passes <b>TRUE</b> to indicate the property page is now dirty and the <b>Apply</b> button should be enabled.</p>
<p>
Now, add the property page to your control. The ATL Object Wizard doesn't do this for you automatically, since there could be multiple controls in your project. Open PolyCtl.h and add this line to the property map:</p>
<pre><code>   PROP_ENTRY("Sides", 1, CLSID_PolyProp)
</code></pre>
<p>
The control's property map now looks like this:</p>
<pre><code>BEGIN_PROP_MAP(CPolyCtl)
   PROP_DATA_ENTRY("_cx", m_sizeExtent.cx, VT_UI4)
   PROP_DATA_ENTRY("_cy", m_sizeExtent.cy, VT_UI4)
   PROP_ENTRY("FillColor", DISPID_FILLCOLOR, CLSID_StockColorPage)
   PROP_ENTRY("Sides", 1, CLSID_PolyProp)
   // Example entries
   // PROP_ENTRY("Property Description", dispid, clsid)
   // PROP_PAGE(CLSID_StockColorPage)
END_PROP_MAP()
</code></pre>
<p>
You could have added a <code>PROP_PAGE</code> macro with the CLSID of your property page, but if you use the <code>PROP_ENTRY</code> macro as shown, the Sides property value is also saved when the control is saved. The three parameters to the macro are the property description, the DISPID of the property, and the CLSID of the property page that has the property on it. This is useful if, for example, you load the control into Visual Basic and set the number of Sides at design time. Since the number of Sides is saved, when you reload your Visual Basic project the number of Sides will be restored.</p>
<p>
Now build that control and insert it into <b>ActiveX Control Test Container</b>. Then, in <b>Test Container</b>, on the <b>Edit</b> menu click <b>PolyCtl Class Object</b>. The property page appears; chose the Polygon tab.</p>
<p>
<img src="vc309b1.gif" border=0></p>
<p>
The <b>Apply</b> button is initially disabled. Start typing a value in the Sides edit box and the Apply button will become enabled. After you have finished entering the value, click the <b>Apply</b> button. The control display changes and the <b>Apply</b> button is again disabled. Try entering an invalid value and you should see a message box containing the error description that you set from the <code>put_Sides</code> function.</p>
<p>
Next you'll put your control on a Web page.</p>
<p>
<a href="_atl_step_5.3a_.adding_an_event.htm">Back to Step 5</a>  |&nbsp; <a href="_atl_step_7.3a_.putting_the_control_on_a_web_page.htm">On to Step 7</a> </p>
</font></BODY>
</HTML>

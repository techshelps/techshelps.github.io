<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Processing</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_exception_processing"></a>Exception Processing</h1>
<p>
When a program executes, a number of abnormal conditions and errors called "exceptions" can occur. These may include running out of memory, resource allocation errors, and failure to find files.</p>
<p>
The Microsoft Foundation Class Library uses an exception-handling scheme that is modeled closely after the one proposed by the ANSI standards committee for C++. An exception handler must be set up before calling a function that may encounter an abnormal situation. If the function encounters an abnormal condition, it throws an exception and control is passed to the exception handler.</p>
<p>
Several macros included with the Microsoft Foundation Class Library will set up exception handlers. A number of other global functions help to throw specialized exceptions and terminate programs, if necessary. These macros and global functions fall into the following categories:
<ul type=disc>
<li>
<a href="#_mfc_exception_macros">Exception macros</a>, which structure your exception handler<br><br></li>
<li>
<a href="#_mfc_exception.2d.throwing_functions">Exception-throwing functions</a>, which generate exceptions of specific types<br><br></li>
<li>
<a href="#_mfc_termination_functions">Termination functions</a>, which cause program termination</li>
</ul>
<p>
For examples and more details, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Exceptions">
</object><a href=JavaScript:alink_1.Click()>Exceptions</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b><a name="_mfc_exception_macros"></a>Exception Macros</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=32%><a href="_mfc_try.htm">TRY</a></td>
<td width=68%>Designates a block of code for exception processing.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_catch.htm">CATCH</a></td>
<td width=68%>Designates a block of code for catching an exception from the preceding <b>TRY</b> block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_catch_all.htm">CATCH_ALL</a></td>
<td width=68%>Designates a block of code for catching all exceptions from the preceding <b>TRY</b> block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_and_catch.htm">AND_CATCH</a></td>
<td width=68%>Designates a block of code for catching additional exception types from the preceding <b>TRY</b> block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_and_catch_all.htm">AND_CATCH_ALL</a></td>
<td width=68%>Designates a block of code for catching all other additional exception types thrown in a preceding <b>TRY</b> block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_end_catch.htm">END_CATCH</a></td>
<td width=68%>Ends the last <b>CATCH</b> or <b>AND_CATCH</b> code block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_end_catch_all.htm">END_CATCH_ALL</a></td>
<td width=68%>Ends the last <b>CATCH_ALL</b> code block.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_throw.htm">THROW</a></td>
<td width=68%>Throws a specified exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_throw_last.htm">THROW_LAST</a></td>
<td width=68%>Throws the currently handled exception to the next outer handler.</td>
</tr>
</table><br>
<p class=label>
<b><a name="_mfc_exception.2d.throwing_functions"></a>Exception-Throwing Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowarchiveexception.htm">AfxThrowArchiveException</a></td>
<td width=68%>Throws an archive exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowfileexception.htm">AfxThrowFileException</a></td>
<td width=68%>Throws a file exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowmemoryexception.htm">AfxThrowMemoryException</a></td>
<td width=68%>Throws a memory exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrownotsupportedexception.htm">AfxThrowNotSupportedException</a></td>
<td width=68%>Throws a not-supported exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowresourceexception.htm">AfxThrowResourceException</a></td>
<td width=68%>Throws a Windows resource-not-found exception.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowuserexception.htm">AfxThrowUserException</a></td>
<td width=68%>Throws an exception in a user-initiated program action.</td>
</tr>
</table><br>
<p>
MFC provides two exception-throwing functions specifically for OLE exceptions:</p>
<p class=label>
<b>OLE Exception Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowoledispatchexception.htm">AfxThrowOleDispatchException</a></td>
<td width=68%>Throws an exception within an OLE automation function.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowoleexception.htm">AfxThrowOleException</a></td>
<td width=68%>Throws an OLE exception.</td>
</tr>
</table><br>
<p>
To support database exceptions, the database classes provide two exception classes, <b>CDBException</b> and <b>CDaoException</b>, and global functions to support the exception types:</p>
<p class=label>
<b>DAO Exception Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowdaoexception.htm">AfxThrowDAOException</a></td>
<td width=68%>Throws a <a href="_mfc_cdaoexception.htm">CDaoException</a> from your own code.</td>
</tr>
<tr valign=top>
<td width=32%><a href="_mfc_afxthrowdbexception.htm">AfxThrowDBException</a></td>
<td width=68%>Throws a <a href="_mfc_cdbexception.htm">CDBException</a> from your own code.</td>
</tr>
</table><br>
<p>
MFC provides the following termination function:</p>
<p class=label>
<b><a name="_mfc_termination_functions"></a>Termination Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=32%><a href="_mfc_afxabort.htm">AfxAbort</a></td>
<td width=68%>Called to terminate an application when a fatal error occurs.</td>
</tr>
</table><br>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cexception.htm">CException</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TN029: Splitter Windows</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfcnotes_tn029"></a><sup></sup>TN029: Splitter Windows</h1>
<p>
This note describes the MFC <b>CSplitterWnd</b> class, which is used to provide window splits and to manage the resizing of other Pane windows.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;please be sure to read <a href="_mfcnotes_tn020.htm">Technical Note 20</a> regarding use of IDs and valid ID ranges.</p>
<p class=label>
<b>Splitter Styles</b></p>
<p>
A <b>CSplitterWnd</b> supports two different styles of splitting windows.</p>
<p>
In “static splitters,” the panes are created when the splitter window is created, and the order and number of panes never change. Splitter bars are used to resize the different panes, and the different panes are usually of different view classes. The Visual C++ graphics editor and the Windows File Manager are examples of programs that use this splitter style. Splitter boxes are not used by this style of splitter.</p>
<p>
In “Dynamic splitters,” additional panes are created and destroyed as the user splits and un-splits new views. This splitter starts out with a single view, and splitter boxes are provided to initiate splitting. If the view is split in one direction, an additional view object is dynamically created to represent the new pane. If the view is split in two directions (possible with the keyboard interface), then three new views are created to represent the three new panes. When the split is active, the splitter box is drawn as a splitter bar between the panes. Additional view objects are destroyed when the user removes a split, but the original view (row 0, column 0) remains until the splitter window itself is destroyed. Microsoft Excel or Microsoft Word are examples of the dynamic splitter style.</p>
<p>
When creating either kind of splitter window, you must specify the maximum number of rows and columns that the splitter will manage. For a static splitter, panes must be created to fill all the rows and columns. For a dynamic splitter, the first pane is automatically created when the <b>CSplitterWnd</b> is created.</p>
<p>
The maximum number of panes you can specify for static splitters is 16 rows by 16 columns. The recommended configurations are:
<ul type=disc>
<li>
1 row x 2 columns : usually with dissimilar panes<br><br></li>
<li>
2 rows x 1 column : usually with dissimilar panes<br><br></li>
<li>
2 rows x 2 columns : usually with similar panes</li>
</ul>
<p>
The maximum number of panes you can specify for dynamic splitters is 2 rows by 2 columns. The recommended configurations are:
<ul type=disc>
<li>
1 row x 2 columns : for columnar data<br><br></li>
<li>
2 rows x 1 column : for textual or other data<br><br></li>
<li>
2 rows x 2 columns : for grid or table oriented data</li>
</ul>
<p class=label>
<b>Splitter Examples</b></p>
<p>
Many of the MFC sample programs use splitter windows directly or indirectly. Step 4 of the MFC Tutorial <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_SCRIBBLE">
</object><a href=JavaScript:alink_1.Click()>SCRIBBLE</a> adds a dynamic splitter window to split the CScribView into multiple panes. As shown in this step, adding a new splitter frame window is very easy with the Add Class feature of ClassWizard. This example is a dynamic splitter window by default.</p>
<p>
The MFC General sample <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_VIEWEX">
</object><a href=JavaScript:alink_2.Click()>VIEWEX</a> illustrates several uses of static splitters, including how to place a splitter in a splitter.</p>
<p>
ClassWizard will also create a new multiple document interface (MDI) Child frame window class which contains a splitter window. Please refer to Splitter Windows in <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b>Terminology Used by Implementation</b></p>
<p>
Terminology of the parts of a <b>CSplitterWnd</b> and related objects.</p>
<p class=dt>
<b>CSplitterWnd</b>:</p>
<p class=indent>
This is a window that provides pane-splitting controls and scroll bars that are shared between all panes on a row or column. Rows and columns are specified with zero-based numbers [that is, the first pane is row = 0 and column = 0]</p>
<p class=dt>
Pane:</p>
<p class=indent>
An application-specific window that is managed by a <b>CSplitterWnd</b>. A pane is usually a <b>CView</b>-derived object, but in fact can be any <b>CWnd</b> object that has the appropriate child window ID.&nbsp; </p>
<p class=tl>
To do so, simply pass the <b>RUNTIME_CLASS</b> of your <b>CWnd</b> derived class as you would if you were using a <b>CView</b> derived class.&nbsp; Your class must use <b>DECLARE_DYNCREATE</b> and <b>IMPLEMENT_DYNCREATE</b> -- the framework uses dynamic creation at runtime.&nbsp; Although there is a lot of code that is <b>CView</b> specific in <b>CSplitterWnd</b>, <b>CObject::IsKindOf</b> is always used before those actions are performed.&nbsp; Certainly, it is much easier to use <b>CSplitterWnd</b> with <b>CView</b> derived classes than <b>CWnd</b> derived classes.</P><p class=dt>
Splitter Bar:</p>
<p class=indent>
A control that is placed between rows and columns of panes. It may be used to adjust the sizes of rows or columns of Panes.</p>
<p class=dt>
Splitter Box:</p>
<p class=indent>
A small control at the top of the vertical scroll bars or to the left of the horizontal scroll bars in a dynamic <b>CSplitterWnd</b>. Used to create new rows or columns of panes.</p>
<p class=dt>
Splitter Intersection:</p>
<p class=indent>
The intersection of a vertical splitter bar and a horizontal splitter bar. May be dragged to adjust the size of a row and column of panes simultaneously.</p>
<p class=label>
<b>Shared Scroll Bars</b></p>
<p>
The <b>CSplitterWnd</b> class also supports shared scroll bars. These scroll bar controls are children of the <b>CSplitterWnd</b> and are shared with the different panes in the splitter.</p>
<p>
For example, in a 1 row x 2 column window, you can specify <b>WS_VSCROLL</b> when creating the <b>CSplitterWnd</b>. A special scroll bar control will be created that is shared between the two panes.</p>
<pre><code>[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ][&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ][^]
[pane00][pane01][|]
[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ][&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ][v]
</code></pre>
<p>
When the user moves the scroll bar, <b>WM_VSCROLL</b> messages will be sent to both views. When the views set the scroll bar position, the shared scroll bar will be set.</p>
<p>
Note that shared scroll bars are most useful with dynamic or static splits, splitting similar view objects. If you mix views of different types in a splitter, then you may have to write special code to coordinate their scroll positions. Any <b>CView</b>-derived class that uses the <b>CWnd</b> scroll bar APIs will delegate to the shared scroll bar if it exists. The <b>CScrollView</b> implementation is one such example of a <b>CView</b> class that supports shared scroll bars. Non-<b>CView</b> derived classes, classes that rely on noncontrol scroll bars, or classes that use standard Windows implementations (for example, <b>CEditView</b>) will not work with the shared scroll bar feature of <b>CSplitterWnd</b>.</p>
<p class=label>
<b>Minimum Sizes</b></p>
<p>
For each row there is a minimum row height, and similarly for each column there is a minimum column width. This minimum is used to decide if the pane is to small to be shown in complete detail.</p>
<p>
For a static splitter window, the initial minimum row height and column width is 0. For a dynamic splitter window, the initial minimum row height and column width are set by the <i>sizeMin</i> parameter to the <b>CSplitterWnd::Create</b> function.</p>
<p>
These minimum sizes can be changed with the <b>SetRowInfo</b> and <b>SetColumnInfo</b> APIs.</p>
<p class=label>
<b>Actual vs. Ideal Sizes</b></p>
<p>
The layout of the panes in the splitter window depends on the size of the containing frame (which in turn resizes the <b>CSplitterWnd</b>. <b>CSplitterWnd</b> repositions and resizes the panes so that they fit as ideally as possible).</p>
<p>
The row height and column width sizes set by the user, or through the <b>CSplitterWnd</b> API, represent the ideal size. The actual size can be smaller than that ideal size (if there is not enough room to make that pane the ideal size) or larger than the ideal size (if that pane must be made larger to fill the left-over space on the right or bottom of the splitter window).</p>
<p class=label>
<b>Protected Interface</b></p>
<p>
The following describes some of the splitter window implementation overridables that can be used by advanced users of <b>CSplitterWnd</b> to customize the features and user interface of this class. These APIs are officially undocumented and are subject to change in future versions of MFC. Please refer to the implementation source code for more details on these implementation APIs.</p>
<p>
Drawing the splitter bars, boxes and trackers:</p>
<pre><code>enum ESplitType 
 &nbsp;&nbsp; { splitBox, splitBar, splitIntersection, splitBorder };
virtual void OnDrawSplitter(CDC* pDC, ESplitType nType, const CRect&amp; rect);
virtual void OnInvertTracker(const CRect&amp; rect);
</code></pre>
<p>
These virtual function can be overridden to provide alternate imagery for the various graphical components of a splitter window. The default imagery is similar to the splitter in Microsoft Works for Windows: only intersections of splitter bars are blended together. The imagery is also quite different when the framework detects Windows 4.0 -- in order to match the visuals in the shell on that (future) operating system.</p>
<p>
Creating controls and views:</p>
<pre><code>virtual BOOL CreateScrollBarCtrl(DWORD dwStyle, UINT nID);
</code></pre>
<p>
This is called to create a shared scroll bar control. It can be overridden to include extra controls next to a scroll bar. The default behavior is to just create normal Windows scroll bar controls.</p>
<pre><code>virtual void DeleteView(int row, int col);
virtual BOOL SplitRow(int cyBefore);
virtual BOOL SplitColumn(int cxBefore);
virtual void DeleteRow(int row);
virtual void DeleteColumn(int row);
</code></pre>
<p>
These functions are called to implement the logic of the dynamic splitter window (that is, if the splitter window has the <b>SPLS_DYNAMIC_SPLIT</b> style). They can be customized, along with the virtual function <b>CreateView</b>, to implement more advanced dynamic splitters.</p>
<p>
The following are high level commands that are used by the <b>CView</b> class to delegate to the <b>CSplitterWnd</b> implementation. They are virtual so that the standard <b>CView</b> implementation will not require the entire <b>CSplitterWnd</b> implementation to be linked in. For applications that use <b>CView</b> but not <b>CSplitterWnd</b>, the <b>CSplitterWnd</b> implementation will not be linked with the application.</p>
<p class=dt>
virtual BOOL CanActivateNext(BOOL bPrev = FALSE);</p>
<p class=indent>
Checks to see if the “Next Pane” or “Previous Pane” command is currently possible.</p>
<p class=dt>
virtual void ActivateNext(BOOL bPrev = FALSE);</p>
<p class=indent>
Performs the “Next Pane” or “Previous Pane” command.</p>
<p class=dt>
virtual BOOL DoKeyboardSplit();</p>
<p class=indent>
Performs the keyboard split command, usually “Window Split”.</p>
<p>
<a href="_mfcnotes_technical_notes_by_number.htm">Technical Notes by Number</a>  |&nbsp; <a href="_mfcnotes_technical_notes_by_category.htm">Technical Notes by Category</a></p>
</font></BODY>
</HTML>

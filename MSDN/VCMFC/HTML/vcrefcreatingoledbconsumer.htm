<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an OLE DB Consumer</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefcreatingoledbconsumer"></a>Creating an OLE DB Consumer</h1>
<p>
You can use the <b>ATL COM AppWizard</b> and <b>ATL Object</b> <b>Wizard</b> to generate an OLE DB Template consumer.</p>
<p class=label>
<b>To create an ATL project for an OLE DB consumer</b>
<ol>
<li>
From the <b>File</b> menu, choose <b>New</b>. The <b>New</b> dialog box appears.<br><br></li>
<li>
On the <b>Projects</b> tab, choose <b>ATL COM AppWizard</b>.<p>
Name the project on the <b>Projects</b> tab, then click <b>OK</b>. The ATL COM AppWizard appears.</P></li>
<li>
In the ATL COM AppWizard, choose a project type. <br><br></li>
<li>
Click <b>Finish</b> and <b>OK</b>.</li>
</ol>
<p>
Next, use the ATL Object Wizard.</p>
<p class=label>
<b>To use the ATL Object Wizard</b>
<ol>
<li>
From the <b>Insert</b> menu, choose <b>New ATL Object</b>. The ATL Object Wizard appears. <br><br></li>
<li>
In the left pane, choose <b>Data Access</b>. The <b>Consumer</b> icon appears in the right pane.<br><br></li>
<li>
Select the <b>Consumer</b> icon and click <b>Next</b>. The <b>ATL Object Wizard Properties </b>dialog box appears.</li>
</ol>
<p>
Use the ATL Object Wizard to set properties for your consumer.</p>
<p class=label>
<b>To set consumer properties using the ATL Object Wizard</b>
<ol>
<li>
In the <b>ATL Object Wizard Properties </b>dialog box, click the <b>Select Datasource</b> button. The <b>Create New Datalink </b>dialog box appears.<br><br></li>
<li>
In the <b>Create New Datalink </b>dialog box, select an OLE DB Provider and appropriate options, including:<ul type=disc>
<li>
Location and data source for the data to be used by the Provider.<br><br></li>
<li>
Logon ID and password for your data source.</li>
</ul>
<p class=tl>
After selecting your provider and other settings, click <b>Test Connection</b> to verify the selections made on the previous dialog box pages. If the <b>Results </b>box reports <code>PASSED</code>, click <b>Finish</b> to create the data link. The <b>Select Database Table</b> dialog box appears.</P></li>
<li>
In the <b>Select Database Table</b> dialog box, use the tree control to select a table, query, or stored procedure and click <b>OK</b>. You return to the <b>ATL Object Wizard Properties</b> dialog box.<br><br></li>
<li>
The dialog box fills in the names for the <b>Short Name</b>, <b>Class</b>, <b>Accessor</b>, and <b>.H File</b>. The last four are based on the short name. You can edit these names if desired.<br><br></li>
<li>
The wizard creates a <a href="vcrefccommand.htm">CCommand</a>-based consumer by default. If you prefer a <a href="vcrefctable.htm">CTable</a>-based consumer, select the <b>Table</b> button.<br><br></li>
<li>
Choose <b>Change</b>, <b>Insert</b>, and <b>Delete</b> to support the changing, inserting, and deleting of records in the rowset, if required.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
The wizard generators an accessor class and a command (or table) class, as shown in the sample output below. The command class contains code to open the data source and rowset you specified in the wizard. The accessor class contains a column map for the database table you selected. </p>
<pre><code>// Product.H : Declaration of the CProduct class
#ifndef __PRODUCT_H_
#define __PRODUCT_H_
class CProductAccessor
{
public:
   LONG m_ProductID;   // Number automatically assigned to new product.
   TCHAR m_ProductName[41];   // Number automatically assigned to new product.
   LONG m_SupplierID;   // Same entry as in Suppliers table.
   LONG m_CategoryID;   // Same entry as in Categories table.
   TCHAR m_QuantityPerUnit[21];   // (e.g., 24-count case, 1-liter bottle).
   DB_NUMERIC m_UnitPrice;   // (e.g., 24-count case, 1-liter bottle).
   SHORT m_UnitsInStock;   // (e.g., 24-count case, 1-liter bottle).
   SHORT m_UnitsOnOrder;   // (e.g., 24-count case, 1-liter bottle).
   SHORT m_ReorderLevel;   // Minimum units to maintain in stock.
   VARIANT_BOOL m_Discontinued;   // Yes means item is no longer available.

BEGIN_COLUMN_MAP(CProductAccessor)
   COLUMN_ENTRY(1, m_ProductID)
   COLUMN_ENTRY(2, m_ProductName)
   COLUMN_ENTRY(3, m_SupplierID)
   COLUMN_ENTRY(4, m_CategoryID)
   COLUMN_ENTRY(5, m_QuantityPerUnit)
   COLUMN_ENTRY(6, m_UnitPrice)
   COLUMN_ENTRY(7, m_UnitsInStock)
   COLUMN_ENTRY(8, m_UnitsOnOrder)
   COLUMN_ENTRY(9, m_ReorderLevel)
   COLUMN_ENTRY_TYPE(10, DBTYPE_BOOL, m_Discontinued)
END_COLUMN_MAP()
DEFINE_COMMAND(CProductAccessor, _T(" \
   SELECT \
      ProductID, \
      ProductName, \
      SupplierID, \
      CategoryID, \
      QuantityPerUnit, \
      UnitPrice, \
      UnitsInStock, \
      UnitsOnOrder, \
      ReorderLevel, \
      Discontinued&nbsp; \
      FROM Products"))};
class CProduct : public CCommand&lt;CAccessor&lt;CProductAccessor&gt; &gt;
{
public:
   HRESULT Open()
   {
      HRESULT      hr;
      hr = OpenDataSource();
      if (FAILED(hr))
         return hr;
      return OpenRowset();
   }
   HRESULT OpenDataSource()
   {
      HRESULT      hr;
      CDataSource db;
      CDBPropSet   dbinit(DBPROPSET_DBINIT);
      dbinit.AddProperty(DBPROP_INIT_DATASOURCE, OLESTR("OLE_DB_NWind_Jet"));
      dbinit.AddProperty(DBPROP_INIT_PROMPT, (short)4);
      dbinit.AddProperty(DBPROP_INIT_LCID, (long)1033);
      hr = db.Open(_T("MSDASQL"), &amp;dbinit);
      if (FAILED(hr))
         return hr;
      return m_session.Open(db);
   }
   HRESULT OpenRowset()
   {
      // Set properties for open
      CDBPropSet   propset(DBPROPSET_ROWSET);
      propset.AddProperty(DBPROP_IRowsetChange, true);
      propset.AddProperty(DBPROP_UPDATABILITY, DBPROPVAL_UP_CHANGE);
      return CCommand&lt;CAccessor&lt;CProductAccessor&gt; &gt;::Open(m_session, NULL, &amp;propset);
   }
   CSession   m_session;
};
#endif // __PRODUCT_H_
</code></pre>
<p>
<a href="vcconvisualcoledbconsumertemplates.htm">Back to Using the OLE DB Consumer Templates</a></p>
</font></BODY>
</HTML>

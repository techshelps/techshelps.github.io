<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEGIN_MSG_MAP</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_begin_msg_map"></a>BEGIN_MSG_MAP</h1>
<p>
<b>BEGIN_MSG_MAP( </b><i>theClass</i><b> )</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>theClass</i></p>
<p class=indent>
[in] The name of the class containing the message map.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Marks the beginning of the default message map. <a href="_atl_cwindowimpl.3a3a.windowproc.htm">CWindowImpl::WindowProc</a> uses the default message map to process messages sent to the window. The message map directs messages either to the appropriate handler function or to another message map.</p>
<p>
The following macros map a message to a handler function. This function must be defined in <i>theClass</i>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Macro</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_message_handler.htm">MESSAGE_HANDLER</a></td>
<td width=52%>Maps a Windows message to a handler function.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_message_range_handler.htm">MESSAGE_RANGE_HANDLER</a></td>
<td width=52%>Maps a contiguous range of Windows messages to a handler function.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_command_handler.htm">COMMAND_HANDLER</a></td>
<td width=52%>Maps a <b>WM_COMMAND</b> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_command_id_handler.htm">COMMAND_ID_HANDLER</a></td>
<td width=52%>Maps a <b>WM_COMMAND</b> message to a handler function, based on the identifier of the menu item, control, or accelerator.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_command_handler.htm">COMMAND_CODE_HANDLER</a></td>
<td width=52%>Maps a <b>WM_COMMAND</b> message to a handler function, based on the notification code.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_command_range_handler.htm">COMMAND_RANGE_HANDLER</a></td>
<td width=52%>Maps a contiguous range of <b>WM_COMMAND</b> messages to a handler function, based on the identifier of the menu item, control, or accelerator.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_notify_handler.htm">NOTIFY_HANDLER</a></td>
<td width=52%>Maps a <b>WM_NOTIFY</b> message to a handler function, based on the notification code and the control identifier.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_notify_id_handler.htm">NOTIFY_ID_HANDLER</a></td>
<td width=52%>Maps a <b>WM_NOTIFY</b> message to a handler function, based on the control identifier.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_notify_code_handler.htm">NOTIFY_CODE_HANDLER</a></td>
<td width=52%>Maps a <b>WM_NOTIFY</b> message to a handler function, based on the notification code.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_notify_range_handler.htm">NOTIFY_RANGE_HANDLER</a></td>
<td width=52%>Maps a contiguous range of <b>WM_NOTIFY</b> messages to a handler function, based on the control identifier.</td>
</tr>
</table><br>
<p>
The following macros direct a message to another message map. This process is called "chaining." </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Macro</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_chain_msg_map.htm">CHAIN_MSG_MAP</a></td>
<td width=52%>Chains to the default message map in the base class.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_chain_msg_map_member.htm">CHAIN_MSG_MAP_MEMBER</a></td>
<td width=52%>Chains to the default message map in a data member of the class.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_chain_msg_map_alt.htm">CHAIN_MSG_MAP_ALT</a></td>
<td width=52%>Chains to an alternate message map in the base class.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_chain_msg_map_alt_member.htm">CHAIN_MSG_MAP_ALT_MEMBER</a></td>
<td width=52%>Chains to an alternate message map in a data member of the class.</td>
</tr>
<tr valign=top>
<td width=48%><a href="_atl_chain_msg_map_dynamic.htm">CHAIN_MSG_MAP_DYNAMIC</a></td>
<td width=52%>Chains to the default message map in another class at run time.</td>
</tr>
</table><br>
<p class=label>
<b>Example</b></p>
<pre><code>class CMyWindow : ...
{
public:
 &nbsp; ...

 &nbsp; BEGIN_MSG_MAP(CMyWindow)
 &nbsp;&nbsp;&nbsp;&nbsp; MESSAGE_HANDLER(WM_PAINT, OnPaint)
 &nbsp;&nbsp;&nbsp;&nbsp; MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus)
 &nbsp;&nbsp;&nbsp;&nbsp; CHAIN_MSG_MAP(CMyBaseWindow)
 &nbsp; END_MSG_MAP()

 &nbsp; LRESULT OnPaint(UINT uMsg, WPARAM wParam, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPARAM lParam, BOOL&amp; bHandled)
 &nbsp; { ... }

 &nbsp; LRESULT OnSetFocus(UINT uMsg, WPARAM wParam, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPARAM lParam, BOOL&amp; bHandled)
 &nbsp; { ... }
};
</code></pre>
<p>
When a <code>CMyWindow</code> object receives a <code>WM_PAINT</code> message, the message is directed to <code>CMyWindow::OnPaint</code> for the actual processing. If <code>OnPaint</code> indicates the message requires further processing, the message will then be directed to the default message map in <code>CMyBaseWindow</code>.</p>
<p>
In addition to the default message map, you can define an alternate message map with <a href="_atl_alt_msg_map.htm">ALT_MSG_MAP</a>. Always begin a message map with <b>BEGIN_MSG_MAP</b>. You can then declare subsequent alternate message maps. The following example shows the default message map and one alternate message map, each containing one handler function:</p>
<pre><code>BEGIN_MSG_MAP(CMyClass)
 &nbsp; MESSAGE_HANDLER(WM_PAINT, OnPaint)
ALT_MSG_MAP(1)
 &nbsp; MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus)
END_MSG_MAP()
</code></pre>
<p>
The next example shows two alternate message maps. The default message map is empty.</p>
<pre><code>BEGIN_MSG_MAP(CMyClass)
ALT_MSG_MAP(1)
 &nbsp; MESSAGE_HANDLER(WM_PAINT, OnPaint)
 &nbsp; MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus)
ALT_MSG_MAP(2)
 &nbsp; MESSAGE_HANDLER(WM_CREATE, OnCreate)
END_MSG_MAP()
</code></pre>
<p>
The <a href="_atl_end_msg_map.htm">END_MSG_MAP</a> macro marks the end of the message map. Note that there is always exactly one instance of <b>BEGIN_MSG_MAP</b> and <b>END_MSG_MAP</b>.</p>
<p>
For more information about using message maps in ATL, see <a href="_atl_message_maps.htm">Message Maps</a> in the article "ATL Window Classes."</p>
<p>
<a href="_atl_atl_macros_and_global_functions.htm">ATL Macros and Global Functions</a></p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="_atl_cmessagemap.htm">CMessageMap</a>, <a href="_atl_cdynamicchain.htm">CDynamicChain</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCommandLineInfo::ParseParam</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ccommandlineinfo.3a3a.parseparam"></a>CCommandLineInfo::ParseParam</h1>
<p>
<b>virtual void ParseParam( LPCTSTR </b><i>lpszParam</i><b>, BOOL </b><i>bFlag</i><b>, BOOL </b><i>bLast</i><b> );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>lpszParam</i></p>
<p class=indent>
The parameter or flag.</p>
<p class=dt>
<i>bFlag</i></p>
<p class=indent>
Indicates whether <i>lpszParam</i> is a parameter or a flag.</p>
<p class=dt>
<i>bLast</i></p>
<p class=indent>
Indicates if this is the last parameter or flag on the command line.</p>
<p class=label>
<b>Remarks</b></p>
<p>
The framework calls this function to parse/interpret individual parameters from the command line. <a href="_mfc_cwinapp.3a3a.parsecommandline.htm">CWinApp::ParseCommandLine</a> calls <b>ParseParam</b> once for each parameter or flag on the command line, passing the argument to <i>lpszParam</i>. If the first character of the parameter is a ‘<b>-</b>’ or a ‘<b>/</b>’, then it is removed and <i>bFlag </i>is set to <b>TRUE</b>. When parsing the final parameter, <i>bLast</i> is set to <b>TRUE</b>.</p>
<p>
The default implementation of this function recognizes the following flags: <b>/p</b>, <b>/pt</b>, <b>/dde</b>, <b>/Automation</b>, and <b>/Embedding</b>, as shown in the following table:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>Command-line argument</b></td>
<td class=label width=54%><b>Command executed</b></td>
</tr>
<tr valign=top>
<td width=46%><i>app</i></td>
<td width=54%>New file.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> filename</td>
<td width=54%>Open file.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> <b>/p</b> filename</td>
<td width=54%>Print file to default printer.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> <b>/pt</b> filename printer driver port</td>
<td width=54%>Print file to the specified printer.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> <b>/dde</b></td>
<td width=54%>Start up and await DDE command.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> <b>/Automation</b></td>
<td width=54%>Start up as an OLE automation server.</td>
</tr>
<tr valign=top>
<td width=46%><i>app</i> <b>/Embedding</b></td>
<td width=54%>Start up to edit an embedded OLE item.</td>
</tr>
</table><br>
<p>
This information is stored in <a href="_mfc_ccommandlineinfo.3a3a.m_brunautomated.htm">m_bRunAutomated</a>, <a href="_mfc_ccommandlineinfo.3a3a.m_brunembedded.htm">m_bRunEmbedded</a>, and <a href="_mfc_ccommandlineinfo.3a3a.m_nshellcommand.htm">m_nShellCommand</a>. Flags are marked by either a forward-slash ‘<b>/</b>’ or hyphen ‘<b>-</b>’.</p>
<p>
The default implementation puts the first non-flag parameter into <a href="_mfc_ccommandlineinfo.3a3a.m_strfilename.htm">m_strFileName</a>. In the case of the <b>/pt</b> flag, the default implementation puts the second, third, and fourth non-flag parameters into <a href="_mfc_ccommandlineinfo.3a3a.m_strprintername.htm">m_strPrinterName</a>, <a href="_mfc_ccommandlineinfo.3a3a.m_strdrivername.htm">m_strDriverName</a>, and <a href="_mfc_ccommandlineinfo.3a3a.m_strportname.htm">m_strPortName</a>, respectively.</p>
<p>
The default implementation also sets <a href="_mfc_ccommandlineinfo.3a3a.m_bshowsplash.htm">m_bShowSplash</a> to <b>TRUE</b> only in the case of a new file. In the case of a new file, the user has taken action involving the application itself. In any other case, including opening existing files using the shell, the user action involves the file directly. In a document-centric standpoint, the splash screen does not need to announce the application starting up.</p>
<p>
Override this function in your derived class to handle other flag and parameter values.</p>
<p>
<a href="_mfc_ccommandlineinfo.htm">CCommandLineInfo Overview</a>  |&nbsp; <a href="_mfc_ccommandlineinfo_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwinapp.3a3a.parsecommandline.htm">CWinApp::ParseCommandLine</a></p>
</font></BODY>
</HTML>

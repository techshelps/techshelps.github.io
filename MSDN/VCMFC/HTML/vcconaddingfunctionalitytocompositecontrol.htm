<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Functionality to the Composite Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcconaddingfunctionalitytocompositecontrol"></a>Adding Functionality to the Composite Control</h1>
<p>
Once you have inserted any necessary controls into the composite control, the next step involves adding new functionality. This new functionality usually falls into two categories:
<ul type=disc>
<li>
Supporting additional interfaces and customizing the behavior of your composite control with additional, specific features.<br><br></li>
<li>
Handling events from the contained control (or controls).</li>
</ul>
<p>
For the purpose and scope of this article, the remaining portion of this section focuses solely on event handling.</p>
<h2>Declaration of IDispEventImpl Interfaces for Contained Controls</h2>
<p>
For each contained control, that you want to handle events from, you must implement an event dispatch interface by deriving from the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefIDispEventImpl">
</object><a href=JavaScript:alink_1.Click()>IDispEventImpl</a> template class. This derivation is done in the declaration of your composite control and consists of two parameters:
<ul type=disc>
<li>
ID of the control<br><br></li>
<li>
Name of the composite control object</li>
</ul>
<p>
The following example code line, found in the base class declaration, declares an <b>IDispEventImpl</b> interface for a control (<code>IDC_CIRCCTRL1</code>), for the composite control class (<code>CMyCompositeCtrl</code>).</p>
<pre><code>public IDispEventImpl&lt;IDC_CIRCCTL1, CMyCompositeCtrl&gt;</code></pre>
<h2>Declaration of the Event Sink Map</h2>
<p>
After declaring the dispatch event classes for each contained control, you need to add an event sink map to the composite control object. This map accomplishes two things:
<ul type=disc>
<li>
Relates a control ID to a dispatch interface ID that the contained control uses for events<br><br></li>
<li>
Maps handler functions to events from a contained control</li>
</ul>
<p>
The event sink map is implemented using several predefined macros:</p>
<p class=dt>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefBEGIN_SINK_MAP">
</object><a href=JavaScript:alink_2.Click()>BEGIN_SINK_MAP</a><b>(</b><i>CtrlName</i><b>)</b></p>
<p class=indent>
Declares the beginning of the event sink map for the <i>CtrlName</i> composite control.</p>
<p class=dt>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefSINK_ENTRY">
</object><a href=JavaScript:alink_3.Click()>SINK_ENTRY</a><b>(</b><i>CtrlID</i><b>, </b><i>DispIID</i><b>, </b><i>dispID</i><b>, </b><i>EventHandler</i><b>)</b></p>
<p class=indent>
Declares the handler function (<i>EventHandler</i>) for the specified event (<i>dispID</i>), of the dispatch interface <i>DispIID</i>, for the control identified by <i>CtrlID</i>.</p>
<p class=dt>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vcrefEND_SINK_MAP">
</object><a href=JavaScript:alink_4.Click()>END_SINK_MAP</a><b>()</b></p>
<p class=indent>
Declares the end of the event sink map for the <i>CtrlName</i> composite control.</p>
<p>
The following code example (located in the .CPP file of the composite control) declares an event sink map for the <code>CMyCompositeCtrl</code> object. It declares two event handlers for two contained controls (<code>IDC_CIRCCTL1 </code>and <code>IDC_CIRCCTL2</code>). The Click event for both controls is handled by the <code>OnClick_CircCtrl1</code> and <code>OnClick_CircCtrl2</code> functions.</p>
<pre><code>BEGIN_SINK_MAP(CMyCompositeCtrl)
 &nbsp; SINK_ENTRY(IDC_CIRCCTL1, DISPID_CLICK, OnClick_CircCtrl1)
 &nbsp; SINK_ENTRY(IDC_CIRCCTL2, DISPID_CLICK, OnClick_CircCtrl2)
END_SINK_MAP()
</code></pre>
<p>
Once you have declared the event sink map, proceed to implement the event handlers for the composite control.</p>
<h2>Declaration and Implementation of Event Handlers</h2>
<p>
In the Declaration of the Event Sink Map step, you added a new map that declared two event handlers for the two contained Circ controls. It is now time to implement these handlers. The format is as follows:</p>
<pre><code>retVal __stdcall EventHandler (args)
{
 &nbsp; //handle event firing appropriately
}
</code></pre>
<p>
where <code>retVal</code> is the return value of the event handler, <code>EventHandler</code> is the name of the function handler, and <code>args</code> is an optional listing of arguments for the event. This name must match one of the event handlers declared in the composite control’s event sink map.</p>
<p>
The following code example defines an event handler (the Click event) for the contained control identified by <code>IDC_CIRCCTRL1</code>:</p>
<pre><code>void __stdcall OnClick_CircCtrl1( )
{
 &nbsp; MessageBox("Click event fired!", "CircCtl1", MB_OK);
}
</code></pre>
<p>
Add event handlers for the remaining entries in the event sink map of your composite control.</p>
<h2>Initiating and Terminating Contact with Contained Controls</h2>
<p>
Before the composite control becomes fully active, each contained control, whose events you are handling, is queried for outgoing interfaces, such as an event dispatch interface. If any interfaces are found, connections are established and a reference to the outgoing interface is used to handle events from the control. This procedure is referred to as “advising the control” and is automatically done by the composite control object, using the event sink map, upon initialization of the composite control.</p>
<p>
After the user has dismissed the dialog box, all stored references to outgoing interfaces from contained controls are cleaned up. This is referred to as “unadvising the control” and is also done automatically by the composite control.</p>
</font></BODY>
</HTML>

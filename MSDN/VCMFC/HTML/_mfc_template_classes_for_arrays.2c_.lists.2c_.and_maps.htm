<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Template Classes for Arrays, Lists, and Maps</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_template_classes_for_arrays.2c_.lists.2c_.and_maps"></a>Template Classes for Arrays, Lists, and Maps</h1>
<p>
These collection classes are templates whose parameters determine the types of the objects stored in the aggregates. The <b>CArray</b>, <b>CMap</b>, and <b>CList</b> classes use global helper functions that must usually be customized. For more information about these helper functions, see <a href="_mfc_collection_class_helpers.htm">Collection Class Helpers</a> in the “Macros and Globals” section. The typed pointer classes are “wrappers” for other classes in the class library. By using these wrappers, you enlist the compiler’s type-checking to help you avoid errors. For more information on using these classes, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Collections">
</object><a href=JavaScript:alink_1.Click()>Collections</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p>
These classes provide templates you can use to create arrays, lists, and maps using any type you like.</p>
<p class=dt>
<a href="_mfc_carray.htm">CArray</a></p>
<p class=indent>
Template class for making arrays of arbitrary types.</p>
<p class=dt>
<a href="_mfc_clist.htm">CList</a></p>
<p class=indent>
Template class for making lists of arbitrary types.</p>
<p class=dt>
<a href="_mfc_cmap.htm">CMap</a></p>
<p class=indent>
Template class for making maps with arbitrary key and value types.</p>
<p class=dt>
<a href="_mfc_ctypedptrarray.htm">CTypedPtrArray</a></p>
<p class=indent>
Template class for type-safe arrays of pointers.</p>
<p class=dt>
<a href="_mfc_ctypedptrlist.htm">CTypedPtrList</a></p>
<p class=indent>
Template class for type-safe lists of pointers.</p>
<p class=dt>
<a href="_mfc_ctypedptrmap.htm">CTypedPtrMap</a></p>
<p class=indent>
Template class for type-safe maps with pointers.</p>
</font></BODY>
</HTML>

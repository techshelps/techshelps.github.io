<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AFX_EXTENSION_MODULE Structure</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_afx_extension_module_structure"></a><sup></sup>AFX_EXTENSION_MODULE Structure</h1>
<p>
The <b>AFX_EXTENSION_MODULE </b>structure has the following form:</p>
<pre><code>struct AFX_EXTENSION_MODULE
{
 &nbsp; BOOL bInitialized;
 &nbsp; HMODULE hModule;
 &nbsp; HMODULE hResource;
 &nbsp; CRuntimeClass* pFirstSharedClass;
 &nbsp; COleObjectFactory* pFirstSharedFactory;
};
</code></pre>
<p>
The <b>AFX_EXTENSION_MODULE</b> is used during initialization of MFC extension DLLs to hold the state of extension DLL module. </p>
<p class=label>
<b>Members</b></p>
<p class=dt>
<b>bInitialized</b></p>
<p class=indent>
<b>TRUE</b> if the DLL module has been initialized with <b>AfxInitExtensionModule</b>.</p>
<p class=dt>
<b>hModule</b></p>
<p class=indent>
Specifies the handle of the DLL module.</p>
<p class=dt>
<b>hResource</b></p>
<p class=indent>
Specifies the handle of the DLL custom resource module.</p>
<p class=dt>
<b>pFirstSharedClass</b></p>
<p class=indent>
A pointer to information (the <b>CRuntimeClass</b> structure) about the DLL module's first runtime class. Used to provide the start of the runtime class list.</p>
<p class=dt>
<b>pFirstSharedFactory</b></p>
<p class=indent>
A pointer to the DLL module's first object factory (a <b>COleObjectFactory</b> object). Used to provide the start of the class factory list.</p>
<p class=label>
<b>Comments</b></p>
<p>
MFC extension DLLs need to do two things in their <b>DllMain</b> function:
<ul type=disc>
<li>
Call <a href="_mfc_afxinitextensionmodule.htm">AfxInitExtensionModule</a> and check the return value.<br><br></li>
<li>
Create a <b>CDynLinkLibrary</b> object if the DLL will be exporting <a href="_mfc_cruntimeclass.htm">CRuntimeClass</a> objects or has its own custom resources.</li>
</ul>
<p>
The <b>AFX_EXTENSION_MODULE</b> structure is used to hold a copy of the extension DLL module state, including a copy of the runtime class objects that have been initialized by the extension DLL as part of normal static object construction executed before <b>DllMain</b> is entered. For example:</p>
<pre><code>static AFX_EXTENSION_MODULE extensionDLL;
extern "C" int APIENTRY
DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID)
{
 &nbsp; // initialize this DLL's extension module
 &nbsp; VERIFY(AfxInitExtensionModule(extensionDLL, hInstance));
</code></pre>
<p>
The module information stored in the <b>AFX_EXTENSION_MODULE</b> structure can be copied into the <b>CDynLinkLibrary</b> object. For example:</p>
<pre><code>// CDynLinkLibrary class
IMPLEMENT_DYNAMIC(CDynLinkLibrary, CCmdTarget)
// Constructor
CDynLinkLibrary::CDynLinkLibrary(AFX_EXTENSION_MODULE&amp; state, BOOL bSystem)
{
#ifndef _AFX_NO_OLE_SUPPORT
 &nbsp; m_factoryList.Construct(offsetof(COleObjectFactory, m_pNextFactory));
#endif
 &nbsp; m_classList.Construct(offsetof(CRuntimeClass, m_pNextClass));

 &nbsp; // copy info from AFX_EXTENSION_MODULE struct
 &nbsp; ASSERT(state.hModule != NULL);
 &nbsp; m_hModule = state.hModule;
 &nbsp; m_hResource = state.hResource;
 &nbsp; m_classList.m_pHead = state.pFirstSharedClass;
#ifndef _AFX_NO_OLE_SUPPORT
 &nbsp; m_factoryList.m_pHead = state.pFirstSharedFactory;
#endif
 &nbsp; m_bSystem = bSystem;
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_afxinitextensionmodule.htm">AfxInitExtensionModule</a>, <a href="_mfc_afxtermextensionmodule.htm">AfxTermExtensionModule</a> </p>
</font></BODY>
</HTML>

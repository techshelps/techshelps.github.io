<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObList::GetHead</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_coblist.3a3a.gethead"></a><sup></sup>CObList::GetHead  </h1>
<p>
<b>CObject*&amp;</b> <b>GetHead(</b> <b>);</b></p>
<p>
<b>CObject*</b> <b>GetHead(</b> <b>)</b> <b>const;</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
If the list is accessed through a pointer to a <b>const CObList</b>, then <b>GetHead</b> returns a <b>CObject</b> pointer. This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification. </p>
<p>
If the list is accessed directly or through a pointer to a <b>CObList</b>, then <b>GetHead</b> returns a reference to a <b>CObject</b> pointer. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Gets the <b>CObject</b> pointer that represents the head element of this list. </p>
<p>
You must ensure that the list is not empty before calling <b>GetHead</b>. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use <a href="_mfc_coblist.3a3a.isempty.htm">IsEmpty</a> to verify that the list contains elements.</p>
<p class=label>
<b>Example</b></p>
<p>
The following example illustrates the use of <b>GetHead</b> on the left side of an assignment statement.</p>
<pre><code>&nbsp;&nbsp;&nbsp;const CObList* cplist;

 &nbsp; CObList* plist = new CObList;
 &nbsp; CAge* page1 = new CAge( 21 );
 &nbsp; CAge* page2 = new CAge( 30 );
 &nbsp; CAge* page3 = new CAge( 40 );
 &nbsp; plist-&gt;AddHead( page1 );
 &nbsp; plist-&gt;AddHead( page2 );&nbsp; // List now contains (30, 21).
 &nbsp; // The following statement REPLACES the head element.
 &nbsp; plist-&gt;GetHead() = page3; // List now contains (40, 21).
 &nbsp; ASSERT( *(CAge*) plist-&gt;GetHead() == CAge( 40 ) );
 &nbsp; cplist = plist;&nbsp; // cplist is a pointer to a const list.
// cplist-&gt;GetHead() = page3; // Error: can't assign a pointer to a const list
 &nbsp; ASSERT( *(CAge*) plist-&gt;GetHead() == CAge( 40 ) ); // OK

 &nbsp; delete page1;
 &nbsp; delete page2;
 &nbsp; delete page3;
 &nbsp; delete plist; // Cleans up memory.
</code></pre>
<p>
<a href="_mfc_coblist.htm">CObList Overview</a>  |&nbsp; <a href="_mfc_coblist_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_coblist.3a3a.gettail.htm">CObList::GetTail</a>, <a href="_mfc_coblist.3a3a.gettailposition.htm">CObList::GetTailPosition</a>, <a href="_mfc_coblist.3a3a.addhead.htm">CObList::AddHead</a>, <a href="_mfc_coblist.3a3a.removehead.htm">CObList::RemoveHead</a></p>
</font></BODY>
</HTML>

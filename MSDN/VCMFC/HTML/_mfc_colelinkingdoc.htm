<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COleLinkingDoc</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_colelinkingdoc"></a><sup></sup>COleLinkingDoc</h1>
<p>
<img src="colnkdoc.gif" border=0></p>
<p>
The <b>COleLinkingDoc</b> class is the base class for OLE container documents that support linking to the embedded items they contain. A container application that supports linking to embedded items is called a “link container.” The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_OCLIENT">
</object><a href=JavaScript:alink_1.Click()>OCLIENT</a> sample application is an example of a link container.</p>
<p>
When a linked item’s source is an embedded item in another document, that containing document must be loaded in order for the embedded item to be edited. For this reason, a link container must be able to be launched by another container application when the user wants to edit the source of a linked item. Your application must also use the <a href="_mfc_coletemplateserver.htm">COleTemplateServer</a> class so that it can create documents when launched programmatically.</p>
<p>
To make your container a link container, derive your document class from <b>COleLinkingDoc</b> instead of <a href="_mfc_coledocument.htm">COleDocument</a>. As with any other OLE container, you must design your class for storing the application’s native data as well as embedded or linked items. Also, you must design data structures for storing your native data. If you define a <b>CDocItem</b>-derived class for your application’s native data, you can use the interface defined by <b>COleDocument</b> to store your native data as well as your OLE data.</p>
<p>
To allow your application to be launched programmatically by another container, declare a <b>COleTemplateServer</b> object as a member of your application’s <b>CWinApp</b>-derived class:</p>
<pre><code>class COleClientApp : public CWinApp
{
// ...
protected:
   COleTemplateServer m_server;
// ...
};
</code></pre>
<p>
In the <b>InitInstance</b> member function of your <b>CWinApp</b>-derived class, create a document template and specify your <b>COleLinkingDoc</b>-derived class as the document class:</p>
<pre><code>// CMainDoc is derived from COleLinkingDoc
CMultiDocTemplate* pDocTemplate = new CMultiDocTemplate(IDR_OCLIENTTYPE,
 &nbsp; RUNTIME_CLASS(CMainDoc),
 &nbsp; RUNTIME_CLASS(CSplitFrame),
 &nbsp; RUNTIME_CLASS(CMainView));
pDocTemplate-&gt;SetContainerInfo(
 &nbsp; IDR_OCLIENTTYPE_CNTR_IP);
AddDocTemplate(pDocTemplate);
</code></pre>
<p>
Connect your <b>COleTemplateServer</b> object to your document templates by calling the object’s <b>ConnectTemplate</b> member function, and register all class objects with the OLE system by calling <b>COleTemplateServer::RegisterAll</b>:</p>
<pre><code>m_server.ConnectTemplate(clsid, pDocTemplate, FALSE);
COleTemplateServer::RegisterAll();
</code></pre>
<p>
For a sample <b>CWinApp</b>-derived class definition and <b>InitInstance</b> function, see OCLIENT.H and OCLIENT.CPP in the MFC sample <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_OCLIENT">
</object><a href=JavaScript:alink_2.Click()>OCLIENT</a>.</p>
<p>
For more information on using <b>COleLinkingDoc</b>, see the articles <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Containers.3a_.Implementing_a_Container">
</object><a href=JavaScript:alink_3.Click()>Containers: Implementing a Container</a> and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Containers.3a_.Advanced_Features">
</object><a href=JavaScript:alink_4.Click()>Containers: Advanced Features</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxole.h&gt;</b></p>
<p>
<a href="_mfc_colelinkingdoc_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_coledocument.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_OCLIENT">
</object><a href=JavaScript:alink_5.Click()>MFC Sample OCLIENT</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cdoctemplate.htm">CDocTemplate</a></p>
</font></BODY>
</HTML>

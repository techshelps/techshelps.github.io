<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE DB User Records</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcconoledbuserrecords"></a>OLE DB User Records</h1>
<p>
To use a static accessor, your consumer must have a user record. The user record is a C++ class that contains data elements to handle input or output. The ATL Object Wizard generates a user record for your consumer. You can add methods to the user record for optional tasks like handling commands.</p>
<p>
The following code shows a sample record that handles commands. In the user record, <b>BEGIN_OLUMN_MAP</b> represents a data rowset passed to the consumer from a provider. <b>BEGIN_PARAM_MAP</b> represents a set of command parameters. This example uses a <a href="vcrefccommand.htm">CCommand</a> class to handle the command parameters. The data members in the map entries represent offsets into one contiguous block of memory for each instance of the class. The <b>COLUMN_ENTRY</b> macros correspond to the <b>PROVIDER_COLUMN_ENTRY</b> macros on the provider side.</p>
<p>
For more information on the <b>COLUMN_MAP</b> and <b>PARAM_MAP</b> macros, see <a href="vcrefoledbtemplateclassesconsumermacros.htm">Macros for OLE DB Consumer Templates</a>.</p>
<pre><code>class CArtists
{
public:
// Data Elements
   CHAR m_szFirstName[20];
   CHAR m_szLastName[30];
   short m_nAge;
 
// output binding map
BEGIN_COLUMN_MAP(CArtists)
   COLUMN_ENTRY(1, m_szFirstName)
   COLUMN_ENTRY(2, m_szLastName)
   COLUMN_ENTRY(3, m_nAge)
END_COLUMN_MAP()
 
// parameter binding map
BEGIN_PARAM_MAP(CArtists)
   COLUMN_ENTRY(1, m_nAge)
END_PARAM_MAP
};
</code></pre>
<p>
The following example shows the user record modified to support multiple accessors on the rowset. Instead of <b>BEGIN_COLUMN_MAP</b> and <b>END_COLUMN_MAP</b>, it uses <a href="vcrefbegin_accessor_map.htm">BEGIN_ACCESSOR_MAP</a> and <a href="vcrefbegin_accessor.htm">BEGIN_ACCESSOR</a> for each accessor. The <b>BEGIN_ACCESSOR</b> macro specifies the accessor number (offset from zero) and whether the accessor is an autoaccessor. Autoaccessors call <b>GetData</b> to retrieve data automatically on a call to <a href="vcrefcrowsetmovenext.htm">MoveNext</a>. Non-automatic accessors require you to explicitly retrieve the data. Use a non-automatic accessor if you are binding to a large data field (like a bitmap image) that you may not want to retrieve for every record.</p>
<pre><code>class CMultiArtists
{
public:
// Data Elements
   CHAR m_szFirstName[20];
   CHAR m_szLastName[30];
   short m_nAge;
 
// output binding map
BEGIN_ACCESSOR_MAP(CMultiArtists, 2)
   BEGIN_ACCESSOR(0, true)
    COLUMN_ENTRY(1, m_szFirstName)
    COLUMN_ENTRY(2, m_szLastName)
   END_ACCESSOR()
   BEGIN_ACCESSOR(1, false) // not an auto accessor
    COLUMN_ENTRY(3, m_nAge)
   END_ACCESSOR()
END_ACCESSOR_MAP()
};
</code></pre>
<p>
<a href="vcconoledbconsumertemplates.htm">Back to the OLE DB Consumer Template Architecture</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 2: Adding a Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_step_2.3a_.adding_a_control"></a>Step 2: Adding a Control</h1>
<p>
To add an object to an ATL project, you use the ATL Object Wizard. Click <b>New ATL Object</b> on the <b>Insert</b> menu, and the ATL Object Wizard appears. </p>
<p>
<img src="vc30961.gif" border=0></p>
<p>
In the first ATL Object Wizard dialog box, select the category of object you want to add to your current ATL project. Some of the options you can select are a basic COM object, a control tailored to work in Internet Explorer, and a property page. In this tutorial, you will create a standard control, so set the category as <b>Controls</b> on the left, then on the right select <b>Full Control</b>. Finally, click <b>Next</b>.</p>
<p>
A set of property pages is displayed that allows you to configure the control you are inserting into your project. Type "PolyCtl" as the short name.&nbsp; The other fields are automatically completed.</p>
<p>
<img src="cr0103s.gif" border=0></p>
<p>
The <b>Class</b> field shows the C++ class name created to implement the control. The <b>.H File</b> and <b>.CPP File</b> fields show the files created to contain the definition of the C++ class. The <b>CoClass</b> is the name of the component class for this control, and <b>Interface</b> is the name of the interface on which your control will implement its custom methods and properties. The <b>Type</b> is a description for the control, and the <b>ProgID</b> is the readable name that can be used to look up the CLSID of the control.</p>
<p>
Now enable support for rich error information and connection points for your control:
<ol>
<li>
Click on the <b>Attributes</b> tab. <br><br></li>
<li>
Click the <b>Support ISupportErrorInfo</b> check box.<br><br></li>
<li>
Click the <b>Support Connection Points</b> check box.&nbsp; This will create support for an outgoing interface in the IDL file.</li>
</ol>
<p>
You will color in the polygon when you draw it, so add a Fill Color stock property:
<ol>
<li>
Click on the <b>Stock Properties</b> tab. <br>
You see a list box with all the possible stock properties you can enter. <br><br></li>
<li>
Scroll down the list, then double-click <b>Fill Color</b> to move it to the <b>Supported</b> list.<p>
<img src="vc30962.gif" border=0></P></li>
</ol>
<p>
You are finished selecting options for your control. Click <b>OK</b>. </p>
<p>
When you created your control, several code changes and additions were made. The following files were created:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>File</b></td>
<td class=label width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>PolyCtl.h</td>
<td width=80%>Contains most of the implementation of the C++ class CPolyCtl.</td>
</tr>
<tr valign=top>
<td width=20%>PolyCtl.cpp</td>
<td width=80%>Contains the remaining parts of CPolyCtl.</td>
</tr>
<tr valign=top>
<td width=20%>PolyCtl.rgs</td>
<td width=80%>A text file that contains the registry script used to register the control.</td>
</tr>
<tr valign=top>
<td width=20%>PolyCtl.htm</td>
<td width=80%>An HTML file that contains the source of a Web page that contains a reference to the newly created control, so that you can try it out in Internet Explorer immediately.</td>
</tr>
</table><br>
<p>
The Wizard also performed the following code changes:
<ul type=disc>
<li>
A #include was added to the StdAfx.h and StdAfx.cpp files to include the ATL files necessary for controls.<br><br></li>
<li>
The registry script PolyCtl.rgs was added to the project resource.<br><br></li>
<li>
Polygon.idl was changed to include details of the new control.<br><br></li>
<li>
The new control was added to the object map in Polygon.cpp.</li>
</ul>
<p>
The file PolyCtl.h is the most interesting because it contains the main code that implements your control.</p>
<p>
You are now ready to build your control:
<ol>
<li>
On the <b>Build</b> menu click <b>Build Polygon.dll</b>. <br><br></li>
<li>
Once your control has finished building, click <b>ActiveX Control Test Container</b> on the <b>Tools</b> menu. The <b>Test Container</b> is launched.<br><br></li>
<li>
In <b>Test Container</b>, choose <b>Insert New Control </b>from the <b>Edit </b>menu. The <b>Insert Control</b> dialog box appears.<br><br></li>
<li>
From the list of available controls in the <b>Insert Control</b> dialog box, choose <b>PolyCtl class</b>. <br>
You should see a rectangle with the text "ATL 3.0 : PolyCtl" in the middle. <br><br></li>
<li>
Close <b>Test Container</b>. </li>
</ol>
<p>
Next, you will add a custom property to the control.</p>
<p>
<a href="_atl_step_1.3a_.creating_the_project.htm">Back to Step 1</a>  |&nbsp; <a href="_atl_step_3.3a_.adding_a_property_to_the_control.htm">On to Step 3</a> </p>
</font></BODY>
</HTML>

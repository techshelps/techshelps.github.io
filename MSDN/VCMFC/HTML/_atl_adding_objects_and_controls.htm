<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Objects and Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_adding_objects_and_controls"></a>Adding Objects and Controls</h1>
<p>
You can use the ATL Object Wizard to add an object or a control to your ATL or MFC-based projects. For each COM object or control you add, the wizard generates CPP and H files, as well as an RGS file for script-based registry support.</p>
<p>
If you are attempting to add a simple COM object to an MFC project, you will need to add ATL support to the existing project. For more information on this feature, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vchowaddingatlsupporttoyourmfcproject">
</object><a href=JavaScript:alink_1.Click()>Adding ATL Support to Your MFC Project</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The ATL Object Wizard adds the object to the active project. If you wish to add the control to another project on the workspace, you must first make it the active project.</p>
<p class=label>
<b>To add an object or a control using the ATL Object Wizard</b>
<ul type=disc>
<li>
With your project open, select <b>New ATL Object</b> from the <b>Insert</b> menu. <p class=tl>
-or-</P></li>
<li>
From ClassView, click the right mouse button on the project-level folder, and select <b>New ATL Object</b> from the pop-up menu. <p class=tl>
The ATL Object Wizard opens.</P></li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If this is an MFC project to which you have not previously added an ATL object, you'll be prompted to specify whether you want ATL support added to your project. Clicking <b>Yes</b> opens the ATL Object Wizard.</p>
<p>
<img src="vc307q1.gif" border=0></P><p>
The ATL Object Wizard displays the categories of objects on the left and the icons of the objects in each category on the right. Choose a category; the wizard displays the icons of the objects in that category.</p>
<p>
<b>ATL Objects</b>
<ul type=disc>
<li>
<b>Simple Object</b> adds a minimal COM object. <br><br></li>
<li>
<b>Add-in Object</b> adds a COM object that extends the Visual C++ shell with your own toolbar button and event handling. This object offers the same functionality as the one added by the <b>DevStudio Add-in Wizard</b> on the Visual C++ <b>File </b>menu, <b>New Projects</b> tab.<br><br></li>
<li>
<b>Internet Explorer Object</b> adds an object that supports the interfaces needed by Internet Explorer, but without support for a user interface.<br><br></li>
<li>
<b>Active Server Component</b> adds an object that can be used by the Active Server Pages feature of Internet Information Server (IIS).<br><br></li>
<li>
<b>MMC SnapIn</b> creates a framework for a Microsoft Management Console Snap-In object. See <a href="vcconmmcsnapinwizard.htm">MMC Snap-In Wizard</a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_slate_purpose_of_the_console">
</object><a href=JavaScript:alink_2.Click()>Microsoft Management Console</a> in the <i>Platform SDK</i> for more information.<br><br></li>
<li>
<b>MS Transaction Server Component</b> includes the header files needed by the Microsoft Transaction Server and defines the object as nonaggregatable.<br><br></li>
<li>
<b>Component Registrar Object</b> adds an object that implements the <b>IComponentRegistrar</b> interface. This object can be used to register any objects in your in-process server that declare the <a href="_atl_declare_object_description.htm">DECLARE_OBJECT_DESCRIPTION</a> macro. Using this object you can register and/or unregister objects individually, unlike <b>DllRegisterServer</b> and <b>DllUnregisterServer</b> which register and unregister all objects in your server. You may also get a list of objects in the server and their descriptions with the <b>IComponentRegistrar::GetComponents</b> method.</li>
</ul>
<p>
<b>ATL Controls</b>
<ul type=disc>
<li>
<b>Full Control</b> adds an object that supports the interfaces for all containers. <br><br></li>
<li>
<b>Lite Control</b> adds an object that supports the interfaces needed by Internet Explorer, including support for a user interface. <br><br></li>
<li>
<b>Property Page</b> adds an object that implements a property page.<br><br></li>
<li>
<b>Composite Control</b> adds a control that can host many other controls.<br><br></li>
<li>
<b>HTML Control</b> adds a control with DHTML functionality and displays an HTML web page in its user interface.<br><br></li>
<li>
<b>Lite Composite Control</b> adds a composite control that can host other controls, but it supports only the interfaces needed by Internet Explorer. <br><br></li>
<li>
<b>Lite HTML Control</b> adds a control with DHTML functionality and displays an HTML web page in its user interface, but it supports only the interfaces needed by Internet Explorer.</li>
</ul>
<p>
<b>ATL Miscellaneous</b>
<ul type=disc>
<li>
<b>Dialog </b>adds an object that implements a dialog box. </li>
</ul>
<p>
<b>Data Access</b>
<ul type=disc>
<li>
<b>Provider</b> adds code to support OLE DB provider templates.<br><br></li>
<li>
<b>Consumer</b>  adds code to support OLE DB consumer templates.</li>
</ul>
<p>
Double-click the control or object you want to insert. The ATL Object Wizard displays a dialog box showing options that apply to your object or control.</p>
<p>
<img src="cr0103s.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Depending on the type of object or control you select, some of the pages and options described below may not be available.</p>
<p>
In the <b>Names</b> page, enter class and file names. By default, the name you enter for <b>Short name</b> becomes the root for all other names in this page. You can enter your own names rather than accept these defaults.
<ul type=disc>
<li>
<b>Class</b> is the name of the class implementing your object.<br><br></li>
<li>
<b>CoClass</b> is the name of the component class that contains a list of interfaces supported by the object.<br><br></li>
<li>
<b>Interface</b> is the name of the interface you create for your object. This interface contains your custom methods. For Full Controls, Internet Explorer Controls, Simple Objects, Internet Explorer Objects, Add-in Objects, Active Server Components, and Microsoft Transaction Server Components, the wizard creates an interface with the name you specify. For Property Page objects, no custom interface is created, and the wizard assigns <b>IUnknown</b> as the object interface. Dialog objects do not create an interface. <br><br></li>
<li>
<b>Type</b> is a description string for the object that goes into the registry.<br><br></li>
<li>
<b>ProgID</b> is a name that containers can use instead of the CLSID of the object.</li>
</ul>
<p>
In the <b>Attributes</b> page, select a threading model, interface type, and aggregation support:
<ul type=disc>
<li>
Choose <b>Dual Interfaces</b> if you want the object's interfaces to derive from <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_Overview_of_the_IDispatch_Interface">
</object><a href=JavaScript:alink_3.Click()>IDispatch</a> as well as support your custom functions (the vtable has custom interface functions plus late-binding <b>IDispatch</b> methods). This allows both COM clients and Automation controllers to access your object.<br><br></li>
<li>
Choose <b>Custom Interfaces</b> to derive the object's interfaces from <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_IUnknown">
</object><a href=JavaScript:alink_4.Click()>IUnknown</a> (the vtable has custom interface functions and not <b>IDispatch</b> methods). A custom interface can be faster than a dual interface, especially across process boundaries.<br><br></li>
<li>
Choose <b>Only</b> for aggregation if you want the object to be instantiated only if it is being aggregated.<br><br></li>
<li>
Check the <b>Support ISupportErrorInfo</b> check box to have your object implement the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_ISupportErrorInfo_Interface">
</object><a href=JavaScript:alink_5.Click()>ISupportErrorInfo</a> interface for error reporting.<br><br></li>
<li>
Check the <b>Support Connection Points</b> check box to add support for connection points to the object. The wizard will automatically derive the object's class from <a href="_atl_iconnectionpointcontainerimpl.htm">IConnectionPointContainerImpl</a>.<br><br></li>
<li>
Check the <b>Free Threaded Marshaler</b> check box to create a free-threaded marshaler object to efficiently marshal interface pointers between threads in the same process.</li>
</ul>
<p>
In the <b>Miscellaneous</b> page, choose the features for the object. 
<ul type=disc>
<li>
Choose <b>Opaque</b> to make your control completely opaque, so that none of the container shows behind the control boundaries. This helps the container draw the control more quickly. The entire control rectangle passes to your control class's <b>OnDraw</b> method. This option sets the <b>VIEWSTATUS_OPAQUE</b> bit in the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_VIEWSTATUS">
</object><a href=JavaScript:alink_6.Click()>VIEWSTATUS</a> enumeration.<br><br></li>
<li>
Choose <b>Solid Background</b> to make the control's background a solid color and not a pattern. This option is meaningful only if the <b>Opaque</b> is option is also selected. This option sets the <b>VIEWSTATUS_SOLIDBKGND</b> bit in the <b>VIEWSTATUS</b> enumeration.<br><br></li>
<li>
Choose <b>Invisible at runtime</b> to make your control invisible at run time. You can use invisible controls to perform operations in the background, such as firing events at timed intervals.<br><br></li>
<li>
Choose <b>Acts like button</b> to enable your control to act like a button, in particular to display itself as the default button based on the ambient property <a href="_atl_ccomcontrol.3a3a.getambientdisplayasdefault.htm">DisplayAsDefault</a>. <br><br></li>
<li>
Choose <b>Acts like label</b> to enable your control to replace the container's native label.<br><br></li>
<li>
Choose <b>Add control based on</b> to superclass one of the standard window classes. The drop-down list contains window class names defined by Windows. When you choose one of these, the wizard adds a <a href="_atl_ccontainedwindow.htm">CContainedWindow</a> member variable to your control's class. <b>CContainedWindow::Create</b> will superclass the window class you specify.<br><br></li>
<li>
Choose <b>Normalize DC</b> to have your control create a normalized device context when it is called to draw itself. This standardizes the control's appearance, but is less efficient.<br><br></li>
<li>
Choose <b>Insertable</b> to have your control appear in the <b>Insert Object</b> dialog box of applications such as Microsoft Word and Microsoft Excel. Your control can then be inserted by any application that supports embedded objects through the <b>Insert Object</b> dialog box.<br><br></li>
<li>
Choose <b>Windowed Only</b> to force your control to be windowed, even in containers that support windowless objects. If you do not select this option, your control will automatically be windowless in containers that support windowless objects, and automatically be windowed in containers that do not support windowless objects. </li>
</ul>
<p>
In the <b>Stock Properties</b> page, select the stock properties you want the object to support, such as <b>Caption</b> or <b>Border Color</b>. You can select all the stock properties at once by clicking the <b>&gt;&gt;</b> button.</p>
<p>
In the <b>Strings</b> page, enter names for the property page object.
<ul type=disc>
<li>
<b>Title</b> is the text that appears on the property page's tab.<br><br></li>
<li>
<b>Doc String</b> is a text string describing the page. The property frame could use the description in a status line or tool tip. The standard property frame currently does not use this string.<br><br></li>
<li>
<b>Helpfile</b> is the name of the associated help file. The help file name should be the simple name without a path. When the user presses Help, the frame opens the help file in the directory named in the value of the HelpDir key in the property page registry entries under its CLSID.</li>
</ul>
<p>
In the <b>Add-in</b> page, choose features for the Add-in object. 
<ul type=disc>
<li>
<b>Provide Toolbar</b> creates a toolbar button the user can click to carry out a command added by your Add-in object.<br><br></li>
<li>
<b>Command Name</b> is the name of the command added to Visual C++ by your Add-in object. This name appears in the list on the <b>Add-ins and Macro Files</b> tab of the <b>Tools</b> menu, <b>Customize </b>option.<br><br></li>
<li>
<b>Method Name</b> is the name of the method that implements the command. <br><br></li>
<li>
<b>Toolbar Text</b> is the text that you want to appear on the button you add to the toolbar to carry out your command.<br><br></li>
<li>
<b>Status bar Text</b> is the text you want to appear on the status line when your command is executing.<br><br></li>
<li>
<b>Tooltips Text</b> is the text you want to appear in the tooltip message for your toolbar button when the user's mouse hovers over the button.<br><br></li>
<li>
<b>Application Events</b> allows your Add-in object to catch application events.<br><br></li>
<li>
<b>Debugger Events</b> allows your Add-in object to catch debugger events.</li>
</ul>
<p>
In the <b>ASP</b> page, choose features for the Active Server component.
<ul type=disc>
<li>
<b>OnStartPage/OnEndPage</b>, checked by default, adds the <b>OnStartPage</b> and <b>OnEndPage</b> methods to the object.<br><br></li>
<li>
If <b>OnStartPage/OnEndPage</b> is checked, you can choose which <b>Intrinsic Objects</b> you want to have available as member pointers in the object's class. By default, each intrinsic object is checked.</li>
</ul>
<p>
In the <b>MTX</b> page, choose features for the Microsoft Transaction Server component. <b>Dual</b> and <b>Custom</b> choose the kind of interface implemented, and <b>Support Connection Points</b> adds support for connection points. These options are the same as the ones in the <b>Attributes</b> page for other kinds of objects. In addition, the <b>MTX</b> page has two unique options:
<ul type=disc>
<li>
<b>Support IObjectControl</b> provides access to the three <b>IObjectControl</b> methods: <b>Activate</b>, <b>CanBePooled,</b> and <b>Deactivate</b>.<br><br></li>
<li>
<b>Can be pooled</b> tells the Transaction Server run-time environment that your object should be returned to an instance pool after deactivation, rather than destroyed. This option cannot be selected unless the <b>Support IObjectControl</b> option is also selected.</li>
</ul>
</font></BODY>
</HTML>

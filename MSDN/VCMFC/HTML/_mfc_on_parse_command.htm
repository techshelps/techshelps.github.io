<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ON_PARSE_COMMAND</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_on_parse_command"></a>ON_PARSE_COMMAND</h1>
<p>
<b>ON_PARSE_COMMAND( </b><i>FnName</i><b>, </b><i>mapClass</i><b>, </b><i>Args</i><b> )</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>FnName</i></p>
<p class=indent>
The name of the member function. Also the name of the command.</p>
<p class=dt>
<i>mapClass</i></p>
<p class=indent>
The class name to map the function to.</p>
<p class=dt>
<i>Args</i></p>
<p class=indent>
The arguments that map to the parameter’s <i>FnName</i>. See Remarks for a list of symbols.</p>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>ON_PARSE_COMMAND</b> macro is used in a parse map to define a command to a <a href="_mfc_chttpserver.htm">CHttpServer</a> object from a client.</p>
<p>
The member function identified by <i>FnName</i> must take a pointer to the <a href="_mfc_chttpservercontext.htm">CHttpServerContext</a> as its first parameter. <i>FnName</i> is of the type <b>LPSTR</b>, and is identified by the symbol <b>ITS_LPSTR</b> in the parse map; that is, <i>FnName</i> points to a string containing the member function in class <i>mapClass</i>. </p>
<p>
The parameter <i>Args</i> can take one of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Symbol</b></td>
<td class=label width=77%><b>Type or Comment</b></td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_EMPTY</b></td>
<td width=77%><i>Args</i> cannot be blank. Use <b>ITS_EMPTY</b> if you have no arguments.</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_PSTR</b></td>
<td width=77%>A pointer to a string.</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_RAW</b></td>
<td width=77%>The exact, raw data sent to the ISAPI extension. Do not use <b>ITS_RAW</b> with any other parameter type; to do so will cause an <b>ASSERT</b>. See Remarks for an example.</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_I2</b></td>
<td width=77%>a short</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_I4</b></td>
<td width=77%>a long</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_R4</b></td>
<td width=77%>a float</td>
</tr>
<tr valign=top>
<td width=23%><b>ITS_R8</b></td>
<td width=77%>a double</td>
</tr>
</table><br>
<p class=label>
<b>Examples</b></p>
<pre><code>// The following&nbsp; example Illustrates extracting
//&nbsp; a string and a short sent to the server:

BEGIN_PARSE_MAP(CDerivedClass, CHttpServer)
 &nbsp; DEFAULT_PARSE_COMMAND(Myfunc, CDerivedClass)
 &nbsp; ON_PARSE_COMMAND(Myfunc, CDerivedClass, ITS_PSTR
 &nbsp;&nbsp; ITS_I2)
 &nbsp; ON_PARSE_COMMAND_PARAMS("string integer=42")
 &nbsp; ON_PARSE_COMMAND(Myfunc2, CDerivedClass, ITS_PSTR
 &nbsp;&nbsp; ITS_I2 ITS_PSTR)
 &nbsp; ON_PARSE_COMMAND_PARAMS("string integer
 &nbsp;&nbsp; string2='Default value'")
END_PARSE_MAP(CDerivedClass)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use single quotes if you incorporate spaces into the default values for optional <b>ITS_PSTR</b>s.</p>
<pre><code>void Myfunc(CHttpServerContext* pCtxt, LPTSTR pszName, int nNumber);
void Myfunc2(CHttpServerContext* pCtxt, LPTSTR pszName, int nNumber, LPTSTR pszTitle);


// The following&nbsp; example Illustrates extracting 
// raw data sent to the server:

BEGIN_PARSE_MAP(CDerivedClass, CHttpServer)
 &nbsp; DEFAULT_PARSE_COMMAND(Myfunc, CDerivedClass)
 &nbsp; ON_PARSE_COMMAND(Myfunc, CDerivedClass, ITS_RAW)
END_PARSE_MAP(CDerivedClass)
</code></pre>
<p>
with the function prototype as follows:</p>
<pre><code>void CDerivedClass::Myfunc(CHttpServerContext* pCtxt, void* pVoid, DWORD dwBytes);
</code></pre>
<p>
In the second example above, the <code>pVoid</code> pointer points to the data sent to your extension.&nbsp; The <code>dwBytes</code> parameter has a count of bytes at <code>pVoid</code>.&nbsp; If <code>dwBytes</code> is zero, <code>pVoid</code> may not point to anything.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The handlers for a parse map command must take a pointer to a <b>CHttpServerContext</b> as the first parameter, and the parameters must be declared in the same order in which they're defined in <b>ON_PARSE_COMMAND</b>.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_begin_parse_map.htm">BEGIN_PARSE_MAP</a>, <a href="_mfc_end_parse_map.htm">END_PARSE_MAP</a>, <a href="_mfc_on_parse_command_params.htm">ON_PARSE_COMMAND_PARAMS</a>, <a href="_mfc_default_parse_command.htm">DEFAULT_PARSE_COMMAND</a>, <a href="_mfc_chttpserver.htm">CHttpServer</a></p>
</font></BODY>
</HTML>

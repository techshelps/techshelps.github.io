<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObArray::operator [ ]</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cobarray.3a3a.operator_.5b_5d"></a><sup></sup>CObArray::operator [ ]  </h1>
<p>
<b>CObject*&amp;</b> <b>operator</b> <b>[](</b> <b>int</b> <i>nIndex</i> <b>);</b></p>
<p>
<b>CObject*</b> <b>operator</b> <b>[](</b> <b>int</b> <i>nIndex</i> <b>)</b> <b>const;</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
These subscript operators are a convenient substitute for the <b>SetAt</b> and <b>GetAt</b> functions. </p>
<p>
The first operator, called for arrays that are not <b>const</b>, may be used on either the right (r-value) or the left (l-value) of an assignment statement. The second, called for <b>const</b> arrays, may be used only on the right. </p>
<p>
The Debug version of the library asserts if the subscript (either on the left or right side of an assignment statement) is out of bounds.</p>
<p>
The following table shows other operators that are similar to <b>CObArray::operator []</b>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Class</b></td>
<td class=label width=72%><b>Operator</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cbytearray.htm">CByteArray</a></td>
<td width=72%><b>BYTE&amp; operator []( int </b><i>nIndex</i><b> );<br>
BYTE operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cdwordarray.htm">CDWordArray</a></td>
<td width=72%><b>DWORD&amp; operator []( int </b><i>nIndex</i><b> );<br>
DWORD operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cptrarray.htm">CPtrArray</a></td>
<td width=72%><b>void*&amp; operator []( int </b><i>nIndex</i><b> );<br>
void* operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cstringarray.htm">CStringArray</a></td>
<td width=72%><b>CString&amp; operator []( int </b><i>nIndex</i><b> );<br>
CString operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cuintarray.htm">CUIntArray</a></td>
<td width=72%><b>UINT&amp; operator []( int </b><i>nIndex</i><b> );<br>
UINT operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cwordarray.htm">CWordArray</a></td>
<td width=72%><b>WORD&amp; operator []( int </b><i>nIndex</i><b> );<br>
WORD operator []( int </b><i>nIndex</i><b> ) const;</b></td>
</tr>
</table><br>
<p class=label>
<b>Example</b></p>
<p>
See <a href="_mfc_coblist.3a3a.coblist.htm">CObList::CObList</a> for a listing of the <code>CAge</code> class used in all collection examples.</p>
<pre><code>// example for CObArray::operator []

CObArray array;
CAge* pa;

array.Add( new CAge( 21 ) ); // Element 0
array.Add( new CAge( 40 ) ); // Element 1
pa = (CAge*)array[0]; // Get element 0
ASSERT( *pa == CAge( 21 ) ); // Get element 0
array[0] = new CAge( 30 ); // Replace element 0
delete pa;
ASSERT( *(CAge*) array[0] == CAge( 30 ) ); // Get new element 0
</code></pre>
<p>
<a href="_mfc_cobarray.htm">CObArray Overview</a>  |&nbsp; <a href="_mfc_cobarray_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cobarray.3a3a.getat.htm">CObArray::GetAt</a>, <a href="_mfc_cobarray.3a3a.setat.htm">CObArray::SetAt</a></p>
</font></BODY>
</HTML>

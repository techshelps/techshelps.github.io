<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Do I Add Menu Items, Control Bar Buttons, and a Property Sheet to the Snap-In Object?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefhowdoiaddmenuitemscontrolbarbuttonspropertysheettosnapinobject"></a>How Do I Add Menu Items, Control Bar Buttons, and a Property Sheet to the Snap-In Object?</h1>
<p>
There are several user interface (UI) components of the MMC snap-in object that can be customized. Some of these areas, such as toolbar buttons and menu items, affect components of the MMC application. The final component is a standard property sheet that displays the properties, of the snap-in object, that can be customized by the user. By default, the MMC Snap-In wizard does not generate any custom UI elements. However, there are placeholders throughout the snap-in object code that indicate where your custom UI elements can go.</p>
<h2>Adding Custom Context Menu Items</h2>
<p>
One area you can customize is the context menu for the items of the snap-in object. Four menu items are available for customization: Top, New, Task, and View. The Snap-In wizard creates a menu resource with placeholders for the four slots.</p>
<p>
Because the menu resource is known by the snap-in object, add any custom menu items needed under the appropriate slot and they automatically appear in the context menu of any snap-in item. The snap-in item knows which menu resource to use because the data object contains the following declaration:</p>
<pre><code>SNAPINMENUID(IDR_MMCSNAP_MENU)
</code></pre>
<p>
The Platform SDK provides an interface (<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_slate_iextendcontextmenu">
</object><a href=JavaScript:alink_1.Click()>IExtendContextMenu</a>) to customize the context menu of a snap-in item. In most cases, you don't need to call this interface directly, but if the snap-in is advanced, more information on this interface is available in the <i>Platform SDK</i>.</p>
<h2>Adding Control Bar Buttons</h2>
<p>
If your snap-in object uses a custom toolbar, you can add any number of buttons to it once the toolbar resource has been created. You can then provide handlers for each button to handle custom tasks. For more information, see <a href="vcrefhowdoiaddtoolbarresourcetosnapinobject.htm">How Do I Add a Toolbar Resource to the Snap-In Object?</a>.</p>
<p>
The Platform SDK provides an interface (<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_slate_iextendcontrolbar">
</object><a href=JavaScript:alink_2.Click()>IExtendControlbar</a>) to customize the control bar of a snap-in. In most cases, you don't need to call this interface directly, but if the snap-in is advanced, more information on this interface is available in the <i>Platform SDK</i>.</p>
<h2>Adding a Property Sheet</h2>
<p>
Each snap-in item can display a standard property sheet, accessible from the context menu when the user right-clicks the mouse.</p>
<p>
By default, the MMC Snap-In wizard does not provide the implementation for this functionality. However, if you select the <b>IExtendPropertySheet</b> check box, the wizard creates a default property page class (<code>CSnapNamePage</code>, derived from <a href="vcrefcsnapinpropertypageimpl.htm">CSnapInPropertyPageImpl</a>) and a dialog resource (IDD_<i>SnapName</i>) for the property sheet.</p>
<p>
To complete this feature, add controls that allow the user to modify the properties of the snap-in item.</p>
<p>
To add additional pages to the property sheet, you need a new property page class, a new dialog resource, and additional code in the <b>CreatePropertyPages</b> method of your data class. In this example, the new class is called <code>CMMCSnapPage2</code> and the dialog resource is <code>IDD_MMCSNAP2</code>.</p>
<p>
Once you have the necessary classes and resources, add them to the <b>CreatePropertyPages</b> method to create and add the new property page to the sheet. For example, the following code adds a new page (<code>pPage2</code>), implemented with the new <code>CMMCSnapPage2</code> class, to the snap-in object:</p>
<pre><code>CMMCSnapPage2* pPage2 = new CMMCSnapPage2(_T("MMCSnap2"));
lpProvider-&gt;AddPage(pPage2-&gt;Create());
</code></pre>
<p>
The Platform SDK provides an interface (<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_slate_iextendpropertysheet">
</object><a href=JavaScript:alink_3.Click()>IExtendPropertySheet</a>) to customize the property sheet of a snap-in. In most cases, you don't need to call this interface directly, but if the snap-in is advanced, more information on this interface is available in the <i>Platform SDK</i>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding the Run Button Handler</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vchowaddingrunbuttonhandler"></a>Adding the Run Button Handler</h1>
<p>
You must add a handler function for the <b>Run</b> button you created in the dialog resource file.</p>
<p class=label>
<b>To create a Run button handler</b>
<ul type=disc>
<li>
In the Dialog editor, press <code>CTRL</code> and double-click on the <b>Run</b> button. The <b>CTestProvDlg::OnRun</b> function appears in a source window.<br><br></li>
<li>
Add your handler code to the <b>CTestProvDlg::OnRun</b> function.</li>
</ul>
<p>
To create the handler, you must use the following OLE DB Consumer Template classes:
<ul type=disc>
<li>
<a href="vcrefccommand.htm">CCommand</a><br><br></li>
<li>
<a href="vcrefcdatasource.htm">CDataSource</a><br><br></li>
<li>
<a href="vcrefcsession.htm">CSession</a> </li>
</ul>
<p>
Each of these classes corresponds to a COM object in the provider.</p>
<p>
Add the code shown below. In this handler code, the <b>CCommand</b> object takes a <b>CProvider</b> class as a template parameter. This parameter represents the bindings used by the provider to access the data.</p>
<pre><code>///////////////////////////////////////////////////////////////////////
// TestProvDlg.cpp

void CTestProvDlg::OnRun()
{
   CCommand&lt;CAccessor&lt;CProvider&gt;&gt; table;
   CDataSource source;
   CSession   session;

   if (source.Open(“MyProvider.MyProvider.1”, NULL) != S_OK)
      return;

   if (session.Open(source) != S_OK)
      return;

   if (table.Open(session, _T("c:\\public\\testprf2\\gloo.txt")) != S_OK)
      return;

   while (table.MoveNext() == S_OK)
   {
      m_ctlString1.AddString(table.szCommand);
      m_ctlString2.AddString(table.szText);
   }
}
</code></pre>
<p>
The handler uses the three <b>Open</b> calls, shown below, which correspond to three COM objects in the provider. It locates the provider by using its <b>ProgID</b>. You can obtain the <b>ProgID</b> from the system registry or by looking in the provider <code>rgs</code> file (<code>MyProvider.rgs</code> for the simple provider shown in <a href="vchowimplementingsimpleread-onlyprovider.htm">Implementing a Simple Read-Only Provider</a>). The provider opens a text file named <code>gloo.txt</code>, which contains an even number of strings separated by carriage returns. <b>Open</b> passes the file pathname to the provider as a string to the provider.</p>
<pre><code>   if (source.Open(“MyProvider.MyProvider.1”, NULL) != S_OK)
      return;

   if (session.Open(source) != S_OK)
      return;

   if (table.Open(session, _T("c:\\public\\testprf2\\gloo.txt")) != S_OK)
      return;
</code></pre>
<p>
To fetch the data, the handler calls <code>table.MoveNext</code>, as shown below. When there are no more rows, the provider returns <b>DB_S_ENDOFROWSET</b> and the loop terminates. The loop control statement compares the return value to <b>S_OK</b>. If the code used the <b>SUCCEEDED</b> macro, the loop would not terminate because <b>DB_S_ENDOFROWSET</b> is considered a successful return code.</p>
<pre><code>   while (table.MoveNext() == S_OK)
   {
      m_ctlString1.AddString(table.szCommand);
      m_ctlString2.AddString(table.szText);
   }
</code></pre>
<p>
The consumer is now ready to test with the simple provider (constructed in <a href="vchowimplementingsimpleread-onlyprovider.htm">Implementing a Simple Read-Only Provider</a>).</p>
<p>
The <a href="vchowmodifyingconsumerforusewithenhancedprovider.htm">next topic</a> shows how to modify the consumer for use with an <a href="vchowaddingirowsetlocateinterface.htm">enhanced provider</a> that implements the <b>IRowsetLocate</b> interface.</p>
<p>
<a href="vchowimplementinganoledbtemplateconsumer.htm">Back to Implementing an OLE DB Template Consumer</a></p>
</font></BODY>
</HTML>

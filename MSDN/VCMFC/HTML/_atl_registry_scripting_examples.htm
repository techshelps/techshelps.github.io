<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registry Scripting Examples</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_registry_scripting_examples"></a>Registry Scripting Examples</h1>
<p>
The scripting examples in this article demonstrate how to add a key to the system registry; register the Registrar COM server; and specify multiple parse trees.</p>
<h2>Add a Key to HKEY_CURRENT_USER</h2>
<p>
The following parse tree illustrates a simple script that adds a single key to the system registry. In particular, the script adds the key, <code>MyVeryOwnKey</code>, to <code>HKEY_CURRENT_USER</code>. It also assigns the default string value of <code>HowGoesIt?</code> to the new key:</p>
<pre><code>HKEY_CURRENT_USER
{
 &nbsp; 'MyVeryOwnKey' = s 'HowGoesIt?'
}
</code></pre>
<p>
This script can easily be extended to define multiple subkeys as follows:</p>
<pre><code>HKCU
{
 &nbsp; 'MyVeryOwnKey' = s 'HowGoesIt?'
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; 'HasASubkey'
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'PrettyCool?' = d '55'
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val 'ANameValue' = s 'WithANamedValue'
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
</code></pre>
<p>
Now, the script adds a subkey, <code>HasASubkey</code>, to <code>MyVeryOwnKey</code>. To this subkey, it adds both the <code>PrettyCool?</code> subkey (with a default <b>DWORD</b> value of 55) and the <code>ANameValue</code> named value (with a string value of <code>WithANamedValue)</code>.</p>

<h2><a name="_atl_register_the_registrar_com_server"></a>Register the Registrar COM Server</h2>
<p>
The following script registers the Registrar COM server itself.</p>
<pre><code>HKCR
{
 &nbsp; ATL.Registrar = s 'ATL 2.0 Registrar Class'
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; CLSID = s '{44EC053A-400F-11D0-9DCD-00A0C90391D3}'
 &nbsp; }
 &nbsp; NoRemove CLSID
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; ForceRemove {44EC053A-400F-11D0-9DCD-00A0C90391D3} =
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s 'ATL 2.0 Registrar Class'
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProgID = s 'ATL.Registrar'
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InprocServer32 = s '%MODULE%'
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val ThreadingModel = s 'Apartment'
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
</code></pre>
<p>
At run time, this parse tree adds the <code>ATL.Registrar</code> key to <code>HKEY_CLASSES_ROOT</code>. To this new key, it then:
<ul type=disc>
<li>
Specifies <code>ATL Registrar 2.0 Class</code> as the key's default string value.<br><br></li>
<li>
Adds <code>CLSID</code> as a subkey.<br><br></li>
<li>
Specifies <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code> for <code>CLSID</code>. (This value is the Registrar's CLSID for use with <b>CoCreateInstance</b>.)</li>
</ul>
<p>
Since <code>CLSID</code> is shared, it should not be removed in Unregister mode. The statement, <code>NoRemove CLSID</code>, does this by indicating that <code>CLSID</code> should be opened in Register mode and ignored in Unregister mode.</p>
<p>
The <code>ForceRemove</code> statement provides a housekeeping function by removing a key and all its subkeys before recreating the key. This can be useful if the names of the subkeys have changed. In this scripting example, <code>ForceRemove</code> checks to see if <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code> already exists. If it does, <code>ForceRemove</code>:
<ul type=disc>
<li>
Recursively deletes <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code> and all of its subkeys.<br><br></li>
<li>
Recreates <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code>.<br><br></li>
<li>
Adds <code>ATL Registrar 2.0 Class</code> as the default string value for <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code>.</li>
</ul>
<p>
The parse tree now adds two new subkeys to <code>{44EC053A-400F-11D0-9DCD-00A0C90391D3}</code>. The first key, <code>ProgID</code>, gets a default string value that is the ProgID. The second key, <code>InprocServer32</code>, gets a default string value, <code>%MODULE%</code>, that is a preprocessor value explained in the section, <a href="_atl_using_replaceable_parameters_.28.the_registrar.92.s_preprocessor.29.htm">Using Replaceable Parameters (The Registrar's Preprocessor)</a>, of this article. <code>InprocServer32</code> also gets a named value, <code>ThreadingModel</code>, with a string value of <code>Apartment</code>.</p>
<h2>Specify Multiple Parse Trees</h2>
<p>
In order to specify more than one parse tree in a script, simply place one tree at the end of another. For example, the following script adds the key, <code>MyVeryOwnKey</code>, to the parse trees for both <code>HKEY_CLASSES_ROOT</code> and <code>HKEY_CURRENT_USER</code>:</p>
<pre><code>HKCR
{
 &nbsp; 'MyVeryOwnKey' = s 'HowGoesIt?'
}
HKEY_CURRENT_USER
{
 &nbsp; 'MyVeryOwnKey' = s 'HowGoesIt?'
}
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In a Registrar script, 4K is the maximum token size. (A token is any recognizable element in the syntax). In the previous scripting example, <code>HKCR</code>, <code>HKEY_CURRENT_USER</code>, <code>'MyVeryOwnKey'</code>, and <code>'HowGoesIt?'</code> are all tokens.</p>
</font></BODY>
</HTML>

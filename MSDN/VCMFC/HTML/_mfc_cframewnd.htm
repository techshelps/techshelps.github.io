<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CFrameWnd</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cframewnd"></a><sup></sup>CFrameWnd</h1>
<p>
<img src="cframewn.gif" border=0></p>
<p>
The <b>CFrameWnd</b> class provides the functionality of a Windows single document interface (SDI) overlapped or pop-up frame window, along with members for managing the window. </p>
<p>
To create a useful frame window for your application, derive a class from <b>CFrameWnd</b>. Add member variables to the derived class to store data specific to your application. Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window. </p>
<p>
There are three ways to construct a frame window:
<ul type=disc>
<li>
Directly construct it using <a href="_mfc_cframewnd.3a3a.create.htm">Create</a>.<br><br></li>
<li>
Directly construct it using <a href="_mfc_cframewnd.3a3a.loadframe.htm">LoadFrame</a>.<br><br></li>
<li>
Indirectly construct it using a document template.</li>
</ul>
<p>
Before you call either <b>Create</b> or <b>LoadFrame</b>, you must construct the frame-window object on the heap using the C++ <b>new</b> operator. Before calling <b>Create</b>, you can also register a window class with the <a href="_mfc_afxregisterwndclass.htm">AfxRegisterWndClass</a> global function to set the icon and class styles for the frame.</p>
<p>
Use the <b>Create</b> member function to pass the frame’s creation parameters as immediate arguments.</p>
<p>
<b>LoadFrame</b> requires fewer arguments than <b>Create</b>, and instead retrieves most of its default values from resources, including the frame’s caption, icon, accelerator table, and menu. To be accessible by <b>LoadFrame</b>, all these resources must have the same resource ID (for example, <b>IDR_MAINFRAME</b>).</p>
<p>
When a <b>CFrameWnd</b> object contains views and documents, they are created indirectly by the framework instead of directly by the programmer. The <b>CDocTemplate</b> object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document. The parameters of the <b>CDocTemplate</b> constructor specify the <b>CRuntimeClass</b> of the three classes involved (document, frame, and view). A <b>CRuntimeClass</b> object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the multiple document interface (MDI) Window New command).</p>
<p>
A frame-window class derived from <b>CFrameWnd</b> must be declared with <b>DECLARE_DYNCREATE</b> in order for the above <b>RUNTIME_CLASS</b> mechanism to work correctly.</p>
<p>
A <b>CFrameWnd</b> contains default implementations to perform the following functions of a main window in a typical application for Windows:
<ul type=disc>
<li>
A <b>CFrameWnd</b> frame window keeps track of a currently active view that is independent of the Windows active window or the current input focus. When the frame is reactivated, the active view is notified by calling <b>CView::OnActivateView</b>.<br><br></li>
<li>
Command messages and many common frame-notification messages, including those handled by the <b>OnSetFocus</b>, <b>OnHScroll</b>, and <b>OnVScroll</b> functions of <b>CWnd</b>, are delegated by a <b>CFrameWnd</b> frame window to the currently active view.<br><br></li>
<li>
The currently active view (or currently active MDI child frame window in the case of an MDI frame) can determine the caption of the frame window. This feature can be disabled by turning off the <b>FWS_ADDTOTITLE</b> style bit of the frame window.<br><br></li>
<li>
A <b>CFrameWnd</b> frame window manages the positioning of the control bars, views, and other child windows inside the frame window’s client area. A frame window also does idle-time updating of toolbar and other control-bar buttons. A <b>CFrameWnd</b> frame window also has default implementations of commands for toggling on and off the toolbar and status bar.<br><br></li>
<li>
A <b>CFrameWnd</b> frame window manages the main menu bar. When a pop-up menu is displayed, the frame window uses the <b>UPDATE_COMMAND_UI</b> mechanism to determine which menu items should be enabled, disabled, or checked. When the user selects a menu item, the frame window updates the status bar with the message string for that command.<br><br></li>
<li>
A <b>CFrameWnd</b> frame window has an optional accelerator table that automatically translates keyboard accelerators.<br><br></li>
<li>
A <b>CFrameWnd</b> frame window has an optional help ID set with <b>LoadFrame</b> that is used for context-sensitive help. A frame window is the main orchestrator of semimodal states such as context-sensitive help (SHIFT+F1) and print-preview modes.<br><br></li>
<li>
A <b>CFrameWnd</b> frame window will open a file dragged from the File Manager and dropped on the frame window. If a file extension is registered and associated with the application, the frame window responds to the dynamic data exchange (DDE) open request that occurs when the user opens a data file in the File Manager or when the <b>ShellExecute</b> Windows function is called.<br><br></li>
<li>
If the frame window is the main application window (that is, <b>CWinThread::m_pMainWnd</b>), when the user closes the application, the frame window prompts the user to save any modified documents (for <b>OnClose</b> and <b>OnQueryEndSession</b>).<br><br></li>
<li>
If the frame window is the main application window, the frame window is the context for running WinHelp. Closing the frame window will shut down WINHELP.EXE if it was launched for help for this application.</li>
</ul>
<p>
Do not use the C++ <b>delete</b> operator to destroy a frame window. Use <b>CWnd::DestroyWindow</b> instead. The <b>CFrameWnd</b> implementation of <b>PostNcDestroy</b> will delete the C++ object when the window is destroyed. When the user closes the frame window, the default <b>OnClose</b> handler will call <b>DestroyWindow</b>.</p>
<p>
For more information on <b>CFrameWnd</b>, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Frame_Window_Topics">
</object><a href=JavaScript:alink_1.Click()>Frame Window Topics</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p>
<b>#include &lt;afxwin.h&gt;</b></p>
<p>
<a href="_mfc_cframewnd_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cwnd.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwnd.htm">CWnd</a>, <a href="_mfc_cmdiframewnd.htm">CMDIFrameWnd</a>, <a href="_mfc_cmdichildwnd.htm">CMDIChildWnd</a>, <a href="_mfc_cview.htm">CView</a>, <a href="_mfc_cdoctemplate.htm">CDocTemplate</a>, <a href="_mfc_cruntimeclass.htm">CRuntimeClass</a></p>
</font></BODY>
</HTML>

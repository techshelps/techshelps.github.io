<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRecordset::FlushResultSet</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_crecordset.3a3a.flushresultset"></a>CRecordset::FlushResultSet</h1>
<p>
<b>BOOL FlushResultSet( ) const;<br>
throw( CDBException );</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if there are more result sets to be retrieved; otherwise 0.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to retrieve the next result set of a predefined query (stored procedure), if there are multiple result sets. You should call <b>FlushResultSet</b> only when you are completely finished with the cursor on the current result set. Note that when you retrieve the next result set by calling <b>FlushResultSet</b>, your cursor is not valid on that result set; you should call the <a href="_mfc_crecordset.3a3a.movenext.htm">MoveNext</a> member function after calling <b>FlushResultSet</b>.</p>
<p>
If a predefined query uses an output parameter or input/output parameters, you must call <b>FlushResultSet</b> until it returns <b>FALSE</b> (the value 0), in order to obtain these parameter values.</p>
<p>
<b>FlushResultSet</b> calls the ODBC API function <b>SQLMoreResults</b>. If <b>SQLMoreResults</b> returns <b>SQL_ERROR</b> or <b>SQL_INVALID_HANDLE</b>, then <b>FlushResultSet</b> will throw an exception. For more information about <b>SQLMoreResults</b>, see the <i>ODBC SDK Programmer's Reference</i>.</p>
<p class=label>
<b>Example</b></p>
<p>
The following code assumes that <code>COutParamRecordset</code> is a <b>CRecordset</b>-derived object based on a predefined query with an input parameter and an output parameter, and having multiple result sets. Note the structure of the <a href="_mfc_crecordset.3a3a.dofieldexchange.htm">DoFieldExchange</a> override.</p>
<pre><code>// DoFieldExchange override
//
// Only necessary to handle parameter bindings.
// Don't use CRecordset-derived class with bound
// fields unless all result sets have same schema
// OR there is conditional binding code.

void COutParamRecordset::DoFieldExchange( CFieldExchange* pFX )
{
 &nbsp; pFX-&gt;SetFieldType( CFieldExchange::outputParam );
 &nbsp; RFX_Long( pFX, "Param1", m_nOutParamInstructorCount );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The "Param1" name here is a dummy name 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that is never used

 &nbsp; pFX-&gt;SetFieldType( CFieldExchange::inputParam );
 &nbsp; RFX_Text( pFX, "Param2", m_strInParamName );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The "Param2" name here is a dummy name 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that is never used

}


// Now implement COurParamRecordset.

// Assume db is an already open CDatabase object
COutParamRecordset rs( &amp;db );
rs.m_strInParamName = _T("Some_Input_Param_Value");

// Get the first result set
// NOTE: SQL Server requires forwardOnly cursor 
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type for multiple rowset returning stored 
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; procedures
rs.Open( CRecordset::forwardOnly, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "{? = CALL GetCourses( ? )}", 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CRecordset::readOnly);

// Loop through all the data in the first result set
while ( !rs.IsEOF( ) )
{
 &nbsp; CString strFieldValue;
 &nbsp; for( int nIndex = 0; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nIndex &lt; rs.GetODBCFieldCount( ); 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nIndex++ )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; rs.GetFieldValue( nIndex, strFieldValue );

 &nbsp;&nbsp;&nbsp;&nbsp; // TO DO: Use field value string.
 &nbsp; }
 &nbsp; rs.MoveNext( );
}

// Retrieve other result sets...
while( rs.FlushResultSet( ) )
{
 &nbsp; // must call MoveNext because cursor is invalid
 &nbsp; rs.MoveNext( );

 &nbsp; while ( !rs.IsEOF( ) )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; CString strFieldValue;
 &nbsp;&nbsp;&nbsp;&nbsp; for( int nIndex = 0; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nIndex &lt; rs.GetODBCFieldCount( ); 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nIndex++ )
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.GetFieldValue( nIndex, strFieldValue );

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TO DO: Use field value string.
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MoveNext( );
 &nbsp; }
}


// All result sets have been flushed. Cannot
// use the cursor, but the output parameter,
// m_nOutParamInstructorCount, has now been written.
// Note that m_nOutParamInstructorCount not valid until
// CRecordset::FlushResultSet has returned FALSE,
// indicating no more result sets will be returned.

// TO DO: Use m_nOutParamInstructorCount

// Cleanup
rs.Close( );
db.Close( );
</code></pre>
<p>
<a href="_mfc_crecordset.htm">CRecordset Overview</a>  |&nbsp; <a href="_mfc_crecordset_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cfieldexchange.3a3a.setfieldtype.htm">CFieldExchange::SetFieldType</a></p>
</font></BODY>
</HTML>

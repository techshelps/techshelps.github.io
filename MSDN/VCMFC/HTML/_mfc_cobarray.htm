<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObArray</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cobarray"></a><sup></sup>CObArray</h1>
<p>
<img src="cobarray.gif" border=0></p>
<p>
The <b>CObArray</b> class supports arrays of <b>CObject</b> pointers. These object arrays are similar to C arrays, but they can dynamically shrink and grow as necessary. </p>
<p>
Array indexes always start at position 0. You can decide whether to fix the upper bound or allow the array to expand when you add elements past the current bound. Memory is allocated contiguously to the upper bound, even if some elements are null.</p>
<p>
Under Win32, the size of a <b>CObArray</b> object is limited only to available memory.</p>
<p>
As with a C array, the access time for a <b>CObArray</b> indexed element is constant and is independent of the array size. </p>
<p>
<b>CObArray</b> incorporates the <b>IMPLEMENT_SERIAL</b> macro to support serialization and dumping of its elements. If an array of <b>CObject</b> pointers is stored to an archive, either with the overloaded insertion operator or with the <b>Serialize</b> member function, each <b>CObject</b> element is, in turn, serialized along with its array index. </p>
<p>
If you need a dump of individual <b>CObject</b> elements in an array, you must set the depth of the <b>CDumpContext</b> object to 1 or greater. </p>
<p>
When a <b>CObArray</b> object is deleted, or when its elements are removed, only the <b>CObject</b> pointers are removed, not the objects they reference.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before using an array, use <b>SetSize</b> to establish its size and allocate memory for it. If you do not use <b>SetSize</b>, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.</p>
<p>
Array class derivation is similar to list derivation. For details on the derivation of a special-purpose list class, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Collections">
</object><a href=JavaScript:alink_1.Click()>Collections</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must use the <b>IMPLEMENT_SERIAL</b> macro in the implementation of your derived class if you intend to serialize the array. </p>
<p>
<b>#include &lt;afxcoll.h&gt;</b></p>
<p>
<a href="_mfc_cobarray_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a> </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cstringarray.htm">CStringArray</a>, <a href="_mfc_cptrarray.htm">CPtrArray</a>, <a href="_mfc_cbytearray.htm">CByteArray</a>, <a href="_mfc_cwordarray.htm">CWordArray</a>, <a href="_mfc_cdwordarray.htm">CDWordArray</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCmdTarget::EndWaitCursor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ccmdtarget.3a3a.endwaitcursor"></a><sup></sup>CCmdTarget::EndWaitCursor  </h1>
<p>
<b>void</b> <b>EndWaitCursor(</b> <b>);</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this function after you have called the <b>BeginWaitCursor</b> member function to return from the hourglass cursor to the previous cursor. The framework also calls this member function after it has called the hourglass cursor.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// The following example illustrates the most common case
// of displaying the hourglass cursor during some lengthy
// processing of a command handler implemented in some
// CCmdTarget-derived class, such as a document or view.

void CMyView::OnSomeCommand()
{
 &nbsp; BeginWaitCursor(); // display the hourglass cursor

 &nbsp; // do some lengthy processing

 &nbsp; EndWaitCursor(); // remove the hourglass cursor
}

// The next example illustrates RestoreWaitCursor.
void CMyView::OnSomeCommand()
{
 &nbsp; BeginWaitCursor(); // display the hourglass cursor

 &nbsp; // do some lengthy processing

 &nbsp; // The dialog box will normally change the cursor to
 &nbsp; // the standard arrow cursor, and leave the cursor in
 &nbsp; // as the standard arrow cursor when the dialog box is
 &nbsp; // closed.
 &nbsp; CMyDialog dlg;
 &nbsp; dlg.DoModal();

 &nbsp; // It is necessary to call RestoreWaitCursor here in order
 &nbsp; // to change the cursor back to the hourglass cursor.
 &nbsp; RestoreWaitCursor();

 &nbsp; // do some more lengthy processing

 &nbsp; EndWaitCursor(); // remove the hourglass cursor
}

// In the above example, the dialog was clearly invoked between
// the pair of calls to BeginWaitCursor and EndWaitCursor.
// Sometimes it may not be clear whether the dialog is invoked 
// in between a pair of calls to BeginWaitCursor and EndWaitCursor.
// It is permissable to call RestoreWaitCursor, even if 
// BeginWaitCursor was not previously called.&nbsp; This case is 
// illustrated below, where CMyView::AnotherFunction does not
// need to know whether it was called in the context of an
// hourglass cursor.
void CMyView::AnotherFunction()
{
 &nbsp; // some processing ...

 &nbsp; CMyDialog dlg;
 &nbsp; dlg.DoModal();
 &nbsp; RestoreWaitCursor();

 &nbsp; // some more processing ...
}

// If the dialog is invoked from a member function of
// some non-CCmdTarget, then you can call CWinApp::DoWaitCursor
// with a 0 parameter value to restore the hourglass cursor.
void CMyObject::AnotherFunction()
{
 &nbsp; CMyDialog dlg;
 &nbsp; dlg.DoModal();
 &nbsp; AfxGetApp()-&gt;DoWaitCursor(0); // same as CCmdTarget::RestoreWaitCursor&nbsp;&nbsp; 
}
</code></pre>
<p>
<a href="_mfc_ccmdtarget.htm">CCmdTarget Overview</a>  |&nbsp; <a href="_mfc_ccmdtarget_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwaitcursor.htm">CWaitCursor</a>, <a href="_mfc_ccmdtarget.3a3a.beginwaitcursor.htm">CCmdTarget::BeginWaitCursor</a>, <a href="_mfc_ccmdtarget.3a3a.restorewaitcursor.htm">CCmdTarget::RestoreWaitCursor</a>, <a href="_mfc_cwinapp.3a3a.dowaitcursor.htm">CWinApp::DoWaitCursor</a></p>
</font></BODY>
</HTML>

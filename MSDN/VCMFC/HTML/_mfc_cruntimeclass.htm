<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRuntimeClass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cruntimeclass"></a>CRuntimeClass</h1>
<p>
<b>CRuntimeClass</b> does not have a base class.</p>
<p>
Each class derived from <b>CObject</b> is associated with a <b>CRuntimeClass</b> structure that you can use to obtain information about an object or its base class at run time. The ability to determine the class of an object at run time is useful when extra type checking of function arguments is needed, or when you must write special-purpose code based on the class of an object. Run-time class information is not supported directly by the C++ language.</p>
<p>
The structure has the following members:</p>
<p class=dt>
<b>LPCSTR m_lpszClassName</b></p>
<p class=indent>
A null-terminated string containing the ASCII class name.</p>
<p class=dt>
<b>int m_nObjectSize</b></p>
<p class=indent>
The size of the object, in bytes. If the object has data members that point to allocated memory, the size of that memory is not included. </p>
<p class=dt>
<b>UINT m_wSchema</b></p>
<p class=indent>
The schema number ( –1 for nonserializable classes). See the <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a> macro for a description of the schema number.</p>
<p class=dt>
<b>CObject* ( PASCAL* m_pfnCreateObject )( )</b></p>
<p class=indent>
A function pointer to the default constructor that creates an object of your class (valid only if the class supports dynamic creation; otherwise, returns <b>NULL</b>). </p>
<p class=dt>
<b>CRuntimeClass* ( PASCAL* m_pfn_GetBaseClass )( )</b></p>
<p class=indent>
If your application is dynamically linked to the AFXDLL version of MFC, a pointer to a function that returns the <b>CRuntimeClass</b> structure of the base class. </p>
<p class=dt>
<b>CRuntimeClass* m_pBaseClass</b></p>
<p class=indent>
If your application is statically linked to MFC, a pointer to the <b>CRuntimeClass</b> structure of the base class.</p>
<p class=atl>
<B><b>Feature Only in Professional and Enterprise Editions</b></B>&nbsp;&nbsp;&nbsp;Static linking to MFC is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vceditions">
</object><a href=JavaScript:alink_1.Click()>Visual C++ Editions</a>.</p><p class=dt>
<b>CObject* CreateObject( );</b></p>
<p class=indent>
Classes derived from <b>CObject</b> can support dynamic creation, which is the ability to create an object of a specified class at run time. Document, view, and frame classes, for example, should support dynamic creation. The <b>CreateObject</b> member function can be used to implement this function and create objects for these classes during run time. For more information on dynamic creation and the <b>CreateObject</b> member, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_CObject_Class_Topics">
</object><a href=JavaScript:alink_2.Click()>CObject Class Topics</a> and <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_CObject_Class.3a_.Specifying_Levels_of_Functionality">
</object><a href=JavaScript:alink_3.Click()>CObject Class: Specifying Levels of Functionality</a> in <i>Visual C++ Programmer’s Guide</i>. </p>
<p class=dt>
<b>BOOL IsDerivedFrom( const CRuntimeClass* pBaseClass) const;</b></p>
<p class=indent>
Returns <b>TRUE</b> if the class of the class member calling <b>IsDerivedFrom</b> is derived from the base class whose <b>CRuntimeClass</b> structure is given as a parameter. <b>IsDerivedFrom</b> walks from the member's class up the chain of derived classes all the way to the top and returns <b>FALSE</b> only if no match is found for the base class.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To use the <b>CRuntimeClass</b> structure, you must include the <b>IMPLEMENT_DYNAMIC</b>, <b>IMPLEMENT_DYNCREATE</b>, or <b>IMPLEMENT_SERIAL</b> macro in the implementation of the class for which you want to retrieve run-time object information.</p>
<p>
For more information on using <b>CRuntimeClass</b>, see the article <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_CObject_Class.3a_.Accessing_Run.2d.Time_Class_Information">
</object><a href=JavaScript:alink_4.Click()>CObject Class: Accessing Run-Time Class Information</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cobject.3a3a.getruntimeclass.htm">CObject::GetRuntimeClass</a>, <a href="_mfc_cobject.3a3a.iskindof.htm">CObject::IsKindOf</a>, <a href="_mfc_runtime_class.htm">RUNTIME_CLASS</a>, <a href="_mfc_implement_dynamic.htm">IMPLEMENT_DYNAMIC</a>, <a href="_mfc_implement_dyncreate.htm">IMPLEMENT_DYNCREATE</a>, <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Connection Points to an Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_adding_connection_points_to_an_object"></a>Adding Connection Points to an Object</h1>
<p>
The <a href="_atl_atl_tutorial.htm">ATL Tutorial</a> demonstrates how to create a control with support for connection points, how to add events and then how to implement the connection point.&nbsp; <a href="_atl_iconnectionpointimpl.htm">IConnectionPointImpl</a> discusses how ATL implements a connection point. </p>
<p>
To implement a connection point, you have two choices:
<ul type=disc>
<li>
Implement your own out-going event source (connection point).<br><br></li>
<li>
Reuse a connection point interface defined in another type library.</li>
</ul>
<p>
In either case, the connection point wizard uses a type library to do its work.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Whenever you add a method to a dispinterface on which you have already implemented a connection point, you must recompile the .idl file and then follow the procedure to add a connection point to a control or object.</p>
<p class=label>
<b>To add a connection point to a control or object</b>
<ol>
<li>
Define a dispinterface in the library block of the .idl file. If you selected the<b> Support Connection Points</b> check box in the <b>Attributes</b> tab of the ATL Object Wizard, the dispinterface will already be created. If you did not check the <b>Support Connection Points</b> check box, you must manually add a dispinterface to the .idl file. The following is an example of a dispinterface. Outbound interfaces are not required to be dispatch interfaces but many scripting languages such as VBScript and JavaScript require this, so this example uses two dispinterfaces:<pre><code>library DProjLib
{
importlib("stdole32.tlb");
importlib("stdole2.tlb");

<span class=cfe><b>[</b></span>

<span class=cfe><b>uuid(57BC50F0-780B-11d1-8C44-0060083E866C),</b></span>

<span class=cfe><b>helpstring("Buddy Events")</b></span>

<span class=cfe><b>]</b></span>

<span class=cfe><b>dispinterface DBuddyEvents</b></span>

<span class=cfe><b>{</b></span>

<span class=cfe><b>properties:</b></span>

<span class=cfe><b>methods:</b></span>

<span class=cfe><b>};</b></span>

</code></pre>
<p class=tl>
Use either the uuidgen.exe or guidgen.exe utilities to generate a GUID.</P></li>
<li>
Add the dispinterface as the [default,source] interface in the coclass for the object.&nbsp; Again, if you selected the <b>Support Connection Points</b> check box in the <b>Attributes</b> tab of the ATL Object Wizard for this control, the wizard will create the [default,source] entry. To manually add this entry, add the line in bold:<pre><code>coclass Buddy
{
[default] interface IBuddy;
<span class=cfe><b>[default,source] dispinterface DBuddyEvents;</b></span>
};
</code></pre>
<p class=tl>
See the .idl file in the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_atl_CIRC">
</object><a href=JavaScript:alink_1.Click()>Circ</a> ATL sample for an example.</P></li>
<li>
Use <b>ClassView</b> to add methods and properties to the event interface.<br><br></li>
<li>
After the dispinterface is fully defined, compile the .idl file by right-clicking the .idl file in <b>FileView</b> and selecting the compile option.&nbsp; This will produce the type library.<br><br></li>
<li>
Right-click the class in <b>ClassView</b> and select <b>Implement Connection Point...</b>. A dialog box will display one or more type library tabs and each tab will display the interfaces for that type library.&nbsp; If you choose an interface and press <b>OK</b>, you will:<ul type=disc>
<li>
Generate a header file with an event proxy class that implements the code that will make the out-going calls for the event.<br><br></li>
<li>
Add an entry to the connection point map.<br><br></li>
<li>
Add a comment and #error (telling you to replace the NULL parameter with the address of the dispID) to the parameter list of <b>IProvideClassInfo2Impl</b>.</li>
</ul>
<p class=tl>
If you have not built your type library, you will see a list of all the typelibs on your computer.&nbsp; You should only use one of these other typelibs to define your connection point if you want to implement the exact same outgoing interface found in another typelib.&nbsp; If you build a typelib with no default source interface in the coclass, the dialog box will display a warning message reporting no suitable (source) interface in the type library.</P></li>
</ol>
<p class=label>
<b>To implement a connection point taken from another object's type library</b>
<ol>
<li>
In <b>ClassView</b>, right-click on a class that implements a <b>BEGIN_COM_MAP</b> macro, and select <b>Implement connection point</b> from the shortcut menu.<br><br></li>
<li>
In the <b>Implement Connection Point</b> dialog box, click <b>Add Typelib...</b>.<br><br></li>
<li>
Select from one of the available type libraries.&nbsp; After you select the type library, you will see a list of the available interfaces in the type library.<br><br></li>
<li>
Choose one or more of the available interfaces and click <b>OK</b>.<br><br></li>
<li>
Edit the .idl file to either:<ul type=disc>
<li>
Copy the dispinterface from the idl file for the object whose event-source is being used.<br><br></li>
<li>
Use the <b>importlib</b> instruction on that type library.</li>
</ul>
</li>
</ol>
<p>
Here's an example from an .idl file that is using the connection point from the Circ control.</p>
<pre><code>[
   uuid(38BBFD91-7575-11D1-8C3C-0060083E866C),
   version(1.0),
   helpstring("16190 1.0 Type Library")
]
library MY16190Lib
{
   importlib("stdole32.tlb");
   importlib("stdole2.tlb");
   importlib("D:\\ATL25\\samples\\circ\\circ.tlb");   //**** add this line 

   [
      uuid(38BBFD9E-7575-11D1-8C3C-0060083E866C),
      helpstring("Atl16190Ctl Class")
   ]
   coclass Atl16190Ctl
   {
      [default] interface IAtl16190Ctl;
      [default,source] dispinterface _CircEvents;      //**** and this one
   };
};
</code></pre>
</font></BODY>
</HTML>

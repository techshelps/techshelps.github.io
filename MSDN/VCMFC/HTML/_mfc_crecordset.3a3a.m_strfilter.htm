<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRecordset::m_strFilter</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_crecordset.3a3a.m_strfilter"></a>CRecordset::m_strFilter</h1>
<p class=label>
<b>Remarks</b></p>
<p>
After you construct the recordset object, but before you call its <b>Open</b> member function, use this data member to store a <b>CString</b> containing an SQL <b>WHERE</b> clause. The recordset uses this string to constrain — or filter — the records it selects during the <b>Open</b> or <b>Requery</b> call. This is useful for selecting a subset of records, such as “all salespersons based in California” (“state = CA”). The ODBC SQL syntax for a <b>WHERE</b> clause is</p>
<pre><code>WHERE search-condition
</code></pre>
<p>
Note that you do not include the <b>WHERE</b> keyword in your string. The framework supplies it.</p>
<p>
You can also parameterize your filter string by placing ‘?’ placeholders in it, declaring a parameter data member in your class for each placeholder, and passing parameters to the recordset at run time. This lets you construct the filter at run time. For more information, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Recordset.3a_.Parameterizing_a_Recordset_.28.ODBC.29">
</object><a href=JavaScript:alink_1.Click()>Recordset: Parameterizing a Recordset (ODBC)</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
For more information about SQL <b>WHERE</b> clauses, see the article <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_SQL">
</object><a href=JavaScript:alink_2.Click()>SQL</a>. For more information about selecting and filtering records, see the article <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Recordset.3a_.Filtering_Records_.28.ODBC.29">
</object><a href=JavaScript:alink_3.Click()>Recordset: Filtering Records (ODBC)</a>. Both articles are in <i>Visual C++ Programmer’s Guide</i>.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// Example for CRecordset::m_strFilter

CCustSet rsCustSet( NULL );

// Set the filter
rsCustSet.m_strFilter = “state = 'CA'”;

// Run the filtered query
rsCustSet.Open( CRecordset::snapshot, "Customers" );
</code></pre>
<p>
<a href="_mfc_crecordset.htm">CRecordset Overview</a>  |&nbsp; <a href="_mfc_crecordset_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_crecordset.3a3a.m_strsort.htm">CRecordset::m_strSort</a>, <a href="_mfc_crecordset.3a3a.requery.htm">CRecordset::Requery</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWinThread</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cwinthread"></a>CWinThread</h1>
<p>
<img src="cwinthd.gif" border=0></p>
<p>
A <b>CWinThread</b> object represents a thread of execution within an application. The main thread of execution is usually provided by an object derived from <b>CWinApp</b>; <b>CWinApp</b> is derived from <b>CWinThread</b>. Additional <b>CWinThread</b> objects allow multiple threads within a given application.</p>
<p>
There are two general types of threads that <b>CWinThread</b> supports: worker threads and user-interface threads. Worker threads have no message pump: for example, a thread that performs background calculations in a spreadsheet application. User-interface threads have a message pump and process messages received from the system. <a href="_mfc_cwinapp.htm">CWinApp</a> and classes derived from it are examples of user-interface threads. Other user-interface threads can also be derived directly from <b>CWinThread</b>.</p>
<p>
Objects of class <b>CWinThread</b> typically exist for the duration of the thread. If you wish to modify this behavior, set <a href="_mfc_cwinthread.3a3a.m_bautodelete.htm">m_bAutoDelete</a> to <b>FALSE</b>.</p>
<p>
The <b>CWinThread</b> class is necessary to make your code and MFC fully thread-safe. Thread-local data used by the framework to maintain thread-specific information is managed by <b>CWinThread</b> objects. Because of this dependence on <b>CWinThread</b> to handle thread-local data, any thread that uses MFC must be created by MFC. For example, a thread created by the run-time function <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt__beginthread.2c_._beginthreadex">
</object><a href=JavaScript:alink_1.Click()>_beginthreadex</a> cannot use any MFC APIs.</p>
<p>
To create a thread, call <a href="_mfc_afxbeginthread.htm">AfxBeginThread</a>. There are two forms, depending on whether you want a worker or user-interface thread. If you want a user-interface thread, pass to <b>AfxBeginThread</b> a pointer to the <b>CRuntimeClass</b> of your <b>CWinThread</b>-derived class. If you want to create a worker thread, pass to <b>AfxBeginThread</b> a pointer to the controlling function and the parameter to the controlling function. For both worker threads and user-interface threads, you can specify optional parameters that modify priority, stack size, creation flags, and security attributes. <b>AfxBeginThread</b> will return a pointer to your new <b>CWinThread</b> object. </p>
<p>
Instead of calling <b>AfxBeginThread</b>, you can construct a <b>CWinThread</b>-derived object and then call <b>CreateThread</b>. This two-stage construction method is useful if you want to reuse the <b>CWinThread</b> object between successive creation and terminations of thread executions.</p>
<p>
For more information on <b>CWinThread</b>, see the articles <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading_with_C.2b2b_.and_MFC">
</object><a href=JavaScript:alink_2.Click()>Multithreading with C++ and MFC</a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.Creating_User.2d.Interface_Threads">
</object><a href=JavaScript:alink_3.Click()>Multithreading: Creating User-Interface Threads</a>, <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.Creating_Worker_Threads">
</object><a href=JavaScript:alink_4.Click()>Multithreading: Creating Worker Threads</a>, and <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.How_to_Use_the_Synchronization_Classes">
</object><a href=JavaScript:alink_5.Click()>Multithreading: How to Use the Synchronization Classes</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<a href="_mfc_cwinthread_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_ccmdtarget.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_MTGDI">
</object><a href=JavaScript:alink_6.Click()>MFC Sample MTGDI</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwinapp.htm">CWinApp</a>, <a href="_mfc_ccmdtarget.htm">CCmdTarget</a></p>
</font></BODY>
</HTML>

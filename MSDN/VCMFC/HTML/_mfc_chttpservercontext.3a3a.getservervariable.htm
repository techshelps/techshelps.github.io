<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHttpServerContext::GetServerVariable</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_chttpservercontext.3a3a.getservervariable"></a>CHttpServerContext::GetServerVariable</h1>
<p>
<b>BOOL GetServerVariable( LPTSTR </b><i>lpszVariableName</i><b>, LPVOID </b><i>lpvBuffer</i><b>, LPDWORD </b><i>lpdwSize</i><b> );</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if successful, otherwise 0. If the call fails, the Windows function <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_Win32_GetLastError">
</object><a href=JavaScript:alink_1.Click()>GetLastError</a> may be called to determine the cause of the error. Possible error values include:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Value</b></td>
<td class=label width=50%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=50%><b>ERROR_INVALID_PARAMETER</b></td>
<td width=50%>Bad connection handle.</td>
</tr>
<tr valign=top>
<td width=50%><b>ERROR_INVALID_INDEX</b></td>
<td width=50%>Bad or unsupported variable identifier.</td>
</tr>
<tr valign=top>
<td width=50%><b>ERROR_INSUFFICIENT_BUFFER</b></td>
<td width=50%>Buffer too small, required size returned in <i>*lpdwSize</i>.</td>
</tr>
<tr valign=top>
<td width=50%><b>ERROR_MORE_DATA</b></td>
<td width=50%>Buffer too small, only part of data returned. The total size of the data is not returned.</td>
</tr>
<tr valign=top>
<td width=50%><b>ERROR_NO_DATA</b></td>
<td width=50%>The data requested is not available.</td>
</tr>
</table><br>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>lpszVariableName</i></p>
<p class=indent>
Null terminated string indicating which variable is being requested. See the Remarks section for a list of current variables.</p>
<p class=dt>
<i>lpvBuffer</i></p>
<p class=indent>
Pointer to buffer to receive the requested information.</p>
<p class=dt>
<i>lpdwSize</i></p>
<p class=indent>
Pointer to <b>DWORD</b> indicating the number of bytes available in the buffer. On successful completion the <b>DWORD</b> contains the number of bytes transferred into the buffer (including the null-terminating byte).</p>
<p class=label>
<b>Remarks</b></p>
<p>
This function copies information relating to an HTTP connection, or to the server itself, into a buffer supplied by the caller. </p>
<p>
Possible values for <i>lpszVariableNames</i> include:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Value</b></td>
<td class=label width=63%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=37%><b>AUTH_TYPE</b></td>
<td width=63%>Contains the type of authentication used.&nbsp; For example, if Basic authentication is used, the string will be "Basic".&nbsp; For Windows NT Challenge-response, it will be "NTLM".&nbsp; Other authentication schemes will have other strings.&nbsp; Because new authentication types can be added to Internet Server, it is not possible to list all possible strings. If the string is empty, then no authentication is used.</td>
</tr>
<tr valign=top>
<td width=37%><b>CONTENT_LENGTH</b></td>
<td width=63%>The number of bytes which the script can expect to receive from the client.</td>
</tr>
<tr valign=top>
<td width=37%><b>CONTENT_TYPE</b></td>
<td width=63%>The content type of the information supplied in the body of a POST request.</td>
</tr>
<tr valign=top>
<td width=37%><b>GATEWAY_INTERFACE</b></td>
<td width=63%>The revision of the CGI specification to which this server complies. The current version is CGI/1.1.</td>
</tr>
<tr valign=top>
<td width=37%><b>PATH_INFO</b></td>
<td width=63%>Additional path information, as given by the client. This comprises the trailing part of the URL after the extension DLL (script) name but before the query string (if any).</td>
</tr>
<tr valign=top>
<td width=37%><b>PATH_TRANSLATED</b></td>
<td width=63%>This is the value of <b>PATH_INFO</b>, but with any virtual path name expanded into a directory specification.</td>
</tr>
<tr valign=top>
<td width=37%><b>QUERY_STRING</b></td>
<td width=63%>The information which follows the ? in the URL which referenced this extension DLL.</td>
</tr>
<tr valign=top>
<td width=37%><b>REMOTE_ADDR</b></td>
<td width=63%>The IP address of the client.</td>
</tr>
<tr valign=top>
<td width=37%><b>REMOTE_HOST</b></td>
<td width=63%>The hostname of the client.</td>
</tr>
<tr valign=top>
<td width=37%><b>REMOTE_USER</b></td>
<td width=63%>This contains the username supplied by the client and authenticated by the server.&nbsp; </td>
</tr>
<tr valign=top>
<td width=37%><b>REQUEST_METHOD</b></td>
<td width=63%>The HTTP request method.</td>
</tr>
<tr valign=top>
<td width=37%><b>SCRIPT_NAME</b></td>
<td width=63%>The name of the extension DLL that is being executed.</td>
</tr>
<tr valign=top>
<td width=37%><b>SERVER_NAME</b></td>
<td width=63%>The server's hostname (or IP address) as it should appear in self-referencing URLs.</td>
</tr>
<tr valign=top>
<td width=37%><b>SERVER_PORT</b></td>
<td width=63%>The TCP/IP port on which the request was received.</td>
</tr>
<tr valign=top>
<td width=37%><b>SERVER_PROTOCOL</b></td>
<td width=63%>The name and version of the information retrieval protocol relating to this request. Normally HTTP/1.0.</td>
</tr>
<tr valign=top>
<td width=37%><b>SERVER_SOFTWARE</b></td>
<td width=63%>The name and version of the web server under which the ISA or server extension DLL program is running.</td>
</tr>
<tr valign=top>
<td width=37%><b>ALL_HTTP</b></td>
<td width=63%>All HTTP headers that were not already parsed into one of the above variables. These variables are of the form HTTP_&lt;header field name&gt;.</td>
</tr>
<tr valign=top>
<td width=37%><b>HTTP_ACCEPT</b></td>
<td width=63%>Special case HTTP header. Values of the Accept: fields are concatenated, separated by ", ". For example, if the following lines are part of the HTTP header:<pre><code>accept: */*; q=0.1
accept: text/html
accept: image/jpeg
</code></pre>
<p>
then the <b>HTTP_ACCEPT</b> variable will have a value of:</p>
<pre><code>*/*; q=0.1, text/html, image/jpeg</code></pre>
</td>
</tr>
</table><br>
<p>
<a href="_mfc_chttpservercontext.htm">CHttpServerContext Overview</a>  |&nbsp; <a href="_mfc_chttpservercontext_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

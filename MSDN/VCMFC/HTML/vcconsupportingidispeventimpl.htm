<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting IDispEventImpl</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcconsupportingidispeventimpl"></a>Supporting IDispEventImpl</h1>
<p>
The template class <a href="vcrefidispeventimpl.htm">IDispEventImpl</a> can be used to provide support for connection points in your ATL COM object. A connection point allows your COM object to handle events fired from external COM objects. These connection points are mapped with an event sink map, provided by your COM object.</p>
<p>
To properly implement a connection point or points for your COM object, the following steps must be completed:
<ul type=disc>
<li>
Import the type libraries for each external<br><br></li>
<li>
Declare the <b>IDispEventImpl</b> interfaces<br><br></li>
<li>
Declare an event sink map<br><br></li>
<li>
Advise and unadvise the connection points</li>
</ul>
<p>
In this procedure, you will be modifying only the header file (.h) of your COM class.</p>
<h2>Importing the Type Libraries</h2>
<p>
For each external object whose events you wish to handle, you must import the type library. This step defines the events that can be handled and provides information that is used when declaring the event sink map. The <b>#import</b> directive can be used to accomplish this. Add the necessary <b>#import</b> directive lines for each dispatch interface you will support to the header file (.h) of your COM class.</p>
<p>
The following example imports the type library of an external COM server (<code>MyServer</code>):</p>
<pre><code>#import "D:\MyServer.dll" raw_interfaces_only, no_namespace, named_guids
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must have a separate <b>#import</b> statement for each external dispatch interface you will support.</p>
<h2>Declaring the IDispEventImpl Interfaces</h2>
<p>
Now that you have imported the type libraries of each dispatch interface, you need to declare separate <b>IDispEventImpl</b> interfaces for each external dispatch interface. Modify the declaration of your COM class by adding an <b>IDispEventImpl</b> interface declaration for each external object. For more information on the parameters, see <a href="vcrefidispeventimpl.htm">IDispEventImpl</a>.</p>
<p>
The following lines of code declare two connection points, for the custom <code>IExtEvents1</code> and <code>IExtEvents2</code> interfaces, for the COM object implemented by class <code>CMyObj</code>:</p>
<pre><code>public IDispEventImpl&lt;0, CMyObj, &amp;DIID__IExtEvents1,
 &nbsp;&nbsp; &amp;LIBID_EXTEVENTS1Lib, 1, 0&gt;,
public IDispEventImpl&lt;1, CMyObj, &amp;DIID__IExtEvents2,
 &nbsp;&nbsp; &amp;LIBID_EXTEVENTS2Lib, 1, 0&gt;
</code></pre>
<h2>Declaring an Event Sink Map</h2>
<p>
In order for the event notifications to be handled by the proper function, your COM object must route each event to its correct handler. This is achieved by declaring an event sink map.</p>
<p>
ATL provides several macros, <a href="vcrefbegin_sink_map.htm">BEGIN_SINK_MAP</a>, <a href="vcrefend_sink_map.htm">END_SINK_MAP</a>, and <a href="vcrefsink_entry.htm">SINK_ENTRY</a>, that make this mapping easier. The standard format is as follows:</p>
<pre><code>BEGIN_SINK_MAP(comClass)
 &nbsp; SINK_ENTRY(id, dispid, func)
. . . //additional external event entries
END_SINK_MAP()
</code></pre>
<p>
The following example declares an event sink map with two event handlers:</p>
<pre><code>BEGIN_SINK_MAP(CMyObj)
   SINK_ENTRY(0, Events1, OnClick1)
   SINK_ENTRY(0, Events2, OnClick2)
END_SINK_MAP()
</code></pre>
<p>
The implementation is nearly complete. The last step concerns the advising and unadvising of the external interfaces.</p>
<h2>Advising and Unadvising the IDispEventImpl Interfaces</h2>
<p>
The final step is to implement a method that will advise (or unadvise) all connection points at the proper times. This advising must be done before communication between the external clients and your object can take place. Before your object becomes visible, each external dispatch interface supported by your object is queried for outgoing interfaces. A connection is established and a reference to the outgoing interface is used to handle events from the control. This procedure is referred to as "advising."</p>
<p>
After your object is finished with the external interfaces, the outgoing interfaces should be notified that they are no longer used by your COM object. This process is referred to as "unadvising."</p>
<p>
Because of the unique nature of COM objects, this procedure varies, in detail and execution, between implementations. These details are beyond the scope of this topic and are not addressed.</p>
</font></BODY>
</HTML>

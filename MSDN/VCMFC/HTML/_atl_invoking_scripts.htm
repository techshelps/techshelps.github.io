<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Invoking Scripts</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_invoking_scripts"></a>Invoking Scripts</h1>
<p>
The previous section, <a href="_atl_using_replaceable_parameters_.28.the_registrar.92.s_preprocessor.29.htm">Using Replaceable Parameters (The Registrar's Preprocessor)</a>, discussed replacement maps and introduced two of the Registrar's methods, <b>AddReplacement</b> and <b>ClearReplacements</b>. The Registrar has eight other methods specific to scripting. All eight of these methods are described in the following table and invoke the Registrar on a particular script.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Method</b></td>
<td class=label width=66%><b>Syntax/Description</b></td>
</tr>
<tr valign=top>
<td width=34%><b>ResourceRegister</b></td>
<td width=66%><b>HRESULT ResourceRegister( LPCOLESTR </b><i>resFileName</i><b>, UINT </b><i>nID</i><b>, LPCOLESTR </b><i>szType </i><b>);</b><p>
Registers the script contained in a module's resource. <i>resFileName</i> indicates the UNC path to the module itself. <i>nID</i> and <i>szType</i> contain the resource's ID and type, respectively.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>ResourceUnregister</b></td>
<td width=66%><b>HRESULT ResourceUnregister( LPCOLESTR </b><i>resFileName</i><b>, UINT </b><i>nID</i><b>, LPCOLESTR </b><i>szType </i><b>);</b><p>
Unregisters the script contained in a module's resource. <i>resFileName</i> indicates the UNC path to the module itself. <i>nID</i> and <i>szType</i> contain the resource's ID and type, respectively.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>ResourceRegisterSz</b></td>
<td width=66%><b>HRESULT ResourceRegisterSz( LPCOLESTR </b><i>resFileName</i><b>, LPCOLESTR </b><i>szID</i><b>, LPCOLESTR </b><i>szType </i><b>);</b><p>
Registers the script contained in a module's resource. <i>resFileName</i> indicates the UNC path to the module itself. <i>szID</i> and <i>szType</i> contain the resource's string identifier and type, respectively.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>ResourceUnregisterSz</b></td>
<td width=66%><b>HRESULT ResourceUnregisterSz( LPCOLESTR </b><i>resFileName</i><b>, LPCOLESTR </b><i>szID</i><b>, LPCOLESTR </b><i>szType </i><b>);</b><p>
Unregisters the script contained in a module's resource. <i>resFileName</i> indicates the UNC path to the module itself. <i>szID</i> and <i>szType</i> contain the resource's string identifier and type, respectively.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>FileRegister</b></td>
<td width=66%><b>HRESULT FileRegister( LPCOLESTR </b><i>fileName </i><b>);</b><p>
Registers the script in a file. <i>fileName </i>is a UNC path to a file that contains (or is) a resource script.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>FileUnregister</b></td>
<td width=66%><b>HRESULT FileUnregister( LPCOLESTR </b><i>fileName </i><b>);</b><p>
Unregisters the script in a file. <i>fileName </i>is a UNC path to a file that contains (or is) a resource script.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>StringRegister</b></td>
<td width=66%><b>HRESULT StringRegister( LPCOLESTR </b><i>data </i><b>);</b><p>
Registers the script in a string. <i>data </i>contains the script itself.</p>
</td>
</tr>
<tr valign=top>
<td width=34%><b>StringUnregister</b></td>
<td width=66%><b>HRESULT StringUnregister( LPCOLESTR </b><i>data </i><b>);</b><p>
Unregisters the script in a string. <i>data </i>contains the script itself.</p>
</td>
</tr>
</table><br>
<p>
ATL uses the first two methods shown in the table (<b>ResourceRegister</b> and <b>ResourceUnregister</b>) in atlimpl.cpp:</p>
<pre><code>LPCOLESTR szType = OLESTR("REGISTRY");
GetModuleFileName(pM-&gt;m_hInstResource, szModule, _MAX_PATH);
LPOLESTR pszModule = T2OLE(szModule);

if (HIWORD(lpszRes)==0)
{
 &nbsp; if (bRegister)
 &nbsp;&nbsp;&nbsp; hRes = p-&gt;ResourceRegister(pszModule, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((UINT)LOWORD((DWORD)lpszRes)), szType);
 &nbsp; else
 &nbsp;&nbsp;&nbsp; hRes = p-&gt;ResourceUnregister(pszModule, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((UINT)LOWORD((DWORD)lpszRes)), szType);
}
else
{
 &nbsp; if (bRegister)
 &nbsp;&nbsp;&nbsp; hRes = p-&gt;ResourceRegisterSz(pszModule, lpszRes, szType);
 &nbsp; else
 &nbsp;&nbsp;&nbsp; hRes = p-&gt;ResourceUnregisterSz(pszModule, lpszRes, szType);
}
</code></pre>
<p>
Note that <code>szModule</code> contains the value acquired from <b>GetModuleFileName</b>.</p>
<p>
The next two methods shown in the table, <b>ResourceRegisterSz</b> and <b>ResourceUnregisterSz</b>, are similar to <b>ResourceRegister</b> and <b>ResourceUnregister</b>, but allow you to specify a string identifier.</p>
<p>
The methods <b>FileRegister</b> and <b>FileUnregister</b> are useful if you do not want the script in a resource or if you want the script in its own file. The methods <b>StringRegister</b> and <b>StringUnregister</b> allow the .rgs file to be stored in a dynamically-allocated string.</p>
</font></BODY>
</HTML>

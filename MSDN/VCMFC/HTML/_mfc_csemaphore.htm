<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSemaphore</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_csemaphore"></a>CSemaphore</h1>
<p>
<img src="csemafor.gif" border=0></p>
<p>
An object of class <b>CSemaphore</b> represents a “semaphore” — a synchronization object that allows a limited number of threads in one or more processes to access a resource. A <b>CSemaphore</b> object maintains a count of the number of threads currently accessing a specified resource. </p>
<p>
Semaphores are useful in controlling access to a shared resource that can only support a limited number of users. The current count of the <b>CSemaphore</b> object is the number of additional users allowed. When the count reaches zero, all attempts to use the resource controlled by the <b>CSemaphore </b>object will be inserted into a system queue and wait until they either time out or the count rises above 0. The maximum number of users who can access the controlled resource at one time is specified during construction of the <b>CSemaphore</b> object.</p>
<p>
To use a <b>CSemaphore </b>object, construct the <b>CSemaphore</b> object when it is needed. Specify the name of the semaphore you wish to wait on, and that your application should initially own it. You can then access the semaphore when the constructor returns. Call <a href="_mfc_csyncobject.3a3a.unlock.htm">CSyncObject::Unlock</a> when you are done accessing the controlled resource.</p>
<p>
An alternative method for using <b>CSemaphore</b> objects is to add a variable of type <b>CSemaphore</b> as a data member to the class you wish to control. During construction of the controlled object, call the constructor of the <b>CSemaphore</b> data member specifying the initial access count, maximum access count, name of the semaphore (if it will be used across process boundaries), and desired security attributes.</p>
<p>
To access resources contolled by <b>CSemaphore</b> objects in this manner, first create a variable of either type <a href="_mfc_csinglelock.htm">CSingleLock</a><b> </b>or type <a href="_mfc_cmultilock.htm">CMultiLock</a><b> </b>in your resource’s access member function. Then call the lock object’s <b>Lock</b> member function (for example, <a href="_mfc_csinglelock.3a3a.lock.htm">CSingleLock::Lock</a>). At this point, your thread will either gain access to the resource, wait for the resource to be released and gain access, or wait for the resource to be released and time out, failing to gain access to the resource. In any case, your resource has been accessed in a thread-safe manner. To release the resource, use the lock object’s <b>Unlock</b> member function (for example, <a href="_mfc_csinglelock.3a3a.unlock.htm">CSingleLock::Unlock</a>), or allow the lock object to fall out of scope.</p>
<p>
Alternatively, you can create a <b>CSemaphore </b>object stand-alone, and access it explicitly before attempting to access the controlled resource. This method, while clearer to someone reading your source code, is more prone to error.</p>
<p>
For more information on how to use <b>CSemaphore </b>objects, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.How_to_Use_the_Synchronization_Classes">
</object><a href=JavaScript:alink_1.Click()>Multithreading: How to Use the Synchronization Classes</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxmt.h&gt;</b></p>
<p>
<a href="_mfc_csemaphore_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_csyncobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_MUTEXES">
</object><a href=JavaScript:alink_2.Click()>MFC Sample MUTEXES</a></p>
</font></BODY>
</HTML>

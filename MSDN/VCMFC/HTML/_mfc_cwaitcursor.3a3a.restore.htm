<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWaitCursor::Restore</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cwaitcursor.3a3a.restore"></a>CWaitCursor::Restore</h1>
<p>
<b>void Restore( );</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
To restore the wait cursor, call this function after performing an operation, such as displaying a message box or dialog box, which might change the wait cursor to another cursor.</p>
<p>
It is OK to call <b>Restore</b> even when the wait cursor is currently displayed.</p>
<p>
If you need to restore the wait cursor while in a function other than the one in which the <b>CWaitCursor</b> object is declared, you can call <a href="_mfc_ccmdtarget.3a3a.restorewaitcursor.htm">CCmdTarget::RestoreWaitCursor</a>.</p>
<p class=label>
<b>Examples</b></p>
<pre><code>// This example illustrates performing an operation 
// which changes the wait cursor. You should call 
// CWaitCursor::Restore to restore the wait 
// cursor after an operation which changes the cursor.

void AnotherLengthyFunction( )
{
 &nbsp; CWaitCursor wait;   // display wait cursor

 &nbsp; // do some lengthy processing

 &nbsp; // The dialog box will normally change the cursor to
 &nbsp; // the standard arrow cursor.
 &nbsp; CSomeDialog dlg;
 &nbsp; dlg.DoModal( );

 &nbsp; // It is necessary to call Restore here in order
 &nbsp; // to change the cursor back to the wait cursor.
 &nbsp; wait.Restore( );

 &nbsp; // do some more lengthy processing

 &nbsp; // destructor automatically removes the wait cursor
}

// If the wait cursor is changed by a function called by
// the function which created the wait cursor, you 
// can call CCmdTarget::RestoreWaitCursor to restore 
// the wait cursor.
void CalledFunction()
{
 &nbsp; CSomeDialog dlg;
 &nbsp; dlg.DoModal();

 &nbsp; // Since CWinApp is derived from CCmdTarget, we can use a 
 &nbsp; // pointer to our application object to make the call to
 &nbsp; // CCmdTarget::RestoreWaitCursor.
 &nbsp; AfxGetApp()-&gt;RestoreWaitCursor( );

 &nbsp; // Yet more lengthy processing...
}
</code></pre>
<p>
<a href="_mfc_cwaitcursor.htm">CWaitCursor Overview</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_ccmdtarget.3a3a.restorewaitcursor.htm">CCmdTarget::RestoreWaitCursor</a></p>
</font></BODY>
</HTML>

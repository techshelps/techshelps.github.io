<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Window with CWindowImpl</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_atl_implementing_a_window_with_cwindowimpl"></a>Implementing a Window with CWindowImpl</h1>
<p>
To implement a window, derive a class from <b>CWindowImpl</b>. In your derived class, declare a message map and the message handler functions. You can now use your class in three different ways:
<ul type=disc>
<li>
<a href="#_atl_creating_a_window_based_on_a_new_windows_class">Creating a window based on a new Windows class</a><br><br></li>
<li>
<a href="#_atl_superclassing_an_existing_windows_class">Superclassing an existing Windows class</a><br><br></li>
<li>
<a href="#_atl_subclassing_an_existing_window">Subclassing an existing window</a></li>
</ul>
<p class=label>
<b><a name="_atl_creating_a_window_based_on_a_new_windows_class"></a>Creating a window based on a new Windows class</b></p>
<p>
<b>CWindowImpl</b> contains the <a href="_atl_declare_wnd_class.htm">DECLARE_WND_CLASS</a> macro to declare Windows class information. This macro implements the <b>GetWndClassInfo</b> function, which uses <a href="_atl_cwndclassinfo.htm">CWndClassInfo</a> to define the information of a new Windows class. When <b>CWindowImpl::Create</b> is called, this Windows class is registered and a new window is created. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<b>CWindowImpl</b> passes <b>NULL</b> to the <b>DECLARE_WND_CLASS</b> macro, which means ATL will generate a Windows class name. To specify your own name, pass a string to <b>DECLARE_WND_CLASS</b> in your <b>CWindowImpl</b>-derived class.</p>
<p>
Following is an example of a class that implements a window based on a new Windows class:</p>
<pre><code>class CMyWindow : public CWindowImpl&lt;CMyWindow&gt;, ...
{
public:
 &nbsp; // Optionally specify name of the new Windows class
 &nbsp; DECLARE_WND_CLASS("MyName") 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If this macro is not specified in your
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // class, ATL will generate a class name
 &nbsp; ...

 &nbsp; BEGIN_MSG_MAP(CMyWindow)
 &nbsp;&nbsp;&nbsp;&nbsp; MESSAGE_HANDLER(WM_PAINT, OnPaint)
 &nbsp; END_MSG_MAP()

 &nbsp; LRESULT OnPaint(UINT nMsg, WPARAM wParam, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPARAM lParam, BOOL&amp; bHandled)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Do some painting code
 &nbsp;&nbsp;&nbsp;&nbsp; return 0;
 &nbsp; }
};
</code></pre>
<p>
To create a window, create an instance of <code>CMyWindow</code> and then call the <b>Create</b> method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To override the default Windows class information, implement the <b>GetWndClassInfo</b> method in your derived class by setting the <b>CWndClassInfo</b> members to the appropriate values.</p>
<p class=label>
<b><a name="_atl_superclassing_an_existing_windows_class"></a>Superclassing an existing Windows class</b></p>
<p>
The <a href="_atl_declare_wnd_superclass.htm">DECLARE_WND_SUPERCLASS</a> macro allows you to create a window that superclasses an existing Windows class. Specify this macro in your <b>CWindowImpl</b>-derived class. Like any other ATL window, messages are handled by a message map.</p>
<p>
When you use <b>DECLARE_WND_SUPERCLASS</b>, a new Windows class will be registered. This new class will be the same as the existing class you specify, but will replace the window procedure with <b>CWindowImpl::WindowProc</b> (or with your function that overrides this method).</p>
<p>
Following is an example of a class that superclasses the standard Edit class:</p>
<pre><code>class CMyEdit : public CWindowImpl&lt;CMyEdit&gt;, ...
{
public:
 &nbsp; // "Edit" is the name of the standard Windows class.
 &nbsp; // "MyEdit" is the name of the new Windows class
 &nbsp; // that will be based on the Edit class.
 &nbsp; DECLARE_WND_SUPERCLASS("Edit", "MyEdit")

 &nbsp; ...
 &nbsp; BEGIN_MSG_MAP(CMyEdit)
 &nbsp;&nbsp;&nbsp;&nbsp; MESSAGE_HANDLER(WM_CHAR, OnChar)
 &nbsp; END_MSG_MAP()

 &nbsp; LRESULT OnChar(UINT nMsg, WPARAM wParam, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPARAM lParam, BOOL&amp; bHandled)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Do some character handling code
 &nbsp; }
};
</code></pre>
<p>
To create the superclassed Edit window, create an instance of <code>CMyEdit</code> and then call the <b>Create</b> method.</p>
<p>
For more information about superclassing, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_Window_Procedure_Superclassing">
</object><a href=JavaScript:alink_1.Click()>Window Procedure Superclassing</a> in the <i>Win32 SDK</i>.</p>
<p class=label>
<b><a name="_atl_subclassing_an_existing_window"></a>Subclassing an existing window</b></p>
<p>
To subclass an existing window, derive a class from <b>CWindowImpl</b> and declare a message map, as in the two previous cases. Note, however, that you do not specify any Windows class information, since you will subclass an already existing window.</p>
<p>
Instead of calling <b>Create</b>, call <b>SubclassWindow</b> and pass it the handle to the existing window you want to subclass. Once the window is subclassed, it will use <b>CWindowImpl::WindowProc</b> (or your function that overrides this method) to direct messages to the message map. To detach a subclassed window from your object, call <b>UnsubclassWindow</b>. The window's original window procedure will then be restored.</p>
<p>
For more information about subclassing, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_Window_Procedure_Subclassing">
</object><a href=JavaScript:alink_2.Click()>Window Procedure Subclassing</a> in the <i>Win32 SDK</i>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRecordset::GetFieldValue</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_crecordset.3a3a.getfieldvalue"></a>CRecordset::GetFieldValue</h1>
<p>
<b>void GetFieldValue( LPCTSTR</b> <i>lpszName</i><b>, CDBVariant&amp;</b> <i>varValue</i><b>, short </b><i>nFieldType</i><b> = DEFAULT_FIELD_TYPE );</b><br>
<b>throw( CDBException, CMemoryException );</b></p>
<p>
<b>void GetFieldValue( short</b> <i>nIndex</i><b>, CDBVariant&amp;</b> <i>varValue</i><b>, short </b><i>nFieldType</i><b> = DEFAULT_FIELD_TYPE );</b><br>
<b>throw( CDBException, CMemoryException );</b></p>
<p>
<b>void GetFieldValue( LPCTSTR </b><i>lpszName</i><b>, CString&amp; </b><i>strValue</i><b> );<br>
throw( CDBException, CMemoryException );</b></p>
<p>
<b>void GetFieldValue( short </b><i>nIndex</i><b>, CString&amp; </b><i>strValue</i><b> );<br>
throw( CDBException, CMemoryException );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>lpszName</i></p>
<p class=indent>
The name of a field.</p>
<p class=dt>
<i>varValu</i>e</p>
<p class=indent>
A reference to a <a href="_mfc_cdbvariant.htm">CDBVariant</a> object that will store the field's value.</p>
<p class=dt>
<i>nFieldType</i></p>
<p class=indent>
The ODBC C data type of the field. Using the default value, <b>DEFAULT_FIELD_TYPE</b>, forces <b>GetFieldValue</b> to determine the C data type from the SQL data type, based on the following table. Otherwise, you can specify the data type directly or choose a compatible data type; for example, you can store any data type into <b>SQL_C_CHAR</b>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>C data type</b></td>
<td class=label width=69%><b>SQL data type</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_BIT</b></td>
<td width=69%><b>SQL_BIT</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_UTINYINT</b></td>
<td width=69%><b>SQL_TINYINT</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_SSHORT</b></td>
<td width=69%><b>SQL_SMALLINT</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_SLONG</b></td>
<td width=69%><b>SQL_INTEGER</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_FLOAT</b></td>
<td width=69%><b>SQL_REAL</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_DOUBLE</b></td>
<td width=69%><b>SQL_FLOAT</b><br>
<b>SQL_DOUBLE</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_TIMESTAMP</b></td>
<td width=69%><b>SQL_DATE</b><br>
<b>SQL_TIME</b><br>
<b>SQL_TIMESTAMP</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_CHAR</b></td>
<td width=69%><b>SQL_NUMERIC</b><br>
<b>SQL_DECIMAL</b><br>
<b>SQL_BIGINT</b><br>
<b>SQL_CHAR</b><br>
<b>SQL_VARCHAR</b><br>
<b>SQL_LONGVARCHAR</b></td>
</tr>
<tr valign=top>
<td width=31%><b>SQL_C_BINARY</b></td>
<td width=69%><b>SQL_BINARY</b><br>
<b>SQL_VARBINARY</b><br>
<b>SQL_LONGVARBINARY</b></td>
</tr>
</table><br>
<p class=tl>
For more information about ODBC data types, see the topics "SQL Data Types" and "C Data Types" in Appendix D of the <i>ODBC SDK Programmer's Reference</i>.</P><p class=dt>
<i>nIndex</i></p>
<p class=indent>
The zero-based index of the field.</p>
<p class=dt>
<i>strValue</i></p>
<p class=indent>
A reference to a <a href="_mfc_cstring.htm">CString</a> object that will store the field's value converted to text, regardless of the field's data type.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to retrieve field data in the current record. You can look up a field either by name or by index. You can store the field value in either a <b>CDBVariant</b> object or a <b>CString</b> object.</p>
<p>
If you have implemented bulk row fetching, the current record is always positioned on the first record in a rowset. To use <b>GetFieldValue</b> on a record within a given rowset, you must first call the <a href="_mfc_crecordset.3a3a.setrowsetcursorposition.htm">SetRowsetCursorPosition</a> member function to move the cursor to the desired row within that rowset. Then call <b>GetFieldValue</b> for that row. To implement bulk row fetching, you must specify the <b>CRecordset::useMultiRowFetch</b> option of the <i>dwOptions</i> parameter in the <a href="_mfc_crecordset.3a3a.open.htm">Open</a> member function.</p>
<p>
You can use <b>GetFieldValue</b> to dynamically fetch fields at run time rather than statically binding them at design time. For example, if you have declared a recordset object directly from <b>CRecordset</b>, you must use <b>GetFieldValue</b> to retrieve the field data; record field exchange (RFX), or bulk record field exchange (Bulk RFX), is not implemented.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you declare a recordset object without deriving from <b>CRecordset</b>, do not have the ODBC Cursor Library loaded. The cursor library requires that the recordset have at least one bound column; however, when you use <b>CRecordset</b> directly, none of the columns are bound. The member functions <a href="_mfc_cdatabase.3a3a.openex.htm">CDatabase::OpenEx</a> and <a href="_mfc_cdatabase.3a3a.open.htm">CDatabase::Open</a> control whether the cursor library will be loaded.</p>
<p>
<b>GetFieldValue</b> calls the ODBC API function <b>SQLGetData</b>. If your driver outputs the value <b>SQL_NO_TOTAL</b> for the actual length of the field value, <b>GetFieldValue</b> throws an exception. For more information about <b>SQLGetData</b>, see the <i>ODBC SDK Programmer's Reference</i>.</p>
<p class=label>
<b>Example</b></p>
<p>
The following sample code illustrates calls to <b>GetFieldValue</b> for a recordset object declared directly from <b>CRecordset</b>.</p>
<pre><code>// Create and open a database object;
// do not load the cursor library
CDatabase db;
db.OpenEx( NULL, CDatabase::forceOdbcDialog );

// Create and open a recordset object
// directly from CRecordset. Note that a
// table must exist in a connected database.
// Use forwardOnly type recordset for best
// performance, since only MoveNext is required
CRecordset rs( &amp;db );
rs.Open( CRecordset::forwardOnly,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _T( "SELECT * FROM SomeTable" ) );

// Create a CDBVariant object to
// store field data
CDBVariant varValue;

// Loop through the recordset,
// using GetFieldValue and
// GetODBCFieldCount to retrieve
// data in all columns
short nFields = rs.GetODBCFieldCount( );
while( !rs.IsEOF( ) )
{
 &nbsp; for( short index = 0; index &lt; nFields; index++ )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; rs.GetFieldValue( index, varValue );
 &nbsp;&nbsp;&nbsp;&nbsp; // do something with varValue
 &nbsp; }
 &nbsp; rs.MoveNext( );
}

rs.Close( );
db.Close( );
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Unlike the DAO class <b>CDaoRecordset</b>, <b>CRecordset</b> does not have a <b>SetFieldValue</b> member function. If you create an object directly from <b>CRecordset</b>, it is effectively read-only.</p>
<p>
For more information about bulk row fetching, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Recordset.3a_.Fetching_Records_in_Bulk_.28.ODBC.29">
</object><a href=JavaScript:alink_1.Click()>Recordset: Fetching Records in Bulk (ODBC)</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<a href="_mfc_crecordset.htm">CRecordset Overview</a>  |&nbsp; <a href="_mfc_crecordset_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_crecordset.3a3a.dofieldexchange.htm">CRecordset::DoFieldExchange</a>, <a href="_mfc_crecordset.3a3a.dobulkfieldexchange.htm">CRecordset::DoBulkFieldExchange</a>, <a href="_mfc_crecordset.3a3a.getodbcfieldcount.htm">CRecordset::GetODBCFieldCount</a>, <a href="_mfc_crecordset.3a3a.getodbcfieldinfo.htm">CRecordset::GetODBCFieldInfo</a>, <a href="_mfc_crecordset.3a3a.setrowsetcursorposition.htm">CRecordset::SetRowsetCursorPosition</a></p>
</font></BODY>
</HTML>

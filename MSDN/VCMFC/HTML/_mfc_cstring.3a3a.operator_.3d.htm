<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CString::operator =</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cstring.3a3a.operator_.3d"></a><sup></sup>CString::operator =</h1>
<p>
<b>const</b> <b>CString&amp;</b> <b>operator</b> <b>=(</b> <b>const</b> <b>CString&amp;</b> <i>stringSrc</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p>
<b>const</b> <b>CString&amp;</b> <b>operator</b> <b>=(</b> <b>TCHAR</b> <i>ch</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p>
<b>const</b> <b>CString&amp;</b> <b>operator</b> <b>=(</b> <b>const</b> <b>unsigned</b> <b>char*</b> <i>psz</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p>
<b>const</b> <b>CString&amp;</b> <b>operator</b> <b>=(</b> <b>LPCWSTR</b> <i>lpsz</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p>
<b>const</b> <b>CString&amp;</b> <b>operator</b> <b>=(</b> <b>LPCSTR</b> <i>lpsz</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>CString</b> assignment (<b>=</b>) operator reinitializes an existing <b>CString</b> object with new data. If the destination string (that is, the left side) is already large enough to store the new data, no new memory allocation is performed. You should be aware that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting <b>CString</b> object.</p>
<p class=label>
<b>Example</b></p>
<p>
The following example demonstrates the use of <b>CString::operator =</b>.</p>
<pre><code>// example for CString::operator =
CString s1, s2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Empty CString objects

s1 = "cat";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // s1 = "cat"
s2 = s1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // s1 and s2 each = "cat"
s1 = "the " + s1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Or expressions
s1 = 'x';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Or just individual characters
</code></pre>
<p>
<a href="_mfc_cstring.htm">CString Overview</a>  |&nbsp; <a href="_mfc_cstring_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cstring.3a3a.cstring.htm">CString::CString</a></p>
</font></BODY>
</HTML>

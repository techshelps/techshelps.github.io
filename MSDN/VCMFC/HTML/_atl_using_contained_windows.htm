<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Contained Windows</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_atl_using_contained_windows"></a>Using Contained Windows</h1>
<p>
ATL implements contained windows with <a href="_atl_ccontainedwindow.htm">CContainedWindow</a>. A contained window represents a window that delegates its messages to a container object instead of handling them in its own class.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You do not need to derive a class from <b>CContainedWindow</b> in order to use contained windows.</p>
<p>
With contained windows, you can either superclass an existing Windows class or subclass an existing window. To create a window that superclasses an existing Windows class, first specify the existing class name in the constructor for the <b>CContainedWindow</b> object. Then call <b>CContainedWindow::Create</b>. To subclass an existing window, you don't need to specify a Windows class name (pass <b>NULL</b> to the constructor). Simply call the <b>CContainedWindow::SubclassWindow</b> method with the handle to the window being subclassed.</p>
<p>
You typically use contained windows as data members of a container class. The container does not need to be a window; however, it must derive from <a href="_atl_cmessagemap.htm">CMessageMap</a>.</p>
<p>
A contained window can use alternate message maps to handle its messages. If you have more than one contained window, you should declare several alternate message maps, each corresponding to a separate contained window.</p>
<p>
Following is an example of a container class with two contained windows:</p>
<pre><code>class CMyContainer : public CMessageMap, ...
{
public:
 &nbsp; CContainedWindow m_wndEdit;
 &nbsp; CContainedWindow m_wndList;

 &nbsp; CMyContainer() : m_wndEdit("Edit", this, 1), 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_wndList("List", this, 2)
 &nbsp; {
 &nbsp; }

 &nbsp; ...

 &nbsp; BEGIN_MSG_MAP(CMyContainer)
 &nbsp; ALT_MSG_MAP(1)
 &nbsp;&nbsp;&nbsp;&nbsp; // handlers for the Edit window go here
 &nbsp; ALT_MSG_MAP(2)
 &nbsp;&nbsp;&nbsp;&nbsp; // handlers for the List window go here
 &nbsp; END_MSG_MAP()

};
</code></pre>
<p>
For more information about contained windows, see the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_atl_SUBEDIT">
</object><a href=JavaScript:alink_1.Click()>SUBEDIT</a> sample. For more information about superclassing and subclassing, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_Window_Procedure_Superclassing">
</object><a href=JavaScript:alink_2.Click()>Window Procedure Superclassing</a> and <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_Window_Procedure_Subclassing">
</object><a href=JavaScript:alink_3.Click()>Window Procedure Subclassing</a> in the <i>Win32 SDK</i>.</p>
</font></BODY>
</HTML>

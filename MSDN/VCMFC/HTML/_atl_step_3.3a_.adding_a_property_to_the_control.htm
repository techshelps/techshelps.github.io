<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 3: Adding a Property to the Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_step_3.3a_.adding_a_property_to_the_control"></a>Step 3: Adding a Property to the Control</h1>
<p>
<code>IPolyCtl</code> is the interface that contains your custom methods and properties. The easiest way to add a property to this interface is to right-click it in <b>ClassView</b> and select <b>Add Property</b>.</p>
<p>
<img src="vc30981.gif" border=0></p>
<p>
The <b>Add Property to Interface</b> dialog box appears, allowing you to enter the details of the property you want to add:
<ol>
<li>
On the drop-down list of property types, select <b>short</b>. <br><br></li>
<li>
Type "Sides" as the <b>Property Name</b>. As you edit the <b>Property Name</b> field, the <b>Implementation</b> box shows the lines that will be added to your IDL file.<br><br></li>
<li>
Click <b>OK</b> to finish adding the property.</li>
</ol>
<p>
<img src="cr0108s.gif" border=0></p>
<p>
MIDL (the program that compiles .idl files) defines a <b>Get</b> method that retrieves the property and a <b>Put</b> method that sets the property. When MIDL compiles the file, it automatically defines those two methods in the interface by prepending <code>put_</code> and <code>get_</code> to the property name. </p>
<p>
Along with adding the necessary lines to the .idl file, the <b>Add Property to Interface</b> dialog box also adds the <b>Get</b> and <b>Put</b> function prototypes to the class definition in PolyCtl.h and adds an empty implementation to PolyCtl.cpp.</p>
<p>
To set and retrieve the property you need a place to store it. From <b>FileView</b>, open PolyCtl.h and add the following line at the end of the class definition after <code>m_clrFillColor</code> is defined:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;short m_nSides; 
</code></pre>
<p>
Now you can implement the <b>Get</b> and <b>Put</b> methods. The <code>get_Sides</code> and <code>put_Sides</code> function definitions have been added to PolyCtl.h. You need to add code in PolyCtl.cpp to match the following:</p>
<pre><code>STDMETHODIMP CPolyCtl::get_Sides(short *pVal)
{
   *pVal = m_nSides;
   return S_OK;
}

STDMETHODIMP CPolyCtl::put_Sides(short newVal)
{
   if (newVal &gt; 2 &amp;&amp; newVal &lt; 101)
   {
      m_nSides = newVal;
      return S_OK;
   }
   else
      return Error(_T("Shape must have between 3 and 100 sides"));
}
</code></pre>
<p>
The <code>get_Sides</code> function simply returns the current value of the <b>Sides</b> property through the <code>pVal</code> pointer. In the <code>put_Sides</code> method, you make sure the user is setting the Sides property to an acceptable value. You need more than 2 sides, and since you will be storing an array of points for each side later on, 100 is a reasonable limit for a maximum value. If an invalid value is passed you use the ATL <b>Error</b> function to set the details in the <b>IErrorInfo</b> interface. This is useful if your container needs more information about the error than the returned <b>HRESULT</b>.</p>
<p>
The last thing you need to do for the property is initialize <code>m_nSides</code>. Make a triangle the default shape by adding a line to the constructor in PolyCtl.h:</p>
<pre><code>CPolyCtl()
{
   m_nSides = 3;
}
</code></pre>
<p>
You now have a property called Sides. It's not much use until you do something with it, so next you will change the drawing code to use it.</p>
<p>
<a href="_atl_step_2.3a_.adding_a_control.htm">Back to Step 2</a>  |&nbsp; <a href="_atl_step_4.3a_.changing_the_drawing_code.htm">On to Step 4</a> </p>
</font></BODY>
</HTML>

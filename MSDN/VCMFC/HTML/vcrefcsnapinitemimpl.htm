<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSnapInItemImpl</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefcsnapinitemimpl"></a>CSnapInItemImpl</h1>
<p>
<b>template &lt;class </b><i>T</i><b>, BOOL </b><i>bIsExtension</i><b> = FALSE&gt;</b></p>
<p>
<b>class ATL_NO_VTABLE CSnapInItemImpl : public CSnapInItem</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>T</i></p>
<p class=indent>
Your class, derived from <b>CSnapInItemImpl</b>.</p>
<p class=dt>
<i>bIsExtension</i></p>
<p class=indent>
<b>TRUE</b> if the object is a snap-in extension; otherwise <b>FALSE</b>.</p>
<p>
<b>CSnapInItemImpl</b> provides a basic implementation for a snap-in node object, such as adding menu items and toolbars, and forwarding commands for the snap-in node to the appropriate handler function. These features are implemented using several different interfaces and map types. The default implementation handles notifications sent to the node object by determining the correct instance of the derived class and then forwarding the message to the correct instance.</p>
<p>
You would derive from this class for each different node type in your snap-in object and implement specific notification and command handlers using predefined maps. To add custom functionality, see the <a href="vcconmmcsnapinfaq.htm">MMC Snap-In FAQ</a>.</p>
<p>
<b>#include &lt;atlsnap.h&gt;</b></p>
<p>
<a href="vcrefcsnapinitemimplclassmembers.htm">Class Members</a></p>
</font></BODY>
</HTML>

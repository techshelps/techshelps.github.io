<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CArchive::SerializeClass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_carchive.3a3a.serializeclass"></a>CArchive::SerializeClass</h1>
<p>
<b>void SerializeClass( const CRuntimeClass* </b><i>pRuntimeClass</i><b> );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pRuntimeClass</i></p>
<p class=indent>
A pointer to a run-time class object for the base class.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function when you want to store and load the version information of a base class. <b>SerializeClass</b> reads or writes the reference to a class to the <b>CArchive</b> object, depending on the direction of the <b>CArchive</b>. Use <b>SerializeClass</b> in place of <a href="_mfc_carchive.3a3a.readclass.htm">ReadClass</a> and <a href="_mfc_carchive.3a3a.writeclass.htm">WriteClass</a> as a convenient way to serialize base-class objects; <b>SerializeClass</b> requires less code and fewer parameters.</p>
<p>
Like <b>ReadClass</b>, <b>SerializeClass</b> verifies that the archived class information is compatible with your runtime class. If it is not compatible, <b>SerializeClass</b> will throw a <a href="_mfc_carchiveexception.htm">CArchiveException</a>. </p>
<p>
Your runtime class must use <a href="_mfc_declare_serial.htm">DECLARE_SERIAL</a> and <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a>; otherwise, <b>SerializeClass</b> will throw a <a href="_mfc_cnotsupportedexception.htm">CNotSupportedException</a>.</p>
<p>
Use the <a href="_mfc_runtime_class.htm">RUNTIME_CLASS</a> macro to retrieve the value for the <i>pRuntimeClass</i> parameter. The base class must have used the <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a> macro.</p>
<p class=label>
<b>Example</b></p>
<pre><code>class CBaseClass : public CObject { ... };
class CDerivedClass : public CBaseClass { ... };
void CDerivedClass::Serialize(CArchive&amp; ar)
{
   if (ar.IsStoring())
   {
      //normal code for storing contents 
      //of this object
   }
   else
   {
      //normal code for reading contents 
      //of this object
   }

   //allow the base class to serialize along 
   //with its version information
   ar.SerializeClass(RUNTIME_CLASS(CBaseClass));
   CBaseClass::Serialize(ar);
}</code></pre>
<p>
<a href="_mfc_carchive.htm">CArchive Overview</a>  |&nbsp; <a href="_mfc_carchive_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_carchive.3a3a.readclass.htm">CArchive::ReadClass</a>, <a href="_mfc_carchive.3a3a.writeclass.htm">CArchive::WriteClass</a>, <a href="_mfc_carchive.3a3a.getobjectschema.htm">CArchive::GetObjectSchema</a>, <a href="_mfc_carchive.3a3a.setobjectschema.htm">CArchive::SetObjectSchema</a>,&nbsp; <a href="_mfc_carchiveexception.htm">CArchiveException</a>, <a href="_mfc_cnotsupportedexception.htm">CNotSupportedException</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObArray::SetSize</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cobarray.3a3a.setsize"></a><sup></sup>CObArray::SetSize  </h1>
<p>
<b>void</b> <b>SetSize(</b> <b>int</b> <i>nNewSize</i><b>,</b> <b>int</b> <i>nGrowBy</i> <b>=</b> <b>-1</b> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nNewSize</i></p>
<p class=indent>
The new array size (number of elements). Must be greater than or equal to 0.</p>
<p class=dt>
<i>nGrowBy</i></p>
<p class=indent>
The minimum number of element slots to allocate if a size increase is necessary.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Establishes the size of an empty or existing array; allocates memory if necessary. If the new size is smaller than the old size, then the array is truncated and all unused memory is released. For efficiency, call <b>SetSize</b> to set the size of the array before using it. This prevents the need to reallocate and copy the array each time an item is added.</p>
<p>
The <i>nGrowBy</i> parameter affects internal memory allocation while the array is growing. Its use never affects the array size as reported by <b>GetSize</b> and <b>GetUpperBound</b>.</p>
<p>
The following table shows other member functions that are similar to <b>CObArray::SetSize</b>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Class</b></td>
<td class=label width=72%><b>Member Function</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cbytearray.htm">CByteArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cdwordarray.htm">CDWordArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cptrarray.htm">CPtrArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cstringarray.htm">CStringArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cuintarray.htm">CUIntArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_mfc_cwordarray.htm">CWordArray</a></td>
<td width=72%><b>void SetSize( int </b><i>nNewSize</i><b>, int </b><i>nGrowBy</i><b> = -1 );<br>
</b>&nbsp;&nbsp;&nbsp;<b> throw(</b> <b>CMemoryException</b> <b>);</b></td>
</tr>
</table><br>
<p>
<a href="_mfc_cobarray.htm">CObArray Overview</a>  |&nbsp; <a href="_mfc_cobarray_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

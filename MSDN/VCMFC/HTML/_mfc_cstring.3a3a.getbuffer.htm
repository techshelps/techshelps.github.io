<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CString::GetBuffer</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cstring.3a3a.getbuffer"></a><sup></sup>CString::GetBuffer  </h1>
<p>
<b>LPTSTR</b> <b>GetBuffer(</b> <b>int</b> <i>nMinBufLength</i> <b>);</b><br>
<b>throw(</b> <b>CMemoryException</b> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
An <b>LPTSTR</b> pointer to the object’s (null-terminated) character buffer.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nMinBufLength</i></p>
<p class=indent>
The minimum size of the character buffer in characters. This value does not include space for a null terminator.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Returns a pointer to the internal character buffer for the <b>CString</b> object. The returned <b>LPTSTR</b> is not <b>const</b> and thus allows direct modification of <b>CString</b> contents.</p>
<p>
If you use the pointer returned by <b>GetBuffer</b> to change the string contents, you must call <a href="_mfc_cstring.3a3a.releasebuffer.htm">ReleaseBuffer</a> before using any other <b>CString</b> member functions. </p>
<p>
The address returned by <b>GetBuffer</b> may not be valid after the call to <b>ReleaseBuffer</b> since additional <b>CString</b> operations may cause the <b>CString</b> buffer to be reallocated. The buffer will not be reallocated if you do not change the length of the <b>CString</b>.</p>
<p>
The buffer memory will be freed automatically when the <b>CString</b> object is destroyed. </p>
<p>
Note that if you keep track of the string length yourself, you should not append the terminating null character. You must, however, specify the final string length when you release the buffer with <b>ReleaseBuffer</b>. If you do append a terminating null character, you should pass –1 for the length to <b>ReleaseBuffer</b> and <b>ReleaseBuffer</b> will perform a <b>strlen</b> on the buffer to determine its length. </p>
<p class=label>
<b>Example</b></p>
<p>
The following example demonstrates the use of <b>CString::GetBuffer</b>.</p>
<pre><code>// example for CString::GetBuffer
CString s( "abcd" );
#ifdef _DEBUG
afxDump &lt;&lt; "CString s " &lt;&lt; s &lt;&lt; "\n";
#endif
LPTSTR p = s.GetBuffer( 10 );
strcpy( p, "Hello" );   // directly access CString buffer
s.ReleaseBuffer( );
#ifdef _DEBUG
afxDump &lt;&lt; "CString s " &lt;&lt; s &lt;&lt; "\n";
#endif
</code></pre>
<p>
<a href="_mfc_cstring.htm">CString Overview</a>  |&nbsp; <a href="_mfc_cstring_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cstring.3a3a.getbuffersetlength.htm">CString::GetBufferSetLength</a>, <a href="_mfc_cstring.3a3a.releasebuffer.htm">CString::ReleaseBuffer</a></p>
</font></BODY>
</HTML>

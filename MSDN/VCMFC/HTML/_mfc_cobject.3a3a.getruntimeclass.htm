<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObject::GetRuntimeClass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cobject.3a3a.getruntimeclass"></a><sup></sup>CObject::GetRuntimeClass  </h1>
<p>
<b>virtual</b> <b>CRuntimeClass*</b> <b>GetRuntimeClass(</b> <b>)</b> <b>const;</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
A pointer to the <a href="_mfc_cruntimeclass.htm">CRuntimeClass</a> structure corresponding to this object’s class; never <b>NULL</b>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
There is one <b>CRuntimeClass</b> structure for each <b>CObject</b>-derived class. The structure members are as follows:
<ul type=disc>
<li>
<b>LPCSTR m_lpszClassName</b>&nbsp;&nbsp;&nbsp;A null-terminated string containing the ASCII class name.<br><br></li>
<li>
<b>int m_nObjectSize</b>&nbsp;&nbsp;&nbsp;The size of the object, in bytes. If the object has data members that point to allocated memory, the size of that memory is not included. <br><br></li>
<li>
<b>UINT m_wSchema</b>&nbsp;&nbsp;&nbsp;The schema number ( – 1 for nonserializable classes). See the <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a> macro for a description of schema number.<br><br></li>
<li>
<b>CObject* ( PASCAL* m_pfnCreateObject )( )</b>&nbsp;&nbsp;&nbsp;A function pointer to the default constructor that creates an object of your class (valid only if the class supports dynamic creation; otherwise, returns <b>NULL</b>). <br><br></li>
<li>
<b>CRuntimeClass* ( PASCAL* m_pfn_GetBaseClass )( )</b>&nbsp;&nbsp;&nbsp;If your application is dynamically linked to the AFXDLL version of MFC, a pointer to a function that returns the <b>CRuntimeClass</b> structure of the base class. <br><br></li>
<li>
<b>CRuntimeClass* m_pBaseClass</b>&nbsp;&nbsp;&nbsp;If your application is statically linked to MFC, a pointer to the <b>CRuntimeClass</b> structure of the base class.</li>
</ul>
<p class=indent>
<B><b>Feature Only in Professional and Enterprise Editions</b></B>&nbsp;&nbsp;&nbsp;Static linking to MFC is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vceditions">
</object><a href=JavaScript:alink_1.Click()>Visual C++ Editions</a>.</p>
<p>
This function requires use of the <a href="_mfc_implement_dynamic.htm">IMPLEMENT_DYNAMIC</a> or <a href="_mfc_implement_serial.htm">IMPLEMENT_SERIAL</a> macro in the class implementation. You will get incorrect results otherwise.</p>
<p class=label>
<b>Example</b></p>
<p>
See <a href="_mfc_coblist.3a3a.coblist.htm">CObList::CObList</a> for a listing of the <code>CAge</code> class used in all <b>CObject</b> examples.</p>
<pre><code>// example for CObject::GetRuntimeClass
CAge a(21);
CRuntimeClass* prt = a.GetRuntimeClass();
ASSERT( strcmp( prt-&gt;m_lpszClassName, "CAge" )&nbsp; == 0 );
</code></pre>
<p>
<a href="_mfc_cobject.htm">CObject Overview</a>  |&nbsp; <a href="_mfc_cobject_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cobject.3a3a.iskindof.htm">CObject::IsKindOf</a>, <a href="_mfc_runtime_class.htm">RUNTIME_CLASS</a></p>
</font></BODY>
</HTML>

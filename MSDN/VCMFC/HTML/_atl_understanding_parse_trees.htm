<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Parse Trees</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_understanding_parse_trees"></a>Understanding Parse Trees</h1>
<p>
Using BNF syntax, you define one or more parse trees in your script.</p>
<p>
Each parse tree has the form:</p>
<pre><code>&lt;root key&gt;<b>{</b>&lt;registry expression&gt;<b>}</b>+
</code></pre>
<p>
where:</p>
<pre><code>&lt;root key&gt; ::= <b>HKEY_CLASSES_ROOT </b>|<b> HKEY_CURRENT_USER </b>|
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>HKEY_LOCAL_MACHINE </b>|<b> HKEY_USERS </b>|
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>HKEY_PERFORMANCE_DATA </b>|<b> HKEY_DYN_DATA </b>|
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>HKEY_CURRENT_CONFIG </b>|<b> HKCR </b>|<b> HKCU </b>|
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>HKLM </b>|<b> HKU </b>|<b> HKPD </b>|<b> HKDD </b>|<b> HKCC</b>
&lt;registry expression&gt; ::= &lt;Add Key&gt; | &lt;Delete Key&gt;
&lt;Add Key&gt; ::= [<b>ForceRemove</b> | <b>NoRemove</b> | <b>val</b>]&lt;Key Name&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&lt;Key Value&gt;][<b>{</b>&lt; Add Key&gt;<b>}</b>]
&lt;Delete Key&gt; ::= <b>Delete</b>&lt;Key Name&gt;
&lt;Key Name&gt; ::= <b>'</b>&lt;AlphaNumeric&gt;+<b>'</b>
&lt;AlphaNumeric&gt; ::= <i>any character not NULL, i.e. ASCII 0</i>
&lt;Key Value&gt; ::=<b>=</b> &lt;Key Type&gt;&lt;Key Name&gt;
&lt;Key Type&gt; ::= <b>s</b> | <b>d</b>
&lt;Key Value&gt; ::= <b>'</b>&lt;AlphaNumeric&gt;<b>'</b>
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<code>HKEY_CLASSES_ROOT</code> and <code>HKCR</code> are equivalent; <code>HKEY_CURRENT_USER</code> and <code>HKCU</code> are equivalent; and so on.</p>
<p>
A parse tree can add multiple keys and subkeys to the &lt;root key&gt;. In doing so, it keeps a subkey's handle open until the parser has completed parsing all its subkeys. This approach is more efficient than operating on a single key at a time, as seen in the following parse tree example:</p>
<pre><code>HKEY_CLASSES_ROOT
{
 &nbsp; 'MyVeryOwnKey'
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; 'HasASubKey'
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'PrettyCool?'
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
</code></pre>
<p>
Here, the Registrar initially opens (creates) <code>HKEY_CLASSES_ROOT\MyVeryOwnKey</code>. It then sees that <code>MyVeryOwnKey</code> has a subkey. Rather than close the key to <code>MyVeryOwnKey</code>, the Registrar retains the handle and opens (creates) <code>HasASubKey</code> using this parent handle. (The system registry can be slower when no parent handle is open.) Thus, opening <code>HKEY_CLASSES_ROOT\MyVeryOwnKey</code> and then opening <code>HasASubKey</code> with <code>MyVeryOwnKey</code> as the parent is faster than opening <code>MyVeryOwnKey</code>, closing <code>MyVeryOwnKey</code>, and then opening <code>MyVeryOwnKey\HasASubKey</code>.</p>
</font></BODY>
</HTML>

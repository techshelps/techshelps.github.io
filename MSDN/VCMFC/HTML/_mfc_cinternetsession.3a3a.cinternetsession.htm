<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CInternetSession::CInternetSession</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cinternetsession.3a3a.cinternetsession"></a>CInternetSession::CInternetSession</h1>
<p>
<b>CInternetSession( LPCTSTR </b><i>pstrAgent</i><b> = NULL, DWORD </b><i>dwContext</i><b> = 1, DWORD </b><i>dwAccessType</i><b> = INTERNET_OPEN_TYPE_PRECONFIG, LPCTSTR </b><i>pstrProxyName</i><b> = NULL, LPCTSTR </b><i>pstrProxyBypass</i><b> = NULL, DWORD </b><i>dwFlags</i><b> = 0 );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pstrAgent</i></p>
<p class=indent>
A pointer to a string that identifies the name of the application or entity calling the Internet functions (for example, "Microsoft Internet Browser"). If <i>pstrAgent</i> is <b>NULL</b> (the default), the framework calls the global function <a href="_mfc_afxgetappname.htm">AfxGetAppName</a>, which returns a null-terminated string containing an application’s name. Some protocols use this string to identify your application to the server.</p>
<p class=dt>
<i>dwContext</i></p>
<p class=indent>
The context identifier for the operation. <i>dwContext</i> identifies the operation’s status information returned by <a href="_mfc_cinternetsession.3a3a.onstatuscallback.htm">CInternetSession::OnStatusCallback</a>. The default is set to 1; however, you can explicitly assign a specific context ID for the operation. The object and any work it does will be associated with that context ID. If <i>dwFlags</i> includes <b>INTERNET_FLAG_ASYNC</b>, then objects created by this object have asynchronous behavior as long as a status callback routine is registered. In order for a function to be completed synchronously, <i>dwContext</i> has to be set to zero for that call.</p>
<p class=dt>
<i>dwAccessType</i></p>
<p class=indent>
The type of access required. The following are valid values, exactly one of which may be supplied: 
<ul type=disc>
<li>
<b>INTERNET_OPEN_TYPE_PRECONFIG</b>&nbsp;&nbsp;&nbsp;Preconfigured (in the registry). This access type is set as the default.<br><br></li>
<li>
<b>INTERNET_OPEN_TYPE_DIRECT</b>&nbsp;&nbsp;&nbsp;Direct to Internet. <br><br></li>
<li>
<b>INTERNET_OPEN_TYPE_PROXY</b>&nbsp;&nbsp;&nbsp;Through CERN proxy.</li>
</ul>
<p class=dt>
<i>pstrProxyName</i></p>
<p class=indent>
The name of the preferred CERN proxy if <i>dwAccessType</i> is set as <b>INTERNET_OPEN_TYPE_PROXY</b>. The default is <b>NULL</b>.</p>
<p class=dt>
<i>pstrProxyBypass</i></p>
<p class=indent>
A pointer to a string containing an optional list of server addresses. These addresses may be bypassed when using proxy access. If a <b>NULL</b> value is supplied, the bypass list will be read from the registry. This parameter is meaningful only if <i>dwAccessType</i> is set to <b>INTERNET_OPEN_TYPE_PROXY</b>. </p>
<p class=dt>
<i>dwFlags</i></p>
<p class=indent>
Indicates various options such as caching and asynchronous behavior. The default is set to 0. The possible values include: 
<ul type=disc>
<li>
<b>INTERNET_FLAG_DONT_CACHE</b>&nbsp;&nbsp;&nbsp;Do not cache the data, either locally or in any gateway servers. <br><br></li>
<li>
<b>INTERNET_FLAG_ASYNC</b>&nbsp;&nbsp;&nbsp;Future operations on this object may fail with <b>ERROR_IO_PENDING</b>. A status callback will be made with <b>INTERNET_STATUS_REQUEST_COMPLETE</b> when the operation finishes. This callback is on a thread other than the one for the original request. You must call <a href="_mfc_cinternetsession.3a3a.enablestatuscallback.htm">EnableStatusCallback</a> to establish a status callback routine, or the functions will be completed synchronously. <br><br></li>
<li>
<b>INTERNET_FLAG_OFFLINE</b>&nbsp;&nbsp;&nbsp;Download operations are satisfied through the persistent cache only. If the item does not exist in the cache, an appropriate error code is returned. This flag may be combined with the bitwise <b>OR</b> (<b>|</b>) operator.</li>
</ul>
<p class=label>
<b>Remarks</b></p>
<p>
This member function is called when a <b>CInternetSession</b> object is created. <b>CInternetSession </b>is the first Internet function called by an application. It initializes internal data structures and prepares for future calls from the application. </p>
<p>
If <i>dwFlags</i> includes <b>INTERNET_FLAG_ASYNC</b>, then all handles derived from this handle will have asynchronous behavior as long as a status callback routine is registered.</p>
<p>
If no Internet connection can be opened, <b>CInternetSession</b> throws an <a href="_mfc_afxthrowinternetexception.htm">AfxThrowInternetException</a>.</p>
<p>
<a href="_mfc_cinternetsession.htm">CInternetSession Overview</a>  |&nbsp; <a href="_mfc_cinternetsession_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cinternetsession.3a3a.close.htm">CInternetSession::Close</a>, <a href="_mfc_cinternetsession.3a3a.enablestatuscallback.htm">CInternetSession::EnableStatusCallback</a>, <a href="_mfc_cinternetsession.3a3a.getcontext.htm">CInternetSession::GetContext</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Do I Add Custom Item Types to the Snap-In Object?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefhowdoiaddcustomitemtypestosnapinobject"></a>How Do I Add Custom Item Types to the Snap-In Object?</h1>
<p>
By default, the ATL Object Wizard creates a single data class, derived from <a href="vcrefcsnapinitemimpl.htm">CSnapInItemImpl</a>, for the snap-in object.</p>
<p>
In some cases, you need to implement one or more custom item types for a snap-in object. The simplest approach is to copy and modify a new class from the existing data class and make some additional modifications to the project. This procedure is accomplished in three steps:
<ul type=disc>
<li>
Creating a Custom Item Data Class<br><br></li>
<li>
Implementing the GUIDs for the Custom Data Class<br><br></li>
<li>
Modifying the .RGS File of the Snap-In Project</li>
</ul>
<h2>Creating a Custom Item Data Class</h2>
<p>
The first step involves copying the declaration of the existing data class for the snap-in object and then modifying the results to create a separate class.</p>
<p>
The data class declaration can be found at the beginning of the <i>PROJNAME</i>.H file of your snap-in project. Locate this class declaration, and copy and paste the result below the first declaration.</p>
<p>
In the newly pasted declaration, replace any occurrences of the first class name with the name of the new second class. For instance, if your project data class is called <code>CMySnapInData</code> and you want to create a custom data item class called <code>CMyCustomSnapInData</code>, first copy and paste the declaration of the initial data class. Then search for any occurrences of <code>CMySnapInData</code> (in the pasted section) and replace it with <code>CMyCustomSnapInData</code>.</p>
<h2>Implementing the GUIDs for the Custom Data Class</h2>
<p>
In addition to the class declaration, the data class has a GUID declaration and four static data members. The GUID and data members are defined at the end of the <i>PROJNAME</i>.CPP file. The following is an example declaration:</p>
<pre><code>static const GUID CProjNameGUID_NODETYPE = 
{ 0xb386c6b, 0x8633, 0x11d1, { 0xb0, 0x8, 0x0, 0xc0, 0x4f, 0xb9, 0x94, 0x36 } };
const GUID*&nbsp; CProjNameData::m_NODETYPE = &amp;CsdfdsfGUID_NODETYPE;
const TCHAR* CProjNameData::m_SZNODETYPE = _T("0B386C6B-8633-11D1-B008-00C04FB99436");
const TCHAR* CProjNameData::m_SZDISPLAY_NAME = _T("Csdfdsf");
const CLSID* CProjNameData::m_SNAPIN_CLASSID = &amp;CLSID_sdfdsf;
</code></pre>
<p>
Because these data members depend upon a GUID, you need to first generate a new GUID (using GUIDGEN) and then copy and paste the five declarations, of the initial data class, directly below. After you create a copy, modify it to use the newly created GUID. For example, using the preceding code sample and generating a new GUID, the result for the second data class would be as follows:</p>
<pre><code>static const GUID CMyCustomSnapInGUID_NODETYPE = 
 &nbsp;&nbsp; { 0x8dbeb252, 0x9201, 0x11d1, { 0xa8, 0xd6, 0x0, 0x60, 0x8, 0x93,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x8f, 0xb8 } };
const GUID*&nbsp; CMyCustomSnapIn::m_NODETYPE = &amp;CMySnapInGUID_NODETYPE;
const TCHAR* CMyCustomSnapIn::m_SZNODETYPE =
 &nbsp;&nbsp; _T("8DBEB252-9201-11D1-A8D6-006008938FB8");
const TCHAR* CMyCustomSnapIn::m_SZDISPLAY_NAME = _T("CMyCustomSnapIn");
const CLSID* CMyCustomSnapIn::m_SNAPIN_CLASSID = &amp;CLSID_MyCustomSnapIn;
</code></pre>
<p>
After these modifications are complete, there is one step left: modifying the registry file for the snap-in object.</p>
<h2>Modifying the .RGS File of the Snap-In Project</h2>
<p>
The purpose of the .RGS file is to register the snap-in object and all its components. Because you have added a custom data item class, you need to modify the .RGS file to register this class too.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The GUID you generated in the previous step is used in this step.</p>
<p>
There are two areas in the .RGS file you need to modify. Both can be found quickly by searching for the <code>NodeTypes</code> keyword.</p>
<p>
The first occurrence is under the <code>NoRemove Snapins</code> section. In the nested <code>NodeTypes</code> section, add the new GUID immediately after the existing one, using the same GUID format as the existing one.</p>
<p>
The second occurrence is in the <code>NoRemove NodeTypes</code> section. Copy the code found in this section, paste it in immediately after, and change the referenced GUID to the GUID of the custom class.</p>
<p>
This completes the modifications of the snap-in project. After a successful compile, you will have a new custom item type.</p>
</font></BODY>
</HTML>

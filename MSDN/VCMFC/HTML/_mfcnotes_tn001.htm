<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TN001: Window Class Registration</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfcnotes_tn001"></a><sup></sup>TN001: Window Class Registration</h1>
<p>
This note describes the MFC routines that register the special <b>WNDCLASS</b>es needed by Microsoft Windows. Specific <b>WNDCLASS</b> attributes used by MFC and Windows are discussed.</p>
<p class=label>
<b>The Problem</b></p>
<p>
The attributes of a <b>CWnd</b> object, like an <b>HWND</b> in Windows, are stored in two places: the window object and the <b>WNDCLASS</b>. A <b>WNDCLASS</b> is different than a C++ class. The name of the <b>WNDCLASS</b> is passed to general window creation functions such as <b>CWnd::Create</b> and <b>CFrameWnd::Create</b> in the <i>lpszClassName</i> parameter.</p>
<p>
This <b>WNDCLASS</b> must be registered via one of four means:
<ul type=disc>
<li>
Implicitly by MFC provided <b>WNDCLASS</b>es<br><br></li>
<li>
Implicitly by subclassing a Windows control (or some other control)<br><br></li>
<li>
Explicitly by calling the MFC <b>AfxRegisterWndClass</b> or <b>AfxRegisterClass</b><br><br></li>
<li>
Explicitly by calling the Windows routine <b>RegisterClass</b></li>
</ul>
<p class=label>
<b>WNDCLASSes and MFC</b></p>
<p>
The <b>WNDCLASS</b> structure consists of various fields that describe a window class. Following are the fields and how they are used in an MFC application.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Style</b></td>
<td class=label width=77%><b>Style of window: see below</b></td>
</tr>
<tr valign=top>
<td width=23%>LpfnWndProc</td>
<td width=77%>window proc, must be <b>AfxWndProc</b></td>
</tr>
<tr valign=top>
<td width=23%>CbClsExtra</td>
<td width=77%>not used (should be zero)</td>
</tr>
<tr valign=top>
<td width=23%>CbWndExtra</td>
<td width=77%>not used (should be zero)</td>
</tr>
<tr valign=top>
<td width=23%>HInstance</td>
<td width=77%>automatically filled with <b>AfxGetInstanceHandle</b></td>
</tr>
<tr valign=top>
<td width=23%>HIcon</td>
<td width=77%>icon for frame windows, see below</td>
</tr>
<tr valign=top>
<td width=23%>HCursor</td>
<td width=77%>cursor for when mouse is over window, see below</td>
</tr>
<tr valign=top>
<td width=23%>HbrBackground</td>
<td width=77%>background color, see below</td>
</tr>
<tr valign=top>
<td width=23%>LpszMenuName</td>
<td width=77%>not used (should be NULL)</td>
</tr>
<tr valign=top>
<td width=23%>LpszClassName</td>
<td width=77%>class name, see below</td>
</tr>
</table><br>
<p class=label>
<b>Provided WNDCLASSes</b></p>
<p>
In previous versions of MFC (prior to MFC 4.0), there were a number of predefined Window classes provided. These Window classes are no longer provided by default because of technical problems related to versioning (multiple versions of MFC loaded in one address space) as well as concerns relating to the fact that both MFC applications and OLE Controls may use the MFC DLLs.</p>
<p>
The following reference is provided to help migrate code that uses these previously provided <b>WNDCLASS</b>es. Applications should use <b>AfxRegisterWndClass</b> (with the appropriate parameters) in place of these classes.</p>
<p>
The following shows the classes and their attributes:
<ul type=disc>
<li>
"AfxWnd" is used for all child windows created with <b>CWnd::Create</b>.<ul type=disc>
<li>
class style : CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW<br><br></li>
<li>
no icon<br><br></li>
<li>
arrow cursor<br><br></li>
<li>
no background color</li>
</ul>
</li>
<li>
"AfxFrameOrView" is used for frame windows and views (including stand-alone <b>CFrameWnd</b>s and <b>CMDIChildWnd</b>s).<ul type=disc>
<li>
class style : CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW;<br><br></li>
<li>
icon AFX_IDI_STD_FRAME<br><br></li>
<li>
arrow cursor<br><br></li>
<li>
COLOR_WINDOW background color</li>
</ul>
</li>
<li>
"AfxMDIFrame" is used for the MDI frame window (that is, the parent) created with <b>CMDIFrameWnd::Create</b>.<ul type=disc>
<li>
class style : CS_DBLCLKS [ reduces flash during resizing ]<br><br></li>
<li>
icon AFX_IDI_STD_MDIFRAME<br><br></li>
<li>
arrow cursor<br><br></li>
<li>
no background color</li>
</ul>
</li>
<li>
"AfxControlBar" is used for the standard control bar implementation.<ul type=disc>
<li>
class style : 0 [ reduces flash during resizing, no double clicks ]<br><br></li>
<li>
no icon<br><br></li>
<li>
arrow cursor<br><br></li>
<li>
gray background color (<b>COLOR_BTNFACE</b>)</li>
</ul>
</li>
</ul>
<p>
If the application provides a resource with the specified resource ID (for example, AFX_IDI_STD_FRAME) ID, MFC will use that resource. Otherwise the default resource is used. For the icon, the standard application icon is used, and for the cursor, the standard arrow cursor is used.</p>
<p>
There are two icons that support MDI applications with single document types (one icon for the main application, the other icon for iconic document/MDIChild windows). For multiple document types with different icons, you must register additional <b>WNDCLASS</b>es or use the <b>CFrameWnd::LoadFrame</b> function.</p>
<p>
<b>CFrameWnd::LoadFrame</b> will automatically register a <b>WNDCLASS</b> using the standard "AfxFrameOrView" attributes but using the icon ID you specify as the first parameter to LoadFrame.</p>
<p>
The values for background color and cursor for the <b>MDIFrameWnd</b> are not used since the client area of the <b>MDIFrameWnd</b> is completely covered by the "MDICLIENT" window. Microsoft does not encourage subclassing the "MDICLIENT" window so use the standard colors and cursor types when possible.</p>
<p class=label>
<b>Subclassing Controls</b></p>
<p>
If you subclass or superclass a Windows control (for example, <b>CButton</b>) then your class automatically gets the <b>WNDCLASS</b> attributes provided in the Windows implementation of that control.</p>
<p class=label>
<b>The AfxRegisterWndClass Function</b></p>
<p>
MFC provides a helper routine for registering a window class. Given a set of attributes (window class style, cursor, background brush, and icon), a synthetic name is generated, and the resulting window class is registered. For example,</p>
<pre><code>const char* AfxRegisterWndClass(UINT nClassStyle, HCURSOR hCursor,    HBRUSH hbrBackground, HICON hIcon);
</code></pre>
<p>
This function returns a temporary string of the generated registered window class name. See the <i>Class Library Reference</i> for more details.</p>
<p>
The string returned is a temporary pointer to a static string buffer which is valid until the next call to <b>AfxRegisterWndClass</b>. If you want to keep this string around, store it in a <b>CString</b> variable. For example,</p>
<pre><code>CString strWndClass = AfxRegisterWndClass(CS_DBLCLK, ...);
...
CWnd* pWnd = new CWnd;
pWnd-&gt;Create(strWndClass, ...);
...
</code></pre>
<p>
<b>AfxRegisterWndClass</b> will throw a <b>CResourceException</b> if the window class failed to register (either because of bad parameters, or out of Windows memory).</p>
<p class=label>
<b>The RegisterClass and AfxRegisterClass Functions</b></p>
<p>
If you want to do anything more sophisticated than what <b>AfxRegisterWndClass</b> provides, you may call the Windows API <b>RegisterClass</b> or the MFC function <b>AfxRegisterClass</b>. The <b>CWnd</b>, <b>CFrameWnd</b> and <b>CMDIChildWnd</b> <b>Create</b> functions take a <i>lpszClassName</i> string name for the window class as the first parameter. Any window class name can be used, regardless of how it was registered.</p>
<p>
It is important to use <b>AfxRegisterClass</b> (or <b>AfxRegisterWndClass</b>) in a DLL on Win32. Win32 does not automatically unregister classes registered by a DLL, so this must be done explicitly when the DLL is terminated. By using <b>AfxRegisterClass</b> instead of <b>RegisterClass</b> this is done automatically for you. <b>AfxRegisterClass</b> maintains a list of unique classes registered by your DLL and will automatically unregister then when the DLL terminates. When using <b>RegisterClass</b> in a DLL, you must insure that all classes are unregistered when the DLL is terminated (in your <b>DllMain</b> function). Failure to do so may cause <b>RegisterClass</b> to fail unexpectedly when your DLL is used by another client application.</p>
<p>
<a href="_mfcnotes_technical_notes_by_number.htm">Technical Notes by Number</a>  |&nbsp; <a href="_mfcnotes_technical_notes_by_category.htm">Technical Notes by Category</a></p>
</font></BODY>
</HTML>

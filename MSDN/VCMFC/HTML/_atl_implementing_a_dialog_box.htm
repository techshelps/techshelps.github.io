<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Dialog Box</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_implementing_a_dialog_box"></a>Implementing a Dialog Box</h1>
<p>
There are two ways to add a dialog box to your ATL project: use the ATL Object Wizard or add it manually.</p>
<h2>Adding a Dialog Box with the ATL Object Wizard</h2>
<p>
In the ATL Object Wizard (<b>Insert</b> menu, <b>New ATL Object</b> command), highlight the <b>miscellaneous</b> category in the left pane, then double-click the <b>Dialog</b> object in the right pane to add a dialog box to your ATL project. Fill in the <b>ATL Object Wizard Properties</b> dialog box as appropriate and click <b>OK</b>. The ATL Object Wizard adds a class derived from <a href="vcrefcaxdialogimpl.htm">CAxDialogImpl</a> to your project, and opens the resource editor with your dialog box template.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;If your dialog box is derived from <b>CAxDialogImpl</b> , it can host both ActiveX and Windows controls. If you don’t want the overhead of ActiveX control support in your dialog box class, use <a href="vcrefcsimpledialog.htm">CSimpleDialog</a> or <a href="_atl_cdialogimpl.htm">CDialogImpl</a> instead.</p>
<p>
Message and event handlers can be added to your dialog class from ClassView in the same way as to an MFC class. In ClassView, right-click the class and choose <b>Add Windows Message Handler</b> to open the <b>New Windows Message and Event Handlers</b> dialog box. For more information, see <a href="vcrefaddingmessagehandler.htm">Adding a Message Handler</a>.</p>
<p>
To open the <b>New Windows Message and Event Handlers</b> dialog box from the dialog box template, right-click a control in the dialog box template and choose the <b>Events</b> command from the shortcut menu. In an ATL project, the dialog box class is highlighted in the <b>Class or object to handle</b> box; whereas, for an MFC project, the control is highlighted.</p>
<h2>Adding a Dialog Box Manually</h2>
<p>
Implementing a dialog box is similar to implementing a window. You derive a class from either <a href="vcrefcaxdialogimpl.htm">CAxDialogImpl</a>, <a href="_atl_cdialogimpl.htm">CDialogImpl</a>, or <a href="vcrefcsimpledialog.htm">CSimpleDialog</a> and declare a <a href="_atl_message_maps.htm">message map</a> to handle messages. However, you must also specify a dialog template resource ID in your derived class. Your class must have a data member called <code>IDD</code> to hold this value. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you create a dialog box using the ATL Object Wizard, the wizard automatically adds the <code>IDD</code> member as an <b>enum</b> type.</p>
<p>
<b>CDialogImpl</b> allows you to implement a modal or a modeless dialog box that hosts Windows controls. <b>CAxDialogImpl</b> allows you to implement a modal or a modeless dialog box that hosts both ActiveX and Windows controls.</p>
<p>
To create a modal dialog box, create an instance of your <b>CDialogImpl</b>-derived (or <b>CAxDialogImpl</b>-derived) class and then call the <a href="_atl_cdialogimpl.3a3a.domodal.htm">DoModal</a> method. To close a modal dialog box, call the <a href="_atl_cdialogimpl.3a3a.enddialog.htm">EndDialog</a> method from a message handler. To create a modeless dialog box, call the <a href="_atl_cdialogimpl.3a3a.create.htm">Create</a> method instead of <b>DoModal</b>. To destroy a modeless dialog box, call <a href="vcrefcdialogimpldestroywindow.htm">DestroyWindow</a>.</p>
<p>
If your dialog box object contains ActiveX controls, and you are handling events from these controls, you will need to advise and unadvise all ActiveX control interfaces. This can be done by adding the following line of code to your <code>InitDialog</code> function:</p>
<pre><code>AtlAdviseSinkMap(pMyDlg, TRUE);
</code></pre>
<p>
To unadvise any ActiveX controls, add the following line of code to your <code>EndDialog</code> function (or the function invoked upon termination of your dialog box object):</p>
<pre><code>AtlAdviseSinkMap(pMyDlg, FALSE);
</code></pre>
<p>
Implement the dialog box's message handlers as you would the handlers in a <b>CWindowImpl</b>-derived class. If there is a message-specific return value, return it as an <code>LRESULT</code>. The returned <code>LRESULT</code> values are mapped by ATL for proper handling by the Windows dialog manager. For details, see the source code for <a href="_atl_cdialogimpl.3a3a.dialogproc.htm">CDialogImplBaseT::DialogProc</a> in atlwin.h.</p>
<p class=label>
<b>Example</b></p>
<p>
The following class implements a dialog box:</p>
<pre><code>class CMyDialog : public CDialogImpl&lt;CMyDialog&gt;, ...
{
public:
 &nbsp; enum { IDD = IDD_MYDIALOG };

 &nbsp; BEGIN_MSG_MAP(CMyDialog)
 &nbsp;&nbsp;&nbsp;&nbsp; MESSAGE_HANDLER(WM_INITDIALOG, OnInitDialog)
 &nbsp; END_MSG_MAP()

 &nbsp; LRESULT OnInitDialog(UINT uMsg, WPARAM wParam, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LPARAM lParam, BOOL&amp; bHandled)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Do some initialization code
 &nbsp;&nbsp;&nbsp;&nbsp; return 1;
 &nbsp; }
};
</code></pre>
</font></BODY>
</HTML>

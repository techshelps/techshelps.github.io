<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DFX_Text</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_dfx_text"></a>DFX_Text</h1>
<p>
<b>void</b> <b>AFXAPI</b> <b>DFX_Text(</b> <b>CDaoFieldExchange*</b> <i>pFX</i><b>,</b> <b>LPCTSTR</b> <i>szName</i><b>,</b> <b>CString&amp;</b> <i>value</i><b>,</b> <b>int</b> <i>nPreAllocLength</i> <b>=</b> <b>AFX_DAO_TEXT_DEFAULT_SIZE</b>, <b>DWORD</b> <i>dwBindOptions</i> <b>= AFX_DAO_ENABLE_FIELD_CACHE</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pFX</i></p>
<p class=indent>
A pointer to an object of class <a href="_mfc_cdaofieldexchange.htm">CDaoFieldExchange</a>. This object contains information to define the context for each call of the function. For more information about the operations a <b>CDaoFieldExchange</b> object can specify, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_Record_Field_Exchange.3a_.How_DFX_Works">
</object><a href=JavaScript:alink_1.Click()>DAO Record Field Exchange: How DFX Works</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p class=dt>
<i>szName</i></p>
<p class=indent>
The name of a data column.</p>
<p class=dt>
<i>value</i></p>
<p class=indent>
The value stored in the indicated data member — the value to be transferred. For a transfer from recordset to data source, the value, of type <a href="_mfc_cstring.htm">CString</a>, is taken from the specified data member. For a transfer from data source to recordset, the value is stored in the specified data member.</p>
<p class=dt>
<i>nPreAllocSize</i></p>
<p class=indent>
The framework preallocates this amount of memory. If your data is larger, the framework will allocated more space as needed. For better performance, set this size to a value large enough to prevent reallocations.</p>
<p class=dt>
<i>dwBindOptions</i></p>
<p class=indent>
An option that lets you take advantage of MFC’s double buffering mechanism for detecting recordset fields that have changed. The default, <b>AFX_DAO_ENABLE_FIELD_CACHE</b>, uses double buffering. The other possible value is <b>AFX_DAO_DISABLE_FIELD_CACHE</b>. If you specify this value, MFC does no checking on this field. You must call <a href="_mfc_cdaorecordset.3a3a.setfielddirty.htm">SetFieldDirty</a> and <a href="_mfc_cdaorecordset.3a3a.setfieldnull.htm">SetFieldNull</a> yourself. </p>
<p class=tl>
These options are explained further in the article <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_Record_Field_Exchange.3a_.Double_Buffering_Records">
</object><a href=JavaScript:alink_2.Click()>DAO Record Field Exchange: Double Buffering Records</a> in <i>Visual C++ Programmer's Guide</i>.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can control whether data is double buffered by default by setting <a href="_mfc_cdaorecordset.3a3a.m_bcheckcachefordirtyfields.htm">CDaoRecordset::m_bCheckCacheForDirtyFields</a>.</p><p class=label>
<b>Remarks</b></p>
<p>
The <b>DFX_Text</b> function transfers <b>CString</b> data between the field data members of a <a href="_mfc_cdaorecordset.htm">CDaoRecordset</a> object and columns of a record on the data source. Data is mapped between type <b>DAO_CHAR</b> in DAO (or, if the symbol <b>_UNICODE</b> is defined, <b>DAO_WCHAR</b>) and type <a href="_mfc_cstring.htm">CString</a> in the recordset.</p>
<p class=label>
<b>Example</b></p>
<p>
This example shows several calls to <b>DFX_Text</b>. Notice also the two calls to <a href="_mfc_cdaofieldexchange.3a3a.setfieldtype.htm">CDaoFieldExchange::SetFieldType</a>. ClassWizard normally writes the second call to <b>SetFieldType</b> and its associated <b>DFX</b> calls. You must write the first call and its <b>DFX</b> call. It is recommended that you put any parameter items before the “//{{AFX_FIELD_MAP” comment. You must put parameters outside the comments.</p>
<pre><code>//Example for DFX_Text
void CSections::DoFieldExchange(CDaoFieldExchange* pFX)
{
 &nbsp;&nbsp; pFX-&gt;SetFieldType(CDaoFieldExchange::param);
 &nbsp;&nbsp; DFX_Text(pFX, "Name", m_strNameParam);
 &nbsp;&nbsp; //{{AFX_FIELD_MAP(CSections)
 &nbsp;&nbsp; pFX-&gt;SetFieldType(CDaoFieldExchange::outputColumn);
 &nbsp;&nbsp; DFX_Text(pFX, "CourseID", m_strCourseID);
 &nbsp;&nbsp; DFX_Text(pFX, "InstructorID", m_strInstructorID);
 &nbsp;&nbsp; DFX_Short(pFX, "LabFee", m_nRoomNo);
 &nbsp;&nbsp; DFX_Text(pFX, "LabFee", m_strSchedule);
 &nbsp;&nbsp; DFX_Short(pFX, "SectionNo", m_nSectionNo);
 &nbsp;&nbsp; DFX_Currency(pFX, "LabFee", m_currLabFee);
 &nbsp;&nbsp; //}}AFX_FIELD_MAP
}
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_dfx_bool.htm">DFX_Bool</a>, <a href="_mfc_dfx_long.htm">DFX_Long</a>, <a href="_mfc_dfx_currency.htm">DFX_Currency</a>, <a href="_mfc_dfx_short.htm">DFX_Short</a>, <a href="_mfc_dfx_single.htm">DFX_Single</a>, <a href="_mfc_dfx_double.htm">DFX_Double</a>, <a href="_mfc_dfx_datetime.htm">DFX_DateTime</a>, <a href="_mfc_dfx_byte.htm">DFX_Byte</a>, <a href="_mfc_dfx_binary.htm">DFX_Binary</a>, <a href="_mfc_dfx_longbinary.htm">DFX_LongBinary</a>, <a href="_mfc_cdaofieldexchange.3a3a.setfieldtype.htm">CDaoFieldExchange::SetFieldType</a></p>
</font></BODY>
</HTML>

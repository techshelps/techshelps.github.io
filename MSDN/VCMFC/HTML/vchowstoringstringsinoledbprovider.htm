<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storing Strings in the OLE DB Provider</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vchowstoringstringsinoledbprovider"></a>Storing Strings in the OLE DB Provider</h1>
<p>
In MyProviderRS.h, the ATL Object Wizard creates a default User Record called<b> </b><code>CWindowsFile</code>. To handle the two strings, either edit <code>CWindowsFile</code> or add your own User Record, as shown here: </p>
<pre><code>////////////////////////////////////////////////////////////////////////
class CAgentMan: 
   public WIN32_FIND_DATA
   DWORD dwBookmark;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this
   TCHAR szCommand[256];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this
   TCHAR szText[256];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this
   TCHAR szCommand2[256];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this
   TCHAR szText2[256];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this
{
public:
BEGIN_PROVIDER_COLUMN_MAP(CAgentMan)
   PROVIDER_COLUMN_ENTRY("FileAttributes", 1, dwFileAttributes)
   PROVIDER_COLUMN_ENTRY("FileSizeHigh", 2, nFileSizeHigh)
   PROVIDER_COLUMN_ENTRY("FileSizeLow", 3, nFileSizeLow)
   PROVIDER_COLUMN_ENTRY("FileName", 4, cFileName)
   PROVIDER_COLUMN_ENTRY("AltFileName", 5, cAlternateFileName)
END_PROVIDER_COLUMN_MAP()
   bool operator==(const CAgentMan&amp; am) // This is optional 
   {
      return (lstrcmpi(cFileName, wf.cFileName) == 0);
   }
};
</code></pre>
<p>
The data members <code>szCommand</code> and <code>szText</code> represent the two strings, with <code>szCommand2</code> and <code>szText2</code> providing additional columns if needed. The data member <code>dwBookmark</code> is not needed for this simply read-only provider, but will be used later to <a href="vchowaddingirowsetlocateinterface.htm">add an IRowsetLocate interface</a>. The <b>==</b> operator compares instances. (Implementing this operator is optional.)</p>
<p>
To support the two strings, the <b>PROVIDER_COLUMN_MAP</b> needs modification as well. Replace the <b>PROVIDER_COLUMN_MAP</b> shown above with the one shown here:</p>
<pre><code>BEGIN_PROVIDER_COLUMN_MAP()
 &nbsp;&nbsp; PROVIDER_COLUMN_ENTRY_STR(OLESTR("Command"), 1, 256, GUID_NULL, CAgentMan, szCommand)
 &nbsp;&nbsp; PROVIDER_COLUMN_ENTRY_STR(OLESTR("Text"),2, 256, GUID_NULL, CAgentMan, szText) 
 &nbsp;&nbsp; PROVIDER_COLUMN_ENTRY_STR(OLESTR("Command2"), 3, 256, GUID_NULL, CAgentMan, szCommand2)
 &nbsp;&nbsp; PROVIDER_COLUMN_ENTRY_STR(OLESTR("Text2"),4, 256, GUID_NULL, CAgentMan, szText2)
END_PROVIDER_COLUMN_MAP()
</code></pre>
<p>
When this is done, your provider should be ready to compile and run. To test the provider, you need a consumer with matching functionality. <a href="vcfaqimplementingasimpleconsumer.htm">Implementing a Simple Consumer</a> shows how to create such a test consumer. Run the test consumer with the provider. Verify that the test consumer retrieves the proper strings from the provider when you click the <b>Run</b> button on the test consumer dialog box.</p>
<p>
Once you have successfully tested your provider, you may want to enhance its functionality by implementing additional interfaces. An example is shown in the next section, <a href="vchowaddingirowsetlocateinterface.htm">Enhancing the Simple Read-Only Provider</a>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AfxCheckMemory</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_afxcheckmemory"></a>AfxCheckMemory&nbsp; </h1>
<p>
<b>BOOL</b> <b>AfxCheckMemory(</b> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if no memory errors; otherwise 0.</p>
<p class=label>
<b>Remarks</b></p>
<p>
This function validates the free memory pool and prints error messages as required. If the function detects no memory corruption, it prints nothing.</p>
<p>
All memory blocks currently allocated on the heap are checked, including those allocated by <b>new</b> but not those allocated by direct calls to underlying memory allocators, such as the <b>malloc</b> function or the <b>GlobalAlloc</b> Windows function. If any block is found to be corrupted, a message is printed to the debugger output.</p>
<p>
If you include the line</p>
<pre><code>#define new DEBUG_NEW
</code></pre>
<p>
in a program module, then subsequent calls to <b>AfxCheckMemory</b> show the filename and line number where the memory was allocated.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If your module contains one or more implementations of serializable classes, then you must put the <code>#define</code> line after the last <b>IMPLEMENT_SERIAL</b> macro call.</p>
<p class=indent>
This function works only in the Debug version of MFC.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// example for AfxCheckMemory
CAge* pcage = new CAge( 21 );&nbsp; // CAge is derived from CObject.
Age* page = new Age( 22 );&nbsp;&nbsp;&nbsp;&nbsp; // Age is NOT derived from CObject.
*(((char*) pcage) - 1) = 99;&nbsp;&nbsp; // Corrupt preceding guard byte
*(((char*) page) - 1) = 99;&nbsp;&nbsp;&nbsp; // Corrupt preceding guard byte
AfxCheckMemory();
</code></pre>
<p>
The results from the program are as follows:</p>
<pre><code>memory check error at $0067495F = $63, should be $FD
DAMAGE: before Non-Object block at $00674960
Non-Object allocated at file test02.cxx(48)
Non-Object located at $00674960 is 2 bytes long
memory check error at $00674905 = $63, should be $FD
DAMAGE: before Object block at $00674906
Object allocated at file test02.cxx(47)
Object located at $00674906 is 6 bytes long
</code></pre>
</font></BODY>
</HTML>

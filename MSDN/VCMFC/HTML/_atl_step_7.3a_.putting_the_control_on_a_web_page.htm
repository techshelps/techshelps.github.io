<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 7: Putting the Control on a Web Page</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_step_7.3a_.putting_the_control_on_a_web_page"></a>Step 7: Putting the Control on a Web Page</h1>
<p>
Your control is now finished. To see your control work in a real-world situation, put it on a Web page. When the ATL Object Wizard creates the initial control it also creates an HTML file that contains the control. You can open up the PolyCtl.htm file in Internet Explorer and you see your control on a Web page.</p>
<p>
The control doesn't do anything yet, so change the Web page to respond to the events that you send. Open PolyCtl.htm in Visual C++ (if the file does not appear in <b>FileView</b>, select <b>Open</b> from the <b>File</b> menu to open the file) and add the lines in <b>bold</b>. </p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ATL 3.0 test page for object PolyCtl&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;OBJECT ID="PolyCtl" &lt;
 CLASSID="CLSID:4CBBC676-507F-11D0-B98B-000000000000"&gt;
&gt;

&lt;/OBJECT&gt;

<span class=cfe><b>&lt;SCRIPT LANGUAGE="VBScript"&gt;</b></span>

<span class=cfe><b>&lt;!--</b></span>

<span class=cfe><b>Sub PolyCtl_ClickIn(x, y)</b></span>

<span class=cfe><b>   PolyCtl.Sides = PolyCtl.Sides + 1</b></span>

<span class=cfe><b>End Sub</b></span>

<span class=cfe><b>Sub PolyCtl_ClickOut(x, y)</b></span>

<span class=cfe><b>   PolyCtl.Sides = PolyCtl.Sides - 1</b></span>

<span class=cfe><b>End Sub</b></span>

<span class=cfe><b>--&gt;</b></span>

<span class=cfe><b>&lt;/SCRIPT&gt;</b></span>

&lt;/BODY&gt;

&lt;/HTML&gt;

</code></pre>
<p>
You have added some VBScript code that gets the Sides property from the control, and increases the number of sides by one if you click inside the control. If you click outside the control you reduce the number of sides by one.</p>
<p>
Start up Internet Explorer and make sure your <b>Security</b> settings are set to <b>Medium</b>:
<ol>
<li>
Click <b>Internet Options</b> on the <b>View</b> menu.<br><br></li>
<li>
Select the <b>Security</b> tab and set the security to <b>Medium</b>, if necessary, then click <b>OK</b>.</li>
</ol>
<p>
Now open PolyCtl.htm in Internet Explorer. After you click on the control, a <b>Security Alert</b> dialog box informs you that Internet Explorer doesn't know if the control is safe to script.</p>
<p>
What does this mean? Imagine if you had a control that, for example, displayed a file, but also had a <code>Delete</code> method that deleted a file. The control would be safe if you just viewed it on a page, but wouldn't be safe to script since someone could call the <code>Delete</code> method. This message is Internet Explorer's way of saying that it doesn't know if someone could do damage with this control, so it is asking the user.</p>
<p>
You know your control is safe, so click <b>Yes</b>. Now click inside the polygon; the number of sides increases by one. Click outside the polygon to reduce the number of sides. If you try to reduce the number of sides below three, you will see the error message that you set.</p>
<p>
The following figure shows the control running in Internet Explorer after you have clicked inside the polygon twice.</p>
<p>
<img src="vc309c1.gif" border=0></P><p>
Since you know your control is always safe to script, it would be good to let Internet Explorer know, so that it doesn't need to show the <b>Security Alert</b> dialog box. You can do this through the <b>IObjectSafety</b> interface. ATL supplies an implementation of this interface in the class <a href="_atl_iobjectsafetyimpl.htm">IObjectSafetyImpl</a>.</p>
<p>
To add the interface to your control, just add <b>IObjectSafetyImpl</b> to your list of inherited classes and add an entry for it in your COM map.</p>
<p>
Add the following line to the end of the list of inherited classes in PolyCtl.h, remembering to add a comma to the previous line:</p>
<pre><code>   public IObjectSafetyImpl&lt;CPolyCtl, INTERFACESAFE_FOR_UNTRUSTED_CALLER&gt;
</code></pre>
<p>
Then add the following line to the COM map in PolyCtl.h:</p>
<pre><code>   COM_INTERFACE_ENTRY(IObjectSafety)
</code></pre>
<p>
Now build the control. Once the build has finished, open PolyCtl.htm in Internet Explorer again. This time the Web page should be displayed directly without the <b>Safety Violation</b> dialog box. Click inside and outside the polygon to confirm that the scripting is working.</p>
<p>
<a href="_atl_step_6.3a_.adding_a_property_page.htm">Back to Step 6</a>  |&nbsp; <a href="_atl_atl_references.htm">On to References</a> </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Backus Nauer Form (BNF) Syntax</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_understanding_backus_nauer_form_.28.bnf.29_.syntax"></a>Understanding Backus Nauer Form (BNF) Syntax</h1>
<p>
The scripts used by the ATL Registrar follow BNF syntax and use the notation shown in the next table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Convention/Symbol</b></td>
<td class=label width=69%><b>What It Means</b></td>
</tr>
<tr valign=top>
<td width=31%><code>::=</code></td>
<td width=69%>Equivalent</td>
</tr>
<tr valign=top>
<td width=31%><code>|</code></td>
<td width=69%>OR</td>
</tr>
<tr valign=top>
<td width=31%><code>X+</code></td>
<td width=69%>One or more <code>X</code>s.</td>
</tr>
<tr valign=top>
<td width=31%><code>[X]</code></td>
<td width=69%><code>X</code> is optional. Optional delimiters are denoted by <code>[]</code>.</td>
</tr>
<tr valign=top>
<td width=31%>Any <b>bold</b> text</td>
<td width=69%>A string literal.</td>
</tr>
<tr valign=top>
<td width=31%>Any <i>italicized</i> text</td>
<td width=69%>How to construct the string literal.</td>
</tr>
</table><br>
<p>
As indicated in the preceding table, registrar scripts use string literals. These values are actual text that must appear in your script. The following table describes the string literals used in an ATL Registrar script.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>String Literal</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><b>ForceRemove</b></td>
<td width=68%>Completely remove the following key (if it exists) and then recreate it.</td>
</tr>
<tr valign=top>
<td width=32%><b>NoRemove</b></td>
<td width=68%>Do not remove the following key during Unregister.</td>
</tr>
<tr valign=top>
<td width=32%><b>val</b></td>
<td width=68%>The following <code>&lt;Key Name&gt;</code> is actually a named value.</td>
</tr>
<tr valign=top>
<td width=32%><b>Delete</b></td>
<td width=68%>Delete the following key during Register.</td>
</tr>
<tr valign=top>
<td width=32%><b>s</b></td>
<td width=68%>The following value is a string.</td>
</tr>
<tr valign=top>
<td width=32%><b>d</b></td>
<td width=68%>The following value is a <b>DWORD</b>.</td>
</tr>
</table><br>
<h2>BNF Syntax Examples</h2>
<p>
Here are a few syntax examples to help you understand how the notation and string literals work in an ATL Registrar script.</p>
<p>
<b>Syntax example 1</b></p>
<pre><code>&lt;registry expression&gt; ::= &lt;Add Key&gt;
</code></pre>
<p>
specifies that <code>registry expression</code> is equivalent to <code>Add Key</code>.</p>
<p>
<b>Syntax example 2</b></p>
<pre><code>&lt;registry expression&gt; ::= &lt;Add Key&gt; | &lt;Delete Key&gt;
</code></pre>
<p>
specifies that <code>registry expression</code> is equivalent to either <code>Add Key</code> or <code>Delete Key</code>.</p>
<p>
<b>Syntax example 3</b></p>
<pre><code>&lt;Key Name&gt; ::= <b>'</b>&lt;AlphaNumeric&gt;+<b>'</b>
</code></pre>
<p>
specifies that <code>Key Name</code> is equivalent to one or more <code>AlphaNumerics</code>.</p>
<p>
<b>Syntax example 4</b></p>
<pre><code>&lt;Add Key&gt; ::= [<b>ForceRemove</b> | <b>NoRemove</b> | <b>val</b>]&lt;Key Name&gt;
</code></pre>
<p>
specifies that <code>Add Key</code> is equivalent to <code>Key Name</code>, and that the string literals, <code>ForceRemove</code>, <code>NoRemove</code>, and <code>val</code>, are optional.</p>
<p>
<b>Syntax example 5</b></p>
<pre><code>&lt;AlphaNumeric&gt; ::= <i>any character not NULL, i.e. ASCII 0</i>
</code></pre>
<p>
specifies that <code>AlphaNumeric</code> is equivalent to any non-NULL character.</p>
</font></BODY>
</HTML>

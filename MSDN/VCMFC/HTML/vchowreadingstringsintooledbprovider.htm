<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Strings into the OLE DB Provider</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vchowreadingstringsintooledbprovider"></a>Reading Strings into the OLE DB Provider</h1>
<p>
The <code>RMyProviderRowset::Execute</code> function opens a file and reads strings. The consumer passes the filename to the provider by calling <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="oledbicommandtext__setcommandtext">
</object><a href=JavaScript:alink_1.Click()>ICommandText::SetCommandText</a>. The provider receives the filename and stores it in the member variable <code>m_szCommandText</code>. <code>Execute</code> reads the filename from <code>m_szCommandText</code>. If the filename is invalid or the file is unavailable, <code>Execute</code> returns an error. Otherwise, it opens the file and calls <b>fgets</b> to retrieve the strings. For each set of strings it reads, <code>Execute</code> creates an instance of the User Record (<code>CAgentMan</code>) and places it into an array.</p>
<p>
If the file can’t be opened, <code>Execute</code> must return <b>DB_E_NOTABLE</b>. If it returns <b>E_FAIL</b> instead, the provider will not work with many consumers and will not pass the OLE DB conformance tests.</p>
<p>
The edited <code>Execute</code> function looks like this:</p>
<pre><code>/////////////////////////////////////////////////////////////////////////
// MyProviderRS.h
class RMyProviderRowset : public CRowsetImpl&lt; RMyProviderRowset, CAgentMan, CRMyProviderCommand&gt;
{
public:
   
HRESULT Execute(DBPARAMS * pParams, LONG* pcRowsAffected)
{
 USES_CONVERSION;
 FILE* pFile;
 TCHAR szString[256];
 TCHAR szFile[MAX_PATH];
 size_t nLength;
 ObjectLock lock(this);

 // From a filename, passed in as a command text, scan the file
 // placing data in the data array.
 if (!m_szCommandText)
 {
    ATLTRACE("No filename specified");
    return E_FAIL;
 }

 // Open the file
 _tcscpy(szFile, m_szCommandText);
 if (szFile[0] == _T('\0') || ((pFile = fopen(&amp;szFile[0], "r")) == NULL))
 {
    ATLTRACE("Could not open file");
    return DB_E_NOTABLE;
 }

 // scan and parse the file.&nbsp; The file should contain two strings per record
 LONG cFiles = 0;
 while (fgets(szString, 256, pFile) != NULL)
 {
    nLength = strlen(szString);
    szString[nLength-1] = '\0';   // Strip off trailing CR/LF
    CAgentMan am;
    _tcscpy(am.szCommand, szString);
    _tcscpy(am.szCommand2, szString);

    if (fgets(szString, 256, pFile) != NULL)
    {
       nLength = strlen(szString);
       szString[nLength-1] = '\0';   // Strip off trailing CR/LF
       _tcscpy(am.szText, szString);
       _tcscpy(am.szText2, szString);
    }

    am.dwBookmark = ++cFiles;
    if (!m_rgRowData.Add(am))
    {
       ATLTRACE("Couldn't add data to array");
       fclose(pFile);
       return E_FAIL;
    }
 }

 if (pcRowsAffected != NULL)
    *pcRowsAffected = cFiles;
 return S_OK;
}
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObList::CObList</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_coblist.3a3a.coblist"></a><sup></sup>CObList::CObList  </h1>
<p>
<b>CObList(</b> <b>int</b> <i>nBlockSize</i> <b>=</b> <b>10</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nBlockSize</i></p>
<p class=indent>
The memory-allocation granularity for extending the list.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Constructs an empty <b>CObject</b> pointer list.&nbsp; As the list grows, memory is allocated in units of <i>nBlockSize</i> entries. If a memory allocation fails, a <b>CMemoryException</b> is thrown.</p>
<p class=label>
<b>Example</b></p>
<p>
Below is a listing of the <b>CObject</b>-derived class <code>CAge</code> used in all the collection examples:</p>
<pre><code>// Simple CObject-derived class for CObList examples
class CAge : public CObject
{
 &nbsp;&nbsp; DECLARE_SERIAL( CAge )
private:
 &nbsp;&nbsp; int   m_years;
public:
 &nbsp;&nbsp; CAge() { m_years = 0; }
 &nbsp;&nbsp; CAge( int age ) { m_years = age; }
 &nbsp;&nbsp; CAge( const CAge&amp; a ) { m_years = a.m_years; } // Copy constructor
 &nbsp;&nbsp; void Serialize( CArchive&amp; ar);
 &nbsp;&nbsp; void AssertValid() const;
 &nbsp;&nbsp; const CAge&amp; operator=( const CAge&amp; a )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_years = a.m_years; return *this;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; BOOL operator==(CAge a)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return m_years == a.m_years;
 &nbsp;&nbsp; }
 #ifdef _DEBUG
 &nbsp;&nbsp; void Dump( CDumpContext&amp; dc ) const
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CObject::Dump( dc );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc &lt;&lt; m_years;
 &nbsp;&nbsp; }
 #endif
};
</code></pre>
<p>
Below is an example of <b>CObList</b> constructor usage:</p>
<pre><code>CObList list( 20 );&nbsp; // List on the stack with blocksize = 20.

CObList* plist = new CObList; // List on the heap with default 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // blocksize.
</code></pre>
<p>
<a href="_mfc_coblist.htm">CObList Overview</a>  |&nbsp; <a href="_mfc_coblist_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

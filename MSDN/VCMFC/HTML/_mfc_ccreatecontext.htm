<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCreateContext</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ccreatecontext"></a>CCreateContext</h1>
<p>
<b>CCreateContext</b> does not have a base class.</p>
<p>
The framework uses the <b>CCreateContext</b> structure when it creates the frame windows and views associated with a document. When creating a window, the values in this structure provide information used to connect the components that make up a document and the view of its data. You will only need to use <b>CCreateContext</b> if you are overriding parts of the creation process.</p>
<p>
A <b>CCreateContext</b> structure contains pointers to the document, the frame window, the view, and the document template. It also contains a pointer to a <b>CRuntimeClass</b> that identifies the type of view to create. The run-time class information and the current document pointer are used to create a new view dynamically. The following table suggests how and when each <b>CCreateContext</b> member might be used:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Member</b></td>
<td class=label width=66%><b>What it is for</b></td>
</tr>
<tr valign=top>
<td width=34%><b>m_pNewViewClass</b></td>
<td width=66%><b>CRuntimeClass</b> of the new view to create.</td>
</tr>
<tr valign=top>
<td width=34%><b>m_pCurrentDoc</b></td>
<td width=66%>The existing document to be associated with the new view.</td>
</tr>
<tr valign=top>
<td width=34%><b>m_pNewDocTemplate</b></td>
<td width=66%>The document template associated with the creation of a new MDI frame window.</td>
</tr>
<tr valign=top>
<td width=34%><b>m_pLastView</b></td>
<td width=66%>The original view upon which additional views are modeled, as in the creation of a splitter window’s views or the creation of a second view on a document.</td>
</tr>
<tr valign=top>
<td width=34%><b>m_pCurrentFrame</b></td>
<td width=66%>The frame window upon which additional frame windows are modeled, as in the creation of a second frame window on a document.</td>
</tr>
</table><br>
<p>
When a document template creates a document and its associated components, it validates the information stored in the <b>CCreateContext</b> structure. For example, a view should not be created for a nonexistent document. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All of the pointers in <b>CCreateContext</b> are optional and can be <b>NULL</b> if unspecified or unknown.</p>
<p>
<b>CCreateContext</b> is used by the member functions listed under “See Also.” Consult the descriptions of these functions for specific information if you plan to override them.</p>
<p>
Here are a few general guidelines:
<ul type=disc>
<li>
When passed as an argument for window creation, as in <b>CWnd::Create</b>, <b>CFrameWnd::Create</b>, and <b>CFrameWnd::LoadFrame</b>, the create context specifies what the new window should be connected to. For most windows, the entire structure is optional and a <b>NULL</b> pointer can be passed.<br><br></li>
<li>
For overridable member functions, such as <b>CFrameWnd::OnCreateClient</b>, the <b>CCreateContext</b> argument is optional.<br><br></li>
<li>
For member functions involved in view creation, you must provide enough information to create the view. For example, for the first view in a splitter window, you must supply the view class information and the current document.</li>
</ul>
<p>
In general, if you use the framework defaults, you can ignore <b>CCreateContext</b>. If you attempt more advanced modifications, the Microsoft Foundation Class Library source code or the sample programs, such as VIEWEX, will guide you. If you do forget a required parameter, a framework assertion will tell you what you forgot.</p>
<p>
For more information on <b>CCreateContext</b>, see the MFC sample <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_VIEWEX">
</object><a href=JavaScript:alink_1.Click()>VIEWEX</a>.</p>
<p>
<b>#include &lt;afxext.h&gt;</b></p>
<p>
<a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cframewnd.3a3a.create.htm">CFrameWnd::Create</a>, <a href="_mfc_cframewnd.3a3a.loadframe.htm">CFrameWnd::LoadFrame</a>, <a href="_mfc_cframewnd.3a3a.oncreateclient.htm">CFrameWnd::OnCreateClient</a>, <a href="_mfc_csplitterwnd.3a3a.create.htm">CSplitterWnd::Create</a>, <a href="_mfc_csplitterwnd.3a3a.createview.htm">CSplitterWnd::CreateView</a>, <a href="_mfc_cwnd.3a3a.create.htm">CWnd::Create</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRecordset::Delete</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_crecordset.3a3a.delete"></a><sup></sup>CRecordset::Delete</h1>
<p>
<b>virtual</b> <b>void</b> <b>Delete(</b> <b>);</b><br>
<b>throw(</b> <b>CDBException</b> <b>);</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to delete the current record. After a successful deletion, the recordset’s field data members are set to a Null value, and you must explicitly call one of the <b>Move</b> functions in order to move off the deleted record. Once you move off the deleted record, it is not possible to return to it. If the data source supports transactions, you can make the <b>Delete</b> call part of a transaction. For more information, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Transaction_.28.ODBC.29">
</object><a href=JavaScript:alink_1.Click()>Transaction (ODBC)</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you have implemented bulk row fetching, you cannot call <b>Delete</b>. This will result in a failed assertion. Although class <b>CRecordset</b> does not provide a mechanism for updating bulk rows of data, you can write your own functions by using the ODBC API function <b>SQLSetPos</b>. For an example of how to do this, see the sample <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DBFETCH">
</object><a href=JavaScript:alink_2.Click()>DBFETCH</a>. For more information about bulk row fetching, see the article <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Recordset.3a_.Fetching_Records_in_Bulk_.28.ODBC.29">
</object><a href=JavaScript:alink_3.Click()>Recordset: Fetching Records in Bulk (ODBC)</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;The recordset must be updatable and there must be a valid record current in the recordset when you call <b>Delete</b>; otherwise, an error occurs. For example, if you delete a record but do not scroll to a new record before you call <b>Delete</b> again, <b>Delete</b> throws a <a href="_mfc_cdbexception.htm">CDBException</a>.</p>
<p>
Unlike <a href="_mfc_crecordset.3a3a.addnew.htm">AddNew</a> and <a href="_mfc_crecordset.3a3a.edit.htm">Edit</a>, a call to <b>Delete</b> is not followed by a call to <a href="_mfc_crecordset.3a3a.update.htm">Update</a>. If a <b>Delete</b> call fails, the field data members are left unchanged.</p>
<p class=label>
<b>Example</b></p>
<p>
This example shows a recordset created on the frame of a function. The example assumes the existence of <code>m_dbCust</code>, a member variable of type <b>CDatabase</b> already connected to the data source.</p>
<pre><code>// Create a derived CRecordset object
CCustSet rsCustSet( &amp;m_dbCust );
rsCustSet.Open( );

if( rsCustSet.IsEOF( ) || !rsCustSet.CanUpdate( ) ||
 &nbsp;&nbsp; !rsCustSet.CanTransact( ) )
 &nbsp; return;

if( !m_dbCust.BeginTrans( ) )
{
 &nbsp; // Do something to handle a failure
}
else
{
 &nbsp; // Perhaps scroll to a new record...
 &nbsp; // Delete the current record
 &nbsp; rsCustSet.Delete( );
 &nbsp; // ...

 &nbsp; // Finished commands for this transaction
 &nbsp; if( &lt;the user confirms the transaction&gt; )
 &nbsp;&nbsp;&nbsp;&nbsp; m_dbCust.CommitTrans( );
 &nbsp; else // User changed mind
 &nbsp;&nbsp;&nbsp;&nbsp; m_dbCust.Rollback( );
}
// ...
</code></pre>
<p>
<a href="_mfc_crecordset.htm">CRecordset Overview</a>  |&nbsp; <a href="_mfc_crecordset_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cdatabase.3a3a.begintrans.htm">Database::BeginTrans</a>, <a href="_mfc_cdatabase.3a3a.committrans.htm">CDatabase::CommitTrans</a>, <a href="_mfc_cdatabase.3a3a.rollback.htm">CDatabase::Rollback</a>, <a href="_mfc_cdbexception.htm">CDBException</a></p>
</font></BODY>
</HTML>

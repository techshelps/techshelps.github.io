<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Differences Between a Snap-In and a Snap-In Extension</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefdifferencesbetweensnapinsnapinextension"></a>Differences Between a Snap-In and a Snap-In Extension</h1>
<p>
By default, the Snap-In wizard generates a standard snap-in object. However, if you choose the Snap-In Extension option, the generated code will differ from the standard snap-in code. Specifically, the difference lies in the data class object of the snap-in extension (<code>CMySnapInData</code>). There are two main differences, both occurring in the header file of the generated data class.
<ul type=disc>
<li>
The first difference is an additional method declaration, <code>InitDataClass</code>, in <code>CMySnapInData</code>. The <code>InitDataClass</code> method provides a safe method for initializing the <code>m_pDataObject</code> member of the extension data class (<code>CMySnapInExtData</code>). The default implementation caches a pointer to the snap-in object being extended, in the <code>m_pDataObject</code> member. In most cases, no further action is required.<p class=tl>
However, if the extended snap-in data object needs to be converted to the internal format (which the data represents) before being cached, this method provides a convenient access point to perform that conversion.</P></li>
<li>
The second difference is an additional macro and map for the data class (<code>CMySnapInExtData</code>). The macro, found before the new map, creates a data member of type <code>CMySnapInExtData</code> in the extended snap-in object. After this macro, the extension node info map is declared. The declaration includes the <a href="vcrefbegin_extension_snapin_nodeinfo_map.htm">BEGIN_EXTENSION_SNAPIN_NODEINFO_MAP</a>, <a href="vcrefend_extension_snapin_nodeinfo_map.htm">END_EXTENSION_SNAPIN_NODEINFO_MAP</a>, and <a href="vcrefextension_snapin_nodeinfo_entry.htm">EXTENSION_SNAPIN_NODEINFO_ENTRY</a> macros. Each entry in the map specifies the <code>CMySnapInExtData</code> class.</li>
</ul>
</font></BODY>
</HTML>

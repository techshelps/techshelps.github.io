<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CInternetSession::OnStatusCallback</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cinternetsession.3a3a.onstatuscallback"></a>CInternetSession::OnStatusCallback</h1>
<p>
<b>virtual void OnStatusCallback( DWORD </b><i>dwContext</i><b>, DWORD </b><i>dwInternetStatus</i><b>, LPVOID </b><i>lpvStatusInformation</i><b>, DWORD </b><i>dwStatusInformationLength</i><b> );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>dwContext</i></p>
<p class=indent>
The context value supplied by the application.</p>
<p class=dt>
<i>dwInternetStatus</i></p>
<p class=indent>
A status code which indicates why the callback is being made. See <b>Remarks</b> for a table of possible values.</p>
<p class=dt>
<i>lpvStatusInformation</i></p>
<p class=indent>
A pointer to a buffer containing information pertinent to this callback.</p>
<p class=dt>
<i>dwStatusInformationLength</i></p>
<p class=indent>
The size of <i>lpvStatusInformation</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
This member function is called by the framework to update the status when status callback is enabled and an operation is pending. You must first call <a href="_mfc_cinternetsession.3a3a.enablestatuscallback.htm">EnableStatusCallback</a> to take advantage of status callback.&nbsp; </p>
<p>
The <i>dwInternetStatus</i> parameter indicates the operation being performed and determines what the contents of <i>lpvStatusInformation</i> will be. <i>dwStatusInformationLength</i> indicates the length of the data included in <i>lpvStatusInformation</i>. The following status values for <i>dwInternetStatus</i> are defined as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Value</b></td>
<td class=label width=50%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_RESOLVING_NAME</b></td>
<td width=50%>Looking up the IP address of the name contained in <i>lpvStatusInformation</i>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_NAME_RESOLVED</b></td>
<td width=50%>Successfully found the IP address of the name contained in <i>lpvStatusInformation</i>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_CONNECTING_TO_SERVER</b></td>
<td width=50%>Connecting to the socket address (<a href="_mfc_sockaddr_structure.htm">SOCKADDR</a>) pointed to by <i>lpvStatusInformation</i>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_CONNECTED_TO_SERVER</b></td>
<td width=50%>Successfully connected to the socket address (<b>SOCKADDR</b>) pointed to by <i>lpvStatusInformation</i>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_SENDING_REQUEST</b></td>
<td width=50%>Sending the information request to the server. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_ REQUEST_SENT</b></td>
<td width=50%>Successfully sent the information request to the server. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_RECEIVING_RESPONSE</b></td>
<td width=50%>Waiting for the server to respond to a request. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_RESPONSE_RECEIVED</b></td>
<td width=50%>Successfully received a response from the server. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_CLOSING_CONNECTION</b></td>
<td width=50%>Closing the connection to the server. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_CONNECTION_CLOSED</b></td>
<td width=50%>Successfully closed the connection to the server. The <i>lpvStatusInformation</i> parameter is <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_HANDLE_CREATED</b></td>
<td width=50%>Used by the Win32 API function <b>InternetConnect</b> to indicate that it has created the new handle. This lets the application call the Win32 function <b>InternetCloseHandle</b> from another thread if the connect is taking too long. See the <i>ActiveX SDK </i>for more information about these functions.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_HANDLE_CLOSING</b></td>
<td width=50%>Successfully terminated this handle value.</td>
</tr>
<tr valign=top>
<td width=50%><b>INTERNET_STATUS_REQUEST_COMPLETE</b></td>
<td width=50%>Successfully completed the asynchronous operation. See the <a href="_mfc_cinternetsession.3a3a.cinternetsession.htm">CInternetSession</a> constructor for details on <b>INTERNET_FLAG_ASYNC</b>.The <i>lpvStatusInformation</i> parameter points at an <b>INTERNET_ASYNC_RESULT</b> structure, and <i>dwStatusInformationLength</i> contains the final completion status of the asynchronous function. If this is <b>ERROR_INTERNET_EXTENDED_ERROR</b>, the application can retrieve the server error information by using the Win32 function <b>InternetGetLastResponseInfo</b>. See the <i>ActiveX SDK </i>for more information about this function.</td>
</tr>
</table><br>
<p>
In the case of <b>INTERNET_STATUS_REQUEST_COMPLETE</b>, <i>lpvStatusInformation</i> points at an <b>INTERNET_ASYNC_RESULT</b> structure, which is defined as:
<ul type=disc>
<li>
<b>DWORD</b> <i>dwResult</i>; The return code from the operation.<br><br></li>
<li>
<b>DWORD</b> <i>dwError</i>; If dwResult indicates that the operation failed, this member contains the error code. If the operation was successful, this member usually contains <b>ERROR_SUCCESS</b>.</li>
</ul>
<p>
Override this member function to require some action before a status callback routine is performed. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Status callbacks need thread-state protection. If you are using MFC in a shared library, add the following line to the beginning of your override:</p>
<pre><code>AFX_MANAGE_STATE( AfxGetAppModuleState( ) );
</code></pre>
<p>
For more information about asynchronous operations, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Internet_First_Steps.3a_.WinInet">
</object><a href=JavaScript:alink_1.Click()>Internet First Steps: WinInet</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<a href="_mfc_cinternetsession.htm">CInternetSession Overview</a>  |&nbsp; <a href="_mfc_cinternetsession_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cinternetsession.3a3a.enablestatuscallback.htm">CInternetSession::EnableStatusCallback</a>, <a href="_mfc_cinternetsession.3a3a.getcontext.htm">CInternetSession::GetContext</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TN020: ID Naming and Numbering Conventions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfcnotes_tn020"></a><sup></sup>TN020: ID Naming and Numbering Conventions</h1>
<p>
This note describes the ID naming and numbering conventions used by MFC 2.0 for resources, commands, strings, controls, and child windows.</p>
<p class=label>
<b>The Problem</b></p>
<p>
The MFC ID naming and numbering conventions are intended to meet the following requirements:
<ul type=disc>
<li>
Provide a consistent ID-naming standard used across the MFC library and MFC applications that are supported by the Visual C++ resource editor. This allows the programmer to more readily interpret IDs as to their type and origin.<br><br></li>
<li>
Emphasize the strong 1-to-1 relationship between certain types of IDs. This helps to clarify MFC's application framework architecture.<br><br></li>
<li>
Conform to already widely used standards for naming IDs in Windows.<br><br></li>
<li>
Partition the ID-numbering space, so as to avoid unintentional duplication of ID numbers among those assigned by the programmer, by MFC and Windows, and by Visual C++-edited resources.</li>
</ul>
<p class=label>
<b>Overview of ID Prefix Naming Convention</b></p>
<p>
There are several categories or types of IDs in an application. The MFC ID-naming convention defines different prefixes for different resource types.</p>
<p>
MFC uses the prefix "<b>IDR_</b>" to refer to a resource ID that applies to multiple resource types. For example, for a given frame window, the same "<b>IDR_</b>" value is used to refer to a menu, accelerator, string and icon resource all at once.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>IDR_</b></td>
<td width=67%>Multiple resource types (Used for Menus, Accelerators primarily).</td>
</tr>
<tr valign=top>
<td width=33%><b>IDD_</b></td>
<td class=tl width=67%>For dialog template resources (for example, <b>IDD_DIALOG1</b>).</P></tr>
<tr valign=top>
<td class=tl width=33%><b>IDC_</b></P><td class=tl width=67%>For Cursor resources.</P></tr>
<tr valign=top>
<td class=tl width=33%><b>IDI_</b> </P><td class=tl width=67%>For Icon resources.</P></tr>
<tr valign=top>
<td class=tl width=33%><b>IDB_</b></P><td class=tl width=67%>For Bitmap resources.</P></tr>
<tr valign=top>
<td class=tl width=33%><b>IDS_</b></P><td class=tl width=67%>For String resources.</P></tr>
</table><br>
<p>
Note that the IDS_ value for a string resource is the ID passed to <b>LoadString</b>. The actual implementation of string table resources groups together 16 strings into one segment.</p>
<p>
Within a DIALOG resource, we follow the convention of:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>IDOK</b>,<b>IDCANCEL</b></td>
<td width=67%>For standard push button IDs.</td>
</tr>
<tr valign=top>
<td class=tl width=33%><b>IDC_</b></P><td width=67%>For other dialog controls.</td>
</tr>
</table><br>
<p>
The "<b>IDC_</b>" prefix is also used for cursors. This naming conflict is not usually a problem since a typical application will have few cursors and a large number of dialog controls.</p>
<p>
Within a Menu resource, we follow the convention of:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=33%><b>IDM_</b></td>
<td width=67%>For menu items not using the MFC command architecture.</td>
</tr>
<tr valign=top>
<td class=tl width=33%><b>ID_</b></P><td width=67%>For menu item commands using the MFC command architecture.</td>
</tr>
</table><br>
<p>
Commands that follow the MFC command architecture must have an <b>ON_COMMAND</b> command handler and may have an <b>ON_UPDATE_COMMAND_UI</b> handler. If these command handlers follow the MFC command architecture, they will function correctly whether they are bound to a menu item, a toolbar button or a dialog bar button. The same ID_ is also used for a menu prompt string displayed on the program's message bar. Most of the menu items in your application should follow the MFC command convention. All of the standard command IDs (for example, <b>ID_FILE_NEW</b>) follow this convention.</p>
<p>
MFC also uses "<b>IDP_</b>" as a specialized form of strings (that is, instead of "<b>IDS_</b>"). Strings with the "<b>IDP_</b>" prefix are "prompts," that is, strings used in message boxes. "<b>IDP_</b>" strings may contain "%1" and "%2" as place holders of strings determined by the program. "<b>IDP_</b>" strings usually have help topics, while "<b>IDS_</b>" strings do not. "<b>IDP_</b>" strings are always localized, while "<b>IDS_</b>" strings may or may not be localized.</p>
<p>
The MFC library also uses the "<b>IDW_</b>" prefix as a specialized form of control IDs (that is, instead of "<b>IDC_</b>"). These IDs are assigned to child windows such as views and splitters by the framework classes. MFC implementation IDs are prefixed with "<b>AFX_</b>".</p>
<p class=label>
<b>Overview of ID-Numbering Convention</b></p>
<p>
The following lists the valid ranges for the IDs of the specific types. Some of the limits are technical implementation limits while others are just conventions to prevent your IDs from colliding with Windows predefined IDs or MFC default implementations.</p>
<p>
We strongly recommend you do not defined IDs outside the recommended ranges. Even though the lower limit of many of these ranges is 1 (0 is not used), common convention starts practical use of IDs at 100 or 101.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Prefix</b></td>
<td class=label width=33%><b>Resource Type</b></td>
<td class=label width=34%><b>Valid Range</b></td>
</tr>
<tr valign=top>
<td width=33%>IDR_</td>
<td width=33%>multiple</td>
<td width=34%>1 -&gt; 0x6FFF</td>
</tr>
<tr valign=top>
<td width=33%>IDD_</td>
<td width=33%>dialog templates</td>
<td width=34%>1 -&gt; 0x6FFF</td>
</tr>
<tr valign=top>
<td width=33%>IDC_,IDI_,IDB_</td>
<td width=33%>cursors, icons, bitmaps</td>
<td width=34%>1 -&gt; 0x6FFF</td>
</tr>
<tr valign=top>
<td width=33%>IDS_, IDP_</td>
<td width=33%>general strings</td>
<td width=34%>1 -&gt; 0x7FFF</td>
</tr>
<tr valign=top>
<td width=33%>ID_</td>
<td width=33%>commands</td>
<td width=34%>0x8000 -&gt; 0xDFFF</td>
</tr>
<tr valign=top>
<td width=33%>IDC_</td>
<td width=33%>controls</td>
<td width=34%>8 -&gt; 0xDFFF</td>
</tr>
</table><br>
<p>
Reasons for these range limits:
<ul type=disc>
<li>
By convention, the ID value of 0 is not used.<br><br></li>
<li>
Windows implementation limitations restrict true resource IDs to be less than or equal to 0x7FFF.<br><br></li>
<li>
MFC's internal framework implementations reserve several ranges: 0xE000-&gt;0xEFFF and 0x7000-&gt;0x7FFF.<br><br></li>
<li>
Several Windows system commands use the range of 0xF000 -&gt; 0xFFFF.<br><br></li>
<li>
Control IDs of 1-&gt;7 are reserved by <b>IDOK</b>, <b>IDCANCEL</b>, and so on.<br><br></li>
<li>
The range of 0x8000-&gt;0xFFFF for strings is reserved for menu prompts for commands.</li>
</ul>
<p>
<a href="_mfcnotes_technical_notes_by_number.htm">Technical Notes by Number</a>  |&nbsp; <a href="_mfcnotes_technical_notes_by_category.htm">Technical Notes by Category</a></p>
</font></BODY>
</HTML>

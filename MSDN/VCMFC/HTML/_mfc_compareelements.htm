<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CompareElements</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_compareelements"></a><sup></sup>CompareElements</h1>
<p>
<b>template&lt;</b> <b>class</b> <i>TYPE</i><b>,</b> <b>class</b> <i>ARG_TYPE</i> <b>&gt;</b> <br>
<b>BOOL</b> <b>AFXAPI</b> <b>CompareElements(</b> <b>const</b> <i>TYPE</i><b>*</b> <i>pElement1</i><b>,</b> <br>
<b>const</b> <i>ARG_TYPE</i><b>*</b> <i>pElement2</i> <b>);</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if the object pointed to by <i>pElement1</i> is equal to the object pointed to by <i>pElement2</i>; otherwise 0.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>TYPE</i></p>
<p class=indent>
The type of the first element to be compared.</p>
<p class=dt>
<i>pElement1</i></p>
<p class=indent>
Pointer to the first element to be compared.</p>
<p class=dt>
<i>ARG_TYPE</i></p>
<p class=indent>
The type of the second element to be compared.</p>
<p class=dt>
<i>pElement2</i></p>
<p class=indent>
Pointer to the second element to be compared.</p>
<p class=label>
<b>Remarks</b></p>
<p>
This function is called directly by <a href="_mfc_clist.3a3a.find.htm">CList::Find</a> and indirectly by <a href="_mfc_cmap.3a3a.lookup.htm">CMap::Lookup</a> and <a href="_mfc_cmap.3a3a.operator_.5b_5d.htm">CMap::operator []</a>. The <b>CMap</b> calls use the <b>CMap</b> template parameters <i>KEY</i> and <i>ARG_KEY</i>.</p>
<p>
The default implementation returns the result of the comparison of <i>*pElement1</i> and <i>*pElement2</i>. Override this function so that it compares the elements in a way that is appropriate for your application.</p>
<p>
The C++ language defines the comparison operator (<b>==</b>) for simple types (<b>char</b>, <b>int</b>, <b>float</b>, and so on) but does not define a comparison operator for classes and structures. If you want to use <b>CompareElements</b> or to instantiate one of the collection classes that uses it, you must either define the comparison operator or overload <b>CompareElements</b> with a version that returns appropriate values.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_clist.htm">CList</a>, <a href="_mfc_cmap.htm">CMap</a></p>
</font></BODY>
</HTML>

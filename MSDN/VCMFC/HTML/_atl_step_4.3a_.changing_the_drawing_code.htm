<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 4: Changing the Drawing Code</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_step_4.3a_.changing_the_drawing_code"></a>Step 4: Changing the Drawing Code</h1>
<p>
In the drawing code you will use <b>sin</b> and <b>cos</b> functions to calculate the polygon points, so add include math.h at the top of PolyCtl.h:</p>
<pre><code>#include &lt;math.h&gt;
#include "resource.h"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // main symbols
</code></pre>
<p>
<b>Note for Release builds only</b>&nbsp;&nbsp;&nbsp;When the ATL COM AppWizard generates the default project, it defines the macro <b>_ATL_MIN_CRT</b>. This macro is defined so that you don't bring the C Run-Time Library into your code if you don't need it. The polygon control needs the C Run-Time Library start-up code to initialize the floating-point functions. Therefore, you need to remove the <b>_ATL_MIN_CRT</b> macro if you want to build a Release version. To remove the macro, click <b>Settings</b> on the <b>Project</b> menu. In the <b>Settings For:</b> drop-down list, choose <b>Multiple Configurations</b>. In the <b>Select project configuration(s) to modify</b> dialog box that appears, click the check boxes for all four Release versions, then click <b>OK</b>. On the <b>C/C++</b> tab, choose the <b>General</b> category, then remove <b>_ATL_MIN_CRT</b> from the <b>Preprocessor definitions</b> edit box.</p>
<p>
Once the polygon points are calculated, you store the points by adding an array of type <b>POINT</b> to the end of the class definition in PolyCtl.h:</p>
<pre><code>   OLE_COLOR m_clrFillColor;
   short m_nSides;
   POINT m_arrPoint[100];
</code></pre>
<p>
Now change the <code>OnDraw</code> function in PolyCtl.h to match the one below. Note that you remove the calls to the Rectangle and DrawText functions. You also explicitly get and select a black pen and white brush. You need to do this in case your control is running windowless. If you don't have your own window, you can't make assumptions about the device context you'll be drawing in.</p>
<p>
The completed <code>OnDraw</code> looks like this:</p>
<pre><code>HRESULT CPolyCtl::OnDraw(ATL_DRAWINFO&amp; di)
{
   RECT&amp; rc = *(RECT*)di.prcBounds;
   HDC hdc&nbsp; = di.hdcDraw;

   COLORREF&nbsp;&nbsp;&nbsp; colFore;
   HBRUSH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hOldBrush, hBrush;
   HPEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hOldPen, hPen;

   // Translate m_colFore into a COLORREF type
   OleTranslateColor(m_clrFillColor, NULL, &amp;colFore);

   // Create and select the colors to draw the circle
   hPen = (HPEN)GetStockObject(BLACK_PEN);
   hOldPen = (HPEN)SelectObject(hdc, hPen);
   hBrush = (HBRUSH)GetStockObject(WHITE_BRUSH);
   hOldBrush = (HBRUSH)SelectObject(hdc, hBrush);

   Ellipse(hdc, rc.left, rc.top, rc.right, rc.bottom);

   // Create and select the brush that will be used to fill the polygon
   hBrush&nbsp;&nbsp;&nbsp; = CreateSolidBrush(colFore);
   SelectObject(hdc, hBrush);

   CalcPoints(rc);
   Polygon(hdc, &amp;m_arrPoint[0], m_nSides);

   // Select back the old pen and brush and delete the brush we created
   SelectObject(hdc, hOldPen);
   SelectObject(hdc, hOldBrush);
   DeleteObject(hBrush);

   return S_OK;
}
</code></pre>
<p>
You now need to add a function, called <code>CalcPoints</code>, that will calculate the coordinates of line intersections.&nbsp; These calculations will be based on the RECT variable that is passed into the function.&nbsp; First you should add the definition of CalcPoints to the public section for the IPolyCtl class in PolyCtl.h:</p>
<pre><code>void&nbsp;&nbsp;&nbsp; CalcPoints(const RECT&amp; rc);
</code></pre>
<p>
The public section of the IPolyCtl class should now look like this:</p>
<pre><code>// IPolyCtl
public:
   STDMETHOD(get_Sides)(/*[out, retval]*/ short *newVal);
   STDMETHOD(put_Sides)(/*[in]*/ short newVal);
   void&nbsp;&nbsp;&nbsp; CalcPoints(const RECT&amp; rc);
</code></pre>
<p>
Next, add the implementation of the <code>CalcPoints</code> function to the end of the PolyCtl.cpp file:</p>
<pre><code>void CPolyCtl::CalcPoints(const RECT&amp; rc)
{
   const double pi = 3.14159265358979;
   POINT&nbsp;&nbsp; ptCenter;
   double&nbsp; dblRadiusx = (rc.right - rc.left) / 2;
   double&nbsp; dblRadiusy = (rc.bottom - rc.top) / 2;
   double&nbsp; dblAngle = 3 * pi / 2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Start at the top
   double&nbsp; dblDiff&nbsp; = 2 * pi / m_nSides;&nbsp;&nbsp; // Angle each side will make
   ptCenter.x = (rc.left + rc.right) / 2;
   ptCenter.y = (rc.top + rc.bottom) / 2;

   // Calculate the points for each side
   for (int i = 0; i &lt; m_nSides; i++)
   {
      m_arrPoint[i].x = (long)(dblRadiusx * cos(dblAngle) + ptCenter.x + 0.5);
      m_arrPoint[i].y = (long)(dblRadiusy * sin(dblAngle) + ptCenter.y + 0.5);
      dblAngle += dblDiff;
   }
}
</code></pre>
<p>
Now, initialize <code>m_clrFillColor</code>. Choose green as the default color and add this line to the <code>CPolyCtl</code> constructor in PolyCtl.h:</p>
<pre><code>   m_clrFillColor = RGB(0, 0xFF, 0);
</code></pre>
<p>
The constructor now looks like this:</p>
<pre><code>CPolyCtl()
{
   m_nSides = 3;
   m_clrFillColor = RGB(0, 0xFF, 0);
}
</code></pre>
<p>
Now rebuild the control and try it again. Open <b>ActiveX Control Test Container</b> and insert the control. You should see a green triangle within a circle. Try changing the number of sides by following the steps below. To modify properties on a dual interface from within <b>Test Container</b>, use <b>Invoke Methods</b>:
<ol>
<li>
In <b>Test Container</b>, click <b>Invoke Methods</b> on the <b>Control</b> menu. <br>
The <b>Invoke Method</b> dialog box is displayed. <br><br></li>
<li>
Click the PropPut version of the <b>Sides</b> property from the <b>Method Name</b>.<br><br></li>
<li>
Type 5 in the <b>Parameter Value</b> edit box, click <b>Set Value</b> and click <b>Invoke</b>.<p>
<img src="vc30991.gif" border=0></P></li>
</ol>
<p>
Notice that the control doesn't change. What is wrong? Although you changed the number of sides internally by setting the <code>m_nSides</code> variable, you didn't cause the control to repaint. If you switch to another application and then switch back to <b>Test Container</b> you will find that the control is repainted and now has the correct number of sides.</p>
<p>
To correct this problem, you need to add a call to the <b>FireViewChange</b> function, which is defined in <a href="_atl_iviewobjecteximpl.htm">IViewObjectExImpl</a>, after you set the number of sides. If the control is running in its own window, <b>FireViewChange</b> will call the <b>InvalidateRect</b> API directly. If the control is running windowless, the <b>InvalidateRect</b> method will be called on the container's site interface. This forces the control to repaint itself.</p>
<p>
The new <code>put_Sides</code> method is as follows:</p>
<pre><code>STDMETHODIMP CPolyCtl::put_Sides(short newVal)
{
   if (newVal &gt; 2 &amp;&amp; newVal &lt; 101)
   {
      m_nSides = newVal;
      FireViewChange();
      return S_OK;
   }
   else
      return Error(_T("Shape must have between 3 and 100 sides"));
}
</code></pre>
<p>
After you've added <b>FireViewChange</b>, rebuild and try the control again. This time when you change the number of sides and click <b>Invoke</b>, you should see the control change immediately.</p>
<p>
Next, you will add an event to the control.</p>
<p>
<a href="_atl_step_3.3a_.adding_a_property_to_the_control.htm">Back to Step 3</a>  |&nbsp; <a href="_atl_step_5.3a_.adding_an_event.htm">On to Step 5</a> </p>
</font></BODY>
</HTML>

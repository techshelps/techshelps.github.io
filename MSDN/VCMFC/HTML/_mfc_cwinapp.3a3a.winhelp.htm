<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWinApp::WinHelp</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cwinapp.3a3a.winhelp"></a><sup></sup>CWinApp::WinHelp  </h1>
<p>
<b>virtual</b> <b>void</b> <b>WinHelp(</b> <b>DWORD</b> <i>dwData</i><b>,</b> <b>UINT</b> <i>nCmd</i> <b>=</b> <b>HELP_CONTEXT</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>dwData</i></p>
<p class=indent>
Specifies additional data. The value used depends on the value of the <i>nCmd</i> parameter.</p>
<p class=dt>
<i>nCmd</i></p>
<p class=indent>
Specifies the type of help requested. For a list of possible values and how they affect the <i>dwData</i> parameter, see the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_WIN32_WinHelp">
</object><a href=JavaScript:alink_1.Click()>WinHelp</a> Windows function.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to invoke the WinHelp application. The framework also calls this function to invoke the WinHelp application. </p>
<p>
The framework will automatically close the WinHelp application when your application terminates.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// Header File: HELPIDS.H
//
// This example header file is #include'd twice:
// (1) It is #include'd by the .CPP file that passes the DWORD
//&nbsp;&nbsp;&nbsp;&nbsp; context i.d. to CWinApp::WinHelp.
// (2) It is #include'd in the [MAP] section of the .HPJ file,
//&nbsp;&nbsp;&nbsp;&nbsp; to associate the help context string "HID_MYTOPIC" with
//&nbsp;&nbsp;&nbsp;&nbsp; the help context numeric i.d., 101.
// The help context string "HID_MYTOPIC" is what identifies the
// help topic in the help .RTF source file, in the "#" footnote:
//&nbsp;&nbsp;&nbsp;&nbsp; # HID_MYTOPIC
//
// Note, it is not necessary to manage help context id's this way
// for help topics associated with command id's and user interface
// id's defined in your RESOURCE.H file; you should use the MAKEHM
// tool via the custom build rule on your resource.h file to produce 
// a help map (.HM) file for these id's.&nbsp; It is necessary to manage 
// help context id's as illustrated here only for help topics not 
// associated with command id's or user interface id's. 

#define HID_MYTOPIC 101
  

 &nbsp; // Show the custom help topic that has the context string
 &nbsp; // "HID_MYTOPIC" in the help .RTF file, and which is mapped
 &nbsp; // to the DWORD i.d. HID_MYTOPIC in the above HELPIDS.H file.
 &nbsp; AfxGetApp()-&gt;WinHelp(HID_MYTOPIC);
  

// The following is one line of code in the help map (.HM)
// file produced by the MAKEHM tool, which is called by the custom
// build rule on the resource.h file.&nbsp; The MAKEHM tool reads the 
// following #define in the application's RESOURCE.H file:
//&nbsp;&nbsp;&nbsp; #define ID_MYCOMMAND 0x08004
// and adds a help id offset value of 0x10000 to create the
// help context DWORD value 0x18004.&nbsp; See MFC Tech Note 28 
// for more information on help id offset values.
 
HID_MYCOMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x18004
  

 &nbsp; // Rarely will you need to directly call WinHelp yourself
 &nbsp; // with the help context i.d. for a command or user interface
 &nbsp; // object. The framework will call WinHelp automatically when
 &nbsp; // the user, for example, hits F1 when the focus is on a
 &nbsp; // My Command menu item. However, if you do want to directly
 &nbsp; // call WinHelp for the help topic associated with the command,
 &nbsp; // here is how you would do it:

 &nbsp; AfxGetApp()-&gt;WinHelp(0x10000 + ID_MYCOMMAND);
</code></pre>
<p>
<a href="_mfc_cwinapp.htm">CWinApp Overview</a>  |&nbsp; <a href="_mfc_cwinapp_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cwinapp.3a3a.oncontexthelp.htm">CWinApp::OnContextHelp</a>, <a href="_mfc_cwinapp.3a3a.onhelpusing.htm">CWinApp::OnHelpUsing</a>, <a href="_mfc_cwinapp.3a3a.onhelp.htm">CWinApp::OnHelp</a>, <a href="_mfc_cwinapp.3a3a.onhelpindex.htm">CWinApp::OnHelpIndex</a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_WIN32_WinHelp">
</object><a href=JavaScript:alink_2.Click()>::WinHelp</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWaitCursor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cwaitcursor"></a>CWaitCursor</h1>
<p>
<b>CWaitCursor</b> does not have a base class.</p>
<p>
The <b>CWaitCursor</b> class provides a one-line way to show a wait cursor, which is usually displayed as an hourglass, while you’re doing a lengthy operation. Good Windows programming practices require that you display a wait cursor whenever you’re performing an operation that takes a noticeable amount of time.</p>
<p>
To display a wait cursor, just define a <b>CWaitCursor</b> variable before the code that performs the lengthy operation.<b> </b>The object’s constructor automatically causes the wait cursor to be displayed.</p>
<p>
When the object goes out of scope (at the end of the block in which the <b>CWaitCursor</b> object is declared), its destructor sets the cursor to the previous cursor. In other words, the object performs the necessary clean-up automatically.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because of how their constructors and destructors work, <b>CWaitCursor</b> objects are always declared as local variables — they’re never declared as global variables nor are they allocated with <b>new</b>.</p>
<p>
If you perform an operation which might cause the cursor to be changed, such as displaying a message box or dialog box, call the <a href="_mfc_cwaitcursor.3a3a.restore.htm">Restore</a> member function to restore the wait cursor. It is okay to call <b>Restore</b> even when a wait cursor is currently displayed.</p>
<p>
Another way to display a wait cursor is to use the combination of <a href="_mfc_ccmdtarget.3a3a.beginwaitcursor.htm">CCmdTarget::BeginWaitCursor</a>, <a href="_mfc_ccmdtarget.3a3a.endwaitcursor.htm">CCmdTarget::EndWaitCursor</a>, and perhaps <a href="_mfc_ccmdtarget.3a3a.restorewaitcursor.htm">CCmdTarget::RestoreWaitCursor</a>. However, <b>CWaitCursor</b> is easier to use because you don’t need to set the cursor to the previous cursor when you’re done with the lengthy operation.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;MFC sets and restores the cursor using the <a href="_mfc_cwinapp.3a3a.dowaitcursor.htm">CWinApp::DoWaitCursor</a> virtual function. You can override this function to provide custom behavior.</p>
<p>
<b>#include &lt;afxwin.h&gt;</b></p>
<p>
<a href="_mfc_cwaitcursor_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_ccmdtarget.3a3a.beginwaitcursor.htm">CCmdTarget::BeginWaitCursor</a>, <a href="_mfc_ccmdtarget.3a3a.endwaitcursor.htm">CCmdTarget::EndWaitCursor</a>, <a href="_mfc_ccmdtarget.3a3a.restorewaitcursor.htm">CCmdTarget::RestoreWaitCursor</a>, <a href="_mfc_cwinapp.3a3a.dowaitcursor.htm">CWinApp::DoWaitCursor</a></p>
</font></BODY>
</HTML>

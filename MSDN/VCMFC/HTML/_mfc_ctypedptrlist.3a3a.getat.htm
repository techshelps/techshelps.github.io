<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTypedPtrList::GetAt</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ctypedptrlist.3a3a.getat"></a><sup></sup>CTypedPtrList::GetAt</h1>
<p>
<i>TYPE</i><b>&amp;</b> <b>GetAt(</b> <b>POSITION</b> <i>position</i> <b>);</b></p>
<p>
<i>TYPE</i> <b>GetAt(</b> <b>POSITION</b> <i>position</i> <b>)</b> <b>const;</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
If the list is accessed through a pointer to a <b>const CTypedPtrList</b>, then <b>GetAt</b> returns a pointer of the type specified by the template parameter <i>TYPE</i>. This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification. </p>
<p>
If the list is accessed directly or through a pointer to a <b>CTypedPtrList</b>, then <b>GetAt</b> returns a reference to a pointer of the type specified by the template parameter <i>TYPE</i>. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>TYPE</i></p>
<p class=indent>
Template parameter specifying the type of elements stored in the list.</p>
<p class=dt>
<i>position</i></p>
<p class=indent>
A <b>POSITION</b> value returned by a previous <b>GetHeadPosition</b> or <b>Find</b> member function call.</p>
<p class=label>
<b>Remarks</b></p>
<p>
A variable of type <b>POSITION</b> is a key for the list. It is not the same as an index, and you cannot operate on a <b>POSITION</b> value yourself. <b>GetAt</b> retrieves the <b>CObject</b> pointer associated with a given position. </p>
<p>
You must ensure that your <b>POSITION</b> value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</p>
<p>
This inline function calls <i>BASE_CLASS</i><b>::GetAt</b>.</p>
<p>
<a href="_mfc_ctypedptrlist.htm">CTypedPtrList Overview</a>  |&nbsp; <a href="_mfc_ctypedptrlist_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_coblist.3a3a.getat.htm">CObList::GetAt</a></p>
</font></BODY>
</HTML>

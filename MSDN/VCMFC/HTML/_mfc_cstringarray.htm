<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CStringArray</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cstringarray"></a>CStringArray</h1>
<p>
<img src="cstringa.gif" border=0></p>
<p>
The <b>CStringArray</b> class supports arrays of <b>CString</b> objects. </p>
<p>
The member functions of <b>CStringArray</b> are similar to the member functions of class <a href="_mfc_cobarray.htm">CObArray</a>. Because of this similarity, you can use the <b>CObArray</b> reference documentation for member function specifics. Wherever you see a <b>CObject</b> pointer as a return value, substitute a <b>CString</b> (not a <b>CString</b> pointer). Wherever you see a <b>CObject</b> pointer as a function parameter, substitute a <b>LPCTSTR</b>.</p>
<pre><code>CObject* CObArray::GetAt( int &lt;nIndex&gt; ) const;
</code></pre>
<p>
for example, translates to</p>
<pre><code>CString CStringArray::GetAt( int &lt;nIndex&gt; ) const;
</code></pre>
<p>
and</p>
<pre><code>void SetAt( int &lt;nIndex&gt;, CObject* &lt;newElement&gt; )
</code></pre>
<p>
translates to</p>
<pre><code>void SetAt( int &lt;nIndex&gt;, LPCTSTR &lt;newElement&gt; )
</code></pre>
<p>
<b>CStringArray</b> incorporates the <b>IMPLEMENT_SERIAL</b> macro to support serialization and dumping of its elements. If an array of <b>CString</b> objects is stored to an archive, either with an overloaded insertion operator or with the <b>Serialize</b> member function, each element is serialized in turn. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before using an array, use <b>SetSize</b> to establish its size and allocate memory for it. If you do not use <b>SetSize</b>, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.</p>
<p>
If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater. </p>
<p>
When a <b>CString</b> array is deleted, or when its elements are removed, string memory is freed as appropriate.</p>
<p>
For more information on using <b>CStringArray</b>, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Collections">
</object><a href=JavaScript:alink_1.Click()>Collections</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxcoll.h&gt;</b></p>
<p>
<a href="_mfc_cstringarray_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

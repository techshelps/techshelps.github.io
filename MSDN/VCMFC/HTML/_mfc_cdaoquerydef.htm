<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDaoQueryDef</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cdaoquerydef"></a>CDaoQueryDef</h1>
<p>
<img src="cdqdef.gif" border=0></p>
<p>
A <b>CDaoQueryDef</b> object represents a query definition, or “querydef,” usually one saved in a database. A querydef is a data access object that contains the SQL statement that describes a query, and its properties, such as “Date Created” and “ODBC Timeout.” You can also create temporary querydef objects without saving them, but it is convenient — and much more efficient — to save commonly reused queries in a database. A <a href="_mfc_cdaodatabase.htm">CDaoDatabase</a> object maintains a collection, called the QueryDefs collection, that contains its saved querydefs.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC). All DAO database class names have the “CDao” prefix. You can still access ODBC data sources with the DAO classes. In general, the MFC classes based on DAO are more capable than the MFC classes based on ODBC; the DAO-based classes can access data, including through ODBC drivers, via their own database engine. The DAO-based classes also support Data Definition Language (DDL) operations, such as adding tables via the classes, without having to call DAO directly. </p>
<p class=label>
<b>Usage</b></p>
<p>
Use querydef objects either to work with an existing saved query or to create a new saved query or temporary query:
<ol>
<li>
In all cases, first construct a <b>CDaoQueryDef</b> object, supplying a pointer to the <a href="_mfc_cdaodatabase.htm">CDaoDatabase</a> object to which the query belongs.<br><br></li>
<li>
Then do the following, depending on what you want:<ul type=disc>
<li>
To use an existing saved query, call the querydef object’s <a href="_mfc_cdaoquerydef.3a3a.open.htm">Open</a> member function, supplying the name of the saved query. <br><br></li>
<li>
To create a new saved query, call the querydef object’s <a href="_mfc_cdaoquerydef.3a3a.create.htm">Create</a> member function, supplying the name of the query. Then call <a href="_mfc_cdaoquerydef.3a3a.append.htm">Append</a> to save the query by appending it to the database’s QueryDefs collection. <b>Create</b> puts the querydef into an open state, so after calling <b>Create</b> you do not call <b>Open</b>.<br><br></li>
<li>
To create a temporary querydef, call <b>Create</b>. Pass an empty string for the query name. Do not call <b>Append</b>.</li>
</ul>
</li>
</ol>
<p>
When you finish using a querydef object, call its <a href="_mfc_cdaoquerydef.3a3a.close.htm">Close</a> member function; then destroy the querydef object.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The easiest way to create saved queries is to create them and store them in your database using Microsoft Access. Then you can open and use them in your MFC code.</p>
<p class=label>
<b>Purposes</b></p>
<p>
You can use a querydef object for any of the following purposes:
<ul type=disc>
<li>
To create a <b>CDaoRecordset</b> object<br><br></li>
<li>
To call the object’s <b>Execute</b> member function to directly execute an action query or an SQL pass-through query</li>
</ul>
<p>
You can use a querydef object for any type of query, including select, action, crosstab, delete, update, append, make-table, data definition, SQL pass-through, union, and bulk queries. The query’s type is determined by the content of the SQL statement that you supply. For information about query types, see the <b>Execute</b> and <a href="_mfc_cdaoquerydef.3a3a.gettype.htm">GetType</a> member functions. Recordsets are commonly used for row-returning queries, usually those using the <b>SELECT ... FROM</b> keywords. <b>Execute</b> is most commonly used for bulk operations. For more information, see <a href="_mfc_cdaoquerydef.3a3a.execute.htm">Execute</a> and <a href="_mfc_cdaorecordset.htm">CDaoRecordset</a>.</p>
<p class=label>
<b>Querydefs and Recordsets</b></p>
<p>
To use a querydef object to create a <b>CDaoRecordset</b> object, you typically create or open a querydef as described above. Then construct a recordset object, passing a pointer to your querydef object when you call <a href="_mfc_cdaorecordset.3a3a.open.htm">CDaoRecordset::Open</a>. The querydef you pass must be in an open state. For more information, see class <a href="_mfc_cdaorecordset.htm">CDaoRecordset</a>.</p>
<p>
You cannot use a querydef to create a recordset (the most common use for a querydef) unless it is in an open state. Put the querydef into an open state by calling either <b>Open</b> or <b>Create</b>.</p>
<p class=label>
<b>External Databases</b></p>
<p>
Querydef objects are the preferred way to use the native SQL dialect of an external database engine. For example, you can create a Transact SQL query (as used on Microsoft SQL Server) and store it in a querydef object. When you need to use a SQL query not based on the Microsoft Jet database engine, you must provide a connect string that points to the external data source. Queries with valid connect strings bypass the database engine and pass the query directly to the external database server for processing.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The preferred way to work with ODBC tables is to attach them to a Microsoft Jet (.MDB) database. For more information, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_External.3a_.Working_with_External_Data_Sources">
</object><a href=JavaScript:alink_1.Click()>DAO External: Working with External Data Sources</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p>
For more information about querydefs, see the article <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_Querydef">
</object><a href=JavaScript:alink_2.Click()>DAO Querydef</a> in <i>Visual C++ Programmer's Guide</i>. For related information, see the topics "QueryDef Object", "QueryDefs Collection", and "Accessing External Databases with DAO" in DAO Help.</p>
<p>
<b>#include &lt;afxdao.h&gt;</b></p>
<p>
<a href="_mfc_cdaoquerydef_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_cobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Samples</b>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DAOVIEW">
</object><a href=JavaScript:alink_3.Click()>MFC Sample DAOVIEW</a>  |&nbsp; <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DAOTABLE">
</object><a href=JavaScript:alink_4.Click()>MFC Sample DAOTABLE</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cdaorecordset.htm">CDaoRecordset</a>, <a href="_mfc_cdaodatabase.htm">CDaoDatabase</a>, <a href="_mfc_cdaotabledef.htm">CDaoTableDef</a>, <a href="_mfc_cdaoexception.htm">CDaoException</a></p>
</font></BODY>
</HTML>

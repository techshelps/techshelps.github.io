<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE Control Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_ole_control_classes"></a>OLE Control Classes</h1>
<p>
These are the primary classes you’ll use when writing OLE controls. The <b>COleControlModule</b> class in an OLE control module is like the <a href="_mfc_cwinapp.htm">CWinApp</a> class in an application. Each module implements one or more OLE controls; these controls are represented by <b>COleControl</b> objects. These controls communicate with their containers using <b>CConnectionPoint</b> objects.</p>
<p>
The <b>CPictureHolder</b> and <b>CFontHolder</b> classes encapsulate COM interfaces for pictures and fonts, while the <b>COlePropertyPage</b> and <b>CPropExchange</b> classes help you implement property pages and property persistence for your control.</p>
<p class=dt>
<a href="_mfc_colecontrolmodule.htm">COleControlModule</a></p>
<p class=indent>
Replaces the <b>CWinApp</b> class for your OLE control module. Derive from the <b>COleControlModule</b> class to develop an OLE control module object. It provides member functions for initializing your OLE control’s module. </p>
<p class=dt>
<a href="_mfc_colecontrol.htm">COleControl</a></p>
<p class=indent>
Derive from the <b>COleControl</b> class to develop an OLE control. Derived from <b>CWnd</b>, this class inherits all the functionality of a Windows window object plus additional OLE-specific functionality, such as event firing and the ability to support methods and properties.</p>
<p class=dt>
<a href="_mfc_cconnectionpoint.htm">CConnectionPoint</a></p>
<p class=indent>
The <b>CConnectionPoint</b> class defines a special type of interface used to communicate with other OLE objects, called a “connection point.” A connection point implements an outgoing interface that is able to initiate actions on other objects, such as firing events and change notifications.</p>
<p class=dt>
<a href="_mfc_cpictureholder.htm">CPictureHolder</a></p>
<p class=indent>
Encapsulates the functionality of a Windows picture object and the <b>IPicture</b> COM interface; used to implement the custom Picture property of an OLE control.</p>
<p class=dt>
<a href="_mfc_cfontholder.htm">CFontHolder</a></p>
<p class=indent>
Encapsulates the functionality of a Windows font object and the <b>IFont</b> COM interface; used to implement the stock Font property of an OLE control.</p>
<p class=dt>
<a href="_mfc_colepropertypage.htm">COlePropertyPage</a></p>
<p class=indent>
Displays the properties of an OLE control in a graphical interface, similar to a dialog box.</p>
<p class=dt>
<a href="_mfc_cpropexchange.htm">CPropExchange</a></p>
<p class=indent>
Supports the implementation of property persistence for your OLE controls. Analogous to <a href="_mfc_cdataexchange.htm">CDataExchange</a> for dialog boxes.</p>
<p class=dt>
<a href="_mfc_cmonikerfile.htm">CMonikerFile</a></p>
<p class=indent>
Takes a moniker, or a string representation that it can make into a moniker, and binds it synchronously to the stream for which the moniker is a name.</p>
<p class=dt>
<a href="_mfc_casyncmonikerfile.htm">CAsyncMonikerFile</a></p>
<p class=indent>
Works similarly to <b>CMonikerFile</b>; however, it binds the moniker asynchronously to the stream for which the moniker is a name.</p>
<p class=dt>
<a href="_mfc_cdatapathproperty.htm">CDataPathProperty</a></p>
<p class=indent>
Implements an OLE control property that can be loaded asynchronously.</p>
<p class=dt>
<a href="_mfc_ccacheddatapathproperty.htm">CCachedDataPathProperty</a></p>
<p class=indent>
Implements an OLE control property transferred asynchronously and cached in a memory file.</p>
<p class=dt>
<a href="_mfc_colecmdui.htm">COleCmdUI</a></p>
<p class=indent>
Allows an Active document to receive commands that originate in its container's user interface (such as FileNew, Open, Print, and so on), and allows a container to receive commands that originate in the Active document's user interface.</p>
<p class=dt>
<a href="_mfc_colesafearray.htm">COleSafeArray</a></p>
<p class=indent>
Works with arrays of arbitrary type and dimension.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>afxTraceFlags</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_afxtraceflags"></a><sup></sup>afxTraceFlags&nbsp; </h1>
<p>
<b>int</b> <b>afxTraceFlags;</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
Used to turn on the built-in reporting features of the Microsoft Foundation Class Library.</p>
<p>
This variable can be set under program control or while using the debugger. Each bit of <b>afxTraceFlags</b> selects a trace reporting option. You can turn any one of these bits on or off as desired using TRACER.EXE. There is never a need to set these flags manually. </p>
<p>
The following is a list of the bit patterns and the resulting trace report option:
<ul type=disc>
<li>
<b>0x01</b>&nbsp;&nbsp;&nbsp;Multiapplication debugging. This will prefix each <b>TRACE</b> output with the name of the application and affects both the explicit <b>TRACE</b> output of your program as well as the additional report options described below.<br><br></li>
<li>
<b>0x02</b>&nbsp;&nbsp;&nbsp;Main message pump. Reports each message received in the main <b>CWinApp</b> message-handling mechanism. Lists the window handle, the message name or number, <b>wParam</b>, and <b>lParam</b>. <p class=tl>
The report is made after the Windows <b>GetMessage</b> call but before any message translation or dispatch occurs. </P><p class=tl>
Dynamic data exchange (DDE) messages will display additional data that can be used for some debugging scenarios in OLE. </P><p class=tl>
This flag displays only messages that are posted, not those that are sent.</P></li>
<li>
<b>0x04</b>&nbsp;&nbsp;&nbsp;Main message dispatch. Like option <b>0x02</b> above but applies to messages dispatched in <b>CWnd::WindowProc</b>, and therefore handles both posted and sent messages that are about to be dispatched.<br><br></li>
<li>
<b>0x08</b>&nbsp;&nbsp;&nbsp;<b>WM_COMMAND</b> dispatch. A special case used for extended <b>WM_COMMAND/OnCommand</b> handling to report progress of the command-routing mechanism.<p class=tl>
Also reports which class receives the command (when there is a matching message-map entry), and when classes do not receive a command (when there is no matching message map entry). This report is especially useful to track the flow of command messages in multiple document interface (MDI) applications.</P></li>
<li>
<b>0x10</b>&nbsp;&nbsp;&nbsp;OLE tracing. Reports significant OLE notifications or requests.<p class=tl>
Turn this option on for an OLE client or server to track communication between the OLE DLLs and an OLE application.</P></li>
<li>
<b>0x20</b>&nbsp;&nbsp;&nbsp;Database tracing. Reports warnings for both ODBC and DAO classes, plus additional information for DAO. Turn this option on if you want tracing for either the MFC ODBC classes or the MFC DAO classes. For ODBC, you get only warnings, such as type mismatches in your DFX calls. For DAO, you get information for all exceptions, including the line and function in DAO or in the MFC DAO classes where a failure occurred.</li>
</ul>
<p>
For more information, see <a href="_mfcnotes_tn007.htm">Technical Note 7</a>.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_afxtraceenabled.htm">afxTraceEnabled</a>, <a href="_mfc_trace.htm">TRACE</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObject::Dump</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cobject.3a3a.dump"></a><sup></sup>CObject::Dump  </h1>
<p>
<b>virtual</b> <b>void</b> <b>Dump(</b> <b>CDumpContext&amp;</b> <i>dc</i> <b>)</b> <b>const;</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>dc</i></p>
<p class=indent>
The diagnostic dump context for dumping, usually <b>afxDump</b>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Dumps the contents of your object to a <a href="_mfc_cdumpcontext.htm">CDumpContext</a> object. </p>
<p>
When you write your own class, you should override the <b>Dump</b> function to provide diagnostic services for yourself and other users of your class. The overridden <b>Dump</b> usually calls the <b>Dump</b> function of its base class before printing data members unique to the derived class. <b>CObject::Dump</b> prints the class name if your class uses the <b>IMPLEMENT_DYNAMIC</b> or <b>IMPLEMENT_SERIAL</b> macro.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Your <b>Dump</b> function should not print a newline character at the end of its output. </p>
<p>
<b>Dump</b> calls make sense only in the Debug version of the Microsoft Foundation Class Library. You should bracket calls, function declarations, and function implementations with <b>#ifdef _DEBUG</b>/<b>#endif</b> statements for conditional compilation. </p>
<p>
Since <b>Dump</b> is a <b>const</b> function, you are not permitted to change the object state during the dump. </p>
<p>
The <a href="_mfc_cdumpcontext.3a3a.operator_.3c3c.htm">CDumpContext insertion (&lt;&lt;) operator</a> calls <b>Dump</b> when a <b>CObject</b> pointer is inserted. </p>
<p>
<b>Dump</b> permits only “acyclic” dumping of objects. You can dump a list of objects, for example, but if one of the objects is the list itself, you will eventually overflow the stack.</p>
<p class=label>
<b>Example</b></p>
<p>
See <a href="_mfc_coblist.3a3a.coblist.htm">CObList::CObList</a> for a listing of the <code>CAge</code> class used in all <b>CObject</b> examples.</p>
<pre><code>// example for CObject::Dump
void CAge::Dump( CDumpContext &amp;dc ) const
 {
 CObject::Dump( dc );
 dc &lt;&lt; "Age = " &lt;&lt; m_years;
 }
</code></pre>
<p>
<a href="_mfc_cobject.htm">CObject Overview</a>  |&nbsp; <a href="_mfc_cobject_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

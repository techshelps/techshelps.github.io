<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CFieldExchange::SetFieldType</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cfieldexchange.3a3a.setfieldtype"></a><sup></sup>CFieldExchange::SetFieldType</h1>
<p>
<b>void</b> <b>SetFieldType(</b> <b>UINT</b> <i>nFieldType</i> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>nFieldType</i></p>
<p class=indent>
A value of the <b>enum</b> <b>FieldType</b>, declared in <b>CFieldExchange</b>, which can be one of the following:
<ul type=disc>
<li>
<b>CFieldExchange::outputColumn</b><br><br></li>
<li>
<b>CFieldExchange::inputParam</b><br><br></li>
<li>
<b>CFieldExchange::param</b><br><br></li>
<li>
<b>CFieldExchange::outputParam</b><br><br></li>
<li>
<b>CFieldExchange::inoutParam</b></li>
</ul>
<p class=label>
<b>Remarks</b></p>
<p>
You need a call to <b>SetFieldType</b> in your recordset class's <a href="_mfc_crecordset.3a3a.dofieldexchange.htm">DoFieldExchange</a> or <a href="_mfc_crecordset.3a3a.dobulkfieldexchange.htm">DoBulkFieldExchange</a> override. For field data members, you must call <b>SetFieldType</b> with a parameter of <b>CFieldExchange::outputColumn</b>, followed by calls to the RFX or Bulk RFX functions. If you have not implemented bulk row fetching, then ClassWizard places this <b>SetFieldType</b> call for you in the field map section of <b>DoFieldExchange</b>.</p>
<p>
If you parameterize your recordset class, you must call <b>SetFieldType</b> again, outside any field map section, followed by RFX calls for all the parameter data members. Each type of parameter data member must have its own <b>SetFieldType</b> call. The following table distinguishes the different values you can pass to <b>SetFieldType</b> to represent the parameter data members of your class:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>SetFieldType parameter value</b></td>
<td class=label width=56%><b>Type of parameter data member</b></td>
</tr>
<tr valign=top>
<td width=44%><b>CFieldExchange::inputParam</b></td>
<td width=56%>Input parameter. A value that is passed into the recordset's query or stored procedure.</td>
</tr>
<tr valign=top>
<td width=44%><b>CFieldExchange::param</b></td>
<td width=56%>Same as <b>CFieldExchange::inputParam</b>.</td>
</tr>
<tr valign=top>
<td width=44%><b>CFieldExchange::outputParam</b></td>
<td width=56%>Output parameter. A return value of the recordset's stored procedure.</td>
</tr>
<tr valign=top>
<td width=44%><b>CFieldExchange::inoutParam</b></td>
<td width=56%>Input/output parameter. A value that is passed into and returned from the recordset's stored procedure.</td>
</tr>
</table><br>
<p>
In general, each group of RFX function calls associated with field data members or parameter data members must be preceded by a call to <b>SetFieldType</b>. The <i>nFieldType</i> parameter of each <b>SetFieldType</b> call identifies the type of the data members represented by the RFX function calls that follow the <b>SetFieldType</b> call.</p>
<p>
For more information about handling output and input/output parameters, see the <b>CRecordset</b> member function <a href="_mfc_crecordset.3a3a.flushresultset.htm">FlushResultSet</a>. For more information about the RFX and Bulk RFX functions, see the topic <a href="_mfc_record_field_exchange_functions.htm">Record Field Exchange Functions</a>. For related information about bulk row fetching, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Recordset.3a_.Fetching_Records_in_Bulk_.28.ODBC.29">
</object><a href=JavaScript:alink_1.Click()>Recordset: Fetching Records in Bulk (ODBC)</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p class=label>
<b>Example</b></p>
<p>
This example shows several calls to RFX functions with accompanying calls to <b>SetFieldType</b>. Note that <b>SetFieldType</b> is called through the <i>pFX</i> pointer to a <b>CFieldExchange</b> object. </p>
<pre><code>void CSections::DoFieldExchange( CFieldExchange* pFX )
{
 &nbsp; //{{AFX_FIELD_MAP(CSections)
 &nbsp; pFX-&gt;SetFieldType( CFieldExchange::outputColumn );
 &nbsp; RFX_Text( pFX, "CourseID", m_strCourseID );
 &nbsp; RFX_Text( pFX, "InstructorID", m_strInstructorID );
 &nbsp; RFX_Text( pFX, "RoomNo", m_strRoomNo );
 &nbsp; RFX_Text( pFX, "Schedule", m_strSchedule );
 &nbsp; //}}AFX_FIELD_MAP

 &nbsp; // output parameter
 &nbsp; pFX-&gt;SetFieldType( CFieldExchange::outputParam );
 &nbsp; RFX_Long( pFX, "Instructor_Count", m_nCountParam );

 &nbsp; // input parameter
 &nbsp; pFX-&gt;SetFieldType( CFieldExchange::inputParam );
 &nbsp; RFX_Text( pFX, "Department_Name", m_strNameParam );
}
</code></pre>
<p>
<a href="_mfc_cfieldexchange.htm">CFieldExchange Overview</a>  |&nbsp; <a href="_mfc_cfieldexchange_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_crecordset.3a3a.dofieldexchange.htm">CRecordset::DoFieldExchange</a>, <a href="_mfc_crecordset.3a3a.dobulkfieldexchange.htm">CRecordset::DoBulkFieldExchange</a>, <a href="_mfc_crecordset.3a3a.flushresultset.htm">CRecordset::FlushResultSet</a>, <a href="_mfc_record_field_exchange_functions.htm">Record Field Exchange Functions</a></p>
</font></BODY>
</HTML>

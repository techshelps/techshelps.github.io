<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CFile::CFile</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cfile.3a3a.cfile"></a><sup></sup>CFile::CFile&nbsp; </h1>
<p>
<b>CFile(</b> <b>);</b></p>
<p>
<b>CFile(</b> <b>int</b> <i>hFile</i> <b>);</b></p>
<p>
<b>CFile(</b> <b>LPCTSTR</b> <i>lpszFileName</i><b>,</b> <b>UINT</b> <i>nOpenFlags</i> <b>);</b><br>
<b>throw(</b> <b>CFileException</b> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hFile</i></p>
<p class=indent>
The handle of a file that is already open.</p>
<p class=dt>
<i>lpszFileName</i></p>
<p class=indent>
A string that is the path to the desired file. The path can be relative or absolute.</p>
<p class=dt>
<i>nOpenFlags</i></p>
<p class=indent>
Sharing and access mode. Specifies the action to take when opening the file. You can combine options listed below by using the bitwise-OR (<b>|</b>) operator. One access permission and one share option are required; the <b>modeCreate</b> and <b>modeNoInherit</b> modes are optional. The values are as follows:
<ul type=disc>
<li>
<b>CFile::modeCreate</b>&nbsp;&nbsp;&nbsp;Directs the constructor to create a new file. If the file exists already, it is truncated to 0 length.<br><br></li>
<li>
<b>CFile::modeNoTruncate</b>&nbsp;&nbsp;&nbsp;Combine this value with <b>modeCreate</b>. If the file being created already exists, it is not truncated to 0 length. Thus the file is guaranteed to open, either as a newly created file or as an existing file. This might be useful, for example, when opening a settings file that may or may not exist already. This option applies to <b>CStdioFile</b> as well.<br><br></li>
<li>
<b>CFile::modeRead</b>&nbsp;&nbsp;&nbsp;Opens the file for reading only.<br><br></li>
<li>
<b>CFile::modeReadWrite</b>&nbsp;&nbsp;&nbsp;Opens the file for reading and writing.<br><br></li>
<li>
<b>CFile::modeWrite</b>&nbsp;&nbsp;&nbsp;Opens the file for writing only.<br><br></li>
<li>
<b>CFile::modeNoInherit</b>&nbsp;&nbsp;&nbsp;Prevents the file from being inherited by child processes.<br><br></li>
<li>
<b>CFile::shareDenyNone</b>&nbsp;&nbsp;&nbsp;Opens the file without denying other processes read or write access to the file. <b>Create</b> fails if the file has been opened in compatibility mode by any other process.<br><br></li>
<li>
<b>CFile::shareDenyRead</b>&nbsp;&nbsp;&nbsp;Opens the file and denies other processes read access to the file. <b>Create</b> fails if the file has been opened in compatibility mode or for read access by any other process.<br><br></li>
<li>
<b>CFile::shareDenyWrite</b>&nbsp;&nbsp;&nbsp;Opens the file and denies other processes write access to the file. <b>Create</b> fails if the file has been opened in compatibility mode or for write access by any other process.<br><br></li>
<li>
<b>CFile::shareExclusive</b>&nbsp;&nbsp;&nbsp;Opens the file with exclusive mode, denying other processes both read and write access to the file. Construction fails if the file has been opened in any other mode for read or write access, even by the current process.<br><br></li>
<li>
<b>CFile::shareCompat</b>&nbsp;&nbsp;&nbsp;This flag is not available in 32 bit MFC. This flag maps to <b>CFile::shareExclusive</b> when used in <b>CFile::Open</b>.<br><br></li>
<li>
<b>CFile::typeText</b>&nbsp;&nbsp;&nbsp;Sets text mode with special processing for carriage return–linefeed pairs (used in derived classes only).<br><br></li>
<li>
<b>CFile::typeBinary</b>&nbsp;&nbsp;&nbsp;Sets binary mode (used in derived classes only).</li>
</ul>
<p class=label>
<b>Remarks</b></p>
<p>
The default constructor does not open a file but rather sets <b>m_hFile</b> to <b>CFile::hFileNull</b>. Because this constructor does not throw an exception, it does not make sense to use <b>TRY</b>/<b>CATCH</b> logic. Use the <b>Open</b> member function, then test directly for exception conditions. For a discussion of exception-processing strategy, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Exceptions">
</object><a href=JavaScript:alink_1.Click()>Exceptions</a> in <i>Visual C++ Programmer's Guide</i>. </p>
<p>
The constructor with one argument creates a <b>CFile</b> object that corresponds to an existing operating-system file identified by <i>hFile</i>. No check is made on the access mode or file type. When the <b>CFile</b> object is destroyed, the operating-system file will not be closed. You must close the file yourself. </p>
<p>
The constructor with two arguments creates a <b>CFile</b> object and opens the corresponding operating-system file with the given path. This constructor combines the functions of the first constructor and the <b>Open</b> member function. It throws an exception if there is an error while opening the file. Generally, this means that the error is unrecoverable and that the user should be alerted.</p>
<p class=label>
<b>Example</b></p>
<pre><code>//example for CFile::CFile
char* pFileName = "test.dat";
TRY
{
   CFile f( pFileName, CFile::modeCreate | CFile::modeWrite );
}
CATCH( CFileException, e )
{
   #ifdef _DEBUG
      afxDump &lt;&lt; "File could not be opened " &lt;&lt; e-&gt;m_cause &lt;&lt; "\n";
   #endif
}
END_CATCH
</code></pre>
<p>
<a href="_mfc_cfile.htm">CFile Overview</a>  |&nbsp; <a href="_mfc_cfile_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
</font></BODY>
</HTML>

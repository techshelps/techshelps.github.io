<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDocument::AddView</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cdocument.3a3a.addview"></a><sup></sup>CDocument::AddView</h1>
<p>
<b>void</b> <b>AddView(</b> <b>CView*</b> <i>pView</i> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pView</i></p>
<p class=indent>
Points to the view being added.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this function to attach a view to the document. This function adds the specified view to the list of views associated with the document; the function also sets the view’s document pointer to this document. The framework calls this function when attaching a newly created view object to a document; this occurs in response to a File New, File Open, or New Window command or when a splitter window is split. </p>
<p>
Call this function only if you are manually creating and attaching a view. Typically you will let the framework connect documents and views by defining a <a href="_mfc_cdoctemplate.htm">CDocTemplate</a> object to associate a document class, view class, and frame window class.</p>
<p class=label>
<b>Example</b></p>
<pre><code>// The following example toggles two views in an SDI (single document
// interface) frame window. A design decision must be made as to
// whether to leave the inactive view connected to the document,
// such that the inactive view continues to receive OnUpdate
// notifications from the document. It is usually desirable to
// keep the inactive view continuously in sync with the document, even 
// though it is inactive. However, doing so incurs a performance cost,
// as well as the programming cost of implementing OnUpdate hints.
// It may be less expensive, in terms of performance and/or programming,
// to re-sync the inactive view with the document only with it is 
// reactivated. This example illustrates this latter approach, by 
// reconnecting the newly active view and disconnecting the newly 
// inactive view, via calls to CDocument::AddView and RemoveView.

BOOL CMainFrame::OnViewChange(UINT nCmdID)
{
 CView* pViewAdd;
 CView* pViewRemove;
 CDocument* pDoc = GetActiveDocument();
 UINT nCmdID;
    
 nCmdID = LOWORD(GetCurrentMessage()-&gt;wParam);
 &nbsp; 
 if((nCmdID == ID_VIEW_VIEW1) &amp;&amp; (m_currentView == 1))
    return;
 if((nCmdID == ID_VIEW_VIEW2) &amp;&amp; (m_currentView == 2))
   return;

 if (nCmdID == ID_VIEW_VIEW2)
 {
  if (m_pView2 == NULL)
  {
 &nbsp; m_pView1 = GetActiveView();
 &nbsp; m_pView2 = new CMyView2;

//Note that if OnSize has been overridden in CMyView2 
//and GetDocument() is used in this override it can 
//cause assertions and, if the assertions are ignored,
//cause access violation.
  
 &nbsp; m_pView2-&gt;Create(NULL, NULL, AFX_WS_DEFAULT_VIEW,
 &nbsp;    rectDefault, this, AFX_IDW_PANE_FIRST + 1, NULL);
  }
 &nbsp; pViewAdd = m_pView2;
 &nbsp; pViewRemove = m_pView1;
 &nbsp; m_currentView= 2;
 }
 else
 {
  pViewAdd = m_pView1;
  pViewRemove = m_pView2;
  m_currentView= 1;
 }
     
// Set the child i.d. of the active view to AFX_IDW_PANE_FIRST,
// so that CFrameWnd::RecalcLayout will allocate to this 
// "first pane" that portion of&nbsp;&nbsp; the frame window's client area 
// not allocated to control&nbsp;&nbsp; bars.&nbsp; Set the child i.d. of the 
// other view to anything other than AFX_IDW_PANE_FIRST; this
// examples switches the child id's of the two views.

 int nSwitchChildID = pViewAdd-&gt;GetDlgCtrlID();
 pViewAdd-&gt;SetDlgCtrlID(AFX_IDW_PANE_FIRST);
 pViewRemove-&gt;SetDlgCtrlID(nSwitchChildID);

 // Show the newly active view and hide the inactive view.

 pViewAdd-&gt;ShowWindow(SW_SHOW);
 pViewRemove-&gt;ShowWindow(SW_HIDE);

 // Connect the newly active view to the document, and
 // disconnect the inactive view.
 pDoc-&gt;AddView(pViewAdd);
 pDoc-&gt;RemoveView(pViewRemove);

 SetActiveView(pViewAdd);
 RecalcLayout();
}
</code></pre>
<p>
<a href="_mfc_cdocument.htm">CDocument Overview</a>  |&nbsp; <a href="_mfc_cdocument_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cdoctemplate.htm">CDocTemplate</a>, <a href="_mfc_cdocument.3a3a.getfirstviewposition.htm">CDocument::GetFirstViewPosition</a>, <a href="_mfc_cdocument.3a3a.getnextview.htm">CDocument::GetNextView</a>, <a href="_mfc_cdocument.3a3a.removeview.htm">CDocument::RemoveView</a>, <a href="_mfc_cview.3a3a.getdocument.htm">CView::GetDocument</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CEvent</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cevent"></a>CEvent</h1>
<p>
<img src="cevent.gif" border=0></p>
<p>
An object of class <b>CEvent </b>represents an “event” — a synchronization object that allows one thread to notify another that an event has occurred. Events are useful when a thread needs to know when to perform its task. For example, a thread that copies data to a data archive would need to be notified when new data is available. By using a <b>CEvent </b>object to notify the copy thread when new data is available, the thread can perform its task as soon as possible.</p>
<p>
<b>CEvent </b>objects have two types: manual and automatic. A manual <b>CEvent </b>object stays in the state set by <a href="_mfc_cevent.3a3a.setevent.htm">SetEvent</a> or <a href="_mfc_cevent.3a3a.resetevent.htm">ResetEvent</a> until the other function is called. An automatic <b>CEvent </b>object automatically returns to a nonsignaled (unavailable) state after at least one thread is released.</p>
<p>
To use a <b>CEvent </b>object, construct the <b>CEvent </b>object when it is needed. Specify the name of the event you wish to wait on, and that your application should initially own it. You can then access the event when the constructor returns. Call <a href="_mfc_cevent.3a3a.setevent.htm">SetEvent</a> to signal (make available) the event object and then call <a href="_mfc_cevent.3a3a.unlock.htm">Unlock</a> when you are done accessing the controlled resource.</p>
<p>
An alternative method for using <b>CEvent </b>objects is to add a variable of type <b>CEvent </b>as a data member to the class you wish to control. During construction of the controlled object, call the constructor of the <b>CEvent </b>data member specifying if the event is initially signaled, the type of event object you want, the name of the event (if it will be used across process boundaries), and desired security attributes.</p>
<p>
To access a resource controlled by a <b>CEvent </b>object in this manner, first create a variable of either type <a href="_mfc_csinglelock.htm">CSingleLock</a><b> </b>or type <a href="_mfc_cmultilock.htm">CMultiLock</a><b> </b>in your resource’s access member function. Then call the lock object’s <b>Lock</b> member function (for example, <a href="_mfc_cmultilock.3a3a.lock.htm">CMultiLock::Lock</a>). At this point, your thread will either gain access to the resource, wait for the resource to be released and gain access, or wait for the resource to be released and time out, failing to gain access to the resource. In any case, your resource has been accessed in a thread-safe manner. To release the resource, call <b>SetEvent</b> to signal the event object, and then use the lock object’s <b>Unlock</b> member function (for example, <a href="_mfc_cmultilock.3a3a.unlock.htm">CMultiLock::Unlock</a>), or allow the lock object to fall out of scope.</p>
<p>
For more information on using <b>CEvent </b>objects, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.How_to_Use_the_Synchronization_Classes">
</object><a href=JavaScript:alink_1.Click()>Multithreading: How to Use the Synchronization Classes</a> in <i>Visual C++ Programmer's Guide</i>.</p>
<p>
<b>#include &lt;afxmt.h&gt;</b></p>
<p>
<a href="_mfc_cevent_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_csyncobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_MTGDI">
</object><a href=JavaScript:alink_2.Click()>MFC Sample MTGDI</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CComTearOffObject</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_atl_ccomtearoffobject"></a>CComTearOffObject</h1>
<p>
<b>template&lt; class</b> <i>Base</i> <b>&gt;</b><br>
<b>class</b> <b>CComTearOffObject</b> <b>:</b> <b>public</b> <i>Base</i></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>Base</i></p>
<p class=indent>
Your tear-off class, derived from <b>CComTearOffObjectBase</b> and the interfaces you want your tear-off object to support.</p>
<p>
ATL implements its tear-off interfaces in two phases — the <b>CComTearOffObjectBase</b> methods handle the reference count and <b>QueryInterface</b>, while <b>CComTearOffObject</b> implements <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_IUnknown">
</object><a href=JavaScript:alink_1.Click()>IUnknown</a>.</p>
<p>
<b>CComTearOffObject</b> implements a tear-off interface as a separate object that is instantiated only when that interface is queried for. The tear-off is deleted when its reference count becomes zero. Typically, you build a tear-off interface for an interface that is rarely used, since using a tear-off saves a vtable pointer in all the instances of your main object. </p>
<p>
You should derive the class implementing the tear-off from <b>CComTearOffObjectBase</b> and from whichever interfaces you want your tear-off object to support. <b>CComTearOffObjectBase</b> is templatized on the owner class and the thread model. The owner class is the class of the object for which a tear-off is being implemented. If you do not specify a thread model, the default thread model is used.</p>
<p>
You should create a COM map for your tear-off class. When ATL instantiates the tear-off, it will create <b>CComTearOffObject&lt;CYourTearOffClass&gt;</b> or <b>CComCachedTearOffObject&lt;CYourTearOffClass&gt;</b>.</p>
<p>
For example, in the BEEPER sample, the <code>CBeeper2</code> class is the tear-off class and the <code>CBeeper</code> class is the owner class:</p>
<pre><code>class CBeeper2 : public ISupportErrorInfo,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public CComTearOffObjectBase&lt;CBeeper&gt;
{
public:
 &nbsp; CBeeper2() {}
 &nbsp; STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; return (InlineIsEqualGUID(IID_IBeeper,riid)) ? 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S_OK : S_FALSE;
 &nbsp; }

 &nbsp; BEGIN_COM_MAP(CBeeper2)
 &nbsp;&nbsp;&nbsp;&nbsp; COM_INTERFACE_ENTRY(ISupportErrorInfo)
 &nbsp; END_COM_MAP()
};

class CBeeper :
 &nbsp; public IDispatchImpl&lt;IBeeper, &amp;IID_IBeeper, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;LIBID_BeeperLib&gt;,
 &nbsp; public CComObjectRoot,
 &nbsp; public CComCoClass&lt;CBeeper, &amp;CLSID_Beeper&gt;
{
public:
 &nbsp; CBeeper();
 &nbsp; BEGIN_COM_MAP(CBeeper)
 &nbsp;&nbsp;&nbsp;&nbsp; COM_INTERFACE_ENTRY(IDispatch)
 &nbsp;&nbsp;&nbsp;&nbsp; COM_INTERFACE_ENTRY(IBeeper)
 &nbsp;&nbsp;&nbsp;&nbsp; COM_INTERFACE_ENTRY_TEAR_OFF(IID_ISupportErrorInfo, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CBeeper2)
 &nbsp; END_COM_MAP()
...
};
</code></pre>
<p>
<b>#include &lt;atlcom.h&gt;</b></p>
<p>
<a href="_atl_ccomtearoffobject_class_members.htm">Class Members</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_atl_ccomcachedtearoffobject.htm">CComCachedTearOffObject</a> </p>
</font></BODY>
</HTML>

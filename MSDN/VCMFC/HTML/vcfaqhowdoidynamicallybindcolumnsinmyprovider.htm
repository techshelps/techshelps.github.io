<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Do I Dynamically Bind Columns in My Provider?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcfaqhowdoidynamicallybindcolumnsinmyprovider"></a>How Do I Dynamically Bind Columns in My Provider?</h1>
<p>
Make sure you really need dynamic column binding. You may need it because:
<ul type=disc>
<li>
Your rowset columns are not defined at compile time, or <br><br></li>
<li>
You support an element such as bookmarks that adds columns.</li>
</ul>
<p>
To implement dynamic column binding:
<ul type=disc>
<li>
Remove any <b>PROVIDER_COLUMN_MAP</b>s from your code. <br><br></li>
<li>
In the user record (your structure), add the following declaration:<pre><code>static ATLCOLUMNINFO* _GetColumnInfo(void* pThis, ULONG* pcCols);
</code></pre>
</li>
<li>
Implement the <b>_GetColumnInfo</b> function. This function lays out how the information is stored. You may need to get properties or other information for this function. You may want to create a macro, similar to the <a href="vcrefcolumn_entry.htm">COLUMN_ENTRY</a> macro, to add your own information. <p class=tl>
The following example shows a <b>_GetColumnInfo</b> function.</P><pre><code>// Check the property flag for bookmarks, if it is set, set the zero
// ordinal entry in the column map with the bookmark information.
CAgentRowset* pRowset = (CAgentRowset*) pThis;
CComQIPtr&lt;IRowsetInfo, &amp;IID_IRowsetInfo&gt; spRowsetProps = pRowset;

CDBPropIDSet set(DBPROPSET_ROWSET);
set.AddPropertyID(DBPROP_BOOKMARKS);
DBPROPSET* pPropSet = NULL;
ULONG ulPropSet = 0;
HRESULT hr;

if (spRowsetProps)
hr = spRowsetProps-&gt;GetProperties(1, &amp;set, &amp;ulPropSet, &amp;pPropSet);

if (pPropSet)
{
CComVariant var = pPropSet-&gt;rgProperties[0].vValue;
CoTaskMemFree(pPropSet-&gt;rgProperties);
CoTaskMemFree(pPropSet);

if (SUCCEEDED(hr) &amp;&amp; (var.boolVal == VARIANT_TRUE))
{
ADD_COLUMN_ENTRY_EX(ulCols, OLESTR("Bookmark"), 0, sizeof(DWORD), DBTYPE_BYTES, 
0, 0, GUID_NULL, CAgentMan, dwBookmark, DBCOLUMNFLAGS_ISBOOKMARK)
ulCols++;
}
}

// Next set the other columns up.
ADD_COLUMN_ENTRY(ulCols, OLESTR("Command"), 1, 256, DBTYPE_STR, 0xFF, 0xFF, 
GUID_NULL, CAgentMan, szCommand)
ulCols++;
ADD_COLUMN_ENTRY(ulCols, OLESTR("Text"), 2, 256, DBTYPE_STR, 0xFF, 0xFF, 
GUID_NULL, CAgentMan, szText)
ulCols++;

ADD_COLUMN_ENTRY(ulCols, OLESTR("Command2"), 3, 256, DBTYPE_STR, 0xFF, 0xFF, 
GUID_NULL, CAgentMan, szCommand2)
ulCols++;
ADD_COLUMN_ENTRY(ulCols, OLESTR("Text2"), 4, 256, DBTYPE_STR, 0xFF, 0xFF, 
GUID_NULL, CAgentMan, szText2)
ulCols++;


if (pcCols != NULL)
*pcCols = ulCols;

return _rgColumns;
}
</code></pre>
</li>
</ul>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMutex</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cmutex"></a>CMutex</h1>
<p>
<img src="cmutex.gif" border=0></p>
<p>
An object of class <b>CMutex </b>represents a “mutex”&nbsp;— a synchronization object that allows one thread mutually exclusive access to a resource. Mutexes are useful when only one thread at a time can be allowed to modify data or some other controlled resource. For example, adding nodes to a linked list is a process that should only be allowed by one thread at a time. By using a <b>CMutex </b>object to control the linked list, only one thread at a time can gain access to the list.</p>
<p>
To use a <b>CMutex</b> object, construct the <b>CMutex </b>object when it is needed. Specify the name of the mutex you wish to wait on, and that your application should initially own it. You can then access the mutex when the constructor returns. Call <a href="_mfc_csyncobject.3a3a.unlock.htm">CSyncObject::Unlock</a> when you are done accessing the controlled resource.</p>
<p>
An alternative method for using <b>CMutex </b>objects is to add a variable of type <b>CMutex </b>as a data member to the class you wish to control. During construction of the controlled object, call the constructor of the <b>CMutex </b>data member specifying if the mutex is initially owned, the name of the mutex (if it will be used across process boundaries), and desired security attributes.</p>
<p>
To access resources controlled by <b>CMutex</b> objects in this manner, first create a variable of either type <a href="_mfc_csinglelock.htm">CSingleLock</a><b> </b>or type <a href="_mfc_cmultilock.htm">CMultiLock</a> in your resource’s access member function. Then call the lock object’s <b>Lock</b> member function (for example, <a href="_mfc_csinglelock.3a3a.lock.htm">CSingleLock::Lock</a>). At this point, your thread will either gain access to the resource, wait for the resource to be released and gain access, or wait for the resource to be released and time out, failing to gain access to the resource. In any case, your resource has been accessed in a thread-safe manner. To release the resource, use the lock object’s <b>Unlock</b> member function (for example, <a href="_mfc_csinglelock.3a3a.unlock.htm">CSingleLock::Unlock</a>), or allow the lock object to fall out of scope.</p>
<p>
For more information on using <b>CMutex </b>objects, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading.3a_.How_To_Use_the_Synchronization_Classes">
</object><a href=JavaScript:alink_1.Click()>Multithreading: How to Use the Synchronization Classes</a> in <i>Visual C++ Programmer’s Guide</i>.</p>
<p>
<b>#include &lt;afxmt.h&gt;</b></p>
<p>
<a href="_mfc_cmutex_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_csyncobject.htm">Base Class</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a> </p>
<p>
<b>Sample</b>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_MUTEXES">
</object><a href=JavaScript:alink_2.Click()>MFC Sample MUTEXES</a></p>
</font></BODY>
</HTML>

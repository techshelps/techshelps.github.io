<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CInternetSession::EnableStatusCallback</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_mfc_cinternetsession.3a3a.enablestatuscallback"></a>CInternetSession::EnableStatusCallback</h1>
<p>
<b>BOOL EnableStatusCallback( BOOL </b><i>bEnable</i><b> = TRUE );<br>
Throw ( CInternetException );</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
Nonzero if successful; otherwise 0. If the call fails, determine the cause of the failure by examining the thrown <a href="_mfc_cinternetexception.htm">CInternetException</a> object.</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>bEnable</i></p>
<p class=indent>
Specifies whether callback is enabled or disabled. The default is <b>TRUE</b>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Call this member function to enable status callback. When handling status callback, you can provide status about the progress of the operation (such as resolving name, connecting to server, and so on) in the status bar of the application. Displaying operation status is especially desirable during a long-term operation.</p>
<p>
You can set a callback routine for synchronous operations; however, you must establish a callback routine for asynchronous operations because the asynchronous API makes a callback with <b>INTERNET_STATUS_REQUEST_COMPLETE</b> to indicate that the request has completed. </p>
<p>
A callback for an asynchronous operation will be on a thread other than the one for the original request. The call can fail with an <b>ERROR_IO_PENDING</b> error if the request is not complete when the status callback occurs. The callback may be callled in a thread context different from the thread which initiated the request.</p>
<p>
Because callbacks occur during the request’s processing, the application should spend as little time as possible in the callback to prevent degradation of data throughput to the network. For example, putting up a dialog box in a callback may be such a lengthy operation that the server terminates the request. </p>
<p>
The status callback cannot be removed as long as any callbacks or any asynchronous functions are pending.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To handle any operations asynchronously, three conditions must be set:
<ul type=disc>
<li>
In the constructor, <i>dwFlags</i> must include <b>INTERNET_FLAG_ASYNC</b>.<br><br></li>
<li>
In the constructor, <i>dwContext</i> must be set to 1.<br><br></li>
<li>
You must establish a call back function by calling <b>EnableStatusCallback</b>.</li>
</ul>
<p>
For more information about asynchronous operations, see the article <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Internet_First_Steps.3a_.WinInet">
</object><a href=JavaScript:alink_1.Click()>Internet First Steps: WinInet</a> in <i>Visual C++ Programmer’s Guide</i>. </p>
<p>
<a href="_mfc_cinternetsession.htm">CInternetSession Overview</a>  |&nbsp; <a href="_mfc_cinternetsession_class_members.htm">Class Members</a>  |&nbsp; <a href="_mfc_hierarchy_chart.htm">Hierarchy Chart</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_mfc_cinternetsession.3a3a.cinternetsession.htm">CInternetSession::CInternetSession</a></p>
</font></BODY>
</HTML>

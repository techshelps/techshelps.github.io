<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Do I Override a Dynamic Accessor?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="vcrefhowdoioverridedynamicaccessor"></a>How Do I Override a Dynamic Accessor?</h1>
<p>
When you use <b>CDynamicAccessor</b>, the command <b>Open</b> method creates an accessor for you automatically, based on the column information of the opened rowset. You can override the dynamic accessor to control exactly how the columns are bound. </p>
<p>
To override the dynamic accessor, pass <b>false</b> as the last parameter to the <b>CCommand::Open</b> method. This prevents <b>Open</b> from creating an accessor automatically. You can then call <b>GetColumnInfo</b> and call <b>AddBindEntry</b> for each column you want to bind. The following code shows how to do it:</p>
<pre><code>USES_CONVERSION;
double   dblProductID;

CCommand&lt;CDynamicAccessor&gt; product;
// Open the table, passing false to prevent automatic binding 
product.Open(session, _T("Select * FROM Products"), NULL, NULL, DBGUID_DEFAULT, false);

ULONG         nColumns;
DBCOLUMNINFO*   pColumnInfo;
// Get the column information from the opened rowset
product.GetColumnInfo(&amp;nColumns, &amp;pColumnInfo);

// Bind the product ID as a double
pColumnInfo[0].wType          = DBTYPE_R8;
pColumnInfo[0].ulColumnSize = 8;
product.AddBindEntry(pColumnInfo[0]);

// Bind the product name as it is
product.AddBindEntry(pColumnInfo[1]);

// Bind the reorder level as a string
pColumnInfo[8].wType          = DBTYPE_STR;
pColumnInfo[8].ulColumnSize = 10;
product.AddBindEntry(pColumnInfo[8]);

// We've finished specifying the bindings. Go ahead and bind
product.Bind();
// Free the memory for the column information that we retrieved in 
// previous call to GetColumnInfo
CoTaskMemFree(pColumnInfo);

char*   pszProductName;
char*   pszReorderLevel;
bool   bRC;

// Loop through the records tracing out the information.
while (product.MoveNext() == S_OK)
{
   bRC = product.GetValue(1, &amp;dblProductID);
   pszProductName&nbsp;&nbsp; = (char*)product.GetValue(2);
   pszReorderLevel&nbsp; = (char*)product.GetValue(9);

   ATLTRACE(_T("Override = %lf \"%s\" \"%s\"\n"), dblProductID,
      A2T(pszProductName), A2T(pszReorderLevel));
}</code></pre>
</font></BODY>
</HTML>

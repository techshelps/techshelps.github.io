<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CdbDBEngine Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjdbengine"></a>CdbDBEngine Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineP">
</object></p>
<p>
The <b>CdbDBEngine</b> object is the top level object in the <a href="daglos01_2mnj.htm">DAO</a> object model.</p>
<p>
<img src="objdbeng.gif" border=0><br>
<img src="parmult.gif" border=0><a href="dadobj02_7oaa.htm"><img src="colerror.gif" border=0></a><br>
<img src="parmult.gif" border=0><a href="dadobj03_6aux.htm"><img src="colprope.gif" border=0></a><br>
<img src="parchild.gif" border=0><a href="dadobj05_89ph.htm"><img src="colworks.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>CdbDBEngine</b> object contains and controls all other objects in the hierarchy of DAO objects. You can't create additional <b>CdbDBEngine</b> objects, and the <b>CdbDBEngine</b> object isn't an element of any collection.</p>
<p class=indent>
<B><b>Note</b></B> When you reference an <a href="daglos03_23vp.htm">ODBC data source</a> directly through DAO, it is called an "<a href="daglos03_4o11.htm">ODBCDirect workspace</a>." This is to distinguish it from an ODBC data source that you reference indirectly through the Microsoft Jet database engine, using a "<a href="daglos02_60it.htm">Microsoft Jet workspace</a>." Each method of accessing ODBC data requires one of two types of <b>CdbWorkspace</b> object; you can set the <b>DefaultType</b> property to choose the default type of <b>CdbWorkspace</b> object that you will create from the <b>CdbDBEngine</b> object. The <b>CdbWorkspace</b> type and associated data source determines which DAO objects, methods, and properties you can use.</p>
<p>
With any type of database or connection, you can:
<ul type=disc>
<li>
Use the <b>Version</b> property to obtain the DAO version number.<br><br></li>
<li>
Use the <b>LoginTimeout</b> property to obtain or set the <a href="daglos03_0bqb.htm">ODBC</a> login timeout and the <b>RegisterDatabase</b> method to provide ODBC information to the <a href="daglos02_0elh.htm">Microsoft Jet database engine</a>. You can use these features the same way, regardless of whether you connect to the ODBC data source through Microsoft Jet or through an <a href="daglos03_4o11.htm">ODBCDirect workspace</a>.<br><br></li>
<li>
Use the <b>DefaultType</b> property to set the default type of database connection that subsequently created <b>CdbWorkspace</b> objects will use&nbsp;— either Microsoft Jet or ODBCDirect.<br><br></li>
<li>
Use the <b>DefaultPassword</b> and <b>DefaultUser</b> properties to set the user identification and password for the default <b>CdbWorkspace</b> object.<br><br></li>
<li>
Use the <b>CreateWorkspace</b> method to create a new <b>CdbWorkspace</b> object. You can use optional arguments to override the settings of the <b>DefaultType</b>, <b>DefaultPassword</b>, and <b>DefaultUser</b> properties.<br><br></li>
<li>
Use the <b>OpenDatabase</b> method to open a database in the default <b>CdbWorkspace</b>, and use the <b>BeginTrans</b>, <b>Commit</b>, and <b>Rollback</b> methods to control <a href="daglos04_9dta.htm">transactions</a> on the default <b>CdbWorkspace</b>.<br><br></li>
<li>
Use the <b>Workspaces</b> collection to reference specific <b>CdbWorkspace</b> objects.<br><br></li>
<li>
Use the <b>Errors</b> collection to examine data access error details.</li>
</ul>
<p>
Other properties and methods are only available when you use DAO with the Microsoft Jet database engine. You can use them to control the Microsoft Jet database engine, manipulate its properties, and perform tasks on temporary objects that aren't elements of collections. For example, you can:
<ul type=disc>
<li>
Use the <b>CreateDatabase</b> method to create a new Microsoft Jet <b>CdbDatabase</b> object.<br><br></li>
<li>
Use the <b>Idle</b> method to enable the Microsoft Jet database engine to complete any pending tasks.<br><br></li>
<li>
Use the <b>CompactDatabase</b> and <b>RepairDatabase</b> methods to maintain database files.<br><br></li>
<li>
Use the <b>IniPath</b> and <b>SystemDB</b> properties to specify the location of Microsoft Jet Windows Registry information and the Microsoft Jet workgroup information file, respectively. The <b>SetOption</b> method allows you to override the Windows Registry settings for the Microsoft Jet database engine.</li>
</ul>
<p>
After you change the <b>DefaultType</b> and <b>IniPath</b> property settings, only subsequent <b>CdbWorkspace</b> objects will reflect these changes.</p>
<p>
To refer to a collection that belongs to the <b>CdbDBEngine</b> object, or to refer to a method or property that applies to this object, use this syntax:</p>
<p>
[<b>CdbDBEngine.</b>][<i>collection</i> &nbsp; <i>method</i> &nbsp; <i>property</i>]</p>
<p class=label>
<b>CdbDBEngine Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbDBEngine(const CdbDBEngine &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbDBEngine &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbDBEngine(DAODBEngine *</b><i>peng</i><b>,</b></p>
<p>
<b>BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=32%><b>Type</b></td>
<td class=label width=19%><b>Argument</b></td>
<td class=label width=49%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><b>DAODBEngine *</b></td>
<td width=19%><i>peng</i></td>
<td width=49%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=32%><b>BOOL</b></td>
<td width=19%><i>bAddRef<br>
</i><b>=FALSE</b></td>
<td width=49%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object if you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
<p>
<b>CONSTRUCTORCdbDBEngine(BOOL </b><i>bPrivate</i><b> = FALSE,</b></p>
<p>
<b>BOOL </b><i>bStart</i><b> = TRUE,</b></p>
<p>
<b>LPCTSTR </b><i>pstrIniPath</i><b> = Null,</b></p>
<p>
<b>LPCTSTR </b><i>pstrDefUser</i><b> = Null,</b></p>
<p>
<b>LPCTSTR </b><i>pstrDefPW</i><b> = Null,</b></p>
<p>
<b>LONG </b><i>lType</i><b> = dbUseJet);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=20%><b>Type</b></td>
<td class=label width=24%><b>Argument</b></td>
<td class=label width=56%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%><b>BOOL</b></td>
<td width=24%><i>bPrivate<br>
</i><b>=FALSE</b></td>
<td width=56%>Optional. Determines whether the Microsoft Jet engine is private or shared.<p>
Each private engine is a new instance of DAO. A private engine is one way to create secure access to data. A shared engine is common across all instances, enabling shared workspaces and databases, for example.</p>
<p>
If <b>TRUE</b>, then private.</p>
</td>
</tr>
<tr valign=top>
<td width=20%><b>BOOL</b></td>
<td width=24%><i>bStart</i> <b>=TRUE</b></td>
<td width=56%>Optional. A <b>Boolean</b>.<p>
<b>TRUE</b>The Microsoft Jet engine is started when this object is created.</p>
<p>
<b>FALSE</b>The Microsoft Jet engine must be started explicitly with the <b>Start</b> method.</p>
</td>
</tr>
<tr valign=top>
<td width=20%><b>LPCTSTR</b></td>
<td width=24%><i>pstrIniPath<br>
</i><b>=Null</b></td>
<td width=56%>Optional. A pointer to a string that is a user-supplied portion of the Windows registry key containing Microsoft Jet database engine settings or parameters needed for installable ISAM databases.</td>
</tr>
<tr valign=top>
<td width=20%><b>LPCTSTR</b></td>
<td width=24%><i>pstrDefUser </i><b>=Null</b></td>
<td width=56%>Optional. A pointer to a string that is the user name used to create the default <b>Workspace</b> when it is initialized.</td>
</tr>
<tr valign=top>
<td width=20%><b>LPCTSTR</b></td>
<td width=24%><i>pstrDefPW </i><b>=Null</b></td>
<td width=56%>Optional. A pointer to a string that is the password used to create the default <b>Workspace</b> when it is initialized.</td>
</tr>
<tr valign=top>
<td width=20%><b>LONG</b></td>
<td width=24%><i>lType</i> <b>=dbUseJet</b></td>
<td width=56%>Optional. A value that determines whether the <b>Workspace</b> will be Microsoft Jet or ODBC (that is, <b>dbUseJet</b> or <b>dbUseODBC</b>).</td>
</tr>
</table><br>
<p>
This constructor creates an instance of the <b>CdbDBEngine</b> class.</p>
<p>
This constructor is typically specified without parameters (that is, using all defaults) which makes it look like other DAO object constructors that take no parameters.</p>
<p>
One reason to specify parameters is to create the Microsoft Jet Database Engine but postpone starting it. This enables you to acquire run-time information or avoid run-time conflicts when starting DAO from a user DLL. Another common reason to specify parameters is to create an ODBCDirect workspace.</p>
<p class=label>
<b>Usage</b></p>
<pre><code>#include &lt;afxole.h&gt;
#include &lt;dbdao.h&gt;

//<b> Example 1:</b>
CdbDBEngine   dben1a;             // Create an instance using defaults.
CdbDBEngine   dben1b( dben1a );   // Copy an existing instance.

//<b> Example 2:</b>
/* Create an instance of CdbDBEngine without using defaults.
   Specify: a private engine; don't start it when constructed; no IniPath, DefaultUser, or password, yet; explicitly request a Microsoft Jet workspace. 
*/

CdbDBEngine dben2(TRUE,FALSE,NULL,NULL,NULL,dbUseJet);

// After getting IniPath, DefaultUser, and DefaultPassword from the // user, set the CdbDBEngine object with those values.

   dben2.SetIniPath(lpctstrIniPath);
   dben2.SetDefaultUser(lpstrDefaultUser);
   dben2.SetDefaultPassword(lpctstrPassword);

// Now, start the engine.   
   dben2.Start();                     
</code></pre>
</font></BODY>
</HTML>

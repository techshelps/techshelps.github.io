<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using dbDAO in a DLL</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowusingdbdaodll"></a>Using dbDAO in a DLL</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowUsingdbDAODLLC">
</object></p>
<p>
Although many people use DAO from an executable, you may want to create DLLs for distribution so that others can use them in their applications. If so, then you are responsible for starting DAO from inside the DLL. Various restrictions on DLLs prevent this from being done automatically while the DLL loads, and the dbDAO classes will not handle it for you. Instead, you must explicitly force the load.</p>
<p>
For example, the following code works fine inside an EXE, but the same code does not work as a DLL:</p>
<pre><code>class CMyObj
   {
public:
   CMyObj();
    ~CMyObj();
private:
   CdbDBEngine      m_cDBEng;
   };

CMyObj::CMyObj()
 {
 }

CMyObj::~CMyObj()
   {
   delete m_cDBEng;
   }

// globally instantiated object - the cause of the DLL problem
CMyObj myObj;

#ifdef MAKE_AS_DLL
// exported function that is called by some console app
// this case hangs
__declspec(dllexport) void hello()
   {
   }

#else
// when this is built as a console app, it works fine
void main()
 {
 return;
 }
#endif // MAKE_AS_DLL
</code></pre>
<p>
The line causing the problem is the declaration:</p>
<pre><code>   CMyObj myObj;
</code></pre>
<p>
When the DLL is loaded and the class is instantiated, an attempt is made to start DAO. To work around this problem, you must create an entry point in your routine that explicitly creates DAO, and have your DLL users call that entry point. You could do this as part of other initialization, for example. In other words, if you declare the global variable as a pointer to <b>CdbDBEngine</b>, then construct the class in your initialization function.</p>
</font></BODY>
</HTML>

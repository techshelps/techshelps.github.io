<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Helpful MFC Classes Used in DAO</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowhelpfulmfcclasses"></a>Helpful MFC Classes Used in DAO</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowHelpfulMFCClassesC">
</object></p>
<p>
DAO makes extensive use the <b>COleVariant</b>, <b>CString</b>, and <b>COleDate Time</b> Microsoft Foundation Classes (MFC). Objects from these classes are passed to and from many DAO methods and properties. These classes also provide helpful methods for data comparison and manipulation that make developing applications easier. Some methods of the <b>COleVariant</b> and <b>CString</b> classes are listed below.</p>
<p>
When debugging applications involving <b>COleVariants</b>, it's helpful to have a way to convert the variant to a displayable string. One way to do this is to use the <b>CString::Format</b> method. For example:</p>
<pre><code>   COleVariant   vVal(1000, VT_I4);
   CString      strVal;
   //
   strVal.Format("Value = %ld\n", vVal.lVal);
</code></pre>
<p>
Another way is to use the <b>COleVariant::ChangeType</b> method to convert the variant to a BSTR string. The variant itself can be converted, or another variant can be used as the source of the data. The string that results is always Unicode, unless the variant was created with the VT_BSTRT variant type. For example:</p>
<pre><code>   COleVariant   vVal(1000, VT_I4),
               vUni(_T("unicode")),
               vAnsi(_T("ansi"), VT_BSTRT);
   //
   vVal.ChangeType(VT_BSTR);    // Convert to L"1000".
   vUni.ChangeCode(VT_BSTR);&nbsp; // No change.
   vAnsi.ChangeType(VT_BSTR); // Also, no change.
</code></pre>
<p class=indent>
<B><b>Note</b></B> By default, the COleVariant string constructor creates a variant with a Unicode value and a VT_BSTR variant type. In non-Unicode builds, DAO methods like <b>SetField</b>, <b>Seek</b>, etc., require variants with an ANSI string value. ANSI strings are constructed when you specify the optional variant type, VT_BSTRT. However, the resulting variant is still marked with the VT_BSTR variant type.</p>
<p>
The <b>COleVariant::ChangeType</b> method will not convert a BSTR variant to Unicode, even if its value is really an ANSI string. When displaying the string you should be careful to use appropriate Unicode or ANSI formatting, or a function like <b>wcstombs</b>, which converts a Unicode string to multi-character.</p>
<p>
Another debugging tool for formatting variants is the <b>CCrack</b> class. This is not a standard MFC class, but a part of the <b>DAOVIEW</b> sample distributed with Microsoft Visual C++. It uses the CString class to either format the value of a variant as a displayable string, or create a string describing the variant type. You can adapt this class to your purposes as needed.</p>
<p>
<b>COleVariant</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Construction</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>COleVariant</td>
<td width=72%>Constructs a <b>COleVariant</b> object from several data types, including short, long, null-terminated string, CString, Boolean, variant, date/time, double, and float.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Method</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Attach</td>
<td width=72%>Attaches a VARIANT to a <b>COleVariant</b>.</td>
</tr>
<tr valign=top>
<td width=28%>ChangeType</td>
<td width=72%>Changes the variant type of this <b>COleVariant</b> object.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Operators</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>operator LPCVARIANT</td>
<td width=72%>Converts a <b>COleVariant</b> value into an LPCVARIANT.</td>
</tr>
<tr valign=top>
<td width=28%>operator LPVARIANT</td>
<td width=72%>Converts a <b>COleVariant</b> object into an LPVARIANT.</td>
</tr>
<tr valign=top>
<td width=28%>operator =</td>
<td width=72%>Copies a <b>COleVariant</b> value.</td>
</tr>
<tr valign=top>
<td width=28%>operator ==</td>
<td width=72%>Compares two <b>COleVariant</b> values.</td>
</tr>
</table><br>
<p>
<b>CString</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Construction</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>CString</td>
<td width=72%>Constructs <b>CString</b> objects from <b>CStrings</b>, null-terminated single-byte and wide-byte strings.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Method</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>GetLength</td>
<td width=72%>Returns the number of characters in a <b>CString</b> object.</td>
</tr>
<tr valign=top>
<td width=28%>IsEmpty</td>
<td width=72%>Tests whether a <b>CString</b> object contains no characters.</td>
</tr>
<tr valign=top>
<td width=28%>Empty</td>
<td width=72%>Forces a string to have 0 length.</td>
</tr>
<tr valign=top>
<td width=28%>Compare</td>
<td width=72%>Compares two strings (case sensitive).</td>
</tr>
<tr valign=top>
<td width=28%>CompareNoCase</td>
<td width=72%>Compares two strings (case insensitive).</td>
</tr>
<tr valign=top>
<td width=28%>Format</td>
<td width=72%>Format the string as sprintf does.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=30%><b>Operator</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%>operator =</td>
<td width=70%>Assigns a new value to a <b>CString</b> object.</td>
</tr>
<tr valign=top>
<td width=30%>operator +</td>
<td width=70%>Concatenates two strings and returns a new string.</td>
</tr>
<tr valign=top>
<td width=30%>operator +=</td>
<td width=70%>Concatenates a new string to the end of an existing string.</td>
</tr>
<tr valign=top>
<td width=30%>operator == &lt;, etc.</td>
<td width=70%>Comparison operators (case sensitive).</td>
</tr>
<tr valign=top>
<td width=30%>operator LPCTSTR </td>
<td width=70%>Directly accesses characters stored in a <b>CString</b> object as a C-style string.</td>
</tr>
<tr valign=top>
<td width=30%>operator []</td>
<td width=70%>Returns the character at a given position — operator substitution for GetAt.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

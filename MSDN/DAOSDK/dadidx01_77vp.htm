<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Microsoft Jet Workspace</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvhowusingmicrosoftjetworkspace"></a>Using the Microsoft Jet Workspace</h1>
<p class=label>
<b>Opening a Database</b></p>
<p>
To open a database, you simply open an existing <b>CdbDatabase</b> object or create a new one. This object can represent a Microsoft Jet database (.mdb file), an ISAM database (for example, Paradox), or an ODBC database connected through the Microsoft Jet database engine (also known as a "Microsoft Jet-connected ODBC database").</p>
<p class=label>
<b>Data-Definition Language</b></p>
<p>
You can use object variables and other <a href="daglos01_3uhx.htm">DDL</a> features to modify your database structure. For example, you can add a new <b>CdbField</b> object to an existing table with the following code:</p>
<pre><code>CdbDBEngine   eng;
CdbDatabase   dbs;
CdbTableDef   tdf;
CdbField      fld;
// Open a database.
dbs = eng.OpenDatabase("Biblio.mdb");
// Open a TableDef.
tdf = dbs.TableDefs["Authors"];
// Create a new field.
fld = tdf.CreateField("Address", dbText, 20);
// Append field to the TableDef Fields collection.
tdf.Fields.Append(fld);
</code></pre>
<p>
This code creates a new object variable for a <b>CdbField</b> object and adds it to a <b>CdbTableDef</b> object with the <b>Append</b> method. Because a <b>CdbTableDef</b> object contains the definition of a table, the table now has a field named Address for entering data. In much the same way, you can create new tables and new indexes.</p>
<p class=label>
<b>Data Manipulation</b></p>
<p>
DAO provides an excellent set of data manipulation tools. You can create a <b>CdbRecordset</b> object to conveniently query a database and manipulate the resulting set of records. The <b>OpenRecordset</b> method accepts an SQL string or a <b>CdbQueryDef</b> (stored query) name as a data source argument, or it can be opened from a <b>CdbQueryDef</b> object or a <b>CdbTableDef</b> object, using that object as its data source. The resulting <b>CdbRecordset</b> object features an extremely rich set of properties and methods with which to browse and modify data.</p>
<p>
The <b>CdbRecordset</b> object is available in four different types — Table, Dynaset, Forward-Only, and Snapshot.</p>
<p class=label>
<b>Transactions</b></p>
<p>
All <b>CdbDatabase</b> objects opened against a <b>CdbWorkspace</b> object share a common transaction scope. That is, when you use the <b>BeginTrans</b> method on a <b>CdbWorkspace</b> object, it applies to all open databases within that <b>CdbWorkspace</b> object. In the same way, when you use the <b>CommitTrans</b> method against the <b>CdbWorkspace</b>, it applies to all open databases in the<b> CdbWorkspace</b> object.</p>
<p class=label>
<b>Replication</b></p>
<p>
You can use <a href="daglos01_9sby.htm">database replication</a> to create and maintain <a href="daglos03_9b4x.htm">replicas</a> of a master Microsoft Jet database, using the <b>Synchronize</b> method to periodically update all or part of the replicas, or to copy new data from one replica to another. You can also restrict the update to only selected records, using the <b>ReplicaFilter</b> property, and then synchronize those records with the <b>PopulatePartial</b> method.</p>
<p class=label>
<b>Security</b></p>
<p>
You can restrict access to one or more .mdb databases or their tables using security settings established and managed by the Microsoft Jet database engine. In your code, you can establish <b>CdbGroup</b> and <b>CdbUser</b> objects to define the scope and level of <a href="daglos03_31ny.htm">permissions</a> available to individual users on an object-by-object basis. For example, you can establish permissions for a specific user to provide read-only access to one table and full access to another.</p>
</font></BODY>
</HTML>

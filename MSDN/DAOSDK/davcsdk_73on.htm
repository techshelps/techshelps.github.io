<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowerrorhandling"></a>Error Handling</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowErrorHandlingC">
</object></p>
<p>
The dbDAO classes use exception handling to let the developer know when an error has occurred. The <b>CdbException</b> class provides minimal exception handling (it only has an HRESULT member); the <b>CdbLastOLEError</b> and <b>CdbError</b> classes offer more detailed error handling.</p>
<p>
To catch an exception for dbDAO, use the <b>CdbException</b> class in your catch statement:</p>
<pre><code>try
   {
   // Some dbDAO function calls
   }
catch (CdbException e)
   {
   // Handle the exception
   }
</code></pre>
<p>
In many cases, you'll just want your exception handling code to examine the HRESULT returned. In that case, the only thing you need is the <b>CdbException</b> object. The only member of <b>CdbException</b> is <i>m_hr</i>, the HRESULT. Error constants that can be returned by dbDAO member functions are defined in Dbdaoerr.h. To determine exactly what the error was, you can compare the HRESULT in <b>CdbException</b> with values defined in Dbdaoerr.h. For example:</p>
<pre><code>#include &lt;dbdao.h&gt;
#include &lt;dbdaoerr.h&gt;

void OpenADatabase(CString stDBName)
   {
   CdbDBEngine dben;
   CdbDatabase db;

   try
      {
      db = dben.OpenDatabase(stDBName);
      }
   catch (CdbException e)
      {
      assert (e.m_hr == E_DAO_FileNotFound);
      // Inform the user that the file specified doesn't exist
      // E_DAO_FileNotFound is a constant defined in dbdaoerr.h.
      }
   }
</code></pre>
<p>
DAO returns numeric error values in two forms. One is in the form of an HRESULT. This is the form familiar to OLE programmers. The other is in the form of an IDA which is the form more familiar to Visual Basic programmers who have worked with DAO. To read the HRESULT, examine the <i>m_hr</i> member of the <b>CdbException</b> object. To read the error as an IDA value, wrap the <i>m_hr</i> member of <b>CdbException</b> in a DBERR macro (defined in dbdao.h).</p>
<p>
For more involved error handling, you may want to use the <b>CdbError</b> class. The <b>CdbError</b> class is associated with the <b>CdbDBEngine</b> object's <b>CdbErrors</b> collection. It holds the last DAO errors which have occurred. The<b> CdbErrors</b> collection may hold more than one error if there is more information that can be passed. For example, an ODBC error usually results in more than one error in this collection. The members of this class contain:
<ul type=disc>
<li>
The number value associated with the error.<br><br></li>
<li>
The DAO description for that error.<br><br></li>
<li>
The object on which the error occurred (in the form DAO.<i>object</i>; for example, DAO.Database).<br><br></li>
<li>
The DAO Help file and Help context for obtaining more information about the error.</li>
</ul>
<p>
The number value stored in the <b>CdbError</b> object is in the form of an IDA rather than an HRESULT, as in the <b>CdbException</b> object. For example:</p>
<pre><code>void OpenADatabase(CString stDBName)
   {
   CdbDBEngine dben;
   CdbDatabase db;

   try
      {
      db = dben.OpenDatabase(stDBName);
      }
   catch (CdbException e)
      {
      int iError, cError;
      CString stError = _T("");

      cError = dben.Errors.GetCount();
      for (iError = 0; iError &lt; cError; iError++)
         {
         stError += 
         dben.Errors[iError].GetDescription();
         stError += 
         dben.Errors[iError].GetNumber();
         stError += _T("\n");
         }
      //Inform the user of the error with stError.
      }
   }
</code></pre>
<p>
Also used for more detailed error handling, the <b>CdbLastOLEError</b> class is more generic to OLE than to DAO. It allows you to get extended error information on the last OLE error to occur, including its description. Regardless of whether the last error to occur was a DAO or an OLE error, you can use this class to determine the error. For example:</p>
<pre><code>void OpenADatabase(CString stDBName)
   {
   CdbDBEngine dben;
   CdbDatabase db;

   try
      {
      db = dben.OpenDatabase(stDBName);
      }
   catch (CdbException e)
      {
      CdbLastOLEError ex;
      CString stError;

      stError.Format("0x%lx : %s", e.m_hr,
            (LPCTSTR)ex.GetDescription());
      //Inform the user of the error with stError.
      }
   }
</code></pre>
</font></BODY>
</HTML>

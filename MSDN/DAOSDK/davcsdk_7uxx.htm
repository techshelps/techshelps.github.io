<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Method Samples to Unicode</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowconvertingsamplestounicode"></a>Converting Method Samples to Unicode</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowConvertingSamplesToUnicodeC">
</object></p>
<p>
The DAO method samples are designed to illustrate the DAO methods in a simple, yet effective manner. Thus, the samples are written as ANSI console applications because they are the easiest type of application to read and require the least prior knowledge to understand.</p>
<p>
The samples should also work as Unicode console applications, but they will require modification.</p>
<p class=indent>
<B><b>Note</b></B> The samples are already partially modified for your convenience. But why is there any support at all for Unicode when the samples are designed for ANSI builds? Frankly, to encourage you to write your future applications so they will be able to handle ANSI or Unicode.</p>
<p class=label>
<b>To convert the method samples to Unicode</b>
<ol>
<li>
Convert literal strings to Unicode. All literal text strings should be enclosed in the <b>_T( </b><i>string</i><b> )</b> macro. In an ANSI build, this macro has no effect on <i>string</i>. In a Unicode build, <i>string</i> is prefixed with '<b>L</b>' which declares it to be Unicode.<br><br></li>
<li>
Change declarations of <b>char</b> to <b>TCHAR</b>. In an ANSI build, TCHAR is defined to be <b>char</b>; in a Unicode build, it is defined to be <b>wchar_t</b>.<br><br></li>
<li>
Change <b>printf</b> functions to <b>_tprintf</b>. In an ANSI build, <b>_tprintf</b> is defined to be <b>printf</b>; in a Unicode build, it is define to be <b>wprintf</b>. In an ANSI build, the <b>printf</b> formatting argument for an ANSI string is "%s", and the argument for a Unicode string is "%S". In a Unicode build, this rule is <i>reversed</i>: ANSI strings are formatted with "%S" and Unicode strings are formatted with "%s". Adjust formatting arguments accordingly.<br><br></li>
<li>
Change <b>_cgets</b>, <b>sscanf</b>, and associated logic to use <b>swscanf</b>, and/or <b>getws</b>.</li>
</ol>
<p>
These samples are the Microsoft Visual C++ equivalents of the Visual Basic DAO samples, so it was necessary to map Microsoft Visual Basic functionality to equivalent Microsoft Visual C++ constructs. However, certain constructs in the ANSI build (such as <b>_cgets</b>) have no Unicode equivalent. In this case you must change the program logic to get the desired result.</p>
</font></BODY>
</HTML>

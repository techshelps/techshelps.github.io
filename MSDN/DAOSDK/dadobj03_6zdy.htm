<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryDef Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjquerydef"></a>CdbQueryDef Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjQueryDefC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjQueryDefM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjQueryDefP">
</object></p>
<p>
A <b>CdbQueryDef</b> object is a stored definition of a <a href="daglos03_5ugp.htm">query</a> in a <a href="daglos02_23l1.htm">Microsoft Jet</a> database or a temporary definition of a query in an <a href="daglos03_4o11.htm">ODBCDirect workspace</a>.</p>
<p>
<a href="dadobj01_1qcu.htm"><img src="objconn.gif" border=0></a><br>
<img src="parlower.gif" border=0><a href="dadobj01_4mud.htm"><img src="objdatab.gif" border=0></a><br>
<img src="parchild.gif" border=0><img src="parshare.gif" border=0><a href="dadobj03_7ana.htm"><img src="colquery.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><img src="objquery.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj03_48tu.htm"><img src="colparam.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="dadobj02_5jz8.htm"><img src="colfield.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
You can use the <b>CdbQueryDef</b> object to define a query. For example, you can:
<ul type=disc>
<li>
Use the <b>SQL</b> property to set or return the query definition.<br><br></li>
<li>
Use the <b>CdbQueryDef</b> object's <b>Parameters</b> collection to set or return query parameters. <br><br></li>
<li>
Use the <b>Type</b> property to return a value indicating whether the query selects records from an existing table, makes a new table, inserts records from one table into another table, deletes records, or updates records.<br><br></li>
<li>
Use the <b>MaxRecords</b> property to limit the number of records returned from a query.<br><br></li>
<li>
Use the <b>ODBCTimeout</b> property to indicate how long to wait before the query returns records. The <b>ODBCTimeout</b> property applies to any query that accesses <a href="daglos03_0bqb.htm">ODBC</a> data.</li>
</ul>
<p>
In a Microsoft Jet workspace, you can also:
<ul type=disc>
<li>
Use the <b>ReturnsRecords</b> property to indicate that the query returns records. The <b>ReturnsRecords</b> property is only valid on SQL pass-through queries.<br><br></li>
<li>
Use the <b>Connect</b> property to make an SQL pass-through query to an ODBC database.</li>
</ul>
<p>
In an ODBCDirect workspace, you can also:
<ul type=disc>
<li>
Use the <b>Prepare</b> property to determine whether to invoke the ODBC <b>SQLPrepare</b> API when the query is executed.<br><br></li>
<li>
Use the <b>CacheSize</b> property to cache records returned from a query.</li>
</ul>
<p>
You can also create temporary <b>CdbQueryDef</b> objects. Unlike permanent <b>CdbQueryDef</b> objects, temporary <b>CdbQueryDef</b> objects are not saved to disk or appended to the <b>QueryDefs</b> collection. Temporary <b>CdbQueryDef</b> objects are useful for queries that you must run repeatedly during run time, but do not not need to save to disk, particularly if you create their <a href="daglos04_188k.htm">SQL statements</a> during run time.</p>
<p>
You can think of a permanent <b>CdbQueryDef</b> object in a Microsoft Jet workspace as a compiled SQL statement. If you execute a query from a permanent <b>CdbQueryDef</b> object, the query will run faster than if you run the equivalent SQL statement from the <b>OpenRecordset</b> method. This is because the <a href="daglos02_0elh.htm">Microsoft Jet database engine</a> doesn't need to compile the query before executing it.</p>
<p>
The preferred way to use the native SQL dialect of an external database engine accessed through the <a href="daglos02_0elh.htm">Microsoft Jet database engine</a> is through <b>CdbQueryDef</b> objects. For example, you can create a Microsoft SQL Server query and store it in a <b>CdbQueryDef</b> object. When you need to use a non-Microsoft Jet database engine SQL query, you must provide a <b>Connect</b> property string that points to the external data source. Queries with valid <b>Connect</b> properties bypass the Microsoft Jet database engine and pass the query directly to the external database server for processing.</p>
<p>
To create a new <b>CdbQueryDef</b> object, use the <b>CreateQueryDef</b> method. In a Microsoft Jet workspace, if you supply a string for the <i>name</i> argument or, if you explicitly set the <b>Name</b> property of the new <b>CdbQueryDef</b> object to a non–<a href="daglos04_81yf.htm">zero-length string</a>, you will create a permanent <b>CdbQueryDef</b> that will automatically be appended to the <b>QueryDefs</b> collection and saved to disk. Supplying a zero-length string as the <i>name</i> argument or explicitly setting the <b>Name</b> property to a zero-length string will result in a temporary <b>CdbQueryDef</b> object.</p>
<p>
In an ODBCDirect workspace, a <b>CdbQueryDef </b>is always temporary. The <b>QueryDefs</b> collection contains all open <b>CdbQueryDef</b> objects. When a <b>CdbQueryDef</b> is closed, it is automatically removed from the <b>QueryDefs</b> collection.</p>
<p>
To refer to a <b>CdbQueryDef</b> object in a collection by its ordinal number or by its <b>Name</b> property setting, use either of the following syntax forms:</p>
<p>
<b>QueryDefs[</b>0<b>]</b></p>
<p>
<b>QueryDefs[</b>"<i>name</i>"<b>]</b></p>
<p>
You can refer to temporary <b>CdbQueryDef</b> objects only by the <a href="daglos03_5jl1.htm">object variables</a> that you have assigned to them.</p>
<p class=label>
<b>CdbQueryDef Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbQueryDef(VOID);</b></p>
<p>
This constructor creates an instance of the class. There are no parameters.</p>
<p>
<b>CONSTRUCTORCdbQueryDef(const CdbQueryDef &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbQueryDef &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbQueryDef(DAOQueryDef *</b><i>pqd</i><b>,</b></p>
<p>
<b>BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Type</b></td>
<td class=label width=17%><b>Argument</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><b>DAOQueryDef *</b></td>
<td width=17%><i>pqd</i></td>
<td width=55%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=28%><b>BOOL</b></td>
<td width=17%><i>bAddRef</i><p>
=<b>FALSE</b></p>
</td>
<td width=55%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object if you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
<p class=indent>
<B><b>Note</b></B> In DAO the default collection for the <b>CdbQueryDef</b> object is <b>Parameters</b>. However, in the DAO SDK the default collection for the <b>CdbQueryDef</b> object is <b>Fields</b>. The default collection is accessed by applying the subscript (<b>[ ]</b>) operator to the <b>CdbQueryDef</b> object.</p>
</font></BODY>
</HTML>

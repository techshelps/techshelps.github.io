<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting Started with dbDAO</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowgettingstartedwithdbdao"></a>Getting Started with dbDAO</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowGettingStartedwithdbDAOC">
</object></p>
<p>
Here are the steps you need to take to get started putting together a project using dbDAO.</p>
<p class=label>
<b>To put together a project using dbDAO</b>
<ol>
<li>
Include the two header files dbdao.h and dbdaoerr.h.<br><br></li>
<li>
Define the following constants:<p class=tl>
For ANSI projects</P><pre><code>#define OLE2ANSI
</code></pre>
<p class=tl>
For Unicode projects</P><pre><code>#define UNICODE
#define _UNICODE
</code></pre>
</li>
<li>
Include the following LIB file in your project library:<pre><code>ddao35.lib
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Note</b></B> Be sure to use the corresponding dbDAO file for a particular type of build. Each build is a combination of ANSI or Unicode, debug or release, and shared or static DLLs. If you do an ANSI, debug, shared DLL build, use the ANSI, debug, shared DLL dbDAO file (Debug\Ddao35d.dll). This is because the dbDAO classes rely on Microsoft Foundation Classes (MFC) classes internally, and mixing versions of MFC classes can produce unexpected results.</p>
</font></BODY>
</HTML>

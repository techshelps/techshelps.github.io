<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Microsoft Visual C++ and DAO</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowvisualcanddao"></a>Using Microsoft Visual C++ and DAO</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowVisualCAndDAOC">
</object></p>
<p>
Data Access Objects (DAO), the programmatic interface to Microsoft Jet, were originally designed for use with Microsoft Visual Basic and Microsoft Access Basic. With the advent of OLE Automation, it is now possible to write C++ code that uses DAO.</p>
<p>
As of Microsoft Jet 3.0, the DAO DLL is an OLE Automation in-process server containing an embedded type library. With the type library, client programs can query the server for descriptions of exposed objects via the OLE <b>IDispatch</b> interface. This process can be tedious, however, so DAO C++ coding has now been simplified by the development of three types of DAO C++ coding:
<ul type=disc>
<li>
DAO OLE Automation interfaces — DAO provides a vtable-based implementation of OLE Automation. The DAO Software Development Kit (SDK) provides header files describing the vtable interfaces for DAO, eliminating the need to go through the <b>IDispatch</b> mechanism. After an instance of the <b>DBEngine</b> object has been initially created, instances of objects are created through their parent objects, using the DAO object hierarchy. Otherwise, these objects are typical OLE Component Object Model (COM) objects; therefore, the application programmer is responsible for explicitly releasing the objects.<p class=tl>
For information on using OLE Automation, see the <i>OLE 2 Programmer’s Reference.</i></P></li>
<li>
dbDAO classes — If you are familiar with Microsoft Visual Basic, the DAO interfaces will be familiar and will require only a small amount of OLE COM knowledge. The dbDAO classes will be helpful because they:<ul type=disc>
<li>
Handle reference counting (<b>AddRef</b> and <b>Release</b>), support dynamic allocation and deallocation of objects, and provide full collection support. They also use native C++ data types where possible, or standard OLE variants.<br><br></li>
<li>
Require only a small amount of C++ knowledge since the syntax of the C++ calls is very similar to Visual Basic.<br><br></li>
<li>
Provide support for bulk fetching directly into your data structures.</li>
</ul>
<p class=tl>
Like the DAO interfaces, the dbDAO classes expose the full functionality of DAO properties and methods. The dbDAO classes were designed to incur the lowest possible overhead short of programming directly to the OLE Automation object. They are part of the DAO SDK.</P></li>
<li>
MFC DAO classes — As of Visual C++ 4.0, DAO functionality is accessible through the Microsoft Foundation Classes (MFC). Based on the <b>CRecordset</b> classes that were written for ODBC, the <b>CDAORecordset</b> classes provide similar functionality using a similar design paradigm. For more information on using the MFC DAO classes, see the VC++ 4.0 MFC documentation.</li>
</ul>
<h1>Which DAO C++ Classes to Use?</h1>
<p>
If you are familiar with OLE COM programming, then the DAO interfaces may be all you need. Even so, programming with these interfaces requires the declaration of many temporary variables in order to work down the DAO hierarchy to the object you want to work with. This creates many lines of code in itself and each of these objects must be explicitly released by the programmer, which requires additional tracking.</p>
<p>
For the additional overhead of a 190K DLL, the dbDAO classes enable you to write more concise code, with no need to keep track of object lifetimes. Conveniences like the classes that handle variants (often the required type used by DAO properties and methods) make programming much easier. Rather than filling out the VARIANT structure, you can simply cast the variable to the appropriate class.</p>
<p>
The MFC DAO classes are fully integrated with the MFC wizards and the general MFC object structure. If you are already familiar with MFC, or if you're writing simple database applications that you'd like to easily integrate into your existing MFC-based code, then this is the way for you. If you're more experienced with programming DAO from Visual Basic, then getting started with the dbDAO classes will require less time.</p>
</font></BODY>
</HTML>

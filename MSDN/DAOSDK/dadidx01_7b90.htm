<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Capabilities with ODBCDirect</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvhownewcapabilitieswithodbcdirect"></a>New Capabilities with ODBCDirect</h1>
<p class=label>
<b>Server Connections</b></p>
<p>
Available only in the ODBCDirect object model, the new <b>CdbConnection</b> object contains information about a connection to an ODBC data source, such as the server name, the data source name, and so on. It is similar to a <b>CdbDatabase</b> object and will look very familiar if you have ever opened a <b>CdbDatabase</b> object on an ODBC data source. In fact, a <b>CdbConnection</b> object and a <b>CdbDatabase</b> object represent different references to the same object. New properties on each of these two object types allow you to obtain a reference to the other corresponding object, which simplifies the task of converting existing ODBC client applications that use Microsoft Jet to use ODBCDirect instead.</p>
<p class=label>
<b>Batch Updates</b></p>
<p>
A new batch update cursor is available for client applications that need to work with a cursor without holding locks on the server or issue update requests one record at a time. Instead, the client stores update information on many records in a local buffer (or "batch"), and then issues a batch update.</p>
<p>
Because of the time lag between opening a <b>CdbRecordset</b> and sending a batch of updates from that <b>CdbRecordset</b> back to the server, other users have an opportunity to change the original data before your changes are sent to the server, so your changes "collide" with another user's changes. Several new features are available to help you determine where such collisions have occurred following a batch update and to give you some options for resolving them.</p>
<p class=label>
<b>Asynchronous Method Execution</b></p>
<p>
The <b>Execute</b>, <b>MoveLast</b>, <b>OpenConnection</b>, and <b>OpenRecordset</b> methods feature the <b>dbRunAsync</b> option. This allows the client application to do other tasks (such as loading forms, and so on) while the method is executing. You can also poll to see whether the task is complete and terminate an asynchronous task.</p>
<p class=label>
<b>Client Support for ODBC Cursors</b></p>
<p>
Four different <b>CdbRecordset</b> types support the following ODBC cursor types:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=38%><b>ODBC cursor</b></td>
<td class=label width=62%><b>CdbRecordset type</b></td>
</tr>
<tr valign=top>
<td width=38%>Dynamic</td>
<td width=62%><b>dbOpenDynamic</b> (New in DAO 3.5)</td>
</tr>
<tr valign=top>
<td width=38%>Dynaset</td>
<td width=62%><b>dbOpenDynaset</b></td>
</tr>
<tr valign=top>
<td width=38%>Forward-Only</td>
<td width=62%><b>dbOpenForwardOnly</b> (New in DAO 3.5)</td>
</tr>
<tr valign=top>
<td width=38%>Static</td>
<td width=62%><b>dbOpenSnapshot</b></td>
</tr>
</table><br>
</font></BODY>
</HTML>

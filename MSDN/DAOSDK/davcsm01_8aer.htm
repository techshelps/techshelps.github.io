<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CdbDBEngine Constructor (dbDAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjdbengines"></a>CdbDBEngine Constructor</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineP">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineM">
</object></p>
<p>
Creates an instance of the Microsoft Jet database engine.</p>
<p class=label>
<b>Syntax Summary</b></p>
<p>
CONSTRUCTORCdbDBEngine(const CdbDBEngine &amp;);</p>
<p>
CONSTRUCTORCdbDBEngine(DAODBEngine *peng,</p>
<p>
BOOL bAddRef=FALSE);</p>
<p>
CONSTRUCTORCdbDBEngine(BOOL bPrivate=FALSE,</p>
<p>
BOOL bStart=TRUE,</p>
<p>
LPCTSTR pstrIniPath=NULL,</p>
<p>
LPCTSTR pstrDefUser=NULL,</p>
<p>
LPCTSTR pstrDefPW=NULL,</p>
<p>
LONG lType=dbUseJet);</p>
<p>
(The qualifier 'CONSTRUCTOR' is merely a decoration provided to help readability. It has no syntactic value.)</p>
<p class=label>
<b>Syntax/Parameters/Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(const CdbDBEngine &amp;);</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>const CdbDBEngine &amp;</td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p class=label>
<b>Syntax/Parameters/Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(DAODBEngine *peng,</p>
<p>
BOOL bAddRef=FALSE);</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=27%><b>Type</b></td>
<td class=label width=26%><b>Example</b></td>
<td class=label width=47%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>DAODBEngine *</td>
<td width=26%>peng</td>
<td width=47%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=27%>BOOL</td>
<td width=26%>bAddRef<p>
=FALSE</p>
</td>
<td width=47%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to allow easy creation of a DAO class object for those with access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
<p class=label>
<b>Syntax/Parameters/Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(BOOL bPrivate=FALSE,</p>
<p>
BOOL bStart=TRUE,</p>
<p>
LPCTSTR pstrIniPath=NULL,</p>
<p>
LPCTSTR pstrDefUser=NULL,</p>
<p>
LPCTSTR pstrDefPW=NULL, </p>
<p>
LONG lType=dbUseJet);</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=22%><b>Type</b></td>
<td class=label width=27%><b>Example</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>BOOL</td>
<td width=27%>bPrivate<p>
=FALSE</p>
</td>
<td width=51%>Optional. Determines whether the Microsoft Jet engine is private or shared.<p>
Each private engine is a new instance of DAO. A private engine is one way to create secure access to data. A shared engine is common across all instances, enabling shared workspaces and databases, for example.</p>
<p>
If <b>TRUE</b>, then private.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>BOOL</td>
<td width=27%>bStart=TRUE</td>
<td width=51%>Optional. A <b>Boolean</b>.<p>
<b>TRUE</b>The Microsoft Jet engine is started when this object is created.</p>
<p>
<b>FALSE</b>The Microsoft Jet engine must be started explicitly with the <b>Start</b> method.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR</td>
<td width=27%>pstrIniPath<p>
=NULL</p>
</td>
<td width=51%>Optional. A pointer to a string that is a user-supplied portion of the Windows registry key containing Microsoft Jet database engine settings or parameters needed for installable ISAM databases.</td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR</td>
<td width=27%>pstrDefUser =NULL</td>
<td width=51%>Optional. A pointer to a string that is the user name used to create the default <b>Workspace</b> when it is initialized.</td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR</td>
<td width=27%>pstrDefPW =NULL</td>
<td width=51%>Optional. A pointer to a string that is the password used to create the default <b>Workspace</b> when it is initialized.</td>
</tr>
<tr valign=top>
<td width=22%>LONG</td>
<td width=27%>lType=dbUseJet</td>
<td width=51%>Optional. A value that determines whether the <b>Workspace</b> will be Microsoft Jet or ODBC (that is, <b>dbUseJet</b> or <b>dbUseODBC</b>).</td>
</tr>
</table><br>
<p>
This constructor creates an instance of the <b>CdbDBEngine</b> class.</p>
<p>
This constructor is typically specified without parameters (that is, using all defaults) which makes it look like other DAO object constructors that take no parameters.</p>
<p>
One reason to specify parameters is to create the Microsoft Jet Database Engine but postpone starting it. This enables you to acquire run-time information, or avoid run-time conflicts when starting DAO from a user DLL. Another common reason to specify parameters is to create an ODBCDirect workspace.</p>
<p class=label>
<b>Usage</b></p>
<pre><code>#include &lt;afxole.h&gt;
#include &lt;dbdao.h&gt;

//<b> Example 1:</b>
CdbDBEngine   dben1a;             // Create an instance using defaults.
CdbDBEngine   dben1b( dben1a );   // Copy an existing instance.

//<b> Example 2:</b>
/* Create an instance of CdbDBEngine without using defaults. 
   Specify: a private engine; don't start it when constructed; no    IniPath, DefaultUser, or password, yet; explicitly request a    Microsoft Jet workspace. 
*/

CdbDBEngine dben2(TRUE,FALSE,NULL,NULL,NULL,dbUseJet);

// After getting IniPath<b>,</b> DefaultUser<b>,</b> and DefaultPassword from the // user, set the CdbDBEngine object with those values.

   dben2.SetIniPath(lpctstrIniPath);
   dben2.SetDefaultUser(lpstrDefaultUser);
   dben2.SetDefaultPassword(lpctstrPassword);

// Now, start the engine.   
   dben2.Start();                     
</code></pre>
</font></BODY>
</HTML>

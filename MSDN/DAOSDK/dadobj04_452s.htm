<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recordset Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjrecordset"></a>CdbRecordset Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjRecordsetC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjRecordsetM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjRecordsetP">
</object></p>
<p>
A <b>CdbRecordset</b> object represents the records in a <a href="daglos01_6dwl.htm">base table</a> or the records that result from running a query.</p>
<p>
<a href="dadobj01_1qcu.htm"><img src="objconn.gif" border=0></a><br>
<img src="parlower.gif" border=0><a href="dadobj01_4mud.htm"><img src="objdatab.gif" border=0></a><br>
<img src="parchild.gif" border=0><img src="parshare.gif" border=0><a href="dadobj04_45o4.htm"><img src="colrecor.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><img src="objrecor.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj02_5jz8.htm"><img src="colfield.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="dadobj03_6aux.htm"><img src="colprope.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
You use <b>CdbRecordset</b> objects to manipulate data in a database at the record level. When you use DAO objects, you manipulate data almost entirely using <b>CdbRecordset</b> objects. All <b>CdbRecordset</b> objects are constructed using <a href="daglos03_35r8.htm">records</a> (rows) and <a href="daglos02_2vok.htm">fields</a> (columns). There are five types of <b>CdbRecordset</b> objects:
<ul type=disc>
<li>
<a href="dadobj04_4kz8.htm">Table-type CdbRecordset</a> — representation in code of a base table that you can use to add, change, or delete records from a single database table (Microsoft Jet workspaces only).<br><br></li>
<li>
<a href="dadobj04_4rhw.htm">Dynaset-type CdbRecordset</a> — the result of a query that can have updatable records. A dynaset-type <b>CdbRecordset</b> object is a dynamic set of records that you can use to add, change, or delete records from an underlying database table or tables. A dynaset-type <b>CdbRecordset</b> object can contain fields from one or more tables in a database. This type corresponds to an <a href="daglos03_0bqb.htm">ODBC</a> <a href="daglos02_37oy.htm">keyset cursor</a>.<br><br></li>
<li>
<a href="dadobj04_44z8.htm">Snapshot-type CdbRecordset</a> — a static copy of a set of records that you can use to find data or generate reports. A snapshot-type <b>CdbRecordset</b> object can contain fields from one or more tables in a database, but can't be updated. This type corresponds to an ODBC <a href="daglos04_8alu.htm">static cursor</a>.<br><br></li>
<li>
<a href="dadobj04_3ook.htm">Forward-only–type CdbRecordset</a> — identical to a snapshot except that no cursor is provided. You can only scroll forward through records. This improves performance in situations where you only need to make a single pass through a result set. This type corresponds to an ODBC <a href="daglos02_9v3m.htm">forward-only cursor</a>.<br><br></li>
<li>
<a href="dadobj04_2oc4.htm">Dynamic-type CdbRecordset</a> — a query result set from one or more base tables in which you can add, change, or delete records from a row-returning query. Further, records other users add, delete, or edit in the base tables also appear in your <b>CdbRecordset</b>. This type corresponds to an ODBC <a href="daglos01_2wj6.htm">dynamic cursor</a> (ODBCDirect workspaces only).</li>
</ul>
<p>
You can choose the type of <b>CdbRecordset</b> object you want to create using the <i>type</i> argument of the <b>OpenRecordset</b> method.</p>
<p>
In a Microsoft Jet workspace, if you don't specify a <i>type</i>, DAO attempts to create the type of <b>CdbRecordset</b> with the most functionality available, starting with table. If this type isn’t available, DAO attempts a dynaset, then a snapshot, and finally a forward-only–type <b>CdbRecordset</b> object.</p>
<p>
In an ODBCDirect workspace, if you don't specify a <i>type</i>, DAO attempts to create the type of <b>CdbRecordset</b> with the fastest query response, starting with forward-only. If this type isn't available, DAO attempts a snapshot, then a dynaset, and finally a dynamic-type <b>CdbRecordset</b> object.</p>
<p>
When creating a <b>CdbRecordset</b> object using a non-linked <a href="dadobj05_8086.htm">CdbTableDef</a> object in a Microsoft Jet workspace, table-type <b>CdbRecordset</b> objects are created. Only dynaset-type or snapshot-type <b>CdbRecordset</b> objects can be created with linked tables or tables in Microsoft Jet-connected ODBC databases.</p>
<p>
A new <b>CdbRecordset</b> object is automatically added to the <b>Recordsets</b> collection when you open the object, and is automatically removed when you close it.</p>
<p class=indent>
<B><b>Note</b></B> If you use variables to represent a <b>CdbRecordset</b> object and the <b>CdbDatabase</b> object that contains the <b>CdbRecordset</b>, make sure the variables have the same <a href="daglos04_1207.htm">scope</a>, or lifetime. For example, if you declare a public variable that represents a <b>CdbRecordset</b> object, make sure the variable that represents the <b>CdbDatabase</b> containing the <b>CdbRecordset</b> is also public.</p>
<p>
You can create as many <b>CdbRecordset</b> <a href="daglos03_5jl1.htm">object variables</a> as needed. Different <b>CdbRecordset</b> objects can access the same tables, queries, and fields without conflicting.</p>
<p>
Dynaset-, snapshot-, and forward-only–type <b>CdbRecordset</b> objects are stored in local memory. If there isn't enough space in local memory to store the data, the Microsoft Jet database engine saves the additional data to <a href="daglos04_8isw.htm">TEMP</a> disk space. If this space is exhausted, a trappable error occurs.</p>
<p>
The default collection of a <b>CdbRecordset</b> object is the <b>Fields</b> collection, and the default property of a <a href="dadobj02_0cpw.htm">CdbField</a> object is the <a href="daprop08_9u3p.htm">Value</a> property. Use these defaults to simplify your code.</p>
<p>
When you create a <b>CdbRecordset</b> object, the <a href="daglos01_7wpw.htm">current record</a> is positioned to the first record if there are any records. If there are no records, the <b>RecordCount</b> property setting is 0, and the <b>BOF</b> and <b>EOF</b> property settings are <b>TRUE</b>.</p>
<p>
You can use the <b>MoveNext</b>, <b>MovePrevious</b>, <b>MoveFirst</b>, and <b>MoveLast</b> methods to reposition the current record. Forward-only–type <b>CdbRecordset</b> objects support only the <b>MoveNext</b> method. When using the <b>Move</b> methods to visit each record (or "walk" through the <b>CdbRecordset</b>), you can use the <b>BOF</b> and <b>EOF</b> properties to check for the beginning or end of the <b>CdbRecordset</b> object.</p>
<p>
With dynaset- and snapshot-type <b>CdbRecordset</b> objects in a Microsoft Jet workspace, you can also use the <b>Find</b> methods, such as <b>FindFirst</b>, to locate a specific record based on criteria. If the record isn't found, the <b>NoMatch</b> property is set to <b>TRUE</b>. For table-type <b>CdbRecordset</b> objects, you can scan records using the <b>Seek</b> method.</p>
<p>
The <b>Type</b> property indicates the type of <b>CdbRecordset</b> object created, and the <b>Updatable</b> property indicates whether you can change the object's records.</p>
<p>
Information about the structure of a base table, such as the names and data types of each <b>CdbField</b> object and any <b>CdbIndex</b> objects, is stored in a <b>TableDef</b> object.</p>
<p>
To refer to a <b>CdbRecordset</b> object in a collection by its ordinal number or by its <b>Name</b> property setting, use either of the following syntax forms:</p>
<p>
<b>Recordsets[</b>0<b>]</b></p>
<p>
<b>Recordsets[</b>"<i>name</i>"<b>]</b></p>
<p class=indent>
<B><b>Note</b></B> You can open a <b>CdbRecordset</b> object from the same data source or database more than once, creating duplicate names in the <b>Recordsets</b> collection. You should assign <b>CdbRecordset</b> objects to <a href="daglos03_5jl1.htm">object variables</a> and refer to them by variable name.</p>
<p class=label>
<b>CdbRecordset Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbRecordset(VOID);</b></p>
<p>
This constructor creates an instance of the class. There are no parameters.</p>
<p>
<b>CONSTRUCTORCdbRecordset(const CdbRecordset &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbRecordset &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbRecordset(DAORecordset *</b><i>prs</i><b>,</b></p>
<p>
<b>BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b>Type</b></td>
<td class=label width=17%><b>Argument</b></td>
<td class=label width=54%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><b>DAORecordset *</b></td>
<td width=17%><i>prs</i></td>
<td width=54%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=29%><b>BOOL</b></td>
<td width=17%><i>bAddRef</i><p>
=<b>FALSE</b></p>
</td>
<td width=54%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object if you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
</font></BODY>
</HTML>

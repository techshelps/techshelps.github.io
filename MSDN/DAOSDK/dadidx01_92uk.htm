<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ODBCDirect Object Model</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvhowusingodbcdirectobjectmodel"></a>Using the ODBCDirect Object Model</h1>
<p class=label>
<b>Connecting to a Database</b></p>
<p>
A <b>CdbConnection</b> object is similar to a <b>CdbDatabase</b> object. In fact, a <b>CdbConnection</b> object and a <b>CdbDatabase</b> object represent different references to the same object, and properties on each of these two object types allow you to obtain a reference to the other corresponding object, which simplifies the task of converting ODBC client applications that use Microsoft Jet to use ODBCDirect instead. Use the <b>OpenConnection</b> method to connect to an <a href="daglos03_23vp.htm">ODBC data source</a>. The resulting <b>CdbConnection</b> object contains information about the connection, such as the server name, the data source name, and so on.</p>
<p class=label>
<b>Queries</b></p>
<p>
Although DAO does not support stored queries in an ODBCDirect workspace, a compiled query can be created as a <b>CdbQueryDef</b> object and used to execute action queries, and can also be used to execute stored procedures on the server. The <b>Prepare</b> property lets you decide whether to create a private, temporary stored procedure on the server from a <b>CdbQueryDef</b> before actually executing the query.</p>
<p>
Parameter queries can also be passed to the server, using <b>CdbParameter</b> objects on the <b>CdbQueryDef</b>. The <b>Direction</b> property lets you specify a <b>CdbParameter</b> as input, output, or both, or to accept a return value from a stored procedure.</p>
<p class=label>
<b>Data Manipulation</b></p>
<p>
Creating a <b>CdbRecordset</b> object is a convenient way to query a database and manipulate the resulting set of records. The <b>OpenRecordset</b> method accepts an SQL string or a <b>CdbQueryDef</b> object (stored query) as a data source argument. The resulting <b>CdbRecordset</b> object features an extremely rich set of properties and methods with which to browse and modify data.</p>
<p>
The <b>CdbRecordset</b> object is available in four different types&nbsp; corresponding to ODBC cursor types as shown in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>CdbRecordset Object Types</b></td>
<td class=label width=50%><b>ODBC Cursor Types</b></td>
</tr>
<tr valign=top>
<td width=50%>Dynamic</td>
<td width=50%>Dynamic</td>
</tr>
<tr valign=top>
<td width=50%>Dynaset</td>
<td width=50%>Keyset</td>
</tr>
<tr valign=top>
<td width=50%>Forward-only</td>
<td width=50%>Forward-only</td>
</tr>
<tr valign=top>
<td width=50%>Snapshot</td>
<td width=50%>Static</td>
</tr>
</table><br>
<p>
A batch update cursor library is available for client applications that need to work with a cursor without holding locks on the server or without issuing update requests one record at a time. Instead, the client stores update information on many records in a local buffer (or "batch"), and then issues a batch update.</p>
<p class=label>
<b>Asynchronous Method Execution</b></p>
<p>
The <b>Execute</b>, <b>MoveLast</b>, <b>OpenConnection</b>, and <b>OpenRecordset</b> methods feature the <b>dbRunAsync</b> option. This allows your client application to do other tasks (such as loading forms, for example) while the method is executing. You can check the <b>StillExecuting</b> property to see whether the task is complete and terminate an asynchronous task with the <b>Cancel</b> method.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Applications to ODBCDirect</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowconvertingtoodbcdirect"></a>Converting Applications to ODBCDirect</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowConvertingToODBCDirectC">
</object></p>
<p>
The following are tips for converting existing applications that run against Microsoft Jet databases to ODBC data sources. They assume the database has already been placed on the server and that you will only want to use ODBCDirect to access your data. In the meantime, the tips listed below will quickly get you up and running with ODBCDirect.
<ul type=disc>
<li>
Change the Workspace Type — If you do not create any workspaces, you still need to tell DAO what the default workspace type should be <b>ODBCDirect</b>. This is accomplished by setting the <b>DefaultType</b> property of DBEngine to <b>dbUseODBC</b> before doing any operations that need the default workspace. Once a workspace is created, you cannot change its type.<br><br></li>
<li>
If you explicitly create workspaces in your application while DefaultType is set to dbUseODBC, then all new workspaces will be ODBCDirect workspaces. However, if you want your code to be self-documenting, or if you will be using both Microsoft Jet and ODBCDirect workspaces, you can pass a fourth parameter to the <b>CreateWorkspace </b>method, specifying the type of workspace to create.<br><br></li>
<li>
Change <b>OpenDatabase</b> — You will need to change the arguments passed to <b>OpenDatabase</b>. Instead of passing a database name in the first parameter, you will now pass a connection string in the fourth parameter. (Note that all connection strings start with "ODBC;".)<br><br></li>
<li>
You may decide to open connections instead of databases. In this case, change your <b>OpenDatabase</b> calls to <b>OpenConnection</b>. Both functions take similar arguments.<br><br></li>
<li>
Handling Data Definition Language (DDL) — DAO’s ODBCDirect functionality does not support the <b>TableDefs</b> or <b>Indexes</b> collections. This means your application will no longer work if it creates new <b>TableDefs</b> or uses the <b>Indexes</b> collection of a <b>TableDef</b>.<br><br></li>
<li>
If this is a problem there are two ways you can change your code: You can create a Microsoft Jet workspace and open a second database to the data source, doing all DDL work within it. Or you can execute SQL calls to create and find objects. SQL calls are best if you want to keep from loading Microsoft Jet. Creating a second database works well if you want to limit the amount of code that changes.<br><br></li>
<li>
Creating/Using <b>QueryDef</b> objects — In ODBCDirect workspaces the <b>Database</b> object does not support the <b>CreateQueryDef</b> method. That is handled by the <b>Connection</b> object. In your code, you need to change all <b>CreateQueryDef</b> calls to be executed on the <b>Connection</b> property of the Database rather than the Database object itself, or change all <b>OpenDatabase</b> to <b>OpenConnection</b>. <b>QueryDef</b> objects created in ODBCDirect are not stored in the database and are lost when the object is closed or goes out of scope.<br><br></li>
<li>
Opening <b>Recordset</b> objects — ODBCDirect <b>Recordset</b> objects default to the fastest <b>Recordset</b> type rather than the most functional, as in Microsoft Jet. Typically this is a <b>Recordset</b> that cannot scroll backwards and is read only. If you need more functionality in the <b>Recordset</b>, you may specify that explicitly. If you need to scroll backwards or need bookmarks, then choose a different <b>Recordset</b> type, such as <b>dbOpenDynaset</b>. If you need to update the <b>Recordset</b>, choose a locking type, such as <b>dbOptimistic</b>.<br><br></li>
<li>
Code written in a Microsoft Jet workspace that plans on editing data and opens a <b>Recordset</b> with only the name argument provided will not run in ODBCDirect. However, you can change the <b>OpenRecordset</b> to supply a <b>Recordset</b> type and locking constant that will allow updating.<br><br></li>
<li>
Parameterized queries — ODBCDirect does not support named parameters. The syntax for a parameter in an SQL statement is a ‘?’, rather than a name as in Microsoft Jet. For example, the Microsoft Jet SQL <code>"SELECT * FROM Employees WHERE LastName = txtName" </code>creates a parameter called “txtName.” In ODBCDirect, the SQL would read <code>"SELECT * FROM Employees WHERE LastName = ?"</code>. In the <b>Parameters</b> collection, the name of the parameter would be "Parameter1". It should be noted that Microsoft Jet allows you to say <code>"Parameters iAuthId Integer; SELECT * from authors where au_id = iAuthId"</code>. Since ODBCDirect does not have named parameters, you cannot use the <code>"Parameters …;"</code> part of the previous example.<br><br></li>
<li>
Review program for optimizations — Always go back over the program and look for optimizations because ODBCDirect offers new and different ways to improve performance.</li>
</ul>
</font></BODY>
</HTML>

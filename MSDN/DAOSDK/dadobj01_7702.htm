<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CdbContainer Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjcontainer"></a>CdbContainer Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjContainerC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjContainerM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjContainerP">
</object></p>
<p>
A <b>CdbContainer</b> object groups similar types of <b>CdbDocument</b> objects together.</p>
<p>
<a href="dadobj01_4mud.htm"><img src="objdatab.gif" border=0></a><br>
<img src="parchild.gif" border=0><a href="dadobj01_77le.htm"><img src="colconta.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><img src="objconta.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj01_7184.htm"><img src="coldocum.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="dadobj03_6aux.htm"><img src="colprope.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
Each <b>CdbDatabase</b> object has a <b>Containers</b> collection consisting of built-in <b>CdbContainer</b> objects. Applications can define their own document types and corresponding containers (<a href="daglos02_23l1.htm">Microsoft Jet databases</a> only); however, these objects may not always be supported through DAO.</p>
<p>
Some of these <b>CdbContainer</b> objects are defined by the <a href="daglos02_0elh.htm">Microsoft Jet database engine</a> while others may be defined by other applications. The following table lists the name of each <b>CdbContainer</b> object defined by the Microsoft Jet database engine and the type of information it contains.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>CdbContainer</b></td>
<td class=label width=50%><b>Contains information about</b></td>
</tr>
<tr valign=top>
<td width=50%>Databases</td>
<td width=50%>Saved databases</td>
</tr>
<tr valign=top>
<td width=50%>Tables</td>
<td width=50%>Saved tables and queries</td>
</tr>
<tr valign=top>
<td width=50%>Relations</td>
<td width=50%>Saved relationships</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B> Don't confuse the <b>CdbContainer</b> objects listed in the preceding table with the collections of the same name. The Databases <b>CdbContainer</b> object refers to all saved database objects, but the <b>Databases</b> collection refers only to database objects that are open in a particular workspace.</p>
<p>
Each <b>CdbContainer</b> object has a <b>Documents</b> collection containing <b>CdbDocument</b> objects that describe instances of built-in objects of the type specified by the <b>CdbContainer</b>. You typically use a <b>CdbContainer</b> object as an intermediate link to the information in the <b>CdbDocument</b> object. You can also use the <b>Containers</b> collection to set security for all <b>CdbDocument</b> objects of a given type.</p>
<p>
With an existing <b>CdbContainer</b> object, you can:
<ul type=disc>
<li>
Use the <b>Name</b> property to return the predefined name of the <b>CdbContainer</b> object.<br><br></li>
<li>
Use the <b>Owner</b> property to set or return the owner of the <b>CdbContainer</b> object. To set the <b>Owner</b> property, you must have write <a href="daglos03_31ny.htm">permission</a> for the <b>CdbContainer</b> object, and you must set the property to the name of an existing <b>CdbUser</b> or <b>CdbGroup</b> object.<br><br></li>
<li>
Use the <b>Permissions</b> and <b>UserName</b> properties to set access permissions for the <b>CdbContainer</b> object; any <b>CdbDocument</b> object created in the <b>Documents</b> collection of a <b>CdbContainer</b> object inherits these access permission settings.</li>
</ul>
<p>
Because <b>CdbContainer</b> objects are built-in, you can't create new <b>CdbContainer</b> objects or delete existing ones.</p>
<p>
To refer to a <b>CdbContainer</b> object in a collection by its ordinal number or by its <b>Name</b> property setting, use any of the following syntax forms:</p>
<p>
<b>Containers[</b>0<b>]</b></p>
<p>
<b>Containers[</b>"<i>name</i>"<b>]</b></p>
<p class=label>
<b>CdbContainer Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbContainer(VOID);</b></p>
<p>
This constructor creates an instance of the class. There are no parameters.</p>
<p>
<b>CONSTRUCTORCdbContainer(const CdbContainer &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbContainer &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbContainer(DAOContainer *</b><i>pctn</i><b>,</b></p>
<p>
<b>BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=32%><b>Type</b></td>
<td class=label width=19%><b>Argument</b></td>
<td class=label width=49%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><b>DAOContainer *</b></td>
<td width=19%><i>pctn</i></td>
<td width=49%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=32%><b>BOOL</b></td>
<td width=19%><i>bAddRef<br>
</i><b>=FALSE</b></td>
<td width=49%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object when you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
</font></BODY>
</HTML>

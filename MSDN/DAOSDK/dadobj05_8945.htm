<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Workspace Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjworkspace"></a>CdbWorkspace Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjWorkspaceC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjWorkspaceM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjWorkspaceP">
</object></p>
<p>
A <b>CdbWorkspace</b> object defines a named <a href="daglos04_4be6.htm">session</a> for a user. It contains open databases and provides mechanisms for simultaneous <a href="daglos04_9dta.htm">transactions</a> and, in <a href="daglos02_23l1.htm">Microsoft Jet</a> workspaces, <a href="daglos04_24og.htm">secure workgroup</a> support. It also controls whether you are going through the <a href="daglos02_0elh.htm">Microsoft Jet database engine</a> or <a href="daglos03_37lg.htm">ODBCDirect</a> to access external data.</p>
<p>
<a href="dadobj01_4tet.htm"><img src="objdbeng.gif" border=0></a><br>
<img src="parchild.gif" border=0><a href="dadobj05_89ph.htm"><img src="colworks.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><img src="objworks.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj01_2sa6.htm"><img src="colconn.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj01_4y3p.htm"><img src="coldatab.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj02_6lv4.htm"><img src="colgroup.gif" border=0></a><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="dadobj03_6aux.htm"><img src="colprope.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="dadobj05_66k2.htm"><img src="coluser.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
A <b>CdbWorkspace</b> is a non-<a href="daglos03_0oxg.htm">persistent object</a> that defines how your application interacts with data — either by using the Microsoft Jet database engine or <a href="daglos03_37lg.htm">ODBCDirect</a>. Use the <b>CdbWorkspace</b> object to manage the current session or to start an additional session. In a session, you can open multiple databases or connections and manage transactions. For example, you can:
<ul type=disc>
<li>
Use the <b>Name</b>, <b>UserName</b>, and <b>Type</b> properties to establish a named session. The session creates a scope in which you can open multiple databases and conduct one instance of nested transactions.<br><br></li>
<li>
Use the <b>Close</b> method to terminate a session.<br><br></li>
<li>
Use the <b>OpenDatabase</b> method to open one or more existing databases on a <b>CdbWorkspace</b>.<br><br></li>
<li>
Use the <b>BeginTrans</b>, <b>CommitTrans</b>, and <b>Rollback</b> methods to manage nested transaction processing within a <b>CdbWorkspace</b> and use several <b>CdbWorkspace</b> objects to conduct multiple, simultaneous, and overlapping transactions.</li>
</ul>
<p>
Further, using a Microsoft Jet database, you can establish security based on user names and passwords:
<ul type=disc>
<li>
Use the <b>Groups</b> and <b>Users</b> collections to establish group and user access permissions to objects in the <b>CdbWorkspace</b>.<br><br></li>
<li>
Use the <b>IsolateODBCTrans</b> property to isolate multiple transactions that involve the same Microsoft Jet-connected ODBC database.</li>
</ul>
<p>
When you first refer to or use a <b>CdbWorkspace</b> object, you automatically create the <a href="daglos01_5wo5.htm">default workspace</a>, <code>DBEngine.Workspaces(0)</code>. The settings of the <b>Name</b> and <b>UserName</b> properties of the default workspace are "#Default Workspace#" and "Admin," respectively. If security is enabled, the <b>UserName</b> property setting is the name of the user who logged on.</p>
<p>
To establish an ODBCDirect <b>CdbWorkspace</b> object, and thereby avoid loading the Microsoft Jet database engine into memory, set the <b>DBEngine </b>object's <b>DefaultType</b> property to <b>dbUseODBC</b>, or set the <i>type</i> argument of the <b>CreateWorkspace</b> method to <b>dbUseODBC</b>.</p>
<p>
When you use transactions, all databases in the specified <b>CdbWorkspace</b> are affected — even if multiple <b>Database</b> objects are opened in the <b>CdbWorkspace</b>. For example, you use a <b>BeginTrans</b> method, update several records in a database, and then delete records in another database. If you then use the <b>Rollback</b> method, both the update and delete operations are canceled and rolled back. You can create additional <b>CdbWorkspace</b> objects to manage transactions independently across <b>Database</b> objects.</p>
<p>
You can create <b>CdbWorkspace</b> objects with the <b>CreateWorkspace</b> method. After you create a new <b>CdbWorkspace</b> object, you must append it to the <b>Workspaces</b> collection if you need to refer to it from the <b>Workspaces</b> collection.</p>
<p>
You can use a newly created <b>CdbWorkspace</b> object without appending it to the <b>Workspaces</b> collection. However, you must refer to it by the <a href="daglos03_5jl1.htm">object variable</a> to which you have assigned it.</p>
<p>
To refer to a <b>CdbWorkspace</b> object in a collection by its ordinal number or by its <b>Name</b> property setting, use either of the following syntax forms:</p>
<p>
<b>Workspaces[</b>0<b>]</b></p>
<p>
<b>Workspaces[</b>"<i>name</i>"<b>]</b></p>
<p class=label>
<b>CdbWorkspace Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbWorkspace(VOID);</b></p>
<p>
This constructor creates an instance of the class. There are no parameters.</p>
<p>
<b>CONSTRUCTORCdbWorkspace(const CdbWorkspace &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbWorkspace &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbWorkspace(DAOWorkspace *</b><i>pwrk</i><b>,</b></p>
<p>
<b> BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b>Type</b></td>
<td class=label width=23%><b>Argument</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><b>DAOWorkspace *</b></td>
<td width=23%><i>pwrk</i></td>
<td width=48%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=29%><b>BOOL</b></td>
<td width=23%><i>bAddRef</i><p>
=<b>FALSE</b></p>
</td>
<td width=48%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object if you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using DAO Interfaces</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowusingdaointerfaces"></a>Using DAO Interfaces</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowUsingDAOInterfacesC">
</object></p>
<p>
DAO acquires functionality through DAO Component Object Model (COM) interfaces. DAO simplifies managing COM interfaces by incorporating them into dbDAO classes such as CdbRecordset, CdbWorkspace, etc.</p>
<p>
Incorporating an interface into a DAO object makes the interface unavailable to the programmer, but sometimes access to the interface is required. For example, using DAO in a multi-threaded apartment-model application requires access to the interface so it can be marshaled across apartments (see <a href="davcsdk_2z8n.htm">DAO and the Apartment-threading Model</a>).</p>
<p>
Normally, acquiring an interface would require you to call CoCreateInstance() with the appropriate class and interface identifiers, then manage the returned interface pointer. However, DAO has already acquired these interfaces for its own operation and offers them to you through the <b>GetInterface()</b> method and the <b>LPUNKNOWN</b> operator.</p>
<p>
GetInterface and LPUNKNOWN are members of every DAO class. The LPUNKOWN operator looks like a type cast, and internally calls the GetInterface() method.</p>
<p class=label>
<b>Syntax</b></p>
<p>
LPUNKNOWNGetInterface(BOOL <i>bAddRef</i> = FALSE, </p>
<p>
BOOL <i>bThrowException</i> = TRUE) const;</p>
<p>
operator LPUNKNOWN(){ return GetInterface();}</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=20%><b>Type</b></td>
<td class=label width=32%><b>Example</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>BOOL</td>
<td width=32%><i>bAddRef</i> = FALSE</td>
<td width=48%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
<tr valign=top>
<td width=20%>BOOL</td>
<td width=32%><i>bThrowException</i> = TRUE</td>
<td width=48%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, an error is thrown if an interface is not set in the target object.</td>
</tr>
</table><br>
<p class=label>
<b>Usage</b></p>
<pre><code>#include &lt;dbdao.h&gt;
#include &lt;dbdaoerr.h&gt;
CdbDBEngine   engine;         // Declare a DAO object
DAODBEngine   *pIdben;         // Declare a DAO interface pointer
// Construct four DAO objects. Increment AddRef.
/* 1 */
// Use GetInterface to AddRef. Explicitly Release when // done.
pIdben = (DAODBEngine   *)engine.GetInterface(TRUE);
...
pIdben-&gt;Release();
/* 2 */
// Use DAO to AddRef and Release.
CdbDBEngine Engine2(engine.GetInterface(), TRUE);
Engine2.GetVersion();
/* 3 */
CdbDBEngine Engine3((LPUNKNOWN) engine, TRUE);
Engine2.GetVersion();
/* 4 */
CdbDBEngine *pEngine4 = new CdbDBEngine(pIdben, TRUE);
pEngine4-&gt;GetVersion();
</code></pre>
<p class=label>
<b>Remarks</b></p>
<p>
See <a href="davcsdk_2z8n.htm">DAO and the Apartment-threading Model</a> for an extended example. See the "DAO OLE Automation Interfaces" section of "Using Microsoft Visual C++ and DAO" for additional remarks on DAO interfaces.</p>
</font></BODY>
</HTML>

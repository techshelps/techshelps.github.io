<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Build the DAO Method Samples</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowbuildsample"></a>How to Build the DAO Method Samples</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowBuildSampleC">
</object></p>
<p>
The DAO method samples are provided as source files in the directory Samples\dbdao <i>InstallDirectory</i>\DAOSDK\SAMPLESon the MSDN Library disc. You can copy, compile, and execute them in a Microsoft Visual C++ project. The method samples are the Microsoft Visual C++ equivalents of the Microsoft Visual Basic DAO method samples. In order to correspond as closely as possible to the Visual Basic samples, the Microsoft Visual C++ method samples are designed as ANSI console applications.</p>
<p>
Examples should be simple, so common functions as defined in <b>stdio.h</b> are used whenever possible. When necessary, less common routines as defined in <b>conio.h</b> are used. DAO depends on the <b>COleVariant</b> and <b>CString</b> Microsoft Foundation Classes (MFC), and objects from these classes are used often in the samples.</p>
<p>
The procedures for creating samples are listed below. In order to build the samples, create a dummy project in Microsoft Visual C++, and a dummy source file within that project. When you want to test a sample, copy and paste it into the dummy source file then build the project.</p>
<p>
We suggest naming the project <b>avatar.mdp</b>, and the source file, <b>avatar.cpp</b>. (An "avatar" is the embodiment of something else. Avatar.cpp will embody each sample. Using it will conserve disk space and minimize compilation time.). This procedure assumes everything listed below is done in one session.</p>
<p class=label>
<b>To create the Avatar workspace</b>
<ol>
<li>
Start Microsoft Visual C++.<br><br></li>
<li>
From the <b>File</b> menu; select <b>New</b>.<br><br></li>
<li>
From <b>New, </b>select <b>Project Workspace</b>.<br><br></li>
<li>
Select Console Application.<br><br></li>
<li>
Type in a name for the project. (These examples suggest the name “avatar”.)<br><br></li>
<li>
Select <b>Create</b>.</li>
</ol>
<p class=label>
<b>To create the Avatar source file</b>
<ol>
<li>
Start Microsoft Visual C++.<br><br></li>
<li>
From the <b>File</b> menu, select <b>New</b>.<br><br></li>
<li>
Select <b>Text File</b> from the menu and choose <b>Save</b>.<br><br></li>
<li>
Name the file avatar.cpp when prompted to do so and close the text file.</li>
</ol>
<p>
To configure the Avatar project, you must select the project, then specify the Tools and Build settings, and save the project.</p>
<p class=label>
<b>To configure Avatar project</b>
<ol>
<li>
Select the Avatar project.<br><br></li>
<li>
Choose <b>Save</b>.</li>
</ol>
<p class=label>
<b>To specify the Tools settings</b>
<ol>
<li>
From the <b>Tools</b> menu, select the <b>Options</b> menu item.<br><br></li>
<li>
Choose the <b>Directories</b> tab.<br><br></li>
<li>
From the <b>Show Directories For</b> menu on the <b>Directories</b> tab, select <b>Include Files</b>.<br><br></li>
<li>
Add the DAOSDK\Include directory.<br><br></li>
<li>
On the <b>Show Directories For:</b> menu on the <b>Directories</b> tab, select <b>Library Files</b>.<br><br></li>
<li>
Add the DAOSDK\Lib and DAOSDK\Lib\Debug directories.</li>
</ol>
<p class=label>
<b>To specify the Build settings</b>
<ol>
<li>
From the main <b>Build</b> menu, choose <b>Settings</b>.<br><br></li>
<li>
Select the <b>General</b> tab.<br><br></li>
<li>
Select the <b>Microsoft Foundation Classes</b> list.<br><br></li>
<li>
Select <b>Use MFC in a Shared DLL</b>.<br><br></li>
<li>
Select the <b>C/C++</b> tab.<br><br></li>
<li>
From the <b>Category</b> list, select <b>Code Generation</b>.<br><br></li>
<li>
From the <b>Use</b> <b>Run Time Library</b> list, select the <b>Debug Multi-threaded DLL</b> item.</li>
</ol>
<p>
When you have finished configuring the Avatar project, you must close the Workspace.</p>
<p class=label>
<b>To close the Workspace</b>
<ol>
<li>
From the File menu, select <b>Close Workspace</b>.<br><br></li>
<li>
From the File menu, select <b>Exit</b>.</li>
</ol>
<p class=label>
<b>To Select the Library Modules</b>
<ol>
<li>
Select the <b>Link</b> tab.<br><br></li>
<li>
On the <b>Category</b> menu, select <b>General</b>.<br><br></li>
<li>
In the <b>Object/Library Modules</b> text box, add ddao35d.lib. (This is the ANSI Debug module.<p class=atl>
<B><b>Note</b></B> Other choices are ddao35.lib (ANSI Release), ddao35ud.lib (Unicode Debug), and ddao35u.lib (Unicode Release).</p></li>
</ol>
<p>
If you cannot debug trace into dbDAO libraries, you may need to copy the debug version of the .dll or .pdb files into your Windows\System (for Win95) or Windows\System32 (for Windows NT) directory.</p>
<p class=label>
<b>To rebuild the sample</b>
<ol>
<li>
Copy a sample file into avatar.cpp.<br><br></li>
<li>
Build and execute the project. The word Execution will display in an MS-DOS <b>Prompt</b> window.</li>
</ol>
</font></BODY>
</HTML>

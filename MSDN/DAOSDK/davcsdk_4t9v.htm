<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSI and Unicode Strings</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowansiunicodestrings"></a>ANSI and Unicode Strings</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowANSIUnicodeStringsC">
</object></p>
<p>
All 16-bit applications use ANSI strings. 32-bit applications may use either ANSI or Unicode strings. ANSI applications store strings as <b>unsigned char</b>, each byte containing a different character. Unicode applications store strings as <b>unsigned short</b>, each short integer value containing a different character.</p>
<p>
To specify ANSI, declare the following in your project settings:</p>
<pre><code>#define OLE2ANSI
</code></pre>
<p>
To specify Unicode, declare the following in your project settings:</p>
<pre><code>#define _UNICODE
</code></pre>
<p>
The advantage of using Unicode in your applications is that it enables you to easily localize your application into languages such as Chinese, where two bytes are required to store characters. ANSI applications require special DBCS (Double Byte Character Set) functions in order to be localized into languages such as Chinese.</p>
<p>
The advantage of using ANSI strings is that, in Microsoft Windows 95, the Windows system calls take ANSI strings; therefore, you must convert Unicode strings to ANSI before calling into these functions.</p>
<p>
You can compile your application in ANSI or Unicode by using the <b>_T()</b> macro. <b>_T</b> is defined by Microsoft Visual C++ and is used to wrap all string literals. In ANSI, this macro is a no-op. In Unicode, it appends the <b>L</b> keyword to inform the compiler that the literal is to be read in as Unicode. For example:</p>
<pre><code>void OpenADatabase()
   {
   CdbDBEngine dben;
   CdbDatabase db;

   db = dben.OpenDatabase(_T("MyDB.MDB"));
   }
</code></pre>
<p>
The above code will compile for both ANSI and Unicode applications.</p>
</font></BODY>
</HTML>

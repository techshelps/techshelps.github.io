<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CdbDBEngine Constructor (dbDAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjdbengines"></a>CdbDBEngine Constructor</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineC">
</object> &nbsp; <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineX">
</object> &nbsp; <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineP">
</object> &nbsp; <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjDBEngineM">
</object></p>
<p class=label>
<b>Function</b></p>
<p>
Create an instance of the Jet Database Engine.</p>
<p class=label>
<b>Syntax Summary</b></p>
<p>
CONSTRUCTORCdbDBEngine(const CdbDBEngine &amp;);</p>
<p>
CONSTRUCTORCdbDBEngine(DAODBEngine *peng, </p>
<p>
BOOL bAddRef=FALSE);</p>
<p>
CONSTRUCTORCdbDBEngine(BOOL bPrivate=FALSE, </p>
<p>
BOOL bStart=TRUE, </p>
<p>
LPCTSTR pstrIniPath=NULL, </p>
<p>
LPCTSTR pstrDefUser=NULL, </p>
<p>
LPCTSTR pstrDefPW=NULL, </p>
<p>
LONG lType=dbUseJet);</p>
<p class=indent>
<B><b>Note</b></B> The qualifier 'CONSTRUCTOR' is merely a decoration provided to help readability.&nbsp; It has no syntactic value.</p>
<p class=label>
<b>Syntax / Parameters / Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(const CdbDBEngine &amp;);</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=33%><b>Type</b></td>
<td class=label width=33%></td>
<td class=label width=34%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>const CdbDBEngine &amp;</td>
<td width=33%></td>
<td width=34%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p class=label>
<b>Syntax / Parameters / Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(DAODBEngine *peng,</p>
<p>
BOOL bAddRef=FALSE);</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=33%><b>Type</b></td>
<td class=label width=33%><b>example</b></td>
<td class=label width=34%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>DAODBEngine *</td>
<td width=33%>peng</td>
<td width=34%>A pointer to an OLE interface whose methods correspond to the resulting <b>DAO class</b> object.</td>
</tr>
<tr valign=top>
<td width=33%>BOOL </td>
<td width=33%>bAddRef<p>
=FALSE</p>
</td>
<td width=34%>(Optional) A boolean.&nbsp; If <b>TRUE</b>, the <b>AddRef()</b> function of the OLE interface specified in the first parameter is called.</td>
</tr>
</table><br>
<p>
This constructor places an OLE interface into a <b>DAO</b> object.</p>
<p class=label>
<b>Syntax / Parameters / Remarks</b></p>
<p>
CONSTRUCTORCdbDBEngine(BOOL bPrivate=FALSE,</p>
<p>
BOOL bStart=TRUE,</p>
<p>
LPCTSTR pstrIniPath=NULL,</p>
<p>
LPCTSTR pstrDefUser=NULL,</p>
<p>
LPCTSTR pstrDefPW=NULL, </p>
<p>
LONG lType=dbUseJet);</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=563>
<tr valign=top>
<td class=label width=22%><b>Type</b></td>
<td class=label width=27%><b>example</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>BOOL </td>
<td width=27%>bPrivate<p>
=FALSE</p>
</td>
<td width=51%>(Optional) Determines whether Jet Engine is Private or Shared.<p>
Each private engine is a new instance of DAO. A Private engine is one way to create secure access to data.&nbsp; A shared engine is common across all instances, enabling shared workspaces, databases, etc.</p>
<p>
If <b>TRUE</b>, then Private.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>BOOL </td>
<td width=27%>bStart=TRUE</td>
<td width=51%>(Optional) If <b>TRUE</b>, Jet Engine is started when this object is created.&nbsp; If <b>FALSE</b>, the Jet Engine must be started explicitly with the <b>Start</b> method.</td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR </td>
<td width=27%>pstrIniPath<p>
=NULL</p>
</td>
<td width=51%>(Optional) A pointer to a string that is a user-supplied portion of the Windows Registry key containing Microsoft Jet database engine settings or parameters needed for installable ISAM databases. </td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR </td>
<td width=27%>pstrDefUser =NULL</td>
<td width=51%>(Optional) A pointer to a string that is the user name used to create the default Workspace when it is initialized.</td>
</tr>
<tr valign=top>
<td width=22%>LPCTSTR </td>
<td width=27%>pstrDefPW =NULL</td>
<td width=51%>(Optional) A pointer to a string that is the password used to create the default Workspace when it is initialized.</td>
</tr>
<tr valign=top>
<td width=22%>LONG </td>
<td width=27%>lType=dbUseJet</td>
<td width=51%>(Optional) A value that determines whether the Workspace will be Jet or ODBC (i.e., dbUseJet or dbUseODBC).</td>
</tr>
</table><br>
<p>
This constructor builds a <b>CdbDBEngine</b> object.</p>
<p>
This constructor is typically specified without parameters (i.e.,&nbsp; using all defaults).</p>
<p>
One reason to specify parameters is to create the Jet Database Engine, but postpone starting it.&nbsp; This enables acquiring runtime information, or avoiding runtime conflicts when starting DAO from a user DLL.&nbsp; Another common reason to specify parameters is to create an ODBC Direct workspace.</p>
<p class=label>
<b>Usage</b></p>
<pre><code>#include &lt;afxole.h&gt;
#include &lt;dbdao.h&gt;
...                        // Example 1:
CdbDBEngine   dben1a;          // Create an instance using all defaults.
CdbDBEngine   dben1b( dben1a );    // Copy an existing instance.
...
                              // Example 2:
// Create an instance without using all defaults:
   // Create a private engine; don't start it when constructed; no IniPath, yet;       // no DefaultUser; no password, yet; explicitly ask for a Jet Engine workspace.

   CdbDBEngine dben2(TRUE,FALSE,,,,dbUseJet);
   ... 
   // Assume that you get the iniPath and DefaultPassword from the user...

   dben2.SetIniPath(lpctstrIniPath);         // Set the iniPath now.
   dben2.SetDefaultPassword(lpctstrPassword);   // Set the DefaultPassword now.
   dben2.Start();                     // Start the engine now.
</code></pre>
</font></BODY>
</HTML>

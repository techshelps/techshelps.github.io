<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameter Object (DAO)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dvobjparameter"></a>CdbParameter Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjParameterC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjParameterM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvobjParameterP">
</object></p>
<p>
A <b>CdbParameter</b> object represents a value supplied to a query. The parameter is associated with a <b>CdbQueryDef</b> object created from a <a href="daglos03_2515.htm">parameter query</a>.</p>
<p>
<a href="dadobj03_6zdy.htm"><img src="objquery.gif" border=0></a><br>
<img src="parchild.gif" border=0><a href="dadobj03_48tu.htm"><img src="colparam.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><img src="objparam.gif" border=0></p>
<p class=label>
<b>Remarks</b></p>
<p>
<b>CdbParameter</b> objects allow you to change the arguments in a frequently run <b>CdbQueryDef</b> object without having to recompile the query.</p>
<p>
Using the properties of a <b>CdbParameter</b> object, you can set a query parameter that can be changed before the query is run. You can:
<ul type=disc>
<li>
Use the <b>Name</b> property to return the name of a parameter.<br><br></li>
<li>
Use the <b>Value</b> property to set or return the parameter values to be used in the query.<br><br></li>
<li>
Use the <b>Type</b> property to return the data type of the <b>CdbParameter</b> object.<br><br></li>
<li>
Use the <b>Direction</b> property to set or return whether the parameter is an input parameter, an output parameter, or both.</li>
</ul>
<p>
In an <a href="daglos03_4o11.htm">ODBCDirect workspace</a>, you can also:
<ul type=disc>
<li>
Change the setting of the <b>Type</b> property. Doing so will also clear the <b>Value</b> property.<br><br></li>
<li>
Use the <b>Direction</b> property to set or return whether the parameter is an input parameter, an output parameter, or both.</li>
</ul>
<p class=label>
<b>CdbParameter Constructor Syntax</b></p>
<p>
Use any one of the following three constructors. The qualifier 'CONSTRUCTOR' in the syntax models is provided to help readability. It has no syntactic value.</p>
<p>
<b>CONSTRUCTORCdbParameter(VOID);</b></p>
<p>
This constructor creates an instance of the class. There are no parameters.</p>
<p>
<b>CONSTRUCTORCdbParameter(const CdbParameter &amp;);</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Type</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>const CdbParameter &amp;</b></td>
<td width=50%>Reference to an object.</td>
</tr>
</table><br>
<p>
This constructor creates a copy of the object referenced in the parameter.</p>
<p>
<b>CONSTRUCTORCdbParameter(DAOParameter *</b><i>pprm</i><b>,</b></p>
<p>
<b>BOOL </b><i>bAddRef</i><b> = FALSE);</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=28%><b>Type</b></td>
<td class=label width=17%><b>Argument</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><b>DAOParameter *</b></td>
<td width=17%><i>pprm</i></td>
<td width=55%>A DAO Automation interface pointer corresponding to this DAO class.</td>
</tr>
<tr valign=top>
<td width=28%><b>BOOL</b></td>
<td width=17%><i>bAddRef</i><p>
<b>=FALSE</b></p>
</td>
<td width=55%>Optional. A <b>Boolean</b>. If <b>TRUE</b>, the DAO Automation interface <b>AddRef</b> function is called.</td>
</tr>
</table><br>
<p>
DAO functionality is presented through pointers to DAO Automation interfaces. This constructor makes a DAO interface available in the form of a DAO class object that provides additional functionality.</p>
<p>
This constructor is not required for typical use. It is provided to enable you to easily create a DAO class object if you have access to the corresponding DAO interface.</p>
<p>
When the destructor for the DAO object is invoked, the underlying Automation interface's <b>Release</b> member is called. If <b>Release</b> decrements the interface's reference count to zero, the pointer to the Automation interface can be deleted. If you don't want this to happen (for example, because you want to discard the DAO object, but continue using the Automation interface), specify <b>TRUE</b> for the second parameter. The underlying Automation interface's <b>AddRef</b> member is called, which counterbalances the eventual call to <b>Release</b>.</p>
</font></BODY>
</HTML>

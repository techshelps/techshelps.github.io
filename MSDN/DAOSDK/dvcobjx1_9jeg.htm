<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Index Object, Indexes Collection Example (VC++)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="daobjindexx"></a>Index Object, Indexes Collection Example (VC++)</h1>
<p>
This example creates a new <b>TableDef</b> object and two new <b>Field</b> objects, appends the <b>Field</b> objects to the <b>Fields</b> collection in the new <b>TableDef</b>, and appends the <b>TableDef</b> to the <b>TableDefs</b> collection in the database. Then it creates a new primary <b>Index</b> object, includes the two <b>Field</b> objects in it, and appends the <b>Index</b> to the <b>Indexes</b> collection of the <b>TableDef</b>. Finally, the example enumerates the<b> Index</b> objects in the current database. See the methods and properties listed in the <b>Index</b> summary topic for additional examples.</p>
<pre><code>CdbDBEngine      dbeng;
CdbDatabase      dbsDefault;
CdbTableDef      tdfTest;
CdbField      fldOne, fldTwo;
CdbIndex      idxPrimary;
long         I;

// Get workspace and database.
dbsDefault = dbeng.OpenDatabase(_T("Northwind.mdb"));

// Create table with two fields.
tdfTest = dbsDefault.CreateTableDef(_T("MyTable"));
fldOne = tdfTest.CreateField(_T("Field1"), dbLong);
fldOne.SetRequired(TRUE);   // No Null values allowed.
tdfTest.Fields.Append(fldOne);
fldTwo = tdfTest.CreateField(_T("Field2"), dbLong);
fldTwo.SetRequired(TRUE);   // No Null values allowed.
tdfTest.Fields.Append(fldTwo);
dbsDefault.TableDefs.Append(tdfTest);

// Create primary index for those two fields.
idxPrimary = tdfTest.CreateIndex(_T("MyIndex"));
idxPrimary.SetPrimary(TRUE);
fldOne = tdfTest.CreateField(_T("Field1"));
idxPrimary.Fields.Append(fldOne);
fldTwo = tdfTest.CreateField(_T("Field2"));
idxPrimary.Fields.Append(fldTwo);
tdfTest.Indexes.Append(idxPrimary);

// Enumerate index and its fields.
printf(_T("Index: %s\n"), idxPrimary.GetName());
printf(_T("&nbsp; Required: %d\n"), idxPrimary.GetRequired());
printf(_T("&nbsp; IgnoreNulls: %d\n"), idxPrimary.GetIgnoreNulls());
printf(_T("&nbsp; Primary: %d\n"), idxPrimary.GetPrimary());
printf(_T("&nbsp; Clustered: %d\n"), idxPrimary.GetClustered());
printf(_T("&nbsp; Unique: %d\n"), idxPrimary.GetUnique());
printf(_T("&nbsp; Foreign: %d\n"), idxPrimary.GetForeign());

printf(_T("\nFields in Index:\n"));
for( I = 0; I &lt; idxPrimary.Fields.GetCount(); I++)
   printf(_T(" %s\n"), idxPrimary.Fields[I].GetName());
</code></pre>
<p>
This example opens a table-type <b>Recordset</b> and selects an index for the <b>Recordset</b>. By setting an index, the Microsoft Jet database engine returns records in the order specified by the index. Without an index, table-type <b>Recordset</b> objects return records from the database table in no particular order.</p>
<pre><code>CdbDBEngine         dbeng;
CdbDatabase         dbsDefault;
CdbRecordset      rstTitles;

// Get workspace and database.
dbsDefault = dbeng.OpenDatabase(_T("Northwind.mdb"));
rstTitles = dbsDefault.OpenRecordset(_T("Titles"));
rstTitles.SetIndex(_T("MyIndex"));
   .
   .
   .
</code></pre>
</font></BODY>
</HTML>

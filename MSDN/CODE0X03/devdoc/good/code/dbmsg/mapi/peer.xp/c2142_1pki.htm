<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2142"></a>README.TXT</h2>
<pre><code>Sample Transport <br> <br> <br>The peer.xp sample is a transport service provider (SMPXP.DLL). <br> <br>Peer-to-Peer <br>------------ <br> <br>The sample peer-to-peer transport transmits messages as files and uses <br>network file paths as its e-mail addresses. Each user has an inbound message <br>directory and an outbound message directory; the user e-mail address is the <br>network path to the inbound directory. The transport creates an outbound <br>message in each recipient's inbound directory (obtained from the recipient's <br>address). <br> <br>Not Peer-to-Peer <br>---------------- <br> <br>If peer-to-peer transmission is disabled (this is a configuration option), the <br>transport simply leaves outbound messages in the outbound directory and <br>collects inbound messages from the inbound directory. It does not attempt <br>delivery. This mode can be used as the first of two stages, where the second <br>stage moves messages to and from the network. <br> <br>Addressing <br>---------- <br> <br>In peer mode, the network path of the user's inbound directory is the e-mail <br>address. Network paths are normally Universal Naming Convention (UNC) paths, <br>but an MS-DOS drive and directory path can also be used. <br> <br>Message in TNEF <br>--------------- <br> <br>A small set of message properties, including recipients, subject, and message <br>text, are encoded as text for transmission. Other message properties are <br>encapsulated in a binary file in the Transport Neutral Encapsulation Format <br>(TNEF), using functions supplied in TNEF.DLL. This division approximates <br>the division of properties that real transports must often make, where those <br>properties understood by non-MAPI clients must be encoded in a transport- <br>specific format and the remainder can be left to the TNEF. <br> <br>Interface Lifetime and Cross-Referencing <br>---------------------------------------- <br> <br>Interfaces created by the transport in response to service provider interface <br>(SPI) calls, including status interfaces, are hooked to the transport logon <br>object and invalidated when MAPI logs off the transport. The provider INIT <br>object is an exception, as you might expect. <br> <br>Address Type and UID <br>-------------------- <br> <br>The transport handles a single e-mail address type, which is configurable. <br>It does not handle any UIDs, that is, it does not call SetProviderUID. <br> <br>Per-recipient and per-message Option Support <br>-------------------------------------------- <br> <br>The transport supports deferred delivery of messages on a per-recipient <br>basis, as well as on a per-message basis. <br> <br>Supported Features <br>------------------ <br> <br>Basic features. The sample transport supports sending, receiving, and polling <br>for new messages. <br> <br>Configuration. Interactive and programmatic configuration of 14 parameters <br>is supported. <br> <br>Status interface. The sample transport supports all methods of the IMAPIStatus <br>interface, except property setting. <br> <br>Multithread safety. MAPI carefully limits the exposure of transports to access <br>by multiple threads of execution on Win32 platforms. The sample transport <br>protects itself against concurrency problems in the remaining cases where they <br>might arise (in the status interface, for instance). <br> <br>Cross-platform support. The sample transport generates executable files for <br>Windows 3.X, Windows 95, and Windows NT 3.5 and later from a single set of <br>source files. <br> <br>Event logging. The sample transport supports event logging to a text file. <br>The file is automatically limited to a specified size. All transport sessions <br>use the same file. <br> <br>Unsupported Features <br>-------------------- <br> <br>Asynchronous detection of incoming messages. The transport design does not <br>lend itself to asynchronous detection because the file system does not notify <br>the transport when new messages arrive. <br> <br>Address Format <br>-------------- <br> <br>This transport supports a single address type whose name is configurable. <br>MSPEER is commonly chosen; this is the type supported by the sample address <br>book. When creating new one-off entries in an address book (i.e. the Personal <br>Address Book), this is the value for the Address Type field. Email addresses <br>for this transport look like DOS file paths. They can be either UNC paths, <br>or ordinary fully qualified paths: <br> <br>    \\server-name\share-name\directory-name\...drive-letter:directory-name\... <br> <br>Note: When typing one-off addresses in the Exchange client, you must double the <br>backslashes, like this: <br> <br>    [MSPEER:\\\\server-name\\share-name\\directory\\...] <br> <br>This is because the client treats the backslash as an escape character. <br> <br>Configuration <br>------------- <br> <br>The sample transport has a three-page property sheet interface for interactive <br>configuration, which is accessible through service provider logon, through <br>the ServiceEntry call, and through the IMAPIStatus::SettingsDialog method. <br>The configurable parameters appear following. The sample transport also <br>defines a property tag for each parameter so that parameters may be set <br>programmatically through ServiceEntry calls; see the SMPXP.H header file. <br> <br>General Page <br>------------ <br> <br>Log Events. If this check box is selected, the transport logs events to the <br>log file specified on the Logging page. Otherwise, logging is disabled. <br> <br>Peer to Peer Enabled. If this check box is selected, the transport attempts <br>to deliver outbound messages to the directory specified by the e-mail address. <br>Otherwise, outbound messages are simply placed in the user's own outbound <br>directory. <br> <br>Logon UI Always. If this check box is selected, the transport always brings <br>up this dialog box the first time you log on. If Save Dialog Settings is also <br>selected, the dialog box comes up filled with the previously entered <br>information. If Logon UI Always is not selected, no dialog box appears at <br>logon, and the transport uses saved settings instead. <br> <br>Save Dialog Settings. If checked, the transport saves the contents of the <br>dialog box in your MAPI profile. Otherwise, the dialog box contents are used <br>until you log off from MAPI and then discarded. <br> <br>WGAP Filename. This edit control contains a name which could be used by an <br>application to designate resources owned by this user of the peer-to-peer <br>transport. No known application uses it. <br> <br>WGAP Directory. This edit control contains the path to a directory which <br>could be used by an application to store files owned by this user of the <br>peer-to-peer transport. No known application uses it. <br> <br>Peer to Peer Page <br>----------------- <br> <br>Display Name. This edit control contains the user's full name. This item <br>appears in the From field of any messages sent using the peer-to-peer transport. <br> <br>E-mail Type. This edit control contains the type component of the user's e-mail <br>address. Users who intend to exchange messages with the peer-to-peer transport <br>should agree on a common value for this item. MSPEER, which is supported by the <br>the sample address book, is a common choice. <br> <br>E-mail Address. This edit control contains a network path, preferably a UNC <br>path, to the user's inbound directory. This item is the return address in <br>messages sent from this session. <br> <br>Inbound Msg Dir. This edit control contains a path, preferably a local path, <br>to the user's inbound directory. This item does not appear in messages; the <br>transport simply uses it as a location to poll for inbound messages. <br> <br>Outbound Msg Dir. This edit control contains a path, preferably a local path, <br>to the user's outbound directory. <br> <br>Logging Page <br>------------ <br> <br>Logfile Name. This edit control contains a path to the text file the transport <br>uses for event logging. If Log Events is checked on the General page, the <br>transport writes a line of text to this file for each event. <br> <br>Log High Water Mark. This edit control contains the maximum size of the log <br>file, in kilobytes. If the log file grows beyond this size, it is truncated. <br> <br>Log Low Water Mark. This edit control contains the size in kilobytes to which <br>the log file is truncated when it grows beyond the high-water mark. <br> <br>Known Problems <br>-------------- <br> <br>Self-relative UNC paths on Windows for Workgroups. If the user's inbound <br>directory is shared from the workstation using Windows for Workgroups and the <br>e-mail address is a UNC path, sending messages to oneself from this <br>workstation might not work. <br> <br>Installation <br>------------ <br> <br>To install the sample transport you have to <br> <br>1. Merge the file smpxp.inf with the mapisvc.inf located in your windows <br>   system directory. You can do this using the mergeini utility that comes <br>   with the MAPI SDK. The syntax is "mergeini -m smpxp.inf". <br> <br>2. Copy smpxp(32).dll to the windows system directory. <br> <br>3. Add the sample transport to any MAPI profile using the Mail and Fax <br>   control panel applet. </code></pre>
<p>&nbsp;</p></body>
</HTML>

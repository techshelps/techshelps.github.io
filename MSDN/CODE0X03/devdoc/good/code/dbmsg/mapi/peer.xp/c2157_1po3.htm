<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XPTXTMSG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2163"></a>XPTXTMSG.H</h2>
<pre><code>/* <br> -  X P T X T M S G . H <br> - <br> *  Purpose: <br> *      Support for the textized TNEF encapsulated message transport. <br> *       <br> *  Copyright 1992-1995 Microsoft Corporation.  All Rights Reserved. <br> */ <br>  <br>/* Stuff to support the textized message formating */ <br> <br>enum  <br>{ <br>    tagMessage,  <br>    tagFrom, <br>    tagRepresenting, <br>    tagReplyTo, <br>    tagDate, <br>    tagTo, <br>    tagCc, <br>    tagBcc, <br>    tagSubject, <br>    tagPrioUrgent, <br>    tagPrioNormal, <br>    tagPrioLow, <br>    tagContents, <br>    tagTextItem, <br>    tagFileItem, <br>    NUM_TAGS         <br>}; <br> <br> <br>#define MAX_TAG_LEN         32 <br>#define MAX_TXTMSG_PROPS    17 <br>#define MAX_STRM_BUF        256 <br>#define MAX_LINE            256 <br> <br>/* Macro to DebugTrace failures from a Read/Write calls */ <br> <br>#define TraceFailedRead(_a, _b) \ <br>    hr = (_a); \ <br>    if(HR_FAILED(hr)) \ <br>    { \ <br>        DebugTraceResult(Read(), hr); \ <br>        goto _b; \ <br>    } <br> <br>#define TraceFailedWrite(_a, _b) \ <br>    hr = (_a); \ <br>    if(HR_FAILED(hr)) \ <br>    { \ <br>        DebugTraceResult(Write(), hr); \ <br>        goto _b; \ <br>    } <br>     <br> <br>/* All extern variables are declared in xpqueue.c  */ <br> <br>extern TCHAR rgszTags[NUM_TAGS][MAX_TAG_LEN]; <br>extern TCHAR szCRLF[3]; <br>extern TCHAR szCRLFCRLF[5]; <br> <br> <br>/* Function Prototypes */ <br> <br>HRESULT HrGetLine(LPSTREAM lpSof, ULONG cbDest, LPTSTR lpsz, ULONG *pcbRead); <br>HRESULT HrBuildSenderProps(LPXPL lpxpl, LPSPropValue lpPropArray, ULONG ulTag,  <br>        LPTSTR lpszToken, LPTSTR lpszAddrType, LPMESSAGE lpMessage,  <br>        ULONG * lpcValues, LPSPropValue lpMsgProps); <br>HRESULT HrGetStreamedProp(LPXPL lpxpl, LPSTREAM lpSof, LPMESSAGE lpMsg,  <br>        ULONG ulPropTag, ULONG * lpcValues, LPSPropValue lpMsgProps,  <br>        LPTSTR lpszLine, ULONG * lpulTag, LPTSTR * lppszToken); <br>HRESULT HrAddRecipToAdrList(LPXPL lpxpl, LONG lRecipType,  <br>        LPTSTR lpszNameAddr, LPTSTR lpszAddrType, LPMYADRLIST lpMyAdrList); <br>HRESULT HrAddRecipToReplyList(LPXPL lpxpl, LPTSTR lpszToken, LPTSTR lpszAddrType, <br>        LPTSTR *lppszNames, ULONG *lpcbEIDList, LPFLATENTRYLIST *lppEIDList); <br>HRESULT HrCrackSenderEID(LPXPL lpxpl, ULONG cb, LPBYTE lpb, LPTSTR lpsz);        <br>HRESULT HrMakeSearchKey(LPXPL lpxpl, LPVOID lpParent, LPTSTR lpszAddrType,  <br>        LPTSTR lpszAddress, ULONG *lpcbSK, LPBYTE *lppSK);   <br>BOOL    FGetTagAndToken(LPTSTR lpsz, ULONG *pulTag, LPTSTR *lppszToken); <br>void    FileTimeFromSzTime(LPTSTR lpszTime, FILETIME *pft); <br> <br>HRESULT HrPrepareRecipientTable(LPSPropValue, LPMESSAGE, LPMAPITABLE *); <br>BOOL    FPropIndex(LPSPropValue, ULONG, ULONG, ULONG *); <br>void    FormatFileTime(FILETIME *, LPTSTR); <br> <br>HRESULT HrIMsgToTextMsg(LPXPL lpxpl, LPSPropValue lpPropArray, LPMESSAGE lpMessage, LPSTREAM lpSof); <br>HRESULT HrIMsgFromTextMsg(LPXPL lpxpl, LPSPropValue lpPropArray, LPMESSAGE lpMessage, LPSTREAM lpSof); <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

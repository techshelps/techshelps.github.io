<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XPBASE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2144"></a>XPBASE.H</h2>
<pre><code>/* <br> -  X P B A S E . H <br> - <br> * <br> *  Definitions, typedefs and prototypes used by the Sample Transport <br> *  Provider modules. <br> * <br> *  Copyright 1992-1995 Microsoft Corporation.  All Rights Reserved. <br> */ <br> <br>/* Make sure that we are thinking "C" here... */ <br>#ifdef __cplusplus <br>extern "C" <br>{ <br>#endif <br> <br> <br>/* <br> *  Linked-List of deferred messages <br> */ <br> <br>typedef struct _DEFMSG *LPDEFMSG; <br> <br>typedef struct _DEFMSG <br>{ <br>    ULONG ulMsgRef; <br>    SBinary sbinEIDDef; <br>    LPDEFMSG lpNext; <br> <br>} DEFMSG; <br> <br>/* <br> *  Sample Transport Provider DLL exported entry points. <br> */ <br> <br>/* Transport Init Object */ <br> <br>#undef  INTERFACE <br>#define INTERFACE struct _XPP <br> <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_DECLARE(type, method, XPP_) <br>        MAPI_IUNKNOWN_METHODS(IMPL) <br>        MAPI_IXPPROVIDER_METHODS(IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   STDMETHOD_(type, method) <br> <br>DECLARE_MAPI_INTERFACE(XPP_) <br>{ <br>    MAPI_IUNKNOWN_METHODS(IMPL) <br>    MAPI_IXPPROVIDER_METHODS(IMPL) <br>}; <br> <br>typedef struct _XPP { <br>    XPP_Vtbl FAR *      lpVtbl;         /* Methods                          */ <br>    LONG                lcInit;         /* Usage Count                      */ <br>    struct _XPP FAR *   lpxppMyAddress; /* Pointer to myself, for validation*/ <br>    CRITICAL_SECTION    csTransport;    /* Critical section for this object */ <br>    struct _XPL FAR *   XPSessionList;  /* List of logon sessions on obj    */ <br>    BOOL                fInited;        /* Are we in an inited state?       */ <br>    HINSTANCE           hInst;          /* Instance of our library          */ <br>    LPMALLOC            lpMalloc;       /* IMalloc object                   */ <br>    LPFREEBUFFER        lpFreeBuffer;   /* Need this to free the object     */ <br>} XPP, FAR *LPXPP; <br> <br>/* Transport Logon Object */ <br> <br>#undef  INTERFACE <br>#define INTERFACE struct _XPL <br> <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_DECLARE(type, method, XPL_) <br>        MAPI_IUNKNOWN_METHODS(IMPL) <br>        MAPI_IXPLOGON_METHODS(IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   STDMETHOD_(type, method) <br> <br>DECLARE_MAPI_INTERFACE(XPL_) <br>{ <br>    MAPI_IUNKNOWN_METHODS(IMPL) <br>    MAPI_IXPLOGON_METHODS(IMPL) <br>}; <br> <br>/* <br> *  Logon object structure. <br> */ <br> <br>typedef struct _XPL <br>{ <br>    XPL_Vtbl FAR *      lpVtbl;             /* Methods                                  */ <br>    LONG                lcInit;             /* Usage Count                              */ <br>    struct _XPL FAR *   lpNextSession;      /* Link to next session                 */ <br>    struct _XPL FAR *   lpMySession;        /* My address, used to validate         */ <br>    LPXPP               lpxppParent;        /* Parent XPP object                        */ <br>    LPMAPISTATUS        lpXPStatus;         /* Child Status Object                      */ <br>    ULONG               ulSessionFlags;     /* Session flags                            */ <br>    LPMAPISUP           lpMAPISup;          /* Support object for this session          */ <br>    LPALLOCATEBUFFER    AllocateBuffer;     /* MAPIAllocateBuffer pointer           */ <br>    LPALLOCATEMORE      AllocateMore;       /* MAPIAllocateMore pointer             */ <br>    LPFREEBUFFER        FreeBuffer;         /* MAPIFreeBuffer function pointer          */ <br>    ULONG               cLogonPropValues;   /* Number of Logon property values          */ <br>    LPSPropValue        lpPropArray;        /* Logon property array                     */ <br>    LPSPropValue        lpMyIDArray;        /* Properties to set on transmit            */ <br>    ULONG               cOptData;           /* Number of Options we support             */ <br>    LPOPTIONDATA        lpOptData;          /* Per-Message &amp; Recip OptionData           */ <br>    LPTSTR              lpszAdrType;        /* Used to pass back on AddressType call    */ <br>    ULONG               ulTransportStatus;  /* Howzit going? Used by status             */ <br>    ULONG               ulResourceMethods;  /* Methods supported by our status object   */ <br>     <br>    /* Deferred message handling elements */ <br>    ULONG               ulDeferredMsgRef; <br>    BOOL                fResendDeferred; <br>    LPDEFMSG            lpDeferredList; <br>     <br>    BOOL                fRefSupport;        /* We AddRef'd the support object */ <br>    BOOL                fFoundInMessage;    /* Found a inbound message flag   */ <br>    HANDLE              hInFindHandle;      /* Used in Poll(), StartMessage() */ <br>    WIN32_FIND_DATA     wfdInFindData;      /* Used in Poll(), StartMessage() */ <br>    HANDLE              hOutFindHandle;     /* Used in Outbound Queue         */ <br>    WIN32_FIND_DATA     wfdOutFindData;     /* Used in Outbound Queue         */ <br>} XPL, FAR *LPXPL; <br> <br>/* <br> *  Properties we store in the Profile. <br> * <br> * NOTE!!! THE ORDERING OF THE PROPERTY ID'S HERE MUST BE THE SAME <br> * AS THE ORDERING OF PROP TAG ARRAY sptLogonArray IN SMPLXPT.C, WITH <br> * SEQUENTIAL NUMBERING!!!! <br> * <br> */ <br> <br>#define BASE_PROVIDER_ID    0x6600  /* From MAPITAGS.H comments */ <br>#define BASE_MSG_OPT_ID     0x4000  /* From MAPITAGS.H comments */ <br>#define BASE_RECIP_OPT_ID   0x5800  /* From MAPITAGS.H comments */ <br> <br>/* Display name of user. Optional property. If not present we will use <br>   the email address as the display name -- ugly but effective.            */ <br> <br>#define PR_SAMPLE_DISPLAY_NAME      PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0001)) <br> <br>/* Address type of sample transport. This will be used to construct inbound <br>   and outbound addresses where needed. It also will be used to tell the <br>   Spooler what address types we should get.                               */ <br> <br>#define PR_SAMPLE_EMAIL_ADDR_TYPE   PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0002)) <br> <br>/* Email address. This will usually be the same as the inbound directory, <br>   although this may tend to have a more canonical form for remote access. */ <br> <br>#define PR_SAMPLE_EMAIL_ADDRESS     PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0003)) <br> <br>/* Inbound directory. This is where the transport will look in order to <br>   determine whether it has received any mail.                             */ <br> <br>#define PR_SAMPLE_INBOUND_DIR       PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0004)) <br> <br>/* Outbound directory. The transport will store its message files here <br>   while it is in the process of sending them. The presence of a file <br>   in this directory implies that the transport still has work to do.      */ <br> <br>#define PR_SAMPLE_OUTBOUND_DIR      PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0005)) <br> <br>/* Filename. This is an 8-character root for use by mail-enabled or <br>   workgroup applications to build a complete file specification (by <br>   adding an extension) for data they wish to store for this user.         */ <br> <br>#define PR_SAMPLE_FILENAME          PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0006)) <br> <br>/* Directory. This is a directory in which workgroup applications may <br>   wish to store their files pertaining to this user.                      */ <br> <br>#define PR_SAMPLE_DIRECTORY         PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0007)) <br> <br>/* Flags. Contain various options for this transport provider.             */ <br> <br>#define PR_SAMPLE_FLAGS             PROP_TAG (PT_LONG,      (BASE_PROVIDER_ID + 0x0008)) <br> <br>#define PR_SAMPLE_FLAG_PEER_TO_PEER ((ULONG) 0x00000001) <br>#define PR_SAMPLE_FLAG_UI_ALWAYS    ((ULONG) 0x00000002) <br>#define PR_SAMPLE_FLAG_LOG_EVENTS   ((ULONG) 0x00000004) <br>#define PR_SAMPLE_FLAG_SAVE_DATA    ((ULONG) 0x00000008) <br> <br>/* Logfile. This is where logging information will be written. If this <br>   property is not present, we will use (PR_SAMPLE_FILENAME)".LOG"         */ <br> <br>#define PR_SAMPLE_LOGFILE           PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0009)) <br> <br>/* Logfile high water mark. This is the point at which the log writer will <br>   truncate the logfile so as not to fill up the disk.                     */ <br> <br>#define PR_SAMPLE_LOGHIGHWATER      PROP_TAG (PT_LONG,      (BASE_PROVIDER_ID + 0x000A)) <br> <br>/* Logfile low water mark. This is the approximate size that the logfile <br>   writer will truncate the logfile to (modulo a line ending).             */ <br> <br>#define PR_SAMPLE_LOGLOWWATER       PROP_TAG (PT_LONG,      (BASE_PROVIDER_ID + 0x000B)) <br> <br>/* The following property tags are temporaries. They are here because <br>   the configuration property sheets want one property tag for every <br>   control; after we run the dialogs, we roll them back up into <br>   PR_SAMPLE_FLAGS.                                                        */ <br> <br>#define PR_TEMP_PEER_TO_PEER        PROP_TAG (PT_BOOLEAN,   (BASE_PROVIDER_ID + 0x000C)) <br>#define PR_TEMP_UI_ALWAYS           PROP_TAG (PT_BOOLEAN,   (BASE_PROVIDER_ID + 0x000D)) <br>#define PR_TEMP_LOG_EVENTS          PROP_TAG (PT_BOOLEAN,   (BASE_PROVIDER_ID + 0x000E)) <br>#define PR_TEMP_SAVE_DATA           PROP_TAG (PT_BOOLEAN,   (BASE_PROVIDER_ID + 0x000F)) <br> <br>#define PR_TEMP_LOGHIGHWATER        PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0010)) <br>#define PR_TEMP_LOGLOWWATER         PROP_TAG (PT_TSTRING,   (BASE_PROVIDER_ID + 0x0011)) <br> <br>/* This property is a per-message option.  If TRUE, the message will be <br>   deferred until the next message comes along that is not to be deferred. <br>   At that point, the Transport will SpoolerNotify() to have all currently <br>   deferred messages submitted to it for sending.                           */ <br> <br>#define PR_SAMPLE_PER_MSG_DEFER     PROP_TAG (PT_BOOLEAN,   (BASE_MSG_OPT_ID + 0x0001)) <br> <br>/* This property is a per-recipient option.  If TRUE, the message will be <br>   deferred until the next message comes along that is not to be deferred. <br>   At that point, the Transport will SpoolerNotify() to have all currently <br>   deferred messages submitted to it for sending.  This property is ignored <br>   if PR_SAMPLE_PER_MSG_DEFER is set. <br> <br>   This property is also used as a flag on the message that says - we've seen <br>   this message before and have deferred it due to some recipients with their <br>   property PR_SAMPLE_PER_RECIP_DEFER flag set.  When we run across this, we'll <br>   delete it from the message and send to the remaining recipients that <br>   have not been handled.                                                  */ <br> <br>#define PR_SAMPLE_PER_RECIP_DEFER   PROP_TAG (PT_BOOLEAN,   (BASE_RECIP_OPT_ID + 0x0001)) <br> <br>/* The following is used to access the properties in the logon array.      */ <br> <br>#define MAX_LOGON_PROPERTIES        17 <br>#define TEMP_LOGON_PROPERTIES       6 <br>#define ArrayIndex(PROP, ARRAY) (ARRAY)[(PROP_ID(PROP) - BASE_PROVIDER_ID - 1)] <br>#define NUM_SENDER_PROPS            3   /* How many sender ID properties?  */ <br> <br> <br>/* Display name for my transport. Used for the status row. */ <br> <br>#ifdef DEBUG <br>#define MYDISPLAYNAME "Sample Transport Provider (Debug)" <br>#elif defined (TEST) <br>#define MYDISPLAYNAME "Sample Transport Provider (Test)" <br>#else <br>#define MYDISPLAYNAME "Sample Transport Provider" <br>#endif <br> <br>/* Common global data/code. */ <br> <br>BOOL    FIsValidSession(LPXPL); <br>SCODE   ScCheckLogonProps(LPXPDLG lpXPDialog, BOOL fUIAllowed); <br>HRESULT MapScodeSz(SCODE sc, LPXPL lpxpl, LPTSTR * lppszMessage); <br>HRESULT HrCheckSpoolerYield(LPMAPISUP lpMAPISup, BOOL fReset); <br>SCODE   ScCopySessionProps(LPXPL lpxpl, LPSPropValue FAR *lppPropArray, LPSPropValue FAR *lppMyIDArray); <br> <br>#ifdef __cplusplus <br>} <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2057"></a>README.TXT</h2>
<pre><code>Custom Command Extentions <br> <br> <br>SUMMARY <br>======= <br> <br>The Command.Ext sample demonstrates how to implement custom command extensions <br>for the Microsoft Exchange Client. In particular, it demonstrates: <br> <br>  - adding a menu command <br>  - adding a toolbar button <br>  - disabling/enabling the menu item and toolbar item depending what object <br>    is selected in the viewer <br>  - making MAPI calls from an extension <br>  - extending a command in the Main Viewer and the Search Viewer dialog <br>  - F1 response for context help on the menu item <br>  - Implementing custom Tooltip and Status Bar text <br> <br>The custom command displays the number of subfolders, read messages, and <br>unread messages in a selected folder. <br> <br>MORE INFORMATION <br>================ <br> <br>This sample requires Microsoft Windows NT 3.51 or Windows 95, the MAPI 1.0 <br>PDK, Microsoft Visual C++ version 2.0 (or later), and the Win32 SDK. <br> <br> <br>To configure Microsoft Exchange to use the client extension, place the <br>following REG_SZ entry in the system registry in <br>HKEY_LOCAL_MACHINE\Software\Microsoft\Exchange\Client\Extensions: <br> <br>    Sample Command Extension=4.0;c:\&lt;path&gt;\CMDEXT32.dll;1;01010000000000 <br> <br>You can leave out an explicit path to CMDEXT32.DLL if it resides in a <br>directory listed in the system PATH. <br> <br>Exchange client extensions are designed using OLE's Component Object Model. <br>The client calls methods which are provided in the extension. In some <br>calls to the extension interface, a pointer to a callback interface <br>(IExchExtCallback) for the extension to call back into the Exchange client. <br>For more information read "Extending the Microsoft Exchange Client" in the <br>MAPI PDK documentation. <br> <br>This sample implements three interface objects: IExchExt, IExchExtCommands, <br>and IExchExtUserEvents. To extend the command set of Exchange, it is <br>necessary to provide implementations for IExchExt and IExchExtCommands. <br>It is optional to provide implementation for IExchExtUserEvents. This sample <br>implements IExchExtUserEvents to enable or disable the custom command, <br>depending on what object the user is selecting in the Exchange main viewer. <br>The menu item is always enabled in the Search Folder Dialog. <br> <br>The custom command is available in both the Main viewer and the Search <br>Folder Dialog. The IExchExtCommands provides an interface for the client to <br>display context help on the custom menu item and to display tooltip text and <br>status window text.  Select the custom menu item and press F1 to pop-up an <br>About dialog box. <br> <br>This extension works in two different contexts, main viewer and search dialog. <br>For each context an extension supports, a complete set of interface objects <br>is created. In this sample, the MyExchExt, MyExchExtCommands and <br>MyExchExtUserEvents objects are created once for the main viewer context and <br>once for the search dialog. However, because there is only one <br>implementation for all contexts, there is a context flag data member which <br>indicates which context Exchange is calling from. <br> <br>A context in many cases corresponds to a user interface. For example, the <br>search viewer is one context and the main viewer is another. QueryInterface <br>is called for each IID for each context. In this example, QueryInterface is <br>called each time for all IIDs in the main viewer context when <br>Exchange first starts. QueryInterface is called again each time for all <br>IIDs in the search viewer context. For each of the contexts, a unique pointer <br>to the MyExchExtCommands and MyExchExtUserEvents objects is returned to <br>Exchange in the QueryInterface call. Then when Exchange is calling <br>DoCommands from the search viewer, it is calling the one using the interface <br>pointer returned to it through QueryInterface in the search viewer context. <br>And when Exchange is calling DoCommands from the main viewer, it is calling <br>the one using the interface pointer returned to it through QueryInterface in <br>the main viewer context. </code></pre>
<p>&nbsp;</p></body>
</HTML>

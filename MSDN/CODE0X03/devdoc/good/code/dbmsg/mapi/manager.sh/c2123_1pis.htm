<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMHOLE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2134"></a>SMHOLE.C</h2>
<pre><code>/* <br> *  S M H O L E . C <br> * <br> *  Sample mail handling hook OLE storage support for RICHEDIT <br> *  Copyright 1992-95 Microsoft Corporation.  All Rights Reserved. <br> */ <br> <br>#include "_pch.h" <br>DEFINE_OLEGUID(IID_IRichEditOleCallback, 0x00020D03, 0, 0); <br>const REOC_Vtbl vtblREOC = <br>{ <br>    REOC_QueryInterface, <br>    REOC_AddRef, <br>    REOC_Release, <br>    REOC_GetNewStorage, <br>    REOC_GetInPlaceContext, <br>    REOC_ShowContainerUI, <br>    REOC_QueryInsertObject, <br>    REOC_DeleteObject, <br>    REOC_QueryAcceptData, <br>    REOC_ContextSensitiveHelp, <br>    REOC_GetClipboardData, <br>    REOC_GetDragDropEffect, <br>    REOC_GetContextMenu <br>}; <br> <br> <br>/* <br> *  SMH Object Methods <br> * <br> *  SMH_QueryInterface      (See OLE IUnknown object methods) <br> *  SMH_AddRef              (See OLE IUnknown object methods) <br> *  SMH_Release             (See OLE IUnknown object methods) <br> *  SMH_InboundMsgHook      Filters inbound messages <br> *  SMH_OutboundMsgHook     Filters sent mail messages <br> * <br> */ <br>STDMETHODIMP <br>REOC_QueryInterface (LPREOC lpreoc, REFIID lpiid, LPVOID FAR * lppv) <br>{ <br>    if (!memcmp (lpiid, &amp;IID_IRichEditOleCallback, sizeof(IID)) || <br>        !memcmp (lpiid, &amp;IID_IUnknown, sizeof(IID))) <br>    { <br>        *lppv = (LPVOID)lpreoc; <br>        lpreoc-&gt;lcInit++; <br>        return hrSuccess; <br>    } <br> <br>    DebugTraceSc (SMH_QueryInterface(), MAPI_E_INTERFACE_NOT_SUPPORTED); <br>    return ResultFromScode (MAPI_E_INTERFACE_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP_(ULONG) <br>REOC_AddRef (LPREOC lpreoc) <br>{ <br>    return ++lpreoc-&gt;lcInit; <br>} <br> <br>STDMETHODIMP_(ULONG) <br>REOC_Release (LPREOC lpreoc) <br>{ <br>    if (--lpreoc-&gt;lcInit) <br>        return lpreoc-&gt;lcInit; <br> <br>    UlRelease (lpreoc-&gt;lpstg); <br>    (*lpreoc-&gt;lpfnFree) (lpreoc); <br>    return 0; <br>} <br> <br>STDMETHODIMP <br>REOC_GetNewStorage (LPREOC lpreoc, LPSTORAGE FAR * lppstg) <br>{ <br>    HRESULT hr = hrSuccess; <br>    LPSTORAGE lpstg = lpreoc-&gt;lpstg; <br> <br>#ifdef  _WIN32 <br>    WCHAR rgch[MAX_PATH]; <br>    wsprintfW (rgch, L"SMHOBJ%08ld", lpreoc-&gt;cSub++); <br>#else <br>    CHAR rgch[MAX_PATH]; <br>    wsprintf (rgch, "SMHOBJ%08ld", lpreoc-&gt;cSub++); <br>#endif  // WIN16 <br> <br>    if (lpstg) <br>    { <br>        lpstg-&gt;lpVtbl-&gt;CreateStorage (lpstg, <br>                            rgch, <br>                            STGM_READWRITE | STGM_TRANSACTED | STGM_SHARE_EXCLUSIVE, <br>                            0, <br>                            0, <br>                            lppstg); <br>        if (HR_FAILED (hr)) <br>            *lppstg = NULL; <br>    } <br>    DebugTraceResult (REOC_GetNewStorage(), hr); <br>    return hr; <br>} <br> <br>STDMETHODIMP <br>REOC_GetInPlaceContext (LPREOC lpreoc, <br>   LPOLEINPLACEFRAME FAR * lppipframe, <br>   LPOLEINPLACEUIWINDOW FAR * lppipuiDoc, <br>   LPOLEINPLACEFRAMEINFO lpipfinfo) <br>{ <br>    return ResultFromScode (E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>REOC_ShowContainerUI (LPREOC lpreoc, BOOL fShow) <br>{ <br>    return ResultFromScode (E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>REOC_QueryInsertObject (LPREOC lpreoc, LPCLSID pclsid, LPSTORAGE pstg, LONG cp) <br>{ <br>    return hrSuccess; <br>} <br> <br>STDMETHODIMP <br>REOC_DeleteObject (LPREOC lpreoc, LPOLEOBJECT lpoleobj) <br>{ <br>    return hrSuccess; <br>} <br> <br>STDMETHODIMP <br>REOC_QueryAcceptData (LPREOC lpreoc, <br>    LPDATAOBJECT lpdataobj, <br>    CLIPFORMAT FAR * lpcfFormat, <br>    DWORD reco, <br>    BOOL fReally, <br>    HGLOBAL hMetaPict) <br>{ <br>    return hrSuccess; <br>} <br> <br>STDMETHODIMP <br>REOC_ContextSensitiveHelp (LPREOC lpreoc, BOOL fEnterMode) <br>{ <br>    return hrSuccess; <br>} <br> <br>STDMETHODIMP <br>REOC_GetClipboardData (LPREOC lpreoc, <br>    CHARRANGE FAR * lpchrg, <br>    DWORD reco, <br>    LPDATAOBJECT FAR * lppdataobj) <br>{ <br>    return ResultFromScode (E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>REOC_GetDragDropEffect (LPREOC lpreoc, <br>    BOOL fDrag, <br>    DWORD grfKeyState, <br>    LPDWORD lpdwEffect) <br>{ <br>    return ResultFromScode (E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>REOC_GetContextMenu (LPREOC lpreoc, <br>    WORD seltype, <br>    LPOLEOBJECT lpoleobj, <br>    CHARRANGE FAR * lpchrg, <br>    HMENU FAR * lphmenu) <br>{ <br>    if (lpreoc-&gt;lpfb &amp;&amp; (*lphmenu = CreatePopupMenu())) <br>    { <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Bullet, "Bullet Paragraph"); <br>        AppendMenu (*lphmenu, MF_SEPARATOR, 0, NULL); <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Indent, "Increase Indent"); <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Collapse, "Decrease Indent"); <br>        AppendMenu (*lphmenu, MF_SEPARATOR, 0, NULL); <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Left, "Align Left"); <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Center, "Align Center"); <br>        AppendMenu (*lphmenu, MF_ENABLED | MF_STRING, ID_Right, "Align Right"); <br>        if (lpreoc-&gt;lpfb-&gt;pf.wNumbering == PFN_BULLET) <br>            CheckMenuItem (*lphmenu, ID_Bullet, MF_BYCOMMAND | MF_CHECKED); <br>        if (lpreoc-&gt;lpfb-&gt;pf.dxStartIndent &gt; 1440) <br>            EnableMenuItem (*lphmenu, ID_Indent, MF_BYCOMMAND | MF_DISABLED | MF_GRAYED); <br>        if (!lpreoc-&gt;lpfb-&gt;pf.dxStartIndent) <br>            EnableMenuItem (*lphmenu, ID_Collapse, MF_BYCOMMAND | MF_DISABLED | MF_GRAYED); <br>        return hrSuccess; <br>    } <br>    return ResultFromScode (E_NOTIMPL); <br>} <br> <br>STDMETHODIMP_(SCODE) <br>ScNewRicheditCallback (LPFORMATBAR lpfb, <br>    LPALLOCATEBUFFER lpfnAlloc, <br>    LPALLOCATEMORE lpfnAllocMore, <br>    LPFREEBUFFER lpfnFree, <br>    LPREOC FAR * lppreoc) <br>{ <br>    SCODE sc; <br>    LPREOC lpreoc = NULL; <br> <br>    if (!FAILED (sc = (*lpfnAlloc) (sizeof(REOC), &amp;lpreoc))) <br>    { <br>        memset (lpreoc, 0, sizeof (REOC)); <br>        lpreoc-&gt;lpVtbl = (REOC_Vtbl FAR *)&amp;vtblREOC; <br>        lpreoc-&gt;lcInit = 1; <br>        lpreoc-&gt;cSub = 0; <br>        lpreoc-&gt;lpfnAlloc = lpfnAlloc; <br>        lpreoc-&gt;lpfnAllocMore = lpfnAllocMore; <br>        lpreoc-&gt;lpfnFree = lpfnFree; <br>        lpreoc-&gt;lpfb = lpfb; <br> <br>        sc = GetScode (StgCreateDocfile (NULL, <br>                                STGM_READWRITE           | <br>                                    STGM_TRANSACTED      | <br>                                    STGM_DELETEONRELEASE | <br>                                    STGM_SHARE_EXCLUSIVE, <br>                                0, <br>                                &amp;lpreoc-&gt;lpstg)); <br>        if (FAILED (sc)) <br>        { <br>            (*lpfnFree) (lpreoc); <br>            lpreoc = NULL; <br>        } <br>    } <br> <br>    *lppreoc = lpreoc; <br> <br>    DebugTraceSc (ScNewRicheditCallback(), sc); <br>    return sc; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

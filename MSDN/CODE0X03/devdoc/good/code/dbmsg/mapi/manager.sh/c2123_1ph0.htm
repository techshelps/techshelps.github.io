<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_SMH.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2124"></a>_SMH.H</h2>
<pre><code>/* <br> *  _ S M H . H <br> * <br> *  Sample mail handling hook <br> *  Copyright 1992-95 Microsoft Corporation.  All Rights Reserved. <br> */ <br> <br>/* RICHEDIT OLE callback object method definitions */ <br>/* IRichEditOleCallback Interface --------------------------------------------- */ <br> <br>#define MAPI_IRICHEDITOLECALLBACK_METHODS(IPURE)                        \ <br>    MAPIMETHOD(GetNewStorage)                                           \ <br>        (THIS_  LPSTORAGE FAR * lppstg) IPURE;                          \ <br>    MAPIMETHOD(GetInPlaceContext)                                       \ <br>        (THIS_  LPOLEINPLACEFRAME FAR * ppipframe,                      \ <br>                LPOLEINPLACEUIWINDOW FAR * ppipuiDoc,                   \ <br>                LPOLEINPLACEFRAMEINFO pipfinfo) IPURE;                  \ <br>    MAPIMETHOD(ShowContainerUI)                                         \ <br>        (THIS_  BOOL fShow) IPURE;                                      \ <br>    MAPIMETHOD(QueryInsertObject)                                       \ <br>        (THIS_  LPCLSID pclsid,                                         \ <br>                LPSTORAGE pstg,                                         \ <br>                LONG cp) IPURE;                                         \ <br>    MAPIMETHOD(DeleteObject)                                            \ <br>        (THIS_  LPOLEOBJECT poleobj) IPURE;                             \ <br>    MAPIMETHOD(QueryAcceptData)                                         \ <br>        (THIS_  LPDATAOBJECT lpdataobj,                                 \ <br>                CLIPFORMAT FAR * lpcfFormat,                            \ <br>                DWORD reco,                                             \ <br>                BOOL fReally,                                           \ <br>                HGLOBAL hMetaPict) IPURE;                               \ <br>    MAPIMETHOD(ContextSensitiveHelp)                                    \ <br>        (THIS_  BOOL fEnterMode) IPURE;                                 \ <br>    MAPIMETHOD(GetClipboardData)                                        \ <br>        (THIS_  CHARRANGE FAR * lpchrg,                                 \ <br>                DWORD reco,                                             \ <br>                LPDATAOBJECT FAR * lppdataobj);                         \ <br>    MAPIMETHOD(GetDragDropEffect)                                       \ <br>        (THIS_  BOOL fDrag,                                             \ <br>                DWORD grfKeyState,                                      \ <br>                LPDWORD pdwEffect) IPURE;                               \ <br>    MAPIMETHOD(GetContextMenu)                                          \ <br>        (THIS_  WORD seltype,                                           \ <br>                LPOLEOBJECT lpoleobj,                                   \ <br>                CHARRANGE FAR * lpchrg,                                 \ <br>                HMENU FAR * lphmenu) IPURE;                             \ <br>                                                                         <br>/* <br>/*  Object Vtable definition and declairation <br> */ <br>#undef  INTERFACE <br>#define INTERFACE struct _REOC <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_DECLARE(type, method, REOC_) <br>        MAPI_IUNKNOWN_METHODS (IMPL) <br>        MAPI_IRICHEDITOLECALLBACK_METHODS (IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_TYPEDEF(type, method, REOC_) <br>        MAPI_IUNKNOWN_METHODS (IMPL) <br>        MAPI_IRICHEDITOLECALLBACK_METHODS (IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   STDMETHOD_(type, method) <br>DECLARE_MAPI_INTERFACE (REOC_) <br>{ <br>    MAPI_IUNKNOWN_METHODS (IMPL) <br>    MAPI_IRICHEDITOLECALLBACK_METHODS (IMPL) <br>}; <br> <br> <br>/* <br> *  Object Vtable definition and declairation <br> */ <br>#undef  INTERFACE <br>#define INTERFACE struct _SMH <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_DECLARE(type, method, SMH_) <br>        MAPI_IUNKNOWN_METHODS (IMPL) <br>        MAPI_ISPOOLERHOOK_METHODS (IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   MAPIMETHOD_TYPEDEF(type, method, SMH_) <br>        MAPI_IUNKNOWN_METHODS (IMPL) <br>        MAPI_ISPOOLERHOOK_METHODS (IMPL) <br>#undef  MAPIMETHOD_ <br>#define MAPIMETHOD_(type, method)   STDMETHOD_(type, method) <br>DECLARE_MAPI_INTERFACE (SMH_) <br>{ <br>    MAPI_IUNKNOWN_METHODS (IMPL) <br>    MAPI_ISPOOLERHOOK_METHODS (IMPL) <br>}; <br> <br>/* <br> *  Misc. Defines <br> * <br> *  GROW_SIZE is the incremental amount to grow buffers that hold arrays <br> *  of structures.  This is used to reduce the number of allocations in <br> *  certain situations (ie. configuration) <br> */ <br>#define GROW_SIZE   4 <br> <br>/* <br> *  cStoMax is the maximum number of stores per profile supported by SMH. <br> *  This limit is purely an imposed limit and can be increased or <br> *  decreased with no other changes required. <br> */ <br>#define cStoMax     64 <br> <br>/* <br> *  cchNameMax is used to limit the names and values of filters. <br> */ <br>#define cchNameMax  MAX_PATH <br> <br>/* <br> *  Store table structure definitions <br> * <br> *  STOENTRY <br> *      This structure is used as a part of the STOTABLE structure. <br> *      The union component to the structure allows SMH to cast an <br> *      LPSPropValue pointer to a LPSTOENTRY where the first property <br> *      is dropped in favor of storing an LPMDB. <br> * <br> *  STO <br> *      This stucture is defined such that SMH can cast an SRow pointer <br> *      to an LPSTO.  Again, this construct is used extensively by the <br> *      STOTABLE implementation. <br> * <br> *  STOTABLE <br> *      This stucture can be mapped to an SRowSet.  The store table <br> *      implementation uses this to let MAPI allocate the memory needed <br> *      for keeping pointers to open stores. <br> */ <br>typedef struct _STOENTRY <br>{ <br>    union <br>    { <br>        LPMDB           lpmdb; <br>        SPropValue      valPad; <br>    }; <br>    SPropValue          lpProps[]; <br> <br>} STOENTRY, FAR * LPSTOENTRY; <br> <br>typedef struct _STO <br>{ <br>    ULONG               ulReserved; <br>    ULONG               cValues; <br>    union <br>    { <br>        LPSTOENTRY      lpstoe; <br>        LPSPropValue    lpProps; <br>    }; <br> <br>} STO, FAR * LPSTO; <br> <br>typedef struct _STOTABLE <br>{ <br>    ULONG               cSto; <br>    STO                 aSto[cStoMax]; <br> <br>} STOTABLE, FAR * LPSTOTABLE; <br> <br> <br>/* <br> *  Archive bucket structures definitions <br> * <br> *  DFT <br> *      The DFT structure contains two FILETIMEs that define the delta of <br> *      time supported by the archive folder. <br> * <br> *  BKIT <br> *      The BKIT structure contains all the information required to <br> *      process the archival of a message into that bucket. <br> * <br> *      The EntryID of the parent folder, the year folder, and the <br> *      monthly folder are all cashed as is the MAPIFOLDER object.  The <br> *      DFT for the year and month are cached as well. <br> */ <br>typedef struct _DFT <br>{ <br>    FILETIME            ftStart; <br>    FILETIME            ftEnd; <br> <br>} DFT, FAR * LPDFT; <br> <br>typedef struct _BKIT <br>{ <br>    ULONG               cbeid; <br>    LPENTRYID           lpeid; <br>    LPMAPIFOLDER        lpfldr; <br>    DFT                 dft; <br> <br>    ULONG               cbeidYr; <br>    LPENTRYID           lpeidYr; <br>    LPMAPIFOLDER        lpfldrYr; <br>    DFT                 dftYr; <br> <br>    ULONG               cbeidParent; <br>    LPENTRYID           lpeidParent; <br>    LPMAPIFOLDER        lpfldrParent; <br> <br>} BKIT, FAR * LPBKIT; <br> <br> <br>/* <br> *  SMH stucture definitions <br> *   <br> *  WB <br> *      The WB (wastebasket) structure contains the information <br> *      required to archive deleted mail on any given message store <br> *   <br> *  RULE <br> *      The RULE structure contains the information required to filter an <br> *      inbound message into the desired target folder <br> *   <br> *  OOF <br> *      The OOF structure contains the information required to generate <br> *      out-of-office responses to incoming messages <br> *   <br> *  SMH <br> *      The SMH object is supports the ISpoolerHook interface and is the <br> *      object handed to mapi to facilitate all message filtering. <br> *   <br> */ <br>typedef struct _WB <br>{ <br>    struct _WB FAR *    wbNext;         /* next pointer */ <br>    struct _SMH FAR *   lpsmh;          /* owning SMH object */ <br> <br>    LPMDB               lpmdb;          /* MDB on which this WB applies */ <br>    LPMAPITABLE         lptbl;          /* contents table of the wastebasket */ <br>    LPMAPIFOLDER        lpfldr;         /* folder object of the wastebasket */ <br>    LPSPropValue        lpvalEid;       /* entryid of the wastebasket */ <br>    ULONG               ulAdvz;         /* connection ID returned from Advise() */ <br>    BKIT                bkit;           /* bucket cache for this WB */ <br>    HANDLE              ht;             /* filtering thread */ <br>    BOOL                fBail;          /* bailout flag */ <br> <br>} WB, FAR * LPWB; <br> <br>typedef struct _RULE <br>{ <br>    struct _RULE FAR *  rlNext;         /* next pointer */ <br> <br>    MAPIUID             muid;           /* profile section UID */ <br>    UINT                rlTyp;          /* rule type */ <br>    ULONG               ulFlags;        /* rule attributes */ <br>    SRestriction FAR *  lpres;          /* recipient rule restriction */ <br>    LPTSTR              lpszData;       /* value to filter against */ <br>    LPTSTR              rgszSnd[3];     /* sound to play */ <br>    LPMDB               lpmdb;          /* MDB owning the target folder */ <br>    LPMAPIFOLDER        lpfldr;         /* target folder for filter */ <br>    LPSPropValue        lpvalEid;       /* entryid of target folder */ <br>    LPTSTR              lpszAnno;       /* auto-response annotation */ <br>    LPBYTE              lpbRTF;         /* auto-response RTF */ <br>    ULONG               cbRTF;          /* auto-response RTF size */ <br>    ULONG               cvalRecip;      /* auto-response recip prop count */ <br>    LPSPropValue        lpvalRecip;     /* auto-response recip */ <br>    BKIT                bkit;           /* bucket cache for rule */ <br> <br>} RULE, FAR * LPRULE; <br> <br>typedef struct _OOF <br>{ <br>    LPTABLEDATA         lptad;          /* Table data object */ <br>    LPMAPITABLE         lptbl;          /* Table data view */ <br>    ULONG               cRecips;        /* Count of recips */ <br>    LPTSTR              lpszBody;       /* Oof Body Text */ <br>    LPBYTE              lpbRTF;         /* Body RTF */ <br>    ULONG               cbRTF;          /* RTF size */ <br> <br>} OOF, FAR * LPOOF; <br> <br>typedef struct _SMH <br>{ <br>    SMH_Vtbl FAR *      lpVtbl; <br>    ULONG               lcInit;         /* object refcount */ <br>    HINSTANCE           hinst;          /* DLL instance */ <br>    HANDLE              hevtCfg;        /* configuration event */ <br> <br>    LPMAPISESSION       lpsess;         /* client session */ <br>    LPALLOCATEBUFFER    lpfnAlloc;      /* MAPIAllocateBuffer */ <br>    LPALLOCATEMORE      lpfnAllocMore;  /* MAPIAllocateMore */ <br>    LPFREEBUFFER        lpfnFree;       /* MAPIFreeBuffer */ <br>    MAPIUID             muid;           /* hook provider section UID */ <br> <br>    unsigned int        fCatSm:1;       /* options flags */ <br>    unsigned int        fCatSmByYr:1; <br>    unsigned int        fCatWb:1; <br>    unsigned int        fOof:1; <br>    unsigned int        fAtp:1; <br>    LPSTOTABLE          lpstotbl;       /* store table */ <br>    SPropValue          valEx;          /* msg class exclustions */ <br>    LPWB                lstWb;          /* list pointer of WBs */ <br>    LPRULE              lstRl;          /* list pointer of rules */ <br>    BKIT                bkitSm;         /* bucket cache for sent mail */ <br>    OOF                 oof;            /* OOF information */ <br> <br>} SMH, FAR * LPSMH; <br> <br>/* <br> *  Configuration dialog structure definition <br> *   <br> *  REOC <br> *      The Richedit OLE Callback structure refers to an object that is <br> *      used by the configuration dialogs that support RTF edit controls <br> *   <br> *  SCD (SMH Configuration Dialog) <br> *      The SMH Configuration Dialog structure is used to pass <br> *      important information in and out of the configuration dialogs <br> *      and property sheets. <br> */ <br>typedef struct _SCD <br>{ <br>    HINSTANCE           hinst;          /* DLL instance */ <br>    HWND                hwnd;           /* parent window */ <br> <br>    LPALLOCATEBUFFER    lpfnAlloc;      /* MAPIAllocateBuffer */ <br>    LPALLOCATEMORE      lpfnAllocMore;  /* MAPIAllocateMore */ <br>    LPFREEBUFFER        lpfnFree;       /* MAPIFreeBuffer */ <br>    LPMALLOC            lpmalloc;       /* pointer to LPMALLOC obj */ <br>    LPMAPISUP           lpsup;          /* pointer to support obj */ <br>    LPPROVIDERADMIN     lpadmin;        /* pointer to profile admin obj */ <br>    LPPROFSECT          lpsec;          /* profile section obj */ <br> <br>    LPMAPISESSION       lpsess;         /* session pointer used in filters */ <br> <br>    TCHAR               rgch[cchNameMax]; <br>    LPSPropValue        lpval;          /* current set of property values */ <br> <br>    UINT                crl;            /* count of current rules */ <br>    UINT                crlMax;         /* count of maximum rules */ <br>    LPTSTR FAR *        lppsz;          /* pointer to array of names */ <br>    LPSBinary           lpbin;          /* pointer to array of muids */ <br> <br>    ULONG               ulFlags;        /* configuration flags */ <br>    SCODE               sc;             /* dialog failure error code */ <br> <br>} SCD, FAR * LPSCD; <br> <br>typedef struct _FORMATBAR <br>{ <br>    LPSCD               lpscd;          /* owning config dialog */ <br>    CHARFORMAT          cf;             /* character format */ <br>    HBRUSH              hbrBtnFace;     /* button face color brush */ <br>    HDC                 hdc;            /* device context */ <br>    HMENU               hmnuColor;      /* color picker menu */ <br>    HWND                hwndEdit;       /* associated edit control */ <br>    HWND                hwndFont;       /* font name combo */ <br>    HWND                hwndFrame;      /* toolbar HWND */ <br>    HWND                hwndSize;       /* font size combo */ <br>    HWND                hwndTb;         /* toolbar */ <br>    HANDLE              hfnt;           /* toolbar font */ <br>    PARAFORMAT          pf;             /* paragraph format */ <br>    UINT                cSize;          /* font entry count */ <br>    WNDPROC             lpfnToolbar;    /* subclassed toolbar proc */ <br>    struct _REOC FAR *  lpreoc;         /* richedit ole callback */ <br> <br>} FORMATBAR, FAR * LPFORMATBAR; <br> <br>typedef struct _REOC <br>{ <br>    REOC_Vtbl FAR *     lpVtbl; <br>    ULONG               lcInit;         /* object refcount */ <br>    LPSTORAGE           lpstg;          /* root storage obj */ <br>    UINT                cSub;           /* count of sub obj's */ <br>    LPALLOCATEBUFFER    lpfnAlloc;      /* MAPIAllocateBuffer */ <br>    LPALLOCATEMORE      lpfnAllocMore;  /* MAPIAllocateMore */ <br>    LPFREEBUFFER        lpfnFree;       /* MAPIFreeBuffer */ <br>    LPFORMATBAR         lpfb;           /* formatting bar */ <br> <br>} REOC, FAR * LPREOC; <br> <br>typedef struct _RTFS <br>{ <br>    LPALLOCATEBUFFER    lpfnAlloc;      /* MAPIAllocateBuffer */ <br>    LPFREEBUFFER        lpfnFree;       /* MAPIFreeBuffer */ <br>    LPBYTE              lpb;            /* stream data */ <br>    LONG                cb;             /* stream data size */ <br>    LONG                cbMax;          /* max stream size */ <br>     <br>} RTFS, FAR * LPRTFS; <br> <br>/* <br> *  SMH proptags <br> */ <br>#define PR_SMH_FLAGS                    PROP_TAG(PT_LONG,       0x6600) <br>#define PR_SMH_RULES                    PROP_TAG(PT_MV_BINARY,  0x6601) <br>#define PR_SMH_EXCLUSIONS               PROP_TAG(PT_MV_TSTRING, 0x6602) <br>#define PR_SMH_EXCLUSIONS_A             PROP_TAG(PT_MV_STRING8, 0x6602) <br>#define PR_SMH_EXCLUSIONS_W             PROP_TAG(PT_MV_UNICODE, 0x6602) <br>#define PR_SMH_RULE_NAMES               PROP_TAG(PT_MV_TSTRING, 0x6603) <br>#define PR_SMH_RULE_NAMES_A             PROP_TAG(PT_MV_STRING8, 0x6603) <br>#define PR_SMH_RULE_NAMES_W             PROP_TAG(PT_MV_UNICODE, 0x6603) <br>#define PR_SMH_OOF_ENABLED              PROP_TAG(PT_BOOLEAN,    0x6604) <br>#define PR_SMH_OOF_TEXT                 PROP_TAG(PT_TSTRING,    0x6605) <br>#define PR_SMH_OOF_TEXT_A               PROP_TAG(PT_STRING8,    0x6605) <br>#define PR_SMH_OOF_TEXT_W               PROP_TAG(PT_UNICODE,    0x6605) <br>#define PR_SMH_OOF_RTF                  PROP_TAG(PT_BINARY,     0x6606) <br>#define PR_SMH_SOUND_SCHEMES            PROP_TAG(PT_MV_BINARY,  0x6607) <br>#define PR_SMH_REPFWD_SCHEMES           PROP_TAG(PT_MV_BINARY,  0x6608) <br> <br>/* <br> *  Value for PR_SMH_VERSION <br> */ <br>#define MAKE_SMH_VERSION(_mj,_mn)       (((ULONG)(0x0000FFFF &amp; _mj) &lt;&lt; 16) | \ <br>                                            (ULONG)(0x0000FFFF &amp; _mn)) <br>#define SMH_VERSION                     MAKE_SMH_VERSION (1,0) <br> <br>/* <br> *  Values for PR_SMH_FLAGS <br> */ <br>#define SMH_ADD_TO_PAB                  ((ULONG)0x00000001) <br>#define SMH_FILTER_DELETED              ((ULONG)0x00000010) <br>#define SMH_FILTER_DELETED_YR           ((ULONG)0x00000020) <br>#define SMH_FILTER_INBOUND              ((ULONG)0x00000100) <br>#define SMH_FILTER_SENTMAIL             ((ULONG)0x00001000) <br>#define SMH_FILTER_SENTMAIL_YR          ((ULONG)0x00002000) <br>#define SMH_UNREAD_VIEWER               ((ULONG)0x00010000) <br> <br>/* <br> *  Filtering rule proptags <br> */ <br>#define PR_RULE_TYPE                    PROP_TAG(PT_LONG,       0x6610) <br>#define PR_RULE_DATA                    PROP_TAG(PT_BINARY,     0x6611) <br>#define PR_RULE_FLAGS                   PROP_TAG(PT_LONG,       0x6612) <br>#define PR_RULE_TARGET_ENTRYID          PROP_TAG(PT_BINARY,     0x6613) <br>#define PR_RULE_TARGET_PATH             PROP_TAG(PT_TSTRING,    0x6614) <br>#define PR_RULE_TARGET_PATH_A           PROP_TAG(PT_STRING8,    0x6614) <br>#define PR_RULE_TARGET_PATH_W           PROP_TAG(PT_UNICODE,    0x6614) <br>#define PR_RULE_STORE_ENTRYID           PROP_TAG(PT_BINARY,     0x6615) <br>#define PR_RULE_STORE_DISPLAY_NAME      PROP_TAG(PT_TSTRING,    0x6616) <br>#define PR_RULE_STORE_DISPLAY_NAME_A    PROP_TAG(PT_STRING8,    0x6616) <br>#define PR_RULE_STORE_DISPLAY_NAME_W    PROP_TAG(PT_UNICODE,    0x6616) <br>#define PR_RULE_SOUND_NORMAL            PROP_TAG(PT_TSTRING,    0x6617) <br>#define PR_RULE_SOUND_NORMAL_A          PROP_TAG(PT_STRING8,    0x6617) <br>#define PR_RULE_SOUND_NORMAL_W          PROP_TAG(PT_UNICODE,    0x6617) <br>#define PR_RULE_SOUND_HIPRI             PROP_TAG(PT_TSTRING,    0x6618) <br>#define PR_RULE_SOUND_HIPRI_A           PROP_TAG(PT_STRING8,    0x6618) <br>#define PR_RULE_SOUND_HIPRI_W           PROP_TAG(PT_UNICODE,    0x6618) <br>#define PR_RULE_SOUND_LOPRI             PROP_TAG(PT_TSTRING,    0x6619) <br>#define PR_RULE_SOUND_LOPRI_A           PROP_TAG(PT_STRING8,    0x6619) <br>#define PR_RULE_SOUND_LOPRI_W           PROP_TAG(PT_UNICODE,    0x6619) <br> <br>#define PR_RULE_FORWARD_RECIP           PROP_TAG(PT_TSTRING,    0x6620) <br>#define PR_RULE_FORWARD_RECIP_A         PROP_TAG(PT_STRING8,    0x6620) <br>#define PR_RULE_FORWARD_RECIP_W         PROP_TAG(PT_UNICODE,    0x6620) <br>#define PR_RULE_FORWARD_RECIP_ENTRYID   PROP_TAG(PT_BINARY,     0x6621) <br>#define PR_RULE_REP_FWD_TEXT            PROP_TAG(PT_TSTRING,    0x6624) <br>#define PR_RULE_REP_FWD_TEXT_A          PROP_TAG(PT_STRING8,    0x6624) <br>#define PR_RULE_REP_FWD_TEXT_W          PROP_TAG(PT_UNICODE,    0x6624) <br>#define PR_RULE_REP_FWD_RTF             PROP_TAG(PT_BINARY,     0x6625) <br> <br>/* <br> *  Values for PR_RULE_TYPE <br> */ <br>#define RL_ANY_RECIP                    ((UINT)0x0001) <br>#define RL_BCC_RECIP                    ((UINT)0x0002) <br>#define RL_BODY                         ((UINT)0x0003) <br>#define RL_CC_RECIP                     ((UINT)0x0004) <br>#define RL_HAS_ATTACH                   ((UINT)0x0005) <br>#define RL_MSG_CLASS                    ((UINT)0x0006) <br>#define RL_SENDER                       ((UINT)0x0007) <br>#define RL_SUBJECT                      ((UINT)0x0008) <br>#define RL_TO_RECIP                     ((UINT)0x0009) <br>#define RL_TYPE_MAX                     ((UINT)0x0010) <br> <br>/* <br> *  Values for PR_RULE_FLAGS <br> */ <br>#define RULE_ARCHIVED                   ((ULONG)0x00000001) <br>#define RULE_ARCHIVED_BY_YEAR           ((ULONG)0x00000002) <br>#define RULE_NOT                        ((ULONG)0x00000004) <br>#define RULE_DELETE                     ((ULONG)0x00000008) <br>#define RULE_AUTO_RESPONSE              ((ULONG)0x00000010) <br>#define RULE_AUTO_REPLY                 ((ULONG)0x00000020) <br>#define RULE_AUTO_FORWARD               ((ULONG)0x00000040) <br>#define RULE_AUTO_APPEND_ORIG           ((ULONG)0x00000080) <br>#define RULE_PLAY_SOUNDS                ((ULONG)0x00000100) <br>#define RULE_NO_MOVE                    ((ULONG)0x10000000) <br>#define RULE_TERMINAL                   ((ULONG)0x80000000) <br> <br>/* <br> *  Rule configuration flags <br> */ <br>#define NEW_RULE                        ((UINT)1) <br>#define EDIT_RULE                       ((UINT)2) <br> <br>/* Logon properties */ <br> <br>enum { <br>    ipProfile, <br>    ipFlags, <br>    ipRules, <br>    ipNames, <br>    ipOof, <br>    ipOofEnabled, <br>    ipOofRtf, <br>    ipSounds, <br>    ipRepFwd, <br>    ipExc, <br>    cpMax <br>}; <br> <br>/* Rule properties */ <br> <br>enum { <br>    ipRLDisp, <br>    ipRLType, <br>    ipRLData, <br>    ipRLFlags, <br>    ipRLEid, <br>    ipRLPath, <br>    ipRLSEid, <br>    ipRLStore, <br>    ipRLLoPri, <br>    ipRLSound, <br>    ipRLHiPri, <br>    ipRLFwdRecip, <br>    ipRLFwdEid, <br>    ipRLRepFwdRTF, <br>    ipRLRepFwd, <br>    cpRLMax <br>}; <br> <br>enum { <br>    isndLo,         /*  IMPORTANCE_LOW      */ <br>    isndNorm,       /*  IMPORTANCE_NORMAL   */ <br>    isndHi,         /*  IMPORTANCE_HIGH     */ <br>    csndMax <br>}; <br> <br>/* Message properties */ <br> <br>enum { <br>    ipMsgFlgs, <br>    ipMsgSubj, <br>    ipMsgSentRep, <br>    ipMsgSentRepEA, <br>    ipPriority, <br>    cpMsgPrps <br>}; <br> <br>/* Recipient restriction enums */ <br> <br>enum {ivRecip, ivEmail, ivDispNm, cvMax }; <br>enum {iresAnd, iresRecip, iresOr, iresEmail, iresDispNm, cresMax }; <br> <br> <br>/* <br> *  Configuration dialogs <br> */ <br> <br>typedef HRESULT (STDMETHODCALLTYPE FAR * LPOPENPROFSECT) ( <br>    LPVOID              lpvOPSCtxt, <br>    LPMAPIUID           lpUID, <br>    LPCIID              lpInterface, <br>    ULONG               ulFlags, <br>    LPPROFSECT FAR *    lppProfSect); <br> <br>HRESULT <br>HrUpdateProfileFormat (LPVOID lpvOPSCtxt, <br>    LPOPENPROFSECT lpfnOpenProfSect, <br>    LPALLOCATEMORE lpfnMore, <br>    LPFREEBUFFER lpfnFree, <br>    LPSPropValue lpvalNew, <br>    LPSPropValue lpvalOld); <br> <br>extern LPVOID lpCtl3D; <br>#if 0 <br>#if !defined (_WIN95) <br>#define RegDlg3D(_inst)         Ctl3dRegister (_inst); <br>#define MakeDlg3D(_dlg)         Ctl3dSubclassDlgEx(_dlg, CTL3D_ALL) <br>#define UnregDlg3D(_inst)       Ctl3dUnregister (_inst); <br>#else <br>#define RegDlg3D(_inst) <br>#define MakeDlg3D(_dlg) <br>#define UnregDlg3D(_inst) <br>#endif <br>#endif <br> <br>#ifdef  WIN32 <br>#define FWin4Shell()    ((GetVersion() &amp; 0x000000FF) &gt;= 0x04) <br>#else <br>#define FWin4Shell()    (FALSE) <br>#endif <br> <br>#define FHandleWm(_fn,_dlg,_wm,_wp,_lp) HANDLE_WM_##_wm(_dlg,_wp,_lp,_fn##_##_wm) <br>HRESULT HrDisplayPropSheets (HINSTANCE hinst, HWND hwnd, LPSCD lpscd); <br>STDMETHODIMP_(SCODE) ScCreateToolbar (LPSCD lpscd, HWND hwnd, UINT idPeg, BOOL fPropsheet, LPFORMATBAR FAR *); <br>STDMETHODIMP_(BOOL) EXPORT FDoRTFCommand (HWND hctrl, UINT id, UINT command); <br>void UpdateFormatBar (HWND hdlg); <br> <br>SCODE ScExportFilters (LPSCD lpscd, HWND hwnd); <br>SCODE ScImportFilters (LPSCD lpscd, HWND hwnd, HWND hctrl); <br> <br>DWORD CALLBACK WriteRTFToBuffer (DWORD dwCookie, LPBYTE lpb, LONG cb, LONG FAR * lpcb); <br>DWORD CALLBACK ReadRTFFromBuffer (DWORD dwCookie, LPBYTE lpb, LONG cb, LONG FAR * lpcb); <br> <br>HRESULT HrInitOof (LPSMH lpsmh, LPSPropValue lpvalAnno, LPSPropValue lpvalRTF); <br> <br> <br>/* <br> *  Configuration Events <br> */ <br>#ifdef  _WIN32 <br>HRESULT HrGetConfigEvent (HANDLE FAR *); <br>VOID SignalConfigChanged (VOID); <br>BOOL FConfigChanged (HANDLE); <br>#endif <br> <br>/* <br> *  FLpszContainsLpsz() <br> * <br> *  Purpose: <br> * <br> *      Finds the given sub-string in the passed in string. <br> * <br> *  Arguments: <br> * <br> *      _s  source string <br> *      _p  pattern string <br> * <br> *  Returns: <br> * <br> *      FALSE iff the string was not found, TRUE otherwise. <br> */ <br>#define FLpszContainsLpsz(_s,_p) FRKFindSubpsz(_s,lstrlen(_s),_p,lstrlen(_p),FL_IGNORECASE) <br> <br> <br>/* <br> *  Message Archive Functions <br> */ <br>HRESULT <br>HrArchiveMessage (LPSMH lpsmh, <br>    LPMESSAGE lpmsg, <br>    LPMAPIFOLDER lpfldrDef, <br>    LPMDB lpmdbDef, <br>    LPBKIT lpbkit, <br>    BOOL fCatByYear, <br>    ULONG FAR * lpcbeid, <br>    LPBYTE FAR * lppeid); <br> <br>HRESULT <br>HrArchiveByDate (LPSMH lpsmh, <br>    FILETIME FAR * lpft, <br>    LPMAPIFOLDER lpfldrDef, <br>    LPMDB lpmdbDef, <br>    LPBKIT lpbkit, <br>    BOOL fCatByYear, <br>    ULONG cbeid, <br>    LPBYTE lpeid); <br> <br> <br>HRESULT HrInitDeletedMailFilter (LPSMH lpsmh); <br> <br>BOOL <br>FRKFindSubpsz (LPSTR pszTarget, <br>    ULONG cbTarget, <br>    LPSTR pszPattern, <br>    ULONG cbPattern, <br>    ULONG ulFuzzyLevel); <br> <br>/* <br> *  Stores table <br> */ <br>HRESULT HrInitStoresTable (LPSMH, LPMAPISESSION); <br>HRESULT HrOpenMdbFromEid (LPSMH, ULONG, LPENTRYID, LPMDB FAR *); <br>HRESULT HrOpenMdbFromName (LPSMH, LPTSTR, LPMDB FAR *); <br>HRESULT HrOpenStoEntry (LPMAPISESSION, LPSTO, LPMDB FAR *); <br>VOID ReleaseStoresTable (LPSMH); <br> <br> <br>/* <br> *  Automated Response Functions <br> */ <br>HRESULT HrGenerateResponse (LPSMH lpsmf, LPRULE lprl, LPMAPIFOLDER lpfldr, LPMESSAGE lpmsg); <br>VOID ReleaseOof (LPOOF lpoof); <br> <br> <br>/* <br> *  Automated PAB additions <br> */ <br>HRESULT HrAddEntriesToPab (LPSMH, LPMESSAGE); <br> <br> <br>/* <br> *  RTF\Richedit Components <br> */ <br>#ifdef  _WIN32 <br>#define RICHEDIT_LIB    "RICHED32.DLL" <br>#else <br>#define RICHEDIT_LIB    "RICHED.DLL" <br>#endif <br> <br>STDMETHODIMP_(SCODE) <br>ScNewRicheditCallback (LPFORMATBAR lpfb, <br>    LPALLOCATEBUFFER lpfnAlloc, <br>    LPALLOCATEMORE lpfnMore, <br>    LPFREEBUFFER lpfnFree, <br>    LPREOC FAR * lppreoc); <br> <br>/* <br> *  WM_NOTIFY #defines (taken from WINUSER.H) <br> */ <br>#ifdef  WIN16 <br>#define WM_NOTIFY   0x004E <br>#define HANDLE_WM_NOTIFY(hwnd,wParam,lParam,fn) (fn)((hwnd),(int)(wParam),(NMHDR FAR*)(lParam)) <br> <br>/* <br> *  Mapped bitmapi #defines (taken from COMMCTRL.H) <br> */ <br>typedef struct <br>{ <br>    COLORREF from; <br>    COLORREF to; <br>} COLORMAP, FAR * LPCOLORMAP; <br> <br>/* <br> *  Toolbar button #defines (taken from COMMCTRL.H) <br> */ <br>typedef struct _TBBUTTON { <br>    int iBitmap; <br>    int idCommand; <br>    BYTE fsState; <br>    BYTE fsStyle; <br>    BYTE bReserved[2]; <br>    DWORD dwData; <br>    int iString; <br>} TBBUTTON, NEAR* PTBBUTTON, FAR* LPTBBUTTON; <br>typedef const TBBUTTON FAR* LPCTBBUTTON; <br>#define TBSTATE_ENABLED         0x04 <br>#define TBSTYLE_BUTTON          0x00 <br>#define TBSTYLE_SEP             0x01 <br>#define TBSTYLE_CHECK           0x02 <br>#define TB_CHECKBUTTON      (WM_USER + 2) <br>#define TB_GETITEMRECT      (WM_USER + 29) <br>#define CCS_TOP         0x00000001L <br> <br>WINCOMMCTRLAPI HWND WINAPI CreateToolbarEx (HWND hwnd, DWORD ws, UINT wID, int nBitmaps, <br>    HINSTANCE hBMInst, UINT wBMID, LPCTBBUTTON lpButtons, <br>    int iNumButtons, int dxButton, int dyButton, <br>    int dxBitmap, int dyBitmap, UINT uStructSize); <br> <br>HBITMAP WINAPI CreateMappedBitmap (HINSTANCE hInstance, INT idBitmap, BOOL bDiscardable, <br>    LPCOLORMAP lpColorMap, INT iNumMaps); <br>#endif  /* WIN16 */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

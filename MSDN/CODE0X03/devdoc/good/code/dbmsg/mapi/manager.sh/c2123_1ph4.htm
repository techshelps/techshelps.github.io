<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMHATP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2128"></a>SMHATP.C</h2>
<pre><code>/* <br> *  S M H A T P . C <br> * <br> *  Automatic Additions To Personal Address Books <br> *  Copyright 1992-95 Microsoft Corporation.  All Rights Reserved. <br> */ <br> <br>#include "_pch.h" <br>#include &lt;mspab.h&gt; <br> <br>static const MAPIUID muidPAB = PAB_PROVIDER_ID; <br>static const SizedSPropTagArray (2, sptEid) = { 1, { PR_ENTRYID, PR_RECIPIENT_TYPE }}; <br> <br>HRESULT <br>HrAddEntriesToPab (LPSMH lpsmh, LPMESSAGE lpmsg) <br>{ <br>    HRESULT hr; <br>    ENTRYLIST el = {0}; <br>    LPABCONT lpPab = NULL; <br>    LPADRBOOK lpab = NULL; <br>    LPENTRYID lpeid; <br>    LPMAPITABLE lptbl = NULL; <br>    LPSPropValue lpval = NULL; <br>    LPSRowSet lprws = NULL; <br>    UINT ie; <br>    ULONG cbeid; <br>    ULONG ce = 0; <br>    ULONG cRows = 0; <br>    ULONG ulT; <br> <br>    /*  If this message is a report, we do not <br>     *  want to add the recipient to the pab <br>     */ <br>    hr = HrGetOneProp ((LPMAPIPROP)lpmsg, PR_MESSAGE_CLASS, &amp;lpval); <br>    if (!HR_FAILED (hr) &amp;&amp; FLpszContainsLpsz (lpval-&gt;Value.LPSZ, "Report")) <br>        goto ret; <br>         <br>    /*  Check to see if the installed PAB is the <br>     *  one supplied by MAPI <br>     */ <br>    hr = lpsmh-&gt;lpsess-&gt;lpVtbl-&gt;OpenAddressBook (lpsmh-&gt;lpsess, <br>                                            0, <br>                                            NULL, <br>                                            0, <br>                                            &amp;lpab); <br>    if (HR_FAILED(hr)) <br>        goto ret; <br> <br>    hr = lpab-&gt;lpVtbl-&gt;GetPAB (lpab, &amp;cbeid, &amp;lpeid); <br>    if (HR_FAILED (hr) || (0 == cbeid)) <br>        goto ret; <br>     <br>    /*  If this is not the MAPI pab, then we better <br>     *  not play with it <br>     */ <br>    if (memcmp (lpeid-&gt;ab, &amp;muidPAB, sizeof(MAPIUID))) <br>        goto ret; <br> <br>    hr = lpab-&gt;lpVtbl-&gt;OpenEntry (lpab, <br>                            cbeid, <br>                            lpeid, <br>                            NULL, <br>                            0, <br>                            &amp;ulT, <br>                            (LPUNKNOWN *) &amp;lpPab); <br>    (*lpsmh-&gt;lpfnFree) (lpeid); <br>    UlRelease (lpab); <br>    lpeid = NULL; <br>    lpab = NULL; <br>    if (HR_FAILED (hr)) <br>        goto ret; <br> <br>    /*  Get the recipient table from the message */ <br> <br>    hr = lpmsg-&gt;lpVtbl-&gt;GetRecipientTable (lpmsg, 0, &amp;lptbl); <br>    if (HR_FAILED (hr)) <br>        goto ret; <br> <br>    /*  Only get the entryIDs */ <br> <br>    hr = HrQueryAllRows (lptbl, <br>                    (LPSPropTagArray) &amp;sptEid, <br>                    NULL, <br>                    NULL, <br>                    0,    /* all rows */ <br>                    &amp;lprws); <br>    UlRelease (lptbl); <br>    lptbl = NULL; <br>    if (HR_FAILED (hr)) <br>        goto ret; <br> <br>    /*  Loop through all the recipients and remove those that <br>     *  do not belong to the MAPI PAB <br>     */ <br>    cRows = lprws-&gt;cRows; <br>    if (FAILED ((*lpsmh-&gt;lpfnAlloc) (cRows*sizeof(SBinary), &amp;el.lpbin))) <br>        goto ret; <br>     <br>    for (ce = 0, ie = 0; ie &lt; cRows; ie++) <br>    { <br>        LPSPropValue pval = lprws-&gt;aRow[ie].lpProps; <br>        Assert (pval); <br>        Assert (pval-&gt;ulPropTag == PR_ENTRYID); <br>        cbeid = pval-&gt;Value.bin.cb; <br>        lpeid = (LPENTRYID)pval-&gt;Value.bin.lpb; <br>        Assert (cbeid); <br>        Assert (lpeid); <br> <br>        /*  If this is not a P1 and not from the MAPI PAB... */ <br> <br>        if (!(pval[1].Value.l &amp; MAPI_P1) &amp;&amp; <br>            memcmp (lpeid-&gt;ab, &amp;muidPAB, sizeof(MAPIUID))) <br>        { <br>            /*  ... set it into the entry list */ <br> <br>            el.lpbin[ce].cb = cbeid; <br>            el.lpbin[ce].lpb = (LPBYTE)lpeid; <br>            ce++; <br>        } <br>    } <br> <br>    /*  Now, copy everything over into the PAB */ <br> <br>    el.cValues = ce; <br>    lpeid = NULL; <br>    cbeid = 0; <br>     <br>    (void) lpPab-&gt;lpVtbl-&gt;CopyEntries (lpPab, <br>                                &amp;el, <br>                                0, <br>                                NULL, <br>                                CREATE_CHECK_DUP_STRICT); <br> <br>ret: <br> <br>    if (lprws) <br>    { <br>        for (ie = 0; ie &lt; cRows; ie++) <br>            (*lpsmh-&gt;lpfnFree) (lprws-&gt;aRow[ie].lpProps); <br>        (*lpsmh-&gt;lpfnFree) (lprws); <br>    } <br>    (*lpsmh-&gt;lpfnFree) (el.lpbin); <br>    (*lpsmh-&gt;lpfnFree) (lpval); <br>    UlRelease (lpPab); <br>    UlRelease (lpab); <br>     <br>    DebugTraceResult (HrAddEntryiesToPab(), hr); <br>    return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMHRK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2138"></a>SMHRK.C</h2>
<pre><code>/* <br> *  S M H P S . C <br> *   <br> *  Sample mail handling sub-string search functions <br> *  Uses Rabin/Karp algorythms to find sub-strings <br> *  Copyright 1992-95 Microsoft Corporation.  All Rights Reserved. <br> */ <br> <br>#include "_pch.h" <br>#include "smhnls.h" <br> <br>#define ulPrime ((ULONG) 0x00FF00F1) <br>#define ulBase  ((ULONG) 0x00000100) <br> <br>BOOL <br>FRKFindSubpb (LPBYTE pbTarget, <br>    ULONG cbTarget, <br>    LPBYTE pbPattern, <br>    ULONG cbPattern) <br>{ <br>    UINT    i; <br>    LPBYTE  pbTargetMax = pbTarget + cbTarget; <br>    LPBYTE  pbPatternMax = pbPattern + cbPattern; <br>    ULONG   ulBaseToPowerMod = 1; <br>    ULONG   ulHashPattern = 0; <br>    ULONG   ulHashTarget = 0; <br> <br>    if (cbPattern &gt; cbTarget) <br>        return FALSE; <br> <br>    // Compute the power of the left most character in base ulBase <br>    for (i = 1; i &lt; cbPattern; i++) <br>        ulBaseToPowerMod = (ulBase * ulBaseToPowerMod) % ulPrime; <br> <br>    // Calculate the hash function for the src (and the first dst) <br>    while (pbPattern &lt; pbPatternMax) <br>    { <br>        ulHashPattern = (ulHashPattern*ulBase+*pbPattern) % ulPrime; <br>        ulHashTarget = (ulHashTarget*ulBase+*pbTarget) % ulPrime; <br>        pbPattern++; <br>        pbTarget++; <br>    } <br> <br>    // Dynamically produce hash values for the string as we go <br>    for ( ;; ) <br>    { <br>        // Remember to do the memcmp for the off-chance it doesn't work <br>        // according to probability <br>        if (    ulHashPattern == ulHashTarget <br>            &amp;&amp; !memcmp(pbPattern-cbPattern, pbTarget-cbPattern, <br>            (UINT)cbPattern)) <br>            return TRUE; <br> <br>        // Assert because this is very unprobable <br>#ifdef DEBUG <br>        if (ulHashPattern == ulHashTarget) <br>            DebugTrace("This is very unprobable!\n"); <br>#endif <br> <br>        if (pbTarget == pbTargetMax) <br>            return FALSE; <br> <br>        ulHashTarget = (ulHashTarget+ulBase*ulPrime- <br>            *(pbTarget-cbPattern)*ulBaseToPowerMod) % ulPrime; <br>        ulHashTarget = (ulHashTarget*ulBase+*pbTarget) % ulPrime; <br>        pbTarget++; <br>    } <br>} <br> <br>BOOL <br>FRKFindSubpsz (LPSTR pszTarget, <br>    ULONG cbTarget, <br>    LPSTR pszPattern, <br>    ULONG cbPattern, <br>    ULONG ulFuzzyLevel) <br>{ <br>    UINT    i; <br>    ULONG   ulBaseToPowerMod = 1; <br>    ULONG   ulHashPattern = 0; <br>    ULONG   ulHashTarget = 0; <br>    LCID    lcid = GetUserDefaultLCID(); <br>    LPBYTE  pbTarget; <br>    LPBYTE  pbPattern; <br>    LPBYTE  pbTargetMax; <br>    LPBYTE  pbPatternMax; <br>    BOOL    fResult = FALSE; <br>    CHAR    *rgchHash; <br> <br>    // Validate parameters <br> <br>    switch (ulFuzzyLevel &amp; (FL_IGNORECASE | FL_IGNORENONSPACE)) <br>    { <br>      case 0:        <br>      default: <br>        rgchHash = rgchCsds; <br>        break; <br>         <br>      case FL_IGNORECASE: <br>        rgchHash = rgchCids; <br>        break; <br>         <br>      case FL_IGNORENONSPACE: <br>        rgchHash = rgchCsdi; <br>        break; <br>         <br>      case FL_IGNORECASE | FL_IGNORENONSPACE: <br>        rgchHash = rgchCidi; <br>        break; <br>    } <br> <br>    if (ulFuzzyLevel &amp; FL_LOOSE) <br>        rgchHash = rgchCids; <br> <br>    pbTarget = (LPBYTE) pszTarget; <br>    pbPattern = (LPBYTE) pszPattern; <br>    pbTargetMax = pbTarget + cbTarget; <br>    pbPatternMax = pbPattern + cbPattern; <br> <br>    if (cbPattern &gt; cbTarget) <br>        goto end; <br> <br>    // Compute the power of the left most character in base ulBase <br>    for (i = 1; i &lt; cbPattern; i++) <br>        ulBaseToPowerMod = (ulBase * ulBaseToPowerMod) % ulPrime; <br> <br>    // Calculate the hash function for the src (and the first dst) <br>    while (pbPattern &lt; pbPatternMax) <br>    { <br>        ulHashPattern = (ulHashPattern*ulBase+rgchHash[*pbPattern]) % ulPrime; <br>        ulHashTarget = (ulHashTarget*ulBase+rgchHash[*pbTarget]) % ulPrime; <br>        pbPattern++; <br>        pbTarget++; <br>    } <br> <br>    // Dynamically produce hash values for the string as we go <br>    for ( ;; ) <br>    { <br>        if (ulHashPattern == ulHashTarget) <br>        { <br>            if (CompareStringA(lcid, <br>                ((ulFuzzyLevel &amp; FL_IGNORECASE) ? NORM_IGNORECASE : 0) | <br>                ((ulFuzzyLevel &amp; FL_LOOSE) ? NORM_IGNORECASE : 0) | <br>                ((ulFuzzyLevel &amp; FL_IGNORENONSPACE) ? NORM_IGNORENONSPACE : 0), <br>                pbPattern-cbPattern, (UINT)cbPattern, <br>                pbTarget-cbPattern, (UINT)cbPattern) == 2) <br>            { <br>                fResult = TRUE; <br>                goto end; <br>            } <br>        } <br> <br>#ifdef DEBUG <br>        if (ulHashPattern == ulHashTarget) <br>            DebugTrace ("This is very unprobable, unless you are doing " <br>                "FL_EXACT and an case insensitive match came up " <br>                "(or you are on DBCS)\n"); <br>#endif <br> <br>        if (pbTarget == pbTargetMax) <br>            goto end; <br> <br>        ulHashTarget = (ulHashTarget+ulBase*ulPrime- <br>            rgchHash[*(pbTarget-cbPattern)]*ulBaseToPowerMod) % ulPrime; <br>        ulHashTarget = (ulHashTarget*ulBase+rgchHash[*pbTarget]) % ulPrime; <br>        pbTarget++; <br>    } <br> <br>end: <br>    return fResult; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMCCLI.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2054"></a>CMCCLI.H</h2>
<pre><code>/* <br> -  C M C C L I . H <br> - <br> *  Purpose: <br> *      Header file for the sample mail client based on CMC. <br> * <br> */ <br> <br>#ifndef CMC_H <br>//#include &lt;xcmc.h&gt; <br>#endif <br> <br>#ifndef ULONG <br>typedef unsigned long ULONG; <br>#endif <br> <br>/* Menu Item IDs */ <br> <br>#define IDM_LOGON           100 <br>#define IDM_LOGOFF          101 <br>#define IDM_EXIT            102 <br>#define IDM_COMPOSE_CMC     103 <br>#define IDM_COMPOSE_CUSTOM  104 <br>#define IDM_READ            105 <br>#define IDM_ADDRBOOK        106 <br>#define IDM_ABOUT           107 <br> <br>/* Resource IDs */ <br> <br>#define ICON_NOMAIL     200 <br>#define ICON_MAIL       201 <br>#define IDREAD          300 <br>#define IDREADA         301 <br>#define IDUNREAD        302 <br>#define IDUNREADA       303 <br> <br> <br>/* Address Book Control IDs */ <br> <br>#define IDT_ADDRESS     101 <br>#define IDC_ADDRESS     102 <br>#define IDT_LIST        103 <br>#define IDC_LIST        104 <br>#define IDC_ADD         105 <br>#define IDC_REMOVE      106 <br> <br> <br>/* Compose Note Control IDs */ <br> <br>#define IDC_SEND        101 <br>#define IDC_RESOLVE     102 <br>#define IDC_ATTACH      103 <br>#define IDC_OPTIONS     104 <br>#define IDC_ADDRBOOK    105 <br>#define IDT_TO          106 <br>#define IDC_TO          107 <br>#define IDT_CC          108 <br>#define IDC_CC          109 <br>#define IDT_SUBJECT     110 <br>#define IDC_SUBJECT     111 <br>#define IDC_NOTE        112 <br>#define IDC_LINE1       113 <br>#define IDC_LINE2       114 <br> <br> <br>/* InBox Control IDs */ <br> <br>#define IDT_MSG         101 <br>#define IDC_MSG         102 <br>#define IDC_NEW         103 <br>#define IDC_READ        104 <br>#define IDC_DELETE      105 <br>#define IDC_CLOSE       106 <br> <br> <br>/* ReadNote Control IDs */ <br> <br>#define IDC_SAVECHANGES 101 <br>#define IDC_SAVEATTACH  102 <br>#define IDC_REPLY       103 <br>#define IDC_REPLYALL    104 <br>#define IDC_FORWARD     105 <br>#define IDT_RFROM       106 <br>#define IDT_RDATE       107 <br>#define IDT_RTO         108 <br>#define IDT_RCC         109 <br>#define IDT_RSUBJECT    110 <br>#define IDC_RFROM       111 <br>#define IDC_RDATE       112 <br>#define IDC_RTO         113 <br>#define IDC_RCC         114 <br>#define IDC_RSUBJECT    115 <br>#define IDC_READNOTE    116 <br>#define IDT_ATTACHMENT  117 <br>#define IDC_ATTACHMENT  118 <br>#define IDC_LINE3       119 <br>#define IDC_LINE4       120 <br> <br> <br>/* Options Control IDs */ <br> <br>#define IDC_RETURN      101 <br>#define IDC_PRIORITY    102 <br>#define IDC_URGENT      103 <br>#define IDC_NORMAL      104 <br>#define IDC_LOW         105 <br> <br> <br>/* About Box Control IDs */ <br> <br>#define IDC_VERSION     101 <br>#define IDC_STATIC1     102 <br>#define IDC_STATIC2     103 <br>#define IDC_STATIC3     104 <br> <br> <br>/* String Table IDs */ <br> <br>#define CMC_E_MAX 40 <br> <br>#define IDS_LOGONFAIL           (CMC_E_MAX + 1) <br>#define IDS_ADDRBOOKFAIL        (CMC_E_MAX + 2) <br>#define IDS_RESOLVEFAIL         (CMC_E_MAX + 3) <br>#define IDS_UNRESOLVEDNAMES     (CMC_E_MAX + 4) <br>#define IDS_SENDERROR           (CMC_E_MAX + 5) <br>#define IDS_NORECIPS            (CMC_E_MAX + 6) <br>#define IDS_SAVEATTACHERROR     (CMC_E_MAX + 7) <br>#define IDS_READFAIL            (CMC_E_MAX + 8) <br>#define IDS_MAKENEWFAIL         (CMC_E_MAX + 9) <br> <br>#define IDS_FILTER              (CMC_E_MAX + 50) <br> <br>/* Manifest Constants */ <br> <br>#define ADDR_MAX            128 <br>#define MAXUSERS            10 <br>#define TO_EDIT_MAX         512 <br>#define CC_EDIT_MAX         512 <br>#define SUBJECT_EDIT_MAX    128 <br>#define NOTE_LINE_MAX       1024 <br>#define FILE_ATTACH_MAX     32 <br> <br>/* Message Box styles */ <br> <br>#define MBS_ERROR           (MB_ICONSTOP | MB_OK) <br>#define MBS_INFO            (MB_ICONINFORMATION | MB_OK) <br>#define MBS_OOPS            (MB_ICONEXCLAMATION | MB_OK) <br> <br>/* Structure Definitions */ <br> <br>typedef struct _msgid FAR *LPMSGID; <br> <br>typedef struct _msgid <br>{ <br>    CMC_message_reference   *message_reference; <br>    CMC_string              from; <br>    CMC_string              subject; <br>    CMC_time                time_sent; <br>    CMC_boolean             fHasAttach; <br>    CMC_boolean             fRead; <br>    LPMSGID                 lpPrev; <br>    LPMSGID                 lpNext; <br>} MSGID; <br> <br>/* Function Prototypes */ <br> <br>int  PASCAL WinMain(HINSTANCE, HINSTANCE, LPSTR, int); <br>BOOL InitApplication(HINSTANCE); <br>BOOL InitInstance(HINSTANCE, int); <br>void DeinitApplication(void); <br>BOOL InitSimpleCMC (void); <br>void DeinitSimpleCMC(void); <br>long FAR PASCAL MainWndProc(HWND, UINT, UINT, LPARAM); <br>BOOL FAR PASCAL AboutDlgProc(HWND, UINT, UINT, LONG); <br>BOOL FAR PASCAL InBoxDlgProc(HWND, UINT, UINT, LONG); <br>BOOL FAR PASCAL ReadMailDlgProc(HWND, UINT, UINT, LONG); <br>BOOL FAR PASCAL DetailsDlgProc (HWND, UINT, UINT, LONG); <br>BOOL FAR PASCAL ComposeDlgProc (HWND, UINT, UINT, LONG); <br>BOOL FAR PASCAL OptionsDlgProc (HWND, UINT, UINT, LONG); <br>void SecureMenu(HWND hWnd, BOOL fBeforeLogon); <br>      <br>void SaveFileAttachments(HWND, CMC_attachment FAR *); <br>void MakeDisplayNameStr(LPSTR, CMC_enum, ULONG, CMC_recipient FAR *); <br>ULONG CopyAttachment (CMC_attachment FAR *,CMC_attachment FAR *,CMC_attachment FAR *); <br>CMC_return_code ResolveFriendlyNames (HWND, LPSTR, CMC_enum, ULONG *, CMC_recipient FAR * *); <br>CMC_return_code CopyRecipient (CMC_recipient FAR *,CMC_recipient FAR *,CMC_recipient FAR *); <br>CMC_return_code SaveMsgChanges (HWND,CMC_message far *); <br>CMC_return_code MakeNewMessage (CMC_message far *, CMC_flags); <br>CMC_return_code GetNextFile (HWND, ULONG, ULONG *, CMC_attachment FAR * *); <br>BOOL FNameInList (LPSTR, ULONG, CMC_recipient FAR *); <br> <br>void DrawMsgItem (DRAWITEMSTRUCT *); <br>void DrawMsgIcon(HDC , HBITMAP , int , int , int , int); <br> <br>LPMSGID MakeMsgNode (CMC_message_summary FAR *); <br>LPMSGID FindNode (LPMSGID, CMC_message_reference FAR *); <br>void    InsertMsgNode (LPMSGID, LPMSGID *); <br>void    DeleteMsgNode (LPMSGID, LPMSGID *); <br>void    FreeMsgList (LPMSGID); <br> <br>void ConvertDateRec (CMC_time far *, LPSTR); <br>void MakeMessageBox(HWND, ULONG, UINT, UINT); <br>void ToggleMenuState(HWND, BOOL); <br>void LogSendMail(ULONG ulResult); <br> <br>BOOL fCMCInstalled(void); <br> <br>/* CMC functions */ <br> <br>extern HINSTANCE    hlibCMC; <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCQUERYCONFIGURATION) <br>    (CMC_session_id session, CMC_enum item,CMC_buffer reference,CMC_extension FAR *config_extensions); <br> <br>extern LPFNCMCQUERYCONFIGURATION lpfnCMCQueryConfiguration; <br> <br>#define CMCQueryConfiguration           (*lpfnCMCQueryConfiguration) <br> <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCLOGON)( <br>    CMC_string              service, <br>    CMC_string              user, <br>    CMC_string              password, <br>    CMC_enum                character_set, <br>    CMC_ui_id               ui_id, <br>    CMC_uint16              caller_cmc_version, <br>    CMC_flags               logon_flags, <br>    CMC_session_id FAR      *session, <br>    CMC_extension FAR       *logon_extensions <br>); <br> <br>extern LPFNCMCLOGON lpfnCMCLogon; <br> <br>#define CMCLogon            (*lpfnCMCLogon) <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCLOGOFF)( <br>    CMC_session_id          session, <br>    CMC_ui_id               ui_id, <br>    CMC_flags               logoff_flags, <br>    CMC_extension FAR       *logoff_extensions <br>); <br> <br>extern LPFNCMCLOGOFF lpfnCMCLogoff; <br> <br>#define CMCLogoff           (*lpfnCMCLogoff) <br> <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCFREE)( <br>    CMC_buffer              memory <br>); <br> <br>extern LPFNCMCFREE lpfnCMCFree; <br> <br>#define CMCFree     (*lpfnCMCFree) <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCLOOKUP)( <br>    CMC_session_id          session, <br>    CMC_recipient FAR       *recipient_in, <br>    CMC_flags               look_up_flags, <br>    CMC_ui_id               ui_id, <br>    CMC_uint32 FAR          *count, <br>    CMC_recipient FAR * FAR *recipient_out, <br>    CMC_extension FAR       *look_up_extensions <br>); <br> <br>extern LPFNCMCLOOKUP lpfnCMCLookUp; <br> <br>#define CMCLookUp (*lpfnCMCLookUp) <br> <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCLIST)( <br>    CMC_session_id          session, <br>    CMC_string              message_type, <br>    CMC_flags               list_flags, <br>    CMC_message_reference   *seed, <br>    CMC_uint32 FAR          *count, <br>    CMC_ui_id               ui_id, <br>    CMC_message_summary FAR * FAR *result, <br>    CMC_extension FAR       *list_extensions <br>); <br> <br>extern LPFNCMCLIST lpfnCMCList; <br> <br>#define CMCList  (*lpfnCMCList) <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCSEND)( <br>    CMC_session_id          session, <br>    CMC_message FAR         *message, <br>    CMC_flags               send_flags, <br>    CMC_ui_id               ui_id, <br>    CMC_extension FAR       *send_extensions <br>); <br> <br>extern LPFNCMCSEND lpfnCMCSend; <br> <br>#define CMCSend (*lpfnCMCSend) <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCREAD)( <br>    CMC_session_id          session, <br>    CMC_message_reference   *message_reference, <br>    CMC_flags               read_flags, <br>    CMC_message FAR * FAR   *message, <br>    CMC_ui_id               ui_id, <br>    CMC_extension FAR       *read_extensions <br>); <br> <br>extern LPFNCMCREAD lpfnCMCRead; <br> <br>#define CMCRead (*lpfnCMCRead) <br> <br>typedef CMC_return_code (FAR PASCAL *LPFNCMCACTON)( <br>    CMC_session_id          session, <br>    CMC_message_reference   *message_reference, <br>    CMC_enum                operation, <br>    CMC_flags               act_on_flags, <br>    CMC_ui_id               ui_id, <br>    CMC_extension FAR       *act_on_extensions <br>); <br> <br>extern LPFNCMCACTON lpfnCMCActOn; <br> <br>#define CMCActOn (*lpfnCMCActOn) <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

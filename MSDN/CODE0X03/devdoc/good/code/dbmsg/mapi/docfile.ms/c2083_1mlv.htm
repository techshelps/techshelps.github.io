<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2083"></a>README.TXT</h2>
<pre><code>MAPI Sample Message Store <br> <br> <br>The DOCFile.Ms sample demonstrates how to use a sample message store. <br> <br>The message store is based on the file system. Each folder is a directory <br>and each message is a file. Additional files hold properties of folders <br>and of the message store itself. <br> <br>Files <br>----- <br> <br>File          Description <br> <br>*.FLD         Folder. <br>*.MSG         Message. <br>FOLDER.PRP    Folder properties (any folder). <br>MSGSTORE.PRP  Message store properties (root folder only). <br>RECFLDR.STG   Receive folder settings (root folder only). <br>CONTENTS.TBL  Folder contents table cache. <br>OUTGOING.TBL  Outgoing queue table cache (root folder only). <br>*.TMP         Message in composition. <br>*.RRT         Read receipt. <br> <br>Entry IDs <br>--------- <br> <br>A sample store entry ID contains the path of the item to which it refers, <br>relative to the store root directory. This enables a sample message store <br>to be copied usnig the file system with relative impunity (except to a <br>subdirectory of another sample message store). <br> <br>The sample message store does not distinguish between short- and long-term <br>entry IDs. <br> <br>Message on Storage <br>------------------ <br> <br>The IMAPIProp interface for all objects relies heavily upon the IMessage <br>interface implemented in IMSG.DLL, which in turn is based upon OLE 2.0 <br>docfiles (the IStorage interface). <br> <br>Interface Lifetime and Cross-referencing <br>---------------------------------------- <br> <br>The sample message store links child objects back to their parents, for <br>leak detection and invalidation when the parent object is closed before <br>the child. Opening a table on an object (such as a folder) and then <br>closing the folder invalidates the object, but not the table. This method <br>is slightly more sophisticated than simply incrementing the object reference <br>count when the table is opened. <br> <br>Contents and Hierarchy Tables <br>----------------------------- <br> <br>The IMAPITable interface for contents and hierarchy tables relies upon the <br>IMAPITableData interface in MAPIU.DLL; the size of a folder is therefore <br>limited to the amount of RAM available for the contents table. Initially, <br>a contents table is created by scanning the directory for .MSG files, <br>extracting some properties from each file, and writing a row for each <br>message to the table data object. To speed up subsequent open operations, <br>the table is then written out to a .TBL file, and the .TBL file is carefully <br>kept up to date by subsequent changes in the folder. Hierarchy tables are not <br>cached; the sample message store uses notification internally to keep them <br>up to date while they are open. <br> <br>Supported Features <br>------------------ <br> <br>Basic operations. The sample message store supports reading, creating, <br>modifying, and deleting messages; browsing, creating, and deleting folders; <br>submitting outbound message to transports; and associating all types of <br>attachments with messages. Multivalued properties are supported for all <br>objects. The sample message store can be used as the default message store <br>for a MAPI client. <br> <br>Copy operations. The sample message store supports moving and copying <br>messages and folders. These operations are delegated to MAPI support <br>functions unless an operation occurs entirely within one sample message store. <br> <br>Event notification. The sample message store supports event notification on <br>tables (again, courtesy of IMAPITableData). Object notifications and new-mail <br>notifications are not supported. <br> <br>Multithread safety. On 32-bit Windows platforms, all sample message store <br>interfaces protect themselves from concurrent access by multiple threads. <br> <br>Cross-platform support. The sample message store source code generates <br>executable files for Windows 3.X, Windows 95, and Windows NT 3.5 and above <br>from a single set of source files. <br> <br>Unsupported Features <br>-------------------- <br> <br>Named properties (GetNamesFromIDs and GetIDsFromNames methods of IMAPIProp). <br> <br>Searches (SetSearchCriteria method of IMAPIFolder). <br> <br>Categorization of contents tables. <br> <br>Folder-associated information (MAPI_ASSOCIATED, DEL_ASSOCIATED flags). <br> <br>IMAPIStatus interface. <br> <br>ServiceEntry interface for configuration. <br> <br>Certain other methods are unsupported, including IMAPIFolder::OpenProperty <br>and IMsgStore::CopyTo. <br> <br>Configuration <br>------------- <br> <br>The sample message store has two configurable properties: the path to the <br>store root directory and a password. Configuration is supported at service <br>provider logon only. <br> <br>Known Problems <br>-------------- <br> <br>No error message appears if a user types the wrong password when logging <br>onto a sample message store. <br> <br>Named properties in folder contents tables are not handled correctly. The <br>store should not allow them, because every message has a different property <br>name to ID mapping; but they are allowed. <br> <br>PR_NULL is handled incorrectly in IMAPIProps::GetProps. It should create  <br>a placeholder in the returned property value array with PR_NULL for the <br>property tag. In fact, it places an error value (with MAPI_E_NOT_FOUND) <br>in the property value array and returns MAPI_W_ERRORS_RETURNED from <br>GetProps. <br> <br>Installation <br>------------ <br> <br>To install the sample message store you have to <br> <br>1. Merge the file smpms.inf with the mapisvc.inf located in your windows <br>   system directory. You can do it using mergeini utility that comes with <br>   MAPI SDK. The syntax is "mergeini -m smpms.inf". <br> <br>2. Copy smpms(32).dll to the windows system directory. <br> <br>3. Add the sample store to any MAPI profile using the Mail and Fax control <br>   panel applet. </code></pre>
<p>&nbsp;</p></body>
</HTML>

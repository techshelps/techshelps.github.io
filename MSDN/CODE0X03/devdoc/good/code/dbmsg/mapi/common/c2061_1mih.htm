<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LASTERR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2069"></a>LASTERR.H</h2>
<pre><code>///////////////////////////////////////////////////////////////// <br>//  LASTERR.H <br>// <br>// Copyright 1986-1996 Microsoft Corporation. All Rights Reserved. <br>// <br>// <br>// last err support object. <br>// <br> <br>//There should be no global objects of this class <br>// because by the time the dectructor of a global CLastError <br>// is called, MAPIFreeBuffer does not work. <br> <br>#ifndef __LASTERR_H__ <br>#define __LASTERR_H__ <br> <br>class CLastError <br>{ <br>public: <br>    CLastError(LPSTR); <br>    ~CLastError(void); <br> <br>    // standard OLE or MAPI errors. <br>    HRESULT     HrSetLastError(HRESULT hr); <br> <br>    // our internal extended error codes or a non-standard string for OLE or MAPI errors <br>    // scFORM is one of the errors defined by MAKE_FORM_X_SCODE macro family <br>    HRESULT     HrSetLastError(HRESULT hr, SCODE scFORM, ...); <br> <br>    // errors returned from underlying objects. <br>    HRESULT     HrSetLastError(HRESULT hr, IUnknown* punk); <br> <br>    // our implementation of GetLastError <br>    HRESULT     HrGetLastError(HRESULT hr, DWORD dwFlags, <br>                               LPMAPIERROR * lppMAPIError); <br>     <br>    //displays the last error info <br>    int         ShowError(HWND); <br> <br> <br>private: <br>    // we have three possible error types: our internal errors which <br>    //  we signify by MAPI_E_EXTENDED to the user, standard errors <br>    //  defined by MAPI and errors returned by objects we keep and utilize. <br> <br>    enum {eNoError, eExtended, eMAPI, eObject} m_eLastErr; <br> <br>    HRESULT     m_hrLast; <br> <br>    HRESULT     m_hrGLE;  // what GetLastError on the object returned; mostly 0 <br>    LPMAPIERROR m_pmapierr; <br>    LPSTR m_szComponent; <br>}; <br> <br> <br>inline CLastError::CLastError(LPSTR szComponent) <br>{ <br>    m_eLastErr = eNoError; <br>    m_hrLast = 0; <br>    m_hrGLE = 0; <br>    m_pmapierr = 0; <br> <br>    m_szComponent = NULL; <br>     <br>    if(!MAPIAllocateBuffer(lstrlen(szComponent) +1, <br>                        (LPVOID *) &amp;m_szComponent)) <br>    { <br>        lstrcpy(m_szComponent, szComponent); <br>    } <br>     <br>} <br> <br>inline CLastError::~CLastError() <br>{ <br>    if (m_pmapierr != NULL) <br>    { <br>        MAPIFreeBuffer(m_pmapierr); <br>    } <br>    if(m_szComponent != NULL) <br>    { <br>        MAPIFreeBuffer(m_szComponent); <br>    } <br>} <br> <br>#endif // __LASTERR_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WRAP3D.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2081"></a>WRAP3D.C</h2>
<pre><code>/* <br> *  WRAP3D.C <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;mapix.h&gt; <br>#ifdef  WIN16 <br>#include &lt;memory.h&gt; <br>#endif   <br>#include &lt;mapiwin.h&gt; <br>#include "wrap3d.h" <br> <br>STDAPI_(LPVOID) <br>CTL3D_Initialize(HINSTANCE hinstMe) <br>{ <br>    UINT        fuErr; <br>    HINSTANCE   hinst = 0; <br>    BOOL        fRegistered = FALSE;    /* assume failure */ <br>    FARPROC     fpEnabled; <br>    FARPROC     fpRegister; <br>    LPCTX3D     pctx = NULL; <br>    DWORD       dwVer; <br> <br>    /* <br>     * //$ If the Win 4 shell is present, don't even look for the DLL. <br>     * //$ Need to verify this algorithm. <br>     */ <br> <br>    dwVer = GetVersion(); <br>    if (LOBYTE(LOWORD(dwVer)) &gt;= 4) <br>        goto fail; <br> <br>#ifdef _WIN32 <br>    pctx = LocalAlloc(LPTR, sizeof(CTX3D)); <br>    if (!pctx) <br>        goto fail; <br>#else <br>    if (MAPIAllocateBuffer(sizeof(CTX3D), &amp;pctx)) <br>        goto fail; <br>#endif <br>    ZeroMemory(pctx, sizeof(CTX3D)); <br> <br>    /* Attempt to load the DLL. Do not allow any error messages. */ <br>    fuErr = SetErrorMode(SEM_NOOPENFILEERRORBOX); <br>#ifdef  _WIN32 <br>    hinst = LoadLibraryA("CTL3D32.DLL"); <br>    SetErrorMode(fuErr); <br>    if (!hinst) <br>        goto fail; <br>#else <br>    hinst = LoadLibrary("CTL3DV2.DLL"); <br>    SetErrorMode(fuErr); <br>    if (hinst &lt; HINSTANCE_ERROR) <br>        goto fail; <br>#endif <br> <br>    /* Get the entry points we need. */ <br>    if (!(fpEnabled = GetProcAddress(hinst, "Ctl3dEnabled"))) <br>        goto fail; <br>    if (!(fpRegister = GetProcAddress(hinst, "Ctl3dRegister"))) <br>        goto fail; <br>    if (!(pctx-&gt;fpUnregister = GetProcAddress(hinst, "Ctl3dUnregister"))) <br>        goto fail; <br>    if (!(pctx-&gt;fpSubclassDlgEx = GetProcAddress(hinst, "Ctl3dSubclassDlgEx"))) <br>        goto fail; <br>    if (!(pctx-&gt;fpColorChange = GetProcAddress(hinst, "Ctl3dColorChange"))) <br>        goto fail; <br>    if ((pctx-&gt;fpIsAutoSubclass = GetProcAddress(hinst, "Ctl3dIsAutoSubclass")) &amp;&amp; <br>        (!(pctx-&gt;fpAutoSubclass = GetProcAddress(hinst, "Ctl3dAutoSubclass")) || <br>        !(pctx-&gt;fpUnAutoSubclass = GetProcAddress(hinst, "Ctl3dUnAutoSubclass")))) <br>        goto fail; <br>    if (!(pctx-&gt;fpSubclassCtl = GetProcAddress(hinst, "Ctl3dSubclassCtl"))) <br>        goto fail; <br>    if (!(pctx-&gt;fpGetVer = GetProcAddress(hinst, "Ctl3dGetVer"))) <br>        goto fail; <br> <br>    /* If we were not already registered, do so. */ <br>    if (!(*fpEnabled)()) <br>        pctx-&gt;fRegistered = (*fpRegister)(hinstMe); <br> <br>    /* Remember the library handle. */ <br>    pctx-&gt;hinst = hinst; <br>    pctx-&gt;hinstMe = hinstMe; <br> <br>ret: <br>    return pctx; <br> <br>fail: <br>    if (hinst) <br>        FreeLibrary(hinst); <br>#ifdef  _WIN32 <br>    if (pctx) <br>        LocalFree(pctx); <br>#else <br>    MAPIFreeBuffer(pctx); <br>#endif   <br>    pctx = NULL; <br>    goto ret; <br>} <br> <br>STDAPI_(void) <br>CTL3D_Uninitialize(LPVOID lpv) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv)) <br>        return; <br> <br>    if (pctx-&gt;fRegistered) <br>        (*(pctx-&gt;fpUnregister))(pctx-&gt;hinstMe); <br> <br>    FreeLibrary(pctx-&gt;hinst); <br> <br>#ifdef  _WIN32 <br>    LocalFree(pctx); <br>#else <br>    MAPIFreeBuffer(pctx); <br>#endif   <br>} <br> <br>STDAPI_(void) <br>CTL3D_Subclass(LPVOID lpv, HWND hwnd, DWORD dwFlags) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv)) <br>        return; <br> <br>    (*(pctx-&gt;fpSubclassDlgEx))(hwnd, dwFlags); <br>} <br> <br>STDAPI_(void) <br>CTL3D_AutoSubclass(LPVOID lpv, HINSTANCE hinst, BOOL FAR * lpfAuto) <br>{ <br>    LPCTX3D pctx; <br> <br>    *lpfAuto = FALSE; <br>    if (!(pctx = (LPCTX3D) lpv) || !pctx-&gt;fpIsAutoSubclass) <br>        return; <br> <br>    if (*lpfAuto = !pctx-&gt;fpIsAutoSubclass()) <br>        pctx-&gt;fpAutoSubclass (hinst); <br> <br>    return; <br>} <br> <br>STDAPI_(BOOL) <br>CTL3D_IsAutoSubclass(LPVOID lpv) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv) || !pctx-&gt;fpIsAutoSubclass) <br>        return FALSE; <br> <br>    return pctx-&gt;fpIsAutoSubclass(); <br>} <br> <br>STDAPI_(void) <br>CTL3D_CeaseAutoSubclass(LPVOID lpv, BOOL fAuto) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv) || !fAuto) <br>        return; <br> <br>    pctx-&gt;fpUnAutoSubclass (); <br>    return; <br>} <br> <br>STDAPI_(BOOL) <br>CTL3D_ColorChange(LPVOID lpv) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv)) <br>        return FALSE; <br> <br>    return pctx-&gt;fpColorChange(); <br>} <br> <br>STDAPI_(BOOL) <br>CTL3D_SubclassCtl(LPVOID lpv, HWND hwnd) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv)) <br>        return FALSE; <br> <br>    return pctx-&gt;fpSubclassCtl(hwnd); <br>} <br> <br>STDAPI_(WORD) <br>CTL3D_GetVer(LPVOID lpv) <br>{ <br>    LPCTX3D pctx; <br> <br>    if (!(pctx = (LPCTX3D) lpv)) <br>        return 0; <br> <br>    return pctx-&gt;fpGetVer(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_SCODE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2070"></a>_SCODE.H</h2>
<pre><code>/* <br> *  _ S C O D E . H <br> * <br> *  Status Codes returned by MAPI routines <br> * <br> *  Copyright 1993-1995 Microsoft Corporation. All Rights Reserved. <br> */ <br> <br>#ifndef _SCODE_H <br>#define _SCODE_H <br> <br>/* Define S_OK and ITF_* */ <br> <br>#ifdef _WIN32 <br>#include &lt;winerror.h&gt; <br>#endif <br> <br>/* <br> *  MAPI Status codes follow the style of OLE 2.0 sCodes as defined in the <br> *  OLE 2.0 Programmer's Reference and header file scode.h (Windows 3.x) <br> *  or winerror.h (Windows NT and Windows 95). <br> * <br> */ <br> <br>/*  On Windows 3.x, status codes have 32-bit values as follows: <br> * <br> *   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 <br> *   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 <br> *  +-+---------------------+-------+-------------------------------+ <br> *  |S|       Context       | Facil |               Code            | <br> *  +-+---------------------+-------+-------------------------------+ <br> * <br> *  where <br> * <br> *      S - is the severity code <br> * <br> *          0 - SEVERITY_SUCCESS <br> *          1 - SEVERITY_ERROR <br> * <br> *      Context - context info <br> * <br> *      Facility - is the facility code <br> * <br> *          0x0 - FACILITY_NULL     generally useful errors ([SE]_*) <br> *          0x1 - FACILITY_RPC      remote procedure call errors (RPC_E_*) <br> *          0x2 - FACILITY_DISPATCH late binding dispatch errors <br> *          0x3 - FACILITY_STORAGE  storage errors (STG_E_*) <br> *          0x4 - FACILITY_ITF      interface-specific errors <br> * <br> *      Code - is the facility's status code <br> * <br> * <br> */ <br> <br>/* <br> *  On Windows NT 3.5 and Windows 95, scodes are 32-bit values <br> *  laid out as follows: <br> *   <br> *    3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 <br> *    1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 <br> *   +-+-+-+-+-+---------------------+-------------------------------+ <br> *   |S|R|C|N|r|    Facility         |               Code            | <br> *   +-+-+-+-+-+---------------------+-------------------------------+ <br> *   <br> *   where <br> *   <br> *      S - Severity - indicates success/fail <br> *   <br> *          0 - Success <br> *          1 - Fail (COERROR) <br> *   <br> *      R - reserved portion of the facility code, corresponds to NT's <br> *          second severity bit. <br> *   <br> *      C - reserved portion of the facility code, corresponds to NT's <br> *          C field. <br> *   <br> *      N - reserved portion of the facility code. Used to indicate a <br> *          mapped NT status value. <br> *   <br> *      r - reserved portion of the facility code. Reserved for internal <br> *          use. Used to indicate HRESULT values that are not status <br> *          values, but are instead message ids for display strings. <br> *   <br> *      Facility - is the facility code <br> *          FACILITY_NULL                    0x0 <br> *          FACILITY_RPC                     0x1 <br> *          FACILITY_DISPATCH                0x2 <br> *          FACILITY_STORAGE                 0x3 <br> *          FACILITY_ITF                     0x4 <br> *          FACILITY_WIN32                   0x7 <br> *          FACILITY_WINDOWS                 0x8 <br> *   <br> *      Code - is the facility's status code <br> *   <br> */ <br> <br> <br> <br> <br>/* <br> *  We can't use OLE 2.0 macros to build sCodes because the definition has <br> *  changed and we wish to conform to the new definition. <br> */ <br> <br>/* The following two macros are used to build OLE 2.0 style sCodes */ <br> <br> <br>#ifdef  SUCCESS_SUCCESS <br>#undef  SUCCESS_SUCCESS <br>#endif <br>#define SUCCESS_SUCCESS     0L <br> <br>/* General errors (used by more than one MAPI object) */ <br> <br> <br>Sc(MAPI_E_NO_SUPPORT), <br>Sc(MAPI_E_BAD_CHARWIDTH), <br>Sc(MAPI_E_STRING_TOO_LONG), <br>Sc(MAPI_E_UNKNOWN_FLAGS), <br>Sc(MAPI_E_INVALID_ENTRYID), <br>Sc(MAPI_E_INVALID_OBJECT), <br>Sc(MAPI_E_OBJECT_CHANGED), <br>Sc(MAPI_E_OBJECT_DELETED), <br>Sc(MAPI_E_BUSY), <br>Sc(MAPI_E_NOT_ENOUGH_DISK), <br>Sc(MAPI_E_NOT_ENOUGH_RESOURCES), <br>Sc(MAPI_E_NOT_FOUND), <br>Sc(MAPI_E_VERSION), <br>Sc(MAPI_E_LOGON_FAILED), <br>Sc(MAPI_E_SESSION_LIMIT), <br>Sc(MAPI_E_USER_CANCEL), <br>Sc(MAPI_E_UNABLE_TO_ABORT), <br>Sc(MAPI_E_NETWORK_ERROR), <br>Sc(MAPI_E_DISK_ERROR), <br>Sc(MAPI_E_TOO_COMPLEX), <br>Sc(MAPI_E_BAD_COLUMN), <br>Sc(MAPI_E_EXTENDED_ERROR), <br>Sc(MAPI_E_COMPUTED), <br>Sc(MAPI_E_CORRUPT_DATA), <br>Sc(MAPI_E_UNCONFIGURED), <br>Sc(MAPI_E_FAILONEPROVIDER), <br>Sc(MAPI_E_UNKNOWN_CPID), <br>Sc(MAPI_E_UNKNOWN_LCID), <br> <br>/* MAPI base function and status object specific errors and warnings */ <br> <br>Sc(MAPI_E_END_OF_SESSION), <br>Sc(MAPI_E_UNKNOWN_ENTRYID), <br>Sc(MAPI_E_MISSING_REQUIRED_COLUMN), <br>Sc(MAPI_W_NO_SERVICE), <br> <br>/* Property specific errors and warnings */ <br> <br>Sc(MAPI_E_BAD_VALUE), <br>Sc(MAPI_E_INVALID_TYPE), <br>Sc(MAPI_E_TYPE_NO_SUPPORT), <br>Sc(MAPI_E_UNEXPECTED_TYPE), <br>Sc(MAPI_E_TOO_BIG), <br>Sc(MAPI_E_DECLINE_COPY), <br>Sc(MAPI_E_UNEXPECTED_ID), <br> <br>Sc(MAPI_W_ERRORS_RETURNED), <br> <br>/* Table specific errors and warnings */ <br> <br>Sc(MAPI_E_UNABLE_TO_COMPLETE), <br>Sc(MAPI_E_TIMEOUT), <br>Sc(MAPI_E_TABLE_EMPTY), <br>Sc(MAPI_E_TABLE_TOO_BIG), <br> <br>Sc(MAPI_E_INVALID_BOOKMARK), <br> <br>Sc(MAPI_W_POSITION_CHANGED), <br>Sc(MAPI_W_APPROX_COUNT), <br> <br>/* Transport specific errors and warnings */ <br> <br>Sc(MAPI_E_WAIT), <br>Sc(MAPI_E_CANCEL), <br>Sc(MAPI_E_NOT_ME), <br> <br>Sc(MAPI_W_CANCEL_MESSAGE), <br> <br>/* Message Store, Folder, and Message specific errors and warnings */ <br> <br>Sc(MAPI_E_CORRUPT_STORE), <br>Sc(MAPI_E_NOT_IN_QUEUE), <br>Sc(MAPI_E_NO_SUPPRESS), <br>Sc(MAPI_E_COLLISION), <br>Sc(MAPI_E_NOT_INITIALIZED), <br>Sc(MAPI_E_NON_STANDARD), <br>Sc(MAPI_E_NO_RECIPIENTS), <br>Sc(MAPI_E_SUBMITTED), <br>Sc(MAPI_E_HAS_FOLDERS), <br>Sc(MAPI_E_HAS_MESSAGES), <br>Sc(MAPI_E_FOLDER_CYCLE), <br> <br>Sc(MAPI_W_PARTIAL_COMPLETION), <br> <br>/* Address Book specific errors and warnings */ <br> <br>Sc(MAPI_E_AMBIGUOUS_RECIP), <br> <br>/* The range 0x0800 to 0x08FF is reserved */ <br> <br>/* Obsolete typing shortcut that will go away eventually. */ <br>#ifndef MakeResult <br>#endif <br> <br>/* We expect these to eventually be defined by OLE, but for now, <br> * here they are.  When OLE defines them they can be much more <br> * efficient than these, but these are "proper" and don't make <br> * use of any hidden tricks. <br> */ <br>#ifndef HR_SUCCEEDED <br>#endif <br> <br>#endif  /* _SCODE_H */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

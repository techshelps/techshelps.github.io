<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2100"></a>README.TXT</h2>
<pre><code>Custom Message Event Extension <br> <br> <br>SUMMARY <br>======= <br> <br>The Events.Ext sample demonstrates how to implement a custom message event <br>extension for the Microsoft Exchange Client. In particular, it demonstrates: <br> <br>  - reading message text before displayed in the read note form <br>  - reading message text as it is submitted to MAPI <br> <br>This sample uses a very basic form of signing a message. A checksum on the <br>message as it is written is stored as a custom property. Upon reading the <br>message, the extension verifies the checksum and displays one of two <br>possible outcomes: the message has been verified with correct contents, or <br>the message text has been altered. <br> <br>MORE INFORMATION <br>================ <br> <br>This sample requires Microsoft Windows NT 3.51 or Windows 95, the MAPI 1.0 <br>(Extended MAPI) PDK (Build 410 or above),  Microsoft Visual C++ version 2.0 <br>(or later), and the Win32 SDK for Windows NT and Windows 95. <br> <br>Configuration <br>------------- <br> <br>To configure Exchange to use the client extension, place the following <br>REG_SZ entry in the system registry in: <br>HKEY_LOCAL_MACHINE\Software\Microsoft\Exchange\Client\Extensions <br> <br>    Samp Ext=4.0;C:\MAPISAMP\EVENTEXT\EVEXT32.DLL;1;00000111111100 <br> <br>You can leave out an explicit path to EVEXT32.DLL if it resides in a <br>directory listed in the system PATH. <br> <br>Exchange client extensions are designed using OLE's Component Object Model. <br>The client calls methods which are provided in the extension. In some calls <br>to the extension interface, a pointer to a callback interface <br>(IExchExtCallback) is given for the extension to call back into the <br>Exchange client. For more information read "Extending the Microsoft Exchange <br>Client" in the MAPI PDK documentation. <br> <br>This sample extension includes the implementation of a property page <br>displayed in the Tools Option property sheet to either enable or disable <br>signatures. The sample will check a flag before calculating or verifying <br>checksums. <br> <br>GetObject is used during the OnWriteComplete and OnRead methods to obtain <br>the message body. The checksum is calculated and written as a custom <br>property of a message when the Send button is clicked. The checksum is <br>recalculated and verified when a message is read. For large messages, the <br>checksum may take a few seconds depending on the size of the message and the <br>speed of the machine. <br> <br>During the case that a message is found to have "altered" text according <br>to the checksum, the extension gives the user a choice whether to continue <br>to read the message or not. If not, an error return value is set in the <br>OnRead method to be used by the OnReadComplete method. Returning <br>MAPI_E_CALL_FAILED from OnReadComplete causes Exchange to call OnReadComplete <br>again with ulFlags parameter set to an error. The parameter is ignored by <br>this sample and returning MAPI_E_CALL_FAILED causes Exchange to not display <br>the read note form. <br> <br>This sample also supports the "Reply to Sender" context and signs the <br>reply when enabled. Replying to a non-signed message while the signatures <br>are enabled adds a signature to the entire message, counting original <br>message and reply. Replying to a signed message while the signature is <br>disabled removes the original signature. <br> <br>The logic for signing is only calculating the checksum on the PR_BODY <br>message property. The extension does not take "quirks" of certain providers <br>into its logic and the extension will interpret that a message was "altered" <br>when in fact it has not. Two examples are the MSPERR Transport and the MSMail <br>provider. With the MSPeer transport, it will add the text <br>"*** End of message ***" at the end of the message. The checksum does not <br>include this upon sending. The MSMail provider strips whitespace at the end <br>of a line just before the carriage return characters (CRLF). When sending, <br>the checksum calculation includes the whitespace. So the checksum verification <br>upon reading will not match with the stored checksum property. If you write a <br>message without placing any spaces just before a carriage return, or just <br>allow the richedit control wordwrap, the checksums will be equal. </code></pre>
<p>&nbsp;</p></body>
</HTML>

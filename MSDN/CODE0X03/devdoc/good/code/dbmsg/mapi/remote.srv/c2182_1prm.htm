<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_WINDS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2182"></a>_WINDS.H</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name  <br>//      _WINDS.H <br>// <br>//  Description <br>// <br>//  Author <br>//      Irving De la Cruz <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#ifndef _WINDS_H <br>#define _WINDS_H <br> <br>#define STRICT <br>#include &lt;WINDOWS.H&gt; <br>#include "WINDSGBL.H" <br>#include "WINDSRC.H" <br> <br>#ifdef _DEBUG <br>#define ENABLE_DEBUG_OUTPUT     1 <br>#endif // _DEBUG <br>#define TRACES_NO_MAPI          1 <br> <br>#include "TRACES.H" <br> <br>#define WINDS_DATABASE_VERSION          6 <br> <br>// Buffers and pipe symbolic constants. <br>#define READ_TIME_OUT       INFINITE <br>#define WRITE_TIME_OUT      INFINITE <br>#define GENERAL_TIME_OUT    INFINITE <br> <br>#define MIN_PIPE_NUMBER                 0x00000001 <br>#define MAX_PIPE_NUMBER                 0x00FFFFFF <br> <br>#define ELEMENTS_TO_FETCH   25 <br> <br>typedef enum _ACTION <br>{ <br>    IO_IDLE, <br>    IO_OPEN_STORAGE_FILE, <br>    IO_LOAD_MAILBOX_NAMES, <br>    IO_CREATE_NEW_MAILBOX, <br>    IO_REMOVE_MAILBOX, <br>    IO_EMPTY_MAILBOX, <br>    IO_GET_MAILBOX_PROPERTIES, <br>    IO_SET_MAILBOX_PROPERTIES, <br> <br>    // Message Transport services <br>    IO_COPY_MSG_FROM_FILE, <br>    IO_COPY_MSG_TO_FILE, <br>    IO_MOVE_MSG_TO_FILE, <br>    IO_COPY_HEADERS_TO_FILE, <br>    IO_DELETE_MSG_IN_MAILBOX, <br>    IO_CHECK_PENDING_MESSAGES, <br>    IO_MOVE_NEXT_MSG_TO_FILE, <br> <br>    // Address Book services <br>    IO_GET_CONTAINER_RECIPIENTS, <br>    IO_CREATE_DISTRIBUTION_LIST, <br>    IO_DELETE_DISTRIBUTION_LIST, <br>    IO_GET_DL_PROPERTIES, <br>    IO_SET_DL_PROPERTIES, <br>    IO_GET_GW_CONTAINER_COUNT, <br> <br>    // Public folder services <br>    IO_CREATE_PUBLIC_FOLDER, <br>    IO_DELETE_PUBLIC_FOLDER, <br>    IO_GET_PF_PROPERTIES, <br>    IO_SET_PF_PROPERTIES, <br>    IO_CREATE_PF_NEW_MESSAGE, <br>    IO_DELETE_PF_MESSAGE, <br>    IO_OPEN_PF_MESSAGE, <br>    IO_MODIFY_PF_MESSAGE, <br> <br>    // Remote Administrator <br>    IO_ADMIN_GET_SERVER_MAILBOXES, <br>    IO_ADMIN_GET_SERVER_DISTLISTS, <br>     <br>    // Helper actions for the notification mechanism <br>    IO_SENT_SHUTDOWN_NOTIFICATION, <br>    IO_RESTORE_CLIENT_NOTIFICATIONS <br>} ACTION; <br> <br>typedef struct _IOTHREADINFO <br>{ <br>    BOOL                    fAppIsTerminating; <br>    BOOL                    fCloseHandle; <br>    ACTION                  Action; <br>    HANDLE                  hResumeEvent; <br>    HANDLE                  hActionCompleted; <br>    HANDLE                  hTmpFile; <br>    TCHAR                   szObject[MAX_ALIAS_SIZE+1]; <br>    TCHAR                   szHeader[IO_BUFFERSIZE]; <br>    PMAILBOX_INFO           pMBInfo; <br>    PDIST_LIST_INFO         pDLInfo; <br>    PPUBLIC_FOLDER_INFO     pPFInfo; <br>    DWORD                   dwObjID; <br>    HRESULT *               phLastError; <br>    DWORD *                 pdwData; <br>    PWINDS_NOTIFICATION     pNotif; <br>} IOTHREADINFO, *PIOTHREADINFO; <br> <br>typedef struct _DBINFO_DATA <br>{ <br>    DWORD dwVersion; <br>} DBINFO_DATA; <br> <br>// This is the structure with the information that gets written to the <br>// system registry database to save per-OS-USER-session information <br>typedef struct tagAPP_OPTIONS <br>{ <br>    DWORD       cbSize; <br>    TCHAR       szDataFile[256]; <br>} APP_OPTIONS; <br> <br>#define SERVER_PIPE_NAME_FORMAT     TEXT("\\\\.\\pipe\\%d") <br> <br>#define NAME_FORMAT_SIZE        32 <br> <br>// Name string format for the OLE sub storages of the object database <br>#define DBINFO_STREAM           OLESTR("DATABASE INFO") <br>#define OBJ_ID_POOL_STREAM      OLESTR("OBJECT ID POOL") <br>#define USER_PROPERTIES         OLESTR("USER PROPERTIES") <br>#define HEADERS_STORAGE         OLESTR("HEADERS") <br>#define MSGS_STORAGE            OLESTR("MESSAGES") <br>#define MSG_STREAM_FORMAT       OLESTR("MSG %X") <br>#define HEADER_STREAM_FORMAT    OLESTR("HEADER %X") <br>// Server Distribution List Support <br>#define DISTRIBUTION_LISTS      OLESTR("_DISTRIBUTION LISTS") <br>#define DL_PROPS                OLESTR("DL PROPERTIES") <br>#define DL_MEMBERS              OLESTR("DL MEMBERS") <br>// Gateway Support <br>#define FOREIGN_DIRECTORIES     OLESTR("_GATEWAYS") <br>#define GW_OUTBOX               OLESTR("_GATEWAY OUT") <br>#define GW_INBOX                OLESTR("_GATEWAY IN") <br>#define SMTP_GATEWAY            OLESTR("SMTP") <br>#define EXCHANGE_GATEWAY        OLESTR("EXCHANGE") <br>#define FAX_GATEWAY             OLESTR("FAX") <br>// Public Folders Support <br>#define PUBLIC_FOLDERS_ROOT     OLESTR("_PUBLIC FOLDERS ROOT") <br>#define FOLDER_PROPS_STREAM     OLESTR("FOLDER PROPERTIES") <br>#define PUBLIC_FOLDER           OLESTR("FOLDER %X") <br> <br>#define CREATE_FLAGS    (STGM_CREATE | STGM_DIRECT | STGM_READWRITE | STGM_SHARE_EXCLUSIVE) <br>#define OPEN_FLAGS      (STGM_DIRECT | STGM_READWRITE | STGM_SHARE_EXCLUSIVE) <br> <br>#define MAINDLGCLASS    TEXT("WindsDlgClass") <br> <br>extern "C" <br>{ <br>    extern IOTHREADINFO g_IOInfo; <br>    extern TCHAR g_szDataFile[]; <br>    extern HRESULT g_hServerState; <br>    extern CRITICAL_SECTION g_csIOInfo; <br>    extern CRITICAL_SECTION g_csNotifLinks; <br>    extern CRITICAL_SECTION g_csServiceState; <br>    extern CRITICAL_SECTION g_csPipeID; <br>    extern DWORD g_dwNextPipeID; <br>    extern BOOL g_fRunningAsNTService; <br>    extern HINSTANCE ghInstance; <br>    extern HANDLE    ghHeap; <br> <br>    HRESULT WINAPI CreateDLsDirectory <br>                        (LPSTORAGE                  pStorage); <br>    HRESULT WINAPI CreateGatewayDirectories <br>                        (LPSTORAGE                  pStorage); <br>    HRESULT WINAPI CreatePublicFoldersDirectory <br>                        (LPSTORAGE                  pStorage); <br>    HRESULT WINAPI GetObjectProp <br>                        (DWORD                      dwObjID, <br>                         DWORD *                    pdwObjType, <br>                         MAILBOX_INFO *             pMailboxInfo); <br>    HRESULT WINAPI GetServiceState <br>                        (); <br>    HRESULT WINAPI AnsiToUnicode <br>                        (LPSTR                      szStr, <br>                         LPWSTR                     wcStr, <br>                         ULONG                      cchUnicode); <br>    HRESULT WINAPI UnicodeToAnsi <br>                        (LPWSTR                     wcStr, <br>                         LPSTR                      szStr, <br>                         ULONG                      cchAnsi); <br>    DWORD WINAPI GetNextPipeID <br>                        (); <br>    void WINAPI ReleaseSyncObj <br>                        (); <br>    void WINAPI LoadSettingsFromRegistry <br>                        (); <br>    void WINAPI SaveSettingsToRegistry <br>                        (); <br>    void WINAPI RemoveAllNotifLinks <br>                        (); <br>    void WINAPI NotifyClients <br>                        (PWINDS_NOTIFICATION        pNotif); <br>     <br>    HRESULT WINAPI GetLocalTempFileName <br>                        (LPTSTR                     szTmpFileName); <br>    HRESULT WINAPI FileCopy  <br>                        (HANDLE, <br>                         HANDLE, <br>                         DWORD); <br>    HRESULT WINAPI WaitForClientConnection <br>                        (HANDLE                     hPipe, <br>                         DWORD                      dwTimeOut); <br>    DWORD WINAPI WorkingIOProc <br>                        (); <br>    DWORD WINAPI ClientNotifThreadProc <br>                        (PWINDS_NOTIFICATION        pNotif); <br>}; <br> <br>typedef struct _OBJLIST_NODE <br>{ <br>    struct _OBJLIST_NODE *      pNext;              // 4 <br>    DWORD                       dwObjID;            // 4 <br>    WINDS_AB_OBJTYPE            ObjType;            // 4 <br>    TCHAR                       szObjAlias[20];     // 20 <br>                                   // Structure size = 32 <br>} OBJLIST_NODE, *POBJLIST_NODE; <br> <br>class CObjectList <br>{ <br>public: <br>    STDMETHODIMP Insert <br>                    (DWORD                      dwObjID, <br>                     LPTSTR                     pObjName, <br>                     WINDS_AB_OBJTYPE           ObjType); <br>    STDMETHODIMP Delete <br>                    (DWORD                      dwObjID); <br>    STDMETHODIMP FindObjFromID <br>                    (DWORD                      dwObjID, <br>                     LPTSTR                     pObjName, <br>                     WINDS_AB_OBJTYPE *         pObjType); <br>    STDMETHODIMP FindObjFromName <br>                    (WINDS_AB_OBJTYPE           ObjType, <br>                     LPTSTR                     pObjName, <br>                     DWORD *                    pdwObjID); <br>    STDMETHODIMP FindObjAndTypeFromName <br>                    (LPTSTR                     pObjName, <br>                     WINDS_AB_OBJTYPE *         pObjType, <br>                     DWORD *                    pdwObjID); <br>    BOOL WINAPI IsAliasNameAvailable <br>                    (LPTSTR                     pObjName); <br> <br>public: <br>    CObjectList(); <br>    ~CObjectList(); <br> <br>private: <br>    HANDLE              m_hHeap; <br>    CRITICAL_SECTION    m_csObj; <br>    POBJLIST_NODE       m_pHead; <br>}; <br> <br>extern CObjectList GlobalObjectMap; <br> <br>#endif // _WINDS_H <br> <br>// End of file for WINDS.H </code></pre>
<p>&nbsp;</p></body>
</HTML>

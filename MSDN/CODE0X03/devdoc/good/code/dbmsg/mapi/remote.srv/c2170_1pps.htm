<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2170"></a>README.TXT</h2>
<pre><code>Sample Server Messaging Host <br> <br> <br>The Remote.Srv sample serves as the server based message repository <br>for MAPI 1.0 transports that handle the Windows Developer Supprt (WINDS) <br>address type. This program simulates a foreign messaging system. <br>WINDS also acts as the server host for address book with a global address list. <br>The global address list is the list of recipients in the WINDS host. Since <br>WINDS supports gateways, foreign message recipients appear in the user <br>directories of the gateways currently installed. <br> <br>Requirements <br>------------ <br> <br>To build this program you must have: <br> <br>    Windows NT 3.5 (or later), <br>    Microsoft Visual C++ version 2.0 (or later) or the Win32 SDK tools. <br> <br>This sample uses RPC over named pipes to establish connections with remote <br>clients. <br> <br>Building the Sample Code <br>------------------------ <br> <br>This sample runs under Windows NT 3.5x on Intel x86, MIPS R4xxx and Digital <br>AXP platforms. <br> <br>If you are using Microsoft Visual C++, update the project file dependencies <br>as soon as the files are copied to your machine. Use the PROJECTS.UPDATE <br>DEPENDENCIES options in the Developer Studio. <br> <br>This sample was developed using Microsoft Visual C++ 2.x. The associated <br>makefile is WINDSSRV.MAK for the service component and WINDSADM for the <br>remote administrator component. Traces can be enabled for Release builds by <br>defining ENABLE_DEBUG_OUTPUT in the preprocessor symbols define in the <br>project settings menu. <br> <br>A command-line compiler-independent makefile has been provided for users <br>of command-line tools. The command line tool will, by default build a <br>DEBUG version of both components. If NODEBUG is defined, a RELEASE version <br>of the both components will be built. <br> <br>Usage <br>----- <br> <br>There are two pieces for the WINDS server sample. The WINDS service component <br>and the WINDS administrator component. <br> <br>WINDS Service Installation <br>-------------------------- <br> <br>The WINDS service performs the actual processing. It can be run on a <br>Windows NT machine on any platform. To install the service, simply run the <br>built executable from the command line with the INSTALL option: <br> <br>    C:\SAMPLES\MAPI\WINDS&gt; WINDSSRV INSTALL <br> <br>This will add the service to the registry and start the service immediately. <br>Note that you must be in the directory where the service executable is. <br> <br>To stop and remove the server from the system use the REMOVE option: <br> <br>    C:\SAMPLES\MAPI\WINDS&gt; WINDSSRV  REMOVE <br> <br>If the service is run without parameters, a window will come up for <br>interactive configuration (install and removal). <br> <br>The WINDS service supports interaction with the Services Applet in the <br>control panel so it can be started, stopped, paused, resumed, and queried <br>using the standard UI. <br> <br>Once the WINDS Service is installed, it can run unattended, even when no one <br>is logged into the Windows NT machine. <br> <br>The service does not expose any UI for normal interaction and administration. <br>All of this is done through the WINDS Administrator program (explained below), <br>either by running it on the same machine where the WINDS service is running <br>or across the network. <br> <br>WINDS Administrator <br>------------------- <br> <br>Some of the menu items and property pages maybe grayed out because they have <br>not been implemented yet. <br> <br>The WINDS administrator is a program that can be run on the same machine <br>where the WINDS service is running or across the network. <br> <br>The administrator can be run on Windows NT (workstation or server) or from <br>Windows 95. The executable is single binary for all Intel Win32 platfoms, <br>so there is no need to rebuild it for Windows 95 once built for Windows NT <br>or vice versa. <br> <br>The administrator is a graphical interface to the data stored in the WINDS <br>Server. Through this program, you can create and control the list of user <br>mailboxes, distribution lists, and public folders. You can also manage the <br>gateways and do other administrative tasks on the WINDS server, remotely, <br>through a graphical interface. <br> <br>Debug Traces and Asserts <br>------------------------ <br> <br>This sample uses several output debug string functions in the Win32 <br>environment to avoid attaching the DLL to any debugger. By default, the trace <br>messages are output to a debug terminal attached to COM1 with settings at <br>9600, N, 8, 1. The debug messages can also be written to a log file whose <br>default location is C:\MAPILOG.TXT. The file TRACES.CPP defines some macros <br>that can be easily modified for different communications settings, output <br>port, and log file name. It also implements a macro (ASSERT) and function that <br>test the validity of a given statement. If the assertion fails, the <br>user/developer has the opportunity to break into the debugger at the exact <br>point where the assertion occurred. <br> <br>The debug routines are found in the TRACES.CPP and TRACES.H files. <br> <br>To enable the TRACExx functions in the TRACES.CPP files, define the <br>ENABLE_DEBUG_OUTPUT macro during compilation. These functions work in DEBUG <br>or RELEASE builds. You can only enable/disable traces at compile time <br>through ENABLE_DEBUG_OUTPUT. There is no run time switch to enable or <br>disable the traces. <br> <br>TRACES.CPP implements an ASSERT macro which evaluates an expression <br>expecting a TRUE result, i.e. ASSERT (expression) will interrupt execution <br>if the expression is NOT TRUE (non-zero). <br> <br>The ASSERT macro displays the line and source code file name where the <br>assertion failed and writes the result to a debug trace. The assert <br>information is also written to the log file. <br> <br>By default, if an assertion fails, a dialog will come up and interrupt <br>execution until a selection is made to break into the debugger or ignore the <br>assertion. </code></pre>
<p>&nbsp;</p></body>
</HTML>

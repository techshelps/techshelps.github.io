<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WDSADM_S.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2193"></a>WDSADM_S.C</h2>
<pre><code>/* this ALWAYS GENERATED file contains the RPC server stubs */ <br> <br> <br>/* File created by MIDL compiler version 2.00.0102 */ <br>/* at Wed Sep 27 11:30:53 1995 <br> */ <br>//@@MIDL_FILE_HEADING(  ) <br> <br>#include &lt;string.h&gt; <br>#include "wdsadm.h" <br> <br>extern const MIDL_FORMAT_STRING __MIDLFormatString; <br> <br>extern const MIDL_FORMAT_STRING __MIDLProcFormatString; <br> <br>extern RPC_DISPATCH_TABLE WINDSADM_v1_0_DispatchTable; <br> <br>static const RPC_SERVER_INTERFACE WINDSADM___RpcServerInterface = <br>    { <br>    sizeof(RPC_SERVER_INTERFACE), <br>    {{0x2BC66860,0xE91E,0x11CE,{0xB2,0xF0,0x00,0xAA,0x00,0x51,0x0E,0x3B}},{1,0}}, <br>    {{0x8A885D04,0x1CEB,0x11C9,{0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60}},{2,0}}, <br>    &amp;WINDSADM_v1_0_DispatchTable, <br>    0, <br>    0, <br>    0, <br>    0 <br>    }; <br>RPC_IF_HANDLE WINDSADM_v1_0_s_ifspec = (RPC_IF_HANDLE)&amp; WINDSADM___RpcServerInterface; <br> <br>extern const MIDL_STUB_DESC WINDSADM_StubDesc; <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmIsServerRunning( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    RpcTryFinally <br>        { <br>         <br>        _RetVal = RemoteAdmIsServerRunning(); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmDeleteObject( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwObjID; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[2] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>         <br>        _RetVal = RemoteAdmDeleteObject(dwObjID); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetServerMailboxes( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _M64; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    long __RPC_FAR *pPipeNumber; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pPipeNumber = 0; <br>    RpcTryFinally <br>        { <br>        pPipeNumber = &amp;_M64; <br>         <br>        _RetVal = RemoteAdmGetServerMailboxes(pPipeNumber); <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = *pPipeNumber; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetServerDistLists( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _M65; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    long __RPC_FAR *pPipeNumber; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pPipeNumber = 0; <br>    RpcTryFinally <br>        { <br>        pPipeNumber = &amp;_M65; <br>         <br>        _RetVal = RemoteAdmGetServerDistLists(pPipeNumber); <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = *pPipeNumber; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmEmptyMailbox( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwMailboxID; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[2] ); <br>         <br>        dwMailboxID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>         <br>        _RetVal = RemoteAdmEmptyMailbox(dwMailboxID); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetGALDirectory( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _M66; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwFlags; <br>    long __RPC_FAR *pPipeNumber; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pPipeNumber = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[12] ); <br>         <br>        dwFlags = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        pPipeNumber = &amp;_M66; <br>         <br>        _RetVal = RemoteAdmGetGALDirectory(dwFlags,pPipeNumber); <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = *pPipeNumber; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmTerminateNotifA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned char __RPC_FAR *szComputerName; <br>    unsigned long ulConnectionID; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szComputerName = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[20] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        ulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>         <br>        _RetVal = RemoteAdmTerminateNotifA(szComputerName,ulConnectionID); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmValidateNotifA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M67; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long __RPC_FAR *pulConnectionID; <br>    unsigned char __RPC_FAR *szComputerName; <br>    unsigned long ulNotifMask; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szComputerName = 0; <br>    pulConnectionID = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[28] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        ulNotifMask = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        pulConnectionID = &amp;_M67; <br>         <br>        _RetVal = RemoteAdmValidateNotifA( <br>                                  szComputerName, <br>                                  ulNotifMask, <br>                                  pulConnectionID); <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pulConnectionID; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmCreateMailboxA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_A __RPC_FAR *pMailboxInfo; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[40] ); <br>         <br>        NdrSimpleStructUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[36], <br>                                   (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmCreateMailboxA(pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetMailboxPropsA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M68; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_A _pMailboxInfoM; <br>    unsigned long dwObjID; <br>    ADM_MAILBOX_INFO_A __RPC_FAR *pMailboxInfo; <br>    unsigned long __RPC_FAR *pdwObjType; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pdwObjType = 0; <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[46] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        pdwObjType = &amp;_M68; <br>        pMailboxInfo = &amp;_pMailboxInfoM; <br>         <br>        _RetVal = RemoteAdmGetMailboxPropsA( <br>                                    dwObjID, <br>                                    pdwObjType, <br>                                    pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U + 0U + 11U; <br>        NdrSimpleStructBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR *)pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[36] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwObjType; <br>         <br>        NdrSimpleStructMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                 (unsigned char __RPC_FAR *)pMailboxInfo, <br>                                 (PFORMAT_STRING) &amp;__MIDLFormatString.Format[36] ); <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmSetMailboxPropsA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_A __RPC_FAR *pMailboxInfo; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[40] ); <br>         <br>        NdrSimpleStructUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[36], <br>                                   (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmSetMailboxPropsA(pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmCreateDistListA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwFlags; <br>    unsigned long dwOwnerID; <br>    DLM_XMIT_LIST_A __RPC_FAR *pMembers; <br>    unsigned char __RPC_FAR *szDLAlias; <br>    unsigned char __RPC_FAR *szDLFullName; <br>    unsigned char __RPC_FAR *szOwnerAlias; <br>    unsigned char __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[58] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwFlags = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwOwnerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[156], <br>                                  (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmCreateDistListA( <br>                                   szDLAlias, <br>                                   szDLFullName, <br>                                   dwFlags, <br>                                   szOwnerAlias, <br>                                   szOwnerName, <br>                                   dwOwnerID, <br>                                   pMembers); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[102] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetDLPropsA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M69; <br>    unsigned long _M70; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwObjID; <br>    DLM_XMIT_LIST_A __RPC_FAR *pMembers; <br>    unsigned long __RPC_FAR *pdwFlags; <br>    unsigned long __RPC_FAR *pdwOwnerID; <br>    unsigned char __RPC_FAR *szComments; <br>    unsigned char __RPC_FAR *szDLAlias; <br>    unsigned char __RPC_FAR *szDLFullName; <br>    unsigned char __RPC_FAR *szOwnerAlias; <br>    unsigned char __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    pdwFlags = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    pdwOwnerID = 0; <br>    szComments = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[84] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[220], <br>                                  (unsigned char)0 ); <br>         <br>        szDLAlias = _StubMsg.pfnAllocate((16 + 1) * 1); <br>        szDLFullName = _StubMsg.pfnAllocate((32 + 1) * 1); <br>        pdwFlags = &amp;_M69; <br>        szOwnerAlias = _StubMsg.pfnAllocate((16 + 1) * 1); <br>        szOwnerName = _StubMsg.pfnAllocate((32 + 1) * 1); <br>        pdwOwnerID = &amp;_M70; <br>        szComments = _StubMsg.pfnAllocate((79 + 1) * 1); <br>         <br>        _RetVal = RemoteAdmGetDLPropsA( <br>                               dwObjID, <br>                               szDLAlias, <br>                               szDLFullName, <br>                               pdwFlags, <br>                               szOwnerAlias, <br>                               szOwnerName, <br>                               pdwOwnerID, <br>                               szComments, <br>                               pMembers); <br>         <br>        _StubMsg.BufferLength = 12U + 13U + 11U + 13U + 13U + 11U + 13U + 0U + 11U; <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[170] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[180] ); <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[190] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[200] ); <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[210] ); <br>         <br>        NdrXmitOrRepAsBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR *)pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[220] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szDLAlias, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[170] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szDLFullName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[180] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwFlags; <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOwnerAlias, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[190] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOwnerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[200] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwOwnerID; <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComments, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[210] ); <br>         <br>        NdrXmitOrRepAsMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                (unsigned char __RPC_FAR *)pMembers, <br>                                (PFORMAT_STRING) &amp;__MIDLFormatString.Format[220] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szDLAlias, </code></pre>
<p>
</p>
<pre><code>&amp;__MIDLFormatString.Format[166] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szDLFullName, <br>                        &amp;__MIDLFormatString.Format[176] ); <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szOwnerAlias, <br>                        &amp;__MIDLFormatString.Format[186] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szOwnerName, <br>                        &amp;__MIDLFormatString.Format[196] ); <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szComments, <br>                        &amp;__MIDLFormatString.Format[206] ); <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[216] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmSetDLPropsA( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwFlags; <br>    unsigned long dwObjID; <br>    unsigned long dwOwnerID; <br>    DLM_XMIT_LIST_A __RPC_FAR *pMembers; <br>    unsigned char __RPC_FAR *szComments; <br>    unsigned char __RPC_FAR *szDLAlias; <br>    unsigned char __RPC_FAR *szDLFullName; <br>    unsigned char __RPC_FAR *szOwnerAlias; <br>    unsigned char __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    szComments = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[120] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwFlags = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwOwnerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6], <br>                                       (unsigned char)0 ); <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[234], <br>                                  (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmSetDLPropsA( <br>                               dwObjID, <br>                               szDLAlias, <br>                               szDLFullName, <br>                               dwFlags, <br>                               szOwnerAlias, <br>                               szOwnerName, <br>                               dwOwnerID, <br>                               szComments, <br>                               pMembers); <br>         <br>        _StubMsg.BufferLength = 0U + 11U; <br>        NdrXmitOrRepAsBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR *)pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[234] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        NdrXmitOrRepAsMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                (unsigned char __RPC_FAR *)pMembers, <br>                                (PFORMAT_STRING) &amp;__MIDLFormatString.Format[234] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[230] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmTerminateNotifW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    wchar_t __RPC_FAR *szComputerName; <br>    unsigned long ulConnectionID; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szComputerName = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[152] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        ulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>         <br>        _RetVal = RemoteAdmTerminateNotifW(szComputerName,ulConnectionID); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmValidateNotifW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M71; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long __RPC_FAR *pulConnectionID; <br>    wchar_t __RPC_FAR *szComputerName; <br>    unsigned long ulNotifMask; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szComputerName = 0; <br>    pulConnectionID = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[160] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        ulNotifMask = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        pulConnectionID = &amp;_M71; <br>         <br>        _RetVal = RemoteAdmValidateNotifW( <br>                                  szComputerName, <br>                                  ulNotifMask, <br>                                  pulConnectionID); <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pulConnectionID; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmCreateMailboxW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_W __RPC_FAR *pMailboxInfo; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[172] ); <br>         <br>        NdrSimpleStructUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[276], <br>                                   (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmCreateMailboxW(pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetMailboxPropsW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M72; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_W _pMailboxInfoM; <br>    unsigned long dwObjID; <br>    ADM_MAILBOX_INFO_W __RPC_FAR *pMailboxInfo; <br>    unsigned long __RPC_FAR *pdwObjType; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pdwObjType = 0; <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[178] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        pdwObjType = &amp;_M72; <br>        pMailboxInfo = &amp;_pMailboxInfoM; <br>         <br>        _RetVal = RemoteAdmGetMailboxPropsW( <br>                                    dwObjID, <br>                                    pdwObjType, <br>                                    pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U + 0U + 11U; <br>        NdrSimpleStructBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR *)pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[276] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwObjType; <br>         <br>        NdrSimpleStructMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                 (unsigned char __RPC_FAR *)pMailboxInfo, <br>                                 (PFORMAT_STRING) &amp;__MIDLFormatString.Format[276] ); <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmSetMailboxPropsW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    ADM_MAILBOX_INFO_W __RPC_FAR *pMailboxInfo; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    pMailboxInfo = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[172] ); <br>         <br>        NdrSimpleStructUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                   (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMailboxInfo, <br>                                   (PFORMAT_STRING) &amp;__MIDLFormatString.Format[276], <br>                                   (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmSetMailboxPropsW(pMailboxInfo); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmCreateDistListW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwFlags; <br>    unsigned long dwOwnerID; <br>    DLM_XMIT_LIST_W __RPC_FAR *pMembers; <br>    wchar_t __RPC_FAR *szDLAlias; <br>    wchar_t __RPC_FAR *szDLFullName; <br>    wchar_t __RPC_FAR *szOwnerAlias; <br>    wchar_t __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[190] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwFlags = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwOwnerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[396], <br>                                  (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmCreateDistListW( <br>                                   szDLAlias, <br>                                   szDLFullName, <br>                                   dwFlags, <br>                                   szOwnerAlias, <br>                                   szOwnerName, <br>                                   dwOwnerID, <br>                                   pMembers); <br>         <br>        _StubMsg.BufferLength = 4U; <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[342] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmGetDLPropsW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    unsigned long _M73; <br>    unsigned long _M74; <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwObjID; <br>    DLM_XMIT_LIST_W __RPC_FAR *pMembers; <br>    unsigned long __RPC_FAR *pdwFlags; <br>    unsigned long __RPC_FAR *pdwOwnerID; <br>    wchar_t __RPC_FAR *szComments; <br>    wchar_t __RPC_FAR *szDLAlias; <br>    wchar_t __RPC_FAR *szDLFullName; <br>    wchar_t __RPC_FAR *szOwnerAlias; <br>    wchar_t __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    pdwFlags = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    pdwOwnerID = 0; <br>    szComments = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[216] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[460], <br>                                  (unsigned char)0 ); <br>         <br>        szDLAlias = _StubMsg.pfnAllocate((16 + 1) * 2); <br>        szDLFullName = _StubMsg.pfnAllocate((32 + 1) * 2); <br>        pdwFlags = &amp;_M73; <br>        szOwnerAlias = _StubMsg.pfnAllocate((16 + 1) * 2); <br>        szOwnerName = _StubMsg.pfnAllocate((32 + 1) * 2); <br>        pdwOwnerID = &amp;_M74; <br>        szComments = _StubMsg.pfnAllocate((79 + 1) * 2); <br>         <br>        _RetVal = RemoteAdmGetDLPropsW( <br>                               dwObjID, <br>                               szDLAlias, <br>                               szDLFullName, <br>                               pdwFlags, <br>                               szOwnerAlias, <br>                               szOwnerName, <br>                               pdwOwnerID, <br>                               szComments, <br>                               pMembers); <br>         <br>        _StubMsg.BufferLength = 12U + 14U + 10U + 14U + 14U + 10U + 14U + 0U + 11U; <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[410] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[420] ); <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[430] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[440] ); <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[450] ); <br>         <br>        NdrXmitOrRepAsBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR *)pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[460] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szDLAlias, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[410] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szDLFullName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[420] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwFlags; <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOwnerAlias, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[430] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOwnerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[440] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = *pdwOwnerID; <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComments, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[450] ); <br>         <br>        NdrXmitOrRepAsMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                (unsigned char __RPC_FAR *)pMembers, <br>                                (PFORMAT_STRING) &amp;__MIDLFormatString.Format[460] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szDLAlias, <br>                        &amp;__MIDLFormatString.Format[406] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szDLFullName, <br>                        &amp;__MIDLFormatString.Format[416] ); <br>         <br>        _StubMsg.MaxCount = 16 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szOwnerAlias, <br>                        &amp;__MIDLFormatString.Format[426] ); <br>         <br>        _StubMsg.MaxCount = 32 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szOwnerName, <br>                        &amp;__MIDLFormatString.Format[436] ); <br>         <br>        _StubMsg.MaxCount = 79 + 1; <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)szComments, <br>                        &amp;__MIDLFormatString.Format[446] ); <br>         <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[456] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>void __RPC_STUB <br>WINDSADM_RemoteAdmSetDLPropsW( <br>    PRPC_MESSAGE _pRpcMessage ) <br>{ <br>    long _RetVal; <br>    MIDL_STUB_MESSAGE _StubMsg; <br>    unsigned long dwFlags; <br>    unsigned long dwObjID; <br>    unsigned long dwOwnerID; <br>    DLM_XMIT_LIST_W __RPC_FAR *pMembers; <br>    wchar_t __RPC_FAR *szComments; <br>    wchar_t __RPC_FAR *szDLAlias; <br>    wchar_t __RPC_FAR *szDLFullName; <br>    wchar_t __RPC_FAR *szOwnerAlias; <br>    wchar_t __RPC_FAR *szOwnerName; <br>    RPC_STATUS _Status; <br>     <br>    NdrServerInitializeNew( <br>                          _pRpcMessage, <br>                          &amp;_StubMsg, <br>                          &amp;WINDSADM_StubDesc); <br>     <br>    szDLAlias = 0; <br>    szDLFullName = 0; <br>    szOwnerAlias = 0; <br>    szOwnerName = 0; <br>    szComments = 0; <br>    pMembers = 0; <br>    RpcTryFinally <br>        { <br>        if ( (_pRpcMessage-&gt;DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[252] ); <br>         <br>        dwObjID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, </code></pre>
<p>
</p>
<pre><code>(unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwFlags = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        dwOwnerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[246], <br>                                       (unsigned char)0 ); <br>         <br>        NdrXmitOrRepAsUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR * __RPC_FAR *)&amp;pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[474], <br>                                  (unsigned char)0 ); <br>         <br>         <br>        _RetVal = RemoteAdmSetDLPropsW( <br>                               dwObjID, <br>                               szDLAlias, <br>                               szDLFullName, <br>                               dwFlags, <br>                               szOwnerAlias, <br>                               szOwnerName, <br>                               dwOwnerID, <br>                               szComments, <br>                               pMembers); <br>         <br>        _StubMsg.BufferLength = 0U + 11U; <br>        NdrXmitOrRepAsBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                  (unsigned char __RPC_FAR *)pMembers, <br>                                  (PFORMAT_STRING) &amp;__MIDLFormatString.Format[474] ); <br>         <br>        _StubMsg.BufferLength += 16; <br>         <br>        _pRpcMessage-&gt;BufferLength = _StubMsg.BufferLength; <br>         <br>        _Status = I_RpcGetBuffer( _pRpcMessage );  <br>        if ( _Status ) <br>            RpcRaiseException( _Status ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *) _pRpcMessage-&gt;Buffer; <br>         <br>        NdrXmitOrRepAsMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                (unsigned char __RPC_FAR *)pMembers, <br>                                (PFORMAT_STRING) &amp;__MIDLFormatString.Format[474] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( long __RPC_FAR * )_StubMsg.Buffer)++ = _RetVal; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrPointerFree( &amp;_StubMsg, <br>                        (unsigned char __RPC_FAR *)pMembers, <br>                        &amp;__MIDLFormatString.Format[470] ); <br>         <br>        } <br>    RpcEndFinally <br>    _pRpcMessage-&gt;BufferLength =  <br>        (unsigned int)((long)_StubMsg.Buffer - (long)_pRpcMessage-&gt;Buffer); <br>     <br>} <br> <br>extern const XMIT_ROUTINE_QUINTUPLE TransmitAsRoutines[]; <br> <br>static const MIDL_STUB_DESC WINDSADM_StubDesc =  <br>    { <br>    (void __RPC_FAR *)&amp; WINDSADM___RpcServerInterface, <br>    MIDL_user_allocate, <br>    MIDL_user_free, <br>    0, <br>    0, <br>    0, <br>    0, <br>    TransmitAsRoutines, <br>    __MIDLFormatString.Format, <br>    0, /* -error bounds_check flag */ <br>    0x10001, /* Ndr library version */ <br>    0, <br>    0x2000066, /* MIDL Version 2.0.102 */ <br>    0 <br>    }; <br> <br>static RPC_DISPATCH_FUNCTION WINDSADM_table[] = <br>    { <br>    WINDSADM_RemoteAdmIsServerRunning, <br>    WINDSADM_RemoteAdmDeleteObject, <br>    WINDSADM_RemoteAdmGetServerMailboxes, <br>    WINDSADM_RemoteAdmGetServerDistLists, <br>    WINDSADM_RemoteAdmEmptyMailbox, <br>    WINDSADM_RemoteAdmGetGALDirectory, <br>    WINDSADM_RemoteAdmTerminateNotifA, <br>    WINDSADM_RemoteAdmValidateNotifA, <br>    WINDSADM_RemoteAdmCreateMailboxA, <br>    WINDSADM_RemoteAdmGetMailboxPropsA, <br>    WINDSADM_RemoteAdmSetMailboxPropsA, <br>    WINDSADM_RemoteAdmCreateDistListA, <br>    WINDSADM_RemoteAdmGetDLPropsA, <br>    WINDSADM_RemoteAdmSetDLPropsA, <br>    WINDSADM_RemoteAdmTerminateNotifW, <br>    WINDSADM_RemoteAdmValidateNotifW, <br>    WINDSADM_RemoteAdmCreateMailboxW, <br>    WINDSADM_RemoteAdmGetMailboxPropsW, <br>    WINDSADM_RemoteAdmSetMailboxPropsW, <br>    WINDSADM_RemoteAdmCreateDistListW, <br>    WINDSADM_RemoteAdmGetDLPropsW, <br>    WINDSADM_RemoteAdmSetDLPropsW, <br>    0 <br>    }; <br>RPC_DISPATCH_TABLE WINDSADM_v1_0_DispatchTable =  <br>    { <br>    22, <br>    WINDSADM_table <br>    }; <br>void __RPC_USER <br>DLM_XMIT_LIST_A_XmitTranslateToXmit_0000( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_A_to_xmit( (DLM_XMIT_LIST_A __RPC_FAR *) pStubMsg-&gt;pPresentedType,  <br>        (DLM_ARRAY_A __RPC_FAR * __RPC_FAR *) &amp;pStubMsg-&gt;pTransmitType ); <br>     <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_A_XmitTranslateFromXmit_0000( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_A_from_xmit( (DLM_ARRAY_A __RPC_FAR *) pStubMsg-&gt;pTransmitType,  <br>        (DLM_XMIT_LIST_A __RPC_FAR *) pStubMsg-&gt;pPresentedType );  <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_A_XmitFreeXmit_0000( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_A_free_xmit( (DLM_ARRAY_A __RPC_FAR *) pStubMsg-&gt;pTransmitType ); <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_A_XmitFreeInst_0000( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_A_free_inst( (DLM_XMIT_LIST_A __RPC_FAR *) pStubMsg-&gt;pPresentedType );  <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_W_XmitTranslateToXmit_0001( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_W_to_xmit( (DLM_XMIT_LIST_W __RPC_FAR *) pStubMsg-&gt;pPresentedType,  <br>        (DLM_ARRAY_W __RPC_FAR * __RPC_FAR *) &amp;pStubMsg-&gt;pTransmitType ); <br>     <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_W_XmitTranslateFromXmit_0001( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_W_from_xmit( (DLM_ARRAY_W __RPC_FAR *) pStubMsg-&gt;pTransmitType,  <br>        (DLM_XMIT_LIST_W __RPC_FAR *) pStubMsg-&gt;pPresentedType );  <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_W_XmitFreeXmit_0001( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_W_free_xmit( (DLM_ARRAY_W __RPC_FAR *) pStubMsg-&gt;pTransmitType ); <br>} <br>void __RPC_USER <br>DLM_XMIT_LIST_W_XmitFreeInst_0001( PMIDL_STUB_MESSAGE pStubMsg ) <br>{ <br>    DLM_XMIT_LIST_W_free_inst( (DLM_XMIT_LIST_W __RPC_FAR *) pStubMsg-&gt;pPresentedType );  <br>} <br> <br>static const XMIT_ROUTINE_QUINTUPLE TransmitAsRoutines[] =  <br>        { <br>             <br>            { <br>            DLM_XMIT_LIST_A_XmitTranslateToXmit_0000 <br>            ,DLM_XMIT_LIST_A_XmitTranslateFromXmit_0000 <br>            ,DLM_XMIT_LIST_A_XmitFreeXmit_0000 <br>            ,DLM_XMIT_LIST_A_XmitFreeInst_0000 <br>            }, <br>            { <br>            DLM_XMIT_LIST_W_XmitTranslateToXmit_0001 <br>            ,DLM_XMIT_LIST_W_XmitTranslateFromXmit_0001 <br>            ,DLM_XMIT_LIST_W_XmitFreeXmit_0001 <br>            ,DLM_XMIT_LIST_W_XmitFreeInst_0001 <br>            } <br> <br>        }; <br> <br> <br>#if !defined(__RPC_WIN32__) <br>#error  Invalid build platform for this stub. <br>#endif <br> <br>static const MIDL_FORMAT_STRING __MIDLProcFormatString = <br>    { <br>        0, <br>        { <br>            0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/*  2 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/*  4 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/*  6 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/*  8 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 10 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 12 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 14 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 16 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 18 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 20 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 22 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 24 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 26 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 28 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 30 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 32 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 34 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 36 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 38 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 40 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 42 */    NdrFcShort( 0x8 ),  /* Type Offset=8 */ <br>/* 44 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 46 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 48 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 50 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 52 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 54 */    NdrFcShort( 0x62 ), /* Type Offset=98 */ <br>/* 56 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 58 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 60 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 62 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 64 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 66 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 68 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 70 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 72 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 74 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 76 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 78 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 80 */    NdrFcShort( 0x66 ), /* Type Offset=102 */ <br>/* 82 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 84 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 86 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 88 */    NdrFcShort( 0xa6 ), /* Type Offset=166 */ <br>/* 90 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 92 */    NdrFcShort( 0xb0 ), /* Type Offset=176 */ <br>/* 94 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 96 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 98 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 100 */   NdrFcShort( 0xba ), /* Type Offset=186 */ <br>/* 102 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 104 */   NdrFcShort( 0xc4 ), /* Type Offset=196 */ <br>/* 106 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 108 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 110 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 112 */   NdrFcShort( 0xce ), /* Type Offset=206 */ <br>/* 114 */    <br>            0x50,       /* FC_IN_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 116 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 118 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 120 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 122 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 124 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 126 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 128 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 130 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 132 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 134 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 136 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 138 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 140 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 142 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 144 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 146 */    <br>            0x50,       /* FC_IN_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 148 */   NdrFcShort( 0xe6 ), /* Type Offset=230 */ <br>/* 150 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 152 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 154 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 156 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 158 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 160 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 162 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 164 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 166 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 168 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 170 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 172 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 174 */   NdrFcShort( 0xf8 ), /* Type Offset=248 */ <br>/* 176 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 178 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 180 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 182 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 184 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 186 */   NdrFcShort( 0x152 ),    /* Type Offset=338 */ <br>/* 188 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 190 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 192 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 194 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 196 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 198 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 200 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 202 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 204 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 206 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 208 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 210 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 212 */   NdrFcShort( 0x156 ),    /* Type Offset=342 */ <br>/* 214 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 216 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 218 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 220 */   NdrFcShort( 0x196 ),    /* Type Offset=406 */ <br>/* 222 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 224 */   NdrFcShort( 0x1a0 ),    /* Type Offset=416 */ <br>/* 226 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 228 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 230 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 232 */   NdrFcShort( 0x1aa ),    /* Type Offset=426 */ <br>/* 234 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 236 */   NdrFcShort( 0x1b4 ),    /* Type Offset=436 */ <br>/* 238 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 240 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 242 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 244 */   NdrFcShort( 0x1be ),    /* Type Offset=446 */ <br>/* 246 */    <br>            0x50,       /* FC_IN_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 248 */   NdrFcShort( 0x1c8 ),    /* Type Offset=456 */ <br>/* 250 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 252 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 254 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 256 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 258 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 260 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 262 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 264 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 266 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 268 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 270 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 272 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 274 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 276 */   NdrFcShort( 0xf4 ), /* Type Offset=244 */ <br>/* 278 */    <br>            0x50,       /* FC_IN_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 280 */   NdrFcShort( 0x1d6 ),    /* Type Offset=470 */ <br>/* 282 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br> <br>            0x0 <br>        } <br>    }; <br> <br>static const MIDL_FORMAT_STRING __MIDLFormatString = <br>    { <br>        0, <br>        { <br>            0x11, 0xc,  /* FC_RP [alloced_on_stack] [simple_pointer] */ <br>/*  2 */    0x8,        /* FC_LONG */ <br>            0x5c,       /* FC_PAD */ <br>/*  4 */     <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/*  6 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x5c,       /* FC_PAD */ <br>/*  8 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 10 */    NdrFcShort( 0x1a ), /* Offset= 26 (36) */ <br>/* 12 */     <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 14 */    NdrFcShort( 0x11 ), /* 17 */ <br>/* 16 */    0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 18 */     <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 20 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 22 */    0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 24 */     <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 26 */    NdrFcShort( 0xd ),  /* 13 */ <br>/* 28 */    0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 30 */     <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 32 */    NdrFcShort( 0x50 ), /* 80 */ <br>/* 34 */    0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 36 */     <br>            0x15,       /* FC_STRUCT */ <br>            0x3,        /* 3 */ <br>/* 38 */    NdrFcShort( 0x18c ),    /* 396 */ <br>/* 40 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 42 */    NdrFcShort( 0xffffffe2 ),   /* Offset= -30 (12) */ <br>/* 44 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 46 */    NdrFcShort( 0xffffffe4 ),   /* Offset= -28 (18) */ <br>/* 48 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 50 */    NdrFcShort( 0xffffffe0 ),   /* Offset= -32 (18) */ <br>/* 52 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 54 */    NdrFcShort( 0xffffffdc ),   /* Offset= -36 (18) */ <br>/* 56 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 58 */    NdrFcShort( 0xffffffde ),   /* Offset= -34 (24) */ <br>/* 60 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 62 */    NdrFcShort( 0xffffffda ),   /* Offset= -38 (24) */ <br>/* 64 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 66 */    NdrFcShort( 0xffffffd6 ),   /* Offset= -42 (24) */ <br>/* 68 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 70 */    NdrFcShort( 0xffffffc6 ),   /* Offset= -58 (12) */ <br>/* 72 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 74 */    NdrFcShort( 0xffffffc8 ),   /* Offset= -56 (18) */ <br>/* 76 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 78 */    NdrFcShort( 0xffffffc4 ),   /* Offset= -60 (18) */ <br>/* 80 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 82 */    NdrFcShort( 0xffffffcc ),   /* Offset= -52 (30) */ <br>/* 84 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 86 */    NdrFcShort( 0xffffffbc ),   /* Offset= -68 (18) */ <br>/* 88 */    0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 90 */    NdrFcShort( 0xffffffb8 ),   /* Offset= -72 (18) */ <br>/* 92 */    0x38,       /* FC_ALIGNM4 */ <br>            0x8,        /* FC_LONG */ <br>/* 94 */    0x8,        /* FC_LONG */ <br>            0x8,        /* FC_LONG */ <br>/* 96 */    0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 98 */     <br>            0x11, 0x4,  /* FC_RP [alloced_on_stack] */ <br>/* 100 */   NdrFcShort( 0xffffffc0 ),   /* Offset= -64 (36) */ <br>/* 102 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 104 */   NdrFcShort( 0x34 ), /* Offset= 52 (156) */ <br>/* 106 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 108 */   NdrFcShort( 0x24 ), /* 36 */ <br>/* 110 */   0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 112 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x0,        /* 0 */ <br>/* 114 */   NdrFcShort( 0x14 ), /* 20 */ <br>/* 116 */   0x2,        /* FC_CHAR */ <br>            0x5b,       /* FC_END */ <br>/* 118 */    <br>            0x15,       /* FC_STRUCT */ <br>            0x3,        /* 3 */ <br>/* 120 */   NdrFcShort( 0x40 ), /* 64 */ <br>/* 122 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ </code></pre>
<p>
</p>
<pre><code>/* 124 */   NdrFcShort( 0xffffffee ),   /* Offset= -18 (106) */ <br>/* 126 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 128 */   NdrFcShort( 0xfffffff0 ),   /* Offset= -16 (112) */ <br>/* 130 */   0x8,        /* FC_LONG */ <br>            0x8,        /* FC_LONG */ <br>/* 132 */   0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 134 */    <br>            0x1b,       /* FC_CARRAY */ <br>            0x3,        /* 3 */ <br>/* 136 */   NdrFcShort( 0x40 ), /* 64 */ <br>/* 138 */   0x8,        /* 8 */ <br>            0x0,        /*  */ <br>/* 140 */   NdrFcShort( 0xfffffffc ),   /* -4 */ <br>/* 142 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 144 */   NdrFcShort( 0xffffffe6 ),   /* Offset= -26 (118) */ <br>/* 146 */   0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 148 */    <br>            0x17,       /* FC_CSTRUCT */ <br>            0x3,        /* 3 */ <br>/* 150 */   NdrFcShort( 0x4 ),  /* 4 */ <br>/* 152 */   NdrFcShort( 0xffffffee ),   /* Offset= -18 (134) */ <br>/* 154 */   0x8,        /* FC_LONG */ <br>            0x5b,       /* FC_END */ <br>/* 156 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 158 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 160 */   NdrFcShort( 0x44 ), /* 68 */ <br>/* 162 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 164 */   NdrFcShort( 0xfffffff0 ),   /* Offset= -16 (148) */ <br>/* 166 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 168 */   NdrFcShort( 0x2 ),  /* Offset= 2 (170) */ <br>/* 170 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 172 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 174 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 176 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 178 */   NdrFcShort( 0x2 ),  /* Offset= 2 (180) */ <br>/* 180 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 182 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 184 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 186 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 188 */   NdrFcShort( 0x2 ),  /* Offset= 2 (190) */ <br>/* 190 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 192 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 194 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 196 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 198 */   NdrFcShort( 0x2 ),  /* Offset= 2 (200) */ <br>/* 200 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 202 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 204 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 206 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 208 */   NdrFcShort( 0x2 ),  /* Offset= 2 (210) */ <br>/* 210 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 212 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 214 */   NdrFcShort( 0x50 ), /* 80 */ <br>/* 216 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 218 */   NdrFcShort( 0x2 ),  /* Offset= 2 (220) */ <br>/* 220 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 222 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 224 */   NdrFcShort( 0x44 ), /* 68 */ <br>/* 226 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 228 */   NdrFcShort( 0xffffffb0 ),   /* Offset= -80 (148) */ <br>/* 230 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 232 */   NdrFcShort( 0x2 ),  /* Offset= 2 (234) */ <br>/* 234 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 236 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 238 */   NdrFcShort( 0x44 ), /* 68 */ <br>/* 240 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 242 */   NdrFcShort( 0xffffffa2 ),   /* Offset= -94 (148) */ <br>/* 244 */    <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/* 246 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x5c,       /* FC_PAD */ <br>/* 248 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 250 */   NdrFcShort( 0x1a ), /* Offset= 26 (276) */ <br>/* 252 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 254 */   NdrFcShort( 0x22 ), /* 34 */ <br>/* 256 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 258 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 260 */   NdrFcShort( 0x42 ), /* 66 */ <br>/* 262 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 264 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 266 */   NdrFcShort( 0x1a ), /* 26 */ <br>/* 268 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 270 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 272 */   NdrFcShort( 0xa0 ), /* 160 */ <br>/* 274 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 276 */    <br>            0x15,       /* FC_STRUCT */ <br>            0x3,        /* 3 */ <br>/* 278 */   NdrFcShort( 0x30c ),    /* 780 */ <br>/* 280 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 282 */   NdrFcShort( 0xffffffe2 ),   /* Offset= -30 (252) */ <br>/* 284 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 286 */   NdrFcShort( 0xffffffe4 ),   /* Offset= -28 (258) */ <br>/* 288 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 290 */   NdrFcShort( 0xffffffe0 ),   /* Offset= -32 (258) */ <br>/* 292 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 294 */   NdrFcShort( 0xffffffdc ),   /* Offset= -36 (258) */ <br>/* 296 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 298 */   NdrFcShort( 0xffffffde ),   /* Offset= -34 (264) */ <br>/* 300 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 302 */   NdrFcShort( 0xffffffda ),   /* Offset= -38 (264) */ <br>/* 304 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 306 */   NdrFcShort( 0xffffffd6 ),   /* Offset= -42 (264) */ <br>/* 308 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 310 */   NdrFcShort( 0xffffffc6 ),   /* Offset= -58 (252) */ <br>/* 312 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 314 */   NdrFcShort( 0xffffffc8 ),   /* Offset= -56 (258) */ <br>/* 316 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 318 */   NdrFcShort( 0xffffffc4 ),   /* Offset= -60 (258) */ <br>/* 320 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 322 */   NdrFcShort( 0xffffffcc ),   /* Offset= -52 (270) */ <br>/* 324 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 326 */   NdrFcShort( 0xffffffbc ),   /* Offset= -68 (258) */ <br>/* 328 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 330 */   NdrFcShort( 0xffffffb8 ),   /* Offset= -72 (258) */ <br>/* 332 */   0x38,       /* FC_ALIGNM4 */ <br>            0x8,        /* FC_LONG */ <br>/* 334 */   0x8,        /* FC_LONG */ <br>            0x8,        /* FC_LONG */ <br>/* 336 */   0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 338 */    <br>            0x11, 0x4,  /* FC_RP [alloced_on_stack] */ <br>/* 340 */   NdrFcShort( 0xffffffc0 ),   /* Offset= -64 (276) */ <br>/* 342 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 344 */   NdrFcShort( 0x34 ), /* Offset= 52 (396) */ <br>/* 346 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 348 */   NdrFcShort( 0x48 ), /* 72 */ <br>/* 350 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 352 */    <br>            0x1d,       /* FC_SMFARRAY */ <br>            0x1,        /* 1 */ <br>/* 354 */   NdrFcShort( 0x28 ), /* 40 */ <br>/* 356 */   0x5,        /* FC_WCHAR */ <br>            0x5b,       /* FC_END */ <br>/* 358 */    <br>            0x15,       /* FC_STRUCT */ <br>            0x3,        /* 3 */ <br>/* 360 */   NdrFcShort( 0x78 ), /* 120 */ <br>/* 362 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 364 */   NdrFcShort( 0xffffffee ),   /* Offset= -18 (346) */ <br>/* 366 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 368 */   NdrFcShort( 0xfffffff0 ),   /* Offset= -16 (352) */ <br>/* 370 */   0x8,        /* FC_LONG */ <br>            0x8,        /* FC_LONG */ <br>/* 372 */   0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 374 */    <br>            0x1b,       /* FC_CARRAY */ <br>            0x3,        /* 3 */ <br>/* 376 */   NdrFcShort( 0x78 ), /* 120 */ <br>/* 378 */   0x8,        /* 8 */ <br>            0x0,        /*  */ <br>/* 380 */   NdrFcShort( 0xfffffffc ),   /* -4 */ <br>/* 382 */   0x4c,       /* FC_EMBEDDED_COMPLEX */ <br>            0x0,        /* 0 */ <br>/* 384 */   NdrFcShort( 0xffffffe6 ),   /* Offset= -26 (358) */ <br>/* 386 */   0x5c,       /* FC_PAD */ <br>            0x5b,       /* FC_END */ <br>/* 388 */    <br>            0x17,       /* FC_CSTRUCT */ <br>            0x3,        /* 3 */ <br>/* 390 */   NdrFcShort( 0x4 ),  /* 4 */ <br>/* 392 */   NdrFcShort( 0xffffffee ),   /* Offset= -18 (374) */ <br>/* 394 */   0x8,        /* FC_LONG */ <br>            0x5b,       /* FC_END */ <br>/* 396 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 398 */   NdrFcShort( 0x1 ),  /* 1 */ <br>/* 400 */   NdrFcShort( 0x7c ), /* 124 */ <br>/* 402 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 404 */   NdrFcShort( 0xfffffff0 ),   /* Offset= -16 (388) */ <br>/* 406 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 408 */   NdrFcShort( 0x2 ),  /* Offset= 2 (410) */ <br>/* 410 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 412 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 414 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 416 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 418 */   NdrFcShort( 0x2 ),  /* Offset= 2 (420) */ <br>/* 420 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 422 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 424 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 426 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 428 */   NdrFcShort( 0x2 ),  /* Offset= 2 (430) */ <br>/* 430 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 432 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 434 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 436 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 438 */   NdrFcShort( 0x2 ),  /* Offset= 2 (440) */ <br>/* 440 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 442 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 444 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 446 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 448 */   NdrFcShort( 0x2 ),  /* Offset= 2 (450) */ <br>/* 450 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 452 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 454 */   NdrFcShort( 0x50 ), /* 80 */ <br>/* 456 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 458 */   NdrFcShort( 0x2 ),  /* Offset= 2 (460) */ <br>/* 460 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 462 */   NdrFcShort( 0x1 ),  /* 1 */ <br>/* 464 */   NdrFcShort( 0x7c ), /* 124 */ <br>/* 466 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 468 */   NdrFcShort( 0xffffffb0 ),   /* Offset= -80 (388) */ <br>/* 470 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 472 */   NdrFcShort( 0x2 ),  /* Offset= 2 (474) */ <br>/* 474 */   0x2d,       /* FC_TRANSMIT_AS */ <br>            0x3,        /* 3 */ <br>/* 476 */   NdrFcShort( 0x1 ),  /* 1 */ <br>/* 478 */   NdrFcShort( 0x7c ), /* 124 */ <br>/* 480 */   NdrFcShort( 0x0 ),  /* 0 */ <br>/* 482 */   NdrFcShort( 0xffffffa2 ),   /* Offset= -94 (388) */ <br> <br>            0x0 <br>        } <br>    }; </code></pre>
<p>&nbsp;</p></body>
</HTML>

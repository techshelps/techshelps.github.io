<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMMON.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2177"></a>COMMON.CPP</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name  <br>//      COMMON.CPP <br>// <br>//  Description <br>// <br>//  Author <br>//      Irving De la Cruz <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#include &lt;WINDOWS.H&gt; <br>#include "TRACES.H" <br>#include "WINDSGBL.H" <br>#include "WDSADM.H" <br>#include "COMMON.H" <br> <br>// Remark this line to turn verbose tracing OFF <br>//#define DO_INFO_TRACES <br>#ifdef DO_INFO_TRACES <br>#define InfoTrace(a)        TraceInfoMessage(a) <br>#else <br>#define InfoTrace(a)        0 <br>#endif // DO_INFO_TRACES <br> <br> <br>extern "C" <br>{ <br>    extern HINSTANCE ghInstance; <br>    extern TCHAR g_szAppTitle[]; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    InsertNewDLMNodeA() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void WINAPI InsertNewDLMNodeA (DLM_INFO_A Info, DLM_XMIT_LIST_A * pList) <br>{ <br>    DLM_LIST_A * pNewNode = (DLM_LIST_A *)midl_user_allocate (sizeof (DLM_LIST_A)); <br>    if (NULL == pNewNode) <br>    { <br>        TraceMessage ("InsertNewDLMNodeA: Failed to allocate new node"); <br>        return; <br>    } <br>    pNewNode-&gt;Info = Info; <br>    pNewNode-&gt;pNext = NULL; <br>     <br>    DLM_XMIT_LIST_A * pCurrent = pList; <br>    while (pCurrent-&gt;pNext) <br>    { <br>        pCurrent = pCurrent-&gt;pNext; <br>    } <br>    pCurrent-&gt;pNext = pNewNode; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_A_to_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_A_to_xmit (DLM_XMIT_LIST_A __RPC_FAR * pList, <br>                                         DLM_ARRAY_A __RPC_FAR * __RPC_FAR * ppArray) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_A_to_xmit: Function invoked"); <br> <br>    DLM_XMIT_LIST_A * pHead = pList;  // save pointer to start <br>    DLM_ARRAY_A * pArray; <br> <br>    // Count the number of member in the list <br>    ULONG ulCount = 0; <br>    for (; pList != NULL; pList = pList-&gt;pNext) <br>    { <br>        ulCount++; <br>    } <br> <br>    *ppArray = NULL; <br> <br>    // Allocate the memory for the array using the MIDL memory allocator (which we implement) <br>    pArray = (DLM_ARRAY_A *)midl_user_allocate (sizeof(DLM_ARRAY_A) + (ulCount * sizeof(DLM_INFO_A))); <br>    if (NULL == pArray) <br>    { <br>        TraceMessage ("DLM_XMIT_LIST_A_to_xmit: Failed to allocate XMIT array"); <br>        return; <br>    } <br>    pArray-&gt;dwCount = ulCount; <br> <br>    // Copy the linked list of members into the allocated array. <br>    for (ulCount = 0, pList = pHead; pList != NULL; pList = pList-&gt;pNext) <br>    { <br>        pArray-&gt;pMembers[ulCount++] = pList-&gt;Info; <br>    } <br> <br>    // Return the array allocated to the RPC stubs <br>    *ppArray = pArray; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_A_from_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_A_from_xmit (DLM_ARRAY_A __RPC_FAR * pArray, <br>                                           DLM_XMIT_LIST_A __RPC_FAR * pList) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_A_from_xmit: Function invoked"); <br>     <br>    if (pArray-&gt;dwCount &lt;= 0) <br>    { <br>        pList = NULL; <br>        return; <br>    } <br> <br>    if (pList == NULL) <br>    { <br>        InsertNewDLMNodeA (pArray-&gt;pMembers[0], pList); <br>    } <br>    else <br>    { <br>        DLM_XMIT_LIST_A_free_inst (pList); <br>        pList-&gt;Info = pArray-&gt;pMembers[0]; <br>        pList-&gt;pNext = NULL; <br>    } <br> <br>    for (UINT i=1; i&lt;pArray-&gt;dwCount; i++) <br>    { <br>        InsertNewDLMNodeA (pArray-&gt;pMembers[i], pList); <br>    } <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_A_free_inst() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_A_free_inst (DLM_XMIT_LIST_A __RPC_FAR * pList) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_A_free_inst: Function invoked"); <br>    // Don't delete the first node. <br>    DLM_XMIT_LIST_A * pNextNode, *pNode = pList-&gt;pNext; <br>    ZeroMemory (pList, sizeof(DLM_XMIT_LIST_A)); <br> <br>    while (pNode) <br>    { <br>        pNextNode = pNode-&gt;pNext; <br>        midl_user_free (pNode); <br>        pNode = pNextNode; <br>    } <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_A_free_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_A_free_xmit (DLM_ARRAY_A __RPC_FAR * pArray) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_A_free_xmit: Function invoked"); <br>    midl_user_free (pArray); <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    InsertNewDLMNodeW() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void WINAPI InsertNewDLMNodeW (DLM_INFO_W Info, DLM_XMIT_LIST_W * pList) <br>{ <br>    DLM_LIST_W * pNewNode = (DLM_LIST_W *)midl_user_allocate (sizeof (DLM_LIST_W)); <br>    if (NULL == pNewNode) <br>    { <br>        TraceMessage ("InsertNewDLMNodeW: Failed to allocate new node"); <br>        return; <br>    } <br>    pNewNode-&gt;Info = Info; <br>    pNewNode-&gt;pNext = NULL; <br>     <br>    DLM_XMIT_LIST_W * pCurrent = pList; <br>    while (pCurrent-&gt;pNext) <br>    { <br>        pCurrent = pCurrent-&gt;pNext; <br>    } <br>    pCurrent-&gt;pNext = pNewNode; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_W_to_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_W_to_xmit (DLM_XMIT_LIST_W __RPC_FAR * pList, <br>                                         DLM_ARRAY_W __RPC_FAR * __RPC_FAR * ppArray) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_W_to_xmit: Function invoked"); <br> <br>    DLM_XMIT_LIST_W * pHead = pList;  // save pointer to start <br>    DLM_ARRAY_W * pArray; <br> <br>    // Count the number of member in the list <br>    ULONG ulCount = 0; <br>    for (; pList != NULL; pList = pList-&gt;pNext) <br>    { <br>        ulCount++; <br>    } <br> <br>    *ppArray = NULL; <br> <br>    // Allocate the memory for the array using the MIDL memory allocator (which we implement) <br>    pArray = (DLM_ARRAY_W *)midl_user_allocate (sizeof(DLM_ARRAY_W) + (ulCount * sizeof(DLM_INFO_W))); <br>    if (NULL == pArray) <br>    { <br>        TraceMessage ("DLM_XMIT_LIST_W_to_xmit: Failed to allocate XMIT array"); <br>        return; <br>    } <br>    pArray-&gt;dwCount = ulCount; <br> <br>    // Copy the linked list of members into the allocated array. <br>    for (ulCount = 0, pList = pHead; pList != NULL; pList = pList-&gt;pNext) <br>    { <br>        pArray-&gt;pMembers[ulCount++] = pList-&gt;Info; <br>    } <br> <br>    // Return the array allocated to the RPC stubs <br>    *ppArray = pArray; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_W_from_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_W_from_xmit (DLM_ARRAY_W __RPC_FAR * pArray, <br>                                           DLM_XMIT_LIST_W __RPC_FAR * pList) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_W_from_xmit: Function invoked"); <br>     <br>    if (pArray-&gt;dwCount &lt;= 0) <br>    { <br>        pList = NULL; <br>        return; <br>    } <br> <br>    if (pList == NULL) <br>    { <br>        InsertNewDLMNodeW (pArray-&gt;pMembers[0], pList); <br>    } <br>    else <br>    { <br>        DLM_XMIT_LIST_W_free_inst (pList); <br>        pList-&gt;Info = pArray-&gt;pMembers[0]; <br>        pList-&gt;pNext = NULL; <br>    } <br> <br>    for (UINT i=1; i&lt;pArray-&gt;dwCount; i++) <br>    { <br>        InsertNewDLMNodeW (pArray-&gt;pMembers[i], pList); <br>    } <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_W_free_inst() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_W_free_inst (DLM_XMIT_LIST_W __RPC_FAR * pList) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_W_free_inst: Function invoked"); <br>    // Don't delete the first node. <br>    DLM_XMIT_LIST_W * pNextNode, * pNode = pList-&gt;pNext; <br>    ZeroMemory (pList, sizeof(DLM_XMIT_LIST_W)); <br> <br>    while (pNode) <br>    { <br>        pNextNode = pNode-&gt;pNext; <br>        midl_user_free (pNode); <br>        pNode = pNextNode; <br>    } <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    DLM_XMIT_LIST_W_free_xmit() <br>// <br>//    Parameters <br>// <br>//    Purpose <br>// <br>//    Return Value <br>// <br>void __RPC_USER DLM_XMIT_LIST_W_free_xmit (DLM_ARRAY_W __RPC_FAR * pArray) <br>{ <br>    InfoTrace ("DLM_XMIT_LIST_W_free_xmit: Function invoked"); <br>    midl_user_free (pArray); <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    PrivateMessageBox() <br>// <br>//    Parameters <br>//      ids             String ID of a string in the resource string table <br>//      hOwnerWnd       Window who will own the Message Box <br>//      uFlags          Flags (options) for the message box <br>//       <br>//    Purpose <br>//      This function display a message box with a string loaded from the <br>//      string table of this app. The ID of the string is passed in the ids <br>//      parameter. The dialog box is modal with respect to the window <br>//      identified in hOwnerWnd. The options to display the dialog box are <br>//      passed in uFlags <br>//       <br>//    Return Value <br>//      ID of the button pressed in the message box dialog box <br>//       <br>int WINAPI PrivateMessageBox (UINT ids, HWND hOwnerWnd, UINT uFlags) <br>{ <br>    // Default response <br>    int nResponse = -1; <br>    // Get the string from the string table. The size of the buffer is the <br>    // maximum number of character allowed in the character buffer, without <br>    // the accounting for the NULL terminator <br>    TCHAR szBuffer[256]; <br>    // Set the cursor to an arrow, in case it wasn't. <br>    HCURSOR hPrevCursor = SetCursor (LoadCursor (NULL, MAKEINTRESOURCE(IDC_ARROW))); <br>    if (LoadString (ghInstance, ids, szBuffer, 255)) <br>    { <br>        if (0 == uFlags) <br>        { <br>            uFlags = MB_OK | MB_ICONSTOP; <br>        } <br>        uFlags |= MB_SETFOREGROUND; <br>        nResponse = MessageBox (hOwnerWnd, szBuffer, g_szAppTitle, uFlags); <br>    } <br>    // Before returning, reset the cursor to the previous state <br>    SetCursor (hPrevCursor); <br>    return nResponse; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    CenterDialogBox() <br>// <br>//    Parameters <br>//      hDlg    Handle to the dialog (or window) that we want to center. <br>//       <br>//    Purpose <br>//      This function centers a window, vertically and horizontally, <br>//      with respect to the desktop (or screen) <br>//       <br>//    Return Value <br>//      None. <br>//       <br>void WINAPI CenterDialogBox (HWND hDlg) <br>{ <br>    POINT   pt; <br>    RECT    r1, r2; <br>    int    iWidth, iHeight; <br>    GetWindowRect (GetDesktopWindow(), &amp;r1); <br>    GetWindowRect (hDlg, &amp;r2); <br>    iWidth = r2.right - r2.left; <br>    iHeight = r2.bottom - r2.top; <br>    pt.x = (r1.right - r1.left) / 2; <br>    pt.y = (r1.bottom - r1.top) / 2; <br>    pt.x = pt.x - (iWidth / 2); <br>    pt.y = pt.y - (iHeight / 2); <br>    MoveWindow (hDlg, pt.x, pt.y, iWidth, iHeight, FALSE); <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    midl_user_allocate() <br>// <br>//    Parameters <br>//      len     Size (in bytes) of the memory block to allocate for the <br>//              RPC object <br>// <br>//    Purpose <br>//      Allocates memory as needed by the RPC runtime library. <br>//      The stubs or runtime libraries may need to allocate memory. <br>//      By convention, they call a user-specified function named <br>//      midl_user_allocate. <br>// <br>//    Return Value <br>//      Pointer to a block of memory of len byte in size <br>// <br>void __RPC_FAR * __RPC_API midl_user_allocate (size_t len) <br>{ <br>    LPVOID pVoid = HeapAlloc (GetProcessHeap(), HEAP_ZERO_MEMORY, (DWORD)len); <br>    if (NULL == pVoid) <br>    { <br>        TraceMessage ("midl_user_allocate: Failed to allocated RPC memory block"); <br>    } <br>    return pVoid; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//    midl_user_free() <br>// <br>//    Parameters <br>//      ptr     Pointer to memory block to release <br>// <br>//    Purpose <br>//      Free memory as needed by the RPC runtime library. <br>//      The stubs or runtime libraries may need to free memory. <br>//      By convention, they call a user-specified function named <br>//      midl_user_free. <br>// <br>//    Return Value <br>//      None <br>// <br>void __RPC_API midl_user_free (void __RPC_FAR * ptr) <br>{ <br>    HeapFree (GetProcessHeap(), 0, ptr); <br>} <br> <br>// End of file for COMMON.CPP </code></pre>
<p>&nbsp;</p></body>
</HTML>

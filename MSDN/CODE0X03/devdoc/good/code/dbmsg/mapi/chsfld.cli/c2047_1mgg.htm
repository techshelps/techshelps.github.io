<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TVDLG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2050"></a>TVDLG.H</h2>
<pre><code>//////////////////////////////////////////////////////////////////////////// <br>// <br>//      TVDLG.H <br>// <br>//  Copyright 1986-1996 Microsoft Corporation. All Rights Reserved. <br>//////////////////////////////////////////////////////////////////////////// <br> <br>#ifndef __TVDLG__H__ <br>#define __TVDLG__H__ <br> <br> <br>enum { iEID, iDispName, iSubfldrs, nhtProps}; <br>static SizedSPropTagArray(nhtProps, spthtProps) = <br>{ nhtProps, <br>    {   PR_ENTRYID, <br>        PR_DISPLAY_NAME, <br>        PR_SUBFOLDERS <br>    } <br>};   <br> <br>#define Align4(_cb) (((_cb) + 3) &amp; ~3) <br> <br>extern LPSTR g_szNoFolderName; <br>extern LPSTR g_szAllStores; <br> <br>class CTVNodeFactory; <br>class CChsFldDlg; <br> <br> <br>///////////////////////////////////////////////////////////////////////// <br>// CTVNode <br> <br>class CTVNode; <br>typedef CTVNode * LPTVNODE; <br> <br>class CTVNode <br>{ <br> <br>friend CTVNodeFactory; <br>friend HTREEITEM HtiFindChild(HWND hwTreeCtl, HTREEITEM hti, ULONG cb, <br>                LPENTRYID pbEID, CChsFldDlg *pCFDlg, LPTVNODE *ppNode); <br> <br> <br>public: <br>    LPSTR GetName(void); <br>    HRESULT HrExpand(CChsFldDlg * pCFDlg); <br>    HRESULT HrGetFolder(CChsFldDlg * pCFDlg, LPMAPIFOLDER * ppfld, <br>                            LPMDB *ppmdb); <br> <br>    void SetHandle(HTREEITEM hItem) { m_htiMe = hItem;} <br>    void SetKidsLoaded(BOOL fLoaded) { m_fKidsLoaded = fLoaded;} <br> <br>    HRESULT HrNewFolder(CChsFldDlg * pCFDlg, LPSTR szFldName); <br> <br>    static LPVOID operator new( size_t cb ); <br>    static VOID   operator delete( LPVOID pv ); <br> <br>    void Write(BOOL fWrite, LONG iLevel, LPBYTE * ppb); <br>     <br>    ~CTVNode(); <br> <br>private: <br>     <br>    //can only be created in CTVNodeFactory::HrCreateNode <br>    CTVNode(LPSPropValue pvals, ULONG cprops, LPMDB pmdb); <br> <br>    HRESULT HrOpenMDB(CChsFldDlg * pCFDlg); <br>    HRESULT HrOpenFolder(CChsFldDlg * pCFDlg); <br>     <br>    HTREEITEM       m_htiMe; <br>    LPSPropValue    m_pval; <br>    BOOL            m_fKidsLoaded; <br>    LPMAPIFOLDER    m_pfld; <br>    CTVNode         *m_pNext; <br>    LPMDB           m_pmdb; <br>}; <br> <br> <br> <br> <br>// <br>//  CTVNode::GetName <br>// <br>inline LPSTR CTVNode::GetName(void) <br>{ <br> <br>    if(m_pval[iDispName].ulPropTag == PR_DISPLAY_NAME) <br>        return m_pval[iDispName].Value.lpszA; <br>    else <br>        return g_szNoFolderName; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// CTVNodeFactory <br> <br>class CTVNodeFactory <br>{ <br>public: <br>    HRESULT HrCreateNode(LPSPropValue pval, ULONG cVals, LPMDB pmdb, <br>                            LPTVNODE * pptvnode); <br> <br>    CTVNodeFactory(); <br>    ~CTVNodeFactory(); <br> <br>private: <br>    void Insert(CTVNode * ptvnode); <br> <br>    LPTVNODE    m_pHead; <br>}; <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// CChsFldDlg <br> <br>class CChsFldDlg <br>{ <br>public: <br>    HRESULT HrPick(LPCTSTR lpTemplateName, HWND hWnd, <br>                DLGPROC pfnDlgProc, LPMAPIFOLDER * ppfld, LPMDB *ppmdb); <br>    HRESULT HrInitTree(HWND hDlg, HWND hwTreeCtl); <br>    HRESULT HrLoadRoots(void); <br>    HRESULT HrInsertRoot(LPSPropValue pval); <br>    BOOL    IsTreeRoot(HTREEITEM hti) { return (hti == m_hiRoot); } <br> <br>    int     IndAllStores(void)  { return m_iIconAllStores; } <br>    int     IndRootFld(void)    { return m_iIconRootFld; } <br>    int     IndOpenFld(void)    { return m_iIconOpenFld; } <br>    int     IndClsdFld(void)    { return m_iIconClsdFld; } <br>    HWND    hwDialog(void)      { return m_hDlg; } <br>    HWND    hwTreeCtl(void)     { return m_hwTreeCtl; } <br> <br>    LPMAPISESSION   Session(void) { return m_pses; } <br> <br>     <br>    HINSTANCE hInst(void)   { return m_hInst; } <br> <br>    HRESULT HrCreateNode(LPSPropValue pval, ULONG cvals, LPMDB pmdb, <br>                            LPTVNODE * ppNode) <br>        { return m_NodeFactory.HrCreateNode(pval, cvals, pmdb, ppNode);} <br> <br>    void    SetFolder(LPMAPIFOLDER plfd, LPMDB pmdb); <br>    void    SetError(HRESULT hr)    { m_hr = hr;} <br> <br>    HRESULT HrSaveTreeState(void); <br>    HRESULT HrRestoreTreeState(void); <br> <br>    CChsFldDlg(LPMAPISESSION pses, HINSTANCE hInst, ULONG * pcb, LPBYTE * ppb); <br>    ~CChsFldDlg(); <br> <br>    CLastError      m_lsterr; <br>     <br>private: <br> <br>    HRESULT HrSaveTreeStateEx(BOOL fWrite, ULONG * pcb, LPBYTE * ppb); <br>    HRESULT HrRestoreTreeState(ULONG cb, LPBYTE pb); <br>     <br>    LPMAPISESSION   m_pses; <br>    LPMAPIFOLDER    m_pfld; <br>    LPMDB           m_pmdb; <br>    HRESULT         m_hr; <br>    HTREEITEM       m_hiRoot; <br>    HINSTANCE       m_hInst; <br>    HWND            m_hDlg; <br>    HWND            m_hwTreeCtl; <br> <br>    HIMAGELIST      m_hIml; <br>    int             m_iIconAllStores; <br>    int             m_iIconRootFld; <br>    int             m_iIconOpenFld; <br>    int             m_iIconClsdFld; <br>     <br>    ULONG           *m_pcbState; <br>    LPBYTE          *m_ppbState; <br>     <br>    CTVNodeFactory  m_NodeFactory; <br>     <br>}; <br> <br> <br>HTREEITEM AddOneItem( HTREEITEM hParent, HTREEITEM hInsAfter,  <br>    int iImage, int iImageSel, HWND hwndTree, LPTVNODE pNode, int cKids); <br> <br> <br>#endif //__TVDLG__H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

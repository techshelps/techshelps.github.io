<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORMWND.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2238"></a>FORMWND.CPP</h2>
<pre><code>/*********************************************************************** <br> * <br> *  FORMWND.CPP <br> * <br> * <br> *  Copyright 1986-1996 Microsoft Corporation.  All Rights Reserved. <br> * <br> ***********************************************************************/ <br> <br>#include        "precomp.h" <br> <br>BOOL CALLBACK <br>AboutDlgProc (HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br>//WM_SIZE handler <br>void ON_Size(HWND hwnd, UINT state, int x, int y) <br>{ <br>    CBaseForm * pform = (CBaseForm *) GetWindowLong(hwnd, 0); <br> <br>    SetWindowPos(pform-&gt;m_hwndDialog, NULL, 0, 0, x, y, <br>              SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOZORDER); <br>}  <br> <br> <br>////  A specialized version of the window proc which plays how messages <br>//      are going to be handled. <br>//    <br> <br> <br>//// <br> <br>BOOL CALLBACK FormDlgProcSend(HWND hdlg, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>    CBaseForm *         pfrm; <br>    RECT                rect; <br>    int                 wmId; <br>    int                 wmEvent; <br>     <br>     <br>    pfrm = (CBaseForm *) GetWindowLong(GetParent(hdlg), 0); <br>     <br>    switch ( msg ) { <br>    case WM_INITDIALOG: <br>        GetWindowRect(hdlg, &amp;rect); <br>        pfrm-&gt;SetMinSize(rect.right - rect.left, <br>                         rect.bottom - rect.top + <br>                         GetSystemMetrics(SM_CYCAPTION) + <br>                         GetSystemMetrics(SM_CYMENU)); <br>        break; <br> <br>    case WM_SIZE: <br>        { <br>            HWND        hwnd; <br>            RECT        rect; <br>            int         cx; <br>            int         cy; <br>             <br>            //resize edit to match the dialog <br>            GetWindowRect(hdlg, &amp;rect); <br>            cx = rect.right; <br>            cy = rect.bottom; <br> <br>            HDWP hdwp = BeginDeferWindowPos(4); <br>            if(NULL == hdwp) <br>                break; <br>             <br>            hwnd = GetDlgItem(hdlg, ID_TO); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_CC); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_SUBJECT); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_BODY); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left, cy - rect.top, <br>                         SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            EndDeferWindowPos(hdwp); <br>        } <br>        break; <br> <br>    case WM_COMMAND: <br>        wmId = GET_WM_COMMAND_ID(wParam, lParam);   <br>        wmEvent = GET_WM_COMMAND_CMD(wParam, lParam); <br> <br>        switch(wmId) { <br>        case ID_TO_BUTTON: <br>        case ID_CC_BUTTON: <br>            switch (wmEvent) { <br>            case BN_CLICKED: <br>                pfrm-&gt;Address(wmId); <br>                break; <br> <br>            default: <br>                return FALSE; <br>            } <br>            break; <br>        case ID_BODY: <br>        { <br>            HMENU hMenu = GetMenu(GetParent(hdlg)); <br>            if(wmEvent == EN_KILLFOCUS) <br>            { <br>                EnableMenuItem(hMenu, IDC_EDIT_CUT, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_COPY, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_PASTE, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_UNDO, MF_BYCOMMAND|MF_GRAYED); <br>            } <br>            else if(wmEvent == EN_SETFOCUS) <br>            { <br>                EnableMenuItem(hMenu, IDC_EDIT_CUT, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_COPY, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_PASTE, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_UNDO, MF_BYCOMMAND); <br>            } <br>        } <br>        break; <br>        case ID_SUBJECT: <br>            if (wmEvent == EN_KILLFOCUS) { <br>                char    sz[250]; <br> <br>                if (Edit_GetText(GET_WM_COMMAND_HWND(wParam, lParam), sz, 200)) { <br>                    lstrcat(sz, " - "); <br>                    lstrcat(sz, g_szWindowCaption); <br>                    SetWindowText(GetParent(hdlg), sz); <br>                } <br>                else <br>                    SetWindowText(GetParent(hdlg), g_szWindowCaption); <br> <br>                break; <br>            } <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>        } <br>         <br>    default: <br>        return FALSE; <br>    } <br> <br>    return TRUE; <br>} <br> <br>//// Window proc for frame window of both the read and send form. <br>//    <br>//  Send frame window does not receive IDC_VIEW_ITEMABOVE, IDC_VIEW_ITEMBELOW <br>// commands. <br>// Read frame window does not receive IDC_MESSAGE_SUBMIT command. <br>LRESULT CALLBACK WndProcForm(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>    HMENU               hMenu; <br>    CBaseForm *         pform; <br>    int                 wmId; <br>    int                 wmEvent; <br> <br>    pform = (CBaseForm *) GetWindowLong(hwnd, 0); <br>     <br>    switch( msg ) { <br>    case WM_COMMAND: <br>        wmId = GET_WM_COMMAND_ID(wParam, lParam);   <br>        wmEvent = GET_WM_COMMAND_CMD(wParam, lParam); <br> <br>        switch( wmId ) { <br>        case IDC_MESSAGE_CLOSE: <br>            pform-&gt;ShutdownForm(SAVEOPTS_PROMPTSAVE); <br>            break; <br> <br>        case IDC_MESSAGE_SAVE: <br>            pform-&gt;DoSave(); <br>            break; <br>         <br>        case IDC_VIEW_ITEMABOVE: <br>        case IDC_VIEW_ITEMBELOW: <br>            { <br>                ULONG ulDir = IDC_VIEW_ITEMABOVE == wmId ? VCDIR_PREV:VCDIR_NEXT; <br>                pform-&gt;DoNext(ulDir); <br>                 <br>                break; <br>            } <br>        case IDC_MESSAGE_DELETE: <br>            pform-&gt;DoDelete(); <br>            break; <br>         <br>        case IDC_MESSAGE_REPLY: <br>            pform-&gt;DoReply(eREPLY); <br>            break; <br> <br>        case IDC_MESSAGE_FORWARD: <br>            pform-&gt;DoReply(eFORWARD); <br>            break; <br> <br>        case IDC_MESSAGE_SUBMIT: <br>            pform-&gt;DoSubmit(); <br>            break; <br>             <br>        case IDC_MESSAGE_COPY: <br>            pform-&gt;DoCopy(); <br>            break; <br> <br>        case IDC_MESSAGE_MOVE: <br>            pform-&gt;DoMove(); <br>            break; <br>             <br>        //the edit menu commands are enabled only if the ID_BODY text <br>        //box has the focus <br>        case IDC_EDIT_COPY: <br>            SendMessage(GetDlgItem(pform-&gt;m_hwndDialog, ID_BODY), WM_COPY, 0,0); <br>            break; <br>        case IDC_EDIT_CUT: <br>            SendMessage(GetDlgItem(pform-&gt;m_hwndDialog, ID_BODY), WM_CUT, 0,0); <br>            break; <br>        case IDC_EDIT_PASTE: <br>            SendMessage(GetDlgItem(pform-&gt;m_hwndDialog, ID_BODY), WM_PASTE, 0,0); <br>            break; <br>        case IDC_EDIT_UNDO: <br>            SendMessage(GetDlgItem(pform-&gt;m_hwndDialog, ID_BODY), WM_UNDO, 0,0); <br>            break; <br> <br>        case IDC_HELP_ABOUT: <br>            DialogBox (g_hinst, "AboutBox", hwnd, AboutDlgProc); <br>            break; <br> <br>        default: <br>            return DefWindowProc(hwnd, msg, wParam, lParam); <br>        } <br>        break; <br> <br>        // <br>        //  Do all of the correct menu graying <br>        // <br>    case WM_INITMENU: <br>        hMenu = (HMENU) wParam; <br>        pform-&gt;ConfigMenu(hMenu); <br>   break; <br>         <br>        // <br>        //  Deal with the System Close message <br>        // <br>    case WM_SYSCOMMAND: <br>        if ((wParam &amp; 0xfff0) == SC_CLOSE) <br>        { <br>            pform-&gt;ShutdownForm(SAVEOPTS_PROMPTSAVE); <br>        } <br>        else <br>        { <br>            goto DoDefault; <br>        } <br>        break; <br> <br>    case WM_SETFOCUS: <br>        SetFocus(pform-&gt;m_hwndDialog); <br>        break; <br> <br>        // <br>        //  Let the object know that the window has been destroyed so  <br>        //      that it will not talk to it any more <br>        // <br>    case WM_DESTROY: <br>        pform-&gt;ClearWindow(); <br>        goto DoDefault; <br> <br>    case WM_SIZE: <br>        HANDLE_WM_SIZE(hwnd, wParam, lParam, ON_Size);  <br>        goto DoDefault; <br>         <br>         <br>    default: <br>DoDefault: <br>        return DefWindowProc (hwnd, msg, wParam, lParam); <br>    } <br> <br>    return 0; <br>} <br> <br> <br>//// <br> <br>BOOL CALLBACK FormDlgProcRead(HWND hdlg, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>    CBaseForm *         pfrm; <br>    RECT                rect; <br>    int                 wmId; <br>    int                 wmEvent; <br>     <br>    pfrm = (CBaseForm *) GetWindowLong(GetParent(hdlg), 0); <br>     <br>    switch ( msg ) { <br>    case WM_INITDIALOG: <br>        { <br>            Assert(pfrm); <br> <br>            GetWindowRect(hdlg, &amp;rect); <br>            pfrm-&gt;SetMinSize(rect.right - rect.left, <br>                            rect.bottom - rect.top + <br>                            GetSystemMetrics(SM_CYCAPTION) + <br>                            GetSystemMetrics(SM_CYMENU)); <br>            break; <br>        }                                                    <br>     <br>    case WM_SIZE: <br>        { <br>            HWND        hwnd; <br>            RECT        rect; <br>            int         cx; <br>            int         cy; <br> <br>            GetWindowRect(hdlg, &amp;rect); <br>            cx = rect.right; <br>            cy = rect.bottom; <br> <br>            HDWP hdwp = BeginDeferWindowPos(5); <br>            if(NULL == hdwp) <br>                break; <br> <br>            hwnd = GetDlgItem(hdlg, ID_FROM); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_SENT); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_TO); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_SUBJECT); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left - 2, <br>                         rect.bottom - rect.top, SWP_NOACTIVATE | SWP_NOMOVE | <br>                         SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            hwnd = GetDlgItem(hdlg, ID_BODY); <br>            GetWindowRect(hwnd, &amp;rect); <br>            if(NULL == DeferWindowPos(hdwp, hwnd, NULL, 0, 0, cx - rect.left, cy - rect.top, <br>                         SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOZORDER)) <br>            { <br>                break; <br>            } <br> <br>            EndDeferWindowPos(hdwp); <br>        } <br>        break; <br> <br>    case WM_COMMAND: <br>        wmId = GET_WM_COMMAND_ID(wParam, lParam);   <br>        wmEvent = GET_WM_COMMAND_CMD(wParam, lParam); <br> <br>        switch(wmId) { <br>        case ID_BODY: <br>        { <br>            HMENU hMenu = GetMenu(GetParent(hdlg)); <br>            if(wmEvent == EN_KILLFOCUS) <br>            { <br>                EnableMenuItem(hMenu, IDC_EDIT_CUT, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_COPY, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_PASTE, MF_BYCOMMAND|MF_GRAYED); <br>                EnableMenuItem(hMenu, IDC_EDIT_UNDO, MF_BYCOMMAND|MF_GRAYED); <br>            } <br>            else if(wmEvent == EN_SETFOCUS) <br>            { <br>                EnableMenuItem(hMenu, IDC_EDIT_CUT, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_COPY, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_PASTE, MF_BYCOMMAND); <br>                EnableMenuItem(hMenu, IDC_EDIT_UNDO, MF_BYCOMMAND); <br>            } <br>        } <br>        break; <br>        default: <br>            return FALSE; <br>        } <br>         <br>    default: <br>        return FALSE; <br>    } <br> <br>    return TRUE; <br>} <br> <br>BOOL CALLBACK <br>AboutDlgProc (HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>    char    rgchVersion[80]; <br> <br>    switch (msg) <br>    { <br>    case WM_INITDIALOG: <br>        wsprintf(rgchVersion, "Version %d.%d.%d (%s)", rmj, rmm, rup, <br>            szVerName &amp;&amp; *szVerName ? szVerName : "BUDDY"); <br>        SetDlgItemText(hDlg, IDC_VERSION, rgchVersion); <br>        return TRUE; <br> <br>    case WM_COMMAND: <br>        if (wParam == IDOK || wParam == IDCANCEL) <br>        { <br>            EndDialog (hDlg, TRUE); <br>            return TRUE; <br>        } <br>        break; <br>    } <br>    return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

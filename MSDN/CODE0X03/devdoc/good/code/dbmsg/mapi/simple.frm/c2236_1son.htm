<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORMBASE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2237"></a>FORMBASE.H</h2>
<pre><code>// <br>//  FORMBASE.H <br>//   <br>//  Base form class definition <br>// <br>//  Copyright (c) 1986-1996, Microsoft Corporation. <br>//  All rights reserved. <br>// <br> <br> <br>#include        &lt;chsfld.h&gt; <br> <br>// <br>//  Form states <br>// <br> <br>enum { stateUninit, stateNormal, stateNoScribble, stateHandsOffFromNormal, <br>        stateHandsOffFromSave, stateDead }; <br> <br>// <br>//  Message properties held in memory <br>// <br> <br>enum { irtTo, irtCc, irtSubject, irtTime, irtFrom, irtClass, irtBody, <br>        irtNormSubject, irtConvIdx, irtConvTopic, cpropMsg}; <br>#define MESSAGE_TAGS { cpropMsg, \ <br>    { PR_DISPLAY_TO, PR_DISPLAY_CC, PR_SUBJECT, \ <br>      PR_CLIENT_SUBMIT_TIME, PR_SENDER_NAME, PR_MESSAGE_CLASS, \ <br>      PR_BODY, PR_NORMALIZED_SUBJECT, PR_CONVERSATION_INDEX, PR_CONVERSATION_TOPIC } } <br> <br>//form type <br>enum { eformRead, eformSend}; <br> <br>//reply type  (this form does not implement reply all) <br>enum eREPLYTYPE {eREPLY, eFORWARD, eREPLY_ALL};  <br> <br>//message class <br>//has to be the same as MessageClass in smpfrm.cfg <br>#define FormClassName "IPM.Note.Sample.Simple" <br> <br> <br> <br>//all the MAPI form interfaces we'll need <br>class CBaseForm : public IPersistMessage, public IMAPIForm, <br>                    public IMAPIFormAdviseSink <br>{ <br>    CBaseForm *         m_pfrmNext;             // Linked list of forms <br> <br>    ULONG               m_cRef;                 // Reference Count on object <br>    ULONG               m_state;                //uses state enum <br>    CLastError          m_lsterr;               // Last Error Implementation <br> <br> <br>    CClassFactory *     m_pClassFactory;        // The factory that created us <br>    CViewNotifier       m_viewnotify; <br> <br>    LPMAPIVIEWCONTEXT   m_pviewctxOverride; <br>    LPMAPIVIEWCONTEXT   m_pviewctx;             // View context interface <br> <br>    LPMESSAGE           m_pmsg;                 // our message <br>    LPMAPIMESSAGESITE   m_pmsgsite;             // our message site <br>    LPMAPISESSION       m_pses;                 // our MAPI session <br>    LPADRBOOK           m_pab;                  // our address book <br> <br>    LPADRLIST           m_padrlist;             // Current recipient list <br>    LPSPropValue        m_pval;                 // Current message contents <br> <br>    ULONG               m_ulMsgFlags;           // Message flags <br>    ULONG               m_ulMsgStatus;          // Message status flags <br>    ULONG               m_ulSiteStatus;         // Message Site status flags <br>    ULONG               m_ulViewStatus;         // View context status flags <br> <br>    ULONG               m_cxMin;                // Minimium size of window <br>    ULONG               m_cyMin;                // <br> <br>    int                 m_eFormType;            //read/write <br> <br>    unsigned int        m_fSameAsLoaded:1;      // Copy of ::Save flag <br>    unsigned int        m_fRecipientsDirty:1;   // Is the recip list dirty? <br>    unsigned int        m_fDirty:1; <br>    unsigned int        m_fConvTopicSet:1; <br> <br>    ULONG               m_cbConvIdx; <br>    LPBYTE              m_lpbConvIdx; <br>     <br>    HACCEL              m_HAccelTable; <br> <br>    HMODULE             m_hChsFldDll; <br>    HRPICKFOLDER        m_lpfnHrPickFolder; <br>    ULONG               m_cbCFDState; <br>    LPBYTE              m_pbCFDState; <br> <br>     <br>public: <br>     <br>    HWND                m_hwnd; <br>    HWND                m_hwndDialog; <br> <br>public: <br>    CBaseForm(CClassFactory *); <br>    ~CBaseForm(void); <br> <br>    MAPI_IUNKNOWN_METHODS(IMPL); <br>    MAPI_GETLASTERROR_METHOD(IMPL); <br>    MAPI_IPERSISTMESSAGE_METHODS(IMPL); <br>    MAPI_IMAPIFORM_METHODS(IMPL); <br>    MAPI_IMAPIFORMADVISESINK_METHODS(IMPL); <br> <br>    //utility methods <br> <br>     <br>    BOOL                TranslateMessage(MSG&amp;); <br>    LPMESSAGE           Message(void) { return m_pmsg; } <br>    LPMAPIMESSAGESITE   MsgSite(void) { return m_pmsgsite; } <br>    LPMAPIVIEWCONTEXT   ViewCtx(void) { return (m_pviewctxOverride ? m_pviewctxOverride:m_pviewctx); } <br>    void                Address(int); <br>    void                ClearWindow(void);   <br>    void                ConfigMenu(HMENU hMenu); <br>    HRESULT             HrQuerySave (DWORD ulSaveOptions); <br>    void                SetMinSize(int cx, int cy) { m_cxMin = cx; m_cyMin = cy; return; } <br>    CBaseForm *         GetNext(void) { return m_pfrmNext; } <br>    void                DoSubmit(void); <br>    void                DoSave(void); <br>    void                DoDelete(void); <br>    void                DoCopy(void); <br>    void                DoMove(void); <br>    void                DoNext(ULONG ulDir);                 <br>    void                DoReply(eREPLYTYPE); <br> <br>private: <br>                                             <br>    void                DisplayMessage(void); <br>    HRESULT             HrGetMsgDataFromUI(HWND hDlg); <br>    HRESULT             HrGetMsgDataFromMsg(LPMESSAGE pmsg, ULONG ulMsgFlags); <br>    BOOL                IsAddressed(void); <br>    HRESULT             HrReply(eREPLYTYPE eType, HWND hwndParent, LPCRECT rcPos); <br>    void                DeInitObjects(void); <br>    HRESULT             HrOpenForm(HWND, LPCRECT, ULONG); <br>    HRESULT             HrSaveInto(LPMESSAGE); <br>    void                UpdateRecipientsDisplay(void); <br>    int                 ShowMessageBox(HWND, LPCTSTR, LPCTSTR, UINT); <br>    void                ShowError(); <br>    inline void         ConfigWinMenu(void); <br>    HRESULT             HrSaveToString(LPSTR *); <br>    void                ClearDirty(void); <br>    BOOL                FGetFoldChooser(void); <br> <br>}; <br> <br> <br> <br>// <br>//  Linked list of form objects <br>// <br> <br>extern CBaseForm *      g_PfrmFirst; <br> <br>// <br>//  Other globals <br>// <br> <br>extern HINSTANCE        g_hinst; <br>extern LPVOID           g_lpCtl3d; <br> <br>void FormatTime(FILETIME *pft, LPSTR szTime); <br>HRESULT GetMsgAdrlist (LPMESSAGE pmsg, LPADRLIST *  ppAdrList, CLastError *); <br>HRESULT HrStreamInMsgBody(LPMESSAGE pmsg, LPVOID pbase, LPSTR *  pszBody, CLastError * plsterr); <br>HRESULT HrStreamOutMsgBody(LPMESSAGE pmsg, LPSTR szBody, CLastError * plsterr); <br> <br> <br>///     CBaseForm::ConfigWinMenu() <br>// <br>inline void CBaseForm::ConfigWinMenu() <br>{ <br>    if(NULL != m_hwnd) <br>    { <br>        HMENU hmenu = GetMenu(m_hwnd); <br>        if(NULL != hmenu) <br>            ConfigMenu(hmenu); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

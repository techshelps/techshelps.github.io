<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2242"></a>MAIN.CPP</h2>
<pre><code>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  FILE:           MAIN.CPP <br>// <br>//  DESCRIPTION:    This file contains the code for the entry function and <br>//                      the main window for this form <br>// <br>// <br>//  Copyright (c) 1995, Microsoft Corporation. <br>//  All rights reserved. <br>// <br>//-- <br> <br>#include "precomp.h" <br>#include &lt;wrap3d.h&gt; <br> <br>// Just to make it easier to determine appropriate code paths: <br>#if defined (_WIN32) // This had better be true, but just in case... <br>    #define IS_WIN32 TRUE <br>#else <br>    #define IS_WIN32 FALSE <br>#endif <br>#define IS_NT      IS_WIN32 &amp;&amp; (BOOL)(GetVersion() &lt; 0x80000000) <br>#define IS_WIN32S  IS_WIN32 &amp;&amp; (BOOL)(!(IS_NT) &amp;&amp; (LOBYTE(LOWORD(GetVersion()))&lt;4)) <br>#define IS_CHICAGO (BOOL)(!(IS_NT) &amp;&amp; !(IS_WIN32S)) &amp;&amp; IS_WIN32 <br> <br>///////////////////////// Global Variables ///////////////////////////////// <br> <br>extern CClassFactory   ClassFactory; <br>HINSTANCE       g_hinst; <br>char            SzAppName[] = "SimpFrm";  // The name of this application <br>char            g_szSendWinClass[] = "SampleFormSend"; <br>char            g_szReadWinClass[] = "SampleFormRead"; <br>char            g_szFormName[] = "Simple Sample Form"; <br>char            g_szWindowCaption[] = "Sample Form"; <br>CBaseForm *     g_PfrmFirst = NULL; <br>LPVOID          g_lpCtl3d = NULL;           //  CTL3D context <br> <br>//// Internal Flags <br> <br>ULONG           UlCoRegForm = 0; <br>BOOL            FMapiInitialized = FALSE; <br> <br>//we have to create an atom containig string representation of <br>// the class id;  the atom has to have the same live time as the <br>//ClassFactory object <br>static ATOM     atmCFAlive;  <br> <br>//////////////////////////// Extern and forward declarations ////////////// <br> <br>LRESULT CALLBACK WndProcMain(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CALLBACK WndProcForm(HWND, UINT, WPARAM, LPARAM); <br> <br>////    InitApplication <br>// <br> <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>    WNDCLASSEX  wc; <br> <br>    //  Fill in the window class structure with parameters that describe <br>    //  the main window.  This window will never be displayed and exists <br>    //  so that OLE can talk to us. <br> <br>    wc.cbSize           = sizeof(wc); <br>    wc.style            = 0; <br>    wc.lpfnWndProc      = (WNDPROC) WndProcMain; <br>    wc.cbClsExtra       = 0; <br>    wc.cbWndExtra       = 0; <br>    wc.hInstance        = hInstance; <br>    wc.hIcon            = LoadIcon(NULL, IDI_APPLICATION); <br>    wc.hCursor          = ::LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground    = (HBRUSH) (COLOR_WINDOW+1); <br>    wc.lpszMenuName     = NULL; <br>    wc.lpszClassName    = SzAppName; <br>    wc.hIconSm          = LoadIcon(hInstance, "SmallIcon"); <br>     <br>    //  Register the window class. <br>    if (!RegisterClassEx(&amp;wc)) <br>    { <br>        return FALSE; <br>    } <br> <br>    //  Now setup and register the acutual window class used for the <br>    //  form. <br> <br>    wc.style            = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpszClassName    = g_szSendWinClass; <br>    wc.lpfnWndProc      = (WNDPROC) WndProcForm; <br>    wc.cbWndExtra       = 4; <br>    wc.hIcon            = LoadIcon(hInstance, "IconL"); <br>//    if (IS_CHICAGO) { <br>//        wc.lpszMenuName = "CHICAGO"; <br>//    } <br>//    else { <br>        wc.lpszMenuName = MAKEINTRESOURCE(IDR_SEND_FORM); <br>//    } <br> <br>    if (!RegisterClassEx(&amp;wc)) <br>    { <br>        return FALSE; <br>    } <br> <br>    //  Now setup and register the acutual window class used for the <br>    //  form. <br> <br>    wc.style            = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpszClassName    = g_szReadWinClass; <br>    wc.lpfnWndProc      = (WNDPROC) WndProcForm; <br>    wc.cbWndExtra       = 4; <br>    wc.hIcon            = LoadIcon(hInstance, "IconL"); <br>//    if (IS_CHICAGO) { <br>//        wc.lpszMenuName = "CHICAGO"; <br>//    } <br>//    else { <br>        wc.lpszMenuName = MAKEINTRESOURCE(IDR_READ_FORM); <br>//    } <br> <br>    return RegisterClassEx(&amp;wc); <br>} <br> <br>////    InitInstance <br>// <br> <br>BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) <br>{ <br>    HRESULT             hr; <br>    ULONG               ulVer; <br>    HWND                hWnd; <br>    BOOL                f; <br> <br>    /////////////////////////////////////////////////////////////////////// <br>    // <br>    //  Initialize OLE and MAPI <br> <br>    ulVer = CoBuildVersion (); <br>#if 0           <br>    if (HIWORD (ulVer) != rmm) <br>    { <br>        return FALSE; <br>    } <br>#endif // 0 <br>                      <br>    // <br>    //  Initialize MAPI -- this implies a successfull initialization of <br>    //  OLE on success <br>    // <br>         <br>    hr = MAPIInitialize (NULL); <br>    if (HR_FAILED(hr)) <br>    { <br>        return FALSE; <br>    } <br>    FMapiInitialized = TRUE; <br> <br>    // <br>    //  Give ourselves the 3D look <br>    // <br>     <br>    if (!g_lpCtl3d) <br>    { <br>        g_lpCtl3d = CTL3D_Initialize(hInstance); <br>        if (g_lpCtl3d) <br>            CTL3D_AutoSubclass(g_lpCtl3d, hInstance, &amp;f); <br>    } <br>         <br>         <br>    //Create global atom with string representaton of our class id <br>    if(0 == FindAtom(szGUID)) <br>        atmCFAlive = GlobalAddAtom(szGUID); <br>     <br>     <br>    // <br>    //  Register our class factory for the form <br>    // <br>     <br>    hr = CoRegisterClassObject(CLSID_IPM_NOTE_SAMPLE, &amp;ClassFactory, <br>                               CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE, <br>                               &amp;UlCoRegForm); <br>    if (FAILED(hr)) <br>    { <br>        return FALSE; <br>    } <br>         <br>    // <br>    //  Create a main window -- This window is used for dealing with <br>    //          messages coming from the top of the work and consitutes <br>    //          our main window.  We create this window of size zero and <br>    //          not visible since it is not the window the user <br>    //          interacts with <br> <br>    hWnd = CreateWindow(SzAppName, NULL, WS_OVERLAPPEDWINDOW, <br>                        0, 0, 0, 0, NULL, NULL, hInstance, NULL); <br>    if (!hWnd) <br>    { <br>        return FALSE; <br>    } <br> <br>    ClassFactory.ms_hWndMain = hWnd; <br>    g_hinst = hInstance; <br> <br>    return TRUE; <br>} <br> <br> <br>int ExitInstance () <br>{ <br>    // <br>    //  Revoke all classes factories here so we don't get any new <br>    //  creates <br> <br>    if (UlCoRegForm != 0) <br>    { <br>        CoRevokeClassObject (UlCoRegForm); <br>        UlCoRegForm = 0; <br>    } <br> <br>    // <br>    //  Shut down CTL3D <br> <br>    if (g_lpCtl3d) <br>    { <br>        CTL3D_Uninitialize(g_lpCtl3d); <br>        g_lpCtl3d = NULL; <br>    } <br> <br>    // <br>    //  Uninitialize MAPI <br> <br>    if (FMapiInitialized) <br>    { <br>        MAPIUninitialize(); <br>        FMapiInitialized = FALSE; <br>    } <br> <br>    GlobalDeleteAtom(atmCFAlive); <br> <br>    return 0; <br>} <br> <br> <br>////    WinMain <br>// <br> <br>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>                     LPSTR /*lpCmdLine*/, int nCmdShow) <br>{ <br>    MSG         msg; <br> <br>    if (!hPrevInstance) <br>    { <br>        // Perform instance initialization <br>        if (!InitApplication(hInstance)) <br>        { <br>            return FALSE; <br>        } <br>    } <br> <br>    // Perform application initialization <br>    if (!InitInstance(hInstance, nCmdShow)) <br>    { <br>        return FALSE; <br>    } <br> <br>     <br>    //  Main message loop <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>        CBaseForm *     pfrm; <br>         <br>        // <br>        //  Find which top level window this message is for <br>        // <br> <br>        for (pfrm = g_PfrmFirst; pfrm != NULL; pfrm = pfrm-&gt;GetNext()) <br>        { <br>            if (pfrm-&gt;TranslateMessage(msg)) <br>            { <br>                break; <br>            } <br>        } <br> <br>        if (pfrm == NULL) <br>        { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>        } <br>    } <br> <br>    ExitInstance(); <br> <br>    return msg.wParam; <br>} <br> <br> <br> <br>////  A specialized version of the window proc which plays how messages <br>//      are going to be handled. <br>//    <br> <br>LRESULT CALLBACK WndProcMain(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>   switch (msg) <br>   { <br>   case WM_DESTROY: <br>       PostQuitMessage(0); <br>       break; <br> <br>   default: <br>       return DefWindowProc (hwnd, msg, wParam, lParam); <br>   } <br> <br>   return 0; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

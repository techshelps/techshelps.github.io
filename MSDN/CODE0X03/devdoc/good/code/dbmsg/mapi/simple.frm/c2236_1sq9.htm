<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLASSF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2241"></a>ICLASSF.CPP</h2>
<pre><code>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  FILE:           ICLASSF.CPP <br>// <br>//  DESCRIPTION:    Sample form's class factory <br>// <br>// <br>//  Copyright (c) 1994, Microsoft Corporation. <br>//  All rights reserved. <br>// <br>//-- <br> <br>#include "precomp.h" <br> <br>CClassFactory           ClassFactory; <br> <br>HWND  CClassFactory::ms_hWndMain; <br>ULONG CClassFactory::ms_cLocks= 0; <br>ULONG CClassFactory::ms_cObjs = 0; <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  Constructor and destructor <br> <br>CClassFactory::CClassFactory() <br>{ <br>    m_cRef   = 1; <br>} <br> <br>CClassFactory::~CClassFactory (void) <br>{ <br>    ASSERT(m_cRef == 1); <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  IUnknown methods <br> <br>STDMETHODIMP CClassFactory::QueryInterface(REFIID riid, void ** ppvObj) <br>{ <br> <br>    if ((IID_IClassFactory == riid) || (IID_IUnknown == riid)) <br>    { <br>        *ppvObj = (IClassFactory*) this; <br>        AddRef (); <br>        return NOERROR; <br>    } <br> <br>    *ppvObj = 0; <br> <br>    return ResultFromScode (E_NOINTERFACE); <br>} <br> <br> <br>STDMETHODIMP_ (ULONG)CClassFactory::AddRef() <br>{ <br>    return ++ m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) CClassFactory::Release() <br>{ <br>    ULONG cRef = -- m_cRef; <br> <br>    //We quit when cRef == 1 (as oppossed to == 0) because OLE <br>    //will not release its reference until after we call <br>    // CoRevokeClassObject(). So if cRef==1 we know that only <br>    //OLE has a reference to as, and it's time to go... <br>    if ((cRef == 1) &amp;&amp; (ms_cLocks == 0) &amp;&amp; (ms_cObjs == 0)) <br>    { <br>        if (ms_hWndMain) <br>        { <br>            PostMessage (ms_hWndMain, WM_CLOSE, 0, 0L); <br>        } <br>    } <br> <br>    return cRef; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CClassFactory::CreateInstance(LPUNKNOWN pUnkOuter, REFIID riid, <br>                                           LPVOID FAR* ppvObject) <br>{ <br>    HRESULT     hr  = ResultFromScode (E_NOINTERFACE); <br>    CBaseForm * pbf = NULL; <br> <br>    if (!ppvObject) <br>        return ResultFromScode (E_INVALIDARG); <br>     <br>    *ppvObject = 0; <br> <br>    // <br>    //  We don't support aggregation. <br> <br>    if (pUnkOuter != NULL) <br>        return  ResultFromScode (CLASS_E_NOAGGREGATION); <br> <br>    pbf = new CBaseForm (this); <br> <br>    if(NULL == pbf) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    hr = pbf -&gt; QueryInterface (riid, ppvObject); <br>    if (HR_FAILED(hr)) <br>        goto err; <br> <br>    ms_cObjs ++; <br> <br>    hr = hrSuccess; <br> <br>err: <br>    if (pbf) <br>    { <br>        pbf -&gt; Release (); <br>    } <br>    return hr; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CClassFactory::LockServer(BOOL fLock) <br>{ <br>    if (fLock) <br>    { <br>        ++ ms_cLocks; <br>    } <br>    else <br>    { <br>        ASSERT (ms_cLocks &gt; 0); <br>        -- ms_cLocks; <br> <br>        if ((ms_cLocks == 0) &amp;&amp; (ms_cObjs == 0)) <br>        { <br>            if (ms_hWndMain) <br>            { <br>                PostMessage (ms_hWndMain, WM_CLOSE, 0, 0L); <br>            } <br>        } <br>    } <br>    return NOERROR; <br>} <br> <br> <br>void FAR PASCAL CClassFactory::ObjDestroyedCallback (void) <br>{ <br>    ASSERT (ms_cObjs &gt; 0); <br>    ms_cObjs --; <br> <br>    if ((ms_cLocks == 0) &amp;&amp; (ms_cObjs == 0)) <br>    { <br>        if (ms_hWndMain) <br>        { <br>            PostMessage (ms_hWndMain, WM_CLOSE, 0, 0L); <br>        } <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2222"></a>README.TXT</h2>
<pre><code>MAPI Routing Client <br> <br> <br>The Route.Cli sample illustrates two important areas of MAPI: <br> <br>1. How to use specially defined named properties, known as routing property  <br>   sets, for storing addressing information when sending messages across  <br>   different messaging systems. <br> <br>2. How to use basic MAPI facilities, as an e-mail client might. <br> <br>Different messaging systems use different address formats. So when a message <br>crosses a domain boundary, usually passing through a gateway, the addressing <br>information needs to be translated from the format used by the original domain <br>to the format used by the new domain. Almost all gateways do this for the <br>sender and ordinary message recipients. MAPI defines special mechanism for <br>preserving the addressing information for users who are not on the message <br>recipient list. Please see "Sending Messages Between Domains" in the MAPI <br>Online documentation for more information. This sample uses the mechanism to <br>route a message to a list of people one after another. <br> <br>The routing client demonstrates the use of routing property sets by <br>implementing a simple linear route for a message with optional attached <br>documents. The routing list is stored in the routing property sets, and each <br>user who receives the message has an opportunity to edit the message and pass <br>it to the next person in the routing list. Each user may optionally edit the <br>remainder of the route as well. <br> <br>The sample routing client also serves as a simple e-mail client. Features <br>include: <br> <br>  - Viewing the contents table of any folder in any message store. <br>  - Sending or reading any message, using the form registered for it. <br>  - Forcing new mail to be downloaded to the default message store. <br>  - Deleting mail. <br> <br>Performance <br> <br>Recently the routing code of the sample has been revised with <br>performance considerations in mind. A few simple changes have <br>significantly improved response time.  If you looked at the source of <br>the sample before, you might find it very beneficial to compare the old <br>and new versions.  Here is the list of things that have been changed: <br> <br>1. Instead of calling GetIDsFromNames and GetProps once for every <br>recipient on the routing list, now these functions are called only <br>once for all the recipients on the routing list. <br> <br>2. Several calls to GetProps have been combined into one. (For example, <br>function HasAttachment which did a separate GetProps does not exist <br>any more. Instead the call has been combined with GetProps in function <br>RT_OnInitDialog). <br> <br>3. Now the sample uses the MAPI_DEFERRED_ERRORS flag wherever possible. <br>(In calls such as OpenEntry, OpenProperty, CreateMessage, etc.) In <br>general, if a method accepts this flag, you should use it unless there <br>is a very good reason not to. <br> <br>These simple tips can significantly boost performance of any MAPI <br>application. <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINDSGBL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2211"></a>WINDSGBL.H</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name  <br>//      WINDSGBL.H <br>// <br>//  Description <br>//      Global declarations for providers communicating with the WINDS Sample <br>//      Server Messaging Host. <br>// <br>//  Author <br>//      Irving De la Cruz <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#ifndef _WINDSGBL_H <br>#define _WINDSGBL_H <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// General constants <br>#ifdef UNICODE <br>#define WINDS_RPC_STRING        unsigned short * <br>#else <br>#define WINDS_RPC_STRING        unsigned char * <br>#endif <br> <br>// WinDS string for the RPC manual binding functions <br>// The WinDS service uses RPC over the NAMED PIPES protocols and the <br>// especific end-points for the protocol are listed below: One for the remote <br>// administrator and one for the MAPI providers <br>#define WINDS_RPC_PROTOCOL              TEXT("ncacn_np") <br>#define WINDS_ADMIN_RPC_ENDPOINT        TEXT("\\pipe\\WINDS-ADMIN") <br>#define WINDS_PROVIDERS_RPC_ENDPOINT    TEXT("\\pipe\\WINDS") <br> <br>// WinDS registry key for store permanent information <br>#define WINDS_ADMIN_REGISTRY_KEY        TEXT("Software\\Microsoft\\PSS MAPI Samples\\WinDS Remote Administrator") <br>#define WINDS_SERVICE_REGISTRY_KEY      TEXT("System\\CurrentControlSet\\Services\\WindsMessagingHost") <br> <br>// WinDS administrator subkeys <br>#define SERVER_SUB_KEY                  TEXT("Default Server") <br> <br>// WinDS service subkeys <br>#define DATA_FILE_SUB_KEY               TEXT("Data File") <br> <br> <br>// Name of the address type of the user in the system and for the transports to register for. <br>#define WINDS_ADDRESS_TYPE                      TEXT("WINDS") <br> <br>// Name of the Mailslot we use to send notifications to in the client machine <br>#define AB_WINDS_NOTIFICATION_MAILSLOT          TEXT("WINDS_AB_NOTIFICATIONS") <br>#define XP_WINDS_NOTIFICATION_MAILSLOT          TEXT("WINDS_XP_NOTIFICATIONS") <br>#define MS_WINDS_NOTIFICATION_MAILSLOT          TEXT("WINDS_MS_NOTIFICATIONS") <br>#define ADMIN_WINDS_NOTIFICATION_MAILSLOT       TEXT("WINDS_ADMIN_NOTIFICATIONS") <br>#define CLIENT_MAILSLOT_SINK_NAME_FORMAT        TEXT("\\\\.\\mailslot\\%s\\%x") <br>#define SERVER_MAILSLOT_SINK_NAME_FORMAT        TEXT("\\\\%s\\mailslot\\%s\\%x") <br> <br>// Bulk download/upload pipe name <br>#define PIPE_NAME_FORMAT                        TEXT("%s\\pipe\\%d") <br> <br>// Handy buffer size <br>#define IO_BUFFERSIZE                   1024 <br> <br>#define WINDS_UNICODE                   0x80000000 <br>#define WINDS_ADMINISTRATOR             0x40000000 <br> <br>#define HIDE_IN_DIR                     0x0001 <br>#define OBJECT_DISABLED                 0x0002 <br> <br>#define ADMIN_RIGHTS                    0x0010 <br>#define DL_OWNED                        0x0010 <br> <br> <br>// Field sizes in the object properties structures <br>#define MAX_ALIAS_SIZE      16 <br>#define MAX_STRING_SIZE     32 <br>#define MAX_PHONE_SIZE      12 <br>#define MAX_COMMENT_SIZE    79 <br>#define MAX_PASSWORD_SIZE   MAX_ALIAS_SIZE <br> <br>// Constants for the transports <br>#define TRANSPORT_MESSAGE_EID_SIZE              MAX_ALIAS_SIZE <br>#define ENTRYID_DATA_FIELD_SIZE                 MAX_ALIAS_SIZE <br> <br>enum <br>{ <br>    ROOT_CONTAINER_ID       = 0xFFFFFFFF, <br>    GATEWAY_CONTAINERS_ID   = 0xFFFFFFFE, <br>    FAX_CONTAINER_ID        = 0xFFFFFFFD,   // Don't change the order of this (see STORAGE.CPP (ReadABContainerInfo) in the WINDS project) <br>    SMTP_CONTAINER_ID       = 0xFFFFFFFC, <br>    EXCHANGE_CONTAINER_ID   = 0xFFFFFFFB, <br>    GAL_CONTAINER_ID        = 0xFFFFFFFA <br>}; <br> <br>typedef enum _WINDS_AB_OBJTYPE <br>{ <br>    UNDEFINED_OBJECT_TYPE       = 0, <br>    SERVER_USER_MAILBOX         = 1,    // Don't change the order or the values <br>    SERVER_DISTRIBUTION_LIST    = 2, <br>    GATEWAY_RECIPIENT           = 3, <br>    PUBLIC_FOLDER               = 4 <br>} WINDS_AB_OBJTYPE; <br> <br>typedef struct _PUBLIC_FOLDER_INFO_A <br>{ <br>    char        szFolderName[MAX_STRING_SIZE+4]; <br>    char        szComments[MAX_COMMENT_SIZE+4]; <br>    DWORD       dwObjID; <br>    FILETIME    ftCreationTime; <br>    FILETIME    ftLastModTime; <br>    DWORD       dwMessageStorageSize; <br>    DWORD       dwMessageCount; <br>    DWORD       pdwMessagesIDs; <br>} PUBLIC_FOLDER_INFO_A, *PPUBLIC_FOLDER_INFO_A; <br> <br>typedef struct _PUBLIC_FOLDER_INFO_W <br>{ <br>    WCHAR       szFolderName[MAX_STRING_SIZE+4]; <br>    WCHAR       szComments[MAX_COMMENT_SIZE+4]; <br>    DWORD       dwObjID; <br>    FILETIME    ftCreationTime; <br>    FILETIME    ftLastModTime; <br>    DWORD       dwMessageStorageSize; <br>    DWORD       dwMessageCount; <br>    DWORD       pdwMessagesIDs; <br>} PUBLIC_FOLDER_INFO_W, *PPUBLIC_FOLDER_INFO_W; <br> <br>typedef struct _PF_MESSAGE_PROPERTIES_A <br>{ <br>    char    szAuthor[MAX_ALIAS_SIZE+4]; <br>    DWORD   dwObjID; <br>} PF_MESSAGE_PROPERTIES_A, *PPF_MESSAGE_PROPERTIES_A; <br> <br>typedef struct _PF_MESSAGE_PROPERTIES_W <br>{ <br>    WCHAR   szAuthor[MAX_ALIAS_SIZE+4]; <br>    DWORD   dwObjID; <br>} PF_MESSAGE_PROPERTIES_W, *PPF_MESSAGE_PROPERTIES_W; <br> <br> <br>typedef struct _MAILBOX_INFO_A <br>{ <br>    char    szMailboxName[MAX_ALIAS_SIZE+1]; <br>    char    szFullName[MAX_STRING_SIZE+1]; <br>    char    szJobTitle[MAX_STRING_SIZE+1]; <br>    char    szOffice[MAX_STRING_SIZE+1]; <br>    char    szPhone[MAX_PHONE_SIZE+1]; <br>    char    szAltPhone[MAX_PHONE_SIZE+1]; <br>    char    szFax[MAX_PHONE_SIZE+1]; <br>    char    szPassword[MAX_ALIAS_SIZE+1]; <br>    char    szCompany[MAX_STRING_SIZE+1]; <br>    char    szDepartment[MAX_STRING_SIZE+1]; <br>    char    szComments[MAX_COMMENT_SIZE+1]; <br>    char    szManagerName[MAX_STRING_SIZE+1]; <br>    char    szManagerAlias[MAX_STRING_SIZE+1]; <br>    DWORD   dwManagerID; <br>    DWORD   dwObjID; <br>    DWORD   dwFlags; <br>} MAILBOX_INFO_A, *PMAILBOX_INFO_A; <br> <br>typedef struct _MAILBOX_INFO_W <br>{ <br>    WCHAR   szMailboxName[MAX_ALIAS_SIZE+1]; <br>    WCHAR   szFullName[MAX_STRING_SIZE+1]; <br>    WCHAR   szJobTitle[MAX_STRING_SIZE+1]; <br>    WCHAR   szOffice[MAX_STRING_SIZE+1]; <br>    WCHAR   szPhone[MAX_PHONE_SIZE+1]; <br>    WCHAR   szAltPhone[MAX_PHONE_SIZE+1]; <br>    WCHAR   szFax[MAX_PHONE_SIZE+1]; <br>    WCHAR   szPassword[MAX_ALIAS_SIZE+1]; <br>    WCHAR   szCompany[MAX_STRING_SIZE+1]; <br>    WCHAR   szDepartment[MAX_STRING_SIZE+1]; <br>    WCHAR   szComments[MAX_COMMENT_SIZE+1]; <br>    WCHAR   szManagerName[MAX_STRING_SIZE+1]; <br>    WCHAR   szManagerAlias[MAX_STRING_SIZE+1]; <br>    DWORD   dwManagerID; <br>    DWORD   dwObjID; <br>    DWORD   dwFlags; <br>} MAILBOX_INFO_W, *PMAILBOX_INFO_W; <br> <br>typedef struct _DIST_LIST_INFO_A <br>{ <br>    char                szDLAlias[MAX_ALIAS_SIZE+1]; <br>    char                szDLFullName[MAX_STRING_SIZE+1]; <br>    DWORD               dwObjID; <br>    DWORD               dwFlags; <br>    char                szOwnerAlias[MAX_ALIAS_SIZE+1]; <br>    char                szOwnerName[MAX_STRING_SIZE+1]; <br>    DWORD               dwOwnerID; <br>    char                szComments[MAX_COMMENT_SIZE+1]; <br>    DWORD               dwMemberCount; <br>    LPVOID              pMembers; <br>} DIST_LIST_INFO_A, *PDIST_LIST_INFO_A; <br> <br>typedef struct _DIST_LIST_INFO_W <br>{ <br>    WCHAR               szDLAlias[MAX_ALIAS_SIZE+1]; <br>    WCHAR               szDLFullName[MAX_STRING_SIZE+1]; <br>    DWORD               dwObjID; <br>    DWORD               dwFlags; <br>    WCHAR               szOwnerAlias[MAX_ALIAS_SIZE+1]; <br>    WCHAR               szOwnerName[MAX_STRING_SIZE+1]; <br>    DWORD               dwOwnerID; <br>    WCHAR               szComments[MAX_COMMENT_SIZE+1]; <br>    DWORD               dwMemberCount; <br>    LPVOID              pMembers; <br>} DIST_LIST_INFO_W, *PDIST_LIST_INFO_W; <br> <br>// UNICODE/ANSI macro for the structures <br>#ifdef UNICODE <br>#error WINDS: UNICODE has not been implemented yet. IrvingD 9/11/95 <br>#define MAILBOX_INFO                MAILBOX_INFO_W <br>#define PMAILBOX_INFO               PMAILBOX_INFO_W <br>#define DIST_LIST_INFO              DIST_LIST_INFO_W <br>#define PDIST_LIST_INFO             PDIST_LIST_INFO_W <br>#define PUBLIC_FOLDER_INFO          PUBLIC_FOLDER_INFO_W <br>#define PPUBLIC_FOLDER_INFO         PPUBLIC_FOLDER_INFO_W <br>#define PF_MESSAGE_PROPERTIES       PF_MESSAGE_PROPERTIES_W <br>#define PPF_MESSAGE_PROPERTIES      PPF_MESSAGE_PROPERTIES_W <br>#else <br>#define MAILBOX_INFO                MAILBOX_INFO_A <br>#define PMAILBOX_INFO               PMAILBOX_INFO_A <br>#define DIST_LIST_INFO              DIST_LIST_INFO_A <br>#define PDIST_LIST_INFO             PDIST_LIST_INFO_A <br>#define PUBLIC_FOLDER_INFO          PUBLIC_FOLDER_INFO_A <br>#define PPUBLIC_FOLDER_INFO         PPUBLIC_FOLDER_INFO_A <br>#define PF_MESSAGE_PROPERTIES       PF_MESSAGE_PROPERTIES_A <br>#define PPF_MESSAGE_PROPERTIES      PPF_MESSAGE_PROPERTIES_A <br>#endif <br> <br>typedef union _WINDS_OBJS_INFO <br>{ <br>    DWORD               dwFlags; <br>    MAILBOX_INFO        MB; <br>    DIST_LIST_INFO      DL; <br>    PUBLIC_FOLDER_INFO  PF; <br>} WINDS_OBJS_INFO; <br> <br>typedef struct _AB_ENTRY_INFO <br>{ <br>    WINDS_OBJS_INFO     Info; <br>    WINDS_AB_OBJTYPE    Type; <br>} AB_ENTRY_INFO, *PAB_ENTRY_INFO; <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Message Transport Support <br> <br>// Command numbers for telling the remote server what to do (from a transport) <br>typedef enum tagMID <br>{ <br>    MSG_DOWNLOAD,  <br>    MSG_DELETE, <br>    MSG_MOVE, <br>    OP_STARTED, <br>    OP_COMPLETE, <br>    OP_FAILED, <br>    GOODBYE, <br>    UNMARKED <br>} MID; <br> <br>// Command message header <br> <br>typedef union _MSG_HDR_INFO <br>{ <br>    BYTE    EID[TRANSPORT_MESSAGE_EID_SIZE]; <br>    ULONG   ulMsgLen; <br>} MSG_HDR_INFO; <br> <br>typedef struct _MSG_HDR <br>{ <br>    MID             ulMID; <br>    MSG_HDR_INFO    Info; <br>} MSG_HDR; <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Client/Server notification support  <br> <br>enum <br>{ <br>    WINDS_NOTIF_ON_USER         = 0x0001, <br>    WINDS_NOTIF_ON_XP           = 0x0002, <br>    WINDS_NOTIF_ON_AB           = 0x0004, <br>    WINDS_NOTIF_ON_MS           = 0x0008 <br>}; <br> <br>typedef enum _WINDS_NOTIF_EVENT <br>{ <br>    GENERAL_NOTIF_MIN           = 0x0000, <br>    LOGGED_USER_PROPS_CHANGED   = 0x0000, <br>    SERVER_IS_SHUTTING_DOWN     = 0x0001, <br>    SERVER_HAS_RESTARTED        = 0x0002, <br>    RESET_LINKS_WITH_SERVER     = 0x0003, <br>    GENERAL_NOTIF_MAX           = 0x000F, <br> <br>    XP_NOTIF_MIN                = 0x0010, <br>    XP_NEW_MAIL_ARRIVED         = 0x0010, <br>    XP_NOTIF_MAX                = 0x00F0, <br> <br>    AB_NOTIF_MIN                = 0x0100, <br>    AB_USER_ADDED               = 0x0100, <br>    AB_USER_MODIFIED            = 0x0200, <br>    AB_USER_DELETED             = 0x0300, <br>    AB_DL_ADDED                 = 0x0400, <br>    AB_DL_MODIFIED              = 0x0500, <br>    AB_DL_DELETED               = 0x0600, <br>    AB_GET_LOCAL_ABDATA_NOW     = 0x0700, <br>    AB_NOTIF_MAX                = 0x0F00, <br> <br>    MS_NOTIF_MIN                = 0x1000, <br>    MS_MESSAGE_ADDED            = 0x1000, <br>    MS_MESSAGE_MODIFIED         = 0x2000, <br>    MS_MESSAGE_DELETED          = 0x3000, <br>    MS_FOLDER_ADDED             = 0x4000, <br>    MS_FOLDER_MODIFIED          = 0x5000, <br>    MS_FOLDER_DELETED           = 0x6000, <br>    MS_NOTIF_MAX                = 0xF000 <br> <br>} WINDS_NOTIF_EVENT; <br> <br>typedef struct _WINDS_NOTIFICATION <br>{ <br>    WINDS_NOTIF_EVENT   Event; <br>    FILETIME            ftEventTime; <br>    WINDS_OBJS_INFO     Info; <br>} WINDS_NOTIFICATION, *PWINDS_NOTIFICATION; <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Generic exception class for C++'s throw and catch <br> <br>class CException <br>{ <br>public: <br>    CException() <br>    { <br>        m_hResult = E_FAIL; <br>    } <br>    CException (HRESULT hResult) <br>    { <br>        if (0 == hResult) <br>        { <br>            hResult = E_FAIL; <br>        } <br>        m_hResult = hResult; <br>    } <br>    inline HRESULT WINAPI GetError() <br>    { <br>        return m_hResult; <br>    } <br>private: <br>    HRESULT m_hResult; <br>}; <br> <br>#endif // _WINDSGBL_H <br> <br>// End of file for WINDSGBL.H </code></pre>
<p>&nbsp;</p></body>
</HTML>

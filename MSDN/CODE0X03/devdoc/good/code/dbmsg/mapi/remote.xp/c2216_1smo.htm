<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XPSTREAM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2220"></a>XPSTREAM.H</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name  <br>//      XPSTREAM.H <br>// <br>//  Description <br>//      Interface declaraction file for CCachedStream. <br>// <br>//  Author <br>//      Irving De la Cruz <br>// <br>//  Note: This file is the C++ version of the buffered IStream wrapper <br>//        developed originally for the C-based MSPEER transport in <br>//        the MAPI SDK samples. <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#ifndef _XPSTREAM_H <br>#define _XPSTREAM_H <br> <br>#define STRICT <br>#include &lt;WINDOWS.H&gt; <br>#include &lt;MAPIWIN.H&gt; <br>#include &lt;MAPISPI.H&gt; <br>#include &lt;MAPIUTIL.H&gt; <br> <br>#define XPSOF_BUFF_MAX      4096 <br>#define XPSOF_READ          0x00000001 <br>#define XPSOF_WRITE         0x00000002 <br>#define XPSOF_READWRITE     (XPSOF_WRITE | XPSOF_READ) <br> <br>class CCachedStream : public IStream <br>{ <br>public: <br>/////////////////////////////////////////////////////////////////////////////// <br>// IUnknown virtual member functions <br>// <br>    inline STDMETHODIMP QueryInterface <br>                    (REFIID                     riid, <br>                     LPVOID *                   ppvObj) <br>                    { *ppvObj = NULL; <br>                      if (riid == IID_IStream || riid == IID_IUnknown) <br>                      { <br>                          *ppvObj = (LPVOID)this; <br>                          // Increase usage count of this object <br>                          AddRef(); <br>                          return S_OK; <br>                      } <br>                      return E_NOINTERFACE; <br>                    }; <br>    inline STDMETHODIMP_(ULONG) AddRef <br>                    () { ++m_cRef; return m_cRef; }; <br>    inline STDMETHODIMP_(ULONG) Release <br>                    () { ULONG ulCount = --m_cRef; <br>                         if (!ulCount) { delete this; } <br>                         return ulCount;}; <br>/////////////////////////////////////////////////////////////////////////////// <br>// IStream virtual member functions <br>// <br>    STDMETHODIMP Read <br>                    (void *                     pv, <br>                     ULONG                      cb, <br>                     ULONG *                    pcbRead); <br>    STDMETHODIMP Write <br>                    (const void *               pv, <br>                     ULONG                      cb, <br>                     ULONG *                    pcbWritten); <br>    STDMETHODIMP Seek <br>                    (LARGE_INTEGER              dlibMove, <br>                     DWORD                      dwOrigin, <br>                     ULARGE_INTEGER *           plibNewPosition); <br>    STDMETHODIMP CopyTo <br>                    (IStream *                  pstm, <br>                     ULARGE_INTEGER cb, <br>                     ULARGE_INTEGER *           pcbRead, <br>                     ULARGE_INTEGER *           pcbWritten); <br>    STDMETHODIMP Commit <br>                    (DWORD                      grfCommitFlags); <br>    inline STDMETHODIMP SetSize <br>                    (ULARGE_INTEGER             libNewSize) <br>                     { return m_pImpStream-&gt;SetSize (libNewSize); }; <br>    inline STDMETHODIMP Revert <br>                    () <br>                     { return m_pImpStream-&gt;Revert(); }; <br>    inline STDMETHODIMP LockRegion <br>                    (ULARGE_INTEGER             libOffset, <br>                     ULARGE_INTEGER             cb, <br>                     DWORD                      dwLockType) <br>                     { return m_pImpStream-&gt;LockRegion (libOffset, cb, dwLockType); }; <br>    inline STDMETHODIMP UnlockRegion <br>                    (ULARGE_INTEGER             libOffset, <br>                     ULARGE_INTEGER             cb, <br>                     DWORD                      dwLockType) <br>                     { return m_pImpStream-&gt;UnlockRegion (libOffset, cb, dwLockType); }; <br>    inline STDMETHODIMP Stat <br>                    (STATSTG *                  pstatstg, <br>                     DWORD                      grfStatFlag) <br>                     { return m_pImpStream-&gt;Stat (pstatstg, grfStatFlag); }; <br>    inline STDMETHODIMP Clone <br>                    (IStream **                 ppstm) <br>                     { return m_pImpStream-&gt;Clone (ppstm); }; <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Other member functions specific to this class <br>// <br>private: <br>    HRESULT WINAPI RewindStream <br>                    (ULONG                      ib); <br>     <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>public : <br>    CCachedStream   (LPSTREAM                   pImpStream, <br>                     DWORD                      ulFlags); <br>    ~CCachedStream  (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>public : <br>    ULONG               m_cRef; <br>    BOOL                m_fDirty; <br>    LPSTREAM            m_pImpStream; <br>    ULONG               m_ulFlags; <br>    LPVOID              m_pvCache; <br>    ULONG               m_libBuff; <br>    ULONG               m_cbBuffMac; <br>}; <br> <br>#endif // _XPSTREAM_H <br> <br>// End of file for XPSTREAM.H </code></pre>
<p>&nbsp;</p></body>
</HTML>

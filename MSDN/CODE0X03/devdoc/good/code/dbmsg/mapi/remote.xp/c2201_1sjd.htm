<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINDS_C.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2209"></a>WINDS_C.C</h2>
<pre><code>/* this ALWAYS GENERATED file contains the RPC client stubs */ <br> <br> <br>/* File created by MIDL compiler version 2.00.0102 */ <br>/* at Mon Sep 25 11:13:21 1995 <br> */ <br>//@@MIDL_FILE_HEADING(  ) <br> <br>#include &lt;string.h&gt; <br>#if defined( _ALPHA_ ) <br>#include &lt;stdarg.h&gt; <br>#endif <br> <br>#include "winds.h" <br> <br> <br>extern const MIDL_FORMAT_STRING __MIDLFormatString; <br> <br>extern const MIDL_FORMAT_STRING __MIDLProcFormatString; <br>handle_t hWINDSREM; <br> <br> <br>static const RPC_CLIENT_INTERFACE WINDSREM___RpcClientInterface = <br>    { <br>    sizeof(RPC_CLIENT_INTERFACE), <br>    {{0xDDFFFE60,0x36D0,0x11CE,{0x9F,0x2D,0x00,0xAA,0x00,0x51,0x0E,0x3B}},{1,6}}, <br>    {{0x8A885D04,0x1CEB,0x11C9,{0x9F,0xE8,0x08,0x00,0x2B,0x10,0x48,0x60}},{2,0}}, <br>    0, <br>    0, <br>    0, <br>    0, <br>    0 <br>    }; <br>RPC_IF_HANDLE WINDSREM_v1_6_c_ifspec = (RPC_IF_HANDLE)&amp; WINDSREM___RpcClientInterface; <br> <br>extern const MIDL_STUB_DESC WINDSREM_StubDesc; <br> <br>static RPC_BINDING_HANDLE WINDSREM__MIDL_AutoBindHandle; <br> <br> <br>long RemoteIsServerRunning( void) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          0); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 0U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[0] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetAllAccounts(  <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          1); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 0U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[2] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteFinishUpload(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szCookie) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          2); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szCookie, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szCookie, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[8] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetContainerProps(  <br>    /* [in] */ unsigned long dwContainerID, <br>    /* [out] */ unsigned long __RPC_FAR *pdwContentCount) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          3); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwContainerID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[14] ); <br>         <br>        *pdwContentCount = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetContainerRecipients(  <br>    /* [in] */ unsigned long dwFlags, <br>    /* [in] */ unsigned long dwContainerID, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          4); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U + 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwFlags; <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwContainerID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[22] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetPublicFoldersList(  <br>    /* [in] */ short nFlags, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          5); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 2U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( short __RPC_FAR * )_StubMsg.Buffer)++ = nFlags; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[32] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetPublicFolderMessages(  <br>    /* [in] */ short nFlags, <br>    /* [in] */ unsigned long dwFolderID, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          6); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 2U + 6U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( short __RPC_FAR * )_StubMsg.Buffer)++ = nFlags; <br>         <br>        _StubMsg.Buffer += 2; <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwFolderID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[40] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteChangePasswordA(  <br>    /* [in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [string][in] */ unsigned char __RPC_FAR *szOldPassword, <br>    /* [string][in] */ unsigned char __RPC_FAR *szNewPassword) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          7); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 1U + 12U + 13U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOldPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szNewPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned char __RPC_FAR * )_StubMsg.Buffer)++ = *szMailbox; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOldPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szNewPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[50] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteLogonMailBoxA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [string][in] */ unsigned char __RPC_FAR *szPassword, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwMailboxID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          8); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 13U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[64] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[16], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwMailboxID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteLogonMailBoxAndSetNotifA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [string][in] */ unsigned char __RPC_FAR *szPassword, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwMailboxID, <br>    /* [string][in] */ unsigned char __RPC_FAR *szComputerName, <br>    /* [in] */ unsigned long ulNotifMask, <br>    /* [out] */ unsigned long __RPC_FAR *pulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          9); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 13U + 13U + 11U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulNotifMask; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[82] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[26], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwMailboxID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        *pulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteTerminateNotifA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szComputerName, <br>    /* [in] */ unsigned long ulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          10); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 11U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulConnectionID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[110] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteValidateNotifA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szComputerName, <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailboxName, <br>    /* [in] */ unsigned long ulNotifMask, <br>    /* [out] */ unsigned long __RPC_FAR *pulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          11); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 13U + 11U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailboxName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailboxName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulNotifMask; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[118] ); <br>         <br>        *pulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenMsgUploadPipeA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szSenderMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szCookie) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          12); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szSenderMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szSenderMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[134] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szCookie, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[36], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteSendMsgToAccountA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szRecipAccount, <br>    /* [string][in] */ unsigned char __RPC_FAR *szHeaderInfo, <br>    /* [string][in] */ unsigned char __RPC_FAR *szCookie) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          13); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 13U + 13U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szRecipAccount, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, </code></pre>
<p>
</p>
<pre><code>(unsigned char __RPC_FAR *)szHeaderInfo, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szCookie, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szRecipAccount, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szHeaderInfo, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szCookie, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[148] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenMsgDownloadPipeA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [out] */ unsigned long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          14); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[162] ); <br>         <br>        *pPipeNumber = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenHeaderDownloadPipeA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          15); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[162] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteCheckNewMailA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [out] */ unsigned long __RPC_FAR *pulPending) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          16); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[162] ); <br>         <br>        *pulPending = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenOneMsgDownloadPipeA(  <br>    /* [string][in] */ unsigned char __RPC_FAR *szMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          17); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[6] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[162] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetRecipientPropsA(  <br>    /* [in] */ unsigned long dwObjID, <br>    /* [out] */ unsigned long __RPC_FAR *pdwUserType, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szMailboxName, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szFullName, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szJobTitle, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szOffice, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szPhone, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szAltPhone, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szFax, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szComments, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szCompany, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szDepartment, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szManagerName, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szManagerAlias, <br>    /* [out] */ unsigned long __RPC_FAR *pdwManagerID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          18); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwObjID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[172] ); <br>         <br>        *pdwUserType = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szMailboxName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[46], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[56], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szJobTitle, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[66], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOffice, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[76], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szPhone, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[86], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szAltPhone, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[96], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFax, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[106], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[116], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szCompany, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[126], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDepartment, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[136], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szManagerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[146], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szManagerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[156], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwManagerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetDistListPropsA(  <br>    /* [in] */ unsigned long dwObjID, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szDLAlias, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szDLFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwContentCount, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szOwnerAlias, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szOwnerName, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szComments) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          19); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwObjID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[232] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[166], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[176], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwContentCount = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[186], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[196], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[206], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteChangePasswordW(  <br>    /* [in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [string][in] */ wchar_t __RPC_FAR *szOldPassword, <br>    /* [string][in] */ wchar_t __RPC_FAR *szNewPassword) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          20); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 2U + 12U + 14U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szOldPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szNewPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( wchar_t __RPC_FAR * )_StubMsg.Buffer)++ = *szMailbox; <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szOldPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szNewPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[260] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteLogonMailBoxW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [string][in] */ wchar_t __RPC_FAR *szPassword, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwMailboxID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          21); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 14U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[274] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[224], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwMailboxID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteLogonMailBoxAndSetNotifW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [string][in] */ wchar_t __RPC_FAR *szPassword, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwMailboxID, <br>    /* [string][in] */ wchar_t __RPC_FAR *szComputerName, <br>    /* [in] */ unsigned long ulNotifMask, <br>    /* [out] */ unsigned long __RPC_FAR *pulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          22); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 14U + 14U + 10U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szPassword, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szPassword, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulNotifMask; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[292] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[234], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwMailboxID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        *pulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteTerminateNotifW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szComputerName, <br>    /* [in] */ unsigned long ulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          23); <br>         <br>         <br>        _Handle = hWINDSREM; </code></pre>
<p>
</p>
<pre><code><br>         <br>        _StubMsg.BufferLength = 12U + 10U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulConnectionID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[320] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteValidateNotifW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szComputerName, <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailboxName, <br>    /* [in] */ unsigned long ulNotifMask, <br>    /* [out] */ unsigned long __RPC_FAR *pulConnectionID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          24); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 14U + 10U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szComputerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailboxName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szComputerName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailboxName, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = ulNotifMask; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[328] ); <br>         <br>        *pulConnectionID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenMsgUploadPipeW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szSenderMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber, <br>    /* [size_is][string][out] */ unsigned char __RPC_FAR *szCookie) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          25); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szSenderMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szSenderMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[344] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szCookie, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[244], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteSendMsgToAccountW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szRecipAccount, <br>    /* [string][in] */ wchar_t __RPC_FAR *szHeaderInfo, <br>    /* [string][in] */ wchar_t __RPC_FAR *szCookie) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          26); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U + 14U + 14U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szRecipAccount, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szHeaderInfo, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szCookie, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szRecipAccount, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szHeaderInfo, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szCookie, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[358] ); <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenMsgDownloadPipeW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [out] */ unsigned long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          27); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[372] ); <br>         <br>        *pPipeNumber = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenHeaderDownloadPipeW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          28); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[372] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteCheckNewMailW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [out] */ unsigned long __RPC_FAR *pulPending) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          29); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[372] ); <br>         <br>        *pulPending = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteOpenOneMsgDownloadPipeW(  <br>    /* [string][in] */ wchar_t __RPC_FAR *szMailbox, <br>    /* [out] */ long __RPC_FAR *pPipeNumber) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          30); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 12U; <br>        NdrConformantStringBufferSize( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR *)szMailbox, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        NdrConformantStringMarshall( (PMIDL_STUB_MESSAGE)&amp; _StubMsg, <br>                                     (unsigned char __RPC_FAR *)szMailbox, <br>                                     (PFORMAT_STRING) &amp;__MIDLFormatString.Format[218] ); <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[372] ); <br>         <br>        *pPipeNumber = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetRecipientPropsW(  <br>    /* [in] */ unsigned long dwObjID, <br>    /* [out] */ unsigned long __RPC_FAR *pdwUserType, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szMailboxName, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szFullName, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szJobTitle, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szOffice, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szPhone, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szAltPhone, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szFax, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szComments, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szCompany, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szDepartment, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szManagerName, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szManagerAlias, <br>    /* [out] */ unsigned long __RPC_FAR *pdwManagerID) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          31); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwObjID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[382] ); <br>         <br>        *pdwUserType = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szMailboxName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[254], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[264], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szJobTitle, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[274], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOffice, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[284], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szPhone, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[294], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szAltPhone, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[304], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szFax, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[314], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[324], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szCompany, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[334], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDepartment, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[344], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szManagerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[354], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szManagerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[364], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwManagerID = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>long RemoteGetDistListPropsW(  <br>    /* [in] */ unsigned long dwObjID, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szDLAlias, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szDLFullName, <br>    /* [out] */ unsigned long __RPC_FAR *pdwContentCount, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szOwnerAlias, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szOwnerName, <br>    /* [size_is][string][out] */ wchar_t __RPC_FAR *szComments) <br>{ <br> <br>    RPC_BINDING_HANDLE _Handle  =   0; <br>     <br>    long _RetVal; <br>     <br>    RPC_MESSAGE _RpcMessage; <br>     <br>    MIDL_STUB_MESSAGE _StubMsg; <br>     <br>    RpcTryFinally <br>        { <br>        NdrClientInitializeNew( <br>                          ( PRPC_MESSAGE  )&amp;_RpcMessage, <br>                          ( PMIDL_STUB_MESSAGE  )&amp;_StubMsg, <br>                          ( PMIDL_STUB_DESC  )&amp;WINDSREM_StubDesc, <br>                          32); <br>         <br>         <br>        _Handle = hWINDSREM; <br>         <br>         <br>        _StubMsg.BufferLength = 4U; <br>        NdrGetBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, _StubMsg.BufferLength, _Handle ); <br>         <br>        *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++ = dwObjID; <br>         <br>        NdrSendReceive( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (unsigned char __RPC_FAR *) _StubMsg.Buffer ); <br>         <br>        if ( (_RpcMessage.DataRepresentation &amp; 0X0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION ) <br>            NdrConvert( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, (PFORMAT_STRING) &amp;__MIDLProcFormatString.Format[442] ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[374], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szDLFullName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[384], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        *pdwContentCount = *(( unsigned long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerAlias, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[394], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szOwnerName, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[404], <br>                                       (unsigned char)0 ); <br>         <br>        NdrConformantStringUnmarshall( (PMIDL_STUB_MESSAGE) &amp;_StubMsg, <br>                                       (unsigned char __RPC_FAR * __RPC_FAR *)&amp;szComments, <br>                                       (PFORMAT_STRING) &amp;__MIDLFormatString.Format[414], <br>                                       (unsigned char)0 ); <br>         <br>        _StubMsg.Buffer = (unsigned char __RPC_FAR *)(((long)_StubMsg.Buffer + 3) &amp; ~ 0x3); <br>        _RetVal = *(( long __RPC_FAR * )_StubMsg.Buffer)++; <br>         <br>        } <br>    RpcFinally <br>        { <br>        NdrFreeBuffer( (PMIDL_STUB_MESSAGE) &amp;_StubMsg ); <br>         <br>        } <br>    RpcEndFinally <br>     <br>    return _RetVal; <br>} <br> <br> <br>static const MIDL_STUB_DESC WINDSREM_StubDesc =  <br>    { <br>    (void __RPC_FAR *)&amp; WINDSREM___RpcClientInterface, <br>    MIDL_user_allocate, <br>    MIDL_user_free, <br>    &amp;hWINDSREM, <br>    0, <br>    0, <br>    0, <br>    0, <br>    __MIDLFormatString.Format, <br>    0, /* -error bounds_check flag */ <br>    0x10001, /* Ndr library version */ <br>    0, <br>    0x2000066, /* MIDL Version 2.0.102 */ <br>    0 <br>    }; <br> <br>#if !defined(__RPC_WIN32__) <br>#error  Invalid build platform for this stub. <br>#endif <br> <br>static const MIDL_FORMAT_STRING __MIDLProcFormatString = <br>    { <br>        0, <br>        { <br>            0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/*  2 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/*  4 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/*  6 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/*  8 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 10 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 12 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 14 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 16 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 18 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 20 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 22 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 24 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 26 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 28 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 30 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 32 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ </code></pre>
<p>
</p>
<pre><code>0x6,        /* FC_SHORT */ <br>/* 34 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 36 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 38 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 40 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x6,        /* FC_SHORT */ <br>/* 42 */    0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 44 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 46 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 48 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 50 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 52 */    NdrFcShort( 0x8 ),  /* Type Offset=8 */ <br>/* 54 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 56 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 58 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 60 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 62 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 64 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 66 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 68 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 70 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 72 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 74 */    NdrFcShort( 0xc ),  /* Type Offset=12 */ <br>/* 76 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 78 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 80 */    0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 82 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 84 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 86 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 88 */    NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 90 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 92 */    NdrFcShort( 0x16 ), /* Type Offset=22 */ <br>/* 94 */     <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 96 */    NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 98 */     <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 100 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 102 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 104 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 106 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 108 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 110 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 112 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 114 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 116 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 118 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 120 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 122 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 124 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 126 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 128 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 130 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 132 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 134 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 136 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 138 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 140 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 142 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 144 */   NdrFcShort( 0x20 ), /* Type Offset=32 */ <br>/* 146 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 148 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 150 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 152 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 154 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 156 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 158 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 160 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 162 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 164 */   NdrFcShort( 0x4 ),  /* Type Offset=4 */ <br>/* 166 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 168 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 170 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 172 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 174 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 176 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 178 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 180 */   NdrFcShort( 0x2a ), /* Type Offset=42 */ <br>/* 182 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 184 */   NdrFcShort( 0x34 ), /* Type Offset=52 */ <br>/* 186 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 188 */   NdrFcShort( 0x3e ), /* Type Offset=62 */ <br>/* 190 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 192 */   NdrFcShort( 0x48 ), /* Type Offset=72 */ <br>/* 194 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 196 */   NdrFcShort( 0x52 ), /* Type Offset=82 */ <br>/* 198 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 200 */   NdrFcShort( 0x5c ), /* Type Offset=92 */ <br>/* 202 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 204 */   NdrFcShort( 0x66 ), /* Type Offset=102 */ <br>/* 206 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 208 */   NdrFcShort( 0x70 ), /* Type Offset=112 */ <br>/* 210 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 212 */   NdrFcShort( 0x7a ), /* Type Offset=122 */ <br>/* 214 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 216 */   NdrFcShort( 0x84 ), /* Type Offset=132 */ <br>/* 218 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 220 */   NdrFcShort( 0x8e ), /* Type Offset=142 */ <br>/* 222 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 224 */   NdrFcShort( 0x98 ), /* Type Offset=152 */ <br>/* 226 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 228 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 230 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 232 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 234 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 236 */   NdrFcShort( 0xa2 ), /* Type Offset=162 */ <br>/* 238 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 240 */   NdrFcShort( 0xac ), /* Type Offset=172 */ <br>/* 242 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 244 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 246 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 248 */   NdrFcShort( 0xb6 ), /* Type Offset=182 */ <br>/* 250 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 252 */   NdrFcShort( 0xc0 ), /* Type Offset=192 */ <br>/* 254 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 256 */   NdrFcShort( 0xca ), /* Type Offset=202 */ <br>/* 258 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 260 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 262 */   NdrFcShort( 0xd4 ), /* Type Offset=212 */ <br>/* 264 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 266 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 268 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 270 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 272 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 274 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 276 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 278 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 280 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 282 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 284 */   NdrFcShort( 0xdc ), /* Type Offset=220 */ <br>/* 286 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 288 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 290 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 292 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 294 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 296 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 298 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 300 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 302 */   NdrFcShort( 0xe6 ), /* Type Offset=230 */ <br>/* 304 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 306 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 308 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 310 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 312 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 314 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 316 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 318 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 320 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 322 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 324 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 326 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 328 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 330 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 332 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 334 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 336 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 338 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 340 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 342 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 344 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 346 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 348 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 350 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 352 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 354 */   NdrFcShort( 0xf0 ), /* Type Offset=240 */ <br>/* 356 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 358 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 360 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 362 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 364 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 366 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 368 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 370 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 372 */    <br>            0x4d,       /* FC_IN_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 374 */   NdrFcShort( 0xd8 ), /* Type Offset=216 */ <br>/* 376 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 378 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 380 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 382 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 384 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 386 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 388 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 390 */   NdrFcShort( 0xfa ), /* Type Offset=250 */ <br>/* 392 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 394 */   NdrFcShort( 0x104 ),    /* Type Offset=260 */ <br>/* 396 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 398 */   NdrFcShort( 0x10e ),    /* Type Offset=270 */ <br>/* 400 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 402 */   NdrFcShort( 0x118 ),    /* Type Offset=280 */ <br>/* 404 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 406 */   NdrFcShort( 0x122 ),    /* Type Offset=290 */ <br>/* 408 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 410 */   NdrFcShort( 0x12c ),    /* Type Offset=300 */ <br>/* 412 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 414 */   NdrFcShort( 0x136 ),    /* Type Offset=310 */ <br>/* 416 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 418 */   NdrFcShort( 0x140 ),    /* Type Offset=320 */ <br>/* 420 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 422 */   NdrFcShort( 0x14a ),    /* Type Offset=330 */ <br>/* 424 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 426 */   NdrFcShort( 0x154 ),    /* Type Offset=340 */ <br>/* 428 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 430 */   NdrFcShort( 0x15e ),    /* Type Offset=350 */ <br>/* 432 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 434 */   NdrFcShort( 0x168 ),    /* Type Offset=360 */ <br>/* 436 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 438 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 440 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 442 */   0x4e,       /* FC_IN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br>/* 444 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 446 */   NdrFcShort( 0x172 ),    /* Type Offset=370 */ <br>/* 448 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 450 */   NdrFcShort( 0x17c ),    /* Type Offset=380 */ <br>/* 452 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 454 */   NdrFcShort( 0x0 ),  /* Type Offset=0 */ <br>/* 456 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 458 */   NdrFcShort( 0x186 ),    /* Type Offset=390 */ <br>/* 460 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 462 */   NdrFcShort( 0x190 ),    /* Type Offset=400 */ <br>/* 464 */    <br>            0x51,       /* FC_OUT_PARAM */ <br>#ifndef _ALPHA_ <br>            0x1,        /* x86, MIPS &amp; PPC Stack size = 1 */ <br>#else <br>            0x2,        /* Alpha Stack size = 2 */ <br>#endif <br>/* 466 */   NdrFcShort( 0x19a ),    /* Type Offset=410 */ <br>/* 468 */   0x53,       /* FC_RETURN_PARAM_BASETYPE */ <br>            0x8,        /* FC_LONG */ <br> <br>            0x0 <br>        } <br>    }; <br> <br>static const MIDL_FORMAT_STRING __MIDLFormatString = <br>    { <br>        0, <br>        { <br>            0x11, 0xc,  /* FC_RP [alloced_on_stack] [simple_pointer] */ <br>/*  2 */    0x8,        /* FC_LONG */ <br>            0x5c,       /* FC_PAD */ <br>/*  4 */     <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/*  6 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x5c,       /* FC_PAD */ <br>/*  8 */     <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/* 10 */    0x2,        /* FC_CHAR */ <br>            0x5c,       /* FC_PAD */ <br>/* 12 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 14 */    NdrFcShort( 0x2 ),  /* Offset= 2 (16) */ <br>/* 16 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 18 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 20 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 22 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 24 */    NdrFcShort( 0x2 ),  /* Offset= 2 (26) */ <br>/* 26 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 28 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 30 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 32 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 34 */    NdrFcShort( 0x2 ),  /* Offset= 2 (36) */ <br>/* 36 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 38 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 40 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 42 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 44 */    NdrFcShort( 0x2 ),  /* Offset= 2 (46) */ <br>/* 46 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 48 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 50 */    NdrFcShort( 0x11 ), /* 17 */ <br>/* 52 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 54 */    NdrFcShort( 0x2 ),  /* Offset= 2 (56) */ <br>/* 56 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 58 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 60 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 62 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 64 */    NdrFcShort( 0x2 ),  /* Offset= 2 (66) */ <br>/* 66 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ </code></pre>
<p>
</p>
<pre><code>/* 68 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 70 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 72 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 74 */    NdrFcShort( 0x2 ),  /* Offset= 2 (76) */ <br>/* 76 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 78 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 80 */    NdrFcShort( 0x21 ), /* 33 */ <br>/* 82 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 84 */    NdrFcShort( 0x2 ),  /* Offset= 2 (86) */ <br>/* 86 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 88 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 90 */    NdrFcShort( 0xd ),  /* 13 */ <br>/* 92 */     <br>            0x11, 0x0,  /* FC_RP */ <br>/* 94 */    NdrFcShort( 0x2 ),  /* Offset= 2 (96) */ <br>/* 96 */     <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 98 */    0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 100 */   NdrFcShort( 0xd ),  /* 13 */ <br>/* 102 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 104 */   NdrFcShort( 0x2 ),  /* Offset= 2 (106) */ <br>/* 106 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 108 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 110 */   NdrFcShort( 0xd ),  /* 13 */ <br>/* 112 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 114 */   NdrFcShort( 0x2 ),  /* Offset= 2 (116) */ <br>/* 116 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 118 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 120 */   NdrFcShort( 0x50 ), /* 80 */ <br>/* 122 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 124 */   NdrFcShort( 0x2 ),  /* Offset= 2 (126) */ <br>/* 126 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 128 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 130 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 132 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 134 */   NdrFcShort( 0x2 ),  /* Offset= 2 (136) */ <br>/* 136 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 138 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 140 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 142 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 144 */   NdrFcShort( 0x2 ),  /* Offset= 2 (146) */ <br>/* 146 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 148 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 150 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 152 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 154 */   NdrFcShort( 0x2 ),  /* Offset= 2 (156) */ <br>/* 156 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 158 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 160 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 162 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 164 */   NdrFcShort( 0x2 ),  /* Offset= 2 (166) */ <br>/* 166 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 168 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 170 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 172 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 174 */   NdrFcShort( 0x2 ),  /* Offset= 2 (176) */ <br>/* 176 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 178 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 180 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 182 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 184 */   NdrFcShort( 0x2 ),  /* Offset= 2 (186) */ <br>/* 186 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 188 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 190 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 192 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 194 */   NdrFcShort( 0x2 ),  /* Offset= 2 (196) */ <br>/* 196 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 198 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 200 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 202 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 204 */   NdrFcShort( 0x2 ),  /* Offset= 2 (206) */ <br>/* 206 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 208 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 210 */   NdrFcShort( 0x50 ), /* 80 */ <br>/* 212 */    <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/* 214 */   0x5,        /* FC_WCHAR */ <br>            0x5c,       /* FC_PAD */ <br>/* 216 */    <br>            0x11, 0x8,  /* FC_RP [simple_pointer] */ <br>/* 218 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x5c,       /* FC_PAD */ <br>/* 220 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 222 */   NdrFcShort( 0x2 ),  /* Offset= 2 (224) */ <br>/* 224 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 226 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 228 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 230 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 232 */   NdrFcShort( 0x2 ),  /* Offset= 2 (234) */ <br>/* 234 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 236 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 238 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 240 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 242 */   NdrFcShort( 0x2 ),  /* Offset= 2 (244) */ <br>/* 244 */    <br>            0x22,       /* FC_C_CSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 246 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 248 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 250 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 252 */   NdrFcShort( 0x2 ),  /* Offset= 2 (254) */ <br>/* 254 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 256 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 258 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 260 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 262 */   NdrFcShort( 0x2 ),  /* Offset= 2 (264) */ <br>/* 264 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 266 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 268 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 270 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 272 */   NdrFcShort( 0x2 ),  /* Offset= 2 (274) */ <br>/* 274 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 276 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 278 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 280 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 282 */   NdrFcShort( 0x2 ),  /* Offset= 2 (284) */ <br>/* 284 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 286 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 288 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 290 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 292 */   NdrFcShort( 0x2 ),  /* Offset= 2 (294) */ <br>/* 294 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 296 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 298 */   NdrFcShort( 0xd ),  /* 13 */ <br>/* 300 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 302 */   NdrFcShort( 0x2 ),  /* Offset= 2 (304) */ <br>/* 304 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 306 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 308 */   NdrFcShort( 0xd ),  /* 13 */ <br>/* 310 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 312 */   NdrFcShort( 0x2 ),  /* Offset= 2 (314) */ <br>/* 314 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 316 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 318 */   NdrFcShort( 0xd ),  /* 13 */ <br>/* 320 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 322 */   NdrFcShort( 0x2 ),  /* Offset= 2 (324) */ <br>/* 324 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 326 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 328 */   NdrFcShort( 0x50 ), /* 80 */ <br>/* 330 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 332 */   NdrFcShort( 0x2 ),  /* Offset= 2 (334) */ <br>/* 334 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 336 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 338 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 340 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 342 */   NdrFcShort( 0x2 ),  /* Offset= 2 (344) */ <br>/* 344 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 346 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 348 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 350 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 352 */   NdrFcShort( 0x2 ),  /* Offset= 2 (354) */ <br>/* 354 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 356 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 358 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 360 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 362 */   NdrFcShort( 0x2 ),  /* Offset= 2 (364) */ <br>/* 364 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 366 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 368 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 370 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 372 */   NdrFcShort( 0x2 ),  /* Offset= 2 (374) */ <br>/* 374 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 376 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 378 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 380 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 382 */   NdrFcShort( 0x2 ),  /* Offset= 2 (384) */ <br>/* 384 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 386 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 388 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 390 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 392 */   NdrFcShort( 0x2 ),  /* Offset= 2 (394) */ <br>/* 394 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 396 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 398 */   NdrFcShort( 0x11 ), /* 17 */ <br>/* 400 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 402 */   NdrFcShort( 0x2 ),  /* Offset= 2 (404) */ <br>/* 404 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 406 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 408 */   NdrFcShort( 0x21 ), /* 33 */ <br>/* 410 */    <br>            0x11, 0x0,  /* FC_RP */ <br>/* 412 */   NdrFcShort( 0x2 ),  /* Offset= 2 (414) */ <br>/* 414 */    <br>            0x25,       /* FC_C_WSTRING */ <br>            0x44,       /* FC_STRING_SIZED */ <br>/* 416 */   0x40,       /* 64 */ <br>            0x0,        /* 0 */ <br>/* 418 */   NdrFcShort( 0x50 ), /* 80 */ <br> <br>            0x0 <br>        } <br>    }; <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XPWDSR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2221"></a>XPWDSR.H</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name  <br>//      XPWDSR.H <br>// <br>//  Description <br>//      Interface declaraction file for CXPLogon, CXPProvider, CMAPIFolder, <br>//      and CMAPIStatus. <br>//      Property tag definitions. <br>//      Constant definitions. <br>// <br>//  Author <br>//      Irving De la Cruz <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#ifndef _XPWDSR_H <br>#define _XPWDSR_H <br> <br>#define STRICT <br>#include &lt;WINDOWS.H&gt; <br>#include &lt;WINDOWSX.H&gt; <br>#include &lt;MAPIWIN.H&gt; <br>#include &lt;MAPISPI.H&gt; <br>#include &lt;MAPIUTIL.H&gt; <br>#include &lt;MAPIVAL.H&gt; <br>#include &lt;TNEF.H&gt; <br> <br>#ifdef _DEBUG <br>#define ENABLE_DEBUG_OUTPUT     1 <br>#endif // _DEBUG <br> <br>// Header file for the trace and logging functions. <br>#include "TRACES.H" <br> <br>// Common defs used by providers to communicate to the WINDS Sample Messaging Host <br>#include "COMWINDS.H" <br> <br>// Config Page Dialog Control IDs Message String ID's <br>#include "RESOURCE.H" <br> <br>// Cached stream for the TNEF object <br>#include "XPSTREAM.H" <br> <br>// Definition for the helper classes CList and CMsgQueue <br>#include "XPLIST.H" <br> <br>/// Names returned in the status object <br>#define TRANSPORT_DISPLAY_NAME_STRING       TEXT("PSS WINDS Remote Transport") <br>#define TRANSPORT_DLL_NAME_STRING           TEXT("XPWDSR.DLL") <br> <br>// Internal provider version <br>#define TRANSPORT_VERSION_MAJOR             1 <br>#define TRANSPORT_VERSION_MINOR             5 <br> <br>// Name of the stream where the message properties get encoded using TNEF encapsulation <br>#define TNEF_FILE_NAME                      TEXT("WINMAIL.DAT") <br> <br>// Bitmask used to modify the PR_STATUS_CODE property in the status row of this <br>// transport, when the download or upload logic is active. <br>#define DOWNLOADING_MESSAGES (STATUS_INBOUND_FLUSH | STATUS_INBOUND_ACTIVE) <br>#define UPLOADING_MESSAGES (STATUS_OUTBOUND_FLUSH | STATUS_OUTBOUND_ACTIVE) <br> <br>// Window class name used in the timer window <br>#define TIMER_WND_CLASS     TEXT("WINDS_XP_TIMER") <br> <br>// This is copied from GENPROP.H in other PSS MAPI sample providers <br>typedef struct _PRIVATE_ENTRYID <br>{ <br>    // MAPI-required fields <br>    BYTE        abFlags[4];     // 4 bytes          // MAPI Flags <br>    MAPIUID     uidGlobal;      // 16 bytes         // UID Unique for the backend (ie. at the database file level)  (This must be here) <br>    // Provider-defined fields <br>    BYTE        bVersion;       // 1 bytes          // Version of the entry ID schema <br>    BYTE        bObject;        // 1 bytes          // Object type <br>    BYTE        bPad[2];        // 2 bytes          // Pad to align the structure to 4-bytes boundaries <br>    DWORD       dwObjID;        // 4 bytes          // Object ID (container or object) <br>                                // 28 Bytes Total <br>} PRIVATE_ENTRYID; <br>#define     ENTRYID_VERSION     1       // Schema version <br>#define     CB_PRIVATE_EID      28      // Size of the structure above <br> <br> <br>// The order for this enumarations must match the order of the properties <br>// in the tag arrays. These arrays are used to access the  <br>// LPSPropValue arrays returned from MAPI interfaces. The use of enumerations <br>// hides differences when the number of properties in the tag array increases <br>// or decreases. It also helps maintain error-free indexing in the use of  <br>// the prop arrays <br>enum <br>{ <br>    //SERVER_NAME           = 0,        // Array Indexes <br>    //MAILBOX_NAME          = 1, <br>    //MAILBOX_ID            = 2, <br>    //USER_NAME             = 3, <br>    //PASSWORD              = 4, <br>    //NET_CON               = 5, <br>    UPLOAD_TIME             = 6, <br>    HEADER_FILE             = 7, <br>    GET_HEADERS             = 8, <br>    NUM_LOGON_PROPERTIES    = 9         // Array size <br>}; <br> <br>// ID array of property tags for the trannsport <br>const static SizedSPropTagArray(NUM_LOGON_PROPERTIES, sptLogonProps) = <br>{ <br>    NUM_LOGON_PROPERTIES, <br>    { <br>        PR_SMP_REMOTE_SERVER,           // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 0) <br>        PR_SMP_MAILBOX_NAME,            // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 1) <br>        PR_SMP_MAILBOX_ID,              // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 2) <br>        PR_SMP_USER_NAME,               // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 3) <br>        PR_SMP_MAILBOX_PASSWORD,        // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 4) <br>        PR_SMP_CONNECTION_TYPE,         // DON'T CHANGE THE ORDER OF THIS PROPERTY  (position 5) <br>        PR_SMP_UPLOAD_TIME, <br>        PR_SMP_HEADERS_FILENAME, <br>        PR_SMP_GET_HEADERS <br>    } <br>}; <br> <br>// Idle state of the transport <br>typedef enum _TRANSPORT_STATE <br>{ <br>    WAITING,                // Waiting for the deferred submission time to arrive to send deferred messages <br>    READY,                  // Ready to accept re-submission of deferred messages <br>    SENDING,                // The transport is sending deferred messages <br>    HEADERS_AND_DOWNLOAD,   // Get the latest list of message headers and download messages from the server <br>    PENDING_RETURN_CODE,    // A remote operation has finished and the result code is pending to be returned to a remote viewer <br>    PROCESSING_TIMER_EVENT, // Download the message headers as a response to the scheduled action <br>} TRANSPORT_STATE; <br> <br>typedef enum _REMOTE_ACTION <br>{ <br>    REMOTE_ACTION_DOWNLOADING_MSGS, <br>    REMOTE_ACTION_PROCESSING_MSGS, <br>    REMOTE_ACTION_HEADER_REFRESH, <br>    REMOTE_ACTION_IDLE <br>} REMOTE_ACTION; <br> <br>// Indexes of the identity property array <br>enum <br>{ <br>    XPID_NAME,              // Array Indexes <br>    XPID_EID, <br>    XPID_SEARCH_KEY, <br>    NUM_IDENTITY_PROPS      // Array size <br>}; <br> <br>// Indexes of the properties in each row in the contents table of the remote mailbag folder. <br>enum <br>{ <br>    HDR_EID,                // Array Indexes <br>    HDR_SNDR, <br>    HDR_REPR, <br>    HDR_DISP_TO, <br>    HDR_SUBJ, <br>    HDR_CLASS, <br>    HDR_FLAGS, <br>    HDR_SIZE, <br>    HDR_PRIOR, <br>    HDR_IMPORTANCE, <br>    HDR_SENS, <br>    HDR_TIME, <br>    HDR_STAT, <br>    HDR_DOWNLOAD_TIME, <br>    HDR_HASATTACH, <br>    HDR_OBJ_TYPE, <br>    HDR_INST_KEY, <br>    HDR_NORM_SUBJ, <br>    NUM_HDR_PROPS           // Array size <br>}; <br>static const SizedSPropTagArray(NUM_HDR_PROPS, sptFldContents) = <br>{ <br>    NUM_HDR_PROPS, <br>    { <br>        PR_ENTRYID,                 // Index column in the contents table <br>        PR_SENDER_NAME, <br>        PR_SENT_REPRESENTING_NAME, <br>        PR_DISPLAY_TO, <br>        PR_SUBJECT, <br>        PR_MESSAGE_CLASS, <br>        PR_MESSAGE_FLAGS, <br>        PR_MESSAGE_SIZE, <br>        PR_PRIORITY, <br>        PR_IMPORTANCE, <br>        PR_SENSITIVITY, <br>        PR_MESSAGE_DELIVERY_TIME, <br>        PR_MSG_STATUS, <br>        PR_MESSAGE_DOWNLOAD_TIME, <br>        PR_HASATTACH, <br>        PR_OBJECT_TYPE, <br>        PR_INSTANCE_KEY, <br>        PR_NORMALIZED_SUBJECT, <br>    } <br>}; <br> <br>// Available properties in the folder object  <br>#define NUM_FOLDER_PROPS        12 <br>static const SizedSPropTagArray (NUM_FOLDER_PROPS, sptFolderProps) = <br>{ <br>    NUM_FOLDER_PROPS, <br>    { <br>        PR_ACCESS, <br>        PR_ACCESS_LEVEL, <br>        PR_CONTENT_COUNT, <br>        PR_ASSOC_CONTENT_COUNT, <br>        PR_FOLDER_TYPE, <br>        PR_OBJECT_TYPE, <br>        PR_SUBFOLDERS, <br>        PR_CREATION_VERSION, <br>        PR_CURRENT_VERSION, <br>        PR_CREATION_TIME, <br>        PR_DISPLAY_NAME, <br>        PR_DISPLAY_TYPE <br>    } <br>}; <br> <br> <br>// Indexes of the properties we extracting of a message being <br>// submitted to generate the remote server message header. <br>enum <br>{ <br>    MSG_DISP_TO,            // Array Indexes <br>    MSG_SUBJECT, <br>    MSG_CLASS, <br>    MSG_FLAGS, <br>    MSG_SIZE, <br>    MSG_PRIORITY, <br>    MSG_IMPORTANCE, <br>    MSG_SENSITIVITY, <br>    MSG_DR_REPORT, <br>    NUM_MSG_PROPS           // Array size <br>}; <br>static const SizedSPropTagArray(NUM_MSG_PROPS, sptPropsForHeader) = <br>{ <br>    NUM_MSG_PROPS, <br>    { <br>        PR_DISPLAY_TO, <br>        PR_SUBJECT, <br>        PR_MESSAGE_CLASS, <br>        PR_MESSAGE_FLAGS, <br>        PR_MESSAGE_SIZE, <br>        PR_PRIORITY, <br>        PR_IMPORTANCE, <br>        PR_SENSITIVITY, <br>        PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED <br>    } <br>}; <br> <br>#define OUT_MSG_PROPS 2 <br>static const SizedSPropTagArray(OUT_MSG_PROPS, sptOutMsgProps) = <br>{ <br>    OUT_MSG_PROPS, <br>    { <br>        PR_SENDER_ENTRYID, <br>        PR_SENT_REPRESENTING_NAME <br>    } <br>}; <br> <br>// Used to generate one-off's for the sender of newly received messages <br>enum <br>{ <br>    NEW_SENDER_NAME, <br>    NEW_SENDER_EMAIL, <br>    NEW_SENT_NAME, <br>    NEW_SENT_EMAIL, <br>    NEW_MSG_FLAGS, <br>    NUM_NEW_MSG_PROPS <br>}; <br>static const SizedSPropTagArray(NUM_NEW_MSG_PROPS, sptNewMsgProps) = <br>{ <br>    NUM_NEW_MSG_PROPS, <br>    { <br>        PR_SENDER_NAME, <br>        PR_SENDER_EMAIL_ADDRESS, <br>        PR_SENT_REPRESENTING_NAME, <br>        PR_SENT_REPRESENTING_EMAIL_ADDRESS, <br>        PR_MESSAGE_FLAGS <br>    } <br>}; <br> <br>// Used to generate transport-computed properties on received mail messages <br>#define MSG_RECIP_PROPS     2 <br>static const SizedSPropTagArray(MSG_RECIP_PROPS, sptMsgRecipProps) = <br>{ <br>    MSG_RECIP_PROPS, <br>    { <br>        PR_EMAIL_ADDRESS, <br>        PR_RECIPIENT_TYPE <br>    } <br>}; <br>// Indexes to order the recipient's table of messages being submitted <br>enum <br>{ <br>    RECIP_ROWID, <br>    RECIP_NAME, <br>    RECIP_EMAIL_ADR, <br>    RECIP_TYPE, <br>    RECIP_RESPONSIBILITY, <br>    RECIP_DELIVER_TIME, <br>    RECIP_REPORT_TIME, <br>    RECIP_REPORT_TEXT, <br>    TABLE_RECIP_PROPS <br>}; <br>const static SizedSPropTagArray (TABLE_RECIP_PROPS, sptRecipTable) = <br>{ <br>    TABLE_RECIP_PROPS, <br>    { <br>        PR_ROWID, <br>        PR_DISPLAY_NAME, <br>        PR_EMAIL_ADDRESS, <br>        PR_RECIPIENT_TYPE, <br>        PR_RESPONSIBILITY, <br>        PR_DELIVER_TIME, <br>        PR_REPORT_TIME, <br>        PR_REPORT_TEXT <br>    } <br>}; <br> <br> <br>// Available properties in the status object of this provider <br>#define NUM_STATUS_OBJECT_PROPS    13 <br>const static SizedSPropTagArray (NUM_STATUS_OBJECT_PROPS, sptStatusObj) = <br>{ <br>    NUM_STATUS_OBJECT_PROPS, <br>    { <br>        PR_OBJECT_TYPE, <br>        PR_STATUS_CODE, <br>        PR_PROVIDER_DISPLAY, <br>        PR_PROVIDER_DLL_NAME, <br>        PR_RESOURCE_METHODS, <br>        PR_RESOURCE_FLAGS, <br>        PR_RESOURCE_TYPE, <br>        PR_STATUS_STRING, <br>        PR_DISPLAY_NAME, <br>        PR_IDENTITY_DISPLAY, <br>        PR_IDENTITY_ENTRYID, <br>        PR_IDENTITY_SEARCH_KEY, <br>        PR_CURRENT_VERSION <br>    } <br>}; <br> <br>// Stand-alone helper functions (C style) <br>extern "C" <br>{ <br>    HRESULT WINAPI DoLogonDlg <br>                    (PCFGDLG                    pCfgDialog); <br>    MSGSERVICEENTRY ServiceEntry; <br>    HRESULT WINAPI GetMAPIError <br>                    (LPMAPIERROR *              ppMAPIError, <br>                     ULONG                      ulFlags, <br>                     HRESULT                    hError, <br>                     HINSTANCE                  hInstance); <br>    BOOL WINAPI ParseTime <br>                    (LPTSTR                     pszTime, <br>                     WORD *                     pwHour, <br>                     WORD *                     pwMinute); <br>    void WINAPI GetTimeString <br>                    (LPTSTR                     pszTime, <br>                     FILETIME                   FileTime); <br>    extern LPALLOCATEBUFFER    gpfnAllocateBuffer;  // MAPIAllocateBuffer function <br>    extern LPALLOCATEMORE      gpfnAllocateMore;    // MAPIAllocateMore function     <br>    extern LPFREEBUFFER        gpfnFreeBuffer;      // MAPIFreeBuffer function       <br>} <br> <br>// Forward class declarations <br>class CMAPIFolder; <br>class CList; <br> <br>class CMAPIStatus : public IMAPIStatus <br>{ <br>friend CXPLogon; <br>friend CList; <br>public: <br>/////////////////////////////////////////////////////////////////////////////// <br>// Interface virtual member functions <br>// <br>    STDMETHODIMP QueryInterface <br>                    (REFIID                     riid, <br>                     LPVOID *                   ppvObj); <br>    inline STDMETHODIMP_(ULONG) AddRef <br>                    () { ++m_cRef; return m_cRef; }; <br>    inline STDMETHODIMP_(ULONG) Release <br>                    () { ULONG ulCount = --m_cRef; <br>                         if (!ulCount) { delete this; } <br>                         return ulCount;}; <br> <br>    MAPI_IMAPIPROP_METHODS(IMPL); <br>    MAPI_IMAPISTATUS_METHODS(IMPL); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Other member functions specific to this transport <br>// <br>     <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>// <br>public : <br>    CMAPIStatus     (CXPLogon *                 pLogon, <br>                     LPPROFSECT                 pProfSectObj); <br>    ~CMAPIStatus    (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>// <br>private : <br>    ULONG           m_cRef; <br>    CXPLogon *      m_pLogon; <br>    CMAPIFolder *   m_pHeaderFolder; <br>    LPPROFSECT      m_pProfSectObj; <br>}; <br> <br>class  CMAPIFolder : public IMAPIFolder <br>{ <br>friend CXPLogon; <br>friend CMAPIStatus; <br>friend CList; <br>public: <br>/////////////////////////////////////////////////////////////////////////////// <br>// Interface virtual member functions <br>// <br>    STDMETHODIMP QueryInterface <br>                    (REFIID                     riid, <br>                     LPVOID *                   ppvObj); <br>    inline STDMETHODIMP_(ULONG) AddRef <br>                    () { ++m_cRef; return m_cRef; }; <br>    STDMETHODIMP_(ULONG) Release(); <br>    MAPI_IMAPIPROP_METHODS(IMPL); <br>    MAPI_IMAPICONTAINER_METHODS(IMPL); <br>    MAPI_IMAPIFOLDER_METHODS(IMPL); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Other member functions specific to this class <br>// <br>    STDMETHODIMP FillContentsTable <br>                    (LPTSTR                     pszHeaderFilename); <br>    STDMETHODIMP CopyTableToFile <br>                    (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>// <br>public : <br>    CMAPIFolder     (CMAPIStatus *              pStatusObj, <br>                     CXPLogon *                 pLogonObj); <br>    ~CMAPIFolder    (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>// <br>private : <br>    ULONG           m_cRef; <br>    CXPLogon *      m_pLogon; <br>    CMAPIStatus *   m_pStatusObj; <br>    LPTABLEDATA     m_pTableData; <br>    BOOL            m_fNoHeadersFile; <br>    FILETIME        m_ftLastUpdate; <br>}; <br> <br>class CXPLogon : public IXPLogon <br>{ <br>public: <br>/////////////////////////////////////////////////////////////////////////////// <br>// Interface virtual member functions <br>// <br>    STDMETHODIMP QueryInterface <br>                    (REFIID                     riid, <br>                     LPVOID *                   ppvObj); <br>    inline STDMETHODIMP_(ULONG) AddRef <br>                    () { ++m_cRef; return m_cRef; }; <br>    inline STDMETHODIMP_(ULONG) Release <br>                    () { ULONG ulCount = --m_cRef; <br>                         if (!ulCount) { delete this; } <br>                         return ulCount;}; <br>    MAPI_IXPLOGON_METHODS(IMPL); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Other member functions specific to this transport <br>// <br>public : <br>    STDMETHODIMP InitializeStatusRow <br>                    (ULONG                      ulFlags = 0); <br>    STDMETHODIMP SetIdentityProps <br>                    (); <br>    STDMETHODIMP DownloadMessageHeaders <br>                    (); <br>    STDMETHODIMP MakeSearchKey <br>                    (LPVOID                     pParentMemBlock, <br>                     LPTSTR                     pszAddress, <br>                     ULONG *                    pcbSearchKey, <br>                     LPBYTE *                   ppSearchKey); <br>    STDMETHODIMP GrowAddressList <br>                    (LPADRLIST *                ppAdrList, <br>                     ULONG                      ulResizeBy, <br>                     ULONG *                    pulOldAndNewCount); <br>    STDMETHODIMP SendMailMessage <br>                    (LPMESSAGE                  pMsgObj, <br>                     LPSRowSet                  pRecipRows); <br>    STDMETHODIMP SetIncomingProps <br>                    (LPMESSAGE                  pMsgObj, <br>                     PLIST_NODE                 pNode); <br>    BOOL WINAPI GetMsgTempFileName <br>                    (LPTSTR                     pszFileName); <br>    BOOL WINAPI IsValidAddress <br>                    (LPTSTR                     pszAddress, <br>                     LPTSTR *                   ppszServer, <br>                     LPTSTR *                   ppszMailbox); <br>    BOOL WINAPI LoadStatusString <br>                    (LPTSTR                     pString, <br>                     UINT                       uStringSize); <br>    void WINAPI InitializeTransportStatusFlags <br>                    (ULONG                      ulFlags); <br>    void WINAPI UpdateStatus <br>                    (BOOL                       fAddValidate = FALSE, <br>                     BOOL                       fValidateOkState = FALSE); <br>    void WINAPI UpdateProgress <br>                    (long                       lPercentComplete, <br>                     REMOTE_ACTION              raFlag); <br>    void WINAPI SetSessionFlags <br>                    (ULONG *                    pulFlags); <br>    void WINAPI CreateMsgHeaderTextLine <br>                    (LPSPropValue               pProps, <br>                     LPTSTR                     pszBuffer, <br>                     FILETIME &amp;                 time); <br>    void WINAPI SetOutgoingProps <br>                    (LPMESSAGE                  pMsgObj, <br>                     FILETIME                   ft); <br>    void WINAPI CheckForUnfinishedDownloads <br>                    (); <br>    void WINAPI InitializeTimer <br>                    (); <br>    void WINAPI StopUploadTimer <br>                    (); <br>    void WINAPI StartUploadTimer <br>                    (); <br>    inline BOOL WINAPI SetUploadTime <br>                    (FILETIME                   ftUploads) <br>                    { SYSTEMTIME st; <br>                     FileTimeToSystemTime (&amp;ftUploads, &amp;st); <br>                     BOOL fChanged = FALSE; <br>                     if (m_stDelivTime.wHour != st.wHour || m_stDelivTime.wMinute != st.wMinute) <br>                     { fChanged = TRUE; } <br>                     m_stDelivTime = st; <br>                     return fChanged; } <br>    inline void WINAPI AddStatusBits <br>                    (DWORD dwNewBits) { m_ulTransportStatus |= dwNewBits; } <br>    inline void WINAPI RemoveStatusBits <br>                    (DWORD dwOldBits) { m_ulTransportStatus &amp;= ~dwOldBits; } <br>    inline void WINAPI SetTransportState <br>                    (TRANSPORT_STATE NewState) { m_TransportState = NewState; } <br>    inline DWORD WINAPI GetTransportStatusCode <br>                    () { return m_ulTransportStatus; } <br>    inline LPTABLEDATA WINAPI GetRemoteFolderTableData <br>                    () { return m_pStatusObj-&gt;m_pHeaderFolder-&gt;m_pTableData; } <br>    inline TRANSPORT_STATE WINAPI GetTransportState <br>                    () { return m_TransportState; } <br>    inline HINSTANCE WINAPI GetInstance <br>                    () { return m_hInstance; } <br>    inline LPTSTR WINAPI GetLocalHeadersCache <br>                    () { return m_szHeaders; } <br>    inline LPTSTR WINAPI GetServerName <br>                    () { return m_szServer; } <br>    inline void WINAPI SetServerName <br>                    (LPTSTR                     szNewServer) <br>                    { lstrcpy (m_szServer, szNewServer); } <br>    inline LPTSTR WINAPI GetAccountName <br>                    () { return m_UserInfo.szMailboxName; } <br>    inline BOOL WINAPI PendingIncoming <br>                    () { return m_List.AreTherePendingDownloads(); } <br>    inline void WINAPI SetAccountProps <br>                    (LPTSTR                     szAccountName, <br>                     DWORD                      dwAccountID, <br>                     LPTSTR                     szUserName, <br>                     LPTSTR                     szPassword) <br>                    { lstrcpy (m_UserInfo.szMailboxName, szAccountName); <br>                      lstrcpy (m_UserInfo.szFullName, szUserName); <br>                      lstrcpy (m_UserInfo.szPassword, szPassword); <br>                      m_UserEID.dwObjID = dwAccountID; <br>                      LPSPropValue pOldProps = m_pIdentityProps; <br>                      if (S_OK == SetIdentityProps()) <br>                      { <br>                          gpfnFreeBuffer (pOldProps); <br>                      } <br>                      wsprintf (m_szAddress, TEXT("%s\\%s"), m_szServer, m_UserInfo.szMailboxName);} <br>private: <br>    void WINAPI CheckSpoolerYield <br>                    (BOOL                       fReset = FALSE); <br>    void WINAPI EmptyInboundQueue <br>                    (); <br>    STDMETHODIMP ProcessHeaders <br>                    (); <br>    inline void WINAPI DecomposeAddress <br>                    (LPTSTR                     pszAddress, <br>                     LPTSTR *                   ppszServer, <br>                     LPTSTR *                   ppszMailbox) <br>                    { <br>                        // The 2 is to avoid the expected first two characters <br>                        strtok (&amp;pszAddress[2], "\\"); <br>                        *ppszServer = pszAddress; <br>                        *ppszMailbox = strtok (NULL, "\\"); <br>                    } <br>    inline void WINAPI RecomposeAddress <br>                    (LPTSTR                     pszServer, <br>                     LPTSTR                     pszMailbox, <br>                     LPTSTR                     pszAddress) <br>                    { <br>                        // pszAddress must have previouly been decomposed with <br>                        // CXPLogon::DecomposeAddress <br>                        pszAddress[lstrlen (pszServer)] = '\\'; <br>                    } <br> <br>     <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>public : <br>    CXPLogon        (HINSTANCE                  hInstance, <br>                     LPMAPISUP                  pSupObj, <br>                     LPTSTR                     pszHeadersFile, <br>                     BOOL                       fGetHeaders, <br>                     PMAILBOX_INFO              pUserMailboxInfo, <br>                     DWORD                      dwMailboxID, <br>                     LPTSTR                     pszRemoteServer, <br>                     HANDLE                     hUIMutex); <br>    ~CXPLogon       (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>private : <br>    // Object implementation internal data <br>    ULONG               m_cRef; <br>    HINSTANCE           m_hInstance; <br>    CList               m_List; <br>    BOOL                m_fABWDSInstalled; <br>public : <br>    LPMAPISUP           m_pSupObj; <br>    HANDLE              m_hUIMutex; <br>    HRESULT             m_hRemoteActionErr; <br>    BOOL                m_fCancelPending; <br>    CMAPIStatus *       m_pStatusObj; <br> <br>private : <br>    // Remote headers <br>    TCHAR               m_szHeaders[_MAX_PATH]; <br>    BOOL                m_fGetHeaders; <br> <br>    // Transport activity state <br>    ULONG               m_ulTransportStatus; <br>    TRANSPORT_STATE     m_TransportState; <br>    REMOTE_ACTION       m_raAction; <br> <br>    // Server information <br>    TCHAR               m_szServer[MAX_STRING_SIZE+1]; <br>     <br>    // User information and identity on the WINDS messaging server <br>    MAILBOX_INFO        m_UserInfo; <br>    PRIVATE_ENTRYID     m_UserEID; <br>    TCHAR               m_szAddress[64]; <br>public : <br>    LPSPropValue        m_pIdentityProps; <br> <br>private : <br>    // Deferred delivery and timer logic <br>    SYSTEMTIME          m_stDelivTime; <br>    HWND                m_hTimerWnd; <br>public : <br>    UINT                m_uTimerID; <br>}; <br> <br>class CXPProvider : public IXPProvider <br>{ <br>friend CXPLogon; <br>friend CMAPIStatus; <br>friend CMAPIFolder; <br>public: <br>/////////////////////////////////////////////////////////////////////////////// <br>// Interface virtual member functions <br>// <br>    STDMETHODIMP QueryInterface <br>                    (REFIID                     riid, <br>                     LPVOID *                   ppvObj); <br>    inline STDMETHODIMP_(ULONG) AddRef <br>                    () { ++m_cRef; return m_cRef; }; <br>    inline STDMETHODIMP_(ULONG) Release <br>                    () { ULONG ulCount = --m_cRef; <br>                         if (!ulCount) { delete this; } <br>                         return ulCount;}; <br>    MAPI_IXPPROVIDER_METHODS(IMPL); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Other member functions specific to this class <br>// <br>     <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>// <br>public : <br>    CXPProvider     (HINSTANCE                  hInst); <br>    ~CXPProvider    (); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>// <br>private : <br>    ULONG               m_cRef; <br>    CRITICAL_SECTION    m_csTransport; <br>    HINSTANCE           m_hInstance; <br>}; <br> <br>#endif // _XPWDSR_H <br> <br>// End of file for XPWDSR.H <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XPLIST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2214"></a>XPLIST.H</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  File Name <br>//      XPLIST.H  <br>// <br>//  Description <br>//      Data structures, class definitions, and prototypes for downloading <br>//      messages. Here define CList and CMsgQueue. <br>//      CList holds a pointer to two messages queues: Messages to download <br>//      and downloaded messages that are pending processing from the spooler. <br>// <br>//  Author <br>//      Les Thaler <br>// <br>//  Revision: 1.7 <br>// <br>// Written for Microsoft Windows Developer Support <br>// Copyright (c) 1995-1996 Microsoft Corporation. All rights reserved. <br>// <br>#ifndef _XPLIST_H_ <br>#define _XPLIST_H_ <br> <br>long WINAPI FileCopy (HANDLE hTemp, HANDLE hPipe, DWORD dwMsgLen); <br>MID WINAPI PropToMID (long lProp); <br> <br>class CList; <br>class CXPLogon; <br> <br>// node in queue of downloaded/to-be-downloaded messages <br>typedef struct _LIST_NODE <br>{ <br>    struct _LIST_NODE *     pNext; <br>    HANDLE                  hFile; <br>    TCHAR                   szFileName[_MAX_PATH]; <br>    MSG_HDR                 Hdr; <br>    MID                     OpStat; <br>    BOOL                    fRetry; <br>} LIST_NODE, *PLIST_NODE; <br> <br>     <br>// FIFO queue of downloaded/to-be-downloaded messages <br>class CMsgQueue <br>{    <br>friend CList; <br>/////////////////////////////////////////////////////////////////////////////// <br>// Member functions specific to this class <br>// <br>public: <br>    void WINAPI Insert <br>                    (PLIST_NODE             pNode); <br>    PLIST_NODE WINAPI Delete <br>                    (); <br>    inline BOOL WINAPI Empty <br>                    () { return m_ulItems == 0;}; <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>// <br>    CMsgQueue(); <br>    ~CMsgQueue();         <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>// <br>private : <br>    PLIST_NODE      m_pHead; <br>    PLIST_NODE      m_pTail; <br>public: <br>    ULONG           m_ulItems; <br>}; <br> <br>// Object for manipulating downloaded/to-be-downloaded queues <br>// including managing data transfer with remote server <br>class CList <br>{ <br>/////////////////////////////////////////////////////////////////////////////// <br>// Member functions specific to this class <br>// <br>public : <br>    BOOL WINAPI Init <br>                    (); <br>    STDMETHODIMP DownLoadMsgs <br>                    (LPMAPITABLE                pTable, <br>                     ULONG                      ulRowCount, <br>                     HANDLE                     hPipe); <br>    BOOL WINAPI UpdateTableRow <br>                    (LPBYTE                     pEID, <br>                     MID                        midAction); <br>    inline void WINAPI SetLogon <br>                    (CXPLogon *                 pLogon) <br>                    { m_pLogon = pLogon; } <br>    inline PLIST_NODE WINAPI GetDownloadNode <br>                    () { if (m_pDownloaded) <br>                         { return m_pDownloaded-&gt;Delete(); } <br>                         return NULL; } <br>    inline BOOL WINAPI AreTherePendingDownloads <br>                    () { if (m_pDownloaded) <br>                         { return (!m_pDownloaded-&gt;Empty()); } <br>                         return FALSE; } <br>    inline BOOL WINAPI QueuePendingMsgFile <br>                    (LPTSTR                     pstrFileName) <br>                    { PLIST_NODE pNode = new LIST_NODE; <br>                      if (pNode) <br>                      { ZeroMemory (pNode, sizeof(LIST_NODE)); <br>                        lstrcpy (pNode-&gt;szFileName, pstrFileName); <br>                        m_pDownloaded-&gt;Insert (pNode); <br>                        return TRUE; <br>                      } <br>                      TraceMessage ("CLisg::QueuePendingMsgFile: Failed to allocate new node"); <br>                      return FALSE; } <br>    void WINAPI UpdateProgress <br>                    (); <br>    inline void WINAPI ReQueueNode <br>                    (PLIST_NODE                 pNode) <br>                    { m_pToDownload-&gt;Insert (pNode); } <br> <br>private : <br>    void WINAPI DownLoadNow <br>                    (HANDLE                     hPipe); <br>/////////////////////////////////////////////////////////////////////////////// <br>// Constructors and destructors <br>// <br>public : <br>    CList(); <br>    ~CList(); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// Data members <br>// <br>private : <br>    ULONG               m_ulMsgCount; <br>    ULONG               m_ulMsgLeft; <br>    CXPLogon *          m_pLogon;           // We need access to his stuff <br>    CMsgQueue *         m_pToDownload;      // 'TO DO' queue <br>    CMsgQueue *         m_pDownloaded;      // 'DONE' queue <br>}; <br> <br>#endif // _XPLIST_H_ <br> <br>// End of file for XPLIST.H </code></pre>
<p>&nbsp;</p></body>
</HTML>

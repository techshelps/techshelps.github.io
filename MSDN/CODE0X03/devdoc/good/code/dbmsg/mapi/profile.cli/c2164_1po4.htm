<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATEPR.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2164"></a>CREATEPR.C</h2>
<pre><code>/* <br> *  CREATEPR.C <br> * <br> *      Very simple console app creating a profile with hardcoded values. <br> * <br> *   Copyright (c) 1995, Microsoft Corporation. All Rights Reserved. <br> * <br> */ <br> <br>#include &lt;mapiutil.h&gt; <br>#include &lt;mapiwin.h&gt; <br>#include &lt;mapidbg.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;smpms.h&gt; <br>#include &lt;smpxp.h&gt; <br>#include &lt;smpab.h&gt; <br> <br>#ifdef DEBUG <br>#define TraceFnResult(f, hr)    \ <br>{ (hr) ?   \ <br>printf(#f " returns 0x%08lX %s\n", GetScode(hr), SzDecodeScode(GetScode(hr))) : 0;\ <br>} <br>#else <br>#define TraceFnResult(f, hr) <br>#endif  /*/DEBUG*/ <br> <br> <br>HRESULT HrCreateProfile(void); <br> <br> <br>int main (void) <br>{ <br>    HRESULT hr = 0; <br> <br>    hr = HrCreateProfile(); <br> <br>    return (int) hr; <br>} <br> <br> <br> <br> <br>HRESULT HrCreateProfile(void) <br>{ <br>    LPPROFADMIN         ppa = NULL; <br>    LPSERVICEADMIN      psa = NULL; <br>    LPMAPISESSION       pses = NULL; <br>    LPMAPITABLE         ptblSvc = NULL; <br>    HRESULT             hr; <br>     <br>    LPSRowSet           prows = NULL; <br>    LPSRow              prow = NULL; <br> <br>    enum {iSvcName, iSvcUID, cptaSvc}; <br>    SizedSPropTagArray (cptaSvc, ptaSvc) = { cptaSvc,  <br>                                            {   PR_SERVICE_NAME, <br>                                                PR_SERVICE_UID } }; <br>    LPSTR               szProfile = "User XXX"; <br>    #define cProviders  3 <br>    #define nMAXProps   6 <br>    SPropValue          rgval[nMAXProps]; <br> <br> <br>    hr = MAPIInitialize(NULL); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(MAPIInitialize, hr); <br>        return hr; <br>    } <br> <br>    hr = MAPIAdminProfiles(0, &amp;ppa); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(MAPIAdminProfiles, hr); <br>        goto ret; <br>    } <br> <br>    (void) ppa-&gt;lpVtbl-&gt;DeleteProfile(ppa, szProfile, 0); <br> <br>    printf("Creating profile \"%s\"\n", szProfile); <br>    hr = ppa-&gt;lpVtbl-&gt;CreateProfile(ppa, szProfile, NULL, 0, 0); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(CreateProfile, hr); <br>        goto ret; <br>    } <br> <br>    hr = MAPILogonEx(0, szProfile, NULL, MAPI_NO_MAIL | MAPI_NEW_SESSION, <br>                               &amp;pses); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(MAPILogonEx, hr); <br>        goto ret; <br>    } <br> <br>    hr = pses-&gt;lpVtbl-&gt;AdminServices(pses, 0, &amp;psa); <br>    if (HR_FAILED(hr)) <br>        goto ret; <br>     <br>    printf("Creating Sample Message Store\n"); <br>    hr = psa-&gt;lpVtbl-&gt;CreateMsgService(psa, "SMPMS", "MAPI Sample Msg Store", 0, 0); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(CreateMsgService, hr); <br>        goto ret; <br>    } <br> <br>    printf("Creating Sample Transport\n"); <br>    hr = psa-&gt;lpVtbl-&gt;CreateMsgService(psa, "SMPXP",  <br>                                        "Sample Peer To Peer Transport", 0, 0); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(CreateMsgService, hr); <br>        goto ret; <br>    } <br> <br>    printf("Creating Sample Address Book\n"); <br>    hr = psa-&gt;lpVtbl-&gt;CreateMsgService(psa, "SMPAB",  <br>                                        "Sample Addres Book", 0, 0); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(CreateMsgService, hr); <br>        goto ret; <br>    } <br> <br> <br>    hr = psa-&gt;lpVtbl-&gt;GetMsgServiceTable(psa, 0, &amp;ptblSvc); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(GetMsgServiceTable, hr); <br>        goto ret; <br>    } <br> <br>    hr = HrQueryAllRows(ptblSvc, (LPSPropTagArray)&amp;ptaSvc, NULL, NULL, 0, &amp;prows); <br>    if (HR_FAILED(hr)) <br>    { <br>        TraceFnResult(HrQueryAllRows, hr); <br>        goto ret; <br>    } <br> <br>    Assert(prows-&gt;cRows == cProviders); <br>     <br>    for(prow = prows-&gt;aRow; prow &lt; prows-&gt;aRow + cProviders; ++prow) <br>    { <br>        Assert(prow-&gt;cValues == cptaSvc); <br>        Assert(prow-&gt;lpProps[iSvcName].ulPropTag == PR_SERVICE_NAME); <br>        Assert(prow-&gt;lpProps[iSvcUID].ulPropTag == PR_SERVICE_UID); <br>        Assert(prow-&gt;lpProps[iSvcUID].Value.bin.cb == sizeof(MAPIUID)); <br> <br>        if(!lstrcmp(prow-&gt;lpProps[iSvcName].Value.lpszA, "SMPMS")) <br>        { <br>            printf("Configuring Sample Message Store..."); <br>         <br>            rgval[0].ulPropTag      = PR_SMS_PATH; <br>            rgval[0].Value.lpszA    = "d:\\sms"; <br>             <br>            rgval[1].ulPropTag      = PR_SMS_PASSWORD; <br>            rgval[1].Value.lpszA    = "PASSWORD"; <br>             <br>            rgval[2].ulPropTag      = PR_SMS_REMEMBER_PW; <br>            rgval[2].Value.b        = TRUE; <br>             <br>            rgval[3].ulPropTag      = PR_SMS_CREATE; <br>            rgval[3].Value.b        = TRUE; <br>             <br>            hr = psa-&gt;lpVtbl-&gt;ConfigureMsgService(psa,  <br>                                (LPMAPIUID) prow-&gt;lpProps[iSvcUID].Value.bin.lpb, <br>                                            0, 0, 4, rgval); <br>            if (HR_FAILED(hr)) <br>            { <br>                printf("failed\n"); <br>                TraceFnResult(ConfigureMsgService, hr); <br>                //goto ret; <br>            } <br>            else <br>            { <br>                printf("OK\n"); <br>            } <br>        } <br>        else if(!lstrcmp(prow-&gt;lpProps[iSvcName].Value.lpszA, "SMPXP")) <br>        { <br>            printf("Configuring Sample Transport..."); <br>         <br>            rgval[0].ulPropTag  = PR_SAMPLE_DISPLAY_NAME; <br>            rgval[0].Value.LPSZ = "USER XXX"; <br>             <br>            rgval[1].ulPropTag  = PR_SAMPLE_EMAIL_ADDR_TYPE; <br>            rgval[1].Value.LPSZ = "MSPEER"; <br>             <br>            rgval[2].ulPropTag  = PR_SAMPLE_EMAIL_ADDRESS; <br>            rgval[2].Value.LPSZ = "\\\\aleksank\\d\\test\\inbound"; <br>             <br>            rgval[3].ulPropTag  = PR_SAMPLE_INBOUND_DIR; <br>            rgval[3].Value.LPSZ = "d:\\test\\inbound"; <br> <br>            rgval[4].ulPropTag  = PR_SAMPLE_OUTBOUND_DIR; <br>            rgval[4].Value.LPSZ = "d:\\test\\outbound"; <br> <br>            rgval[5].ulPropTag  = PR_SAMPLE_FLAGS; <br>            rgval[5].Value.l    = 9; <br> <br>            hr = psa-&gt;lpVtbl-&gt;ConfigureMsgService(psa,  <br>                                (LPMAPIUID) prow-&gt;lpProps[iSvcUID].Value.bin.lpb, <br>                                            0, 0, 6, rgval); <br>            if (HR_FAILED(hr)) <br>            { <br>                printf("failed\n"); <br>                TraceFnResult(ConfigureMsgService, hr); <br>                //goto ret; <br>            } <br>            else <br>            { <br>                printf("OK\n"); <br>            } <br>        } <br>        else if(!lstrcmp(prow-&gt;lpProps[iSvcName].Value.lpszA, "SMPAB")) <br>        { <br>            printf("Configuring Sample Address Book..."); <br>         <br>            rgval[0].ulPropTag  = PR_SAB_FILE; <br>            rgval[0].Value.LPSZ = "d:\\sampab.sab"; <br>             <br>            hr = psa-&gt;lpVtbl-&gt;ConfigureMsgService(psa,  <br>                                (LPMAPIUID) prow-&gt;lpProps[iSvcUID].Value.bin.lpb, <br>                                            0, 0, 1, rgval); <br>            if (HR_FAILED(hr)) <br>            { <br>                printf("failed\n"); <br>                TraceFnResult(ConfigureMsgService, hr); <br>                //goto ret; <br>            } <br>            else <br>            { <br>                printf("OK\n"); <br>            } <br>        } <br>        else <br>        { <br>            Assert(FALSE); <br>        } <br>    } <br>             <br>ret: <br>     <br>    UlRelease(ptblSvc); <br>    UlRelease(psa); <br>    UlRelease(pses); <br>    UlRelease(ppa); <br>    FreeProws(prows); <br>    MAPIUninitialize(); <br>    return hr; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

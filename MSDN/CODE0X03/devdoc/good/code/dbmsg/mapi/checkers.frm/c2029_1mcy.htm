<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBUGIT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2032"></a>DBUGIT.H</h2>
<pre><code><br> <br>// -------------------------------------------------------------------------- <br>#define TraceTag     TRACEFUNC <br>#define TraceError(_sz,_x)   TRACEFUNC(NULL,"ERROR: %s %08x",_sz,_x) <br> <br>#define DoTagsDialog() <br>#define TagRegister 0; <br>#define RestoreDefaultDebugState() <br> <br>#define tagNull      __LINE__,NULL <br>#define tagUI        __LINE__,"ui"         <br>#define tagUIOther   __LINE__,"uiother" <br>#define tagMouse     __LINE__,"mouse" <br>#define tagEngine    __LINE__,"engine" <br>#define tagEngineMin __LINE__,"enginemin" <br>#define tagForm      __LINE__,"form" <br>#define tagFormFunc  __LINE__,"formfunc" <br>#define tagFuncTriv  __LINE__,"functriv" <br> <br> <br>#define AssertSz(_x,_sz) if (!(_x)) ASSERTFUNC(_sz,__LINE__,__FILE__,#_x); <br>#define Assert(_x) AssertSz(_x,"assertion") <br>#define ASSERTDATA <br>#define pdebug <br>#define stddbgmin NULL <br>#define stddbg    NULL <br> <br>#define NYI(_x) AssertSz(0,_x) <br> <br> <br>// -------------------------------------------------------------------------- <br>#ifdef DEBUG <br>void _cdecl TRACEFUNC(int line, char * tag, char * szFmt, ...) <br>#ifdef DEBUG_CODE <br>{ <br>    va_list valMarker; <br>    static char rgch[1024]; <br>    static char szTraceNumber[32]; <br>    static char szLineNumber[32]; <br>    int  x,q; <br> <br>    if (tag &amp;&amp; 1 != GetPrivateProfileInt("tag",tag, 1, "c:\\trace.out")) return; <br> <br>    va_start(valMarker, szFmt); <br>    wvsprintf(rgch, szFmt, valMarker); <br>    lstrcat(rgch,"                                                                                                                                                      "); <br>    rgch[125] = '\0'; <br>    wsprintf(rgch + 125,"&lt;&lt;&lt; (%5d) ",line); <br>    if (tag) lstrcat(rgch,tag); <br>    else lstrcat(rgch,"NULL"); <br>    va_end(valMarker); <br> <br>    if (GetPrivateProfileInt ("trace", "trace", 0, "c:\\trace.out")) <br>    { <br>        // ----- how many traces have we output <br> <br>        x = GetPrivateProfileInt ("trace", "last", 0, "c:\\trace.out"); <br>        ++x; <br>        wsprintf(szTraceNumber,"%d",x); <br>        WritePrivateProfileString ("trace", "last", szTraceNumber, "c:\\trace.out"); <br> <br> <br>        // ----- cat the file <br> <br>        FILE *fp; <br>        fp = fopen("c:\\trace.out", "a"); <br>        if (fp) <br>        { <br>            fprintf(fp,"%s",rgch); <br>            fclose(fp); <br>        } <br>        else MessageBeep(0); <br> <br>        // ----- debug break <br> <br>        if (q=GetPrivateProfileInt ("trace", "break", 0, "c:\\trace.out")) <br>        { <br>            if (q == x || -1 == q) <br>                MessageBox(NULL,rgch,"TRACE TAG",MB_OK); <br>        } <br> <br>    } <br>} <br>#else <br>; <br>#endif <br> <br>void ASSERTFUNC(char *sz,int line,char *file,char* string) <br>#ifdef DEBUG_CODE <br>{ <br>    static char rgch[1024]; <br>    TraceTag(tagNull,"\n\nASSERTION FAILURE !!!"); <br>    MessageBeep(0); <br>    wsprintf(rgch,"%s(%d) (%s)\n%s",file,line,string,sz); <br>    TraceTag(tagNull,rgch); <br>    MessageBox(NULL,rgch,"assertion failure",MB_TASKMODAL|MB_ABORTRETRYIGNORE); <br>} <br>#else <br>; <br>#endif <br>#ifndef IID_IPersistMessage <br>#ifdef _WIN32 <br>#include &lt;objbase.h&gt; <br>#else <br>#include &lt;compobj.h&gt; <br>#endif <br>#include &lt;mapiform.h&gt; <br>#else <br>#pragma message("here we are now .. REFCLSID") <br>#endif <br>char *DumpCLSID(REFCLSID riid) <br>#ifdef DEBUG_CODE <br>    { <br>    static char ach[44]; <br>    static char szName[256]; <br> <br>    szName[0] = '\0'; <br> <br>#ifdef _WIN32 <br>    if      (IsEqualIID(riid, IID_IUnknown            )) lstrcpy(szName,"IID_IUnknown           "); <br>    else if (IsEqualIID(riid, IID_IClassFactory       )) lstrcpy(szName,"IID_IClassFactory      "); <br>    else if (IsEqualIID(riid, IID_IMalloc             )) lstrcpy(szName,"IID_IMalloc            "); <br>    else if (IsEqualIID(riid, IID_IMarshal            )) lstrcpy(szName,"IID_IMarshal           "); <br>    else if (IsEqualIID(riid, IID_IRpcChannel         )) lstrcpy(szName,"IID_IRpcChannel        "); <br>    else if (IsEqualIID(riid, IID_IRpcStub            )) lstrcpy(szName,"IID_IRpcStub           "); <br>    else if (IsEqualIID(riid, IID_IStubManager        )) lstrcpy(szName,"IID_IStubManager       "); <br>    else if (IsEqualIID(riid, IID_IRpcProxy           )) lstrcpy(szName,"IID_IRpcProxy          "); <br>    else if (IsEqualIID(riid, IID_IProxyManager       )) lstrcpy(szName,"IID_IProxyManager      "); <br>    else if (IsEqualIID(riid, IID_IPSFactory          )) lstrcpy(szName,"IID_IPSFactory         "); <br>    else if (IsEqualIID(riid, IID_ILockBytes          )) lstrcpy(szName,"IID_ILockBytes         "); <br>    else if (IsEqualIID(riid, IID_IStorage            )) lstrcpy(szName,"IID_IStorage           "); <br>    else if (IsEqualIID(riid, IID_IStream             )) lstrcpy(szName,"IID_IStream            "); <br>    else if (IsEqualIID(riid, IID_IEnumSTATSTG        )) lstrcpy(szName,"IID_IEnumSTATSTG       "); <br>    else if (IsEqualIID(riid, IID_IBindCtx            )) lstrcpy(szName,"IID_IBindCtx           "); <br>    else if (IsEqualIID(riid, IID_IMoniker            )) lstrcpy(szName,"IID_IMoniker           "); <br>    else if (IsEqualIID(riid, IID_IRunningObjectTable )) lstrcpy(szName,"IID_IRunningObjectTable"); <br>    else if (IsEqualIID(riid, IID_IInternalMoniker    )) lstrcpy(szName,"IID_IInternalMoniker   "); <br>    else if (IsEqualIID(riid, IID_IRootStorage        )) lstrcpy(szName,"IID_IRootStorage       "); <br>    else if (IsEqualIID(riid, IID_IMessageFilter      )) lstrcpy(szName,"IID_IMessageFilter     "); <br>    else if (IsEqualIID(riid, CLSID_StdMarshal        )) lstrcpy(szName,"CLSID_StdMarshal       "); <br>    else if (IsEqualIID(riid, IID_IStdMarshalInfo     )) lstrcpy(szName,"IID_IStdMarshalInfo    "); <br>    else if (IsEqualIID(riid, IID_IExternalConnection )) lstrcpy(szName,"IID_IExternalConnection"); <br>    else if (IsEqualIID(riid, IID_IPersistMessage     )) lstrcpy(szName,"IID_IPersistMessage    "); <br>    else if (IsEqualIID(riid, IID_IMAPIMessageSite    )) lstrcpy(szName,"IID_IMAPIMessageSite   "); <br>    else if (IsEqualIID(riid, IID_IMAPISession        )) lstrcpy(szName,"IID_IMAPISession       "); <br>    else if (IsEqualIID(riid, IID_IMAPIViewContext    )) lstrcpy(szName,"IID_IMAPIViewContext   "); <br>    else if (IsEqualIID(riid, IID_IMAPIViewAdviseSink )) lstrcpy(szName,"IID_IMAPIViewAdviseSink"); <br>    else if (IsEqualIID(riid, IID_IMAPIFormAdviseSink )) lstrcpy(szName,"IID_IMAPIFormAdviseSink"); <br>    else if (IsEqualIID(riid, IID_IMAPIFormInfo       )) lstrcpy(szName,"IID_IMAPIFormInfo      "); <br>    else if (IsEqualIID(riid, IID_IMAPIFormMgr        )) lstrcpy(szName,"IID_IMAPIFormMgr       "); <br>    else if (IsEqualIID(riid, IID_IMAPIFormContainer  )) lstrcpy(szName,"IID_IMAPIFormContainer "); <br>    else if (IsEqualIID(riid, IID_IMAPIForm           )) lstrcpy(szName,"IID_IMAPIForm          "); <br>    else                                                 lstrcpy(szName,"                       "); <br>#endif <br> <br> <br>    wsprintf(ach, "{%8.8lX-%4.4X-%4.4X-%2.2X%2.2X-%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X} %s", <br>        riid.Data1, <br>        (int)riid.Data2, <br>        (int)riid.Data3, <br>        (int)riid.Data4[0], <br>        (int)riid.Data4[1], <br>        (int)riid.Data4[2], <br>        (int)riid.Data4[3], <br>        (int)riid.Data4[4], <br>        (int)riid.Data4[5], <br>        (int)riid.Data4[6], <br>        (int)riid.Data4[7], <br>        szName); <br>    return ach; <br>    } <br>#else <br>; <br>#endif <br>#else <br>#define TRACEFUNC   ;/##/ <br>//#define TRACEFUNC    <br>#define ASSERTFUNC(_1,_2,_3,_4) <br>#define DumpCLSID(_x) 0 <br>#endif <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

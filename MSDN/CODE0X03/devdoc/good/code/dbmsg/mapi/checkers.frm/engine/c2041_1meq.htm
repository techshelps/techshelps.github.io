<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUGIO.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2042"></a>DEBUGIO.CPP</h2>
<pre><code>/* -------------------------------------------------------------------------- <br>Print Board is a debugging routine and should not be used for any other purpose <br>-------------------------------------------------------------------------- */ <br> <br>int p(BOARD b, int x) <br>{ <br>    int c=' '; /* empty square */ <br>    if (b[x] &amp; RED)   c = 'r'; <br>    if (b[x] &amp; BLACK) c = 'b'; <br>    if (b[x] &amp; KING)  c = toupper(c); <br>    return c; <br>} <br> <br>void PrintBoard(BOARD b, int d) <br>{ <br>    const unsigned char rs=254; /* red square */ <br>    static char buf[256]; <br> <br>    pdebug(stddbg," "); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",( rs),     (p(b, 1)), ( rs),     (p(b, 2)), ( rs),     (p(b, 3)), ( rs),     (p(b, 4)) ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",(p(b, 5)), ( rs),     (p(b, 6)), ( rs),     (p(b, 7)), ( rs),     (p(b, 8)), ( rs)     ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",( rs),     (p(b, 9)), ( rs),     (p(b,10)), ( rs),     (p(b,11)), ( rs),     (p(b,12)) ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",(p(b,13)), ( rs),     (p(b,14)), ( rs),     (p(b,15)), ( rs),     (p(b,16)), ( rs)     ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",( rs),     (p(b,17)), ( rs),     (p(b,18)), ( rs),     (p(b,19)), ( rs),     (p(b,20)) ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",(p(b,21)), ( rs),     (p(b,22)), ( rs),     (p(b,23)), ( rs),     (p(b,24)), ( rs)     ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",( rs),     (p(b,25)), ( rs),     (p(b,26)), ( rs),     (p(b,27)), ( rs),     (p(b,28)) ); <br>    pdebug(stddbg,buf); <br>    wsprintf(buf,"  %c%c%c%c%c%c%c%c",(p(b,29)), ( rs),     (p(b,30)), ( rs),     (p(b,31)), ( rs),     (p(b,32)), ( rs)     ); <br>    pdebug(stddbg,buf); <br>    pdebug(stddbg," "); <br> <br>} <br> <br>/* -------------------------------------------------------------------------- <br>TextizeBoard produces a text version of the board for people who did <br>not install this form. <br>-------------------------------------------------------------------------- */ <br>char* TextizeBoard(BOARD b) <br>{ <br>    const unsigned char rs='='; /* red square */ <br>    static char buf[2048]; <br> <br> <br>    wsprintf(buf, <br>        "IPM.Checkers\r\n\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n" <br>        "  %c%c%c%c%c%c%c%c\r\n", <br> <br> <br>    ( rs),     (p(b, 1)), ( rs),     (p(b, 2)), ( rs),     (p(b, 3)), ( rs),     (p(b, 4)) , <br>    (p(b, 5)), ( rs),     (p(b, 6)), ( rs),     (p(b, 7)), ( rs),     (p(b, 8)), ( rs)     , <br>    ( rs),     (p(b, 9)), ( rs),     (p(b,10)), ( rs),     (p(b,11)), ( rs),     (p(b,12)) , <br>    (p(b,13)), ( rs),     (p(b,14)), ( rs),     (p(b,15)), ( rs),     (p(b,16)), ( rs)     , <br>    ( rs),     (p(b,17)), ( rs),     (p(b,18)), ( rs),     (p(b,19)), ( rs),     (p(b,20)) , <br>    (p(b,21)), ( rs),     (p(b,22)), ( rs),     (p(b,23)), ( rs),     (p(b,24)), ( rs)     , <br>    ( rs),     (p(b,25)), ( rs),     (p(b,26)), ( rs),     (p(b,27)), ( rs),     (p(b,28)) , <br>    (p(b,29)), ( rs),     (p(b,30)), ( rs),     (p(b,31)), ( rs),     (p(b,32)), ( rs)     ); <br> <br>    return buf; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2036"></a>FORM.H</h2>
<pre><code>HRESULT HrStartOleAndRegisterClassFactory(void); <br>HRESULT HrStopForms(void); <br> <br>#define NOTPURE <br>#define MAX_ADVISE 48 <br> <br>/* <br> *  Types <br> */ <br> <br>// ----- class factory <br>class FRMFAC : public IClassFactory <br>{ <br>  protected: <br>    ULONG       cRef; <br>    CLSID       clsid; <br> <br>    ~FRMFAC(void); <br> <br>  public: <br>    FRMFAC(); <br> <br>    // *** IUnknown methods <br>    STDMETHOD(QueryInterface)   (THIS_ REFIID riid, LPVOID FAR* ppvObj); <br>    STDMETHOD_(ULONG,AddRef)    (THIS); <br>    STDMETHOD_(ULONG,Release)   (THIS); <br> <br>    // *** IClassFactory methods <br>    STDMETHOD(CreateInstance)   (THIS_ LPUNKNOWN pUnkOuter, REFIID riid, LPVOID FAR* ppvObject); <br>    STDMETHOD(LockServer)       (THIS_ BOOL fLock); <br>}; <br> <br>class FRMFMR : public FRMFAC <br>{ <br>  public: <br>    FRMFMR(); <br>}; <br> <br>// ----- The minimal interface a form can support <br>class FRM : public IPersistMessage, public IMAPIForm <br>{ <br>  protected: <br>    ULONG                   cRef;               // Reference count <br>    CLSID                   clsid; <br> <br>    BOOL                    fDirty;             // Is our message dirty? <br>    BOOL                    fNoScribble;        // Are we in no-scribble mode? <br>    BOOL                    fSentMessage;       // Are we reading a sent message? <br> <br>    // advise handling <br> <br>    BOOL                    afAdvisee[MAX_ADVISE]; <br>    LPMAPIVIEWADVISESINK    aAdvisePtrs[MAX_ADVISE]; <br> <br>    // data <br> <br>    SQUARE                  b[SQRS_MAX];        // The board <br>    int                     turn;               // Who's turn it is <br>    long                    movenum; <br>    long                    score; <br> <br>    ~FRM(void); <br> <br>  public: <br>    LPMESSAGE               pMessage; <br>    LPMAPIMESSAGESITE       pMessageSite; <br>    LPMAPISESSION           pSession; <br> <br>    LPMAPIFORMMGR           pFormMgr; <br>    LPMAPIFORMINFO          pFormInfo; <br> <br>    FRM(REFCLSID clsid); <br> <br>    MAPI_IUNKNOWN_METHODS(NOTPURE) <br>    MAPI_GETLASTERROR_METHOD(NOTPURE) <br>    MAPI_IPERSISTMESSAGE_METHODS(NOTPURE) <br>    MAPI_IMAPIFORM_METHODS(NOTPURE) <br> <br>    HRESULT ShowCurrentMessage(ULONG ulhwndParent); <br>    HRESULT LaunchReplyMessage(ULONG ulhwndParent); <br>    VOID FRM::GetCheckersData(SQUARE* out_b, int* out_turn, long* out_movenum, long* out_score); <br>    VOID FRM::SetCheckersData(SQUARE* in_b, int in_turn, long in_movenumber, long in_score); <br>    HRESULT FRM::Remember(LPMAPIMESSAGESITE pmsite, LPMESSAGE pmsg); <br>    HRESULT FRM::Forget(VOID); <br>    HRESULT SendForm(VOID); <br>    HRESULT FRM::AddressForm(HWND hwnd, BOOL fDontShowIfRecipsExist); <br>    SCODE FRM::ScGetRecipientAdrlist(LPMESSAGE pmsg, LPADRLIST * ppal); <br> <br>}; <br> <br>/* <br> *  Macros <br> */ <br> <br>#define ADVISE(X)                        \ <br>   for (LONG i = 0; i &lt; MAX_ADVISE; i++) \ <br>      if (afAdvisee[i])                  \ <br>         aAdvisePtrs[i]-&gt;X <br> <br>#define ReleaseObj(_pobj) \ <br>        if (_pobj) \ <br>                (_pobj)-&gt;Release() <br> <br>/* <br> *  Dependencies specific to this form <br> */ <br> <br>#define CHKR_FORM <br>extern HWND hMainWnd; <br> <br>#define PR_BOARD        PROP_TAG( PT_BINARY,    0x6800) <br>#define PR_TURN         PROP_TAG( PT_LONG,      0x6801) <br>#define PR_MOVENUMBER   PROP_TAG( PT_LONG,      0x6802) <br>#define PR_SCORINGFUNC  PROP_TAG( PT_LONG,      0x6803) <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

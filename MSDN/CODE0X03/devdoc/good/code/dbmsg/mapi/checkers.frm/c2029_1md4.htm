<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHECK.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2038"></a>CHECK.H</h2>
<pre><code>/* Header file for checkers board data */ <br> <br>#define EMPTY   0 <br>#define RED     1           /* you must not change these values */ <br>#define BLACK   2 <br>#define KING    4 <br> <br>#define SQRS_MAX    35  /* number of squares on a board plus some */ <br> <br>#define next(_t)    ((_t&amp;1)+1) <br>#define CopyBoard(from,to) { int i; for (i=0; i&lt;SQRS_MAX; i++) to[i] = from[i]; } 0 <br> <br>typedef long SQUARE; <br>typedef SQUARE FAR * BOARD; <br>typedef unsigned int BOOK_ELEMENT; <br> <br> <br>#define TYPE_RED0           1 <br>#define TYPE_RED2           2 <br>#define TYPE_BLACK0         3 <br>#define TYPE_BLACK2         4 /* do not change the order of these values */ <br>#define TYPE_RED_JUMP0      5 <br>#define TYPE_RED_JUMP2      6 <br>#define TYPE_BLACK_JUMP0    7 <br>#define TYPE_BLACK_JUMP2    8 <br> <br>#define MakeMove_RED0(_b, _start) \ <br>            _b[red_lut[_start][0]]  = _b[_start];\ <br>            _b[_start]              = 0;\ <br>            _b[red_lut[_start][0]] |= red_lut[_start][1] <br>#define MakeMove_RED2(_b, _start) \ <br>            _b[red_lut[_start][2]]  = _b[_start];\ <br>            _b[_start]              = 0;\ <br>            _b[red_lut[_start][2]] |= red_lut[_start][3] <br>#define MakeMove_BLACK0(_b, _start) \ <br>            _b[black_lut[_start][0]]  = _b[_start];\ <br>            _b[_start]                = 0;\ <br>            _b[black_lut[_start][0]] |= black_lut[_start][1] <br>#define MakeMove_BLACK2(_b, _start) \ <br>            _b[black_lut[_start][2]]  = _b[_start];\ <br>            _b[_start]                = 0;\ <br>            _b[black_lut[_start][2]] |= black_lut[_start][3] <br> <br>#define MakeMoveNoKing_RED_JUMP0(_b, _start) \ <br>            _b[red_jump_lut[_start][1]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[red_jump_lut[_start][0]]  = 0 <br>#define MakeMoveNoKing_RED_JUMP2(_b, _start) \ <br>            _b[red_jump_lut[_start][3]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[red_jump_lut[_start][2]]  = 0 <br>#define MakeMoveNoKing_BLACK_JUMP0(_b, _start) \ <br>            _b[black_jump_lut[_start][1]]  = _b[_start];\ <br>            _b[_start]                     = 0;\ <br>            _b[black_jump_lut[_start][0]]  = 0 <br>#define MakeMoveNoKing_BLACK_JUMP2(_b, _start) \ <br>            _b[black_jump_lut[_start][3]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[black_jump_lut[_start][2]]  = 0 <br> <br>#define MakeMove_RED_JUMP0(_b, _start) \ <br>            _b[red_jump_lut[_start][1]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[red_jump_lut[_start][0]]  = 0 <br>#define MakeMove_RED_JUMP2(_b, _start) \ <br>            _b[red_jump_lut[_start][3]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[red_jump_lut[_start][2]]  = 0 <br>#define MakeMove_BLACK_JUMP0(_b, _start) \ <br>            _b[black_jump_lut[_start][1]]  = _b[_start];\ <br>            _b[_start]                     = 0;\ <br>            _b[black_jump_lut[_start][0]]  = 0 <br>#define MakeMove_BLACK_JUMP2(_b, _start) \ <br>            _b[black_jump_lut[_start][3]]  = _b[_start];\ <br>            _b[_start]                   = 0;\ <br>            _b[black_jump_lut[_start][2]]  = 0 <br> <br> <br> <br>// ----- callable Functions in the engine <br>long PlayBestMove(BOARD b, int t, int j, int d, <br>                    int prune_depth, int prune_size, int max_depth); <br>int GameOver(BOARD b, int t); <br>int MoveValid(BOARD b, int start, int dest, int t); <br>long QualityOfBoard(BOARD b,int t); <br>char* TextizeBoard(BOARD b); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

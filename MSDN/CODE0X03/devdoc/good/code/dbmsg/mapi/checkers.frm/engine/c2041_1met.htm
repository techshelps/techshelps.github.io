<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QUALITY.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2045"></a>QUALITY.CPP</h2>
<pre><code>/* -------------------------------------------------------------------------- <br>returns the value of the board from 'computer_colors' perspective <br>-------------------------------------------------------------------------- */ <br>long QualityOfBoard(BOARD b,int t) <br>{ <br>    /* ----- constants (to be tweaked) ----- */ <br>    const int wKing            = 32 + 256; <br>    const int wPiece           = 256; <br>    const int wBlank           = 1; <br>    const int wMoveTheory      = 32; <br>    const int wCenterPos       = 4; <br>    const int wDoubleCorner    = 2; <br>    const int wHoldingKingRow  = 2; <br>    const int wEdges           = -1; <br> <br>    /* ----- variable factors ----- */ <br>    long q=50000; /* quality */ <br> <br>    #define co_kings  (pieces[computer_color | KING]       ) <br>    #define op_kings  (pieces[next(computer_color) | KING] ) <br>    #define co_pieces (pieces[computer_color]              ) <br>    #define op_pieces (pieces[next(computer_color)]        ) <br>    #define blanks    (pieces[0]                           ) <br> <br>    int pieces[7]; <br>    BOARD pb = b + 32; <br>    int mtpis = 0; // movetheory pieces in system <br> <br>    /* ----- number of pieces ----- */ <br>    memset(pieces,0,sizeof(pieces)); <br>    for (;;) <br>        { <br>        ++pieces[pb[0]]; <br>        --pb; <br>        Assert(pb &gt;= b); <br>        ++pieces[pb[0]]; <br>        --pb; <br>        Assert(pb &gt;= b); <br>        ++pieces[pb[0]]; <br>        --pb; <br>        Assert(pb &gt;= b); <br>        ++pieces[pb[0]]; <br>        --pb; <br>        if (pb &lt;= b) break; <br>        } <br>    q += (co_kings  * wKing);    /* multiply piece count factor by weights */ <br>    q -= (op_kings  * wKing); <br>    q += (co_pieces * wPiece); <br>    q -= (op_pieces * wPiece); <br>    q += (blanks    * wBlank); <br> <br>    /* ----- move theory ----- */ <br>    if (co_pieces == op_pieces &amp;&amp; 0==co_kings &amp;&amp; 0==op_kings) <br>        { <br>        int base_of_system=0; <br>        if (BLACK == next(t)) base_of_system=4; <br>        for (;base_of_system &lt; 32; base_of_system += 8) <br>            { <br>            if (b[1+base_of_system]) mtpis++; <br>            if (b[2+base_of_system]) mtpis++; <br>            if (b[3+base_of_system]) mtpis++; <br>            if (b[4+base_of_system]) mtpis++; <br>            } <br>        mtpis &amp;= 1; <br>        q += wMoveTheory; <br>        if (next(t) == computer_color) <br>            { <br>            if (!mtpis) /* opponent has the move */ <br>                q -= (wMoveTheory * 2); <br>            } <br>        else <br>            { <br>            if (mtpis) /* opponent has the move */ <br>                q -= (wMoveTheory * 2); <br>            } <br>        } <br> <br>    /* ----- position of pieces ----- */ <br>    static const long weightTable[][3] = {         {0,0,0}, <br>        {0, wDoubleCorner, -wDoubleCorner},        {0,0,0}, {0,0,0}, {0,0,0}, <br>        {0, wDoubleCorner, -wDoubleCorner},        {0,0,0}, {0,0,0}, {0,0,0}, <br>        {0,0,0}, {0,0,0}, {0,0,0},                 {0, wEdges, -wEdges}, <br>        {0, wEdges, -wEdges},                      {0, wCenterPos, -wCenterPos}, <br>        {0, wCenterPos, -wCenterPos},              {0,0,0}, {0,0,0}, <br>        {0, wCenterPos, -wCenterPos},              {0, wCenterPos, -wCenterPos}, <br>        {0, wEdges, -wEdges},                      {0, wEdges, -wEdges}, <br>        {0,0,0}, {0,0,0}, {0,0,0},                 {0,0,0}, {0,0,0}, {0,0,0}, <br>        {0, wDoubleCorner, -wDoubleCorner},        {0,0,0}, {0,0,0}, {0,0,0}, <br>        {0, wDoubleCorner, -wDoubleCorner},        {0,0,0}, {0,0,0}, {0,0,0}, <br>        {0,0,0}, {0,0,0}, {0,0,0}                  }; <br>    long q_posfactor = 0; <br>    q_posfactor += weightTable[  1][b[  1] &amp; 3]; <br>    q_posfactor += weightTable[  5][b[  5] &amp; 3]; <br>    q_posfactor += weightTable[ 12][b[ 12] &amp; 3]; <br>    q_posfactor += weightTable[ 13][b[ 13] &amp; 3]; <br>    q_posfactor += weightTable[ 14][b[ 14] &amp; 3]; <br>    q_posfactor += weightTable[ 15][b[ 15] &amp; 3]; <br>    q_posfactor += weightTable[ 18][b[ 18] &amp; 3]; <br>    q_posfactor += weightTable[ 19][b[ 19] &amp; 3]; <br>    q_posfactor += weightTable[ 20][b[ 20] &amp; 3]; <br>    q_posfactor += weightTable[ 21][b[ 21] &amp; 3]; <br>    q_posfactor += weightTable[ 28][b[ 28] &amp; 3]; <br>    q_posfactor += weightTable[ 32][b[ 32] &amp; 3]; <br>    if (BLACK == computer_color) <br>        q_posfactor = -q_posfactor; <br>    q += q_posfactor; <br> <br>    /* ----- king row ----- */ <br>    if ((0 == (KING &amp; b[1])) &amp;&amp; 0 != b[1])   {if (b[1] &amp; computer_color)  q+=wHoldingKingRow; else q-=wHoldingKingRow;} <br>    if ((0 == (KING &amp; b[3])) &amp;&amp; 0 != b[3])   {if (b[3] &amp; computer_color)  q+=wHoldingKingRow; else q-=wHoldingKingRow;} <br>    if ((0 == (KING &amp; b[30])) &amp;&amp; 0 != b[30]) {if (b[30] &amp; computer_color) q+=wHoldingKingRow; else q-=wHoldingKingRow;} <br>    if ((0 == (KING &amp; b[32])) &amp;&amp; 0 != b[32]) {if (b[32] &amp; computer_color) q+=wHoldingKingRow; else q-=wHoldingKingRow;} <br> <br>    /* ----- return the results ----- */ <br>    pdebug(stddbg,"QualityOfBoard=%ld %s(%d)\n",q,__FILE__,__LINE__); <br>    AssertSz(q &gt; 0,"queue too small"); <br>    #ifndef HIGH_PERFORMANCE <br>    if (0==rConfig.iGameType) return q; <br>    if (1==rConfig.iGameType) return 100000-q; <br>    AssertSz(0,"what kind of game are you playing anyway?"); <br>    #endif <br>    return q; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

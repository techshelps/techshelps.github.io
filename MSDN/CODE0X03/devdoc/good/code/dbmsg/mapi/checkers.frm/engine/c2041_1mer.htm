<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LUT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2043"></a>LUT.CPP</h2>
<pre><code>/* -------------------------------------------------------------------------- <br>RED is on top moving down <br>BLACK is on bottom moving up <br>-------------------------------------------------------------------------- */ <br>const int black_lut[][4] = <br>{ <br>    /* move 1, become king flag, move 2, become king flag */ <br>    { 0,0,0,0 }, <br>    {  1+4, 0    ,  1+5, 0     }, <br>    {  2+4, 0    ,  2+5, 0     }, <br>    {  3+4, 0    ,  3+5, 0     }, <br>    {  4+4, 0    ,  0  , 0     }, <br>    {  5+4, 0    ,  0  , 0     }, <br>    {  6+3, 0    ,  6+4, 0     }, <br>    {  7+3, 0    ,  7+4, 0     }, <br>    {  8+3, 0    ,  8+4, 0     }, <br>    {  9+4, 0    ,  9+5, 0     }, <br>    { 10+4, 0    , 10+5, 0     }, <br>    { 11+4, 0    , 11+5, 0     }, <br>    { 12+4, 0    ,  0  , 0     }, <br>    { 13+4, 0    ,  0  , 0     }, <br>    { 14+3, 0    , 14+4, 0     }, <br>    { 15+3, 0    , 15+4, 0     }, <br>    { 16+3, 0    , 16+4, 0     }, <br>    { 17+4, 0    , 17+5, 0     }, <br>    { 18+4, 0    , 18+5, 0     }, <br>    { 19+4, 0    , 19+5, 0     }, <br>    { 20+4, 0    ,  0  , 0     }, <br>    { 21+4, 0    ,  0  , 0     }, <br>    { 22+3, 0    , 22+4, 0     }, <br>    { 23+3, 0    , 23+4, 0     }, <br>    { 24+3, 0    , 24+4, 0     }, <br>    { 25+4, KING , 25+5, KING  }, <br>    { 26+4, KING , 26+5, KING  }, <br>    { 27+4, KING , 27+5, KING  }, <br>    { 28+4, KING ,  0  , 0     }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 } <br>}; <br> <br>const int red_lut[][4] = <br>{ <br>    /* move 1, become king flag, move 2, become king flag */ <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    {  5-4, KING ,  0  , 0     }, <br>    {  6-5, KING ,  6-4, KING  }, <br>    {  7-5, KING ,  7-4, KING  }, <br>    {  8-5, KING ,  8-4, KING  }, <br>    {  9-4, 0    ,  9-3, 0     }, <br>    { 10-4, 0    , 10-3, 0     }, <br>    { 11-4, 0    , 11-3, 0     }, <br>    { 12-4, 0    ,  0  , 0     }, <br>    { 13-4, 0    ,  0  , 0     }, <br>    { 14-5, 0    , 14-4, 0     }, <br>    { 15-5, 0    , 15-4, 0     }, <br>    { 16-5, 0    , 16-4, 0     }, <br>    { 17-4, 0    , 17-3, 0     }, <br>    { 18-4, 0    , 18-3, 0     }, <br>    { 19-4, 0    , 19-3, 0     }, <br>    { 20-4, 0    ,  0  , 0     }, <br>    { 21-4, 0    ,  0  , 0     }, <br>    { 22-5, 0    , 22-4, 0     }, <br>    { 23-5, 0    , 23-4, 0     }, <br>    { 24-5, 0    , 24-4, 0     }, <br>    { 25-4, 0    , 25-3, 0     }, <br>    { 26-4, 0    , 26-3, 0     }, <br>    { 27-4, 0    , 27-3, 0     }, <br>    { 28-4, 0    ,  0  , 0     }, <br>    { 29-4, 0    ,  0  , 0     }, <br>    { 30-5, 0    , 30-4, 0     }, <br>    { 31-5, 0    , 31-4, 0     }, <br>    { 32-5, 0    , 32-4, 0     }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 }, <br>    { 0,0,0,0 } <br>}; <br> <br>const int black_jump_lut[][5] = <br>{ <br>    /* over, onto -or- over, onto , become king flag */ <br>    { 0,0,0,0,0 }, <br>    {  1+5,  1+9,  0  ,  0  ,0}, <br>    {  2+4,  2+7,  2+5,  2+9,0}, <br>    {  3+4,  3+7,  3+5,  3+9,0}, <br>    {  4+4,  4+7,  0  ,  0  ,0}, <br>    {  5+4,  5+9,  0  ,  0  ,0}, <br>    {  6+3,  6+7,  6+4,  6+9,0}, <br>    {  7+3,  7+7,  7+4,  7+9,0}, <br>    {  8+3,  8+7,  0  ,  0  ,0}, <br>    {  9+5,  9+9,  0  ,  0  ,0}, <br>    { 10+4, 10+7, 10+5, 10+9,0}, <br>    { 11+4, 11+7, 11+5, 11+9,0}, <br>    { 12+4, 12+7,  0  ,  0  ,0}, <br>    { 13+4, 13+9,  0  ,  0  ,0}, <br>    { 14+3, 14+7, 14+4, 14+9,0}, <br>    { 15+3, 15+7, 15+4, 15+9,0}, <br>    { 16+3, 16+7,  0  ,  0  ,0}, <br>    { 17+5, 17+9,  0  ,  0  ,0}, <br>    { 18+4, 18+7, 18+5, 18+9,0}, <br>    { 19+4, 19+7, 19+5, 19+9,0}, <br>    { 20+4, 20+7,  0  ,  0  ,0}, <br>    { 21+4, 21+9,  0  ,  0  ,KING}, <br>    { 22+3, 22+7, 22+4, 22+9,KING}, <br>    { 23+3, 23+7, 23+4, 23+9,KING}, <br>    { 24+3, 24+7,  0  ,  0  ,KING}, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 } <br>}; <br> <br>const int red_jump_lut[][5] = <br>{ <br>    /* over, onto -or- over, onto , become king flag */ <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    {  9-3,  9-7,     0  ,  0  ,KING}, <br>    { 10-4, 10-9,    10-3, 10-7,KING}, <br>    { 11-4, 11-9,    11-3, 11-7,KING}, <br>    { 12-4, 12-9,     0  ,  0  ,KING}, <br>    { 13-4, 13-7,     0  ,  0  ,0}, <br>    { 14-5, 14-9,    14-4, 14-7,0}, <br>    { 15-5, 15-9,    15-4, 15-7,0}, <br>    { 16-5, 16-9,     0  ,  0  ,0}, <br>    { 17-3, 17-7,     0  ,  0  ,0}, <br>    { 18-4, 18-9,    18-3, 18-7,0}, <br>    { 19-4, 19-9,    19-3, 19-7,0}, <br>    { 20-4, 20-9,     0  ,  0  ,0}, <br>    { 21-4, 21-7,     0  ,  0  ,0}, <br>    { 22-5, 22-9,    22-4, 22-7,0}, <br>    { 23-5, 23-9,    23-4, 23-7,0}, <br>    { 24-5, 24-9,     0  ,  0  ,0}, <br>    { 25-3, 25-7,     0  ,  0  ,0}, <br>    { 26-4, 26-9,    26-3, 26-7,0}, <br>    { 27-4, 27-9,    27-3, 27-7,0}, <br>    { 28-4, 28-9,     0  ,  0  ,0}, <br>    { 29-4, 29-7,     0  ,  0  ,0}, <br>    { 30-5, 30-9,    30-4, 30-7,0}, <br>    { 31-5, 31-9,    31-4, 31-7,0}, <br>    { 32-5, 32-9,     0  ,  0  ,0}, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 }, <br>    { 0,0,0,0,0 } <br>}; <br> <br>/* -------------------------------------------------------------------------- <br>The following is the order in which the pieces will be tryed <br>normally, it makes no difference, but if the game tree gets pruned, <br>the moves at the bottom could be ignored. <br>-------------------------------------------------------------------------- */ <br>struct _piece_order_struct {SQUARE m; long q;} piece_order[SQRS_MAX] = <br>{ <br>    /* piece number, best quality achievable by piece */ <br>    {0,  -1}, /* zero move.  it is important to understand that this move <br>                 need not be tested except when the piece order has been <br>                 sorted because after the sort, the 0th element could contain <br>                 a legal move.  Whereas before the sort, it could not */ <br>    {1,  -1}, <br>    {2,  -1}, <br>    {3,  -1}, <br>    {4,  -1}, <br>    {5,  -1}, <br>    {6,  -1}, <br>    {7,  -1}, <br>    {8,  -1}, <br>    {9,  -1}, <br>    {10, -1}, <br>    {11, -1}, <br>    {12, -1}, <br>    {13, -1}, <br>    {14, -1}, <br>    {15, -1}, <br>    {16, -1}, <br>    {17, -1}, <br>    {18, -1}, <br>    {19, -1}, <br>    {20, -1}, <br>    {21, -1}, <br>    {22, -1}, <br>    {23, -1}, <br>    {24, -1}, <br>    {25, -1}, <br>    {26, -1}, <br>    {27, -1}, <br>    {28, -1}, <br>    {29, -1}, <br>    {30, -1}, <br>    {31, -1}, <br>    {32, -1}, <br>    {33, -1}, <br>    {34, -1} <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

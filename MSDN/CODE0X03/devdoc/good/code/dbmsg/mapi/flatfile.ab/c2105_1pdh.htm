<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2105"></a>README.TXT</h2>
<pre><code>Sample Address Book <br> <br> <br>The FlatFile.AB is a sample address book service provider (SMPAB.DLL) that is <br>part of the prerelease MAPI SDK. <br> <br>The .SAB File <br>------------- <br> <br>The sample address book provider is based on a read-only file of fixed-length <br>records. Each record contains the display name and e-mail address of a <br>messaging user. This file supplies the contents of a single, read-only <br>address container, which contains only e-mail users. A separate utility <br>program, SAB.EXE, converts a text file to an .SAB file. Each line of input <br>text must be formatted as follows: <br> <br>display name&lt;tab&gt;e-mail address <br> <br>The e-mail address must not contain white space, and the input file must be <br>sorted on the display name; the conversion utility does not sort. <br> <br>Address Type <br>------------ <br> <br>The sample address book supports one e-mail address type; it is hard-coded <br>to MSPEER. If you plan to use the sample address book and sample transport <br>together, configure the sample transport provider to use MSPEER also. <br> <br>Entry Identifiers <br>----------------- <br> <br>The sample address book registers one MAPIUID with SetProviderUID(); it is <br>also hard-coded. The unique part of a messaging user entry identifier is <br>the e-mail address. Messaging user entry identifiers use the hard-coded UID, <br>so they are the same across all instances of the sample address book. <br>The sample address book chooses a UID at random the first time it is <br>configured for use in its top-level container entry identifier. This enables <br>multiple instances of the provider, each with its own top-level container, <br>to coexist in a single profile. <br> <br>The sample address book does not distinguish between short- and long-term <br>entry identifiers. <br> <br>Table Implementation <br>-------------------- <br> <br>The sample address book largely delegates the implementation of its hierarchy <br>table to the IMAPITableData interface. For its contents table, the sample <br>address book implements the IMAPITable interface directly on the .SAB file. <br>The contents table is a good example of a caching table implementation; it <br>defers reading records from disk until absolutely necessary and can handle <br>quite large files with limited memory. The contents table also supports prefix <br>searching and ambiguous name resolution (ANR). The contents table <br>implementation closes the .SAB file if the table interface is not accessed <br>for a while. This makes it possible to update the .SAB file while it is in <br>use. If the .SAB file changes, the sample address book notices at the next <br>file access and issues a notification on the contents table so that the user <br>interface can be updated. It uses the idle task engine to do the closing. <br> <br>Supported Features <br>------------------ <br> <br>Table restrictions. The sample address book implements the two most commonly <br>used types of restrictions for an address book: prefix match and ANR. It does <br>not implement the full MAPI restriction language, and restrictions are <br>supported only on the display name. <br> <br>Prefix matching enables incremental searching through an address book <br>container in which the user types the initial characters of a display name. <br>ANR, on the other hand, matches one or more prefix strings against the entire <br>container, regardless of first or last name order, and returns all matching <br>entries; this enables checking of partial names typed into a message. <br> <br>Details. The sample address book implements its own details display table <br>for messaging users. There are two sets of properties, divided into two pages. <br>The first page has the standard properties: display name, e-mail address, and <br>address type.  The second page has an example of almost every control type <br>implemented in MAPI display tables (the data is hard-coded, not drawn from <br>the address book). There is a template identifier for messaging user details, <br>which enables all details to be supported for users copied from the sample <br>address book to the personal address book. Details are also supported for the <br>top-level directory, including the ability to change the .SAB file from the <br>details pane. The directory details view uses a notification to update the <br>display when the .SAB file is changed. <br> <br>Custom recipients (one-offs). The sample address book implements a one-off <br>table with a set of properties different from the native details; these <br>properties combine to form the e-mail address. The template identifier <br>enables messaging users to be added to the personal address book, or directly <br>to a message, using a special dialog box; processing is routed through the <br>sample address book, which has the ability to generate the e-mail address <br>from the properties entered in the dialog box. <br> <br>Advanced search dialog box. The sample address book implements an advanced <br>search dialog box, accessible by choosing the Advanced button on the MAPI <br>addressing dialog box. In reality, the advanced search is only slightly <br>different from the standard search, which uses an ANR restriction. <br> <br>Status interface. The IMAPIStatus interface is partially supported; its <br>IMAPIProp methods are delegated to the IMAPIPropData interface. <br> <br>Configuration interfaces. The sample address book supports both interactive <br>and programmatic configuration. <br> <br>Cross-platform support. The sample address book source code generates <br>executables for Windows 3.X, Windows 95, and Windows NT 3.5 and later from a <br>single set of source files. <br> <br>Unsupported Features <br>-------------------- <br> <br>Sorting. <br> <br>Distribution lists. <br> <br>Creating, deleting, and modifying entries. <br> <br>Multi-valued properties. <br> <br>Named properties. <br> <br>Distinguishing first and last name in display names. <br> <br>Configuration <br>------------- <br> <br>The only configurable property supported by the sample address book is the <br>path to the .SAB file. The path can be set interactively either through the <br>service configuration dialog box or at provider logon. It can also be set <br>programmatically through the ServiceEntry function. For the definitions <br>needed to set the path programmatically, see the SMPAB.H header file. <br> <br>Installation <br>------------ <br> <br>To install the sample address book, you have to: <br> <br>1. Merge the file smpab.inf with mapisvc.inf located in your windows system <br>   directory. You can do this using the mergeini utility that comes with <br>   the MAPI SDK. The syntax is "mergeini -m smpab.inf". <br> <br>2. Copy smpab(32).dll to the windows system directory. <br> <br>3. Add the sample address book to any MAPI profile using the Mail and Fax <br>   control panel applet. </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ABSEARCH.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2114"></a>ABSEARCH.C</h2>
<pre><code>/*********************************************************************** <br> * <br> *  ABSEARCH.C <br> * <br> *  Sample AB directory container Search object <br> * <br> *  This file contains the code for implementing the Sample AB <br> *  directory container search object.  Also known as advanced <br> *  search. <br> * <br> *  This search object was retrieved by OpenProperty on PR_SEARCH on the <br> *  AB directory found in ABCONT.C. <br> * <br> *  The following routines are implemented in this file: <br> * <br> *      HrNewSearch <br> *      ABSRCH_Release <br> *      ABSRCH_SaveChanges <br> *      ABSRCH_OpenProperty <br> *      ABSRCH_GetSearchCriteria <br> * <br> *      HrGetSearchDialog <br> * <br> *  Copyright 1992-1995 Microsoft Corporation.  All Rights Reserved. <br> * <br> ***********************************************************************/ <br> <br>#include "abp.h" <br>#include "sampabp.rh" <br>#include &lt;smpab.h&gt; <br> <br> <br>/* <br> *  Proptags used only in this module <br> */ <br>#define PR_ANR_STRING               PROP_TAG(PT_STRING8,0x6602) <br> <br> <br>/* <br> *  Structure for the 'this' <br> */ <br> <br>typedef struct _ABSRCH <br>{ <br>    const ABSRCH_Vtbl FAR * lpVtbl; <br> <br>    SAB_Wrapped; <br> <br>    /*  Private data */ <br> <br>    LPSPropValue lpRestrictData; <br>     <br>} ABSRCH, *LPABSRCH; <br> <br> <br> <br>/* Display table control structures for the Search property sheet. */ <br> <br>/* <br> *  The Sample AB exposes an 'advanced' search dialog.  The following <br> *  structures define it's layout. <br> */ <br> <br>/* <br> *  The edit control that will have the name to be search for on it. <br> */ <br>#define MAX_SEARCH_NAME                 50 <br> <br>DTBLEDIT editSearchName = <br>{ <br>    sizeof(DTBLEDIT), <br>    0, <br>    MAX_SEARCH_NAME, <br>    PR_ANR_STRING <br>}; <br> <br>/* <br> *  Display table pages for Search property sheet <br> */ <br>DTCTL rgdtctlSearchGeneral[] = <br>{ <br> <br>    /* <br>     *  Defines the name of this Pane. <br>     */ <br>    {DTCT_PAGE, 0, NULL, 0, NULL, 0, &amp;dtblpage}, <br> <br>    /* group box control */ <br>    {DTCT_GROUPBOX, 0, NULL, 0, NULL, IDC_STATIC_CONTROL, <br>        &amp;dtblgroupbox}, <br> <br>    /* control and edit control */ <br>    {DTCT_LABEL, 0, NULL, 0, NULL, IDC_STATIC_CONTROL, <br>        &amp;dtbllabel}, <br>    {DTCT_EDIT, DT_EDITABLE, NULL, 0, szNoFilter, IDC_SEARCH_NAME, <br>        &amp;editSearchName}, <br>}; <br> <br>/* <br> *  Actual definition of the set of pages that make up this advanced search <br> *  dialog.  Note that there's no limit to the number of pages that can be <br> *  displayed.  This sample AB, however, only exposes on page. <br> */ <br>DTPAGE rgdtpageSearch[] = <br>{ <br>    { <br>        sizeof(rgdtctlSearchGeneral) / sizeof(DTCTL), <br>        (LPTSTR) MAKEINTRESOURCE(SearchGeneralPage), <br>        "", <br>        rgdtctlSearchGeneral <br>    } <br>}; <br> <br>/* <br> *  ABSearch vtbl is filled in here. <br> */ <br>ABSRCH_Vtbl vtblABSRCH = <br>{ <br>    (ABSRCH_QueryInterface_METHOD *)        ROOT_QueryInterface, <br>    (ABSRCH_AddRef_METHOD *)                ROOT_AddRef,     <br>    ABSRCH_Release, <br>    (ABSRCH_GetLastError_METHOD *)          ROOT_GetLastError, <br>    ABSRCH_SaveChanges, <br>    (ABSRCH_GetProps_METHOD *)              WRAP_GetProps, <br>    (ABSRCH_GetPropList_METHOD *)           WRAP_GetPropList, <br>    ABSRCH_OpenProperty, <br>    (ABSRCH_SetProps_METHOD *)              WRAP_SetProps, <br>    (ABSRCH_DeleteProps_METHOD *)           WRAP_DeleteProps, <br>    (ABSRCH_CopyTo_METHOD *)                WRAP_CopyTo, <br>    (ABSRCH_CopyProps_METHOD *)             WRAP_CopyProps, <br>    (ABSRCH_GetNamesFromIDs_METHOD *)       WRAP_GetNamesFromIDs, <br>    (ABSRCH_GetIDsFromNames_METHOD *)       WRAP_GetIDsFromNames, <br>    (ABSRCH_GetContentsTable_METHOD *)      ROOT_GetContentsTable, <br>    (ABSRCH_GetHierarchyTable_METHOD *)     ABC_GetHierarchyTable, <br>    (ABSRCH_OpenEntry_METHOD *)             ROOT_OpenEntry, <br>    (ABSRCH_SetSearchCriteria_METHOD *)     ROOT_SetSearchCriteria, <br>    ABSRCH_GetSearchCriteria, <br>}; <br> <br> <br> <br>HRESULT HrGetSearchDialog(LPABSRCH lpABSearch, LPMAPITABLE * lppSearchTable); <br> <br>/* <br> -  HrNewSearch <br> - <br> *  Creates an advanced search object <br> * <br> * <br> */ <br> <br> <br>/* <br> *  Properties that are initially set on this object <br> */ <br>enum {  ivalabsrchPR_ANR_STRING = 0, <br>        cvalabsrchMax }; <br> <br>HRESULT <br>HrNewSearch(LPMAPICONTAINER *   lppABSearch, <br>            LPABLOGON           lpABLogon, <br>            LPCIID              lpInterface, <br>            HINSTANCE           hLibrary, <br>            LPALLOCATEBUFFER    lpAllocBuff, <br>            LPALLOCATEMORE      lpAllocMore, <br>            LPFREEBUFFER        lpFreeBuff, <br>            LPMALLOC            lpMalloc ) <br>{ <br>    HRESULT hResult = hrSuccess; <br>    LPABSRCH lpABSearch = NULL; <br>    SCODE sc; <br>    LPPROPDATA lpPropData = NULL; <br>    SPropValue spv[cvalabsrchMax]; <br>     <br>    /*  Do I support this interface?? */ <br>    if (lpInterface) <br>    { <br>        if (memcmp(lpInterface, &amp;IID_IMAPIContainer, sizeof(IID)) &amp;&amp; <br>            memcmp(lpInterface, &amp;IID_IMAPIProp, sizeof(IID)) &amp;&amp; <br>            memcmp(lpInterface, &amp;IID_IUnknown, sizeof(IID))) <br>        { <br>            DebugTraceSc(HrNewSearch, MAPI_E_INTERFACE_NOT_SUPPORTED); <br>            return ResultFromScode(MAPI_E_INTERFACE_NOT_SUPPORTED); <br>        } <br>    } <br> <br>    /* <br>     *  Allocate space for the directory container structure <br>     */ <br> <br>    sc = lpAllocBuff( sizeof(ABSRCH), (LPVOID *) &amp;lpABSearch ); <br> <br>    if (FAILED(sc)) <br>    { <br>        hResult = ResultFromScode(sc); <br>        goto err; <br>    } <br> <br>    lpABSearch-&gt;lpVtbl = &amp;vtblABSRCH; <br>    lpABSearch-&gt;lcInit = 1; <br>    lpABSearch-&gt;hResult = hrSuccess; <br>    lpABSearch-&gt;idsLastError = 0; <br> <br>    lpABSearch-&gt;hLibrary = hLibrary; <br>    lpABSearch-&gt;lpAllocBuff = lpAllocBuff; <br>    lpABSearch-&gt;lpAllocMore = lpAllocMore; <br>    lpABSearch-&gt;lpFreeBuff = lpFreeBuff; <br>    lpABSearch-&gt;lpMalloc = lpMalloc; <br> <br>    lpABSearch-&gt;lpABLogon = lpABLogon; <br>    lpABSearch-&gt;lpRestrictData = NULL; <br> <br>    /* <br>     *  Create property storage object <br>     */ <br> <br>    sc = CreateIProp((LPIID) &amp;IID_IMAPIPropData, <br>        lpAllocBuff, <br>        lpAllocMore, <br>        lpFreeBuff, <br>        lpMalloc, <br>        &amp;lpPropData); <br> <br>    if (FAILED(sc)) <br>    { <br>        hResult = ResultFromScode(sc); <br>        goto err; <br>    } <br> <br>    spv[ivalabsrchPR_ANR_STRING].ulPropTag = PR_ANR_STRING; <br>    spv[ivalabsrchPR_ANR_STRING].Value.lpszA = ""; <br> <br>    /* <br>     *   Set the default properties <br>     */ <br>    hResult = lpPropData-&gt;lpVtbl-&gt;SetProps(lpPropData, <br>        cvalabsrchMax, <br>        spv, <br>        NULL); <br> <br>    InitializeCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    /*  We must AddRef the lpABLogon object since we will be using it <br>     */ <br>    lpABLogon-&gt;lpVtbl-&gt;AddRef(lpABLogon); <br> <br>    lpABSearch-&gt;lpPropData = (LPMAPIPROP) lpPropData; <br>    *lppABSearch = (LPMAPICONTAINER) lpABSearch; <br> <br>out: <br> <br>    DebugTraceResult(HrNewSearch, hResult); <br>    return hResult; <br> <br>err: <br>    /* <br>     *  free the ABContainer object <br>     */ <br>    lpFreeBuff( lpABSearch ); <br> <br>    /* <br>     *  free the property storage object <br>     */ <br>    if (lpPropData) <br>        lpPropData-&gt;lpVtbl-&gt;Release(lpPropData); <br> <br>    goto out; <br>} <br> <br> <br>/* <br> -  ABSRCH_Release <br> - <br> *  Decrement lcInit. <br> *      When lcInit == 0, free up the lpABSearch structure <br> * <br> */ <br> <br>STDMETHODIMP_(ULONG) <br>ABSRCH_Release(LPABSRCH lpABSearch) <br>{ <br> <br>    long lcInit; <br>     <br>    /* <br>     *  Check to see if it has a jump table <br>     */ <br>    if (IsBadReadPtr(lpABSearch, sizeof(ABSRCH))) <br>    { <br>        /* <br>         *  No jump table found <br>         */ <br>        return 1; <br>    } <br> <br>    /* <br>     *  Check to see that it's the correct jump table <br>     */ <br>    if (lpABSearch-&gt;lpVtbl != &amp;vtblABSRCH) <br>    { <br>        /* <br>         *  Not my jump table <br>         */ <br>        return 1; <br>    } <br> <br>    Validate_IUnknown_Release(lpABSearch); <br> <br> <br>    EnterCriticalSection(&amp;lpABSearch-&gt;cs); <br>    lcInit = --lpABSearch-&gt;lcInit; <br>    LeaveCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    if (lcInit == 0) <br>    { <br> <br>        /* <br>         *  Get rid of the lpPropData <br>         */ <br>        if (lpABSearch-&gt;lpPropData) <br>            lpABSearch-&gt;lpPropData-&gt;lpVtbl-&gt;Release(lpABSearch-&gt;lpPropData); <br> <br>        /* <br>         *  Free up the restriction data <br>         */ <br>        lpABSearch-&gt;lpFreeBuff(lpABSearch-&gt;lpRestrictData); <br> <br>        /*   <br>         *  Release our reference to the ABLogon object. <br>         */ <br>        if (lpABSearch-&gt;lpABLogon) <br>        { <br>            lpABSearch-&gt;lpABLogon-&gt;lpVtbl-&gt;Release(lpABSearch-&gt;lpABLogon); <br>            lpABSearch-&gt;lpABLogon = NULL; <br>        } <br> <br>        /* <br>         *  Destroy the critical section for this object <br>         */ <br> <br>        DeleteCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>        /* <br>         *  Set the Jump table to NULL.  This way the client will find out <br>         *  real fast if it's calling a method on a released object.  That is, <br>         *  the client will crash.  Hopefully, this will happen during the <br>         *  development stage of the client. <br>         */ <br>        lpABSearch-&gt;lpVtbl = NULL; <br> <br>        /* <br>         *  Need to free the object <br>         */ <br> <br>        lpABSearch-&gt;lpFreeBuff(lpABSearch); <br>        return 0; <br>    } <br> <br>    return lpABSearch-&gt;lcInit; <br> <br>} <br> <br> <br>/* <br> -  ABSRCH_SaveChanges <br> - <br> *  This is used to save changes associated with the search dialog <br> *  in order to get the advanced search restriction and to save changes <br> *  associated with the container details dialog. <br> * <br> */ <br>SPropTagArray tagaANR_INT = <br>{ <br>    1, <br>    { <br>        PR_ANR_STRING <br>    } <br>}; <br> <br>STDMETHODIMP <br>ABSRCH_SaveChanges(LPABSRCH lpABSearch, ULONG ulFlags) <br>{ <br>    HRESULT hResult; <br>    ULONG ulCount; <br>    LPSPropValue lpspv = NULL; <br>    LPPROPDATA lpPropData = (LPPROPDATA) lpABSearch-&gt;lpPropData; <br> <br>     <br>    ABSRCH_ValidateObject(SaveChanges, lpABSearch); <br>     <br>    Validate_IMAPIProp_SaveChanges(lpABSearch, ulFlags); <br> <br> <br>    EnterCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    /* <br>     *  Is there a PR_ANR_STRING?? <br>     */ <br>    hResult = lpPropData-&gt;lpVtbl-&gt;GetProps(lpPropData, <br>        &amp;tagaANR_INT, <br>        0,      /* ansi */ <br>        &amp;ulCount, <br>        &amp;lpspv); <br>    if (HR_FAILED(hResult)) <br>    { <br>        goto ret; <br>    } <br> <br>    if ((lpspv-&gt;ulPropTag == PR_ANR_STRING) &amp;&amp; (lpspv-&gt;Value.lpszA[0] != '\0')) <br>    { <br>        /* <br>         * save away the information to build up the new restriction <br>         */ <br> <br>        /*  Free any existing data */ <br>        if (lpABSearch-&gt;lpRestrictData) <br>        { <br>            lpABSearch-&gt;lpFreeBuff(lpABSearch-&gt;lpRestrictData); <br>        } <br> <br>        lpABSearch-&gt;lpRestrictData = lpspv; <br>        lpspv = NULL; <br>    } <br> <br>ret: <br> <br>    LeaveCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    lpABSearch-&gt;lpFreeBuff(lpspv); <br>    DebugTraceResult(ABSRCH_SaveChanges, hResult); <br>    return hResult; <br>} <br> <br>/************************************************************************* <br> * <br> -  ABSRCH_OpenProperty <br> - <br> * <br> *  This method allows the opening of the following object: <br> * <br> *  PR_DETAILS_TABLE        :-  Gets the display table associated with <br> *                              the advanced search dialog. <br> */ <br>STDMETHODIMP <br>ABSRCH_OpenProperty(LPABSRCH lpABSearch, <br>    ULONG ulPropTag, <br>    LPCIID lpiid, <br>    ULONG ulInterfaceOptions, <br>    ULONG ulFlags, <br>    LPUNKNOWN * lppUnk) <br>{ <br>    HRESULT hResult; <br> <br>    ABSRCH_ValidateObject(OpenProperty, lpABSearch); <br>     <br>    Validate_IMAPIProp_OpenProperty(lpABSearch, ulPropTag, lpiid, <br>                            ulInterfaceOptions, ulFlags, lppUnk); <br> <br>    /* <br>     *  Check for flags we can't support <br>     */ <br> <br>    if (ulFlags &amp; (MAPI_CREATE|MAPI_MODIFY)) <br>    { <br>        hResult = ResultFromScode(E_ACCESSDENIED); <br>        goto out; <br>    } <br>         <br>    if (ulInterfaceOptions &amp; ~MAPI_UNICODE) <br>    { <br>        /* <br>         *  Only UNICODE flag should be set for any of the objects that might <br>         *  be returned from this object. <br>         */ <br>         <br>        hResult = ResultFromScode(MAPI_E_UNKNOWN_FLAGS); <br>        goto out; <br>    } <br>     <br>    if ( ulInterfaceOptions &amp; MAPI_UNICODE ) <br>    { <br>        hResult = ResultFromScode(MAPI_E_BAD_CHARWIDTH); <br>        DebugTraceArg( ABSRCH_OpenProperty, "bad character width" ); <br>        goto out; <br>         <br>    } <br> <br> <br>    /* <br>     *  Details for this Search object <br>     */ <br> <br>    if (ulPropTag == PR_DETAILS_TABLE) <br>    { <br>        if (!memcmp(lpiid, &amp;IID_IMAPITable, sizeof(IID))) <br>        { <br>            hResult = HrGetSearchDialog(lpABSearch, (LPMAPITABLE *) lppUnk); <br> <br>            goto out; <br>        } <br> <br>    }  <br> <br>    hResult = ResultFromScode(MAPI_E_NO_SUPPORT); <br> <br>out: <br> <br>    DebugTraceResult(ABSRCH_OpenProperty, hResult); <br>    return hResult; <br> <br> <br>} <br> <br>/* <br> -  ABSRCH_GetSearchCriteria <br> - <br> *  Generates the restriction associated with the data from <br> *  the advanced search dialog.  This restriction is subsequently <br> *  applied to the contents table retrieved from this container. <br> */ <br>STDMETHODIMP <br>ABSRCH_GetSearchCriteria(   LPABSRCH lpABSearch, <br>                        ULONG   ulFlags, <br>                        LPSRestriction FAR * lppRestriction, <br>                        LPENTRYLIST FAR * lppContainerList, <br>                        ULONG FAR * lpulSearchState) <br>{ <br>    HRESULT hResult = hrSuccess; <br>    SCODE sc; <br>    LPSRestriction lpRestriction = NULL; <br>    LPSPropValue lpPropANR = NULL; <br>    LPSTR lpszPartName; <br>    LPSTR lpszRestrName; <br> <br>    ABSRCH_ValidateObject(GetSearchCriteria, lpABSearch); <br>     <br>    Validate_IMAPIContainer_GetSearchCriteria(lpABSearch, ulFlags, <br>                                lppRestriction, lppContainerList,  <br>                                lpulSearchState); <br> <br>    if (!lpABSearch-&gt;lpRestrictData) <br>    { <br>        hResult = ResultFromScode(MAPI_E_NOT_INITIALIZED); <br> <br>        if (lppRestriction) <br>            *lppRestriction = NULL; <br> <br>        if (lppContainerList) <br>            *lppContainerList = NULL; <br> <br>        if (lpulSearchState) <br>            *lpulSearchState = 0L; <br> <br>        DebugTraceResult(ABSRCH_GetSearchCriteria, hResult); <br>        return hResult; <br>    } <br> <br>    if (ulFlags &amp; MAPI_UNICODE) <br>    { <br>        hResult = ResultFromScode(MAPI_E_BAD_CHARWIDTH); <br>         <br>        DebugTraceResult(ABSRCH_GetSearchCriteria, hResult); <br>        return hResult; <br>    } <br> <br> <br>    /* <br>     *  Entering state dependant section <br>     */ <br>    EnterCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    /* <br>     *  Ok, now build up a restriction using lpRestrictData (an LPSPropValue) <br>     */ <br> <br>    sc = lpABSearch-&gt;lpAllocBuff(sizeof(SRestriction), &amp;lpRestriction); <br>    if (FAILED(sc)) <br>    { <br>        hResult = ResultFromScode(sc); <br>        goto err; <br>    } <br> <br>    sc = lpABSearch-&gt;lpAllocMore(sizeof(SPropValue), lpRestriction, &amp;lpPropANR); <br>    if (FAILED(sc)) <br>    { <br>        hResult = ResultFromScode(sc); <br>        goto err; <br> <br>    } <br> <br>    lpszRestrName = lpABSearch-&gt;lpRestrictData-&gt;Value.lpszA; <br> <br>    sc = lpABSearch-&gt;lpAllocMore(lstrlenA(lpszRestrName)+1, <br>        lpRestriction, <br>        &amp;lpszPartName); <br>    if (FAILED(sc)) <br>    { <br>        hResult = ResultFromScode(sc); <br>        goto err; <br>    } <br> <br>    lstrcpyA(lpszPartName, lpszRestrName); <br> <br>    lpPropANR-&gt;ulPropTag = PR_ANR; <br>    lpPropANR-&gt;Value.LPSZ = lpszPartName; <br> <br>    lpRestriction-&gt;rt = RES_PROPERTY; <br>    lpRestriction-&gt;res.resProperty.relop = RELOP_EQ; <br>    lpRestriction-&gt;res.resProperty.ulPropTag = PR_ANR; <br>    lpRestriction-&gt;res.resProperty.lpProp = lpPropANR; <br> <br>    *lppRestriction = lpRestriction; <br> <br>    /* <br>     *  The returned SearchState is set to 0 because none <br>     *  of the defined states match what's going on. <br>     */ <br>    if (lpulSearchState) <br>        *lpulSearchState = 0; <br> <br>out: <br>    LeaveCriticalSection(&amp;lpABSearch-&gt;cs); <br> <br>    DebugTraceResult(ABSRCH_GetSearchCriteria, hResult); <br>    return hResult; <br> <br>err: <br>    lpABSearch-&gt;lpFreeBuff(lpRestriction); <br> <br>    goto out; <br>} <br> <br>/* <br> -  HrGetSearchDialog <br> - <br> * <br> *  Builds a display table for the search dialog. <br> */ <br> <br>HRESULT <br>HrGetSearchDialog(LPABSRCH lpABSearch, LPMAPITABLE * lppSearchTable) <br>{ <br>    HRESULT hResult; <br> <br>    /* Create a display table */ <br>    hResult = BuildDisplayTable( <br>            lpABSearch-&gt;lpAllocBuff, <br>            lpABSearch-&gt;lpAllocMore, <br>            lpABSearch-&gt;lpFreeBuff, <br>            lpABSearch-&gt;lpMalloc, <br>            lpABSearch-&gt;hLibrary, <br>            sizeof(rgdtpageSearch) / sizeof(DTPAGE), <br>            rgdtpageSearch, <br>            0, <br>            lppSearchTable, <br>            NULL); <br> <br>    DebugTraceResult(ABSRCH_GetSearchDialog, hResult); <br>    return hResult; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

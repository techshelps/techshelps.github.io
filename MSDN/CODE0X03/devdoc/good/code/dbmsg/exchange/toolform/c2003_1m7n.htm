<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2003"></a>FORM.CPP</h2>
<pre><code>// --form.cpp----------------------------------------------------------------- <br>// <br>//   Implementation of the FRM class <br>// <br>//   Implements a simple form that holds information about a software  <br>//   testing/development tool.  This form can be installed in  <br>//   a public folder, and then forms of this type can be placed in  <br>//   the public folder to create a database of software tools. <br>//   Th form holds the following information: <br>// <br>//   * A topic, giving a brief description of the tool, which  <br>//     appears as the subject in the folder list. <br>//   * Name of the tool <br>//   * The platform the tool runs on <br>//   * The type of tool <br>//   * The Operating System the tool runs under <br>//   * Who developed the tool <br>//   * The location of the tool <br>//   * An introduction, giving a longer description of the tool. <br>//    <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// --------------------------------------------------------------------------- <br> <br>#include "stdafx.h" <br>#include "tool.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define new DEBUG_NEW <br> <br>#include &lt;ole2.h&gt; <br>DEFINE_GUID(CLSID_MyFormsClsId,  0x861E4010, 0x5030, 0xFEDC, 0x99, 0x12, 0x00, 0x0a, 0x00, 0x38, 0x90, 0x1b); <br> <br>#include "formdata.h" <br>#include "form.h" <br>#include "tooldoc.h" <br>#include "toolform.h" <br> <br>HINSTANCE hinstOle   = NULL; <br>HINSTANCE hinstMapi  = NULL; <br> <br>#ifdef WIN16 <br>LPFNISEQUALGUID           lpfnIsEqualGUID; <br>#endif <br>LPFNCOREGISTERCLASSOBJECT lpfnCoRegisterClassObject; <br>LPFNHRQUERYALLROWS        lpfnHrQueryAllRows       ; <br>LPFNMAPIFREEBUFFER        lpfnMAPIFreeBuffer       ; <br>LPFNMAPIINITIALIZE        lpfnMAPIInitialize       ; <br>LPFNMAPIUNINITIALIZE      lpfnMAPIUninitialize     ; <br>FRMFAC *                  g_pfrmfac = NULL; <br> <br> <br>//$--HrStartOleAndRegisterClassFactory---------------------------------------- <br>// <br>//  Purpose: <br>//      Initialize OLE, MAPI, and the Forms Interface <br>//      Should be called from WinMain() or InitApplication() in an SDI app <br>// <br>//      This function LoadLibraries the neccessary DLLs rather than <br>//      linking with them.  This permits the form to run as a stand- <br>//      alone executable even when MAPI and OLE are not installed. <br>// <br>//  Returns: <br>//      HRESULT <br>// --------------------------------------------------------------------------- <br>HRESULT HrStartOleAndRegisterClassFactory(void) <br>{ <br>    HRESULT     hr      = NOERROR; <br> <br>    // ----- LoadLibrary the essentials <br>    hinstOle   = LoadLibrary(szOleDll); <br>    hinstMapi  = LoadLibrary(szMapiDll); <br>    #ifdef WIN16 <br>    if (hinstOle   &lt; HINSTANCE_ERROR) hinstOle   = 0; <br>    if (hinstMapi  &lt; HINSTANCE_ERROR) hinstMapi  = 0; <br>    #endif <br>    if (0 == hinstOle || 0 == hinstMapi) <br>    { <br>        return ResultFromScode(E_FAIL); <br>    } <br>         <br> <br>    // ----- Setup a few function pointers <br>    lpfnCoRegisterClassObject = (LPFNCOREGISTERCLASSOBJECT) GetProcAddress(hinstOle,  "CoRegisterClassObject"); <br>lpfnHrQueryAllRows        = (LPFNHRQUERYALLROWS       ) GetProcAddress(hinstMapi,"HrQueryAllRows"); <br>if (NULL == lpfnHrQueryAllRows) <br>{ <br>lpfnHrQueryAllRows    = (LPFNHRQUERYALLROWS       ) GetProcAddress(hinstMapi,"HrQueryAllRows@24"); <br>} <br>#ifndef WIN32 <br>    lpfnIsEqualGUID           = (LPFNISEQUALGUID          ) GetProcAddress(hinstOle,  "IsEqualGUID"); <br>#endif <br>    lpfnMAPIFreeBuffer        = (LPFNMAPIFREEBUFFER       ) GetProcAddress(hinstMapi,"MAPIFreeBuffer"); <br>    lpfnMAPIInitialize        = (LPFNMAPIINITIALIZE       ) GetProcAddress(hinstMapi,"MAPIInitialize"); <br>    lpfnMAPIUninitialize      = (LPFNMAPIUNINITIALIZE     ) GetProcAddress(hinstMapi,"MAPIUninitialize"); <br> <br>    ASSERT(lpfnCoRegisterClassObject); <br>    ASSERT(lpfnHrQueryAllRows); <br>    ASSERT(lpfnMAPIFreeBuffer); <br>    ASSERT(lpfnMAPIInitialize); <br>    ASSERT(lpfnMAPIUninitialize); <br> <br>    if (NULL == lpfnCoRegisterClassObject || <br>        NULL == lpfnHrQueryAllRows        || <br>        NULL == lpfnMAPIFreeBuffer        || <br>        NULL == lpfnMAPIInitialize        || <br>        NULL == lpfnMAPIUninitialize      ) <br>    { <br>        return ResultFromScode(E_FAIL); <br>    }     <br> <br>    // ----- Initialize MAPI <br>    hr = lpfnMAPIInitialize(NULL); <br> <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br> <br>    // ----- Allocate Memory for our class factory <br>    TRY <br>    { <br>        g_pfrmfac = new FRMFAC; <br>    } <br>    CATCH(CMemoryException, e) <br>    { <br>        hr = ResultFromScode(E_OUTOFMEMORY); <br>        return hr; <br>    } <br>    END_CATCH <br> <br>    // ----- Register our class object(s) <br>    DWORD dwRegMyForm = 0; <br>    hr = lpfnCoRegisterClassObject(CLSID_MyFormsClsId, (LPUNKNOWN)g_pfrmfac, <br>            CLSCTX_LOCAL_SERVER, REGCLS_SINGLEUSE, <br>            &amp;dwRegMyForm); /* switch singleuse to multipleuse if you are an MDI app */ <br> <br>    return hr; <br>} <br> <br> <br>//$--HrStopForms-------------------------------------------------------------- <br>// <br>//  Purpose: <br>//      UnInitialize OLE, MAPI, and the Forms Interface <br>// <br>//  Returns: <br>//      HRESULT == 0 <br>// --------------------------------------------------------------------------- <br>HRESULT HrStopForms(void) <br>{ <br>    HRESULT hr = ResultFromScode(S_OK); <br> <br>    if (g_pfrmfac) <br>        delete g_pfrmfac; <br> <br>    if (lpfnMAPIUninitialize) <br>        lpfnMAPIUninitialize(); <br> <br>    FreeLibrary(hinstOle); <br>    FreeLibrary(hinstMapi); <br> <br>    return hr; <br>} <br> <br>// Tool form specific methods follow /////////////////////////// <br> <br> <br>//$--FRM::FRM----------------------------------------------------------------- <br>// <br>//  Purpose: <br>//      Initialize or new form object <br>// <br>//---------------------------------------------------------------------------- <br>FRM::FRM(REFCLSID clsid) <br>{ <br>    LONG i; <br> <br>    m_cRef = 1; <br>    m_clsid = clsid; <br> <br>    m_pMessage = NULL; <br>    m_pMessageSite = NULL; <br>    m_pSession = NULL; <br> <br>    m_pFormMgr = NULL; <br>    m_pFormInfo = NULL; <br> <br>    m_fDirty = FALSE; <br> <br>    for (i=0; i&lt;MAX_ADVISE; i++) <br>    { <br>        m_aAdvisePtrs[i] = NULL; <br>        m_afAdvisee[i] = 0; <br>    } <br>} <br> <br> <br>//$--FRM::~FRM---------------------------------------------------------------- <br>// <br>//  Purpose: <br>//      Destroy our form object <br>// <br>//---------------------------------------------------------------------------- <br>FRM::~FRM() <br>{ <br>    ASSERT(0 == m_cRef); <br>    ASSERT(NULL == m_pMessage); <br>    ASSERT(NULL == m_pMessageSite); <br>    ASSERT(NULL == m_pSession); <br>} <br> <br> <br>//$--FRM::SendForm------------------------------------------------------------ <br>//   <br>// <br>//  Purpose: <br>//      Have the message site send us <br>//      (also tries to send the message using mapi if message site fails) <br>// <br>//  Returns: <br>//      HRESULT             Error status. <br>//---------------------------------------------------------------------------- <br>HRESULT FRM::SendForm(VOID) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    ASSERT(m_cRef &gt; 0); <br>    ASSERT(m_pMessageSite); <br>    ASSERT(m_pMessage); <br> <br>    // ----- Submit message <br>    hr = m_pMessageSite-&gt;SubmitMessage(0); <br> <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br>    // ----- advise everyone of what we just did <br>    ADVISE(OnSubmitted); <br> <br>    return hr; <br>} <br> <br> <br>//$--FRM::LaunchReplyMessage-------------------------------------------------- <br>//   <br>//  Purpose: <br>//      Construct a reply to PR_SENDER* (note: ignoring sent representing) <br>//      Display any form user interface on the existing form <br>// <br>//  Returns: <br>//      HRESULT             Error status. <br>//---------------------------------------------------------------------------- <br>HRESULT <br>FRM::LaunchReplyMessage(ULONG ulhwndParent) // Parent window <br>{ <br>    ULONG itaga; <br>    ADRLIST al = {1,0}; /* our adrlist will have exactly one entry */ <br>    HRESULT hr = S_OK; <br>    LPMAPIMESSAGESITE pNewMessageSite; <br>    LPMAPIVIEWCONTEXT pNewMapiViewContext; <br>    LPMESSAGE pNewMessage; <br> <br>    SizedSPropTagArray(6,tagaSender) = <br>        { 6, <br>        { PR_RECIPIENT_TYPE, <br>            PR_SENDER_NAME, <br>            PR_SENDER_ADDRTYPE, <br>            PR_SENDER_ENTRYID, <br>            PR_SENDER_EMAIL_ADDRESS, <br>            PR_SENDER_SEARCH_KEY } }; <br>    SizedSPropTagArray(6,tagaRepliee) = <br>        { 6, <br>        { PR_RECIPIENT_TYPE, <br>            PR_DISPLAY_NAME, <br>            PR_ADDRTYPE, <br>            PR_ENTRYID, <br>            PR_EMAIL_ADDRESS, <br>            PR_SEARCH_KEY <br>        } }; <br>    static SizedSPropTagArray(26,tagaRemoveFromNewReply) = <br>        { 26, <br>        {   // Stuff you would typically want to remove on reply <br>            PR_MESSAGE_FLAGS,               // Want unsent compose note <br>            PR_MESSAGE_RECIPIENTS,          // Will generate new recip list <br>            PR_SENDER_ENTRYID,              // Clear sender/recipient info <br>            PR_SENDER_NAME,                 // <br>            PR_RECEIVED_BY_ENTRYID,         // <br>            PR_RECEIVED_BY_NAME,            // <br>            PR_SENT_REPRESENTING_ENTRYID,   // Clear delegate access stuff <br>            PR_SENT_REPRESENTING_NAME,      // <br>            PR_SENT_REPRESENTING_ADDRTYPE,  // 10961 <br>            PR_SENT_REPRESENTING_EMAIL_ADDRESS, <br>            PR_RCVD_REPRESENTING_ENTRYID,   //  <br>            PR_RCVD_REPRESENTING_NAME,      // <br>            PR_READ_RECEIPT_ENTRYID,        // Clear destination overrides <br>            PR_REPORT_ENTRYID,              // <br>            PR_REPLY_RECIPIENT_ENTRIES,     // <br>            PR_REPLY_RECIPIENT_NAMES,       // <br>            PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED, // Clear delivery receipt <br>            PR_READ_RECEIPT_REQUESTED,      // Clear read receipt <br>            PR_CLIENT_SUBMIT_TIME,          // Clear submit time <br>            PR_MESSAGE_ATTACHMENTS,         // Drop attachments on reply <br>            PR_ORIGINAL_AUTHOR_ENTRYID,     // Keep original author information <br>            PR_ORIGINAL_AUTHOR_NAME,        //  on forwards <br>            PR_ORIGINAL_SUBMIT_TIME,        // Keep original time on forwards <br>            PR_IMPORTANCE,                  // Lose importance on reply <br>            PR_PRIORITY,                    // Lose priority on reply <br>            PR_SENSITIVITY                  // Lose sensitivity on reply <br>        } }; <br> <br>    ASSERT(m_cRef &gt; 0); <br>    ASSERT(m_pMessageSite); <br>    ASSERT(m_pSession); <br>    ASSERT(m_pMessage); <br> <br>    // ----- Create the reply message <br>    hr = m_pMessageSite-&gt;NewMessage(0,NULL, <br>        this, &amp;pNewMessage,&amp;pNewMessageSite,&amp;pNewMapiViewContext); <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br> <br>    ASSERT(pNewMessage); <br>    ASSERT(pNewMessageSite); <br>    ASSERT(pNewMapiViewContext); <br> <br>    // ----- Copy current message to new message <br>    hr = m_pMessage-&gt;CopyTo(0, NULL, (LPSPropTagArray)&amp;tagaRemoveFromNewReply, 0, NULL, <br>                                    (LPIID) &amp;IID_IMessage, pNewMessage, 0, NULL); <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br> <br>    // ----- who sent this to us? <br>    hr = m_pMessage-&gt;GetProps((LPSPropTagArray) &amp;tagaSender, 0, &amp;al.aEntries[0].cValues, &amp;al.aEntries[0].rgPropVals); <br>     <br>    ASSERT(ResultFromScode(MAPI_W_ERRORS_RETURNED) == hr); <br> <br>    // ----- Make the sender the recipient <br>    if (al.aEntries &amp;&amp; al.aEntries[0].rgPropVals) <br>    { <br>        al.aEntries[0].rgPropVals[0].ulPropTag = PR_RECIPIENT_TYPE; <br>        al.aEntries[0].rgPropVals[0].Value.ul = MAPI_TO; <br>    } <br>    else <br>    { <br>        return ResultFromScode(E_FAIL); <br>    } <br> <br>    // ----- Set our new recipients properties to their expected property ids <br>    itaga = 1; <br> <br>    for (itaga = 1; itaga &lt; tagaRepliee.cValues; itaga++) <br>    { <br>        al.aEntries[0].rgPropVals[itaga].ulPropTag = <br>            PROP_TAG(PROP_TYPE(al.aEntries[0].rgPropVals[itaga].ulPropTag), <br>                PROP_ID(tagaRepliee.aulPropTag[itaga])); <br> <br> <br>        ASSERT(SUCCEEDED(al.aEntries[0].rgPropVals[itaga].Value.ul)); <br>    } <br> <br>    // ----- Save out addresses <br>    ASSERT(1 == al.cEntries); <br>    hr = pNewMessage-&gt;ModifyRecipients(0, &amp;al); <br>    if (FAILED(hr) ) <br>    { <br>        return hr; <br>    } <br> <br>    // ----- Call Load (this makes the current form the new form) <br>    hr = Load(pNewMessageSite,pNewMessage,0,MSGFLAG_UNSENT); <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br> <br> <br>    // ----- Call DoVerb So we can see the reply form <br>    hr = DoVerb(OLEIVERB_PRIMARY,NULL,ulhwndParent,NULL); <br>    if (FAILED(hr)) <br>    { <br>        return hr; <br>    } <br> <br>    // ----- release stuff <br>    pNewMessage-&gt;Release(); <br>    pNewMessageSite-&gt;Release(); <br>    pNewMapiViewContext-&gt;Release(); <br>    lpfnMAPIFreeBuffer(al.aEntries[0].rgPropVals); <br> <br>    return hr; <br> <br>} <br> <br>//$--FRM::GetFormData--------------------------------------------------------- <br>// <br>//  Purpose: <br>//      Allows anyone to query the form for it's current data <br>// <br>//  Returns: <br>//      void <br>//---------------------------------------------------------------------------- <br>VOID FRM::GetFormData(CFormData&amp; theLocalFormData) <br>{ <br>    ASSERT(m_cRef &gt; 0); <br> <br>theLocalFormData = m_theFormData; <br>} <br> <br> <br>//$--FRM::SetFormData--------------------------------------------------------- <br>//   <br>// <br>//  Purpose: <br>//      Allows anyone to set the forms current data members <br>// <br>//  Returns: <br>//      void <br>//---------------------------------------------------------------------------- <br>VOID FRM::SetFormData(const CFormData&amp; theLocalFormData) <br>{ <br>    ASSERT(m_cRef &gt; 0); <br> <br>m_theFormData = theLocalFormData; <br> <br>    m_fDirty = TRUE; <br>} <br> <br> <br>//$--FRM::AddressForm--------------------------------------------------------- <br>//   <br>//  Purpose: <br>//      Add the address "Tools" to the "To:" list for the form. <br>// <br>//  Returns: <br>//      HRESULT Error Status. <br>//---------------------------------------------------------------------------- <br>HRESULT <br>FRM::AddressForm( <br>         HWND hwnd,                     // parent <br>         BOOL fDontShowIfRecipsExist)   // true if no user interface should <br>                                        // be presented when recipients are <br>                                        // already present <br>{ <br>    LPADRBOOKpAdrBook= NULL; <br>ULONGcbeid= 0; <br>LPENTRYIDlpeid= NULL; <br>    ULONGulUIParam = (ULONG) (UINT) hwnd; <br>    HRESULThr = S_OK;     <br>    LPADRLISTpal = NULL; <br>LPSPropValuergAdrProps= NULL; <br> <br>    ASSERT(m_cRef &gt; 0); <br>    ASSERT(m_pMessageSite); <br>    ASSERT(m_pSession); <br>    ASSERT(m_pMessage); <br> <br>    // ----- remember address book from the session <br>    hr = m_pSession-&gt;OpenAddressBook(0, NULL, AB_NO_DIALOG, &amp;pAdrBook); <br>if (FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>hr = MAPIAllocateBuffer(CbNewADRLIST(1), (LPVOID FAR *)&amp;pal); <br>if (FAILED(hr)) <br>{ <br>goto cleanup; <br>} <br> <br>pal-&gt;cEntries = 1; <br> <br>pal-&gt;aEntries[0].ulReserved1 = 0; <br>pal-&gt;aEntries[0].cValues = 2; <br>pal-&gt;aEntries[0].rgPropVals = NULL; <br> <br>// Allocate memory for the recipient properties <br>hr = MAPIAllocateBuffer(2*sizeof(SPropValue), (LPVOID *)&amp;rgAdrProps); <br> <br>if (FAILED(hr)) <br>{ <br>printf("MAPIAllocateBuffer() failed\n"); <br>goto cleanup; <br>} <br> <br>pal-&gt;aEntries[0].rgPropVals = rgAdrProps; <br> <br>rgAdrProps[0].ulPropTag = PR_DISPLAY_NAME; <br>rgAdrProps[0].Value.LPSZ = "Tools"; <br> <br>rgAdrProps[1].ulPropTag = PR_RECIPIENT_TYPE; <br>rgAdrProps[1].Value.l = MAPI_TO; <br> <br>hr = pAdrBook-&gt;ResolveName(0, <br>   MAPI_DIALOG, <br>   NULL, <br>   pal); <br> <br>if (FAILED(hr)) <br>{ <br>goto cleanup; <br>} <br> <br>hr = m_pMessage-&gt;ModifyRecipients(MODRECIP_ADD, pal); <br> <br>    // ----- Release the address book, adrlist, and clean up <br>cleanup: <br>    if (pAdrBook) <br>    { <br>        pAdrBook-&gt;Release(); <br>    } <br>    if (pal) <br>    { <br>        lpfnMAPIFreeBuffer(pal-&gt;aEntries[0].rgPropVals); <br>        lpfnMAPIFreeBuffer(pal); <br>    } <br> <br>    return hr; <br>} <br> <br> <br>//$--FRM::Remember------------------------------------------------------------ <br>//   <br>//  Purpose: <br>//      Store and addref the message site, the message, and the session <br>//      for later use <br>// <br>//  Returns: <br>//      HRESULT Error Status. <br>//---------------------------------------------------------------------------- <br>HRESULT FRM::Remember(LPMAPIMESSAGESITE pmsite, LPMESSAGE pmsg) <br>{ <br>    HRESULT hr; <br> <br>    ASSERT(m_cRef &gt; 0); <br>    ASSERT(pmsite); <br>    ASSERT(pmsg); <br> <br>    // ----- remember our message site object <br>    if(!m_pMessageSite) <br>    { <br>        m_pMessageSite = pmsite; <br>        m_pMessageSite-&gt;AddRef(); <br>    } <br> <br>    // ----- remember our message <br>    if(!m_pMessage) <br>    { <br>        m_pMessage = pmsg; <br>        m_pMessage-&gt;AddRef(); <br>    } <br> <br>    // ----- remember mapi session <br>    if(!m_pSession) <br>    { <br>        hr = m_pMessageSite-&gt;GetSession(&amp;m_pSession); <br>    } <br> <br>    return hr; <br> <br>} <br> <br> <br>//$--FRM::Forget-------------------------------------------------------------- <br>// <br>//  Purpose: <br>//      Release the message site, the message, and the session <br>// <br>//  Returns: <br>//      HRESULT Error Status. <br>//---------------------------------------------------------------------------- <br>HRESULT FRM::Forget(VOID) <br>{ <br>    if (m_pMessage) <br>        m_pMessage-&gt;Release(); <br>    if (m_pMessageSite) <br>        m_pMessageSite-&gt;Release(); <br>    if (m_pSession) <br>        m_pSession-&gt;Release(); <br> <br>    m_pMessage = NULL; <br>    m_pMessageSite = NULL; <br>    m_pSession = NULL; <br> <br>    return NOERROR; <br>} <br> <br>//$--FRM::ShowCurrentMessage-------------------------------------------------- <br>// <br>//  Purpose: <br>//      Display any form user interface on a form <br>// <br>//  Returns: <br>//      HRESULT             Error status. <br>//---------------------------------------------------------------------------- <br>HRESULT FRM::ShowCurrentMessage(ULONG ulhwndParent) // Parent window <br>{ <br>    HRESULT hr = NOERROR; <br> <br>ASSERT(m_cRef &gt; 0); <br>    ASSERT(m_pMessageSite); <br>    ASSERT(m_pSession); <br>    ASSERT(m_pMessage); <br> <br>    // ----- Give our user access to our form interface <br>if ((NULL != m_pMessageSite) &amp;&amp; (NULL != m_pSession) &amp;&amp; (NULL != m_pMessage)) <br>{ <br>g_pForm = this; <br> <br>        g_pForm-&gt;AddRef(); <br>} <br> <br>    return hr; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

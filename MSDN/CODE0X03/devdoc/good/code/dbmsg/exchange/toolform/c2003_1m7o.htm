<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2004"></a>FORM.H</h2>
<pre><code>// --form.h------------------------------------------------------------------- <br>// <br>//  Declaration for the FRMFAC and FRM classes <br>// <br>//Copyright (C) 1986-1996. Microsoft Corporation.  All Rights Reserved. <br>// <br>// --------------------------------------------------------------------------- <br> <br>#ifndef _FORM_H <br>#define_FORM_H <br> <br>#include &lt;mapiform.h&gt; <br>#define INITGUID <br>#include &lt;initguid.h&gt; <br>#include &lt;mapix.h&gt; <br>#include &lt;mapiutil.h&gt; <br>#include &lt;mapinls.h&gt; <br> <br>#definekszFormsMessageName"IPM.ToolForm1" <br>#definekszAppName"Tool Form Sample" <br>#definekszAppLoadingTitle"Tool Form, Loading..." <br> <br> <br>HRESULT HrStartOleAndRegisterClassFactory(void); <br>HRESULT HrStopForms(void); <br> <br>#define NOTPURE <br>#define MAX_ADVISE 48 <br> <br>#define CbNewFlagList(_cflag) \ <br>(offsetof(FlagList,ulFlag) + (_cflag)*sizeof(ULONG)) <br> <br>/* <br> *  Types <br> */ <br> <br>// ----- class factory <br>class FRMFAC : public IClassFactory <br>{ <br>public: <br>    FRMFAC(); <br> <br>    // *** IUnknown methods <br>    STDMETHOD(QueryInterface)   (THIS_ REFIID riid, LPVOID FAR* ppvObj); <br>    STDMETHOD_(ULONG,AddRef)    (THIS); <br>    STDMETHOD_(ULONG,Release)   (THIS); <br> <br>    // *** IClassFactory methods <br>    STDMETHOD(CreateInstance)   (THIS_ LPUNKNOWN pUnkOuter, REFIID riid, LPVOID FAR* ppvObject); <br>    STDMETHOD(LockServer)       (THIS_ BOOL fLock); <br>protected: <br>    ULONG       m_cRef; <br>    CLSID       m_clsid; <br>}; <br> <br>// ----- The minimal interface a form can support <br>class FRM : public IPersistMessage, public IMAPIForm <br>{ <br>  protected: <br>    ULONG                   m_cRef;               // Reference count <br>    CLSID                   m_clsid; <br> <br>    BOOL                    m_fDirty;             // Is our message dirty? <br>    BOOL                    m_fSentMessage;       // Are we reading a sent message? <br> <br> <br> <br>    // advise handling <br> <br>    BOOL                    m_afAdvisee[MAX_ADVISE]; <br>    LPMAPIVIEWADVISESINK    m_aAdvisePtrs[MAX_ADVISE]; <br> <br> <br>    // This is all the data that is specific to this exact form.  To change  <br>// the form, edit FormData.c and FormData.h which will be easier than  <br>// adding data here.  Also, FormData.h will give instructions on what  <br>// modifications are needed when data is added to a form. <br>CFormDatam_theFormData; <br> <br> <br>    ~FRM(void); <br> <br>  public: <br>    LPMESSAGE               m_pMessage; <br>    LPMAPIMESSAGESITE       m_pMessageSite; <br>    LPMAPISESSION           m_pSession; <br> <br>    LPMAPIFORMMGR           m_pFormMgr; <br>    LPMAPIFORMINFO          m_pFormInfo; <br> <br>    FRM(REFCLSID clsid); <br> <br>    MAPI_IUNKNOWN_METHODS(NOTPURE) <br>    MAPI_GETLASTERROR_METHOD(NOTPURE) <br>    MAPI_IPERSISTMESSAGE_METHODS(NOTPURE) <br>    MAPI_IMAPIFORM_METHODS(NOTPURE) <br> <br>    HRESULT ShowCurrentMessage(ULONG ulhwndParent); <br>    HRESULT LaunchReplyMessage(ULONG ulhwndParent); <br>    VOID GetFormData(CFormData &amp; theData); <br>    VOID SetFormData(const CFormData &amp; theData); <br>    HRESULT Remember(LPMAPIMESSAGESITE pmsite, LPMESSAGE pmsg); <br>    HRESULT Forget(VOID); <br>    HRESULT SendForm(VOID); <br>    HRESULT AddressForm(HWND hwnd, BOOL fDontShowIfRecipsExist); <br>}; <br> <br>/* <br> *  Macros <br> */ <br> <br>#define ADVISE(_func)                    \ <br>{                                        \ <br>   for (LONG i = 0; i &lt; MAX_ADVISE; i++) \ <br>      if (m_afAdvisee[i])                \ <br>         m_aAdvisePtrs[i]-&gt;_func();      \ <br>} <br> <br>#define ReleaseObj(_pobj) \ <br>        if (_pobj) \ <br>                (_pobj)-&gt;Release() <br> <br>/* <br> *  Dependencies specific to this form <br> */ <br> <br>#define PR_FORMDATAPROP_TAG( PT_BINARY,   0x6800) <br> <br>typedef HRESULT (FAR PASCAL *LPFNCOREGISTERCLASSOBJECT)( <br>            REFCLSID rclsid, <br>            IUnknown FAR * pUnk, <br>            DWORD dwClsContext, <br>            DWORD flags, <br>            LPDWORD lpdwRegister); <br>#ifdef WIN16 <br>typedef BOOL (FAR PASCAL *LPFNISEQUALGUID)(REFGUID rguid1, REFGUID rguid2); <br>#undef IsEqualIID <br>#define IsEqualIID(riid1, riid2) (*lpfnIsEqualGUID)(riid1, riid2) <br>#endif <br> <br>typedef HRESULT (FAR PASCAL *LPFNHRQUERYALLROWS)( <br>            LPMAPITABLE ptable,  <br>            LPSPropTagArray ptaga, LPSRestriction pres, <br>            LPSSortOrderSet psos, LONG crowsMax, <br>            LPSRowSet FAR *pprows); <br>typedef ULONG   (FAR PASCAL *LPFNMAPIFREEBUFFER)(LPVOID pv); <br>typedef HRESULT (FAR PASCAL *LPFNMAPIINITIALIZE)(LPVOID lpvReserved); <br>typedef void    (FAR PASCAL *LPFNMAPIUNINITIALIZE)(VOID); <br> <br>#ifdef WIN32 <br>#define szOleDll  "ole32.dll" <br>#define szMapiDll "mapi32.dll" <br>#else <br>#define szOleDll  "compobj.dll" <br>#define szMapiDll "mapi.dll" <br>#endif <br> <br>#ifdef WIN16 <br>extern LPFNISEQUALGUID           lpfnIsEqualGUID; <br>#endif <br>extern LPFNCOREGISTERCLASSOBJECT lpfnCoRegisterClassObject; <br>extern LPFNHRQUERYALLROWS        lpfnHrQueryAllRows       ; <br>extern LPFNMAPIFREEBUFFER        lpfnMAPIFreeBuffer       ; <br>extern LPFNMAPIINITIALIZE        lpfnMAPIInitialize       ; <br>extern LPFNMAPIUNINITIALIZE      lpfnMAPIUninitialize     ; <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

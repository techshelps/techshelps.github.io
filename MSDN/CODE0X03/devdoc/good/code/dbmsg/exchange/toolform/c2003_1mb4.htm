<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOOLFORM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2020"></a>TOOLFORM.CPP</h2>
<pre><code>// --toolform.cpp------------------------------------------------------------- <br>// <br>//   Implementation of the CToolForm class <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// --------------------------------------------------------------------------- <br> <br>#include "stdafx.h" <br>#include "Tool.h" <br> <br>#include "formdata.h" <br>#include "form.h" <br> <br>#include "ToolForm.h" <br>#include "ToolDoc.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define new DEBUG_NEW <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CToolForm <br> <br>IMPLEMENT_DYNCREATE(CToolForm, CFormView) <br> <br>CToolForm::CToolForm() <br>: CFormView(CToolForm::IDD) <br>{ <br>//{{AFX_DATA_INIT(CToolForm) <br>m_strDevelopedBy = _T(""); <br>m_strIntroduction = _T(""); <br>m_strLocation = _T(""); <br>m_strOS = _T(""); <br>m_strPlatform = _T(""); <br>m_strToolName = _T(""); <br>m_strToolType = _T(""); <br>m_strTopic = _T(""); <br>//}}AFX_DATA_INIT <br>} <br> <br>CToolForm::~CToolForm() <br>{ <br>} <br> <br>void CToolForm::OnFinalRelease() <br>{ <br>// When the last reference for an automation object is released <br>//OnFinalRelease is called.  This implementation deletes the  <br>//object.  Add additional cleanup required for your object before <br>//deleting it from memory. <br> <br>delete this; <br>} <br> <br>void CToolForm::DoDataExchange(CDataExchange* pDX) <br>{ <br>CFormView::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CToolForm) <br>DDX_Text(pDX, IDC_DEVELOPEDBY, m_strDevelopedBy); <br>DDX_Text(pDX, IDC_INTRODUCTION, m_strIntroduction); <br>DDX_Text(pDX, IDC_LOCATION, m_strLocation); <br>DDX_CBString(pDX, IDC_OS, m_strOS); <br>DDX_CBString(pDX, IDC_PLATFORM, m_strPlatform); <br>DDX_Text(pDX, IDC_TOOLNAME, m_strToolName); <br>DDX_CBString(pDX, IDC_TOOLTYPE, m_strToolType); <br>DDX_Text(pDX, IDC_TOPIC, m_strTopic); <br>//}}AFX_DATA_MAP <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CToolForm, CFormView) <br>//{{AFX_MSG_MAP(CToolForm) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CToolForm diagnostics <br> <br>#ifdef _DEBUG <br>void CToolForm::AssertValid() const <br>{ <br>CFormView::AssertValid(); <br>} <br> <br>void CToolForm::Dump(CDumpContext&amp; dc) const <br>{ <br>CFormView::Dump(dc); <br>} <br> <br>CToolDoc* CToolForm::GetDocument() // non-debug version is inline <br>{ <br>return (CToolDoc*)m_pDocument; <br>} <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CToolForm message handlers <br> <br>void CToolForm::OnInitialUpdate()  <br>{ <br> PutDataIntoWindow(); <br> <br>CFormView::OnInitialUpdate(); <br>} <br> <br>void CToolForm::PutDataIntoWindow(void)  <br>{ <br>    CToolDoc * pDoc = GetDocument(); <br> <br>    //TODO : Enter FORM DATA specific code here <br>m_strTopic         = pDoc-&gt;m_theFormData.m_szTopic; <br>m_strToolName      = pDoc-&gt;m_theFormData.m_szToolName; <br>m_strToolType      = pDoc-&gt;m_theFormData.m_szToolType; <br>m_strPlatform      = pDoc-&gt;m_theFormData.m_szPlatform; <br>m_strOS            = pDoc-&gt;m_theFormData.m_szOS; <br>m_strDevelopedBy   = pDoc-&gt;m_theFormData.m_szDevelopedBy; <br>m_strLocation      = pDoc-&gt;m_theFormData.m_szLocation; <br>m_strIntroduction  = pDoc-&gt;m_theFormData.m_szIntroduction; <br> <br>UpdateData(FALSE); <br>} <br> <br> <br>void CToolForm::GetDataFromWindow(void)  <br>{ <br>UpdateData(TRUE); <br> <br>    CToolDoc * pDoc = GetDocument(); <br> <br>    //TODO : Enter FORM DATA specific code here <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szTopic,  <br>        m_strTopic,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szTopic) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szToolName,  <br>        m_strToolName,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szToolName) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szToolType,  <br>        m_strToolType,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szToolType) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szPlatform,  <br>        m_strPlatform,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szPlatform) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szOS,  <br>        m_strOS,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szOS) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szDevelopedBy,  <br>        m_strDevelopedBy,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szDevelopedBy) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szLocation,  <br>        m_strLocation,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szLocation) - 1); <br>strncpy( <br>        pDoc-&gt;m_theFormData.m_szIntroduction,  <br>        m_strIntroduction,  <br>        sizeof(pDoc-&gt;m_theFormData.m_szIntroduction) - 1); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

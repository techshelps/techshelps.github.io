<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EDKTRACK.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1841"></a>EDKTRACK.C</h2>
<pre><code>// --edktrack.c----------------------------------------------------------------- <br>//  <br>//  Module containing gateway tracking functions. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "sadapi.h" <br> <br>#include "edktrack.chk" <br> <br>//$--HrTrackInitLog------------------------------------------------------------- <br>//  This function initializes the gateway event tracking module. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrTrackInitLog(             // RETURNS: return code <br>IN LPSTR lpszComputer,          // name of the remote computer <br>    OUT PVOID *ppvSession)          // pointer to gateway tracking session <br>{ <br>    HRESULT      hr        = NOERROR; <br>    RPC_SC       sc        = ERROR_SUCCESS; <br>    PRPCBINDINFO lpSession = NULL; <br> <br>    DEBUGPUBLIC("HrTrackInitLog()"); <br> <br>    hr = CHK_HrTrackInitLog( lpszComputer, ppvSession); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *ppvSession = NULL; <br> <br>    hr = MAPIAllocateBuffer( sizeof(RPCBINDINFO), &amp;lpSession); <br>    if( FAILED( hr)) <br>        goto cleanup;                                 <br> <br>    ZeroMemory( lpSession, sizeof(RPCBINDINFO)); <br> <br>    __try <br>    { <br>    sc = SAD_ScBindA(lpSession, lpszComputer); <br>    } <br>    __except(EXCEPTION_EXECUTE_HANDLER) <br>    { <br>        SetLastError(_exception_code()); <br>        sc = RPC_E_UNEXPECTED; <br>    } <br> <br>if(sc != ERROR_SUCCESS) <br>{ <br>        hr = HR_LOG(E_FAIL);     <br>        goto cleanup; <br>} <br> <br>    *ppvSession = (PVOID)lpSession; <br> <br>cleanup: <br>    if( FAILED( hr)) <br>        MAPIFREEBUFFER( lpSession); <br> <br>    RETURN( hr); <br>} <br> <br>//$--HrTrackWriteLog@------------------------------------------------------- <br>//  This function logs a gateway tracking event. <br>// ---------------------------------------------------------------------------- <br>HRESULT HrTrackWriteLogW( <br>    IN PVOID           pvSession,       // gateway tracking session <br>    IN UINT            nEventType,      // gateway tracking event type <br>    IN SYSTEMTIME      stEvent,         // time event took place <br>    IN LPCWSTR         lpszGatewayName, // gateway name <br>    IN LPCWSTR         lpszPartner,     // pointer to entity name string <br>    IN LPCWSTR         lpszMTSID,       // pointer to MTS-ID string <br>    IN LPCWSTR         lpszSubjectMTSID,// pointer to subject MTS-ID string <br>    IN LPCWSTR         lpszRemoteID,    // pointer to foreign ID string <br>    IN LPCWSTR         lpszOriginator,  // pointer to originator string <br>    IN INT             nPriority,       // message priority <br>    IN INT             nLength,         // message length <br>    IN INT             nSeconds,        // seconds to process this message <br>    IN INT             nCost,           // cost of processing this message <br>    IN INT             cRecipients,     // count of recipients <br>    IN LPCWSTR        *lppszRecipients) // pointer to recipient pointers <br>{ <br>    HRESULT     hr                = NOERROR; <br>    RPC_SC      sc                = ERROR_SUCCESS; <br>    RPCBINDINFO *lpSession        = NULL; <br> <br>    RPC_GATEWAY_TRACK_INFORMATION gti = {0}; <br> <br>    DEBUGPUBLIC("HrTrackWriteLogW()"); <br> <br>    hr = CHK_HrTrackWriteLogW( <br>        pvSession, nEventType, stEvent, <br>        lpszGatewayName, lpszPartner, lpszMTSID, <br>        lpszSubjectMTSID, lpszRemoteID, lpszOriginator, <br>        nPriority, nLength, nSeconds, nCost, <br>        cRecipients, lppszRecipients); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    lpSession = (PRPCBINDINFO)pvSession; <br> <br>    gti.nEventType               = nEventType; <br> <br>    gti.stEvent.rgwSystemTime[0] = stEvent.wYear; <br>    gti.stEvent.rgwSystemTime[1] = stEvent.wMonth; <br>    gti.stEvent.rgwSystemTime[2] = stEvent.wDayOfWeek; <br>    gti.stEvent.rgwSystemTime[3] = stEvent.wDay; <br>    gti.stEvent.rgwSystemTime[4] = stEvent.wHour; <br>    gti.stEvent.rgwSystemTime[5] = stEvent.wMinute; <br>    gti.stEvent.rgwSystemTime[6] = stEvent.wSecond; <br>    gti.stEvent.rgwSystemTime[7] = stEvent.wMilliseconds; <br> <br>    // Strings already WCHAR <br>    gti.szGatewayName = (LPWSTR)lpszGatewayName; <br>    gti.szPartner     = (LPWSTR)lpszPartner; <br>    gti.szMTSID       = (LPWSTR)lpszMTSID; <br>    gti.szSubjectID   = (LPWSTR)lpszSubjectMTSID; <br>    gti.szRemoteID    = (LPWSTR)lpszRemoteID; <br>    gti.szOriginator  = (LPWSTR)lpszOriginator; <br> <br>    gti.nPriority       = nPriority; <br>    gti.nLength         = nLength; <br>    gti.nSeconds        = nSeconds; <br>    gti.nCost           = nCost; <br> <br>    __try <br>    { <br>        sc = SAD_ScSaveGatewayTrackingData( <br>            lpSession, <br>        &amp;gti, <br>        cRecipients, <br>        (LPWSTR*)lppszRecipients); <br>    } <br>    __except(EXCEPTION_EXECUTE_HANDLER) <br>    { <br>        SetLastError(_exception_code()); <br>        sc = RPC_E_UNEXPECTED; <br>    } <br> <br>    if(sc != ERROR_SUCCESS) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>goto cleanup; <br>    } <br> <br>cleanup: <br>    RETURN(hr); <br>} <br> <br>HRESULT HrTrackWriteLogA( <br>    IN PVOID           pvSession,       // gateway tracking session <br>    IN UINT            nEventType,      // gateway tracking event type <br>    IN SYSTEMTIME      stEvent,         // time event took place <br>    IN LPCSTR          lpszGatewayName, // gateway name <br>    IN LPCSTR          lpszPartner,     // pointer to entity name string <br>    IN LPCSTR          lpszMTSID,       // pointer to MTS-ID string <br>    IN LPCSTR          lpszSubjectMTSID,// pointer to subject MTS-ID string <br>    IN LPCSTR          lpszRemoteID,    // pointer to foreign ID string <br>    IN LPCSTR          lpszOriginator,  // pointer to originator string <br>    IN INT             nPriority,       // message priority <br>    IN INT             nLength,         // message length <br>    IN INT             nSeconds,        // seconds to process this message <br>    IN INT             nCost,           // cost of processing this message <br>    IN INT             cRecipients,     // count of recipients <br>    IN LPCSTR         *lppszRecipients) // pointer to recipient pointers <br>{ <br>    HRESULT     hr                = NOERROR; <br>    RPC_SC      sc                = ERROR_SUCCESS; <br>    RPCBINDINFO *lpSession        = NULL; <br>    LPWSTR      *lppszRecipientsW = NULL; <br> <br>    RPC_GATEWAY_TRACK_INFORMATION gti = {0}; <br> <br>    DEBUGPUBLIC("HrTrackWriteLogA()"); <br> <br>    hr = CHK_HrTrackWriteLogA( <br>        pvSession, nEventType, stEvent, <br>        lpszGatewayName, lpszPartner, lpszMTSID, <br>        lpszSubjectMTSID, lpszRemoteID, lpszOriginator, <br>        nPriority, nLength, nSeconds, nCost,  <br>        cRecipients, lppszRecipients); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    lpSession = (PRPCBINDINFO)pvSession; <br> <br>    gti.nEventType               = nEventType; <br> <br>    gti.stEvent.rgwSystemTime[0] = stEvent.wYear; <br>    gti.stEvent.rgwSystemTime[1] = stEvent.wMonth; <br>    gti.stEvent.rgwSystemTime[2] = stEvent.wDayOfWeek; <br>    gti.stEvent.rgwSystemTime[3] = stEvent.wDay; <br>    gti.stEvent.rgwSystemTime[4] = stEvent.wHour; <br>    gti.stEvent.rgwSystemTime[5] = stEvent.wMinute; <br>    gti.stEvent.rgwSystemTime[6] = stEvent.wSecond; <br>    gti.stEvent.rgwSystemTime[7] = stEvent.wMilliseconds; <br> <br>    // Convert strings to WCHAR <br>    hr = HrStrAToStrW( lpszGatewayName, &amp;gti.szGatewayName); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    hr = HrStrAToStrW( lpszPartner, &amp;gti.szPartner); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    hr = HrStrAToStrW( lpszMTSID, &amp;gti.szMTSID); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    hr = HrStrAToStrW( lpszSubjectMTSID, &amp;gti.szSubjectID); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    hr = HrStrAToStrW( lpszRemoteID, &amp;gti.szRemoteID); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    hr = HrStrAToStrW( lpszOriginator, &amp;gti.szOriginator); <br>    if(FAILED(hr)) <br>    goto cleanup; <br> <br>    gti.nPriority       = nPriority; <br>    gti.nLength         = nLength; <br>    gti.nSeconds        = nSeconds; <br>    gti.nCost           = nCost; <br> <br>if(cRecipients != 0) <br>{ <br>        ULONG   cb          = 0L; <br>        int     iRecipients = 0; <br> <br>        cb = cRecipients * (sizeof(LPWSTR) + MAX_ALIGN); <br> <br>    hr = MAPIAllocateBuffer(  <br>            cb, (PVOID)&amp;lppszRecipientsW); <br>        if( FAILED( hr)) <br>            goto cleanup;                                 <br> <br>        ZeroMemory( lppszRecipientsW, cb); <br> <br>for(iRecipients = 0; iRecipients &lt; cRecipients; iRecipients++) <br>{ <br>if(lppszRecipients[iRecipients] == NULL) <br>            { <br>                hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>            } <br> <br>            hr = HrStrAToStrW( <br>                lppszRecipients[iRecipients], <br>                &amp;lppszRecipientsW[iRecipients]); <br>            if(FAILED(hr)) <br>        goto cleanup; <br>} <br>} <br> <br>    __try <br>    { <br>        sc = SAD_ScSaveGatewayTrackingData( <br>            lpSession, <br>        &amp;gti, <br>        cRecipients, <br>        lppszRecipientsW); <br>    } <br>    __except(EXCEPTION_EXECUTE_HANDLER) <br>    { <br>        SetLastError(_exception_code()); <br>        sc = RPC_E_UNEXPECTED; <br>    } <br> <br>    if(sc != ERROR_SUCCESS) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>goto cleanup; <br>    } <br> <br>cleanup: <br>    MAPIFREEBUFFER(gti.szGatewayName); <br>    MAPIFREEBUFFER(gti.szPartner); <br>    MAPIFREEBUFFER(gti.szMTSID); <br>    MAPIFREEBUFFER(gti.szSubjectID); <br>    MAPIFREEBUFFER(gti.szRemoteID); <br>    MAPIFREEBUFFER(gti.szOriginator); <br> <br>if(cRecipients != 0 &amp;&amp; lppszRecipientsW != NULL) <br>{ <br>        int iRecipients = 0; <br> <br>for(iRecipients = 0; iRecipients &lt; cRecipients; iRecipients ++) <br>            MAPIFREEBUFFER(lppszRecipientsW[iRecipients]); <br> <br>        MAPIFREEBUFFER(lppszRecipientsW); <br>} <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrTrackUninitLog---------------------------------------------------------- <br>//  This function uninitializes the gateway event tracking module. <br>// ---------------------------------------------------------------------------- <br>HRESULT HrTrackUninitLog(               // RETURNS: return code <br>    IN OUT PVOID *ppvSession)           // pointer to gateway tracking session <br>{ <br>    HRESULT      hr        = NOERROR; <br>    PRPCBINDINFO lpSession = NULL; <br> <br>    DEBUGPUBLIC("HrTrackUninitLog()"); <br> <br>    hr = CHK_HrTrackUninitLog( <br>        ppvSession); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    lpSession = (PRPCBINDINFO)*ppvSession; <br> <br>    __try <br>    { <br>    SAD_Unbind(lpSession); <br>    } <br>    __except(EXCEPTION_EXECUTE_HANDLER) <br>    { <br>        SetLastError(_exception_code()); <br>        hr = HR_LOG(E_FAIL); <br>    } <br> <br>    MAPIFREEBUFFER( *ppvSession); <br> <br>    RETURN(hr); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

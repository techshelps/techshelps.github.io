<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVDLLE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1870"></a>CONVDLLE.CPP</h2>
<pre><code>// --convdlle.cpp--------------------------------------------------------------- <br>//  <br>// Defines an entry point to a conversion DLL. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "convincl.h" <br>#include "convdlle.chk" <br> <br>//$--CDllEntryPoint::CDllEntryPoint--------------------------------------------- <br>// <br>//  DESCRIPTION: CDllEntryPoint class constructor <br>// <br>//  INPUT:  none <br>// <br>//  RETURNS:    nothing <br>// <br>//------------------------------------------------------------------------------ <br>CDllEntryPoint::CDllEntryPoint() <br>{  <br>    DEBUGPRIVATE("CDllEntryPoint::CDllEntryPoint()\n"); <br> <br>    m_nRefs = 1; <br> <br>    m_pszDllName    = NULL;  <br>    m_pszEntryPoint = NULL;  <br>    m_pszGwPoint    = NULL;  <br>    m_pszOptions    = NULL; <br>} <br> <br>//$--CDllEntryPoint::~CDllEntryPoint-------------------------------------------- <br>// <br>//  DESCRIPTION: CDllEntryPoint class destructor. <br>// <br>//  INPUT:  none <br>// <br>//  RETURNS:    nothing <br>// <br>//------------------------------------------------------------------------------ <br>CDllEntryPoint::~CDllEntryPoint()  <br>{ <br>    DEBUGPRIVATE("CDllEntryPoint::~CDllEntryPoint()\n"); <br> <br>    // consistency checking <br>    ASSERTERROR(m_nRefs == 0,"ZERO m_nRefs variable"); <br> <br>    EDKFree(); <br>} <br> <br>//$--CDllEntryPoint::Release---------------------------------------------------- <br>// <br>// DESCRIPTION: Decrements CDllEntryPoint instance reference count.  Destroys <br>//              object when reference count goes to zero. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: nothing <br>// <br>//------------------------------------------------------------------------------ <br>void CDllEntryPoint::Release() <br>{ <br>    DEBUGPRIVATE("CDllEntryPoint::Release()"); <br> <br>    if(--m_nRefs &lt;= 0) <br>        delete this; <br>} <br> <br>//$--CDllEntryPoint::HrEDKSet------------------------------------------------------ <br>// <br>//  DESCRIPTION: Initialize a conversion entry point values <br>// <br>//  INPUT:  pszDllName  --  Dll name <br>//          pszEntryPoint   --  entry point function name <br>//          pszGwPoint  -- <br>//          pszOptions  --  options <br>// <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CDllEntryPoint::HrEDKSet(   // RETURNS: HRESULT <br>    IN LPCWSTR pszDllName,          // copied <br>    IN LPCWSTR pszEntryPoint,       // entry point function name <br>    IN LPCWSTR pszGwPoint, <br>    IN LPCWSTR pszOptions)          // options <br>{ <br>    HRESULT hr  =   NOERROR;        // return code <br> <br>    DEBUGPRIVATE("CDllEntryPoint::HrEDKSet()\n"); <br> <br>    // check input parameters <br>    hr = CHK_CDllEntryPoint_HrEDKSet(pszDllName, pszEntryPoint, pszGwPoint, pszOptions); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    hr = HrStrWToStrW(pszDllName, &amp;m_pszDllName); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        EDKFree(); <br> <br>        goto cleanup; <br>    }  <br> <br>    // Remember m_pszEntryPoint is ANSI string <br> <br>    hr = HrStrWToStrA(pszEntryPoint, &amp;m_pszEntryPoint); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        EDKFree(); <br> <br>        goto cleanup; <br>    } <br> <br>    hr = HrStrWToStrW(pszGwPoint, &amp;m_pszGwPoint); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        EDKFree(); <br> <br>        goto cleanup; <br>    } <br> <br>    hr = HrStrWToStrW(pszOptions, &amp;m_pszOptions); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        EDKFree(); <br> <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(m_pszDllName != NULL, "Bad m_pszDllName"); <br>    ASSERTERROR(m_pszEntryPoint != NULL, "Bad m_pszEntryPoint"); <br>    ASSERTERROR(m_pszGwPoint != NULL, "Bad m_pszGwPoint"); <br>     <br>cleanup: <br> <br>    RETURN(hr); <br> <br>} <br> <br>//$--CDllEntryPoint::EDKFree------------------------------------------------------- <br>// <br>// DESCRIPTION: Common dynamic memory free. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: void <br>// <br>//------------------------------------------------------------------------------ <br>void CDllEntryPoint::EDKFree() // RETURNS: void <br>{ <br>    DEBUGPRIVATE("CDllEntryPoint::EDKFree()\n"); <br> <br>    MAPIFREEBUFFER(m_pszDllName); <br>    MAPIFREEBUFFER(m_pszEntryPoint); <br>    MAPIFREEBUFFER(m_pszGwPoint); <br>    MAPIFREEBUFFER(m_pszOptions); <br>} <br> <br>//$--CDllEntryPoint::EDKDump------------------------------------------------------- <br>// <br>// DESCRIPTION: dump class contents. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: void <br>// <br>//------------------------------------------------------------------------------ <br>void CDllEntryPoint::EDKDump() // RETURNS: void <br>{ <br>    // _tprintf(TEXT("  Dll: %ls\n  Ept: %hs\n  Gtw: %ls\n  Opt: %ls\n"), <br>    //              m_pszDllName, m_pszEntryPoint, m_pszGwPoint, m_pszOptions ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GWREPORT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1864"></a>GWREPORT.C</h2>
<pre><code>// --gwreport.c----------------------------------------------------------------- <br>//  <br>//  Gateway report functions. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "gwreport.h" <br> <br>#define SZ_MTS_ID               "/c=XX/a=X/p=X/l=X" <br> <br>#define CENTRIES_FIRST  4 <br>#define CENTRIES_NEXT   32 <br> <br>//$--HrCreateEmptyRecipList----------------------------------------------------- <br>// <br>//  Create an empty list of recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrCreateEmptyRecipList(      // RETURNS: return code <br>    OUT    LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPRIVATE("HrCreateEmptyRecipList()\n"); <br> <br>    hr = HrMAPICreateSizedAddressList( <br>        CENTRIES_FIRST, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br>    else <br>    { <br>        (*lppAdrList)-&gt;cEntries = 0; <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrNDRCreateFailedRecipList------------------------------------------------- <br>// <br>//  Create an empty list of failed recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNDRCreateFailedRecipList(         // RETURNS: return code <br>    OUT    LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrNDRCreateFailedRecipList()\n"); <br> <br>    hr = HrCreateEmptyRecipList(lppAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrNDRGetFailedRecipList---------------------------------------------------- <br>// <br>//  Create a failed recipient entry. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNDRGetFailedRecipList(            // RETURNS: return code <br>    IN     LPADRENTRY    lpAdrEntry,        // address entry <br>    IN     ULONG         cExtraProps,       // count of extra properties <br>    IN     LPSPropValue  lpExtraProps,      // extra properties <br>    OUT    ULONG*        lpcFailedProps,    // count of failed properties <br>    OUT    LPSPropValue* lppFailedProps)    // failed properties <br>{ <br>    HRESULT      hr           = NOERROR; <br>    FILETIME     ftReportTime = {0}; <br>    ULONG        i            = 0; <br>    SPropValue   rgProps[9]   = {0}; <br>    ULONG        cValues      = 0; <br>    LPSPropValue lpProps      = NULL; <br>    ULONG        cNewValues   = 0; <br>    LPSPropValue lpNewProps   = NULL; <br>    LPSPropValue lpPropT      = NULL; <br> <br>    DEBUGPUBLIC("HrNDRGetFailedRecipList()\n"); <br> <br>    // <br>    // Get the current time <br>    // <br> <br>    if((cExtraProps &gt; 0) &amp;&amp; (lpExtraProps != NULL)) <br>    { <br>        hr = HrMAPIAppendSPropValues( <br>            lpAdrEntry-&gt;cValues, <br>            lpAdrEntry-&gt;rgPropVals, <br>            cExtraProps, <br>            lpExtraProps, <br>            &amp;cValues, <br>            &amp;lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br>    else <br>    { <br>        cValues = lpAdrEntry-&gt;cValues; <br> <br>        hr = ScDupPropset( <br>            lpAdrEntry-&gt;cValues, <br>            lpAdrEntry-&gt;rgPropVals, <br>    MAPIAllocateBuffer, <br>            &amp;lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    // <br>    // Default any missing properties. <br>    // <br> <br>    lpPropT = LpValFindProp(PR_NDR_REASON_CODE, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_NDR_REASON_CODE)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_NDR_REASON_CODE; <br>        rgProps[i++].Value.l   = 0; <br>    } <br> <br>    lpPropT = LpValFindProp(PR_NDR_DIAG_CODE, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_NDR_DIAG_CODE)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_NDR_DIAG_CODE; <br>        rgProps[i++].Value.l   = -1; <br>    } <br> <br>    lpPropT = LpValFindProp(PR_REPORT_TIME, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_REPORT_TIME)) <br>    { <br>        GetSystemTimeAsFileTime( &amp;ftReportTime); <br> <br>        rgProps[i  ].ulPropTag = PR_REPORT_TIME; <br>        rgProps[i++].Value.ft  = ftReportTime; <br>    } <br> <br>    lpPropT = LpValFindProp(PR_REPORT_TEXT, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_REPORT_TEXT)) <br>    { <br>        rgProps[i  ].ulPropTag  = PR_REPORT_TEXT; <br>        rgProps[i++].Value.LPSZ = TEXT(" "); <br>    } <br> <br>    lpPropT = LpValFindProp(PR_RECIPIENT_NUMBER, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_RECIPIENT_NUMBER)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_RECIPIENT_NUMBER; <br>        rgProps[i++].Value.l   = 1; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED; <br>        rgProps[i++].Value.b   = TRUE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_READ_RECEIPT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_READ_RECEIPT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_READ_RECEIPT_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_NON_RECEIPT_NOTIFICATION_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_NON_RECEIPT_NOTIFICATION_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_NON_RECEIPT_NOTIFICATION_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    if(i &gt; 0) <br>    { <br>        hr = HrMAPIAppendSPropValues( <br>            cValues, <br>            lpProps, <br>            i, <br>            rgProps, <br>            &amp;cNewValues, <br>            &amp;lpNewProps); <br> <br>        MAPIFREEBUFFER(lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        *lpcFailedProps = cNewValues; <br>        *lppFailedProps = lpNewProps; <br>    } <br>    else <br>    { <br>        *lpcFailedProps = cValues; <br>        *lppFailedProps = lpProps; <br>    } <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpProps); <br>        MAPIFREEBUFFER(lpNewProps); <br> <br>        *lpcFailedProps = 0; <br>        *lppFailedProps = NULL; <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrAddToRecipList----------------------------------------------------------- <br>// <br>//  Add a recipient entry to the list of recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrAddToRecipList(            // RETURNS: return code <br>    IN     ULONG         cProps,            // count of properties <br>    IN     LPSPropValue  lpProps,           // properties <br>    IN OUT LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT    hr          = NOERROR; <br>    SCODE      sc          = 0; <br>    ULONG      cOldEntries = 0; <br>    ULONG      cEntries    = 0; <br>    ULONG      cBytes      = 0; <br>    ULONG      i           = 0; <br>    LPADRENTRY lpAdrEntry  = NULL; <br>    LPADRLIST  lpAdrList   = NULL; <br> <br>    DEBUGPRIVATE("HrAddToRecipList()\n"); <br> <br>    cEntries = (*lppAdrList)-&gt;cEntries; <br> <br>    cOldEntries = cEntries; <br> <br>    // <br>    // Grow the address list if necessary. <br>    // <br> <br>    if((cEntries == CENTRIES_FIRST) || <br>       ((cEntries &gt; CENTRIES_FIRST) &amp;&amp; <br>       (((cEntries - CENTRIES_FIRST) % CENTRIES_NEXT) == 0))) <br>    { <br>        cEntries += CENTRIES_NEXT; <br> <br>        cBytes = CbNewADRLIST(cEntries); <br> <br>        sc = MAPIAllocateBuffer(cBytes, (void **)&amp;lpAdrList); <br> <br>        if(FAILED(sc))                            <br>        {                                                    <br>            hr = HR_LOG(E_OUTOFMEMORY);                                  <br>            goto cleanup; <br>        }                                                    <br> <br>        ZeroMemory(lpAdrList, cBytes); <br> <br>        lpAdrEntry = lpAdrList-&gt;aEntries; <br> <br>        // <br>        // Copy existing address entries to the new address list. <br>        // <br> <br>        for(i = 0; i &lt; (*lppAdrList)-&gt;cEntries; i++) <br>        { <br>            lpAdrEntry[i].cValues = <br>                (*lppAdrList)-&gt;aEntries[i].cValues; <br>            lpAdrEntry[i].rgPropVals = <br>                (*lppAdrList)-&gt;aEntries[i].rgPropVals; <br>        } <br> <br>        MAPIFREEBUFFER(*lppAdrList); <br> <br>        *lppAdrList = lpAdrList; <br>    } <br> <br>    // <br>    // Add an address entry to the address list. <br>    // <br> <br>    i = cOldEntries; <br> <br>    (*lppAdrList)-&gt;cEntries = ++i; <br> <br>    i--; <br> <br>    hr = HrMAPISetAddressList( <br>        i, <br>        cProps, <br>        lpProps, <br>        *lppAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrNDRAddToFailedRecipList-------------------------------------------------- <br>// <br>//  Add a recipient entry to the list of failed recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNDRAddToFailedRecipList(          // RETURNS: return code <br>    IN     ULONG         cFailedProps,      // count of failed properties <br>    IN     LPSPropValue  lpFailedProps,     // failed properties <br>    IN OUT LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrNDRAddToFailedRecipList()\n"); <br> <br>    hr = HrAddToRecipList(cFailedProps, lpFailedProps, lppAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrExtractProps------------------------------------------------------------- <br>// <br>//  Get NDR/DR properties from the original message. <br>// <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrExtractProps(              // RETURNS: return code <br>    IN     BOOL          IsNdr,             // report is an NDR, otherwise a DR <br>    IN     LPMESSAGE     lpMessage,         // message <br>    OUT    ULONG*        lpcProps,          // count of properties <br>    OUT    LPSPropValue* lppProps)          // properties <br>{ <br>    HRESULT      hr                     = NOERROR; <br>    SCODE        sc                     = 0; <br>    ULONG        cBytes                 = 0; <br>FILETIME     ftSubmitTime           = {0}; <br>    ULONG        i                      = 0; <br>    ULONG        cValues                = 0; <br>    LPSPropValue lpProps                = NULL; <br>    LPSTR       lpszMessageClass       = NULL; <br>    LPSTR       lpszReportMessageClass = NULL; <br>    LPSTR       lpsz                   = NULL; <br>    ULONG        cch                    = 0; <br> <br>SizedSPropTagArray(18, rgMessagePropTags) = <br>{ <br>18, <br>{ <br>PR_MESSAGE_CLASS, <br>            PR_SUBJECT, <br>            PR_NORMALIZED_SUBJECT, <br>PR_SUBJECT_PREFIX, <br>PR_CLIENT_SUBMIT_TIME, <br>            PR_MTS_ID, <br>            PR_SENDER_NAME, <br>            PR_SENDER_ENTRYID, <br>            PR_DELETE_AFTER_SUBMIT, <br>            PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED, <br>            PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED, <br>            PR_READ_RECEIPT_REQUESTED, <br>            PR_NON_RECEIPT_NOTIFICATION_REQUESTED, <br>            PR_CONTENT_RETURN_REQUESTED, <br>            PR_PRIORITY, <br>            PR_IMPORTANCE, <br>            PR_REPORT_NAME, <br>            PR_REPORT_ENTRYID <br>        } <br>    }; <br> <br>    DEBUGPRIVATE("HrExtractProps()\n"); <br> <br>    // <br>    // Get report properties from the message. <br>    // <br> <br>hr = MAPICALL(lpMessage)-&gt;GetProps( <br>    lpMessage, <br>(LPSPropTagArray)&amp;rgMessagePropTags, <br>fMapiUnicode, <br>&amp;cValues, <br>&amp;lpProps); <br> <br>if(FAILED(hr)) <br>{ <br>        lpProps = NULL; <br> <br>goto cleanup; <br>} <br> <br>    // <br>    // Create report message class <br>    // <br> <br>    if(lpProps[0].ulPropTag == PR_MESSAGE_CLASS) <br>    { <br>        lpszMessageClass = lpProps[0].Value.LPSZ; <br>    } <br> <br>    if(lpszMessageClass == NULL) <br>    { <br>        cch = 0; <br>    } <br>    else <br>    { <br>        cch = lstrlen(lpszMessageClass); <br>    } <br> <br>    if(cch == 0) <br>    { <br>        lpszMessageClass = TEXT("IPM.NOTE"); <br>        cch = lstrlen(lpszMessageClass); <br>    } <br> <br>    cch += lstrlen(TEXT("REPORT.")); <br> <br>    if(IsNdr == TRUE) <br>    { <br>        cch += lstrlen(TEXT(".NDR")); <br>    } <br>    else <br>    { <br>        cch += lstrlen(TEXT(".DR")); <br>    } <br> <br>    cch++; // terminating NULL character <br> <br>    cBytes = cch * sizeof(CHAR); <br> <br>    sc = MAPIAllocateMore(cBytes, lpProps, &amp;lpszReportMessageClass); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    lstrcpy(lpszReportMessageClass, TEXT("REPORT.")); <br>    lstrcat(lpszReportMessageClass, lpszMessageClass); <br>    if(IsNdr == TRUE) <br>    { <br>        lstrcat(lpszReportMessageClass, TEXT(".NDR")); <br>    } <br>    else <br>    { <br>        lstrcat(lpszReportMessageClass, TEXT(".DR")); <br>    } <br> <br>    // <br>    // PR_MESSAGE_CLASS <br>    // <br> <br>lpProps[0].ulPropTag  = PR_MESSAGE_CLASS; <br>    lpProps[0].Value.LPSZ = lpszReportMessageClass; <br> <br>    // <br>    // PR_SUBJECT <br>    // <br> <br>if(lpProps[1].ulPropTag != PR_SUBJECT) <br>    { <br>        cBytes = cbStrLen(""); <br> <br>        sc = MAPIAllocateMore(cBytes, lpProps, &amp;lpsz); <br> <br>        if(FAILED(sc))                            <br>        {                                                    <br>            hr = HR_LOG(E_OUTOFMEMORY);                                  <br>            goto cleanup; <br>        }                                                    <br> <br>        lstrcpy(lpsz, TEXT("")); <br> <br>    lpProps[1].ulPropTag  = PR_SUBJECT; <br>    lpProps[1].Value.LPSZ = lpsz; <br>    } <br> <br>    // <br>    // PR_NORMALIZED_SUBJECT <br>    // <br> <br>if(lpProps[2].ulPropTag != PR_NORMALIZED_SUBJECT) <br>    { <br>        cBytes = cbStrLen(""); <br> <br>        sc = MAPIAllocateMore(cBytes, lpProps, &amp;lpsz); <br> <br>        if(FAILED(sc))                            <br>        {                                                    <br>            hr = HR_LOG(E_OUTOFMEMORY);                                  <br>            goto cleanup; <br>        }                                                    <br> <br>        lstrcpy(lpsz, TEXT("")); <br> <br>    lpProps[2].ulPropTag  = PR_NORMALIZED_SUBJECT; <br>    lpProps[2].Value.LPSZ = lpsz; <br>    } <br> <br>    // <br>    // PR_SUBJECT_PREFIX <br>    // <br> <br>if(lpProps[3].ulPropTag != PR_SUBJECT_PREFIX) <br>    { <br>        cBytes = cbStrLen(""); <br> <br>        sc = MAPIAllocateMore(cBytes, lpProps, &amp;lpsz); <br> <br>        if(FAILED(sc))                            <br>        {                                                    <br>            hr = HR_LOG(E_OUTOFMEMORY);                                  <br>            goto cleanup; <br>        }                                                    <br> <br>        lstrcpy(lpsz, TEXT("")); <br> <br>    lpProps[3].ulPropTag  = PR_SUBJECT_PREFIX; <br>    lpProps[3].Value.LPSZ = lpsz; <br>    } <br> <br>    // <br>    // PR_CLIENT_SUBMIT_TIME <br>    // <br> <br>if(lpProps[4].ulPropTag != PR_CLIENT_SUBMIT_TIME) <br>    { <br>    GetSystemTimeAsFileTime( &amp;ftSubmitTime); <br> <br>    lpProps[4].ulPropTag = PR_CLIENT_SUBMIT_TIME; <br>    lpProps[4].Value.ft  = ftSubmitTime; <br>    } <br> <br>    // <br>    // PR_MTS_SUBJECT_ID <br>    // <br> <br>if(lpProps[5].ulPropTag != PR_MTS_ID) <br>    { <br>        cBytes = cbStrLen(SZ_MTS_ID); <br> <br>        sc = MAPIAllocateMore(cBytes, lpProps, &amp;lpsz); <br> <br>        if(FAILED(sc))                            <br>        {                                                    <br>            hr = HR_LOG(E_OUTOFMEMORY);                                  <br>            goto cleanup; <br>        }                                                    <br> <br>        lstrcpy(lpsz, TEXT(SZ_MTS_ID)); <br> <br>    lpProps[5].ulPropTag     = PR_MTS_ID; <br>    lpProps[5].Value.bin.cb  = cBytes; <br>    lpProps[5].Value.bin.lpb = (LPBYTE) lpsz;  <br>    } <br> <br>    lpProps[5].ulPropTag         = PR_MTS_SUBJECT_ID; <br> <br>    if((lpProps[16].ulPropTag == PR_REPORT_NAME) &amp;&amp; <br>       (lpProps[17].ulPropTag == PR_REPORT_ENTRYID)) <br>    { <br>        lpProps[6].ulPropTag     = PR_SENDER_NAME; <br>        lpProps[6].Value.LPSZ    = lpProps[16].Value.LPSZ; <br> <br>        lpProps[7].ulPropTag     = PR_SENDER_ENTRYID; <br>        lpProps[7].Value.bin.cb  = lpProps[17].Value.bin.cb; <br>        lpProps[7].Value.bin.lpb = lpProps[17].Value.bin.lpb; <br>    } <br> <br>    // <br>    // PR_REPORT_DESTINATION_NAME <br>    // <br> <br>if(lpProps[6].ulPropTag != PR_SENDER_NAME) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    lpProps[6].ulPropTag         = PR_REPORT_DESTINATION_NAME; <br> <br>    // <br>    // PR_REPORT_DESTINATION_ENTRYID <br>    // <br> <br>if(lpProps[7].ulPropTag != PR_SENDER_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    lpProps[7].ulPropTag         = PR_REPORT_DESTINATION_ENTRYID; <br> <br>    // <br>    // PR_DELETE_AFTER_SUBMIT <br>    // <br> <br>    lpProps[8].ulPropTag         = PR_DELETE_AFTER_SUBMIT; <br>    lpProps[8].Value.b           = TRUE; <br> <br>    // <br>    // PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED <br>    // <br> <br>if(lpProps[9].ulPropTag != PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED) <br>    { <br>        lpProps[9].ulPropTag = PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED; <br>        lpProps[9].Value.b   = TRUE; <br>    } <br> <br>    // <br>    // PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED <br>    // <br> <br>if(lpProps[10].ulPropTag != PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED) <br>    { <br>        lpProps[10].ulPropTag = PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED; <br>        lpProps[10].Value.b   = FALSE; <br>    } <br> <br>    // <br>    // PR_READ_RECEIPT_REQUESTED <br>    // <br> <br>if(lpProps[11].ulPropTag != PR_READ_RECEIPT_REQUESTED) <br>    { <br>        lpProps[11].ulPropTag = PR_READ_RECEIPT_REQUESTED; <br>        lpProps[11].Value.b   = FALSE; <br>    } <br> <br>    // <br>    // PR_NON_RECEIPT_NOTIFICATION_REQUESTED <br>    // <br> <br>if(lpProps[12].ulPropTag != PR_NON_RECEIPT_NOTIFICATION_REQUESTED) <br>    { <br>        lpProps[12].ulPropTag = PR_NON_RECEIPT_NOTIFICATION_REQUESTED; <br>        lpProps[12].Value.b   = FALSE; <br>    } <br> <br>    // <br>    // PR_CONTENT_RETURN_REQUESTED <br>    // <br> <br>if(lpProps[13].ulPropTag != PR_CONTENT_RETURN_REQUESTED) <br>    { <br>        lpProps[13].ulPropTag = PR_CONTENT_RETURN_REQUESTED; <br>        lpProps[13].Value.b   = TRUE; <br>    } <br> <br>    // <br>    // PR_PRIORITY <br>    // <br> <br>if(lpProps[14].ulPropTag != PR_PRIORITY) <br>    { <br>        lpProps[14].ulPropTag = PR_PRIORITY; <br>        lpProps[14].Value.l   = PRIO_NORMAL; <br>    } <br> <br>    // <br>    // PR_IMPORTANCE <br>    // <br> <br>if(lpProps[15].ulPropTag != PR_IMPORTANCE) <br>    { <br>        lpProps[15].ulPropTag = PR_IMPORTANCE; <br>        lpProps[15].Value.l   = IMPORTANCE_NORMAL; <br>    } <br> <br>    *lpcProps = cValues - 2; <br>    *lppProps = lpProps; <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpProps); <br> <br>        *lpcProps = 0; <br>        *lppProps = NULL; <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrNDRGetFailedProps---------------------------------------------------------- <br>// <br>//  Get NDR properties from the original message. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNDRGetFailedProps(                  // RETURNS: return code <br>    IN     LPMESSAGE     lpMessage,         // message <br>    OUT    ULONG*        lpcProps,          // count of properties <br>    OUT    LPSPropValue* lppProps)          // properties <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrNDRGetFailedProps()\n"); <br> <br>    hr = HrExtractProps(TRUE, lpMessage, lpcProps, lppProps); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrXDRCreate---------------------------------------------------------------- <br>// <br>//  Create a non-delivery or delivery report. <br>// <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrXDRCreate(                 // RETURNS: return code <br>    IN     LPADRBOOK     lpAdrBook,         // address book <br>    IN     LPMAPIFOLDER  lpFolder,          // folder <br>    IN     LPMESSAGE     lpMessage,         // message <br>    IN     LPADRLIST     lpAdrList,         // address list <br>    IN     ULONG         cProps,            // count of properties <br>    IN     LPSPropValue  lpProps,           // properties <br>    OUT    LPMESSAGE*    lppReport)         // report <br>{ <br>    HRESULT      hr              = NOERROR; <br>    LPMESSAGE    lpReport        = NULL; <br>    ULONG        ulAttachmentNum = 0; <br>    LPATTACH     lpAttach        = NULL; <br>    LPMESSAGE    lpContent       = NULL; <br>    BOOL         fReturnContent  = FALSE; <br>    SPropValue   rgProps[1]      = {0}; <br>    LPSPropValue lpPropT         = NULL; <br> <br>    DEBUGPRIVATE("HrXDRCreate()\n"); <br> <br>    *lppReport = NULL; <br> <br>    // <br>    // Create a message <br>    // <br> <br>    hr = MAPICALL(lpFolder)-&gt;CreateMessage( <br>        lpFolder, <br>        NULL, <br>        MAPI_DEFERRED_ERRORS, <br>        &amp;lpReport); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Return content if available and requested. <br>    // <br> <br>    lpPropT = LpValFindProp( <br>        PR_CONTENT_RETURN_REQUESTED, cProps, lpProps); <br> <br>    if(lpPropT == NULL) <br>    { <br>        fReturnContent = TRUE; <br>    } <br>    else if(lpPropT-&gt;ulPropTag != PR_CONTENT_RETURN_REQUESTED) <br>    { <br>        lpPropT-&gt;ulPropTag = PR_CONTENT_RETURN_REQUESTED; <br>        lpPropT-&gt;Value.b   = TRUE; <br>    } <br>    else <br>    { <br>        fReturnContent = lpPropT-&gt;Value.b; <br>    } <br> <br>    if((lpMessage != NULL) &amp;&amp; (fReturnContent == TRUE)) <br>    { <br>        // <br>        // Create an embedded message <br>        // <br> <br>        hr = MAPICALL(lpReport)-&gt;CreateAttach( <br>            lpReport, <br>            NULL, <br>            (ULONG)0, <br>            &amp;ulAttachmentNum, <br>            &amp;lpAttach); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        rgProps[0].ulPropTag = PR_ATTACH_METHOD; <br>        rgProps[0].Value.ul  = ATTACH_EMBEDDED_MSG; <br> <br>        hr = MAPICALL(lpAttach)-&gt;SetProps( <br>            lpAttach, <br>            1, <br>            rgProps, <br>            NULL); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        hr = MAPICALL(lpAttach)-&gt;OpenProperty( <br>            lpAttach, <br>            PR_ATTACH_DATA_OBJ, <br>            (LPIID)&amp;IID_IMessage, <br>            0, <br>            MAPI_CREATE|MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            (LPUNKNOWN *)&amp;lpContent); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    if(lpAdrList != NULL) <br>    { <br>        hr = MAPICALL(lpReport)-&gt;ModifyRecipients( <br>            lpReport, <br>            0, <br>            lpAdrList); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    // <br>    // Set envelope properties <br>    // <br> <br>    if((cProps &gt; 0) &amp;&amp; (lpProps != NULL)) <br>    { <br>        hr = MAPICALL(lpReport)-&gt;SetProps( <br>            lpReport, <br>            cProps, <br>            lpProps, <br>            NULL); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    if((lpMessage != NULL) &amp;&amp; (fReturnContent == TRUE)) <br>    { <br>        hr = MAPICALL(lpMessage)-&gt;CopyTo( <br>            lpMessage, <br>            0, <br>            NULL, <br>            NULL, <br>            0, <br>            NULL, <br>            (LPIID)&amp;IID_IMessage, <br>            lpContent, <br>            0, <br>            NULL); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        if(hr == MAPI_W_ERRORS_RETURNED) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = MAPICALL(lpContent)-&gt;SaveChanges(lpContent, KEEP_OPEN_READWRITE); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        hr = MAPICALL(lpAttach)-&gt;SaveChanges(lpAttach, KEEP_OPEN_READWRITE); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    hr = MAPICALL(lpReport)-&gt;SaveChanges(lpReport, KEEP_OPEN_READWRITE); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    *lppReport = lpReport; <br> <br>cleanup: <br> <br>    ULRELEASE(lpContent); <br> <br>    ULRELEASE(lpAttach); <br> <br>    if(FAILED(hr)) <br>    { <br>        ULRELEASE(lpReport); <br> <br>        *lppReport = NULL; <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrNDRCreate---------------------------------------------------------------- <br>// <br>//  Create a non-delivery report. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNDRCreate(                        // RETURNS: return code <br>    IN     LPADRBOOK     lpAdrBook,         // address book <br>    IN     LPMAPIFOLDER  lpFolder,          // folder <br>    IN     LPMESSAGE     lpMessage,         // message <br>    IN     LPADRLIST     lpAdrList,         // address list <br>    IN     ULONG         cProps,            // count of properties <br>    IN     LPSPropValue  lpProps,           // properties <br>    OUT    LPMESSAGE*    lppReport)         // report <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrNDRCreate()\n"); <br> <br>    hr = HrXDRCreate( <br>        lpAdrBook, <br>        lpFolder, <br>        lpMessage, <br>        lpAdrList, <br>        cProps, <br>        lpProps, <br>        lppReport); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrDRCreateDeliveredRecipList----------------------------------------------- <br>// <br>//  Create an empty list of delivered recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDRCreateDeliveredRecipList(       // RETURNS: return code <br>    OUT    LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrDRCreateDeliveredRecipList()\n"); <br> <br>    hr = HrCreateEmptyRecipList(lppAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrDRGetDeliveredRecip-------------------------------------------------- <br>// <br>//  Create a delivered recipient entry. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDRGetDeliveredRecip(          // RETURNS: return code <br>    IN     LPADRENTRY    lpAdrEntry,        // address entry <br>    IN     ULONG         cExtraProps,       // count of extra properties <br>    IN     LPSPropValue  lpExtraProps,      // extra properties <br>    OUT    ULONG*        lpcDeliveredProps, // count of delivered properties <br>    OUT    LPSPropValue* lppDeliveredProps) // delivered properties <br>{ <br>    HRESULT      hr            = NOERROR; <br>    FILETIME     ftReportTime  = {0}; <br>    FILETIME     ftDeliverTime = {0}; <br>    ULONG        i             = 0; <br>    SPropValue   rgProps[9]    = {0}; <br>    ULONG        cValues       = 0; <br>    LPSPropValue lpProps       = NULL; <br>    ULONG        cNewValues    = 0; <br>    LPSPropValue lpNewProps    = NULL; <br>    LPSPropValue lpPropT       = NULL; <br> <br>    DEBUGPUBLIC("HrDRGetDeliveredRecip()\n"); <br> <br>    if((cExtraProps &gt; 0) &amp;&amp; (lpExtraProps != NULL)) <br>    { <br>        hr = HrMAPIAppendSPropValues( <br>            lpAdrEntry-&gt;cValues, <br>            lpAdrEntry-&gt;rgPropVals, <br>            cExtraProps, <br>            lpExtraProps, <br>            &amp;cValues, <br>            &amp;lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br>    else <br>    { <br>        cValues = lpAdrEntry-&gt;cValues; <br> <br>        hr = ScDupPropset( <br>            lpAdrEntry-&gt;cValues, <br>            lpAdrEntry-&gt;rgPropVals, <br>    MAPIAllocateBuffer, <br>            &amp;lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br>    } <br> <br>    // <br>    // Default any missing properties. <br>    // <br> <br>    lpPropT = LpValFindProp(PR_REPORT_TIME, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_REPORT_TIME)) <br>    { <br>        GetSystemTimeAsFileTime( &amp;ftReportTime); <br> <br>        rgProps[i  ].ulPropTag = PR_REPORT_TIME; <br>        rgProps[i++].Value.ft  = ftReportTime; <br>    } <br> <br>    lpPropT = LpValFindProp(PR_REPORT_TEXT, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_REPORT_TEXT)) <br>    { <br>        rgProps[i  ].ulPropTag  = PR_REPORT_TEXT; <br>        rgProps[i++].Value.LPSZ = TEXT(" "); <br>    } <br> <br>    lpPropT = LpValFindProp(PR_DELIVER_TIME, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_DELIVER_TIME)) <br>    { <br>        GetSystemTimeAsFileTime( &amp;ftDeliverTime); <br> <br>        rgProps[i  ].ulPropTag = PR_DELIVER_TIME; <br>        rgProps[i++].Value.ft  = ftDeliverTime; <br>    } <br> <br>    lpPropT = LpValFindProp(PR_REPORT_TEXT, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_REPORT_TEXT)) <br>    { <br>        rgProps[i  ].ulPropTag  = PR_REPORT_TEXT; <br>        rgProps[i++].Value.LPSZ = TEXT(" "); <br>    } <br> <br>    lpPropT = LpValFindProp(PR_RECIPIENT_NUMBER, cValues, lpProps); </code></pre>
<p>
</p>
<pre><code><br>    if((lpPropT == NULL) || (lpPropT-&gt;ulPropTag != PR_RECIPIENT_NUMBER)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_RECIPIENT_NUMBER; <br>        rgProps[i++].Value.l   = 1; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED; <br>        rgProps[i++].Value.b   = TRUE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_READ_RECEIPT_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_READ_RECEIPT_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_READ_RECEIPT_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_NON_RECEIPT_NOTIFICATION_REQUESTED, cValues, lpProps); <br> <br>    if((lpPropT == NULL) || <br>       (lpPropT-&gt;ulPropTag != PR_NON_RECEIPT_NOTIFICATION_REQUESTED)) <br>    { <br>        rgProps[i  ].ulPropTag = PR_NON_RECEIPT_NOTIFICATION_REQUESTED; <br>        rgProps[i++].Value.b   = FALSE; <br>    } <br> <br>    if(i &gt; 0) <br>    { <br>        hr = HrMAPIAppendSPropValues( <br>            cValues, <br>            lpProps, <br>            i, <br>            rgProps, <br>            &amp;cNewValues, <br>            &amp;lpNewProps); <br> <br>        MAPIFREEBUFFER(lpProps); <br> <br>        if(FAILED(hr)) <br>        { <br>            goto cleanup; <br>        } <br> <br>        *lpcDeliveredProps = cNewValues; <br>        *lppDeliveredProps = lpNewProps; <br>    } <br>    else <br>    { <br>        *lpcDeliveredProps = cValues; <br>        *lppDeliveredProps = lpProps; <br>    } <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpProps); <br>        MAPIFREEBUFFER(lpNewProps); <br> <br>        *lpcDeliveredProps = 0; <br>        *lppDeliveredProps = NULL; <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrDRAddToDeliveredRecipList------------------------------------------------ <br>// <br>//  Add a recipient entry to the list of delivered recipients. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDRAddToDeliveredRecipList(        // RETURNS: return code <br>    IN     ULONG         cDeliveredProps,   // count of delivered properties <br>    IN     LPSPropValue  lpDeliveredProps,  // delivered properties <br>    IN OUT LPADRLIST*    lppAdrList)        // address list <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrDRAddToDeliveredRecipList()\n"); <br> <br>    hr = HrAddToRecipList(cDeliveredProps, lpDeliveredProps, lppAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrDRGetProps----------------------------------------------------------- <br>// <br>//  Get DR properties from the original message. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDRGetProps(                   // RETURNS: return code <br>    IN     LPMESSAGE     lpMessage,         // message <br>    OUT    ULONG*        lpcProps,          // count of properties <br>    OUT    LPSPropValue* lppProps)          // properties <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrDRGetProps()\n"); <br> <br>    hr = HrExtractProps(FALSE, lpMessage, lpcProps, lppProps); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrDRCreate----------------------------------------------------------------- <br>// <br>//  Create a delivery report. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDRCreate(                         // RETURNS: return code <br>    IN     LPADRBOOK     lpAdrBook,         // address book <br>    IN     LPMAPIFOLDER  lpFolder,          // folder <br>    IN     LPMESSAGE     lpMessage,         // message <br>    IN     LPADRLIST     lpAdrList,         // address list <br>    IN     ULONG         cProps,            // count of properties <br>    IN     LPSPropValue  lpProps,           // properties <br>    OUT    LPMESSAGE*    lppReport)         // report <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPUBLIC("HrDRCreate()\n"); <br> <br>    hr = HrXDRCreate( <br>        lpAdrBook, <br>        lpFolder, <br>        lpMessage, <br>        lpAdrList, <br>        cProps, <br>        lpProps, <br>        lppReport); <br> <br>    RETURN(hr); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFIND.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1834"></a>IFIND.C</h2>
<pre><code>// --ifind.c------------------------------------------------------------------ <br>//  <br>//  Module containing FIND functions for various folders. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>#include "ifind.chk" <br> <br>//$--HrMAPIFindInbox---------------------------------------------------------- <br>//  Find IPM inbox folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPIFindInbox(              // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // Entry ID of IPM inbox <br>{ <br>    HRESULT hr  = NOERROR; <br>    HRESULT hrT = NOERROR; <br>    SCODE   sc  = 0; <br> <br>    DEBUGPUBLIC("HrMAPIFindInbox()"); <br> <br>    hr = CHK_HrMAPIFindInbox( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the entry ID of the Inbox from the message store <br>    hrT = MAPICALL(lpMdb)-&gt;GetReceiveFolder( <br>        lpMdb, <br>        TEXT("IPM"), <br>        fMapiUnicode, <br>        lpcbeid, <br>        lppeid, <br>        NULL); <br> <br>    if(FAILED(hrT)) <br>    { <br>        if(hrT == MAPI_E_NOT_FOUND) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>    } <br> <br>    ASSERTERROR(*lpcbeid != 0, "ZERO length entry ID"); <br> <br>    ASSERTERROR(*lppeid != NULL, "NULL entry ID"); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPIFindOutbox--------------------------------------------------------- <br>//  Find IPM outbox folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPIFindOutbox(             // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // Entry ID of IPM outbox <br>{ <br>    HRESULT       hr          = NOERROR; <br>    HRESULT       hrT         = NOERROR; <br>    SCODE         sc          = 0; <br>    ULONG         cValues     = 0; <br>    LPSPropValue  lpPropValue = NULL; <br>    ULONG         cbeid       = 0; <br>    SPropTagArray rgPropTag   = { 1, { PR_IPM_OUTBOX_ENTRYID } }; <br>     <br>    DEBUGPUBLIC("HrMAPIFindOutbox()"); <br> <br>    hr = CHK_HrMAPIFindOutbox( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the outbox entry ID property.  <br>    hrT = MAPICALL(lpMdb)-&gt;GetProps( <br>        lpMdb, <br>        &amp;rgPropTag, <br>        fMapiUnicode, <br>        &amp;cValues, <br>        &amp;lpPropValue); <br> <br>    if(hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        if((lpPropValue != NULL) &amp;&amp; (lpPropValue-&gt;Value.ul == MAPI_E_NOT_FOUND)) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        goto cleanup; <br>    } <br> <br>    if(FAILED(hrT)) <br>    { <br>        lpPropValue = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(cValues != 0, "ZERO cValues variable"); <br> <br>    ASSERTERROR(lpPropValue != NULL, "NULL lpPropValue variable"); <br> <br>    // Check to make sure we got the right property. <br>    if (lpPropValue-&gt;ulPropTag != PR_IPM_OUTBOX_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbeid = lpPropValue-&gt;Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cbeid, (void **)lppeid); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    // Copy outbox Entry ID <br>    CopyMemory( <br>        *lppeid, <br>        lpPropValue-&gt;Value.bin.lpb, <br>        cbeid); <br> <br>    *lpcbeid = cbeid; <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpPropValue); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPIFindIPMSubtree-------------------------------------------------------- <br>//  Find IPM subtree folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPIFindIPMSubtree(            // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // entry ID of IPM subtree <br>{ <br>    HRESULT       hr          = NOERROR; <br>    HRESULT       hrT         = NOERROR; <br>    SCODE         sc          = 0; <br>    ULONG         cValues     = 0; <br>    LPSPropValue  lpPropValue = NULL; <br>    ULONG         cbeid       = 0; <br>    SPropTagArray rgPropTag   = { 1, { PR_IPM_SUBTREE_ENTRYID } }; <br>     <br>    DEBUGPUBLIC("HrMAPIFindIPMSubtree()"); <br> <br>    hr = CHK_HrMAPIFindIPMSubtree( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the subtree entry ID property.  <br>    hrT = MAPICALL(lpMdb)-&gt;GetProps( <br>        lpMdb, <br>        &amp;rgPropTag, <br>        fMapiUnicode, <br>        &amp;cValues, <br>        &amp;lpPropValue); <br> <br>    if(hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        if((lpPropValue != NULL) &amp;&amp; (lpPropValue-&gt;Value.ul == MAPI_E_NOT_FOUND)) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        goto cleanup; <br>    } <br> <br>    if(FAILED(hrT)) <br>    { <br>        lpPropValue = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(cValues != 0, "ZERO cValues variable"); <br> <br>    ASSERTERROR(lpPropValue != NULL, "NULL lpPropValue variable"); <br> <br>    // Check to make sure we got the right property. <br>    if (lpPropValue-&gt;ulPropTag != PR_IPM_SUBTREE_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbeid = lpPropValue-&gt;Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cbeid, (void **)lppeid); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    // Copy subtree entry ID <br>    CopyMemory( <br>        *lppeid, <br>        lpPropValue-&gt;Value.bin.lpb, <br>        cbeid); <br> <br>    *lpcbeid = cbeid; <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpPropValue); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrGWFindMtsOutFolder------------------------------------------------------------ <br>//  Find MTS-OUT folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWFindMtsOutFolder(                // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // entry ID of MTS-OUT <br>{ <br>    HRESULT       hr          = NOERROR; <br>    HRESULT       hrT         = NOERROR; <br>    SCODE         sc          = 0; <br>    ULONG         cValues     = 0; <br>    LPSPropValue  lpPropValue = NULL; <br>    ULONG         cbeid       = 0; <br>    SPropTagArray rgPropTag   = { 1, { PR_GW_MTSOUT_ENTRYID } }; <br>     <br>    DEBUGPUBLIC("HrGWFindMtsOutFolder()"); <br> <br>    hr = CHK_HrGWFindMtsOutFolder( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the entry ID property.  <br>    hrT = MAPICALL(lpMdb)-&gt;GetProps( <br>        lpMdb, <br>        &amp;rgPropTag, <br>        fMapiUnicode, <br>        &amp;cValues, <br>        &amp;lpPropValue); <br> <br>    if(hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        if((lpPropValue != NULL) &amp;&amp; (lpPropValue-&gt;Value.ul == MAPI_E_NOT_FOUND)) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        goto cleanup; <br>    } <br> <br>    if(FAILED(hrT)) <br>    { <br>        lpPropValue = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(cValues != 0, "ZERO cValues variable"); <br> <br>    ASSERTERROR(lpPropValue != NULL, "NULL lpPropValue variable"); <br> <br>    // Check to make sure we got the right property. <br>    if (lpPropValue-&gt;ulPropTag != PR_GW_MTSOUT_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbeid = lpPropValue-&gt;Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cbeid, (void **)lppeid); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    // Copy entry ID <br>    CopyMemory( <br>        *lppeid, <br>        lpPropValue-&gt;Value.bin.lpb, <br>        cbeid); <br> <br>    *lpcbeid = cbeid; <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpPropValue); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrGWFindMtsInFolder------------------------------------------------------------- <br>//  Find MTS-IN folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWFindMtsInFolder(                 // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // entry ID of MTS-IN <br>{ <br>    HRESULT       hr          = NOERROR; <br>    HRESULT       hrT         = NOERROR; <br>    SCODE         sc          = 0; <br>    ULONG         cValues     = 0; <br>    LPSPropValue  lpPropValue = NULL; <br>    ULONG         cbeid       = 0; <br>    SPropTagArray rgPropTag   = { 1, { PR_GW_MTSIN_ENTRYID } }; <br>     <br>    DEBUGPUBLIC("HrGWFindMtsInFolder()"); <br> <br>    hr = CHK_HrGWFindMtsInFolder( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the entry ID property.  <br>    hrT = MAPICALL(lpMdb)-&gt;GetProps( <br>        lpMdb, <br>        &amp;rgPropTag, <br>        fMapiUnicode, <br>        &amp;cValues, <br>        &amp;lpPropValue); <br> <br>    if(hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        if((lpPropValue != NULL) &amp;&amp; (lpPropValue-&gt;Value.ul == MAPI_E_NOT_FOUND)) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        goto cleanup; <br>    } <br> <br>    if(FAILED(hrT)) <br>    { <br>        lpPropValue = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(cValues != 0, "ZERO cValues variable"); <br> <br>    ASSERTERROR(lpPropValue != NULL, "NULL lpPropValue variable"); <br> <br>    // Check to make sure we got the right property. <br>    if (lpPropValue-&gt;ulPropTag != PR_GW_MTSIN_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbeid = lpPropValue-&gt;Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cbeid, (void **)lppeid); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    // Copy entry ID <br>    CopyMemory( <br>        *lppeid, <br>        lpPropValue-&gt;Value.bin.lpb, <br>        cbeid); <br> <br>    *lpcbeid = cbeid; <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpPropValue); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrFindExchangePublicStore------------------------------------------------------- <br>//  Find public store root folder. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrFindExchangePublicStore(           // RETURNS: return code <br>    IN LPMDB lpMdb,                     // pointer to message store <br>    OUT ULONG *lpcbeid,                 // count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // entry ID of public store <br>{ <br>    HRESULT       hr          = NOERROR; <br>    HRESULT       hrT         = NOERROR; <br>    SCODE         sc          = 0; <br>    ULONG         cValues     = 0; <br>    LPSPropValue  lpPropValue = NULL; <br>    ULONG         cbeid       = 0; <br>    SPropTagArray rgPropTag   = { 1, { PR_NON_IPM_SUBTREE_ENTRYID } }; <br>     <br>    DEBUGPUBLIC("HrFindExchangePublicStore()"); <br> <br>    hr = CHK_HrFindExchangePublicStore( <br>        lpMdb, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>    // Get the entry ID property.  <br>    hrT = MAPICALL(lpMdb)-&gt;GetProps( <br>        lpMdb, <br>        &amp;rgPropTag, <br>        fMapiUnicode, <br>        &amp;cValues, <br>        &amp;lpPropValue); <br> <br>    if(hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        if((lpPropValue != NULL) &amp;&amp; (lpPropValue-&gt;Value.ul == MAPI_E_NOT_FOUND)) <br>        { <br>            hr = HR_LOG(MAPI_E_NOT_FOUND); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        goto cleanup; <br>    } <br> <br>    if(FAILED(hrT)) <br>    { <br>        lpPropValue = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(cValues != 0, "ZERO cValues variable"); <br> <br>    ASSERTERROR(lpPropValue != NULL, "NULL lpPropValue variable"); <br> <br>    // Check to make sure we got the right property. <br>    if (lpPropValue-&gt;ulPropTag != PR_NON_IPM_SUBTREE_ENTRYID) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbeid = lpPropValue-&gt;Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cbeid, (void **)lppeid); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    // Copy entry ID <br>    CopyMemory( <br>        *lppeid, <br>        lpPropValue-&gt;Value.bin.lpb, <br>        cbeid); <br> <br>    *lpcbeid = cbeid; <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpPropValue); <br> <br>    RETURN(hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

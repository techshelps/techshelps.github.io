<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXCHPROF.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1860"></a>EXCHPROF.C</h2>
<pre><code>// --exchprof.c----------------------------------------------------------------- <br>// <br>// Functions for installing Exchange objects. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>#include "exchprof.chk" <br> <br>#define lpszServerPlaceHolder           ((LPSTR)-1) <br>#define lpszObjectPlaceHolder           ((LPSTR)-2) <br>#define lpszDisplayNamePlaceHolder      ((LPSTR)-3) <br>#define lpszProfileVersionPlaceHolder   ((LPSTR)-4) <br> <br>typedef struct  <br>{ <br>    LPSTR  lpszSection; <br>    LPSTR  lpszKey; <br>    ULONG   ulKey; <br>    LPSTR  lpszValue; <br>} SERVICESINIREC; <br> <br>//$--aGwServicesIni------------------------------------------------------------- <br>//  Structure defines data to be written into MAPISVC.INF to create gateway <br>//  service. <br>// ----------------------------------------------------------------------------- <br>static SERVICESINIREC aGwServicesIni[] = <br>{ <br>    {"Services",                 "MSEMS_EdkGateway", 0L,                    "Microsoft Exchange Gateway Profile"}, <br> <br>    {"MSEMS_EdkGateway",         NULL,        PR_DISPLAY_NAME,              "Microsoft Exchange Gateway"}, <br>    {"MSEMS_EdkGateway",         "Providers", 0L,                           "MSEMS_DSA_EdkGateway, MSEMS_MDB_EdkGateway, MSEMS_EdkGateway_Public"}, <br>    {"MSEMS_EdkGateway",         "Sections",  0L,                           "MSEMS_EdkGateway_Section"}, <br>    {"MSEMS_EdkGateway",         NULL,        PR_SERVICE_DLL_NAME,          "emsui.dll"}, <br>    {"MSEMS_EdkGateway",         NULL,        PR_SERVICE_ENTRY_NAME,        "EMSCfg"}, <br> <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_DISPLAY_NAME,              "Public Folders"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_PROVIDER_DISPLAY,          "Microsoft Exchange Message Store"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_RESOURCE_TYPE,             "MAPI_STORE_PROVIDER"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_PROVIDER_DLL_NAME,         "EMSMDB.DLL"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_PROFILE_SERVER,            lpszServerPlaceHolder}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_RESOURCE_FLAGS,            "STATUS_NO_DEFAULT_STORE"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_PROFILE_OPEN_FLAGS,        "06000000"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_PROFILE_TYPE,              "03000000"}, <br>    {"MSEMS_EdkGateway_Public",  NULL,        PR_MDB_PROVIDER,              "78b2fa70aff711cd9bc800aa002fc45a"}, <br> <br>    {"MSEMS_DSA_EdkGateway",     NULL,        PR_DISPLAY_NAME,              "Microsoft Exchange Directory Service"}, <br>    {"MSEMS_DSA_EdkGateway",     NULL,        PR_PROVIDER_DISPLAY,          "Microsoft Exchange Directory Service"}, <br>    {"MSEMS_DSA_EdkGateway",     NULL,        PR_PROVIDER_DLL_NAME,         "emsabp.dll"}, <br>    {"MSEMS_DSA_EdkGateway",     NULL,        PR_RESOURCE_TYPE,             "23000000"}, <br> <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_DISPLAY_NAME,              "Private Folders"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_PROVIDER_DISPLAY,          "Microsoft Exchange Message Store"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_PROVIDER_DLL_NAME,         "emsmdb.dll"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_RESOURCE_TYPE,             "21000000"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_RESOURCE_FLAGS,            "STATUS_PRIMARY_IDENTITY|STATUS_DEFAULT_STORE|STATUS_PRIMARY_STORE"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_PROFILE_SERVER,            lpszServerPlaceHolder}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_PROFILE_OPEN_FLAGS,        "00000000"}, <br>    {"MSEMS_MDB_EdkGateway",     NULL,        PR_PROFILE_MAILBOX,           lpszObjectPlaceHolder}, <br> <br>    {"MSEMS_EdkGateway_Section", "UID",       0L,                           "13DBB0C8AA05101A9BB000AA002FC45A"}, // pbGlobalProfileSectionGuid <br>    {"MSEMS_EdkGateway_Section", NULL,        PR_PROFILE_VERSION,           lpszProfileVersionPlaceHolder}, <br>    {"MSEMS_EdkGateway_Section", NULL,        PR_PROFILE_TRANSPORT_FLAGS,   "00000000"}, <br>    {"MSEMS_EdkGateway_Section", NULL,        PR_PROFILE_CONNECT_FLAGS,     "01000000"}, <br>    {"MSEMS_EdkGateway_Section", NULL,        PR_PROFILE_HOME_SERVER,       lpszServerPlaceHolder}, <br>    {"MSEMS_EdkGateway_Section", NULL,        PR_PROFILE_USER,              lpszObjectPlaceHolder}, <br> <br>    {NULL, NULL, 0L, NULL} <br>}; <br> <br>static SERVICESINIREC aMbServicesIni[] = <br>{ <br>{"Services",                 "MSEMS_EdkMbAgent", 0L, "Microsoft Exchange Mailbox Agent Profile"},  <br> <br>{"MSEMS_EdkMbAgent",         NULL,        PR_DISPLAY_NAME,            "Microsoft Exchange Mailbox Agent"},  <br>{"MSEMS_EdkMbAgent",         "Providers", 0L,                         "MSEMS_EdkMbAgent_DSA, MSEMS_EdkMbAgent_MDB, MSEMS_EdkMbAgent_Public, MSEMS_EdkMbAgent_MSX"},  <br>{"MSEMS_EdkMbAgent",         "Sections",  0L,                         "MSEMS_EdkMbAgent_Section"},  <br>{"MSEMS_EdkMbAgent",         NULL,        PR_SERVICE_DLL_NAME,        "emsui.dll"},  <br>{"MSEMS_EdkMbAgent",         NULL,        PR_SERVICE_SUPPORT_FILES,   "emsui.dll,emsabp.dll,emsmdb.dll,emsuix.dll"},  <br>{"MSEMS_EdkMbAgent",         NULL,        PR_SERVICE_ENTRY_NAME,      "EMSCfg"},  <br>{"MSEMS_EdkMbAgent",         NULL,        PR_RESOURCE_FLAGS,          "SERVICE_SINGLE_COPY"},  <br> <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_DISPLAY_NAME,            "Microsoft Exchange Directory Service"}, <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_PROVIDER_DISPLAY,        "Microsoft Exchange Directory Service"}, <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_PROFILE_HOME_SERVER,     lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_PROFILE_SERVER,          lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_PROVIDER_DLL_NAME,       "emsabp.dll"}, <br>    {"MSEMS_EdkMbAgent_DSA",     NULL,        PR_RESOURCE_TYPE,           "MAPI_AB_PROVIDER"}, <br> <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_DISPLAY_NAME,            "Private Folders"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROVIDER_DISPLAY,        "Microsoft Exchange Message Store"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROVIDER_DLL_NAME,       "EMSMDB.DLL"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_RESOURCE_TYPE,           "MAPI_STORE_PROVIDER"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_RESOURCE_FLAGS,          "STATUS_PRIMARY_IDENTITY|STATUS_DEFAULT_STORE|STATUS_PRIMARY_STORE"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROFILE_OPEN_FLAGS,      "0C000000"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROFILE_TYPE,            "01000000"},  <br>{"MSEMS_EdkMbAgent_MDB",     NULL,        PR_MDB_PROVIDER,            "5494A1C0297F101BA58708002B2A2517"},  <br>    {"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROFILE_SERVER,          lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_MDB",     NULL,        PR_PROFILE_MAILBOX,         lpszObjectPlaceHolder}, <br> <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_DISPLAY_NAME,            "Microsoft Exchange Transport"},  <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_PROVIDER_DISPLAY,        "Microsoft Exchange Transport"},  <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_PROVIDER_DLL_NAME,       "EMSMDB.DLL"},  <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_RESOURCE_TYPE,           "MAPI_TRANSPORT_PROVIDER"},  <br>{"MSEMS_EdkMbAgent_MSX",     NULL,        PR_PROFILE_OPEN_FLAGS,      "00000000"},  <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_PROFILE_SERVER,          lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_MSX",     NULL,        PR_PROFILE_MAILBOX,         lpszObjectPlaceHolder}, <br> <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_DISPLAY_NAME,            "Public Folders"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_PROVIDER_DISPLAY,        "Microsoft Exchange Message Store"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_RESOURCE_TYPE,           "MAPI_STORE_PROVIDER"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_PROVIDER_DLL_NAME,       "EMSMDB.DLL"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_PROFILE_SERVER,          lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_RESOURCE_FLAGS,          "STATUS_NO_DEFAULT_STORE"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_PROFILE_OPEN_FLAGS,      "06000000"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_PROFILE_TYPE,            "03000000"}, <br>    {"MSEMS_EdkMbAgent_Public",  NULL,        PR_MDB_PROVIDER,            "78b2fa70aff711cd9bc800aa002fc45a"}, <br> <br>    {"MSEMS_EdkMbAgent_Section", "UID",       0L,                         "13DBB0C8AA05101A9BB000AA002FC45A"}, // pbGlobalProfileSectionGuid <br>    {"MSEMS_EdkMbAgent_Section", NULL,        PR_PROFILE_VERSION,         lpszProfileVersionPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_Section", NULL,        PR_PROFILE_TRANSPORT_FLAGS, "00000000"}, <br>    {"MSEMS_EdkMbAgent_Section", NULL,        PR_PROFILE_CONNECT_FLAGS,   "03000000"}, <br>    {"MSEMS_EdkMbAgent_Section", NULL,        PR_PROFILE_HOME_SERVER,     lpszServerPlaceHolder}, <br>    {"MSEMS_EdkMbAgent_Section", NULL,        PR_PROFILE_USER,            lpszObjectPlaceHolder}, <br> <br>    {NULL, NULL, 0L, NULL} <br>}; <br> <br>//$--HrSetGatewayProfileParameters---------------------------------------------- <br>//  Add values to MAPISVC.INF to create profile for the specified gateway. <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrSetGatewayProfileParameters(   // RETURNS: return code <br>    IN LPSTR lpszServerName,                   // server name <br>    IN LPSTR lpszSiteDN,                       // site distinguished name <br>    IN LPSTR lpszCommonName)                   // common name <br>{ <br>    HRESULT hr                           = E_FAIL; <br>    BOOL    fRet                         = FALSE; <br>    UINT    uiRet                        = 0; <br>    LPSTR  lpszDN                       = NULL; <br>    CHAR   szSystemDir[MAX_PATH+1]      = {0}; <br>    CHAR   szServicesIni[MAX_PATH+12]   = {0}; // 12 = space for "MAPISVC.INF" <br>    UINT    n                            = 0; <br>    CHAR   szPropNum[10]                = {0}; <br>    LONG    cBytes                       = 0; <br>    LONG    lRet                         = 0; <br>    CHAR   szProfileVersion[MAX_PATH+1] = {0}; <br>    WORD    wver[2]                      = {0}; <br>    BYTE    bver[4]                      = {0}; <br> <br>    DEBUGPRIVATE("HrSetGatewayProfileParameters()\n"); <br> <br>    hr = CHK_HrSetGatewayProfileParameters( <br>        lpszServerName, <br>        lpszSiteDN, <br>        lpszCommonName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // <br>    // Compute profile version <br>    // <br> <br>    wver[0] = LOWORD(PROFILE_VERSION); <br>    wver[1] = HIWORD(PROFILE_VERSION); <br> <br>    bver[0] = LOBYTE(wver[0]); <br>    bver[1] = HIBYTE(wver[0]); <br>    bver[2] = LOBYTE(wver[1]); <br>    bver[3] = HIBYTE(wver[1]); <br> <br>    cBytes = _snprintf( <br>        szProfileVersion, <br>        MAX_PATH+1, <br>        "%02x%02x%02x%02x", <br>        bver[0], bver[1], bver[2], bver[3]); <br> <br>    if(cBytes &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the DN for use later. <br>    // <br> <br>    cBytes =  <br>        lstrlen(lpszSiteDN) + <br>        lstrlen(CONTAINER_GW) + <br>        4 + <br>        lstrlen(lpszCommonName) <br>        + 1; <br> <br>    cBytes *= sizeof(CHAR); <br>             <br>    lpszDN = (LPSTR)GlobalAlloc(GMEM_FIXED, cBytes); <br> <br>    if(lpszDN == NULL) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    lRet = _snprintf( <br>        lpszDN, <br>        cBytes, <br>        "%s%s/cn=%s", <br>        lpszSiteDN, <br>        CONTAINER_GW, <br>        lpszCommonName); <br> <br>    if(lRet &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the path to MAPISVC.INF <br>    // <br> <br>    uiRet = GetSystemDirectory(szSystemDir, MAX_PATH); <br> <br>    if(uiRet == 0) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    sprintf(szServicesIni, "%s\\%s", szSystemDir, "MAPISVC.INF"); <br> <br>    // <br>    //  Loop through and add items to MAPISVC.INF <br>    // <br> <br>    n = 0; <br> <br>    while(aGwServicesIni[n].lpszSection != NULL) <br>    { <br>        LPSTR lpszProp  = aGwServicesIni[n].lpszKey; <br>        LPSTR lpszValue = aGwServicesIni[n].lpszValue; <br> <br>        // Switch the property if necessary <br> <br>        if(lpszProp == NULL) <br>        { <br>            sprintf(szPropNum, "%lx", aGwServicesIni[n].ulKey); <br>            lpszProp = szPropNum; <br>        } <br> <br>        // Switch the value if necessary <br> <br>        if(lpszValue == lpszServerPlaceHolder) <br>        { <br>            lpszValue =  lpszServerName; <br>        } <br>        else if(lpszValue == lpszObjectPlaceHolder) <br>        { <br>            lpszValue = lpszDN; <br>        } <br>        else if(lpszValue == lpszDisplayNamePlaceHolder) <br>        { <br>            lpszValue = lpszCommonName; <br>        } <br>        else if(lpszValue == lpszProfileVersionPlaceHolder) <br>        { <br>            lpszValue = szProfileVersion; <br>        } <br> <br>        // <br>        //  Write the item to MAPISVC.INF <br>        // <br> <br>        fRet = WritePrivateProfileString( <br>            aGwServicesIni[n].lpszSection,  <br>            lpszProp, <br>            lpszValue, <br>            szServicesIni); <br> <br>        if(fRet == FALSE) <br>        { <br>            hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>            goto cleanup; <br>        } <br> <br>        n++; <br>    } <br>     <br>    // Flush the information <br> <br>    WritePrivateProfileString(NULL, NULL, NULL, szServicesIni); <br> <br>    hr = NOERROR; <br> <br>cleanup: <br> <br>    GLOBALFREE(lpszDN); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSetMailboxProfileParameters---------------------------------------------- <br>//  Add values to MAPISVC.INF to create profile for the specified mailbox. <br>// ----------------------------------------------------------------------------- <br>static HRESULT HrSetMailboxProfileParameters(   // RETURNS: return code <br>    IN LPSTR lpszServerName,                   // server name <br>    IN LPSTR lpszSiteDN,                       // site distinguished name <br>    IN LPSTR lpszCommonName)                   // common name <br>{ <br>    HRESULT hr                           = E_FAIL; <br>    BOOL    fRet                         = FALSE; <br>    UINT    uiRet                        = 0; <br>    LPSTR  lpszDN                       = NULL; <br>    CHAR   szSystemDir[MAX_PATH+1]      = {0}; <br>    CHAR   szServicesIni[MAX_PATH+12]   = {0}; // 12 = space for "MAPISVC.INF" <br>    UINT    n                            = 0; <br>    CHAR   szPropNum[10]                = {0}; <br>    LONG    cBytes                       = 0; <br>    LONG    lRet                         = 0; <br>    CHAR   szProfileVersion[MAX_PATH+1] = {0}; <br>    WORD    wver[2]                      = {0}; <br>    BYTE    bver[4]                      = {0}; <br> <br>    DEBUGPRIVATE("HrSetMailboxProfileParameters()\n"); <br> <br>    hr = CHK_HrSetMailboxProfileParameters( <br>        lpszServerName, <br>        lpszSiteDN, <br>        lpszCommonName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // <br>    // Compute profile version <br>    // <br> <br>    wver[0] = LOWORD(PROFILE_VERSION); <br>    wver[1] = HIWORD(PROFILE_VERSION); <br> <br>    bver[0] = LOBYTE(wver[0]); <br>    bver[1] = HIBYTE(wver[0]); <br>    bver[2] = LOBYTE(wver[1]); <br>    bver[3] = HIBYTE(wver[1]); <br> <br>    cBytes = _snprintf( <br>        szProfileVersion, <br>        MAX_PATH+1, <br>        "%02x%02x%02x%02x", <br>        bver[0], bver[1], bver[2], bver[3]); <br> <br>    if(cBytes &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the DN for use later. <br>    // <br> <br>    cBytes =  <br>        lstrlen(lpszSiteDN) + <br>        lstrlen(lpszCommonName) <br>        + 1; <br> <br>    cBytes *= sizeof(CHAR); <br>             <br>    lpszDN = (LPSTR)GlobalAlloc(GMEM_FIXED, cBytes); <br> <br>    if(lpszDN == NULL) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    lRet = _snprintf( <br>        lpszDN, <br>        cBytes, <br>        "%s%s", <br>        lpszSiteDN, <br>        lpszCommonName); <br> <br>    if(lRet &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the path to MAPISVC.INF <br>    // <br> <br>    uiRet = GetSystemDirectory(szSystemDir, MAX_PATH); <br> <br>    if(uiRet == 0) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    sprintf(szServicesIni, "%s\\%s", szSystemDir, "MAPISVC.INF"); <br> <br>    // <br>    //  Loop through and add items to MAPISVC.INF <br>    // <br> <br>    n = 0; <br> <br>    while(aMbServicesIni[n].lpszSection != NULL) <br>    { <br>        LPSTR lpszProp  = aMbServicesIni[n].lpszKey; <br>        LPSTR lpszValue = aMbServicesIni[n].lpszValue; <br> <br>        // Switch the property if necessary <br> <br>        if(lpszProp == NULL) <br>        { <br>            sprintf(szPropNum, "%lx", aMbServicesIni[n].ulKey); <br>            lpszProp = szPropNum; <br>        } <br> <br>        // Switch the value if necessary <br> <br>        if(lpszValue == lpszServerPlaceHolder) <br>        { <br>            lpszValue =  lpszServerName; <br>        } <br>        else if(lpszValue == lpszObjectPlaceHolder) <br>        { <br>            lpszValue = lpszDN; <br>        } <br>        else if(lpszValue == lpszDisplayNamePlaceHolder) <br>        { <br>            lpszValue = lpszCommonName; <br>        } <br>        else if(lpszValue == lpszProfileVersionPlaceHolder) <br>        { <br>            lpszValue = szProfileVersion; <br>        } <br> <br>        // <br>        //  Write the item to MAPISVC.INF <br>        // <br> <br>        fRet = WritePrivateProfileString( <br>            aMbServicesIni[n].lpszSection,  <br>            lpszProp, <br>            lpszValue, <br>            szServicesIni); <br> <br>        if(fRet == FALSE) <br>        { <br>            hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>            goto cleanup; <br>        } <br> <br>        n++; <br>    } <br>     <br>    // Flush the information <br> <br>    WritePrivateProfileString(NULL, NULL, NULL, szServicesIni); <br> <br>    hr = NOERROR; <br> <br>cleanup: <br> <br>    GLOBALFREE(lpszDN); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrCreateGatewayProfile-------------------------------------------------- <br>//  Creates a gateway profile. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateGatewayProfile(          // RETURNS: return code <br>IN LPSTR lpszServiceName,              // service name <br>IN LPSTR lpszProfileName)              // profile name <br>{ <br>    HRESULT        hr             = E_FAIL; <br>    LPPROFADMIN    lpProfAdmin    = NULL; <br>    LPSERVICEADMIN lpServiceAdmin = NULL; <br> <br>    BOOL    fRet                         = FALSE; <br>    UINT    uRet                         = 0; <br>    CHAR   szSystemDir[MAX_PATH+1]      = {0}; <br>    CHAR   szServicesIni[MAX_PATH+12+1] = {0}; // 12 = space for "MAPISVC.INF" <br> <br>LONG    lRet                         = 0; <br>LPSTR  lpszServer                   = NULL; <br>LPSTR  lpszSiteDN                   = NULL; <br>LPSTR  lpszObjectGuid               = NULL; <br>    LPSTR  lpszCommonName               = NULL; <br>DWORD   dwType                       = 0; <br>DWORD   cbOrig                       = 0; <br>CHAR    szParametersKey[MAX_PATH+1]  = {0}; <br>HKEY    hkParameters                 = INVALID_HANDLE_VALUE; <br> <br>    DEBUGPUBLIC("HrCreateGatewayProfile()\n"); <br> <br>    hr = CHK_HrCreateGatewayProfile( <br>    lpszServiceName, <br>    lpszProfileName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // <br>    //  Open the parameters key. <br>    // <br> <br>lRet = _snprintf( <br>    szParametersKey, <br>        MAX_PATH+1, <br>    "SYSTEM\\CurrentControlSet\\Services\\%s\\Parameters", <br>    lpszServiceName); <br> <br>    if(lRet &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    lRet = RegOpenKeyEx( <br>        HKEY_LOCAL_MACHINE, <br>        szParametersKey,  <br>        0, <br>        KEY_READ, <br>        &amp;hkParameters); <br> <br>    if(lRet != ERROR_SUCCESS) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(lRet)); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Get the profile parameters <br>    // <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "HomeDSA", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszServer); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "SiteDN", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszSiteDN); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "ObjectGUID", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszObjectGuid); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    if((lpszObjectGuid == NULL) || <br>       (lstrcmpi(lpszObjectGuid, OBJECT_GUID_MAIL_GATEWAY))) <br>    { <br>        // <br>        // The object is the directory is not a gateway. <br>        // <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "CommonName", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszCommonName); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Connect to Profile Admin interface. <br>    // <br> <br>    hr = MAPIAdminProfiles(0, &amp;lpProfAdmin); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(lpProfAdmin != NULL, "NULL lpPropAdmin variable"); <br> <br>    // <br>    //  Create a profile for the gateway. <br>    // <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;CreateProfile( <br>        lpProfAdmin, <br>        lpszProfileName, <br>        NULL, <br>        0, <br>        fMapiUnicode); <br> <br>    if(FAILED(hr)) <br>    { <br>        // Did it fail because a profile of this name already exists? <br> <br>        hr = HrMAPIProfileExists(lpProfAdmin, lpszProfileName); <br> <br>        if(hr != E_ACCESSDENIED) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(hr); <br>        } <br> <br>        goto cleanup; <br>    }         <br> <br>    // <br>    // Fix MAPISVC.INF to contain the information we want to add to the profile <br>    // <br> <br>    hr = HrSetGatewayProfileParameters( <br>        lpszServer, <br>        lpszSiteDN, <br>        lpszCommonName); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Add profile section from MAPISVC.INF <br>    // <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;AdminServices( <br>        lpProfAdmin, <br>        lpszProfileName, <br>        "",  <br>        0, <br>        0, <br>        &amp;lpServiceAdmin); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(lpServiceAdmin != NULL, "NULL lpServiceAdmin variable"); <br> <br>    hr = MAPICALL(lpServiceAdmin)-&gt;CreateMsgService( <br>        lpServiceAdmin, <br>        "MSEMS_EdkGateway", <br>        "Exchange Access for EDK Gateways", <br>        0, <br>        0); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the path to MAPISVC.INF <br>    // <br> <br>    uRet = GetSystemDirectory(szSystemDir, MAX_PATH); <br> <br>    if(uRet == 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    sprintf(szServicesIni, "%s\\%s", szSystemDir, "MAPISVC.INF"); <br> <br>    // <br>    //  Remove service entry from MAPISVC.INF <br>    // <br> <br>    fRet = WritePrivateProfileString( <br>        TEXT("Services"),  <br>        TEXT("MSEMS_EdkGateway"), <br>        NULL, <br>        szServicesIni); <br> <br>    if(fRet == FALSE) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    hr = NOERROR; <br> <br>cleanup: <br> <br>GLOBALFREE(lpszServer); <br>GLOBALFREE(lpszSiteDN); <br>GLOBALFREE(lpszObjectGuid); <br>    GLOBALFREE(lpszCommonName); <br> <br>FREEHKEY(hkParameters); <br> <br>    ULRELEASE(lpServiceAdmin); <br>    ULRELEASE(lpProfAdmin); <br> <br>    RegFlushKey(HKEY_LOCAL_MACHINE); <br>    RegFlushKey(HKEY_CURRENT_USER); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrCreateMailboxAgentProfile--------------------------------------------- <br>//  Creates a mailbox agent profile. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateMailboxAgentProfile(     // RETURNS: return code <br>IN LPSTR lpszServiceName,              // service name <br>IN LPSTR lpszProfileName)              // profile name <br>{ <br>    HRESULT        hr             = E_FAIL; <br>    LPPROFADMIN    lpProfAdmin    = NULL; <br>    LPSERVICEADMIN lpServiceAdmin = NULL; <br> <br>    BOOL    fRet                         = FALSE; <br>    UINT    uRet                         = 0; <br>    CHAR   szSystemDir[MAX_PATH+1]      = {0}; <br>    CHAR   szServicesIni[MAX_PATH+12+1] = {0}; // 12 = space for "MAPISVC.INF" <br> <br>LONG    lRet                         = 0; <br>LPSTR  lpszServer                   = NULL; <br>LPSTR  lpszSiteDN                   = NULL; <br>LPSTR  lpszObjectGuid               = NULL; <br>    LPSTR  lpszCommonName               = NULL; <br>DWORD   dwType                       = 0; <br>DWORD   cbOrig                       = 0; <br>CHAR    szParametersKey[MAX_PATH]    = {0}; <br>HKEY    hkParameters                 = INVALID_HANDLE_VALUE; <br> <br>    DEBUGPUBLIC("HrCreateMailboxAgentProfile()\n"); <br> <br>    hr = CHK_HrCreateMailboxAgentProfile( <br>    lpszServiceName, <br>    lpszProfileName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // <br>    //  Open the parameters key. <br>    // <br> <br>lRet = _snprintf( <br>    szParametersKey, <br>        MAX_PATH+1, <br>    "SYSTEM\\CurrentControlSet\\Services\\%s\\Parameters", <br>    lpszServiceName); <br> <br>    if(lRet &lt; 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    lRet = RegOpenKeyEx( <br>        HKEY_LOCAL_MACHINE, <br>        szParametersKey,  <br>        0, <br>        KEY_READ, <br>        &amp;hkParameters); <br> <br>    if(lRet != ERROR_SUCCESS) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(lRet)); <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Get the profile parameters <br>    // <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "HomeDSA", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszServer); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "SiteDN", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszSiteDN); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "ObjectGUID", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszObjectGuid); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    if((lpszObjectGuid == NULL) || <br>       (lstrcmpi(lpszObjectGuid, OBJECT_GUID_MAILBOX_AGENT))) <br>    { <br>        // <br>        // The object is the directory is not a mailbox agent. <br>        // <br> <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGetRegistryValue( <br>        hkParameters, "CommonName", &amp;dwType, &amp;cbOrig, (LPVOID) &amp;lpszCommonName); <br> <br>    if(FAILED(hr) || dwType != REG_SZ) <br>    { <br>        if(dwType != REG_SZ) <br>            hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Connect to Profile Admin interface. <br>    // <br> <br>    hr = MAPIAdminProfiles(0, &amp;lpProfAdmin); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(lpProfAdmin != NULL, "NULL lpPropAdmin variable"); <br> <br>    // <br>    //  Create a profile for the gateway. <br>    // <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;CreateProfile( <br>        lpProfAdmin, <br>        lpszProfileName, <br>        NULL, <br>        0, <br>        fMapiUnicode); <br> <br>    if(FAILED(hr)) <br>    { <br>        // Did it fail because a profile of this name already exists? <br> <br>        hr = HrMAPIProfileExists(lpProfAdmin, lpszProfileName); <br> <br>        if(hr != E_ACCESSDENIED) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>        } <br>        else <br>        { <br>            hr = HR_LOG(hr); <br>        } <br> <br>        goto cleanup; <br>    }         <br> <br>    // <br>    // Fix MAPISVC.INF to contain the stuff we want to add to the profile <br>    // <br> <br>    hr = HrSetMailboxProfileParameters( <br>        lpszServer, <br>        lpszSiteDN, <br>        lpszCommonName); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Add profile section from MAPISVC.INF <br>    // <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;AdminServices( <br>        lpProfAdmin, <br>        lpszProfileName, <br>        "",  <br>        0, <br>        0, <br>        &amp;lpServiceAdmin); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(lpServiceAdmin != NULL, "NULL lpServiceAdmin variable"); <br> <br>    hr = MAPICALL(lpServiceAdmin)-&gt;CreateMsgService( <br>        lpServiceAdmin, <br>        "MSEMS_EdkMbAgent", <br>        "Exchange Access for EDK Mailbox Agents", <br>        0, <br>        0); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Compute the path to MAPISVC.INF <br>    // <br> <br>    uRet = GetSystemDirectory(szSystemDir, MAX_PATH); </code></pre>
<p>
</p>
<pre><code><br>    if(uRet == 0) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    sprintf(szServicesIni, "%s\\%s", szSystemDir, "MAPISVC.INF"); <br> <br>    // <br>    //  Remove service entry from MAPISVC.INF <br>    // <br> <br>    fRet = WritePrivateProfileString( <br>        TEXT("Services"),  <br>        TEXT("MSEMS_EdkMbAgent"), <br>        NULL, <br>        szServicesIni); <br> <br>    if(fRet == FALSE) <br>    { <br>        hr = HR_LOG(HRESULT_FROM_WIN32(GetLastError())); <br>        goto cleanup; <br>    } <br> <br>    hr = NOERROR; <br> <br>cleanup: <br> <br>GLOBALFREE(lpszServer); <br>GLOBALFREE(lpszSiteDN); <br>GLOBALFREE(lpszObjectGuid); <br>    GLOBALFREE(lpszCommonName); <br> <br>FREEHKEY(hkParameters); <br> <br>    ULRELEASE(lpServiceAdmin); <br>    ULRELEASE(lpProfAdmin); <br> <br>    RegFlushKey(HKEY_LOCAL_MACHINE); <br>    RegFlushKey(HKEY_CURRENT_USER); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrRemoveProfile--------------------------------------------------------- <br>//  Removes a profile. <br>//------------------------------------------------------------------------------ <br>HRESULT HrRemoveProfile(                 // RETURNS: return code <br>    LPSTR lpszProfileName)                 // profile name <br>{ <br>    HRESULT     hr          = NOERROR; <br>    LPPROFADMIN lpProfAdmin = NULL; <br> <br>    DEBUGPUBLIC("HrRemoveProfile()\n"); <br> <br>    hr = CHK_HrRemoveProfile( <br>        lpszProfileName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // <br>    // Connect to Profile Admin interface. <br>    // <br> <br>    hr = MAPIAdminProfiles(0, &amp;lpProfAdmin); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(lpProfAdmin != NULL, "NULL lpPropAdmin variable"); <br> <br>    // <br>    //  Delete a MAPI profile <br>    // <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;DeleteProfile(lpProfAdmin, lpszProfileName, 0); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    ULRELEASE(lpProfAdmin); <br> <br>    RegFlushKey(HKEY_LOCAL_MACHINE); <br>    RegFlushKey(HKEY_CURRENT_USER); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPIProfileExists--------------------------------------------------------- <br>//  Checks for an existing profile. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPIProfileExists(             // RETURNS: return code <br>    IN LPPROFADMIN lpProfAdmin,         // profile admin object <br>    IN LPSTR      lpszProfileName)     // profile name <br>{ <br>    HRESULT      hr      = NOERROR; <br>    HRESULT      hrT     = 0; <br>    LPMAPITABLE  lpTable = NULL; <br>    LPSRowSet    lpRows  = NULL; <br>    LPSPropValue lpProp  = NULL; <br>    ULONG        i       = 0; <br>    ULONG        cRows   = 0; <br> <br>    SizedSPropTagArray(1, rgPropTag) =  <br>    { <br>        1, <br>        { <br>            PR_DISPLAY_NAME_A <br>        } <br>    }; <br> <br>    DEBUGPUBLIC("HrMAPIProfileExists()\n"); <br> <br>    hr = CHK_HrMAPIProfileExists( <br>        lpProfAdmin, <br>        lpszProfileName); <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    // Get a table of existing profiles <br> <br>    hr = MAPICALL(lpProfAdmin)-&gt;GetProfileTable( <br>        lpProfAdmin, <br>        0, <br>        &amp;lpTable); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br>    <br>hr = HrQueryAllRows( <br>    lpTable, <br>(LPSPropTagArray)&amp;rgPropTag, <br>NULL, <br>NULL, <br>0, <br>&amp;lpRows); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    cRows = lpRows-&gt;cRows; <br> <br>    // If table is empty then profile doesn't exist <br> <br>    if (cRows == 0) <br>    { <br>        hr = NOERROR; <br>        goto cleanup; <br>    } <br> <br>    // Search rows for the folder in question <br> <br>    for(i = 0; i &lt; cRows; i++) <br>    { <br>        ASSERTERROR( <br>            lpRows-&gt;aRow[i].cValues &gt; 0, <br>            "Profile row is empty of properties."); <br> <br>        lpProp = lpRows-&gt;aRow[i].lpProps; <br> <br>        ASSERTERROR( <br>            lpProp[0].ulPropTag == PR_DISPLAY_NAME_A, <br>            "Profile row does not contain display name"); <br> <br>        if(lstrcmpiA(lpProp[0].Value.lpszA, lpszProfileName) == 0) <br>        { <br>            hr = E_ACCESSDENIED; <br>            goto cleanup; <br>        } <br>    } <br>     <br>cleanup: <br>     <br>    FREEPROWS(lpRows); <br> <br>    ULRELEASE(lpTable); <br> <br>    RETURN(hr); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

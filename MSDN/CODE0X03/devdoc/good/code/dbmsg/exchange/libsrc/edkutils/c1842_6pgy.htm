<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTL_STR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1852"></a>UTL_STR.C</h2>
<pre><code>// --UTL_STR.C------------------------------------------------------------------ <br>// <br>// String conversion helper functions. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "utl_str.chk" <br> <br> <br>//$--HrStrAToStrW--------------------------------------------------------------- <br>//  Convert a byte string to a word string.  The resulting string is placed in  <br>//  a buffer allocated using MAPIAllocateBuffer. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrStrAToStrW( <br>    IN  LPCSTR          lpszSource,     // source string <br>    OUT LPWSTR *        lppwszDest)     // destination string <br>{ <br>    HRESULT             hr              = NOERROR; <br>    LONG                cchDest         = 0; <br>    LPWSTR              lpwszDest       = NULL; <br> <br>    DEBUGPUBLIC("HrStrAToStrW()"); <br> <br>    hr = CHK_HrStrAToStrW(lpszSource, lppwszDest); <br>    if (FAILED(hr)) <br>        RETURN(hr); <br> <br>    // Compute the number of word characters needed for the destination buffer. <br> <br>    if (*lpszSource) <br>    { <br>        cchDest = MultiByteToWideChar( <br>            CP_ACP,  <br>            MB_PRECOMPOSED,  <br>            lpszSource,  <br>            strlen(lpszSource),  <br>            NULL,  <br>            0); <br>        if (cchDest == 0) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>    } <br> <br>    // Allocate the destination string buffer. <br> <br>    hr = MAPIAllocateBuffer((cchDest + 1) * sizeof(WCHAR), &amp;lpwszDest); <br>    if (FAILED(hr)) <br>        goto cleanup; <br> <br>    // Convert from byte string to word string. <br> <br>    if (*lpszSource) <br>    { <br>        cchDest = MultiByteToWideChar( <br>            CP_ACP,  <br>            MB_PRECOMPOSED,  <br>            lpszSource,  <br>            strlen(lpszSource),  <br>            lpwszDest,  <br>            cchDest); <br>        if (cchDest == 0) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>    } <br>    lpwszDest[cchDest] = 0; <br> <br>    // Store in output parameter. <br> <br>    *lppwszDest = lpwszDest; <br> <br>cleanup: <br>    if (FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpwszDest); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--HrStrWToStrA--------------------------------------------------------------- <br>//  Convert a word string to a byte string.  The resulting string is placed in  <br>//  a buffer allocated using MAPIAllocateBuffer. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrStrWToStrA( <br>    IN  LPCWSTR         lpwszSource,    // source string <br>    OUT LPSTR *         lppszDest)      // destination string <br>{ <br>    HRESULT             hr              = NOERROR; <br>    LONG                cchDest         = 0; <br>    LPSTR               lpszDest        = NULL; <br> <br>    DEBUGPUBLIC("HrStrWToStrA()"); <br> <br>    hr = CHK_HrStrWToStrA(lpwszSource, lppszDest); <br>    if (FAILED(hr)) <br>        RETURN(hr); <br> <br>    // Compute the number of byte characters needed for the destination buffer. <br> <br>    if (*lpwszSource) <br>    { <br>        cchDest = WideCharToMultiByte( <br>            CP_ACP,  <br>            WC_COMPOSITECHECK | WC_SEPCHARS,  <br>            lpwszSource,  <br>            wcslen(lpwszSource),  <br>            NULL,  <br>            0,  <br>            NULL,  <br>            NULL); <br>        if (cchDest == 0) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>    } <br> <br>    // Allocate the destination string buffer. <br> <br>    hr = MAPIAllocateBuffer(cchDest + 1, &amp;lpszDest); <br>    if (FAILED(hr)) <br>        goto cleanup; <br> <br>    // Convert from word string to byte string. <br> <br>    if (*lpwszSource) <br>    { <br>        cchDest = WideCharToMultiByte( <br>            CP_ACP,  <br>            WC_COMPOSITECHECK | WC_SEPCHARS,  <br>            lpwszSource,  <br>            wcslen(lpwszSource),  <br>            lpszDest,  <br>            cchDest,  <br>            NULL,  <br>            NULL); <br>        if (cchDest == 0) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>    } <br>    lpszDest[cchDest] = 0; <br> <br>    // Store in output parameter. <br> <br>    *lppszDest = lpszDest; <br> <br>cleanup: <br>    if (FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpszDest); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--HrStrAToStrA--------------------------------------------------------------- <br>//  Create an allocated copy of a byte string using MAPIAllocateBuffer. <br>//  This is useful for creating macros involving CHAR strings. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrStrAToStrA( <br>    IN  LPCSTR          lpszSource,     // source string <br>    OUT LPSTR *         lppszDest)      // destination string <br>{ <br>    HRESULT             hr              = NOERROR; <br>    LPSTR               lpszDest        = NULL; <br> <br>    DEBUGPUBLIC("HrStrAToStrA()"); <br> <br>    hr = CHK_HrStrAToStrA(lpszSource, lppszDest); <br>    if (FAILED(hr)) <br>        RETURN(hr); <br> <br>    // Allocate the destination buffer and copy the string. <br> <br>    hr = MAPIAllocateBuffer(strlen(lpszSource) + 1, &amp;lpszDest); <br>    if (FAILED(hr)) <br>        goto cleanup; <br> <br>    strcpy(lpszDest, lpszSource); <br> <br>    // Store in output parameter. <br> <br>    *lppszDest = lpszDest; <br> <br>cleanup: <br>    if (FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpszDest); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--HrStrWToStrW--------------------------------------------------------------- <br>//  Create an allocated copy of a word string using MAPIAllocateBuffer. <br>//  This is useful for creating macros involving CHAR strings. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrStrWToStrW( <br>    IN  LPCWSTR         lpwszSource,    // source string <br>    OUT LPWSTR *        lppwszDest)     // destination string <br>{ <br>    HRESULT             hr              = NOERROR; <br>    LPWSTR              lpwszDest       = NULL; <br> <br>    DEBUGPUBLIC("HrStrWToStrW()"); <br> <br>    hr = CHK_HrStrWToStrW(lpwszSource, lppwszDest); <br>    if (FAILED(hr)) <br>        RETURN(hr); <br> <br>    // Allocate the destination buffer and copy the string. <br> <br>    hr = MAPIAllocateBuffer( <br>        (wcslen(lpwszSource) + 1) * sizeof(WCHAR), &amp;lpwszDest); <br>    if (FAILED(hr)) <br>        goto cleanup; <br> <br>    wcscpy(lpwszDest, lpwszSource); <br> <br>    // Store in output parameter. <br> <br>    *lppwszDest = lpwszDest; <br> <br>cleanup: <br>    if (FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpwszDest); <br>    } <br> <br>    RETURN(hr); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

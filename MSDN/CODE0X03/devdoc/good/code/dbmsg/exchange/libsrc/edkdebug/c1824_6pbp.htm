<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EDKDEBUG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1825"></a>EDKDEBUG.C</h2>
<pre><code>// --edkdebug.c----------------------------------------------------------------- <br>// <br>//  Functions to log debugging information in DEBUG builds. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br>  <br>#define _PRIVATE_EDKDEBUG_H <br>#define _PRIVATE_MEMORY_H <br>#include "edk.h" <br> <br>#define REPORT_ERROR(x) \ <br>    _WriteDebugString("error: %s, %lu, %s\n", __FILE__,__LINE__,(x)) <br> <br>static LPSTR szNullA = ""; <br> <br>//$--GetComponentFileName------------------------------------------------------- <br>//  Return a text representation of a component file name. <br>// ----------------------------------------------------------------------------- <br>static LPSTR GetComponentFileName(      // RETURNS: component file name <br>    IN LPSTR lpszFile)                  // pointer to file name <br>{ <br>    LPSTR pszT = NULL; <br>    LPSTR psz  = NULL; <br> <br>    if(IsBadStringPtrA(lpszFile, INFINITE)) <br>    { <br>        return(szNullA); <br>    } <br> <br>    psz  = lpszFile; <br> <br>    pszT = lpszFile + lstrlen(lpszFile); <br> <br>    while(pszT &gt;= lpszFile) <br>    { <br>        if(*pszT == '\\') <br>        { <br>            psz = pszT; <br>        } <br>        else if((*pszT == ':')) <br>        { <br>            psz = pszT; <br>            break; <br>        } <br> <br>        pszT--; <br>    } <br>     <br>    if((*psz == '\\') || (*psz == ':')) <br>    { <br>        psz++; <br>    } <br> <br>    return(psz); <br>} <br> <br>//$--BoolName------------------------------------------------------------------- <br>//  Return a text representation of a boolean value. <br>// ----------------------------------------------------------------------------- <br>static LPSTR BoolName(                  // RETURNS: textized boolean value <br>    IN BOOL fStatus)                    // boolean value <br>{ <br>    switch(fStatus) <br>    { <br>        case TRUE: <br>            return("TRUE"); <br>        case FALSE: <br>            return("FALSE"); <br>        default: <br>            return("UNKNOWN"); <br>    } <br>} <br> <br>//$--DebugLevelName------------------------------------------------------------- <br>//  Return a text representation of a debug level. <br>// ----------------------------------------------------------------------------- <br>static LPSTR DebugLevelName(            // RETURNS: textized debug level <br>    IN DEBUGLEVEL eLevel)               // debug level <br>{ <br>    switch(eLevel) <br>    { <br>        case D_PUBLIC: <br>            return("D_PUBLIC"); <br>        case D_PRIVATE: <br>            return("D_PRIVATE"); <br>        case D_ERROR: <br>            return("D_ERROR"); <br>        case D_WARNING: <br>            return("D_WARNING"); <br>        case D_STATUS: <br>            return("D_STATUS"); <br>        case D_ACTION: <br>            return("D_ACTION"); <br>        case D_OTHER: <br>            return("D_OTHER"); <br>        default: <br>            return("UNKNOWN"); <br>    } <br>} <br> <br>//$--_ShowAssert---------------------------------------------------------------- <br>//  Prompts user for what action to take on an assertion failure. <br>// ----------------------------------------------------------------------------- <br>static void _ShowAssert(                // RETURNS: nothing <br>    IN LPSTR lpszFile,                  // source file name <br>    IN ULONG ulLine)                    // source line number <br>{ <br>    int  n              = 0; <br>    char lpsz[BUFSIZ+1] = {0}; <br> <br>    LPSTR  lpszPrompt <br>        =  "%s - line %lu\n" <br>                "\n" <br>                "Click on ABORT  to exit the application.\n" <br>                "Click on RETRY  to debug the application.\n" <br>                "Click on IGNORE to continue."; <br> <br>    __try <br>    { <br>        n = _snprintf( <br>            lpsz, <br>            BUFSIZ, <br>            lpszPrompt, <br>            GetComponentFileName(lpszFile), <br>            ulLine); <br>    } <br>    __except(EXCEPTION_EXECUTE_HANDLER) <br>    { <br>        REPORT_ERROR(_exception_code()); <br>        n = -1; <br>    } <br> <br>    if(n &lt; 0) <br>    { <br>        goto cleanup; <br>    } <br> <br>    n = MessageBox(NULL, <br>        lpsz, <br>        "Assertion Failure", <br>        MB_ABORTRETRYIGNORE | MB_ICONSTOP | MB_TASKMODAL); <br> <br>    switch(n) <br>    { <br>        case IDABORT: <br>            // User chose to terminate program <br>            ExitProcess(0); <br>            break; <br>        case IDRETRY: <br>            // User chose to trap into the debugger <br>            DebugBreak(); <br>            break; <br>        case IDIGNORE: <br>            // User chose to continue execution <br>            break; <br>        default: <br>            break; <br>    } <br> <br>cleanup: <br> <br>    return; <br>} <br> <br>//$--_Assert-------------------------------------------------------------------- <br>//   <br>//  Write to the debug log file and/or evaluate assertion. <br>//   <br>// ----------------------------------------------------------------------------- <br>void _Assert(                   // RETURNS: nothing <br>    IN LPSTR lpszTag,           // tag name <br>    IN LPSTR lpszFile,          // source file name <br>    IN ULONG ulLine,            // source line number <br>    IN DEBUGLEVEL Level,        // assertion level <br>    IN BOOL fValue,             // assertion value <br>    IN LPSTR lpszFormat,        // format string <br>    ...)                        // arguments <br>{ <br>    char       lpsz[BUFSIZ+1] = {0}; <br>    va_list    va_alist       = {0}; <br>    SYSTEMTIME st             = {0}; <br>    FILETIME   ft             = {0}; <br>    BOOL       fRet           = FALSE; <br>         <br>    _InitDebugFile(); <br> <br>    if(_StatusDebugLevel(Level) == FALSE) <br>    { <br>        goto cleanup; <br>    } <br> <br>    if((lpszTag == NULL) || IsBadStringPtrA(lpszTag, INFINITE)) <br>    { <br>        REPORT_ERROR(ERROR_INVALID_PARAMETER); <br>        goto cleanup; <br>    } <br> <br>    if((lpszFile == NULL) || IsBadStringPtrA(lpszFile, INFINITE)) <br>    { <br>        REPORT_ERROR(ERROR_INVALID_PARAMETER); <br>        goto cleanup; <br>    } <br> <br>    if((lpszFormat == NULL) || IsBadStringPtrA(lpszFormat, INFINITE)) <br>    { <br>        REPORT_ERROR(ERROR_INVALID_PARAMETER); <br>        goto cleanup; <br>    } <br> <br>    _LockDebugFile(); <br> <br>    if(((Level != D_ERROR) &amp;&amp; (Level != D_WARNING)) || <br>       (((Level == D_ERROR) || (Level == D_WARNING)) &amp;&amp; (fValue == FALSE))) <br>    { <br>        __try <br>        { <br>            GetSystemTime(&amp;st); <br> <br>            fRet = SystemTimeToFileTime(&amp;st, &amp;ft); <br> <br>            if(fRet != TRUE) <br>            { <br>                ft.dwLowDateTime  = 0; <br>                ft.dwHighDateTime = 0; <br>            } <br> <br>            _WriteDebugFile( <br>                "%08lX%08lX %s - process %lu, thread %lu, level %s, file %s, line %lu: ", <br>                ft.dwHighDateTime, <br>                ft.dwLowDateTime, <br>                lpszTag, <br>                GetCurrentProcessId(), <br>                GetCurrentThreadId(), <br>                DebugLevelName(Level), <br>                lpszFile, <br>                ulLine); <br>        } <br>        __except(EXCEPTION_EXECUTE_HANDLER) <br>        { <br>            REPORT_ERROR(_exception_code()); <br>        } <br> <br>        __try <br>        { <br>            va_start( va_alist, lpszFormat ); <br> <br>            _vsnprintf( lpsz, BUFSIZ, lpszFormat, va_alist ); <br> <br>            va_end( va_alist ); <br> <br>            _WriteDebugFile("%s", lpsz); <br>        } <br>        __except(EXCEPTION_EXECUTE_HANDLER) <br>        { <br>            REPORT_ERROR(_exception_code()); <br>        } <br>    } <br> <br>    _UnlockDebugFile(); <br> <br>cleanup: <br> <br>    if(_StatusShowAssert() &amp;&amp; (fValue == FALSE) &amp;&amp; (Level == D_ERROR)) <br>    { <br>        _ShowAssert(lpszFile, ulLine); <br>    } <br> <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVCWRP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1867"></a>CONVCWRP.CPP</h2>
<pre><code>// --convcwrp.cpp--------------------------------------------------------------- <br>//  <br>// C callable code that wraps the conversion engine class. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "convincl.h" <br>#include "convcwrp.chk" <br> <br>// Globals <br> <br>// global conversion DLL registry information cache pointer <br>CEDKConvReg *  pCConvReg   =   NULL;      <br> <br>//$--HrConvInitGlobals------------------------------------------------- <br>// <br>// DESCRIPTION: Called once by the gateway to initalize common data areas. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: HRESULT --  NOERROR if successful <br>//                      E_OUTOFMEMORY if memory problems <br>// <br>//--------------------------------------------------------------------- <br>HRESULT HrConvInitGlobals()  <br>{   <br>    HRESULT hr  =   NOERROR; <br> <br>    DEBUGPUBLIC("HrConvInitGlobals()\n"); <br> <br>    // Create a global conversion DLL registry information cache. <br>    pCConvReg = new CEDKConvReg(); <br> <br>    if ( pCConvReg == NULL ) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br> <br>        goto cleanup; <br>    } <br> <br>    // Initialize the registry information cache. <br>    hr = pCConvReg-&gt;HrEDKInitialize(); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br> <br>} <br> <br>//$--ConvUninitGlobals------------------------------------------------- <br>// <br>// DESCRIPTION: Called once by the gateway to de-initalize common data areas. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: VOID <br>// <br>//--------------------------------------------------------------------- <br>VOID ConvUninitGlobals()  <br>{ <br>    DEBUGPUBLIC("ConvUninitGlobals()\n"); <br> <br>    // Delete the global registry information cache. <br>    if ( pCConvReg ) <br>    { <br>        // First, delete its common members (the DLL cache <br>        // and the list of class names). <br>        pCConvReg-&gt;EDKFree(); <br> <br>        // Now, delete the registry informtion cache itself. <br>        delete pCConvReg; <br>    } <br> <br>    pCConvReg = NULL; <br> <br>    return; <br> <br>} <br> <br>//$--HrConvInitInstance----------------------------------------------- <br>// <br>//  DESCRIPTION: Called to create a new instance of the conversion engine.  Each <br>//  instance of the conversion engine is single-threaded.  Multiple <br>//  instances can be used in separate threads. <br>// <br>//  INPUT:  hEventSource    --  event source handle <br>// <br>//  OUTPUT:  ppvConvInst --  conversion engine instance <br>// <br>//  RETURNS:    HRESULT --  NOERROR if no error, <br>//                          E_INVALIDARG if bad input, <br>//                          E_FAIL if failure <br>// <br>//--------------------------------------------------------------------- <br>HRESULT HrConvInitInstance(        <br>    IN HANDLE hEventSource,         // event source handle <br>    OUT PVOID * ppvConvInst)        // new conversion engine instance <br>{ <br>    HRESULT hr = NOERROR;           // return code <br>    CEDKConvEng * pceTmp = NULL;    // Temporary conversion engine pointer <br> <br>    DEBUGPUBLIC("HrConvInitInstance()\n"); <br> <br>    // check input parameters <br>    hr = CHK_HrConvInitInstance(hEventSource, ppvConvInst); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    // <br>    //  Make a new instance. <br>    // <br> <br>    pceTmp = new CEDKConvEng; <br> <br>    if(pceTmp == NULL) <br>    { <br>        hr = HR_LOG(E_FAIL); <br> <br>        goto cleanup; <br>    } <br> <br>    // <br>    //  Pass back the new instance. <br>    // <br> <br>    (*(CEDKConvEng**)ppvConvInst) = pceTmp; <br> <br>    // <br>    //  Attempt to initialize <br>    // <br> <br>    hr = pceTmp-&gt;HrEDKInitialize(hEventSource); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        if(pceTmp != NULL) <br>        { <br>            delete pceTmp; <br>            pceTmp = NULL; <br>        } <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrConvUninitInstance---------------------------------------------- <br>// <br>// DESCRIPTION: Called to dispose of a previously allocated conversion engine. <br>// <br>// INPUT:   pvConvInst  --  conversion engine instance to free. <br>// <br>// RETURNS: HRESULT --  NOERROR if successful, <br>//                      E_INVALIDARG if bad input <br>//                      E_FAIL otherwise. <br>// <br>//--------------------------------------------------------------------- <br>HRESULT HrConvUninitInstance(      <br>    IN PVOID pvConvInst)                    // handle to instance to free. <br>{ <br>    HRESULT hr  =   NOERROR;            // return code <br>    CEDKConvEng * pceTmp    =   NULL;   // temporary conversion engine pointer <br> <br>    DEBUGPUBLIC("HrConvUninitInstance()\n"); <br> <br>    // check input parameters <br>    hr = CHK_HrConvUninitInstance(pvConvInst); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    pceTmp = (CEDKConvEng *) pvConvInst; <br> <br>    delete pceTmp; <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrConvConvert---------------------------------------------------- <br>// <br>// DESCRIPTION: called to initiate a conversion. <br>// <br>// INPUT:   pvConvInst  --  conversion engine instance <br>//          pEnv    --  conversion environment <br>//          pszContentClass --  class of source <br>//          pContentIn  --  source to be converted <br>//          pContentOut --  converted object <br>//  <br>// OUTPUT:   <br>//          pcrResult   --  result <br>// <br>// RETURNS: HRESULT --  NOERROR if no error, <br>//                      E_INVALIDARG if bad input, <br>//                      E_FAIL otherwise. <br>// <br>//--------------------------------------------------------------------- <br>HRESULT HrConvConvert(            <br>    IN PVOID pvConvInst,            // handle to instance of engine. <br>    IN PEDKCNVENV pEnv,             // environment of the convrsion <br>    IN LPCWSTR pszContentClass,     // class of source to be converted. <br>    IN PVOID pContentIn,            // source to be converted. <br>    IN PVOID pContentOut,           // converted object <br>    OUT EDKCNVRES *pcrResult)       // result. <br>{ <br>    HRESULT hr  =   NOERROR;    // return code <br>    CEDKConvEng * pceTmp    =   NULL;   // temporary conversion engine pointer <br> <br>    DEBUGPUBLIC("HrConvConvert()\n"); <br> <br>    // check input parameters <br>    hr = CHK_HrConvConvert(pvConvInst, pEnv, pszContentClass, pContentIn, <br>                              pContentOut, pcrResult); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    pceTmp = (CEDKConvEng *) pvConvInst; <br> <br>    hr = pceTmp-&gt;HrEDKConvert(pEnv, pszContentClass, pContentIn, pContentOut, <br>                              *pcrResult); <br> <br>    RETURN(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

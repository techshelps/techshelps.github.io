<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>JSWINDOW.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1890"></a>JSWINDOW.CPP</h2>
<pre><code>// --jswindow.cpp--------------------------------------------------------------- <br>// <br>//  Implements a Jump Sliding window (jswindow) object.  The window collects <br>//  events and can return either an estimate or actual number of events <br>//  collected during the most recent window period. <br>// <br>//  The window contains a current register and a FIFO buffer. <br>// <br>// <br>//    |___|    |___|___|___|___|___|___| ... |___|___| <br>//   Current     1   2   3   4   5   6        i-1  i <br>//                      FIFO Buffer <br>// <br>//  The current register will collect events until the current interval has <br>//  passed. The this interval defines the resolution of the JSWindow. <br>//  A typical interval resolution is 10 seconds. <br>// <br>//  When the current register's interval has elapsed, it dumps its contents <br>//  into the FIFO buffer. In doing so it pushes the oldest contents out of <br>//  the end of the buffer.  The length of the FIFO buffer is called the <br>//  "duration" of the window and is expressed as the number of intervals. <br>// <br>//  A running total of all of the events contained within the FIFO buffer <br>//  is kept. Whenever new events are added to the buffer, they are also <br>//  added to the running total. When the old events are pushed out of the <br>//  end of the buffer, they are subtracted from the running total. <br>// <br>//  The running total is the number of events recorded in the last <br>//  "duration" of time.  ie.  If the duration time is 60 resolution <br>//  units, each resolution unit being 60 seconds long, then the <br>//  running total is the number of events per hour (60 * 60 = 3600 seconds). <br>// <br>//  You can query the window value using the GetValue() member function. <br>//  If the interval hasn't had time to fill (ie. if the interval is 1 hour and <br>//  you query it after 1 minute) then the ratio of dwFractionCompleteNum / <br>//  dwFractionCompleteDen will represent the fraction of the window <br>//  period that was filled when the GetValue request was made. <br>// <br>//  This code is NOT multithread safe. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "jswindow.h" <br>#include "jswindow.chk" <br> <br> <br>//$--CJSWindow::CJSWindow------------------------------------------------------- <br>//  Constructor <br>// ----------------------------------------------------------------------------- <br>CJSWindow::CJSWindow() <br>{ <br>    DEBUGPRIVATE("CJSWindow::CJSWindow\n"); <br> <br>} <br> <br>//$--CJSWindow::~CJSWindow------------------------------------------------------ <br>//  Destructor <br>// ----------------------------------------------------------------------------- <br>CJSWindow::~CJSWindow() <br>{ <br>    DEBUGPRIVATE("CJSWindow::~CJSWindow\n"); <br> <br>} <br> <br>//$--CJSWindow::HrReset--------------------------------------------------------- <br>//  Sets up the parameters of the JSWindow. This function must be called <br>//  after creating and before using the interval. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindow::HrReset(        // RETURNS: HRESULT <br>    IN __int64 liNow,              // The current time in arbitrary units. <br>    IN __int64 liResolution,       // The resolution of the interval in arbitrary units. <br>    IN DWORD dwWindowDuration)     // The interval duration expressed in multiples of <br>                                   // resolution. <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPRIVATE("CJSWindow::rcReset\n"); <br> <br>    hr = m_FIFO.HrReset(dwWindowDuration); <br> <br>    m_liCurrentIntervalTimeStart = liNow; <br>    m_liResolution = liResolution; <br>    m_dwIntervalValue = 0; <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--CJSWindow::AdvanceToNow---------------------------------------------------- <br>//  Advances the JSWindow so that liNow is within the current active interval. <br>// ----------------------------------------------------------------------------- <br>VOID CJSWindow::AdvanceToNow(       // RETURNS: nothing <br>    IN __int64 liNow,               // Current time. <br>    OUT DWORD &amp;dwFIFOOut,           // Data pushed out of the FIFO buffer <br>OUT BOOL &amp;fAdvanced)            // returns TRUE if a jump happened <br>{ <br> <br>    HRESULT hr = NOERROR; <br>    DWORD dwFIFOOut1    = 0; <br>    DWORD dwFIFOOut2    = 0; <br>    DWORD iDelta        = 0; <br>    __int64 liDeltaTime = 0; <br> <br>    DEBUGPRIVATE("CJSWindow::AdvanceToNow\n"); <br> <br>fAdvanced = FALSE; <br> <br>hr = CHK_CJSWindow_AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br>if (FAILED(hr)) <br>return; <br> <br>    ASSERTERROR(m_liResolution!=0,"CJSWindow::AdvanceToNow() member m_liResolution == 0"); <br> <br>    // Calculate the number of intervals that have passed since <br>    // the window was last updated and liNow.  <br>    // <br>    // Find the difference between liNow and the last interval and divide <br>    // by the resolution. <br>    // <br>    // ----------------------------------------------------------------------------- <br> <br>    liDeltaTime = liNow - m_liCurrentIntervalTimeStart; <br>    iDelta = (DWORD)(liDeltaTime / m_liResolution); <br> <br>    if (iDelta &gt; 0) <br>    { <br>        fAdvanced = TRUE; <br>        m_FIFO.PushElement(m_dwIntervalValue, dwFIFOOut1); <br>        m_dwIntervalValue = 0; <br> <br> <br>        m_FIFO.PushNNulls(iDelta-1, dwFIFOOut2); <br>        m_liCurrentIntervalTimeStart = (m_liResolution * iDelta) + m_liCurrentIntervalTimeStart; <br>    } <br> <br>    dwFIFOOut = dwFIFOOut1 + dwFIFOOut2; <br> <br>    return; <br>} <br> <br> <br>//$--CJSWindowTotal::HrReset---------------------------------------------------- <br>//  Sets up the parameters of the JSWindow. This function must be called <br>//  after creating and before using the interval. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowTotal::HrReset(   // RETURNS: HRESULT <br>    IN __int64 liNow,              // The current time in arbitrary units. <br>    IN __int64 liResolution,       // The resolution of the interval in arbitrary units. <br>    IN DWORD dwWindowDuration)     // The interval duration expressed in multiples of <br>                                   // resolution. <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPRIVATE("CJSWindowTotal::HrReset()\n"); <br> <br>hr = CHK_CJSWindowTotal_HrReset(liNow, liResolution, dwWindowDuration); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    hr = CJSWindow::HrReset(liNow,liResolution,dwWindowDuration); <br> <br>    m_dwWindowTotal = 0; <br> <br>    RETURN(hr); <br>} <br> <br>//$--CJSWindowTotal::DataPoint-------------------------------------------------- <br>//  Used to add a count of events to the total window. <br>// ----------------------------------------------------------------------------- <br>VOID CJSWindowTotal::DataPoint( <br>    IN __int64 liNow,           // Event time in arbitrary units. <br>    IN DWORD dwValue)           // Number of events to add for this time. <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD dwFIFOIn  = 0; <br>    DWORD dwFIFOOut  = 0; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowTotal::DataPoint()\n"); <br> <br>hr = CHK_CJSWindowTotal_DataPoint(liNow, dwValue); <br>if (FAILED(hr)) <br>return; <br> <br>    dwFIFOIn = m_dwIntervalValue; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br>    if (fAdvanced) <br>    { <br>        m_dwWindowTotal += dwFIFOIn; <br>        m_dwWindowTotal -= dwFIFOOut; <br>    } <br> <br>    m_dwIntervalValue += dwValue; <br>} <br> <br> <br>//$--CJSWindowTotal::HrGetValue------------------------------------------------- <br>//  Returns the total number of events in the window period. Also returns <br>//  the number of intervals that have been entered. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowTotal::HrGetValue( <br>    IN __int64 liNow,                   // Current time expressed as FILETIME. <br>    OUT DWORD &amp;dwValue,                 // Receives window value. <br>    OUT DWORD &amp;dwFractionCompleteNum,   // numerator <br>    OUT DWORD &amp;dwFractionCompleteDen)   // denominator <br>{ <br>    HRESULT hr          = NOERROR; <br>    DWORD dwFIFOOut     = 0; <br>    DWORD dwFIFOIn      = 0; <br>    BOOL fAdvanced      = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowTotal::HrGetValue()\n"); <br> <br>hr = CHK_CJSWindowTotal_HrGetValue( <br>liNow,  <br>dwValue,  <br>dwFractionCompleteNum,  <br>dwFractionCompleteDen); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    dwValue = 0; <br>    dwFractionCompleteNum = 0; <br>    dwFractionCompleteDen = 1; <br> <br>    dwFIFOIn = m_dwIntervalValue; <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br>    if (fAdvanced) <br>    { <br>        m_dwWindowTotal += dwFIFOIn; <br>        m_dwWindowTotal -= dwFIFOOut; <br>    } <br> <br>    if (m_FIFO.dwNumberElements() != 0 ) <br>    { <br>        dwValue =  m_dwWindowTotal; <br>        dwFractionCompleteNum = m_FIFO.dwNumberElements(); <br>        dwFractionCompleteDen = m_FIFO.dwMaxNumberElements(); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--CJSWindowMin::DataPoint---------------------------------------------------- <br>//  Used to add a count of events to the total window. <br>// ----------------------------------------------------------------------------- <br>VOID CJSWindowMin::DataPoint( <br>    IN __int64 liNow,           // Event time in arbirary units. <br>    IN DWORD dwValue)           // Number of events to add for this time. <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD dwFIFOOut; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindow::DataPoint()\n"); <br> <br>hr = CHK_CJSWindowMin_DataPoint(liNow, dwValue); <br>if (FAILED(hr)) <br>return; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br> <br>    if (m_dwIntervalValue &gt; dwValue) <br>        m_dwIntervalValue = dwValue; <br>} <br> <br> <br>//$--CJSWindowMin::HrGetValue--------------------------------------------------- <br>//  Returns the total number of events in the window period. Also returns <br>//  the number of intervals that have been entered. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowMin::HrGetValue( <br>    IN __int64 liNow,                   // Current time expressed as FILETIME. <br>    OUT DWORD &amp;dwValue,                 // Receives window value. <br>    OUT DWORD &amp;dwFractionCompleteNum,   // numerator <br>    OUT DWORD &amp;dwFractionCompleteDen)   // denominator <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD i = 0; <br>    DWORD dwFIFOOut =0; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowMin::HrGetValue()\n"); <br> <br>hr = CHK_CJSWindowMin_HrGetValue( <br>liNow,  <br>dwValue,  <br>dwFractionCompleteNum,  <br>dwFractionCompleteDen); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    dwValue = 0; <br>    dwFractionCompleteNum = 0; <br>    dwFractionCompleteDen = 1; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br>    m_FIFO.Min(dwValue); <br> <br>    dwFractionCompleteNum = m_FIFO.dwNumberElements(); <br>    dwFractionCompleteDen = m_FIFO.dwMaxNumberElements(); <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--CJSWindowMax::DataPoint---------------------------------------------------- <br>//  Used to add a count of events to the total window. <br>// ----------------------------------------------------------------------------- <br>VOID CJSWindowMax::DataPoint( <br>    IN __int64 liNow,           // Event time in arbirary units. <br>    IN DWORD dwValue)           // Number of events to add for this time. <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD dwFIFOOut = 0; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowMax::DataPoint()\n"); <br> <br>hr = CHK_CJSWindowMax_DataPoint(liNow, dwValue); <br>if (FAILED(hr)) <br>return; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br> <br>    if (m_dwIntervalValue &lt; dwValue) <br>        m_dwIntervalValue = dwValue; <br>} <br> <br> <br>//$--CJSWindowMax::HrGetValue--------------------------------------------------- <br>//  Returns the total number of events in the window period. Also returns <br>//  the number of intervals that have been entered. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowMax::HrGetValue( <br>    IN __int64 liNow,                  // Current time expressed as FILETIME. <br>    OUT DWORD &amp;dwValue,                // Receives window value. <br>    OUT DWORD &amp;dwFractionCompleteNum,  // Numerator of fraction completed. <br>    OUT DWORD &amp;dwFractionCompleteDen)  // Denominator of fraction completed. <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD i = 0; <br>    DWORD dwFIFOOut = 0; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowMax::HrGetValue()\n"); <br> <br>hr = CHK_CJSWindowMax_HrGetValue( <br>liNow,  <br>dwValue,  <br>dwFractionCompleteNum,  <br>dwFractionCompleteDen); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    dwValue = 0; <br>    dwFractionCompleteNum = 0; <br>    dwFractionCompleteDen = 1; <br> <br>    AdvanceToNow(liNow,dwFIFOOut, fAdvanced); <br> <br>    m_FIFO.Max(dwValue); <br>    dwFractionCompleteNum = m_FIFO.dwNumberElements(); <br>    dwFractionCompleteDen = m_FIFO.dwMaxNumberElements(); <br> <br>    RETURN(hr); <br>} <br> <br> <br>//$--CJSWindowAverage::HrReset---------------------------------------------------- <br>//  Sets up the parameters of the JSWindow. This function must be called <br>//  after creating and before using the interval. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowAverage::HrReset( // RETURNS: HRESULT <br>    IN __int64 liNow,              // The current time in arbitrary units. <br>    IN __int64 liResolution,       // The resolution of the interval in arbitrary units. <br>    IN DWORD dwWindowDuration)     // The interval duration expressed in multiples of <br>                                   // resolution. <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    DEBUGPRIVATE("CJSWindowAverage::HrReset\n"); <br> <br>hr = CHK_CJSWindowAverage_HrReset(liNow, liResolution, dwWindowDuration); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    m_cIntervalValues = 0; <br>    m_dwIntervalTotal = 0; <br> <br>    hr = CJSWindow::HrReset(liNow, liResolution, dwWindowDuration); <br>    RETURN(hr); <br>} <br> <br> <br>//$--CJSWindowAverage::DataPoint---------------------------------------------------- <br>//  Used to add a count of events to the total window. <br>// ----------------------------------------------------------------------------- <br>VOID CJSWindowAverage::DataPoint( <br>    IN __int64 liNow,             // Event time in arbirary units. <br>    IN DWORD dwValue)             // Number of events to add for this time. <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD dwFIFOOut = 0; <br>    BOOL  fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowAverage::DataPoint()\n"); <br> <br>hr = CHK_CJSWindowAverage_DataPoint(liNow, dwValue); <br>if (FAILED(hr)) <br>return; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br> <br>    if (fAdvanced) <br>    { <br>        m_dwIntervalTotal = 0; <br>        m_cIntervalValues = 0; <br>    } <br> <br>    m_dwIntervalTotal += dwValue; <br>    m_cIntervalValues ++; <br>    if (m_cIntervalValues &gt; 0) <br>        m_dwIntervalValue = m_dwIntervalTotal / m_cIntervalValues; <br>    else <br>        m_dwIntervalValue = 0; <br> <br>} <br> <br>//$--CJSWindowAverage::HrGetValue----------------------------------------------- <br>//  Returns the total number of events in the window period. Also returns <br>//  the number of intervals that have been entered. <br>// ----------------------------------------------------------------------------- <br>HRESULT CJSWindowAverage::HrGetValue( <br>    IN __int64 liNow,                   // Current time expressed as FILETIME. <br>    OUT DWORD &amp;dwValue,                 // Receives window value. <br>    OUT DWORD &amp;dwFractionCompleteNum,   // numerator <br>    OUT DWORD &amp;dwFractionCompleteDen)   // denominator <br>{ <br>    HRESULT hr = NOERROR; <br>    DWORD dwSum = 0; <br>    DWORD i = 0; <br>    DWORD dwFIFOOut = 0; <br>    BOOL fAdvanced = FALSE; <br> <br>    DEBUGPRIVATE("CJSWindowAverage::HrGetValue()\n"); <br> <br>hr = CHK_CJSWindowAverage_HrGetValue( <br>liNow,  <br>dwValue,  <br>dwFractionCompleteNum,  <br>dwFractionCompleteDen); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    dwValue = 0; <br>    dwFractionCompleteNum = 0; <br>    dwFractionCompleteDen = 1; <br> <br>    AdvanceToNow(liNow, dwFIFOOut, fAdvanced); <br> <br>    m_FIFO.Average(dwValue); <br>    dwFractionCompleteNum = m_FIFO.dwNumberElements(); <br>    dwFractionCompleteDen = m_FIFO.dwMaxNumberElements(); <br> <br>    RETURN(hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LLMACRO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1818"></a>LLMACRO.H</h2>
<pre><code>//--llmacro.h------------------------------------------------------------------ <br>// <br>// Linked list macros. <br>// <br>// Copyright (C) Microsoft Corp., 1986-1996.  All rights reserved. <br>// <br>//----------------------------------------------------------------------------- <br> <br>#ifndef_LLMACRO_H <br>#define _LLMACRO_H <br> <br>// <br>// Single linked list manipulation macros. <br>// <br> <br>// <br>// Linked lists maintained by these macros are assumed to look like this: <br>// <br>//  ________      ________      ________ <br>//      |        |    |        |    |        | <br>//      |        |    |        |    |        | <br>// list head ptr ---&gt;|  head  |---&gt;| middle |---&gt;|  tail  |---&gt; NULL <br>//      |        |    |  ...   |    |        | <br>//      |        |    |        |    |        |&lt;---- <br>//      |________|    |________|    |________|    / <br>//                                                             / <br>// list tail ptr ----------------------------------------------- <br>// <br>// The macro parameters used are: <br>// <br>//  np -node ptr for node being added, removed, etc. <br>//  hd -list head ptr, as shown above <br>//  tl -list tail ptr, as shown above <br>// <br> <br>#define AddToSLLHead(np, hd, tl)\ <br>{\ <br>  if (!(hd))\ <br>    (tl)= (np);\ <br>  (np)-&gt;m_pNxt= (hd);\ <br>  (hd)= (np);\ <br>} <br> <br>#define AddToSLLTail(np, hd, tl)\ <br>{\ <br>  if (hd)\ <br>  {\ <br>    (tl)-&gt;m_pNxt= (np);\ <br>    (tl)= (np);\ <br>  }\ <br>  else\ <br>    (hd) = (tl) = (np);\ <br>} <br> <br>#define RmFromSLLHead(np, hd, tl)\ <br>{\ <br>  (np)= (hd);\ <br>  (hd)= (hd)-&gt;m_pNxt;\ <br>  if (!(hd))\ <br>    (tl) = NULL;\ <br>} <br> <br>// <br>// Double linked list manipulation macros. <br>// <br> <br>// <br>// Linked lists maintained by these macros are assumed to look like this: <br>// <br>//                    ________      ________      ________ <br>//     |        |    |        |    |        | <br>// list head ptr ---&gt;|        |---&gt;|        |---&gt;|        |---&gt; NULL <br>//                   |  head  |    | middle |    |  tail  | <br>//  ---|        |&lt;---|  ...   |&lt;---|        |&lt;--- <br>//  /  |________|    |________|    |________|   / <br>//                /                                           / <br>//                --------------------------------------------- <br>// <br>// The macro parameters used are: <br>// <br>//  np -node ptr for node being added, removed, etc. <br>//  lp -list head ptr, as shown above. <br>//  pn -previous node ptr, points at node after which an insertion <br>//is to be done <br>// <br>// NOTE that care must be taken in using these macros in a conditional statement <br>// (if ... else) due to the potential impact of the braces in the macros on <br>// the logic of the conditional statement. <br>// <br>// <br> <br>#defineAddToDLLHead(np, lp)\ <br>{\ <br>  if ((lp))\ <br>  {\ <br>    (np)-&gt;m_pPrv= (lp)-&gt;m_pPrv;\ <br>    (lp)-&gt;m_pPrv= (np);\ <br>  }\ <br>  else\ <br>    (np)-&gt;m_pPrv= (np);\ <br>  (np)-&gt;m_pNxt = (lp);\ <br>  (lp)= (np);\ <br>} <br> <br>#defineAddToDLLTail(np, lp)\ <br>{\ <br>  (np)-&gt;m_pNxt= NULL;\ <br>  if ((lp))\ <br>  {\ <br>    (np)-&gt;m_pPrv= (lp)-&gt;m_pPrv;\ <br>    (lp)-&gt;m_pPrv-&gt;m_pNxt= (np);\ <br>    (lp)-&gt;m_pPrv= (np);\ <br>  }\ <br>  else\ <br>  {\ <br>    (np)-&gt;m_pPrv= (np);\ <br>    (lp)= (np);\ <br>  }\ <br>} <br> <br>// <br>// InsertIntoDLL() assumes: <br>// <br>//lp != NULL <br>//pn != NULL <br>//pn is a node in lp <br>// <br> <br>#defineInsertIntoDLL(np, lp, pn)\ <br>{\ <br>  if ((pn)-&gt;m_pNxt)\ <br>  {\ <br>    (pn)-&gt;m_pNxt-&gt;m_pPrv= (np);\ <br>    (np)-&gt;m_pNxt= (pn)-&gt;m_pNxt;\ <br>  }\ <br>  else\ <br>  {\ <br>    (np)-&gt;m_pNxt= NULL;\ <br>    (lp)-&gt;m_pPrv= (np);\ <br>  }\ <br>  (pn)-&gt;m_pNxt= (np);\ <br>  (np)-&gt;m_pPrv= (pn);\ <br>} <br> <br>#defineRmFromDLL(np, lp)\ <br>{\ <br>  if ((np)-&gt;m_pNxt) \ <br>  {\ <br>    (np)-&gt;m_pNxt-&gt;m_pPrv= (np)-&gt;m_pPrv;\ <br>    if ((np) == (lp))\ <br>      (lp)= (np)-&gt;m_pNxt;\ <br>    else\ <br>      (np)-&gt;m_pPrv-&gt;m_pNxt= (np)-&gt;m_pNxt;\ <br>  }\ <br>  else\ <br>  {\ <br>    if ((np) == (lp))\ <br>      (lp)= NULL;\ <br>    else\ <br>    {\ <br>      (np)-&gt;m_pPrv-&gt;m_pNxt= NULL;\ <br>      (lp)-&gt;m_pPrv= (np)-&gt;m_pPrv;\ <br>    }\ <br>  }\ <br>} <br> <br>#defineRmFromDLLHead(np, lp)\ <br>{\ <br>  (np) = (lp);\ <br>  if ((lp)-&gt;m_pNxt)\ <br>  {\ <br>    (lp)-&gt;m_pNxt-&gt;m_pPrv= (lp)-&gt;m_pPrv;\ <br>    (lp)= (lp)-&gt;m_pNxt;\ <br>  }\ <br>  else\ <br>    (lp)= NULL;\ <br>} <br> <br>#endif// _LLMACRO_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

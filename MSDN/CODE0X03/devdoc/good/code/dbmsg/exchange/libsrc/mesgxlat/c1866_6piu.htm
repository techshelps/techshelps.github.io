<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVCLSS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1866"></a>CONVCLSS.CPP</h2>
<pre><code>// --convclss.cpp--------------------------------------------------------------- <br>//  <br>// Class that represents conversion class name/list info. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "convincl.h" <br>#include "convclss.chk" <br> <br>//$--CClassName::CClassName----------------------------------------------------- <br>// <br>//  DESCRIPTION: Initialize the conversion registry object constructor. <br>// <br>//  INPUT:  none <br>// <br>//  RETURNS:    nothing <br>// <br>//------------------------------------------------------------------------------ <br>CClassName::CClassName()  <br>{  <br>    DEBUGPRIVATE("CClassName::CClassName()\n"); <br> <br>    m_pszClassName = NULL; <br>    m_pEntryPoint = NULL; <br>    m_pcnNext = NULL;  <br>} <br> <br>//$--CClassName::~CClassName---------------------------------------------------- <br>// <br>// DESCRIPTION: CClassName destructor <br>// <br>// INPUT:   none <br>// <br>// RETURNS: nothing <br>// <br>//------------------------------------------------------------------------------ <br>CClassName::~CClassName()  <br>{ <br>    DEBUGPRIVATE("CClassName::~CClassName()\n"); <br> <br>    if(m_pEntryPoint != NULL) <br>    { <br>        m_pEntryPoint-&gt;Release(); <br>    } <br> <br>    MAPIFREEBUFFER(m_pszClassName); <br>} <br> <br>//$--CClassName::HrEDKSet---------------------------------------------------------- <br>// <br>//  DESCRIPTION: Initialize the conversion registry object. <br>// <br>//  INPUT:  pszClassName    --  class name <br>//          pEntryPoint --  entry point information <br>// <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input <br>//                          E_FAIL otherwise. <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CClassName::HrEDKSet(               // RETURNS: HRESULT <br>    IN LPCWSTR pszClassName,                // class name.      (Assigned) <br>    IN CDllEntryPoint * pEntryPoint )       // entry point info (Copied) <br>                                            //  reference count increased internally. <br>{ <br>    HRESULT  hr  =   NOERROR;    // return code <br> <br>    DEBUGPRIVATE("CClassName::HrEDKSet()\n"); <br> <br>    // check input parameters <br>    hr = CHK_CClassName_HrEDKSet(pszClassName, pEntryPoint); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    m_pEntryPoint = pEntryPoint; <br> <br>    pEntryPoint-&gt;AddRef(); <br> <br>    hr = HrStrWToStrW(pszClassName, &amp;m_pszClassName); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(m_pszClassName != NULL, "Bad m_pszClassName"); <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--CClassName::EDKDump----------------------------------------------------------- <br>// <br>// DESCRIPTION: dump the class contents. <br>// <br>// INPUT:   none <br>// <br>// RETURNS: void <br>// <br>//------------------------------------------------------------------------------ <br>void CClassName::EDKDump()  <br>{ <br>    DEBUGPRIVATE("CClassName::EDKDump()\n"); <br> <br>    // _tprintf(TEXT(" Class: %ls\n"), m_pszClassName ); <br> <br>    m_pEntryPoint-&gt;EDKDump(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MONCTX.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1875"></a>MONCTX.H</h2>
<pre><code>// --monctx.h------------------------------------------------------------------- <br>// <br>//  File containing definitions for monitor context and related structures. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#if !defined(_MONCTX_H) <br>#define _MONCTX_H <br> <br>#include &lt;winperf.h&gt; <br> <br>// <br>// Macro definitions <br>// <br> <br>// This checks to see that the value is a valid detail level as defined in  <br>// WINPERF.H.  Detail level describes the level of knowledge needed to  <br>// understand a given counter or object. <br>#define TEST_DETAIL_LEVEL(x) ( \ <br>(x) == PERF_DETAIL_NOVICE || \ <br>(x) == PERF_DETAIL_ADVANCED || \ <br>(x) == PERF_DETAIL_EXPERT || \ <br>(x) == PERF_DETAIL_WIZARD) <br> <br>#define ASSERT_DETAIL_LEVEL(x, y) ASSERTERROR(TEST_DETAIL_LEVEL(x), y) <br> <br>#define TEST_COUNTERDEF_ARRAY(_ccd, _lpcd) fIsValidCounterDefArray(_ccd, _lpcd) <br> <br> <br> <br>// Casts a FILETIME or LARGE_INTEGER to an __int64 <br>#define INT64(li) (*( \ <br>(__int64 *) \ <br>(ASSERTERROR(sizeof(li) == sizeof(__int64), "wrong size"), &amp;(li)) \ <br>)) <br> <br>// Casts an __int64 to a FILETIME <br>#define TO_FILETIME(i64) (*((FILETIME *)&amp;(i64))) <br> <br>// Constant value for one minute in system 8-byte time format. <br>#define ONE_MINUTE((__int64)60*10000000) <br> <br> <br> <br>// <br>// Internal Structure Definitions <br>// <br> <br>//$--MONCOUNTER----------------------------------------------------------------- <br>//  Internal structure representing a counter to be updated. <br>// ----------------------------------------------------------------------------- <br>typedef struct _MonCounter// (hungarian notation = mc) <br>{ <br>struct _MonCounter *lpmcNext;// ptr to next in current counter list <br>struct _MonCounter *lpmcNextJSW;// ptr to next in master JSW list <br>HJSWINDOW hjswJumpWindow;// handle of JSW for counter (or NULL) <br>LPCOUNTER lpcntCounter;// ptr to actual counter to update <br>    BOOL fZeroOnFree;                   // TRUE=zero this counter on gw shutdown <br>} MONCOUNTER, *LPMONCOUNTER; <br> <br> <br> <br>//$--MONFOLDER------------------------------------------------------------------ <br>//  Internal structure representing a folder to be monitored. <br>// ----------------------------------------------------------------------------- <br>typedef struct _MonFolder// (hungarian notation = mf) <br>{ <br>struct _MonFolder *lpmfNext;// pointer to next folder in chain <br>struct _MonContext *lpmcx;// pointer back to main context <br>LPMAPIFOLDER lpFolder;// folder this structure is linked to <br>LPMAPITABLE lpTable;// table of messages in folder <br>LPMAPIADVISESINK lpAdvise;// advise structure attached to table <br>ULONG ulConnection;// connection returned from Advise() <br> <br>LPMONCOUNTER lpmcMessagesInFolder;// (lists of counters for this folder) <br>LPMONCOUNTER lpmcBytesInFolder; <br>LPMONCOUNTER lpmcMessagesEnteringFolder; <br>LPMONCOUNTER lpmcBytesEnteringFolder; <br>LPMONCOUNTER lpmcMessagesLeavingFolder; <br>LPMONCOUNTER lpmcBytesLeavingFolder; <br> <br>CRITICAL_SECTION csCriticalSection;// critical section to synchronize  <br>// access to the "update request"  <br>// variables <br>BOOL fCriticalSectionInitialized;// flag that this critical section  <br>// was initialized <br> <br>// "Update request" variables.  The following four variables are set by  <br>// the folder notification routine and are used by the folder update  <br>// thread to update the folder counters.  This lets the folder notification  <br>// routine do less work. <br> <br>DWORD cMessagesEnteringFolder;// messages entering folder to process <br>DWORD cBytesEnteringFolder;// bytes entering folder to process <br>DWORD cMessagesLeavingFolder;// messages leaving folder to process <br>DWORD cBytesLeavingFolder;// bytes leaving folder to process <br> <br>// The following two variables are kept track of by the folder update  <br>// thread.  They keep a running total of the total number of bytes that  <br>// have entered and left the folder AS REPORTED TO THE WINDOWS NT  <br>// PERFORMANCE MONITOR SO FAR.  Together with the total bytes in the folder, <br>// they are used to determine when bytes are leaving the folder.  This  <br>// is nescessary because the notification engine tells us that a message  <br>// has left the folder, but not how many bytes it contained. <br> <br>ULONG cTotalBytesEnteringFolder;// total bytes we said entered folder <br>ULONG cTotalBytesLeavingFolder;// total bytes we said left folder <br> <br>BOOL fUpdateFolderSize;// "update request" to get new count  <br>// of messages and bytes in folder <br>} MONFOLDER, *LPMONFOLDER; <br> <br> <br> <br>//$--MONCONTEXT----------------------------------------------------------------- <br>//  Internal structure that holds all the variables needed for a performance  <br>//  monitoring session.  Right now the performance monitoring API is written  <br>//  to only allow one session, but it could easily be changed to allow multiple  <br>//  sessions. <br>// ----------------------------------------------------------------------------- <br>typedef struct _MonContext {// (hungarian notation = mcx) <br> <br>// name of gateway type and gateway instance <br> <br>LPSTR lpszObjectClass;// object class <br>LPSTR lpszObjectName;// object instance name <br> <br>// shared memory to communicate with the DLL <br> <br>DWORD cbSharedMemorySize;// size of shared memory block <br>HANDLE hSharedMemoryMapping;// handle of file mapping object <br>LPMONSHAREDMEMORY lpmsmSharedMemory; // pointer to shared memory block <br>LPCOUNTER lpcntCounter;// ptr to actual counters in shared mem <br>HANDLE hSharedMemoryMutex;// mutex to share memory <br> <br>// lists of non-folder INCREMENTING counters being monitored <br> <br>LPMONCOUNTER lpmcMessagesTransferredIn; // messages into Exchange <br>LPMONCOUNTER lpmcMessagesTransferredOut; // messages out of Exchange <br>LPMONCOUNTER lpmcBytesTransferredIn; // bytes into Exchange <br>LPMONCOUNTER lpmcBytesTransferredOut; // bytes out of Exchange <br>LPMONCOUNTER lpmcNDRsIn;// non-deliverables into Exchange <br>LPMONCOUNTER lpmcNDRsOut;// non-deliverables out of Exchange <br> <br>// lists of non-folder ABSOLUTE counters being monitored <br> <br>LPMONCOUNTER lpmcAssociations;// current number of associations <br> <br>// list of counters allocated but not put onto another list yet <br>// (this is to avoid memory leaks in case of aborting startup) <br> <br>LPMONCOUNTER lpmcFreeList;// list of counters not being used <br> <br>// information about folders being monitored <br> <br>LPMONFOLDER lpmfFolderList;// list of folders to monitor <br> <br>// information needed by jumping sliding windows <br> <br>LPMONCOUNTER lpmcJSWCounterList;// list of counters with JSW's <br>__int64 dwlCurrentTime;// 64 bit current system time <br> <br>// information about the thread that updates the jumping sliding  <br>// windows and folders <br> <br>BOOL fUpdateThreadRunning;// set if the thread is running <br>HANDLE hUpdateThread;// handle to the thread process <br>DWORD dwUpdateThreadID;// thread ID <br>HANDLE hUpdateThreadWakeEvent;// handle to event to wake the thread <br>BOOL fUpdateThreadTerminate;// flag set to terminate thread <br> <br>// First Counter and First Help values for this gateway.  These are taken  <br>// from the SYSTEM\CurrentControlSet\Services\&lt;lpszObjectClass&gt;\Performance <br>// key in the registry. <br> <br>DWORD dwFirstCounter;// "First Counter" from registry <br>DWORD dwFirstHelp;// "First Help" from registry <br>DWORD dwLastCounter;// "Last Counter" from registry <br>DWORD dwLastHelp;// "Last Help" from registry <br>DWORD iObjectTitleOffset;// offset of object name from <br>// First Counter <br> <br>// Other things that need to be kept track of <br> <br>DWORD dwObjectDetailLevel;// complexity of object (winperf.h) <br>DWORD dwDefaultCounter;// default counter on lists <br> <br>} MONCONTEXT, *LPMONCONTEXT; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

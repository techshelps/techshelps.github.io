<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTL_DN.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1848"></a>UTL_DN.C</h2>
<pre><code>// --UTL_CLI.c------------------------------------------------------------------ <br>// <br>// Utilities for retrieving distinguished names from Exchange server <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "utl_dn.chk" <br> <br>//$--HrGetMailboxDN---------------------------------------------------------- <br>//  Retrieves mailbox distinguished name from the current session object. <br>//  Example output: /O=Enterprise/OU=Site/CN=Recipients/CN=MailboxName <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGetMailboxDN( <br>    IN  LPMAPISESSION lphSession,       // current session <br>    OUT LPSTR *ppszMailboxDN)           // distinguished name of mailbox. <br>{ <br>    HRESULT         hr              = NOERROR; <br>    LPMAPIPROP      lpSessionProps  = NULL;  <br>    LPSPropValue    lpEmailAddress  = NULL; <br>    ULONG           cProps          = 0L; <br> <br>    static SPropTagArray PropEmailAddress = { 1L, { PR_EMAIL_ADDRESS_A}}; <br> <br>    DEBUGPUBLIC( "HrGetMailboxDN()"); <br> <br>    hr = CHK_HrGetMailboxDN( lphSession, ppszMailboxDN); <br>    if( FAILED( hr)) <br>        RETURN( hr); <br> <br>    hr = HrOpenSessionObject( lphSession, &amp;lpSessionProps); <br>    if( FAILED( hr)) <br>        goto cleanup; <br> <br>    hr = MAPICALL( lpSessionProps)-&gt;GetProps( lpSessionProps, <br>        &amp;PropEmailAddress, <br>        0L, <br>        &amp;cProps, <br>        &amp;lpEmailAddress); <br>    if( FAILED( hr) || hr == MAPI_W_ERRORS_RETURNED) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR( cProps == 1, "Unexpected number of props returned!"); <br>    ASSERTERROR( lpEmailAddress != NULL, "Invalid EmailAddress prop"); <br> <br>    hr = MAPIAllocateBuffer( cbStrLenA( lpEmailAddress-&gt;Value.lpszA), (PVOID*)ppszMailboxDN); <br>    if( FAILED( hr)) <br>    { <br>        hr = HR_LOG( E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    lstrcpyA( *ppszMailboxDN, lpEmailAddress-&gt;Value.lpszA); <br> <br>cleanup: <br>    MAPIFREEBUFFER( lpEmailAddress); <br> <br>    ULRELEASE( lpSessionProps); <br> <br>    RETURN( hr); <br>} <br> <br>//$--HrGetServerDN---------------------------------------------------------- <br>//  Retrieves server distinguished name from the current session object. <br>//  Example output: /O=Enterprise/OU=Site/CN=Servers/CN=ServerName/CN=NULL <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGetServerDN( <br>    IN  LPMAPISESSION lphSession,       // current session <br>    OUT LPSTR *ppszServerDN)            // distinguished name of server.  <br>{ <br>    HRESULT         hr              = NOERROR; <br>    LPMAPIPROP      lpSessionProps  = NULL;  <br>    LPSPropValue    lpHomeMTA       = NULL; <br>    ULONG           cbDN            = 0L; <br>    ULONG           cProps          = 0L; <br>    LPSTR           lpLastCN        = NULL; <br> <br>    static SPropTagArray PropHomeMTA = { 1L, { PR_EMS_AB_HOME_MTA_A}}; <br> <br>    DEBUGPUBLIC( "HrGetServerDN()"); <br>   <br>    hr = CHK_HrGetServerDN( lphSession, ppszServerDN); <br>    if( FAILED( hr)) <br>        RETURN( hr); <br> <br>    hr = HrOpenSessionObject( lphSession, &amp;lpSessionProps); <br>    if( FAILED( hr)) <br>        goto cleanup; <br> <br>    hr = MAPICALL( lpSessionProps)-&gt;GetProps( lpSessionProps, <br>        &amp;PropHomeMTA, <br>        0L, <br>        &amp;cProps, <br>        &amp;lpHomeMTA); <br>    if( FAILED( hr) || hr == MAPI_W_ERRORS_RETURNED) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR( cProps == 1, "Unexpected number of props returned!"); <br>    ASSERTERROR( lpHomeMTA != NULL, "Invalid HomeMTA prop"); <br> <br>    // Search for last "/cn=" and ignore it when copying string <br>    lpLastCN = strrchr( lpHomeMTA-&gt;Value.lpszA, '/'); <br>    if( lpLastCN == NULL || <br>        _strnicmp( lpLastCN, "/cn=", 4) != 0) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbDN = lpLastCN - lpHomeMTA-&gt;Value.lpszA; <br> <br>    hr = MAPIAllocateBuffer( cbDN + 1, (PVOID*)ppszServerDN); <br>    if( FAILED( hr)) <br>    { <br>        hr = HR_LOG( E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    strncpy( *ppszServerDN, lpHomeMTA-&gt;Value.lpszA, cbDN); <br>    (*ppszServerDN)[cbDN] = '\0'; <br> <br>cleanup: <br>    MAPIFREEBUFFER( lpHomeMTA); <br> <br>    ULRELEASE( lpSessionProps); <br> <br>    RETURN( hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

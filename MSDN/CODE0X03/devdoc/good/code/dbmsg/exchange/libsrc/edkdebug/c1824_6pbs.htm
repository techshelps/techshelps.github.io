<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAPIMEM.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1828"></a>MAPIMEM.C</h2>
<pre><code>// --mapimem.c------------------------------------------------------------------- <br>//  <br>//  Memory wrapping functions for DEBUG builds. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#define _PRIVATE_EDKDEBUG_H <br>#define _PRIVATE_MEMORY_H <br> <br>#include "edk.h" <br>#include "_exchdbg.h" <br> <br>#include &lt;stddef.h&gt; <br>#include &lt;malloc.h&gt; <br> <br>//$--EDKDBG_MAPIAllocateBuffer-------------------------------------------------- <br>//  Wrapper for MAPIAllocateBuffer(). <br>// ----------------------------------------------------------------------------- <br>SCODE EDKDBG_MAPIAllocateBuffer(        // RETURNS: status code <br>    IN  ULONG ulLine,                   // line number <br>    IN  LPSTR lpszFile,                 // file name <br>    IN  ULONG ulSize,                   // size of memory block <br>    OUT LPVOID *lppv)                   // pointer to memory block address <br>                                        // variable <br>{ <br>    SCODE sc            = 0; <br>    CHAR  buf[BUFSIZ+1] = {0}; <br> <br>    if(IsBadWritePtr(lppv, sizeof(LPVOID))) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: invalid pointer [%08lx]\n", lppv); <br> <br>        REPORT_ERROR(buf); <br> <br>        sc = E_INVALIDARG; <br> <br>        return(sc); <br>    } <br> <br>    sc = MAPIAllocateBuffer( <br>        ulSize, <br>        lppv); <br> <br>    if(FAILED(sc)) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: allocation of [%lu] bytes failed [%08lx]\n",ulSize,GetLastError()); <br> <br>        REPORT_ERROR(buf); <br> <br>        _DebugMemoryStatus(ulLine,lpszFile,ulSize); <br>    } <br> <br>    return(sc); <br>} <br> <br>//$--EDKDBG_MAPIAllocateMore---------------------------------------------------- <br>//  Wrapper for MAPIAllocateMore(). <br>// ----------------------------------------------------------------------------- <br>SCODE EDKDBG_MAPIAllocateMore(          // RETURNS: status code <br>    IN  ULONG ulLine,                   // line number <br>    IN  LPSTR lpszFile,                 // file name <br>    IN  ULONG ulSize,                   // size of memory block <br>    IN  LPVOID lpvOriginal,             // pointer to original memory block <br>    OUT LPVOID *lppvData)               // pointer to memory block address <br>                                        // variable <br>{ <br>    SCODE sc            = 0; <br>    CHAR  buf[BUFSIZ+1] = {0}; <br> <br>    if(IsBadReadPtr(lpvOriginal, 1)) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: invalid original pointer [%08lx]\n", lpvOriginal); <br> <br>        REPORT_ERROR(buf); <br> <br>        sc = E_INVALIDARG; <br> <br>        return(sc); <br>    } <br> <br>    if(IsBadWritePtr(lppvData, sizeof(LPVOID))) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: invalid pointer [%08lx]\n", lppvData); <br> <br>        REPORT_ERROR(buf); <br> <br>        sc = E_INVALIDARG; <br> <br>        return(sc); <br>    } <br> <br>    sc = MAPIAllocateMore( <br>        ulSize, <br>        lpvOriginal, <br>        lppvData); <br> <br>    if(FAILED(sc)) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: allocation of [%lu] bytes failed [%08lx]\n",ulSize,GetLastError()); <br> <br>        REPORT_ERROR(buf); <br> <br>        _DebugMemoryStatus(ulLine,lpszFile,ulSize); <br>    } <br> <br>    return(sc); <br>} <br> <br>//$--EDKDBG_MAPIFreeBuffer------------------------------------------------------ <br>//  Wrapper for MAPIFreeBuffer(). <br>// ----------------------------------------------------------------------------- <br>SCODE EDKDBG_MAPIFreeBuffer(            // RETURNS: status code <br>    IN ULONG ulLine,                    // line number <br>    IN LPSTR lpszFile,                  // file name <br>    IN LPVOID lpv)                      // pointer to memory block <br>{ <br>    SCODE sc            = 0; <br>    CHAR  buf[BUFSIZ+1] = {0}; <br> <br>    if((lpv != NULL) &amp;&amp; IsBadWritePtr(lpv, 1)) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: invalid pointer [%08lx]\n", lpv); <br> <br>        REPORT_ERROR(buf); <br> <br>        sc = E_INVALIDARG; <br> <br>        return(sc); <br>    } <br> <br>    sc = MAPIFreeBuffer(lpv); <br> <br>    if(FAILED(sc)) <br>    { <br>    _snprintf(buf,BUFSIZ,"MEMORY: deallocation failed\n"); <br> <br>        REPORT_ERROR(buf); <br>    } <br> <br>    return(sc); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVENGN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1871"></a>CONVENGN.CPP</h2>
<pre><code>// --convengn.cpp--------------------------------------------------------------- <br>//  <br>// Conversion engine code.  This file defines the CEDKConvEng class which <br>// defines the top level behavior of the conversion engine. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// <br>// ----------------------------------------------------------------------------- <br> <br>#include "convincl.h" <br>#include "convengn.chk" <br> <br>//$--CEDKConvEng::CEDKConvEng---------------------------------------------------- <br>// <br>//  DESCRIPTION: constructor for CEDKConvEng.  Required because CEDKConvEng has contained <br>//  objects with CTORs. <br>// <br>//  INPUT: none <br>// <br>//  RETURNS:    nothing <br>// <br>//------------------------------------------------------------------------------ <br>CEDKConvEng::CEDKConvEng() <br>{ <br>    DEBUGPRIVATE("CEDKConvEng::CEDKConvEng()\n"); <br>} <br> <br>//$--CEDKConvEng::HrEDKInitialize--------------------------------------------------- <br>// <br>//  DESCRIPITON: Initialize the conversion engine. <br>// <br>//  INPUT:  hEventSource    --  event source handle <br>// <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input <br>//                          E_FAIL otherwise. <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CEDKConvEng::HrEDKInitialize(   // RETURNS: HRESULT <br>        IN HANDLE hEventSource)            // event source handle <br>{ <br>    HRESULT hr  =    NOERROR; <br> <br>    DEBUGPRIVATE("CEDKConvEng::HrEDKInitialize()\n"); <br> <br>    // check input parameters <br>    hr = CHK_CEDKConvEng_HrEDKInitialize(hEventSource); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    m_hEventSource = hEventSource; <br> <br>    hr = m_crRegistry.HrEDKInitialize(); <br> <br>    RETURN(hr); <br> <br>} <br> <br>//$--CEDKConvEng::HrEDKConvert------------------------------------------------------ <br>// <br>//  DESCRIPTION: Search for a suitable conversion.  If a suitable conversion is <br>//  found, invoke it. <br>// <br>//  INPUT:  pEnv    --  environment of the conversion <br>//          pszContentClass --  class of source to be converted <br>//          pContentIn  --  source to be converted <br>//          pContentOut --  converted object <br>// <br>//  OUTPUT:  <br>//          crResult    --  result <br>//           <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input <br>//                          E_FAIL otherwise. <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CEDKConvEng::HrEDKConvert(          // RETURNS:  HRESULT <br>    IN PEDKCNVENV pEnv,             // environment of the conversion <br>    IN LPCWSTR pszContentClass,     // class of source to be converted. <br>    IN PVOID pContentIn,            // source to be converted. <br>    IN PVOID pContentOut,           // converted object <br>    OUT EDKCNVRES &amp; crResult)       // result. <br>{ <br>    HRESULT hr  =   NOERROR;        // return code <br>    BOOL bFoundAtLeastOneCandidate = FALSE; <br>    LPCWSTR pszConversionPoint = NULL;  //  conversion point wide string <br> <br>    DEBUGPRIVATE("CEDKConvEng::HrEDKConvert()\n"); <br> <br>    // check input parameters <br>    hr = CHK_CEDKConvEng_HrEDKConvert(pEnv, pszContentClass, pContentIn, pContentOut, <br>                          crResult); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    m_bFoundAtLeastOneAccept = FALSE; <br>     <br>    // <br>    //  Find all candidate converters <br>    // <br> <br>    // <br>    //  start search. <br>    // <br> <br>    crResult = GCR_NO_CANDIDATE; <br> <br>    if(pEnv != NULL) <br>    { <br>        pszConversionPoint = pEnv-&gt;pszConversionPoint; <br>    } <br> <br>    hr = m_crRegistry.HrEDKSearchOpen(pszConversionPoint, pszContentClass, m_pepConverter); <br> <br>    if( FAILED(hr) ) <br>    { <br>        goto cleanup; <br>    } <br> <br>    while( TRUE ) <br>    { <br>        // Find next candidate conversion DLL. <br>        hr = m_crRegistry.HrEDKSearchNext(); <br> <br>        if ( FAILED(hr) ) <br>        { <br>            // no more candidate DLLs. <br>            // break; <br>            break; <br>        } <br> <br>        crResult = GCR_CANNOT_CONVERT; <br> <br>        bFoundAtLeastOneCandidate = TRUE; <br> <br>        // <br>        //  Display some debug info. <br>        // <br>        #ifdef DEBUG <br>            // _tprintf( TEXT(" Attempting converter for class %ls\n"), pszContentClass ); <br>            m_pepConverter-&gt;EDKDump(); <br>        #endif <br> <br>        // <br>        // Attempt the conversion. <br>        // <br> <br>        hr = HrEDKAttemptConversion( <br>            pEnv,  <br>            pszContentClass, <br>            pszConversionPoint, <br>            pContentIn,  <br>            pContentOut, <br>            crResult); <br> <br>        if(FAILED(hr))       // catastrophic error. <br>        { <br>            goto cleanup; <br>        } <br> <br>        if(crResult == GCR_OK )    // conversion happened. <br>        { <br>            goto cleanup; <br>        } <br> <br>    }   // end while <br> <br>    // <br>    //  Detect and report the case when no candidates found. <br>    // <br> <br>    if(!bFoundAtLeastOneCandidate) <br>    { <br>        EventLogMsgW( <br>            MESGXLAT_CNV_NO_CANDIDATE,       // event identfier <br>            2,                          // # of strings <br>            pszConversionPoint,         // string 1 <br>            pszContentClass,                <br>            0);                         // # of error codes <br>    } <br> <br>    // <br>    //  Detect and report the case when candidates found but won't accept. <br>    // <br> <br>    if(bFoundAtLeastOneCandidate &amp;&amp; !m_bFoundAtLeastOneAccept) <br>    { <br>        WCHAR   szRcTmp[(sizeof(HRESULT)+1)*2] = {0}; <br> <br>        swprintf(szRcTmp, L"%08lx", hr); <br> <br>        EventLogMsgW( <br>            MESGXLAT_CNV_NO_ACCEPT,  // event identifier <br>            4,                  // # of strings <br>            m_pepConverter-&gt;pszDllName(),   // string 1 <br>            pszConversionPoint, // string 2 <br>            pszContentClass, <br>            szRcTmp, <br>            0);                 // # of error codes <br>    } <br> <br>cleanup: <br> <br>    m_crRegistry.EDKSearchClose(); <br> <br>    if(hr == EDK_E_END_OF_FILE)       // just couldn't find a converter.  Only returned by Find/Next <br>    { <br>        crResult = GCR_NO_CANDIDATE; <br> <br>        hr = HR_LOG(NOERROR); <br>    } <br> <br>    RETURN(hr); <br> <br>} <br> <br>//$--CEDKConvEng::HrEDKAttemptConversion-------------------------------------------- <br>// <br>//  DESCRIPTION: Attempt a particular conversion. <br>// <br>//  INPUT:  pEnv    --  environment of the conversion <br>//          pszContentClass --  class of source to be converted <br>//          pszConversionPoint  --  where the conversion happened <br>//          pContentIn  --  source to be converted <br>//          pContentOut --  converted object <br>// <br>//  OUTPUT:  <br>//          crResult    --  result <br>// <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input, <br>//                          E_FAIL otherwise. <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CEDKConvEng::HrEDKAttemptConversion( <br>    IN PEDKCNVENV pEnv,             // environment of the convrsion <br>    IN LPCWSTR pszContentClass,     // class of source to be converted. <br>    IN LPCWSTR pszConversionPoint,  // where the conversion happened. <br>    IN PVOID pContentIn,            // source to be converted. <br>    IN PVOID pContentOut,           // converted object <br>    OUT EDKCNVRES &amp; crResult)       // result. <br>{ <br>    HRESULT hr  =   NOERROR;        // return code <br>    CEDKConvDll cDll(m_pepConverter, m_hEventSource);   // conversion DLL <br> <br>    DEBUGPRIVATE("CEDKConvEng::HrEDKAttemptConversion()\n"); <br> <br>    // check input parameters <br>    hr = CHK_CEDKConvEng_HrEDKAttemptConversion(pEnv, pszContentClass, pszConversionPoint, <br>                                    pContentIn, pContentOut, crResult); <br> <br>    if ( FAILED(hr) ) <br>    { <br>        RETURN(hr); <br>    } <br> <br>    // <br>    //  Make a connection to the DLL. <br>    // <br>    hr = cDll.HrEDKLoad(); <br> <br>    if(SUCCEEDED(hr)) <br>    { <br>        BOOL bAmCandidate = FALSE; <br> <br>        // <br>        //  Can this DLL handle the message class? <br>        // <br>        hr = cDll.HrEDKQueryCapability(pEnv, pszContentClass, pContentIn, bAmCandidate); <br> <br>        if(SUCCEEDED(hr) &amp;&amp; bAmCandidate) <br>        { <br>            m_bFoundAtLeastOneAccept = TRUE; <br> <br>            // <br>            //  Yes, try to perform the conversion. <br>            // <br> <br>            hr = cDll.HrEDKConvert( <br>                pEnv, pszContentClass, pContentIn, pContentOut, crResult); <br> <br>            if(FAILED(hr)) <br>            { <br>                crResult = GCR_CONVERSION_FAILED; <br> <br>                // <br>                //  Report conversion failure <br>                // <br> <br>                { <br>                    WCHAR   szRcTmp[(sizeof(HRESULT)+1)*2] = {0}; <br> <br>                    swprintf(szRcTmp, L"%08lx", hr); <br> <br>                    EventLogMsgW( <br>                        MESGXLAT_CNV_CONVERT_FAIL,   // event identifier <br>                        4,                      // # of strings <br>                        m_pepConverter-&gt;pszDllName(),   // string 1 <br>                        pszConversionPoint,     // string 2 <br>                        pszContentClass, <br>                        szRcTmp,     <br>                        0);                     // # of error codes <br>                } <br> <br>            } <br>        } <br>        else <br>        { <br>            if(FAILED(hr)) <br>            { <br>                // <br>                //  Report query failure <br>                // <br> <br>                { <br>                    WCHAR   szRcTmp[(sizeof(HRESULT)+1)*2] = {0}; <br> <br>                    swprintf(szRcTmp, L"%08lx", hr); <br> <br>                    EventLogMsgW( <br>                        MESGXLAT_CNV_QUERY_FAIL,         // event identifier <br>                        4,                          // # of strings <br>                        m_pepConverter-&gt;pszDllName(),   // string 1 <br>                        pszConversionPoint,         // string 2 <br>                        pszContentClass,                         <br>                        szRcTmp, <br>                        0);                         // # of error codes <br>                } <br> <br>            } <br>        } <br>    } <br>    else <br>    { <br>        crResult = GCR_CANNOT_LOAD; <br>    } <br> <br>    // Don't unload DLL.  The DLL cache takes care of this, <br>    // when appropriate. <br> <br>    RETURN(hr); <br> <br>} <br> <br> <br>//$--CEDKConvEng::HrEDKUninitialize------------------------------------------------- <br>// <br>//  DESCRIPTION: Uninitialize a conversion engine. <br>// <br>//  INPUT:  none <br>// <br>//  RETURNS:    HRESULT --  NOERROR if successful, <br>//                          E_FAIL otherwise. <br>// <br>//------------------------------------------------------------------------------ <br>HRESULT CEDKConvEng::HrEDKUninitialize() <br>{ <br>    DEBUGPRIVATE("CEDKConvEng::HrEDKUninitialize()\n"); <br> <br>    RETURN(NOERROR); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

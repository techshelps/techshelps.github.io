<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADDRESS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1833"></a>IADDRESS.C</h2>
<pre><code>// --iaddress.c----------------------------------------------------------------- <br>//  <br>//  Module containing MAPI utility functions for addressing. <br>//  <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>#include "iaddress.chk" <br> <br>//$--HrMAPICreateAddressList----------------------------------------------------- <br>//  Create an address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPICreateAddressList(             // RETURNS: return code <br>    IN ULONG cProps,                        // count of values in address list <br>                                            // entry <br>    IN LPSPropValue lpPropValues,           // pointer to address list entry <br>    OUT LPADRLIST *lppAdrList)              // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    SCODE           sc              = 0; <br>    LPSPropValue    lpNewPropValues = NULL; <br>    ULONG           cBytes          = 0; <br> <br>    DEBUGPUBLIC("HrMAPICreateAddressList()\n"); <br> <br>    hr = CHK_HrMAPICreateAddressList( <br>        cProps, <br>        lpPropValues, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lppAdrList = NULL; <br> <br>    sc = ScDupPropset( <br>        cProps, <br>        lpPropValues, <br>MAPIAllocateBuffer, <br>&amp;lpNewPropValues); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cBytes = CbNewADRLIST(1); <br> <br>    sc = MAPIAllocateBuffer(cBytes, lppAdrList); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    // Initialize ADRLIST structure <br>    ZeroMemory(*lppAdrList, cBytes); <br> <br>    (*lppAdrList)-&gt;cEntries = 1; <br>    (*lppAdrList)-&gt;aEntries[0].cValues = cProps; <br>    (*lppAdrList)-&gt;aEntries[0].rgPropVals = lpNewPropValues; <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        if(lppAdrList != NULL) <br>        { <br>            MAPIFREEBUFFER(*lppAdrList); <br>            *lppAdrList = NULL; <br>        } <br>        MAPIFREEBUFFER(lpNewPropValues); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPIAppendAddressList----------------------------------------------------- <br>//  Append to an address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPIAppendAddressList(             // RETURNS: return code <br>    IN ULONG cProps,                        // count of values in address list <br>                                            // entry <br>    IN LPSPropValue lpPropValues,           // pointer to address list entry <br>    IN OUT LPADRLIST *lppAdrList)           // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    SCODE           sc              = 0; <br>    LPADRLIST       lpAdrList       = NULL; <br>    LPADRENTRY      lpAdrEntry      = NULL; <br>    LPSPropValue    lpNewPropValues = NULL; <br>    ULONG           i               = 0; <br>    ULONG           cBytes          = 0; <br>    ULONG           cEntries        = 0; <br> <br>    DEBUGPUBLIC("HrMAPIAppendAddressList()\n"); <br> <br>    hr = CHK_HrMAPIAppendAddressList( <br>        cProps, <br>        lpPropValues, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    sc = ScDupPropset( <br>        cProps, <br>        lpPropValues, <br>MAPIAllocateBuffer, <br>&amp;lpNewPropValues); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cEntries = ((*lppAdrList)-&gt;cEntries + 1); <br> <br>    cBytes = CbNewADRLIST(cEntries); <br> <br>    sc = MAPIAllocateBuffer(cBytes, (void **)&amp;lpAdrList); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    // Initialize ADRLIST <br>    ZeroMemory(lpAdrList, cBytes); <br> <br>    lpAdrEntry = lpAdrList-&gt;aEntries; <br> <br>    // Copy old ADRENTRY values to array <br>    for(i = 0; i &lt; (*lppAdrList)-&gt;cEntries; i++) <br>    { <br>        lpAdrEntry[i].cValues = <br>            (*lppAdrList)-&gt;aEntries[i].cValues; <br>        lpAdrEntry[i].rgPropVals = <br>            (*lppAdrList)-&gt;aEntries[i].rgPropVals; <br>    } <br> <br>    // Copy new ADRENTRY values to array <br>    lpAdrEntry[i].cValues = cProps; <br>    lpAdrEntry[i].rgPropVals = lpNewPropValues; <br> <br>    lpAdrList-&gt;cEntries = (*lppAdrList)-&gt;cEntries + 1; <br> <br>    MAPIFREEBUFFER(*lppAdrList); <br> <br>    *lppAdrList = lpAdrList; <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(lpNewPropValues); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPICreateSizedAddressList------------------------------------------------ <br>//  Create a sized address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPICreateSizedAddressList(        // RETURNS: return code <br>    IN ULONG cEntries,                      // count of entries in address list <br>    OUT LPADRLIST *lppAdrList)              // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    SCODE           sc              = 0; <br>    ULONG           cBytes          = 0; <br> <br>    DEBUGPUBLIC("HrMAPICreateAddressList()\n"); <br> <br>    hr = CHK_HrMAPICreateSizedAddressList( <br>        cEntries, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lppAdrList = NULL; <br> <br>    cBytes = CbNewADRLIST(cEntries); <br> <br>    sc = MAPIAllocateBuffer(cBytes, lppAdrList); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    // Initialize ADRLIST structure <br>    ZeroMemory(*lppAdrList, cBytes); <br> <br>    (*lppAdrList)-&gt;cEntries = cEntries; <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrMAPISetAddressList-------------------------------------------------------- <br>//  Set an address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMAPISetAddressList(                // RETURNS: return code <br>    IN ULONG iEntry,                        // index of address list entry <br>    IN ULONG cProps,                        // count of values in address list <br>                                            // entry <br>    IN LPSPropValue lpPropValues,           // pointer to address list entry <br>    IN OUT LPADRLIST lpAdrList)             // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    SCODE           sc              = 0; <br>    LPSPropValue    lpNewPropValues = NULL; <br>    ULONG           cBytes          = 0; <br> <br>    DEBUGPUBLIC("HrMAPISetAddressList()\n"); <br> <br>    hr = CHK_HrMAPISetAddressList( <br>        iEntry, <br>        cProps, <br>        lpPropValues, <br>        lpAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    if(iEntry &gt;= lpAdrList-&gt;cEntries) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    sc = ScDupPropset( <br>        cProps, <br>        lpPropValues, <br>MAPIAllocateBuffer, <br>&amp;lpNewPropValues); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    if(lpAdrList-&gt;aEntries[iEntry].rgPropVals != NULL) <br>    { <br>        MAPIFREEBUFFER(lpAdrList-&gt;aEntries[iEntry].rgPropVals); <br>    } <br> <br>    lpAdrList-&gt;aEntries[iEntry].cValues = cProps; <br>    lpAdrList-&gt;aEntries[iEntry].rgPropVals = lpNewPropValues; <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

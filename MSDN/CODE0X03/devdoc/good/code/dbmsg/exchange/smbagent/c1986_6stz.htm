<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOPICS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1997"></a>TOPICS.H</h2>
<pre><code>// --Topics.h------------------------------------------------------------------- <br>//  <br>// This module contains functions for maintaining and using a topic object for  <br>// SMBAGENT.  A topic has a folder, an introductory message, and a list of  <br>// subscribers.   <br>// <br>// The list of subscribers are contained in the introductory  <br>// message as the "TO" recipient list.  The introductory message is contained in <br>// the topic folder.  The topic folder is contained in a root topics folder. <br>// <br>// These functions all take as their first parameter a "THIS" pointer which is a <br>// pointer to the instance of the STopic object to work with. <br>// <br>// See TOPCACHE.H for details on the relationship between the STFolderArray, the <br>// STopicCache, and the STopic objects. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _TOPICS_H_ <br> <br>#ifdef THIS <br>#undef THIS <br>#endif <br>#define THIS    // Defined to do nothing but comment a function parameter. <br> <br>#ifndef PROTECTED  <br>#define PROTECTED  <br>#endif <br> <br>//$--STopic--------------------------------------------------------------------- <br>// The following structure contains a single item of the topic cache. <br>// ----------------------------------------------------------------------------- <br> <br>typedef struct  <br>{ <br>    ULONG           iTFolderArray;      // Index into folder row set of this folder. <br>    ULONG           cUsageCnt;          // Number of times this topic was used while in the cache. <br>    LPMAPIFOLDER    lpFolder;           // Ptr to open folder interface. <br>    LPMESSAGE       lpIntroMsg;         // Ptr to open intro msg interface. <br>    LPSRowSet       lpSubscriberRowSet; // Ptr to row set of subscribers. <br>    LPSRow          lpCurSubscriber;    // Ptr to the current subscriber being accessed. <br>    LPSRow          lpLastSubscriber;   // Ptr to the last subscriber that can be accessed. <br>    LPMAPITABLE     lpSubTable;         // Ptr to subscriber table interface. <br>} STopic; <br> <br>// ----------------------------------------------------------------------------- <br>// Find the sender as a subscriber in the topic object and places its index or  <br>// NOT_FOUND in lpiSubscriber. <br>// <br>// RETURNS: HRESULT error only on failure. NOT_FOUND is NOT an error! <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STopic_HrFindSubscriber( <br>    THIS STopic* lpTopic,       // The topic object we are working on. <br>    OUT ULONG*   lpiSubscriber);// Index of subscriber. <br> <br>// ----------------------------------------------------------------------------- <br>// Subscriber row functions and macros. <br>// ----------------------------------------------------------------------------- <br> <br>// RETURN the first subscriber's row of properties. <br>LPSRow STopic_GetFirstSubscriber( THIS STopic* lpTopic); <br> <br>// RETURN the next subscriber's row of properties. <br>LPSRow STopic_GetNextSubscriber( THIS STopic* lpTopic); <br> <br>// Indexes of subscriber properties. <br>typedef enum <br>{ <br>    IDX_DISPLAY_NAME = 0, <br>    IDX_ENTRYID,          <br>    IDX_ADDRTYPE,         <br>    IDX_EMAIL_ADDRESS,    <br>    IDX_RECIPIENT_TYPE,   <br>    IDX_ROWID,            <br>} SubscriberPropIndexes; <br> <br>#define GetDispName()   lpProps[IDX_DISPLAY_NAME].Value.LPSZ      // USAGE: lpsz = lpRow-&gt;GetDispName(); <br>#define GetEmailAddr()  lpProps[IDX_EMAIL_ADDRESS].Value.LPSZ     // USAGE: lpsz = lpRow-&gt;GetEmailAddr(); <br> <br>// ----------------------------------------------------------------------------- <br>// Modifies the list of subscribers in the intro message and in memory.  You  <br>// should use STopic_HrAddSubscriber() and not this function directly. <br>// <br>// NOTE: The Subscriber list will be invalid after this call. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STopic_HrModifySubscriberList( <br>    THIS STopic*    lpTopic,    // The topic object we are working on. <br>    IN   LPADRLIST  lpAdrList,  // The address list to add or remove. <br>    IN   ULONG      ulFlags);   // MODRECIP_ADD or MODRECIP_REMOVE <br> <br>// Use this to add a subscriber. <br>__inline HRESULT STopic_HrAddSubscriber( STopic* lpTopic, LPADRLIST lpAdrList) <br>{ <br>    return( STopic_HrModifySubscriberList( lpTopic, lpAdrList, MODRECIP_ADD)); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Delete the subscriber from the recipient list of the Introductory message and <br>// then free the subscriber list so that next time we work with this topic we <br>// will get a fresh list with updated row ids. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STopic_HrDeleteSubscriber( <br>    THIS STopic*    lpTopic,            // The topic object we are working on. <br>    IN   ULONG      iSubscriber);       // The index of the subscriber to delete. <br> <br>//$--STopic_GetCopyOfSubscriberRowSet------------------------------------------- <br>// Returns a copy of the subscriber's row set as andress list this MUST be freed <br>// using FREEPROWS when the user is done with it. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STopic_GetCopyOfSubscriberRowSet(  <br>    THIS STopic*    lpTopic,    // The topic object we are working on. <br>    OUT  LPADRLIST* lppAdrList);// Ptr to LPADRLIST that we will return. <br> <br>// ----------------------------------------------------------------------------- <br>// The following are inline functions that opperate on the topic cache item. <br>// ----------------------------------------------------------------------------- <br> <br>// Returns the topic folder's interface pointer. <br>__inline LPMAPIFOLDER STopic_GetFolder( STopic* lpTopic) <br>{ <br>    return( lpTopic-&gt;lpFolder); <br>} <br> <br>// Returns the topic introduction message interface pointer. <br>__inline LPMESSAGE STopic_GetIntroMsg( STopic* lpTopic) <br>{ <br>    return( lpTopic-&gt;lpIntroMsg); <br>} <br> <br>// Call this to set only the message interface pointer of a topic object <br>// to the open introductory message. <br>__inline void STopic_SetIntroMsg( STopic* lpTopic, LPMESSAGE lpIntroMsg) <br>{ <br>    lpTopic-&gt;lpIntroMsg = lpIntroMsg; <br>} <br> <br>//  Returns the total number of subscribers to this topic. <br>__inline ULONG STopic_GetSubscriberCount( STopic* lpTopic) <br>{ <br>    return( lpTopic-&gt;lpSubscriberRowSet-&gt;cRows); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// These functions are protected to be used only by STopicCache. <br>// ----------------------------------------------------------------------------- <br> <br>#ifdef FRIEND_OF_STOPIC <br> <br>// Initialize a topic cache item, setting it to an empty state. <br>PROTECTED void STopic_Init( THIS STopic* lpTopic); <br> <br>// Release and free any open interfaces or buffers in the topic cache object and <br>// re-initialize to an empty state. <br>PROTECTED void STopic_Release( THIS STopic* lpTopic); <br> <br>// ----------------------------------------------------------------------------- <br>// Open all interface pointers and load the subscriber list for this topic cache  <br>// item.  Some things may already be opened or loaded while others may not. <br>// ----------------------------------------------------------------------------- <br> <br>PROTECTED HRESULT STopic_HrOpen(  <br>    THIS   STopic*  lpTopic,        // The topic object we are working on. <br>    IN     ULONG    iTFolderArray); // Index into folder array used to initialize this topic. <br> <br>// ----------------------------------------------------------------------------- <br>// Protected inline functions. <br>// ----------------------------------------------------------------------------- <br> <br>// Returns the index into TFolderArray of the folder for this topic. <br>PROTECTED __inline ULONG STopic_GetFolderIndex( STopic* lpTopic) <br>{ <br>    return( lpTopic-&gt;iTFolderArray); <br>} <br> <br>// Call this to set the index of the topic within the TFolderArray. <br>PROTECTED __inline void STopic_SetFolderIndex( STopic* lpTopic, ULONG iTFolderArray) <br>{ <br>    lpTopic-&gt;iTFolderArray = iTFolderArray; <br>} <br> <br>// Returns the cUsageCnt. <br>PROTECTED __inline ULONG STopic_GetUsageCnt( STopic* lpTopic) <br>{ <br>    return( lpTopic-&gt;cUsageCnt); <br>} <br> <br>// Call this to increment the cUsageCnt. <br>PROTECTED __inline void STopic_IncUsageCnt( STopic* lpTopic) <br>{ <br>    lpTopic-&gt;cUsageCnt ++; <br>} <br> <br>// Call this to decrement the cUsageCnt. <br>PROTECTED __inline void STopic_DecUsageCnt( STopic* lpTopic) <br>{ <br>    lpTopic-&gt;cUsageCnt --; <br>} <br> <br>// Call this to set both the folder index and folder interface  <br>// pointer of a topic object to an open folder interface. <br>PROTECTED __inline void STopic_SetFolder( STopic* lpTopic, ULONG iTFolderArray, LPMAPIFOLDER lpFolder) <br>{ <br>    lpTopic-&gt;iTFolderArray = iTFolderArray; <br>    lpTopic-&gt;lpFolder = lpFolder; <br>} <br> <br>// This will free the subscriber row set causing it to be reloaded the next time <br>// the topic is used. <br>PROTECTED __inline void STopic_FreeSubscriberList( STopic* lpTopic) <br>{ <br>    FREEPROWS( lpTopic-&gt;lpSubscriberRowSet); <br>} <br> <br>#endif // FRIEND_OF_STOPIC <br> <br>// ----------------------------------------------------------------------------- <br> <br>#endif // _TOPICS_H_ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMBAGENT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1991"></a>SMBAGENT.H</h2>
<pre><code>// --smbagent.h------------------------------------------------------------------- <br>//  <br>// SMBAGENT global definitions <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _SMBAGENT_H_ <br>#define _SMBAGENT_H_ <br> <br>// ----------------------------------------------------------------------------- <br> <br>#define MAXSUBJLEN100 // Max.length of subject field strings <br>#define MAXTEXTLEN100// Max length of text strings <br>#defineMAXCMDLEN24// Max length of each command string <br> <br>#define TPRINTF(x)_tprintf(TEXT(x)) <br>#define TPRINTF1(x,y)_tprintf(TEXT(x),(y)) <br>#define TPRINTF2(x,y,z)_tprintf(TEXT(x),(y),(z)) <br> <br>#define TOPIC_ROOT_FOLDER_NAME TEXT("List Server Topics") <br>#define TOPIC_ROOT_FOLDER_COMMENTTEXT("Root folder of all topic folders for the List Server.") <br> <br>#define NDR_FOLDER_NAMETEXT("Undeliverable") <br>#define NDR_FOLDER_COMMENTTEXT("Undeliverable message folder.") <br> <br>#define PROFILE_NAMETEXT("ListServer") <br>#define PROFILE_PASSWORD"" <br> <br>#define INTRO_MSG_CLASS             TEXT("IPM.NOTE.SMBAGENT.INTRO") <br>#define SMBAGENT_MSG_CLASS          TEXT("IPM.NOTE.SMBAGENT") <br> <br>// ----------------------------------------------------------------------------- <br>// The following macros and the SInitPropValue structure give the user the  <br>// ability to easily create a property value array that is initialized with <br>// any property type and value. <br>// <br>// See usage example that follows. <br>// ----------------------------------------------------------------------------- <br> <br>#define MAKE_PROP_VALUE( cnt, ptr) ((LONGLONG) ((((LONGLONG) ((ULONG) (ptr))) &lt;&lt; 32) + ((LONGLONG) ((ULONG) (cnt))))) <br>#define BINARY_PROP_VALUE( bin)  MAKE_PROP_VALUE( sizeof( bin), &amp;bin) <br>#define MULTI_VALUE_PROP( array) MAKE_PROP_VALUE( ARRAY_CNT( array), array) <br> <br>typedef struct <br>{ <br>    ULONG    ulPropTag; <br>    ULONG    dwAlignPad; <br>    LONGLONG ll;     <br>} SInitPropValue, *LPSInitPropValue; <br> <br>//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: <br>// Usage example: <br>//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: <br>#ifdef  _USAGE_EXAMPLE_ <br>#ifndef _USAGE_EXAMPLE_ <br>    // Example of a binary structure that could be used by the property value array. <br>    typedef struct <br>    { <br>        TCHAR   ch[20]; <br>        LPTSTR  lpsz; <br>        ULONG   ul; <br>        BOOL    flag; <br>    } ExampleStruct; <br> <br>    // Example data that could go in the property value array. <br>    ExampleStruct BinData     = { TEXT("Binary Data"), TEXT( "A STRING"), 3752789, TRUE}; <br>    LONG          LongArray[] = { 92314535, 2231223, 111, 424242312}; <br> <br>    // The example property value array. <br>    static SInitPropValue PropArray[] = <br>    { <br>        { PT_STRING8, 0, (ULONG) TEXT("Topic Folder")},  <br>        { PT_LONG,    0, 0},       <br>        { PT_BOOLEAN, 0, FALSE},   <br>        { PT_BINARY,  0, BINARY_PROP_VALUE( BinData)}, <br>        { PT_MV_LONG, 0, MULTI_VALUE_PROP( LongArray)}, <br>    }; <br>    LPSPropValue lpProps = (LPSPropValue) PropArray; <br> <br>#endif <br>#endif <br> <br>// ----------------------------------------------------------------------------- <br>// These defines are indexes into the lpSenderProps array.  This array is filled <br>// by a call to HrGetSenderProps() found in MESSAGES.C <br>// ----------------------------------------------------------------------------- <br> <br>extern  LPSPropValue   lpSenderProps;  // Pointer to array of sender properties. <br>extern  LPADRLIST      lpSenderAddr;   // Pointer to sender's return address. <br> <br>typedef enum <br>{ <br>    IDX_SENDER_NAME = 0, <br>    IDX_SENDER_ENTRYID, <br>    IDX_SENDER_ADDRTYPE, <br>    IDX_SENDER_EMAIL_ADDRESS, <br>    IDX_MESSAGE_FLAGS, <br>    IDX_MESSAGE_CLASS, <br>    IDX_SUBJECT, <br>     <br>    // Leave this at the end of list. <br>    TOTAL_SENDER_PROPS <br>} SenderPropsIndexes; <br> <br>// Returns a pointer to the sender's entry id as a SBinary structure. <br>__inline LPSBinary GetSenderEntryIdPtr() <br>{ <br>    return( &amp;(lpSenderProps[ IDX_SENDER_ENTRYID].Value.bin)); <br>} <br> <br> <br>// ----------------------------------------------------------------------------- <br>// Global variables. <br>// ----------------------------------------------------------------------------- <br> <br>extern  LPMAPIFOLDER    lpInFolder;         // Pointer to INBOX folder <br>extern  LPMAPIFOLDER    lpNDRFolder;        // Pointer to the "Undeliverable" folder <br>extern  LPMAPIFOLDER    lpTopicsFolder;     // Pointer to the "TOPICS" folder <br>extern  LPADRBOOK       lpAdrBook;          // Pointer to Address Book <br>extern  HINSTANCE       hInst; <br>extern  TCHAR           szSubjBuf[]; <br>extern  BOOL            bPublicTopic; <br>extern  DWORD           dwACLRights; <br> <br>// ----------------------------------------------------------------------------- <br>// Handle to a subscriber list <br>// ----------------------------------------------------------------------------- <br> <br>typedef struct <br>{ <br>LPMESSAGElpIntroMsg; // intro message for requested topic folder <br>LPMAPITABLElpSubscriberTable;// table of recipients JOINed to the folder <br>}HSUBSCRIBERS, FAR * LPHSUBSCRIBERS; <br> <br> <br>// ----------------------------------------------------------------------------- <br>// In SMBAGENT.C <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT HrInitTopicFolders( VOID); <br> <br>// ----------------------------------------------------------------------------- <br>// Command handling procedures defined in COMMANDS.C <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT HrProcessCommand(  <br>IN LPMESSAGElpMessage,// Ptr to the current message object <br>IN LPENTRYLISTlpelMsgID,// Ptr to ENTRYLIST of current message <br>IN BOOL *pfDeleted);// Flag if msg.is deleted upon return <br> <br> <br>// ----------------------------------------------------------------------------- <br>// Messaging procedures defined in MESSAGES.C <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT HrGetSenderProps( <br>INLPMESSAGElpMessage);// Ptr to the msg.to read sender prop.from <br>  <br>HRESULT HrSendMessage(  <br>INLPADRLISTlpRecipList,// Recipient list of the message <br>INLPTSTRlpszSubject,// Message Subject string <br>INLPTSTRlpszText, // Message text string <br>INintcNAttach, // #Attachments to be included <br>INLPMESSAGElpAtts[]);// Array of pointers to attachments <br> <br>// Properties to copy when duplicating a message. <br>extern LPSPropTagArray lpPropsToCopyForKeep;    // Used when keeping in a folder. <br>extern LPSPropTagArray lpPropsToCopyForSend;    // Used when sending to a subscriber. <br> <br>HRESULT HrDuplicateMessage(  <br>    IN  LPMESSAGE       lpSrcMsg,           // pointer to the source message <br>    IN  LPMAPIFOLDER    lpDestFolder,       // pointer to the destination folder <br>    IN  ULONG           ulFlags,            // Intended to set MAPI_ASSOCIATED <br>    IN  LPSPropTagArray lpPropsToCopy,      // Pass in one of the above array pointers. <br>    OUT LPMESSAGE       *lppDestMsg);       // Addr of var.to contain ptr.to new msg. <br> <br>HRESULT HrSendErrReport( <br>IN LPMESSAGElpMessage,// Ptr to message included in report <br>IN int iErrText);// Resource Id of error string <br> <br>HRESULT HrSendConfirmReport( <br>IN LPMESSAGElpMessage,// Ptr to the command message <br>IN intiCmdName,// Resource Id of command name <br>IN int iCnfText,// Resource Id of confirm string <br>IN LPMESSAGElpAttach); <br> <br>// ----------------------------------------------------------------------------- <br>// Access control list functions defined in ACL.C. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT HrModifyACL( <br>    IN LPMAPIFOLDER lpFolder,       // Folder to modify ACL for <br>    IN LPTSTR pszUserName,          // Name of user to change <br>    IN ULONG cbUserEid,             // Byte count for User's entry id. <br>    IN LPENTRYID lpUserEid,         // User's entry id. <br>    IN BOOL fRemove,                // Flag indicating whether to remove rights <br>    IN DWORD lRights);              // New rights (ignored if fRemove) <br> <br>// ----------------------------------------------------------------------------- <br>// Include topic cache code and data definitions. <br>// ----------------------------------------------------------------------------- <br> <br>#include "Topics.h" <br>#include "TFldrAry.h" <br>#include "TopCache.h" <br> <br>// ----------------------------------------------------------------------------- <br> <br>#endif //_SMBAGENT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

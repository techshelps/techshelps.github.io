<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TFLDRARY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1993"></a>TFLDRARY.H</h2>
<pre><code>// --TFldrAry.h---------------------------------------------------------------- <br>//  <br>// This module contains functions for maintaining and using a topic folder  <br>// array for SMBAGENT. <br>// <br>// The array is essentialy a dynamicly expanding row set of properties of all  <br>// topic folders.  Each row contains a Display Name and an Entry Id.  The array  <br>// is sorted by display name. <br>// <br>// See TOPCACHE.H for details on the relationship between the STFolderArray, the <br>// STopicCache, and the STopic objects. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _TFLDRARY_H_ <br>#define _TFLDRARY_H_ <br> <br>#ifndef PROTECTED <br>#define PROTECTED  <br>#endif <br> <br>//$--STFolderArray-------------------------------------------------------------- <br>// Topic folder array structure.  There will be only one instance of this object. <br>// ----------------------------------------------------------------------------- <br> <br>typedef struct <br>{ <br>    ULONG       cAllocatedRows;   // Count of actual number of slots in lpRows-&gt;aRow[]. <br>    LPSRowSet   lpRows;     // MAPI allocated buffer. <br>} STFolderArray; <br> <br>#define NOT_FOUND (ULONG) ~0L   // Index when something is not found. <br> <br>// Do NOT use this directly, use the helper or inline functions listed below. <br>extern STFolderArray TFolderArray; <br> <br>// ----------------------------------------------------------------------------- <br>// This MUST be called only once at the begining before using the topic folders <br>// or the topic cache functions.  Be sure to use STFolderArray_Destroy() when <br>// done with the array. <br>// <br>// Initialize the global topic folder array by filling it with the display name  <br>// and entry id of all folders under the topics folder. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STFolderArray_HrInit(); <br> <br>// ----------------------------------------------------------------------------- <br>// Find a topic folder in the global topic folder array. <br>// RETURNS: The index of the topic or NOT_FOUND. <br>// ----------------------------------------------------------------------------- <br> <br>ULONG STFolderArray_Find(  <br>    IN LPTSTR lpszTFolderName);    // The name of the topic folder you want to find. <br> <br>// ----------------------------------------------------------------------------- <br>// Create a new topic folder and insert into the array so that the array remains <br>// sorted by PR_DISPLAY_NAME and we keep the entry id.  This will also place <br>// this folder in the topic cache with just the folder open. <br>// <br>// OUTPUT:  lppNewFolder    Open folder interface ptr.  Do NOT release this. <br>//          lppTopic        Open Topic cache object pointer. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STFolderArray_HrCreateFolder(  <br>    IN  LPTSTR          lpszTFolderName,    // The name of the topic folder you want to create. <br>    OUT LPMAPIFOLDER*   lppNewFolder,       // Open folder interface ptr. <br>    OUT STopic**        lppTopic);          // Open Topic cache object pointer. <br> <br>// ----------------------------------------------------------------------------- <br>// Deletes a topic folder from the MAPI store and the TFolderArray. This also  <br>// removes it from the topic cache and adjusts the indexed references to this array. <br>// <br>// NOTE: Use STFolderArray_HrDeleteFolderSZ() if you only have the topic folder  <br>//       name and not the index. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT STFolderArray_HrDeleteFolder( <br>    IN ULONG iTFolderArray);     // Index of folder to be deleted. <br> <br>// ----------------------------------------------------------------------------- <br>// Topic folder array inline supporting "member" functions.  Since there is only  <br>// one topic folder array we don't pass in a "this" type of pointer. <br>// ----------------------------------------------------------------------------- <br> <br>// Free the global topic folder array. <br>__inline void STFolderArray_Destroy() <br>{ <br>    FREEPROWS( TFolderArray.lpRows); <br>    TFolderArray.cAllocatedRows = 0; <br>} <br> <br>// Delete the topic folder taking the name of the folder as a string. <br>__inline HRESULT STFolderArray_HrDeleteFolderSZ( LPTSTR lpszTFolderName) <br>{ <br>    return( STFolderArray_HrDeleteFolder( STFolderArray_Find( lpszTFolderName))); <br>} <br> <br>// Return a count of the topic folders in the global topic folder array. <br>__inline ULONG STFolderArray_GetCount() <br>{ <br>    return( TFolderArray.lpRows-&gt;cRows); <br>} <br> <br>// Return the name of a topic folder based on its index. <br>__inline LPTSTR STFolderArray_GetName( ULONG iTFolderArray) <br>{ <br>    if( iTFolderArray &gt;= STFolderArray_GetCount()) <br>        return( NULL); <br>    return( TFolderArray.lpRows-&gt;aRow[ iTFolderArray].lpProps[0].Value.LPSZ); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Used only by the STopicCache and STopic objects. <br>// ----------------------------------------------------------------------------- <br> <br>#ifdef FRIEND_OF_STFOLDERARRAY <br> <br>// Return the count of bytes of the entry id of a topic folder based on its index. <br>PROTECTED __inline ULONG STFolderArray_GetCbEID( ULONG iTFolderArray) <br>{ <br>    if( iTFolderArray &gt;= STFolderArray_GetCount()) <br>        return( 0); <br>    return( TFolderArray.lpRows-&gt;aRow[ iTFolderArray].lpProps[1].Value.bin.cb); <br>} <br> <br>// Return the entry id of a topic folder based on its index. <br>PROTECTED __inline LPENTRYID STFolderArray_GetEID( ULONG iTFolderArray) <br>{ <br>    if( iTFolderArray &gt;= STFolderArray_GetCount()) <br>        return( 0); <br>    return( (LPENTRYID) TFolderArray.lpRows-&gt;aRow[ iTFolderArray].lpProps[1].Value.bin.lpb); <br>} <br> <br>// Inline function to simplify deleting a topic folder. <br>PROTECTED __inline HRESULT HrDeleteTopicFolder( ULONG cbEID, LPENTRYID lpEID) <br>{ <br>    return( MAPICALL( lpTopicsFolder)-&gt;DeleteFolder( lpTopicsFolder, cbEID, lpEID,  <br>            0, NULL, DEL_MESSAGES | DEL_FOLDERS));  <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Used by search routines to compare a search key to the display name which is <br>// the first property of a row in a SRowSet. <br>// <br>// This helper function is globaly available. <br>// RETURNS: -1 if Search Key &lt; Display Name <br>//           0 if Search Key = Display Name <br>//           1 if Search Key &gt; Display Name <br>// ----------------------------------------------------------------------------- <br> <br>PROTECTED int Compare_DispName( const void* lpszSrchKey, const void* lpRow); <br> <br>#endif // FRIEND_OF_STFOLDERARRAY <br> <br>// ----------------------------------------------------------------------------- <br> <br>#endif  //_TFLDRARY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVCLS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1810"></a>CONVCLS.H</h2>
<pre><code>// --convcls.h-------------------------------------------------------------- <br>// <br>// IPM to 822 conversion class header file. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All rights reserved. <br>// <br>// --------------------------------------------------------------------------- <br> <br>#ifndef _CONVCLS_H <br>#define _CONVCLS_H <br> <br>// $--MESSAGE_TYPE----------------------------------------------- <br>// <br>// Report type enumeration <br>// <br>// ------------------------------------------------------------- <br>enum MESSAGE_TYPE <br>{ <br>    mtNone,        // no type <br>    mtIPM,         // IPM message <br>    mtNDR,         // non-delivery report <br>    mtDR,          // delivery report <br>    mtNRN,         // non-read notification <br>    mtRN           // read notification         <br>}; <br> <br>// $--CIPMConvert------------------------------------------------------------ <br>// <br>// IPM message to 822-style stream converter class <br>// <br>// --------------------------------------------------------------------------- <br> <br>class CIPMConvert <br>{ <br>public: <br> <br>    CIPMConvert();  // constructor <br>    ~CIPMConvert(); // destructor <br> <br>    // Initializes conversion class instance <br>    HRESULT HrInitialize(        <br>        IN LPCWSTR lpwszMsgClass,   // message class <br>        IN BOOL bTNEFEnc,           // TNEF encode attachments flag <br>        IN LPADRBOOK lpAddrBook,    // address book pointer <br>        IN LPMESSAGE lpMessage,     // message to convert <br>        IN LPSTREAM lpStream);      // stream to write output to <br> <br>    // IPM message or report to 822-style converter <br>    HRESULT HrConvert();         <br> <br>private: <br> <br>    // methods <br> <br>    // TNEF encodes everything below the envelope.  Only <br>    // converts the envelope to the "822-style" header. <br>    HRESULT HrContentToTnef(); <br> <br>    // converts an ENVELOPE.IPM message <br>    HRESULT HrIPMTo822Format();     <br> <br>    // converts a REPORT.IPM message <br>    HRESULT HrReportTo822Format();   <br>             <br>    // Converts the message's or notification's envelope <br>    // IPM.NOTE or REPORT.IPM.IPN[N]RN <br>    HRESULT HrConvertEnvelope();     <br> <br>    // Retrieves and stores envelope's properties. <br>    HRESULT HrEnvelopeGetProps();    <br> <br>    // Converts the message's  content  <br>    HRESULT HrConvertContent();       <br> <br>    // Converts the message's attachments <br>    HRESULT HrConvertAttachments();   <br> <br>    // Converts REPORT.[N]DR delivery/non-delivery report envelope <br>    HRESULT HrConvertReport();        <br> <br>    // Opens the envelope's content. <br>    HRESULT HrOpenContent(); <br> <br>    // Retrieves and stores properties requested <br>    HRESULT HrRetrieveProps(           <br>        IN LPMAPIPROP lpObj,            // MAPI object to retrieve properties from <br>        IN LPSPropTagArray lpPropTags,  // pointer to property tags <br>        OUT LPSPropValue * lppPropVals);// pointer to property value array <br> <br>    // Determines and sets the report type <br>    HRESULT HrSetMsgType(             <br>        IN LPCWSTR lpwszMessageClass);  // message class <br> <br>    // Handles NDR non-recipient table <br>    HRESULT HrConvertNonRecipients();  <br> <br>    // Handle DR recipient table        <br>    HRESULT HrConvertRecipients();  <br> <br>    // Handle RN &amp; NRN report content <br>    HRESULT HrConvertNotifyContent(); <br> <br>    // Checks to see if conversion class has been initialized <br>    BOOL fCheckInit();               // RETURNS: BOOL <br> <br>    // "Resets" the class after a conversion is completed. <br>    VOID Reset();                   // RETURNS: VOID <br> <br>    // data members <br>    // Currently, converter only supports one conversion per thread. <br>    LPCWSTR     m_lpwszMsgClass;      // mesage class <br>    LPMESSAGE   m_lpEnvelope;         // message's envelope <br>    LPMESSAGE   m_lpContent;          // message's content (the original message) <br>    LPSTREAM    m_lpStream;           // stream currently writing to <br>    BOOL        m_fTNEFEncode;        // TNEF encoding flag <br>    LPADRBOOK   m_lpAB;               // address book pointer <br>    LPATTACH    m_lpAttach;           // envelope attachment pointer <br> <br>    LPSPropValue    m_lpEnvProps;     // message envelope properties pointer <br>    LPSPropValue    m_lpCntProps;     // message content properties pointer <br> <br>    MESSAGE_TYPE     m_MsgType;       // message type <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

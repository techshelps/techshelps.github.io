<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRVALARY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1788"></a>PRVALARY.C</h2>
<pre><code>// PrValAry.C ------------------------------------------------------------------ <br>// Implementation of a set of functions that maintain a MAPI <br>// allocated array of property values. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "PrValAry.h" <br> <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT PVA_HrInit( <br>    THIS LPPropValArray pva,        // Uninitialized structure to be initialized. <br>    IN   ULONG          cExpandAmt, // Amount to expand array by when it gets full. <br>    IN   ULONG          cProps,     // Count of properties in array. <br>    IN   LPSPropValue   lpPropVal)  // A MAPI allocated array of properties, or NULL. <br>{ <br>    HRESULT hr = NOERROR; <br>    ULONG   cb = 0; <br> <br>    // This will validate the initial property array. <br>    if( cProps) <br>    { <br>        hr = ScCountProps( cProps, lpPropVal, &amp;cb); <br>        if( FAILED( hr)) <br>            goto cleanup; <br>    } <br> <br>    pva-&gt;cExpandAmt = cExpandAmt; <br>    pva-&gt;cTotal = cProps; <br>    pva-&gt;cMax = cProps; <br>    pva-&gt;lpPVOrig = lpPropVal; <br>    pva-&gt;lpPropVal = lpPropVal; <br> <br>cleanup: <br>    if( FAILED( hr)) <br>        memset( pva, 0, sizeof( PropValArray)); <br> <br>    RETURN( hr); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// ----------------------------------------------------------------------------- <br> <br>void PVA_Destroy( <br>    THIS LPPropValArray pva)        // Structure to be destroyed. <br>{ <br>    if( pva-&gt;lpPropVal != pva-&gt;lpPVOrig) <br>        MAPIFREEBUFFER( pva-&gt;lpPropVal); <br>    MAPIFREEBUFFER( pva-&gt;lpPVOrig); <br>    memset( pva, 0, sizeof( PropValArray)); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// This function prepares a property for placement in the property value array. <br>// <br>// If the property is a simple type that does not point to data in another  <br>// location we simply return. <br>// <br>// If the propery points to data contained outside of the SPropValue structure <br>// we make a copy of it using ScCopyProps().  This simplifies our code since  <br>// there are many different data types and ScCopyProps() handles them all.  We  <br>// will waste the sizeof( SPropValue) bytes but it is a small price to pay for  <br>// simple code. <br>// ----------------------------------------------------------------------------- <br> <br>static HRESULT PVA_HrPrepare( <br>    THIS    LPPropValArray  pva,        // Array to manipulate <br>    IN OUT  LPSPropValue*   lppPropVal) // Prop val to prepare for placement in array. <br>{ <br>    HRESULT         hr           = NOERROR; <br>    ULONG           cb           = 0; <br>    ULONG           cBytesCopied = 0; <br>    LPSPropValue    lpNewPropVal = NULL; <br> <br>    // Count the bytes needed for the new property. <br>    hr = ScCountProps( 1, *lppPropVal, &amp;cb); <br>    if( FAILED( hr)) <br>        goto cleanup; <br>     <br>    // Does this entry require extra data space? <br>    if( cb &gt; sizeof( SPropValue)) <br>    {   // YES, so prepare it. <br> <br>        // Allocate a new buffer, linked to the original, to hold the copied properties. <br>        hr = MAPIAllocateMore( cb, pva-&gt;lpPVOrig, &amp;lpNewPropVal); <br>        if( FAILED( hr)) <br>            goto cleanup; <br>        memset( lpNewPropVal, 0, cb); <br> <br>        // Copy the subscriber properties to the new buffer. <br>        hr = ScCopyProps( 1, *lppPropVal, lpNewPropVal, &amp;cBytesCopied); <br>        if( FAILED( hr)) <br>            goto cleanup; <br>        ASSERTERROR( cb == cBytesCopied, "ScCountProps &amp; ScCopyProps are inconsistent!"); <br> <br>        // Replace the caller's buffer since we have a copy of the data. <br>        *lppPropVal = lpNewPropVal; <br>    } <br> <br>cleanup: <br>    RETURN( hr); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT PVA_HrInsert( <br>    THIS LPPropValArray pva,          // Array to manipulate <br>    IN   ULONG          iProp,        // Index of insertion point. <br>    IN   LPSPropValue   lpPropVal)    // Property value to insert. <br>{ <br>    HRESULT         hr           = NOERROR; <br>    ULONG           cb           = 0; <br>    ULONG           cBytesCopied = 0; <br>    LPSPropValue    lpPVSlot     = NULL; <br>    LPSPropValue    lpNewPropVal = NULL; <br> <br>    ASSERTERROR( iProp &lt;= pva-&gt;cTotal, "Index is too large."); <br> <br>    // Is the array full? <br>    if( pva-&gt;cTotal == pva-&gt;cMax) <br>    {   // YES, the array is full. <br>         <br>        // Increase the maximum size of the array. <br>        pva-&gt;cMax += pva-&gt;cExpandAmt; <br> <br>        // Allocate a new and expanded array. <br>        cb = pva-&gt;cMax * sizeof( SPropValue); <br>        hr = MAPIAllocateBuffer( cb, &amp;lpNewPropVal); <br>        if( FAILED( hr)) <br>            goto cleanup; <br>     <br>        // Zero newly allocated memory. <br>        memset( lpNewPropVal, 0, cb); <br> <br>        // Copy full array into it, if there is something to copy. <br>        if( pva-&gt;lpPropVal) <br>            MoveMemory( lpNewPropVal, pva-&gt;lpPropVal, pva-&gt;cTotal * sizeof( SPropValue)); <br> <br>        // If the full array is NOT the original MAPIAllocation free it.  By retaining <br>        // the original allocation we keep the extra data associated with it but waste <br>        // the space occupied by the original SPropValue array.  But it is worth this <br>        // small cost to keep the code simple. <br>        if( pva-&gt;lpPropVal != pva-&gt;lpPVOrig) <br>            MAPIFREEBUFFER( pva-&gt;lpPropVal); <br>         <br>        // Make the new array allocation the current array. <br>        pva-&gt;lpPropVal = lpNewPropVal; <br>        if( !pva-&gt;lpPVOrig) <br>            pva-&gt;lpPVOrig = lpNewPropVal; <br>    } <br> <br>    // Prepare property value to be placed in array. <br>    hr = PVA_HrPrepare( pva, &amp;lpPropVal); <br>    if( FAILED( hr)) <br>        goto cleanup; <br>         <br>    // Slot to insert new property into. <br>    lpPVSlot = pva-&gt;lpPropVal + iProp; <br>     <br>    // Open up a new slot for the property to insert (if not at end). <br>    if( iProp &lt; pva-&gt;cTotal) <br>        MoveMemory( lpPVSlot + 1, lpPVSlot, (pva-&gt;cTotal - iProp) * sizeof( SPropValue)); <br> <br>    // Copy the new property into the array. <br>    MoveMemory( lpPVSlot, lpPropVal, sizeof( SPropValue)); <br> <br>    // Increment the total array elements used.  <br>    pva-&gt;cTotal ++; <br> <br>cleanup: <br>    RETURN( hr); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT PVA_HrModify( <br>    THIS LPPropValArray pva,          // Array to manipulate <br>    IN   ULONG          iProp,        // Index of insertion point. <br>    IN   LPSPropValue   lpPropVal)    // Property value to insert. <br>{ <br>    HRESULT         hr           = NOERROR; <br> <br>    // Prepare property value to be placed in array. <br>    hr = PVA_HrPrepare( pva, &amp;lpPropVal); <br>    if( FAILED( hr)) <br>        goto cleanup; <br>         <br>    // Copy the new property into the array. <br>    MoveMemory( pva-&gt;lpPropVal + iProp, lpPropVal, sizeof( SPropValue)); <br> <br>cleanup: <br>    RETURN( hr); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT PVA_HrDelete( <br>    THIS LPPropValArray pva,          // Array to manipulate <br>    IN   ULONG          iProp)        // Index of property to delete. <br>{ <br>    LPSPropValue    lpPVSlot     = NULL; <br> <br>    // Decrement the total array elements used.  <br>    pva-&gt;cTotal --; <br>     <br>    // Pointer to the element to be deleted. <br>    lpPVSlot = pva-&gt;lpPropVal + iProp; <br> <br>    // Delete the property in the slot. <br>    if( iProp &lt; pva-&gt;cTotal) <br>        MoveMemory( lpPVSlot, lpPVSlot + 1, (pva-&gt;cTotal - iProp) * sizeof( SPropValue)); <br>     <br>    // Clear the last property in the array. <br>    memset( pva-&gt;lpPropVal + pva-&gt;cTotal, 0, sizeof( SPropValue)); <br> <br>    return( NOERROR); <br>} <br> <br>// ----------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

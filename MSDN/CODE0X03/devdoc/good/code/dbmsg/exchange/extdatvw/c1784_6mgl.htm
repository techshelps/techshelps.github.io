<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADMIN.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1785"></a>ADMIN.H</h2>
<pre><code>// Admin.h --------------------------------------------------------------------- <br>// Functions to support Exchange Admin Configuration Extension Dialogs for C  <br>// programs.  This does the majority of the handshaking necessary. <br>// (See ExAdmin.H for C++ support) <br>// <br>// This module is intended to be a generic MAIN source file for creating an  <br>// Exchange Administration DLL.  You could take this file and include it in your <br>// project as starting place for your DLL. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef __ADMIN_H__ <br>#define __ADMIN_H__ <br> <br>#include "adminext.h" <br> <br>// ----------------------------------------------------------------------------- <br>// Functions that are required or used by Exchange Admin. <br>// ----------------------------------------------------------------------------- <br> <br>// This function initializes the property sheet info and returns it to admin. <br>// <br>// Since this piece of code is written to be a generic MAIN source file for <br>// creating an Exchange Administration DLL we use global data defined outside <br>// of this module to contain the information about the property sheet dialogs. <br>// You will need to make sure your code contains the following two globals: <br>// <br>//  1) ADMIN_SheetInfo rgSheetInfo[]                Array of info about your  <br>//                                                  property sheets. <br>// <br>//  2) int cSheetInfo = ARRAY_CNT( rgSheetInfo);    The count of property sheets <br>//                                                  in the array. <br> <br>BOOL PASCAL bInitSheet(                 // RETURNS: TRUE if initialization OK <br>    IN  ADMIN_ObjectInfo* poi,          // Computer name &amp; DN. <br>    IN  ULONG             fFlags,       // Tells us if it is read only or not.                <br>    OUT ADMIN_SheetInfo** ppSheetInfo,  // Property sheet description array <br>    OUT UINT*             pcsi,         // Number of property sheets <br>    OUT VOID**            ppNotUsed);   // Local data <br> <br>// Admin calls this when the property sheet dialog box is about to be removed. <br>void PASCAL DeinitSheet( <br>    IN VOID* pNotUsed);          // Extension data.  <br> <br>BOOL PASCAL bInstallExtension(ADMIN_ObjectInfo * poi); <br>BOOL PASCAL bDeinstallExtension(ADMIN_ObjectInfo * poi); <br> <br>// This is called once per standard property sheet.  Not at all for our property <br>// sheets.  If you want to disable some or all of the standard property sheets  <br>// then return FALSE for those default property sheets. <br>BOOL PASCAL bShowPage( UINT iddAdminPage); <br> <br>// This function is called once durring initialization.  Return -1 to cause the  <br>// first standard property sheet to be displayed.  Or return the index of one of  <br>// our property sheets to have it come up first. <br>INT PASCAL iStartPage( void); <br> <br>// Exported function. This is the first function called by admin after the DLL  <br>// has been initialized. <br>VOID PASCAL ADMIN_Initialize( <br>    IN  ADMIN_AdministratorConnections* pAdminConnections,  // Global Administrator Connections <br>    IN  ADMIN_AdministratorFunction*    pAdminFuncs,        // Global admin function <br>    OUT ADMIN_ExtensionFunction**       ppExtensionFunction);// Global Extension function <br> <br>// ----------------------------------------------------------------------------- <br>// Miscelaneous support functions that are not required by Exchange Admin. <br>// ----------------------------------------------------------------------------- <br> <br>// Loads the extension data from Exchange Admin into an array of property values. <br>HRESULT HrLoadExtData( <br>    IN  HWND            hDlg,            // Handle of property sheet dialog. <br>    IN  LPTSTR          lpszExtDataName, // Name of extension data to retrieve. <br>    OUT ULONG*          lpcExtProps,     // Ptr to receive count of ext data properties.  <br>    OUT LPSPropValue*   lppExtProps);    // Ptr to ptr to extension data properties. <br> <br>// Saves the extension data into an Exchange Admin buffer.  Admin will not  <br>// commit this data until the user presses the Apply or OK button.  However the <br>// changed data is then available to other property sheets. <br>HRESULT HrSaveExtData( <br>    IN  HWND            hDlg,            // Handle of property sheet dialog. <br>    IN  LPTSTR          lpszExtDataName, // Name of extension data to save. <br>    IN  ULONG           cExtProps,       // Count of ext data properties.  <br>    IN  LPSPropValue    lpExtProps,      // Ptr to extension data properties. <br>    IN  BOOL            bNew);           // Indicates the blob is new. <br> <br>// Use this function to create child dialog box templates.  It will ensure that  <br>// the correct language and fonts are used.   <br>// <br>// To display the dialog use DialogBoxIndirect() which is a Windows SDK  <br>// function. <br>HRESULT HrLoadDialogTemplate( <br>    IN  UINT     iddDialog,     // Resource ID of dialog. <br>    OUT HGLOBAL* phDlgTemplate);// Ptr to var to store handle in. <br> <br>// ----------------------------------------------------------------------------- <br>// Global data declared in Admin.C <br>// ----------------------------------------------------------------------------- <br> <br>extern HINSTANCE hDLLInst; <br>extern BOOL      bReadOnly;     // The mode is read only if TRUE. <br> <br>extern ADMIN_AdministratorFunction* pAdminFunctions;  // Admin functions available to you. <br>extern ADMIN_ObjectInfo*            pAdminObjectInfo; // Admin server name and other useful DNs. <br> <br>// ----------------------------------------------------------------------------- <br>// Globals and external functions that must be defined in the dialog code that  <br>// you write.  (See ExtDatVw.C as an example.) <br>// ----------------------------------------------------------------------------- <br> <br>// This is a list of functions that Exchange Admin will call.  You will need to <br>// fill this list with the address of your functions as well as some of the  <br>// functions contained in Admin.C.   <br>extern ADMIN_ExtensionFunction extensionFunctions; <br> <br>// You will need to provide the resource ID of your dialogs, the address of your  <br>// dialog processing functions, and the resource ID of the string to place on  <br>// the property sheet tag. <br>extern ADMIN_SheetInfo rgSheetInfo[]; <br>extern int cSheetInfo;  // Set to ARRAY_CNT( rgSheetInfo) <br> <br>// External function to deinitialize first property sheet.  It should call the deinit <br>// for the second property sheet if there is one, and so on. <br>// <br>// You will need to implement this function in your code! <br>void DeinitSheet1();  <br> <br>// ----------------------------------------------------------------------------- <br>#endif // __ADMIN_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

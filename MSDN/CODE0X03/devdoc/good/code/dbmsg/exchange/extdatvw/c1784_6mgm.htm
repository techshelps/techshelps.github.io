<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EDITDLG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1786"></a>EDITDLG.C</h2>
<pre><code>// EditDlg.c ------------------------------------------------------------------- <br>// Functions to support a dialog that lets the user select a property type and <br>// enter a data value for it. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "resource.h" <br> <br>// ----------------------------------------------------------------------------- <br> <br>#define MAX_DATA_VALUE      600     // Maximum data value we can edit. <br> <br>// ----------------------------------------------------------------------------- <br>// Global handels to controls used in this module. <br>// ----------------------------------------------------------------------------- <br> <br>HWND hCboType       = NULL; <br>HWND hEditDataValue = NULL; <br> <br>// ----------------------------------------------------------------------------- <br>// Defined in ExtDatVw.C <br>// ----------------------------------------------------------------------------- <br> <br>extern LPSPropValue lpEditPropVal;  // Pointer to property to edit. <br>extern HWND         hAdminWnd;      // Handle to parent window. <br>extern TCHAR        szAdminTitle[]; // Title of parent window. <br> <br>HRESULT HrFormatPrValue(  <br>    IN  LPSPropValue lpPropVal, // Ptr to property to format. <br>    OUT LPTSTR*      lppszBuf); // Ptr to ptr to allocated output buffer. <br> <br>// ----------------------------------------------------------------------------- <br>// Table to contain property types that we support the editing of. <br>// ----------------------------------------------------------------------------- <br> <br>typedef struct <br>{ <br>    LPTSTR  lpsz; <br>    ULONG   ul; <br>} PropType; <br> <br>#define PROP_TBL_ENTRY( PropName)      {TEXT( #PropName), PropName}, <br> <br>// Ordered by frequency of use. <br>PropType PropTypeArray[] = <br>{ <br>    PROP_TBL_ENTRY( PT_STRING8) <br>    PROP_TBL_ENTRY( PT_LONG) <br>    PROP_TBL_ENTRY( PT_BOOLEAN) <br>    PROP_TBL_ENTRY( PT_I2) <br>    PROP_TBL_ENTRY( PT_R4) <br>    PROP_TBL_ENTRY( PT_DOUBLE) <br>}; <br> <br>//$--OnInitDialog()------------------------------------------------------------- <br>// Initialize the dialog. <br>// ----------------------------------------------------------------------------- <br> <br>static VOID OnInitDialog( <br>    IN HWND    hDlg)    // Dialog's window handle. <br>{ <br>    HRESULT hr          = NOERROR; <br>    LPTSTR  lpszProp    = NULL; <br>    LPTSTR  lpszValue   = NULL; <br>    ULONG   iType       = 0; <br> <br>    // Get the handle of the list box view control. <br>    hCboType = GetDlgItem( hDlg, IDC_CBO_TYPE); <br>    if( hCboType == NULL) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        goto cleanup; <br>    } <br>     <br>    // Get the handle of the list box view control. <br>    hEditDataValue = GetDlgItem( hDlg, IDC_EDIT_DATA_VALUE); <br>    if( hEditDataValue == NULL) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // Initialize the combo box with data types that we allow entry on. <br>    for( iType = 0; iType &lt; ARRAY_CNT( PropTypeArray); iType ++) <br>        SendMessage( hCboType, CB_ADDSTRING, 0, (LPARAM) PropTypeArray[ iType].lpsz); <br> <br>    // Do we have initial data? <br>    if( !lpEditPropVal) <br>        // No initial data so default to first combo box item. <br>        SendMessage( hCboType, CB_SETCURSEL, 0, 0);  <br>    else <br>    {   // YES, we have initial data so initialize the controls. <br> <br>        // Find the property type in the PropTypeArray and set combo box index <br>        // to the same index found in the array. <br>        // The combo box list is NOT sorted so there will be a one to one <br>        // correlation between the PropTypeArray and the items in the list. <br>        for( iType = 0; iType &lt; ARRAY_CNT( PropTypeArray); iType ++) <br>        {    <br>            if( PROP_TYPE( lpEditPropVal-&gt;ulPropTag) == PropTypeArray[ iType].ul) <br>                SendMessage( hCboType, CB_SETCURSEL, (WPARAM) iType, 0); <br>        } <br>         <br>        // Format the property value into a string that the user can edit. <br>        hr = HrFormatPrValue( lpEditPropVal, &amp;lpszProp); <br>        if( FAILED( hr)) <br>            goto cleanup; <br> <br>        lpszValue = _tcschr( lpszProp, TEXT( '\t')) + 1; <br>        if( lpszValue == (LPTSTR) 1) <br>        {   // This should have found the tab character in the formated string. <br>            hr = HR_LOG( E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // Set the text of the edit control to the formated value. <br>        SetDlgItemText( hDlg, IDC_EDIT_DATA_VALUE, lpszValue); <br>         <br>        // This pointer currently points to unfreeable memory.  We will allocate  <br>        // data and set this to point to it later.  Until then we don't want anyone  <br>        // freeing data that should not be freed so we MUST set it to NULL to avoid  <br>        // potential problems later. <br>        lpEditPropVal = NULL; <br> <br>        MAPIFREEBUFFER( lpszProp); <br>    } <br> <br>cleanup: <br>    MAPIFREEBUFFER( lpszProp); <br>} <br> <br>//$--OnCmdOk()------------------------------------------------------------------ <br>// When the OK button is pressed we allocate a property value structure and save <br>// the users data in it. <br>// ----------------------------------------------------------------------------- <br> <br>static VOID OnCmdOk( <br>    IN HWND    hDlg)    // Dialog's window handle. <br>{ <br>    HRESULT hr                           = 0; <br>    TCHAR   szDataValue[ MAX_DATA_VALUE] = {TEXT( '\0')};// Buffer for intermediate data. <br>    int     iType                        = 0; <br>    ULONG   ulPropType                   = 0; <br>    LPBYTE  lpbData                      = NULL; <br> <br>    // Validate that the combo field has a selection. <br>    iType = SendMessage( hCboType, CB_GETCURSEL, 0, 0); <br>    if( iType == CB_ERR) <br>    { <br>        MessageBox( hAdminWnd, "You must select a data type.", szAdminTitle, MB_OK); <br>        SetFocus( hCboType); <br>        goto cleanup; <br>    } <br>     <br>    // Set the true MAPI property type from combo box selection. <br>    ulPropType = PropTypeArray[ iType].ul; <br> <br>    // Get the data value entered by the user. <br>    GetDlgItemText( hDlg, IDC_EDIT_DATA_VALUE, szDataValue, sizeof( szDataValue)); <br> <br>    // Allocate a buffer to handle the biggest property we will need to deal with. <br>    hr = MAPIAllocateBuffer( sizeof( SPropValue) + MAX_DATA_VALUE, &amp;lpEditPropVal); <br>    if( FAILED( hr)) <br>        goto cleanup; <br> <br>    // Set pointer to buffer of extra data. <br>    lpbData = ((LPBYTE) lpEditPropVal) + sizeof( SPropValue); <br> <br>    // Set the property tag.  Using 1 for the ID keeps it from being  <br>    // considered invalid by some of the MAPI routines. <br>    lpEditPropVal-&gt;ulPropTag = PROP_TAG( ulPropType, 1); <br> <br>    switch( ulPropType) <br>    { <br>        case PT_I2: <br>            lpEditPropVal-&gt;Value.i = (int) _ttol( szDataValue); <br>            break; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        case PT_LONG: <br>            lpEditPropVal-&gt;Value.l = _ttol( szDataValue); <br>            break; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        case PT_R4: <br>            lpEditPropVal-&gt;Value.flt = (float) atof( szDataValue); <br>            break; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        case PT_DOUBLE: <br>            lpEditPropVal-&gt;Value.dbl = atof( szDataValue); <br>            break; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        case PT_BOOLEAN: <br>            if( _tcsicmp( szDataValue, TEXT( "TRUE")) == 0) <br>            { <br>                lpEditPropVal-&gt;Value.b = TRUE; <br>                break; <br>            } <br>            else if( _tcsicmp( szDataValue, TEXT( "FALSE")) == 0) <br>            { <br>                lpEditPropVal-&gt;Value.b = FALSE; <br>                break; <br>            } <br>             <br>            MessageBox( hAdminWnd, "You must enter either TRUE or FALSE.", szAdminTitle, MB_OK); <br>            SetFocus( hEditDataValue); <br>            goto cleanup; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        case PT_STRING8: <br>            lpEditPropVal-&gt;Value.LPSZ = lpbData; <br>            lstrcpy( lpbData, szDataValue); <br>            break; <br> <br>        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>        default:  <br>            MessageBox( hAdminWnd, "Unknown property type.", szAdminTitle, MB_OK); <br>            SetFocus( hEditDataValue); <br>            goto cleanup; <br>    } <br>     <br>    // Normal termination. <br>    EndDialog( hDlg, IDOK); <br>    return; <br> <br>cleanup: <br>    MAPIFREEBUFFER( lpEditPropVal); <br>} <br> <br>//$--OnWmCommand()-------------------------------------------------------------- <br>// Processes a command sent to the dialog box. In this case, commands are sent  <br>// to dialog box by the controls when the control values have changed or when <br>// a button is pressed. <br>// ----------------------------------------------------------------------------- <br> <br>static VOID OnWmCommand( <br>    IN HWND    hDlg,    // Dialog's window handle. <br>    IN WPARAM  wParam,  // Window message parameter1 <br>    IN LPARAM  lParam)  // Window message parameter2 <br>{ <br>    WORD wNotifyCode = HIWORD( wParam);     // Notification code <br>    WORD wID         = LOWORD( wParam);     // Id of control <br>      <br>    // Has an edit control changed or a button been clicked? <br>    if( wNotifyCode == EN_CHANGE || wNotifyCode == BN_CLICKED) <br>    {   // YES, so process the change or click. <br>        switch( wID) <br>        { <br>            case IDOK: <br>                OnCmdOk( hDlg); <br>                return; <br> <br>            case IDCANCEL: <br>                EndDialog( hDlg, IDCANCEL); <br>                return; <br> <br>            default: <br>                return;         <br>        } <br>    } <br>} <br> <br>//$--EditDialogProc()----------------------------------------------------------- <br>// Dialog procedure for this dialog. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CALLBACK EditDialogProc( // RETURNS: TRUE if msg was processed. <br>    IN HWND    hDlg,    // Dialog's window handle. <br>    IN UINT    wMsg,    // Window message to be processed <br>    IN WPARAM  wParam,  // Window message parameter1 <br>    IN LPARAM  lParam)  // Window message parameter2 <br>{ <br>    WORD wNotifyCode = HIWORD( wParam);     // Notification code <br>    WORD wID         = LOWORD( wParam);     // Id of control <br> <br>    switch( wMsg) <br>    { <br>        case WM_INITDIALOG: <br>            OnInitDialog( hDlg); <br>            return( TRUE); <br> <br>        case WM_COMMAND: <br>            OnWmCommand( hDlg, wParam, lParam); <br>            return( TRUE); <br> <br>        default: <br>            return( FALSE); <br>    } <br>} <br> <br>// ----------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

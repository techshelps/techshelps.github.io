<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVINST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1781"></a>SERVINST.C</h2>
<pre><code>// --servinst.c----------------------------------------------------------------- <br>// <br>//  Service installation sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>// <br>// Run GUIDGEN.EXE to create a GUID to use when installing your company's <br>// products. This will make it possible for you to find services that you <br>// have installed. <br>// <br> <br>#define PRODUCT_GUID_SAMPLE  TEXT("F90E4AE0-E588-11ce-A2CA-00AA0040E865") <br> <br>// <br>// Names of Command Line Arguments <br>// <br> <br>#define ARG_SITEDN"SITEDN" <br>#define ARG_OBJNAME         "OBJNAME" <br>#define ARG_OBJTYPE         "OBJTYPE" <br>#define ARG_SERVICE         "SERVICE" <br>#define ARG_DISPLAY_NAME    "DISPLAY_NAME" <br>#define ARG_DEPENDENCIES    "DEPENDENCIES" <br>#define ARG_EXE             "EXE" <br>#define ARG_SERVER"SERVER" <br>#define ARG_ACCOUNT"ACCOUNT" <br>#define ARG_PASSWORD        "PASSWORD" <br>#define ARG_DELETE          "DELETE" <br>#define ARG_HELP1"?" <br>#define ARG_HELP2"HELP" <br> <br>// <br>// Table of Command Line Switches for _HrExpandCommandLineArgument() <br>// <br> <br>static char * rgpszArgArray[] = { <br>ARG_SITEDN, <br>ARG_OBJNAME, <br>    ARG_OBJTYPE, <br>ARG_SERVICE, <br>    ARG_DISPLAY_NAME, <br>    ARG_DEPENDENCIES, <br>ARG_EXE, <br>ARG_SERVER, <br>ARG_ACCOUNT, <br>ARG_PASSWORD, <br>ARG_DELETE, <br>ARG_HELP1, <br>ARG_HELP2, <br>}; <br> <br>#define ARGARRAYSIZE (sizeof(rgpszArgArray)/sizeof(rgpszArgArray[0])) <br> <br>// <br>// Variables For Command Line Arguments <br>// <br> <br>char szSiteDN[MAX_PATH+1]               = {0}; <br>char szObjectName[MAX_PATH+1]           = {0}; <br>char szObjectType[MAX_PATH+1]           = {0}; <br>char szServiceName[MAX_PATH+1]          = {0}; <br>char szDisplayName[MAX_PATH+1]          = {0}; <br>char szExeName[MAX_PATH+1]              = {0}; <br>char szServer[MAX_PATH+1]               = {0}; <br>char szAccountName[MAX_PATH+1]          = {0}; <br>char szPassword[MAX_PATH+1]             = {0}; <br>char szObjectGuid[MAX_PATH+1]           = {0}; <br>char szDependencies[MAX_PATH+1]         = {0}; <br>BOOL fDisplayedHelp                     = FALSE; <br>BOOL fDeleteService                     = FALSE; <br> <br>// <br>// Functions <br>// <br> <br>//$--ShowUsage------------------------------------------------------------------ <br>//  Show usage information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowUsage(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowUsage()\n"); <br> <br>    printf("USAGE: SERVINST [Flags]\n\n"); <br>printf("  [Flags]        Enter SERVINST /? for details\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--ShowHelp------------------------------------------------------------------- <br>//  Show help information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowHelp(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowHelp()\n"); <br> <br>printf("Service Installation sample.\n\n"); <br>printf("USAGE: SERVINST [Flags]\n\n"); <br>printf("  Required Flags\n"); <br>printf("  /SITEDN=             Site distinguished name\n"); <br>printf("  /OBJNAME=            Object name\n"); <br>printf("  /OBJTYPE=            Object type (GATEWAY or AGENT)\n"); <br>printf("  /SERVICE=            Service name\n"); <br>printf("  /DISPLAY_NAME=       Service display name\n"); <br>    printf("  /DEPENDENCIES=       Service dependencies (separated by '%%')\n"); <br>printf("  /EXE=                Executable name\n"); <br>printf("  /SERVER=             Server computer name\n"); <br>printf("  /ACCOUNT=            Account name\n"); <br>printf("  /PASSWORD=           Account password\n"); <br>printf("\n"); <br>printf("  Optional Flags\n"); <br>printf("  /DELETE              Delete service\n"); <br>printf("  /HELP or /?          Display help\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--HrConfig------------------------------------------------------------------- <br>//  Read configuration from command line. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrConfig(           // RETURNS: return code <br>    IN int argc,            // number of arguments on command line <br>    IN char *argv[])        // array of command line arguments <br>{ <br>    HRESULThr= NOERROR; <br>    HRESULThrT= NOERROR; <br>char *pszArgument= NULL; <br>char *pszValue= NULL; <br>    inti= 0; <br> <br>DEBUGPRIVATE("HrConfig()\n"); <br> <br>// If there are no command line arguments then show a usage message. <br> <br>if (argc &lt; 2) <br>{ <br>ShowUsage(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br> <br>// Do an initial check for /? or /HELP.  If found, show a help message  <br>// and don't do any other parsing. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hr = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (SUCCEEDED(hr) &amp;&amp; pszArgument &amp;&amp;  <br>(!lstrcmpi(pszArgument,ARG_HELP1) ||  <br>!lstrcmpi(pszArgument,ARG_HELP2))) <br>{ <br>ShowHelp(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br>} <br> <br>// Loop through and parse all the command line arguments. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hrT = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (FAILED(hrT)) <br>{ <br>hr = hrT; <br> <br>if (hr == EDK_E_NOT_FOUND) <br>{ <br>fprintf(stderr, "ERROR: unknown command line flag: %s\n",  <br>argv[i]); <br>continue; <br>} <br>else <br>{ <br>fprintf(stderr, "ERROR: unable to parse command line.\n"); <br>goto cleanup; <br>} <br>} <br> <br>// Parse flag arguments that don't take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue == NULL) <br>{ <br>if (!lstrcmpi(pszArgument,ARG_DELETE)) <br>{ <br>fDeleteService = TRUE; <br>} <br> <br>// Other flag (must take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s requires a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Parse flag arguments that take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue != NULL) <br>{ <br> <br>if (!lstrcmpi(pszArgument,ARG_SITEDN)) <br>{ <br>strncpy(szSiteDN, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_OBJNAME)) <br>{ <br>strncpy(szObjectName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_OBJTYPE)) <br>{ <br>strncpy(szObjectType, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_SERVICE)) <br>{ <br>strncpy(szServiceName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DISPLAY_NAME)) <br>{ <br>strncpy(szDisplayName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DEPENDENCIES)) <br>{ <br>strncpy(szDependencies, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_EXE)) <br>{ <br>strncpy(szExeName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_SERVER)) <br>{ <br>strncpy(szServer, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_ACCOUNT)) <br>{ <br>strncpy(szAccountName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_PASSWORD)) <br>{ <br>strncpy(szPassword, pszValue, MAX_PATH); <br>} <br> <br>// Other flag (must not take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s does not take a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Catch unknown arguments. <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: unknown argument %s\n", argv[i]); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Make sure we have all the info we need. <br> <br>if (SUCCEEDED(hr)) <br>{ <br>    if (szServiceName[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SERVICE); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>        if(fDeleteService == FALSE) <br>        { <br>        if (szSiteDN[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_SITEDN); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szDisplayName[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_DISPLAY_NAME); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szObjectName[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_OBJNAME); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if(szObjectType[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_OBJTYPE); <br>    hr = HR_LOG(E_FAIL); <br>    } <br>            else <br>            { <br>                if(!lstrcmpi(szObjectType, "GATEWAY")) <br>                { <br>                    strcpy(szObjectGuid, OBJECT_GUID_MAIL_GATEWAY); <br>                } <br>                else if(!lstrcmpi(szObjectType, "AGENT")) <br>                { <br>                    strcpy(szObjectGuid, OBJECT_GUID_MAILBOX_AGENT); <br>                } <br>                else <br>                { <br>        fprintf(stderr, <br>            "ERROR: please specify a valid /%s\n", ARG_OBJTYPE); <br>        hr = HR_LOG(E_FAIL); <br>                } <br>            } <br> <br>        if (szExeName[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_EXE); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szServer[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_SERVER); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szAccountName[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_ACCOUNT); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szPassword[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_PASSWORD); <br>    hr = HR_LOG(E_FAIL); <br>    } <br>        } <br>} <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--main----------------------------------------------------------------------- <br>//  Main function. <br>// ----------------------------------------------------------------------------- <br>int main( <br>    IN int argc, <br>    IN char *argv[]) <br>{ <br>    HRESULT hr      = NOERROR; <br>    TCHAR   *pch    = NULL; <br>    BOOL    fErrMsg = TRUE; <br> <br>    printf( "\n" ); <br> <br>    // <br>    // Get parameters from the command-line <br>    // <br> <br>    ZeroMemory(szDependencies, sizeof(szDependencies)); <br> <br>    hr = HrConfig(argc, argv); <br> <br>    if (FAILED(hr)) <br>    { <br>        fErrMsg = FALSE; <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Convert message classes parameter to REG_MULTI_SZ format. <br>    // <br> <br>    szDependencies[sizeof(szDependencies)-1] = 0; <br>    szDependencies[sizeof(szDependencies)-2] = 0; <br> <br>    pch = szDependencies; <br> <br>    while(*pch) <br>    { <br>        if(*pch == TEXT('%')) <br>        { <br>            *pch = 0; <br>        } <br> <br>        pch++; <br>    } <br> <br>    if(fDeleteService == FALSE) <br>    { <br>        hr = HrInstallService( <br>            szServer, <br>            szSiteDN, <br>            szDisplayName, <br>            szServiceName, <br>            szObjectName, <br>            szObjectGuid, <br>            PRODUCT_GUID_SAMPLE, <br>            szExeName, <br>            szDependencies, <br>            szAccountName, <br>            szPassword); <br>    } <br>    else <br>    { <br>        hr = HrRemoveService(szServiceName); <br>    } <br> <br>cleanup: <br> <br>// Successful completion. <br> <br>if (fDisplayedHelp) <br>{ <br>hr = NOERROR; <br>} <br>else if (SUCCEEDED(hr)) <br>{ <br>        if(fDeleteService == FALSE) <br>        { <br>    fprintf(stderr, "Service installed successfully.\n"); <br>    hr = NOERROR; <br>        } <br>        else <br>        { <br>    fprintf(stderr, "Service deleted successfully.\n"); <br>    hr = NOERROR; <br>        } <br>} <br> <br>// Error completion. <br> <br>else <br>{ <br>        if(fErrMsg == TRUE) <br>        { <br>    fprintf(stderr, "ERROR: an error occurred [%08lx].\n",hr); <br>        } <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    // return exit code <br>    return _nEcFromHr(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

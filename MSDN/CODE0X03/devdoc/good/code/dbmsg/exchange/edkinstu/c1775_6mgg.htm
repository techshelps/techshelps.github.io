<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROFINST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1780"></a>PROFINST.C</h2>
<pre><code>// --profinst.c----------------------------------------------------------------- <br>// <br>//  MAPI profile creation sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>// <br>// Names of Command Line Arguments <br>// <br> <br>#define ARG_SERVICE         "SERVICE" <br>#define ARG_NAME"NAME" <br>#define ARG_TYPE            "TYPE" <br>#define ARG_DELETE          "DELETE" <br>#define ARG_HELP1"?" <br>#define ARG_HELP2"HELP" <br> <br>// <br>// Table of Command Line Switches for _HrExpandCommandLineArgument() <br>// <br> <br>static char * rgpszArgArray[] = { <br>ARG_SERVICE, <br>ARG_NAME, <br>    ARG_TYPE, <br>    ARG_DELETE, <br>ARG_HELP1, <br>ARG_HELP2, <br>}; <br> <br>#define ARGARRAYSIZE (sizeof(rgpszArgArray)/sizeof(rgpszArgArray[0])) <br> <br>// <br>// Variables For Command Line Arguments <br>// <br> <br>char szServiceName[MAX_PATH+1]          = {0}; <br>char szProfileName[MAX_PATH+1]          = {0}; <br>char szProfileType[MAX_PATH+1]          = {0}; <br>BOOL fDisplayedHelp                     = FALSE; <br>BOOL fDeleteProfile                     = FALSE; <br> <br>// <br>// Functions <br>// <br> <br>//$--ShowUsage------------------------------------------------------------------ <br>//  Show usage information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowUsage(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowUsage()\n"); <br> <br>    printf("USAGE: PROFINST [Flags]\n\n"); <br>printf("  [Flags]        Enter PROFINST /? for details\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--ShowHelp------------------------------------------------------------------- <br>//  Show help information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowHelp(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowHelp()\n"); <br> <br>printf("MAPI Profile Installation sample.\n\n"); <br>printf("USAGE: PROFINST [Flags]\n\n"); <br>printf("  Required Flags\n"); <br>printf("  /SERVICE=            Service name\n"); <br>printf("  /NAME=               Profile name\n"); <br>printf("  /TYPE=               Profile type (GATEWAY or AGENT)\n"); <br>printf("\n"); <br>printf("  Optional Flags\n"); <br>    printf("  /DELETE              Delete profile\n"); <br>printf("  /HELP or /?          Display help\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--HrConfig------------------------------------------------------------------- <br>//  Read configuration from command line. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrConfig(           // RETURNS: return code <br>    IN int argc,            // number of arguments on command line <br>    IN char *argv[])        // array of command line arguments <br>{ <br>    HRESULThr= NOERROR; <br>    HRESULThrT= NOERROR; <br>char *pszArgument= NULL; <br>char *pszValue= NULL; <br>    inti= 0; <br> <br>DEBUGPRIVATE("HrConfig()\n"); <br> <br>// If there are no command line arguments then show a usage message. <br> <br>if (argc &lt; 2) <br>{ <br>ShowUsage(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br> <br>// Do an initial check for /? or /HELP.  If found, show a help message  <br>// and don't do any other parsing. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hr = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (SUCCEEDED(hr) &amp;&amp; pszArgument &amp;&amp;  <br>(!lstrcmpi(pszArgument,ARG_HELP1) ||  <br>!lstrcmpi(pszArgument,ARG_HELP2))) <br>{ <br>ShowHelp(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br>} <br> <br>// Loop through and parse all the command line arguments. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hrT = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (FAILED(hrT)) <br>{ <br>hr = hrT; <br> <br>if (hr == EDK_E_NOT_FOUND) <br>{ <br>fprintf(stderr, "ERROR: unknown command line flag: %s\n",  <br>argv[i]); <br>continue; <br>} <br>else <br>{ <br>fprintf(stderr, "ERROR: unable to parse command line.\n"); <br>goto cleanup; <br>} <br>} <br> <br>// Parse flag arguments that don't take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue == NULL) <br>{ <br>if (!lstrcmpi(pszArgument,ARG_DELETE)) <br>{ <br>fDeleteProfile = TRUE; <br>} <br> <br>// Other flag (must take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s requires a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Parse flag arguments that take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue != NULL) <br>{ <br> <br>if (!lstrcmpi(pszArgument,ARG_SERVICE)) <br>{ <br>strncpy(szServiceName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_NAME)) <br>{ <br>strncpy(szProfileName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_TYPE)) <br>{ <br>strncpy(szProfileType, pszValue, MAX_PATH); <br>} <br> <br>// Other flag (must not take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s does not take a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Catch unknown arguments. <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: unknown argument %s\n", argv[i]); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Make sure we have all the info we need. <br> <br>if (SUCCEEDED(hr)) <br>{ <br>    if ((szServiceName[0] == 0) &amp;&amp; (fDeleteProfile == FALSE)) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SERVICE); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if (szProfileName[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_NAME); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if(szProfileType[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_TYPE); <br>hr = HR_LOG(E_FAIL); <br>} <br>        else <br>        { <br>            if(lstrcmpi(szProfileType, "GATEWAY") &amp;&amp; <br>               lstrcmpi(szProfileType, "AGENT")) <br>            { <br>    fprintf(stderr, "ERROR: please specify a valid /%s\n", ARG_TYPE); <br>    hr = HR_LOG(E_FAIL); <br>            } <br>        } <br>} <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--main----------------------------------------------------------------------- <br>//  Main function. <br>// ----------------------------------------------------------------------------- <br>int main( <br>    IN int argc, <br>    IN char *argv[]) <br>{ <br>    HRESULT    hr         = NOERROR; <br>MAPIINIT_0 MapiInit   = { 0 }; <br>    BOOL       IsInitMAPI = FALSE; <br>    BOOL       fErrMsg    = TRUE; <br> <br>    printf( "\n" ); <br> <br>    MapiInit.ulVersion = MAPI_INIT_VERSION; <br> <br>    hr = MAPIInitialize(&amp;MapiInit); <br> <br>    if(FAILED(hr)) <br>    { <br>    fprintf(stderr, "ERROR: MAPI failed to initialize\n"); <br>        fErrMsg = FALSE; <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    IsInitMAPI = TRUE; <br> <br>    // <br>    // Get parameters from the command-line <br>    // <br> <br>    hr = HrConfig(argc, argv); <br> <br>    if (FAILED(hr)) <br>    { <br>        fErrMsg = FALSE; <br>        goto cleanup; <br>    } <br> <br>    if(fDeleteProfile == FALSE) <br>    { <br>        if(!lstrcmpi(szProfileType, "GATEWAY")) <br>        { <br>            hr = HrCreateGatewayProfile(szServiceName, szProfileName); <br>        } <br>        else <br>        { <br>            hr = HrCreateMailboxAgentProfile(szServiceName, szProfileName); <br>        } <br>    } <br>    else <br>    { <br>        hr = HrRemoveProfile(szProfileName); <br>    } <br> <br>cleanup: <br> <br>// Successful completion. <br> <br>if (fDisplayedHelp) <br>{ <br>hr = NOERROR; <br>} <br>else if (SUCCEEDED(hr)) <br>{ <br>        if(fDeleteProfile == FALSE) <br>        { <br>    fprintf(stderr, "Profile created successfully.\n"); <br>    hr = NOERROR; <br>        } <br>        else <br>        { <br>    fprintf(stderr, "Profile deleted successfully.\n"); <br>    hr = NOERROR; <br>        } <br>} <br> <br>// Error completion. <br> <br>else <br>{ <br>        if(fErrMsg == TRUE) <br>        { <br>    fprintf(stderr, "ERROR: an error occurred [%08lx].\n",hr); <br>        } <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if(IsInitMAPI == TRUE) <br>    { <br>        MAPIUninitialize(); <br>    } <br> <br>    // return exit code <br>    return _nEcFromHr(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

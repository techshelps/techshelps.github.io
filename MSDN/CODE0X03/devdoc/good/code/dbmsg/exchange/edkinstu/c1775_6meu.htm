<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXTNINST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1776"></a>EXTNINST.C</h2>
<pre><code>// --extninst.c----------------------------------------------------------------- <br>// <br>//  Admin extension installation sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "dapi.h" <br> <br>// <br>// Names of Command Line Arguments <br>// <br> <br>#define ARG_SITEDN"SITEDN" <br>#define ARG_DISPLAY_NAME"DISPLAY_NAME" <br>#define ARG_MACHINE         "MACHINE" <br>#define ARG_NAME            "NAME" <br>#define ARG_SERVER"SERVER" <br>#define ARG_EXTDLL          "EXTDLL" <br>#define ARG_DELETE          "DELETE" <br>#define ARG_HELP1"?" <br>#define ARG_HELP2"HELP" <br> <br>// <br>// Table of Command Line Switches for _HrExpandCommandLineArgument() <br>// <br> <br>static char * rgpszArgArray[] = { <br>ARG_SITEDN, <br>ARG_DISPLAY_NAME, <br>ARG_MACHINE, <br>ARG_NAME, <br>ARG_SERVER, <br>ARG_EXTDLL, <br>    ARG_DELETE, <br>ARG_HELP1, <br>ARG_HELP2, <br>}; <br> <br>#define ARGARRAYSIZE (sizeof(rgpszArgArray)/sizeof(rgpszArgArray[0])) <br> <br>// <br>// Variables For Command Line Arguments <br>// <br> <br>char   szSiteDN[MAX_PATH+1]             = {0}; <br>char   szDisplayName[MAX_PATH+1]        = {0}; <br>char   szMachineType[MAX_PATH+1]        = {0}; <br>char   szExtensionName[MAX_PATH+1]      = {0}; <br>char   szExtensionDll[MAX_PATH+1]       = {0}; <br>char   szFileName[MAX_PATH+1]           = {0}; <br>char   szServer[MAX_PATH+1]= {0}; <br>BOOL   fDisplayedHelp= FALSE; <br>BOOL   fDeleteExtension                 = FALSE; <br>LPVOID lpVersionInfo                    = NULL; <br>DWORD  dwFileVersionMS                  = 0; <br>DWORD  dwFileVersionLS                  = 0; <br> <br>// <br>// Functions <br>// <br> <br>//$--ShowUsage------------------------------------------------------------------ <br>//  Show usage information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowUsage(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowUsage()\n"); <br> <br>    printf("USAGE: EXTNINST [Flags]\n\n"); <br>printf("  [Flags]        Enter EXTNINST /? for details\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--ShowHelp------------------------------------------------------------------- <br>//  Show help information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowHelp(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowHelp()\n"); <br> <br>printf("Admin Extension Installation sample.\n\n"); <br>printf("USAGE: EXTNINST [Flags]\n\n"); <br>printf("  Required Flags\n"); <br>printf("  /SITEDN=             Admin extension site distinguished name\n"); <br>printf("  /DISPLAY_NAME=       Admin extension display name\n"); <br>printf("  /MACHINE=            Admin extension DLL machine type\n"); <br>printf("  /NAME=               Admin extension name\n"); <br>printf("  /EXTDLL=             Admin extension DLL (include full path)\n"); <br>printf("  /SERVER=             Server computer name\n"); <br>printf("\n"); <br>printf("  Optional Flags\n"); <br>    printf("  /DELETE              Delete admin extension\n"); <br>printf("  /HELP or /?          Display help\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--HrConfig------------------------------------------------------------------- <br>//  Read configuration from command line. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrConfig(           // RETURNS: return code <br>    IN int argc,            // number of arguments on command line <br>    IN char *argv[])        // array of command line arguments <br>{ <br>    HRESULT          hr                 = NOERROR; <br>    HRESULT          hrT                = NOERROR; <br>char *           pszArgument        = NULL; <br>char *           pszValue    = NULL; <br>    int              i    = 0; <br>    UINT             dwBytes            = 0; <br>    LPVOID           lpBuffer           = 0; <br>    VS_FIXEDFILEINFO *lpvsFixedFileInfo = {0}; <br> <br>DEBUGPRIVATE("HrConfig()\n"); <br> <br>// If there are no command line arguments then show a usage message. <br> <br>if (argc &lt; 2) <br>{ <br>ShowUsage(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br> <br>// Do an initial check for /? or /HELP.  If found, show a help message  <br>// and don't do any other parsing. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hr = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (SUCCEEDED(hr) &amp;&amp; pszArgument &amp;&amp;  <br>(!lstrcmpi(pszArgument,ARG_HELP1) ||  <br>!lstrcmpi(pszArgument,ARG_HELP2))) <br>{ <br>ShowHelp(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br>} <br> <br>// Loop through and parse all the command line arguments. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hrT = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (FAILED(hrT)) <br>{ <br>hr = hrT; <br> <br>if (hr == EDK_E_NOT_FOUND) <br>{ <br>fprintf(stderr, "ERROR: unknown command line flag: %s\n",  <br>argv[i]); <br>continue; <br>} <br>else <br>{ <br>fprintf(stderr, "ERROR: unable to parse command line.\n"); <br>goto cleanup; <br>} <br>} <br> <br>// Parse flag arguments that don't take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue == NULL) <br>{ <br>if (!lstrcmpi(pszArgument,ARG_DELETE)) <br>{ <br>fDeleteExtension = TRUE; <br>} <br> <br>// Other flag (must take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s requires a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Parse flag arguments that take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue != NULL) <br>{ <br> <br>if (!lstrcmpi(pszArgument,ARG_SITEDN)) <br>{ <br>strncpy(szSiteDN, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DISPLAY_NAME)) <br>{ <br>strncpy(szDisplayName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_MACHINE)) <br>{ <br>strncpy(szMachineType, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_NAME)) <br>{ <br>strncpy(szExtensionName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_SERVER)) <br>{    <br>strncpy(szServer, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_EXTDLL)) <br>{ <br>strncpy(szExtensionDll, pszValue, MAX_PATH); <br>} <br> <br>// Other flag (must not take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s does not take a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Catch unknown arguments. <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: unknown argument %s\n", argv[i]); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Make sure we have all the info we need. <br> <br>if (SUCCEEDED(hr)) <br>{ <br>    if (szServer[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SERVER); <br>hr = HR_LOG(E_FAIL); <br>} <br>        else <br>        { <br>            DWORD dwService      = 0; <br>            DWORD dwCurrentState = 0; <br> <br>            hr = HrGetExchangeStatus( <br>                szServer, <br>                &amp;dwService, <br>                &amp;dwCurrentState); <br> <br>            if(FAILED(hr)) <br>            { <br>    fprintf(stderr, "ERROR: please start Exchange on %s\n",szServer); <br>    hr = HR_LOG(E_FAIL); <br>            } <br>        } <br> <br>    if (szSiteDN[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SITEDN); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if (szExtensionName[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_NAME); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if (szMachineType[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_MACHINE); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>        if(fDeleteExtension == FALSE) <br>        { <br>        if (szDisplayName[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_DISPLAY_NAME); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szExtensionDll[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_EXTDLL); <br>    hr = HR_LOG(E_FAIL); <br>    } <br>            else <br>            { <br>                DWORD dwAttrib = 0; <br> <br>                dwAttrib = GetFileAttributes(szExtensionDll); <br> <br>                if(dwAttrib == 0xFFFFFFFF) <br>                { <br>        fprintf(stderr, <br>        "ERROR: please specify an existing file for /%s\n", <br>        ARG_EXTDLL); <br> <br>        hr = HR_LOG(E_FAIL); <br>                } <br>            } <br>        } <br>} <br> <br>    if(SUCCEEDED(hr) &amp;&amp; (fDeleteExtension == FALSE)) <br>    { <br>        // <br>        // Get extension DLL file name <br>        // <br> <br>    strncpy(szFileName, <br>        _GetFileNameFromFullPath((LPTSTR)szExtensionDll), MAX_PATH); <br> <br>        // <br>        // Get extension DLL file version <br>        // <br> <br>        hr = HrGetFileVersionInfo( <br>            szExtensionDll, <br>            &amp;lpVersionInfo); <br> <br>        if(FAILED(hr)) <br>    { <br>    fprintf(stderr, "ERROR: version unavailable [%08lx] in /%s\n", <br>                hr, <br>        ARG_EXTDLL); <br> <br>    hr = HR_LOG(E_FAIL); <br>    } <br>        else <br>        { <br>            BOOL fRet = FALSE; <br> <br>            fRet = VerQueryValue(lpVersionInfo, <br>                          TEXT("\\"), <br>                          &amp;lpBuffer, <br>                          &amp;dwBytes); <br> <br>            if(fRet == FALSE) <br>            { <br>        fprintf(stderr, "ERROR: version resource is invalid in /%s\n", <br>            ARG_EXTDLL); <br> <br>        hr = HR_LOG(E_FAIL); <br>            } <br>            else <br>            { <br>                lpvsFixedFileInfo = (VS_FIXEDFILEINFO *)lpBuffer; <br> <br>                dwFileVersionMS = lpvsFixedFileInfo-&gt;dwFileVersionMS; <br>                dwFileVersionLS = lpvsFixedFileInfo-&gt;dwFileVersionLS; <br>            } <br>        } <br>    } <br> <br>    hrT = HrAdminProgramExists(); <br> <br>    if(FAILED(hrT)) <br>    { <br>fprintf(stderr, "ERROR: install the Exchange administrator program\n"); <br>hr = HR_LOG(E_FAIL); <br>    } <br> <br>cleanup: <br> <br>    GLOBALFREE(lpVersionInfo); <br> <br>    RETURN(hr); <br>} <br> <br>//$--main----------------------------------------------------------------------- <br>//  Main function that performs directory import. <br>// ----------------------------------------------------------------------------- <br>int main( <br>    IN int argc, <br>    IN char *argv[]) <br>{ <br>    HRESULT hr                 = NOERROR; <br>    FILE    *fp                = NULL; <br>    BOOL    fErrMsg            = TRUE; <br>    DWORD   dwOldFileVersionMS = 0; <br>    DWORD   dwOldFileVersionLS = 0; <br> <br>    printf( "\n" ); <br> <br>    // <br>    // Get parameters from the command-line <br>    // <br> <br>    hr = HrConfig(argc, argv); <br> <br>    if (FAILED(hr)) <br>    { <br>        fErrMsg = FALSE; <br>        goto cleanup; <br>    } <br> <br>    if(fDeleteExtension == FALSE) <br>    { <br>        hr = HrAdminExtensionExists( <br>            szServer, <br>            szSiteDN, <br>            szExtensionName, <br>            szMachineType); <br> <br>        if(SUCCEEDED(hr)) <br>        { <br>            hr = HrGetAdminExtensionVersion( <br>                szServer, <br>                szSiteDN, <br>                szExtensionName, <br>                szMachineType, <br>                &amp;dwOldFileVersionMS, <br>                &amp;dwOldFileVersionLS); <br> <br>            if(FAILED(hr)) <br>            { <br>        fprintf(stderr, <br>            "ERROR: file version is missing in %s admin extension\n", <br>            szExtensionName); <br>        hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br> <br>            if((dwOldFileVersionMS &gt;  dwFileVersionMS) || <br>              ((dwOldFileVersionMS == dwFileVersionMS) &amp;&amp; <br>               (dwOldFileVersionLS &gt;  dwFileVersionLS))) <br>            { <br>        fprintf(stderr, <br>            "WARNING: installing older version of %s admin extension\n", <br>            szExtensionName); <br>            } <br> <br>            hr = HrRemoveAdminExtension( <br>                szServer, <br>                szSiteDN, <br>                szExtensionName, <br>                szMachineType); <br> <br>            if(FAILED(hr)) <br>            { <br>        fprintf(stderr, <br>            "ERROR: unable to remove %s admin extension\n", <br>            szExtensionName); <br>        hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br>        } <br> <br>        hr = HrInstallAdminExtension( <br>            szServer, <br>            szSiteDN, <br>            szDisplayName, <br>            szExtensionName, <br>            dwFileVersionMS, <br>            dwFileVersionLS, <br>            szFileName, <br>            szMachineType); <br>    } <br>    else <br>    { <br>        hr = HrAdminExtensionExists( <br>            szServer, <br>            szSiteDN, <br>            szExtensionName, <br>            szMachineType); <br> <br>        if(FAILED(hr)) <br>        { <br>    fprintf(stderr, <br>        "ERROR: the %s admin extension does not exist\n", <br>        szExtensionName); <br>    hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = HrRemoveAdminExtension( <br>            szServer, <br>            szSiteDN, <br>            szExtensionName, <br>            szMachineType); <br>    } <br> <br>cleanup: <br> <br>// Successful completion. <br> <br>if (fDisplayedHelp) <br>{ <br>hr = NOERROR; <br>} <br>else if (SUCCEEDED(hr)) <br>{ <br>        if(fDeleteExtension == FALSE) <br>        { <br>    fprintf(stderr, "Admin extension installed successfully.\n"); <br>        } <br>        else <br>        { <br>    fprintf(stderr, "Admin extension deleted successfully.\n"); <br>        } <br> <br>hr = NOERROR; <br>} <br> <br>// Error completion. <br> <br>else <br>{ <br>        if(fErrMsg == TRUE) <br>        { <br>    fprintf(stderr, "ERROR: error(s) written to NT Event Log.\n"); <br>        } <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    // return exit code <br>    return _nEcFromHr(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

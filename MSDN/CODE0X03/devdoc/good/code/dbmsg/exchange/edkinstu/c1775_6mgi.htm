<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TMPLINST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1782"></a>TMPLINST.C</h2>
<pre><code>// --tmplinst.c----------------------------------------------------------------- <br>// <br>//  Address Template installation sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br> <br>// <br>// Names of Command Line Arguments <br>// <br> <br>#define ARG_SITEDN"SITEDN" <br>#define ARG_DISPLAY_NAME    "DISPLAY_NAME" <br>#define ARG_NAME            "NAME" <br>#define ARG_TYPE            "TYPE" <br>#define ARG_SYNTAX          "SYNTAX" <br>#define ARG_SERVER"SERVER" <br>#define ARG_MESSAGE_DT      "MESSAGE_DT" <br>#define ARG_RECIPIENT_DT    "RECIPIENT_DT" <br>#define ARG_ADDRESS_DT      "ADDRESS_DT" <br>#define ARG_LANGUAGE        "LANGUAGE" <br>#define ARG_DATA16          "DATA16" <br>#define ARG_DATA32          "DATA32" <br>#define ARG_FILE            "FILE" <br>#define ARG_DELETE          "DELETE" <br>#define ARG_HELP1"?" <br>#define ARG_HELP2"HELP" <br> <br>// <br>// Table of Command Line Switches for _HrExpandCommandLineArgument() <br>// <br> <br>static char * rgpszArgArray[] = { <br>ARG_SITEDN, <br>    ARG_DISPLAY_NAME, <br>ARG_NAME, <br>ARG_TYPE, <br>ARG_SYNTAX, <br>ARG_SERVER, <br>ARG_MESSAGE_DT, <br>ARG_RECIPIENT_DT, <br>ARG_ADDRESS_DT, <br>ARG_LANGUAGE, <br>    ARG_DATA16, <br>    ARG_DATA32, <br>    ARG_FILE, <br>ARG_DELETE, <br>ARG_HELP1, <br>ARG_HELP2, <br>}; <br> <br>#define ARGARRAYSIZE (sizeof(rgpszArgArray)/sizeof(rgpszArgArray[0])) <br> <br>// <br>// Variables For Command Line Arguments <br>// <br> <br>char szSiteDN[MAX_PATH+1]                = {0}; <br>char szDisplayName[MAX_PATH+1]           = {0}; <br>char szTemplateName[MAX_PATH+1] = {0}; <br>char szAddressType[MAX_PATH+1]           = {0}; <br>char szAddressSyntax[MAX_PATH+1]         = {0}; <br>char szServer[MAX_PATH+1] = {0}; <br>char szMessageDisplayTable[MAX_PATH+1]   = {0}; <br>char szRecipientDisplayTable[MAX_PATH+1] = {0}; <br>char szAddressDisplayTable[MAX_PATH+1]   = {0}; <br>char szLanguage[MAX_PATH+1]              = {0}; <br>char szHelpData16[MAX_PATH+1]            = {0}; <br>char szHelpData32[MAX_PATH+1]            = {0}; <br>char szHelpFileName[MAX_PATH+1]          = {0}; <br>BOOL fDisplayedHelp         = FALSE; <br>BOOL fDeleteTemplate                     = FALSE; <br> <br>// <br>// Functions <br>// <br> <br>//$--ShowUsage------------------------------------------------------------------ <br>//  Show usage information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowUsage(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowUsage()\n"); <br> <br>    printf("USAGE: TMPLINST [Flags]\n\n"); <br>printf("  [Flags]        Enter TMPLINST /? for details\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--ShowHelp------------------------------------------------------------------- <br>//  Show help information. <br>// ----------------------------------------------------------------------------- <br>static VOID ShowHelp(void)// RETURNS: nothing <br>{ <br>DEBUGPRIVATE("ShowHelp()\n"); <br> <br>printf("Address Template Installation sample.\n\n"); <br>printf("USAGE: TMPLINST [Flags]\n\n"); <br>printf("  Required Flags\n"); <br>printf("  /SITEDN=             Site distinguished name\n"); <br>    printf("  /DISPLAY_NAME        Template display name\n"); <br>printf("  /NAME=               Template name\n"); <br>printf("  /TYPE=               Address type\n"); <br>printf("  /SYNTAX=             Address syntax\n"); <br>printf("  /SERVER=             Server computer name\n"); <br>printf("  /ADDRESS_DT=         Address Entry Display Table\n"); <br>printf("  /LANGUAGE=           Language (e.g. 409) \n"); <br>    printf("  /DATA16=             Help data for 16-bit clients\n"); <br>    printf("  /DATA32=             Help data for 32-bit clients\n"); <br>    printf("  /FILE=               Help file name used by clients\n"); <br>printf("\n"); <br>printf("  Optional Flags\n"); <br>printf("  /MESSAGE_DT=         Per-Message Display Table\n"); <br>printf("  /RECIPIENT_DT=       Per-Recipient Display Table\n"); <br>printf("  /DELETE              Delete template\n"); <br>printf("  /HELP or /?          Display help\n"); <br> <br>fDisplayedHelp = TRUE; <br>} <br> <br>//$--HrConfig------------------------------------------------------------------- <br>//  Read configuration from command line. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrConfig(           // RETURNS: return code <br>    IN int argc,            // number of arguments on command line <br>    IN char *argv[])        // array of command line arguments <br>{ <br>    HRESULThr= NOERROR; <br>    HRESULThrT= NOERROR; <br>char *pszArgument= NULL; <br>char *pszValue= NULL; <br>    inti= 0; <br> <br>DEBUGPRIVATE("HrConfig()\n"); <br> <br>// If there are no command line arguments then show a usage message. <br> <br>if (argc &lt; 2) <br>{ <br>ShowUsage(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br> <br>// Do an initial check for /? or /HELP.  If found, show a help message  <br>// and don't do any other parsing. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hr = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (SUCCEEDED(hr) &amp;&amp; pszArgument &amp;&amp;  <br>(!lstrcmpi(pszArgument,ARG_HELP1) ||  <br>!lstrcmpi(pszArgument,ARG_HELP2))) <br>{ <br>ShowHelp(); <br>hr = E_FAIL; <br>goto cleanup; <br>} <br>} <br> <br>// Loop through and parse all the command line arguments. <br> <br>for (i = 1; i &lt; argc; i++) <br>{ <br>hrT = _HrExpandCommandLineArgument( <br>argv[i], rgpszArgArray, ARGARRAYSIZE, NULL, &amp;pszArgument, &amp;pszValue); <br> <br>if (FAILED(hrT)) <br>{ <br>hr = hrT; <br> <br>if (hr == EDK_E_NOT_FOUND) <br>{ <br>fprintf(stderr, "ERROR: unknown command line flag: %s\n",  <br>argv[i]); <br>continue; <br>} <br>else <br>{ <br>fprintf(stderr, "ERROR: unable to parse command line.\n"); <br>goto cleanup; <br>} <br>} <br> <br>// Parse flag arguments that don't take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue == NULL) <br>{ <br>if (!lstrcmpi(pszArgument,ARG_DELETE)) <br>{ <br>fDeleteTemplate = TRUE; <br>} <br> <br>// Other flag (must take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s requires a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Parse flag arguments that take a value. <br> <br>else if (pszArgument != NULL &amp;&amp; pszValue != NULL) <br>{ <br> <br>if (!lstrcmpi(pszArgument,ARG_SITEDN)) <br>{ <br>strncpy(szSiteDN, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DISPLAY_NAME)) <br>{ <br>strncpy(szDisplayName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_NAME)) <br>{ <br>strncpy(szTemplateName, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_SERVER)) <br>{ <br>strncpy(szServer, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_TYPE)) <br>{ <br>strncpy(szAddressType, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_SYNTAX)) <br>{ <br>strncpy(szAddressSyntax, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_MESSAGE_DT)) <br>{ <br>strncpy(szMessageDisplayTable, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_RECIPIENT_DT)) <br>{ <br>strncpy(szRecipientDisplayTable, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_ADDRESS_DT)) <br>{ <br>strncpy(szAddressDisplayTable, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_LANGUAGE)) <br>{ <br>strncpy(szLanguage, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DATA16)) <br>{ <br>strncpy(szHelpData16, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_DATA32)) <br>{ <br>strncpy(szHelpData32, pszValue, MAX_PATH); <br>} <br> <br>else if (!lstrcmpi(pszArgument,ARG_FILE)) <br>{ <br>strncpy(szHelpFileName, pszValue, MAX_PATH); <br>} <br> <br>// Other flag (must not take a value). <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: flag /%s does not take a value\n",  <br>pszArgument); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Catch unknown arguments. <br> <br>else <br>{ <br>fprintf(stderr, "ERROR: unknown argument %s\n", argv[i]); <br>hr = HR_LOG(E_FAIL); <br>} <br>} <br> <br>// Make sure we have all the info we need. <br> <br>if (SUCCEEDED(hr)) <br>{ <br>    if (szServer[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SERVER); <br>hr = HR_LOG(E_FAIL); <br>} <br>        else <br>        { <br>            DWORD dwService      = 0; <br>            DWORD dwCurrentState = 0; <br> <br>            hr = HrGetExchangeStatus( <br>                szServer, <br>                &amp;dwService, <br>                &amp;dwCurrentState); <br> <br>            if(FAILED(hr)) <br>            { <br>    fprintf(stderr, "ERROR: please start Exchange on %s\n",szServer); <br>    hr = HR_LOG(E_FAIL); <br>            } <br>        } <br> <br>        if (szTemplateName[0] == 0) <br>        { <br>            fprintf(stderr, "ERROR: please specify /%s\n", ARG_NAME); <br>            hr = HR_LOG(E_FAIL); <br>        } <br> <br>    if (szSiteDN[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_SITEDN); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if (szAddressType[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_TYPE); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    if (szLanguage[0] == 0) <br>{ <br>fprintf(stderr, "ERROR: please specify /%s\n", ARG_LANGUAGE); <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>        if(fDeleteTemplate == FALSE) <br>        { <br>        if (szAddressSyntax[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_SYNTAX); <br>    hr = HR_LOG(E_FAIL); <br>    } <br> <br>        if (szAddressDisplayTable[0] == 0) <br>    { <br>    fprintf(stderr, "ERROR: please specify /%s\n", ARG_ADDRESS_DT); <br>    hr = HR_LOG(E_FAIL); <br>    } <br>        } <br>} <br> <br>    hrT = HrAdminProgramExists(); <br> <br>    if(FAILED(hrT)) <br>    { <br>fprintf(stderr, "ERROR: install the Exchange administrator program\n"); <br>hr = HR_LOG(E_FAIL); <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--main----------------------------------------------------------------------- <br>//  Main function. <br>// ----------------------------------------------------------------------------- <br>int main( <br>    IN int argc, <br>    IN char *argv[]) <br>{ <br>    HRESULT hr      = NOERROR; <br>    BOOL    fErrMsg = TRUE; <br> <br>    printf( "\n" ); <br> <br>    // <br>    // Get parameters from the command-line <br>    // <br> <br>    hr = HrConfig(argc, argv); <br> <br>    if (FAILED(hr)) <br>    { <br>        fErrMsg = FALSE; <br>        goto cleanup; <br>    } <br> <br>    if(fDeleteTemplate == FALSE) <br>    { <br>        hr = HrAddressTemplateExists( <br>            szServer, <br>            szSiteDN, <br>            szTemplateName, <br>            szAddressType, <br>            szLanguage); <br> <br>        if(SUCCEEDED(hr)) <br>        { <br>            hr = HrRemoveAddressTemplate( <br>                szServer, <br>                szSiteDN, <br>                szTemplateName, <br>                szAddressType, <br>                szLanguage); <br> <br>            if(FAILED(hr)) <br>            { <br>        fprintf(stderr, <br>            "ERROR: unable to remove address template %s\n", <br>            szTemplateName); <br>        hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br>        } <br> <br>        hr = HrInstallAddressTemplate( <br>            szServer, <br>            szSiteDN, <br>            szDisplayName, <br>            szTemplateName, <br>            szAddressSyntax, <br>            szAddressType, <br>            szMessageDisplayTable, <br>            szRecipientDisplayTable, <br>            szAddressDisplayTable, <br>            szLanguage, <br>            szHelpData16, <br>            szHelpData32, <br>            szHelpFileName); <br>    } <br>    else <br>    { <br>        hr = HrAddressTemplateExists( <br>            szServer, <br>            szSiteDN, <br>            szTemplateName, <br>            szAddressType, <br>            szLanguage); <br> <br>        if(FAILED(hr)) <br>        { <br>    fprintf(stderr, <br>        "ERROR: the address template %s does not exist\n", <br>        szTemplateName); <br>    hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = HrRemoveAddressTemplate( <br>            szServer, <br>            szSiteDN, <br>            szTemplateName, <br>            szAddressType, <br>            szLanguage); <br>    } <br> <br>cleanup: <br> <br>// Successful completion. <br> <br>if (fDisplayedHelp) <br>{ <br>hr = NOERROR; <br>} <br>else if (SUCCEEDED(hr)) <br>{ <br>        if(fDeleteTemplate == FALSE) <br>        { <br>    fprintf(stderr, "Address template created successfully.\n"); <br>        } <br>        else <br>        { <br>    fprintf(stderr, "Address template deleted successfully.\n"); <br>        } <br> <br>hr = NOERROR; <br>} <br> <br>// Error completion. <br> <br>else <br>{ <br>        if(fErrMsg == TRUE) <br>        { <br>    fprintf(stderr, "ERROR: error(s) written to NT Event Log.\n"); <br>        } <br>hr = HR_LOG(E_FAIL); <br>} <br> <br>    // return exit code <br>    return _nEcFromHr(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

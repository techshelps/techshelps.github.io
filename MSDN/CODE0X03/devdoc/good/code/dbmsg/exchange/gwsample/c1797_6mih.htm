<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GWSAMPLE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1799"></a>GWSAMPLE.H</h2>
<pre><code>// --gwsample.h----------------------------------------------------------------- <br>// <br>// Sample gateway application. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _GWSAMPLE_H <br>#define _GWSAMPLE_H <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif // __cplusplus <br> <br>#define SYSTEM_ADMINISTRATOR    TEXT("System Administrator") <br>#define SYSTEM                  TEXT("SYSTEM") <br> <br>extern LPTSTR  lpszSysAdminName; <br>extern LPTSTR  lpszSysAdminAddr; <br> <br>#define IDISPNAME  0 <br>#define IADDRTYPE  1 <br>#define IEMAILADDR 2 <br>#define ISEARCHKEY 3 <br>#define IENTRYID   4 <br>#define IMAPIRECIP 5 <br>#define IRESP      6 <br>#define IRECIPNUM  7 <br>#define IORIGDISP  8 <br>#define IORIGENTRY 9 <br>#define IPROXYADDR 10 <br> <br>#define IRECIPSTAT 10 <br> <br>#define MIN_CRECIPPROPS 11 <br> <br>#define PR_RECIPSTAT PROP_TAG(PT_LONG, 0x65FF) <br> <br> <br>//$--HrMapRecipProxyToAddr------------------------------------------------------ <br>// Map recipient proxy addresses to addresses. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapRecipProxyToAddr(          // RETURNS: return code <br>    IN LPADRBOOK lpAdrBook,             // pointer to address book <br>    IN BOOL fDefaultRespValue,          // default responsibility value <br>    IN BOOL fIgnoreRespValue,           // ignore  responsibility value <br>    IN LPABCONT lpGalABCont,            // pointer to GAL container <br>    IN LPTSTR lpszAddrType,             // pointer to address type <br>    IN LPADRLIST lpOriginalAdrList,     // pointer to unmodified address list <br>    IN LPADRLIST lpMappedAdrList,       // pointer to unmodified address list <br>    IN OUT LPADRLIST lpEnvelopeAdrList, // pointer to envelope address list <br>    IN OUT LPADRLIST lpEnvelopeNDRAdrList,// pointer to envelope NDR address list <br>    IN OUT LPMESSAGE lpMessage,         // pointer to message <br>    OUT LPADRLIST *lppAdrList,          // pointer to address list <br>    OUT LPADRLIST *lppNDRAdrList);      // pointer to NDR address list <br> <br>//$--HrCreateEmailAddress------------------------------------------------------- <br>// Create email address. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateEmailAddress(               // RETURNS: return code <br>    IN LPADRBOOK  lpAdrBook,                // pointer to address book <br>    IN LPVOID     lpObject,                 // pointer to object <br>    IN LPTSTR     lpszDisplayName,          // pointer to display name <br>    IN LPTSTR     lpszAddressType,          // pointer to address type <br>    IN LPTSTR     lpszAddress,              // pointer to address <br>    IN ULONG      cbeid,                    // count of bytes in entry ID <br>    IN LPENTRYID  lpeid,                    // pointer to entry ID <br>    OUT LPTSTR    *lppszEmailDisplayName,   // email display name <br>    OUT LPTSTR    *lppszEmailAddressType,   // email address type <br>    OUT LPTSTR    *lppszEmailAddress,       // email address <br>    OUT LPTSTR    *lppszEmailSearchKey,     // email search key <br>    OUT ULONG     *lpcbEmailEid,            // count of bytes in email entry ID <br>    OUT LPENTRYID *lppEmailEid);            // pointer to email entry ID <br> <br>//$--HrDeleteAddressListProperty------------------------------------------------ <br>// Delete a property from an address list given its property tag. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDeleteAddressListProperty(    // RETURNS: return code <br>    IN ULONG ulPropTag,                 // property tag <br>    IN OUT LPADRLIST lpAdrList);        // pointer to address list <br> <br>//$--HrMapRecipAddrToProxy------------------------------------------------------ <br>// Map recipient addresses to proxy addresses. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapRecipAddrToProxy(          // RETURNS: return code <br>    IN LPADRBOOK lpAdrBook,             // pointer to address book <br>    IN BOOL fDefaultRespValue,          // default responsibility value <br>    IN BOOL fIgnoreRespValue,           // ignore  responsibility value <br>    IN LPTSTR lpszAddrType,             // pointer to address type <br>    IN LPADRLIST lpOriginalEnvelopeAdrList,// pointer to unmodified address list <br>    IN LPADRLIST lpOriginalAdrList,     // pointer to unmodified address list <br>    IN LPADRLIST lpMappedAdrList,       // pointer to unmodified address list <br>    IN OUT LPADRLIST lpEnvelopeAdrList, // pointer to envelope address list <br>    IN OUT LPADRLIST lpEnvelopeNDRAdrList,// pointer to envelope NDR address list <br>    IN OUT LPMESSAGE lpMessage,         // pointer to message <br>    OUT LPADRLIST *lppAdrList,          // pointer to address list <br>    OUT LPADRLIST *lppNDRAdrList);      // pointer to NDR address list <br> <br>//$--HrDeleteAddressProps-------------------------------------------------------- <br>// Delete address properties from the message. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrDeleteAddressProps(           // RETURNS: return code <br>    IN LPMESSAGE  lpMessage,            // pointer to message <br>    IN ULONG ulDisplayName,             // display name property tag <br>    IN ULONG ulAddressType,             // address type property tag <br>    IN ULONG ulAddress,                 // address property tag <br>    IN ULONG ulSearchKey,               // search key property tag <br>    IN ULONG ulEntryId);                // entry ID property tag <br> <br>//$--HrCreateProxyAddress------------------------------------------------------- <br>// Create proxy address. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateProxyAddress(               // RETURNS: return code <br>    IN LPADRBOOK  lpAdrBook,                // pointer to address book <br>    IN LPVOID     lpObject,                 // pointer to object <br>    IN BOOL       fMapiRecip,               // MAPI recipient <br>    IN LPTSTR     lpszDisplayName,          // pointer to display name <br>    IN LPTSTR     lpszAddressType,          // pointer to address type <br>    IN LPTSTR     lpszAddress,              // pointer to address <br>    OUT LPTSTR    *lppszProxyDisplayName,   // proxy display name <br>    OUT LPTSTR    *lppszProxyAddressType,   // proxy address type <br>    OUT LPTSTR    *lppszProxyAddress,       // proxy address <br>    OUT LPTSTR    *lppszProxySearchKey,     // proxy search key <br>    OUT ULONG     *lpcbProxyEid,            // count of bytes in proxy entry ID <br>    OUT LPENTRYID *lppProxyEid);            // pointer to proxy entry ID <br> <br>//$--HrSetUlongPropertyValue---------------------------------------------------- <br>// Set a ULONG property value. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSetUlongPropertyValue(        // RETURNS: return code <br>    IN BOOL  fOverwrite,                // overwrite value if it exists <br>    IN ULONG ulPropTag,                 // property tag <br>    IN ULONG ulValue,                   // property value <br>    IN ULONG cValues,                   // count of property values <br>    IN LPSPropValue lpProps,            // pointer to property values <br>    OUT ULONG* lpcValues,               // new count of property values <br>    OUT LPSPropValue* lppProps);        // new pointer to property values <br> <br>//$--HrNonDeliverRecipient------------------------------------------------------ <br>// Non-deliver a recipient. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrNonDeliverRecipient(          // RETURNS: return code <br>    IN ULONG ulReasonCode,              // NDR reason code <br>    IN ULONG ulDiagnosticCode,          // NDR diagnostic code <br>    IN LPFILETIME lpftReportTime,       // report time <br>    IN ULONG ulRecipientNumber,         // recipient number <br>    IN ULONG ulOffset,                  // offset in NDR address list <br>    IN ULONG cValues,                   // count of property values <br>    IN LPSPropValue lpProps,            // pointer to property values <br>    IN OUT LPADRLIST lpAdrList);        // pointer to NDR address list <br> <br>//$--HrExpandMessageAddressList------------------------------------------------- <br>// Expand a list of addresses on the message. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrExpandMessageAddressList(     // RETURNS: return code <br>    IN LPMESSAGE  lpMessage,            // pointer to message <br>    OUT ULONG*    lpcMesgAddr,          // count of message addresses <br>    OUT ULONG*    lpcReplyAddr,         // count of reply recipient addresses <br>    OUT ULONG*    lpcRecipAddr,         // count of recipient addresses <br>    OUT LPADRLIST *lppRecipList,        // pointer to recipient address list <br>    OUT LPADRLIST *lppAdrList);         // pointer to address list <br> <br>//$--HrMapAddrToProxy----------------------------------------------------------- <br>// Map all email addresses to proxy addresses in a given address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapAddrToProxy(               // RETURNS: return code <br>    IN  LPADRBOOK    lpAdrBook,         // pointer to address book <br>    IN  LPTSTR       lpszAddrType,      // pointer to the address type <br>    IN OUT LPADRLIST lpAdrList);        // pointer to address list <br> <br>//$--HrCollapseMessageAddressList----------------------------------------------- <br>// Collapse a list of addresses on the message. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCollapseMessageAddressList(   // RETURNS: return code <br>    IN LPMESSAGE     lpMessage,         // pointer to message <br>    IN ULONG         cMesgAddr,         // count of message addresses <br>    IN ULONG         cReplyAddr,        // count of reply recipient addresses <br>    IN ULONG         cRecipAddr,        // count of recipient addresses <br>    IN LPADRLIST     lpAdrList,         // message address list <br>    OUT ULONG        *lpcValues,        // count of message address properties <br>    OUT LPSPropValue *lppProps,         // message address properties <br>    OUT LPADRLIST    *lppAdrList);      // recipient address list <br> <br>//$--HrMapProxyToAddr----------------------------------------------------------- <br>// Map all proxy addresses to email addresses in a given address list. Always <br>// call HrMapAddrToProxy() before calling this function. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapProxyToAddr(               // RETURNS: return code <br>    IN  LPADRBOOK    lpAdrBook,         // pointer to address book <br>    IN  LPABCONT     lpGalABCont,       // pointer to GAL container <br>    IN OUT LPADRLIST lpAdrList);        // pointer to address list <br> <br>//$--HrMapGatewayAddrToProxy---------------------------------------------------- <br>// Map all gateway specific email addresses to proxy addresses <br>// in a given address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapGatewayAddrToProxy(        // RETURNS: return code <br>    IN  LPADRBOOK    lpAdrBook,         // pointer to address book <br>    IN  LPTSTR       lpszAddrType,      // pointer to the address type <br>    IN OUT LPADRLIST lpAdrList);        // pointer to address list <br> <br>//$--HrMapGatewayProxyToAddr---------------------------------------------------- <br>// Map all gateway specific email addresses to proxy addresses <br>// in a given address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrMapGatewayProxyToAddr(        // RETURNS: return code <br>    IN  LPADRBOOK    lpAdrBook,         // pointer to address book <br>    IN  LPTSTR       lpszAddrType,      // pointer to the address type <br>    IN OUT LPADRLIST lpAdrList);        // pointer to address list <br> <br>#ifdef __cplusplus <br>} <br>#endif // __cplusplus <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

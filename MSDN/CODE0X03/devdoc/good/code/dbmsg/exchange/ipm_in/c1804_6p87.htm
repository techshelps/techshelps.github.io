<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVTNEF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1807"></a>CONVTNEF.CPP</h2>
<pre><code>// --convtnef.cpp-------------------------------------------------------------- <br>// <br>// Code for messages whose content is to be TNEFed. <br>// <br>// Copyright (C) Microsoft Corp., 1986-1996.  All Rights Reserved. <br>// All rights reserved. <br>// <br>// ---------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "convcls.h" <br>#include "tagnames.h" <br>#include "msgemit.h" <br>#include "ipmcdefs.h" <br> <br>//$--CIPMConvert::HrTnefToContent--------------------------------------------------------------- <br>// <br>// DESCRIPTION: TNEF decodes TNEFed data from the input stream. <br>// to the envelope content. <br>// <br>// INPUT:       none <br>// <br>// RETURNS:     HRESULT --  NOERROR if successful, <br>//                          E_INVALIDARG if bad input, <br>//                          E_FAIL otherwise. <br>// <br>// ---------------------------------------------------------------------------- <br>HRESULT CIPMConvert::HrTnefToContent() <br>{ <br>    HRESULT             hr              =   NOERROR; <br>    LPTSTR              lpszTag         =   NULL;   // tag string pointer <br>    LPTSTR              lpszData        =   NULL;   // data string pointer <br>    LPITNEF             lpTnef          =   NULL;   // TNEF interface pointer <br>    LPSTnefProblemArray lpsProblems     =   NULL;   // property problem array <br>    ULONG               cbRead          =   0;      // # bytes read <br>    SPropTagArray       sNoPropTags     =   {0};    // property tag array <br> <br>    DEBUGPRIVATE("CIPMConvert::HrTnefToContent()\n"); <br> <br>    // consistency checks <br>    ASSERTERROR(!FBadUnknown(m_lpStream), "Bad m_lpStream"); <br>    ASSERTERROR(!FBadUnknown(m_lpAB), "Bad m_lpAB"); <br>    ASSERTERROR(!FBadUnknown(m_lpEnvelope), "Bad m_lpEnvelope"); <br> <br>    // TNEF decode the saved TNEFed data. <br>    // This data contains the properties for the <br>    // envelope's content and all of its attachments. <br> <br>    // First, read in the "MAPIMAIL.DAT" TNEF tag and data <br>    // from the input stream. (The data will be null). <br>    hr = HrParseTagAndData( <br>                m_lpStream,     // stream pointer <br>                &amp;cbRead,        // # bytes read <br>                &amp;lpszTag,       // tag pointer <br>                &amp;lpszData);     // data pointer <br> <br>    if ( FAILED(hr) ) <br>    { <br>        hr = HR_LOG(E_FAIL); <br> <br>        goto cleanup; <br>    } <br> <br>    // Check the tag read <br>    if ( lstrcmp(lpszTag, lpszTagTnefHdr) != 0 ) <br>    { <br>        hr = HR_LOG(E_FAIL); <br> <br>        goto cleanup; <br>    } <br> <br>    // Next, open a TNEF interface on the input stream <br>    // which we shall decode to the envelope content. <br>  hr = OpenTnefStreamEx( <br>            NULL, <br>        m_lpStream,         // input stream pointer <br>        (LPTSTR) szTnefFileName,    // file name associated with TNEFed data <br>    TNEF_DECODE,        // decode the message properties <br>    m_lpEnvelope,       // destination message pointer <br>    wTnefKey,           // "unique" TNEF key <br>    m_lpAB,             // address book pointer <br>    &amp;lpTnef);           // TNEF interface object pointer <br> <br>    if ( FAILED(hr) ) <br>    { <br>        hr = HR_LOG(E_FAIL); <br> <br>        goto cleanup; <br>    } <br> <br>    ASSERTERROR(!FBadUnknown(lpTnef), "Bad lpTnef"); <br> <br>    // Decode all properties to the envelope content <br>    hr = lpTnef-&gt;ExtractProps( <br>            TNEF_PROP_EXCLUDE,      // exclude <br>            (LPSPropTagArray) &amp;sNoPropTags, // no properties to exclude <br>            &amp;lpsProblems);          // property problem array pointer <br> <br>    if ( FAILED(hr) )       // Don't care about MAPI_W_ERRORS_RETURNED in this case <br>    { <br>        hr = HR_LOG(E_FAIL); <br> <br>        goto cleanup; <br>    } <br> <br>    // we are done! <br> <br>cleanup: <br> <br>    // Release all OLE and MAPI objects <br>    ULRELEASE(lpTnef); <br> <br>    // Free MAPI buffers <br>    MAPIFREEBUFFER(lpsProblems); <br>    MAPIFREEBUFFER(lpszTag); <br>    MAPIFREEBUFFER(lpszData); <br> <br>    RETURN(hr); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONVCLS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1805"></a>CONVCLS.H</h2>
<pre><code>// --convcls.h-------------------------------------------------------------- <br>// <br>// IPM to 822-style header conversion class header file. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All rights reserved. <br>// <br>// --------------------------------------------------------------------------- <br> <br>#ifndef _CONVCLS_H <br>#define _CONVCLS_H <br> <br>// indices into the tag data member array <br>const UINT  iMailFrom   =   0;      // "Mail From" data <br>const UINT  iClass      =   1;      // "X-Message-Class" data <br>const UINT  iDate       =   2;      // "Date" data <br>const UINT  iXID        =   3;      // "X-Message-ID" data <br>const UINT  iSubjectXID =   4;      // "X-Message-Subject-ID" data <br>const UINT  iFrom       =   5;      // "From" data <br>const UINT  iSubject    =   6;      // "Subject" data <br>const UINT  iPriority   =   7;      // "Priority" data <br>const UINT  iImportance =   8;      // "Importance" data <br> <br>// read/not read notification data member indices <br>const UINT  iReadBy     =   9;      // read/not read by address data <br>const UINT  iNotifyTime =   10;     // read/not read notification time <br>const UINT  iDiscardCode=   11;     // not read discard code data <br>const UINT  iNonRcptCode=   12;     // not read non-receipt code data <br> <br>const UINT  nDataEntries    =   13; // number of entries in data member array <br> <br>//$--MSG_TYPE----------------------------------------------- <br>// <br>// Message type enumeration (based on message class) <br>// <br>// ------------------------------------------------------------- <br>enum MSG_TYPE <br>{ <br>    mtNone,        // no type <br>    mtIPM,         // interpersonal message <br>    mtNDR,         // non-delivery report <br>    mtDR,          // delivery report <br>    mtNRN,         // non-read notification <br>    mtRN           // read notification         <br>}; <br> <br>//$--CIPMConvert------------------------------------------------------------ <br>// <br>// 822-style header to IPM message stream converter class <br>// <br>// --------------------------------------------------------------------------- <br> <br>class CIPMConvert <br>{ <br>public: <br> <br>    CIPMConvert();  // constructor <br>    ~CIPMConvert(); // destructor <br> <br>    // Initializes conversion class instance <br>    HRESULT HrInitialize(            <br>        IN LPCWSTR lpwszMsgClass,   // message class <br>        IN BOOL fTNEFEncode,        // TNEF encoding flag <br>        IN LPCTSTR lpszAddrType,    // address type <br>        IN LPADRBOOK lpAddrBook,    // address book pointer <br>        IN LPMESSAGE lpMessage,     // message pointer <br>        IN LPSTREAM lpStream);      // stream pointer <br> <br>    // 822-style header to IPM message or report converter <br>    HRESULT HrConvert();         <br> <br>private: <br> <br>    // methods <br> <br>    // Set message type based on message class. <br>    HRESULT CIPMConvert::HrSetMessageType( <br>        IN LPTSTR lpszMessageClass);        // message class <br> <br>    // Parses envelope and content header, saving data. <br>    HRESULT HrParseEnvelopeAndContent(); <br> <br>    // Parses IPM-specific tag and data lines <br>    HRESULT HrParseIPMSpecific(); <br> <br>    // Parses and creates binary file attachments <br>    HRESULT HrParseAttachments(); <br> <br>    // Parses [non]delivery report-specific tag and data lines <br>    HRESULT HrParseReportSpecific( <br>                ULONG * pnRecipients);  // # of [non]delivery recipients <br> <br>    // sets delivery and non-delivery report properties <br>    HRESULT HrSetReportProps(); <br> <br>    // Parses read/non-read notification-specific tag and data lines <br>    HRESULT HrParseNotificationSpecific(); <br> <br>    // sets [non]read notification content properties. <br>    HRESULT HrSetNotifyCntProps(); <br> <br>    // Parses recipient tag and data lines &amp; saves addresses <br>    HRESULT HrParseRecipients( <br>        IN LPCTSTR lpszTag,     // expected tag <br>        IN ULONG ulType,        // MAPI recipient type <br>        IN OUT LPADRLIST * lpAdrList, // target address list <br>        OUT ULONG * pnRecips);  // # recipients found of type <br> <br>    // Creates content  <br>    HRESULT HrCreateContent(); <br> <br>    // Sets envelope properties <br>    HRESULT HrSetEnvelopeProps(); <br> <br>    // Sets content properties <br>    HRESULT HrSetContentProps(); <br> <br>    // Parses and creates next attachment. <br>    HRESULT HrCreateNextAttachment(); <br> <br>    // Checks to see if conversion class has been initialized <br>    inline BOOL fCheckInit()        // RETURNS: BOOL <br>    { <br>        return(m_lpwszMsgClass &amp;&amp; m_lpEnvelope &amp;&amp; m_lpStream &amp;&amp; m_lpAB &amp;&amp; m_lpszAddrType); <br>    }; <br> <br>    // "Resets" the class after a conversion is completed. <br>    VOID Reset();                   // RETURNS: VOID <br> <br>    // Frees the data string member array memory <br>    VOID HrFreeData();              // RETURNS: VOID <br> <br>    // Parses and stores the external trace information. <br>    HRESULT CIPMConvert::HrParseExternalTraceData( <br>        OUT ULONG * pnEntries);         // number of trace entries found <br> <br>    // Parses and stores the internal trace information. <br>    HRESULT CIPMConvert::HrParseInternalTraceData( <br>        OUT ULONG * pnEntries);         // number of trace entries found <br> <br>    // Sets the envelope's PR_TRANSPORT_MESSAGE_HEADER property <br>    HRESULT HrSetTransHdr(); <br> <br>    // Decodes the TNEFed data into the envelope's content. <br>    HRESULT HrTnefToContent(); <br> <br>    // data members <br>    LPCWSTR     m_lpwszMsgClass;      // mesage class <br>    LPMESSAGE   m_lpEnvelope;         // message's envelope <br>    LPMESSAGE   m_lpContent;          // message's content (the original message) <br>    LPSTREAM    m_lpStream;           // stream currently writing to <br>    LPATTACH    m_lpAttach;           // envelope attachment pointer <br>    BOOL        m_fTNEFEncode;        // TNEF encoding flag <br>    LPCTSTR     m_lpszAddrType;       // address type <br>    LPADRBOOK   m_lpAB;               // address book     <br> <br>    MSG_TYPE    m_MsgType;            // message type (based on message class) <br> <br>    // Array of non-recipient tag data for the envelope and its content. <br>    LPTSTR      m_rgszData[nDataEntries];   // array of data strings for envelope &amp; content <br> <br>    // Recipient address list for IPM &amp; [N]RN envelopes <br>    LPADRLIST   m_lpRcptToList;     // "RCPT TO" addresses <br> <br>    // Recipient address list for IPM &amp; [N]RN contents <br>    LPADRLIST   m_lpContentRecips;         // "To", "CC" and "BCC" addresses <br> <br>    // [non]recipient list for [non]delivery reports <br>    LPADRLIST   m_lpReportToList;   // [N]DR recipient and non-recipient list <br> <br>    // Trace entry list     <br>    LPTRACEINFO m_lpTraceInfo;      // Trace entry list <br> <br>    // Internal Trace entry list     <br>    PINTTRACEINFO m_lpIntTraceInfo; // Trace entry list <br> <br>// Stream marker for end of headers <br>ULARGE_INTEGER m_sOffsetHeaders; <br> <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

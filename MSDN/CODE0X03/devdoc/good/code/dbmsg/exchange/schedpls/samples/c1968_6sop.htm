<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CORE.BAS</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1969"></a>CORE.BAS</h2>
<pre><code>Attribute VB_Name = "CoreObjectRoutines" <br>Option Explicit <br> <br>Public gobjBase As Object <br>Public gobjSched As Object <br> <br>Global Const SINGLE_APPOINTMENTS = "SingleAppointments" <br>Global Const RECURRING_APPOINTMENTS = "RecurringAppointments" <br>Global Const SINGLE_EVENTS = "SingleEvents" <br>Global Const RECURRING_EVENTS = "RecurringEvents" <br>Global Const SINGLE_TASKS = "SingleTasks" <br>Global Const RECURRING_TASKS = "RecurringTasks" <br>Global Const CONTACTS = "Contacts" <br>Global Const PROJECTS = "Projects" <br>Global Const ATTENDEES = "Attendees" <br>Global Const ACCESS_CONTROLS = "AccessControls" <br> <br>'Sacls for setting AccessActual and AccessEffective and AccessDefault <br>Global Const saclNone = (0) <br>Global Const saclReadMinimal = (1) <br>Global Const saclRead = (2) <br>Global Const saclCreate = (3) <br>Global Const saclWrite = (4) <br>Global Const saclOwner = (5) <br>Global Const saclMax = (6) <br> <br>'RecurringType for recurring tasks and appointments <br>'/* Pattern = Every X days */ <br>Global Const trecurDaily = (64) <br>'/* Pattern = Every X weeks on DayOfWeekMask days */ <br>Global Const trecurWeekly = (48) <br>'/* Pattern = Day X of every Y months */ <br>Global Const trecurMonthly1 = (12) <br>'/* Pattern = {1st | 2nd | 3rd | 4th | Last} Day of Week of every Y months */ <br>Global Const trecurMonthly2 = (56) <br>'/* Pattern = On Month Day */ <br>Global Const trecurYearly1 = (7) <br>'/* Pattern = {1st | 2nd | 3rd | 4th | Last} Day of Week of Month */ <br>Global Const trecurYearly2 = (51) <br> <br>Function objSetBaseObject() As Object <br> <br>    Set objSetBaseObject = CreateObject("Schedule+.Application") <br> <br>End Function <br> <br>'***************************************** <br>' <br>' objGetTable - returns obj for Task <br>' <br>'   szTable - Constant passed in for table name (see General Declaractions <br>' <br>'***************************************** <br>Function objGetTable(szTable As String) As Object <br> <br>Select Case szTable <br>    Case SINGLE_APPOINTMENTS <br>        Set objGetTable = gobjSched.SingleAppointments <br>    Case RECURRING_APPOINTMENTS <br>        Set objGetTable = gobjSched.RecurringAppointments <br>    Case SINGLE_EVENTS <br>        Set objGetTable = gobjSched.SingleEvents <br>    Case RECURRING_EVENTS <br>        Set objGetTable = gobjSched.RecurringEvents <br>    Case SINGLE_TASKS <br>        Set objGetTable = gobjSched.SingleTasks <br>    Case RECURRING_TASKS <br>        Set objGetTable = gobjSched.RecurringTasks <br>    Case CONTACTS <br>        Set objGetTable = gobjSched.CONTACTS <br>    Case PROJECTS <br>        Set objGetTable = gobjSched.PROJECTS <br>    Case ATTENDEES <br>        Set objGetTable = gobjSched.ATTENDEES <br>    Case ACCESS_CONTROLS <br>        Set objGetTable = gobjSched.AccessControls <br>    Case Else <br>        Debug.Print "objGetTaskTable: invalid table name passed" <br>End Select <br> <br>End Function <br> <br>'**************************************************************************************************** <br>' szGetMuchText --   Generate a specified amount of text <br>' <br>'   STATE:  Not state dependent <br>' <br>'   INPUTS: <br>'       nCharacters - The number of characters to be generated from 1 to 65,500(?) <br>'       szReturnText - Variable the generated characters will be stored in <br>' <br>'**************************************************************************************************** <br>Function szGetMuchText(nCharacters As Integer) As String <br> <br>Dim a As String             ' repeated string <br>Dim a_len As Integer        ' length of "a" (short integer) <br>Dim GMTLoop As Long         ' number of times to loop <br>Dim GMTRemain As Long       ' messy remainder of division <br>Dim i As Long               ' counter <br>Dim szReturnText As String <br> <br>' Initialize variables <br>    szReturnText = "" <br>    a = "This is " + Str$(nCharacters) + " characters of text.*" <br>    a_len = Len(a) <br> <br>' Generate characters <br>    If a_len &gt;= nCharacters Then <br>        szReturnText = Left$(a, nCharacters) <br>    Else <br>        GMTLoop = Int(nCharacters / a_len) <br>        GMTRemain = nCharacters Mod a_len <br>        For i = 1 To GMTLoop <br>            szReturnText = szReturnText + a <br>        Next <br>        szReturnText = szReturnText + Left$(a, GMTRemain) <br>    End If <br> <br>szGetMuchText = szReturnText <br> <br>End Function 'nGetMuchText <br> <br> <br>'**************************************************************************************************** <br>' szGetIntlText --   Generate a specified amount of international text. <br>' <br>'   STATE:  Not dependent on Boomerang state <br>' <br>'   INPUTS: <br>'       nCharacters - The number of international characters to be generated from 1 to 65,500(?) <br>'       szReturnText - Variable the generated characters will be stored in <br>' <br>'   WRITTEN BY: ryanw <br>' <br>'**************************************************************************************************** <br>Function szGetIntlText(nCharacters As Integer) As String <br> <br>Dim a As String             ' repeated string <br>Dim a_len As Integer        ' length of "a" (short integer) <br>Dim GITLoop As Long         ' number of times to loop <br>Dim GITRemain As Long       ' messy remainder of division <br>Dim i As Long               ' counter <br> <br>' Initialize variables <br>    szReturnText = "" <br>    a$ = "" <br> <br>' Generate international string where chr() values are international characters <br>    For i = 128 To 168 <br>        a$ = a$ + Chr$(i) <br>    Next <br>    For i = 173 To 175 <br>        a$ = a$ + Chr$(i) <br>    Next <br> <br>    ' Add to string the desired length of the string <br>    a$ = a$ + "-=&lt;" + Str$(nCharacters) + " characters&gt;=-" <br> <br>    a_len = Len(a) <br> <br>' Generate characters <br>    If a_len &gt;= nCharacters Then <br>        szReturnText$ = Left$(a$, nCharacters) <br>    Else <br>        GITLoop = Int(nCharacters / a_len) <br>        GITRemain = nCharacters Mod a_len <br>        For i = 1 To GITLoop <br>            szReturnText$ = szReturnText$ + a$ <br>        Next <br>        szReturnText$ = szReturnText + Left$(a$, GITRemain) <br>    End If <br> <br>szGetIntlText = szReturnText <br> <br>End Function 'nGetIntlText <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

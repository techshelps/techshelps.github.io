<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FORMAT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1974"></a>FORMAT.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// Format.cpp: Implements functions to format and return CStrings. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>//---------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>#include "exadmin.h" <br>#include "format.h" <br> <br>const int MAX_RESOURCE_MSG = 500; <br> <br>//---------------------------------------------------------------------------- <br>// These integers control the size of the buffer we allocate for the  <br>// _vsnprintf() function call.  It grows when _vsnprintf() returns an <br>// error.  The effect is that we remember the largest buffer needed for <br>// string formating and always start off by allocating that size of buffer. <br>// This provides a safe string formating method. <br>//---------------------------------------------------------------------------- <br> <br>static int nLargestBuf = 256;   <br>static int nGrowSize = 128; <br> <br>//---------------------------------------------------------------------------- <br>// Takes arguments just like vprintf(), but returns the result in a CString. <br>// This performs a safe format with no overwrites. <br>//---------------------------------------------------------------------------- <br> <br>CString _Format( TCHAR *pFmt, va_list pVArg) <br>{ <br>    CString sFmtBuf; <br> <br>    for( ;;) <br>    {   // Take a shot at formating the string. <br>        TCHAR* pFmtBuf = sFmtBuf.GetBuffer( nLargestBuf); <br>        if( _vsntprintf( pFmtBuf, nLargestBuf, pFmt, pVArg) &gt;= 0) <br>           break;   // Format was successful. <br>             <br>        // Buffer was not big enough so enlarge it. <br>        nLargestBuf += nGrowSize; <br>        nGrowSize = (int) (nGrowSize * 3 / 2); <br>    } <br>    sFmtBuf.ReleaseBuffer(); <br>    return( sFmtBuf); <br>} <br> <br>//---------------------------------------------------------------------------- <br>// Takes arguments just like printf(), but returns the result in a CString. <br>//---------------------------------------------------------------------------- <br> <br>CString Format( TCHAR *pMsgFmt ...) <br>{ <br>    va_list pVArg; <br>    va_start( pVArg, pMsgFmt); <br>    return( _Format( pMsgFmt, pVArg)); <br>} <br> <br>//---------------------------------------------------------------------------- <br>// Find a format string in the resource and use it to format the CString. <br>//---------------------------------------------------------------------------- <br> <br>CString _FormatResource( int hResStr, va_list pVArg) <br>{ <br>    TCHAR sMsgFmt[ MAX_RESOURCE_MSG];    // Arbitrary size that should be big enough. <br> <br>    if( CAdminDialog::LoadStringA( hResStr, sMsgFmt, sizeof( sMsgFmt)) == 0) <br>        return( Format( "Unknown error %d m_bOccurred.", hResStr)); <br>    else <br>        return( _Format( sMsgFmt, pVArg)); <br>} <br> <br>//---------------------------------------------------------------------------- <br>// Find a format string in the resource and use it to format the CString. <br>//---------------------------------------------------------------------------- <br> <br>CString FormatResource( int hResStr ...) <br>{ <br>    va_list pVArg; <br>    va_start( pVArg, hResStr); <br>    return( _FormatResource( hResStr, pVArg)); <br>} <br> <br>//---------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

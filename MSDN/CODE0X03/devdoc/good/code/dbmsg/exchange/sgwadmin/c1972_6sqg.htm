<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SGWADMIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1978"></a>SGWADMIN.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// SGWAdmin.cpp : Implements an Exchange Administration property sheet dialog. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>#include "SGWAdmin.h" <br>#include "errcpp.h" <br>#include "Format.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>// ----------------------------------------------------------------------------- <br>// Declaration of static data used to initialize and hold cfg extension data. <br>// ----------------------------------------------------------------------------- <br> <br>static const CHAR szNOTIFICATION[]      = TEXT("NOTIFICATION"); <br> <br>// The following text string pointers are cast as LONGLONG here because  <br>// a bug in the MIPS C++ compiler causes problems if we try to do the cast  <br>// inside the ExtensionProps structure. <br> <br>static const LONGLONG llszDfltAddrType  = (LONGLONG) TEXT("addrtype"); <br>static const LONGLONG llszDfltDispName  = (LONGLONG) TEXT("System Administrator"); <br>static const LONGLONG llszDfltEmailAddr = (LONGLONG) TEXT("sysadmin"); <br>static const LONGLONG llszDfltDirIn     = (LONGLONG) TEXT("\\in"); <br>static const LONGLONG llszDfltDirOut    = (LONGLONG) TEXT("\\out"); <br>static const LONGLONG llszDfltCnvrtrIn  = (LONGLONG) TEXT("inbound"); <br>static const LONGLONG llszDfltCnvrtrOut = (LONGLONG) TEXT("outbound"); <br> <br>// Setup default structure. <br>static SInitPropValue ExtensionProps[] = <br>{ <br>    { PT_BOOLEAN, 0, TRUE},                         // IDX_CHECK_IN_BOUND   <br>    { PT_BOOLEAN, 0, TRUE},                         // IDX_CHECK_OUT_BOUND  <br>    { PT_LONG,    0, 4},                            // IDX_EDIT_THREADS_IN  <br>    { PT_LONG,    0, 4},                            // IDX_EDIT_THREADS_OUT <br>    { PT_LONG,    0, 1},                            // IDX_EDIT_MSGS_IN     <br>    { PT_LONG,    0, 1},                            // IDX_EDIT_MSGS_OUT    <br>    { PT_LONG,    0, 0},                            // IDX_EDIT_SLEEP_IN    <br>    { PT_LONG,    0, 0},                            // IDX_EDIT_SLEEP_OUT   <br>    { PT_LONG,    0, INFINITE},                     // IDX_EDIT_POLLING_IN  <br>    { PT_LONG,    0, INFINITE},                     // IDX_EDIT_POLLING_OUT <br>    { PT_STRING8, 0, llszDfltAddrType},             // IDX_ADDR_TYPE        <br>    { PT_STRING8, 0, llszDfltDispName},             // IDX_DISP_NAME        <br>    { PT_STRING8, 0, llszDfltEmailAddr},            // IDX_EMAIL_ADDR       <br>    { PT_STRING8, 0, llszDfltDirIn},                // IDX_DIR_IN           <br>    { PT_STRING8, 0, llszDfltDirOut},               // IDX_DIR_OUT          <br>    { PT_STRING8, 0, llszDfltCnvrtrIn},             // IDX_CONVERTER_IN <br>    { PT_STRING8, 0, llszDfltCnvrtrOut},            // IDX_CONVERTER_OUT <br>}; <br> <br>// ----------------------------------------------------------------------------- <br> <br>BEGIN_MESSAGE_MAP(CSGWDlg, CAdminDialog) <br>//{{AFX_MSG_MAP(CSGWDlg) <br>ON_EN_CHANGE(IDC_EDIT_DIR_IN, OnEnChange) <br>ON_BN_CLICKED(IDC_CHECK_IN_BOUND, OnBnClicked) <br>ON_EN_CHANGE(IDC_EDIT_DIR_OUT, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_DISP_NAME, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_EMAIL_ADDR, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_MSGS_IN, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_MSGS_OUT, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_POLLING_IN, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_POLLING_OUT, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_SLEEP_IN, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_SLEEP_OUT, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_THREADS_IN, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_THREADS_OUT, OnEnChange) <br>ON_BN_CLICKED(IDC_CHECK_OUT_BOUND, OnBnClicked) <br>ON_EN_CHANGE(IDC_EDIT_ADDR_TYPE, OnEnChange) <br>    ON_EN_CHANGE(IDC_EDIT_CONVERTER_IN, OnEnChange) <br>ON_EN_CHANGE(IDC_EDIT_CONVERTER_OUT, OnEnChange) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>//$--CSGWDlg::OnEnChange()------------------------------------------------------ <br>// Called when an edit control is changed. <br>// ----------------------------------------------------------------------------- <br> <br>void CSGWDlg::OnEnChange()  <br>{ <br>    if( !m_bRefresh) <br>        DataHasChanged(); <br>} <br> <br>//$--CSGWDlg::OnBnClicked()----------------------------------------------------- <br>// Called when a check box is changed. <br>// ----------------------------------------------------------------------------- <br> <br>void CSGWDlg::OnBnClicked()  <br>{ <br>    if( !m_bRefresh) <br>        DataHasChanged(); <br>} <br> <br>//$--CSGWDlg::bHasHelp()-------------------------------------------------------- <br>// Called to determine if you supply help.  Return TRUE if you do. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::bHasHelp() <br>{ <br>    return( TRUE); <br>} <br>     <br>//$--CSGWDlg::DoHelp()---------------------------------------------------------- <br>// Called to start help. <br>// ----------------------------------------------------------------------------- <br>     <br>VOID CSGWDlg::DoHelp() <br>{ <br>    CHAR szDllPath[MAX_PATH+1] = {0}; <br>    DWORD cchDllPath = 0; <br> <br>    // Get the path and file name of this DLL. <br> <br>    cchDllPath = GetModuleFileName( <br>        (HMODULE)(AfxGetInstanceHandle()),  <br>        szDllPath,  <br>        sizeof(szDllPath) - 1); <br> <br>    // If we got back something that ends in ".DLL", then change the  <br>    // extension to ".HLP" and call it as the help file. <br> <br>    if (cchDllPath &gt;=4 &amp;&amp; !stricmp(&amp;szDllPath[cchDllPath-4],".DLL")) <br>    { <br>        strcpy(&amp;szDllPath[cchDllPath-4], ".HLP"); <br>        ::WinHelp( GetSafeHwnd(), szDllPath, HELP_CONTENTS, 0); <br>    } <br> <br>    // Otherwise it's an error. <br> <br>    else <br>    { <br>        MODULE_WARNING( <br>            "GWPERF_DLL_ENTRY_MODULE_NAME: GetModuleFileName() failed."); <br>    } <br>} <br> <br>//$--CSGWDlg::Refresh()--------------------------------------------------------- <br>// Called so that property sheet can refresh with data that may have been  <br>// changed by another property sheet.  Even though this DLL does not have more  <br>// than one property sheet that modifies the same data fields the Exchange SDK  <br>// provides a sample that lets an Administrator view and modify any Exchange  <br>// SDK packed extension data array. <br>// ----------------------------------------------------------------------------- <br> <br>void CSGWDlg::Refresh() <br>{ <br>    // While in refresh mode we do not want to the enable the APPLY <br>    // button if we are just repainting the screen. <br>    m_bRefresh = TRUE; <br> <br>    // Set the check boxes in the dialog. <br>    m_CheckInBound.SetCheck(  GetExtBool( IDX_CHECK_IN_BOUND)); <br>    m_CheckOutBound.SetCheck( GetExtBool( IDX_CHECK_OUT_BOUND)); <br> <br>    // Set the numerical values in the dialog. <br>    static char szFmt[] = "%lu"; <br>    SetDlgItemText( IDC_EDIT_THREADS_IN,  Format( szFmt, GetExtDWord(  IDX_EDIT_THREADS_IN))); <br>    SetDlgItemText( IDC_EDIT_THREADS_OUT, Format( szFmt, GetExtDWord(  IDX_EDIT_THREADS_OUT))); <br>    SetDlgItemText( IDC_EDIT_MSGS_IN,     Format( szFmt, GetExtDWord(  IDX_EDIT_MSGS_IN))); <br>    SetDlgItemText( IDC_EDIT_MSGS_OUT,    Format( szFmt, GetExtDWord(  IDX_EDIT_MSGS_OUT))); <br>    SetDlgItemText( IDC_EDIT_SLEEP_IN,    Format( szFmt, GetExtDWord(  IDX_EDIT_SLEEP_IN))); <br>    SetDlgItemText( IDC_EDIT_SLEEP_OUT,   Format( szFmt, GetExtDWord(  IDX_EDIT_SLEEP_OUT))); <br>     <br>    if( GetExtDWord( IDX_EDIT_POLLING_IN) == INFINITE) <br>        SetDlgItemText( IDC_EDIT_POLLING_IN,  szNOTIFICATION);  <br>    else <br>        SetDlgItemText( IDC_EDIT_POLLING_IN,  Format( szFmt, GetExtDWord(  IDX_EDIT_POLLING_IN ))); <br>     <br>    if( GetExtDWord( IDX_EDIT_POLLING_OUT) == INFINITE) <br>        SetDlgItemText( IDC_EDIT_POLLING_OUT, szNOTIFICATION);  <br>    else <br>        SetDlgItemText( IDC_EDIT_POLLING_OUT, Format( szFmt, GetExtDWord(  IDX_EDIT_POLLING_OUT))); <br> <br>    // Place strings in the dialog. <br>    SetDlgItemText( IDC_EDIT_ADDR_TYPE,     GetExtString( IDX_ADDR_TYPE));    <br>    SetDlgItemText( IDC_EDIT_DISP_NAME,     GetExtString( IDX_DISP_NAME));    <br>    SetDlgItemText( IDC_EDIT_EMAIL_ADDR,    GetExtString( IDX_EMAIL_ADDR));   <br>    SetDlgItemText( IDC_EDIT_DIR_IN,        GetExtString( IDX_DIR_IN));       <br>    SetDlgItemText( IDC_EDIT_DIR_OUT,       GetExtString( IDX_DIR_OUT));      <br>    SetDlgItemText( IDC_EDIT_CONVERTER_IN,  GetExtString( IDX_CONVERTER_IN)); <br>    SetDlgItemText( IDC_EDIT_CONVERTER_OUT, GetExtString( IDX_CONVERTER_OUT)); <br> <br>    // Ending refresh mode. <br>    m_bRefresh = FALSE; <br>} <br> <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::OnInitDialog()  <br>{ <br>CAdminDialog::OnInitDialog(); <br> <br>    ASSERTERROR( SGWDATA_PROP_COUNT == ARRAY_CNT( ExtensionProps), "Property count and default array inconsistent."); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Subclass all controls. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_IN_BOUND,     m_CheckInBound)))    <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_OUT_BOUND,    m_CheckOutBound)))   <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_ADDR_TYPE,     m_EditAddrType)))    <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_DISP_NAME,     m_EditDispName)))    <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_EMAIL_ADDR,    m_EditEmailAddr)))   <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_THREADS_IN,    m_EditThreadsIn)))   <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_THREADS_OUT,   m_EditThreadsOut)))  <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_MSGS_IN,       m_EditMsgsIn)))      <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_MSGS_OUT,      m_EditMsgsOut)))     <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_SLEEP_IN,      m_EditSleepIn)))     <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_SLEEP_OUT,     m_EditSleepOut)))    <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_POLLING_IN,    m_EditPollingIn)))   <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_POLLING_OUT,   m_EditPollingOut)))  <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_DIR_IN,        m_EditDirIn)))       <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_DIR_OUT,       m_EditDirOut)))      <br>        return( TRUE);                                                         <br>                                                                               <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_CONVERTER_IN,  m_EditConverterIn))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_CONVERTER_OUT, m_EditConverterOut)))   <br>        return( TRUE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Initialize the extension data to defaults if it does not exist. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    // Is extension data available?  <br>    if( GetExtCount() == 0) <br>    {   // NO, extension data is not available so set the  <br>        // memory copy of this to the defaults. <br>        if( FAILED( HrSetExtProps( SGWDATA_PROP_COUNT, ExtensionProps))) <br>            return( TRUE); <br>         <br>        // Save it in Admin's memory buffer as well. <br>        CAdminDialog::bSaveData(); <br>    } <br> <br>return( TRUE);  // Return TRUE unless you set the focus to a control. <br>} <br> <br>//$--CSGWDlg::bIsValidString()-------------------------------------------------- <br>// Validate that a string is not empty and modify the extension data property <br>// in memory. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::bIsValidString(  <br>    IN ULONG iProp,         // Index of property <br>    IN CEditExt&amp; editCtrl)  // Edit control containing data to validate. <br>{ <br>    CString str = editCtrl.GetString(); <br>    if( str.GetLength() == 0) <br>    { <br>        InvalidEntry( IDS_INVALID_STRING, editCtrl); <br>        return( FALSE); <br>    } <br>    CHRESULT hr = HrModExtString( iProp, str); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    return( TRUE); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Validate that a ulong is within a specified range and modify the extension  <br>// data property in memory. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::bIsValidULong( <br>    IN ULONG     iProp,         // Index of property <br>    IN CEditExt&amp; editCtrl,  // Edit control containing data to validate. <br>    IN ULONG     ulLow, <br>    IN ULONG     ulHigh, <br>    IN int       idErrMsg) <br>{ <br>    ULONG ul = editCtrl.GetULong(); <br>    if( ul &lt; ulLow || ul &gt; ulHigh) <br>    { <br>        InvalidEntry( idErrMsg, editCtrl); <br>        return( FALSE); <br>    } <br>    CHRESULT hr = HrModExtDWord( iProp, ul); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    return( TRUE); <br>} <br> <br>//$--CSGWDlg::bSaveData()------------------------------------------------------- <br>// Called when a different property sheet has been selected or when either the  <br>// OK or APPLY NOW button is pressed.  Returns TRUE if data has been validated <br>// and saved. <br>// <br>// When we call the CAdminDialog::bSaveData() function it gets saved in an <br>// admin memory space.  This makes it available to other property sheets that <br>// might be viewing the same data. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::bSaveData() <br>{ <br>    CHRESULT hr; <br>    ULONG    ul = 0; <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Check boxes need no validation so just store them in the property value array. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -     <br> <br>    hr = HrModExtBool(  IDX_CHECK_IN_BOUND,   m_CheckInBound.GetCheck()); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    hr = HrModExtBool(  IDX_CHECK_OUT_BOUND,  m_CheckOutBound.GetCheck()); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// The thread count must be between 1 and 20. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( !bIsValidULong( IDX_EDIT_THREADS_IN, m_EditThreadsIn, 1, 20, IDS_INVALID_THREAD_CNT)) <br>        return( FALSE); <br> <br>    if( !bIsValidULong( IDX_EDIT_THREADS_OUT, m_EditThreadsOut, 1, 20, IDS_INVALID_THREAD_CNT)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Messages per thread must be between one and MAX_ULONG. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( !bIsValidULong( IDX_EDIT_MSGS_IN, m_EditMsgsIn, 1, MAX_ULONG, IDS_INVALID_MSGS_PER_THREAD)) <br>        return( FALSE); <br> <br>    if( !bIsValidULong( IDX_EDIT_MSGS_OUT, m_EditMsgsOut, 1, MAX_ULONG, IDS_INVALID_MSGS_PER_THREAD)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// The sleep between messages must be between zero and five minutes. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( !bIsValidULong( IDX_EDIT_SLEEP_IN, m_EditSleepIn, 0, 60000 * 5, IDS_INVALID_SLEEP_BETWEEN_MSGS)) <br>        return( FALSE); <br> <br>    if( !bIsValidULong( IDX_EDIT_SLEEP_OUT, m_EditSleepOut, 0, 60000 * 5, IDS_INVALID_SLEEP_BETWEEN_MSGS)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Polling interval needs no validation so just store them in the property value  <br>// array.  Entering anything but a number causes us to set to notification. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( (ul = m_EditPollingIn.GetULong()) == 0) <br>        hr = HrModExtDWord( IDX_EDIT_POLLING_IN, INFINITE);   // Notification <br>    else <br>        hr = HrModExtDWord( IDX_EDIT_POLLING_IN, ul); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    if( (ul = m_EditPollingOut.GetULong()) == 0) <br>        hr = HrModExtDWord( IDX_EDIT_POLLING_OUT, INFINITE);   // Notification <br>    else <br>        hr = HrModExtDWord( IDX_EDIT_POLLING_OUT, ul); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Validate that the string values are not empty. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( !bIsValidString( IDX_ADDR_TYPE, m_EditAddrType)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_DISP_NAME, m_EditDispName)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_EMAIL_ADDR, m_EditEmailAddr)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_DIR_IN, m_EditDirIn)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_DIR_OUT, m_EditDirOut)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_CONVERTER_IN, m_EditConverterIn)) <br>        return( FALSE); <br> <br>    if( !bIsValidString( IDX_CONVERTER_OUT, m_EditConverterOut)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// We are complete, the data is valid, so lets save it. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -     <br>    return( CAdminDialog::bSaveData()); <br>} <br>     <br>// ----------------------------------------------------------------------------- <br>// Called when either the OK or APPLY NOW button is pressed and after bSaveData(). <br>// Return TRUE if it is OK to committed the saved data. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSGWDlg::bCommitData() <br>{ <br>    MessageBox2( IDS_RESTARTGATEWAY); <br>    return( TRUE); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Admin will call this function directly (it is not a member function).  It is <br>// called once for each standard property sheet.  We have the option to keep one <br>// or more of the standard property sheets from showing. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL PASCAL bShowPage( UINT iddAdminPage) <br>{ <br>    BOOL bRet = TRUE;   // Show the standard property sheet. <br>    switch( iddAdminPage) <br>    {   // Do NOT show the following sheets: <br>        case iddGWSchedule: <br>        case iddGWDelivery_Restrictions: <br>        case iddGWAdvanced: <br>        case iddGWImportContainer: <br>        case iddGWExportContainers: <br>            bRet = FALSE; <br>    } <br>    return( bRet); <br>} <br> <br>// $--iStartPage()-------------------------------------------------------------- <br>// This function is called once durring initialization.  Return -1 to cause the  <br>// first standard property sheet to be displayed.  Or return the index of one of  <br>// our property sheets to have it come up first. <br>// ----------------------------------------------------------------------------- <br>/* <br>INT PASCAL iStartPage( void) <br>{ <br>    int i = -1; // Default to the first standard property sheet. <br>    return( i); <br>} <br>*/ <br>// ----------------------------------------------------------------------------- <br>     </code></pre>
<p>&nbsp;</p></body>
</HTML>

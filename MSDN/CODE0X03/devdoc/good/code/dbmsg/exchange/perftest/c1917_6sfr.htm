<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PERFTEST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1917"></a>PERFTEST.C</h2>
<pre><code>// --perftest.c----------------------------------------------------------------- <br>//  <br>//  Performance monitoring sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "gwmain.h" <br>#include "prfcount.h" <br>#include "monitor.h" <br>#include "perftest.chk" <br> <br>//  Defined for NT service shell <br>TCHAR szAppName[]       = TEXT("PERFTEST"); <br>TCHAR szWindowTitle[]   = TEXT("Performance Monitoring Sample"); <br> <br>static LPMAPISESSION    lpSession       = NULL; <br>static LPMDB            lpStore         = NULL; <br>static LPMAPIFOLDER     lpRootFolder    = NULL; <br>static LPMAPIFOLDER     lpMtsInFolder   = NULL; <br>static LPMAPIFOLDER     lpMtsOutFolder  = NULL; <br>static ULONG            cbGalEid        = 0; <br>static LPENTRYID        lpGalEid        = NULL; <br> <br>#define REPLY_PREFIX    "RE: " <br> <br>TCHAR                   szServiceName[MAX_SERVICE_NAME_LENGTH+1] = {0}; <br> <br>static BOOL             fMonitorRunning= FALSE; <br> <br>LPCOUNTER lpcntUserDefinedCounter       = NULL; <br> <br>// The array rgcdCounters describes the counters published to the performance  <br>// monitor by PerfTest.  Defined constants named PLACEHOLDER_* must be replaced  <br>// by pointers to MAPI folder objects before calling HrMonInit. <br> <br>#define PLACEHOLDER_MTS_OUT     ((LPMAPIFOLDER) 1) <br> <br>COUNTERDEF rgcdCounters[] = <br>{ <br>{ <br>COUNTER_MESSAGES_IN,  <br>COUNTERTYPE_MESSAGES_TRANSFERRED_IN,  <br>NULL,  <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_BYTES_IN,  <br>COUNTERTYPE_BYTES_TRANSFERRED_IN,  <br>NULL,  <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_MESSAGES_OUT,  <br>COUNTERTYPE_MESSAGES_TRANSFERRED_OUT,  <br>NULL,  <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_BYTES_OUT,  <br>COUNTERTYPE_BYTES_TRANSFERRED_OUT,  <br>NULL,  <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_MESSAGES_IN_OUT_QUEUE,  <br>COUNTERTYPE_MESSAGES_IN_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_NONE,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_BYTES_IN_OUT_QUEUE,  <br>COUNTERTYPE_BYTES_IN_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_NONE,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_MESSAGES_ENTERING_OUT_QUEUE,  <br>COUNTERTYPE_MESSAGES_ENTERING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_BYTES_ENTERING_OUT_QUEUE,  <br>COUNTERTYPE_BYTES_ENTERING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_MESSAGES_LEAVING_OUT_QUEUE,  <br>COUNTERTYPE_MESSAGES_LEAVING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_BYTES_LEAVING_OUT_QUEUE,  <br>COUNTERTYPE_BYTES_LEAVING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_CONTINUOUS,  <br>0,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_HOUR_MESSAGES_ENTERING_OUT_QUEUE,  <br>COUNTERTYPE_MESSAGES_ENTERING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_LAST_N_MINUTES,  <br>60,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_HOUR_BYTES_ENTERING_OUT_QUEUE,  <br>COUNTERTYPE_BYTES_ENTERING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_LAST_N_MINUTES,  <br>60,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_HOUR_MESSAGES_LEAVING_OUT_QUEUE,  <br>COUNTERTYPE_MESSAGES_LEAVING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_LAST_N_MINUTES,  <br>60,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_HOUR_BYTES_LEAVING_OUT_QUEUE,  <br>COUNTERTYPE_BYTES_LEAVING_FOLDER,  <br>PLACEHOLDER_MTS_OUT, <br>PERIODTYPE_LAST_N_MINUTES,  <br>60,  <br>NULL,  <br>0,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_USER_1,  <br>COUNTERTYPE_USER_DEFINED,  <br>NULL, <br>PERIODTYPE_NONE,  <br>0,  <br>&amp;lpcntUserDefinedCounter,  <br>PERF_COUNTER_RAWCOUNT,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>{ <br>COUNTER_USER_2,  <br>COUNTERTYPE_USER_DEFINED,  <br>NULL, <br>PERIODTYPE_NONE,  <br>0,  <br>&amp;lpcntUserDefinedCounter,  <br>PERF_COUNTER_LARGE_RAWCOUNT,  <br>PERF_DETAIL_NOVICE,  <br>0 <br>}, <br>}; <br> <br> <br> <br>//$--HrCreateReplySubject------------------------------------------------------- <br>//  Create reply subject. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateReplySubject(       // RETURNS: HRESULT <br>    IN OUT LPMESSAGE lpMessage)     // pointer to message <br>{ <br>    HRESULT hr               = NOERROR; <br>    SCODE   sc               = 0; <br>    ULONG   cbSubject        = 0; <br>    LPTSTR  lpszSubject      = NULL; <br>    LPTSTR  lpszReplySubject = NULL; <br> <br>DEBUGPUBLIC("HrCreateReplySubject()\n"); <br> <br>    hr = CHK_HrCreateReplySubject(lpMessage); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    hr = HrMAPIGetPropString( <br>        (LPMAPIPROP)lpMessage, <br>        PR_SUBJECT, <br>        &amp;cbSubject, <br>        (void **)&amp;lpszSubject); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    cbSubject =  <br>        (lstrlen(lpszSubject) + lstrlen(REPLY_PREFIX) + 1) * sizeof(TCHAR); <br> <br>    sc = MAPIAllocateBuffer( <br>        cbSubject, <br>        (void **)&amp;lpszReplySubject); <br> <br>    if(FAILED(sc)) <br>    { <br>        hr = HR_LOG(E_OUTOFMEMORY); <br>        goto cleanup; <br>    } <br> <br>    lstrcpy(lpszReplySubject, REPLY_PREFIX); <br>    lstrcat(lpszReplySubject, lpszSubject); <br> <br>    hr = HrMAPISetPropString( <br>        (LPMAPIPROP)lpMessage, <br>        PR_SUBJECT, <br>        lpszReplySubject); <br> <br>    MAPIFREEBUFFER(lpszReplySubject); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrCreateReplyRecipients---------------------------------------------------- <br>//  Create reply recipients <br>// ----------------------------------------------------------------------------- <br>HRESULT HrCreateReplyRecipients(    // RETURNS: HRESULT <br>    IN MSG_T msgType,               // message type <br>    IN OUT LPMESSAGE lpMessage)     // pointer to message <br>{ <br>    HRESULT         hr         = NOERROR; <br>    HRESULT         hrT        = NOERROR; <br>    LPADRLIST       lpAdrList  = NULL; <br>    ULONG           cValues    = 0; <br>    LPSPropValue    lpProps    = NULL; <br>    LPSPropTagArray lpPropTags = NULL; <br> <br>SizedSPropTagArray(6, rgEnvPropTags) = <br>{ <br>6, <br>{ <br>PR_ORIGINATOR_NAME, <br>            PR_ORIGINATOR_ADDRTYPE, <br>            PR_ORIGINATOR_ADDR, <br>PR_ORIGINATOR_ENTRYID, <br> <br>            // The next two properties won't exist on the envelope, but  <br>            // are place holders so that we can add them to the resulting  <br>            // structure without having to re-allocate memory. <br> <br>PR_RECIPIENT_TYPE, <br>            PR_RECIPIENT_NUMBER, <br>        } <br>    }; <br> <br>SizedSPropTagArray(5, rgMsgPropTags) = <br>{ <br>5, <br>{ <br>PR_SENDER_NAME, <br>            PR_SENDER_ADDRTYPE, <br>            PR_SENDER_EMAIL_ADDRESS, <br>PR_SENDER_ENTRYID, <br> <br>            // The next property won't exist on the message, but  <br>            // is a place holder so that we can add it to the resulting  <br>            // structure without having to re-allocate memory. <br> <br> PR_RECIPIENT_TYPE <br>       } <br>    }; <br> <br>DEBUGPUBLIC("HrCreateReplyRecipients()\n"); <br> <br>    hr = CHK_HrCreateReplyRecipients(msgType, lpMessage); <br> <br>if(FAILED(hr)) <br>RETURN(hr); <br> <br>    switch(msgType) <br>    { <br>    case MSG_ENVELOPE: <br>        lpPropTags = (LPSPropTagArray)&amp;rgEnvPropTags; <br>        break; <br>    case MSG_CONTENT: <br>        lpPropTags = (LPSPropTagArray)&amp;rgMsgPropTags; <br>        break; <br>    default: <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>hrT = MAPICALL(lpMessage)-&gt;GetProps( <br>    lpMessage, <br>lpPropTags, <br>fMapiUnicode, <br>&amp;cValues, <br>&amp;lpProps); <br> <br>    // If as expected, there were errors returned make sure they aren't  <br>    // in the first four properties.  The last one(s) are just placeholders. <br> <br>    if (hrT == MAPI_W_ERRORS_RETURNED) <br>    { <br>        int i = 0; <br> <br>        for (i = 0; i &lt; 4; i++) <br>        { <br>            if (PROP_TYPE(lpProps[i].ulPropTag) == PT_ERROR) <br>            { <br>                MAPIFREEBUFFER(lpProps); <br> <br>                hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br>        } <br>        hrT = NOERROR; <br>    } <br> <br>if (FAILED(hrT)) <br>{ <br>        lpProps = NULL; <br> <br>        hr = HR_LOG(E_FAIL); <br>goto cleanup; <br>} <br> <br>    lpProps[0].ulPropTag = PR_DISPLAY_NAME; <br>    lpProps[1].ulPropTag = PR_ADDRTYPE; <br>    lpProps[2].ulPropTag = PR_EMAIL_ADDRESS; <br>    lpProps[3].ulPropTag = PR_ENTRYID; <br>    lpProps[4].ulPropTag = PR_RECIPIENT_TYPE; <br>    lpProps[4].Value.l = MAPI_TO; <br> <br>    if(cValues == 6) <br>    { <br>        lpProps[5].ulPropTag = PR_RECIPIENT_NUMBER; <br>        lpProps[5].Value.l = 1; <br>    } <br> <br>    hr = HrMAPICreateSizedAddressList( <br>        1, <br>        &amp;lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrMAPISetAddressList( <br>        0, <br>        cValues, <br>        lpProps, <br>        lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpMessage)-&gt;ModifyRecipients(lpMessage, (ULONG)0, lpAdrList); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpProps); <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSetDeleteAfterSubmit----------------------------------------------------- <br>//  Set PR_DELETE_AFTER_SUBMIT to TRUE. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSetDeleteAfterSubmit(          // RETURNS: HRESULT <br>    IN OUT LPMESSAGE lpMessage)     // pointer to message <br>{ <br>    HRESULT hr = NOERROR; <br> <br>DEBUGPUBLIC("HrSetDeleteAfterSubmit()\n"); <br> <br>    hr = CHK_HrSetDeleteAfterSubmit(lpMessage); <br>if (FAILED(hr)) <br>RETURN(hr); <br> <br>    hr = HrMAPISetPropBoolean( <br>        (LPMAPIPROP)lpMessage, <br>        PR_DELETE_AFTER_SUBMIT, <br>        TRUE); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    RETURN(hr); <br>} <br> <br>//$--Process-------------------------------------------------------------------- <br>//  Process messages arriving at MTS-OUT. <br>// ----------------------------------------------------------------------------- <br>DWORD Process( <br>    LPVOID lpParameter) <br>{ <br>    HRESULT      hr                 = NOERROR; <br>    HRESULT      hrT                = 0; <br>    ULONG        i                  = 0; <br>    ULONG        cRows              = 0; <br>    ULONG        cValues            = 0; <br>    ULONG        ulObjType          = 0; <br> <br>    LPADRBOOK    lpAdrBook          = NULL; <br> <br>    LPMESSAGE    lpMessage          = NULL; <br>    LPMESSAGE    lpEnvelope         = NULL; <br>    LPATTACH     lpAttach           = NULL; <br> <br>    ULONG        cbeid              = 0; <br>    LPENTRYID    lpeid              = NULL; <br> <br>    LPSPropValue lpProps            = NULL; <br> <br>    ULONG        ulSize             = 0; <br> <br>    cRows = GetGWSRowSet(lpParameter)-&gt;cRows; <br> <br>DEBUGPUBLIC("Process()\n"); <br> <br>    // Open the Address Book <br>    hrT = MAPICALL(lpSession)-&gt;OpenAddressBook( <br>        lpSession, <br>        0, <br>        NULL,  <br>        AB_NO_DIALOG, <br>        &amp;lpAdrBook); <br> <br>    if(FAILED(hrT))                  <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    for(i = 0; i &lt; cRows; i++) <br>    { <br>        cValues = GetGWSRowSet(lpParameter)-&gt;aRow[i].cValues; <br> <br>        lpProps = GetGWSRowSet(lpParameter)-&gt;aRow[i].lpProps; <br> <br>        cbeid = lpProps[0].Value.bin.cb; <br>        lpeid = (LPENTRYID)lpProps[0].Value.bin.lpb; <br> <br>        // Get the message in the MTS-OUT folder <br>        hrT = MAPICALL(lpMtsOutFolder)-&gt;OpenEntry( <br>            lpMtsOutFolder, <br>            cbeid, <br>            lpeid, <br>            NULL, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            &amp;ulObjType, <br>            (LPUNKNOWN FAR *)&amp;lpEnvelope); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        if(ulObjType != MAPI_MESSAGE) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // Get the attachment in the envelope <br>        hrT = MAPICALL(lpEnvelope)-&gt;OpenAttach( <br>            lpEnvelope, <br>            0, <br>            NULL, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            &amp;lpAttach); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // Open a message interface on the attachment <br>        hrT = MAPICALL(lpAttach)-&gt;OpenProperty( <br>            lpAttach, <br>            PR_ATTACH_DATA_OBJ, <br>            (LPIID)&amp;IID_IMessage, <br>            0, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            (LPUNKNOWN *)&amp;lpMessage); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br> <br>        // <br>        // Collect size data to sumbit to performance monitor after message <br>        // has been successfully sent. <br>        // <br> <br>        hr = HrMAPIGetPropLong( <br>            (LPMAPIPROP)lpMessage, <br>            PR_MESSAGE_SIZE, <br>            &amp;ulSize); <br> <br>        if(hr == MAPI_E_NOT_FOUND) <br>        { <br>            ulSize = 0; <br>        } <br>        else if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // <br>        // Modify the subject. <br>        // <br> <br>        hr = HrCreateReplySubject( <br>            lpEnvelope); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = HrCreateReplySubject( <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // <br>        // Address the message to the originator. <br>        // <br> <br>        hr = HrCreateReplyRecipients( <br>            MSG_ENVELOPE, <br>            lpEnvelope); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = HrCreateReplyRecipients( <br>            MSG_CONTENT, <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // <br>        // Delete the message after it has been submitted. <br>        // <br> <br>        hr = HrSetDeleteAfterSubmit( <br>            lpEnvelope); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        hr = HrSetDeleteAfterSubmit( <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br> <br>        // <br>        // Save changes to the message. <br>        // <br> <br>        hrT = MAPICALL(lpMessage)-&gt;SaveChanges(lpMessage, KEEP_OPEN_READWRITE); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // <br>        // Save changes to attachment object. <br>        // <br> <br>        hrT = MAPICALL(lpAttach)-&gt;SaveChanges(lpAttach, KEEP_OPEN_READWRITE); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // <br>        // Save changes to the envelope. <br>        // <br> <br>        hrT = MAPICALL(lpEnvelope)-&gt;SaveChanges(lpEnvelope, KEEP_OPEN_READWRITE); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br> <br>        // <br>        // Submit message <br>        // <br> <br>        hrT = MAPICALL(lpEnvelope)-&gt;SubmitMessage(lpEnvelope, FORCE_SUBMIT); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br> <br>        // <br>        // Submit size data to performance monitor <br>        // <br> <br>    if(fMonitorRunning) <br>    { <br>            // Report the message as transferred out. <br> <br>    hrT = HrMonCollectMessageXferStats( <br>        1, <br>        ulSize, <br>        DIRECTIONTYPE_OUT); <br> <br>            if(FAILED(hrT)) <br>            { <br>                hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br> <br>            // Now report the same message as transferred in, since this  <br>            // "gateway" just bounces the message back to the sender. <br> <br>    hrT = HrMonCollectMessageXferStats( <br>        1, <br>        ulSize, <br>        DIRECTIONTYPE_IN); <br> <br>            if(FAILED(hrT)) <br>            { <br>                hr = HR_LOG(E_FAIL); <br>                goto cleanup; <br>            } <br>    } <br> <br>        ULRELEASE(lpMessage); <br> <br>        ULRELEASE(lpAttach); <br> <br>        ULRELEASE(lpEnvelope); <br> <br>        // --------------------------------------------------------------------- <br>    } <br> <br>cleanup: <br> <br>    ULRELEASE(lpAttach); <br> <br>    ULRELEASE(lpMessage); <br> <br>    ULRELEASE(lpEnvelope); <br> <br>    ULRELEASE(lpAdrBook); <br> <br>    return(0); <br>} <br> <br>//$--GWMain---------------------------------------------------------------- <br>//  Start threads. <br>// ----------------------------------------------------------------------------- <br>void GWMain( <br>    void) <br>{ <br>    HRESULT               hr = NOERROR; <br>    EDK_SERVICE_CONTROL_T sc = 0; <br>    ULONG                 icd = 0; <br> <br>DEBUGPUBLIC("GWMain()\n"); <br> <br>    hr = HrServiceGetName( <br>        szServiceName); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // <br>// Start performance monitoring <br>    // <br> <br>    // Replace any placeholders in rgcdCounters with a pointer  <br>    // to the actual MAPI folder. <br> <br>    for (icd = 0; icd &lt; ARRAY_CNT(rgcdCounters); icd++) <br>    { <br>        if (rgcdCounters[icd].lpFolder == PLACEHOLDER_MTS_OUT) <br>        { <br>            rgcdCounters[icd].lpFolder = lpMtsOutFolder; <br>        } <br>    } <br> <br>    // Initialize event logging. <br> <br>hr = HrMonInit( <br>0,  <br>NULL,  <br>szServiceName,  <br>OBJECT_EDK_PERFTEST, <br>PERF_DETAIL_NOVICE,  <br>COUNTER_MESSAGES_OUT,  <br>ARRAY_CNT(rgcdCounters),  <br>rgcdCounters); <br> <br>    if(FAILED(hr)) <br>    { <br>fMonitorRunning = FALSE; <br>    } <br>else <br>{ <br>fMonitorRunning = TRUE; <br>} <br> <br>    hr = HrGWStartNewMailHandler( <br>        1000, <br>        (ULONG)-1, <br>        1, <br>        1, <br>        EXCHANGE_ADDRTYPE,// Currently "EX" <br>        getenv("TEMP"), <br>        (LPTHREAD_START_ROUTINE)Process); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        ServiceStop(); <br>    } <br> <br>    // <br>    // Wait for a request for the service to stop. <br>    // <br> <br>    hr = HR_LOG(HrServiceWaitForStop(INFINITE, &amp;sc)); <br> <br>    return; <br>} <br> <br>//$--HrGWLogon------------------------------------------------------------- <br>//  Logon to the gateway. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWLogon(void) <br>{ <br>    HRESULT   hr       = NOERROR; <br> <br>DEBUGPUBLIC("HrGWLogon()\n"); <br> <br>    lpSession      = GetGWSession(); <br>    lpStore        = GetGWDefaultStore(); <br>    lpRootFolder   = GetGWRootFolder(); <br>    lpMtsInFolder  = GetGWMtsInFolder(); <br>    lpMtsOutFolder = GetGWMtsOutFolder(); <br>    cbGalEid       = GetGWGALEntryIdSize(); <br>    lpGalEid       = GetGWGALEntryId(); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrGWLogoff------------------------------------------------------------ <br>//  Logoff of the gateway. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWLogoff(void) <br>{ <br>    HRESULT     hr        = NOERROR; <br> <br>DEBUGPUBLIC("HrGWLogoff()\n"); <br> <br>if(fMonitorRunning == TRUE) <br>{ <br>     hr = HrMonUninit(); <br> <br>fMonitorRunning = FALSE; <br>} <br> <br>    RETURN(hr); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

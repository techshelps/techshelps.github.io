<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FLDPICK.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1922"></a>FLDPICK.CPP</h2>
<pre><code>//========================================================================= <br>// FldPick.CPP <br>// <br>// Copyright (C) 1986-1996.  Microsoft Corp.  All Rights Reserved. <br>//  <br>// <br>// Purpose: <br>//    Implements the folder picker dialog. <br> <br>//========================================================================= <br> <br> <br>#include "stdafx.h" <br>#include "PostSmpl.h" <br>#include "PostData.h" <br>#include "FldPick.h" <br> <br> <br> <br>#include &lt;initguid.h&gt; <br>#define USES_IID_IMAPIFolder <br>#define USES_IID_IMsgStore <br>#include &lt;mapiguid.h&gt; <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>  <br>SizedSPropTagArray(3, sptaFolderBrowse) = { 3, { PR_OBJECT_TYPE, <br>                                                    PR_ENTRYID, <br>                                                    PR_DISPLAY_NAME } }; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CFolderPicker dialog <br> <br> <br>CFolderPicker::CFolderPicker(CWnd* pParent /*=NULL*/) <br>: CDialog(CFolderPicker::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CFolderPicker) <br>//}}AFX_DATA_INIT <br>} <br> <br> <br>void CFolderPicker::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CFolderPicker) <br>DDX_Control(pDX, IDOK, m_ok); <br>DDX_Control(pDX, IDCANCEL, m_cancel); <br>DDX_Control(pDX, IDC_TREEVIEW, m_TreeCtrl); <br>//}}AFX_DATA_MAP <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CFolderPicker, CDialog) <br>//{{AFX_MSG_MAP(CFolderPicker) <br>ON_NOTIFY(TVN_ITEMEXPANDING, IDC_TREEVIEW, OnItemexpandingTreeview) <br>ON_NOTIFY(TVN_GETDISPINFO, IDC_TREEVIEW, OnGetdispinfoTreeview) <br>ON_NOTIFY(TVN_SELCHANGED, IDC_TREEVIEW, OnSelchangedTreeview) <br>ON_NOTIFY(TVN_DELETEITEM, IDC_TREEVIEW, OnDeleteitemTreeview) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CFolderPicker message handlers <br> <br>void CFolderPicker::OnOK()  <br>{ <br>// Add extra validation here <br>   GetSelectedFolder(&amp;PostData.m_lpTempFld); <br>   CDialog::OnOK(); <br>} <br> <br>void CFolderPicker::OnCancel()  <br>{ <br>// Add extra cleanup here <br>CDialog::OnCancel(); <br>} <br> <br> <br> <br>BOOL CFolderPicker::OnInitDialog()  <br>{ <br>CDialog::OnInitDialog(); <br> <br>// Add extra initialization here <br>m_TreeCtrl.SetImageList(&amp;PostData.m_obImageListExchange, TVSIL_NORMAL); <br> <br>AddTreeViewItems(); <br> <br>return TRUE;  // return TRUE unless you set the focus to a control <br>              // EXCEPTION: OCX Property Pages should return FALSE <br>} <br> <br> <br>BOOL CFolderPicker::AddTreeViewItems() <br>{ <br>HTREEITEM hTRoot = NULL; <br>SMailID *pMailID = NULL; <br>SCODEsc       = S_OK; <br> <br>sc = CreateMailID(MAPI_SESSION, 0, NULL, "Microsoft Exchange\0", &amp;pMailID); <br>if (sc == S_OK) <br>{ <br> <br>// First add the root item <br>hTRoot = AddOneItem ((HTREEITEM)TVI_ROOT, pMailID-&gt;lpszDisplayName,  <br>(HTREEITEM)NULL, iimlExchange, (DWORD)pMailID); <br> <br>m_TreeCtrl.Expand(hTRoot, TVE_EXPAND); <br>m_TreeCtrl.Select(hTRoot, TVGN_CARET); <br>} <br> <br>return TRUE; <br>} <br> <br> <br>// This function fills out the TV_ITEM and TV_INSERTSTRUCT structures  <br>// and adds the item to the tree view control. <br> <br>HTREEITEM CFolderPicker::AddOneItem (HTREEITEM hParent, LPSTR lpszText, <br>   HTREEITEM hInsAfter, int iImage, DWORD lparam) <br>{ <br> <br>TV_INSERTSTRUCT   tvis; <br> <br>tvis.hParent             = hParent; <br>tvis.hInsertAfter        = hInsAfter; <br>tvis.item.mask           = TVIF_TEXT | TVIF_IMAGE | TVIF_SELECTEDIMAGE | TVIF_CHILDREN | TVIF_PARAM | TVIF_STATE; <br>tvis.item.pszText        = LPSTR_TEXTCALLBACK; <br>tvis.item.cchTextMax     = 0; <br>tvis.item.iImage         = I_IMAGECALLBACK; <br>tvis.item.iSelectedImage = I_IMAGECALLBACK; <br>tvis.item.cChildren      = I_CHILDRENCALLBACK; <br>tvis.item.lParam         = (LPARAM)lparam; <br>tvis.item.state          = 0; <br>tvis.item.stateMask      = 0; <br> <br>   return m_TreeCtrl.InsertItem(&amp;tvis); <br>} <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Returns a mapi folder on the selected item in the tree view. <br>// <br>STDMETHODIMP CFolderPicker::GetSelectedFolder <br>   ( <br>   LPMAPIFOLDER*  ppfld <br>   ) <br>{ <br>   HRESULT  hr= NOERROR; <br>   SMailID* pMailID = NULL; <br> <br>   // Get the current tree view selection's mail id <br>   pMailID = (SMailID *)m_TreeCtrl.GetItemData(m_TreeCtrl.GetSelectedItem()); <br>   if( pMailID) <br>   { <br>hr = OpenFolder(pMailID, ppfld); <br>if (FAILED(hr)) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; TEXT("OpenFolder() failed for "); <br>afxDump &lt;&lt; TEXT(pMailID-&gt;lpszDisplayName); <br>#endif <br>} <br>   } <br> <br>   return hr; <br>} <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Add rows from a mapi table to the tree view. <br>// <br>STDMETHODIMP CFolderPicker::AddRows <br>   ( <br>   HTREEITEM   hitemParent, <br>   LPMAPITABLE pmt <br>   ) <br>{ <br>   HRESULT     hr  = NOERROR; <br>   BOOL        fDone          = FALSE; <br>   HTREEITEM   hitem          = TVI_FIRST; <br>   LPSRowSet   prws           = NULL; <br>   ULONG       cRowsTotal     = 0; <br>   CONST UINT  cRowsBatch     = 256; <br>   CONST UINT  cWanted        = 3; <br>   UINT        cFound         = 0; <br>   ULONG       ulType         = 0; <br>   ULONG       cbeid          = 0; <br>   LPENTRYID   peid           = NULL; <br>   LPTSTR      pszDisplayName = NULL; <br>   SMailID*    pMailID        = NULL; <br>   SMailID*    pParentMailID  = NULL; <br> <br>   // Set the columns to those needed for folder browsing <br>   if (SUCCEEDED(hr = pmt-&gt;SetColumns((LPSPropTagArray)&amp;sptaFolderBrowse, 0))) <br>   { <br>      // Get all of the table's rows <br>      while (!fDone &amp;&amp; <br>             SUCCEEDED(hr = pmt-&gt;QueryRows(cRowsBatch, 0, &amp;prws)) &amp;&amp; <br>             prws) <br>      { <br>         if (prws-&gt;cRows &gt; 0) <br>         { <br>            cRowsTotal += prws-&gt;cRows; <br>            // Add them to the tree <br>            for (ULONG iRow = 0; iRow &lt; prws-&gt;cRows; iRow++) <br>            { <br>               cFound = 0; <br>               // Get the appropriate values from the columns <br>               for (ULONG iCol = 0; iCol &lt; prws-&gt;aRow[iRow].cValues; iCol++) <br>               { <br>                  if (PR_OBJECT_TYPE == prws-&gt;aRow[iRow].lpProps[iCol].ulPropTag) <br>                  { <br>                     ulType = (ULONG)prws-&gt;aRow[iRow].lpProps[iCol].Value.l; <br>                     cFound++; <br>                  } <br>                  else if (PR_ENTRYID == prws-&gt;aRow[iRow].lpProps[iCol].ulPropTag) <br>                  { <br>                     cbeid = prws-&gt;aRow[iRow].lpProps[iCol].Value.bin.cb; <br>                     peid  = (LPENTRYID)prws-&gt;aRow[iRow].lpProps[iCol].Value.bin.lpb; <br>                     cFound++; <br>                  } <br>                  else if (PR_DISPLAY_NAME == prws-&gt;aRow[iRow].lpProps[iCol].ulPropTag) <br>                  { <br>                     pszDisplayName = prws-&gt;aRow[iRow].lpProps[iCol].Value.LPSZ; <br>                     cFound++; <br>                  } <br>               } <br> <br>               // if we found all of them... <br>               if (cFound == cWanted) <br>               { <br>                  // Create a mail id and add it to the tree <br>                  if (SUCCEEDED(CreateMailID(ulType, cbeid, peid, pszDisplayName, &amp;pMailID))) <br>                  { <br>                     hitem = AddOneItem(hitemParent, pszDisplayName, hitem, iimlExchange, (DWORD)pMailID); <br>ASSERT(hitem); <br>  <br>                  } <br>               } // if (cFound == cWanted) <br> <br>            } // for (iRow <br>         } <br>         else <br>         { <br>            fDone = TRUE; <br>         } <br> <br>         FreeProws(prws); <br>      } // while <br> <br>         // Set the children count on the parent item now that we know it <br>         //m_TreeCtrl.SetItemChildCount(hitemParent, cRowsTotal); <br>TV_ITEM  tvi; <br>tvi.mask      = TVIF_HANDLE | TVIF_CHILDREN; <br>tvi.hItem     = hitemParent; <br>tvi.cChildren = cRowsTotal; <br>m_TreeCtrl.SetItem(&amp;tvi); <br>   } <br> <br>   return hr; <br>} <br> <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Fill the tree view from the "root" of exchange. <br>// <br>STDMETHODIMP CFolderPicker::TvmtFromRoot <br>   ( <br>   HTREEITEM   hitemParent <br>   ) <br>{ <br>   HRESULT     hr  = NOERROR; <br>   LPMAPITABLE pmt = NULL; <br> <br>   if (SUCCEEDED(hr = PostData.m_lpSession-&gt;GetMsgStoresTable(0, &amp;pmt))) <br>   { <br>      hr = AddRows(hitemParent, pmt); <br>      pmt-&gt;Release(); <br>   } <br> <br>   return hr; <br>} <br> <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Fill the tree view from a folder. <br>// <br>STDMETHODIMP CFolderPicker::TvmtFromFolder <br>   ( <br>   HTREEITEM      hitemParent, <br>   LPMAPIFOLDER   pfld <br>   ) <br>{ <br>   HRESULT        hr   = NOERROR; <br>   LPMAPITABLE    pmt  = NULL; <br> <br>   // Get the folder hierarchy table <br>   if (SUCCEEDED(hr = pfld-&gt;GetHierarchyTable(MAPI_DEFERRED_ERRORS, &amp;pmt))) <br>   { <br>      hr = AddRows(hitemParent, pmt); <br>      pmt-&gt;Release(); <br>   } <br> <br>   return hr; <br>} <br> <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Expand a tree view item. <br>// <br>STDMETHODIMP CFolderPicker::FirstTimeExpand <br>   ( <br>   HTREEITEM  hitem, <br>   SMailID*   pMailID <br>   ) <br>{ <br>   HRESULT  hr= NOERROR; <br> <br>   if (MAPI_SESSION == pMailID-&gt;ulType) <br>   { <br>      hr = TvmtFromRoot(hitem); <br>   } <br>   else <br>   { <br>      LPMAPIFOLDER   pfld; <br> <br>      if (SUCCEEDED(hr = OpenFolder(pMailID, &amp;pfld))) <br>      { <br>         hr = TvmtFromFolder(hitem, pfld); <br>         pfld-&gt;Release(); <br>      } <br>    } <br> <br>   return hr; <br>} <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Creates a *simple* pidl. <br>// <br>// static <br>STDMETHODIMP CFolderPicker::CreateMailID <br>   ( <br>   ULONG          ulType,           // IN:  one of MAPI_SESSION, MAPI_STORE, or MAPI_FOLDER <br>   ULONG          cbEntryID,        // IN:  count of bytes in entry ID <br>   LPENTRYID      lpEntryID,        // IN:  entry ID <br>   LPCTSTR        lpszDisplayName,  // IN:  display name of item <br>   SMailID**      ppob              // OUT: pointer to resulting object <br>   ) <br>{ <br>  SCODE sc= S_OK; <br>  <br>// Allocate space for the <br>sc = MAPIAllocateBuffer( sizeof(SMailID), (LPVOID *)ppob); <br>    if (FAILED(sc)) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; TEXT("CreateMailID(): MAPIAllocateBuffer failed"); <br>#endif <br>goto CleanUp;   // Allocate space for the <br>} <br> <br>(*ppob)-&gt;cbEntryID = cbEntryID; <br>(*ppob)-&gt;ulType   = ulType; <br>(*ppob)-&gt;lpEntryID  = NULL; <br>(*ppob)-&gt;lpszDisplayName   = NULL; <br> <br>sc = MAPIAllocateMore(cbEntryID, (LPVOID)*ppob, (LPVOID*)&amp;((*ppob)-&gt;lpEntryID)); <br>if (FAILED(sc)) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; TEXT("CreateMailID(): MAPIAllocateMore failed"); <br>#endif <br>goto CleanUp;   // Allocate space for the <br>} <br> <br>CopyMemory((*ppob)-&gt;lpEntryID, lpEntryID, cbEntryID); <br> <br>sc = MAPIAllocateMore(lstrlen(lpszDisplayName)+1, (LPVOID)*ppob, (LPVOID*)&amp;((*ppob)-&gt;lpszDisplayName)); <br>if (FAILED(sc)) <br>{ <br>#ifdef _DEBUG <br>afxDump &lt;&lt; TEXT("CreateMailID(): MAPIAllocateMore failed"); <br>#endif <br>goto CleanUp;   // Allocate space for the <br>} <br> <br>lstrcpy((*ppob)-&gt;lpszDisplayName, lpszDisplayName); <br> <br> <br>CleanUp: <br>return(sc); <br> <br>} <br> <br>STDMETHODIMP CFolderPicker::OpenFolder(SMailID *pMailID, LPMAPIFOLDER *ppfld) <br>{ <br>    <br>   HRESULT        hr= NOERROR; <br>   LPSPropValue   pval= NULL; <br>   ULONG          ulObjType = 0; <br>  <br>       <br>   if (MAPI_STORE == pMailID-&gt;ulType) <br>   { <br>      // Open the store. (only if not already open) <br>  LPMDB lpMDB = NULL; <br>      if (SUCCEEDED(hr = PostData.OpenMsgStore(pMailID-&gt;cbEntryID, pMailID-&gt;lpEntryID, &amp;lpMDB))) <br>      { <br>         // Open the IPM subtree as a folder. <br>         if (SUCCEEDED(hr = HrGetOneProp(lpMDB, PR_IPM_SUBTREE_ENTRYID, &amp;pval))) <br>         { <br>            hr = PostData.m_lpSession-&gt;OpenEntry(pval-&gt;Value.bin.cb, <br>                                          (LPENTRYID)pval-&gt;Value.bin.lpb, <br>                                          &amp;IID_IMAPIFolder, <br>                                          MAPI_MODIFY | MAPI_DEFERRED_ERRORS, <br>                                          &amp;ulObjType, <br>                                          (LPUNKNOWN*)ppfld); <br> <br>          <br>            MAPIFreeBuffer(pval); <br>         } <br>          <br>       } <br>   } <br>   else if (MAPI_FOLDER == pMailID-&gt;ulType) <br>   { <br>             // Open the folder. <br>            hr = PostData.m_lpSession-&gt;OpenEntry(pMailID-&gt;cbEntryID, <br>                                          pMailID-&gt;lpEntryID, <br>                                          &amp;IID_IMAPIFolder, <br>                                          MAPI_MODIFY | MAPI_DEFERRED_ERRORS, <br>                                          &amp;ulObjType, <br>                                          (LPUNKNOWN*)ppfld); <br>   } <br>          <br>   return hr; <br>} <br> <br> <br>void CFolderPicker::OnItemexpandingTreeview(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>NM_TREEVIEW* pnmtv = (NM_TREEVIEW*)pNMHDR; <br>// Add your control notification handler code here <br>// Provide display info <br>   <br>   // An item is expanding, <br>      SMailID*       pMailID  = (SMailID*)pnmtv-&gt;itemNew.lParam; <br> <br>if ((TVE_COLLAPSE == pnmtv-&gt;action) || (TVE_COLLAPSERESET == pnmtv-&gt;action)) <br>    { <br>if (pMailID-&gt;lpEntryID == NULL) <br>        { <br>            // prevent tree view from collapsing the root <br>            pnmtv-&gt;itemNew.mask  = TVIF_HANDLE | TVIF_STATE; <br>            pnmtv-&gt;itemNew.state = TVIS_EXPANDED; <br>            pnmtv-&gt;itemNew.stateMask = TVIS_EXPANDED; <br>         } <br>} <br>else if ((TVE_EXPAND == pnmtv-&gt;action) &amp;&amp; !(pnmtv-&gt;itemNew.state &amp; TVIS_EXPANDEDONCE)) <br>{ <br>         if (FAILED(FirstTimeExpand(pnmtv-&gt;itemNew.hItem, pMailID))) <br> { <br>#ifdef _DEBUG <br>afxDump &lt;&lt; TEXT("FirstTimeExpand() failed for "); <br>afxDump &lt;&lt; TEXT(pMailID-&gt;lpszDisplayName); <br>#endif <br> } <br>}       <br>        <br>*pResult = 0; <br>} <br> <br>void CFolderPicker::OnGetdispinfoTreeview(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>TV_DISPINFO* pDispInfo = (TV_DISPINFO*)pNMHDR; <br>// Add your control notification handler code here <br>// Provide display info <br>   <br>     SMailID*       pMailID = (SMailID*)pDispInfo-&gt;item.lParam; <br> <br>      if (pMailID) <br>      { <br>         // Set up the display text <br>         if (pDispInfo-&gt;item.mask &amp; TVIF_TEXT) <br>         { <br>            pDispInfo-&gt;item.pszText    = (LPTSTR)pMailID-&gt;lpszDisplayName; <br>            pDispInfo-&gt;item.cchTextMax = lstrlen(pDispInfo-&gt;item.pszText); <br>         } <br> <br>         // Set up the images to use <br>         if (pDispInfo-&gt;item.mask &amp; TVIF_IMAGE) <br>         { <br>            INT   iImage; <br>            INT   iSelectedImage; <br> <br>            iImage = MapTypeToExchangeImageListIndex(pMailID-&gt;ulType, &amp;iSelectedImage); <br> <br>            if ((pDispInfo-&gt;item.mask &amp; TVIF_STATE) &amp;&amp; (pDispInfo-&gt;item.state &amp; TVIS_EXPANDED)) <br>            { <br>               pDispInfo-&gt;item.iImage = iSelectedImage; <br>            } <br>            else <br>            { <br>               pDispInfo-&gt;item.iImage = iImage; <br>            } <br>            pDispInfo-&gt;item.iSelectedImage = iSelectedImage; <br>         } <br> <br>         // Set up the count of children <br>         if (pDispInfo-&gt;item.mask &amp; TVIF_CHILDREN) <br>         { <br>            pDispInfo-&gt;item.cChildren = I_CHILDRENCALLBACK; <br>         } <br>      } <br> <br>  *pResult = 0; <br>} <br> <br> <br>void CFolderPicker::OnSelchangedTreeview(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>NM_TREEVIEW* pnmtv = (NM_TREEVIEW*)pNMHDR; <br>// Add your control notification handler code here <br>// Enable or disable buttons as appropriate due to the selection <br>               <br>SMailID*       pMailID  = (SMailID*)pnmtv-&gt;itemNew.lParam; <br> <br>    if (MAPI_SESSION != pMailID-&gt;ulType) <br>    { <br>        m_ok.EnableWindow(TRUE); <br>    } <br>    else <br>    { <br>        m_ok.EnableWindow(FALSE); <br>    } <br> <br>*pResult = 0; <br>} <br> <br>//------------------------------------------------------------------------- <br>// Purpose: <br>//    Get the image list index corresponding to a MAPI object type. <br>// <br>INT CFolderPicker::MapTypeToExchangeImageListIndex <br>   ( <br>   ULONG ulType, <br>   INT*  piSelectedImage <br>   ) <br>{ <br>   INT iImage = iimlFolder; <br>    <br>   if (MAPI_SESSION == ulType) <br>   { <br>iImage           = iimlExchange; <br>*piSelectedImage = iimlExchangeOpen; <br>   } <br>   else if (MAPI_STORE == ulType) <br>   { <br>iImage           = iimlMdb; <br>*piSelectedImage = iimlMdbOpen; <br>   } <br>   else if (MAPI_FOLDER == ulType) <br>   { <br>iImage           = iimlFolder; <br>*piSelectedImage = iimlFolderOpen; <br>   } <br>   else <br>   { <br>#ifdef _DEBUG <br>    afxDump &lt;&lt; TEXT("MapTypeToExchangeImageListIndex: Incorrect ulType"); <br>#endif <br>iImage = iimlFolder; <br>*piSelectedImage = iimlFolder; <br>} <br>   <br>   return iImage; <br>} <br> <br> <br> <br>void CFolderPicker::OnDeleteitemTreeview(NMHDR* pNMHDR, LRESULT* pResult)  <br>{ <br>NM_TREEVIEW* pnmtv = (NM_TREEVIEW*)pNMHDR; <br>// Add your control notification handler code here <br>// Delete our user data <br>    SMailID*       pMailID = (SMailID *)pnmtv-&gt;itemOld.lParam; <br> <br>MAPIFreeBuffer((LPVOID)pMailID); <br> <br>*pResult = 0; <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POSTDOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1930"></a>POSTDOC.CPP</h2>
<pre><code>//========================================================================= <br>// PostDoc.CPP <br>// <br>// Copyright (C) 1986-1996.  Microsoft Corp.  All Rights Reserved. <br>//  <br>// <br>// Purpose: <br>//    implementation of the CPostSmplDoc class <br>//========================================================================= <br> <br> <br>#include "stdafx.h" <br>#include "PostSmpl.h" <br>#include "PostDoc.h" <br>#include "PostData.h" <br>#include "Freedoc.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPostSmplDoc <br> <br>IMPLEMENT_DYNCREATE(CPostSmplDoc, COleDocument) <br> <br>BEGIN_MESSAGE_MAP(CPostSmplDoc, COleDocument) <br>//{{AFX_MSG_MAP(CPostSmplDoc) <br>ON_COMMAND(ID_FILE_SAVE_AS, OnFileSaveAs) <br>ON_COMMAND(ID_FILE_SAVE, OnFileSave) <br>//ON_COMMAND(ID_FILE_POSTDOC, OnFilePostdoc) <br>//}}AFX_MSG_MAP <br>ON_COMMAND(ID_FILE_SEND_MAIL, OnFileSendMail) <br>ON_UPDATE_COMMAND_UI(ID_FILE_SEND_MAIL, OnUpdateFileSendMail) <br> <br> <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPostSmplDoc construction/destruction <br> <br>CPostSmplDoc::CPostSmplDoc() <br>{ <br>//  add one-time construction code here <br>EnableCompoundFile(TRUE); <br> <br>} <br> <br>CPostSmplDoc::~CPostSmplDoc() <br>{ <br>} <br> <br>BOOL CPostSmplDoc::OnNewDocument() <br>{ <br>if (!COleDocument::OnNewDocument()) <br>return FALSE; <br> <br>//  add reinitialization code here <br>// (SDI documents will reuse this document) <br> <br> <br>return TRUE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPostSmplDoc serialization <br> <br>void CPostSmplDoc::Serialize(CArchive&amp; ar) <br>{ <br> <br>if (ar.IsStoring()) <br>{ <br>// Save document to disk <br>ar.Write((LPCSTR)theApp.m_lpBuffer,  <br>theApp.m_lpBuffer.GetLength());  <br> <br>//Save the summary property set <br>SetSummaryInfo( m_lpRootStg,  <br>(LPCSTR)PostData.m_psTitle,  <br>(LPCSTR)PostData.m_psSubject,  <br>(LPCSTR)PostData.m_psAuthor,  <br>(LPCSTR)PostData.m_psKeywords,  <br>(LPCSTR)PostData.m_psComments); <br>} <br>else <br>{ <br>// Load the document data <br>CONST nRequested = 100; <br>INT nReturned = 100; <br>char lpszBuf[nRequested] = ""; <br>theApp.m_lpBuffer = TEXT(""); <br> <br>while (nReturned == nRequested) <br>{ <br>nReturned = ar.Read(lpszBuf,  <br>nRequested);  <br>theApp.m_lpBuffer += lpszBuf; <br>} <br> <br>} <br> <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPostSmplDoc diagnostics <br> <br>#ifdef _DEBUG <br>void CPostSmplDoc::AssertValid() const <br>{ <br>COleDocument::AssertValid(); <br>} <br> <br>void CPostSmplDoc::Dump(CDumpContext&amp; dc) const <br>{ <br>COleDocument::Dump(dc); <br>} <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPostSmplDoc commands <br> <br> <br>void CPostSmplDoc::OnFileSave()  <br>{ <br>//  Add your command handler code here <br>COleDocument::OnFileSave(); <br> <br>} <br>void CPostSmplDoc::OnFileSaveAs()  <br>{ <br>//  Add your command handler code here <br>COleDocument::OnFileSaveAs(); <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

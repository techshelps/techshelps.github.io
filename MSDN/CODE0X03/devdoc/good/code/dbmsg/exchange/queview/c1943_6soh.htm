<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QUEVIEW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1961"></a>QUEVIEW.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// QueView.cpp : Implements an Exchange Administration property sheet to be used <br>//               for viewing the MTS-IN and MTS-OUT folders of a gateway. <br>// <br>// NOTE: To use the Delete and NDR buttons the PR_GW_ADMIN_OPERATIONS on each <br>//       folder you want this capability for must be set to 14.  Either do this  <br>//       in your gateway application or use MDBVU32.EXE to do this.  At the time <br>//       this note was written PR_GW_ADMIN_OPERATIONS equates to 0x6658.  When  <br>//       creating it create it as a ULONG. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>//#define _EXAMPLES_ <br>#include "helpers.h" <br>#include "queview.h" <br>#include "property.h" <br>#include "PropDlg.h" <br>#include "MAPIMsg.h" <br>#include "BinArray.h" <br>#include "DynArray.h" <br>#include "delmsgdl.h" <br>#include "faildmsg.h" <br> <br>/* #define INITGUID <br>#include &lt;initguid.h&gt; <br>#include &lt;edkguid.h&gt; <br>#define USES_IID_IMessage <br>#define USES_IID_IMAPIProp <br>#define USES_IID_IMAPIPropData <br>#define USES_IID_IMAPIFolder <br>#define USES_IID_IABContainer <br>#define USES_IID_IAddrBook <br>#define USES_IID_IMAPIFormInfo <br>#define USES_IID_IMailUser <br>#define USES_IID_IAttachment <br>#define USES_IID_IDistList <br>#define USES_IID_IMAPIStatus <br>#define USES_IID_IMAPISession <br>#define USES_IID_IMsgStore <br>#define USES_IID_IProfSect <br>#include &lt;mapiguid.h&gt; <br>*/ <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>// ----------------------------------------------------------------------------- <br> <br>const UINT iRefreshTimerId = 1; // The one and only timer we use. <br>UINT nRefreshTime = 1000;  // One second wait before refreshing combo box. <br> <br>// ----------------------------------------------------------------------------- <br> <br>BEGIN_MESSAGE_MAP(CQueViewDlg, CAdminDialog) <br>//{{AFX_MSG_MAP(CQueViewDlg) <br>ON_BN_CLICKED(IDC_CMD_REFRESH, OnCmdRefresh) <br>ON_WM_DESTROY() <br>ON_BN_CLICKED(IDC_CMD_DETAILS, OnCmdDetails) <br>ON_CBN_SELCHANGE(IDC_COMBO_FOLDERS, OnSelChangeComboFolders) <br>ON_LBN_SELCHANGE(IDC_LIST_MSGS, OnSelChangeListMsgs) <br>ON_BN_CLICKED(IDC_CMD_DELETE, OnCmdDelete) <br>ON_BN_CLICKED(IDC_CMD_NDR, OnCmdNdr) <br>ON_WM_TIMER() <br>ON_LBN_DBLCLK(IDC_LIST_MSGS, OnCmdDetails) <br>ON_CBN_KILLFOCUS(IDC_COMBO_FOLDERS, OnKillFocusComboFolders) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>//$--CQueViewDlg::CQueViewDlg()------------------------------------------------- <br>// CONSTRUCTOR: <br>// ----------------------------------------------------------------------------- <br> <br>CQueViewDlg::CQueViewDlg() : CAdminDialog( IDD_QUEUE_VIEW, IDS_QUEUE_VIEW) <br>{ <br>    m_bInitilized = FALSE; <br>    m_bMTSIn = FALSE; <br>    m_pGWmdb = NULL; <br>    m_hPropDlgTemplate = NULL; <br>} <br> <br>//$--CQueViewDlg::~CQueViewDlg()------------------------------------------------- <br>// DESTRUCTOR: <br>// ----------------------------------------------------------------------------- <br> <br>CQueViewDlg::~CQueViewDlg() <br>{ <br>    if( m_hPropDlgTemplate) <br>        FreeDialogTemplate( &amp;m_hPropDlgTemplate); <br>} <br> <br>//$--CQueViewDlg::bHasHelp()---------------------------------------------------- <br>// Called to determine if you supply help.  Return TRUE if you do. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CQueViewDlg::bHasHelp() <br>{ <br>    return( TRUE); <br>} <br>     <br>//$--CQueViewDlg::DoHelp()------------------------------------------------------ <br>// Called to start help. <br>// ----------------------------------------------------------------------------- <br>     <br>VOID CQueViewDlg::DoHelp() <br>{ <br>    ::WinHelp( GetSafeHwnd(), TEXT( "queview.hlp"), HELP_CONTENTS, 0); <br>} <br> <br>//$--CQueViewDlg::Refresh()----------------------------------------------------- <br>// Called when the property sheet has been activated or reactivated. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::Refresh() <br>{ <br>    OnCmdRefresh(); <br>} <br> <br>//$--CQueViewDlg::OnCmdRefresh()------------------------------------------------ <br>// Handles the Refresh button.  Uses the selected folder to fill the list box  <br>// with Sender, Subject, and Size of each message in the folder.  Also refreshes <br>// the combo box with the current list of folders. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnCmdRefresh() <br>{ <br>    DEBUGPUBLIC( "CQueViewDlg::OnCmdRefresh()"); <br>    if( !::IsWindow(m_hWnd)) <br>        return; // Our list box is not connected to a window. <br> <br>    // Initialize the folder combo box with the current list. <br>    CHRESULT hr = m_cbFolders.HrInitialize( m_pGWmdb); <br>    if( FAILED( hr)) <br>        return; <br>     <br>    // Get the folder we have selected. <br>    LPMAPIFOLDER pFolder = m_cbFolders.GetFolder(); <br>    if( !pFolder) <br>    { <br>        HR_LOG( E_FAIL); <br>        return; <br>    } <br> <br>    // Get the contents table for the folder. <br>    CMAPIInterface&lt; LPMAPITABLE&gt; pContentsTbl; <br>    hr = pFolder-&gt;GetContentsTable( MAPI_DEFERRED_ERRORS, &amp;pContentsTbl); <br>    if( FAILED( hr)) <br>        return; <br> <br>    // Fill the list box with the data from this table. <br>    hr = m_lbMsgs.HrFillBox( pContentsTbl); <br>    if( FAILED( hr)) <br>        return; <br> <br>    OnSelChangeListMsgs();     <br>}                        <br> <br>//$--CQueViewDlg::OnInitDialog()------------------------------------------------ <br>// Initialize the dialog, connect class objects to controls, open MDB and folders. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CQueViewDlg::OnInitDialog()  <br>{ <br>    DEBUGPUBLIC( "CQueViewDlg::OnInitDialog()"); <br> <br>// Pay tribute to our ancestors. <br>CAdminDialog::OnInitDialog(); <br>     <br>    // This object will validate that initialization completed when this  <br>    // function exits.  If it has not then a message will be displayed. <br>    CMsgOnFail bInitStatus( "Could not logon to the information store.", "Queue Viewer"); <br> <br>    if( !GetMAPISession()) <br>        return( TRUE);  // We don't have a session handle so we must bail out now. <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Code to open the default message store. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    // Get the entry ID of the default message store. <br>    ULONG cbeid = 0;              // count of bytes in entry ID <br>    CMAPIBuffer&lt;LPENTRYID&gt;  lpeid; // Entry ID of default store <br>    CHRESULT hr = HrMAPIFindDefaultMsgStore( GetMAPISession(), &amp;cbeid, &amp;lpeid); <br>    if( FAILED( hr)) <br>        return( TRUE); <br>    ASSERTERROR( cbeid != 0, "Entry ID count should not be zero.");  <br>    ASSERTERROR( lpeid != NULL, "NULL lpeid pointer"); <br>     <br>    // Open the default message store. <br>    DEBUGACTION( "Opening Default Message Store"); <br>    hr = GetMAPISession()-&gt;OpenMsgStore( 0, cbeid, lpeid, NULL, MDB_NO_DIALOG | MDB_WRITE, &amp;m_pMDB); <br>    if( FAILED(hr)) <br>        return( TRUE); <br>    ASSERTERROR( m_pMDB != NULL, "NULL lpMDB pointer"); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Convert server name. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    int cb = WideCharToMultiByte( CP_ACP, 0, GetDNHomeMDB(), -1, NULL, 0, NULL, NULL); <br>    if( cb == 0) <br>    { <br>        HR_LOG( E_FAIL); <br>        return( TRUE); <br>    } <br> <br>    CString sServer; <br>    char* pszServer = sServer.GetBuffer(cb); <br>    cb = WideCharToMultiByte( CP_ACP, 0, GetDNHomeMDB(), -1, pszServer, cb, NULL, NULL); <br>    if( cb == 0) <br>    { <br>        HR_LOG( E_FAIL); <br>        return( TRUE); <br>    } <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Convert container distinguished name. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    cb = WideCharToMultiByte( CP_ACP, 0, GetDN(), -1, NULL, 0, NULL, NULL); <br>    if( cb == 0) <br>    { <br>        HR_LOG( E_FAIL); <br>        return( TRUE); <br>    } <br> <br>    CString sDN; <br>    char* pszDN = sDN.GetBuffer(cb); <br>    cb = WideCharToMultiByte( CP_ACP, 0, GetDN(), -1, pszDN, cb, NULL, NULL); <br>    if( cb == 0) <br>    { <br>        HR_LOG( E_FAIL); <br>        return( TRUE); <br>    } <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Now logon to the message database of this gateway. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>     <br>    hr = HrMailboxLogon(            <br>        GetMAPISession(),    // Ptr to MAPI session handle. <br>        m_pMDB, <br>        pszServer,           // Ptr to server DN. <br>        pszDN,               // Ptr to mailbox DN. <br>        &amp;m_pGWmdb);          // Ptr to gateway mailbox message store ptr. <br> <br>    if( FAILED( hr)) <br>        return( TRUE); <br>     <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Initialize the m_cbFolder object which will connect it to the  <br>// IDC_COMBO_FOLDERS combo box window, and get list of folders. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( HrSubclassWindow( IDC_COMBO_FOLDERS, m_cbFolders) != NOERROR) <br>        return( TRUE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Initialize the m_lbMsgs object by connecting it to the IDC_LIST_MSGS list  <br>// box window.  Also set the tab stops for the list box. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( HrSubclassWindow( IDC_LIST_MSGS, m_lbMsgs) != NOERROR) <br>        return( TRUE); <br> <br>    int nTabStops[] = { 6, 12, 76, 215}; <br>    m_lbMsgs.SetTabStops( ARRAY_CNT( nTabStops), nTabStops); <br>    m_lbMsgs.SetHorizontalExtent( 1000); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Connect the buttons to CButton objects. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( HrSubclassWindow( IDC_CMD_DELETE, m_btnDelete) != NOERROR) <br>        return( TRUE); <br> <br>    if( HrSubclassWindow( IDC_CMD_NDR, m_btnNDR) != NOERROR) <br>        return( TRUE); <br> <br>    if( HrSubclassWindow( IDC_CMD_REFRESH, m_btnRefresh) != NOERROR) <br>        return( TRUE); <br>    m_btnRefresh.EnableWindow( TRUE); <br> <br>    if( HrSubclassWindow( IDC_CMD_DETAILS, m_btnDetails) != NOERROR) <br>        return( TRUE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    // We succeed, do not display a message. <br>    bInitStatus.Succeeded(); <br>     <br>return( TRUE);  // return TRUE unless you set the focus to a control <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Do the cleanup work for member data. <br>// MAPI Interfaces must be released here.  We can not wait until the DLL exits <br>// to release the object interfaces since the code goes single threaded at that  <br>// time and causes deadlocks while waiting for MAPI threads to exit. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnDestroy()  <br>{ <br>CAdminDialog::OnDestroy(); <br>    ULRELEASE( m_pMDB); // Must be done here.  See note above. <br>    HRESULT hr = HrMailboxLogoff( &amp;m_pGWmdb); <br>} <br> <br>//$--CQueViewDlg::OnSelChangeComboFolders()------------------------------------- <br>// There are three functions that deal with changes in the folders combo box. <br>// They are: OnTimer, OnKillFocusComboFolders, and this one.  The reason we can <br>// not just refresh right here if the selection changes is that the refresh <br>// involves opening folders and reading the contents which takes a little bit <br>// of time.  If the user is scrolling through the list of folders using the  <br>// arrow keys it gets slow and jerky. <br>//  <br>// To deal with this we (re)set a timer each time the selection changes.  If <br>// the timer goes off the user has stopped scrolling through the list and we <br>// can refresh without it being jerky.  Also if the control looses focus we <br>// want to immediately refresh the folder and the message lists. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnSelChangeComboFolders()  <br>{ <br>    // Kill the old timer that may be running so we can start it again. <br>    KillTimer( iRefreshTimerId); <br>     <br>    // Set the timer to delay opening the folder and reading its contents. <br>    SetTimer( iRefreshTimerId, nRefreshTime, NULL); <br>} <br> <br>//$--CQueViewDlg::OnTimer()----------------------------------------------------- <br>// If the selection changed we refresh the combo box of folders, open the new <br>// folder, and then update the list box data. <br>// <br>// (See CQueViewDlg::OnSelChangeComboFolders() above for a full description.) <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnTimer( UINT nIDEvent)  <br>{ <br>    // We no longer need the timer. <br>    KillTimer( nIDEvent); <br> <br>    // Refresh the dialog with the current data only  <br>    // if the selection has truly changed. <br>    if( m_cbFolders.bSelectionChanged()) <br>        OnCmdRefresh();  <br>} <br> <br>//$--CQueViewDlg::OnKillFocusComboFolders()------------------------------------- <br>// If the selection changed we refresh the combo box of folders, open the new <br>// folder, and then update the list box data.   <br>// <br>// (See CQueViewDlg::OnSelChangeComboFolders() above for a full description.) <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnKillFocusComboFolders()  <br>{ <br>    // Has the selection has changed? <br>    if( m_cbFolders &amp;&amp; m_cbFolders.bSelectionChanged()) <br>    {   // YES, it has so kill the timer and refresh the  <br>        // dialog with the current data. <br>        KillTimer( iRefreshTimerId); <br>        OnCmdRefresh();  <br>    } <br>} <br> <br>//$--CQueViewDlg::OnSelChangeListMsgs()----------------------------------------- <br>// Enable and disable the buttons depending upon the number of list box items <br>// that are selected. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnSelChangeListMsgs() <br>{ <br>int nCnt = m_lbMsgs.GetSelCount(); <br>     <br>#if 1   // Set to 0 to force buttons on for testing purposes. <br>    // Button enabled when delete is available and at least one is selected.  <br>    m_btnDelete.EnableWindow( m_cbFolders.bIsDelete() &amp;&amp; nCnt != 0);  <br>     <br>    // Button enabled when delete is available and at least one is selected. <br>    m_btnNDR.EnableWindow( m_cbFolders.bIsNDR() &amp;&amp; m_cbFolders.bIsDefer() &amp;&amp; nCnt != 0);       <br>#else <br>    // Code to enable buttons when testing. <br>    m_btnDelete.EnableWindow( TRUE);  <br>    m_btnNDR.EnableWindow( TRUE);       <br>#endif <br> <br>    // Button enabled when only one is selected. <br>    m_btnDetails.EnableWindow( nCnt == 1);   <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Displays the details of a single message.  Should only get here when only <br>// one line is selected in the list box. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnCmdDetails()  <br>{ <br>    DEBUGPUBLIC( "CQueViewDlg::OnCmdDetails()"); <br>ASSERTERROR( m_lbMsgs.GetSelCount() == 1, "This button should be disabled when there are not 1 items selected."); <br>    ASSERTERROR( m_cbFolders.GetFolder() != NULL, "There should be a folder available."); <br> <br>    // Get the index of the entry id for the selected message. <br>    int ii = -1; <br>    m_lbMsgs.GetSelItems( 1, &amp;ii); <br>ASSERTERROR( ii &gt;= 0 &amp;&amp; ii &lt; m_lbMsgs.GetCount(), "INVALID EID index."); <br> <br>    // Open the selected message. <br>    ULONG        cb = m_lbMsgs.GetByteCnt( ii); <br>    LPENTRYID    pEID = m_lbMsgs.GetEID( ii); <br>    CMAPIMessage MAPIMsg( m_cbFolders.GetFolder(), cb, pEID); <br>    if( FAILED( MAPIMsg.m_hr)) <br>    {   // Construction of MAPIMsg failed!  Probably messages are obsolete. <br>        MessageBox2( IDS_MESSAGE_GONE); <br>        OnCmdRefresh();     <br>        return;  <br>    } <br> <br>    // List of properties that we are interested in. <br>    static SizedSPropTagArray( 13, sProps) =  <br>    { 13,  <br>        { <br>            PR_ARRIVAL_TIME,  <br>            PR_DISPLAY_TO,  <br>            PR_GW_ADMIN_OPERATIONS, <br>            PR_HASATTACH, <br>            PR_IMPORTANCE, <br>            PR_MESSAGE_CLASS, <br>            PR_MESSAGE_SIZE, <br>            PR_ORIGINATOR_ADDR, <br>            PR_ORIGINATOR_ADDRTYPE, <br>            PR_ORIGINATOR_NAME,  <br>            PR_PRIORITY, <br>            PR_SENSITIVITY, <br>            PR_SUBJECT <br>        } <br>    }; <br> <br>    // Get the properties from the message using a CProperty interface object <br>    // to access and contain properties. <br>    CProperty iProp; <br>    CHRESULT hr = iProp.GetProps( MAPIMsg, (LPSPropTagArray) &amp;sProps); <br>    if( FAILED( hr)) <br>        return; <br> <br>    // Load the dialog into memory as a template so the fonts  <br>    // and language get set appropriatly. <br>    if( !m_hPropDlgTemplate) <br>    { <br>        m_hPropDlgTemplate = LoadDialogTemplate( IDD_PROPS); <br>        if( !m_hPropDlgTemplate) <br>        { <br>            hr = HR_LOG( E_FAIL); <br>            return; <br>        } <br>    } <br> <br>    // Initialize the dialog listing the properties. <br>    CPropDlg PropDlg( &amp;iProp); <br>    if( !PropDlg.InitModalIndirect( m_hPropDlgTemplate)) <br>    { <br>        hr = HR_LOG( E_FAIL); <br>        return; <br>    } <br> <br>    // Show the dialog listing the properties. <br>    PropDlg.DoModal(); <br>} <br> <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnCmdDelete()  <br>{ <br>    int iUserAnswer; <br>    if( m_cbFolders.bIsDefer()) <br>    { <br>        CDelMsgDlg DelMsgDlg; <br>        iUserAnswer = DelMsgDlg.DoModal(); <br>    } <br>    else <br>    { <br>        iUserAnswer = MessageBox2( IDS_DELETENOW, IDS_DELETEMSGTITLE,  <br>                                  MB_YESNO | MB_ICONQUESTION); <br>    } <br> <br>    switch( iUserAnswer) <br>    { <br>        case IDYES: <br>        case IDC_CMD_DELETE_NOW: <br>            DeleteMsgsNow(); <br>            break; <br>         <br>        case IDC_CMD_DELETE_BY_GATEWAY: <br>            DeferMsgsAction( ADMINOP_DELETE); <br>            break; <br>         <br>        default: <br>            break; <br>    } <br>} <br> <br>//$--CQueViewDlg::DeleteMsgsNow()----------------------------------------------- <br>// Delete the selected messages right now using MAPI. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::DeleteMsgsNow()  <br>{ <br>    DEBUGPUBLIC( "CQueViewDlg::DeleteMsgsNow()"); <br>    // Get a pointer to the folder that contain the messages we will be working on. <br>    LPMAPIFOLDER pFolder = m_cbFolders.GetFolder(); <br>if( !pFolder) <br>    { <br>        return; <br>    } <br> <br>    // Determine the count of messages to delete. <br>    int nSelCnt = m_lbMsgs.GetSelCount(); <br>    if( nSelCnt &lt; 1) <br>    { <br>        return; <br>    } <br> <br>    // Allocate an array to hold the indexes of messages to delete. <br>    CDynamicArray&lt; int&gt; IndexArray( nSelCnt); <br>    if( !IndexArray) <br>    { <br>        HR_LOG( E_OUTOFMEMORY); <br>        return; <br>    } <br> <br>    // Create the array needed to delete all selected messages at once. <br>    m_lbMsgs.GetSelItems( nSelCnt, IndexArray); <br>    CBinArray EIDList( nSelCnt); <br>    int* pIndex = IndexArray; <br>    while( nSelCnt) <br>    { <br>        if( !EIDList.bAdd( m_lbMsgs.GetByteCnt( *pIndex), (LPBYTE) m_lbMsgs.GetEID( *pIndex))) <br>        { <br>            HR_LOG( E_FAIL); <br>            return; <br>        } <br> <br>        // Move on to next message. <br>        pIndex ++; <br>        nSelCnt--; <br>    } <br> <br>    // Delete all selected messages now. <br>    CHRESULT hr = pFolder-&gt;DeleteMessages( EIDList, (ULONG) GetSafeHwnd(), NULL, MESSAGE_DIALOG); <br>    if( FAILED( hr)) <br>        return; <br> <br>    // Refresh the dialog with the messages that are now in the folder. <br>    OnCmdRefresh(); <br>} <br> <br>//$--CQueViewDlg::DeferMsgsAction()--------------------------------------------- <br>// This function sets the specified action flags in the PR_GW_ADMIN_OPERATIONS  <br>// property of each message that is selected.  The only two action flags that  <br>// are appropriate for setting are ADMINOP_DELETE or ADMINOP_NDR. <br>// <br>// This affectivly causes defered deletions or NDRs of a messages. <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::DeferMsgsAction( <br>    ULONG ulAction)     // Should be either ADMINOP_DELETE or ADMINOP_NDR. <br>{ <br>    // Get a pointer to the folder that contain the messages we will be working on. <br>    LPMAPIFOLDER pFolder = m_cbFolders.GetFolder(); <br>if( !pFolder) <br>        return; <br> <br>    // Determine the count of messages to modify. <br>    int nSelCnt = m_lbMsgs.GetSelCount(); <br>    if( nSelCnt &lt; 1) <br>        return; <br> <br>    // Allocate an array to hold the indexes of messages to modify. <br>    CDynamicArray&lt; int&gt; IndexArray( nSelCnt); <br>    if( !IndexArray) <br>    { <br>        HR_LOG( E_OUTOFMEMORY); <br>        return; <br>    } <br> <br>    // Mark all selected messages to be modified. <br>    m_lbMsgs.GetSelItems( nSelCnt, IndexArray); <br>    int* pIndex = IndexArray; <br>    for( ; nSelCnt; pIndex ++, nSelCnt--) <br>    { <br>        ULONG cb = m_lbMsgs.GetByteCnt( *pIndex); <br>        LPENTRYID pEID = m_lbMsgs.GetEID( *pIndex); <br>         <br>        // Open the message. <br>        CMAPIMessage MAPIMsg( pFolder, cb, pEID, 0); <br>        if( FAILED( MAPIMsg.m_hr)) <br>        {   // Log error but continue to try and modify the other messages. <br>            continue;   // Move on to next message. <br>        } <br> <br>        // We have an opened message.  Now set the properties. <br>        SPropValue PropVal; <br>        PropVal.ulPropTag = PR_GW_ADMIN_OPERATIONS; <br>        PropVal.Value.ul = m_lbMsgs.dwGetFlags( *pIndex) | ulAction; <br>        CHRESULT hr = MAPIMsg-&gt;SetProps( 1, &amp;PropVal, NULL); <br>        if( FAILED( hr)) <br>        {   // Log error but continue to try and modify the other messages. <br>            continue;   // Move on to next message. <br>        } <br>         <br>        // We modified the properties successfully.  Now save the changes. <br>        hr = MAPIMsg-&gt;SaveChanges(0); <br>        if( FAILED( hr)) <br>        {   // Log error but continue to try and modify the other messages. <br>            continue;   // Move on to next message. <br>        } <br>    } <br>    OnCmdRefresh(); <br>} <br> <br>// ----------------------------------------------------------------------------- <br> <br>void CQueViewDlg::OnCmdNdr()  <br>{ <br>    DEBUGPUBLIC( "CQueViewDlg::OnCmdNdr()"); <br>    int iUserAnswer = MessageBox2( IDS_NDRNOW, IDS_NDRMSGTITLE,  <br>                              MB_YESNO | MB_ICONQUESTION); <br> <br>    if( iUserAnswer == IDYES) <br>        DeferMsgsAction( ADMINOP_NDR); <br>} <br> <br>// ----------------------------------------------------------------------------- <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

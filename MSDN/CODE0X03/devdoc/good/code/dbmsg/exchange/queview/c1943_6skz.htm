<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BINARRAY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1943"></a>BINARRAY.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// BinArray.cpp: Implements methods that wraps the MAPI SBinaryArray structure. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>#include "BinArray.h" <br>#include "BinArray.chk" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>// $--CBinArray::CBinArray()---------------------------------------------------- <br>// CONSTRUCTOR: Start off with an empty array. <br>// ----------------------------------------------------------------------------- <br> <br>CBinArray::CBinArray( ULONG AllocUnits) <br>{ <br>    m_SBA.cValues = 0; <br>    m_SBA.lpbin = NULL; <br> <br>    m_Size = 0; <br>    m_AllocUnits = AllocUnits; <br>    m_pCurBin = NULL; <br>} <br> <br>// $--CBinArray::~CBinArray()--------------------------------------------------- <br>// DESTRUCTOR: Free all allocated memory. <br>// ----------------------------------------------------------------------------- <br> <br>CBinArray::~CBinArray() <br>{ <br>    ULONG cValues = m_SBA.cValues; <br>    LPSBinary pBin = m_SBA.lpbin; <br>     <br>    if( cValues) <br>        ASSERTERROR( pBin != NULL, "m_SBA.lpbin should point to something."); <br> <br>    while( cValues) <br>    {   // Delete each byte array pointer. <br>         <br>        if( pBin-&gt;lpb) <br>            delete [] pBin-&gt;lpb; <br>         <br>        // Move pointer to next one. <br>        cValues --; <br>        pBin ++; <br>    } <br>     <br>    // Clear this just incase someone else was hanging on to a pointer to it. <br>    m_SBA.cValues = 0; <br>    m_SBA.lpbin = NULL; <br>} <br> <br>// $--CBinArray::HrAdd()-------------------------------------------------------- <br>// Add binary data to the array.  Returns TRUE if data was added. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CBinArray::bAdd(  <br>    ULONG cb,       // Count of byte array passed in. <br>    LPBYTE pBytes)  // Ptr to array of bytes. <br>{ <br>    DEBUGPUBLIC( "CBinArray::bAdd()\n"); <br>    if( FAILED( CHK_CBinArray_bAdd( cb, pBytes))) <br>        return( FALSE); <br> <br>    if( m_SBA.cValues &gt; m_Size) <br>    { <br>        HR_LOG( E_FAIL); // Corruption of m_SBA.cValues, it's too large. <br>        return( FALSE); <br>    } <br> <br>    // Have we filled the existing array? <br>    if( m_SBA.cValues == m_Size) <br>    {   // YES, so expand it. <br>        if( !bExpand()) <br>            return( FALSE); <br>    } <br> <br>    // Allocate memory to hold binary data. <br>    m_pCurBin-&gt;lpb = new BYTE[ cb]; <br>    if( !m_pCurBin-&gt;lpb) <br>        return( FALSE); <br> <br>    // Make a copy of binary data. <br>    m_pCurBin-&gt;cb = cb; <br>    memcpy( m_pCurBin-&gt;lpb, pBytes, cb); <br> <br>    // Increment the count and the current pointer. <br>    m_SBA.cValues ++; <br>    m_pCurBin ++; <br> <br>    return( TRUE); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// Expand the array by m_AllocUnits. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CBinArray::bExpand() <br>{ <br>    ULONG OldSize = m_Size; <br> <br>    if( !CDynamicArray&lt; SBinary&gt;::bExpand( m_AllocUnits)) <br>        return( FALSE); <br> <br>    // Adjust working pointers. <br>    m_SBA.lpbin = m_ptr; <br>    m_pCurBin = m_ptr + OldSize; <br>     <br>    return( TRUE); <br>} <br> <br>// ----------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

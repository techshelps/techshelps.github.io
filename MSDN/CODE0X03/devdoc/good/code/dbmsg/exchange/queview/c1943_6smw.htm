<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPERTY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1958"></a>PROPERTY.H</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// Property.h : Define classes that deals with IMAPIProp properties. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _PROPERTY_H_ <br>#define _PROPERTY_H_ <br> <br>#include "edkutcpp.h" <br> <br>extern IDList PropTags[]; <br>extern IDList PropTypes[]; <br> <br>typedef union _PV UPropVal; <br> <br>// ----------------------------------------------------------------------------- <br> <br>#define PR_ROW_SET_END (ULONG) ~0 <br> <br>// ----------------------------------------------------------------------------- <br>// This class lets the user get properties using an IMAPIProp interface (such as <br>// a mapi message interface).   <br>// <br>// It lets you move through the properties using the First(), Next(), and  <br>// bAtEnd() member functions. <br>// <br>// It lets you get the properties type, id, and value in either its native format <br>// of in a readable string. <br>// ----------------------------------------------------------------------------- <br> <br>class CProperty <br>{ <br>public: <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    // Construction, destruction, and setting defaults. <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    CProperty(); <br>    ~CProperty()  {Free();} <br> <br>    // Set the default sign format for int and long. <br>    BOOL bSetUnsigned( BOOL bUnsigned = TRUE); <br> <br>    // Set the default format used for doubles and floats. <br>    CString SetDblFmt( LPSTR pszDblFmt); <br> <br>    // Frees the property list array. <br>    void Free( ULONG cValues = 0, LPSPropValue pProps = NULL);     <br>     <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    // Set up the count of values and pointer to them. <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>     <br>    // Gets the properties using an IMAPIProp interface. <br>    HRESULT GetProps( IMAPIProp* imapiProp, LPSPropTagArray pta, ULONG ulFlags = 0); <br>     <br>    // Set up the properties array to work with. <br>    void Set( ULONG cValues, LPSPropValue pProps)   {Free( cValues, pProps);} <br> <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    // Moving through the property list array. <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    void First()    {m_pCurProp = m_pFirstProp;} <br>    void Next(); <br>    BOOL bAtEnd()   {return( m_pCurProp == NULL);} <br>     <br>    ULONG GetCount(){return( m_cValues);} <br> <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    // Getting info about the current property. <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>     <br>    // Get the current property ID as a ULONG. <br>    ULONG       ulGetPrID(); <br>     <br>    // Get the current property ID as a ptr to a char array string. <br>    const LPSTR szGetPrID()         {return( m_idlPropIDs.Find( ulGetPrID()));} <br>     <br>    // Get the current property TYPE as a ULONG. <br>    ULONG       ulGetPrType(); <br>     <br>    // Get the current property TYPE as a ptr to a char array string. <br>    const LPSTR szGetPrType()       {return( m_idlPropTypes.Find( ulGetPrType()));} <br>     <br>    // Get the current property VALUE as a union _PV as defined in MAPI. <br>    UPropVal    upvGetPrValue(); <br>     <br>    // Get the current property VALUE as a formated CString.  Pass TRUE to treat  <br>    // ints or longs as unsigned, FALSE otherwise.  If no params passed in we <br>    // default to a value that may be set through bSetUnsigned(). <br>    CString     szGetPrValue( BOOL bUnsigned = -1); <br> <br>protected: <br>    // Initializes property counters and pointers. <br>    void Init( ULONG cValues = 0, LPSPropValue pProps = NULL); <br> <br>    ULONG           m_cValues;          // Count of values pointed to by m_pFirstProp. <br>    LPSPropValue    m_pFirstProp;       // Ptr to first property in array. <br>    LPSPropValue    m_pLastProp;        // Ptr to last property. <br>    LPSPropValue    m_pCurProp;         // Ptr to current property. <br>    CIDList         m_idlPropIDs;       // ID list for valid property ids. <br>    CIDList         m_idlPropTypes;     // ID list for valid property types. <br>    BOOL            m_bUnsigned;        // Default signed format for int and long. <br>    CString         m_sDblFmt;          // Default format for doubles. <br>}; <br> <br>// ----------------------------------------------------------------------------- <br>// This class gives you the functionality of the above CProperty class but for <br>// rows of properties.  Set up the row set by calling HrGetTblRows(). <br>// <br>// Use FirstRow(), NextRow(), and bAtEndRows() to move through the rows of  <br>// properties.  Then access the properties using the methods of the CProperty  <br>// class. <br>// ----------------------------------------------------------------------------- <br> <br>class CPropertyRows : public CProperty <br>{ <br>public: <br>    CPropertyRows(); <br>    ~CPropertyRows() {Free();} <br> <br>    // Frees the rows of properties. <br>    void Free(); <br>     <br>    // Gets a row of properties from a MAPI table. <br>    HRESULT HrGetTblRows(                    // RETURNS: return code <br>        LPMAPITABLE lpTable,            // Ptr to a mapi table. <br>        ULONG       cMaxNRows = 10);    // Max.# of rows to return <br>     <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    // Moving through the rows of property list arrays. <br>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>    void FirstRow()     {SetCurRow(TRUE);} <br>    void NextRow()      {SetCurRow(FALSE);} <br>    BOOL bAtEndOfRows()  <br>    {    <br>        if( !m_pRowSet) <br>            return( TRUE); <br>        return( m_ulCurRowIndex &gt;= m_pRowSet-&gt;cRows); <br>    } <br> <br>    ULONG GetRowCount()  <br>    {    <br>        if( !m_pRowSet) <br>            return( 0); <br>        return( m_pRowSet-&gt;cRows); <br>    } <br> <br>protected: <br>    void SetCurRow( BOOL bFirst);   // TRUE sets to first row, FALSE sets to next row. <br> <br>    LPSRowSet   m_pRowSet;          // Ptr to rows of properties. <br>    ULONG       m_ulCurRowIndex;    // Index of current row. <br>}; <br> <br>// ----------------------------------------------------------------------------- <br> <br>#endif //_PROPERTY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BINARRAY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1944"></a>BINARRAY.H</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// BinArray.h: Wrapper class for a mapi SBinaryArray. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#ifndef _BINARRAY_H_ <br>#define _BINARRAY_H_ <br> <br>#include "DynArray.h" <br> <br>// ----------------------------------------------------------------------------- <br>// Wraps a MAPI SBinaryArray structure and provides methods for creating it,  <br>// filling it, and cleaning up when it goes out of scope. <br>// ----------------------------------------------------------------------------- <br> <br>class CBinArray : CDynamicArray&lt; SBinary&gt; <br>{ <br>public: <br>    // A MAPI SBinaryArray.  Don't do anything with this except pass it to MAPI  <br>    // functions.  This class will do the maintenance on it. <br>    SBinaryArray    m_SBA;      <br> <br>    // CONSTRUCTOR: Start off with an empty array. <br>    CBinArray( ULONG AllocUnits = 10); <br> <br>    // DESTRUCTOR: Free all allocated memory. <br>    ~CBinArray(); <br> <br>    // Add binary data to the array. <br>    BOOL bAdd(  <br>        ULONG cb,       // Count of byte array passed in. <br>        LPBYTE pBytes); // Ptr to array of bytes. <br> <br>    // Returns a pointer to the SBinaryArray by just specifying the object. <br>    operator SBinaryArray*() {return( &amp;m_SBA);} <br> <br>protected: <br>    ULONG           m_AllocUnits;   // Number of units for each array expansion. <br>    LPSBinary       m_pCurBin;      // Ptr to next SBinary to fill up with data. <br>     <br>    // Expand the array by m_AllocUnits. <br>    BOOL bExpand();                   <br>}; <br> <br>// ----------------------------------------------------------------------------- <br>#ifdef _GLOBAL_OBJECTS_ <br>#pragma message("Declaration of global objects for: " __FILE__) <br> <br>#endif //_GLOBAL_OBJECTS_ <br>// ----------------------------------------------------------------------------- <br> <br>#endif // _BINARRAY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

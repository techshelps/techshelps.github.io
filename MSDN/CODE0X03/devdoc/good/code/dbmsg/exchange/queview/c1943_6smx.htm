<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRPLSTCB.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1959"></a>PRPLSTCB.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// prpLstCb.cpp: Implements methods for the Queue Viewer's List box and Combo Box. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>#include "prplstcb.h" <br>#include "helpers.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>// $--CProps::CProps()---------------------------------------------------------- <br>// CONSTRUCTOR <br>// ----------------------------------------------------------------------------- <br> <br>CProps::CProps( ULONG cbEID, BYTE* pEID, DWORD dwFlags) <br>{ <br>    m_cbEID = cbEID; <br>    if( m_cbEID == 0) <br>        m_pEID = NULL; <br>    else     <br>    { <br>        m_pEID = new BYTE[ m_cbEID]; <br>        memcpy( m_pEID, pEID, m_cbEID); <br>    } <br>    m_dwFlags = dwFlags; <br>} <br> <br>// $--CProps::~CProps()--------------------------------------------------------- <br>// DESTRUCTOR <br>// ----------------------------------------------------------------------------- <br> <br>CProps::~CProps() <br>{ <br>    if( m_pEID) <br>        delete [] m_pEID; <br>} <br> <br>// $--CPropsListBox::CPropsListBox()------------------------------------------------ <br>// CONSTRUCTOR <br>// ----------------------------------------------------------------------------- <br> <br>CPropsListBox::CPropsListBox() <br>{ <br>    static SizedSPropTagArray(5L,sPropColumns) = { 5L, {PR_GW_ADMIN_OPERATIONS, PR_ENTRYID, PR_ORIGINATOR_NAME, PR_SUBJECT, PR_MESSAGE_SIZE}}; <br>    static SizedSSortOrderSet(1L,sSortPrioSet) = { 1L, 0L, 0L, { PR_CLIENT_SUBMIT_TIME, TABLE_SORT_ASCEND}}; <br>    m_psPropColumns = (LPSPropTagArray) &amp;sPropColumns; <br>    m_psSortPrioSet = (LPSSortOrderSet) &amp;sSortPrioSet; <br> <br>} <br> <br>// $--CPropsListBox::HrAddItem()-------------------------------------------------- <br>// This virtual member function is called from HrFillBox().  It extracts the  <br>// properties from pProps into useable objects, formats them, and then add them  <br>// to the list box. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT CPropsListBox::HrAddItem(  // Returns HRESULT <br>     CProperty&amp; Properties)  // Ptr to properties of EID, sender, subject, &amp; size. <br>{ <br>    CString sFlags; <br>    if( !m_pProps) <br>        sFlags = "\t\t"; <br>    else <br>    { <br>        if( m_pProps-&gt;bIsDelete()) <br>            sFlags += "d"; <br>        if( m_pProps-&gt;bIsNDR()) <br>            sFlags += "\tn\t"; <br>        else <br>            sFlags += "\t\t"; <br>    } <br> <br>    // Take only the mailbox name of the sender distinguished name. <br>    CString sSenderName = Properties.szGetPrValue(); <br>    sSenderName.MakeLower(); <br>    CHAR szStrToFind[] = "/cn=recipients/cn="; <br>    int ii = sSenderName.Find( szStrToFind); <br>    sSenderName = Properties.szGetPrValue(); <br>    if( ii &gt; 0) <br>        // Take only the name. <br>        sSenderName = sSenderName.Mid( ii + sizeof( szStrToFind) - 1);  <br>         <br>    // Subject. <br>    Properties.Next(); <br>    CString sSubject = Properties.szGetPrValue(); <br> <br>    // Size. <br>    Properties.Next(); <br>    CString sSize = Properties.szGetPrValue(); <br> <br>    // Display the originator, subject, and size by adding to list box. <br>    CString sBuffer; <br>    sBuffer.Format( "%s%-.12s\t%-.42s\t%.14s", sFlags.GetBuffer(0), sSenderName.GetBuffer(0),  <br>                    sSubject.GetBuffer(0), sSize.GetBuffer(0)); <br>    AddString( sBuffer); <br> <br>    return( NOERROR); <br>} <br> <br>// $--CPropsComboBox::CPropsComboBox()------------------------------------------ <br>// CONSTRUCTOR <br>// ----------------------------------------------------------------------------- <br> <br>CPropsComboBox::CPropsComboBox() : m_sCurFolderName( TEXT("MTS-OUT")) <br>{ <br>    static SizedSPropTagArray(4L,sPropColumns) = { 4L, {PR_GW_ADMIN_OPERATIONS, PR_ENTRYID, PR_DISPLAY_NAME, PR_CONTENT_COUNT}}; <br>    static SizedSSortOrderSet(1L,sSortPrioSet) = { 1L, 0L, 0L, { PR_DISPLAY_NAME, TABLE_SORT_ASCEND}}; <br>    m_psPropColumns = (LPSPropTagArray) &amp;sPropColumns; <br>    m_psSortPrioSet = (LPSSortOrderSet) &amp;sSortPrioSet; <br>    m_iFolder = -1; <br>    m_pFolder = NULL; <br>    m_pMDB = NULL; <br>} <br> <br>// $--CPropsComboBox::HrInitialize()---------------------------------------------- <br>// Find all folders and open default folder. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT CPropsComboBox::HrInitialize( <br>    LPMDB   pMDB)   // Ptr to MDB that contain gateway folders. <br>{ <br>    DEBUGPUBLIC( "CPropsComboBox::HrInitialize()"); <br>    CHRESULT hr = CHK_CPropsComboBox_HrInitialize( pMDB); <br>    if(FAILED(hr)) <br>        RETURN( hr); <br> <br>    // Make sure we have a valid pMDB, even in retail builds <br>    if( !pMDB) <br>        RETURN( E_FAIL); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Find the current selection and if there is one save the display  <br>// name in m_sCurFolderName <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    int iCurSel = GetCurSel(); <br>    if( iCurSel != CB_ERR) <br>    {   // Something is selected. <br>        GetLBText( iCurSel, m_sCurFolderName); <br>        int nLen = m_sCurFolderName.Find( TEXT(" -- ")); <br>        m_sCurFolderName.GetBufferSetLength( nLen); <br>    } <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Remember the MDB ptr and open the root folder. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    m_pMDB = pMDB; <br> <br>    ULONG ulObjType = 0; <br>    CMAPIInterface&lt; LPMAPIFOLDER&gt; pRootFolder; <br>    hr = m_pMDB-&gt;OpenEntry( <br>        0, NULL, NULL, MAPI_DEFERRED_ERRORS, &amp;ulObjType, (LPUNKNOWN FAR *) &amp;pRootFolder); <br>    if(FAILED(hr)) <br>        RETURN( hr); <br> <br>    ASSERTERROR(ulObjType == MAPI_FOLDER, "ulObjType is not a MAPI_FOLDER"); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Using the root folder we can initialize a hierarchy table and use it to fill <br>// the combo box with a list of folders.  Also open the default folder. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    // Get the contents table for the folder. <br>    CMAPIInterface&lt; LPMAPITABLE&gt; pHierarchTbl; <br>    hr = pRootFolder-&gt;GetHierarchyTable( MAPI_DEFERRED_ERRORS, &amp;pHierarchTbl); <br>    if( FAILED( hr)) <br>        RETURN( hr); <br>     <br>    // Fill Combo Box with a list of folders. <br>    hr = HrFillBox( pHierarchTbl); <br>    if( FAILED( hr)) <br>        RETURN( hr); <br> <br>    // Select the first folder if non are selected yet. <br>    if( GetCurSel() == CB_ERR) <br>        SetCurSel( 0);   <br>     <br>    // Open the default folder. <br>    hr = HrOpenFolder(); <br>    if( FAILED( hr)) <br>        RETURN( hr); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    return( NOERROR); <br>} <br> <br>// ----------------------------------------------------------------------------- <br>// This releases the old folder and opens the newly selected one. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CPropsComboBox::HrOpenFolder() <br>{ <br>    DEBUGPUBLIC( "CPropsComboBox::HrOpenFolder()"); <br> <br>    int iFolder = GetCurSel(); <br>    m_iFolder = -1; // In case we fail. <br> <br>    // Release the old folder. <br>    ULRELEASE( m_pFolder); <br> <br>    // Open the folder. <br>    ULONG ulObjType = 0; <br>    CHRESULT hr = m_pMDB-&gt;OpenEntry( GetByteCnt( iFolder), GetEID( iFolder), <br>        NULL, MAPI_DEFERRED_ERRORS, &amp;ulObjType, (LPUNKNOWN FAR *) &amp;m_pFolder); <br> <br>    if( FAILED( hr)) <br>        RETURN( hr); <br> <br>    if( ulObjType != MAPI_FOLDER) <br>        RETURN( E_FAIL); <br>     <br>    m_iFolder = iFolder; <br>    return( NOERROR); <br>} <br> <br>// $--CPropsComboBox::HrAddItem()------------------------------------------------- <br>// This virtual member function is called from HrFillBox().  It extracts the  <br>// properties from pProps into useable objects, formats them, and then add them  <br>// to the combo box. <br>// ----------------------------------------------------------------------------- <br> <br>HRESULT CPropsComboBox::HrAddItem( // Returns HRESULT <br>     CProperty&amp; Properties)  // Ptr to properties of Entry Id and Folder name. <br>{ <br>    BOOL bIsCurrent = FALSE; <br> <br>    // Folder name. <br>    CString sFolderName = Properties.szGetPrValue(); <br>     <br>    // Explicitly clear the DEFER flag of the MTS-IN folder. <br>    if( sFolderName == TEXT( "MTS-IN") &amp;&amp; m_pProps) <br>        m_pProps-&gt;SetDefer( FALSE); <br> <br>    // Is this the current one? <br>    if( sFolderName == m_sCurFolderName) <br>        bIsCurrent = TRUE;  // Yes <br> <br>    // Count of messages in folder. <br>    Properties.Next(); <br>    sFolderName += " -- " + Properties.szGetPrValue(); <br> <br>    // Add the folder name to the combo box. <br>    int ii = AddString( sFolderName); <br> <br>    // If this is the current folder set the combo box selection. <br>    if( bIsCurrent) <br>        SetCurSel( ii);  <br>    return( NOERROR); <br>} <br> <br>// $--CPropsComboBox::CleanUp()--------------------------------------------------- <br>// Called when the window has been destroyed. <br>// ----------------------------------------------------------------------------- <br> <br>void CPropsComboBox::Destruct() <br>{ <br>    CPropsListComboBox&lt;CComboBox&gt;::Destruct(); <br>    m_iFolder = -1; <br>    ULRELEASE( m_pFolder); <br>} <br> <br>// ----------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

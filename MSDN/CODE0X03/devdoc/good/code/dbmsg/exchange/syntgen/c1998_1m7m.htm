<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>X400SCR.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2002"></a>X400SCR.C</h2>
<pre><code>// --X400scr.c---------------------------------------------------------------- <br>// <br>//  Generate script for X.400 address template <br>// <br>//  Copyright (C) Microsoft Corp. 1986-1996.  All rights reserved. <br>// <br>// --------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>/***************************************** <br>                Constants <br>*****************************************/ <br> <br>// From MAPIDEFS.H <br>#define PROP_TAG(ulPropType,ulPropID)  ((((unsigned long)(ulPropID))&lt;&lt;16)|((unsigned long)(ulPropType))) <br>#define PT_STRING8      ((unsigned long) 30) /* Null terminated 8-bit character string */ <br>#define PT_UNICODE      ((unsigned long) 31) /* Null terminated Unicode string */ <br>#define PT_SYSTIME      ((unsigned long) 64) /* FILETIME 64-bit int w/ number of 100ns periods since Jan 1,1601 */ <br>#define PT_TSTRING         PT_UNICODE <br> <br>// From MAPITAGS.H <br>#define PR_MHS_COMMON_NAME                   PROP_TAG( PT_TSTRING,   0x3A0F) <br>#define PR_MHS_COMMON_NAME_W                 PROP_TAG( PT_UNICODE,   0x3A0F) <br>#define PR_MHS_COMMON_NAME_A                 PROP_TAG( PT_STRING8,   0x3A0F) <br> <br>#define HALT    0L <br>#define ERRX    1L <br>#define EMIT    2L <br>#define JUMP    3L <br>#define JNX     4L <br>#define JE      5L <br> <br>#define OP1_ADDR        0x80000000 <br>#define OP2_ADDR        0x40000000 <br> <br>#define PR_GIVEN_NAME   PROP_TAG( PT_STRING8, 0x6701) <br>#define PR_SURNAME      PROP_TAG( PT_STRING8, 0x6702) <br>#define PR_INITIALS     PROP_TAG( PT_STRING8, 0x6703) <br>#define PR_GENERATION   PROP_TAG( PT_STRING8, 0x6704) <br>#define PR_COMMON_NAME  PROP_TAG( PT_STRING8, 0x6705) <br>#define PR_ORG          PROP_TAG( PT_STRING8, 0x6706) <br>#define PR_OU1          PROP_TAG( PT_STRING8, 0x6707) <br>#define PR_OU2          PROP_TAG( PT_STRING8, 0x6708) <br>#define PR_OU3          PROP_TAG( PT_STRING8, 0x6709) <br>#define PR_OU4          PROP_TAG( PT_STRING8, 0x670A) <br>#define PR_PRMD         PROP_TAG( PT_STRING8, 0x670B) <br>#define PR_ADMD         PROP_TAG( PT_STRING8, 0x670C) <br>#define PR_COUNTRY      PROP_TAG( PT_STRING8, 0x670D) <br>#define PR_DDAT1        PROP_TAG( PT_STRING8, 0x670E) <br>#define PR_DDAV1        PROP_TAG( PT_STRING8, 0x670F) <br>#define PR_DDAT2        PROP_TAG( PT_STRING8, 0x6710) <br>#define PR_DDAV2        PROP_TAG( PT_STRING8, 0x6711) <br>#define PR_DDAT3        PROP_TAG( PT_STRING8, 0x6712) <br>#define PR_DDAV3        PROP_TAG( PT_STRING8, 0x6713) <br>#define PR_DDAT4        PROP_TAG( PT_STRING8, 0x6714) <br>#define PR_DDAV4        PROP_TAG( PT_STRING8, 0x6715) <br>#define PR_NID          PROP_TAG( PT_STRING8, 0x6716) <br>#define PR_X121         PROP_TAG( PT_STRING8, 0x6717) <br>#define PR_TTY          PROP_TAG( PT_STRING8, 0x6718) <br>#define PR_TID          PROP_TAG( PT_STRING8, 0x6719) <br> <br>unsigned long  inst[400];  // Instruction Array <br>int            i = 0;      // Array index <br>char           *p;         // Array pointer <br>unsigned long  dda;        // "dda:" offset <br>unsigned long  equals;     // "=" offset <br>unsigned long  semi;       // ";" offset <br>unsigned long  nul;        // "" offset <br> <br>int   AddEMIT(unsigned long op); <br>void  AddText(int n, char *s); <br>int   AddDDAn(unsigned long typ, unsigned long val); <br>void  SetText(int n); <br> <br>/********************* <br>Write out a script file. <br>*********************/ <br> <br>void main() <br>   { <br>   int               nG, nS, nI, nGQ, nCN, nO, nOU1, nOU2, nOU3, nOU4, nP, nA, nC; <br>   int               nDDA1, nDDA2, nDDA3, nDDA4; <br>   int               nNID, nX121, nTTY, nTID; <br>   FILE              *fOut; <br> <br>   printf ("X.400 Address Template Script Generator\n"); <br>    <br>   // Save the instructions <br>   nG    = AddEMIT(PR_GIVEN_NAME); <br>   nS    = AddEMIT(PR_SURNAME); <br>   nI    = AddEMIT(PR_INITIALS); <br>   nGQ   = AddEMIT(PR_GENERATION); <br>   nCN   = AddEMIT(PR_COMMON_NAME); <br>   nX121 = AddEMIT(PR_X121); <br>   nNID  = AddEMIT(PR_NID); <br>   nTTY  = AddEMIT(PR_TTY); <br>   nTID  = AddEMIT(PR_TID); <br>   nO    = AddEMIT(PR_ORG); <br>   nOU1  = AddEMIT(PR_OU1); <br>   nOU2  = AddEMIT(PR_OU2); <br>   nOU3  = AddEMIT(PR_OU3); <br>   nOU4  = AddEMIT(PR_OU4); <br>   nP    = AddEMIT(PR_PRMD); <br>   nA    = AddEMIT(PR_ADMD); <br>   nC    = AddEMIT(PR_COUNTRY); <br>   nDDA1 = AddDDAn(PR_DDAT1, PR_DDAV1); <br>   nDDA2 = AddDDAn(PR_DDAT2, PR_DDAV2); <br>   nDDA3 = AddDDAn(PR_DDAT3, PR_DDAV3); <br>   nDDA4 = AddDDAn(PR_DDAT4, PR_DDAV4); <br>   inst[i++] = HALT; <br> <br>   // Save all the text <br>   dda = i * sizeof(unsigned long);    // Save the "dda:" terminator offset <br>   p = (char *)&amp;inst[i];               // Set the string pointer <br>   p += (sprintf(p, "dda:") + 4) &amp; ~3; // Copy the string <br>   i +=2; <br>    <br>   equals = i * sizeof(unsigned long); // Save the "=" offset <br>   p = (char *)&amp;inst[i];               // Set the string pointer <br>   p += (sprintf(p, "=") + 4) &amp; ~3;    // Copy the string <br>   i++; <br>    <br>   semi = i * sizeof(unsigned long);   // Save the ";" offset <br>   p = (char *)&amp;inst[i];               // Set the string pointer <br>   p += (sprintf(p, ";") + 4) &amp; ~3;    // Copy the string <br>   i++; <br>    <br>   nul = i * sizeof(unsigned long);    // Save the "" offset <br>   p = (char *)&amp;inst[i];               // Set the string pointer <br>   p += (sprintf(p, "") + 4) &amp; ~3;     // Copy the string <br> <br>   AddText(nG,    "g="); <br>   AddText(nS,    "s="); <br>   AddText(nI,    "i="); <br>   AddText(nGQ,   "q="); <br>   AddText(nCN,   "cn="); <br>   AddText(nX121, "x.121="); <br>   AddText(nNID,  "n-id="); <br>   AddText(nTTY,  "t-ty="); <br>   AddText(nTID,  "t-id="); <br>   AddText(nO,    "o="); <br>   AddText(nOU1,  "ou1="); <br>   AddText(nOU2,  "ou2="); <br>   AddText(nOU3,  "ou3="); <br>   AddText(nOU4,  "ou4="); <br>   AddText(nP,    "p="); <br>   AddText(nA,    "a="); <br>   AddText(nC,    "c="); <br>   SetText(nDDA1); <br>   SetText(nDDA2); <br>   SetText(nDDA3); <br>   SetText(nDDA4); <br> <br> <br>   // Save the instructions to a file <br>   if( !(fOut = fopen( "x400scr.blt", "wb"))) { printf( "Can't create X400SCR.BLT\n"); return; } <br>   fwrite(inst, sizeof(char), p - (char *)inst, fOut); <br>   fclose(fOut); <br>    <br>   printf("Done\n"); <br>   } <br> <br>// *********************************************** Add a general EMIT set <br>int AddEMIT(unsigned long op) <br>   { <br>   int n; <br> <br>   // Skip if the control is not dirty <br>   inst[i++] = JNX;                                // instruction op-code <br>   inst[i++] = op;                                 // property tag <br>   inst[i++] = (i + 11) * sizeof(unsigned long);   // jump address <br> <br>#ifndef OLD <br>   // Skip if the data is null <br>   inst[i++] = JE | OP2_ADDR;                      // instruction op-code <br>   inst[i++] = op;                                 // property tag <br>   n = i++;                                        // save address -- literal string ("") <br>   inst[i++] = (i + 7) * sizeof(unsigned long);    // jump address <br>#else <br>   inst[i++] = JUMP;                               // jump <br>   inst[i++] = (i + 3) * sizeof(unsigned long);    // jump address <br>   n = i++;                                        // save address -- literal string ("") <br>   inst[i++] = 10L; <br>#endif <br>       <br>   // Write the tag string <br>   inst[i++] = EMIT | OP1_ADDR;                    // instruction op-code <br>   i++;                                            // literal string ("g=") <br>    <br>   // Write the control data <br>   inst[i++] = EMIT;                               // instruction op-code <br>   inst[i++] = op;                                 // property tag <br> <br>   // Write the tag terminator <br>   inst[i++] = EMIT | OP1_ADDR;                    // instruction op-code <br>   i++;                                            // literal string (";") <br> <br>   return(n); <br>   } <br> <br>// *********************************** Add text and set the instruction offset <br>void  AddText(int n, char *s) <br>   { <br>   inst[n]   = nul;                 // Set the null string offset <br>   inst[n+3] = p - (char *)inst;    // Set the tag string offset <br>   inst[n+7] = semi;                // Set the semi-colon string offset <br>   p += (sprintf(p, s) + 4) &amp; ~3;   // Append the string and adjust the pointer <br>   } <br> <br>// ************************************************ Add a DDA EMIT set <br>int AddDDAn(unsigned long typ, unsigned long val) <br>   { <br>   int n; <br> <br>   // JNZ instruction <br>   inst[i++] = JNX;                                // instruction op-code <br>   inst[i++] = typ;                                // skip if TYPE is empty <br>   inst[i++] = (i + 15) * sizeof(unsigned long);   // jump address <br> <br>#ifndef OLD <br>   // Skip if the data is null <br>   inst[i++] = JE | OP2_ADDR;                      // instruction op-code <br>   inst[i++] = typ;                                // property tag <br>   n = i++;                                        // save offset -- literal string ("") <br>   inst[i++] = (i + 11) * sizeof(unsigned long);   // jump address <br>#else <br>   inst[i++] = JUMP;                               // jump <br>   inst[i++] = (i + 3) * sizeof(unsigned long);    // jump address <br>   n = i++;                                        // save address -- literal string ("") <br>   inst[i++] = 10L; <br>#endif <br> <br>   // EMIT instruction for the "DDA:" tag <br>   inst[i++] = EMIT | OP1_ADDR;                    // instruction op-code <br>   i++;                                            // literal string ("dda:") <br>    <br>   // EMIT instruction for TYPE data <br>   inst[i++] = EMIT;                               // instruction op-code <br>   inst[i++] = typ;                                // property tag <br>    <br>   // EMIT instruction for the "=" <br>   inst[i++] = EMIT | OP1_ADDR;                    // instruction op-code <br>   i++;                                            // literal string ("=") <br>    <br>   // EMIT instruction for VALUE data <br>   inst[i++] = EMIT;                               // instruction op-code <br>   inst[i++] = val;                                // property tag <br> <br>   // EMIT instruction for ";" <br>   inst[i++] = EMIT | OP1_ADDR;                    // instruction op-code <br>   i++;                                            // literal string ("=") <br> <br>   return(n); <br>   } <br> <br>// ************************************************ Set DDA text <br>void  SetText(int n) <br>   { <br>   inst[n]     = nul;               // Set the "" offset <br>   inst[n+3]   = dda;               // Set the "dda:" offset <br>   inst[n+7]   = equals;            // Set the "=" offset <br>   inst[n+11]  = semi;              // Set the ";" offset <br>   } <br>    <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

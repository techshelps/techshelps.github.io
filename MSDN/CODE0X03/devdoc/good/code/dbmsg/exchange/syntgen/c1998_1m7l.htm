<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SDUMP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2001"></a>SDUMP.C</h2>
<pre><code>// --sdump.c------------------------------------------------------------------ <br>// <br>//  Dump an address template <br>// <br>//  Copyright (C) Microsoft Corp. 1986-1996.  All rights reserved. <br>// <br>// --------------------------------------------------------------------------- <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>#define HALT    0L <br>#define ERRX    1L <br>#define EMIT    2L <br>#define JUMP    3L <br>#define JNX     4L <br>#define JE      5L <br>#define EMITUPPER    6L <br> <br>#define OP1_ADDR        0x80000000 <br>#define OP2_ADDR        0x40000000 <br> <br>#define NUL     0 <br>#define OP      1 <br>#define ADR     2 <br>#define PROP    3 <br> <br>int            i; <br>unsigned long  *buf; <br> <br>void instruction(char *s, int type1, int type2, int type3); <br>void operand(int type, int oper); <br> <br>// Main routine <br>void main(int argc, char *argv[]) <br>   { <br>   int      n; <br>   fpos_t   pos;                       <br>   FILE     *fh; <br>    <br>   if (argc != 2) { printf("Microsoft Exchange Script Dump Version 1.0\n\nUsage: SDUMP FILE\n"); exit(1); } <br>    <br>   // Read the script into the buffer <br>   strupr(argv[1]); <br>   if ((fh = fopen(argv[1], "rb")) == NULL) { printf("File \"%s\" not found!\n", argv[1]); exit(2); } <br>   fseek(fh, 0l, SEEK_END);   // seek to eof <br>   fgetpos(fh, &amp;pos);         // get file length <br>   fseek(fh, 0l, SEEK_SET);   // seek to beginning <br>   n = (int)pos;              // file size <br>   buf = malloc(n); <br>   fread(buf, 1, n, fh) / sizeof(unsigned long); <br>   fclose(fh); <br>    <br>   printf("Script Dump of %s\n\n", argv[1]); <br>    <br>   // Step through the script <br>   while(i&lt;n) <br>      { <br>      printf("%04X: ", i* sizeof(unsigned long)); <br>      switch(buf[i] &amp; 0xFL) <br>         { <br>         case HALT:  instruction("HALT", NUL, NUL, NUL); i = n; break; <br>         case ERRX:  instruction("ERRX", NUL, NUL, NUL); break; <br>         case EMIT:  instruction("EMIT",  OP, NUL, NUL); break; <br>         case JUMP:  instruction("JUMP", ADR, NUL, NUL); break; <br>         case JNX:   instruction("JNX",   OP, ADR, NUL); break; <br>         case JE:    instruction("JE",    OP,  OP, ADR); break; <br>         case EMITUPPER:  instruction("EMTU",  OP, NUL, NUL); break; <br>         default:    instruction("&lt;UNKNOWN&gt;", NUL, NUL, NUL); break; <br>         } <br>      printf("\n"); <br>      } <br>   }              <br> <br>// Dump out an instruction <br>void instruction(char *s, int type1, int type2, int type3) <br>   { <br>   int   oper1, oper2; <br>    <br>   // Test the modifier bits <br>   if ((buf[i] &amp; OP1_ADDR) == 0) oper1 = PROP; else oper1 = ADR; <br>   if ((buf[i] &amp; OP2_ADDR) == 0) oper2 = PROP; else oper2 = ADR; <br> <br>   printf("%-4s", s); i++;                   // Print the Instruction <br>   if (type1 != NUL) operand(type1, oper1);  // Print the first operand <br>   if (type2 != NUL) operand(type2, oper2);  // Print the second operand <br>   if (type3 != NUL) operand(type3, ADR);    // Print the third operand <br>   } <br> <br>// Dump out an operand <br>void operand(int type, int oper) <br>   { <br>   // override the operand if the instruction type is an address <br>   if (type == ADR) oper = ADR; <br>    <br>   switch(oper) <br>      { <br>      case ADR:    <br>         if (type == ADR) printf(" %08lX", buf[i]);  <br>         else printf(" \"%s\"", (char *)buf + buf[i]); <br>         break; <br>          <br>      case PROP:   <br>         printf(" %04lX+%04lX", buf[i] &gt;&gt; 16, buf[i] &amp; 0xFFFF);  <br>         break; <br>      }          <br>   i++;  // Increment the instruction pointer <br>   } </code></pre>
<p>&nbsp;</p></body>
</HTML>

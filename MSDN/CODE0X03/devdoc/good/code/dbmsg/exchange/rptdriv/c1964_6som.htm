<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPTDRIV.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1966"></a>RPTDRIV.C</h2>
<pre><code>// --rptdriv.c------------------------------------------------------------------ <br>//  <br>//  Report generation sample. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edk.h" <br>#include "gwmain.h" <br>#include "report.h" <br> <br>#include "rptdriv.chk" <br> <br>//  Defined for NT service shell <br>TCHAR szAppName[]       = TEXT("RPTDRIV"); <br>TCHAR szWindowTitle[]   = TEXT("Reports Sample"); <br> <br>static LPMAPISESSION    lpSession       = NULL; <br>static LPMDB            lpStore         = NULL; <br>static LPMAPIFOLDER     lpRootFolder    = NULL; <br>static LPMAPIFOLDER     lpMtsInFolder   = NULL; <br>static LPMAPIFOLDER     lpMtsOutFolder  = NULL; <br>static ULONG            cbGalEid        = 0; <br>static LPENTRYID        lpGalEid        = NULL; <br> <br>#define NDR     0 <br>#define DR      1 <br>#define RN      2 <br>#define NRN     3 <br>#define UNKNOWN 4 <br> <br>//$--UlMakeReportType----------------------------------------------------------- <br>//  Make a report type from a string. <br>// ----------------------------------------------------------------------------- <br>static ULONG UlMakeReportType(          // RETURNS: type of report <br>    IN LPTSTR lpszStr)                  // string <br>{ <br>    ULONG  ulReportType = UNKNOWN; <br>    LPTSTR lpszCurr     = NULL; <br>    LPTSTR lpszName     = NULL; <br> <br>    if(lpszStr == NULL) <br>    { <br>        ulReportType = UNKNOWN; <br>        goto cleanup; <br>    } <br> <br>    lpszName = lpszStr; <br> <br>    // <br>    // Skip leading white space. <br>    // <br> <br>    while(*lpszName &amp;&amp; ((*lpszName == ' ') || (*lpszName == '\t'))) <br>    { <br>        lpszName++; <br>    } <br> <br>    lpszCurr = lpszName; <br> <br>    while(*lpszCurr &amp;&amp; (*lpszCurr != ' ') &amp;&amp; (*lpszCurr != '\t')) <br>    { <br>        lpszCurr++; <br>    } <br> <br>    *lpszCurr = 0; <br> <br>    if(lstrcmpi(lpszName, "NDR") == 0) <br>    { <br>        ulReportType = NDR; <br>    } <br>    else if(lstrcmpi(lpszName, "DR") == 0) <br>    { <br>        ulReportType = DR; <br>    } <br>    else if(lstrcmpi(lpszName, "RN") == 0) <br>    { <br>        ulReportType = RN; <br>    } <br>    else if(lstrcmpi(lpszName, "NRN") == 0) <br>    { <br>        ulReportType = NRN; <br>    } <br>    else <br>    { <br>        ulReportType = UNKNOWN; <br>    } <br> <br>cleanup: <br> <br>    return(ulReportType); <br>} <br> <br>//$--HrBuildSampleNDRAdrList---------------------------------------------------- <br>//  Build a sample non-delivery report address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrBuildSampleNDRAdrList(            // RETURNS: return code <br>    IN LPMESSAGE lpMessage,                 // pointer to message <br>    OUT LPADRLIST *lppAdrList)              // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    HRESULT         hrT             = NOERROR; <br>    LPADRLIST       lpAdrList       = NULL; <br>    LPADRLIST       lpNewAdrList    = NULL; <br>    SPropValue      rgProps[5]      = {0}; <br>    ULONG           cHeadProps      = 0; <br>    LPSPropValue    lpHeadProps     = NULL; <br>    ULONG           cTailProps      = 0; <br>    LPSPropValue    lpTailProps     = NULL; <br>    ULONG           cNewProps       = 0; <br>    LPSPropValue    lpNewProps      = NULL; <br>    LPMAPITABLE     lpTable         = NULL; <br>    ULONG           cRows           = 0; <br> <br>    DEBUGPUBLIC("HrBuildSampleNDRAdrList()\n"); <br> <br>    hr = CHK_HrBuildSampleNDRAdrList( <br>        lpMessage, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>//------------------------------------------------------------------------------ <br> <br>    hrT = MAPICALL(lpMessage)-&gt;GetRecipientTable( <br>        lpMessage, <br>        MAPI_DEFERRED_ERRORS, <br>        &amp;lpTable); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;GetRowCount(lpTable, 0, &amp;cRows); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;QueryRows( <br>        lpTable, <br>        cRows, <br>        0, <br>        (LPSRowSet *)&amp;lpAdrList); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br>    else if((lpAdrList == NULL) || (lpAdrList-&gt;cEntries != cRows)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>//------------------------------------------------------------------------------ <br> <br>    hr = HrNDRCreateFailedRecipList( <br>        &amp;lpNewAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrNDRGetFailedRecipList( <br>        &amp;lpAdrList-&gt;aEntries[0], <br>        0, <br>        NULL, <br>        &amp;cNewProps, <br>        &amp;lpNewProps); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrNDRAddToFailedRecipList( <br>        cNewProps, <br>        lpNewProps, <br>        &amp;lpNewAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    *lppAdrList = lpNewAdrList; <br> <br>cleanup: <br> <br>    ULRELEASE(lpTable); <br> <br>    MAPIFREEBUFFER(lpNewProps); <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSendNDR------------------------------------------------------------------ <br>//  Send a non-delivery report. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSendNDR(                          // RETURNS: return code <br>    IN LPADRBOOK  lpAdrBook,                // pointer to address book <br>    IN LPMAPIFOLDER lpFolder,               // pointer to folder <br>    IN LPMESSAGE lpEnvelope,                // pointer to message envelope <br>    IN LPMESSAGE lpMessage)                 // pointer to message <br>{ <br>    HRESULT      hr               = NOERROR; <br>    HRESULT      hrT              = NOERROR; <br>    LPMESSAGE    lpReport         = NULL; <br>    ULONG        cValues          = 0; <br>    LPSPropValue lpProps          = NULL; <br>    LPADRLIST    lpAdrList        = NULL; <br> <br>    DEBUGPUBLIC("HrSendNDR()\n"); <br> <br>    hr = CHK_HrSendNDR( <br>        lpAdrBook, <br>        lpFolder, <br>        lpEnvelope, <br>        lpMessage); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    hr = HrBuildSampleNDRAdrList( <br>        lpMessage, <br>        &amp;lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrNDRGetFailedProps( <br>        lpMessage, <br>        &amp;cValues, <br>        &amp;lpProps); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrNDRCreate( <br>        lpAdrBook, <br>        lpFolder, <br>        lpMessage, <br>        lpAdrList, <br>        cValues, <br>        lpProps, <br>        &amp;lpReport); <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // Submit report <br>    hrT = MAPICALL(lpReport)-&gt;SubmitMessage(lpReport, FORCE_SUBMIT); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    MAPIFREEBUFFER(lpProps); <br> <br>    ULRELEASE(lpReport); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrBuildSampleDRAdrList----------------------------------------------------- <br>//  Build a sample delivery report address list. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrBuildSampleDRAdrList(             // RETURNS: return code <br>    IN LPMESSAGE lpMessage,                 // pointer to message <br>    OUT LPADRLIST *lppAdrList)              // pointer to address list pointer <br>{ <br>    HRESULT         hr              = NOERROR; <br>    HRESULT         hrT             = NOERROR; <br>    LPADRLIST       lpAdrList       = NULL; <br>    LPADRLIST       lpNewAdrList    = NULL; <br>    SPropValue      rgProps[5]      = {0}; <br>    ULONG           cHeadProps      = 0; <br>    LPSPropValue    lpHeadProps     = NULL; <br>    ULONG           cTailProps      = 0; <br>    LPSPropValue    lpTailProps     = NULL; <br>    ULONG           cNewProps       = 0; <br>    LPSPropValue    lpNewProps      = NULL; <br>    LPSPropValue    lpPropT         = NULL; <br>    LPMAPITABLE     lpTable         = NULL; <br>    ULONG           cRows           = 0; <br> <br>    DEBUGPUBLIC("HrBuildSampleDRAdrList()\n"); <br> <br>    hr = CHK_HrBuildSampleDRAdrList( <br>        lpMessage, <br>        lppAdrList); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>//------------------------------------------------------------------------------ <br> <br>    hrT = MAPICALL(lpMessage)-&gt;GetRecipientTable( <br>        lpMessage, <br>        MAPI_DEFERRED_ERRORS, <br>        &amp;lpTable); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;GetRowCount(lpTable, 0, &amp;cRows); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;QueryRows( <br>        lpTable, <br>        cRows, <br>        0, <br>        (LPSRowSet *)&amp;lpAdrList); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br>    else if((lpAdrList == NULL) || (lpAdrList-&gt;cEntries != cRows)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>//------------------------------------------------------------------------------ <br> <br>    hr = HrDRCreateDeliveredRecipList( <br>        &amp;lpNewAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrDRGetDeliveredRecip( <br>        &amp;lpAdrList-&gt;aEntries[0], <br>        0, <br>        NULL, <br>        &amp;cNewProps, <br>        &amp;lpNewProps); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    lpPropT = LpValFindProp( <br>        PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED, cNewProps, lpNewProps); <br> <br>    if(lpPropT != NULL) <br>    { <br>       lpPropT-&gt;ulPropTag = PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED; <br>       lpPropT-&gt;Value.b   = TRUE; <br>    } <br> <br>    hr = HrDRAddToDeliveredRecipList( <br>        cNewProps, <br>        lpNewProps, <br>        &amp;lpNewAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    *lppAdrList = lpNewAdrList; <br> <br>cleanup: <br> <br>    ULRELEASE(lpTable); <br> <br>    MAPIFREEBUFFER(lpNewProps); <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSendDR------------------------------------------------------------------- <br>//  Send a delivery report. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSendDR(                           // RETURNS: return code <br>    IN LPADRBOOK  lpAdrBook,                // pointer to address book <br>    IN LPMAPIFOLDER lpFolder,               // pointer to folder <br>    IN LPMESSAGE lpEnvelope,                // pointer to message envelope <br>    IN LPMESSAGE lpMessage)                 // pointer to message <br>{ <br>    HRESULT      hr               = NOERROR; <br>    HRESULT      hrT              = NOERROR; <br>    LPMESSAGE    lpReport         = NULL; <br>    ULONG        cValues          = 0; <br>    LPSPropValue lpProps          = NULL; <br>    LPSPropValue lpPropT          = NULL; <br>    LPADRLIST    lpAdrList        = NULL; <br> <br>    DEBUGPUBLIC("HrSendDR()\n"); <br> <br>    hr = CHK_HrSendDR( <br>        lpAdrBook, <br>        lpFolder, <br>        lpEnvelope, <br>        lpMessage); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    hr = HrBuildSampleDRAdrList( <br>        lpMessage, <br>        &amp;lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrDRGetProps( <br>        lpMessage, <br>        &amp;cValues, <br>        &amp;lpProps); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrDRCreate( <br>        lpAdrBook, <br>        lpFolder, <br>        lpMessage, <br>        lpAdrList, <br>        cValues, <br>        lpProps, <br>        &amp;lpReport); <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // Submit report <br>    hrT = MAPICALL(lpReport)-&gt;SubmitMessage(lpReport, FORCE_SUBMIT); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    FREEPADRLIST(lpAdrList); <br> <br>    MAPIFREEBUFFER(lpProps); <br> <br>    ULRELEASE(lpReport); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrBuildSampleRNSender------------------------------------------------------ <br>//  Build a sample sender for a RN/NRN report. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrBuildSampleRNSender(          // RETURNS: return code <br>    IN LPMESSAGE lpMessage,             // pointer to message <br>    IN LPADRBOOK lpAdrBook,             // pointer to address book <br>    OUT LPTSTR    *lppszDisplayName,    // pointer to display name <br>    OUT ULONG     *lpcbeid,             // pointer count of bytes in entry ID <br>    OUT LPENTRYID *lppeid)              // pointer to entry ID <br>{ <br>    HRESULT      hr         = NOERROR; <br>    HRESULT      hrT        = NOERROR; <br>    SCODE        sc         = 0; <br>    ULONG        cBytes     = 0; <br>    LPADRLIST    lpAdrListT = NULL; <br>    LPADRLIST    lpAdrList  = NULL; <br>    ULONG        cValues    = 0; <br>    LPSPropValue lpProps    = NULL; <br>    LPSPropValue lpPropT    = NULL; <br>    LPMAPITABLE  lpTable    = NULL; <br>    ULONG        cRows      = 0; <br> <br>    SPropValue   prop[2]    = {0}; <br> <br>    SizedSPropTagArray(2, rgPropTags) = <br>    { <br>        2,  <br>        { <br>            PR_DISPLAY_NAME, <br>            PR_ENTRYID, <br>        } <br>    }; <br> <br>    DEBUGPUBLIC("HrBuildSampleRNSender()\n"); <br> <br>    hr = CHK_HrBuildSampleRNSender( <br>        lpMessage, <br>        lpAdrBook, <br>        lppszDisplayName, <br>        lpcbeid, <br>        lppeid); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    *lpcbeid = 0; <br>    *lppeid  = NULL; <br> <br>//------------------------------------------------------------------------------ <br> <br>    // <br>    // Get a row from the recipient table <br>    // <br> <br>    hrT = MAPICALL(lpMessage)-&gt;GetRecipientTable( <br>        lpMessage, <br>        MAPI_DEFERRED_ERRORS, <br>        &amp;lpTable); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;GetRowCount(lpTable, 0, &amp;cRows); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hrT = MAPICALL(lpTable)-&gt;QueryRows( <br>        lpTable, <br>        cRows, <br>        0, <br>        (LPSRowSet *)&amp;lpAdrListT); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br>    else if((lpAdrListT == NULL) || (lpAdrListT-&gt;cEntries != cRows)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>//------------------------------------------------------------------------------ <br> <br>    // <br>    // Get the entry ID <br>    // <br> <br>    cValues = lpAdrListT-&gt;aEntries[0].cValues; <br>    lpProps = lpAdrListT-&gt;aEntries[0].rgPropVals; <br> <br>    lpPropT = LpValFindProp(PR_ENTRYID, cValues, lpProps); <br> <br>    if(lpPropT != NULL) <br>    { <br>        if((lpPropT-&gt;Value.bin.cb == 0) || (lpPropT-&gt;Value.bin.lpb == NULL)) <br>        { <br>            hr = HR_LOG(E_FAIL);                                  <br>            goto cleanup; <br>        } <br>    } <br>    else <br>    { <br>        hr = HR_LOG(E_FAIL);                                  <br>        goto cleanup; <br>    } <br> <br>    prop[0].ulPropTag       = PR_ENTRYID; <br>    prop[0].Value.bin.cb    = lpPropT-&gt;Value.bin.cb; <br>    prop[0].Value.bin.lpb   = (LPBYTE)lpPropT-&gt;Value.bin.lpb; <br>    prop[1].ulPropTag       = PR_RECIPIENT_TYPE; <br>    prop[1].Value.ul        = MAPI_TO; <br> <br>    hr = HrMAPICreateSizedAddressList(1, &amp;lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrMAPISetAddressList( <br>        0, <br>        2, <br>        prop, <br>        lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = MAPICALL(lpAdrBook)-&gt;PrepareRecips( lpAdrBook, <br>        0, <br>        (LPSPropTagArray)&amp;rgPropTags, <br>        lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        goto cleanup; <br>    } <br> <br>    // <br>    // Copy the display name <br>    // <br> <br>    cBytes = cbStrLen(lpAdrList-&gt;aEntries[0].rgPropVals[0].Value.LPSZ); <br> <br>    sc = MAPIAllocateBuffer(cBytes, lppszDisplayName); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    CopyMemory( <br>        *lppszDisplayName, <br>        lpAdrList-&gt;aEntries[0].rgPropVals[0].Value.LPSZ, <br>        cBytes); <br> <br>    // <br>    // Copy the entry ID <br>    // <br> <br>    cBytes = lpAdrList-&gt;aEntries[0].rgPropVals[1].Value.bin.cb; <br> <br>    sc = MAPIAllocateBuffer(cBytes, lppeid); <br> <br>    if(FAILED(sc))                            <br>    {                                                    <br>        hr = HR_LOG(E_OUTOFMEMORY);                                  <br>        goto cleanup; <br>    }                                                    <br> <br>    *lpcbeid = cBytes; <br> <br>    CopyMemory( <br>        *lppeid, <br>        lpAdrList-&gt;aEntries[0].rgPropVals[1].Value.bin.lpb, <br>        cBytes); <br> <br>cleanup: <br> <br>    ULRELEASE(lpTable); <br> <br>    FREEPADRLIST(lpAdrListT); <br>    FREEPADRLIST(lpAdrList); <br> <br>    if(FAILED(hr)) <br>    { <br>        MAPIFREEBUFFER(*lppszDisplayName); <br> <br>        *lpcbeid = 0; <br> <br>        MAPIFREEBUFFER(*lppeid); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSendRN------------------------------------------------------------------- <br>//  Send a read notification report. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSendRN(                           // RETURNS: return code <br>    IN LPADRBOOK lpAdrBook,                 // pointer to address book <br>    IN LPMAPIFOLDER lpFolder,               // pointer to folder <br>    IN LPMESSAGE lpEnvelope,                // pointer to envelope <br>    IN LPMESSAGE lpMessage)                 // pointer to message <br>{ <br>    HRESULT     hr                  = NOERROR; <br>    HRESULT     hrT                 = NOERROR; <br>    LPMESSAGE   lpReportEnvelope    = NULL; <br>    LPMESSAGE   lpReport            = NULL; <br>    LPTSTR      lpszDisplayName     = NULL; <br>    ULONG       cbeid               = 0; <br>    LPENTRYID   lpeid               = NULL; <br>    FILETIME    ft                  = {0}; <br>    SPropValue  rgProps[3]          = {0}; <br> <br>    DEBUGPUBLIC("HrSendRN()\n"); <br> <br>    hr = CHK_HrSendRN( <br>        lpAdrBook, <br>        lpFolder, <br>        lpEnvelope, <br>        lpMessage); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    hr = HrBuildSampleRNSender( <br>        lpEnvelope, <br>        lpAdrBook, <br>        &amp;lpszDisplayName, <br>        &amp;cbeid, <br>        &amp;lpeid); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    GetSystemTimeAsFileTime( &amp;ft); <br> <br>    rgProps[0].ulPropTag     = PR_RCVD_REPRESENTING_NAME; <br>    rgProps[0].Value.LPSZ    = lpszDisplayName; <br> <br>    rgProps[1].ulPropTag     = PR_RCVD_REPRESENTING_ENTRYID; <br>    rgProps[1].Value.bin.cb  = cbeid; <br>    rgProps[1].Value.bin.lpb = (LPBYTE)lpeid; <br> <br>    rgProps[2].ulPropTag     = PR_CLIENT_SUBMIT_TIME; <br>    rgProps[2].Value.ft      = ft; <br> <br>     hrT = MAPICALL(lpMessage)-&gt;SetProps( <br>        lpMessage, <br>        3, <br>        rgProps, <br>        NULL); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrEDKCreateReadNotificationReport( <br>        lpFolder, <br>        lpMessage, <br>        TEXT("sample report text"), <br>        &amp;lpReportEnvelope, <br>        &amp;lpReport); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // Submit report <br>    hrT = MAPICALL(lpReportEnvelope)-&gt;SubmitMessage(lpReportEnvelope, FORCE_SUBMIT); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpszDisplayName); <br> <br>    MAPIFREEBUFFER(lpeid); <br> <br>    ULRELEASE(lpReport); <br> <br>    ULRELEASE(lpReportEnvelope); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSendNRN------------------------------------------------------------------ <br>//  Send a non-read notification report. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSendNRN(                          // RETURNS: return code <br>    IN LPADRBOOK lpAdrBook,                 // pointer to address book <br>    IN LPMAPIFOLDER lpFolder,               // pointer to folder <br>    IN LPMESSAGE lpEnvelope,                // pointer to envelope <br>    IN LPMESSAGE lpMessage)                 // pointer to message <br>{ <br>    HRESULT     hr                  = NOERROR; <br>    HRESULT     hrT                 = NOERROR; <br>    LPMESSAGE   lpReportEnvelope    = NULL; <br>    LPMESSAGE   lpReport            = NULL; <br>    LPTSTR      lpszDisplayName     = NULL; <br>    ULONG       cbeid               = 0; <br>    LPENTRYID   lpeid               = NULL; <br>    FILETIME    ft                  = {0}; <br>    SPropValue  rgProps[3]          = {0}; <br> <br>    DEBUGPUBLIC("HrSendNRN()\n"); <br> <br>    hr = CHK_HrSendNRN( <br>        lpAdrBook, <br>        lpFolder, <br>        lpEnvelope, <br>        lpMessage); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    hr = HrBuildSampleRNSender( <br>        lpEnvelope, <br>        lpAdrBook, <br>        &amp;lpszDisplayName, <br>        &amp;cbeid, <br>        &amp;lpeid); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    GetSystemTimeAsFileTime( &amp;ft); <br> <br>    rgProps[0].ulPropTag     = PR_RCVD_REPRESENTING_NAME; <br>    rgProps[0].Value.LPSZ    = lpszDisplayName; <br> <br>    rgProps[1].ulPropTag     = PR_RCVD_REPRESENTING_ENTRYID; <br>    rgProps[1].Value.bin.cb  = cbeid; <br>    rgProps[1].Value.bin.lpb = (LPBYTE)lpeid; <br> <br>    rgProps[2].ulPropTag     = PR_CLIENT_SUBMIT_TIME; <br>    rgProps[2].Value.ft      = ft; <br> <br>     hrT = MAPICALL(lpMessage)-&gt;SetProps( <br>        lpMessage, <br>        3, <br>        rgProps, <br>        NULL); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrEDKCreateNonReadNotificationReport( <br>        lpFolder, <br>        lpMessage, <br>        TEXT("sample report text"), <br>        0, <br>        0, <br>        &amp;lpReportEnvelope, <br>        &amp;lpReport); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    // Submit report <br>    hrT = MAPICALL(lpReportEnvelope)-&gt;SubmitMessage(lpReportEnvelope, FORCE_SUBMIT); <br> <br>    if(FAILED(hrT)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    MAPIFREEBUFFER(lpszDisplayName); <br> <br>    MAPIFREEBUFFER(lpeid); <br> <br>    ULRELEASE(lpReport); <br> <br>    ULRELEASE(lpReportEnvelope); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrSendReport--------------------------------------------------------------- <br>// <br>//  Send a report to the originator of the message. <br>// <br>// ----------------------------------------------------------------------------- <br>HRESULT HrSendReport(                   // RETURNS: return code <br>    IN LPADRBOOK lpAdrBook,             // pointer to address book <br>    IN LPMESSAGE lpMessage,             // pointer to message <br>    IN LPMESSAGE lpEnvelope)            // pointer to envelope <br>{ <br>    HRESULT  hr              = NOERROR; <br>    ULONG    ulReportType    = 0; <br>    ULONG    cbSubject       = 0; <br>    LPTSTR   lpszSubject     = NULL; <br>    LPTSTR   lpszNullSubject = TEXT("NULL"); <br> <br>    hr = CHK_HrSendReport( <br>        lpAdrBook, <br>        lpMessage, <br>        lpEnvelope); <br> <br>    if(FAILED(hr)) <br>        RETURN(hr); <br> <br>    hr = HrMAPIGetPropString( <br>        (LPMAPIPROP)lpMessage, <br>        PR_SUBJECT, <br>        &amp;cbSubject, <br>        (void **)&amp;lpszSubject); <br> <br>    if(FAILED(hr) &amp;&amp; (hr != MAPI_E_NOT_FOUND)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    if(lpszSubject == NULL) <br>    { <br>        lpszSubject = lpszNullSubject; <br>    } <br> <br>    // <br>    // Determine which type of report to return to the originator. <br>    // <br> <br>    ulReportType = UlMakeReportType(lpszSubject); <br> <br>    // <br>    // Send the report. <br>    // <br> <br>    switch(ulReportType) <br>    { <br>    case NDR: <br>        hr = HrSendNDR( <br>            lpAdrBook, <br>            lpMtsInFolder, <br>            lpEnvelope, <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>        break; <br>    case DR: <br>        hr = HrSendDR( <br>            lpAdrBook, <br>            lpMtsInFolder, <br>            lpEnvelope, <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>        break; <br>    case RN: <br>        hr = HrSendRN( <br>            lpAdrBook, <br>            lpMtsInFolder, <br>            lpEnvelope, <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>        break; <br>    case NRN: <br>        hr = HrSendNRN( <br>            lpAdrBook, <br>            lpMtsInFolder, <br>            lpEnvelope, <br>            lpMessage); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br>        break; <br>    default: <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    if(lpszSubject != lpszNullSubject) <br>    { <br>        MAPIFREEBUFFER(lpszSubject); <br>    } <br> <br>    RETURN(hr); <br>} <br> <br>//$--Process-------------------------------------------------------------------- <br>//  Process messages arriving at MTS-OUT. <br>// ----------------------------------------------------------------------------- <br>DWORD Process( <br>    IN LPVOID lpParameter) <br>{ <br>    HRESULT      hr                 = NOERROR; <br>    HRESULT      hrT                = 0; <br>    ULONG        i                  = 0; <br>    ULONG        cRows              = 0; <br>    ULONG        cValues            = 0; <br>    ULONG        ulObjType          = 0; <br> <br>    LPADRBOOK    lpAdrBook          = NULL; <br> <br>    LPMESSAGE    lpMessage          = NULL; <br>    LPMESSAGE    lpEnvelope         = NULL; <br>    LPATTACH     lpAttach           = NULL; <br> <br>    ULONG        cbeid              = 0; <br>    LPENTRYID    lpeid              = NULL; <br> <br>    LPTSTR       pszMessageClass    = NULL; <br>    ULONG        cbMessageClass     = 0; <br> <br>    LPSPropValue lpProps            = NULL; <br> <br> <br>    cRows = GetGWSRowSet(lpParameter)-&gt;cRows; <br> <br>    // Open the Address Book <br>    hrT = MAPICALL(lpSession)-&gt;OpenAddressBook( <br>        lpSession, <br>        0, <br>        NULL,  <br>        AB_NO_DIALOG, <br>        &amp;lpAdrBook); <br> <br>    if(FAILED(hrT))                  <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    for(i = 0; i &lt; cRows; i++) <br>    { <br>        cValues = GetGWSRowSet(lpParameter)-&gt;aRow[i].cValues; <br> <br>        lpProps = GetGWSRowSet(lpParameter)-&gt;aRow[i].lpProps; <br> <br>        cbeid = lpProps[0].Value.bin.cb; <br>        lpeid = (LPENTRYID)lpProps[0].Value.bin.lpb; <br> <br>        // Get the message in the MTS-OUT folder <br>        hrT = MAPICALL(lpMtsOutFolder)-&gt;OpenEntry( <br>            lpMtsOutFolder, <br>            cbeid, <br>            lpeid, <br>            NULL, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            &amp;ulObjType, <br>            (LPUNKNOWN FAR *)&amp;lpEnvelope); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        if(ulObjType != MAPI_MESSAGE) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // Get the attachment in the envelope <br>        hrT = MAPICALL(lpEnvelope)-&gt;OpenAttach( <br>            lpEnvelope, <br>            0, <br>            NULL, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            &amp;lpAttach); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // Open a message interface on the attachment <br>        hrT = MAPICALL(lpAttach)-&gt;OpenProperty( <br>            lpAttach, <br>            PR_ATTACH_DATA_OBJ, <br>            (LPIID)&amp;IID_IMessage, <br>            0, <br>            MAPI_MODIFY|MAPI_DEFERRED_ERRORS, <br>            (LPUNKNOWN *)&amp;lpMessage); <br> <br>        if(FAILED(hrT)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br> <br>        (void)HrSendReport(lpAdrBook, lpMessage, lpEnvelope); <br> <br>        // --------------------------------------------------------------------- <br> <br>        ULRELEASE(lpMessage); <br> <br>        ULRELEASE(lpAttach); <br> <br>        ULRELEASE(lpEnvelope); <br> <br>        // --------------------------------------------------------------------- <br> <br>        hr = HrMAPIDeleteMessage( </code></pre>
<p>
</p>
<pre><code>lpMtsOutFolder, <br>            cbeid, <br>            lpeid); <br> <br>        if(FAILED(hr)) <br>        { <br>            hr = HR_LOG(E_FAIL); <br>            goto cleanup; <br>        } <br> <br>        // --------------------------------------------------------------------- <br>    } <br> <br>cleanup: <br> <br>    ULRELEASE(lpAttach); <br> <br>    ULRELEASE(lpMessage); <br> <br>    ULRELEASE(lpEnvelope); <br> <br>    MAPIFREEBUFFER(pszMessageClass); <br> <br>    ULRELEASE(lpAdrBook); <br> <br>    RETURN(0); <br>} <br> <br>//$--GWMain---------------------------------------------------------------- <br>//  Start threads. <br>// ----------------------------------------------------------------------------- <br>void GWMain( <br>    void) <br>{ <br>    HRESULT               hr                     = NOERROR; <br>    EDK_SERVICE_CONTROL_T sc                     = 0; <br>    DWORD                 dwRet                  = 0; <br>    CHAR                  szTempPath[MAX_PATH+1] = {0}; <br> <br>    dwRet = GetTempPath(MAX_PATH, szTempPath); <br> <br>    if((dwRet == 0) || (dwRet &gt; MAX_PATH)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>    hr = HrGWStartNewMailHandler( <br>        1000, <br>        (ULONG)-1, <br>        1, <br>        1, <br>        EXCHANGE_ADDRTYPE,// Currently "EX" <br>        szTempPath, <br>        (LPTHREAD_START_ROUTINE)Process); <br> <br>    if(FAILED(hr)) <br>    { <br>        hr = HR_LOG(E_FAIL); <br>        goto cleanup; <br>    } <br> <br>cleanup: <br> <br>    if(FAILED(hr)) <br>    { <br>        ServiceStop(); <br>    } <br> <br>    // <br>    // Wait for a request for the service to stop. <br>    // <br> <br>    hr = HR_LOG(HrServiceWaitForStop(INFINITE, &amp;sc)); <br> <br>    return; <br>} <br> <br>//$--HrGWLogon------------------------------------------------------------- <br>//  Logon to the gateway. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWLogon(void) <br>{ <br>    HRESULT hr = NOERROR; <br> <br>    lpSession      = GetGWSession(); <br>    lpStore        = GetGWDefaultStore(); <br>    lpRootFolder   = GetGWRootFolder(); <br>    lpMtsInFolder  = GetGWMtsInFolder(); <br>    lpMtsOutFolder = GetGWMtsOutFolder(); <br>    cbGalEid       = GetGWGALEntryIdSize(); <br>    lpGalEid       = GetGWGALEntryId(); <br> <br>    RETURN(hr); <br>} <br> <br>//$--HrGWLogoff------------------------------------------------------------ <br>//  Logoff of the gateway. <br>// ----------------------------------------------------------------------------- <br>HRESULT HrGWLogoff(void) <br>{ <br>    HRESULT hr = NOERROR; <br>             <br>    RETURN(hr); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMBADMIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1984"></a>SMBADMIN.CPP</h2>
<pre><code>// ----------------------------------------------------------------------------- <br>// SMBADMIN.cpp : Implements an Exchange Administration property sheet dialog. <br>// <br>// Copyright (C) Microsoft Corp. 1986-1996.  All Rights Reserved. <br>// ----------------------------------------------------------------------------- <br> <br>#include "edkafx.h" <br>#include "SMBADMIN.h" <br>#include "errcpp.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define MAX_STR_BUF 200 <br> <br>// ----------------------------------------------------------------------------- <br> <br>BEGIN_MESSAGE_MAP(CSMBAdminDlg, CAdminDialog) <br>//{{AFX_MSG_MAP(CSMBAdminDlg) <br>ON_EN_CHANGE(IDC_EDIT_POLL_INBOX_MSEC, OnEnChange) <br>ON_BN_CLICKED(IDC_CHECK_CONTACT, OnBnClicked) <br>ON_EN_CHANGE(IDC_EDIT_TOPIC_ROOT_FOLDER_COMMENT, OnEnChange) <br>ON_BN_CLICKED(IDC_CHECK_CREATE, OnBnClicked) <br>ON_BN_CLICKED(IDC_CHECK_DELETE, OnBnClicked) <br>ON_BN_CLICKED(IDC_CHECK_OWNER, OnBnClicked) <br>ON_BN_CLICKED(IDC_CHECK_PUBLIC_TOPIC_FOLDER, OnFolderBnClicked) <br>ON_BN_CLICKED(IDC_CHECK_READ, OnBnClicked) <br>ON_BN_CLICKED(IDC_CHECK_WRITE, OnBnClicked) <br>ON_EN_CHANGE(IDC_EDIT_TOPIC_ROOT_FOLDER_NAME, OnEnChange) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>//$--CSMBAdminDlg::OnEnChange()------------------------------------------------- <br>// Called when an edit control is changed. <br>// ----------------------------------------------------------------------------- <br> <br>void CSMBAdminDlg::OnEnChange()  <br>{ <br>    if( !m_bRefresh) <br>        DataHasChanged(); <br>} <br> <br>//$--CSMBAdminDlg::OnFolderBnClicked()------------------------------------------ <br>// Called when public store check box is changed. <br>// ----------------------------------------------------------------------------- <br> <br>void CSMBAdminDlg::OnFolderBnClicked()  <br>{ <br>    BOOL bPublicTopic = m_chkboxPublicTopicFolder.GetCheck(); <br> <br>    m_chkboxRead.EnableWindow(    bPublicTopic); <br>    m_chkboxWrite.EnableWindow(   bPublicTopic); <br>    m_chkboxCreate.EnableWindow(  bPublicTopic); <br>    m_chkboxDelete.EnableWindow(  bPublicTopic); <br>    m_chkboxOwner.EnableWindow(   bPublicTopic); <br>    m_chkboxContact.EnableWindow( bPublicTopic); <br>     <br>    if( !m_bRefresh) <br>        DataHasChanged(); <br>} <br> <br>//$--CSMBAdminDlg::OnBnClicked()------------------------------------------------ <br>// Called when a check box is changed. <br>// ----------------------------------------------------------------------------- <br> <br>void CSMBAdminDlg::OnBnClicked()  <br>{ <br>    static BOOL bWarnedUser = FALSE; <br> <br>    if( !bWarnedUser) <br>    { <br>        MessageBox2( <br>            IDS_WARNING_ACL_CHANGE, <br>            IDS_MESSAGE_BOX_WARNING, <br>            MB_ICONEXCLAMATION | MB_OK); <br> <br>        bWarnedUser = TRUE; <br>    } <br>         <br>    if( !m_bRefresh) <br>        DataHasChanged(); <br>} <br> <br>//$--CSMBAdminDlg::bHasHelp()--------------------------------------------------- <br>// Called to determine if you supply help.  Return TRUE if you do. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::bHasHelp() <br>{ <br>    return( TRUE); <br>} <br>     <br>//$--CSMBAdminDlg::DoHelp()----------------------------------------------------- <br>// Called to start help. <br>// ----------------------------------------------------------------------------- <br>     <br>VOID CSMBAdminDlg::DoHelp() <br>{ <br>    CHAR szDllPath[MAX_PATH+1] = {0}; <br>    DWORD cchDllPath = 0; <br> <br>    // Get the path and file name of this DLL. <br> <br>    cchDllPath = GetModuleFileName( <br>        (HMODULE)(AfxGetInstanceHandle()),  <br>        szDllPath,  <br>        sizeof(szDllPath) - 1); <br> <br>    // If we got back something that ends in ".DLL", then change the  <br>    // extension to ".HLP" and call it as the help file. <br> <br>    if (cchDllPath &gt;=4 &amp;&amp; !stricmp(&amp;szDllPath[cchDllPath-4],".DLL")) <br>    { <br>        strcpy(&amp;szDllPath[cchDllPath-4], ".HLP"); <br>        ::WinHelp( GetSafeHwnd(), szDllPath, HELP_CONTENTS, 0); <br>    } <br> <br>    // Otherwise it's an error. <br> <br>    else <br>    { <br>        MODULE_WARNING( <br>            "GWPERF_DLL_ENTRY_MODULE_NAME: GetModuleFileName() failed."); <br>    } <br>} <br> <br>//$--CSMBAdminDlg::Refresh()---------------------------------------------------- <br>// Called so that property sheet can refresh with data that may have been  <br>// changed by another property sheet.  Even though this DLL does not have more  <br>// than one property sheet that modifies the same data fields the Exchange SDK  <br>// provides a sample that lets an Administrator view and modify any Exchange  <br>// SDK packed extension data array. <br>// ----------------------------------------------------------------------------- <br> <br>void CSMBAdminDlg::Refresh() <br>{ <br>    BOOL bPublicTopic = FALSE; <br> <br>    // While in refresh mode we do not want to the enable the APPLY <br>    // button if we are just repainting the screen. <br>    m_bRefresh = TRUE; <br> <br>    // So initialize controls. <br>    SetDlgItemText( IDC_EDIT_TOPIC_ROOT_FOLDER_NAME,    GetExtString( IDX_TOPIC_ROOT_FOLDER_NAME)); <br>    SetDlgItemText( IDC_EDIT_TOPIC_ROOT_FOLDER_COMMENT, GetExtString( IDX_TOPIC_ROOT_FOLDER_COMMENT)); <br> <br>    // Display the inbox polling frequency. <br>    char szBuf[ 20]; <br>    DWORD dwPollFreq = GetExtDWord( IDX_POLL_INBOX_MSEC); <br>    if( dwPollFreq == INFINITE) <br>        SetDlgItemText( IDC_EDIT_POLL_INBOX_MSEC, "NONE");     <br>    else <br>    {   // Display the non infinite polling frequency as a number. <br>        wsprintf( szBuf, "%lu", dwPollFreq); <br>        SetDlgItemText( IDC_EDIT_POLL_INBOX_MSEC, szBuf); <br>    } <br>         <br>    // Set check for public folders. <br>    bPublicTopic = GetExtBool( IDX_PUBLIC_TOPIC_FOLDER); <br> <br>    m_chkboxPublicTopicFolder.SetCheck( bPublicTopic); <br> <br>    // Set all of the ACL Rights check boxes. <br>    DWORD dwACLrights = GetExtDWord( IDX_ACL_RIGHTS); <br> <br>    m_chkboxRead.SetCheck(    dwACLrights &amp; frightsReadAny); <br>    m_chkboxWrite.SetCheck(   dwACLrights &amp; frightsEditAny); <br>    m_chkboxCreate.SetCheck(  dwACLrights &amp; frightsCreate); <br>    m_chkboxDelete.SetCheck(  dwACLrights &amp; frightsDeleteAny); <br>    m_chkboxOwner.SetCheck(   dwACLrights &amp; frightsOwner); <br>    m_chkboxContact.SetCheck( dwACLrights &amp; frightsContact); <br>     <br>    m_chkboxRead.EnableWindow(    bPublicTopic); <br>    m_chkboxWrite.EnableWindow(   bPublicTopic); <br>    m_chkboxCreate.EnableWindow(  bPublicTopic); <br>    m_chkboxDelete.EnableWindow(  bPublicTopic); <br>    m_chkboxOwner.EnableWindow(   bPublicTopic); <br>    m_chkboxContact.EnableWindow( bPublicTopic); <br>     <br>    // Ending refresh mode. <br>    m_bRefresh = FALSE; <br>} <br> <br>//$--CSMBAdminDlg::OnInitDialog()----------------------------------------------- <br>// Initialize the dialog with extension data.  Create extension data if necessary. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::OnInitDialog()  <br>{ <br>CAdminDialog::OnInitDialog(); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Subclass all controls. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_TOPIC_ROOT_FOLDER_NAME,    m_editTopicRootFolderName))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_TOPIC_ROOT_FOLDER_COMMENT, m_editTopicRootFolderComment))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_EDIT_POLL_INBOX_MSEC,           m_editPollInboxMSec))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_PUBLIC_TOPIC_FOLDER,      m_chkboxPublicTopicFolder))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_READ,    m_chkboxRead))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_WRITE,   m_chkboxWrite))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_CREATE,  m_chkboxCreate))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_DELETE,  m_chkboxDelete))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_OWNER,   m_chkboxOwner))) <br>        return( TRUE); <br> <br>    if( FAILED( HrSubclassWindow( IDC_CHECK_CONTACT, m_chkboxContact))) <br>        return( TRUE); <br> <br>    // Limit the amount of text a tester can enter into  <br>    // the string controls to a reasonable limit. <br>    m_editTopicRootFolderName.LimitText( MAX_TOPIC_STRING); <br>    m_editTopicRootFolderComment.LimitText( MAX_TOPIC_STRING); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// Initialize the extension data to defaults if it does not exist. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br> <br>    // Is extension data available?  <br>    if( GetExtCount() == 0) <br>    {   // NO, extension data is not available so set the  <br>        // memory copy of this to the defaults. <br> <br>        // The following text string pointers are cast as LONGLONG here because  <br>        // a bug in the MIPS C++ compiler causes problems if we try to do the cast  <br>        // inside the ExtensionProps structure. <br> <br>        static const LONGLONG llszDfltFolderName    = (LONGLONG) TEXT("Topics"); <br>        static const LONGLONG llszDfltFolderComment = (LONGLONG) TEXT("Root Topic Folder"); <br> <br>        static SInitPropValue ExtensionProps[] = <br>        { <br>            { PT_BOOLEAN, 0, TRUE},           // Public folder (TRUE or FALSE) <br>            { PT_LONG,    0, 60000},          // Polling frequency. <br>            { PT_LONG,    0, frightsReadAny}, // Public folder Access Control List settings. <br>            { PT_STRING8, 0, llszDfltFolderName},  <br>            { PT_STRING8, 0, llszDfltFolderComment}, <br>        }; <br>     <br>        // Initialize the property value array used to create the extension data blob. <br>        if( FAILED( HrSetExtProps( ARRAY_CNT( ExtensionProps), ExtensionProps))) <br>            return( TRUE); <br> <br>        // Save it in Admin's memory buffer as well. <br>        CAdminDialog::bSaveData(); <br>    } <br>     <br>    return( TRUE);  // return TRUE unless you set the focus to a control <br>} <br> <br>//$--CSMBAdminDlg::bIsValidString()--------------------------------------------- <br>// Validate that a string is not empty and modify the extension data property <br>// in memory. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::bIsValidString(  <br>    IN ULONG iProp,         // Index of property <br>    IN CEditExt&amp; editCtrl)  // Edit control containing data to validate. <br>{ <br>    CString str = editCtrl.GetString(); <br>    if( str.GetLength() == 0) <br>    { <br>        InvalidEntry( IDS_INVALID_STRING, editCtrl); <br>        return( FALSE); <br>    } <br>    CHRESULT hr = HrModExtString( iProp, str); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    return( TRUE); <br>} <br> <br>//$--CSMBAdminDlg::bIsValidULong()---------------------------------------------- <br>// Validate that a ulong is within a specified range and modify the extension  <br>// data property in memory. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::bIsValidULong( <br>    IN ULONG     iProp,         // Index of property <br>    IN CEditExt&amp; editCtrl,  // Edit control containing data to validate. <br>    IN ULONG     ulLow, <br>    IN ULONG     ulHigh, <br>    IN int       idErrMsg) <br>{ <br>    ULONG ul = editCtrl.GetULong(); <br>    if( ul &lt; ulLow || ul &gt; ulHigh) <br>    { <br>        InvalidEntry( idErrMsg, editCtrl); <br>        return( FALSE); <br>    } <br>    CHRESULT hr = HrModExtDWord( iProp, ul); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    return( TRUE); <br>} <br> <br>//$--CSMBAdminDlg::bSaveData()-------------------------------------------------- <br>// Called when a different property sheet has been selected or when either the  <br>// OK or APPLY NOW button is pressed.  Returns TRUE if data has been validated <br>// and saved. <br>// <br>// When we call the CAdminDialog::bSaveData() function it gets saved in an <br>// admin memory space.  This makes it available to other property sheets that <br>// might be viewing the same data. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::bSaveData() <br>{ <br>    CHRESULT hr; <br>    TCHAR szBuf[ MAX_STR_BUF]; <br>     <br>    // Validate and modify the topic root folder name in memory. <br>    if( !bIsValidString( IDX_TOPIC_ROOT_FOLDER_NAME, m_editTopicRootFolderName)) <br>        return( FALSE); <br> <br>    // Modify the topic root folder comment in memory. <br>    CString str = m_editTopicRootFolderComment.GetString(); <br>    hr = HrModExtString( IDX_TOPIC_ROOT_FOLDER_COMMENT, str); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>    // Modify the polling frequency in memory. <br>    m_editPollInboxMSec.GetLine( 0, szBuf, sizeof( szBuf)); <br>    if( _tcsicmp( szBuf, TEXT( "NONE")) == 0) <br>    { <br>        hr = HrModExtDWord( IDX_POLL_INBOX_MSEC, INFINITE); <br>        if( FAILED( hr)) <br>            return( FALSE); <br>    } <br>    else <br>        if( !bIsValidULong( IDX_POLL_INBOX_MSEC, m_editPollInboxMSec, 60000, MAX_ULONG, IDS_INVALID_POLLING_FREQUENCY)) <br>            return( FALSE); <br>      <br>    // Modify the public topic folder flag. <br>    hr = HrModExtBool( IDX_PUBLIC_TOPIC_FOLDER, m_chkboxPublicTopicFolder.GetCheck()); <br>    if( FAILED( hr)) <br>        return( FALSE); <br>     <br>    // Modify the ACL rights in memory. <br>    DWORD dwACLrights =  <br>        (m_chkboxRead.GetCheck()    * frightsReadAny) |   <br>        (m_chkboxWrite.GetCheck()   * frightsEditAny) |   <br>        (m_chkboxCreate.GetCheck()  * frightsCreate) |    <br>        (m_chkboxDelete.GetCheck()  * frightsDeleteAny) | <br>        (m_chkboxOwner.GetCheck()   * frightsOwner) |     <br>        (m_chkboxContact.GetCheck() * frightsContact);    <br>    hr = HrModExtDWord( IDX_ACL_RIGHTS, dwACLrights); <br>    if( FAILED( hr)) <br>        return( FALSE); <br> <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <br>// We are complete, the data is valid, so lets save it. <br>// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -     <br>    return( CAdminDialog::bSaveData()); <br>} <br> <br>//$--CSMBAdminDlg::bCommitData()------------------------------------------------ <br>// Called when either the OK or APPLY NOW button is pressed and after bSaveData(). <br>// Return TRUE if it is OK to commit the saved data. <br>// ----------------------------------------------------------------------------- <br> <br>BOOL CSMBAdminDlg::bCommitData() <br>{ <br>    return( TRUE); <br>} <br>     <br>// ----------------------------------------------------------------------------- <br>// Admin will call this function directly (it is not a member function).  It is <br>// called once for each standard property sheet.  We have the option to keep one <br>// or more of the standard property sheets from showing. <br>// ----------------------------------------------------------------------------- <br>/* <br>BOOL PASCAL bShowPage( UINT iddAdminPage) <br>{ <br>    BOOL bRet = TRUE;   // Show the standard property sheet. <br>    return( bRet); <br>} <br> <br>// $--iStartPage()-------------------------------------------------------------- <br>// This function is called once durring initialization.  Return -1 to cause the  <br>// first standard property sheet to be displayed.  Or return the index of one of  <br>// our property sheets to have it come up first. <br>// ----------------------------------------------------------------------------- <br> <br>INT PASCAL iStartPage( void) <br>{ <br>    int i = -1; // Default to the first standard property sheet. <br>    return( i); <br>} <br>*/ <br>// ----------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

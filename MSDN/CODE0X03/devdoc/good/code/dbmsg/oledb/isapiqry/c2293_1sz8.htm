<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCLIENT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2294"></a>DOCLIENT.H</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB ISAPI Sample <br>// Copyight(c) 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module DOCLIENT.H | Headers for DOCLIENT.CPP <br>// <br>// @rev 1 | 06-11-96 | Created <br>// <br> <br>#include &lt;afxisapi.h&gt; <br>//Constants <br>#define MAXBUFLEN256//display buffer size <br>#define MAXDATALEN25//maximum data length per column <br>#define NUMROWS_CHUNK20                    // Number of Rows to Grab at a Time <br>#define DEFAULT_CBMAXLENGTH40                    // cbMaxLength for binding <br>#define COLUMN_ALIGNVAL8 <br>#define MAX_ROW_SIZE1000 <br>#define NUMBER_OF_PROPERTY_SETS1 <br> <br> <br>#define ROUND_UP( Size, Amount ) (((DWORD)(Size) +  ((Amount) - 1)) &amp; ~((Amount) - 1)) <br>//Data Structures **************************************************************** <br>struct COLUMNDATA  <br>{ <br>DWORDdwLength;// length of data (not space allocated) <br>DBSTATUSwStatus;// status of column <br>SHORT       wReserved;  // padding <br>BYTEbData[1];// data here and beyond <br>}; <br> <br> <br>//Exposed Functions **************************************************************** <br>HRESULT GetAndWrite <br>( <br>IRowset*pIRowset, <br>ULONG   cMaxRowSize, <br>    HACCESSOR   hAccessor, <br>    DBBINDING*rgBind,     <br>    ULONGcBind,     <br>    DBCOLUMNINFO*pColumnInfo,   <br>    ULONGcCol, <br>CHttpServerContext* pCtxt <br>); <br> <br> <br>HRESULT ConnectDB  <br>( <br>IDBCreateCommand **ppIDBCreateCommand_out,    //@param | <br>LPCSTR pstrDNS,                                //@param | Login Inforamtion  <br>LPCSTR pstrUserName,                           //@param | Login Inforamtion <br>LPCSTR pstrPassword,                           //@param | Login Inforamtion <br>CHttpServerContext* pCtxt   //@param|  <br>); <br>  <br> <br>HRESULT SetAndExecute  <br>( <br>WCHAR * wszSQLCommand,                   //@param  IN  | SQL command <br>IDBCreateCommand * pIDBCreateCommand,    //@param  IN  |   <br>IRowset**  ppIRowset_out,                //@param  OUT | Pointer to set of rows  <br>DBCOLUMNINFO ** ppColumnInfo_out,        //@param  OUT | array of DBCOLUMNINFO structures  <br>WCHAR ** ppStringBuffer_out, <br>ULONG * pcCol,                           //@param  OUT | Number of columns   <br>DBBINDING ** rgBind,                     //@param      <br>ULONG * pcBind,                          //@param     <br>HACCESSOR * phAccessor,                  //@param     <br>ULONG * pcbMaxRowSize,                   //@param     <br>CHttpServerContext* pCtxt     //@param  IN | Server Context <br>); <br> <br> void FreeEnvironment  <br>( <br>IRowset*pIRowset,                //@param IN | Pointer to set of rows  <br>HACCESSOR   hAccessor, //@param IN | Accessor Handle <br>DBCOLUMNINFO*pColumnInfo,  //@param IN | DBCOLUMNINFO array pointer  <br>WCHAR * pStringBuffer                    //@param IN | String Buffer contining the info about columns <br>); <br> <br> <br> <br>//Internal functions ************************************************************ <br>void PrintErrorInfo  <br>( <br>IUnknown * pBadObject,                  //@param IN | Pointer to the object where error happened <br>REFIID IID_BadIntereface,          //@param IN | Interface that caused the error <br>CHttpServerContext* pCtxt//@param IN | Output place <br>); <br> <br>HRESULT SetInitializationData  <br>( <br>LPCSTR pstrDNS,//@param IN  | DNS Name <br>LPCSTR pstrUserName,//@param IN  | User Name <br>LPCSTR pstrPassword,//@param IN  | Passwd <br>DBPROPSET rgPropertySet[],//@param OUT | Array of propery sets (only one) <br>CHttpServerContext* pCtxt//@param IN  | Web page context <br>); <br> <br>HRESULT SetupBindings <br>( <br>ULONG cCol, <br>DBCOLUMNINFO*pColumnInfo, <br>DBBINDING*rgBind_out, <br>ULONG*pcBind_out, <br>ULONG*pcMaxRowSize_out <br>); <br> <br> <br>HRESULT CleanupRowset <br>( <br>IRowset*pIRowset, <br>HACCESSOR hAccessor <br>); <br> <br> <br>void DumpRow <br>( <br>    DBBINDING* rgBind, <br>    ULONGcBind, <br>    BYTE* pData, <br>CHttpServerContext* pCtxt <br>); </code></pre>
<p>&nbsp;</p></body>
</HTML>

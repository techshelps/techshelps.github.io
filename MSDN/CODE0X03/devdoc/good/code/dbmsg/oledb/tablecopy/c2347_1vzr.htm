<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TABLECOPY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2367"></a>TABLECOPY.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module TABLECOPY.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>///////////////////////////////////////////////////////////////// <br>#define DBINITCONSTANTS  //Initilaizes OLEDB Guids / Constants <br> <br>#include "winmain.h" <br>#include "common.h" <br>#include "tablecopy.h" <br>#include "table.h" <br>#include "wizard.h" <br> <br>#include "msdasql.h"//CLSID_MSDASQL provider guid <br> <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// CTableCopy::CTableCopy <br>// <br>///////////////////////////////////////////////////////////////// <br>CTableCopy::CTableCopy(CWizard* pCWizard) <br>{ <br>ASSERT(pCWizard); <br> <br>m_pCFromTable= new CTable(pCWizard); <br>m_pCToTable= new CTable(pCWizard); <br> <br>m_dwShowTypes= SHOW_TABLES;  //Default to just user Tables in the DSN <br> <br>//Options <br>m_fShowQuery= FALSE; <br> <br>//Copy Options <br>m_dwRowOpt= IDR_ALL_ROWS; <br>m_ulMaxRows= MAX_BLOCK_SIZE; <br> <br>m_dwParamOpt= IDR_PARAM_SETS; <br>m_ulParamSets= 10; <br> <br>m_dwBlobOpt= IDR_BLOB_SIZE; <br>m_ulBlobSize= MAX_COL_SIZE; <br> <br>//Create Options <br>m_fCopyTables= TRUE; <br>m_fCopyIndexes= TRUE; <br> <br>m_fTranslate= TRUE; <br>m_pCWizard= pCWizard;  //Back pointer to windowing class <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// CTableCopy::~CTableCopy <br>// <br>///////////////////////////////////////////////////////////////// <br>CTableCopy::~CTableCopy() <br>{ <br>delete m_pCFromTable; <br>delete m_pCToTable; <br>} <br> <br> <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// HRESULT CTableCopy::MapTypes <br>// <br>///////////////////////////////////////////////////////////////// <br>HRESULT CTableCopy::MapTypes() <br>{ <br>HRESULT hr = S_OK; <br> <br>// Get descriptions of each column in the Source Table <br>TESTC(hr = m_pCFromTable-&gt;GetColInfo()); <br> <br>//Now get the TypeInfo for all columns <br>TESTC(hr = m_pCFromTable-&gt;GetTypeInfo());   <br> <br>//Now map all the Types correctly from the Source to the Target <br>TESTC(hr = m_pCToTable-&gt;MapTableInfo(m_pCFromTable)); <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// HRESULT CTableCopy::CreateTable <br>// <br>///////////////////////////////////////////////////////////////// <br>HRESULT CTableCopy::CreateTable() <br>{ <br>HRESULT hr = S_OK; <br> <br>// Create the Table (if desired) <br>if(m_fCopyTables) <br>{ <br>TESTC(hr = m_pCToTable-&gt;CreateTable()); <br>TESTC(hr = m_pCToTable-&gt;GetColInfo()); <br>} <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////// <br>// HRESULT CTableCopy::CreateIndexes <br>// <br>/////////////////////////////////////////////////////////////////////// <br>HRESULT CTableCopy::CreateIndexes() <br>{ <br>HRESULT hr = S_OK; <br> <br>// Create the indexes (if desired) <br>if(m_fCopyIndexes) <br>TESTC(hr = m_pCToTable-&gt;CopyIndexes(m_pCFromTable)); <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br> <br>/////////////////////////////////////////////////////////////////////// <br>// HRESULT CTableCopy::CopyData <br>// <br>/////////////////////////////////////////////////////////////////////// <br>HRESULT CTableCopy::CopyData(ULONG* pcRows) <br>{ <br>ASSERT(pcRows); <br>HRESULT hr = S_OK; <br> <br>//If MaxRows is specified, then copy upto number specified, otherwise  <br>//indicate ULONG_MAX to mean all rows, (upto ULONG_MAX) <br>*pcRows= (m_dwRowOpt == IDR_MAX_ROWS) ? m_ulMaxRows : ULONG_MAX; <br> <br>//If ParamSets are specified then use the ParamSet size, otherwise  <br>//indicate 0 to mean no param sets <br>ULONG ulParamSets= (m_dwParamOpt == IDR_PARAM_SETS) ? m_ulParamSets : 0; <br> <br>//If BlobSize is specified then use the Specified size, otherwise  <br>//indicate ULONG_MAX to use ISequentialStream <br>ULONG ulBlobSize= (m_dwBlobOpt == IDR_BLOB_SIZE) ? m_ulBlobSize : ULONG_MAX; <br> <br>//Copy the Data from the Source to the Target table <br>TESTC(hr = m_pCToTable-&gt;CopyData(m_pCFromTable, pcRows, ulParamSets, ulBlobSize)); <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////// <br>// HRESULT CTableCopy::CopyTables <br>// <br>/////////////////////////////////////////////////////////////////////// <br>HRESULT CTableCopy::CopyTables() <br>{ <br>HRESULT hr; <br>ULONG cRows = 0; <br> <br>//MapTypes should have already been called <br>ASSERT(m_pCFromTable-&gt;m_rgColDesc); <br>ASSERT(m_pCToTable-&gt;m_rgColDesc); <br> <br>//Create the new Table <br>TESTC(hr = CreateTable()); <br> <br>//Create the Indexes <br>TESTC(hr = CreateIndexes()); <br> <br>//Now Copy the Data <br>TESTC(hr = CopyData(&amp;cRows)); <br> <br>CLEANUP: <br>if(SUCCEEDED(hr)) <br>wMessageBox(NULL, MB_ICONINFORMATION | MB_OK, wsz_SUCCESS, wsz_COPY_SUCCESS, cRows); <br>else <br>wMessageBox(NULL, MB_ICONEXCLAMATION | MB_OK, wsz_ERROR, wsz_COPY_FAILURE); <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ERROR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2351"></a>ERROR.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright 1996 - 1998 Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module ERROR.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br>//////////////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>//////////////////////////////////////////////////////////////////////// <br> <br>#define OLEDBVER 0x0200 <br> <br>#include "WinMain.h" <br>#include "Error.h" <br> <br>#include &lt;olectl.h&gt;  // IConnectionPoints interface <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// Defines <br>// <br>//////////////////////////////////////////////////////////////////////// <br> <br>//Displays values like VALUE as   VALUE , L"VALUE" <br>#define VALUE_WCHAR(value) value, L#value <br> <br> <br>typedef struct _INTERFACEMAP <br>{ <br>const IID*pIID;// The sql type value <br>WCHAR*pwszInterface;// Name for display <br>} INTERFACEMAP; <br> <br> <br>INTERFACEMAP rgInterfaceMap[] = <br>{ <br>//IUnknown <br>&amp; VALUE_WCHAR(IID_IUnknown), <br> <br>//TEnumerator <br>&amp; VALUE_WCHAR(IID_IParseDisplayName), <br>&amp; VALUE_WCHAR(IID_ISourcesRowset), <br> <br>//TDataSource <br>&amp; VALUE_WCHAR(IID_IDBInitialize), <br>&amp; VALUE_WCHAR(IID_IDBProperties), <br>&amp; VALUE_WCHAR(IID_IDBCreateSession), <br>&amp; VALUE_WCHAR(IID_IDBInfo), <br>&amp; VALUE_WCHAR(IID_IPersist), <br>&amp; VALUE_WCHAR(IID_IDBDataSourceAdmin), <br>&amp; VALUE_WCHAR(IID_IPersistFile), <br>&amp; VALUE_WCHAR(IID_ISupportErrorInfo), <br> <br>//TSession <br>&amp; VALUE_WCHAR(IID_IGetDataSource), <br>&amp; VALUE_WCHAR(IID_IOpenRowset), <br>&amp; VALUE_WCHAR(IID_ISessionProperties), <br>&amp; VALUE_WCHAR(IID_IDBCreateCommand), <br>&amp; VALUE_WCHAR(IID_IDBSchemaRowset), <br>&amp; VALUE_WCHAR(IID_IIndexDefinition), <br>&amp; VALUE_WCHAR(IID_ITableDefinition), <br>&amp; VALUE_WCHAR(IID_ITransactionJoin), <br>&amp; VALUE_WCHAR(IID_ITransactionLocal), <br>&amp; VALUE_WCHAR(IID_ITransactionObject), <br> <br>//TCommand <br>&amp; VALUE_WCHAR(IID_IAccessor), <br>&amp; VALUE_WCHAR(IID_IColumnsInfo), <br>&amp; VALUE_WCHAR(IID_ICommand), <br>&amp; VALUE_WCHAR(IID_ICommandProperties), <br>&amp; VALUE_WCHAR(IID_ICommandText), <br>&amp; VALUE_WCHAR(IID_IConvertType), <br>&amp; VALUE_WCHAR(IID_IColumnsRowset), <br>&amp; VALUE_WCHAR(IID_ICommandPrepare), <br>&amp; VALUE_WCHAR(IID_ICommandWithParameters), <br> <br>//TRowset <br>&amp; VALUE_WCHAR(IID_IRowset), <br>&amp; VALUE_WCHAR(IID_IRowsetInfo), <br>&amp; VALUE_WCHAR(IID_IColumnsRowset), <br>&amp; VALUE_WCHAR(IID_IConnectionPointContainer), <br>&amp; VALUE_WCHAR(IID_IRowsetChange), <br>&amp; VALUE_WCHAR(IID_IRowsetIdentity), <br>&amp; VALUE_WCHAR(IID_IRowsetLocate), <br>&amp; VALUE_WCHAR(IID_IRowsetResynch), <br>&amp; VALUE_WCHAR(IID_IRowsetScroll), <br>&amp; VALUE_WCHAR(IID_IRowsetUpdate), <br> <br>//TIndex <br>&amp; VALUE_WCHAR(IID_IRowsetIndex), <br> <br>//TError <br>&amp; VALUE_WCHAR(IID_IErrorInfo), <br>&amp; VALUE_WCHAR(IID_IErrorRecords), <br>&amp; VALUE_WCHAR(IID_ISQLErrorInfo), <br>}; <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// WCHAR* GetInterfaceName <br>// <br>//////////////////////////////////////////////////////////////////////// <br>WCHAR* GetInterfaceName(REFIID riid) <br>{ <br>for(ULONG i=0; i&lt;NUMELE(rgInterfaceMap); i++) <br>{ <br>if(riid == *(rgInterfaceMap[i].pIID))  <br>return rgInterfaceMap[i].pwszInterface; <br>} <br> <br>//Otherwise just return IUnknown <br>return rgInterfaceMap[0].pwszInterface; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// ERRORMAP <br>// <br>//////////////////////////////////////////////////////////////////////// <br>typedef struct _ERRORMAP <br>{ <br>HRESULThr;// HRESULT <br>WCHAR*pwszError;// Name <br>} ERRORMAP; <br> <br>ERRORMAP rgErrorMap[] = <br>{ <br> VALUE_WCHAR(NULL), <br> <br> //System Errors <br> VALUE_WCHAR(E_FAIL), <br> VALUE_WCHAR(E_INVALIDARG), <br> VALUE_WCHAR(E_OUTOFMEMORY), <br> VALUE_WCHAR(E_NOINTERFACE), <br> VALUE_WCHAR(REGDB_E_CLASSNOTREG), <br> VALUE_WCHAR(CLASS_E_NOAGGREGATION), <br> <br> //OLE DB Errors <br>     VALUE_WCHAR(DB_E_BADACCESSORHANDLE), <br>     VALUE_WCHAR(DB_E_ROWLIMITEXCEEDED), <br>     VALUE_WCHAR(DB_E_READONLYACCESSOR), <br>     VALUE_WCHAR(DB_E_SCHEMAVIOLATION), <br>     VALUE_WCHAR(DB_E_BADROWHANDLE), <br>     VALUE_WCHAR(DB_E_OBJECTOPEN), <br>     VALUE_WCHAR(DB_E_CANTCONVERTVALUE), <br>     VALUE_WCHAR(DB_E_BADBINDINFO), <br>     VALUE_WCHAR(DB_SEC_E_PERMISSIONDENIED), <br>     VALUE_WCHAR(DB_E_NOTAREFERENCECOLUMN), <br>     VALUE_WCHAR(DB_E_NOCOMMAND), <br>     VALUE_WCHAR(DB_E_BADBOOKMARK), <br>     VALUE_WCHAR(DB_E_BADLOCKMODE), <br>     VALUE_WCHAR(DB_E_PARAMNOTOPTIONAL), <br>     VALUE_WCHAR(DB_E_BADCOLUMNID), <br>     VALUE_WCHAR(DB_E_BADRATIO), <br>     VALUE_WCHAR(DB_E_ERRORSINCOMMAND), <br>     VALUE_WCHAR(DB_E_CANTCANCEL), <br>     VALUE_WCHAR(DB_E_DIALECTNOTSUPPORTED), <br>     VALUE_WCHAR(DB_E_DUPLICATEDATASOURCE), <br>     VALUE_WCHAR(DB_E_CANNOTRESTART), <br>     VALUE_WCHAR(DB_E_NOTFOUND), <br>     VALUE_WCHAR(DB_E_CANNOTFREE), <br>     VALUE_WCHAR(DB_E_NEWLYINSERTED), <br>     VALUE_WCHAR(DB_E_UNSUPPORTEDCONVERSION), <br>     VALUE_WCHAR(DB_E_BADSTARTPOSITION), <br>     VALUE_WCHAR(DB_E_NOTREENTRANT), <br>     VALUE_WCHAR(DB_E_ERRORSOCCURRED), <br>     VALUE_WCHAR(DB_E_NOAGGREGATION), <br>     VALUE_WCHAR(DB_E_DELETEDROW), <br>     VALUE_WCHAR(DB_E_CANTFETCHBACKWARDS), <br>     VALUE_WCHAR(DB_E_ROWSNOTRELEASED), <br>     VALUE_WCHAR(DB_E_BADSTORAGEFLAG), <br>     VALUE_WCHAR(DB_E_BADSTATUSVALUE), <br>     VALUE_WCHAR(DB_E_CANTSCROLLBACKWARDS), <br>     VALUE_WCHAR(DB_E_MULTIPLESTATEMENTS), <br>     VALUE_WCHAR(DB_E_INTEGRITYVIOLATION), <br>     VALUE_WCHAR(DB_E_ABORTLIMITREACHED), <br>     VALUE_WCHAR(DB_E_ROWSETINCOMMAND), <br>     VALUE_WCHAR(DB_E_DUPLICATEINDEXID), <br>     VALUE_WCHAR(DB_E_NOINDEX), <br>     VALUE_WCHAR(DB_E_INDEXINUSE), <br>     VALUE_WCHAR(DB_E_NOTABLE), <br>     VALUE_WCHAR(DB_E_CONCURRENCYVIOLATION), <br>     VALUE_WCHAR(DB_E_BADCOPY), <br>     VALUE_WCHAR(DB_E_BADPRECISION), <br>     VALUE_WCHAR(DB_E_BADSCALE), <br>     VALUE_WCHAR(DB_E_BADID), <br>     VALUE_WCHAR(DB_E_BADTYPE), <br>     VALUE_WCHAR(DB_E_DUPLICATECOLUMNID), <br>     VALUE_WCHAR(DB_E_DUPLICATETABLEID), <br>     VALUE_WCHAR(DB_E_TABLEINUSE), <br>     VALUE_WCHAR(DB_E_NOLOCALE), <br>     VALUE_WCHAR(DB_E_BADRECORDNUM), <br>     VALUE_WCHAR(DB_E_BOOKMARKSKIPPED), <br>     VALUE_WCHAR(DB_E_BADPROPERTYVALUE), <br>     VALUE_WCHAR(DB_E_INVALID), <br>     VALUE_WCHAR(DB_E_BADACCESSORFLAGS), <br>     VALUE_WCHAR(DB_E_BADSTORAGEFLAGS), <br>     VALUE_WCHAR(DB_E_BYREFACCESSORNOTSUPPORTED), <br>     VALUE_WCHAR(DB_E_NULLACCESSORNOTSUPPORTED), <br>     VALUE_WCHAR(DB_E_NOTPREPARED), <br>     VALUE_WCHAR(DB_E_BADACCESSORTYPE), <br>     VALUE_WCHAR(DB_E_WRITEONLYACCESSOR), <br>     VALUE_WCHAR(DB_SEC_E_AUTH_FAILED), <br>     VALUE_WCHAR(DB_E_CANCELED), <br>     VALUE_WCHAR(DB_E_BADSOURCEHANDLE), <br>     VALUE_WCHAR(DB_E_PARAMUNAVAILABLE), <br>     VALUE_WCHAR(DB_E_ALREADYINITIALIZED), <br>     VALUE_WCHAR(DB_E_NOTSUPPORTED), <br>     VALUE_WCHAR(DB_E_MAXPENDCHANGESEXCEEDED), <br>     VALUE_WCHAR(DB_E_BADORDINAL), <br>     VALUE_WCHAR(DB_E_PENDINGCHANGES), <br>     VALUE_WCHAR(DB_E_DATAOVERFLOW), <br>     VALUE_WCHAR(DB_E_BADHRESULT), <br>     VALUE_WCHAR(DB_E_BADLOOKUPID), <br>     VALUE_WCHAR(DB_E_BADDYNAMICERRORID), <br>     VALUE_WCHAR(DB_E_PENDINGINSERT), <br>     VALUE_WCHAR(DB_E_BADCONVERTFLAG), <br>     VALUE_WCHAR(DB_S_ROWLIMITEXCEEDED), <br>     VALUE_WCHAR(DB_S_COLUMNTYPEMISMATCH), <br>     VALUE_WCHAR(DB_S_TYPEINFOOVERRIDDEN), <br>     VALUE_WCHAR(DB_S_BOOKMARKSKIPPED), <br>     VALUE_WCHAR(DB_S_ENDOFROWSET), <br>     VALUE_WCHAR(DB_S_COMMANDREEXECUTED), <br>     VALUE_WCHAR(DB_S_BUFFERFULL), <br>     VALUE_WCHAR(DB_S_NORESULT), <br>     VALUE_WCHAR(DB_S_CANTRELEASE), <br>     VALUE_WCHAR(DB_S_DIALECTIGNORED), <br>     VALUE_WCHAR(DB_S_UNWANTEDPHASE), <br>     VALUE_WCHAR(DB_S_UNWANTEDREASON), <br>     VALUE_WCHAR(DB_S_COLUMNSCHANGED), <br>     VALUE_WCHAR(DB_S_ERRORSRETURNED), <br>     VALUE_WCHAR(DB_S_BADROWHANDLE), <br>     VALUE_WCHAR(DB_S_DELETEDROW), <br>     VALUE_WCHAR(DB_S_STOPLIMITREACHED), <br>     VALUE_WCHAR(DB_S_LOCKUPGRADED), <br>     VALUE_WCHAR(DB_S_PROPERTIESCHANGED), <br>     VALUE_WCHAR(DB_S_ERRORSOCCURRED), <br>     VALUE_WCHAR(DB_S_PARAMUNAVAILABLE), <br>     VALUE_WCHAR(DB_S_MULTIPLECHANGES), <br>}; <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// WCHAR* GetErrorName <br>// <br>//////////////////////////////////////////////////////////////////////// <br>WCHAR* GetErrorName(HRESULT hr) <br>{ <br>for(ULONG i=0; i&lt;NUMELE(rgErrorMap); i++) <br>{ <br>if(hr == rgErrorMap[i].hr)  <br>return rgErrorMap[i].pwszError; <br>} <br> <br>//Otherwise just return Unknown <br>return rgErrorMap[0].pwszError; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT GetErrorRecords <br>// <br>// Get the error message generated by an OLE DB object <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetErrorRecords(ULONG* pcRecords, IErrorRecords** ppIErrorRecords) <br>{ <br>ASSERT(pcRecords &amp;&amp; ppIErrorRecords); <br>HRESULT hr; <br> <br>//NULL output params <br>*pcRecords = 0; <br>*ppIErrorRecords = NULL; <br> <br>ISupportErrorInfo* pISupportErrorInfo = NULL; <br>IErrorInfo* pIErrorInfo = NULL; <br> <br>//See if this interface supports ErrorInfo <br>//If not there is no reason to display any error <br>if((hr = GetErrorInfo(0, &amp;pIErrorInfo))==S_OK &amp;&amp; pIErrorInfo) <br>{ <br>TESTC(hr = pIErrorInfo-&gt;QueryInterface(IID_IErrorRecords, (void**)ppIErrorRecords)); <br>TESTC(hr = (*ppIErrorRecords)-&gt;GetRecordCount(pcRecords)); <br>} <br> <br>CLEANUP: <br>SAFE_RELEASE(pISupportErrorInfo); <br>SAFE_RELEASE(pIErrorInfo); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT GetErrorInfo <br>// <br>// Get the error message generated by an OLE DB object <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetErrorInfo(BSTR* pBstr) <br>{ <br>ASSERT(pBstr); <br>HRESULT hr; <br> <br>ULONG cRecords = 0; <br>IErrorRecords* pIErrorRecords = NULL; <br> <br>//Try to display Extened ErrorInfo <br>if((hr = GetErrorRecords(&amp;cRecords, &amp;pIErrorRecords))==S_OK)  <br>{ <br>//GetErrorInfo, just for the first error, (ie: 0) <br>TESTC(hr = GetErrorInfo(0, pIErrorRecords, pBstr)); <br>} <br> <br>CLEANUP: <br>SAFE_RELEASE(pIErrorRecords); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT GetErrorInfo <br>// <br>// Get the error message generated by an OLE DB object <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetErrorInfo(ULONG iRecord, IErrorRecords* pIErrorRecords, BSTR* pBstr) <br>{ <br>ASSERT(pBstr); <br>HRESULT hr = S_OK; <br> <br>IErrorInfo* pIErrorInfo = NULL; <br>LCID lcid = GetSystemDefaultLCID();  <br> <br>//Get the Error Records <br>if(pIErrorRecords) <br>{ <br>//If there is ErrorInfo, GetSQLInfo for the desired record <br>TESTC(hr = pIErrorRecords-&gt;GetErrorInfo(iRecord,lcid,&amp;pIErrorInfo)); <br> <br>//If there was a CustomErrorObject <br>if(pIErrorInfo) <br>TESTC(hr = pIErrorInfo-&gt;GetDescription(pBstr)); <br>} <br> <br>CLEANUP: <br>SAFE_RELEASE(pIErrorInfo); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT GetSqlErrorInfo <br>// <br>// Get the error message generated by an OLE DB object <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetSqlErrorInfo(BSTR* pBstr) <br>{ <br>ASSERT(pBstr); <br>HRESULT hr; <br> <br>ULONG cRecords = 0; <br>IErrorRecords* pIErrorRecords = NULL; <br> <br>//Get the Error Records <br>if((hr = GetErrorRecords(&amp;cRecords, &amp;pIErrorRecords))==S_OK) <br>{ <br>//Deletegate to SqlErrorInfo <br>//Just get the first record <br>TESTC(hr = GetSqlErrorInfo(0, pIErrorRecords, pBstr)); <br>} <br> <br> <br>CLEANUP: <br>SAFE_RELEASE(pIErrorRecords); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT GetSqlErrorInfo <br>// <br>// Get the error message generated by an OLE DB object <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetSqlErrorInfo(ULONG iRecord, IErrorRecords* pIErrorRecords, BSTR* pBstr) <br>{ <br>ASSERT(pBstr); <br>HRESULT hr = S_OK; <br> <br>ISQLErrorInfo* pISQLErrorInfo = NULL; <br>LONG lNativeError = 0; <br> <br>//Get the Error Records <br>if(pIErrorRecords) <br>{ <br>//If there is ErrorInfo, GetSQLInfo for the desired record <br>TESTC(hr = pIErrorRecords-&gt;GetCustomErrorObject(iRecord, IID_ISQLErrorInfo, (IUnknown**)&amp;pISQLErrorInfo)); <br> <br>//If there was a CustomErrorObject <br>if(pISQLErrorInfo) <br>hr = pISQLErrorInfo-&gt;GetSQLInfo(pBstr, &amp;lNativeError); <br>} <br> <br>CLEANUP: <br>SAFE_RELEASE(pISQLErrorInfo); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT DisplayAllErrors <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT DisplayAllErrors(HWND hWnd, HRESULT Actualhr, REFIID riid, WCHAR* pwsz) <br>{ <br>HRESULT hr = S_OK; <br> <br>ULONG cRecords = 0; <br>IErrorRecords* pIErrorRecords = NULL; <br> <br>//Try to display Extened ErrorInfo <br>if((hr = GetErrorRecords(&amp;cRecords, &amp;pIErrorRecords))==S_OK)  <br>{ <br>hr = DisplayErrorRecords(hWnd, cRecords, pIErrorRecords); <br>} <br>//If not available, display MSG Box with info <br>else <br>{ <br>//display the Error <br>wMessageBox(hWnd, MB_ICONEXCLAMATION | MB_OK, wsz_ERRORINFO,  <br>L"Interface: %s\nResult: %x = %s\n\n%s\n",  <br>GetInterfaceName(riid), Actualhr, GetErrorName(Actualhr), pwsz ? pwsz : L""); <br>} <br> <br> <br>SAFE_RELEASE(pIErrorRecords); <br>return hr; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT DisplayErrorRecords <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT DisplayErrorRecords(HWND hWnd) <br>{ <br>HRESULT hr; <br> <br>ULONG cRecords = 0; <br>IErrorRecords* pIErrorRecords = NULL; <br> <br>//Get the Error Records <br>if((hr = GetErrorRecords(&amp;cRecords, &amp;pIErrorRecords))==S_OK)  <br>hr = DisplayErrorRecords(hWnd, cRecords, pIErrorRecords); <br> <br>SAFE_RELEASE(pIErrorRecords); <br>return hr; <br>} <br> <br> <br> <br>//////////////////////////////////////////////////////////////////////// <br>// HRESULT DisplayErrorRecords <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT DisplayErrorRecords(HWND hWnd, ULONG cRecords, IErrorRecords* pIErrorRecords) <br>{ <br>HRESULT hr = S_OK; <br> <br>IErrorInfo* pIErrorInfo = NULL; <br>BSTR bstrErrorInfo = NULL; <br>BSTR bstrSQLInfo = NULL; <br> <br>LCID lcid = GetSystemDefaultLCID();  <br> <br>//Get the Error Records <br>if(cRecords &amp;&amp; pIErrorRecords) <br>{ <br>WCHAR wszError[MAX_QUERY_LEN*2]; <br>LONG lNativeError = 0; <br>ERRORINFO ErrorInfo; <br> <br>//Loop through the records <br>for(ULONG i=0; i&lt;cRecords; i++) <br>{ <br>//GetErrorInfo <br>TESTC(hr = pIErrorRecords-&gt;GetErrorInfo(i,lcid,&amp;pIErrorInfo)); <br> <br>//Get the Description <br>TESTC(hr = pIErrorInfo-&gt;GetDescription(&amp;bstrErrorInfo)); <br> <br>//Get the Basic ErrorInfo <br>TESTC(hr = pIErrorRecords-&gt;GetBasicErrorInfo(i,&amp;ErrorInfo)); <br> <br>//Get the SQL Info <br>TESTC(hr = GetSqlErrorInfo(i, pIErrorRecords, &amp;bstrSQLInfo)); <br> <br>//Display the Error <br>if(bstrSQLInfo) <br>swprintf(wszError,  L"Interface: %s\nResult: %x = %s\n\nIErrorInfo: [%s] %s\n", GetInterfaceName(ErrorInfo.iid), ErrorInfo.hrError, GetErrorName(ErrorInfo.hrError), bstrSQLInfo, bstrErrorInfo); <br>else <br>swprintf(wszError,  L"Interface: %s\nResult: %x = %s\n\nIErrorInfo: %s\n", GetInterfaceName(ErrorInfo.iid), ErrorInfo.hrError, GetErrorName(ErrorInfo.hrError), bstrErrorInfo); <br> <br>wMessageBox(hWnd, MB_ICONEXCLAMATION | MB_OK, wsz_ERRORINFO, wszError); <br> <br>SAFE_RELEASE(pIErrorInfo); <br>SAFE_SYSFREE(bstrErrorInfo); <br>SAFE_SYSFREE(bstrSQLInfo); <br>} <br>} <br> <br> <br>CLEANUP: <br>SAFE_RELEASE(pIErrorInfo); <br>SAFE_SYSFREE(bstrErrorInfo); <br>SAFE_SYSFREE(bstrSQLInfo); <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

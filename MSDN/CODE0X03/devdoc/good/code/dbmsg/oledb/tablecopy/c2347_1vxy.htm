<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPERTY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2356"></a>PROPERTY.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module PROPERTY.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br>//////////////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>//////////////////////////////////////////////////////////////////////// <br>#include "WinMain.h" <br>#include "Property.h" <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT GetProperty <br>// <br>// Get the property information from the data source or object. <br>// propid specifies the property and propset specifies the property set to which <br>// propid belongs. The datatype of the property is required for the correct  <br>// coercion of the data <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetProperty(IUnknown* pIUnknown, DBPROPID PropertyID, GUID guidPropertySet, <br>   DBPROP** ppProperty) <br>{ <br>ASSERT(pIUnknown &amp;&amp; ppProperty); <br>HRESULT hr; <br> <br>IDBProperties* pIDBProperties = NULL; <br>ICommandProperties* pICommandProperties = NULL; <br>IRowsetInfo* pIRowsetInfo = NULL; <br> <br>ULONGcPropSets = 0; <br>DBPROPSET*rgPropSets = NULL; <br> <br>const ULONGcPropertyIDSets = 1; <br>DBPROPIDSETrgPropertyIDSets[cPropertyIDSets]; <br> <br>//SetUp input DBPROPIDSET struct (all static) <br>rgPropertyIDSets[0].cPropertyIDs = cPropertyIDSets; <br>rgPropertyIDSets[0].rgPropertyIDs = &amp;PropertyID; <br>rgPropertyIDSets[0].guidPropertySet = guidPropertySet; <br> <br>//Need to figure out which Interface was passed in <br>//IDBInitialize, or ICommand, or IRowset, all three allow GetProperties <br>if(SUCCEEDED(hr = pIUnknown-&gt;QueryInterface(IID_IDBProperties,(void **)&amp;pIDBProperties))) <br>{ <br>//GetProperties <br>XTESTC(hr = pIDBProperties-&gt;GetProperties(cPropertyIDSets, rgPropertyIDSets, &amp;cPropSets, &amp;rgPropSets)); <br>} <br>else if(SUCCEEDED(hr = pIUnknown-&gt;QueryInterface(IID_ICommandProperties,(void **)&amp;pICommandProperties))) <br>{ <br>//GetProperties <br>XTESTC(hr = pICommandProperties-&gt;GetProperties(cPropertyIDSets, rgPropertyIDSets, &amp;cPropSets, &amp;rgPropSets)); <br>} <br>else <br>{ <br>XTESTC(hr = pIUnknown-&gt;QueryInterface(IID_IRowsetInfo, (void **)&amp;pIRowsetInfo)); <br> <br>//GetProperties <br>XTESTC(hr = pIRowsetInfo-&gt;GetProperties(cPropertyIDSets, rgPropertyIDSets, &amp;cPropSets, &amp;rgPropSets)); <br>} <br> <br> <br>//Verify results <br>ASSERT(cPropSets==1 &amp;&amp; rgPropSets!=NULL); <br>ASSERT(rgPropSets[0].cProperties==1 &amp;&amp; rgPropSets[0].rgProperties!=NULL); <br>ASSERT(rgPropSets[0].rgProperties[0].dwPropertyID == PropertyID); <br> <br>//Return the property to the user <br>*ppProperty = rgPropSets[0].rgProperties; <br> <br> <br>CLEANUP: <br>//Just Free the outer Struct,  <br>//since we return the inner Property for the user to free <br>SAFE_FREE(rgPropSets); <br> <br>SAFE_RELEASE(pIDBProperties); <br>SAFE_RELEASE(pICommandProperties); <br>SAFE_RELEASE(pIRowsetInfo); <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT GetProperty <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetProperty(IUnknown* pIUnknown, DBPROPID PropertyID, GUID guidPropertySet,WCHAR** ppwszValue) <br>{ <br>ASSERT(pIUnknown &amp;&amp; ppwszValue); <br>HRESULT hr; <br> <br>DBPROP* pProperty = NULL; <br> <br>TESTC(hr = GetProperty(pIUnknown, PropertyID, guidPropertySet, &amp;pProperty)); <br> <br>//Copy the value <br>ASSERT(pProperty-&gt;vValue.vt == VT_BSTR); <br>*ppwszValue = wcsDuplicate(V_BSTR(&amp;pProperty-&gt;vValue)); <br> <br>CLEANUP: <br>FreeProperties(1, pProperty); <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT GetProperty <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetProperty(IUnknown* pIUnknown, DBPROPID PropertyID, GUID guidPropertySet,WCHAR* pwszValue) <br>{ <br>ASSERT(pIUnknown &amp;&amp; pwszValue); <br>HRESULT hr; <br> <br>DBPROP* pProperty = NULL; <br> <br>TESTC(hr = GetProperty(pIUnknown, PropertyID, guidPropertySet, &amp;pProperty)); <br> <br>//Copy the value <br>ASSERT(pProperty-&gt;vValue.vt == VT_BSTR); <br>wcscpy(pwszValue, V_BSTR(&amp;pProperty-&gt;vValue)); <br> <br>CLEANUP: <br>FreeProperties(1, pProperty); <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT GetProperty <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetProperty(IUnknown* pIUnknown, DBPROPID PropertyID, GUID guidPropertySet,ULONG* pcValue) <br>{ <br>ASSERT(pIUnknown &amp;&amp; pcValue); <br>HRESULT hr; <br> <br>DBPROP* pProperty = NULL; <br> <br>TESTC(hr = GetProperty(pIUnknown, PropertyID, guidPropertySet, &amp;pProperty)); <br> <br>//Copy the value <br>ASSERT(pProperty-&gt;vValue.vt == VT_I4); <br>*pcValue = V_I4(&amp;pProperty-&gt;vValue); <br> <br>CLEANUP: <br>FreeProperties(1, pProperty); <br>return hr; <br>} <br>    <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT GetProperty <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT GetProperty(IUnknown* pIUnknown, DBPROPID PropertyID, GUID guidPropertySet,BOOL* pbValue) <br>{ <br>ASSERT(pIUnknown &amp;&amp; pbValue); <br>HRESULT hr; <br> <br>DBPROP* pProperty = NULL; <br> <br>TESTC(hr = GetProperty(pIUnknown, PropertyID, guidPropertySet, &amp;pProperty)); <br> <br>//Copy the value <br>ASSERT(pProperty-&gt;vValue.vt == VT_BOOL); <br>*pbValue = V_BOOL(&amp;pProperty-&gt;vValue) == VARIANT_TRUE; <br> <br>CLEANUP: <br>FreeProperties(1, pProperty); <br>return hr; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT FreeVariants <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT FreeVariants(ULONG cVariants, VARIANT* rgVariants) <br>{ <br>HRESULT hr = S_OK; <br> <br>//Free the inner variants first <br>for(ULONG i=0; i&lt;cVariants; i++) <br>TEST(hr = VariantClear(&amp;rgVariants[i])); <br> <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT InitVariants <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT InitVariants(ULONG cVariants, VARIANT* rgVariants) <br>{ <br>HRESULT hr = S_OK; <br> <br>//Free all variants <br>for(ULONG i=0; i&lt;cVariants; i++) <br>VariantInit(&amp;rgVariants[i]); <br> <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT FreeProperties <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT FreeProperties(ULONG cProperties, DBPROP* rgProperties) <br>{ <br>HRESULT hr = S_OK; <br> <br>//Free the inner variants first <br>for(ULONG i=0; i&lt;cProperties; i++) <br>TEST(hr = VariantClear(&amp;rgProperties[i].vValue)); <br> <br>//Now free the set <br>SAFE_FREE(rgProperties); <br>return hr; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT FreeProperties <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT FreeProperties(ULONG cPropSets, DBPROPSET* rgPropSets) <br>{ <br>HRESULT hr = S_OK; <br> <br>//Loop over all the property sets <br>for(ULONG i=0; i&lt;cPropSets; i++) <br>TEST(hr = FreeProperties(rgPropSets[i].cProperties, rgPropSets[i].rgProperties)); <br> <br>//Now free the outer set <br>SAFE_FREE(rgPropSets); <br>return hr; <br>} <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2360"></a>SPY.H</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module SPY.H <br>// <br>//----------------------------------------------------------------------------- <br> <br>#ifndef _SPY_H_ <br>#define _SPY_H_ <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>#include "objidl.h" //IMallocSpy <br>#include "List.h"   //CList <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMallocSpy <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>class CMallocSpy : public IMallocSpy <br>{ <br>public: <br>    CMallocSpy(void); <br>virtual ~CMallocSpy(void); <br> <br>//Interface <br>virtual BOOL Add(void* pv); <br>virtual BOOL Remove(void* pv); <br>virtual BOOL DumpLeaks(); <br> <br>    // IUnknown methods <br>    virtual STDMETHODIMP QueryInterface(REFIID riid, void** ppIUnknown); <br>    virtual STDMETHODIMP_(ULONG) AddRef(); <br>    virtual STDMETHODIMP_(ULONG) Release(); <br> <br>// IMallocSpy methods <br> <br>    //Alloc <br>virtual STDMETHODIMP_(ULONG) PreAlloc(ULONG cbRequest); <br>    virtual STDMETHODIMP_(void*) PostAlloc(void *pActual); <br> <br>    //Free <br>virtual STDMETHODIMP_(void*) PreFree(void *pRequest, BOOL fSpyed); <br>    virtual STDMETHODIMP_(void ) PostFree(BOOL fSpyed); <br> <br>    //Realloc <br>virtual STDMETHODIMP_(ULONG) PreRealloc(void *pRequest, ULONG cbRequest, void **ppNewRequest, BOOL fSpyed); <br>    virtual STDMETHODIMP_(void*) PostRealloc(void *pActual, BOOL fSpyed); <br> <br>    //GetSize <br>virtual STDMETHODIMP_(void*) PreGetSize(void *pRequest, BOOL fSpyed); <br>    virtual STDMETHODIMP_(ULONG) PostGetSize(ULONG cbActual, BOOL fSpyed); <br> <br>    //DidAlloc <br>virtual STDMETHODIMP_(void*) PreDidAlloc(void *pRequest, BOOL fSpyed); <br>    virtual STDMETHODIMP_(BOOL)  PostDidAlloc(void *pRequest, BOOL fSpyed, BOOL fActual); <br> <br>    //HeapMinimize <br>virtual STDMETHODIMP_(void ) PreHeapMinimize(); <br>    virtual STDMETHODIMP_(void ) PostHeapMinimize(); <br> <br> <br>private: <br>    ULONG    m_cRef;//Reference count <br>    ULONG    m_cbRequest;//Bytes requested <br> <br>CList&lt;void*&gt; CAllocList;//List to keep track of leaks <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Registration <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>void MallocSpyRegister(CMallocSpy** ppCMallocSpy); <br>void MallocSpyUnRegister(CMallocSpy* pCMallocSpy); <br>void MallocSpyDump(CMallocSpy* pCMallocSpy); <br> <br> <br>#endif // _SPY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

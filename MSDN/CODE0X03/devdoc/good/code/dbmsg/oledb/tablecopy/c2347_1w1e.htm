<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WIZARD.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2372"></a>WIZARD.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module WIZARD.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>///////////////////////////////////////////////////////////////// <br>#include "common.h" <br>#include "tablecopy.h" <br>#include "wizard.h" <br>#include "progress.h" <br> <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// Defines <br>// <br>///////////////////////////////////////////////////////////////// <br>enum WIZ_STEP <br>{ <br>WIZ_STEP1= 0, <br>WIZ_STEP2= 1, <br>WIZ_STEP3= 2, <br>WIZ_STEP4= 3, <br>WIZ_TYPES= 4, <br>END_WIZ= 5 <br>}; <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CDialog::CDialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CDialog::CDialog(HWND hWnd, HINSTANCE hInst) <br>{ <br>ASSERT(hInst); <br> <br>m_hWnd= hWnd; <br>m_hInst = hInst; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CDialog::~CDialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CDialog::~CDialog() <br>{ <br>} <br> <br> <br> <br>//////////////////////////////////////////////////////////////// <br>// CWizard::CWizard <br>// <br>///////////////////////////////////////////////////////////////// <br>CWizard::CWizard(HWND hWnd, HINSTANCE hInst) <br>: CDialog(hWnd, hInst) <br>{ <br>m_pCTableCopy = new CTableCopy(this); <br>m_pCProgress = new CProgress(hWnd, hInst); <br>} <br> <br> <br>//////////////////////////////////////////////////////////////// <br>// CWizard::~CWizard <br>// <br>///////////////////////////////////////////////////////////////// <br>CWizard::~CWizard() <br>{ <br>delete m_pCTableCopy; <br>delete m_pCProgress; <br>} <br> <br>//////////////////////////////////////////////////////////////// <br>// ULONG CWizard::FindNextStep <br>// <br>///////////////////////////////////////////////////////////////// <br>ULONG CWizard::FindNextStep(ULONG iStep, ULONG iButton) <br>{ <br>ASSERT(iStep&gt;=WIZ_STEP1 &amp;&amp; iStep&lt;END_WIZ); <br> <br>//iStep - (the current dialog were in), along with <br>//iButton - (button pressed which closed the current dialog) <br> <br>//From these 2 input, it calculates the next dialog to display <br>switch(iButton) <br>{ <br>case IDOK: <br>//if(iStep+1 == END_WIZ) <br>//return WIZ_STEP1; <br>return iStep + 1; <br> <br>case IDCANCEL: <br>return END_WIZ;    <br> <br>case IDB_PREV: <br>return iStep - 1; <br> <br>default: <br>ASSERT(!"Unhandled Case"); <br>return END_WIZ; <br>}; <br>} <br> <br>//////////////////////////////////////////////////////////////// <br>// ULONG CWizard::Run <br>// <br>///////////////////////////////////////////////////////////////// <br>ULONG CWizard::Run() <br>{ <br>// Call each step. The return value will be either the next <br>// step to run or END_WIZARD when we are all done. <br> <br>ULONG iStep = WIZ_STEP1; <br>while(iStep != END_WIZ) <br>{ <br>switch(iStep) <br>{ <br>case WIZ_STEP1: <br>{ <br>CS1Dialog CStep1(m_hWnd, m_hInst, m_pCTableCopy); <br>iStep = FindNextStep(iStep, CStep1.Display()); <br>break; <br>} <br> <br>case WIZ_STEP2: <br>{ <br>CS2Dialog CStep2(m_hWnd, m_hInst, m_pCTableCopy); <br>iStep = FindNextStep(iStep, CStep2.Display()); <br>break; <br>} <br> <br>case WIZ_STEP3: <br>{ <br>CS3Dialog CStep3(m_hWnd, m_hInst, m_pCTableCopy); <br>iStep = FindNextStep(iStep, CStep3.Display()); <br>break; <br>} <br> <br>case WIZ_STEP4: <br>{ <br>CS4Dialog CStep4(m_hWnd, m_hInst, m_pCTableCopy); <br>iStep = FindNextStep(iStep, CStep4.Display()); <br>break; <br>} <br> <br>case WIZ_TYPES: <br>{ <br>CTypesDialog CTypes(m_hWnd, m_hInst, m_pCTableCopy); <br>iStep = FindNextStep(iStep, CTypes.Display()); <br>break; <br>} <br> <br>default: <br>{ <br>ASSERT(!"Unhandled Case!"); <br>break; <br>} <br>} <br> } <br>return iStep; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATASOURCE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2349"></a>DATASOURCE.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module DATASOURCE.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br>///////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>///////////////////////////////////////////////////////////////// <br>#include "WinMain.h" <br>#include "Common.h" <br>#include "DataSource.h" <br>#include "msdasql.h"//CLSID_MSDASQL provider guid <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// CDataSource::CDataSource <br>// <br>///////////////////////////////////////////////////////////////// <br>CDataSource::CDataSource() <br>{ <br>m_pIDBInitialize= NULL; <br>m_pIDBCreateCommand= NULL; <br>m_pICommandText= NULL; <br> <br>m_pwszCatalog= NULL; <br>m_pwszDataSource= NULL; <br>m_pwszDBMS= NULL; <br>m_pwszDBMSVer= NULL; <br>m_pwszUserName= NULL; <br>m_pwszPassword= NULL; <br> <br>m_pwszProvider= NULL; <br>m_pwszProviderVer= NULL; <br>m_pwszProviderOLEDBVer= NULL; <br> <br>m_fReadOnly= FALSE; <br>m_fPrimaryKeysSupported = FALSE; <br>m_fMultipleParamSets    = FALSE; <br> <br>m_fConnected = FALSE; <br>} <br> <br>///////////////////////////////////////////////////////////////// <br>// CDataSource::~CDataSource <br>// <br>///////////////////////////////////////////////////////////////// <br>CDataSource::~CDataSource() <br>{ <br>Disconnect(); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// BOOL CDataSource::IsConnected <br>// <br>///////////////////////////////////////////////////////////////// <br>BOOL CDataSource::IsConnected() <br>{ <br>return m_fConnected; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// BOOL CDataSource::IsSimilar <br>// <br>///////////////////////////////////////////////////////////////// <br>BOOL CDataSource::IsSimilar(CDataSource* pCDataSource) <br>{ <br>ASSERT(pCDataSource); <br> <br>//Must be Connected to compare <br>if(!IsConnected() || !pCDataSource-&gt;IsConnected()) <br>return FALSE; <br> <br>ASSERT(m_pwszDBMS &amp;&amp; pCDataSource-&gt;m_pwszDBMS); <br>ASSERT(m_pwszDBMSVer &amp;&amp; pCDataSource-&gt;m_pwszDBMSVer); <br> <br>//Similiar: Must be the same DBMS and Version <br>if(wcscmp(m_pwszDBMS, pCDataSource-&gt;m_pwszDBMS)==0 &amp;&amp; <br>wcscmp(m_pwszDBMSVer, pCDataSource-&gt;m_pwszDBMSVer)==0) <br>return TRUE; <br> <br>return FALSE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// BOOL CDataSource::IsEqual <br>// <br>///////////////////////////////////////////////////////////////// <br>BOOL CDataSource::IsEqual(CDataSource* pCDataSource) <br>{ <br>ASSERT(pCDataSource); <br> <br>//Must be Connected to compare <br>if(!IsConnected() || !pCDataSource-&gt;IsConnected()) <br>return FALSE; <br> <br>ASSERT(m_pwszCatalog &amp;&amp; pCDataSource-&gt;m_pwszCatalog); <br>ASSERT(m_pwszDBMS &amp;&amp; pCDataSource-&gt;m_pwszDBMS); <br>ASSERT(m_pwszDBMSVer &amp;&amp; pCDataSource-&gt;m_pwszDBMSVer); <br> <br>//Equal:  <br>//Must have same Catalog, DBMS, Version <br>//Note, Don't have to have the same DataSource Name (an access <br>//database can have multiple names for the same file) <br>if(wcscmp(m_pwszCatalog, pCDataSource-&gt;m_pwszCatalog)==0 &amp;&amp; <br>wcscmp(m_pwszDBMS, pCDataSource-&gt;m_pwszDBMS)==0 &amp;&amp; <br>wcscmp(m_pwszDBMSVer, pCDataSource-&gt;m_pwszDBMSVer)==0) <br>return TRUE; <br> <br>return FALSE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// BOOL CDataSource::Disconnect <br>// <br>///////////////////////////////////////////////////////////////// <br>BOOL CDataSource::Disconnect() <br>{ <br>m_fConnected = FALSE; <br> <br>SAFE_FREE(m_pwszCatalog); <br>SAFE_FREE(m_pwszDataSource); <br>SAFE_FREE(m_pwszDBMS); <br>SAFE_FREE(m_pwszDBMSVer); <br>SAFE_FREE(m_pwszUserName); <br>SAFE_FREE(m_pwszPassword); <br> <br>SAFE_FREE(m_pwszProvider); <br>SAFE_FREE(m_pwszProviderVer); <br>SAFE_FREE(m_pwszProviderOLEDBVer); <br> <br>SAFE_RELEASE(m_pIDBInitialize); <br>SAFE_RELEASE(m_pIDBCreateCommand); <br>SAFE_RELEASE(m_pICommandText); <br> <br>return TRUE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////// <br>// BOOL CDataSource::Connect <br>// <br>///////////////////////////////////////////////////////////////// <br>BOOL CDataSource::Connect(HWND hDlg) <br>{ <br>ASSERT(hDlg); <br> <br>HRESULThr; <br>ULONG               cPropSets = 0; <br>DBPROPSET*rgPropSets = NULL; <br>IDBProperties*pIDBProperties = NULL; <br>IDBCreateSession*   pIDBCreateSession = NULL; <br> <br>//If there are current connections, close them <br>Disconnect(); <br> <br>//Get the IDBInitalize interface <br>hr = CoCreateInstance(CLSID_MSDASQL, NULL, CLSCTX_INPROC_SERVER, IID_IDBInitialize, (void**)&amp;m_pIDBInitialize); <br>CHECK_ERRORS(hr, IID_IDBInitialize, L"CoCreateInstance Failed for CLSID_MSDASQL!"); <br> <br>//Create the Init Properties structs <br>//Set DBPROP_INIT_HWND / DBPROP_INIT_PROMPT <br>TESTC(hr = SetupInitProps(hDlg, &amp;cPropSets, &amp;rgPropSets)); <br>XTESTC(hr = m_pIDBInitialize-&gt;QueryInterface(IID_IDBProperties, (void **)&amp;pIDBProperties)); <br> <br>//Set the DataSource Properties <br>XTESTC(hr = pIDBProperties-&gt;SetProperties(cPropSets, rgPropSets)); <br> <br>//Initailize <br>//The user might have canceled the connect, don't display extended error info  <br>TESTC(hr = m_pIDBInitialize-&gt;Initialize()); <br> <br>//Get the Session Object <br>XTESTC(hr = m_pIDBInitialize-&gt;QueryInterface(IID_IDBCreateSession, (void **)&amp;pIDBCreateSession)); <br> <br>//Create the SessionObject <br>XTESTC(hr = pIDBCreateSession-&gt;CreateSession(NULL, IID_IDBCreateCommand, (IUnknown**)&amp;m_pIDBCreateCommand)); <br> <br>//Get the CommandText object <br>XTESTC(hr = m_pIDBCreateCommand-&gt;CreateCommand(NULL, IID_ICommandText, (IUnknown**)&amp;m_pICommandText)); <br> <br>//Now get the connection properties <br>TESTC(hr = GetConnectionProps()); <br> <br>//We are now successfully connected <br>m_fConnected = TRUE; <br> <br>CLEANUP: <br>FreeProperties(cPropSets, rgPropSets); <br> <br>//Release Interfaces <br>SAFE_RELEASE(pIDBProperties); <br>SAFE_RELEASE(pIDBCreateSession); <br>return (hr==S_OK); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT CDataSource::SetupInitProps  <br>// <br>// Set up the initialization properties to make a connection to DSO <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT CDataSource::SetupInitProps(HWND hWnd, ULONG* pcPropSets, DBPROPSET** prgPropSets) <br>{ <br>ASSERT(pcPropSets &amp;&amp; prgPropSets); <br>HRESULT hr = S_OK; <br> <br>//Allocate outer PropSet struct <br>ULONG cPropSets = 1; <br>DBPROPSET* rgPropSets = NULL; <br>SAFE_ALLOC(rgPropSets, DBPROPSET, cPropSets); <br> <br>//Allocate inner properties <br>rgPropSets[0].guidPropertySet = DBPROPSET_DBINIT; <br>rgPropSets[0].cProperties  = 2; <br>SAFE_ALLOC(rgPropSets[0].rgProperties, DBPROP, rgPropSets[0].cProperties); <br> <br>// window handle to display dialog boxes to get the required input <br>rgPropSets[0].rgProperties[0].dwPropertyID= DBPROP_INIT_HWND; <br>rgPropSets[0].rgProperties[0].dwOptions= DBPROPOPTIONS_REQUIRED; <br>rgPropSets[0].rgProperties[0].dwStatus= DBPROPSTATUS_OK; <br>rgPropSets[0].rgProperties[0].colid= DB_NULLID; <br>rgPropSets[0].rgProperties[0].vValue.vt = VT_I4; <br>rgPropSets[0].rgProperties[0].vValue.lVal = (LONG)hWnd;  <br> <br>// prompt level <br>rgPropSets[0].rgProperties[1].dwPropertyID= DBPROP_INIT_PROMPT; <br>rgPropSets[0].rgProperties[1].dwOptions= DBPROPOPTIONS_REQUIRED; <br>rgPropSets[0].rgProperties[1].dwStatus= DBPROPSTATUS_OK; <br>rgPropSets[0].rgProperties[1].colid= DB_NULLID; <br> rgPropSets[0].rgProperties[1].vValue.vt = VT_I2; <br>rgPropSets[0].rgProperties[1].vValue.iVal = DBPROMPT_COMPLETE;  <br> <br>//Assign pointers <br>*pcPropSets = cPropSets; <br>*prgPropSets = rgPropSets; <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// HRESULT CDataSource::GetConnectionProps <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>HRESULT CDataSource::GetConnectionProps() <br>{ <br>HRESULT hr; <br>DWORD dwSqlSupport = 0; <br> <br>//Should have disconnected first <br>ASSERT(m_pwszDataSource == NULL); <br>ASSERT(m_pwszDBMS == NULL); <br>ASSERT(m_pwszDBMSVer == NULL); <br>ASSERT(m_pwszUserName == NULL); <br>ASSERT(m_pwszPassword == NULL); <br> <br>//DBPROP_CURRENTCATALOG <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_CURRENTCATALOG,  <br>DBPROPSET_DATASOURCE, &amp;m_pwszCatalog));  <br> <br>//DBPROP_DATASOURCENAME <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_DATASOURCENAME,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszDataSource)); <br> <br>//DBPROP_DBMSNAME <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_DBMSNAME,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszDBMS)); <br> <br>//DBPROP_DBMSVER <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_DBMSVER,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszDBMSVer)); <br> <br>//DBPROP_USERNAME <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_USERNAME,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszUserName)); <br> <br>//DBPROP_DATASOURCEREADONLY  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_DATASOURCEREADONLY,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_fReadOnly)); <br> <br>//DBPROP_PROVIDERNAME  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_PROVIDERNAME,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszProvider)); <br> <br>//DBPROP_PROVIDEROLEDBVER  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_PROVIDEROLEDBVER,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszProviderVer)); <br> <br>//DBPROP_PROVIDERVER  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_PROVIDERVER,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_pwszProviderOLEDBVer)); <br> <br>//DBPROP_MULTIPLEPARAMSETS  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_MULTIPLEPARAMSETS,  <br>DBPROPSET_DATASOURCEINFO, &amp;m_fMultipleParamSets)); <br> <br>//DBPROP_SQLSUPPORT  <br>TESTC(hr = GetProperty(m_pIDBInitialize, DBPROP_SQLSUPPORT,  <br>DBPROPSET_DATASOURCEINFO, &amp;dwSqlSupport)); <br> <br>//Are PrimaryKeys supported <br>m_fPrimaryKeysSupported = dwSqlSupport &amp; DBPROPVAL_SQL_ANSI89_IEF; <br> <br>CLEANUP: <br>return hr; <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

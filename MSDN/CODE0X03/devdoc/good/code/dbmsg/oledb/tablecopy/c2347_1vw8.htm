<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMMON.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2348"></a>COMMON.H</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module COMMON.H <br>// <br>//----------------------------------------------------------------------------- <br> <br>#ifndef _COMMON_H_ <br>#define _COMMON_H_ <br> <br> <br>/////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>/////////////////////////////////////////////////////////////// <br>#include "winmain.h" <br> <br>#include "oledb.h" <br>#include "oledberr.h" <br> <br>#include "error.h" <br>#include "tablecopy.h" <br> <br> <br>/////////////////////////////////////////////////////////////// <br>// Defines <br>// <br>/////////////////////////////////////////////////////////////// <br>#define NUMELE(rgEle) (sizeof(rgEle) / sizeof(rgEle[0])) <br> <br>//FindLeaks <br>#ifdef _DEBUG <br>#define DISP_FILE_LINETRACE("File '%s', Line '%lu'\n", __FILE__, __LINE__) <br>#else <br>#define DISP_FILE_LINE <br>#endif //_DEBUG <br> <br>//IMalloc Wrappers <br>#define SAFE_ALLOC(pv, type, cb){ pv = (type*)CoTaskMemAlloc((cb)*sizeof(type)); DISP_FILE_LINE; CHECK_MEMORY(pv); } <br>#define SAFE_REALLOC(pv, type, cb){ pv = (type*)CoTaskMemRealloc(pv, (cb)*sizeof(type)); DISP_FILE_LINE; CHECK_MEMORY(pv); } <br>#define SAFE_SYSALLOC(pv, bstr){ pv = SysAllocString(bstr); DISP_FILE_LINE; CHECK_MEMORY(pv); } <br> <br>#define SAFE_FREE(pv){ CoTaskMemFree(pv); pv = NULL; } <br>#define SAFE_SYSFREE(bstr){ SysFreeString(bstr); bstr = NULL;} <br> <br>//IUnknown-&gt;Release Wrapper <br>#define SAFE_RELEASE(pv)if(pv) { (pv)-&gt;Release(); pv = NULL; }   <br> <br>//Test macros <br>#define TEST(exp){ if(FAILED(exp)) { ASSERT(!#exp); } } <br>#define TESTC(exp){ if(FAILED(exp)) { goto CLEANUP;  } } <br> <br>#define XTEST(exp){ if(FAILED(exp)) { DisplayErrorRecords(NULL); } }  <br> <br>#define XTESTC(exp){ if(FAILED(exp)) { DisplayErrorRecords(NULL); goto CLEANUP; } }  <br>#define CHECK_ERRORS(exp, riid, pz){ if(FAILED(exp))  { DisplayAllErrors(NULL, exp, riid, pz); goto CLEANUP; } } <br> <br> <br> <br>/////////////////////////////////////////////////////////////////// <br>// Accessor / Binding  <br>// <br>/////////////////////////////////////////////////////////////////// <br>#define ADJUST_SIZE(Size, MaxSize)  ((Size) = min((Size), (MaxSize))) <br> <br>//STATUS helpers, for locating obStatus offsets in the bindings <br>#define STATUS_IS_BOUND(Binding)    ( Binding.dwPart &amp; DBPART_STATUS ) <br>#define BINDING_STATUS(Binding, pv) (*(ULONG*)((BYTE*)pv + Binding.obStatus)) <br> <br>//LENGTH helpers, for locating obLength offsets in the bindings <br>#define LENGTH_IS_BOUND(Binding)    ( Binding.dwPart &amp; DBPART_LENGTH ) <br>#define BINDING_LENGTH(Binding, pv) (*(ULONG*)((BYTE*)pv + Binding.obLength)) <br> <br>//VALUE helpers, for locating obValue offsets in the bindings <br>#define VALUE_IS_BOUND(Binding)     ( Binding.dwPart &amp; DBPART_VALUE ) <br>#define BINDING_VALUE(Binding, pv)  (*(ULONG*)((BYTE*)pv + Binding.obValue )) <br> <br>//ROUNDUP on all platforms pointers must be aligned properly <br>#define ROUNDUP_AMOUNT8 <br>#define ROUNDUP_(size,amount)(((ULONG)(size)+((amount)-1))&amp;~((amount)-1)) <br>#define ROUNDUP(size)ROUNDUP_(size, ROUNDUP_AMOUNT) <br> <br>FreeBindings(ULONG cBindings, DBBINDING* rgBindings); <br> <br> <br> <br>//////////////////////////////////////////////////////////////////////////// <br>// DBTYPE functions <br>// <br>//////////////////////////////////////////////////////////////////////////// <br>BOOL IsFixedType(DBTYPE wType); <br>BOOL IsVariableType(DBTYPE wType); <br>BOOL IsNumericType(DBTYPE wType); <br> <br>WCHAR* GetDBTypeName(DBTYPE wType); <br>WCHAR* GetSQLTypeName(DBTYPE wType); <br> <br>BOOL GetPromotedType(DBTYPE* pwType); <br>BOOL MakeAlphaNumeric(WCHAR* pwszBuffer,WCHAR  wchReplace); <br>   <br> <br> <br>//////////////////////////////////////////////////////////////////////////// <br>// OLEDB General Helper functions <br>// <br>//////////////////////////////////////////////////////////////////////////// <br>ULONG GetCreateParams(WCHAR* pwszCreateParam); <br>BOOL GetQuotedID(WCHAR* pwszOutBuff, WCHAR* pwszInBuff, WCHAR* pwszQuote, WCHAR* pwszSeperator); <br> <br>HRESULT ConvertToMBCS(WCHAR* pwsz, CHAR* psz, ULONG cbStrLen); <br>HRESULT ConvertToWCHAR(CHAR* psz, WCHAR* pwsz, ULONG cbStrLen); <br>WCHAR* wcsDuplicate(WCHAR* pwsz); <br> <br> <br>/////////////////////////////////////////////////////////////// <br>// Static Strings Messages <br>// <br>/////////////////////////////////////////////////////////////// <br> <br>//General Statss <br>extern WCHAR wsz_ERROR[]; <br>extern WCHAR wsz_SUCCESS[]; <br>extern WCHAR wsz_WARNING[]; <br>extern WCHAR wsz_CANCEL[]; <br>extern WCHAR wsz_ERRORINFO[]; <br>  <br>//Copying Status <br>extern WCHAR wsz_COPYING[];  <br>extern WCHAR wsz_COPIED_RECORDS[]; <br>extern WCHAR wsz_COPY_SUCCESS[]; <br>extern WCHAR wsz_COPY_FAILURE[]; <br>extern WCHAR wsz_CANCEL_OP[]; <br> <br>//Tables <br>extern WCHAR wsz_CREATE_TABLE[]; <br>extern WCHAR wsz_DROP_TABLE_[]; <br>extern WCHAR wsz_ASK_DROP_TABLE_[]; <br>extern WCHAR wsz_SAME_TABLE_NAME[]; <br> <br>//Indexes <br>extern WCHAR wsz_CREATE_INDEX_[]; <br>extern WCHAR wsz_UNIQUE_INDEX[]; <br>extern WCHAR wsz_INDEX_DESC[];  <br>extern WCHAR wsz_INDEX_FAILED_[]; <br> <br>//Columns <br>extern WCHAR wsz_TYPE_FORMAT_[]; <br>extern WCHAR wsz_COLUMN_FORMAT_[]; <br>extern WCHAR wsz_NO_TYPE_MATCH_[]; <br>extern WCHAR wsz_NO_TYPE_FOUND_[]; <br> <br>extern WCHAR wsz_CONNECT_STRING_[]; <br>extern WCHAR wsz_NOT_CONNECTED[]; <br>extern WCHAR wsz_FROM_TABLE_DSN_[]; <br>extern WCHAR wsz_TO_TABLE_DSN_[]; <br> <br>extern WCHAR wsz_PROVIDER_STRING_[]; <br>extern WCHAR wsz_NO_PROVIDER[]; <br> <br>extern WCHAR wsz_INVALID_VALUE_[]; <br>extern WCHAR wsz_READONLY_DATASOURCE_[]; <br> <br>//Query <br>extern WCHAR wsz_SHOW_SQL_TITLE[]; <br>extern WCHAR wsz_SHOW_SQL_[]; <br>extern WCHAR wsz_SELECT[]; <br>extern WCHAR wsz_FROM[]; <br>extern WCHAR wsz_BOGUS_WHERE[]; <br>extern WCHAR wsz_INSERT_INTO[]; <br>extern WCHAR wsz_VALUES_CLAUSE[]; <br>extern WCHAR wsz_PARAM[]; <br>extern WCHAR wsz_PRIMARY_KEY[]; <br> <br>//General String Values <br>extern WCHAR wsz_COMMA[]; <br>extern WCHAR wsz_LPAREN[]; <br>extern WCHAR wsz_RPAREN[]; <br>extern WCHAR wsz_SPACE[]; <br> <br>#define EOLL'\0' <br>#define SPACEL' ' <br>#define UNDERSCOREL'_' <br> <br> <br>#endif //_COMMON_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STEP4.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2364"></a>STEP4.CPP</h2>
<pre><code>//----------------------------------------------------------------------------- <br>// Microsoft OLE DB TABLECOPY Sample <br>// Copyright (C) 1996 By Microsoft Corporation. <br>// <br>// @doc <br>// <br>// @module STEP4.CPP <br>// <br>//----------------------------------------------------------------------------- <br> <br>///////////////////////////////////////////////////////////////////// <br>// Includes <br>// <br>///////////////////////////////////////////////////////////////////// <br>#include "wizard.h" <br>#include "common.h" <br>#include "tablecopy.h" <br>#include "table.h" <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CS4Dialog::CS4Dialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CS4Dialog::CS4Dialog(HWND hWnd, HINSTANCE hInst, CTableCopy* pCTableCopy) <br>: CDialog(hWnd, hInst) <br>{ <br>ASSERT(pCTableCopy); <br>m_pCTableCopy = pCTableCopy; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CS4Dialog::~CS4Dialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CS4Dialog::~CS4Dialog() <br>{ <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// ULONG CS4Dialog::Display <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>ULONG CS4Dialog::Display() <br>{   <br>return DialogBoxParam(m_hInst, MAKEINTRESOURCE(IDD_OPTIONS), NULL, DlgProc, (LPARAM)this); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CS4Dialog::DlgProc <br>// <br>///////////////////////////////////////////////////////////////////// <br>BOOL WINAPI CS4Dialog::DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch(msg)  <br>{ <br>case WM_INITDIALOG: <br>{ <br>//Store the "this" pointer, since this is a static method <br>CS4Dialog* pThis = (CS4Dialog*)lParam; <br>SetWindowLong(hWnd, GWL_USERDATA, (LONG)pThis); <br> <br>//On INIT we know we have a valid hWnd to store <br>pThis-&gt;m_hWnd = hWnd; <br> <br>pThis-&gt;InitControls(); <br>CenterDialog(hWnd); <br>return HANDLED_MSG; <br>} <br> <br>case WM_COMMAND: <br>{ <br>//Obtain the "this" pointer <br>CS4Dialog* pThis = (CS4Dialog*)GetWindowLong(hWnd, GWL_USERDATA); <br> <br>// All buttons are handled the same way <br>switch(GET_WM_COMMAND_ID(wParam, lParam))  <br>{ <br>case IDX_COPY_TABLE: <br>case IDX_COPY_INDEXES: <br>case IDX_SHOW_SQL: <br> <br>case IDR_ALL_ROWS: <br>case IDR_MAX_ROWS: <br>case IDR_PARAM_SETS: <br>case IDR_INSERT_ROW: <br>case IDR_BLOB_SIZE: <br>case IDR_ISEQ_STREAM: <br>pThis-&gt;RefreshControls(); <br>return HANDLED_MSG; <br> <br> <br>case IDOK: <br>case IDB_PREV: <br>if(!pThis-&gt;RefreshControls()) <br>return HANDLED_MSG; <br>                 <br>case IDCANCEL: <br>                EndDialog(hWnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>                return HANDLED_MSG; <br>} <br>} <br>} <br> <br>return UNHANDLED_MSG; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// BOOL CS4Dialog::InitControls <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CS4Dialog::InitControls() <br>{ <br>//IDX_COPY_TABLE (default-checked) <br>CheckDlgButton(m_hWnd, IDX_COPY_TABLE, m_pCTableCopy-&gt;m_fCopyTables); <br> <br>//IDX_COPY_INDEXES (default-checked) <br>CheckDlgButton(m_hWnd, IDX_COPY_INDEXES, m_pCTableCopy-&gt;m_fCopyIndexes); <br> <br>//IDX_SHOW_SQL (checked) <br>CheckDlgButton(m_hWnd, IDX_SHOW_SQL, m_pCTableCopy-&gt;m_fShowQuery); <br> <br>//IDR_ALL_ROWS (default) <br>//IDR_MAX_ROWS <br>CheckRadioButton(m_hWnd, IDR_ALL_ROWS, IDR_MAX_ROWS, m_pCTableCopy-&gt;m_dwRowOpt); <br>wSetDlgItemText(m_hWnd, IDE_MAX_ROWS, L"%lu", m_pCTableCopy-&gt;m_ulMaxRows); <br> <br>//IDR_PARAM_SETS (default) <br>//IDR_INSERT_ROW <br>//If multiple param sets are not supported by this driver, select only 1 set <br>if(!m_pCTableCopy-&gt;m_pCToTable-&gt;m_pCDataSource-&gt;m_fMultipleParamSets) <br>m_pCTableCopy-&gt;m_ulParamSets = 1; <br>CheckRadioButton(m_hWnd, IDR_PARAM_SETS, IDR_INSERT_ROW, m_pCTableCopy-&gt;m_dwParamOpt); <br>wSetDlgItemText(m_hWnd, IDE_PARAM_SETS, L"%lu", m_pCTableCopy-&gt;m_ulParamSets); <br> <br>//IDR_BLOB_SIZE(default) <br>//IDR_ISEQ_STREAM  <br>CheckRadioButton(m_hWnd, IDR_BLOB_SIZE, IDR_ISEQ_STREAM, m_pCTableCopy-&gt;m_dwBlobOpt); <br>wSetDlgItemText(m_hWnd, IDE_BLOB_SIZE, L"%lu", m_pCTableCopy-&gt;m_ulBlobSize); <br> <br>//ISEQ_STREAM is currently disabled, until limitations are fixed <br>EnableWindow(GetDlgItem(m_hWnd, IDR_ISEQ_STREAM), FALSE); <br> <br>//Limit the TextLength of the Edit Controls to 10 chars <br>SendDlgItemMessage(m_hWnd, IDE_MAX_ROWS, EM_LIMITTEXT, (WPARAM)10, 0L); <br>SendDlgItemMessage(m_hWnd, IDE_PARAM_SETS, EM_LIMITTEXT, (WPARAM)10, 0L); <br>SendDlgItemMessage(m_hWnd, IDE_BLOB_SIZE, EM_LIMITTEXT, (WPARAM)10, 0L); <br> <br>// Refresh the controls <br>RefreshControls(); <br>return TRUE; <br>} <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// BOOL CS4Dialog::RefreshControls <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CS4Dialog::RefreshControls() <br>{ <br>// IDE_MAX_ROWS Get the Copy options first so we can check the row count if given. <br>if(IsDlgButtonChecked(m_hWnd, IDR_MAX_ROWS))  <br>{ <br>m_pCTableCopy-&gt;m_dwRowOpt = IDR_MAX_ROWS; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_MAX_ROWS), TRUE); <br>} <br>else <br>{ <br>m_pCTableCopy-&gt;m_dwRowOpt = IDR_ALL_ROWS; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_MAX_ROWS), FALSE); <br>} <br> <br>//Verify IDE_MAX_ROWS has legal value <br>if(!GetEditBoxValue(GetDlgItem(m_hWnd, IDE_MAX_ROWS), 1, LONG_MAX, &amp;m_pCTableCopy-&gt;m_ulMaxRows)) <br>return FALSE; <br> <br>//ISEQ_STREAM is currently disabled, until limitations are fixed <br>EnableWindow(GetDlgItem(m_hWnd, IDR_ISEQ_STREAM), FALSE); <br> <br>//IDE_BLOB_SIZE Get the Insert ParamSets options <br>if(IsDlgButtonChecked(m_hWnd, IDR_BLOB_SIZE)) <br>{ <br>m_pCTableCopy-&gt;m_dwBlobOpt = IDR_BLOB_SIZE; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_BLOB_SIZE), TRUE); <br>} <br>else <br>{ <br>m_pCTableCopy-&gt;m_dwBlobOpt = IDR_ISEQ_STREAM; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_BLOB_SIZE), FALSE); <br>} <br> <br>//Verify IDE_BLOB_SIZE has legal value <br>if(!GetEditBoxValue(GetDlgItem(m_hWnd, IDE_BLOB_SIZE), 1, MAX_COL_SIZE, &amp;m_pCTableCopy-&gt;m_ulBlobSize)) <br>return FALSE; <br> <br>//IDE_PARAM_SETS Get the Insert ParamSets options <br>if(IsDlgButtonChecked(m_hWnd, IDR_PARAM_SETS)) <br>{ <br>m_pCTableCopy-&gt;m_dwParamOpt = IDR_PARAM_SETS; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_PARAM_SETS), m_pCTableCopy-&gt;m_pCToTable-&gt;m_pCDataSource-&gt;m_fMultipleParamSets); <br>} <br>else <br>{ <br>m_pCTableCopy-&gt;m_dwParamOpt = IDR_INSERT_ROW; <br>EnableWindow(GetDlgItem(m_hWnd, IDE_PARAM_SETS), FALSE); <br>} <br> <br>//Verify IDE_PARAM_SETS has legal value <br>if(!GetEditBoxValue(GetDlgItem(m_hWnd, IDE_PARAM_SETS), 1, LONG_MAX, &amp;m_pCTableCopy-&gt;m_ulParamSets)) <br>return FALSE; <br> <br>// Get Create options <br>m_pCTableCopy-&gt;m_fCopyTables = IsDlgButtonChecked(m_hWnd, IDX_COPY_TABLE); <br>m_pCTableCopy-&gt;m_fCopyIndexes = IsDlgButtonChecked(m_hWnd, IDX_COPY_INDEXES); <br> <br>// Set other Options <br>m_pCTableCopy-&gt;m_fShowQuery = IsDlgButtonChecked(m_hWnd, IDX_SHOW_SQL); <br>return TRUE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CTypesDialog::CTypesDialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CTypesDialog::CTypesDialog(HWND hWnd, HINSTANCE hInst, CTableCopy* pCTableCopy) <br>: CDialog(hWnd, hInst) <br>{ <br>ASSERT(pCTableCopy); <br>m_pCTableCopy = pCTableCopy; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CTypesDialog::~CTypesDialog <br>// <br>///////////////////////////////////////////////////////////////////// <br>CTypesDialog::~CTypesDialog() <br>{ <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// ULONG CTypesDialog::Display <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>ULONG CTypesDialog::Display() <br>{ <br>return DialogBoxParam(m_hInst, MAKEINTRESOURCE(IDD_DATA_TYPES), NULL, DlgProc, (LPARAM)this); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// CTypesDialog::DlgProc <br>// <br>///////////////////////////////////////////////////////////////////// <br>BOOL WINAPI CTypesDialog::DlgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br> switch(msg)  <br>{ <br>case WM_INITDIALOG: <br>{ <br>//Store the "this" pointer, since this is a static method <br>CTypesDialog* pThis = (CTypesDialog*)lParam; <br>SetWindowLong(hWnd, GWL_USERDATA, (LONG)pThis); <br> <br>//On INIT we know we have a valid hWnd to store <br>pThis-&gt;m_hWnd = hWnd; <br> <br>//Tell TableCopy to Map the Types from the Source-&gt;Target <br>//If MapTypes fails, end the app, (ie: same as hitting CANCEL) <br>if(FAILED(pThis-&gt;m_pCTableCopy-&gt;MapTypes())) <br>EndDialog(hWnd, IDCANCEL); <br> <br>//Set Horizontal ScrollBar dimensions <br>SendDlgItemMessage(hWnd, IDL_FROM_DATA_TYPES, LB_SETHORIZONTALEXTENT, (WPARAM)120*4, (LPARAM)0); <br>SendDlgItemMessage(hWnd, IDL_TO_DATA_TYPES, LB_SETHORIZONTALEXTENT, (WPARAM)120*4, (LPARAM)0); <br> <br>// Now Display the lists of Mappings <br>pThis-&gt;RefreshLists(); <br>CenterDialog(hWnd); <br>return HANDLED_MSG; <br>} <br> <br>case WM_COMMAND: <br>{ <br>// All buttons are handled the same way <br> <br>//Obtain the "this" pointer <br>CTypesDialog* pThis = (CTypesDialog*)GetWindowLong(hWnd, GWL_USERDATA); <br> <br>switch(GET_WM_COMMAND_ID(wParam, lParam))  <br>{ <br>                case IDOK: <br>//Now copy the Tables, End the Dialog first, so the user <br>//can't still acess it while the copiing is going on... <br>EndDialog(hWnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>pThis-&gt;m_pCTableCopy-&gt;CopyTables(); <br>                return HANDLED_MSG; <br>                 <br>case IDCANCEL: <br>case IDB_PREV: <br>EndDialog(hWnd, GET_WM_COMMAND_ID(wParam, lParam)); <br>                return HANDLED_MSG; <br>                 <br>                case IDL_FROM_DATA_TYPES: <br>                switch(GET_WM_COMMAND_CMD(wParam, lParam)) <br>{ <br>case LBN_SELCHANGE: <br>SyncSibling(GetDlgItem(hWnd,IDL_TO_DATA_TYPES), GetDlgItem(hWnd,IDL_FROM_DATA_TYPES)); <br>                return HANDLED_MSG; <br>} <br> <br>                case IDL_TO_DATA_TYPES: <br>                switch(GET_WM_COMMAND_CMD(wParam, lParam)) <br>{ <br>case LBN_SELCHANGE: <br>SyncSibling(GetDlgItem(hWnd,IDL_FROM_DATA_TYPES), GetDlgItem(hWnd,IDL_TO_DATA_TYPES)); <br>                return HANDLED_MSG; <br>} <br>} <br>} <br>} <br> <br>return UNHANDLED_MSG; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// BOOL CTypesDialog::RefreshLists <br>// <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CTypesDialog::RefreshLists() <br>{ <br>HWNDhWndFrom;// From data types <br>HWNDhWndTo;// To data types <br> <br>WCHARwszType[MAX_NAME_LEN];// Buffer for type value <br>WCHARwszBuffer[MAX_NAME_LEN];// Buffer for type value <br> <br>CTable* pCFromTable = m_pCTableCopy-&gt;m_pCFromTable; <br>CTable* pCToTable = m_pCTableCopy-&gt;m_pCToTable; <br> <br>//Set the TABLENAME / DSN for Source <br>wSetDlgItemText(m_hWnd, IDT_FROM_DSN, wsz_FROM_TABLE_DSN_, pCFromTable-&gt;m_wszQualTableName, pCFromTable-&gt;m_pCDataSource-&gt;m_pwszDataSource); <br> <br>//Set the TABLENAME / DSN for Target <br>wSetDlgItemText(m_hWnd, IDT_TO_DSN, wsz_TO_TABLE_DSN_, pCToTable-&gt;m_wszQualTableName, pCToTable-&gt;m_pCDataSource-&gt;m_pwszDataSource); <br> <br>// Get window handles to speed up the population <br>hWndFrom = GetDlgItem(m_hWnd, IDL_FROM_DATA_TYPES); <br>hWndTo = GetDlgItem(m_hWnd, IDL_TO_DATA_TYPES); <br> <br>// Now populate each list <br>for(ULONG i=0;  i&lt;pCFromTable-&gt;m_cColumns; i++)  <br>{ <br>// Format both values and add them to the list <br>wcscpy(wszType, pCFromTable-&gt;m_rgColDesc[i].wszTypeName); <br>ULONG ulParamFlag = pCFromTable-&gt;m_rgColDesc[i].ulCreateParams; <br> <br>// Add the Precision/Scale info <br>if(ulParamFlag &amp; CP_LENGTH) <br>{ <br>swprintf(wszBuffer, L"(%lu)", COLINFO_SIZE(pCFromTable-&gt;m_rgColDesc[i])); <br>wcscat(wszType, wszBuffer); <br>} <br>else if(ulParamFlag &amp; CP_PRECISION &amp;&amp; ulParamFlag &amp; CP_SCALE) <br>{ <br>swprintf(wszBuffer, L"(%lu,%lu)", COLINFO_SIZE(pCFromTable-&gt;m_rgColDesc[i]), pCFromTable-&gt;m_rgColDesc[i].bScale); <br>wcscat(wszType, wszBuffer); <br>} <br> <br>// Send the Entire String to the Window <br>swprintf(wszBuffer, wsz_TYPE_FORMAT_,  <br>pCFromTable-&gt;m_rgColDesc[i].wszColName,wszType, <br>GetDBTypeName(pCFromTable-&gt;m_rgColDesc[i].wType)); <br>wSendMessage(hWndFrom, LB_ADDSTRING, (WPARAM)0, wszBuffer); <br> <br> <br>// Format the To type info <br>wcscpy(wszType, pCToTable-&gt;m_rgColDesc[i].wszTypeName); <br>ulParamFlag = pCToTable-&gt;m_rgColDesc[i].ulCreateParams; <br> <br>// Add the Precision/Scale info <br>if(ulParamFlag &amp; CP_LENGTH) <br>{ <br>swprintf(wszBuffer, L"(%lu)", COLINFO_SIZE(pCToTable-&gt;m_rgColDesc[i])); <br>wcscat(wszType, wszBuffer); <br>} <br>else if(ulParamFlag &amp; CP_PRECISION &amp;&amp; ulParamFlag &amp; CP_SCALE) <br>{ <br>swprintf(wszBuffer, L"(%lu,%lu)", COLINFO_SIZE(pCToTable-&gt;m_rgColDesc[i]), pCToTable-&gt;m_rgColDesc[i].bScale); <br>wcscat(wszType, wszBuffer); <br>} <br> <br>// Send the Entire String to the Window <br>swprintf(wszBuffer, wsz_TYPE_FORMAT_,  <br>pCToTable-&gt;m_rgColDesc[i].wszColName, wszType, <br>GetDBTypeName(pCToTable-&gt;m_rgColDesc[i].wType)); <br>wSendMessage(hWndTo, LB_ADDSTRING, (WPARAM)0, wszBuffer); <br>} <br>return TRUE; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRTSESS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2317"></a>CRTSESS.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module CRTSESS.CPP | IDBCreateSession interface implementation <br>// <br> <br>// Includes ------------------------------------------------------------------ <br> <br>#include "headers.h" <br> <br> <br>// Code ---------------------------------------------------------------------- <br> <br>// CImpIDBCreateSession::CreateSession ------------------------------------------------ <br>// <br>// @mfunc Creates a new DB Session object from the DSO, and returns the <br>// requested interface on the newly created object. <br>// <br>// @rdesc HRESULT <br>//      @flag S_OK                  | The method succeeded. <br>//      @flag E_INVALIDARG          | ppDBSession was NULL <br>//      @flag DB_E_NOAGGREGATION    | pUnkOuter was not NULL (this object does not support <br>//                                    being aggregated) <br>//      @flag E_FAIL                | Provider-specific error. This provider can only create <br>//                                    one DBSession <br>//      @flag E_OUTOFMEMORY         | Out of memory <br>//      @flag E_NOINTERFACE         | Could not obtain requested interface on DBSession object <br>// <br>STDMETHODIMP CImpIDBCreateSession::CreateSession <br>    ( <br>    IUnknown*   pUnkOuter,  //@parm IN | Controlling IUnknown if being aggregated  <br>    REFIID      riid,       //@parm IN | The ID of the interface  <br>    IUnknown**  ppDBSession //@parm OUT | A pointer to memory in which to return the interface pointer <br>    ) <br>{ <br>    CDBSession* pDBSession = NULL; <br>    HRESULT hr; <br> <br>    // check in-params and NULL out-params in case of error <br>    if (ppDBSession) <br>        *ppDBSession = NULL; <br>    else <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    if (pUnkOuter) <br>        return ResultFromScode( DB_E_NOAGGREGATION ); <br> <br>    assert( m_pObj ); <br> <br>    // this Data Source object can only create 1 DBSession... <br>    if (m_pObj-&gt;m_fDBSessionCreated) <br>        return ResultFromScode( E_FAIL ); <br> <br>    // open a DBSession object <br>    pDBSession = new CDBSession( NULL ); <br>    if (!pDBSession) <br>        return ResultFromScode( E_OUTOFMEMORY ); <br> <br>    // initialize the object <br>    if (!pDBSession-&gt;FInit( m_pObj-&gt;m_szPath, m_pObj )) <br>        { <br>        delete pDBSession; <br>        return ResultFromScode( E_FAIL ); <br>        } <br> <br>    // get requested interface pointer on DBSession <br>    hr = pDBSession-&gt;QueryInterface( riid, (void **) ppDBSession ); <br>    if (FAILED( hr )) <br>        { <br>        delete pDBSession; <br>        return ResultFromScode( hr ); <br>        } <br> <br>    // all went well <br>    m_pObj-&gt;m_fDBSessionCreated = TRUE; <br>    return ResultFromScode( S_OK ); <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

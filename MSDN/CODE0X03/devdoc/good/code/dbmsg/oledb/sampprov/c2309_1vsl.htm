<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXTBUFF.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2325"></a>EXTBUFF.H</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module EXTBUFF.H | Class Definitions for CExtBuffer Class <br>// <br>// <br>#ifndef _EXTBUFF_H_ <br>#define _EXTBUFF_H_ <br> <br>// Forward Declaration <br>class FAR CExtBuffer; <br>typedef CExtBuffer FAR *LPEXTBUFFER; <br> <br> <br>//-------------------------------------------------------------------- <br>// @class Allocates and manages fixed sized block memory routines <br>//  <br>// @hungarian ext or pext <br>// <br>class FAR CExtBuffer <br>{ <br>private: //@access private <br>//@cmember Current count of items <br>ULONG    m_cbItem; <br>//@cmember Item size, in bytes <br>ULONG    m_cItem; <br>//@cmember Reserved byte count <br>ULONG    m_cbReserved; <br>//@cmember Allocated byte count <br>ULONG    m_cbAlloc; <br>//@cmember increment value <br>ULONG    m_dbAlloc; <br>//@cmember Ptr to beginning of buffer <br>BYTE     *m_rgItem; <br> <br> <br>private: <br>// Not implemented; private so dcl prevents generation. <br>CExtBuffer( const CExtBuffer &amp; p); <br>CExtBuffer&amp; operator=(const CExtBuffer &amp; p); <br> <br>public://@access public <br>//@cmember Construcutor <br>CExtBuffer ( void ); <br>//@cmember Destructor <br>~CExtBuffer ( void ); <br>//@cmember Calculated data pointer from index value <br>void * operator[] (ULONG nIndex); <br>//@cmember Initialize the fixed size buffer <br>STDMETHODIMP FInit (ULONG cItemMax, ULONG cbItem, ULONG cbPage); <br>//@cmember Add new items to the buffer <br>STDMETHODIMP InsertIntoExtBuffer (VOID* pvItem, ULONG &amp;hItem); <br>//cmember Retrieve items from buffer <br>STDMETHODIMP    GetItemOfExtBuffer (ULONG hItem,VOID* pvItem); <br>//@cmember Get usage extent indexes <br>STDMETHODIMP    GetFirstLastItemH (ULONG &amp;hItemFirst, ULONG &amp;hItemLast); <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

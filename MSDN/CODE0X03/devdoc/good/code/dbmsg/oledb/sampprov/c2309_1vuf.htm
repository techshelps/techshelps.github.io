<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPNROWST.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2337"></a>OPNROWST.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module OPNROWST.CPP | IOpenRowset interface implementation <br>// <br> <br>// Includes ------------------------------------------------------------------ <br> <br>#include "headers.h" <br> <br> <br>// Code ---------------------------------------------------------------------- <br> <br> <br> <br>// CImpIOpenRowset::OpenRowset ------------------------------------------------ <br>// <br>// @mfunc Opens and returns a rowset that includes all rows from a single base table <br>// <br>// @rdesc HRESULT <br>//      @flag S_OK                  | The method succeeded <br>//      @flag E_INVALIDARG          | pTableID was NULL <br>//      @flag E_FAIL                | Provider-specific error <br>//      @flag DB_E_NOTABLE          | Specified table does not exist in current Data <br>//                                  | Data Source object <br>//      @flag E_OUTOFMEMORY         | Out of memory <br>//      @flag E_NOINTERFACE         | The requested interface was not available <br> <br>STDMETHODIMP CImpIOpenRowset::OpenRowset <br>    ( <br>    IUnknown*                   pUnkOuter,          //@parm IN    | Controlling unknown, if any <br>    DBID*                       pTableID,           //@parm IN    | table to open <br>DBID*pIndexID,//@parm IN  | DBID of the index <br>    REFIID                      riid,               //@parm IN    | interface to return <br>    ULONG                       cProperties,        //@parm IN    | count of properties <br>    DBPROPSETrgProperties[],     //@parm INOUT | array of property values <br>    IUnknown**                  ppRowset            //@parm OUT   | where to return interface <br>    ) <br>{ <br>    int  cCharsCopied; <br>    char szFileName[MAX_PATH ]; <br>    char szFile[_MAX_PATH ] = ""; <br> <br>    CFileIO*    pFileio = NULL; <br>    CRowset*    pRowset = NULL; <br>    HRESULT     hr; <br> <br>    // NULL out-params in case of error <br>    if( ppRowset ) <br>    *ppRowset = NULL; <br> <br>    // validate in-params <br>    if (pUnkOuter) <br>        return ResultFromScode( DB_E_NOAGGREGATION ); <br> <br>    if (!pTableID &amp;&amp; !pIndexID) <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    if (pTableID-&gt;eKind != DBKIND_NAME || !pTableID-&gt;uName.pwszName) <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    if ((cProperties != 0) &amp;&amp; (!rgProperties)) <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    assert( m_pObj ); <br> <br>    // this DBSession object can only create 1 Rowset object <br>    if (m_pObj-&gt;m_fRowsetCreated) <br>        return ResultFromScode( E_FAIL ); <br> <br>    // get file name <br>    cCharsCopied = WideCharToMultiByte( CP_ACP, 0, pTableID-&gt;uName.pwszName, -1, <br>                        szFileName, sizeof( szFileName ), NULL, NULL ); <br>    if (!cCharsCopied) <br>        return ResultFromScode( E_FAIL ); <br> <br>    // Concatenate the path and filename <br>    lstrcat( szFile, m_pObj-&gt;m_szPath ); <br>    lstrcat( szFile, "\\" ); <br>    lstrcat( szFile, szFileName ); <br> <br>    // open and initialize a file object <br>    pFileio = new CFileIO(); <br>    if (!pFileio) <br>        return ResultFromScode( E_OUTOFMEMORY ); <br> <br>    hr = pFileio-&gt;fInit( szFile ); <br>    if (FAILED( hr )) <br>        { <br>        delete pFileio; <br>        return ResultFromScode( E_FAIL ); <br>        } <br> <br>    // open and initialize a rowset\cursor object <br>    pRowset = new CRowset( NULL ); <br>    if (!pRowset) <br>        { <br>        delete pFileio; <br>        return ResultFromScode( E_OUTOFMEMORY ); <br>        } <br>    // Initialize the rowset\cursor. <br>    // For now, since don't yet support "setable" properties, so no properties to pass. <br>    // The rowset will always create all of its interfaces. <br>    // This is all-or-nothing. <br>    if (!pRowset-&gt;FInit( pFileio )) <br>        { <br>        delete pFileio; <br>        delete pRowset; <br>        return ResultFromScode( DB_E_NOTABLE ); <br>        } <br>//At this point we have handed off the pFileio pointer to the sample <br>//provider so null it out. <br>pFileio = NULL; <br> <br>    // get requested interface pointer on rowset\cursor <br>    hr = pRowset-&gt;QueryInterface( riid, (void **) ppRowset ); <br>    if (FAILED( hr )) <br>    { <br>    delete pRowset; <br>    delete pFileio; <br> <br>// After a call to QI we still want to return S_OK, <br>// if the ppRowset was NULL because Execution was to happen <br>// we just don't want to return a result set. <br>if( ppRowset == NULL ) <br>return ResultFromScode(S_OK); <br>else <br>        return ResultFromScode( E_NOINTERFACE ); <br>    } <br> <br>    // all went well <br>    m_pObj-&gt;m_fRowsetCreated = TRUE; <br>//Assign creator pointer. Used for IRosetInfo::GetSpecificetion <br>    pRowset-&gt;m_pCreator = m_pObj;      <br>pRowset-&gt;m_pCreator-&gt;AddRef(); <br>    return ResultFromScode( S_OK ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

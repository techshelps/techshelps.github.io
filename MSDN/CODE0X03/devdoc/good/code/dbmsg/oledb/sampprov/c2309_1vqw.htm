<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATASRC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2318"></a>DATASRC.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module DATASRC.CPP | CDataSource object implementation <br>// <br>// <br> <br>// Includes ------------------------------------------------------------------ <br> <br>#include "headers.h" <br> <br> <br>// Code ---------------------------------------------------------------------- <br> <br>// CDataSource::CDataSource -------------------------------------------------- <br>// <br>// @mfunc Constructor for this class <br>// <br>// @rdesc NONE <br>// <br>CDataSource::CDataSource <br>    ( <br>    LPUNKNOWN pUnkOuter         //@parm IN | Outer Unkown Pointer <br>    ) <br>{ <br> <br>    //  Initialize simple member vars <br>    m_cRef              = 0L; <br>    m_pUnkOuter         = pUnkOuter; <br>    *m_szPath           = '\0'; <br>    m_fDSOInitialized   = FALSE; <br>    m_fDBSessionCreated = FALSE; <br>    m_pUtilProp         = NULL; <br> <br>    //  Initially, NULL all contained interfaces <br>    m_pIDBInitialize    = NULL; <br>    m_pIDBProperties= NULL; <br>    m_pIDBInfo= NULL; <br>m_pIDBCreateSession = NULL; <br> <br>    // Increment global object count. <br>    OBJECT_CONSTRUCTED(); <br> <br>    return; <br>} <br> <br> <br>// CDataSource::~CDataSource ------------------------------------------------- <br>// <br>// @mfunc Destructor for this class <br>// <br>// @rdesc NONE <br>// <br>CDataSource:: ~CDataSource <br>    ( <br>    void <br>    ) <br>{ <br>ULONGulRefCount; <br> <br>// Decrement the ref count on the data conversion object <br>if( g_pIDataConvert ) <br>{ <br>ulRefCount = g_pIDataConvert-&gt;Release(); <br> <br>// Is it gone for good? <br>if( !ulRefCount ) <br>g_pIDataConvert = NULL; <br>} <br> <br>    // Free properties management object <br>    delete m_pUtilProp; <br> <br>    //  Free contained interfaces <br>    delete m_pIDBInitialize; <br>    delete m_pIDBProperties; <br>    delete m_pIDBInfo; <br>delete m_pIDBCreateSession; <br> <br>    // Decrement global object count. <br>    OBJECT_DESTRUCTED(); <br> <br>    return; <br>} <br> <br> <br>// CDataSource::FInit -------------------------------------------------------- <br>// <br>// @mfunc Initialize the command Object <br>// <br>// @rdesc Did the Initialization Succeed <br>//      @flag  TRUE | Initialization succeeded <br>//      @flag  FALSE | Initialization failed <br>// <br>BOOL CDataSource::FInit <br>    ( <br>    void <br>    ) <br>{ <br>HRESULThr; <br>    LPUNKNOWN   pIUnknown = (LPUNKNOWN) this; <br> <br>    if (m_pUnkOuter) <br>        pIUnknown = m_pUnkOuter; <br> <br>// Instantiate the data conversion service object <br>if( !g_pIDataConvert ) <br>{ <br>hr = CoCreateInstance(CLSID_OLEDB_CONVERSIONLIBRARY, <br>  NULL, <br>  CLSCTX_INPROC_SERVER, <br>  IID_IDataConvert, <br>  (void **)&amp;g_pIDataConvert); <br>if( FAILED(hr) ) <br>return FALSE; <br>} <br>else <br>// Already instantiated, increment reference count <br>g_pIDataConvert-&gt;AddRef(); <br> <br>    // Allocate properties management object <br>    m_pUtilProp = new CUtilProp(); <br> <br>    //  Allocate contained interface objects <br>    m_pIDBInitialize    = new CImpIDBInitialize( this, pIUnknown ); <br>    m_pIDBProperties= new CImpIDBProperties( this, pIUnknown ); <br>m_pIDBInfo= new CImpIDBInfo( this, pIUnknown ); <br>    m_pIDBCreateSession = new CImpIDBCreateSession( this, pIUnknown ); <br> <br>    return (BOOL) (m_pIDBInitialize &amp;&amp; <br>   m_pIDBInfo &amp;&amp; <br>                   m_pIDBProperties&amp;&amp; <br>                   m_pIDBCreateSession); <br>} <br> <br> <br>// CDataSource::QueryInterface ----------------------------------------------- <br>// <br>// @mfunc Returns a pointer to a specified interface. Callers use <br>// QueryInterface to determine which interfaces the called object <br>// supports. <br>// <br>// @rdesc HRESULT indicating the status of the method <br>//      @flag S_OK          | Interface is supported and ppvObject is set. <br>//      @flag E_NOINTERFACE | Interface is not supported by the object <br>//      @flag E_INVALIDARG  | One or more arguments are invalid. <br>// <br>STDMETHODIMP CDataSource::QueryInterface <br>    ( <br>    REFIID riid,    //@parm IN | Interface ID of the interface being queried for. <br>    LPVOID * ppv    //@parm OUT | Pointer to interface that was instantiated <br>    ) <br>{ <br>    // Is the pointer bad? <br>    if (ppv == NULL) <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    //  Place NULL in *ppv in case of failure <br>    *ppv = NULL; <br> <br>    //  This is the non-delegating IUnknown implementation <br>    if (riid == IID_IUnknown) <br>        *ppv = (LPVOID) this; <br>    else if (riid == IID_IDBInitialize) <br>        *ppv = (LPVOID) m_pIDBInitialize; <br>else if (riid == IID_IDBInfo) <br>*ppv = (LPVOID) m_pIDBInfo; <br>else if (riid == IID_IDBProperties) <br>        *ppv = (LPVOID) m_pIDBProperties; <br>    else if (riid == IID_IDBCreateSession) <br>        *ppv = (LPVOID) m_pIDBCreateSession; <br> <br>    //  If we're going to return an interface, AddRef it first <br>    if (*ppv) <br>        { <br>        ((LPUNKNOWN) *ppv)-&gt;AddRef(); <br>        return ResultFromScode( S_OK ); <br>        } <br>    else <br>        return ResultFromScode( E_NOINTERFACE ); <br>} <br> <br> <br>// CDataSource::AddRef ------------------------------------------------------- <br>// <br>// @mfunc Increments a persistence count for the object <br>// <br>// @rdesc Current reference count <br>// <br>STDMETHODIMP_( ULONG ) CDataSource::AddRef <br>     ( <br>     void <br>     ) <br>{ <br>    return ++m_cRef; <br>} <br> <br> <br>// CDataSource::Release ------------------------------------------------------ <br>// <br>// @mfunc Decrements a persistence count for the object and if <br>// persistence count is 0, the object destroys itself. <br>// <br>// @rdesc Current reference count <br>// <br>STDMETHODIMP_( ULONG ) CDataSource::Release <br>     ( <br>     void <br>     ) <br>{ <br>    if (!--m_cRef) <br>        { <br>        delete this; <br>        return 0; <br>        } <br> <br>    return m_cRef; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HASHTBL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2333"></a>HASHTBL.H</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider  <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @module hashtbl.h | Class Definitions for CHashTbl Class and  <br>// miscellaneous bookmark functions <br>// <br>// <br>#ifndef _HASHTBL_H_ <br>#define _HASHTBL_H_ <br>#include "bitarray.h" <br> <br>#define SIZE_64K   65535// Actually 64*1024-1 <br> <br> <br>// This defines the data as stored within the row buffer. <br>// Each row has columns laid out sequentially. <br>// Use 'offsetof' when doing pointer addition. <br>// Note that it is important to align these. <br>// Suggest ensuring quadword alignment for double and __int64. <br> <br>typedef struct _COLUMNDATA { <br>SDWORDdwLength;// length of data (not space allocated) <br>DWORDdwStatus;// status of column <br>BYTEbData[1];// data here and beyond <br>} COLUMNDATA, *PCOLUMNDATA; <br> <br>// This is the layout of a row. <br>// Note the unique arrangement of the hash chain pointers  <br>// inside the row itself. <br>// Note also that the structure for columns is defined, and <br>// each row contains an array of columns. <br>// Bookmarks are named separately from ColumnData, for clarity <br>// of usage.  The layout directly matches COLUMNDATA, however. <br>// There are asserts which enforce this. <br>typedef struct tagRowBuff <br>{ <br>ULONG       ulRefCount;// reference count of outstanding handles <br>ULONG       irowbuffNext;// next row in bookmark hash chain <br>USHORT      wBmkHash;// hash value (redundant) <br>VOID       *pbBmk;// ptr  to bookmark <br>ULONG       cbBmk;// (dwLength) bookmark size, in bytes <br>ULONG       dwBmkStatus;// (dwStatus) bookmark status <br>ULONG       dwBmk;// (bData)    bookmark value, , maybe row count <br>COLUMNDATA  cdData[1];// Column data here and beyond (Bookmark should be here) <br>} ROWBUFF, *PROWBUFF; <br> <br>typedef struct tagSLOT <br>{ <br>ULONG islotNext; <br>ULONG islotPrev; <br>ULONG cslot; <br>} SLOT, *PSLOT; <br> <br>typedef struct tagLSTSLOT <br>{ <br>ULONG       islotFirst; <br>ULONG       islotRov; <br>ULONG       islotMin; <br>ULONG       islotMax; <br>BYTE        *rgslot; <br>LPBITARRAYpbitsSlot;// bit array to mark active rows <br>ULONG       cbExtra; <br>ULONG       cbslotLeftOver; <br>ULONG       cbSlot; <br>ULONG       cbPage; <br>ULONG       cbCommitCurrent; <br>ULONG       cbCommitMax; <br>} LSTSLOT, *PLSTSLOT; <br> <br> <br>HRESULT GetNextSlots(PLSTSLOT plstslot,ULONG cslot, ULONG* pislot); <br>VOID DecoupleSlot(PLSTSLOT plstslot, ULONG islot, PSLOT pslot); <br>VOID AddSlotToList(PLSTSLOT plstslot, ULONG islot, PSLOT pslot); <br>HRESULT ReleaseSlots(PLSTSLOT plstslot,ULONG islot, ULONG cslot); <br>HRESULT InitializeSlotList(ULONG cslotMax, ULONG cbSlot, ULONG cbPage, LPBITARRAY pbits, PLSTSLOT* pplstslot, BYTE** prgslot); <br>HRESULT ResetSlotList(PLSTSLOT plstslot); <br>HRESULT ReleaseSlotList(PLSTSLOT plstslot); <br> <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

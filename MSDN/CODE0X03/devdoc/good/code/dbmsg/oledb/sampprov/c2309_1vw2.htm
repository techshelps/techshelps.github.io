<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ROWSET.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2342"></a>ROWSET.H</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider  <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc  <br>// <br>// @module ROWSET.H | CRowset base object and contained interface <br>// definitions <br>// <br>// <br>#ifndef _ROWSET_H_ <br>#define _ROWSET_H_ <br> <br> <br>#include "fileio.h" <br>#include "bitarray.h" <br>#include "extbuff.h" <br>#include "hashtbl.h" <br> <br>#include "dbsess.h" <br> <br>// Forward declarations ------------------------------------------------------ <br> <br>class CImpIRowset; <br>class CImpIRowsetChange; <br>class CImpIColumnsInfo; <br>class CImpIAccessor; <br>class CImpIRowsetInfo; <br> <br>typedef CImpIRowset*PIMPIROWSET; <br>typedef CImpIRowsetChange*PIMPIROWSETCHANGE; <br>typedef CImpIColumnsInfo*PIMPICOLUMNSINFO; <br>typedef CImpIAccessor *PIMPIACCESSOR; <br>typedef CImpIRowsetInfo*PIMPIROWSETINFO; <br> <br> <br>// General Helper Function <br>HRESULT GetInternalTypeFromCSVType(SWORD swDataType, BOOL fIsSigned, DWORD* pdwdbType); <br> <br> <br>// Classes ------------------------------------------------------------------- <br> <br>//---------------------------------------------------------------------------- <br>// @class CRowset | Rowset object. Containing class for all interfaces on the Rowset  <br>// Object <br>// <br>class CRowset : public IUnknown//@base public | IUnknown <br>{ <br>//Contained interfaces are friends <br>friend class CImpIColumnsInfo; <br>friend class CImpIRowset; <br>friend class CImpIRowsetChange; <br>friend class CImpIAccessor; <br>friend class CImpIRowsetInfo; <br> <br>private: //@access private <br>//@cmember Builds DBCOLINFO structures <br>HRESULT GatherColumnInfo(void); <br>//@cmember Creates Helper Classes  <br>HRESULT CreateHelperFunctions(void); <br>//@cmember Returns the Buffer Pointer for the specified row <br>ROWBUFF* GetRowBuff(ULONG iRow); <br>//@cmember Establishes the data area bindings <br>HRESULT Rebind(BYTE* pBase); <br> <br>protected: //@access protected <br>//@cmember File Manipulation Class <br>CFileIO*m_pFileio; <br>//@cmember Count of Columns in Result Set <br>ULONGm_cCols; <br>//@cmember Pointer to Info Array Heap (heap of column name strings) <br>BYTE*m_pbHeap; <br>//@cmember ColumnInfo array <br>DBCOLUMNINFO*m_rgdbcolinfo;      <br>//@cmember how many bytes of the column names heap is in use <br>ULONG           m_cbHeapUsed; <br>//@cmember column offsets in SampProv's buffer <br>ULONG*m_rgdwDataOffsets; <br>//@cmember if type is signed <br>BOOL*m_rgfIsSigned; <br>//@cmember length of buffer slots for column data  <br>SDWORD*m_rgcbLen; <br>//@cmember array of accessor ptrs <br>LPEXTBUFFER     m_pextbufferAccessor; <br>//@cmember internal buffer structure <br>PLSTSLOT        m_pIBuffer;          <br>//@cmember bit array to mark active rows <br>LPBITARRAYm_prowbitsIBuffer; <br>//@cmember size of row in the buffer <br>ULONG           m_cbRowSize;         <br>//@cmember points to the first buffered row  <br>BYTE*m_rgbRowData;       <br>//@cmember index of the first available rowbuffer <br>ULONG           m_irowMin;           <br>//@cmember current # of rows in the buffer <br>ULONG           m_cRows; <br>//@cmember position in the resultset <br>ULONG           m_irowFilePos; <br>//@cmember Start of the rowset <br>ULONGm_irowLastFilePos; <br>//@cmember status word for the entire cursor <br>UDWORD          m_dwStatus;          <br>//@cmember remember last binding location <br>BYTE*m_pLastBindBase; <br>//@cmember RefCount of all outstanding row handles <br>ULONG           m_ulRowRefCount; <br>        //@member Utility object to manage properties <br>        PCUTILPROP                      m_pUtilProp; <br>         <br>                        <br>// Interface and OLE Variables <br> <br>//@cmember Reference count <br>ULONGm_cRef; <br>//@cmember Controlling IUnknown <br>LPUNKNOWNm_pUnkOuter; <br>//@cmember Contained IColumnsInfo <br>PIMPICOLUMNSINFOm_pIColumnsInfo; <br>//@cmember Contained IRowset <br>PIMPIROWSETm_pIRowset; <br>//@cmember Contained IRowsetChange <br>PIMPIROWSETCHANGEm_pIRowsetChange; <br>//@cmember Contained IAccessor <br>PIMPIACCESSORm_pIAccessor; <br>//@cmember Contained IRowsetInfo <br>PIMPIROWSETINFOm_pIRowsetInfo; <br> <br>public: //@access public <br>//@cmember Constructor <br> CRowset(LPUNKNOWN); <br>//@cmember Destructor <br>~CRowset(void); <br> <br>//@cmember Intitialization Routine <br>BOOL FInit(CFileIO*); <br> <br>//Object's base IUnknown <br>//@cmember Request an Interface <br>STDMETHODIMPQueryInterface(REFIID, LPVOID *); <br>//@cmember Increments the Reference count <br>STDMETHODIMP_(ULONG)AddRef(void); <br>//@cmember Decrements the Reference count <br>STDMETHODIMP_(ULONG)Release(void); <br> <br>//Back pointer to a creator object. Used in IRowssetInfo::GetSpecification <br>PCDBSESSION                     m_pCreator;   <br>}; <br> <br>typedef CRowset *PCROWSET; <br> <br> <br>//---------------------------------------------------------------------------- <br>// @class CImpIRowset | Contained IRowset class <br>// <br>class CImpIRowset : public IRowset//@base public | IRowset <br>{ <br>private: //@access private <br>DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CRowset) <br> <br>public: //@access public <br> DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CRowset, CImpIRowset); <br>DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br> <br>//IRowset members <br>//@cmember GetData Method <br>STDMETHODIMPGetData(HROW, HACCESSOR, void*); <br>//@cmember GetNextRows Method <br>STDMETHODIMPGetNextRows(HCHAPTER, LONG, LONG, ULONG*, HROW**); <br>        //cmember ReleaseRows method <br>STDMETHODIMPReleaseRows(ULONG, const HROW[], DBROWOPTIONS[], ULONG[], DBROWSTATUS[]); <br>        //@cmember RestartPosition method <br>STDMETHODIMPRestartPosition(HCHAPTER); <br>        //@cmember AddRefRows method <br>        STDMETHODIMP            AddRefRows(ULONG, const HROW[], ULONG[], DBROWSTATUS[]); <br> <br>}; <br> <br> <br>//---------------------------------------------------------------------------- <br>// @class CImpIRowsetChange | Contained IRowsetChange class <br>// <br>class CImpIRowsetChange : public IRowsetChange//@base public | IRowsetChange <br>{ <br>private: //@access private <br>DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CRowset) <br> <br>public: //@access public <br> <br> DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CRowset, CImpIRowsetChange); <br>DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br> <br>//IRowsetChange members <br>//@cmember SetData Method <br>    STDMETHODIMPSetData(HROW, HACCESSOR, void*); <br>    STDMETHODIMPDeleteRows(HCHAPTER, ULONG, const HROW[], DBROWSTATUS[]); <br>STDMETHODIMP    InsertRow <br>    ( <br>    HCHAPTERhReserved, <br>HACCESSORhAccessor, <br>void*pData, <br>HROW*phRow <br>); <br>}; <br> <br> <br>//---------------------------------------------------------------------------- <br>// @class CImpIColumnsInfo | Contained IColumnsInfo class <br>// <br>class CImpIColumnsInfo : public IColumnsInfo //@base public | IColumnsInfo <br>{ <br>private: //@access private <br>DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CRowset) <br> <br>public: //@access public <br> DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CRowset, CImpIColumnsInfo); <br>DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br> <br>//IColumnsInfo members <br>//@cmember GetColumnInfo method <br>    STDMETHODIMPGetColumnInfo(ULONG*, DBCOLUMNINFO**, WCHAR**); <br>//@cmember MapColumnIDs <br>STDMETHODIMPMapColumnIDs(ULONG, const DBID[], ULONG[]); <br>}; <br> <br>//---------------------------------------------------------------------------- <br>// @class CImpIAccessor | Contained IAccessor class <br>// <br>class CImpIAccessor : public IAccessor //@base public | IAccessor <br>{ <br>private: //@access private <br>DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CRowset) <br> <br>public: //@access public <br> DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CRowset, CImpIAccessor); <br>DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br> <br>//@cmember Increment Reference count on accessor <br>STDMETHODIMPAddRefAccessor(HACCESSOR hAccessor, ULONG* pcRefCounts); <br>//@cmember CreateAccessor Method <br>    STDMETHODIMPCreateAccessor(DBACCESSORFLAGS, ULONG, const DBBINDING[], ULONG, HACCESSOR*, DBBINDSTATUS[]); <br>//@cmember GetBindings Method <br>STDMETHODIMPGetBindings(HACCESSOR, DBACCESSORFLAGS*, ULONG*, DBBINDING**); <br>//@cmember ReleaseAccessor Method <br>STDMETHODIMPReleaseAccessor(HACCESSOR, ULONG*); <br> <br> <br>}; <br> <br> <br> <br>//---------------------------------------------------------------------------- <br>// @class CImpIRowsetInfo | Contained IRowsetInfo class <br>// <br>class CImpIRowsetInfo : public IRowsetInfo //@base public | IAccessor <br>{ <br>private: //@access private <br>DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CRowset) <br> <br>public: //@access public <br> DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CRowset, CImpIRowsetInfo); <br>DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br> <br>//@cmember GetReferencedRowset <br>STDMETHODIMPGetReferencedRowset <br>( <br>ULONGiOrdinal,  <br>REFIIDrrid, <br>IUnknown**ppReferencedRowset <br>); <br> <br>//@cmember GetProperties <br>STDMETHODIMPGetProperties <br>    ( <br>    const ULONGcPropertySets, <br>    const DBPROPIDSETrgPropertySets[], <br>    ULONG*              pcProperties, <br>    DBPROPSET**prgProperties <br>    ); <br> <br>//@cmember GetSpecification Method <br>STDMETHODIMPGetSpecification(REFIID, IUnknown**); <br>}; <br> <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

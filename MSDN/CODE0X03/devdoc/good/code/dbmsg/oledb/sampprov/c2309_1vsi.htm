<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBSESS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2322"></a>DBSESS.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module DBSESS.CPP | CDBSession object implementation <br>// <br>// <br> <br>// Includes ------------------------------------------------------------------ <br> <br>#include "headers.h" <br> <br> <br>// Code ---------------------------------------------------------------------- <br> <br>// CDBSession::CDBSession -------------------------------------------------- <br>// <br>// @mfunc Constructor for this class <br>// <br>// @rdesc NONE <br>// <br>CDBSession::CDBSession <br>    ( <br>    LPUNKNOWN pUnkOuter         //@parm IN | Outer Unkown Pointer <br>    ) <br>{ <br>    //  Initialize simple member vars <br>    m_cRef              = 0L; <br>    m_pUnkOuter         = pUnkOuter; <br>    *m_szPath           = '\0'; <br>    m_fRowsetCreated    = FALSE; <br> <br>    // Initially, NULL all contained interfaces <br>    m_pIGetDataSource= NULL; <br>    m_pIOpenRowset= NULL; <br> <br>// Pointer to parent object <br>m_pCDataSource= NULL; <br> <br>    // Increment global object count. <br>    OBJECT_CONSTRUCTED(); <br> <br>    return; <br>} <br> <br> <br>// CDBSession::~CDBSession ------------------------------------------------- <br>// <br>// @mfunc Destructor for this class <br>// <br>// @rdesc NONE <br>// <br>CDBSession:: ~CDBSession <br>    ( <br>    void <br>    ) <br>{ <br>    // Free contained interfaces <br>    delete m_pIGetDataSource; <br>    delete m_pIOpenRowset; <br> <br>m_pCDataSource-&gt;Release(); <br>m_pCDataSource-&gt;RemoveSession(); <br> <br>    // Decrement global object count. <br>    OBJECT_DESTRUCTED(); <br> <br>    return; <br>} <br> <br> <br>// CDBSession::FInit -------------------------------------------------------- <br>// <br>// @mfunc Initialize the command Object <br>// <br>// @rdesc Did the Initialization Succeed <br>//      @flag  TRUE | Initialization succeeded <br>//      @flag  FALSE | Initialization failed <br>// <br>BOOL CDBSession::FInit <br>    ( <br>    char*szPath, <br>CDataSource*pCDataSource <br>    ) <br>{ <br>    LPUNKNOWN   pIUnknown = (LPUNKNOWN) this; <br> <br>    if (m_pUnkOuter) <br>        pIUnknown = m_pUnkOuter; <br> <br>    // just make a copy for ourselves. <br>    if (!lstrcpyn( m_szPath, szPath, MAX_PATH )) <br>        return FALSE; <br> <br>// Establish parent object pointer <br>assert( pCDataSource ); <br>m_pCDataSource= pCDataSource; <br> <br>m_pCDataSource-&gt;AddRef(); <br> <br>    // Allocate contained interface objects <br>    m_pIGetDataSource= new CImpIGetDataSource( this, pIUnknown ); <br>    m_pIOpenRowset= new CImpIOpenRowset( this, pIUnknown ); <br>    m_pISessionProperties= new CImpISessionProperties( this, pIUnknown ); <br> <br>    return (BOOL) (m_pIGetDataSource &amp;&amp; m_pIOpenRowset); <br>} <br> <br> <br> <br>// CDBSession::QueryInterface ----------------------------------------------- <br>// <br>// @mfunc Returns a pointer to a specified interface. Callers use <br>// QueryInterface to determine which interfaces the called object <br>// supports. <br>// <br>// @rdesc HRESULT indicating the status of the method <br>//      @flag S_OK          | Interface is supported and ppvObject is set. <br>//      @flag E_NOINTERFACE | Interface is not supported by the object <br>//      @flag E_INVALIDARG  | One or more arguments are invalid. <br>// <br>STDMETHODIMP CDBSession::QueryInterface <br>    ( <br>    REFIID riid,        //@parm IN | Interface ID of the interface being queried for. <br>    LPVOID * ppv        //@parm OUT | Pointer to interface that was instantiated <br>    ) <br>{ <br>    // Is the pointer bad? <br>    if (ppv == NULL) <br>        return ResultFromScode( E_INVALIDARG ); <br> <br>    //  Place NULL in *ppv in case of failure <br>    *ppv = NULL; <br> <br>    //  This is the non-delegating IUnknown implementation <br>    if (riid == IID_IUnknown) <br>        *ppv = (LPVOID) this; <br>else if (!m_pCDataSource-&gt;m_fDSOInitialized) <br>return ResultFromScode(E_UNEXPECTED); <br>    else if (riid == IID_IGetDataSource) <br>        *ppv = (LPVOID) m_pIGetDataSource; <br>    else if (riid == IID_IOpenRowset) <br>        *ppv = (LPVOID) m_pIOpenRowset; <br>    else if (riid == IID_ISessionProperties) <br>        *ppv = (LPVOID) m_pISessionProperties; <br> <br>    //  If we're going to return an interface, AddRef it first <br>    if (*ppv) <br>        { <br>        ((LPUNKNOWN) *ppv)-&gt;AddRef(); <br>        return ResultFromScode( S_OK ); <br>        } <br>    else <br>        return ResultFromScode( E_NOINTERFACE ); <br>} <br> <br> <br>// CDBSession::AddRef ------------------------------------------------------- <br>// <br>// @mfunc Increments a persistence count for the object <br>// <br>// @rdesc Current reference count <br>// <br>STDMETHODIMP_( ULONG ) CDBSession::AddRef <br>     ( <br>     void <br>     ) <br>{ <br>    return ++m_cRef; <br>} <br> <br> <br>// CDBSession::Release ------------------------------------------------------ <br>// <br>// @mfunc Decrements a persistence count for the object and if <br>// persistence count is 0, the object destroys itself. <br>// <br>// @rdesc Current reference count <br>// <br>STDMETHODIMP_( ULONG ) CDBSession::Release <br>     ( <br>     void <br>     ) <br>{ <br>    if (!--m_cRef) <br>        { <br>        delete this; <br>        return 0; <br>        } <br> <br>    return m_cRef; <br>} <br> <br>//----------------------------------------------------------------------------- <br>// CImpIGetDataSource::GetDataSource  <br>// <br>// @mfunc Retrieve an interface pointer on the session object <br>// <br>// @rdesc  <br>//@flag S_OK | Session Object Interface returned <br>//@flag E_INVALIDARG | ppDataSource was NULL <br>//@flag E_NOINTERFACE | IID not supported <br>// <br>STDMETHODIMP CImpIGetDataSource::GetDataSource <br>( <br>REFIIDriid,// @parm IN  | IID desired <br>IUnknown**ppDataSource// @parm OUT | ptr to interface <br>) <br>{ <br>// Check Function Arguments <br>if( ppDataSource == NULL ) <br>return ResultFromScode(E_INVALIDARG); <br> <br>assert( m_pObj-&gt;m_pCDataSource ); <br>return ((m_pObj-&gt;m_pCDataSource)-&gt;QueryInterface(riid, (LPVOID*)ppDataSource)); <br>} <br> <br>// ISessionProperties::GetProperties ---------------------------------------------------- <br>// <br>// @mfunc Returns current settings of all properties in the DBPROPFLAGS_SESSION property  <br>//group <br>// @rdesc HRESULT <br>//      @flag S_OK          | The method succeeded <br>//      @flag E_INVALIDARG  | pcProperties or prgPropertyInfo was NULL <br>//      @flag E_OUTOFMEMORY | Out of memory <br>// <br>STDMETHODIMP CImpISessionProperties::GetProperties <br>    ( <br>    ULONGcPropertySets,//@parm IN | count of restiction guids <br>const DBPROPIDSETrgPropertySets[],//@parm IN | restriction guids <br>ULONG*              pcProperties,//@parm OUT | count of properties returned <br>DBPROPSET**prgProperties//@parm OUT | property information returned <br>    ) <br>{ <br>    assert( m_pObj ); <br>    assert( m_pObj-&gt;m_pUtilProp ); <br> <br>    // just pass this call on to the utility object that manages our properties <br>    return m_pObj-&gt;m_pUtilProp-&gt;GetProperties(  <br>cPropertySets,  <br>rgPropertySets, <br>pcProperties,  <br>prgProperties ); <br>} <br> <br> <br>// CImpISessionProperties::SetProperties  -------------------------------------------- <br>// <br>// @mfunc Set properties in the DBPROPFLAGS_SESSION property group <br>// <br>// @rdesc HRESULT <br>//      @flag E_INVALIDARG  | cProperties was not equal to 0 and rgProperties was NULL <br>//      @flag E_NOTIMPL| this method is not implemented <br>// <br>STDMETHODIMP    CImpISessionProperties::SetProperties <br>    ( <br>    ULONGcProperties, <br>DBPROPSETrgProperties[] <br>) <br>{ <br>    assert( m_pObj ); <br>    assert( m_pObj-&gt;m_pUtilProp ); <br> <br>    // just pass this call on to the utility object that manages our properties <br>    return m_pObj-&gt;m_pUtilProp-&gt;SetProperties(  <br>cProperties,  <br>rgProperties); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

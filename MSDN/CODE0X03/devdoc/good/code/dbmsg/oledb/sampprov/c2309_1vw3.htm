<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPPROV.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2343"></a>SAMPPROV.H</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @module SAMPPROV.H | Main include file <br>// <br>// <br>#ifndef _SAMPPROV_H_ <br>#define _SAMPPROV_H_ <br> <br> <br> <br>// Defines ------------------------------------------------------------------- <br>#ifdef DBINITCONSTANTS <br>#define GLOBAL_(type, name, val) type name = val <br>#else <br>#define GLOBAL_(type, name, val)extern type name <br>#endif <br> <br>#define OBJECT_CONSTRUCTED()InterlockedIncrement(&amp;g_cObj); <br>#define OBJECT_DESTRUCTED()InterlockedDecrement(&amp;g_cObj); <br> <br>#ifndef  MAX <br># define MIN(a,b)  ( (a) &lt; (b) ? (a) : (b) ) <br># define MAX(a,b)  ( (a) &gt; (b) ? (a) : (b) ) <br>#endif <br> <br> <br>#ifndef NUMELEM <br># define NUMELEM(x) (sizeof(x)/sizeof(*x)) <br>#endif <br> <br>#define MAX_HEAP_SIZE          128000 <br>#define MAX_TOTAL_ROWBUFF_SIZE (10*1024*1024)// Max for all row buffers. <br>#define MAX_IBUFFER_SIZE       2000000 <br>#define MAX_BIND_LEN      (MAX_IBUFFER_SIZE/10) <br> <br> <br>#define STAT_ENDOFCURSOR            0x00000100// for forward-only means fully materialized <br> <br> <br>//----------------------------------------------------------------------------- <br>// Memory alignment <br>//----------------------------------------------------------------------------- <br> <br>//++ <br>// Useful rounding macros. <br>// Rounding amount is always a power of two. <br>//-- <br>#define ROUND_DOWN( Size, Amount )  ((DWORD)(Size) &amp; ~((Amount) - 1)) <br>#define ROUND_UP(   Size, Amount ) (((DWORD)(Size) +  ((Amount) - 1)) &amp; ~((Amount) - 1)) <br> <br>//++ <br>// These macros are for aligment of ColumnData within the internal row buffer. <br>// COLUMN_ALIGN takes a ptr where you think data ought to go, <br>// and rounds up to the next appropriate address boundary. <br>// <br>// Rule of thumb is "natural" boundary, i.e. 4-byte member should be <br>// aligned on address that is multiple of 4. <br>// <br>// Most everything should be aligned to 32-bit boundary. <br>// But doubles should be aligned to 64-bit boundary, so let's play it safe. <br>// Also have __int64. <br>//-- <br> <br> <br> <br>// make these symbols a little easier to type\read <br>#if   defined(_M_IX86) <br>#     define X86 <br>#elif defined(_M_MRX000) <br>#     define MIPS <br>#elif defined(_M_ALPHA) <br>#     define ALPHA <br>#elif defined(_M_PPC) <br>#     define PPC <br>#else <br>#     error: Unknown machine type: Not one of {X86,MIPS,ALPHA,PPC}. <br>#endif <br> <br>#ifdef MIPS <br># define COLUMN_ALIGNVAL 8 <br>#elif  defined(ALPHA) <br># define COLUMN_ALIGNVAL 8 <br>#else <br># define COLUMN_ALIGNVAL 8// venerable 80x86 <br>#endif <br> <br> <br>// Typedefs ------------------------------------------------------------------ <br>typedef VOID**LPLPVOID; <br> <br>typedef long int            SDWORD; <br>typedef short int           SWORD; <br>typedef unsigned long int   UDWORD; <br>typedef unsigned short int  UWORD; <br>typedef signed long SLONG; <br>typedef unsigned longULONG; <br>typedef unsigned shortUSHORT; <br> <br> <br> <br>// Accessor Structure <br>typedef struct tagACCESSOR <br>{ <br>    DBACCESSORFLAGS dwAccessorFlags; <br>LONGcRef; <br>ULONGcBindings; <br>DBBINDINGrgBindings[1]; <br>} ACCESSOR, *PACCESSOR; <br> <br> <br> <br> <br>//----------------------------------------------------------------------------- <br>// Macros for interface classes -- IUnknown methods and constructor\destructor <br>// Use these in the class definition for an interface. <br>// The code is defined in the header (definition) part because <br>// it is easier to do so here, and easier to use. <br>// <br>// <br>// @func void | DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA | <br>// Macro to define default IUnknown member data. <br>// <br>// @parm BaseClass | BaseClass | . | Class that is the OLE object. <br>// <br>// @ex Example usage| <br>// <br>//class CImpISomething : public ISomething { <br>//private: <br>//DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(CSomethingBase) <br>//public: <br>//DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(CSomethingBase, CImpISomething) <br>//DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE <br>//... implementation-specific methods ... <br>//}; <br>// <br>#define DEFINE_DEFAULT_IUNKNOWN_MEMBER_DATA(BaseClass)\ <br>DEBUGCODE(ULONG m_cRef);\ <br>BaseClass*m_pObj;\ <br>LPUNKNOWNm_pUnkOuter; <br> <br>// @func void | DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR |  <br>// Macro to define default IUnknown Ctor/Dtor. <br>// <br>// @parm BaseClass | BaseClass      | . | Class that is the OLE object. <br>// <br>// @parm Any class | InterfaceClass | . | OLE interface class that this is part of. <br> <br>#define DEFINE_DEFAULT_IUNKNOWN_CTOR_DTOR(BaseClass, InterfaceClass)\ <br>InterfaceClass( BaseClass *pObj, IUnknown *pUnkOuter )\ <br>{\ <br>DEBUGCODE(m_cRef = 0L);\ <br>m_pObj= pObj;\ <br>m_pUnkOuter= pUnkOuter;\ <br>}\ <br>~InterfaceClass()\ <br>{\ <br>} <br> <br>// @func void | DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE | <br>// Macro to define default IUnknown AddRef/Release. <br> <br>#define DEFINE_DEFAULT_IUNKNOWN_ADDREF_RELEASE\ <br>STDMETHODIMP_(ULONG)AddRef(void)\ <br>{\ <br>DEBUGCODE( ++m_cRef );\ <br>return m_pUnkOuter-&gt;AddRef();\ <br>}\ <br>STDMETHODIMP_(ULONG)Release(void)\ <br>{\ <br>ASSERT( m_cRef &gt; 0 );\ <br>DEBUGCODE( --m_cRef );\ <br>return m_pUnkOuter-&gt;Release();\ <br>}\ <br>STDMETHODIMPQueryInterface(REFIID riid, LPVOID *ppv)\ <br>{\ <br>return m_pUnkOuter-&gt;QueryInterface(riid, ppv);\ <br>} <br> <br> <br> <br> <br> <br>// Globals ------------------------------------------------------------------- <br> <br>GLOBAL_(LONG, g_cObj, 0L);// # of outstanding objects <br>GLOBAL_(LONG, g_cLock, 0L);// # of explicit locks set <br>GLOBAL_(DWORD, g_cAttachedProcesses, 0L);// # of attached processes <br>GLOBAL_(DWORD, g_dwPageSize, 0L);// System page size <br>GLOBAL_(IMalloc *, g_pIMalloc, NULL);// OLE2 task memory allocator <br>GLOBAL_(HINSTANCE, g_hInstance, 0L);// Instance Handle <br>GLOBAL_(IDataConvert *, g_pIDataConvert, NULL);// IDataConvert pointer <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

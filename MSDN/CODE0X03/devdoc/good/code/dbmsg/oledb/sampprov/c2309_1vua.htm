<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HASHTBL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2332"></a>HASHTBL.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft OLE DB Sample Provider <br>// (C) Copyright 1994 - 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @module hashtbl.cpp | Hashing routines for row manipulation. <br>// <br>// <br>#include "headers.h" <br>#include "hashtbl.h" <br> <br> <br> <br>//-------------------------------------------------------------------- <br>// GetNextSlots <br>//  <br>// @func Allocates a contiguous block of the required number of slots. <br>// <br>// @rdesc Returns one of the following values: <br>//      @flag S_OK          | slot allocate succeeded <br>// @flag E_OUTOFMEMORY | slot allocation failed because of memory allocation <br>//  problem  <br>/// <br>HRESULT GetNextSlots <br>    ( <br>    PLSTSLOT plstslot,  //@parm IN | slot list <br>    ULONG cslot,        //@parm IN | needed block size (in slots) <br>    ULONG* pislot       //@parm IN | handle of the first slot in the returned block <br>    ) <br>{ <br>    ULONG   islot, dslot; <br>    PSLOT   pslot, pslotTmp; <br>    ULONG   cbCommit; <br>    HRESULT hr; <br> <br>    if (plstslot-&gt;islotRov) <br>        plstslot-&gt;islotRov = ((PSLOT) &amp; plstslot-&gt;rgslot[plstslot-&gt;islotRov *plstslot-&gt;cbSlot])-&gt;islotNext; <br>    else <br>        plstslot-&gt;islotRov = plstslot-&gt;islotFirst; <br> <br>    islot = plstslot-&gt;islotRov; <br>    while (islot) <br>        { <br>        if (((PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot])-&gt;cslot &gt;= cslot) <br>            break; <br>        islot = ((PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot])-&gt;islotNext; <br>        } <br>    if (islot == 0) <br>        { <br>        islot = plstslot-&gt;islotFirst; <br>        while (islot != plstslot-&gt;islotRov) <br>            { <br>            if (((PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot])-&gt;cslot &gt;= cslot) <br>                break; <br>            islot = ((PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot])-&gt;islotNext; <br>            } <br>        if (islot == plstslot-&gt;islotRov) <br>            islot = 0; <br>        } <br> <br> <br>    if (islot == 0) <br>        { <br>        cbCommit = ((cslot *plstslot-&gt;cbSlot) / plstslot-&gt;cbPage + 1) *plstslot-&gt;cbPage; <br>        if ((plstslot-&gt;cbCommitCurrent + cbCommit) &gt; plstslot-&gt;cbCommitMax <br>            || VirtualAlloc((VOID *) ((BYTE *) plstslot + plstslot-&gt;cbCommitCurrent), <br>                                    cbCommit, <br>                                    MEM_COMMIT, <br>                                    PAGE_READWRITE ) == NULL) <br>            return ResultFromScode( E_OUTOFMEMORY ); <br> <br>        islot = (ULONG) ((plstslot-&gt;cbCommitCurrent + plstslot-&gt;cbExtra) / plstslot-&gt;cbSlot); <br>        dslot = ((cbCommit + plstslot-&gt;cbslotLeftOver) / plstslot-&gt;cbSlot); <br>        if ((plstslot-&gt;pbitsSlot)-&gt;IsSlotSet( islot - 1 ) != NOERROR) <br>            { <br>            if ((plstslot-&gt;pbitsSlot)-&gt;FindSet( islot - 1, plstslot-&gt;islotMin, &amp;islot ) == NOERROR) <br>                islot++; <br>            else <br>                islot = plstslot-&gt;islotMin; <br>            pslot = (PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot]; <br>            pslot-&gt;cslot += dslot; <br>            DecoupleSlot( plstslot, islot, pslot ); <br>            } <br>        else <br>            { <br>            pslot = (PSLOT) ((BYTE *) plstslot + plstslot-&gt;cbCommitCurrent - plstslot-&gt;cbslotLeftOver); <br>            pslot-&gt;cslot = dslot; <br>            } <br> <br>        pslot-&gt;islotNext = plstslot-&gt;islotFirst; <br>        pslot-&gt;islotPrev = 0; <br> <br>        plstslot-&gt;islotMax += dslot; <br>        plstslot-&gt;islotFirst       = islot; <br>        plstslot-&gt;cbslotLeftOver   = (cbCommit + plstslot-&gt;cbslotLeftOver) % plstslot-&gt;cbSlot; <br>        plstslot-&gt;cbCommitCurrent += cbCommit; <br> <br>        if (pslot-&gt;islotNext) <br>            ((PSLOT) &amp; plstslot-&gt;rgslot[pslot-&gt;islotNext *plstslot-&gt;cbSlot])-&gt;islotPrev = islot; <br>        islot = plstslot-&gt;islotFirst; <br>        } <br> <br>    pslot = (PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot]; <br>    DecoupleSlot( plstslot, islot, pslot ); <br>    if (pslot-&gt;cslot &gt; cslot) <br>        { <br>        pslotTmp = (PSLOT) &amp; plstslot-&gt;rgslot[ (islot + cslot) *plstslot-&gt;cbSlot]; <br>        pslotTmp-&gt;cslot = pslot-&gt;cslot - cslot; <br>        AddSlotToList( plstslot, islot + cslot, pslotTmp ); <br>        } <br> <br>    if (FAILED( hr = (plstslot-&gt;pbitsSlot)-&gt;SetSlots( islot, islot + cslot - 1 ))) <br>        return hr; <br> <br>    if (pislot) <br>        *pislot = islot; <br>    return ResultFromScode( S_OK ); <br>} <br> <br> <br> <br>//-------------------------------------------------------------------- <br>// DecoupleSlot <br>// <br>// @func Decouples a slot from the list of free slots <br>// <br>// @rdesc NONE <br>// <br>VOID DecoupleSlot <br>    ( <br>    PLSTSLOT plstslot,  //@parm IN | slot list <br>    ULONG islot,        //@parm IN | slot handle to decouple <br>    PSLOT pslot         //@parm IN | pointer to the slot header <br>    ) <br>{ <br>    if (pslot-&gt;islotNext) <br>        ((PSLOT) &amp; plstslot-&gt;rgslot[pslot-&gt;islotNext *plstslot-&gt;cbSlot])-&gt;islotPrev = pslot-&gt;islotPrev; <br>    if (pslot-&gt;islotPrev) <br>        ((PSLOT) &amp; plstslot-&gt;rgslot[pslot-&gt;islotPrev *plstslot-&gt;cbSlot])-&gt;islotNext = pslot-&gt;islotNext; <br>    else <br>        plstslot-&gt;islotFirst = pslot-&gt;islotNext; <br>    if (islot == plstslot-&gt;islotRov) <br>        plstslot-&gt;islotRov = pslot-&gt;islotNext; <br>} <br> <br> <br>//-------------------------------------------------------------------- <br>// AddSlotToList <br>// <br>// @func Adds a slot to the list of free slots <br>// <br>// @rdesc NONE <br>// <br>VOID AddSlotToList <br>    ( <br>    PLSTSLOT plstslot,  //@parm IN | slot list <br>    ULONG islot,        //@parm IN | slot handle <br>    PSLOT pslot         //@parm IN | pointer to the slot header <br>    ) <br>{ <br>    pslot-&gt;islotPrev = 0; <br>    pslot-&gt;islotNext = plstslot-&gt;islotFirst; <br>    plstslot-&gt;islotFirst = islot; <br>    if (pslot-&gt;islotNext) <br>        ((PSLOT) &amp; plstslot-&gt;rgslot[pslot-&gt;islotNext *plstslot-&gt;cbSlot])-&gt;islotPrev = islot; <br>} <br> <br> <br> <br> <br>//-------------------------------------------------------------------- <br>// ReleaseSlots <br>// <br>// @func Releases a contiguous block of slots. <br>// <br>// @rdesc Returns one of the following values: <br>//      @flag   S_OK | method succeeded <br>// <br>HRESULT ReleaseSlots <br>    ( <br>    PLSTSLOT plstslot,  //@parm IN | slot list <br>    ULONG    islot,     //@parm IN | handle of first slot to release  <br>    ULONG    cslot      //@parm IN | count of slots to release <br>    ) <br>{ <br>    PSLOT pslot, pslotTmp; <br> <br>    (plstslot-&gt;pbitsSlot)-&gt;ResetSlots( islot, islot + cslot - 1 ); <br>    pslot = (PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot]; <br>    pslot-&gt;cslot = cslot; <br> <br>    if (islot &gt; plstslot-&gt;islotMin &amp;&amp; (plstslot-&gt;pbitsSlot)-&gt;IsSlotSet( islot - 1 ) != NOERROR) <br>        { <br>        if ((plstslot-&gt;pbitsSlot)-&gt;FindSet( islot - 1, plstslot-&gt;islotMin, &amp;islot ) == NOERROR) <br>            islot++; <br>        else <br>            islot = plstslot-&gt;islotMin; <br>        pslot = (PSLOT) &amp; plstslot-&gt;rgslot[islot *plstslot-&gt;cbSlot]; <br>        pslot-&gt;cslot += cslot; <br>        DecoupleSlot( plstslot, islot, pslot ); <br>        } <br> <br>    if ((islot + cslot) &lt;= plstslot-&gt;islotMax &amp;&amp; (plstslot-&gt;pbitsSlot)-&gt;IsSlotSet( islot + cslot ) != NOERROR) <br>        { <br>        pslotTmp = (PSLOT) &amp; plstslot-&gt;rgslot[ (islot + cslot) *plstslot-&gt;cbSlot]; <br>        pslot-&gt;cslot += pslotTmp-&gt;cslot; <br>        DecoupleSlot( plstslot, (islot + cslot), pslotTmp ); <br>        } <br> <br>    AddSlotToList( plstslot, islot, pslot ); <br>    return ResultFromScode( S_OK ); <br>} <br> <br> <br>//-------------------------------------------------------------------- <br>// InitializeSlotList <br>// <br>// @func Initializes the Slot List object <br>// <br>// @rdesc Did the initialization succeed <br>//      @flag S_OK          | method succeeded <br>//      @flag E_OUTOFMEMORY | failed, out of memory <br>//            <br>// <br>HRESULT InitializeSlotList <br>    ( <br>    ULONG cslotMax,         //@parm IN | max number of slots <br>    ULONG cbSlot,           //@parm IN | slot size (row buffer size) <br>    ULONG cbPage,           //@parm IN | page size <br>    LPBITARRAY pbits,       //@parm IN |  <br>    PLSTSLOT* pplstslot,    //@parm OUT | pointer to slot list <br>    BYTE** prgslot          //@parm OUT |  <br>    ) <br>{ <br>    ULONG    cbReserve; <br>    BYTE     *pbAlloc; <br>    ULONG    cbCommitFirst; <br>    PLSTSLOT plstslot; <br>    ULONG    cslot, islotFirst; <br>    PSLOT    pslot; <br> <br> <br>    if (cbPage == 0) <br>        { <br>        SYSTEM_INFO sysinfo; <br> <br>        GetSystemInfo( &amp;sysinfo ); <br>        cbPage = sysinfo.dwPageSize; <br>        } <br> <br>    cbReserve = ((cslotMax *cbSlot + sizeof( LSTSLOT )) / cbPage + 1) *cbPage; <br> <br>    pbAlloc = (BYTE *) VirtualAlloc( NULL, cbReserve, MEM_RESERVE, PAGE_READWRITE ); <br>    if (pbAlloc == NULL) <br>        return ResultFromScode( E_OUTOFMEMORY ); <br> <br>    cbCommitFirst = (sizeof( LSTSLOT ) / cbPage + 1) * cbPage; <br>    plstslot = (PLSTSLOT) VirtualAlloc( pbAlloc, cbCommitFirst, MEM_COMMIT, PAGE_READWRITE ); <br>    if (plstslot == NULL) <br>        { <br>        VirtualFree((VOID *) pbAlloc, 0, MEM_RELEASE ); <br>        return ResultFromScode( E_OUTOFMEMORY ); <br>        } <br> <br>    plstslot-&gt;cbSlot          = cbSlot; <br>    plstslot-&gt;cbPage          = cbPage; <br>    plstslot-&gt;cbCommitCurrent = cbCommitFirst; <br>    plstslot-&gt;cbCommitMax     = cbReserve; <br>    plstslot-&gt;pbitsSlot       = pbits; <br> <br> <br>    if (cbSlot &lt;= 2*sizeof( LSTSLOT )) <br>        { <br>        islotFirst        = sizeof( LSTSLOT ) / cbSlot + ((sizeof( LSTSLOT ) % cbSlot) ? 1 : 0); <br>        plstslot-&gt;cbExtra = 0; <br>        cslot = (ULONG) ((cbCommitFirst / cbSlot) - islotFirst); <br>        plstslot-&gt;cbslotLeftOver = cbCommitFirst - cbSlot * (cslot + islotFirst); <br>        } <br>    else <br>        { <br>        islotFirst        = 1; <br>        plstslot-&gt;cbExtra = cbSlot - sizeof( LSTSLOT ); <br>        cslot = (cbCommitFirst - sizeof( LSTSLOT )) / cbSlot; <br>        plstslot-&gt;cbslotLeftOver = cbCommitFirst - sizeof( LSTSLOT ) - cslot*cbSlot; <br>        } <br>    plstslot-&gt;rgslot = ((BYTE *) plstslot - plstslot-&gt;cbExtra); <br>    if (cslot) <br>        { <br>        plstslot-&gt;islotFirst = islotFirst; <br>        pslot = (PSLOT) &amp; plstslot-&gt;rgslot[islotFirst *plstslot-&gt;cbSlot]; <br>        pslot-&gt;cslot     = cslot; <br>        pslot-&gt;islotNext = 0; <br>        pslot-&gt;islotPrev = 0; <br>        } <br>    else <br>        plstslot-&gt;islotFirst = 0; <br>    plstslot-&gt;islotMin   = islotFirst; <br>    plstslot-&gt;islotMax   = islotFirst + cslot - 1; <br>    plstslot-&gt;islotRov = plstslot-&gt;islotFirst; <br> <br>    *pplstslot = plstslot; <br>    *prgslot   = plstslot-&gt;rgslot; <br>    return ResultFromScode( S_OK ); <br>} <br> <br> <br>//-------------------------------------------------------------------- <br>//  ResetSlotList <br>// <br>// @func Restore slot list to newly-initiated state <br>// <br>// @rdesc  <br>//  @flag S_OK  | method succeeded <br>// <br>HRESULT ResetSlotList <br>    ( <br>    PLSTSLOT plstslot           //@parm IN | slot list <br>    ) <br>{ <br>    ULONG   cslot; <br>    PSLOT   pslot; <br> <br>    cslot = (plstslot-&gt;islotMax &gt;= plstslot-&gt;islotMin) ? (plstslot-&gt;islotMax - plstslot-&gt;islotMin + 1) : 0; <br>    if (cslot) <br>        { <br>        plstslot-&gt;islotFirst = plstslot-&gt;islotMin; <br>        pslot = (PSLOT) &amp; plstslot-&gt;rgslot[plstslot-&gt;islotFirst *plstslot-&gt;cbSlot]; <br>        pslot-&gt;cslot     = cslot; <br>        pslot-&gt;islotNext = 0; <br>        pslot-&gt;islotPrev = 0; <br>        } <br>    else <br>        plstslot-&gt;islotFirst = 0; <br> <br>    plstslot-&gt;islotRov = plstslot-&gt;islotFirst; <br>    return ResultFromScode( S_OK ); <br>} <br> <br> <br>//-------------------------------------------------------------------- <br>// ReleaseSlotList <br>// <br>// @func Free slot list's memory <br>// <br>// @rdesc  <br>//  @flag S_OK  | method succeeded <br>// <br>HRESULT ReleaseSlotList <br>    ( <br>    PLSTSLOT plstslot           //@parm IN | slot list  <br>    ) <br>{ <br>    if (plstslot == NULL) <br>        return NOERROR; <br> <br>    if (plstslot-&gt;cbCommitCurrent) <br>        VirtualFree((VOID *) plstslot, plstslot-&gt;cbCommitCurrent, MEM_DECOMMIT ); <br> <br>    VirtualFree((VOID *) plstslot, 0, MEM_RELEASE ); <br>    return ResultFromScode( S_OK ); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

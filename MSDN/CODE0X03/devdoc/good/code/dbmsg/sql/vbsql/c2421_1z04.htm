<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CURSORS.FRM</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2434"></a>CURSORS.FRM</h2>
<pre><code>VERSION 2.00 <br>Begin Form PrimaryWindow  <br>   BackColor       =   &amp;H00C0C0C0&amp; <br>   BorderStyle     =   1  'Fixed Single <br>   Caption         =   "Cursor Scroll Bar Example" <br>   ForeColor       =   &amp;H00000000&amp; <br>   Height          =   7215 <br>   Icon            =   CURSORS.FRX:0000 <br>   Left            =   990 <br>   LinkMode        =   1  'Source <br>   LinkTopic       =   "Form1" <br>   MaxButton       =   0   'False <br>   ScaleHeight     =   6285 <br>   ScaleWidth      =   7725 <br>   Top             =   -30 <br>   Width           =   7845 <br>   Begin ListBox Cursor_Buffer  <br>      FontBold        =   -1  'True <br>      FontItalic      =   0   'False <br>      FontName        =   "Courier" <br>      FontSize        =   9.75 <br>      FontStrikethru  =   0   'False <br>      FontUnderline   =   0   'False <br>      Height          =   2955 <br>      Left            =   120 <br>      TabIndex        =   18 <br>      Top             =   3240 <br>      Width           =   7215 <br>   End <br>   Begin VScrollBar VScroll1  <br>      Height          =   3255 <br>      LargeChange     =   15 <br>      Left            =   7320 <br>      Max             =   500 <br>      SmallChange     =   15 <br>      TabIndex        =   20 <br>      Top             =   3000 <br>      Width           =   255 <br>   End <br>   Begin VBSQL VBSQL1  <br>      Caption         =   "SQL Error/Message" <br>      Height          =   255 <br>      Left            =   5160 <br>      Top             =   2760 <br>      Visible         =   0   'False <br>      Width           =   2175 <br>   End <br>   Begin Frame Frame2  <br>      BackColor       =   &amp;H00C0C0C0&amp; <br>      Caption         =   "Cursor Information" <br>      Height          =   1575 <br>      Left            =   120 <br>      TabIndex        =   5 <br>      Top             =   1080 <br>      Width           =   7455 <br>      Begin CommandButton Update_Button  <br>         Caption         =   "&amp;Update" <br>         Height          =   375 <br>         Left            =   6360 <br>         TabIndex        =   16 <br>         Top             =   1080 <br>         Width           =   975 <br>      End <br>      Begin ComboBox CC_List  <br>         Height          =   300 <br>         Left            =   2160 <br>         Style           =   2  'Dropdown List <br>         TabIndex        =   13 <br>         Top             =   1080 <br>         Width           =   3255 <br>      End <br>      Begin CommandButton Close_Button  <br>         Caption         =   "C&amp;lose" <br>         Height          =   375 <br>         Left            =   6360 <br>         TabIndex        =   15 <br>         Top             =   720 <br>         Width           =   975 <br>      End <br>      Begin TextBox IntN_value  <br>         Height          =   285 <br>         Left            =   4800 <br>         TabIndex        =   11 <br>         Text            =   "Text1" <br>         Top             =   720 <br>         Width           =   495 <br>      End <br>      Begin ComboBox Sensitivity_List  <br>         Height          =   300 <br>         Left            =   2160 <br>         Style           =   2  'Dropdown List <br>         TabIndex        =   9 <br>         Top             =   720 <br>         Width           =   2175 <br>      End <br>      Begin CommandButton Open_Button  <br>         Caption         =   "&amp;Open " <br>         Height          =   375 <br>         Left            =   6360 <br>         TabIndex        =   14 <br>         Top             =   360 <br>         Width           =   975 <br>      End <br>      Begin TextBox Fetch_size  <br>         Height          =   285 <br>         Left            =   2160 <br>         TabIndex        =   7 <br>         Text            =   "1" <br>         Top             =   360 <br>         Width           =   375 <br>      End <br>      Begin Label Label3  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "Concurrenc&amp;y Control:" <br>         Height          =   210 <br>         Left            =   120 <br>         TabIndex        =   12 <br>         Top             =   1080 <br>         Width           =   1845 <br>      End <br>      Begin Label Label8  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "&amp;N:" <br>         Height          =   255 <br>         Left            =   4440 <br>         TabIndex        =   10 <br>         Top             =   720 <br>         Width           =   255 <br>      End <br>      Begin Label Label2  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "Cursor &amp;Sensitivity:" <br>         Height          =   225 <br>         Left            =   120 <br>         TabIndex        =   8 <br>         Top             =   720 <br>         Width           =   1605 <br>      End <br>      Begin Label Label6  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "(Max = 15)" <br>         Height          =   255 <br>         Left            =   2640 <br>         TabIndex        =   19 <br>         Top             =   360 <br>         Width           =   975 <br>      End <br>      Begin Label Label5  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "Rows per &amp;Fetch:" <br>         Height          =   240 <br>         Left            =   120 <br>         TabIndex        =   6 <br>         Top             =   360 <br>         Width           =   1815 <br>      End <br>   End <br>   Begin Frame Frame1  <br>      BackColor       =   &amp;H00C0C0C0&amp; <br>      Caption         =   "Object" <br>      Height          =   855 <br>      Left            =   120 <br>      TabIndex        =   0 <br>      Top             =   120 <br>      Width           =   7455 <br>      Begin ComboBox Table_List  <br>         Height          =   300 <br>         Left            =   4800 <br>         TabIndex        =   4 <br>         Text            =   "Table_List" <br>         Top             =   360 <br>         Width           =   2295 <br>      End <br>      Begin ComboBox Database_List  <br>         Height          =   300 <br>         Left            =   1320 <br>         TabIndex        =   2 <br>         Text            =   "Database_List" <br>         Top             =   360 <br>         Width           =   2295 <br>      End <br>      Begin Label Label4  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "&amp;Table:" <br>         Height          =   225 <br>         Left            =   3840 <br>         TabIndex        =   3 <br>         Top             =   360 <br>         Width           =   735 <br>      End <br>      Begin Label Label1  <br>         BackColor       =   &amp;H00C0C0C0&amp; <br>         Caption         =   "&amp;Database:" <br>         Height          =   210 <br>         Left            =   120 <br>         TabIndex        =   1 <br>         Top             =   360 <br>         Width           =   1005 <br>      End <br>   End <br>   Begin Label COLUMN_LABEL  <br>      BorderStyle     =   1  'Fixed Single <br>      Caption         =   "Label8" <br>      FontBold        =   -1  'True <br>      FontItalic      =   0   'False <br>      FontName        =   "Courier" <br>      FontSize        =   9.75 <br>      FontStrikethru  =   0   'False <br>      FontUnderline   =   0   'False <br>      Height          =   255 <br>      Left            =   120 <br>      TabIndex        =   21 <br>      Top             =   3000 <br>      Width           =   7215 <br>   End <br>   Begin Label Label7  <br>      BackColor       =   &amp;H00C0C0C0&amp; <br>      Caption         =   "&amp;Results:" <br>      Height          =   255 <br>      Left            =   120 <br>      TabIndex        =   17 <br>      Top             =   2760 <br>      Width           =   855 <br>   End <br>   Begin Menu Menu_File  <br>      Caption         =   "&amp;Connect" <br>      Begin Menu Logon_Selection  <br>         Caption         =   "&amp;Logon" <br>      End <br>      Begin Menu Log_Off_Selection  <br>         Caption         =   "Log &amp;Off" <br>      End <br>      Begin Menu Exit_Selection  <br>         Caption         =   "&amp;Exit" <br>      End <br>   End <br>   Begin Menu Menu_Help  <br>      Caption         =   "&amp;Help" <br>      Begin Menu About_Selection  <br>         Caption         =   "&amp;About..." <br>      End <br>   End <br>End <br> <br> <br>Sub About_Selection_Click () <br>    About_Form.Show 1 <br>End Sub <br> <br>Sub BeginTran () <br>    Results% = ExecuteSQLCommand("begin tran") <br>    Do While SqlResults(SqlConn%) &lt;&gt; NOMORERESULTS <br>    Do While SqlNextRow(SqlConn%) &lt;&gt; NOMOREROWS <br>    Loop <br>    Loop <br>    OpenTran% = True <br>End Sub <br> <br>Sub CC_List_Click () <br>    If Sensitivity_List.ListIndex = -1 Or Table_List.ListIndex = -1 Then <br>Open_Button.Enabled = False <br>    Else <br>Open_Button.Enabled = True <br>    End If <br> <br>End Sub <br> <br>Sub ClearCursorBuffer () <br> <br>Do While Cursor_Buffer.ListCount <br>    Cursor_Buffer.RemoveItem 0 <br>Loop <br> <br>End Sub <br> <br>Sub ClearDatabaseList () <br>     <br>Rem Clear all databases out of list box <br> <br>    Do While Database_List.ListCount <br>Database_List.RemoveItem 0 <br>    Loop <br>    Database_List.Text = "" <br>End Sub <br> <br> Sub ClearOutputBuffer () <br> <br> For i% = 0 To 19 <br>    OutputData(i%) = "" <br> Next i% <br> <br>End Sub <br> <br>Sub ClearTableList () <br> <br>    Rem Clear all tables out of list box <br>    Do While Table_List.ListCount <br>Table_List.RemoveItem 0 <br>    Loop <br>    Table_List.Text = "" <br> <br>End Sub <br> <br>Sub Close_Button_Click () <br>    If OpenTran% Then <br>CommitTran <br>    End If <br> <br>    SqlCursorClose CursorHandle% <br> <br>    Open_Button.Enabled = True <br>    Close_Button.Enabled = False <br>    Update_Button.Enabled = False <br>    Fetch_Size.Enabled = True <br>    Sensitivity_List.Enabled = True <br>    CC_List.Enabled = True <br>    IntN_value.Enabled = True <br>     <br>    COLUMN_LABEL.Caption = "" <br>    ClearCursorBuffer <br> <br>End Sub <br> <br>Sub CommitTran () <br>    Results% = ExecuteSQLCommand("commit tran") <br>    Do While SqlResults(SqlConn%) &lt;&gt; NOMORERESULTS <br>    Do While SqlNextRow(SqlConn%) &lt;&gt; NOMOREROWS <br>    Loop <br>    Loop <br>OpenTran% = False <br>End Sub <br> <br>Sub Database_List_Click () <br> <br>Rem <br>Rem This routine will use the selected database, get all the user <br>Rem tables in the database, and change the primary window title <br>Rem to reflect the database change. <br>Rem <br> <br>    DatabaseSelection$ = Database_List.Text <br>    Results% = SqlUse(SqlConn%, DatabaseSelection$) <br>    If Results% = SUCCEED Then <br>PrimaryWindow.MousePointer = 11 <br>RetrieveTableNames <br>PrimaryWindow.MousePointer = 0 <br>DatabaseName = SqlName$(SqlConn%) <br>ChangePrimaryWindowCaption <br>If Table_List.ListIndex = -1 Or Sensitivity_List.ListIndex = -1 Or CC_List.ListIndex = -1 Then <br>    Open_Button.Enabled = False <br>Else <br>    Open_Button.Enabled = True <br>End If <br>    End If <br> <br> <br> <br>End Sub <br> <br>Sub Exit_Selection_Click () <br> <br>    ExitApplication <br>    End <br> <br>End Sub <br> <br>Sub Fetch_First () <br> <br>    ClearCursorBuffer <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br> <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHFIRST, 0) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor.", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_Last () <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br>     <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHLAST, 0) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor.", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_Next () <br> <br>Rem <br>Rem This routine will get this next batch of rows <br>Rem <br> <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br> <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHNEXT, 0) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor. You are more than likely at the end of the result set", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_Previous () <br> <br>Rem <br>Rem This routine will get the previous batch of rows <br>Rem <br> <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br> <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHPREV, 0) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor.", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_Random (Rownum As Integer) <br> <br>Rem <br>Rem This routine will get a row number to start fetching from <br>Rem <br> <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br> <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHRANDOM, Rownum%) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor.", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_Relative (ScrollValue As Integer) <br> <br>Rem <br>Rem This routine will get a batch relative to the selected row <br>Rem First Calculate where to start the fetch <br>Rem <br> <br>    MaxRows% = Vscroll1.Max <br>    n = (ScrollValue * MaxRows%) / 100 <br>    Rownum% = n - CursorSliderValue% <br> <br>Rem <br>Rem Fetch the rows <br>Rem <br> <br>    If Not OpenTran% Then <br>BeginTran <br>    Else <br>CommitTran <br>BeginTran <br>    End If <br> <br>    Results% = SqlCursorFetch%(CursorHandle%, FETCHRELATIVE, Rownum%) <br>    If Results% = SUCCEED And Int(RowStatus&amp;(0)) &lt;&gt; FTCENDOFRESULTS% Then <br>ProcessCursorRows <br>Update_Button.Enabled = True <br>FillCursorBuffer -1        'display the data <br>    Else <br>MsgBox "Problem fetching cursor.", 0, "Cursor Example" <br>    End If <br>End Sub <br> <br>Sub Fetch_size_LostFocus () <br> <br>Rem <br>Rem Make sure the fetch size fits in the results list box to avoid scrolling <br>Rem <br> <br>    Num% = Val(Fetch_Size.Text) * Val(IntN_value.Text) <br> <br>    If Val(Fetch_Size.Text) &lt; 1 Or Val(Fetch_Size.Text) &gt; 15 Then <br>MsgBox "Value must be between 1 and 15", 0, "Cursor Example" <br>Fetch_Size.SetFocus <br>    End If <br> <br> <br>End Sub <br> <br>Sub FillCursorBuffer (x As Integer) <br> <br>Rem <br>Rem If x% &gt;= 0, then we are doing a horizontal scroll <br>Rem Clear the list box <br>Rem Fill the list box with the shifted data <br>Rem <br> <br>    If x% &gt;= 0 Then <br> <br>    ClearCursorBuffer <br>    startshift% = x% <br>     <br>    rowlen&amp; = Len(OutputData(0)) <br>    i% = 0 <br>    While OutputData(i%) &lt;&gt; "" <br>If i% &lt;= 2 Then <br>If x% = 0 Then startshift% = 1 <br>Cursor_Buffer.AddItem Mid$(OutputData(i%), startshift%, rowlen&amp;) <br>Else <br>If x% = 0 Then startshift% = 2 <br>Cursor_Buffer.AddItem Mid$(OutputData(i%), startshift% - 1, rowlen&amp;) <br>End If <br>i% = i% + 1 <br>    Wend <br> <br>Rem <br>Rem First fill the buffer with the headings <br>Rem Then fill in the data <br>Rem <br> <br>    Else <br>i% = 0 <br>While OutputData(i%) &lt;&gt; "" <br>    Cursor_Buffer.AddItem OutputData(i%) <br>    i% = i% + 1 <br>Wend <br> <br>    End If <br>End Sub <br> <br>Sub Form_Load () <br> <br>Rem <br>Rem Initialize the application <br>Rem <br> <br>    PrimaryWindowTitle = "Cursor Example" <br>    ChangePrimaryWindowCaption <br> <br>    InitializeApplication <br>    MsgBox DBLIB_VERSION$, 0, "Cursor Example" <br> <br>Rem <br>Rem Set the initial state of each of the controls in the form <br>Rem <br> <br>    Sensitivity_List.AddItem "Static" <br>    Sensitivity_List.AddItem "Keyset driven" <br>    Sensitivity_List.AddItem "Dynamic" <br>    Sensitivity_List.AddItem "Int N" <br> <br>    CC_List.AddItem "Read only" <br>    CC_List.AddItem "Locking control" <br>    CC_List.AddItem "Optimistic concurrency" <br>    CC_List.AddItem "Optimistic concurrency by values" <br> <br>    Logon_Selection.Enabled = True <br>    Log_Off_Selection.Enabled = False <br>    Exit_Selection.Enabled = True <br> <br>    Open_Button.Enabled = False <br>    Close_Button.Enabled = False <br>    Update_Button.Enabled = False <br> <br>    OpenTran% = False <br>    COLUMN_LABEL.Caption = "" <br>    ClearCursorBuffer <br>    ClearDatabaseList <br>    ClearTableList <br>    IntN_value.Text = "0" <br>End Sub <br> <br>Sub Log_Off_Selection_Click () <br> <br>Rem <br>Rem Set the state of the controls <br>Rem Logoff <br>Rem <br> <br>    ClearDatabaseList <br>    ClearTableList <br>    Open_Button.Enabled = False <br>    Close_Button.Enabled = False <br>    Update_Button.Enabled = False <br>     <br>    Logoff <br> <br>    Logon_Selection.Enabled = True <br>    Log_Off_Selection.Enabled = False <br>    Exit_Selection.Enabled = True <br> <br>End Sub <br> <br>Sub Logon_Selection_Click () <br> <br>Rem <br>Rem Logon to the server <br>Rem Get the databases in the server and display them in the list box <br>Rem Change the primary window caption to reflect current status <br>Rem <br> <br>    Login.Show 1 <br>    PrimaryWindow.MousePointer = 11 <br>    If CheckServerConnection() = 1 Then <br>Results% = GetDatabases(Database_List) <br>ChangePrimaryWindowCaption <br>Logon_Selection.Enabled = False <br>Log_Off_Selection.Enabled = True <br>    End If <br>    PrimaryWindow.MousePointer = 0 <br> <br>End Sub <br> <br>Sub Open_Button_Click () <br> <br>Rem <br>Rem Get the fetch size and keyset size <br>Rem Redimension the rowstatus array <br>Rem <br> <br>    NumRowsInCursor% = Val(Fetch_Size.Text) <br>    IntN% = Val(IntN_value.Text) <br>    ReDim RowStatus&amp;(NumRowsInCursor%) <br> <br>Rem <br>Rem Set the scroll option and concurrency control values <br>Rem <br> <br>    Select Case Sensitivity_List.Text <br>    Case "Static" <br>ScrollOpt% = CURFORWARD% <br>    Case "Keyset driven" <br>    ScrollOpt% = CURKEYSET% <br>    Case "Dynamic" <br>ScrollOpt% = CURDYNAMIC% <br>    Case "Int N" <br>If IntN% &lt;= 0 Then <br>    MsgBox "You must Supply N", 0, "Cursor Example" <br>    Exit Sub <br>Else <br>    ScrollOpt% = IntN% <br>End If <br>    End Select <br> <br>    Select Case CC_List.Text <br>    Case "Read only" <br>Concuropt% = CURREADONLY% <br>    Case "Locking control" <br>Concuropt% = CURLOCKCC% <br>    Case "Optimistic concurrency" <br>Concuropt% = CUROPTCC% <br>    Case "Optimistic concurrency by values" <br>Concuropt% = CUROPTCCVAL% <br>    End Select <br> <br>Rem <br>Rem Setup the select statement and open the cursor <br>Rem <br> <br>    Statement$ = "select * from " + Table_List.Text <br> <br>    CursorHandle% = SqlCursorOpen(SqlConn%, Statement$, ScrollOpt%, Concuropt%, NumRowsInCursor%, RowStatus&amp;(0)) <br> <br>    If CursorHandle% &lt;&gt; FAIL Then <br>Open_Button.Enabled = False <br>Close_Button.Enabled = True <br>     <br>Rem <br>Rem Get Column names and lengths <br>Rem Output the column header <br>Rem <br>    <br>Results% = SqlCursorInfo%(CursorHandle%, NumCols%, NumRowsInKeyset&amp;) <br>For ColCount% = 1 To NumCols% <br>    Results% = SqlCursorColInfo%(CursorHandle%, ColCount%, colname$, Coltype%, ColLen&amp;, UserType%) <br>    CursorColName$(ColCount%) = colname$ <br>    CursorColLen&amp;(ColCount%) = ColLen&amp; <br>Next ColCount% <br>ClearOutputBuffer <br>ProcessCursorHeader <br>IntN_value.Enabled = False <br>Sensitivity_List.Enabled = False <br>CC_List.Enabled = False <br>  <br>Rem <br>Rem Set the vertical scroll bar to &lt;page up&gt; and &lt;page down&gt; the size of the fetch <br>Rem Determine the max value of VScroll1 <br>Rem     If we are dealing with a mixed scroll, then set to number (ScrollOpt% * IntN%) * an arbitrary number <br>Rem         NOTE: You choose an arbitrary number because you want to be able to go outside of keyset. <br>Rem     If Dealing with keyset or static scroll and we have enough room to store the whole keyset, <br>Rem         then set max to full keyset size. <br>Rem     Otherwise, we're dealing with Dynamic scroll or we can't fit the who keyset. <br>Rem         Make a guess as to how big the keyset is by multiplying the "asked for" <br>Rem         fetch size by some arbitrary number (we chose 10). <br>Rem Fetch the first batch of rows <br>Rem <br> <br>Vscroll1.SmallChange = NumRowsInCursor% <br>Vscroll1.LargeChange = Vscroll1.SmallChange <br>Vscroll1.Value = 0 <br>Vscroll1.Refresh        'Refresh the vertical scrollbar <br>CursorSliderValue = 0 <br> <br>If IntN% &lt;&gt; 0 Then <br>    Vscroll1.Max = (ScrollOpt% * IntN%) * 10 <br>Else <br>    If NumRowsInKeyset&amp; &gt; 0 Then <br>Vscroll1.Max = NumRowsInKeyset&amp; <br>    Else <br>Vscroll1.Max = NumRowsInCursor% * 10       'Note: the number 10 is an arbitrary number <br>    End If <br>End If <br>Fetch_First <br>    Else <br>MsgBox "Cursor failed to open.", 0, "Cursor Example" <br>    End If <br> <br>End Sub <br> <br>Function PrepareString (String_In As String) As String <br> <br>    String_Out$ = "" <br> <br>    For i% = 1 To Len(String_In) <br>    If Mid$(String_In, i%, 1) = Chr$(39) Then <br>String_Out$ = String_Out$ + Chr$(39) + Chr$(39) <br>    Else <br>String_Out$ = String_Out$ + Mid$(String_In, i%, 1) <br>    End If <br>    Next <br> <br>    PrepareString = String_Out$ <br> <br>End Function <br> <br>Sub ProcessCursorHeader () <br>     <br>Rem <br>Rem This routine gets and formats the cursor header <br>Rem <br> <br>    TABKEY$ = "    " <br>    NEWLINE$ = Chr$(13) + Chr$(10) <br>    colline$ = "" <br> <br>    For ColCount% = 1 To NumCols% <br>    tmplen% = CursorColLen&amp;(ColCount%) <br>    If tmplen% &gt; 256 Then tmplen% = 256 <br>    colname$ = CursorColName$(ColCount%) <br>    actuallen&amp; = Len(colname$) <br>    If actuallen&amp; &lt; tmplen% Then <br>If ColCount% &lt;&gt; NumCols% Then <br>    colline$ = colline$ + colname$ + Space$((tmplen% - actuallen&amp;) + 1) + TABKEY$ <br>Else <br>    colline$ = colline$ + colname$ + Space$((tmplen% - actuallen&amp;) + 1) <br>End If <br>    Else <br>If ColCount% &lt;&gt; NumCols% Then <br>    colline$ = colline$ + colname$ + TABKEY$ <br>Else <br>    colline$ = colline$ + colname$ <br>End If <br> <br>    End If <br>    Next ColCount% <br> <br>Rem <br>Rem Set the COLUMN_LABEL label <br>Rem <br> <br>    COLUMN_LABEL.Caption = colline$ <br>End Sub <br> <br>Sub ProcessCursorRows () <br> <br>Rem <br>Rem This routine gets each of the cursor rows and displays them <br>Rem <br> <br>    TABKEY$ = Chr$(9) <br>    colline$ = "" <br>    ClearCursorBuffer <br>    ClearOutputBuffer <br> <br>Rem    HScroll1.Refresh     'Refresh the horizontal scroll bar <br> <br>Rem <br>Rem Set the end of results and keyset values <br>Rem <br> <br>    ENDRESULTS% = FTCENDOFRESULTS% + 1 <br>    ENDKEYSET% = FTCENDOFRESULTS% + FTCENDOFKEYSET% + 1 <br> <br>Rem <br>Rem Get the cursor data based on the row and column <br>Rem <br> <br>    For RowCount% = 1 To NumRowsInCursor% <br>For ColCount% = 1 To NumCols% <br>    ColValue$ = SqlCursorData(CursorHandle%, RowCount%, ColCount%) <br>    actuallen&amp; = Len(ColValue$) <br>    tmplen% = CursorColLen(ColCount%) <br>    If tmplen% &gt; 256 Then tmplen% = 256 <br>    If actuallen&amp; &lt; tmplen% Then <br>If ColCount% &lt;&gt; NumCols% Then <br>    DataStr$ = DataStr$ + ColValue$ + Space$((tmplen% - actuallen&amp;) + 1) + TABKEY$ <br>Else <br>    DataStr$ = DataStr$ + ColValue$ + Space$((tmplen% - actuallen&amp;) + 1) <br>End If <br>    Else <br>If ColCount% &lt;&gt; NumCols% Then <br>    DataStr$ = DataStr$ + ColValue$ + TABKEY$ <br>Else <br>    DataStr$ = DataStr$ + ColValue$ <br>End If <br>    End If <br>    ColValue$ = "" <br>Next ColCount% <br>OutputData(RowCount% - 1) = DataStr$ <br>DataStr$ = "" <br>testval% = Int(RowStatus&amp;(RowCount% - 1)) <br>If testval% = ENDRESULTS% Or testval% = ENDKEYSET% Or testval% = FTCENDOFRESULTS% Then <br>    Exit For <br>End If <br>    Next RowCount% <br> <br>End Sub <br> <br>Sub RetrieveTableNames () <br> <br>Rem <br>Rem Retrieve table names from SQL Server into list box <br>Rem <br> <br>    ClearTableList <br>    Results% = ExecuteSQLCommand("Select name from sysobjects where type = 'U'") <br>    Do While (SqlResults%(SqlConn%) &lt;&gt; NOMORERESULTS) <br>Do While (SqlNextRow(SqlConn%) &lt;&gt; NOMOREROWS) <br>    Table_List.AddItem SqlData(SqlConn%, 1) <br>Loop <br>    Loop <br>    Table_List.Text = Table_List.List(0) <br>End Sub <br> <br>Sub Sensitivity_List_Click () <br> <br>Rem <br>Rem Make sure the required data is supplied before enabling the open button <br>Rem <br> <br>    If Table_List.ListIndex = -1 Or CC_List.ListIndex = -1 Then <br>Open_Button.Enabled = False <br>    Else <br>Open_Button.Enabled = True <br>    End If <br> <br>End Sub <br> <br>Sub Table_List_Click () <br> <br>Rem <br>Rem Make sure the required data is supplied before enabling the open button <br>Rem <br>     <br>    If Sensitivity_List.ListIndex = -1 Or CC_List.ListIndex = -1 Then <br>Open_Button.Enabled = False <br>    Else <br>Open_Button.Enabled = True <br>    End If <br> <br>End Sub <br> <br>Sub Update_Button_Click () <br> <br>Rem <br>Rem Get the selected row number <br>Rem <br> <br>    Rownum% = Cursor_Buffer.ListIndex + 1 <br>     <br>    If Rownum% = 0 Then <br>Beep <br>    MsgBox "Select a row to update.", 0, "Cursor Example" <br>Exit Sub <br>    End If <br>     <br>Rem <br>Rem Get column # to update and new value <br>Rem <br> <br>    ColNum$ = InputBox$("Number of column to update:", "Update") <br>    If ColNum$ = "" Then Exit Sub <br> <br>    Value$ = InputBox$("Update column " + ColNum$ + " with value: ", "Update") <br>    If Value$ = "" Then Exit Sub <br> <br>    Table$ = Table_List.Text <br> <br>Rem <br>Rem Determine name of column to update <br>Rem Create the update string <br>Rem <br> <br>    Results% = SqlCursorColInfo(CursorHandle%, Val(ColNum$), colname$, Coltype%, ColLen&amp;, UserType%) <br> <br>    UpdateValue$ = "set " + colname$ + "=" <br>    If Coltype% = SQLCHAR Or Coltype% = SQLVARCHAR Then <br>       UpdateValue$ = UpdateValue$ + "'" + Value$ + "'" <br>    Else <br>UpdateValue$ = UpdateValue$ + Value$ <br>    End If <br> <br>Rem <br>Rem Perform update <br>Rem <br> <br>    Results% = SqlCursor(CursorHandle%, CRSUPDATE, Rownum%, Table$, UpdateValue$) <br> <br>End Sub <br> <br>Sub VBSQL1_Error (SqlConn As Integer, Severity As Integer, ErrorNum As Integer, ErrorStr As String, RetCode As Integer) <br>' Call the required VBSQL error-handling function <br>' OSErr and OSErrStr not used in VBSQL for Windows, but DOS interprets <br>' anything other than -1 as an OS error <br>    OsErr% = -1 <br> <br>    RetCode% = UserSqlErrorHandler%(SqlConn, Severity%, ErrorNum%, OsErr%, ErrorStr$, OsErrStr$) <br>End Sub <br> <br>Sub VBSQL1_Message (SqlConn As Integer, Message As Long, State As Integer, Severity As Integer, MsgStr As String) <br>    UserSqlMsgHandler SqlConn, Message&amp;, State%, Severity%, MsgStr$ <br>End Sub <br> <br>Sub VScroll1_Change () <br> <br>If Vscroll1.Value = 0 And CursorSliderValue% = 0 Then Exit Sub <br> <br>Rem <br>Rem Define &lt;Page Up&gt; and &lt;Page Down&gt; values <br>Rem Get the current scroll value <br>Rem <br> <br>PAGEUP = CursorSliderValue% - Vscroll1.SmallChange <br>PAGEDOWN = CursorSliderValue% + Vscroll1.SmallChange <br> <br>x = Vscroll1.Value <br> <br>Rem <br>Rem Based on the scroll value, call the appropriate routine <br>Rem If "Mixed" scroll and scrolling within the keyset, then just do a random <br>Rem <br> <br>If x &gt; CursorSliderValue% And x &lt; PAGEDOWN Then <br>    If x &gt; Vscroll1.SmallChange Then <br>Fetch_Random (x) <br>    Else <br>Fetch_Relative (x) <br>    End If <br>Else <br>    If x &lt; CursorSliderValue% And x &gt; PAGEUP Then <br>If x &gt; Vscroll1.SmallChange Then <br>    Fetch_Random (x) <br>Else <br>    Fetch_Relative (x) <br>End If <br>    Else <br> <br>Rem <br>Rem User is either doing a &lt;Page Down&gt;, &lt;Page Up&gt;, or Dynamic scrolling <br>Rem <br> <br>Select Case x <br>    Case Is = PAGEDOWN <br>Fetch_Next <br>    Case Is = PAGEUP <br>Fetch_Previous <br>    Case Is &gt; PAGEDOWN <br>If ScrollOpt% = CURKEYSET% Then <br>    Fetch_Random Int(x) <br>Else <br>    Fetch_Relative Int(x) <br>End If <br>    Case Is &lt; PAGEUP <br>If ScrollOpt% = CURKEYSET% Then <br>    Fetch_Random Int(x) <br>Else <br>    Fetch_Relative Int(x) <br>End If <br>End Select <br>    End If <br>End If <br> <br>Rem <br>Rem Save the current scroll value for next time. <br>Rem <br> <br>CursorSliderValue = x <br> <br> <br>End Sub <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

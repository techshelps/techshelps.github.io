<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXAMPLE8.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2382"></a>EXAMPLE8.C</h2>
<pre><code>/* ** The example uses the following stored procedure,  <br>** named "rpctest", which it assumes is located in the  <br>** user's default database. Before running this example,  <br>** you must create "rpctest" in your default database. <br>** <br>**     create procedure rpctest <br>**         (@param1 int out, <br>**          @param2 int out, <br>**          @param3 int out, <br>**          @param4 int) <br>**     as <br>**     begin <br>**         select "rpctest is running." <br>**         select @param1 = 11 <br>**         select @param2 = 22 <br>**         select @param3 = 33 <br>**         select @param1 <br>** <br>**         return 123 <br>**     end <br>** <br>*/ <br> <br>#if defined(DBNTWIN32) <br>#include &lt;windows.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt;  <br>#include &lt;stdlib.h&gt;  <br>#include &lt;sqlfront.h&gt;  <br>#include &lt;sqldb.h&gt;  <br>#define FMTSTR    "%-8.8s %-8.8s %-8.8s %-8.8s\n" <br>#define FMTSTR1    "%-8.8s %-8.8s %8.8ld %8.8ld\n" <br> <br>/* Forward declarations of the error handler and message handler routines. */ <br>int err_handler(DBPROCESS*, int, int, int, char*, char*); <br>int msg_handler(DBPROCESS*, DBINT, int, int, char*, char*, char*, DBUSMALLINT); <br> <br>void main() <br>{ <br>LOGINREC         *login; <br>DBPROCESS        *dbproc; <br> <br>int              i; <br>int              numrets; <br>DBINT            param1 = 1; <br>DBINT            param2 = 2; <br>DBINT            param3 = 3; <br>DBINT            param4 = 4; <br>RETCODE          return_code; <br> <br>  /* Initialize private DB Library structures. */ <br>dbinit(); <br> <br> <br>/* Install the user-supplied error-handling and message-handling <br> * routines. They are defined at the bottom of this source file. <br> */ <br> <br>dbmsghandle((DBMSGHANDLE_PROC)msg_handler); <br>dberrhandle((DBERRHANDLE_PROC)err_handler); <br> <br>/* Allocate and initialize the LOGINREC structure to be used <br> * to open a connection to SQL Server. <br> */ <br> <br>login = dblogin( ); <br>DBSETLUSER(login, "user"); <br>DBSETLPWD(login, "my_passwd"); <br>DBSETLAPP(login, "rpcexample"); <br>DBSETLVERSION(login, DBVER60); <br> <br>dbproc = dbopen(login, (char *)"my_server"); <br> <br>/* Make the rpc. */ <br>if (dbrpcinit(dbproc, "rpctest", (DBSMALLINT)0) == FAIL) <br>{ <br>printf("dbrpcinit failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br>if (dbrpcparam(dbproc, "@param1", (BYTE)DBRPCRETURN, SQLINT4,  <br>-1, -1, (BYTE *)&amp;param1) <br>   == FAIL) <br>{ <br>printf("dbrpcparam failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>if (dbrpcparam(dbproc, "@param2", (BYTE)DBRPCRETURN, SQLINT4,  <br>-1, -1, (BYTE *)&amp;param2) <br>   == FAIL) <br>{ <br>printf("dbrpcparam failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>if (dbrpcparam(dbproc, "@param3", (BYTE)DBRPCRETURN, SQLINT4,  <br>-1, -1, (BYTE *)&amp;param3) <br>   == FAIL) <br>{ <br>printf("dbrpcparam failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>if (dbrpcparam(dbproc, "@param4", (BYTE)NULL, SQLINT4,  <br>-1, -1, (BYTE *)&amp;param4) <br>   == FAIL) <br>{ <br>printf("dbrpcparam failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>if (dbrpcsend(dbproc) == FAIL) <br>{ <br>printf("dbrpcsend failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>if (dbsqlok(dbproc) == FAIL) <br>{ <br>printf("dbsqlok failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br>while ((return_code = dbresults(dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (return_code == FAIL) <br>{ <br>printf("dbresults failed.\n"); <br>dbexit(); <br>exit(ERREXIT); <br>} <br> <br>/* Print any rows that may have been returned. */ <br>dbprrow(dbproc); <br> <br>/* Examine any return parameters that may have arrived. */ <br> <br>numrets = dbnumrets(dbproc); <br>printf("%d return values received.\n\n", numrets); <br> <br>if (numrets != 0) <br>{ <br>printf <br> (FMTSTR, "Name", "Type", "Length", "Value"); <br>printf <br> (FMTSTR, <br> "------------", "------------", <br> "------------", "------------"); <br> <br>   for (i = 1; i &lt;= numrets; i++) <br>    { <br>   printf <br>   (FMTSTR1, dbretname(dbproc, i), <br>   dbprtype(dbrettype(dbproc, i)), dbretlen(dbproc, i), <br>   *((DBINT *)(dbretdata(dbproc, i)))); <br>   } <br> <br>} <br>if (dbhasretstat(dbproc)) <br>printf("Return status = %ld\n", dbretstatus(dbproc)); <br>else <br>printf("No return status for this command.\n"); <br>} <br> <br>dbexit(); <br>} <br>int err_handler(dbproc, severity, dberr, oserr, dberrstr, oserrstr) <br>DBPROCESS       *dbproc; <br>int             severity; <br>int             dberr; <br>int             oserr; <br>char            *dberrstr; <br>char            *oserrstr; <br>{ <br>if (dberrstr != NULL) printf("DB-Library error:\n\t%s\n", dberrstr); <br> <br>if (oserr != DBNOERR) <br>printf("Operating-system error:\n\t%s\n", oserrstr); <br>if ((dbproc == NULL) || (DBDEAD(dbproc))) <br>return(INT_EXIT); <br>else  <br>{ <br> <br>return(INT_CANCEL); <br>} <br>} <br> <br>int msg_handler(dbproc, msgno, msgstate, severity, msgtext, <br>srvname, procname, line) <br>DBPROCESS*dbproc; <br>DBINTmsgno; <br>intmsgstate; <br>intseverity; <br>char*msgtext; <br>char*srvname; <br>char*procname; <br>DBUSMALLINTline; <br> <br>{ <br>printf ("Msg %ld, Level %d, State %d\n",  <br>msgno, severity, msgstate); <br> <br>if (srvname !=  NULL) <br>printf ("Server '%s', ", srvname); <br>if (procname !=  NULL) <br>printf ("Procedure '%s', ", procname); <br>if (line !=  0) <br>printf ("Line %d", line); <br> <br>printf("\n\t%s\n", msgtext); <br> <br>return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

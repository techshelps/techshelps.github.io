<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETOPT.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2389"></a>GETOPT.C</h2>
<pre><code>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  FILE: getopt.c <br>// <br>//      GetOption function <br>// <br>//  FUNCTIONS: <br>// <br>//      GetOption() - Get next command line option and parameter <br>// <br>//  COMMENTS: <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br> <br>#include &lt;stddef.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;string.h&gt; <br>#include "getopt.h" <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  FUNCTION: GetOption() <br>// <br>//      Get next command line option and parameter <br>// <br>//  PARAMETERS: <br>// <br>//      argc - count of command line arguments <br>//      argv - array of command line argument strings <br>//      pszValidOpts - string of valid, case-sensitive option characters, <br>//                     a colon ':' following a given character means that <br>//                     option can take a parameter <br>//      ppszParam - pointer to a pointer to a string for output <br>// <br>//  RETURNS: <br>// <br>//      If valid option is found, the character value of that option <br>//          is returned, and *ppszParam points to the parameter if given, <br>//          or is NULL if no param <br>//      If standalone parameter (with no option) is found, 1 is returned, <br>//          and *ppszParam points to the standalone parameter <br>//      If option is found, but it is not in the list of valid options, <br>//          -1 is returned, and *ppszParam points to the invalid argument <br>//      When end of argument list is reached, 0 is returned, and <br>//          *ppszParam is NULL <br>// <br>//  COMMENTS: <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br> <br>int GetOption ( <br>    int argc, <br>    char** argv, <br>    char* pszValidOpts, <br>    char** ppszParam) <br>{ <br>    static int iArg = 1; <br>    char chOpt; <br>    char* psz = NULL; <br>    char* pszParam = NULL; <br> <br>    if (iArg &lt; argc) <br>    { <br>        psz = &amp;(argv[iArg][0]); <br>        if (*psz == '-' || *psz == '/') <br>        { <br>            // we have an option specifier <br>            chOpt = argv[iArg][1]; <br>            if (isalnum(chOpt) || ispunct(chOpt)) <br>            { <br>                // we have an option character <br>                psz = strchr(pszValidOpts, chOpt); <br>                if (psz != NULL) <br>                { <br>                    // option is valid, we want to return chOpt <br>                    if (psz[1] == ':') <br>                    { <br>                        // option can have a parameter <br>                        psz = &amp;(argv[iArg][2]); <br>                        if (*psz == '\0') <br>                        { <br>                            // must look at next argv for param <br>                            if (iArg+1 &lt; argc) <br>                            { <br>                                psz = &amp;(argv[iArg+1][0]); <br>                                if (*psz == '-' || *psz == '/') <br>                                { <br>                                    // next argv is a new option, so param <br>                                    // not given for current option <br>                                } <br>                                else <br>                                { <br>                                    // next argv is the param <br>                                    iArg++; <br>                                    pszParam = psz; <br>                                } <br>                            } <br>                            else <br>                            { <br>                                // reached end of args looking for param <br>                            } <br> <br>                        } <br>                        else <br>                        { <br>                            // param is attached to option <br>                            pszParam = psz; <br>                        } <br>                    } <br>                    else <br>                    { <br>                        // option is alone, has no parameter <br>                    } <br>                } <br>                else <br>                { <br>                    // option specified is not in list of valid options <br>                    chOpt = -1; <br>                    pszParam = &amp;(argv[iArg][0]); <br>                } <br>            } <br>            else <br>            { <br>                // though option specifier was given, option character <br>                // is not alpha or was was not specified <br>                chOpt = -1; <br>                pszParam = &amp;(argv[iArg][0]); <br>            } <br>        } <br>        else <br>        { <br>            // standalone arg given with no option specifier <br>            chOpt = 1; <br>            pszParam = &amp;(argv[iArg][0]); <br>        } <br>    } <br>    else <br>    { <br>        // end of argument list <br>        chOpt = 0; <br>    } <br> <br>    iArg++; <br>    *ppszParam = pszParam; <br>    return (chOpt); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

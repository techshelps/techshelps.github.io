<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXAMPLE6.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2380"></a>EXAMPLE6.C</h2>
<pre><code>/*example6.c */ <br>/* <br>** This example illustrates opening a data file, inserting data <br>** from the file into a newly created table containing several <br>** SQL Server datatypes, and updating the table using browse mode <br>** techniques. <br>*/ <br> <br>#if defined(DBNTWIN32) <br>#include &lt;windows.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;sqlfront.h&gt; <br>#include &lt;sqldb.h&gt; <br> <br>#define BUFLEN 2048 <br> <br>/* Forward declarations of the error-handling and message-handing <br>functions. */ <br>int err_handler(DBPROCESS*, int, int, int, char*, char*); <br>int msg_handler(DBPROCESS*, DBINT, int, int, char*); <br> <br>main() <br>{ <br>LOGINREC*login; <br>DBPROCESS*q_dbproc;/* This DBPROCESS is used to <br>* query the database. <br>*/ <br>DBPROCESS*u_dbproc;/* This DBPROCESS is used to <br>* simultaneously update the database. <br>*/ <br>const char  *qualptr;/* This points to the WHERE clause <br>* appropriate for updating q_dbproc's <br>* current data row. <br>*/ <br>RETCODEreturn_code; <br>DBTINYINTage; <br>static charcmdbuf[BUFLEN]; <br>FILE*infile; <br> <br>        dbinit();/* initialize dblib */ <br> <br>/* Install the user-supplied error-handling and message-handling <br>* functions. They are defined at the bottom of this source file. <br>*/ <br>dbmsghandle((DBMSGHANDLE_PROC)msg_handler); <br>dberrhandle((DBERRHANDLE_PROC)err_handler); <br> <br>/* Allocate and initialize the LOGINREC structure to be used <br>* to open a connection to SQL Server. <br>*/ <br> <br>login = dblogin(); <br> <br>DBSETLUSER(login, "user"); <br>DBSETLPWD(login, "my_passwd"); <br>DBSETLAPP(login, "example6"); <br>DBSETLVERSION(login, DBVER60); <br> <br>q_dbproc = dbopen(login, "my_server"); <br>u_dbproc = dbopen(login, "my_server"); <br> <br>printf("Creating the 'alltypes' table.\n"); <br> <br>/* Create a table that contains several SQL Server datatypes. */ <br>dbcmd(q_dbproc,"if exists(select name from sysobjects where name='alltypes') drop table alltypes "); <br> <br>dbcmd(q_dbproc,"create table alltypes "); <br>dbcmd(q_dbproc,"(age tinyint,"); <br>dbcmd(q_dbproc,"userid smallint,"); <br>dbcmd(q_dbproc,"royalty int,"); <br>dbcmd(q_dbproc,"name char(25),"); <br>dbcmd(q_dbproc,"title_id varbinary(20),"); <br>dbcmd(q_dbproc,"us_citizen bit,"); <br>dbcmd(q_dbproc,"account float,"); <br>dbcmd(q_dbproc,"title varchar(20),"); <br>dbcmd(q_dbproc,"manager char(25),"); <br>dbcmd(q_dbproc,"sales decimal(10,2),"); <br>dbcmd(q_dbproc,"timestamp)"); <br> <br>dbcmd(q_dbproc, "create unique index index1 on alltypes(userid)"); <br> <br>dbsqlexec(q_dbproc); <br>while (dbresults(q_dbproc) != NO_MORE_RESULTS) <br>continue; <br> <br>/* Insert rows of data into the newly created table "alltypes". <br>* We will read in the contents of the file and form an <br>* INSERT statement. <br>*/ <br> <br>if ((infile=fopen("datafile","r")) == NULL) <br>{ <br>printf("Unable to open file 'datafile'.\n"); <br>return(STDEXIT); <br>} <br> <br>printf("Inserting rows into the 'alltypes' table...\n"); <br> <br>while ((fgets(cmdbuf,BUFLEN,infile)) != NULL) <br>{ <br>dbfcmd(q_dbproc,"insert into alltypes \n"); <br>dbfcmd(q_dbproc,"values(%s, null) \n",cmdbuf); <br>} <br> <br>dbsqlexec(q_dbproc); <br> <br>/* Process the results of each of the INSERT statements. */ <br> <br>while ((return_code = dbresults(q_dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (return_code == FAIL) <br>printf("One of the insert statements failed.\n"); <br>} <br> <br>/* Using DB-LIBRARY's browse mode facilities, we'll increment <br>* the age of every person in the table. <br>*/ <br> <br>printf("Updating rows in the 'alltypes' table...\n"); <br> <br>dbcmd(q_dbproc,"select * from alltypes for browse"); <br>dbsqlexec(q_dbproc); <br> <br>while ((return_code = dbresults(q_dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (return_code == SUCCEED) <br>{ <br>while (dbnextrow(q_dbproc) != NO_MORE_ROWS) <br>{ <br>age = *((DBTINYINT *)(dbdata(q_dbproc, 1))); <br>qualptr = dbqual(q_dbproc, -1, "alltypes"); <br>dbcmd(u_dbproc, "update alltypes"); <br>dbfcmd <br>(u_dbproc, " set age = %d %s", age+1, qualptr); <br>dbsqlexec(u_dbproc); <br>dbresults(u_dbproc); <br>dbfreequal(qualptr); <br>} <br>} <br>} <br> <br>/* Now, we'll look at the updated contents of the table to <br>* verify that the ages were properly incremented. <br>*/ <br>printf("Selecting rows from the 'alltypes' table:\n"); <br>dbcmd(q_dbproc, "select * from alltypes"); <br>dbsqlexec(q_dbproc); <br>dbresults(q_dbproc); <br>dbprrow(q_dbproc); <br> <br>printf("Dropping 'alltypes' table:\n"); <br>dbcmd(q_dbproc, "drop table alltypes"); <br>dbsqlexec(q_dbproc); <br>dbresults(q_dbproc); <br> <br>dbexit(); <br>return(STDEXIT); <br>} <br> <br>int err_handler(dbproc, severity, dberr, oserr, dberrstr, oserrstr) <br>DBPROCESS*dbproc; <br>intseverity; <br>intdberr; <br>intoserr; <br>char*dberrstr; <br>char*oserrstr; <br>{ <br>    printf("DB-LIBRARY error:\n\t%s\n", dberrstr); <br> <br>if (oserr != DBNOERR) <br>printf("Operating-system error:\n\t%s\n", oserrstr); <br> <br>if ((dbproc == NULL) || (DBDEAD(dbproc))) <br>return(INT_EXIT); <br> <br>return(INT_CANCEL); <br>} <br> <br>int msg_handler(dbproc, msgno, msgstate, severity, msgtext) <br>DBPROCESS*dbproc; <br>DBINTmsgno; <br>intmsgstate; <br>intseverity; <br>char*msgtext; <br>{ <br>printf <br>("SQL Server message %ld, state %d, severity %d:\n\t%s\n", <br>msgno, msgstate, severity, msgtext); <br>return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXAMPLE2.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2376"></a>EXAMPLE2.C</h2>
<pre><code>/*example2.c */ <br>/* <br>** This example opens a data file, inserts data from the file <br>** into a newly created table containing several of the <br>** SQL Server datatypes, and binds and prints the results. <br>** You must have a file named datafile and CREATE DATABASE <br>** permission in your login database.  Also you must have enough room <br>** in your default device to create a new database (minimum 2Mb). <br>*/ <br> <br>#if defined(DBNTWIN32) <br>#include &lt;windows.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;sqlfront.h&gt; <br>#include &lt;sqldb.h&gt; <br> <br>#define BUFLEN2048 <br>#define HEXLEN510 <br>#define PLEN25 <br>#define SALESLEN 11 <br> <br>/* Forward declarations of the error handler and message handler functions. <br>*/ <br>int err_handler(DBPROCESS*, int, int, int, char*, char*); <br>int msg_handler(DBPROCESS*, DBINT, int, int, char*); <br> <br>main(argc,argv) <br>intargc; <br>char*argv[]; <br>{ <br> <br>LOGINREC*login; <br>DBPROCESS*dbproc; <br>RETCODEreturn_code; <br> <br>DBTINYINTage; <br>DBSMALLINTuserid; <br>DBINTroyalty; <br>DBCHARname[PLEN+1]; <br>DBBINARYtitle_id[PLEN+1]; <br>DBBITus_citizen; <br>DBFLT8account; <br>DBCHARtitle[PLEN+1];/* string*/ <br>DBCHARmanager[PLEN+1];/* ntbstring */ <br>DBCHARid_buffer[HEXLEN+1]; <br>DBCHAR   sales_buffer[SALESLEN+1]; <br>DBDECIMAL sales; <br> <br>static charcmdbuf[BUFLEN]; <br>FILE*infile; <br> <br>        dbinit();/* initialize dblib */ <br> <br> <br>/* Install the user-supplied error-handling and message-handling <br>* functions. They are defined at the bottom of this source file. <br>*/ <br> <br>dbmsghandle((DBMSGHANDLE_PROC)msg_handler); <br>dberrhandle((DBERRHANDLE_PROC)err_handler); <br> <br>/* Allocate and initialize the LOGINREC structure to be used <br>* to open a connection to SQL Server. <br>*/ <br> <br>login = dblogin(); <br>DBSETLUSER(login, "user"); <br>DBSETLPWD(login, "my_passwd"); <br>DBSETLAPP(login, "example2"); <br>DBSETLVERSION(login, DBVER60); <br> <br>dbproc = dbopen(login, "my_server"); <br>printf("Creating the 'test' database.\n"); <br>dbcmd(dbproc,"create database test "); <br>dbsqlexec(dbproc); <br>dbresults(dbproc); <br>dbuse(dbproc,"test"); <br>printf("Creating the 'alltypes' table.\n"); <br> <br>/* Create a table that contains several SQL Server datatypes. */ <br>dbcmd(dbproc,"create table alltypes "); <br>dbcmd(dbproc,"(age tinyint,"); <br>dbcmd(dbproc,"userid smallint,"); <br>dbcmd(dbproc,"royalty int,"); <br>dbcmd(dbproc,"name char(25),"); <br>dbcmd(dbproc,"title_id varbinary(20),"); <br>dbcmd(dbproc,"us_citizen bit,"); <br>dbcmd(dbproc,"account float,"); <br>dbcmd(dbproc,"title varchar(20),"); <br>dbcmd(dbproc,"manager char(25),"); <br>dbcmd(dbproc,"sales decimal(10,2))"); <br>dbsqlexec(dbproc); <br>dbresults(dbproc); <br> <br>/* Insert rows of data into the newly created table "alltypes". <br>* We will read in the contents of the file and form an <br>* INSERT statement. <br>*/ <br> <br>if ((infile=fopen("datafile","r")) == NULL) <br>{ <br>printf("Unable to open file 'datafile'.\n"); <br>return(STDEXIT); <br>} <br> <br>printf("Inserting rows into the 'alltypes' table.\n"); <br> <br>while ((fgets(cmdbuf,BUFLEN,infile)) != NULL) <br>{ <br>dbfcmd(dbproc,"insert into alltypes \n"); <br>dbfcmd(dbproc,"values(%s) \n",cmdbuf); <br>} <br>dbsqlexec(dbproc); <br> <br>/* Process the results of each of the INSERT statements. */ <br>while ((return_code = dbresults(dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (return_code == FAIL) <br>printf("One of the insert statements failed.\n"); <br>} <br>printf("Selecting rows from the 'alltypes' table:\n"); <br>dbcmd(dbproc,"select * from alltypes"); <br>dbsqlexec(dbproc); <br> <br>/* Initialize the DBDECIMAL structure so binding and conversions will use defaults */ <br>sales.precision = 0; <br>sales.scale = 0; <br> <br>while ((return_code = dbresults(dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (return_code == SUCCEED) <br>{ <br>dbbind(dbproc,1,TINYBIND, (DBINT) 0,(BYTE *) &amp;age); <br>dbbind(dbproc,2,SMALLBIND, (DBINT) 0,(BYTE *) &amp;userid); <br>dbbind(dbproc,3,INTBIND, (DBINT) 0,(BYTE *) &amp;royalty); <br>dbbind(dbproc,4,CHARBIND, (DBINT) 0,name); <br>dbbind(dbproc,5,BINARYBIND, (DBINT) 0,title_id); <br>dbbind(dbproc,6,BITBIND, (DBINT) 0,(BYTE *) &amp;us_citizen); <br>dbbind(dbproc,7,FLT8BIND, (DBINT) 0,(BYTE *) &amp;account); <br>dbbind(dbproc,8,STRINGBIND, (DBINT) 0,title); <br>dbbind(dbproc,9,NTBSTRINGBIND, (DBINT) 0,manager); <br>dbbind(dbproc,10,DECIMALBIND, (DBINT) 0, (BYTE *)&amp;sales); <br> <br>/* <br>** Initialize null terminator in "name" array, <br>** since CHARBIND does not add one. <br>*/ <br>name[PLEN] = '\0'; <br> <br>while (dbnextrow(dbproc) != NO_MORE_ROWS) <br>{ <br>dbconvert (dbproc, SQLBINARY, title_id, dbdatlen(dbproc, 5), SQLCHAR, id_buffer, (DBINT)-1); <br>dbconvert (dbproc, SQLDECIMAL, (BYTE *)&amp;sales, sizeof(DBDECIMAL), SQLCHAR, sales_buffer, (DBINT)-1); <br> <br>printf <br>("%d%d%ld%s0x%s\n", <br>age, userid, royalty, name, id_buffer); <br>printf <br>("%d%8.2f%s%s %s\n", <br>us_citizen, account, title, manager, sales_buffer); <br> <br>} <br>} <br>} <br>dbexit(); <br>return(STDEXIT); <br>} <br> <br>int err_handler(dbproc, severity, dberr, oserr, dberrstr, oserrstr) <br>DBPROCESS*dbproc; <br>intseverity; <br>intdberr; <br>intoserr; <br>char*dberrstr; <br>char*oserrstr; <br>{ <br>    printf("DB-LIBRARY error:\n\t%s\n", dberrstr); <br> <br>if (oserr != DBNOERR) <br>printf("Operating-system error:\n\t%s\n", oserrstr); <br> <br>if ((dbproc == NULL) || (DBDEAD(dbproc))) <br>return(INT_EXIT); <br> <br>return(INT_CANCEL); <br>} <br> <br>int msg_handler(dbproc, msgno, msgstate, severity, msgtext) <br>DBPROCESS*dbproc; <br>DBINTmsgno; <br>intmsgstate; <br>intseverity; <br>char*msgtext; <br>{ <br>printf <br>("SQL Server message %ld, state %d, severity %d:\n\t%s\n", <br>msgno, msgstate, severity, msgtext); <br>return(0); <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

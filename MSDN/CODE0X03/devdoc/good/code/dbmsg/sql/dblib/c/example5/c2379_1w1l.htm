<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXAMPLE5.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2379"></a>EXAMPLE5.C</h2>
<pre><code>/*example5.c */ <br>/* <br>** This example illustrates dbconvert.It converts a <br>** number of constants to strings, a number of strings <br>** to numerical or binary quantities, and a number of <br>** numerical quantities to other numerical types. <br>** <br>*/ <br> <br>#if defined(DBNTWIN32) <br>#include &lt;windows.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;sqlfront.h&gt; <br>#include &lt;sqldb.h&gt; <br> <br>#define ARRAY_LEN20 <br> <br>/* Forward declarations of the error handler and message handler. <br>*/ <br>int err_handler(DBPROCESS*, int, int, int, char*, char*); <br>int msg_handler(DBPROCESS*, DBINT, int, int, char*); <br> <br>main(argc, argv) <br>intargc; <br>char*argv[]; <br>{ <br>/* These variables hold the results of data conversions. */ <br>static DBBINARYmy_binary_array[ARRAY_LEN] <br>= {0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0}; <br>DBFLT8my_flt8; <br>DBINTmy_int4; <br>DBMONEYmy_money; <br>DBCHARmy_string[ARRAY_LEN]; <br> <br>        dbinit();/* initialize dblib */ <br> <br>/* Install the user-supplied error-handling and message-handling <br>* functions. They are defined at the bottom of this source file. <br>*/ <br>dbmsghandle((DBMSGHANDLE_PROC)msg_handler); <br>dberrhandle((DBERRHANDLE_PROC)err_handler); <br> <br>/* Convert numerical and binary constants to strings. */ <br> <br>dbconvert <br>((DBPROCESS *)NULL, SQLBINARY, my_binary_array, (DBINT)8, <br>            SQLCHAR, my_string,(DBINT)-1); <br>printf("Binary constant 0x123456789abcdef0 converted to string"); <br>printf("\"%s\".\n\n", my_string); <br> <br>my_flt8 = 55.555; <br>dbconvert <br>((DBPROCESS *)NULL, SQLFLT8, (BYTE *) &amp;my_flt8, <br>            (DBINT)-1, SQLCHAR, my_string, (DBINT)-1); <br>printf <br>("Floating-pt constant 55.555 converted to string \"%s\".\n\n", <br>my_string); <br> <br>/* Convert string constants to numerical and binary quantities. */ <br> <br>dbconvert <br>((DBPROCESS *)NULL, SQLCHAR, "123", (DBINT)-1, SQLINT4, (BYTE *) <br>&amp;my_int4, (DBINT)-1); <br>printf <br>("String constant \"123\" converted to 4-byte integer %ld.\n\n", <br>my_int4); <br> <br>dbconvert <br>((DBPROCESS *)NULL, <br>SQLCHAR, "0xfedc", (DBINT)-1, SQLBINARY, my_binary_array, <br>            (DBINT)ARRAY_LEN); <br>printf("String constant \"0xfedc\" converted to binary sequence "); <br>printf("%hx.\n\n", *((DBSMALLINT *)my_binary_array)); <br> <br>dbconvert <br>((DBPROCESS *)NULL, SQLCHAR, "123.456", (DBINT)-1, SQLFLT8, <br>   (BYTE *) &amp;my_flt8, (DBINT)-1); <br>printf("String constant \"123.456\" converted to "); <br>printf("floating-pt number %f.\n\n", my_flt8); <br> <br>/* Convert numerical types to other numerical types. */ <br> <br>my_flt8 = 98.76; <br>dbconvert <br>   ((DBPROCESS *)NULL, SQLFLT8, (BYTE *) &amp;my_flt8, (DBINT)-1, SQLMONEY, <br>(BYTE *) &amp;my_money, (DBINT)-1); <br>dbconvert <br>   ((DBPROCESS *)NULL, SQLMONEY, (BYTE *) &amp;my_money, (DBINT)-1, SQLCHAR, <br>       my_string, (DBINT)-1); <br>printf <br>("floating-pt number %f converted to money value %s.\n\n", <br>my_flt8, my_string); <br> <br>dbconvert <br>   ((DBPROCESS *)NULL, SQLMONEY, (BYTE *) &amp;my_money, (DBINT)-1, SQLFLT8, <br>       (BYTE *) &amp;my_flt8, (DBINT)-1); <br>printf <br>("money value %s converted to floating-pt value %f.\n\n", <br>my_string, my_flt8); <br> <br>return(STDEXIT); <br>} <br> <br>int err_handler(dbproc, severity, dberr, oserr, dberrstr, oserrstr) <br>DBPROCESS*dbproc; <br>intseverity; <br>intdberr; <br>intoserr; <br>char*dberrstr; <br>char*oserrstr; <br>{ <br>    printf("DB-LIBRARY error:\n\t%s\n", dberrstr); <br> <br>if (oserr != DBNOERR) <br>printf("Operating-system error:\n\t%s\n", oserrstr); <br> <br>if ((dbproc == NULL) || (DBDEAD(dbproc))) <br>return(INT_EXIT); <br> <br>return(INT_CANCEL); <br>} <br> <br>int msg_handler(dbproc, msgno, msgstate, severity, msgtext) <br>DBPROCESS*dbproc; <br>DBINTmsgno; <br>intmsgstate; <br>intseverity; <br>char*msgtext; <br>{ <br>printf <br>("SQL Server message %ld, state %d, severity %d:\n\t%s\n", <br>msgno, msgstate, severity, msgtext); <br>return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLTESTC.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2386"></a>SQLTESTC.C</h2>
<pre><code>/************************************************************************* <br> <br>SQLTESTC - SQL Data Server sample program for console-based Windows NT. <br>  <br>Copyright (c), 1995 by Microsoft Corp. <br> <br>*************************************************************************/ <br> <br>#defineDBNTWIN32// must identify operating system environment <br>#include "windows.h" <br> <br>#include &lt;sqlfront.h&gt; <br>#include &lt;sqldb.h&gt;   // DB-LIB header file (should always be included) <br>#include &lt;stdio.h&gt; <br> <br> <br>main () <br>{ <br>PDBPROCESS dbproc;  // allocatea DB-LIB process structure <br>PLOGINREC  login;   // allocatea DB-LIB login structure <br> <br>// Variables used to store the returning data <br>char       au_lname[41]; <br>char       au_fname[20]; <br>char       id[12]; <br>char       phone[13]; <br>char       address[41]; <br>char       city[21]; <br>char       state[3]; <br>char       zip[6]; <br>char       getname[41]; <br>char       Servername[25]; <br>RETCODE    result_code; <br> <br>// Forward declarations of the error handler and message handler. <br>    int err_handler(PDBPROCESS, int, int, int, char*, char*); <br>    int msg_handler(PDBPROCESS, DBINT, int, int, char*); <br> <br>if (dbinit() == (char *)NULL) <br>{ <br>printf("Communications layer not loaded\n"); <br>return(1); <br>} <br> <br>// Install the user-supplied error-handlingand message-handling <br>// routines. They are defined at the bottomof thissource file. <br> <br>dberrhandle((DBERRHANDLE_PROC)err_handler); <br>dbmsghandle((DBMSGHANDLE_PROC)msg_handler); <br> <br>// Get server's computer name <br>Servername[0] = '\0'; <br>printf ("\nEnter Name of SQL Server: "); <br>gets (Servername); <br> <br>login = dblogin();                     // get login record from DB-LIB <br>DBSETLUSER (login, (char *)"sa");      // set the username <br>DBSETLAPP (login, (char *)"sqltestp"); // set the application name <br>DBSETLPWD (login, (char *)"");         // set the SQL Server password <br>DBSETLVERSION(login,DBVER60); <br> <br>// Now attempt to create and initialize a DBPROCESS structure <br>if ((dbproc= dbopen (login, Servername)) == NULL) <br>{ <br>printf ("dbopen failed\n"); <br>return (1); // exit program <br>} <br> <br>dbuse (dbproc, "pubs"); // use the "pubs" database <br> <br>while (TRUE) <br>{ <br>printf ("\nEnter author's last name to retrieve (return to exit): "); <br>gets (getname); <br> <br>if (getname[0] == '\0') // if only a return was entered <br>break; <br> <br>// construct command buffer to be sent to the SQL server <br>dbcmd (dbproc, (char *)"select au_id, au_lname, au_fname, phone,"); <br>dbcmd (dbproc, (char *)" address, city, state, zip"); <br>dbcmd (dbproc, (char *)" from authors"); <br>dbcmd (dbproc,(char *)" where au_lname = '"); <br>dbcmd (dbproc, (char *)getname); <br>dbcmd (dbproc, (char *)"'"); <br> <br>dbsqlexec (dbproc); // send command buffer to SQL server <br> <br>// now check the results from the SQL server <br>while ((result_code = dbresults(dbproc)) != NO_MORE_RESULTS) <br>{ <br>if (result_code == SUCCEED) <br>{ <br>dbbind (dbproc,1, NTBSTRINGBIND, (DBINT) 0, (char *)id); <br>dbbind (dbproc,2, NTBSTRINGBIND, (DBINT) 0, (char *)au_lname); <br>dbbind (dbproc,3, NTBSTRINGBIND, (DBINT) 0, (char *)au_fname); <br>dbbind (dbproc,4, NTBSTRINGBIND, (DBINT) 0, (char *)phone); <br>dbbind (dbproc,5, NTBSTRINGBIND, (DBINT) 0, (char *)address); <br>dbbind (dbproc,6, NTBSTRINGBIND, (DBINT) 0, (char *)city); <br>dbbind (dbproc,7, NTBSTRINGBIND, (DBINT) 0, (char *)state); <br>dbbind (dbproc,8, NTBSTRINGBIND, (DBINT) 0, (char *)zip); <br> <br>// now process the rows <br>while (dbnextrow(dbproc) != NO_MORE_ROWS) <br>{ <br>printf ("Author ID:  %s\n",id); <br>printf ("Last Name:  %s\n",au_lname); <br>printf ("First Name: %s\n",au_fname); <br>printf ("Address:    %s\n",address); <br>printf ("City:       %s\n",city); <br>printf ("State:      %s\n",state); <br>printf ("Zip Code:   %s\n",zip); <br>printf ("Telephone:  %s\n",phone); <br>printf ("\n"); <br>} <br>} <br>else <br>{ <br>printf ("Results Failed\n"); <br>break; <br>} <br>} <br>} // while (TRUE) <br> <br>// Close the connection and exit <br>dbexit(); <br>} <br> <br>int err_handler(PDBPROCESS dbproc, int severity, int dberr, int oserr, char * dberrstr, char * oserrstr) <br>{ <br>if (dberrstr != NULL) <br>printf("DB-LIBRARY error:\n\t%s\n", dberrstr); <br> <br>if (oserr != DBNOERR) <br>printf("Operating-system error:\n\t%s\n", oserrstr); <br> <br>if ((dbproc == NULL) ||(DBDEAD(dbproc))) <br>return(INT_EXIT); <br>else <br>return(INT_CANCEL); <br>} <br> <br>int msg_handler(PDBPROCESS dbproc, DBINT msgno, int msgstate, int severity, char * msgtext) <br>{ <br>printf("SQL Server message %ld, state %d, severity %d:\n\t%s\n", <br>msgno, msgstate, severity, msgtext); <br>return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

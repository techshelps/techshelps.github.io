<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GATEWAY.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2399"></a>GATEWAY.C</h2>
<pre><code>// This program is an example of an Open Data Services application. It accepts <br>// requests from clients and then passes those requests on to an SQL server. <br>// The results from the SQL server are then sent back to the client. <br> <br>#include    &lt;stdlib.h&gt; <br>#include    &lt;stdio.h&gt; <br>#include    &lt;string.h&gt; <br>#include    &lt;windows.h&gt; <br>#include    &lt;sqlfront.h&gt; <br>#include    &lt;sqldb.h&gt; <br>#include    &lt;srv.h&gt; <br> <br>// Globals <br>// <br>DBCHAR *SrvrName = "";  // Default remote server name <br>DBCHAR *RegistryName = "Gateway";   // Default registry name <br> <br>#define EXIT_OK 0 <br>#define EXIT_ERROR 1 <br> <br>// function prototypes <br>// <br>void getargs(int argc, char **argv); <br> <br>void main(int argc, char **argv); <br> <br>int SRVAPI init_server(SRV_SERVER *server); <br> <br>void SRVAPI set_remote_server_name(char *name); <br> <br>int chk_err(SRV_SERVER *server, SRV_PROC *srvproc, int srverror, <br>            BYTE severity, BYTE state, int oserrnum, DBCHAR *errtext, <br>            int errtextlen, DBCHAR *oserrtext, int oserrtextlen); <br> <br>void main(argc, argv) <br>int argc; <br>char *argv[]; <br>{ <br>    SRV_CONFIG *config; // The configuration structure <br>    SRV_SERVER *server; // The service process <br>    int exitcode = EXIT_ERROR; <br> <br>    // Read any command line arguments. <br>    // <br>    getargs(argc, argv); <br> <br>    // Send the name retrieved to the gateway's DLL module <br>    // <br>    set_remote_server_name(SrvrName); <br> <br>    // Allocate a configuration structure that is used to initialize <br>    // the Open Data Services application <br>    // <br>    config = srv_config_alloc(); <br> <br>    // Allow 20 connections at a time. <br>    // <br>    srv_config(config, (DBINT)SRV_CONNECTIONS, "100", SRV_NULLTERM); <br> <br>    // Set the log file. <br>    // <br>    srv_config(config, (DBINT)SRV_LOGFILE, "gateway.log", SRV_NULLTERM); <br> <br>    // The gateway will not convert data source strings in order to allow <br>    // SQL Server and DB-libraray to coordinate on the codepage as usual. <br>    // <br>    srv_config(config, (DBINT)SRV_ANSI_CODEPAGE, "TRUE", SRV_NULLTERM); <br> <br>    // Install the Open Data Services error handler. <br>    // <br>    srv_errhandle(chk_err); <br> <br>    // Initialize the gateway and save the server handle <br>    // so it can be used in later functions. <br>    // <br>    server = srv_init(config, RegistryName, SRV_NULLTERM); <br>    if (server == NULL) { <br>        printf("Unable to initialize Gateway.\n"); <br>        ExitProcess(exitcode); <br>    } <br> <br>    // When starting the gateway, initialize the remote server structure. <br>    // This is done in the init_server() function. <br>    // All the other event handlers are also defined in the init_server() <br>    // function. <br>    // <br>    srv_handle(server, (DBINT)SRV_START, init_server); <br> <br>    // Now everything's ready to go with our gateway, so we <br>    // start it and keep it going until we get a stop request. <br>    // <br>    srv_log(server, FALSE, " ", SRV_NULLTERM);  // insert blank line <br>    srv_log(server, TRUE, "Gateway Starting", SRV_NULLTERM); <br> <br>    printf("\nGateway Starting\n"); <br> <br>    srv_run(server); <br> <br>} <br> <br>// GETARGS <br>//    Read the command line arguments. <br>// <br>// Parameters: <br>//     argc - int (from "main" entry) <br>//     argv - pointer to array of char pointers (from "main" entry) <br>// <br>// Returns: <br>//     VOID <br>// <br>void getargs(int argc, char *argv[]) <br>{ <br> <br>    int i; <br>    char *ptr; <br>    int exitcode = EXIT_ERROR; <br> <br>    for (i = 1; i &lt; argc; ++i) { <br>        if (argv[i][0] != '-' &amp;&amp; argv[i][0] != '/') { <br>            printf( <br>            "Usage: gateway -S&lt;remote server name&gt; [-R&lt;registry key name&gt;]\n"); <br>                 <br>            ExitProcess(exitcode); <br>        } <br>        ptr = argv[i]; <br>        switch (ptr[1]) { <br> <br>        case 'S': <br>            if (strlen(ptr + 2) &gt; 0) { <br>                SrvrName = ptr + 2; <br>            } <br>            break; <br> <br>        case 'R': <br>            if (strlen(ptr + 2) &gt; 0) { <br>                RegistryName = ptr + 2; <br>            } <br>            break; <br> <br>        default: <br>            printf( <br>            "Usage: gateway -S&lt;remote server name&gt; [-R&lt;registry key name&gt;]\n"); <br>                 <br>            ExitProcess(exitcode); <br>        } <br>    } <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

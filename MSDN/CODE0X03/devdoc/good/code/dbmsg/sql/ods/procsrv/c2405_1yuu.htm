<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVICE.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2406"></a>SERVICE.C</h2>
<pre><code>// <br>// This program installs the PROCSRV.exe into the Service Control Manager.  It also <br>// adds a service entry to the SQL Service Manager. <br>// The service name "ProcSrv" will be added to the registry under the tree <br>// "\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SQLServer\" <br>// <br>// Copyright 1994, Microsoft. <br>// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#define PROCSRV             "ProcSrv" <br>#define PROCSRV_KEY_PATH    "SOFTWARE\\Microsoft\\MSSQLServer\\ProcSrv\\" <br>#define SQL_SM_KEY          "SOFTWARE\\Microsoft\\MSSQLServer\\SQL Service Manager\\" <br> <br>#define NAMED_PIPE_DLL      "SSNMPN60" <br>#define NAMED_PIPE_ADDRESS  "\\\\.\\pipe\\sql\\query" <br>#define TCP_IP_DLL          "SSMSSO60" <br>#define TCP_ADDRESS         "1433" <br> <br>void AddToRegistry(); <br>void RemoveFromRegistry(); <br>BOOL DuplicateEntry(); <br>void RefreshStoplight(); <br> <br>void main( int argc, char ** argv ) <br>{ <br>    if( argc != 2 ) <br>        goto Usage; <br> <br>    if( !stricmp("add", argv[1]) ) <br>                AddToRegistry(); <br>        else if( !stricmp("remove", argv[1]) ) <br>                RemoveFromRegistry(); <br>    else <br>        goto Usage; <br> <br>    RefreshStoplight(); <br>    return; <br> <br>Usage: <br>        printf( "Usage: service {add|remove}\n" <br>                    "  where \"add\" adds ProcSrv and \"remove\" removes it\n" ); <br>} <br> <br> <br>// ************************************************************************** <br>// <br>//  FUNCTION: AddToRegistry() <br>// <br>//  PURPOSE:  Add ProcSrv to Registry and Service Control Manager <br>// <br>// ************************************************************************** <br> <br>void AddToRegistry() <br>{ <br>    int    i; <br>    HKEY   hKey; <br>    HKEY   hKeySM; <br>    DWORD  dwDisposition; <br>    DWORD  dwSize = 0; <br>    DWORD  dwSizeSM; <br>    DWORD  dwType; <br>    DWORD  dwPathLength; <br>    char   szPath[1024]; <br>    char   szSMvalues[1024]; <br>    char   szSaveListenOn[1024]; <br>    char * szSaveListenOnPos = szSaveListenOn; <br> <br>    SC_HANDLE hSCM;     // Handle to opened Service Control Manager <br>    SC_LOCK   LockSCM;  // Lock of Service Control Manager <br>    SC_HANDLE hSrvc;    // Handle to service <br> <br>    // Check for existance of "ProcSrv" in registry <br>    // <br>    if( DuplicateEntry() ) <br>    { <br>        printf( "Duplicate entry 'ProcSrv' found in Registry, remove 'ProcSrv' from Registry\n" ); <br>        return; <br>    } <br> <br>    // ======== Update SQL Service Manager info =========== <br>    // <br>    if( RegCreateKeyEx(HKEY_LOCAL_MACHINE, <br>                       SQL_SM_KEY, <br>                       0, <br>                       NULL, <br>                       REG_OPTION_NON_VOLATILE, <br>                       KEY_ALL_ACCESS, <br>                       NULL, <br>                       &amp;hKeySM, <br>                       &amp;dwDisposition) <br>    != ERROR_SUCCESS ) <br>        goto AddExit2; <br> <br>    dwSizeSM = sizeof( szSMvalues ); <br> <br>    // Get list of SQL Service Manager entries <br>    // <br>    if( RegQueryValueEx(hKeySM, <br>                        "Services", <br>                        NULL, <br>                        &amp;dwType, <br>                        szSMvalues, <br>                        &amp;dwSizeSM) <br>    != ERROR_SUCCESS ) <br>    { <br>        dwSizeSM = 1; <br>        szSMvalues[0] = '\0'; <br>    } <br> <br>    if( (dwSizeSM+strlen(PROCSRV)+1) &lt; sizeof(szSMvalues) ) <br>    { <br>        // Append new value to list of SQL Service Manager entries. <br>        // <br>        memcpy( (szSMvalues+dwSizeSM-1), <br>                PROCSRV, <br>                (strlen(PROCSRV)+1) ); <br>        dwSizeSM += strlen(PROCSRV); <br>        szSMvalues[dwSizeSM] = '\0'; <br>        dwSizeSM++; <br>    } <br> <br>    // Note that we delay write of new values to Stoplight Registry entry. <br>    // First well will try to update the Service Control Manager. <br> <br>    // ==== Write entry to Service Control Manager ==== <br>    // <br>    hSCM = OpenSCManager( NULL, <br>                          "ServicesActive", <br>                          SC_MANAGER_ALL_ACCESS ); <br>    if( hSCM == NULL ) <br>        goto AddExit4; <br> <br>    i = 0; <br>    while( TRUE ) <br>    { <br>        LockSCM = LockServiceDatabase( hSCM ); <br> <br>        if( LockSCM != NULL ) <br>            break; <br> <br>        if( i++ &gt;= 5 ) <br>            goto AddExit3;  // Can't lock database <br> <br>        Sleep( 1000 );  // sleep for a second <br>    } <br> <br>    // Get the path of this process.  We'll use it to constuct the path of the <br>    // ProcSrv.exe <br>    // <br>    szPath[0] = '\0'; <br>    dwPathLength = GetModuleFileName( GetModuleHandle(NULL), szPath, sizeof(szPath) ); <br> <br>    // Stip off process name (i.e. "service.exe") <br>    // <br>    while( dwPathLength &gt; 1 ) <br>    { <br>        --dwPathLength; <br>        if( szPath[dwPathLength] == '\\' || szPath[dwPathLength] == ':' ) <br>        { <br>                dwPathLength++; <br>                szPath[dwPathLength] = '\0';    // Null terminate after the back slash <br>                break; <br>        } <br>    } <br> <br>    // Append "procsrv.exe" to path <br>    // <br>    strcat( szPath, PROCSRV ); <br>    strcat( szPath, ".exe" ); <br> <br>    // Let's create the service entry <br>    // <br>    hSrvc = CreateService( hSCM, <br>                           PROCSRV,  // Service name to start <br>                           PROCSRV,  // Display name <br>                           SERVICE_ALL_ACCESS, <br>                           SERVICE_WIN32_OWN_PROCESS, <br>                           SERVICE_DEMAND_START, <br>                           SERVICE_ERROR_NORMAL, <br>                           szPath, <br>                           NULL, <br>                           NULL, <br>                           NULL, <br>                           NULL, <br>                           NULL ); <br>    if( hSrvc == NULL ) <br>        goto AddExit3; <br> <br>    CloseServiceHandle( hSrvc ); <br>    UnlockServiceDatabase( LockSCM ); <br>    CloseServiceHandle( hSCM ); <br> <br>    // Now we'll update Registry with new ProcSrv entry <br>    // <br>    if( RegCreateKeyEx(HKEY_LOCAL_MACHINE, <br>                       PROCSRV_KEY_PATH, <br>                       0, <br>                       NULL, <br>                       REG_OPTION_NON_VOLATILE, <br>                       KEY_ALL_ACCESS, <br>                       NULL, <br>                       &amp;hKey, <br>                       &amp;dwDisposition) <br>    != ERROR_SUCCESS ) <br>        goto AddExit2; <br> <br>    // ==== Update ListenOn ==== <br>    // <br>    strcpy( szSaveListenOnPos, NAMED_PIPE_DLL ); <br>    strcat( szSaveListenOnPos, "," ); <br>    strcat( szSaveListenOnPos, NAMED_PIPE_ADDRESS ); <br> <br>    dwSize += (strlen(szSaveListenOnPos) + 1); <br>    szSaveListenOnPos = szSaveListenOn + dwSize; <br> <br>    strcpy( szSaveListenOnPos, TCP_IP_DLL ); <br>    strcat( szSaveListenOnPos, "," ); <br>    strcat( szSaveListenOnPos, TCP_ADDRESS ); <br> <br> <br>    dwSize += (strlen(szSaveListenOnPos) + 1); <br>    szSaveListenOnPos = szSaveListenOn + dwSize; <br> <br>    szSaveListenOn[dwSize] = '\0'; <br>    dwSize++; <br> <br>    if( RegSetValueEx(hKey, <br>                      "ListenOn", <br>                      0, <br>                      REG_MULTI_SZ, <br>                      szSaveListenOn, <br>                      dwSize) <br>    != ERROR_SUCCESS ) <br>        goto AddExit1; <br> <br>    // ==== Complete the update of the SQL Service Manager info ============ <br>    // We do it here to avoid a duplicate entry if other registry updates <br>    // fail. <br>    // <br>    if( RegSetValueEx(hKeySM, <br>                      "Services", <br>                      0, <br>                      REG_MULTI_SZ, <br>                      szSMvalues, <br>                      dwSizeSM) <br>    != ERROR_SUCCESS ) <br>    { <br>        RegCloseKey( hKeySM ); <br>        goto AddExit1; <br>    } <br> <br>    RegFlushKey( hKeySM ); <br>    RegCloseKey( hKeySM ); <br> <br>    return; <br> <br>AddExit1: <br>    RegCloseKey( hKey ); <br> <br>AddExit2: <br>    printf( "Unable to Update Registry\n" ); <br>    return; <br> <br>AddExit3: <br>    UnlockServiceDatabase( LockSCM ); <br>    CloseServiceHandle( hSCM ); <br> <br>AddExit4: <br>    printf( "Unable to Update Service Control Manager\n" ); <br>    return; <br>} <br> <br> <br>// ************************************************************************** <br>// <br>//  FUNCTION: RemoveFromRegistry() <br>// <br>//  PURPOSE:  Remove ProcSrv From Registry and Service Control Manager <br>// <br>// ************************************************************************** <br> <br>void RemoveFromRegistry() <br>{ <br>    int    i; <br>    HKEY   hKey; <br>    DWORD  dwSizeSM; <br>    DWORD  dwType; <br>    char   szSMvalues[1024]; <br>    char * szSMvaluesPos; <br> <br>    SC_HANDLE hSCM;     // Handle to opened Service Control Manager <br>    SC_LOCK   LockSCM;  // Lock of Service Control Manager <br>    SC_HANDLE hSrvc;    // Handle to service <br> <br>    // Check for non-existance of "ProcSrv" in registry <br>    // <br>    if( !DuplicateEntry() ) <br>    { <br>        printf( "'ProcSrv' not found in Registry\n" ); <br>        return; <br>    } <br> <br>    // =============== Remove 'ProcSrv' key from Registry ============= <br>    // <br>    RegDeleteKey( HKEY_LOCAL_MACHINE, PROCSRV_KEY_PATH ); <br> <br>    // =============== Update SQL Service Manager info ================ <br>    // <br>    if( RegOpenKeyEx(HKEY_LOCAL_MACHINE, <br>                     SQL_SM_KEY, <br>                     0, <br>                     KEY_ALL_ACCESS, <br>                     &amp;hKey) <br>    != ERROR_SUCCESS ) <br>        goto RemoveExit2; <br> <br>    dwSizeSM = sizeof( szSMvalues ); <br> <br>    // Get SQL Service Manager entries <br>    // <br>    if( RegQueryValueEx(hKey, <br>                        "Services", <br>                        NULL, <br>                        &amp;dwType, <br>                        szSMvalues, <br>                        &amp;dwSizeSM) <br>    != ERROR_SUCCESS ) <br>        goto RemoveExit1;       // No SQL Service Manager entries. <br> <br>    szSMvaluesPos = szSMvalues; <br> <br>    while( szSMvaluesPos &lt; (szSMvalues + dwSizeSM) ) <br>    { <br>        if( !stricmp(szSMvaluesPos, PROCSRV) ) <br>        { <br>                // Remove 'ProcSrv' from SQL Service Manager entries. <br>                // <br>                memcpy( szSMvaluesPos, <br>                        szSMvaluesPos + sizeof(PROCSRV), <br>                        ((szSMvalues + dwSizeSM) - (szSMvaluesPos + sizeof(PROCSRV))) ); <br> <br>            dwSizeSM -= sizeof( PROCSRV ); <br>                break; <br>        } <br> <br>        // 'ProcSrv' entry not found, position to next entry. <br>        // <br>        szSMvaluesPos += (strlen( szSMvaluesPos ) + 1); <br>    } <br> <br>    // Write back out new list of SQL Service Manager entries. <br>    // <br>    if( RegSetValueEx(hKey, <br>                      "Services", <br>                      0, <br>                      REG_MULTI_SZ, <br>                      szSMvalues, <br>                      dwSizeSM) <br>    != ERROR_SUCCESS ) <br>    { <br>        RegCloseKey( hKey ); <br>        goto RemoveExit1; <br>    } <br> <br>    RegFlushKey( hKey ); <br>    RegCloseKey( hKey ); <br> <br>    // ==== Remove entry from Service Control Manager ==== <br>    // <br>    hSCM = OpenSCManager( NULL, <br>                          "ServicesActive", <br>                          SC_MANAGER_ALL_ACCESS ); <br>    if( hSCM == NULL ) <br>        goto RemoveExit4; <br> <br>    i = 0; <br>    while( TRUE ) <br>    { <br>        LockSCM = LockServiceDatabase( hSCM ); <br> <br>        if( LockSCM != NULL ) <br>            break; <br> <br>        if( i++ &gt;= 5 ) <br>            goto RemoveExit3;   // Can't lock database <br> <br>        Sleep( 1000 );  // sleep for a second <br>    } <br> <br>    // Let's remove the service entry <br>    // <br>    hSrvc = OpenService( hSCM, <br>                         PROCSRV,       // Service name <br>                         SERVICE_ALL_ACCESS ); <br>    if( hSrvc == NULL ) <br>        goto RemoveExit3; <br> <br>    DeleteService( hSrvc ); <br> <br>    CloseServiceHandle( hSrvc ); <br>    UnlockServiceDatabase( LockSCM ); <br>    CloseServiceHandle( hSCM ); <br> <br>    return; <br> <br>RemoveExit1: <br>    RegCloseKey( hKey ); <br> <br>RemoveExit2: <br>    printf( "Unable to Update Registry\n" ); <br>    return; <br> <br>RemoveExit3: <br>    UnlockServiceDatabase( LockSCM ); <br>    CloseServiceHandle( hSCM ); <br> <br>RemoveExit4: <br>    printf( "Unable to Update Service Control Manager\n" ); <br>    return; <br>} <br> <br> <br>// ************************************************************************** <br>// <br>//  FUNCTION: DuplicateEntry <br>// <br>//  PURPOSE:  Determines if a duplicate "ProcSrv" exist in <br>//            the registry. <br>// <br>//  RETURNS: <br>//          TRUE if name exist, else <br>//          FALSE if name not found. <br>// <br>// <br>// ************************************************************************** <br> <br>BOOL DuplicateEntry() <br>{ <br>    HKEY     hKey; <br> <br>    if( RegOpenKeyEx(HKEY_LOCAL_MACHINE, <br>                     PROCSRV_KEY_PATH, <br>                     0, <br>                     KEY_ENUMERATE_SUB_KEYS, <br>                     &amp;hKey) <br>    != ERROR_SUCCESS ) <br>        return FALSE; <br> <br>    RegCloseKey( hKey ); <br>    return TRUE; <br>} <br> <br> <br>// ************************************************************************** <br>// <br>//  FUNCTION: RefreshStoplight() <br>// <br>//  PURPOSE:  This routine causes the SQL Service Manager to refresh its <br>//            list. <br>// <br>// ************************************************************************** <br> <br>void RefreshStoplight() <br>{ <br>    HANDLE hEvent; <br> <br>    hEvent = OpenEvent( EVENT_MODIFY_STATE, <br>                        TRUE, <br>                        "MICROSOFTSQLServiceControlManagerRefresh" ); <br>    if( hEvent ) <br>    { <br>        SetEvent( hEvent ); <br>        CloseHandle( hEvent ); <br>    } <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

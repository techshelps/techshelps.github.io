<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SOC.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2416"></a>SOC.C</h2>
<pre><code>#include &lt;stdio.h&gt; <br> <br>#define INITGUID <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br> <br>#include &lt;sqloleid.h&gt; <br>#include &lt;sqlole.h&gt; <br> <br>// This sample demonstrates how to program SQLOLE in C.  Differences from C++ are noted. <br>int main (void) <br>{ <br>// Variables must be defined at beginning of block, rather than at point of initialization. <br>// (If this is done later, the compiler error message is very unhelpful in this case). <br>LPSQLOLESERVER pSQL = NULL; <br>HRESULT hr; <br>if FAILED(hr = CoInitialize (NULL)) <br>{ <br>printf("CoInitialize Failed\n"); <br>return (0); <br>} <br>printf("Hello\n"); <br> <br>// Must use '&amp;' operator on IID's in C; C++ uses references for these. <br>if FAILED(hr = CoCreateInstance(&amp;CLSID_SQLOLEServer, NULL, CLSCTX_INPROC_SERVER, <br>&amp;IID_ISQLOLEServer, (LPVOID*)&amp;pSQL)) <br>{ <br>printf("CoCreateInstance Failed\n"); <br>return (0); <br>} <br> <br>// The returned pointer from SQLOLE is interpreted as a pointer to an array of function pointers, <br>// which are the C equivalent of C++'s "virtual function table", or vtbl.  Hence in this code, <br>// pSQL is a pointer to a pointer to a function table, and the additional indirection of including <br>// the actual vtbl pointer (-&gt;lpVtbl) is necessary.  Also, the pSQL pointer must be explicitly passed <br>// to the called function in C; in C++, this is done implicitly as the "this" pointer. <br>pSQL-&gt;lpVtbl-&gt;SetLoginTimeout(pSQL, 10); <br> <br>if FAILED(hr = pSQL-&gt;lpVtbl-&gt;Connect(pSQL, "tedhar2","sa","")) <br>{ <br>HRESULT h = HRESULT_CODE(hr); <br>printf("Connect failed\n"); <br>} <br>else <br>{ <br>SQLOLE_BSTR name; <br>pSQL-&gt;lpVtbl-&gt;GetName(pSQL, &amp;name); <br>printf("%s\n", name); <br>SQLOLEFreeString(name); <br>} <br> <br>pSQL-&gt;lpVtbl-&gt;Release(pSQL); <br>CoUninitialize (); <br>printf("Goodbye\n"); <br>return (0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STANDARD.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2273"></a>STANDARD.H</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   Title:   STANDARD.H <br>//|      This module contains standard includes which are required by many modules. <br>//|         This include file is not specific for any tool. <br>//|   Notes: <br>//|      1) If using this file for a DLL, #define STANDARD_DLL, otherwise it is <br>//|            assumed that it is being used for a Windows application. <br>//*--------------------------------------------------------------------------------- <br>#ifndef STANDARD_DEFS <br>#define STANDARD_DEFS <br> <br>#include &lt;windows.h&gt; <br>#include "sql.h" <br>#include "sqlext.h" <br> <br> <br>//---------------------------------------------------------------------------------- <br>//    Defines and macros <br>//---------------------------------------------------------------------------------- <br>#define TEMP_SIZE    50 <br>#define MAX_BUFF     1000 <br>#define  MAXBUFF           256 <br>#define  MAXFILEBUFF       32000 <br>#define  DFTBUFFSIZE       30 <br>#define  LARGEBUFF         65535 <br> <br>// <br>// When calling ODBC functions, you should allow for the case where <br>// SQL_SUCCESS_WITH_INFO was returned.  Unless you want to see the informational <br>// SQL state, you should treat these as the same.  The following macros are <br>// handy to do just that. <br>// <br>#define RC_SUCCESSFUL(rc)  (rc == SQL_SUCCESS || rc == SQL_SUCCESS_WITH_INFO) <br>#define RC_NOTSUCCESSFUL(rc) (!(RC_SUCCESSFUL(rc))) <br> <br>// <br>// Win 3.x specific items <br>// <br>#ifndef WIN32 <br> <br>#define INTFUN FAR PASCAL <br>#define EXTFUN FAR PASCAL __export <br>#define dCSEG(type) const type _based(_segname("_CODE")) <br> <br>// <br>// 32-bit stuff <br>// <br>#else <br>#define MoveTo(hdc, x, y)        MoveToEx(hdc, x, y, NULL) <br>#define dCSEG(type) const type <br>#define INTFUN WINAPI <br>#define EXTFUN WINAPI <br> <br>#define WRITE     OF_WRITE <br>#define READ      OF_READ <br>#endif <br> <br> <br> <br>#ifdef WIN32 <br>#else <br>#endif <br>#define VSZFile static char vszFile[]=__FILE__; <br> <br>#ifdef _DEBUG <br>#define DEBUGMSG(msg) OutputDebugString((LPSTR)msg) <br>#else <br>#define DEBUGMSG(msg) <br>#endif <br> <br> <br>#ifdef _DEBUG <br>void FAR * DebugGetMemory(DWORD size, LPSTR szFile, int cbLine); <br>void DebugReleaseMemory(LPVOID ptr, LPSTR szFile, int cbLine); <br>void WinAssertReal(int exp, LPSTR msg, LPSTR file, int line); <br> <br>#define WinAssert(exp, msg)                                             \ <br>         WinAssertReal(exp, msg, vszFile, __LINE__); <br>#define GetMemory(size) DebugGetMemory(size, vszFile, __LINE__) <br>#define ReleaseMemory(size) DebugReleaseMemory(size, vszFile, __LINE__) <br>#define DEBUGADDR(title, hwnd, ptr)                                                                      \ <br>   {                                                                                                     \ <br>   static char szTmp[100];                                                                               \ <br>   wsprintf(szTmp, "%s, hwnd: %04X, ptr: %04X:%04X", (LPSTR)title, hwnd, HIWORD(ptr), LOWORD(ptr));      \ <br>   DEBUGMSG(szTmp);                                                                                      \ <br>   } <br>#else <br>#define  WinAssert(exp, msg) <br>#define GetMemory(size) DoGetMemory(size) <br>#define ReleaseMemory(size) DoReleaseMemory(size) <br>#define DEBUGADDR(p1,p2,p3) <br>#endif <br> <br>#define NumItems(s) (sizeof (s) / sizeof(s[0])) <br> <br>#define ABS(val) ((val &lt; 0) ? (val * -1) : (val)) <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Global variables <br>//*--------------------------------------------------------------------------------- <br>dCSEG(char) szui[]; <br>dCSEG(char) szEmpty[]; <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Function prototypes <br>//*--------------------------------------------------------------------------------- <br>void FAR * DoGetMemory(DWORD size); <br>void DoReleaseMemory(LPVOID ptr); <br>void RemoveCrLf(LPSTR instr); <br>void GetNewDirectory(LPSTR outstr, LPSTR instr); <br>BOOL ValidName(LPSTR instr); <br>int lpatoi(LPSTR instr); <br> <br>LPSTR EXTFUN GetidsString(UINT ids, LPSTR szOut, UINT cbSize); <br>VOID FAR CDECL szWrite(HWND hwnd, LPSTR szFmt, ...); <br>int FAR CDECL szMessageBox(HWND hwnd, UINT style, LPSTR szTitle, LPSTR szFmt, ...); <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

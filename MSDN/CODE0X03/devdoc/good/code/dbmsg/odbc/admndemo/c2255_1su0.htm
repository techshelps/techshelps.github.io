<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MENU.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2268"></a>MENU.C</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   MENU.C <br>//|      This module will take care of enabling and disabling menus. <br>//*--------------------------------------------------------------------------------- <br>#include &lt;windows.h&gt; <br>#include "menu.h" <br>#include "standard.h" <br>#include "child.h" <br>#include "admndemo.h" <br> <br> <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Global variables <br>//*--------------------------------------------------------------------------------- <br>extern lpCHILDINFO      lpActiveConn; <br>extern lpRESULTSINFO    lpActiveResults; <br>extern HWND             hwndCurMDIChild; <br> <br> <br>extern dCSEG(char)   szChildClass[]; <br> <br> <br> <br>UWORD uMenuIDs[] = { <br>   SQL_API_SQLTABLES, <br>   SQL_API_SQLCOLUMNS, <br>   SQL_API_SQLSTATISTICS, <br>   SQL_API_SQLPRIMARYKEYS, <br>   SQL_API_SQLFOREIGNKEYS, <br>   SQL_API_SQLTABLEPRIVILEGES, <br>   SQL_API_SQLCOLUMNPRIVILEGES, <br>   SQL_API_SQLSPECIALCOLUMNS, <br>   SQL_API_SQLPROCEDURES, <br>   SQL_API_SQLPROCEDURECOLUMNS, <br>   SQL_API_SQLTRANSACT, <br>   }; <br> <br> <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| ResetMenu: <br>//|   When user drops the menu, determine what items are to be enabled/disabled. <br>//| Parms: <br>//|   hMenu                Handle to the menu being displayed <br>//|   iMenu                Index to the menu <br>//|   iCalledFrom          Where were we called from? <br>//|                           1     From main WndProc <br>//|                           2     From connection window <br>//|                           3     Test output window <br>//| Returns: <br>//|   Nothing. <br>//*--------------------------------------------------------------------------------- <br>VOID INTFUN ResetMenu(HMENU hMenu, int iMenu) <br>{ <br>   switch(GETMENUNUM(iMenu)) { <br>     case IDM_FILE_MENU: <br>      { <br>         UINT        uMnuFlag; <br>         HWND        hwnd = GetEditWindow(lpActiveConn); <br> <br>         uMnuFlag = MNU_HAVE_CONNECTS; <br> <br>         // Is there an active connection <br>         EnableMenuItem(hMenu, IDM_DISCONNECT, uMnuFlag); <br>         EnableMenuItem(hMenu, IDM_EXECUTE_FILE, uMnuFlag); <br>         EnableMenuItem(hMenu, IDM_OPEN, <br>                        (uMnuFlag == MF_ENABLED &amp;&amp; !lpActiveResults) ? <br>                        MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_CLOSE, <br>                        (lpActiveConn &amp;&amp; lpActiveConn-&gt;hFile &amp;&amp; !lpActiveResults) ? <br>                        MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_SAVE, <br>                        (lpActiveConn &amp;&amp; lpActiveConn-&gt;hFile &amp;&amp; !lpActiveResults) ? <br>                        MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_SAVEAS, <br>                        (lpActiveConn &amp;&amp; <br>                         SendMessage(lpActiveConn-&gt;hwndIn, WM_GETTEXTLENGTH, 0, 0L) &amp;&amp; <br>                         !lpActiveResults) ? <br>                        MF_ENABLED : MF_GRAYED); <br>      } <br>      break; <br> <br>     case IDM_EDIT_MENU: <br>      { <br>         HWND     hwnd = GetEditWindow(lpActiveConn); <br>         DWORD    sel=0; <br> <br>         if(hwnd) <br>            sel = SendMessage(hwnd, EM_GETSEL, 0, 0L); <br> <br>         EnableMenuItem(hMenu, IDM_UNDO, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         SendMessage(hwnd, EM_CANUNDO, 0, 0L)) ? MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_CUT, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         HIWORD(sel) != LOWORD(sel)) ? MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_COPY, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         HIWORD(sel) != LOWORD(sel)) ? MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_PASTE, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         IsClipboardFormatAvailable(CF_TEXT)) ? MF_ENABLED : MF_GRAYED); <br>         EnableMenuItem(hMenu, IDM_SELECT_ALL, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         SendMessage(hwnd, WM_GETTEXTLENGTH, 0, 0L)) ? MF_ENABLED : MF_GRAYED); <br>      } <br>      break; <br> <br>     case IDM_EXECUTE_MENU: <br>      { <br>         HWND     hwnd = GetEditWindow(lpActiveConn); <br>         DWORD    sel=0; <br>         UINT     utmp; <br> <br>         if(hwnd) <br>            sel = SendMessage(hwnd, EM_GETSEL, 0, 0L); <br> <br>         EnableMenuItem(hMenu, IDM_EXECUTE_NOW, <br>                        (lpActiveConn &amp;&amp; hwnd &amp;&amp; <br>                         hwnd == lpActiveConn-&gt;hwndIn &amp;&amp; <br>                         SendMessage(hwnd, WM_GETTEXTLENGTH, 0, 0L)) ? MF_ENABLED : MF_GRAYED); <br> <br> <br>         // Need to support commit and rollback to call them <br>         utmp = (lpActiveConn &amp;&amp; BitGet(lpActiveConn-&gt;fFunctions, MENU_SQLTRANSACT)) ? <br>            MF_ENABLED : MF_GRAYED; <br>         EnableMenuItem(hMenu, IDM_COMMIT, utmp); <br>         EnableMenuItem(hMenu, IDM_ROLLBACK, utmp); <br>      } <br>      break; <br> <br>     case IDM_PIPE_MENU: <br>      { <br>         // Just look for active connection <br>         UINT utmp = MNU_HAVE_CONNECTS; <br> <br>         // Just look for active connections and results <br>         EnableMenuItem(hMenu, IDM_PIPE_EDIT, utmp); <br>         EnableMenuItem(hMenu, IDM_PIPE_DO, <br>                        (lpActiveResults) ? MF_ENABLED : MF_GRAYED); <br>      } <br>      break; <br> <br>     case IDM_INFO_MENU: <br>      { <br>         // Just look for active connection <br>         UINT utmp = MNU_HAVE_CONNECTS; <br> <br>         EnableMenuItem(hMenu, IDM_DATA_SOURCES, utmp); <br>         EnableMenuItem(hMenu, IDM_DATA_TYPES, utmp); <br>         EnableMenuItem(hMenu, IDM_FUNCTIONS, utmp); <br>         EnableMenuItem(hMenu, IDM_ODBC_INFO, utmp); <br>      } <br>      break; <br> <br>     case IDM_LIST_MENU: <br>      { <br>         int   idex; <br> <br>         for(idex=0;  idex&lt;NUM_MENU_FLAGS;  idex++) <br>            EnableMenuItem(hMenu, (IDM_TABLES + idex), <br>                           (lpActiveConn &amp;&amp; <br>                            BitGet(lpActiveConn-&gt;fFunctions, idex)) ? <br>                           MF_ENABLED : MF_GRAYED); <br>      } <br>      break; <br> <br>     case IDM_WINDOW_MENU: <br>      { <br>         // Just look for active connection <br>         UINT utmp = MNU_HAVE_CONNECTS; <br> <br>         EnableMenuItem(hMenu, IDM_CASCADE, utmp); <br>         EnableMenuItem(hMenu, IDM_TILE, utmp); <br>         EnableMenuItem(hMenu, IDM_ARRANGE, utmp); <br>         EnableMenuItem(hMenu, IDM_CLOSEALL, utmp); <br>      } <br>      break; <br>   } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

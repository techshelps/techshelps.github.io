<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ERRCHECK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2260"></a>ERRCHECK.C</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//*--------------------------------------------------------------------------------- <br>#include "errcheck.h" <br>#include "standard.h" <br>#include "strings.h" <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Global variables <br>//*--------------------------------------------------------------------------------- <br>char        szErrOut[100]; <br> <br>dCSEG(char) szErrTitle[]                  =  "Error!"; <br>dCSEG(char) szError[]                     =  "Error: %s,  File: %s, Line: %d"; <br>dCSEG(char) szOutOfMemory[]               =  "Memory levels are very low.  Please exit other applications and try your request again."; <br>dCSEG(char) szInvalidParms[]              =  "Invalid parameters"; <br>dCSEG(char) szRegisterClassFailed[]       =  "Register class failed"; <br> <br> <br>//*------------------------------------------------------------------------ <br>//| GetSQLState: <br>//|     Parameters: <br>//|         handletype     - Type of handle (env, conn, stmt, descr) <br>//|         handle         - Handle used in last ODBC call <br>//|         psMsgNum       - Pointer to variable storing message number <br>//|         szState        - Return sqlstate <br>//|         szNative       - Native return code (driver specific) <br>//|         szMessage      - Return message <br>//*------------------------------------------------------------------------ <br>LPSTR GetSQLState(SWORD handletype, SQLHANDLE handle, SWORD *psMsgNum, <br>                  LPSTR szState, SDWORD FAR * pfNative, LPSTR szMessage) <br>{ <br>   RETCODE  rc; <br>   SWORD    cb; <br> <br>   rc = SQLGetDiagRec(handletype, handle, (*psMsgNum)++, <br>                      szState, pfNative, <br>                      szMessage, RTN_MSG_SIZE, &amp;cb); <br>   if(rc == SQL_NO_DATA || rc == SQL_ERROR) <br>      return NULL; <br>   else <br>      return szState; <br>} <br> <br> <br> <br>//*------------------------------------------------------------------------ <br>//| DoPostError: <br>//|   This function will post an error message to standard output, whereever <br>//|      that should be. <br>//| Parms: <br>//|   in       szErr                Error message <br>//|   in       szFile               File name <br>//|   in       cbLine               Line number <br>//| Returns: <br>//|   Nothing. <br>//*--------------------------------------------------------------------------------- <br>void DoPostError(LPSTR szErr, LPSTR szFile, int cbLine) <br>{ <br>   wsprintf(szErrOut, szError, (LPSTR)szErr, szFile, cbLine); <br>   MessageBox(NULL, szErrOut, szErrTitle, MB_OK); <br>} <br> <br> <br> <br>//*------------------------------------------------------------------------ <br>//| PrintErrors: <br>//|     Print out all relevant errors. <br>//|         ci          -  Pointer to client information <br>//|         handletype  -  Which handle has relevant error information <br>//*------------------------------------------------------------------------ <br>void PrintErrors(CHILDINFO FAR * ci, SWORD handletype) <br>{ <br>   SQLHANDLE handle; <br> <br>   switch (handletype) { <br>     case SQL_HANDLE_ENV: <br>      handle = (SQLHANDLE) ci-&gt;henv; <br>      break; <br> <br>     case SQL_HANDLE_DBC: <br>      handle = (SQLHANDLE) ci-&gt;hdbc; <br>      break; <br> <br>     case SQL_HANDLE_STMT: <br>      handle = (SQLHANDLE) ci-&gt;hstmt; <br>      break; <br>   } <br> <br>   DisplayErrors(ci-&gt;hwndOut, (LPSTR)szErrTitle, SQL_HANDLE_ENV, ci-&gt;henv); <br>   if(!ci-&gt;hwndOut) <br>      PrintErrorsHwnd(ci-&gt;hwndOut, handletype, handle); <br>} <br> <br> <br>//*------------------------------------------------------------------------ <br>//| PrintErrorsHwnd: <br>//|   Does the actual work.  Needed as separate function for those <br>//|   function which are not woking directly with a ci struct. <br>//| Parms: <br>//|   hwnd        Output window <br>//|   henv        Environment handle <br>//|   hdbc        Connection handle <br>//|   hstmt       Statement handle <br>//*------------------------------------------------------------------------ <br>void PrintErrorsHwnd(HWND hwnd, SWORD handletype, SQLHANDLE handle) <br>{ <br>   SWORD    sMsgNum = 0; <br>   char     szState[7]=""; <br>   char     szMessage[RTN_MSG_SIZE]; <br>   SDWORD   pfNative=0; <br> <br>   while(GetSQLState(handletype, handle, &amp;sMsgNum, <br>                     szState, &amp;pfNative, szMessage) != NULL) <br>      szWrite(hwnd, <br>              GetidsString(idsErrorString, szErrOut, sizeof(szErrOut)), <br>              (LPSTR)szState, <br>              (LPSTR)szMessage); <br>} <br> <br> <br>//*------------------------------------------------------------------------ <br>//| DisplayErrors: <br>//|   This will take all of the errors from the ODBC handles and display <br>//|   them using message box.  This is usually done when there is no <br>//|   output window to write them to. <br>//| Parms: <br>//|   hwnd        Window handle to own the message box <br>//|   title       The title for the message box <br>//|   henv        Environment handle to look on <br>//|   hdbc        Connection handle to look at <br>//|   hstmt       Statement handle to look at <br>//| Returns: <br>//|   Nothing <br>//*------------------------------------------------------------------------ <br>void DisplayErrors(HWND hwnd, LPSTR title, SWORD handletype, SQLHANDLE handle) <br>{ <br>   SWORD    sMsgNum = 0; <br>   char     szState[7]=""; <br>   char     szMessage[RTN_MSG_SIZE]; <br>   SDWORD   pfNative=0; <br> <br>   while(GetSQLState(handletype, handle, &amp;sMsgNum, <br>                     szState, &amp;pfNative, szMessage) != NULL) <br>{ <br>    if(  szMessageBox((hwnd) ? hwnd : GetActiveWindow(), <br>                   MB_ICONEXCLAMATION, <br>                   title, <br>                   GetidsString(idsMsgErrorString, szErrOut, sizeof(szErrOut)), <br>                   (LPSTR)szState, <br>                   (LPSTR)szMessage) ) <br> break; <br>} <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

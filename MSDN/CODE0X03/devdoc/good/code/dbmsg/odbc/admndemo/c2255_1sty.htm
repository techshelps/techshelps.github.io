<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INI.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2266"></a>INI.C</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   Title:   INI.C <br>//|      This module contains the functions which work with SATOOL.INI. <br>//*--------------------------------------------------------------------------------- <br>#include "ini.h" <br>#include "results.h" <br>#include &lt;commdlg.h&gt; <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Global variables <br>//*--------------------------------------------------------------------------------- <br>dCSEG(char) szLABINI[]                       = "ADMNDEMO.INI"; <br>dCSEG(char) szSCREEN[]                       = "screen"; <br>dCSEG(char) szMAX[]                          = "Maximized"; <br>dCSEG(char) szCONNECTOPTIONS[]               = "Connect Options"; <br>dCSEG(char) szMAXRESULTS[]                   = "Max Results Windows"; <br>dCSEG(char) szFONT[]                         = "Font"; <br>dCSEG(char) szFONTSIZE[]                     = "FontSize"; <br>dCSEG(char) szFONTWEIGHT[]                   = "FontWeight"; <br>dCSEG(char) szFONTNAME[]                     = "FontName"; <br>dCSEG(char) szFONTRGB[]                      = "FontColor"; <br>dCSEG(char) szSTRIKEOUT[]                    = "FontStrikeOut"; <br>dCSEG(char) szUNDERLINE[]                    = "FontUnderline"; <br>dCSEG(char) szFONTSTYLE[]                    = "FontStyle"; <br>dCSEG(char) szPIPES[]                        = "Pipes"; <br>dCSEG(char) szRegular[]                      = "Regular"; <br>dCSEG(char) szArial[]                        = "Arial"; <br>dCSEG(char) szMSSansSerif[]                  = "MS Sans Serif"; <br>dCSEG(char) szINSTALL[]                      = "Installed"; <br>dCSEG(char) szDROPPROC[]                     = "Drop Procedure (with semi-colon)"; <br>dCSEG(char) szDROPTABLE[]                    = "Drop Table"; <br>dCSEG(char) szSQLSECTION[]                   = "Sql"; <br>dCSEG(char) szPARMSSECTION[]                 = "Parms"; <br>dCSEG(char) szPARMOPTSECTION[]               = "ParmOpt"; <br>dCSEG(char) szDELETESECTION[]                = "Delete"; <br>dCSEG(char) szSQLDROPSTMT[]                  = "drop procedure ?"; <br>dCSEG(char) szSQLDROPTABLESTMT[]             = "drop table ?"; <br>dCSEG(char) szPARMVALUE[]                    = "value"; <br>dCSEG(char) szPARM1[]                        = "1"; <br>dCSEG(char) szPARM3[]                        = "3"; <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Local Functions <br>//*--------------------------------------------------------------------------------- <br>LPSTR GetFontStyle(LPSTR szStyle, int cbStyle); <br>void SetDefaultFont(LOGFONT FAR * lf); <br>void SetDefaultRGB(COLORREF rgb); <br>void SetFontStyle(LPSTR szFontStyle); <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| ResolveIniFile: <br>//|   Look for ADMNDEMO.INI, if not found, fill out the defaults. <br>//| Parms: <br>//|   Nothing <br>//| Returns: <br>//|   Nothing. <br>//*--------------------------------------------------------------------------------- <br>VOID INTFUN ResolveIniFile() <br>{ <br>   // Max status is written after every exit, so if this constant cannot <br>   // be found, there is no file to find. <br>   if(GetPrivateProfileInt(szSCREEN, szMAX, -1, szLABINI) == -1) { <br>      // No file, create one <br>      WritePrivateProfileString(szPIPES, szDROPPROC, szINSTALL, szLABINI); <br>      WritePrivateProfileString(szDROPPROC, szSQLSECTION, szSQLDROPSTMT, szLABINI); <br>      WritePrivateProfileString(szDROPPROC, szPARMSSECTION, szPARM3, szLABINI); <br>      WritePrivateProfileString(szDROPPROC, szPARMOPTSECTION, szPARMVALUE, szLABINI); <br>      WritePrivateProfileString(szDROPPROC, szDELETESECTION, szPARM1, szLABINI); <br> <br>      WritePrivateProfileString(szPIPES, szDROPTABLE, szINSTALL, szLABINI); <br>      WritePrivateProfileString(szDROPTABLE, szSQLSECTION, szSQLDROPTABLESTMT, szLABINI); <br>      WritePrivateProfileString(szDROPTABLE, szPARMSSECTION, szPARM3, szLABINI); <br>      WritePrivateProfileString(szDROPTABLE, szPARMOPTSECTION, szPARMVALUE, szLABINI); <br>      WritePrivateProfileString(szDROPTABLE, szDELETESECTION, szPARM1, szLABINI); <br>   } <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| GetDefaultFont: <br>//|   This function will retrieve all of the font information that is stored in <br>//|   the .INI file and places it in the LOGFONT structure passed in. <br>//|   NOTE:  User should clear the LOGFONT structure to 0 (eg: fmemset(&amp;lf, 0,sizeof()) <br>//|     before calling this function.  The font name buffer must point to a user's <br>//|     allocated buffer. <br>//| Parms: <br>//|   in       lf             LOGFONT structure <br>//| Returns: <br>//|   Pointer to the LOGFONT structure passed in or NULL on error. <br>//*--------------------------------------------------------------------------------- <br>LOGFONT FAR * GetDefaultFont(LOGFONT FAR * lf) <br>{ <br>   lf-&gt;lfHeight = GetPrivateProfileInt(szFONT, szFONTSIZE, -12, szLABINI); <br>   lf-&gt;lfWeight = GetPrivateProfileInt(szFONT, szFONTWEIGHT, FW_NORMAL, szLABINI); <br>   lf-&gt;lfStrikeOut = GetPrivateProfileInt(szFONT, szSTRIKEOUT, 0, szLABINI); <br>   lf-&gt;lfUnderline = GetPrivateProfileInt(szFONT, szUNDERLINE, 0, szLABINI); <br>   lf-&gt;lfPitchAndFamily = VARIABLE_PITCH | FF_SWISS; <br>   if(!GetPrivateProfileString(szFONT, szFONTNAME, NULL, <br>                               lf-&gt;lfFaceName, LF_FACESIZE, szLABINI)) <br>      lstrcpy(lf-&gt;lfFaceName, (LPSTR)szArial); <br> <br>   return lf; <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| SetDefaultFont: <br>//|   This function uses the values in the LOGFONT structure passed in to write the <br>//|   default values to the .INI file. <br>//| Parms: <br>//|   in       lf             LOGFONT structure <br>//| Returns: <br>//|   Nothing <br>//*--------------------------------------------------------------------------------- <br>void SetDefaultFont(LOGFONT FAR * lf) <br>{ <br>   char  szTmp[20]; <br>   char  szpd[] = "%d"; <br> <br>   wsprintf(szTmp, szpd, lf-&gt;lfHeight); <br>   WritePrivateProfileString(szFONT, szFONTSIZE, szTmp, szLABINI); <br> <br>   wsprintf(szTmp, szpd, lf-&gt;lfWeight); <br>   WritePrivateProfileString(szFONT, szFONTWEIGHT, szTmp, szLABINI); <br> <br>   wsprintf(szTmp, szpd, lf-&gt;lfStrikeOut); <br>   WritePrivateProfileString(szFONT, szSTRIKEOUT, szTmp, szLABINI); <br> <br>   wsprintf(szTmp, szpd, lf-&gt;lfUnderline); <br>   WritePrivateProfileString(szFONT, szUNDERLINE, szTmp, szLABINI); <br> <br>   WritePrivateProfileString(szFONT, szFONTNAME, lf-&gt;lfFaceName, szLABINI); <br>} <br> <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| GetDefaultRGB: <br>//|   This function will retrieve the default rgbvalue from the ini file. <br>//| Parms: <br>//|   Nothing. <br>//| Returns: <br>//|   A COLORREF value that can be used for color. <br>//*--------------------------------------------------------------------------------- <br>COLORREF GetDefaultRGB(void) <br>{ <br>   COLORREF dft; <br>   LPSTR    lpsz; <br>   char     szBuff[20]; <br> <br>   if(!GetPrivateProfileString(szSCREEN, szFONTRGB, NULL, <br>                               szBuff, sizeof(szBuff), szLABINI)) <br>      dft = RGB(0,0,0);          // If not specified, use Black <br>   else <br>      dft = strtoul(szBuff, &amp;lpsz, 10); <br> <br>   return dft; <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| SetDefaultRGB: <br>//|   This function will set the default RGB value which will be used for <br>//|   color. <br>//| Parms: <br>//|   in       rgb                  The rgb value to use <br>//| Returns: <br>//|   Nothing <br>//*--------------------------------------------------------------------------------- <br>void SetDefaultRGB(COLORREF rgb) <br>{ <br>   char     szBuff[20]; <br> <br>   wsprintf(szBuff, "%lu", rgb); <br>   WritePrivateProfileString(szSCREEN, szFONTRGB, <br>                             szBuff, szLABINI); <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| GetFontStyle: <br>//|   This function will copy the default font style to the user's buffer. <br>//| Parms: <br>//|   in       szStyle                 Pointer to output for font sytle <br>//|   in       cbStyle                 Maximum size of buffer <br>//| Returns: <br>//|   Style to use, NULL otherwise <br>//*--------------------------------------------------------------------------------- <br>LPSTR GetFontStyle(LPSTR szStyle, int cbStyle) <br>{ <br>   if(!GetPrivateProfileString(szSCREEN, szFONTSTYLE, NULL, <br>                               szStyle, cbStyle, szLABINI)) <br>      lstrcpy(szStyle, (LPSTR)szRegular); <br>   return szStyle; <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| SetFontStyle: <br>//|   This function will set the default font style. <br>//| Parms: <br>//|   in       szFontStyle          The new font style <br>//| Returns: <br>//|   Nothing <br>//*--------------------------------------------------------------------------------- <br>void SetFontStyle(LPSTR szFontStyle) <br>{ <br>   WritePrivateProfileString(szSCREEN, szFONTSTYLE, <br>                             szFontStyle, szLABINI); <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| GetPipeNames: <br>//|   This function will get as many pipes as will fit into the user's <br>//|   buffer.  The list is simply retrieve via GetPrivateProfileString <br>//|   and therefore each pipe name will be null terminated with 2 nulls <br>//|   at the end of the entire list. <br>//| Parms: <br>//|   in       szPipes                 Pointer to string to hold names <br>//|   in       size                    Maximum size of pipe string <br>//| Returns: <br>//|   Nothing <br>//*--------------------------------------------------------------------------------- <br>void GetPipeNames(LPSTR szPipes, int size) <br>{ <br>   if(!GetPrivateProfileString(szPIPES, NULL, NULL, szPipes, size, <br>                               szLABINI)) <br>      *szPipes = '\0'; <br>} <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| PromptForFontName: <br>//|   This function will prompt the user for a font style and name. <br>//| Parms: <br>//|   in       szPipes                 Pointer to string to hold names <br>//|   in       size                    Maximum size of pipe string <br>//| Returns: <br>//|   Nothing <br>//*--------------------------------------------------------------------------------- <br>void PromptForFontName(HWND hwndOwner) <br>{ <br>   CHOOSEFONT     cf; <br>   LOGFONT        lf; <br>   HWND           fHwnd=GetFocus(); <br>   char           lpszStyle[LF_FACESIZE]; <br> <br>   memset(&amp;lf, 0, sizeof(LOGFONT)); <br>   memset(&amp;cf, 0, sizeof(CHOOSEFONT)); <br>   cf.lpLogFont = (LOGFONT FAR *)&amp;lf; <br>   cf.lpszStyle = (LPSTR)lpszStyle; <br>   GetDefaultFont(&amp;lf); <br> <br>   cf.lStructSize = sizeof(CHOOSEFONT); <br>   cf.hwndOwner = hwndOwner; <br>   cf.Flags = CF_SCREENFONTS | CF_EFFECTS | CF_INITTOLOGFONTSTRUCT; <br>   cf.rgbColors = GetDefaultRGB(); <br>   cf.nFontType = SCREEN_FONTTYPE; <br>   GetFontStyle(cf.lpszStyle, LF_FACESIZE); <br> <br>   if(ChooseFont(&amp;cf)) { <br>      SetDefaultFont(&amp;lf); <br>      SetDefaultRGB(cf.rgbColors); <br>      SetFontStyle(cf.lpszStyle); <br>   } <br> <br>   if(fHwnd) <br>      SetFocus(fHwnd); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RESULTS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2271"></a>RESULTS.H</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   Title:   RESULTS.H <br>//|      This file contains the prototypes and defines for anyone using RESULTS.H. <br>//*--------------------------------------------------------------------------------- <br>#ifndef results_DEFS <br>#define results_DEFS <br> <br>#include &lt;windows.h&gt; <br>#include "sql.h" <br>#include "sqlext.h" <br> <br>//------------------------------------------------------------------------ <br>//  Defines <br>//------------------------------------------------------------------------ <br>#define SQL_TYPE                 1 <br>#define C_TYPE                   2 <br>#define TYPENAME                 35 <br> <br>#define MAXBYTES                 255 <br> <br> <br>#define RDATA_WHITE              RGB(255,255,255) <br>#define RDATA_GRAY               RGB(190, 190, 190) <br>#define RDATA_BLACK              RGB(0, 0, 0) <br>#define RDATA_RED                RGB(255,0,0) <br>#define RDATA_GREEN              RGB(0,255,0) <br>#define RDATA_BLUE               RGB(0,0,255) <br>#define RDATA_LTBLUE             RGB(0,255,255) <br>#define RDATA_DEFAULT_TEXT             GetSysColor(COLOR_WINDOWTEXT) <br>#define RDATA_DEFAULT_BKGRND           GetSysColor(COLOR_WINDOW) <br>#define RDATA_DEFAULT_SELECT_TEXT      GetSysColor(COLOR_HIGHLIGHTTEXT) <br>#define RDATA_DEFAULT_SELECT           GetSysColor(COLOR_HIGHLIGHT) <br> <br> <br>//------------------------------------------------------------------------ <br>//  Declare global variables <br>//------------------------------------------------------------------------ <br> <br> <br> <br>//*-------------------------------------------------------------------- <br>//|  METADATA: <br>//|   This structure contains the meta data about each column in the <br>//|      results set.  This information can be easily retrieved using <br>//|      SQLColAttribute or SQLDescribeCol. <br>//*-------------------------------------------------------------------- <br>typedef struct tagMETADATA { <br>   LPSTR       szColumnName;           // Name of the column <br>   char        szTypeName[TYPENAME];   // ODBC type name <br>   SDWORD      fSqlType;               // Numeric SQL type <br>   UDWORD      precision;              // Precision of the data type <br>   SWORD       scale;                  // Scale of the data type <br>   int         cbDisplaySize;          // How many bytes to display <br>   UINT        fAlign;                 // What alignment to take <br>   int         xCol;                   // x offset from 0 for column <br>   UINT        cColWidth;              // Width of column in pixels <br>   UINT        cbOffset;               // Byte offset in row storage <br>   } METADATA; <br> <br> <br>//*-------------------------------------------------------------------- <br>//|  This structure is created when the user creates a results set. <br>//|   It must be used for all major function calls. <br>//*-------------------------------------------------------------------- <br>typedef struct tagRESULTSSET { <br>   char        szTitle[MAXBUFF];       // Title for the window <br>   int         cbColumns;              // How many columns in results? <br>   HINSTANCE   hInst;                  // Instance handle for this dll <br>   HWND        hwndResults;            // Window handle for the MDI client window <br>   HWND        hwndClient;             // Window handle of the client window <br>   HWND        hwndTitle;              // Column names <br>   HWND        hwndList;               // Window handle for list box <br>   HWND        hwndHScroll;            // Window handle for horizontal scroll bar <br>   HWND        hwndVScroll;            // Window handle for vertical scroll bar <br>   HFONT       hFont;                  // Logical font for window <br>   int         cx;                     // Width of the average character <br>   int         cy;                     // Height of the average character <br>   int         cTitleHeight;           // Height of the title bar <br>   int         yTitleLoc;              // What y value to use when drawing title text <br>   int         cRowWidth;              // Overall width if completely shown <br>   METADATA    FAR * md;               // Structure with meta data <br>   } RESULTSSET, FAR * lpRESULTSSET; <br> <br> <br>//------------------------------------------------------------------------ <br>//  Following structure is used to keep track of data for each column <br>//------------------------------------------------------------------------ <br>typedef struct tagCOLUMNDATA { <br>   LPSTR    szCols;                             // Column data <br>   } COLUMNDATA, FAR * lpCOLUMNDATA; <br> <br>//------------------------------------------------------------------------ <br>//  Following structure should be allocated for each row <br>//------------------------------------------------------------------------ <br>typedef struct tagRowData { <br>   COLUMNDATA FAR *     cd;                     // Pointer to column information <br>   LPSTR                data;                   // Buffer for all column data <br>   COLORREF             textColor;              // Color of text <br>   COLORREF             bkgrnd;                 // Color of background <br>   } ROWDATA, FAR * lpROWDATA; <br> <br> <br> <br>//------------------------------------------------------------------------ <br>//  Declare function prototypes <br>//------------------------------------------------------------------------ <br>BOOL EXTFUN CreateResultsSet(RESULTSSET FAR * rs, HWND hwndClient, HINSTANCE hInst, <br>                           int count, LPSTR szTitle); <br>BOOL EXTFUN SetMetaDataColumn(RESULTSSET FAR * rs, int iCol, LPSTR szCol, <br>                           LPSTR szTypeName, SDWORD fSqlType, UDWORD precision, SWORD scale, <br>                           int cbDisplay, UINT fAlign); <br>ROWDATA FAR * AllocateRowData(RESULTSSET FAR * rs, COLORREF cColor, COLORREF cBkg); <br>BOOL EXTFUN SetColumnData(int icol, ROWDATA FAR * rd, LPSTR str); <br>void EXTFUN FreeRowData(RESULTSSET FAR * rs, ROWDATA FAR * rd); <br>void EXTFUN FreeResultsSet(RESULTSSET FAR * rs); <br>int  FindRightCol(RESULTSSET FAR * rs, int xLeftCol, int cWidth); <br>void CreateResultsFont(RESULTSSET FAR * rs, HWND hwnd, LOGFONT FAR * lf); <br>void DrawRowData(RESULTSSET FAR * rs, DRAWITEMSTRUCT FAR * dwitem, <br>                           int xLeftCol, int xRightCol); <br>void INTFUN DrawColumnTitles(HDC hdc, RESULTSSET FAR * rs, <br>                           RECT FAR * crect, int xLeftCol, int xRightCol); <br>void  HandleHScroll(WPARAM wParam, RESULTSSET FAR * rs, <br>                           HWND hwnd, HWND hwndHScroll, int FAR * xLeftCol, int FAR * xRightCol, <br>                           HWND hwndList, int cbColumns, int cbClient, RECT FAR * tRect); <br>void HandleVirtualHScroll(WPARAM wParam, HWND hwndList, HWND hwndOwner); <br>int   AddRowData(RESULTSSET FAR * rs, ROWDATA FAR * rd); <br>SWORD GetNumResultsCols(HSTMT hstmt); <br>LPSTR GetTypeName(int type, int fType); <br>void  ConvertSqlTypeToChar(RESULTSSET FAR * rs, int col, LPSTR inbuff, <br>                           LPSTR outbuff, SDWORD rtnd); <br>void  BinToChar(LPSTR outstr, LPSTR instr, SDWORD count); <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

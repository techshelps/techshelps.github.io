<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHILD.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2257"></a>CHILD.H</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   Title:   CHILD.H <br>//|      This files sole purpose in life is to define the CHILDINFO type <br>//|         which is the main data structure for a connection window. <br>//*--------------------------------------------------------------------------------- <br>#ifndef child_DEFS <br>#define child_DEFS <br> <br>#include &lt;Windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "commdlg.h" <br>#include "standard.h" <br>#include "menu.h" <br>#include "results.h" <br>#include "sql.h" <br>#include "sqlext.h" <br> <br>#define MAXCONNECTS        15 <br> <br> <br>//*------------------------------------------------------------------------ <br>//|  The following structure is used to keep track of the vital pieces of <br>//|      information for each child MDI window.  The actual structure is <br>//|      stored with the window and can be extracted with only the window <br>//|      handle. <br>//*------------------------------------------------------------------------ <br>typedef struct tagCHILDINFO { <br>   HINSTANCE      hInst;                        // Handle to our data segment <br>   HWND           hwndClient;                   // Handle to client window <br>   HWND           hwnd;                         // Handle to the child window <br>   HWND           hwndIn;                       // Input window <br>   HWND           hwndOut;                      // Output window <br>   HENV           henv;                         // Environment handle for application <br>   HDBC           hdbc;                         // Connection handle of this window <br>   HSTMT          hstmt;                        // Statement handle for this window <br> <br>   // Display information <br>   int            dx;                           // Width of client area <br>   int            dy;                           // Height of client area <br> <br>   char           szConnStrOut[DFTBUFFSIZE];    // Save returned connect string <br>   char           CurrentUser[DFTBUFFSIZE];     // Name of user logged on this window <br>   char           CurrentServer[DFTBUFFSIZE];   // Server connected to in this window <br>   int            listtype;                     // What are we listing <br>   char           szClientTitle[MAXBUFF];       // Title for the window <br>   UDWORD         fFunctions[MINREQUIREDINTS(NUM_MENU_FLAGS)]; <br>                                                // bitmask to track supported functions <br>   HFILE          hFile;                        // Pointer to file <br>   char           szFile[_MAX_PATH];            // Name of the file <br>   int            cbFileSize;                   // How big is the file <br>   LPSTR          szFileBuff;                   // Memory for the file <br>   int            cbResultCount;                // Incremental counter of results windows <br>   int            cbMaxRS;                      // Maximum results windows <br>   int            cbResults;                    // Current count of results sets <br>   LPVOID         lprihead;                     // Head node <br>   LPVOID         lpritail;                     // Tail node <br>   } CHILDINFO, FAR * lpCHILDINFO; <br> <br> <br>// Since this is an MDI app, we will store the connection window information with <br>// the window handle and must then get this value for each message processed. <br>// This little macro simply sets the value of ci based on the window <br>#define GETCIPOINTER(hwnd) (lpCHILDINFO)(GetWindowLong(hwnd, 0)) <br>#define SETCIPOINTER(hwnd, x) SetWindowLong(hwnd, 0, (LONG)(x)) <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

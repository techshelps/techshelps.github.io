<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXECUTE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2263"></a>EXECUTE.H</h2>
<pre><code>//*--------------------------------------------------------------------------------- <br>//|  ODBC System Administrator <br>//| <br>//|  This code is furnished on an as-is basis as part of the ODBC SDK and is <br>//|  intended for example purposes only. <br>//| <br>//|   Title:   EXECUTE.H <br>//|      This file contains the prototypes and defines for executing SQL <br>//|         statements and displaying their results. <br>//*--------------------------------------------------------------------------------- <br>#ifndef execute_DEFS <br>#define execute_DEFS <br> <br>#include &lt;windows.h&gt; <br>#include "menu.h" <br>#include "admndemo.h" <br>#include "standard.h" <br>#include "errcheck.h" <br>#include "results.h" <br>#include "ctl3d.h" <br>#include "ini.h" <br>#include "sql.h" <br>#include "sqlext.h" <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Macros and Defines <br>//*--------------------------------------------------------------------------------- <br>#define MINSTMTSIZE                           100 <br>#define MAXSTMTSIZE                          9999 <br>#define IDD_EXECUTE_FILE                     3100 <br>#define NO_STOP                              -999 <br>#define IDT_FILE                              500 <br>#define IDB_FILE                              501 <br>#define IDR_CARRIAGE                          502 <br>#define IDR_CHARACTER                         503 <br>#define IDE_CHARACTER                         504 <br>#define IDR_NOSTOP                            505 <br>#define IDR_SQLERROR                          506 <br>#define IDE_MAXLENGTH                         507 <br> <br>#define EXECUTE_DIRECT_SQL_STMT                 1 <br>#define PREPARE_SQL_STMT                        2 <br>#define EXECUTE_SQL_STMT                        3 <br> <br>typedef struct tagRESULTSINFO { <br>   RESULTSSET FAR *     rs;               // Results set <br>   CHILDINFO FAR *      ci;               // Child info <br>   int                  xLeftCol;         // Left column index <br>   int                  xRightCol;        // Right column index <br>   int                  dx;               // Client screen width <br>   int                  dy;               // Client screen height <br>   RECT                 tRect;            // Client rectangle <br>   BOOL                 fScrollPresent;   // TRUE if scroll bar is visible <br>   struct tagRESULTSINFO FAR * next; <br>   struct tagRESULTSINFO FAR * prev; <br>   } RESULTSINFO, FAR * lpRESULTSINFO; <br> <br>#define GETRWPOINTER(hwnd) (lpRESULTSINFO)(GetWindowLong(hwnd, 0)) <br>#define SETRWPOINTER(hwnd, x) SetWindowLong(hwnd, 0, (LONG)(x)) <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Global variables <br>//*--------------------------------------------------------------------------------- <br>extern HMENU hMenu; <br> <br>extern dCSEG(char) szResultsClass[]; <br>extern dCSEG(char) szDash[]; <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//|   Function prototypes <br>//*--------------------------------------------------------------------------------- <br>void ExecuteFile(CHILDINFO FAR * ci, HWND hwnd, LPSTR szExeFile, <br>      LPSTR szTerm, int cbStmt); <br>void DoCommitRollback(CHILDINFO FAR * ci, int type); <br>void ExecuteCmds(CHILDINFO FAR * ci, LPSTR stmt); <br>void CheckForResults(CHILDINFO FAR * ci); <br>void FreeConnectWindowResults(CHILDINFO FAR * ci); <br>lpRESULTSSET GetConnectWindowResultsNode(lpCHILDINFO lpci); <br>BOOL INTFUN CreateResultsWindow(CHILDINFO FAR * ci, lpRESULTSSET rs); <br>long FAR PASCAL ResultsWndProc(HWND hwnd, unsigned msg, WPARAM wParam, LPARAM lParam); <br>BOOL SetMetaDataFromSql(HWND hwndOut, HSTMT hstmt, RESULTSSET FAR * rs, int cbCols); <br>SDWORD FetchAllRecordsToResults(HWND hwndOut, HSTMT hstmt, <br>            RESULTSSET FAR * rs, int cbCols, BOOL fFetch); <br>SDWORD PrintAffectedRows(HSTMT hstmt, HWND hwnd); <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

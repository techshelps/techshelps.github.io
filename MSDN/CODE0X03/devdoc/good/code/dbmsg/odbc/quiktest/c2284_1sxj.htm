<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLLSTUB.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2287"></a>DLLSTUB.C</h2>
<pre><code>//*------------------------------------------------------------------------ <br>//|File:DLLSTUB.C <br>//| <br>//|Purpose:This is a generic module which contains the entry points <br>//|required to compile a DLL. <br>//*------------------------------------------------------------------------ <br>#include &lt;windows.h&gt; <br>#include "autotest.h" <br> <br>HINSTANCEhLoadedInst; <br> <br> <br> <br>//------------------------------------------------------------------------- <br>//For WIN32 programs, there is only one entry point which takes care of <br>//everything.  For 16 bit apps, however, there are two entry points, <br>//LibMain which is called upon initialization, and WEP which is the <br>//windows exit procedure. <br>//------------------------------------------------------------------------- <br> <br> <br>#ifdef WIN32 <br>#include &lt;winnt.h&gt; <br> <br>int EXTFUN TstLibMain(HANDLE hInst, DWORD fdwReason, LPVOID lpReserved) <br>{ <br>BOOL WINAPI _CRT_INIT(HINSTANCE hInstDLL, DWORD fdwReason, LPVOID lpReserved); <br> <br>switch(fdwReason) { <br>case DLL_PROCESS_ATTACH: <br>case DLL_THREAD_ATTACH: <br>hLoadedInst = hInst; <br>if(!hLoadedInst || !(_CRT_INIT(hInst, fdwReason, lpReserved))) <br>return FALSE; <br>break; <br> <br>case DLL_PROCESS_DETACH: <br>case DLL_THREAD_DETACH: <br>if(!(_CRT_INIT(hInst, fdwReason, lpReserved))) <br>return FALSE; <br>break; <br>} <br> <br>return TRUE; <br>} <br> <br>#else <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| LibMain: <br>//|This entry point will simply take care of our data segment. <br>//| Parms: <br>//|inhInstCurrent hInstance (data segment) <br>//|inwDataSeg <br>//|incbHeapSize <br>//|inszCmdLineCommand line arguments <br>//| Returns: <br>//|TRUE if successful, FALSE on a failure <br>//*--------------------------------------------------------------------------------- <br>int EXTFUN LibMain(HINSTANCE hInst, WORD wDataSeg, WORD cbHeapSize, LPSTR szCmdLine) <br>{ <br>if(cbHeapSize != 0) <br>UnlockData(0); <br> <br>hLoadedInst = hInst; <br> <br>return TRUE; <br>} <br> <br> <br> <br>//*--------------------------------------------------------------------------------- <br>//| WEP: <br>//|This is the windows exit procedure.  We will be passed a flag which <br>//|tells us if we are being unloaded by a normal Unload call or if <br>//|the system is shutting down. <br>//| Parms: <br>//|intfParmWhat type of unload? <br>//| Returns: <br>//|TRUE always <br>//*--------------------------------------------------------------------------------- <br>int EXTFUN WEP(int fParm) <br>{ <br>switch (fParm) { <br>case WEP_SYSTEM_EXIT: <br>case WEP_FREE_DLL: <br>default: <br>return TRUE; <br>} <br>} <br> <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

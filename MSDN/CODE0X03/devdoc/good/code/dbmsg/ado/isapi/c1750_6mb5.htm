<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADOISAPI.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1751"></a>ADOISAPI.CPP</h2>
<pre><code><br>//-------------------------------------------------------------------- <br>// Microsoft ADO <br>// <br>// (c) 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc <br>// <br>// @moduleadoisapi.cpp | ADO ISAPI sample application <br>// <br>// @devnote None <br>//-------------------------------------------------------------------- <br> <br>#include &lt;afxdisp.h&gt; <br>#include &lt;crtdbg.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;initguid.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#include "adoid.h" <br>#include "adoint.h" <br>#include "httpext.h" <br> <br>VOIDPatchQuery(char *szQuery, char **ppszPatchedQuery); <br>HRESULTFetchData(EXTENSION_CONTROL_BLOCK *pECB); <br>HRESULTOutputErrors(EXTENSION_CONTROL_BLOCK *pECB, HRESULT hrError); <br>voidOutputString(EXTENSION_CONTROL_BLOCK *pECB, LPCSTR szBuffer); <br> <br>const LPCWSTRx_lpcszSource = L"OLE_DB_NWind_Jet"; <br>const LPCWSTRx_lpcszUser = L"Admin"; <br>const LPCWSTRx_lpcszPassword = L""; <br> <br>#defineMAX_VALUE_SIZE128 <br>ADOConnection*g_piConnection = NULL; <br> <br> <br>// Called by the system when processes and threads are initialized and terminated,  <br>// or upon calls to the LoadLibrary and FreeLibrary functions.  <br>BOOL WINAPIDllEntryPoint( <br>    HINSTANCEhinstDLL, <br>    DWORDfdwReason, <br>    LPVOIDlpvReserved) <br>{ <br>if (DLL_PROCESS_DETACH == fdwReason) <br>{ <br>if (g_piConnection) <br> g_piConnection-&gt;Release(); <br>CoUninitialize(); <br>} <br> <br>return TRUE; <br>} <br> <br> <br>BOOL WINAPIGetExtensionVersion( <br>HSE_VERSION_INFO *pVer) <br>{ <br>pVer-&gt;dwExtensionVersion = MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR ); <br> <br>lstrcpynA( pVer-&gt;lpszExtensionDesc, <br>"Sample ADO ISAPI Application", <br>HSE_MAX_EXT_DLL_NAME_LEN ); <br> <br>return TRUE; <br>} // GetExtensionVersion() <br>    <br> <br>DWORD WINAPIHttpExtensionProc( <br>EXTENSION_CONTROL_BLOCK *pECB ) <br>{ <br>DWORDdwWritten; <br>charszContent[] = "Content-type: text/html\r\n\r\n"; <br> <br>dwWritten = sizeof(szContent); <br>    pECB-&gt;ServerSupportFunction (pECB-&gt;ConnID, <br>                                 HSE_REQ_SEND_RESPONSE_HEADER, <br>                                 NULL, <br>                                 &amp;dwWritten, <br>                                 (LPDWORD)szContent); <br> <br>if (FAILED(FetchData(pECB))) <br>return HSE_STATUS_ERROR; <br>else <br>return HSE_STATUS_SUCCESS; <br>} <br> <br> <br>charConvertHexToDec(char cHex) <br>{ <br>if ((toupper(cHex) &gt;= 'A') &amp;&amp; (toupper(cHex) &lt;= 'F')) <br>return cHex - 'A' + 10; <br>else <br>return cHex - '0'; <br>} <br> <br>// Hack to clean up the query string. This code will work <br>// for most, but not all cases. For instance when the query  <br>// string has embedded '+', this code will not work. <br>VOID PatchQuery( <br>char *szQuery, <br>char **ppszPatchedQuery) <br>{ <br>char *p = szQuery + 1; <br> <br>while (*p++) <br>{ <br>if (*p == '+') //replace '+' by ' ' <br>*p = ' '; <br> <br>if (*p == '%') //a number begins <br>{ <br>char ch; <br> <br>if (*++p) <br>{ <br>ch = ConvertHexToDec(*p) &lt;&lt; 4; //convert the first digit <br> <br>if (*++p) <br>{ <br>ch |= ConvertHexToDec(*p);  //convert the 2nd digit <br> <br>if (!*(p + 1)) <br>{ <br>*(p-2) = ch; <br>*(p-1) = '\0'; <br>break; <br>} <br>else <br>{ <br>*(p-2) = ' '; <br>*(p-1) = ' '; <br>*p = ch; <br>} <br>} <br>} <br>} <br>} <br> <br>*ppszPatchedQuery = szQuery + 1; <br>  return; <br>} <br> <br> <br>VOID OutputString( <br>EXTENSION_CONTROL_BLOCK *pECB, <br>LPCSTR szBuffer) <br>{ <br>DWORD dwBuffer = strlen(szBuffer); <br>pECB-&gt;WriteClient(pECB-&gt;ConnID, (PVOID) szBuffer, &amp;dwBuffer, 0); <br>} <br> <br> <br>HRESULTOutputErrors( <br>EXTENSION_CONTROL_BLOCK *pECB, <br>HRESULT hrError) <br>{ <br>ADOErrors*piErrors = NULL; <br>ADOError*piError = NULL; <br>HRESULThr; <br>BSTRbstrError; <br>charszBuffer[128]; <br>LONGlErrorCount; <br> <br>// output hresult <br>sprintf(szBuffer, "&lt;P&gt;&lt;H1&gt;Error Fetching Data&lt;/H1&gt;" <br>"&lt;P&gt;&lt;H3&gt;HRESULT&lt;/H3&gt; %ld", hrError); <br>OutputString(pECB, szBuffer); <br> <br>// output error description if available <br>if (g_piConnection != NULL) <br>{ <br>hr = g_piConnection-&gt;get_Errors(&amp;piErrors); <br> if (FAILED(hr))goto ErrorExit; <br>hr = piErrors-&gt;get_Count(&amp;lErrorCount); <br> if (FAILED(hr))goto ErrorExit; <br>if (lErrorCount &gt; 0) <br>{ <br>OutputString(pECB, "&lt;p&gt;&lt;H3&gt;Error Description&lt;/H3&gt;"); <br> <br>for (short i = 0; i &lt; lErrorCount; i++) <br>{ <br>hr = piErrors-&gt;get_Item(COleVariant(i), &amp;piError); <br>if (FAILED(hr))goto ErrorExit; <br>hr = piError-&gt;get_Description(&amp;bstrError); <br>if (FAILED(hr))goto ErrorExit; <br>OutputString(pECB, CString((LPCWSTR)bstrError)); <br>OutputString(pECB, "&lt;p&gt;"); <br> <br>SysFreeString(bstrError); <br>piError-&gt;Release(); <br>piError = NULL; <br>} <br>} <br>} <br> <br>ErrorExit: <br>if (piError) <br>piError-&gt;Release(); <br>if (piErrors) <br>piErrors-&gt;Release(); <br> <br>return hr; <br> <br>} <br> <br> <br>HRESULTFetchData( <br>EXTENSION_CONTROL_BLOCK *pECB) <br>{ <br>HRESULThr; <br>ADOConnection*piConnection = NULL; <br>ADORecordset*piRecordSet= NULL; <br>ADOFields*piFields = NULL; <br>ADOField*piField = NULL; <br>longlFieldCount = 0; <br>shorti; <br>COleVariantvarFieldVal; <br>char*pszPatchedQuery; <br>BSTRbstrPatchedQuery = NULL; <br>BSTRbstrName = NULL; <br>BSTRbstrSource = NULL; <br>BSTRbstrUser = NULL; <br>BSTRbstrPassword = NULL; <br>VARIANTvNull; <br>VARIANT_BOOLfEOF; <br> <br> <br>OutputString(pECB, "&lt;HEAD&gt;&lt;TITLE&gt;Query Results" <br>"&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&lt;BODY&gt;\r\n"); <br> <br>PatchQuery(pECB-&gt;lpszQueryString, &amp;pszPatchedQuery); <br> <br>OutputString(pECB, "&lt;P&gt;&lt;H1&gt;Query String&lt;/H1&gt;"); <br>OutputString(pECB, pszPatchedQuery); <br> <br>if ( g_piConnection == NULL ) <br>{ <br>bstrSource = SysAllocString( x_lpcszSource ); <br>bstrUser = SysAllocString( x_lpcszUser ); <br>bstrPassword = SysAllocString( x_lpcszPassword ); <br>if ( bstrSource == NULL || bstrUser == NULL || bstrPassword == NULL ) goto errNoUninit; <br> <br>hr = CoInitialize(NULL); <br>if (FAILED(hr))goto errNoUninit; <br> <br>hr = CoCreateInstance(CLSID_CADOConnection, NULL, CLSCTX_INPROC_SERVER, IID_IADOConnection, (LPVOID *)&amp;piConnection); <br>if (FAILED(hr)) <br>{ <br>CoUninitialize(); <br>goto errNoUninit; <br>} <br> <br>hr = piConnection-&gt;Open( bstrSource, bstrUser, bstrPassword );  <br> if (FAILED(hr)) <br>{ <br>piConnection-&gt;Release(); <br>CoUninitialize(); <br>goto errNoUninit; <br>} <br> <br>g_piConnection = piConnection; <br>} <br> <br>hr = CoInitialize(NULL); <br>if (FAILED(hr))goto errNoUninit; <br> <br>hr = CoCreateInstance(CLSID_CADORecordset, NULL, CLSCTX_INPROC_SERVER, IID_IADORecordset, (LPVOID *)&amp;piRecordSet); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>// Allocate BSTR. <br>bstrPatchedQuery = SysAllocStringLen(NULL, strlen(pszPatchedQuery) ); <br>   <br>//Check returned BSTR. <br>if (bstrPatchedQuery == NULL )goto errFreeStuff; <br> <br>// Convert the multibyte string to a wide-character string. <br>if ( MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, pszPatchedQuery, strlen(pszPatchedQuery), bstrPatchedQuery, strlen(pszPatchedQuery)) == 0 )  <br>goto errFreeStuff; <br> <br>hr = piRecordSet-&gt;put_Source(bstrPatchedQuery); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>hr = piRecordSet-&gt;putref_ActiveConnection(g_piConnection); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>vNull.vt = VT_ERROR; <br>vNull.scode = DISP_E_PARAMNOTFOUND; <br>hr = piRecordSet-&gt;Open(vNull, vNull, adOpenKeyset, adLockOptimistic, adCmdText); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>hr = piRecordSet-&gt;get_Fields(&amp;piFields); <br>if (FAILED(hr))goto errFreeStuff; <br>hr = piFields-&gt;get_Count(&amp;lFieldCount); <br>if (FAILED(hr))goto errFreeStuff; <br> <br> <br>OutputString(pECB, "&lt;P&gt;&lt;H1&gt;Query Results&lt;/H1&gt;"); <br>OutputString(pECB, "&lt;P&gt;&lt;TABLE BORDER=1 CELLSPACING=4&gt;"); <br> <br>// <br>// print column names <br>// <br>OutputString(pECB, "&lt;TR&gt;"); <br> <br>for ( i = 0; i &lt; lFieldCount; i++ ) <br>{ <br>OutputString(pECB, "&lt;TH&gt;"); <br> <br>hr = piFields-&gt;get_Item(COleVariant(i), &amp;piField); <br>if (FAILED(hr))goto errFreeStuff; <br>hr = piField-&gt;get_Name(&amp;bstrName); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>OutputString(pECB, CString(bstrName));  //convert bstr to CString <br> <br>SysFreeString(bstrName); <br>piField-&gt;Release(); <br>piField = NULL; <br>} <br> <br>// <br>// print data <br>//  <br>hr = piRecordSet-&gt;get_EOF(&amp;fEOF); <br>if (FAILED(hr))goto errFreeStuff; <br>while (!fEOF) <br>{ <br> OutputString(pECB, "&lt;TR&gt;"); <br> <br>for (i = 0; i &lt; lFieldCount; i++)  <br>{ <br> OutputString(pECB, "&lt;TD&gt;"); <br> <br>hr = piFields-&gt;get_Item(COleVariant(i), &amp;piField); <br>if (FAILED(hr))goto errFreeStuff; <br>hr = piField-&gt;get_Value(&amp;varFieldVal); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>if (FAILED(VariantChangeType(&amp;varFieldVal, &amp;varFieldVal, 0, VT_BSTR))) <br>OutputString(pECB, "N/A"); <br>else <br>OutputString(pECB, CString(varFieldVal.bstrVal)); <br> <br>varFieldVal.Clear(); <br>piField-&gt;Release(); <br>piField = NULL; <br>} <br> <br> OutputString(pECB, "&lt;/TR&gt;"); <br> <br>hr = piRecordSet-&gt;MoveNext(); <br>if (FAILED(hr))goto errFreeStuff; <br> <br>hr = piRecordSet-&gt;get_EOF(&amp;fEOF); <br>if (FAILED(hr))goto errFreeStuff; <br>} <br> <br>OutputString(pECB, "&lt;/TABLE&gt;"); <br>OutputString(pECB, "&lt;/BODY&gt;\r\n"); <br> <br>errFreeStuff: <br>if (piField) <br>piField-&gt;Release(); <br>if (piFields) <br>piFields-&gt;Release(); <br>if (piRecordSet) <br>piRecordSet-&gt;Release(); <br>CoUninitialize(); <br> <br>errNoUninit: <br>SysFreeString(bstrSource); <br>SysFreeString(bstrUser); <br>SysFreeString(bstrPassword); <br>SysFreeString(bstrPatchedQuery); <br> <br>if (FAILED(hr)) <br>{ <br>TCHAR szBuf[256]; <br>wsprintf(szBuf, _T("Error: %d \n"), hr); <br>OutputErrors(pECB, hr); <br>} <br>OutputString(pECB, "&lt;/BODY&gt;\r\n"); <br> <br>return hr; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

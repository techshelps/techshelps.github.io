<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADOJAVA.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1752"></a>ADOJAVA.TXT</h2>
<pre><code>ADO Java Sample <br>=============== <br>This sample demonstrates the use of ADO from Java and Java/COM integration. This sample can be executed as an applet in a browser or as a stand-alone application as well. <br> <br>Setup <br>----- <br>1. Open the project file, adosample.mak, in Microsoft Visual J++. <br>2. Open the Java Type Library Wizard (Tools/Java Type Library Wizard). Select 'Microsoft OLE DB ActiveX Data Objects 1.0 Library' to generate the Java .CLASS files for the ADO classes and interfaces. <br>3. Build and execute the project as a browser (applet) or stand-alone application. For the Class to debug/execute, use simpleado. The sample can be run as a stand-alone application in two ways : <br>- In the VJ++ environment : In the Project settings dialog, select the Debug tab, select General in the Category list and for the Class for Debugging Session, enter simpleado. In Debug/Execute project under, select Stand-alone interpreter. Now execute this project under the VJ++ environment. <br>- Outside the VJ++ environment : After compiling the project, type  <br>jview simpleado <br>in the directory where simpleado.class was generated on compilation. <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

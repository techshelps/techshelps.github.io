<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADORDDLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1757"></a>ADORDDLG.CPP</h2>
<pre><code>//-------------------------------------------------------------------- <br>// Microsoft ADO Samples <br>// <br>// (c) 1996 Microsoft Corporation.  All Rights Reserved. <br>// <br>// @doc ADORead Sample <br>// <br>// @moduleADOrddlg.cpp <br>// <br>// @devnote None <br>//-------------------------------------------------------------------- <br> <br>// ADOReadDlg.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "ADORead.h" <br>#include "ADORdDlg.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>const LPCTSTR x_lpcszSource = _T("OLE_DB_NWind_Jet;"); <br>const LPCTSTR x_lpcszUser = _T("Admin"); <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutDlg dialog used for App About <br> <br>class CAboutDlg : public CDialog <br>{ <br>public: <br>CAboutDlg(); <br> <br>// Dialog Data <br>//{{AFX_DATA(CAboutDlg) <br>enum { IDD = IDD_ABOUTBOX }; <br>//}}AFX_DATA <br> <br>// Implementation <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);// DDX/DDV support <br>//{{AFX_MSG(CAboutDlg) <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD) <br>{ <br>//{{AFX_DATA_INIT(CAboutDlg) <br>//}}AFX_DATA_INIT <br>} <br> <br>void CAboutDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutDlg) <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CAboutDlg, CDialog) <br>//{{AFX_MSG_MAP(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CADOReadDlg dialog <br> <br>CADOReadDlg::CADOReadDlg(CWnd* pParent /*=NULL*/) <br>: CDialog(CADOReadDlg::IDD, pParent) <br>{ <br>//{{AFX_DATA_INIT(CADOReadDlg) <br>m_lCacheSize = 100; <br>m_strTableQuery = _T("SELECT EmployeeId, LastName, FirstName FROM Employees"); <br>m_lNumRows = 10; <br>m_bDynamic = TRUE; <br>m_bKeyset = TRUE; <br>m_bStatic = TRUE; <br>m_bForwardOnly = TRUE; <br>m_strSource = x_lpcszSource; //.. D:\\samples\\Employee.mdb <br>m_strProvider = _T("msdasql"); <br>m_strUser = x_lpcszUser; <br>m_lConnectMode  = adModeRead; <br>m_lConnectOption  = adPromptAlways; <br>//m_bReadOnly = FALSE; <br>//}}AFX_DATA_INIT <br>// Note that LoadIcon does not require a subsequent DestroyIcon in Win32 <br>m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME); <br>m_comboBoxOption.Create(CBS_DROPDOWN | CBS_SORT | WS_VSCROLL | WS_GROUP | WS_TABSTOP| WS_CHILD | WS_VISIBLE,  <br>CRect(261,7,94,12), this, IDC_ConnectOption); <br>m_piConnection = NULL; <br>} <br>   <br>CADOReadDlg::~CADOReadDlg() <br>{ <br>if ( m_piConnection != NULL ) <br>m_piConnection-&gt;Release();  <br>m_piConnection = NULL; <br>} <br>                  <br>void CADOReadDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CADOReadDlg) <br>DDX_Control(pDX, IDC_ConnectMode, m_comboBoxMode); <br>DDX_Control(pDX, IDC_ConnectOption, m_comboBoxOption); <br>DDX_Text(pDX, IDC_CACHESIZE, m_lCacheSize); <br>DDV_MinMaxLong(pDX, m_lCacheSize, 0, 1200); <br>DDX_Text(pDX, IDC_TABLEQUERYEDIT, m_strTableQuery); <br>DDX_Text(pDX, IDC_NUMROWS, m_lNumRows); <br>DDV_MinMaxLong(pDX, m_lNumRows, 1, 32000); <br>DDX_Check(pDX, IDC_Dynamic, m_bDynamic); <br>DDX_Check(pDX, IDC_Keyset, m_bKeyset); <br>DDX_Check(pDX, IDC_StaticCursor, m_bStatic); <br>DDX_Check(pDX, IDC_FORWARDONLY, m_bForwardOnly); <br>DDX_Text(pDX, IDC_Source, m_strSource); <br>DDV_MaxChars(pDX, m_strSource, 256); <br>DDX_Text(pDX, IDC_PROVIDER, m_strProvider); <br>DDV_MaxChars(pDX, m_strProvider, 256); <br>DDX_Text(pDX, IDC_User, m_strUser); <br>DDV_MaxChars(pDX, m_strUser, 256); <br>//}}AFX_DATA_MAP <br> <br>//Do the manual checks <br> <br>//Check the database name parameter <br>if(pDX-&gt;m_bSaveAndValidate) <br>{ <br>pDX-&gt;PrepareEditCtrl(IDC_Source); <br>if (m_strSource.IsEmpty())  <br>{ <br>MessageBox(_T("Missing Jet database name."), _T("ADO Test App Error"), MB_ICONEXCLAMATION ); <br>pDX-&gt;Fail(); <br>} <br>} <br> <br> <br>//Check the Table/Query parameter <br>if(pDX-&gt;m_bSaveAndValidate) <br>{ <br>pDX-&gt;PrepareEditCtrl(IDC_TABLEQUERYEDIT); <br>if (m_strTableQuery.IsEmpty())  <br>{ <br>MessageBox(_T("Missing table,query or SQL."), _T("ADO Test App Error"), MB_ICONEXCLAMATION ); <br>pDX-&gt;Fail(); <br>} <br>} <br>} <br> <br>BEGIN_MESSAGE_MAP(CADOReadDlg, CDialog) <br>//{{AFX_MSG_MAP(CADOReadDlg) <br>ON_WM_SYSCOMMAND() <br>ON_WM_PAINT() <br>ON_WM_QUERYDRAGICON() <br>ON_BN_CLICKED(IDC_DATABASEBUTTON, OnDatabase) <br>ON_BN_CLICKED(ID_EXECUTE, OnExecute) <br>ON_CBN_SELCHANGE(IDC_ConnectMode, OnSelchangeConnectMode) <br>ON_CBN_SELCHANGE(IDC_ConnectOption, OnSelchangeConnectOption) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CADOReadDlg message handlers <br> <br>BOOL CADOReadDlg::OnInitDialog() <br>{ <br>CDialog::OnInitDialog(); <br> <br>// Add "About..." menu item to system menu. <br> <br>// IDM_ABOUTBOX must be in the system command range. <br>ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX); <br>ASSERT(IDM_ABOUTBOX &lt; 0xF000); <br> <br>CMenu* pSysMenu = GetSystemMenu(FALSE); <br>CString strAboutMenu; <br>strAboutMenu.LoadString(IDS_ABOUTBOX); <br>if (!strAboutMenu.IsEmpty()) <br>{ <br>pSysMenu-&gt;AppendMenu(MF_SEPARATOR); <br>pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu); <br>} <br> <br> <br>//Set default selections <br>SetDlgItemText(IDC_CACHESIZE, _T("100")); <br>SetDlgItemText(IDC_NUMROWS, _T("10")); <br> <br>return TRUE;  // return TRUE  unless you set the focus to a control <br>} <br> <br>void CADOReadDlg::OnSysCommand(UINT nID, LPARAM lParam) <br>{ <br>if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX) <br>{ <br>CAboutDlg dlgAbout; <br>dlgAbout.DoModal(); <br>} <br>else <br>{ <br>CDialog::OnSysCommand(nID, lParam); <br>} <br>} <br> <br>// If you add a minimize button to your dialog, you will need the code below <br>//  to draw the icon.  For MFC applications using the document/view model, <br>//  this is automatically done for you by the framework. <br> <br>void CADOReadDlg::OnPaint()  <br>{ <br>if (IsIconic()) <br>{ <br>CPaintDC dc(this); // device context for painting <br> <br>SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0); <br> <br>// Center icon in client rectangle <br>int cxIcon = GetSystemMetrics(SM_CXICON); <br>int cyIcon = GetSystemMetrics(SM_CYICON); <br>CRect rect; <br>GetClientRect(&amp;rect); <br>int x = (rect.Width() - cxIcon + 1) / 2; <br>int y = (rect.Height() - cyIcon + 1) / 2; <br> <br>// Draw the icon <br>dc.DrawIcon(x, y, m_hIcon); <br>} <br>else <br>{ <br>CDialog::OnPaint(); <br>} <br>} <br> <br>// The system calls this to obtain the cursor to display while the user drags <br>//  the minimized window. <br>HCURSOR CADOReadDlg::OnQueryDragIcon() <br>{ <br>return (HCURSOR) m_hIcon; <br>} <br> <br>void CADOReadDlg::OnDatabase()  <br>{ <br>CFileDialog*pcBrowse;//Need a file open dialog <br> <br>pcBrowse = (CFileDialog*)new CFileDialog(TRUE,_T("mdb"),NULL,NULL,_T("Jet Database Files | *.mdb ||"), NULL); <br> <br>pcBrowse-&gt;DoModal(); <br> <br>(GetDlgItem(IDC_Source))-&gt;SetWindowText(pcBrowse-&gt;GetPathName()); <br> <br>delete pcBrowse; <br>} <br> <br> <br> <br>void CADOReadDlg::Execute( <br>CursorTypeEnumcursorType, <br>intiControlID, <br>intiUnitsID <br>)  <br>{ <br>ADORecordset*piRecordSet; <br>DWORDdwStart, dwEnd; <br>DWORDdwDuration; <br>LONGlIndex; <br>COleVariantdbVar; <br>COleVariantvNull; <br>HRESULThr; <br>BSTRbstrTableQuery; <br>VARIANT_BOOLvbEOF; <br> <br>dwStart = timeGetTime(); <br> <br>//Open recordset  <br>hr = CoCreateInstance(CLSID_CADORecordset, NULL, CLSCTX_INPROC_SERVER, IID_IADORecordset, (LPVOID *)&amp;piRecordSet); <br>if (FAILED(hr))goto ErrorExit; <br> <br>//Check that recordset was created <br>if (piRecordSet != NULL) <br>{ <br>bstrTableQuery = m_strTableQuery.AllocSysString(); <br>hr = piRecordSet-&gt;put_Source(bstrTableQuery);// convert to bstr  <br>if (FAILED(hr))goto ErrorExit; <br> <br>hr = piRecordSet-&gt;putref_ActiveConnection(m_piConnection); <br>if (FAILED(hr))goto ErrorExit; <br> <br>//Set the cache size to value supplied by user. <br>hr = piRecordSet-&gt;put_CacheSize(m_lCacheSize); <br>if (FAILED(hr))goto ErrorExit; <br> <br>vNull.vt = VT_ERROR; <br>vNull.scode = DISP_E_PARAMNOTFOUND; <br>hr = piRecordSet-&gt;Open(vNull, vNull, cursorType, adLockOptimistic, adCmdUnknown); <br>if (FAILED(hr))goto ErrorExit; <br> <br>//Watch for end of record set <br>piRecordSet-&gt;get_EOF(&amp;vbEOF); <br>if (FAILED(hr))goto ErrorExit; <br> <br>for (lIndex = 0L; !vbEOF &amp;&amp; lIndex &lt; m_lNumRows; lIndex++) <br>{ <br>//Get the first returned column <br>hr = piRecordSet-&gt;get_Collect(COleVariant(0L, VT_I4), &amp;dbVar); <br>if (FAILED(hr))goto ErrorExit; <br> <br>AddFieldToList(lIndex, &amp;dbVar); <br>hr = piRecordSet-&gt;MoveNext(); <br>if (FAILED(hr))goto ErrorExit; <br>piRecordSet-&gt;get_EOF(&amp;vbEOF); <br>if (FAILED(hr))goto ErrorExit; <br>//dbVar.Clear();// release memory <br>} <br> <br>//Report the estimated execute time (in milliseconds) <br>dwEnd = timeGetTime(); <br>dwDuration = dwEnd - dwStart; <br>DisplayQueryTime(iControlID, iUnitsID, dwDuration); <br>} <br>else <br>{ <br>(GetDlgItem(IDC_DynamicTIME))-&gt;SetWindowText(_T("ERROR")); <br>} <br> <br>piRecordSet-&gt;Release(); <br>SysFreeString(bstrTableQuery); <br>return ; <br> <br> ErrorExit: <br>TCHAR szBuf[256]; <br>wsprintf(szBuf, _T("Error: %d \n"), hr); <br>AfxMessageBox(szBuf); <br> <br>piRecordSet-&gt;Release(); <br>SysFreeString(bstrTableQuery); <br>return ; <br>} <br> <br> <br>//When the Execute button is pressed, run through the selected methods and perform each <br>//reporting an approximate execution time and listing the first field returned (only if <br>//it's a string or numeric) <br> <br>void CADOReadDlg::OnExecute()  <br>{ <br>CListBox*pList = ((CListBox *)(GetDlgItem(IDC_ROWSLIST))); <br>HRESULThr; <br>BSTRbstrSource; <br>BSTRbstrUser; <br>BSTRbstrProvider; <br>CStringstrSource, strUser,strPassword, strProvider; <br>static BOOLEANfIsFirstTime = TRUE; <br> <br>//Update the parameters <br>if (!UpdateData(TRUE)) <br>{ <br>return; <br>} <br> <br>// This could take a while,  <br>CWaitCursor wait; <br> <br>//Clear the list <br>pList-&gt;ResetContent(); <br> <br>// Following is a series of database table retrieves using variations <br>// on the Recordset object. This isn't a great programming structure, <br>// but it shows each method clearly. <br> <br>//Execute each the requested read methods, recording a time for each <br>//Open the database <br>if ( m_piConnection == NULL ) <br>{ <br>hr = CoInitialize(NULL); <br>if (FAILED(hr))goto ErrorExit; <br>hr = CoCreateInstance(CLSID_CADOConnection, NULL, CLSCTX_INPROC_SERVER, IID_IADOConnection, (LPVOID *)&amp;m_piConnection); <br>if (FAILED(hr))goto ErrorExit; <br>} <br> <br>(GetDlgItem(IDC_Source))-&gt;GetWindowText(strSource);   <br>(GetDlgItem(IDC_User))-&gt;GetWindowText(strUser);    <br>(GetDlgItem(IDC_Password))-&gt;GetWindowText(strPassword); <br>(GetDlgItem(IDC_PROVIDER))-&gt;GetWindowText(strProvider); <br> <br>if ( fIsFirstTime || m_strSource != strSource  || m_strUser != strUser||  <br>m_strPassword != strPassword || m_strProvider != strProvider ) <br>{ <br>fIsFirstTime = FALSE; <br>m_strSource = strSource ; <br>m_strUser = strUser;  <br>m_strPassword = strPassword ; <br>m_strProvider = strProvider; <br> <br>bstrSource = m_strSource.AllocSysString(); <br>bstrUser = m_strUser.AllocSysString(); <br>bstrProvider = m_strProvider.AllocSysString(); <br>if ( bstrProvider == NULL || bstrSource == NULL || bstrUser == NULL)goto ErrorExit;  <br> <br>if (FAILED(hr = m_piConnection-&gt;put_Provider(bstrProvider))) <br>goto ErrorExit; <br> <br>hr = m_piConnection-&gt;Open( bstrSource, bstrUser, NULL );  //toaddpassword <br> if (FAILED(hr))goto ErrorExit; <br> <br>SysFreeString(bstrProvider); <br>SysFreeString(bstrSource); <br>SysFreeString(bstrUser); <br>} <br> <br>//Open recordset on as a Dynamic <br>if(m_bDynamic) <br>{ <br>pList-&gt;AddString(_T("Dynamic Cursor")); <br>pList-&gt;AddString(_T("==========================")); <br>Execute( adOpenDynamic, IDC_DynamicTIME, IDC_UNITDynamic ); <br>} <br>//Open recordset on as a Keyset <br>if(m_bKeyset) <br>{ <br>pList-&gt;AddString(_T("Keyset Cursor")); <br>pList-&gt;AddString(_T("==========================")); <br>Execute( adOpenKeyset, IDC_KeysetTIME, IDC_UNITDYNA ); <br>} <br>//Open recordset on as a Static <br>if(m_bStatic) <br>{ <br>pList-&gt;AddString(_T("Static Cursor")); <br>pList-&gt;AddString(_T("==========================")); <br>Execute( adOpenStatic, IDC_StaticTIME, IDC_UNITSNAP ); <br>} <br>//Open recordset on as ForwardOnly <br>if(m_bForwardOnly) <br>{ <br>pList-&gt;AddString(_T("ForwardOnly Cursor")); <br>pList-&gt;AddString(_T("==========================")); <br>Execute( adOpenForwardOnly, IDC_FORWARDONLYTIME, IDC_UNITFORWARDONLY ); <br>}  <br> <br>return ; <br> <br> ErrorExit: <br>TCHAR szBuf[256]; <br>wsprintf(szBuf, _T("Error: %d \n"), hr); <br>AfxMessageBox(szBuf); <br> <br>SysFreeString(bstrProvider); <br>SysFreeString(bstrSource); <br>SysFreeString(bstrUser); <br>return ; <br> <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Other functions <br> <br>void CADOReadDlg::DisplayQueryTime(int iControlID, int iUnitsID, DWORD dwDuration) <br>{ <br>CString strDisp; <br>CString strUnits(_T("ms")); <br>doublefDuration = dwDuration; <br> <br>//Did it go into minutes? <br>if(fDuration &gt;= 60000.0) <br>{ <br>fDuration = fDuration/60000.0; <br>strUnits = _T("M"); <br>} <br>//Did it go to seconds? <br>else if(fDuration &gt;= 1000.0) <br>{ <br>fDuration = fDuration/1000.0; <br>strUnits = _T("S"); <br>} <br> <br>strDisp.Format(_T("%.2f"), fDuration); <br> <br>(GetDlgItem(iUnitsID))-&gt;SetWindowText(strUnits); <br>(GetDlgItem(iControlID))-&gt;SetWindowText(strDisp); <br> <br>} <br> <br>void CADOReadDlg::AddFieldToList(LONG lRecordNum, COleVariant *pdbVar) <br>{ <br>CStringstrDisp; <br>CStringstrScratch; <br>CListBox*pList = ((CListBox *)(GetDlgItem(IDC_ROWSLIST))); <br> <br>//Add record number <br>strDisp.Format(_T("%d - "), lRecordNum); <br> <br>//NOTE: This only works for strings/numerics <br> <br>switch(pdbVar-&gt;vt) <br>{ <br>case VT_BSTR: <br>{ <br>strDisp += (LPCTSTR)pdbVar-&gt;bstrVal; <br>break; <br>} <br> <br>case VT_I4: <br>{ <br>strScratch.Format(_T("%d"), pdbVar-&gt;lVal); <br>strDisp += strScratch; <br>break; <br>} <br> <br>case VT_UI1: <br>{ <br>strScratch.Format(_T("%u"), pdbVar-&gt;bVal); <br>strDisp += strScratch; <br>break; <br>} <br> <br>case VT_I2: <br>{ <br>strScratch.Format(_T("%d"), pdbVar-&gt;iVal); <br>strDisp += strScratch; <br>break; <br>} <br> <br>case VT_R4: <br>{ <br>strScratch.Format(_T("%f"), pdbVar-&gt;fltVal); <br>strDisp += strScratch; <br>break; <br>} <br> <br>case VT_R8 : <br>{ <br>strScratch.Format(_T("%f"), pdbVar-&gt;dblVal); <br>strDisp += strScratch; <br>break; <br>} <br> <br>default: // <br>{ <br>strDisp += _T("Field type not supported by sample code"); <br>} <br> <br>} <br>pList-&gt;AddString(strDisp); <br> <br>} <br> <br>ConnectPromptEnum rgConnectPrompts[] = {adPromptAlways, <br>adPromptComplete, <br>adPromptCompleteRequired, <br>adPromptNever}; <br> <br>void CADOReadDlg::OnSelchangeConnectOption()  <br>{ <br>m_lConnectOption = rgConnectPrompts[m_comboBoxOption.GetCurSel()]; <br>} <br> <br>ConnectModeEnum rgConnectModes[] = {adModeRead,  <br>adModeWrite,  <br>adModeReadWrite,  <br>adModeShareDenyRead, <br>adModeShareDenyWrite, <br>adModeShareExclusive, <br>adModeShareDenyNone}; <br> <br>void CADOReadDlg::OnSelchangeConnectMode()  <br>{ <br> <br>m_lConnectMode = rgConnectModes[m_comboBoxMode.GetCurSel()]; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

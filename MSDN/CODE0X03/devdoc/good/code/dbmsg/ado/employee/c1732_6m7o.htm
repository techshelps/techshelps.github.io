<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EMP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1734"></a>EMP.H</h2>
<pre><code>// Emp.h : main header file for the EMP application <br>// <br> <br>#include &lt;objbase.h&gt; <br>#include &lt;afxdisp.h&gt; <br>#include &lt;tchar.h&gt;// Unicode <br>#include &lt;adoid.h&gt;// ADO C++ header  <br>#include &lt;adoint.h&gt;// ADO C++ header <br> <br>#ifndef __AFXWIN_H__ <br>#error include 'stdafx.h' before including this file for PCH <br>#endif <br> <br>#include "resource.h"// main symbols <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CEmpApp: <br>// See Emp.cpp for the implementation of this class <br>// <br> <br>class CEmpApp : public CWinApp <br>{ <br>public: <br>CEmpApp(); <br> <br>// Overrides <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CEmpApp) <br>public: <br>virtual BOOL InitInstance(); <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br> <br>//{{AFX_MSG(CEmpApp) <br>// NOTE - the ClassWizard will add and remove member functions here. <br>//    DO NOT EDIT what you see in these blocks of generated code ! <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Conversion macros/inline functions - Variant  <br>   <br>inline CString VTOCSTR(VARIANT *v) <br>{ <br>if(v-&gt;vt==VT_BSTR) <br>{ <br>CString str((LPCWSTR)v-&gt;bstrVal); <br>return str; <br>} <br>else <br>{ <br>return CString(""); <br>} <br>} <br> <br>#define VTOLONG(v)((v).vt==VT_I4 ? (LONG)(v).lVal:0L) <br>#define VTODATE(v)((v).vt==VT_DATE ? (CTime)(v).iVal:0L) <br> <br> <br>class CVar : public VARIANT <br>{ <br>public: <br>CVar() <br>{ <br>VariantInit(this); <br>} <br>CVar(VARTYPE vt, SCODE scode = 0) <br>{ <br>VariantInit(this); <br>this-&gt;vt = vt; <br>this-&gt;scode = scode; <br>} <br>CVar(VARIANT var) <br>{ <br>*this = var; <br>} <br>~CVar() <br>{ <br>VariantClear(this); <br>} <br> <br>// ASSIGNMENT OPS. <br>CVar &amp; operator=(PCWSTR pcwstr) <br>{ <br>VariantClear(this); <br>if (NULL == (this-&gt;bstrVal = SysAllocStringLen(pcwstr, wcslen(pcwstr)))) <br>throw E_OUTOFMEMORY; <br>this-&gt;vt = VT_BSTR; <br>return *this; <br>} <br>CVar &amp; operator=(VARIANT var) <br>{ <br>HRESULT hr; <br> <br>VariantClear(this); <br>if (FAILED(hr = VariantCopy(this, &amp;var))) <br>throw hr; <br>return *this; <br>} <br> <br>// CAST OPS. <br>// doesn't change type. only returns BSTR if variant is of type <br>// bstr. asserts otherwise. <br>operator BSTR() const <br>{ <br>if(VT_BSTR == this-&gt;vt) <br>return this-&gt;bstrVal; <br>else <br>return NULL; <br>} <br> <br>HRESULT Clear() <br>{ <br>return VariantClear(this); <br>} <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

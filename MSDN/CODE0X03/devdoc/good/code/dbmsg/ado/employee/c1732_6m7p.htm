<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EMPBIZ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1735"></a>EMPBIZ.CPP</h2>
<pre><code>// EmpBiz.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "Emp.h" <br>#include "EmpBiz.h" <br> <br>#ifdef _DEBUG <br>//#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define THROW_ERR(exp)if (FAILED(hr = (exp))) throw hr <br> <br>const LPCWSTR g_lpcwszSource = L"OLE_DB_NWind_Jet;"; <br>const LPCWSTR g_lpcwszUser = L"Admin"; <br>const LPCWSTR g_lpcwszPwd = L""; <br>const LPCWSTR g_lpcwszSQL = L"select EmployeeId, LastName, FirstName, Title, HomePhone from Employees"; <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CEmpBiz  <br> <br>CEmpBiz::CEmpBiz() <br>{ <br>m_piConnection = NULL; <br>m_piEmpRecordSet = NULL;  <br>m_fConnected = FALSE; <br>m_fRecordsetEmpty = TRUE; <br>} <br> <br>CEmpBiz::~CEmpBiz() <br>{ <br>if ( m_piConnection != NULL ) <br>m_piConnection-&gt;Release();  <br>if ( m_piEmpRecordSet != NULL ) <br>m_piEmpRecordSet-&gt;Release();  <br>m_varLastGoodRecord.Clear(); <br>m_piConnection = NULL; <br>m_piEmpRecordSet = NULL; <br>} <br> <br> <br> <br>long CEmpBiz::GetEmployeeId()  <br>{ <br>HRESULThr; <br>COleVariantvFldName, vID; <br> <br>if (!m_fConnected) <br>return 0; <br> <br>//Watch for empty recordset <br>if(m_fRecordsetEmpty) <br>return 0; <br> <br>vFldName.bstrVal = CString(EMP_EMPLOYEE_ID).AllocSysString(); <br>vFldName.vt = VT_BSTR; <br>THROW_ERR( m_piEmpRecordSet-&gt;get_Collect(vFldName, vID)); <br> <br>return VTOLONG(vID); <br>} <br> <br> <br>CString CEmpBiz::GetFirstName()  <br>{ <br>HRESULThr; <br>COleVariantvFldName, vFirstName; <br> <br> if (!m_fConnected) <br>return ""; <br> <br>//Watch for empty recordset <br>if(m_fRecordsetEmpty) <br>return ""; <br> <br>vFldName.bstrVal = CString(EMP_FIRST_NAME).AllocSysString(); <br>vFldName.vt = VT_BSTR; <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Collect(vFldName, vFirstName) ); <br> <br>return VTOCSTR(vFirstName); <br>} <br>   <br>CString CEmpBiz::GetLastName()  <br>{ <br>HRESULThr; <br>COleVariantvFldName, vLastName; <br> <br> if (!m_fConnected) <br>return ""; <br> <br>//Watch for empty recordset <br>if(m_fRecordsetEmpty) <br>return ""; <br> <br>vFldName.bstrVal = CString(EMP_LAST_NAME).AllocSysString(); <br>vFldName.vt = VT_BSTR; <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Collect(vFldName, vLastName) ); <br> <br>return VTOCSTR(vLastName); <br>} <br>  <br>CString CEmpBiz::GetHomePhone()  <br>{ <br>HRESULThr; <br>COleVariantvFldName, vHomePhone; <br>  <br> if (!m_fConnected) <br>return ""; <br> <br>//Watch for empty recordset <br>if(m_fRecordsetEmpty) <br>return ""; <br> <br>vFldName.bstrVal = CString(EMP_HOME_PHONE).AllocSysString(); <br>vFldName.vt = VT_BSTR; <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Collect(vFldName, vHomePhone) ); <br> <br>return VTOCSTR(vHomePhone); <br>} <br>    <br>CString CEmpBiz::GetTitle()  <br>{ <br>HRESULThr; <br>COleVariantvFldName, vTitle; <br> <br> if (!m_fConnected) <br>return ""; <br> <br>//Watch for empty recordset <br>if(m_fRecordsetEmpty) <br>return ""; <br> <br>vFldName.bstrVal = CString(EMP_TITLE).AllocSysString(); <br>vFldName.vt = VT_BSTR; <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Collect(vFldName, vTitle) ); <br> <br>return VTOCSTR(vTitle); <br>} <br> <br>   <br> <br>BOOL CEmpBiz::IsAddMode()  <br>{ <br>HRESULThr; <br> EditModeEnumlEditMode; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;get_EditMode(&amp;lEditMode) ); <br> <br>return lEditMode == adEditAdd ; <br>} <br> <br> <br>void CEmpBiz::AddRecord()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br>VARIANTrgvFields; <br>VARIANTrgvValues; <br> <br>if (!m_fConnected) <br>return; <br> <br>ClearFilter() ; <br> <br>//Watch for empty recordset <br>if(!m_fRecordsetEmpty &amp;&amp; !IsAddMode() ) <br>{ <br>//Remember where we were before adding in case the user <br>//cancels and we have to return <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Bookmark(m_varLastGoodRecord) ); <br>} <br> <br>rgvFields.vt = VT_ERROR; <br>rgvFields.scode = DISP_E_PARAMNOTFOUND; <br> <br>rgvValues.vt = VT_ERROR; <br>rgvValues.scode = DISP_E_PARAMNOTFOUND; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;AddNew(rgvFields, rgvValues) ); <br>//THROW_ERR( m_piEmpRecordSet-&gt;Update(rgvFields, rgvValues) ); <br> <br>m_fRecordsetEmpty = FALSE; <br>return ; <br>} <br> <br> <br>void CEmpBiz::DeleteRecord()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br> EditModeEnumlEditMode; <br>VARIANT_BOOLvbEOF, vbBOF; <br> <br>//Watch for empty recordset <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return; <br> <br>ClearFilter() ; <br> <br>//Delete method depends on current mode <br>THROW_ERR(m_piEmpRecordSet-&gt;get_EditMode(&amp;lEditMode) ); <br> <br>switch (lEditMode) <br>{ <br>case adEditNone: // Just delete it <br>{ <br>THROW_ERR( m_piEmpRecordSet-&gt;Delete(adAffectCurrent) ); <br>THROW_ERR( m_piEmpRecordSet-&gt;MoveNext() ); <br>//Watch for end of record set <br>THROW_ERR( m_piEmpRecordSet-&gt;get_EOF(&amp;vbEOF) ); <br>if(vbEOF) <br>{ <br>THROW_ERR(m_piEmpRecordSet-&gt;MovePrevious() ); <br>//Check for empty record set. <br>THROW_ERR( m_piEmpRecordSet-&gt;get_BOF(&amp;vbBOF) ); <br>if(vbBOF) <br>m_fRecordsetEmpty  = TRUE; <br>} <br>break; <br>} <br> <br>case adEditInProgress: //Forget changes <br>{ <br>THROW_ERR( m_piEmpRecordSet-&gt;CancelUpdate() ); <br>THROW_ERR( m_piEmpRecordSet-&gt;Delete(adAffectCurrent) ); <br>THROW_ERR( m_piEmpRecordSet-&gt;MoveFirst() ); <br>break; <br>} <br> <br>case adEditAdd: //If new record, go back to last known <br>{ <br>THROW_ERR( m_piEmpRecordSet-&gt;CancelUpdate() ); <br>THROW_ERR( m_piEmpRecordSet-&gt;put_Bookmark(m_varLastGoodRecord) ); <br>} <br>} <br> <br>return ; <br>} <br> <br>BOOL CEmpBiz::MoveNext()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br>VARIANT_BOOL vbEOF; <br> <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return FALSE; <br>  <br>ClearFilter() ; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;MoveNext() ); <br> <br>//Watch for end of record set <br>THROW_ERR(m_piEmpRecordSet-&gt;get_EOF(&amp;vbEOF) ); <br>if(vbEOF) <br>{ <br>THROW_ERR(m_piEmpRecordSet-&gt;MovePrevious() ); <br>return FALSE; <br>} <br>else <br>{ <br>return TRUE; <br>} <br>} <br> <br> <br> <br>BOOL CEmpBiz::MovePrevious()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br>VARIANT_BOOL vbBOF; <br> <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return FALSE; <br> <br>ClearFilter() ; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;MovePrevious() ); <br> <br>//Watch for beginning of recordset <br>THROW_ERR(m_piEmpRecordSet-&gt;get_BOF(&amp;vbBOF) ); <br>if(vbBOF) <br>{ <br>THROW_ERR(m_piEmpRecordSet-&gt;MoveNext() );  <br>return FALSE; <br>} <br>else <br>{ <br>return TRUE; <br>} <br>} <br> <br> <br> <br>BOOL CEmpBiz::MoveFirst()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br>VARIANT_BOOL vbBOF; <br> <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return FALSE; <br> <br>ClearFilter() ; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;MoveFirst() ); <br> <br>//Watch for beginning of recordset <br>THROW_ERR(m_piEmpRecordSet-&gt;get_BOF(&amp;vbBOF) ); <br>if(vbBOF) <br>{ <br>return FALSE; <br>} <br>else <br>{ <br>return TRUE; <br>} <br>} <br> <br> <br> <br>BOOL CEmpBiz::MoveLast()  <br>{ <br>// TODO: Add your control notification handler code here <br>HRESULThr; <br>VARIANT_BOOL vbEOF; <br> <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return FALSE; <br> <br>ClearFilter() ; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;MoveLast() ); <br> <br>//Watch for beginning of recordset <br>THROW_ERR(m_piEmpRecordSet-&gt;get_BOF(&amp;vbEOF) ); <br>if(vbEOF) <br>{ <br>return FALSE; <br>} <br>else <br>{ <br>return TRUE; <br>} <br>} <br> <br> <br>BOOL CEmpBiz::FindForward(CString strCriteria)  <br>{ <br>HRESULThr; <br>VARIANT_BOOLvbEOF; <br>COleVariantv; <br> <br>if (!m_fConnected || m_fRecordsetEmpty) <br>return FALSE; <br> <br>THROW_ERR(m_piEmpRecordSet-&gt;get_Filter(&amp;v) ); <br>if ( v.vt != VT_BSTR || strCriteria !=v.bstrVal ) <br>{ <br>v.vt = VT_BSTR; <br>v.bstrVal = strCriteria.AllocSysString(); <br>THROW_ERR(  m_piEmpRecordSet-&gt;put_Filter(v) ); <br>} <br>else <br>{ <br>THROW_ERR( m_piEmpRecordSet-&gt;MoveNext() ); <br>} <br> <br>//Watch for ending of recordset <br>THROW_ERR(m_piEmpRecordSet-&gt;get_EOF(&amp;vbEOF)); <br>if(vbEOF) <br>{    <br>ClearFilter() ; <br>THROW_ERR( m_piEmpRecordSet-&gt;MoveLast() ); <br> <br>return FALSE; <br>} <br>else <br>{ <br>return TRUE; <br>} <br>} <br> <br> <br>void CEmpBiz::ClearFilter()  <br>{ <br>HRESULThr; <br>VARIANTv; <br> <br>if ( !m_fRecordsetEmpty) <br>{ <br>v.vt = VT_I2; <br>v.iVal = adFilterNone; <br>THROW_ERR(m_piEmpRecordSet-&gt;put_Filter(v) ); <br>} <br>} <br> <br>   <br> <br> <br>// <br>//Update record in the database <br>// <br>void CEmpBiz::UpdateEmpRec(CString &amp;strFirstName,  <br>CString &amp;strHomePhone, CString &amp;strLastName, <br>CString &amp;strTitle) <br>{ <br>HRESULThr; <br>VARIANTvarFields;    <br>VARIANTvarValues; <br>WCHAR*columnNames[4] = { L"firstName", L"Lastname", L"title", L"homePhone"}; <br>ADOFields*pFields = NULL; <br>ADOField*pField = NULL; <br>CVarvarIndex(VT_BSTR); <br>COleVariantvarFieldVal; <br> <br>if  (m_fRecordsetEmpty) <br>return; <br> <br>varFields.vt = VT_ERROR; <br>varFields.scode = DISP_E_PARAMNOTFOUND; <br>varValues.vt = VT_ERROR; <br>varValues.scode = DISP_E_PARAMNOTFOUND; <br> <br>try <br>{ <br>// get the fields interface <br>THROW_ERR( m_piEmpRecordSet-&gt;get_Fields(&amp;pFields) ); <br> <br>varIndex = SysAllocString(columnNames[0]) ; <br>THROW_ERR( pFields-&gt;get_Item(varIndex, &amp;pField) ); <br>varFieldVal.vt = VT_BSTR; <br>varFieldVal.bstrVal = strFirstName.AllocSysString(); <br>THROW_ERR( pField-&gt;put_Value(varFieldVal) ); <br>varFieldVal.Clear(); <br> <br>varIndex = SysAllocString(columnNames[1]) ; <br>THROW_ERR( pFields-&gt;get_Item(varIndex, &amp;pField) ); <br>varFieldVal.vt = VT_BSTR; <br>varFieldVal.bstrVal = strLastName.AllocSysString(); <br>THROW_ERR( pField-&gt;put_Value(varFieldVal) ); <br>varFieldVal.Clear(); <br> <br>varIndex = SysAllocString(columnNames[2]) ; <br>THROW_ERR( pFields-&gt;get_Item(varIndex, &amp;pField) ); <br>varFieldVal.vt = VT_BSTR; <br>varFieldVal.bstrVal = strTitle.AllocSysString(); <br>THROW_ERR( pField-&gt;put_Value(varFieldVal) ); <br>varFieldVal.Clear(); <br> <br>varIndex = SysAllocString(columnNames[3]) ; <br>THROW_ERR( pFields-&gt;get_Item(varIndex, &amp;pField) ); <br>varFieldVal.vt = VT_BSTR; <br>varFieldVal.bstrVal = strHomePhone.AllocSysString(); <br>THROW_ERR( pField-&gt;put_Value(varFieldVal) ); <br>varFieldVal.Clear(); <br> <br>//Commit the changes    <br>THROW_ERR( m_piEmpRecordSet-&gt;Update(varFields, varValues) ); <br> <br>pField-&gt;Release(); <br>pFields-&gt;Release(); <br> <br>//Return to the edited record <br>//CADOBookmark cBookmark = m_piEmpRecordSet-&gt;GetLastModified(); <br>//m_piEmpRecordSet-&gt;SetBookmark(cBookmark); <br>} <br>catch (HRESULT hr) <br>{ <br>if (pField) <br>pField-&gt;Release(); <br>if (pFields) <br>pFields-&gt;Release(); <br>throw hr; <br>} <br>return ; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CEmpBiz support  <br> <br>//When the document is created, connect to the database and open the <br>//Employee recordset. <br>BOOL CEmpBiz::ConnectToDatabase() <br>{ <br> <br>CVarvarDataSource, varUserId, varPwd, varSQL; <br>HRESULThr; <br>CVarvNull(VT_ERROR, DISP_E_PARAMNOTFOUND); <br>VARIANT_BOOLvbEOF, vbBOF; <br> <br>varDataSource= g_lpcwszSource; <br>varUserId= g_lpcwszUser; <br>varPwd= g_lpcwszPwd; <br>varSQL= g_lpcwszSQL; <br> <br>//Open the database and the recordset <br>try <br>{ <br>if ( m_piConnection == NULL || m_piEmpRecordSet == NULL) <br>{ <br>THROW_ERR(  CoInitialize(NULL) ); <br>THROW_ERR(  CoCreateInstance(CLSID_CADOConnection, NULL, CLSCTX_INPROC_SERVER, IID_IADOConnection, (LPVOID *)&amp;m_piConnection) ); <br>THROW_ERR(  m_piConnection-&gt;Open( varDataSource, varUserId, varPwd ) ); <br> <br>THROW_ERR(  CoCreateInstance(CLSID_CADORecordset, NULL, CLSCTX_INPROC_SERVER, IID_IADORecordset, (LPVOID *)&amp;m_piEmpRecordSet) ); <br>THROW_ERR(  m_piEmpRecordSet-&gt;putref_ActiveConnection(m_piConnection) ); <br>THROW_ERR(  m_piEmpRecordSet-&gt;put_Source(varSQL) );  <br> <br>vNull.vt = VT_ERROR; <br>vNull.scode = DISP_E_PARAMNOTFOUND; <br>THROW_ERR(  m_piEmpRecordSet-&gt;Open(vNull, vNull, adOpenKeyset, adLockOptimistic, adCmdText) ); <br> <br>//Check for empty record set. <br>THROW_ERR( m_piEmpRecordSet-&gt;get_EOF(&amp;vbEOF) ); <br>THROW_ERR( m_piEmpRecordSet-&gt;get_BOF(&amp;vbBOF) ); <br>if(vbEOF &amp;&amp; vbBOF) <br>m_fRecordsetEmpty  = TRUE; <br>else <br>m_fRecordsetEmpty  = FALSE; <br>} <br> <br>return TRUE; <br>} <br>catch (HRESULT hr) <br>{ <br>TCHAR szBuf[256]; <br>wsprintf(szBuf, _T("Error: %d \n"), hr); <br>AfxMessageBox(szBuf); <br> <br>return (FALSE); <br>} <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining the Data</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vecondefiningdata"></a>Defining the Data</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningData_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningData_T">
</object></p>
<p>
As you learn more about your application's data structures, you can eventually group selected data items together and assign certain information details describing the data's characteristics and relationships.</p>
<p>
The general approach to defining data includes the following:</p>
<ul type=disc>
<li>
Defining the tables, rows, and columns.</li>
<li>
Inserting index keys.</li>
<li>
Creating table relations.</li>
<li>
Assigning data types.</li>
</ul>
<h2>Defining the Tables, Rows, and Columns</h2>
<p>
Regardless of how your application's data is physically stored, the data is typically organized into multiple tables (or files), each having a set of rows (or records) and columns (or fields), similar to the rows and columns of a spreadsheet. Each row in the table contains all of the information about a particular thing, person, product, item, customer, or asset. </p>
<p>
For example, the following Authors table stores the name, address, and phone number for several authors.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=11%><b>Row</b></td>
<td class=label width=29%><b>Name</b></td>
<td class=label width=31%><b>Address</b></td>
<td class=label width=29%><b>Phone</b></td>
</tr>
<tr valign=top>
<td width=11%>1</td>
<td width=29%>Arnie Baldwin</td>
<td width=31%>xxxxx xxxxxxxx</td>
<td width=29%>(xxx) xxx-xxxx</td>
</tr>
<tr valign=top>
<td width=11%>2</td>
<td width=29%>Don Hall</td>
<td width=31%>xxxxx xxxxxxxx</td>
<td width=29%>(xxx) xxx-xxxx</td>
</tr>
<tr valign=top>
<td width=11%>3</td>
<td width=29%>Teresa Atkinson</td>
<td width=31%>xxxxx xxxxxxxx</td>
<td width=29%>(xxx) xxx-xxxx</td>
</tr>
<tr valign=top>
<td width=11%>4</td>
<td width=29%>David Simpson</td>
<td width=31%>xxxxx xxxxxxxx</td>
<td width=29%>(xxx) xxx-xxxx</td>
</tr>
</table><br>
<h2>Inserting Index Keys</h2>
<p>
A key is a special field that provides an index for fast retrieval. A key can be unique or non-unique, depending on whether duplicates are allowed. A key can be designated as the primary key, making it the unique identifier for each row of the table. You should use keys where your application needs direct access to certain rows.</p>
<p>
For example, in the following table the author's identification number (au_id) is added as the table's primary key, because au_id uniquely identifies one and only one author. A query using au_id will provide very fast retrieval of that author's information.</p>
<table border=1 cellpadding=5 cols=1 frame=below rules=rows>
<tr valign=top>
<td class=label width=100%><b>Authors table</b></td>
</tr>
<tr valign=top>
<td width=100%>au_id (key)</td>
</tr>
<tr valign=top>
<td width=100%>au_name</td>
</tr>
<tr valign=top>
<td width=100%>au_address</td>
</tr>
<tr valign=top>
<td width=100%>au_phone</td>
</tr>
</table><br>
<h2>Creating Table Relations</h2>
<p>
A database is usually composed of more than one table, and the tables are often related to one another in various ways. For instance, a Titles table might list the International Scientific Book Number (ISBN), title, and year the book was published. It would also be useful to identify the publisher for each title. Rather than repeating all of the publisher information for each title in the Titles table, you could simply establish a relationship with the Publishers table by including the publisher's identification (pu_id) in the Titles table.</p>
<p>
In the following example, the Titles table is related to the Publishers table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Titles table</b></td>
<td class=label width=52%><b>Publishers table</b></td>
</tr>
<tr valign=top>
<td width=48%>ti_isbn (key)</td>
<td width=52%>pu_id (key)</td>
</tr>
<tr valign=top>
<td width=48%>ti_title</td>
<td width=52%>pu_name</td>
</tr>
<tr valign=top>
<td width=48%>ti_yearpublished</td>
<td width=52%>pu_address</td>
</tr>
<tr valign=top>
<td width=48%>pu_id (foreign key)</td>
<td width=52%>pu_phone</td>
</tr>
</table><br>
<p>
This is called a one-to-many relationship, because a single row in the Titles table is related to just one publisher in the Publishers table, but a single row in the Publishers table can be related to one or more records in the Titles table. You can also create relations that are one-to-one and many-to-many.</p>
<p>
It's worth noting that you have only identified that a relationship exists between the Titles and Publishers tables — you have made no commitment to how that relationship will be managed. Depending on your final implementation, you might use the table joins and foreign key constraints available with Microsoft<sup>®</sup> SQL Server™, or you might write custom code to read the file structures directly and handle referential integrity inside your application.</p>
<h2>Assigning Data types</h2>
<p>
A data type is a named category of data characterized by a set of values, a way to denote the values, and some implied operations that can interpret and manipulate the values. Data types can be either intrinsic or derived.</p>
<p>
An intrinsic data type is one that is provided by your database. For example, SQL Server provides intrinsic data types such as integer, datetime, bit, char, and varchar.</p>
<p>
Derived data types are defined using the Data Modeling Language (DML) provided by your database. A derived data type is built from the available intrinsic data types or previously defined derived data types. You typically provide a name and a structure for the derived data type. With derived data types, you can assure consistent use of special data types for selected columns, variables, and parameters.</p>
<p>
Data types are important because they assure that the assigned data value is of the correct type and within the acceptable range of values. Different data storage technologies and development languages support a variety of data types, including the following.</p>
<ul type=disc>
<li>
Boolean</li>
<li>
Integer</li>
<li>
Float</li>
<li>
Datetime</li>
<li>
Tinyint</li>
<li>
DISPLAY</li>
<li>
COMP-3</li>
<li>
Binary</li>
<li>
String</li>
<li>
Character</li>
</ul>
<p>
While assigning data types, you want to be sure that the range provided by the data type fits the data which will be stored and — hopefully — anticipates future changes. For example, if you choose "tinyint" as a data type for customer identification, your application can handle a maximum of only 255 customers. On the other hand, if you choose the "integer" data type, you can have over two billion customers. As another example, if you use a single character to indicate customer service code, an expansion to two characters will create maintenance havoc. </p>
<p>
You can save space in your database and improve join operations by choosing appropriate data types for fields. As a general rule, you should choose the smallest data type that's appropriate for the data in the field.</p>
<p>
While you're assigning data types, some things to think about are:</p>
<ul type=disc>
<li>
Allowable maximums and minimums.</li>
<li>
Default values.</li>
<li>
Empty (or NULL) values.</li>
<li>
Anticipated growth.</li>
<li>
Expected and (to the extent possible) unexpected changes.</li>
</ul>
<p>
In a relational database environment, data types help enforce the business rules. For example, you can't add dollars and colors and get a useful answer. While you would never program this process intentionally, a relational database will identify the data type mismatch and automatically deny your query.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are using Microsoft SQL Server, you can easily define the data types, create queries, and populate your database using Microsoft Visual Database Tools. For more information, search online for "Microsoft Visual Database Tools Overview" in <i>MSDN Library Visual Studio 6.0</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing VSAM and AS/400 Files</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconaccessingvsamas400files"></a>Accessing VSAM and AS/400 Files</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingVSAMAS400Files_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingVSAMAS400Files_T">
</object></p>
<p>
Most enterprise data is still stored in VSAM files. A useful data access technology must provide a way to access this information and make it available over the intranet as well as the Internet. Some reasons why you might want this capability include:</p>
<ul type=disc>
<li>
Web access to VSAM files.</li>
<li>
Decision-support systems with fast record and file downloads.</li>
<li>
Windows NT-to-mainframe backups.</li>
<li>
Bulk data copy from VSAM to SQL Server.</li>
<li>
Mainframe-based data with server-based business rules.</li>
</ul>
<p>
If your application requires data access to VSAM or AS/400 file systems, you can use the SNA Server OLEDB/DDM provider to directly access record-oriented files in place on the mainframe. This approach preserves the storage, management, backup, and security provided by the original mainframe system.</p>
<p>
The OLEDB/DDM provider is an OLE DB data provider for IBM's Distributed Data Management (DDM) architecture. The OLEDB/DDM provider accesses by file, record, or stream I/O. The stream I/O interface is especially useful for accessing entire files or data set members at one time. The stream I/O interface accesses VSAM data set members as though they were files on a Windows NT Server local drive. This results in fast data transfers.</p>
<p>
The OLEDB/DDM provider uses the record-level input/output (RLIO) protocol of the IBM Distributed Data Management (DDM Architecture Level 2 and higher) system. The driver is implemented as a source DDM requester and interacts with target DDM server implementations on most popular mainframe environments, including MVS/ESA, OS/390, and AS/400.</p>
<p>
Because the OLEDB/DDM provider is an OLE DB data provider, it provides access to many different mainframe file types. A single application could use the same OLEDB/DDM technology to access many different files types, including the following:</p>
<ul type=disc>
<li>
VSAM</li>
<li>
DB2</li>
<li>
IMS</li>
<li>
AS/400</li>
</ul>
<h2>Choosing OLEDB/DDM Instead of ODBC/DRDA</h2>
<p>
Many large enterprise data centers have implemented ODBC-to-Distributed Relational Database Architecture (DRDA). Unfortunately, ODBC/DRDA drivers require all access requests to be structured as SQL statements, which are then interpreted by the mainframe DB2 and AS/400 object file systems. To process an SQL SELECT statement, the SQL engine in DB2 or the AS/400 file system accesses an index of the target physical file using a logical file called a "view." For the majority of mainframe-based data, no SQL view files are associated with the physical data files. Without the ability to read the mainframe application–created logical file, ODBC/DRDA requests must be processed by continually scanning the data file until the requested record is found.</p>
<p>
Unlike ODBC/DRDA drivers, the OLEDB/DDM provider offers record-level I/O access, which is a faster and more flexible method of accessing mainframe-based data than the DRDA approach. The majority of data files on mainframes and AS/400s are not designed to handle SQL, but instead are indexed by COBOL and RPG applications to allow access through a logical file created by the mainframe application. The IBM DDM RLIO protocol allows any DDM-compliant application to access these logical files, providing fast access to record-level data in all VSAM and all AS/400 files. OLEDB/DDM outperforms ODBC/DRDA drivers because it provides a more direct route to the target data.</p>
<h2>Working with Distributed Data Management</h2>
<p>
From a Windows–based distributed application point of view, IBM's Distributed Data Management (DDM) server software is a good way to access non-relational mainframe data — especially for ad hoc, read-only, or non-transactional access. IBM DDM servers are available and running on the most popular mainframe operating systems, including MVS and AS/400. To provide the easiest and most efficient access to files running on MVS and the AS/400, SNA Server uses OLE DB to provide a complete and single solution to access multiple file types on multiple platforms. The Microsoft OLE DB Provider for AS/400 and VSAM supports DFSMS version 2 release 1 or later for MVS/ESA and OS/390. Additionally, AS/400 V2R2 or later is a compliant DDM Server.</p>
<p>
The OLEDB/DDM provider requires no mainframe application source code changes. Data can be accessed on both AS/400 and MVS VSAM data sets. The native record-level I/O interface, as defined by the DDM architecture, is used for optimal performance and ease of implementation. You can integrate non-SQL, non-relational information with SQL and relational data stores without first migrating the data files to a Windows NT Server platform.</p>
<p>
This VSAM connectivity supports both fixed and variable logical record length classes, full data set browsing, file and record locking, and file and record attribute preservation.</p>
<p>
The OLEDB/DDM provider supports both fixed and variable logical record lengths, full data set browsing, file and record locking, and file and record attribute preservation.</p>
<p>
Supported AS/400 file types include:</p>
<ul type=disc>
<li>
Physical file with external record description.</li>
<li>
Logical file with external record description.</li>
</ul>
<p>
Supported mainframe data set types include:</p>
<ul type=disc>
<li>
Sequential access method file (SAM).</li>
<li>
Entry-Sequenced Data Set (ESDS).</li>
<li>
Key-Sequenced Data Set (KSDS).</li>
<li>
Relative Record Data Set (RRDS).</li>
<li>
Alternate index for ESDS and KSDS data sets (AltIdx).</li>
<li>
Partitioned Data Set (PDS) members.</li>
<li>
Partitioned Data Set extended members (PDSE).</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Level A -- Business and Data Access Components</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconbusinessdataaccessobjectslevela"></a>Level A — Business and Data Access Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconBusinessDataAccessObjectsLevelA_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconBusinessDataAccessObjectsLevelA_T">
</object></p>
<p>
The business and data access components used in Level A of the Island Hopper News sample are COM components that encapsulate processing. Using components in this way helps create a modular application, one that you can adapt as needed. It is much easier to replace one or two components than to rewrite and recompile an entire application, even a simple one like the one in Level A of the sample.</p>
<h2>Why Two Levels?</h2>
<p>
You might wonder why the Island Hopper sample separates the business components from the data access components. Why the level of abstraction? Here's why: Separating the data access components makes it possible to use specialized querying rules that are not strictly business rules and that are not appropriate for building into the storage engines, particularly when data is decentralized, as is typical in many companies. For instance, one query may want all customers, but "James Smith" at a specific address and "Jim Smith" at the same address should be recognized as the same person. This is perhaps a contrived example, but the point is that the data access code often becomes extremely complex and yet really does not belong with the business logic nor stored with the storage engine.</p>
<h2>A Note About Version Compatibility</h2>
<p>
All of the Visual Basic projects for the business and data access components in Level A have the Binary Compatibility option set. The Binary Compatibility option ensures, among other things, that when you recompile a component, its CLSID will remain constant. Binary version compatibility makes it possible for you to enhance the components while ensuring that applications compiled using previous versions will still work with the new versions of the components.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The Visual Basic documentation includes extensive information about version compatibility. See <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconVersionCompatibility">
</object><a href=JavaScript:alink_3.Click()>Version Compatibility in ActiveX Components</a> online in <i>MSDN Library Visual Studio 6.0</i> for information about the Visual Basic Version Compatibility feature, including a list of links to additional topics.</p>
<h2>Why Use Microsoft Transaction Server?</h2>
<p>
The components for Level A all use Microsoft Transaction Server (MTS) for context. In MTS, context is a state that is implicitly associated with a given Microsoft Transaction Server object. Context contains information about the object's execution environment, such as the identity of the object's creator and, optionally, the transaction encompassing the work of the object. An object's context is similar in concept to the process context that an operating system maintains for an executing program. The Microsoft Transaction Server run-time environment manages a context for each object.</p>
<p>
Context simplifies the development of components, because each object independently acquires its own resources, performs its work, and indicates its own internal state by calling the MTS methods SetComplete or SetAbort before returning.</p>
<h2>Component Summary — Level A</h2>
<p>
Level A contains components described in the following tables. These are all written in Visual Basic.</p>
<p class=label>
<b>Level A Business Component</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Name</b></td>
<td class=label width=63%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=37%><p>
bus_AdA<br>
(bus_AdA.cls, in the Ad class module in the bus_AdA project)</p>
</td>
<td width=63%>Manages classified ads. Creates instances of db_AdA and db_CategoryA where necessary to carry out database functions.</td>
</tr>
</table><br>
<p class=label>
<b>Level A Data Access Components</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Name</b></td>
<td class=label width=63%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=37%><p>
db_AdA<br>
(db_AdA.cls, in the Ad class module in the db_AdA project)</p>
</td>
<td width=63%>Sends data to and retrieves data from the Advertisements table of the Classified Ads database. Uses ADO for communication with the database.</td>
</tr>
<tr valign=top>
<td width=37%><p>
db_CategoryA<br>
(db_CategoryA.cls, in the Category class module in the db_CategoryA project)</p>
</td>
<td width=63%>Sends data to and retrieves data from the Categories table of the Classified Ads database. Uses ADO for communication with the database.</td>
</tr>
</table><br>
<h3>Bus_AdA Methods</h3>
<p>
Bus_AdA consists of the methods described in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Method name</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Delete</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's Delete method, passing it the unique ad ID.</td>
</tr>
<tr valign=top>
<td width=29%>GetByID</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's GetByID method, passing it the unique ad ID. Also returns the requested ad information in a recordset.</td>
</tr>
<tr valign=top>
<td width=29%>ListByCategory</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's ListByCategory method, passing it the unique category ID. Also returns the requested ad information in a recordset.</td>
</tr>
<tr valign=top>
<td width=29%>ListByEmail</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's ListByEmail method, passing it the customer's e-mail address. Also returns the requested ad information in a recordset.</td>
</tr>
<tr valign=top>
<td width=29%>ListByPhoneNumber</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's ListByPhoneNumber method, passing it the customer's phone number. Also returns the requested ad information in a recordset.</td>
</tr>
<tr valign=top>
<td width=29%>PlaceAd</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's Add method, passing it all the ad information. Also creates an instance of TakeANumber and calls TakeANumber's GetANumber method to get a unique ID for the ad. Returns the unique ad ID after the ad is created in the database.</td>
</tr>
<tr valign=top>
<td width=29%>UpdateAd</td>
<td width=71%>Creates an instance of db_AdA and calls db_AdA's Update method, passing it the updated ad information.</td>
</tr>
</table><br>
<h3>DB_AdA Methods</h3>
<p>
DB_AdA consists of the methods described in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Method name</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Add</td>
<td width=71%>Adds a new classified ad to the database.</td>
</tr>
<tr valign=top>
<td width=29%>Delete</td>
<td width=71%>Deletes a classified ad from the database.</td>
</tr>
<tr valign=top>
<td width=29%>GetAdCountByCategory</td>
<td width=71%>Returns a count of all ads with a particular category ID.</td>
</tr>
<tr valign=top>
<td width=29%>GetByID</td>
<td width=71%>Retrieves an ad with a particular ID.</td>
</tr>
<tr valign=top>
<td width=29%>ListByCategory</td>
<td width=71%>Retrieves all ads for a particular category.</td>
</tr>
<tr valign=top>
<td width=29%>ListByEmail</td>
<td width=71%>Retrieves all ads for a particular customer e-mail address.</td>
</tr>
<tr valign=top>
<td width=29%>ListByPhoneNumber</td>
<td width=71%>Retrieves all ads for a particular customer phone number.</td>
</tr>
<tr valign=top>
<td width=29%>Update</td>
<td width=71%>Updates a classified ad in the database.</td>
</tr>
</table><br>
<h3>DB_CategoryA Methods</h3>
<p>
DB_CategoryA consists of the methods described in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Method name</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Add</td>
<td width=71%>Adds a new category to the database.</td>
</tr>
<tr valign=top>
<td width=29%>Delete</td>
<td width=71%>Deletes a category from the database.</td>
</tr>
<tr valign=top>
<td width=29%>ListAll</td>
<td width=71%>Retrieves an alphabetical list of all categories in the database.</td>
</tr>
<tr valign=top>
<td width=29%>GetByID</td>
<td width=71%>Retrieves a category with the specified ID.</td>
</tr>
<tr valign=top>
<td width=29%>GetByName</td>
<td width=71%>Retrieves a category with the specified name.</td>
</tr>
<tr valign=top>
<td width=29%>GetBySearchString</td>
<td width=71%>Retrieves all categories where the name contains the specified search string.</td>
</tr>
<tr valign=top>
<td width=29%>ListByRange</td>
<td width=71%>Retrieves all categories with IDs within a specified range.</td>
</tr>
<tr valign=top>
<td width=29%>Update</td>
<td width=71%>Updates a category in the database.</td>
</tr>
</table><br>
<h2>Component Relationships and Flow</h2>
<p>
Generally, the Visual Basic forms or .asp pages create an instance of the business object, bus_AdA. bus_AdA in turn creates an instance of the data access object it needs (db_AdA or db_CategoryA) to complete a task.</p>
</BODY>
</HTML>

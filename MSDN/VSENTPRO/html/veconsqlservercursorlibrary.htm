<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Cursor Library</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconsqlservercursorlibrary"></a>SQL Server Cursor Library</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLServerCursorLibrary_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLServerCursorLibrary_T">
</object></p>
<p>
There are two types of SQL server cursors. One type, discussed here, is based on the ANSI syntax for cursors and is intended for triggers and stored procedures. The second type of SQL Server cursor is provided by the DB-Library, the SQL Server ODBC driver, and the SQL Server OLE DB provider.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on the types of cursors available in the DB-Library, see <a href="vecondblibrarycursors.htm">DB-Library Cursors</a> in this chapter.</p>
<p>
SQL Server can provide a forward-scrolling, read-only cursor. This is sometimes called the "firehose" cursor because it is very efficient at retrieving data and does so by keeping the connection open.</p>
<p>
A SQL Server cursor is defined by specifying one or more cursor characteristics in the DECLARE statement. The cursor characteristics available in the SQL cursor library are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=73%><b>Cursor type</b></td>
<td class=label width=27%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=73%>Static cursor. Defines a cursor that makes a copy of the data. Changes to base tables are not detected.</td>
<td width=27%>INSENSITIVE</td>
</tr>
<tr valign=top>
<td width=73%>Forward and backward scrolling. Changes made to the base tables are available in subsequent fetches.</td>
<td width=27%>SCROLL</td>
</tr>
<tr valign=top>
<td width=73%>Read only. Prevents updates from occurring on any row in this result set.</td>
<td width=27%>FOR READ-ONLY</td>
</tr>
<tr valign=top>
<td width=73%>Updatable. Defines updatable columns. All columns are updatable unless the cursor has also been defined as READ-ONLY.</td>
<td width=27%>FOR UPDATE</td>
</tr>
</table><br>
<p>
SQL Server does not use a server cursor for any of the following situations:</p>
<ul type=disc>
<li>
<b>Read-only cursor</b>&nbsp;&nbsp;&nbsp;If your application just reads and does not update, all the data is sent to the client. No cursor is needed.</li>
<li>
<b>Forward-only cursor</b>&nbsp;&nbsp;&nbsp;If your application uses forward direction only, all the data is sent to the client. No cursor is needed.</li>
<li>
<b>Simple fetches</b>&nbsp;&nbsp;&nbsp;If your application requires the entire result set, all the data is sent to the client. No cursor is needed.</li>
</ul>
<p>
To handle concurrency issues, SQL Server automatically chooses a suitable lock type depending on what type of Transact-SQL operation your application is performing. SQL Server can place locks at the page, table, extent, and database level. You can additionally assign the HOLDLOCK attribute in the SELECT statement to force SQL Server to hold its locks until the transaction is complete.</p>
<p>
The types of possible locks are:</p>
<ul type=disc>
<li>
<b>Shared</b>&nbsp;&nbsp;&nbsp;Any SELECT statement that reads and does not write places a shared lock on the object. With a shared lock, other applications can still read and even place their own (perhaps stronger) locks on the same object.</li>
<li>
<b>Exclusive</b>&nbsp;&nbsp;&nbsp;An exclusive lock prevents any other process from modifying the object. This is useful when your application cannot allow concurrent changes.</li>
<li>
<b>Update</b>&nbsp;&nbsp;&nbsp;The update lock occurs when table data is changed. The update lock applies to the associated page.</li>
<li>
<b>Intent shared</b>&nbsp;&nbsp;&nbsp;This is an internal SQL Server housekeeping lock advising other processes that a shared lock on a page is about to occur.</li>
<li>
<b>Intent exclusive</b>&nbsp;&nbsp;&nbsp;This is an internal SQL Server housekeeping lock advising other processes that an exclusive lock on a page is about to occur.</li>
<li>
<b>Blocking</b>&nbsp;&nbsp;&nbsp;While this is a type of locking situation, it is not actually an intentional type of locking. Rather, a blocking lock occurs if two processes are in contention for the same object and one of them has locked it. A more severe variation on the blocking lock is when one process has locked some or all of the first object prior to requesting the second object. Meanwhile, a second process has locked the second object prior to requesting the first object. This is known as a deadlock. Deadlocks occur primarily due to bad table and procedure design.</li>
<li>
<b>Insert_page lock</b>&nbsp;&nbsp;&nbsp;As a process is inserting table rows, it can use the insert_page lock as a busy signal. Each page can have many insert_page locks.</li>
<li>
<b>Link_page lock</b>&nbsp;&nbsp;&nbsp;This is an internal SQL Server housekeeping lock that merely extends the current page lock to new pages.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on the SQL Server cursor library, search online for "Server Cursors" in <i>MSDN Library Visual Studio 6.0</i> and "DECLARE Statement" in <i>SQL Server Books Online</i>. For more information on using locks to handle multiuser concurrency situations, see <a href="veconmanagingconcurrencywithcursorlocks.htm">Managing Concurrency with Cursor Locks</a>.</p>
</BODY>
</HTML>

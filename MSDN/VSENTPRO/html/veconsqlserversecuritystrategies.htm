<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Security Strategies</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconsqlserversecuritystrategies"></a>SQL Server Security Strategies</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLServerSecurityStrategies_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLServerSecurityStrategies_T">
</object></p>
<p>
You can use SQL Server facilities to implement many useful data access security strategies:</p>
<ul type=disc>
<li>
<b>Remove the Guest Login</b>&nbsp;&nbsp;&nbsp;Drop the guest login from database access permissions. </li>
<li>
<b>Identify Common Work Groups</b>&nbsp;&nbsp;&nbsp;Identify common work groups with common database permission requirements and create a group-based security profile.</li>
<li>
<b>Provide an Anonymous Logon Account for the Domain</b>&nbsp;&nbsp;&nbsp;If IIS is on a stand-alone server and other remote resources will be accessed from that IIS machine, it is generally the best approach to make the anonymous logon account a domain account. This means that whenever authentication is required, the account will always be available to other network servers for validation. The most obvious advantage here is that it satisfies SQL Server's Named Pipes authentication.</li>
<li>
<b>Use Standard Security for IIS Applications</b>&nbsp;&nbsp;&nbsp;If your IIS application uses SQL Server, use the standard security mode. This will give you maximum flexibility in deploying your application to network workstations.</li>
<li>
<b>Use Views</b>&nbsp;&nbsp;&nbsp;Restrict data access by developing unique views that limit the amount of data a user can see or modify. For example, you could allow access to some columns of a table but restrict access to other columns containing sensitive data. Access to these views is regulated through SQL server permission schemes. Some corporate development sites prefer this approach because it provides the highest degree of security and is the easiest to implement.</li>
<li>
<b>Use Stored Procedures</b>&nbsp;&nbsp;&nbsp;If data access must be very secure, consider using only stored procedures for all data viewing and modification. You can simplify the administration of data access permissions by granting EXECUTE permission to run certain stored procedures. This avoids assigning discrete permissions to all of the tables and views referenced within the stored procedure or embedded SQL statements. If you protect data access by using only stored procedures, remove all SELECT, UPDATE, INSERT, and DELETE privileges from every table and view in the database.</li>
<li>
<b>Restrict Query Tools</b>&nbsp;&nbsp;&nbsp;If some users will be using query tools, consider assigning each user two logon accounts: a primary logon account for queries, and an application logon account for using your application. The primary query logon account should be their Windows NT user identification and restricted to READ ONLY. Thus, when the user runs the query tool, the query tool will receive the Windows NT logon account permissions and be limited to READ ONLY for the permitted databases and objects. The second logon account is for your application, where you control data access with the application's built-in methods and processes.</li>
<li>
<b>Construct an Audit Trail</b>&nbsp;&nbsp;&nbsp;You can easily audit data access by creating triggers that automatically execute each time a table is modified. User permissions are not required to execute a trigger.</li>
</ul>
</BODY>
</HTML>

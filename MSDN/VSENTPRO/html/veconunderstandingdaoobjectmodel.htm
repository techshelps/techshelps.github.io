<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the DAO Object Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconunderstandingdaoobjectmodel"></a>Understanding the DAO Object Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingDAOObjectModel_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingDAOObjectModel_T">
</object></p>
<p>
The DAO object model is a collection of objects that model the structure of a relational database system. With the properties and methods provided by DAO objects, you can accomplish all of the operations necessary to manage such a system, including facilities for creating databases, defining tables, fields, and indexes, establishing relations between tables, and navigating and querying the database.</p>
<p>
The Microsoft Jet database engine translates operations on data access objects into physical operations on the database files, handling all the mechanics of interfacing with the different supported databases.</p>
<p>
The following drawing shows the DAO object model.</p>
<p>
<img src="ve52e51.gif" border=0></p>
<p>
There are 15 objects in the DAO object model, as listed here.</p>
<ul type=disc>
<li>
<b>DBEngine object</b>&nbsp;&nbsp;&nbsp;This base DAO object holds all other objects and maintains engine options.</li>
<li>
<b>Workspace object</b>&nbsp;&nbsp;&nbsp;Defines and manages the current user session. This object contains information on open databases and provides mechanisms for simultaneous transactions.</li>
<li>
<b>Database object</b>&nbsp;&nbsp;&nbsp;Represents a database with at least one open connection. This can be a Microsoft Jet database or an external data source.</li>
<li>
<b>TableDef object</b>&nbsp;&nbsp;&nbsp;Contains both Field and Index objects to describe the database tables.</li>
<li>
<b>QueryDef object</b>&nbsp;&nbsp;&nbsp;Represents a stored SQL query statement, with zero or more parameters, maintained in a Microsoft Jet database.</li>
<li>
<b>Recordset object</b>&nbsp;&nbsp;&nbsp;Represents a query result set with a cursor. DAO has five types of Recordset objects: table, dynaset, snapshot, forward-only, and dynamic.<p class=tl>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on Recordset objects, the available cursor types, and how your application can use them, see <a href="veconchoosingmanagingcursors.htm">Choosing and Managing Cursors</a> in Chapter 7 of this book.</P></li>
<li>
<b>Container object</b>&nbsp;&nbsp;&nbsp;Represents a particular set of objects in a database for which you can assign permissions in a secure workgroup. In addition to the Container objects provided by DAO, an application may define its own Container objects (such as saved forms, modules, reports, or script macros).</li>
<li>
<b>Relation object</b>&nbsp;&nbsp;&nbsp;Represents a relationship between fields in tables and queries. You can use the Relation object to create, delete, or change the type of relationship, and determine which tables supply the fields that participate, whether to enforce referential integrity, and whether to perform cascading updates and deletes.</li>
<li>
<b>Field object</b>&nbsp;&nbsp;&nbsp;Represents a field in a table, query, index, relation, or recordset. A Field object contains data, and you can use it to read data from a record or write data to a record.</li>
<li>
<b>Index object</b>&nbsp;&nbsp;&nbsp;Represents an index on a table in the database.</li>
<li>
<b>Parameter object</b>&nbsp;&nbsp;&nbsp;Represents a value associated with a QueryDef object. Query parameters can be input, output, or both.</li>
<li>
<b>Document object</b>&nbsp;&nbsp;&nbsp;Contains information about individual objects in the database (such as tables, queries, or relationships).</li>
<li>
<b>User object</b>&nbsp;&nbsp;&nbsp;Represents a user account with particular access permissions.</li>
<li>
<b>Group object</b>&nbsp;&nbsp;&nbsp;Represents a group of user accounts that have common access permissions in a particular workspace.</li>
<li>
<b>Error object</b>&nbsp;&nbsp;&nbsp;Contains information about an error that occurred during a DAO operation. When more than one error occurs during a single DAO operation, each individual error is represented by a separate Error object.</li>
</ul>
<p>
Each Workspace object has a collection of Database objects. Each Database object represents all of the objects that might be present within an individual database. Of these objects, Recordset objects are certainly the most heavily used, providing the means to execute SQL statements and manipulate the result set. TableDef objects provide simple access to tables and their fields and indexes. The DAO object model is fairly complicated because it provides so much functionality through the Microsoft Jet engine for many different data sources.</p>
</BODY>
</HTML>

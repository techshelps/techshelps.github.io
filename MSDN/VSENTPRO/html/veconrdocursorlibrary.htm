<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO Cursor Library</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconrdocursorlibrary"></a>RDO Cursor Library</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconRDOCursorLibrary_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconRDOCursorLibrary_T">
</object></p>
<p>
Remote Data Objects (RDO) supports several different cursor libraries. While not all RDO cursor libraries support all types of cursors, every library at least supports forward-only cursors. For example, the ODBC cursor library can only support static and forward-only cursor types, while the SQL Server cursor library supports static, forward-only, keyset-driven, and dynamic cursors.</p>
<p>
The RDO cursor library choices are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=71%><b>Cursor library</b></td>
<td class=label width=29%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=71%>Uses the ODBC cursor library. This gives better performance for small result sets, but degrades quickly for large result sets.</td>
<td width=29%>rdUseODBC</td>
</tr>
<tr valign=top>
<td width=71%>Uses server-side cursors if they're available (such as with SQL Server).</td>
<td width=29%>rdUseServer</td>
</tr>
<tr valign=top>
<td width=71%>Uses the client batch cursor library. This library creates all cursors on the client-side. With this option you can create dissociate result sets, perform offline changes to the data, and re-associate the result set with a live connection to post updates back to the database using optimistic batch updates. This option is very efficient because only one round trip to the server is needed.</td>
<td width=29%>rdUseClientBatch</td>
</tr>
<tr valign=top>
<td width=71%>The ODBC driver chooses the appropriate style of cursor and uses server-side cursors if available. Because this is the default, if you connect to Microsoft SQL Server, RDO chooses server-side cursors. If you connect to Oracle or other ODBC data sources, the ODBC cursor library is used.</td>
<td width=29%>rdUseIfNeeded</td>
</tr>
<tr valign=top>
<td width=71%>RDO creates a forward-only, read-only, cursorless result set.</td>
<td width=29%>rdUseNone</td>
</tr>
</table><br>
<p>
You can control how the data source and the chosen RDO cursor library manage concurrency with the locking options in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=71%><b>Locking type</b></td>
<td class=label width=29%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=71%>Pessimistic concurrency.</td>
<td width=29%>rdConcurLock</td>
</tr>
<tr valign=top>
<td width=71%>Optimistic concurrency using row versions.</td>
<td width=29%>rdConcurRowVer</td>
</tr>
<tr valign=top>
<td width=71%>Optimistic concurrency using row values.</td>
<td width=29%>rdConcurValues</td>
</tr>
<tr valign=top>
<td width=71%>Read-only. Changes are not permitted.</td>
<td width=29%>rdConcurReadOnly</td>
</tr>
<tr valign=top>
<td width=71%>All updates are deferred until the batch update is finished.</td>
<td width=29%>rdConcurBatch</td>
</tr>
</table><br>
<p>
If you submit a query that contains more than one SELECT statement to SQL Server using the server-side cursor library, the ODBC driver will reject the query because it is unable to handle this situation. If you must execute multiple result set queries or stored procedures that contain multiple SELECT statements, you have several alternatives. You can:</p>
<ul type=disc>
<li>
Convert the query to submit individual SELECT statements.</li>
<li>
Use the cursorless result set option (rdUseNone).</li>
<li>
Create a forward-only, read-only result set with the RowsetSize property of the parent rdoQuery object set to 1.</li>
<li>
Switch to the ODBC cursor library (rdUseODBC).</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on the RDO cursor library, search online for "Choosing an RDO Cursor Library" in <i>MSDN Library Visual Studio 6.0</i>. For more information on using locks to handle multiuser concurrency situations, see <a href="veconmanagingconcurrencywithcursorlocks.htm">Managing Concurrency with Cursor Locks</a> in this chapter.</p>
</BODY>
</HTML>

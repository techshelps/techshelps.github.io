<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Protecting Files</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconprotectingfiles"></a>Protecting Files</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconProtectingFiles_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconProtectingFiles_T">
</object></p>
<p>
You can protect files through capabilities of two file systems offered by Microsoft operating systems.</p>
<h2>The FAT File System</h2>
<p>
With the File Allocation Table (FAT) file system, both Microsoft<sup>®</sup> Windows<sup>®</sup> 95 and Windows NT provide shared folder resource protections by assigning permissions. These permissions are applied to the entire shared folder and all the files and folders in the share. Share-level security is easy to implement.</p>
<p>
Because these shared permissions apply to all of the files in the folder, it's often difficult to configure sets of file and permission groups that effectively limit user access. Shared folder permissions provide only simple security.</p>
<p>
As a general rule, the FAT file system and its share-level security is not granular enough to effectively define and control file access for many users in a complex system, and it offers no protection for the other resources that run your application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;A popular example of shared file permissions is found in the Microsoft Jet Database. For more information on securing the Microsoft Jet database, search for "Secure Data Solutions Using the Jet Database Engine" in <i>MSDN Library Visual Studio 6.0</i>.</p>
<h2>Windows NT and the NTFS File System</h2>
<p>
While Windows 95 only has the FAT file system, Windows NT provides a choice of either the FAT or Windows NT file system (NTFS). Windows NT with NTFS supports access control and ownership rights not available with the FAT file system.</p>
<p>
Windows NT ensures data and system protection through its ability to define discretionary file access control. The Windows NTFS file system can totally prevent users from damaging key system or application files.</p>
<p>
As an application design benefit, the NTFS file system is not only more reliable and secure than the FAT file system, it is fully recoverable. NTFS has the ability to prevent directory corruption, and can actually reconstruct itself after a hardware failure.</p>
<p>
With the NTFS file system, you can provide robust security for all of the supporting files in your application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the NTFS file system, search for "Allowing Access by Using NTFS" in <i>MSDN Library Visual Studio 6.0</i>.</p>
<h3>Applying NTFS File Permissions</h3>
<p>
Your application might have many different kinds of non-database support files and folders: .ini, .txt, .prf, or other special files that maintain program information. If your application has support files needing protection, you might want to specify explicit permissions such as No Access, Read, Change, and Full Control.</p>
<p>
In order to set access permissions on a file, you must:</p>
<ul type=disc>
<li>
Use a secure file system (NTFS).</li>
<li>
Own the object.</li>
<li>
Have object change permission.</li>
<li>
Have full control of the object.</li>
</ul>
<p>
The most common approach to setting file access permissions is to use Windows NT Explorer. With Windows NT Explorer, you can easily set file permission on a file-by-file basis or for the entire folder (thus including all files contained within that folder).</p>
<p>
Another tool you can use to set file permissions is the Cacls.exe utility. This is a command-line, batch mode utility that displays or modifies access control lists. Cacls.exe has limited functionality: it can only grant or deny Read, Change, and Full Control permissions.</p>
<p>
For an enterprise application (such as a Web site) that is exposed to external user access, it's not unusual to first protect all of the files on the entire workstation, and then apply specific Windows NT file permissions where access is needed.</p>
</BODY>
</HTML>

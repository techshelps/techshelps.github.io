<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Level C -- Business and Data Access Components</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconbusinessdataaccesscomponentslevelc"></a>Level C — Business and Data Access Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconBusinessDataAccessComponentsLevelC_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconBusinessDataAccessComponentsLevelC_T">
</object></p>
<p>
The Island Hopper News sample Level C business and data access components are COM components that encapsulate processing. Using components in this way helps create a modular application, one that you can adapt as needed. It is much easier to replace one or two components than to rewrite an entire application.</p>
<h2>Why Two Levels?</h2>
<p>
You might wonder why the Island Hopper News sample separates the business components from the data access components. Why the level of abstraction? Here's why: Separating the data access components makes it possible to use specialized querying rules that are not strictly business rules and that are not appropriate for building into the storage engines, particularly when data is decentralized, as is typical in many companies. For instance, one query may want all customers, but "James Smith" at a specific address and "Jim Smith" at the same address should be recognized as the same person. This is perhaps a contrived example, but the point is that data access code often becomes extremely complex and yet really does not belong with the business logic nor stored with the storage engine.</p>
<h2>Component Summary — Level C</h2>
<p>
Level C contains the components described in the following table. Most of these are written in Visual Basic.</p>
<p class=label>
<b>Level C Business Components</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Name</b></td>
<td class=label width=69%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%><p>
bus_AdC</p>
</td>
<td width=69%>Manages classified ads. Creates instances of db_AdC, db_CategoryC, db_ProductC, where necessary to carry out database functions. Reused from Level A with added functionality.</td>
</tr>
<tr valign=top>
<td width=31%><p>
bus_CustomerC</p>
</td>
<td width=69%>Manages customer information.</td>
</tr>
<tr valign=top>
<td width=31%><p>
bus_InvoiceC</p>
</td>
<td width=69%>Manages invoices. Written using Visual C++.</td>
</tr>
<tr valign=top>
<td width=31%><p>
bus_PaymentC</p>
</td>
<td width=69%>Manages customer payments.</td>
</tr>
</table><br>
<p class=label>
<b>Level C Data Access Components</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Name</b></td>
<td class=label width=69%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%><p>
db_AdC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Advertisements table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_CategoryC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Categories table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_CustomerC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Customers table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_CustomerPasswordC</p>
</td>
<td width=69%>Sends data to and retrieves data from the CustomerPasswords table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_InvoiceC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Invoices and InvoiceDetails table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_PaymentC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Payments table in the Classifieds database. Written using Visual C++.</td>
</tr>
<tr valign=top>
<td width=31%><p>
db_ProductC</p>
</td>
<td width=69%>Sends data to and retrieves data from the Products table in the Classifieds database.</td>
</tr>
<tr valign=top>
<td width=31%><p>
util_TakeANumber</p>
</td>
<td width=69%>Utility component that assigns unique IDs to customers, invoices, and ads.</td>
</tr>
<tr valign=top>
<td width=31%><p>
util_WordCount</p>
</td>
<td width=69%>Utility component that counts words in ads to calculate ad price. Written using Visual C++.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Connection Pooling</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconusingconnectionpooling"></a>Using Connection Pooling</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingConnectionPooling_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingConnectionPooling_T">
</object></p>
<p>
Standard client/server applications typically create a single connection to the database and use it for the duration of the session. Because of the stateless nature of the Web, however, a Web-based database application would — using the same approach — have to open and close a new connection for each access. Establishing a connection takes time and memory on both the client and the server. Your application's performance would be seriously impaired if it had to open and close the connection for each data access.</p>
<p>
One possible solution for a Web application would be to create the database connection and store the connection as part of the user's session definition. However, this method increases the number of connections as Web site usage increases. This is still not only slow (because you have to open a new connection for each user), but it consumes an enormous amount of resources for each additional connection. The risk is that the number of idle connections will grow so large as to use up all available memory.</p>
<p>
Wouldn't it be nice if you could specify the connection attributes once, and create a persistent connection for each data source and recycle the connection as needed? Connection pooling does exactly that. Connection pooling provides a more efficient way to manage connections and share them across different service requests. Connection pooling provides superior performance and reduces the number of idle connections.</p>
<p>
The concept of connection pooling is very simple. On each connection request, the connection pool first determines if there is an idle connection in the pool. If so, the connection pool returns that connection instead of making a new connection to the database. Connections are disconnected from the database and taken out of the pool based on a configurable duration option.</p>
<p>
Connection pooling is available in the following ways.</p>
<ul type=disc>
<li>
Microsoft Transaction Server (MTS) provides object pooling.</li>
<li>
ODBC 3.0 has a connection pooling feature that is enabled by default in Active Server Pages (ASP).</li>
</ul>
<p>
There is no formula for setting either the maximum number of connections or the number for each user, although Web-based architecture generally uses connection pooling and a design strategy that anticipates one stateless connection for each active Web page.</p>
<p>
As a general guideline, you should create data source connections using the ActiveX Data Objects (ADO) Connection object and use MTS to pool and recycle the connection.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using ActiveX Data Objects (ADO) for creating data connections and accessing data, see <a href="vecondataaccessusingactivexdataobjects(ado).htm">Data Access Using ActiveX Data Objects (ADO)</a> in Chapter 5 of this book. For more information on using Microsoft Transaction Server for connection pooling, see <a href="veconperformancevalueofobjectpoolingwithmts.htm">Performance Value of Object Pooling with MTS</a> in this chapter. For more information on how to store the connection string in the ASP Session object, search online for "Connection Pooling with Web-Based Applications" in <i>MSDN Library Visual Studio 6.0</i>.</p>
</BODY>
</HTML>

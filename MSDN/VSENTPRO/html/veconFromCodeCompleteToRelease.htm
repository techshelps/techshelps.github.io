<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>From Code Complete to Release</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconfromcodecompletetorelease"></a>From Code Complete to Release</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconFromCodeCompleteToRelease_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconFromCodeCompleteToRelease_T">
</object></p>
<p>
When the functional specification document has been baselined, the Development team has primary ownership of the Code Complete milestone. Again, this is an iterative process that may include parallel development and integration of components from many sources. It is also likely to include a number of Beta or "pre-release" versions.</p>
<p>
All team members have specific responsibilities as the overall team moves toward the Release of Product milestone. In this final phase, Testing/QA has primary responsibility for certifying readiness for release and turning over the project to Logistics Planning.</p>
<h2>Risk-Driven Scheduling</h2>
<p>
Risk-driven scheduling, as the name implies, is the early scheduling and prioritizing of those tasks and components that represent the highest risk factors in the development process.</p>
<p>
The following list describes guidelines for implementing risk-driven scheduling in this process model.</p>
<ul type=disc>
<li>
The way in which Development's role is defined while constructing the functional specification encourages the use of early proof-of-concepts and implementation prototypes to explore and mitigate risk. Before Development approves the functional specification, it will want to make sure that it understands the risks involved. The team will then commit to a development and delivery schedule and prioritize the development releases.</li>
<li>
Prioritization is built into the definition of the functional specification. The team and customers agree on priorities, based on technical risk. This ensures that potentially risky functions and functions of particular importance to the business are available first.</li>
<li>
The major milestones are not points at which deliverables are frozen, but rather points at which sets of assumptions are placed under change control so that risks identified after that point can be planned and focused.</li>
<li>
As the functional specification solidifies, Development may begin work before the formal milestone is reached. There is no magical constraint that says that what happens prior to this milestone is not development work. This can aid in the early identification of risk.</li>
<li>
Development uses a phased release schedule. This typically involves one to three interim (beta or "test") releases. Release management and Test and QA are involved in each release as though it were the final one.</li>
<li>
The concept of versioned releases is part of the process model. This enables a project team to be responsive to tradeoffs in functions, schedules, and risks. It also sets the stage for incremental enhancement to the first release baseline.</li>
</ul>
<p>
Risk-driven scheduling encourages developers to aggressively work toward the early milestone rather than expanding work to fill the time allocated with risk factored in.</p>
<p>
On the other hand, <i>missing</i> the early milestone serves as an early warning to project management, drawing attention to slippage in a proactive manner. The amount of slippage on earlier milestones in the project serves as a measure of estimating quality and provides forecasting information for adjusting milestones that fall later in the project.</p>
<p>
In addition, customers have more visibility into risk areas of the project and their expectations are managed in a more productive manner.</p>
<h2>Versioned Releases</h2>
<p>
The Development team uses a phased release schedule. This typically involves one or more interim releases. Release management and Test and QA are involved in each release as though it were the final one.</p>
<p>
The milestone-based process model encourages the project team to think of the application under development as a product, and to manage both new development and maintenance as versioned releases. This concept impacts how expectations are set and how the entire project is planned and managed.</p>
<p>
Versioned releases help to manage uncertainty and change, set clear and motivational goals, force closure on critical issues, and encourage continuous improvement.</p>
<p>
The first release of a new system is a baseline for the application. It helps to think of the application as a "product" — there will be new releases. Features that are not included in the first release will be tracked and prioritized for subsequent releases. This is accomplished by using a database for tracking ideas, features, and issues. The database should include the following:</p>
<ul type=disc>
<li>
The prioritized features identified in the functional specification. This way, development stays focused on high-priority features, while explicit decisions can be made regarding tradeoffs for the release. Also, any features that did not make it into the current release can be captured for a subsequent release.</li>
<li>
Great ideas that surface during the planning and development stages. If these ideas are outside the scope of the vision statement for the current release, they too are captured to ensure that they get considered for a subsequent release.</li>
<li>
Issues and noncritical problems in the final release. These are captured so that they can be prioritized and addressed in the next release.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Level C -- Database Schema</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vecondatabaseschemalevelc"></a>Level C — Database Schema</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDatabaseSchemaLevelC_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDatabaseSchemaLevelC_T">
</object></p>
<p>
The Island Hopper News sample Level C database is a SQL Server database called Classifieds.sql. When you run the database setup portion of the Level C setup, the database is created and filled with data for you. It consists of the tables described in the following list.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Table name</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>Advertisements</td>
<td width=73%>Stores classified ads.</td>
</tr>
<tr valign=top>
<td width=27%>Categories</td>
<td width=73%>Stores categories for classified ads.</td>
</tr>
<tr valign=top>
<td width=27%>CustomerPasswords</td>
<td width=73%>Stores passwords for customers.</td>
</tr>
<tr valign=top>
<td width=27%>Customers</td>
<td width=73%>Stores customer information.</td>
</tr>
<tr valign=top>
<td width=27%>InvoiceDetails</td>
<td width=73%>Stores information about each ad on an invoice (a customer can have more than one classified ad on the same invoice).</td>
</tr>
<tr valign=top>
<td width=27%>Invoices</td>
<td width=73%>Stores information about an invoice.</td>
</tr>
<tr valign=top>
<td width=27%>Payments</td>
<td width=73%>Stores information about customer payments.</td>
</tr>
<tr valign=top>
<td width=27%>Products</td>
<td width=73%>Stores information about Island Hopper News company's products. Currently, there are only two: a classified ad with 100 or fewer words, and a classified ad with 100 to 200 words. As the Island Hopper News company expands, it could offer additional products, each of which would be stored in the Products table.</td>
</tr>
<tr valign=top>
<td width=27%>TakeANumber</td>
<td width=73%>Assigns unique ID numbers for ads, categories, and customers.</td>
</tr>
</table><br>
<h2>Level A Tables Reused in Level C</h2>
<p>
Level C reuses the Advertisements, Categories, and TakeANumber tables from Level A. For more information about these tables, see <a href="vecondatabaseschemalevela.htm">Level A — Database Schema</a> in this chapter. Changes to the tables or their data types are summarized in the following descriptions.</p>
<h3>Advertisements Table</h3>
<p>
The Advertisements table in Level C is almost the same as the Advertisements table in Level A, with the following differences:</p>
<ul type=disc>
<li>
The InvoiceID field is added to track the invoice to which the ad belongs.</li>
<li>
The E-mail and PhoneNumber fields are not used (they move to the Customers table, where all customer information is tracked).</li>
<li>
Number data types become integers; the Memo data type (used for the Title field) becomes a varchar data type.</li>
</ul>
<h3>Categories Table</h3>
<p>
The Categories table in Level C is the same as the Categories table in Level A, except that Number data types become integers and the Text data type, used for the Name field, becomes a varchar data type.</p>
<h3>TakeANumber Table</h3>
<p>
The TakeANumber table in Level C is the same as the TakeANumber table in Level A, except that the NextNumber field data type changes from Number to integer and the PropertyGroupName field data type changes from Text to varchar.</p>
<h2>Tables Added to the Level C Database</h2>
<p>
The fields and data types of the tables added to the database for Level C are shown in the following tables.</p>
<p class=label>
<b>Fields in the CustomerPasswords Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Field name</b></td>
<td class=label width=24%><b>Data type</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>CustomerID</td>
<td width=24%>integer</td>
<td width=48%>Unique customer identifier.</td>
</tr>
<tr valign=top>
<td width=28%>Password</td>
<td width=24%>varchar</td>
<td width=48%>Customer password.</td>
</tr>
</table><br>
<p>
Although it has a one-to-one relationship, the CustomerPasswords table is separate from the Customers table. This separation makes it possible for you to implement different security settings for each table.</p>
<p class=label>
<b>Fields in the Customers Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Field name</b></td>
<td class=label width=24%><b>Data type</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Address</td>
<td width=24%>varchar</td>
<td width=48%>Customer's street address.</td>
</tr>
<tr valign=top>
<td width=28%>City</td>
<td width=24%>varchar</td>
<td width=48%>Customer's city.</td>
</tr>
<tr valign=top>
<td width=28%>Country</td>
<td width=24%>varchar</td>
<td width=48%>Customer's country.</td>
</tr>
<tr valign=top>
<td width=28%>CustomerID</td>
<td width=24%>int</td>
<td width=48%>Unique customer identifier.</td>
</tr>
<tr valign=top>
<td width=28%>Email</td>
<td width=24%>varchar</td>
<td width=48%>Customer's e-mail address.</td>
</tr>
<tr valign=top>
<td width=28%>FirstName</td>
<td width=24%>varchar</td>
<td width=48%>Customer's first name.</td>
</tr>
<tr valign=top>
<td width=28%>LastName</td>
<td width=24%>varchar</td>
<td width=48%>Customer's last name.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneNumber</td>
<td width=24%>varchar</td>
<td width=48%>Customer's phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PostalCode</td>
<td width=24%>varchar</td>
<td width=48%>Customer's postal code.</td>
</tr>
<tr valign=top>
<td width=28%>State</td>
<td width=24%>varchar</td>
<td width=48%>Customer's state.</td>
</tr>
</table><br>
<p>
Adding billing functionality to Level C makes it necessary to track information about each person who places an ad, so a Customers table was added to the database.</p>
<p class=label>
<b>Fields in the InvoiceDetails Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Field name</b></td>
<td class=label width=17%><b>Data type</b></td>
<td class=label width=62%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>Description</td>
<td width=17%>varchar</td>
<td width=62%>Text description of the item associated with this invoice entry. In the sample, this field contains the title of the ad associated with this invoice entry.</td>
</tr>
<tr valign=top>
<td width=21%>DetailID</td>
<td width=17%>int</td>
<td width=62%>Unique identifier for each item listed on the invoice. In the sample, this field contains a unique identifier for each ad.</td>
</tr>
<tr valign=top>
<td width=21%>InvoiceID</td>
<td width=17%>int</td>
<td width=62%>Unique identifier for each invoice (primary key).</td>
</tr>
<tr valign=top>
<td width=21%>Price</td>
<td width=17%>decimal</td>
<td width=62%>Price of product or service; in the sample, price of ad.</td>
</tr>
<tr valign=top>
<td width=21%>ProductCode</td>
<td width=17%>varchar</td>
<td width=62%>Unique identifier for an entry in the Products table. In the sample, this field indicates word count, because 100-word ads are priced differently from 200-word ads.</td>
</tr>
<tr valign=top>
<td width=21%>Quantity</td>
<td width=17%>int</td>
<td width=62%>Answers the question, "how many?" In the sample, this field contains the number of words in the ad.</td>
</tr>
<tr valign=top>
<td width=21%>UnitOfMeasure</td>
<td width=17%>varchar</td>
<td width=62%>Answers the question, "of what?" In the sample, this field contains the duration of ad.</td>
</tr>
</table><br>
<p class=label>
<b>Fields in the Invoices Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Field name</b></td>
<td class=label width=20%><b>Data type</b></td>
<td class=label width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=23%>CustomerID</td>
<td width=20%>int</td>
<td width=57%>Unique identifier for a customer.</td>
</tr>
<tr valign=top>
<td width=23%>Description</td>
<td width=20%>varchar</td>
<td width=57%>Describes the product to which the invoice applies. In the sample, this field is always "Classified Ad Invoice."</td>
</tr>
<tr valign=top>
<td width=23%>InvoiceDate</td>
<td width=20%>datetime</td>
<td width=57%>Date of the invoice.</td>
</tr>
<tr valign=top>
<td width=23%>InvoiceID</td>
<td width=20%>int</td>
<td width=57%>Unique identifier for the invoice.</td>
</tr>
<tr valign=top>
<td width=23%>InvoiceTotal</td>
<td width=20%>decimal</td>
<td width=57%>Total amount of invoice.</td>
</tr>
<tr valign=top>
<td width=23%>Reference</td>
<td width=20%>varchar</td>
<td width=57%>Additional pertinent information. In the sample, this field contains the unique identifier of the ad, for reference.</td>
</tr>
</table><br>
<p>
Both Invoices and Invoice Details are general purpose invoice tables. In the sample, these tables are used as follows: when you place an ad, the sample generates an invoice and the line item on the invoice corresponds to the ad. For the purposes of the sample, each invoice only has one invoice detail that corresponds to one ad. However, in the context of a larger application (keeping in mind that the sample represents only one part of such an application), you can imagine an invoice with multiple line items (invoice details), each representing different goods or services from the Island Hopper company. Designing the invoice tables this way shows how a company can use one invoicing scheme throughout.</p>
<p class=label>
<b>Fields in the Payments Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Field name</b></td>
<td class=label width=22%><b>Data type</b></td>
<td class=label width=53%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>CardExpDate</td>
<td width=22%>datetime</td>
<td width=53%>Expiration date of credit card.</td>
</tr>
<tr valign=top>
<td width=25%>CardNumber</td>
<td width=22%>varchar</td>
<td width=53%>Credit card number.</td>
</tr>
<tr valign=top>
<td width=25%>CustomerID</td>
<td width=22%>int</td>
<td width=53%>Unique identifier for the customer.</td>
</tr>
<tr valign=top>
<td width=25%>InvoiceID</td>
<td width=22%>int</td>
<td width=53%>Unique identifier for the invoice to which this payment applies.</td>
</tr>
<tr valign=top>
<td width=25%>PaymentAmt</td>
<td width=22%>decimal</td>
<td width=53%>Amount of payment.</td>
</tr>
<tr valign=top>
<td width=25%>PaymentDate</td>
<td width=22%>datetime</td>
<td width=53%>Date of payment.</td>
</tr>
<tr valign=top>
<td width=25%>PaymentID</td>
<td width=22%>int</td>
<td width=53%>Unique identifier of this payment.</td>
</tr>
<tr valign=top>
<td width=25%>PaymentMethod</td>
<td width=22%>varchar</td>
<td width=53%>Payment method.</td>
</tr>
</table><br>
<p class=label>
<b>Fields in the Products Table</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Field name</b></td>
<td class=label width=17%><b>Data type</b></td>
<td class=label width=62%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>Description</td>
<td width=17%>varchar</td>
<td width=62%>Description of the product. In the current implementation of Island Hopper News, the product is a classified ad, either 100 or 200 words.</td>
</tr>
<tr valign=top>
<td width=21%>ProductCode</td>
<td width=17%>varchar</td>
<td width=62%>Unique identifier for a product.</td>
</tr>
<tr valign=top>
<td width=21%>UnitOfMeasure</td>
<td width=17%>varchar</td>
<td width=62%>The way a product is measured for invoicing. In the sample, this field contains the ad duration.</td>
</tr>
<tr valign=top>
<td width=21%>UnitPrice</td>
<td width=17%>decimal</td>
<td width=62%>Unit price for a product. In the sample, this field contains the ad price (100 and 200-word ads have different prices).</td>
</tr>
</table><br>
</BODY>
</HTML>

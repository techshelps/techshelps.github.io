<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing Between Mainframe Integration Strategies</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconchoosingbetweenmainframeintegrationstrategies"></a>Choosing Between Mainframe Integration Strategies</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingBetweenMainframeIntegrationStrategies_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingBetweenMainframeIntegrationStrategies_T">
</object></p>
<p>
You can use SNA Server facilities to implement many useful data access and application communication strategies. These are listed in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Your best choice is…</b></td>
<td class=label width=32%><b>If your application requires…</b></td>
<td class=label width=49%><b>Remarks</b></td>
</tr>
<tr valign=top>
<td width=19%>DCOM</td>
<td width=32%>The mainframe as a peer</td>
<td width=49%>DCOM can call objects on Windows NT or UNIX platforms to distribute information and processing.</td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Support for embedded structures in addition to Automation data types</td>
<td width=49%>DCOM supports both Automation data types and embedded structures, and provides the capability for one server to marshal the interface of another server object. You can set up an object broker on a mainframe that takes requests from clients, finds an object — such as by reference, location, or CPU load — instantiates the object, and passes the interface back to the client.</td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>User-defined types</td>
<td width=49%>Using DCOM, developers can create data types of any complexity. A type might contain, for example, all the fields in an origin, destination, or temporary location. When a developer defines the interface, this type is specified instead of specifying all of the individual fields. This makes object calls to the interface much more accessible.</td>
</tr>
<tr valign=top>
<td width=19%>COMTI</td>
<td width=32%>Complex data processing</td>
<td width=49%>Inherent to COMTI is the ability to work in very robust and complicated environments. Developers are insulated from understanding sophisticated processing such as a two-phase commit across platforms (such as MVS and Windows NT).</td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Microsoft Transaction Server (MTS)</td>
<td width=49%>COMTI functions as an integrated component of MTS, allowing drag-and-drop registration of type libraries in addition it takes advantage of specific MTS features, including object caching and multithread processing. </td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Program-to-program communication</td>
<td width=49%>COMTI provides sophisticated communication between programs on different platforms. For example, a client could issue a request to a mainframe program, and based on the output or return code, another mainframe application or server program can be executed and controlled. </td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Maintaining the current programming environment</td>
<td width=49%>Data centers can continue to leverage mainframe development skills because the entire team does not need to learn COMTI integration programming.</td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Maintaining the current processing environment</td>
<td width=49%>COMTI is a good choice when the integrity, consistency, and security of the data is already maintained by existing mainframe application software.</td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=32%>Writing DB2 data</td>
<td width=49%>COMTI is the best architecture for applications that need to write DB2 records, especially if the same DB2 tables may be used by other CICS applications.</td>
</tr>
<tr valign=top>
<td width=19%>ODBC driver for DB2</td>
<td width=32%>Easy read-only access to DB2 data</td>
<td width=49%>This is the quickest way to get your application up and running and will provide good performance.</td>
</tr>
<tr valign=top>
<td width=19%>Host Data Replication</td>
<td width=32%>Extremely fast access to relational data</td>
<td width=49%>This takes a bit more to set up due to the SQL Server, but direct access to SQL Server may be worth it.</td>
</tr>
<tr valign=top>
<td width=19%>OLEDB/DDM Provider</td>
<td width=32%>Direct access to VSAM or AS/400 files</td>
<td width=49%>This is easy to set up, fast, and preserves the storage, management, backup, and security provided by the original mainframe system.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing a Data Storage Technology</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconchoosingdatastoragetechnology"></a>Choosing a Data Storage Technology</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingDataStorageTechnology_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingDataStorageTechnology_T">
</object></p>
<p>
You have many options for defining a database and storing your application's data. Among the most popular are indexed, hierarchical, and relational data storage technologies. These types of data storage differ not only in the way they physically manage the storage and retrieval of data, but also in the conceptual models they present to the user and programmer.</p>
<p>
Indexed databases (such as VSAM) provide extremely fast data retrieval, suitable for sequential lists, random retrieval, and complex file relationships. You can easily read a VSAM file from beginning to end, or simply retrieve specific records using the index key. Indexed databases typically provide just data storage and retrieval. Your application's code must handle referential integrity and data validation processes.</p>
<p>
A hierarchical database is especially useful for implementing "inverted tree" structures such as a bill of materials or organizational rankings. Hierarchical data access is very fast because the data structures are directly linked. One interesting feature of a hierarchical database is that referential integrity is built-in. Any deletion of a parent record will automatically delete all linked child records as well. However, a hierarchical database does not model complex relationships very well, and implementation requires an experienced systems programmer.</p>
<p>
In recent years, the relational database has generally become the de facto standard for database storage. This is due both to the usability of the relational model itself, and because it provides a standard interface called Structured Query Language (SQL) that allows many different database tools and products to work together in a consistent and understandable way. Additionally, a relational database typically provides mechanisms for handling referential integrity, data validation, and a host of administrative processes to set up and maintain your application's data.</p>
<p>
If you are designing an enterprise application, you might be using existing mainframe databases, including relational, VSAM, and AS/400 files. With Microsoft<sup>®</sup> SNA Server you can seamlessly use mainframe databases and distributed databases located on the network. This integration of mainframe and distributed data with Windows-based applications means that you have many excellent choices for a data storage technology.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using SNA Server to access mainframe data, see <a href="veconchapter10implementingmainframedataaccess.htm">Implementing Mainframe Data Access</a> in Chapter 6 of this book.</p>
<p>
There are no strict guidelines for choosing a data storage technology. It's worth noting that with all of the data storage technologies discussed in this section (and many others not mentioned), you can use OLE DB with ActiveX<sup>®</sup> Data Objects (ADO) as a common data access technology.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using OLE DB and ADO to provide data access for any data storage mechanism, see <a href="veconchapter5choosingrightdataaccesstechnology.htm">Choosing the Right Data Access Technology</a> in Chapter 5 of this book.</p>
<p>
After you choose a data storage technology, you create your application's final data structures by translating your data definitions into the Data Definition Language (DDL) of the database engine. The actual implementation language varies depending on which database engine you choose.</p>
</BODY>
</HTML>

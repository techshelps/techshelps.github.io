<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Contrasting the Design of Client/Server Applications with Distributed Applications</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconcontrastingdesignofclientserverapplicationswithdistributedapplications"></a>Contrasting the Design of Client/Server Applications with Distributed Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconContrastingDesignOfClientServerApplicationsWithDistributedApplications_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconContrastingDesignOfClientServerApplicationsWithDistributedApplications_T">
</object></p>
<p>
In order to get some perspective on the design considerations for high-performance distributed applications, you may find it useful to contrast them with earlier client/server architectures.</p>
<h2>Designing Client/Server Applications</h2>
<p>
In earlier client/server architectures, the database did all the work, insulating developers from most data access coding. Databases performed tasks related to connectivity, security, directory, transaction, and recovery processing. In addition, database routing software on the client handled all communications. As a result, the databases freed developers to concentrate on the business aspects of the application.</p>
<p>
Databases also gave these applications performance and scalability. The number of users that an application could support was essentially a function of the database. The application code might run on client platforms with limited resources, thus limiting performance and scalability, but improving performance and scalability was strictly database-related.</p>
<h2>Designing Distributed Applications</h2>
<p>
With distributed applications, performance and scalability become key aspects of the design process. Distributed applications require that you consider the application's components and infrastructure, including logical packaging, physical deployment modeling, remote server computer workload analysis, and evaluation of the available network bandwidth.</p>
<p>
Ideally, to address performance requirements, each client request should be serviced on demand. On-demand delivery of requested application services to an ever-increasing number of client requests imposes certain scalability requirements. Application servers must be available to provide services whenever clients request them. When an application server is down, so is the business that it supports. </p>
<p>
Servers can be unavailable for many reasons, including:</p>
<ul type=disc>
<li>
Server platform hardware problems.</li>
<li>
Server platform software problems.</li>
<li>
Networking problems.</li>
<li>
Application problems.</li>
</ul>
<p>
In distributed applications, the code for the distributed components must be bulletproof. Component reliability must approach that of the operating system on which it runs. Obviously, distributed components must be thoroughly tested. </p>
<p>
When failures do occur, application servers must have the capability to quickly recover from those failures and to restart themselves. Recovery should recapture as much user work as possible, and data must be left in a consistent state as well. If a server platform will be down for an extended period of time, the application server might be restarted on a different platform. </p>
<p>
Transactions represent another kind of processing that was handled by the database in simple client/server architectures. In distributed application architectures, a transaction monitor (such as Microsoft Transaction Server) is required to extend transaction management to multiple, distributed databases.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing the Physical Architecture</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vecondesigningphysicalarchitecture"></a>Designing the Physical Architecture</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDesigningPhysicalArchitecture_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDesigningPhysicalArchitecture_T">
</object></p>
<p>
The goal of the physical model is to produce an application architecture that best meets the requirements identified in each of the other submodels of the Enterprise Application Model.</p>
<h2>Physical Model Tasks</h2>
<p>
In the physical model design phase, you put the requirements of the other models into concrete form in order to create a physical architecture for your application. In many ways this is the most complex part of the design process, because it is here that you define the pieces and the way they work together. This is where the issues of performance, bandwidth, scalability, reliability, and maintainability are resolved and implemented.</p>
<p>
The most important physical model design tasks include the following.</p>
<h3>Defining Object Roles</h3>
<p>
Component-based applications provide resources and services through COM-based objects, which can assume different roles. Examples of object roles include:</p>
<ul type=disc>
<li>
<b>WorkSpace Objects</b>, which provide a container for other objects to work in. They can provide visual containment, as in a form or browser that contains controls, or a nonvisual process that provides an execution space for business or data service objects, such as Microsoft Transaction Server (MTS). Workspace objects allow for pooling, queuing, scaling, and security services.</li>
<li>
<b>Worker Objects</b>, which simply provide an active thread of execution. On the server, MTS provides the worker objects.</li>
<li>
<b>Service Objects</b>, which implement the business rules and services defined by the logical model.</li>
<li>
<b>State Objects</b>, which provide state information and type conversion handling.</li>
<li>
<b>Job Scheduler Objects</b>, which are special kinds of Worker objects that provide asynchronous job scheduling services to normal worker objects. Job Scheduler objects are critical for creating applications that are easily scalable.</li>
</ul>
<h3>Defining Work Delegation</h3>
<p>
There are two Work Delegation Options — personal and delegated.</p>
<ul type=disc>
<li>
<b>Personal</b>&nbsp;&nbsp;&nbsp;An object performs a task serially with its own skill, time, and resources. (The object is the worker.)</li>
<li>
<b>Delegated</b>&nbsp;&nbsp;&nbsp;A task may require a degree of resources, supervision, or expertise that is beyond the limits of a particular object, so it hands it over to expert agents (workers) to do for it, giving them its specific parameters, and then setting them free to complete the task. (Analogies may be calling upon a job supervisor, car mechanic, doctor, and so on.)</li>
</ul>
<h3>Defining Call/Message Concurrency and Delivery</h3>
<p>
Components call each other for various reasons. Calls and messages between components can be either synchronous or asynchronous, and can use various messaging options that affect performance, throughput, and security.</p>
<h3>Defining State Options</h3>
<p>
Components may need to store many kinds of state information, including computer state, user state, job state, and transaction state. State can be stored in memory or on disk in database or file system storage. All of these choices have performance and integrity implications.</p>
<h3>Defining Access Latency and Bandwidth Approaches</h3>
<p>
Performance is crucial in a distributed environment, where low bandwidth and multiple servers can strain throughput enormously. Careful design consideration needs to be given to performance issues that may be difficult to predict in advance. Various throughput handling options such as local and remote caches and connection pooling need to be considered and tested.</p>
<h2>Physical Model Tools</h2>
<p>
Visual Studio, Enterprise Edition provides several powerful tools for designing, deploying, and testing various physical architecture options.</p>
<h3>Application Performance Explorer (APE)</h3>
<p>
Application Performance Explorer is an application modeling tool that tests the performance of a distributed architecture in many different configurations. APE provides a visual interface for quickly setting up architectures using multiple clients and servers, over different protocols, using different database parameters, object queues, and different numbers of users and transaction volumes. By setting up test architectures that parallel your application, you can quickly run them on multiple computers under many different conditions to evaluate relative performance and efficiency.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about Application Performance Explorer, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrapplicationperformanceexplorerreference">
</object><a href=JavaScript:alink_3.Click()>Application Performance Explorer Reference</a> online in <i>MSDN Library Visual Studio 6.0.</i></p>
<h3>Visual Studio Analyzer</h3>
<p>
Visual Studio Analyzer is a distributed application profile and debugging tool. It collects information about your application while it is running, and is capable of producing reports that help you understand structure and performance issues, as well as isolating faults, identifying bottlenecks, and detecting bugs.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about Visual Studio Analyzer, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrvisualstudioanalyzerreference">
</object><a href=JavaScript:alink_4.Click()>Visual Studio Analyzer Reference</a> online in <i>MSDN Library Visual Studio 6.0.</i></p>
<h3>Visual Database Tools</h3>
<p>
Microsoft Visual Database Tools are a set of database design components for creating and maintaining database objects that implement live connections to Microsoft SQL Server, Oracle, and other ODBC-compliant databases. These tools include four components that are integrated directly into the Visual Studio development environments: a Data View component, a Database Designer, a Query Designer, and a stored procedure Source Code Editor.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about Visual Database Tools, see <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvconintroducingmicrosoftvisualdatabasetools">
</object><a href=JavaScript:alink_5.Click()>Introducing Microsoft Visual Database Tools</a> online in <i>MSDN Library Visual Studio 6.0.</i></p>
<h3>Build Package and Deployment tools</h3>
<p>
New application platforms like the Internet and intranets give developers much greater flexibility in packaging and deploying distributed, component-based enterprise applications. Visual Studio's solution building, packaging, and deployment tools can package your components in flexible ways and create a variety of distribution units for deployment.</p>
<p>
These tools operate within the Microsoft development environment (for Visual J++™ and Visual InterDev™) to create setup executable (.exe) files, cabinet (.cab) files, or Zip Archive (.zip) files for remote deployment. You can also digitally sign setup or cabinet files for additional security in unprotected environments.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about the build, package, and deployment tools, see <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrsolutionbuildpackagereference">
</object><a href=JavaScript:alink_6.Click()>Solution Building and Packaging Reference</a> and <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrsolutiondeployreference">
</object><a href=JavaScript:alink_7.Click()>Solution Deployment Reference</a> online in <i>MSDN Library Visual Studio 6.0.</i></p>
</BODY>
</HTML>

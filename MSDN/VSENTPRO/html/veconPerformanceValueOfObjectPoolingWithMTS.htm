<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance Value of Object Pooling with MTS</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconperformancevalueofobjectpoolingwithmts"></a>Performance Value of Object Pooling with MTS</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconPerformanceValueOfObjectPoolingWithMTS_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconPerformanceValueOfObjectPoolingWithMTS_T">
</object></p>
<p>
If you ask for an object to be created through COM, the server has to create a process space and instantiate the object. This requires large amounts of memory on the server and it adds a thread to the allocated resources. The process thread not only consumes memory by itself but also has to be checked and scheduled by the operating system, requiring additional administrative overhead. Left unchecked, this direct instantiation of objects can consume a server computer's resources.</p>
<p>
Wouldn't it be nice if you could create a pool of objects and then efficiently reuse them over and over again? That's what Microsoft Transaction Server (MTS) does. Basically, it creates the needed objects and then recycles them fast — much faster than the time required for instantiation.</p>
<p>
MTS provides a run-time infrastructure that:</p>
<ul type=disc>
<li>
Manages system resources such as processes, threads, and connections.</li>
<li>
Manages server object creation, execution, and deletion.</li>
<li>
Automatically initiates and controls transactions to make your application reliable.</li>
<li>
Implements security so that unauthorized users cannot access your application.</li>
<li>
Provides tools for configuring, managing, and deploying your application's components.</li>
</ul>
<p>
The easiest way to think about this is that MTS provides object pooling. The object might be a business service, a database connection, or some other application service. Object pooling is an important design concept required for high-performance applications.</p>
<p>
Don't confuse fast object recycling with queuing. Although MTS effectively pools object instances and recycles them quickly, that isn't the same thing as queuing. As a general rule, your application design should use both queuing with MSMQ and object pooling with MTS. The combination of queuing with pooling assures maximum throughput during peak computer workloads and prevents overloading the server with too many objects.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using Microsoft Transaction Server, search online for "Getting Started with Microsoft Transaction Server" in <i>MSDN Library Visual Studio 6.0</i>. For more information on using Microsoft Message Queue Server, see <a href="veconperformancevalueofservicequeuingwithmsmq.htm">Performance Value of Service Queuing with MSMQ</a> in this chapter.</p>
</BODY>
</HTML>

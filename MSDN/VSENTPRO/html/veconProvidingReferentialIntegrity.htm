<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Referential Integrity</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconprovidingreferentialintegrity"></a>Providing Referential Integrity</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconProvidingReferentialIntegrity_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconProvidingReferentialIntegrity_T">
</object></p>
<p>
Referential integrity means that the foreign key in any referencing table must always refer to a valid row in the referenced table. Referential integrity ensures that the relationship between two tables remains synchronized during updates and deletes.</p>
<p>
For example, assume that your application has both a Titles table and a Publishers table as shown in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Titles table</b></td>
<td class=label width=52%><b>Publishers table</b></td>
</tr>
<tr valign=top>
<td width=48%>ti_isbn (key)</td>
<td width=52%>pu_id (key)</td>
</tr>
<tr valign=top>
<td width=48%>ti_title</td>
<td width=52%>pu_name</td>
</tr>
<tr valign=top>
<td width=48%>ti_yearpublished</td>
<td width=52%>pu_address</td>
</tr>
<tr valign=top>
<td width=48%>pu_id (foreign key)</td>
<td width=52%>pu_phone</td>
</tr>
</table><br>
<p>
Referential integrity requires that these two tables must be synchronized. That is, each publisher identification (pu_id) in the Titles table must also exist in the Publishers table.</p>
<p>
Your application cannot just delete the pu_id row from the Publishers table because that would leave the pu_id in the Titles table without a reference. It would be permissible, however, to delete the pu_id row from the Publishers table and also delete every row in the Titles table that has the same pu_id. Such an action would maintain referential integrity for these two tables.</p>
<p>
In a similar manner, your application can't just add a row to the Titles table without a valid pu_id already in the Publishers table. To do so would require "bad" data in the pu_id field. So, your application must ensure a valid Publishers row before inserting the related Titles row.</p>
<p>
The actual implementation of referential integrity depends entirely on the data storage engine you choose and your application's design requirements. Historically, applications using mainframe VSAM files used application code to handle referential integrity. Today, even if your application uses SQL Server, that doesn't mean you must use triggers, foreign keys, constraints, and cascading deletes to maintain referential integrity. You might again choose to handle referential issues with application-based code.</p>
</BODY>
</HTML>

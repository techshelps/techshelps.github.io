<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Data with ADO</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconaccessingdatawithado"></a>Accessing Data with ADO</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithADO_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithADO_T">
</object></p>
<p>
ADO is the single data interface you need to know for all client/server and Web-based data access solutions. One of the strengths of ADO is that it can expose and use the unique properties of each data provider. No matter what data source is used, ADO is totally flexible and adaptable to your application's data access requirements.</p>
<p>
ADO (like RDO) also includes a client batch cursor library that supports optimistic batch updates. With batch updates, you can create a result set, modify the data as required, and subsequently make all of the changes using the batch update method. This reduces server and network overhead and improves performance.</p>
<p>
An important feature of using ADO is the availability of advanced recordset cache management with Remote Data Services (RDS). RDS provides optional data caching on the client workstation. With RDS, you can easily marshal data back and forth between the server and client. For example, your application may use a large client-side result set. This reduces the number of requests for data from the client-side application to the server, improving both the actual performance and the perceived performance of the client-side application. Furthermore, you can open and populate a disconnected Recordset object asynchronously. This improves performance by leaving the client free to execute other tasks while records are still being returned.</p>
<p>
A typical ADO-based application uses the following operations to access a data source.</p>
<ul type=disc>
<li>
<b>Create the Connection object</b>&nbsp;&nbsp;&nbsp;Specifies the connection string with information such as data source name, user identification, password, connection time-out, default database, and cursor location. A Connection object represents a unique session with a data source. You can even control transactions through the Connection object using the BeginTrans, CommitTrans, and RollbackTrans methods.</li>
<li>
<b>Open the connection</b>&nbsp;&nbsp;&nbsp;Opens the ADO connection to the data source.</li>
<li>
<b>Execute an SQL statement</b>&nbsp;&nbsp;&nbsp;Once the connection is open, you can run a query. You can run this query asynchronously and also choose to process the query's result set asynchronously; ADO signals the cursor driver to populate the result set in the background. This lets your application perform other processes without waiting.</li>
<li>
<b>Use the result set&nbsp;&nbsp;&nbsp;</b>The result set is now available to your application. Depending on the cursor type, you can browse and change the row data at either the server or client side.</li>
<li>
<b>Terminate the connection</b>&nbsp;&nbsp;&nbsp;Drops the connection to the data source.</li>
</ul>
<p>
Although ADO objects have many properties and methods, using ADO is really as simple as it looks. ADO definitely represents the future of data access technology.</p>
</BODY>
</HTML>

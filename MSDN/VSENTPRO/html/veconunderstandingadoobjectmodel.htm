<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the ADO Object Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconunderstandingadoobjectmodel"></a>Understanding the ADO Object Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingADOObjectModel_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingADOObjectModel_T">
</object></p>
<p>
The ADO object model defines a collection of programmable objects that support the Component Object Model (COM) and OLE Automation to leverage the powerful partner technology called OLE DB. The ADO object model — when compared to other data access objects such as RDO or DAO — is flatter (has fewer objects) and simpler to use.</p>
<p>
The following drawing shows the ADO object model.</p>
<p>
<img src="ve52dt1.gif" border=0></p>
<p>
There are seven objects in the ADO object model, as described in the following list.</p>
<ul type=disc>
<li>
<b>Command object</b>&nbsp;&nbsp;&nbsp;Maintains information about a command, such as a query string, parameter definitions, and so on. You can execute a command string on a Connection object of a query string as part of opening a Recordset object, without defining a Command object. The Command object is useful where you want to define query parameters or execute a stored procedure that returns output parameters. The Command object supports a number of properties to describe the type and purpose of the query and help ADO optimize the operation.</li>
<li>
<b>Connection object</b>&nbsp;&nbsp;&nbsp;Maintains connection information such as cursor type, connect string, query time-out, connection time-out, and default database.</li>
<li>
<b>Error object</b>&nbsp;&nbsp;&nbsp;Contains extended error information about error conditions raised by the data provider. Because a single statement can generate two or more errors, the Errors collection can contain more than one Error object at a time.</li>
<li>
<b>Field object</b>&nbsp;&nbsp;&nbsp;Contains information about a single column of data within a recordset. The Recordset object uses the Fields collection to contain all of its Field objects. This Field information includes data type, precision, and numeric scale.</li>
<li>
<b>Parameter object</b>&nbsp;&nbsp;&nbsp;A single parameter associated with a Command. The Command object uses the Parameters collection to contain all of its Parameter objects. ADO Parameter objects can be created automatically by sending queries to the database. However, you can also build this collection programmatically to improve performance at run time.</li>
<li>
<b>Property object</b>&nbsp;&nbsp;&nbsp;A provider-defined characteristic of an ADO object. ADO objects have two types of properties: built-in and dynamic. Built-in properties are those properties implemented in ADO and available to any new ADO object. Dynamic properties are defined by the underlying data provider and appear in the Properties collection for the appropriate ADO object. For example, a property may indicate if a Recordset object supports transactions or updating. This is one of the greatest features of ADO, in that it lets the ADO service provider present special interfaces.</li>
<li>
<b>Recordset object</b>&nbsp;&nbsp;&nbsp;A set of rows returned from a query, including a cursor into those rows. You can open a Recordset object (that is, execute a query) without explicitly opening a Connection object. However, if you do first create a Connection object, you can open multiple Recordset objects on the same connection.</li>
</ul>
</BODY>
</HTML>

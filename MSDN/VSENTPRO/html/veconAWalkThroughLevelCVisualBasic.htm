<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Level C Walk-Through -- Windows</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconawalkthroughlevelcvisualbasic"></a>Level C Walk-Through — Windows</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAWalkThroughLevelCVisualBasic_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAWalkThroughLevelCVisualBasic_T">
</object></p>
<p>
This section describes how the Windows client of the Island Hopper News sample Level C works, including both what you see as a user and what happens behind the scenes. If possible, run the application as you read through this section, and look at the source code, which you'll find in Program Files\IslandHopper\ScenarioC\Source\VBClient\classifieds.vbg if you accepted the installation defaults. The source code for the server components is in Program Files\IslandHopper\ScenarioC\Source\Server_Components\Server_Components.vbg. For complete information on all the different parts of Level C, see <a href="veconlevelcspecification.htm">Level C Specification</a> in this chapter.</p>
<h2>First Impressions</h2>
<p>
When you start the Windows client from the Start menu, you see what appears to be a single form with the caption "Island Hopper News."</p>
<p>
This is actually an multiple-document interface (MDI) form, frmParentC, which calls a child, frmAccountingC, immediately. The child form contains the controls and background you see.</p>
<p>
The main screen of the sample offers you the following six choices.</p>
<ul type=disc>
<li>
Customer Maintenance</li>
<li>
Account Activity</li>
<li>
Payments</li>
<li>
Ad Maintenance</li>
<li>
Browse Ads</li>
<li>
Exit</li>
</ul>
<p>
You can see how Level C of the sample expands upon Level A by including the concepts of customers and billing and the functions that go along with those concepts. Now that paying customers use the application, you need a way to maintain their records and match customers with payments. You also need a way to track what a customer owes for placing ads (invoices) and what a customer pays (payments).</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See <a href="veconawalkthroughlevelavisualbasic.htm">Level A Walk-Through — Windows</a> in this chapter for information on how the Windows version of Level A works.</p>
<p>
The Ad Maintenance form changes slightly from Level A. Now you can retrieve ads by customer ID and customer e-mail. You can also search by customer last name.</p>
<p>
Notice how the labels change color when you move the pointer over them. This is done by detecting the mouse move and changing the color of the labels. Look at the code for frmAccountingC and locate the Form_MouseMove and lblOption_MouseMove functions.</p>
<h2>Maintaining Customer Records</h2>
<p>
Click Customer Maintenance to display the Customer Maintenance form, frmCustomerC. This form presents three options: you can add a new customer record to the database, update customer records, or delete a customer record from the database. You can use the customer in the following table to try out the search functions.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>ID</b></td>
<td class=label width=24%><b>Name</b></td>
<td class=label width=63%><b>E-mail</b></td>
</tr>
<tr valign=top>
<td width=13%>11901</td>
<td width=24%>Masters, Steven</td>
<td width=63%>someone@microsoft.com</td>
</tr>
</table><br>
<h3>How It's Done</h3>
<p>
All of these tasks are carried out by the bus_CustomerC component, which contains the business logic and subsequently creates data access objects, such as db_CustomerC, to perform the actual work with the database.</p>
<h2>Inquiring About Invoices</h2>
<p>
Click Invoice Inquiry to display the Invoice Inquiry form, frmInvoiceC. With this form, you can retrieve invoices from the database by the invoice ID, the customer ID, or the customer e-mail address. You can also search for an invoice by customer last name. Invoices that match your search criteria are listed in a grid control at the bottom of the form. You can double-click any listed invoice to see detailed information about that invoice on the Invoice Details form, frmInvoiceDetailsC.</p>
<p>
You can use the customer in the following table to try out the search functions.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>ID</b></td>
<td class=label width=24%><b>Name</b></td>
<td class=label width=63%><b>E-mail</b></td>
</tr>
<tr valign=top>
<td width=13%>11901</td>
<td width=24%>Masters, Steven</td>
<td width=63%>someone@microsoft.com</td>
</tr>
</table><br>
<h3>How It's Done</h3>
<p>
frmInvoiceC instantiates the bus_CustomerC component to retrieve the invoices from the database. The bus_CustomerC component in turn creates data access objects as needed.</p>
<h2>Tracking Payments</h2>
<p>
Click Payments to display the Payments form, frmInputPaymentC. With this form, you can enter a payment for an invoice. You can retrieve customer information from the database using the customer ID or e-mail address. You can also search for a customer by last name.</p>
<p>
You can use the customer in the following table to try out the search functions.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>ID</b></td>
<td class=label width=24%><b>Name</b></td>
<td class=label width=63%><b>E-mail</b></td>
</tr>
<tr valign=top>
<td width=13%>11901</td>
<td width=24%>Masters, Steven</td>
<td width=63%>someone@microsoft.com</td>
</tr>
</table><br>
<h3>How It's Done</h3>
<p>
The Payments form instantiates the bus_CustomerC component to handle retrieving customer information from the database. It also instantiates the bus_PaymentC component to handle adding payments to the database.</p>
<h2>Retrieving Ads</h2>
<p>
Click Ad Maintenance to display the Ad Maintenance form, frmAdC. You can use this form to retrieve an ad from the database. You can search for a customer by last name without supplying any input. You can also retrieve ads by customer ID or customer e-mail address if you have that information. You can click Place Ads to place an ad, but you must supply a valid customer ID first.</p>
<p>
You can use the customer in the following table to try out the search functions.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>ID</b></td>
<td class=label width=24%><b>Name</b></td>
<td class=label width=63%><b>E-mail</b></td>
</tr>
<tr valign=top>
<td width=13%>11901</td>
<td width=24%>Masters, Steven</td>
<td width=63%>someone@microsoft.com</td>
</tr>
</table><br>
<p>
The retrieved ads are displayed in an MSFlexGrid control. You can double-click on an ad to display the Ad Details form, frmAdDetailA. Clicking Place Ads also displays the Ad Details form.</p>
<h3>How It's Done</h3>
<p>
This form, which is running on the client machine, instantiates the bus_CustomerC component on the server machine when it loads. When you fill in a customer ID or e-mail address and click Retrieve, the corresponding bus_CustomerC method (GetByID or GetByE-mail) is called. Both of these methods instantiate the db_CustomerC component to perform the actual retrieval.</p>
<h2>Browsing Ads</h2>
<p>
Click Browse Ads to display the Browse Ads form, frmDisplayAdsC. This form consists of two parts: the list of categories on the left and the list of ads on the right. You click a category to see the ads in that category, and then click the title of an ad to see the text of the ad.</p>
<h3>How It's Done</h3>
<p>
The list of categories is a standard ListBox control that is populated through a method called FillAdsByCategory. You can see this method if you look at the code for frmDisplayAdsC. The FillAdsByCategory method instantiates the db_CategoryC component to access the database and return a list of all the categories in the Categories table.</p>
<p>
The list of ads is a WebBrowser control. The WebBrowser control is available with Internet Explorer 4.0 and later, and with it you can run Web pages as part of a Visual Basic form. The WebBrowser control locates the Web server and displays an Active Server Pages file, AdsList.asp, which contains the ads that apply to the category you selected. To see how this is done, look at the lstCategory_Click function in the code for frmDisplayAdsC.</p>
<h2>Placing and Editing Ads</h2>
<p>
You can update, delete, or place new ads with the Ad Details form. These three modes are controlled by a set of option buttons in the upper left corner. The mode that is enabled when the form is displayed depends on how you got to the form. If you clicked Place Ads, the Ad Details form is displayed with the Place New Ad option selected. If you double-clicked an ad on the Ad Maintenance form, the Ad Details form is displayed with the Update option selected and the ad's information displayed.</p>
<h3>How It's Done</h3>
<p>
When the Ad Details form is loaded, it instantiates the bus_AdC component, calls the FillCategory and FillDuration methods to populate the Category and Duration combo boxes, and clears all the text fields in preparation for your input. Then the form is activated. The activation code determines which option button should be enabled.</p>
<p>
The FillDuration method simply uses the AddItem method to populate the Duration combo box. The FillCategory method instantiates the db_CategoryC component to access the database and retrieve the categories, and then uses the AddItem method to populate the combo box.</p>
<p>
When the Ad Details form is activated, it calls the RetrieveAdByID subroutine to retrieve the ad from the database. RetrieveAdByID uses the GetByID method of bus_AdC to retrieve the ad information and populate the fields.</p>
</BODY>
</HTML>

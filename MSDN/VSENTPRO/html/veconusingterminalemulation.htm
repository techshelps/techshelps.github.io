<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Terminal Emulation</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconusingterminalemulation"></a>Using Terminal Emulation</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingTerminalEmulation_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingTerminalEmulation_T">
</object></p>
<p>
You can integrate Windows-based applications with a mainframe through client support of terminal emulation. Terminal emulation, the most basic form of integration, requires the entire mainframe application to run on the mainframe computer with the client application merely emulating terminal protocols. Terminal emulation is typically provided by third-party packaged connectivity software and scripting languages.</p>
<p>
Terminal emulation techniques can support sophisticated capabilities, typically by branching in one of the following three directions.</p>
<ul type=disc>
<li>
Protocol-specific script languages</li>
<li>
Programmatic support for screen reading and writing, known as screen scraping</li>
<li>
Support for higher-level object and API interfaces</li>
</ul>
<p>
Many third-party products can emulate a native terminal while running the Windows operating system.</p>
<h2>Script Languages Extend Emulation Capability</h2>
<p>
By using script languages with emulation software, you can add flexibility and control that goes beyond simple terminal emulation — in fact, the client can drive the emulation interface. Script languages typically send a string of commands or text, wait for a response, and then branch depending on the output returned to the screen. Script language commands are interpreted at run time rather then being precompiled, which offers a tradeoff of flexibility over performance. High Level Language Application Programming Interface (HLLAPI) and Extended HLLAPI (EHLLAPI) are two examples of script languages that can be used with terminal emulation software.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on Windows HLLAPI support for your application, search online for "HLLAPI" in <i>MSDN Library Visual Studio 6.0</i>.</p>
<p>
Terminal emulation is the simplest and oldest technique for accessing mainframe data and applications. It may still be useful to you, but you should seriously consider some of the other enterprise integration technologies available with SNA Server.</p>
</BODY>
</HTML>

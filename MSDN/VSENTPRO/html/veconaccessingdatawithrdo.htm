<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Data with RDO</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconaccessingdatawithrdo"></a>Accessing Data with RDO</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithRDO_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithRDO_T">
</object></p>
<p>
RDO is a popular way to build efficient data access to relational ODBC databases. With RDO, you can create simple cursorless result sets, or more complex batch or client-side cursors. You can limit the number of rows returned and monitor all of the messages and errors generated by the remote data source without compromising the executing query.</p>
<p>
One of the important features in RDO that is not available in DAO is the ability to handle queries and stored procedures that return multiple result sets. This feature is commonly used whenever you need to load multiple controls (such as combo boxes) with data from multiple tables. This feature eliminates the redundant processing and network traffic overhead of using many separate queries.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because the object models are very similar, you can take your existing applications that use DAO data access and easily convert them to use RDO. For more information on migrating from DAO to RDO, search for "RDO Compared to Microsoft Jet/DAO" in <i>MSDN Library Visual Studio 6.0</i>.</p>
<p>
Most RDO methods can be executed either synchronously, asynchronously, or through the use of event procedures to notify your code when operations are complete or about to be executed. Using the asynchronous operations and event procedures, your application can do other work while lengthy queries are executed.</p>
<p>
While RDO and any specific ODBC driver can leverage unique data source functions by directly exposing the ODBC API functions, the same functions might not be supported by other drivers. If your application is designed to be used across a variety of databases, these direct functions should be used carefully or not at all.</p>
<p>
RDO has the ability to dissociate and reassociate an rdoQuery object from its connection. This is especially useful because you can associate the query with other connections, and thus apply the same query across multiple data sources without re-creating the individual connections.</p>
<p>
RDO (like ADO) also includes a client batch cursor library that supports optimistic batch updates. With batch updates, you can create a result set, modify the data as required, and subsequently make all of the changes using the batch update method. This improves performance by reducing server, network, and ODBC overhead.</p>
<p>
An RDO-based application uses the following operations to access a data source.</p>
<ul type=disc>
<li>
<b>Set the environment handle</b>&nbsp;&nbsp;&nbsp;Identifies the memory location for global data and status information for the defined connections.</li>
<li>
<b>Open the Connection</b>&nbsp;&nbsp;&nbsp;Specifies the connection string with information such as data source name, user identification, password, default database, network name of the data source server, and name of the data source driver.</li>
<li>
<b>Open the result set</b>&nbsp;&nbsp;&nbsp;This runs a query and creates a result set.</li>
<li>
<b>Use the result set&nbsp;&nbsp;&nbsp;</b>The result set is now available to your application. Depending on the cursor type, you can browse and change the item data at either the server or client side.</li>
<li>
<b>Close the connection</b>&nbsp;&nbsp;&nbsp;Drops the connection to the data source.</li>
<li>
<b>Free the environment handle&nbsp;&nbsp;&nbsp;</b>Drops the global data and frees all associated memory.</li>
</ul>
<p>
With RDO you can create database-independent code that automatically adapts to a variety of ODBC databases.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Performance Factors</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconapplicationperformancefactors"></a>Application Performance Factors</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconApplicationPerformanceFactors_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconApplicationPerformanceFactors_T">
</object></p>
<p>
Application performance is affected by several important factors, including:</p>
<ul type=disc>
<li>
Workload growth.</li>
<li>
Hardware resource consumption.</li>
<li>
Architectural design strategies.</li>
<li>
Optimized database access.</li>
</ul>
<h2>Workload Growth</h2>
<p>
There are several important kinds of workload growth that affect application performance as shown in the following list.</p>
<ul type=disc>
<li>
<b>User population</b>&nbsp;&nbsp;&nbsp;More users means increased transactions, more component access, increased CPU consumption, more network traffic, and additional database access. For example, when the user population doubles, the network and database workload probably double also.</li>
<li>
<b>Database changes</b>&nbsp;&nbsp;&nbsp;Databases grow in many ways: data complexity, stored data volume, and database usage.</li>
<li>
<b>Transaction complexity</b>&nbsp;&nbsp;&nbsp;Applications and their transactions tend to become more complicated. Newly added cross-application interfaces and their associated transaction coordination may create unnoticed resource consumption or blockage.</li>
<li>
<b>Component allocation</b>&nbsp;&nbsp;&nbsp;With distributed components, on-demand component allocation consumes server computer resources. Without service queuing and object pooling, eventually the server computer loses efficiency and may fail.</li>
<li>
<b>Application population</b>&nbsp;&nbsp;&nbsp;As applications become easier and less expensive to build, organizations are using computers in new ways. These new applications increase the load on existing databases, server computers, and the network.</li>
</ul>
<p>
The workload your application experiences over time is generally predictable. Once your application is up and running and establishes some baseline performance statistics, you can identify workload growth trends and patterns using various performance analysis tools (such as the Windows NT Performance Monitor).</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on how to monitor workload growth, see <a href="veconusingperformancemonitor.htm">Using Performance Monitor</a> in this chapter.</p>
<h2>Hardware Resource Consumption</h2>
<p>
A growing workload affects your application's performance by directly increasing hardware resource consumption. For example, if you now have twice as many users, you probably also have twice as many database accesses and related network traffic. Ultimately, the performance potential for your application is largely constrained by the available hardware. It does little good to optimize your application if the hardware infrastructure is slow and inadequate.</p>
<p>
The hardware factors affecting performance include:</p>
<ul type=disc>
<li>
CPU consumption (high CPU use makes every task wait longer).</li>
<li>
Memory allocation (inadequate memory causes slow paging to disk).</li>
<li>
Disk I/O subsystem (too much disk input or output slows your application).</li>
<li>
Network hardware (poor-quality network hardware limits throughput).</li>
</ul>
<p>
In a typical enterprise environment, the hardware available to your application is only occasionally upgraded. For most of your application's lifecycle, it will run in the same hardware environment. You should periodically monitor hardware resource consumption to ensure the current and future application performance you expect.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on hardware resource consumption and how to fix it, see <a href="veconbalancinghardwareresources.htm">Balancing Hardware Resources</a> in this chapter.</p>
<h2>Architectural Design Strategies</h2>
<p>
Your enterprise application's performance is also affected by certain design strategies and implementation choices. These architectural options include:</p>
<ul type=disc>
<li>
Logical packaging.</li>
<li>
Physical deployment.</li>
<li>
Component instancing and reuse.</li>
</ul>
<p>
The foundation of a high-performance application always includes good logical packaging. Logical packaging is the process of grouping related application services into common components. Another important design strategy is to physically deploy the components on the network for optimum efficiency. Deciding how to group logical services and choosing the best physical deployment is not easy, but you can use Application Performance Explorer (APE) to realistically model your proposed application architecture. APE can help you understand the consequences of your design choices and help you find the optimum architectural model.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on the fundamental issues of logical and physical design, see <a href="veovrcreatingapplicationarchitecture.htm">Creating the Application Architecture</a> in Chapter 3 of this book. For more information on modeling distributed component architectures, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrApplicationPerformanceExplorerConcepts">
</object><a href=JavaScript:alink_3.Click()>Application Performance Explorer Concepts</a>, available online in <i>MSDN Library Visual Studio 6.0</i>.</p>
<p>
Efficient component instancing and reuse is a very important part of a high-performance application. Basically, there are two important strategies for fast, reliable, and scalable object reuse: service queuing and object pooling. With service queuing, the queue manager releases work so that the server computer is efficiently busy (but not too busy). With object pooling, certain object instances (such as connections) are quickly recycled (as opposed to dropped and reinstantiated), thereby providing very fast service.</p>
<p>
As an example of the importance of scalability, consider that in high transaction environments, some servers may become CPU-bound. Without the scalability offered by service queuing and object pooling, there is little alternative but to enhance the throughput by using additional processors and more RAM.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on important design strategies for distributed applications and a discussion of service queuing and object pooling, see <a href="vecondesigninghighperformanceapplications.htm">Designing High-Performance Applications</a> in this chapter.</p>
<h2>Optimized Database Access</h2>
<p>
Database access often imposes the largest performance penalty on your application.&nbsp; This is especially a concern with distributed applications, where multiple clients simultaneously access common tables and rows.</p>
<p>
While choosing the right data access technology (such as OLE DB with ADO) solves an important part of your high-performance requirement, the reality is that most of your application's database access speed will come from careful modeling of the data structures, query optimization, and careful handling of multiuser concurrency situations.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on how to increase the speed of your application's data access, see <a href="veconoptimizingdatabaseretrieval.htm">Optimizing Database Retrieval</a> in this chapter. For more information on defining your application's data characteristics and processes, see <a href="veovrchapter4designingenterprisedata.htm">Designing Enterprise Data</a> in Chapter 4 of this book.</p>
</BODY>
</HTML>

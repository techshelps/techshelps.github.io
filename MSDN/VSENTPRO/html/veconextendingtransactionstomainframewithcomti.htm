<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending Transactions to the Mainframe with COMTI</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconextendingtransactionstomainframewithcomti"></a>Extending Transactions to the Mainframe with COMTI</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconExtendingTransactionsToMainframeWithCOMTI_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconExtendingTransactionsToMainframeWithCOMTI_T">
</object></p>
<p>
With COMTI, your application can access transactions running on a mainframe. Because COMTI is a Microsoft Transaction Server (MTS) component, it takes advantage of specific MTS features, including multiple threading, and object management for improved performance. COMTI supports both CICS and IMS transactions.</p>
<p>
Windows-based distributed applications that use Microsoft Transaction Server (MTS) can include CICS applications in MTS-coordinated transactions.</p>
<p>
COMTI integrates seamlessly with MTS so that:</p>
<ul type=disc>
<li>
If you are a Windows developer, you can describe, execute, and administer special MTS objects that access CICS or IMS Transaction Programs (TPs).</li>
<li>
If you are a mainframe developer, you can make mainframe TPs available to distributed applications.</li>
<li>
If you are an MTS component designer, you can include mainframe applications within the scope of MTS, two-phase commit transactions.</li>
</ul>
<p>
MTS developers can decide which parts of the application require a transaction and which parts do not. COMTI extends this choice to the mainframe, as well, by handling both calls that require transactions and calls that do not. For Windows-based applications that require full integration between two-phase commit and mainframe-based Sync Level 2 transactions, COMTI provides all the necessary functionality. COMTI does this without requiring you to change the client application, without placing executable code on the mainframe, and with little or no change to the mainframe TPs. The client application does not need to distinguish between the COMTI component and any other MTS component reference.</p>
<p>
The following diagram shows an example of how a Windows-based client application uses the Distributed Transaction Coordinator (DTC) to handle a distributed transaction involving SQL Server and a CICS Transaction Program. The DTC is the part of MTS that coordinates two-phase commit transactions.</p>
<p>
<img src="ve51s11.gif" border=0></p>
<p>
MTS components, and thus COMTI components, have four possible transaction properties that are set in the component builder at the time you build the component. These are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Transaction properties</b></td>
<td class=label width=62%><b>Expected use</b></td>
</tr>
<tr valign=top>
<td width=38%>Requires transaction</td>
<td width=62%>The mainframe TP must be transactional and support Sync Level 2.</td>
</tr>
<tr valign=top>
<td width=38%>Requires new transaction</td>
<td width=62%>The mainframe TP must be transactional and support Sync Level 2.</td>
</tr>
<tr valign=top>
<td width=38%>Supports transactions</td>
<td width=62%>The mainframe TP must support both Sync Level 0 and Sync Level 2 requests and handle the transaction semantics.</td>
</tr>
<tr valign=top>
<td width=38%>Does not support transactions</td>
<td width=62%>This choice is required for IMS TPs and for any CICS non-link TPs that support only Sync Level 0.</td>
</tr>
</table><br>
<p>
If a COMTI component is invoked within the scope of an MTS transaction, COMTI will establish a Sync Level 2 conversation with CICS (otherwise, Sync Level 0 is used). This is transparent to the client of the COMTI component. If the mainframe TP is a CICS Link program, the transactional nature of the conversation is transparent to the TP as well. This is because IBM's mirror transaction in CICS (CSMI) handles the Sync Level 2 protocol and the TP that it is linked to is unaware whether Sync Level 0 or Sync Level 2 is being used.</p>
<p>
COMTI complies with the MTS programming model by calling SetComplete or SetAbort when it completes the operation of each method call from the client. If no errors were detected, COMTI calls SetComplete; otherwise, it calls SetAbort. COMTI also calls SetAbort if the mainframe TP indicates that the transaction should not commit by setting the DisableCommit flag in the error block meta-data returned. Note that an MTS application component that invokes methods on other MTS components — including COMTI-created components — can also call SetAbort if it has other information that causes it to cancel a transaction.</p>
<p>
When the client's method call returns, the transaction program on the mainframe has performed some unit of work, but any changes to protected resources in CICS are not yet committed. COMTI uses new DTC interfaces to enlist the Sync Level 2 conversation on the DTC transaction. When DTC is ready to commit or abort the transaction, it communicates with COMTI to drive the appropriate two-phase commit flows on the LU 6.2 conversation. Again, all of the two-phase commit work is performed transparently by COMTI on the client's behalf.</p>
<p>
Although the COMTI object may be deactivated when the method completes, the conversation must be maintained until the transaction commits or aborts. While a conversation is waiting to commit, it is divorced from the object with which it was associated. COMTI manages a pool of these "waiting" conversations and performs the required sync-level operations when the appropriate notifications are received from DTC. When possible, COMTI reuses these conversations to minimize overhead.</p>
<p>
COMTI also provides a resynchronization service, implementing the "Exchange Log Names" and "Compare States" functions of an SNA Transaction Manager. COMTI allows both DTC and CICS to initiate the recovery process as required during system startup or following a system or communication failure.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All of the COMTI resync and two-phase commit flows are implemented in conformance with the SNA Sync Point Services Architecture Reference (IBM manual number SC31-8134-00).</p>
<p>
Using SNA Server and MTS, developers can easily make mainframe programs available to COM-supported clients and their Internet applications. In addition, MTS component designers can easily include mainframe applications within the scope of two-phase commit transactions.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about using Microsoft Transaction Server, search online for "MTS Overview and Concepts" in <i>MSDN Library Visual Studio 6.0</i>.</p>
</BODY>
</HTML>

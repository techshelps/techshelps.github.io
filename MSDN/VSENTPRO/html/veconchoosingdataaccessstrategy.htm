<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing a Data Access Strategy</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconchoosingdataaccessstrategy"></a>Choosing a Data Access Strategy</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingDataAccessStrategy_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChoosingDataAccessStrategy_T">
</object></p>
<p>
There are a number of questions to consider as you choose a data access technology:</p>
<ul type=disc>
<li>
Is this a new design or a modification to an existing application using "old" data access technology? For a modification, it's tempting to continue with the application's old data access methods. For the immediate future, this seems like a reasonable and cost-effective decision. However, the downside is programming difficulty as the application stretches toward new and different data sources, and eventual obsolescence. For a new design, you should use ADO.</li>
<li>
Where is the data? Is it on the Web, on a remote server, or simply stored locally on the user's system? If the data is simply stored on the user's local system, the need to build a separate server to manage it might be considered overkill. If the data is remote, what about connection management? What happens when your application cannot connect? Should you be using an asynchronous data access technology such as ADO or RDO?</li>
<li>
What are the developers trained to use? Do they already have experience with ADO, RDO, DAO, or ODBC? Is it worth the modest one-time cost and effort to train the entire staff to use ADO? If you begin using ADO, can you reasonably anticipate a maintenance cost reduction in the near future?</li>
<li>
Does your application require data access to both relational and nonrelational data sources? Do you have an OLE DB provider for each? If so, you should use ADO.</li>
<li>
Are you planning to use Microsoft<sup>®</sup> Transaction Server (MTS)? If this is the case, you need to choose one of the data access technologies that can be executed on the server and act as a "resource manager" (an MTS term for a component that implements its set of resource manager interfaces). For example, ADO, RDO, and ODBC can act as MTS resource managers. The DAO interface is not capable of being a resource manager. You should also consider if the component must be thread safe (such as with ADO and RDO), since this is a requirement for most MTS-managed components if you expect reasonable resource use and performance.</li>
<li>
Does every application already use the ODBC API? If you continue with ODBC, how will your application access other kinds of data sources in the future?</li>
</ul>
<p>
You can use the differing data access technologies to implement many useful data access and application communication strategies. These are listed in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Your best choice is…</b></td>
<td class=label width=35%><b>If your application requires…</b></td>
<td class=label width=47%><b>Remarks</b></td>
</tr>
<tr valign=top>
<td width=18%>ADO</td>
<td width=35%>Mainframe data or program communications.</td>
<td width=47%>With Microsoft<sup>®</sup> SNA Server, you can set up OLE DB data providers for mainframe data sources such as VSAM, CICS, IMS, and AS/400 files.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>Reengineering.</td>
<td width=47%>For existing applications, you should consider reengineering with ADO. As an alternative, you could continue with previous data access methods.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>New development.</td>
<td width=47%>For all new development you should use Microsoft's ADO data access technology.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>Uniform access to a variety of data sources and data types.</td>
<td width=47%>ADO is a common interface for all data access requirements.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>Fast development.</td>
<td width=47%>ADO helps minimize development cost because it is uniform, consistent, and easy to use. You can train your developers once and benefit continuously thereafter.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>High performance.</td>
<td width=47%>ADO is very fast.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>Internet Information Server's (IIS) Active Server Pages (ASP).</td>
<td width=47%>If your application uses IIS with ASP to generate browser-independent HTML from databases, you must use ADO.</td>
</tr>
<tr valign=top>
<td width=18%>OLE DB</td>
<td width=35%>Custom file access.</td>
<td width=47%>You can write custom OLE DB data providers for virtually any data source. You can then use ADO as the data access technology.</td>
</tr>
<tr valign=top>
<td width=18%>RDO</td>
<td width=35%>Fast access to existing ODBC data.</td>
<td width=47%>RDO is very fast.</td>
</tr>
<tr valign=top>
<td width=18%>ODBCDirect</td>
<td width=35%>Access to ODBC data.</td>
<td width=47%>ODBCDirect provides a performance improvement over the older DAO data access technology.</td>
</tr>
<tr valign=top>
<td width=18%>DAO</td>
<td width=35%>Enhancements to existing DAO data access.</td>
<td width=47%>DAO provides a consistent programming model for situations where some of the data access services must be provided using Microsoft Jet. If you already have large amounts of DAO code, and are willing to overlook the design, coding, and performance benefits provided by ADO, there's no reason to change it.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=35%>Running within a 16-bit environment.</td>
<td width=47%>DAO is the only choice.</td>
</tr>
<tr valign=top>
<td width=18%>ODBC</td>
<td width=35%>Fast access to existing ODBC data.</td>
<td width=47%>If you're willing to develop and maintain complex code using the ODBC API, this is a good choice.</td>
</tr>
</table><br>
</BODY>
</HTML>

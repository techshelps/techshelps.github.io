<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining Application Logic</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vecondefiningapplicationlogic"></a>Defining Application Logic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningApplicationLogic_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningApplicationLogic_T">
</object></p>
<p>
The logical model is the design phase that identifies how the business policies, rules, and services your application requires are broken out into logical "business objects."&nbsp; These abstract business objects combine to define a three-tier logical model of the application. This logical model is the precursor of the physical component model you will design later.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about three-tier logical application design, search online for "the services model" in <i>MSDN Library Visual Studio 6.0</i> or at the Microsoft Web site at http://www.microsoft.com.</p>
<h2>Logical Model Tasks</h2>
<p>
The process of logical design includes five specific activities, as shown below. While these activities are presented in a generally sequential order, it is important to remember that they are iterative; that is, earlier stages will continue to be refined as later stages are accomplished.</p>
<h3>Identifying Business Objects and Services</h3>
<p>
Abstract "business objects," and the services they must provide, are derived from the usage scenarios you developed in the user model design phase. </p>
<h3>Defining Interfaces</h3>
<p>
A service delivers its functionality through its interface. The interface is defined as a contract between a supplier service and a consumer service. Once you define and publish an object's interfaces, they should not be changed, to avoid breaking external dependencies.</p>
<h3>Identifying Business Object Dependencies</h3>
<p>
Business object dependencies arise when a service in one business object calls another service in another business object. Although dependencies naturally occur in logical design, it is important to understand them clearly before translating the logical design to physical components that may need to interact across process and computer boundaries.</p>
<h3>Validating Logical Design</h3>
<p>
You need to validate the logical design against the usage scenarios to assure that the requirements captured in the user model are completely and correctly expressed in the logical model. As with all the design models, you will not produce a complete logical design in a single pass. It is an iterative process, with each pass adding detail.</p>
<h2>Logical Model Tools</h2>
<p>
Visual Studio, Enterprise Edition provides two unique enterprise tools that are especially useful in the logical model design phase: Visual Modeler and Visual Component Manager.</p>
<h3>Visual Modeler</h3>
<p>
Microsoft Visual Modeler is a tool for designing three-tier distributed applications, using class and component diagrams. Visual Modeler actually spans the logical model, technology model, and physical models: you can visually design models of the classes and components your application needs, and then convert these models to Microsoft<sup>®</sup> Visual Basic<sup>®</sup> or Visual C++<sup>®</sup> code. With Visual Basic, you can also import your application's code, and convert it to Visual Modeler diagrams. This makes it possible to switch back and forth between a model and working code, for optimum flexibility and efficiency. You can also publish the visual models you create in Visual Component Manager, described in the following section, so they can be shared and reused by other developers in your organization. Visual Modeler is based on a subset of the Unified Modeling Language (UML).</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about using Visual Modeler for component-based enterprise application design, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrvisualmodelerreference">
</object><a href=JavaScript:alink_3.Click()>Visual Modeler Reference</a> online in <i>MSDN Library Visual Studio 6.0</i>.</p>
<h3>Visual Component Manager</h3>
<p>
Visual Component Manager is a tool for publishing, sharing, and reusing software components, including wizards, COM components, Database Connection objects, and many others. It is especially useful for large development teams building component-based enterprise applications, because it offers a location for common components that can be shared by the entire team. Component interfaces and usage guidelines can be included to assist in the logical design process.</p>
<p>
Visual Component Manager publishes your source code or compiled components to a repository-based catalog, where they can easily be located, inspected, retrieved, and reused.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For more information about using Visual Component Manager, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrvisualcomponentmanagerreference">
</object><a href=JavaScript:alink_4.Click()>Visual Component Manager Reference</a> online in <i>MSDN Library Visual Studio 6.0.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Milestone-Based Process Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconthemilestonebasedprocessmodel"></a>Milestone-Based Process Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconTheMilestoneBasedProcessModel_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconTheMilestoneBasedProcessModel_T">
</object></p>
<p>
Overcoming these drawbacks requires a more flexible, iterative, process-oriented development model. The milestone-based process model presented here is derived from the product life cycle model proven so successful within Microsoft Corporation. It encourages thinking about work in terms of processes rather than tasks. Milestones mark the self-regulation points of these processes.</p>
<p>
The four characteristics of the milestone-driven model are:</p>
<ul type=disc>
<li>
<b>Milestone-based approach</b>&nbsp;&nbsp;&nbsp;The application development process is driven by external and internal milestones, which are checkpoints to guide the development process.</li>
<li>
<b>Clear ownership and accountability</b>&nbsp;&nbsp;&nbsp;The process model connects responsibility for each milestone to the project team roles.</li>
<li>
<b>Risk-driven scheduling</b>&nbsp;&nbsp;&nbsp;High risk components of a project are completed as early as possible.</li>
<li>
<b>Versioned releases</b>&nbsp;&nbsp;&nbsp;The concept of versioned releases is an important one throughout the systems development life cycle because it impacts how expectations are set and how the entire project is planned and managed.</li>
</ul>
<p>
Each of these characteristics is discussed in the following sections.</p>
<h2>Milestone-Based Approach</h2>
<p>
This process model consists of four high-level milestones as represented in the following diagram.</p>
<p class=label>
<b>Process milestones</b></p>
<p>
<img src="ve547g1.gif" border=0></p>
<p>
The milestones are depicted as points on a spiral — rather than a straight line — to emphasize that the process is cyclical and iterative rather than linear. Milestones are not freeze points. Rather, they are "baseline" points at which the deliverables described by the milestone are placed under change control. This facilitates flexibility and successive refinement.</p>
<p>
Briefly, the four major milestones are described in the following list.
<ol>
<li>
Vision/Scope Approved milestone<p class=tl>
Once a new application gains interest and approval, a project team is assembled to define the product. A vision statement establishes scope and provides direction. The Vision/Scope Approved milestone is an opportunity for both end users and the development team to agree upon the project scope and vision.</P></li>
<li>
Functional Specification Approved milestone<p class=tl>
The next visible milestone is availability of a functional specification baseline. This specification provides enough detail about the application so that the project team can begin identifying resource requirements and determining commitments. At this milestone, users and team members agree on what is to be delivered and establish priorities and expectations. This is an opportunity to reassess risk and to revalidate earlier estimates for schedules and resources.</P></li>
<li>
Code Complete milestone<p class=tl>
An approved functional specification provides the baseline for focused development to begin. The development team sets a number of interim delivery milestones, but the critical milestone is, of course, Code Complete. The Code Complete milestone is an opportunity for users and team members to make a final assessment of the release and to verify that rollout and support plans and procedures are in place. At this milestone all <i>new</i> development ceases, and any deferred functionality is noted for the next release.</P></li>
<li>
Release of Product milestone<p class=tl>
After the code has baselined, beta programs, testing, and quality assurance activities are performed <i>concurrently</i> with further code refinement, driving the system to the Release milestone. The Release milestone is the point when the application (or "product") is formally turned over from the project team to the operations and support groups.</P></li>
</ol>
<p>
These four milestones are major progress points that embody all major development concepts. They are review milestones. Again, deliverables for the milestones are not frozen; instead, they are placed under change control.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Throughout this chapter, the application under development is often referred to as a "product." While the strategies defined here certainly apply to developing commercial shrink-wrapped software, they are by no means limited to it. Rather, developing a mindset in which the application is a "product" has significant advantages, including rapid application development, willingness to postpone new or risky features for future releases, and adherence to fixed milestones and ship dates.</p>
</BODY>
</HTML>

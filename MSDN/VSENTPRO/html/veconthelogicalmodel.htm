<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logical Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconthelogicalmodel"></a>Logical Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconTheLogicalModel_C;veconTheLogicalModelC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconTheLogicalModel_T;veconTheLogicalModelT">
</object></p>
<p>
The <i>logical model </i>defines the business entities that will be rendered by the application and what policies and rules will be used to operate on those entities. The questions this model answers are very specific to the business for which you are writing your application. These questions include:</p>
<ul type=disc>
<li>
When should a customer be given a purchase discount?</li>
<li>
When should inventory be restocked?</li>
<li>
How much sales tax should be charged to an international order?</li>
</ul>
<p>
The logical model itself is made up of two relatively independent sub-models, the logical data model and the logical object model. The logical data model is responsible for documenting the business entities that the system manages (such as products, customers, and orders) and the rules for maintaining them (for example, "all new orders must be represented in the Orders table as well as the Shipping table"). The logical object model is responsible for documenting the rules/algorithms that operate on the data entities, how these rules are grouped into interfaces and classes, and how the various objects interact among themselves to solve macro level requirements. You also use the logical model to specify how each object fits into the three-tier logical services model.</p>
<h2>How the logical model interacts with other models</h2>
<p>
As the diagram in the <a href="vecontheenterpriseapplicationmodel.htm">Enterprise Application Model</a> shows, the user model directly interacts with the business model, the logical model, the technology model, and the physical model. The following table characterizes these interactions and gives brief examples of each.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Sub-model</b></td>
<td class=label width=38%><b>How the logical model relates to it</b></td>
<td class=label width=37%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=25%>Business model</td>
<td width=38%>Determines how business policies can be encapsulated.</td>
<td width=37%>An application that must accommodate rapidly changing tax rates and rules must isolate these rules in separate, easily maintainable components.</td>
</tr>
<tr valign=top>
<td width=25%>User model</td>
<td width=38%>Defines the logical entities the user acts on to perform various business tasks.</td>
<td width=37%>Logical customer and order objects and credit checking services are needed to enable the user to carry out typical sales tasks in the application.</td>
</tr>
<tr valign=top>
<td width=25%>Technology model</td>
<td width=38%>Specifies the features and services that must be packaged into the chosen technology’s components.</td>
<td width=37%>A credit checking component must use technology capable of interfacing with credit reporting agencies.</td>
</tr>
<tr valign=top>
<td width=25%>Physical model</td>
<td width=38%>Determines the features and services that must be deployable using the chosen physical architecture.</td>
<td width=37%>A funds transfer component must be deployed on an infrastructure that supports reliable security protocols.</td>
</tr>
</table><br>
<p class=mini>
Since the development model permeates all of the Enterprise sub-models, there are no "typical" interactions because you must account for every design and implementation decision in the development model.</p>
<h2>How the Internet affects the logical model</h2>
<p>
Examples of the way the Internet has affected the logical model include:</p>
<ul type=disc>
<li>
The three-tier model of separating business logic from user interface behavior has gained great momentum as businesses strive to encode business functionality onto powerful Internet application servers.</li>
<li>
The competitive environment fostered by the Internet is also driving an aggressive push by corporations and third party software vendors to implement their new functionality with objects that can be more easily maintained and reused, improving businesses responsiveness.</li>
</ul>
<p>
You should note that for the most part, the Internet is a physical phenomenon and will not have a significant impact on the logical model of those businesses that have already moved to object oriented LAN-based development.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;The logical model and three-tier application design are explored in greater depth in "<a href="vecondefiningapplicationlogic.htm">Defining Application Logic</a>," in Chapter 3, "Tools for Enterprise Application Design."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Data with ODBC</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconaccessingdatawithodbc"></a>Accessing Data with ODBC</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithODBC_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconAccessingDataWithODBC_T">
</object></p>
<p>
ODBC provides a uniform API to access all relational data sources. Because ODBC has broad support from application and database vendors, the result is a single API that provides all the functionality that application developers need. This uniform data access architecture ensures interoperability and a common approach to data access for the many differing relational data sources.</p>
<p>
An application uses the following function calls and processes to access a data source using the ODBC API.</p>
<ul type=disc>
<li>
<b>Allocate environment handle</b>&nbsp;&nbsp;&nbsp;Identifies the memory location for global data and status information for the defined connections.</li>
<li>
<b>Allocate connection</b>&nbsp;&nbsp;&nbsp;Identifies the memory location for data about a particular connection.</li>
<li>
<b>Connect&nbsp;&nbsp;&nbsp;</b>Specifies the connection authorization information (such as data source name, user identification, and password).</li>
<li>
<b>Allocate statement</b>&nbsp;&nbsp;&nbsp;Associates an SQL statement with a connection. Many different SQL statements can be associated with a connection, but only one at a time.</li>
<li>
<b>Execute SQL statement</b>&nbsp;&nbsp;&nbsp;Processes the SQL statement using the database engine.</li>
<li>
<b>Fetch result set</b>&nbsp;&nbsp;&nbsp;Receives the results of the SQL statement (such as all rows, or just the first, last, next, or previous row), and also gets information about the results (such as number of rows or number of columns).</li>
<li>
<b>Free statement&nbsp;&nbsp;&nbsp;</b>Drops the statement from the connection. You can now associate some other SQL statement with the same connection.</li>
<li>
<b>Disconnect&nbsp;&nbsp;&nbsp;</b>Removes the data source name and authorization information from the connection.</li>
<li>
<b>Free connection&nbsp;&nbsp;&nbsp;</b>Drops the connection.</li>
<li>
<b>Free environment handle&nbsp;&nbsp;&nbsp;</b>Drops the global data and frees all associated memory.</li>
</ul>
<p>
By coding to the ODBC API, you can create database-independent code that automatically adapts to a variety of databases. However, there is one important consideration in adopting this approach. While any specific ODBC driver can leverage unique data source functions, the same functions might not be supported by other drivers. If your application is designed to be used across a variety of databases, these extended functions should be used carefully or not at all.</p>
</BODY>
</HTML>

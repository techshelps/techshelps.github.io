<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Sockets Interface</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"></HEAD><BODY BGCOLOR="#FFFFFF">
<H3 CLASS="h2">Windows Sockets Interface</H3><P CLASS="t">Windows Sockets is an API used for sending and receiving data on a network. Originally designed as the top-level interface for TCP/IP network transport stacks, the Windows Sockets API provides a standard Windows interface to many transports with different addressing schemes, including, for example, TCP/IP and IPX.</P>
<P CLASS="t">Windows Sockets specifies a programming interface based on the "socket" interface from the University of California at Berkeley. It includes a set of extensions designed to take advantage of the message-driven nature of Microsoft Windows. Windows Sockets is an open, industry-standard specification and Microsoft is one member of the group that originally defined Windows Sockets. </P>
<P CLASS="t">There are many Windows Sockets programs available. A number of the utilities that ship with Windows NT are Windows Sockets – based; for example, the DHCP client/server program.</P>
<P CLASS="t"><B>Note</B></P>
<P>Windows NT version 4.0 implements 32-bit Windows Sockets version 2.0. Earlier versions of Windows NT implemented 32-bit Windows Sockets version 1.1. See Appendix D, "Windows Sockets," for a list of Microsoft and other Internet sites from which you can receive Windows Sockets specifications.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Name and Address Resolution</H4><P CLASS="t">Windows Sockets programs generally use the gethostbyname() call to resolve a host name to an IP address. The gethostbyname() call uses the following (default) name lookup sequence:</P>
<P>    1.    Check local computer host name.</P>
<P>    2.    Check the HOSTS file for a matching name entry.</P>
<P>    3.    If a DNS server is configured, query it.</P>
<P>    4.    If no match is found, try the NetBIOS name resolution.</P>
<P CLASS="t">Some programs use the gethostbyaddr() call to resolve an IP address to a host name. The gethostbyaddr() call uses the following sequence:</P>
<P>1.    Check local computer host name.</P>
<P>2.    Check the HOSTS file for a matching address entry.</P>
<P>    3.    If a DNS server is configured, query it.</P>
<P>    4.    If no match is found, send a NetBIOS Adapter Status Request to the IP address being queried, and if it responds with a list of NetBIOS names registered for the adapter, parse it for the computer name.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Support for IP Multicasting</H4><P CLASS="t">The Windows Sockets API has been extended to provide support for IP multicasting. The extensions, and a sample program<FONT FACE="Symbol">,</FONT> <I>party.exe</I><FONT FACE="Symbol"><I>,</I></FONT> that illustrates usage, are available from <B>ftp.microsoft.com</B>. IP  multicasting is currently supported only on AF_INET sockets of type SOCK_DGRAM.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>The Backlog Parameter</H4><P CLASS="t">Windows Sockets server programs generally create a socket and then use <I>listen()</I> to listen on it for connection requests. One of the parameters passed when calling <I>listen()</I> is the <I>backlog</I> of connection requests that the program would like Windows Sockets to queue for it. </P>
<P CLASS="t">Windows NT Server version 4.0 allows a backlog maximum of 200. Windows&nbsp;NT Workstation version 4.0 supports only a maximum allowable value of 5. </P>
<P CLASS="t"><B>Note</B></P>
<P>Earlier versions of Windows NT based on the Windows Sockets 1.1 specification used the specified maximum allowable value (5) for <I>backlog</I>.</P>
<P CLASS="t">FTP or Web servers that are heavily used may benefit from increasing the backlog to a larger number than the default. Microsoft Internet Information Server allows the backlog parameter to be specified by using a registry setting. </P>
<H4 CLASS="h3"><A NAME="sec3"></A>PUSH Bit Interpretation</H4><P CLASS="t">By default, Windows&nbsp;NT versions 4.0 and 3.5<I>x</I> complete a recv() call when:</P>
<UL><LI>Data arrives with the PUSH bit set.</LI><LI>The user recv() buffer is full.</LI><LI>0.5 seconds have elapsed since any data arrived.</LI></UL><P CLASS="t">If a client program is run on a computer with a TCP/IP implementation that does not set the PUSH bit on sends, response delays may result.  It's best to correct this on the client side; however, a configuration parameter (IgnorePushBitOnReceives) is added to Afd.sys to force it to treat all arriving packets as though the PUSH bit were set. </P></BODY></HTML>

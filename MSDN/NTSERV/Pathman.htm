<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATHMAN.EXE: PathMan</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>PATHMAN.EXE: PathMan</h1>
<p>
Windows NT&reg; Resource Kits</p>
<p>
Copyright © Microsoft Corp. 1995 - 1997</p>
<p>
Contents</p>
<p>
What is PathMan?</p>
<p>
What does PathMan do?</p>
<p>
Pathman syntax</p>
<p>
Pathman examples</p>
<p>
Path abnormalities</p>
<p>
Return value</p>
<p>
What does PathMan do?</p>
<p>
This command-line tool enables you to add or remove components of both the system and user paths. It can modify any number of paths in a single call and includes error checking that can handle path abnormalities such as repeated entries, adjacent semicolons, and missing entries.</p>
<p>
Windows NT manages two different types of paths; the current user's path and the system path. Windows NT keeps a separate user path for every user on a system, but there is only one global system path. When a user logs on to a Windows NT machine, these two paths are combined to create the user's full path. For backward compatibility, Windows NT also loads path information from old AUTOEXEC.BAT files left in the root directory.</p>
<p>
A non-administrative user can modify his or her own user path. But in order to modify the system path, the user of pathman must have Administrator privileges. Pathman does not manage information contained in old AUTOEXEC.BAT files.</p>
<p>
Pathman also broadcasts a message to all top-level windows notifying them that the environment has changed. This causes many applications (like the system shell) to update their environments, thereby obtaining the modified path.</p>
<p>
PathMan syntax</p>
<p>
Pathman accepts four command line arguments:</p>
<p>
<b>/as <i>path</i>[;<i>path</i>[;<i>path</i> ...]]</b></p>
<p>
Adds the semicolon-separated paths to the <i>system</i> path</p>
<p>
<b>/au <i>path</i>[;<i>path</i>[;<i>path</i> ...]]</b></p>
<p>
Adds the semicolon-separated paths to the <i>user</i> path</p>
<p>
<b>/rs <i>path</i>[;<i>path</i>[;<i>path</i> ...]]</b></p>
<p>
Removes the semicolon-separated paths from the <i>system</i> path</p>
<p>
<b>/ru <i>path</i>[;<i>path</i>[;<i>path</i> ...]]</b></p>
<p>
Removes the semicolon-separated paths from the <i>user</i> path</p>
<p>
The two add flags, <b>/as </b>and <b>/au</b>,<b> </b> will not add a path that already exists. The two remove flags, <b>/rs </b>and <b>/ru</b>,<b> </b>will do nothing if the path does not currently exist. </p>
<p>
Pathman can accept multiple arguments in a single call, each identified by one of the four command line flags (<b>/as</b>, <b>/au</b>, <b>/rs</b>, <b>/ru</b>). Each flag can be added in any order as many times as desired. For each argument, Pathman can accept any number of paths to modify (represented above by <b><i>path</i></b>). Each path must be separated by a semicolon.</p>
<p>
Once the path modifications have been made, Pathman broadcasts a message to all top-level windows notifying them that the environment has changed. This causes many applications (including the system shell) to update their environments, thereby obtaining the modified path.</p>
<h2>Pathman examples</h2>
<p>
Example 1</p>
<p>
<b>pathman /au c:\temp;c:\users\name;d:\utils</b></p>
<p>
In this example, the <b>/au</b> flag tells Pathman that the next set of semicolon separated paths should be added to the current user's path. All three paths (<b>c:\temp</b>, <b>c:\users\name</b>, and <b>d:\utils</b>) will be added to the user's path if they do not already exist.</p>
<p>
Example 2</p>
<p>
<b>pathman /au c:\temp;c:\users\name;d:\utils /ru d:\data /as d:\data;c:\reskit</b></p>
<p>
Aside from the additions to the current user's path, <b>d:\data</b> is removed form the current user's path and both <b>d:\data</b> and <b>c:\reskit</b> are added to the system path. Pathman can accept any number of path modifications this way.</p>
<p>
Example 3</p>
<p>
<b>pathman  /au c:\temp;c:\app\bin  /rs %systemroot%  /au c:\app2\bin</b></p>
<p>
This command adds (<b>c:\temp</b>, <b>c:\app\bin</b>, and <b>c:\app2\bin</b>) to the user path and removes (<b>%systemroot%</b>) from the system path.</p>
<h2>Path abnormalities</h2>
<p>
Pathman can handle many path abnormalities. These include:</p>
<ul>
<li>
Additional leading semicolons<br><br></li>
<li>
Additional trailing semicolons<br><br></li>
<li>
Multiple consecutive semicolons<br><br></li>
<li>
Double path additions using <b>/au</b> or <b>/as</b><br><br></li>
<li>
Double path removal using <b>/ru</b> or <b>/rs</b><br><br></li>
<li>
Addition and removal of the same path (results in removal)<br><br></li>
<li>
Addition of an already existing paths<br><br></li>
<li>
Removal of a non-existing paths<p>
Pathman does not check the validity of new paths, however.
</li>
</ul>
<h2>Return value</h2>
<p>
Pathman's return value is complicated, because the utility needs to return a lot of information in a single 32-bit value. In order to return status information for each of the four possible flags (<b>/as</b> <b>/au</b> <b>/rs</b> <b>/ru</b>) it accepts as arguments, Pathman treats the return value as four separate 8-bit bytes instead of one 32-bit integer. Each of the four bytes in the return value indicates what action was taken with respect to each of the four flags accepted by Pathman. The return value (wwxxyyzz) is broken down as follows:</p>
<p>
<b>byte</b></p>
<p>
<u>4</u>    <u>3</u>    <u>2</u>   <u>1 </u></p>
<p>
ww  xx  yy  zz </p>
<p>
byte 4 (ww)system path additions</p>
<p>
byte 3(xx)user path additions</p>
<p>
byte 2 (yy)system path removals</p>
<p>
byte 1 (zz)user path removals</p>
<p>
Each byte in the return code can have a value of:</p>
<p>
0No changes were made.</p>
<p>
1At least one change was made.</p>
<p>
2An error occurred. No changes were made.</p>
<p>
In Example 1:</p>
<p>
<b>pathman /au c:\temp;c:\users\name;d:\utils</b></p>
<p>
if we assume that there were no errors and at least one of the paths was added to the user's path, we get a return value of (in hex followed by decimal in parentheses) :</p>
<p>
0x00010000(65536)</p>
<p>
In Example 2:</p>
<p>
<b>pathman /au c:\temp;c:\users\name;d:\utils /ru d:\data /as d:\data;c:\reskit</b></p>
<p>
if we again assume that everything worked, we get a return value of:</p>
<p>
0x01010001( 16842753)</p>
<p>
If the user did not have Administrator privileges, the return value would have been:</p>
<p>
0x02010001( 33619969)</p>
<p>
If Pathman is called with invalid parameters, the return value is all errors:</p>
<p>
0x02020202(33686018)</p>

</FONT>
</BODY>
</HTML>

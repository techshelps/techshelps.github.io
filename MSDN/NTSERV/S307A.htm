<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Boundary Layers</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"></HEAD><BODY BGCOLOR="#FFFFFF">
<H3 CLASS="h2">Boundary Layers</H3><P CLASS="t">A <I>boundary</I> is the unified interface between the functional layers in the Windows&nbsp;NT network architecture model. Creating boundaries as breakpoints in the network layers helps open the system to outside development, making it easier for outside vendors to develop network drivers and services. Because the functionality that must be implemented between the layers is well defined, developers need to program only between the boundary layers instead of going from the top to the bottom. Boundary layers also enable software developed above and below a level to be integrated without rewriting. </P>
<P CLASS="t">There are two significant boundary layers in the Windows&nbsp;NT operating system network architecture: the Network Driver Interface Specification (NDIS) 3.0 boundary layer and TDI boundary layer. </P>
<P CLASS="t">The NDIS 3.0 boundary layer provides the interface to the NDIS wrapper and device drivers. </P>
<P><img src="XNG_A14.gif"></P>
<P CLASS="cap"><B>Figure 1.10    Windows&nbsp;NT boundary layers</B></P>
<H4 CLASS="h3"><A NAME="sec0"></A>Transport Driver Interface </H4><P CLASS="t">TDI is a common interface for a driver (such as the Windows&nbsp;NT redirector and server) to communicate with the various network transports. This allows redirectors and servers to remain independent of transports. Unlike NDIS, there is no driver for TDI; it is simply a standard for passing messages between two layers in the network architecture.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Network Driver Interface Specification 3.0</H4><P CLASS="t">In 1989, Microsoft and 3Com jointly developed a specification defining an interface for communication between the MAC sublayer and protocol drivers higher in the OSI model. Network Driver Interface Specification (NDIS) is a standard that allows multiple network adapters and multiple protocols to coexist. NDIS permits the high-level protocol components to be independent of the network interface card by providing a standard interface. The network interface card driver is at the bottom of the network architecture. Because the Windows&nbsp;NT network architecture supports NDIS 3.0, it requires that network adapter-card drivers be written to the NDIS 3.0 specification. NDIS 3.0 allows an unlimited number of network adapter cards in a computer and an unlimited number of protocols that can be bound to a single adapter card.</P>
<P CLASS="t">In Windows&nbsp;NT, NDIS has been implemented in a module called Ndis.sys, which is referred to as the NDIS wrapper.</P>
<P CLASS="t">The NDIS wrapper is a small piece of code surrounding all of the NDIS device drivers. The wrapper provides a uniform interface between protocol drivers and NDIS device drivers, and contains supporting routines that making it easier to develop an NDIS driver.</P>
<P><img src="XNG_A15.gif"></P>
<P CLASS="cap"><B>Figure 1.11    NDIS Wrapper</B></P>
<P CLASS="t">Previous implementations of NDIS required a protocol manager (PROTMAN) to control access to the network adapter. The primary function of PROTMAN was to control the settings on the network adapter and the bindings to specific protocol stacks. The Windows&nbsp;NT operating system networking architecture does not need a PROTMAN module because adapter settings and bindings are stored in the registry and configured using Control Panel. </P>
<P CLASS="t">Because the NDIS wrapper controls the way protocols communicate with the network adapter card, the protocols communicate with the NDIS wrapper rather than with the network adapter card itself. This is an example of the modularity of the layered model. The network adapter card is independent from the protocols; therefore, a change in protocols does not require changing settings for the network adapter card.</P></BODY></HTML>

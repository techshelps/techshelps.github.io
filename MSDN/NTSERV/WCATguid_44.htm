<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying the Controller Input Files</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3>Modifying the Controller Input Files</h3>
<p>
The controller input files include the configuration, script, and distribution files and the optional performance counters file. (For information about creating and using the optional performance counters file, see &ldquo;Writing a WCAT Performance Counter Input File,&rdquo; earlier in this guide.) </p>
<p>
To create a custom test, you can either edit one of the prepared tests or create new controller input files. The changes you make to the input files can change test conditions, the content pages that clients request, and the frequency at which pages are requested. The general procedure is as follows:</p>
<p>
1.Edit a sample configuration file, or write a new configuration file, to change the variables that define the number of client computers, the number of threads per client, the duration of the test, or any combination of these conditions. (Keep in mind you can override any of these variables at test time by using <b>run</b> command-line options.)</p>
<p>
2.Edit a prepared test script file, or write a new script file, to identify a new set of content pages for virtual clients to request from the server.</p>
<p>
3.Edit a prepared test distribution file, or write a new file, to specify the frequency at which clients request the pages identified in the script file.</p>
<p>
You can use any word processor or text editor to edit the controller input files.</p>
<h4></h4>

<h4>Modifying the Configuration File</h4>
<p>
The configuration file is located on the controller. After the Wcctl.exe program is started, it reads the configuration file to determine how many clients are included in the test and what test instructions to send to the clients. The client instructions that you can change in the configuration file are described in the following table. </p>
<p>
<b>Table 9    Test Parameters in the Configuration File</b></p>
<table cols=1>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=120><b>Parameter name</b></td>
<td width=172><b>Description</b></td>
<td width=172><b>Action you can perform</b></td>
</tr>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=120><i>Thinktime</i></td>
<td width=172>Value that determines the time interval between client requests sent to the server.</td>
<td width=172>Increase or decrease this value to change this time interval.</td>
</tr>
<tr valign=top>
<td width=120><i>MaxRevBuffer</i></td>
<td width=172>Size of the client buffer. The default value is 64K. The controller sends this information to the client computers.</td>
<td width=172>Increase this value to increase the size of the client buffer. This value can be increased to a maximum number of 128K. (WCAT sets no limit. However, a large <i>MaxRevBuffer </i>value means more memory is consumed on the client; a small value means that the client might be slow.) Increasing the client buffer size is recommended when testing a server program that contains large amounts of data.</td>
</tr>
<tr valign=top>
<td width=120><i>CooldownTime</i></td>
<td width=172>End of test time interval, which is excluded from test results to eliminate the effects of processing completion from the test results. The controller sends this information to the client computers.</td>
<td width=172>Increase or decrease this value to change the amount of time the client can use to complete all processing and data collection. Changing this variable increases or decreases the total test time.</td>
</tr>
<tr valign=top>
<td width=120><i>WarmupTime</i></td>
<td width=172>Start of test time interval, which is excluded from test results to minimize the effect of time spent starting the clients and server on test results. The controller sends this information to the client computers.</td>
<td width=172>Increase or decrease this value to change the amount of time allowed for client and server startup. Changing this variable increases or decreases the total test time.</td>
</tr>
</table><br>
<p>
<b>Table 9    Test Parameters in the Configuration File <i>(Continued)</i></b></p>
<table cols=1>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=120><b>Parameter name</b></td>
<td width=172><b>Description</b></td>
<td width=172><b>Action you can perform</b></td>
</tr>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=120><i>NumClientMachines</i></td>
<td width=172>Number of client computers used in the test. The default value is 1. </td>
<td width=172>Increase or decrease this number to change the number of clients the controller accepts as participants in the test.</td>
</tr>
<tr valign=top>
<td width=120><i>NumClientThreads</i></td>
<td width=172>Number of virtual client sessions run on a single client computer. The default value is 1. The controller sends this information to the client computers.</td>
<td width=172>Increase or decrease this value to include multiple virtual clients. The maximum value is 100. The recommended value is as many clients as you can run on the client computer before it becomes CPU saturated; experiment and find the optimal value for your system.</td>
</tr>
<tr valign=top>
<td width=120><i>Duration</i></td>
<td width=172>Time value that describes how long the test should run, in seconds. The controller sends this information to the client computers.</td>
<td width=172>Increase or decrease this value to change the test time period. Note that the cooldown time and warmup time are not included in this value. Thus, total test time equals the column values <i>CooldownTime</i> + <i>Duration </i>+ <i>WarmupTime</i>.</td>
</tr>
</table><br>
<h4>Modifying the Script File</h4>
<p>
Each prepared test uses a script file that defines the client and server transactions performed during the experimental period. After the controller is started and connected to the test clients, the controller program reads the script file and sends instructions to each client. These instructions describe the content requests the clients are to send to the server during the experimental period. </p>
<p>
Following is a sample script file.</p>
# ######################################################################
#
#    Test script file for WCAT
#
# ######################################################################
# Format of Script Specification:
#
#  ClassId      Operation       Files
#  Note: Operation Strings are case insensitive
#
#  Reserved Ids
#  Class Ids 1-10    are reserved for fixed file size classes
#  Class Ids 101-110 are reserved for CGI scripts
#  Class Ids 201-210 are reserved for ISAPI scripts
#  Class Ids 301-310 are reserved for Post Operation
#  Class Id  0  is reserved for special purposes
#
#  Class Id Range               Recommended Usage
#   1-100                             File transfers
#   101-200                           CGI  Requests
#   201-300                           ISAPI  Requests
#   301-400                           Post Requests
# 

# Plaza Welcome page =&gt; 
NEW TRANSACTION
    classId = 1
    NEW REQUEST HTTP
        Verb = &ldquo;GET&rdquo;
        URL = &ldquo;/scripts/welcome.py&rdquo;

# Click Repeat Shopper =&gt; Plaza Lobby 
NEW TRANSACTION
    classId = 2
    NEW REQUEST HTTP
        Verb = &ldquo;GET&rdquo;
        URL = &ldquo;/prd.i/pgen/plaza/JQ04Q9JF66SH2JS700Q79TREBNBGAU1M/plaza1.html&rdquo;
# Click AG =&gt; AG Lobby 
NEW TRANSACTION
    classId = 3
    NEW REQUEST HTTP
        Verb = &ldquo;GET&rdquo;
        URL = &ldquo;/prd.i/pgen/ag/JQ04Q9JF66SH2JS700Q79TREBNBGAU1M/lobby.html&rdquo;
# Click Big Picture
NEW TRANSACTION
    classId = 4
    NEW REQUEST HTTP
        Verb = &ldquo;GET&rdquo;
        URL = &ldquo;/prd.i/pgen/ag/JQ04Q9JF66SH2JS700Q79TREBNBGAU1M/ag_bigpicture.html&rdquo;
</code>
<p>
Note that the script file begins with comments that recommend a class numbering system for different types of client-server transactions. Following the comment lines are sample transactions. When you create your own script file, use the recommended class identification numbering to identify your transactions. The class identifiers are used to group together similar transactions in the class statistics section of the controller log file. For more information on this log file section, see &ldquo;Class Statistics Section,&rdquo; earlier in this guide.</p>
<p>
There are four types of program statements you can use in a script file to define new transactions. These are:</p>
<p>
<font face="Symbol">&#183;</font> Global commands</p>
<p>
<font face="Symbol">&#183;</font> Transaction commands</p>
<p>
<font face="Symbol">&#183;</font> HTTP request commands</p>
<p>
<font face="Symbol">&#183;</font> ClearCookie request commands</p>
<p>
These commands are described in the following sections.</p>
<h4>Global Commands </h4>
<p>
The following global commands can be used anywhere in the script file.</p>
set &lt;default_variable&gt; = &lt;value&gt;
&lt;default_variable&gt; := ClassId | Server | Verb | URL | Cookie | Port | ResponseStatusCode |KeepAlive | Authentication
&lt;value&gt; = &lt;BOOLValue&gt; | &lt;DWORDValue&gt; | &lt;StringValue&gt; | &lt;WORDValue&gt;
&lt;BOOLValue&gt; = TRUE | FALSE
&lt;DWORDValue&gt; = decimal number &lt; 4,294,967,296
&lt;FileOrStringValue&gt; = &lt;FileValue&gt; | &lt;StringValue&gt;
&lt;FileValue&gt; = FILE &lt;StringValue&gt;
&lt;StringValue&gt; = quoted string. \r, \n, \t, and \\ are special escape sequences for carriage return, line feed, tab, and '\'.
&lt;WORDValue&gt; = decimal number &lt; 65,536
ClassId, ResponseStatusCode, and Authentication are DWORDValues.
Server, Verb, URL, and Cookie are StringValues.
Port is a WORDValue.
KeepAlive is a BOOLValue.
NEW TRANSACTION
</code>
<h4>Transaction Commands</h4>
<p>
These following commands are used to define a client-server transaction. The commands must be preceded by a <b>NEW TRANSACTION </b>statement, which signifies a new transaction. You must use the <b>NEW TRANSACTION </b>statement for each transaction you define. </p>

<p>
<b>Table 10    Transaction Commands</b></p>
<table cols=1>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><b>Command</b></td>
<td width=240><b>Description</b></td>
</tr>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><i>ClassId </i><b>=</b> <i>DWORDValue</i></td>
<td width=240>Required. <i>ClassId</i> is the class identifier for the transaction. It is used in the distribution file to specify the distribution (that is, the pattern and frequency of requests) for this transaction. The recommended value ranges for a <i>ClassId </i>are 1 through100 for file transfer transactions, 101 through 201 for CGI transactions, 201 through 300 for ISAPI transactions, and 301 through 400 for post transactions, a type of HTTP request. </td>
</tr>
<tr valign=top>
<td width=224><i>Server </i><b>=</b> <i>StringValue</i></td>
<td width=240><i>Server </i>is either the NetBIOS name, DNS host name, or IP address of the server included in the transaction. Note that you can run a WCAT test with multiple servers. </td>
</tr>
<tr valign=top>
<td width=224><b>NEW REQUEST HTTP</b></td>
<td width=240>This command starts a new HTTP request. For more information on HTTP requests, see the next section.</td>
</tr>
<tr valign=top>
<td width=224><b>NEW REQUEST CLEAR_COOKIE</b></td>
<td width=240>This command starts a new CLEAR_COOKIE request. For more information on ClearCookie requests, see the &ldquo;ClearCookie Request Commands&rdquo; section, following.</td>
</tr>
</table><br>
<h4>HTTP Request Commands</h4>
<p>
The following commands are used to define a HTTP request. These commands must be preceded by a <b>NEW REQUEST HTTP </b>statement, and you must use the <b>NEW REQUEST HTTP </b>statement for each HTTP request you define in the script file.</p>

<p>
<b>Table 11    HTTP Request Commands</b></p>
<table cols=1>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><b>Command</b></td>
<td width=240><b>Description</b></td>
</tr>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><i>Cookie </i><b>= </b><i>StringValue</i></td>
<td width=240>Specifies the cookie name to use. Any cookie sent back to the client as a result of this request is stored in this name. This request includes the cookie to be stored in this name.</td>
</tr>
<tr valign=top>
<td width=224><i>Verb </i><b>= </b><i>StringValue</i></td>
<td width=240>Specifies the verb to use for this request. Common verbs are GET, POST, and HEAD.</td>
</tr>
<tr valign=top>
<td width=224><i>URL </i><b>= </b><i>StringValue</i></td>
<td width=240>Specifies the URL to use for this request, for example <code>/perfsize/file1k.txt</code></td>
</tr>
<tr valign=top>
<td width=224><i>KeepAlive </i><b>= </b><i>BOOLValue</i></td>
<td width=240>Specifies the client should use the &ldquo;Connection: keep-alive&rdquo; protocol.Doing so keeps the TCP/IP connection open between the client and the server between requests. This option should not be used in conjunction with the SSL protocol.</td>
</tr>
<tr valign=top>
<td width=224><i>SSL </i><b>= </b><i>BOOLValue</i></td>
<td width=240>Specifies the client should use the SSL encryption protocol for this request.</td>
</tr>
<tr valign=top>
<td width=224><i>ResponseStatusCode </i><b>= </b><i>DWORDValue</i></td>
<td width=240>Specifies the expected response code for this request. For most requests, this code is 200.</td>
</tr>
<tr valign=top>
<td width=224><i>Port </i><b>= </b><i>WORDValue</i></td>
<td width=240>Specifies the port for the TCP/IP connection for this request. For most requests, the port is 80.</td>
</tr>
<tr valign=top>
<td width=224><i>UserName </i><b>= </b><i>StringValue</i></td>
<td width=240>Specifies the user name for basic authentication.</td>
</tr>
<tr valign=top>
<td width=224><i>Password </i><b>= </b><i>StringValue</i></td>
<td width=240>Specifies the password for basic authentication.</td>
</tr>
<tr valign=top>
<td width=224><i>RequestHeader </i><b>= </b><i>StringValue</i></td>
<td width=240>Request headers are cumulative over a request. In other words, if you have multiple <i>RequestHeader </i>statements in the same HTTP request, they are all sent.</td>
</tr>
<tr valign=top>
<td width=224><i>ResponseHeader </i><b>= </b><i>StringValue</i></td>
<td width=240>Response headers are cumulative over a request. In other words, if you have multiple <i>ResponseHeader </i>statements in the same HTTP request, WCAT looks for all these headers in the response. If you have multiple response headers in the same <i>ResponseHeader </i>statement, they must be returned in the given order to pass the response comparison test.</td>
</tr>
</table><br>
<p>
<b>Table 11    HTTP Request Commands <i>(Continued)</i></b></p>
<table cols=1>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><b>Command</b></td>
<td width=240><b>Description</b></td>
</tr>
<tr valign=top>
<td width=464></td>
</tr>
<tr valign=top>
<td width=224><i>Authentication </i><b>= </b>&lt;<i>DWORDValue</i>&gt;</td>
<td width=240>For <i>Authentication</i>, <b>0</b> means anonymous and is the default; <b>1</b> means basic authentication.</td>
</tr>
<tr valign=top>
<td width=224><i>SaveResponseFile </i><b>= </b><i>StringValue</i></td>
<td width=240>The server&rsquo;s response to the current request is saved on the client under the filename given<i>. </i>This command is provided to make creating a <i>ResponseData </i>file easier. For more information on <i>ResponseData, </i>see the following.</td>
</tr>
<tr valign=top>
<td width=224><i>ResponseData </i><b>= </b><i>FileOrStringValue</i></td>
<td width=240>Specifies<i> </i>the data the server should return in response to the current request. This data can be specified either as a quoted string or as a filename. If the latter, the file is read and transmitted to the client for comparison. Use a file if the data is large or contains nonprinting characters.</td>
</tr>
<tr valign=top>
<td width=224><i>RequestData </i><b>= </b><i>FileOrStringValue</i></td>
<td width=240>Specifies data to send to the server with this request. This option is generally used for POST requests. </td>
</tr>
</table><br>
<h4>ClearCookie Request Commands</h4>
<p>
A ClearCookie request command deletes a cookie name. The old name for the cookie is wiped out. This command must be preceded by a <b>NEW REQUEST CLEAR_COOKIE </b>statement, and you must use the <b>NEW REQUEST CLEAR_COOKIE </b>statement for each ClearCookie request you define. </p>
<p>
Command syntax is as follows</p>
<p>
<i>Cookie </i>= <i>StringValue</i></p>
<p>
where <i>StringValue </i>is the cookie name to be deleted.</p>
<h4>Modifying the Distribution File</h4>
<p>
Each modified or new script requires a modified or new distribution file. The distribution file is used by the controller and the client computers to assign a percentage of total test time to each transaction. The controller also uses this file to calculate test results and write them to the log file.</p>
<p>
The distribution file lists each of the transactions in the script file by using the class identifier assigned to the transaction. Each listed transaction is assigned a distribution value. The distribution value identifies the portion (percentage) of the experimental period during which each transaction is performed. </p>
<p>
A sample distribution file is illustrated following.</p>
# ######################################################################
#
#    Test WCAT Distribution File
#
#   This file specifies the distributions that 
#    can be applied to the script file
# ######################################################################

#
# Format of Script Specification:
#
#  ClassId      Distribution Factor(0 to 100)
#
#   Sum of all distribution factors should be strictly 100 and 
#    each factor can have only a single digit after the decimal point.
#
#First column is class number. Second value is percentage of test time.
1 10.5
29.5
310
470
</code>
<p>
To create a custom distribution file, you must list each transaction using the class identifier and provide a corresponding distribution value.</p>

</FONT>
</BODY>
</HTML>

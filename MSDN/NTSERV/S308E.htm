<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Network Resource Access</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"></HEAD><BODY BGCOLOR="#FFFFFF">
<H3 CLASS="h2">Network Resource Access </H3><P CLASS="t">Applications reside above the redirector and server services in user mode. Like all other layers in the Windows&nbsp;NT networking architecture, there is a unified interface for accessing network resources, which is independent of any redirectors installed on the system. Access to resources is provided through one of two components: the Multiple Universal Naming Convention Provider (MUP) and the Multi-Provider Router (MPR).</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Multiple Universal Naming Convention Provider </H4><P CLASS="t">When applications make I/O calls containing Universal Naming Code (UNC) names, these requests are passed to the Multiple Universal Naming Convention Provider (MUP). MUP selects the appropriate UNC provider (redirector) to handle the I/O request. </P>
<H5 CLASS="h4"><A NAME="sec1"></A>Universal Naming Convention Names</H5><P CLASS="t">UNC is a naming convention for describing network servers and the share points on those servers. UNC names start with two backslashes followed by the server name. All other fields in the name are separated by a single backslash. A typical UNC name would appear as: \\server\share\subdirectory\filename. </P>
<P CLASS="t">Not all of the components of the UNC name need to be present with each command; only the share component is required. For example, the command <B>dir</B><I>\\servername\sharename</I> can be used to obtain a directory listing of the root of the specified share.</P>
<H5 CLASS="h4"><A NAME="sec2"></A>Why MUP?</H5><P CLASS="t">One of the design goals of the Windows&nbsp;NT networking environment is to provide a platform upon which others can build. MUP is a vital part of allowing multiple redirectors to coexist in the computer. MUP frees applications from maintaining their own UNC-provider listings. </P>
<H5 CLASS="h4"><A NAME="sec3"></A>How MUP Works</H5><P CLASS="t">MUP is actually a driver, unlike the TDI interface, which merely defines the way a component on one layer communicates with a component on another layer. MUP also has defined paths to UNC providers (redirectors). </P>
<P CLASS="t">I/O requests from applications that contain UNC names are received by the I/O Manager, which in turn passes the requests to MUP. If MUP has not seen the UNC name during the previous 15 minutes, MUP will send the name to each of the UNC providers registered with it. MUP is a prerequisite of the Workstation service. </P>
<P><img src="XNG_A25.gif"></P>
<P CLASS="cap"><B>Figure 1.18    Multiple Universal Naming Convention Provider</B></P>
<P CLASS="t">When a request containing a UNC name is received by MUP, it checks with each redirector to find out which one can process the request. MUP looks for the redirector with the highest registered-priority response that claims it can establish a connection to the UNC. This connection remains as long as there is activity. If there has been no request for 15 minutes on the UNC name, then MUP once again negotiates to find an appropriate redirector.</P>
<H4 CLASS="h3"><A NAME="sec4"></A>Multi-provider Router</H4><P CLASS="t">Not all programs use UNC names in their I/O requests. Some applications use WNet APIs, which are the Win32 network APIs. The Multi-Provider Router (MPR) was created to support these applications. </P>
<P CLASS="t">MPR is similar to MUP. MPR receives WNet commands, determines the appropriate redirector, and passes the command to that redirector. Because different network vendors use different interfaces for communicating with their redirector, there is a series of provider DLLs between MPR and the redirectors. The provider DLLs expose a standard interface so that MPR can communicate with them. The DLLs "know" how to take the request from MPR and communicate it to their corresponding redirector. </P>
<P><img src="XNG_A26.gif"></P>
<P CLASS="cap"><B>Figure 1.19    Multi-provider Router</B></P>
<P CLASS="t">The provider DLLs are supplied by the network-redirector vendor and should automatically be installed when the redirector is installed.</P></BODY></HTML>

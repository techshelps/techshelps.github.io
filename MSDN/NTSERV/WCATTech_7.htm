<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controller Behavior</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h4>Controller Behavior</h4>
The actions of the Web Capacity Analysis Tool Controller during a test are summarized in the following list and then described in the paragraphs that follow. 
During a test, the Web Capacity Analysis Tool Controller performs the following actions, in the order presented:
<ol>
<li>
Parse command line input<br><br></li>
<li>
Parse configuration, script and distribution files<br><br></li>
<li>
Allow specified number of clients to connect<br><br></li>
<li>
Send the clients the parsed information<br><br></li>
<li>
Begin collecting performance counter information (if specified)<br><br></li>
<li>
Wait for specified duration<br><br></li>
<li>
Stop collecting performance counter information<br><br></li>
<li>
Collect client results<br><br></li>
<li>
Summarize client results and performance counter information into the log file.</li>
</ol></p>
<p>The controller parses the configuration, script, and distribution files and constructs the messages for client. It then creates a listen socket and waits on the Web Capacity Analysis Tool controller port. Clients connect to the socket one after another. 
The controller sends messages to clients after all of the clients are connected. First, it sends the configuration message, then the script header message, followed by a list of script page messages, one for each page. Clients start the performance run when they receive the complete set of messages. 
Most tests include a warm-up and a cool-down period. The clients do not make any measurements during these periods, but attempt to bring the server to full load. Also, these periods blank out the time when there is some net traffic between controller and clients. 
During the steady state between the warm-up and cool-down periods, the clients run for the specified duration of the test and take measurements. At the end of the cool-down period, the clients summarize data from each individual thread and send a statistics message back to the controller. After all the clients have reported back the statistics, the controller sums all data and summarizes both individual and summed results to a log file (.log).
Optionally, users can specify a list of performance counters to monitor on the  server during the test. The controller samples the specified counters at 10-second intervals and writes the sampled values to a separate performance counter log file (.prf). 
After parsing command line arguments and input files, the controller starts the sampling thread. The controller stops sampling after receiving responses from all clients. The controller also averages the counters over the period between start of clients and before reception of any statistics and reports averaged value of each counter in the log file.</p>
<h3></h3>

</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POSIX Utilities</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>POSIX.DOC</h1>
<h1>Microsoft® Windows NT™ Resource Kit--POSIX Utilities</h1>
<p>
Windows NT&reg; Resource Kits</p>
<p>
Copyright © Microsoft Corp. 1985-1997</p>
<p>
This document contains important information about the POSIX utilities that is not included in the Windows NT Resource Kit online Help or printed documents.</p>
<h2>Using Write to View This Document</h2>
<p>
If you enlarge the Write window to its maximum size, this document will be easier to read. To do so, click the Maximize button in the upper-right corner of the window. Or open the Control menu in the upper-left corner of the Write window (press ALT+SPACEBAR), and then choose the Maximize command.</p>
<p>
To move through the document, press PAGE UP or PAGE DOWN or click the arrows at the top and bottom of the scroll bar along the right side of the Write window.</p>
<p>
To print the document, choose the Print command from the File menu.</p>
<p>
For Help on using Write, press F1.</p>
<p>
To read other online documents, choose the Open command from the File menu. </p>
<h2>Contents </h2>
<p>
This document contains information on these commands:</p>
<p>
<b>ar</b>, page 2</p>
<p>
<b>cat</b>, page 5</p>
<p>
<b>cc</b>, page 6</p>
<p>
<b>chmod</b>, page 21</p>
<p>
<b>cp</b>, page 24</p>
<p>
<b>find</b>, page 26</p>
<p>
<b>ln</b>, page 30</p>
<p>
<b>ls</b>, page 31</p>
<p>
<b>make</b>, page 34</p>
<p>
<b>mkdir</b>, page 42</p>
<p>
<b>mv</b>, page 43</p>
<p>
<b>rm</b>, page 44</p>
<p>
<b>rmdir</b>, page 45</p>
<p>
<b>sh</b>, page 46</p>
<p>
<b>touch</b>, page 58</p>
<p>
<b>wc</b>, page 59</p>
<p>
For more details about the <b>ar, cc, devsrv, find, ld, make, sh,  </b>and<b> vi </b>commands, see RKTOOLS.HLP in the Resource Kit program group.</p>
<h2>NAME</h2>
<p>
<b>ar</b> -- create and maintain library archives</p>
<h2>SYNOPSIS</h2>
ar -d<b>[</b>-Tv<b>]</b> archive file ...
ar -m<b>[</b>-Tv<b>]</b> archive file ...
ar -m<b>[</b>-abiTv<b>]</b> position archive file ...
ar -p<b>[</b>-Tv<b>]</b> archive <b>[</b>file ...<b>]</b>
ar -q<b>[</b>-cTv<b>]</b> archive file ...
ar -r<b>[</b>-cuTv<b>]</b> archive file ...
ar -r<b>[</b>-abciuTv<b>]</b> position archive file ...
ar -t<b>[</b>-Tv<b>]</b> archive <b>[</b>file ...<b>]</b>
ar -x<b>[</b>-ouTv<b>]</b> archive <b>[</b>file ...<b>]</b>
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>ar</i> utility creates and maintains groups of files combined into an archive.  Once an archive has been created, new files can be added and existing files can be extracted, deleted, or replaced.</p>
<p>
Files are named in the archive by a single component; for example, if a file referenced by a path containing a slash ("/") is archived, it will be named by the last component of that path.  When matching paths are listed on the command line against file names stored in the archive, only the last component of the path will be compared.</p>
<p>
All information and error messages use the path listed on the command line, if any was specified; otherwise the name in the archive is used.  If multiple files in the archive have the same name and paths are listed on the command line to "select" archive files for an operation, only the first file with a matching name will be selected.</p>
<p>
The normal use of are is for creating and maintaining libraries that are suitable for use with the loader (see <i>ld</i>) although it is not restricted to this purpose.  The options follow.</p>
<p>
<b>-a</b></p>
<p>
A positioning modifier used with the options <b>-r</b> and <b>-m</b>.  The files are entered or moved after the archive member position, which must be specified.</p>
<p>
<b>-b</b></p>
<p>
A positioning modifier used with the options <b>-r</b> and <b>-m</b>.  The files are entered or moved before the archive member <i>position</i>, which must be specified.</p>
<p>
<b>-c</b></p>
<p>
Whenever an archive is created, an information message to that effect is written to standard error.  If the <b>-c</b> option is specified, <i>ar</i> creates the archive silently.</p>
<p>
<b>-d</b></p>
<p>
Deletes the specified archive files.</p>
<p>
<b>-i</b></p>
<p>
A positioning modifier used with the options <b>-r</b> and <b>-m</b>.  The files are entered or moved <b>before</b> the archive member position, which must be specified.  (Identical to the <b>-b</b> option.)</p>
<p>
<b>-m</b></p>
<p>
Moves the specified archive files within the archive.  If one of the options <b>-a</b>, <b>-b</b>, or <b>-i</b> is specified, the files are moved before or after the <i>position</i> file in the archive.  If none of those options are specified, the files are moved to the end of the archive.</p>
<p>
<b>-o</b></p>
<p>
Sets the access and modification times of extracted files to the modification time of the file when it was entered into the archive.  This will fail if the user is not the owner of the extracted file or the superuser.</p>
<p>
<b>-p</b></p>
<p>
Writes the contents of the specified archive files to the standard output.  If no files are specified, the contents of all the files in the archive are written in the order they appear in the archive.</p>
<p>
<b>-q</b></p>
<p>
(Quickly) appends the specified files to the archive.  If the archive does not exist, a new archive file is created.  When creating a large archive piece-by-piece, this is much faster than the <b>-r</b> option, as no checking is done to see if the files already exist in the archive.</p>
<p>
<b>-r</b></p>
<p>
Replaces or adds the specified files to the archive.  If the archive does not exist, a new archive file is created.  Files that replace existing files do not change the order of the files within the archive.  New files are appended to the archive unless one of the options <b>-a</b>, <b>-b</b>, or <b>-i</b> is specified.</p>
<p>
<b>-T</b></p>
<p>
Selects and/or names archive members using only the first 15 characters of the archive member or command line file name.  The historic archive format had 16 bytes for the name, but some historic archiver and loader implementations were unable to handle names that used the entire space.  This means that file names that are not unique in their first 15 characters can subsequently be confused.  A warning message is printed to the standard error output if any file names are truncated. </p>
<p>
<b>-t</b></p>
<p>
Lists the specified files in the order in which they appear in the archive, each on a separate line.  If no files are specified, all files in the archive are listed.</p>
<p>
<b>-u</b></p>
<p>
Updates files.  When used with the <b>-r</b> option, files in the archive will be replaced only if the disk file has a newer modification time than the file in the archive.  When used with the <b>-x</b> option, files in the archive will be extracted only if the archive file has a newer modification time than the file on disk.</p>
<p>
<b>-v</b></p>
<p>
Provides verbose output.  When used with the <b>-d</b>, <b>-m</b>, <b>-q</b>, or <b>-x</b> options, <i>ar</i> gives a file-by-file description of the archive modification.  This description consists of three, white-space separated fields:  the option letter, a dash ("-"), and the file name.  When used with the <b>-r</b> option, <i>ar</i> displays the description as above, but the initial letter is an "a" if the file is added to the archive and an "r" if the file replaces a file already in the archive.</p>
<p>
When used with the <b>-p</b> option, the name of each printed file is written to the standard output before the contents of the file (preceded by a single newline character and followed by two newline characters, enclosed in less-than ("&lt;") and greater-than ("&gt;") characters).</p>
<p>
When used with the <b>-t</b> option, <i>ar</i> displays an "ls -l" style listing of information about the members of the archive.  This listing consists of eight, white-space separated fields:  the file permissions, the decimal user and group ID's separated by a single slash ("/"), the file size (in bytes), the file modification time (in the <i>date</i>(1) format "%b %e %H:%M %Y"), and the name of the file.</p>
<p>
<b>-x</b></p>
<p>
Extracts the specified archive members into the files named by the command line arguments.  If no members are specified, all the members of the archive are extracted into the current directory.</p>
<p>
If the file does not exist, it is created; if it does exist, the owner and group will be unchanged.  The file access and modification times are the time of the extraction (also see the <b>-o</b> option).  The file permissions will be set to those of the file when it was entered into the archive; this will fail if the user is not the owner of the extracted file or the superuser.</p>
<p>
The <i>ar</i> utility exits 0 on success, and &gt;0 if an error occurs.</p>
<h2>ENVIRONMENT</h2>
<p>
TMPDIR</p>
<p>
The pathname of the directory to use when creating temporary files.</p>
<h2>FILES</h2>
<p>
/tmp</p>
<p>
default temporary file directory</p>
<p>
ar.XXXXXX</p>
<p>
temporary file names</p>
<h2>COMPATIBILITY</h2>
<p>
By default, <i>ar</i> writes archives that may be incompatible with historic archives, as the format used for storing archive members with names longer than 15 characters has changed.  This implementation of <i>ar</i> is backward-compatible with previous versions of <i>ar</i> in that it can read and write (using the <b>-T</b> option) historic archives.  The <b>-T</b> option is provided for compatibility only and will be deleted in a future release.  </p>
<h2>STANDARDS</h2>
<p>
The <i>ar</i> utility is expected to offer a superset of the POSIX 1003.2 functionality.</p>
<h2>NAME</h2>
<p>
<b>cat</b> -- concatenate and print files</p>
<h2>SYNOPSIS</h2>
cat <b>[</b>-b<b>]</b> <b>[</b>-e<b>]</b> <b>[</b>-n<b>]</b> <b>[</b>-s<b>]</b> <b>[</b>-t<b>]</b> <b>[</b>-u<b>]</b> <b>[</b>-v<b>]</b> <b>[</b>file ...<b>]</b>
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>cat</i> utility reads files sequentially, writing them to the standard output.  The <i>file</i> operands are processed in command line order.  A single dash represents standard input.  The options follow.</p>
<p>
<b>-b</b></p>
<p>
Implies the <b>-n</b> option but does not number blank lines.</p>
<p>
<b>-e</b></p>
<p>
Implies the <b>-v</b> option, and displays a dollar sign ("$") at the end of each line as well.</p>
<p>
<b>-n</b></p>
<p>
Numbers the output lines, starting at 1.</p>
<p>
<b>-s</b></p>
<p>
Squeezes multiple adjacent empty lines, causing the output to be single-spaced.</p>
<p>
<b>-t</b></p>
<p>
Implies the <b>-v</b> option and displays tab characters as "^I" as well.</p>
<p>
<b>-u</b></p>
<p>
The <b>-u</b> option guarantees that the output is unbuffered.</p>
<p>
<b>-v</b></p>
<p>
Displays nonprinting characters so they are visible.  Control characters print line "^X" for control-X; the delete character (octal 0177) prints as "^?".  Non-ASCII characters (with the high bit set) are printed as "M-" (for meta) followed by the character for the low 7 bits.</p>
<p>
The <i>cat</i> utility exits 0 on success and &gt;0 if an error occurs.</p>
<h2>BUGS</h2>
<p>
Because of the shell language mechanism used to perform output redirection, the command</p>
cat file1 file2 &gt; file1
</code>
<p>
will cause the original data in file1 to be destroyed!</p>
<h2>HISTORY</h2>
<p>
A <i>cat</i> command appeared in Sixth Edition AT&amp;T UNIX.</p>
<h2>NAME</h2>
<p>
<b>cc</b> -- GNU project C Compiler</p>
<h2>SYNOPSIS</h2>
cc <b>[</b>options<b>]</b> file ...
</code>
<h2>DESCRIPTION</h2>
<p>
<i>cc</i> is a version of the GNU C compiler.  It accepts a dialect of ANSI C with extensions; this dialect is different from the dialect used in 4.3 BSD and earlier distributions.  The <b>-traditional</b> flag causes the compiler to accept a dialect of extended Classic C, much like the C of these earlier distributions.  If you are not already familiar with ANSI C and its new features, you will want to build your software with </p>
<p>
<b>-traditional</b>.</p>
<h2>DIFFERENCES</h2>
<p>
Most older C compiler flags are supported by <i>cc</i>.  Three that are not are <b>-go</b>, to generate symbol tables for the unsupported <i>sdb</i> debugger; <b>-f</b>, for single precision floating point in expressions (which is now the default); and <b>-t</b>, for alternate compiler passes.</p>
<p>
The differences between ANSI C and Classic C dialects are too numerous to describe here in detail.  The following quick summary is intended to make users aware of potential subtle problems when converting Classic C code to ANSI C.</p>
<p>
The most obvious change is the pervasive use of <i>function</i> <i>prototypes</i>.  Under the ANSI C dialect, the compiler checks number and type of arguments to C library functions when standard header files are included; calls that fail to match will yield errors.  A subtle consequence of adding prototype declarations is that user code which inadvertently redefines a C library function may break; for example it is no longer possible to write an <i>abort</i> function that takes different parameters or returns a different value from the standard <i>abort</i>, when including standard header files.</p>
<p>
Another issue with prototypes is that functions which take different parameter types no longer have the same type; function pointers now differ by parameter types as well as return types.  Variable argument lists are handled differently; the old <i>varargs</i>(3) package is obsolete; it was replaced by <i>stdarg</i>(3), which unfortunately is not completely compatible.  A subtle change in type promotion can be confusing:  small unsigned types are now widened into signed types rather than unsigned types.  A similar problem can occur with the <b>sizeof</b> operator, which now yields an unsigned type rather than a signed type.  One common problem is due to a change in scoping:  external declarations are now scoped to the block they occur in, so a declaration for (say) <b>errno</b> inside one block will no longer declare it in all subsequent blocks.  The syntax for braces in structure initializations is now a bit stricter, and it is sometimes necessary to add braces to please the compiler.</p>
<p>
Two very subtle and sometimes very annoying features apply to constant strings and to the <i>longjmp</i>(3) function.  Constant strings in the ANSI dialect are read-only; attempts to alter them cause protection violations.  This ANSI feature permits the compiler to coalesce identical strings in the same source file; and, since the read-only part of a binary is sharable, it saves space when multiple copies of a binary are running at the same time.  The most common difficulty with read-only strings lies with the use of the <b>mktemp</b> function, which in the past often altered a constant string argument.  It is now necessary to copy a constant string before it may be altered.  The <b>longjmp</b> function may now destroy any register <i>or</i> stack variable in the function that made the corresponding call to the <b>setjmp</b> function; to protect a local variable, the new ANSI <b>volatile</b> modifier must be used.  This often leads to confusing situations upon 'return' from <b>setjmp</b>.  The compiler has extended warning flags for dealing with read-only strings and <b>setjmp</b>, but these are not very effective.</p>
<p>
If your code has problems with any of these ANSI features, you will probably want to use <b>-traditional</b>.  Even with <b>-traditional</b>, there are some differences between this dialect of Classic C and the dialect supported on older distributions.</p>
<p>
There are at least two differences that are a consequence of the fact that <i>cc</i> uses an ANSI C style grammar for both traditional and ANSI modes.  The old C dialect permitted a typedef to replace a simple type in the idiom "unsigned <i>type</i>"; this <i>cc</i> treats such forms as syntax errors.  The old C dialect also permitted formal parameters to have the same names as typedef types; the current dialect does not.</p>
<p>
Some questionable or illegal practices that were supported in the old C dialect are not supported by </p>
<p>
<b>-traditional</b>:  noncomment text at the end of a "#include" preprocessor control line is an error, not ignored; compound assignment operators must not contain white space, <i>e</i>.<i>g</i>.  "* =" is not the same as "*="; the last member declaration in a structure or union must be terminated by a semicolon; it is not possible to "<b>switch</b>" on function pointers; more than one occurrence of "#else" at the same level in a preprocessor "#if" clause is an error, not ignored.</p>
<p>
Some truly ancient C practices are no longer supported.  The idiom of declaring an anonymous structure and using its members to extract fields from other structures or even nonstructures is illegal.  Integers are not automatically converted to pointers when they are dereferenced.  The <b>-traditional</b> dialect does not retain the so<b>-</b>called "old-fashioned" assignment operators (with the "=" preceding rather than following the operator) or initializations (with no "=" between initializer and initializee).</p>
<h2>WARNING</h2>
<p>
The rest of this topic is an extract of the documentation of the <i>GNU</i> <i>C</i> <i>compiler</i> and is limited to the meaning of the options.  <b>It is not kept up to date.</b>  If you want to be certain of the information below, check it in the manual "Using and Porting GCC".  Refer to the Info file <b>gcc.info</b> or the DVI file <b>gcc.dvi</b>, which are made from the Texinfo source file <b>gcc.texinfo</b>.</p>
<p>
The <i>GNU</i> <i>C</i> <i>compiler</i> uses a command syntax much like the UNIX C compiler.  The <i>cc</i> program accepts options and file names as operands.  Multiple single-letter options may <i>not</i> be grouped:  <b>-dr</b> is very different from <b>-d</b> <b>-r</b>.</p>
<p>
When you invoke GNU CC, it normally does preprocessing, compiling, assembly, and linking.  File names which end in <b>.c</b> are taken as C source to be preprocessed and compiled; file names ending in <b>.i</b> are taken as preprocessor output to be compiled; compiler output files plus any input files with names ending in <b>.s</b> are assembled; then the resulting object files, plus any other input files, are linked to produce an executable.</p>
<p>
Command options allow you to stop this process at an intermediate stage.  For example, the <b>-c</b> option says not to run the linker.  Then the output consists of object files output by the assembler.</p>
<p>
Other command options are passed on to one stage of processing.  Some options control the preprocessor and others the compiler itself.  Yet other options control the assembler and linker; these are not documented here, but you rarely need to use any of them.</p>
<h2>OPTIONS</h2>
<p>
Here are the options to control the overall compilation process, including those that say whether to link, whether to assemble, and so on.</p>
<p>
<b>-o</b> <i>file</i></p>
<p>
Places output in file <i>file</i>.  This applies regardless of whatever sort of output is being produced -- whether it is an executable file, an object file, an assembler file, or preprocessed C code.</p>
<p>
If <b>-o</b> is not specified, the default is to put an executable file in <b>a.out</b>, the object file <i>source</i><b>.c</b> in <i>source</i><b>.o</b>, an assembler file in <i>source</i><b>.s</b>, and preprocessed C on standard output.</p>
<p>
<b>-c</b></p>
<p>
Compiles or assembles the source files, but does not link.  Produces object files with names made by replacing <b>.c</b> or <b>.s</b> with <b>.o</b> at the end of the input file names.  Does nothing at all for object files specified as input.</p>
<p>
<b>-S</b></p>
<p>
Compiles into assembler code but does not assemble.  The assembler output file name is made by replacing <b>.c</b> with <b>.s</b> at the end of the input file name.  Does nothing at all for assembler source files or object files specified as input.</p>
<p>
<b>-E</b></p>
<p>
Runs only the C preprocessor.  Preprocess all the C source files specified and outputs the results to standard output.</p>
<p>
<b>-v</b></p>
<p>
Compiler driver program prints the commands it executes as it runs the preprocessor, compiler proper, assembler, and linker.  Some of these are directed to print their own version numbers.</p>
<p>
<b>-pipe</b></p>
<p>
Uses pipes rather than temporary files to communicate between the various stages of compilation.  This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble.</p>
<p>
<b>-B</b><i>prefix</i></p>
<p>
Compiler driver program tries <i>prefix</i> as a prefix for each program it tries to run.  These programs are <i>cpp</i>, <i>cc1</i>, <i>as</i>, and <i>ld</i>.</p>
<p>
For each subprogram to be run, the compiler driver first tries the <b>-B</b> prefix, if any.  If that name is not found, or if <b>-B</b> was not specified, the driver tries a standard prefix (which currently is <b>/usr/libexec/</b>).  If this does not result in a file name that is found, the unmodified program name is searched for using the directories specified in your <b>PATH</b> environment variable.</p>
<p>
You can get a similar result from the environment variable <b>GCC_EXEC_PREFIX</b>; if it is defined, its value is used as a prefix in the same way.  If both the <b>-B</b> option and the <b>GCC_EXEC_PREFIX </b>variable are present, the <b>-B</b> option is used first and the environment variable value is used second.</p>
<p>
<b>-b</b><i>prefix</i></p>
<p>
The argument <i>prefix</i> is used as a second prefix for the compiler executables and libraries.  This prefix is optional:  the compiler tries each file first with it, then without it.  This prefix follows the prefix specified with <b>-B</b> or the default prefixes.</p>
<p>
Thus, <b>-bvax- -Bcc/</b> in the presence of environment variable <b>GCC_EXEC_PREFIX</b> with definition <b>/u/foo/</b> causes GNU CC to try the following file names for the preprocessor executable.</p>
<b><code>cc/vax-cpp
cc/cpp
/u/foo/vax-cpp
/u/foo/cpp
/usr/libexec/vax-cpp
/usr/libexec/cpp
</code></b>
<p>
The following options control the details of C compilation itself.</p>
<p>
<b>-ansi</b></p>
<p>
Supports all ANSI standard C programs.</p>
<p>
This turns off certain features of GNU C that are incompatible with ANSI C, such as the <b>asm</b>, <b>inline</b>, and <b>typeof</b> keywords and predefined macros such as <b>unix</b> and <b>vax</b> that identify the type of system you are using.  It also enables the undesirable and rarely used ANSI trigraph feature.</p>
<p>
The alternate keywords <b>__asm__</b>, <b>__inline__</b>, and <b>__typeof__</b> continue to work despite <b>-ansi</b>.  You would not want to use them in an ANSI C program, of course; but it useful to put them in header files that might be included in compilations done with <b>-ansi</b>.  Alternate predefined macros such as <b>__unix__</b> and <b>__vax__</b> are also available, with or without <b>-ansi</b>.</p>
<p>
The <b>-ansi</b> option does not cause non-ANSI programs to be rejected gratuitously.  For that, </p>
<p>
<b>-pedantic</b> is required in addition to <b>-ansi</b>.</p>
<p>
The macro <b>__STRICT_ANSI__</b> is predefined when the <b>-ansi</b> option is used.  Some header files may notice this macro and refrain from declaring certain functions or defining certain macros that the ANSI standard does not call for; this is to avoid interfering with any programs that might use these names for other things.</p>
<p>
<b>-traditional</b></p>
<p>
Attempts to support some aspects of traditional C compilers.  Specifically:</p>
<p>
*   All <b>extern</b> declarations take effect globally even if they are written inside of a function definition.  This includes implicit declarations of functions.</p>
<p>
*   The keywords <b>typeof</b>, <b>inline</b>, <b>signed</b>, <b>const</b>, and <b>volatile</b> are not recognized.</p>
<p>
*   Comparisons between pointers and integers are always allowed.</p>
<p>
*   Integer types <b>unsigned</b> <b>short</b> and <b>unsigned</b> <b>char</b> promote to <b>unsigned</b> <b>int</b>.</p>
<p>
*   Out-of-range floating point literals are not an error.</p>
<p>
*   All automatic variables not declared <b>register</b> are preserved by <i>longjmp</i>(3C).  Ordinarily, GNU C follows ANSI C:  automatic variables not declared <b>volatile</b> may be clobbered.</p>
<p>
*   In the preprocessor, comments convert to nothing at all, rather than to a space.  This allows traditional token concatenation.</p>
<p>
*   In the preprocessor, macro arguments are recognized within string constants in a macro definition (and their values are stringified, though without additional quote marks, when they appear in such a context).  The preprocessor always considers a string constant to end at a newline.</p>
<p>
*   The predefined macro <b>__STDC__</b> is not defined when you use <b>-traditional</b>, but <b>__GNUC__</b> is (since the GNU extensions which <b>__GNUC__</b> indicates are not affected by <b>-traditional</b>).  If you need to write header files that work differently (depending upon whether <b>-traditional</b> is in use) you can distinguish four situations by testing both of these predefined macros:  GNU C, traditional GNU C, other ANSI C compilers, and other old C compilers.</p>
<p>
<b>-O</b></p>
<p>
Optimizes.  Optimizing compilation takes somewhat more time and a lot more memory for a large function.</p>
<p>
Without <b>-O</b>, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results.  Statements are independent--if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.</p>
<p>
Without <b>-O</b>, only variables declared <b>register</b> are allocated in registers.  The resulting compiled code is a little worse than produced by PCC without <b>-O</b>.</p>
<p>
With <b>-O</b>, the compiler tries to reduce code size and execution time.</p>
<p>
Some of the <b>-f</b> options described below turn specific kinds of optimization on or off.</p>
<p>
<b>-g</b></p>
<p>
Produces debugging information in the operating system's native format (for <i>dbx</i> or <i>sdb</i>).  <i>gdb</i> also can work with this debugging information.</p>
<p>
Unlike most other C compilers, GNU CC allows you to use <b>-g</b> with <b>-O</b>.  The shortcuts taken by optimized code may occasionally produce surprising results--some variables you declared may not exist at all; flow of control may briefly move where you did not expect it; some statements may not be executed because they compute constant results or their values were already at hand; some statements may execute in different places because they were moved out of loops.  Nevertheless, it proves possible to debug optimized output.  This makes it reasonable to use the optimizer for programs that might have bugs.</p>
<p>
<b>-w</b></p>
<p>
Inhibits all warning messages.</p>
<p>
<b>-W</b></p>
<p>
Prints extra warning messages for the following events.</p>
<p>
*   An automatic variable is used without first being initialized.</p>
<p>
These warnings are possible only in optimizing compilation, because they require data flow information that is computed only when optimizing.  If you do not specify <b>-O</b>, you simply will not get these warnings.</p>
<p>
These warnings occur only for variables that are candidates for register allocation.  Therefore, they do not occur for a variable that is declared <b>volatile</b>; or whose address is taken; or whose size is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for structures, unions, or arrays, even when they are in registers.</p>
<p>
Note that there may be no warning about a variable that is used only to compute a value that itself is never used, because such computations may be deleted by data flow analysis before the warnings are printed.</p>
<p>
These warnings are made optional because GNU CC is not smart enough to see all the reasons why the code might be correct despite appearing to have an error.  Here is one example of how this can happen:</p>
{
\ \ int x;
\ \ switch (y)
\ \ \ \ {
\ \ \ \ case 1:  x = 1;
\ \ \ \ \ \ break;
\ \ \ \ case 2:  x = 4;
\ \ \ \ \ \ break;
\ \ \ \ case 3:  x = 5;
\ \ \ \ }
\ \ foo (x);
}</code>
<p>
If the value of <i>y</i> is always 1, 2, or 3, then <i>x</i> is always initialized; however, GNU CC does not know this.  The following example demonstrates another common case.</p>
{
\ \ int save_y;
\ \ if (change_y) save_y = y, y = new_y;
\ \ ...
\ \ if (change_y) y = save_y;
}</code>
<p>
This has no bug because <i>save</i>_<i>y</i> is used only if it is set.</p>
<p>
Some spurious warnings can be avoided if you declare as <b>volatile</b> all the functions you use that never return.</p>
<p>
*   A nonvolatile automatic variable might be changed by a call to <i>longjmp</i>(3C).  These warnings are possible only in optimizing compilation.</p>
<p>
The compiler sees only the calls to <i>setjmp</i>(3C).  It cannot know where <i>longjmp</i>(3C) will be called; in fact, a signal handler could call it at any point in the code.  As a result, you may get a warning even when there is, in fact, no problem because <i>longjmp</i>(3C) cannot, in fact, be called at the place that would cause a problem.</p>
<p>
*   A function can return either with or without a value.  (Falling off the end of the function body is considered returning without a value.)  For example, the following function would evoke such a warning.</p>
foo (a)
{
\ \ if (a &gt; 0)
\ \ \ \ return a;
}</code>
<p>
Spurious warnings can occur because GNU CC does not realize that certain functions (including <i>abort</i>(3C) and <i>longjmp</i>(3C)) will never return.</p>
<p>
*   An expression statement contains no side effects.</p>
<p>
In the future, other useful warnings also may be enabled by this option.</p>
<p>
<b>-Wimplicit</b></p>
<p>
Warns whenever a function is implicitly declared.</p>
<p>
<b>-Wreturn-type</b></p>
<p>
Warns whenever a function is defined with a return-type that defaults to <b>int</b>.  Also warns about any <b>return</b> statement with no return-value in a function whose return-type is not <b>void</b>.</p>
<p>
<b>-Wunused</b></p>
<p>
Warns whenever a local variable is unused aside from its declaration and whenever a function is declared static but never defined.</p>
<p>
<b>-Wswitch</b></p>
<p>
Warns whenever a <b>switch</b> statement has an index of enumeral type and lacks a <b>case</b> for one or more of the named codes of that enumeration.  (The presence of a <b>default</b> label prevents this warning.) <b>case</b> labels outside the enumeration range also provoke warnings when this option is used.</p>
<p>
<b>-Wcomment</b></p>
<p>
Warns whenever a comment-start sequence <b>/*</b> appears in a comment.</p>
<p>
<b>-Wtrigraphs</b></p>
<p>
Warns if any trigraphs are encountered (assuming they are enabled).</p>
<p>
<b>-Wall</b></p>
<p>
All of the above <b>-W</b> options combined.  These are all the options that pertain to usage which we do not recommend and that we believe is always easy to avoid, even in conjunction with macros.</p>
<p>
The other <b>-W...</b> options below are not implied by <b>-Wall</b> because certain kinds of useful macros are almost impossible to write without causing those warnings.</p>
<p>
<b>-Wshadow</b></p>
<p>
Warns whenever a local variable shadows another local variable.</p>
<p>
<b>-Wid-clash-</b><i>len</i></p>
<p>
Warns whenever two distinct identifiers match in the first <i>len</i> characters.  This may help you prepare a program that will compile with certain obsolete, brain-damaged compilers.</p>
<p>
<b>-Wpointer-arith</b></p>
<p>
Warns about anything that depends upon the size of a function type or of <b>void</b>.  GNU C assigns these types a size of 1 for convenience in making calculations with <b>void *</b> pointers and pointers to functions.</p>
<p>
<b>-Wcast-qual</b></p>
<p>
Warns whenever a pointer is cast so as to remove a type qualifier from the target type.  For example, warns if a <b>const</b> <b>char *</b> is cast to an ordinary <b>char *</b>.</p>
<p>
<b>-Wwrite-strings</b></p>
<p>
Gives string constants the type <b>const</b> <b>char</b>[<i>length</i>] so that copying the address of one into a non-<b>const</b> <b>char *</b> pointer will get a warning.  At compile time, these warnings will help you find code that can try to write into a string constant, but only if you have been very careful about using <b>const</b> in declarations and prototypes.  Otherwise, it will just be a nuisance; this is why we did not make </p>
<p>
<b>-Wall</b> request these warnings.</p>
<p>
<b>-p</b></p>
<p>
Generates extra code to write profile information suitable for the analysis program <i>prof</i>(1).</p>
<p>
<b>-pg</b></p>
<p>
Generates extra code to write profile information suitable for the analysis program <i>gprof</i>(1).</p>
<p>
<b>-a</b></p>
<p>
Generates extra code to write profile information for basic blocks, suitable for the analysis program <i>tcov</i>(1).  Eventually, GNU <i>gprof</i>(1) should be extended to process this data.</p>
<p>
<b>-l</b><i>library</i></p>
<p>
Searchs a standard list of directories for a library named <i>library</i>, which is actually a file named <b>lib</b><i>library</i><b>.a</b>.  The linker uses this file as if it had been specified precisely by name.</p>
<p>
The directories searched include several standard system directories plus any that you specify </p>
<p>
with <b>-L</b>.</p>
<p>
Normally, the files found this way are library files--archive files whose members are object files.  The linker handles an archive file by scanning through it for members that define symbols which have, so far, been referenced but not defined.  But, if the file that is found is an ordinary object file, it is linked in the usual fashion.  The only difference between using an <b>-l</b> option and specifying a file name is that <b>-l</b> searches several directories.</p>
<p>
<b>-L</b><i>dir</i></p>
<p>
Adds directory <i>dir</i> to the list of directories to be searched for <b>-l</b>.</p>
<p>
<b>-nostdlib</b></p>
<p>
Does not use the standard system libraries and startup files when linking.  Only the files you specify (plus <b>gnulib</b>) will be passed to the linker.</p>
<p>
<b>-m</b><i>machinespec</i></p>
<p>
This is a machine-dependent option that specifies something about the type of target machine.  These options are defined by the macro <b>TARGET_SWITCHES</b> in the machine description.  The default for the options is also defined by that macro, which enables you to change the defaults.</p>
<p>
The following <b>-m</b> options are defined in the 68000 machine description:</p>
<p>
<b>-m68020</b></p>
<p>
<b>-mc68020</b></p>
<p>
Generates output for a 68020 (rather than a 68000).  This is the default if you use the unmodified sources.</p>
<p>
<b>-m68000</b></p>
<p>
<b>-mc68000</b></p>
<p>
Generates output for a 68000 (rather than a 68020).</p>
<p>
<b>-m68881</b></p>
<p>
Generates output containing 68881 instructions for floating point.  This is the default if you use the unmodified sources.</p>
<p>
<b>-mfpa</b></p>
<p>
Generates output containing Sun FPA instructions for floating point.</p>
<p>
<b>-msoft-float</b></p>
<p>
Generates output containing library calls for floating point.</p>
<p>
<b>-mshort</b></p>
<p>
Considers type <b>int</b> to be 16 bits wide, like <b>short</b> <b>int</b>.</p>
<p>
<b>-mnobitfield</b></p>
<p>
Does not use the bit-field instructions.  <b>-m68000</b> implies <b>-mnobitfield</b>.</p>
<p>
<b>-mbitfield</b></p>
<p>
Does use the bit-field instructions.  <b>-m68020</b> implies <b>-mbitfield</b>.  This is the default if you use the unmodified sources.</p>
<p>
<b>-mrtd</b></p>
<p>
Uses a different function-calling convention, in which functions that take a fixed number of arguments return with the <b>rtd</b> instruction, which pops their arguments while returning.  This saves one instruction in the caller since there is no need to pop the arguments there.</p>
<p>
This calling convention is incompatible with the one normally used on UNIX, so you cannot use it if you need to call libraries compiled with the UNIX compiler.</p>
<p>
Also, you must provide function prototypes for all functions that take variable numbers of arguments (including <i>printf</i>(3S)); otherwise incorrect code will be generated for calls to those functions.</p>
<p>
In addition, seriously incorrect code will result if you call a function with too many arguments.  (Normally, extra arguments are harmlessly ignored.)</p>
<p>
The <b>rtd</b> instruction is supported by the 68010 and 68020 processors but not by the 68000.</p>
<p>
The following <b>-m</b> options are defined in the Vax machine description.</p>
<p>
<b>-munix</b></p>
<p>
Does not output certain jump instructions (<b>aobleq</b> and so on) that the UNIX assembler for the Vax cannot handle across long ranges.</p>
<p>
<b>-mgnu</b></p>
<p>
Does output those jump instructions, on the assumption that you will assemble with the GNU assembler.</p>
<p>
<b>-mg</b></p>
<p>
Outputs code for g-format floating point numbers instead of d-format.</p>
<p>
The following <b>-m</b> switches are supported on the Sparc.</p>
<p>
<b>-mfpu</b></p>
<p>
Generates output containing floating point instructions.  This is the default if you use the unmodified sources.</p>
<p>
<b>-msoft-float</b></p>
<p>
Generates output containing library calls for floating point.</p>
<p>
<b>-mno-epilogue</b></p>
<p>
Generates separate return instructions for <b>return</b> statements.  This has both advantages and disadvantages.</p>
<p>
The following <b>-m</b> options are defined in the Convex machine description.</p>
<p>
<b>-mc1</b></p>
<p>
Generates output for a C1.  This is the default when the compiler is configured for a C1.</p>
<p>
<b>-mc2</b></p>
<p>
Generates output for a C2.  This is the default when the compiler is configured for a C2.</p>
<p>
<b>-margcount</b></p>
<p>
Generates code that puts an argument count in the word preceding each argument list.  Some nonportable Convex and Vax programs need this word.  (Debuggers do not; this information is in the symbol table.)</p>
<p>
<b>-mnoargcount</b></p>
<p>
Omits the argument count word.  This is the default if you use the unmodified sources.</p>
<p>
<b>-f</b><i>flag</i></p>
<p>
Specifies machine-independent flags.  Most flags have both positive and negative forms; for example, the negative form of <b>-ffoo</b> would be <b>-fno-foo</b>.  In the table below, only one of the forms is listed--the one that is not the default.  You can figure out the other form by either removing <b>no-</b> or adding it.</p>
<p>
<b>-fpcc-struct-return</b></p>
<p>
Uses the same convention for returning <b>struct</b> and <b>union</b> values that is used by the usual C compiler on your system.  This convention is less efficient for small structures; and, on many machines, it fails to be reentrant.  However, it has the advantage of allowing intercallability between GCC-compiled code and PCC-compiled code.</p>
<p>
<b>-ffloat-store</b></p>
<p>
Does not store floating-point variables in registers.  This prevents undesirable excess precision on machines such as the 68000 where the floating registers (of the 68881) keep more precision than a <b>double</b> is supposed to have.</p>
<p>
For most programs, the excess precision does only good; however, a few programs rely upon the precise definition of IEEE floating point.  Use <b>-ffloat-store</b> for such programs.</p>
<p>
<b>-fno-asm</b></p>
<p>
Does not recognize <b>asm</b>, <b>inline</b>, or <b>typeof</b> as a keyword.  These words may then be used as identifiers.  You can use __<b>asm</b>__, __<b>inline</b>__, and __<b>typeof</b>__ instead.</p>
<p>
<b>-fno-defer-pop</b></p>
<p>
Always pops the arguments to each function call as soon as that function returns.  Normally, the compiler (when optimizing) lets arguments accumulate on the stack for several function calls and pops them all at once.</p>
<p>
<b>-fstrength-reduce</b></p>
<p>
Optimizes loop strength reduction and eliminates iteration variables.</p>
<p>
<b>-fcombine-regs</b></p>
<p>
Allows the combine pass to combine an instruction that copies one register into another.  This might or might not produce better code when used in addition to <b>-O</b>.  </p>
<p>
<b>-fforce-mem</b></p>
<p>
Forces memory operands to be copied into registers before doing arithmetic on them.  This may produce better code by making all memory references potential common subexpressions.  When they are not common subexpressions, instruction combination should eliminate the separate register-load.  </p>
<p>
<b>-fforce-addr</b></p>
<p>
Forces memory address constants to be copied into registers before doing arithmetic on them.  This may produce better code just as <b>-fforce-mem</b> may.  </p>
<p>
<b>-fomit-frame-pointer</b></p>
<p>
Does not keep the frame pointer in a register for functions that do not need one.  This avoids the instructions to save, set up, and restore frame pointers.  It also makes an extra register available in many functions.  It also makes debugging impossible.</p>
<p>
On some machines, such as the Vax, this flag has no effect because the standard calling sequence automatically handles the frame pointer and nothing is saved by pretending it does not exist.  The machine-description macro <b>FRAME_POINTER_REQUIRED</b> controls whether a target machine supports this flag.</p>
<p>
<b>-finline-functions</b></p>
<p>
Integrates all simple functions into their callers.  The compiler heuristically decides which functions are simple enough to be worth integrating in this way.</p>
<p>
If all calls to a given function are integrated and the function is declared <b>static</b>, then the function is normally not output as assembler code in its own right.</p>
<p>
<b>-fcaller-saves</b></p>
<p>
Enables values to be allocated in registers that will be clobbered by function calls, by emitting extra instructions to save and restore the registers around such calls.  Such allocation is done only when it seems to result in better code than would otherwise be produced.</p>
<p>
This option is enabled by default on certain machines, usually those that have no call-preserved registers to use instead.</p>
<p>
<b>-fkeep-inline-functions</b></p>
<p>
Outputs a separate run-time callable version of the function, even if all calls to a given function are integrated and the function is declared <b>static</b>.</p>
<p>
<b>-fwritable-strings</b></p>
<p>
Stores string constants in the writable data segment and does not uniquize them.  This is for compatibility with old programs that assume they can write into string constants.  Writing into string constants is a very bad idea; constants should be constant.</p>
<p>
<b>-fcond-mismatch</b></p>
<p>
Allows conditional expressions with mismatched types in the second and third arguments.  The value of such an expression is void.</p>
<p>
<b>-fno-function-cse</b></p>
<p>
Does not put function addresses in registers; instead, it makes each instruction that calls a constant function contain the function's address explicitly.</p>
<p>
This option results in less efficient code, but some strange hacks that alter the assembler output may be confused by the optimizations performed when this option is not used.</p>
<p>
<b>-fvolatile</b></p>
<p>
Considers all memory references through pointers to be volatile.</p>
<p>
<b>-fshared-data</b></p>
<p>
Requests that the data and non-<b>const</b> variables of this compilation be shared data rather than private data.  The distinction makes sense only on certain operating systems, where shared data is shared between processes running the same program, while private data exists in one copy per process.</p>
<p>
<b>-funsigned-char</b></p>
<p>
Lets the type <b>char</b> be the unsigned, like <b>unsigned char</b>.</p>
<p>
Each kind of machine has a default for what <b>char</b> should be.  It is either like <b>unsigned char</b> by default or like <b>signed</b> <b>char</b> by default.  (Actually, at present, the default is always signed.)</p>
<p>
The type <b>char</b> is always a distinct type from either <b>signed</b> <b>char</b> or <b>unsigned char</b>, even though its behavior is always just like one of those two.</p>
<p>
Note that this is equivalent to <b>-fno-signed-char</b>, which is the negative form of <b>-fsigned-char</b>.</p>
<p>
<b>-fsigned-char</b></p>
<p>
Lets the type <b>char</b> be signed, like <b>signed</b> <b>char</b>.</p>
<p>
Note that this is equivalent to <b>-fno-unsigned-char</b>, which is the negative form of <b>-funsigned-char</b>.</p>
<p>
<b>-fdelayed-branch</b></p>
<p>
If supported for the target machine, attempts to reorder instructions to exploit instruction slots available after delayed branch instructions.</p>
<p>
<b>-ffixed-</b><i>reg</i></p>
<p>
Treats the register named <i>reg</i> as a fixed register; generated code should never refer to it (except perhaps as a stack pointer, frame pointer, or in some other fixed role).</p>
<p>
<i>reg</i> must be the name of a register.  The register names accepted are machine-specific and are defined in the <b>REGISTER_NAMES </b>macro in the machine description macro file.</p>
<p>
This flag does not have a negative form, because it specifies a three-way choice.</p>
<p>
<b>-fcall-used-</b><i>reg</i></p>
<p>
Treats the register named <i>reg</i> as an allocatable register that is clobbered by function calls.  It may be allocated for temporaries or variables that do not live across a call.  Functions compiled this way will not save and restore the register <i>reg</i>.</p>
<p>
Use of this flag for a register that has a fixed pervasive role in the machine's execution model, such as the stack pointer or frame pointer, will produce disastrous results.</p>
<p>
This flag does not have a negative form, because it specifies a three-way choice.</p>
<p>
<b>-fcall-saved-</b><i>reg</i></p>
<p>
Treats the register named <i>reg</i> as an allocatable register saved by functions.  It may be allocated even for temporaries or variables that live across a call.  Functions compiled this way will save and restore the register <i>reg</i> if they use it.</p>
<p>
Use of this flag for a register that has a fixed pervasive role in the machine's execution model, such as the stack pointer or frame pointer, will produce disastrous results.</p>
<p>
A different sort of disaster will result from the use of this flag for a register in which function values may be returned.</p>
<p>
This flag does not have a negative form, because it specifies a three-way choice.</p>
<p>
<b>-d</b><i>letters</i></p>
<p>
Says to make debugging dumps at times specified by <i>letters</i>.  The following list defines the possible letters.</p>
<p>
<b>r</b>Dump after RTL generation.</p>
<p>
<b>j  </b>Dump after first jump optimization.</p>
<p>
<b>J  </b>Dump after last jump optimization.</p>
<p>
<b>s  </b>Dump after CSE (including the jump optimization that sometimes follows CSE).</p>
<p>
<b>L  </b>Dump after loop optimization.</p>
<p>
<b>f  </b>Dump after flow analysis.</p>
<p>
<b>c  </b>Dump after instruction combination.</p>
<p>
<b>l  </b>Dump after local register allocation.</p>
<p>
<b>g  </b>Dump after global register allocation.</p>
<p>
<b>d  </b>Dump after delayed branch scheduling.</p>
<p>
<b>m  </b>Print statistics on memory usage, at the end of the run.</p>
<p>
<b>-pedantic</b></p>
<p>
Issues all the warnings demanded by strict ANSI standard C; rejects all programs that use forbidden extensions.</p>
<p>
Valid ANSI standard C programs should compile properly with or without this option (though a rare few will require <b>-ansi</b>).  However, without this option, certain GNU extensions and traditional C features are supported as well.  With this option, they are rejected.  There is no reason to use this option; it exists only to satisfy pedants.</p>
<p>
<b>-pedantic</b> does not cause warning messages for use of the alternate keywords whose names begin and end with __.</p>
<p>
<b>-static</b></p>
<p>
On Suns running version 4, this prevents linking with the shared libraries.  (<b>-g</b> has the same effect.)</p>
<p>
These options control the C preprocessor, which is run on each C source file before actual compilation.  If you use the '-E' option, nothing is done except C preprocessing.  Some of these options make sense only together with '-E' because they request preprocessor output that is not suitable for actual compilation.</p>
<p>
<b>-C</b></p>
<p>
Tells the preprocessor not to discard comments.  Used with the <b>-E</b> option.</p>
<p>
<b>-I</b><i>dir</i></p>
<p>
Searchs directory <i>dir</i> for include files.</p>
<p>
<b>-I-</b></p>
<p>
Searches any directories specified with <b>-I</b> options before the <b>-I-</b> option only for the case of <b>#include "</b><i>file</i><b>"</b>; they are not searched for <b>#include &lt;</b><i>file</i><b>&gt;</b>.</p>
<p>
If additional directories are specified with <b>-I</b> options after the <b>-I-</b>, searches these directories for all <b>#include</b> directives.  (Ordinarily <i>all</i> <b>-I</b> directories are used this way.)</p>
<p>
In addition, the <b>-I-</b> option inhibits the use of the current directory as the first search directory for <b>#include "</b><i>file</i><b>"</b>.  Therefore, the current directory is searched only if it is requested explicitly with </p>
<p>
<b>-I.</b>.  Specifying both <b>-I-</b> and <b>-I.</b> allows you to control precisely which directories are searched before the current one and which are searched after.</p>
<p>
<b>-nostdinc</b></p>
<p>
Does not search the standard system directories for header files.  Only the directories you have specified with <b>-I</b> options (and the current directory, if appropriate) are searched.</p>
<p>
Between <b>-nostdinc</b> and <b>-I-</b>, you can eliminate all directories from the search path except those you specify.</p>
<p>
<b>-M</b></p>
<p>
Tells the preprocessor to output a rule suitable for <i>make</i>(1) describing the dependencies of each source file.  For each source file, the preprocessor outputs one <b>make</b>-rule whose target is the object file name for that source file and whose dependencies are all the files <b>#include</b>d in it.  This rule may be a single line or, if it is long, may be continued with <b>\\-newline</b>.</p>
<p>
<b>-M</b> implies <b>-E</b>.</p>
<p>
<b>-MM</b></p>
<p>
Like <b>-M</b> but the output mentions only the user-header files included with <b>#include "</b><i>file</i><b>"</b>.  System header files included with <b>#include &lt;</b><i>file</i><b>&gt;</b> are omitted.</p>
<p>
<b>-MM</b> implies <b>-E</b>.</p>
<p>
<b>-D</b><i>macro</i></p>
<p>
Defines macro <i>macro</i> with the empty string as its definition.</p>
<p>
<b>-D</b><i>macro=defn</i></p>
<p>
Defines macro <i>macro</i> as <i>defn</i>.</p>
<p>
<b>-U</b><i>macro</i></p>
<p>
Undefines macro <i>macro</i>.</p>
<p>
<b>-trigraphs</b></p>
<p>
Supports ANSI C trigraphs.  You do not want to know about this brain damage.  The <b>-ansi</b> option also has this effect.</p>
<h2>FILES</h2>
<p>
file.cC source file</p>
<p>
file.sassembly language file</p>
<p>
file.oobject file</p>
<p>
a.out<b></b>link edited output</p>
<p>
/tmp/cc*temporary files</p>
<p>
/usr/libexec/cpppreprocessor</p>
<p>
/usr/libexec/cclcompiler</p>
<p>
/usr/lib/libgnulib.alibrary needed by GCC on some machines</p>
<p>
/usr/lib/crt0.ostart-up routine</p>
<p>
/usr/lib/libc.astandard C library, see <i>intro</i>(3)</p>
<p>
/usr/includestandard directory for <b>#include</b> files</p>
<h2>BUGS</h2>
<p>
Bugs should be reported to <b>bug-gcc@prep.ai.mit.edu.</b>  Bugs actually tend to get fixed if they can be isolated, so it is in your interest to report them in such a way that they can be easily reproduced.</p>
<h2>COPYING</h2>
<p>
Copyright © 1988 Free Software Foundation, Inc.</p>
<p>
Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.</p>
<p>
Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.</p>
<p>
Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be included in translations approved by the Free Software Foundation instead of in the original English.</p>
<h2>AUTHORS</h2>
<p>
See the GNU CC Manual for the contributors to GNU CC.</p>
<h2>NAME</h2>
<p>
<b>chmod</b> -- change file modes</p>
<p>
<b>SYNOPSIS</b></p>
chmod <b>[</b>-R<b>]</b> <i>mode</i> <i>file</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>chmod</i> utility modifies the file mode bits of the listed files as specified by the <i>mode</i> operand.</p>
<p>
The options follow.</p>
<p>
<b>-R</b></p>
<p>
Traverses a file hierarchy.  For each file that is of type directory, <i>chmod</i> changes the mode of all files in the file hierarchy below it followed by the mode of the directory itself.</p>
<p>
Symbolic links are not indirected through nor are their modes altered.</p>
<p>
Only the owner of a file or the superuser is permitted to change the mode of a file.</p>
<p>
The <i>chmod</i> utility exits 0 on success and &gt;0 if an error occurs.</p>
<h2>MODES</h2>
<p>
Modes may be absolute or symbolic.  An absolute mode is an octal number constructed by <i>or</i>ing the following values.</p>
<p>
<b>4000</b></p>
<p>
set-user-ID-on-execution</p>
<p>
<b>2000</b></p>
<p>
set-group-ID-on-execution</p>
<p>
<b>1000</b></p>
<p>
sticky bit, see <i>chmod</i>(2)</p>
<p>
<b>0400</b></p>
<p>
read by owner</p>
<p>
<b>0200</b></p>
<p>
write by owner</p>
<p>
<b>0100</b></p>
<p>
execute (or search for directories) by owner</p>
<p>
<b>0070</b></p>
<p>
read, write, execute/search by group</p>
<p>
<b>0007</b></p>
<p>
read, write, execute/search by others</p>
<p>
The read, write, and execute/search values for group and others are encoded as described for owner.</p>
<p>
The symbolic mode is described by the following grammar.</p>
<p>
mode::= clause [, clause ...]</p>
<p>
clause::= [who ...] [action ...] last_action</p>
<p>
action::= op [perm ...]</p>
<p>
last_action::= op [perm ...]</p>
<p>
who ::= a | u | g | o</p>
<p>
op::= + | - | =</p>
<p>
perm::= r | s | t | w | X | x | u | g | o</p>
<p>
The <i>who</i> symbols "u", "g", and "o" specify the user, group, and other parts of the mode bits, respectively.  The <i>who</i> symbol "a" is equivalent to "ugo".</p>
<p>
The <i>perm</i> symbols represent the portions of the mode bits, as follows.</p>
<p>
<b>r</b></p>
<p>
The read bits.</p>
<p>
<b>s</b></p>
<p>
The set-user-ID-on-execution and set-group-ID-on-execution bits.</p>
<p>
<b>t</b></p>
<p>
The sticky bit.</p>
<p>
<b>w</b></p>
<p>
The write bits.</p>
<p>
<b>x</b></p>
<p>
The execute/search bits.</p>
<p>
<b>X</b></p>
<p>
The execute/search bits if the file is a directory or if any of the execute/search bits are set in the original (unmodified) mode.  Operations with the <i>perm</i> symbol "X" are only meaningful in conjunction with the <i>op</i> symbol "+"; it is ignored in all other cases.</p>
<p>
The <i>op</i> symbols represent the operation performed, as follows.</p>
<p>
<b>+</b></p>
<p>
If no value is supplied for <i>perm</i>, the "+" operation has no effect.  If no value is supplied for <i>who</i>, each permission bit specified in <i>perm</i> (for which the corresponding bit in the file mode creation mask is clear) is set.  Otherwise, the mode bits represented by the specified <i>who</i> and <i>perm</i> values are set.</p>
<p>
<b>-</b></p>
<p>
If no value is supplied for <i>perm</i>, the "-" operation has no effect.  If no value is supplied for <i>who</i>, the mode bits represented by <i>perm</i> are cleared for the owner, group, and other permissions.  Otherwise, the mode bits represented by the specified <i>who</i> and <i>perm</i> values are cleared.</p>
<p>
<b>=</b></p>
<p>
The mode bits specified by the <i>who</i> value are cleared; or, if no <i>who</i> value is specified, the owner, group, and other mode bits are cleared.  Then, if no value is supplied for <i>who</i>, each permission bit specified in <i>perm</i> (for which the corresponding bit in the file mode creation mask is clear) is set.  Otherwise, the mode bits represented by the specified <i>who</i> and <i>perm</i> values are set.</p>
<p>
Each <i>clause</i> specifies one or more operations to be performed on the mode bits, and each operation is applied to the mode bits in the order specified.</p>
<p>
Operations upon the other permissions only (specified by the symbol "o" by itself), in combination with the <i>perm</i> symbols "s" or "t", are ignored.</p>
<h2>EXAMPLES</h2>
<p>
<b>644</b></p>
<p>
Makes a file readable by anyone and writable by the owner only.</p>
<p>
<b>go-w</b></p>
<p>
Denies write permission to group and others.</p>
<p>
<b>=rw,+X</b></p>
<p>
Sets the read and write permissions to the usual defaults but retain any execute permissions that are currently set.</p>
<p>
<b>+X</b></p>
<p>
Makes a directory or file searchable/executable by everyone if it is already searchable/executable by anyone.</p>
<p>
<b>755</b></p>
<p>
<b>u=rwx,go=rx</b></p>
<p>
<b>u=rwx,go=u-w</b></p>
<p>
Makes a file readable/executable by everyone and writeable by the owner only.</p>
<p>
<b>go=</b></p>
<p>
Clears all mode bits for group and others.</p>
<p>
<b>g=u-w</b></p>
<p>
Sets the group bits equal to the user bits but clears the group write bit.</p>
<h2>BUGS</h2>
<p>
There is no <i>perm</i> option for the naughty bits.</p>
<h2>STANDARDS</h2>
<p>
The <i>chmod</i> utility is expected to be POSIX 1003.2-compatible with the exception of the <i>perm</i> symbols <b>t</b> and <b>X</b>, which are not included in that standard.</p>
<h2>NAME</h2>
<p>
<b>cp</b> -- copy files</p>
<p>
<b>SYNOPSIS</b></p>
cp <b>[</b>-R<b>]</b> <b>[</b>-f<b>]</b> <b>[</b>-h<b>]</b> <b>[</b>-i<b>]</b> <b>[</b>-p<b>]</b> <i>source_file</i> <i>target_file</i>
cp <b>[</b>-R<b>]</b> <b>[</b>-f<b>]</b> <b>[</b>-h<b>]</b> <b>[</b>-i<b>]</b> <b>[</b>-p<b>]</b> <i>source_file</i> ... <i>target_directory</i>
</code>
<h2>DESCRIPTION</h2>
<p>
In the first synopsis form, the <i>cp</i> utility copies the contents of the <i>source_file</i> to the <i>target_file</i>.  In the second synopsis form, the contents of each named <i>source_file</i> is copied to thedestination <i>target_directory</i>.  The names of the files themselves are not changed.  If <i>cp</i> detects an attempt to copy a file to itself, the copy will fail.</p>
<p>
The following options are available.</p>
<p>
<b>-R</b></p>
<p>
If <i>source_file </i>designates a directory, <i>cp</i> copies the directory and the entire subtree connected at that point.  This option also causes symbolic links to be copied, rather than indirected through, and for <i>cp</i> to create special files rather than copying them as normal files.  Created directories have the same mode as the corresponding source directory, unmodified by the process' umask.</p>
<p>
<b>-f</b></p>
<p>
For each existing destination pathname, removes it and creates a new file, without prompting for confirmation regardless of its permissions.  (The <b>-i</b> option is ignored if the <b>-f</b> option is specified.)</p>
<p>
<b>-h</b></p>
<p>
Forces <i>cp</i> to follow symbolic links.  Provided for the <b>-R</b> option, which does not follow symbolic links by default.</p>
<p>
<b>-i</b></p>
<p>
Causes <i>cp</i> to write a prompt to standard error before copying a file that would overwrite an existing file.  If the response from the standard input begins with the character "y'', the file is copied if permissions allow the copy.</p>
<p>
<b>-p</b></p>
<p>
Causes <i>cp</i> to preserve in the copy as many of the modification times, access times, file modes, user IDs, and group IDs as allowed by permissions.</p>
<p>
If the user ID and group ID cannot be preserved, no error message is displayed and the exit value is not altered.</p>
<p>
If the source file has its set user ID bit on and the user ID cannot be preserved, the set user ID bit is not preserved in the copy's permissions.  If the source file has its set group ID bit on and the group ID cannot be preserved, the set group ID bit is not preserved in the copy's permissions.  If the source file has both the set user ID and set group ID bits on and either the user ID or group ID cannot be preserved, neither the set user ID nor the set group ID bits are preserved in the copy's permissions.</p>
<p>
For each destination file that already exists, its contents are overwritten if permissions allow; but its mode, user ID, and group ID are unchanged.</p>
<p>
If the destination file does not exist, the mode of the source file is used as modified by the file mode creation mask (see <i>sh</i>).  If the source file has its set user ID bit on, that bit is removed unless both the source file and the destination file are owned by the same user.</p>
<p>
If the source file has its set group ID bit on, that bit is removed unless both the source file and the destination file are in the same group and the user is a member of that group.  If both the set user ID and set group ID bits are set, all of the above conditions must be fulfilled or both bits are removed.</p>
<p>
Appropriate permissions are required for file creation or overwriting.</p>
<p>
Symbolic links are followed unless the -R option is specified, in which case the link itself is copied.</p>
<p>
<i>cp</i> exits 0 on success; &gt;0 if an error occurred.</p>
<h2>HISTORY</h2>
<p>
The <i>cp</i> command is expected to be POSIX 1003.2 compatible.</p>
<h2>NAME</h2>
<p>
<b>find</b> -- walk a file hierarchy</p>
<p>
<b>SYNOPSIS</b></p>
find <b>[</b>-d<b>]</b> <b>[</b>-s<b>]</b> <b>[</b>-X<b>]</b> <b>[</b>-x<b>]</b> <b>[</b>-f <i>file</i><b>]</b> <i>file</i> ...  <i>expression</i>
</code>
<h2>DESCRIPTION</h2>
<p>
<i>find</i> recursively descends the directory tree for each <i>file</i> listed, evaluating an <i>expression</i> (composed of the "primaries" and "operands" listed below) in terms of each file in the tree.</p>
<p>
If <i>file</i> is a symbolic link referencing an existing file, the directory tree referenced by the link is descended instead of the link itself.</p>
<p>
The options follow.</p>
<p>
<b>-d</b></p>
<p>
The <b>-d</b> option causes <i>find</i> to perform a depth-first traversal; i.e., directories are visited in post-order and all entries in a directory will be acted upon before the directory itself.  By default, <i>find </i>visits directories in preorder; i.e., before their contents.  Note that the default is <i>not</i> a breadth-first traversal.</p>
<p>
<b>-f</b></p>
<p>
The <b>-f</b> option specifies a file hierarchy for <i>find</i> to traverse.  File hierarchies also may be specified as the operands immediately following the options.</p>
<p>
<b>-s</b></p>
<p>
The <b>-s</b> option causes the file information and file type, returned for each symbolic link, to be those of the file referenced by the link, not the link itself.  If the referenced file does not exist, the file information and type will be for the link itself.</p>
<p>
<b>-X</b></p>
<p>
The <b>-X</b> option is a modification to permit <i>find</i> to be safely used in conjunction with <i>xargs</i>(1).  If a file name contains any of the delimiting characters used by <i>xargs</i>, a diagnostic message is displayed on standard error and the file is skipped.  The delimiting characters include single (" ' ") and double (" " ") quotes, backslash ("\"), space, tab, and newline characters.</p>
<p>
<b>-x</b></p>
<p>
The <b>-x</b> option prevents <i>find</i> from descending into directories that have a device number different than that of the file from which the descent began.</p>
<h2>PRIMARIES</h2>
<p>
<b>-atime</b> <i>n</i></p>
<p>
True, if the difference between the file last access time and the time <i>find</i> was started ( rounded up to the next full 24-hour period) is <i>n</i> 24-hour periods.</p>
<p>
<b>-ctime</b> <i>n</i></p>
<p>
True, if the difference between the time of last change of file status information and the time <i>find</i> was started (rounded up to the next full 24-hour period) is <i>n</i> 24-hour periods.</p>
<p>
<b>-exec</b> <i>utility</i> [argument ...] <b>;</b></p>
<p>
True, if the program named <i>utility</i> returns a zero value as its exit status.  Optional arguments may be passed to the utility.  The expression must be terminated by a semicolon (";").  If the string "{}" appears anywhere in the utility name or the arguments, it is replaced by the pathname of the current file.  <i>utility</i> will be executed from the directory from which IfIiInId was executed.</p>
<p>
<b>-fstype </b><i>type</i></p>
<p>
True, if the file is contained in a file system of type <i>type</i>.  Currently supported types are "local", "mfs", "nfs", "pc", "rdonly", and "ufs".  The types "local" and "rdonly" are not specific file system types.  The former matches any file system physically mounted on the system where the <i>find</i> is being executed, and the latter matches any file system which is mounted read-only.</p>
<p>
<b>-group </b><i>gname</i></p>
<p>
True, if the file belongs to the group <i>gname</i>.  If <i>gname</i> is numeric and there is no such group name, then <i>gname</i> is treated as a group id.</p>
<p>
<b>-inum </b><i>n</i></p>
<p>
True, if the file has inode number <i>n</i>.</p>
<p>
<b>-links</b> <i>n</i></p>
<p>
True, if the file has <i>n</i> links.</p>
<p>
<b>-ls</b></p>
<p>
This primary always evaluates to true.  The following information for the current file is written to standard output:  its inode number, size in 512-byte blocks, file permissions, number of hard links, owner, group, size in bytes, last modification time, and pathname.  If the file is a block or character-special file, the major and minor numbers will be displayed instead of the size in bytes.  If the file is a symbolic link, the pathname of the linked-to file will be displayed preceded by "-&gt;".  The format is identical to that produced by "ls -dgils".</p>
<p>
<b>-mtime</b> <i>n</i></p>
<p>
True, if the difference between the file last modification time and the time <i>find</i> was started (rounded up to the next full 24-hour period) is <i>n</i> 24-hour periods.</p>
<p>
<b>-ok</b> <i>utility</i> [<i>argument</i> ...] <b>;</b></p>
<p>
The <b>-ok</b> primary is identical to the <b>-exec</b> primary with the exception that <i>find</i> requests user affirmation for executing the utility by printing a message to the terminal and reading a response.  If the response is other than "y", the command is not executed and the value of the <b>-ok</b> expression is false.</p>
<p>
<b>-name</b> <i>pattern</i></p>
<p>
True, if the last component of the pathname being examined matches <i>pattern</i>.  Special shell pattern matching characters ("[", "]", "*", and "?") may be used as part of <i>pattern</i>.  These characters may be matched explicitly by escaping them with a backslash ("\").</p>
<p>
<b>-newer</b> <i>file</i></p>
<p>
True, if the current file has a more recent last modification time than <i>file</i>.</p>
<p>
<b>-nouser</b></p>
<p>
True, if the file belongs to an unknown user.</p>
<p>
<b>-nogroup</b></p>
<p>
True, if the file belongs to an unknown group.</p>
<p>
<b>-path</b> <i>pattern</i></p>
<p>
True, if the pathname being examined matches <i>pattern</i>.  Special shell pattern matching characters ("[", "]", "*", and "?") may be used as part of <i>pattern</i>.  These characters may be matched explicitly by escaping them with a backslash ("\").  Slashes ("/") are treated as normal characters and do not need to be matched explicitly.</p>
<p>
<b>-perm</b> <i>mode</i></p>
<p>
The <i>mode</i> may be either symbolic (see <i>chmod</i>) or an octal number.  If the mode is symbolic, a starting value of zero is assumed and the mode sets or clears permissions without regard to the process' file mode creation mask.  If the mode is octal, only bits 07777 (<i>S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO</i>) of the file's mode bits participate in the comparison.  If the mode is preceded by a dash ("-"), this primary evaluates to true if at least all of the bits in the mode are set in the file's mode bits.  If the mode is not preceded by a dash, this primary evaluates to true if the bits in the mode exactly match the file's mode bits.  Note that the first character of a symbolic mode may not be a dash ("-").</p>
<p>
<b>-print</b></p>
<p>
This primary always evaluates to true.  It prints the pathname of the current file to standard output.  The expression is appended to the user specified expression if neither <b>-exec</b>, <b>-ls</b>, nor <b>-ok</b> is specified.</p>
<p>
<b>-prune</b></p>
<p>
This primary always evaluates to true.  It causes <i>find</i> to not descend into the current file.  Note that the <b>-prune</b> primary has no effect if the <b>-d</b> option was specified.</p>
<p>
<b>-size</b> <i>n</i>[<b>c</b>]</p>
<p>
True, if the file's size (rounded up in 512-byte blocks) is <i>n</i>.  If <i>n </i>is followed by a "c", then the primary is true if the file's size is <i>n</i> bytes.</p>
<p>
<b>-type</b> <i>t</i></p>
<p>
True, if the file is of the specified type.  Possible file types follow.</p>
<p>
<b>b</b>block special</p>
<p>
<b>c</b>character special</p>
<p>
<b>d</b>directory</p>
<p>
<b>f</b>regular file</p>
<p>
<b>l</b>symbolic link</p>
<p>
<b>p</b>FIFO</p>
<p>
<b>s</b>socket</p>
<p>
<b>-user</b> <i>uname</i></p>
<p>
True, if the file belongs to the user <i>uname</i>.  If <i>uname</i> is numeric and there is no such user name, then <i>uname</i> is treated as a user id.</p>
<p>
All primaries which take a numeric argument allow the number to be preceded by a plus sign ("+") or a minus sign ("-").  A preceding plus sign means "more than n"; a preceding minus sign means "less than n"; and neither sign means "exactly n".</p>
<h2>OPERATORS</h2>
<p>
The primaries may be combined using the following operators.  The operators are listed in order of decreasing precedence.</p>
<p>
<b>(</b><i>expression</i><b>)</b></p>
<p>
This evaluates to true if the parenthesized expression evaluates to true.</p>
<p>
<b>!</b><i>expression</i></p>
<p>
This is the unary <i>NOT</i> operator.  It evaluates to true if the expression is false.</p>
<p>
<i>expression </i><b>-and</b> <i>expression</i></p>
<p>
<i>expression</i> <i>expression</i></p>
<p>
The <b>-and</b> operator is the logical <i>AND</i> operator.  As it is implied by the juxtaposition of two expressions, it does not need to be specified.  The expression evaluates to true if both expressions are true.  The second expression is not evaluated if the first expression is false.</p>
<p>
<i>expression</i> <b>-or</b> <i>expression</i></p>
<p>
The <b>-or</b> operator is the logical <i>OR</i> operator.  The expression evaluates to true if either the first or the second expression is true.  The second expression is not evaluated if the first expression is true.</p>
<p>
All operands and primaries must be separate arguments to <i>find</i>.  Primaries which themselves take arguments expect each argument to be a separate argument to <i>find</i>.</p>
<h2>EXAMPLES</h2>
<p>
The following examples are shown as given to the shell.</p>
<p>
<b>find</b> <b>/</b> <b>\!</b> <b>-name</b> <b>"*.c"</b> <b>-print</b></p>
<p>
Prints out a list of all the files whose names do not end in ".c".</p>
<p>
<b>find</b> <b>/</b> <b>-newer</b> <b>ttt</b> <b>-user</b> <b>wnj</b> <b>-print</b></p>
<p>
Prints out a list of all the files owned by user "wnj" that are newer than the file "ttt".</p>
<p>
<b>find</b> <b>/</b> <b>\!</b> <b>\(</b> <b>-newer</b> <b>ttt</b> <b>-user</b> <b>wnj</b> <b>\)</b></p>
<p>
Prints out a list of all the files that are not both newer than "ttt" and owned by "wnj".</p>
<p>
<b>find</b> <b>/</b> <b>\(</b> <b>-newer</b> <b>ttt</b> <b>-or</b> <b>-user</b> <b>wnj</b> <b>\)</b></p>
<p>
Prints out a list of all the files that are either owned by "wnj" or that are newer than "ttt".</p>
<h2>STANDARDS</h2>
<p>
The <i>find</i> utility syntax is a superset of the syntax specified by the POSIX 1003.2 standard.</p>
<p>
The <b>-s</b> and <b>-X</b> options and the <b>-inum</b> and <b>-ls</b> primaries are extensions to POSIX 1003.2.</p>
<p>
Historically, the <b>-d</b>, <b>-s</b>, and <b>-x</b> options were implemented using the primaries "-depth", "-follow", and "-xdev".  These primaries always evaluated to true.  As they were really global variables that took effect before the traversal began, some legal expressions could have unexpected results.  An example is the expression "-print -o -depth".  As <b>-print</b> always evaluates to true, the standard order of evaluation implies that <b>-depth</b> would never be evaluated.  This is not the case.</p>
<p>
The operator "-or" was implemented as "-o", and the operator "-and" was implemented as "-a".</p>
<p>
Historic implementations of the <b>-exec</b> and <b>-ok</b> primaries did not replace the string "{}" in the utility name or the utility arguments if it had preceding or following nonwhitespace characters.  This version replaces it no matter where in the utility name or arguments it appears.</p>
<h2>BUGS</h2>
<p>
The special characters used by <i>find</i> also are special characters to many shell programs.  In particular, the characters "*", "[", "]", "?", "(", ")", "!", "\", and ";" may have to be escaped from the shell.</p>
<p>
As there is no delimiter separating options and file names or file names and the <i>expression</i>, it is difficult to specify files named "-xdev" or "!".  These problems are handled by the <b>-f</b> option and the <i>getopt</i>(3) "--" construct.</p>
<h2>NAME</h2>
<p>
<b>ln</b> -- make links</p>
<h2>SYNOPSIS</h2>
ln <b>[</b>-s<b>]</b> source_file target_file
ln <b>[</b>-s<b>]</b> source_file ...  target_directory
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>ln</i> utility creates a new directory entry (linked file), which inherits the same modes as the orginal file.  It is useful for maintaining multiple copies of a file in many places at once--without the "copies"; instead, a link 'points' to the original copy.  There are two types of links:  hard links and symbolic links.  How a link 'points' to a file is one of the differences between a hard or symbolic link.</p>
<p>
Option available:</p>
<p>
<b>-s</b></p>
<p>
Create a symbolic link.</p>
<p>
By default <i>ln</i> makes <i>hard</i> links.  A hard link to a file is indistinguishable from the original directory entry; any changes to a file are effective independent of the name used to reference the file.  Hard links may not refer to directories (unless the proper incantations are supplied) and may not span file systems.</p>
<p>
A symbolic link contains the name of the file to which it is linked.  The referenced file is used when an <i>open</i>(2) operation is performed on the link.  A <i>stat</i>(2) on a symbolic link will return the linked-to file; an <i>lstat</i>(2) must be done to obtain information about the link.  The <i>readlink</i>(2) call may be used to read the contents of a symbolic link.  Symbolic links may span file systems and may refer to directories.</p>
<p>
Given one or two arguments, <i>ln</i> creates a link to an existing file <i>source_file</i>.  If <i>target_file</i> is given, the link has that name; <i>target_file</i> may also be a directory in which to place the link; otherwise it is placed in the current directory.  If only the directory is specified, the link will be made to the last component of <i>source_file</i>.</p>
<p>
Given more than two arguments, <i>ln</i> makes links in <i>target_directory</i> to all the named source files.  The links made will have the same name as the files being linked to.</p>
<h2>HISTORY</h2>
<p>
An <i>ln</i> command appeared in Sixth Edition AT&amp;T UNIX.</p>
<h2>NAME</h2>
<p>
<b>ls</b> -- list directory contents.</p>
<p>
<b>SYNOPSIS</b></p>
ls <b>[</b>-ACFLRTacdfgiklqrstu1<b>]</b> <i>file</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
For each operand that names a <i>file</i> of a type other than directory, <i>ls</i> displays its name as well as any requested, associated information.  For each operand that names a <i>file</i> of type directory, <i>ls</i> displays the names of files contained within that directory, as well as any requested, associated information.</p>
<p>
If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, nondirectory operands are displayed first; directory and nondirectory operands are sorted separately and in lexicographical order.</p>
<p>
The following options are available.</p>
<p>
<b>-A</b></p>
<p>
Lists all entries except for "." and "..".  Always set for the superuser.</p>
<p>
<b>-C</b></p>
<p>
Forces multicolumn output; this is the default when output is to a terminal.</p>
<p>
<b>-F</b></p>
<p>
Displays a slash (/) immediately after each pathname that is a directory, an asterisk (*) after each that is executable, and an at sign (@) after each symbolic link.</p>
<p>
<b>-L</b></p>
<p>
If argument is a symbolic link, lists the file or directory the link references rather than the link itself.</p>
<p>
<b>-R</b></p>
<p>
Recursively lists subdirectories encountered.</p>
<p>
<b>-T</b></p>
<p>
Displays complete time information for the file, including month, day, hour, minute, second, and year.</p>
<p>
<b>-a</b></p>
<p>
Includes directory entries whose names begin with a dot (.).</p>
<p>
<b>-c</b></p>
<p>
Uses time when file status was last changed for sorting or printing.</p>
<p>
<b>-d</b></p>
<p>
Lists directories as plain files (not searched recursively).</p>
<p>
<b>-f</b></p>
<p>
Does not sort output.</p>
<p>
<b>-g</b></p>
<p>
Includes the group ownership of the file in a long "l" output "lg".  If the group is not a known group name, the numeric ID is printed.</p>
<p>
<b>-i</b></p>
<p>
For each file, prints the file's file serial number (inode number).</p>
<p>
<b>-k</b></p>
<p>
Modifies the <b>-s</b> option, causing the sizes to be reported in kilobytes.</p>
<p>
<b>-l</b></p>
<p>
(The lowercase letter "ell.")  Lists in long format.  (See below.)  If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing.</p>
<p>
<b>-q</b></p>
<p>
Forces printing of nongraphic characters in file names as the character '?'; this is the default when output is to a terminal.</p>
<p>
<b>-r</b></p>
<p>
Reverses the order of the sort to get reverse lexicographical order or the oldest entries first.</p>
<p>
<b>-s</b></p>
<p>
Displays the number of file system bytes actually used by each file, in units of 512, where partial units are rounded up to the next integer value.  If the output is to a terminal, a total sum for all the file sizes is output on a line before the listing.</p>
<p>
<b>-t</b></p>
<p>
Sort by time modified (most recently modified first) before sorting the operands by lexicographical order.</p>
<p>
<b>-u</b></p>
<p>
Uses time of last access, instead of last modification of the file for sorting "t" or printing "l".</p>
<p>
<b>-1</b></p>
<p>
(The numeric digit "one.")  Forces output to be one entry per line.  This is the default when output is not to a terminal.</p>
<p>
The <b>-1</b>, <b>-C</b>, and <b>-l</b> options all override each other; the last one specified determines the format used.</p>
<p>
The <b>-c</b> and <b>-u</b> options override each other; the last one specified determines the file time used.</p>
<p>
By default, <i>ls</i> lists one entry per line to standard output; the exceptions are to terminals or when the </p>
<p>
<b>-C</b> option is specified.</p>
<p>
File information is displayed with one or more <i>blank</i>s separating the information associated with </p>
<p>
the <b>-i</b>, <b>-s</b>, and <b>-l</b> options.</p>
<h2>THE LONG FORMAT</h2>
<p>
If the <b>-l</b> option is given, the following information will be displayed:  file mode, number of links, owner name, number of bytes in the file, abbreviated month, day-of-month file was last modified, hour file last modified, minute file last modified, and the pathname.</p>
<p>
If the owner name is not a known user name, the numeric ID is displayed.</p>
<p>
If the file is a character-special or block-special file, the major and minor device numbers for the file are displayed in the size field.  If the file is a symbolic link, the pathname of the linked-to file is preceded </p>
<p>
by "-&gt;".</p>
<p>
The file mode printed under the <b>-l</b> option consists of the the entry type, owner permissions, and group permissions.  The entry type character describes the type of file, as follows.</p>
<p>
<b>b</b>Block special file.</p>
<p>
<b>c</b>Character special file.</p>
<p>
<b>d</b>Directory.</p>
<p>
<b>l</b>Symbolic link.</p>
<p>
<b>s</b>Socket link.</p>
<p>
<b>-</b>Regular file.</p>
<p>
The next three fields are three characters each:  owner permissions, group permissions, and other permissions.  Each field has three character positions.</p>
<p>
If <b>r</b>, the file is readable; if <b>-</b>, it is not readable.</p>
<p>
If <b>w</b>, the file is writable; if <b>-</b>, it is not writable.</p>
<p>
The first of the following applies.</p>
<p>
<b>S</b>    If in the owner permissions, the file is not executable and set-user-ID mode is set.  If in the group permissions, the file is not executable and set-group-ID mode is set.</p>
<p>
<b>s</b>    If in the owner permissions, the file is executable and set-user-ID mode is set.  If in the group permissions, the file is executable and set-group-ID mode is set.</p>
<p>
<b>x</b>    The file is executable or the directory is searchable.</p>
<p>
<b>-</b>    The file is neither readable, writeable, exectutable, nor set-user-ID nor set-group-ID mode nor sticky.  (See below.)</p>
<p>
These next two apply only to the third character in the last group (other permissions).</p>
<p>
<b>T</b>    The sticky bit is set (mode <b>1000</b>) but is not executable nor contains search permission.  (See <i>chmod</i>(1) or <i>sticky</i>(8).)</p>
<p>
<b>t</b>    The sticky bit is set (mode <b>1000</b>) and is searchable or executable.  (See <i>chmod</i>(1) or <i>sticky</i>(8).)</p>
<p>
The <i>ls</i> utility exits 0 on success, and &gt;0 if an error occurs.</p>
<h2>ENVIRONMENT</h2>
<p>
The following environment variables affect the execution of <i>ls</i>:</p>
<p>
<b>COLUMNS</b></p>
<p>
If this variable contains a string representing a decimal integer, it is used as the column position width for displaying multiple- text-column output.  The <i>ls</i> utility calculates how many pathname text columns to display based on the width provided.  (See <b>-C</b>.)</p>
<h2>HISTORY</h2>
<p>
An <i>ls</i> command appeared in Sixth Edition AT&amp;T UNIX.</p>
<h2>NAME</h2>
<p>
<b>make</b> -- maintain program dependencies</p>
<h2>SYNOPSIS</h2>
make <b>[</b>-eiknqrstv<b>]</b> <b>[</b>-D <i>variable</i><b>]</b> <b>[</b>-d <i>flags</i><b>]</b> <b>[</b>-f <i>makefile</i><b>]</b>
<b>[</b>-I <i>directory</i><b>] [</b>-j <i>max_jobs</i><b>]</b> <b>[</b><i>variable</i>=<i>value</i> ...<b>]</b> target ...
</code>
<h2>DESCRIPTION</h2>
<p>
<i>make</i> is a program designed to simplify the maintenance of other programs.  Its input is a list of specifications as to the files upon which programs and other files depend.  If the file "makefile" exists, it is read for this list of specifications.  If it does not exist, the file "Makefile" is read.  If the file ".depend" exists, it is read.  This manual page is intended as a reference document only.</p>
<p>
The options follow.</p>
<p>
<b>-D</b> <i>variable</i></p>
<p>
Defines <i>variable</i> to be 1, in the global context.</p>
<p>
<b>-d</b> <i>flags</i></p>
<p>
Turns on debugging and specifies which portions of <i>make</i> are to print debugging information.  <i>flags</i> is one or more of the following:</p>
<p>
<b>A</b>                  Prints all possible debugging information; equivalent to specifying all of the debugging flags.</p>
<p>
<b>a</b>                   Prints debugging information about archive searching and caching.</p>
<p>
<b>c</b>                   Prints debugging information about conditional evaluation.</p>
<p>
<b>d</b>                   Prints debugging information about directory searching and caching.</p>
<p>
<b>g1</b>                 Prints the input graph before making anything.</p>
<p>
<b>g2</b>                 Prints the input graph after making everything or before exiting on error.</p>
<p>
<b>j</b>                    Prints debugging information about running multiple shells.</p>
<p>
<b>m</b>                  Prints debugging information about making targets, including modification dates.</p>
<p>
<b>s</b>                   Prints debugging information about suffix-transformation rules.</p>
<p>
<b>t</b>                   Prints debugging information about target list maintenance.</p>
<p>
<b>v</b>                  Prints debugging information about variable assignment.</p>
<p>
<b>-e</b>                 Specifies that environmental variables override macro assignments within makefiles.</p>
<p>
<b>-f</b> makefile     Specifies a makefile to read instead of the default "makefile" and "Makefile".  If makefile is -, standard input is read.  Multiple makefiles may be specified and are read in the order specified.</p>
<p>
<b>-I</b> <i>directory   </i>Specifies a directory in which to search for makefiles and included makefiles.  The system makefile directory is automatically included as part of this list.</p>
<p>
<b>-i</b>                   Ignores nonzero exit of shell commands in the makefile.  Equivalent to specifying <b>-</b> before each command line in the makefile.</p>
<p>
<b>-j</b> <i>max_jobs</i>   Specifies the maximum number of jobs that <i>make</i> may have running at any one time.</p>
<p>
<b>-k</b>                 Continues processing after errors are encountered but only on those targets that do not depend upon the target whose creation caused the error.</p>
<p>
<b>-n</b>                  Displays the commands that would have been executed, but do not actually execute them.</p>
<p>
<b>-q</b>                  Does not execute any commands but does exit 0 if the specified targets are up to date; otherwise, it specifies 1.</p>
<p>
<b>-r</b>                  Does not use the built-in rules specified in the system makefile.</p>
<p>
<b>-s</b>                  Does not echo any commands as they are executed.  Equivalent to specifying _B@ before each command line in the makefile.</p>
<p>
<b>-t</b>                  Rather than rebuilding a target as specified in the makefile, creates it or updates its modification time to make it appear up to date.</p>
<p>
<b>variable</b>=<b>value</b></p>
<p>
Set the value of the variable <i>variable</i> to <i>value</i>.</p>
<p>
There are six different types of lines in a makefile:  file dependency specifications, shell commands, variable assignments, include statements, conditional directives, and comments.</p>
<p>
In general, lines may be continued from one line to the next by ending them with a backslash ("\").  The trailing newline character and initial whitespace on the following line are compressed into a single space.</p>
<h2>FILE DEPENDENCY SPECIFICATIONS</h2>
<p>
Dependency lines consist of one or more targets, an operator, and zero or more sources.  This creates a relationship where the targets "depend" upon the sources and are usually created from them.  The exact relationship between the target and the source is determined by the operator that separates them.  The three operators are as follows:</p>
<p>
:</p>
<p>
A target is considered out of date if its modification time is less than those of any of its sources.  Sources for a target accumulate over dependency lines when this operator is used.  The target is removed if <i>make</i> is interrupted.</p>
<p>
!</p>
<p>
Targets are always re-created but not until all sources have been examined and re-created as necessary.  Sources for a target accumulate over dependency lines when this operator is used.  The target is removed if <i>make</i> is interrupted.</p>
<p>
::</p>
<p>
If no sources are specified, the target is always re-created.  Otherwise, a target is considered out of date if any of its sources has been modified more recently than the target.  Sources for a target do not accumulate over dependency lines when this operator is used.  The target will not be removed if <i>make</i> is interrupted.</p>
<p>
Targets and sources may contain the shell wildcard values "?", "*", "[]", and "{}".  The values "?", "*", and "[]" may only be used as part of the final component of the target or source and must be used to describe existing files.  The value "{}" need not necessarily be used to describe existing files.  Expansion is in directory order not alphabetically as done in the shell.</p>
<h2>SHELL COMMANDS</h2>
<p>
Each target may have associated with it a series of shell commands, normally used to create the target.  Each of the commands in this script <b>must</b> be preceded by a tab.  While any target may appear on a dependency line, only one of these dependencies may be followed by a creation script, unless the "::" operator is used.</p>
<p>
If the first or first two characters of the command line are "@" and/or "-", the command is treated specially.  A "@" causes the command not to be echoed before it is executed.  A "-" causes any nonzero exit status of the command line to be ignored.</p>
<h2>VARIABLE ASSIGNMENTS</h2>
<p>
Variables in <i>make</i> are much like variables in the shell; and, by tradition, consist of all uppercase letters.  The five operators that can be used to assign values to variables are as follows:</p>
<p>
<b>=</b></p>
<p>
Assigns the value to the variable.  Any previous value is overridden.</p>
<p>
<b>+=</b></p>
<p>
Appends the value to the current value of the variable.</p>
<p>
<b>?=</b></p>
<p>
Assigns the value to the variable if it is not already defined.</p>
<p>
<b>:=</b></p>
<p>
Assigns with expansion, i.e., expands the value before assigning it to the variable.  Normally, expansion is not done until the variable is referenced.</p>
<p>
<b>!=</b></p>
<p>
Expands the value and passes it to the shell for execution and assigns the result to the variable.  Any newlines in the result are replaced with spaces.</p>
<p>
Any white-space before the assigned value is removed; if the value is being appended, a single space is inserted between the previous contents of the variable and the appended value.</p>
<p>
Variables are expanded by surrounding the variable name with either curly braces ("{}") or parentheses ("()") and preceding it with a dollar sign ("$").  If the variable name contains only a single letter, the surrounding braces or parentheses are not required.  This shorter form is not recommended.</p>
<p>
Variable substitution occurs at two distinct times, depending upon where the variable is being used.  Variables in dependency lines are expanded as the line is read.  Variables in shell commands are expanded when the shell command is executed.</p>
<p>
The four different classes of variables (in order of increasing precedence) are:</p>
<p>
<b>Environment variables</b></p>
<p>
Variables defined as part of <i>make</i>'s environment.</p>
<p>
<b>Global variables</b></p>
<p>
Variables defined in the makefile or in included makefiles.</p>
<p>
<b>Command line variables</b></p>
<p>
Variables defined as part of the command line.</p>
<p>
<b>Local variables</b></p>
<p>
Variables that are defined specific to a certain target.  The seven local variables are as follows:</p>
<p>
<b>.ALLSRC     </b>The list of all sources for this target; also known as "&gt;".</p>
<p>
<b>.ARCHIVE   </b>The name of the archive file.</p>
<p>
<b>.IMPSRC      </b>The name/path of the source from which the target is to be transformed (the "implied" source); also known as "&lt;".</p>
<p>
<b>.MEMBER   </b>The name of the archive member.</p>
<p>
<b>.OODATE     </b>The list of sources for this target that were deemed out of date; also known as "?".</p>
<p>
<b>.PREFIX      </b>The file prefix of the file, containing only the file portion, no suffix or preceding directory components; also known as "*".</p>
<p>
<b>.TARGET    </b>The name of the target; also known as "@".  The shorter forms "@", "?", "&gt;", and "*" are permitted for backward compatibility with historical makefiles and are not recommended.  The six variables "@F", "@D", "&lt;F", "&lt;D", "*F", and "*D" are permitted for compatibility with AT&amp;T System V makefiles and are not recommended.</p>
<p>
Four of the local variables may be used in sources on dependency lines because they expand to the proper value for each target on the line.  These variables are ".TARGET", ".PREFIX", ".ARCHIVE", and ".MEMBER".</p>
<p>
In addition, <i>make</i> sets or knows about the following variables:</p>
<p>
<b>$</b></p>
<p>
A single dollar sign "$", i.e.  "$$" expands to a single dollar sign.</p>
<p>
<b>.MAKE</b></p>
<p>
The name that <i>make</i> was executed with (<i>argv[0]</i>).</p>
<p>
<b>.CURDIR</b></p>
<p>
A path to the directory where <i>make</i> was executed.</p>
<p>
<b>MAKEFLAGS</b></p>
<p>
The environment variable "MAKEFLAGS" may contain anything that may be specified on <i>make</i>'s command line.  Anything specified on <i>make</i>'s command line is appended to the "MAKEFLAGS" variable which is then entered into the environment for all programs which <i>make</i> executes.</p>
<p>
Variable expansion may be modified to select or modify each word of the variable (where a "word" is white-space delimited sequence of characters).  The general format of a variable expansion is:</p>
{variable[:modifier[:...]]}
</code>
<p>
Each modifier begins with a colon and one of the following special characters.  The colon may be escaped with a backslash ("\").</p>
<p>
<b>E</b></p>
<p>
Replaces each word in the variable with its suffix.</p>
<p>
<b>H</b></p>
<p>
Replaces each word in the variable with everything but the last component.</p>
<p>
<b>M</b> <i>pattern</i></p>
<p>
Selects only those words that match the rest of the modifier.  The standard shell wildcard characters ("*" and "?") may be used.  The wildcard characters may be escaped with a backslash ("\").</p>
<p>
<b>N</b> <i>pattern</i></p>
<p>
This is identical to <b>M</b>, but selects all words that do not match the rest of the modifier.</p>
<p>
<b>R</b></p>
<p>
Replaces each word in the variable with everything but its suffix.</p>
<p>
<b>S</b> <b>/</b><i>old_pattern</i><b>/</b><i>new_pattern</i><b>/</b>[<b>g</b>]</p>
<p>
Modifies the first occurrence of <i>old_pattern</i> in each word to be replaced with <i>new_pattern</i>.  If a <b>g</b> is appended to the last slash of the pattern, all occurrences in each word are replaced.  If <i>old_pattern</i> begins with a caret ("^"), <i>old_pattern</i> is anchored at the beginning of each word.  If <i>old_pattern</i> ends with a dollar sign ("$"), it is anchored at the end of each word.  Inside <i>new_string</i>, an ampersand ("&amp;") is replaced by <i>old_pattern</i>.  Any character may be used as a delimiter for the parts of the modifier string.  The anchoring, ampersand, and delimiter characters may be escaped with a backslash ("\").</p>
<p>
Variable expansion occurs in the normal fashion inside both <i>old_string</i> and <i>new_string</i> with the single exception that a backslash is used to prevent the expansion of a dollar sign ("$"), not a preceding dollar sign as is usual.</p>
<p>
<b>T</b></p>
<p>
Replaces each word in the variable with its last component.</p>
<p>
<b>old_string</b>=<b>new_string</b></p>
<p>
This is the AT&amp;T System V style variable substitution.  It must be the last modifier specified.  <i>old_string</i> is anchored at the end of each word, so only suffixes or entire words may be replaced.</p>
<h2>INCLUDE STATEMENTS AND CONDITIONALS</h2>
<p>
Makefile inclusion and conditional structures reminiscent of the C programming language are provided in <i>make</i>.  All such structures are identified by a line beginning with a single dot (".") character.  Files are included by either ".include &lt;<i>file</i>&gt;" or ".include "<i>file</i>"".  Variables between the angle brackets or double quotes are expanded to form the file name.  If angle brackets are used, the included makefile is expected to be in the system makefile directory.  If double quotes are used, the including makefile's directory and any directories specified using the <b>-I</b> option are searched before the system makefile directory.</p>
<p>
Conditional expressions also are preceded by a single dot as the first chraracter of a line.  The possible conditionals are listed below.</p>
<p>
<b>.undef</b> <i>variable</i></p>
<p>
Undefines the specified global variable.  Only global variables may be undefined.</p>
<p>
<b>.if</b> [ <b>!</b> ] <i>expression</i> [ <i>operator</i> <i>expression</i> ...  ]</p>
<p>
Tests the value of an <i>expression</i>.</p>
<p>
<b>.ifdef</b> [ <b>!</b> ] <i>variable</i> [ <i>operator</i> <i>variable</i> ...  ]</p>
<p>
Tests the value of a <i>variable</i>.</p>
<p>
<b>.ifndef</b> [ <b>!</b> ] <i>variable</i> [ <i>operator</i> <i>variable</i> ...  ]</p>
<p>
Tests the value of a <i>variable</i>.</p>
<p>
<b>.ifmake</b> [ <b>!</b> ] <i>target</i> [ <i>operator</i> <i>target</i> ...  ]</p>
<p>
Tests the <i>target</i> being built.</p>
<p>
<b>.ifnmake</b> [ <b>!</b> ] <i>target</i> [ <i>operator</i> <i>target</i> ...  ]</p>
<p>
Tests the <i>target</i> being built.</p>
<p>
<b>.else</b></p>
<p>
Reverses the sense of the last conditional.</p>
<p>
<b>.elif</b> [ <b>!</b> ] <i>expression</i> [ <i>operator</i> <i>expression</i> ...  ]</p>
<p>
A combination of <b>.else</b> followed by <b>.if</b>.</p>
<p>
<b>.elifdef</b> [ <b>!</b> ] <i>variable</i> [ <i>operator</i> <i>variable</i> ...  ]</p>
<p>
A combination of <b>.else</b> followed by <b>.ifdef</b>.</p>
<p>
<b>.elifndef</b> [ <b>!</b> ] <i>variable</i> [ <i>operator</i> <i>variable</i> ...  ]</p>
<p>
A combination of <b>.else</b> followed by <b>.ifndef</b>.</p>
<p>
<b>.elifmake</b> [ <b>!</b> ] <i>target</i> [ <i>operator</i> <i>target</i> ...  ]</p>
<p>
A combination of <b>.else</b> followed by <b>.ifmake</b>.</p>
<p>
<b>.elifnmake</b> [ <b>!</b> ] <i>target</i> [ <i>operator</i> <i>target</i> ...  ]</p>
<p>
A combination of <b>.else</b> followed by <b>.ifnmake</b>.</p>
<p>
<b>.endif</b></p>
<p>
Ends the body of the conditional.</p>
<p>
The <i>operator</i> may be any one of the following:</p>
<b>||</b> logical OR

<b>&amp;&amp;</b> Logical AND; of higher precedence than ||.
</code>
<p>
As in C, <i>make</i> will only evaluate a conditional as far as is necessary to determine its value.  Parentheses may be used to change the order of evaluation.  The boolean operator "!" may be used to logically negate an entire conditional.  It is of higher precendence than "&amp;&amp;".</p>
<p>
The value of <i>expression</i> may be any of the following.</p>
<p>
<b>defined</b></p>
<p>
Takes a variable name as an argument and evaluates to true if the variable has been defined.</p>
<p>
<b>make</b></p>
<p>
Takes a target name as an argument and evaluates to true if the target was specified as part of <i>make</i>'s command line or was declared the default target (either implicitly or explicitly, see <b>.MAIN</b>) before the line containing the conditional.</p>
<p>
<b>empty</b></p>
<p>
Takes a variable, with possible modifiers, and evaluates to true if the expansion of the variable would result in an empty string.</p>
<p>
<b>exists</b></p>
<p>
Takes a file name as an argument and evaluates to true if the file exists.  The file is searched for on the system search path (see <b>.PATH</b>).</p>
<p>
<b>target</b></p>
<p>
Takes a target name as an argument and evaluates to true if the target has been defined.</p>
<p>
<i>expression</i> also may be an arithmetic or string comparison, with the left-hand side being a variable expansion.  The standard C relational operators are all supported, and the usual number/base conversion is performed.  Note, octal numbers are not supported.  If the righthand value of a "==" or "!=" operator begins with a quotation mark ("") a string comparison is done between the expanded variable and the text between the quotation marks.  If no relational operator is given, it is assumed that the expanded variable is being compared against 0.</p>
<p>
When <i>make</i> is evaluating one of these conditional expressions and it encounters a word it does not recognize, either the "make" or "defined" expression is applied to it, depending upon the form of the conditional.  If the form is <b>.ifdef</b> or <b>.ifndef</b>, the "defined" expression is applied.  Similarly, if the form is <b>.ifmake</b> or <b>.ifnmake</b>, the "make" expression is applied.</p>
<p>
If the conditional evaluates to true, the parsing of the makefile continues as before.  If it evaluates to false, the following lines are skipped.  In both cases this continues until a <b>.else</b> or <b>.endif</b> is found.</p>
<h2>COMMENTS</h2>
<p>
Comments begin with a number sign ("#") character, anywhere but in a shell command line, and continue to the end of the line.</p>
<h2>SPECIAL SOURCES</h2>
<p>
<b>.IGNORE</b></p>
<p>
Ignores any errors from the commands associated with this target, exactly as if they all were preceded by a dash ("-").</p>
<p>
<b>.MAKE</b></p>
<p>
Executes the commands associated with this target, even if the <b>-n</b> or <b>-t</b> options were specified.  Normally used to mark recursive <i>make</i>'s.</p>
<p>
<b>.NOTMAIN</b></p>
<p>
Normally, <i>make</i> selects the first target it encounters as the default target to be built if no target was specified.  This source prevents this target from being selected.</p>
<p>
<b>.OPTIONAL</b></p>
<p>
If a target is marked with this attribute and <i>make</i> cannot determine how to create it, it will ignore this fact and assume that the file is not needed or already exists.</p>
<p>
<b>.PRECIOUS</b></p>
<p>
When <i>make</i> is interrupted, it removes any partially made targets.  This source prevents the target from being removed.</p>
<p>
<b>.SILENT</b></p>
<p>
Does not echo any of the commands associated with this target, exactly as if they all were preceded by an at sign ("@").</p>
<p>
<b>.USE</b></p>
<p>
Turns the target into <i>make</i>'s version of a macro.  When the target is used as a source for another target, the other target acquires the commands, sources, and attributes (except for <b>.USE</b>) of the source.  If the target already has commands, the <b>.USE</b> target's commands are appended to them.</p>
<h2>SPECIAL TARGETS</h2>
<p>
Special targets may not be included with other targets; i.e., they must be the only target specified.</p>
<p>
<b>.BEGIN</b></p>
<p>
Any command lines attached to this target are executed before anything else is done.</p>
<p>
<b>.DEFAULT</b></p>
<p>
This is sort of a <b>.USE</b> rule for any target (that was used only as a source) that <i>make</i> cannot figure out any other way to create.  Only the shell script is used.  The <b>.IMPSRC</b> variable of a target that inherits <b>.DEFAULT</b>'s commands is set to the target's own name.</p>
<p>
<b>.END</b></p>
<p>
Any command lines attached to this target are executed after everything else is done.</p>
<p>
<b>.IGNORE</b></p>
<p>
Marks each of the sources with the <b>.IGNORE</b> attribute.  If no sources are specified, this is the equivalent of specifying the <b>-i</b> option.</p>
<p>
<b>.INTERRUPT</b></p>
<p>
If <i>make</i> is interrupted, the commands for this target will be executed.</p>
<p>
<b>.MAIN</b></p>
<p>
If no target is specified when <i>make</i> is invoked, this target will be built.</p>
<p>
<b>.MAKEFLAGS</b></p>
<p>
This target provides a way to specify flags for <i>make</i> when the makefile is used.  The flags are as if typed to the shell, though the <b>-f</b> option will have no effect.</p>
<p>
<b>.PATH</b></p>
<p>
The sources are directories that are to be searched for files not found in the current directory.  If no sources are specified, any previously specified directories are deleted.</p>
<p>
<b>.PRECIOUS</b></p>
<p>
Applies the <b>.PRECIOUS</b> attribute to any specified sources.  If no sources are specified, the <b>.PRECIOUS</b> attribute is applied to every target in the file.</p>
<p>
<b>.SILENT</b></p>
<p>
Applies the <b>.SILENT</b> attribute to any specified sources.  If no sources are specified, the <b>.SILENT</b> attribute is applied to every command in the file.</p>
<p>
<b>.SUFFIXES</b></p>
<p>
Each source specifies a suffix to <i>make</i>.  If no sources are specified, any previously specified suffixes are deleted.</p>
<h2>ENVIRONMENT</h2>
<p>
<i>make</i> utilizes the following environment variables, if they exist:  MAKE, MAKEFLAGS,and MAKEOBJDIR.</p>
<h2>FILES</h2>
<p>
<b>.depend</b> list of dependencies</p>
<p>
<b>Makefile</b> list of dependencies</p>
<p>
<b>makefile</b> list of dependencies</p>
<p>
<b>sys.mk</b> system makefile</p>
<p>
<b>/usr/share/mk</b> system makefile directory</p>
<h2>HISTORY</h2>
<p>
A <i>make</i> command appeared in Seventh Edition AT&amp;T UNIX.</p>
<h2>NAME</h2>
<p>
<b>mkdir</b> -- make directories</p>
<p>
<b>SYNOPSIS</b></p>
mkdir <b>[</b>-p<b>]</b> <i>directory_name</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
<i>mkdir</i> creates the directories named as operands, in the order specified, using mode <b>0777</b> modified by the current <i>umask</i>.</p>
<p>
The options follow.</p>
<p>
<b>-p</b></p>
<p>
Creates intermediate directories as required.  If this option is not specified, the full path prefix of each operand must already exist.</p>
<p>
The user must have write permission in the parent directory.</p>
<p>
<i>mkdir</i> exits 0 if successful and &gt;0 if an error occurred.</p>
<h2>STANDARDS</h2>
<p>
<i>mkdir</i> is POSIX 1003.2-compliant.  This manual page is derived from the POSIX 1003.2 manual page.</p>
<h2>NAME</h2>
<p>
<b>mv</b> -- move files</p>
<p>
<b>SYNOPSIS</b></p>
mv <b>[-</b>f | -i<b>]</b> <i>source</i> <i>target</i>
mv <b>[-</b>f | -i<b>]</b> <i>source</i> ... <i>directory</i>
</code>
<h2>DESCRIPTION</h2>
<p>
In its first form, the <i>mv</i> utility renames the file named by the <i>source </i>operand to the destination path named by the <i>target</i> operand.  This form is assumed when the last operand does not name an already existing directory.</p>
<p>
In its second form, <i>mv</i> moves each file named by a <i>source</i> operand to a destination file in the existing directory named by the <i>directory </i>operand.  The destination path for each operand is the pathname produced by the concatenation of the last operand, a slash, and the final pathname component of the named file.</p>
<p>
The following options are available.</p>
<p>
<b>-f</b></p>
<p>
Does not prompt for confirmation before overwriting the destination path.  (The <b>-i</b> option is ignored if the <b>-f</b> option is specified.)</p>
<p>
<b>-i</b></p>
<p>
Causes <i>mv</i> to write a prompt to standard error before moving a file that would overwrite an existing file.  If the response from the standard input begins with the character "y'", the move is attempted.</p>
<p>
It is an error for either the <i>source</i> operand or the destination path to specify a directory unless both do.</p>
<p>
If the destination path does not have a mode that permits writing, <i>mv </i>prompts the user for confirmation as specified for the <b>-i</b> option.</p>
<p>
As the <i>rename</i>(2) call does not work across file systems, <i>mv</i> uses <i>cp</i>(1) and <i>rm</i>(1) to accomplish the move. The effect is equivalent to:</p>
rm -f destination_path &amp;&amp; \
     cp -pr <i>source</i> destination_path &amp;&amp; \
     rm -rf <i>source</i>
</code>
<p>
The <i>mv</i> utility exits 0 on success and &gt;0 if an error occurs.</p>
<h2>STANDARDS</h2>
<p>
The <i>mv</i> utility is expected to be POSIX 1003.2-compatible.</p>
<h2>NAME</h2>
<p>
<b>rm</b> -- remove directory entries</p>
<p>
<b>SYNOPSIS</b></p>
rm <b>[</b>-f | -i<b>]</b> <b>[</b>-d<b>]</b> <b>[</b>-R<b>]</b> <b>[</b>-r<b>]</b> <i>file</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>rm</i> utility attempts to remove the nondirectory type files specified on the command line.  If the permissions of the file do not permit writing and the standard input device is a terminal, the user is prompted (on the standard error output) for confirmation.</p>
<p>
The options are listed below.</p>
<p>
<b>-d</b></p>
<p>
Attempts to remove directories as well as other types of files.</p>
<p>
<b>-f</b></p>
<p>
Attempts to remove the files without prompting for confirmation, regardless of the file's permissions.  If the file does not exist, does not display a diagnostic message nor modify the exit status to reflect an error.  The <b>-f</b> option overrides any previous <b>-i</b> options.</p>
<p>
<b>-i</b></p>
<p>
Requests confirmation before attempting to remove each file, regardless of the file's permissions or whether or not the standard input device is a terminal.  The <b>-i</b> option overrides any previous </p>
<p>
<b>-f </b>options.</p>
<p>
<b>-R</b></p>
<p>
Attempts to remove the file hierarchy rooted in each file argument.  The <b>-R</b> option implies the </p>
<p>
<b>-d</b> option.  If the <b>-i</b> option is specified, the user is prompted for confirmation before each directory's contents are processed (as well as before the attempt is made to remove the directory).  If the user does not respond affirmatively, the file hierarchy rooted in that directory is skipped.</p>
<p>
<b>-r</b></p>
<p>
Equivalent to <b>-R</b>.</p>
<p>
The <i>rm</i> utility removes symbolic links, not the files referenced by the links.</p>
<p>
It is an error to attempt to remove the files "." and "..".</p>
<p>
The <i>rm</i> utility exits 0 if all of the named files or file hierarchies were removed or if the <b>-f</b> option was specified and all of the existing files or file hierarchies were removed.  If an error occurs, <i>rm</i> exits with a value &gt;0.</p>
<h2>COMPATIBILITY</h2>
<p>
The <i>rm</i> utility differs from historical implementations in that the <b>-f </b>option only masks attempts to remove nonexistent files instead of masking a large variety of errors.</p>
<p>
Also, historical <i>rm</i> implementations prompted on the standard output not the standard error output.</p>
<h2>STANDARDS</h2>
<p>
The <i>rm</i> command is expected to be POSIX 1003.2-compatible.</p>
<h2>NAME</h2>
<p>
<b>rmdir</b> -- remove directories</p>
<p>
<b>SYNOPSIS</b></p>
rmdir <i>directory</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>rmdir</i> utility removes the directory entry specified by each <i>directory </i>argument, provided it is empty.</p>
<p>
Arguments are processed in the order given.  To remove both a parent directory and a subdirectory of that parent, the subdirectory must be specified first so that the parent directory is empty when <i>rmdir</i> tries to remove it.</p>
<p>
The <i>rmdir</i> utility exits with one of the following values:</p>
<p>
<b>0</b>    Each directory entry specified by a <i>directory</i> operand referred to an empty directory and was removed successfully.</p>
<p>
<b>&gt;0</b>  An error occurred.</p>
<h2>STANDARDS</h2>
<p>
The <i>rmdir</i> function is expected to be POSIX 1003.2-compatible.</p>
<h2>NAME</h2>
<p>
<b>ash</b> -- a shell</p>
<p>
<b>SYNOPSIS</b></p>
ash <b>[</b>-efIijnsxz<b>]</b> <b>[</b>+efIijnsxz<b>]</b> <b>[</b>-c <i>command</i><b>]</b> <b>[</b><i>arg</i><b>]</b> ...
</code>
<h2>COPYRIGHT</h2>
<p>
Copyright © 1989 by Kenneth Almquist.</p>
<h2>DESCRIPTION</h2>
<p>
<i>ash</i> is a version of <i>sh</i>(1) with features similar to those of the System V shell.  This manual page lists all the features of <i>ash</i> but concentrates upon the ones not in other shells.</p>
<p>
<b>Invocation</b></p>
<p>
If the <b>-c</b> option is given, then the shell executes the specified shell command.  The <b>-s</b> flag causes the shell to read commands from the standard input (after executing any command specified with the <b>-c</b> option).  If neither the <b>-s</b> nor <b>-c</b> options are set, then the first <i>arg</i> is taken as the name of a file to read commands from.  If this is impossible because there are no arguments following the options, then <i>ash</i> will set the <b>-s </b>flag and will read commands from the standard input.</p>
<p>
The shell sets the initial value of the positional parameters from the <i>arg</i>s remaining after any <i>arg</i> used as the name of a file of commands is deleted.</p>
<p>
The flags (other than <b>-c</b>) are set by preceding them with "-" and cleared by preceding them with "+"; see the <i>set</i> built-in command for a list of flags.  If no value is specified for the <b>-i</b> flag, the <b>-s</b> flag is set and the standard input and output of the shell are connected to terminals; then, the <b>-i</b> flag will be set.  If no value is specified for the <b>-j</b> flag, then the <b>-j</b> flag will be set if the <b>-i</b> flag is set.</p>
<p>
When the shell is invoked with the <b>-c</b> option, it is good practice to include the <b>-i</b> flag if the command was entered interactively by a user.  For compatibility with the System V shell, the <b>-i</b> option should come after the <b>-c</b> option.</p>
<p>
If the first character of argument zero to the shell is "-", the shell is assumed to be a login shell; and the files <b>/etc/profile</b> and <b>.profile </b>are read if they exist.  If the environment variable SHINIT is set upon entry to the shell, the commands in SHINIT are normally parsed and executed.  SHINIT is not examined if the shell is a login shell or if it the shell is running a shell procedure.  (A shell is considered to be running a shell procedure if neither the <b>-s</b> nor the <b>-c</b> options are set.)</p>
<p>
<b>Control Structures</b></p>
<p>
A <i>list</i> is a sequence of zero or more commands separated by newlines, semicolons, or ampersands, and optionally terminated by one of these three characters.  (This differs from the System V shell, which, in most cases, requires a list to contain at least one command.)  The commands in a list are executed in the order in which they are written.  If a command is followed by an ampersand, the shell starts the command and immediately proceeds on to the next command; otherwise it waits for the command to terminate before proceeding to the next one.</p>
<p>
"&amp;&amp;" and "||" are binary operators.  "&amp;&amp;" executes the first command and then executes the second command if the exit status of the first command is zero.  "||" is similar but executes the second command if the exit status of the first command is nonzero.  "&amp;&amp;" and "||" both have the same priority.</p>
<p>
The "|" operator is a binary operator that feeds the standard output of the first command into the standard input of the second command.  The exit status of the "|" operator is the exit status of the second command.  "|" has a higher priority than "||" or "&amp;&amp;".</p>
<p>
An <i>if</i> command looks like the following example.</p>
<b>if</b> list
<b>     then</b> list
   [ <b>elif</b> list
<b>       then</b> list ] ...
   [ <b>else</b> list ]
<b>     fi</b>
</code>
<p>
A <i>while</i> command looks like the following example.</p>
<b>while</b> list
<b>     do</b>   list
<b>     done</b>
</code>
<p>
The two lists are executed repeatedly while the exit status of the first list is zero.  The <i>until</i> command is similar; however, it has the word <b>until</b> in place of <b>while</b> and repeats until the exit status of the first list is zero.</p>
<p>
The <i>for</i> command looks like the following example.</p>
<b>for</b> variable <b>in</b> word...
<b>     do</b>   list
<b>     done</b>
</code>
<p>
The words are expanded; and, then, the list is executed repeatedly with the variable set to each word in turn.  <b>do</b> and <b>done</b> may be replaced with "{" and "}".</p>
<p>
The <i>break</i> and <i>continue</i> commands look like the following example.</p>
<b>break</b> [ num ]
<b>     continue</b> [ num ]
</code>
<p>
<b>break</b> terminates the <i>num</i>'ths innermost <b>for</b> or <b>while</b> loops.  <b>continue </b>continues with the next iteration of the <i>num</i>'ths innermost loop.  These are implemented as built-in commands.</p>
<p>
The <i>case</i> command looks like the following example.</p>
<b>case</b> word <b>in</b>
     pattern<b>)</b> list <b>;;</b>
     ...
<b>     esac</b>
</code>
<p>
The pattern can actually be one or more patterns (see <b>Patterns</b> below) separated by "|" characters.</p>
<p>
Commands may be grouped by writing either one of the following.</p>
<b>(</b>list<b>)</b></code>
<p>
or</p>
<b>{</b> list; <b>}</b>
</code>
<p>
The first of these executes the commands in a subshell.</p>
<p>
A function definition looks like the following example.</p>
name <b>(</b> <b>)</b> command
</code>
<p>
A function definition is an executable statement; when executed it installs a function named <i>name</i> and returns an exit status of zero.  The command is normally a list enclosed between "{" and "}".</p>
<p>
Variables may be declared to be local to a function by using a <i>local </i>command.  This should appear as the first statement of a function; it should looks like the following example.</p>
<b>local</b> [ variable | <b>-</b> ] ...
</code>
<p>
<i>local</i> is implemented as a built-in command.</p>
<p>
When a variable is made local, it inherits the initial value and exported and read-only flags from the variable with the same name in the surrounding scope, if there is one.  Otherwise, the variable is initially unset.  <i>ash</i> uses dynamic scoping so that, if you make the variable <i>x </i>local to function <i>f</i>, which then calls function <i>g</i>, references to the variable <i>x</i> made inside <i>g</i> will refer to the variable <i>x</i> declared inside <i>f</i>, not to the global variable named <i>x</i>.</p>
<p>
The only special parameter that can be made local is "-".  Making "-" local sets any shell options that are changed via the <i>set</i> command inside the function to be restored to their original values when the function returns.</p>
<p>
The <i>return</i> command looks like the following example.</p>
<b>return</b> [ exitstatus ]
</code>
<p>
It terminates the currently executing function.  <i>return</i> is implemented as a built-in command.</p>
<p>
<b>Simple Commands</b></p>
<p>
A simple command is a sequence of words.  The execution of a simple command proceeds as follows.  First, the leading words of the form "name=value" are stripped off and assigned to the environment of the command.  Second, the words are expanded.  Third, the first remaining word is taken as the command name of the command that is located.  Fourth, any redirections are performed.  Fifth, the command is executed.  We look at these operations in reverse order.</p>
<p>
The execution of the command varies with the type of command.  There are three types of commands:  shell functions, built-in commands, and normal programs.</p>
<p>
When a shell function is executed, all of the shell positional parameters (except $0, which remains unchanged) are set to the parameters to the shell function.  The variables that are explicitly placed in the environment of the command (by placing assignments to them before the function name) are made local to the function and are set to values given.  Then, the command given in the function definition is executed.  The positional parameters are restored to their original values when the command completes.</p>
<p>
Shell built-ins are executed internally to the shell, without spawning a new process.</p>
<p>
When a normal program is executed, the shell runs the program, passing the parameters and the environment to the program.  If the program is a shell procedure, the shell will interpret the program in a subshell.  The shell will reinitialize itself in this case, so that the effect will be as if a new shell had been invoked to handle the shell procedure, except that the location of commands located in the parent shell will be remembered by the child.  If the program is a file beginning with "#!", the remainder of the first line specifies an interpreter for the program.  In this case, the shell (or the operating system, under Berkeley UNIX) will run the interpreter.  The arguments to the interpreter will consist of any arguments given on the first line of the program, followed by the name of the program, followed by the arguments passed to the program.</p>
<p>
<b>Redirection</b></p>
<p>
Input/output redirections can be intermixed with the words in a simple command and can be placed following any of the other commands.  When redirection occurs, the shell saves the old values of the file descriptors and restores them when the command completes.  The "&lt;", "&gt;", and "&gt;&gt;" redirections open a file for input, output, and appending, respectively.  The "&lt;&amp;digit" and "&gt;&amp;digit" makes the input or output a duplicate of the file descriptor numbered by the digit.  If a minus sign is used in place of a digit, the standard input or the standard output is closed.</p>
<p>
The "&lt;&lt; word" redirection takes input from a <i>here</i> document.  As the shell encounters "&lt;&lt;" redirections, it collects them.  The next time it encounters an unescaped newline, it reads the documents in turn.  The word following the "&lt;&lt;" specifies the contents of the line that terminates the document.  If none of the quoting methods ('', "", or \) are used to enter the word, then the document is treated like a word inside double quotes:  "$" and backquote are expanded and backslash can be used to escape these and to continue long lines.  The word cannot contain any variable or command substitutions, and its length (after quoting) must be in the range of 1 to 79 characters.  If "&lt;&lt;-" is used in place of "&lt;&lt;", then leading tabs are deleted from the lines of the document.  (This is to allow you to do indent shell procedures containing here documents in a natural fashion.)</p>
<p>
Any of the preceding redirection operators may be preceded by a single digit specifying the file descriptor to be redirected.  There cannot be any white space between the digit and the redirection operator.</p>
<p>
<b>Path Search</b></p>
<p>
When locating a command, the shell first looks to see if it has a shell function by that name.  Then, if PATH does not contain an entry for "%builtin", it looks for a built-in command by that name.  Finally, it searches each entry in PATH in turn for the command.</p>
<p>
The value of the PATH variable should be a series of entries separated by colons.  Each entry consists of a directory name, or a directory name followed by a flag beginning with a percent sign.  The current directory should be indicated by an empty directory name.</p>
<p>
If no percent sign is present, then the entry causes the shell to search for the command in the specified directory.  If the flag is "%builtin", then the list of shell built-in commands is searched.  If the flag is "%func", then the directory is searched for a file that is read as input to the shell.  This file should define a function whose name is the name of the command being searched for.</p>
<p>
Command names containing a slash are simply executed without performing any of the above searches.</p>
<p>
<b>The Environment</b></p>
<p>
The environment of a command is a set of name/value pairs.  When the shell is invoked, it reads these names and values, sets the shell variables with these names to the corresponding values, and marks the variables as exported.  The <i>export</i> command can be used to mark additional variables as exported.</p>
<p>
The environment of a command is constructed by constructing name/value pairs from all the exported shell variables, and then by modifying this set by the assignments that precede the command, if any.</p>
<p>
<b>Expansion</b></p>
<p>
The process of evaluating words when a shell procedure is executed is called <i>expansion</i>.  Expansion consists of four steps:  variable substitution, command substitution, word splitting, and file name generation.  If a word is the expression following the word <b>case</b> in a case statement, the file name that follows a redirection symbol, or an assignment to the environment of a command, then the word cannot be split into multiple words.  In these cases, the last two steps of the expansion process are omitted.</p>
<p>
<b>Command Substitution</b></p>
<p>
<i>ash</i> accepts two syntaxes for command substitution, as listed below.</p>
'list'</code>
<p>
and</p>
<b>$(</b><i>list</i><b>)</b>
</code>
<p>
Either of these may be included in a word.  During the command substitution process, the command (syntactically a <i>list</i>) will be executed, and anything that the command writes to the standard output will be captured by the shell.  The final newline (if any) of the output will be deleted; the rest of the output will be substituted for the command in the word.</p>
<p>
<b>Word Splitting</b></p>
<p>
When the value of a variable or the output of a command is substituted, the resulting text is subject to word splitting, unless the dollar sign introducing the variable or backquotes containing the text were enclosed in double quotes.  In addition, "$@" is subject to a special type of splitting, even in the presence of double quotes.</p>
<p>
<i>ash</i> uses two different splitting algorithms.  The normal approach, which is intended for splitting text separated by white space, is used if the first character of the shell variable IFS is a space.  Otherwise, an alternative experimental algorithm, which is useful for splitting (possibly empty) fields separated by a separator character, is used.</p>
<p>
When performing splitting, the shell scans the replacement text looking for a character (when IFS does not begin with a space) or a sequence of characters (when IFS does begin with a space), deletes the character or sequence of characters, and spits the word into two strings at that point.  When IFS begins with a space, the shell deletes either of the strings if they are null.  As a special case, if the word containing the replacement text is the null string, the word is deleted.</p>
<p>
The variable "$@" is special in two ways.  First, splitting takes place between the positional parameters, even if the text is enclosed in double quotes.  Second, if the word containing the replacement text is the null string and there are no positional parameters, then the word is deleted.  The result of these rules is that "$@" is equivalent to "$1" "$2" ...  "$<i>n</i>", where <i>n</i> is the number of positional parameters.  (Note that this differs from the System V shell.  The System V documentation claims that "$@" behaves this way; in fact on the System V shell "$@" is equivalent to "" when there are no positional paramteters.)</p>
<p>
<b>File Name Generation</b></p>
<p>
Unless the <b>-f</b> flag is set, file name generation is performed after word splitting is complete.  Each word is viewed as a series of patterns, separated by slashes.  The process of expansion replaces the word with the names of all existing files whose names can be formed by replacing each pattern with a string that matches the specified pattern.  There are two restrictions on this:  first, a pattern cannot match a string containing a slash; and, second, a pattern cannot match a string starting with a period unless the first character of the pattern is a period.</p>
<p>
If a word fails to match any files and the <b>-z</b> flag is not set, then the word will be left unchanged (except that the meta characters will be converted to normal characters).  If the <b>-z</b> flag is set, then the word is only left unchanged if none of the patterns contain a character that can match anything other than itself.  Otherwise, the <b>-z</b> flag forces the word to be replaced with the names of the files that it matches, even if there are zero names.</p>
<p>
<b>Patterns</b></p>
<p>
A <i>pattern</i> consists of normal characters, which match themselves, and meta characters.  The meta characters are "!", "*", "?", and "[".  These characters lose there special meanings if they are quoted.  When command or variable substitution is performed and the dollar sign or back quotes are not double quoted, the value of the variable or the output of the command is scanned for these characters and they are turned into meta characters.</p>
<p>
Two exclamation points at the beginning of a pattern function as a "not" operator, causing the pattern to match any string that the remainder of the pattern does <i>not</i> match.  Other occurrences of exclamation points in a pattern match exclamation points.  Two exclamation points are required, rather than one, to decrease the incompatibility with the System V shell (which does not treat exclamation points specially).</p>
<p>
An asterisk ("*") matches any string of characters.  A question mark matches any single character.  A left bracket ("[") introduces a character class.  The end of the character class is indicated by a "]"; if the "]" is missing, then the "[" matches a "[" rather than introducing a character class.  A character class matches any of the characters between the square brackets.  A range of characters may be specified using a minus sign.  The character class may be complemented by making an exclamation point of the first character of the character class.</p>
<p>
To include a "]" in a character class, make it the first character listed (after the "!", if any).  To include a minus sign, make it the first or last character listed.</p>
<p>
<b>The /u Directory</b></p>
<p>
By convention, the name "/u/user" refers to the home directory of the specified user.  There are good reasons why this feature should be supported by the file system (using a feature such as symbolic links) rather than by the shell, but <i>ash</i> is capable of performing this mapping if the file system does not.  If the mapping is done by <i>ash</i>, setting the <b>-f</b> flag will turn it off.</p>
<p>
<b>Character Set</b></p>
<p>
<i>ash</i> silently discards NUL characters.  Any other character will be handled correctly by <i>ash</i>, including characters with the high-order bit set.</p>
<p>
<b>Job Names and Job Control</b></p>
<p>
The term <i>job</i> refers to a process created by a shell command or, in the case of a pipeline, to the set of processes in the pipeline.  The ways to refer to a job follow.</p>
<i><code><b>%</b>number <b>%</b>string <b>%%</b> process_id
</code></i>
<p>
The first form identifies a job by its job number.  When a command is run, <i>ash </i>assigns it a job number (the lowest unused number is assigned).  The second form identifies a job by giving a prefix of the command used to create the job.  The prefix must be unique.  If there is only one job, then the null prefix will identify the job, so you can refer to the job by writing "%".  The third form refers to the <i>current</i> <i>job</i>.  The current job is the last job to be stopped while it was in the foreground.  (See the next paragraph.)  The last form identifies a job by giving the process id of the last process in the job.</p>
<p>
If the operating system that <i>ash</i> is running on supports job control, <i>ash </i>will allow you to use it.  In this case, typing the suspend character (typically ^Z) while running a command will return you to <i>ash</i> and will make the suspended command the current job.  You can then continue the job in the background by typing <i>bg</i>, or you can continue it in the foreground by typing <i>fg</i>.</p>
<p>
<b>ATTY</b></p>
<p>
If the shell variable ATTY is set and the shell variable TERM is not set to "emacs", then <i>ash</i> generates appropriate escape sequences to talk to <i>atty</i>(1).</p>
<p>
<b>Exit Statuses</b></p>
<p>
By tradition, an exit status of zero means that a command has succeeded, and a nonzero exit status indicates that the command failed.  This is better than no convention at all; but, in practice, it is extremely useful to allow commands that succeed to use the exit status to return information to the caller.  A variety of better conventions have been proposed, but none of them has met with universal approval.  The convention used by <i>ash</i> and all the programs included in the <i>ash </i>distribution follows.</p>
<p>
0Success</p>
<p>
1Alternate success</p>
<p>
2Failure</p>
<p>
129-...Command terminated by a signal</p>
<p>
The <i>alternate</i> <i>success</i> return is used by commands to indicate various conditions that are not errors but which can, with a little imagination, be conceived of as less successful than plain success.  For example, <i>test </i>returns 1 when the tested condition is false and <i>getopts</i> returns 1 when there are no more options.  Because this convention is not used universally, the <b>-e</b> option of <i>ash</i> causes the shell to exit when a command returns 1, even though that contradicts the convention described here.</p>
<p>
When a command is terminated by a signal, it uses 128 plus the signal number as the exit code for the command.</p>
<p>
<b>Built-in Commands</b></p>
<p>
This concluding section lists the built-in commands that are built in because they need to perform some operation that cannot be performed by a separate process.  In addition to these, there are several other commands (<i>catf</i>, <i>echo</i>, <i>expr</i>, <i>line</i>, <i>nlecho</i>, <i>test</i>, ":", and <i>true</i>) that can optionally be compiled into the shell.  The built-in commands described below that accept options use the System V Release 2 <i>getopt</i>(3) syntax.</p>
<p>
<b>bg</b> [ <i>job</i> ] ...</p>
<p>
Continues the specified jobs (or the current job if no jobs are given) in the background.  This command is only available on systems with Berkeley job control.</p>
<p>
<b>bltin</b> <i>command</i> <i>arg</i> ...</p>
<p>
Executes the specified built-in command.  (This is useful when you have a shell function with the same name as a built-in command.)</p>
<p>
<b>cd</b> [ <i>directory</i> ]</p>
<p>
Switchs to the specified directory (default $HOME).  If an entry for CDPATH appears in the environment of the cd command or the shell variable CDPATH is set and the directory name does not begin with a slash, then the directories listed in CDPATH will be searched for the specified directory.  The format of CDPATH is the same as that of PATH.  In an interactive shell, the cd command will print out the name of the directory that it actually switched to if this is different from the name that the user gave.  These may be different either because the CDPATH mechanism was used or because a symbolic link was crossed.</p>
<p>
<b>.  </b><i>file</i></p>
<p>
The commands in the specified file are read and executed by the shell.  A path search is not done to find the file because the directories in PATH generally contain files that are intended to be executed, not read.</p>
<p>
<b>eval</b> <i>string</i> ...</p>
<p>
The strings are parsed as shell commands and executed.  (This differs from the System V shell, which concatenates the arguments (separated by spaces) and parses the result as a single command.)</p>
<p>
<b>exec</b> [ <i>command</i> <i>arg</i> ...  ]</p>
<p>
Unless <i>command</i> is omitted, the shell process is replaced with the specified program (which must be a real program, not a shell built-in or function).  Any redirections on the exec command are marked as permanent so that they are not undone when the exec command finishes.  If the command is not found, the exec command causes the shell to exit.</p>
<p>
<b>exit</b> [ <i>exitstatus</i> ]</p>
<p>
Terminates the shell process.  If <i>exitstatus</i> is given, it is used as the exit status of the shell; otherwise, the exit status of the preceding command is used.</p>
<p>
<b>export</b> <i>name</i> ...</p>
<p>
The specified names are exported so that they will appear in the environment of subsequent commands.  The only way to unexport a variable is to unset it.  <i>ash</i> allows the value of a variable to be set at the same time it is exported by writing the following.</p>
<b>export</b> name=value
</code>
<p>
With no arguments, the export command lists the names of all exported variables.</p>
<p>
<b>fg</b> [ <i>job</i> ]</p>
<p>
Moves the specified job or the current job to the foreground.  This command is only available on systems with Berkeley job control.</p>
<p>
<b>getopts</b> <i>optstring</i> <i>var</i></p>
<p>
The System V <i>getopts</i>(1) command.</p>
<p>
<b>hash</b> [ <b>-rv</b> ] <i>command</i> ...</p>
<p>
The shell maintains a hash table that remembers the locations of commands.  With no arguments whatsoever, the hash command prints out the contents of this table.  Entries that have not been looked at since the last <i>cd</i> command are marked with an asterisk; it is possible for these entries to be invalid.</p>
<p>
With arguments, the hash command removes the specified commands from the hash table (unless they are functions) and then locates them.  With the <b>-v</b> option, <i>hash</i> prints the locations of the commands as it finds them.   The <b>-r</b> option causes the <i>hash</i> command to delete all the entries in the hash table except for functions.</p>
<p>
<b>jobid</b> [ <i>job</i> ]</p>
<p>
Prints the process id's of the processes in the job.  If the job argument is omitted, uses the current job.</p>
<p>
<b>jobs</b></p>
<p>
This command lists out all the background processes that are children of the current shell process.</p>
<p>
<b>lc</b> [ <i>function-name</i> ]</p>
<p>
The function name is defined to execute the last command entered.  If the function name is omitted, the last command executed is executed again.   This command only works if the <b>-i</b> flag is set.</p>
<p>
<b>pwd</b></p>
<p>
Prints the current directory.  The built-in command may differ from the program of the same name because the built-in command remembers what the current directory is rather than recomputing it each time.  This makes it faster.  However, if the current directory is renamed, the built-in version of pwd will continue to print the old name for the directory.</p>
<p>
<b>read</b> [ <b>-p</b> <i>prompt</i> ] [ <b>-e</b> ] <i>variable</i> ...</p>
<p>
The prompt is printed if the <b>-p</b> option is specified and the standard input is a terminal.  Then, a line is read from the standard input.  The trailing newline is deleted from the line, and the line is split (as described in the section on word splitting above) and the pieces are assigned to the variables in order.  If there are more pieces than variables, the remaining pieces (along with the characters in IFS that separated them) are assigned to the last variable.  If there are more variables than pieces, the remaining variables are assigned the null string.</p>
<p>
The <b>-e</b> option causes any backslashes in the input to be treated specially.  If a backslash is followed by a newline, the backslash and the newline will be deleted.  If a backslash is followed by any other character, the backslash will be deleted and the following character will be treated as though it were not in IFS, even if it is.</p>
<p>
<b>readonly</b> <i>name</i> ...</p>
<p>
The specified names are marked as read only, so that they cannot be subsequently modified nor unset.  <i>ash</i> allows the value of a variable to be set at the same time it is marked read-only by writing the following.</p>
<b>readonly</b> name=value
</code>
<p>
With no arguments, the read-only command lists the names of all read-only variables.</p>
<p>
<b>set</b> [ { <b>-</b><i>options</i> | <b>+</b><i>options</i> | <b>--</b> } ] [ <i>arg</i> ...  ]</p>
<p>
The <i>set</i> command performs three different functions.</p>
<p>
With no arguments, it lists the values of all shell variables.</p>
<p>
If options are given, it sets the specified option flags, or clears them if the option flags are introduced with a <b>+</b> rather than a <b>-</b>.  Only the first argument to <i>set</i> can contain options.  The possible options are listed below.</p>
<p>
<b>-e</b>   Causes the shell to exit when a command terminates with a nonzero exit status, except when the exit status of the command is explicitly tested.  The exit status of a command is considered to be explicitly tested if the command is used to control an <i>if</i>, <i>elif</i>, <i>while</i>, or <i>until</i> or if the command is the left-hand operand of an "&amp;&amp;" or  "||" operator.</p>
<p>
<b>-f</b>   Turns off file name generation.</p>
<p>
<b>-I</b>   Causes the shell to ignore end-of file-conditions.  (This does not apply when the shell is a script source using the "." command.)  The shell will, in fact, exit if it gets 50 EOF's in a row.</p>
<p>
<b>-i</b>   Makes the shell interactive.  This causes the shell to prompt for input, to trap interrupts, to ignore quit and terminate signals, and to return to the main command loop rather than exiting upon error.</p>
<p>
<b>-j</b>   Turns on Berkeley job control on systems that support it.  When the shell starts up, the </p>
<p>
<b>-j</b> is set by default if the <b>-i</b> flag is set.</p>
<p>
<b>-n</b>   Causes the shell to read commands but not to execute them.  (This is marginally useful for checking the syntax of scripts.)</p>
<p>
<b>-s</b>   If this flag is set when the shell starts up, the shell reads commands from its standard input.  The shell does not examine the value of this flag at any other time.</p>
<p>
<b>-x</b>   If this flag is set, the shell will print out each command before executing it.</p>
<p>
<b>-z</b>   If this flag is set, the file name generation process may generate zero files.  If it is not set, then a pattern that does not match any files will be replaced by a quoted version of the pattern.</p>
<p>
The third use of the set command is to set the values of the shell's positional parameters to the specified <i>arg</i>s.  To change the positional parameters without changing any options, use "<b>--</b>" as the first argument to <i>set</i>.  If no <i>args</i> are present, the set command will leave the value of the positional parameters unchanged.  Therefore, to set the positional parameters to a set of values that may be empty, execute the command</p>
<b>shift</b> $#
</code>
<p>
first to clear out the old values of the positional parameters.</p>
<p>
<b>setvar</b> <i>variable</i> <i>value</i></p>
<p>
Assigns <i>value</i> to <i>variable</i>.  (In general, it is better to write <i>variable=value</i> rather than using <i>setvar</i>.  <i>setvar</i> is intended to be used in functions that assign values to variables whose names are passed as parameters.)</p>
<p>
<b>shift</b> [ <i>n</i> ]</p>
<p>
Shift the positional parameters <i>n</i> times.  A shift sets the value of $1 to the value of $2, the value of $2 to the value of $3, and so on, decreasing the value of $# by one.  If there are zero positional parameters, shifting does not do anything.</p>
<p>
<b>trap</b> [ <i>action</i> ] <i>signal</i> ...</p>
<p>
Causes the shell to parse and execute <i>action</i> when any of the specified signals are received.  The signals are specified by signal number.   <i>action</i> may be null or omitted; the former causes the specified signal to be ignored and the latter causes the default action to be taken.  When the shell forks off a subshell, it resets trapped (but not ignored) signals to the default action.  The trap command has no effect upon signals that were ignored upon entry to the shell.</p>
<p>
<b>umask</b> [ <i>mask</i> ]</p>
<p>
Sets the value of umask to the specified octal value.  If the argument is omitted, the umask value is printed.</p>
<p>
<b>unset</b> <i>name</i> ...</p>
<p>
The specified variables and functions are unset and unexported.  If a given name corresponds to both a variable and a function, both the variable and the function are unset.</p>
<p>
<b>wait</b> [ <i>job</i> ]</p>
<p>
Waits for the specified job to complete and returns the exit status of the last process in the job.  If the argument is omitted, waits for all jobs to complete and then returns an exit status of zero.</p>
<h2>EXAMPLES</h2>
<p>
The following function redefines the <i>cd</i> command:</p>
cd() {
         if bltin cd "$@"
         then if test -f .enter
         then .  .enter
         else return 0
         fi
         fi
     }
</code>
<p>
This function causes the file ".enter" to be read when you enter a directory, if it exists.  The <i>bltin</i> command is used to access the real <i>cd </i>command.  The "return 0" ensures that the function will return an exit status of zero if it successfully changes to a directory that does not contain a ".enter" file.  Redefining existing commands is not always a good idea, but this example shows that you can do it if you want to.</p>
<p>
The suspend function distributed with <i>ash</i> looks like the following example.</p>
# Copyright (C) 1989 by Kenneth Almquist.  All rights reserved.
  # This file is part of ash, which is distributed under the terms
  # specified by the Ash General Public License.

  suspend() {
      local -
      set +j
      kill -TSTP 0
}
</code>
<p>
This turns off job control and then sends a stop signal to the current process group, which suspends the shell.  (When job control is turned on, the shell ignores the TSTP signal.)  Job control will be turned back on when the function returns because "-" is local to the function.  As an example of what <i>not</i> to do, consider an earlier version of <i>suspend</i>, as illustrated below.</p>
suspend() {
      suspend_flag=$-
      set +j
      kill -TSTP 0
      set -$suspend_flag
  }
</code>
<p>
There are two problems with this.  First, <i>suspend_flag</i> is a global variable rather than a local one, which will cause problems in the (unlikely) circumstance that the user is using that variable for some other purpose.  Second, consider what happens if shell received an interrupt signal after it executes the first <i>set</i> command but before it executes the second one.  The interrupt signal will abort the shell function, so that the second <i>set</i> command will never be executed and job control will be left off.  The first version of <i>suspend</i> avoids this problem by turning job control off only in a local copy of the shell options.  The local copy of the shell options is discarded when the function is terminated, no matter how it is terminated.</p>
<h2>HINTS</h2>
<p>
Shell variables can be used to provide abbreviations for things that you type frequently.  For example, if you set export h=$HOME in your.profile so that you can type the name of your home directory simply by typing "$h".</p>
<p>
When writing shell procedures, try not to make assumptions about what is imported from the environment.  Explicitly unset or initialize all variables, rather than assuming they will be unset.  If you use <i>cd</i>, it is a good idea to unset CDPATH.</p>
<p>
People sometimes use "&lt;&amp;-" or "&gt;&amp;-" to provide no input to a command or to discard the output of a command.  A better way to do this is to redirect the input or output of the command to <b>/dev/null</b>.</p>
<p>
Word splitting and file name generation are performed by default, and you must explicitly use double quotes to suppress it.  This is backwards, but you can learn to live with it.  Just get in the habit of writing double quotes around variable and command substitutions, and omit them only when you really want word splitting and file-name generation.  If you want word splitting but not file-name generation, use the </p>
<p>
<b>-f</b> option.</p>
<h2>AUTHORS</h2>
<p>
Kenneth Almquist</p>
<h2>BUGS</h2>
<p>
When command substitution occurs inside a here document, the commands inside the here document are run with their standard input closed.  For example, the following will not work because the standard input of the <i>line</i> command will be closed when the command is run.</p>
cat &lt;&lt;-!
     Line 1: $(line)
     Line 2: $(line)
     !
</code>
<p>
Unsetting a function that is currently being executed may cause strange behavior.</p>
<p>
The shell syntax allows a here document to be terminated by an end-of-file as well as by a line containing the terminator word that follows the "&lt;&lt;".  What this means is that, if you mistype the terminator line, the shell will silently swallow up the rest of your shell script and stick it in the here document.</p>
<h2>NAME</h2>
<p>
<b>touch</b> -- update last modification date of a file</p>
<h2>SYNOPSIS</h2>
touch <b>[</b>-c<b>]</b> <b>[</b>-f<b>]</b> <i>file</i> ...
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>touch</i> utility changes the modification and or access times of the given <i>file</i> operands.</p>
<p>
Available options:</p>
<p>
<b>-c</b></p>
<p>
Does not create a specified file if it does not exist.  Does not write any diagnostic messages concerning this condition.</p>
<p>
<b>-f</b></p>
<p>
Attempts to force the <i>touch</i> in spite of read and write permissions on a <i>file</i>.</p>
<h2>HISTORY</h2>
<p>
A <i>touch</i> command appeared in Seventh Edition AT&amp;T UNIX.</p>
<h2>NAME</h2>
<p>
<b>wc</b> -- word, line, and byte count</p>
<p>
<b>SYNOPSIS</b></p>
wc <b>[</b>-c<b>]</b> <b>[</b>-l<b>]</b> <b>[</b>-w<b>]</b> <b>[</b><i>file</i> ...<b>]</b>
</code>
<h2>DESCRIPTION</h2>
<p>
The <i>wc</i> utility reads one or more input text <i>file</i>s, and, by default, writes the number of lines, words, and bytes contained in each input <i>file </i>to the standard output.  If more than one input <i>file</i> is specified, a line of cumulative counts for all named <i>file</i>s is output on a separate line following the last file count.  <i>wc</i> considers a word to be a maximal string of characters, delimited by white space.</p>
<p>
The following options are available.</p>
<p>
<b>-c</b></p>
<p>
The number of bytes in each input <i>file</i> is written to the standard output.</p>
<p>
<b>-l</b></p>
<p>
The number of lines in each input <i>file</i> is written to the standard output.</p>
<p>
<b>-w</b></p>
<p>
The number of words in each input <i>file</i> is written to the standard output.</p>
<p>
When an option is specified, <i>wc</i> only reports the information requested by that option.  The default action is equivalent to all the flags (<b>-lwc</b>) having been specified.</p>
<p>
The following operands are available.</p>
<b>file</b> A pathname of an input file.
</code>
<p>
If no <i>file</i> names are specified, the standard input is used and a file name is not output.  The resulting output is one line of the requested count(s), with the cumulative sum of all data read in via standard input.</p>
<p>
By default, the standard output contains a line for each input <i>file</i> of the form:</p>
lines words bytes file_name
</code>
<p>
The counts for lines, words, and bytes are integers separated by spaces.  The ordering of the display of the number of lines, words, and/or bytes is the order in which the options were specified.</p>
<p>
The <i>wc</i> utility exits 0 on success and &gt;0 if an error occurs.</p>
<h2>STANDARDS</h2>
<p>
The <i>wc</i> function conforms to POSIX 1003.2.</p>

</FONT>
</BODY>
</HTML>

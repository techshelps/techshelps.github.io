<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Information for Objects (Permissions)</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"></HEAD><BODY BGCOLOR="#FFFFFF">
<H3 CLASS="h2">Security Information for Objects (Permissions)</H3><P CLASS="t">All named objects in Windows&nbsp;NT and some unnamed objects can be secured. A <I>security descriptor</I> describes the security attributes for an object. An object's security descriptor includes four parts:</P>
<UL><LI>An owner security ID, which indicates the user or group who owns the object. The owner of an object can change the access permissions for the object.</LI><LI>A group security ID, which is used only by the POSIX subsystem and ignored by the rest of Windows&nbsp;NT.</LI><LI>A discretionary access control list (ACL), which identifies the users and groups who are granted or denied specific access permissions. Discretionary ACLs are controlled by the owner of the object.</LI><LI>A system ACL, which controls the auditing messages the system will generate. System ACLs are controlled by the security administrators.</LI></UL><P CLASS="t">For details and background information about security in Windows&nbsp;NT&nbsp;4.0, see Chapter 6, "Windows&nbsp;NT Security," in the <I>Microsoft Windows&nbsp;NT Workstation Resource Guide</I>.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Types of Objects</H4><P CLASS="t">The permissions that can be granted or denied for an object depends on the type of object. For example, you can specify permissions, such as Manage Documents and Print for a printer queue, and specify Read, Write, Execute for a directory.</P>
<P CLASS="t">Permissions of an object are also affected by whether that object is a container object or a noncontainer object. A <I>container object</I> is one that logically contains other objects; a <I>noncontainer object</I> does not contain other objects. For example, a directory is a container object that logically contains files and other directories. Files are noncontainer objects. This distinction between container and noncontainer objects is important because objects within a container object can inherit certain permissions from the parent container. </P>
<P CLASS="t"><B>Note</B></P>
<P>NTFS supports ACL inheritance from directory objects to file objects that are created within the directory. For more information about NTFS, see "Disk and File System Basics" and "Choosing a File System" in the <I>Microsoft Windows&nbsp;NT Workstation Resource Guide.</I> </P>
<H4 CLASS="h3"><A NAME="sec1"></A>Access Control Lists and Access Control Entries</H4><P CLASS="t">Each ACL is made up of <I>access control entries</I> (ACEs), which specify access or auditing permissions to that object for one user or group. There are three ACE types: two for discretionary access control and one for system security.</P>
<P CLASS="t">The discretionary ACEs are AccessAllowed and AccessDenied. These explicitly grant and deny access to a user or group of users. The first AccessDenied ACE denies the user access to the resource, and no further processing of ACEs occurs.</P>
<P CLASS="t"><B>Note</B></P>
<P>There is an important distinction between a discretionary ACL that is empty (one that has no ACEs in it) and an object without any discretionary ACL. In the case of an empty discretionary ACL, no accesses are explicitly granted, so access is implicitly denied. For an object that has no ACL at all, there is no protection assigned to the object, so any access request is granted.</P>
<P CLASS="t">SystemAudit is a system security ACE that is used to keep a log of security events (such as who accesses which files) and to generate and log security audit messages.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>Access Masks</H4><P CLASS="t">Each ACE includes an <I>access mask</I>, which defines all possible actions for a particular object type. An access mask can be compared to a menu, from which you select permissions to grant or deny.</P>
<P CLASS="t"><I>Specific types</I> include access options that apply specifically to an object type. Each object type can have up to 16 specific access types. Collectively, the specific access types for a particular object type are called the <I>specific access mask</I>. These are defined when the object type is defined. </P>
<P CLASS="t">For example, Windows&nbsp;NT files have the following specific access types: </P>
<UL><LI>ReadData</LI><LI>WriteData</LI><LI>AppendData</LI><LI>ReadEA (Extended Attribute)</LI><LI>WriteEA (Extended Attribute)</LI><LI>Execute</LI><LI>ReadAttributes</LI><LI>WriteAttributes</LI></UL><P CLASS="t"><I>Standard types</I> apply to all objects and consist of these access permissions:</P>
<UL><LI>SYNCHRONIZE, which is used to synchronize access and to allow a process to wait for an object to enter the signaled state.</LI><LI>WRITE_OWNER, which is used to assign a write owner.</LI><LI>WRITE_DAC, which is used to grant or deny write access to the discretionary ACL.</LI><LI>READ_CONTROL, which is used to grant or deny read access to the security descriptor and owner.</LI><LI>DELETE, which is used to grant or deny delete access.</LI></UL><P CLASS="t"><I>Generic types</I> are broad types of access used when protecting an object. Exact implementation of these is determined by the application defining an object. For example, an application that defines a voice-annotation object might define specific access rights by using VOICE_PLAY and VOICE_EDIT for playing and editing the object. It might set up a generic mapping structure in which GENERIC_EXECUTE maps to VOICE_PLAY and GENERIC_WRITE maps to both VOICE_PLAY and VOICE_EDIT.</P>
<P CLASS="t">The following table shows the generic types that are mapped from specific and standard types.</P>
<P CLASS="ttl"><B>Table 2.3    Generic types of access masks</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Generic type</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Mapped from these specific and standard types</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">FILE_GENERIC_READ</P></TD><TD VALIGN="TOP"><P CLASS="tt">STANDARD_RIGHTS_READ<BR>FILE_READ_DATA<BR>FILE_READ_ATTRIBUTES <BR>FILE_READ_EA<BR>SYNCHRONIZE</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">FILE_GENERIC_WRITE</P></TD><TD VALIGN="TOP"><P CLASS="tt">STANDARD_RIGHTS_WRITE<BR>FILE_WRITE_DATA<BR>FILE_WRITE_ATTRIBUTES<BR>FILE_WRITE_EA<BR>FILE_APPEND_DATA<BR>SYNCHRONIZE</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">FILE_GENERIC_EXECUTE</P></TD><TD VALIGN="TOP"><P CLASS="tt">STANDARD_RIGHTS_EXECUTE<BR>FILE_READ_ATTRIBUTES<BR>FILE_EXECUTE<BR>SYNCHRONIZE</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">Specific and standard types appear in the details of the security log. Generic types do not appear in the security log. Instead, the corresponding specific and standard types are listed.</P>
<H4 CLASS="h3"><A NAME="sec3"></A>Access Control Inheritance</H4><P CLASS="t">When you create new objects within a container object, the new objects inherit permissions by default from the parent object.</P>
<P CLASS="t">In the case of files and directories, changing the permissions on a directory affects that directory and its files but does not automatically apply to existing subdirectories and their contents. They will do so if you select the <B>Replace Permissions On Existing Files</B> check box and the <B>Replace Permissions On Subdirectories </B>check box in the <B>Directory Permissions </B>dialog box. </P></BODY></HTML>

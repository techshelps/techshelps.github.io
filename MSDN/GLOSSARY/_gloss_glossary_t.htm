<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Glossary T</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_gloss_glossary_t"></a><sup></sup>Glossary T</h1>

<h3><a name="_gloss_tab_control"></a>tab control</h3>
<p>
A common control used to present multiple pages of information or controls to a user; only one page at a time can be displayed. A tab control is analogous to the dividers in a notebook or the labeled folders in a file cabinet. Tab controls imply a peer or logical relationship between each page of information. See also property sheet.</p>

<h3><a name="_gloss_tab_order"></a>tab order</h3>
<p>
The order in which the TAB key moves the input focus from one control to the next within a dialog box. Usually, the tab order proceeds from left to right in a dialog box, and from top to bottom in a radio group.</p>

<h3><a name="_gloss_tab_stop"></a>tab stop</h3>
<p>
One of the points in a line of text or a control in a group of controls (in a dialog box, for example) that the user can move to by pressing the TAB key. See also tab order.</p>

<h3><a name="_gloss_tab.2d.delimited_report"></a>tab-delimited report</h3>
<p>
A data file in which the elements are separated by tab characters.</p>

<h3><a name="_gloss_tag"></a>tag</h3>
<ol>
<li>
In C/C++, an optional identifier are part of structure, union, and enumeration type specifiers and, if present, always immediately follow the reserved words struct, union, or enum. The tag names must be distinct from all other structure, enumeration, or union tags with the same visibility.<br><br></li>
<li>
Text in angle brackets that represents HTML markup. Web browsers display text and graphic elements based on the tags an author uses. The tag itself is not displayed by the browser.</li>
</ol>

<h3><a name="_gloss_tail"></a>tail</h3>
<p>
The last element in a linked list.</p>

<h3><a name="_gloss_tapi"></a>TAPI</h3>
<p>
A set of functions that is part of the Win32 API that lets a computer communicate directly with telephone systems.</p>

<h3><a name="_gloss_target"></a>target</h3>
<p>
The objective, or destination, of a computer command or operation. For example, the target machine in a remote debugging operation is the machine running the application that is being debugged.</p>

<h3><a name="_gloss_task_handle"></a>task handle</h3>
<p>
One of two handles that Windows creates for each task running in the system. The task handle is the handle to the task database (TDB), which contains information about the task's queue, module handle, and so forth. See also instance handle.</p>

<h3><a name="_gloss_tcp.2f.ip"></a>TCP/IP</h3>
<p>
A set of transport protocols for the Internet that provides both connection-oriented&nbsp; (TCP) and connectionless (IP) data transfer. Commonly made up of four protocols: IP, TCP, UDP, and ICMP. See also transport protocol, User Datagram Protocol (UDP).</p>

<h3><a name="_gloss_telephony_application_programming_interface"></a>Telephony Application Programming Interface</h3>
<p>
A set of functions that is part of the Win32 API that lets a computer communicate directly with telephone systems.</p>

<h3><a name="_gloss_teletype_network"></a>teletype network</h3>
<p>
Terminal-emulation protocol for remote login over the Internet. Also refers to a UNIX program that uses the protocol (often written TELNET in that case).</p>

<h3><a name="_gloss_telnet"></a>telnet</h3>
<p>
Terminal-emulation protocol for remote login over the Internet. Also refers to a UNIX program that uses the protocol (often written TELNET in that case).</p>

<h3><a name="_gloss_template"></a>template</h3>
<ol>
<li>
In C++, a keyword that allows polymorphism with respect to different types, by passing the data type as a parameter to the code body.<br><br></li>
<li>
More generally, a form or blueprint for an object that contains information about the default properties of that object. For example, a Microsoft Word document template may contain text, formatting, and graphics information as well as macros and AutoText entries.</li>
</ol>

<h3><a name="_gloss_template_class"></a>template class</h3>
<p>
A C++ class that is instantiated by providing a specific data (or class) type to a template. The compiler builds a class to process data of that type according to the specifications of the template. The Microsoft Foundation Class Library uses template classes to implement the standard collection classes.</p>

<h3><a name="_gloss_temporary_object"></a>temporary object</h3>
<p>
An object that is created when needed and destroyed after the reference object to which it is bound is destroyed.</p>

<h3><a name="_gloss_temporary_window"></a>temporary window</h3>
<p>
A window that an application creates for some temporary purpose. For example, a dialog box is a temporary window created to receive user input.</p>

<h3><a name="_gloss_termination"></a>termination</h3>
<p>
The ending of a thread, process, or program.</p>

<h3><a name="_gloss_termination_functions"></a>termination functions</h3>
<p>
Functions called internally by MFC member functions when there is a fatal error, such as an uncaught exception that cannot be handled. In MFC, <b>AfxAbort</b> is the default termination function. The C/C++ Run-Time Library provides the <b>_abort( )</b> function for non-MFC code. Most dynamic-link libraries register termination functions as well.</p>

<h3><a name="_gloss_termination_handler"></a>termination handler</h3>
<p>
A mechanism by which a developer ensures that a block of termination code is executed, so that resources such as memory, handles, and files are properly closed regardless of how a section of code finishes executing. A termination handler consists of a guarded body of code and a termination block. See also C++ exception handling, structured exception handling (SEH), <b>try</b> block.</p>

<h3><a name="_gloss_ternary_operator"></a>ternary operator</h3>
<p>
An operator that takes three operands — for example, the conditional-expression (<b>? :</b>) operator in C/C++. See also binary operator, unary operator.</p>

<h3><a name="_gloss_text_editor"></a>text editor</h3>
<p>
A program used to manage, edit, and print text files.</p>

<h3><a name="_gloss_text_file"></a>text file</h3>
<p>
A human-readable file composed of text characters. A text file is usually identified by a file extension of .TXT. See also binary file, rich-text format file.</p>

<h3><a name="_gloss_text_mode"></a>text mode</h3>
<p>
One of two modes for file I/O operations specified in the file-opening function. In text mode, control characters that specify the end of a line are normalized during I/O operations. In binary mode, no translation occurs.</p>

<h3><a name="_gloss_text.2d.alignment_flag"></a>text-alignment flag</h3>
<p>
An indicator that determines how text output functions position a string of text on a display or device.</p>

<h3><a name="_gloss_thread"></a>thread</h3>
<p>
The basic entity to which the operating system allocates CPU time. A thread can execute any part of the application's code, including a part currently being executed by another thread. All threads of a process share the virtual address space, global variables, and operating-system resources of the process.</p>

<h3><a name="_gloss_thread_local_storage"></a>thread local storage</h3>
<p>
A Win32 mechanism that allows multiple threads of a process to store data that is unique for each thread. For example, a spreadsheet application can create a new instance of the same thread each time the user opens a new spreadsheet. A dynamic-link library that provides the functions for various spreadsheet operations can use thread local storage to save information about the current state of each spreadsheet (row, column, and so on).</p>

<h3><a name="_gloss_thread_switch"></a>thread switch</h3>
<p>
A change of context from one thread to another, either inside a single process or across processes.</p>

<h3><a name="_gloss_three.2d.state_check_box"></a>three-state check box</h3>
<p>
A square box button control that can have one of three states, usually checked, unchecked (cleared), or indeterminate (grayed).</p>

<h3><a name="_gloss_throw_expression"></a>throw expression</h3>
<p>
In C++, a statement that transfers program control to a catch block in order to handle an exception. See also C++ exception handling, catch block, <b>try</b> block.</p>

<h3><a name="_gloss_thumbnail_representation"></a>thumbnail representation</h3>
<ol>
<li>
Or thumbnail view. In OLE, the reduced image of a document stored within an OLE compound file. <br><br></li>
<li>
In general, a greatly reduced version of an image that contains just enough detail for the image to be recognizable. Thumbnails are often used in a gallery view to allow the user to browse and select from a collection of images.</li>
</ol>

<h3><a name="_gloss_thunk"></a>thunk</h3>
<p>
A small section of code that performs a translation or conversion during a call or indirection. For example, a thunk is used to change the size or type of function parameters when calling between 16- and 32-bit code.</p>

<h3><a name="_gloss_time.2d.out_value"></a>time-out value</h3>
<p>
Or time-out delay. The maximum amount of time one entity will wait for another entity to complete a transaction. For example, in ODBC a query time-out value determines the amount of time the database engine will wait for a query's action to complete.</p>

<h3><a name="_gloss_timer_identifier_.28.id.29"></a>timer identifier (ID)</h3>
<p>
A value that identifies a timer or the events associated with a timer.</p>

<h3><a name="_gloss_timestamp"></a>timestamp</h3>
<p>
A value that specifies the time data was created, modified, accessed, or received. In files, the timestamp may also specify when the data was committed to disk.</p>

<h3><a name="_gloss_tls"></a>TLS</h3>
<p>
A Win32 mechanism that allows multiple threads of a process to store data that is unique for each thread. For example, a spreadsheet application can create a new instance of the same thread each time the user opens a new spreadsheet. A dynamic-link library that provides the functions for various spreadsheet operations can use thread local storage to save information about the current state of each spreadsheet (row, column, and so on).</p>

<h3><a name="_gloss_token"></a>token</h3>
<ol>
<li>
In a source program, the basic element recognized by a compiler. Keywords, identifiers, constants, string literals, and operators are examples of tokens.<br><br></li>
<li>
A group of security attributes created when a user logs on to the operating system. See also access token, primary token, impersonation token, privilege, security identifier (SID).</li>
</ol>

<h3><a name="_gloss_tool_tip"></a>tool tip</h3>
<p>
A tiny pop-up window that presents a short description of a toolbar button's action. Tool tips are displayed when the user positions the mouse over a button for a period of time.</p>

<h3><a name="_gloss_toolbar"></a>toolbar</h3>
<p>
A control bar based on a bitmap that contains a row of button images. These buttons can act like pushbuttons, check boxes, or radio buttons. See also dialog bar, status bar.</p>

<h3><a name="_gloss_top.2d.level_window"></a>top-level window</h3>
<p>
A window that has no parent window, or whose parent is the desktop window.</p>

<h3><a name="_gloss_topmost_window"></a>topmost window</h3>
<p>
The window that overlaps all the other windows even if it is not the active or foreground window.</p>

<h3><a name="_gloss_trace_message"></a>trace message</h3>
<p>
Or trace output. An error or diagnostic message employed in debugging to provide information about where in the program execution a problem occurred. In some cases, trace output can provide advance warning about problems that are about to occur.</p>

<h3><a name="_gloss_tracker"></a>tracker</h3>
<p>
In OLE, a border, or adornment, for OLE items that provides a visual cue about the current status of the item. By using different tracker styles, OLE items can be displayed with hatched borders, resize handles, or a variety of other visual effects.</p>

<h3><a name="_gloss_tracking"></a>tracking</h3>
<ol>
<li>
In user-interface control, to cause an on-screen displayed symbol, such as a pointer, to match the movements of a mouse or other pointing device.<br><br></li>
<li>
In data management, to follow the flow of information through a manual or an automated system (a tracking tool).<br><br></li>
<li>
In data storage and retrieval, to follow and read from a recording channel on a disk or a magnetic tape. <br><br></li>
<li>
In general, the act of following a path.</li>
</ol>

<h3><a name="_gloss_tracking_size"></a>tracking size</h3>
<p>
The window size (maximum or minimum) that the user can produce by dragging a sizing border or splitter bar.</p>

<h3><a name="_gloss_trail_byte"></a>trail byte</h3>
<p>
In a double-byte or multibyte character set, the second byte of a two-byte character. See also lead byte.</p>

<h3><a name="_gloss_transacted_mode"></a>transacted mode</h3>
<p>
A file-access mode that buffers all changes to a document and writes the changes to disk or discards them only when an explicit commit or revert request occurs. In this way, the original file can be reverted to. See also direct mode, rollback, transaction.</p>

<h3><a name="_gloss_transaction"></a>transaction</h3>
<p>
In data management, a means of completing an "all or nothing" series of changes to a file. If one change fails, or if there is a system failure during the transaction, the file reverts back to its original state before the transaction began. See also rollback.</p>

<h3><a name="_gloss_transient"></a>transient</h3>
<p>
In Java, a variable type qualifier denoting that the indicated variable is not part of the persistent state of the object.</p>

<h3><a name="_gloss_translation"></a>translation</h3>
<ol>
<li>
In programming, to convert a program from one language to another — for example, to convert C source code to object code.<br><br></li>
<li>
In graphics, to move an image horizontally, vertically, or both, without rotating the image.<br><br></li>
<li>
More generally, to convert from one form to another — for example, to translate a scan code into a key code.</li>
</ol>

<h3><a name="_gloss_translation_phase"></a>translation phase</h3>
<p>
One of the steps a compiler follows in creating an executable program. In C/C++, these steps include character mapping, line splicing, tokenizing, preprocessing, character-set mapping, string concatenating, translating, and linking.</p>

<h3><a name="_gloss_translation_unit"></a>translation unit</h3>
<ol>
<li>
A single source file, together with all of its include files, supplied as input to the compiler, which combines and translates the files to produce an object file. See also compilation unit.<br><br></li>
<li>
In C/C++, a sequence of tokens that the compiler generates during the preprocessor phase. The translation unit incorporates code from the preprocessor directives, such as the #include and #define directives, into the source code from a single file and excludes any code removed by conditional compilation directives.</li>
</ol>

<h3><a name="_gloss_transport_control_protocol.2f.internet_protocol"></a>Transport Control Protocol/Internet Protocol</h3>
<p>
A set of transport protocols for the Internet that provides both connection-oriented&nbsp; (TCP) and connectionless (IP) data transfer. Commonly made up of four protocols: IP, TCP, UDP, and ICMP. See also transport protocol, User Datagram Protocol (UDP).</p>

<h3><a name="_gloss_transport_layer"></a>transport layer</h3>
<ol>
<li>
In remote debugging, a data link established between the host machine and the target machine. See also serial transport layer.<br><br></li>
<li>
The layer in the ISO/OSI communications model that is responsible for quality of service and accurate delivery of information. Among other services, the transport layer handles error detection and correction.</li>
</ol>

<h3><a name="_gloss_transport_protocol"></a>transport protocol</h3>
<p>
A set of conventions that govern how data is transported across networks. In a connection-oriented transport protocol, such as Transmission Control Protocol (TCP), applications are required to establish a virtual circuit before data transfer can take place. In a connectionless transport protocol, such as User Datagram Protocol (UDP), an established circuit is not required for data transfer and an application need only open and bind a socket in order to send and receive data.</p>

<h3><a name="_gloss_trigraph"></a>trigraph</h3>
<p>
In C/C++, a sequence of two question marks followed by a punctuation character, which the compiler replaces with another character. For example, the compiler will replace the trigraph "??-" with the character "~". Trigraphs allow C programs to be written using only the ISO Invariant Code Set, which is a subset of the 7-bit ASCII character set.</p>

<h3><a name="_gloss_truetype_font"></a>TrueType font</h3>
<p>
A scalable outline font whose glyphs are stored as a collection of line and curve commands plus a collection of hints. Windows uses the line and curve commands to define the outline of the glyph and uses the hints to adjust the length of the lines and the shapes of the curves to correct irregularities in their shapes that occur during rasterization. See also raster font, vector font.</p>

<h3><a name="_gloss_try_block"></a>try block</h3>
<p>
A guarded body of code in a <b>try</b>-<b>except</b> frame-based exception handler or <b>try</b>-<b>finally</b> termination handler. See also catch block, throw expression.</p>

<h3><a name="_gloss_type_cast"></a>type cast</h3>
<p>
An explicit conversion of a variable, structure, object, or expression from one data type to another.</p>

<h3><a name="_gloss_type_checking"></a>type checking</h3>
<p>
The examination by a compiler or interpreter of the operations in a program to make sure that the correct data types are being used. See also run-time type information (RTTI).</p>

<h3><a name="_gloss_type_declaration"></a>type declaration</h3>
<p>
A declaration in a program that specifies the characteristics of a new data type, usually by combining more primitive existing data types. See also data declaration.</p>

<h3><a name="_gloss_type_definition"></a>type definition</h3>
<ol>
<li>
A declaration that introduces a name which, within its scope, becomes a synonym for a type or a derived type. A type definition is usually used to construct shorter or more meaningful names for types already declared or to encapsulate implementation details that may change.<br><br></li>
<li>
A definition that describes the characteristics of an object — for example, a Windows type definition describes the dimensions, colors, behavior, and position for an object of a particular window class.</li>
</ol>

<h3><a name="_gloss_type_information"></a>type information</h3>
<p>
In OLE, information about an object's class provided by a type library.</p>

<h3><a name="_gloss_type_library_file"></a>type library file</h3>
<p>
Or OLE library. An OLE compound document file containing standard descriptions of data types, modules, and interfaces that can be used to fully expose objects for OLE Automation. The type library file usually has a .TLB filename extension and can be used by other applications to get information about the automation server.</p>

<h3><a name="_gloss_type_modifier"></a>type modifier</h3>
<p>
A keyword that modifies the data type that follows — for example, <b>unsigned</b> can be used to modify an integral data type such as <b>int</b>.</p>

<h3><a name="_gloss_type_qualifier"></a>type qualifier</h3>
<p>
A keyword that provides specific properties to an identifier. The <b>const</b> type qualifier declares an object to be nonmodifiable. The <b>volatile</b> type qualifier declares an item whose value can legitimately be changed by something beyond the control of the program in which it appears, such as a concurrently executing thread.</p>

<h3><a name="_gloss_type_safety"></a>type safety</h3>
<p>
The assurance that a given function will be not presented, at run time, with data of a type it cannot handle. Type safety is assured through type checking and/or by the use of template classes that are designed to operate on data of many types. See also run-time type information (RTTI).</p>

<h3><a name="_gloss_type.2d.safe_collection"></a>type-safe collection</h3>
<p>
A collection class that enforces type safety on data or objects. For example, a type-safe collection can be implemented by using one of the MFC template-based classes such as <b>CArray</b> or <b>CList</b>, which can store data of any type.</p>

<h3><a name="_gloss_typed_pointer"></a>typed pointer</h3>
<p>
A pointer to a specified type.</p>

<h3><a name="_gloss_typeface_name"></a>typeface name</h3>
<p>
The name of a font — for example, Times New Roman.</p>
</FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Glossary L</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_gloss_glossary_l"></a><sup></sup>Glossary L</h1>

<h3><a name="_gloss_l.2d.value"></a>l-value</h3>
<p>
The value on the left side of an assignment statement that represents a storage region's memory location. The l-value is an expression that evaluates to a type other than <b>void</b> and designates a location in memory (a variable, array, or structure element, for example). See also r-value.</p>

<h3><a name="_gloss_label"></a>label</h3>
<ol>
<li>
In a C or C++ function body, a unique name followed by a colon (:). Labels can denote statements to which a <b>goto</b> statement can branch. In a <b>switch</b> statement, the labels preceded by the keyword <b>case</b> list values to be compared to the expression at the top of the <b>switch</b> statement. See also labeled statement.<br><br></li>
<li>
In user-interface design, application-defined text associated with a graphical element such as a button or check box.<br><br></li>
<li>
In OLE, text describing an object that is linked or embedded as an icon.</li>
</ol>

<h3><a name="_gloss_labeled_statement"></a>labeled statement</h3>
<p>
In C/C++, a statement preceded by a label. A labeled statement allows program control to be transferred to it from a <b>goto</b> statement or back to the top of a <b>switch</b> statement.</p>

<h3><a name="_gloss_language_identifier_.28.id.29"></a>language identifier (ID)</h3>
<p>
A 16-bit value that identifies a language and, where appropriate, the variant of the language being used. A language identifier is a combination of a sublanguage identifier and a primary language identifier. For example, if the primary language identifier specifies English, the sublanguage identifier might specify Australian English. See also locale identifier (LCID).</p>

<h3><a name="_gloss_lcid"></a>LCID</h3>
<p>
A 32-bit value identifying the language and sublanguage for a locale. The locale identifier is used to customize string handling. See also code page, language identifier (ID).</p>

<h3><a name="_gloss_lead_byte"></a>lead byte</h3>
<p>
In double-byte character sets and multibyte character sets, the first byte of a two-byte character. The lead byte signals that both it and the following byte are to be interpreted as a single character. See also trail byte.</p>

<h3><a name="_gloss_left_outer_join"></a>left outer join</h3>
<p>
A database term that describes the relationship between two tables on which a query is run. If two tables are connected with a left outer join, the resulting recordset contains all records from the table on the left but only those records from the table on the right where the joined fields are equal. See also right outer join.</p>

<h3><a name="_gloss_lexical_analyzer"></a>lexical analyzer</h3>
<p>
Or lexer. The part of a compiler, interpreter, or other translator that parses character sequences (separated by white space) in the source code into individual tokens. See also parser.</p>

<h3><a name="_gloss_library_assert"></a>library assert</h3>
<p>
A macro that identifies program errors during development. The argument given to ASSERT should be chosen so that it holds true only if the program is operating as intended.</p>

<h3><a name="_gloss_library_file"></a>library file</h3>
<p>
A Common Object File Format (COFF) file generated by the Microsoft 32-bit library manager tool, LIB, for standard and import libraries. The default filename extension for these files is .LIB. See also dynamic-link library file, static-link library.</p>

<h3><a name="_gloss_library_version"></a>library version</h3>
<ol>
<li>
One of the available configurations of a library. For example, a library might have a static version and a dynamic-link version, both of which are available as debug and release versions. The library version used during linking is usually determined by the project type and settings.<br><br></li>
<li>
One of the publicly released versions of a library — for example, Microsoft Foundation Class Library version 4.0.</li>
</ol>

<h3><a name="_gloss_licensing"></a>licensing</h3>
<p>
A COM feature that provides control over object creation. Licensed objects can be created only by clients that are authorized to use them. Licensing may afford different levels of functionality depending on the type of license.</p>

<h3><a name="_gloss_lifetime"></a>lifetime</h3>
<p>
The time during program execution that a variable, function, object, or session exists and is available for use, or the duration of the program itself.</p>

<h3><a name="_gloss_lightweight_remote_procedure_call"></a>Lightweight Remote Procedure Call</h3>
<p>
In OLE, a protocol for interprocess communication on a single machine. See also Remote Procedure Call (RPC).</p>

<h3><a name="_gloss_line_counting"></a>line counting</h3>
<p>
A run-time analysis of a program in which the profiler reports how many times each line of source code was executed. See also function counting, line coverage, line profiling.</p>

<h3><a name="_gloss_line_coverage"></a>line coverage</h3>
<p>
A run-time analysis of a program in which the profiler reports which lines of source code were executed at least once. See also function coverage, line counting, line profiling.</p>

<h3><a name="_gloss_line_profiling"></a>line profiling</h3>
<p>
A run-time analysis of a program in which the profiler reports information about the execution of the lines of source code, including line counting and line coverage. Line profiling is useful for checking the validity of an algorithm. See also function profiling.</p>

<h3><a name="_gloss_line.2d.continuation_character"></a>line-continuation character</h3>
<p>
The backslash character (\) when it is placed at the end of a line. The line-continuation character causes the compiler to ignore the following newline character and to treat the next line as a continuation of the current line.</p>

<h3><a name="_gloss_linefeed_character"></a>linefeed character</h3>
<p>
A control character that advances a printer or insertion point to a new line. This character can have a different textual representation on different platforms, but it always has the ASCII value of 10. See also carriage return–linefeed (CR-LF) pair.</p>

<h3><a name="_gloss_link"></a>link</h3>
<ol>
<li>
The Microsoft 32-Bit Incremental Linker (LINK.EXE). See also linker.<br><br></li>
<li>
To combine object files and libraries to form an executable file or dynamic-link library.<br><br></li>
<li>
In OLE, a connection between two documents. A link has three properties: the name of its source data, its type (or class, as it is known internally), and its updating basis (either automatic or manual). Also, as a verb, it means to connect two documents with a link.</li>
</ol>

<h3><a name="_gloss_link_object"></a>link object</h3>
<p>
A COM object that is created when a linked COM object is created or loaded. The link object is provided by Automation. See also linked object, link source.</p>

<h3><a name="_gloss_link_source"></a>link source</h3>
<p>
The object serving the data that is the source of a linked object. A link source may be a file or a portion of a file, such as a selected range of cells within a file (also called a pseudo-object).</p>

<h3><a name="_gloss_link_time"></a>link time</h3>
<p>
The period of time required by the linker to combine (link) object files and libraries during compilation of a program, or the point in time when these files are combined. See also linker.</p>

<h3><a name="_gloss_linkage_specification"></a>linkage specification</h3>
<p>
The protocol for linking functions (or procedures) written in different languages. Function calling conventions are affected by the linkage specification selected. An example of a linkage specification is <b>extern "C"</b>. See also external linkage, internal linkage.</p>

<h3><a name="_gloss_linked_item"></a>linked item</h3>
<p>
Or linked object. In OLE, an item in a compound document whose data is stored in a separate file rather than in the document's file. A linked item must be edited in a separate window. See also embedded item.</p>

<h3><a name="_gloss_linked_list"></a>linked list</h3>
<p>
In programming, a data structure consisting of nodes or elements connected by pointers. A singly linked list has one pointer in each node, pointing to the next node in the list; a doubly linked list has two pointers in each node, pointing to the next and previous nodes. In a circular list, the first and last nodes of the list are linked together.</p>

<h3><a name="_gloss_linked_object"></a>linked object</h3>
<p>
A COM object whose source data physically resides where it was initially created. Only a moniker that represents the source data and the appropriate presentation data are kept with the compound document. Changes made to the link source are automatically reflected in the linked object. See also link source.</p>

<h3><a name="_gloss_linker"></a>linker</h3>
<p>
A utility that combines object files and libraries to create an executable file or dynamic-link library. During the linking process, the linker resolves external references such as a call to a library routine by the program.</p>

<h3><a name="_gloss_linking_and_embedding"></a>linking and embedding</h3>
<p>
Two methods available in OLE for storing items inside a compound document when those items were created in another application. An embedded item is stored as part of the compound document that contains it. A linked item stores its data in a separate file. See also Object Linking and Embedding (OLE).</p>

<h3><a name="_gloss_list_view_control"></a>list view control</h3>
<p>
A Windows Common Control that displays a collection of items each consisting of an icon and a label.</p>

<h3><a name="_gloss_list.2d.box_control"></a>list-box control</h3>
<p>
In Windows, a child window that contains a list of items that can be selected by the user. List boxes can permit the selection of one item or multiple items. See also combo-box control.</p>

<h3><a name="_gloss_listserv"></a>listserv</h3>
<p>
An Internet application that automatically "serves" mailing lists by sending electronic newsletters to a stored database of Internet user addresses. Although some listservs are moderated, users can often handle their own subscribe/unsubscribe actions without requiring anyone at the server location to personally handle the transaction.</p>

<h3><a name="_gloss_literal"></a>literal</h3>
<p>
A value, used in a program statement, that is expressed directly rather than as a named constant or the contents of a variable. For example, in the statements</p>
<pre><code>i = 25; 
c = 'a';
cout &lt;&lt; "Hello";</code></pre>
<p>
the values 25, 'a', and "Hello" are literals. See also manifest constant, string literal.</p>

<h3><a name="_gloss_little.2d.endian"></a>little-endian</h3>
<p>
One of two byte-ordering conventions used on different machines. In little-endian addressing, the address points to the least significant byte of the word. Intel 80x86 and DEC RISC computers are little-endian machines. See also big-endian.</p>

<h3><a name="_gloss_load_time"></a>load time</h3>
<p>
The period of time required to place a program's executable files into memory prior to execution, or the point in time when the files are loaded.</p>

<h3><a name="_gloss_loaded_state"></a>loaded state</h3>
<p>
In OLE, the status of a compound-document object (either a linked or embedded item) whose handler is loaded in memory but whose server is not running. See also running state.</p>

<h3><a name="_gloss_local"></a>local</h3>
<ol>
<li>
In programming, describes an object, memory location, or variable whose scope or lifetime is limited. <br><br></li>
<li>
A Microsoft Windows NT keyword that identifies the <b>local</b> attribute, which can be applied to individual functions or to the interface as a whole.<br><br></li>
<li>
In distributed systems, descibes an operation that is performed by the current application rather than by another application on the same computer or on a remote computer.<br><br></li>
<li>
In networking, describes a device that can be accessed directly rather than by means of a communications line. <br><br></li>
<li>
In general, an adjective describing an item or operation that is close at hand or restricted to a particular area.</li>
</ol>

<h3><a name="_gloss_local_class"></a>local class</h3>
<ol>
<li>
A class declared inside a block. <br><br></li>
<li>
Or application local class. In Windows, any window class that an application registers for its exclusive use. Although an application can register any number of local classes, most applications register only one. This window class supports the window procedure of the application's main window. Windows destroys a local class when the application that registered it closes.</li>
</ol>

<h3><a name="_gloss_local_machine"></a>local machine</h3>
<p>
Or local computer. A computer that is accessed directly by the user rather than through an intermediate computer using a communications device. The opposite of a remote machine.</p>

<h3><a name="_gloss_local_object"></a>local object</h3>
<ol>
<li>
In C++, an object created inside a function or smaller enclosing block. A local object has scope only within the block in which it is created. <br><br></li>
<li>
In OLE, an object (that is not an embedded object) inside a container. Sometimes referred to as a cross-process object.</li>
</ol>

<h3><a name="_gloss_local_remote_procedure_call"></a>local remote procedure call</h3>
<p>
In RPC, a remote procedure call to another process on the same computer as the calling process.</p>

<h3><a name="_gloss_local_scope"></a>local scope</h3>
<p>
In C++, the degree of visibility afforded to a name (a variable, for example) when it is declared within a block of code. The name is accessible only from the point of declaration to the end of the block in which it is declared. See also class scope, file scope, function scope, function-prototype scope.</p>

<h3><a name="_gloss_local_server"></a>local server</h3>
<p>
An OLE server object implemented as an executable file that runs on the same computer as the client application. Because the server application is an executable file, it runs in its own process. See also in-process server, remote server.</p>

<h3><a name="_gloss_local_variable"></a>local variable</h3>
<p>
Or automatic variable. A variable declared within a function body, or smaller enclosing block, and not declared as static, that exists only within the scope of the enclosing curly braces (<b>{ }</b>). If a local variable has an initializer, it is initialized every time it is created and its contents are undefined when the function returns.</p>

<h3><a name="_gloss_locale"></a>locale</h3>
<p>
The national and cultural environment in which a system or program is running. The locale determines the language used for messages and menus, the sorting order of strings, the keyboard layout, and date and time formatting conventions. See also code page, locale identifier (LCID).</p>

<h3><a name="_gloss_locale_identifier"></a>locale identifier</h3>
<p>
A 32-bit value identifying the language and sublanguage for a locale. The locale identifier is used to customize string handling. See also code page, language identifier (ID).</p>

<h3><a name="_gloss_locale.2d.specific"></a>locale-specific</h3>
<p>
Behavior that depends on local conventions of nationality, culture, and language, such as language, money format, and date format.</p>

<h3><a name="_gloss_localization"></a>localization</h3>
<p>
The process of translating software, Help, and online or printed documentation into another language appropriate for other locales, customs, or cultures.</p>

<h3><a name="_gloss_lock"></a>lock</h3>
<p>
In COM and OLE, a pointer held to, and possibly a reference count incremented on, a running object. Two types of locks can be held on an object: strong and weak. To implement a strong lock, a server must maintain both a pointer and a reference count so that the object will remain "locked" in memory at least until the server releases it. To implement a weak lock, the server maintains only a pointer to the object so that the object can be destroyed by another process.</p>

<h3><a name="_gloss_locking_mode"></a>locking mode</h3>
<p>
A strategy for locking records in a recordset during update. A record is locked when it is read-only to all users but the one currently entering data in it. See also optimistic locking, pessimistic locking.</p>

<h3><a name="_gloss_logical_brush"></a>logical brush</h3>
<p>
An ideal description of a brush bitmap. A logical brush describes all the attributes (style, color, and so on) specified by the application that created it, although some may not be representable on available output devices. Windows also provides seven predefined logical stock brushes. See also brush, physical brush.</p>

<h3><a name="_gloss_logical_color_palette"></a>logical color palette</h3>
<p>
An array of colors created by an application that can be selected into a device context and used for graphics output. A logical color is an individual color in the <b>PALETTE</b> array. An application using a logical color palette can pass a <b>COLORREF</b> value, instead of an explicit red, green, blue (RGB) value, to GDI functions that expect a color. See also color palette, device context (DC).</p>

<h3><a name="_gloss_logical_coordinate_system"></a>logical coordinate system</h3>
<p>
A conceptual coordinate system that a program uses when giving drawing commands. Windows converts logical coordinates to the output device's physical coordinates when it renders the image.</p>

<h3><a name="_gloss_logical_font"></a>logical font</h3>
<p>
An ideal description of a font. The font itself is described by the attributes (height, width, orientation, and so on) defined for it by an application. Windows also provides six predefined logical stock fonts. Before an application can begin drawing text with a logical font, it must find the closest match from among the physical fonts stored on the device or in the operating system. See also font mapper, physical font.</p>

<h3><a name="_gloss_logical_operator"></a>logical operator</h3>
<p>
An operator that performs Boolean evaluations on its operands. The logical-NOT (<b>!</b>) operator produces the value 0 if its operand is true (nonzero) and the value 1 if its operand is false (0). The logical-AND (<b>&amp;&amp;</b>) operator produces the value 1 if both operands have nonzero values; otherwise, it produces the value 0. The logical-OR (<b>||</b>) operator produces the value 1 if either of its operands has a nonzero value. See also bitwise operator.</p>

<h3><a name="_gloss_logical_shift"></a>logical shift</h3>
<p>
Or bitwise shift. A bitwise operation wherein the bits in the first operand are shifted by the number of positions specified by the second operand. The operator specifies the direction the bits are shifted. See also arithmetic shift.</p>

<h3><a name="_gloss_logical_unit"></a>logical unit</h3>
<p>
A conceptual unit of measure for graphics device interface (GDI) functions. A logical unit is converted to a device, or physical, unit (for example, to a number of pixels or to a distance in inches) when an image is rendered on the output device. By default, GDI considers logical units to be equal to device units, meaning that 1 logical unit equals 1 pixel on the screen.</p>

<h3><a name="_gloss_logical_view"></a>logical view</h3>
<p>
A view expressed in terms of logical coordinates. A logical view can change its scaling when it is rendered onto an output device such as a display monitor.</p>

<h3><a name="_gloss_lookup_table"></a>lookup table</h3>
<p>
A reference table that maps an index or key to a value to be looked up and returned. A lookup table is often used as an alternative to lengthy run-time calculations.</p>

<h3><a name="_gloss_loop"></a>loop</h3>
<ol>
<li>
A set of statements in a program executed repeatedly, either a fixed number of times or until a condition is true or false.<br><br></li>
<li>
In an event-driven state machine, an action that returns control to the original state, either directly or through a series of state transitions.</li>
</ol>

<h3><a name="_gloss_loss_of_significance"></a>loss of significance</h3>
<p>
In programming, a potential error caused by presenting an argument to a math function that is either so large or so small that the operation returns a value that has lost most or all of the significant digits of the original argument. See also underflow.</p>

<h3><a name="_gloss_low_order"></a>low order</h3>
<p>
A description applied to the rightmost element in a group — the one that carries the least weight or significance. For example, the low-order bit in a byte would be the rightmost one.</p>

<h3><a name="_gloss_lrpc"></a>LRPC</h3>
<p>
In OLE, a protocol for interprocess communication on a single machine. See also Remote Procedure Call (RPC).</p>

<h3><a name="_gloss_lrpc"></a>LRPC</h3>
<p>
In RPC, a remote procedure call to another process on the same machine as the calling process.</p>

<h3><a name="_gloss_luminance"></a>luminance</h3>
<p>
In graphics, the perceived brightness of a surface or pixel. Luminance often refers to as a weighted average of red, green, and blue color values that gives the perceived brightness of the combination. See also red, green, blue (RGB); red, green, blue, alpha (RGBA).</p>
</FONT></BODY>
</HTML>

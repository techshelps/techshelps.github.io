<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Glossary C</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_gloss_glossary_c"></a><sup></sup>Glossary C</h1>

<h3><a name="_gloss_c_calling_convention"></a>C calling convention</h3>
<p>
The C standard for calling a function — that is, pushing arguments onto the stack from right to left (in reverse order from the way they appear in the argument list). After the function returns, the calling function removes the arguments from the stack. The C calling convention permits a variable number of arguments to be passed. See also calling convention.</p>

<h3><a name="_gloss_c_linkage_specifier"></a>C linkage specifier</h3>
<p>
A declaration of a function or object as <code>extern "C"</code>, indicating to the C++ compiler that the function name that follows the linkage specifier is an undecorated C function. C linkage allows existing C code to be used in new C++ applications. See also linkage specification.</p>

<h3><a name="_gloss_c_source_file"></a>C source file</h3>
<p>
A text file containing C language code.</p>

<h3><a name="_gloss_c.2b2b_.exception_handling"></a>C++ exception handling</h3>
<p>
Built-in support provided by the C++ language for handling anomalous situations, known as "exceptions," that may occur during the execution of a program. With C++ exception handling, a program can communicate unexpected events to a higher execution context that is better able to recover from such abnormal events. These exceptions are handled by code that is outside the normal flow of control. See also structured exception handling (SEH).</p>

<h3><a name="_gloss_c.2b2b_.header_file"></a>C++ header file</h3>
<p>
Or .HXX file. An external source file, identified at the beginning of a C++ program, that contains commonly used data types and variables used by functions in a program. The #include directive is used to tell the compiler to insert the contents of a header file into the program.</p>

<h3><a name="_gloss_c.2b2b_.source_file"></a>C++ source file</h3>
<p>
Or .CXX file. A text file containing C++ source code.</p>

<h3><a name="_gloss_cache"></a>cache</h3>
<p>
A special memory subsystem in which frequently used data values and instructions are duplicated for quick access.</p>

<h3><a name="_gloss_call_level_interface"></a>call level interface</h3>
<p>
A library of function calls that support SQL statements and conform to the SQL Access Group Call Level Interface specification. These calls are typically used for dynamic access to data. ODBC is a call level interface.</p>

<h3><a name="_gloss_call_stack"></a>call stack</h3>
<p>
An ordered list of functions that have been called but have not returned, with the currently executing function listed first. Each call is optionally shown with the arguments and types passed to it. During a debug session, you can view the functions that have been called but have not returned.</p>

<h3><a name="_gloss_callback_function"></a>callback function</h3>
<p>
An application-defined function that a system or subsystem (Windows, for example) calls. Typically, this happens when an event occurs or when windows or fonts are being enumerated. Examples of callback functions include window procedures, dialog-box procedures, and hook procedures. Callback functions are also used to process dynamic data exchange (DDE) transactions.</p>

<h3><a name="_gloss_calling_convention"></a>calling convention</h3>
<p>
A convention that determines the order in which arguments passed to functions are pushed on the stack (the calling sequence), whether the calling or called function removes the arguments from the stack, and the name-decorating convention the compiler uses to identify individual functions. See also C calling convention, calling sequence.</p>

<h3><a name="_gloss_calling_sequence"></a>calling sequence</h3>
<p>
Determines the order in which parameters are pushed onto the stack during a function call and which code block is responsible for the stack pointer. Typically, the C compiler generates code that pushes parameters on the stack from right to left, beginning with the last parameter. See also calling convention.</p>

<h3><a name="_gloss_caret"></a>caret</h3>
<ol>
<li>
Or insertion point. A flashing line, block, or bitmap that marks the location at which inserted text will appear in a window's client area.<br><br></li>
<li>
(^) When preceding a single uppercase letter, indicates a control character. For example, ^C is the same as CTRL+C.<br><br></li>
<li>
(^) A regular expression used to indicate either the beginning of a line or, when used within brackets, to indicate an exception.</li>
</ol>

<h3><a name="_gloss_carriage_return_character"></a>carriage return character</h3>
<p>
A control character that tells a computer or printer to return to the beginning of the current line. This character can have a different textual representation on different platforms, but it always has the ASCII value of 13. See also carriage return–linefeed (CR-LF) pair.</p>

<h3><a name="_gloss_carriage_return.96.linefeed_.28.cr.2d.lf.29_.pair"></a>carriage return–linefeed (CR-LF) pair</h3>
<p>
The combination of a carriage return character (ASCII 13) and a linefeed character (ASCII 10), represented in C/C++ by the newline (\n) character.</p>

<h3><a name="_gloss_casting"></a>casting</h3>
<p>
Explicit or implicit conversion of one data type to another.</p>

<h3><a name="_gloss_catch_block"></a>catch block</h3>
<p>
Or catch handler. In C++, a block of exception-handling code preceded by the keyword <b>catch</b>. The code in the catch block is executed only if the code in the <b>try</b> block throws an exception of the type specified in the <b>catch</b> statement. See also C++ exception handling, throw expression.</p>

<h3><a name="_gloss_cgi"></a>CGI</h3>
<p>
A mechanism that allows a Web server to run a program or script on the server and send the output to a Web browser. See also Internet Server Application Programming Interface (ISAPI).</p>

<h3><a name="_gloss_challenge_handshake_authentication_protocol"></a>Challenge Handshake Authentication Protocol</h3>
<p>
In ISDN, a type of signaling authentication that uses a pair of secret codes consisting of up to 16 characters. CHAP is shared by communications devices on both ends.</p>

<h3><a name="_gloss_chap"></a>CHAP</h3>
<p>
In ISDN, a type of signaling authentication that uses a pair of secret codes consisting of up to 16 characters. CHAP is shared by communications devices on both ends.</p>

<h3><a name="_gloss_character_constant"></a>character constant</h3>
<p>
A member of the "source character set," the character set in which a program is written, surrounded by single quotation marks ( '[\.thsp]). Character constants are used to represent characters in the "execution character set" on the machine where the program executes.</p>

<h3><a name="_gloss_character_index"></a>character index</h3>
<p>
The number of characters from the beginning of an edit control.</p>

<h3><a name="_gloss_character.2d.mode_application"></a>character-mode application</h3>
<p>
An application that does not provide its own graphical user interface (GUI). The Win32 API provides consoles for managing input and output for character-mode applications. See also console application.</p>

<h3><a name="_gloss_checksum"></a>checksum</h3>
<p>
An error-detection scheme that involves creating a sum of the bits in a set of bytes of data and using that sum to later check for a change in the data. Checksums are commonly used in communications software to check for data transmission errors.</p>

<h3><a name="_gloss_child_control"></a>child control</h3>
<p>
A child window used in conjunction with another window (its parent) to carry out simple input and output (I/O) tasks.</p>

<h3><a name="_gloss_child_process"></a>child process</h3>
<p>
A process initiated by another process (the parent process). The child process can operate independently from the parent process. Further, the parent process can suspend or terminate without affecting the child process.</p>

<h3><a name="_gloss_child_window"></a>child window</h3>
<p>
A window that has the WS_CHILD or WS_CHILDWINDOW style and is confined to the client area of its parent window, which initiates and defines the child window. Typically, an application uses child windows to divide the client area of a parent window into functional areas. See also child control, sibling window.</p>

<h3><a name="_gloss_chord"></a>chord</h3>
<p>
A closed figure bounded by the intersection of an ellipse and a line segment. In Windows, a chord is outlined by using the current pen and filled by using the current brush.</p>

<h3><a name="_gloss_cisc"></a>CISC</h3>
<p>
A processor that uses complex instructions at the assembly language level, allowing flexible ways of calculating such elements as memory addresses. A single instruction set may comprise several simpler instructions. Contrast with RISC.</p>

<h3><a name="_gloss_cl_environment_variable"></a>CL environment variable</h3>
<p>
An environment variable used to specify files and options for the compiler/linker so you do not have to specify them on the command line.</p>

<h3><a name="_gloss_cl..exe"></a>CL.EXE</h3>
<p>
Or CL. A driver program that controls the Microsoft C and C++ compilers and linker. The compilers produce Common Object File Format (COFF) object files. The linker produces executable (.EXE) files, dynamic-link libraries (DLLs), or static-link libraries.</p>

<h3><a name="_gloss_class"></a>class</h3>
<p>
A type that defines the interface of a particular kind of object. A class definition defines instance variables and methods, class variables and methods, and specifies the immediate superclass (or superclasses) and the interfaces that the class implements.</p>

<h3><a name="_gloss_class_declaration"></a>class declaration</h3>
<p>
In C++, the mechanism for declaring an aggregate data structure of type <b>class</b>. A class declaration provides a list of its members (such as functions, data, and other classes), specifies any friends of the class, and defines the level of visibility for all members.</p>

<h3><a name="_gloss_class_factory"></a>class factory</h3>
<p>
An object that creates one or more instances of an object identified by a given CLSID. A class factory object implements the <b>IClassFactory</b> interface. A class factory is one of the most frequently used types of class objects in OLE.</p>

<h3><a name="_gloss_class_identifier"></a>class identifier</h3>
<p>
A universally unique identifier (UUID) that identifies a type of OLE object. Each type of OLE object (item) has its CLSID in the registry so that it can be loaded and programmed by other applications. For example, a spreadsheet may create worksheet items, chart items, and macrosheet items. Each of these item types has its own CLSID that uniquely identifies it to the system. See also registration entry file.</p>

<h3><a name="_gloss_class_library"></a>class library</h3>
<p>
A set of related C++ classes that can be used in an application, either as originally defined or as the source for other derived classes. The Microsoft Foundation Class Library included in Visual C++ is an example of a class library that defines a framework for integrating the user interface of an application for Windows with the rest of the application.</p>

<h3><a name="_gloss_class_method"></a>class method</h3>
<p>
In Java, any method that can be invoked using the name of a particular class. Since the declaration uses the keyword <b>static</b>, these are called static member functions in C++. Class methods, which are defined in class definitions, affect the class as a whole, not a particular instance of the class. Compare with instance method.</p>

<h3><a name="_gloss_class_scope"></a>class scope</h3>
<p>
In C++, the degree of visibility afforded to a name (function or variable, for example) when it is declared within a class declaration. The name is accessible from outside the class by using the scope-resolution (<b>::</b>) operator. See also file scope, function scope, function-prototype scope, local scope.</p>

<h3><a name="_gloss_class_variable"></a>class variable</h3>
<p>
In Java, a data item associated with a particular class as a whole, not with particular instances of the class. Class variables are defined in class definitions. Equivalent to static member variables in C++, since the declaration uses the keyword <b>static</b>. In C++, a class variable must be explicitly defined, external to the class declaration. See also instance variable.</p>

<h3><a name="_gloss_classwizard_file"></a>ClassWizard file</h3>
<p>
A file that ClassWizard generates, containing information needed to edit existing classes or add new classes to a project. ClassWizard also uses the ClassWizard file to store information needed to create and edit message maps and dialog data maps, and to create prototype member functions. ClassWizard files have a .CLW filename extension.</p>

<h3><a name="_gloss_cli"></a>CLI</h3>
<p>
A library of function calls that support SQL statements and conform to the SQL Access Group Call Level Interface specification. These calls are typically used for dynamic access to data. ODBC is a call level interface.</p>

<h3><a name="_gloss_client"></a>client</h3>
<p>
An application or a process that requests a service from some other process, or from an in-process server. See also client/server.</p>

<h3><a name="_gloss_client_area"></a>client area</h3>
<p>
Or client rectangle. The portion of a window where the application displays output such as text or graphics.</p>

<h3><a name="_gloss_client_coordinates"></a>client coordinates</h3>
<p>
An ordered pair (x,y) of numbers, relative to the origin (usually the upper-left corner of a window's client area), that designates a point in the client area. See also window rectangle.</p>

<h3><a name="_gloss_client_item"></a>client item</h3>
<p>
An object that provides an interface between an OLE item and the container application, and that is of a class derived from the MFC class <b>COleClientItem</b>. Client items are maintained by the container application and give the container application access to the presentation data and the native data. Client items also provide site(location) information to the server application for in-place activation. See also embedded item, linked item, server item.</p>

<h3><a name="_gloss_client_object"></a>client object</h3>
<p>
An object issuing a request for a service. A given object may be a client for some requests and a server for other requests. See also server object.</p>

<h3><a name="_gloss_client.2f.server"></a>client/server</h3>
<ol>
<li>
The most commonly used model for distributed applications. Client applications request services from a server application. A server can have many clients at the same time, and a client can request data from multiple servers. An application can be both a client and a server. See also client.<br><br></li>
<li>
In network architecture, a model for a local area network where clients initiate communication with the server, which carries out the requests in the form of replies. For example, the clients may be workstations communicating with a file server on which all of their data is stored. See also client.</li>
</ol>

<h3><a name="_gloss_clip_path"></a>clip path</h3>
<p>
A graphics object that an application can select into a device context. A clip path is always created by an application and it is used for clipping to one or more irregular shapes. For example, an application can use the lines and curves that form the outlines of characters in a string of text to define a clip path. See also clipping region.</p>

<h3><a name="_gloss_clipboard"></a>clipboard</h3>
<p>
An area of storage, or buffer, where data objects or their references are placed when a user carries out a cut or copy operation.</p>

<h3><a name="_gloss_clipboard_format"></a>clipboard format</h3>
<p>
The data format of a memory object on the clipboard. Applications can use the standard clipboard formats provided by Windows or register their own custom formats. A clipboard format is identified by a unique, unsigned integer value, called the "format name."</p>

<h3><a name="_gloss_clipboard_owner"></a>clipboard owner</h3>
<p>
Or owner application. The application associated with the information on the clipboard. It is possible for there to be no clipboard owner. See also clipboard viewer.</p>

<h3><a name="_gloss_clipboard_viewer"></a>clipboard viewer</h3>
<p>
A window that displays the contents of the clipboard. See also clipboard owner.</p>

<h3><a name="_gloss_clipboard.2d.viewer_chain"></a>clipboard-viewer chain</h3>
<p>
A link between all of the running clipboard-viewer applications, enabling them to all receive the messages that Windows sends to the current clipboard viewer.</p>

<h3><a name="_gloss_clipping"></a>clipping</h3>
<ol>
<li>
In Windows, the process of limiting output to a region or path within the client area in a window. For example, word processing and spreadsheet applications clip keyboard input to keep it from appearing in the margins of a page or spreadsheet.<br><br></li>
<li>
In Open GL, eliminating the portion of a geometric primitive that is outside the half-space defined by a clipping plane.</li>
</ol>

<h3><a name="_gloss_clipping_precision"></a>clipping precision</h3>
<p>
A 16-bit value that defines how to clip characters that are partially outside the clipping region.</p>

<h3><a name="_gloss_clipping_region"></a>clipping region</h3>
<p>
In Windows, the portion of a window's client area where the system permits drawing.</p>

<h3><a name="_gloss_clsid"></a>CLSID</h3>
<p>
A universally unique identifier (UUID) that identifies a type of OLE object. Each type of OLE object (item) has its CLSID in the registry so that it can be loaded and programmed by other applications. For example, a spreadsheet may create worksheet items, chart items, and macrosheet items. Each of these item types has its own CLSID that uniquely identifies it to the system. See also registration entry file.</p>

<h3><a name="_gloss_code_page"></a>code page</h3>
<p>
A character set, which can include numbers, punctuation marks, and other glyphs. Different languages and locales may use different code pages. For example, code page 1252 is used for American English and most European languages. See also locale.</p>

<h3><a name="_gloss_coff"></a>COFF</h3>
<p>
In 32-bit programming, a format for executable and object files that is portable across platforms. The Microsoft implementation of COFF is derived from the UNIX specification for COFF,&nbsp; but includes additional headers for compatibility with MS-DOS and 16-bit Windows. This Microsoft version is sometimes called the "portable executable (PE) file format."</p>

<h3><a name="_gloss_collection_class"></a>collection class</h3>
<p>
In object-oriented programming, a class that can hold and process groups of class objects or groups of standard types. A collection class is characterized by its "shape" ( the way the objects are organized and stored) and by the types of its elements. MFC provides three basic collection shapes: lists, arrays, and maps (also known as dictionaries). See also collection object.</p>

<h3><a name="_gloss_collection_object"></a>collection object</h3>
<p>
An object in a collection class.</p>

<h3><a name="_gloss_color_palette"></a>color palette</h3>
<p>
An array containing the RGB values that identify the colors that can currently be displayed or drawn on the output device. Color palettes are used by devices that are capable of generating many colors but can only display or draw a subset of these at any given time. See also logical color palette.</p>

<h3><a name="_gloss_com"></a>COM</h3>
<p>
An open architecture for cross-platform development of client/server applications based on object-oriented technology as agreed upon by Digital Equipment Corporation and Microsoft Corporation. The Component Object Model defines an interface (similar to an abstract base class), <b>IUnknown</b>, from which all COM-compatible classes are derived.</p>

<h3><a name="_gloss_combo.2d.box_control"></a>combo-box control</h3>
<p>
In Windows, a child window that consists of a list box combined with either a static control or an edit control. The list-box portion of the control can either be displayed at all times or drop down when the user selects the drop-down arrow next to the control.</p>

<h3><a name="_gloss_comdat_record"></a>COMDAT record</h3>
<p>
A Common Object File Format (COFF) record that contains initialized common block data and makes packaged functions visible to the linker. See also packaged function.</p>

<h3><a name="_gloss_command_file"></a>command file</h3>
<p>
A text file that contains options and filenames you would otherwise type on the command line or specify using the CL or LINK environment variable. Since the command line is typically limited to 128 characters, a command file allows you to specify a large set of options or a very long file list to the compiler, linker, or resource compiler, for instance.</p>

<h3><a name="_gloss_command_handler"></a>command handler</h3>
<p>
In MFC, a member function of an object which handles a request. Command handler member functions take no parameters and return <b>void</b>.</p>

<h3><a name="_gloss_command_identifier"></a>command identifier</h3>
<p>
Or command ID. In MFC, an identifier that associates a command message with the user-interface object (such as a menu item, toolbar button, or accelerator key) that generated the command. Typically, command IDs are named for the functionality of the user-interface object they are assigned to. For example, a Clear All item in the Edit menu might be assigned an ID such as ID_EDIT_CLEAR_ALL.</p>

<h3><a name="_gloss_command_line"></a>command line</h3>
<p>
A string of text typed at the command prompt, or executed from a command file, that specifies a task or tasks for&nbsp; the operating system or an application to perform.</p>

<h3><a name="_gloss_command_message"></a>command message</h3>
<ol>
<li>
In Windows, a notification message from a user-interface object, such as a menu, toolbar button, or accelerator key. The framework processes command messages differently from other messages and such messages can be handled by a wider variety of object — documents, document templates, and the application object itself, in addition to windows and views.<br><br></li>
<li>
In Media Control Interface (MCI), a symbolic constant that represents a unique command for an MCI device. Command messages have associated data structures that provide information a device requires to carry out a request.</li>
</ol>

<h3><a name="_gloss_comment_delimiters"></a>comment delimiters</h3>
<p>
Characters used to denote text in a program that is not source code, thus telling the compiler to ignore it. C++ allows the traditional comment delimiters:</p>
<p>
<code>/* this is a comment */ </code></p>
<p>
as well as a single-line comment delimiter:</p>
<p>
<code>// everything else on this line is a comment</code></p>

<h3><a name="_gloss_commit_size"></a>commit size</h3>
<p>
The amount of a resource that is allocated (or "committed") for a particular use.&nbsp; For example, in the header of a COFF file, the Windows NT–specific field Heap Commit Size specifies the size of the local heap that the linker and loader should allocate for that file. See also reserve size.</p>

<h3><a name="_gloss_common_data_record"></a>common data record</h3>
<p>
A Common Object File Format (COFF) record that contains initialized common block data and makes packaged functions visible to the linker. See also packaged function.</p>

<h3><a name="_gloss_common_dialog_box"></a>common dialog box</h3>
<p>
A dialog box predefined in Windows that supports standard operations, such as the Open command on the File menu. An application displays a common dialog box by calling a single function rather than by supplying a dialog box procedure and using a resource file containing a dialog box template.</p>

<h3><a name="_gloss_common_gateway_interface"></a>Common Gateway Interface</h3>
<p>
A mechanism that allows a Web server to run a program or script on the server and send the output to a Web browser. See also Internet Server Application Programming Interface (ISAPI).</p>

<h3><a name="_gloss_common_object_file_format"></a>Common Object File Format</h3>
<p>
In 32-bit programming, a format for executable and object files that is portable across platforms. The Microsoft implementation of COFF is derived from the UNIX specification for COFF,&nbsp; but includes additional headers for compatibility with MS-DOS and 16-bit Windows. This Microsoft version is sometimes called the "portable executable (PE) file format."</p>

<h3><a name="_gloss_compact_executable_file"></a>compact executable file</h3>
<p>
An executable binary (program) file whose code is limited to a single 64-kilobyte segment. Compact executable files usually have a .COM filename extension and are often used for utility programs and short routines. See also executable file.</p>

<h3><a name="_gloss_compilation"></a>compilation</h3>
<p>
The translation of source code into object code.</p>

<h3><a name="_gloss_compilation_unit"></a>compilation unit</h3>
<p>
The smallest unit of code that can be independently compiled, usually a source code file. See also translation unit.</p>

<h3><a name="_gloss_compile_time"></a>compile time</h3>
<p>
The point at which a program is being compiled, or the amount of time required to perform a compilation of a program.</p>

<h3><a name="_gloss_compile.2d.time_error"></a>compile-time error</h3>
<p>
A syntactic or semantic error that prevents a program from being compiled.</p>

<h3><a name="_gloss_compiled_resource_file"></a>compiled resource file</h3>
<p>
Or binary resource file. A binary file that contains a Windows-based application's resource data and is created by the resource compiler from the resource-definition (.RC) file. Compiled resource files usually have a .RES filename extension. See also Macintosh binary resource file, resource compiler.</p>

<h3><a name="_gloss_compiler"></a>compiler</h3>
<p>
A program that translates source code, such as C++ or Pascal, into directly executable machine code.</p>

<h3><a name="_gloss_compiler.2f.linker_driver"></a>compiler/linker driver</h3>
<p>
Or CL. A driver program that controls the Microsoft C and C++ compilers and linker. The compilers produce Common Object File Format (COFF) object files. The linker produces executable (.EXE) files, dynamic-link libraries (DLLs), or static-link libraries.</p>

<h3><a name="_gloss_complete_object"></a>complete object</h3>
<p>
An instance of a derived class from which no other classes are derived. A complete object is an object that is not a subobject representing a base class.</p>

<h3><a name="_gloss_complex_instruction_set_computer"></a>Complex Instruction Set Computer</h3>
<p>
A processor that uses complex instructions at the assembly language level, allowing flexible ways of calculating such elements as memory addresses. A single instruction set may comprise several simpler instructions. Contrast with RISC.</p>

<h3><a name="_gloss_component_object"></a>component object</h3>
<p>
An object that conforms to COM. Clients deal with a component object only through a pointer to an interface. See also interface, reference counting, marshaling, aggregation.</p>

<h3><a name="_gloss_component_object_model"></a>Component Object Model</h3>
<p>
An open architecture for cross-platform development of client/server applications based on object-oriented technology as agreed upon by Digital Equipment Corporation and Microsoft Corporation. The Component Object Model defines an interface (similar to an abstract base class), <b>IUnknown</b>, from which all COM-compatible classes are derived.</p>

<h3><a name="_gloss_composite_moniker"></a>composite moniker</h3>
<p>
A moniker that consists of two or more monikers that are treated as a unit. A composite moniker can be nongeneric, meaning that its component monikers have special knowledge of each other, or generic, meaning that its component monikers know nothing about each other except that they are monikers. See also generic composite moniker.</p>

<h3><a name="_gloss_compositing"></a>compositing</h3>
<p>
The process of superimposing one image on another to create a single image.</p>

<h3><a name="_gloss_compound_document"></a>compound document</h3>
<p>
Or container document. A document within a container application that contains data of different formats, such as sound clips, spreadsheets, text, and bitmaps. Each piece of integrated data (or "compound-document object") can exist within the compound document as a linked item or an embedded item.</p>

<h3><a name="_gloss_compound_file"></a>compound file</h3>
<p>
The OLE implementation of the structured-storage model, which specifies how data is saved to and retrieved from storage. Conceptually, a compound file is a number of individual files (or stream objects) multiplexed into one physical file (or storage object) that still allows access to each individual file.</p>

<h3><a name="_gloss_compressed_slip"></a>Compressed SLIP</h3>
<p>
SLIP with data compression for a more efficient connection. See also Serial Line Internet Protocol (SLIP).</p>

<h3><a name="_gloss_conditional_expression"></a>conditional expression</h3>
<p>
Or Boolean expression, logical expression. An expression that yields a Boolean value (true or false). Such expressions can involve comparisons, using relational operators such as the less-than (<b>&lt;</b>) and greater-than (<b>&gt;</b>) operators, and logical combination of Boolean expressions, using Boolean operators such as bitwise&nbsp; AND (<b>&amp;</b>) and logical OR (<b>||</b>).</p>

<h3><a name="_gloss_connectable_object"></a>connectable object</h3>
<p>
A COM object that supports event communication from the server to the client. The connectable object fires events by calling interfaces implemented on client objects. See also advise sink, connection point.</p>

<h3><a name="_gloss_connection_point"></a>connection point</h3>
<p>
In OLE, a mechanism consisting of the object calling the interface, called the "source," and the object implementing the interface, called the "sink." The connection point implements an outgoing interface that is able to initiate actions, such as firing events and change notifications, on other objects. By exposing a connection point, a source allows sinks to establish connections to the source. See also connectable object.</p>

<h3><a name="_gloss_connection_string"></a>connection string</h3>
<p>
Or connect string. In ODBC, a string expression used to open an external database.</p>

<h3><a name="_gloss_console"></a>console</h3>
<p>
An interface that provides input and output to character-mode applications. This processor-independent mechanism makes it easy to port existing character-mode applications or to create new character-mode tools and applications.</p>

<h3><a name="_gloss_console_application"></a>console application</h3>
<ol>
<li>
A character-mode application that uses a console window for its input and output. If necessary, the operating system will create a new console window, which exists until the application terminates.<br><br></li>
<li>
More generally, a program that runs from the operating system's command line, in character-mode, rather than from a graphical user interface.</li>
</ol>

<h3><a name="_gloss_constant"></a>constant</h3>
<p>
An object or variable that is not modifiable. In C++, the keyword <b>const</b> can be used to define constant values. See also manifest constant.</p>

<h3><a name="_gloss_constant_expression"></a>constant expression</h3>
<p>
An expression that is evaluated at compile time instead of run time. The constant expression can be used in any place that a constant can be used, but it must evaluate to a constant that is in the range of representable values for that type.</p>

<h3><a name="_gloss_constructor"></a>constructor</h3>
<p>
In C++, a special initialization function that is called automatically whenever an instance of a class is declared. This function prevents errors that result from the use of uninitialized objects. The constructor must have the same name as the class itself and must not return a value. See also copy constructor, default constructor, destructor.</p>

<h3><a name="_gloss_container_application"></a>container application</h3>
<p>
Or OLE container. An application that can incorporate embedded or linked items into its own documents. The documents managed by a container application are able to store and display OLE Visual Editing items as well as data created by the application itself. A container application allows users to insert new items or edit existing items. See also server application.</p>

<h3><a name="_gloss_containment"></a>containment</h3>
<p>
A composition technique for accessing one or more COM objects via a single interface. It allows one object to reuse some or all of the interface implementations of one or more other objects. The outer object manages requests to other objects, delegating implementation when it uses the services of one of the contained objects. Contrast with aggregation.</p>

<h3><a name="_gloss_context_identifier_.28.id.29"></a>context identifier (ID)</h3>
<p>
Or context reference. A unique number or string that corresponds to a particular object in the application — for example, to a menu command, form, control, or screen region. Context IDs are used to create links between the application and the corresponding Help topics.</p>

<h3><a name="_gloss_context_number"></a>context number</h3>
<p>
The number used to identify a Windows Help topic. If context numbers are not explicitly assigned to topics, the Help compiler generates default values by converting topic strings into context numbers. The [MAP] section of a Help project (.HPJ) file associates a context string and a context number. See also context string.</p>

<h3><a name="_gloss_context_string"></a>context string</h3>
<p>
A unique character string formatted as hidden text in a rich-text format (.RTF) file. Context strings link "hot spots" to target topics. The [MAP] section of a Help project (.HPJ) file associates a context string and a context number. See also context number.</p>

<h3><a name="_gloss_control"></a>control</h3>
<p>
An embeddable, reusable COM object that supports, at a minimum, the <b>IOleControl</b> interface. Controls are typically created for the user interface, but they also support communication with a control container. They can be reused by multiple clients, depending upon licensing restrictions.</p>

<h3><a name="_gloss_control_bar"></a>control bar</h3>
<p>
A window that can contain buttons, edit boxes, check boxes, or other kinds of Windows controls. A control bar is usually aligned with the top or bottom of a frame window and provides quick, one-step command actions. Control bars include toolbars, status bars, and dialog bars.</p>

<h3><a name="_gloss_control_container"></a>control container</h3>
<p>
An application that supports the embedding of controls by implementing the <b>IOleControlSite</b> interface. See also control.</p>

<h3><a name="_gloss_control_identifier_.28.id.29"></a>control identifier (ID)</h3>
<p>
A 16-bit value that an application uses to uniquely identify a child control. This ID is used in notification messages to the parent window when events, such as input from the user, occur in the control.</p>

<h3><a name="_gloss_control_property"></a>control property</h3>
<p>
A run-time property that is exposed and managed by the control itself. For example, the font and text size used by the control are control properties. See also run-time property.</p>

<h3><a name="_gloss_controlling_object"></a>controlling object</h3>
<p>
The object that manages access to the contained aggregate objects. See also containment.</p>

<h3><a name="_gloss_conversion_function"></a>conversion function</h3>
<ol>
<li>
In C++, a special member function that makes an explicit conversion from a given class type to another data type by using the <b>operator</b> <i>type-name</i><b>( )</b> syntax. Conversion functions are often called "cast operators" because they are the functions called when a cast operator is used.<br><br></li>
<li>
More generally, any function that converts one data type or format to another data type or format.</li>
</ol>

<h3><a name="_gloss_cookie"></a>cookie</h3>
<p>
A unique identifier that is opaque (not aliased to anything else). The cookie may be an index, a hash value, or a pointer to some object in memory, but only the subsystem knows this. To the subsystem user, the cookie is just the name of a resource.</p>

<h3><a name="_gloss_coordinate_space"></a>coordinate space</h3>
<p>
A planar space based on the Cartesian coordinate system.</p>

<h3><a name="_gloss_coordinated_universal_time"></a>coordinated universal time</h3>
<p>
A global time standard equivalent to Greenwich mean time (GMT).</p>

<h3><a name="_gloss_copy_constructor"></a>copy constructor</h3>
<p>
In C++, a constructor with one parameter, whose type is a reference to another instance of the class. If a class is declared without a copy constructor, the compiler will generate one automatically. The copy constructor is used when an instance is created from another instance (for example, an assignment from one instance of the class to another).</p>

<h3><a name="_gloss_crc"></a>CRC</h3>
<p>
An error-detecting method that uses a polynomial code. The method is sometimes referred to as the polynomial code.</p>

<h3><a name="_gloss_critical_section"></a>critical section</h3>
<p>
A segment of code which is not reentrant; that is, it does not support concurrent access by multiple threads.&nbsp; Often, a critical section is used to protect shared resources</p>

<h3><a name="_gloss_cross_compilation"></a>cross compilation</h3>
<p>
A compilation of source code that takes place on one hardware platform but generates object code for another. For example, object code for the Power Macintosh can be compiled on an Intel-based Windows platform. See also compilation, object code.</p>

<h3><a name="_gloss_cslip"></a>CSLIP</h3>
<p>
SLIP with data compression for a more efficient connection. See also Serial Line Internet Protocol (SLIP).</p>

<h3><a name="_gloss_cursor_resource_file"></a>cursor resource file</h3>
<p>
A file that contains an image that defines the shape of a cursor on the screen. Cursor resource files usually have a .CUR filename extension.</p>

<h3><a name="_gloss_custom_control"></a>custom control</h3>
<p>
A special-format dynamic-link library (DLL) or object file that adds features and functionality to a Windows-based application user interface. A custom control can be a variation on an existing Windows dialog-box control (for example, a text box suitable for use with a pen and digitizing tablet) or an entirely new category of control. See also ActiveX control.</p>

<h3><a name="_gloss_custom_interface"></a>custom interface</h3>
<p>
An interface that uses no built-in mechanisms for marshaling, providing user-defined (custom) marshaling instead.</p>

<h3><a name="_gloss_custom_resource"></a>custom resource</h3>
<p>
Or application-defined resource. A resource that a developer creates and adds to an application's executable file that contains data required by the application. See also standard resource.</p>

<h3><a name="_gloss_cyclic_redundancy_check"></a>cyclic redundancy check</h3>
<p>
An error-detecting method that uses a polynomial code. The method is sometimes referred to as the polynomial code.</p>
</FONT></BODY>
</HTML>

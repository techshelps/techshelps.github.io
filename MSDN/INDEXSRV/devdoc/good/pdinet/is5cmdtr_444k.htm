<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommandTree : ICommand</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_idxs_icommandtree_icommand"></a>ICommandTree : ICommand</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
This interface is optional for providers that support commands. It contains methods for manipulating query trees. Providers that support Command Trees must also support specifying the same functionality through ICommandText.</p>
<p>
A command object can have only one command; that command can be in the form of a command tree (specified in ICommandTree) or a text command (specified in ICommandText). Thus, if a command is specified through SetCommandTree or ICommandText::SetCommandText, it replaces the command object's command, regardless of whether that command was in text or tree form. If a command is retrieved through GetCommandTree or ICommandText::GetCommandText, it is retrieved in the specified form, regardless of how the command was set. Thus, GetCommandText must be able to convert a command tree into command text, and GetCommandTree must be able to convert command text into a command tree. Note that in the latter conversion, the provider should return a navigable command tree representation of the text, which is not necessarily in optimized form; if the provider cannot create a fuller representation, the command tree can consist of a single text node.</p>
<p>
Most providers will not permit setting a new command tree while there is a rowset open that was created by the command object (and thus directly reflects the result table of the current command tree). Some providers, however, may support this operation even while a rowset is open. If so, the new command tree's output schema (set of columns) must include all column for which there currently are accessors, and all rowsets' accessors remain valid. Currently open rowsets must be modified dynamically to reflect the new command tree's result table. HROWs remain valid, meaning that a new sort order or a new selection predicate are not reflected for those rows, and that all accessors that may be created after the command tree modification will work with HROWs obtained before the command tree modification. If an error occurs while replacing or modifying a command tree with open rowsets, the command object, its command tree, the rowsets, HROWs and accessors remain unchanged.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Method</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=36%>FindErrorNodes</td>
<td width=64%></td>
</tr>
<tr valign=top>
<td width=36%>FreeCommandTree</td>
<td width=64%></td>
</tr>
<tr valign=top>
<td width=36%>GetCommandTree</td>
<td width=64%></td>
</tr>
<tr valign=top>
<td width=36%>SetCommandTree</td>
<td width=64%></td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

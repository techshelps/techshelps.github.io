<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparison Operators</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_idxs_comparison_operators"></a>Comparison Operators</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> 
<dl>
<dt>
DBOP_is_NULL, DBOP_is_NOT_NULL</dt>
<dd>
Comparison to NULL value. Both operators are needed, since "NOT is_NULL" and "is_NOT_NULL" differ in SQL if the operand is a row with some (but not all) NULL values. One scalar input, Boolean result.</dd>
<dt>
DBOP_equal, DBOP_not_equal, DBOP_less, DBOP_less_equal, DBOP_greater, DBOP_greater_equal, DBOP_equal_all, DBOP_not_equal_all, DBOP_less_all, DBOP_less_equal_all, DBOP_greater_all, DBOP_greater_equal_all, DBOP_equal_any, DBOP_not_equal_any, DBOP_less_any, DBOP_less_equal_any, DBOP_greater_any, DBOP_greater_equal_any</dt>
<dd>
Comparison operators with semantics as in SQL. For the normal comparison operators, the two inputs rows must both be scalars, or both be rows. Otherwise, the scalar is converted into a one-column row as necessary. The "_all" and "_any" operators require a scalar left input and a table-valued right input, where a column value in a chaptered column is a special case of a table. Boolean output.
<p>
Row-valued comparison refers to the comparison between two row instances. Multi-valued comparison refers to the comparison between a row instance and a table (i.e., _all, any operators). The rules for row-valued comparisons are based on ANSI SQL semantics. The rules for multi-valued comparisons are an extension of the rule-valued ones.

<p>
The weight of this node is stored as a DBVALUEKIND_I4 in the value.lValue field.
</dd>
<dt>
DBOP_anybits, DBOP_allbits, DBOP_anybits_any, DBOP_allbits_any, DBOP_anybits_all, DBOP_allbits_all</dt>
<dd>
These operators are exactly like other comparison operators in terms of syntax: they take two inputs, the first being a column, the second being a scalar value to compare with the column. The specific semantics of these nodes are as follows. DBOP_any_bits is true if the column value bitwise-ANDed with the constant is non-zero. DBOP_all_bits is true if the column value bitwise-ANDed with the constant equals the constant. There are also "_any" and "_all" versions of these nodes, as with other comparison operators.
<p>
The weight of this node is stored as a DBVALUEKIND_I4 in the value.lValue field.
</dd>
<dt>
DBOP_between, DBOP_between_unordered</dt>
<dd>
SQL comparison operations. "Between_unordered" first sorts the bounding values; "a between_unordered b and c" is equivalent to "a &gt;= min (b, c) and a &lt;= max (b, c)", whereas "a between b and c" is equivalent to "a &gt;= b and a &lt;= c."  All variants of "between" are inclusive, meaning that a value equal to one of the end-points is acceptable. There is no exclusive "between" variant. Three scalar inputs (which may be rows), Boolean result.</dd>
<dt>
DBOP_match, DBOP_match_unique, DBOP_match_partial, DBOP_match_partial_unique, DBOP_match_full, DBOP_match_full_unique</dt>
<dd>
SQL's match predicate. Two scalar inputs (which may be rows), Boolean output.</dd>
<dt>
DBOP_and, DBOP_or, DBOP_xor, DBOP_equivalent</dt>
<dd>
These Boolean operators representing the logical AND, OR, exclusive OR, and equivalence, take two or more Boolean inputs (except DBOP_equivalent which takes exactly two), and produce a  Boolean result. The weight of this node is stored as a DBVALUEKIND_I4 in the value.lValue field.</dd>
<dt>
DBOP_not</dt>
<dd>
One Boolean input, Boolean result. The weight of this node is stored as a DBVALUEKIND_I4 in the value.lValue field.</dd>
<dt>
DBOP_implies</dt>
<dd>

<p>
This operator represents Boolean implication. It takes two mandatory inputs of type Boolean and produces a Boolean output according to the following table:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=14%>Input1</th>
<th align=left width=14%>Input2</th>
<th align=left width=72%>Result</th>
</tr>
<tr valign=top>
<td width=14%>False</td>
<td width=14%>False</td>
<td width=72%>True</td>
</tr>
<tr valign=top>
<td width=14%>False</td>
<td width=14%>True</td>
<td width=72%>True</td>
</tr>
<tr valign=top>
<td width=14%>True</td>
<td width=14%>False</td>
<td width=72%>False</td>
</tr>
<tr valign=top>
<td width=14%>True</td>
<td width=14%>True</td>
<td width=72%>True</td>
</tr>
</table><br>

</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CICreateCommand</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_cicreatecommand"></a>CICreateCommand</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
CICreateCommand creates an ICommand object for Index Server, and sets the catalog and machine properties on the object. The ICommand object can be used for issuing queries.</p>
<pre><code><b>STDAPI CICreateCommand(
</b>  <b>IUnknown **</b> <i>ppICommand</i><b>,</b>
  <b>IUnknown *</b> <i>pUnkOuter</i><b>,</b>
  <b>REFIID</b> <i>riid</i><b>,</b>
  <b>WCHAR const *</b> <i>pwcsCatalog</i><b>,</b>
  <b>WCHAR const *</b> <i>pwcsMachine</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ppICommand</i></dt>
<dd>
[out] Address of output variable that receives the interface pointer requested in <i>riid</i>.</dd>
<dt>
<i>pUnkOuter</i></dt>
<dd>
[in] Points to an optional outer unknown. Can be 0 for no aggregation, in which case <i>riid</i> can be other than IID_IUnknown.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Specifies the IID of the interface returned in <i>ppICommand</i>. Must be IID_IUnknown unless <i>pUnkOuter</i> is 0. Pass IID_ICommand to get an ICommand interface if aggregation isn't needed and <i>pUnkOuter</i> is 0.</dd>
<dt>
<i>pwcsCatalog</i></dt>
<dd>
[in] Points to a null-terminated string that specifies the name of the catalog used to execute queries. This is the value for the DBPROP_CI_CATALOG_NAME ICommand property.</dd>
<dt>
<i>pwcsMachine</i></dt>
<dd>
[in] Points to a null-terminated string that specifies the name of the machine on which the query is executed. This is the value for the DBPROP_CI_MACHINE_NAME ICommand property. Specify L"." for the local machine.
</dd>
</dl>
<h4>Return Values</h4>
<p>
An HRESULT, S_OK if successful.</p>
<h4>Remarks</h4>
<p>
If interface aggregation isn't required, pass IID_ICommand for <i>riid</i> and 0 for <i>pUnkOuter</i>. Otherwise, call IUnknown::QueryInterface on the returned object to get an ICommand interface.</p>
<p>
CICreateCommand does not return an error if the catalog or machine do not exist or are not available. The connection to the catalog and machine are established when ICommand::Execute() is called, and connection errors are returned at that time.</p>
<p>
Additional catalog, machine, and scope parameters can be specified after an ICommand is created using the ICommandProperties interface.</p>
<p>
Multiple queries can be executed on the ICommand object returned by CICreateCommand, but only one query can exist at a time. Issuing multiple queries on a single ICommand object is much more efficient than creating a new ICommand object for each query.</p>
<p>
CICreateCommand is a shortcut for creating OLE DB ICommand objects. It obviates code to create an OLE DB data source object, a session object, an ICommand creation object, then an ICommand object.</p>
<h4>Example</h4>
<p>
This example creates an ICommand object for the system catalog on the local machine.</p>
<pre><code>ICommand * pICommand;
HRESULT hr = CICreateCommand( (IUnknown **) &amp;pICommand, 0, IID_ICommand, L"system", L"." );
if ( SUCCEEDED( hr ) )
{
    // ...
    // execute one or more queries with the ICommand
    // ...
    pICommand-&gt;Release();
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommandTree::GetCommandTree</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_idxs_icommandtree_getcommandtree"></a>ICommandTree::GetCommandTree</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Echoes the current command as a tree, including all post-processing operations added.</p>
<pre><code><b>HRESULT GetCommandTree(
</b>  <b>DBCOMMANDTREE **</b> <i>ppRoot</i> 
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ppRoot</i></dt>
<dd>
[out] The command object allocates memory for the command tree and returns the address to this memory; the consumer releases this memory with IMalloc::Free, one node at a time, when it no longer needs the command tree. The provider sets <i>ppRoot</i> to a null pointer if an error occurs.
</dd>
</dl>
<h4>Return Value</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The method succeeded.</dd>
<dt>
DB_S_ERRORSINTREE</dt>
<dd>
The provider discovered non-fatal errors in the command text previously set by ICommandText::SetCommandText while building the command tree.</dd>
<dt>
E_FAIL</dt>
<dd>
A provider-specific error occurred.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
<i>ppRoot</i> was a null pointer.</dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
The provider was unable to allocate sufficient memory in which to return the command tree.</dd>
<dt>
DB_E_CANTTRANSLATE</dt>
<dd>
The provider cannot represent the command text previously set by ICommandText::SetCommandText as a tree.
</dd>
</dl>
<h4>Comments</h4>
<p>
The returned tree reflects exactly the command set by the last invocation of ICommandTree::SetCommandTree or ICommandText::SetCommandText, as modified by subsequent calls to IQuery::AddPostProcessing. If the command is stored as a tree, the returned tree is a copy of the one stored in the command object. If a tree node was passed in with text, it is also echoed as text. If the command is stored as text, the provider should return a "navigable" command tree representation of the text, which is not necessarily in optimized form. If the provider cannot create a fuller representation, the command tree can consist of a single text node. For example, if the tree can be represented as a DBOP_SQL_select node, and the provider supports that node, it must be returned in that format. However, if the tree cannot be represented as a DBOP_SQL_select node, but can be represented in a non-trivial command tree (that is, other than the DBOP_text_command), the provider must return it as that non-trivial tree; the provider may only return the tree as the trivial DBOP_text_command node if that is the only command node it supports; otherwise, it must return a valid, non-trivial navigable tree or return DB_E_CANTTRANSLATE if the text cannot be represented in such a tree. The provider should not do any unnecessary validation, such as binding, at this time, but if in the course of parsing it discovers non-fatal errors in building the tree it should put the error information in the tree and return DB_S_ERRORSINTREE.</p>
<p>
This method does not reveal a provider's internal, optimized translation (which may be different from a DBCOMMANDTREE structure) of text to (non-text) tree operations.</p>
<p>
The returned tree includes the markings set by the validation methods invoked so far (ICommandValidate::ValidateSyntax and ICommandValidate::ValidateCompletely).</p>
<p>&nbsp;</p></body>
</HTML>

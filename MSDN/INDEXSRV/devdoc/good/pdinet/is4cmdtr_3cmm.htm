<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Allocation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_memory_allocation"></a>Memory Allocation</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Ownership of command trees may be transferred via several different methods in OLE-DB. A transfer of ownership occurs when a component that allocates a command tree is no longer responsible for freeing the allocated resources. For example, command trees may be obtained by consumers via, ICommand::GetCommandTree. In order for this transfer to be successful, a standard for allocation and deallocation must be identified.</p>
<p>
In general, the standard OLE Task Allocator interface, obtained by calling CoGetMalloc should be used for allocation and release of the memory. DBCOMMANDTREE nodes and the values embedded therein are allocated using IMalloc::Alloc and released via IMalloc::Free, with the following exceptions:
<ul>
<li>
BSTRs: SysAllocString, SysFreeString family of functions</li>
<li>
OLE interfaces: IUnknown::AddRef, IUnknown::Release</li>
<li>
SafeArrays: SafeArrayAlloc, SafeArrayDestroy family of functions</li>
</ul>
<p>
All other pointers embedded in a command tree are assumed to have been dynamically allocated with IMalloc::Alloc and will be released with IMalloc::Free.</p>
<p>
When allocating a tree that will not change ownership, any method of allocation is acceptable except for the three exception cases listed above since those values also have special copy functions.</p>
<p>
Providers should have separate allocations for the fixed (24 bytes) and the variable parts of the node to reduce memory fragmentation and to enable in place substitution of values in the node.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pseudo-Persistent Handler API</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_pseudo_persistent_handler_api"></a>Pseudo-Persistent Handler API</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Three functions are provided with Microsoft Index Server which are sufficient to instantiate the IFilter implementation for use by Microsoft Index Server. These functions are <b>not</b> a full implementation of OLE persistent handlers. The three functions are:</p>
<pre><code>SCODE LoadIFilter( WCHAR const * pwcsPath, IUnknown * pUnkOuter, void ** ppIUnk );
 
SCODE BindIFilterFromStorage( IStorage * pStg, IUnknown * pUnkOuter, void ** ppIUnk );
 
SCODE BindIFilterFromStream( IStream * pStm, IUnknown * pUnkOuter, void ** ppIUnk );
 </code></pre>
<p>
Each takes an object or object name (as a path, IStorage, and IStream respectively) plus an optional controlling unknown and return an interface pointer bound to the IFilter interface. The latter two functions are especially useful when binding to the filter of an embedded object.</p>
<p>
These functions are declared in the file ntquery.h, and exported from ntquery.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CITextToSelectTree</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_citexttoselecttree"></a>CITextToSelectTree</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
CITextToSelectTree creates a DBCOMMANDTREE from an Index Server query language string. The command tree returned by this function can be used as the next sibling under a DBOP_table_name node. A DBOP_project node is also required to form a complete command tree.</p>
<pre><code><b>STDAPI CITextToSelectTree(
</b>  <b>WCHAR const *</b> <i>pwszRestriction</i><b>,</b>
  <b>DBCOMMANDTREE * *</b> <i>ppTree</i><b>,</b>
  <b>ULONG</b> <i>cProperties</i><b>,</b>
  <b>CIPROPERTYDEF *</b> <i>pProperties</i><b>,</b>
  <b>LCID</b> <i>LocaleID</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pwszRestriction</i></dt>
<dd>
[in] Points to a null-terminated string specifying an Index Server query. The syntax for queries is described in the Index Server documentation.</dd>
<dt>
<i>ppTree</i></dt>
<dd>
[out] Address of output variable that receives the command tree built by the function.</dd>
<dt>
<i>cProperties</i></dt>
<dd>
[in] Count of properties in the pProperties array, or 0 if <i>pProperties</i> is 0.</dd>
<dt>
<i>pProperties</i></dt>
<dd>
[in] Address of an array of properties that can be referred to by friendly name in <i>pwszRestriction</i>. Column names in the <i>wcsFriendlyName</i> field of each CIPROPERTYDEF must be specified in uppercase. Index Server's built-in properties do not need to be defined to be used. It is an error to define a property with the same friendly name as a built-in property.</dd>
<dt>
<i>LocaleID</i></dt>
<dd>
[in] The locale ID used for nodes in the tree returned in <i>ppTree</i> that contain an LCID field, including content restrictions and sort order.
</dd>
</dl>
<h4>Return Values</h4>
<p>
An HRESULT, S_OK if successful.</p>
<h4>Remarks</h4>
<p>
Command trees created by CITextToSelectTree contain the select portion of a DBCOMMANDTREE. A tree returned by CITextToSelectTree can be combined with project and sort nodes to form a complete command tree. Use CITextToSelectTree instead of CITextToFullTree if the sort order and project columns tree nodes are already available.</p>
<p>
The query tree allocated by CITextToSelectTree must be freed either with ICommandTree::FreeCommandTree or passed to ICommandTree::SetCommandTree with the fCopy parameter set to FALSE.</p>
<h4>Example</h4>
<p>
This example creates a DBCOMMANDTREE. A custom property from a Microsoft® Word document named "IssueNumber" of type "Number" is defined and used in the query.</p>
<pre><code>DBCOMMANDTREE * pCompleteTree; 
DBCOMMANDTREE * pTableNode;
 
// ...
// Insert code here to make pCompleteTree a complete tree using pTableNode
// as the DBOP_table_name node that has no query restriction (yet).
// User CoTaskMemAlloc to allocate memory for the nodes.
// ...
//
 
CIPROPERTYDEF aProperties[1];
const GUID guidOffice = { 0xd5cdd505, 0x2e9c, 0x101b,
                          0x93, 0x97, 0x08, 0x00, 0x2b, 0x2c, 0xf9, 0xae }
                            };
aProperties[0].wcsFriendlyName = L"ISSUENUMBER";
aProperties[0].dbType = DBTYPE_R8;
aProperties[0].dbCol.uGuid.guid = guidOffice;
aProperties[0].dbCol.eKind = DBKIND_GUID_NAME;
aProperties[0].dbCol.pwszName.ulPropid = L"ISSUENUMBER";
DBCOMMANDTREE * pSelectTree;
HRESULT hr = CiTextToSelectTree( L"microsoft and @issuenumber=2",
                                 &amp;pSelectTree,
                                 1,
                                 aProperties,
                                 GetSystemDefaultLCID() );
if ( SUCCEEDED( hr ) )
{
    pTableNode-&gt;pctNextSibling = pSelectTree;
    hr = pICommand-&gt;SetCommandTree( pCompleteTree,
                                    DBCOMMANDREUSE_NONE,
                                    FALSE );
    if ( SUCCEEDED( hr ) )
    {
        // ...
        // execute a query
        // ...
    }
}
 </code></pre>
<p>
This is the DBCOMMANDTREE <i>pSelectTree</i> created by the example code:</p>
<p>
<img src="images/dbcmdtr1.gif" border=0></p>
<p>
<b>DBCOMMANDTREE <i>pSelectTree</i> Created by Example Code</b></p>
<p>&nbsp;</p></body>
</HTML>

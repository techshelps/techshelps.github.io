<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ifilttst.ini File</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_the_ifilttst.ini_file"></a>The ifilttst.ini File</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
An IFilter object is initialized by calling IFilter::Init(). Init() takes four parameters, grfFlags, cAttributes, aAttributes and pdwFlags. The user of the IFilter Test Suite can specify the values for these parameters in a file called ifilttst.ini. Page 6 shows a sample ifilttst.ini file. </p>
<p>
The file is broken up into sections, with the section name enclosed in square brackets. In the example, the sections are named Test1, Test2, etc.. All section names must be unique. The test reads the values from the first section and initialize the filter with them. Then it runs all of its tests using this filter configuration. It then releases the filter and reinitializes it, using parameters from the next section. It repeats the process until there are no more configurations left to test. </p>
<p>
Each section contains a complete description of the parameters for IFilter::Init(). The parameters are described in separate fields, called entries. The entries are described on the next page.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Entry</th>
<th align=left width=84%>Value of entry</th>
</tr>
<tr valign=top>
<td width=16%>Flags</td>
<td width=84%>the names of the IFILTER_INIT flags that are to be OR'ed together to form the grfFlags parameter. They must be in all caps, and they must all be on the same line.</td>
</tr>
<tr valign=top>
<td width=16%>Cattributes</td>
<td width=84%>A decimal integer representing the value of the cAttributes parameter. </td>
</tr>
<tr valign=top>
<td width=16%>Aattributes</td>
<td width=84%>The name of this entry must start with "aAttributes" and must be different from the other aAttributes entries within the section.  Legal names for the aAttributes entry are: aAttributes, aAttributes1, aAttributes2, etc. The first token must be a GUID. The GUID must be formatted exactly as shown in section [Test3]. The second token may be either a propid (consisting of a number in hexadecimal notation) or a lpwstr (a pointer to a wide character string). A lpwstr can be specified by enclosing the string in double quotes (see section [Test6]). </td>
</tr>
</table><br>
<p>
If the <i>Flags</i> and <i>cAttributes</i> entries are not specified, they default to zero. If you set <i>cAttributes</i> equal to 2, you usually want to specify 2 <i>aAttributes</i>; however, you do not have to. In section [Test5], <i>cAttributes</i> is 1, but no <i>aAttributes</i> have been specified. The test then calls IFilter::Init() with <i>cAttributes</i> equal to 1, and <i>aAttributes</i> equal to NULL. This is a useful test case, since it is likely to cause an access violation in IFilter::Init(). </p>
<p>
There is no entry for the <i>pdwFlags</i> parameter since this parameter is used solely to return a value to the caller; it does not need to have any special value prior to the call to Init().</p>
<p>
If ifilttst.exe cannot find a file named ifilttst.ini in the present working directory, it uses a default configuration to initialize the filter object. Below is the default configuration:</p>
<pre><code>[default]
grfFlags = IFILTER_INIT_APPLY_INDEX_ATTRIBUTES 
cAttributes = 0
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

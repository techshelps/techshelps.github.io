<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFilter Properties and Pseudo-Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_idxs_ifilter_properties_and_pseudo_properties"></a>IFilter Properties and Pseudo-Properties</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Text extracted using the IFilter interface may be tagged with many attributes, but only one attribute at a time. When these attributes refer to textual chunks they are treated as properties by the content index but are not treated as properties by the system. They are known as <i>pseudo-properties</i>.</p>
<p>
Pseudo-properties are not accessible through the standard OLE IPropertyStorage interface. Pseudo-properties allow the user to search for documents based on the value of some internal field in the document that has not been exposed as a property to the system. For example, a spreadsheet describing monthly sales for an employee might export <i>employee-id</i> and <i>total-sales</i> pseudo-properties. This would enable a query for all spreadsheets (months) in which some employee sold more than <i>x</i> dollars.</p>
<p>
Pseudo-property names must follow OLE property naming conventions. Each pseudo-property must be specified as <i>property set\property</i>. Failure to follow this naming convention results in unpredictable query behavior. Specifying a pseudo-property name which matches a true property name may also result in undefined query behavior.</p>
<p>
The IFilter implemention may also publish OLE style properties through IFilter. These properties are retrieved using the IFilter::GetValue method call. Logically, they should be considered external annotations of a document. For example, this mechanism can be used to publish HTML anchors. If a class supports retrieval of OLE properties through IPropertyStorage, the IFilter implementation has the option of requesting the caller of IFilter to use IPropertyStorage to enumerate OLE properties, either in lieu of or to supplement properties emitted via IFilter::GetValue.</p>
<p>&nbsp;</p></body>
</HTML>

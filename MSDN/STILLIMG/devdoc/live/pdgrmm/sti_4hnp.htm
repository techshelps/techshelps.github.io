<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making An Application Still Image-Aware</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_making_an_application_still_image_aware"></a>Making An Application Still Image-Aware</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Existing applications must be revised to make use of the Still Image (STI) push model behavior. </p>
<p>
An application can detect whether or not it was launched by the Control Center. If the <a href="sti_5odq.htm"><b>IStillImage::GetSTILaunchInformation</b></a> function return value indicates success, then the application was launched by the Control Center. An application, TWAIN data source, or other software can decide to reject using the device that caused the push model event. However, it must notify you in some manner as to why the device is not acceptable. This allows you to utilize the STI Control Panel to deselect this particular application for use with this device.</p>
<p>
If the Control Center launched an application, the application may need additional information to locate the device by means of its imaging API. TWAIN and ISIS are the two imaging APIs for which Microsoft defines information. However, any imaging API can use the STI mechanism for obtaining additional information. On installation of the imaging API, an .inf file is used to place information into the registry that provides this supplementary information. A key/value string is used to specify this information, such as:</p>
<pre><code>TWAIN="HP PictureScan 3.0"
ISIS="epson.pxw" 
 </code></pre>
<p>
The application then uses the <a href="sti_2pet.htm"><b>GetDeviceValue</b></a> function to obtain the associated data. </p>
<p>
Once a TWAIN data source has been loaded, it can obtain the device and event by the same <b>IStillImage::GetSTILaunchInformation</b> function since it is in the original address space. With this information, it can open the device and start communication. This provides a seamless transition from push event to application launch and image acquisition. </p>
<p>
Once an application (or a TWAIN data source) has a device open, all events are sent to this application. The Control Center is not aware of device activity until the device is closed.</p>
<p>
When an application is uninstalled, it needs to call <a href="sti_5l7y.htm"><b>UnRegisterLaunchApplication</b></a> to remove the itself from the permanent list of push model-aware applications. You may not add or remove an application from the Control Panel. You may only select or deselect those applications to be associated with particular devices.</p>
<p>
The following code fragment illustrates how an application can be made Still Image-aware.</p>
<pre><code>Example code:
// call STI to find out whether we were launched by STI
HRESULT hres; 
hres = StiCreateInstance(GetModuleHandle(NULL), STI_VERSION,
                         &amp;g_pSti,NULL);
hres = g_pSti-&gt;RegisterLaunchApplication(L"MyApp",szModulePathW);
// Was this a STI launch?
// Call STI-API and get the device name, event and event code
WCHAR   szDeviceName[65];
WCHAR   szEventName[65];
char    ActualDeviceName [256];
DWORD   dwEventCode;
hres = g_pSti-&gt;GetSTILaunchInformation(szDeviceName,
                                       &amp;dwEventCode,
                                       szEventName);
if (SUCCEEDED(hres)) 
{
    DWORD val = 256, type;
    g_pSti-&gt;GetDeviceValue(szDeviceName, STI_DEVICE_VALUE_TWAIN_NAME, &amp;type, 
    (unsigned char*)&amp;ActualDeviceName[0], &amp;val);
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

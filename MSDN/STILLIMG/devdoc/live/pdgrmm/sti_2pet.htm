<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IStillImage::GetDeviceValue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_istillimage_getdevicevalue"></a>IStillImage::GetDeviceValue</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>IStillImage::GetDeviceValue</b> function is used to obtain information from the registry that has been associated with an image acquisition device API such as TWAIN or ISIS.</p>
<pre><code><b>HRESULT GetDeviceValue(
  LPWSTR </b><i>pwszDeviceName</i><b>,</b>
<b>  LPWSTR </b><i>pValueName</i><b>,</b>
<b>  LPDWORD </b><i>pType</i><b>,</b>
<b>  LPBYTE </b><i>pData,</i>
<b>  LPDWORD </b><i>cbDat</i>a
<b>);</b>
</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pwszDeviceName</i></dt>
<dd>
Pointer to the friendly device name of the still-image device that caused the event. The device friendly name is retrieved when <a href="sti_5odq.htm"><b>IStillImage::GetSTILaunchInformation</b></a> is called. See the code fragment in the section entitled <a href="sti_4hnp.htm">Making An Application Still Image-Aware</a>.
<p>
Pointer to a string that represents the name of the value tag. It is the key that will be used with <b>GetDeviceValue </b>to lookup the ancillary data. The defined device values that are defined and reserved by Microsoft :

<dl>
<dt>
STI_DEVICE_VALUE_TWAIN_NAME</dt>
<dd>
The data associated with this registry key is the name of the TWAIN device.</dd>
<dt>
STI_DEVICE_VALUE_ISIS_NAME</dt>
<dd>
The data associated with this registry key is the name of the ISIS device.</dd>
<dt>
STI_DEVICE_VALUE_ICM_PROFILE</dt>
<dd>
The data associated with this registry key is the file name of the ICM device profile for the device.</dd>
<dt>
STI_DEVICE_VALUE_DEFAULT_LAUNCHAPP</dt>
<dd>
The data associated with this registry key is the name of the default launch application for events on the device.</dd>
</dl>
</dd>
<dt>
<i>pValueName</i></dt>
<dd>
Pointer to a string that will be filled with information from the registry that has been associated with an image acquisition device API.</dd>
<dt>
<i>pType</i></dt>
<dd>
Pointer to a variable that receives the key's value type. The value returned through this parameter will be one of the following.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Value</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>REG_BINARY</td>
<td width=53%>Binary data in any form.</td>
</tr>
<tr valign=top>
<td width=47%>REG_DWORD</td>
<td width=53%>A 32-bit number.</td>
</tr>
<tr valign=top>
<td width=47%>REG_DWORD_LITTLE_ENDIAN</td>
<td width=53%>A 32-bit number in little-endian format (same as REG_DWORD). In little-endian format, the most significant byte of a word is the high-order byte. This is the most common format for computers running Windows NT and Windows 95.</td>
</tr>
<tr valign=top>
<td width=47%>REG_DWORD_BIG_ENDIAN</td>
<td width=53%>A 32-bit number in big-endian format. In big-endian format, the most significant byte of a word is the low-order byte.</td>
</tr>
<tr valign=top>
<td width=47%>REG_EXPAND_SZ</td>
<td width=53%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</td>
</tr>
<tr valign=top>
<td width=47%>REG_LINK</td>
<td width=53%>A Unicode symbolic link.</td>
</tr>
<tr valign=top>
<td width=47%>REG_MULTI_SZ</td>
<td width=53%>An array of null-terminated strings, terminated by two null characters.</td>
</tr>
<tr valign=top>
<td width=47%>REG_NONE</td>
<td width=53%>No defined value type.</td>
</tr>
<tr valign=top>
<td width=47%>REG_RESOURCE_LIST</td>
<td width=53%>A device-driver resource list.</td>
</tr>
<tr valign=top>
<td width=47%>REG_SZ</td>
<td width=53%>A null-terminated string. It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</td>
</tr>
</table><br>


<p>
The <i>pType</i> parameter can be NULL if the type is not required. 
</dd>
<dt>
<i>pData</i></dt>
<dd>
Pointer to a buffer that receives the value's data. This parameter can be NULL if the data is not required.</dd>
<dt>
<i>cbData</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pData</i> parameter. When the function returns, this variable contains the size of the data copied to <i>pData</i>. 
</dd>
</dl>
<p>
If the buffer specified by <i>pData</i> parameter is not large enough to hold the data, the function returns the value ERROR_MORE_DATA, and stores the required buffer size, in bytes, into the variable pointed to by <i>cbData</i>. </p>
<p>
If <i>pData</i> is NULL, and <i>cbData</i> is non-NULL, the function returns S_OK, and stores the size of the data, in bytes, in the variable pointed to by <i>cbData</i>. This lets an application determine the best way to allocate a buffer for the value key's data. </p>
<p>
If the data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type, then <i>pData</i> will also include the size of the terminating null character. </p>
<p>
The <i>cbData</i> parameter can be NULL only if <i>pData</i> is NULL. </p>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is S_OK.</p>
<p>
If the function fails because the buffer specified by <i>pData</i> parameter is not large enough to hold the data, the return value is ERROR_MORE_DATA.</p>
<p>
If the function fails for another reason, the return value is the appropriate COM error.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in sti.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in sti.dll.</p>
<h4>See Also</h4>
<p>
<a href="sti_1qg5.htm">Still Image Overview</a>, <a href="sti_4hnp.htm">Making An Application Still Image-Aware</a> </p>
<p>&nbsp;</p></body>
</HTML>

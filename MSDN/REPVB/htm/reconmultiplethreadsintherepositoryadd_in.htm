<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Threads in the Repository Add-in</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="reconmultiplethreadsintherepositoryadd_in"></a>Multiple Threads in the Repository Add-in</h1>
<p>
There are two situations in which the Repository Add-in can start a thread to perform some background processing against the repository. They are:
<ul type=disc>
<li>
During initialization of Visual Basic, the Repository Add-in performs its initialization functions in a background thread.<br><br></li>
<li>
The Repository Add-in uses a background thread to delete data from the repository.</li>
</ul>
<p>
By performing its initialization in a background thread, the Repository Add-in speeds the initialization of Visual Basic. Similarly, by using a background process to delete objects from the repository, the Repository Add-in ensures that lengthy delete propagation operations do not needlessly lengthen the response time of the Visual Basic interactive development environment.</p>
<p>
You should be aware of this background processing for two reasons.
<ul type=disc>
<li>
First, if you call the Repository Add-in during the initialization of your add-in module, you can slow down the initialization of Visual Basic. For example, if you call the Repository Add-in to retrieve the repository instance that it is using, the Repository Add-in waits until it is fully initialized before responding to your GetRepository call. If you make this call as a part of your initialization, and you initialize your add-in module in a foreground thread, the foreground processing — including the overall initialization of Visual Basic — will be delayed. You can avoid this delay by either performing your initialization in a background thread or by postponing your call to GetRepository until the last possible moment.<br><br></li>
<li>
Second, you should be aware that the repository instance can occasionally reflect obsolete objects — objects whose deletion is pending in a transaction of a background thread.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the MDO Model</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="reconextendingthemdomodel"></a>Extending the MDO Model</h1>
<p>
Suppose that you are tracking bugs reported on your Visual Basic projects. The MDO Model already accommodates information about your projects. You want to supplement that information with a description of each bug, the project against which the bug is reported, and the person who discovers each bug. You also want a new Visual Basic application with which you can enter and later examine reported bugs.</p>
<p>
Before you create the Visual Basic project for this new application, you must extend the MDO Model to include a bug class, a person class, a person-reports-bug relationship type, and a project-has-bug relationship type. (To learn how to extend an information model, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="reconInformationModelCreation">
</object><a href=JavaScript:alink_1.Click()>Information Model Creation</a>.)</p>
<p>
When you create the project, add the following references:
<ol>
<li>
To the Microsoft Development Objects type library. You must add this reference because your project will manipulate the contents of the MDO Model directly.<br><br></li>
<li>
To the Microsoft Repository type library. You must add this reference because your project will manipulate the contents of the repository directly.</li>
</ol>
<p>
Before you run your new application, you must ensure that each of your Visual Basic projects is represented in the repository. Thus, you must register the Repository Add-in for Visual Basic as an add-in and open and close each project on which you want to track bugs.</p>
<p>
Your new application can be run independent of the Visual Basic interactive development environment. Thus, do not implement it as a Visual Basic add-in. You need not register for any events triggered by the Repository Add-in for Visual Basic. Therefore, you do not need to add a reference to the Microsoft Repository Add-In type library.</p>
<p>
After it has run, your new application will accept input from users, validate the input against project-related data from the MDO Model, and add bug-related information to your MDO Model extensions.</p>
</BODY>
</HTML>

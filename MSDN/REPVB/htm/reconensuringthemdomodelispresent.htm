<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Ensuring the MDO Model Is Present</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="reconensuringthemdomodelispresent"></a>Ensuring the MDO Model Is Present</h1>
<p>
By default, a repository database does not contain the MDO Model. The MDO Model is not added to the repository until you take the following steps:
<ol>
<li>
Ensure that the Repository 1.0 Add-In Module (the Repository Add-in for Visual Basic) is on the list of active add-in modules.<br><br></li>
<li>
Start Visual Basic.</li>
</ol>
<p>
When you start Visual Basic, the Repository Add-in inspects the repository database, discovers that the MDO Model is not present, and adds it.</p>
<p>
If you have an information model that extends the MDO Model, do not insert these extensions into the repository as part of your information model’s installation or setup procedure. There is no guarantee that the MDO Model will be present in the repository when your setup or installation is run. Instead, when your add-in is started, it should test for the existence of the MDO Model (and your extension to it), and add your extensions only when the MDO Model is present without your extensions.</p>
</BODY>
</HTML>

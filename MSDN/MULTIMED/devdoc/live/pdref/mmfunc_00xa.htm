<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>midiInOpen</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_midiinopen"></a>midiInOpen</h1>
<p>
The <b>midiInOpen</b> function opens a specified MIDI input device.</p>
<pre><code><b>MMRESULT midiInOpen(
  LPHMIDIIN</b><i> lphMidiIn</i><b>,       </b>
<b>  UINT</b><i> uDeviceID</i><b>,            </b>
<b>  DWORD</b><i> dwCallback</i><b>,          </b>
<b>  DWORD</b><i> dwCallbackInstance</i><b>,  </b>
<b>  DWORD</b><i> dwFlags              </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lphMidiIn</i></dt>
<dd>
Address of an <b>HMIDIIN</b> handle. This location is filled with a handle identifying the opened MIDI input device. The handle is used to identify the device in calls to other MIDI input functions.</dd>
<dt>
<i>uDeviceID</i></dt>
<dd>
Identifier of the MIDI input device to be opened.</dd>
<dt>
<i>dwCallback</i></dt>
<dd>
Address of a callback function, a thread identifier, or a handle of a window called with information about incoming MIDI messages. For more information on the callback function, see <a href="mmfunc_5u03.htm"><b>MidiInProc</b></a>.</dd>
<dt>
<i>dwCallbackInstance</i></dt>
<dd>
User instance data passed to the callback function. This parameter is not used with window callback functions or threads.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Callback flag for opening the device and, optionally, a status flag that helps regulate rapid data transfers. It can be the following values:
<dl>
<dt>
CALLBACK_FUNCTION</dt>
<dd>
The <i>dwCallback</i> parameter is a callback procedure address.</dd>
<dt>
CALLBACK_NULL</dt>
<dd>
There is no callback mechanism. This value is the default setting.</dd>
<dt>
CALLBACK_THREAD</dt>
<dd>
The <i>dwCallback</i> parameter is a thread identifier.</dd>
<dt>
CALLBACK_WINDOW</dt>
<dd>
The <i>dwCallback</i> parameter is a window handle.</dd>
<dt>
MIDI_IO_STATUS</dt>
<dd>
When this parameter also specifies CALLBACK_FUNCTION, <a href="mmmsg_0jmp.htm">MIM_MOREDATA</a> messages are sent to the callback function as well as <a href="mmmsg_83xd.htm">MIM_DATA</a> messages. Or, if this parameter also specifies CALLBACK_WINDOW, <a href="mmmsg_51b5.htm">MM_MIM_MOREDATA</a> messages are sent to the window as well as <a href="mmmsg_3yht.htm">MM_MIM_DATA</a> messages. This flag does not affect event or thread callbacks.</dd>
</dl>

<p>
Most applications that use a callback mechanism will specify CALLBACK_FUNCTION for this parameter. 

</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following: </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=45%>Value</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=45%>MMSYSERR_ALLOCATED</td>
<td colspan=2 width=55%>The specified resource is already allocated.</td>
</tr>
<tr valign=top>
<td width=45%>MMSYSERR_BADDEVICEID</td>
<td colspan=2 width=55%>The specified device identifier is out of range.</td>
</tr>
<tr valign=top>
<td width=45%>MMSYSERR_INVALFLAG</td>
<td colspan=2 width=55%>The flags specified by <i>dwFlags</i> are invalid.</td>
</tr>
<tr valign=top>
<td width=45%>MMSYSERR_INVALPARAM</td>
<td colspan=2 width=55%>The specified pointer or structure is invalid.</td>
</tr>
<tr valign=top>
<td width=45%>MMSYSERR_NOMEM</td>
<td colspan=2 width=55%>The system is unable to allocate or lock memory.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
To determine the number of MIDI input devices present in the system, use the <b>midiInGetNumDevs</b> function. The device identifier specified by <i>wDeviceID</i> varies from zero to one less than the number of devices present. </p>
<p>
If a window or thread is chosen to receive callback information, the following messages are sent to the window procedure or thread to indicate the progress of MIDI input: MM_MIM_OPEN, MM_MIM_CLOSE, MM_MIM_DATA, MM_MIM_LONGDATA, MM_MIM_ERROR, MM_MIM_LONGERROR, and MM_MIM_MOREDATA.</p>
<p>
If a function is chosen to receive callback information, the following messages are sent to the function to indicate the progress of MIDI input: MIM_OPEN, MIM_CLOSE, MIM_DATA, MIM_LONGDATA, MIM_ERROR, MIM_LONGERROR, and MIM_MOREDATA. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in mmsystem.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use winmm.lib.</p>
<h4>See Also</h4>
<p>
<a href="../pdgrmm/midi_1wv3.htm">Musical Instrument Digital Interface (MIDI) Overview</a>, <a href="../pdgrmm/midi_3fqr.htm">MIDI Functions</a>, <a href="mmmsg_0jmp.htm">MIM_MOREDATA</a>, <a href="mmmsg_83xd.htm">MIM_DATA</a>, <a href="mmmsg_51b5.htm">MM_MIM_MOREDATA</a>, <a href="mmmsg_3yht.htm">MM_MIM_DATA</a>, <a href="mmfunc_4cmr.htm"><b>midiInGetNumDevs</b></a>, <a href="mmfunc_5u03.htm"><b>MidiInProc</b></a>, <a href="mmmsg_725q.htm">MM_MIM_OPEN</a>, <a href="mmmsg_54f9.htm">MM_MIM_CLOSE</a>, <a href="mmmsg_7zdt.htm">MM_MIM_LONGDATA</a>, <a href="mmmsg_8a42.htm">MM_MIM_ERROR</a>, <a href="mmmsg_5v02.htm">MM_MIM_LONGERROR</a>, <a href="mmmsg_17la.htm">MIM_OPEN</a>, <a href="mmmsg_0s2t.htm">MIM_CLOSE</a>, <a href="mmmsg_83xd.htm">MIM_DATA</a>, <a href="mmmsg_3hpd.htm">MIM_LONGDATA</a>, <a href="mmmsg_3xrm.htm">MIM_ERROR</a>, <a href="mmmsg_8fjm.htm">MIM_LONGERROR</a>, <a href="mmmsg_0jmp.htm">MIM_MOREDATA</a></p>
<p>&nbsp;</p></body>
</HTML>

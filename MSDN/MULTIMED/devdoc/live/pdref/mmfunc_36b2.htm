<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>waveOutOpen</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_waveoutopen"></a>waveOutOpen</h1>
<p>
The <b>waveOutOpen</b> function opens the given waveform-audio output device for playback.</p>
<pre><code><b>MMRESULT waveOutOpen(
  LPHWAVEOUT</b><i> phwo</i><b>,           </b>
<b>  UINT</b><i> uDeviceID</i><b>,            </b>
<b>  LPWAVEFORMATEX</b><i> pwfx</i><b>,       </b>
<b>  DWORD</b><i> dwCallback</i><b>,          </b>
<b>  DWORD</b><i> dwCallbackInstance</i><b>,  </b>
<b>  DWORD</b><i> fdwOpen              </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>phwo</i></dt>
<dd>
Address filled with a handle identifying the open waveform-audio output device. Use the handle to identify the device when calling other waveform-audio output functions. This parameter might be NULL if the WAVE_FORMAT_QUERY flag is specified for <i>fdwOpen</i>.</dd>
<dt>
<i>uDeviceID</i></dt>
<dd>
Identifier of the waveform-audio output device to open. It can be either a device identifier or a handle of an open waveform-audio input device.You can use the following flag instead of a device identifier:
<dl>
<dt>
WAVE_MAPPER</dt>
<dd>
The function selects a waveform-audio output device capable of playing the given format.</dd>
</dl>
</dd>
<dt>
<i>pwfx</i></dt>
<dd>
Address of a <a href="mmstr_625u.htm"><b>WAVEFORMATEX</b></a> structure that identifies the format of the waveform-audio data to be sent to the device. You can free this structure immediately after passing it to <b>waveOutOpen</b>.</dd>
<dt>
<i>dwCallback</i></dt>
<dd>
Address of a fixed callback function, an event handle, a handle to a window, or the identifier of a thread to be called during waveform-audio playback to process messages related to the progress of the playback. If no callback function is required, this value can be zero. For more information on the callback function, see <a href="mmfunc_8zdv.htm"><b>waveOutProc</b></a>.</dd>
<dt>
<i>dwCallbackInstance</i></dt>
<dd>
User-instance data passed to the callback mechanism. This parameter is not used with the window callback mechanism.</dd>
<dt>
<i>fdwOpen</i></dt>
<dd>
Flags for opening the device. The following values are defined:
<dl>
<dt>
CALLBACK_EVENT</dt>
<dd>
The <i>dwCallback</i> parameter is an event handle.</dd>
<dt>
CALLBACK_FUNCTION</dt>
<dd>
The <i>dwCallback</i> parameter is a callback procedure address.</dd>
<dt>
CALLBACK_NULL</dt>
<dd>
No callback mechanism. This is the default setting.</dd>
<dt>
CALLBACK_THREAD</dt>
<dd>
The <i>dwCallback</i> parameter is a thread identifier.</dd>
<dt>
CALLBACK_WINDOW</dt>
<dd>
The <i>dwCallback</i> parameter is a window handle.</dd>
<dt>
WAVE_ALLOWSYNC</dt>
<dd>
If this flag is specified, a synchronous waveform-audio device can be opened. If this flag is not specified while opening a synchronous driver, the device will fail to open.</dd>
<dt>
WAVE_FORMAT_DIRECT</dt>
<dd>
If this flag is specified, the ACM driver does not perform conversions on the audio data. </dd>
<dt>
WAVE_FORMAT_QUERY</dt>
<dd>
If this flag is specified, <b>waveOutOpen</b> queries the device to determine if it supports the given format, but the device is not actually opened.</dd>
<dt>
WAVE_MAPPED</dt>
<dd>
If this flag is specified, the <i>uDeviceID</i> parameter specifies a waveform-audio device to be mapped to by the wave mapper.
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=51%>Description</th>
</tr>
<tr valign=top>
<td width=48%>MMSYSERR_ALLOCATED</td>
<td colspan=2 width=52%>Specified resource is already allocated.</td>
</tr>
<tr valign=top>
<td width=48%>MMSYSERR_BADDEVICEID</td>
<td colspan=2 width=52%>Specified device identifier is out of range.</td>
</tr>
<tr valign=top>
<td width=48%>MMSYSERR_NODRIVER</td>
<td colspan=2 width=52%>No device driver is present.</td>
</tr>
<tr valign=top>
<td width=48%>MMSYSERR_NOMEM</td>
<td colspan=2 width=52%>Unable to allocate or lock memory.</td>
</tr>
<tr valign=top>
<td width=48%>WAVERR_BADFORMAT</td>
<td colspan=2 width=52%>Attempted to open with an unsupported waveform-audio format.</td>
</tr>
<tr valign=top>
<td width=48%>WAVERR_SYNC</td>
<td colspan=2 width=52%>The device is synchronous but <b>waveOutOpen</b> was called without using the WAVE_ALLOWSYNC flag.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Use the <a href="mmfunc_2ooj.htm"><b>waveOutGetNumDevs</b></a> function to determine the number of waveform-audio output devices present in the system. If the value specified by the <i>uDeviceID</i> parameter is a device identifier, it can vary from zero to one less than the number of devices present. The WAVE_MAPPER constant can also be used as a device identifier.</p>
<p>
The structure pointed to by <i>pwfx</i> can be extended to include type-specific information for certain data formats. For example, for PCM data, an extra <b>UINT</b> is added to specify the number of bits per sample. Use the <a href="mmstr_7gtu.htm"><b>PCMWAVEFORMAT</b></a> structure in this case. For all other waveform-audio formats, use the <b>WAVEFORMATEX</b> structure to specify the length of the additional data.</p>
<p>
If you choose to have a window or thread receive callback information, the following messages are sent to the window procedure function to indicate the progress of waveform-audio output: MM_WOM_OPEN, MM_WOM_CLOSE, and MM_WOM_DONE.</p>
<p>
If you choose to have a function receive callback information, the following messages are sent to the function to indicate the progress of waveform-audio output: WOM_OPEN, WOM_CLOSE, and WOM_DONE. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in mmsystem.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use winmm.lib.</p>
<h4>See Also</h4>
<p>
<a href="../pdgrmm/wave_7jcf.htm">Waveform Audio Overview</a>, <a href="../pdgrmm/wave_4i2b.htm">Waveform Functions</a>, <a href="mmstr_625u.htm"><b>WAVEFORMATEX</b></a>, <a href="mmfunc_2ooj.htm"><b>waveOutGetNumDevs</b></a>, <a href="mmfunc_8zdv.htm"><b>waveOutProc</b></a>, <a href="mmstr_7gtu.htm"><b>PCMWAVEFORMAT</b></a>, <a href="mmmsg_06y6.htm">MM_WOM_OPEN</a>, <a href="mmmsg_5mzp.htm">MM_WOM_CLOSE</a>, <a href="mmmsg_8b8l.htm">MM_WOM_DONE</a></p>
<p>&nbsp;</p></body>
</HTML>

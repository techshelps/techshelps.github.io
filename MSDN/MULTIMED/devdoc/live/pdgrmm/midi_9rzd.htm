<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About MIDI</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_about_midi"></a>About MIDI</h1>
<p>
The Microsoft Win32 application programming interface (API) provides the following methods for applications to work with MIDI data: 
<ul>
<li>
The Media Control Interface (MCI). Although the simplest way to play a MIDI file is to use the MCIWnd window class, you can also use MCI commands to create a customized interface to a MIDI device. For more information about the MCIWnd window class, see <a href="mciwnd_5uer.htm">MCIWnd Window Class</a>. For more information about MCI, see <a href="mci_7vvt.htm">MCI</a>, or <a href="midi_5927.htm">Media Control Interface (MCI)</a>.</li>
<li>
<a href="midi_3g1f.htm">Stream buffers</a>. This format allows an application to manipulate buffers of time-stamped MIDI data for playback. Stream buffers are useful to applications that require more precise control over output than MCI offers.</li>
<li>
<a href="midi_5rqr.htm">MIDI services</a>. Applications that need the most precise control of MIDI data typically use these low-level services.</li>
</ul>
<p>
This overview discusses each of these methods and provides an overview of the <a href="midi_6q7m.htm">the MIDI Mapper</a>. </p>
<p>&nbsp;</p></body>
</HTML>

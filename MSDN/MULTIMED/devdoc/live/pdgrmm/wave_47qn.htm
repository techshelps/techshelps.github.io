<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recording Waveform Audio</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_recording_waveform_audio"></a>Recording Waveform Audio</h3>
<p>
If the MCI waveform-audio recording services do not meet the specifications of your application, you can handle waveform-audio recording using the waveform-audio services. For more information, see <a href="mci_7vvt.htm">MCI</a>.</p>
<h4>Waveform-Audio Input Data Types</h4>
<p>
The following data types are defined for waveform-audio input functions:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Type</th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%><b>HWAVEIN</b></td>
<td width=71%>Handle of an open waveform-audio input device.</td>
</tr>
<tr valign=top>
<td width=29%><a href="../pdref/mmstr_625u.htm"><b>WAVEFORMATEX</b></a></td>
<td width=71%>Structure that specifies the data formats supported by a particular waveform-audio input device. This structure is also used for waveform-audio output devices.</td>
</tr>
<tr valign=top>
<td width=29%><a href="../pdref/mmstr_7zsi.htm"><b>WAVEHDR</b></a></td>
<td width=71%>Structure used as a header for a block of waveform-audio input data. This structure is also used for waveform-audio output devices.</td>
</tr>
<tr valign=top>
<td width=29%><a href="../pdref/mmstr_1ble.htm"><b>WAVEINCAPS</b></a></td>
<td width=71%>Structure used to inquire about the capabilities of a particular waveform-audio input device.</td>
</tr>
</table><br>
<h4>Querying Waveform-Audio Input Devices</h4>
<p>
Before recording waveform audio, you should call the <a href="../pdref/mmfunc_31tf.htm"><b>waveInGetDevCaps</b></a> function to determine the waveform-audio input capabilities of the system. This function fills a <a href="../pdref/mmstr_1ble.htm"><b>WAVEINCAPS</b></a> structure with information about the capabilities of a specified device. This information includes the manufacturer and product identifiers, a product name for the device, and the version number of the device driver. In addition, the <b>WAVEINCAPS</b> structure provides information about the standard waveform-audio formats that the device supports. </p>
<h4>Opening Waveform-Audio Input Devices</h4>
<p>
Use the <a href="../pdref/mmfunc_1q5q.htm"><b>waveInOpen</b></a> function to open a waveform-audio input device for recording. This function opens the device associated with the specified device identifier and returns a handle of the open device by writing the handle of a specified memory location.</p>
<p>
Some multimedia computers have multiple waveform-audio input devices. Unless you know you want to open a specific waveform-audio input device in a system, you should use the WAVE_MAPPER constant for the device identifier when you open a device. The <b>waveInOpen</b> function will choose the device in the system best able to record in the specified data format.</p>
<h4>Managing Waveform-Audio Recording</h4>
<p>
After you open a waveform-audio input device, you can begin recording waveform-audio data. Waveform-audio data is recorded into application-supplied buffers specified by a <a href="../pdref/mmstr_7zsi.htm"><b>WAVEHDR</b></a> structure. These data blocks must be prepared before they are used; for more information, see <a href="wave_7msz.htm">Audio Data Blocks</a>.</p>
<p>
Windows provides the following functions to manage waveform-audio recording.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=26%>Function</th>
<th align=left width=74%>Description</th>
</tr>
<tr valign=top>
<td width=26%><a href="../pdref/mmfunc_7aya.htm"><b>waveInAddBuffer</b></a></td>
<td width=74%>Sends a buffer to the device driver so it can be filled with recorded waveform-audio data.</td>
</tr>
<tr valign=top>
<td width=26%><a href="../pdref/mmfunc_8p84.htm"><b>waveInReset</b></a></td>
<td width=74%>Stops waveform-audio recording and marks all pending buffers as done.</td>
</tr>
<tr valign=top>
<td width=26%><a href="../pdref/mmfunc_10fo.htm"><b>waveInStart</b></a></td>
<td width=74%>Starts waveform-audio recording.</td>
</tr>
<tr valign=top>
<td width=26%><a href="../pdref/mmfunc_4kds.htm"><b>waveInStop</b></a></td>
<td width=74%>Stops waveform-audio recording.</td>
</tr>
</table><br>
<p>
Use the <a href="../pdref/mmfunc_7aya.htm"><b>waveInAddBuffer</b></a> function to send buffers to the device driver. As the buffers are filled with recorded waveform-audio data, the application is notified with a window message, callback message, thread message, or event, depending on the flag specified when the device was opened.</p>
<p>
Before you begin recording by using <a href="../pdref/mmfunc_10fo.htm"><b>waveInStart</b></a>, you should send at least one buffer to the driver, or incoming data could be lost. </p>
<p>
Before closing the device using <a href="../pdref/mmfunc_3sf9.htm"><b>waveInClose</b></a>, call <a href="../pdref/mmfunc_8p84.htm"><b>waveInReset</b></a> to mark any pending data blocks as being done.</p>
<h4>Using Window Messages to Manage Waveform-Audio Recording</h4>
<p>
The following messages can be sent to a window procedure function for managing waveform-audio recording.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Message</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%><a href="../pdref/mmmsg_4ip1.htm">MM_WIM_CLOSE</a></td>
<td width=67%>Sent when the device is closed by using the <a href="../pdref/mmfunc_3sf9.htm"><b>waveInClose</b></a> function.</td>
</tr>
<tr valign=top>
<td width=33%><a href="../pdref/mmmsg_5tnl.htm">MM_WIM_DATA</a></td>
<td width=67%>Sent when the device driver is finished with a buffer sent by using the <a href="../pdref/mmfunc_7aya.htm"><b>waveInAddBuffer</b></a><b> </b>function.</td>
</tr>
<tr valign=top>
<td width=33%><a href="../pdref/mmmsg_8xbi.htm">MM_WIM_OPEN</a></td>
<td width=67%>Sent when the device is opened by using the <a href="../pdref/mmfunc_1q5q.htm"><b>waveInOpen</b></a> function.</td>
</tr>
</table><br>
<p>
The <i>lParam</i> parameter of <a href="../pdref/mmmsg_5tnl.htm">MM_WIM_DATA</a> specifies a pointer to a <a href="../pdref/mmstr_7zsi.htm"><b>WAVEHDR</b></a> structure that identifies the buffer. This buffer might not be completely filled with waveform-audio data; recording can stop before the buffer is filled. Use the <b>dwBytesRecorded</b> member of the <b>WAVEHDR</b> structure to determine the amount of valid data present in the buffer.</p>
<p>
The most useful message is probably MM_WIM_DATA. When your application finishes using the data block sent by the device driver, you can clean up and free the data block. Unless you need to allocate memory or initialize variables, you probably do not need to use the <a href="../pdref/mmmsg_8xbi.htm">MM_WIM_OPEN</a> and <a href="../pdref/mmmsg_4ip1.htm">MM_WIM_CLOSE</a> messages. </p>
<p>
The callback function for waveform-audio input devices is supplied by the application. For information about this callback function, see the <a href="../pdref/mmfunc_7j8j.htm"><b>waveInProc</b></a> function. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading from One Stream and Writing to Another</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_reading_from_one_stream_and_writing_to_another"></a>Reading from One Stream and Writing to Another</h2>
<p>
The following example reads data from a stream, compresses it into a new stream, and writes the compressed data into a stream of a new file.</p>
<pre><code>// SaveSmall - copies a stream of data from one file, compresses 
// the stream, and writes the compressed stream to a new file. 
// 
// ps stream interface pointer 
// lpFilename - new AVI file to build 
// 
 
void SaveSmall(PAVISTREAM ps, LPSTR lpFilename) 
{ 
    PAVIFILE         pf; 
    PAVISTREAM       psSmall; 
    HRESULT          hr; 
    AVISTREAMINFO    strhdr; 
    BITMAPINFOHEADER bi; 
    BITMAPINFOHEADER biNew; 
    LONG             lStreamSize; 
    LPVOID           lpOld; 
    LPVOID           lpNew; 
 
    // Determine the size of the format data using 
    // <a href="../pdref/mmmacro_6grp.htm"><b>AVIStreamFormatSize</b></a>. 
    AVIStreamFormatSize(ps, 0, &amp;lStreamSize); 
    if (lStreamSize &gt; sizeof(bi)) // Format too large? 
        return; 
 
    lStreamSize = sizeof(bi); 
    hr = AVIStreamReadFormat(ps, 0, &amp;bi, &amp;lStreamSize); // Read format 
    if (bi.biCompression != BI_RGB) // Wrong compression format? 
        return; 
 
    hr = AVIStreamInfo(ps, &amp;strhdr, sizeof(strhdr)); 
 
    // Create new AVI file using <a href="../pdref/mmfunc_8l2m.htm"><b>AVIFileOpen</b></a>. 
    hr = AVIFileOpen(&amp;pf, lpFilename, OF_WRITE | OF_CREATE, NULL); 
    if (hr != 0) 
        return; 
 
    // Set parameters for the new stream. 
    biNew = bi; 
    biNew.biWidth /= 2; 
    biNew.biHeight /= 2; 
    biNew.biSizeImage = ((((UINT)biNew.biBitCount * biNew.biWidth 
                        + 31)&amp;~31) / 8) * biNew.biHeight; 
    SetRect(&amp;strhdr.rcFrame, 0, 0, (int) biNew.biWidth, 
            (int) biNew.biHeight); 
 
    // Create a stream using <a href="../pdref/mmfunc_3xkd.htm"><b>AVIFileCreateStream</b></a>. 
    hr = AVIFileCreateStream(pf, &amp;psSmall, &amp;strhdr); 
    if (hr != 0) {            //Stream created OK? If not, close file. 
        AVIFileRelease(pf); 
        return; 
    } 
 
    // Set format of new stream using <a href="../pdref/mmfunc_66k4.htm"><b>AVIStreamSetFormat</b></a>. 
    hr = AVIStreamSetFormat(psSmall, 0, &amp;biNew, sizeof(biNew)); 
    if (hr != 0) { 
        AVIStreamRelease(psSmall); 
        AVIFileRelease(pf); 
        return; 
    } 
 
    // Allocate memory for the bitmaps. 
    lpOld = GlobalAllocPtr(GMEM_MOVEABLE, bi.biSizeImage); 
    lpNew = GlobalAllocPtr(GMEM_MOVEABLE, biNew.biSizeImage); 
 
    // Read the stream data using <a href="../pdref/mmfunc_98kk.htm"><b>AVIStreamRead</b></a>. 
    for (lStreamSize = AVIStreamStart(ps); lStreamSize &lt;
        AVIStreamEnd(ps); lStreamSize++) { 
        hr = AVIStreamRead(ps, lStreamSize, 1, lpOld, bi.biSizeImage,
            NULL, NULL); 
        // 
        // Place error check here. 
        // 
 
        // Compress the data. 
        CompressDIB(&amp;bi, lpOld, &amp;biNew, lpNew); 
 
        // Save the compressed data using <a href="../pdref/mmfunc_2z51.htm"><b>AVIStreamWrite</b></a>. 
        hr = AVIStreamWrite(psSmall, lStreamSize, 1, lpNew,
            biNew.biSizeImage, AVIIF_KEYFRAME, NULL, NULL); 
    } 
 
     // Close the stream and file. 
    AVIStreamRelease(psSmall); 
    AVIFileRelease(pf); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

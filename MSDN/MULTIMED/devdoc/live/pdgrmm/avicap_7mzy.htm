<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Callback Functions to an Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_adding_callback_functions_to_an_application"></a>Adding Callback Functions to an Application</h2>
<p>
An application can register callback functions with the capture window so that it notifies the application in the following circumstances: 
<ul>
<li>
The status changes </li>
<li>
Errors occur </li>
<li>
Video frame and audio buffers become available </li>
<li>
The application should yield during streaming capture </li>
</ul>
<p>
The following example creates a capture window and registers status, error, video stream, and frame callback functions in the message-processing loop of an application. It also includes a sample statement for disabling a callback function. Subsequent examples show simple status, error, and frame callback functions.</p>
<pre><code>case WM_CREATE: 
{ 
    char    achDeviceName[80] ; 
    char    achDeviceVersion[100] ; 
    char    achBuffer[100] ; 
    WORD    wDriverCount = 0 ; 
    WORD    wIndex ; 
    WORD    wError ; 
    HMENU   hMenu ; 
 
    // Create a capture window using the <a href="../pdref/mmfunc_8mrb.htm"><b>capCreateCaptureWindow</b></a> macro.
    ghWndCap = capCreateCaptureWindow((LPSTR)"Capture Window", 
        WS_CHILD | WS_VISIBLE, 0, 0, 160, 120, (HWND) hWnd, (int) 0); 
 
    // Register the error callback function using the 
    // <a href="../pdref/mmmacro_2jsi.htm"><b>capSetCallbackOnError</b></a> macro. 
    capSetCallbackOnError(ghWndCap, fpErrorCallback); 
 
    // Register the status callback function using the 
    // <a href="../pdref/mmmacro_3hrn.htm"><b>capSetCallbackOnStatus</b></a> macro. 
    capSetCallbackOnStatus(ghWndCap, fpStatusCallback); 
 
    // Register the video-stream callback function using the
    // <a href="../pdref/mmmacro_8vql.htm"><b>capSetCallbackOnVideoStream</b></a> macro. 
    capSetCallbackOnVideoStream(ghWndCap, fpVideoCallback); 
 
    // Register the frame callback function using the
    // <a href="../pdref/mmmacro_0nc5.htm"><b>capSetCallbackOnFrame</b></a> macro. 
    capSetCallbackOnFrame(ghWndCap, fpFrameCallback); 
 
    // Connect to a capture driver 

    break; 
} 
case WM_CLOSE: 
{ 
// Use the <a href="../pdref/mmmacro_0nc5.htm"><b>capSetCallbackOnFrame</b></a> macro to 
// disable the frame callback. Similar calls exist for the other 
// callback functions.

    capSetCallbackOnFrame(hWndC, NULL); 

    break; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Playing Waveform-Audio Files</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_playing_waveform_audio_files"></a>Playing Waveform-Audio Files</h3>
<p>
It's easy to play sounds in your application by using the functions, macros, and messages discussed in this overview. The techniques and elements documented here operate only on waveform audio; that is, digitized representations of a sound's physical shape. If you want to add music to your application, and you do not care about other kinds of sounds, you might want to use MIDI. For a discussion of a simple playback MIDI implementation, see the <a href="mciwnd_5uer.htm">MCIWnd Window Class</a>. For a discussion of the MIDI interface, see <a href="midi_1wv3.htm">Musical Instrument Digital Interface (MIDI)</a>.</p>
<p>
You can use the following functions to play waveform audio in your application in a single function call:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Function</th>
<th align=left width=76%>Description</th>
</tr>
<tr valign=top>
<td width=24%><object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_messagebeep">
</object><a href=JavaScript:alink_1.Click()><b>MessageBeep</b></a></td>
<td width=76%>Plays the sound that corresponds to a specified system-alert level. </td>
</tr>
<tr valign=top>
<td width=24%><a href="../pdref/mmfunc_4uzo.htm"><b>sndPlaySound</b></a></td>
<td width=76%>Plays the sound that corresponds to the system sound entered in the registry or the contents of the specified filename. </td>
</tr>
<tr valign=top>
<td width=24%><a href="../pdref/mmfunc_9uxw.htm"><b>PlaySound</b></a></td>
<td width=76%>Provides all the functionality of <a href="../pdref/mmfunc_4uzo.htm"><b>sndPlaySound</b></a> and can directly access resources.</td>
</tr>
</table><br>
<p>
The <b>MessageBeep</b> function is a standard part of the Win32 API; because its capabilities are very limited and it is documented elsewhere, it is not discussed here.</p>
<p>
The functions listed provide the following methods of playing waveform audio:
<ul>
<li>
Playing waveform-audio files associated with system-alert levels</li>
<li>
Playing waveform-audio files specified by entries in the registry</li>
<li>
Playing in-memory WAVE resources</li>
<li>
Playing waveform-audio files stored on a hard disk or compact disc – read-only memory (CD-ROM)</li>
</ul>
<p>
The <a href="../pdref/mmfunc_4uzo.htm"><b>sndPlaySound</b></a> and <a href="../pdref/mmfunc_9uxw.htm"><b>PlaySound</b></a> functions load an entire waveform-audio file into memory and, in effect, limit the size of file they can play. Use <b>sndPlaySound</b> and <b>PlaySound</b> to play waveform-audio files that are relatively small — up to about 100K. These two functions also require the sound data to be in a format that is playable by one of the installed waveform-audio drivers, including the wave mapper. </p>
<p>
For larger sound files, use the Media Control Interface (MCI) services. For more information, see <a href="mci_7vvt.htm">MCI</a>.</p>
<h4>Using Window Messages to Manage Waveform-Audio Playback</h4>
<p>
The following messages can be sent to a window procedure function for managing waveform-audio playback.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=30%>Message</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td width=30%><a href="../pdref/mmmsg_5mzp.htm">MM_WOM_CLOSE</a></td>
<td width=70%>Sent when the device is closed by using the <a href="../pdref/mmfunc_6hwl.htm"><b>waveOutClose</b></a> function.</td>
</tr>
<tr valign=top>
<td width=30%><a href="../pdref/mmmsg_8b8l.htm">MM_WOM_DONE</a></td>
<td width=70%>Sent when the device driver is finished with a data block sent by using the <a href="../pdref/mmfunc_1k9x.htm"><b>waveOutWrite</b></a> function.</td>
</tr>
<tr valign=top>
<td width=30%><a href="../pdref/mmmsg_06y6.htm">MM_WOM_OPEN</a></td>
<td width=70%>Sent when the device is opened by using the <a href="../pdref/mmfunc_36b2.htm"><b>waveOutOpen</b></a> function.</td>
</tr>
</table><br>
<p>
A <i>wParam</i> and <i>lParam</i> parameter is associated with each of these messages. The <i>wParam</i> parameter always specifies a handle of the open waveform-audio device. For the <a href="../pdref/mmmsg_8b8l.htm">MM_WOM_DONE</a> message, <i>lParam</i> specifies a pointer to a <a href="../pdref/mmstr_7zsi.htm"><b>WAVEHDR</b></a> structure that identifies the completed data block. The <i>lParam</i> parameter is unused for the <a href="../pdref/mmmsg_5mzp.htm">MM_WOM_CLOSE</a> and <a href="../pdref/mmmsg_06y6.htm">MM_WOM_OPEN</a> messages.</p>
<p>
The most useful message is probably MM_WOM_DONE. When this message signals that playback of a data block is complete, you can clean up and free the data block. Unless you need to allocate memory or initialize variables, you probably do not need to process the MM_WOM_OPEN and MM_WOM_CLOSE messages.</p>
<p>
The callback function for waveform-audio output devices is supplied by the application. For information about this callback function, see the <a href="../pdref/mmfunc_8zdv.htm"><b>waveOutProc</b></a> function. </p>
<h4>Retrieving the Current Playback Position</h4>
<p>
You can monitor the current playback position within the file while waveform audio is playing by using the <a href="../pdref/mmfunc_665r.htm"><b>waveOutGetPosition</b></a> function.</p>
<p>
For waveform-audio devices, samples are the preferred time format in which to represent the current position. Thus, the current position of a waveform-audio device is specified as the number of samples for one channel from the beginning of the waveform-audio file. To query the current position of a waveform-audio device, set the <b>wType</b> member of the <a href="../pdref/mmstr_0v3n.htm"><b>MMTIME</b></a> structure to TIME_SAMPLES and pass this structure to <b>waveOutGetPosition</b>.</p>
<p>
The <b>MMTIME</b> structure can represent time in one or more different formats, including milliseconds, samples, SMPTE (Society of Motion Picture and Television Engineers), and MIDI song pointer formats. The <b>wType</b> member specifies the format used to represent time. Before calling a function that uses the <b>MMTIME</b> structure, you must set <b>wType</b> to indicate your requested time format. Be sure to check <b>wType</b> after the call to see whether the requested time format is supported. If the requested time format is not supported, the device driver specifies the time in an alternate time format and changes the <b>wType</b> member to the selected time format. </p>
<p>
For more information about the <b>MMTIME</b> structure, see <a href="mmtime_4msz.htm">Multimedia Timers</a>.</p>
<h4>Stopping, Pausing, and Restarting Playback</h4>
<p>
You can stop or pause playback while waveform audio is playing. After playback has been paused, you can restart it. Windows provides the following functions for controlling waveform-audio playback. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%>Function</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%><a href="../pdref/mmfunc_9xut.htm"><b>waveOutPause</b></a></td>
<td width=72%>Pauses playback on a waveform-audio output device.</td>
</tr>
<tr valign=top>
<td width=28%><a href="../pdref/mmfunc_1epg.htm"><b>waveOutReset</b></a></td>
<td width=72%>Stops playback on a waveform-audio output device and marks all pending data blocks as done.</td>
</tr>
<tr valign=top>
<td width=28%><a href="../pdref/mmfunc_22r8.htm"><b>WaveOutRestart</b></a></td>
<td width=72%>Resumes playback on a paused waveform-audio output device.</td>
</tr>
</table><br>
<p>
Pausing a waveform-audio device by using <a href="../pdref/mmfunc_9xut.htm"><b>waveOutPause</b></a> might not be instantaneous; the driver may finish playing the current block before pausing playback.</p>
<p>
Generally, as soon as the first waveform-audio data block is sent by using the <a href="../pdref/mmfunc_1k9x.htm"><b>waveOutWrite</b></a> function, the waveform-audio device begins playing. If you do not want the sound to start playing immediately, call <b>waveOutPause</b> before calling <b>waveOutWrite</b>. Then, when you want to begin playing waveform-audio data, call <a href="../pdref/mmfunc_22r8.htm"><b>waveOutRestart</b></a>.</p>
<p>
You cannot use <b>waveOutRestart</b> to restart a device that has been stopped with <a href="../pdref/mmfunc_1epg.htm"><b>waveOutReset</b></a>; you must use <b>waveOutWrite</b> to send the first data block to resume playback on the device. </p>
<h4>Looping Playback</h4>
<p>
Looping a sound is controlled by the <b>dwLoops</b> and <b>dwFlags</b> members in the <a href="../pdref/mmstr_7zsi.htm"><b>WAVEHDR</b></a> structures passed to the device with the <a href="../pdref/mmfunc_1k9x.htm"><b>waveOutWrite</b></a> function. Use the WHDR_BEGINLOOP and WHDR_ENDLOOP flags in the <b>dwFlags</b> member to specify the beginning and ending data blocks for looping.</p>
<p>
To loop a single data block, specify both flags for the same block. To specify the number of loops, use the <b>dwLoops</b> member in the <b>WAVEHDR</b> structure for the first block in the loop.</p>
<p>
You can call the <a href="../pdref/mmfunc_6dgw.htm"><b>waveOutBreakLoop</b></a> function to stop a looping sound. </p>
<h4>Changing the Volume of Waveform-Audio Playback</h4>
<p>
Windows provides the following functions to query and set the volume level of waveform-audio output devices.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=30%>Function</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td width=30%><a href="../pdref/mmfunc_004l.htm"><b>waveOutGetVolume</b></a></td>
<td width=70%>Retrieves the current volume level of the specified waveform-audio output device.</td>
</tr>
<tr valign=top>
<td width=30%><a href="../pdref/mmfunc_3a1x.htm"><b>waveOutSetVolume</b></a></td>
<td width=70%>Sets the volume level of the specified waveform-audio output device.</td>
</tr>
</table><br>
<p>
Not all waveform-audio devices support volume changes. Some devices support individual volume control on both the left and right channels. For information about how to determine the volume-control capabilities of waveform-audio devices, see <a href="wave_5s1f.htm">Devices and Data Types</a>.</p>
<p>
Some applications allow the user to control the volume for all audio devices in a system. (Many applications of this type use the audio mixer services; for more information, see <a href="mixer_10xf.htm">Audio Mixers</a>.) Unless your application is capable of this kind of master volume control, you should open an audio device before changing its volume. You should also query the volume level before changing it and restore the volume level to its previous level as soon as possible.</p>
<p>
Volume is specified in a doubleword value. When the audio format is stereo, the upper 16 bits specify the relative volume of the right channel and the lower 16 bits specify the relative volume of the left channel. For devices that do not support left- and right-channel volume control, the lower 16 bits specify the volume level, and the upper 16 bits are ignored. </p>
<p>
Volume-level values range from 0x0 (silence) to 0xFFFF (maximum volume) and are interpreted logarithmically. The perceived volume increase is the same when increasing the volume level from 0x5000 to 0x6000 as it is from 0x4000 to 0x5000.</p>
<h4>Changing Pitch and Playback Rate</h4>
<p>
Some waveform-audio output devices can vary the pitch and the playback rate of waveform-audio data. Not all waveform-audio devices support pitch and playback-rate changes. For information about how to determine whether a particular waveform-audio device supports pitch and playback rate changes, see <a href="wave_5s1f.htm">Devices and Data Types</a>.  </p>
<p>
The differences between changing pitch and playback rate are as follows:
<ul>
<li>
Changing the playback rate is performed by the device driver and does not require specialized hardware. The sample rate is not changed, but the driver interpolates by skipping or synthesizing samples. For example, if the playback rate is changed by a factor of two, the driver skips every other sample.</li>
<li>
Changing the pitch requires specialized hardware. The playback rate and sample rate are not changed.</li>
</ul>
<p>
Windows provides the following functions to query and set waveform-audio pitch and playback rates.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Function</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%><a href="../pdref/mmfunc_1l7s.htm"><b>waveOutGetPitch</b></a></td>
<td width=60%>Retrieves the pitch for the specified waveform-audio output device.</td>
</tr>
<tr valign=top>
<td width=40%><a href="../pdref/mmfunc_14kl.htm"><b>waveOutGetPlaybackRate</b></a></td>
<td width=60%>Retrieves the playback rate for the specified waveform-audio output device.</td>
</tr>
<tr valign=top>
<td width=40%><a href="../pdref/mmfunc_3tt4.htm"><b>waveOutSetPitch</b></a></td>
<td width=60%>Sets the pitch for the specified waveform-audio output device.</td>
</tr>
<tr valign=top>
<td width=40%><a href="../pdref/mmfunc_6mhx.htm"><b>waveOutSetPlaybackRate</b></a></td>
<td width=60%>Sets the playback rate for the specified waveform-audio output device.</td>
</tr>
</table><br>
<p>
The pitch and playback rates are changed by a factor specified with a fixed-point number packed into a doubleword value. The upper 16 bits specify the integer part of the number; the lower 16 bits specify the fractional part. For example, the value 1.5 is represented as 0x00018000L. The value 0.75 is represented as 0x0000C000L. A value of 1.0 (0x00010000) means the pitch or playback rate is unchanged.</p>
<p>&nbsp;</p></body>
</HTML>

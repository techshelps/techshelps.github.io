<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Strings</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_converting_strings"></a>Converting Strings</h2>
<p>
When you use the string interface, all values passed with the command and all return values are text strings, so your application needs conversion routines to translate from variables to strings or back again. The following example retrieves the source rectangle and converts the returned string into rectangle coordinates.</p>
<pre><code>void GetSourceRect(LPSTR lpstrAlias, LPRECT lprc) 
{ 
    char achRetBuff[128]; 
    char achCommandBuff[128]; 
 
    // Build the command string. 
    wsprintf(achCommandBuff, "where %s source", lpstrAlias); 
    SetRectEmpty(lprc);    // clears the RECT 
 
    // Send the command. 
 
    if (mciSendString(achCommandBuff, achRetBuff, 
        sizeof(achRetBuff), NULL) == 0){ 
 
        // The rectangle is returned as "x y dx dy". 
        // Both x and y are 0 because this is the source 
        // rectangle. Translate the string into the RECT 
        // structure. 
        char *p; 
        p = achRetBuff;           // point to the return string 
        while (*p != ' ') p++;    // go past the x (0) 
        while (*p == ' ') p++;    // go past spaces 
        while (*p != ' ') p++;    // go past the y (0) 
        while (*p == ' ') p++;    // go past spaces 
 
        // Retrieve the width. 
        for ( ; *p != ' '; p++) 
            lprc-&gt;right = (10 * lprc-&gt;right) + (*p - '0'); 
 
        while (*p == ' ') p++;    // go past spaces 
 
        // Retrieve the height. 
        for ( ; *p != ' '; p++) 
            lprc-&gt;bottom = (10 * lprc-&gt;bottom) + (*p - '0'); 
    } 
} 
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_rect_str">
</object><a href=JavaScript:alink_1.Click()><b>RECT</b></a> structures are handled differently in MCI than in other parts of Windows; in MCI, the <b>right</b> member contains the width of the rectangle and the <b>bottom</b> member contains its height. In the string interface, a rectangle is specified as <i>X1</i>, <i>Y1</i>, <i>X2</i>, and <i>Y2</i>. The coordinates <i>X1</i> and <i>Y1</i> specify the upper-left corner of the rectangle, and the coordinates <i>X2</i> and <i>Y2</i> specify the width and height. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing MIDI Data from Two MIDI Sources</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_processing_midi_data_from_two_midi_sources"></a>Processing MIDI Data from Two MIDI Sources</h2>
<p>
The MIDI subsystem can route MIDI messages from two data sources to a single MIDI output device for concurrent playback. For example, one source can be background music or a bass line that has been pre-recorded and stored in a file. The second source can be live data from a MIDI instrument, such as a keyboard or guitar. </p>
<p>
Both data sources send MIDI data to a single MIDI device that is identified with one handle. Send one data stream by using the <a href="../pdref/mmfunc_427o.htm"><b>midiStreamOut</b></a> function and one or more stream buffers. This data stream typically contains prerecorded data that is packed into the buffer.</p>
<p>
Send the second data stream (typically from a MIDI instrument) asynchronously by using the <a href="../pdref/mmfunc_66g7.htm"><b>midiOutShortMsg</b></a> function. The running status of a stream buffer will not be adversely affected by the asynchronous calls made by the second data stream.</p>
<p>
Each short message sent with <b>midiOutShortMsg</b> must be a complete MIDI message, with a status byte and the appropriate number of data bytes. If the status byte is omitted, <b>midiOutShortMsg</b> returns an error. (However, there is no running status with stream output.)</p>
<p>&nbsp;</p></body>
</HTML>

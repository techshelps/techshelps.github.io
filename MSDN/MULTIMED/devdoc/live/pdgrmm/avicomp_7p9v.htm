<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hardware Drawing Capabilities</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_hardware_drawing_capabilities"></a>Hardware Drawing Capabilities</h3>
<p>
Some renderers can draw directly to video hardware as they decompress video frames. These renderers return the VIDCF_DRAW flag in response to the <a href="../pdref/mmfunc_0upb.htm"><b>ICGetInfo</b></a> function. When using this type of renderer, your application does not have to handle the decompressed data. It lets the renderer retain the decompressed data for drawing. </p>
<p>
If your application uses a renderer with drawing capabilities, it must handle the following tasks:
<ul>
<li>
Select a renderer.</li>
<li>
Specify image formats.</li>
<li>
Initialize the renderer.</li>
<li>
Draw the data.</li>
<li>
Control drawing parameters.</li>
</ul>
<h4>Renderer Selection</h4>
<p>
The <a href="../pdref/mmmacro_7z5a.htm"><b>ICDrawOpen</b></a> macro opens a renderer that can draw images with the specified format. It returns a handle of a renderer if it is successful, or zero otherwise. This macro uses the <a href="../pdref/mmfunc_9ysl.htm"><b>ICLocate</b></a> function to open the renderer. </p>
<h4>Specifying Image Formats</h4>
<p>
Because your application does not need to draw the decompressed data, it does not require a specific output format. It must, however, ensure that the renderer can draw using the input format by using the <a href="../pdref/mmmsg_8f09.htm">ICM_DRAW_QUERY</a> message (or use the <a href="../pdref/mmmacro_7rsp.htm"><b>ICDrawQuery</b></a> macro). This message cannot determine if a renderer can draw a bitmap. If your application must determine if the renderer can draw the bitmap, use this message with the <a href="../pdref/mmfunc_44ku.htm"><b>ICDrawBegin</b></a> function.</p>
<p>
Your application can have a renderer suggest an input format by using the <a href="../pdref/mmfunc_7jxw.htm"><b>ICDrawSuggestFormat</b></a> function. This function is used when a renderer separates the drawing capabilities from the decompressing capabilities. Most applications using the drawing functions will not need to determine the output format.</p>
<h4>Renderer Initialization</h4>
<p>
The <a href="../pdref/mmfunc_44ku.htm"><b>ICDrawBegin</b></a> function initializes a renderer and tells it the drawing destination. This function can also perform the following tasks: 
<ul>
<li>
Determine whether the renderer supports a specific input format.</li>
<li>
Specify whether the drawing operation occupies a window or the entire screen.</li>
<li>
Specify the part of the image to display using the source rectangle.</li>
<li>
Define the playback rate of the image sequence.</li>
</ul>
<p>
Some renderers buffer the compressed data to operate more efficiently. Your application can send the <a href="../pdref/mmmsg_3r50.htm">ICM_GETBUFFERSWANTED</a> message (or use the <a href="../pdref/mmmacro_33qc.htm"><b>ICGetBuffersWanted</b></a> macro) to determine the number of buffers the renderer requests. Your application should preload these buffers and send them to the renderer before drawing.</p>
<h4>Drawing the Data</h4>
<p>
You can use the <a href="../pdref/mmfunc_2gtz.htm"><b>ICDraw</b></a> function to decompress the data for drawing. The renderer, however, does not start drawing data until your application sends the <a href="../pdref/mmmsg_1mus.htm">ICM_DRAW_START</a> message (or uses the <a href="../pdref/mmmacro_0zn8.htm"><b>ICDrawStart</b></a> macro). When your application calls this function, the renderer begins to draw the frames at the rate specified by the <i>dwRate</i> parameter divided by the <i>dwScale</i> parameter; these parameters were supplied when the application initialized the renderer by using the <a href="../pdref/mmfunc_44ku.htm"><b>ICDrawBegin</b></a> function. Drawing continues until your application sends the <a href="../pdref/mmmsg_9qcw.htm">ICM_DRAW_STOP</a> message (or uses the <a href="../pdref/mmmacro_0tdc.htm"><b>ICDrawStop</b></a> macro).</p>
<p>
<b>Note</b>&nbsp;&nbsp;If a renderer buffers the data before drawing, your application should not use the <b>ICDrawStart</b> macro until it has sent the number of frames the renderer returned for the <b>ICGetBuffersWanted</b> macro.</p>
<p>
The <i>lTime</i> parameter of <a href="../pdref/mmfunc_2gtz.htm"><b>ICDraw</b></a> specifies the time to draw a frame. The renderer divides this integer by the time scale specified with <a href="../pdref/mmfunc_44ku.htm"><b>ICDrawBegin</b></a> to obtain the actual time. Times for <b>ICDraw</b> functions are relative to <b>ICDrawStart</b>. <b>ICDrawStart</b> sets the clock to zero. For example, if your application specifies 1000 for the time scale and 75 for <i>lTime</i>, the renderer draws the frame 75 milliseconds into the sequence.</p>
<h4>Controlling Drawing Parameters</h4>
<p>
You can monitor the clock of a renderer by sending the <a href="../pdref/mmmsg_6co5.htm">ICM_DRAW_GETTIME</a> message (or use the <a href="../pdref/mmmacro_5l0l.htm"><b>ICDrawGetTime</b></a> macro), and you can set the clock of a renderer that can draw data by sending the <a href="../pdref/mmmsg_8vxh.htm">ICM_DRAW_SETTIME</a> message (or use the <a href="../pdref/mmmacro_849x.htm"><b>ICDrawSetTime</b></a> macro). </p>
<p>
To change the current position while a renderer is drawing, your application can send the <a href="../pdref/mmmsg_6ylz.htm">ICM_DRAW_WINDOW</a> message (or use the <a href="../pdref/mmmacro_5p6f.htm"><b>ICDrawWindow</b></a> macro) for repositioning the window. Applications typically use this message whenever the window changes.</p>
<p>
If the playback window gets a realize-palette message, your application must send the <a href="../pdref/mmmsg_4sit.htm">ICM_DRAW_REALIZE</a> message (or use the <a href="../pdref/mmmacro_40v9.htm"><b>ICDrawRealize</b></a> macro) to have the renderer realize the palette again for playback. Applications can change the palette by sending the <a href="../pdref/mmmsg_27vp.htm">ICM_DRAW_CHANGEPALETTE</a> message (or use the <a href="../pdref/mmmacro_7qw5.htm"><b>ICDrawChangePalette</b></a> macro) and obtain the current palette by sending the <a href="../pdref/mmmsg_9jdx.htm">ICM_DRAW_GET_PALETTE</a> message.</p>
<p>
Some renderers must be specifically instructed to display frames passed to them. Sending the <a href="../pdref/mmmsg_87n6.htm">ICM_DRAW_RENDERBUFFER</a> message (or use the <a href="../pdref/mmmacro_6kvm.htm"><b>ICDrawRenderBuffer</b></a> macro) causes these renderers to draw the frame.</p>
<p>&nbsp;</p></body>
</HTML>

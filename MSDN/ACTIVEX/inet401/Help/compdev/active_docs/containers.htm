<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming an Active Document Container</TITLE>

<META NAME=MS-HKWD CONTENT="Programming an Active Document Container">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_docobj_using_container"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Programming an Active Document Container"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Programming an Active Document Container"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="active_docs.htm#book_doc_objects">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="servers.htm">Programming an Active Document Server</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="references/references.htm">Reference</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Programming an Active Document Container</h1>

<P>An Active Document container is an application that provides the view in which an Active Document resides. Instead of providing a document in which an in-place object resides, the container provides the basic user interface features that are specific to the container, and allows the server to merge its menus and add any other user interface components within the view area of the container. This allows the container to host any number of different Active Documents while still maintaining a user interface that is familiar to the user.

<P><A CLASS=tctop HREF="containers.htm#DocObj_Container_Basics"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">The Basics</A><BR>

<P><A CLASS=tctop HREF="containers.htm#DocObj_Container_Loading"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Loading the Active Document</A><BR>

<P><A CLASS=tctop HREF="containers.htm#DocObj_Container_Misc"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Miscellaneous Requirements</A><BR>

<P><A CLASS=tctop HREF="containers.htm#DocObj_Container_Palette_Management"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Palette Management for Active Document Containers</A><BR>

<h2><A NAME="DocObj_Container_Basics">The Basics</A></h2>

<P>To create an Active Document container, you must implement the following interfaces. Some of these interfaces are not required for a minimal implementation of a container. This table specifies which interfaces are required.

<TABLE>
<TR><TD><B>Interface </B></TD><TD><B>Required </B></TD><TD><B>Description</B></TD><TD></TD></TR>
<TR><TD><A HREF="references/IOleDocumentSite.htm#IOleDocumentSite">IOleDocumentSite</A> </TD><TD>Yes </TD><TD>The Active Document object uses this interface to request that the container activate it.</TD></TR>
<TR><TD><object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IOleClientSite</A> </TD><TD>Yes </TD><TD>The Active Document object uses this interface to obtain information about the location and extent of its display site, its user interface, and other resources provided by the container.</TD></TR>
<TR><TD><object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IOleInPlaceSite</A> </TD><TD>Yes </TD><TD>The Active Document object uses this interface to control in-place activation from within the container.</TD></TR>
<TR><TD><object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IAdviseSink</A> </TD><TD>Yes </TD><TD>The Active Document object uses this interface to notify objects with which they have an advisory connection of changes in an object's data, view, name, or state.</TD></TR>
<TR><TD><A HREF="references/IOleCommandTarget.htm#IOleCommandTarget">IOleCommandTarget</A> </TD><TD>No </TD><TD>The Active Document object uses this interface to dispatch commands and obtain command status information from the Active Document.</TD></TR>
<TR><TD><A HREF="references/IContinueCallback.htm#IContinueCallback">IContinueCallback</A> </TD><TD>No </TD><TD>This is a generic callback mechanism for interruptible processes that should periodically ask an object whether to continue.</TD></TR>
</TABLE>

<h2><A NAME="DocObj_Container_Loading">Loading the Active Document</A></h2>

<P>To load the Active Document, your container should perform the following steps. These steps discuss how and when to create, activate, display, and close an Active Document.

 
<h3><A NAME="DocObj_Container_Creating">Creating the Active Document Object</A></h3>

<P>When opening an Active Document file, you need to create an instance of the Active Document object. This is accomplished with the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>OleCreateFromFile</A> API. You pass this API a valid
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IStorage</A> pointer and the name of the file you want to create the object from. If the API succeeds, you will receive a pointer to the Active Document object. This is the interface you will use to control the object. You can use this pointer to use
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>QueryInterface</A> for the
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>IOleObject</A> and/or <A HREF="references/IOleDocument.htm#IOleDocument">IOleDocument</A> interface pointers.

<P>When you have the object's interface, you need to do the following:

<OL>
<LI>Set the object's client site by calling its
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IOleObject::SetClientSite</A> method, passing your
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IOleClientSite</A> interface. 

<LI>Set the object's advise sink by calling the object's
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IOleObject::Advise</A> method, passing your
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IAdviseSink</A> interface.

<LI>Place the Active Document object into the running state by calling
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>OleRun</A>, passing the object's interface pointer.

<LI>Obtain the Active Document view pointer by calling the object's
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IOleObject::DoVerb</A> method with the <I>iVerb</I> parameter equal to OLEIVERB_SHOW. In response to this, the object will call your <A HREF="references/IOleDocumentSite_ActivateMe.htm#IOleDocumentSite__Ac">IOleDocumentSite::ActivateMe</A> method. In <B>IOleDocumentSite::ActivateMe</B>, if the <I>pViewToActivate</I> parameter is not NULL, it contains the object's <A HREF="references/IOleDocumentView.htm#IOleDocumentView">IOleDocumentView</A> pointer. If <I>pViewToActivate</I> is NULL, you must call the object's <A HREF="references/IOleDocument_CreateView.htm#IOleDocument__Create">IOleDocument::CreateView</A> method to create the view. 

<P>In the <A HREF="references/IOleDocument_CreateView.htm#IOleDocument__Create">IOleDocument::CreateView</A> call, the <I>pIPSite</I> and <I>pstm</I> parameters are optional. If you don't include them, or if you obtained the object's view pointer directly in <A HREF="references/IOleDocumentSite_ActivateMe.htm#IOleDocumentSite__Ac">IOleDocumentSite::ActivateMe</A>, you will need to call the object's <A HREF="references/IOleDocumentView_SetInPlaceSite.htm#IOleDocumentView_SetInPlaceSite">IOleDocumentView::SetInPlaceSite</A> method with your
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IOleInPlaceSite</A> pointer to set the view's in-place site and call the object's <A HREF="references/IOleDocumentView_ApplyViewState.htm#IOleDocumentView_ApplyViewState">IOleDocumentView::ApplyViewState</A> method with your view state stream pointer. This allows the view to obtain its view state information. 
</OL>
<h3><A NAME="DocObj_Container_Activating">Activating the Active Document View</A></h3>

<P>When you have the object's view pointer, you need to activate the view. These are the steps involved in this process:

<OL>
<LI>Call the object's <A HREF="references/IOleDocumentView_UIActivate.htm#IOleDocumentView_UIActivate">IOleDocumentView::UIActivate</A> method with the <I>fUIActivate</I> parameter set to TRUE. 

<LI>Set the object's display rectangle by calling its <A HREF="references/IOleDocumentView_SetRect.htm#IOleDocumentView_SetRect">IOleDocumentView::SetRect</A> method. 

<LI>Show the view by calling the object's <A HREF="references/IOleDocumentView_Show.htm#IOleDocumentView_Show">IOleDocumentView::Show</A> method with the <I>fShow</I> parameter set to TRUE. 
</OL>
<h3><A NAME="DocObj_Container_Deactivating">Deactivating the Active Document View</A></h3>

<P>To deactivate the view, hide it by calling the object's <A HREF="references/IOleDocumentView_Show.htm#IOleDocumentView_Show">IOleDocumentView::Show</A> method with FALSE. You then call the object's <A HREF="references/IOleDocumentView_UIActivate.htm#IOleDocumentView_UIActivate">IOleDocumentView::UIActivate</A> method with FALSE. 

 
<h3><A NAME="DocObj_Container_Closing">Closing the Active Document</A></h3>

<P>To close the document, perform the following steps:

<OL>
<LI>Deactivate the view.

<LI>Call the object's <A HREF="references/IOleDocumentView_CloseView.htm#IOleDocumentView_CloseView">IOleDocumentView::CloseView</A> method to close the view. 

<LI>When the view has been closed, the <A HREF="references/IOleDocumentView.htm#IOleDocumentView">IOleDocumentView</A> object is no longer valid, so you must release its pointer. 

<LI>Release any other pointers you have obtained from the object.

<LI>Release the <A HREF="references/IOleDocument.htm#IOleDocument">IOleDocument</A> pointer.
</OL>
<h2><A NAME="DocObj_Container_Misc">Miscellaneous Requirements</A></h2>

<P>You should design your container with these points in mind:

<UL>
<LI>The Active Document object will obtain the view window's parent by calling your
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IOleWindow::GetWindow</A> method. You must provide a handle to your view parent window in response to this method.

<LI>While it is not required for the most basic implementation of an Active Document container, your container should implement the
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IOleInPlaceFrame</A> interface. Without this interface the object will not be able to display toolbars or status text, nor will it be able to merge its menus with the container's menu. Some Active Documents might not allow themselves to be displayed without the container having implemented <B>IOleInPlaceFrame</B>.

<LI>Whenever the size of your view area changes, you need to recalculate the view rectangle and notify the view object by calling its <A HREF="references/IOleDocumentView_SetRect.htm#IOleDocumentView_SetRect">IOleDocumentView::SetRect</A> method.
</UL>
<h2><A NAME="DocObj_Container_Palette_Management">Palette Management for Active Document Containers</A></h2>

<P>In general, the palette management scheme for Active Document containers is the same as the scheme used for ActiveX&#153; Controls, except that containers do not give ambient properties to the document. There are two different cases that need to be considered. The first is if the container can activate only one Active Document object at a time. The second is if the container can activate more than one Active Document object at a time.

 
<h3><A NAME="DocObj_Container_Single_Case">Single Document Case</A></h3>

<P>In the most common cases, your container will activate only one Active Document at a time. In this situation, it is best to allow the Active Document to have complete control over the palette, which includes managing palette issues for any controls or content within that document. To accomplish this, it is necessary for you to forward all Microsoft&#174; Windows&#174; palette management messages on to the Active Document. The following is a simple demonstration of how to forward these messages to the Active Document.

<PRE>case WM_PALETTECHANGED:
case WM_QUERYNEWPALETTE:
   {
   HWND hwnd;
   IOleWindow *pOleWindow;
   if(pDocObj &amp;&amp; SUCCEEDED(pDocObj-&gt;QueryInterface(IID_IOleWindow, 
         (LPVOID*)&amp;pOleWindow))) 
      {
      LRESULT lres = 0;
      if (SUCCEEDED(pOleWindow-&gt;GetWindow(&amp;hwnd))) 
         {
         lres = SendMessage(hwnd, uMsg, wParam, lParam);
         }

      pOleWindow-&gt;Release();
      return lres;
      }
   break;
   }
</PRE>
<h3><A NAME="DocObj_Container_Multiple_Case">Multiple Document Case</A></h3>

<P>In rare cases, your container might be able to activate more than one Active Document at a time. While you can implement such a container, you should avoid doing so if at all possible. One of the reasons this is discouraged is that no protocol currently exists for communicating palettes between an Active Document and its container. Therefore, the container cannot create a palette suitable to all Active Documents that it has activated.

<P>Because of this, the activated Active Document in the foreground has control over the palette and will use foreground palette rendering. Other activated Active Documents in the background will use background palette rendering. The Active Document container itself does not participate in palette management at all. 
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

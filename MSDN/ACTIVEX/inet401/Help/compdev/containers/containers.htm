<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Control Containers</TITLE>

<META NAME=MS-HKWD CONTENT="ActiveX Control Containers">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="bk_activex_contain"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="ActiveX Control Containers"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="ActiveX Control Containers"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../compdev.htm#set_components">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../controls/registration.htm">Registering an ActiveX Object as the Player for a Media Type</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="../active_docs/active_docs.htm">Active Documents</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1><A NAME="ch_intro_cont">ActiveX Control Containers</A></h1>

<P>The purpose of this topic is to provide guidelines for implementing containers that will interoperate well with other controls and containers. This document defines the minimum set of interfaces, methods, and features that are required of ActiveX&#153; containers to accomplish seamless and useful interoperability.

<P><A CLASS=tctop HREF="containers.htm#Overview"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Overview</A><BR>

<P><A CLASS=tctop HREF="containers.htm#ActiveX_Control_Cont"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">ActiveX Control Containers</A><BR>

<P><A CLASS=tctop HREF="containers.htm#General_Guidelines"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">General Guidelines</A><BR>

<P><A CLASS=tctop HREF="containers.htm#Related_Topics"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Related Topics</A><BR>
<!--************************************************************--><h2><A NAME="Overview">Overview</A></h2>

<P>An ActiveX control container must be able to host a minimal ActiveX control as specified in this document. It will also support a number of additional interfaces. 
 A container can optionally support a number of interfaces and methods, which are grouped into functional areas known as <I>component categories</I>. A container can support any combination of component categories. For example, a component category exists for <B>Databinding</B>; a container may or may not support the data-binding functionality, depending on the market needs of the container. If a control needs data-binding support from a container to function, the control will enter this requirement in the registry. This allows a container to offer for insertion only those controls it knows it can successfully host. It is important to note that component categories are specified as part of OLE and are not specific to ActiveX Controls. The controls architecture uses component categories to identify areas of functionality that an OLE component might support. Component categories are not cumulative or exclusive, so a container can support one category without necessarily supporting another.

<P>These guidelines define those interfaces and methods that a control can expect a container to support, although as always a control should check the return values when using
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>QueryInterface</A> or other methods to obtain pointers to these interfaces. A container should not expect a control to support anything more than the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IUnknown</A> interface. These guidelines identify what interfaces a control can support and what the presence of a particular interface means.

<h3><A NAME="Why_Are_the_ActiveX_">Why Are the ActiveX Control Container Guidelines Important?</A></h3>

<P>ActiveX Controls have become the primary architecture for developing programmable software components for use in a variety of different containers, ranging from software development tools to end-user productivity tools. For a control to operate well in a variety of containers, the control must be able to assume some minimum level of functionality that it can rely on in all containers. 

<P>By following these guidelines, control and container developers make their controls and containers more reliable and interoperable, and, ultimately, better and more usable components for building component-based solutions.

<P>This document provides guidelines toward good interoperability. It is expected that new interfaces and component categories will develop over time; future versions of this document reflecting these changes will be made readily available through Microsoft. It is important to note that this document does not cover detailed semantics of the OLE interfaces; this is covered by the SDK documentation.

<h3><A NAME="What_If_an_Interface">What If an Interface You Need Is Not Available?</A></h3>

<P>This section states some fundamental rules that apply to all OLE programming. OLE programs should use
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>QueryInterface</A> to acquire interface pointers, and must check the return value. OLE applications cannot safely assume that <B>QueryInterface</B> will succeed; this requirement applies to all OLE applications. If the requested interface is not available (that is, <B>QueryInterface</B> returns E_NOINTERFACE), the control or container must degrade gracefully, even if that means it cannot perform its designated job function.

<h3><A NAME="What_s_New_">What's New?</A></h3>

<P>This release of the guidelines embraces the concept of component categories, which are a part of the OLE specification. In previous versions of this document, component categories were loosely referred to as "function groups" and were used to identify areas of functionality that a container can optionally support. For this version there has been a definition of how component categories work for ActiveX Controls, and some fundamental categories are identified. The use of component categories allows the relaxing of some of the previous rules that identified interfaces as being mandatory, and allows greater flexibility for controls to efficiently target certain areas of functionality without having to provide superfluous additional support in order to qualify as a control. This edition of the guidelines also discusses what the presence or absence of an interface means and what to do in that situation.

<h2><A NAME="ActiveX_Control_Cont">ActiveX Control Containers</A></h2>

<P>ActiveX control containers must provide support for the following features:
<UL>
<LI>Embedded objects from in-process servers
<LI>In-place activation
<LI>OLEMISC_ACTIVATEWHENVISIBLE
<LI>Event handling
</UL>

<P>The following sections describe the specific interfaces, methods, and other features that are required of ActiveX control containers. The last section describes how to gracefully degrade when a particular control interface is not supported.

<h3><A NAME="Required_Interfaces">Required Interfaces</A></h3>

<P>The following table lists the ActiveX control container interfaces, denoting which interfaces are optional, and which are mandatory and must be implemented by containers.

<TABLE>
<TR><TD><B>Interface</B></TD><TD><B>Support mandatory?</B></TD><TD><B>Comments
</B></TD></TR>
<TR><TD><object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IOleClientSite</A></TD><TD>Yes</TD><TD></TD></TR>
<TR><TD><object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IAdviseSink</A></TD><TD>No</TD><TD>Only when the container wants data change notifications (controls with
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IDataObject</A>), view change notification (controls that are not active and have <B>IViewObject[2]</B>), and other notifications from controls acting as standard embedded objects.
</TD></TR>
<TR><TD><object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>IOleInPlaceSite</A></TD><TD>Yes</TD><TD></TD></TR>
<TR><TD><B>IOleControlSite</B></TD><TD>Yes</TD><TD></TD></TR>
<TR><TD><object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IOleInPlaceFrame</A></TD><TD>Yes</TD><TD></TD></TR>
<TR><TD><B>IOleContainer</B></TD><TD>Yes</TD><TD>See Note 1.
</TD></TR>
<TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> for ambient properties</TD><TD>Yes</TD><TD>See Note 2 and "Ambient Properties" section 
</TD></TR>
<TR><TD>Control Event Sets</TD><TD>Yes</TD><TD>See Note 2. 
</TD></TR>
<TR><TD><B>ISimpleFrameSite</B></TD><TD>No</TD><TD>This interface and support for nested simple frames is optional.
</TD></TR>
<TR><TD><object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IPropertyNotifySink</A></TD><TD>No</TD><TD>Only needed for containers that have their own property-editing UI, which would require updating whenever a control changed a property itself, or containers that want to control <B>[requestedit]</B> property changes and other such data-binding features.
</TD></TR>
<TR><TD><B>IErrorInfo</B></TD><TD>Yes</TD><TD>Mandatory if container supports dual interfaces. See Note 2.
</TD></TR>
<TR><TD><B>IClassFactory2</B></TD><TD>No</TD><TD>Support is strongly recommended.
</TD></TR>
</TABLE>

<P>Notes:
<OL>
<LI><B>IOleContainer</B> is implemented on the document or form object (or appropriate analog) that holds the container sites. Controls use <B>IOleContainer</B> to navigate to other controls in the same document or form.
<LI>Support for dual interfaces is not mandatory, but is strongly recommended. Writing ActiveX control containers to take advantage of dual interfaces will afford better performance with controls that offer dual interface support.
</OL>

<P>ActiveX control containers must support OLE Automation exceptions. If a container supports dual interfaces, it must capture automation exceptions through <B>IErrorInfo</B>.

<h3><A NAME="Optional_Methods">Optional Methods</A></h3>

<P>An OLE component can implement an interface without implementing all the semantics of every method in the interface, instead returning E_NOTIMPL or S_OK as appropriate. The following table describes those methods that an ActiveX control container is not required to implement (that is, the container can return E_NOTIMPL). 

<P>The table also describes optional methods; note that the method must still exist, but can simply return E_NOTIMPL instead of implementing "real" semantics. Note that any method from a mandatory interface that is not listed in the table must be considered mandatory and cannot return E_NOTIMPL.

<TABLE>
<TR><TD><B>Method
 </B></TD><TD><B>Comments
</B></TD></TR><TR><TD><object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IOleClientSite</A>
 </TD><TD></TD></TR><TR><TD><B>SaveObject</B>
 </TD><TD>Necessary for persistence to be successfully supported.
</TD></TR><TR><TD><B>GetMoniker</B>
 </TD><TD>Necessary only if the container supports linking to controls within its own form or document.
</TD></TR><TR><TD><object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IOleInPlaceSite</A>
 </TD><TD></TD></TR><TR><TD><B>ContextSensitiveHelp</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>Scroll</B>
 </TD><TD>Can return S_FALSE with no action.
</TD></TR><TR><TD><B>DiscardUndoState</B>
 </TD><TD>Can return S_OK with no action.
</TD></TR><TR><TD><B>DeactivateAndUndo</B>
 </TD><TD>Deactivation is mandatory; Undo is optional. 
</TD></TR><TR><TD><B>IOleControlSite</B>
 </TD><TD></TD></TR><TR><TD><B>GetExtendedControl</B>
 </TD><TD>Necessary for containers that support extended controls.
</TD></TR><TR><TD><B>ShowPropertyFrame</B>
 </TD><TD>Necessary for containers that want to include their own property pages to handle extended control properties in addition to those provided by a control.
</TD></TR><TR><TD><B>TranslateAccelerator</B>
 </TD><TD>Can return S_FALSE with no action.
</TD></TR><TR><TD><B>LockInPlaceActive</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> (ambient properties)
 </TD><TD></TD></TR><TR><TD><B>GetTypeInfoCount</B>
 </TD><TD>Necessary for containers that support nonstandard ambient properties.
</TD></TR><TR><TD><B>GetTypeInfo</B>
 </TD><TD>Necessary for containers that support nonstandard ambient properties.
</TD></TR><TR><TD><B>GetIDsOfNames</B>
 </TD><TD>Necessary for containers that support nonstandard ambient properties.
</TD></TR><TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> (event sink)
 </TD><TD></TD></TR><TR><TD><B>GetTypeInfoCount</B>
 </TD><TD>The control knows its own type information, so it has no need to call this.
</TD></TR><TR><TD><B>GetTypeInfo</B>
 </TD><TD>The control knows its own type information, so it has no need to call this.
</TD></TR><TR><TD><B>GetIDsOfNames</B>
 </TD><TD>The control knows its own type information, so it has no need to call this.
</TD></TR><TR><TD><object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IOleInPlaceFrame</A>
 </TD><TD></TD></TR><TR><TD><B>ContextSensitiveHelp</B>
 </TD><TD></TD></TR><TR><TD><B>GetBorder</B>
 </TD><TD>Necessary for containers with toolbar UI (which is optional).
</TD></TR><TR><TD><B>RequestBorderSpace</B>
 </TD><TD>Necessary for containers with toolbar UI (which is optional).
</TD></TR><TR><TD><B>SetBorderSpace</B>
 </TD><TD>Necessary for containers with toolbar UI (which is optional).
</TD></TR><TR><TD><B>InsertMenus</B>
 </TD><TD>Necessary for containers with menu UI (which is optional).
</TD></TR><TR><TD><object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>SetMenu</A>
 </TD><TD>Necessary for containers with menu UI (which is optional).
</TD></TR><TR><TD><B>RemoveMenus</B>
 </TD><TD>Necessary for containers with menu UI (which is optional).
</TD></TR><TR><TD><B>SetStatusText</B>
 </TD><TD>Necessary only for containers that have a status line.
</TD></TR><TR><TD><B>EnableModeless</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>TranslateAccelerator</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>IOleContainer</B>
 </TD><TD></TD></TR><TR><TD><B>ParseDisplayName</B>
 </TD><TD>Only if linking to controls or other embeddings in the container is supported, as this is necessary for moniker binding.
</TD></TR><TR><TD><B>LockContainer</B>
 </TD><TD> As for <B>ParseDisplayName</B>.
</TD></TR><TR><TD><B>EnumObjects</B>
 </TD><TD>Returns all ActiveX Controls through an enumerator with <B>IEnumUnknown</B>, but not necessarily all objects (since there's no guarantee that all objects are ActiveX Controls; some might be regular Windows&#174; controls).
</TD></TR></TABLE>
<h3><A NAME="Miscellaneous_Status">Miscellaneous Status Bits Support</A></h3>

<P>ActiveX control containers must recognize and support the following OLEMISC_ status bits.

<TABLE>
<TR><TD><B>Status bit</B></TD><TD><B>Support mandatory?</B></TD><TD><B>Comments
</B></TD></TR>
<TR><TD>ACTIVATEWHENVISIBLE</TD><TD>Yes</TD><TD></TD></TR>
<TR><TD>IGNOREACTIVATEWHENVISIBLE</TD><TD>No</TD><TD>Needed for inactive and windowless control support. See Note 1.
</TD></TR>
<TR><TD>INSIDEOUT</TD><TD>No</TD><TD>Not generally used with ActiveX Controls but rather with compound document embeddings. Note this is contrary to some SDK documentation that says this bit must be set for the ACTIVATEWHENVISIBLE bit to be set.
</TD></TR>
<TR><TD>INVISIBLEATRUNTIME</TD><TD>Yes</TD><TD>Designates a control that should be visible at design time, but invisible at run time.
</TD></TR>
<TR><TD>ALWAYSRUN</TD><TD>Yes</TD><TD></TD></TR>
<TR><TD>ACTSLIKEBUTTON</TD><TD>No</TD><TD>Support is normally mandatory, although it is not necessary for document-style containers.
</TD></TR>
<TR><TD>ACTSLIKELABEL</TD><TD>No</TD><TD>Support is normally mandatory, although it is not necessary for document-style containers.
</TD></TR>
<TR><TD>NOUIACTIVATE</TD><TD>Yes</TD><TD></TD></TR>
<TR><TD>ALIGNABLE</TD><TD>No</TD><TD></TD></TR>
<TR><TD>SIMPLEFRAME</TD><TD>No</TD><TD> 
</TD></TR>
<TR><TD>SETCLIENTSITEFIRST</TD><TD>No</TD><TD>Support for this bit is recommended but not mandatory.
</TD></TR>
<TR><TD>IMEMODE</TD><TD>No</TD><TD></TD></TR>
</TABLE>

<P>Notes:
<OL>
<LI>The IGNOREACTIVATEWHENVISIBLE bit is for containers hosting inactive and windowless controls. The bit is introduced as part of the ActiveX Controls 96 specification; see this documentation for more details.
</OL>
<h3><A NAME="Keyboard_Handling">Keyboard Handling</A></h3>

<P>Keyboard handling support for the following functionality is strongly recommended, although it is recognized that it is not applicable to all containers:
<UL>
<LI>Support for OLEMISC_ACTSLIKELABEL and OLEMISC_ACTSLIKEBUTTON status bits.
<LI>Implementing the DisplayAsDefault ambient property (if it exists, it can return FALSE).
<LI>Implementing tab handling, including tab order.
</UL>

<P>Some containers use ActiveX Controls in traditional compound document scenarios. For example, a spreadsheet might allow a user to embed an ActiveX control into a worksheet. In such scenarios, the container would do keyboard handling differently, because the keyboard interface should remain consistent with the user's expectations of a spreadsheet. Documentation for such products should inform users of differences in control handling in these different scenarios. Other containers should endeavor to honor the above functionality correctly, including mnemonic handling.

<h3><A NAME="Storage_Interfaces">Storage Interfaces</A></h3>

<P>Containers must be able to support controls that implement
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IPersistStorage</A>,
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IPersistStream</A>, or
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IPersistStreamInit</A>. Optionally, a container can support any other persistence interfaces, such as <A HREF="../comobj/reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, <A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>, and
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_19.Click()>IPersistMoniker</A>, for those controls that provide support.

<P>After an ActiveX control container has chosen and initialized a storage interface to use (<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IPersistStorage</A>,
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IPersistStream</A>,
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IPersistStreamInit</A>, and so on), that storage interface will remain the primary storage interface for the lifetime of the control; that is, the control will remain in possession of the storage. This does not preclude the container from saving to other storage interfaces.

<P>ActiveX control containers do not need to support a "save as text" mechanism, thus using <A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> and the associated container-side interface <A HREF="../comobj/reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A> are optional.

<h3><A NAME="Ambient_Properties">Ambient Properties</A></h3>

<P>At a minimum, ActiveX control containers must support the following ambient properties using the standard DISPIDs.

<TABLE>
<TR><TD><B>Ambient property</B></TD><TD><B>DISPID</B></TD><TD><B>Comments/Conditions
</B></TD></TR>
<TR><TD>LocaleID</TD><TD>-705</TD><TD></TD></TR>
<TR><TD>UserMode</TD><TD>-709</TD><TD>For containers that have different user and run environments.
</TD></TR>
<TR><TD>DisplayAsDefault </TD><TD>-713</TD><TD>For those containers where a default button is relevant.
</TD></TR>
</TABLE>
<h3><A NAME="Extended_Properties_">Extended Properties, Events, and Methods</A></h3>

<P>ActiveX control containers are not required to support extended controls. However, if the container does support extended properties, it must support the following minimal set:
<TABLE>
<TR><TD>Visible
</TD><TR><TD>Parent
</TD><TR><TD>Default
</TD><TR><TD>Cancel
</TD></TABLE>

<P>Currently, extended properties, events, and methods do not have standard DISPIDs.

<h3><A NAME="Message_Reflection">Message Reflection</A></h3>

<P>It is strongly recommended that an ActiveX control container support message reflection. This will result in more efficient operation for subclassed controls. If message reflection is supported, the MessageReflect ambient property must be supported and have a value of TRUE. If a container does <I>not</I> implement message reflection, the OLE CDK creates <I>two</I> windows for <I>every</I> subclassed control, to provide message reflection on behalf on the container.

<h3><A NAME="Automatic_Clipping">Automatic Clipping</A></h3>

<P>It is strongly recommended that an ActiveX control container support automatic clipping of its controls. This will result in more efficient operation for most controls. If automatic clipping is supported, the AutoClip ambient property must be supported and have a value of TRUE.

<P>Automatic clipping is the ability of a container to ensure that a control's drawn output goes only to the container's current clipping region. In a container that supports automatic clipping, a control can paint without regard to its clipping region, because the container will automatically clip any painting that occurs outside the control's area. If a container does not support automatic clipping, CDK-generated controls will create an extra parent window if a nonnull clipping region is passed.

<h3><A NAME="Degrading_Gracefully">Degrading Gracefully in the Absence of an Interface</A></h3>

<P>Because a control might not support any interface other than
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>IUnknown</A>, a container has to degrade gracefully when it encounters the absence of any particular interface.

<P>One might question the usefulness of a "control" with nothing more than
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>IUnknown</A>. But consider the advantages that a control receives from a container's visual programming environment (such as Microsoft Visual Basic&#174;) when the container recognizes the object as a "control":
<OL>
<LI>A button for the object appears in a toolbox.
<LI>One can create an object by dragging it from the toolbox onto a form.
<LI>One can give the object a name that is recognized in the visual programming environment.
<LI>The same name in (3) above can be used immediately in writing any other code for controls on the same form (or even a different form).
<LI>The container can automatically provide code entry points for any events available from that object.
<LI>The container provides its own property browsing UI for any available properties.
</OL>

<P>When an object isn't recognized as a "control," it potentially loses all of these very powerful and beneficial integration features. For example, in Visual Basic 4.0 it is very difficult to really integrate some random object that is not a "control" in the complete sense, but may still have properties and events. Because Visual Basic 4.0's idea of a control is very restrictive, the object does not gain any of the integration features mentioned previously. But even a control with
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>IUnknown</A>, where the mere <I>lifetime</I> of the control determines the <I>existence</I> of some resource, should be able to gain the integration capabilities described above.

<P>Because current tools require a large set of control interfaces to gain any advantage, controls are generally led to <I>over-implementation</I>, such that they contain more code than they really need. Controls that could be 7K might end up being 25K, which is a big performance problem in areas such as the Internet. This has also led to the perception that one can only implement a control with one tool, such as the CDK, because of the complexity of implementing <I>all</I> the interfaces. This has implications when a large DLL such as Oc30.dll is required for such a control, increasing the working set. If not all interfaces are required, this opens up many developers to writing very small and light controls with straight OLE or with other tools as well, minimizing the overhead for each control.

<P>This is why this document recognizes a "control" as any object with a CLSID and an
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IUnknown</A> interface. Even with nothing more than <B>IUnknown</B>, a container with a programming environment should be able to provide at least features (3) and (4) from the list above. If the object provides a ToolBoxBitmap32 registry entry, it gains (1) and (2). If the object supplies
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>IConnectionPointContainer</A> (and <B>IProvideClassInfo</B> generally) for some event set, it gains (5), and if it supports <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> for properties and methods, it gains (6), as well as better code integration in the container.

<P>In short, an object should be able to implement as little as <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> and one event set exposed through
<object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>IConnectionPointContainer</A> to gain all the visual features above.

<P>With this in mind, the following table describes what a container might do in the absence of any possible interface. Note that only those interfaces are listed that the container will directly obtain through
<object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>QueryInterface</A>. Other interfaces, such as
<object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>IOleInPlaceActiveObject</A>, are obtained through other means.
<TABLE>
<TR><TD><B>Interface
 </B></TD><TD><B>Meaning of interface absence
</B></TD></TR><TR><TD><B>IViewObject2</B>
 </TD><TD>The control has no visuals that it will draw itself, so has no definite extents to provide. In run time, the container simply doesn't attempt to draw anything when this interface is absent. In design time, the container must at least draw some kind of default rectangle with a name in it for such a control, so a user in a visual programming environment can select the object and check out its properties, methods, and events that exist. Handling the absence of <B>IViewObject2</B> is critical for good visual programming support.
</TD></TR><TR><TD><object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>IOleObject</A>
 </TD><TD>The control doesn't need the site whatsoever, nor does it take part in any embedded object layout negotiation. Any information (such as control extents) that a container might expect from this interface should be filled in with container-provided defaults.
</TD></TR><TR><TD><object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>IOleInPlaceObject</A>
 </TD><TD>The control doesn't go in-place active (like a label) and thus never attempts to activate in this manner. Its only activation might be its property pages.
</TD></TR><TR><TD><B>IOleControl</B>
 </TD><TD>Control has no mnemonics and no use of ambient properties, and doesn't care if the container ignores events. In the absence of this interface, the container just doesn't call its members.
</TD></TR><TR><TD><object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>IDataObject</A>
 </TD><TD>The control provides no property sets nor any visual renderings that could be cached, so the container would choose to cache some default presentation in the absence of this interface (support for CF_METAFILEPICT, specifically) and disable any property-set related functionality.
</TD></TR><TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>
 </TD><TD>The control has no custom properties or methods. The container does not need to try to show any control properties in this case, and should disallow any custom method calls that the container doesn't recognize as belonging to its own extended controls (that might support methods and properties). As extended controls generally delegate certain <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> calls to the control, an extended control should not expect the control to have <B>IDispatch</B> at all.
</TD></TR><TR><TD><object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>IConnectionPointContainer</A>
 </TD><TD>The control has no events, so the container doesn't have to think about handling any.
</TD></TR><TR><TD><B>IProvideClassInfo[2]</B>
 </TD><TD>The control either doesn't have type information or events, or the container needs to go into the control's type information through the control's registry entries. The existence of this interface is an optimization.
</TD></TR><TR><TD><B>ISpecifyPropertyPages</B>
 </TD><TD>The control has no property pages, so if the container has any UI that would invoke them, the container should disable that UI.
</TD></TR><TR><TD><B>IPerPropertyBrowsing</B>
 </TD><TD>The control has no display name itself, no predetermined strings and values, and no property to page mapping. This interface is nearly always used for generating container user interface, so such UI elements would be disabled in the absence of this interface.
</TD></TR><TR><TD><object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>IPersist*</A>
 </TD><TD>The control has no persistent state to speak of, so the container doesn't have to worry about saving any control-specific data. The container will, of course, save its own information about the control in its own form or document, but the control itself has nothing to contribute to that information.
</TD></TR><TR><TD><B>IOleCache[2]</B>
 </TD><TD>The object doesn't support caching. A container can still support caching by just creating a data cache itself using <B>CreateDataCache</B>.
</TD></TR></TABLE>
<h2><A NAME="General_Guidelines">General Guidelines</A></h2>

<P>This section describes various features, hints, and tips for ActiveX control and ActiveX control container developers to help ensure good interoperability between controls and containers.

<h3><A NAME="Overloading_Ipropert">Overloading IpropertyNotifySink</A></h3>

<P>Many ActiveX control containers implement a modeless property browsing window. If a control's properties are altered through the control's property pages, the control's properties can get out of sync with the container's view of those properties (the control is always right, of course). To ensure that it always has the current values for a control's properties, an ActiveX control container can overload the
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>IPropertyNotifySink</A> interface (data binding) and also use it to be notified that a control property has changed. This technique is optional, and is not required of ActiveX control containers or ActiveX Controls.

<P><B>Note</B>  A control should use <B>IPropertyNotifySink::OnRequestEdit</B> only for data binding; it is free to use <B>OnChanged</B> for either or both purposes.<h3><A NAME="Container_Specific_P">Container-Specific Private Interfaces</A></h3>

<P>Some containers provide container-specific private interfaces for additional functionality or improved performance. Controls that rely on those container-specific interfaces should, if possible, work without those container-specific interfaces present so that the control functions in different containers. For example, Visual Basic implements private interfaces that provide string formatting functionality to controls. If a control makes use of the Visual Basic private formatting interfaces, it should be able to run with default formatting support if these interfaces are not available. If the control can function without the private interfaces, it should take appropriate action (such as warn the user of reduced functionality) but continue to work. If this is not an option, a component category should be registered as required to ensure that only containers supporting this functionality can host these controls. 
 
<h3><A NAME="Multithreaded_Issues">Multithreaded Issues</A></h3>

<P>Starting with Microsoft Windows 95 and Microsoft Windows NT&#174; 3.51, OLE provides support for multithreaded applications, allowing applications to make OLE calls from multiple threads. This multithreaded support is called the "apartment model"; it is important that all OLE components using multiple threads follow this model. The apartment model requires that interface pointers are marshaled (using <B>CoMarshalInterface</B> and <B>CoUnmarshalInterface</B>) when passed between threads. For more information about apartment model threading, refer to the Platform SDK documentation and the OLEAPT sample (in the Platform SDK).

<h3><A NAME="Event_Freezing">Event Freezing</A></h3>

<P>A container can notify a control that it is not ready to respond to events by calling <B>IOleControl::FreezeEvents</B>(TRUE). It can unfreeze the events by calling <B>IOleControl::FreezeEvents</B>(FALSE). When a container freezes events, it is freezing <I>event processing</I>, not <I>event receiving</I>; that is, a container can still receive events while events are frozen. If a container receives an event notification while its events are frozen, the container should ignore the event. No other action is appropriate.

<P>A control should take note of a container's call to <B>IOleControl::FreezeEvents</B>(TRUE) if it is important to the control that an event is not missed. While a container's event processing is frozen, a control should implement one of the following techniques:

<UL>
<LI>Fire the events in the full knowledge that the container will take no action.
<LI>Discard all events that the control would have fired.
<LI>Queue up all pending events and fire them after the container has called <B>IOleControl::FreezeEvents</B>(FALSE).
<LI>Queue up only relevant or important events and fire them after the container has called <B>IOleControl::FreezeEvents</B>(FALSE). 
</UL>

<P>Each technique is acceptable and appropriate in different circumstances. The control developer is responsible for determining and implementing the appropriate technique for the control's functionality.

<h3><A NAME="Container_Controls">Container Controls</A></h3>

<P>As described previously, container controls are ActiveX Controls that visually contain other controls. The ActiveX Controls architecture specifies the <B>ISimpleFrameSite</B> interface to enable container controls. Containers can also support container controls without supporting <B>ISimpleFrameSite</B>, although the behavior cannot be guaranteed. For this reason, a component category exists for <B>SimpleFrameSite</B> controls where the full functionality of this interface is required. 

<P>To support container controls without implementing <B>ISimpleFrameSite</B>, an ActiveX control container must:
<UL>
<LI>Activate all controls at all times.
<LI>Reparent the contained controls to the <B>hWnd</B> of the containing control.
<LI>Remain the parent of the container control.
</UL>
<h3><A NAME="WS_GROUP_and_WS_TABS">WS_GROUP and WS_TABSTOP Flags in Controls</A></h3>

<P>A control should not use the WS_GROUP and WS_TABSTOP flags internally; some containers rely on these flags to manage keyboard handling.

<h3><A NAME="Multiple_Controls_in">Multiple Controls in One DLL</A></h3>

<P>A single .ocx DLL can container any number of ActiveX Controls, thus simplifying the distribution and use of a set of related controls. 

<P>If you ship multiple controls in a single DLL, be sure to include the vendor name in <I>each</I> control name in the package. Including the vendors' names in each control name will enable users to easily identify controls within a package. For example, if you ship a DLL that implements three controls, Con1, Con2 and Con3, the control names should be:

<PRE>&lt;Your company name&gt; Con1 Control
&lt;Your company name&gt; Con2 Control
&lt;Your company name&gt; Con3 Control
</PRE>
<h3><A NAME="IOleContainer__EnumO">IOleContainer::EnumObjects</A></h3>

<P>This method is used to enumerate over all the OLE objects contained in a document or form, returning an interface pointer for each OLE object. The container must return pointers to each OLE object that shares the same container. Nested forms or nested controls must also be enumerated. 

<P>Some containers implement "extender controls," which wrap non-ActiveX controls, and then return pointers to these extender controls as a form is enumerated. This behavior enables ActiveX Controls and ActiveX control containers to integrate well with non-ActiveX controls, and is thus recommended but not required.


<h3><A NAME="Enhanced_Metafiles">Enhanced Metafiles</A></h3>

<P>Not surprisingly, enhanced metafiles provide more functionality than standard metafiles; using enhanced metafiles generally simplifies rendering code. An enhanced metafile device context (DC) is used in exactly the same way as a standard metafile DC. Enhanced metafiles are not available in 16-bit OLE. OLE supports enhanced metafiles, and includes backward compatibility with standard metafiles and 16-bit applications. 

<P>A 32-bit ActiveX control container should use enhanced metafiles instead of standard metafiles.

<h3><A NAME="Licensing">Licensing</A></h3>

<P>In order to embed licensed controls successfully, ActiveX control containers must use <B>IClassFactory2</B> instead of
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>IClassFactory</A>. Several OLE creation and loading helper functions (for example, <B>OleLoad</B> and
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>CoCreateInstance</A>) explicitly call <B>IClassFactory</B> and not <B>IClassFactory2</B>, and therefore cannot be used to create or load licensed ActiveX Controls. ActiveX control containers should explicitly create and load ActiveX Controls using <B>IClassFactory2</B>. In the future, Microsoft will update these standard APIs to use both <B>IClassFactory</B> and <B>IClassFactory2</B>, as appropriate.

<h3><A NAME="Dual_Interfaces">Dual Interfaces</A></h3>

<P>OLE Automation enables an object to expose a set of methods in two ways: through the <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> interface, and through direct OLE Vtable binding. <B>IDispatch</B> is used by most tools available today, and offers support for late binding to properties and methods. Vtable binding offers much higher performance because this method is called directly instead of through
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>IDispatch::Invoke</A>. <B>IDispatch</B> offers late bound support, where direct Vtable binding offers a significant performance gain; both techniques are valuable and important in different scenarios. By labeling an interface as "dual" in the type library, an OLE Automation interface can be used through <B>IDispatch</B>, or it can be bound to directly. Containers can thus choose the most appropriate technique. Support for dual interfaces is strongly recommended for both controls and containers. 

<h3><A NAME="IPropertyBag_and_Ipe">IPropertyBag and IpersistPropertyBag</A></h3>

<P><A HREF="../comobj/reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A> and <A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> optimize "save as text" mechanisms, and therefore are recommended for ActiveX control containers that implement a "save as text" mechanism. <B>IPropertyBag</B> is implemented by a container, and is roughly analogous to
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>IStream</A>. <B>IPersistPropertyBag</B> is implemented by controls, and is roughly analogous to
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>IPersistStream</A>.

<h2><A NAME="Related_Topics">Related Topics</A></h2>
<TABLE>
<TR><TD><object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_COM_Objects_for_the_Internet>
</object><A HREF=JavaScript:hhal_42.Click()>COM Objects for the Internet</A>
</TD></TR>
<TR><TD><object id="hhal_43" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Asynchronous_and_URL_Monikers>
</object><A HREF=JavaScript:hhal_43.Click()>Asynchronous and URL Monikers</A>
</TD></TR>
<TR><TD><object id="hhal_44" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Hyperlinks>
</object><A HREF=JavaScript:hhal_44.Click()>Hyperlinks</A>
</TD></TR>
</TABLE>
<!--***********************************************************************--><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

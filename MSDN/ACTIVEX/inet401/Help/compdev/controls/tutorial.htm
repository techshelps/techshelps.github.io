<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Control Tutorial</TITLE>

<META NAME=MS-HKWD CONTENT="ActiveX Control Tutorial">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_tutorial"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="ActiveX Control Tutorial"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="ActiveX Control Tutorial"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="controls.htm#bk_activex_controls">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="buildax.htm">Building ActiveX Controls for Internet Explorer 4.0</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="safety.htm">Safe Initialization and Scripting for ActiveX Controls</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>ActiveX Control Tutorial</h1>

<P>This article describes how a developer can add ActiveX&#153; support to an existing OLE Automation control.

<P><A CLASS=tctop HREF="tutorial.htm#Introduction"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Introduction</A><BR>

<P><A CLASS=tctop HREF="tutorial.htm#Prerequisites"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Prerequisites</A><BR>

<P><A CLASS=tctop HREF="tutorial.htm#Document_Roadmap"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Document Roadmap</A><BR>

<P><A CLASS=tctop HREF="tutorial.htm#What_Is_an_ActiveX_C"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">What Is an ActiveX Control?</A><BR>

<P><A CLASS=tctop HREF="tutorial.htm#Porting_the_Timer_Co"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Porting the Timer Control</A><BR>
<!--************************************************************--><h2><A NAME="Introduction">Introduction</A></h2>

<P>An ActiveX control is an object that supports a customizable, programmatic interface. Using the methods, events, and properties exposed by a control, Web authors can automate their HTML pages. Examples of ActiveX Controls include text boxes, command buttons, audio players, video players, stock tickers, and so on. 

<P>You can develop ActiveX Controls using Microsoft&#174; Visual Basic&#174; 5.0, Java&#153;, and Microsoft Visual C++&#174;. This article focuses on controls developed with Microsoft Visual C++. (For more information about developing controls with Microsoft Visual Basic, refer to <A HREF="http://www.microsoft.com/vbasic/prodinfo/cce/" TARGET="_top">http://www.microsoft.com/vbasic/prodinfo/cce/</A>; for more information about developing controls with Java, refer to <A HREF="http://splash.javasoft.com/beans/javadoc/packages.html" TARGET="_top">http://splash.javasoft.com/beans/javadoc/packages.html</A>.)

<P>Because ActiveX Controls are complex, Microsoft offers several tools that help a C++ developer create an ActiveX control. The following table describes these tools.
<TABLE>
<TR><TD><B>Tool</B></TD><TD><B>Description</B></TD><TD><B>Ships with
</B></TD></TR>
<TR><TD>Microsoft Foundation Class Library (MFC)</TD><TD>A set of C++ classes that support COM, OLE, and ActiveX (among other things). MFC provides the simplest means of creating ActiveX Controls.</TD><TD>Microsoft Visual C++ version 4.2 or later. (MFC ships with earlier versions of Visual C++; however, these versions do not support ActiveX.)
</TD></TR>
<TR><TD>ActiveX Controls Framework</TD><TD>A set of C++ classes designed specifically to support control development. The framework requires more knowledge of OLE Automation and dual interfaces than does MFC.</TD><TD>Internet Client SDK.
</TD></TR>
<TR><TD>Microsoft ActiveX Template Library
</TD><TD>A set of C++ templates designed to create small and fast COM objects.
</TD><TD>ATL 2.1 ships with Microsoft Visual C++ version 5.0. (ATL 2.0 is a web release that relies on the Microsoft Visual C++ 4.2 IDE). 
</TD></TR>
</TABLE>

<P>This tutorial focuses on controls developed with MFC. It demonstrates how you can convert an existing OLE control into an ActiveX control. The tutorial is based on the sample MFC timer control that ships with Microsoft Visual C++ version 4.2. The timer control supported a single event and a single property: It fired a Timer event at a user-specified interval (which corresponded to the control's Interval property). For the purpose of this tutorial, the timer control was converted into a digital alarm clock (which can be inserted into an HTML page using the OBJECT tag). 


<P>

<P><IMG SRC="../../art/tutorial.gif" WIDTH="627" HEIGHT="497" ALT="Digital-Clock ActiveX Control" >

<P>

<P>The modifications to the sample timer control include:
<UL>
<LI>Overriding the <B>COleControl::OnDraw</B> member function so that the control renders current time.
<LI>Adding support for stock font, foreground color, and background color properties.
<LI>Adding support for the alarm's hour and minute properties.
<LI>Identifying the control as safe for scripting.
<LI>Adding support for run-time licensing.
<LI>Packaging the control for efficient download on the Internet.
</UL>
<h2><A NAME="Prerequisites">Prerequisites</A></h2>

<P>To benefit from this tutorial, you should be familiar with COM (the OLE Component Object Model) and OLE Automation; in addition, you should know C++ and be familiar with the Microsoft Foundation Class Library (MFC).

<P>If you need an introduction to COM, you should read the second edition of <I>Inside OLE</I> by Kraig Brockschmidt (published by Microsoft Press). If you need an introduction to OLE Automation, you should read <I>ActiveX Controls Inside Out</I> by Adam Denning (also published by Microsoft Press).

<P>If you need an introduction to C++ or the Microsoft Foundation Class Library, you should read <I>Inside Visual C++</I> by David Kruglinski (and published by Microsoft Press). 

<h2><A NAME="Document_Roadmap">Document Roadmap</A></h2>

<P>This document contains the following sections.
<TABLE>
<TR><TD><B>Section</B></TD><TD><B>Description
</B></TD></TR>
<TR><TD>What Is an ActiveX Control?</TD><TD>Reviews the parts of an OLE control; in addition, it describes the new features that differentiate an ActiveX control from an OLE control. This section includes descriptions of topics such as security, run-time licensing, and packaging.
</TD></TR>
<TR><TD>Porting the Timer Control</TD><TD>Describes the work required to convert the sample MFC timer control into a digital clock (with alarm functionality). It includes information about modifying the MFC <B>OnDraw</B> function, adding support for stock properties, adding support for custom properties, adding support for security, and so on.
</TD></TR>
</TABLE>
<h2><A NAME="What_Is_an_ActiveX_C">What Is an ActiveX Control?</A></h2>

<P>An ActiveX control is an OLE control that supports additional ActiveX features. This section reviews the architecture of an OLE control and then describes those additional ActiveX features (such as safety, run-time licensing, digital certificates, packaging the control, and so on).
<h3><A NAME="interface_desc">Description of an OLE Control</A></h3>

<P>At a minimum, an OLE control is a COM object that supports the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IUnknown</A> and
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IClassFactory</A> (or <B>IClassFactory2</B>) interfaces. As stated, support for these interfaces is the minimal requirement for an OLE control; however, in order to do any meaningful work, an OLE control also supports a number of other interfaces that provide features such as writing persistent data to disk, supporting automation (methods, events, and properties), and supporting a user interface for the control.

<P>The following table describes the interfaces that can be supported by an OLE control.
<TABLE>
<TR><TD><B>Interface</B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IOleObject</A>
</TD><TD>Supports communication between container and the control.
</TD></TR>
<TR><TD><object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IOleInPlaceObject</A>
</TD><TD>Supports in-place activation.
</TD></TR>
<TR><TD><B>IOleControl</B>
</TD><TD>Supports mnemonics and ambient properties.
</TD></TR>
<TR><TD><object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IDataObject</A>
</TD><TD>Supports data transfer (emulates DDE and the Windows&#174; clipboard).
</TD></TR>
<TR><TD><B>IViewObject2</B>
</TD><TD>Supports functions that a container uses to render the control.
</TD></TR>
<TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>
</TD><TD>Supports a control's methods and properties.
</TD></TR>
<TR><TD><object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IConnectionPointContainer</A>
</TD><TD>Supports a control's events or property-change notifications.
</TD></TR>
<TR><TD><B>IProvideClassInfo2</B>
</TD><TD>Supports functions that a container calls in order to obtain a pointer to the control's type information.
</TD></TR>
<TR><TD><B>ISpecifyPropertyPages</B>
</TD><TD>Supports functions that a container calls to determine the extent of a control's property-page support.
</TD></TR>
<TR><TD><B>IPerPropertyBrowsing</B>
</TD><TD>Supports functions that allow containers to retrieve individual control properties.
</TD></TR>
<TR><TD><B>IPersist*</B>
</TD><TD>Includes six interfaces that support functions that enable a control to read or write its persistent data to storage, stream, or file.
</TD></TR>
<TR><TD><B>IOleCache2</B>
</TD><TD>Supports the functions that a container calls in order to cache a control's data.
</TD></TR>
<TR><TD><B>IExternalConnection</B>
</TD><TD>Supports functions that a control uses to track external connections.
</TD></TR>
<TR><TD><B>IRunnableObject</B>
</TD><TD>Supports functions that a container uses to determine whether a control differentiates between a "loaded" and a "running" state.
</TD></TR>
</TABLE>

<P>As the previous list notes, the <B>IPersist*</B> interfaces support functions that allow a control to read or write its persistent data to storage, stream, or file. The following list identifies these interfaces and their purpose.

<TABLE>
<TR><TD><B>Interface
 </B></TD><TD><B>Purpose
</B></TD></TR><TR><TD><A HREF="../comobj/reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>
 </TD><TD>Saves and loads the control's data into a fixed-length sequential byte array (in memory).
</TD></TR><TR><TD><object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>IPersistStorage</A>
 </TD><TD>Saves and loads the control's data into an
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IStorage</A> instance. Controls that want to be marked "Insertable" as other compound document objects (for insertion into non-control-aware containers) <I>must</I> support this interface.
</TD></TR><TR><TD><A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>
 </TD><TD>Saves and loads the control's data as individual properties written to <A HREF="../comobj/reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A>, which the container implements. This is used for "Save As Text" functionality in some containers.
</TD></TR><TR><TD><object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_11.Click()>IPersistMoniker</A>
 </TD><TD>Saves and loads the control's data to a location named by a moniker. The control calls
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IMoniker::BindToStorage</A> to retrieve the storage interface it requires, such as
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IStorage</A>,
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IStream</A>, <B>ILockBytes</B>,
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IDataObject</A>, and so on.
</TD></TR></TABLE>

<P>For more information about any of these interfaces, refer to the OLE core documentation that ships with the Platform SDK.
<h3><A NAME="AX_desc">Description of an ActiveX Control</A></h3>

<P>An ActiveX control is an OLE control that supports several additional features. These features include:
<UL>
<LI>Initialization security
<LI>Scripting security
<LI>Run-time licensing
<LI>Reduced footprint (for quick downloading)
<LI>Digital certification
</UL>
<h4><A NAME="Initialization_secur">Initialization security</A></h4>

<P>When a control is initialized, it can receive data from an arbitrary <B>IPersist*</B> interface (from either a local or a remote URL) for initializing its state. This is a potential security hazard because the data could come from an untrusted source. Controls that guarantee no security breach regardless of the data source are considered safe for initialization. 

<P>There are two methods for indicating that your control is safe for initialization. The first method uses the Component Categories Manager to create the appropriate entries in the system registry. Internet Explorer examines the registry prior to loading your control to determine whether these entries appear. The second method implements an interface named <B>IObjectSafety</B> on your control. If Internet Explorer determines that your control supports <B>IObjectSafety</B>, it calls the <A HREF="safety/SetInterfaceSafetyOptions.htm#SetInterfaceSafetyOptions">IObjectSafety::SetInterfaceSafetyOptions</A> method prior to loading your control in order to determine whether your control is safe for initialization. 

<P>For more information about identifying a control as safe for initialization using the Component Categories Manager, see <A HREF="safety.htm#safe_cc">Using the Component Categories Manager</A>. For more information about identifying a control as safe for initialization using <B>IObjectSafety</B>, see <A HREF="safety.htm#iobjsafe">Supporting the IObjectSafety Interface</A>.

<h4><A NAME="Scripting_security">Scripting security</A></h4>

<P>Code signing can guarantee a user that code is trusted. However, allowing ActiveX Controls to be accessed from scripts raises several new security issues. Even if a control is known to be safe in the hands of a user, it is not necessarily safe when automated by an untrusted script. For example, Microsoft Word is a trusted tool from a reputable source, but a malicious script can use its automation model to delete files on the user's computer, install macro viruses, and worse.

<P>Just as there are two methods for indicating that your control is safe for initialization, so there are two methods for identifying a control as safe for scripting. The first method uses the Component Categories Manager to create the appropriate entries in the system registry (when your control is loaded). Internet Explorer 3.0 examines the registry prior to loading your control to determine whether these entries appear. The second method implements the <B>IObjectSafety</B> interface on your control. If Internet Explorer 3.0 determines that your control supports <B>IObjectSafety</B>, it calls the <A HREF="safety/SetInterfaceSafetyOptions.htm#SetInterfaceSafetyOptions">IObjectSafety::SetInterfaceSafetyOptions</A> method prior to loading your control in order to determine whether your control is safe for scripting.

<P>For more information about identifying a control as safe for scripting using the Component Categories Manager, see <A HREF="safety.htm#safe_cc">Using the Component Categories Manager</A>. For more information about identifying a control as safe for scripting using <B>IObjectSafety</B>, see <A HREF="safety.htm#iobjsafe">Supporting the IObjectSafety Interface</A>.

<h4><A NAME="Run_time_licensing">Run-time licensing</A></h4>

<P>Most Microsoft ActiveX Controls should support design-time licensing and run-time licensing. (The exception is the control 
that is distributed free of charge.) Design-time licensing ensures that a developer is building his or her application or Web page with a legally purchased control; run-time licensing ensures that a user is running an application or displaying a Web page that contains a legally purchased control.

<P>Design-time licensing is verified by control containers such as Microsoft Visual Basic, Microsoft Access, or Microsoft Visual InterDev. Before these containers allow a developer to place a control on a form or Web page, they first verify that the control is licensed by the developer or content creator. These containers verify that a control is licensed by calling certain functions in the control: If the license is verified, the developer can add it. 

<P>Run-time licensing is also an issue for these containers (which are sometimes bundled as part of the final application); the containers again call functions in the control to validate the license that was embedded at design time.

<P>Microsoft Internet Explorer 4.0 is another type of container. Like the other containers, Internet Explorer 4.0 also calls functions in the control to verify that it is licensed. However, unlike Visual Basic or Microsoft Access, which embed ActiveX Controls within the binary code of their application's executable files, Internet Explorer 4.0 uses a different model. This unique model is a necessary response due to:
<UL>
<LI>The openness of the browser (the ability to view the HTML source file).
<LI>Client/server issues imposed by the Internet (or corporate intranet). 
</UL>

<P>Because any Internet Explorer 4.0 user can view the HTML source code for a given Web page, and because an ActiveX control is copied to a user's computer before it is displayed, a level of indirection is required to "hide" the license for an ActiveX control from the user. This prevents an Internet Explorer 4.0 user from pirating and reusing a control that he or she has not purchased. Microsoft addresses these run-time licensing issues with a new file called the license package file (or LPK file). This file can be included in any HTML page by using the OBJECT tag. For more information about .lpk files, their use, and their format, refer to <A HREF="licensing.htm#LPKFILES">The License Package File</A>. 

<P>The functions that support run-time licensing are members of the <B>IClassFactory2</B> interface. Any ActiveX control that supports run-time licensing must support and implement this interface (an extension of the
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IClassFactory</A> interface). 

<P>For more detailed information about implementing run-time licensing for an ActiveX control, see <A HREF="licensing.htm#run_lic">Run-Time Licensing</A>.

<h4><A NAME="Reduced_footprint">Reduced footprint</A></h4>

<P> Microsoft supports a data-compression technology and associated toolset that you can use to package your ActiveX control for faster, more efficient downloading over the Internet or an intranet. (This same technology and toolset can be applied to Microsoft Win32&#174; applications, Java classes, and Java libraries.)

<P><B>Cabinet files</B>

<P>For a number of years, Microsoft used cabinet (.cab) files to compress software that was distributed on disks. Originally, these files were used to minimize the number of disks shipped with packaged product; today, .cab files are used to reduce the file size and the associated download time for Web content that is found on the Internet or corporate intranet servers. 

<P><B>The cabinet file format</B>

<P>The .cab file format is a nonproprietary compression format, also known as MSZIP, that is based on the Lempel-Ziv data-compression algorithm. (At a future date, other compression formats might also be supported.)

<P>For information about Cabarc.exe, the tool you can use to compress your ActiveX control, see <A HREF="packaging.htm#CABARC">Cabarc.exe</A>.

<P>For a description of the HTML tags required to access a control contained in a cabinet file, see <A HREF="packaging.htm#access">Accessing Controls Stored in Cabinet Files</A>.

<h4><A NAME="Digital_certificatio">Digital certification</A></h4>

<P>The default security level for Internet Explorer 4.0 is High. When a user runs at this level, any object identified by the OBJECT tag on an HTML page must be digitally signed. Digital signatures are created using the Authenticode&#153; technology that is included in the Internet Client SDK. A digital signature associates a software vendor's name and a unique public key with a file that contains an ActiveX object (ensuring some sort of accountability on the part of the object's developer).

<P>Before you purchase a certificate for your control's .cab file from a vendor, you can use the test certificate provided by Microsoft for verification purposes.

<P>For a description of how you can add a digital certificate to your control's .cab file, see <A HREF="authenticode.htm#ch_codesign">Signing Code with Microsoft Authenticode Technology</A>.

<h2><A NAME="Porting_the_Timer_Co">Porting the Timer Control</A></h2>

<P>The original OLE timer control was an ideal starting point for a digital clock example: existing code was already in place to handle the firing of an event at a user-specified interval. The remaining work required the addition of:
<UL>
<LI>Drawing code (which retrieves the current system time and then renders it within the control's real estate).
<LI>Stock properties (which let the user customize the appearance of the clock's output).
<LI>Custom properties (which let the user set the clock's alarm).
<LI>Support for safety (required by Internet Explorer).
<LI>Support for run-time licensing (required by Internet Explorer).
<LI>Packaging into a .cab file (required for efficient downloads).
</UL>

<P>The following sections describe how clock-like features were added to the timer control.
<h3><A NAME="Modifying_the_OnDraw">Modifying the OnDraw Function</A></h3>

<P>As noted earlier in the <A HREF="tutorial.htm#interface_desc">Description of an OLE Control</A> section, <B>IViewObject</B> is one of the interfaces commonly supported by an OLE control. This interface supports functions that a container calls to draw a control, to retrieve the logical palette used by a control, and to temporarily freeze the current view of the control.

<P>MFC wraps the <B>IViewObject</B> functions in the <B>COleControl</B> class. These functions are defined in the Ctlview.cpp file. The <B>COleControl::XViewObject::Draw</B> function contains most of the functionality typically found in an implementation of <B>IViewObject::Draw</B>; this functionality includes:
<UL>
<LI>Checking for optimized drawing.
<LI>Saving the DC state.
<LI>Switching to MM_TEXT mode.
<LI>Drawing the control.
</UL>

<P>To draw the control, <B>COleControl::XViewObject::Draw</B> calls the <B>COleControl::DrawContent</B> member function, which is found in Ctlcore.cpp. This function maps logical coordinates into device coordinates. Once the coordinates are converted, <B>COleControl::DrawContent</B> calls <B>COleControl::OnDraw</B> to actually render the control. <B>COleControl::OnDraw</B> must be overridden by the control developer in the source code, which is generated by the OLE Control wizard. The default version of <B>COleControl::OnDraw</B> simply draws an ellipse. The following excerpt shows the code provided by the OLE Control wizard.

<PRE>/////////////////////////////////////////////////////////////////////////////
// CTimeCtrl::OnDraw - Drawing function

void CTimeCtrl::OnDraw(
            CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
    // TODO: Replace the following code with your own drawing code.
    pdc-&gt;FillRect(rcBounds, CBrush::FromHandle((HBRUSH)GetStockObject(WHITE_BRUSH)));
    pdc-&gt;Ellipse(rcBounds);
}
</PRE>

<P>Most of the code required to convert the sample timer control into a digital clock is actually found in the <B>OnDraw</B> function. This includes code that:
<UL>
<LI>Sets the user's requested foreground color, background color, and font. 
<LI>Sets the background mode to transparent for drawing.
<LI>Paints the control's background using the background color.
<LI>Retrieves the current system time.
<LI>Compares the current time to the user's requested alarm time.
<LI>Sounds the alarm if necessary.
<LI>Packages the time for rendering.
<LI>Renders the string containing the time.
<LI>Reselects the original font and brush into the device context.
</UL>

<P>The entire <B>OnDraw</B> function from the Timectl.cpp file appears below.

<PRE>/////////////////////////////////////////////////////////////////////////////
// CTimeCtrl::OnDraw - Drawing function

void CTimeCtrl::OnDraw(
            CDC* pdc, const CRect&amp; rcBounds, const CRect&amp;)
{

    //Variables required for text output
    CFont* pOldFont;
    TEXTMETRIC tm;
    char tText[30];
    CString strTime;
    CRect rc = rcBounds;
    CBrush bkBrush(TranslateColor(GetBackColor()));

    //Variables required for alarm handler
    time_t aclock;     // Elapsed time in seconds since 00:00:00 on 1/1/1970
    struct tm *now;    // Time structure (contains useful time data)
    BOOL bTest;
    
    //Set the foreground color property and the transparent bk mode
    pdc-&gt;SetTextColor(TranslateColor(GetForeColor()));
    pdc-&gt;SetBkMode(TRANSPARENT);

    //Paint the background using the BackColor property
    pdc-&gt;FillRect(rcBounds, &amp;bkBrush);

    //Retrieve the time, check the alarm, package a string specifying the time
    time(&amp;aclock);    //Retrieve elapsed time in seconds
    now = localtime(&amp;aclock);    //Convert elapsed seconds to meaningful data 
    
    //Examine the alarm properties
    if ((now-&gt;tm_hour == m_alarmHour) &amp;&amp; (now-&gt;tm_min == m_alarmMinute)) 
        if (bAlarm == TRUE)
    {
        bTest = PlaySound((const char*)IDR_WAVE3, AfxGetResourceHandle(), SND_RESOURCE);
        bAlarm = FALSE;
    }

    //Package time for rendering
    sprintf(tText, "Current Time: %.8s\n", asctime(now)+11);
    strTime = tText;

    //Draw the time string
    pOldFont = SelectStockFont(pdc);
    pdc-&gt;GetTextMetrics(&amp;tm);
    pdc-&gt;SetTextAlign(TA_CENTER | TA_TOP);
    pdc-&gt;ExtTextOut((rc.left + rc.right) / 2, (rc.top + rc.bottom - tm.tmHeight) / 2, ETO_CLIPPED, rc, strTime, (strTime.GetLength())-1, NULL);

    //Reselect the old font and brush
    pdc-&gt;SelectObject(pOldFont);

}
</PRE>
<h3><A NAME="stock_prop">Adding Support for Color and Font Properties</A></h3>

<P>As noted in the previous section that describes the <B>OnDraw</B> function, the current time is rendered by using the background color, foreground color, and font properties that the user selected. These properties are three of the nine stock properties supported by the <B>COleControl</B> class. The following list identifies the nine supported stock properties:
<UL>
<LI>Appearance
<LI>BackColor
<LI>BorderStyle
<LI>Caption
<LI>Enabled
<LI>Font
<LI>ForeColor
<LI>hWnd
<LI>Text
</UL>

<P>Support for the three stock properties was added using the ClassWizard. For example, support for the background color property was added through the following steps when the control's project was open in Microsoft Visual C++:
<OL>
<LI>Select ClassWizard from the View menu.
<LI>Select the OLE Automation tab.
<LI>Select the control's class from the Class Name combo box.
<LI>Select the Add Property button.
<LI>Select the BackColor property in the External Name box.
<LI>Select the OK button to close the Add Property dialog box.
<LI>Select the OK button to confirm choices and close the ClassWizard.
</OL>

<P>When support for a stock property is added using the ClassWizard, the control's implementation file (Timectl.cpp in the case of the sample) and the control's object description (.odl) file (Timectl.odl) are updated. In the case of the sample control's implementation file, the following line was added to the control's dispatch map:

<PRE>DISP_STOCKPROP_BACKCOLOR()
</PRE>

<P>In the case of the sample control's object description file, the following line was added:

<PRE>[id(DISPID_BACKCOLOR), bindable, requestedit] OLE_COLOR BackColor;
</PRE>

<P>After support for the stock properties was added to the sample control, these properties were available for drawing operations. The background color was retrieved by calling the <B>GetBackColor</B> function and applying the result to a background brush variable (<B>bkBrush</B>) as follows:

<PRE>CBrush bkBrush(TranslateColor(GetBackColor()));
</PRE>
<h3><A NAME="Adding_Support_for_t">Adding Support for the Alarm (Properties and Resource)</A></h3>

<P>As noted in the <A HREF="tutorial.htm#stock_prop">Adding Support for Color and Font Properties</A> section, <B>COleControl</B> supports nine stock properties that are common to most ActiveX Controls. However, invariably a control requires custom properties such as the Alarm properties that are supported by the digital clock control. 

<P>There are four types of custom properties: member variables, member variables with notification, get/set methods, and parameterized. The sample digital-clock control supports three custom properties (each of which falls into the category of member variables with notification). These properties are the AlarmHour, AlarmMinute, and Interval. The AlarmHour property specifies the hour at which the alarm should trigger; the AlarmMinute property specifies the minute at which the alarm should trigger; and the Interval property specifies the interval (in milliseconds) for updating the clock that's displayed by the control. When the user resets any of these custom properties, a notification function is called to handle any work necessitated by those changes. 

<P>The MFC framework supports <B>COleControl::DoPropExchange</B> to load or store persistent data for a control. This function normally makes calls to the <B>PX_</B> family of functions to load or store specific user-defined properties. The sample control takes advantage of the MFC property-exchange functionality to save and load the custom interval and alarm properties.

<PRE>/////////////////////////////////////////////////////////////////////////////
// CTimeCtrl::DoPropExchange - Persistence support

void CTimeCtrl::DoPropExchange(CPropExchange* pPX)
{
    ExchangeVersion(pPX, MAKELONG(_wVerMinor, _wVerMajor));
    COleControl::DoPropExchange(pPX);

    long nInterval = m_interval;
    short sAlarmHr = m_alarmHour;
    short sAlarmMin = m_alarmMinute;

    PX_Long(pPX, _T("Interval"), m_interval, DEFAULT_INTERVAL);
    if (pPX-&gt;IsLoading())
    {
        if (nInterval != m_interval)
            OnIntervalChanged();
    }

    PX_Short(pPX, _T("AlarmHour"), m_alarmHour, DEFAULT_HOUR);
    if (pPX-&gt;IsLoading())
    {
        if (sAlarmHr != m_alarmHour)
            OnAlarmHourChanged();
    }

    PX_Short(pPX, _T("AlarmMinute"), m_alarmMinute, DEFAULT_MINUTE);
    if (pPX-&gt;IsLoading())
    {
        if (sAlarmMin != m_alarmMinute)
            OnAlarmMinuteChanged();
    }
}
</PRE>

<P>In the case of the AlarmHour property, when the <B>OnAlarmHourChanged</B> function is called, a global Boolean variable (<B>bAlarm</B>) is set to TRUE and the <B>COleControl::SetModifiedFlag</B> function is called to notify the container that the control's persistent state has changed.

<PRE>void CTimeCtrl::OnAlarmHourChanged() 
{
    bAlarm = TRUE;
    SetModifiedFlag(TRUE);
}
</PRE>

<P>The global variable (<B>bAlarm</B>) is examined within the <B>COleControl::OnDraw</B> function to ensure that the alarm should be triggered at the specified time.

<PRE>//Examine the alarm properties
    if ((now-&gt;tm_hour == m_alarmHour) &amp;&amp; (now-&gt;tm_min == m_alarmMinute)) 
        if (bAlarm == TRUE)
    {
        bTest = PlaySound((const char*)IDR_WAVE3, AfxGetResourceHandle(), SND_RESOURCE);
        bAlarm = FALSE;
    }
</PRE>

<P>As this code excerpt shows, the alarm sounds when the <B>PlaySound</B> function is called. This function takes three arguments: the first (IDR_WAVE3) is a resource identifier; the second is an instance handle for the control's resources; and the third is a flag specifying that the sound is a resource. 

<P>The current alarm sound (a ringing phone) was inserted into the sample control's DLL to ensure that the alarm would activate on any system that supported audio output. This .wav file was inserted using the Insert Resource dialog box.

<h3><A NAME="Adding_Support_for_S">Adding Support for Safety</A></h3>

<P>The sample control uses the Component Categories Manager to identify its safety features. For sample code demonstrating how this support was implemented, see <A HREF="safety.htm#safety_ex">Registering a Control as Safe</A>.

<h3><A NAME="Adding_Support_for_R">Adding Support for Run-Time Licensing</A></h3>

<P>The sample control supports run-time licensing for most containers through the <B>IClassFactory2</B> interface. However, when Internet Explorer is the container, it's also necessary to generate an .lpk file as part of the run-time licensing scheme. 

<P>For more information about run-time licensing and .lpk files, see <A HREF="licensing.htm#runie">Run-Time Licensing for Internet Explorer 4.0</A>. 

<P>For more information about using LPKTool.exe to create an .lpk file for a control, see <A HREF="licensing.htm#LPK_TOOL">Appendix A - Generating a License Package with LPK_TOOL</A>.

<h3><A NAME="Reducing_a_Control_s">Reducing a Control's Footprint</A></h3>

<P>The sample control was compressed using Cabarc.exe, a tool provided as part of the Internet Client SDK. For a description of this process, see <A HREF="packaging.htm#EXAMPLE">Packaging the Sample ActiveX Control</A>.

<h3><A NAME="Creating_a_Test_Cert">Creating a Test Certificate for an ActiveX Control</A></h3>

<P>For testing purposes, a digital certificate was added to the sample control's .cab file using several tools shipped with the Internet Client SDK. For a description of this process, see <A HREF="packaging.htm#cert">Signing the .cab File</A>.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

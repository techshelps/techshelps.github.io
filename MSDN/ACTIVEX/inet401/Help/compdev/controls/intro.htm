<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction to ActiveX Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Introduction to ActiveX Controls">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_intro_actx"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Introduction to ActiveX Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Introduction to ActiveX Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="controls.htm#bk_activex_controls">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="controls.htm">ActiveX Controls</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="buildax.htm">Building ActiveX Controls for Internet Explorer 4.0</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Introduction to ActiveX Controls</h1>

<P>The purpose of this topic is to provide guidelines for implementing ActiveX&#153; Controls that interoperate well with containers and other controls. This document defines the minimum set of interfaces, methods, and features that are required of ActiveX Controls to accomplish seamless and useful interoperability.


<P><A CLASS=tctop HREF="intro.htm#Overview"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Overview</A><BR>

<P><A CLASS=tctop HREF="intro.htm#ActiveX_Controls"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">ActiveX Controls</A><BR>

<P><A CLASS=tctop HREF="intro.htm#general_guidelines"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">General Guidelines</A><BR>
<!--************************************************************--><h2><A NAME="Overview">Overview</A></h2>

<P>An ActiveX control is essentially a simple OLE object that supports the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IUnknown</A> interface. It usually supports many more interfaces in order to offer functionality, but all additional interfaces can be viewed as optional and, as such, a container should not rely on any additional interfaces being supported. By not specifying additional interfaces that a control must support, a control can efficiently target a particular area of functionality without having to support particular interfaces to qualify as a control. As always with OLE, whether in a control or a container, it should never be assumed that an interface is available, and standard return-checking conventions should always be followed. It is important for a control or container to degrade gracefully and offer alternative functionality if a required interface is not available.

<P>It is important for controls that require optional features, or features specific to a certain container, to be clearly packaged and marketed with those requirements. Similarly, containers that offer certain features or component categories must be marketed and packaged as offering those levels of support when hosting ActiveX Controls. It is recommended that controls target and test with as many containers as possible, and degrade gracefully to offer less or alternative functionality if interfaces or methods are not available. In a situation where a control cannot perform its designated job function without the support of a component category, that category should be entered as a requirement in the registry to prevent the control being inserted in an inappropriate container.

<P>These guidelines define those interfaces and methods that a control can expect a container to support, although as always a control should check the return values when using
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>QueryInterface</A> or other methods to obtain pointers to these interfaces. A container should not expect a control to support anything more than the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IUnknown</A> interface. These guidelines identify what interfaces a control can support and what the presence of a particular interface means.

<h3><A NAME="Why_Are_ActiveX_Cont">Why Are ActiveX Controls Important?</A></h3>

<P>ActiveX Controls have become the primary architecture for developing programmable software components for use in a variety of different containers, ranging from software development tools to end-user productivity tools. For a control to operate well in a variety of containers, the control must be able to assume some minimum level of functionality that it can rely on in all containers. 

<P>By following these guidelines, control developers make their controls more reliable and interoperable, and, ultimately, better and more usable components for building component-based solutions.

<P>This document provides guidelines toward good interoperability. It is expected that new interfaces and component categories will develop over time; future versions of this document reflecting these changes will be made readily available through Microsoft. It is important to note that this document does not cover detailed semantics of the OLE interfaces; this is covered by the SDK documentation. 

<h3><A NAME="What_If_an_Interface">What If an Interface You Need Is Not Available?</A></h3>

<P>This section states some fundamental rules that apply to all OLE programming. OLE programs should use
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>QueryInterface</A> to acquire interface pointers, and must check the return value. OLE applications cannot safely assume that <B>QueryInterface</B> will succeed. This requirement applies to all OLE applications. If the requested interface is not available (that is, <B>QueryInterface</B> returns E_NOINTERFACE), the control or container must degrade gracefully, even if that means it cannot perform its designated job function.

<h3><A NAME="What_s_New_">What's New?</A></h3>

<P>This release of the guidelines embraces the concept of component categories, which are a part of the OLE specification. In previous versions of this document, component categories were loosely referred to as "function groups" and were used to identify areas of functionality that a container can optionally support. For this version there has been a definition of how component categories work for ActiveX Controls, and some fundamental categories are identified. The use of component categories allows the relaxing of some of the previous rules that identified interfaces as being mandatory, and allows greater flexibility for controls to efficiently target certain areas of functionality without having to provide superfluous additional support in order to qualify as a control. This edition of the guidelines also discusses what the presence or absence of an interface means and what to do in that situation.

<P>The remainder of this document is divided into four sections. The first discusses guidelines for implementing controls, the second discusses guidelines for implementing containers, the third discusses component categories, and the fourth discusses general guidelines, relevant to both control and container developers.

<h2><A NAME="ActiveX_Controls">ActiveX Controls</A></h2>

<P>An ActiveX control is really just another term for "OLE Object" or, more specifically, "COM Object." In other words, a control, at the very least, is some COM object that supports the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IUnknown</A> interface and is also self-registering. Through
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IUnknown::QueryInterface</A> a container can manage the lifetime of the control, as well as dynamically discover the full extent of a control's functionality based on the available interfaces. This allows a control to implement as little functionality as it needs to, instead of supporting a large number of interfaces that actually don't do anything. In short, this minimal requirement for nothing more than <B>IUnknown</B> allows any control to be as lightweight as it can. 

<P>Other than
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>IUnknown</A> and self-registration, there are no other <I>requirements</I> for a control. There are, however, conventions that should be followed about what the support of an interface means in terms of functionality provided to the container by the control. This section describes what it means for a control to actually support an interface, as well as methods, properties, and events that a control should provide as a baseline if it has occasion to support methods, properties, and events.

<h3><A NAME="Self_Registration">Self-Registration</A></h3>

<P>ActiveX Controls must support self-registration by implementing the <B>DllRegisterServer</B> and <B>DllUnregisterServer</B> functions. ActiveX Controls must register all the standard registry entries for embeddable objects and automation servers. 

<P>ActiveX Controls must use the Component Categories API to register themselves as a control and register the component categories that they require a host to support, and any categories that the control implements. In addition, an ActiveX control might want to register the "control" keyword in order to allow older containers, such as Visual Basic&#174; 4, to host them.

<P>ActiveX Controls should also register the ToolBoxBitmap32 registry key, although this is not mandatory.

<P>The Insertable component category should only be registered if the control is suitable for use as a compound document object. It is important to note that a compound document object must support certain interfaces beyond the minimum
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IUnknown</A> required for an ActiveX control. Although an ActiveX control might qualify as a compound document object, the control's documentation should clearly state what behavior to expect under these circumstances.


<h3><A NAME="ctl_interface">What Support for an Interface Means</A></h3>

<P>In addition to the
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IUnknown</A> interface, an ActiveX control&#151;or COM Object for that matter&#151;expresses whatever optional functionality it supports through additional interfaces. This is to say that no other interfaces are required above <B>IUnknown</B>. To that end, the following table lists the interfaces that an ActiveX control might support, and what it means to support that interface. Further details about the methods of these interfaces are given in a later section.

<TABLE>
<TR><TD><B>Interface
 </B></TD><TD><B>Comments/What it means to support the interface
</B></TD></TR><TR><TD><object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IOleObject</A>
 </TD><TD>If the control requires communication with its client site for anything other than events (see
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IConnectionPointContainer</A>),
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IOleObject</A> is a necessity. When implementing this interface, the control must also support the semantics of the following methods: <B>SetHostNames</B>, <B>Close</B>, <B>EnumVerbs</B>, <B>Update</B>, <B>IsUpToDate</B>, <B>GetUserClassID</B>, <B>GetUserType</B>, <B>GetMiscStatus</B>, and the <B>Advise</B>, <B>Unadvise</B>, and <B>EnumAdvise</B> methods that work in conjunction with a container's
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IAdviseSink</A> implementation. [<B>Note:</B> A control implementing <B>IOleObject</B> must be able to handle <B>IAdviseSink</B> if the container provides one; a container might not, in which case a control ensures, of course, that it does not attempt to call a nonexistent sink.]
</TD></TR><TR><TD><object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IOleInPlaceObject</A>
 </TD><TD>Expresses the control's ability to be in-place activated and possibly user-interface (UI) activated. This interface means that the control has a user interface of some kind that can be activated, and
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IOleInPlaceActiveObject</A> is supported as well. Required methods are <B>GetWindow</B>, <B>InPlaceActivate</B>, <B>UIDeactivate</B>, <B>SetObjectRects</B>, and <B>ReactivateAndUndo</B>. Support for this interface requires support for
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IOleObject</A>.
</TD></TR><TR><TD><object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>IOleInPlaceActiveObject</A>
 </TD><TD>An in-place capable object that supports
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IOleInPlaceObject</A> must also provide this interface as well, though the control itself doesn't necessarily implement the interface directly.
</TD></TR><TR><TD><B>IOleControl</B>
 </TD><TD>Expresses the control's ability and desire to deal with mnemonics (<B>GetControlInfo</B>, <B>OnMnemonic</B> methods); ambient properties (<B>OnAmbientPropertyChange</B>); and/or events that the control requires the container to handle (<B>FreezeEvents</B>). Note that mnemonics are different from accelerators that are handled through
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IOleInPlaceActiveObject</A>: mnemonics have an associated UI and are active even when the control is not UI active. A control's support for mnemonics means that the control also knows how to use the container's <B>IOleControlSite::OnControlInfoChanged</B> method. Because this requires the control to know the container's site, support for mnemonics also means support for
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IOleObject</A>. In addition, knowledge of mnemonics requires in-place support and thus
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>IOleInPlaceObject</A>.

<P>If a control uses any container-ambient properties, it must also implement this interface to receive change notifications, because following the semantics of changes is required. Because ambient properties are available only through the container site's <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>, ambient property support means that the control supports
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>IOleObject</A> (to get the site) as well as being able to generate
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>IDispatch::Invoke</A> calls.

<P>The <B>FreezeEvents</B> method is necessary for controls that must know when a container is <I>not</I> going to handle an event&#151;this is the only way for a control to know this condition. If <B>FreezeEvents</B> is only necessary in isolation, such that other <B>IOleControl</B> methods are not implemented, then <B>IOleControl</B> can stand alone without
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IOleObject</A> or
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>IOleInPlaceObject</A>.
</TD></TR><TR><TD><object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>IDataObject</A>
 </TD><TD>Indicates that the control can supply at least graphical renderings of the control (CF_METAFILEPICT is the minimum if the control has any visuals at all) and/or property sets, if the control has any properties to provide. The <B>GetData</B>, <B>QueryGetData</B>, <B>EnumFormatEtc</B>, <B>DAdvise</B>, <B>DUnadvise</B>, and <B>EnumDAdvise</B> methods are required. Support for graphical formats other than CF_METAFILEPICT is optional.
</TD></TR><TR><TD><B>IViewObject2</B>
 </TD><TD>Indicates that the control has some interesting visuals when it is not in-place active. If implemented, a control must support the <B>Draw</B>, <B>GetAdvise</B>, <B>SetAdvise</B>, and <B>GetExtent</B> methods.
</TD></TR><TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>
 </TD><TD>Indicates that the control has either custom methods or custom properties that are both available by late-binding through
<object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>IDispatch::Invoke</A>. This also requires that the control provides type information through other <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> methods. A control can support multiple <B>IDispatch</B> implementations where only one is associated with IID_IDispatch&#151;the others must have their own unique dispinterface identifiers.

<P>A control is encouraged to supply dual interfaces for custom method and property access, but this is optional if methods and properties exist.
</TD></TR><TR><TD><object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>IConnectionPointContainer</A>
 </TD><TD>Indicates that a control supports at least one "outgoing" interface, such as events or property change notifications. All methods of this interface must be implemented if this interface is available at all, including <B>EnumConnectionPoints</B>, which requires a separate object with <B>IEnumConnectionPoints</B>.

<P>Support for
<object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>IConnectionPointContainer</A> means that the object also supports one or more related objects with
<object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>IConnectionPoint</A> that are available through <B>IConnectionPointContainer</B> methods. Each "connection point" object itself must implement the full <B>IConnectionPoint</B> interface, including <B>EnumConnections</B>, which requires another enumerator object with the <B>IEnumConnections</B> interface.
</TD></TR><TR><TD><B>IProvideClassInfo[2]</B>
 </TD><TD>Indicates that the object can provide its own coclass type information directly through <B>IProvideClassInfo::GetClassInfo</B>. If the control supports the later variation, <B>IProvideClassInfo2</B>, it also indicates its ability to provide its primary source IID through <B>IProvideClassInfo2::GetGUID</B>. All methods of this interface must be implemented.
</TD></TR><TR><TD><B>ISpecifyPropertyPages</B>
 </TD><TD>Indicates that the control has property pages that it can display so that a container can coordinate this control's property pages with other controls' pages when property pages are to be shown for a multicontrol selection. All methods of this interface must be implemented when support exists.
</TD></TR><TR><TD><B>IPerPropertyBrowsing</B>
 </TD><TD>Indicates the control's ability to provide a display string for a property, provide predefined strings and values for its properties, and/or map a property DISPID to a specific property page. Support for this interface means that support for properties through <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> as above is provided. If mapping a property DISPID to a specific property page is supported, it also means that the object's property pages mapped through <B>IPerPropertyBrowsing::MapPropertyToPage</B> themselves implement <B>IPropertyPage2</B>, as opposed to the basic <B>IPropertyPage</B> interface.
</TD></TR><TR><TD><object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>IPersistStream</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>IPersistStreamInit</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><A HREF="../comobj/reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>IPersistStorage</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_36.Click()>IPersistMoniker</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>
 </TD><TD>See "Persistence Interfaces" section.
</TD></TR><TR><TD><B>IOleCache[2]</B>
 </TD><TD>Indicates support for container caching of control visuals. A control generally obtains caching support itself through the OLE <B>CreateDataCache</B> function. Only controls with meaningful static content should choose to do this (although it is not required). If a control supports caching at all, it should simply aggregate the data cache and expose both <B>IOleCache</B> and <B>IOleCache2</B> interfaces from the data cache. [<B>Note:</B> <B>IOleCacheControl</B> is only important if the control has an external out-of-process data source that itself implements
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>IDataObject</A> such that the control could directly connect the data source to the cache without any intervening layers. This is exceptionally rare.]
</TD></TR><TR><TD><B>IExternalConnection</B>
 </TD><TD>Indicates that the control supports external links to itself; that is, the control is not marked with OLEMISC_CANTLINKINSIDE and supports <B>IOleObject::SetMoniker</B> and <B>IOleObject::GetMoniker</B>. A container never queries for this interface itself nor calls it directly, because calls are generated from inside OLE's remoting layer.
</TD></TR><TR><TD><B>IRunnableObject</B>
 </TD><TD>Indicates that the control differentiates being "loaded" from being "running," as some in-process objects do.
</TD></TR></TABLE>
<h3><A NAME="Persistence_Interfac">Persistence Interfaces</A></h3>

<P>Objects that have a "persistent state" of any kind must implement at least one
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>IPersist*</A> interface, and preferably multiple interfaces, in order to provide the container with the most flexible choice of how it wants to save a control's state.

<P>If a control has <I>any persistent state whatsoever</I>, it must, as a minimum, implement either
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>IPersistStream</A> or
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>IPersistStreamInit</A> (the two are mutually exclusive and shouldn't be implemented together for the most part). The latter is used when a control wants to know when it is created new as opposed to reloaded from an existing persistent state (<B>IPersistStream</B> does not have the "created new" capability). The existence of either interface indicates that the control can save and load its persistent state into a stream, that is, an instance of
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>IStream</A>.

<P>Beyond these two stream-based interfaces, the
<object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_42.Click()>IPersist*</A> interfaces listed in the following table can be optionally provided in order to support persistence to locations other than an expandable
<object id="hhal_43" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_43.Click()>IStream</A>.



<TABLE>
<TR><TD><B>Interface
 </B></TD><TD><B>Usage
</B></TD></TR><TR><TD><A HREF="../comobj/reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>
 </TD><TD>The object can save and load its state into a fixed-length sequential byte array (in memory).
</TD></TR><TR><TD><object id="hhal_44" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_44.Click()>IPersistStorage</A>
 </TD><TD>The object can save and load its state into an
<object id="hhal_45" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_45.Click()>IStorage</A> instance. Controls that want to be marked "Insertable" as other compound document objects (for insertion into non-control-aware containers) <I>must</I> support this interface.
</TD></TR><TR><TD><A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>
 </TD><TD>The object can save and load its state as individual properties written to <A HREF="../comobj/reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A>, which the container implements. This is used for "save as text" functionality in some containers.
</TD></TR><TR><TD><object id="hhal_46" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_46.Click()>IPersistMoniker</A>
 </TD><TD>The object can save and load its state to a location named by a moniker. The control calls
<object id="hhal_47" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_47.Click()>IMoniker::BindToStorage</A> to retrieve the storage interface it requires, such as
<object id="hhal_48" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_48.Click()>IStorage</A>,
<object id="hhal_49" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_49.Click()>IStream</A>, <B>ILockBytes</B>,
<object id="hhal_50" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_50.Click()>IDataObject</A>, and so on.
</TD></TR></TABLE>

<P>While support for <A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> is optional, it is strongly recommended as an optimization for containers with "save as text" features, such as Visual Basic.

<P>With the exception of <B>IPersistStream[Init]::GetSizeMax</B> and <B>IPersistMemory::GetSizeMax</B>, all methods of each interface must be fully implemented.

<h3><A NAME="Optional_Methods">Optional Methods</A></h3>

<P>Implementing an interface doesn't necessarily mean implementing all methods of that interface to do anything more than return E_NOTIMPL or S_OK as appropriate. The following table identifies the methods of the interfaces that a control can implement in this manner. Check with the Platform SDK OLE Reference documentation for full syntax and valid return values from these methods. Any method not listed here must be fully implemented if the interface is supported.


<TABLE>
<TR><TD><B>Method
 </B></TD><TD><B>Comments

</B></TD></TR><TR><TD><B>IOleControl</B>
 </TD><TD></TD></TR><TR><TD><B>GetControlInfo</B>, <B>OnMnemonic</B>
 </TD><TD>Mandatory for controls with mnemonics.
</TD></TR><TR><TD><B>OnAmbientPropertyChange</B>
 </TD><TD>Mandatory for controls that use ambient properties.
</TD></TR><TR><TD><B>FreezeEvents</B>
 </TD><TD>See "Event Freezing" in the <A HREF="intro.htm#general_guidelines">General Guidelines</A> section.
</TD></TR><TR><TD><object id="hhal_51" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_51.Click()>IOleObject</A>
 </TD><TD></TD></TR><TR><TD><B>SetMoniker</B>
 </TD><TD>Mandatory if the control is not marked with OLEMISC_CANTLINKINSIDE.
</TD></TR><TR><TD><B>GetMoniker</B>
 </TD><TD>Mandatory if the control is not marked with OLEMISC_CANTLINKINSIDE.
</TD></TR><TR><TD><B>InitFromData</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>GetClipboardData</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>SetExtent</B>
 </TD><TD>Mandatory only for DVASPECT_CONTENT.
</TD></TR><TR><TD><B>GetExtent</B>
 </TD><TD>Mandatory only for DVASPECT_CONTENT.
</TD></TR><TR><TD><B>SetColorScheme</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>DoVerbs</B>
 </TD><TD>See Note 1.
</TD></TR><TR><TD><B>IoleInPlaceObject</B>
 </TD><TD></TD></TR><TR><TD><B>ContextSensitiveHelp</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>ReactivateAndUndo</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><object id="hhal_52" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_52.Click()>IOleInPlaceActiveObject</A>
 </TD><TD></TD></TR><TR><TD><B>ContextSensitiveHelp</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>IViewObject2</B>
 </TD><TD></TD></TR><TR><TD><B>Freeze</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>Unfreeze</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>GetColorSet</B>
 </TD><TD>Optional.
</TD></TR><TR><TD><B>IPersistStream[Init]</B>, <A HREF="../comobj/reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>
 </TD><TD></TD></TR><TR><TD><B>GetSizeMax</B>
 </TD><TD>See Note 2.
</TD></TR></TABLE>

<P>Notes:
<OL>
<LI>A control with property pages must support <B>IOleObject::DoVerbs</B> for the OLEIVERB_PROPERTIES and OLEIVERB_PRIMARY verbs. A control that can be active must support <B>IOleObject::DoVerbs</B> for the OLEIVERB_INPLACEACTIVATE verb. A control that can be UI active must also support <B>IOleObject::DoVerbs</B> for the OLEIVERB_UIACTIVATE verb.
<LI>If a control supports <B>IPersistStream[Init]</B> and can return an accurate value, it should do so.
</OL>
<h3><A NAME="Class_Factory_Option">Class Factory Options</A></h3>

<P>An ActiveX control, by virtue of being a COM object, must have associated server code that supports control creation through
<object id="hhal_53" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_53.Click()>IClassFactory</A> as a minimum.

<P>It is optional, not required, that this class object also supports <B>IClassFactory2</B> for licensing management. Only those vendors that are concerned about licensing need to support COM's licensing mechanism. In other words, because <B>IClassFactory2</B> is the only way to achieve COM-level licensing, this interface is required on the class object for those controls that want to be licensed.

<h3><A NAME="Properties">Properties</A></h3>

<P>Although most controls do have properties, controls are not required to expose any properties and thus the control does not require <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>. If the control does have properties, there are no requirements for which properties a control must expose.

<h3><A NAME="Methods__through_IDi">Methods (through IDispatch and Other Dispinterfaces)</A></h3>

<P>Although most controls do expose and support several methods, controls are not required to expose or support any methods; thus the control does not require <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>. If the control does have any methods, there are no requirements for which methods a control must expose.

<h3><A NAME="Events">Events</A></h3>

<P>Although most controls do expose and fire several events, controls are not required to expose or fire any events; thus the control does not require
<object id="hhal_54" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_54.Click()>IConnectionPointContainer</A>. If the control does have any events, there are no requirements for which events a control must expose. 

<h3><A NAME="Property_Pages">Property Pages</A></h3>

<P>Support for property pages and per-property browsing is strongly recommended, but not required. If a control does implement property pages, those pages should conform to one of the standard sizes: 250 x 62 or 250 x 110 dialog units (DLUs).

<h3><A NAME="Ambient_Properties">Ambient Properties</A></h3>

<P>If a control supports any ambient properties at all, it must at least respect the values of the following ambient properties under the conditions stated in the following table using the standard DISPIDs.

<TABLE>
<TR><TD><B>Ambient property</B></TD><TD><B>DISPID</B></TD><TD><B>Comment/Conditions for use
</B></TD></TR>
<TR><TD>LocaleID</TD><TD>-705</TD><TD>If locale is significant to the control, for example, for text output.
</TD></TR>
<TR><TD>UserMode </TD><TD>-709</TD><TD>If the control behaves differently in user (design) mode and run mode.
</TD></TR>
<TR><TD>UIDead</TD><TD>-710</TD><TD>If the control reacts to UI events, it should honor this ambient property.
</TD></TR>
<TR><TD>ShowGrabHandles</TD><TD>-711</TD><TD>If the control support in-place resizing of itself.
</TD></TR>
<TR><TD>ShowHatching</TD><TD>-712</TD><TD>If the control supports in-place activation and UI activation.
</TD></TR>
<TR><TD>DisplayAsDefault</TD><TD>-713</TD><TD>Only if the control is marked OLEMISC_ACTSLIKEBUTTON (which means that support for keyboard mnemonics is provided, thus <B>IOleControl::GetControlInfo</B> and <B>IOleControl::OnMnemonic</B> must be implemented).
</TD></TR>
</TABLE>

<P>As described previously, use of ambients requires both <B>IOleControl</B> (for <B>OnAmbientPropertyChange</B> as a minimum) as well as
<object id="hhal_55" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_55.Click()>IOleObject</A> (for <B>SetClientSite</B> and <B>GetClientSite</B>).

<P>The OLEMISC_SETCLIENTSITEFIRST bit might not necessarily be supported by a container. In these circumstances, a control must resort to default values for the ambient properties that it requires.

<h3><A NAME="contain_int">Using the Container's Functionality</A></h3>

<P>The previous sections have described some of the necessary caller-side support that an ActiveX control must have in order to access certain features of its container. The following table describes a control's usage of container-side interfaces and when such usage would occur.

<TABLE>
<TR><TD><B>Interface</B></TD><TD><B>Container object</B></TD><TD><B>Usage
</B></TD></TR>
<TR><TD><object id="hhal_56" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_56.Click()>IOleClientSite</A></TD><TD>Site</TD><TD>Controls that implement
<object id="hhal_57" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_57.Click()>IOleObject</A> call
<object id="hhal_58" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_58.Click()>IOleClientSite</A> methods as part of the standard OLE embedding protocol, specifically the methods <B>SaveObject</B>, <B>ShowObject</B>, <B>OnShowWindow</B> (only if a separate window activation state is supported), <B>RequestNewObjectLayout</B>, and <B>GetContainer</B> (if communication with other controls is desired). The <B>GetMoniker</B> method is only used when the control can be linked to externally, that is, the control is not marked with OLEMISC_CANTLINKINSIDE.
</TD></TR>
<TR><TD><object id="hhal_59" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_59.Click()>IOleInPlaceSite</A></TD><TD>Site</TD><TD>Controls that have an in-place activate and possibly a UI active state call
<object id="hhal_60" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_60.Click()>IOleInPlaceSite</A> methods (generally all of them, with the exception of <B>ContextSensitiveHelp</B>) as part of the standard OLE in-place activation protocol.
</TD></TR>
<TR><TD><object id="hhal_61" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_61.Click()>IAdviseSink</A></TD><TD>Site</TD><TD>Control calls <B>OnDataChange</B> if the control supports
<object id="hhal_62" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_62.Click()>IDataObject</A>, <B>OnViewChange</B> if the control supports <B>IViewObject2</B>, and <B>OnClose</B>, <B>OnSave</B>, and <B>OnRename</B> if the control supports
<object id="hhal_63" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_63.Click()>IOleObject</A>.
</TD></TR>
<TR><TD><B>IOleControlSite</B></TD><TD>Site</TD><TD>If supported, control calls <B>OnControlInfoChanged</B> when mnemonics change, <B>LockInPlaceActive</B> and <B>TransformCoords</B> if events are fired (the latter method is only used if coordinates are passed as event arguments), <B>OnFocus</B> and <B>TranslateAccelerator</B> if the control has a UI active state, and <B>GetExtendedControl</B> if the control wants to look at extended-control (container-owned) properties.
</TD></TR>
<TR><TD><A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> (ambient properties)</TD><TD>Site</TD><TD>Used to access ambient properties.
</TD></TR>
<TR><TD><object id="hhal_64" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_64.Click()>IPropertyNotifySink</A></TD><TD>Varies</TD><TD>A control must generate <B>OnChanged</B> and <B>OnRequestEdit</B> for any control properties that are marked as <B>[bindable]</B> and <B>[request]</B>, respectively.
</TD></TR>
<TR><TD>Other event sink interfaces</TD><TD>Varies</TD><TD>A control that has outgoing interfaces other than
<object id="hhal_65" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_65.Click()>IPropertyNotifySink</A> will be handed other interface pointers of the correct IID to the control's <B>IConnectionPoint::Advise</B> implementations (which are usually found in subobjects of the control). A control always knows how to call its own event interfaces, since the control defines those interfaces.
</TD></TR>
<TR><TD><object id="hhal_66" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_66.Click()>IOleInPlaceFrame</A></TD><TD>Frame</TD><TD>Used when a control has an in-place UI active state that requires frame-level tools or menu items.
</TD></TR>
<TR><TD><object id="hhal_67" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_67.Click()>IOleInPlaceUIWindow</A></TD><TD>Document</TD><TD>Used only when a control has an in-place UI active state that requires document-level or pane-level UI tools. This is rare.
</TD></TR>
</TABLE>
<h2><A NAME="general_guidelines">General Guidelines</A></h2>

<P>This section describes various features, hints, and tips for ActiveX control developers to help ensure good interoperability between controls and containers.

<h3><A NAME="Overloading_IPropert">Overloading IPropertyNotifySink</A></h3>

<P>Many ActiveX control containers implement a modeless property browsing window. If a control's properties are altered through the control's property pages, the control's properties can get out of sync with the container's view of those properties (the control is always right, of course). To ensure that it always has the current values for a control's properties, an ActiveX control container can overload the
<object id="hhal_68" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_68.Click()>IPropertyNotifySink</A> interface (data binding) and also use it to be notified that a control property has changed. This technique is optional, and is not required of ActiveX control containers or ActiveX Controls.

<P><B>Note</B>  A control should use <B>IPropertyNotifySink::OnRequestEdit</B> only for data binding; it is free to use <B>OnChanged</B> for either or both purposes.<h3><A NAME="Container_Specific_P">Container-Specific Private Interfaces</A></h3>

<P>Some containers provide container-specific private interfaces for additional functionality or improved performance. Controls that rely on those container-specific interfaces should, if possible, work without those container-specific interfaces present so that the control functions in different containers. For example, Visual Basic implements private interfaces that provide string formatting functionality to controls. If a control makes use of the Visual Basic private formatting interfaces, it should be able to run with default formatting support if these interfaces are not available. If the control can function without the private interfaces, it should take appropriate action (such as warn the user of reduced functionality) but continue to work. If this is not an option, a component category should be registered as required to ensure that only containers supporting this functionality can host these controls. 
 
<h3><A NAME="thread">Multithreaded Issues</A></h3>

<P>Starting with Microsoft Windows&#174; 95 and Microsoft Windows NT&#174; 3.51, OLE provides support for multithreaded applications, allowing applications to make OLE calls from multiple threads. This multithreaded support is called the "apartment model"; it is important that all OLE components using multiple threads follow this model. The apartment model requires that interface pointers are marshaled (using <B>CoMarshallInterface</B> and <B>CoUnmarshalInterface</B>) when passed between threads. For more information about apartment model threading, refer to the Platform SDK documentation and the OLEAPT sample (in the Platform SDK).

<h3><A NAME="Event_Freezing">Event Freezing</A></h3>

<P>A container can notify a control that it is not ready to respond to events by calling <B>IOleControl::FreezeEvents</B>(TRUE). It can unfreeze the events by calling <B>IOleControl::FreezeEvents</B>(FALSE). When a container freezes events, it is freezing <I>event processing</I>, not <I>event receiving</I>; that is, a container can still receive events while events are frozen. If a container receives an event notification while its events are frozen, the container should ignore the event. No other action is appropriate.

<P>A control should take note of a container's call to <B>IOleControl::FreezeEvents</B>(TRUE) if it is important to the control that an event is not missed. While a container's event processing is frozen, a control should implement one of the following techniques:

<UL>
<LI>Fire the events in the full knowledge that the container will take no action.
<LI>Discard all events that the control would have fired.
<LI>Queue up all pending events and fire them after the container has called <B>IOleControl::FreezeEvents</B>(FALSE).
<LI>Queue up only relevant or important events and fire them after the container has called <B>IOleControl::FreezeEvents</B>(FALSE). 
</UL>

<P>Each technique is acceptable and appropriate in different circumstances. The control developer is responsible for determining and implementing the appropriate technique for the control's functionality.

<h3><A NAME="Container_Controls">Container Controls</A></h3>

<P>As described previously, container controls are ActiveX Controls that visually contain other controls. The ActiveX Controls architecture specifies the <B>ISimpleFrameSite</B> interface to enable container controls. Containers can also support container controls without supporting <B>ISimpleFrameSite</B>, although the behavior cannot be guaranteed. For this reason, a component category exists for <B>SimpleFrameSite</B> controls where the full functionality of this interface is required. 

<P>To support container controls without implementing <B>ISimpleFrameSite</B>, an ActiveX control container must:
<UL>
<LI>Activate all controls at all times.
<LI>Reparent the contained controls to the <B>hWnd</B> of the containing control.
<LI>Remain the parent of the container control.
</UL>
<h3><A NAME="WS_GROUP_and_WS_TABS">WS_GROUP and WS_TABSTOP Flags in Controls</A></h3>

<P>A control should not use the WS_GROUP and WS_TABSTOP flags internally; some containers rely on these flags to manage keyboard handling.

<h3><A NAME="Multiple_Controls_in">Multiple Controls in One DLL</A></h3>

<P>A single .ocx DLL can container any number of ActiveX Controls, thus simplifying the distribution and use of a set of related controls. 

<P>If you ship multiple controls in a single DLL, be sure to include the vendor name in <I>each</I> control name in the package. Including the vendors' names in each control name enables users to easily identify controls within a package. For example, if you ship a DLL that implements three controls, Con1, Con2, and Con3, the control names should be:

<PRE>&lt;Your company name&gt; Con1 Control
&lt;Your company name&gt; Con2 Control
&lt;Your company name&gt; Con3 Control
</PRE>
<h3><A NAME="IOleContainer__EnumO">IOleContainer::EnumObjects</A></h3>

<P>This method is used to enumerate over all the OLE objects contained in a document or form, returning an interface pointer for each OLE object. The container must return pointers to each OLE object that shares the same container. Nested forms or nested controls must also be enumerated. 

<P>Some containers implement "extender controls," which wrap non-ActiveX controls, and then return pointers to these extender controls as a form is enumerated. This behavior enables ActiveX Controls and ActiveX control containers to integrate well with non-ActiveX controls, and is thus recommended but not required.


<h3><A NAME="Enhanced_Metafiles">Enhanced Metafiles</A></h3>

<P>Not surprisingly, enhanced metafiles provide more functionality than standard metafiles; using enhanced metafiles generally simplifies rendering code. An enhanced metafile device context (DC) is used in exactly the same way as a standard metafile DC. Enhanced metafiles are not available in 16-bit OLE. OLE supports enhanced metafiles, and includes backward compatibility with standard metafiles and 16-bit applications. 

<P>A 32-bit ActiveX control container should use enhanced metafiles instead of standard metafiles.

<h3><A NAME="Licensing">Licensing</A></h3>

<P>In order to embed licensed controls successfully, ActiveX control containers must use <B>IClassFactory2</B> instead of
<object id="hhal_69" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_69.Click()>IClassFactory</A>. Several OLE creation and loading helper functions (for example, <B>OleLoad</B> and
<object id="hhal_70" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_70.Click()>CoCreateInstance</A>) explicitly call <B>IClassFactory</B> and not <B>IClassFactory2</B>, and therefore cannot be used to create or load licensed ActiveX Controls. ActiveX control containers should explicitly create and load ActiveX Controls using <B>IClassFactory2</B>. In the future, Microsoft will update these standard APIs to use both <B>IClassFactory</B> and <B>IClassFactory2</B>, as appropriate.

<h3><A NAME="Dual_Interfaces">Dual Interfaces</A></h3>

<P>OLE Automation enables an object to expose a set of methods in two ways: through the <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> interface, and through direct OLE Vtable binding. <B>IDispatch</B> is used by most tools available today, and offers support for late binding to properties and methods. Vtable binding offers much higher performance because this method is called directly instead of through
<object id="hhal_71" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_71.Click()>IDispatch::Invoke</A>. <B>IDispatch</B> offers late bound support, where direct Vtable binding offers a significant performance gain; both techniques are valuable and important in different scenarios. By labeling an interface as "dual" in the type library, an OLE Automation interface can be used through <B>IDispatch</B>, or it can be bound to directly. Containers can thus choose the most appropriate technique. Support for dual interfaces is strongly recommended for both controls and containers. 

<h3><A NAME="IPropertyBag_and_IPe">IPropertyBag and IPersistPropertyBag</A></h3>

<P><A HREF="../comobj/reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A> and <A HREF="../comobj/reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> optimize "save as text" mechanisms, and therefore are recommended for ActiveX control containers that implement a "save as text" mechanism. <B>IPropertyBag</B> is implemented by a container, and is roughly analogous to
<object id="hhal_72" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_72.Click()>IStream</A>. <B>IPersistPropertyBag</B> is implemented by controls, and is roughly analogous to
<object id="hhal_73" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_73.Click()>IPersistStream</A>. 
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

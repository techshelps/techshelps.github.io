<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Communicating Control &quot;Readiness&quot;</TITLE>

<META NAME=MS-HKWD CONTENT="Communicating Control "Readiness"">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="comobj_ctl_readiness"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Communicating Control &quot;Readiness&quot;"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Communicating Control &quot;Readiness&quot;"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_COM_Objects_for_the_Internet>
</object><A STYLE="color:black" HREF=JavaScript:hhal_3.Click()>Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="data_retrieval.htm">Cooperative and Asynchronous Data Retrieval</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="miscellaneous.htm">Other Considerations</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Communicating Control &quot;Readiness&quot;</h1>

<P>For all persistence interfaces other than
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_4.Click()>IPersistMoniker</A>, the authoring tool or container assumes that once
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IPersist*::Load</A> returns, the control has loaded all of its properties. However, controls that use data paths may not actually have all of their data at this time. That is, within <B>IPersistStreamInit::Load</B>, for instance, a control might load a data path property for an AVI file and begin an asynchronous retrieval of that AVI data before returning from <B>Load</B> as shown in an earlier section.

<P>When data is coming in asynchronously like this, the control may not necessarily be ready to handle all requests the container might make of it. Accordingly, the control may return E_PENDING from some interface member functions. The next section describes the use of E_PENDING.

<P>In addition, certain user-supplied code, in a container like Visual Basic for example, may want to take action on the current "readiness" state of a control, such as enabling or disabling one control based on the ability of another control to accept certain calls. The second section below describes a standard property,
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ReadyState_Property_5u25>
</object><A HREF=JavaScript:hhal_6.Click()>ReadyState</A>, that reflects this aspect of a control, and a standard event, <B>OnReadyStateChange</B>, that informs the container that the state has changed. Because the <B>ReadyState</B> property is primarily of interest to user-supplied code, this standard event is used instead of <B>IPropertyNotifySink::OnChanged</B> to make the event visible in programming tools, and to pass the new <B>ReadyState</B> value along with the event.


<h2><A NAME="Use_of_E_PENDING">Use of E_PENDING</A></h2>

<P>In the lifetime of any particular control that uses data paths, there are generally four (possibly five) distinct states of readiness that a control may have:

<TABLE>
<TR><TD><B>State
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD><B>Uninitialized</B>
 </TD><TD>The control is waiting to be initialized through.
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IPersist*::Load</A>.
</TD></TR><TR><TD><B>Loading</B>
 </TD><TD>The control is initializing itself through one or more asynchronous properties. Some property values may not be available.
</TD></TR><TR><TD><B>Loaded/Can-Render</B>
 </TD><TD>The control has returned from
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IPersist*::Load</A> so that all its properties are available and it has started any asynchronous data transfers. The control's properties are available and it is ready to draw at least something through <B>IViewObject2::Draw</B>. Making properties available doesn't necessarily require the control's type information.
</TD></TR><TR><TD><B>Interactive</B>
 </TD><TD>The control is capable of interacting with the user in at least some limited sense and can supply its type information. Full interaction may not be available until all asynchronous data arrives.
</TD></TR><TR><TD><B>Complete</B>
 </TD><TD>The control is completely ready for all requests.
</TD></TR></TABLE>
<P>These states are listed in order of priority, which is to say that a control should strive to makes its properties and some basic rendering capabilities available as soon as it can (even if the rendering is to just draw a rectangle with text in it) before going on to become interactive and before being able to fulfill requests that depend on asynchronous data.

<P>From the point in time when a control is first instantiated, certain interface members may return E_PENDING to indicate that the control has not retrieved enough data yet to carry out the request (note that all interfaces must be available through
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>QueryInterface</A> although none of their members may do anything yet). To understand the implications, it is useful to step through the moments in time during the loading of a document and the creation and initialization of the controls in that document.

<OL>
<LI>(<B>NonExistent!):</B> The container has loaded the document but has not yet instantiated any control. At this point, the container can display the document with nothing but rectangle placeholders for each visible control. That is, because no controls are yet loaded, the container cannot call <B>IViewObject2::Draw</B> for any of them, and must rely on cached information (extent, label, and so on) to render anything for a control.
<LI><B>Unintiailized:</B> The container has loaded a control, but the control is completely uninitialized&#151;that is, the container has not yet called
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IPersist*::Load</A>. The control must be loaded first before the container can expect to call any other interface member. If the container wishes to draw an image for the control, it must do so itself using any cached information (like a caption string).
<LI><B>Loading:</B> A control has returned from
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IPersist*::Load</A> and is making properties available as they arrive. The control must be capable of rendering something minimal (like a rectangle and text) through <B>IViewObject2::Draw</B> and should give priority to retrieving its <B>Caption</B> and <B>Text</B> properties first, followed by rendering-related properties (<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Command_Identifiers>
</object><A HREF=JavaScript:hhal_12.Click()>BackColor</A>,
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Command_Identifiers>
</object><A HREF=JavaScript:hhal_13.Click()>ForeColor</A>, <B>DrawStyle</B>, and so on)
<LI><B>Loaded/Can-Render:</B> The control has returned from a call to
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IPersist*::Load</A> so that it has loaded its properties (or a control that was Loading has now retrieved all its immediate properties). At this point, the control must be prepared to at least render something minimal (like a rectangle and text) through <B>IViewObject2::Draw</B>. In simple cases, like a button, the control will already have all its data necessary for rendering such as colors, text, font, and styles.
<LI><B>Interactive:</B> The control has enough information to be mostly interactive: it can be in-place activated (and perform layout negotiation), handle all property operations, accept user input, and so on. The control also has its type information available. In addition, progressively higher detailed renderings (or other streamed data) may be coming into the control at this point so that the control sends
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IAdviseSink::OnViewChange</A> notifications to tell the container that the control should be redrawn (that is, if the control doesn't have a window; if it has a window, it just redraws when it wants to).
<LI><B>Complete:</B> The control has loaded all of its data including that obtained through paths so that it can do more sophisticated renderings using possibly medium- and high-detail graphics.
</OL>

<P>During each state other than <B>Complete</B>, various interface member functions may not be operative; that is, they will return E_PENDING, and certain properties may not be available. The following table describes which interfaces and methods must be ready in each of these states, if the control supports those interfaces at all.

<TABLE>
<TR><TD><B>State
 </B></TD><TD><B>Required Interfaces/Members/Properties
</B></TD></TR><TR><TD><B>Uninitialized</B>
 </TD><TD><object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IPersist*::Load</A> and
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IPersist*::InitNew</A>
</TD></TR><TR><TD><B>Loading</B>
 </TD><TD><B>IViewObject2::Draw</B>, <B>Idispatch::Invoke</B> for some properties.
</TD></TR><TR><TD><B>Loaded/Can-Render</B>
 </TD><TD>All of <B>IviewObject2</B>, <B>Idispatch::Invoke</B> for all properties that don't depend on extra data.
</TD></TR><TR><TD><B>Interactive</B>
 </TD><TD>All of <B>Idispatch</B> (methods and type information), all of <B>IRunnableObject</B>,
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IOleObject</A>,
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>IOleInPlaceObject</A> (and
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IOleInPlaceActiveObject</A>), <B>IProvideClassInfo2</B>, <B>IspecifyPropertyPages</B>,
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IDataObject</A>, <B>IOleControl</B>, <B>IconnectionPointContainer</B>, and
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IConnectionPoint</A>, with the exception of any operation that depends on asynchronous data that is not yet available, such as
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>IDataObject::GetData</A> for certain formats.
</TD></TR><TR><TD><B>Complete</B>
 </TD><TD>Everything is ready including other members of rest of
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>IPersist*</A>.
</TD></TR></TABLE>

<P>Obviously, this puts a some burden on a control, which needs to maintain one or more "readiness" flags that are checked on entry to various interface members so that the function returns E_PENDING if the flag says "not ready." The more distinct states the control chooses to support, the more complex this will become internally; however, the container doesn't need to differentiate these states: it simply handles E_PENDING by providing some default action of its own where appropriate, then trying the operation again later.

<P>In other words, these states are not something that the container has to internally maintain&#151;they are simply a guide to how a control implementation should be structured to work best in the Internet environment.

<P>Many controls will never have occasion to differentiate between <B>Loaded</B> and <B>Interactive</B> because nearly all simple controls have data dependencies for becoming interactive. The differentiation between the states is made here because some controls with data paths may not be ready for <B>Interactive</B> until at least some data is received asynchronously. Nevertheless, a control should attempt to become interactive as soon as possible.


<h2><A NAME="The_OnReadyStateChan">The OnReadyStateChange Event and ReadyState Property</A></h2>

<P>How does a container know when any given control is ready to render itself, can be interactive with the user, or has completely retrieved all its necessary data for full operation? That is, how does a container know the "readiness" state of a control?

<P>A simple scenario demonstrates the need for the container to have such knowledge. Imagine that you have a form on which there is a video control and a "Play" button that calls the <B>Play</B> method in the video control. The video control has a <B>VideoPath</B> property set to some URL. When this form is first opened, the video control will not have any data that it will play, so the container will want to disable the "Play" button immediately. When the video control is asked to load itself, it will load its embedded and begin an asynchronous transfer of its AVI file. When the transfer is complete, the container will want to enable the Play button.

<P>More precisely, user code will pick up some event from the video control and use that event to enable the button (the container would not generally be hardcoded to do this). In addition, user code outside of a change event may need to know the current readiness state of a control.

<P>For the purposes described here, readiness is defined as one of the following values, each of which corresponds to one of the states described in the previous section:

<PRE>
enum
    {
    READYSTATE_UNINITIALIZED=0, //Never used except as default initialization. state
    READYSTATE_LOADING=1,       //Control is currently loading its properties
    READYSTATE_LOADED=2,        //Control has been initialized via IPersist*::Load.
    READYSTATE_INTERACTIVE=3,   //Control is interactive but not all data is available.
    READYSTATE_COMPLETE=4       //Control has all its data.
    }
</PRE>

<P>Again, the "loading" state is only used for controls that are initializing themselves asynchronously through <B>IPeristMoniker::Load</B>. Otherwise, controls begin with READYSTATE_LOADED.

<P>A control makes its current state available through the standard
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ReadyState_Property_5u25>
</object><A HREF=JavaScript:hhal_25.Click()>ReadyState</A> property (DISPID_READYSTATE, of type <I>long</I>). Until a control is initialized with
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IPersist*::Load</A>, the value of this property is undefined (and unavailable, because the control is not ready at all). When a control has loaded its properties, the property must be at least READYSTATE_LOADED. In many cases, the control will not differentiate between loaded and interactive; in that case, the control is interactive immediately and this property reflects at least READYSTATE_INTERACTIVE. In addition, some controls do not differentiate between "loaded" and any other state (such as buttons that load all their properties and have no external data to retrieve); in that case, the property should always be READYSTATE_COMPLETE. A control need not support the <B>ReadyState</B> property at all; in that case, the container always assumes READYSTATE_COMPLETE.

<P>When a control differentiates at least two of these states, it must notify the container of the state transition with the standard control event called <B>OnReadyStateChange</B> (DISPID_ONREADYSTATECHANGE), which has the following prototype:

<PRE>
[id(DISPID_ONREADYCHANGE)]
        void OnReadyStateChange(long lReadyState);
</PRE>

<P>The state flag passed with this event is one of the READYSTATE_* flags shown above. The general meaning of these states was described in the last section, but to make use of the event, the programmer must understand&#151;from the control's documentation&#151;what methods and properties or other features of the control are available in any given state. In our example, the video control might not say it's "interactive" until it has at least some of its data, and its definition of "complete" might mean that it's ready to play. On the other hand, a graphical hyperlink control might describe itself as "interactive" as soon as it's loaded, because it can receive user input and then only send the "complete" state when it has actually retrieved all of its graphics.

<P>Because this event is designed for use in user code, the programmer is responsible for understanding what each particular state means for whatever control might be sending it. In the video example, the programmer has read that the video's <B>Play</B> method is not available until the ready state is "complete"; in that case, the Visual Basic code enables the "Play" button on READYSTATE_COMPLETE only:

<PRE>
Private Sub video1.OnReadyStateChange(ReadyState as Long)

    if ReadyState=READYSTATE_COMPLETE
        buttonPlay.Enabled=TRUE

End Sub
</PRE>

<P>Controls that do not differentiate between all the states can simply choose to send only the appropriate ones, such as READYSTATE_COMPLETE, if the control is completely ready as soon as it's loaded. Sending "complete" implies that the control has already passed through "loaded" and "interactive." Sending "interactive" implies that "loaded" has already passed but "complete" has not been reached. Again, because user code is what's generally interested in this event, the programmer is assumed to understand any particular control's behavior with this event. User code should not depend on all three states being sent explicitly.

<P>Of course, any control that may not be ready to receive certain requests still has to protect itself in case a container makes some request that the control cannot yet fulfill. In that case the control returns E_PENDING from the interface member function.


<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

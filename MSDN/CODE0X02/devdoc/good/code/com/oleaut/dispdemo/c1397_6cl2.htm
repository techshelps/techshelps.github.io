<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1406"></a>WINMAIN.CPP</h2>
<pre><code>/***  <br>*dispdemo.c - IDespatch demo/sample client application. <br>* <br>*  This is a part of the Microsoft Source Code Samples. <br>* <br>*  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>* <br>*  This source code is only intended as a supplement to Microsoft Development <br>*  Tools and/or WinHelp documentation.  See these sources for detailed <br>*  information regarding the Microsoft samples programs. <br>* <br>*Purpose: <br>*  This module is the main entry point for the sample IDispatch client, <br>*  dispdemo.exe. <br>* <br>*  This program is intended to demonstrate a client invoking methods <br>*  and referencing properties on a remote object via the IDispatch <br>*  interface. <br>* <br>*  The bulk of the sample can be found in the file crempoly.cpp, which <br>*  implements CRemPoly, the remote polygon class. <br>* <br>*Implementation Notes: <br>* <br>*****************************************************************************/ <br> <br>#include "dispdemo.h" <br> <br>extern BOOL g_fTrace; <br> <br>BOOL InitApplication(HINSTANCE); <br>BOOL InitInstance(HINSTANCE, int); <br>BOOL FAR PASCAL About(HWND, unsigned, WORD, LONG); <br> <br>extern "C" { <br>int PASCAL WinMain(HINSTANCE, HINSTANCE, LPSTR, int); <br>LRESULT FAR PASCAL MainWndProc(HWND, UINT, WPARAM, LPARAM); <br>} <br> <br>HINSTANCE g_hInst; <br> <br>TCHAR g_szDispDemoWClass[] = TSTR("DispDemoWClass"); <br> <br>extern "C" int PASCAL <br>WinMain( <br>    HINSTANCE hinst, <br>    HINSTANCE hPrevInstance, <br>    LPSTR lpCmdLine, <br>    int nCmdShow) <br>{ <br>    MSG msg; <br> <br> <br>    (lpCmdLine); // UNUSED <br> <br>    if(!hPrevInstance) <br>      if(!InitApplication(hinst)) <br>return FALSE; <br> <br>    if(InitOle() != NOERROR) <br>      return FALSE; <br> <br>    if(!InitInstance(hinst, nCmdShow)) <br>      return FALSE; <br> <br>    while(GetMessage(&amp;msg, NULL, 0, 0)) { <br>      TranslateMessage(&amp;msg); <br>      DispatchMessage(&amp;msg); <br>    } <br> <br>    UninitOle(); <br> <br>    return msg.wParam; <br>} <br> <br> <br>BOOL <br>InitApplication(HINSTANCE hinst) <br>{ <br>    WNDCLASS  wc; <br> <br>    wc.style= NULL; <br>    wc.lpfnWndProc= MainWndProc; <br>    wc.cbClsExtra= 0; <br>    wc.cbWndExtra= 0; <br>    wc.hInstance= hinst; <br>    wc.hIcon= LoadIcon(hinst, TSTR("DISPDEMO")); <br>    wc.hCursor= LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground= (HBRUSH)GetStockObject(WHITE_BRUSH);  <br>    wc.lpszMenuName= TSTR("DispDemoMenu"); <br>    wc.lpszClassName= g_szDispDemoWClass; <br>    if(!RegisterClass(&amp;wc)) <br>      return FALSE; <br> <br>    return TRUE; <br>} <br> <br>#ifdef WIN32 <br>#define szAppTitle TSTR("IDispatch Demo App (32-bit)") <br>#else //WIN32 <br>#define szAppTitle TSTR("IDispatch Demo App") <br>#endif //WIN32 <br> <br>BOOL <br>InitInstance(HINSTANCE hinst, int nCmdShow) <br>{ <br>    HWND hWnd; <br> <br>    g_hInst = hinst; <br> <br>    hWnd = CreateWindow( <br>      g_szDispDemoWClass, <br>      szAppTitle, <br>      WS_OVERLAPPED|WS_CAPTION|WS_SYSMENU|WS_MINIMIZEBOX, <br>      CW_USEDEFAULT, CW_USEDEFAULT, 300, 100, <br>      NULL, NULL, hinst, NULL); <br> <br>    if(!hWnd) <br>      return FALSE; <br> <br>    ShowWindow(hWnd, nCmdShow); <br>    UpdateWindow(hWnd); <br> <br>    return TRUE; <br>} <br> <br> <br>BOOL FAR PASCAL <br>About(HWND hDlg, unsigned message, WORD wParam, LONG lParam) <br>{ <br>    switch(message){ <br>    case WM_INITDIALOG: <br>      return TRUE; <br> <br>    case WM_COMMAND: <br>      switch(wParam){ <br>      case IDOK: <br>      case IDCANCEL: <br>EndDialog(hDlg, TRUE); <br>return TRUE; <br>      } <br>      break; <br>    } <br>    return FALSE; <br>} <br> <br> <br>extern "C" LRESULT FAR PASCAL <br>MainWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>    HMENU hmenu; <br>static DLGPROC pfnAbout; <br> <br>    switch(message){ <br>    case WM_COMMAND: <br>      switch(wParam){ <br>      case IDM_TRACE: <br>/* enable/disable trace */ <br>g_fTrace = (g_fTrace) ? FALSE : TRUE; <br>hmenu = GetMenu(hwnd); <br>CheckMenuItem(hmenu, IDM_TRACE, g_fTrace ? MF_CHECKED : MF_UNCHECKED); <br>return 0; <br> <br>      case IDM_POLY: <br>DoPoly(CLSID_CPoly); <br>return 0; <br> <br>      case IDM_POLY2: <br>DoPoly(CLSID_CPoly2); <br>return 0; <br> <br>      case IDM_ABOUT: <br>pfnAbout = (DLGPROC)MakeProcInstance((FARPROC)About, g_hInst); <br>DialogBox(g_hInst, TSTR("AboutBox"), hwnd, pfnAbout); <br>FreeProcInstance(pfnAbout); <br>return 0; <br>      } <br>      break; <br> <br>    case WM_CLOSE: <br>      DestroyWindow(hwnd); <br>      return 0; <br> <br>    case WM_DESTROY: <br>      PostQuitMessage(0); <br>      return 0; <br>    } <br>    return DefWindowProc(hwnd, message, wParam, lParam); <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

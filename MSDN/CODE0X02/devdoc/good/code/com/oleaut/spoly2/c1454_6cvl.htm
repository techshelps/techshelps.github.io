<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPOLY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1461"></a>CPOLY.H</h2>
<pre><code>/***  <br>*cpoly.h <br>* <br>*  This is a part of the Microsoft Source Code Samples. <br>* <br>*  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>* <br>*  This source code is only intended as a supplement to Microsoft Development <br>*  Tools and/or WinHelp documentation.  See these sources for detailed <br>*  information regarding the Microsoft samples programs. <br>* <br>*Purpose: <br>*  Definition of the CPoly class. <br>* <br>*  The CPoly class defines a number of methods and exposes them for <br>*  external programmability via IDispatch, <br>* <br>*  methods: <br>*    DRAW- draw the polygon <br>*    RESET- delete all points from the polygon <br>* <br>*    ADDPOINT(X, Y)- add a point with coordinates (x,y) to the polygon <br>* <br>*    ENUMPOINTS- return a collection of the polygon's points <br>* <br>*    GETXORIGIN- get and set the X origin of the polygon <br>*    SETXORIGIN <br>* <br>*    GETYORIGIN- get and set the Y origin of the polygon <br>*    SETYORIGIN <br>* <br>*    GETWIDTH- get and set the line width of the polygon <br>*    SETWIDTH <br>* <br>*  UNDONE: update description <br>* <br>*Implementation Notes: <br>* <br>*****************************************************************************/ <br> <br> <br>#ifndefCLASS <br># ifdef__TURBOC__ <br>#  define CLASS class huge <br># else <br>#  define CLASS class FAR <br># endif <br>#endif <br> <br>class CPoint; <br> <br>CLASS CPoly : public IDispatch <br>{ <br>public: <br>    static CPoly FAR* Create(); <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(REFIID riid, void FAR* FAR* ppvObj); <br>    STDMETHOD_(unsigned long, AddRef)(void); <br>    STDMETHOD_(unsigned long, Release)(void); <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(unsigned int FAR* pcTypeInfo); <br> <br>    STDMETHOD(GetTypeInfo)( <br>      unsigned int iTypeInfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* ppTypeInfo); <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      unsigned int cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid); <br> <br>    STDMETHOD(Invoke)( <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      unsigned short wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      unsigned int FAR* puArgErr); <br> <br>    /* Introduced methods */ <br> <br>    virtual void  METHODCALLTYPE EXPORT Draw(void); <br>    virtual void  METHODCALLTYPE EXPORT Reset(void); <br> <br>    // add a point with the given 'x' and 'y' coordinates <br>    virtual HRESULT METHODCALLTYPE EXPORT AddPoint(short x, short y); <br> <br>    // return a collection of the polygon's points <br>    virtual IUnknown FAR* METHODCALLTYPE EXPORT EnumPoints(void); <br> <br>    // get/set the polygon's X origin property <br>    virtual short METHODCALLTYPE EXPORT GetXOrigin(void); <br>    virtual void  METHODCALLTYPE EXPORT SetXOrigin(short x); <br> <br>    // get/set the polygon's Y origin property <br>    virtual short METHODCALLTYPE EXPORT GetYOrigin(void); <br>    virtual void  METHODCALLTYPE EXPORT SetYOrigin(short y); <br> <br>    virtual short METHODCALLTYPE EXPORT GetWidth(void); <br>    virtual void  METHODCALLTYPE EXPORT SetWidth(short width); <br> <br>    virtual short METHODCALLTYPE EXPORT get_red(void); <br>    virtual void  METHODCALLTYPE EXPORT set_red(short red); <br> <br>    virtual short METHODCALLTYPE EXPORT get_green(void); <br>    virtual void  METHODCALLTYPE EXPORT set_green(short green); <br> <br>    virtual short METHODCALLTYPE EXPORT get_blue(void); <br>    virtual void  METHODCALLTYPE EXPORT set_blue(short blue); <br> <br>    // Debug method <br>    virtual void  METHODCALLTYPE EXPORT Dump(void); <br>    virtual void  METHODCALLTYPE EXPORT Quit(void); <br> <br>public:  <br> <br>    // Draw all polygons. <br>    static void PolyDraw(void); <br> <br>    // Release all polygons. <br>    static void PolyTerm(void); <br> <br>    // Dump all polygons to dbwin. <br>    static void PolyDump(void); <br> <br> <br>private: <br>    CPoly(); <br> <br>    short m_xorg; <br>    short m_yorg; <br>    short m_width; <br> <br>    short m_red; <br>    short m_green; <br>    short m_blue; <br> <br>    unsigned long m_refs; <br>    unsigned int m_cPoints; <br> <br>    ITypeInfo FAR* m_ptinfo; <br> <br>    POINTLINK FAR* m_ppointlink; <br>    POINTLINK FAR* m_ppointlinkLast; <br>}; <br> <br>// DISPIDs for the members and properties available via IDispatch. <br>// <br>enum IDMEMBER_CPOLY { <br>    IDMEMBER_CPOLY_DRAW = 1, <br>    IDMEMBER_CPOLY_RESET, <br>    IDMEMBER_CPOLY_ADDPOINT, <br>    IDMEMBER_CPOLY_ENUMPOINTS, <br>    IDMEMBER_CPOLY_GETXORIGIN, <br>    IDMEMBER_CPOLY_SETXORIGIN, <br>    IDMEMBER_CPOLY_GETYORIGIN, <br>    IDMEMBER_CPOLY_SETYORIGIN, <br>    IDMEMBER_CPOLY_GETWIDTH, <br>    IDMEMBER_CPOLY_SETWIDTH, <br>    IDMEMBER_CPOLY_GETRED, <br>    IDMEMBER_CPOLY_SETRED, <br>    IDMEMBER_CPOLY_GETGREEN, <br>    IDMEMBER_CPOLY_SETGREEN, <br>    IDMEMBER_CPOLY_GETBLUE, <br>    IDMEMBER_CPOLY_SETBLUE, <br>    IDMEMBER_CPOLY_DUMP, <br>    IDMEMBER_CPOLY_QUIT, <br>    IDMEMBER_CPOLY_MAX <br>}; <br> <br>// CPoly method indices <br>// <br>enum IMETH_CPOLY { <br>    IMETH_CPOLY_QUERYINTERFACE = 0, <br>    IMETH_CPOLY_ADDREF, <br>    IMETH_CPOLY_RELEASE, <br>    IMETH_CPOLY_GETTYPEINFOCOUNT, <br>    IMETH_CPOLY_GETTYPEINFO, <br>    IMETH_CPOLY_GETIDSOFNAMES, <br>    IMETH_CPOLY_INVOKE, <br>    IMETH_CPOLY_DRAW, <br>    IMETH_CPOLY_RESET, <br>    IMETH_CPOLY_ADDPOINT, <br>    IMETH_CPOLY_ENUMPOINTS, <br>    IMETH_CPOLY_GETXORIGIN, <br>    IMETH_CPOLY_SETXORIGIN, <br>    IMETH_CPOLY_GETYORIGIN, <br>    IMETH_CPOLY_SETYORIGIN, <br>    IMETH_CPOLY_GETWIDTH, <br>    IMETH_CPOLY_SETWIDTH, <br>    IMETH_CPOLY_GETRED, <br>    IMETH_CPOLY_SETRED, <br>    IMETH_CPOLY_GETGREEN, <br>    IMETH_CPOLY_SETGREEN, <br>    IMETH_CPOLY_GETBLUE, <br>    IMETH_CPOLY_SETBLUE, <br>    IMETH_CPOLY_DUMP, <br>    IMETH_CPOLY_QUIT, <br>    IMETH_CPOLY_MAX <br>}; <br> <br>// structure used to link together polygons <br>// <br>struct POLYLINK { <br>    POLYLINK FAR* next; <br>    CPoly FAR* ppoly; <br>}; <br> <br> <br>// The CPoly class factory <br>// <br>CLASS CPolyCF : public IClassFactory <br>{ <br>public: <br>    static IClassFactory FAR* Create(); <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(REFIID riid, void FAR* FAR* ppv); <br>    STDMETHOD_(unsigned long, AddRef)(void); <br>    STDMETHOD_(unsigned long, Release)(void); <br> <br>    /* IClassFactory methods */ <br>    STDMETHOD(CreateInstance)( <br>      IUnknown FAR* pUnkOuter, REFIID riid, void FAR* FAR* ppv); <br>#ifdef _MAC <br>    STDMETHOD(LockServer)(unsigned long fLock); <br>#else <br>    STDMETHOD(LockServer)(BOOL fLock); <br>#endif <br> <br>private: <br>    CPolyCF(); <br> <br>    unsigned long m_refs; <br>}; <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

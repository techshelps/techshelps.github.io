<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPOINT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1459"></a>CPOINT.H</h2>
<pre><code>/***  <br>*cpoint.h <br>* <br>*  This is a part of the Microsoft Source Code Samples. <br>* <br>*  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>* <br>*  This source code is only intended as a supplement to Microsoft Development <br>*  Tools and/or WinHelp documentation.  See these sources for detailed <br>*  information regarding the Microsoft samples programs. <br>* <br>*Purpose: <br>*  Definition of the CPoint class. <br>* <br>*  The CPoint object exposes two properties for programatic access <br>*  via the IDispatch interface. <br>* <br>*  properties: <br>*    X - the 'x' coordinate of the point <br>*    Y - the 'y' coordinate of the point <br>* <br>*Implementation Notes: <br>* <br>*****************************************************************************/ <br> <br>#ifndefCLASS <br>#ifdef__TURBOC__ <br>#define CLASS class huge <br>#else <br>#define CLASS class FAR <br>#endif <br>#endif <br> <br>class CPoly; <br> <br>CLASS CPoint : public IDispatch { <br>    friend class CPoly; <br> <br>public: <br>    static CPoint FAR* Create(); <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(REFIID riid, void FAR* FAR* ppvObj); <br>    STDMETHOD_(unsigned long, AddRef)(void); <br>    STDMETHOD_(unsigned long, Release)(void); <br> <br>    /* IDispatch methods */ <br>    STDMETHOD(GetTypeInfoCount)(unsigned int FAR* pcTypeInfo); <br> <br>    STDMETHOD(GetTypeInfo)( <br>      unsigned int iTypeInfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* ppTypeInfo); <br> <br>    STDMETHOD(GetIDsOfNames)( <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      unsigned int cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid); <br> <br>    STDMETHOD(Invoke)( <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      unsigned short wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      unsigned int FAR* pwArgErr); <br> <br>    /* Introduced methods */ <br> <br>    virtual short METHODCALLTYPE EXPORT GetX(void); <br>    virtual void  METHODCALLTYPE EXPORT SetX(short x); <br>    virtual short METHODCALLTYPE EXPORT GetY(void); <br>    virtual void  METHODCALLTYPE EXPORT SetY(short y); <br> <br>private: <br>    CPoint(); <br> <br>    unsigned long m_refs; <br> <br>    short m_x; <br>    short m_y; <br> <br>    ITypeInfo FAR* m_ptinfo; <br>}; <br> <br>// member DISPIDs <br>// <br>enum IDMEMBER_CPOINT { <br>    IDMEMBER_CPOINT_GETX = 1, <br>    IDMEMBER_CPOINT_SETX, <br>    IDMEMBER_CPOINT_GETY, <br>    IDMEMBER_CPOINT_SETY, <br>    IDMEMBER_CPOINT_MAX <br>}; <br> <br>// member indices - this is an enumeration of all members on CPoint <br>// <br>enum IMETH_CPOINT { <br>    IMETH_CPOINT_QUERYINTERFACE = 0, <br>    IMETH_CPOINT_ADDREF, <br>    IMETH_CPOINT_RELEASE, <br>    IMETH_CPOINT_GETTYPEINFOCOUNT, <br>    IMETH_CPOINT_GETTYPEINFO, <br>    IMETH_CPOINT_GETIDSOFNAMES, <br>    IMETH_CPOINT_INVOKE, <br> <br>    IMETH_CPOINT_GETX, <br>    IMETH_CPOINT_SETX, <br>    IMETH_CPOINT_GETY, <br>    IMETH_CPOINT_SETY <br>}; <br> <br>// structure used to link together lists of points <br>// <br>struct POINTLINK { <br>    POINTLINK FAR* next; <br>    CPoint FAR* ppoint; <br>}; <br> <br> <br>// The CPoint Class Factory <br>// <br>CLASS CPointCF : public IClassFactory <br>{ <br>public: <br>    static IClassFactory FAR* Create(); <br> <br>    /* IUnknown methods */ <br>    STDMETHOD(QueryInterface)(REFIID iid, void FAR* FAR* ppv); <br>    STDMETHOD_(unsigned long, AddRef)(void); <br>    STDMETHOD_(unsigned long, Release)(void); <br> <br>    /* IClassFactory methods */ <br>    STDMETHOD(CreateInstance)( <br>      IUnknown FAR* pUnkOuter, REFIID iid, void FAR* FAR* ppv); <br>#ifdef _MAC <br>    STDMETHOD(LockServer)(unsigned long fLock); <br>#else <br>    STDMETHOD(LockServer)(BOOL fLock); <br>#endif <br> <br>private: <br>    CPointCF(); <br> <br>    unsigned long m_refs; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

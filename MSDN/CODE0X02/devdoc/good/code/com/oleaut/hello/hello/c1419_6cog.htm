<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HELLO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1420"></a>HELLO.H</h2>
<pre><code>#ifdef WIN32 <br> <br>#ifdef UNICODE <br>    #define FROM_OLE_STRING(str) str <br>    #define TO_OLE_STRING(str) str  <br>#else <br>    #define FROM_OLE_STRING(str) ConvertToAnsi(str) <br>    char* ConvertToAnsi(OLECHAR FAR* szW);   <br>    #define TO_OLE_STRING(str) ConvertToUnicode(str) <br>    OLECHAR* ConvertToUnicode(char FAR* szA);    <br>    // Maximum length of string that can be converted between Ansi &amp; Unicode <br>    #define STRCONVERT_MAXLEN 300          <br>#endif <br> <br>#else  // WIN16 <br>  #define APIENTRY far pascal   <br>  #define TCHAR char <br>  #define TEXT(sz) sz  <br>  #define FROM_OLE_STRING(str) str   <br>  #define TO_OLE_STRING(str) str   <br>  #define LPTSTR LPSTR <br>   <br>  // Windows NT defines the following in windowsx.h <br>  #define GET_WM_COMMAND_ID(w,l) (w) <br>  #define GET_WM_COMMAND_CMD(w,l) HIWORD(l) <br>  #define GET_WM_COMMAND_HWND(w,l) LOWORD(l) <br>#endif <br> <br>#undef STRICT <br>#define STRICT <br> <br>// Resource IDs <br>#define IDD_MAINWINDOW   101  <br>#define IDI_ICON         102 <br> <br>// Child window IDs <br>#define IDC_HELLODISPLAY 101   <br>#define IDC_SAYHELLO     102 <br> <br>// MAX len of string table entries <br>#define STR_LEN   100 <br> <br>// String table constants <br>#define IDS_Name                 1   <br>#define IDS_HelloMessage         2      <br>#define IDS_ErrorLoadingTypeLib  3 <br>#define IDS_SayHello             4 <br>#define IDS_ProgID               5 <br>#define IDS_Unexpected           1001 <br> <br>// SCODEs for the Hello Application. This is required for vtable-binding <br>// Automation objects want to return custom HRESULTs. All the OLE-defined  <br>// FACILITY_ITF codes have a code value which lies in the region 0x0000-0x01FFF. <br>// While it is legal for the definer to use any code, it is highly recommended <br>// that only code values in the range 0x0200-0xFFFF be used, as this will reduce the <br>// possiblity of accidental confusion with any OLE-defined errors. <br>#define HELLO_E_FIRST       MAKE_SCODE(SEVERITY_ERROR, FACILITY_ITF, 0x0200)   <br> <br>#define HELLO_E_UNEXPECTED  (HELLO_E_FIRST + 0x0)  <br>// Unexpected error    <br> <br>// Number of SCODEs <br>#define SCODE_COUNT 1  <br> <br>// Function prototypes <br>int APIENTRY WinMain (HINSTANCE, HINSTANCE, LPSTR, int); <br>BOOL InitApplication (HINSTANCE); <br>BOOL InitInstance (HINSTANCE); <br>BOOL ProcessCmdLine(LPSTR lpCmdLine, LPDWORD pdwRegisterCF, LPDWORD pdwRegisterActiveObject, int nCmdShow); <br>void Uninitialize(DWORD dwRegisterCF, DWORD dwRegisterActiveObject);                  <br>HRESULT LoadTypeInfo(ITypeInfo FAR* FAR* pptinfo, REFCLSID clsid); <br>HRESULT RaiseException(int nID, REFGUID rguid); <br>#ifdef WIN16 <br>extern "C" LRESULT __export CALLBACK MainWndProc (HWND, UINT, WPARAM, LPARAM);   <br>#else  <br>extern "C" LRESULT CALLBACK MainWndProc (HWND, UINT, WPARAM, LPARAM);   <br>#endif  <br> <br>#include "tlb.h" <br> <br>// ISupportErrorInfo interface implementation <br>interface CSupportErrorInfo : public ISupportErrorInfo  <br>{ <br>public: <br>    // IUnknown methods  <br>    STDMETHOD(QueryInterface)(REFIID riid, LPVOID FAR* ppvObj); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void);  <br>     <br>    // ISupportErrorInfo method <br>    STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid);   <br>      <br>    CSupportErrorInfo(IUnknown FAR* punkObject, REFIID riid);  <br>private: <br>    LPUNKNOWN m_punkObject;  // IUnknown of Object that implements this interface  <br>    GUID m_iid; <br>};      <br> <br>class FAR CHello : public IHello <br>{ <br>public: <br>    // IUnknown methods  <br>    STDMETHOD(QueryInterface)(REFIID riid, LPVOID FAR* ppvObj); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void); <br>     <br>    // IDispatch methods  <br>    STDMETHOD(GetTypeInfoCount)(UINT FAR* pctinfo); <br>    STDMETHOD(GetTypeInfo)( <br>      UINT itinfo, <br>      LCID lcid, <br>      ITypeInfo FAR* FAR* pptinfo); <br>    STDMETHOD(GetIDsOfNames)( <br>      REFIID riid, <br>      OLECHAR FAR* FAR* rgszNames, <br>      UINT cNames, <br>      LCID lcid, <br>      DISPID FAR* rgdispid); <br>    STDMETHOD(Invoke)( <br>      DISPID dispidMember, <br>      REFIID riid, <br>      LCID lcid, <br>      WORD wFlags, <br>      DISPPARAMS FAR* pdispparams, <br>      VARIANT FAR* pvarResult, <br>      EXCEPINFO FAR* pexcepinfo, <br>      UINT FAR* puArgErr); <br>     <br>    // IHello methods    <br>    STDMETHOD(get_Application)(IHello FAR* FAR* ppHello); <br>    STDMETHOD(get_FullName)(BSTR FAR* pbstr); <br>    STDMETHOD(get_Name)(BSTR FAR* pbstr); <br>    STDMETHOD(get_Parent)(IHello FAR* FAR* ppHello); <br>    STDMETHOD(put_Visible)(VARIANT_BOOL bVisible); <br>    STDMETHOD(get_Visible)(VARIANT_BOOL FAR* pbool); <br>    STDMETHOD(Quit)(); <br>    STDMETHOD(put_HelloMessage)(BSTR bstrMessage); <br>    STDMETHOD(get_HelloMessage)(BSTR FAR* pbstrMessage); <br>    STDMETHOD(SayHello)();   <br>     <br>    // CHello methods    <br>    STDMETHOD_(void, ShowWindow)(int nCmdShow); <br>    static HRESULT Create(HINSTANCE hinst, LPTSTR lpszHelloMessage, CHello FAR* FAR* pphello); // Creates and intializes Hello object     <br>    CHello(); <br>    ~CHello(); <br> <br>public: <br>    HWND m_hwnd;                   // Application window.      <br>    HINSTANCE m_hinst;             // Hinstance of application.  <br>    BSTR m_bstrName;               // Name of application. <br>    BSTR m_bstrProgID;             // ProgID of application. <br>      <br>private: <br>    LPTYPEINFO m_ptinfo;           // Type information of Hello application interface. <br>    BSTR m_bstrHelloMsg;           // Hello message <br>    BSTR m_bstrFullName;           // Full name of application. <br>    BOOL m_bVisible;               // Is window visible? <br>    ULONG m_cRef;                  // Reference count    <br>    CSupportErrorInfo m_SupportErrorInfo; // ISupportErrorInfo interface implementation  <br>}; <br> <br>class FAR CHelloCF : public IClassFactory <br>{ <br>public: <br>    // IUnknown methods  <br>    STDMETHOD(QueryInterface)(REFIID riid, LPVOID FAR* ppvObj); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void);  <br>     <br>    // IClassFactory methods <br>    STDMETHOD(CreateInstance)(IUnknown FAR* punkOuter, REFIID riid,  <br>                              void FAR* FAR* ppv); <br>    STDMETHOD(LockServer)(BOOL fLock);     <br>     <br>    CHelloCF(); <br>     <br>private: <br>    ULONG m_cRef;                   // Reference count <br>}; <br> <br>extern CHello FAR* g_phello;      <br> <br> <br>      <br>                                              </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1396"></a>WINMAIN.CPP</h2>
<pre><code>/***  <br>*main.cpp <br>* <br>*  This is a part of the Microsoft Source Code Samples. <br>* <br>*  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>* <br>*  This source code is only intended as a supplement to Microsoft Development <br>*  Tools and/or WinHelp documentation.  See these sources for detailed <br>*  information regarding the Microsoft samples programs. <br>* <br>*Purpose: <br>*  This module is the main entry point of the sample IDispatch <br>*  calculator, dispcalc.exe <br>* <br>*  This program is intended to demonstrate an implementation of <br>*  the IDispatch interface. <br>* <br>*Implementation Notes: <br>* <br>*****************************************************************************/ <br> <br>#include "dispcalc.h" <br> <br>TCHAR g_szAppName[] = TSTR("DispCalc"); <br> <br>BOOL InitApplication(HINSTANCE); <br>BOOL InitInstance(HINSTANCE, int); <br> <br> <br>extern "C" { <br>long FAR PASCAL WndProc(HWND, UINT, WPARAM, LPARAM); <br>int PASCAL WinMain(HINSTANCE, HINSTANCE, LPSTR, int); <br>} <br> <br> <br>extern "C" int PASCAL <br>WinMain( <br>    HINSTANCE hinst, <br>    HINSTANCE hinstPrev, <br>    LPSTR lpCmdLine, <br>    int nCmdShow) <br>{ <br>    MSG msg; <br> <br>    if(!hinstPrev) <br>      if(!InitApplication(hinst)) <br>return FALSE; <br> <br>    if(InitOle() != NOERROR) <br>      return FALSE; <br> <br>    if(!InitInstance(hinst, nCmdShow)){ <br>      UninitOle(); <br>      return FALSE; <br>    } <br> <br>    while(GetMessage(&amp;msg, NULL, NULL, NULL)) { <br>      TranslateMessage(&amp;msg); <br>      DispatchMessage(&amp;msg); <br>    } <br> <br>    UninitOle(); <br> <br>    return msg.wParam; <br>} <br> <br> <br>BOOL <br>InitApplication(HINSTANCE hinst) <br>{ <br>    WNDCLASS  wc; <br> <br>    wc.style= CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc= WndProc; <br>    wc.cbClsExtra= 0; <br>    wc.cbWndExtra= DLGWINDOWEXTRA; <br>    wc.hInstance= hinst; <br>    wc.hIcon= LoadIcon(hinst, g_szAppName); <br>    wc.hCursor= LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground= (HBRUSH)(COLOR_APPWORKSPACE+1); <br>    wc.lpszMenuName= NULL; <br>    wc.lpszClassName= g_szAppName; <br> <br>    if(!RegisterClass(&amp;wc)) <br>      return FALSE; <br> <br>    return TRUE; <br>} <br> <br> <br>BOOL <br>InitInstance(HINSTANCE hinst, int nCmdShow) <br>{ <br>    g_pcalc-&gt;m_hwnd = CreateDialog(hinst, g_szAppName, 0, NULL); <br> <br>    ShowWindow(g_pcalc-&gt;m_hwnd, nCmdShow); <br> <br>    g_pcalc-&gt;m_arith.Display(); <br> <br>    return TRUE; <br>} <br> <br> <br>extern "C" long FAR PASCAL <br>WndProc( <br>    HWND hwnd, <br>    UINT message, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch(message){ <br>    case WM_COMMAND: <br>      switch(wParam){ <br>      case IDC_ZERO: <br>      case IDC_ONE: <br>      case IDC_TWO: <br>      case IDC_THREE: <br>      case IDC_FOUR: <br>      case IDC_FIVE: <br>      case IDC_SIX: <br>      case IDC_SEVEN: <br>      case IDC_EIGHT: <br>      case IDC_NINE: <br>      case IDC_PLUS: <br>      case IDC_MINUS: <br>      case IDC_MULT: <br>      case IDC_DIV: <br>      case IDC_CLEAR: <br>      case IDC_EQUALS: <br>g_pcalc-&gt;m_arith.ButtonPush(wParam); <br>return 0; <br>      } <br>      break; <br> <br>    case WM_DESTROY: <br>      PostQuitMessage(0); <br>      return 0; <br>    } <br>    return DefWindowProc(hwnd, message, wParam, lParam); <br>} <br> <br> <br>#if defined(WIN32) <br> <br>extern "C" char FAR* <br>ConvertStrWtoA(OLECHAR FAR* strIn, char FAR* buf, UINT size) <br>{ <br>  int badConversion = FALSE; <br>   <br>  WideCharToMultiByte(CP_ACP, NULL,  <br>              strIn, -1,  <br>      buf, size,  <br>      NULL, &amp;badConversion); <br>  return buf; <br>} <br> <br>extern "C" char FAR* <br>AnsiString(OLECHAR FAR* strIn) <br>{ <br>  static char buf[256]; <br>   <br>  return (ConvertStrWtoA(strIn, buf, 256)); <br>} <br> <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1375"></a>MAIN.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  main.cpp <br>** <br>**  new and delete operator redefinition to use memory manager of calling <br>**  task. <br>**  LibMain, WEP, DllGetClassObject, DllCanUnloadNow, DLL initialization. <br>**  Procedure to create standard dispatch implementation. <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include &lt;initguid.h&gt; <br>#include "browseh.h"           <br> <br>// Globals <br>HINSTANCE   g_hinst;                   // Instance of application <br>                                       //Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br> <br>// String resource buffers <br>TCHAR g_szServerName[STR_LEN]; <br> <br> <br>/* <br> * new <br> * <br> * Purpose: <br> *   Since this is an InProcServer object, the memory allocator used by  <br> *   the calling task must be used. <br> *   This is done by redefining the global new operator and using new  <br> *   for all memory allocations. <br> */ <br>void FAR* operator new(size_t size) <br>{ <br>    IMalloc FAR* pMalloc; <br>    LPVOID lpv; <br> <br>    if (CoGetMalloc(MEMCTX_TASK, &amp;pMalloc) == NOERROR) <br>    { <br>        lpv = pMalloc-&gt;Alloc(size); <br>        pMalloc-&gt;Release(); <br>        return lpv; <br>    } <br>    return NULL; <br>} <br> <br>/* <br> * delete <br> * <br> * Purpose: <br> *   Use the memory manager of the calling task to free memory. <br> */ <br>void operator delete(void FAR* lpv) <br>{ <br>    IMalloc FAR* pMalloc; <br> <br>    if (lpv == NULL) return; <br> <br>    if( CoGetMalloc(MEMCTX_TASK, &amp;pMalloc) == NOERROR)  <br>    { <br>        if (pMalloc-&gt;DidAlloc(lpv)) <br>            pMalloc-&gt;Free(lpv); <br>        pMalloc-&gt;Release(); <br>    } <br>} <br> <br> <br>#ifdef WIN16 <br>/* <br> * LibMain <br> * <br> * Purpose: <br> *  Called by Win16 on DLL load. Does any one-time initializations. <br> * <br> */ <br>int PASCAL LibMain (HINSTANCE hinst, WORD wDataSeg, WORD cbHeapSize, LPSTR lpCmdLine) <br>{ <br>   if (cbHeapSize != 0) <br>       UnlockData(0); <br>    <br>   g_hinst = hinst;     <br> <br>   if (!InitDLL(hinst)) <br>         return FALSE; <br> <br>   return TRUE; <br>} <br> <br>/* <br> * WEP <br> * <br> * Purpose: <br> *  Called by Windows on DLL unload.  <br> * <br> */ <br>extern "C" void FAR PASCAL _WEP(int bSystemExit) <br>{ <br>    return; <br>} <br> <br>#else //Win 32 <br> <br>BOOL WINAPI DllMain (HINSTANCE hinst, DWORD dwReason, LPVOID lpReserved) <br>{ <br>    switch (dwReason) <br>    { <br>        case DLL_PROCESS_ATTACH: <br>            if (!InitDLL(hinst)) <br>                return FALSE; <br>            else return TRUE; <br> <br>        default: <br>            return TRUE; <br>    } <br>} <br> <br>#endif  <br> <br>/* <br> * DLLGetClassObject <br> * <br> * Purpose: <br> *  OLE calls this funtion to obtain the class factory. Note that the class  <br> *  factory is not registered by the inproc server.  <br> * <br> */ <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, <br>                                   LPVOID FAR *ppv) <br>{     <br>    LPCLASSFACTORY pcf; <br>    HRESULT hr; <br>     <br>    *ppv =  NULL; <br>     <br>    // Check if this CLSID is supported. <br>    if (rclsid != CLSID_BrowseHelper) <br>       return E_FAIL; <br>     <br>    // Create class factory and return it   <br>    pcf = new CBrowseHelperCF;   <br>    if (!pcf) <br>        return E_OUTOFMEMORY;   <br>    hr = pcf-&gt;QueryInterface(riid, ppv); <br>    if (FAILED(hr))  <br>    { <br>        delete pcf; <br>        return hr; <br>    }           <br>    return NOERROR; <br>} <br> <br>/* <br> * DLLCanUnloadNow <br> * <br> * Purpose: <br> *  DllCanUnloadNow is called by OLE to determine if the DLL can be unloded.  <br> * <br> */ <br>STDAPI DllCanUnloadNow(void) <br>{   <br>    if (g_cObj==0L &amp;&amp; g_cLock==0L) <br>        return S_OK; <br>    else return S_FALSE; <br>}      <br> <br>/* <br> * InitDLL <br> * <br> * Purpose: <br> *  Load strings &amp; Registers the window class <br> * <br> * Parameters: <br> *  hinstance       hinstance of application <br> * <br> */ <br>BOOL InitDLL (HINSTANCE hinst) <br>{   <br>   return LoadString(hinst, IDS_SERVERNAME, g_szServerName, sizeof(g_szServerName)); <br>} <br> <br>/* <br> * Quick &amp; Dirty ANSI/Unicode conversion routines. These routines use a static <br> * buffer of fixed size to hold the converted string. Consequently these <br> * routines are limited to strings of size STRCONVERT_MAXLEN. Also the same <br> * buffer is reused when the routine is called a second time. So make sure <br> * that the converted string is used before the conversion routine is called <br> * again <br> */ <br>#ifdef WIN32 <br> <br>#ifndef UNICODE <br>char* ConvertToAnsi(OLECHAR FAR* szW) <br>{ <br>  static char achA[STRCONVERT_MAXLEN];  <br>   <br>  WideCharToMultiByte(CP_ACP, 0, szW, -1, achA, STRCONVERT_MAXLEN, NULL, NULL);   <br>  return achA;  <br>}  <br> <br>OLECHAR* ConvertToUnicode(char FAR* szA) <br>{ <br>  static OLECHAR achW[STRCONVERT_MAXLEN];  <br> <br>  MultiByteToWideChar(CP_ACP, 0, szA, -1, achW, STRCONVERT_MAXLEN);   <br>  return achW;  <br>} <br>#endif <br> <br>#endif    </code></pre>
<p>&nbsp;</p></body>
</HTML>

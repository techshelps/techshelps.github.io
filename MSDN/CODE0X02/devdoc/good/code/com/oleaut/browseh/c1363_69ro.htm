<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INTFACE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1374"></a>INTFACE.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  intface.cpp <br>** <br>**  CInterface implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CInterface::Create <br> * <br> * Purpose: <br> *  Creates an instance of the Interface automation object and initializes it. <br> * <br> * Parameters:        <br> *  ptinfo         TypeInfo of interface. <br> *  ppInterface    Returns Interface automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CInterface::Create(LPTYPEINFO ptinfo, CInterface FAR* FAR* ppInterface)  <br>{    <br>    HRESULT hr; <br>    CInterface FAR* pInterface = NULL; <br>      <br>    *ppInterface = NULL; <br>     <br>    // Create object. <br>    pInterface = new CInterface(); <br>    if (pInterface == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }     <br>    // Load type information for the object from type library.  <br>    hr = pInterface-&gt;LoadTypeInfo(IID_IInterface); <br>    if (FAILED(hr)) <br>        goto error; <br>    // Intialize base class, CTypeInfo <br>    hr = pInterface-&gt;_InitTypeInfo(ptinfo); <br>    if (FAILED(hr)) <br>        goto error; <br>     <br>    ptinfo-&gt;AddRef(); <br>    pInterface-&gt;m_ptinfo = ptinfo; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pInterface-&gt;m_szClassName, TEXT("Interface"), 100); <br>#endif  <br>         <br>    *ppInterface = pInterface; <br>    return NOERROR; <br>     <br>error: <br>    if (pInterface == NULL) return E_OUTOFMEMORY; <br>    if (pInterface-&gt;m_ptinfo) pInterface-&gt;m_ptinfo-&gt;Release(); <br>          <br>    // Set to NULL to prevent destructor from attempting to free again   <br>    pInterface-&gt;m_ptinfo = NULL; <br>     <br>    delete pInterface; <br>    return hr; <br>} <br> <br>/* <br> * CInterface::CInterface <br> * <br> * Purpose: <br> *  Constructor for CInterface object. Initializes members to NULL. <br> * <br> */ <br>CInterface::CInterface() <br>{  <br>    m_pdispFunctions = NULL; <br>m_pdispBaseInterface = NULL; <br>    m_ptinfo = NULL; <br>} <br> <br>/* <br> * CInterface::~CInterface <br> * <br> * Purpose: <br> *  Destructor for CInterface object.  <br> * <br> */ <br>CInterface::~CInterface() <br>{ <br>    if (m_pdispFunctions) m_pdispFunctions-&gt;Release(); <br>if (m_pdispBaseInterface) m_pdispBaseInterface-&gt;Release(); <br>    if (m_ptinfo) m_ptinfo-&gt;Release(); <br>}  <br> <br>STDMETHODIMP_(REFCLSID) <br>CInterface::GetInterfaceID() <br>{ <br>    return IID_IInterface; <br>} <br> <br>STDMETHODIMP_(ICollection FAR*) <br>CInterface::get_Functions()      <br>{   <br>    HRESULT hr; <br>    CFunction FAR* pFunction; <br>    CCollection FAR* pCollection = NULL; <br>    LPDISPATCH pdisp; <br>    LPTYPEATTR ptypeattr = NULL; <br>    unsigned short n; <br>     <br>    if (m_pdispFunctions == NULL) <br>    {    <br>        // Create collection of functions in interface. <br>        hr = m_ptinfo-&gt;GetTypeAttr(&amp;ptypeattr);  <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); return NULL;}    <br>        hr = CCollection::Create(ptypeattr-&gt;cFuncs, 0, &amp;pCollection); <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); goto error;}       <br>        for (n=0; n&lt;ptypeattr-&gt;cFuncs; n++) <br>        {                 <br>            hr = CFunction::Create(m_ptinfo, n, &amp;pFunction);  <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;} <br>            pFunction-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>            pCollection-&gt;Add(pdisp);   <br>            pdisp-&gt;Release(); <br>        } <br>        pCollection-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>        m_pdispFunctions = pdisp;  <br>        m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr); <br>    } <br>    m_pdispFunctions-&gt;AddRef(); <br>    return (ICollection FAR*)m_pdispFunctions;      <br>     <br>error:     <br>    if (ptypeattr) m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr);    <br>    if (pCollection) delete pCollection;   <br>    return NULL; <br>} <br> <br>STDMETHODIMP_(IInterface FAR*) <br>CInterface::get_BaseInterface() <br>{ <br>HRESULT hr; <br>CInterface FAR* pInterface = NULL; <br>LPTYPEINFO ptinfoInterface = NULL; <br>HREFTYPE hreftype; <br> <br>    if(m_pdispBaseInterface == NULL) <br>    { <br>    hr = m_ptinfo-&gt;GetRefTypeOfImplType(0, &amp;hreftype); <br>if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); return NULL;} <br>hr = m_ptinfo-&gt;GetRefTypeInfo(hreftype, &amp;ptinfoInterface); <br>if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); return NULL;} <br>hr = CInterface::Create(ptinfoInterface, &amp;pInterface);  <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); goto error;} <br>pInterface-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;m_pdispBaseInterface); <br>        ptinfoInterface-&gt;Release(); <br>} <br>m_pdispBaseInterface-&gt;AddRef(); <br>return (IInterface FAR*)m_pdispBaseInterface; <br> <br>error: <br>if (ptinfoInterface) ptinfoInterface-&gt;Release(); <br>if (pInterface) delete pInterface; <br>    return NULL; <br>     <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

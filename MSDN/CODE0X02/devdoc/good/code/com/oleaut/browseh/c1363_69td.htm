<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ALIAS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1381"></a>ALIAS.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  alias.cpp <br>** <br>**  CAlias implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CAlias::Create <br> * <br> * Purpose: <br> *  Creates an instance of the Alias automation object and initializes it. <br> * <br> * Parameters:        <br> *  ptinfo     Typeinfo of Alias. <br> *  ppAlias    Returns Alias automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT <br>CAlias::Create(LPTYPEINFO ptinfo, CAlias FAR* FAR* ppAlias)  <br>{    <br>    HRESULT hr; <br>    CAlias FAR* pAlias = NULL;        <br>    LPTYPEATTR ptypeattr = NULL;  <br>    CTypeDesc FAR* pTypeDesc; <br>      <br>    *ppAlias = NULL; <br>     <br>    // Create alias object. <br>    pAlias = new CAlias(); <br>    if (pAlias == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>    // Load type information for the object from type library.  <br>    hr = pAlias-&gt;LoadTypeInfo(IID_IAlias); <br>    if (FAILED(hr)) <br>        goto error;   <br>     <br>    // Ask base class (CTypeInfo) to initialize     <br>    hr = pAlias-&gt;_InitTypeInfo(ptinfo); <br>    if (FAILED(hr)) <br>        goto error;         <br>     <br>    // Get base type of this alias. <br>    hr = ptinfo-&gt;GetTypeAttr(&amp;ptypeattr);  <br>    if (FAILED(hr)) <br>        return NULL;      <br>    hr = CTypeDesc::Create(ptinfo, &amp;ptypeattr-&gt;tdescAlias, &amp;pTypeDesc); <br>    if (FAILED(hr)) <br>        goto error; <br>    pTypeDesc-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pAlias-&gt;m_pdispTypeDescBase); <br>    ptinfo-&gt;ReleaseTypeAttr(ptypeattr); <br>     <br>#ifdef _DEBUG   <br>    lstrcpyn(pAlias-&gt;m_szClassName, TEXT("Alias"), 100); <br>#endif <br>         <br>    *ppAlias = pAlias; <br>    return NOERROR; <br>     <br>error: <br>    if (pAlias == NULL) return E_OUTOFMEMORY; <br>    if (pAlias-&gt;m_pdispTypeDescBase) pAlias-&gt;m_pdispTypeDescBase-&gt;Release();     <br>    if (ptypeattr) ptinfo-&gt;ReleaseTypeAttr(ptypeattr);  <br>          <br>    // Set to NULL to prevent destructor from attempting to free again <br>    pAlias-&gt;m_pdispTypeDescBase = NULL; <br>     <br>    delete pAlias; <br>    return hr; <br>} <br> <br>/* <br> * CAlias::CAlias <br> * <br> * Purpose: <br> *  Constructor for CAlias object. Initializes members to NULL. <br> * <br> */ <br>CAlias::CAlias() <br>{ <br>    m_pdispTypeDescBase = NULL; <br>} <br> <br>/* <br> * CAlias::~CAlias <br> * <br> * Purpose: <br> *  Destructor for CAlias object.  <br> * <br> */ <br>CAlias::~CAlias() <br>{ <br>    if (m_pdispTypeDescBase) m_pdispTypeDescBase-&gt;Release(); <br>}   <br> <br>STDMETHODIMP_(REFCLSID) <br>CAlias::GetInterfaceID() <br>{ <br>    return IID_IAlias; <br>} <br>  <br>STDMETHODIMP_(ITypeDesc FAR*) <br>CAlias::get_BaseType() <br>{ <br>    m_pdispTypeDescBase-&gt;AddRef(); <br>    return (ITypeDesc FAR*)m_pdispTypeDescBase; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

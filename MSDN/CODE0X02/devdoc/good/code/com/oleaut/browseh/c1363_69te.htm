<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STRUCT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1382"></a>STRUCT.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  struct.cpp <br>** <br>**  CStruct implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CStruct::Create <br> * <br> * Purpose: <br> *  Creates an instance of the Struct automation object and initializes it. <br> * <br> * Parameters:        <br> *  ptinfo      TypeInfo of struct.. <br> *  ppStruct    Returns Struct automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CStruct::Create(LPTYPEINFO ptinfo, CStruct FAR* FAR* ppStruct)  <br>{    <br>    HRESULT hr; <br>    CStruct FAR* pStruct = NULL; <br>      <br>    *ppStruct = NULL; <br>     <br>    // Create object. <br>    pStruct = new CStruct(); <br>    if (pStruct == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>    // Load type information for the object from type library.  <br>    hr = pStruct-&gt;LoadTypeInfo(IID_IStruct); <br>    if (FAILED(hr)) <br>        goto error;   <br>    // Initialize base class, CTypeInfo     <br>    hr = pStruct-&gt;_InitTypeInfo(ptinfo); <br>    if (FAILED(hr)) <br>        goto error; <br>     <br>    ptinfo-&gt;AddRef(); <br>    pStruct-&gt;m_ptinfo = ptinfo; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pStruct-&gt;m_szClassName, TEXT("Struct"), 100); <br>#endif <br>         <br>    *ppStruct = pStruct; <br>    return NOERROR; <br>     <br>error: <br>    if (pStruct == NULL) return E_OUTOFMEMORY; <br>    if (pStruct-&gt;m_ptinfo) pStruct-&gt;m_ptinfo-&gt;Release(); <br>          <br>    // Set to NULL to prevent destructor from attempting to free again   <br>    pStruct-&gt;m_ptinfo = NULL; <br>     <br>    delete pStruct; <br>    return hr; <br>} <br> <br>/* <br> * CStruct::CStruct <br> * <br> * Purpose: <br> *  Constructor for CStruct object. Initializes members to NULL. <br> * <br> */ <br>CStruct::CStruct() <br>{ <br>    m_pdispMembers = NULL;       <br>    m_ptinfo = NULL; <br>} <br> <br>/* <br> * CStruct::~CStruct <br> * <br> * Purpose: <br> *  Destructor for CStruct object.  <br> * <br> */ <br>CStruct::~CStruct() <br>{ <br>    if (m_pdispMembers) m_pdispMembers-&gt;Release(); <br>    if (m_ptinfo) m_ptinfo-&gt;Release(); <br>}   <br> <br>STDMETHODIMP_(REFCLSID) <br>CStruct::GetInterfaceID() <br>{ <br>    return IID_IStruct; <br>} <br> <br>STDMETHODIMP_(ICollection FAR*) <br>CStruct::get_Members()      <br>{     <br>    HRESULT hr; <br>    CProperty FAR* pProperty; <br>    CCollection FAR* pCollection = NULL; <br>    LPDISPATCH pdisp; <br>    LPVARDESC pvardesc = NULL;    <br>    LPTYPEATTR ptypeattr = NULL; <br>    unsigned short n; <br>     <br>    if (m_pdispMembers == NULL) <br>    {    <br>        // Create a collection of structure members  <br>        hr = m_ptinfo-&gt;GetTypeAttr(&amp;ptypeattr); <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); return NULL;}        <br>        hr = CCollection::Create(ptypeattr-&gt;cVars, 0, &amp;pCollection);   <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); goto error;}    <br>        for (n=0; n&lt;ptypeattr-&gt;cVars; n++) <br>        {        <br>            hr = m_ptinfo-&gt;GetVarDesc(n, &amp;pvardesc);    <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}    <br>            hr = CProperty::Create(m_ptinfo, pvardesc, &amp;pProperty); <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}     <br>            m_ptinfo-&gt;ReleaseVarDesc(pvardesc);  <br>            pvardesc = NULL; <br>            pProperty-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>            pCollection-&gt;Add(pdisp);    <br>            pdisp-&gt;Release(); <br>        } <br>        pCollection-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>        m_pdispMembers = pdisp;     <br>        m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr);  <br>    } <br>    m_pdispMembers-&gt;AddRef(); <br>    return (ICollection FAR*)m_pdispMembers; <br> <br>error:   <br>    if (ptypeattr) m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr);    <br>    if (pCollection) delete pCollection;    <br>    if (pvardesc) m_ptinfo-&gt;ReleaseVarDesc(pvardesc);    <br>    return NULL; <br>}     </code></pre>
<p>&nbsp;</p></body>
</HTML>

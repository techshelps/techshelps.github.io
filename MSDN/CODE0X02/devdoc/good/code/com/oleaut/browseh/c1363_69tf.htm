<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1383"></a>TYPE.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  type.cpp <br>** <br>**  CTypeDesc implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CTypeDesc::Create <br> * <br> * Purpose: <br> *  Creates an instance of the TypeDesc automation object and initializes it. <br> * <br> * ArrayBounds:        <br> *  ptinfo        TypeInfo in which the element which this type describes is contained.     <br> *  ptypedesc     TYPDESC that describes this type. <br> *  ppTypeDesc    Returns TypeDesc automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CTypeDesc::Create(LPTYPEINFO ptinfo, TYPEDESC FAR* ptypedesc, CTypeDesc FAR* FAR* ppTypeDesc)  <br>{    <br>    HRESULT hr; <br>    CTypeDesc FAR* pTypeDesc = NULL;  <br>    CTypeDesc FAR* pTypeDescPointedAt = NULL; <br>    CArrayDesc FAR* pArrayDesc = NULL;     <br>    CTypeInfo FAR* pTypeInfo = NULL; <br>    LPTYPEINFO ptinfoUserDefined;   <br>      <br>    *ppTypeDesc = NULL; <br> <br>    pTypeDesc = new CTypeDesc(); <br>    if (pTypeDesc == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>    // Load type information for the object from type library.  <br>    hr = pTypeDesc-&gt;LoadTypeInfo(IID_ITypeDesc); <br>    if (FAILED(hr)) <br>        goto error;   <br>         <br>    pTypeDesc-&gt;m_vartype = ptypedesc-&gt;vt; <br>    if (ptypedesc-&gt;vt == VT_USERDEFINED) <br>    { <br>        hr = ptinfo-&gt;GetRefTypeInfo(ptypedesc-&gt;hreftype, &amp;ptinfoUserDefined);  <br>        if (FAILED(hr)) <br>            goto error; <br>        hr = CTypeInfo::Create(ptinfoUserDefined, &amp;pTypeInfo);     <br>        if (FAILED(hr)) <br>            goto error;  <br>        pTypeInfo-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pTypeDesc-&gt;m_pdispUserDefinedDesc); <br>    } <br>    else if (ptypedesc-&gt;vt == VT_CARRAY) <br>    {  <br>        hr = CArrayDesc::Create(ptinfo, ptypedesc-&gt;lpadesc, &amp;pArrayDesc);     <br>        if (FAILED(hr)) <br>            goto error;   <br>        pArrayDesc-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pTypeDesc-&gt;m_pdispArrayDesc); <br>    } <br>    else if (ptypedesc-&gt;vt == VT_PTR) <br>    { <br>        hr = CTypeDesc::Create(ptinfo, ptypedesc-&gt;lptdesc, &amp;pTypeDescPointedAt);     <br>        if (FAILED(hr)) <br>            goto error;   <br>        pTypeDescPointedAt-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pTypeDesc-&gt;m_pdispPointerDesc);                                                                                       <br>    } <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pTypeDesc-&gt;m_szClassName, TEXT("TypeDesc"), 100); <br>#endif <br>         <br>    *ppTypeDesc = pTypeDesc; <br>    return NOERROR; <br>     <br>error: <br>    if (pTypeDesc == NULL) return E_OUTOFMEMORY; <br>          <br>    // Set to NULL to prevent destructor from attempting to free again <br>     <br>    delete pTypeDesc; <br>    return hr; <br>} <br> <br>/* <br> * CTypeDesc::CTypeDesc <br> * <br> * Purpose: <br> *  Constructor for CTypeDesc object. Initializes members to NULL. <br> * <br> */ <br>CTypeDesc::CTypeDesc() <br>{ <br>    m_pdispUserDefinedDesc = NULL; <br>    m_pdispArrayDesc = NULL; <br>    m_pdispPointerDesc = NULL; <br>} <br> <br>/* <br> * CTypeDesc::~CTypeDesc <br> * <br> * Purpose: <br> *  Destructor for CTypeDesc object.  <br> * <br> */ <br>CTypeDesc::~CTypeDesc() <br>{ <br>    if (m_pdispUserDefinedDesc) m_pdispUserDefinedDesc-&gt;Release(); <br>    if (m_pdispArrayDesc) m_pdispArrayDesc-&gt;Release();  <br>    if (m_pdispPointerDesc) m_pdispPointerDesc-&gt;Release(); <br>}   <br> <br>STDMETHODIMP_(REFCLSID) <br>CTypeDesc::GetInterfaceID() <br>{ <br>    return IID_ITypeDesc; <br>} <br> <br>STDMETHODIMP_(short) <br>CTypeDesc::get_Type() <br>{  <br>    return (short)m_vartype; <br>} <br> <br>STDMETHODIMP_(ITypeInformation FAR*) <br>CTypeDesc::get_UserDefinedDesc() <br>{ <br>    if (NULL == m_pdispUserDefinedDesc) <br>    { <br>        RaiseException(IDS_WrongType);     <br>        return NULL; <br>    } <br>    m_pdispUserDefinedDesc-&gt;AddRef(); <br>    return (ITypeInformation FAR*)m_pdispUserDefinedDesc; <br>} <br> <br>STDMETHODIMP_(IArrayDesc FAR*) <br>CTypeDesc::get_ArrayDesc() <br>{ <br>    if (NULL == m_pdispArrayDesc) <br>    { <br>        RaiseException(IDS_WrongType);     <br>        return NULL; <br>    } <br>    m_pdispArrayDesc-&gt;AddRef(); <br>    return (IArrayDesc FAR*)m_pdispArrayDesc; <br>} <br> <br>STDMETHODIMP_(ITypeDesc FAR*) <br>CTypeDesc::get_PointerDesc() <br>{   <br>    if (NULL == m_pdispPointerDesc) <br>    { <br>        RaiseException(IDS_WrongType);     <br>        return NULL; <br>    } <br>    m_pdispPointerDesc-&gt;AddRef(); <br>    return (ITypeDesc FAR*)m_pdispPointerDesc; <br>}    <br> <br>/* <br> * CArrayDesc::Create <br> * <br> * Purpose: <br> *  Creates an instance of the ArrayDesc automation object and initializes it.  <br> *  An ArrayDesc describes a C-style array. <br> * <br> * ArrayBounds:        <br> *  ptinfo        TypeInfo in which the element which this type describes is contained.     <br> *  parraydesc    ARRAYDESC that describes this ArrayDesc object. <br> *  ppArrayDesc   Returns ArrayDesc automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CArrayDesc::Create(LPTYPEINFO ptinfo, ARRAYDESC FAR* parraydesc, CArrayDesc FAR* FAR* ppArrayDesc)  <br>{    <br>    HRESULT hr; <br>    CArrayDesc FAR* pArrayDesc = NULL;       <br>    CTypeDesc FAR* pTypeDesc = NULL;   <br>    CCollection FAR* pCollection = NULL;   <br>    CArrayBound FAR* pArrayBound; <br>    USHORT n; <br>    LPDISPATCH pdisp; <br>      <br>    *ppArrayDesc = NULL; <br>     <br>    // Create object. <br>    pArrayDesc = new CArrayDesc(); <br>    if (pArrayDesc == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }     <br>     <br>    // Load type information for the object from type library.  <br>    hr = pArrayDesc-&gt;LoadTypeInfo(IID_IArrayDesc); <br>    if (FAILED(hr)) <br>        goto error; <br>         <br>    hr = CTypeDesc::Create(ptinfo, &amp;parraydesc-&gt;tdescElem, &amp;pTypeDesc); <br>    if (FAILED(hr)) <br>        goto error; <br>    pTypeDesc-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pArrayDesc-&gt;m_pdispTypeDescElement);   <br>     <br>    // Create collection of array bounds. One array bound per dimension. <br>    hr = CCollection::Create(parraydesc-&gt;cDims, 0, &amp;pCollection);   <br>    if (FAILED(hr)) <br>        goto error;   <br>    for (n=0; n&lt;parraydesc-&gt;cDims; n++) <br>    { <br>        hr = CArrayBound::Create(parraydesc-&gt;rgbounds[n].cElements, parraydesc-&gt;rgbounds[n].lLbound, &amp;pArrayBound); <br>        if (FAILED(hr)) <br>            goto error; <br>        pArrayBound-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>        pCollection-&gt;Add(pdisp); <br>        pdisp-&gt;Release();   <br>    } <br>    pCollection-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>    pArrayDesc-&gt;m_pdispArrayBounds = pdisp; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pArrayDesc-&gt;m_szClassName, TEXT("ArrayDesc"), 100); <br>#endif  <br>         <br>    *ppArrayDesc = pArrayDesc; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pArrayDesc == NULL) return E_OUTOFMEMORY; <br> <br>    // Set to NULL to prevent destructor from attempting to free again <br>    pArrayDesc-&gt;m_pdispTypeDescElement = NULL; <br>    pArrayDesc-&gt;m_pdispArrayBounds = NULL; <br>    delete pArrayDesc; <br>    return hr; <br>} <br> <br>/* <br> * CArrayDesc::CArrayDesc <br> * <br> * Purpose: <br> *  Constructor for CArrayDesc object. Initializes members to NULL. <br> * <br> */ <br>CArrayDesc::CArrayDesc() <br>{ <br>    m_pdispTypeDescElement = NULL; <br>    m_pdispArrayBounds = NULL; <br>} <br> <br>/* <br> * CArrayDesc::~CArrayDesc <br> * <br> * Purpose: <br> *  Destructor for CArrayDesc object.  <br> * <br> */ <br>CArrayDesc::~CArrayDesc() <br>{ <br>     if (m_pdispTypeDescElement) m_pdispTypeDescElement-&gt;Release();       <br>     if (m_pdispArrayBounds) m_pdispArrayBounds-&gt;Release(); <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CArrayDesc::GetInterfaceID() <br>{ <br>    return IID_IArrayDesc; <br>} <br> <br>STDMETHODIMP_(ITypeDesc FAR*) <br>CArrayDesc::get_ElementType() <br>{    <br>    m_pdispTypeDescElement-&gt;AddRef(); <br>    return (ITypeDesc FAR*)m_pdispTypeDescElement; <br>} <br> <br> <br>STDMETHODIMP_(ICollection FAR*) <br>CArrayDesc::get_ArrayBounds() <br>{    <br>    m_pdispArrayBounds-&gt;AddRef(); <br>    return (ICollection FAR*)m_pdispArrayBounds; <br>}   <br> <br> <br>/* <br> * CArrayBound::Create <br> * <br> * Purpose: <br> *  Creates an instance of the ArrayBound automation object and initializes it. <br> * <br> * ArrayBounds:        <br> *  cElements       Number of elements in Array. <br> *  lLBound         Lower bound of array. <br> *  ppArrayBound    Returns ArrayBound automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CArrayBound::Create(unsigned long cElements, long lLBound, CArrayBound FAR* FAR* ppArrayBound)  <br>{    <br>    HRESULT hr; <br>    CArrayBound FAR* pArrayBound = NULL; <br>      <br>    *ppArrayBound = NULL; <br>     <br>    // Create object. <br>    pArrayBound = new CArrayBound(); <br>    if (pArrayBound == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }     <br>   // Load type information for the application object from type library.  <br>    hr = pArrayBound-&gt;LoadTypeInfo(IID_IArrayBound); <br>    if (FAILED(hr)) <br>        goto error;  <br> <br>    pArrayBound-&gt;m_cElements = cElements;    <br>    pArrayBound-&gt;m_lLBound = lLBound; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pArrayBound-&gt;m_szClassName, TEXT("ArrayBound"), 100); <br>#endif <br>         <br>    *ppArrayBound = pArrayBound; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pArrayBound == NULL) return E_OUTOFMEMORY; <br>     <br>    delete pArrayBound; <br>    return hr; <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CArrayBound::GetInterfaceID() <br>{ <br>    return IID_IArrayBound; <br>} <br> <br>STDMETHODIMP_(long) <br>CArrayBound::get_ElementsCount() <br>{ <br>    return (long)m_cElements; <br>} <br> <br> <br>STDMETHODIMP_(long) <br>CArrayBound::get_LowerBound() <br>{ <br>    return m_lLBound; <br>}   </code></pre>
<p>&nbsp;</p></body>
</HTML>

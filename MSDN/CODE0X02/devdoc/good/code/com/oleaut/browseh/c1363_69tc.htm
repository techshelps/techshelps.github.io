<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPERTY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1380"></a>PROPERTY.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation Property Browse Helper Sample <br>** <br>**  property.cpp <br>** <br>**  CProperty implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CProperty::Create <br> * <br> * Purpose: <br> *  Creates an instance of the Property automation object and initializes it. <br> * <br> * Parameters:    <br> *  ptinfo        TypeInfo in which this property/variable is contained. <br> *  pvardesc      VARDESC that descrribes this property/variable. <br> *  ppProperty    Returns Property automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CProperty::Create(LPTYPEINFO ptinfo, LPVARDESC pvardesc, CProperty FAR* FAR* ppProperty)  <br>{    <br>    HRESULT hr; <br>    CProperty FAR* pProperty = NULL;    <br>    BSTR bstr;   <br>    unsigned int cNames; <br>    CTypeDesc FAR* pTypeDesc = NULL; <br>      <br>    *ppProperty = NULL; <br>     <br>    // Create object. <br>    pProperty = new CProperty(); <br>    if (pProperty == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>     <br>   // Load type information for the object from type library.  <br>    hr = pProperty-&gt;LoadTypeInfo(IID_IProperty); <br>    if (FAILED(hr)) <br>        goto error;  <br>     <br>    pProperty-&gt;m_memid = pvardesc-&gt;memid;  <br>    ptinfo-&gt;GetNames(pvardesc-&gt;memid, &amp;bstr, 1, &amp;cNames);     <br>    pProperty-&gt;m_bstrName = bstr; <br>     <br>    // Property type <br>    hr = CTypeDesc::Create(ptinfo, &amp;pvardesc-&gt;elemdescVar.tdesc, &amp;pTypeDesc); <br>    if (FAILED(hr)) <br>        goto error; <br>    pTypeDesc-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pProperty-&gt;m_pdispTypeDesc); <br>     <br>    hr = ptinfo-&gt;GetDocumentation(pvardesc-&gt;memid, NULL, &amp;pProperty-&gt;m_bstrDocumentation, <br>             &amp;pProperty-&gt;m_ulHelpContext, &amp;pProperty-&gt;m_bstrHelpFile);     <br>    if (FAILED(hr)) <br>        goto error; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pProperty-&gt;m_szClassName, TEXT("Property"), 100); <br>#endif  <br>         <br>    *ppProperty = pProperty; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pProperty == NULL) return E_OUTOFMEMORY; <br>    if (pProperty-&gt;m_bstrName) SysFreeString(pProperty-&gt;m_bstrName); <br>    if (pProperty-&gt;m_bstrDocumentation) SysFreeString(pProperty-&gt;m_bstrDocumentation); <br>    if (pProperty-&gt;m_bstrHelpFile) SysFreeString(pProperty-&gt;m_bstrHelpFile);    <br>     <br>    // Set to NULL to prevent destructor from attempting to free again <br>    pProperty-&gt;m_bstrName = NULL; <br>    pProperty-&gt;m_bstrDocumentation = NULL; <br>    pProperty-&gt;m_bstrHelpFile = NULL;     <br> <br>    delete pProperty; <br>    return hr; <br>} <br> <br>/* <br> * CProperty::CProperty <br> * <br> * Purpose: <br> *  Constructor for CProperty object. Initializes members to NULL. <br> * <br> */ <br>CProperty::CProperty() <br>{    <br>    m_bstrName = NULL; <br>    m_bstrDocumentation = NULL; <br>    m_bstrHelpFile = NULL;       <br>    m_pdispTypeDesc = NULL; <br>} <br> <br>/* <br> * CProperty::~CProperty <br> * <br> * Purpose: <br> *  Destructor for CProperty object.  <br> * <br> */ <br>CProperty::~CProperty() <br>{     <br>     if (m_bstrName) SysFreeString(m_bstrName); <br>     if (m_bstrDocumentation) SysFreeString(m_bstrDocumentation); <br>     if (m_bstrHelpFile) SysFreeString(m_bstrHelpFile);     <br>     if (m_pdispTypeDesc) m_pdispTypeDesc-&gt;Release(); <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CProperty::GetInterfaceID() <br>{ <br>    return IID_IProperty; <br>} <br> <br>STDMETHODIMP_(BSTR) <br>CProperty::get_Name() <br>{ <br>    return SysAllocString(m_bstrName); <br>}    <br> <br>STDMETHODIMP_(BSTR) <br>CProperty::get_Documentation()      <br>{ <br>    return SysAllocString(m_bstrDocumentation); <br>}   <br> <br>STDMETHODIMP_(long) <br>CProperty::get_HelpContext()      <br>{ <br>    return (long)m_ulHelpContext; <br>} <br> <br>STDMETHODIMP_(BSTR) <br>CProperty::get_HelpFile()      <br>{ <br>    return SysAllocString(m_bstrHelpFile); <br>}    <br> <br> <br>STDMETHODIMP_(ITypeDesc FAR*) <br>CProperty::get_Type() <br>{ <br>    m_pdispTypeDesc-&gt;AddRef(); <br>    return (ITypeDesc FAR*)m_pdispTypeDesc; <br>}    <br> <br>STDMETHODIMP_(MEMBERID) <br>CProperty::get_Memberid() <br>{ <br>    return m_memid; <br>}  <br> <br>STDMETHODIMP_(OBJTYPE) <br>CProperty::get_Kind() <br>{    <br>    return TYPE_PROPERTY; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

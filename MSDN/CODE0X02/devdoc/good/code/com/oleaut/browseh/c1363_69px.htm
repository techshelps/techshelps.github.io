<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BROWSEH.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1365"></a>BROWSEH.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  browse.cpp <br>** <br>**  CBrowseHelper implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CBrowseHelper::Create <br> * <br> * Purpose: <br> *  Creates an instance of the BrowseHelper automation object and initializes it. <br> * <br> * Parameters: <br> *  ppBrowseHelper   Returns BrowseHelper automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CBrowseHelper::Create(CBrowseHelper FAR* FAR* ppBrowseHelper )  <br>{    <br>    HRESULT hr; <br>    CBrowseHelper FAR* pBrowseHelper = NULL; <br>      <br>    *ppBrowseHelper = NULL; <br>     <br>    // Create object. <br>    pBrowseHelper = new CBrowseHelper(); <br>    if (pBrowseHelper == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    } <br> <br>    // Load type information for the application object from type library.  <br>    hr = pBrowseHelper-&gt;LoadTypeInfo(IID_IBrowseHelper); <br>    if (FAILED(hr)) <br>        goto error;     <br>         <br>#ifdef _DEBUG   <br>    lstrcpyn(pBrowseHelper-&gt;m_szClassName, TEXT("BrowseHelper"), 100); <br>#endif <br>         <br>    *ppBrowseHelper = pBrowseHelper; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pBrowseHelper == NULL) <br>        return E_OUTOFMEMORY; <br> <br>    delete pBrowseHelper; <br>    return hr; <br>} <br> <br>/* <br> * CBrowseHelper::CBrowseHelper <br> * <br> * Purpose: <br> *  Constructor for CBrowseHelper object. Initializes members to NULL. <br> * <br> */ <br>CBrowseHelper::CBrowseHelper() <br>{    <br>    extern ULONG g_cObj; <br>    g_cObj++;      <br>} <br> <br>/* <br> * CBrowseHelper::~CBrowseHelper <br> * <br> * Purpose: <br> *  Destructor for CBrowseHelper object. Frees BrowseHelper message BSTR and default <br> *  IDispatch implementation. Closes the aplication. <br> * <br> */ <br>CBrowseHelper::~CBrowseHelper() <br>{  <br>     extern ULONG g_cObj; <br> <br>     g_cObj--; <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CBrowseHelper::GetInterfaceID() <br>{ <br>    return IID_IBrowseHelper; <br>} <br> <br>/* <br> * CBrowseHelper::BrowseTypeLibrary <br> * <br> * Purpose: <br> *  Opens and browses type library. Creates and returns a TypeLibrary object. <br> * <br> */ <br>STDMETHODIMP_(ITypeLibrary FAR*) <br>CBrowseHelper::BrowseTypeLibrary(BSTR bstrPath) <br>{ <br>    LPTYPELIB ptlib = NULL; <br>    LPDISPATCH pdisp; <br>    HRESULT hr;      <br>    CTypeLibrary FAR* pTypeLibrary; <br>     <br>    hr = LoadTypeLib(bstrPath, &amp;ptlib); <br>    if (FAILED(hr)) <br>        {RaiseException(IDS_CannotFindTypeLibrary); return NULL;}  <br>         <br>    hr = CTypeLibrary::Create(ptlib, &amp;pTypeLibrary); <br>    if (FAILED(hr)) <br>         {RaiseException(IDS_TypeLibraryCreationFailed); goto error;} <br>    hr = pTypeLibrary-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp);  <br>    if (FAILED(hr)) <br>        {RaiseException(IDS_Unexpected); goto error;} <br>         <br>    ptlib-&gt;Release(); <br>    return (ITypeLibrary FAR*)pdisp; <br>     <br>error: <br>    if (ptlib) <br>        ptlib-&gt;Release(); <br>    return NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

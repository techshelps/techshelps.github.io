<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONSTANT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1369"></a>CONSTANT.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation Constant Browse Helper Sample <br>** <br>**  Constant.cpp <br>** <br>**  CConstant implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CConstant::Create <br> * <br> * Purpose: <br> *  Creates an instance of the Constant automation object and initializes it. <br> * <br> * Parameters:  <br> *  ptinfo        TypeInfo of which this constant is an element. <br> *  pvardesc      VARDESC that describes this constant. <br> *  ppConstant    Returns Constant automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CConstant::Create(LPTYPEINFO ptinfo, LPVARDESC pvardesc, CConstant FAR* FAR* ppConstant)  <br>{    <br>    HRESULT hr; <br>    CConstant FAR* pConstant = NULL;    <br>    BSTR bstr;   <br>    unsigned int cNames;         <br>    CTypeDesc FAR* pTypeDesc = NULL; <br>      <br>    *ppConstant = NULL; <br>     <br>    // Create object. <br>    pConstant = new CConstant(); <br>    if (pConstant == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>     <br>    // Load type information for the application object from type library.  <br>    hr = pConstant-&gt;LoadTypeInfo(IID_IConstant); <br>    if (FAILED(hr)) <br>        goto error;  <br>     <br>    pConstant-&gt;m_memid = pvardesc-&gt;memid;  <br>    ptinfo-&gt;GetNames(pvardesc-&gt;memid, &amp;bstr, 1, &amp;cNames);     <br>    pConstant-&gt;m_bstrName = bstr;         <br>     <br>    // Type of constant.     <br>    hr = CTypeDesc::Create(ptinfo, &amp;pvardesc-&gt;elemdescVar.tdesc, &amp;pTypeDesc); <br>    if (FAILED(hr)) <br>        goto error; <br>    pTypeDesc-&gt;QueryInterface(IID_IDispatch, (LPVOID FAR*)&amp;pConstant-&gt;m_pdispTypeDesc);   <br>     <br>    // Constant value. <br>    if (pvardesc-&gt;varkind == VAR_CONST) <br>        pConstant-&gt;m_vValue = *pvardesc-&gt;lpvarValue; <br>    else goto error;  <br>     <br>    hr = ptinfo-&gt;GetDocumentation(pvardesc-&gt;memid, NULL, &amp;pConstant-&gt;m_bstrDocumentation, <br>             &amp;pConstant-&gt;m_ulHelpContext, &amp;pConstant-&gt;m_bstrHelpFile);     <br>    if (FAILED(hr)) <br>        goto error; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pConstant-&gt;m_szClassName, TEXT("Constant"), 100); <br>#endif  <br>         <br>    *ppConstant = pConstant; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pConstant == NULL) return E_OUTOFMEMORY; <br>    if (pConstant-&gt;m_bstrName) SysFreeString(pConstant-&gt;m_bstrName); <br>    if (pConstant-&gt;m_bstrDocumentation) SysFreeString(pConstant-&gt;m_bstrDocumentation); <br>    if (pConstant-&gt;m_bstrHelpFile) SysFreeString(pConstant-&gt;m_bstrHelpFile);    <br>     <br>    // Set to NULL to prevent destructor from attempting to free again <br>    pConstant-&gt;m_bstrName = NULL; <br>    pConstant-&gt;m_bstrDocumentation = NULL; <br>    pConstant-&gt;m_bstrHelpFile = NULL;     <br> <br>    delete pConstant; <br>    return hr; <br>} <br> <br>/* <br> * CConstant::CConstant <br> * <br> * Purpose: <br> *  Constructor for CConstant object. Initializes members to NULL. <br> * <br> */ <br>CConstant::CConstant() <br>{    <br>    m_bstrName = NULL; <br>    m_bstrDocumentation = NULL; <br>    m_bstrHelpFile = NULL;    <br>    m_pdispTypeDesc = NULL; <br>} <br> <br>/* <br> * CConstant::~CConstant <br> * <br> * Purpose: <br> *  Destructor for CConstant object.  <br> * <br> */ <br>CConstant::~CConstant() <br>{     <br>     if (m_bstrName) SysFreeString(m_bstrName); <br>     if (m_bstrDocumentation) SysFreeString(m_bstrDocumentation); <br>     if (m_bstrHelpFile) SysFreeString(m_bstrHelpFile);  <br>     if (m_pdispTypeDesc) m_pdispTypeDesc-&gt;Release(); <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CConstant::GetInterfaceID() <br>{ <br>    return IID_IConstant; <br>} <br> <br> <br>STDMETHODIMP_(BSTR) <br>CConstant::get_Name() <br>{ <br>    return SysAllocString(m_bstrName); <br>}    <br> <br>STDMETHODIMP_(BSTR) <br>CConstant::get_Documentation()      <br>{ <br>    return SysAllocString(m_bstrDocumentation); <br>}   <br> <br>STDMETHODIMP_(long) <br>CConstant::get_HelpContext()      <br>{ <br>    return (long)m_ulHelpContext; <br>} <br> <br>STDMETHODIMP_(BSTR) <br>CConstant::get_HelpFile()      <br>{ <br>    return SysAllocString(m_bstrHelpFile); <br>}    <br> <br>STDMETHODIMP_(ITypeDesc FAR*) <br>CConstant::get_Type() <br>{ <br>    m_pdispTypeDesc-&gt;AddRef(); <br>    return (ITypeDesc FAR*)m_pdispTypeDesc; <br>}  <br> <br>STDMETHODIMP_(VARIANT) <br>CConstant::get_Value() <br>{ <br>    return m_vValue; <br>}     <br> <br>STDMETHODIMP_(MEMBERID) <br>CConstant::get_Memberid() <br>{ <br>    return m_memid; <br>} <br> <br>STDMETHODIMP_(OBJTYPE) <br>CConstant::get_Kind() <br>{    <br>    return TYPE_CONSTANT; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

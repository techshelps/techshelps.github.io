<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COCLASS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1367"></a>COCLASS.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  coclass.cpp <br>** <br>**  CCoClass implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CCoClass::Create <br> * <br> * Purpose: <br> *  Creates an instance of the CoClass automation object and initializes it. <br> * <br> * Parameters:        <br> *  ptinfo       TypeInfo of coclass. <br> *  ppCoClass    Returns CoClass automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CCoClass::Create(LPTYPEINFO ptinfo, CCoClass FAR* FAR* ppCoClass)  <br>{    <br>    HRESULT hr; <br>    CCoClass FAR* pCoClass = NULL; <br>      <br>    *ppCoClass = NULL; <br>     <br>    // Create object. <br>    pCoClass = new CCoClass(); <br>    if (pCoClass == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }    <br>    // Load type information for the object from type library. <br>    hr = pCoClass-&gt;LoadTypeInfo(IID_ICoClass); <br>    if (FAILED(hr)) <br>        goto error; <br>     <br>    // Ask base class (CTypeInfo) to initialize. <br>    hr = pCoClass-&gt;_InitTypeInfo(ptinfo); <br>    if (FAILED(hr)) <br>        goto error; <br>     <br>    ptinfo-&gt;AddRef(); <br>    pCoClass-&gt;m_ptinfo = ptinfo;  <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pCoClass-&gt;m_szClassName, TEXT("CoClass"), 100); <br>#endif  <br>         <br>    *ppCoClass = pCoClass; <br>    return NOERROR; <br>     <br>error:                         <br>    if (pCoClass == NULL) return E_OUTOFMEMORY; <br>    if (pCoClass-&gt;m_ptinfo) pCoClass-&gt;m_ptinfo-&gt;Release(); <br>          <br>    // Set to NULL to prevent destructor from attempting to free again   <br>    pCoClass-&gt;m_ptinfo = NULL; <br>     <br>    delete pCoClass; <br>    return hr; <br>} <br> <br>/* <br> * CCoClass::CCoClass <br> * <br> * Purpose: <br> *  Constructor for CCoClass object. Initializes members to NULL. <br> * <br> */ <br>CCoClass::CCoClass() <br>{ <br>    m_pdispInterfaces = NULL;   <br>    m_ptinfo = NULL; <br>} <br> <br>/* <br> * CCoClass::~CCoClass <br> * <br> * Purpose: <br> *  Destructor for CCoClass object.  <br> * <br> */ <br>CCoClass::~CCoClass() <br>{ <br>    if (m_pdispInterfaces) m_pdispInterfaces-&gt;Release();  <br>    if (m_ptinfo) m_ptinfo-&gt;Release(); <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CCoClass::GetInterfaceID() <br>{ <br>    return IID_ICoClass; <br>} <br> <br>STDMETHODIMP_(ICollection FAR*) <br>CCoClass::get_Interfaces()      <br>{    <br>    HRESULT hr; <br>    CCollection FAR* pCollection = NULL;      <br>    CInterface FAR* pInterface; <br>    CCoClass FAR* pCoClass; <br>    LPDISPATCH pdisp;     <br>    HREFTYPE hreftype;   <br>    LPTYPEATTR ptypeattr = NULL; <br>    LPTYPEINFO ptinfoInterface = NULL;   <br>    LPTYPELIB ptlib = NULL; <br>    unsigned int nIndex;     <br>    unsigned short n;    <br>    TYPEKIND typekind;     <br>     <br>    if (m_pdispInterfaces == NULL) <br>    { <br>        hr = m_ptinfo-&gt;GetTypeAttr(&amp;ptypeattr);   <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); return NULL;}    <br>        hr = CCollection::Create(ptypeattr-&gt;cImplTypes, 0, &amp;pCollection);  <br>        if (FAILED(hr)) <br>            {RaiseException(IDS_Unexpected); goto error;}  <br>         <br>        // Enumerate interfaces/dispinterfaces in coclass and return a collection of these. <br>        for (n=0; n&lt;ptypeattr-&gt;cImplTypes; n++) <br>        {        <br>            hr = m_ptinfo-&gt;GetRefTypeOfImplType(n, &amp;hreftype);   <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}    <br>            hr = m_ptinfo-&gt;GetRefTypeInfo(hreftype, &amp;ptinfoInterface);    <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}  <br>            hr = ptinfoInterface-&gt;GetContainingTypeLib(&amp;ptlib, &amp;nIndex);  <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}         <br>            hr = ptlib-&gt;GetTypeInfoType(nIndex, &amp;typekind);     <br>            if (FAILED(hr)) <br>                {RaiseException(IDS_Unexpected); goto error;}  <br>            ptlib-&gt;Release();  <br>            ptlib = NULL; <br>         <br>            switch (typekind) <br>            { <br>                case TKIND_INTERFACE: <br>                    hr = CInterface::Create(ptinfoInterface, &amp;pInterface);      <br>                    if (FAILED(hr)) <br>                        {RaiseException(IDS_Unexpected); goto error;}      <br>                    pInterface-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>                    break; <br>              <br>                case TKIND_DISPATCH: <br>                    hr = CCoClass::Create(ptinfoInterface, &amp;pCoClass); <br>                    if (FAILED(hr)) <br>                        {RaiseException(IDS_Unexpected); goto error;}         <br>                    pCoClass-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>                    break; <br>            } <br>         <br>            ptinfoInterface-&gt;Release();    <br>            ptinfoInterface = NULL; <br>            pCollection-&gt;Add(pdisp);  <br>            pdisp-&gt;Release();  <br>        } <br>        pCollection-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pdisp); <br>        m_pdispInterfaces = pdisp;  <br>        m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr);    <br>    } <br>    m_pdispInterfaces-&gt;AddRef(); <br>    return (ICollection FAR*)m_pdispInterfaces;  <br> <br>error:     <br>    if (ptypeattr) m_ptinfo-&gt;ReleaseTypeAttr(ptypeattr);    <br>    if (pCollection) delete pCollection; <br>    if (ptlib) ptlib-&gt;Release();    <br>    if (ptinfoInterface) ptinfoInterface-&gt;Release();  <br>    return NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

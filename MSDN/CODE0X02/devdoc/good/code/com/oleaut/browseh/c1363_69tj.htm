<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB.FRM</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1387"></a>VB.FRM</h2>
<pre><code>VERSION 4.00 <br>Begin VB.Form Form1  <br>   Appearance      =   0  'Flat <br>   BackColor       =   &amp;H80000005&amp; <br>   Caption         =   "Header file generator" <br>   ClientHeight    =   2010 <br>   ClientLeft      =   4110 <br>   ClientTop       =   2640 <br>   ClientWidth     =   5370 <br>   BeginProperty Font  <br>      name            =   "MS Sans Serif" <br>      charset         =   0 <br>      weight          =   700 <br>      size            =   8.25 <br>      underline       =   0   'False <br>      italic          =   0   'False <br>      strikethrough   =   0   'False <br>   EndProperty <br>   ForeColor       =   &amp;H80000008&amp; <br>   Height          =   2415 <br>   Left            =   4050 <br>   LinkTopic       =   "Form1" <br>   ScaleHeight     =   2010 <br>   ScaleWidth      =   5370 <br>   Top             =   2295 <br>   Width           =   5490 <br>   Begin VB.CommandButton ChooseTypeLibrary  <br>      Caption         =   "Choose Type Library" <br>      Height          =   495 <br>      Left            =   1560 <br>      TabIndex        =   0 <br>      Top             =   360 <br>      Width           =   2415 <br>   End <br>   Begin MSComDlg.CommonDialog SaveOutputDialog  <br>      Left            =   120 <br>      Top             =   1080 <br>      _Version        =   65536 <br>      _ExtentX        =   847 <br>      _ExtentY        =   847 <br>      _StockProps     =   0 <br>      DialogTitle     =   "Save Output As" <br>      Filter          =   "(*.h)|*.h" <br>   End <br>   Begin MSComDlg.CommonDialog ChooseTlibDialog  <br>      Left            =   120 <br>      Top             =   480 <br>      _Version        =   65536 <br>      _ExtentX        =   847 <br>      _ExtentY        =   847 <br>      _StockProps     =   0 <br>      DialogTitle     =   "Choose Type Library" <br>      Filter          =   "Type Libraries |*.tlb;*.olb;*.dll;*.exe" <br>   End <br>End <br>Attribute VB_Name = "Form1" <br>Attribute VB_Creatable = False <br>Attribute VB_Exposed = False <br>'TYPEKIND constants <br>Const TKIND_ENUM = 0 <br>Const TKIND_RECORD = 1 <br>Const TKIND_MODULE = 2 <br>Const TKIND_INTERFACE = 3 <br>Const TKIND_DISPATCH = 4 <br>Const TKIND_COCLASS = 5 <br>Const TKIND_ALIAS = 6 <br>Const TKIND_UNION = 7 <br> <br>'INVOKEKIND constants <br>Const INVOKE_FUNC = 1 <br>Const INVOKE_PROPERTYGET = 2 <br>Const INVOKE_PROPERTYPUT = 4 <br>Const INVOKE_PROPERTYPUTREF = 8 <br> <br>'VARENUM constants <br>Const VT_I2 = 2 <br>Const VT_I4 = 3 <br>Const VT_R4 = 4 <br>Const VT_R8 = 5 <br>Const VT_CY = 6 <br>Const VT_DATE = 7 <br>Const VT_BSTR = 8 <br>Const VT_DISPATCH = 9 <br>Const VT_ERROR = 10 <br>Const VT_BOOL = 11 <br>Const VT_VARIANT = 12 <br>Const VT_UNKNOWN = 13 <br>Const VT_I1 = 16 <br>Const VT_UI1 = 17 <br>Const VT_UI2 = 18 <br>Const VT_UI4 = 19 <br>Const VT_I8 = 20 <br>Const VT_UI8 = 21 <br>Const VT_INT = 22 <br>Const VT_UINT = 23 <br>Const VT_VOID = 24 <br>Const VT_HRESULT = 25 <br>Const VT_PTR = 26 <br>Const VT_SAFEARRAY = 27 <br>Const VT_CARRAY = 28 <br>Const VT_USERDEFINED = 29 <br>Const VT_LPSTR = 30 <br>Const VT_LPWSTR = 31 <br> <br>' TYPEFLAGS <br>Const TYPEFLAG_FDUAL = &amp;H40 <br> <br> <br>Private Sub ChooseTypeLibrary_Click() <br>Dim browser As Object <br>Dim tlib As Object <br>Dim tinfos As Object <br>Dim tinfo As Object <br>Dim funcs As Object <br>Dim func As Object <br>Dim params As Object <br>Dim param As Object <br>Dim element As Object <br>Dim elements As Object <br>Dim member As Object <br>Dim members As Object <br>Dim tinfoBase As Object <br> <br>' Get name of input type library <br>On Error GoTo DialogCancel <br>ChooseTlibDialog.CancelError = True <br>ChooseTlibDialog.ShowOpen <br> <br>' Create Browse Helper (BROWSEH sample) <br>Set browser = CreateObject("BrowseHelper.Browser") <br>Set tlib = browser.BrowseTypeLibrary(ChooseTlibDialog.filename) <br>Set tinfos = tlib.TypeInfos <br> <br>' Get name of output header file <br>On Error GoTo DialogCancel <br>SaveOutputDialog.CancelError = True <br>SaveOutputDialog.ShowSave <br>Open SaveOutputDialog.filename For Output As 1 <br> <br>Print #1, "DEFINE_GUID(LIBID_"; tlib.Name; ","; FormatGUID(tlib.GUIDAsString); ");" <br>Print #1, <br> <br>' Enumerate typeinfos in the type library <br>For i = 0 To tinfos.Count - 1 <br>  Set tinfo = tinfos.Item(i) <br>   <br>  ' Output header file contents depending on the TYPEKIND of the typeinfo <br>  Select Case tinfo.TypeInfoKind <br>     Case TKIND_ENUM     'Enum <br>        Print #1, "typedef enum{" <br>        Set elements = tinfo.elements <br>        For j = 0 To elements.Count - 1 <br>            Set element = elements.Item(j) <br>            Print #1, Tab(1); element.Name; " = "; element.Value; <br>            If j &lt; elements.Count - 1 Then <br>                    Print #1, ","; <br>            End If <br>        Next j <br>        Print #1, <br>        Print #1, "} "; tinfo.Name; ";" <br>         <br>    Case TKIND_RECORD     'Struct <br>        Print #1, "typedef struct{" <br>        Set members = tinfo.members <br>        For j = 0 To members.Count - 1 <br>            Set member = members.Item(j) <br>            Print #1, Tab(1); TypeToString(member.Type); " "; member.Name; ";" <br>        Next j <br>        Print #1, "} "; tinfo.Name; ";" <br>         <br>    Case TKIND_UNION     'Union <br>        Print #1, "typedef union{" <br>        Set members = tinfo.members <br>        For j = 0 To members.Count - 1 <br>            Set member = members.Item(j) <br>            Print #1, Tab(1); TypeToString(member.Type); " "; member.Name; ";" <br>        Next j <br>        Print #1, "} "; tinfo.Name; ";" <br>         <br>     Case TKIND_INTERFACE     'Interface <br>        Print #1, "DEFINE_GUID(IID_"; tinfo.Name; ","; FormatGUID(tinfo.GUIDAsString); ");" <br>        On Error Resume Next <br>        Set tinfoBase = tinfo.BaseInterface <br>        If Err.Number &gt; 0 Then 'If there is no base interface <br>           Print #1, "DECLARE_INTERFACE("; tinfo.Name; ")" <br>        Else <br>           Print #1, "DECLARE_INTERFACE_("; tinfo.Name; ", "; tinfoBase.Name; ")" <br>        End If <br>        Print #1, "{" <br>         <br>        ' Output the functions in the interface <br>        Set funcs = tinfo.Functions <br>        For j = 0 To funcs.Count - 1 <br>            Set func = funcs.Item(j) <br>            Print #1, Tab(2); "STDMETHOD_("; TypeToString(func.ReturnType); ", "; <br>            Select Case func.InvocationKind <br>                Case INVOKE_PROPERTYGET <br>                   Print #1, "get_"; <br>                Case INVOKE_PROPERTYPUT <br>                   Print #1, "put_"; <br>                Case INVOKE_PROPERTYPUTREF <br>                   Print #1, "putref_"; <br>            End Select <br>            Set params = func.Parameters <br>            If params.Count = 0 Then <br>               Print #1, func.Name; ")(THIS"; <br>            Else <br>              Print #1, func.Name; ")(THIS_ "; <br>            End If <br>             <br>            ' Ouput the parameters of the function <br>            For k = 0 To params.Count - 1 <br>                Set param = params.Item(k) <br>                Print #1, TypeToString(param.Type); " "; <br>                Print #1, param.Name; <br>                If k &lt; params.Count - 1 Then <br>                    Print #1, ", "; <br>                End If <br>            Next k <br>            Print #1, ") PURE;"; <br>            Print #1, <br>        Next j <br>        Print #1, "};" <br>         <br>    Case TKIND_DISPATCH 'dispinterface or dual interface <br>        TypeFlags = tinfo.TypeFlags() <br>        ' Check if this is the dispinterface component of <br>        ' a dual interface. If so get the interface component of the dual interface <br>        If TypeFlags And TYPEFLAG_FDUAL Then <br>            Set tinfo = tinfo.Interface <br>            Set tinfoBase = tinfo.BaseInterface <br>            Print #1, "DEFINE_GUID(IID_"; tinfo.Name; ","; FormatGUID(tinfo.GUIDAsString); ");" <br>            Print #1, "DECLARE_INTERFACE_("; tinfo.Name; ", "; tinfoBase.Name; ")" <br>            Print #1, "{" <br>             <br>            ' Output the functions in the interface <br>            Set funcs = tinfo.Functions <br>            For j = 0 To funcs.Count - 1 <br>                Set func = funcs.Item(j) <br>                Print #1, Tab(2); "STDMETHOD_("; TypeToString(func.ReturnType); ", "; <br>                Select Case func.InvocationKind <br>                    Case INVOKE_PROPERTYGET <br>                       Print #1, "get_"; <br>                    Case INVOKE_PROPERTYPUT <br>                       Print #1, "put_"; <br>                    Case INVOKE_PROPERTYPUTREF <br>                      Print #1, "putref_"; <br>                End Select <br>                Set params = func.Parameters <br>                If params.Count = 0 Then <br>                    Print #1, func.Name; ")(THIS"; <br>                Else <br>                     Print #1, func.Name; ")(THIS_ "; <br>                End If <br>                 <br>                ' Ouput the parameters of the function <br>                For k = 0 To params.Count - 1 <br>                    Set param = params.Item(k) <br>                    Print #1, TypeToString(param.Type); " "; <br>                    Print #1, param.Name; <br>                    If k &lt; params.Count - 1 Then <br>                        Print #1, ", "; <br>                    End If <br>                Next k <br>                Print #1, ") PURE;"; <br>                Print #1, <br>            Next j <br>            Print #1, "};" <br>        End If <br>         <br>    Case TKIND_ALIAS     'Alias <br>        Print #1, "typedef "; TypeToString(tinfo.BaseType); " "; tinfo.Name; ";" <br>         <br>    Case TKIND_COCLASS  'CoClass <br>         Print #1, "DEFINE_GUID(CLSID_"; tinfo.Name; ","; FormatGUID(tinfo.GUIDAsString); ");" <br> <br>  End Select <br>  Print #1, <br>Next i <br> <br>Close #1 <br>MsgBox SaveOutputDialog.filename + " has been generated", , "Header File Generator" <br>DialogCancel:   'User cancelled the dialog <br>End Sub <br> <br>' Convert a type to a string <br>Private Function TypeToString(typeObj As Object) As String <br>  Dim s As String <br>  Dim p As Object <br>  Dim u As Object <br> <br>  t = typeObj.Type <br>  Select Case t <br>     Case VT_I2 <br>         s = "short" <br>     Case VT_I4 <br>         s = "long" <br>     Case VT_R4 <br>         s = "float" <br>     Case VT_R8 <br>         s = "double" <br>     Case VT_CY <br>         s = "CURRENCY" <br>     Case VT_DATE <br>         s = "DATE" <br>     Case VT_BSTR <br>         s = "BSTR" <br>     Case VT_DISPATCH <br>         s = "IDispatch FAR*" <br>     Case VT_ERROR <br>         s = "SCODE" <br>     Case VT_BOOL <br>         s = "VARIANT_BOOL" <br>     Case VT_VARIANT <br>         s = "VARIANT" <br>     Case VT_UNKNOWN <br>         s = "IUnknown FAR*" <br>     Case VT_I1 <br>         s = "char" <br>     Case VT_UI1 <br>         s = "unsigned char" <br>     Case VT_UI2 <br>         s = "unsigned short" <br>     Case VT_UI4 <br>         s = "unsigned long" <br>     Case VT_I8 <br>         s = "64-bit int" <br>     Case VT_UI8 <br>         s = "unsigned 64-bit int" <br>     Case VT_INT <br>         s = "int" <br>     Case VT_UINT <br>         s = "unsigned int" <br>     Case VT_VOID <br>         s = "void" <br>     Case VT_HRESULT <br>         s = "HRESULT" <br>     Case VT_PTR <br>         Set p = typeObj.PointerDesc <br>         s = TypeToString(p) + " FAR*" <br>     Case VT_SAFEARRAY <br>         s = "SAFEARRAY FAR*" <br>     Case VT_USERDEFINED <br>         Set u = typeObj.UserDefinedDesc <br>         s = u.Name <br>     Case VT_LPSTR <br>         s = "char FAR*" <br>     Case VT_LPWSTR <br>         s = "WCHAR FAR*" <br>          <br>  End Select <br>  If t And &amp;H2000 Then <br>     s = "SAFEARRAY(" + s + ")" <br>  End If <br>  TypeToString = s <br>End Function <br> <br>'Return a formatted GUID <br>Private Function FormatGUID(guid As String) As String <br> <br>s1 = "0x" + Mid(guid, 2, 8) + "L," <br>s2 = "0x" + Mid(guid, 11, 4) + "," + "0x" + Mid(guid, 16, 4) + "," <br>s3 = "0x" + Mid(guid, 21, 2) + "," + "0x" + Mid(guid, 23, 2) + "," <br>s4 = "0x" + Mid(guid, 26, 2) + "," + "0x" + Mid(guid, 28, 2) + "," <br>s5 = "0x" + Mid(guid, 30, 2) + "," + "0x" + Mid(guid, 32, 2) + "," <br>s6 = "0x" + Mid(guid, 34, 2) + "," + "0x" + Mid(guid, 36, 2) <br> <br>FormatGUID = s1 + s2 + s3 + s4 + s5 + s6 <br>End Function <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPEINFO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1384"></a>TYPEINFO.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation TypeLibrary Browse Helper Sample <br>** <br>**  typeinfo.cpp <br>** <br>**  CTypeInfo implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif  <br>#include "browseh.h"   <br> <br>/* <br> * CTypeInfo::Create <br> * <br> * Purpose: <br> *  Creates an instance of the TypeInfo automation object and initializes it. <br> * <br> * Parameters:        <br> *  ptinfo        TypeInfo in type library.. <br> *  ppTypeInfo    Returns TypeInfo automation object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT  <br>CTypeInfo::Create(LPTYPEINFO ptinfo, CTypeInfo FAR* FAR* ppTypeInfo)  <br>{    <br>    HRESULT hr; <br>    CTypeInfo FAR* pTypeInfo = NULL; <br>      <br>    *ppTypeInfo = NULL; <br>     <br>    // Create application object. <br>    pTypeInfo = new CTypeInfo(); <br>    if (pTypeInfo == NULL) <br>    { <br>        hr = E_OUTOFMEMORY;  <br>        goto error; <br>    }     <br>    // Load type information for the application object from type library.  <br>    hr = pTypeInfo-&gt;LoadTypeInfo(IID_ITypeInformation); <br>    if (FAILED(hr)) <br>        goto error;     <br>    hr = pTypeInfo-&gt;_InitTypeInfo(ptinfo); <br>    if (FAILED(hr)) <br>        goto error; <br> <br>#ifdef _DEBUG   <br>    lstrcpyn(pTypeInfo-&gt;m_szClassName, TEXT("TypeInfo"), 100); <br>#endif <br>         <br>    *ppTypeInfo = pTypeInfo; <br>    return NOERROR; <br>     <br>error: <br>    if (pTypeInfo == NULL) return E_OUTOFMEMORY; <br>     <br>    delete pTypeInfo; <br>    return hr; <br>} <br> <br>/* <br> * CTypeInfo::CTypeInfo <br> * <br> * Purpose: <br> *  Constructor for CTypeInfo object. Initializes members to NULL. <br> * <br> */ <br>CTypeInfo::CTypeInfo() <br>{    <br>    m_bstrName = NULL; <br>    m_bstrDocumentation = NULL; <br>    m_bstrHelpFile = NULL; <br>        m_pszGUID = NULL; <br>} <br> <br>/* <br> * CTypeInfo::~CTypeInfo <br> * <br> * Purpose: <br> *  Destructor for CTypeInfo object.  <br> * <br> */ <br>CTypeInfo::~CTypeInfo() <br>{     <br>     if (m_bstrName) SysFreeString(m_bstrName); <br>     if (m_bstrDocumentation) SysFreeString(m_bstrDocumentation); <br>     if (m_bstrHelpFile) SysFreeString(m_bstrHelpFile); <br> <br>#ifdef WIN32 <br>    if (m_pszGUID) CoTaskMemFree(m_pszGUID); <br>#else <br>    HRESULT hr; <br>    LPMALLOC pmalloc; <br>    if (m_pszGUID) <br>    { <br>       hr = CoGetMalloc(MEMCTX_TASK, &amp;pmalloc); <br>       if (SUCCEEDED(hr)) <br>       { <br>           pmalloc-&gt;Free(m_pszGUID); <br>           pmalloc-&gt;Release(); <br>       } <br>    } <br>#endif  <br>} <br> <br>STDMETHODIMP_(REFCLSID) <br>CTypeInfo::GetInterfaceID() <br>{ <br>    return IID_ITypeInformation; <br>}     <br> <br>STDMETHODIMP <br>CTypeInfo::_InitTypeInfo(LPTYPEINFO ptinfo) <br>{    <br>    HRESULT hr; <br>    LPTYPELIB ptlib = NULL; <br>    unsigned int nIndex;  <br>    LPTYPEATTR ptypeattr; <br>     <br>    // Get information from TYPEATTR <br>    hr = ptinfo-&gt;GetTypeAttr(&amp;ptypeattr); <br>    if (FAILED(hr)) <br>        return hr; <br>    m_typekind = ptypeattr-&gt;typekind; <br>    m_guid = ptypeattr-&gt;guid;  <br>        m_wTypeFlags = ptypeattr-&gt;wTypeFlags; <br>    ptinfo-&gt;ReleaseTypeAttr(ptypeattr); <br>            <br>    hr = ptinfo-&gt;GetContainingTypeLib(&amp;ptlib, &amp;nIndex);   <br>    if (FAILED(hr))   <br>    {    <br>        if (hr == E_NOTIMPL)  //Supportes runtime typeinfo browsing. (Type info <br>                                        //obtained from IDispatch::GetTypeInfo does not have a containing <br>                                        //type library).         <br>           return NOERROR; <br>        else return hr; <br>    } <br>    hr = ptlib-&gt;GetDocumentation(nIndex, &amp;m_bstrName, &amp;m_bstrDocumentation, <br>             &amp;m_ulHelpContext, &amp;m_bstrHelpFile);   <br>    if (FAILED(hr)) <br>        goto error; <br>    ptlib-&gt;Release(); <br>    return NOERROR;  <br> <br>error:  <br>    if (ptlib) ptlib-&gt;Release();  <br>    if (m_bstrName) SysFreeString(m_bstrName); <br>    if (m_bstrDocumentation) SysFreeString(m_bstrDocumentation); <br>    if (m_bstrHelpFile) SysFreeString(m_bstrHelpFile);        <br>    m_bstrName = NULL; <br>    m_bstrDocumentation = NULL; <br>    m_bstrHelpFile = NULL; <br>    return hr;  <br>} <br>  <br>STDMETHODIMP_(BSTR) <br>CTypeInfo::get_Name()      <br>{ <br>    return SysAllocString(m_bstrName); <br>}   <br> <br>STDMETHODIMP_(BSTR) <br>CTypeInfo::get_Documentation()      <br>{ <br>    return SysAllocString(m_bstrDocumentation); <br>}   <br> <br>STDMETHODIMP_(long) <br>CTypeInfo::get_HelpContext()      <br>{ <br>    return (long)m_ulHelpContext; <br>} <br> <br>STDMETHODIMP_(BSTR) <br>CTypeInfo::get_HelpFile()      <br>{ <br>    return SysAllocString(m_bstrHelpFile); <br>}    <br> <br>STDMETHODIMP_(TYPEKIND) <br>CTypeInfo::get_TypeInfoKind()      <br>{ <br>    return m_typekind; <br>} <br> <br>STDMETHODIMP_(short) <br>CTypeInfo::get_TypeFlags()      <br>{ <br>    return m_wTypeFlags; <br>} <br> <br>STDMETHODIMP_(BSTR) <br>CTypeInfo::get_GUIDAsString()      <br>{ <br>        if (m_pszGUID == NULL) <br>            StringFromCLSID(m_guid, &amp;m_pszGUID); <br>    return SysAllocString(m_pszGUID); <br>}  </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1407"></a>README.TXT</h2>
<pre><code>OLE Automation Sample <br> <br> <br>SUMMARY <br>======= <br> <br>The DspCalc2 sample is a simple accumulator-based calculator. Its user <br>interface consists of buttons for the numbers (0-9), the operators  <br>(+, -, *, /), and some other necessary buttons (C for Clear, = for  <br>evaluation). Its programmability interface consists of one object, which is  <br>described below. <br> <br>The ProgID for DspCalc2's only object is "DspCalc2.Application". An instance <br>of this object can be created by executing the following lines of code in  <br>Visual Basic or DispTest: <br> <br>    Sub Foo <br>        Dim MyCalculator as Object <br>        Set MyCalculator = CreateObject("DspCalc2.Application") <br>        . . . <br>    End Sub <br> <br>MORE INFORMATION <br>================ <br> <br>Program Structure <br>----------------- <br> <br>DspCalc2 uses a type library and CreateStdDispatch to implement the <br>IDispatch interface. <br> <br>Properties for the Object <br>------------------------- <br> <br>Name     Type     Description <br> <br>Value    VT_I4    Same as the value for the accumulator. <br>Accum    VT_I4    The value that is in the accumulator of the calculator. <br>Opnd     VT_I4    The operand. This is the number currently being entered. <br>Op       VT_I2    The operator that is currently being used. This is an  <br>                  enumeration: <br>                      const OP_NONE = 0 <br>                      const OP_PLUS = 1  <br>                      const OP_MINUS = 2 <br>                      const OP_MULT = 3 <br> <br>Methods Defined on the Object <br>----------------------------- <br> <br>Name                               Description <br> <br>Eval as Boolean                    If there is an operator, apply it to the <br>                                   accumulator and the operand, placing the <br>                                   result in the accumulator. The return  <br>                                   value indicates success or failure. <br>Clear                              Resets the calculator. This sets Op to <br>                                   OP_NONE, and both Accum and Opnd to 0. <br>Display                            Updates the display of the calculator. <br>                                   (Other operations do not do this.) <br>Quit                               Close the calculator. <br>Button (b as string) as Boolean    Press the indicated button and return <br>                                   success or failure. Valid string values  <br>                                   are: <br>                                       +, -, *, + <br>                                       0-9 <br>                                       c, C <br>                                       = <br> <br>                                   Note that you may also pass the numbers  <br>                                   0-9 and these will be converted to  <br>                                   strings automatically. <br> <br>Shortcomings of this Sample <br>--------------------------- <br> <br>Property and method names should not be abbreviated. For example, the "Opnd"  <br>property should be the "Operand" property. <br> <br>Because the object is the application object, it should have Name and  <br>Version properties, which are read-only. </code></pre>
<p>&nbsp;</p></body>
</HTML>

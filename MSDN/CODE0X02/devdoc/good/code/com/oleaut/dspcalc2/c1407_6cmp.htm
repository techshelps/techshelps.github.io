<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSPCALC2.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1411"></a>DSPCALC2.H</h2>
<pre><code>/***  <br>*dspcalc2.h <br>* <br>*  This is a part of the Microsoft Source Code Samples. <br>* <br>*  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>* <br>*  This source code is only intended as a supplement to Microsoft Development <br>*  Tools and/or WinHelp documentation.  See these sources for detailed <br>*  information regarding the Microsoft samples programs. <br>* <br>*Purpose: <br>* <br>* <br>*Implementation Notes: <br>* <br>*****************************************************************************/ <br> <br>#include "hostenv.h" <br>#include "resource.h" <br>#include "clsid.h"  <br> <br>#ifndef CLASS <br># ifdef __TURBOC__ <br>#  define CLASS class huge <br># else <br>#  define CLASS class FAR <br># endif <br>#endif <br> <br>#pragma warning(disable:4355) <br> <br>#ifdef _MAC <br>typedef void * LPVOID; <br>typedef unsigned long ULONG; <br>typedef int BOOL; <br>typedef unsigned int UINT; <br>typedef unsigned short WORD; <br>typedef unsigned char BYTE; <br>typedef unsigned long DWORD; <br>typedef long LONG; <br>#define FALSE 0 <br>#define TRUE  1 <br>#define NEAR  <br>#endif <br> <br>#ifdef _MAC <br># define UNUSED(X) ((void)(void*)&amp;(X)) <br>#else <br># define UNUSED(X) (X) <br>#endif <br> <br> <br>/*  <br> * The .h file included below is created via MkTypLib <br> */ <br>#include "calctype.h" <br> <br>#pragma warning(disable:4355) <br> <br>#define DIM(X) (sizeof(X)/sizeof(X[0])) <br> <br> <br>// forward decl <br>CLASS CCalc; <br> <br> <br>// Introduced "calculator" interface <br>// <br>// This nested class implementes core arithmetic functionality <br>// (such as it is) *and* is the interface that will be exposed via <br>// IDispatch for external programmability. <br>// <br>CLASS CArith : public _ICalculator { <br> public: <br> <br>  /* IUnknown methods */ <br>  STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR * ppvObj); <br>  STDMETHOD_(ULONG, AddRef)(THIS); <br>  STDMETHOD_(ULONG, Release)(THIS); <br> <br>  /* ICalculator methods */ <br>  STDMETHOD_(void, put_Accum)(long l); <br>  STDMETHOD_(long, get_Accum)(void); <br>  STDMETHOD_(void, put_Opnd)(long l); <br>  STDMETHOD_(long, get_Opnd)(void); <br>  STDMETHOD_(void, put_Op)(OPERATORS op); <br>  STDMETHOD_(OPERATORS, get_Op)(void); <br>  STDMETHOD_(VARIANT_BOOL, Eval)(void); <br>  STDMETHOD_(void, DCClear)(void); <br>  STDMETHOD_(void, Display)(void); <br>  STDMETHOD_(void, Quit)(void); <br>  STDMETHOD_(VARIANT_BOOL, Button)(SAFEARRAY FAR* psa); <br> <br>  // the following method is internal, and not exposed for programmability <br>  BOOL ButtonPush(int button); <br> <br>  CArith(CCalc FAR* pcalc){ <br>     m_pcalc = pcalc; <br>     DCClear(); <br>  } <br> <br>  enum states { STATE_LOPND, STATE_OP, STATE_ROPND, STATE_EVAL }; <br> <br> private: <br>  CCalc FAR* m_pcalc; <br>  OPERATORSm_op; <br>  longm_opnd; <br>  longm_accum; <br>  enum states m_state; <br>}; <br> <br>     <br>CLASS CCalc : public IUnknown { <br>public: <br>    friend CArith; <br>     <br>    static CCalc FAR* Create(); <br> <br>    STDMETHOD(QueryInterface)(REFIID riid, void FAR* FAR* ppv); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void); <br> <br>    CCalc() : m_arith(this) <br>    { <br>      m_refs = 0; <br>#ifdef _MAC <br>      m_pdlg = nil; <br>#else <br>      m_hwnd = 0; <br>#endif <br>      m_punkStdDisp = NULL; <br>    } <br>     <br>#ifdef _MAC <br>    DialogPtr m_pdlg;  <br>#else <br>    HWND m_hwnd; <br>#endif <br>    CArith m_arith; <br> <br>private: <br>    ULONG m_refs; <br>    IUnknown FAR* m_punkStdDisp; <br>}; <br> <br> <br>// the CCalc Class Factory <br>// <br>CLASS CCalcCF : public IClassFactory { <br>public: <br>    static IClassFactory FAR* Create(); <br> <br>    STDMETHOD(QueryInterface)(REFIID riid, void FAR* FAR* ppv); <br>    STDMETHOD_(ULONG, AddRef)(void); <br>    STDMETHOD_(ULONG, Release)(void); <br> <br>    STDMETHOD(CreateInstance)( <br>      IUnknown FAR* punkOuter, REFIID riid, void FAR* FAR* ppv); <br>#ifdef _MAC <br>    STDMETHOD(LockServer)(unsigned long fLock); <br>#else <br>    STDMETHOD(LockServer)(BOOL fLock); <br>#endif <br> <br>    CCalcCF() { m_refs = 1; } <br> <br>private: <br>    ULONG m_refs; <br>}; <br> <br>extern HRESULT InitOle(void); <br>extern HRESULT UninitOle(void); <br> <br>extern CCalc FAR* g_pcalc; </code></pre>
<p>&nbsp;</p></body>
</HTML>

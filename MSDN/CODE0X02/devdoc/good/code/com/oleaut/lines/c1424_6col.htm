<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPCF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1425"></a>APPCF.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Simple InProc Automation Object. <br>** <br>**  Applicationcf.cpp <br>** <br>**  CApplicationCF (class factory) implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif       <br>#include "lines.h"  <br> <br>CApplicationCF::CApplicationCF(void) <br>{     <br>    m_cRef = 0;  <br>} <br> <br>/* <br> * CApplicationCF::QueryInterface, AddRef, Release <br> * <br> * Purpose: <br> *  Implements IUnknown::QueryInterface, AddRef, Release <br> * <br> */ <br>STDMETHODIMP <br>CApplicationCF::QueryInterface(REFIID iid, void FAR* FAR* ppv)  <br>{    <br>    *ppv = NULL; <br>     <br>    if (iid == IID_IUnknown || iid == IID_IClassFactory) <br>        *ppv = this; <br>    else  <br>        return E_NOINTERFACE;  <br> <br>    AddRef(); <br>    return NOERROR;     <br>} <br> <br> <br>STDMETHODIMP_(ULONG) <br>CApplicationCF::AddRef(void) <br>{ <br>    return ++m_cRef; <br>} <br> <br> <br>STDMETHODIMP_(ULONG) <br>CApplicationCF::Release(void) <br>{    <br>    if(--m_cRef == 0) <br>    { <br>        delete this; <br>        return 0; <br>    } <br>    return m_cRef; <br>} <br> <br>/* <br> * CApplicationCF::CreateInstance, LockServer <br> * <br> * Purpose: <br> *  Implements IClassFactory::CreateInstance, LockServer <br> * <br> */ <br>STDMETHODIMP <br>CApplicationCF::CreateInstance(IUnknown FAR* punkOuter, <br>                         REFIID riid, <br>                         void FAR* FAR* ppv) <br>{ <br>    HRESULT hr; <br>     <br>    *ppv = NULL; <br>     <br>    // This implementation does'nt allow aggregation <br>    if (punkOuter) <br>        return CLASS_E_NOAGGREGATION; <br>     <br>    // This is REGCLS_SINGLEUSE class factory, so CreateInstance will be <br>    // called atmost once. An application objects has a REGCLS_SINGLEUSE class <br>    // factory. The global application object has already been created when  <br>    // CreateInstance is called. A REGCLS_MULTIPLEUSE class factory's  <br>    // CreateInstance would be called multiple times and would create a new  <br>    // object each time. An MDI application would have a REGCLS_MULTIPLEUSE  <br>    // class factory for it's document objects.              <br>    hr = g_pApplication-&gt;QueryInterface(riid, ppv); <br>    if (FAILED(hr))  <br>    { <br>        g_pApplication-&gt;Quit(); <br>        return hr; <br>    }    <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP <br>CApplicationCF::LockServer(BOOL fLock) <br>{ <br>    CoLockObjectExternal(g_pApplication, fLock, TRUE);  <br>    return NOERROR;      <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

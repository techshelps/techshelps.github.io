<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENUMVAR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1426"></a>ENUMVAR.CPP</h2>
<pre><code>/************************************************************************* <br>** <br>**  This is a part of the Microsoft Source Code Samples. <br>** <br>**  Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>** <br>**  This source code is only intended as a supplement to Microsoft Development <br>**  Tools and/or WinHelp documentation.  See these sources for detailed <br>**  information regarding the Microsoft samples programs. <br>** <br>**  OLE Automation Lines Object. <br>** <br>**  enumvar.cpp <br>** <br>**  CEnumVariant implementation <br>** <br>**  Written by Microsoft Product Support Services, Windows Developer Support <br>** <br>*************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16    <br>  #include &lt;ole2.h&gt; <br>  #include &lt;compobj.h&gt;     <br>  #include &lt;dispatch.h&gt;  <br>  #include &lt;variant.h&gt; <br>  #include &lt;olenls.h&gt;   <br>#endif       <br>#include "lines.h"   <br> <br>/* <br> * CEnumVariant::Create <br> * <br> * Purpose: <br> *  Creates an instance of the IEnumVARIANT enumerator object and initializes it. <br> * <br> * Parameters: <br> *  psa        Safe array containing items to be enumerated. <br> *  cElements  Number of items to be enumerated.  <br> *  ppenumvariant    Returns enumerator object. <br> * <br> * Return Value: <br> *  HRESULT <br> * <br> */ <br>HRESULT <br>CEnumVariant::Create(SAFEARRAY FAR* psa, ULONG cElements, CEnumVariant FAR* FAR* ppenumvariant)  <br>{    <br>    HRESULT hr; <br>    CEnumVariant FAR* penumvariant = NULL; <br>    long lLBound; <br>                       <br>    *ppenumvariant = NULL; <br>     <br>    penumvariant = new CEnumVariant(); <br>    if (penumvariant == NULL) <br>        goto error;  <br>         <br>    penumvariant-&gt;m_cRef = 0; <br>     <br>    // Copy elements into safe array that is used in enumerator implemenatation and  <br>    // initialize state of enumerator. <br>    hr = SafeArrayGetLBound(psa, 1, &amp;lLBound); <br>    if (FAILED(hr)) <br>        goto error; <br>    penumvariant-&gt;m_cElements = cElements;     <br>    penumvariant-&gt;m_lLBound = lLBound; <br>    penumvariant-&gt;m_lCurrent = lLBound;                   <br>    hr = SafeArrayCopy(psa, &amp;penumvariant-&gt;m_psa); <br>    if (FAILED(hr)) <br>       goto error; <br>     <br>    *ppenumvariant = penumvariant; <br>    return NOERROR; <br>     <br>error:  <br>    if (penumvariant == NULL) <br>        return E_OUTOFMEMORY;    <br>                               <br>    if (penumvariant-&gt;m_psa)  <br>        SafeArrayDestroy(penumvariant-&gt;m_psa);    <br>    penumvariant-&gt;m_psa = NULL;      <br>    delete penumvariant; <br>    return hr; <br>} <br> <br>/* <br> * CEnumVariant::CEnumVariant <br> * <br> * Purpose: <br> *  Constructor for CEnumVariant object. Initializes members to NULL. <br> * <br> */ <br>CEnumVariant::CEnumVariant() <br>{     <br>    m_psa = NULL; <br>} <br> <br>/* <br> * CEnumVariant::~CEnumVariant <br> * <br> * Purpose: <br> *  Destructor for CEnumVariant object.  <br> * <br> */ <br>CEnumVariant::~CEnumVariant() <br>{                    <br>    if (m_psa) SafeArrayDestroy(m_psa); <br>} <br> <br>/* <br> * CEnumVariant::QueryInterface, AddRef, Release <br> * <br> * Purpose: <br> *  Implements IUnknown::QueryInterface, AddRef, Release <br> * <br> */ <br>STDMETHODIMP <br>CEnumVariant::QueryInterface(REFIID iid, void FAR* FAR* ppv)  <br>{    <br>    *ppv = NULL; <br>         <br>    if (iid == IID_IUnknown || iid == IID_IEnumVARIANT)  <br>        *ppv = this;      <br>    else return E_NOINTERFACE;  <br> <br>    AddRef(); <br>    return NOERROR;     <br>} <br> <br> <br>STDMETHODIMP_(ULONG) <br>CEnumVariant::AddRef(void) <br>{ <br> <br>#ifdef _DEBUG    <br>    TCHAR ach[50]; <br>    wsprintf(ach, TEXT("Ref = %ld, Enum\r\n"), m_cRef+1);  <br>    OutputDebugString(ach);  <br>#endif   <br>     <br>    return ++m_cRef;  // AddRef Application Object if enumerator will outlive application object <br>} <br> <br> <br>STDMETHODIMP_(ULONG) <br>CEnumVariant::Release(void) <br>{ <br> <br>#ifdef _DEBUG    <br>    TCHAR ach[50]; <br>    wsprintf(ach, TEXT("Ref = %ld, Enum\r\n"), m_cRef-1);  <br>    OutputDebugString(ach);  <br>#endif   <br>     <br>    if(--m_cRef == 0) <br>    { <br>        delete this; <br>        return 0; <br>    } <br>    return m_cRef; <br>} <br> <br>/* <br> * CEnumVariant::Next <br> * <br> * Purpose: <br> *  Retrieves the next cElements elements. Implements IEnumVARIANT::Next.  <br> * <br> */ <br>STDMETHODIMP <br>CEnumVariant::Next(ULONG cElements, VARIANT FAR* pvar, ULONG FAR* pcElementFetched) <br>{  <br>    HRESULT hr; <br>    ULONG l; <br>    long l1; <br>    ULONG l2; <br>     <br>    if (pcElementFetched != NULL) <br>        *pcElementFetched = 0; <br>         <br>    // Retrieve the next cElements elements. <br>    for (l1=m_lCurrent, l2=0; l1&lt;(long)(m_lLBound+m_cElements) &amp;&amp; l2&lt;cElements; l1++, l2++) <br>    { <br>       hr = SafeArrayGetElement(m_psa, &amp;l1, &amp;pvar[l2]);  <br>       if (FAILED(hr)) <br>           goto error;  <br>    } <br>    // Set count of elements retrieved <br>    if (pcElementFetched != NULL) <br>        *pcElementFetched = l2; <br>    m_lCurrent = l1; <br>     <br>    return  (l2 &lt; cElements) ? S_FALSE : NOERROR; <br> <br>error: <br>    for (l=0; l&lt;cElements; l++) <br>        VariantClear(&amp;pvar[l]); <br>    return hr;     <br>} <br> <br>/* <br> * CEnumVariant::Skip <br> * <br> * Purpose: <br> *  Skips the next cElements elements. Implements IEnumVARIANT::Skip.  <br> * <br> */ <br>STDMETHODIMP <br>CEnumVariant::Skip(ULONG cElements) <br>{    <br>    m_lCurrent += cElements;  <br>    if (m_lCurrent &gt; (long)(m_lLBound+m_cElements)) <br>    { <br>        m_lCurrent =  m_lLBound+m_cElements; <br>        return S_FALSE; <br>    }  <br>    else return NOERROR; <br>} <br> <br>/* <br> * CEnumVariant::Reset <br> * <br> * Purpose: <br> *  Resets the current element in the enumerator to the beginning. Implements IEnumVARIANT::Reset.  <br> * <br> */ <br>STDMETHODIMP <br>CEnumVariant::Reset() <br>{  <br>    m_lCurrent = m_lLBound; <br>    return NOERROR; <br>} <br> <br>/* <br> * CEnumVariant::Clone <br> * <br> * Purpose: <br> *  Creates a copy of the current enumeration state. Implements IEnumVARIANT::Clone.  <br> * <br> */ <br>STDMETHODIMP <br>CEnumVariant::Clone(IEnumVARIANT FAR* FAR* ppenum) <br>{ <br>    CEnumVariant FAR* penum = NULL; <br>    HRESULT hr; <br>     <br>    *ppenum = NULL; <br>     <br>    hr = CEnumVariant::Create(m_psa, m_cElements, &amp;penum); <br>    if (FAILED(hr)) <br>        goto error;         <br>    penum-&gt;AddRef(); <br>    penum-&gt;m_lCurrent = m_lCurrent;  <br>     <br>    *ppenum = penum;         <br>    return NOERROR; <br>      <br>error: <br>    if (penum) <br>        penum-&gt;Release(); <br>    return hr;         <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

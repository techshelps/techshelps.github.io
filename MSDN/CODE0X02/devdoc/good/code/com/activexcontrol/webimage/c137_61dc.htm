<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WIMGCTL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context150"></a>WIMGCTL.H</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// WImgCtl.H <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// class declaration for the WebImage control. <br>// <br>#ifndef _WEBIMAGECONTROL_H_ <br> <br>#include "IPServer.H" <br>#include "CtrlObj.H" <br>#include "Internet.h" <br>#include "WImgInterfaces.H" <br>#include "Dispids.H" <br> <br> <br>#include "DibCls.H" <br> <br>typedef struct tagWEBIMAGECTLSTATE { <br> <br>    // TOOD: put state variables here, and probably get rid of fGarbage, unless <br>    // you have a real need for it <br>    // <br>    VARIANT_BOOL fGarbage; <br> <br>} WEBIMAGECTLSTATE; <br> <br>//=--------------------------------------------------------------------------= <br>// CWebImageControl <br>//=--------------------------------------------------------------------------= <br>// our control. <br>// <br>class CWebImageControl :       public CInternetControl,  <br>                                                                        public IWebImage,  <br>public ISupportErrorInfo { <br> <br>  public: <br>    // IUnknown methods <br>    // <br>    DECLARE_STANDARD_UNKNOWN(); <br> <br>    // IDispatch methods <br>    // <br>    DECLARE_STANDARD_DISPATCH(); <br> <br>    // ISupportErrorInfo methods <br>    // <br>    DECLARE_STANDARD_SUPPORTERRORINFO(); <br> <br>    // IWebImage methods <br>    // <br>    // TODO: copy over the method declarations from WebImageInterfaces.H <br>    //       don't forget to remove the PURE from them. <br>    // <br>    STDMETHOD(get_Image)(THIS_ BSTR FAR* path) ; <br>    STDMETHOD(put_Image)(THIS_ BSTR path) ; <br>    STDMETHOD_(void, AboutBox)(THIS) ; <br>    STDMETHOD(Scramble)(THIS) ; <br> <br>    // OLE Control stuff follows: <br>    // <br>    CWebImageControl(IUnknown *pUnkOuter); <br>    virtual ~CWebImageControl(); <br> <br>    // static creation function.  all controls must have one of these! <br>    // <br>    static IUnknown *Create(IUnknown *); <br> <br>  private: <br>    // overridables that the control must implement. <br>    // <br>    STDMETHOD(LoadBinaryState)(IStream *pStream); <br>    STDMETHOD(SaveBinaryState)(IStream *pStream); <br>    STDMETHOD(LoadTextState)(IPropertyBag *pPropertyBag, IErrorLog *pErrorLog); <br>    STDMETHOD(SaveTextState)(IPropertyBag *pPropertyBag, BOOL fWriteDefault); <br>    STDMETHOD(OnDraw)(DWORD dvAspect, HDC hdcDraw, LPCRECTL prcBounds, LPCRECTL prcWBounds, HDC hicTargetDev, BOOL fOptimize); <br>    virtual LRESULT WindowProc(UINT msg, WPARAM wParam, LPARAM lParam); <br>    virtual BOOL    RegisterClassData(void); <br> <br>    virtual HRESULT InternalQueryInterface(REFIID, void **); <br>    virtual void    BeforeCreateWindow(void); <br> <br>    virtual BOOL    AfterCreateWindow(void); <br> <br>//Internet specific callbacks: <br>// <br>///OnData is called asynchronously as data for an object or property arrives... <br>virtual HRESULT OnData( DISPID id, DWORD grfBSCF,IStream * bitstrm, DWORD amount ); <br> <br>//OnProgess is called to allow you to present progess indication UI <br>virtual HRESULT OnProgress( DISPID, ULONG progress, ULONG themax, ULONG, LPCWSTR); <br> <br> <br>    // private state information. <br>    // <br> <br>HRESULT SetBmpPath(const char *psz); <br>HRESULT SetBmpPath(IStream *); <br>    HRESULT UpdateImage(); <br> <br>enum bmpDownloadStates <br>{ <br>bdsNoBitsYet, <br>bdsGotFileHeader, <br>        bdsGotBitmapInfo, <br>bdsGettingBits, <br>bdsBitsAreDone <br>}; <br> <br> <br>HDCm_dc; <br>bmpDownloadStatesm_state; <br>CDibFile *m_dibFile; <br>CDibSection *m_dib; <br> <br>// Actual properties <br>char *m_bmpPath; <br> <br>}; <br> <br> <br>// TODO: if you have an array of verbs, then add an extern here with the name <br>//       of it, so that you can include it in the DEFINE_CONTROLOBJECT. <br>//       ie.  extern VERBINFO m_WebImageCustomVerbs []; <br>// <br>extern const GUID    *rgWebImagePropPages []; <br>DEFINE_CONTROLOBJECT(WebImage, <br>    &amp;CLSID_WebImage, <br>    "WebImageCtl", <br>    CWebImageControl::Create, <br>    1, <br>    &amp;IID_IWebImage, <br>    "WebImage.HLP", <br>    &amp;DIID_DWebImageEvents, <br>    OLEMISC_SETCLIENTSITEFIRST|OLEMISC_ACTIVATEWHENVISIBLE|OLEMISC_RECOMPOSEONRESIZE|OLEMISC_CANTLINKINSIDE|OLEMISC_INSIDEOUT, <br>    0, <br>    RESID_TOOLBOX_BITMAP, <br>    "WebImageWndClass", <br>    1, <br>    rgWebImagePropPages, <br>    0, <br>    NULL); <br> <br> <br> <br>#define _WEBIMAGECONTROL_H_ <br>#endif // _WEBIMAGECONTROL_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

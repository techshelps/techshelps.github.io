<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IODOCVW.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context127"></a>IODOCVW.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// IODocVw.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the IOleDocumentView interface for CDocumentObject <br>// <br>#include "CDocObj.H" <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::SetInPlaceSite[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// associates a view site with this view <br>// <br>// Parameters: <br>//    IOleInPlaceSite *   - [in] pointer to container's view site object <br>// <br>// Output: <br>//    HRESULT             - S_OK, E_FAIL <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::SetInPlaceSite(IOleInPlaceSite* pIPSite) <br>{ <br>    TRACE("\nCDocumentObject::SetInPlaceSite"); <br> <br>    // if view already has an associated site, <br>    //    call IOleInPlaceObject::InPlaceDeactivate and release the site <br>    if (m_pViewSite) <br>    { <br>        InPlaceDeactivate(); <br>        QUICK_RELEASE(m_pViewSite); <br>    } <br> <br>    // remember the new view site <br>    m_pViewSite = pIPSite; <br>    ADDREF_OBJECT(m_pViewSite); <br> <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::GetInPlaceSite[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// retrieves the view site associated with this view <br>// <br>// Parameters: <br>//    IOleInPlaceSite**   - [out] location to return pointer to container's  <br>//                                view site object <br>// <br>// Output: <br>//    HRESULT             - S_OK, E_FAIL <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::GetInPlaceSite(IOleInPlaceSite** ppIPSite) <br>{ <br>    TRACE("\nCDocumentObject::GetInPlaceSite"); <br> <br>    ADDREF_OBJECT(m_pViewSite); <br>    *ppIPSite = m_pViewSite; <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::GetDocument[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// retrieves the document associated with this view <br>// <br>// Parameters: <br>//    IUnknown**   - [out] location to return pointer to our object <br>// <br>// Output: <br>//    HRESULT      - S_OK <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::GetDocument(IUnknown** ppunk) <br>{ <br>    TRACE("\nCDocumentObject::GetDocument"); <br>    return InternalQueryInterface(IID_IUnknown, (void**)ppunk); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::SetRect[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// sets the coordinates of the view port for this view <br>// <br>// Parameters: <br>//    LPRECT   - [in] coordinates of viewpoint in client coordinates of the <br>//                    view window <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_FAIL <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::SetRect(LPRECT prcView) <br>{ <br>    TRACE("\nCDocumentObject::SetRect"); <br> <br>    // SetObjectRects expects object extent to be set, but <br>    // DocObjects ignore SetExtent. Set m_Size to the size  <br>    // specified by the view. <br>    m_Size.cx = prcView-&gt;right - prcView-&gt;left; <br>    m_Size.cy = prcView-&gt;bottom - prcView-&gt;top; <br> <br>    HRESULT hr = SetObjectRects(prcView, prcView); <br>    if (SUCCEEDED(hr)) <br>    { <br>        // SetObjectRects moves but does not resize window so we will  <br>        // do that here... <br>        if (m_hwnd)  <br>            SetWindowPos(m_hwnd, 0, 0, 0, m_Size.cx, m_Size.cy, <br>                         SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE); <br>    } <br>    return hr; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::GetRect[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// retrieves the coordinates of the view port for this view <br>// <br>// Parameters: <br>//    LPRECT   - [out] location to put the coordinates of the viewpoint in  <br>//                     client coordinates of the view window <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_UNEXPECTED <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::GetRect(LPRECT prcView) <br>{ <br>    TRACE("\nCDocumentObject::GetRect"); <br>    if (prcView) <br>    { <br>        prcView-&gt;top    = 0; <br>        prcView-&gt;left   = 0; <br>        prcView-&gt;bottom = m_Size.cy; <br>        prcView-&gt;right  = m_Size.cx; <br>        return S_OK; <br>    } <br>    else <br>        return E_UNEXPECTED; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::SetRectComplex[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// sets the coordinates of the view port, scrollbars, and sizebox for this view <br>// <br>// Parameters: <br>//    LPRECT   - [in] coordinates of viewpoint in client coordinates of the <br>//                    view window <br>//    LPRECT   - [in] coordinates of horizontal scrollbar in client  <br>//                    coordinates of the view window <br>//    LPRECT   - [in] coordinates of vertical scrollbar in client coordinates  <br>//                    of the view window <br>//    LPRECT   - [in] coordinates of sizebox in client coordinates of the <br>//                    view window <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_FAIL, E_NOTIMPL <br>// <br>// Notes:  <br>//      This implementation does not support complex rectangles! <br>// <br>STDMETHODIMP CDocumentObject::SetRectComplex(LPRECT prcView, LPRECT prcHScroll, <br>                                             LPRECT prcVScroll, LPRECT prcSizeBox) <br>{ <br>    TRACE("\nCDocumentObject::SetRectComplex"); <br>    return E_NOTIMPL; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::Show[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to in-place activate or in-place deactivate itself <br>// <br>// Parameters: <br>//    BOOL     - [in] whether to activate or deactivate <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_OUTOFMEMORY, E_FAIL, E_UNEXPECTED <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::Show(BOOL fShow) <br>{ <br>    TRACE("\nEnter CDocumentObject::Show"); <br> <br>    HRESULT hr; <br>    if (fShow) <br>    { <br>        // inplace activate without UI activate &amp; show the view window <br>        hr = ActivateAsDocObject(OLEIVERB_INPLACEACTIVATE); <br>    } <br>    else <br>    { <br>        // UI deactivate <br>        hr = UIActivate(FALSE); <br> <br>        // hide the view window <br>        SetInPlaceVisible(FALSE); <br>    } <br> <br>    TRACE("\nLeave CDocumentObject::Show"); <br>    return hr; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::UIActivate[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to UI activate or deactivate itself <br>// <br>// Parameters: <br>//    BOOL     - [in] whether to activate or deactivate <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_OUTOFMEMORY, E_FAIL, E_UNEXPECTED <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::UIActivate(BOOL fUIActivate) <br>{ <br>    TRACE("\nEnter CDocumentObject::UIActivate"); <br> <br>    HRESULT hr; <br>    if (fUIActivate) <br>    { <br>        // UI activate the view, take focus and bring view window forward <br>        hr = ActivateAsDocObject(OLEIVERB_UIACTIVATE); <br>    } <br>    else <br>    { <br>        // UI deactivate <br>        hr = UIDeactivate(); <br>    } <br> <br>    TRACE("\nLeave CDocumentObject::UIActivate"); <br>    return hr; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::Open[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// asks the view to display itself in a separate popup window  <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_OUTOFMEMORY, E_FAIL, E_UNEXPECTED, E_NOTIMPL <br>// <br>// Notes:  <br>//      This implementation does not support opening a view in a  <br>//      separate window. <br>// <br>STDMETHODIMP CDocumentObject::Open(void) <br>{ <br>    TRACE("\nCDocumentObject::Open"); <br>    return E_NOTIMPL; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::CloseView[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to close down and release its IOleInPlaceSite pointer <br>// <br>// Parameters: <br>//    ULONG    - [in] reserved <br>// <br>// Output: <br>//    HRESULT  - S_OK <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::CloseView(ULONG ulReserved) <br>{ <br>    TRACE("\nCDocumentObject::CloseView"); <br> <br>    // hide the view <br>    Show(FALSE); <br> <br>    // deactivate the object <br>    SetInPlaceSite(NULL); <br> <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::SaveViewState[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to save its state into the given stream <br>// <br>// Parameters: <br>//    IStream* - [in] stream to write to <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_POINTER, E_NOTIMPL <br>// <br>// Notes: <br>// <br>STDMETHODIMP CDocumentObject::SaveViewState(LPSTREAM pstm) <br>{ <br>    TRACE("\nCDocumentObject::SaveViewState"); <br> <br>    // Delegate to a virtual function which specific DocObjects can <br>    // override to save their view state. <br>    return OnSaveViewState(pstm); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::ApplyViewState[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to restore its state from the given stream <br>// <br>// Parameters: <br>//    IStream* - [in] stream to read from <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_POINTER, E_NOTIMPL <br>// <br>// Notes:  <br>// <br>STDMETHODIMP CDocumentObject::ApplyViewState(LPSTREAM pstm) <br>{ <br>    TRACE("\nCDocumentObject::ApplyViewState"); <br> <br>    // Delegate to a virtual function which specific DocObjects can <br>    // override to restore their view state. <br>    return OnApplyViewState(pstm); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::Clone[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// creates a duplicate view with an identical internal state to the current <br>// view <br>// <br>// Parameters: <br>//    IOleInPlaceSite*   - [in] pointer to the inplace site for the clone <br>//    <br>//    IOleDocumentView** - [out] location for the new view pointer <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_POINTER, E_NOTIMPL <br>// <br>// Notes:  <br>//      This implementation does not support multiple views, therefore <br>//      it does not support cloning a view. <br>// <br>STDMETHODIMP CDocumentObject::Clone(IOleInPlaceSite* pIPSiteNew,  <br>                                    IOleDocumentView** ppViewNew) <br>{ <br>    TRACE("\nCDocumentObject::Clone"); <br>    return E_NOTIMPL; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::OnSaveViewState[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// instructs the view to save its state into the given stream <br>// <br>// Parameters: <br>//    IStream* - [in] stream to write to <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_POINTER, E_NOTIMPL <br>// <br>// Notes: <br>//      This function should be overridden by any DocObject which has <br>//      a view state. OnApplyViewState is the corresponding function <br>//      which reads the view state back in. <br>// <br>HRESULT CDocumentObject::OnSaveViewState(LPSTREAM pstm) <br>{ <br>    // Default implementation does nothing <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::OnApplyViewState <br>//=--------------------------------------------------------------------------= <br>// instructs the view to restore its state from the given stream <br>// <br>// Parameters: <br>//    IStream* - [in] stream to read from <br>// <br>// Output: <br>//    HRESULT  - S_OK, E_POINTER, E_NOTIMPL <br>// <br>// Notes:  <br>//      This function should be overridden by any DocObject which has <br>//      a view state. OnSaveViewState is the corresponding function <br>//      which writes the view state out. <br>// <br>HRESULT CDocumentObject::OnApplyViewState(LPSTREAM pstm) <br>{ <br>    // Default implementation does nothing <br>    return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

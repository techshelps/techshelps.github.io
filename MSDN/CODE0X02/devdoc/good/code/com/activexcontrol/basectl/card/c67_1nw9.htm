<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CARDCTL.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context69"></a>CARDCTL.H</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// CardCtl.H <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// class declaration for the Card control. <br>// <br>#ifndef _CARDCONTROL_H_ <br> <br>#include "IPServer.H" <br>#include "CtrlObj.H" <br>#include "CardInterfaces.h" <br>#include "Dispids.H" <br> <br>//=--------------------------------------------------------------------------= <br>// CCARDControl <br>//=--------------------------------------------------------------------------= <br>// our control. <br>// <br>class CCardControl :       public COleControl,  <br>                           public ICard,  <br>     public ISupportErrorInfo { <br> <br>  public: <br>    // IUnknown methods <br>    // <br>    DECLARE_STANDARD_UNKNOWN(); <br> <br>    // IDispatch methods <br>    // <br>    DECLARE_STANDARD_DISPATCH(); <br> <br>    // ISupportErrorInfo methods <br>    // <br>    DECLARE_STANDARD_SUPPORTERRORINFO(); <br> <br>    // ICARD methods <br>    // <br>    // TODO: copy over the method declarations from CARDInterfaces.H <br>    //       don't forget to remove the PURE from them. <br>    // <br>    STDMETHOD(get_Number)(THIS_ enumCardNumber * number) ; <br>    STDMETHOD(put_Number)(THIS_ enumCardNumber number) ; <br>    STDMETHOD(get_Suite)(THIS_ enumCardSuite * suite) ; <br>    STDMETHOD(put_Suite)(THIS_ enumCardSuite suite) ; <br>    STDMETHOD(get_Invert)(THIS_ VARIANT_BOOL * invert) ; <br>    STDMETHOD(put_Invert)(THIS_ VARIANT_BOOL invert) ; <br>    STDMETHOD(get_CardAlignment)(THIS_ enumCardAlignment * align) ; <br>    STDMETHOD(put_CardAlignment)(THIS_ enumCardAlignment align) ; <br>    STDMETHOD_(void, AboutBox)(THIS) ; <br> <br>    // OLE Control stuff follows: <br>    // <br>    CCardControl(IUnknown *pUnkOuter); <br>    virtual ~CCardControl(); <br> <br>    // static creation function.  all controls must have one of these! <br>    // <br>    static IUnknown *Create(IUnknown *); <br> <br>  private: <br>    // overridables that the control must implement. <br>    // <br>    STDMETHOD(LoadBinaryState)(IStream *pStream); <br>    STDMETHOD(SaveBinaryState)(IStream *pStream); <br>    STDMETHOD(LoadTextState)(IPropertyBag *pPropertyBag, IErrorLog *pErrorLog); <br>    STDMETHOD(SaveTextState)(IPropertyBag *pPropertyBag, BOOL fWriteDefault); <br>    STDMETHOD(OnDraw)(DWORD dvaspect, HDC hdcDraw, LPCRECTL prcBounds, LPCRECTL prcWBounds, HDC hicTargetDev, BOOL fOptimize); <br>    virtual LRESULT WindowProc( UINT msg, WPARAM wParam, LPARAM lParam); <br>    virtual BOOL    RegisterClassData(void); <br> <br>    virtual HRESULT InternalQueryInterface(REFIID, void **); <br> <br>    // private state information. <br>    // <br>HRESULT DrawMe( HDC hdcMem ); <br>void DrawBack(void); <br> <br>// Actual properties <br>enumCardNumberm_number; <br>#define DefaultNumber CardAce <br>void ValidateNumber()  <br>{ <br>if( m_number &lt; CardAce ) m_number = CardAce; <br>if( m_number &gt; CardJoker ) m_number = CardJoker; <br>} <br> <br>enumCardSuite m_suite; <br>#define DefaultSuite CardBlank <br>void ValidateSuite() <br>{ <br>if( m_suite &gt; CardDiamond ) m_suite = CardDiamond; <br>} <br> <br>VARIANT_BOOL m_invert; <br>enum { DefaultInvert = VARIANT_FALSE }; <br> <br>enumCardAlignment   m_cardalignment; <br>#define DefaultCardAlignment CardCenter <br>void ValidateCardAlignment() <br>{ <br>if( m_cardalignment &lt; CardTopLeft ) m_cardalignment = CardTopLeft; <br>if( m_cardalignment &gt; CardStretch ) m_cardalignment = CardStretch; <br>} <br> <br>HBRUSH BackBrush; <br>}; <br> <br> <br>// TODO: if you have an array of verbs, then add an extern here with the name <br>//       of it, so that you can include it in the DEFINE_CONTROLOBJECT. <br>//       ie.  extern VERBINFO m_CARDCustomVerbs []; <br>// <br>extern const GUID    *rgCardPropPages []; <br>DEFINE_WINDOWLESSCONTROLOBJECT(Card, <br>    &amp;CLSID_Card, <br>    "ActiveXCardControl", <br>    CCardControl::Create, <br>    1, <br>    &amp;IID_ICard, <br>    "CARD.HLP", <br>    &amp;DIID_DCardEvents, <br>    OLEMISC_SETCLIENTSITEFIRST|OLEMISC_ACTIVATEWHENVISIBLE| <br>OLEMISC_RECOMPOSEONRESIZE|OLEMISC_CANTLINKINSIDE|OLEMISC_INSIDEOUT, <br>FALSE, <br>FALSE, <br>    RESID_TOOLBOX_BITMAP, <br>    "CARDWndClass", <br>    1, <br>    rgCardPropPages, <br>    0, <br>    NULL); <br> <br> <br> <br>#define _CARDCONTROL_H_ <br>#endif // _CARDCONTROL_H_ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

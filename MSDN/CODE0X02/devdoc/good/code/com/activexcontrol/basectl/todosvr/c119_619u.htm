<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TODOCTL.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context132"></a>TODOCTL.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// ToDoCtl.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>#include "IPServer.H" <br> <br>#include "Guids.H" <br>#include "ToDoCtl.H" <br>#include "LocalObj.H" <br>#include "Util.H" <br>#include "Globals.H" <br>#include "Resource.H" <br> <br>#include &lt;commctrl.h&gt; <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br> <br>//=--------------------------------------------------------------------------= <br>// all the events in this control <br>// <br>// TODO: add events here ... <br>// <br> <br>//=--------------------------------------------------------------------------= <br>// array describing all of our property pages.  these clsids are typically <br>// in guids.h <br>// <br>// TODO: add any additional property page guids here ... <br>// <br>const GUID *rgToDoPropPages [] = { <br>    &amp;CLSID_ToDoGeneralPage <br>}; <br> <br>//=--------------------------------------------------------------------------= <br>// Custum Verb information <br>// <br>// TODO: add any custom verbs here in an array, using the VERBINFO structure. <br>//       then mark the controld def'n in ToDoCtl.H with <br>//       this verb array <br>// <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::Create <br>//=--------------------------------------------------------------------------= <br>// global static function that creates an instance of the control an returns <br>// an IUnknown pointer for it. <br>// <br>// Parameters: <br>//    IUnknown *        - [in] controlling unknown for aggregation <br>// <br>// Output: <br>//    IUnknown *        - new object. <br>// <br>// Notes: <br>// <br>IUnknown *CToDoControl::Create(IUnknown *pUnkOuter) <br>{ <br>    // make sure we return the private unknown so that we support aggegation <br>    // correctly! <br>    // <br>    CToDoControl *pNew = new CToDoControl(pUnkOuter); <br>    return pNew-&gt;PrivateUnknown(); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::CToDoControl <br>//=--------------------------------------------------------------------------= <br>// "Being born is like being kidnapped.  And then sold into slavery." <br>//    - andy warhol (1928 - 87) <br>// <br>// Parameters: <br>//    IUnknown *        - [in] <br>// <br>// Notes: <br>// <br>#pragma warning(disable:4355)  // using 'this' in constructor <br>CToDoControl::CToDoControl(IUnknown* pUnkOuter) <br>    : CDocumentObject(pUnkOuter, OBJECT_TYPE_CTLTODO, (IDispatch *)this) <br>{ <br>    // initialize anything here ... <br>    // <br>    memset(&amp;m_state, 0, sizeof(TODOCTLSTATE)); <br> <br>    // TODO: initialize anything you need to here. <br> <br>} <br>#pragma warning(default:4355)  // using 'this' in constructor <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::~CToDoControl <br>//=--------------------------------------------------------------------------= <br>// "We all labour against our own cure, for death is the cure of all diseases" <br>//    - Sir Thomas Browne (1605 - 82) <br>// <br>// Notes: <br>// <br>CToDoControl::~CToDoControl () <br>{ <br>    // TODO: clean up anything here. <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl:RegisterClassData <br>//=--------------------------------------------------------------------------= <br>// register the window class information for your control here. <br>// this information will automatically get cleaned up for you on DLL shutdown. <br>// <br>// Output: <br>//    BOOL            - FALSE means fatal error. <br>// <br>// Notes: <br>// <br>BOOL CToDoControl::RegisterClassData(void) <br>{ <br>    WNDCLASS wndclass; <br> <br>    // subclass a windows ListView control. <br>    // <br>    if (!::GetClassInfo(g_hInstance, WC_LISTVIEW, &amp;wndclass)) <br>        return FALSE; <br> <br>    // this doesn't need a critical section for apartment threading support <br>    // since it's already in a critical section in CreateInPlaceWindow <br>    // <br>    SUBCLASSWNDPROCOFCONTROL(OBJECT_TYPE_CTLTODO) = (WNDPROC)wndclass.lpfnWndProc; <br>    wndclass.lpfnWndProc = COleControl::ControlWindowProc; <br>    wndclass.lpszClassName = WNDCLASSNAMEOFCONTROL(OBJECT_TYPE_CTLTODO); <br> <br>    return RegisterClass(&amp;wndclass); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::BeforeCreateWindow <br>//=--------------------------------------------------------------------------= <br>// called just before the window is created.  Great place to set up the <br>// window title, etc, so that they're passed in to the call to CreateWindowEx. <br>// speeds things up slightly. <br>// <br>// Parameters: <br>//    DWORD *            - [out] dwWindowFlags <br>//    DWORD *            - [out] dwExWindowFlags <br>//    LPSTR              - [out] name of window to create <br>// <br>// Notes: <br>// <br>BOOL CToDoControl::BeforeCreateWindow <br>( <br>    DWORD *pdwWindowStyle, <br>    DWORD *pdwExWindowStyle, <br>    LPSTR  pszWindowTitle <br>) <br>{ <br>    // TODO: users should set the values of *pdwWindowStyle, *pdwExWindowStyle, <br>    // and pszWindowTitle so that the call to CreateWindowEx can use them. setting <br>    // them here instead of calling SetWindowStyle in WM_CREATE is a huge perf win <br>    // if you don't use this function, then you can probably just remove it. <br>    // <br>    lstrcpy(pszWindowTitle, "ToDo"); <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::InternalQueryInterface <br>//=--------------------------------------------------------------------------= <br>// qi for things only we support. <br>// <br>// Parameters: <br>// Parameters: <br>//    REFIID        - [in]  interface they want <br>//    void **       - [out] where they want to put the resulting object ptr. <br>// <br>// Output: <br>//    HRESULT       - S_OK, E_NOINTERFACE <br>// <br>// Notes: <br>// <br>HRESULT CToDoControl::InternalQueryInterface <br>( <br>    REFIID  riid, <br>    void  **ppvObjOut <br>) <br>{ <br>    IUnknown *pUnk; <br> <br>    *ppvObjOut = NULL; <br> <br>    // TODO: if you want to support any additional interrfaces, then you should <br>    // indicate that here.  never forget to call the base class version in the <br>    // case where you don't support the given interface. <br>    // <br>    if (DO_GUIDS_MATCH(riid, IID_IToDo)) { <br>        pUnk = (IUnknown *)(IToDo *)this; <br>    } else{ <br>        return CDocumentObject::InternalQueryInterface(riid, ppvObjOut); <br>    } <br> <br>    pUnk-&gt;AddRef(); <br>    *ppvObjOut = (void *)pUnk; <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::LoadTextState <br>//=--------------------------------------------------------------------------= <br>// load in our text state for this control. <br>// <br>// Parameters: <br>//    IPropertyBag *        - [in] property bag to read from <br>//    IErrorLog *           - [in] errorlog object to use with proeprty bag <br>// <br>// Output: <br>//    HRESULT <br>// <br>// Notes: <br>//    - NOTE: if you have a binary object, then you should pass an unknown <br>//      pointer to the property bag, and it will QI it for IPersistStream, and <br>//      get said object to do a Load() <br>// <br>STDMETHODIMP CToDoControl::LoadTextState <br>( <br>    IPropertyBag *pPropertyBag, <br>    IErrorLog    *pErrorLog <br>) <br>{ <br>    // TODO: implement your text load code here. <br>    // <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::LoadBinaryState <br>//=--------------------------------------------------------------------------= <br>// loads in our binary state using streams. <br>// <br>// Parameters: <br>//    IStream *            - [in] stream to write to. <br>// <br>// Output: <br>//    HRESULT <br>// <br>// Notes: <br>// <br>STDMETHODIMP CToDoControl::LoadBinaryState <br>( <br>    IStream *pStream <br>) <br>{ <br>    // TODO: implement your binary load code here.  to prevent this from being <br>    // a massive performance sink, you should probably try to organize your <br>    // properties in such a way that enables you to do just one IStream::Read <br>    // in the LoadBinaryState function.  fast is good. <br>    // <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::SaveTextState <br>//=--------------------------------------------------------------------------= <br>// saves out the text state for this control using a property bag. <br>// <br>// Parameters: <br>//    IPropertyBag *        - [in] the property bag with which to work. <br>//    BOOL                  - [in] if TRUE, then write out ALL properties, even <br>//                            if they're their the default value ... <br>// <br>// Output: <br>//    HRESULT <br>// <br>// Notes: <br>// <br>STDMETHODIMP CToDoControl::SaveTextState <br>( <br>    IPropertyBag *pPropertyBag, <br>    BOOL          fWriteDefaults <br>) <br>{ <br>    // TODO: implement your text save code here. <br>    // <br>    return S_OK; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::SaveBinaryState <br>//=--------------------------------------------------------------------------= <br>// save out the binary state for this control, using the given IStream object. <br>// <br>// Parameters: <br>//    IStream  *             - [in] save to which you should save. <br>// <br>// Output: <br>//    HRESULT <br>// <br>// Notes: <br>//    - it is important that you seek to the end of where you saved your <br>//      properties when you're done with the IStream. <br>// <br>STDMETHODIMP CToDoControl::SaveBinaryState <br>( <br>    IStream *pStream <br>) <br>{ <br>    // TODO: implement your binary save state code here.  to prevent this from being <br>    // a massive performance sink, you should probably try to organize your <br>    // properties in such a way that enables you to do just one IStream::Read <br>    // in the LoadBinaryState function.  fast is good. <br>    // <br>    return S_OK; <br>} <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::OnDraw <br>//=--------------------------------------------------------------------------= <br>// "I don't very much enjoy looking at paintings in general.  i know too <br>//  much about them.  i take them apart." <br>//    - georgia o'keeffe (1887-1986) <br>// <br>// Parameters: <br>//    DWORD              - [in]  drawing aspect <br>//    HDC                - [in]  HDC to draw to <br>//    LPCRECTL           - [in]  rect we're drawing to <br>//    LPCRECTL           - [in]  window extent and origin for meta-files <br>//    HDC                - [in]  HIC for target device <br>//    BOOL               - [in]  can we optimize dc handling? <br>// <br>// Output: <br>//    HRESULT <br>// <br>// Notes: <br>// <br>HRESULT CToDoControl::OnDraw <br>( <br>    DWORD    dvAspect, <br>    HDC      hdcDraw, <br>    LPCRECTL prcBounds, <br>    LPCRECTL prcWBounds, <br>    HDC      hicTargetDevice, <br>    BOOL     fOptimize <br>) <br>{ <br>    // TODO: put your drawing code here ... <br>    // <br>    return DoSuperClassPaint(hdcDraw, prcBounds); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::WindowProc <br>//=--------------------------------------------------------------------------= <br>// window procedure for this control.  nothing terribly exciting. <br>// <br>// Parameters: <br>//     see win32sdk on window procs. <br>// <br>// Notes: <br>// <br>LRESULT CToDoControl::WindowProc <br>( <br>    UINT   msg, <br>    WPARAM wParam, <br>    LPARAM lParam <br>) <br>{ <br>    // TODO: handle any messages here, like in a normal window <br>    // proc.  note that for special keys, you'll want to override and <br>    // implement OnSpecialKey. <br>    // <br>    return CallWindowProc((WNDPROC)(FARPROC)SUBCLASSWNDPROCOFCONTROL(OBJECT_TYPE_CTLTODO), (HWND) m_hwnd, msg, wParam, lParam); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoControl::AboutBox <br>//=--------------------------------------------------------------------------= <br>// prints up an about box.  fweeeee. <br>// <br>// Notes: <br>// <br>void CToDoControl::AboutBox <br>( <br>    void <br>) <br>{ <br>    // TODO: Ideally, one would use DialogBox, and some sort of Dialog Box here if <br>    // they wanted a slightly more interesting About Box ...  you should <br>    // still call ModalDialog first, however. <br>    // <br>    ModalDialog(TRUE); <br>    MessageBox(NULL, "Sample DocObject Server", "About ToDo", MB_OK | MB_TASKMODAL); <br>    ModalDialog(FALSE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

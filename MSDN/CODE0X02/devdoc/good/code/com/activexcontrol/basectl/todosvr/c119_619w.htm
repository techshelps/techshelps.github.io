<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TODOPPG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context134"></a>TODOPPG.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// ToDoPPG.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// property page implementations for ToDo control. <br>// <br>#include "IPServer.H" <br> <br>#include "LocalObj.H" <br>#include "ToDoPPG.H" <br>#include "ToDoCtl.H" <br>#include "Resource.H" <br>#include "Util.H" <br> <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// Property Page messages <br>//=--------------------------------------------------------------------------= <br>// in addition to regular windows messages you'll receive for a dialog box, <br>// you'll receive the following messages in your property page implementation: <br>// <br>// PPM_NEWOBJECTS: <br>//    wParam = 0; <br>//    lParam = (LPARAM)(HRESULT *)&amp;hr <br>// <br>//  - in this message, you should call FirstControl() to get a pointer to a <br>//    control, and initialize the values in the property page dialog with <br>//    values from the control object.  put results from the operation in <br>//    the HRESULT pointed to by LPARAM. <br>// <br>// PPM_APPLY: <br>//    wParam = 0; <br>//    lParam = (LPARAM)(HRESULT *)&amp;hr <br>// <br>//  - this message is sent to your dialog whenever the user clicks APPLY or OK <br>//    in the dialog.  you should have a loop with the following code in it: <br>// <br>//      for (pUnk = FirstControl(&amp;dwCookie) ; pUnk; pUnk = NextControl(&amp;dwCookie)) { <br>//            hr = pUnk-&gt;QueryInterface(IID_IMyCtlInterface, (void **)&amp;pMyCtl); <br>//            // set properties here!!! <br>//      } <br>// <br>//    call PropPageException() if there is an error while setting propertites <br>//    to show the exception set up by the property set routine. <br>// <br>// PPM_EDITPROPERTY: <br>//    wParam = dispid <br>//    lParam = (LPARAM)(HRESULT *)&amp;hr <br>// <br>//  - sent to your dialog when somebody wants you to set the focus to a specific <br>//    property [typically, one will see a call to this when one returns a page <br>//    from IPerPropertyBrowsing::MapPropertyToPage].  you can use this <br>//    to bring up dialogs, or do whatever flaps your flagella. <br>// <br>// PPM_FREEOBJECTS: <br>//    wParam = 0 <br>//    lParam = (LPARAM)(HRESULT *)&amp;hr <br>// <br>// - sent to your dialog when you should free up any objects.  some people will <br>//   find it interesting to QI and store objects in the PPM_INITOBJECTS message. <br>//   this message tells the prop page that these objects are no longer valid, <br>//   and any stashing of objects should be terminated. <br>// <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoGeneralPage::Create <br>//=--------------------------------------------------------------------------= <br>// global static creation function. <br>// <br>// Parameters: <br>//    IUnknown *    - [in] controlling unknown <br>// <br>// Output: <br>//    IUnknown *    - new prop page. <br>// <br>// Notes: <br>// <br>IUnknown *CToDoGeneralPage::Create <br>( <br>    IUnknown *pUnkOuter <br>) <br>{ <br>    return (IUnknown *)new CToDoGeneralPage(pUnkOuter); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoGeneralPage::CToDoGeneralPage <br>//=--------------------------------------------------------------------------= <br>// constructor. <br>// <br>// Parameters: <br>//    IUnknown *        - [in] controlling unknown. <br>// <br>// Notes: <br>// <br>CToDoGeneralPage::CToDoGeneralPage <br>( <br>    IUnknown *pUnkOuter <br>) <br>: CPropertyPage(pUnkOuter, OBJECT_TYPE_PPGTODOGENERAL) <br>{ <br>    // initialize local variables here. <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoGeneralPage::~CToDoGeneralPage <br>//=--------------------------------------------------------------------------= <br>// destructor. <br>// <br>// Notes: <br>// <br>CToDoGeneralPage::~CToDoGeneralPage() <br>{ <br>    // clean up <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CToDoGeneralPage::DialogProc <br>//=--------------------------------------------------------------------------= <br>// our dialog proc. <br>// <br>// Parameters: <br>//    - see win32sdk docs on DialogProc <br>// <br>// Notes: <br>// <br>BOOL CToDoGeneralPage::DialogProc <br>( <br>    HWND   hwnd, <br>    UINT   msg, <br>    WPARAM wParam, <br>    LPARAM lParam <br>) <br>{ <br>    // TODO: add support for your property page here.  this is a normal dialog <br>    //       proc.  make sure you handle PPM_NEWOBJECTS and PPM_APPLY. <br>    // <br>    return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STDENUM.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context114"></a>STDENUM.H</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// StdEnum.H <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// object definition for a generic enumerator object. <br>// <br>#ifndef _STDENUM_H_ <br> <br>#include "Unknown.H" <br> <br>// to support a generic Enumerator object, we'll just define this <br>// interface.  it can be safely cast to any other enumerator, since all <br>// they differ in is their pointer type in Next(). <br>// <br>class IEnumGeneric: public IUnknown { <br> <br>  public: <br>    virtual HRESULT __stdcall Next(ULONG celt, LPVOID rgelt, ULONG *pceltFetched) = 0; <br>    virtual HRESULT __stdcall Skip(ULONG celt) = 0; <br>    virtual HRESULT __stdcall Reset(void) = 0; <br>    virtual HRESULT __stdcall Clone(IEnumGeneric **ppenum) = 0; <br>}; <br> <br>//=--------------------------------------------------------------------------= <br>// StandardEnum <br>//=--------------------------------------------------------------------------= <br>// a generic enumerator object.  given a pointer to generic data, some <br>// information about the elements, and a function to copy the elements, <br>// we can implement a generic enumerator. <br>// <br>// NOTE: this class assumes that rgElements is HeapAlloc'd, and will free it <br>//       in it's destructor [although it IS valid for this to be NULL if there <br>//       are no elements to enumerate over.] <br>// <br>class CStandardEnum: public CUnknownObject, public IEnumGeneric { <br> <br>public: <br>    // IUnknown methods <br>    // <br>    DECLARE_STANDARD_UNKNOWN(); <br> <br>    // IEnumVariant methods <br>    // <br>    STDMETHOD(Next)(unsigned long celt, void * rgvar, unsigned long * pceltFetched);  <br>    STDMETHOD(Skip)(unsigned long celt);  <br>    STDMETHOD(Reset)();  <br>    STDMETHOD(Clone)(IEnumGeneric **ppEnumOut);  <br> <br>    CStandardEnum(REFIID riid, int cElement, int cbElement, void *rgElements, <br>                 void (WINAPI * pfnCopyElement)(void *, const void *, DWORD)); <br>    ~CStandardEnum(); <br> <br>private: <br>    virtual HRESULT InternalQueryInterface(REFIID riid, void **ppvObjOut); <br> <br>    IID m_iid;                        // type of enumerator that we are <br>    int m_cElements;                  // Total number of elements <br>    int m_cbElementSize;              // Size of each element <br>    int m_iCurrent;                   // Current position: 0 = front, m_cElt = end <br>    VOID * m_rgElements;              // Array of elements   <br>    CStandardEnum *m_pEnumClonedFrom; // If we were cloned, from whom? <br>    void  (WINAPI * m_pfnCopyElement)(void *, const void *, DWORD); <br>}; <br> <br> <br> <br>#define _STDENUM_H_ <br>#endif // _STDENUM_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

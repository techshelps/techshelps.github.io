<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IODOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context126"></a>IODOC.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// IODoc.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of the IOleDocument interface for CDocumentObject. <br>// <br>#include "CDocObj.H" <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::CreateView[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// asks the document object to create a new view sub-object <br>// <br>// Parameters: <br>//    IOleInPlaceSite *   - [in] pointer to container's view site object <br>//    IStream*            - [in] pointer to stream to initialize view with <br>//    DWORD               - [in] reserved <br>//    IOleDocumentView*   - [out] address to put interface pointer to new view <br>// <br>// Output: <br>//    HRESULT             - S_OK, E_POINTER, E_OUTOFMEMORY, E_UNEXPECTED,  <br>//                          E_FAIL <br>// <br>// Notes:  <br>//      This implementation only supports a single view! <br>// <br>STDMETHODIMP CDocumentObject::CreateView(IOleInPlaceSite* pIPSite, IStream* pstm,  <br>                                         DWORD dwReserved, IOleDocumentView** ppView) <br>{ <br>    TRACE("\nEntering CDocumentObject::CreateView"); <br> <br>    *ppView = NULL; <br> <br>    if (dwReserved != 0 || m_pDocSite == NULL) <br>        return E_UNEXPECTED; <br> <br>    // We only support a single view...so if view site is already <br>    // set, fail. <br>    if (m_pViewSite != NULL) <br>        return E_FAIL; <br> <br> <br>    // Otherwise, connect the view site to our object <br>    IOleDocumentView* pView = NULL; <br>    InternalQueryInterface(IID_IOleDocumentView, (void**)&amp;pView); <br>    ASSERT(pView != NULL, "object must support IID_IOleDocumentView"); <br> <br>    HRESULT hr = pView-&gt;SetInPlaceSite(pIPSite); <br>    if (SUCCEEDED(hr)) <br>    { <br>        // Return the IOleDocumentView pointer  <br>        *ppView = pView; <br> <br>        // If a saved view state is provided, restore the view state. <br>        if (pstm) <br>            hr = pView-&gt;ApplyViewState(pstm); <br>    } <br>else <br>        pView-&gt;Release(); <br> <br>    TRACE("\nLeaving CDocumentObject::CreateView"); <br> <br>    return hr; <br> <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::GetDocMiscStatus[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// returns miscellaneous status bits describing the document object <br>// <br>// Parameters: <br>//    DWORD *   - [out] address to put misc status bits in <br>// <br>// Output: <br>//    HRESULT   - S_OK, E_POINTER <br>// <br>// Notes: <br>// <br>STDMETHODIMP CDocumentObject::GetDocMiscStatus(DWORD* pdwStatus) <br>{ <br>    TRACE("\nCDocumentObject::GetDocMiscStatus"); <br> <br>if (pdwStatus) <br>{ <br>        // m_ObjectType (from base class CAutomationObject) is the  <br>        // index into the global object table... <br>*pdwStatus = MISCFLAGSOFDOCOBJECT(m_ObjectType); <br>return S_OK; <br>} <br>else <br>return E_POINTER; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CDocumentObject::EnumViews[IOleDocument] <br>//=--------------------------------------------------------------------------= <br>// creates an enumerator object that enumerates the views of the document object <br>// <br>// Parameters: <br>//    IEnumOleDocumentViews**   - [out] address to put enumerator interface <br>//    IOleDocumentView**        - [out] address to store single view interface  <br>// <br>// Output: <br>//    HRESULT             - S_OK, E_POINTER, E_OUTOFMEMORY <br>// <br>// Notes: <br>//      This implementation only supports a single view!    <br>// <br>STDMETHODIMP CDocumentObject::EnumViews(IEnumOleDocumentViews** ppEnum,  <br>                                        IOleDocumentView** ppView) <br>{ <br>    TRACE("\nCDocumentObject::EnumViews"); <br> <br>    if (!ppEnum || !ppView) <br>        return E_POINTER; <br> <br>// Retrieve pointer to our single view <br>    *ppEnum = NULL; <br>return InternalQueryInterface(IID_IOleDocumentView, (void**)ppView); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

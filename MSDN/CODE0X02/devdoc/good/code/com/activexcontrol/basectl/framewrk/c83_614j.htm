<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNKNOWN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context103"></a>UNKNOWN.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// Unknown.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation for various things in the unknown object that supports <br>// aggregation. <br>// <br>#include "IPServer.H" <br>#include "Unknown.H" <br>#include &lt;stddef.h&gt; <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CUnknownObject::CPrivateUnknownObject::m_pMainUnknown <br>//=--------------------------------------------------------------------------= <br>// this method is used when we're sitting in the private unknown object, <br>// and we need to get at the pointer for the main unknown.  basically, it's <br>// a little better to do this pointer arithmetic than have to store a pointer <br>// to the parent, etc. <br>// <br>inline CUnknownObject *CUnknownObject::CPrivateUnknownObject::m_pMainUnknown <br>( <br>    void <br>) <br>{ <br>    return (CUnknownObject *)((LPBYTE)this - offsetof(CUnknownObject, m_UnkPrivate)); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CUnknownObject::CPrivateUnknownObject::QueryInterface <br>//=--------------------------------------------------------------------------= <br>// this is the non-delegating internal QI routine. <br>// <br>// Parameters: <br>//    REFIID        - [in]  interface they want <br>//    void **       - [out] where they want to put the resulting object ptr. <br>// <br>// Output: <br>//    HRESULT       - S_OK, E_NOINTERFACE <br>// <br>// Notes: <br>// <br>STDMETHODIMP CUnknownObject::CPrivateUnknownObject::QueryInterface <br>( <br>    REFIID riid, <br>    void **ppvObjOut <br>) <br>{ <br>    CHECK_POINTER(ppvObjOut); <br> <br>    // if they're asking for IUnknown, then we have to pass them ourselves. <br>    // otherwise defer to the inheriting object's InternalQueryInterface <br>    // <br>    if (DO_GUIDS_MATCH(riid, IID_IUnknown)) { <br>        m_cRef++; <br>        *ppvObjOut = (IUnknown *)this; <br>        return S_OK; <br>    } else <br>        return m_pMainUnknown()-&gt;InternalQueryInterface(riid, ppvObjOut); <br> <br>    // dead code     <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CUnknownObject::CPrivateUnknownObject::AddRef <br>//=--------------------------------------------------------------------------= <br>// adds a tick to the current reference count. <br>// <br>// Output: <br>//    ULONG        - the new reference count <br>// <br>// Notes: <br>// <br>ULONG CUnknownObject::CPrivateUnknownObject::AddRef <br>( <br>    void <br>) <br>{ <br>    return ++m_cRef; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CUnknownObject::CPrivateUnknownObject::Release <br>//=--------------------------------------------------------------------------= <br>// removes a tick from the count, and delets the object if necessary <br>// <br>// Output: <br>//    ULONG         - remaining refs <br>// <br>// Notes: <br>// <br>ULONG CUnknownObject::CPrivateUnknownObject::Release <br>( <br>    void <br>) <br>{ <br>    ULONG cRef = --m_cRef; <br> <br>    if (!m_cRef) <br>        delete m_pMainUnknown(); <br> <br>    return cRef; <br>} <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CUnknownObject::InternalQueryInterface <br>//=--------------------------------------------------------------------------= <br>// objects that are aggregated use this to support additional interfaces. <br>// they should call this method on their parent so that any of it's interfaces <br>// are queried. <br>// <br>// Parameters: <br>//    REFIID        - [in]  interface they want <br>//    void **       - [out] where they want to put the resulting object ptr. <br>// <br>// Output: <br>//    HRESULT       - S_OK, E_NOINTERFACE <br>// <br>// Notes: <br>// <br>HRESULT CUnknownObject::InternalQueryInterface <br>( <br>    REFIID  riid, <br>    void  **ppvObjOut <br>) <br>{ <br>    *ppvObjOut = NULL; <br> <br>    return E_NOINTERFACE; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

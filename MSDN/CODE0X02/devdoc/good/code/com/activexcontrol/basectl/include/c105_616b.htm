<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPPAGE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context113"></a>PROPPAGE.H</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// PropPage.H <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// class declaration for CPropertyPage. <br>// <br>#ifndef _PROPPAGE_H_ <br> <br>// things we really need <br>// <br>#include "Unknown.H" <br>#include &lt;olectl.h&gt; <br>#include "LocalSrv.H" <br> <br>//=--------------------------------------------------------------------------= <br>// messages that we'll send to property pages to instruct them to accomplish <br>// tasks. <br>// <br>#define PPM_NEWOBJECTS    (WM_USER + 100) <br>#define PPM_APPLY         (WM_USER + 101) <br>#define PPM_EDITPROPERTY  (WM_USER + 102) <br>#define PPM_FREEOBJECTS   (WM_USER + 103) <br> <br>//=--------------------------------------------------------------------------= <br>// structure that control writers will use to define property pages. <br>// <br>typedef struct tagPROPERTYPAGEINFO { <br> <br>    UNKNOWNOBJECTINFO unknowninfo; <br>    WORD    wDlgResourceId; <br>    WORD    wTitleId; <br>    WORD    wDocStringId; <br>    LPCSTR  szHelpFile; <br>    DWORD   dwHelpContextId; <br> <br>} PROPERTYPAGEINFO; <br> <br>#ifndef INITOBJECTS <br> <br>#define DEFINE_PROPERTYPAGEOBJECT(name, pclsid, pszon, pfn, wr, wt, wd, pszhf, dwhci) \ <br>    extern PROPERTYPAGEINFO name##Page \ <br> <br>#else // INITOBJECTS <br> <br>#define DEFINE_PROPERTYPAGEOBJECT(name, pclsid, pszon, pfn, wr, wt, wd, pszhf, dwhci) \ <br>    PROPERTYPAGEINFO name##Page = { {pclsid, pszon, pfn }, wr, wt, wd, pszhf, dwhci } \ <br> <br>#endif // INITOBJECTS <br> <br> <br>#define TEMPLATENAMEOFPROPPAGE(index)    MAKEINTRESOURCE(((PROPERTYPAGEINFO *)(g_ObjectInfo[index].pInfo))-&gt;wDlgResourceId) <br>#define TITLEIDOFPROPPAGE(index)         (((PROPERTYPAGEINFO *)(g_ObjectInfo[index].pInfo))-&gt;wTitleId) <br>#define DOCSTRINGIDOFPROPPAGE(index)     (((PROPERTYPAGEINFO *)(g_ObjectInfo[index].pInfo))-&gt;wDocStringId) <br>#define HELPCONTEXTOFPROPPAGE(index)     (((PROPERTYPAGEINFO *)(g_ObjectInfo[index].pInfo))-&gt;dwHelpContextId) <br>#define HELPFILEOFPROPPAGE(index)        (((PROPERTYPAGEINFO *)(g_ObjectInfo[index].pInfo))-&gt;szHelpFile) <br> <br>//=--------------------------------------------------------------------------= <br>// <br>class CPropertyPage : public CUnknownObject, public IPropertyPage2 { <br> <br>  public: <br>    // IUnknown methods <br>    // <br>    DECLARE_STANDARD_UNKNOWN(); <br> <br>    // IPropertyPage methods <br>    // <br>    STDMETHOD(SetPageSite)(LPPROPERTYPAGESITE pPageSite); <br>    STDMETHOD(Activate)(HWND hwndParent, LPCRECT lprc, BOOL bModal); <br>    STDMETHOD(Deactivate)(void); <br>    STDMETHOD(GetPageInfo)(LPPROPPAGEINFO pPageInfo); <br>    STDMETHOD(SetObjects)(ULONG cObjects, LPUNKNOWN FAR* ppunk); <br>    STDMETHOD(Show)(UINT nCmdShow); <br>    STDMETHOD(Move)(LPCRECT prect); <br>    STDMETHOD(IsPageDirty)(void); <br>    STDMETHOD(Apply)(void); <br>    STDMETHOD(Help)(LPCOLESTR lpszHelpDir); <br>    STDMETHOD(TranslateAccelerator)(LPMSG lpMsg); <br> <br>    // IPropertyPage2 methods <br>    // <br>    STDMETHOD(EditProperty)(THIS_ DISPID dispid); <br> <br>    // constructor destructor <br>    // <br>    CPropertyPage(IUnknown *pUnkOuter, int iObjectType); <br>    virtual ~CPropertyPage(); <br> <br>    HINSTANCE GetResourceHandle(void);            // returns current resource handle. <br> <br>  protected: <br>    IPropertyPageSite *m_pPropertyPageSite;       // pointer to our ppage site. <br>    void     MakeDirty();                         // makes the property page dirty. <br>    HWND     m_hwnd;                              // our hwnd. <br> <br>    // the following two methods allow a property page implementer to get at all the <br>    // objects that we need to set here. <br>    // <br>    IUnknown *FirstControl(DWORD *dwCookie); <br>    IUnknown *NextControl(DWORD *dwCookie); <br> <br>  private: <br>    IUnknown **m_ppUnkObjects;                    // objects that we're working with. <br> <br>    unsigned m_fActivated:1; <br>    unsigned m_fDirty:1; <br>    int      m_ObjectType;                        // what type of object we are <br>    UINT     m_cObjects;                          // how many objects we're holding on to <br> <br>    void     m_ReleaseAllObjects(void);           // clears out all objects we've got. <br>    HRESULT  m_EnsureLoaded(void);                // forces the load of the page. <br> <br>    virtual HRESULT InternalQueryInterface(REFIID, void **); <br> <br>    // default dialog proc for a page. <br>    // <br>    static BOOL CALLBACK PropPageDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    // all page implementers MUST implement the following function. <br>    // <br>    virtual BOOL DialogProc(HWND, UINT, WPARAM, LPARAM) PURE; <br>}; <br> <br>#define _PROPPAGE_H_ <br>#endif // _PROPPAGE_H_ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

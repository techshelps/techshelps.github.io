<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context107"></a>DEBUG.H</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// Debug.H <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// contains the various macros and the like which are only useful in DEBUG <br>// builds <br>// <br>#ifndef _DEBUG_H_ <br> <br>//=---------------------------------------------------------------------------= <br>// all the things required to handle our ASSERT mechanism <br>//=---------------------------------------------------------------------------= <br>// <br>#if DEBUG <br> <br>// Function Prototypes <br>// <br>VOID DisplayAssert(LPSTR pszMsg, LPSTR pszAssert, LPSTR pszFile, UINT line); <br> <br>// Macros <br>// <br>// *** Include this macro at the top of any source file using *ASSERT*() macros *** <br>// <br>#define SZTHISFILEstatic char _szThisFile[] = __FILE__; <br> <br> <br>// our versions of the ASSERT and FAIL macros. <br>// <br>#define ASSERT(fTest, szMsg)                                \ <br>    if (!(fTest))  {                                        \ <br>        static char szMsgCode[] = szMsg;                    \ <br>        static char szAssert[] = #fTest;                    \ <br>        DisplayAssert(szMsgCode, szAssert, _szThisFile, __LINE__); \ <br>    } <br> <br>#define FAIL(szMsg)                                         \ <br>        { static char szMsgCode[] = szMsg;                    \ <br>        DisplayAssert(szMsgCode, "FAIL", _szThisFile, __LINE__); } <br> <br> <br> <br>// macro that checks a pointer for validity on input <br>// <br>#define CHECK_POINTER(val) if (!(val) || IsBadWritePtr((void *)(val), sizeof(void *))) return E_POINTER <br> <br>#else  // DEBUG <br> <br>#define SZTHISFILE <br>#define ASSERT(fTest, err) <br>#define FAIL(err) <br> <br>#define CHECK_POINTER(val) <br>#endif// DEBUG <br> <br> <br> <br> <br>#define _DEBUG_H_ <br>#endif // _DEBUG_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

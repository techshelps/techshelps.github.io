<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TODOSVR.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context136"></a>TODOSVR.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// ToDoSvr.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// various routines et all that aren't in a file for a particular automation <br>// object, and don't need to be in the generic ole automation code. <br>// <br>#define INITOBJECTS                // define the descriptions for our objects <br> <br>#include "IPServer.H" <br>#include "LocalSrv.H" <br> <br> <br>#include "LocalObj.H" <br>#include "ToDoSvrIfc.H" <br>#include "CDocObj.H" <br>#include "Globals.H" <br>#include "Util.H" <br>#include "Resource.H" <br> <br>#include "ToDoCtl.H" <br>#include "ToDoPPG.H" <br> <br>// needed for ASSERTs and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// our Libid.  This should be the LIBID from the Type library, or NULL if you <br>// don't have one. <br>// <br>const CLSID *g_pLibid = &amp;LIBID_ToDoSvrObjects; <br> <br>//=--------------------------------------------------------------------------= <br>// Set this up if you want to have a window proc for your parking window. This <br>// is really only interesting for Sub-classed controls that want, in design <br>// mode, certain messages that are sent only to the parent window. <br>// <br>WNDPROC g_ParkingWindowProc = NULL; <br> <br>//=--------------------------------------------------------------------------= <br>// Localization Information <br>// <br>// We need the following two pieces of information: <br>//    a. whether or not this DLL uses satellite DLLs for localization.  if <br>//       not, then the lcidLocale is ignored, and we just always get resources <br>//       from the server module file. <br>//    b. the ambient LocaleID for this in-proc server.  Controls calling <br>//       GetResourceHandle() will set this up automatically, but anybody <br>//       else will need to be sure that it's set up properly. <br>// <br>const VARIANT_BOOL g_fSatelliteLocalization = FALSE; <br>LCID               g_lcidLocale = MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT); <br> <br> <br>//=--------------------------------------------------------------------------= <br>// your license key and where under HKEY_CLASSES_ROOT_LICENSES it's sitting <br>// <br>const WCHAR g_wszLicenseKey [] = L""; <br>const WCHAR g_wszLicenseLocation [] = L""; <br> <br> <br>//=--------------------------------------------------------------------------= <br>// This Table describes all the automatible objects in your automation server. <br>// See AutomationObject.H for a description of what goes in this structure <br>// and what it's used for. <br>// <br>// DOCOBJ: Use DOCOBJECT macro to describe our DocObject, not CONTROLOBJECT <br>//         as usual. <br>// <br>OBJECTINFO g_ObjectInfo[] = { <br>    DOCOBJECT(ToDo), <br>    PROPERTYPAGE(ToDoGeneral), <br>    EMPTYOBJECT <br>}; <br> <br>const char g_szLibName[] = "ToDoSvr"; <br> <br>//=--------------------------------------------------------------------------= <br>// InitializeLibrary <br>//=--------------------------------------------------------------------------= <br>// called from DllMain:DLL_PROCESS_ATTACH.  allows the user to do any sort of <br>// initialization they want to. <br>// <br>// Notes: <br>// <br>void WINAPI InitializeLibrary(void) <br>{ <br>    // TODO: initialization here.  control window class should be set up in <br>    // RegisterClassData. <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// UninitializeLibrary <br>//=--------------------------------------------------------------------------= <br>// called from DllMain:DLL_PROCESS_DETACH.  allows the user to clean up anything <br>// they want. <br>// <br>// Notes: <br>// <br>void WINAPI UninitializeLibrary(void) <br>{ <br>    // TODO: uninitialization here.  control window class will be unregistered <br>    // for you, but anything else needs to be cleaned up manually. <br>    // Please Note that the Window 95 DLL_PROCESS_DETACH isn't quite as stable <br>    // as NT's, and you might crash doing certain things here ... <br>} <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CheckForLicense <br>//=--------------------------------------------------------------------------= <br>// users can implement this if they wish to support Licensing.  otherwise, <br>// they can just return TRUE all the time. <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    BOOL            - TRUE means the license exists, and we can proceed <br>//                      FALSE means we're not licensed and cannot proceed <br>// <br>// Notes: <br>//    - implementers should use g_wszLicenseKey and g_wszLicenseLocation <br>//      from the top of this file to define their licensing [the former <br>//      is necessary, the latter is recommended] <br>// <br>BOOL WINAPI CheckForLicense(void) <br>{ <br>    // TODO: you should make sure the machine has your license key here. <br>    // this is typically done by looking in the registry. <br>    // <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CheckLicenseKey <br>//=--------------------------------------------------------------------------= <br>// when IClassFactory2::CreateInstanceLic is called, a license key is passed <br>// in, and then passed on to this routine.  users should return a boolean  <br>// indicating whether it is a valid license key or not <br>// <br>// Parameters: <br>//    LPWSTR          - [in] the key to check <br>// <br>// Output: <br>//    BOOL            - false means it's not valid, true otherwise <br>// <br>// Notes: <br>// <br>BOOL WINAPI CheckLicenseKey(LPWSTR pwszKey) <br>{ <br>    // TODO: check the license key against your values here and make sure it's <br>    // valid. <br>    // <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// GetLicenseKey <br>//=--------------------------------------------------------------------------= <br>// returns our current license key that should be saved out, and then passed <br>// back to us in IClassFactory2::CreateInstanceLic <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    BSTR                 - key or NULL if Out of memory <br>// <br>// Notes: <br>// <br>BSTR WINAPI GetLicenseKey(void) <br>{ <br>    // TODO: return your license key here. <br>    // <br>    return SysAllocString(L""); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// RegisterData <br>//=--------------------------------------------------------------------------= <br>// lets the inproc server writer register any data in addition to that in <br>// any other objects. <br>// <br>// Output: <br>//    BOOL            - false means failure. <br>// <br>// Notes: <br>// <br>BOOL WINAPI RegisterData(void) <br>{ <br>    // DOCOBJ: DocObjects need some additional registry entries. <br>    //         Register them here! <br> <br>    // read file extension and file description strings from resources <br>    char szExt[20]; <br>    if (!LoadString(GetResourceHandle(),   <br>                    DEFAULTEXTIDOFDOCOBJECT(OBJECT_TYPE_CTLTODO), <br>                    szExt, <br>                    sizeof(szExt))) <br>        szExt[0] = '\0'; <br> <br>    char szDesc[40]; <br>    if (!LoadString(GetResourceHandle(),   <br>                    FILEDESCRIPTIONIDOFDOCOBJECT(OBJECT_TYPE_CTLTODO), <br>                    szDesc, <br>                    sizeof(szDesc))) <br>        szDesc[0] = '\0'; <br> <br>    // register special docobj keys <br>    return RegisterDocObject(g_szLibName, NAMEOFOBJECT(OBJECT_TYPE_CTLTODO), <br>                             CLSIDOFOBJECT(OBJECT_TYPE_CTLTODO),  <br>                             MISCFLAGSOFDOCOBJECT(OBJECT_TYPE_CTLTODO), <br>                             PRINTOFDOCOBJECT(OBJECT_TYPE_CTLTODO), <br>                             szExt, szDesc); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// UnregisterData <br>//=--------------------------------------------------------------------------= <br>// inproc server writers should unregister anything they registered in <br>// RegisterData() here. <br>// <br>// Output: <br>//    BOOL            - false means failure. <br>// <br>// Notes: <br>// <br>BOOL WINAPI UnregisterData(void) <br>{ <br>    // TODO: any additional registry cleanup that you might wish to do. <br>    // <br>    return TRUE; <br>} <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CRT stubs <br>//=--------------------------------------------------------------------------= <br>// these two things are here so the CRTs aren't needed. this is good. <br>// <br>// basically, the CRTs define this to suck in a bunch of stuff.  we'll just <br>// define them here so we don't get an unresolved external. <br>// <br>// TODO: if you are going to use the CRTs, then remove this line. <br>// <br>// extern "C" int _fltused = 1; <br> <br>extern "C" int _purecall(void) <br>{ <br>  FAIL("Pure virtual function called."); <br>  return 0; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CARD.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context81"></a>CARD.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// Card.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// various routines et all that aren't in a file for a particular automation <br>// object, and don't need to be in the generic ole automation code. <br>// <br>#define INITOBJECTS                // define the descriptions for our objects <br> <br>#include "IPServer.H" <br>#include "LocalSrv.H" <br> <br> <br>#include "LocalObj.H" <br>#include "CtrlObj.H" <br>#include "Globals.H" <br>#include "Util.H" <br>#include "Resource.H" <br> <br>#include "CardCtl.H" <br>#include "CardPPG.H" <br>#include "cathelp.H" <br> <br>#include "carddraw.h" <br> <br>// Control Globals <br>// <br>CRITICAL_SECTION drawCritSec; <br>HBITMAP cardcacheMem[14*4+14];// 4 suites * 14 cards + 14 card backs <br> <br>const IID IID_ICatRegister = {0x0002E012,0x0000,0x0000,{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; <br>const CATID CATID_SafeForScripting = {0x7dd95801,0x9882,0x11cf,{0x9f,0xa9,0x00,0xaa,0x00,0x6c,0x42,0xc4}}; <br>const CATID CATID_SafeForInitializing = {0x7dd95802,0x9882,0x11cf,{0x9f,0xa9,0x00,0xaa,0x00,0x6c,0x42,0xc4}}; <br> <br>// needed for ASSERTs and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// our Libid.  This should be the LIBID from the Type library, or NULL if you <br>// don't have one. <br>// <br>const CLSID *g_pLibid = &amp;LIBID_CardObjects; <br> <br> <br>//=--------------------------------------------------------------------------= <br>// Localization Information <br>// <br>// We need the following two pieces of information: <br>//    a. whether or not this DLL uses satellite DLLs for localization.  if <br>//       not, then the lcidLocale is ignored, and we just always get resources <br>//       from the server module file. <br>//    b. the ambient LocaleID for this in-proc server.  Controls calling <br>//       GetResourceHandle() will set this up automatically, but anybody <br>//       else will need to be sure that it's set up properly. <br>// <br>const VARIANT_BOOL    g_fSatelliteLocalization =  FALSE; <br>LCID            g_lcidLocale = MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT); <br> <br> <br>//=--------------------------------------------------------------------------= <br>// your license key and where under HKEY_CLASSES_ROOT_LICENSES it's sitting <br>// <br>const WCHAR g_wszLicenseKey [] = L""; <br>const WCHAR g_wszLicenseLocation [] = L""; <br> <br> <br>WNDPROC g_ParkingWindowProc = NULL; <br> <br>//=--------------------------------------------------------------------------= <br>// This Table describes all the automatible objects in your automation server. <br>// See AutomationObject.H for a description of what goes in this structure <br>// and what it's used for. <br>// <br>OBJECTINFO g_ObjectInfo[] = { <br>    CONTROLOBJECT(Card), <br>    PROPERTYPAGE(CardGeneral), <br>    EMPTYOBJECT <br>}; <br> <br>const char g_szLibName[] = "ActiveXSDKCard"; <br> <br>//=--------------------------------------------------------------------------= <br>// IntializeLibrary <br>//=--------------------------------------------------------------------------= <br>// called from DllMain:DLL_PROCESS_ATTACH.  allows the user to do any sort of <br>// initialization they want to. <br>// <br>// Notes: <br>// <br>void WINAPI InitializeLibrary (void ) <br>{ <br>InitializeCriticalSection( &amp;drawCritSec ); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// UninitializeLibrary <br>//=--------------------------------------------------------------------------= <br>// called from DllMain:DLL_PROCESS_DETACH.  allows the user to clean up anything <br>// they want. <br>// <br>// Notes: <br>// <br>void WINAPI UninitializeLibrary <br>( <br>    void <br>) <br>{ <br>DeleteCriticalSection( &amp;drawCritSec ); <br> <br>for( int t = 0; t &lt; sizeof(cardcacheMem)/sizeof(cardcacheMem[0]); t++ ) <br>if( cardcacheMem[t] ) <br>DeleteObject( cardcacheMem[t] ); <br>} <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CheckForLicense <br>//=--------------------------------------------------------------------------= <br>// users can implement this if they wish to support Licensing.  otherwise, <br>// they can just return TRUE all the time. <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    BOOL            - TRUE means the license exists, and we can proceed <br>//                      FALSE means we're not licensed and cannot proceed <br>// <br>// Notes: <br>//    - implementers should use g_wszLicenseKey and g_wszLicenseLocation <br>//      from the top of this file to define their licensing [the former <br>//      is necessary, the latter is recommended] <br>// <br>BOOL WINAPI CheckForLicense <br>( <br>    void <br>) <br>{ <br>    // TODO: decide whether or not your server is licensed in this function. <br>    // people who don't want to bother with licensing should just return <br>    // true here always.  g_wszLicenseKey and g_wszLicenseLocation are <br>    // used by IClassFactory2 to do some of the licensing work. <br>    // <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// RegisterData <br>//=--------------------------------------------------------------------------= <br>// lets the inproc server writer register any data in addition to that in <br>// any other objects. <br>// <br>// Output: <br>//    BOOL            - false means failure. <br>// <br>// Notes: <br>// <br>BOOL WINAPI RegisterData <br>( <br>    void <br>) <br>{ <br>HRESULT hr; <br> <br>hr = CreateComponentCategory(CATID_SafeForScripting, L"Controls that are safely scriptable"); <br>hr = CreateComponentCategory(CATID_SafeForInitializing, L"Controls safely initializable from persistent data"); <br>hr = RegisterCLSIDInCategory(CLSID_Card, CATID_SafeForScripting); <br>hr = RegisterCLSIDInCategory(CLSID_Card, CATID_SafeForInitializing); <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// UnregisterData <br>//=--------------------------------------------------------------------------= <br>// inproc server writers should unregister anything they registered in <br>// RegisterData() here. <br>// <br>// Output: <br>//    BOOL            - false means failure. <br>// <br>// Notes: <br>// <br>BOOL WINAPI UnregisterData <br>( <br>    void <br>) <br>{ <br>HRESULT hr; <br> <br>hr = UnRegisterCLSIDInCategory(CLSID_Card, CATID_SafeForScripting); <br>hr = UnRegisterCLSIDInCategory(CLSID_Card, CATID_SafeForInitializing); <br>    return TRUE; <br>} <br> <br>BOOL WINAPI      CheckLicenseKey(LPWSTR wszCheckme) <br>{ <br>return TRUE; <br>} <br> <br>BSTR WINAPI      GetLicenseKey(void) <br>{ <br>return NULL; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CARDPPG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context72"></a>CARDPPG.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// CardPPG.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// property page implementations for Card control. <br>// <br>#include "IPServer.H" <br> <br>#include "LocalObj.H" <br>#include "CARDPPG.H" <br>#include "CARDCtl.H" <br>#include "Resource.H" <br>#include "Util.H" <br> <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// Property Page messages <br>//=--------------------------------------------------------------------------= <br>// in addition to regular windows messages you'll receive for a dialog box, <br>// you'll receive the following messages in your property page implementation: <br>// <br>// PPM_NEWOBJECTS: <br>//    wParam = 0; <br>//    lParam = (LPARAM)(HRESULT *)hr <br>// <br>//  - in this message, you should call FirstControl() to get a pointer to a <br>//    control, and initialize the values in the property page dialog with <br>//    values from the control object.  put results from the operation in <br>//    the HRESULT pointed to by LPARAM. <br>// <br>// PPM_APPLY: <br>//    wParam = 0; <br>//    lParam = (LPARAM)(HRESULT *)hr <br>// <br>//  - this message is sent to your dialog whenever the user clicks APPLY or OK <br>//    in the dialog.  you should have a loop with the following code in it: <br>// <br>//      for (pUnk = FirstControl(&amp;dwCookie) ; pUnk; pUnk = NextControl(&amp;dwCookie)) { <br>//            hr = pUnk-&gt;QueryInterface(IID_IMyCtlInterface, (void **)&amp;pMyCtl); <br>//            // set properties here!!! <br>//      } <br>// <br>//    call PropPageException() if there is an error while setting propertites <br>//    to show the exception set up by the property set routine. <br>// <br>// PPM_EDITPROPERTY: <br>//    wParam = dispid <br>//    lParam = (LPARAM)(HRESULT *)hr <br>// <br>//  - sent to your dialog when somebody wants you to set the focus to a specific <br>//    property [typically, one will see a call to this when one returns a page <br>//    from IPerPropertyBrowsing::MapPropertyToPage].  you can use this <br>//    to bring up dialogs, or do whatever flaps your flagella. <br>// <br> <br> <br>//=--------------------------------------------------------------------------= <br>// CCardGeneralPage::Create <br>//=--------------------------------------------------------------------------= <br>// global static creation function. <br>// <br>// Parameters: <br>//    IUnknown *    - [in] controlling unknown <br>// <br>// Output: <br>//    IUnknown *    - new prop page. <br>// <br>// Notes: <br>// <br>IUnknown *CCardGeneralPage::Create <br>( <br>    IUnknown *pUnkOuter <br>) <br>{ <br>    return (IUnknown *)new CCardGeneralPage(pUnkOuter); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CCardGeneralPage::CCardGeneralPage <br>//=--------------------------------------------------------------------------= <br>// constructor. <br>// <br>// Parameters: <br>//    IUnknown *        - [in] controlling unknown. <br>// <br>// Notes: <br>// <br>CCardGeneralPage::CCardGeneralPage <br>( <br>    IUnknown *pUnkOuter <br>) <br>: CPropertyPage(pUnkOuter, OBJECT_TYPE_PPGCARDGENERAL) <br>{ <br>    // initialize local variables here. <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CCardGeneralPage::~CCardGeneralPage <br>//=--------------------------------------------------------------------------= <br>// destructor. <br>// <br>// Notes: <br>// <br>CCardGeneralPage::~CCardGeneralPage() <br>{ <br>    // clean up <br>} <br> <br>static int SimpleAtoi( const char *str ) <br>{ <br>int num = 0; <br>const char *s; <br> <br>for( s = (*str == '-' ? str+1 : str); *s &gt;= '0' &amp;&amp; *s &lt;= '9'; s++ ) <br>num = num * 10 + (*s - '0'); <br> <br>return( *str == '-' ? -num : num ); <br>} <br> <br>static void SetDropDown( HWND hwnd, const char *strs[], int id, short set ) <br>{ <br>short newset; <br>int i; <br> <br>newset = -1000; <br>for( i = 0; strs[i]; i++ ) <br>{ <br>SendMessage( GetDlgItem( hwnd, id ), CB_ADDSTRING,  <br>0, (LPARAM) strs[i] ); <br>if( SimpleAtoi(strs[i]) == set ) <br>newset = i; <br>} <br>if( newset != -1000 ) <br>SendMessage( GetDlgItem( hwnd, id ), CB_SETCURSEL, <br>(WPARAM) newset, 0 ); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// CCardGeneralPage::DialogProc <br>//=--------------------------------------------------------------------------= <br>// our dialog proc. <br>// <br>// Parameters: <br>//    - see win32sdk docs on DialogProc <br>// <br>// Notes: <br>// <br>BOOL CCardGeneralPage::DialogProc <br>( <br>    HWND   hwnd, <br>    UINT   msg, <br>    WPARAM wParam, <br>    LPARAM lParam <br>) <br>{ <br>    HRESULT     hr; <br>    ICard *pCard; <br>    IUnknown   *pUnk; <br>    DWORD       dwDummy; <br>    enumCardNumber number; <br>    enumCardSuite suite; <br>    enumCardAlignment cardalignment; <br>VARIANT_BOOL invert; <br> <br>static const char *numstr[] = { <br>"1   - Ace", <br>"2", "3", "4", "5", "6", "7", "8", "9", "10", <br>"11  - Jack", <br>"12  - Queen", <br>"13  - King", <br>        "14  - Joker", <br>NULL }; <br> <br>static const char *alignstr[] = { <br>"0   - Top Left", <br>"1   - Top Center", <br>"2   - Top Right", <br>"3   - Center Left", <br>"4   - Center", <br>"5   - Center Right", <br>"6   - Bottom Left", <br>"7   - Bottom Center", <br>"8   - Bottom Right", <br>"9   - Stretch", <br>NULL }; <br> <br>static const char *suitestr[] = { <br>"0   - Invisible", <br>"1   - Clubs",  <br>"2   - Spades",  <br>"3   - Hearts",  <br>"4   - Diamonds", <br>"-1  - Card Back: Weave 1", <br>"-2  - Card Back: Weave 2", <br>"-3  - Card Back: Robot", <br>"-4  - Card Back: Roses", <br>"-5  - Card Back: Vine 1 (black)", <br>"-6  - Card Back: Vine 2 (blue)", <br>"-7  - Card Back: Fish 1 (light blue)", <br>"-8  - Card Back: Fish 2 (dark blue)", <br>"-9  - Card Back: Seashell", <br>"-10 - Card Back: Castel", <br>"-11 - Card Back: Beach", <br>"-12 - Card Back: Hand", <br>"-13 - Card Back: Casino",  <br>NULL }; <br> <br>    switch (msg) { <br> <br>      // we've been given some new objects, so go and re-set up the dialog page. <br>      // <br>      case PPM_NEWOBJECTS: <br>        { <br> <br>        pUnk = FirstControl(&amp;dwDummy); <br>        if (!pUnk) return FALSE; <br> <br>        hr = pUnk-&gt;QueryInterface(IID_ICard, (void **)&amp;pCard); <br>        if (FAILED(hr)) return FALSE; <br> <br>        pCard-&gt;get_Number(&amp;number); <br>        pCard-&gt;get_Suite(&amp;suite); <br>        pCard-&gt;get_Invert(&amp;invert); <br>pCard-&gt;get_CardAlignment(&amp;cardalignment); <br> <br>SetDropDown( hwnd, suitestr, IDC_SUITE, suite ); <br>SetDropDown( hwnd, numstr, IDC_NUMBER, number ); <br>SetDropDown( hwnd, alignstr, IDC_ALIGNMENT, cardalignment ); <br> <br>CheckDlgButton( hwnd, IDC_INVERT, invert == VARIANT_TRUE ? 1 : 0 ); <br> <br>        pCard-&gt;Release(); <br>        } <br>        return TRUE; <br> <br>      case PPM_APPLY: <br>        { <br>        char      szTmp[128]; <br> <br>        // get all the controls we have to update. <br>        // <br>        for (pUnk = FirstControl(&amp;dwDummy) ; pUnk; pUnk = NextControl(&amp;dwDummy))  <br>{ <br>            hr = pUnk-&gt;QueryInterface(IID_ICard, (void **)&amp;pCard); <br>            if (FAILED(hr)) continue; <br>     <br>            GetDlgItemText(hwnd, IDC_NUMBER, szTmp, 128); <br>    number = (enumCardNumber) SimpleAtoi(szTmp); <br>            GetDlgItemText(hwnd, IDC_SUITE, szTmp, 128); <br>    suite = (enumCardSuite) SimpleAtoi(szTmp); <br>            GetDlgItemText(hwnd, IDC_ALIGNMENT, szTmp, 128); <br>    cardalignment = (enumCardAlignment) SimpleAtoi(szTmp); <br>    invert = IsDlgButtonChecked( hwnd, IDC_INVERT ) ? VARIANT_TRUE : VARIANT_FALSE; <br>     <br>            pCard-&gt;put_Number(number); <br>    pCard-&gt;put_Suite(suite); <br>    pCard-&gt;put_Invert(invert); <br>    pCard-&gt;put_CardAlignment(cardalignment); <br>            pCard-&gt;Release(); <br>        } <br>        } <br>        return TRUE; <br> <br>      case WM_COMMAND: <br>        switch (LOWORD(wParam)) { <br>          case IDC_SUITE: case IDC_NUMBER: case IDC_ALIGNMENT: <br>            if (HIWORD(wParam) == CBN_SELCHANGE) <br>                MakeDirty(); <br>  case IDC_INVERT: <br>    if( HIWORD(wParam) == BN_CLICKED ) <br>MakeDirty(); <br>        } <br>        break; <br>    } <br> <br>return(FALSE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTLWRAP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context93"></a>CTLWRAP.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// CtlWrap.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// wrappers for various routines that have slightly different implementations <br>// for windowed and windowless controls. <br>// <br>#include "IPServer.H" <br> <br>#include "CtrlObj.H" <br> <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxGetFocus    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// indicates whether or not we have the focus. <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    TRUE if we have focus, else false <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxGetFocus <br>( <br>    void <br>) <br>{ <br>    // if we're windowless, the site provides this functionality <br>    // <br>    if (m_pInPlaceSiteWndless) { <br>        return (m_pInPlaceSiteWndless-&gt;GetFocus() == S_OK); <br>    } else { <br> <br>        // we've got a window.  just let the APIs do our work <br>        // <br>        if (m_fInPlaceActive) <br>            return (GetFocus() == m_hwnd); <br>        else <br>            return FALSE; <br>    } <br> <br>    // dead code <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxGetWindowRect    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// returns the current rectangle for this control, and correctly handles <br>// windowless vs windowed. <br>// <br>// Parameters: <br>//    LPRECT                - [out]  duh. <br>// <br>// Output: <br>//    BOOL                  - false means unexpected. <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxGetWindowRect <br>( <br>    LPRECT prc <br>) <br>{ <br>    // if we're windowless, then we have this information already! <br>    // <br>    if (Windowless()) { <br>        *prc = m_rcLocation; <br>        return TRUE; <br>    } else <br>        return GetWindowRect(m_hwnd, prc); <br> <br>    // dead code <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxDefWindowProc    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// default window processing <br>// <br>// Parameters: <br>//    UINT           - [in] duh. <br>//    WPARAM         - [in] duh. <br>//    LPARAM         - [in] DUH. <br>// <br>// Output: <br>//    LRESULT <br>// <br>// Notes: <br>// <br>LRESULT COleControl::OcxDefWindowProc <br>( <br>    UINT   msg, <br>    WPARAM wParam, <br>    LPARAM lParam <br>) <br>{ <br>    LRESULT l; <br> <br>    // if we're windowless, this is a site provided pointer <br>    // <br>    if (m_pInPlaceSiteWndless) <br>        m_pInPlaceSiteWndless-&gt;OnDefWindowMessage(msg, wParam, lParam, &amp;l); <br>    else <br>        // we've got a window -- just pass it along <br>        // <br>        l = DefWindowProc(m_hwnd, msg, wParam, lParam); <br> <br>    return l; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxGetDC    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// wraps the functionality of GetDC, and correctly handles windowless controls <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    HDC            - null means we couldn't get one <br>// <br>// Notes: <br>//    - we don't bother with a bunch of the IOleInPlaceSiteWindowless::GetDc <br>//      parameters, since the windows GetDC doesn't expose these either. users <br>//      wanting that sort of fine tuned control can call said routine <br>//      explicitly <br>// <br>HDC COleControl::OcxGetDC <br>( <br>    void <br>) <br>{ <br>    HDC hdc = NULL; <br> <br>    // if we're windowless, the site provides this functionality. <br>    // <br>    if (m_pInPlaceSiteWndless) <br>        m_pInPlaceSiteWndless-&gt;GetDC(NULL, 0, &amp;hdc); <br>    else <br>        hdc = GetDC(m_hwnd); <br> <br>    return hdc; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxReleaseDC    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// releases a DC returned by OcxGetDC <br>// <br>// Parameters: <br>//    HDC             - [in] release me <br>// <br>// Output: <br>//    none <br>// <br>// Notes: <br>// <br>void COleControl::OcxReleaseDC <br>( <br>    HDC hdc <br>) <br>{ <br>    // if we're windowless, the site does this for us <br>    // <br>    if (m_pInPlaceSiteWndless) <br>        m_pInPlaceSiteWndless-&gt;ReleaseDC(hdc); <br>    else <br>        ReleaseDC(m_hwnd, hdc); <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxSetCapture    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// provides a means for the control to get or release capture. <br>// <br>// Parameters: <br>//    BOOL            - [in] true means take, false release <br>// <br>// Output: <br>//    BOOL            - true means it's yours, false nuh-uh <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxSetCapture <br>( <br>    BOOL fGrab <br>) <br>{ <br>    HRESULT hr; <br> <br>    // the host does this for us if we're windowless [i'm getting really bored <br>    // of typing that] <br>    // <br>    if (m_pInPlaceSiteWndless) { <br>        hr = m_pInPlaceSiteWndless-&gt;SetCapture(fGrab); <br>        return (hr == S_OK); <br>    } else { <br>        // people shouldn't call this when they're not in-place active, but <br>        // just in case... <br>        // <br>        if (m_fInPlaceActive) { <br>            SetCapture(m_hwnd); <br>            return TRUE; <br>        } else <br>            return FALSE; <br>    } <br> <br>    // dead code <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxGetCapture    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// tells you whether or not you have the capture. <br>// <br>// Parameters: <br>//    none <br>// <br>// Output: <br>//    BOOL         - true it's yours, false it's not <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxGetCapture <br>( <br>    void <br>) <br>{ <br>    // host does this for windowless dudes <br>    // <br>    if (m_pInPlaceSiteWndless) <br>        return m_pInPlaceSiteWndless-&gt;GetCapture() == S_OK; <br>    else { <br>        // people shouldn't call this when they're not in-place active, but <br>        // just in case. <br>        // <br>        if (m_fInPlaceActive) <br>            return GetCapture() == m_hwnd; <br>        else <br>            return FALSE; <br>    } <br> <br>    // dead code <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxInvalidateRect    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// invalidates the control's rectangle <br>// <br>// Parameters: <br>//    LPCRECT            - [in] rectangle to invalidate <br>//    BOOL               - [in] do we erase background first? <br>// <br>// Output: <br>//    BOOL <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxInvalidateRect <br>( <br>    LPCRECT prcInvalidate, <br>    BOOL    fErase <br>) <br>{ <br>    // if we're windowless, then we need to get the site to do all this for <br>    // us <br>    if (m_pInPlaceSiteWndless) <br>        return m_pInPlaceSiteWndless-&gt;InvalidateRect(prcInvalidate, fErase) == S_OK; <br>    else { <br>        // otherwise do something different depending on whether or not we're <br>        // in place active or not <br>        // <br>        if (m_fInPlaceActive) <br>            return InvalidateRect(m_hwnd, prcInvalidate, TRUE); <br>        else <br>            ViewChanged(); <br>    } <br> <br>    return TRUE; <br>} <br> <br>//=--------------------------------------------------------------------------= <br>// COleControl::OcxScrollRect    [wrapper] <br>//=--------------------------------------------------------------------------= <br>// does some window scrolling for the control <br>// <br>// Parameters: <br>//    LPCRECT             - [in] region to scroll <br>//    LPCRECT             - [in] region to clip <br>//    int                 - [in] dx to scroll <br>//    int                 - [in] dy to scroll <br>// <br>// Output: <br>//    BOOL <br>// <br>// Notes: <br>// <br>BOOL COleControl::OcxScrollRect <br>( <br>    LPCRECT  prcBounds, <br>    LPCRECT  prcClip, <br>    int      dx, <br>    int      dy <br>) <br>{ <br>    // if we're windowless, the site provides this functionality, otherwise <br>    // APIs do the job <br>    // <br>    if (m_pInPlaceSiteWndless) <br>        return m_pInPlaceSiteWndless-&gt;ScrollRect(dx, dy, prcBounds, prcClip) == S_OK; <br>    else { <br>        if (m_fInPlaceActive)  <br>            ScrollWindowEx(m_hwnd, dx, dy, prcBounds, prcClip, NULL, NULL, SW_INVALIDATE); <br>        else <br>            return FALSE; <br>    } <br> <br>    return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

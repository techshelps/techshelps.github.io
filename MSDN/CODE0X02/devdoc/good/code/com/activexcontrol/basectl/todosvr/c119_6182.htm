<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOREG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context122"></a>DOREG.CPP</h2>
<pre><code>//=--------------------------------------------------------------------------= <br>// DOReg.Cpp <br>//=--------------------------------------------------------------------------= <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>//=--------------------------------------------------------------------------= <br>// <br>// implementation of registry manipulation functions for DocObject servers <br>// <br> <br>#include "CDocObj.H" <br>#include &lt;util.h&gt; <br> <br>// for ASSERT and FAIL <br>// <br>SZTHISFILE <br> <br>//=--------------------------------------------------------------------------= <br>// RegisterDocObject. <br>//=--------------------------------------------------------------------------= <br>// This function writes out some values specific to a DocObject. You should <br>// call this from your RegisterData function. You don't need to do anything <br>// special for UnregisterData, because the framework already deletes the <br>// entire &lt;LibraryName&gt;.&lt;ObjectName&gt; and CLSID\&lt;CLSID&gt; keys. <br>// <br>// What we add here: <br>// <br>// HKEY_CLASSES_ROOT\&lt;LibraryName&gt;.&lt;ObjectName&gt;\DocObject = &lt;MISCDOCOBJ&gt; <br>// HKEY_CLASSES_ROOT\CLSID\&lt;CLSID&gt;\DocObject = &lt;MISCDOCOBJ&gt; <br>// HKEY_CLASSES_ROOT\CLSID\&lt;CLSID&gt;\Printable <br>// HKEY_CLASSES_ROOT\CLSID\&lt;CLSID&gt;\DefaultExtension = &lt;EXT&gt;, &lt;DESCRIPTION&gt; <br>// <br>// Parameters: <br>//    LPCSTR       - [in] Library Name <br>//    LPCSTR       - [in] Object Name <br>//    REFCLSID     - [in] CLSID of the object <br>//    DWORD        - [in] misc DocObject status flags <br>//    BOOL         - [in] whether IPrint is supported <br>//    LPCSTR       - [in] default file extension <br>//    LPCSTR       - [in] file description for File Open, File Save As <br>// <br>// Output: <br>//    BOOL <br>// <br>// Notes: <br>//    - not the most terribly efficient routine. <br>// <br>BOOL RegisterDocObject(LPCSTR pszLibName, LPCSTR pszObjectName, <br>                       REFCLSID riidObject, DWORD dwMiscDocObj, <br>                   BOOL bPrint, LPCSTR szExt, LPCSTR szDescription) <br>{ <br>    HKEY    hk, hkSub = NULL; <br>    char    szTmp[MAX_PATH]; <br>    char    szGuidStr[GUID_STR_LEN]; <br>    DWORD   dwDummy; <br>    LONG    l; <br> <br>    // HKEY_CLASSES_ROOT\&lt;LibraryName&gt;.&lt;ObjectName&gt;\DocObject = &lt;MISCDOCOBJ&gt; <br>    // <br>    lstrcpy(szTmp, pszLibName); <br>    lstrcat(szTmp, "."); <br>    lstrcat(szTmp, pszObjectName); <br> <br>    l = RegCreateKeyEx(HKEY_CLASSES_ROOT, szTmp, 0L, "", <br>                       REG_OPTION_NON_VOLATILE, KEY_READ | KEY_WRITE, <br>                       NULL, &amp;hk, &amp;dwDummy); <br>    CLEANUP_ON_ERROR(l); <br> <br>    l = RegCreateKeyEx(hk, "DocObject", 0L, "", REG_OPTION_NON_VOLATILE, <br>                       KEY_READ | KEY_WRITE, NULL, &amp;hkSub, &amp;dwDummy); <br>    CLEANUP_ON_ERROR(l); <br> <br>    wsprintf(szTmp, "%d", dwMiscDocObj); <br>    l = RegSetValueEx(hkSub, NULL, 0, REG_SZ, (BYTE *)szTmp, lstrlen(szTmp) + 1); <br>    CLEANUP_ON_ERROR(l); <br>    RegCloseKey(hkSub); <br>    RegCloseKey(hk); <br> <br>    // HKEY_CLASSES_ROOT\CLSID\&lt;CLSID&gt;\   <br>    // <br>    StringFromGuidA(riidObject, szGuidStr); <br>    wsprintf(szTmp, "CLSID\\%s", szGuidStr); <br>    l = RegOpenKeyEx(HKEY_CLASSES_ROOT, szTmp, 0, KEY_ALL_ACCESS, &amp;hk); <br>    if (l != ERROR_SUCCESS) return FALSE; <br> <br>    // create the Printable key, if printing supported. <br>    // <br>if (bPrint) <br>{ <br>       l = RegCreateKeyEx(hk, "Printable", 0, "", REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &amp;hkSub, &amp;dwDummy); <br>       CLEANUP_ON_ERROR(l); <br>       RegCloseKey(hkSub); <br>       hkSub = NULL; <br>} <br> <br>    // now set up the DocObject key... <br>    // <br>    l = RegCreateKeyEx(hk, "DocObject", 0, "", REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &amp;hkSub, &amp;dwDummy); <br>    CLEANUP_ON_ERROR(l); <br> <br>    wsprintf(szTmp, "%d", dwMiscDocObj); <br>    l = RegSetValueEx(hkSub, NULL, 0, REG_SZ, (BYTE *)szTmp, lstrlen(szTmp) + 1); <br>    CLEANUP_ON_ERROR(l); <br> <br>    RegCloseKey(hkSub); <br>hkSub = NULL; <br> <br>    // now set up the DefaultExtension key <br>    // <br>    l = RegCreateKeyEx(hk, "DefaultExtension", 0, "", REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &amp;hkSub, &amp;dwDummy); <br>    CLEANUP_ON_ERROR(l); <br> <br>    wsprintf(szTmp, "%s,%s", szExt, szDescription); <br>    l = RegSetValueEx(hkSub, NULL, 0, REG_SZ, (BYTE *)szTmp, lstrlen(szTmp) + 1); <br>    CLEANUP_ON_ERROR(l); <br> <br>  CleanUp: <br>    if (hk) <br>        RegCloseKey(hk); <br>    if (hkSub) <br>        RegCloseKey(hkSub); <br> <br>    return (l == ERROR_SUCCESS) ? TRUE : FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

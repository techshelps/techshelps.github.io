<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCLIENT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context413"></a>SCLIENT.CPP</h2>
<pre><code>// =========================================================================== <br>// File: S C L I E N T . C P P <br>//  <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Description: <br>//  <br>//  This is the client-portion of the SIMPLE Distributed COM sample. This <br>// application uses the CLSID_SimpleObject class implemented by the SSERVER.CPP <br>// module. Pass the machine-name to instantiate the object on, or pass no <br>// arguments to instantiate the object on the same machine. See the comments <br>// in SSERVER.CPP for further details. <br>//  <br>//  The purpose of this sample is to demonstrate what is minimally required <br>// to use a COM object, whether it runs on the same machine or on a different <br>// machine. <br>//  <br>// Instructions: <br>//  <br>//  To use this sample: <br>//   * build it using the NMAKE command. NMAKE will create SSERVER.EXE and <br>//     SCLIENT.EXE. <br>//   * install the SSERVER.EXE on the current machine or on a remote machine <br>//     according to the installation instructions found in SSERVER.CPP. <br>//   * run SCLIENT.EXE. use no command-line arguments to instantiate the object <br>//     on the current machine. use a single command-line argument of the remote <br>//     machine-name (UNC or DNS) to instantiate the object on a remote machine. <br>//   * SCLIENT.EXE displays some simple information about the calls it is <br>//     making on the object. <br>//  <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br> <br>// %%Includes: --------------------------------------------------------------- <br>#define INC_OLE2 <br>#include &lt;stdio.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;initguid.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;conio.h&gt; <br> <br>// %%GUIDs: ------------------------------------------------------------------ <br>DEFINE_GUID(CLSID_SimpleObject, 0x5e9ddec7, 0x5767, 0x11cf, 0xbe, 0xab, 0x0, 0xaa, 0x0, 0x6c, 0x36, 0x6); <br> <br>// %%Constants: -------------------------------------------------------------- <br>const ULONG cbDefault = 4096;    // default # of bytes to Read/Write <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: Message <br>//  <br>//  Formats and displays a message to the console. <br>// --------------------------------------------------------------------------- <br> void <br>Message(LPTSTR szPrefix, HRESULT hr) <br>{ <br>    LPTSTR   szMessage; <br> <br>    if (hr == S_OK) <br>        { <br>        wprintf(szPrefix); <br>        return; <br>        } <br>  <br>    if (HRESULT_FACILITY(hr) == FACILITY_WINDOWS) <br>        hr = HRESULT_CODE(hr); <br>  <br>    FormatMessage( <br>        FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>        FORMAT_MESSAGE_FROM_SYSTEM, <br>        NULL, <br>        hr, <br>        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), //The user default language <br>        (LPTSTR)&amp;szMessage, <br>        0, <br>        NULL); <br> <br>    wprintf(TEXT("%s: %s(%lx)\n"), szPrefix, szMessage, hr); <br>     <br>    LocalFree(szMessage); <br>}  // Message <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: OutputTime <br>// --------------------------------------------------------------------------- <br> void <br>OutputTime(LARGE_INTEGER* pliStart, LARGE_INTEGER* pliFinish) <br>{ <br>    LARGE_INTEGER liFreq; <br> <br>    QueryPerformanceFrequency(&amp;liFreq); <br>    wprintf(TEXT("%0.4f seconds\n"), <br>        (float)(pliFinish-&gt;LowPart - pliStart-&gt;LowPart)/(float)liFreq.LowPart); <br>}  // OutputTime <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: main <br>// --------------------------------------------------------------------------- <br> void __cdecl <br>main(int argc, CHAR **argv) <br>{ <br>    HRESULT hr; <br>    MULTI_QI    mq; <br>    COSERVERINFO csi, *pcsi=NULL; <br>    WCHAR wsz [MAX_PATH]; <br>    ULONG cb = cbDefault; <br>    LARGE_INTEGER liStart, liFinish; <br> <br>    // allow a machine-name as the command-line argument <br>    if (argc &gt; 1) <br>        { <br>        MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, argv[1], -1, <br>            wsz, MAX_PATH); <br>        memset(&amp;csi, 0, sizeof(COSERVERINFO)); <br>        csi.pwszName = wsz; <br>        pcsi = &amp;csi; <br>        } <br> <br>    // allow a byte-size to be passed on the command-line <br>    if (argc &gt; 2) <br>        cb = atol(argv[2]); <br>         <br>    // initialize COM for free-threaded use <br>    hr = CoInitializeEx(NULL, COINIT_MULTITHREADED); <br>    if (FAILED(hr)) <br>        { <br>        Message(TEXT("Client: CoInitializeEx"), hr); <br>        exit(hr); <br>        } <br> <br>    // create a remote instance of the object on the argv[1] machine <br>    Message(TEXT("Client: Creating Instance..."), S_OK); <br>    mq.pIID = &amp;IID_IStream; <br>    mq.pItf = NULL; <br>    mq.hr = S_OK; <br>    QueryPerformanceCounter(&amp;liStart); <br>    hr = CoCreateInstanceEx(CLSID_SimpleObject, NULL, CLSCTX_SERVER, pcsi, 1, &amp;mq); <br>    QueryPerformanceCounter(&amp;liFinish); <br>    OutputTime(&amp;liStart, &amp;liFinish); <br> <br>    if (FAILED(hr)) <br>        Message(TEXT("Client: CoCreateInstanceEx"), hr); <br>    else <br>        { <br>        LPSTREAM    pstm = (IStream*)mq.pItf; <br>        LPVOID      pv; <br> <br>        // "read" some data from the object <br>        Message(TEXT("Client: Reading data..."), S_OK); <br>        pv = CoTaskMemAlloc(cb); <br>        QueryPerformanceCounter(&amp;liStart); <br>        hr = pstm-&gt;Read(pv, cb, NULL); <br>        QueryPerformanceCounter(&amp;liFinish); <br>        OutputTime(&amp;liStart, &amp;liFinish); <br>        if (FAILED(hr)) <br>            Message(TEXT("Client: IStream::Read"), hr); <br> <br>        // "write" some data to the object <br>        Message(TEXT("Client: Writing data..."), S_OK); <br>        QueryPerformanceCounter(&amp;liStart); <br>        hr = pstm-&gt;Write(pv, cb, NULL); <br>        QueryPerformanceCounter(&amp;liFinish); <br>        OutputTime(&amp;liStart, &amp;liFinish); <br>        if (FAILED(hr)) <br>            Message(TEXT("Client: IStream::Write"), hr); <br> <br>        // let go of the object <br>        pstm-&gt;Release(); <br>        } <br> <br>    CoUninitialize(); <br>    Message(TEXT("Client: Done"), S_OK); <br>}  // main <br> <br>// EOF ======================================================================= </code></pre>
<p>&nbsp;</p></body>
</HTML>

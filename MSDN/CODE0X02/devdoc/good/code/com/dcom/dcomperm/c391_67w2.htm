<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCOMPERM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context392"></a>DCOMPERM.CPP</h2>
<pre><code>/*++ <br> <br>DCOM Permission Configuration Sample <br>Copyright (c) 1996, Microsoft Corporation. All rights reserved. <br> <br>Module Name: <br> <br>    dcomperm.cpp <br> <br>Abstract: <br> <br>    Main module for DCOM Permission Configuration Sample <br> <br>Author: <br> <br>    Michael Nelson <br> <br>Environment: <br> <br>    Windows NT <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;conio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include "ntsecapi.h" <br>#include "dcomperm.h" <br> <br>void <br>ShowUsage ( <br>    LPTSTR ErrorString <br>    ) <br>{ <br>    _tprintf (TEXT("%s\n"), ErrorString); <br>    _tprintf (TEXT("Syntax: dcomperm &lt;option&gt; [...]\n\n")); <br> <br>    _tprintf (TEXT("Options:\n")); <br> <br>    _tprintf (TEXT("   -da &lt;\"set\" or \"remove\"&gt; &lt;Principal Name&gt; [\"permit\" or \"deny\"]\n")); <br>    _tprintf (TEXT("   -da list\n")); <br>    _tprintf (TEXT("       Modify or list the default access permission list\n\n")); <br> <br>    _tprintf (TEXT("   -dl &lt;\"set\" or \"remove\"&gt; &lt;Principal Name&gt; [\"permit\" or \"deny\"]\n")); <br>    _tprintf (TEXT("   -dl list\n")); <br>    _tprintf (TEXT("       Modify or list the default launch permission list\n\n")); <br> <br>    _tprintf (TEXT("   -aa &lt;AppID&gt; &lt;\"set\" or \"remove\"&gt; &lt;Principal Name&gt; [\"permit\" or \"deny\"]\n")); <br>    _tprintf (TEXT("   -aa &lt;AppID&gt; default\n")); <br>    _tprintf (TEXT("   -aa &lt;AppID&gt; list\n")); <br>    _tprintf (TEXT("       Modify or list the access permission list for a specific AppID\n\n")); <br> <br>    _tprintf (TEXT("   -al &lt;AppID&gt; &lt;\"set\" or \"remove\"&gt; &lt;Principal Name&gt; [\"permit\" or \"deny\"]\n")); <br>    _tprintf (TEXT("   -al &lt;AppID&gt; default\n")); <br>    _tprintf (TEXT("   -al &lt;AppID&gt; list\n")); <br>    _tprintf (TEXT("       Modify or list the launch permission list for a specific AppID\n\n")); <br> <br>    _tprintf (TEXT("Press any key to continue. . .")); <br>    _getch(); <br>    _tprintf (TEXT("\r                               \r")); <br> <br>    _tprintf (TEXT("   -runas &lt;AppID&gt; &lt;Principal Name&gt; &lt;Password&gt;\n")); <br>    _tprintf (TEXT("   -runas &lt;AppID&gt; \"Interactive User\"\n")); <br>    _tprintf (TEXT("       Set the RunAs information for a specific AppID\n\n")); <br> <br>    _tprintf (TEXT("Examples:\n")); <br>    _tprintf (TEXT("   dcomperm -da set redmond\\t-miken permit\n")); <br>    _tprintf (TEXT("   dcomperm -dl set redmond\\jdoe deny\n")); <br>    _tprintf (TEXT("   dcomperm -aa {12345678-1234-1234-1234-00aa00bbf7c7} list\n")); <br>    _tprintf (TEXT("   dcomperm -al {12345678-1234-1234-1234-00aa00bbf7c7} remove redmond\\t-miken\n")); <br>    _tprintf (TEXT("   dcomperm -runas {12345678-1234-1234-1234-00aa00bbf7c7} redmond\\jdoe password\n")); <br> <br>    exit (0); <br>} <br> <br>void <br>Error ( <br>    LPTSTR ErrorMessage, <br>    DWORD ErrorCode <br>    ) <br>{ <br>    TCHAR messageBuffer [255]; <br> <br>    _tprintf (TEXT("%s\n%s"), ErrorMessage, SystemMessage (messageBuffer, ErrorCode)); <br>    exit (0); <br>} <br> <br>void <br>HandleDAOption ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    DWORD returnValue; <br> <br>    if (argc &lt; 3) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [2]), TEXT("LIST")) == 0) <br>    { <br>        _tprintf (TEXT("Default access permission list:\n\n")); <br>        ListDefaultAccessACL(); <br>        return; <br>    } <br> <br>    if (argc &lt; 4) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [2]), TEXT("SET")) == 0) <br>    { <br>        if (argc &lt; 5) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        if (_tcscmp (_tcsupr (argv [4]), TEXT("PERMIT")) == 0) <br>            returnValue = ChangeDefaultAccessACL (argv [3], TRUE, TRUE); else <br> <br>        if (_tcscmp (_tcsupr (argv [4]), TEXT("DENY")) == 0) <br>            returnValue = ChangeDefaultAccessACL (argv [3], TRUE, FALSE); else <br>        { <br>            ShowUsage (TEXT("You can only set a user's permissions to \"permit\" or \"deny\".\n\n")); <br>        } <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot add user to default access ACL."), returnValue); <br>    } else <br>    if (_tcscmp (_tcsupr (argv [2]), TEXT("REMOVE")) == 0) <br>    { <br>        returnValue = ChangeDefaultAccessACL (argv[3], FALSE, FALSE); <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot remove user from default access ACL."), returnValue); <br>    } else <br>        ShowUsage (TEXT("You can only \"set\" or \"remove\" a user.")); <br>} <br> <br>void <br>HandleDLOption ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    DWORD returnValue; <br> <br>    if (argc &lt; 3) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [2]), TEXT("LIST")) == 0) <br>    { <br>        _tprintf (TEXT("Default launch permission list:\n\n")); <br>        ListDefaultLaunchACL(); <br>        return; <br>    } <br> <br>    if (argc &lt; 4) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [2]), TEXT("SET")) == 0) <br>    { <br>        if (argc &lt; 5) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        if (_tcscmp (_tcsupr (argv [4]), TEXT("PERMIT")) == 0) <br>            returnValue = ChangeDefaultLaunchACL (argv [3], TRUE, TRUE); else <br> <br>        if (_tcscmp (_tcsupr (argv [4]), TEXT("DENY")) == 0) <br>            returnValue = ChangeDefaultLaunchACL (argv [3], TRUE, FALSE); else <br>        { <br>            ShowUsage (TEXT("You can only set a user's permissions to \"permit\" or \"deny\".\n\n")); <br>        } <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot add user to default launch ACL."), returnValue); <br>    } else <br>    if (_tcscmp (_tcsupr (argv [3]), TEXT("REMOVE")) == 0) <br>    { <br>        returnValue = ChangeDefaultLaunchACL (argv[3], FALSE, FALSE); <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot remove user from default launch ACL."), returnValue); <br>    } else <br>        ShowUsage (TEXT("You can only \"set\" or \"remove\" a user.")); <br>} <br> <br>void <br>HandleAAOption ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    DWORD returnValue; <br>    HKEY  registryKey; <br>    TCHAR appid [256]; <br>    TCHAR keyName [256]; <br> <br>    if (argc &lt; 4) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv[3]), TEXT("LIST")) == 0) <br>    { <br>        if (argc &lt; 4) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        _tprintf (TEXT("Access permission list for AppID %s:\n\n"), argv[2]); <br>        ListAppIDAccessACL (argv[2]); <br>        return; <br>    } <br> <br>    if (_tcscmp (_tcsupr (argv[3]), TEXT("DEFAULT")) == 0) <br>    { <br>        if (argv [2][0] == '{') <br>            wsprintf (appid, TEXT("%s"), argv [2]); else <br>            wsprintf (appid, TEXT("{%s}"), argv [2]); <br> <br>        wsprintf (keyName, TEXT("APPID\\%s"), appid); <br> <br>        returnValue = RegOpenKeyEx (HKEY_CLASSES_ROOT, keyName, 0, KEY_ALL_ACCESS, &amp;registryKey); <br>        if (returnValue != ERROR_SUCCESS &amp;&amp; returnValue != ERROR_FILE_NOT_FOUND) <br>            Error (TEXT("ERROR: Cannot open AppID registry key."), returnValue); <br> <br>        returnValue = RegDeleteValue (registryKey, TEXT("AccessPermission")); <br>        if (returnValue != ERROR_SUCCESS &amp;&amp; returnValue != ERROR_FILE_NOT_FOUND) <br>            Error (TEXT("ERROR: Cannot delete AccessPermission value."), returnValue); <br> <br>        RegCloseKey (registryKey); <br>        return; <br>    } <br> <br>    if (argc &lt; 5) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [3]), TEXT("SET")) == 0) <br>    { <br>        if (argc &lt; 6) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        if (_tcscmp (_tcsupr (argv [5]), TEXT("PERMIT")) == 0) <br>            returnValue = ChangeAppIDAccessACL (argv[2], argv [4], TRUE, TRUE); else <br> <br>        if (_tcscmp (_tcsupr (argv [5]), TEXT("DENY")) == 0) <br>            returnValue = ChangeAppIDAccessACL (argv[2], argv [4], TRUE, FALSE); else <br>        { <br>            ShowUsage (TEXT("You can only set a user's permissions to \"permit\" or \"deny\".\n\n")); <br>        } <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot add user to application access ACL."), returnValue); <br>    } else <br>    if (_tcscmp (_tcsupr (argv [3]), TEXT("REMOVE")) == 0) <br>    { <br>        returnValue = ChangeAppIDAccessACL (argv[2], argv[4], FALSE, FALSE); <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot remove user from application access ACL."), returnValue); <br>    } else <br>        ShowUsage (TEXT("You can only \"set\" or \"remove\" a user.")); <br>} <br> <br>void <br>HandleALOption ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    DWORD returnValue; <br>    HKEY  registryKey; <br>    TCHAR appid [256]; <br>    TCHAR keyName [256]; <br> <br>    if (argc &lt; 4) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv[3]), TEXT("LIST")) == 0) <br>    { <br>        if (argc &lt; 4) <br>            ShowUsage (TEXT("Invalid number of arguments.\n")); <br> <br>        _tprintf (TEXT("Launch permission list for AppID %s:\n\n"), argv[2]); <br>        ListAppIDLaunchACL (argv[2]); <br>        return; <br>    } <br> <br>    if (_tcscmp (_tcsupr (argv[3]), TEXT("DEFAULT")) == 0) <br>    { <br>        if (argv [2][0] == '{') <br>            wsprintf (appid, TEXT("%s"), argv [2]); else <br>            wsprintf (appid, TEXT("{%s}"), argv [2]); <br> <br>        wsprintf (keyName, TEXT("APPID\\%s"), appid); <br> <br>        returnValue = RegOpenKeyEx (HKEY_CLASSES_ROOT, keyName, 0, KEY_ALL_ACCESS, &amp;registryKey); <br>        if (returnValue != ERROR_SUCCESS &amp;&amp; returnValue != ERROR_FILE_NOT_FOUND) <br>            Error (TEXT("ERROR: Cannot open AppID registry key."), returnValue); <br> <br>        returnValue = RegDeleteValue (registryKey, TEXT("LaunchPermission")); <br>        if (returnValue != ERROR_SUCCESS &amp;&amp; returnValue != ERROR_FILE_NOT_FOUND) <br>            Error (TEXT("ERROR: Cannot delete LaunchPermission value."), returnValue); <br> <br>        RegCloseKey (registryKey); <br>        return; <br>    } <br> <br>    if (argc &lt; 5) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (_tcscmp (_tcsupr (argv [3]), TEXT("SET")) == 0) <br>    { <br>        if (argc &lt; 6) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        if (_tcscmp (_tcsupr (argv [5]), TEXT("PERMIT")) == 0) <br>            returnValue = ChangeAppIDLaunchACL (argv[2], argv [4], TRUE, TRUE); else <br> <br>        if (_tcscmp (_tcsupr (argv [5]), TEXT("DENY")) == 0) <br>            returnValue = ChangeAppIDLaunchACL (argv[2], argv [4], TRUE, FALSE); else <br>        { <br>            ShowUsage (TEXT("You can only set a user's permissions to \"permit\" or \"deny\".\n\n")); <br>        } <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot add user to application launch ACL."), returnValue); <br>    } else <br>    if (_tcscmp (_tcsupr (argv [3]), TEXT("REMOVE")) == 0) <br>    { <br>        returnValue = ChangeAppIDLaunchACL (argv[2], argv[4], FALSE, FALSE); <br> <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot remove user from application launch ACL."), returnValue); <br>    } else <br>        ShowUsage (TEXT("You can only \"set\" or \"remove\" a user.")); <br>} <br> <br>void <br>HandleRunAsOption ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    DWORD returnValue; <br>    HKEY  registryKey; <br>    TCHAR appid [256]; <br>    TCHAR keyName [256]; <br> <br>    if (argc &lt; 4) <br>        ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>    if (argv [2][0] == '{') <br>        wsprintf (appid, TEXT("%s"), argv [2]); else <br>        wsprintf (appid, TEXT("{%s}"), argv [2]); <br> <br>    wsprintf (keyName, TEXT("APPID\\%s"), appid); <br> <br>    returnValue = RegOpenKeyEx (HKEY_CLASSES_ROOT, keyName, 0, KEY_ALL_ACCESS, &amp;registryKey); <br>    if (returnValue != ERROR_SUCCESS) <br>        Error (TEXT("ERROR: Cannot open AppID registry key."), returnValue); <br> <br>    returnValue = RegSetValueEx (registryKey, TEXT("RunAs"), 0, REG_SZ, (LPBYTE) argv [3], _tcslen (argv[3]) * sizeof (TCHAR)); <br>    if (returnValue != ERROR_SUCCESS) <br>        Error (TEXT("ERROR: Cannot set RunAs registry value."), returnValue); <br> <br>    RegCloseKey (registryKey); <br> <br>    if (_tcscmp (_tcsupr (argv[3]), TEXT("INTERACTIVE USER")) != 0) <br>    { <br>        if (argc &lt; 5) <br>            ShowUsage (TEXT("Invalid number of arguments.")); <br> <br>        returnValue = SetRunAsPassword (argv[2], argv[3], argv[4]); <br>        if (returnValue != ERROR_SUCCESS) <br>            Error (TEXT("ERROR: Cannot set RunAs password."), returnValue); <br>    } <br>} <br> <br>extern "C" void <br>_tmain ( <br>    int argc, <br>    TCHAR **argv <br>    ) <br>{ <br>    if (argc &lt; 2) <br>        ShowUsage (TEXT("No option specified.")); <br> <br>    if (_tcscmp (_tcsupr (argv [1]), TEXT("-DA")) == 0) <br>        HandleDAOption (argc, argv); else <br> <br>    if (_tcscmp (_tcsupr (argv [1]), TEXT("-DL")) == 0) <br>        HandleDLOption (argc, argv); else <br> <br>    if (_tcscmp (_tcsupr (argv [1]), TEXT("-AA")) == 0) <br>        HandleAAOption (argc, argv); else <br> <br>    if (_tcscmp (_tcsupr (argv [1]), TEXT("-AL")) == 0) <br>        HandleALOption (argc, argv); else <br> <br>    if (_tcscmp (_tcsupr (argv [1]), TEXT("-RUNAS")) == 0) <br>        HandleRunAsOption (argc, argv); else <br> <br>    ShowUsage (TEXT("Invalid option specified.")); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACLMGMT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context395"></a>ACLMGMT.CPP</h2>
<pre><code>/*++ <br> <br>DCOM Permission Configuration Sample <br>Copyright (c) 1996, Microsoft Corporation. All rights reserved. <br> <br>Module Name: <br> <br>    aclmgmt.cpp <br> <br>Abstract: <br> <br>    Routines to manage access control lists <br> <br>Author: <br> <br>    Michael Nelson <br> <br>Environment: <br> <br>    Windows NT <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;conio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include "ntsecapi.h" <br>#include "dcomperm.h" <br> <br>DWORD <br>CopyACL ( <br>    PACL OldACL, <br>    PACL NewACL <br>    ) <br>{ <br>    ACL_SIZE_INFORMATION  aclSizeInfo; <br>    LPVOID                ace; <br>    ACE_HEADER            *aceHeader; <br>    ULONG                 i; <br> <br>    GetAclInformation (OldACL, (LPVOID) &amp;aclSizeInfo, (DWORD) sizeof (aclSizeInfo), AclSizeInformation); <br> <br>    // <br>    // Copy all of the ACEs to the new ACL <br>    // <br> <br>    for (i = 0; i &lt; aclSizeInfo.AceCount; i++) <br>    { <br>        // <br>        // Get the ACE and header info <br>        // <br> <br>        if (!GetAce (OldACL, i, &amp;ace)) <br>            return GetLastError(); <br> <br>        aceHeader = (ACE_HEADER *) ace; <br> <br>        // <br>        // Add the ACE to the new list <br>        // <br> <br>        if (!AddAce (NewACL, ACL_REVISION, 0xffffffff, ace, aceHeader-&gt;AceSize)) <br>            return GetLastError(); <br>    } <br> <br>    return ERROR_SUCCESS; <br>} <br> <br>DWORD <br>AddAccessDeniedACEToACL ( <br>    PACL *Acl, <br>    DWORD PermissionMask, <br>    LPTSTR Principal <br>    ) <br>{ <br>    ACL_SIZE_INFORMATION  aclSizeInfo; <br>    int                   aclSize; <br>    DWORD                 returnValue; <br>    PSID                  principalSID; <br>    PACL                  oldACL, newACL; <br> <br>    oldACL = *Acl; <br> <br>    returnValue = GetPrincipalSID (Principal, &amp;principalSID); <br>    if (returnValue != ERROR_SUCCESS) <br>        return returnValue; <br> <br>    GetAclInformation (oldACL, (LPVOID) &amp;aclSizeInfo, (DWORD) sizeof (ACL_SIZE_INFORMATION), AclSizeInformation); <br> <br>    aclSize = aclSizeInfo.AclBytesInUse + <br>              sizeof (ACL) + sizeof (ACCESS_DENIED_ACE) + <br>              GetLengthSid (principalSID) - sizeof (DWORD); <br> <br>    newACL = (PACL) new BYTE [aclSize]; <br> <br>    if (!InitializeAcl (newACL, aclSize, ACL_REVISION)) <br>    { <br>        free (principalSID); <br>        return GetLastError(); <br>    } <br> <br>    if (!AddAccessDeniedAce (newACL, ACL_REVISION2, PermissionMask, principalSID)) <br>    { <br>        free (principalSID); <br>        return GetLastError(); <br>    } <br> <br>    returnValue = CopyACL (oldACL, newACL); <br>    if (returnValue != ERROR_SUCCESS) <br>    { <br>        free (principalSID); <br>        return returnValue; <br>    } <br> <br>    *Acl = newACL; <br> <br>    free (principalSID); <br>    return ERROR_SUCCESS; <br>} <br> <br>DWORD <br>AddAccessAllowedACEToACL ( <br>    PACL *Acl, <br>    DWORD PermissionMask, <br>    LPTSTR Principal <br>    ) <br>{ <br>    ACL_SIZE_INFORMATION  aclSizeInfo; <br>    int                   aclSize; <br>    DWORD                 returnValue; <br>    PSID                  principalSID; <br>    PACL                  oldACL, newACL; <br> <br>    oldACL = *Acl; <br> <br>    returnValue = GetPrincipalSID (Principal, &amp;principalSID); <br>    if (returnValue != ERROR_SUCCESS) <br>        return returnValue; <br> <br>    GetAclInformation (oldACL, (LPVOID) &amp;aclSizeInfo, (DWORD) sizeof (ACL_SIZE_INFORMATION), AclSizeInformation); <br> <br>    aclSize = aclSizeInfo.AclBytesInUse + <br>              sizeof (ACL) + sizeof (ACCESS_ALLOWED_ACE) + <br>              GetLengthSid (principalSID) - sizeof (DWORD); <br> <br>    newACL = (PACL) new BYTE [aclSize]; <br> <br>    if (!InitializeAcl (newACL, aclSize, ACL_REVISION)) <br>    { <br>        free (principalSID); <br>        return GetLastError(); <br>    } <br> <br>    returnValue = CopyACL (oldACL, newACL); <br>    if (returnValue != ERROR_SUCCESS) <br>    { <br>        free (principalSID); <br>        return returnValue; <br>    } <br> <br>    if (!AddAccessAllowedAce (newACL, ACL_REVISION2, PermissionMask, principalSID)) <br>    { <br>        free (principalSID); <br>        return GetLastError(); <br>    } <br> <br>    *Acl = newACL; <br> <br>    free (principalSID); <br>    return ERROR_SUCCESS; <br>} <br> <br>DWORD <br>RemovePrincipalFromACL ( <br>    PACL Acl, <br>    LPTSTR Principal <br>    ) <br>{ <br>    ACL_SIZE_INFORMATION    aclSizeInfo; <br>    ULONG                   i; <br>    LPVOID                  ace; <br>    ACCESS_ALLOWED_ACE      *accessAllowedAce; <br>    ACCESS_DENIED_ACE       *accessDeniedAce; <br>    SYSTEM_AUDIT_ACE        *systemAuditAce; <br>    PSID                    principalSID; <br>    DWORD                   returnValue; <br>    ACE_HEADER              *aceHeader; <br> <br>    returnValue = GetPrincipalSID (Principal, &amp;principalSID); <br>    if (returnValue != ERROR_SUCCESS) <br>        return returnValue; <br> <br>    GetAclInformation (Acl, (LPVOID) &amp;aclSizeInfo, (DWORD) sizeof (ACL_SIZE_INFORMATION), AclSizeInformation); <br> <br>    for (i = 0; i &lt; aclSizeInfo.AceCount; i++) <br>    { <br>        if (!GetAce (Acl, i, &amp;ace)) <br>        { <br>            free (principalSID); <br>            return GetLastError(); <br>        } <br> <br>        aceHeader = (ACE_HEADER *) ace; <br> <br>        if (aceHeader-&gt;AceType == ACCESS_ALLOWED_ACE_TYPE) <br>        { <br>            accessAllowedAce = (ACCESS_ALLOWED_ACE *) ace; <br> <br>            if (EqualSid (principalSID, (PSID) &amp;accessAllowedAce-&gt;SidStart)) <br>            { <br>                DeleteAce (Acl, i); <br>                free (principalSID); <br>                return ERROR_SUCCESS; <br>            } <br>        } else <br> <br>        if (aceHeader-&gt;AceType == ACCESS_DENIED_ACE_TYPE) <br>        { <br>            accessDeniedAce = (ACCESS_DENIED_ACE *) ace; <br> <br>            if (EqualSid (principalSID, (PSID) &amp;accessDeniedAce-&gt;SidStart)) <br>            { <br>                DeleteAce (Acl, i); <br>                free (principalSID); <br>                return ERROR_SUCCESS; <br>            } <br>        } else <br> <br>        if (aceHeader-&gt;AceType == SYSTEM_AUDIT_ACE_TYPE) <br>        { <br>            systemAuditAce = (SYSTEM_AUDIT_ACE *) ace; <br> <br>            if (EqualSid (principalSID, (PSID) &amp;systemAuditAce-&gt;SidStart)) <br>            { <br>                DeleteAce (Acl, i); <br>                free (principalSID); <br>                return ERROR_SUCCESS; <br>            } <br>        } <br>    } <br> <br>    free (principalSID); <br>    return ERROR_SUCCESS; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

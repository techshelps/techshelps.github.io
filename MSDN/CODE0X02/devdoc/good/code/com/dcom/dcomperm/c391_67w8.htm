<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTILS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context398"></a>UTILS.CPP</h2>
<pre><code>/*++ <br> <br>DCOM Permission Configuration Sample <br>Copyright (c) 1996, Microsoft Corporation. All rights reserved. <br> <br>Module Name: <br> <br>    utils.cpp <br> <br>Abstract: <br> <br>    Miscellaneous utility functions <br> <br>Author: <br> <br>    Michael Nelson <br> <br>Environment: <br> <br>    Windows NT <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;conio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include "ntsecapi.h" <br>#include "dcomperm.h" <br> <br>DWORD <br>GetCurrentUserSID ( <br>    PSID *Sid <br>    ) <br>{ <br>    TOKEN_USER  *tokenUser; <br>    HANDLE      tokenHandle; <br>    DWORD       tokenSize; <br>    DWORD       sidLength; <br> <br>    if (OpenProcessToken (GetCurrentProcess(), TOKEN_QUERY, &amp;tokenHandle)) <br>    { <br>        GetTokenInformation (tokenHandle, <br>                             TokenUser, <br>                             tokenUser, <br>                             0, <br>                             &amp;tokenSize); <br> <br>        tokenUser = (TOKEN_USER *) malloc (tokenSize); <br> <br>        if (GetTokenInformation (tokenHandle, <br>                                 TokenUser, <br>                                 tokenUser, <br>                                 tokenSize, <br>                                 &amp;tokenSize)) <br>        { <br>            sidLength = GetLengthSid (tokenUser-&gt;User.Sid); <br>            *Sid = (PSID) malloc (sidLength); <br> <br>            memcpy (*Sid, tokenUser-&gt;User.Sid, sidLength); <br>            CloseHandle (tokenHandle); <br>        } else <br>        { <br>            free (tokenUser); <br>            return GetLastError(); <br>        } <br>    } else <br>    { <br>        free (tokenUser); <br>        return GetLastError(); <br>    } <br> <br>    free (tokenUser); <br>    return ERROR_SUCCESS; <br>} <br> <br>DWORD <br>GetPrincipalSID ( <br>    LPTSTR Principal, <br>    PSID *Sid <br>    ) <br>{ <br>    DWORD        sidSize; <br>    TCHAR        refDomain [256]; <br>    DWORD        refDomainSize; <br>    DWORD        returnValue; <br>    SID_NAME_USE snu; <br> <br>    sidSize = 0; <br>    refDomainSize = 255; <br> <br>    LookupAccountName (NULL, <br>                       Principal, <br>                       *Sid, <br>                       &amp;sidSize, <br>                       refDomain, <br>                       &amp;refDomainSize, <br>                       &amp;snu); <br> <br>    returnValue = GetLastError(); <br>    if (returnValue != ERROR_INSUFFICIENT_BUFFER) <br>        return returnValue; <br> <br>    *Sid = (PSID) malloc (sidSize); <br>    refDomainSize = 255; <br> <br>    if (!LookupAccountName (NULL, <br>                            Principal, <br>                            *Sid, <br>                            &amp;sidSize, <br>                            refDomain, <br>                            &amp;refDomainSize, <br>                            &amp;snu)) <br>    { <br>        return GetLastError(); <br>    } <br> <br>    return ERROR_SUCCESS; <br>} <br> <br>LPTSTR <br>SystemMessage ( <br>    LPTSTR Buffer, <br>    HRESULT hr <br>    ) <br>{ <br>    LPTSTR   message; <br> <br>    FormatMessage (FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>                   FORMAT_MESSAGE_FROM_SYSTEM, <br>                   NULL, <br>                   hr, <br>                   MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), <br>                   (LPTSTR) &amp;message, <br>                   0, <br>                   NULL); <br> <br>    wsprintf (Buffer, TEXT("%s(%lx)\n"), message, hr); <br>     <br>    LocalFree (message); <br>    return Buffer; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context403"></a>UTIL.CPP</h2>
<pre><code>// =========================================================================== <br>// File: U T I L . C P P <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>//  <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br> <br>// %%Includes: --------------------------------------------------------------- <br>#define INC_OLE2 <br>#define STRICT <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "util.h" <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: UtilAllocMem <br>// --------------------------------------------------------------------------- <br>BOOL UtilAllocMem (PVOID *ppv, DWORD cb) <br>{ <br>*ppv = malloc (cb); <br>return (NULL != *ppv); <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: UtilFreeMem <br>// --------------------------------------------------------------------------- <br>void UtilFreeMem (PVOID pv) <br>{ <br>if (NULL != pv) <br>free (pv); <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: GetUserSidFromToken <br>//  Returns the SID of the user identified by the supplied token. <br>// --------------------------------------------------------------------------- <br>BOOL GetUserSidFromToken (HANDLE hToken, PSID *ppSid) <br>{ <br>TOKEN_USER *pUser = NULL; <br>PSID psidUser = NULL; <br>DWORD cbSid; <br>DWORD cbRequired; <br> <br>if (GetTokenInformation (hToken, TokenUser, NULL, 0, &amp;cbRequired)) <br>return(FALSE);// we shouldn't succeed without a buffer... <br> <br>if (ERROR_INSUFFICIENT_BUFFER != GetLastError ()) <br>return(FALSE); <br> <br>if (!UtilAllocMem ((PVOID*)&amp;pUser, cbRequired)) <br>return(FALSE); <br> <br>__try  { <br>if (!GetTokenInformation (hToken, TokenUser, pUser, cbRequired, <br>&amp;cbRequired)) <br>return(FALSE); <br> <br>// Need a buffer with just the SID, so allocate and copy <br>cbSid = GetLengthSid (pUser-&gt;User.Sid); <br>if (!UtilAllocMem ((PVOID*)&amp;psidUser, cbSid)) <br>return(FALSE); <br> <br>if (!CopySid (cbSid, psidUser, pUser-&gt;User.Sid)) <br>return(FALSE); <br> <br>*ppSid = psidUser; <br>psidUser = NULL;// so we don't free the sid <br> <br>return(TRUE); <br>} __finally  { <br>UtilFreeMem (psidUser); <br>UtilFreeMem (pUser); <br>} <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: GetGroupSidFromToken <br>//  Returns the SID for the primary group in the supplied token <br>// --------------------------------------------------------------------------- <br>BOOL GetGroupSidFromToken (HANDLE hToken, PSID *ppSid) <br>{ <br>TOKEN_PRIMARY_GROUP *pGroup = NULL; <br>PSID psidGroup = NULL; <br>DWORD cbSid; <br>DWORD cbRequired; <br> <br>if (GetTokenInformation (hToken, TokenPrimaryGroup, NULL, 0, &amp;cbRequired)) <br>return(FALSE);// something's really screwy <br> <br>if (ERROR_INSUFFICIENT_BUFFER != GetLastError ()) <br>return(FALSE); <br> <br>if (!UtilAllocMem ((PVOID*)&amp;pGroup, cbRequired)) <br>return(FALSE); <br> <br>__try  { <br>if (!GetTokenInformation (hToken, TokenPrimaryGroup, pGroup, <br>cbRequired, &amp;cbRequired)) <br>return(FALSE); <br> <br>// Need a buffer with just the SID, so allocate and copy <br>cbSid = GetLengthSid (pGroup-&gt;PrimaryGroup); <br>if (!UtilAllocMem ((PVOID*)&amp;psidGroup, cbSid)) <br>return(FALSE); <br> <br>if (!CopySid (cbSid, psidGroup, pGroup-&gt;PrimaryGroup)) <br>return(FALSE); <br> <br>*ppSid = psidGroup; <br>psidGroup = NULL;// so we don't free the sid <br> <br>return(TRUE); <br>} __finally  { <br>UtilFreeMem (psidGroup); <br>UtilFreeMem (pGroup); <br>} <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: CreateAppSecurityDescriptor <br>//  Creates a security descriptor that allows the world access and is <br>// owned by the current user.  AccessCheck is used to verify the SD <br>// because an SD can be valid without having everything required by <br>// CoInitializeSecurity. <br>// --------------------------------------------------------------------------- <br>BOOL CreateAppSecurityDescriptor(PSECURITY_DESCRIPTOR *ppsd) <br>{ <br>PSECURITY_DESCRIPTOR psd = NULL; <br>PSID psidUser = NULL, psidGroup = NULL; <br>HANDLE hToken; <br>GENERIC_MAPPING gm =  {1, 2, 4, 8};// dummy GM for AccessCheck <br>DWORD dwDesired = 1;// MUST be a value from GM <br>BOOL fAccess = FALSE; <br>DWORD dwGranted; <br>PRIVILEGE_SET ps; <br>DWORD cbPriv = sizeof (ps); <br> <br>// allocate the security descriptor <br>if (!UtilAllocMem ((PVOID*)&amp;psd, SECURITY_DESCRIPTOR_MIN_LENGTH)) <br>return(FALSE); <br> <br>// we have to impersonate ourselves for the AccessCheck later <br>if (!ImpersonateSelf(SecurityImpersonation)) <br>return(FALSE); <br> <br>__try  { <br> <br>if (!InitializeSecurityDescriptor(psd, SECURITY_DESCRIPTOR_REVISION)) <br>return(FALSE); <br> <br>// give it a NULL DACL -- allow all access <br>if (!SetSecurityDescriptorDacl (psd, TRUE, NULL, FALSE)) <br>return(FALSE); <br> <br>// open the token to get the user and group for the new SD <br>if (!OpenThreadToken (GetCurrentThread(), TOKEN_QUERY, TRUE, &amp;hToken)) <br>return(FALSE); <br> <br>// set the SD owner <br>if (!GetUserSidFromToken(hToken, &amp;psidUser)) <br>return(FALSE); <br>if (!SetSecurityDescriptorOwner(psd, psidUser, FALSE)) <br>return(FALSE); <br> <br>// set the SD group <br>if (!GetGroupSidFromToken(hToken, &amp;psidGroup)) <br>return(FALSE); <br>if (!SetSecurityDescriptorGroup(psd, psidGroup, FALSE)) <br>return(FALSE); <br> <br>// use AccessCheck to verify that we have a good SD <br>// using dummy values since we don't really have anything to check <br>if (!AccessCheck(psd, hToken, dwDesired, &amp;gm, &amp;ps, &amp;cbPriv, <br>&amp;dwGranted, &amp;fAccess)) <br>return(FALSE); <br> <br>*ppsd = psd; <br>psd = NULL;// <br>psidUser = NULL;// don't free these... <br>psidGroup = NULL;// <br> <br>return(TRUE); <br> <br>} __finally  { <br>UtilFreeMem (psd); <br>UtilFreeMem (psidUser); <br>UtilFreeMem (psidGroup); <br>RevertToSelf (); <br>} <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: FreeAppSecurityDescriptor <br>//  Releases resources used by the security descriptor. <br>// --------------------------------------------------------------------------- <br>BOOL FreeAppSecurityDescriptor (PSECURITY_DESCRIPTOR psd) <br>{ <br>PSID psid; <br>BOOL fDefaulted; <br> <br>if (!GetSecurityDescriptorOwner(psd, &amp;psid, &amp;fDefaulted)) <br>return(FALSE); <br>UtilFreeMem (psid); <br> <br>if (!GetSecurityDescriptorGroup(psd, &amp;psid, &amp;fDefaulted)) <br>return(FALSE); <br>UtilFreeMem (psid); <br> <br>UtilFreeMem (psd); <br> <br>return(TRUE); <br>} <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: ErrorMessage <br>// --------------------------------------------------------------------------- <br>void ErrorMessage(HWND hwnd, LPCTSTR szFunction, HRESULT hr) <br>{ <br>LPTSTR   szMessage; <br> <br>if (HRESULT_FACILITY(hr) == FACILITY_WINDOWS) <br>hr = HRESULT_CODE(hr); <br> <br>if (!FormatMessage( <br>FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, <br>NULL, hr, <br>MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), //The user default <br>(LPTSTR)&amp;szMessage, 0, NULL)) <br>return; <br> <br>if (hwnd == NULL) <br>{ <br>OutputDebugString(szFunction); <br>OutputDebugString(TEXT(": ")); <br>OutputDebugString(szMessage); <br>OutputDebugString(TEXT("\n")); <br>} <br>else <br>MessageBox(hwnd, szMessage, szFunction, MB_OK); <br> <br>LocalFree(szMessage); <br>}  // ErrorMessage <br> <br>// EOF ======================================================================= </code></pre>
<p>&nbsp;</p></body>
</HTML>

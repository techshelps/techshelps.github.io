<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIENT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context402"></a>CLIENT.CPP</h2>
<pre><code>// =========================================================================== <br>// File: C L I E N T . C P P <br>//  <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>//  This is the client-portion of the OLE impersonation sample. This <br>// application uses the CLSID_CObject class implemented by the OLEIMP.CPP <br>// module. Pass the machine-name to instantiate the object on, or pass no <br>// arguments to instantiate the object on the same machine. See the README.TXT <br>// file for further details. <br>//  <br>// This sample may be compiled as either UNICODE or ANSI. <br>//  <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br> <br>// %%Includes: --------------------------------------------------------------- <br>#define INC_OLE2 <br>#include &lt;stdio.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;initguid.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;conio.h&gt; <br> <br>// %%GUIDs: ------------------------------------------------------------------ <br>DEFINE_GUID(CLSID_CObject, 0x35b79d1, 0xd6d3, 0x11cf, 0xb9, 0xd4, 0x0, 0xaa, 0x0, 0xa2, 0x16, 0xe0); <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: Message <br>//  <br>//  Formats and displays a message to the console. <br>// --------------------------------------------------------------------------- <br> void <br>Message(LPTSTR szPrefix, HRESULT hr) <br>{ <br>    LPTSTR   szMessage; <br> <br>    if (hr == S_OK) <br>        { <br>        _tprintf(szPrefix); <br>        _tprintf(TEXT("\n")); <br>        return; <br>        } <br>  <br>    if (HRESULT_FACILITY(hr) == FACILITY_WINDOWS) <br>        hr = HRESULT_CODE(hr); <br>  <br>    FormatMessage( <br>        FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>        FORMAT_MESSAGE_FROM_SYSTEM, <br>        NULL, <br>        hr, <br>        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), //The user default language <br>        (LPTSTR)&amp;szMessage, <br>        0, <br>        NULL ); <br> <br>    _tprintf (TEXT("%s: %s(%lx)\n"), szPrefix, szMessage, hr); <br>     <br>    LocalFree(szMessage); <br>}  // Message <br> <br>// --------------------------------------------------------------------------- <br>// %%Function: main <br>// --------------------------------------------------------------------------- <br> void __cdecl <br>main(int argc, CHAR **argv) <br>{ <br>    HRESULT hr; <br>    COSERVERINFO csi, *pcsi=NULL; <br>    WCHAR wsz [MAX_PATH]; <br>LPCLASSFACTORY pcf = NULL; <br> <br>    // initialize COM for free-threaded use <br>    hr = CoInitializeEx(NULL, COINIT_MULTITHREADED); <br>    if (FAILED(hr)) <br>        { <br>        Message(TEXT("Client: CoInitializeEx"), hr); <br>        exit(hr); <br>        } <br> <br>// initialize the security layer <br>hr = CoInitializeSecurity ( <br>NULL, <br>-1, <br>NULL, <br>NULL, <br>RPC_C_AUTHN_LEVEL_CONNECT, <br>RPC_C_IMP_LEVEL_IMPERSONATE, <br>NULL, <br>0, <br>NULL); <br>if (FAILED(hr)) <br>{ <br>Message(TEXT("Client: CoInitializeSecurity"), hr); <br>exit(hr); <br>} <br> <br>    // allow a machine-name as the command-line argument <br>    if (argc &gt; 1) <br>        { <br>        MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, argv[1], -1, <br>            wsz, MAX_PATH); <br>memset (&amp;csi, 0, sizeof (csi)); <br>        csi.pwszName = wsz; <br>        pcsi = &amp;csi; <br>        }  <br> <br>// get the class factory for CObject on the argv[1] machine <br>hr = CoGetClassObject (CLSID_CObject, CLSCTX_SERVER, pcsi, <br>IID_IClassFactory, (LPVOID*)&amp;pcf); <br>if (FAILED(hr)) <br>Message(TEXT("Client: CoGetClassObject"), hr); <br>else <br>{ <br>        LPUNKNOWN   punk = NULL; <br> <br>    // create a remote instance of the object <br>    Message(TEXT("Client: Creating Instance..."), S_OK); <br>    hr = pcf-&gt;CreateInstance(NULL, IID_IUnknown, (LPVOID*)&amp;punk); <br>    if (FAILED(hr)) <br>        Message(TEXT("Client: CoCreateInstanceEx"), hr); <br>    else <br>        { <br>// wait until the user wants us to release the object <br>Message(TEXT("Client: Press any key to release object..."), S_OK); <br>getch(); <br> <br>        // let go of the object <br>        punk-&gt;Release(); <br>        } <br>pcf-&gt;Release(); <br>} <br>    CoUninitialize(); <br>    Message(TEXT("Client: Done"), S_OK); <br>}  // main <br> <br>// EOF ======================================================================= <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

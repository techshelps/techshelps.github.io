<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context400"></a>README.TXT</h2>
<pre><code>DCOM Impersonation <br> <br>SUMMARY <br>======= <br> <br>The OLEIMP sample demonstrates a method for emulating auto impersonation <br>of clients. Normally, objects created on the server will run in the <br>context of the server.  An object method must explicitly impersonate the <br>client if the method is to run in the context of the client.  This <br>sample demonstrates a way to arrange for methods to "automatically" run <br>in the context of the client. <br> <br>MORE INFORMATION <br>================ <br> <br>This program is based on the oleapt sample.  It uses a set of apartment <br>threads that each potentially impersonate a client. All objects created <br>for a user run in the same apartment. <br> <br>The server registers a class-factory on the main application thread and <br>also spawns several worker threads. When requests arrive from clients <br>to create instances of the class, the server class-factory picks a <br>worker thread for the object in the following manner: <br> <br>  - If there is a thread currently impersonating that user, use that <br>    thread. <br>  - Otherwise, if there is a free thread, set that thread up to <br>    impersonate the client and use that thread. <br>  - Otherwise fail the CreateInstance call. <br> <br>The server and then goes through the process of having the object <br>created within the thread and properly marshalled from the worker thread <br>back to the class factory where it can be returned to the caller. Note <br>that this marshalling to the main thread is fairly transient, it lasts <br>for creation only: subsequent calls from the client to the object go <br>straight from the client's process into the worker apartment. <br> <br>This sample may be compiled as either UNICODE or ANSI. <br> <br>Instructions: <br> <br> To use this sample: <br>  * build it using the NMAKE command. NMAKE will create OLEIMP.EXE and <br>    CLIENT.EXE. <br>  * install the OLEIMP.EXE on the current machine or on a remote <br>    machine according to the installation instructions found in <br>    OLEIMP.CPP. <br>  * run CLIENT.EXE. use no command-line arguments to instantiate the <br>    object on the current machine. use a single command-line argument of <br>    the remote machine-name (UNC or DNS) to instantiate the object on a <br>    remote machine. <br>  * CLIENT.EXE displays some simple information about the calls it is <br>    making on the object. <br>  * OLEIMP.EXE displays information about the worker threads. </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACCOUNT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1198"></a>ACCOUNT.CPP</h2>
<pre><code>// Filename: Account.cpp <br>// <br>// Description: Implementation of DLL Exports. <br>// <br>// This file is provided as part of the Microsoft Transaction Server Samples <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>// WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>// OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>// PURPOSE. <br>// <br>// Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>// <br>// <br>// You will need the NT SUR Beta 2 SDK or VC 4.2 in order to build this  <br>// project.  This is because you will need MIDL 3.00.15 or higher and new <br>// headers and libs.  If you have VC 4.2 installed, then everything should <br>// already be configured correctly. <br> <br>// Note: Proxy/Stub Information <br>//To merge the proxy/stub code into the object DLL, add the file  <br>//dlldatax.c to the project.  Make sure precompiled headers  <br>//are turned off for this file, and add _MERGE_PROXYSTUB to the  <br>//defines for the project.   <br>// <br>//Modify the custom build rule for Account.idl by adding the following  <br>//files to the Outputs.  You can select all of the .IDL files by  <br>//expanding each project and holding Ctrl while clicking on each of them. <br>//Account_p.c <br>//dlldata.c <br>//To build a separate proxy/stub DLL, <br>//run nmake -f Accountps.mak in the project directory. <br> <br>#include "stdafx.h" <br>#include "resource.h" <br>#include "initguid.h" <br>#include "Account.h" <br>#include "CAccount.h" <br>#include "MoveMoney.h" <br>// <br>// to merge proxy/stub, uncomment this line <br>// #include "dlldatax.h" <br>// <br>#define IID_DEFINED <br>#include "Account_i.c" <br>#include "GetReceipt.h" <br>#include "UpdateReceipt.h" <br> <br>#ifdef _MERGE_PROXYSTUB <br>extern "C" HINSTANCE hProxyDll; <br>#endif <br> <br>CComModule _Module; <br> <br>BEGIN_OBJECT_MAP(ObjectMap) <br>OBJECT_ENTRY(CLSID_CUpdateReceipt, CUpdateReceipt) <br>OBJECT_ENTRY(CLSID_CGetReceipt, CGetReceipt) <br>OBJECT_ENTRY(CLSID_CAccount, CAccount) <br>OBJECT_ENTRY(CLSID_CMoveMoney, CMoveMoney) <br>END_OBJECT_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DLL Entry Point <br> <br>extern "C" <br>BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved) <br>{ <br>lpReserved; <br>#ifdef _MERGE_PROXYSTUB <br>if (!PrxDllMain(hInstance, dwReason, lpReserved)) <br>return FALSE; <br>#endif <br>if (dwReason == DLL_PROCESS_ATTACH) <br>{ <br>_Module.Init(ObjectMap, hInstance); <br>DisableThreadLibraryCalls(hInstance); <br>} <br>else if (dwReason == DLL_PROCESS_DETACH) <br>_Module.Term(); <br>return TRUE;    // ok <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Used to determine whether the DLL can be unloaded by OLE <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>#ifdef _MERGE_PROXYSTUB <br>if (PrxDllCanUnloadNow() != S_OK) <br>return S_FALSE; <br>#endif <br>return (_Module.GetLockCount()==0) ? S_OK : S_FALSE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Returns a class factory to create an object of the requested type <br> <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv) <br>{ <br>#ifdef _MERGE_PROXYSTUB <br>if (PrxDllGetClassObject(rclsid, riid, ppv) == S_OK) <br>return S_OK; <br>#endif <br>return _Module.GetClassObject(rclsid, riid, ppv); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllRegisterServer - Adds entries to the system registry <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>#ifdef _MERGE_PROXYSTUB <br>HRESULT hRes = PrxDllRegisterServer(); <br>if (FAILED(hRes)) <br>return hRes; <br>#endif <br>// registers object, typelib and all interfaces in typelib <br>return _Module.RegisterServer(TRUE); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllUnregisterServer - Removes entries from the system registry <br> <br>STDAPI DllUnregisterServer(void) <br>{ <br>#ifdef _MERGE_PROXYSTUB <br>PrxDllUnregisterServer(); <br>#endif <br>_Module.UnregisterServer(); <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UPDATERECEIPT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1209"></a>UPDATERECEIPT.CPP</h2>
<pre><code>// Filename: UpdateReceipt.cpp <br>// <br>// Description: Implementation of CUpdateReceipt <br>// <br>// This file is provided as part of the Microsoft Transaction Server Samples <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>// WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>// OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>// PURPOSE. <br>// <br>// Copyright (C) 1997 Microsoft Corporation, All rights reserved <br> <br>#include "stdafx.h" <br>#include "Account.h" <br>#include "UpdateReceipt.h" <br> <br>#include &lt;mtx.h&gt; <br>#include &lt;adoid.h&gt; <br>#include &lt;adoint.h&gt; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CUpdateReceipt::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IUpdateReceipt, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br>//Update: update the database next receipt number when 100 receipts have been issued by GetReceipt <br>// <br>//returns: S_OK or E_FAIL <br> <br>STDMETHODIMP CUpdateReceipt::Update (OUT long* plReceiptNo) { <br> <br>HRESULT hr = S_OK; <br> <br>IObjectContext* pObjectContext = NULL; <br> <br>ADOConnection* adoCoConnection = NULL; <br>ADORecordset* adoRsReceipt = NULL; <br>ADOFields* pFields = NULL; <br>ADOField* pField = NULL; <br> <br>long lErrFlag = 0; <br>TCHAR* pErrMsg = NULL; <br> <br>*plReceiptNo = 0; <br> <br>try { <br> <br>// First of all, get the object context <br>THROW_ERR ( GetObjectContext(&amp;pObjectContext), "GetObjectContext" ); <br> <br>// Create ADOConnection object and initialize the connection <br>THROW_ERR ( CoCreateInstance (CLSID_CADOConnection, NULL, CLSCTX_INPROC_SERVER, <br>IID_IADOConnection, (LPVOID *) &amp;adoCoConnection), "CoCreateInstance(CLSID_CADOConnection)" ); <br> <br>BSTR bstrDSN = ::SysAllocString (L"FILEDSN=MTSSamples"); <br>hr = adoCoConnection-&gt;Open(bstrDSN, NULL, NULL, adCmdUnspecified); <br>::SysFreeString (bstrDSN); <br>RETHROW_ERR ( hr ); <br> <br>// Update the next receipt record <br>CComVariant vAdoNull; <br>TCHAR szBuffer [512]; <br>wsprintf (szBuffer, _T("Update Receipt set NextReceipt = NextReceipt + 100")); <br>BSTR bstrSQL = TCHAR2BSTR (szBuffer); <br>hr = adoCoConnection-&gt;Execute(bstrSQL, &amp;vAdoNull, -1, NULL); <br>::SysFreeString (bstrSQL); <br>RETHROW_ERR ( hr ); <br> <br>// Obtain the desired recordset with an SQL query <br>bstrSQL = ::SysAllocString (L"SELECT NextReceipt FROM Receipt"); <br>hr = adoCoConnection-&gt;Execute (bstrSQL, &amp;vAdoNull, -1, &amp;adoRsReceipt); <br>::SysFreeString (bstrSQL); <br>RETHROW_ERR ( hr ); <br> <br>// Get the appropriate fields <br>RETHROW_ERR( adoRsReceipt-&gt;get_Fields(&amp;pFields) ); <br> <br>// Get the appropriate field <br>CComVariant vField = L"NextReceipt"; <br>RETHROW_ERR ( pFields-&gt;get_Item (vField, &amp;pField) ); <br>CComVariant vNextReceipt; <br>RETHROW_ERR ( pField-&gt;get_Value (&amp;vNextReceipt) ); <br> <br> <br>// Cleanup resources <br>if (pField) pField-&gt;Release(); <br>if (pFields) pFields-&gt;Release(); <br>if (adoRsReceipt) adoRsReceipt-&gt;Release(); <br>if (adoCoConnection) adoCoConnection-&gt;Release(); <br> <br>// We are finished and happy <br>pObjectContext-&gt;SetComplete(); <br> <br>// Prepare return value <br>*plReceiptNo = vNextReceipt.lVal; <br>hr = S_OK; <br> <br>} catch (HRESULT hr) { <br> <br>// <br>//ErrorInfo is saved here because the following ADO cleanup code  <br>//may clear it. <br>// <br>IErrorInfo * pErrorInfo = NULL; <br>GetErrorInfo(NULL, &amp;pErrorInfo); <br> <br>if (pField)pField-&gt;Release(); <br>if (pFields) pFields-&gt;Release(); <br>if (adoRsReceipt) adoRsReceipt-&gt;Release(); <br>if (adoCoConnection) adoCoConnection-&gt;Release(); <br> <br>// Fill in error information <br>switch (lErrFlag) { <br> <br>// Unknown error occurred in this object <br>case (0): <br>TCHAR szErr [512]; <br>wsprintf (szErr, _T("Error 0x%x from CUpdateReceipt calling %s."), hr, pErrMsg); <br>pErrMsg = szErr; <br>// Fall through <br> <br>// An application error occurred in this object <br>case (1): <br>// <br>//we are going to put our own error in TLS, so if there is one there, clear it <br>// <br>if (pErrorInfo) <br>pErrorInfo -&gt; Release(); <br> <br>AtlReportError( CLSID_CUpdateReceipt, pErrMsg, IID_IUpdateReceipt, hr); <br>break; <br> <br>case (2): // An error occurred in a called object <br>// <br>//put the error back in TLS <br>// <br>SetErrorInfo(NULL, pErrorInfo); <br>break; <br> <br>// Will never reach here <br>default: <br>break; <br>} <br> <br>// Indicate our unhappiness <br>if (pObjectContext) <br>pObjectContext-&gt;SetAbort(); <br>} <br> <br>// Resource cleanup <br>if (pObjectContext)pObjectContext-&gt;Release(); <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

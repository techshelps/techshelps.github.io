<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CACCOUNT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1200"></a>CACCOUNT.CPP</h2>
<pre><code>// Filename: CAccount.cpp <br>// <br>// Description: Implementation of CAccount <br>// <br>// This file is provided as part of the Microsoft Transaction Server <br>// Software Development Kit <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>// WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>// OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>// PURPOSE. <br>// <br>// Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>#include "stdafx.h" <br>#include "Account.h" <br>#include "CAccount.h" <br>#include &lt;stdio.h&gt; <br> <br>#include &lt;mtx.h&gt; <br> <br>#include &lt;adoid.h&gt; <br>#include &lt;adoint.h&gt; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CAccount::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IAccount, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br>//Post: modifies the specified account by the specified amount <br>// <br>//pbstrResult: a BSTR giving information.  NOTE: this is set to NULL when an error occurs <br>// <br>//returns:  S_OK or E_FAIL <br> <br>STDMETHODIMP CAccount::Post (IN long lAccount, IN long lAmount, OUT BSTR* pbstrResult) { <br> <br>HRESULT hr = S_OK; <br> <br>IObjectContext* pObjectContext = NULL; <br> <br>ADOConnection* adoCoConnection = NULL; <br>ADORecordset* adoRsBalance = NULL; <br>ADOFields* pFields = NULL; <br>ADOField* pField = NULL; <br> <br>*pbstrResult = NULL; <br> <br>long lErrFlag = 0; <br>TCHAR* pErrMsg = NULL; <br> <br>try { <br> <br>// Get our object context <br>THROW_ERR (GetObjectContext(&amp;pObjectContext), "GetObjectContext" ); <br> <br>// Check security for large transfers <br>if (lAmount &gt; 500 || lAmount &lt; -500) { <br>BOOL bInRole; <br>BSTR bstrRole; <br> <br>bstrRole = ::SysAllocString(L"Managers"); <br>hr = pObjectContext-&gt;IsCallerInRole (bstrRole, &amp;bInRole); <br>::SysFreeString(bstrRole); <br> <br>if (!SUCCEEDED ( hr )) { <br>THROW_STR ( _T("IsCallerInRole() call failed!  Please add the 'Managers' Roll to the package.")); <br>} <br> <br>if (!bInRole) { <br>THROW_STR ( _T("Need 'Managers' role for amounts over $500") ); <br>} <br>} <br> <br>// Create ADOConnection object and initialize the connection <br>THROW_ERR ( CoCreateInstance (CLSID_CADOConnection, NULL, CLSCTX_INPROC_SERVER, IID_IADOConnection, <br>(LPVOID *) &amp;adoCoConnection), "CoCreateInstance(CADOConnection)" ); <br> <br>BSTR bstrDSN = ::SysAllocString (L"FILEDSN=MTSSamples"); <br>hr = adoCoConnection-&gt;Open (bstrDSN, NULL, NULL, adCmdUnspecified); <br>::SysFreeString (bstrDSN); <br>RETHROW_ERR(hr); <br> <br>// Update the account balance and <br>// then check to see if account would be overdrawn <br>TCHAR szBuffer [512]; <br>wsprintf (szBuffer, _T("UPDATE Account SET Balance = Balance + %li WHERE AccountNo = %li"), <br>lAmount, lAccount); <br>BSTR bstrSQL = TCHAR2BSTR (szBuffer); <br>CComVariant vRecordCount; <br>vRecordCount.Clear(); <br>hr = adoCoConnection-&gt;Execute(bstrSQL, &amp;vRecordCount, -1, NULL); <br>::SysFreeString (bstrSQL); <br>RETHROW_ERR(hr); <br> <br>// If no records got updated, the account doesn't exist <br>if (vRecordCount.lVal == 0) { <br>TCHAR szBuffer1 [512]; <br>wsprintf (szBuffer1, _T("Error. Account %ld not on file."), lAccount); <br>THROW_STR ( szBuffer1 ); <br>} <br> <br>wsprintf (szBuffer, _T("SELECT Balance FROM Account WHERE AccountNo = %ld"), lAccount); <br>bstrSQL = TCHAR2BSTR (szBuffer); <br>hr = adoCoConnection-&gt;Execute (bstrSQL, &amp;vRecordCount, -1, &amp;adoRsBalance); <br>::SysFreeString (bstrSQL); <br>RETHROW_ERR(hr); <br>// Get the appropriate fields <br>hr =  adoRsBalance-&gt;get_Fields(&amp;pFields); <br>RETHROW_ERR(hr); <br> <br>// Get the appropriate field <br>CComVariant vField = L"Balance"; <br>CComVariant vBalance; <br>hr = pFields-&gt;get_Item (vField, &amp;pField) ; <br>RETHROW_ERR(hr); <br>hr = pField-&gt;get_Value (&amp;vBalance) ; <br>RETHROW_ERR(hr); <br> <br>// Check for overdraw, then prepare return string <br>if (vBalance.lVal &lt; 0) { <br> <br>TCHAR szBuffer2 [512]; <br>wsprintf (szBuffer2, _T("Error. Account %ld would be overdrawn by %ld.  Balance is still %ld"), <br>lAccount, vBalance.lVal, vBalance.lVal - lAmount); <br>THROW_STR ( szBuffer2 ); <br>} <br> <br>TCHAR szBuffer3 [512]; <br>wsprintf (szBuffer3, _T("%s account %ld, balance is $%ld. (VC++)"), <br>((lAmount &gt;= 0) ? _T("Credit to") : _T("Debit from")), lAccount, vBalance.lVal); <br>*pbstrResult = TCHAR2BSTR (szBuffer3); <br> <br>// Resource cleanup <br>if (pField) pField-&gt;Release(); <br>if (pFields) pFields-&gt;Release(); <br>if (adoRsBalance) adoRsBalance-&gt;Release(); <br>if (adoCoConnection) adoCoConnection-&gt;Release(); <br> <br>// We are finished and happy <br>pObjectContext-&gt;SetComplete(); <br> <br> <br>} catch (HRESULT hr) { <br> <br>// <br>//ErrorInfo is saved here because the following ADO cleanup code  <br>//may clear it. <br>// <br>IErrorInfo * pErrorInfo = NULL; <br>GetErrorInfo(NULL, &amp;pErrorInfo); <br> <br>if (pField)pField-&gt;Release(); <br>if (pFields) pFields-&gt;Release(); <br>if (adoRsBalance) adoRsBalance-&gt;Release(); <br>if (adoCoConnection) adoCoConnection-&gt;Release(); <br> <br>// Fill in error information <br>switch (lErrFlag) { <br> <br>// Unknown error occurred in this object <br>case (0): <br>TCHAR szErr [512]; <br>wsprintf (szErr, _T("Error 0x%x from CAccount calling %s."), hr, pErrMsg); <br>pErrMsg = szErr; <br>// Fall through <br> <br>// An application error occurred in this object <br>case (1): <br>// <br>//we are going to put our own error in TLS, so if there is one there, clear it <br>// <br>if (pErrorInfo) <br>pErrorInfo -&gt; Release(); <br> <br>AtlReportError( CLSID_CAccount, pErrMsg, IID_IAccount, hr); <br>break; <br>case (2): // ADO error <br>{ <br>// <br>//put the error back in TLS <br>// <br>SetErrorInfo(NULL, pErrorInfo); <br> <br>} <br>break; <br>// Will never reach here <br>default: <br>break; <br>} <br> <br>// Indicate our unhappiness <br>if (pObjectContext) <br>pObjectContext-&gt;SetAbort(); <br> <br>} <br> <br>if (pObjectContext)pObjectContext-&gt;Release(); <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

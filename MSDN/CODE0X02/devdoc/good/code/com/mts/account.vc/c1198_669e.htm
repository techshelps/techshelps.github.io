<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETRECEIPT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1202"></a>GETRECEIPT.CPP</h2>
<pre><code>// Filename: GetReceipt.cpp <br>// <br>// Description: Implementation of CGetReceipt <br>// <br>// This file is provided as part of the Microsoft Transaction Server Samples <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>// WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>// OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>// PURPOSE. <br>// <br>// Copyright (C) 1997 Microsoft Corporation, All rights reserved <br> <br>#include "stdafx.h" <br>#include "Account.h" <br>#include "GetReceipt.h" <br>#include "UpdateReceipt.h" <br> <br>#include &lt;mtx.h&gt; <br>#include &lt;mtxspm.h&gt; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CGetReceipt::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IGetReceipt, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br>//GetNextReceipt: return the next receipt number <br>// <br>//returns: S_OK or E_FAIL <br> <br>STDMETHODIMP CGetReceipt::GetNextReceipt (OUT long* plReceiptNo) { <br> <br>HRESULT hr = S_OK; <br> <br>IObjectContext* pObjectContext = NULL; <br> <br>ISharedPropertyGroupManager* spmMgr = NULL; <br>ISharedPropertyGroup* spmGroup = NULL; <br>ISharedProperty* spmPropNextReceipt = NULL; <br>ISharedProperty* spmPropMaxNum = NULL; <br> <br>IUpdateReceipt* pObjUpdateReceipt = NULL; <br> <br>CComVariant vNextReceipt; <br> <br>long lErrFlag = 0; <br>TCHAR* pErrMsg = NULL; <br> <br> <br>try { <br> <br>// First of all, get the object context <br>THROW_ERR ( GetObjectContext(&amp;pObjectContext), "GetObjectContext" ); <br> <br>// Create the SharedPropertyGroupManager <br>THROW_ERR ( pObjectContext-&gt;CreateInstance (CLSID_SharedPropertyGroupManager,  <br>IID_ISharedPropertyGroupManager, (void**)&amp;spmMgr), "CreateInstance(CLSID_SharedPropertyGroupManager)" ); <br> <br>// Create the SharedPropertyGroup <br>LONG lIsolationMode = LockMethod; <br>LONG lReleaseMode = Process; <br>VARIANT_BOOL bExists = VARIANT_FALSE; <br>THROW_ERR ( spmMgr-&gt;CreatePropertyGroup (L"Receipt", &amp;lIsolationMode, &amp;lReleaseMode, &amp;bExists, &amp;spmGroup), <br>"CreatePropertyGroup" ); <br> <br>// Create the two shared properties <br>THROW_ERR ( spmGroup-&gt;CreateProperty (L"Next", &amp;bExists, &amp;spmPropNextReceipt), "CreateProperty(Next)" ); <br>THROW_ERR ( spmGroup-&gt;CreateProperty (L"MaxNum", &amp;bExists, &amp;spmPropMaxNum), "CreateProperty(MaxNum)" ); <br> <br>// Obtain their current values <br>CComVariant vMaxNum; <br>THROW_ERR ( spmPropNextReceipt-&gt;get_Value (&amp;vNextReceipt), "spmPropNextReceipt-&gt;get_Value" ); <br>THROW_ERR ( spmPropMaxNum-&gt;get_Value (&amp;vMaxNum), "spmPropMaxNum-&gt;get_Value" ); <br> <br>// Does MaxNum require an update? <br>if (vNextReceipt.lVal &gt;= vMaxNum.lVal) { <br> <br>// Create an UpdateReceipt object <br>THROW_ERR( pObjectContext-&gt;CreateInstance (CLSID_CUpdateReceipt, IID_IUpdateReceipt, <br>(void**)&amp;pObjUpdateReceipt), "CreateInstance(CLSID_CUpdateReceipt)" ); <br> <br>// Update NextReceipt <br>RETHROW_ERR ( pObjUpdateReceipt-&gt;Update (&amp;vNextReceipt.lVal) ); <br> <br>// Update NextReceipt shared property <br>THROW_ERR ( spmPropNextReceipt-&gt;put_Value (vNextReceipt), "spmPropNextReceipt-&gt;put_Value" ); <br> <br>// Update MaxNum shared property <br>vMaxNum.lVal = vNextReceipt.lVal + 100; <br>THROW_ERR ( spmPropMaxNum-&gt;put_Value (vMaxNum), "spmPropMaxNum-&gt;put_Value" ); <br>} <br> <br>// Increment NextReceipt shared property <br>vNextReceipt.lVal ++; <br>THROW_ERR ( spmPropNextReceipt-&gt;put_Value (vNextReceipt), "spmPropNextReceipt-&gt;put_Value" ); <br>*plReceiptNo = vNextReceipt.lVal; <br>hr = S_OK; <br> <br>// We're finished and happy <br>pObjectContext-&gt;SetComplete(); <br> <br>} catch (HRESULT hr) { <br> <br>// <br>//ErrorInfo is saved here because the following ADO cleanup code  <br>//may clear it. <br>// <br>IErrorInfo * pErrorInfo = NULL; <br>GetErrorInfo(NULL, &amp;pErrorInfo); <br> <br>// Fill in error information <br>switch (lErrFlag) { <br> <br>// Unknown error occurred in this object <br>case (0): <br>TCHAR szErr [512]; <br>wsprintf (szErr, _T("Error 0x%x from CGetReceipt calling %s."), hr, pErrMsg); <br>pErrMsg = szErr; <br>// Fall through <br> <br>// An application error occurred in this object <br>case (1): <br>// <br>//we are going to put our own error in TLS, so if there is one there, clear it <br>// <br>if (pErrorInfo) <br>pErrorInfo -&gt; Release(); <br> <br>AtlReportError( CLSID_CGetReceipt, pErrMsg, IID_IGetReceipt, hr); <br>break; <br> <br>case (2):// An error occurred in a called object <br>// <br>//put the error back in TLS <br>// <br>SetErrorInfo(NULL, pErrorInfo); <br>break; <br> <br>// Will never reach here <br>default: <br>break; <br>} <br> <br>// Indicate our unhappiness <br>if (pObjectContext) <br>pObjectContext-&gt;SetAbort(); <br>} <br> <br>// Resource cleanup <br>if (pObjectContext) <br>pObjectContext-&gt;Release(); <br> <br>if (spmMgr) <br>spmMgr-&gt;Release(); <br> <br>if (spmGroup) <br>spmGroup-&gt;Release(); <br> <br>if (spmPropNextReceipt) <br>spmPropNextReceipt-&gt;Release(); <br> <br>if (spmPropMaxNum) <br>spmPropMaxNum-&gt;Release(); <br> <br>if (pObjUpdateReceipt) <br>pObjUpdateReceipt-&gt;Release(); <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

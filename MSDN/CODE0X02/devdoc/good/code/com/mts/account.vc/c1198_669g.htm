<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOVEMONEY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1204"></a>MOVEMONEY.CPP</h2>
<pre><code>// Filename: MoveMoney.cpp <br>// <br>// Description: Implementation of CMoveMoney <br>// <br>// This file is provided as part of the Microsoft Transaction Server <br>// Software Development Kit <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>// WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>// OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>// PURPOSE. <br>// <br>// Copyright (C) 1997 Microsoft Corporation, All rights reserved <br> <br>#include "stdafx.h" <br>#include "Account.h" <br>#include "MoveMoney.h" <br>#include "Account.h" <br>#include "GetReceipt.h" <br> <br>#include &lt;mtx.h&gt; <br>#include &lt;comdef.h&gt; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br> <br>STDMETHODIMP CMoveMoney::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_IMoveMoney, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br>//Perform: modifies the specified account by the specified amount <br>// <br>//pvResult: a BSTR giving information.  NOTE: this is set to NULL when an error occurs <br>// <br>//returns:  S_OK or E_FAIL <br> <br>STDMETHODIMP CMoveMoney::Perform (IN long lPrimeAccount, IN long lSecondAccount, IN long lAmount,  <br>  IN long lTranType, OUT BSTR* pbstrResult) { <br>USES_CONVERSION; <br> <br>HRESULT hr = S_OK; <br> <br>IObjectContext* pObjectContext = NULL; <br> <br>IAccount* pObjAccount = NULL; <br>IGetReceipt* pObjGetReceipt = NULL; <br> <br>long lErrFlag = 0; <br>TCHAR* pErrMsg = NULL; <br> <br>BSTR bstrResult2 = NULL; <br>BSTR bstrCall1 = NULL; <br>BSTR bstrCall2 = NULL; <br> <br>*pbstrResult = NULL; <br> <br>try { <br> <br>// Get the object context <br>THROW_ERR ( GetObjectContext (&amp;pObjectContext), "GetObjectContext" ); <br> <br>// Check security for large transfers <br>if (lAmount &gt; 500 || lAmount &lt; -500) { <br> <br>BOOL bInRole; <br>BSTR bstrRole = ::SysAllocString (L"Managers"); <br>hr = pObjectContext-&gt;IsCallerInRole (bstrRole, &amp;bInRole); <br>::SysFreeString(bstrRole); <br> <br>if (!SUCCEEDED ( hr )) { <br> <br>THROW_STR ( _T("IsCallerInRole() call failed!  Please add the 'Managers' Roll to the package.")); <br>} <br> <br>if (!bInRole) { <br>THROW_STR ( _T("Need 'Managers' role for amounts over $500") ); <br>} <br>} <br> <br>// Create the account object using our context <br>THROW_ERR ( pObjectContext-&gt;CreateInstance(CLSID_CAccount, IID_IAccount, (void**)&amp;pObjAccount), <br>"CreateInstance(CLSID_CAccount)" ); <br> <br>// Call the post function based on the transaction type <br>switch ( lTranType ) <br>{ <br>case (1):// debit <br>RETHROW_ERR ( pObjAccount-&gt;Post (lPrimeAccount, 0 - lAmount, &amp;bstrResult2) ); <br>break; <br> <br>case (2):// credit <br>RETHROW_ERR ( pObjAccount-&gt;Post (lPrimeAccount, lAmount, &amp;bstrResult2) ); <br>break; <br> <br>case (3):// transfer <br>// Do the credit <br>RETHROW_ERR ( pObjAccount-&gt;Post (lSecondAccount, lAmount, &amp;bstrCall1) ); <br> <br>// Then do the debit <br>RETHROW_ERR ( pObjAccount-&gt;Post (lPrimeAccount, 0 - lAmount, &amp;bstrCall2) ); <br> <br>// Prepare return string <br>TCHAR szBuf [512]; <br>_tcscpy (szBuf, W2T( bstrCall1 )); <br>_tcscat (szBuf, _T("; ")); <br>_tcscat (szBuf, W2T( bstrCall2 )); <br>bstrResult2 = TCHAR2BSTR (szBuf); <br>break; <br> <br>default: <br>THROW_STR ( _T("Invalid Transaction Type") ); <br>} <br> <br>// Get Receipt Number for the transaction <br>THROW_ERR ( pObjectContext-&gt;CreateInstance (CLSID_CGetReceipt, IID_IGetReceipt, (void**)&amp;pObjGetReceipt), <br>"CreateInstance(CLSID_CGetReceipt)" ); <br>long lngReceiptNo; <br>RETHROW_ERR ( pObjGetReceipt-&gt;GetNextReceipt(&amp;lngReceiptNo) ); <br> <br>// Tag receipt information onto return string <br> <br>TCHAR szBuffer [512]; <br>wsprintf (szBuffer, _T("; Receipt No:  %li"), lngReceiptNo); <br>BSTR bstrTemp = TCHAR2BSTR (szBuffer); <br> <br>TCHAR szBuffer2 [512]; <br>_tcscpy (szBuffer2, W2T ( bstrResult2 )); <br>_tcscat (szBuffer2, W2T ( bstrTemp )); <br>::SysFreeString (bstrTemp); <br> <br>*pbstrResult = TCHAR2BSTR (szBuffer2); <br> <br> // We are finished and happy <br>pObjectContext-&gt;SetComplete(); <br>hr = S_OK; <br> <br>} catch (HRESULT hr) { <br> <br>// <br>//store error info locally <br>// <br> <br>IErrorInfo * pErrorInfo = NULL; <br>GetErrorInfo(NULL, &amp;pErrorInfo); <br> <br>// Fill in error information <br>switch (lErrFlag) { <br> <br>// Unknown error occurred in this object <br>case (0): <br>TCHAR szErr [512]; <br>wsprintf (szErr, _T("Error 0x%x from CMoveMoney calling %s."), hr, pErrMsg); <br>pErrMsg = szErr; <br>// Fall through <br> <br>// An application error occurred in this object <br>case (1): <br>// <br>//we are going to put our own error in TLS, so if there is one there, clear it <br>// <br>if (pErrorInfo) <br>pErrorInfo -&gt; Release(); <br> <br>AtlReportError( CLSID_CMoveMoney, pErrMsg, IID_IMoveMoney, hr); <br>break; <br> <br>case (2):// An error occurred in a called object <br>// <br>//put the error back in TLS <br>// <br>SetErrorInfo(NULL, pErrorInfo); <br>break; <br> <br>// Will never reach here <br>default: <br>break; <br>} <br> <br> <br>// Indicate our unhappiness <br>if (pObjectContext) <br>pObjectContext-&gt;SetAbort(); <br>} <br> <br> <br>// Release resources <br>if (pObjAccount) <br>pObjAccount-&gt;Release(); <br> <br>if (pObjectContext) <br>pObjectContext-&gt;Release(); <br> <br>if (pObjGetReceipt) <br>pObjGetReceipt-&gt;Release(); <br> <br>if (bstrResult2) <br>::SysFreeString (bstrResult2); <br> <br>if (bstrCall1) <br>::SysFreeString (bstrCall1); <br> <br>if (bstrCall2) <br>::SysFreeString (bstrCall2); <br> <br>return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

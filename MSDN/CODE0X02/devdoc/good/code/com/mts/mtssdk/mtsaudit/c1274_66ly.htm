<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSQLAUDIT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1276"></a>MTSSQLAUDIT.CPP</h2>
<pre><code>#include "stdafx.h" <br>#include "MtsAudit.h" <br>#ifndef DBNTWIN32 <br>#define DBNTWIN32 <br>#include &lt;SQL.h&gt; <br>#include &lt;SQLEXT.h&gt; <br>#include &lt;ODBCINST.h&gt; <br>#endif /* DBNTWIN32 */ <br>#include &lt;ODBCINST.h&gt; <br>#include "MtsSqlAudit.h" <br> <br>LPTSTR sTables[] = { <br>_T("Authenticate"), <br>_T("MethodEvents"),  <br>_T("ObjectEvents"),  <br>_T("PackageEvents"), <br>_T("ResourceEvents"), <br>_T("ThreadEvents"), <br>_T("TransactionEvents") <br>}; <br> <br>LPTSTR sCreateTable =  <br>_T("CREATE TABLE dbo.%s (\ <br>ctr int IDENTITY (1, 1) NOT NULL ,\ <br>tick int NOT NULL ,\ <br>guidActivity varchar (40) NOT NULL ,\ <br>OriginalUser varchar (255) NULL ,\ <br>DirectUser varchar (255) NULL ,\ <br>fImpersonation int NOT NULL\ <br>)"); <br> <br> <br> <br>STDMETHODIMP CMtsSqlAudit::Init(LPCOLESTR sDSN, LPCOLESTR sUser, LPCOLESTR sPw) <br>{ <br>CComBSTR msg; <br>RETCODE rc; <br> <br>if (m_henv || m_hstmt || m_hdbc) <br>return E_UNEXPECTED; //did you call Init() twice? <br> <br>rc = SQLAllocEnv( &amp;m_henv ); <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO) <br>    { <br>        msg = L"CSqlLogObj::SetupEnv() - SQLAllocEnv failed!\n"; <br>goto Exit; <br>    } <br>     <br> <br>    /* Allocate the Connection handle */ <br>    rc = SQLAllocConnect( m_henv, &amp;m_hdbc ); <br>    <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    {      <br>        msg = L"CSqlLogObj::SetupEnv() - SQLAllocConnect failed!\n"; <br>goto Exit; <br>    } <br>     <br> <br>SQLSetConnectOption(m_hdbc, SQL_LOGIN_TIMEOUT, 5); <br>     <br>    rc = SQLConnect( m_hdbc, (SQLWCHAR *)sDSN,  SQL_NTS,  <br> (SQLWCHAR *)sUser, SQL_NTS, <br> (SQLWCHAR *)sPw,   SQL_NTS ); <br> <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    {      <br>        msg = L"CSqlLogObj::SetupEnv() - SQLConnect failed!\n"; <br>goto Exit; <br>    } <br> <br> <br>    /* Allocate the statement handle */ <br>    rc = SQLAllocStmt( m_hdbc, &amp;m_hstmt); <br>if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    {      <br>        msg = L"CSqlLogObj::SetupEnv() - SQLConnect failed!\n"; <br>goto Exit; <br>    } <br>// <br>//verify the table existence <br>// <br>{ <br>BOOL bOk = TRUE; <br>TCHAR sSQL[1024]; <br>for (int i=0; i&lt;sizeof(sTables)/sizeof(sTables[0]); i++) <br>{ <br>ZeroMemory(sSQL, 1024 * sizeof(TCHAR)); <br>wsprintf(sSQL, sCreateTable, sTables[i]); <br>rc = SQLExecDirect(m_hstmt, sSQL, lstrlen(sSQL)); <br>if (rc == SQL_SUCCESS || rc == SQL_SUCCESS_WITH_INFO) <br>{ <br>// <br>// this means the db isn't set up <br>// <br> <br>ZeroMemory(sSQL, 1024 * sizeof(TCHAR)); <br>wsprintf(sSQL, _T("drop table %s"), sTables[i]); <br>rc = SQLExecDirect(m_hstmt, sSQL, lstrlen(sSQL)); <br>msg = L"Database not setup correctly"; <br>bOk = FALSE; <br>break; <br>} <br> <br>} <br> <br>if (bOk) rc = 0; <br>} <br> <br> <br> <br>Exit: <br>if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    {      <br> <br>ATLTRACE(msg); <br>ATLTRACE(_T("\n")); <br> <br>if (m_hstmt) <br>{ <br>SQLFreeStmt( m_hstmt, SQL_DROP );     <br>} <br> <br>if (m_hdbc) <br>{ <br>   rc = SQLDisconnect( m_hdbc); <br>   SQLFreeConnect( m_hdbc); <br>   if (m_henv) <br> SQLFreeEnv( m_henv ); <br>} <br> <br>m_hdbc = m_hstmt  = m_henv = NULL; <br> <br>return E_FAIL; <br>} <br> <br>return S_OK; <br>} <br> <br> <br>void CMtsSqlAudit::GetError(HENV henv, HDBC hdbc, HSTMT hstmt, BSTR *msg) <br>{ <br>WCHAR szSqlState[64]; <br>SDWORD NativeError; <br>WCHAR szErr[512]; <br>SWORD cbErrorMsg; <br>SQLError(henv, hdbc, hstmt, szSqlState, &amp;NativeError, szErr, 511, &amp;cbErrorMsg); <br>*msg = SysAllocString(szErr); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

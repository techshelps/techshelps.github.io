<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSPY.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1294"></a>MTSSPY.H</h2>
<pre><code>// MtsSpy.h : Declaration of the CMtsSpy <br> <br>#ifndef __MTSSPY_H_ <br>#define __MTSSPY_H_ <br> <br>#include "resource.h"       // main symbols <br> <br>#include "mtsevents.h" <br> <br>#define IF_AUDIT_DO(x)\ <br>if (m_pSpy -&gt; Audit())\ <br>m_pSpy -&gt; GetAuditObj() -&gt; x <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsSpy <br>class ATL_NO_VTABLE CMtsSpy :  <br>public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public CComCoClass&lt;CMtsSpy, &amp;CLSID_MtsSpy&gt;, <br>public CComControl&lt;CMtsSpy&gt;, <br>public CStockPropImpl&lt;CMtsSpy, IMtsSpy, &amp;IID_IMtsSpy, &amp;LIBID_MTSSPYCTLLib&gt;, <br>public IProvideClassInfo2Impl&lt;&amp;CLSID_MtsSpy, NULL, &amp;LIBID_MTSSPYCTLLib&gt;, <br>public IPersistStreamInitImpl&lt;CMtsSpy&gt;, <br>public IPersistStorageImpl&lt;CMtsSpy&gt;, <br>public IQuickActivateImpl&lt;CMtsSpy&gt;, <br>public IOleControlImpl&lt;CMtsSpy&gt;, <br>public IOleObjectImpl&lt;CMtsSpy&gt;, <br>public IOleInPlaceActiveObjectImpl&lt;CMtsSpy&gt;, <br>public IViewObjectExImpl&lt;CMtsSpy&gt;, <br>public IOleInPlaceObjectWindowlessImpl&lt;CMtsSpy&gt;, <br>public IDataObjectImpl&lt;CMtsSpy&gt;, <br>public ISpecifyPropertyPagesImpl&lt;CMtsSpy&gt;, <br>public IPropertyBag <br>{ <br> <br>private: <br>HRESULT EnableAudit(BOOL bEnable); <br>MapStringToPackageInfo m_map; <br>BOOL m_bLogToFile; <br>HANDLE m_hFile; <br>CComBSTR m_sLogFile; <br>int m_cEvents; <br>HWND m_hWndList; <br>BOOL m_bShowGridLines; <br>BOOL m_bAudit; <br>HFONT m_hFont; <br>long m_nWidth[NUMBER_COLUMNS]; <br>BOOL m_bShowOnScreen; <br>BOOL m_bCSV; <br>HMENU m_hMenuDebug; //the Debug menu <br>IMtsSqlAudit * m_pSqlAudit; <br> <br>public: <br> <br>BOOL Audit(){return m_bAudit;} <br>IMtsSqlAudit * GetAuditObj(){return m_pSqlAudit;} <br>CComPtr&lt;IFontDisp&gt; m_pFont; <br>CContainedWindow m_ctlSysListView32; <br>~CMtsSpy()  <br>{ <br>m_hWndList = NULL; <br> <br>} <br>void FinalRelease() <br>{ <br>SafeRelease(m_pSqlAudit); <br>} <br>CMtsSpy() : <br>m_ctlSysListView32(_T("SysListView32"), this, 1) <br>{ <br> m_hWndList = NULL; <br>m_bLogToFile = FALSE; <br>m_hFile = NULL; <br>m_cEvents = 0; <br>m_bShowGridLines = TRUE; <br>m_bWindowOnly = TRUE;  <br>for (int i=0;i&lt;NUMBER_COLUMNS;i++) <br>{ <br>m_nWidth[i] = 60; <br>} <br> <br>m_hFont = NULL; <br>m_bShowOnScreen = TRUE; <br>m_bCSV = FALSE; <br>m_bAudit = FALSE; <br>m_pSqlAudit = NULL; <br>} <br> <br>BOOL ShouldScroll(int nIndex); <br>HRESULT ShutdownPackage(LPCOLESTR sPackageName); <br>BOOL AddEventToList(LONGLONG perfCount, LPCOLESTR sEvent, LPCOLESTR sPackage); <br>BOOL AddParamValueToList(LPCOLESTR sParamName, LPCOLESTR sValue); <br> <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_MTSSPY) <br> <br>BEGIN_COM_MAP(CMtsSpy) <br>COM_INTERFACE_ENTRY(IMtsSpy) <br>COM_INTERFACE_ENTRY(IDispatch) <br>COM_INTERFACE_ENTRY_IMPL(IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject2, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IViewObject, IViewObjectEx) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleInPlaceObject, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL_IID(IID_IOleWindow, IOleInPlaceObjectWindowless) <br>COM_INTERFACE_ENTRY_IMPL(IOleInPlaceActiveObject) <br>COM_INTERFACE_ENTRY_IMPL(IOleControl) <br>COM_INTERFACE_ENTRY_IMPL(IOleObject) <br>COM_INTERFACE_ENTRY_IMPL(IQuickActivate) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStorage) <br>COM_INTERFACE_ENTRY_IMPL(IPersistStreamInit) <br>COM_INTERFACE_ENTRY_IMPL(ISpecifyPropertyPages) <br>COM_INTERFACE_ENTRY_IMPL(IDataObject) <br>COM_INTERFACE_ENTRY(IProvideClassInfo) <br>COM_INTERFACE_ENTRY(IProvideClassInfo2) <br>COM_INTERFACE_ENTRY(IPropertyBag) <br>END_COM_MAP() <br> <br>BEGIN_PROPERTY_MAP(CMtsSpy) <br>PROP_ENTRY_EX( "LogFile", DISPID_LOGFILE, CLSID_MtsSpyPropPage, IID_IMtsSpy) <br>PROP_ENTRY_EX( "ShowGridLines", DISPID_GRIDLINES, CLSID_MtsSpyPropPage, IID_IMtsSpy) <br>PROP_ENTRY_EX( "Audit", DISPID_AUDIT, CLSID_MtsSpyPropPage, IID_IMtsSpy) <br>PROP_ENTRY_EX( "ColWidth", DISPID_COLWIDTH, CLSID_MtsSpyPropPage, IID_IMtsSpy) <br>PROP_PAGE(CLSID_StockFontPage) <br>END_PROPERTY_MAP() <br> <br> <br>BEGIN_MSG_MAP(CMtsSpy) <br>MESSAGE_HANDLER(WM_PAINT, OnPaint) <br>MESSAGE_HANDLER(WM_SETFOCUS, OnSetFocus) <br>MESSAGE_HANDLER(WM_KILLFOCUS, OnKillFocus) <br>MESSAGE_HANDLER(WM_CREATE, OnCreate) <br> <br>ALT_MSG_MAP(1) <br>MESSAGE_HANDLER(WM_RBUTTONDOWN, OnRButtonDown) <br>COMMAND_ID_HANDLER(ID_LOG, OnLogToFile) <br>COMMAND_ID_HANDLER(ID_CHOOSE_LOG_FILE_NAME, OnChooseLogFile) <br>COMMAND_ID_HANDLER(ID_SAVE, OnSave) <br>COMMAND_ID_HANDLER(ID_CLEAR, OnClear) <br>COMMAND_ID_HANDLER(ID_OPTIONS_GRID_LINES, OnToggleGridLines) <br>COMMAND_ID_HANDLER(ID_AUDIT, OnToggleAudit) <br>COMMAND_ID_HANDLER(ID_SHOW_ON_SCREEN, OnToggleShowOnScreen) <br>COMMAND_ID_HANDLER(IDM_ABOUT, OnAbout) <br>MESSAGE_HANDLER(WM_INITMENU, OnInitMenu) <br>COMMAND_ID_HANDLER(IDM_SELECT_PACKAGES, OnSelectPackages) <br>COMMAND_ID_HANDLER(ID_CHOOSEFONT, OnChooseFont) <br>MESSAGE_HANDLER(WM_DESTROY, OnDestroy) <br>COMMAND_RANGE_HANDLER(ID_DEBUG_BEGIN, ID_DEBUG_END, OnDebugPackage) <br>END_MSG_MAP() <br> <br>LRESULT OnCreate(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnRButtonDown(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnLogToFile(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnChooseLogFile(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnInitMenu(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnSave(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnClear(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleGridLines(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleAudit(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnAbout(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnDestroy(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnSelectPackages(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnChooseFont(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleShowOnScreen(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnDebugPackage(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br> <br> <br> <br> <br>STDMETHOD(Close)(DWORD dwSaveOption); <br> <br>STDMETHOD(SetObjectRects)(LPCRECT prcPos,LPCRECT prcClip) <br>{ <br>IOleInPlaceObjectWindowlessImpl&lt;CMtsSpy&gt;::SetObjectRects(prcPos, prcClip); <br>int cx, cy; <br>cx = prcPos-&gt;right - prcPos-&gt;left; <br>cy = prcPos-&gt;bottom - prcPos-&gt;top; <br>::SetWindowPos(m_ctlSysListView32.m_hWnd, NULL, 0, <br>0, cx, cy, SWP_NOZORDER | SWP_NOACTIVATE); <br> <br> <br>return S_OK; <br>} <br> <br>// IViewObjectEx <br>STDMETHOD(GetViewStatus)(DWORD* pdwStatus) <br>{ <br>ATLTRACE(_T("IViewObjectExImpl::GetViewStatus\n")); <br>*pdwStatus = VIEWSTATUS_SOLIDBKGND | VIEWSTATUS_OPAQUE; <br>return S_OK; <br>} <br> <br>// IMtsSpy <br>public: <br>BOOL AddRunningAspsToDebugMenu(HMENU hMenu); <br>STDMETHOD(ChooseLogFile)(/*[out]*/ BSTR * sLogFileName, /*[out]*/ BOOL * bCanceled); <br>STDMETHOD(get_ShowOnScreen)(/*[out, retval]*/ BOOL *pVal); <br>STDMETHOD(put_ShowOnScreen)(/*[in]*/ BOOL newVal); <br>STDMETHOD(get_Audit)(/*[out, retval]*/ BOOL *pVal); <br>STDMETHOD(put_Audit)(/*[in]*/ BOOL newVal); <br>STDMETHOD(ChooseFont)(); <br>STDMETHOD(get_LogToFile)(/*[out, retval]*/ BOOL *pVal); <br>STDMETHOD(put_LogToFile)(/*[in]*/ BOOL newVal); <br>STDMETHOD(About)(); <br>STDMETHOD(ClearAllEvents)(); <br>STDMETHOD(SaveToFile)(); <br>STDMETHOD(SelectPackages)(); <br>HFONT CreateHFontFromIFont(IFont * pFont); <br>STDMETHOD(get_ColWidth)(short nColumn, /*[out, retval]*/ long *pVal); <br>STDMETHOD(put_ColWidth)(short nColumn, /*[in]*/ long newVal); <br>STDMETHOD(get_ShowGridLines)(/*[out, retval]*/ BOOL *pVal); <br>STDMETHOD(put_ShowGridLines)(/*[in]*/ BOOL newVal); <br>STDMETHOD(get_LogFile)(/*[out, retval]*/ BSTR *pVal); <br>STDMETHOD(put_LogFile)(/*[in]*/ BSTR newVal); <br>HRESULT OnDrawAdvanced(ATL_DRAWINFO&amp; di); <br> <br>HRESULT STDMETHODCALLTYPE putref_Font(IFontDisp* pFont) <br>{ <br>CComQIPtr&lt;IFont, &amp;IID_IFont&gt; pIFont(pFont); <br>if (pIFont) <br>{ <br>if (m_hFont) <br>{ <br>DeleteObject(m_hFont); <br>m_hFont = NULL; <br> <br>} <br>m_hFont = CreateHFontFromIFont(pIFont); <br>if (m_hFont) <br>{ <br>::SendMessage(m_hWndList, WM_SETFONT, (WPARAM)m_hFont, 0L); <br>} <br>} <br> <br> <br>if (FireOnRequestEdit(DISPID_FONT) == S_FALSE) <br>return S_FALSE; <br>m_pFont = pFont; <br>m_bRequiresSave = TRUE; <br>FireOnChanged(DISPID_FONT); <br>FireViewChange(); <br>return S_OK; <br> <br>} <br> <br>STDMETHOD(Read)(LPCOLESTR pszPropName,VARIANT* pVar,IErrorLog* pErrorLog ) <br>{ <br>return S_OK; <br>} <br> <br>STDMETHOD(Write)(LPCOLESTR pszPropName,VARIANT* pVar) <br>{ <br>return S_OK; <br>} <br> <br>HRESULT IPersistStreamInit_Load(LPSTREAM pStm, ATL_PROPMAP_ENTRY* pMap); <br>HRESULT IPersistStreamInit_Save(LPSTREAM pStm, BOOL /* fClearDirty */, <br>ATL_PROPMAP_ENTRY* pMap); <br> <br> <br>}; <br> <br>#endif //__MTSSPY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SECURITYSINK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1304"></a>SECURITYSINK.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: SecuritySink.h <br>* <br>* Description:  Sink for package events <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br> <br>// SecuritySink.h : Declaration of the CSecuritySink <br> <br>#ifndef __SECURITY_H__ <br>#define __SECURITY_H__ <br> <br>#include "stdafx.h" <br>#include "resource.h"       // main symbols <br> <br>#define USERNAMELEN 64 <br> <br>CComBSTR GuidToBstr(REFGUID guid); <br> <br>class CMtsSpy; <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSecuritySink  <br>class ATL_NO_VTABLE CSecuritySink :  <br>public CMtsSink, <br>public IMtsSecurityEvents <br>{ <br>public: <br>CSecuritySink() <br>{ <br>m_pSpy = NULL; <br>} <br>CSecuritySink(CMtsSpy * pSpy) <br>{ <br>m_pSpy = pSpy; <br>} <br> <br>DECLARE_NOT_AGGREGATABLE(CSecuritySink) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CSecuritySink) <br>COM_INTERFACE_ENTRY(IMtsSecurityEvents) <br>COM_INTERFACE_ENTRY_CHAIN(CMtsSink) <br>END_COM_MAP() <br> <br> <br> <br>virtual REFIID GetIID(){return IID_IMtsSecurityEvents;} <br>STDMETHODIMP GetSinkType(EventEnum * e){*e = Security;return S_OK;} <br> <br>STDMETHODIMP OnAuthenticate(  LONGLONG perfCount,  <br>  REFGUID guidActivity,  <br>  ULONG cbByteOrig,   <br>  BYTE * pSidOriginalUser, <br>  ULONG cbByteCur,    <br>  BYTE * pSidCurrentUser,  <br>  BOOL bCurrentUserInpersonatingInProc <br>) <br>{ <br> <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnAuthenticate"), m_sPackageName); <br>CComBSTR sGuidActivity = GuidToBstr(guidActivity); <br>m_pSpy -&gt; AddParamValueToList(L"guidActivity", sGuidActivity); <br> <br>WCHAR sOriginalUser[256]; <br>ZeroMemory(sOriginalUser, 256*sizeof(WCHAR)); <br> <br>if (GetDomainSlashUser(pSidOriginalUser, sOriginalUser)) <br>m_pSpy -&gt; AddParamValueToList(L"Original User", sOriginalUser); <br>else <br>m_pSpy -&gt; AddParamValueToList(L"Original User", L"&lt;Error converting SID&gt;"); <br> <br>WCHAR sDirectUser[256]; <br>ZeroMemory(sDirectUser, 256*sizeof(WCHAR)); <br> <br>if (GetDomainSlashUser(pSidCurrentUser, sDirectUser)) <br>m_pSpy -&gt; AddParamValueToList(L"Direct User", sDirectUser); <br>else <br>m_pSpy -&gt; AddParamValueToList(L"Direct User", L"&lt;Error converting SID&gt;"); <br> <br>m_pSpy -&gt; AddParamValueToList(L"Direct User Inpersonating InProc", bCurrentUserInpersonatingInProc ? L"Yes" : L"No"); <br> <br> <br>IF_AUDIT_DO(OnAuthenticate)(perfCount, <br>sGuidActivity, <br>sOriginalUser, <br>sDirectUser, <br>bCurrentUserInpersonatingInProc); <br>return S_OK; <br>} <br> <br>BOOL GetDomainSlashUser( <br> PSID Sid,// in <br> WCHAR* DomainSlashUser)// out <br>{ <br>WCHAR Name[USERNAMELEN + 1]; <br>DWORD cbName = USERNAMELEN; <br>DWORD cbReferencedDomainName = USERNAMELEN; <br>SID_NAME_USE eUse; <br>WCHAR* p; <br>ZeroMemory(Name, cbName); <br>if (!LookupAccountSid(NULL,Sid, Name, &amp;cbName, DomainSlashUser, &amp;cbReferencedDomainName, &amp;eUse)) <br>return FALSE; <br> <br>// concat domain\user <br>p = DomainSlashUser + wcslen(DomainSlashUser); <br>*p++ = '\\'; <br>wcscpy(p, Name); <br>return TRUE; <br>} <br> <br> <br>}; <br> <br>#endif //__SECURITY_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

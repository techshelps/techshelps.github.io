<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EVENTS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1274"></a>EVENTS.CPP</h2>
<pre><code>// MtsSqlAudit.cpp : Implementatioof CMtsSqlAudit <br>#include "stdafx.h" <br>#include "MtsAudit.h" <br>#ifndef DBNTWIN32 <br>#define DBNTWIN32 <br>#include &lt;SQL.h&gt; <br>#include &lt;SQLEXT.h&gt; <br>#include &lt;ODBCINST.h&gt; <br>#endif /* DBNTWIN32 */ <br>#include &lt;ODBCINST.h&gt; <br>#include "MtsSqlAudit.h" <br> <br>#define SQL_EXEC(x)\ <br>{\ <br>RETCODE rc;\ <br>rc = SQLExecDirect(m_hstmt, x, lstrlen(x));\ <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO )\ <br>{\ <br>CComBSTR msg;\ <br>GetError( m_henv, m_hdbc, m_hstmt, &amp;msg.m_str);\ <br>ATLTRACE(L"Warning! SQlExecDirec failed! Msg: ");\ <br>ATLTRACE(msg.m_str);\ <br>ATLTRACE(L"\n");\ <br>}\ <br>} <br> <br> <br> <br> <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsSqlAudit <br> <br>STDMETHODIMP CMtsSqlAudit::OnUserEvent( <br>                LONGLONG perfCount, <br>                VARIANT * pvarEvent <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br> <br>return S_OK; <br>} <br>STDMETHODIMP CMtsSqlAudit::OnThreadStart( <br>                LONGLONG perfCount, <br>                ULONG ThreadID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ThreadEvents (tick, threadid, event) values (%d, %d, '%s')", <br> TickCount,  <br> ThreadID, <br> L"OnThreadStart"); <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CMtsSqlAudit::OnThreadTerminate( <br>                LONGLONG perfCount, <br>                ULONG ThreadID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ThreadEvents (tick, threadid, event) values (%d, %d, '%s')", <br> TickCount,  <br> ThreadID, <br> L"OnThreadTerminate"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnThreadAssignToActivity( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                ULONG ThreadID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ThreadEvents(tick, threadid, guidActivity, event)\ <br>values (%d, %d, '%s', '%s')", <br> TickCount,  <br> ThreadID, <br> guidActivity, <br> L"OnThreadAssignToActivity"); <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnThreadUnassignFromActivity( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                ULONG ThreadID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ThreadEvents(tick, threadid, guidActivity, event)\ <br>values (%d, %d, '%s', '%s')", <br> TickCount,  <br> ThreadID, <br> guidActivity,  <br> L"OnThreadUnassignFromActivity"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br>STDMETHODIMP CMtsSqlAudit::OnPackageActivation( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidPackage, <br>                LPCOLESTR sPackageName <br>            ) <br>{ <br>   // this should never be called... <br>_ASSERTE(0); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnPackageShutdown( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidPackage, <br>                LPCOLESTR sPackageName <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into PackageEvents values (%d, '%s', '%s')", <br> TickCount,  <br> guidPackage, <br> sPackageName); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnTransactionStart( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx, <br>                LPCOLESTR tsid, <br>                BOOL fRoot <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into TransactionEvents (tick, guidTx, tsid, root, event) \ <br>values (%d, '%s', '%s', %d, '%s')", <br> TickCount,  <br> guidTx, <br> tsid, <br> fRoot ? 1 : 0, <br> L"OnTransactionStart"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnTransactionPrepared( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx, <br>                BOOL fVoteYes <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into TransactionEvents (tick, guidTx, voteYes, event) \ <br>values (%d, '%s', %d, '%s')", <br> TickCount,  <br> guidTx, <br> fVoteYes ? 1 : 0, <br> L"OnTransactionPrepared"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnTransactionAborted( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into TransactionEvents (tick, guidTx, event) \ <br>values (%d, '%s', '%s')", <br> TickCount,  <br> guidTx, <br> L"OnTransactionAborted"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnMethodCall( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into MethodEvents (tick, oid, cid, rid, Method, event) \ <br>values (%d, %d, '%s', '%s', '%s', '%s')", <br> TickCount,  <br> oid, <br> guidCid, <br> guidRid, <br> sMethod, <br> L"OnMethodCall"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnMethodReturn( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod, <br>                HRESULT hresult <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into MethodEvents (tick, oid, cid, rid, method, hresult, event) \ <br>values (%d, %d, '%s', '%s', '%s', %d, '%s')", <br> TickCount,  <br> oid, <br> guidCid, <br> guidRid, <br> sMethod, <br> hresult,  <br> L"OnMethodReturn"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnMethodException( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>    TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into MethodEvents (tick, oid, cid, rid, Method, event) \ <br>values (%d, %d, '%s', '%s', '%s', '%s')", <br> TickCount,  <br> oid, <br> guidCid, <br> guidRid, <br> sMethod, <br> L"OnMethodException"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br>STDMETHODIMP CMtsSqlAudit::OnObjectCreate( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                LPCOLESTR clsid, <br>                LPCOLESTR tsid, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>    TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, activity, clsid, tsid, ObjectId, event) \ <br>values (%d, '%s', '%s', '%s', %d, '%s')", <br> TickCount,  <br> guidActivity, <br> clsid, <br> tsid, <br> ObjectID, <br> L"OnObjectCreate"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnObjectRelease( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnObjectRelease"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br>STDMETHODIMP CMtsSqlAudit::OnObjectActivate( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnObjectActivate"); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnObjectDeactivate( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnObjectDeactivate"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnDisableCommit( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnDisableCommit"); <br> <br>SQL_EXEC(m_sSQL); <br> <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnEnableCommit( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnEnableCommit"); <br> <br>SQL_EXEC(m_sSQL); <br> <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnSetComplete( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ObjectEvents (tick, ObjectId, event) \ <br>values (%d,  %d, '%s')", <br> TickCount,  <br> ObjectID, <br> L"OnSetComplete"); <br> <br>SQL_EXEC(m_sSQL); <br> <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnResourceCreate( <br>                LONGLONG perfCount, <br>LPCOLESTR guidActivity,  <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ResourceEvents (tick, ActivityGuid, ObjectID, type, resid, event) \ <br>values (%d, '%s', %d, '%s', %d, '%s')", <br> TickCount,  <br> guidActivity, <br> ObjectID, <br> pszType, <br> resId, <br> L"OnResourceCreate"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnResourceAllocate( <br>                LONGLONG perfCount, <br>LPCOLESTR guidActivity,  <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ResourceEvents (tick, ActivityGuid, ObjectID, type, resid, event) \ <br>values (%d, '%s', %d, '%s', %d, '%s')", <br> guidActivity, <br> TickCount,  <br> ObjectID, <br> pszType, <br> resId, <br> L"OnResourceAllocate"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnResourceRecycle( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br> <br>wsprintf(m_sSQL,  <br> L"insert into ResourceEvents (tick, ObjectID, type, resid, event) \ <br>values (%d, %d, '%s', %d, '%s')", <br> TickCount,  <br> ObjectID, <br> pszType, <br> resId, <br> L"OnResourceRecycle"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSqlAudit::OnResourceDestroy( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into ResourceEvents (tick, ObjectID, type, resid, event) \ <br>values (%d, %d, '%s', %d, '%s')", <br> TickCount,  <br> ObjectID, <br> pszType, <br> resId, <br> L"OnResourceDestroy"); <br> <br>SQL_EXEC(m_sSQL); <br> <br>return S_OK; <br>} <br>STDMETHODIMP CMtsSqlAudit::OnAuthenticate( <br>          LONGLONG perfCount,  <br>  LPCOLESTR guidActivity,  <br>  LPCOLESTR sOriginalUser, <br>  LPCOLESTR sDirectUser,  <br>  BOOL bCurrentUserInpersonatingInProc <br>            ) <br>{ <br>    long TickCount = 0; <br>    if (m_PerformanceFrequency != 0) <br>        TickCount = (long)((1000 * perfCount) / m_PerformanceFrequency); <br> <br> <br>ZeroMemory(m_sSQL, SQL_BUF_SIZE * sizeof(WCHAR)); <br>wsprintf(m_sSQL,  <br> L"insert into Authenticate values (%d, '%s', '%s', '%s', %d)", <br> TickCount,  <br> guidActivity,  <br> sOriginalUser, <br> sDirectUser,  <br> bCurrentUserInpersonatingInProc); <br> <br>SQL_EXEC(m_sSQL); <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

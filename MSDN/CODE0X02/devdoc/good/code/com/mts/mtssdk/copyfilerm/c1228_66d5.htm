<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPCOPYFILERM.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1229"></a>CPCOPYFILERM.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: CPCopyFileRm.h <br>* <br>* Description: <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// CProxyIFileRm <br>template &lt;class T&gt; <br>class CProxyIFileRm : public IConnectionPointImpl&lt;T, &amp;IID_IFileRm, CComDynamicUnkArray&gt; <br>{ <br>public: <br> <br>//IFileRm : IUnknown <br>public: <br>HRESULT Fire_CopyListTx( <br>long lConHandle) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;CopyListTx(lConHandle); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_Disconnect( <br>long ulConnHandle) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;Disconnect(ulConnHandle); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_Connect( <br>BSTR sAppName, <br>long * ulConnHandle) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;Connect(sAppName, ulConnHandle); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_FileCopyTx( <br>long lConHandle, <br>BSTR sSource, <br>BSTR sDestination, <br>long bFailIfExists) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;FileCopyTx(lConHandle, sSource, sDestination, bFailIfExists); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_FileRenameTx( <br>long lConHandle, <br>BSTR sSource, <br>BSTR sDestination) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;FileRenameTx(lConHandle, sSource, sDestination); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_AddFile( <br>long lConHandle, <br>BSTR sSource, <br>BSTR sDestination) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;AddFile(lConHandle, sSource, sDestination); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_CopyDirTx( <br>long lConHandle, <br>BSTR sSource, <br>BSTR sDestination) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;CopyDirTx(lConHandle, sSource, sDestination); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_FileMoveTxt( <br>long lConHandle, <br>BSTR sSource, <br>BSTR sDestination) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;FileMoveTxt(lConHandle, sSource, sDestination); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_FileDeleteTx( <br>long lConHandle, <br>BSTR sFileName) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;FileDeleteTx(lConHandle, sFileName); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_GetTmWhereabouts( <br>long lConHandle, <br>unsigned char * * rgbTmAddr, <br>unsigned long * pcbTmAddr) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;GetTmWhereabouts(lConHandle, rgbTmAddr, pcbTmAddr); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_ExportTx( <br>long lConHandle, <br>unsigned long cbTranCookie, <br>unsigned char * rgbTranCookie) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;ExportTx(lConHandle, cbTranCookie, rgbTranCookie); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_SetVisible( <br>int bVisible) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;SetVisible(bVisible); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_ResetConnection( <br>long lConHandle) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;ResetConnection(lConHandle); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>HRESULT Fire_MarshalPointer( <br>IStream * * ppStream) <br>{ <br>T* pT = (T*)this; <br>pT-&gt;Lock(); <br>HRESULT ret; <br>IUnknown** pp = m_vec.begin(); <br>while (pp &lt; m_vec.end()) <br>{ <br>if (*pp != NULL) <br>{ <br>IFileRm* pIFileRm = reinterpret_cast&lt;IFileRm*&gt;(*pp); <br>ret = pIFileRm-&gt;MarshalPointer(ppStream); <br>} <br>pp++; <br>} <br>pT-&gt;Unlock(); <br>return ret; <br>} <br>}; <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILERM.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1231"></a>FILERM.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: FileRm.h <br>* <br>* Description: Declaration of the CFileRm <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#ifndef __FILERM_H_ <br>#define __FILERM_H_ <br> <br>#include "resource.h"       // main symbols <br>#include &lt;set&gt; <br>interface IResourceManager; <br> <br>extern long glWorkers;  // a global count of the number of workers connected to... <br>using namespace std; <br> <br>typedef set&lt;long&gt; WorkerSet; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CFileRm <br>class ATL_NO_VTABLE CFileRm :  <br>public CComObjectRootEx&lt;CComMultiThreadModel&gt;, <br>public CComCoClass&lt;CFileRm, &amp;CLSID_CoFileRm&gt;, <br>public IFileRm <br>{ <br> <br>private:  <br> <br>BYTE *m_rgbTmAddr; <br>ULONG m_cbTmAddr; <br> <br>IResourceManager*m_pIResMgr;// Resource manager interface. <br>ISimpleLog*m_pLog;// log interface <br>IUnknown*m_punkDTC;// DTC <br> <br>BOOL m_bTMDown; <br>WorkerSet m_setWorkers; <br>CRmOptions m_options; <br> <br>public: <br>BOOL IsTMDown(){return m_bTMDown;} <br>void SetTMDown(BOOL bDown){m_bTMDown = bDown;} <br> <br>HRESULT TmUp(); <br>HRESULT GetMyTmWhereAbouts(); <br>ISimpleLog * GetLog(BOOL bAddRef = FALSE) <br>{ <br>if (m_pLog) <br>{ <br>if (bAddRef) m_pLog -&gt; AddRef(); <br>} <br> <br>return m_pLog; <br> <br>} <br>IResourceManager * GetIResourceManager(BOOL bAddRef = FALSE) <br>{ <br>if (m_pIResMgr) <br>{ <br>if (bAddRef) m_pIResMgr -&gt; AddRef(); <br>} <br>return m_pIResMgr; <br> <br>} <br>IUnknown * GetDTCUnknown(BOOL bAddRef = FALSE) <br>{ <br>if (m_punkDTC) <br>{ <br>if (bAddRef) m_punkDTC -&gt; AddRef(); <br>} <br>return m_punkDTC; <br>} <br> <br> <br> <br>HRESULT OpenLog(); <br>HRESULT Recover(); <br>HRESULT InitializeRm(); <br> <br>CFileRm() <br>{ <br>m_cbTmAddr = 0; <br>m_rgbTmAddr = NULL; <br>m_punkDTC = NULL; <br>m_pIResMgr = NULL; <br>m_bTMDown = FALSE; <br> <br>} <br> <br> <br>IRmWorker * GetWorker(long lHandle) <br>{ <br>_ASSERTE(lHandle); <br>IRmWorker * pWorker  = NULL; <br>pWorker = (IRmWorker *)(*m_setWorkers.find(lHandle)); <br>return pWorker; <br> <br>//return (IRmWorker *)lHandle; <br>} <br> <br>~CFileRm() <br>{ <br>WorkerSet::iterator item = m_setWorkers.begin(); <br>IUnknown * pUnk; <br>while (item != m_setWorkers.end()) <br>{ <br>pUnk = (IUnknown *)(*item); // get the value <br>SafeRelease(pUnk); <br>item++; <br>} <br>m_setWorkers.clear(); <br> <br>if (m_cbTmAddr) <br>delete m_rgbTmAddr; <br>} <br> <br>DECLARE_CLASSFACTORY_SINGLETON(CFileRm); <br>DECLARE_PROTECT_FINAL_CONSTRUCT(); <br>DECLARE_REGISTRY_RESOURCEID(IDR_FILERM) <br>DECLARE_NOT_AGGREGATABLE(CFileRm) <br> <br>BEGIN_COM_MAP(CFileRm) <br>COM_INTERFACE_ENTRY(IFileRm) <br>END_COM_MAP() <br> <br>HRESULT FinalConstruct(); <br>// IFileRm <br> <br>STDMETHOD(GetTmWhereabouts)(long lConHandle, BYTE **rgbTmAddr, ULONG *pcbTmAddr); <br>STDMETHOD(ExportTx)(long lConHandle, ULONG cbTranCookie, BYTE *rgbTranCookie); <br>STDMETHOD(Connect)(BSTR sAppName, long * ulConnHandle); <br>STDMETHOD(Disconnect)(long ulConnHandle); <br>STDMETHOD(FileCopyTx)(long lConHandle, BSTR sSource, BSTR sDestination, BOOL bFailIfExists); <br>STDMETHOD(FileRenameTx)(long lConHandle, BSTR sSource, BSTR sDestination); <br>STDMETHOD(AddFile)(long lConHandle, BSTR sSource, BSTR sDestination); <br>STDMETHOD(CopyListTx)(long lConHandle); <br>STDMETHOD(FileMoveTxt)(long lConHandle, BSTR sSource, BSTR sDestination); <br>STDMETHOD(FileDeleteTx)(long lConHandle, BSTR sFileName); <br>STDMETHOD(ResetConnection)(long lConHandle); <br> <br>// IFileRm <br>public: <br>STDMETHOD(TMDown)(); <br>HRESULT FinalRelease(); <br> <br> <br>}; <br> <br>#endif //__FILERM_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSTALL.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1224"></a>INSTALL.FRM</h2>
<pre><code>VERSION 5.00 <br>Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.1#0"; "comdlg32.ocx" <br>Begin VB.Form frmInstall  <br>   Caption         =   "SDK Component Install Sample" <br>   ClientHeight    =   3195 <br>   ClientLeft      =   60 <br>   ClientTop       =   345 <br>   ClientWidth     =   4680 <br>   LinkTopic       =   "Form1" <br>   ScaleHeight     =   3195 <br>   ScaleWidth      =   4680 <br>   StartUpPosition =   3  'Windows Default <br>   Begin MSComDlg.CommonDialog cdlg  <br>      Left            =   2040 <br>      Top             =   2640 <br>      _ExtentX        =   847 <br>      _ExtentY        =   847 <br>      _Version        =   327681 <br>      DialogTitle     =   "Select the Component you wish to install" <br>      FileName        =   "*.dll" <br>      Filter          =   "*.dll" <br>   End <br>   Begin VB.CommandButton Command2  <br>      Cancel          =   -1  'True <br>      Caption         =   "&amp;Exit" <br>      Height          =   495 <br>      Left            =   2760 <br>      TabIndex        =   2 <br>      Top             =   2640 <br>      Width           =   1455 <br>   End <br>   Begin VB.CommandButton Command1  <br>      Caption         =   "&amp;Run Demo" <br>      Default         =   -1  'True <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   0 <br>      Top             =   2640 <br>      Width           =   1455 <br>   End <br>   Begin VB.Label Label1  <br>      BeginProperty Font  <br>         Name            =   "MS Sans Serif" <br>         Size            =   12 <br>         Charset         =   0 <br>         Weight          =   700 <br>         Underline       =   0   'False <br>         Italic          =   0   'False <br>         Strikethrough   =   0   'False <br>      EndProperty <br>      Height          =   2055 <br>      Left            =   240 <br>      TabIndex        =   1 <br>      Top             =   240 <br>      Width           =   4335 <br>   End <br>End <br>Attribute VB_Name = "frmInstall" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br>'/******************************************************************************\ <br>'******************************************************************************** <br>' Install Sample <br>' <br>'* This file is provided as part of the Microsoft Transaction Server <br>'* Software Development Kit <br>'* <br>'*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT <br>'*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, <br>'*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES <br>'*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR <br>'*PURPOSE. <br>'* <br>'* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>'******************************************************************************** <br>'\******************************************************************************/ <br> <br>Private Sub Command1_Click() <br>' create the catalog object <br>Dim catalog As Object <br>Set catalog = CreateObject("MTSAdmin.Catalog.1") <br> <br>' get the packages collection - you can only get the top level collections <br>' from the catalog object - the packages collection is returned without retrieving any <br>' data from the catalog data store so the in-memory collection will be empty upon return <br>' from the GetCollection method <br>Dim packages As Object <br>Set packages = catalog.GetCollection("Packages") <br> <br>' first I want to delete any packages called "SDK Demo" to clean up from previous <br>' runs - populate the packages collection to read in all packages and search for <br>' packages named "SDK Demo" - note that I iterate thru the collection starting at the <br>' highest index so I can call Remove within the loop - <br>' Remove will release the object, remove it from the in-memory collection and move objects up so that <br>' object(n+1) becomes object(n) for all n greater then or equal to the index being removed <br>' the effect of Remove on the in memory collection is immediate so Item and Count methods <br>' called any time after the Remove will reflect the change - the Remove action is not <br>' applied to the catalog data store until you call SaveChanges on the collection <br>packages.Populate <br>Dim pack As Object <br>n = packages.Count <br>For i = n - 1 To 0 Step -1 <br>    If packages.Item(i).Value("Name") = "SDK Demo" Then <br>        packages.Remove (i) <br>    End If <br>Next <br>' apply the changes to the data store <br>packages.SaveChanges <br> <br>' now lets add a new package - Add will assign a package guid for us <br>Dim newPack As Object <br>Dim newPackID As Variant <br>Set newPack = packages.Add <br>' make note of the ID assigned <br>newPackID = newPack.Value("ID") <br>' override a couple properties <br>newPack.Value("Name") = "SDK Demo" <br>newPack.Value("SecurityEnabled") = "N" <br> <br>' now we need to commit the changes so the new package is saved <br>' the return value is the number of objects changed/added/deleted <br>' this will be 0 if no changes were pending <br>n = packages.SaveChanges <br> <br>' lets go get all the packages so we can see the one we just created <br>packages.Populate <br> <br>n = packages.Count <br> <br>' iterate over the packages until I find the one I just created and <br>' when I find it I'm going to get the components collection for that <br>' new package <br>Dim package As Object <br>Dim v As Variant <br>Dim components As Object <br>For Each package In packages <br>    v = package.Key <br>    If v = newPackID Then <br>        ' found it <br>        ' lets update some package properties while I'm here <br>        package.Value("SecurityEnabled") = "Y" <br>        ' get the components collection for this package - I need to pass in the key <br>        ' of the package object that I am interested in as parm 2 <br>        Set components = packages.GetCollection("ComponentsInPackage", package.Key) <br>    End If <br>    <br>    ' print the names of all the packages <br>    Debug.Print package.Value("Name") <br>Next <br> <br>' commit the updates I made above <br>packages.SaveChanges <br> <br>' now lets install a component - I specify the name of the DLL as parm 1 <br>' if there is an external TLB file or a P/S DLL I can specify them in parms 2 and 3 - otherwise <br>' pass in empty strings for parms 2 and 3 - there is no need to call SaveChanges after a componentInstall <br>Dim util As Object <br>Set util = components.GetUtilInterface <br>On Error GoTo installFailed <br>cdlg.filename = "" <br>cdlg.Filter = "Component (*.Dll)|*.Dll|All Files (*.*)|*.*" <br>cdlg.FilterIndex = 0 <br>cdlg.ShowOpen <br> <br>Dim thePath As String <br>thePath = cdlg.filename <br>util.InstallComponent thePath, "", "" <br>On Error GoTo 0 <br> <br>' go get the data in the components collection so I can see the <br>' component(s) I just installed - all components in the DLL will <br>' be installed <br>components.Populate <br> <br>' iterate thru the components and change transaction attributes <br>' - use the item and count methods instead of the for each this time <br>' - find the Bank.CreatTable component so I can delete it by index - note that I <br>' must iterate thru the collection backwards since I may call Remove during the loop <br>' (see comments above about removing packages) <br>Dim component As Object <br>n = components.Count <br>For i = n - 1 To 0 Step -1 <br>    Set component = components.Item(i) <br>    component.Value("Transaction") = "Required" <br>Next <br> <br>' get new count and iterate through collection again - Bank.CreateTable will be gone but will <br>' not be deleted from the data store until I call SaveChanges <br>n = components.Count <br>For i = 0 To n - 1 <br>    Set component = components.Item(i) <br>    Debug.Print component.Value("ProgID") <br>    Debug.Print component.Value("DLL") <br>Next <br> <br>n = components.SaveChanges <br> <br>MsgBox "SDK Demo package installed and configured." <br>Exit Sub <br> <br>installFailed: <br>    MsgBox "Error code " + Str$(Err.Number) + " installing " &amp; thePath + vbCrLf &amp; _ <br>    "Make sure that " &amp; cdlg.filename _ <br>    &amp; vbCrLf &amp; " is not already installed." <br> <br> <br>End Sub <br> <br> <br> <br>Private Sub Command2_Click() <br>    Unload Me <br>End Sub <br> <br>Private Sub Form_Load() <br>Dim sLabel1 As String <br> <br>    sLabel1 = "Click the 'Run Demo' button below, " &amp; vbCrLf &amp; "then select the component to install." &amp; vbCrLf &amp; " the component will be installed into the SDK Demo Package" <br>    Label1.Caption = sLabel1 <br>End Sub <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

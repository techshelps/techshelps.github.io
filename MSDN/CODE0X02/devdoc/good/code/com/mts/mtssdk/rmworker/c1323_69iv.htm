<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RMSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1327"></a>RMSINK.CPP</h2>
<pre><code>#include "stdafx.h" <br>#include "initguid.h" <br>#include    &lt;txdtc.h&gt; <br>#include&lt;xolehlp.h&gt; <br>#include&lt;txcoord.h&gt; <br>#include"rmsink.h" <br> <br> <br>// <br>// CIResourceManagerSink class implementation: <br>// <br> <br>CIResourceManagerSink::CIResourceManagerSink(void) <br>{ <br>m_cRefs = 0;// Initialize the reference  <br>// count. <br>} // CIResourceManagerSink::CIResourceManagerSink() <br> <br> <br>CIResourceManagerSink::~CIResourceManagerSink(void) <br>{ <br>// Do nothing. <br>} // CIResourceManagerSink::~CIResourceManagerSink() <br> <br> <br>STDMETHODIMP CIResourceManagerSink::QueryInterface(REFIID i_iid, LPVOID *ppv) <br>{ <br>*ppv = 0;// Initialize interface pointer. <br> <br> <br>if (IID_IUnknown == i_iid || IID_IResourceManagerSink == i_iid) <br>{// IID supported return interface. <br>*ppv = this; <br>} // if <br> <br> <br>if (0 == *ppv)// Check for null interface pointer. <br>{ <br>return ResultFromScode (E_NOINTERFACE); <br>// Neither IUnknown nor  <br>// IResourceManagerSink supported-- <br>// so return no interface. <br>} // if <br> <br>((LPUNKNOWN) *ppv)-&gt;AddRef();// Interface is supported. Increment <br>// its usage count. <br> <br>return S_OK; <br> <br>} // CIResourceManagerSink::QueryInterface() <br> <br> <br> <br>STDMETHODIMP_ (ULONG) CIResourceManagerSink::AddRef(void) <br>{ <br> <br>return ++m_cRefs;// Increment interface usage count. <br> <br>} // CIResourceManagerSink::AddRef() <br> <br> <br> <br>STDMETHODIMP_ (ULONG) CIResourceManagerSink::Release(void) <br>{ <br> <br>--m_cRefs;// Decrement usage reference count. <br> <br>if (0 != m_cRefs)// Is anyone using the interface? <br>{// The interface is in use. <br>return m_cRefs;// Return the number of references. <br>} // if <br> <br>delete this;// Interface not in use -- delete! <br> <br>return 0;// Zero references returned. <br> <br>} // CIResourceManagerSink::Release() <br> <br>// <br>//TMDown should trigger a recover.  It is called when DTC goes down <br>//we should go into recovery mode. <br>// <br>// <br>// <br>STDMETHODIMP CIResourceManagerSink::TMDown(void) <br>{ <br>return S_OK; <br> <br>} // CIResourceManagerSink::TMDown() </code></pre>
<p>&nbsp;</p></body>
</HTML>

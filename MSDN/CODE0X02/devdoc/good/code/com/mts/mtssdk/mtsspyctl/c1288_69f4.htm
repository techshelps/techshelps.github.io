<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PACKAGESINK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1300"></a>PACKAGESINK.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: PackageSink.h <br>* <br>* Description:  Sink for package events <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br> <br>// PackageSink.h : Declaration of the CPackageSink <br> <br>#ifndef __PACKAGE_H__ <br>#define __PACKAGE_H__ <br> <br>#include "stdafx.h" <br>#include "resource.h"       // main symbols <br> <br>CComBSTR GuidToBstr(REFGUID guid); <br> <br>class CMtsSpy; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPackageSink  <br>class ATL_NO_VTABLE CPackageSink :  <br>public CMtsSink, <br>public IMtsPackageEvents <br>{ <br>private: <br>BOOL m_bShowPackageEvents; <br> <br>public: <br>CPackageSink() <br>{ <br>m_pSpy = NULL; <br>} <br>CPackageSink(CMtsSpy * pSpy) <br>{ <br>m_pSpy = pSpy; <br>} <br>void SetShowEvent(BOOL bShow) <br>{ <br>m_bShowPackageEvents = bShow; <br>} <br> <br>BOOL GetShowEvent() <br>{ <br>return m_bShowPackageEvents; <br>} <br> <br>DECLARE_NOT_AGGREGATABLE(CPackageSink) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CPackageSink) <br>COM_INTERFACE_ENTRY(IMtsPackageEvents) <br>COM_INTERFACE_ENTRY_CHAIN(CMtsSink) <br>END_COM_MAP() <br> <br> <br> <br>virtual REFIID GetIID(){return IID_IMtsPackageEvents;} <br>STDMETHODIMP GetSinkType(EventEnum * e){*e = Package;return S_OK;} <br> <br>// <br>//  we can never get this event as currently implemented in mtsevents.dll <br>//because the runtime using this event to start the event infrastructure, <br>//so no sink can be established until _after_ this event is fired. <br>// <br>STDMETHODIMP OnPackageActivation(LONGLONG perfCount, REFGUID guidPackage, LPCOLESTR sPackageName) <br>{ <br>    return S_OK; <br>} <br> <br>// <br>//when the package shuts down, all of the sinks must be shut down as well <br>// <br>STDMETHODIMP OnPackageShutdown(LONGLONG perfCount, REFGUID guidPackage, LPCOLESTR sPackageName) <br>{ <br>if (m_bShowPackageEvents) <br>{ <br>if (m_pSpy) <br>{ <br>            CComBSTR sGuidPackage = GuidToBstr(guidPackage); <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnPackageShutdown"), m_sPackageName); <br>m_pSpy -&gt; AddParamValueToList(L"guidPackage", sGuidPackage); <br>} <br>} <br> <br> <br> <br>_ASSERTE(m_pSpy); <br>if (m_pSpy) <br>{  <br>CComBSTR sGuidPackage = GuidToBstr(guidPackage); <br>IF_AUDIT_DO(OnPackageShutdown)(perfCount, sGuidPackage, sPackageName); <br>m_pSpy -&gt; ShutdownPackage(sPackageName); <br>} <br>return S_OK; <br>} <br>}; <br> <br>#endif //__PACKAGE_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

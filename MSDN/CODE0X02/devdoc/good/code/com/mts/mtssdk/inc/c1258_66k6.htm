<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSPYCTL.IDL</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1266"></a>MTSSPYCTL.IDL</h2>
<pre><code>#include &lt;olectl.h&gt; <br>// MtsSpyCtl.idl : IDL source for MtsSpyCtl.dll <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (MtsSpyCtl.tlb) and marshalling code. <br>cpp_quote ("#define DISPID_LOGFILE5") <br>cpp_quote ("#define DISPID_GRIDLINES6") <br>cpp_quote ("#define DISPID_COLWIDTH8") <br>cpp_quote ("#define DISPID_AUDIT17") <br> <br>typedef enum {Package = 0,Thread,Instance,Transaction,Method,Object,Resource,User, Security} EventEnum; <br> <br>import "oaidl.idl"; <br>import "ocidl.idl"; <br> <br> <br>[ <br>object, <br>uuid(A9B39080-AAD0-11D0-B183-00AA00BA3258), <br>dual, <br>helpstring("IMtsSpy Interface"), <br>pointer_default(unique) <br>] <br>interface IMtsSpy : IDispatch <br>{ <br>[propget, id(DISPID_HWND)] <br>HRESULT Window([out, retval]long* phwnd); <br>[propputref, id(DISPID_FONT)] <br>HRESULT Font([in]IFontDisp* pFont); <br>[propput, id(DISPID_FONT)] <br>HRESULT Font([in]IFontDisp* pFont); <br>[propget, id(DISPID_FONT)] <br>HRESULT Font([out, retval]IFontDisp** ppFont); <br>[propget, id(5), helpstring("property LogFile")] HRESULT LogFile([out, retval] BSTR *pVal); <br>[propput, id(5), helpstring("property LogFile")] HRESULT LogFile([in] BSTR newVal); <br>[propget, id(6), helpstring("property ShowGridLines")] HRESULT ShowGridLines([out, retval] BOOL *pVal); <br>[propput, id(6), helpstring("property ShowGridLines")] HRESULT ShowGridLines([in] BOOL newVal); <br>[propget, id(8), helpstring("property ColWidth")] HRESULT ColWidth(short nColumn, [out, retval] long *pVal); <br>[propput, id(8), helpstring("property ColWidth")] HRESULT ColWidth(short nColumn, [in] long newVal); <br>[id(9), helpstring("method SelectPackages")] HRESULT SelectPackages(); <br>[id(10), helpstring("method SaveToFile")] HRESULT SaveToFile(); <br>[id(11), helpstring("method ClearAllEvents")] HRESULT ClearAllEvents(); <br>[id(12), helpstring("method About")] HRESULT About(); <br>[propget, id(13), helpstring("property LogToFile")] HRESULT LogToFile([out, retval] BOOL *pVal); <br>[propput, id(13), helpstring("property LogToFile")] HRESULT LogToFile([in] BOOL newVal); <br>[id(14), helpstring("method ChooseFont")] HRESULT ChooseFont(); <br>[propget, id(15), helpstring("property ShowOnScreen")] HRESULT ShowOnScreen([out, retval] BOOL *pVal); <br>[propput, id(15), helpstring("property ShowOnScreen")] HRESULT ShowOnScreen([in] BOOL newVal); <br>[id(16), helpstring("method ChooseLogFile")] HRESULT ChooseLogFile([out] BSTR * sLogFileName, [out] BOOL * bCanceled); <br>[propget, id(17), helpstring("property Audit")] HRESULT Audit([out, retval] BOOL *pVal); <br>[propput, id(17), helpstring("property Audit")] HRESULT Audit([in] BOOL newVal); <br> <br>}; <br>[ <br> <br>uuid(32E1C9D5-7A1E-11D0-B16D-00AA00BA3258), <br> <br>helpstring("IMtsSink Interface"), <br>pointer_default(unique) <br>] <br>interface IMtsSink : IUnknown <br>{ <br>[helpstring("Init")] HRESULT Init(IConnectionPointContainer * pConPt, LPWSTR sDisplayName); <br>[helpstring("method Advise")] HRESULT Advise(); <br>[helpstring("method DAdvise")] HRESULT DAdvise(); <br>[helpstring("method GetSinkType")] HRESULT GetSinkType([out] EventEnum * e); <br>[propget, helpstring("property DeleteFlag")] HRESULT DeleteFlag([out, retval] BOOL *pVal); <br>[propput, helpstring("property DeleteFlag")] HRESULT DeleteFlag([in] BOOL newVal); <br> <br>}; <br>[ <br>uuid(A9B39071-AAD0-11D0-B183-00AA00BA3258), <br>version(1.0), <br>helpstring("MtsSpyCtl 1.0 Type Library") <br>] <br>library MTSSPYCTLLib <br>{ <br>importlib("stdole2.tlb"); <br> <br>[ <br>uuid(A9B39081-AAD0-11D0-B183-00AA00BA3258), <br>helpstring("MtsSpy ActiveX Control") <br>] <br>coclass MtsSpy <br>{ <br>[default] interface IMtsSpy; <br>}; <br> <br> <br>[ <br>uuid(AAF6270D-AC5E-11D0-B185-00AA00BA3258), <br>helpstring("MtsSpyPropPage Class") <br>] <br>coclass MtsSpyPropPage <br>{ <br>interface IUnknown; <br>}; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>METHODSINK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1290"></a>METHODSINK.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: MethodSink.h <br>* <br>* Description: Declration of Method Sink <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#ifndef __METHODSINK_H__ <br>#define __METHODSINK_H__ <br> <br>#include "resource.h"       // main symbols <br> <br>typedef list&lt;LONGLONG&gt; TimeStack; <br>typedef map&lt;MTS_OBJID, TimeStack *&gt; TimeMap; <br>class CMtsSpy; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMethodSink  <br>class ATL_NO_VTABLE CMethodSink :  <br>public CMtsSink, <br>public IMtsMethodEvents <br>{ <br>public: <br> <br>TimeMap m_map; <br>CMethodSink(CMtsSpy * pSpy) <br>{ <br>m_pSpy = pSpy; <br>} <br>CMethodSink() <br>{ <br>m_pSpy = NULL; <br>} <br> <br>DECLARE_NOT_AGGREGATABLE(CMethodSink) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CMethodSink) <br>COM_INTERFACE_ENTRY(IMtsMethodEvents) <br>COM_INTERFACE_ENTRY_CHAIN(CMtsSink) <br>END_COM_MAP() <br> <br>virtual REFIID GetIID(){return IID_IMtsMethodEvents;} <br>STDMETHODIMP GetSinkType(EventEnum * e){*e = Method;return S_OK;} <br> <br> <br>STDMETHOD(OnMethodCall)(LONGLONG perfCount, MTS_OBJID oid, REFCLSID cid, REFIID rid, ULONG iMeth); <br>STDMETHOD(OnMethodReturn)(LONGLONG perfCount, MTS_OBJID oid, REFCLSID cid, REFIID rid, ULONG iMeth, HRESULT hr); <br>STDMETHOD(OnMethodException)(LONGLONG perfCount, MTS_OBJID oid, REFCLSID cid, REFIID rid, ULONG iMeth); <br>STDMETHOD(Advise)(); <br> <br>HRESULT GetClsidOfTypeLib2 (IID * piid, UUID * puuidClsid); <br>HRESULT GetMethodName (REFIID riid, int iMeth, _TCHAR** ppszMethodName); <br> <br>}; <br>#endif //__METHODSINK_H__ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

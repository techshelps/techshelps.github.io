<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACTION.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1324"></a>ACTION.H</h2>
<pre><code>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: action.h <br>* <br>* Description:  abstracts a RM "Action" <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#ifndef _ACTIONLIST_H_ <br>#define _ACTIONLIST_H_ <br> <br>#include "rmworker.h" <br>#include &lt;list&gt; <br> <br>using namespace std; <br>//--------------------------------------------------------------------- <br>// This file contains all type and class definitions used by the file <br>// resource manager to manage an in-memory list of all its actions. <br>//--------------------------------------------------------------------- <br> <br>class CAction <br>{ <br>public: <br>// non-logged info...this isn't logged because the lock on the file <br>// is released when the process crashes (in this case the rm) <br> <br>HANDLE m_hLock;// the handle to the file that acts as a lock <br>WIN32_FILE_ATTRIBUTE_DATA m_attrFile; <br>TCHAR m_pszLockedFile[ MAX_PATH ]; <br> <br> <br> <br>public: <br> <br>// permanent information -- logged <br>FILE_OPERATION m_eFileOp; <br>LOG_RM_COMMAND m_eRmCommand; <br>    LPTSTR m_sPath1; <br>LPTSTR m_sPath2; <br> <br>CAction(); <br>~CAction(); <br>CAction (CAction * pAction); <br>CAction(LOG_RM_COMMAND rmCommand, FILE_OPERATION eOpIn,  LPTSTR pszInParm1, LPTSTR pszInParm2); <br>BOOL LockFile(TCHAR * pFile); <br>void ReleaseLock(); <br> <br>HRESULT Save(BYTE **ppByte, ULONG * cbByte); <br>HRESULT Load(BYTE * pByte, long cbByte); <br> <br>}; <br> <br>//--------------------------------------------------------------------- <br>// CActionList: <br>// Class definition for the action list manager. <br>//--------------------------------------------------------------------- <br>typedef list &lt;CAction *&gt; ACTIONLIST; <br> <br>class CActionList : public ACTIONLIST <br>{ <br>public: <br> <br>// Consructor interface: <br>// Defines the constructor and destructor for a CActionList <br>// class. <br>//CActionList-- instantiates a Action list object <br>//~CActionList-- deletes a Action list object <br> <br>    CActionList (void); <br>// Action list constructor <br>~CActionList (void);// Action list destructor <br> <br>// Action List Interface <br>// Defines group of interfaces that manage the in-memory action list for  <br>// a recovery manager. <br>//AddAction-- logs and executes an action. <br>//      GetAction-- get action item from action list. <br>//RemoveAction-- undoes an action and logs an undo record. <br>//RecoverActions-- recovers a list of actions from the log. <br>//UndoActions-- undoes all actions on the action list. <br>// <br> <br>void CleanupAction (BOOL bCommit = FALSE);// Delete all items from action list. <br>BOOL PushAction (LOG_RM_COMMAND rmCommand, FILE_OPERATION eFileOp, TCHAR *pszParm1, TCHAR *pszParm2); <br>BOOL PushAction(CAction * pAction);// Add an action to the action list. <br>BOOL PeekAction (CAction ** pprmAction);// Get action at top of action list. <br>BOOL RemoveAction (BOOL bCommit = FALSE);// Removes and action from top of list. <br>BOOL PopAction (CAction&amp; prmAction);// Pops action at top of list combines <br>// Peek action and remove action. <br> <br>void ResetActions (CActionList *actionList); // Resets the action list to actionList <br>void  Clone(CActionList * pList);// copies the <br> <br> <br>//ACTIONLIST*m_plistAction; <br>// In-memory list of all actions. <br>// performed for transaction manager. <br> <br> <br> <br>}; // CActionList <br> <br> <br> <br> <br>#endif _ACTIONLIST_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

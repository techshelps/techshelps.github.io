<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILERMPXY.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1342"></a>FILERMPXY.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: FileRmPxy.h <br>* <br>* Description: <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>// FileRmPxy.h : Declaration of the CFileRmPxy <br> <br>#include "resource.h"       // main symbols <br>interface IFileRm; <br>interface ITransaction; <br>interface IDispenserDriver; <br> <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;list&gt; <br>using namespace std; <br> <br> <br>interface IFileRm; <br> <br>//  <br>//setup a map of DWORDs to ITransactionExport * objects for  <br>//mapping the DTC whereabouts to connections for enlisting on tx's <br>// <br> <br>typedef map&lt;DWORD, ITransactionExport *&gt; ExportObjMap; <br> <br> <br>// <br>//a set of connection handles -- if the ASP shutsdown, we should free the connections <br>// <br>typedef set&lt;long&gt; ConnectionSet; <br> <br> <br>#define SafeRelease(pUnk) {if (pUnk){pUnk -&gt; Release();pUnk = NULL; }} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CFileRmPxy <br>class CFileRmPxy :  <br>public IDispenserDriver,  <br>public CComObjectRootEx&lt;CComMultiThreadModel&gt;, <br>public CComCoClass&lt;CFileRmPxy, &amp;CLSID_FileRmPxy&gt;, <br>public IDispatchImpl&lt;IFileRmPxy, &amp;IID_IFileRmPxy, &amp;LIBID_TXFILEDISPLib&gt; <br> <br>{ <br> <br>private:  <br>// Resource Dispenser stuff <br>IGlobalInterfaceTable *m_pGIT; <br>DWORD m_dwRmPtrCookie; <br>IHolder * m_pHolder; <br>IDispenserManager * m_pDispMan; <br>CComAutoCriticalSection m_critsec; <br> <br>// a map of Connection handles to export objects <br>ExportObjMap m_mapExport; <br> <br>//critical sections for STL collections <br>CComAutoCriticalSection m_csCol; <br> <br> <br>BOOL m_bConfirm; <br>IFileRm * m_pRm; <br>#ifdef _DEBUG <br>void ShowMessage(); <br>#endif <br>IFileRm * GetFileRmPointer(); <br>ConnectionSet m_set; <br>IUnknown * m_pFreeThreadedMarshaler; <br> <br>public: <br>// <br>// this resource dispenser must be a singleton object so that <br>// there is a unique IHolder which maintains the list of  <br>// resources to be pooled <br>// <br>DECLARE_CLASSFACTORY_SINGLETON(CFileRmPxy); <br>DECLARE_PROTECT_FINAL_CONSTRUCT(); <br> <br> <br> <br>CFileRmPxy(); <br>~CFileRmPxy(); <br> <br>HRESULT FinalConstruct(); <br>void FinalRelease(); <br>HRESULT GetExportObject(long ResID, ITransaction * pTransaction, ITransactionExport **ppExport); <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_FileRmPxy) <br> <br>BEGIN_COM_MAP(CFileRmPxy) <br>COM_INTERFACE_ENTRY(IFileRmPxy) <br>COM_INTERFACE_ENTRY(IDispatch) <br>COM_INTERFACE_ENTRY(IDispenserDriver) <br>COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pFreeThreadedMarshaler) <br>END_COM_MAP() <br> <br>public: <br> <br> <br>// IFileRmPxy <br>STDMETHOD(AddFile)(long hConnection, BSTR sSource, BSTR sDestination); <br>STDMETHOD(CopyFilesInCopyList)(long hConnection); <br>STDMETHOD(CopyDirTx)(long hConnection, BSTR sSource, BSTR sDestination); <br>STDMETHOD(CopyFileTx)(long hConnection,BSTR sSource,BSTR sDestination,BOOL bFailIfExists); <br>STDMETHOD(MoveFileTx)(long hConnection,BSTR sSource,BSTR sDestination); <br>STDMETHOD(DeleteFileTx)(long hConnection,BSTR sFileName); <br> <br> <br> <br>//connection management <br>STDMETHOD(Connect)(long *hConnection); <br>STDMETHOD(Disconnect)(long hConnection); <br> <br>// IDispenserDriver <br>STDMETHOD(CreateResource)(/*[in]*/  const RESTYPID ResTypId, <br>      /*[out]*/ RESID* pResId,  <br>      /*[out]*/ TIMEINSECS* pSecsFreeBeforeDestroy); <br> <br>STDMETHOD(RateResource)(/*[in]*/  const RESTYPID ResTypId, <br>/*[in]*/  const RESID ResId, <br>/*[in]*/  const BOOL fRequiresTransactionEnlistment, <br>/*[out]*/ RESOURCERATING* pRating); <br> <br>STDMETHOD(EnlistResource)(/*[in]*/  const RESID ResId,/*[in]*/  const TRANSID TransId); <br>STDMETHOD(ResetResource)(/*[in]*/  const RESID ResId); <br>STDMETHOD(DestroyResource)(/*[in]*/  const RESID ResId);// numeric resource id <br>STDMETHOD(DestroyResourceS)(/*[in]*/  constSRESID ResId);// string resource id <br> <br> <br> <br> <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RESOURCESINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1302"></a>RESOURCESINK.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: ResourceSink.cpp <br>* <br>* Description: Sink for resource events <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>// ResourceSink.cpp : Implementation of CResourceSink <br>#include "stdafx.h" <br>#include "mtsspyctl.h" <br>#include "mtsevents.h" <br>#include "MtsAudit.h" <br>#include "MTSSpy.h" <br>#include "MtsSink.h" <br>#include "packagesink.h" <br>#include "PackageInfo.h" <br>#include "ResourceSink.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CResourceSink <br> <br>STDMETHODIMP CResourceSink::OnResourceCreate( <br>    LONGLONG perfCount,  <br>REFGUID guidActivity, <br>MTS_OBJID ObjectID, <br>    LPCOLESTR pszType, <br>    MTS_RESID resId) <br>{ <br> <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnResourceCreate"), m_sPackageName); <br> <br>CComBSTR sActivity = GuidToBstr(guidActivity); <br>m_pSpy -&gt; AddParamValueToList(L"ActivityGuid", sActivity); <br> <br>m_pSpy -&gt; AddParamValueToList(L"Type", pszType); <br> <br>WCHAR p2[16]; <br>wsprintfW(p2, L"0x%08X", ObjectID); <br>m_pSpy -&gt; AddParamValueToList(L"ObjectID", p2); <br> <br> <br>wsprintfW(p2, L"0x%08X", resId); <br>m_pSpy -&gt; AddParamValueToList(L"ResourceID", p2); <br> <br> <br>IF_AUDIT_DO(OnResourceCreate)(perfCount, sActivity, ObjectID, pszType, resId); <br> <br> <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CResourceSink::OnResourceAllocate( <br>LONGLONG perfCount,  <br>REFGUID guidActivity,     <br>MTS_OBJID ObjectID, <br>    LPCOLESTR pszType, <br>    MTS_RESID resId) <br>{ <br> <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnResourceAllocate"),m_sPackageName); <br>CComBSTR sActivity = GuidToBstr(guidActivity); <br>m_pSpy -&gt; AddParamValueToList(L"ActivityGuid", sActivity); <br> <br>m_pSpy -&gt; AddParamValueToList(L"Type", pszType); <br> <br> <br> <br>WCHAR p2[16]; <br>wsprintfW(p2, L"0x%08X", ObjectID); <br>m_pSpy -&gt; AddParamValueToList(L"ObjectID", p2); <br> <br> <br>wsprintfW(p2, L"0x%08X", resId); <br>m_pSpy -&gt; AddParamValueToList(L"ResourceID", p2); <br>IF_AUDIT_DO(OnResourceAllocate)(perfCount, sActivity, ObjectID, pszType, resId); <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CResourceSink::OnResourceRecycle( <br>LONGLONG perfCount,  <br>MTS_OBJID ObjectID, <br>    LPCOLESTR pszType, <br>    MTS_RESID resId) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnResourceRecycle"),m_sPackageName); <br> <br>m_pSpy -&gt; AddParamValueToList(L"Type", pszType); <br> <br> <br>WCHAR p2[16]; <br>if (ObjectID) <br>{ <br>wsprintfW(p2, L"0x%08X", ObjectID); <br>m_pSpy -&gt; AddParamValueToList(L"ObjectID", p2); <br>} <br> <br> <br>wsprintfW(p2, L"0x%08X", resId); <br>m_pSpy -&gt; AddParamValueToList(L"ResourceID", p2); <br>IF_AUDIT_DO(OnResourceRecycle)(perfCount, ObjectID, pszType, resId); <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CResourceSink::OnResourceDestroy( <br>    LONGLONG perfCount,  <br>MTS_OBJID ObjectID, <br>    LPCOLESTR pszType, <br>    MTS_RESID resId) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnResourceDestroy"),m_sPackageName); <br> <br>m_pSpy -&gt; AddParamValueToList(L"Type", pszType); <br> <br>WCHAR p2[16]; <br>if (ObjectID) <br>{ <br>wsprintfW(p2, L"0x%08X", ObjectID); <br>m_pSpy -&gt; AddParamValueToList(L"ObjectID", p2); <br>} <br> <br> <br>wsprintfW(p2, L"0x%08X", resId); <br>m_pSpy -&gt; AddParamValueToList(L"ResourceID", p2); <br> <br>IF_AUDIT_DO(OnResourceDestroy)(perfCount, ObjectID, pszType, resId); <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

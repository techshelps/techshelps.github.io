<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSINK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1292"></a>MTSSINK.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: MtsSink.h <br>* <br>* Description: Root object declaration for all sinks.  Does the Advise/Unadvise <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#ifndef __MTSSINK_H_ <br>#define __MTSSINK_H_ <br> <br>#include "resource.h"       // main symbols <br> <br>class CMtsSpy; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsSink <br>class ATL_NO_VTABLE CMtsSink :  <br>public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public IMtsSink <br>{ <br>protected: <br>IConnectionPointContainer * m_pCPC; <br>DWORD m_dwAdviseCookie; <br>CComBSTR m_sPackageName; <br>IConnectionPoint * m_pConPt; <br>BOOL m_bReadyForDelete; <br> <br>public: <br> <br>CMtsSpy * m_pSpy; <br>void SetSpyObj(CMtsSpy * pSpy) <br>{ <br>m_pSpy = pSpy; <br>} <br> <br>CMtsSink() <br>{ <br>m_dwAdviseCookie = 0; <br>m_pConPt = NULL; <br>m_pCPC = NULL; <br>m_bReadyForDelete = FALSE; <br>} <br>~CMtsSink() <br>{ <br>if (m_dwAdviseCookie) <br>{ <br>DAdvise(); <br>m_dwAdviseCookie = NULL; <br>} <br> <br>SafeRelease(m_pConPt); <br>SafeRelease(m_pCPC); <br>} <br> <br> <br> <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_MTSSINK) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CMtsSink) <br>COM_INTERFACE_ENTRY(IMtsSink) <br>END_COM_MAP() <br> <br>virtual REFIID GetIID() = 0; <br>// IMtsSink <br>public: <br>STDMETHOD(get_DeleteFlag)(/*[out, retval]*/ BOOL *pVal); <br>STDMETHOD(put_DeleteFlag)(/*[in]*/ BOOL newVal); <br>STDMETHOD(GetSinkType)(EventEnum * e) = 0; // must override <br>STDMETHOD(DAdvise)(); <br>STDMETHOD(Advise)(); <br>STDMETHOD(Init)(IConnectionPointContainer * pConPt, LPWSTR sPackageName); <br>}; <br> <br> <br>#endif //__MTSSINK_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

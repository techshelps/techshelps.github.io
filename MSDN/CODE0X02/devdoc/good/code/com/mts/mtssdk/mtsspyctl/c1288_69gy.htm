<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>USERSINK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1312"></a>USERSINK.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: UserSink.h <br>* <br>* Description: Declaration of the CUserSink -- for user defined events <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>#ifndef __USERSINK_H__ <br>#define __USERSINK_H__ <br> <br>#include "resource.h"       // main symbols <br> <br>class CMtsSpy; <br>///////////////////////////////////////////////////////////////////////////// <br>// CUserSink  <br>class ATL_NO_VTABLE CUserSink :  <br>public CMtsSink, <br>public IMtsUserEvent <br>{ <br>public: <br> <br>CUserSink(CMtsSpy * pSpy) <br>{ <br>m_pSpy = pSpy; <br>} <br>CUserSink() <br>{ <br>m_pSpy = NULL; <br>} <br> <br>DECLARE_NOT_AGGREGATABLE(CUserSink) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CUserSink) <br>COM_INTERFACE_ENTRY(IMtsUserEvent) <br>COM_INTERFACE_ENTRY_CHAIN(CMtsSink) <br>END_COM_MAP() <br> <br>virtual REFIID GetIID(){return IID_IMtsUserEvent;} <br>STDMETHODIMP GetSinkType(EventEnum * e){*e = User;return S_OK;} <br> <br>STDMETHODIMP OnUserEvent(LONGLONG perfCount, VARIANT * var) <br>{ <br>if (var -&gt; vt == VT_BSTR) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnUserEvent"), m_sPackageName); <br>m_pSpy -&gt; AddParamValueToList(L"String Value",  var-&gt;bstrVal); <br>} <br>else if (var -&gt; vt == VT_UNKNOWN) <br>{ <br>IMtsEventInfo * pInfo = NULL; <br>var -&gt; punkVal -&gt; QueryInterface(IID_IMtsEventInfo, (void **)&amp;pInfo); <br>if (pInfo) <br>{ <br>CComBSTR s; <br>pInfo -&gt; get_DisplayName(&amp;s.m_str); <br>m_pSpy -&gt; AddEventToList(perfCount, s.m_str, m_sPackageName); <br> <br>long lCount; <br>pInfo -&gt; get_Count(&amp;lCount); <br>if (lCount) <br>{ <br>VARIANT var; <br>LPOLESTR * pKeys = new LPOLESTR[lCount+1]; <br>IUnknown * pUnk = NULL; <br>pInfo -&gt; get_Names(&amp;pUnk); <br>_ASSERTE(pUnk); <br>IEnumString * pEnum; <br>pUnk -&gt; QueryInterface(IID_IEnumString, (void **)&amp;pEnum); <br>_ASSERTE(pEnum); <br>pUnk -&gt; Release(); <br>ULONG lFetched; <br>pEnum -&gt; Next(lCount, pKeys, &amp;lFetched); <br>pEnum -&gt; Release(); <br>_ASSERTE(lFetched == lCount); <br>int i; <br>for (i=0; i&lt;lFetched; i++) <br>{ <br>s = pKeys[i]; <br>pInfo -&gt; get_Value(s, &amp;var); <br>if (var.vt == VT_BSTR) <br>{ <br>m_pSpy -&gt; AddParamValueToList(pKeys[i],  var.bstrVal); <br>VariantClear(&amp;var); <br>} <br>} <br>for (i=0;i&lt;lCount;i++) <br>CoTaskMemFree(pKeys[i]); <br> <br>delete pKeys; <br>} <br>pInfo -&gt; Release(); <br>} <br>} <br>else <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnUserEvent"), m_sPackageName); <br>return S_OK; <br>} <br> <br>}; <br> <br>#endif //__USERSINK_H__ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

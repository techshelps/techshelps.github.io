<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPYCON.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1285"></a>SPYCON.H</h2>
<pre><code>// SpyCon.h : Declaration of the CSpyCon <br> <br>#ifndef __SPYCON_H_ <br>#define __SPYCON_H_ <br> <br>#include "resource.h"       // main symbols <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSpyCon <br>class ATL_NO_VTABLE CSpyCon :  <br>public CComObjectRoot, <br>public CComCoClass&lt;CSpyCon, &amp;CLSID_SpyCon&gt;, <br>public ISpyCon,  <br>public CWindowImpl&lt;CSpyCon&gt;, <br>public IOleClientSite, <br>public IOleInPlaceSite <br> <br>{ <br>private: <br>IOleObject * m_pOleObject; <br>BOOL m_bInPlaceActive; <br>IMtsSpy * m_pSpy; <br>public: <br> <br>BOOL m_bTopmost; <br>WINDOWPLACEMENT m_wp; <br>BOOL m_bSaveOnExit; <br> <br>~CSpyCon() <br>{ <br>SafeRelease(m_pSpy); <br>SafeRelease(m_pOleObject); <br>} <br>CSpyCon() <br>{ <br>memset(&amp;m_wp, NULL, sizeof(m_wp)); <br>m_wp.length = sizeof(m_wp); <br>m_bTopmost = FALSE; <br>m_bInPlaceActive = FALSE; <br>m_bSaveOnExit = TRUE; <br>m_pSpy = NULL; <br>m_pOleObject = NULL; <br>} <br> <br>void FinalRelease() <br>{ <br>SafeRelease(m_pSpy); <br>SafeRelease(m_pOleObject); <br>} <br>DECLARE_REGISTRY_RESOURCEID(IDR_SPYCON) <br>DECLARE_NOT_AGGREGATABLE(CSpyCon) <br> <br>BEGIN_COM_MAP(CSpyCon) <br>COM_INTERFACE_ENTRY(ISpyCon) <br>COM_INTERFACE_ENTRY(IOleClientSite) <br>COM_INTERFACE_ENTRY(IOleWindow) <br>COM_INTERFACE_ENTRY(IOleInPlaceSite) <br>END_COM_MAP() <br> <br>BEGIN_MSG_MAP(CSpyCon) <br>MESSAGE_HANDLER(WM_NCDESTROY, OnNCDestroy) <br>MESSAGE_HANDLER(WM_SIZE, OnSize) <br>MESSAGE_HANDLER(WM_ERASEBKGND, OnErase) <br>MESSAGE_HANDLER(WM_INITMENU, OnInitMenu) <br>COMMAND_ID_HANDLER(IDM_EXIT, OnExit) <br>COMMAND_ID_HANDLER(WM_CLOSE, OnExit) <br>COMMAND_ID_HANDLER(IDM_SELECT_PACKAGES, OnSelectPackages) <br>MESSAGE_HANDLER(WM_SYSCOMMAND, OnSysCommand) <br>COMMAND_ID_HANDLER(ID_LOG, OnLogToFile) <br>COMMAND_ID_HANDLER(ID_CHOOSE_LOG_FILE_NAME, OnChooseLogFile) <br>COMMAND_ID_HANDLER(ID_SAVE, OnSave) <br>COMMAND_ID_HANDLER(ID_CLEAR, OnClear) <br>COMMAND_ID_HANDLER(ID_OPTIONS_GRID_LINES, OnToggleGridLines) <br>COMMAND_ID_HANDLER(IDM_ON_TOP, OnAlwaysOnTop) <br>COMMAND_ID_HANDLER(IDM_ABOUT, OnAbout) <br>COMMAND_ID_HANDLER(ID_CHOOSEFONT, OnChooseFont) <br>COMMAND_ID_HANDLER(ID_SHOW_ON_SCREEN, OnToggleShowOnScreen) <br>COMMAND_ID_HANDLER(ID_SAVE_ON_EXIT, OnToggleSaveOnExit) <br>COMMAND_ID_HANDLER(ID_SAVE_NOW, OnSaveNow) <br> <br>END_MSG_MAP() <br> <br>LRESULT OnSaveNow(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleSaveOnExit(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleShowOnScreen(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnSelectPackages(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnSysCommand(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnLogToFile(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnChooseLogFile(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnInitMenu(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled); <br>LRESULT OnSave(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnClear(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnToggleGridLines(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnAlwaysOnTop(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnAbout(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnChooseFont(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnClose(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled); <br>LRESULT OnExit(WORD /*wNotifyCode*/, WORD /* wID */, HWND /*hWndCtl*/, BOOL&amp; /*bHandled*/); <br> <br>LRESULT OnNCDestroy(UINT /* uMsg */, WPARAM /* wParam */, LPARAM /* lParam */, BOOL&amp; /* lResult */) <br>{ <br>PostQuitMessage(0); <br>return 0; <br>} <br> <br>LRESULT OnErase(UINT /* uMsg */, WPARAM /* wParam */, LPARAM /* lParam */, BOOL&amp; bHandled) <br>{ <br>if (m_bInPlaceActive) <br>return 0; <br>bHandled = FALSE; <br>return 1; <br>} <br> <br>LRESULT OnSize(UINT /* uMsg */, WPARAM /* wParam */, LPARAM /* lParam */, BOOL&amp; /* lResult */) <br>{ <br>if (m_pOleObject &amp;&amp; m_bInPlaceActive) <br>{ <br>CComQIPtr&lt;IOleInPlaceObject, &amp;IID_IOleInPlaceObject&gt; pInPlaceObject(m_pOleObject); <br>RECT rcClient; <br>GetClientRect(&amp;rcClient); <br>pInPlaceObject-&gt;SetObjectRects(&amp;rcClient, &amp;rcClient); <br>GetWindowPlacement(&amp;m_wp); // for storing in the registry <br>} <br>return 0; <br>} <br>// ISpyCon <br>public: <br>STDMETHOD(Run)(); <br> <br>// IOleClientSite <br>public: <br>    STDMETHOD(SaveObject)(void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::SaveObject")); <br>} <br>    STDMETHOD(GetMoniker)(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::GetMoniker")); <br>} <br>    STDMETHOD(GetContainer)(IOleContainer **ppContainer) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::GetContainer")); <br>} <br>    STDMETHOD(ShowObject)(void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::ShowObject")); <br>} <br>    STDMETHOD(OnShowWindow)(BOOL fShow) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::OnShowWindow")); <br>} <br>    STDMETHOD(RequestNewObjectLayout)(void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleClientSite::RequestNewObjectLayout")); <br>} <br> <br> <br>// IOleWindow <br>public: <br>    STDMETHOD(GetWindow)(HWND *phwnd) <br>{ <br>*phwnd = m_hWnd; <br>return S_OK; <br>} <br>    STDMETHOD(ContextSensitiveHelp)(BOOL fEnterMode) <br>{ <br>ATLTRACENOTIMPL(_T("IOleWindow::CanInPlaceActivate")); <br>} <br> <br>// IOleInPlaceSite <br>public: <br>HRESULT SaveSettings(); <br>    STDMETHOD(CanInPlaceActivate)(void) <br>{ <br>return S_OK; <br>} <br>    STDMETHOD(OnInPlaceActivate)(void) <br>{ <br>m_bInPlaceActive = TRUE; <br>return S_OK; <br>} <br>    STDMETHOD(OnUIActivate)(void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::OnUIActivate")); <br>} <br>    STDMETHOD(GetWindowContext)(IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, <br>LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo) <br>{ <br>GetClientRect(lprcPosRect); <br>GetClientRect(lprcClipRect); <br>return S_OK; <br>} <br>    STDMETHOD(Scroll)(SIZE scrollExtant) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::Scroll")); <br>} <br>    STDMETHOD(OnUIDeactivate)(BOOL fUndoable) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::OnUIDeactivate")); <br>} <br>    STDMETHOD(OnInPlaceDeactivate)( void) <br>{ <br>m_bInPlaceActive = FALSE; <br>return S_OK; <br>} <br>    STDMETHOD(DiscardUndoState)( void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::DiscardUndoState")); <br>} <br>    STDMETHOD(DeactivateAndUndo)( void) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::DeactivateAndUndo")); <br>} <br>    STDMETHOD(OnPosRectChange)(LPCRECT lprcPosRect) <br>{ <br>ATLTRACENOTIMPL(_T("IOleInPlaceSite::OnPosRectChange")); <br>} <br> <br> <br> <br>}; <br> <br>#endif //__SPYCON_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

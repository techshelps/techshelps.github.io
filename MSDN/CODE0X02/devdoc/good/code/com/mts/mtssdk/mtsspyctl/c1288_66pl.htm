<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PACKAGEINFO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1299"></a>PACKAGEINFO.H</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: PackageInfo.h <br>* <br>* Description:  contains the definition of an object which holds information <br>about package specific information <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>#ifndef __PACKAGE_INFO_H__ <br>#define __PACKAGE_INFO_H__ <br> <br>class CMtsSink; <br>class CPackageSink; <br>class CMtsSpy; <br> <br>class CPackageInfo <br>{ <br>private: <br>bool m_bReadyForDelete; <br>IConnectionPointContainer * m_pContainer; <br>SinkList * m_pList; <br>CComObject &lt;CPackageSink&gt; * m_pPackageSink; <br>CComBSTR m_sPackageName; <br> <br>public: <br> <br>CComBSTR &amp; PackageName(){return m_sPackageName;} <br>SinkList * List(){return m_pList;} <br>void SetShowPackageEvent(BOOL bShow) <br>{ <br>m_pPackageSink -&gt; SetShowEvent(bShow); <br>} <br> <br>BOOL GetShowPackageEvent() <br>{ <br>return m_pPackageSink -&gt; GetShowEvent(); <br>} <br> <br>IConnectionPointContainer * CPContainer() <br>{ <br>return m_pContainer; <br>} <br> <br>CPackageInfo() <br>{ <br>_ASSERTE(0); // don't use this ctor! <br>m_pContainer = NULL; <br>m_pList = NULL; <br>m_bReadyForDelete = FALSE; <br>m_pPackageSink = NULL; <br> <br> <br>} <br>CPackageInfo(IConnectionPointContainer * pCon, LPWSTR sPackageName, CMtsSpy * pSpy) <br>{ <br>m_pContainer = pCon; <br>m_sPackageName = sPackageName; <br>m_pContainer -&gt; AddRef(); <br>m_pList = new SinkList; <br>m_bReadyForDelete = FALSE; <br>_ASSERTE(pSpy); <br> <br>HRESULT hr; <br>// <br>// we always set up an advise sink for the Package events in order to <br>// get the event that the ASP is shutting down <br>// <br>hr = CComObject&lt;CPackageSink&gt;::CreateInstance(&amp;m_pPackageSink); <br>_ASSERTE(hr == S_OK); <br> <br>// the class factory doesn't do an AddRef() because it expects <br>// a QI to come after the CreateInstance(), so we have to do an <br>// AddRef() here <br> <br>m_pPackageSink -&gt; AddRef(); <br>m_pPackageSink -&gt; Init(pCon, m_sPackageName.m_str); <br>m_pPackageSink -&gt; Advise(); <br>m_pPackageSink -&gt; SetShowEvent(FALSE); <br>m_pPackageSink -&gt; SetSpyObj(pSpy); <br> <br>} <br>~CPackageInfo() <br>{ <br>SinkList::iterator item; <br>IMtsSink * pSink; <br>ULONG refcount; <br>m_pPackageSink -&gt; DAdvise(); <br>refcount = m_pPackageSink -&gt; Release(); <br>m_pPackageSink = NULL; <br> <br>for (item=m_pList -&gt; begin(); item != m_pList -&gt; end(); ++item) <br>{ <br>pSink = *item; <br>if (pSink) <br>{ <br>pSink -&gt; DAdvise(); <br>refcount = pSink -&gt; Release(); <br>_ASSERTE(refcount == 0); <br>pSink = NULL; <br>} <br>} <br> <br>SafeRelease(m_pContainer); <br>m_pList -&gt; clear(); <br>delete m_pList; <br>m_pList = NULL; <br>} <br> <br>void SetDeleteFlag(bool bDelete) <br>{ <br>m_bReadyForDelete = bDelete; <br> <br>} <br>bool IsReadyForDelete() <br>{ <br>return m_bReadyForDelete; <br>} <br> <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

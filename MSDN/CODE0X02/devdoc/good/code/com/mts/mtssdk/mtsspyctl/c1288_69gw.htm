<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TXSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1310"></a>TXSINK.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: TxSink.cpp <br>* <br>* Description: Sink for Tx events <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>#include "stdafx.h" <br>#include "mtsspyctl.h" <br>#include "mtsevents.h" <br>#include "MtsAudit.h" <br>#include "MTSSpy.h" <br>#include "MtsSink.h" <br>#include "packagesink.h" <br>#include "PackageInfo.h" <br>#include "TxSink.h" <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CTxSink <br> <br>STDMETHODIMP CTxSink::OnTransactionStart(LONGLONG perfCount, REFGUID guidTx, REFGUID tsid, BOOL fRoot) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnTransactionStart"), m_sPackageName); <br> <br>    CComBSTR sGuidTx = GuidToBstr(guidTx); <br>    CComBSTR sTsid = GuidToBstr(tsid); <br>m_pSpy -&gt; AddParamValueToList(L"GuidTx", sGuidTx); <br>m_pSpy -&gt; AddParamValueToList(L"tsid", sTsid); <br>m_pSpy -&gt; AddParamValueToList(L"Is a Root Tx?", fRoot ? L"Yes" : L"No"); <br>IF_AUDIT_DO(OnTransactionStart)(perfCount, <br>  sGuidTx, <br>  sTsid, <br>  fRoot); <br>   <br>return S_OK; <br>} <br> <br>STDMETHODIMP CTxSink::OnTransactionPrepared(LONGLONG perfCount, REFGUID guidTx, BOOL fVoteYes) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnTransactionPrepared"), m_sPackageName); <br>    CComBSTR sGuidTx = GuidToBstr(guidTx); <br>    m_pSpy -&gt; AddParamValueToList(L"GuidTx", sGuidTx); <br>m_pSpy -&gt; AddParamValueToList(L"Vote",  fVoteYes == TRUE ? L"Yes" : L"No"); <br>IF_AUDIT_DO(OnTransactionPrepared)(perfCount, <br>  sGuidTx, <br>  fVoteYes); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CTxSink::OnTransactionAborted(LONGLONG perfCount, REFGUID guidTx) <br>{ <br>m_pSpy -&gt; AddEventToList(perfCount, _TEXT("OnTransactionAborted"), m_sPackageName); <br>    CComBSTR sGuidTx = GuidToBstr(guidTx); <br>    m_pSpy -&gt; AddParamValueToList(L"GuidTx", sGuidTx); <br>IF_AUDIT_DO(OnTransactionAborted)(perfCount, sGuidTx); <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

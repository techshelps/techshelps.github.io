<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TASKS.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1225"></a>TASKS.FRM</h2>
<pre><code>VERSION 5.00 <br>Begin VB.Form Tasks  <br>   Caption         =   "Task Samples" <br>   ClientHeight    =   8175 <br>   ClientLeft      =   60 <br>   ClientTop       =   345 <br>   ClientWidth     =   4980 <br>   LinkTopic       =   "Form1" <br>   ScaleHeight     =   8175 <br>   ScaleWidth      =   4980 <br>   StartUpPosition =   3  'Windows Default <br>   Begin VB.CommandButton RemoteComp  <br>      Caption         =   "Configure Client to Use Remote Components" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   10 <br>      Top             =   6360 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton Export  <br>      Caption         =   "Export Package " <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   9 <br>      Top             =   5760 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton Command1  <br>      Caption         =   "Configuring Security Role " <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   8 <br>      Top             =   5160 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton RemoteUpdate  <br>      Caption         =   "Update Package on Remote Server" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   7 <br>      Top             =   4560 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton PropInfo  <br>      Caption         =   "Access Property Info" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   6 <br>      Top             =   3960 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton Related  <br>      Caption         =   "Access Related Collection Names" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   5 <br>      Top             =   3360 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton PackDelete  <br>      Caption         =   "Browse for installed package and Delete" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   4 <br>      Top             =   2760 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton BrowseUpdate  <br>      Caption         =   "Browse for installed Package and Update Properties" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   3 <br>      Top             =   1560 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton BrowseDelete  <br>      Caption         =   "Browse for installed component and Delete" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   2 <br>      Top             =   2160 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton CreatePackage  <br>      Caption         =   "Create New Package and Install Components" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   1 <br>      Top             =   960 <br>      Width           =   4215 <br>   End <br>   Begin VB.CommandButton InstallPackage  <br>      Caption         =   "Install Pre-built Package" <br>      Height          =   495 <br>      Left            =   360 <br>      TabIndex        =   0 <br>      Top             =   360 <br>      Width           =   4215 <br>   End <br>End <br>Attribute VB_Name = "Tasks" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br> <br>Private Sub BrowseDelete_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim pack As Object <br>    Dim componentsInPack As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    packages.populate <br>    For Each pack In packages <br>        If pack.Name = "My Package" Then <br>            Set componentsInPack = packages.GetCollection("ComponentsInPackage", pack.Key) <br>            componentsInPack.populate <br>            For i = 0 To componentsInPack.Count <br>                Set comp = componentsInPack.Item(i) <br>                If comp.Name = "Bank.Account" Then <br>                    componentsInPack.Remove (i) <br>                    componentsInPack.savechanges <br>                    Exit For <br>                End If <br>            Next <br>            Exit For <br>        End If <br>    Next <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub BrowseUpdate_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim pack As Object <br>    Dim componentsInNewPack As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    packages.populate <br>    For Each pack In packages <br>        If pack.Name = "My Package" Then <br>            pack.Value("SecurityEnabled") = "Y" <br>            Exit For <br>        End If <br>    Next <br>    packages.savechanges <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub Command1_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim pack As Object <br>    Dim comp As Object <br>    Dim newUser As Object <br>    Dim newRole As Object <br>    Dim componentsInPack As Object <br>    Dim rolesInPack As Object <br>    Dim usersInRole As Object <br>    Dim rolesForComponent As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    packages.populate <br>    For Each pack In packages <br>        If pack.Name = "My Package" Then <br>            ' create a new role in the package <br>            Set rolesInPack = packages.GetCollection("RolesInPackage", pack.Key) <br>            Set newRole = rolesInPack.Add <br>            newRole.Value("Name") = "R1" <br>            rolesInPack.savechanges <br>             <br>            ' associate the role with a user <br>            Set usersInRole = rolesInPack.GetCollection("UsersInRole", newRole.Key) <br>            Set newUser = usersInRole.Add <br>            newUser.Value("User") = "administrator" <br>            usersInRole.savechanges <br>             <br>            'associate the role with a component <br>            Set componentsInPack = packages.GetCollection("ComponentsInPackage", pack.Key) <br>            componentsInPack.populate <br>            For Each comp In componentsInPack <br>                If comp.Name = "Bank.Account" Then <br>                    Set rolesForComponent = componentsInPack.GetCollection("RolesForPackageComponent", comp.Key) <br>                    Set util = rolesForComponent.getUtilInterface <br>                    util.associateRole (newRole.Key) <br>                    Exit For <br>                End If <br>            Next <br>            Exit For <br>        End If <br>    Next <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub CreatePackage_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim newPack As Object <br>    Dim componentsInNewPack As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    Set newPack = packages.Add <br>    Dim newPackID As String <br>     <br>    newPackID = newPack.Key <br>    newPack.Value("Name") = "My Package" <br>    packages.savechanges <br>     <br>    Set componentsInNewPack = packages.GetCollection("ComponentsInPackage", newPackID) <br>    Set util = componentsInNewPack.getUtilInterface <br>    util.InstallComponent "d:\viper96\bin\x86\rel\samples\packages\vbacct.dll", "", "" <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub Export_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    packages.populate <br>    For Each pack In packages <br>        If pack.Name = "My Package" Then <br>            Set util = packages.getUtilInterface <br>            util.ExportPackage pack.Key, "c:\test.pak", 0 <br>            Exit For <br>        End If <br>    Next <br>            <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub InstallPackage_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    Set util = packages.getUtilInterface <br>    util.InstallPackage "c:\test.pak", "", 0 <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br>End Sub <br> <br>Private Sub PackDelete_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim pack As Object <br>    Dim componentsInPack As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    packages.populate <br>    For i = 0 To packages.Count <br>        Set pack = packages.Item(i) <br>        If pack.Name = "My Package" Then <br>            packages.Remove (i) <br>            packages.savechanges <br>            Exit For <br>        End If <br>    Next <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub PropInfo_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim propertyInfo As Object <br>    Dim property As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    Set propertyInfo = packages.GetCollection("PropertyInfo", "") <br>    propertyInfo.populate <br>    For Each property In propertyInfo <br>        Debug.Print property.Name <br>    Next <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub Related_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim relatedCollectionNames As Object <br>    Dim collName As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set packages = catalog.GetCollection("Packages") <br>    Set relatedCollectionNames = packages.GetCollection("RelatedCollectionInfo", "") <br>    relatedCollectionNames.populate <br>    For Each collName In relatedCollectionNames <br>        Debug.Print collName.Name <br>    Next <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub RemoteUpdate_Click() <br>    Dim catalog As Object <br>    Dim packages As Object <br>    Dim pack As Object <br>    Dim root As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set root = catalog.Connect("billdev9") <br>    Set packages = root.GetCollection("Packages", "") <br>    packages.populate <br>    For Each pack In packages <br>        If pack.Name = "My Package" Then <br>            pack.Value("SecurityEnabled") = "Y" <br>            Exit For <br>        End If <br>    Next <br>    packages.savechanges <br>             <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub RemoteComp_Click() <br>    Dim catalog As Object <br>    Dim remoteComps As Object <br>    Dim util As Object <br>     <br>    On Error GoTo failed <br>    Set catalog = CreateObject("MTSAdmin.CCatalog.1") <br>    Set remoteComps = catalog.GetCollection("RemoteComponents") <br>    Set util = remoteComps.getUtilInterface <br>    util.InstallRemoteComponentByName "billdev9", "New", "Bank.CreateTable" <br>            <br>    Exit Sub <br>     <br>failed: <br>    MsgBox "Failure code " + Str$(Err.Number) <br> <br>End Sub <br> <br>Private Sub RoleConfig_Click() <br> <br>End Sub <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

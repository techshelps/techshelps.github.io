<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSUSEREVENTDATA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1313"></a>MTSUSEREVENTDATA.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: MtsUserEventData.cpp <br>* <br>* Description:  Implementation of CMtsUserEventData -- uses a linked list <br>*to maintain named-valued pairs <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#include "stdafx.h" <br>#include "MtsUserEventObj.h" <br>#include "MtsUserEventData.h" <br>#include "mtsevents_i.c" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsUserEventData <br>CMtsUserEventData::~CMtsUserEventData() <br>{ <br> <br>NameValueList::iterator item; <br>CNameValue * pNV; <br>for (item = m_list.begin(); item != m_list.end(); ++item) <br>{ <br> <br>pNV = *item; <br>if (pNV) <br>delete pNV; <br>} <br> <br>m_list.clear(); <br> <br>} <br> <br>STDMETHODIMP CMtsUserEventData::put_DisplayName(BSTR newVal) <br>{ <br>m_sDisplayName = newVal; <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsUserEventData::put_GuidEventId(BSTR newVal) <br>{ <br> <br>m_sEventID = newVal; <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsUserEventData::put_Value(BSTR sKey, VARIANT * newVal) <br>{ <br>CNameValue * pNV = new CNameValue(sKey, newVal); <br>m_list.push_back(pNV); <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CMtsUserEventData::get_DisplayName(BSTR * sDisplayName) <br>{ <br>*sDisplayName = m_sDisplayName.Copy(); <br>return S_OK; <br>} <br>STDMETHODIMP CMtsUserEventData::get_EventID(BSTR * sGuidEventID) <br>{ <br>*sGuidEventID = m_sEventID.Copy(); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsUserEventData::get_Count(long * lCount) <br>{ <br>*lCount = m_list.size(); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsUserEventData::get_Value(BSTR sKey, VARIANT * pVal) <br>{ <br> <br>NameValueList::iterator item; <br>CNameValue * pNV; <br>for (item = m_list.begin(); item != m_list.end(); ++item) <br>{ <br> <br>pNV = *item; <br>if (lstrcmpi(pNV -&gt; m_sName, sKey) == 0) <br>{ <br>VariantInit(pVal); <br>pVal -&gt; vt = VT_BSTR; <br>pVal -&gt; bstrVal = ::SysAllocString(pNV -&gt; m_sValue.bstrVal); <br>break; <br>} <br> <br>} <br> <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsUserEventData::get_Names(IUnknown ** pUnk) <br>{ <br>long lCount = m_list.size(); <br>LPOLESTR *var = new LPOLESTR[lCount]; <br>int i =0; <br>NameValueList::iterator item; <br>CNameValue * pNV; <br>for (item = m_list.begin(); item != m_list.end(); ++item) <br>{ <br> <br>pNV = *item; <br>var[i]  = pNV-&gt;m_sName; <br>i++; <br>} <br> <br>_ASSERTE(i == lCount); <br>typedef CComObject&lt;CComEnum&lt;IEnumString, &amp;IID_IEnumString, LPOLESTR, <br>_Copy&lt;LPOLESTR&gt; &gt; &gt; enumvar; <br>enumvar* p = new enumvar; <br>p-&gt;Init(&amp;var[0], &amp;var[i], NULL, AtlFlagCopy); // make copies <br>delete [] var; <br>return p-&gt;QueryInterface(IID_IUnknown, (void**)pUnk); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

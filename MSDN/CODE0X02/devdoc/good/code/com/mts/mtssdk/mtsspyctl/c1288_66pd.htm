<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1291"></a>MTSSINK.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: MtsSink.cpp <br>* <br>* Description: implementation of CMtsSink <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>#include "stdafx.h" <br>#include "mtsspyctl.h" <br>#include "mtsevents.h" <br>#include "MtsAudit.h" <br>#include "MTSSpy.h" <br>#include "MtsSink.h" <br>#include "packagesink.h" <br>#include "PackageInfo.h" <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsSink <br> <br> <br>STDMETHODIMP CMtsSink::Init(IConnectionPointContainer * pConPt, LPWSTR sPackageName) <br>{ <br> <br>m_sPackageName = sPackageName; <br>m_pCPC = pConPt; <br>m_pCPC -&gt; AddRef(); <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSink::Advise() <br>{ <br>if (m_dwAdviseCookie) <br>return E_FAIL; <br> <br>_ASSERTE(m_pCPC); <br>HRESULT hr; <br>hr = m_pCPC -&gt; FindConnectionPoint(GetIID(), &amp;m_pConPt); <br>if (hr == S_OK) <br>{ <br>hr = m_pConPt -&gt; Advise(GetControllingUnknown(), &amp;m_dwAdviseCookie); <br>_ASSERTE(hr == S_OK); <br>} <br> <br>return hr; <br>} <br> <br>STDMETHODIMP CMtsSink::DAdvise() <br>{ <br> <br>if (!m_pConPt) <br>return E_FAIL; <br> <br>m_pConPt -&gt; Unadvise(m_dwAdviseCookie); <br>m_dwAdviseCookie = 0; <br>return S_OK; <br>} <br> <br> <br>STDMETHODIMP CMtsSink::get_DeleteFlag(BOOL * pVal) <br>{ <br> <br>*pVal = m_bReadyForDelete; <br>return S_OK; <br>} <br> <br>STDMETHODIMP CMtsSink::put_DeleteFlag(BOOL newVal) <br>{ <br>m_bReadyForDelete = newVal; <br>return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

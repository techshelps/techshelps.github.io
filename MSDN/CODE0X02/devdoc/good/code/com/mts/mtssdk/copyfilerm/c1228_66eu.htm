<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RMOPTIONSDLG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1236"></a>RMOPTIONSDLG.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: RmOptionsDlg.cpp <br>* <br>* Description: Implementation of CRmOptionsDlg <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#include "stdafx.h" <br>#include "rmoptions.h" <br>#include "RmOptionsDlg.h" <br>#include "direct.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CRmOptionsDlg <br> <br> <br>CRmOptionsDlg::CRmOptionsDlg() <br>{ <br>m_pOptions = new CRmOptions; <br>m_bCreatedOptions = TRUE; <br> <br>} <br>CRmOptionsDlg::~CRmOptionsDlg() <br>{ <br>if(m_bCreatedOptions) <br>delete m_pOptions; <br> <br>} <br> <br>LRESULT CRmOptionsDlg::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled) <br>{ <br>SetDlgItemText(IDC_LOG, m_pOptions -&gt; GetLogDir()); <br>SetDlgItemText(IDC_RECOVER, m_pOptions -&gt; GetRecDir()); <br>return 1;  // Let the system set the focus <br>} <br> <br>LRESULT CRmOptionsDlg::OnOK(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled) <br>{ <br> <br> <br> <br>TCHAR sPath[MAX_PATH]; <br>GetDlgItemText(IDC_LOG, sPath, MAX_PATH); <br> <br> <br>LPTSTR p = sPath + lstrlen(sPath) - 1;  <br>if (*p != '\\') <br>{ <br>p++; <br>*p = '\\'; <br>p++; <br>*p = NULL; <br>} <br> <br>if (!CheckDirectory(sPath)) <br>return 0; <br> <br>m_pOptions -&gt; SetLogDir(sPath); <br>GetDlgItemText(IDC_RECOVER, sPath, MAX_PATH); <br>p = sPath + lstrlen(sPath) - 1;  <br>if (*p != '\\') <br>{ <br>p++; <br>*p = '\\'; <br>p++; <br>*p = NULL; <br>} <br> <br>if (!CheckDirectory(sPath)) <br>return 0; <br> <br> <br>m_pOptions -&gt; SetRecDir(sPath); <br>EndDialog(wID); <br>return 0; <br>} <br> <br>LRESULT CRmOptionsDlg::OnCancel(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL&amp; bHandled) <br>{ <br>EndDialog(wID); <br>return 0; <br>} <br> <br> <br>void CRmOptionsDlg::ShowMessage() <br>{ <br>LPTSTR lpMsgBuf = NULL; <br>FormatMessage(  <br>FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, <br>NULL, <br>GetLastError(), <br>MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language <br>(LPTSTR) &amp;lpMsgBuf, <br>0, <br>NULL  <br>); <br> <br> <br>if (lpMsgBuf) <br>{ <br>// Display the string. <br>MessageBox(lpMsgBuf, L"GetLastError", MB_OK|MB_ICONINFORMATION ); <br> <br>// Free the buffer. <br>LocalFree( lpMsgBuf ); <br>} <br>} <br> <br>BOOL CRmOptionsDlg::CheckDirectory(BSTR sDir) <br>{ <br> <br> <br>// make sure dirs exist <br>TCHAR sCurWD[MAX_PATH]; <br> <br> <br> /* Get the current working directory: */ <br>if( _tgetcwd( sCurWD, MAX_PATH ) == NULL ) <br>{ <br>_ASSERTE(0); // why would this fail? <br>return FALSE; <br>} <br> <br> <br>// try to set the currect directory to the sDir <br>if (_tchdir(sDir) == -1) <br>{ <br>TCHAR sMsg[1024]; <br>wsprintf(sMsg, L"The directory %s does not exist.\nDo you wish to create it?", sDir); <br>if (MessageBox(sMsg, L"CopyFileRm", MB_ICONQUESTION|MB_YESNO) == IDNO) <br>return FALSE; <br>else <br>{ <br>if (_tmkdir( sDir ) != 0) <br>{ <br>wsprintf(sMsg, L"Unable to create directory '%s'", sDir); <br>MessageBox(sMsg, L"CopyFileRm", MB_ICONSTOP); <br>return FALSE; <br>} <br> <br>} <br> <br>} <br> <br>_tchdir(sCurWD); <br>return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPYIMAGEOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1242"></a>CPYIMAGEOBJ.CPP</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: CpyImageObj.cpp <br>* <br>* Description: Implementation of CCpyImageObj <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>#include "stdafx.h" <br>#include "CpyImage.h" <br>#include "mtsevents.h" <br> <br> <br> <br>#ifndef DBNTWIN32 <br>#define DBNTWIN32 <br> <br>#include &lt;SQL.h&gt; <br>#include &lt;SQLEXT.h&gt; <br>#include &lt;ODBCINST.h&gt; <br>#include "mtx.h" <br>#include "CpyImageObj.h" <br> <br>#endif /* DBNTWIN32 */ <br> <br> <br>#include "txfiledisp.h" <br>#include "txfiledisp_i.c" <br>#include "mtsusereventobj.h" <br>#include "mtsusereventobj_i.c" <br> <br>#include "mtsevents_i.c" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CCpyImageObj <br>void GetError(HENV henv, HDBC hdbc, HSTMT hstmt, BSTR * msg); <br> <br>STDMETHODIMP CCpyImageObj::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_ICpyImage, <br>}; <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br>// <br>//Inserts data into the database, and copies a file to the specified directory <br>// <br>//NOTE:  this is designed as a sample application and as such does not call  <br>//SetComplete or SetAbort until the client application calls another method <br>// <br>//the [out] parameter is here so that the client can display a message box on an error <br>//in order to propagate the message to the client, the function returns S_FALSE for all <br>//errors <br>// <br>STDMETHODIMP CCpyImageObj::InsertData(BSTR sFromFile, BSTR sToFile,  <br>   BSTR sDescription, BSTR sMainColor,  <br>   BSTR sTheme, BSTR * msg) <br>{ <br> <br> <br> <br>RETCODE                  rc = 0; <br>    RETCODE                  rc1 = 0; <br>    HENV                     henv = NULL; <br>    HDBC                     hdbc = NULL; <br>    HSTMT                    hstmt = NULL; <br> <br>long hPxyCon = 0; <br>    TCHAR sSQL[2048];; <br> <br>HRESULT hr; <br> <br>if (m_pEvents) <br>{ <br> <br>CComBSTR sEvent = L"Source: "; <br>sEvent += sFromFile; <br>sEvent += L" Destination: "; <br>sEvent += sToFile; <br> <br>MtsTrace(sEvent); <br>IMtsUserEventData * pData = NULL; <br>CoCreateInstance(CLSID_MtsUserEventData, NULL, CLSCTX_ALL, IID_IMtsUserEventData, (void **)&amp;pData); <br>_ASSERTE(pData); <br>pData-&gt;put_DisplayName(CComBSTR("CopyImage::InsertData")); <br>CComVariant v; <br>v = sFromFile; <br>pData -&gt; put_Value(CComBSTR("From File"), &amp;v); <br> <br>v = sToFile; <br>pData -&gt; put_Value(CComBSTR("To File"), &amp;v); <br> <br>v = sDescription; <br>pData -&gt; put_Value(CComBSTR("Description"), &amp;v); <br> <br>v = sMainColor; <br>pData -&gt; put_Value(CComBSTR("Main Color"), &amp;v); <br> <br>v = sTheme; <br>pData -&gt; put_Value(CComBSTR("Theme"), &amp;v); <br>v = (IUnknown *) pData; <br> <br>m_pEvents -&gt; PostEvent(&amp;v); <br>pData -&gt; Release(); <br>MtsTraceObject(L"CopyFile Event", sEvent); <br> <br>} <br> <br> <br> <br>// create the Proxy <br>   IFileRmPxy * pPxy = NULL; <br> <br>hr = CoCreateInstance(CLSID_FileRmPxy, NULL, CLSCTX_ALL, IID_IFileRmPxy, (void **)&amp;pPxy); <br>if (FAILED(hr)) <br>{ <br>        *msg = ::SysAllocString(L"Failed to create the CopyFileRm Resource Dispenser!\r\nMake sure that txfiledisp.dll is properly registered."); <br>goto Exit; <br>} <br> <br> <br>    /* Allocate the Environment handle */ <br>    rc = SQLAllocEnv( &amp;henv ); <br>    if( rc ) <br>    { <br>        *msg = ::SysAllocString(L"SQLAllocEnv failed!"); <br>        goto Exit; <br>    } <br>     <br> <br>    /* Allocate the Connection handle */ <br>    rc = SQLAllocConnect( henv, &amp;hdbc ); <br>    if( rc ) <br>    { <br>         <br>        *msg = ::SysAllocString(L"SQLAllocConnect failed!"); <br>goto Exit; <br>    } <br>     <br> <br>SQLSetConnectOption(hdbc, SQL_LOGIN_TIMEOUT, 5); <br> <br>    /* Establish the database connection */ <br>    rc = SQLConnect( hdbc, L"MTXSamples", SQL_NTS,  <br>L"sa", SQL_NTS, <br>L"", SQL_NTS ); <br> <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    { <br>     *msg = ::SysAllocString(L"SQLConnect() failed.\r\nMake sure that the ODBC DSN 'MTXSamples' is created, and\r\nthat sa has a NULL password (or change the source code)"); <br>        goto Exit; <br>    } <br> <br> <br>    /* Allocate the statement handle */ <br>    rc = SQLAllocStmt( hdbc, &amp;hstmt ); <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    { <br>        GetError( henv, hdbc, hstmt, msg); <br>        goto Exit; <br>    } <br> <br> <br>// done connecting to SQL Server, now Connect to the FileRm <br> <br>hr = pPxy -&gt; Connect(&amp;hPxyCon); <br>_ASSERTE(hr == S_OK); <br> <br> <br>// SQL Do Work <br>     wsprintf(sSQL, L"insert into image values ('%s', '%s', '%s', '%s')",  <br>sDescription, sMainColor, sTheme, sToFile); <br> <br>// <br>//insert the row into the database <br>// <br>//NOTE: due to SQL server page locking, this will block all subsequent calls (until it returns) <br>//  it would be fairly easy to work around this, but I haven't done if for the demo. <br>// <br> <br>    rc = SQLExecDirect( hstmt, sSQL, SQL_NTS ); <br> <br> <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    { <br>//GetError( henv, hdbc, hstmt, msg); <br>BOOL bRet = CreateTable(hstmt, msg); <br>if (!bRet) <br>goto Exit; <br>else <br>{ <br>// insert the row into the database <br>    rc = SQLExecDirect( hstmt, sSQL, SQL_NTS ); <br>if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>{ <br>GetError( henv, hdbc, hstmt, msg); <br>goto Exit; <br>} <br>} <br>} <br> <br> <br>// FileRM DoWork <br> <br>hr = pPxy -&gt; CopyFileTx(hPxyCon, sFromFile, sToFile, FALSE); <br> <br>if (FAILED(hr)) <br>{ <br>*msg = ::SysAllocString(L"CopyFileTx Failed\r\nMake sure that your destination directory exists\r\nand that CPYIMAGE.DLL is installed in a package and\r\nmarked as Requires Transaction"); <br>goto Exit; <br>} <br>    <br> <br>// SQL Free Resources <br> <br>    /* Free the statement handle */ <br>    rc = SQLFreeStmt( hstmt, SQL_DROP ); <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    { <br>GetError( henv, hdbc, hstmt, msg);         <br>    } <br> <br>    Exit: <br> <br>// FileRm Free Resources <br>HRESULT hrExit; // we don't want to touch the HRESULT obove the Exit: identifier <br>if (pPxy) <br>{ <br>if (hPxyCon) // if we have a connection <br>{ <br>hrExit = pPxy -&gt; Disconnect(hPxyCon); <br>_ASSERTE(hrExit == S_OK); <br>} <br> <br>    pPxy -&gt; Release(); <br>} <br> <br>    if (hdbc) <br>{ <br>   rc1 = SQLDisconnect( hdbc ); <br>   SQLFreeConnect( hdbc ); <br>       SQLFreeEnv( henv ); <br> <br>} <br> <br>    if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) // ODBC error <br> hr = S_FALSE; <br> <br>if (FAILED(hr)) <br>hr = S_FALSE; <br> <br>return hr; <br>} <br> <br>void GetError(HENV henv, HDBC hdbc, HSTMT hstmt, BSTR *msg) <br>{ <br>WCHAR szSqlState[64]; <br>SDWORD NativeError; <br>WCHAR szErr[512]; <br>SWORD cbErrorMsg; <br>SQLError(henv, hdbc, hstmt, szSqlState, &amp;NativeError, szErr, 511, &amp;cbErrorMsg); <br>*msg = SysAllocString(szErr); <br>} <br> <br> <br>STDMETHODIMP CCpyImageObj::SetComplete() <br>{ <br>HRESULT hr = S_OK; <br>IObjectContext * pInstanceContext; <br>HRESULT hRes = GetObjectContext (&amp;pInstanceContext); <br>_ASSERTE(hr==S_OK); <br> <br>if (pInstanceContext) <br>{ <br>pInstanceContext -&gt; SetComplete();     <br>pInstanceContext -&gt; Release(); <br>} <br> <br>return hr; <br>} <br>STDMETHODIMP CCpyImageObj::SetAbort() <br>{ <br>HRESULT hr = S_OK; <br>IObjectContext * pInstanceContext; <br>HRESULT hRes = GetObjectContext (&amp;pInstanceContext); <br>_ASSERTE(hr==S_OK); <br> <br>if (pInstanceContext) <br>{ <br>pInstanceContext -&gt; SetAbort(); <br>pInstanceContext -&gt; Release(); <br>} <br>return hr; <br>} <br> <br>STDMETHODIMP CCpyImageObj::Test(BSTR * msg) <br>{ <br>*msg = ::SysAllocString(L"This is only a test!"); <br>return S_FALSE; <br> <br> <br>} <br>// <br>//Post a message to the MTS Spy message Q <br>// <br>void CCpyImageObj::MtsTrace(BSTR sMsg) <br>{ <br> <br>CComVariant var = sMsg; <br>m_pEvents -&gt; PostEvent(&amp;var); <br>} <br> <br>void CCpyImageObj::MtsTraceObject(BSTR sDisplayName, BSTR sVal) <br>{ <br> <br>} <br> <br>BOOL CCpyImageObj::CreateTable(HSTMT hstmt, BSTR * msg) <br>{ <br> <br>RETCODE rc; <br>LPTSTR sSQL = _T("CREATE TABLE dbo.Image (ctr int IDENTITY (1, 1) NOT NULL,Description varchar (255) NULL , MainColor varchar (255) NULL ,Theme varchar (255) NULL ,FileName varchar (120) NOT NULL)"); <br>rc = SQLExecDirect( hstmt, sSQL, SQL_NTS ); <br>if( rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO ) <br>    { <br>*msg = ::SysAllocString(L"Failed to create the Image table."); <br>return FALSE; <br>} <br>return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

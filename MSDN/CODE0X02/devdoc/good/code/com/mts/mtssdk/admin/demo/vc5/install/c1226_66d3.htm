<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1227"></a>WMAIN.CPP</h2>
<pre><code>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: wmain.cpp <br>* <br>* Description: Contains implementation of WinMain and other stuff. <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;comdef.h&gt; <br>#include "resource.h" <br> <br>// Use the VC5 import feature to pull in the typelib; note that we could also use <br>// the supplied header (mtxadmin.h, mtxadmin_i.c) but this way we get smart COM pointers. <br>#import "..\..\..\..\..\mtxadmin.dll" <br>using namespace MTSAdmin; <br> <br>// Globals <br>HINSTANCE g_hInstance; <br>HWND g_hDlg; <br>HWND g_hwndStatusMsgEB; <br>_bstr_t  g_bstrDllPath; <br>const DWORD MAX_STRING_LEN = 255; <br> <br> <br>/////////////////////////////////////////////////////////////////// <br>//   Appends a string to the bottom of the display buffer. <br>void Print(LPTSTR tszMsg) <br>{ <br>TCHAR tszBuffer[MAX_STRING_LEN]; <br>_stprintf(tszBuffer, _T("%s\r\n"), tszMsg); <br>SendMessage(g_hwndStatusMsgEB, EM_SETSEL,(WPARAM) -1, (LPARAM) -1) ; <br>SendMessage(g_hwndStatusMsgEB, EM_REPLACESEL, (WPARAM) FALSE, (LPARAM) tszBuffer) ; <br>} <br> <br>/////////////////////////////////////////////////////////////////// <br>//  Clears the contents of the display buffer <br>void ClearDisplay() <br>{ <br>SendMessage(g_hwndStatusMsgEB, EM_SETSEL,(WPARAM) 0, (LPARAM) -1) ; <br>SendMessage(g_hwndStatusMsgEB, EM_REPLACESEL, (WPARAM) FALSE, (LPARAM) _T("")) ; <br>} <br> <br>/////////////////////////////////////////////////////////////////// <br>//  Prompts the user for a dll to install. <br>BOOL GetDllPathFromUser() <br>{ <br>OPENFILENAME ofn;       // common dialog box structure <br>TCHAR tszFile[260];       // buffer for filename <br> <br>_tcscpy(tszFile, _T("")); <br> <br>// Initialize OPENFILENAME <br>ZeroMemory(&amp;ofn, sizeof(OPENFILENAME)); <br>ofn.lStructSize = sizeof(OPENFILENAME); <br>ofn.hwndOwner = g_hDlg; <br>ofn.lpstrFile = tszFile; <br>ofn.nMaxFile = sizeof(tszFile); <br>ofn.lpstrFilter = _T("All\0*.*"); <br>ofn.nFilterIndex = 1; <br>ofn.lpstrFileTitle = NULL; <br>ofn.nMaxFileTitle = 0; <br>ofn.lpstrInitialDir = _T("\\"); <br>ofn.lpstrTitle = _T("Choose a component dll to install"); <br>ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY | OFN_NOCHANGEDIR; <br> <br>// Display the Open dialog box and save filename if they press okay <br>if (!GetOpenFileName(&amp;ofn))  <br>return FALSE; <br> <br>g_bstrDllPath = tszFile; <br>return TRUE; <br>} <br> <br>/////////////////////////////////////////////////////////////////// <br>//  Installs the file pointed to by g_bstrDllPath into the SDKDemo <br>//    package, which we assume already exists. <br>BOOL InstallFileIntoPackage() <br>{ <br>_bstr_t bstrT, bstrT2, bstrT3; <br>long lPkgCount, lCompCount, i; <br>_variant_t varT; <br>TCHAR tszBuf[MAX_STRING_LEN]; <br>try <br>{ <br>ICatalogCollectionPtr pPkgCollection(NULL); <br>ICatalogCollectionPtr pCompCollection(NULL); <br>IComponentUtilPtr pCompUtil(NULL); <br>ICatalogObjectPtr pCatObject(NULL); <br> <br>// Create instance of the catalog object <br>ICatalogPtr pCatalog(__uuidof(Catalog)); <br> <br>bstrT = (LPTSTR)NULL; <br>pCatalog-&gt;Connect(bstrT); <br> <br>// Get the Packages collection <br>bstrT = "Packages"; <br>pPkgCollection = pCatalog-&gt;GetCollection(bstrT); <br> <br>// Populate it <br>pPkgCollection-&gt;Populate(); <br> <br>// Get the "SDK Demo" package <br>Print(_T("Getting the ""SDK Demo"" package....")); <br>lPkgCount = pPkgCollection-&gt;GetCount(); <br>bstrT2 = "SDK Demo"; <br>for (i = (lPkgCount-1); i &gt;= 0 ; i--) <br>{ <br>pCatObject = pPkgCollection-&gt;GetItem(i); <br> <br>bstrT = pCatObject-&gt;GetName(); <br>if (bstrT == bstrT2) <br>{ <br>// Found it <br>break; <br>} <br>} <br> <br>// Install the specified file name <br>bstrT = "ComponentsInPackage"; <br>bstrT2 = ""; <br>bstrT3 = ""; <br> <br>varT = pCatObject-&gt;GetKey(); <br> <br>// Get the "ComponentsInPackage" collection. <br>pCompCollection = pPkgCollection-&gt;GetCollection(bstrT, varT); <br>pCompCollection-&gt;Populate(); <br>pCompUtil = pCompCollection-&gt;GetUtilInterface(); <br> <br>Print(_T("Installing your specified component dll...")); <br>pCompUtil-&gt;InstallComponent(g_bstrDllPath, bstrT2, bstrT3); <br> <br>// Now save, then repopulate the component collection with the just added components <br>pCompCollection-&gt;SaveChanges(); <br>pCompCollection-&gt;Populate(); <br> <br>// Now we are going to set the transaction property to "Required" for each component <br>// in the  'SDK Demo' package. <br>Print(_T("About to set the transaction property for each component...")); <br>lCompCount = pCompCollection-&gt;GetCount(); <br>for (i = 0; i &lt; lCompCount; i++) <br>{ <br>pCatObject = pCompCollection-&gt;GetItem(i); <br>bstrT = "Transaction"; <br>bstrT2 = "Required"; <br>varT = bstrT2; <br>pCatObject-&gt;PutValue(bstrT, varT); <br>} <br>pCompCollection-&gt;SaveChanges(); <br>pCompCollection-&gt;Populate(); <br> <br>Print(_T("Enumerating each of your components")); <br>bstrT = "ProgID"; <br>for (i = 0; i &lt; lCompCount; i++) <br>{ <br>pCatObject = pCompCollection-&gt;GetItem(i); <br>varT = pCatObject-&gt;GetValue(bstrT); <br>bstrT2 = varT; <br>_stprintf(tszBuf, _T("  %s"), (char*)bstrT2); <br>Print(tszBuf); <br>} <br>} <br>catch (...) <br>{ <br>// pop an error message and return <br>return FALSE; <br>} <br>return TRUE; <br>} // InstallFileIntoPackage <br> <br>/////////////////////////////////////////////////////////////////// <br>//  Deletes any and all local packages named "SDK Demo". <br>BOOL DeleteSDKDemoPackage() <br>{ <br>_bstr_t bstrT, bstrT2; <br>long    lPkgCount; <br>long   i; <br> <br>try <br>{ <br>ICatalogCollectionPtr pPkgCollection(NULL); <br>ICatalogPtr pCatalog(__uuidof(Catalog)); <br>ICatalogObjectPtr pCatObject(NULL); <br> <br>bstrT = (LPTSTR)NULL; <br>pCatalog-&gt;Connect(bstrT); <br> <br>// Get the Packages collection <br>Print(_T("Getting the Packages collection")); <br>bstrT = "Packages"; <br>pPkgCollection = pCatalog-&gt;GetCollection(bstrT); <br> <br>// Populate it <br>pPkgCollection-&gt;Populate(); <br> <br>// Loop through all packages in the collection; if we find an <br>//   "SDK Demo" package, remove it. <br>lPkgCount = pPkgCollection-&gt;GetCount(); <br>bstrT2 = "SDK Demo"; <br> <br>Print(_T("Searching for the SDK Demo package, if it exists")); <br>for (i = (lPkgCount-1); i &gt;= 0 ; i--) <br>{ <br>pCatObject = pPkgCollection-&gt;GetItem(i); <br> <br>bstrT = pCatObject-&gt;GetName(); <br>if (bstrT == bstrT2) <br>{ <br>Print(_T("Deleting the existing ""SDK Demo"" package now")); <br>pPkgCollection-&gt;Remove(i); <br>} <br>} <br> <br>// Save any changes we made <br>pPkgCollection-&gt;SaveChanges(); <br>} <br>catch (...) <br>{ <br>return FALSE; <br>} <br> <br>return TRUE; <br>} <br> <br>/////////////////////////////////////////////////////////////////// <br>//  Creates a local package named "SDKDemo"; assumes that a package <br>//    of this name does not already exist. <br>BOOL CreateSDKDemoPackage() <br>{ <br>_bstr_t bstrT, bstrT2; <br>_variant_t varT; <br> <br>try <br>{ <br>ICatalogCollectionPtr pPkgCollection(NULL); <br>ICatalogPtr pCatalog(__uuidof(Catalog)); <br>ICatalogObjectPtr pCatObject(NULL); <br> <br>bstrT = (LPTSTR)NULL; <br>pCatalog-&gt;Connect(bstrT); <br> <br>// Get the Packages collection <br>Print(_T("Getting the Packages collection")); <br>bstrT = "Packages"; <br>pPkgCollection = pCatalog-&gt;GetCollection(bstrT); <br> <br>// Populate it <br>pPkgCollection-&gt;Populate(); <br> <br>// Create a new package object <br>Print(_T("Adding a new package object")); <br>pCatObject = pPkgCollection-&gt;Add(); <br> <br>// Set its name property to "SDK Demo" <br>Print(_T("Changing its name to ""SDK Demo""")); <br>bstrT = "Name"; <br>bstrT2 = "SDK Demo"; <br>varT = bstrT2; <br>pCatObject-&gt;PutValue(bstrT, varT); <br> <br>// Set its security property to off <br>Print(_T("Changing its security setting to off")); <br>bstrT = "SecurityEnabled"; <br>bstrT2 = "N"; <br>varT = bstrT2; <br>pCatObject-&gt;PutValue(bstrT, varT); <br> <br>// Persist our changes <br>pPkgCollection-&gt;SaveChanges(); <br>} <br>catch (...) <br>{ <br>return FALSE; <br>} <br> <br>return TRUE; <br>} <br> <br>/////////////////////////////////////////////////////////////////// <br>//   <br>BOOL InstallDllIntoSDKDemoPackage() <br>{ <br>BOOL bResult; <br> <br>// Delete the SDKDemo package if it exists <br>if (!DeleteSDKDemoPackage()) <br>return FALSE; <br> <br>if (!CreateSDKDemoPackage()) <br>return FALSE; <br> <br>bResult = InstallFileIntoPackage(); <br>if (bResult) <br>{ <br>Print(_T("Installation of your components was successful")); <br>} <br>else <br>{ <br>Print(_T("Installation of your components failed")); <br>} <br>return bResult; <br>} // InstallDllIntoSDKDemoPackage <br> <br>/////////////////////////////////////////////////////////////////// <br>//   Command handler from the wndproc. <br>void InstallDll() <br>{ <br>ClearDisplay(); <br> <br>// First get component dll to install <br>if (!GetDllPathFromUser()) <br>return; <br> <br>// Install dll  <br>InstallDllIntoSDKDemoPackage(); <br> <br>// Done <br>return; <br>} // InstallDLL <br> <br>/////////////////////////////////////////////////////////////////// <br>// <br>BOOL Dlg_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) <br>{ <br>g_hwndStatusMsgEB = GetDlgItem(hwnd,IDC_STATUSMSGBOX); <br>g_hDlg = hwnd; <br>return TRUE; <br>}  // Dlg_OnInitDialog <br> <br>/////////////////////////////////////////////////////////////////// <br>// <br>BOOL Dlg_OnDestroy(HWND hwnd) <br>{ <br>return TRUE; <br>}  // Dlg_OnDestroy <br> <br>/////////////////////////////////////////////////////////////////// <br>// <br>void Dlg_OnClose(HWND hwnd) <br>{ <br>EndDialog(hwnd, 1); <br>}  // Dlg_OnClose <br> <br>/////////////////////////////////////////////////////////////////// <br>// <br>void Dlg_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) <br>{ <br>switch(id) <br>{ <br>case IDOK: <br>break; <br>case IDCANCEL: <br>break; <br>case IDC_INSTALLDLL: <br>InstallDll(); <br>break; <br>default: <br>break; <br>} <br>return; <br>}  // Dlg_OnCommand <br> <br>/////////////////////////////////////////////////////////////////// <br>// <br>BOOL CALLBACK Dlg_Proc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>BOOL fProcessed = TRUE; <br> <br>switch(uMsg) <br>{ <br>HANDLE_MSG(hDlg, WM_INITDIALOG, Dlg_OnInitDialog); <br>HANDLE_MSG(hDlg, WM_CLOSE, Dlg_OnClose); <br>HANDLE_MSG(hDlg, WM_DESTROY, Dlg_OnDestroy); <br>HANDLE_MSG(hDlg, WM_COMMAND, Dlg_OnCommand); <br>default: <br>fProcessed=FALSE; <br>break; <br>} <br>return fProcessed; <br>}  // Dlg_Proc <br> <br>/////////////////////////////////////////////////////////////////// <br>//   Beginning of program execution <br>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow) <br>{ <br>HRESULT hr; <br>int iResult; <br> <br>InitCommonControls(); <br>g_hInstance = hInstance; <br> <br>hr = CoInitialize(NULL); <br>if (FAILED(hr)) <br>return -1; <br> <br>iResult = DialogBox(hInstance, MAKEINTRESOURCE(IDD_MAINDIALOG), NULL, Dlg_Proc); <br> <br>CoUninitialize(); <br>return iResult; <br>}  // WinMain <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

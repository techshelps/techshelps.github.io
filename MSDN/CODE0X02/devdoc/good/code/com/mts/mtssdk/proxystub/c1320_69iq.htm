<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPLELOG.IDL</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1322"></a>SIMPLELOG.IDL</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: SimpleLog.idl <br>* <br>* Description: <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br>// SimpleLog.idl : IDL source for SimpleLog.dll <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (SimpleLog.tlb) and marshalling code. <br>import "oaidl.idl"; <br> <br>//--------------------------------------------------------------------- <br>// LOG_RM_COMMAND: <br>// Enumeration of resource manager command codes used during logging. <br>//--------------------------------------------------------------------- <br> <br>typedef long LOG_RM_COMMAND; <br> <br>const LOG_RM_COMMAND LOG_RM_PRIVATE=1; <br>const LOG_RM_COMMAND LOG_RM_XACT_PREPARE=2; <br>const LOG_RM_COMMAND LOG_RM_XACT_COMMIT=3; <br>const LOG_RM_COMMAND LOG_RM_XACT_BEGIN=4; <br>const LOG_RM_COMMAND LOG_RM_XACT_END=5; <br>const LOG_RM_COMMAND LOG_RM_ENDOFLOG=6; <br>const LOG_RM_COMMAND LOG_RM_CHECKPOINT=7; <br>const LOG_RM_COMMAND LOG_RM_ABORT_REQUEST=20; <br>const LOG_RM_COMMAND LOG_RM_COMMIT_REQUEST=21; <br> <br> <br>[ <br> <br>object, <br>uuid(5BFC4335-4C90-11D0-9697-00AA00C149A6), <br>helpstring("ISimpleLog Interface"), <br>pointer_default(unique) <br>] <br>interface ISimpleLog : IUnknown <br>{ <br> <br> <br>HRESULTWriteLog ([in] GUID guidTx, <br>[in] LOG_RM_COMMAND eOp,  <br>[in, size_is(cbBytes)] BYTE * pByte, <br>[in] long cbBytes); <br> <br>HRESULTInit([in]BSTR  pszLogFileName); <br>HRESULTRecoveryInfo([out] IStorage **ppStorage); <br>[helpstring("method WriteStreamToLog")] HRESULT WriteStreamToLog(GUID GuidTx, LOG_RM_COMMAND eOp, IStream * pStream); <br>[helpstring("method RemoveTxStream")] HRESULT RemoveTxStream(GUID guidTx); <br>[helpstring("method WriteVariantToLog")] HRESULT WriteVariantToLog(GUID m_guidTx, VARIANT *pVariant); <br>[helpstring("method GetStream")] HRESULT GetStream(GUID guidTx, [out] IStream **ppStream); <br> <br> <br>}; <br>[ <br>uuid(5BFC4333-4C90-11D0-9697-00AA00C149A6), <br>version(1.0), <br>helpstring("SimpleLog 1.0 Type Library") <br>] <br>library SIMPLELOGLib <br>{ <br>importlib("stdole32.tlb"); <br> <br>[ <br>uuid(5BFC4336-4C90-11D0-9697-00AA00C149A6), <br>helpstring("SimpleLog Class") <br>] <br>coclass CoSimpleLog <br>{ <br>[default] interface ISimpleLog; <br>}; <br>}; <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

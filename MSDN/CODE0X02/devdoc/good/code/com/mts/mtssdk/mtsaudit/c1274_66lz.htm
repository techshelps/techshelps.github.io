<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTSSQLAUDIT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1277"></a>MTSSQLAUDIT.H</h2>
<pre><code><br>// MtsSqlAudit.h : Declaration of the CMtsSqlAudit <br> <br>#ifndef __MTSSQLAUDIT_H_ <br>#define __MTSSQLAUDIT_H_ <br> <br>#include "resource.h"       // main symbols <br>#define SQL_BUF_SIZE1024 <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMtsSqlAudit <br>class ATL_NO_VTABLE CMtsSqlAudit :  <br>public CComObjectRootEx&lt;CComMultiThreadModel&gt;, <br>public CComCoClass&lt;CMtsSqlAudit, &amp;CLSID_MtsSqlAudit&gt;, <br>public IMtsSqlAudit <br> <br>{ <br> <br>private: <br>HENV m_henv; <br>HDBC m_hdbc; <br>HSTMT m_hstmt; <br>LONGLONG m_PerformanceFrequency; <br>WCHAR m_sSQL[SQL_BUF_SIZE]; <br> <br>public: <br>CMtsSqlAudit() <br>{ <br>m_hdbc = m_henv = m_hstmt = NULL; <br>m_PerformanceFrequency = 0; <br>m_pUnkMarshaler = NULL; <br>} <br> <br>void GetError(HENV henv, HDBC hdbc, HSTMT hstmt, BSTR *msg); <br> <br>DECLARE_REGISTRY_RESOURCEID(IDR_MTSSQLAUDIT) <br>DECLARE_NOT_AGGREGATABLE(CMtsSqlAudit) <br>DECLARE_GET_CONTROLLING_UNKNOWN() <br> <br>BEGIN_COM_MAP(CMtsSqlAudit) <br>COM_INTERFACE_ENTRY(IMtsSqlAudit) <br>COM_INTERFACE_ENTRY_AGGREGATE(IID_IMarshal, m_pUnkMarshaler.p) <br>END_COM_MAP() <br> <br>HRESULT FinalConstruct() <br>{ <br> <br>QueryPerformanceFrequency((LARGE_INTEGER *)&amp;m_PerformanceFrequency); <br>return CoCreateFreeThreadedMarshaler( <br>GetControllingUnknown(), &amp;m_pUnkMarshaler.p); <br>} <br> <br>void FinalRelease() <br>{ <br>m_pUnkMarshaler.Release(); <br>RETCODE rc; <br>if (m_hstmt) <br>{ <br>SQLFreeStmt( m_hstmt, SQL_DROP );     <br>} <br>if (m_hdbc) <br>{ <br>   rc = SQLDisconnect( m_hdbc); <br>   SQLFreeConnect( m_hdbc); <br>   SQLFreeEnv( m_henv ); <br>} <br>} <br> <br>CComPtr&lt;IUnknown&gt; m_pUnkMarshaler; <br> <br>// IMtsSqlAudit <br>public: <br>STDMETHOD(Init)(LPCOLESTR sDSN, LPCOLESTR sUser, LPCOLESTR sPw); <br> <br>    STDMETHOD(OnUserEvent)( <br>LONGLONG perfCount, <br>                VARIANT * pvarEvent <br>            ); <br>    STDMETHOD(OnThreadStart)( <br>                LONGLONG perfCount, <br>                ULONG ThreadID <br>            ); <br> <br>    STDMETHOD(OnThreadTerminate)( <br>                LONGLONG perfCount, <br>                ULONG ThreadID <br>            ); <br> <br>    STDMETHOD(OnThreadAssignToActivity)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                ULONG ThreadID <br>            ); <br> <br>    STDMETHOD(OnThreadUnassignFromActivity)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                ULONG ThreadID <br>            ); <br>    STDMETHOD(OnPackageActivation)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidPackage, <br>                LPCOLESTR sPackageName <br>            ); <br> <br>    STDMETHOD(OnPackageShutdown)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidPackage, <br>                LPCOLESTR sPackageName <br>            ); <br>    STDMETHOD(OnObjectCreate)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidActivity, <br>                LPCOLESTR clsid, <br>                LPCOLESTR tsid, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnObjectRelease)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnTransactionStart)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx, <br>                LPCOLESTR tsid, <br>                BOOL fRoot <br>            ); <br> <br>    STDMETHOD(OnTransactionPrepared)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx, <br>                BOOL fVoteYes <br>            ); <br> <br>    STDMETHOD(OnTransactionAborted)( <br>                LONGLONG perfCount, <br>                LPCOLESTR guidTx <br>            ); <br> <br>    STDMETHOD(OnMethodCall)( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod <br>            ); <br> <br>    STDMETHOD(OnMethodReturn)( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod, <br>                HRESULT hresult <br>            ); <br> <br>    STDMETHOD(OnMethodException)( <br>                LONGLONG perfCount, <br>                MTS_OBJID oid, <br>                LPCOLESTR guidCid, <br>                LPCOLESTR guidRid, <br>                LPCOLESTR sMethod <br>            ); <br>    STDMETHOD(OnObjectActivate)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnObjectDeactivate)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnDisableCommit)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnEnableCommit)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br> <br>    STDMETHOD(OnSetComplete)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID <br>            ); <br>   STDMETHOD(OnResourceCreate)( <br>LONGLONG perfCount, <br>LPCOLESTR guidActivity, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ); <br> <br>    STDMETHOD(OnResourceAllocate)( <br>                LONGLONG perfCount, <br>LPCOLESTR guidActivity, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ); <br> <br>    STDMETHOD(OnResourceRecycle)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ); <br> <br>    STDMETHOD(OnResourceDestroy)( <br>                LONGLONG perfCount, <br>                MTS_OBJID ObjectID, <br>                LPCOLESTR pszType, <br>                MTS_RESID resId <br>            ); <br>    STDMETHOD(OnAuthenticate)( <br>          LONGLONG perfCount,  <br>  LPCOLESTR guidActivity,  <br>  LPCOLESTR sOriginalUser, <br>  LPCOLESTR sDirectUser,  <br>  BOOL bCurrentUserInpersonatingInProc <br>            ); <br> <br> <br> <br>}; <br> <br>#endif //__MTSSQLAUDIT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RMWORKER.IDL</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1272"></a>RMWORKER.IDL</h2>
<pre><code><br>/******************************************************************************\ <br>******************************************************************************** <br>* Filename: RmWorker.idl <br>* <br>* Description: IDL source for RmWorker.dll <br>* <br>* This file will be processed by the MIDL tool to <br>* produce the type library (RmWorker.tlb) and marshalling code. <br>* <br>* <br>* This file is provided as part of the Microsoft Transaction Server <br>* Software Development Kit <br>* <br>*THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT  <br>*WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,  <br>*INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES  <br>*OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR  <br>*PURPOSE. <br>* <br>* Copyright (C) 1997 Microsoft Corporation, All rights reserved <br>******************************************************************************** <br>\******************************************************************************/ <br> <br>import "oaidl.idl"; <br> <br>//--------------------------------------------------------------------- <br>//  RMRC: <br>//  Definition of the resource manager return code type. <br>//--------------------------------------------------------------------- <br> <br>typedef enum  tagRMSTATUS <br>{ <br>RM_STATUS_SUCCESS, <br>RM_STATUS_FAILURE, <br>RM_STATUS_UNDO_ERROR, <br>RM_STATUS_LOG_ERROR, <br>RM_STATUS_COPY_FAILURE, <br>RM_STATUS_DELETE_FAILURE, <br>RM_STATUS_RENAME_FAILURE, <br>RM_STATUS_MOVE_FAILURE, <br>RM_STATUS_IN_MEMORY_LIST, <br>RM_STATUS_OVERWRITE_EXISTING, <br>RM_STATUS_FILE_NOT_FOUND, <br>RM_STATUS_INTERFACE, <br>RM_STATUS_NO_MEMORY, <br>RM_STATUS_INVALID_PARM, <br>RM_STATUS_IMPORT_ERROR, <br>RM_STATUS_ENLIST_ERROR, <br>RM_STATUS_INVALID_STATE, <br>RM_STATUS_TM_DOWN, <br>RM_STATUS_RECOVERY_FAILURE <br>} RMSTATUS; <br> <br>//--------------------------------------------------------------------- <br>// RECOVERYRC: <br>// Return codes for recovery functions. <br>//--------------------------------------------------------------------- <br> <br>typedef enum tagRECOVERYRC <br>{ <br>REC_S_SUCCESS, <br>REC_E_NO_MEMORY, <br>REC_E_ORPHANED_TRANSACTION, <br>REC_E_INVALID_STATE, <br>REC_E_PREPARE_SEQUENCE, <br>REC_E_UNDO_SEQUENCE, <br>REC_E_END_TRANSACTION_SEQUENCE, <br>REC_E_FORGET_SEQUENCE, <br>REC_E_BEGINUNDO_SEQUENCE, <br>REC_E_ENDUNDO_SEQUENCE, <br>REC_E_COMMIT_SEQUENCE, <br>REC_E_TRANSACTION_DUPLICATED, <br>REC_E_INVALID_LOG_RECORD, <br>REC_E_LOG_FAILURE, <br>REC_E_STATE_UNKNOWN, <br>REC_E_UNDO_INCOMPLETE, <br>REC_E_INDOUBT_INVALID, <br>REC_E_REENLIST, <br>REC_E_TM_DOWN, <br>REC_E_OUTCOMEACTION <br>} RECOVERYRC; <br> <br> <br>//--------------------------------------------------------------------- <br>// RECOVERY_STATE: <br>// State of a recovering transaction. <br>//--------------------------------------------------------------------- <br> <br>typedef enum tagRECOVERY_STATE <br>{ <br>REC_STATE_ACTIVE, <br>REC_STATE_COMPLETED, <br>REC_STATE_DORMANT, <br>REC_STATE_INDOUBT, <br>REC_STATE_ABORTING <br>} RECOVERY_STATE; <br> <br>//--------------------------------------------------------------------- <br>// TXSTATE: <br>// Definition of Resource Manager states. <br>// NB:  The Resource Manager only processes one transaction at a time. <br>//      After initialization the Resource Manager states reflect the  <br>//      transaction states. <br>// <br> <br>typedef enum <br>{ <br>TX_UNINITIALIZED, <br>TX_INITIALIZING, <br>TX_INITIALIZED, <br>TX_ENLISTING, <br>TX_ENLISTED, <br>TX_PREPARING, <br>TX_PREPARED, <br>TX_COMMITTING, <br>TX_COMMITTED, <br>TX_ABORTING, <br>TX_ABORTED, <br>TX_DONE, <br>TX_TMDOWN, <br>TX_INVALID_STATE <br>} TXSTATE; <br> <br>typedef enum <br>{ <br>RM_COPY, <br>RM_DELETE, <br>RM_MOVE, <br>RM_RENAME, <br>RM_UNDO,  <br>RM_NONE, <br>RM_FORGET, <br>RM_UNDO_BEGIN, <br>RM_UNDO_END <br> <br>} FILE_OPERATION; <br> <br> <br>[ <br> <br>object, <br>uuid(FC005CE6-3F0B-11D0-9693-00AA00C149A6), <br>helpstring("IRmWorker Interface"), <br>pointer_default(unique) <br>] <br>interface IRmWorker : IUnknown <br>{ <br> <br>[helpstring("copy a file")] <br>HRESULT FileCopyTx([in] BSTR sSource, [in] BSTR sDestination, BOOL bFailIfExists); <br> <br>[helpstring("rename a file")] <br>HRESULT FileRenameTx([in] BSTR sSource, [in] BSTR sDestination); <br> <br>[helpstring("add a file to copy")] <br>HRESULT AddFile([in] BSTR sSource, [in] BSTR sDestination); <br> <br>[helpstring("copy the list of files")] <br>HRESULT CopyListTx(); <br> <br> <br>[helpstring("Move a file")] <br>HRESULT FileMoveTxt([in] BSTR sSource, [in] BSTR sDestination); <br> <br>[helpstring("delete a file")] <br>HRESULT FileDeleteTx([in] BSTR sFileName); <br> <br>[helpstring("Exports the Tx")] <br>HRESULT ExportTx([in] ULONG cbTranCookie, [out]BYTE *rgbTranCookie); <br> <br>[helpstring("Initializes the Worker")] <br>HRESULT Init([in] IUnknown * pUnkLog, [in] IUnknown * pUnkDtcResMgr, [in]IUnknown *pUnkDtc, [in] BSTR sRecDir); <br> <br>[helpstring("Returns the Tx ID as a GUID converted to a string")] <br>HRESULT GetTransactionId([out] BSTR * guidTx); <br> <br>[helpstring("Recovers any transactions that need it")] <br>HRESULT Recover(IStorage * pStorage); <br> <br>[helpstring("Resets a completed transaction to a resusable state")] <br>HRESULT Reset(); <br> <br>[helpstring("called by CopyFileRm when the TM goes down and the worker was not enlisted")] <br>HRESULT TMDown(); <br> <br> <br> <br>}; <br> <br> <br>[ <br> <br>object, <br>uuid(FC005CE2-3F0B-11D0-9693-00AA00C149A6), <br>helpstring("IRmWorkerPriv Interface"), <br>pointer_default(unique) <br>] <br>interface IRmWorkerPriv : IUnknown <br>{ <br>import "oaidl.idl"; <br>HRESULTPrepareTx (void); <br>HRESULTCommitTx (void); <br>HRESULTAbortTx (void); <br>HRESULT GetState([out] TXSTATE *eState); <br>HRESULTSetState([in]  TXSTATE eState); <br>HRESULTCleanupTx (void); <br>HRESULT GetDTCUnknown([out] IUnknown ** pUnk); <br>}; <br> <br> <br>[ <br>uuid(FC005CE3-3F0B-11D0-9693-00AA00C149A6), <br>version(1.0), <br>helpstring("RmWorker 1.0 Type Library") <br>] <br>library RMWORKERLib <br>{ <br>importlib("stdole2.tlb"); <br> <br> <br> <br>[ <br>uuid(FC005CE5-3F0B-11D0-9693-00AA00C149A6), <br>helpstring("RmWorker Class") <br>] <br>coclass CRmWorkerObj <br>{ <br>[default] interface IRmWorker; <br>interface IRmWorkerPriv; <br>}; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

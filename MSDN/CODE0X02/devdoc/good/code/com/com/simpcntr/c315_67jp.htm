<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOIPS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context325"></a>IOIPS.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IOIPS.CPP <br>// <br>//      Implementation file for COleInPlaceSite <br>// <br>// Functions: <br>// <br>//      See IOIPS.H for class Definition <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "iocs.h" <br>#include "ias.h" <br>#include "ioipf.h" <br>#include "ioips.h" <br>#include "app.h" <br>#include "site.h" <br>#include "doc.h" <br> <br>//********************************************************************** <br>// <br>// CSimpleSite::COleInPlaceSite::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Used for interface negotiation at the interface level. <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   A reference to the interface that is <br>//                              being queried. <br>// <br>//      LPVOID FAR* ppvObj  -   An out parameter to return a pointer to <br>//                              the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK    -   The interface is supported. <br>//      S_FALSE -   The interface is not supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleSite::QueryInterface SITE.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In IOIPS::QueryInterface\r\n"); <br>        CStabilize stabilize(m_pSite); <br> <br>        // delegate to the container Site <br>        return m_pSite-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleSite::COleInPlaceSite::AddRef <br>// <br>// Purpose: <br>// <br>//      Adds to the reference count at the interface level. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceSite::AddRef() <br>{ <br>        OutputDebugString("In IOIPS::AddRef\r\n"); <br> <br>        // increment the interface reference count (for debugging only) <br>        ++m_nCount; <br> <br>        // delegate to the container Site <br>        return m_pSite-&gt;AddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleSite::COleInPlaceSite::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count at this level <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleSite::Release        SITE.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceSite::Release() <br>{ <br>        OutputDebugString("In IOIPS::Release\r\n"); <br>        // decrement the interface reference count (for debugging only) <br>        m_nCount--; <br> <br>        // delegate to the container Site <br>        return m_pSite-&gt;Release(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::GetWindow <br>// <br>// Purpose: <br>// <br>//      Returns the Window Handle of the client site <br>// <br>// Parameters: <br>// <br>//      HWND FAR* lphwnd    - place to return the handle <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::GetWindow (HWND FAR* lphwnd) <br>{ <br>        OutputDebugString("In IOIPS::GetWindow\r\n"); <br>        CStabilize stabilize(m_pSite); <br> <br>        // return the handle to our editing window. <br>        *lphwnd = m_pSite-&gt;m_lpDoc-&gt;m_hDocWnd; <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::ContextSensitiveHelp <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      BOOL fEnterMode - TRUE for entering Context Sensitive help mode <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//      Be sure to read the technotes included with the OLE toolkit. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::ContextSensitiveHelp (BOOL fEnterMode) <br>{ <br>        OutputDebugString("In IOIPS::ContextSensitiveHelp\r\n"); <br> <br>        if (m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;m_fCSHMode != fEnterMode) <br>                m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;m_fCSHMode = fEnterMode; <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::CanInPlaceActivate <br>// <br>// Purpose: <br>// <br>//      Object calls to find out if the container can InPlace activate <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::CanInPlaceActivate () <br>{ <br>        OutputDebugString("In IOIPS::CanInPlaceActivate\r\n"); <br> <br>        // return S_OK to indicate we can in-place activate <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::OnInPlaceActivate <br>// <br>// Purpose: <br>// <br>//      Called by the object on InPlace Activation <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::OnInPlaceActivate () <br>{ <br>        HRESULT hrErr; <br>        OutputDebugString("In IOIPS::OnInPlaceActivate\r\n"); <br>        CStabilize stabilize(m_pSite); <br> <br>        hrErr = m_pSite-&gt;m_lpOleObject-&gt;QueryInterface( <br>                        IID_IOleInPlaceObject, (LPVOID FAR *)&amp;m_pSite-&gt;m_lpInPlaceObject); <br>        if (hrErr != NOERROR) <br>                return E_FAIL; <br> <br>        // return S_OK to indicate we can in-place activate. <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::OnUIActivate <br>// <br>// Purpose: <br>// <br>//      Object calls this method when it displays it's UI. <br>// <br>// Parameters: <br>// <br>//      None. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::OnUIActivate () <br>{ <br>        OutputDebugString("In IOIPS::OnUIActivate\r\n"); <br> <br>        m_pSite-&gt;m_lpDoc-&gt;m_fAddMyUI=FALSE; <br>        m_pSite-&gt;m_lpDoc-&gt;m_fInPlaceActive = TRUE; <br>        m_pSite-&gt;m_fInPlaceActive = TRUE; <br> <br>        m_pSite-&gt;m_lpInPlaceObject-&gt;GetWindow((HWND FAR*)&amp;m_pSite-&gt;m_hwndIPObj); <br> <br>        // return S_OK to continue in-place activation <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::GetWindowContext <br>// <br>// Purpose: <br>// <br>//      Called by the object to get information for InPlace Negotiation. <br>// <br>// Parameters: <br>// <br>//      LPOLEINPLACEFRAME FAR* lplpFrame    - Location to return a pointer <br>//                                            to IOleInPlaceFrame. <br>// <br>//      LPOLEINPLACEUIWINDOW FAR* lplpDoc   - Location to return a pointer <br>//                                            to IOleInPlaceUIWindow. <br>// <br>//      LPRECT lprcPosRect                  - The rect that the object <br>//                                            occupies <br>// <br>//      LPRECT lprcClipRect                 - The clipping rect <br>// <br>//      LPOLEINPLACEFRAMEINFO lpFrameInfo   - Pointer to FRAMEINFO <br>// <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      COleInPlaceFrame::AddRef    IOIPF.CPP <br>//      CSimpleSite::GetObjRect     SITE.CPP <br>//      OutputDebugString           Windows API <br>//      SetMapMode                  Windows API <br>//      GetDC                       Windows API <br>//      ReleaseDC                   Windows API <br>//      CopyRect                    Windows API <br>//      GetClientRect               Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::GetWindowContext (LPOLEINPLACEFRAME FAR* lplpFrame, <br>                                                           LPOLEINPLACEUIWINDOW FAR* lplpDoc, <br>                                                           LPRECT lprcPosRect, <br>                                                           LPRECT lprcClipRect, <br>                                                           LPOLEINPLACEFRAMEINFO lpFrameInfo) <br>{ <br>        RECT rect; <br>        CStabilize stabilize(m_pSite); <br> <br>        OutputDebugString("In IOIPS::GetWindowContext\r\n"); <br> <br>        // the frame is associated with the application object. <br>        // need to AddRef() it... <br>        m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;m_OleInPlaceFrame.AddRef(); <br>        *lplpFrame = &amp;m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;m_OleInPlaceFrame; <br>        *lplpDoc = NULL;  // must be NULL, cause we're SDI. <br> <br>        // get the size of the object in pixels <br>        m_pSite-&gt;GetObjRect(&amp;rect); <br> <br>        // Copy this to the passed buffer <br>        CopyRect(lprcPosRect, &amp;rect); <br> <br>        // fill the clipping region <br>        GetClientRect(m_pSite-&gt;m_lpDoc-&gt;m_hDocWnd, &amp;rect); <br>        CopyRect(lprcClipRect, &amp;rect); <br> <br>        // fill the FRAMEINFO <br>        lpFrameInfo-&gt;fMDIApp = FALSE; <br>        lpFrameInfo-&gt;hwndFrame = m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;m_hAppWnd; <br>        lpFrameInfo-&gt;haccel = NULL; <br>        lpFrameInfo-&gt;cAccelEntries = 0; <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::Scroll <br>// <br>// Purpose: <br>// <br>//      Not Implemented <br>// <br>// Parameters: <br>// <br>//      Not Implemented <br>// <br>// Return Value: <br>// <br>//      Not Implemented <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Not Implemented <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::Scroll (SIZE scrollExtent) <br>{ <br>        OutputDebugString("In IOIPS::Scroll\r\n"); <br>        return E_FAIL; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::OnUIDeactivate <br>// <br>// Purpose: <br>// <br>//      Called by the object when its UI goes away <br>// <br>// Parameters: <br>// <br>//       BOOL fUndoable <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleAPP::AddFrameLevelUI APP.CPP <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::OnUIDeactivate (BOOL fUndoable) <br>{ <br>        OutputDebugString("In IOIPS::OnUIDeactivate\r\n"); <br>        CStabilize stabilize(m_pSite); <br> <br>        // need to clear this flag first <br>        m_pSite-&gt;m_lpDoc-&gt;m_fInPlaceActive = FALSE; <br>        m_pSite-&gt;m_fInPlaceActive = FALSE; <br> <br>        m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;QueryNewPalette(); <br>        m_pSite-&gt;m_lpDoc-&gt;m_lpApp-&gt;AddFrameLevelUI(); <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::OnInPlaceDeactivate <br>// <br>// Purpose: <br>// <br>//      Called when the inplace session is over <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::OnInPlaceDeactivate () <br>{ <br>        OutputDebugString("In IOIPS::OnInPlaceDeactivate\r\n"); <br> <br>        if (m_pSite-&gt;m_lpInPlaceObject) { <br>                m_pSite-&gt;m_lpInPlaceObject-&gt;Release(); <br>                m_pSite-&gt;m_lpInPlaceObject = NULL; <br>        } <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::DiscardUndoState <br>// <br>// Purpose: <br>// <br>//      Not Implemented <br>// <br>// Parameters: <br>// <br>//      Not Implemented <br>// <br>// Return Value: <br>// <br>//      Not Implemented <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Not Implemented <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::DiscardUndoState () <br>{ <br>        OutputDebugString("In IOIPS::DiscardUndoState\r\n"); <br>        return E_FAIL; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::DeactivateAndUndo <br>// <br>// Purpose: <br>// <br>//      Not Implemented <br>// <br>// Parameters: <br>// <br>//      Not Implemented <br>// <br>// Return Value: <br>// <br>//      Not Implemented <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Not Implemented <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::DeactivateAndUndo () <br>{ <br>        OutputDebugString("In IOIPS::DeactivateAndUndo\r\n"); <br>        return E_FAIL; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceSite::OnPosRectChange <br>// <br>// Purpose: <br>// <br>//      The object calls this method when it's size changes during an <br>//      InPlace Session <br>// <br>// Parameters: <br>// <br>//      LPCRECT lprcPosRect -   The new object rect <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      OutputDebugString                   Windows API <br>//      GetClientRect                       Windows API <br>//      IOleObject::GetExtent               Object <br>//      IOleObject::QueryInterface          Object <br>//      IOleInPlaceObject::SetObjectRects   Object <br>//      IOleInPlaceObject::Release          Object <br>//                           OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceSite::OnPosRectChange (LPCRECT lprcPosRect) <br>{ <br>        OutputDebugString("In IOIPS::OnPosRectChange\r\n"); <br>        CStabilize stabilize(m_pSite); <br> <br>        // update the size in the document object <br>        // NOTE: here we must call IOleObject::GetExtent to get actual extents <br>        //       of the running object. IViewObject2::GetExtent returns the <br>        //       last cached extents. <br>        m_pSite-&gt;m_lpOleObject-&gt;GetExtent(DVASPECT_CONTENT, &amp;m_pSite-&gt;m_sizel); <br>        RECT rect; <br>        GetClientRect(m_pSite-&gt;m_lpDoc-&gt;m_hDocWnd, &amp;rect); <br> <br>        // tell the object its new size <br>        m_pSite-&gt;m_lpInPlaceObject-&gt;SetObjectRects(lprcPosRect, &amp;rect); <br> <br>        return S_OK; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

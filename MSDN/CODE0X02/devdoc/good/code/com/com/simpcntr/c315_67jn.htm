<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOIPF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context323"></a>IOIPF.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IOIPF.CPP <br>// <br>//      Implementation file for COleInPlaceFrame <br>// <br>// Functions: <br>// <br>//      See IOIPF.H for class definition <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "iocs.h" <br>#include "ias.h" <br>#include "ioipf.h" <br>#include "ioips.h" <br>#include "app.h" <br>#include "site.h" <br>#include "doc.h" <br> <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Used for interface negotiation at the Interface level. <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   A reference to the interface that is <br>//                              being queried. <br>// <br>//      LPVOID FAR* ppvObj  -   An out parameter to return a pointer to <br>//                              the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK    -   The interface is supported. <br>//      S_FALSE -   The interface is not supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleApp::QueryInterface  APP.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In IOIPF::QueryInterface\r\n"); <br> <br>// delegate to the document Object <br>        return m_pApp-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::AddRef <br>// <br>// Purpose: <br>// <br>//      Adds to the reference count at the interface level. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceFrame::AddRef() <br>{ <br>        OutputDebugString("In IOIPF::AddRef\r\n"); <br> <br>// delegate to the document Object <br>        m_pApp-&gt;AddRef(); <br>// increment the interface reference count <br>        return ++m_nCount; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count at this level <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleApp::Release         APP.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceFrame::Release() <br>{ <br>        OutputDebugString("In IOIPF::Release\r\n"); <br> <br>// delegate to the document object <br>        m_pApp-&gt;Release(); <br> <br>// decrement the interface reference count <br>        return --m_nCount; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::GetWindow <br>// <br>// Purpose: <br>// <br>//      Returns the frame window handle <br>// <br>// Parameters: <br>// <br>//      HWND FAR* lphwnd    - Location to return the window handle <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::GetWindow (HWND FAR* lphwnd) <br>{ <br>        OutputDebugString("In IOIPF::GetWindow\r\n"); <br>        CStabilize stabilize(m_pApp); <br>        *lphwnd = m_pApp-&gt;m_hAppWnd; <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::ContextSensitiveHelp <br>// <br>// Purpose: <br>// <br>//      Used in implementing Context sensitive help <br>// <br>// Parameters: <br>// <br>//      BOOL fEnterMode -   TRUE if starting Context Sensitive help mode <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//      Be sure to read the technotes in the OLE toolkit. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::ContextSensitiveHelp (BOOL fEnterMode) <br>{ <br>        OutputDebugString("In IOIPF::ContextSensitiveHelp\r\n"); <br>        CStabilize stabilize(m_pApp); <br> <br>        m_pApp-&gt;m_fMenuMode = fEnterMode; <br> <br>        return S_OK; <br>} <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::GetBorder <br>// <br>// Purpose: <br>// <br>//      Returns the outermost border that frame adornments can be attached <br>//      during InPlace Activation. <br>// <br>// Parameters: <br>// <br>//      LPRECT lprectBorder - return parameter to contain the outermost <br>//                            rect for frame adornments <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      GetClientRect               Windows API <br>//      CopyRect                    Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::GetBorder (LPRECT lprectBorder) <br>{ <br>        RECT rect; <br> <br>        OutputDebugString("In IOIPF::GetBorder\r\n"); <br> <br>        // get the rect for the entire frame. <br>        GetClientRect(m_pApp-&gt;m_hAppWnd, &amp;rect); <br> <br>        CopyRect(lprectBorder, &amp;rect); <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::RequestBorderSpace <br>// <br>// Purpose: <br>// <br>//      Approves/Denies requests for border space during InPlace <br>//      negotiation. <br>// <br>// Parameters: <br>// <br>//      LPCBORDERWIDTHS lpborderwidths  - The width in pixels needed on <br>//                                        each side of the frame. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//      This implementation doesn't care about how much border space <br>//      is used.  It always returns S_OK. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::RequestBorderSpace (LPCBORDERWIDTHS lpborderwidths) <br>{ <br>        OutputDebugString("In IOIPF::RequestBorderSpace\r\n"); <br> <br>        // always approve the request <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::SetBorderSpace <br>// <br>// Purpose: <br>// <br>//      The object calls this method when it is actually going to <br>//      start using the border space. <br>// <br>// Parameters: <br>// <br>//      LPCBORDERWIDTHS lpborderwidths  - Border space actually being used <br>//                                        by the object <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      CSimpleApp::AddFrameLevelTools  APP.CPP <br>//      OutputDebugString               Windows API <br>//      GetClientRect                   Windows API <br>//      MoveWindow                      Windows API <br>//                       Windows API <br>// <br>// Comments: <br>// <br>//      This routine could be a little smarter and check to see if <br>//      the object is requesting the entire client area of the <br>//      window. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::SetBorderSpace (LPCBORDERWIDTHS lpborderwidths) <br>{ <br> <br>        OutputDebugString("In IOIPF::SetBorderSpace\r\n"); <br>        CStabilize stabilize(m_pApp); <br> <br>        if (lpborderwidths == NULL) <br>                m_pApp-&gt;AddFrameLevelTools(); <br>        else <br>                { <br>                RECT rect; <br> <br>                GetClientRect(m_pApp-&gt;m_hAppWnd, &amp;rect); <br> <br>                MoveWindow( m_pApp-&gt;m_lpDoc-&gt;m_hDocWnd, <br>                                        rect.left + lpborderwidths-&gt;left, <br>                                        rect.top + lpborderwidths-&gt;top, <br>                                        rect.right - lpborderwidths-&gt;right - lpborderwidths-&gt;left, <br>                                        rect.bottom - lpborderwidths-&gt;bottom - lpborderwidths-&gt;top, <br>                                        TRUE); <br>                } <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::SetActiveObject <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      LPOLEINPLACEACTIVEOBJECT lpActiveObject     -   Pointer to the <br>//                                                      objects <br>//                                                      IOleInPlaceActiveObject <br>//                                                      interface <br>// <br>//@@WTK WIN32, UNICODE <br>//      //LPCSTR lpszObjName                          -   Name of the object <br>//      LPCOLESTR lpszObjName                          -   Name of the object <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      OutputDebugString                   Windows API <br>//      IOleInPlaceActiveObject::AddRef     Object <br>//      IOleInPlaceActiveObject::Release    Object <br>//                           OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//STDMETHODIMP COleInPlaceFrame::SetActiveObject (LPOLEINPLACEACTIVEOBJECT lpActiveObject,LPCSTR lpszObjName) <br>STDMETHODIMP COleInPlaceFrame::SetActiveObject ( <br>LPOLEINPLACEACTIVEOBJECT lpActiveObject, <br>LPCOLESTR lpszObjName) <br>{ <br> <br>        OutputDebugString("In IOIPF::SetActiveObject\r\n"); <br>        CStabilize stabilize(m_pApp); <br> <br>        // AddRef() it and save it... <br>        if (lpActiveObject) <br>                { <br>                lpActiveObject-&gt;AddRef(); <br> <br>                lpActiveObject-&gt;GetWindow(&amp;m_pApp-&gt;m_hwndUIActiveObj); <br>                if (m_pApp-&gt;m_hwndUIActiveObj) <br>                        SendMessage(m_pApp-&gt;m_hwndUIActiveObj, WM_QUERYNEWPALETTE, 0, 0L); <br>                } <br>        else <br>                { <br>                if (m_pApp-&gt;m_lpDoc-&gt;m_lpActiveObject) <br>                        m_pApp-&gt;m_lpDoc-&gt;m_lpActiveObject-&gt;Release(); <br>                m_pApp-&gt;m_hwndUIActiveObj = NULL; <br>                } <br> <br>        // in an MDI app, this method really shouldn't be called, <br>        // this method associated with the doc is called instead. <br> <br>        m_pApp-&gt;m_lpDoc-&gt;m_lpActiveObject = lpActiveObject; <br>        // should set window title here <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::InsertMenus <br>// <br>// Purpose: <br>// <br>//      Inserts the container menu into the combined menu <br>// <br>// Parameters: <br>// <br>//      HMENU hmenuShared                   -   Menu Handle to be set. <br>//      LPOLEMENUGROUPWIDTHS lpMenuWidths   -   Width of menus <br>// <br>// Return Value: <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      AppendMenu                  Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::InsertMenus (HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths) <br>{ <br>        OutputDebugString("In IOIPF::InsertMenus\r\n"); <br>        CStabilize stabilize(m_pApp); <br> <br>  //@@WTK WIN32, UNICODE <br>        //AppendMenu(hmenuShared, MF_BYPOSITION | MF_POPUP, m_pApp-&gt;m_hFileMenu, "&amp;File"); <br>        //AppendMenu(hmenuShared, MF_BYPOSITION | MF_POPUP, m_pApp-&gt;m_hHelpMenu, "&amp;Other"); <br>        AppendMenu(hmenuShared, MF_BYPOSITION | MF_POPUP, (UINT)m_pApp-&gt;m_hFileMenu, "&amp;File"); <br>        AppendMenu(hmenuShared, MF_BYPOSITION | MF_POPUP, (UINT)m_pApp-&gt;m_hHelpMenu, "&amp;Other"); <br> <br>        lpMenuWidths-&gt;width[0] = 1; <br>        lpMenuWidths-&gt;width[2] = 0; <br>        lpMenuWidths-&gt;width[4] = 1; <br> <br>        return S_OK; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::SetMenu <br>// <br>// Purpose: <br>// <br>//      Sets the application menu to the combined menu <br>// <br>// Parameters: <br>// <br>//      HMENU hmenuShared       - The combined menu <br>// <br>//      HOLEMENU holemenu       - Used by OLE <br>// <br>//      HWND hwndActiveObject   - Used by OLE <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      SetMenu                     Windows API <br>//      OleSetMenuDescriptor        OLE API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::SetMenu (HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject) <br>{ <br> <br>        OutputDebugString("In IOIPF::SetMenu\r\n"); <br>        CStabilize stabilize(m_pApp); <br> <br>        HMENU hMenu = m_pApp-&gt;m_hMainMenu; <br> <br>        if (holemenu) <br>                hMenu = hmenuShared; <br> <br>        // call the windows api, not this method <br>        ::SetMenu (m_pApp-&gt;m_hAppWnd, hMenu); <br> <br>        OleSetMenuDescriptor(holemenu, m_pApp-&gt;m_hAppWnd, hwndActiveObject, this, m_pApp-&gt;m_lpDoc-&gt;m_lpActiveObject); <br> <br>        return S_OK; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::RemoveMenus <br>// <br>// Purpose: <br>// <br>//      Removes the container menus from the combined menu <br>// <br>// Parameters: <br>// <br>//      HMENU hmenuShared   - Handle to the combined menu. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      GetMenuItemCount            Windows API <br>//      RemoveMenu                  Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::RemoveMenus (HMENU hmenuShared) <br>{ <br>        int retval; <br> <br>        OutputDebugString("In IOIPF::RemoveMenus\r\n"); <br> <br>        while ((retval = GetMenuItemCount(hmenuShared)) &amp;&amp; (retval != -1)) <br>                RemoveMenu(hmenuShared, 0, MF_BYPOSITION); <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::SetStatusText <br>// <br>// Purpose: <br>// <br>//      Not Implemented <br>// <br>// Parameters: <br>// <br>//      Not Implemented <br>// <br>// Return Value: <br>// <br>//      Not Implemented <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This function is not implemented due to the fact <br>//      that this application does not have a status bar. <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//STDMETHODIMP COleInPlaceFrame::SetStatusText (LPCSTR lpszStatusText) <br>STDMETHODIMP COleInPlaceFrame::SetStatusText (LPCOLESTR lpszStatusText) <br>{ <br>        OutputDebugString("In IOIPF::SetStatusText\r\n"); <br>        return E_FAIL; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::EnableModeless <br>// <br>// Purpose: <br>// <br>//      Enables/Disables container modeless dialogs <br>// <br>// Parameters: <br>// <br>//      BOOL fEnable    - Enable/Disable <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      There are no modeless dialogs in this application, so the <br>//      implementation of this method is trivial. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::EnableModeless (BOOL fEnable) <br>{ <br>        OutputDebugString("In IOIPF::EnableModeless\r\n"); <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceFrame::TranslateAccelerator <br>// <br>// Purpose: <br>// <br>//      Not Implemented <br>// <br>// Parameters: <br>// <br>//      Not Implemented <br>// <br>// Return Value: <br>// <br>//      Not Implemented <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Not Implemented <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceFrame::TranslateAccelerator (LPMSG lpmsg, WORD wID) <br>{ <br>        OutputDebugString("In IOIPF::TranslateAccelerator\r\n"); <br>        return S_FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

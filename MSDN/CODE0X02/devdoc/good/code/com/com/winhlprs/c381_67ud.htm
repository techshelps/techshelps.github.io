<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STRMHELP.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context385"></a>STRMHELP.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       strmhelp.cxx <br>// <br>//  Contents:   Routines for writting variables to a stream in an <br>//              architecture independent manner. <br>// <br>//  Classes: <br>// <br>//  Functions:  WriteDouble <br>//              ReadDouble <br>//              SizeDouble <br>// <br>//  History:    4-26-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include "strmhelp.h" <br>#include &lt;stdio.h&gt; <br> <br>#define MAX_SIZE 128 <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   SizeDouble <br>// <br>//  Synopsis:   returns the maximum number of bytes that WriteDouble will <br>//              take to write a double to an IStream <br>// <br>//  Arguments:  none <br>// <br>//  Returns:    maximum number of bytes needed to write a double to an IStream <br>// <br>//  History:    4-26-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>DWORD SizeDouble(void) <br>{ <br>    return(MAX_SIZE); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WriteDouble <br>// <br>//  Synopsis:   rrites a double to an OLE stream in a machine independent manner <br>// <br>//  Arguments:  [pstm]       - pointer to an IStream <br>//              [d]          - the double to be written <br>//              [pcbWritten] - pointer to the number of bytes actually written <br>//                             (may be NULL) <br>// <br>//  Returns:    same return values as IStream::Write <br>// <br>//  History:    4-26-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT WriteDouble(IStream * pstm, double d, ULONG FAR * pcbWritten) <br>{ <br>    char szTemp[MAX_SIZE]; <br>    sprintf(szTemp,"%.100lg", d); <br>    WORD cch = strlen(szTemp); <br>    return(pstm-&gt;Write(szTemp, cch + 1, pcbWritten)); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   ReadDouble <br>// <br>//  Synopsis:   reads a double from an OLE stream in a machine independent <br>//              manner <br>// <br>//  Arguments:  [pstm]    - pointer to an IStream <br>//              [pd]      - pointer to the double to be read <br>//              [pcbRead] - pointer to the number of bytes actually read <br>//                          (may be NULL) <br>// <br>//  Returns:    same return values as IStream::Read <br>// <br>//  History:    4-26-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT ReadDouble(IStream * pstm, double * pd, ULONG FAR * pcbRead) <br>{ <br>    HRESULT hr; <br>    char szTemp[MAX_SIZE]; <br>    ULONG cbRead; <br>    DWORD cch = 0; <br>    do <br>    { <br>        hr = pstm-&gt;Read(&amp;szTemp[cch], sizeof(char), &amp;cbRead); <br>        if (pcbRead &amp;&amp; SUCCEEDED(hr)) <br>        { <br>            pcbRead += cbRead; <br>        } <br> <br>    } while (SUCCEEDED(hr) &amp;&amp; szTemp[cch++]); <br>    if (SUCCEEDED(hr)) <br>    { <br>        sscanf(szTemp, "%lf",pd); <br>    } <br>    return(hr); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

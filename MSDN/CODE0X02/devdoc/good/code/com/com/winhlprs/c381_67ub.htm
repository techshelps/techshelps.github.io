<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CWINDOW.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context383"></a>CWINDOW.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       cwindow.cxx <br>// <br>//  Contents:   implementation for a window class <br>// <br>//  Classes:    CHlprWindow <br>// <br>//  Functions:  WindowProc <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include "cwindow.h" <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CHlprWindow::Create <br>// <br>//  Synopsis:   Special version of CreateWindow. <br>// <br>//  Arguments:  [lpszClassName]  - address of registered class name <br>//              [lpszWindowName] - address of window name <br>//              [dwStyle]        - window style <br>//              [x]              - horizontal position of window <br>//              [y]              - vertical position of window <br>//              [nWidth]         - window width <br>//              [nHeight]        - window height <br>//              [hwndParent]     - handle of parent or owner window <br>//              [hmenu]          - handle of menu, or child window identifier <br>//              [hinst]          - handle of application instance <br>// <br>//  Returns:    HWND of the created window <br>// <br>//  Modifies:   _hwnd, _hInstance <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//  Notes:      The window class must have been previously registered (as <br>//              is normal Windows procedure) and the callback function <br>//              must have been registered as ::WindowProc.  ::WindowProc will <br>//              then forward all messages on to the CHlprWindow::WindowProc <br>//              method, allowing the window to directly access class members <br>//              (i.e. giving the WindowProc access to the "this" pointer). <br>// <br>//---------------------------------------------------------------------------- <br> <br>HWND CHlprWindow::Create( <br>    LPCTSTR lpszClassName, <br>    LPCTSTR lpszWindowName, <br>    DWORD dwStyle, <br>    int x, <br>    int y, <br>    int nWidth, <br>    int nHeight, <br>    HWND hwndParent, <br>    HMENU hmenu, <br>    HINSTANCE hinst) <br>{ <br>    _hInstance = hinst; <br>    return(_hwnd = <br>        CreateWindow( <br>            lpszClassName, <br>            lpszWindowName, <br>            dwStyle, <br>            x, <br>            y, <br>            nWidth, <br>            nHeight, <br>            hwndParent, <br>            hmenu, <br>            hinst, <br>            this)); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WindowProc <br>// <br>//  Synopsis:   Standard WindowProc that forwards Windows messages on to the <br>//              CHlprWindow::WindowProc method. <br>// <br>//  Arguments:  [hwnd]   - window handle <br>//              [uMsg]   - message <br>//              [wParam] - first message parameter <br>//              [lParam] - second message parameter <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//  Notes:      This Window procedure expects that it will receive a "this" <br>//              pointer as the lpCreateParams member passed as part of the <br>//              WM_CREATE message.  It saves the "this" pointer in the <br>//              GWL_USERDATA field of the window structure. <br>// <br>//---------------------------------------------------------------------------- <br> <br>LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>    CHlprWindow * pw; <br>    switch (uMsg) <br>    { <br>    case WM_CREATE: <br>        // Since this is the first time that we can get ahold of <br>        // a pointer to the window class object, all messages that might <br>        // have been sent before this are never seen by the Windows object <br>        // and only get passed on to te DefWindowProc <br> <br>        // get a pointer to the window class object <br>        pw = (CHlprWindow *) ((CREATESTRUCT *)lParam)-&gt;lpCreateParams; <br>        // set its USERDATA DWORD to point to the class object <br>        SetWindowLong(hwnd, GWL_USERDATA, (long) pw); <br>        // Set it's protected _hwnd member variable to ensure that <br>        // member functions have access to the correct window handle. <br>        pw-&gt;_hwnd = hwnd; <br>        break; <br>    case WM_DESTROY: <br>        // This is our signal to destroy the window class object. <br> <br>        pw = (CHlprWindow *) GetWindowLong(hwnd, GWL_USERDATA); <br>        SetWindowLong(hwnd, GWL_USERDATA, 0); <br>        delete pw; <br>        pw = (CHlprWindow *) 0; <br>        break; <br>    default: <br>        // get a pointer to the window class object <br>        pw = (CHlprWindow *) GetWindowLong(hwnd, GWL_USERDATA); <br>        break; <br>    } <br>    // and call its message proc method <br>    if (pw != (CHlprWindow *) 0) <br>    { <br>        return(pw-&gt;WindowProc(uMsg, wParam, lParam)); <br>    } <br>    else <br>    { <br>        return(DefWindowProc(hwnd, uMsg, wParam, lParam)); <br>    } <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDIALOG.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context381"></a>CDIALOG.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       dialog.cxx <br>// <br>//  Contents: <br>// <br>//  Classes:    CHlprDialog <br>// <br>//  Functions:  DialogProc <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include "cdialog.h" <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CHlprDialog::ShowDialog <br>// <br>//  Synopsis:   Creates the dialog so that it's DialogProc member function can <br>//              be invoked. <br>// <br>//  Arguments:  [hinst]        - handle of the application instance <br>//              [lpszTemplate] - identifies the dialog box template <br>//              [hwndOwner]    - handle of the owner window <br>// <br>//  Returns:    return value from the dialog box <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//  Notes:      The dialog box object exists until deleted by the caller. <br>//              It can be shown any number of times. <br>// <br>//              This function is analgous to Windows' DialogBox function.  The <br>//              main difference being that you don't specify a DialogProc; <br>//              you override the pure virtal function CHlprDialog::DialogProc. <br>// <br>//---------------------------------------------------------------------------- <br> <br>int CHlprDialog::ShowDialog(HINSTANCE hinst, LPCTSTR lpszTemplate, HWND hwndOwner) <br>{ <br>    _hInstance = hinst; <br>    return(DialogBoxParam(hinst, lpszTemplate, hwndOwner, (DLGPROC)::DialogProc, (long)this)); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   DialogProc <br>// <br>//  Synopsis:   Common DialogProc used by all CHlprDialog class objects. <br>// <br>//  Arguments:  [hwndDlg] - handle of dialog box <br>//              [uMsg]    - message <br>//              [wParam]  - first message parameter <br>//              [lParam]  - second message parameter <br>// <br>//  Returns:    response from the CHlprDialog::DialogProc method <br>// <br>//  History:    4-12-94   stevebl   Created <br>// <br>//  Notes:      This procedure is the DialogProc registered for all dialogs <br>//              created with the CHlprDialog class.  It uses the parameter <br>//              passed with the WM_INITDIALOG message to identify the dialog <br>//              classes' "this" pointer which it then stores in the window <br>//              structure's GWL_USERDATA field.  All subsequent messages <br>//              can then be forwarded on to the correct dialog class's <br>//              DialogProc method by using the pointer stored in the <br>//              GWL_USERDATA field. <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL CALLBACK DialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>    CHlprDialog * pdlg; <br>    switch (uMsg) <br>    { <br>    case WM_INITDIALOG: <br>        // This message is how we identify the dialog object. <br> <br>        // get a pointer to the window class object  <br>        pdlg = (CHlprDialog *) lParam; <br>        // set its USERDATA word to point to the class object <br>        SetWindowLong(hwndDlg, GWL_USERDATA, (long) pdlg); <br>        break; <br>    default: <br>        // get a pointer to the window class object <br>        pdlg = (CHlprDialog *) GetWindowLong(hwndDlg, GWL_USERDATA); <br>        break; <br>    } <br>    // and call its message proc method <br>    if (pdlg != (CHlprDialog *) 0) <br>    { <br>        return(pdlg-&gt;DialogProc(hwndDlg, uMsg, wParam, lParam)); <br>    } <br>    else <br>    { <br>        return(FALSE); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

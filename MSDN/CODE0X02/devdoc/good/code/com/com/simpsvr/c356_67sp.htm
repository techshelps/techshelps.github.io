<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPSVR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context379"></a>SIMPSVR.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: simpsvr.cpp <br>// <br>//      Main source file for the simple OLE 2.0 server <br>// <br>// Functions: <br>// <br>//      WinMain         - Program entry point <br>//      MainWndProc     - Processes messages for the frame window <br>//      About           - Processes messages for the about dialog <br>//      DocWndProc      - Processes messages for the doc window <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "app.h" <br>#include "doc.h" <br>#include "icf.h" <br> <br>// This line is needed for the debug utilities in OLESTD <br>extern "C" { <br>        OLEDBGDATA_MAIN("SIMPSVR") <br>} <br> <br>CSimpSvrApp FAR * lpCSimpSvrApp; <br>CClassFactory FAR * lpClassFactory; <br> <br>//********************************************************************** <br>// <br>// WinMain <br>// <br>// Purpose: <br>// <br>//      Program entry point <br>// <br>// Parameters: <br>// <br>//      HANDLE hInstance        - Instance handle for this instance <br>// <br>//      HANDLE hPrevInstance    - Instance handle for the last instance <br>// <br>//      LPSTR lpCmdLine         - Pointer to the command line <br>// <br>//      int nCmdShow            - Window State <br>// <br>// Return Value: <br>// <br>//      msg.wParam <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      CSimpSvrApp::CSimpSvrApp          APP.CPP <br>//      CSimpSvrApp::fInitApplication    APP.CPP <br>//      CSimpSvrApp::fInitInstance       APP.CPP <br>//      CSimpSvrApp::HandleAccelerators  APP.CPP <br>//      CSimpSvrApp::~CSimpSvrApp         APP.CPP <br>//      GetMessage                      Windows API <br>//      TranslateMessage                Windows API <br>//      DispatchMessage                 Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>int PASCAL WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nCmdShow) <br> <br>{ <br>        MSG msg; <br> <br>        // recommended size for OLE apps <br>        SetMessageQueue(96); <br> <br>        lpCSimpSvrApp = new CSimpSvrApp; <br> <br>        lpCSimpSvrApp-&gt;AddRef();      // need the app ref. count at 1 to hold the <br>                                                                  // app alive. <br> <br>        lpCSimpSvrApp-&gt;ParseCmdLine(lpCmdLine); <br> <br>        // app initialization <br>        if (!hPrevInstance) <br>                if (!lpCSimpSvrApp-&gt;fInitApplication(hInstance)) <br>                        return (FALSE); <br> <br>        // instance initialization <br>        if (!lpCSimpSvrApp-&gt;fInitInstance(hInstance, nCmdShow, lpClassFactory)) <br>                return (FALSE); <br> <br>        /* Initialization required for OLE 2 UI library.  This call is <br>        **    needed ONLY if we are using the static link version of the UI <br>        **    library. If we are using the DLL version, we should NOT call <br>        **    this function in our application. <br>        */ <br>#if 0 <br>        if (!OleUIInitialize(hInstance, hPrevInstance)) <br>                { <br>                OleDbgOut("Could not initialize OLEUI library\n"); <br>                return FALSE; <br>                } <br>#endif <br>        // message loop <br>        while (GetMessage(&amp;msg, NULL, NULL, NULL)) <br>                { <br>                if (lpCSimpSvrApp-&gt;IsInPlaceActive()) <br> <br>                        // Only key messages need to be sent to OleTranslateAccelerator.  Any other message <br>                        // would result in an extra FAR call to occur for that message processing... <br> <br>                        if ( (msg.message &gt;= WM_KEYFIRST) &amp;&amp; (msg.message &lt;= WM_KEYLAST) ) <br> <br>                                // OleTranslateAccelerator MUST be called, even though this application does <br>                                // not have an accelerator table.  This has to be done in order for the <br>                                // mneumonics for the top level menu items to work properly. <br> <br>                                if ( OleTranslateAccelerator ( lpCSimpSvrApp-&gt;GetDoc()-&gt;GetObj()-&gt;GetInPlaceFrame(), <br>                                                                                           lpCSimpSvrApp-&gt;GetDoc()-&gt;GetObj()-&gt;GetFrameInfo(), <br>                                                                                           &amp;msg) == NOERROR) <br>                                        continue; <br> <br>                TranslateMessage(&amp;msg);    /* Translates virtual key codes           */ <br>                DispatchMessage(&amp;msg);     /* Dispatches message to window           */ <br>                } <br> <br>        // De-initialization for UI libraries.  Just like OleUIInitialize, this <br>        // funciton is needed ONLY if we are using the static link version of the <br>        // OLE UI library. <br>#if 0 <br>        OleUIUninitialize(); <br>#endif <br> <br>        return (msg.wParam);           /* Returns the value from PostQuitMessage */ <br>} <br> <br> <br>//********************************************************************** <br>// <br>// MainWndProc <br>// <br>// Purpose: <br>// <br>//      Processes messages for the frame window <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       - Window handle for frame window <br>// <br>//      UINT message    - Message value <br>// <br>//      WPARAM wParam   - Message info <br>// <br>//      LPARAM lParam   - Message info <br>// <br>// Return Value: <br>// <br>//      long <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      CSimpSvrApp::lCommandHandler     APP.CPP <br>//      CSimpSvrApp::DestroyDocs         APP.CPP <br>//      CSimpSvrApp::lCreateDoc          APP.CPP <br>//      CSimpSvrApp::lSizeHandler        APP.CPP <br>//      CGameDoc::lAddVerbs           DOC.CPP <br>//      PostQuitMessage                 Windows API <br>//      DefWindowProc                   Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//long FAR PASCAL _export MainWndProc(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam) <br>long FAR PASCAL EXPORT MainWndProc(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam) <br> <br>{ <br> <br>        switch (message) <br>                { <br>                case WM_CLOSE: <br>                        OutputDebugString("*** In WM_CLOSE *** \r\n"); <br> <br>                        // if there is still a document <br>                        if (lpCSimpSvrApp-&gt;GetDoc()) <br> <br>                                // if there is still an object within a document <br>                                if (lpCSimpSvrApp-&gt;GetDoc()-&gt;GetObj())   // this case occurs if there is still <br>                                                                                                                 // an outstanding Ref count on the object <br>                                                                                                                 // when the app is trying to go away. <br>                                                                                                                 // typically this case will occur in <br>                                                                                                                 // the "open" editing mode. <br>                                        //  Close the document <br>                                        lpCSimpSvrApp-&gt;GetDoc()-&gt;Close(); <br> <br>                        // hide the app window <br>                        lpCSimpSvrApp-&gt;HideAppWnd(); <br> <br>                        // if we were started by ole, unregister the class factory, otherwise <br>                        // remove the ref count on our dummy OLE object <br>                        if (lpCSimpSvrApp-&gt;IsStartedByOle()) <br>                                CoRevokeClassObject(lpCSimpSvrApp-&gt;GetRegisterClass()); <br>                        else <br>                                lpCSimpSvrApp-&gt;GetOleObject()-&gt;Release(); <br> <br>                        lpCSimpSvrApp-&gt;Release();  // This should close the app. <br> <br>                        break; <br> <br>                case WM_COMMAND:           // message: command from application menu <br>                        return lpCSimpSvrApp-&gt;lCommandHandler(hWnd, message, wParam, lParam); <br>                        break; <br> <br>                case WM_CREATE: <br>                        return lpCSimpSvrApp-&gt;lCreateDoc(hWnd, message, wParam, lParam); <br>                        break; <br> <br>                case WM_DESTROY:                  // message: window being destroyed <br>                        PostQuitMessage(0); <br>                        break; <br> <br>                case WM_SIZE: <br>                        return lpCSimpSvrApp-&gt;lSizeHandler(hWnd, message, wParam, lParam); <br> <br>                default:                          // Passes it on if unproccessed <br>                        return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                } <br>                return (NULL); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// About <br>// <br>// Purpose: <br>// <br>//      Processes dialog box messages <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       - Window handle for dialog box <br>// <br>//      UINT message    - Message value <br>// <br>//      WPARAM wParam   - Message info <br>// <br>//      LPARAM lParam   - Message info <br>// <br>// Return Value: <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      EndDialog                   Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//BOOL FAR PASCAL _export About(HWND hDlg,unsigned message,WORD wParam,LONG lParam) <br>BOOL FAR PASCAL EXPORT About(HWND hDlg,UINT message,WPARAM wParam,LPARAM lParam) <br> <br>{ <br>        switch (message) { <br>        case WM_INITDIALOG:                /* message: initialize dialog box */ <br>                return (TRUE); <br> <br>        case WM_COMMAND:                      /* message: received a command */ <br>                //@@WTK WIN32, UNICODE <br>                //if (wParam == IDOK                /* "OK" box selected?          */ <br>                if (LOWORD(wParam) == IDOK                /* "OK" box selected?          */ <br>                || LOWORD(wParam) == IDCANCEL) {      /* System menu close command? */ <br>                        EndDialog(hDlg, TRUE);        /* Exits the dialog box        */ <br>                        return (TRUE); <br>                } <br>                break; <br>        } <br>        return (FALSE);                           /* Didn't process a message    */ <br>} <br> <br>//********************************************************************** <br>// <br>// DocWndProc <br>// <br>// Purpose: <br>// <br>//      Processes dialog box messages <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       - Window handle for doc window <br>// <br>//      UINT message    - Message value <br>// <br>//      WPARAM wParam   - Message info <br>// <br>//      LPARAM lParam   - Message info <br>// <br>// Return Value: <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      CSimpSvrApp::PaintApp                APP.CPP <br>//      BeginPaint                          Windows API <br>//      EndPaint                            Windows API <br>//      DefWindowProc                       Windows API <br>//      IOleObject::QueryInterface          Object <br>//      IOleInPlaceObject::UIDeactivate     Object <br>//      IOleObject::DoVerb                  Object <br>//      IOleInPlaceObject::Release          Object <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//long FAR PASCAL _export DocWndProc(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam) <br>long FAR PASCAL EXPORT DocWndProc(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam) <br>{ <br>        HDC hDC; <br>        PAINTSTRUCT ps; <br> <br>        switch (message) { <br>                case WM_COMMAND:           // message: command from application menu <br>                        return lpCSimpSvrApp-&gt;lCommandHandler(hWnd, message, wParam, lParam); <br>                        break; <br> <br>                case WM_PAINT: <br>                        hDC = BeginPaint(hWnd, &amp;ps); <br> <br>                        // tell the app class to paint itself <br>                        if (lpCSimpSvrApp) <br>                                lpCSimpSvrApp-&gt;PaintApp (hDC); <br> <br>                        EndPaint(hWnd, &amp;ps); <br>                        break; <br> <br>                case WM_MENUSELECT: <br>                        lpCSimpSvrApp-&gt;SetStatusText(); <br>                        break; <br> <br>        default:                          /* Passes it on if unproccessed    */ <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>        } <br>        return (NULL); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context377"></a>APP.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: app.cpp <br>// <br>//    Implementation file for the CSimpSvrApp Class <br>// <br>// Functions: <br>// <br>//    See app.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "app.h" <br>#include "doc.h" <br>#include "icf.h" <br> <br>#include "initguid.h" <br>DEFINE_GUID(GUID_SIMPLE, 0xBCF6D4A0, 0xBE8C, 0x1068, 0xB6, 0xD4, 0x00, 0xDD, 0x01, 0x0C, 0x05, 0x09); <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::CSimpSvrApp() <br>// <br>// Purpose: <br>// <br>//      Constructor for CSimpSvrApp <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      SetRectEmpty                Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>CSimpSvrApp::CSimpSvrApp() <br>{ <br>        OutputDebugString("In CSimpSvrApp's Constructor \r\n"); <br> <br>        // clear members <br>        m_hAppWnd = NULL; <br>        m_hInst = NULL; <br>        m_lpDoc = NULL; <br> <br>        // clear flags <br>        m_fInitialized = m_fOleStdInit = FALSE; <br> <br>        // used for inplace <br>        SetRectEmpty(&amp;nullRect); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::~CSimpSvrApp() <br>// <br>// Purpose: <br>// <br>//      Destructor for CSimpSvrApp Class. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      DestroyWindow               Windows API <br>//      CSimpSvrApp::IsInitialized  APP.H <br>//      OleUninitialize             OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CSimpSvrApp::~CSimpSvrApp() <br>{ <br>        OutputDebugString("In CSimpSvrApp's Destructor\r\n"); <br> <br>        if (m_fOleStdInit) <br>            OleStdUninitialize(); <br> <br>        // need to uninit the library... <br>        if (IsInitialized()) <br>                OleUninitialize(); <br> <br>        DestroyWindow(m_hAppWnd); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Used for interface negotiation at the Application level. <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   A reference to the interface that is <br>//                              being queried. <br>// <br>//      LPVOID FAR* ppvObj  -   An out parameter to return a pointer to <br>//                              the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK          -   The interface is supported. <br>//      E_NOINTERFACE -   The interface is not supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>//      IUnknown::AddRef            APP.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CSimpSvrApp::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In CSimpSvrApp::QueryInterface\r\n"); <br> <br>        SCODE sc = S_OK; <br> <br>        if (riid == IID_IUnknown) <br>                *ppvObj = this; <br>        else <br>                { <br>                *ppvObj = NULL; <br>                sc = E_NOINTERFACE; <br>                } <br> <br>        if (*ppvObj) <br>                ((LPUNKNOWN)*ppvObj)-&gt;AddRef(); <br> <br>        // asking for something we don't understand at this level. <br>        return sc; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::AddRef <br>// <br>// Purpose: <br>// <br>//      Adds to the reference count at the Application level. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the application. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Due to the reference counting model that is used in this <br>//      implementation, this reference count is the sum of the <br>//      reference counts on all interfaces of all objects open <br>//      in the application. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpSvrApp::AddRef() <br>{ <br>        OutputDebugString("In CSimpSvrApp::AddRef\r\n"); <br>        return SafeAddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count at this level <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the application. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Due to the reference counting model that is used in this <br>//      implementation, this reference count is the sum of the <br>//      reference counts on all interfaces of all objects open <br>//      in the application. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpSvrApp::Release() <br>{ <br>        OutputDebugString("In CSimpSvrApp::Release\r\n"); <br> <br>        return SafeRelease(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::fInitApplication <br>// <br>// Purpose: <br>// <br>//      Initializes the application <br>// <br>// Parameters: <br>// <br>//      HANDLE hInstance    -   Instance handle of the application. <br>// <br>// Return Value: <br>// <br>//      TRUE    -   Application was successfully initialized. <br>//      FALSE   -   Application could not be initialized <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      LoadIcon                    Windows API <br>//      LoadCursor                  Windows API <br>//      GetStockObject              Windows API <br>//      RegisterClass               Windows API <br>//      RegisterHatchWindowClass    OUTLUI.DLL <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>BOOL CSimpSvrApp::fInitApplication(HINSTANCE hInstance) <br>{ <br>        CStabilize stabilize(this); <br>        WNDCLASS  wc; <br> <br>        // Fill in window class structure with parameters that describe the <br>        // main window. <br> <br>        wc.style = NULL;                    // Class style(s). <br>        wc.lpfnWndProc = MainWndProc;       // Function to retrieve messages for <br>                                                                                // windows of this class. <br>        wc.cbClsExtra = 0;                  // No per-class extra data. <br>        wc.cbWndExtra = 0;                  // No per-window extra data. <br>        wc.hInstance = hInstance;           // Application that owns the class. <br>        wc.hIcon = LoadIcon(hInstance, "SimpSvr"); <br>        wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>        wc.lpszMenuName =  "SimpSvrMENU";    // Name of menu resource in .RC file. <br>        wc.lpszClassName = "SimpSvrWClass";  // Name used in call to CreateWindow. <br> <br>        if (!RegisterClass(&amp;wc)) <br>                return FALSE; <br> <br>        wc.style = CS_VREDRAW | CS_HREDRAW;                    // Class style(s). <br>        wc.lpfnWndProc = DocWndProc;        // Function to retrieve messages for <br>                                                                                // windows of this class. <br>        wc.cbClsExtra = 0;                  // No per-class extra data. <br>        wc.cbWndExtra = 0;                  // No per-window extra data. <br>        wc.hInstance = hInstance;           // Application that owns the class. <br>        wc.hIcon = NULL; <br>        wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>        wc.lpszMenuName =  NULL; <br>        wc.lpszClassName = "DocWClass";     // Name used in call to CreateWindow. <br> <br>        // Register the window class and return success/failure code. <br> <br>        if (!RegisterClass(&amp;wc)) <br>                return FALSE; <br> <br>        return (RegisterHatchWindowClass(hInstance)); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::fInitInstance <br>// <br>// Purpose: <br>// <br>//      Instance initialization. <br>// <br>// Parameters: <br>// <br>//      HANDLE hInstance    -   App. Instance Handle. <br>// <br>//      int nCmdShow        -   Show parameter from WinMain <br>// <br>// Return Value: <br>// <br>//      TRUE    -   Initialization Successful <br>//      FALSE   -   Initialization Failed. <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CreateWindow                Windows API <br>//      InvalidateRect              Windows API <br>//      ShowWindow                  Windows API <br>//      UpdateWindow                Windows API <br>//      CoRegisterClassObject       OLE API <br>//      OleBuildVersion             OLE API <br>//      OleInitialize               OLE API <br>//      CSimpSvrDoc::CreateObject   DOC.CPP <br>// <br>// Comments: <br>// <br>//      Note that successful Initalization of the OLE libraries <br>//      is remembered so the UnInit is only called if needed. <br>// <br>//******************************************************************** <br> <br>BOOL CSimpSvrApp::fInitInstance (HINSTANCE hInstance, int nCmdShow, CClassFactory FAR * lpClassFactory) <br>{ <br>        CStabilize stabilize(this); <br>        m_hInst = hInstance; <br> <br>                DWORD dwVer = OleBuildVersion(); <br> <br>        // check to see if we are compatible with this version of the libraries <br>        if (HIWORD(dwVer) != rmm || LOWORD(dwVer) &lt; rup) <br>                OutputDebugString("*** WARNING:  Not compatible with current libs ***\r\n"); <br> <br>        // initialize the libraries <br>        if (OleInitialize(NULL) == NOERROR) <br>                m_fInitialized = TRUE; <br> <br>        m_fOleStdInit = OleStdInitialize(hInstance); <br> <br>        // Create the "application" windows <br>        m_hAppWnd = CreateWindow ("SimpSvrWClass", <br>                                                          "Simple OLE 2.0 Server", <br>                                                          WS_OVERLAPPEDWINDOW, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          NULL, <br>                                                          NULL, <br>                                                          hInstance, <br>                                                          NULL); <br> <br>        if (!m_hAppWnd) <br>                return FALSE; <br> <br>        // if not started by OLE, then show the Window, and create a "fake" object, else <br>        // Register a pointer to IClassFactory so that OLE can instruct us to make an <br>        // object at the appropriate time. <br>        if (!m_fStartByOle) <br>                { <br>                ShowAppWnd(nCmdShow); <br>                m_lpDoc-&gt;CreateObject(IID_IOleObject, (LPVOID FAR *)&amp;m_OleObject); <br>                InvalidateRect(m_lpDoc-&gt;GethDocWnd(), NULL, TRUE); <br>                } <br>        else <br>                { <br>                lpClassFactory = new CClassFactory(this); <br> <br>                // shouldn't pass an API an object with a zero ref count <br>                lpClassFactory-&gt;AddRef(); <br> <br>                CoRegisterClassObject(GUID_SIMPLE,(IUnknown FAR *)lpClassFactory, CLSCTX_LOCAL_SERVER, REGCLS_SINGLEUSE, &amp;m_dwRegisterClass); <br> <br>                // remove artificial Ref. count <br>                lpClassFactory-&gt;Release(); <br>                } <br> <br>        m_hMainMenu = GetMenu(m_hAppWnd); <br>        m_hColorMenu = GetSubMenu(m_hMainMenu, 1); <br>        m_hHelpMenu = GetSubMenu(m_hMainMenu, 2); <br> <br> <br>        return m_fInitialized; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::lCommandHandler <br>// <br>// Purpose: <br>// <br>//      Handles the processing of WM_COMMAND. <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_COMMAND) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                                    Location <br>// <br>//      GetClientRect                               Windows API <br>//      MessageBox                                  Windows API <br>//      DialogBox                                   Windows API <br>//      MakeProcInstance                            Windows API <br>//      FreeProcInstance                            Windows API <br>//      SendMessage                                 Windows API <br>//      DefWindowProc                               Windows API <br>//      InvalidateRect                              Windows API <br>//      CSimpSvrDoc::InsertObject                   DOC.CPP <br>//      CSimpSvrObj::SetColor                       OBJ.CPP <br>//      CSimpSvrObj::RotateColor                    OBJ.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpSvrApp::lCommandHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        CStabilize stabilize(this); <br>        //@@WTK WIN32, UNICODE <br>        //switch (wParam) { <br>        switch (LOWORD(wParam)) { <br>                // bring up the About box <br>                case IDM_ABOUT: <br>                        { <br> <br>                        DialogBox(m_hInst,               // current instance <br>                                        "AboutBox",                  // resource to use <br>                                        m_hAppWnd,                   // parent handle <br>                                        (DLGPROC) About);                // About() instance address <br> <br>                        break; <br>                        } <br> <br>                // exit the application <br>                case IDM_EXIT: <br>                        SendMessage(hWnd, WM_SYSCOMMAND, SC_CLOSE, 0L); <br>                        break; <br> <br>                case IDM_RED: <br>                        m_lpDoc-&gt;GetObj()-&gt;SetColor (128, 0, 0); <br>                        InvalidateRect(m_lpDoc-&gt;GethDocWnd(), NULL, TRUE); <br>                        break; <br> <br>                case IDM_GREEN: <br>                        m_lpDoc-&gt;GetObj()-&gt;SetColor (0,128, 0); <br>                        InvalidateRect(m_lpDoc-&gt;GethDocWnd(), NULL, TRUE); <br>                        break; <br> <br>                case IDM_BLUE: <br>                        m_lpDoc-&gt;GetObj()-&gt;SetColor (0, 0, 128); <br>                        InvalidateRect(m_lpDoc-&gt;GethDocWnd(), NULL, TRUE); <br>                        break; <br> <br>                case IDM_ROTATE: <br>                        m_lpDoc-&gt;GetObj()-&gt;RotateColor(); <br>                        InvalidateRect(m_lpDoc-&gt;GethDocWnd(), NULL, TRUE); <br>                        break; <br> <br>                default: <br>                        return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                   }   // end of switch <br>        return NULL; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::lSizeHandler <br>// <br>// Purpose: <br>// <br>//      Handles the WM_SIZE message <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_SIZE) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      LONG    -   returned from the "document" resizing <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      GetClientRect               Windows API <br>//      CSimpSvrDoc::lResizeDoc      DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpSvrApp::lSizeHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        RECT rect; <br>        CStabilize stabilize(this); <br> <br>        GetClientRect(m_hAppWnd, &amp;rect); <br>        return m_lpDoc-&gt;lResizeDoc(&amp;rect); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::lCreateDoc <br>//                                                         d <br>// Purpose: <br>// <br>//      Handles the creation of a document. <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_CREATE) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      GetClientRect               Windows API <br>//      CSimpSvrDoc::Create         DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpSvrApp::lCreateDoc (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        RECT rect; <br>        CStabilize stabilize(this); <br> <br>        GetClientRect(hWnd, &amp;rect); <br> <br>        m_lpDoc = CSimpSvrDoc::Create(this, &amp;rect, hWnd); <br> <br>        return NULL; <br>} <br> <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::PaintApp <br>// <br>// Purpose: <br>// <br>//      Handles the painting of the doc window. <br>// <br>// <br>// Parameters: <br>// <br>//      HDC hDC -   hDC to the Doc Window. <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrDoc::PaintDoc        DOC.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CSimpSvrApp::PaintApp (HDC hDC) <br>{ <br>        CStabilize stabilize(this); <br> <br>        // if we supported multiple documents, we would enumerate <br>        // through each of the open documents and call paint. <br> <br>        if (m_lpDoc) <br>                m_lpDoc-&gt;PaintDoc(hDC); <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::ParseCmdLine <br>// <br>// Purpose: <br>// <br>//      Determines if the app was started by OLE <br>// <br>// <br>// Parameters: <br>// <br>//      LPSTR lpCmdLine -   Pointer to the command line <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      lstrlen                     Windows API <br>//      lstrcmp                     Windows API <br>// <br>// <br>// Comments: <br>// <br>//      Parses the command line looking for the -Embedding or /Embedding <br>//      flag. <br>// <br>//******************************************************************** <br> <br>void CSimpSvrApp::ParseCmdLine(LPSTR lpCmdLine) <br>{ <br>        char szTemp[255]; <br> <br>        m_fStartByOle = TRUE; <br> <br>        ::ParseCmdLine (lpCmdLine, &amp;m_fStartByOle, szTemp); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::SetStatusText <br>// <br>// Purpose: <br>// <br>//      Blanks out the text in the status bar <br>// <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrDoc::SetStatusText  DOC.CPP <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CSimpSvrApp::SetStatusText() <br>{ <br>        CStabilize stabilize(this); <br>        m_lpDoc-&gt;SetStatusText(); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::IsInPlaceActive <br>// <br>// Purpose: <br>// <br>//      Safely determines from the app level if currently inplace active. <br>// <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      TRUE    - Inplace active <br>//      FALSE   - Not Inplace active <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrDoc::GetObject      OBJ.H <br>//      CSimpSvrObj:IsInPlaceActive OBJ.H <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>BOOL CSimpSvrApp::IsInPlaceActive() <br>{ <br>        CStabilize stabilize(this); <br>        BOOL retval = FALSE; <br> <br>        if (m_lpDoc) <br>                if (m_lpDoc-&gt;GetObj()) <br>                        retval = m_lpDoc-&gt;GetObj()-&gt;IsInPlaceActive(); <br> <br>        return retval; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::ShowAppWnd <br>// <br>// Purpose: <br>// <br>//      Shows the Application Window <br>// <br>// Parameters: <br>// <br>//      int nCmdShow    - Window State <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>//      UpdateWindow                    Windows API <br>//      CoLockObjectExternal            OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrApp::ShowAppWnd(int nCmdShow) <br>{ <br>        CoLockObjectExternal(this, TRUE, FALSE); <br>        ShowWindow (m_hAppWnd, nCmdShow); <br>        UpdateWindow (m_hAppWnd); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrApp::ShowAppWnd <br>// <br>// Purpose: <br>// <br>//      Hides the Application Window <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>//      CoLockObjectExternal            OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrApp::HideAppWnd() <br>{ <br>        CoLockObjectExternal(this, FALSE, TRUE); <br>        ShowWindow (m_hAppWnd, SW_HIDE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

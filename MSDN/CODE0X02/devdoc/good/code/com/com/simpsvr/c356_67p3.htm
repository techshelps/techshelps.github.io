<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context357"></a>APP.H</h2>
<pre><code>//********************************************************************** <br>// File name: app.h <br>// <br>//      Definition of CSimpSvrApp <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#if !defined( _APP_H_) <br>#define _APP_H_ <br>#include &lt;stablize.h&gt; <br> <br>class CSimpSvrDoc; <br>interface CClassFactory; <br> <br>class CSimpSvrApp : public IUnknown, public CSafeRefCount <br>{ <br>private: <br> <br>        HWND m_hAppWnd;             // main window handle <br>        HINSTANCE m_hInst;          // application instance <br>        BOOL m_fStartByOle;         // TRUE if app started by OLE <br>        DWORD m_dwRegisterClass;    // returned by RegisterClassFactory <br> <br>        HMENU m_hMainMenu; <br>        HMENU m_hColorMenu; <br>        HMENU m_hHelpMenu; <br> <br> <br>        LPOLEOBJECT m_OleObject;    // pointer to "dummy" object <br> <br> <br>        CSimpSvrDoc FAR * m_lpDoc;   // pointer to document object <br>        BOOL m_fInitialized;         // OLE initialization flag <br>        BOOL m_fOleStdInit;          // OleStd initialization flag <br> <br>        RECT nullRect;               // used in inplace negotiation <br> <br>public: <br>        // IUnknown Interfaces <br>        STDMETHODIMP QueryInterface(REFIID riid, LPVOID FAR* ppvObj); <br>        STDMETHODIMP_(ULONG) AddRef(); <br>        STDMETHODIMP_(ULONG) Release(); <br> <br>        // Initialization methods <br> <br>        CSimpSvrApp();           // Constructor <br>        ~CSimpSvrApp();          // Destructor <br> <br> <br>BOOL fInitApplication (HINSTANCE  hInstance); <br>BOOL fInitInstance (HINSTANCE  hInstance, int nCmdShow, CClassFactory FAR * lpClassFactory); <br> <br>        // Message handling methods <br> <br>        long lCommandHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam); <br>        long lSizeHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam); <br>        long lCreateDoc (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam); <br>        void PaintApp(HDC hDC); <br> <br>        //  Utility functions <br>        void ParseCmdLine(LPSTR lpCmdLine); <br>        void SetStatusText(); <br>        BOOL IsInPlaceActive(); <br>        void ShowAppWnd(int nCmdShow=SW_SHOWNORMAL); <br>        void HideAppWnd(); <br> <br> <br>        // member variable access <br>        inline HWND GethAppWnd() { return m_hAppWnd; }; <br>        inline HINSTANCE GethInst() { return m_hInst; }; <br>        inline BOOL IsStartedByOle() { return m_fStartByOle; }; <br>        inline BOOL IsInitialized() { return m_fInitialized; }; <br>        inline DWORD GetRegisterClass() { return m_dwRegisterClass; }; <br>        inline CSimpSvrDoc FAR * GetDoc() { return m_lpDoc; }; <br>        inline void ClearDoc() { m_lpDoc = NULL; }; <br>        inline LPOLEOBJECT GetOleObject() { return m_OleObject; }; <br>                inline HMENU GetMainMenu() { return m_hMainMenu; }; <br>        inline HMENU GetColorMenu() { return m_hColorMenu; }; <br>        inline HMENU GetHelpMenu() { return m_hHelpMenu; } ; <br> <br> <br>        friend interface CClassFactory;  // make the contained class a friend <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

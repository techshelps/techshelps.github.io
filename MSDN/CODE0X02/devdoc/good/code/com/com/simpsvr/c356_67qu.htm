<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOIPAO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context366"></a>IOIPAO.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IOIPAO.CPP <br>// <br>//    Implementation file for the CClassFactory Class <br>// <br>// Functions: <br>// <br>//    See ioipao.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "ioipao.h" <br>#include "app.h" <br>#include "doc.h" <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::QueryInterface ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::QueryInterface\r\n"); <br>// need to NULL the out parameter <br>return m_lpObj-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on COleInPlaceActiveObject and the <br>//      "object" object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on the "object" object. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>//      CSimpSvrObj::AddRef         OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceActiveObject::AddRef () <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::AddRef\r\n"); <br> <br>++m_nCount; <br> <br>return m_lpObj-&gt;AddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of COleInPlaceActiveObject. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrObj::Release        OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceActiveObject::Release () <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::Release\r\n"); <br> <br>--m_nCount; <br> <br>return m_lpObj-&gt;Release(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::OnDocWindowActivate <br>// <br>// Purpose: <br>// <br>//      Called when the doc window (in an MDI App) is (de)activated. <br>// <br>// Parameters: <br>// <br>//      BOOL fActivate  - TRUE if activating, FALSE if deactivating <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      OutputDebugString                   Windows API <br>//      IOleInPlaceFrame::SetActiveObject   Container <br>//      CSimpSvrObject::AddFrameLevelUI     OBJ.CPP <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::OnDocWindowActivate  ( BOOL fActivate ) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::OnDocWindowActivate\r\n"); <br> <br>// Activating? <br>if (fActivate) <br>m_lpObj-&gt;AddFrameLevelUI(); <br> <br>// No frame level tools to remove... <br> <br>return S_OK; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::OnFrameWindowActivate <br>// <br>// Purpose: <br>// <br>//      Called when the Frame window is (de)activating <br>// <br>// Parameters: <br>// <br>//      BOOL fActivate  - TRUE if activating, FALSE if Deactivating <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      SetFocus                    Windows API <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::OnFrameWindowActivate  ( BOOL fActivate) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::OnFrameWindowActivate\r\n"); <br> <br>// set the focus to the object window if we are activating. <br>/*    if (fActivate) <br>SetFocus(m_lpObj-&gt;m_lpDoc-&gt;GethDocWnd()); */ <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::GetWindow <br>// <br>// Purpose: <br>// <br>//      Gets the objects Window Handle. <br>// <br>// Parameters: <br>// <br>//      HWND FAR* lphwnd    - Location to return the window handle. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrDoc::GethDocWnd     DOC.H <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::GetWindow  ( HWND FAR* lphwnd) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::GetWindow\r\n"); <br>// need to NULL the out parameter <br>*lphwnd = m_lpObj-&gt;m_lpDoc-&gt;GethDocWnd(); <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::ContextSensitiveHelp <br>// <br>// Purpose: <br>// <br>//      Used to implement Context Sensitive help <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      E_NOTIMPL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>//      See TECHNOTES.WRI include with the OLE SDK for proper <br>//      implementation of this function. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::ContextSensitiveHelp  ( BOOL fEnterMode ) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::ContextSensitiveHelp\r\n"); <br>return  E_NOTIMPL; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::TranslateAccelerator <br>// <br>// Purpose: <br>// <br>//      Used for translating accelerators in .DLL objects. <br>// <br>// Parameters: <br>// <br>//      LPMSG lpmsg - Pointer to a message <br>// <br>// Return Value: <br>// <br>//      S_FALSE <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>//      This method should never be called since we are implemented <br>//      in an executable. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::TranslateAccelerator  ( LPMSG lpmsg) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::TranslateAccelerator\r\n"); <br>// no accelerator table, return FALSE <br>return  S_FALSE ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::ResizeBorder <br>// <br>// Purpose: <br>// <br>//      Called when the border changes size. <br>// <br>// Parameters: <br>// <br>//      LPCRECT lprectBorder                - New Border <br>// <br>//      LPOLEINPLACEUIWINDOW lpUIWindow     - Pointer to UIWindow <br>// <br>//      BOOL fFrameWindow                   - True if lpUIWindow is the <br>//                                            frame window. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>//      Need to call SetBorderSpace again... <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::ResizeBorder  ( LPCRECT lprectBorder, <br>  LPOLEINPLACEUIWINDOW lpUIWindow, <br>  BOOL fFrameWindow) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::ResizeBorder\r\n"); <br> <br>// should always have an inplace frame... <br>m_lpObj-&gt;GetInPlaceFrame()-&gt;SetBorderSpace(NULL); <br> <br>// There will only be a UIWindow if in an MDI container <br>if (m_lpObj-&gt;GetUIWindow()) <br>m_lpObj-&gt;GetUIWindow()-&gt;SetBorderSpace(NULL); <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceActiveObject::EnableModeless <br>// <br>// Purpose: <br>// <br>//      Called to enable/disable modeless dialogs. <br>// <br>// Parameters: <br>// <br>//      BOOL fEnable    - TRUE to enable, FALSE to disable <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>//      Called by the container when a model dialog box is added/removed <br>//      from the screen.  The appropriate action for a server application <br>//      is to disable/enable any modeless dialogs currently being displayed. <br>//      Since this application doesn't display any modeless dialogs, <br>//      this method is essentially ignored. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceActiveObject::EnableModeless  ( BOOL fEnable) <br>{ <br>OutputDebugString("In COleInPlaceActiveObject::EnableModeless\r\n"); <br>return  S_OK ; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

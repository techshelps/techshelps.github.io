<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context362"></a>IDO.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IDO.CPP <br>// <br>//    Implementation file for the CDataObject Class <br>// <br>// Functions: <br>// <br>//    See ido.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "ido.h" <br>#include "app.h" <br>#include "doc.h" <br> <br>//********************************************************************** <br>// <br>// CDataObject::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::QueryInterface ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>OutputDebugString("In CDataObject::QueryInterface\r\n"); <br> <br>return m_lpObj-&gt;QueryInterface(riid, ppvObj); <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on CClassFactory and the application <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on CDataObject <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>//      CSimpSvrObj::AddRef         OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CDataObject::AddRef () <br>{ <br>OutputDebugString("In CDataObject::AddRef\r\n"); <br>++m_nCount; <br>return m_lpObj-&gt;AddRef(); <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of CDataObject <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrObj::Release        OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP_(ULONG) CDataObject::Release () <br>{ <br>OutputDebugString("In CDataObject::Release\r\n"); <br>--m_nCount; <br>return m_lpObj-&gt;Release(); <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::QueryGetData <br>// <br>// Purpose: <br>// <br>//      Called to determine if our object supports a particular <br>//      FORMATETC. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc  - Pointer to the FORMATETC being queried for. <br>// <br>// Return Value: <br>// <br>//      DATA_E_FORMATETC    - The FORMATETC is not supported <br>//      S_OK                - The FORMATETC is supported. <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::QueryGetData  ( LPFORMATETC pformatetc ) <br>{ <br>SCODE sc = DATA_E_FORMATETC; <br> <br>OutputDebugString("In CDataObject::QueryGetData\r\n"); <br> <br>// check the validity of the formatetc. <br>if ( (pformatetc-&gt;cfFormat == CF_METAFILEPICT)  &amp;&amp; <br> (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br> (pformatetc-&gt;tymed == TYMED_MFPICT) ) <br>sc = S_OK; <br> <br>return sc; <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::DAdvise <br>// <br>// Purpose: <br>// <br>//      Called by the container when it would like to be notified of <br>//      changes in the object data. <br>// <br>// Parameters: <br>// <br>//      FORMATETC FAR* pFormatetc   - The format the container is interested in. <br>// <br>//      DWORD advf                  - The type of advise to be set up. <br>// <br>//      LPADVISESINK pAdvSink       - Pointer to the containers IAdviseSink <br>// <br>//      DWORD FAR* pdwConnection    - Out parameter to return a unique connection id. <br>// <br>// Return Value: <br>// <br>//      passed on from IDataAdviseHolder <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CreateDataAdviseHolder      OLE API <br>//      IDataAdviseHolder::Advise   OLE API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::DAdvise  ( FORMATETC FAR* pFormatetc, DWORD advf, <br> LPADVISESINK pAdvSink, DWORD FAR* pdwConnection) <br>{ <br>OutputDebugString("In CDataObject::DAdvise\r\n"); <br> <br>// if no DataAdviseHolder has been created, then create one. <br>if (!m_lpObj-&gt;m_lpDataAdviseHolder) <br>CreateDataAdviseHolder(&amp;m_lpObj-&gt;m_lpDataAdviseHolder); <br> <br>// pass on to the DataAdviseHolder <br>return m_lpObj-&gt;m_lpDataAdviseHolder-&gt;Advise( this, pFormatetc, advf, <br>  pAdvSink, pdwConnection); <br>} <br> <br>//********************************************************************** <br>// <br>// CDataObject::GetData <br>// <br>// Purpose: <br>// <br>//      Returns the data in the format specified in pformatetcIn. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetcIn    -   The format requested by the caller <br>// <br>//      LPSTGMEDIUM pmedium         -   The medium requested by the caller <br>// <br>// Return Value: <br>// <br>//      DATA_E_FORMATETC    - Format not supported <br>//      S_OK                - Success <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      CSimpSvrObj::GetMetaFilePict()  OBJ.CPP <br>//                       OLE API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::GetData  ( LPFORMATETC pformatetcIn, LPSTGMEDIUM pmedium ) <br>{ <br>SCODE sc = DATA_E_FORMATETC; <br> <br>OutputDebugString("In CDataObject::GetData\r\n"); <br> <br>// Check to the FORMATETC and fill pmedium if valid. <br>if ( (pformatetcIn-&gt;cfFormat == CF_METAFILEPICT)  &amp;&amp; <br> (pformatetcIn-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br> (pformatetcIn-&gt;tymed &amp; TYMED_MFPICT) ) <br>{ <br>HANDLE hmfPict = m_lpObj-&gt;GetMetaFilePict(); <br>pmedium-&gt;tymed = TYMED_MFPICT; <br>pmedium-&gt;hGlobal = hmfPict; <br>pmedium-&gt;pUnkForRelease = NULL; <br>sc = S_OK; <br>} <br> <br>return  sc ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::DUnadvise <br>// <br>// Purpose: <br>// <br>//      Breaks down an Advise connection. <br>// <br>// Parameters: <br>// <br>//      DWORD dwConnection  - Advise connection ID. <br>// <br>// Return Value: <br>// <br>//      Returned from the DataAdviseHolder. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IDataAdviseHolder::Unadvise OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::DUnadvise  ( DWORD dwConnection) <br>{ <br>OutputDebugString("In CDataObject::DUnadvise\r\n"); <br> <br>return m_lpObj-&gt;m_lpDataAdviseHolder-&gt;Unadvise(dwConnection); <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::GetDataHere <br>// <br>// Purpose: <br>// <br>//      Called to get a data format in a caller supplied location <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc  - FORMATETC requested <br>// <br>//      LPSTGMEDIUM pmedium     - Medium to return the data <br>// <br>// Return Value: <br>// <br>//      DATA_E_FORMATETC    - We don't support the requested format <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      In this simple implementation, we don't really support this <br>//      method, we just always return DATA_E_FORMATETC. <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::GetDataHere  ( LPFORMATETC pformatetc, <br> LPSTGMEDIUM pmedium ) <br>{ <br>OutputDebugString("In CDataObject::GetDataHere\r\n"); <br>return  DATA_E_FORMATETC; <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::GetCanonicalFormatEtc <br>// <br>// Purpose: <br>// <br>//      Returns a FORMATETC that is equivalent to the one passed in. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc      - FORMATETC to be tested. <br>// <br>//      LPFORMATETC pformatetcOut   - Out ptr for returned FORMATETC. <br>// <br>// Return Value: <br>// <br>//      DATA_S_SAMEFORMATETC    - Use the same formatetc as was passed. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CoGetMalloc                 OLE API <br>//      IMalloc::Alloc              OLE <br>//      IMalloc::Release            OLE <br>//      _fmemcpy                    C run-time <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::GetCanonicalFormatEtc  ( LPFORMATETC pformatetc, <br>   LPFORMATETC pformatetcOut) <br>{ <br>HRESULT hresult; <br>OutputDebugString("In CDataObject::GetCanonicalFormatEtc\r\n"); <br> <br>if (!pformatetcOut) <br>return E_INVALIDARG; <br> <br>/* OLE2NOTE: we must make sure to set all out parameters to NULL. */ <br>pformatetcOut-&gt;ptd = NULL; <br> <br>if (!pformatetc) <br>return E_INVALIDARG; <br> <br>// OLE2NOTE: we must validate that the format requested is supported <br>if ((hresult = QueryGetData(pformatetc)) != NOERROR) <br>return hresult; <br> <br>/* OLE2NOTE: an app that is insensitive to target device (as <br>**    SimpSvr is) should fill in the lpformatOut parameter <br>**    but NULL out the "ptd" field; it should return NOERROR if the <br>**    input formatetc-&gt;ptd what non-NULL. this tells the caller <br>**    that it is NOT necessary to maintain a separate screen <br>**    rendering and printer rendering. if should return <br>**    DATA_S_SAMEFORMATETC if the input and output formatetc's are <br>**    identical. <br>*/ <br> <br>*pformatetcOut = *pformatetc; <br>if (pformatetc-&gt;ptd == NULL) <br>return DATA_S_SAMEFORMATETC; <br>else <br>{ <br>pformatetcOut-&gt;ptd = NULL; <br>return NOERROR; <br>} <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::SetData <br>// <br>// Purpose: <br>// <br>//      Called to set the data for the object. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc      - the format of the data being passed <br>// <br>//      STGMEDIUM FAR * pmedium     - the location of the data. <br>// <br>//      BOOL fRelease               - Defines the ownership of the medium <br>// <br>// Return Value: <br>// <br>//      DATA_E_FORMATETC    - Not a valid FORMATETC for this object <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This simple object does not support having its data set, so an <br>//      error value is always returned. <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::SetData  ( LPFORMATETC pformatetc, STGMEDIUM FAR * pmedium, <br> BOOL fRelease) <br>{ <br>OutputDebugString("In CDataObject::SetData\r\n"); <br>return  DATA_E_FORMATETC ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::EnumFormatEtc <br>// <br>// Purpose: <br>// <br>//      Enumerates the formats supported by this object. <br>// <br>// Parameters: <br>// <br>//      DWORD dwDirection                       - Order of enumeration. <br>// <br>//      LPENUMFORMATETC FAR* ppenumFormatEtc    - Place to return a pointer <br>//                                                to the enumerator. <br>// <br>// Return Value: <br>// <br>//      OLE_S_USEREG    - Indicates that OLE should consult the REG DB <br>//                        to enumerate the formats. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::EnumFormatEtc  ( DWORD dwDirection, <br>   LPENUMFORMATETC FAR* ppenumFormatEtc) <br>{ <br>OutputDebugString("In CDataObject::EnumFormatEtc\r\n"); <br>// need to NULL the out parameter <br>*ppenumFormatEtc = NULL; <br>return  OLE_S_USEREG ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CDataObject::EnumDAdvise <br>// <br>// Purpose: <br>// <br>//      Returns an enumerator that enumerates all of the advises <br>//      set up on this data object. <br>// <br>// Parameters: <br>// <br>//      LPENUMSTATDATA FAR* ppenumAdvise    - An out ptr in which to <br>//                                            return the enumerator. <br>// <br>// Return Value: <br>// <br>//      Passed back from IDataAdviseHolder::EnumAdvise <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      IDAtaAdviseHolder::EnumAdvise   OLE <br>// <br>// Comments: <br>// <br>//      This just delegates to the DataAdviseHolder. <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CDataObject::EnumDAdvise  ( LPENUMSTATDATA FAR* ppenumAdvise) <br>{ <br>OutputDebugString("In CDataObject::EnumDAdvise\r\n"); <br>// need to NULL the out parameter <br>*ppenumAdvise = NULL; <br> <br>return m_lpObj-&gt;m_lpDataAdviseHolder-&gt;EnumAdvise(ppenumAdvise); <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

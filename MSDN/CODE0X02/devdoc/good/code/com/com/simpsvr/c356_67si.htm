<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context372"></a>IPS.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: ips.cpp <br>// <br>//    Implementation file for the CSimpSvrApp Class <br>// <br>// Functions: <br>// <br>//    See ips.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "ips.h" <br>#include "app.h" <br>#include "doc.h" <br> <br>//@@WTK WIN32, UNICODE <br>//#include &lt;storage.h&gt; <br> <br>DEFINE_GUID(GUID_SIMPLE, 0xBCF6D4A0, 0xBE8C, 0x1068, 0xB6, 0xD4, 0x00, 0xDD, 0x01, 0x0C, 0x05, 0x09); <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::QueryInterface ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>OutputDebugString("In CPersistStorage::QueryInterface\r\n"); <br>// need to NULL the out parameter <br>return m_lpObj-&gt;QueryInterface(riid, ppvObj); <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on CPersistStorage and the "object" <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on the Object. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>//      CSimpSvrObj::AddRef         OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CPersistStorage::AddRef () <br>{ <br>OutputDebugString("In CPersistStorage::AddRef\r\n"); <br>++m_nCount; <br>return m_lpObj-&gt;AddRef(); <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of CPersistStorage and the <br>//      "object" object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrObj::Release        OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CPersistStorage::Release () <br>{ <br>OutputDebugString("In CPersistStorage::Release\r\n"); <br>--m_nCount; <br>return m_lpObj-&gt;Release(); <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::InitNew <br>// <br>// Purpose: <br>// <br>//      Used to give a new OLE object a ptr to its storage. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE pStg  - Pointer to the storage <br>// <br>// Return Value: <br>// <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>//      IStorage::AddRef            OLE <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::InitNew (LPSTORAGE pStg) <br>{ <br>OutputDebugString("In CPersistStorage::InitNew\r\n"); <br> <br>// release any streams and storages that may be open <br>ReleaseStreamsAndStorage(); <br> <br>m_lpObj-&gt;m_lpStorage = pStg; <br> <br>// AddRef the new Storage <br>if (m_lpObj-&gt;m_lpStorage) <br>m_lpObj-&gt;m_lpStorage-&gt;AddRef(); <br> <br>CreateStreams(m_lpObj-&gt;m_lpStorage); <br> <br>return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::GetClassID <br>// <br>// Purpose: <br>// <br>//      Returns the CLSID of this object. <br>// <br>// Parameters: <br>// <br>//      LPCLSID lpClassID   - Out ptr in which to return the CLSID <br>// <br>// Return Value: <br>// <br>//       S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::GetClassID  ( LPCLSID lpClassID) <br>{ <br>OutputDebugString("In CPersistStorage::GetClassID\r\n"); <br> <br>*lpClassID = GUID_SIMPLE; <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::Save <br>// <br>// Purpose: <br>// <br>//      Instructs the object to save itself into the storage. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE pStgSave  - Storage in which the object should be saved <br>// <br>//      BOOL fSameAsLoad    - TRUE if pStgSave is the same as the storage <br>//                            that the object was originally created with. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CPersistStorage::InitNew    IPS.CPP <br>//      CSimpSvrObj::SaveToStorage  OBJ.CPP <br>// <br>// <br>// Comments: <br>// <br>//      A real app will want better error checking in this method. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::Save  ( LPSTORAGE pStgSave, BOOL fSameAsLoad) <br>{ <br>OutputDebugString("In CPersistStorage::Save\r\n"); <br> <br>// save the data <br>m_lpObj-&gt;SaveToStorage (pStgSave, fSameAsLoad); <br> <br>m_lpObj-&gt;m_fSaveWithSameAsLoad = fSameAsLoad; <br>m_lpObj-&gt;m_fNoScribbleMode = TRUE; <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::SaveCompleted <br>// <br>// Purpose: <br>// <br>//      Called when the container is finished saving the object <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE pStgNew   - ptr to the new storage <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::SaveCompleted  ( LPSTORAGE pStgNew) <br>{ <br>OutputDebugString("In CPersistStorage::SaveCompleted\r\n"); <br> <br>if (pStgNew) <br>{ <br>ReleaseStreamsAndStorage(); <br>m_lpObj-&gt;m_lpStorage = pStgNew; <br>m_lpObj-&gt;m_lpStorage-&gt;AddRef(); <br>OpenStreams(pStgNew); <br>} <br> <br> <br>/* OLE2NOTE: it is only legal to perform a Save or SaveAs operation <br>**    on an embedded object. if the document is a file-based document <br>**    then we can not be changed to a IStorage-base object. <br>** <br>**      fSameAsLoad   lpStgNew     Type of Save     Send OnSave <br>**    --------------------------------------------------------- <br>**         TRUE        NULL        SAVE             YES <br>**         TRUE        ! NULL      SAVE *           YES <br>**         FALSE       ! NULL      SAVE AS          YES <br>**         FALSE       NULL        SAVE COPY AS     NO <br>** <br>**    * this is a strange case that is possible. it is inefficient <br>**    for the caller; it would be better to pass lpStgNew==NULL for <br>**    the Save operation. <br>*/ <br> <br>if ( pStgNew || m_lpObj-&gt;m_fSaveWithSameAsLoad) <br>{ <br>if (m_lpObj-&gt;m_fNoScribbleMode) <br>m_lpObj-&gt;GetOleAdviseHolder()-&gt;SendOnSave();  // normally would clear a <br>  // dirty bit <br>m_lpObj-&gt;m_fSaveWithSameAsLoad = FALSE; <br>} <br> <br>m_lpObj-&gt;m_fNoScribbleMode = FALSE; <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::Load <br>// <br>// Purpose: <br>// <br>//      Instructs the object to be loaded from storage. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE pStg  - Ptr to the storage in which to be loaded <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      CSimpSvrObj::LoadFromStorage    OBJ.CPP <br>// <br>// <br>// Comments: <br>// <br>//      A real app will want better error checking in this method. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::Load  ( LPSTORAGE pStg) <br>{ <br>OutputDebugString("In CPersistStorage::Load\r\n"); <br> <br>// remember the storage <br>if (m_lpObj-&gt;m_lpStorage) <br>{ <br>m_lpObj-&gt;m_lpStorage-&gt;Release(); <br>m_lpObj-&gt;m_lpStorage = NULL; <br>} <br> <br>m_lpObj-&gt;m_lpStorage = pStg; <br> <br>m_lpObj-&gt;m_lpStorage-&gt;AddRef(); <br> <br>OpenStreams(m_lpObj-&gt;m_lpStorage); <br> <br>m_lpObj-&gt;LoadFromStorage(); <br> <br> <br>return  S_OK ; <br>}; <br> <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::IsDirty <br>// <br>// Purpose: <br>// <br>//      Returns whether or not the object is dirty w/respect to its <br>//      Storage <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// <br>// Comments: <br>// <br>//      This sample does not implement this function, although a <br>//      real application should. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::IsDirty() <br>{ <br>OutputDebugString("In CPersistStorage::IsDirty\r\n"); <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::HandsOffStorage <br>// <br>// Purpose: <br>// <br>//      Forces the object to release its handle to its storage. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CPersistStorage::HandsOffStorage  () <br>{ <br>OutputDebugString("In CPersistStorage::HandsOffStorage\r\n"); <br> <br>ReleaseStreamsAndStorage(); <br> <br>return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::CreateStreams <br>// <br>// Purpose: <br>// <br>//      Creates the streams that are held open for the object's lifetime. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE lpStg -   Storage in which to create the streams <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>//      IStream::Release            OLE <br>//      IStorage::CreateStream      OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CPersistStorage::CreateStreams(LPSTORAGE lpStg) <br>{ <br>if (m_lpObj-&gt;m_lpColorStm) <br>m_lpObj-&gt;m_lpColorStm-&gt;Release(); <br> <br>if (m_lpObj-&gt;m_lpSizeStm) <br>m_lpObj-&gt;m_lpSizeStm-&gt;Release(); <br> <br>// create a stream to save the colors <br>//@@WTK WIN32, UNICODE <br>//lpStg-&gt;CreateStream ( "RGB", <br>lpStg-&gt;CreateStream ( OLESTR("RGB"), <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, <br>   0, <br>   0, <br>   &amp;m_lpObj-&gt;m_lpColorStm); <br> <br>// create a stream to save the size <br>//@@WTK WIN32, UNICODE <br>//lpStg-&gt;CreateStream ( "size", <br>lpStg-&gt;CreateStream ( OLESTR("size"), <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, <br>   0, <br>   0, <br>   &amp;m_lpObj-&gt;m_lpSizeStm); <br>} <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::OpenStreams <br>// <br>// Purpose: <br>// <br>//      Opens the streams in a storage. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE lpStg -   Storage in which to open the streams. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CPersistStorage::OpenStreams(LPSTORAGE lpStg) <br>{ <br>if (m_lpObj-&gt;m_lpColorStm) <br>m_lpObj-&gt;m_lpColorStm-&gt;Release(); <br> <br>if (m_lpObj-&gt;m_lpSizeStm) <br>m_lpObj-&gt;m_lpSizeStm-&gt;Release(); <br> <br>// open the color stream <br>//@@WTK WIN32, UNICODE <br>//lpStg-&gt;OpenStream ( "RGB", <br>lpStg-&gt;OpenStream ( OLESTR("RGB"), <br>   0, <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE, <br>   0, <br>   &amp;m_lpObj-&gt;m_lpColorStm); <br> <br>// open the color stream <br>//@@WTK WIN32, UNICODE <br>//lpStg-&gt;OpenStream ( "size", <br>lpStg-&gt;OpenStream ( OLESTR("size"), <br>   0, <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE, <br>   0, <br>   &amp;m_lpObj-&gt;m_lpSizeStm); <br>} <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::ReleaseStreamsAndStorage <br>// <br>// Purpose: <br>// <br>//      Releases the stream and storage ptrs <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CPersistStorage::ReleaseStreamsAndStorage() <br>{ <br>if (m_lpObj-&gt;m_lpColorStm) <br>{ <br>m_lpObj-&gt;m_lpColorStm-&gt;Release(); <br>m_lpObj-&gt;m_lpColorStm = NULL; <br>} <br> <br>if (m_lpObj-&gt;m_lpSizeStm) <br>{ <br>m_lpObj-&gt;m_lpSizeStm-&gt;Release(); <br>m_lpObj-&gt;m_lpSizeStm = NULL; <br>} <br> <br>if (m_lpObj-&gt;m_lpStorage) <br>{ <br>m_lpObj-&gt;m_lpStorage-&gt;Release(); <br>m_lpObj-&gt;m_lpStorage = NULL; <br>} <br>} <br> <br>//********************************************************************** <br>// <br>// CPersistStorage::CreateStreams <br>// <br>// Purpose: <br>// <br>//      Creates temporary streams in a storage. <br>// <br>// Parameters: <br>// <br>//      LPSTORAGE lpStg                 - Pointer to the storage <br>// <br>//      LPSTREAM FAR* lplpTempColor     - Color Stream <br>// <br>//      LPSTREAM FAR* lplpTempSize      - Size Stream <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IStorage::Release           OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void CPersistStorage::CreateStreams(LPSTORAGE lpStg, LPSTREAM FAR* lplpTempColor,LPSTREAM FAR* lplpTempSize) <br>{ <br>// create a stream to save the colors <br> //@@WTK WIN32, UNICODE <br> //lpStg-&gt;CreateStream ( "RGB", <br> lpStg-&gt;CreateStream ( OLESTR("RGB"), <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, <br>   0, <br>   0, <br>   lplpTempColor); <br> <br>// create a stream to save the size <br>//@@WTK WIN32, UNICODE <br>//lpStg-&gt;CreateStream ( "size", <br>lpStg-&gt;CreateStream ( OLESTR("size"), <br>   STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, <br>   0, <br>   0, <br>   lplpTempSize); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

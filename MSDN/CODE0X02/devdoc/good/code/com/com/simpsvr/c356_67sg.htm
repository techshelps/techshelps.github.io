<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context370"></a>IOO.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IOO.CPP <br>// <br>//    Implementation file for the COleObject Class <br>// <br>// Functions: <br>// <br>//    See ioo.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "ioo.h" <br>#include "app.h" <br>#include "doc.h" <br> <br>#define VERB_OPEN 1 <br> <br>//********************************************************************** <br>// <br>// COleObject::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::QueryInterface ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In COleObject::QueryInterface\r\n"); <br>        return m_lpObj-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on COleObject and the "object" <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on the Object. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>//      CSimpSvrObj::AddRef         OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleObject::AddRef () <br>{ <br>        OutputDebugString("In COleObject::AddRef\r\n"); <br>        ++m_nCount; <br>        return m_lpObj-&gt;AddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of COleObject and the <br>//      "object" object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrObj::Release        OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleObject::Release () <br>{ <br>        OutputDebugString("In COleObject::Release\r\n"); <br>        --m_nCount; <br>        return m_lpObj-&gt;Release(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::SetClientSite <br>// <br>// Purpose: <br>// <br>//      Called to notify the object of it's client site. <br>// <br>// Parameters: <br>// <br>//      LPOLECLIENTSITE pClientSite     - ptr to new client site <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IOleClientSite::Release     Container <br>//      IOleClientSite::AddRef      Container <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::SetClientSite  ( LPOLECLIENTSITE pClientSite) <br>{ <br>        OutputDebugString("In COleObject::SetClientSite\r\n"); <br> <br>        // if we already have a client site, release it. <br>        if (m_lpObj-&gt;m_lpOleClientSite) <br>                { <br>                m_lpObj-&gt;m_lpOleClientSite-&gt;Release(); <br>                m_lpObj-&gt;m_lpOleClientSite = NULL; <br>                } <br> <br>        // store copy of the client site. <br>        m_lpObj-&gt;m_lpOleClientSite = pClientSite; <br> <br>        // AddRef it so it doesn't go away. <br>        if (m_lpObj-&gt;m_lpOleClientSite) <br>                m_lpObj-&gt;m_lpOleClientSite-&gt;AddRef(); <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::Advise <br>// <br>// Purpose: <br>// <br>//      Called to set up an advise on the OLE object. <br>// <br>// Parameters: <br>// <br>//      LPADVISESINK pAdvSink       - ptr to the Advise Sink for notification <br>// <br>//      DWORD FAR* pdwConnection    - place to return the connection ID. <br>// <br>// Return Value: <br>// <br>//      Passed back from IOleAdviseHolder::Advise. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CreateOleAdviseHolder       OLE API <br>//      IOleAdviseHolder::Advise    OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::Advise ( LPADVISESINK pAdvSink, DWORD FAR* pdwConnection) <br>{ <br>        OutputDebugString("In COleObject::Advise\r\n"); <br> <br>        // if we haven't made an OleAdviseHolder yet, make one. <br>        if (!m_lpObj-&gt;m_lpOleAdviseHolder) <br>                CreateOleAdviseHolder(&amp;m_lpObj-&gt;m_lpOleAdviseHolder); <br> <br>        // pass this call onto the OleAdviseHolder. <br>        return m_lpObj-&gt;m_lpOleAdviseHolder-&gt;Advise(pAdvSink, pdwConnection); <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::SetHostNames <br>// <br>// Purpose: <br>// <br>//      Called to pass strings for Window titles. <br>// <br>// Parameters: <br>// <br>//      LPCSTR szContainerApp   -   ptr to string describing Container App <br>// <br>//      LPCSTR szContainerObj   -   ptr to string describing Object <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This routine is called so that the server application can <br>//      set the window title appropriately. <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//STDMETHODIMP COleObject::SetHostNames  ( LPCSTR szContainerApp, LPCSTR szContainerObj) <br>STDMETHODIMP COleObject::SetHostNames  ( LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) <br>{ <br>        OutputDebugString("In COleObject::SetHostNames\r\n"); <br> <br>        return  S_OK; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::DoVerb <br>// <br>// Purpose: <br>// <br>//      Called by the container application to invoke a verb. <br>// <br>// Parameters: <br>// <br>//      LONG iVerb                  - The value of the verb to be <br>//                                    invoked. <br>// <br>//      LPMSG lpmsg                 - The message that caused the <br>//                                    verb to be invoked. <br>// <br>//      LPOLECLIENTSITE pActiveSite - Ptr to the active client site. <br>// <br>//      LONG lindex                 - Used in extended layout <br>// <br>//      HWND hwndParent             - This should be the window handle of <br>//                                    the window in which we are contained. <br>//                                    This value could be used to "fake" <br>//                                    inplace activation in a manner similar <br>//                                    to Video for Windows in OLE 1.0. <br>// <br>//      LPCRECT lprcPosRect         - The rectangle that contains the object <br>//                                    within hwndParent.  Also used to <br>//                                    "fake" inplace activation. <br>// <br>// Return Value: <br>// <br>//      OLE_E_NOTINPLACEACTIVE      - Returned if attempted to undo while not <br>//                                    inplace active. <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      OutputDebugString                   Windows API <br>//      ShowWindow                          Windows API <br>//      CSimpSvrObj::DoInPlaceActivate      OBJ.CPP <br>//      CSimpSvrObj::DoInPlaceHide          OBJ.CPP <br>//      COleObject::OpenEdit                IOO.CPP <br>//      CSimpSvrDoc::GethDocWnd             DOC.H <br>//      COleInPlaceObj::InPlaceDeactivate   IOIPO.CPP <br>// <br>// Comments: <br>// <br>//      Be sure to look at TECHNOTES.WRI included with the OLE <br>//      SDK for a description of handling the inplace verbs <br>//      properly. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::DoVerb  (  LONG iVerb, <br>                                                                        LPMSG lpmsg, <br>                                                                        LPOLECLIENTSITE pActiveSite, <br>                                                                        LONG lindex, <br>                                                                        HWND hwndParent, <br>                                                                        LPCRECT lprcPosRect) <br>{ <br>        OutputDebugString("In COleObject::DoVerb\r\n"); <br> <br>        switch (iVerb) <br>                { <br>                case OLEIVERB_SHOW: <br>                case OLEIVERB_PRIMARY: <br>                        if (m_fOpen) <br>                                SetFocus(m_lpObj-&gt;m_lpDoc-&gt;GethAppWnd()); <br>                        else if (m_lpObj-&gt;DoInPlaceActivate(iVerb) == FALSE) <br>                                OpenEdit(pActiveSite); <br>                        break; <br> <br>                case OLEIVERB_UIACTIVATE: <br>                        if (m_fOpen) <br>                                return  E_FAIL; <br> <br>                        // inplace activate <br>                        if (!m_lpObj-&gt;DoInPlaceActivate(iVerb)) <br>                                return  E_FAIL; <br>                        break; <br> <br>                case OLEIVERB_DISCARDUNDOSTATE: <br>                        // don't have to worry about this situation as we don't <br>                        // support an undo state. <br>                        if (!m_lpObj-&gt;m_fInPlaceActive) <br>                                return OLE_E_NOT_INPLACEACTIVE; <br>                        break; <br> <br>                case OLEIVERB_HIDE: <br>                        // if inplace active, do an "inplace" hide, otherwise <br>                        // just hide the app window. <br>                        if (m_lpObj-&gt;m_fInPlaceActive) <br>                                { <br>                                m_lpObj-&gt;DeactivateUI(); <br>                                m_lpObj-&gt;DoInPlaceHide(); <br>                                } <br>                        else <br>                                m_lpObj-&gt;m_lpDoc-&gt;GetApp()-&gt;HideAppWnd(); <br>                        break; <br> <br>                case OLEIVERB_OPEN: <br>                case VERB_OPEN: <br>                        // if inplace active, deactivate <br>                        if (m_lpObj-&gt;m_fInPlaceActive) <br>                                m_lpObj-&gt;m_OleInPlaceObject.InPlaceDeactivate(); <br> <br>                        // open into another window. <br>                        OpenEdit(pActiveSite); <br>                        break; <br> <br>                default: <br>                        if (iVerb &lt; 0) <br>                                return E_FAIL; <br>                } <br> <br>        return  S_OK; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetExtent <br>// <br>// Purpose: <br>// <br>//      Returns the extent of the object. <br>// <br>// Parameters: <br>// <br>//      DWORD dwDrawAspect  - The aspect in which to get the size. <br>// <br>//      LPSIZEL lpsizel     - Out ptr to return the size. <br>// <br>// Return Value: <br>// <br>// <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      XformWidthInPixelsToHimetric    OLESTD <br>//      XformHeightInPixelsToHimetric   OLESTD <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetExtent  ( DWORD dwDrawAspect, LPSIZEL lpsizel) <br>{ <br>        OutputDebugString("In COleObject::GetExtent\r\n"); <br> <br>        SCODE sc = E_FAIL; <br> <br>        // Only DVASPECT_CONTENT is supported.... <br>        if (dwDrawAspect == DVASPECT_CONTENT) <br>                { <br>                sc = S_OK; <br> <br>                // return the correct size in HIMETRIC... <br>                lpsizel-&gt;cx = XformWidthInPixelsToHimetric(NULL, m_lpObj-&gt;m_size.x); <br>                lpsizel-&gt;cy = XformHeightInPixelsToHimetric(NULL, m_lpObj-&gt;m_size.y); <br>                } <br> <br>        return  sc ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::Update <br>// <br>// Purpose: <br>// <br>//      Called to get the most up to date data <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                            Location <br>// <br>//      OutputDebugString                   Windows API <br>//      IDataAdviseHolder::SendOnDataChange OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::Update() <br>{ <br>        OutputDebugString("In COleObject::Update\r\n"); <br> <br>        // force an update <br>        m_lpObj-&gt;SendOnDataChange(); <br> <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::Close <br>// <br>// Purpose: <br>// <br>//      Called when the OLE object needs to be closed <br>// <br>// Parameters: <br>// <br>//      DWORD dwSaveOption  - Flags to instruct the server how to prompt <br>//                            the user. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrDoc::Close          DOC.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::Close  ( DWORD dwSaveOption) <br>{ <br>        OutputDebugString("In COleObject::Close\r\n"); <br> <br>        // delegate to the document object. <br>        m_lpObj-&gt;m_lpDoc-&gt;Close(); <br> <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::Unadvise <br>// <br>// Purpose: <br>// <br>//      Breaks down an OLE advise that has been set up on this object. <br>// <br>// Parameters: <br>// <br>//      DWORD dwConnection  - Connection that needs to be broken down <br>// <br>// Return Value: <br>// <br>//      Passed back from IOleAdviseHolder::Unadvise <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IOleAdviseHolder::Unadvise  OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::Unadvise ( DWORD dwConnection) <br>{ <br>        OutputDebugString("In COleObject::Unadvise\r\n"); <br> <br>        // pass on to OleAdviseHolder. <br>        return m_lpObj-&gt;m_lpOleAdviseHolder-&gt;Unadvise(dwConnection); <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::EnumVerbs <br>// <br>// Purpose: <br>// <br>//      Enumerates the verbs associated with this object. <br>// <br>// Parameters: <br>// <br>//      LPENUMOLEVERB FAR* ppenumOleVerb    - Out ptr in which to return <br>//                                            the enumerator <br>// <br>// Return Value: <br>// <br>//      OLE_S_USEREG    - Instructs OLE to use the verbs found in the <br>//                        REG DB for this server. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      In a .DLL, an application cannot return OLE_S_USEREG.  This is <br>//      due to the fact that the default object handler is not being <br>//      used, and the container is really making direct function calls <br>//      into the server .DLL. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::EnumVerbs  ( LPENUMOLEVERB FAR* ppenumOleVerb) <br>{ <br>        OutputDebugString("In COleObject::EnumVerbs\r\n"); <br> <br>        return  OLE_S_USEREG ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetClientSite <br>// <br>// Purpose: <br>// <br>//      Called to get the current client site of the object. <br>// <br>// Parameters: <br>// <br>//      LPOLECLIENTSITE FAR* ppClientSite   - Out ptr in which to return the <br>//                                            client site. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetClientSite  ( LPOLECLIENTSITE FAR* ppClientSite) <br>{ <br>        OutputDebugString("In COleObject::GetClientSite\r\n"); <br>        *ppClientSite = m_lpObj-&gt;m_lpOleClientSite; <br>        return  S_OK ; <br>} <br> <br>//********************************************************************** <br>// <br>// COleObject::SetMoniker <br>// <br>// Purpose: <br>// <br>//      Used to set the objects moniker <br>// <br>// Parameters: <br>// <br>//      DWORD dwWhichMoniker    - Type of moniker being set <br>// <br>//      LPMONIKER pmk           - Pointer to the moniker <br>// <br>// Return Value: <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::SetMoniker  ( DWORD dwWhichMoniker, LPMONIKER pmk) <br>{ <br>        OutputDebugString("In COleObject::SetMoniker\r\n"); <br> <br>        LPMONIKER lpmk; <br> <br>        if (! m_lpObj-&gt;GetOleClientSite()) <br>                return  E_FAIL; <br> <br>        if (m_lpObj-&gt;GetOleClientSite()-&gt;GetMoniker (OLEGETMONIKER_ONLYIFTHERE, OLEWHICHMK_OBJFULL, &amp;lpmk) != NOERROR) <br>                return  E_FAIL; <br> <br> <br>        if (m_lpObj-&gt;GetOleAdviseHolder()) <br>                m_lpObj-&gt;GetOleAdviseHolder()-&gt;SendOnRename(lpmk); <br> <br>        LPRUNNINGOBJECTTABLE lpRot; <br> <br>        if (GetRunningObjectTable(0, &amp;lpRot) == NOERROR) <br>                { <br>                if (m_lpObj-&gt;m_dwRegister) <br>                        lpRot-&gt;Revoke(m_lpObj-&gt;m_dwRegister); <br> <br>                lpRot-&gt;Register(0, m_lpObj, lpmk, &amp;m_lpObj-&gt;m_dwRegister); <br> <br>                lpRot-&gt;Release(); <br>                } <br> <br> <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetMoniker <br>// <br>// Purpose: <br>// <br>//// <br>// Parameters: <br>// <br>//      DWORD dwAssign          - Assignment for the moniker <br>// <br>//      DWORD dwWhichMoniker    - Which moniker to return <br>// <br>//      LPMONIKER FAR* ppmk     - An out ptr to return the moniker <br>// <br>// Return Value: <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetMoniker  (  DWORD dwAssign, DWORD dwWhichMoniker, <br>                                                                                LPMONIKER FAR* ppmk) <br>{ <br>        OutputDebugString("In COleObject::GetMoniker\r\n"); <br>        // need to NULL the out parameter <br>        *ppmk = NULL; <br> <br>        return m_lpObj-&gt;GetOleClientSite()-&gt;GetMoniker (OLEGETMONIKER_ONLYIFTHERE, OLEWHICHMK_OBJFULL, ppmk); <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::InitFromData <br>// <br>// Purpose: <br>// <br>//      Initialize the object from the passed pDataObject. <br>// <br>// Parameters: <br>// <br>//      LPDATAOBJECT pDataObject    - Pointer to data transfer object <br>//                                    to be used in the initialization <br>// <br>//      BOOL fCreation              - TRUE if the object is currently being <br>//                                    created. <br>// <br>//      DWORD dwReserved            - Reserved <br>// <br>// Return Value: <br>// <br>//      S_FALSE <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      We don't support this functionality, so we will always return <br>//      error. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::InitFromData  ( LPDATAOBJECT pDataObject, <br>                                                                                 BOOL fCreation, <br>                                                                                 DWORD dwReserved) <br>{ <br>        OutputDebugString("In COleObject::InitFromData\r\n"); <br> <br>        return  S_FALSE ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetClipboardData <br>// <br>// Purpose: <br>// <br>//      Returns an IDataObject that is the same as doing an OleSetClipboard <br>// <br>// Parameters: <br>// <br>//      DWORD dwReserved                - Reserved <br>// <br>//      LPDATAOBJECT FAR* ppDataObject  - Out ptr for the Data Object. <br>// <br>// Return Value: <br>// <br>//      OLE_E_NOTSUPPORTED <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Support of this method is optional. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetClipboardData  ( DWORD dwReserved, <br>                                                                                         LPDATAOBJECT FAR* ppDataObject) <br>{ <br>        OutputDebugString("In COleObject::GetClipboardData\r\n"); <br>        // NULL the out ptr <br>        *ppDataObject = NULL; <br>        return  E_NOTIMPL ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::IsUpToDate <br>// <br>// Purpose: <br>// <br>//      Determines if an object is up to date <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Our embedded object is always up to date.  This function is <br>//      particularly useful in linking situations. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::IsUpToDate() <br>{ <br>        OutputDebugString("In COleObject::IsUpToDate\r\n"); <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetUserClassID <br>// <br>// Purpose: <br>// <br>//      Returns the applications CLSID <br>// <br>// Parameters: <br>// <br>//      CLSID FAR* pClsid   - Out ptr to return the CLSID <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CPersistStorage::GetClassID IPS.CPP <br>// <br>// Comments: <br>// <br>//      This function is just delegated to IPS::GetClassID. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetUserClassID  ( CLSID FAR* pClsid) <br>{ <br>        OutputDebugString("In COleObject::GetUserClassID\r\n"); <br> <br>        m_lpObj-&gt;m_PersistStorage.GetClassID(pClsid); <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetUserType <br>// <br>// Purpose: <br>// <br>//      Used to get a user presentable id for this object <br>// <br>// Parameters: <br>// <br>//      DWORD dwFormOfType      - The ID requested <br>// <br>//      LPSTR FAR* pszUserType  - Out ptr to return the string <br>// <br>// Return Value: <br>// <br>//      OLE_S_USEREG    - Use the reg db to get these entries. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>//@@WTK WIN32, UNICODE <br>//STDMETHODIMP COleObject::GetUserType  ( DWORD dwFormOfType, LPSTR FAR* pszUserType) <br>STDMETHODIMP COleObject::GetUserType  ( DWORD dwFormOfType, LPOLESTR FAR* pszUserType) <br>{ <br>        OutputDebugString("In COleObject::GetUserType\r\n"); <br> <br>        return  OLE_S_USEREG ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::SetExtent <br>// <br>// Purpose: <br>// <br>//      Called to set the extent of the object. <br>// <br>// Parameters: <br>// <br>//      DWORD dwDrawAspect  - Aspect to have its size set <br>// <br>//      LPSIZEL lpsizel     - New size of the object. <br>// <br>// Return Value: <br>// <br>//      E_NOTIMPL   - This function is not curently implemented. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::SetExtent  ( DWORD dwDrawAspect, LPSIZEL lpsizel) <br>{ <br>        OutputDebugString("In COleObject::SetExtent\r\n"); <br>        return  E_NOTIMPL; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::EnumAdvise <br>// <br>// Purpose: <br>// <br>//      Returns an enumerate which enumerates the outstanding advises <br>//      associated with this OLE object. <br>// <br>// Parameters: <br>// <br>//      LPENUMSTATDATA FAR* ppenumAdvise - Out ptr in which to return <br>//                                         the enumerator. <br>// <br>// Return Value: <br>// <br>//      Passed on from IOleAdviseHolder::EnumAdvise. <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      IOleAdviseHolder::EnumAdvise    OLE <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::EnumAdvise  ( LPENUMSTATDATA FAR* ppenumAdvise) <br>{ <br>        OutputDebugString("In COleObject::EnumAdvise\r\n"); <br>        // need to NULL the out parameter <br>        *ppenumAdvise = NULL; <br> <br>        // pass on to the OLE Advise holder. <br>        return m_lpObj-&gt;m_lpOleAdviseHolder-&gt;EnumAdvise(ppenumAdvise); <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::GetMiscStatus <br>// <br>// Purpose: <br>// <br>//      Return status information about the object <br>// <br>// Parameters: <br>// <br>//      DWORD dwAspect          - Aspect interested in. <br>// <br>//      DWORD FAR* pdwStatus    - Out ptr in which to return the bits. <br>// <br>// Return Value: <br>// <br>//      CO_E_READREGDB  - Tell the library to use the reg DB. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::GetMiscStatus  ( DWORD dwAspect, DWORD FAR* pdwStatus) <br>{ <br>        OutputDebugString("In COleObject::GetMiscStatus\r\n"); <br>        // need to NULL the out parameter <br>        *pdwStatus = NULL; <br>        return  OLE_S_USEREG ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::SetColorScheme <br>// <br>// Purpose: <br>// <br>//      Used to set the palette for the object to use. <br>// <br>// Parameters: <br>// <br>//      LPLOGPALETTE lpLogpal   - Pointer to the LOGPALETTE to be used. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This server ignores this method. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleObject::SetColorScheme  ( LPLOGPALETTE lpLogpal) <br>{ <br>        OutputDebugString("In COleObject::SetColorScheme\r\n"); <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleObject::OpenEdit <br>// <br>// Purpose: <br>// <br>//      Used to Open the object into a seperate window. <br>// <br>// Parameters: <br>// <br>//      LPOLECLIENTSITE pActiveSite - Pointer to the Active clientsite. <br>// <br>// Return Value: <br>// <br>//      None. <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      IOleClientSite::OnShowWindow    Container <br>//      ShowWindow                      Windows API <br>//      UpdateWindow                    Windows API <br>//      OutputDebugString               Windows API <br>//      CSimpSvrDoc::GethAppWnd         DOC.H <br>//      CSimpSvrDoc::GethHatchWnd       DOC.H <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>void COleObject::OpenEdit(LPOLECLIENTSITE pActiveSite) <br>{ <br>   if (m_lpObj-&gt;GetOleClientSite()) <br>           m_lpObj-&gt;GetOleClientSite()-&gt;ShowObject(); <br> <br> <br>        m_fOpen = TRUE; </code></pre>
<p>
</p>
<pre><code><br>        // tell the site we are opening so the object can be hatched out. <br>        if (m_lpObj-&gt;GetOleClientSite()) <br>                m_lpObj-&gt;GetOleClientSite()-&gt;OnShowWindow(TRUE); <br> <br> <br>        m_lpObj-&gt;m_lpDoc-&gt;ShowDocWnd(); <br> <br>        m_lpObj-&gt;m_lpDoc-&gt;HideHatchWnd(); <br> <br>        // Show app window. <br>        m_lpObj-&gt;m_lpDoc-&gt;GetApp()-&gt;ShowAppWnd(); <br> <br>        SetFocus(m_lpObj-&gt;m_lpDoc-&gt;GethAppWnd()); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

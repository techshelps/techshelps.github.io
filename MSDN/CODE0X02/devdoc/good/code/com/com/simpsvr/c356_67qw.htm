<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOIPO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context368"></a>IOIPO.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IOIPO.CPP <br>// <br>//    Implementation file for the CClassFactory Class <br>// <br>// Functions: <br>// <br>//    See ioipo.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "ioipo.h" <br>#include "app.h" <br>#include "doc.h" <br>#include "math.h" <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::QueryInterface ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In COleInPlaceObject::QueryInterface\r\n"); <br>        // need to NULL the out parameter <br>        *ppvObj = NULL; <br>        return m_lpObj-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on COleInPlaceObject and the "object" <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on the Object <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>//      CSimpSvrObj::AddRef         OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceObject::AddRef () <br>{ <br>        OutputDebugString("In COleInPlaceObject::AddRef\r\n"); <br>        ++m_nCount; <br>        return m_lpObj-&gt;AddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of COleInPlaceObject and the <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrObj::Release        OBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) COleInPlaceObject::Release () <br>{ <br>        OutputDebugString("In COleInPlaceObject::Release\r\n"); <br>        --m_nCount; <br>        return m_lpObj-&gt;Release(); <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::InPlaceDeactivate <br>// <br>// Purpose: <br>// <br>//      Called to deactivat the object <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>// <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      OutputDebugString                       Windows API <br>//      IOleClientSite::QueryInterface          Container <br>//      IOleInPlaceSite::OnInPlaceDeactivate    Container <br>//      IOleInPlaceSite::Release                Container <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP COleInPlaceObject::InPlaceDeactivate() <br>{ <br>         OutputDebugString("In COleInPlaceObject::InPlaceDeactivate\r\n"); <br> <br>         // if not inplace active, return NOERROR <br>         if (!m_lpObj-&gt;m_fInPlaceActive) <br>                 return NOERROR; <br> <br>         // clear inplace flag <br>         m_lpObj-&gt;m_fInPlaceActive = FALSE; <br> <br>         // deactivate the UI <br>         m_lpObj-&gt;DeactivateUI(); <br>         m_lpObj-&gt;DoInPlaceHide(); <br> <br>         // tell the container that we are deactivating. <br>         if (m_lpObj-&gt;m_lpIPSite) <br>                 { <br>                 m_lpObj-&gt;m_lpIPSite-&gt;OnInPlaceDeactivate(); <br>                 m_lpObj-&gt;m_lpIPSite-&gt;Release(); <br>                 m_lpObj-&gt;m_lpIPSite =NULL; <br>                 } <br> <br>        return S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::UIDeactivate <br>// <br>// Purpose: <br>// <br>//      Instructs us to remove our UI. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      NOERROR <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      OutputDebugString                       Windows API <br>//      IOleInPlaceUIWindow::SetActiveObject    Container <br>//      IOleInPlaceFrame::SetActiveObject       Container <br>//      IOleClientSite::QueryInterface          Container <br>//      IOleInPlaceSite::OnUIDeactivate         Container <br>//      IOleInPlaceSite::Release                Container <br>//      CSimpSvrObj::DoInPlaceHide              OBJ.H <br>//      IDataAdviseHolder::SendOnDataChange     OLE <br>// <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::UIDeactivate() <br>{ <br>        OutputDebugString("In COleInPlaceObject::UIDeactivate\r\n"); <br> <br>        m_lpObj-&gt;DeactivateUI(); <br> <br>        return  S_OK; <br>} <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::SetObjectRects <br>// <br>// Purpose: <br>// <br>//      Called when the container clipping region or the object position <br>//      changes. <br>// <br>// Parameters: <br>// <br>//      LPCRECT lprcPosRect     - New Position Rect. <br>// <br>//      LPCRECT lprcClipRect    - New Clipping Rect. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IntersectRect               Windows API <br>//      OffsetRect                  Windows API <br>//      CopyRect                    Windows API <br>//      MoveWindow                  Windows API <br>//      CSimpSvrDoc::GethHatchWnd   DOC.H <br>//      CSimpSvrDoc::gethDocWnd     DOC.h <br>//      SetHatchWindowSize          OLESTD <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::SetObjectRects  ( LPCRECT lprcPosRect, LPCRECT lprcClipRect) <br>{ <br>        OutputDebugString("In COleInPlaceObject::SetObjectRects\r\n"); <br> <br>        RECT resRect; <br>        POINT pt; <br> <br>        // Get the intersection of the clipping rect and the position rect. <br>        IntersectRect(&amp;resRect, lprcPosRect, lprcClipRect); <br> <br>        m_lpObj-&gt;m_xOffset = abs (resRect.left - lprcPosRect-&gt;left); <br>        m_lpObj-&gt;m_yOffset = abs (resRect.top - lprcPosRect-&gt;top); <br> <br>        m_lpObj-&gt;m_scale = (float)(lprcPosRect-&gt;right - lprcPosRect-&gt;left)/m_lpObj-&gt;m_size.x; <br> <br>        if (m_lpObj-&gt;m_scale == 0) <br>                m_lpObj-&gt;m_scale = (float) 1.0; <br> <br>        char szBuffer[255]; <br>        wsprintf(szBuffer,"New Scale %3d\r\n",m_lpObj-&gt;m_scale); <br>        OutputDebugString(szBuffer); <br> <br>        // Adjust the size of the Hatch Window. <br>        SetHatchWindowSize(m_lpObj-&gt;m_lpDoc-&gt;GethHatchWnd(),(LPRECT) lprcPosRect, (LPRECT) lprcClipRect, &amp;pt); <br> <br>        // offset the rect <br>        OffsetRect(&amp;resRect, pt.x, pt.y); <br> <br>        CopyRect(&amp;m_lpObj-&gt;m_posRect, lprcPosRect); <br> <br>        // Move the actual object window <br>        MoveWindow(m_lpObj-&gt;m_lpDoc-&gt;GethDocWnd(), <br>                                   resRect.left, <br>                                   resRect.top, <br>                                   resRect.right - resRect.left, <br>                                   resRect.bottom - resRect.top, <br>                                   TRUE); <br> <br> <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::GetWindow <br>// <br>// Purpose: <br>// <br>//      Returns the Window handle of the inplace object <br>// <br>// Parameters: <br>// <br>//      HWND FAR* lphwnd    - Out pointer in which to return the window <br>//                            Handle. <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleDoc::GethDocWnd      DOC.H <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::GetWindow  ( HWND FAR* lphwnd) <br>{ <br>        OutputDebugString("In COleInPlaceObject::GetWindow\r\n"); <br>        *lphwnd = m_lpObj-&gt;m_lpDoc-&gt;GethDocWnd(); <br> <br>        return  S_OK ; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::ContextSensitiveHelp <br>// <br>// Purpose: <br>// <br>//      Used in performing Context Sensitive Help <br>// <br>// Parameters: <br>// <br>//      BOOL fEnterMode     - Flag to determine if enter or exiting <br>//                            Context Sensitive Help. <br>// <br>// Return Value: <br>// <br>//      E_NOTIMPL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This function is not implemented due to the fact that it is <br>//      beyond the scope of a simple object.  All *real* applications <br>//      are going to want to implement this function, otherwise any <br>//      container that supports context sensitive help will not work <br>//      properly while the object is in place. <br>// <br>//      See TECHNOTES.WRI include with the OLE SDK for details on <br>//      Implementing this method. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::ContextSensitiveHelp  ( BOOL fEnterMode) <br>{ <br>        OutputDebugString("In COleInPlaceObject::ContextSensitiveHelp\r\n"); <br>        return  E_NOTIMPL; <br>}; <br> <br>//********************************************************************** <br>// <br>// COleInPlaceObject::ReactivateAndUndo <br>// <br>// Purpose: <br>// <br>//      Called when the container wants to undo the last edit made in <br>//      the object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      INPLACE_E_NOTUNDOABLE <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Since this server does not support undo, the value <br>//      INPLACE_E_NOTUNDOABLE is always returned. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP COleInPlaceObject::ReactivateAndUndo  () <br>{ <br>        OutputDebugString("In COleInPlaceObject::ReactivateAndUndo\r\n"); <br>        return  INPLACE_E_NOTUNDOABLE ; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

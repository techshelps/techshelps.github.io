<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context360"></a>ICF.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: ICF.CPP <br>// <br>//    Implementation file for the CClassFactory Class <br>// <br>// Functions: <br>// <br>//    See icf.h for a list of member functions. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "app.h" <br>#include "doc.h" <br>#include "icf.h" <br> <br>//********************************************************************** <br>// <br>// CClassFactory::QueryInterface <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   Interface being queried for. <br>// <br>//      LPVOID FAR *ppvObj  -   Out pointer for the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            - Success <br>//      E_NOINTERFACE   - Failure <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrApp::QueryInterface APP.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CClassFactory::QueryInterface  ( REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>OutputDebugString("In CClassFactory::QueryInterface\r\n"); <br> <br>SCODE sc = S_OK; <br> <br>if ( (riid == IID_IUnknown) || <br> (riid == IID_IClassFactory) ) <br>*ppvObj = this; <br>else <br>{ <br>*ppvObj = NULL; <br>sc = E_NOINTERFACE; <br>} <br> <br>if (*ppvObj) <br>((LPUNKNOWN)*ppvObj)-&gt;AddRef(); <br> <br>// pass it on to the Application object <br>return sc; <br>}; <br> <br>//********************************************************************** <br>// <br>// CClassFactory::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on CClassFactory and the application <br>//      object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The Reference count on CClassFactory <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OuputDebugString            Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory::AddRef () <br>{ <br>OutputDebugString("In CClassFactory::AddRef\r\n"); <br> <br>return ++m_nCount; <br>}; <br> <br>//********************************************************************** <br>// <br>// CClassFactory::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of CClassFactory and the <br>//      application object. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The new reference count <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory::Release () <br>{ <br>OutputDebugString("In CClassFactory::Release\r\n"); <br> <br>if (--m_nCount == 0) { <br>delete this; <br>        return 0; <br>    } <br> <br>return m_nCount; <br>}; <br> <br> <br>//********************************************************************** <br>// <br>// CClassFactory::CreateInstance <br>// <br>// Purpose: <br>// <br>//      Instantiates a new OLE object <br>// <br>// Parameters: <br>// <br>//      LPUNKNOWN pUnkOuter     - Pointer to the controlling unknown <br>// <br>//      REFIID riid             - The interface type to fill in ppvObject <br>// <br>//      LPVOID FAR* ppvObject   - Out pointer for the object <br>// <br>// Return Value: <br>// <br>//      S_OK                    - Creation was successful <br>//      CLASS_E_NOAGGREGATION   - Tried to be created as part of an aggregate <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrDoc::CreateObject   DOC.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CClassFactory::CreateInstance ( LPUNKNOWN pUnkOuter, <br>  REFIID riid, <br>  LPVOID FAR* ppvObject) <br>{ <br>HRESULT hErr; <br> <br>OutputDebugString("In CClassFactory::CreateInstance\r\n"); <br> <br>// need to NULL the out parameter <br>*ppvObject = NULL; <br> <br>// we don't support aggregation... <br>if (pUnkOuter) <br>{ <br>hErr = CLASS_E_NOAGGREGATION; <br>goto error; <br>} <br> <br>hErr = m_lpApp-&gt;m_lpDoc-&gt;CreateObject(riid, ppvObject); <br> <br>error: <br>return hErr; <br>}; <br> <br>//********************************************************************** <br>// <br>// CClassFactory::LockServer <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>//      BOOL fLock      - TRUE to lock the server, FALSE to unlock it <br>// <br>// Return Value: <br>// <br>//      S_OK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CoLockObjectExternal        OLE API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br> <br>STDMETHODIMP CClassFactory::LockServer ( BOOL fLock) <br>{ <br>OutputDebugString("In CClassFactory::LockServer\r\n"); <br>CoLockObjectExternal(m_lpApp, fLock, TRUE); <br> <br>return  S_OK; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

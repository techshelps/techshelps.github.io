<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context358"></a>DOC.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: DOC.CPP <br>// <br>//      Implementation file for CSimpSvrDoc. <br>// <br>// Functions: <br>// <br>//      See DOC.H for Class Definition <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "obj.h" <br>#include "app.h" <br>#include "doc.h" <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::Create <br>// <br>// Purpose: <br>// <br>//      Creation for the CSimpSvrDoc Class <br>// <br>// Parameters: <br>// <br>//      CSimpSvrApp FAR * lpApp  -   Pointer to the CSimpSvrApp Class <br>// <br>//      LPRECT lpRect           -   Client area rect of "frame" window <br>// <br>//      HWND hWnd               -   Window Handle of "frame" window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      StgCreateDocfile            OLE API <br>//      CreateWindow                Windows API <br>//      ShowWindow                  Windows API <br>//      UpdateWindow                Windows API <br>//      CSimpSvrDoc::CSimpSvrDoc    DOC.CPP <br>//      CreateHatchWindow           OLESTD <br>// <br>// Comments: <br>// <br>//      This routine was added so that failure could be returned <br>//      from object creation. <br>// <br>//******************************************************************** <br> <br>CSimpSvrDoc FAR * CSimpSvrDoc::Create(CSimpSvrApp FAR *lpApp, LPRECT lpRect,HWND hWnd) <br>{ <br>        CSimpSvrDoc FAR * lpTemp = new CSimpSvrDoc(lpApp, hWnd); <br> <br>        if (!lpTemp) <br>                return NULL; <br> <br>        // create the document Window <br>        lpTemp-&gt;m_hDocWnd = CreateWindow( <br>                        "DocWClass", <br>                        NULL, <br>                        WS_CHILD | WS_CLIPSIBLINGS, <br>                        lpRect-&gt;left, <br>                        lpRect-&gt;top, <br>                        lpRect-&gt;right, <br>                        lpRect-&gt;bottom, <br>                        hWnd, <br>                        NULL, <br>                        lpApp-&gt;GethInst(), <br>                        NULL); <br> <br>        if (!lpTemp-&gt;m_hDocWnd) <br>                goto error; <br> <br>        lpTemp-&gt;ShowDocWnd(); <br> <br>        lpTemp-&gt;m_hHatchWnd = CreateHatchWindow( lpTemp-&gt;m_hDocWnd, lpApp-&gt;GethInst()); <br> <br>        lpTemp-&gt;HideHatchWnd(); <br> <br>        return (lpTemp); <br> <br>error: <br>        delete (lpTemp); <br>        return NULL; <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::CSimpSvrDoc <br>// <br>// Purpose: <br>// <br>//      Constructor for the CSimpSvrDoc Class <br>// <br>// Parameters: <br>// <br>//      CSimpSvrApp FAR * lpApp  -   Pointer to the CSimpSvrApp Class <br>// <br>//      HWND hWnd               -   Window Handle of "frame" window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      GetMenu                     Windows API <br>//      GetSubMenu                  Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CSimpSvrDoc::CSimpSvrDoc(CSimpSvrApp FAR * lpApp,HWND hWnd) <br>{ <br>        OutputDebugString("In CSimpSvrDoc's Constructor\r\n"); <br>        m_lpApp = lpApp; <br>        m_lpObj = NULL; <br>        m_fClosing = FALSE; <br> <br>        // set up menu handles <br> <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::~CSimpSvrDoc <br>// <br>// Purpose: <br>// <br>//      Destructor for CSimpSvrDoc <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      DestroyWindow               Windows API <br>//      CSimpSvrApp::ClearDoc       APP.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CSimpSvrDoc::~CSimpSvrDoc() <br>{ <br>        OutputDebugString("In CSimpSvrDoc's Destructor\r\n"); <br>        m_lpApp-&gt;ClearDoc(); <br>        DestroyWindow(m_hHatchWnd); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Return a pointer to a requested interface <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   ID of interface to be returned <br>//      LPVOID FAR* ppvObj  -   Location to return the interface <br>// <br>// Return Value: <br>// <br>//      E_NOINTERFACE -   Always <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrApp::QueryInterface APP.CPP <br>// <br>// Comments: <br>// <br>//      Since the document could contain multiple objects, all <br>//      interfaces except those associated with the document should <br>//      be returned.  In this implementation, there are no doc level <br>//      interfaces. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CSimpSvrDoc::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In CSimpSvrDoc::QueryInterface\r\n"); <br> <br>        SCODE sc = E_NOINTERFACE; <br> <br>        if ( (riid == IID_IUnknown) ) <br>           { <br>           AddRef(); <br>           *ppvObj = this; <br>           sc = S_OK; <br>           } <br> <br>        return sc; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the document level reference count <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      UINT    -   The current reference count on the document <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrApp::AddRef         APP.CPP <br>// <br>// Comments: <br>// <br>//      The reference count at this level reflects the total ref. <br>//      count of all interfaces on all objects contained within <br>//      this document.  Note that it also "trickles up" the <br>//      ref count to the app level. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpSvrDoc::AddRef() <br>{ <br>        OutputDebugString("In CSimpSvrDoc::AddRef\r\n"); <br>        // AddRef the app, but return the doc count <br>        m_lpApp-&gt;AddRef(); <br> <br>        return SafeAddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the document level reference count <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      UINT    -   The current reference count on the document <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpSvrApp::Release         APP.CPP <br>// <br>// Comments: <br>// <br>//      The reference count at this level reflects the total ref. <br>//      count of all interfaces on all objects contained within <br>//      this document.  Note that it also "trickles up" the <br>//      ref count to the app level. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpSvrDoc::Release() <br>{ <br>        OutputDebugString("In CSimpSvrDoc::Release\r\n"); <br>        // Release the app, but return the app count <br>        m_lpApp-&gt;Release(); <br> <br>        return SafeRelease(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::lResizeDoc <br>// <br>// Purpose: <br>// <br>//      Resizes the document <br>// <br>// Parameters: <br>// <br>//      LPRECT lpRect   -   The size of the client are of the "frame" <br>//                          Window. <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      MoveWindow                              Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpSvrDoc::lResizeDoc(LPRECT lpRect) <br>{ <br>        MoveWindow(m_hDocWnd, lpRect-&gt;left, lpRect-&gt;top, lpRect-&gt;right, lpRect-&gt;bottom, TRUE); <br>        return NULL; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::PaintDoc <br>// <br>// Purpose: <br>// <br>//      Paints the Document <br>// <br>// Parameters: <br>// <br>//      HDC hDC -   hDC of the document Window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::Draw                   OBJ.CPP <br>//      CSimpSvrObj::GetDataAdviseHolder    OBJ.H <br>//      CSimpSvrObj::GetDataObject          OBJ.H <br>//      CSimpAppObj::IsStartedByOle         APP.CPP <br>//      IDataAdviseHolder::SendOnDataChange OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::PaintDoc (HDC hDC) <br>{ <br>        // i f the object hasn't been created yet, then don't draw <br>        if (m_lpObj) <br>                m_lpObj-&gt;Draw(hDC,FALSE); <br>        else <br>                return; <br> <br>        CStabilize stabilize(this); <br> <br>        // Sending a data change every time we paint, but only if we <br>        // were started by OLE <br>        if (m_lpApp-&gt;IsStartedByOle()) <br>                        m_lpObj-&gt;SendOnDataChange( ); <br>} <br> <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::CreateObject <br>// <br>// Purpose: <br>// <br>// <br>// Parameters: <br>// <br>// <br>// Return Value: <br>// <br>//      NOERROR if the function succeeds, otherwise E_FAIL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpSvrObj::CSimpSvrObj    OBJ.CPP <br>//      CSimpSvrOjb::QueryInterface OBJ.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>HRESULT CSimpSvrDoc::CreateObject(REFIID riid, LPVOID FAR *ppvObject) <br>{ <br>        SCODE sc = E_FAIL; <br> <br>        m_lpObj = new CSimpSvrObj(this); <br> <br>        if (m_lpObj) <br>                { <br>                m_lpObj-&gt;QueryInterface(riid, ppvObject); <br>                sc = S_OK; <br>                } <br> <br>        return sc; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::Close <br>// <br>// Purpose: <br>// <br>//      Closes the object <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      OutputDebugString                       Windows API <br>//      CSimpSvrObj::AddRef                     OBJ.CPP <br>//      CSimpSvrObj::Release                    OBJ.CPP <br>//      CSimpSvrObj::IsInPlaceActive            OBJ.H <br>//      CSimpSvrObj::GetOleInPlaceObject        OBJ.H <br>//      CSimpSvrObj::ClearOleClientSite         OBJ.H <br>//      CSimpSvrObj::GetDataAdviseHolder        OBJ.H <br>//      CSimpSvrObj::GetOleClientSite           OBJ.H <br>//      CSimpSvrObj::ClearDataAdviseHolder      OBJ.H <br>//      CSimpSvrObj::GetOleAdviseHolder         OBJ.H <br>//      CSimpSvrObj::ClearOleAdviseHolder       OBJ.H <br>//      IOleInPlaceObject::InPlaceDeactivate    Container <br>//      IOleClientSite::SaveObject              Container <br>//      IOleClientSite::OnShowWindow            Container <br>//      IOleClientSite::Release                 Container <br>//      IDataAdviseHolder::SendOnDataChange     OLE <br>//      IDataAdviseHolder::Release              OLE <br>//      IOleAdviseHolder::SendOnClose           OLE <br>//      IOleAdviseHolder::Release               OLE <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::Close() <br>{ <br>        OutputDebugString("In CSimpSvrDoc::Close() \r\n"); <br>        CStabilize stabilize(this); <br> <br>        m_lpObj-&gt;AddRef(); // hold object alive <br> <br>        if (m_fClosing) <br>                return; <br> <br>        m_fClosing = TRUE; <br> <br>        // if the object is currently inplace active, then deactivate <br>        if (m_lpObj-&gt;IsInPlaceActive()) <br>                m_lpObj-&gt;GetOleInPlaceObject()-&gt;InPlaceDeactivate(); <br> <br>        // unregister from the ROT... <br>        if (m_lpObj-&gt;GetRotRegister()) <br>                { <br>                LPRUNNINGOBJECTTABLE lpRot; <br> <br>                if (GetRunningObjectTable (0, &amp;lpRot) == NOERROR ) <br>                        { <br>                        lpRot-&gt;Revoke(m_lpObj-&gt;GetRotRegister()); <br>                        lpRot-&gt;Release(); <br>                        } <br>                } <br> <br>        // if we have a clientsite, instruct it to save the object <br>        if (m_lpObj-&gt;GetOleClientSite()) <br>                { <br>                m_lpObj-&gt;GetOleClientSite()-&gt;SaveObject(); <br>                m_lpObj-&gt;GetOleClientSite()-&gt;OnShowWindow(FALSE); <br>                } <br> <br>        // Do a final SendOnDataChange for those containers that have specified the <br>        // ADF_DATAONSTOP flag. <br>        if (m_lpObj-&gt;GetDataAdviseHolder()) <br>                { <br>                m_lpObj-&gt;GetDataAdviseHolder()-&gt;SendOnDataChange( m_lpObj-&gt;GetDataObject(), 0, ADVF_DATAONSTOP); <br>                m_lpObj-&gt;GetDataAdviseHolder()-&gt;Release(); <br>                m_lpObj-&gt;ClearDataAdviseHolder(); <br>                } <br> <br> <br>        // Tell the container that we are shutting down. <br>        if (m_lpObj-&gt;GetOleAdviseHolder()) <br>                { <br>                m_lpObj-&gt;GetOleAdviseHolder()-&gt;SendOnClose(); <br>                m_lpObj-&gt;GetOleAdviseHolder()-&gt;Release(); <br>                m_lpObj-&gt;ClearOleAdviseHolder(); <br>                } <br> <br>        if (m_lpObj-&gt;GetOleClientSite()) <br>                { <br>                m_lpObj-&gt;GetOleClientSite()-&gt;Release(); <br>                m_lpObj-&gt;ClearOleClientSite(); <br>                } <br> <br>        // release our streams and storage <br>        m_lpObj-&gt;GetPersistStorage()-&gt;ReleaseStreamsAndStorage(); <br> <br>        // Disconnect the object.  NOTE: This call should not do anything <br>        // unless the container has cause a GP Fault or some other problem <br>        // has occured... <br>        OutputDebugString("*** Before CoDisconnectObject *** \r\n"); <br>        CoDisconnectObject((LPUNKNOWN)m_lpObj, 0); <br>        OutputDebugString("*** After CoDisconnectObject *** \r\n"); <br> <br>        m_lpObj-&gt;Release(); // let object close <br> <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::SetStatusText <br>// <br>// Purpose: <br>// <br>//      Sets the Container's status bar text <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      CSimpSvrObj::IsInPlaceActive    OBJ.CPP <br>//      IOleInPlaceFrame::SetStatusText Container <br>// <br>// Comments: <br>// <br>//      Even though there is no status line in this sample, this <br>//      method must be called on WM_MENUSELECT to clear the last <br>//      message in the status line. <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::SetStatusText() <br>{ <br>        CStabilize stabilize(this); <br>        if (m_lpObj-&gt;IsInPlaceActive()) <br>                //@@WTK WIN32, UNICODE <br>                //m_lpObj-&gt;GetInPlaceFrame()-&gt;SetStatusText("\0"); <br>                m_lpObj-&gt;GetInPlaceFrame()-&gt;SetStatusText(OLESTR("\0")); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::ShowDocWnd <br>// <br>// Purpose: <br>// <br>//      Shows the Document Window <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>//      UpdateWindow                    Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::ShowDocWnd() <br>{ <br>        ShowWindow(m_hDocWnd, SW_SHOWNORMAL);  // Show the window <br>        UpdateWindow(m_hDocWnd);               // Sends WM_PAINT message <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::ShowHatchWnd <br>// <br>// Purpose: <br>// <br>//      Shows the hatch Window <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::ShowHatchWnd() <br>{ <br>        ShowWindow(m_hHatchWnd, SW_SHOW); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::HideDocWnd <br>// <br>// Purpose: <br>// <br>//      Hides the DocumentWindow <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::HideDocWnd() <br>{ <br>        ShowWindow(m_hDocWnd, SW_HIDE); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpSvrDoc::HideHatchWnd <br>// <br>// Purpose: <br>// <br>//      Hides the Hatch Window <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      ShowWindow                      Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpSvrDoc::HideHatchWnd() <br>{ <br>        ShowWindow(m_hHatchWnd, SW_HIDE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

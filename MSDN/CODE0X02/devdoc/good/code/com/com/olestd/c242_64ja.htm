<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJFDBK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context256"></a>OBJFDBK.C</h2>
<pre><code>/* <br> * OBJFDBK.C <br> * <br> * Miscellaneous API's to generate UI feedback effects for OLE objects. This <br> * is part of the OLE 2.0 User Interface Support Library. <br> * The following feedback effects are supported: <br> *      1. Object selection handles (OleUIDrawHandles) <br> *      2. Open Object window shading (OleUIDrawShading) <br> * <br> * Copyright (c)1992-1996 Microsoft Corporation, All Right Reserved <br> */ <br> <br>#define STRICT  1 <br>#include "olestd.h" <br> <br>static void DrawHandle(HDC hdc, int x, int y, UINT cSize, BOOL bInvert, BOOL fDraw); <br> <br>/* <br> * OleUIDrawHandles <br> * <br> * Purpose: <br> *  Draw handles or/and boundary around Container Object when selected <br> * <br> * Parameters: <br> *  lpRect      Dimensions of Container Object <br> *  hdc         HDC of Container Object (MM_TEXT mapping mode) <br> *  dwFlags- <br> *      Exclusive flags <br> *          OLEUI_HANDLES_INSIDE    Draw handles on inside of rect <br> *          OLEUI_HANDLES_OUTSIDE   Draw handles on outside of rect <br> *      Optional flags <br> *          OLEUI_HANDLES_NOBORDER  Draw handles only, no rect <br> *          OLEUI_HANDLES_USEINVERSE <br> *              use invert for handles and rect, o.t. use COLOR_WINDOWTEXT <br> *  cSize       size of handle box <br> *  fDraw       Draw if TRUE, erase if FALSE <br> * <br> * Return Value: null <br> * <br> */ <br>STDAPI_(void) OleUIDrawHandles( <br>        LPRECT  lpRect, <br>        HDC     hdc, <br>        DWORD   dwFlags, <br>        UINT    cSize, <br>        BOOL    fDraw <br>) <br>{ <br>        HBRUSH  hbr; <br>        RECT    rc; <br>        int     bkmodeOld; <br>        BOOL    bInvert = (BOOL) (dwFlags &amp; OLEUI_HANDLES_USEINVERSE); <br> <br>        CopyRect((LPRECT)&amp;rc, lpRect); <br> <br>        bkmodeOld = SetBkMode(hdc, TRANSPARENT); <br> <br>        if (dwFlags &amp; OLEUI_HANDLES_OUTSIDE) <br>                InflateRect((LPRECT)&amp;rc, cSize - 1, cSize - 1); <br> <br>        // Draw the handles inside the rectangle boundary <br>        DrawHandle(hdc, rc.left, rc.top, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.left, rc.top+(rc.bottom-rc.top-cSize)/2, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.left, rc.bottom-cSize, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.left+(rc.right-rc.left-cSize)/2, rc.top, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.left+(rc.right-rc.left-cSize)/2, rc.bottom-cSize, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.right-cSize, rc.top, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.right-cSize, rc.top+(rc.bottom-rc.top-cSize)/2, cSize, bInvert, fDraw); <br>        DrawHandle(hdc, rc.right-cSize, rc.bottom-cSize, cSize, bInvert, fDraw); <br> <br>        if (!(dwFlags &amp; OLEUI_HANDLES_NOBORDER)) { <br>                if (fDraw) <br>                        hbr = GetStockObject(BLACK_BRUSH); <br>                else <br>                        hbr = GetStockObject(WHITE_BRUSH); <br> <br>                FrameRect(hdc, lpRect, hbr); <br>        } <br> <br>        SetBkMode(hdc, bkmodeOld); <br>} <br> <br> <br> <br>/* <br> * DrawHandle <br> * <br> * Purpose: <br> *  Draw a handle box at the specified coordinate <br> * <br> * Parameters: <br> *  hdc         HDC to be drawn into <br> *  x, y        upper left corner coordinate of the handle box <br> *  cSize       size of handle box <br> *  bInvert     use InvertRect() if TRUE, otherwise use Rectangle() <br> *  fDraw       Draw if TRUE, erase if FALSE, ignored if bInvert is TRUE <br> * <br> * Return Value: null <br> * <br> */ <br>static void DrawHandle(HDC hdc, int x, int y, UINT cSize, BOOL bInvert, BOOL fDraw) <br>{ <br>        HBRUSH  hbr; <br>        HBRUSH  hbrOld; <br>        HPEN    hpen; <br>        HPEN    hpenOld; <br>        RECT    rc; <br> <br> <br>        if (!bInvert) { <br>                if (fDraw) { <br>                        hpen = GetStockObject(BLACK_PEN); <br>                        hbr = GetStockObject(BLACK_BRUSH); <br>                } else { <br>                        hpen = GetStockObject(WHITE_PEN); <br>                        hbr = GetStockObject(WHITE_PEN); <br>                } <br> <br>                hpenOld = SelectObject(hdc, hpen); <br>                hbrOld = SelectObject(hdc, hbr); <br>                Rectangle(hdc, x, y, x+cSize, y+cSize); <br>                SelectObject(hdc, hpenOld); <br>                SelectObject(hdc, hbrOld); <br>        } <br>        else { <br>                rc.left = x; <br>                rc.top = y; <br>                rc.right = x + cSize; <br>                rc.bottom = y + cSize; <br>                InvertRect(hdc, (LPRECT)&amp;rc); <br>        } <br>} <br> <br> <br>/* <br> * OleUIDrawShading <br> * <br> * Purpose: <br> *  Shade the object when it is in in-place editing. Borders are drawn <br> *  on the Object rectangle. The right and bottom edge of the rectangle <br> *  are excluded in the drawing. <br> * <br> * Parameters: <br> *  lpRect      Dimensions of Container Object <br> *  hdc         HDC for drawing <br> *  dwFlags- <br> *      Exclusive flags <br> *          OLEUI_SHADE_FULLRECT    Shade the whole rectangle <br> *          OLEUI_SHADE_BORDERIN    Shade cWidth pixels inside rect <br> *          OLEUI_SHADE_BORDEROUT   Shade cWidth pixels outside rect <br> *      Optional flags <br> *          OLEUI_SHADE_USEINVERSE <br> *              use PATINVERT instead of the hex value <br> *  cWidth      width of border in pixel <br> * <br> * Return Value: null <br> * <br> */ <br>STDAPI_(void) OleUIDrawShading(LPRECT lpRect, HDC hdc, DWORD dwFlags, UINT cWidth) <br>{ <br>        HBRUSH  hbr; <br>        HBRUSH  hbrOld; <br>        HBITMAP hbm; <br>        RECT    rc; <br>        WORD    wHatchBmp[] = {0x11, 0x22, 0x44, 0x88, 0x11, 0x22, 0x44, 0x88}; <br>        COLORREF cvText; <br>        COLORREF cvBk; <br> <br>        hbm = CreateBitmap(8, 8, 1, 1, wHatchBmp); <br>        hbr = CreatePatternBrush(hbm); <br>        hbrOld = SelectObject(hdc, hbr); <br> <br>        rc = *lpRect; <br> <br>        if (dwFlags == OLEUI_SHADE_FULLRECT) { <br>                cvText = SetTextColor(hdc, RGB(255, 255, 255)); <br>                cvBk = SetBkColor(hdc, RGB(0, 0, 0)); <br>                PatBlt(hdc, rc.left, rc.top, rc.right-rc.left, rc.bottom-rc.top, <br>                        0x00A000C9L /* DPa */ ); <br> <br>        } else {    // either inside or outside rect <br> <br>                if (dwFlags == OLEUI_SHADE_BORDEROUT) <br>                        InflateRect((LPRECT)&amp;rc, cWidth - 1, cWidth - 1); <br> <br>                cvText = SetTextColor(hdc, RGB(255, 255, 255)); <br>                cvBk = SetBkColor(hdc, RGB(0, 0, 0)); <br>                PatBlt(hdc, rc.left, rc.top, rc.right - rc.left, <br>                        cWidth, 0x00A000C9L /* DPa */); <br>                PatBlt(hdc, rc.left, rc.top, cWidth, rc.bottom - rc.top, <br>                        0x00A000C9L /* DPa */); <br>                PatBlt(hdc, rc.right - cWidth, rc.top, cWidth, <br>                        rc.bottom - rc.top, 0x00A000C9L /* DPa */); <br>                PatBlt(hdc, rc.left, rc.bottom - cWidth, rc.right-rc.left, <br>                        cWidth, 0x00A000C9L /* DPa */); <br>        } <br> <br>        SetTextColor(hdc, cvText); <br>        SetBkColor(hdc, cvBk); <br>        SelectObject(hdc, hbrOld); <br>        DeleteObject(hbr); <br>        DeleteObject(hbm); <br>} <br> <br> <br>/* <br> * OleUIShowObject <br> * <br> * Purpose: <br> *  Draw the ShowObject effect around the object <br> * <br> * Parameters: <br> *  lprc        rectangle for drawing <br> *  hdc         HDC for drawing <br> *  fIsLink     linked object (TRUE) or embedding object (FALSE) <br> * <br> * Return Value: null <br> * <br> */ <br>STDAPI_(void) OleUIShowObject(LPCRECT lprc, HDC hdc, BOOL fIsLink) <br>{ <br>        HPEN    hpen; <br>        HPEN    hpenOld; <br>        HBRUSH  hbrOld; <br> <br>        if (!lprc || !hdc) <br>                return; <br> <br>        hpen = fIsLink ? CreatePen(PS_DASH, 1, RGB(0,0,0)) : <br>                                         GetStockObject(BLACK_PEN); <br> <br>        if (!hpen) <br>                return; <br> <br>        hpenOld = SelectObject(hdc, hpen); <br>        hbrOld = SelectObject(hdc, GetStockObject(NULL_BRUSH)); <br> <br>        Rectangle(hdc, lprc-&gt;left, lprc-&gt;top, lprc-&gt;right, lprc-&gt;bottom); <br> <br>        SelectObject(hdc, hpenOld); <br>        SelectObject(hdc, hbrOld); <br> <br>        if (fIsLink) <br>                DeleteObject(hpen); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

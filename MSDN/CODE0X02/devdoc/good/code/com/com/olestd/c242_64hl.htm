<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENUMFETC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context249"></a>ENUMFETC.C</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2 Utility Code <br>** <br>**    enumfetc.c <br>** <br>**    This file contains a standard implementation of IEnumFormatEtc <br>**    interface. <br>**    This file is part of the OLE 2.0 User Interface support library. <br>** <br>**    (c) Copyright Microsoft Corp. 1990 - 1996 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>#define STRICT  1 <br>#include "olestd.h" <br> <br> <br>typedef struct tagOleStdEnumFmtEtc { <br>  IEnumFORMATETCVtbl FAR* lpVtbl; <br>  ULONG m_dwRefs;       /* referance count */ <br>  ULONG m_nIndex;       /* current index in list */ <br>  ULONG m_nCount;       /* how many items in list */ <br>  LPFORMATETC m_lpEtc;  /* list of formatetc */ <br>} OLESTDENUMFMTETC, FAR* LPOLESTDENUMFMTETC; <br> <br>VOID  OleStdEnumFmtEtc_Destroy(LPOLESTDENUMFMTETC pEtc); <br> <br>STDMETHODIMP OleStdEnumFmtEtc_QueryInterface( <br>                LPENUMFORMATETC lpThis, REFIID riid, LPVOID FAR* ppobj); <br>STDMETHODIMP_(ULONG)  OleStdEnumFmtEtc_AddRef(LPENUMFORMATETC lpThis); <br>STDMETHODIMP_(ULONG)  OleStdEnumFmtEtc_Release(LPENUMFORMATETC lpThis); <br>STDMETHODIMP  OleStdEnumFmtEtc_Next(LPENUMFORMATETC lpThis, ULONG celt, <br>                                                                  LPFORMATETC rgelt, ULONG FAR* pceltFetched); <br>STDMETHODIMP  OleStdEnumFmtEtc_Skip(LPENUMFORMATETC lpThis, ULONG celt); <br>STDMETHODIMP  OleStdEnumFmtEtc_Reset(LPENUMFORMATETC lpThis); <br>STDMETHODIMP  OleStdEnumFmtEtc_Clone(LPENUMFORMATETC lpThis, <br>                                                                         LPENUMFORMATETC FAR* ppenum); <br> <br>static IEnumFORMATETCVtbl g_EnumFORMATETCVtbl = { <br>                OleStdEnumFmtEtc_QueryInterface, <br>                OleStdEnumFmtEtc_AddRef, <br>                OleStdEnumFmtEtc_Release, <br>                OleStdEnumFmtEtc_Next, <br>                OleStdEnumFmtEtc_Skip, <br>                OleStdEnumFmtEtc_Reset, <br>                OleStdEnumFmtEtc_Clone, <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br> <br> <br>STDAPI_(LPENUMFORMATETC) <br>  OleStdEnumFmtEtc_Create(ULONG nCount, LPFORMATETC lpEtc) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPMALLOC lpMalloc=NULL; <br>  LPOLESTDENUMFMTETC lpEF=NULL; <br>  DWORD dwSize; <br>  WORD i; <br>  HRESULT hRes; <br> <br>  hRes = CoGetMalloc(MEMCTX_TASK, &amp;lpMalloc); <br>  if (hRes != NOERROR) { <br>        return NULL; <br>  } <br> <br>  lpEF = (LPOLESTDENUMFMTETC)lpMalloc-&gt;lpVtbl-&gt;Alloc(lpMalloc, <br>                                                                                                 sizeof(OLESTDENUMFMTETC)); <br>  if (lpEF == NULL) { <br>        goto errReturn; <br>  } <br> <br>  lpEF-&gt;lpVtbl = &amp;g_EnumFORMATETCVtbl; <br>  lpEF-&gt;m_dwRefs = 1; <br>  lpEF-&gt;m_nCount = nCount; <br>  lpEF-&gt;m_nIndex = 0; <br> <br>  dwSize = sizeof(FORMATETC) * lpEF-&gt;m_nCount; <br> <br>  lpEF-&gt;m_lpEtc = (LPFORMATETC)lpMalloc-&gt;lpVtbl-&gt;Alloc(lpMalloc, dwSize); <br>  if (lpEF-&gt;m_lpEtc == NULL) <br>        goto errReturn; <br> <br>  lpMalloc-&gt;lpVtbl-&gt;Release(lpMalloc); <br> <br>  for (i=0; i&lt;nCount; i++) { <br>        OleStdCopyFormatEtc( <br>                        (LPFORMATETC)&amp;(lpEF-&gt;m_lpEtc[i]), (LPFORMATETC)&amp;(lpEtc[i])); <br>  } <br> <br>  g_dwObjectCount++ ; <br> <br>  return (LPENUMFORMATETC)lpEF; <br> <br>errReturn: <br>  if (lpEF != NULL) <br>        lpMalloc-&gt;lpVtbl-&gt;Free(lpMalloc, lpEF); <br> <br>  if (lpMalloc != NULL) <br>        lpMalloc-&gt;lpVtbl-&gt;Release(lpMalloc); <br> <br>  return NULL; <br> <br>} /* OleStdEnumFmtEtc_Create() <br>   */ <br> <br> <br>VOID <br>  OleStdEnumFmtEtc_Destroy(LPOLESTDENUMFMTETC lpEF) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>        LPMALLOC lpMalloc=NULL; <br>        WORD i; <br> <br>        if (lpEF != NULL) { <br> <br>                if (CoGetMalloc(MEMCTX_TASK, &amp;lpMalloc) == NOERROR) { <br> <br>                        /* NOTE: we MUST free any memory that was allocated for <br>                        **    TARGETDEVICES contained within the FORMATETC elements. <br>                        */ <br>                        for (i=0; i&lt;lpEF-&gt;m_nCount; i++) { <br>                                OleStdFree(lpEF-&gt;m_lpEtc[i].ptd); <br>                        } <br> <br>                        if (lpEF-&gt;m_lpEtc != NULL) { <br>                                lpMalloc-&gt;lpVtbl-&gt;Free(lpMalloc, lpEF-&gt;m_lpEtc); <br>                        } <br> <br>                        lpMalloc-&gt;lpVtbl-&gt;Free(lpMalloc, lpEF); <br>                        lpMalloc-&gt;lpVtbl-&gt;Release(lpMalloc); <br>                } <br>        } <br> <br>        g_dwObjectCount-- ; <br> <br>} /* OleStdEnumFmtEtc_Destroy() <br>   */ <br> <br> <br>STDMETHODIMP <br>  OleStdEnumFmtEtc_QueryInterface( <br>                                LPENUMFORMATETC lpThis, REFIID riid, LPVOID FAR* ppobj) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  *ppobj = NULL; <br> <br>  if (IsEqualIID(riid,&amp;IID_IUnknown) || IsEqualIID(riid,&amp;IID_IEnumFORMATETC)){ <br>        *ppobj = (LPVOID)lpEF; <br>  } <br> <br>  if (*ppobj == NULL) return E_NOINTERFACE; <br>  else{ <br>        OleStdEnumFmtEtc_AddRef(lpThis); <br>        return NOERROR; <br>  } <br> <br>} /* OleStdEnumFmtEtc_QueryInterface() <br>   */ <br> <br> <br>STDMETHODIMP_(ULONG) <br>  OleStdEnumFmtEtc_AddRef(LPENUMFORMATETC lpThis) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  return lpEF-&gt;m_dwRefs++; <br> <br>} /* OleStdEnumFmtEtc_AddRef() <br>   */ <br> <br> <br>STDMETHODIMP_(ULONG) <br>  OleStdEnumFmtEtc_Release(LPENUMFORMATETC lpThis) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  DWORD dwRefs = --lpEF-&gt;m_dwRefs; <br> <br>  if (dwRefs == 0) <br>        OleStdEnumFmtEtc_Destroy(lpEF); <br> <br>  return dwRefs; <br> <br>} /* OleStdEnumFmtEtc_Release() <br>   */ <br> <br> <br>STDMETHODIMP <br>  OleStdEnumFmtEtc_Next(LPENUMFORMATETC lpThis, ULONG celt, LPFORMATETC rgelt, <br>                                          ULONG FAR* pceltFetched) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  ULONG i=0; <br>  ULONG nOffset; <br> <br>  if (rgelt == NULL) { <br>        return E_INVALIDARG; <br>  } <br> <br>  while (i &lt; celt) { <br>        nOffset = lpEF-&gt;m_nIndex + i; <br> <br>        if (nOffset &lt; lpEF-&gt;m_nCount) { <br>          OleStdCopyFormatEtc( <br>                        (LPFORMATETC)&amp;(rgelt[i]), (LPFORMATETC)&amp;(lpEF-&gt;m_lpEtc[nOffset])); <br>          i++; <br>        }else{ <br>          break; <br>        } <br>  } <br> <br>  lpEF-&gt;m_nIndex += (WORD)i; <br> <br>  if (pceltFetched != NULL) { <br>        *pceltFetched = i; <br>  } <br> <br>  if (i != celt) { <br>        return S_FALSE; <br>  } <br> <br>  return NOERROR; <br>} /* OleStdEnumFmtEtc_Next() <br>   */ <br> <br> <br>STDMETHODIMP <br>  OleStdEnumFmtEtc_Skip(LPENUMFORMATETC lpThis, ULONG celt) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  ULONG i=0; <br>  ULONG nOffset; <br> <br>  while (i &lt; celt) { <br>        nOffset = lpEF-&gt;m_nIndex + i; <br> <br>        if (nOffset &lt; lpEF-&gt;m_nCount) { <br>          i++; <br>        }else{ <br>          break; <br>        } <br>  } <br> <br>  lpEF-&gt;m_nIndex += (WORD)i; <br> <br>  if (i != celt) { <br>        return S_FALSE; <br>  } <br> <br>  return NOERROR; <br>} /* OleStdEnumFmtEtc_Skip() <br>   */ <br> <br> <br>STDMETHODIMP <br>  OleStdEnumFmtEtc_Reset(LPENUMFORMATETC lpThis) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br>  lpEF-&gt;m_nIndex = 0; <br> <br>  return NOERROR; <br>} /* OleStdEnumFmtEtc_Reset() <br>   */ <br> <br> <br>STDMETHODIMP <br>  OleStdEnumFmtEtc_Clone(LPENUMFORMATETC lpThis, LPENUMFORMATETC FAR* ppenum) <br>//---------------------------------------------------------------------------- <br>// <br>//---------------------------------------------------------------------------- <br>{ <br>  LPOLESTDENUMFMTETC lpEF = (LPOLESTDENUMFMTETC)lpThis; <br> <br>  if (ppenum == NULL) { <br>        return E_INVALIDARG; <br>  } <br> <br>  *ppenum = OleStdEnumFmtEtc_Create(lpEF-&gt;m_nCount, lpEF-&gt;m_lpEtc); <br> <br>  // make sure cloned enumerator has same index state as the original <br>  if (*ppenum) { <br>          LPOLESTDENUMFMTETC lpEFClone = (LPOLESTDENUMFMTETC)*ppenum; <br>          lpEFClone-&gt;m_nIndex = lpEF-&gt;m_nIndex; <br>          return NOERROR; <br>  } else <br>          return E_OUTOFMEMORY; <br> <br>} /* OleStdEnumFmtEtc_Clone() <br>   */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

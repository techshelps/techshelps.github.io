<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBGUTIL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context246"></a>DBGUTIL.C</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2.0 Common Utilities <br>** <br>**    dbgutil.h <br>** <br>**    This file contains file contains functions to support debug output. <br>** <br>**    (c) Copyright Microsoft Corp. 1990 - 1996 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>#define STRICT  1 <br>#include "olestd.h" <br> <br>static int s_nDbgIndent = 0;        // indent level for debug message <br>#if defined( _DEBUG ) <br>static int s_nDbgLevel = 0;   // default dbg level printed <br>#else <br>static int s_nDbgLevel = 0;   // default dbg level printed <br>#endif <br> <br>STDAPI_(void) OleDbgPrint( <br>                int     nDbgLvl, <br>                LPSTR   lpszPrefix, <br>                LPSTR   lpszMsg, <br>                int     nIndent <br>) <br>{ <br>        if (nDbgLvl &lt;= s_nDbgLevel) <br>                OleDbgPrintAlways(lpszPrefix, lpszMsg, nIndent); <br>} <br> <br> <br>STDAPI_(void) OleDbgPrintAlways(LPSTR lpszPrefix, LPSTR lpszMsg, int nIndent) <br>{ <br>        int i; <br> <br>        if (nIndent &lt; 0) <br>                OleDbgIndent(nIndent); <br> <br>        if (lpszPrefix &amp;&amp; *lpszPrefix != '\0') { <br>                OutputDebugString("| "); <br>                for (i = 0; i &lt; s_nDbgIndent; i++) <br>                        OutputDebugString("----"); <br> <br>                OutputDebugString(lpszPrefix); <br>                OutputDebugString(": "); <br>        } <br> <br>        OutputDebugString(lpszMsg); <br>        if (nIndent &gt; 0) <br>                OleDbgIndent(nIndent); <br>} <br> <br>STDAPI_(void) OleDbgSetDbgLevel(int nDbgLvl) <br>{ <br>        s_nDbgLevel = nDbgLvl; <br>} <br> <br>STDAPI_(int) OleDbgGetDbgLevel( void ) <br>{ <br>        return s_nDbgLevel; <br>} <br> <br>STDAPI_(void) OleDbgIndent(int n) <br>{ <br>        switch (n) { <br>                case -1: <br>                        s_nDbgIndent--; <br>                        break; <br>                case 1: <br>                        s_nDbgIndent++; <br>                        break; <br>                case -2: <br>                        s_nDbgIndent = 0; <br>                        break; <br>        } <br>} <br> <br> <br>STDAPI_(void) OleDbgPrintRefCnt( <br>                int         nDbgLvl, <br>                LPSTR       lpszPrefix, <br>                LPSTR       lpszMsg, <br>                LPVOID      lpObj, <br>                ULONG       refcnt <br>) <br>{ <br>        if (nDbgLvl &lt;= s_nDbgLevel) <br>                OleDbgPrintRefCntAlways(lpszPrefix, lpszMsg, lpObj, refcnt); <br>} <br> <br> <br>STDAPI_(void) OleDbgPrintRefCntAlways( <br>                LPSTR       lpszPrefix, <br>                LPSTR       lpszMsg, <br>                LPVOID      lpObj, <br>                ULONG       refcnt <br>) <br>{ <br>#if defined( _DEBUG ) <br>        char szBuf[256]; <br> <br>        wsprintf(szBuf, "[obj=(0x%lx) cnt=%ld] %s", lpObj, refcnt, lpszMsg); <br>        OleDbgPrintAlways(lpszPrefix, szBuf, 0); <br>#endif <br>} <br> <br> <br>STDAPI_(void) OleDbgPrintRect( <br>                int         nDbgLvl, <br>                LPSTR       lpszPrefix, <br>                LPSTR       lpszMsg, <br>                LPRECT      lpRect <br>) <br>{ <br>        if (nDbgLvl &lt;= s_nDbgLevel) <br>                OleDbgPrintRectAlways(lpszPrefix, lpszMsg, lpRect); <br>} <br> <br> <br>STDAPI_(void) OleDbgPrintRectAlways( <br>                LPSTR       lpszPrefix, <br>                LPSTR       lpszMsg, <br>                LPRECT      lpRect <br>) <br>{ <br>#if defined( _DEBUG ) <br>        char szBuf[256]; <br> <br>        wsprintf( <br>                        szBuf, <br>                        "%s: (%d,%d)-(%d,%d) %dx%d\r\n", <br>                        lpszMsg, <br>                        lpRect-&gt;left, <br>                        lpRect-&gt;top, <br>                        lpRect-&gt;right, <br>                        lpRect-&gt;bottom, <br>                        (lpRect-&gt;right-lpRect-&gt;left), <br>                        (lpRect-&gt;bottom-lpRect-&gt;top) <br>        ); <br>        OleDbgPrintAlways(lpszPrefix, szBuf, 0); <br>#endif <br>} <br> <br> <br>#define CASE_SCODE(sc)  \ <br>                case sc: \ <br>                        lstrcpy(/*(LPSTR)*/szErrName, /*(LPSTR)*/#sc); \ <br>                        break; <br> <br>STDAPI_(void) OleDbgPrintScodeAlways(LPSTR lpszPrefix, LPSTR lpszMsg, SCODE sc) <br>{ <br>#if defined( _DEBUG ) <br>        char szBuf[256]; <br>        char szErrName[40]; <br> <br>        switch (sc) { <br> <br>                /* SCODE's defined in SCODE.H */ <br> <br>                CASE_SCODE(S_OK) <br>                CASE_SCODE(S_FALSE) <br>                CASE_SCODE(E_UNEXPECTED) <br>                CASE_SCODE(E_OUTOFMEMORY) <br>                CASE_SCODE(E_INVALIDARG) <br>                CASE_SCODE(E_NOINTERFACE) <br>                CASE_SCODE(E_POINTER) <br>                CASE_SCODE(E_HANDLE) <br>                CASE_SCODE(E_ABORT) <br>                CASE_SCODE(E_FAIL) <br>                CASE_SCODE(E_ACCESSDENIED) <br> <br>                /* SCODE's defined in OLE2.H */ <br> <br>                CASE_SCODE(OLE_E_OLEVERB) <br>                CASE_SCODE(OLE_E_ADVF) <br>                CASE_SCODE(OLE_E_ENUM_NOMORE) <br>                CASE_SCODE(OLE_E_ADVISENOTSUPPORTED) <br>                CASE_SCODE(OLE_E_NOCONNECTION) <br>                CASE_SCODE(OLE_E_NOTRUNNING) <br>                CASE_SCODE(OLE_E_NOCACHE) <br>                CASE_SCODE(OLE_E_BLANK) <br>                CASE_SCODE(OLE_E_CLASSDIFF) <br>                CASE_SCODE(OLE_E_CANT_GETMONIKER) <br>                CASE_SCODE(OLE_E_CANT_BINDTOSOURCE) <br>                CASE_SCODE(OLE_E_STATIC) <br>                CASE_SCODE(OLE_E_PROMPTSAVECANCELLED) <br>                CASE_SCODE(OLE_E_INVALIDRECT) <br>                CASE_SCODE(OLE_E_WRONGCOMPOBJ) <br>                CASE_SCODE(OLE_E_INVALIDHWND) <br>                CASE_SCODE(OLE_E_NOT_INPLACEACTIVE) <br>                CASE_SCODE(OLE_E_CANTCONVERT) <br>                CASE_SCODE(OLE_E_NOSTORAGE) <br> <br>                CASE_SCODE(DV_E_FORMATETC) <br>                CASE_SCODE(DV_E_DVTARGETDEVICE) <br>                CASE_SCODE(DV_E_STGMEDIUM) <br>                CASE_SCODE(DV_E_STATDATA) <br>                CASE_SCODE(DV_E_LINDEX) <br>                CASE_SCODE(DV_E_TYMED) <br>                CASE_SCODE(DV_E_CLIPFORMAT) <br>                CASE_SCODE(DV_E_DVASPECT) <br>                CASE_SCODE(DV_E_DVTARGETDEVICE_SIZE) <br>                CASE_SCODE(DV_E_NOIVIEWOBJECT) <br> <br>                CASE_SCODE(OLE_S_USEREG) <br>                CASE_SCODE(OLE_S_STATIC) <br>                CASE_SCODE(OLE_S_MAC_CLIPFORMAT) <br> <br>                CASE_SCODE(CONVERT10_E_OLESTREAM_GET) <br>                CASE_SCODE(CONVERT10_E_OLESTREAM_PUT) <br>                CASE_SCODE(CONVERT10_E_OLESTREAM_FMT) <br>                CASE_SCODE(CONVERT10_E_OLESTREAM_BITMAP_TO_DIB) <br>                CASE_SCODE(CONVERT10_E_STG_FMT) <br>                CASE_SCODE(CONVERT10_E_STG_NO_STD_STREAM) <br>                CASE_SCODE(CONVERT10_E_STG_DIB_TO_BITMAP) <br>                CASE_SCODE(CONVERT10_S_NO_PRESENTATION) <br> <br>                CASE_SCODE(CLIPBRD_E_CANT_OPEN) <br>                CASE_SCODE(CLIPBRD_E_CANT_EMPTY) <br>                CASE_SCODE(CLIPBRD_E_CANT_SET) <br>                CASE_SCODE(CLIPBRD_E_BAD_DATA) <br>                CASE_SCODE(CLIPBRD_E_CANT_CLOSE) <br> <br>                CASE_SCODE(DRAGDROP_E_NOTREGISTERED) <br>                CASE_SCODE(DRAGDROP_E_ALREADYREGISTERED) <br>                CASE_SCODE(DRAGDROP_E_INVALIDHWND) <br>                CASE_SCODE(DRAGDROP_S_DROP) <br>                CASE_SCODE(DRAGDROP_S_CANCEL) <br>                CASE_SCODE(DRAGDROP_S_USEDEFAULTCURSORS) <br> <br>                CASE_SCODE(OLEOBJ_E_NOVERBS) <br>                CASE_SCODE(OLEOBJ_E_INVALIDVERB) <br>                CASE_SCODE(OLEOBJ_S_INVALIDVERB) <br>                CASE_SCODE(OLEOBJ_S_CANNOT_DOVERB_NOW) <br>                CASE_SCODE(OLEOBJ_S_INVALIDHWND) <br>                CASE_SCODE(INPLACE_E_NOTUNDOABLE) <br>                CASE_SCODE(INPLACE_E_NOTOOLSPACE) <br>                CASE_SCODE(INPLACE_S_TRUNCATED) <br> <br>                /* SCODE's defined in COMPOBJ.H */ <br> <br>                CASE_SCODE(CO_E_NOTINITIALIZED) <br>                CASE_SCODE(CO_E_ALREADYINITIALIZED) <br>                CASE_SCODE(CO_E_CANTDETERMINECLASS) <br>                CASE_SCODE(CO_E_CLASSSTRING) <br>                CASE_SCODE(CO_E_IIDSTRING) <br>                CASE_SCODE(CO_E_APPNOTFOUND) <br>                CASE_SCODE(CO_E_APPSINGLEUSE) <br>                CASE_SCODE(CO_E_ERRORINAPP) <br>                CASE_SCODE(CO_E_DLLNOTFOUND) <br>                CASE_SCODE(CO_E_ERRORINDLL) <br>                CASE_SCODE(CO_E_WRONGOSFORAPP) <br>                CASE_SCODE(CO_E_OBJNOTREG) <br>                CASE_SCODE(CO_E_OBJISREG) <br>                CASE_SCODE(CO_E_OBJNOTCONNECTED) <br>                CASE_SCODE(CO_E_APPDIDNTREG) <br>                CASE_SCODE(CLASS_E_NOAGGREGATION) <br>                CASE_SCODE(CLASS_E_CLASSNOTAVAILABLE) <br>                CASE_SCODE(REGDB_E_READREGDB) <br>                CASE_SCODE(REGDB_E_WRITEREGDB) <br>                CASE_SCODE(REGDB_E_KEYMISSING) <br>                CASE_SCODE(REGDB_E_INVALIDVALUE) <br>                CASE_SCODE(REGDB_E_CLASSNOTREG) <br>                CASE_SCODE(REGDB_E_IIDNOTREG) <br>                CASE_SCODE(RPC_E_CALL_REJECTED) <br>                CASE_SCODE(RPC_E_CALL_CANCELED) <br>                CASE_SCODE(RPC_E_CANTPOST_INSENDCALL) <br>                CASE_SCODE(RPC_E_CANTCALLOUT_INASYNCCALL) <br>                CASE_SCODE(RPC_E_CANTCALLOUT_INEXTERNALCALL) <br>                CASE_SCODE(RPC_E_CONNECTION_TERMINATED) <br>                CASE_SCODE(RPC_E_SERVER_DIED) <br>                CASE_SCODE(RPC_E_CLIENT_DIED) <br>                CASE_SCODE(RPC_E_INVALID_DATAPACKET) <br>                CASE_SCODE(RPC_E_CANTTRANSMIT_CALL) <br>                CASE_SCODE(RPC_E_CLIENT_CANTMARSHAL_DATA) <br>                CASE_SCODE(RPC_E_CLIENT_CANTUNMARSHAL_DATA) <br>                CASE_SCODE(RPC_E_SERVER_CANTMARSHAL_DATA) <br>                CASE_SCODE(RPC_E_SERVER_CANTUNMARSHAL_DATA) <br>                CASE_SCODE(RPC_E_INVALID_DATA) <br>                CASE_SCODE(RPC_E_INVALID_PARAMETER) <br>                CASE_SCODE(RPC_E_UNEXPECTED) <br> <br>                /* SCODE's defined in DVOBJ.H */ <br> <br>                CASE_SCODE(DATA_S_SAMEFORMATETC) <br>                CASE_SCODE(VIEW_E_DRAW) <br>                CASE_SCODE(VIEW_S_ALREADY_FROZEN) <br>                CASE_SCODE(CACHE_E_NOCACHE_UPDATED) <br>                CASE_SCODE(CACHE_S_FORMATETC_NOTSUPPORTED) <br>                CASE_SCODE(CACHE_S_SAMECACHE) <br>                CASE_SCODE(CACHE_S_SOMECACHES_NOTUPDATED) <br> <br>                /* SCODE's defined in STORAGE.H */ <br> <br>                CASE_SCODE(STG_E_INVALIDFUNCTION) <br>                CASE_SCODE(STG_E_FILENOTFOUND) <br>                CASE_SCODE(STG_E_PATHNOTFOUND) <br>                CASE_SCODE(STG_E_TOOMANYOPENFILES) <br>                CASE_SCODE(STG_E_ACCESSDENIED) <br>                CASE_SCODE(STG_E_INVALIDHANDLE) <br>                CASE_SCODE(STG_E_INSUFFICIENTMEMORY) <br>                CASE_SCODE(STG_E_INVALIDPOINTER) <br>                CASE_SCODE(STG_E_NOMOREFILES) <br>                CASE_SCODE(STG_E_DISKISWRITEPROTECTED) <br>                CASE_SCODE(STG_E_SEEKERROR) <br>                CASE_SCODE(STG_E_WRITEFAULT) <br>                CASE_SCODE(STG_E_READFAULT) <br>                CASE_SCODE(STG_E_SHAREVIOLATION) <br>                CASE_SCODE(STG_E_LOCKVIOLATION) <br>                CASE_SCODE(STG_E_FILEALREADYEXISTS) <br>                CASE_SCODE(STG_E_INVALIDPARAMETER) <br>                CASE_SCODE(STG_E_MEDIUMFULL) <br>                CASE_SCODE(STG_E_ABNORMALAPIEXIT) <br>                CASE_SCODE(STG_E_INVALIDHEADER) <br>                CASE_SCODE(STG_E_INVALIDNAME) <br>                CASE_SCODE(STG_E_UNKNOWN) <br>                CASE_SCODE(STG_E_UNIMPLEMENTEDFUNCTION) <br>                CASE_SCODE(STG_E_INVALIDFLAG) <br>                CASE_SCODE(STG_E_INUSE) <br>                CASE_SCODE(STG_E_NOTCURRENT) <br>                CASE_SCODE(STG_E_REVERTED) <br>                CASE_SCODE(STG_E_CANTSAVE) <br>                CASE_SCODE(STG_E_OLDFORMAT) <br>                CASE_SCODE(STG_E_OLDDLL) <br>                CASE_SCODE(STG_E_SHAREREQUIRED) <br>                CASE_SCODE(STG_E_NOTFILEBASEDSTORAGE) <br>                CASE_SCODE(STG_E_EXTANTMARSHALLINGS) <br>                CASE_SCODE(STG_S_CONVERTED) <br> <br>                /* SCODE's defined in MONIKER.H */ <br> <br>                CASE_SCODE(MK_E_CONNECTMANUALLY) <br>                CASE_SCODE(MK_E_EXCEEDEDDEADLINE) <br>                CASE_SCODE(MK_E_NEEDGENERIC) <br>                CASE_SCODE(MK_E_UNAVAILABLE) <br>                CASE_SCODE(MK_E_SYNTAX) <br>                CASE_SCODE(MK_E_NOOBJECT) <br>                CASE_SCODE(MK_E_INVALIDEXTENSION) <br>                CASE_SCODE(MK_E_INTERMEDIATEINTERFACENOTSUPPORTED) <br>                CASE_SCODE(MK_E_NOTBINDABLE) <br>                CASE_SCODE(MK_E_NOTBOUND) <br>                CASE_SCODE(MK_E_CANTOPENFILE) <br>                CASE_SCODE(MK_E_MUSTBOTHERUSER) <br>                CASE_SCODE(MK_E_NOINVERSE) <br>                CASE_SCODE(MK_E_NOSTORAGE) <br>                CASE_SCODE(MK_E_NOPREFIX) <br>                CASE_SCODE(MK_S_REDUCED_TO_SELF) <br>                CASE_SCODE(MK_S_ME) <br>                CASE_SCODE(MK_S_HIM) <br>                CASE_SCODE(MK_S_US) <br>                CASE_SCODE(MK_S_MONIKERALREADYREGISTERED) <br> <br>                default: <br>                        lstrcpy(szErrName, "UNKNOWN SCODE"); <br>        } <br> <br>        wsprintf(szBuf, "%s %s (0x%lx)\n", lpszMsg, /*(LPSTR)*/szErrName, sc); <br>        OleDbgPrintAlways(lpszPrefix, szBuf, 0); <br>#endif  // _DEBUG <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

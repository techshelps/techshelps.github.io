<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STDPAL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context262"></a>STDPAL.C</h2>
<pre><code>/*----------------------------------------------------------------------- <br>|   stdpal.c <br>| <br>|   Standard App Palette useful for OLE applications. <br>|   Use OleStdCreateStandardPalette API to create the palette. <br>| <br>|   Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>| <br>-----------------------------------------------------------------------*/ <br> <br>#ifndef PC_RESERVED <br>#include &lt;windows.h&gt; <br>#endif <br> <br>#include &lt;olestd.h&gt; <br> <br>#include "stdpal.h" <br> <br>#define cpeAppPal 256  // number of colors in our apps palette <br>typedef struct <br>   { <br>   WORD wVersion; <br>   WORD cpe; <br>   PALETTEENTRY rgpe[cpeAppPal]; <br>   } LOGPAL; <br> <br> <br>/*----------------------------------------------------------------------- <br>|   OleStdCreateStandardPalette <br>| <br>|       Creates the standard Apps palette.  Create one of these for your <br>|   app, and select/realize it into each DC. <br>| <br>|   Arguments: <br>|       void: <br>| <br>|   Returns: <br>| <br>|   Keywords: <br>-----------------------------------------------------------------------*/ <br>STDAPI_(HPALETTE) OleStdCreateStandardPalette(void) <br>   { <br>   HDC hdc; <br>   HPALETTE hpal; <br> <br>   hpal = (HPALETTE) NULL; <br>   hdc = GetDC(NULL); <br>   if (hdc != NULL &amp;&amp; GetDeviceCaps(hdc, RASTERCAPS) &amp; RC_PALETTE) <br>      { <br>      int cpeSysPal; <br>      int cpeReserved; <br> <br>      cpeSysPal = GetDeviceCaps(hdc, SIZEPALETTE); <br>      cpeReserved = GetDeviceCaps(hdc, NUMRESERVED); <br>      if (cpeSysPal &gt; cpeReserved) <br>         { <br>         int cpeReserved2; <br>         unsigned char FAR* lpb; <br>         PALETTEENTRY FAR* ppe; <br>         PALETTEENTRY FAR* ppeMac; <br>         LOGPAL logpal; <br> <br>         cpeReserved2 = cpeReserved/2; <br> <br>         // Get the system palette entries at the beginning and end. <br>         GetSystemPaletteEntries(hdc, 0, cpeReserved2, logpal.rgpe); <br>         GetSystemPaletteEntries(hdc, cpeSysPal - cpeReserved2, cpeReserved2, <br>            &amp;logpal.rgpe[cpeAppPal-cpeReserved2]); <br> <br>         logpal.cpe = cpeAppPal; <br>         logpal.wVersion = 0x300; <br> <br>         lpb = (BYTE FAR *) &amp;palSVGA[10]; <br>         ppe = (PALETTEENTRY FAR*)&amp;logpal.rgpe[cpeReserved2]; <br>         ppeMac = (PALETTEENTRY FAR*)&amp;logpal.rgpe[cpeAppPal-cpeReserved2]; <br>         while (ppe &lt; ppeMac) <br>            { <br>            ppe-&gt;peFlags = PC_NOCOLLAPSE; <br>            ppe-&gt;peRed   = *lpb++; <br>            ppe-&gt;peGreen = *lpb++; <br>            ppe-&gt;peBlue  = *lpb++; <br>            ppe++; <br>            } <br>         hpal = CreatePalette((LOGPALETTE FAR *)&amp;logpal); <br>         } <br>      } <br>   ReleaseDC(NULL, hdc); <br>   return hpal; <br>   } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLESTD.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context177"></a>OLESTD.H</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2.0 Utilities <br>** <br>**    olestd.h <br>** <br>**    This file contains file contains data structure defintions, <br>**    function prototypes, constants, etc. for the common OLE 2.0 <br>**    utilities. <br>** <br>**    These utilities include the following: <br>**          Debuging Assert/Verify macros <br>**          HIMETRIC conversion routines <br>**          reference counting debug support <br>**          OleStd API's for common compound-document app support <br>** <br>**    (c) Copyright Microsoft Corp. 1990 - 1996 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>#if !defined( _OLESTD_H_ ) <br>#define _OLESTD_H_ <br> <br>#if !defined(__cplusplus) &amp;&amp; !defined( __TURBOC__) <br>#define NONAMELESSUNION     // use strict ANSI standard (for DVOBJ.H) <br>#endif <br> <br>#include &lt;windows.h&gt; <br>#include &lt;shellapi.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;dlgs.h&gt;           //For fileopen dlg; standard include <br>#include "ansiapi.h" <br>#include "oledlg.h" <br> <br>/************************************************************************* <br>** DEBUG ASSERTION ROUTINES <br>*************************************************************************/ <br> <br>#if DBG <br>#include &lt;assert.h&gt; <br>#define FnAssert(lpstrExpr, lpstrMsg, lpstrFileName, iLine)     \ <br>        (_assert(lpstrMsg ? lpstrMsg : lpstrExpr,               \ <br>                 lpstrFileName,                                 \ <br>                 iLine), NOERROR) <br>#endif //DBG <br> <br>// BEGINING OF OLD OLESTD.H FILE <br>#if defined( __TURBOC__ ) || defined( WIN32 ) <br>#define _based(a) <br>#endif <br> <br>#ifndef RC_INVOKED <br>#include &lt;dos.h&gt;        // needed for filetime <br>#endif  /* RC_INVOKED */ <br> <br>#include &lt;commdlg.h&gt;    // needed for LPPRINTDLG <br>#include &lt;shellapi.h&gt;   // needed for HKEY <br>#include "ansiapi.h" <br> <br>// String table defines... <br>#define  IDS_OLESTDNOCREATEFILE   700 <br>#define  IDS_OLESTDNOOPENFILE     701 <br>#define  IDS_OLESTDDISKFULL       702 <br> <br> <br>/* <br> * Some C interface declaration stuff <br> */ <br> <br>#if ! defined(__cplusplus) <br>typedef struct tagINTERFACEIMPL { <br>      IUnknownVtbl FAR*       lpVtbl; <br>      LPVOID                  lpBack; <br>      int                     cRef;   // interface specific ref count. <br>} INTERFACEIMPL, FAR* LPINTERFACEIMPL; <br> <br>#define INIT_INTERFACEIMPL(lpIFace, pVtbl, pBack)   \ <br>      ((lpIFace)-&gt;lpVtbl = pVtbl, \ <br>         ((LPINTERFACEIMPL)(lpIFace))-&gt;lpBack = (LPVOID)pBack,   \ <br>         ((LPINTERFACEIMPL)(lpIFace))-&gt;cRef = 0  \ <br>      ) <br> <br>#if defined( _DEBUG ) <br>#define OleDbgQueryInterfaceMethod(lpUnk)   \ <br>      ((lpUnk) != NULL ? ((LPINTERFACEIMPL)(lpUnk))-&gt;cRef++ : 0) <br>#define OleDbgAddRefMethod(lpThis, iface)   \ <br>      ((LPINTERFACEIMPL)(lpThis))-&gt;cRef++ <br> <br>#if _DEBUGLEVEL &gt;= 2 <br>#define OleDbgReleaseMethod(lpThis, iface) \ <br>      (--((LPINTERFACEIMPL)(lpThis))-&gt;cRef == 0 ? \ <br>         OleDbgOut("\t" iface "* RELEASED (cRef == 0)\r\n"),1 : \ <br>          (((LPINTERFACEIMPL)(lpThis))-&gt;cRef &lt; 0) ? \ <br>            ( \ <br>               DebugBreak(), \ <br>               OleDbgOut(  \ <br>                  "\tERROR: " iface "* RELEASED TOO MANY TIMES\r\n") \ <br>            ),1 : \ <br>            1) <br> <br>#else       // if _DEBUGLEVEL &lt; 2 <br>#define OleDbgReleaseMethod(lpThis, iface) \ <br>      (--((LPINTERFACEIMPL)(lpThis))-&gt;cRef == 0 ? \ <br>         1 : \ <br>          (((LPINTERFACEIMPL)(lpThis))-&gt;cRef &lt; 0) ? \ <br>            ( \ <br>               OleDbgOut(  \ <br>                  "\tERROR: " iface "* RELEASED TOO MANY TIMES\r\n") \ <br>      ),1 : \ <br>            1) <br> <br>#endif      // if _DEBUGLEVEL &lt; 2 <br> <br>#else       // ! defined (_DEBUG) <br> <br>#define OleDbgQueryInterfaceMethod(lpUnk) <br>#define OleDbgAddRefMethod(lpThis, iface) <br>#define OleDbgReleaseMethod(lpThis, iface) <br> <br>#endif      // if defined( _DEBUG ) <br> <br>#endif      // ! defined(__cplusplus) <br> <br>/* <br> * Some docfiles stuff <br> */ <br> <br>#define STGM_DFRALL (STGM_READWRITE | STGM_TRANSACTED | STGM_SHARE_DENY_WRITE) <br>#define STGM_DFALL (STGM_READWRITE | STGM_TRANSACTED | STGM_SHARE_EXCLUSIVE) <br>#define STGM_SALL (STGM_READWRITE | STGM_SHARE_EXCLUSIVE) <br> <br>/* <br> * Some Concurrency stuff <br> */ <br> <br>/* standard Delay (in msec) to wait before retrying an LRPC call. <br>**    this value is returned from IMessageFilter::RetryRejectedCall <br>*/ <br>#define OLESTDRETRYDELAY    (DWORD)5000 <br> <br>/* Cancel the pending outgoing LRPC call. <br>**    this value is returned from IMessageFilter::RetryRejectedCall <br>*/ <br>#define OLESTDCANCELRETRY   (DWORD)-1 <br> <br>/* <br> * Some Icon support stuff. <br> * <br> * The following API's are now OBSOLETE because equivalent API's have been <br> * added to the OLE2.DLL library <br> *      GetIconOfFile       superceeded by OleGetIconOfFile <br> *      GetIconOfClass      superceeded by OleGetIconOfClass <br> *      OleUIMetafilePictFromIconAndLabel <br> *                          superceeded by OleMetafilePictFromIconAndLabel <br> * <br> * The following macros are defined for backward compatibility with previous <br> * versions of the OLE2UI library. It is recommended that the new Ole* API's <br> * should be used instead. <br> */ <br>#define GetIconOfFile(hInst, lpszFileName, fUseFileAsLabel) \ <br>   OleGetIconOfFile(lpszFileName, fUseFileAsLabel) <br> <br>#define GetIconOfClass(hInst, rclsid, lpszLabel, fUseTypeAsLabel) \ <br>   OleGetIconOfClass(rclsid, lpszLabel, fUseTypeAsLabel) <br> <br>#define OleUIMetafilePictFromIconAndLabel(hIcon,pszLabel,pszSourceFile,iIcon)\ <br>   OleMetafilePictFromIconAndLabel(hIcon, pszLabel, pszSourceFile, iIcon) <br> <br> <br>/* <br> * Some Clipboard Copy/Paste &amp; Drag/Drop support stuff <br> */ <br> <br>//Macro to set all FormatEtc fields <br>#define SETFORMATETC(fe, cf, asp, td, med, li)   \ <br>   ((fe).cfFormat=cf, \ <br>    (fe).dwAspect=asp, \ <br>    (fe).ptd=td, \ <br>    (fe).tymed=med, \ <br>    (fe).lindex=li) <br> <br>//Macro to set interesting FormatEtc fields defaulting the others. <br>#define SETDEFAULTFORMATETC(fe, cf, med)  \ <br>   ((fe).cfFormat=cf, \ <br>    (fe).dwAspect=DVASPECT_CONTENT, \ <br>    (fe).ptd=NULL, \ <br>    (fe).tymed=med, \ <br>    (fe).lindex=-1) <br> <br>// Macro to test if two FormatEtc structures are an exact match <br>#define IsEqualFORMATETC(fe1, fe2)  \ <br>   (OleStdCompareFormatEtc(&amp;(fe1), &amp;(fe2))==0) <br> <br>// Clipboard format strings <br>#define CF_EMBEDSOURCE      TEXT("Embed Source") <br>#define CF_EMBEDDEDOBJECT   TEXT("Embedded Object") <br>#define CF_LINKSOURCE       TEXT("Link Source") <br>#define CF_CUSTOMLINKSOURCE TEXT("Custom Link Source") <br>#define CF_OBJECTDESCRIPTOR TEXT("Object Descriptor") <br>#define CF_LINKSRCDESCRIPTOR TEXT("Link Source Descriptor") <br>#define CF_OWNERLINK        TEXT("OwnerLink") <br>#define CF_FILENAME         TEXT("FileName") <br> <br>#define OleStdQueryOleObjectData(lpformatetc)   \ <br>   (((lpformatetc)-&gt;tymed &amp; TYMED_ISTORAGE) ?    \ <br>         NOERROR : ResultFromScode(DV_E_FORMATETC)) <br> <br>#define OleStdQueryLinkSourceData(lpformatetc)   \ <br>   (((lpformatetc)-&gt;tymed &amp; TYMED_ISTREAM) ?    \ <br>         NOERROR : ResultFromScode(DV_E_FORMATETC)) <br> <br>#define OleStdQueryObjectDescriptorData(lpformatetc)    \ <br>   (((lpformatetc)-&gt;tymed &amp; TYMED_HGLOBAL) ?    \ <br>         NOERROR : ResultFromScode(DV_E_FORMATETC)) <br> <br>#define OleStdQueryFormatMedium(lpformatetc, tymd)  \ <br>   (((lpformatetc)-&gt;tymed &amp; tymd) ?    \ <br>         NOERROR : ResultFromScode(DV_E_FORMATETC)) <br> <br>// Make an independent copy of a MetafilePict <br>#define OleStdCopyMetafilePict(hpictin, phpictout)  \ <br>   (*(phpictout) = OleDuplicateData(hpictin,CF_METAFILEPICT,GHND|GMEM_SHARE)) <br> <br> <br>// REVIEW: these need to be added to OLE2.H <br>#if !defined( DD_DEFSCROLLINTERVAL ) <br>#define DD_DEFSCROLLINTERVAL    50 <br>#endif <br> <br>#if !defined( DD_DEFDRAGDELAY ) <br>#define DD_DEFDRAGDELAY         200 <br>#endif <br> <br>#if !defined( DD_DEFDRAGMINDIST ) <br>#define DD_DEFDRAGMINDIST       2 <br>#endif <br> <br> <br>/* OleStdGetDropEffect <br>** ------------------- <br>** <br>** Convert a keyboard state into a DROPEFFECT. <br>** <br>** returns the DROPEFFECT value derived from the key state. <br>**    the following is the standard interpretation: <br>**          no modifier -- Default Drop     (NULL is returned) <br>**          CTRL        -- DROPEFFECT_COPY <br>**          SHIFT       -- DROPEFFECT_MOVE <br>**          CTRL-SHIFT  -- DROPEFFECT_LINK <br>** <br>**    Default Drop: this depends on the type of the target application. <br>**    this is re-interpretable by each target application. a typical <br>**    interpretation is if the drag is local to the same document <br>**    (which is source of the drag) then a MOVE operation is <br>**    performed. if the drag is not local, then a COPY operation is <br>**    performed. <br>*/ <br>#define OleStdGetDropEffect(grfKeyState)    \ <br>   ( (grfKeyState &amp; MK_CONTROL) ?          \ <br>      ( (grfKeyState &amp; MK_SHIFT) ? DROPEFFECT_LINK : DROPEFFECT_COPY ) :  \ <br>      ( (grfKeyState &amp; MK_SHIFT) ? DROPEFFECT_MOVE : 0 ) ) <br> <br> <br>#define OLESTDDROP_NONE         0 <br>#define OLESTDDROP_DEFAULT      1 <br>#define OLESTDDROP_NONDEFAULT   2 <br> <br> <br>/* <br> * Some misc stuff <br> */ <br> <br>#define EMBEDDINGFLAG "Embedding"     // Cmd line switch for launching a srvr <br> <br>#define HIMETRIC_PER_INCH   2540      // number HIMETRIC units per inch <br>#define PTS_PER_INCH        72        // number points (font size) per inch <br> <br>#define MAP_PIX_TO_LOGHIM(x,ppli)   MulDiv(HIMETRIC_PER_INCH, (x), (ppli)) <br>#define MAP_LOGHIM_TO_PIX(x,ppli)   MulDiv((ppli), (x), HIMETRIC_PER_INCH) <br> <br>// Returns TRUE if all fields of the two Rect's are equal, else FALSE. <br>#define AreRectsEqual(lprc1, lprc2)     \ <br>   (((lprc1-&gt;top == lprc2-&gt;top) &amp;&amp;     \ <br>     (lprc1-&gt;left == lprc2-&gt;left) &amp;&amp;   \ <br>     (lprc1-&gt;right == lprc2-&gt;right) &amp;&amp; \ <br>     (lprc1-&gt;bottom == lprc2-&gt;bottom)) ? TRUE : FALSE) <br> <br>#define LSTRCPYN(lpdst, lpsrc, cch) \ <br>(\ <br>   (lpdst)[(cch)-1] = '\0', \ <br>   ((cch)&gt;1 ? _fstrncpy(lpdst, lpsrc, (cch)-1) : 0)\ <br>) <br> <br> <br> <br>/****** DEBUG Stuff *****************************************************/ <br> <br>#ifdef _DEBUG <br> <br>#if !defined( _DBGTRACE ) <br>#define _DEBUGLEVEL 2 <br>#else <br>#define _DEBUGLEVEL _DBGTRACE <br>#endif <br> <br> <br>#if defined( NOASSERT ) <br> <br>#define OLEDBGASSERTDATA <br>#define OleDbgAssert(a) <br>#define OleDbgAssertSz(a, b) <br>#define OleDbgVerify(a) <br>#define OleDbgVerifySz(a, b) <br> <br>#else   // ! NOASSERT <br> <br>#define OLEDBGASSERTDATA    \ <br>      static char _based(_segname("_CODE")) _szAssertFile[]= __FILE__; <br> <br>#define OleDbgAssert(a) \ <br>      (!(a) ? FnAssert(#a, NULL, _szAssertFile, __LINE__) : (HRESULT)1) <br> <br>#define OleDbgAssertSz(a, b)    \ <br>      (!(a) ? FnAssert(#a, b, _szAssertFile, __LINE__) : (HRESULT)1) <br> <br>#define OleDbgVerify(a) \ <br>      OleDbgAssert(a) <br> <br>#define OleDbgVerifySz(a, b)    \ <br>      OleDbgAssertSz(a, b) <br> <br>#endif  // ! NOASSERT <br> <br> <br>#define OLEDBGDATA_MAIN(szPrefix)   \ <br>      char near g_szDbgPrefix[] = szPrefix;    \ <br>      OLEDBGASSERTDATA <br>#define OLEDBGDATA  \ <br>      extern char near g_szDbgPrefix[];    \ <br>      OLEDBGASSERTDATA <br> <br>#define OLEDBG_BEGIN(lpsz) \ <br>      OleDbgPrintAlways(g_szDbgPrefix,lpsz,1); <br> <br>#define OLEDBG_END  \ <br>      OleDbgPrintAlways(g_szDbgPrefix,"End\r\n",-1); <br> <br>#define OleDbgOut(lpsz) \ <br>      OleDbgPrintAlways(g_szDbgPrefix,lpsz,0) <br> <br>#define OleDbgOutNoPrefix(lpsz) \ <br>      OleDbgPrintAlways("",lpsz,0) <br> <br>#define OleDbgOutRefCnt(lpsz,lpObj,refcnt)      \ <br>      OleDbgPrintRefCntAlways(g_szDbgPrefix,lpsz,lpObj,(ULONG)refcnt) <br> <br>#define OleDbgOutRect(lpsz,lpRect)      \ <br>      OleDbgPrintRectAlways(g_szDbgPrefix,lpsz,lpRect) <br> <br>#define OleDbgOutHResult(lpsz,hr)   \ <br>      OleDbgPrintScodeAlways(g_szDbgPrefix,lpsz,GetScode(hr)) <br> <br>#define OleDbgOutScode(lpsz,sc) \ <br>      OleDbgPrintScodeAlways(g_szDbgPrefix,lpsz,sc) <br> <br>#define OleDbgOut1(lpsz)    \ <br>      OleDbgPrint(1,g_szDbgPrefix,lpsz,0) <br> <br>#define OleDbgOutNoPrefix1(lpsz)    \ <br>      OleDbgPrint(1,"",lpsz,0) <br> <br>#define OLEDBG_BEGIN1(lpsz)    \ <br>      OleDbgPrint(1,g_szDbgPrefix,lpsz,1); <br> <br>#define OLEDBG_END1 \ <br>      OleDbgPrint(1,g_szDbgPrefix,"End\r\n",-1); <br> <br>#define OleDbgOutRefCnt1(lpsz,lpObj,refcnt)     \ <br>      OleDbgPrintRefCnt(1,g_szDbgPrefix,lpsz,lpObj,(ULONG)refcnt) <br> <br>#define OleDbgOutRect1(lpsz,lpRect)     \ <br>      OleDbgPrintRect(1,g_szDbgPrefix,lpsz,lpRect) <br> <br>#define OleDbgOut2(lpsz)    \ <br>      OleDbgPrint(2,g_szDbgPrefix,lpsz,0) <br> <br>#define OleDbgOutNoPrefix2(lpsz)    \ <br>      OleDbgPrint(2,"",lpsz,0) <br> <br>#define OLEDBG_BEGIN2(lpsz)    \ <br>      OleDbgPrint(2,g_szDbgPrefix,lpsz,1); <br> <br>#define OLEDBG_END2 \ <br>      OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1); <br> <br>#define OleDbgOutRefCnt2(lpsz,lpObj,refcnt)     \ <br>      OleDbgPrintRefCnt(2,g_szDbgPrefix,lpsz,lpObj,(ULONG)refcnt) <br> <br>#define OleDbgOutRect2(lpsz,lpRect)     \ <br>      OleDbgPrintRect(2,g_szDbgPrefix,lpsz,lpRect) <br> <br>#define OleDbgOut3(lpsz)    \ <br>      OleDbgPrint(3,g_szDbgPrefix,lpsz,0) <br> <br>#define OleDbgOutNoPrefix3(lpsz)    \ <br>      OleDbgPrint(3,"",lpsz,0) <br> <br>#define OLEDBG_BEGIN3(lpsz)    \ <br>      OleDbgPrint(3,g_szDbgPrefix,lpsz,1); <br> <br>#define OLEDBG_END3 \ <br>      OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1); <br> <br>#define OleDbgOutRefCnt3(lpsz,lpObj,refcnt)     \ <br>      OleDbgPrintRefCnt(3,g_szDbgPrefix,lpsz,lpObj,(ULONG)refcnt) <br> <br>#define OleDbgOutRect3(lpsz,lpRect)     \ <br>      OleDbgPrintRect(3,g_szDbgPrefix,lpsz,lpRect) <br> <br>#define OleDbgOut4(lpsz)    \ <br>      OleDbgPrint(4,g_szDbgPrefix,lpsz,0) <br> <br>#define OleDbgOutNoPrefix4(lpsz)    \ <br>      OleDbgPrint(4,"",lpsz,0) <br> <br>#define OLEDBG_BEGIN4(lpsz)    \ <br>      OleDbgPrint(4,g_szDbgPrefix,lpsz,1); <br> <br>#define OLEDBG_END4 \ <br>      OleDbgPrint(4,g_szDbgPrefix,"End\r\n",-1); <br> <br>#define OleDbgOutRefCnt4(lpsz,lpObj,refcnt)     \ <br>      OleDbgPrintRefCnt(4,g_szDbgPrefix,lpsz,lpObj,(ULONG)refcnt) <br> <br>#define OleDbgOutRect4(lpsz,lpRect)     \ <br>      OleDbgPrintRect(4,g_szDbgPrefix,lpsz,lpRect) <br> <br>#else   //  !_DEBUG <br> <br>#define OLEDBGDATA_MAIN(szPrefix) <br>#define OLEDBGDATA <br>#define OleDbgAssert(a) <br>#define OleDbgAssertSz(a, b) <br>#define OleDbgVerify(a)         (a) <br>#define OleDbgVerifySz(a, b)    (a) <br>#define OleDbgOutHResult(lpsz,hr) <br>#define OleDbgOutScode(lpsz,sc) <br>#define OLEDBG_BEGIN(lpsz) <br>#define OLEDBG_END <br>#define OleDbgOut(lpsz) <br>#define OleDbgOut1(lpsz) <br>#define OleDbgOut2(lpsz) <br>#define OleDbgOut3(lpsz) <br>#define OleDbgOut4(lpsz) <br>#define OleDbgOutNoPrefix(lpsz) <br>#define OleDbgOutNoPrefix1(lpsz) <br>#define OleDbgOutNoPrefix2(lpsz) <br>#define OleDbgOutNoPrefix3(lpsz) <br>#define OleDbgOutNoPrefix4(lpsz) <br>#define OLEDBG_BEGIN1(lpsz) <br>#define OLEDBG_BEGIN2(lpsz) <br>#define OLEDBG_BEGIN3(lpsz) <br>#define OLEDBG_BEGIN4(lpsz) <br>#define OLEDBG_END1 <br>#define OLEDBG_END2 <br>#define OLEDBG_END3 <br>#define OLEDBG_END4 <br>#define OleDbgOutRefCnt(lpsz,lpObj,refcnt) <br>#define OleDbgOutRefCnt1(lpsz,lpObj,refcnt) <br>#define OleDbgOutRefCnt2(lpsz,lpObj,refcnt) <br>#define OleDbgOutRefCnt3(lpsz,lpObj,refcnt) <br>#define OleDbgOutRefCnt4(lpsz,lpObj,refcnt) <br>#define OleDbgOutRect(lpsz,lpRect) <br>#define OleDbgOutRect1(lpsz,lpRect) <br>#define OleDbgOutRect2(lpsz,lpRect) <br>#define OleDbgOutRect3(lpsz,lpRect) <br>#define OleDbgOutRect4(lpsz,lpRect) <br> <br>#endif  //  _DEBUG <br> <br> <br>/************************************************************************* <br>** Function prototypes <br>*************************************************************************/ <br> <br> <br>//OLESTD.C <br>STDAPI_(int) SetDCToAnisotropic(HDC hDC, LPRECT lprcPhysical, LPRECT lprcLogical, LPRECT lprcWindowOld, LPRECT lprcViewportOld); <br>STDAPI_(int) SetDCToDrawInHimetricRect(HDC, LPRECT, LPRECT, LPRECT, LPRECT); <br>STDAPI_(int) ResetOrigDC(HDC, int, LPRECT, LPRECT); <br> <br>STDAPI_(int)        XformWidthInHimetricToPixels(HDC, int); <br>STDAPI_(int)        XformWidthInPixelsToHimetric(HDC, int); <br>STDAPI_(int)        XformHeightInHimetricToPixels(HDC, int); <br>STDAPI_(int)        XformHeightInPixelsToHimetric(HDC, int); <br> <br>STDAPI_(void) XformRectInPixelsToHimetric(HDC, LPRECT, LPRECT); <br>STDAPI_(void) XformRectInHimetricToPixels(HDC, LPRECT, LPRECT); <br>STDAPI_(void) XformSizeInPixelsToHimetric(HDC, LPSIZEL, LPSIZEL); <br>STDAPI_(void) XformSizeInHimetricToPixels(HDC, LPSIZEL, LPSIZEL); <br>STDAPI_(int) XformWidthInHimetricToPixels(HDC, int); <br>STDAPI_(int) XformWidthInPixelsToHimetric(HDC, int); <br>STDAPI_(int) XformHeightInHimetricToPixels(HDC, int); <br>STDAPI_(int) XformHeightInPixelsToHimetric(HDC, int); <br> <br>STDAPI_(void) ParseCmdLine(LPSTR, BOOL FAR *, LPSTR); <br> <br>STDAPI_(BOOL) OleStdIsOleLink(LPUNKNOWN lpUnk); <br>STDAPI_(LPUNKNOWN) OleStdQueryInterface(LPUNKNOWN lpUnk, REFIID riid); <br>STDAPI_(LPSTORAGE) OleStdCreateRootStorage(LPOLESTR lpszStgName, DWORD grfMode); <br>STDAPI_(LPSTORAGE) OleStdOpenRootStorage(LPOLESTR lpszStgName, DWORD grfMode); <br>STDAPI_(LPSTORAGE) OleStdOpenOrCreateRootStorage(LPOLESTR lpszStgName, DWORD grfMode); <br>STDAPI_(LPSTORAGE) OleStdCreateChildStorage(LPSTORAGE lpStg, LPOLESTR lpszStgName); <br>STDAPI_(LPSTORAGE) OleStdOpenChildStorage(LPSTORAGE lpStg, LPOLESTR lpszStgName, DWORD grfMode); <br>STDAPI_(BOOL) OleStdCommitStorage(LPSTORAGE lpStg); <br>STDAPI OleStdDestroyAllElements(LPSTORAGE lpStg); <br> <br>STDAPI_(LPSTORAGE) OleStdCreateStorageOnHGlobal( <br>      HANDLE hGlobal, <br>      BOOL fDeleteOnRelease, <br>      DWORD dwgrfMode <br>); <br>STDAPI_(LPSTORAGE) OleStdCreateTempStorage(BOOL fUseMemory, DWORD grfMode); <br>STDAPI OleStdDoConvert(LPSTORAGE lpStg, REFCLSID rClsidNew); <br>STDAPI_(BOOL) OleStdGetTreatAsFmtUserType( <br>      REFCLSID        rClsidApp, <br>      LPSTORAGE       lpStg, <br>      CLSID FAR*      lpclsid, <br>      CLIPFORMAT FAR* lpcfFmt, <br>      LPOLESTR FAR*      lplpszType <br>); <br>STDAPI OleStdDoTreatAsClass(LPOLESTR lpszUserType, REFCLSID rclsid, REFCLSID rclsidNew); <br>STDAPI_(BOOL) OleStdSetupAdvises(LPOLEOBJECT lpOleObject, DWORD dwDrawAspect, <br>               LPOLESTR lpszContainerApp, LPOLESTR lpszContainerObj, <br>               LPADVISESINK lpAdviseSink, BOOL fCreate); <br>STDAPI OleStdSwitchDisplayAspect( <br>      LPOLEOBJECT             lpOleObj, <br>      LPDWORD                 lpdwCurAspect, <br>      DWORD                   dwNewAspect, <br>      HGLOBAL                 hMetaPict, <br>      BOOL                    fDeleteOldAspect, <br>      BOOL                    fSetupViewAdvise, <br>      LPADVISESINK            lpAdviseSink, <br>      BOOL FAR*               lpfMustUpdate <br>); <br>STDAPI OleStdSetIconInCache(LPOLEOBJECT lpOleObj, HGLOBAL hMetaPict); <br>STDAPI_(HGLOBAL) OleStdGetData( <br>      LPDATAOBJECT        lpDataObj, <br>      CLIPFORMAT          cfFormat, <br>      DVTARGETDEVICE FAR* lpTargetDevice, <br>      DWORD               dwAspect, <br>      LPSTGMEDIUM         lpMedium <br>); <br>STDAPI_(void) OleStdMarkPasteEntryList( <br>      LPDATAOBJECT        lpSrcDataObj, <br>      LPOLEUIPASTEENTRY   lpPriorityList, <br>      int                 cEntries <br>); <br>STDAPI_(int) OleStdGetPriorityClipboardFormat( <br>      LPDATAOBJECT        lpSrcDataObj, <br>      LPOLEUIPASTEENTRY   lpPriorityList, <br>      int                 cEntries <br>); <br>STDAPI_(BOOL) OleStdIsDuplicateFormat( <br>      LPFORMATETC         lpFmtEtc, <br>      LPFORMATETC         arrFmtEtc, <br>      int                 nFmtEtc <br>); <br>STDAPI_(void) OleStdRegisterAsRunning(LPUNKNOWN lpUnk, LPMONIKER lpmkFull, DWORD FAR* lpdwRegister); <br>STDAPI_(void) OleStdRevokeAsRunning(DWORD FAR* lpdwRegister); <br>STDAPI_(void) OleStdNoteFileChangeTime(LPOLESTR lpszFileName, DWORD dwRegister); <br>STDAPI_(void) OleStdNoteObjectChangeTime(DWORD dwRegister); <br>STDAPI OleStdGetOleObjectData( <br>      LPPERSISTSTORAGE    lpPStg, <br>      LPFORMATETC         lpformatetc, <br>      LPSTGMEDIUM         lpMedium, <br>      BOOL                fUseMemory <br>); <br>STDAPI OleStdGetLinkSourceData( <br>      LPMONIKER           lpmk, <br>      LPCLSID             lpClsID, <br>      LPFORMATETC         lpformatetc, <br>      LPSTGMEDIUM         lpMedium <br>); <br>STDAPI_(HGLOBAL) OleStdGetObjectDescriptorData( <br>      CLSID               clsid, <br>      DWORD               dwAspect, <br>      SIZEL               sizel, <br>      POINTL              pointl, <br>      DWORD               dwStatus, <br>      LPOLESTR            lpszFullUserTypeName, <br>      LPOLESTR            lpszSrcOfCopy <br>); <br>STDAPI_(HGLOBAL) OleStdGetObjectDescriptorDataFromOleObject( <br>      LPOLEOBJECT         lpOleObj, <br>      LPOLESTR            lpszSrcOfCopy, <br>      DWORD               dwAspect, <br>      POINTL              pointl, <br>      LPSIZEL             lpSizelHim <br>); <br>STDAPI_(HGLOBAL) OleStdFillObjectDescriptorFromData( <br>      LPDATAOBJECT       lpDataObject, <br>      LPSTGMEDIUM        lpmedium, <br>      CLIPFORMAT FAR*    lpcfFmt <br>); <br>STDAPI_(HANDLE) OleStdGetMetafilePictFromOleObject( <br>      LPOLEOBJECT         lpOleObj, <br>      DWORD               dwDrawAspect, <br>      LPSIZEL             lpSizelHim, <br>      DVTARGETDEVICE FAR* ptd <br>); <br> <br>STDAPI_(void) OleStdCreateTempFileMoniker(LPOLESTR lpszPrefixString, UINT FAR* lpuUnique, LPOLESTR lpszName, LPMONIKER FAR* lplpmk); <br>STDAPI_(LPMONIKER) OleStdGetFirstMoniker(LPMONIKER lpmk); <br>STDAPI_(ULONG) OleStdGetLenFilePrefixOfMoniker(LPMONIKER lpmk); <br>STDAPI OleStdMkParseDisplayName( <br>      REFCLSID        rClsid, <br>      LPBC            lpbc, <br>      LPOLESTR        lpszUserName, <br>      ULONG FAR*      lpchEaten, <br>      LPMONIKER FAR*  lplpmk <br>); <br>STDAPI_(LPVOID) OleStdMalloc(ULONG ulSize); <br>STDAPI_(LPVOID) OleStdRealloc(LPVOID pmem, ULONG ulSize); <br>STDAPI_(void) OleStdFree(LPVOID pmem); <br>STDAPI_(ULONG) OleStdGetSize(LPVOID pmem); <br>STDAPI_(void) OleStdFreeString(LPOLESTR lpsz, LPMALLOC lpMalloc); <br>STDAPI_(LPOLESTR) OleStdCopyString(LPOLESTR lpszSrc, LPMALLOC lpMalloc); <br>STDAPI_(ULONG) OleStdGetItemToken(LPOLESTR lpszSrc, LPOLESTR lpszDst,int nMaxChars); <br> <br>STDAPI_(UINT)     OleStdIconLabelTextOut(HDC        hDC, <br>                               HFONT      hFont, <br>                               int        nXStart, <br>                               int        nYStart, <br>                               UINT       fuOptions, <br>                               RECT FAR * lpRect, <br>                               LPOLESTR   lpszString, <br>                               UINT       cchString, <br>                               int FAR *  lpDX); <br> <br>// registration database query functions <br>STDAPI_(UINT)     OleStdGetAuxUserType(REFCLSID rclsid, <br>                             WORD   wAuxUserType, <br>                             LPOLESTR  lpszAuxUserType, <br>                             int    cch, <br>                             HKEY   hKey); <br> <br>STDAPI_(UINT)     OleStdGetUserTypeOfClass(REFCLSID rclsid, <br>                                 LPOLESTR lpszUserType, <br>                                 UINT cch, <br>                                 HKEY hKey); <br> <br>STDAPI_(BOOL) OleStdGetMiscStatusOfClass(REFCLSID, HKEY, DWORD FAR *); <br>STDAPI_(CLIPFORMAT) OleStdGetDefaultFileFormatOfClass( <br>      REFCLSID        rclsid, <br>      HKEY            hKey <br>); <br> <br>STDAPI_(void) OleStdInitVtbl(LPVOID lpVtbl, UINT nSizeOfVtbl); <br>STDMETHODIMP OleStdNullMethod(LPUNKNOWN lpThis); <br>STDAPI_(BOOL) OleStdCheckVtbl(LPVOID lpVtbl, UINT nSizeOfVtbl, LPOLESTR lpszIface); <br>STDAPI_(ULONG) OleStdVerifyRelease(LPUNKNOWN lpUnk, LPOLESTR lpszMsg); <br>STDAPI_(ULONG) OleStdRelease(LPUNKNOWN lpUnk); <br> <br>STDAPI_(HDC) OleStdCreateDC(DVTARGETDEVICE FAR* ptd); <br>STDAPI_(HDC) OleStdCreateIC(DVTARGETDEVICE FAR* ptd); <br>STDAPI_(DVTARGETDEVICE FAR*) OleStdCreateTargetDevice(LPPRINTDLG lpPrintDlg); <br>STDAPI_(BOOL) OleStdDeleteTargetDevice(DVTARGETDEVICE FAR* ptd); <br>STDAPI_(DVTARGETDEVICE FAR*) OleStdCopyTargetDevice(DVTARGETDEVICE FAR* ptdSrc); <br>STDAPI_(BOOL) OleStdCopyFormatEtc(LPFORMATETC petcDest, LPFORMATETC petcSrc); <br>STDAPI_(int) OleStdCompareFormatEtc(FORMATETC FAR* pFetcLeft, FORMATETC FAR* pFetcRight); <br>STDAPI_(BOOL) OleStdCompareTargetDevice <br>   (DVTARGETDEVICE FAR* ptdLeft, DVTARGETDEVICE FAR* ptdRight); <br> <br> <br>STDAPI_(void) OleDbgPrint( <br>      int     nDbgLvl, <br>      LPSTR   lpszPrefix, <br>      LPSTR   lpszMsg, <br>      int     nIndent <br>); <br>STDAPI_(void) OleDbgPrintAlways(LPSTR lpszPrefix, LPSTR lpszMsg, int nIndent); <br>STDAPI_(void) OleDbgSetDbgLevel(int nDbgLvl); <br>STDAPI_(int) OleDbgGetDbgLevel( void ); <br>STDAPI_(void) OleDbgIndent(int n); <br>STDAPI_(void) OleDbgPrintRefCnt( <br>      int         nDbgLvl, <br>      LPSTR       lpszPrefix, <br>      LPSTR       lpszMsg, <br>      LPVOID      lpObj, <br>      ULONG       refcnt <br>); <br>STDAPI_(void) OleDbgPrintRefCntAlways( <br>      LPSTR       lpszPrefix, <br>      LPSTR       lpszMsg, <br>      LPVOID      lpObj, <br>      ULONG       refcnt <br>); <br>STDAPI_(void) OleDbgPrintRect( <br>      int         nDbgLvl, <br>      LPSTR       lpszPrefix, <br>      LPSTR       lpszMsg, <br>      LPRECT      lpRect <br>); <br>STDAPI_(void) OleDbgPrintRectAlways( <br>      LPSTR       lpszPrefix, <br>      LPSTR       lpszMsg, <br>      LPRECT      lpRect <br>); <br>STDAPI_(void) OleDbgPrintScodeAlways(LPSTR lpszPrefix, LPSTR lpszMsg, SCODE sc); <br> <br> <br>STDAPI_(LPENUMFORMATETC) <br>  OleStdEnumFmtEtc_Create(ULONG nCount, LPFORMATETC lpEtc); <br> <br>STDAPI_(LPENUMSTATDATA) <br>  OleStdEnumStatData_Create(ULONG nCount, LPSTATDATA lpStat); <br> <br>STDAPI_(BOOL) <br>  OleStdCopyStatData(LPSTATDATA pDest, LPSTATDATA pSrc); <br> <br>STDAPI_(HPALETTE) <br>  OleStdCreateStandardPalette(void); <br> <br>#if defined( OBSOLETE ) <br> <br>/************************************************************************* <br>** The following API's have been converted into macros: <br>**          OleStdQueryOleObjectData <br>**          OleStdQueryLinkSourceData <br>**          OleStdQueryObjectDescriptorData <br>**          OleStdQueryFormatMedium <br>**          OleStdCopyMetafilePict <br>**          AreRectsEqual <br>**          OleStdGetDropEffect <br>** <br>**    These macros are defined above <br>*************************************************************************/ <br>STDAPI_(BOOL) AreRectsEqual(LPRECT lprc1, LPRECT lprc2); <br>STDAPI_(BOOL) OleStdCopyMetafilePict(HANDLE hpictin, HANDLE FAR* phpictout); <br>STDAPI OleStdQueryOleObjectData(LPFORMATETC lpformatetc); <br>STDAPI OleStdQueryLinkSourceData(LPFORMATETC lpformatetc); <br>STDAPI OleStdQueryObjectDescriptorData(LPFORMATETC lpformatetc); <br>STDAPI OleStdQueryFormatMedium(LPFORMATETC lpformatetc, TYMED tymed); <br>STDAPI_(DWORD) OleStdGetDropEffect ( DWORD grfKeyState ); <br>#endif  // OBSOLETE <br> <br>// END OF OLD OLESTD.H FILE <br> <br>#define UPDATELINKS_STARTDELAY 2000 // delay before first link <br> <br>#ifdef __TURBOC__ <br>#define _getcwd getcwd <br>#define _itoa   itoa <br>#define __max   max <br>#define _find_t find_t <br>#endif // __TURBOC__ <br> <br>#ifdef WIN32 <br>#define _fmemset memset <br>#define _fmemcpy memcpy <br>#define _fmemcmp memcmp <br>#define _fstrcpy strcpy <br>#define _fstrncpy strncpy <br>#define _fstrlen strlen <br>#define _fstrrchr strrchr <br>#define _fstrtok strtok <br> <br>// BUGBUG32: isspace function does not seem to work properly <br>#undef isspace <br>#define isspace(j) (j==' ' || j=='\t' || j=='\n') <br>#endif  // WIN32 <br> <br>#if !defined( EXPORT ) <br>#ifdef WIN32 <br>#define EXPORT <br>#else <br>#define EXPORT  __export <br>#endif  // WIN32 <br>#endif  // !EXPORT <br> <br>/* <br> * Initialization / Uninitialization routines.  OleStdInitialize <br> * must be called prior to using any functions in OLESTD.LIB. <br> */ <br> <br>STDAPI_(BOOL) OleStdInitialize(HINSTANCE hInstance); <br>STDAPI_(void) OleStdUninitialize(void); <br> <br>// object count, used to support DllCanUnloadNow and OleUICanUnloadNow <br>extern DWORD g_dwObjectCount; <br> <br>STDAPI OleUICanUnloadNow(void); <br>STDAPI OleUILockLibrary(BOOL fLock); <br> <br> <br>//Dialog Identifiers as passed in Help messages to identify the source. <br>#define IDD_FILEOPEN            32253 <br> <br>// The following Dialogs are message dialogs used by OleUIPromptUser API <br> <br>// Stringtable identifers <br>#define IDS_OLE2UIUNKNOWN       32300 <br>#define IDS_OLE2UILINK          32301 <br>#define IDS_OLE2UIOBJECT        32302 <br>#define IDS_OLE2UIEDIT          32303 <br>#define IDS_OLE2UICONVERT       32304 <br>#define IDS_OLE2UIEDITLINKCMD_1VERB     32305 <br>#define IDS_OLE2UIEDITOBJECTCMD_1VERB   32306 <br>#define IDS_OLE2UIEDITLINKCMD_NVERB     32307 <br>#define IDS_OLE2UIEDITOBJECTCMD_NVERB   32308 <br>#define IDS_OLE2UIEDITNOOBJCMD  32309 <br>// def. icon label (usu. "Document") <br>#define IDS_DEFICONLABEL        32310 <br>#define IDS_OLE2UIPASTELINKEDTYPE  32311 <br> <br> <br>#define IDS_FILTERS             32320 <br>#define IDS_ICONFILTERS         32321 <br>#define IDS_BROWSE              32322 <br> <br>//Resource identifiers for bitmaps <br>#define IDB_RESULTSEGA                  32325 <br>#define IDB_RESULTSVGA                  32326 <br>#define IDB_RESULTSHIRESVGA             32327 <br> <br> <br>//Missing from windows.h <br>#ifndef PVOID <br>typedef VOID *PVOID; <br>#endif <br> <br> <br>//Hook type used in all structures. <br>typedef UINT (CALLBACK *LPFNOLEUIHOOK)(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//Strings for registered messages <br>#define SZOLEUI_MSG_FILEOKSTRING        "OLEUI_MSG_FILEOKSTRING" <br> <br> <br>//Help Button Identifier <br>#define ID_OLEUIHELP                    99 <br> <br>// Static text control (use this instead of -1 so things work correctly for <br>// localization <br>#define  ID_STATIC                      98 <br> <br>//Maximum key size we read from the RegDB. <br>#define OLEUI_CCHKEYMAX                 256  // make any changes to this in geticon.c too <br> <br>//Maximum verb length and length of Object menu <br>#define OLEUI_CCHVERBMAX                32 <br>#define OLEUI_OBJECTMENUMAX             256 <br> <br>//Maximum MS-DOS pathname. <br>#define OLEUI_CCHPATHMAX                256 // make any changes to this in geticon.c too <br>#define OLEUI_CCHFILEMAX                13 <br> <br>//Icon label length <br>#define OLEUI_CCHLABELMAX               40  // make any changes to this in geticon.c too <br> <br>//Length of the CLSID string <br>#define OLEUI_CCHCLSIDSTRING            39 <br> <br> <br>//Metafile utility functions <br>WINOLEAPI_(HGLOBAL) OleUIMetafilePictFromIconAndLabel(HICON, LPOLESTR, LPOLESTR, UINT); <br>STDAPI_(void)    OleUIMetafilePictIconFree(HGLOBAL); <br>STDAPI_(BOOL)    OleUIMetafilePictIconDraw(HDC, LPRECT, HGLOBAL, BOOL); <br>STDAPI_(UINT)    OleUIMetafilePictExtractLabel(HGLOBAL, LPOLESTR, UINT, LPDWORD); </code></pre>
<p>
</p>
<pre><code>STDAPI_(HICON)   OleUIMetafilePictExtractIcon(HGLOBAL); <br>STDAPI_(BOOL)    OleUIMetafilePictExtractIconSource(HGLOBAL,LPOLESTR,UINT FAR *); <br> <br> <br> <br> <br> <br>/************************************************************************* <br>** INSERT OBJECT DIALOG <br>*************************************************************************/ <br> <br>//Insert Object Dialog identifiers <br>#define ID_IO_CREATENEW                 2100 <br>#define ID_IO_CREATEFROMFILE            2101 <br>#define ID_IO_LINKFILE                  2102 <br>#define ID_IO_OBJECTTYPELIST            2103 <br>#define ID_IO_DISPLAYASICON             2104 <br>#define ID_IO_CHANGEICON                2105 <br>#define ID_IO_FILE                      2106 <br>#define ID_IO_FILEDISPLAY               2107 <br>#define ID_IO_RESULTIMAGE               2108 <br>#define ID_IO_RESULTTEXT                2109 <br>#define ID_IO_ICONDISPLAY               2110 <br>#define ID_IO_OBJECTTYPETEXT            2111 <br>#define ID_IO_FILETEXT                  2112 <br>#define ID_IO_FILETYPE                  2113 <br> <br>// Strings in OLE2UI resources <br>#define IDS_IORESULTNEW                 32400 <br>#define IDS_IORESULTNEWICON             32401 <br>#define IDS_IORESULTFROMFILE1           32402 <br>#define IDS_IORESULTFROMFILE2           32403 <br>#define IDS_IORESULTFROMFILEICON2       32404 <br>#define IDS_IORESULTLINKFILE1           32405 <br>#define IDS_IORESULTLINKFILE2           32406 <br>#define IDS_IORESULTLINKFILEICON1       32407 <br>#define IDS_IORESULTLINKFILEICON2       32408 <br> <br>/************************************************************************* <br>** PASTE SPECIAL DIALOG <br>*************************************************************************/ <br> <br>//Paste Special Dialog identifiers <br>#define ID_PS_PASTE                    500 <br>#define ID_PS_PASTELINK                501 <br>#define ID_PS_SOURCETEXT               502 <br>#define ID_PS_PASTELIST                503 <br>#define ID_PS_PASTELINKLIST            504 <br>#define ID_PS_DISPLAYLIST              505 <br>#define ID_PS_DISPLAYASICON            506 <br>#define ID_PS_ICONDISPLAY              507 <br>#define ID_PS_CHANGEICON               508 <br>#define ID_PS_RESULTIMAGE              509 <br>#define ID_PS_RESULTTEXT               510 <br>#define ID_PS_RESULTGROUP              511 <br>#define ID_PS_STXSOURCE                512 <br>#define ID_PS_STXAS                    513 <br> <br>// Paste Special String IDs <br>#define IDS_PSPASTEDATA                32410 <br>#define IDS_PSPASTEOBJECT              32411 <br>#define IDS_PSPASTEOBJECTASICON        32412 <br>#define IDS_PSPASTELINKDATA            32413 <br>#define IDS_PSPASTELINKOBJECT          32414 <br>#define IDS_PSPASTELINKOBJECTASICON    32415 <br>#define IDS_PSNONOLE                   32416 <br>#define IDS_PSUNKNOWNTYPE              32417 <br>#define IDS_PSUNKNOWNSRC               32418 <br>#define IDS_PSUNKNOWNAPP               32419 <br> <br> <br>/************************************************************************* <br>** EDIT LINKS DIALOG <br>*************************************************************************/ <br> <br>// Edit Links Dialog identifiers <br>#define ID_EL_CHANGESOURCE             201 <br>#define ID_EL_AUTOMATIC                202 <br>#define ID_EL_CLOSE                    208 <br>#define ID_EL_CANCELLINK               209 <br>#define ID_EL_UPDATENOW                210 <br>#define ID_EL_OPENSOURCE               211 <br>#define ID_EL_MANUAL                   212 <br>#define ID_EL_LINKSOURCE               216 <br>#define ID_EL_LINKTYPE                 217 <br>#define ID_EL_UPDATE                   218 <br>#define ID_EL_NULL                     -1 <br>#define ID_EL_LINKSLISTBOX             206 <br>#define ID_EL_COL1                     220 <br>#define ID_EL_COL2                     221 <br>#define ID_EL_COL3                     222 <br> <br> <br> <br>/************************************************************************* <br>** CHANGE ICON DIALOG <br>*************************************************************************/ <br> <br>//Change Icon Dialog identifiers <br>#define ID_GROUP                    120 <br>#define ID_CURRENT                  121 <br>#define ID_CURRENTICON              122 <br>#define ID_DEFAULT                  123 <br>#define ID_DEFAULTICON              124 <br>#define ID_FROMFILE                 125 <br>#define ID_FROMFILEEDIT             126 <br>#define ID_ICONLIST                 127 <br>#define ID_LABEL                    128 <br>#define ID_LABELEDIT                129 <br>#define ID_BROWSE                   130 <br>#define ID_RESULTICON               132 <br>#define ID_RESULTLABEL              133 <br> <br>// Stringtable defines for Change Icon <br>#define IDS_CINOICONSINFILE         32430 <br>#define IDS_CIINVALIDFILE           32431 <br>#define IDS_CIFILEACCESS            32432 <br>#define IDS_CIFILESHARE             32433 <br>#define IDS_CIFILEOPENFAIL          32434 <br> <br> <br> <br>/************************************************************************* <br>** CONVERT DIALOG <br>*************************************************************************/ <br> <br>//Convert Dialog identifiers <br>#define IDCV_OBJECTTYPE             150 <br>#define IDCV_DISPLAYASICON          152 <br>#define IDCV_CHANGEICON             153 <br>#define IDCV_ACTIVATELIST           154 <br>#define IDCV_CONVERTTO              155 <br>#define IDCV_ACTIVATEAS             156 <br>#define IDCV_RESULTTEXT             157 <br>#define IDCV_CONVERTLIST            158 <br>#define IDCV_ICON                   159 <br>#define IDCV_ICONLABEL1             160 <br>#define IDCV_ICONLABEL2             161 <br>#define IDCV_STXCURTYPE             162 <br>#define IDCV_GRPRESULT              163 <br>#define IDCV_STXCONVERTTO           164 <br> <br>// String IDs for Convert dialog <br>#define IDS_CVRESULTCONVERTLINK     32440 <br>#define IDS_CVRESULTCONVERTTO       32441 <br>#define IDS_CVRESULTNOCHANGE        32442 <br>#define IDS_CVRESULTDISPLAYASICON   32443 <br>#define IDS_CVRESULTACTIVATEAS      32444 <br>#define IDS_CVRESULTACTIVATEDIFF    32445 <br> <br> <br>/************************************************************************* <br>** BUSY DIALOG <br>*************************************************************************/ <br> <br>// Busy dialog identifiers <br>#define IDBZ_RETRY                      600 <br>#define IDBZ_ICON                       601 <br>#define IDBZ_MESSAGE1                   602 <br>#define IDBZ_SWITCHTO                   604 <br> <br>// Busy dialog stringtable defines <br>#define IDS_BZRESULTTEXTBUSY            32447 <br>#define IDS_BZRESULTTEXTNOTRESPONDING   32448 <br> <br>// Links dialog stringtable defines <br>#define IDS_LINK_AUTO           32450 <br>#define IDS_LINK_MANUAL         32451 <br>#define IDS_LINK_UNKNOWN        32452 <br>#define IDS_LINKS               32453 <br>#define IDS_FAILED              32454 <br>#define IDS_CHANGESOURCE        32455 <br>#define IDS_INVALIDSOURCE       32456 <br>#define IDS_ERR_GETLINKSOURCE   32457 <br>#define IDS_ERR_GETLINKUPDATEOPTIONS    32458 <br>#define IDS_ERR_ADDSTRING       32459 <br>#define IDS_CHANGEADDITIONALLINKS   32460 <br>#define IDS_CLOSE               32461 <br> <br> <br>/************************************************************************* <br>** PROMPT USER DIALOGS <br>*************************************************************************/ <br>#define ID_PU_LINKS             900 <br>#define ID_PU_TEXT              901 <br>#define ID_PU_CONVERT           902 <br>#define ID_PU_BROWSE            904 <br>#define ID_PU_METER             905 <br>#define ID_PU_PERCENT           906 <br>#define ID_PU_STOP              907 <br> <br>// used for -1 ids in dialogs: <br>#define ID_DUMMY    999 <br> <br>/* inside ole2ui.c */ <br>#ifdef __cplusplus <br>extern "C" <br>#endif <br> <br>/************************************************************************* <br>** OLE OBJECT FEEDBACK EFFECTS <br>*************************************************************************/ <br> <br>#define OLEUI_HANDLES_USEINVERSE    0x00000001L <br>#define OLEUI_HANDLES_NOBORDER      0x00000002L <br>#define OLEUI_HANDLES_INSIDE        0x00000004L <br>#define OLEUI_HANDLES_OUTSIDE       0x00000008L <br> <br> <br>#define OLEUI_SHADE_FULLRECT        1 <br>#define OLEUI_SHADE_BORDERIN        2 <br>#define OLEUI_SHADE_BORDEROUT       3 <br> <br>/* objfdbk.c function prototypes */ <br>STDAPI_(void) OleUIDrawHandles(LPRECT lpRect, HDC hdc, DWORD dwFlags, UINT cSize, BOOL fDraw); <br>STDAPI_(void) OleUIDrawShading(LPRECT lpRect, HDC hdc, DWORD dwFlags, UINT cWidth); <br>STDAPI_(void) OleUIShowObject(LPCRECT lprc, HDC hdc, BOOL fIsLink); <br> <br> <br>/************************************************************************* <br>** Hatch window definitions and prototypes                              ** <br>*************************************************************************/ <br>#define DEFAULT_HATCHBORDER_WIDTH   4 <br> <br>STDAPI_(BOOL) RegisterHatchWindowClass(HINSTANCE hInst); <br>STDAPI_(HWND) CreateHatchWindow(HWND hWndParent, HINSTANCE hInst); <br>STDAPI_(UINT) GetHatchWidth(HWND hWndHatch); <br>STDAPI_(void) GetHatchRect(HWND hWndHatch, LPRECT lpHatchRect); <br>STDAPI_(void) SetHatchRect(HWND hWndHatch, LPRECT lprcHatchRect); <br>STDAPI_(void) SetHatchWindowSize( <br>      HWND        hWndHatch, <br>      LPRECT      lprcIPObjRect, <br>      LPRECT      lprcClipRect, <br>      LPPOINT     lpptOffset <br>); <br> <br>#define OLEUI_VERSION_MAGIC 0x4D42 <br> <br>#endif // _OLESTD_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

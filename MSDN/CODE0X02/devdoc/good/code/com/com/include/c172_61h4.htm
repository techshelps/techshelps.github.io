<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STABLIZE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context178"></a>STABLIZE.H</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       stablize.h <br>// <br>//  Contents:   Stabilization Classes used to stabilize objects during <br>//              re-entrant calls. <br>// <br>//  Classes:    CSafeRefCount <br>//              CStabilize <br>// <br>//  History:    8-26-94   stevebl   Modified from code written by AlexGo <br>// <br>//---------------------------------------------------------------------------- <br> <br>#ifndef __STABLIZE__ <br>#define __STABLIZE__ <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Class:      CSafeRefCount <br>// <br>//  Purpose:    A concrete class for objects to inherit from. <br>//              CSafeRefCount will keep track of reference counts, <br>//              nesting counts, and zombie states, allowing objects <br>//              to easily manage the liveness of their memory images. <br>// <br>//  Interface: <br>// <br>//  History:    dd-mmm-yy Author    Comment <br>//              01-Aug-94 alexgo    author <br>// <br>//  Notes:      inherits CPrivAlloc <br>// <br>//-------------------------------------------------------------------------- <br> <br>class CSafeRefCount <br>{ <br>public: <br>        ULONG   SafeAddRef(); <br>        ULONG   SafeRelease(); <br>        ULONG   IncrementNestCount(); <br>        ULONG   DecrementNestCount(); <br>                CSafeRefCount(); <br>        virtual ~CSafeRefCount(); <br> <br>private: <br> <br>        ULONG   m_cRefs; <br>        ULONG   m_cNest; <br>        BOOL    m_fInDelete; <br>}; <br> <br>//+------------------------------------------------------------------------- <br>// <br>//  Class:      CStabilize <br>// <br>//  Purpose:    An instance of this class should be allocated on the <br>//              stack of every object method that makes an outgoing call. <br>//              The contstructor takes a pointer to the object's base <br>//              CSafeRefCount class. <br>// <br>//  Interface: <br>// <br>//  History:    dd-mmm-yy Author    Comment <br>//              01-Aug-94 alexgo    author <br>// <br>//  Notes:      The constructor will increment the nest count of the <br>//              object while the destructor will decrement it. <br>// <br>//-------------------------------------------------------------------------- <br> <br>class CStabilize <br>{ <br>public: <br>        inline CStabilize( CSafeRefCount *pObjSafeRefCount ); <br>        inline ~CStabilize(); <br> <br>private: <br>        CSafeRefCount * m_pObjSafeRefCount; <br>}; <br> <br>inline CStabilize::CStabilize( CSafeRefCount *pObjSafeRefCount ) <br>{ <br>        pObjSafeRefCount-&gt;IncrementNestCount(); <br>        m_pObjSafeRefCount = pObjSafeRefCount; <br>} <br> <br>inline CStabilize::~CStabilize() <br>{ <br>        m_pObjSafeRefCount-&gt;DecrementNestCount(); <br>} <br> <br>#endif  // __STABLIZE__ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

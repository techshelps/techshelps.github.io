<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATUS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context308"></a>STATUS.C</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2.0 Sample Code <br>** <br>**    status.c <br>** <br>**    This file contains the window handlers, and various initialization <br>**    and utility functions for an application status bar. <br>** <br>**    (c) Copyright Microsoft Corp. 1992 - 1996 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>// Application specific include files <br>#include "outline.h" <br>#include "message.h" <br>#include "status.h" <br> <br>// Current status message. <br>static char lpszStatusMessage[256]; <br> <br>// Window proc for status window. <br>LRESULT FAR PASCAL StatusWndProc <br>   (HWND hwnd, unsigned message, WPARAM wParam, LPARAM lParam); <br> <br>// List of all constant messages. <br>static STATMESG ControlList[2] = <br>{ <br>   {   STATUS_READY,   "Ready."    }, <br>   {   STATUS_BLANK,   " "         } <br>}; <br> <br>// List of all system menu messages. <br>static STATMESG SysMenuList[16] = <br>{ <br>   {   SC_SIZE,        "Change the size of the window."            }, <br>   {   SC_MOVE,        "Move the window."                          }, <br>   {   SC_MINIMIZE,    "Make the window iconic."                   }, <br>   {   SC_MAXIMIZE,    "Make the window the size of the screen."   }, <br>   {   SC_NEXTWINDOW,  "Activate the next window."                 }, <br>   {   SC_PREVWINDOW,  "Activate the previous window."             }, <br>   {   SC_CLOSE,       "Close this window."                        }, <br>   {   SC_VSCROLL,     "Vertical scroll?"                          }, <br>   {   SC_HSCROLL,     "Horizontal scroll?"                        }, <br>   {   SC_MOUSEMENU,   "A menu for mice."                          }, <br>   {   SC_KEYMENU,     "A menu for keys (I guess)."                }, <br>   {   SC_ARRANGE,     "Arrange something."                        }, <br>   {   SC_RESTORE,     "Make the window noramally sized."          }, <br>   {   SC_TASKLIST,    "Put up the task list dialog."              }, <br>   {   SC_SCREENSAVE,  "Save the screen!  Run for your life!"      }, <br>   {   SC_HOTKEY,      "Boy, is this key hot!"                     } <br>}; <br> <br>// Message type for popup messages. <br>typedef struct { <br>   HMENU hmenu; <br>   char string[MAX_MESSAGE]; <br>} STATPOPUP; <br> <br>// List of all popup messages. <br>static STATPOPUP PopupList[NUM_POPUP]; <br> <br>static UINT nCurrentPopup = 0; <br> <br> <br> <br>/* RegisterStatusClass <br> * ------------------- <br> * <br> * Creates classes for status window. <br> * <br> * HINSTANCE hInstance <br> * <br> * RETURNS: TRUE if class successfully registered. <br> *          FALSE otherwise. <br> * <br> * CUSTOMIZATION: Change class name. <br> * <br> */ <br>BOOL RegisterStatusClass(HINSTANCE hInstance) <br>{ <br>   WNDCLASS  wc; <br> <br>   wc.lpszClassName = "ObjStatus"; <br>   wc.lpfnWndProc   = StatusWndProc; <br>   wc.style         = 0; <br>   wc.hInstance     = hInstance; <br>   wc.hIcon         = NULL; <br>   wc.cbClsExtra    = 4; <br>   wc.cbWndExtra    = 0; <br>   wc.lpszMenuName  = NULL; <br>   wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>   wc.hbrBackground = GetStockObject(LTGRAY_BRUSH); <br> <br>   if (!RegisterClass(&amp;wc)) <br>      return FALSE; <br> <br>   return TRUE; <br>} <br> <br> <br>/* CreateStatusWindow <br> * ------------------ <br> * <br> * Creates status window. <br> * <br> * HWND hwndMain <br> * <br> * RETURNS: HWND of status window if creation is successful. <br> *          NULL otherwise. <br> * <br> * CUSTOMIZATION: Change class name. <br> * <br> */ <br>HWND CreateStatusWindow(HWND hWndApp, HINSTANCE hInst) <br>{ <br>   RECT rect; <br>   int width, height; <br>   HWND hWndStatusBar; <br> <br>   lstrcpy (lpszStatusMessage, ControlList[0].string); <br>   GetClientRect(hWndApp, &amp;rect); <br>   width = rect.right - rect.left; <br>   height = rect.bottom - rect.top; <br> <br>   hWndStatusBar = CreateWindow ( <br>      "ObjStatus", <br>      "SvrStatus", <br>      WS_CHILD | <br>      WS_CLIPSIBLINGS | <br>      WS_VISIBLE, <br>      0, height - STATUS_HEIGHT, <br>      width, <br>      STATUS_HEIGHT, <br>      hWndApp, <br>      NULL, <br>      hInst, <br>      NULL <br>   ); <br> <br>   return hWndStatusBar; <br>} <br> <br> <br>/* DestroyStatusWindow <br> * ------------------- <br> * <br> * Destroys status window. <br> * <br> * CUSTOMIZATION: None. <br> * <br> */ <br>void DestroyStatusWindow(HWND hWndStatusBar) <br>{ <br>   DestroyWindow(hWndStatusBar); <br>} <br> <br> <br>/* AssignPopupMessage <br> * ------------------ <br> * <br> * Associates a string with a popup menu handle. <br> * <br> * HMENU hmenuPopup <br> * char *szMessage <br> * <br> * CUSTOMIZATION: None. <br> * <br> */ <br>void AssignPopupMessage(HMENU hmenuPopup, char *szMessage) <br>{ <br>   if (nCurrentPopup &lt; NUM_POPUP) { <br>      PopupList[nCurrentPopup].hmenu = hmenuPopup; <br>      lstrcpy(PopupList[nCurrentPopup].string, szMessage); <br>      ++nCurrentPopup; <br>   } <br>} <br> <br> <br>/* SetStatusText <br> * ------------- <br> * <br> * Show the message in the status line. <br> */ <br>void SetStatusText(HWND hWndStatusBar, LPSTR lpszMessage) <br>{ <br>   lstrcpy (lpszStatusMessage, lpszMessage); <br>   InvalidateRect (hWndStatusBar, (LPRECT)NULL,  TRUE); <br>   UpdateWindow (hWndStatusBar); <br>} <br> <br> <br>/* GetItemMessage <br> * -------------- <br> * <br> * Retrieve the message associated with the given menu command item number. <br> * <br> * UINT wIDItem <br> * LPVOID lpDoc <br> * <br> * CUSTOMIZATION: None. <br> * <br> */ <br>void GetItemMessage(UINT wIDItem, LPSTR FAR* lplpszMessage) <br>{ <br>   UINT i; <br> <br>   *lplpszMessage = ControlList[1].string; <br>   for (i = 0; i &lt; NUM_STATS; ++i) { <br>      if (wIDItem == MesgList[i].wIDItem) { <br>         *lplpszMessage = MesgList[i].string; <br>         break; <br>      } <br>   } <br>} <br> <br> <br>/* GetPopupMessage <br> * --------------- <br> * <br> * Retrieve the message associated with the given popup menu. <br> * <br> * HMENU hmenuPopup <br> * LPVOID lpDoc <br> * <br> * CUSTOMIZATION: None. <br> * <br> */ <br>void GetPopupMessage(HMENU hmenuPopup, LPSTR FAR* lplpszMessage) <br>{ <br>   UINT i; <br> <br>   *lplpszMessage = ControlList[1].string; <br>   for (i = 0; i &lt; nCurrentPopup; ++i) { <br>      if (hmenuPopup == PopupList[i].hmenu) { <br>         *lplpszMessage = PopupList[i].string; <br>         break; <br>      } <br>   } <br>} <br> <br> <br>/* GetSysMenuMessage <br> * ----------------- <br> * <br> * Retrieves the messages to correspond to items on the system menu. <br> * <br> * <br> * UINT wIDItem <br> * LPVOID lpDoc <br> * <br> * CUSTOMIZATION: None. <br> * <br> */ <br>void GetSysMenuMessage(UINT wIDItem, LPSTR FAR* lplpszMessage) <br>{ <br>   UINT i; <br> <br>   *lplpszMessage = ControlList[1].string; <br>   for (i = 0; i &lt; 16; ++i) { <br>      if (wIDItem == SysMenuList[i].wIDItem) { <br>         *lplpszMessage = SysMenuList[i].string; <br>         break; <br>      } <br>   } <br>} <br> <br> <br>/* GetControlMessage <br> * ----------------- <br> * <br> * Retrieves the general system messages. <br> * <br> * <br> * STATCONTROL scCommand <br> * LPVOID lpDoc <br> * <br> * CUSTOMIZATION: Add new messages. <br> * <br> */ <br>void GetControlMessage(STATCONTROL scCommand, LPSTR FAR* lplpszMessage) <br>{ <br>   UINT i; <br> <br>   *lplpszMessage = ControlList[1].string; <br>   for (i = 0; i &lt; 2; ++i) { <br>      if ((UINT)scCommand == ControlList[i].wIDItem) { <br>         *lplpszMessage = ControlList[i].string; <br>         break; <br>      } <br>   } <br>} <br> <br> <br> <br>/* StatusWndProc <br> * ------------- <br> * <br> * Message handler for the statusbar window. <br> * <br> * <br> * CUSTOMIZATION: None <br> * <br> */ <br>LRESULT FAR PASCAL StatusWndProc <br>   (HWND hwnd, unsigned message, WPARAM wParam, LPARAM lParam) <br>{ <br>   if (message == WM_PAINT) { <br>      RECT        rc; <br>      HDC         hdc; <br>      PAINTSTRUCT paintstruct; <br>      HPEN        hpenOld; <br>      HPEN        hpen; <br>      HFONT       hfontOld; <br>      HFONT       hfont; <br>      HPALETTE    hpalOld = NULL; <br>      POINT       point; <br> <br>      BeginPaint (hwnd, &amp;paintstruct); <br>      hdc = GetDC (hwnd); <br> <br>      GetClientRect (hwnd, (LPRECT) &amp;rc); <br> <br>      hpenOld = SelectObject (hdc, GetStockObject (BLACK_PEN)); <br> <br>      MoveToEx (hdc, 0, 0, &amp;point); <br>      LineTo (hdc, rc.right, 0); <br> <br>      SelectObject (hdc, GetStockObject (WHITE_PEN)); <br> <br>      MoveToEx (hdc, STATUS_RRIGHT, STATUS_RTOP, &amp;point); <br>      LineTo (hdc, STATUS_RRIGHT, STATUS_RBOTTOM); <br>      LineTo (hdc, STATUS_RLEFT-1, STATUS_RBOTTOM); <br> <br>      hpen = CreatePen (PS_SOLID, 1, /* DKGRAY */ 0x00808080); <br>      SelectObject (hdc, hpen); <br> <br>      MoveToEx (hdc, STATUS_RLEFT, STATUS_RBOTTOM-1, &amp;point); <br>      LineTo (hdc, STATUS_RLEFT, STATUS_RTOP); <br>      LineTo (hdc, STATUS_RRIGHT, STATUS_RTOP); <br> <br>      SetBkMode (hdc, TRANSPARENT); <br>      SetTextAlign (hdc, TA_LEFT | TA_TOP); <br>      hfont = CreateFont (STATUS_THEIGHT, 0, 0, 0, FW_NORMAL, FALSE, FALSE, <br>                     FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, <br>                     CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, <br>                     DEFAULT_PITCH | FF_DONTCARE, "MS Sans Serif"); <br> <br>      hfontOld = SelectObject(hdc, hfont); <br> <br>      TextOut (hdc, STATUS_TLEFT, STATUS_TTOP, <br>             lpszStatusMessage, <br>             lstrlen(lpszStatusMessage)); <br> <br>      // Restore original objects <br>      SelectObject (hdc, hfontOld); <br>      SelectObject (hdc, hpenOld); <br>      DeleteObject (hpen); <br>      DeleteObject (hfont); <br> <br>      ReleaseDC (hwnd, hdc); <br>      EndPaint (hwnd, &amp;paintstruct); <br> <br>      return 0; <br>   } <br>   else { <br>      return DefWindowProc(hwnd, message, wParam, lParam); <br>   } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLASSFAC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context271"></a>CLASSFAC.C</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2 Sample Code <br>** <br>**    classfac.c <br>** <br>**    This file contains the implementation for IClassFactory for both the <br>**    server and the client version of the OUTLINE app. <br>** <br>**    (c) Copyright Microsoft Corp. 1992 - 1997 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>#include "outline.h" <br> <br>OLEDBGDATA <br> <br>extern LPOUTLINEAPP             g_lpApp; <br> <br> <br>/* NOTE: this object illustrates the manner in which to statically <br>**    (compile-time) initialize an interface VTBL. <br>*/ <br>static IClassFactoryVtbl g_AppClassFactoryVtbl = { <br>        AppClassFactory_QueryInterface, <br>        AppClassFactory_AddRef, <br>        AppClassFactory_Release, <br>        AppClassFactory_CreateInstance, <br>        AppClassFactory_LockServer <br>}; <br> <br> <br>/* AppClassFactory_Create <br>** ---------------------- <br>**    create an instance of APPCLASSFACTORY. <br>**    NOTE: type of pointer returned is an IClassFactory* interface ptr. <br>**          the returned pointer can be directly passed to <br>**          CoRegisterClassObject and released later by calling the <br>**          Release method of the interface. <br>*/ <br>LPCLASSFACTORY WINAPI AppClassFactory_Create(void) <br>{ <br>        LPAPPCLASSFACTORY lpAppClassFactory; <br>        LPMALLOC lpMalloc; <br> <br>        if (CoGetMalloc(MEMCTX_TASK, (LPMALLOC FAR*)&amp;lpMalloc) != NOERROR) <br>                return NULL; <br> <br>        lpAppClassFactory = (LPAPPCLASSFACTORY)lpMalloc-&gt;lpVtbl-&gt;Alloc( <br>                        lpMalloc, (sizeof(APPCLASSFACTORY))); <br>        lpMalloc-&gt;lpVtbl-&gt;Release(lpMalloc); <br>        if (! lpAppClassFactory) return NULL; <br> <br>        lpAppClassFactory-&gt;m_lpVtbl = &amp;g_AppClassFactoryVtbl; <br>        lpAppClassFactory-&gt;m_cRef   = 1; <br>#if defined( _DEBUG ) <br>        lpAppClassFactory-&gt;m_cSvrLock = 0; <br>#endif <br>        return (LPCLASSFACTORY)lpAppClassFactory; <br>} <br> <br> <br>/************************************************************************* <br>** OleApp::IClassFactory interface implementation <br>*************************************************************************/ <br> <br>STDMETHODIMP AppClassFactory_QueryInterface( <br>                LPCLASSFACTORY lpThis, REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        LPAPPCLASSFACTORY lpAppClassFactory = (LPAPPCLASSFACTORY)lpThis; <br>        SCODE scode; <br> <br>        // Two interfaces supported: IUnknown, IClassFactory <br> <br>        if (IsEqualIID(riid, &amp;IID_IClassFactory) || <br>                        IsEqualIID(riid, &amp;IID_IUnknown)) { <br>                lpAppClassFactory-&gt;m_cRef++;   // A pointer to this object is returned <br>                *ppvObj = lpThis; <br>                scode = S_OK; <br>        } <br>        else {                 // unsupported interface <br>                *ppvObj = NULL; <br>                scode = E_NOINTERFACE; <br>        } <br> <br>        return scode; <br>} <br> <br> <br>STDMETHODIMP_(ULONG) AppClassFactory_AddRef(LPCLASSFACTORY lpThis) <br>{ <br>        LPAPPCLASSFACTORY lpAppClassFactory = (LPAPPCLASSFACTORY)lpThis; <br>        return ++lpAppClassFactory-&gt;m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) AppClassFactory_Release(LPCLASSFACTORY lpThis) <br>{ <br>        LPAPPCLASSFACTORY lpAppClassFactory = (LPAPPCLASSFACTORY)lpThis; <br>        LPMALLOC lpMalloc; <br> <br>        if (--lpAppClassFactory-&gt;m_cRef != 0) // Still used by others <br>                return lpAppClassFactory-&gt;m_cRef; <br> <br>        // Free storage <br>        if (CoGetMalloc(MEMCTX_TASK, (LPMALLOC FAR*)&amp;lpMalloc) != NOERROR) <br>                return 0; <br> <br>        lpMalloc-&gt;lpVtbl-&gt;Free(lpMalloc, lpAppClassFactory); <br>        lpMalloc-&gt;lpVtbl-&gt;Release(lpMalloc); <br>        return 0; <br>} <br> <br> <br>STDMETHODIMP AppClassFactory_CreateInstance ( <br>                LPCLASSFACTORY      lpThis, <br>                LPUNKNOWN           lpUnkOuter, <br>                REFIID              riid, <br>                LPVOID FAR*         lplpvObj <br>) <br>{ <br>        LPOUTLINEAPP    lpOutlineApp = (LPOUTLINEAPP)g_lpApp; <br>        LPOLEDOC        lpOleDoc; <br>        HRESULT         hrErr; <br> <br>        OLEDBG_BEGIN2("AppClassFactory_CreateInstance\r\n") <br> <br>        /* NOTE: we must make sure to set all out parameters to NULL. */ <br>        *lplpvObj = NULL; <br> <br>        /********************************************************************* <br>        ** NOTE: this is an SDI app; it can only create and support one <br>        **    instance. After the instance is created, the OLE libraries <br>        **    should not call CreateInstance again. it is a good practise <br>        **    to specifically guard against this. <br>        *********************************************************************/ <br> <br>        if (lpOutlineApp-&gt;m_lpDoc != NULL) <br>                return E_UNEXPECTED; <br> <br>        /* NOTE: create a new document instance. by the time we return <br>        **    from this method the document's refcnt must be 1. <br>        */ <br>        lpOutlineApp-&gt;m_lpDoc = OutlineApp_CreateDoc(lpOutlineApp, FALSE); <br>        lpOleDoc = (LPOLEDOC)lpOutlineApp-&gt;m_lpDoc; <br>        if (! lpOleDoc) { <br>                OLEDBG_END2 <br>                return E_OUTOFMEMORY; <br>        } <br> <br>        /* NOTE: retrieve pointer to requested interface. the ref cnt <br>        **    of the object after OutlineApp_CreateDoc is 0. this call to <br>        **    QueryInterface will increment the refcnt to 1. the object <br>        **    returned from IClassFactory::CreateInstance should have a <br>        **    refcnt of 1 and be controlled by the caller. If the caller <br>        **    releases the document, the document should be destroyed. <br>        */ <br>        hrErr = OleDoc_QueryInterface(lpOleDoc, riid, lplpvObj); <br> <br>        OLEDBG_END2 <br>        return hrErr; <br>} <br> <br> <br>STDMETHODIMP AppClassFactory_LockServer ( <br>                LPCLASSFACTORY      lpThis, <br>                BOOL                fLock <br>) <br>{ <br>        LPAPPCLASSFACTORY lpAppClassFactory = (LPAPPCLASSFACTORY)lpThis; <br>        LPOLEAPP lpOleApp = (LPOLEAPP)g_lpApp; <br>        HRESULT hrErr; <br>        OLEDBG_BEGIN2("AppClassFactory_LockServer\r\n") <br> <br>#if defined( _DEBUG ) <br>        if (fLock) { <br>                ++lpAppClassFactory-&gt;m_cSvrLock; <br>                OleDbgOutRefCnt3( <br>                                "AppClassFactory_LockServer: cLock++\r\n", <br>                                lpAppClassFactory, lpAppClassFactory-&gt;m_cSvrLock); <br>        } else { <br> <br>                /* NOTE: when there are no open documents and the app is not <br>                **    under the control of the user and there are no outstanding <br>                **    locks on the app, then revoke our ClassFactory to enable the <br>                **    app to shut down. <br>                */ <br>                --lpAppClassFactory-&gt;m_cSvrLock; <br>                OleDbgAssertSz (lpAppClassFactory-&gt;m_cSvrLock &gt;= 0, <br>                                "AppClassFactory_LockServer(FALSE) called with cLock == 0" <br>                ); <br> <br>                if (lpAppClassFactory-&gt;m_cSvrLock == 0) { <br>                        OleDbgOutRefCnt2( <br>                                        "AppClassFactory_LockServer: UNLOCKED\r\n", <br>                                        lpAppClassFactory, lpAppClassFactory-&gt;m_cSvrLock); <br>                } else { <br>                        OleDbgOutRefCnt3( <br>                                        "AppClassFactory_LockServer: cLock--\r\n", <br>                                        lpAppClassFactory, lpAppClassFactory-&gt;m_cSvrLock); <br>                } <br>        } <br>#endif  // _DEBUG <br>        /* NOTE: in order to hold the application alive we call <br>        **    CoLockObjectExternal to add a strong reference to our app <br>        **    object. this will keep the app alive when all other external <br>        **    references release us. if the user issues File.Exit the <br>        **    application will shut down in any case ignoring any <br>        **    outstanding LockServer locks because CoDisconnectObject is <br>        **    called in OleApp_CloseAllDocsAndExitCommand. this will <br>        **    forceably break any existing strong reference counts <br>        **    including counts that we add ourselves by calling <br>        **    CoLockObjectExternal and guarantee that the App object gets <br>        **    its final release (ie. cRefs goes to 0). <br>        */ <br>        hrErr = OleApp_Lock(lpOleApp, fLock, TRUE /* fLastUnlockReleases */); <br> <br>        OLEDBG_END2 <br>        return hrErr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

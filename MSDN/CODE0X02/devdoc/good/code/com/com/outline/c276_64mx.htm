<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context279"></a>DEBUG.C</h2>
<pre><code>/************************************************************************* <br>** <br>**    OLE 2 Sample Code <br>** <br>**    debug.c <br>** <br>**    This file contains some functions for debugging support <br>** <br>**    (c) Copyright Microsoft Corp. 1992 - 1996 All Rights Reserved <br>** <br>*************************************************************************/ <br> <br>#include "outline.h" <br> <br>OLEDBGDATA <br> <br>extern LPOUTLINEAPP g_lpApp; <br> <br>void SetDebugLevelCommand(void) <br>{ <br>   char szBuf[80]; <br>   HWND hWndFrame = OutlineApp_GetFrameWindow(g_lpApp); <br> <br>   wsprintf(szBuf, "%d", OleDbgGetDbgLevel()); <br> <br>   if (InputTextDlg(hWndFrame, szBuf, "Debug Level [0-4]")) { <br>      switch (szBuf[0]) { <br>         case '0': <br>            OleDbgSetDbgLevel(0); <br>            break; <br>         case '1': <br>            OleDbgSetDbgLevel(1); <br>            break; <br>         case '2': <br>            OleDbgSetDbgLevel(2); <br>            break; <br>         case '3': <br>            OleDbgSetDbgLevel(3); <br>            break; <br>         case '4': <br>            OleDbgSetDbgLevel(4); <br>            break; <br>         default: <br>            OutlineApp_ErrorMessage(g_lpApp, OLESTR("Valid Debug Level Range: 0-4")); <br>            break; <br>      } <br>   } <br>} <br> <br> <br>#if defined( OLE_VERSION ) <br> <br>/* InstallMessageFilterCommand <br> * --------------------------- <br> * <br> * Handles the "Install Message Filter" menu item.  If a message filter is <br> * already installed, this function de-installs it.  If there is not one <br> * already installed, this function installs one. <br> * <br> */ <br> <br>void InstallMessageFilterCommand(void) <br>{ <br>   LPOLEAPP lpOleApp = (LPOLEAPP)g_lpApp; <br> <br>   /* <br>   ** Check to see if we've already installed a MessageFilter. <br>   ** If so, uninstall it. <br>   */ <br>   if (lpOleApp-&gt;m_lpMsgFilter != NULL) <br>      OleApp_RevokeMessageFilter(lpOleApp); <br>   else <br>      OleApp_RegisterMessageFilter(lpOleApp); <br>} <br> <br> <br>/* RejectIncomingCommand <br> * --------------------- <br> * <br> * Toggles between rejecting and not-handling in coming LRPC calls <br> * <br> */ <br> <br>void RejectIncomingCommand(void) <br>{ <br>   DWORD dwOldStatus; <br>   DWORD dwNewStatus; <br>   LPOLEAPP lpOleApp = (LPOLEAPP)g_lpApp; <br> <br>   dwOldStatus = OleStdMsgFilter_GetInComingCallStatus(lpOleApp-&gt;m_lpMsgFilter); <br> <br>   if (dwOldStatus == SERVERCALL_RETRYLATER) <br>      dwNewStatus = SERVERCALL_ISHANDLED; <br>   else <br>      dwNewStatus = SERVERCALL_RETRYLATER; <br> <br>   OleStdMsgFilter_SetInComingCallStatus(lpOleApp-&gt;m_lpMsgFilter, dwNewStatus); <br>} <br> <br>#endif  // OLE_VERSION </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context270"></a>README.TXT</h2>
<pre><code>OLE 2.0 Outline Sample Code <br> <br> <br>SUMMARY <br>======= <br> <br>The OUTLINE sample application set demonstrates taking a 'base' application <br>(in this case OUTLINE.EXE) and extending it into an OLE 2 server and <br>container (SVROUTL and CNTROUTL respectively) and into an OLE 2 in-place <br>(aka visual editing) container and server (ICNTROTL and ISVROTL). <br> <br>These applications attempt to implement the complete OLE 2 functionality <br>and recommended user model. For example, these applications implement all <br>of the OLE 2 User Interface dialog boxes. As such, this is not a trivial <br>sample application set. <br> <br>All OUTLINE sample applications support loading and saving files; they all  <br>use docfiles for storage. <br> <br> <br>MORE INFORMATION <br>================ <br> <br>The OUTLINE sample uses the following directory structure: <br> <br>                        OUTLINE <br>                           | <br>       +---------+---------+--------+--------+ <br>       |         |         |        |        | <br>    OUTLINE   SVROUTL   CNTROUTL ISVROTL  ICNTROTL <br> <br>All five variations of the OUTLINE applications are built from common <br>sources. All of the common source code (*.C and *.H files) is in the <br>OUTLINE directory. Each variant of the application builds under its own <br>subdirectory for this release. <br> <br>Files that begin with OUTL comprise the base version of the application.  <br>They are also used by OLE versions of the applicaton. Files that begin with  <br>CNTR are specific to the container version and files that begin with SVR are  <br>specific to the server version. Files that begin with OLE are common to both  <br>the container and server versions. This series of sample applications  <br>highlights the changes necessary to implement OLE into an existing  <br>application. The container version has the same functionality as the base  <br>(OUTLINE) and also allows you to embed objects. <br> <br>Some of the major OLE features are organized into special <br>files in order to group related code across the application variants: <br> <br>File         Description <br> <br>DRAGDROP.C   Drag/Drop implementation. <br>CLIPBRD.C    OLE 2 style copy/paste implementation (data transfer). <br>LINKING.C    Linking and Moniker support implementation. <br>CNTRINPL.C   In-place container implementation. <br>SVRINPL.C    In-place server implementation. <br>CLASSFAC.C   IClassFactory implementation. <br> <br>Conditional compilation is used to control what code is used with which <br>version. The following defines are used to control the compilation: <br> <br>Define       Description <br> <br>OLE_VERSION  Code common to all OLE versions. <br>OLE_SERVER   Code used by both SVROUTL and ISVROTL. <br>OLE_CNTR     Code used by both CNTROUTL and ICNTROTL. <br>INPLACE_CNTR Code used by ICNTROTL only. <br> <br>The following defines are used to identify code specific for a particular <br>feature. NOTE: It is not really intended that these symbols should be <br>turned off. <br> <br>Define          Description <br> <br>USE_DRAGDROP    Drag/drop code. <br>USE_FRAMETOOLS  Formula bar and tool bar. <br>USE_HEADING     Row/column headings code. <br>USE_STATUSBAR   Status bar code. <br>USE_CTL3D       Use CTL3D.DLL to have 3D effect for dialogs. <br>USE_MSGFILTER   IMessageFilter code. <br>_DEBUG          Debug code. <br> <br>HOW TO BUILD <br>------------ <br> <br>To build, simply run "nmake" from the root of the outline directory. <br> <br>You must first have built SDKUTIL.LIB, OLESTD.LIB, BTTNCUR.LIB, <br>BTTNCUR.DLL, GIZMOBAR.LIB and GIZMOBAR.DLL. To build these files, run <br>"nmake" in each of the COMMON, BTTNCUR, GIZMOBAR and OLESTD directories <br>under the OLE sample directory (in that order). <br> <br>All the outline samples are copied into the OLE\BIN subdirectory after <br>compilation. <br> <br>You will want to load the OUTLINE.REG file into the system registry before <br>attempting to embed any of the outline objects. </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEST.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context158"></a>TEST.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       test.cxx <br>// <br>//  Contents:   test application for CMALSPY sample library <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include "cmallspy.hxx" <br> <br>extern "C" void printf(CHAR*, ...); <br> <br>const UINT NALLOCATIONS = 573; <br> <br> <br>int __cdecl main(int argc, char **argv) <br>{ <br>    HRESULT     hr; <br>    LPMALLOCSPY pMallocSpy = new CMallocSpy(); <br> <br>    // Initialize <br>    CoInitialize(NULL); <br>    hr = CoRegisterMallocSpy(pMallocSpy); <br>    if (hr != S_OK) <br>    { <br>        printf("CoRegisterMallocSpy failed with %x\n", hr); <br>        CoUninitialize(); <br>        return 0; <br>    } <br>    printf("CoRegisterMallocSpy succeeded.\n"); <br> <br>    // Allocate enoungh to force an expansion <br>    LPMALLOC pMalloc; <br>    void    *allocs[NALLOCATIONS]; <br>    ULONG j; <br> <br>    if ((hr = CoGetMalloc(MEMCTX_TASK, &amp;pMalloc)) != S_OK) <br>    { <br>        printf("CoGetMalloc failed with %x\n", hr); <br>        CoUninitialize(); <br>        return 0; <br>    } <br>    printf("CoGetMalloc succeeded.\n"); <br>    printf("Allocating %u memory blocks.\n", NALLOCATIONS); <br>    for (j = 0; j &lt; NALLOCATIONS; j++) <br>    { <br>        allocs[j] = pMalloc-&gt;Alloc(173); <br>    } <br> <br>    // Now release everything <br>    printf("Releasing %u memory blocks.\n", NALLOCATIONS); <br>    for (j = 0; j &lt; NALLOCATIONS; j++) <br>    { <br>        pMalloc-&gt;Free(allocs[j]); <br>        allocs[j] = NULL; <br>    } <br> <br>    printf("Test complete.\n"); <br>    // All done <br>    CoRevokeMallocSpy(); <br>    CoUninitialize(); <br>    return 0; <br>} <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

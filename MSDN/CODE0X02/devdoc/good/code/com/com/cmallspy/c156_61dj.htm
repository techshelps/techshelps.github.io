<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMALLSPY.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context157"></a>CMALLSPY.CXX</h2>
<pre><code>//+--------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1994 - 1998 Microsoft Corporation. <br>// <br>//  File:       cmallspy.cxx <br>// <br>//  Contents:   Sample implementation of IMallocSpy.  The implementation here <br>//              is pretty simple.  It assumes that all we want to do is keep <br>//              a header on the front of all allocations so we can note <br>//              interesting information. <br>// <br>//  Classes:    CMallocSpy <br>// <br>//---------------------------------------------------------------------- <br> <br> <br>#include &lt;ole2.h&gt; <br>#include "cmallspy.hxx" <br> <br> <br> <br>const ULONG HEADERSIZE = 128; <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::CMallocSpy <br>// <br>//  Synopsis:   Constructor <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>CMallocSpy::CMallocSpy(void) <br>{ <br>    m_cRef = 0; <br>} <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::~CMallocSpy <br>// <br>//  Synopsis:   Destructor <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>CMallocSpy::~CMallocSpy(void) <br>{ <br>    // Nothing to do here <br>} <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::QueryInterface <br>// <br>//  Synopsis:   Only IUnknown and IMallocSpy are meaningful <br>// <br>//  Arguments:  [riid] -- <br>//              [ppUnk] -- <br>// <br>//  Returns:    S_OK or E_NOINTERFACE <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>HRESULT CMallocSpy::QueryInterface(REFIID riid, LPVOID *ppUnk) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if (IsEqualIID(riid, IID_IUnknown)) <br>    { <br>        *ppUnk = (IUnknown *) this; <br>    } <br>    else if (IsEqualIID(riid, IID_IMallocSpy)) <br>    { <br>        *ppUnk =  (IMalloc *) this; <br>    } <br>    else <br>    { <br>        *ppUnk = NULL; <br>        hr =  E_NOINTERFACE; <br>    } <br>    AddRef(); <br>    return hr; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::AddRef <br>// <br>//  Synopsis:   Add a reference <br>// <br>//  Returns:    New reference count <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>ULONG CMallocSpy::AddRef(void) <br>{ <br>    return ++m_cRef; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::Release <br>// <br>//  Synopsis:   Remove a reference <br>// <br>//  Returns:    The new reference count <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>ULONG CMallocSpy::Release(void) <br>{ <br>    ULONG cRef; <br> <br>    cRef = --m_cRef; <br>    if (cRef == 0) <br>    { <br>        delete this; <br>    } <br>    return cRef; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreAlloc <br>// <br>//  Synopsis:   Called prior to OLE calling IMalloc::Alloc <br>// <br>//  Arguments:  [cbRequest] -- The number of bytes the caller of <br>//                             is requesting IMalloc::Alloc <br>// <br>//  Returns:    The count of bytes to actuallay allocate <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>ULONG CMallocSpy::PreAlloc(ULONG cbRequest) <br>{ <br>    m_cbRequest = cbRequest; <br>    return cbRequest + HEADERSIZE; <br>} <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PostAlloc <br>// <br>//  Synopsis:   Called after OLE calls IMalloc::Alloc <br>// <br>//  Arguments:  [pActual] -- The allocation returned by IMalloc::Alloc <br>// <br>//  Returns:    The allocation pointer to return to the caller of <br>//              IMalloc::Alloc <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void *CMallocSpy::PostAlloc(void *pActual) <br>{ <br>    // Store interesting information in the first HEADERSIZE bytes <br>    // of the allcation <br>    // ... <br> <br>    // Return the allocation plus offset <br>    return (void *) (((BYTE *) pActual) + HEADERSIZE); <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreFree <br>// <br>//  Synopsis:   Called prior to OLE calling IMalloc::Free <br>// <br>//  Arguments:  [pRequest] -- The allocation to be freed <br>//              [fSpyed]   -- Whether it was allocated with a spy active <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void *CMallocSpy::PreFree(void *pRequest, BOOL fSpyed) <br>{ <br>    // Use the stored information <br>    // ... <br> <br>    // Check for NULL <br>    if (pRequest == NULL) <br>    { <br>        return NULL; <br>    } <br> <br>    // Undo the offset <br>    if (fSpyed) <br>    { <br>        return (void *) (((BYTE *) pRequest) - HEADERSIZE); <br>    } <br>    else <br>    { <br>        return pRequest; <br>    } <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PostFree <br>// <br>//  Synopsis:   Called after OLE calls IMalloc::Free <br>// <br>//  Arguments:  [fSpyed]   -- Whether it was allocated with a spy active <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void CMallocSpy::PostFree(BOOL fSpyed) <br>{ <br>    // Note the free or whatever <br> <br>    return; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreRealloc <br>// <br>//  Synopsis:   Called prior to OLE calling IMalloc::Realloc <br>// <br>//  Arguments:  [pRequest]     -- The buffer to be reallocated <br>//              [cbRequest]    -- The requested new size of the buffer <br>//              [ppNewRequest] -- Where to store the new buffer pointer <br>//                                to be reallocated <br>//              [fSpyed]       -- Whether it was allocated with a spy active <br>// <br>//  Returns:    The new size to actually be allocated <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>ULONG CMallocSpy::PreRealloc(void *pRequest, ULONG cbRequest, <br>                             void **ppNewRequest, BOOL fSpyed) <br>{ <br>    // Typically we don't need to extend/distend the header <br>    if (fSpyed) <br>    { <br>        *ppNewRequest = (void *) (((BYTE *) pRequest) - HEADERSIZE); <br>        return cbRequest + HEADERSIZE; <br>    } <br>    else <br>    { <br>        *ppNewRequest = pRequest; <br>        return cbRequest; <br>    } <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PostRealloc <br>// <br>//  Synopsis:   Called after OLE calls IMalloc::Realloc <br>// <br>//  Arguments:  [pActual] -- Pointer to the reallocated buffer <br>//              [fSpyed]  -- Whether it was allocated with a spy active <br>// <br>//  Returns:    The buffer pointer to return <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void *CMallocSpy::PostRealloc(void *pActual, BOOL fSpyed) <br>{ <br>    // Return the buffer with the header offset <br>    if (fSpyed) <br>    { <br>        return (void *) (((BYTE *) pActual) + HEADERSIZE); <br>    } <br>    else <br>    { <br>        return pActual; <br>    } <br> <br>    // If we extend/distend the header for a reallocation, then we'd <br>    // have to do some more work here <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreGetSize <br>// <br>//  Synopsis:   Called prior to OLE calling IMalloc::GetSize <br>// <br>//  Arguments:  [pRequest] -- The buffer whose size is to be returned <br>//              [fSpyed]   -- Whether it was allocated with a spy active <br>// <br>//  Returns:    The actual buffer with which to call IMalloc::GetSize <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void *CMallocSpy::PreGetSize(void *pRequest, BOOL fSpyed) <br>{ <br>    if (fSpyed) <br>    { <br>        return (void *) (((BYTE *) pRequest) - HEADERSIZE); <br>    }else <br>    { <br>        return pRequest; <br>    } <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PostGetSize <br>// <br>//  Synopsis:   Called after OLE calls IMalloc::GetSize <br>// <br>//  Arguments:  [cbActual] -- The result of IMalloc::GetSize <br>//              [fSpyed]   -- Whether it was allocated with a spy active <br>// <br>//  Returns:    The size to return to the IMalloc::GetSize caller <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>ULONG CMallocSpy::PostGetSize(ULONG cbActual, BOOL fSpyed) <br>{ <br>    if (fSpyed) <br>    { <br>        return cbActual - HEADERSIZE; <br>    } <br>    else <br>    { <br>        return cbActual; <br>    } <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreDidAlloc <br>// <br>//  Synopsis:   Called prior to OLE calling IMalloc::DidAlloc <br>// <br>//  Arguments:  [pRequest] -- The buffer whose allocation is being tested <br>//              [fSpyed]   -- Whether it was allocated with a spy active <br>// <br>//  Returns:    The buffer whose allocation is actually to be tested <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void *CMallocSpy::PreDidAlloc(void *pRequest, BOOL fSpyed) <br>{ <br>    if (fSpyed) <br>    { <br>        return (void *) (((BYTE *) pRequest) - HEADERSIZE); <br>    } <br>    else <br>    { <br>        return pRequest; <br>    } <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Function:   PostDidAlloc <br>// <br>//  Synopsis:   Called after OLE calls the IMalloc::DidAlloc <br>// <br>//  Arguments:  [pRequest] -- The passed allocation <br>//              [fSpyed]   -- Whether it was allocated with a spy active <br>//              [fActual]  -- The result of IMalloc::DidAlloc <br>// <br>//  Returns:    The result of IMalloc::DidAlloc <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>BOOL CMallocSpy::PostDidAlloc(void *pRequest, BOOL fSpyed, BOOL fActual) <br>{ <br>    return fActual; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PreHeapMinimize <br>// <br>//  Synopsis:   Called prior to OLE calling the IMalloc::HeapMinimize <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void CMallocSpy::PreHeapMinimize(void) <br>{ <br>    // We don't do anything here <br>    return; <br>} <br> <br> <br> <br> <br> <br>//+--------------------------------------------------------------------- <br>// <br>//  Member:     CMallocSpy::PostHeapMinimize <br>// <br>//  Synopsis:   Called after OLE calls the IMalloc::HeapMinimize <br>// <br>//  Returns: <br>// <br>//  History:    24-Oct-94   Created. <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------- <br>void CMallocSpy::PostHeapMinimize(void) <br>{ <br>    // We don't do anything here <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

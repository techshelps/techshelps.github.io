<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context169"></a>INIT.C</h2>
<pre><code>/* <br> * INIT.C <br> * GizmoBar Version 1.01 <br> * <br> * LibMain entry point and initialization code for the GizmoBar <br> * DLL that is likely to be used once or very infrequently. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "gizmoint.h" <br> <br> <br>/* <br> * LibMain(32) <br> * <br> * Purpose: <br> *  Entry point conditionally compiled for Windows NT and Windows <br> *  3.1.  Provides the proper structure for each environment. <br> */ <br> <br>#ifdef WIN32 <br> <br>BOOL WINAPI DllMain(HINSTANCE hInstance, ULONG ulReason <br>    , PCONTEXT pContext) <br>    { <br>    UNREFERENCED_PARAMETER(pContext); <br> <br>    if (DLL_PROCESS_ATTACH==ulReason) <br>        return FRegisterControl(hInstance); <br> <br>    return TRUE; <br>    } <br> <br>#else <br> <br>int WINAPI LibMain(HANDLE hInstance, WORD wDataSeg <br>    , WORD cbHeapSize, LPTSTR lpCmdLine) <br>    { <br>     //Perform global initialization. <br>    if (FRegisterControl(hInstance)) <br>        { <br>        if (0!=cbHeapSize) <br>            UnlockData(0); <br>        } <br> <br>    return (int)hInstance; <br>    } <br> <br>#endif <br> <br> <br> <br>/* <br> * FRegisterControl <br> * <br> * Purpose: <br> *  Registers the GizmoBar control class, including CS_GLOBALCLASS <br> *  to make the control available to all applications in the system. <br> * <br> * Parameters: <br> *  hInst           HINSTANCE of the DLL that will own this class. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the class is registered, FALSE otherwise. <br> */ <br> <br>BOOL FRegisterControl(HINSTANCE hInst) <br>    { <br>    static BOOL     fRegistered=FALSE; <br>    WNDCLASS        wc; <br> <br>    if (!fRegistered) <br>        { <br>        wc.lpfnWndProc   =GizmoBarWndProc; <br>        wc.cbClsExtra    =0; <br>        wc.cbWndExtra    =CBWINDOWEXTRA; <br>        wc.hInstance     =hInst; <br>        wc.hIcon         =NULL; <br>        wc.hCursor       =LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground =(HBRUSH)(COLOR_BTNFACE+1); <br>        wc.lpszMenuName  =NULL; <br>        wc.lpszClassName =CLASS_GIZMOBAR; <br>        wc.style         =CS_DBLCLKS | CS_GLOBALCLASS <br>                          | CS_VREDRAW | CS_HREDRAW; <br> <br>        fRegistered=RegisterClass(&amp;wc); <br>        } <br> <br>    return fRegistered; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GizmoBarPAllocate <br> * <br> * Purpose: <br> *  Allocates and initializes the control's primary data structure <br> *  for each window that gets created. <br> * <br> * Parameters: <br> *  pfSuccess       int * indicating success of the function. <br> *  hWnd            HWND that is tied to this structure. <br> *  hInst           HINSTANCE of the DLL. <br> *  hWndAssociate   HWND to which we send messages. <br> *  dwStyle         DWORD initial style. <br> *  uState          UINT initial state. <br> *  uID             UINT identifier for this window. <br> * <br> * Return Value: <br> *  PGIZMOBAR       If NULL returned then GizmoBarPAllocate could not <br> *                  allocate memory.  If a non-NULL pointer is <br> *                  returned with *pfSuccess, then call GizmoBarPFree <br> *                  immediately.  If you get a non-NULL pointer and <br> *                  *pfSuccess==TRUE then the function succeeded. <br> */ <br> <br>PGIZMOBAR GizmoBarPAllocate(int *pfSuccess, HWND hWnd <br>    , HINSTANCE hInst, HWND hWndAssociate, DWORD dwStyle <br>    , UINT uState , UINT uID) <br>    { <br>    PGIZMOBAR     pGB; <br> <br>    if (NULL==pfSuccess) <br>        return NULL; <br> <br>    *pfSuccess=FALSE; <br> <br>    //Allocate the structure <br>    pGB=(PGIZMOBAR)(void *)LocalAlloc(LPTR, CBGIZMOBAR); <br> <br>    if (NULL==pGB) <br>        return NULL; <br> <br>    //Initialize LibMain parameter holders. <br>    pGB-&gt;hWnd         =hWnd; <br>    pGB-&gt;hInst        =hInst; <br>    pGB-&gt;hWndAssociate=hWndAssociate; <br>    pGB-&gt;dwStyle      =dwStyle; <br>    pGB-&gt;uState       =uState; <br>    pGB-&gt;uID          =uID; <br>    pGB-&gt;fEnabled     =TRUE; <br> <br>    pGB-&gt;crFace=GetSysColor(COLOR_BTNFACE); <br>    pGB-&gt;hBrFace=CreateSolidBrush(pGB-&gt;crFace); <br> <br>    if (NULL==pGB-&gt;hBrFace) <br>        return pGB; <br> <br>    pGB-&gt;hFont=GetStockObject(SYSTEM_FONT); <br> <br>    *pfSuccess=TRUE; <br>    return pGB; <br>    } <br> <br> <br> <br> <br>/* <br> * GizmoBarPFree <br> * <br> * Purpose: <br> *  Reverses all initialization done by GizmoBarPAllocate, cleaning <br> *  up any allocations including the application structure itself. <br> * <br> * Parameters: <br> *  pGB             PGIZMOBAR to the control's structure <br> * <br> * Return Value: <br> *  PGIZMOBAR       NULL if successful, pGB if not, meaning we <br> *                  couldn't free some allocation. <br> */ <br> <br>PGIZMOBAR GizmoBarPFree(PGIZMOBAR pGB) <br>    { <br>    if (NULL==pGB) <br>        return NULL; <br> <br>    /* <br>     * Free all the gizmos we own.  When we call GizmoPFree we always <br>     * free the first one in the list which updates pGB-&gt;pGizmos for <br>     * us, so we just have to keep going until pGizmos is NULL, <br>     * meaning we're at the end of the list. <br>     */ <br>    while (NULL!=pGB-&gt;pGizmos) <br>        GizmoPFree(&amp;pGB-&gt;pGizmos, pGB-&gt;pGizmos); <br> <br>    if (NULL!=pGB-&gt;hBrFace) <br>        DeleteObject(pGB-&gt;hBrFace); <br> <br>    /* <br>     * Notice that since we never create a font, we aren't <br>     * responsible for our hFont member. <br>     */ <br> <br>    return (PGIZMOBAR)(void *)LocalFree((HLOCAL)(UINT)(LONG)pGB); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

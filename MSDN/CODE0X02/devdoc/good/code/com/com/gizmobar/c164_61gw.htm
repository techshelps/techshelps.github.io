<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAINT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context170"></a>PAINT.C</h2>
<pre><code>/* <br> * PAINT.C <br> * GizmoBar Version 1.01 <br> * <br> * Contains any code related to GizmoBar visuals, primarily <br> * the WM_PAINT handler. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "gizmoint.h" <br> <br> <br>//In GIZMO.C <br>extern TOOLDISPLAYDATA tdd; <br> <br> <br>/* <br> * GizmoBarPaint <br> * <br> * Purpose: <br> *  Handles all WM_PAINT messages for the control and paints either <br> *  the entire thing or just one GizmoBar button if pGB-&gt;pGizmoPaint <br> *  is non-NULL. <br> * <br> * Parameters: <br> *  hWnd            HWND Handle to the control. <br> *  pGB             PGIZMOBAR control data pointer. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void GizmoBarPaint(HWND hWnd, PGIZMOBAR pGB) <br>    { <br>    PAINTSTRUCT ps; <br>    RECT        rc; <br>    HDC         hDC; <br>    HBRUSH      hBr=NULL; <br>    HPEN        hPen=NULL; <br> <br> <br>    hDC=BeginPaint(hWnd, &amp;ps); <br>    GetClientRect(hWnd, &amp;rc); <br> <br>    /* <br>     * The only part of the frame we need to draw is the bottom line, <br>     * so we inflate the rectangle such that all other parts are <br>     * outside the visible region. <br>     */ <br>    hBr =CreateSolidBrush(GetSysColor(COLOR_BTNFACE)); <br> <br>    if (NULL!=hBr) <br>        SelectObject(hDC, hBr); <br> <br>    hPen=CreatePen(PS_SOLID, 1, GetSysColor(COLOR_WINDOWFRAME)); <br> <br>    if (NULL!=hPen) <br>        SelectObject(hDC, hPen); <br> <br>    Rectangle(hDC, rc.left-1, rc.top-1, rc.right+1, rc.bottom); <br> <br> <br>    /* <br>     * All that we have to do to draw the controls is start through <br>     * the list, ignoring anything but buttons, and calling BTTNCUR's <br>     * UIToolButtonDraw for buttons.  Since we don't even have to <br>     * track positions of things, we can just use an enum. <br>     */ <br>    GizmoPEnum(&amp;pGB-&gt;pGizmos, FEnumPaintGizmos, (DWORD)(LPTSTR)&amp;ps); <br> <br>    //Clean up <br>    EndPaint(hWnd, &amp;ps); <br> <br>    if (NULL!=hBr) <br>        DeleteObject(hBr); <br> <br>    if (NULL!=hPen) <br>        DeleteObject(hPen); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * FEnumPaintGizmos <br> * <br> * Purpose: <br> *  Enumeration callback for all the gizmos we know about in order to <br> *  draw them. <br> * <br> * Parameters: <br> *  pGizmo          PGIZMO to draw. <br> *  iGizmo          UINT index on the GizmoBar of this gizmo. <br> *  dw              DWORD extra data passed to GizmoPEnum, in our <br> *                  case a pointer to the PAINTSTRUCT. <br> * <br> * Return Value: <br> *  BOOL            TRUE to continue the enumeration, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL WINAPI FEnumPaintGizmos(PGIZMO pGizmo, UINT iGizmo, DWORD dw) <br>    { <br>    LPPAINTSTRUCT   pps=(LPPAINTSTRUCT)dw; <br>    RECT            rc, rcI; <br> <br>    //Only draw those marked for repaint. <br>    if ((GIZMOTYPE_DRAWN &amp; pGizmo-&gt;iType)) <br>        { <br>        SetRect(&amp;rc, pGizmo-&gt;x, pGizmo-&gt;y <br>            , pGizmo-&gt;x+pGizmo-&gt;dx, pGizmo-&gt;y+pGizmo-&gt;dy); <br> <br>        //Only draw gizmos in the repaint area <br>        if (IntersectRect(&amp;rcI, &amp;rc, &amp;pps-&gt;rcPaint)) <br>            { <br>            UIToolButtonDrawTDD(pps-&gt;hdc, pGizmo-&gt;x, pGizmo-&gt;y <br>                , pGizmo-&gt;dx, pGizmo-&gt;dy, pGizmo-&gt;hBmp <br>                , pGizmo-&gt;cxImage, pGizmo-&gt;cyImage, pGizmo-&gt;iBmp <br>                , (UINT)pGizmo-&gt;uState, &amp;tdd); <br>            } <br>        } <br> <br>    return TRUE; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MANDELOB.CXX</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context199"></a>MANDELOB.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       mandelob.cxx <br>// <br>//  Contents:   Mandelbrot Fractal engine object <br>// <br>//  Classes:    CMandelbrot <br>// <br>//  Functions: <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;quadcid.h&gt; <br>#include &lt;mandcid.h&gt; <br>#include "mandel.h" <br>#include &lt;stdio.h&gt; <br>#include &lt;strmhelp.h&gt; <br>#include &lt;palsize.h&gt; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::QueryInterface <br>// <br>//  Synopsis:   standard OLE method <br>// <br>//  Arguments:  [riid] - id of desired interface <br>//              [ppv]  - pointer to receive interface <br>// <br>//  Returns:    S_OK on success <br>//              E_NOINTERFACE if the requested interface isn't supported <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::QueryInterface(REFIID riid, LPVOID * ppv) <br>{ <br>    *ppv = NULL; <br>    if (IsEqualGUID(IID_IFractalEngine, riid)) <br>    { <br>        *ppv = (IFractalEngine *)this; <br>    } <br>    else if (IsEqualGUID(IID_IPersist, riid)) <br>    { <br>        *ppv = (IPersist *)this; <br>    } <br>    else if (IsEqualGUID(IID_IPersistStream, riid)) <br>    { <br>        *ppv = (IPersistStream *)this; <br>    } <br>    else if (IsEqualGUID(IID_IUnknown, riid)) <br>    { <br>        *ppv = (IUnknown *)(IFractalEngine *)this; <br>    } <br>    else if (IsEqualGUID(IID_IQuadrantClient, riid)) <br>    { <br>        *ppv = (IQuadrantClient *)this; <br>    } <br>    if (*ppv) <br>    { <br>        ((IUnknown *)*ppv)-&gt;AddRef(); <br>        return(S_OK); <br>    } <br>    return(E_NOINTERFACE); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::AddRef <br>// <br>//  Synopsis:   increments the reference count <br>// <br>//  Returns:    new reference count <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>ULONG STDMETHODCALLTYPE CMandelbrot::AddRef(void) <br>{ <br>    return(++_cRef); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Release <br>// <br>//  Synopsis:   decrements the reference count <br>// <br>//  Returns:    new reference count <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>ULONG STDMETHODCALLTYPE CMandelbrot::Release(void) <br>{ <br>    ULONG cRef = --_cRef; <br>    if (0 == cRef) <br>    { <br>        delete this; <br>        gcRef--; <br>    } <br>    return(cRef); <br>} <br> <br>// IPersist methods <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::GetClassID <br>// <br>//  Synopsis:   returns the object's class ID <br>// <br>//  Arguments:  [pclsid] - pointer to recieve the class ID <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT CMandelbrot::GetClassID(LPCLSID pclsid) <br>{ <br>    memcpy(pclsid, &amp;CLSID_MANDELBROT, sizeof(GUID)); <br>    return(S_OK); <br>} <br> <br>// IPersistStream methods <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::IsDirty <br>// <br>//  Synopsis:   used to determine if the state of the object has changed <br>// <br>//  Returns:    S_OK if it is dirty <br>//              S_FALSE if it is not dirty <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT CMandelbrot::IsDirty(void) <br>{ <br>    if (_fDirty) <br>    { <br>        return(S_OK); <br>    } <br>    else <br>    { <br>        return(S_FALSE); <br>    } <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Load <br>// <br>//  Synopsis:   loads the fractal properties from a stream <br>// <br>//  Arguments:  [pStm] - pointer to an IStream interface <br>// <br>//  Returns:    S_OK on success <br>//              E_FAIL on error <br>//              E_OUTOFMEMORY if there's not enough memory (can't happen here) <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT CMandelbrot::Load(LPSTREAM pStm) <br>{ <br>    HRESULT hr; <br>    if (_fRunning) <br>    { <br>        return(E_FAIL); <br>    } <br>    if (FAILED(hr = ReadDouble(pStm, &amp;_dLeft, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = ReadDouble(pStm, &amp;_dTop, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = ReadDouble(pStm, &amp;_dRight, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = ReadDouble(pStm, &amp;_dBottom, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = pStm-&gt;Read(&amp;_uLimit, sizeof(_uLimit), NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = pStm-&gt;Read(&amp;_fUseBoundingBoxes, sizeof(_fUseBoundingBoxes), NULL))) <br>    { <br>        return(hr); <br>    } <br>    _fDirty = FALSE; <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Save <br>// <br>//  Synopsis:   saves the fractal properties to a stream <br>// <br>//  Arguments:  [pStm]        - pointer to an IStream interface <br>//              [fClearDirty] - TRUE if the dirty flag should be cleared <br>// <br>//  Returns:    S_OK on success <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT CMandelbrot::Save(LPSTREAM pStm, BOOL fClearDirty) <br>{ <br>    if (_fRunning) <br>    { <br>        return(STG_E_CANTSAVE); <br>    } <br>    HRESULT hr; <br>    if (FAILED(hr = WriteDouble(pStm, _dLeft, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = WriteDouble(pStm, _dTop, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = WriteDouble(pStm, _dRight, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = WriteDouble(pStm, _dBottom, NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = pStm-&gt;Write(&amp;_uLimit, sizeof(_uLimit), NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (FAILED(hr = pStm-&gt;Write(&amp;_fUseBoundingBoxes, sizeof(_fUseBoundingBoxes), NULL))) <br>    { <br>        return(hr); <br>    } <br>    if (fClearDirty) <br>    { <br>        _fDirty = FALSE; <br>    } <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::GetSizeMax <br>// <br>//  Synopsis:   used to determine the maximum size of the object's data <br>// <br>//  Arguments:  [pcbSize] - pointer to recieve the max size <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT CMandelbrot::GetSizeMax(ULARGE_INTEGER * pcbSize) <br>{ <br>    pcbSize-&gt;HighPart = 0; <br>    pcbSize-&gt;LowPart = SizeDouble() * 4 + sizeof(_uLimit); <br>    return(S_OK); <br>} <br> <br>// IFractalEngine methods <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Init <br>// <br>//  Synopsis:   Initializes the graph engine and saves a pointer to the <br>//              IFractalHost interface that WinFract passes in as <br>//              the engine is initialized. <br>// <br>//  Arguments:  [pfh] - pointer to an IFractalHost interface <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::Init(IFractalHost *pfh) <br>{ <br>    _pfh = pfh; <br>    // NOTE that I don't addref this pointer!  That would create a circular <br>    // reference count paradox. <br> <br>    _pqe-&gt;Init((IQuadrantClient *)this, pfh); <br>    _pqe-&gt;UseBoundingBoxes(_fUseBoundingBoxes); <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::SetDefaults <br>// <br>//  Synopsis:   initializes the graph engine with its default values <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::SetDefaults(void) <br>{ <br>    if (_uWidth &gt; _uHeight) <br>    { <br>        // image is wider than it is tall <br>        _dTop = 2.0; <br>        _dBottom = -2.0; <br>        _dLeft = (-2.0 * _uWidth) / _uHeight; <br>        _dRight = (2.0 * _uWidth) / _uHeight; <br>    } <br>    else <br>    { <br>        // image is taller than it is wide <br>        _dLeft = -2.0; <br>        _dRight = 2.0; <br>        _dTop = (2.0 * _uHeight) / _uWidth; <br>        _dBottom = (-2.0 * _uHeight) / _uWidth; <br>    } <br>    _uLimit = 200; <br>    _fDirty = TRUE; <br>    _pqe-&gt;Reset(); <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::SetProperties <br>// <br>//  Synopsis:   Displays the graph engine's property dialog box. <br>// <br>//  Arguments:  [hwnd] - handle to the parent window <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::SetProperties(HWND hwnd) <br>{ <br>    ShowDialog(ghinst, MAKEINTRESOURCE(PROPERTIES), hwnd); <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::GetExtent <br>// <br>//  Synopsis:   retrieves the extent of the graph <br>// <br>//  Arguments:  [pdLeft]   - x value at the left of the graph <br>//              [pdTop]    - y value at the top of the graph <br>//              [pdRight]  - x value at the right of the graph <br>//              [pdBottom] - y value at the bottom of the graph <br>// <br>//  Returns:    S_OK <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::GetExtent( <br>    double *pdLeft, <br>    double *pdTop, <br>    double *pdRight, <br>    double *pdBottom) <br>{ <br>    *pdLeft = _dLeft; <br>    *pdTop = _dTop; <br>    *pdRight = _dRight; <br>    *pdBottom = _dBottom; <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::SetExtent <br>// <br>//  Synopsis:   sets the graph's extent <br>// <br>//  Arguments:  [dLeft]   - x value at the left of the graph <br>//              [dTop]    - y value at the top of the graph <br>//              [dRight]  - x value at the right of the graph <br>//              [dBottom] - y value at the bottom of the graph <br>// <br>//  Returns:    S_OK - extents set <br>//              E_FAIL - the graph was running so the extents couldn't be set <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::SetExtent( <br>    double dLeft, <br>    double dTop, <br>    double dRight, <br>    double dBottom) <br>{ <br>    if (_fRunning) <br>    { <br>        return(E_FAIL); <br>    } <br>    _dLeft = dLeft; <br>    _dTop = dTop; <br>    _dRight = dRight; <br>    _dBottom = dBottom; <br>    _fDirty = TRUE; <br>    _pqe-&gt;Reset(); <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::SetGraphSize <br>// <br>//  Synopsis:   Tells the graph engine how big the graph is <br>// <br>//  Arguments:  [uWidth]  - width of the graph (in pixels) <br>//              [uHeight] - height of the graph (in pixels) <br>// <br>//  Returns:    S_OK - success <br>//              E_FAIL - the graph was running or a value was illegal <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::SetGraphSize( <br>    unsigned int uWidth, <br>    unsigned int uHeight) <br>{ <br>    if (_fRunning || uWidth == 0 || uHeight == 0) <br>    { <br>        return(E_FAIL); <br>    } <br>    _uWidth = uWidth; <br>    _uHeight = uHeight; <br>    return(_pqe-&gt;SetGraphSize(uWidth, uHeight)); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Start <br>// <br>//  Synopsis:   starts the graph engine <br>// <br>//  Returns:    S_OK on success <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::Start(void) <br>{ <br>    _fRunning = TRUE; <br>    return(_pqe-&gt;Start()); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Stop <br>// <br>//  Synopsis:   stops the graph engine <br>// <br>//  Returns:    S_OK on success <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::Stop(void) <br>{ <br>    _fRunning = FALSE; <br>    return(_pqe-&gt;Stop()); <br>} <br> <br>// IQuadrantClient methods <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::ComputePoint <br>// <br>//  Synopsis:   Returns what color should be painted at this particular point <br>//              on the graph. <br>// <br>//  Arguments:  [puColor] - pointer to variable to recieve color <br>//              [x]       - x position of the pixel <br>//              [y]       - y position of the pixel <br>// <br>//  Returns:    S_OK <br>// <br>//  Notes:      There are PALETESIZE colors in the palette. <br>//              Colors 1 - PALETESIZE-1 can cycle; 0 cannot. <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::ComputePoint( <br>    unsigned * puColor, <br>    int x, <br>    int y) <br>{ <br>    unsigned c = 0; <br> <br>    //  The Mandelbrot formula is: Z' &lt;= Z^2 + C <br> <br>    double <br>        dCr,                // real component of C <br>        dCi,                // imaginary component of C <br>        dZr = 0.0,          // real component of Z <br>        dZi = 0.0,          // imaginary component of Z <br>        dZiSqr = 0.0,       // Zi squared <br>        dZrSqr = 0.0,       // Zr squared <br>        dZr1;               // temporary holder for Zr <br> <br>    dCr = ((x * (_dRight - _dLeft)) / _uWidth) + _dLeft; <br>    dCi = ((((_uHeight - 1) - y) * (_dTop - _dBottom)) / _uHeight) + _dBottom; <br>    if (dCr &lt; -2 || dCr &gt; 2 || dCi &lt; -2 || dCi &gt; 2) <br>    { <br>        *puColor = 1; <br>        return(S_OK); <br>    } <br>    while (c &lt; _uLimit &amp;&amp; dZiSqr + dZrSqr &lt; 4) <br>    { <br>        dZr1 = dZrSqr - dZiSqr + dCr; <br>        dZi = 2 * dZr * dZi + dCi; <br>        dZr = dZr1; <br>        dZiSqr = dZi * dZi; <br>        dZrSqr = dZr * dZr; <br>        ++c; <br>    } <br>    if (c &gt;= _uLimit) <br>    { <br>        *puColor = 0; <br>    } <br>    else <br>    { <br>        *puColor = ((c - 1) % (PALETTESIZE - 1)) + 1; <br>    } <br>    return(S_OK); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::DoneDrawingGraph <br>// <br>//  Synopsis:   called by the Quad graph helper engine when the graph is done <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>HRESULT STDMETHODCALLTYPE CMandelbrot::DoneDrawingGraph(void) <br>{ <br>    _fRunning = FALSE; <br>    return(S_OK); <br>} <br> <br>// Methods that aren't part of any interface <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::Initialize <br>// <br>//  Synopsis:   called by the clas factory to initialize the object <br>// <br>//  Returns:    TRUE on success <br>//              FALSE if the object couldn't be initialized <br>// <br>//  History:    4-21-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL CMandelbrot::Initialize(void) <br>{ <br>    HRESULT hr = CoCreateInstance( <br>        CLSID_QUADRANTENGINE, <br>        NULL, <br>        CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER, <br>        IID_IQuadrantEngine, <br>        (void **)&amp;_pqe); <br>    if (FAILED(hr)) <br>    { <br>        // couldn't get an IQuadrantEngine interface <br>        return(FALSE); <br>    } <br>    return(TRUE); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::CMandelbrot <br>// <br>//  Synopsis:   constructor <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>CMandelbrot::CMandelbrot() <br>{ <br>    _fUseBoundingBoxes = TRUE; <br>    _dLeft = -2.0; <br>    _dTop = 2.0; <br>    _dRight = 2.0; <br>    _dBottom = -2.0; <br>    _uWidth = 160; <br>    _uHeight = 120; <br>    _fRunning = FALSE; <br>    _cRef = 0; <br>    _pfh = NULL; <br>    _pqe = NULL; <br>    _fDirty = TRUE; <br>    _uLimit = 200;  // default limit <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::~CMandelbrot <br>// <br>//  Synopsis:   destructor <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>CMandelbrot::~CMandelbrot() <br>{ <br>    if (_pqe) <br>    { <br>        _pqe-&gt;Release(); <br>    } <br>} <br> <br>#define LENGTH 50 <br>#define ABOUT_STRING_LENGTH 256 <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CMandelbrot::DialogProc <br>// <br>//  Synopsis:   Dialog proc for the Properties dialog box <br>// <br>//  Arguments:  [hwndDlg] - handle to the dialog <br>//              [uMsg]    - message <br>//              [wParam]  - first message parameter <br>//              [lParam]  - second message parameter <br>// <br>//  History:    4-18-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL CMandelbrot::DialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>    char mbs[LENGTH + 1]; <br> <br>    switch (uMsg) <br>    { <br>    case WM_INITDIALOG: <br>        CheckDlgButton( <br>            hwndDlg, <br>            IDC_USEBOUNDINGBOXES, <br>            _fUseBoundingBoxes); <br>        sprintf(mbs, "%.13lg", _dLeft); <br>        SetDlgItemTextA(hwndDlg, IDC_LOWREAL, mbs); <br>        sprintf(mbs, "%.13lg", _dBottom); <br>        SetDlgItemTextA(hwndDlg, IDC_LOWIMAGINARY, mbs); <br>        sprintf(mbs, "%.13lg", _dRight); <br>        SetDlgItemTextA(hwndDlg, IDC_HIGHREAL, mbs); <br>        sprintf(mbs, "%.13lg", _dTop); <br>        SetDlgItemTextA(hwndDlg, IDC_HIGHIMAGINARY, mbs); <br>        sprintf(mbs, "%d", _uLimit); <br>        SetDlgItemTextA(hwndDlg, IDC_LIMIT, mbs); <br>        return(TRUE); <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) <br>        { <br>        case IDOK: <br>            _fUseBoundingBoxes = IsDlgButtonChecked(hwndDlg, IDC_USEBOUNDINGBOXES); <br>            _pqe-&gt;UseBoundingBoxes(_fUseBoundingBoxes); <br>            GetDlgItemTextA(hwndDlg, IDC_LOWREAL, mbs, LENGTH); <br>            sscanf(mbs, "%lf", &amp;_dLeft); <br>            GetDlgItemTextA(hwndDlg, IDC_LOWIMAGINARY, mbs, LENGTH); <br>            sscanf(mbs, "%lf", &amp;_dBottom); <br>            GetDlgItemTextA(hwndDlg, IDC_HIGHREAL, mbs, LENGTH); <br>            sscanf(mbs, "%lf", &amp;_dRight); <br>            GetDlgItemTextA(hwndDlg, IDC_HIGHIMAGINARY, mbs, LENGTH); <br>            sscanf(mbs, "%lf", &amp;_dTop); <br>            GetDlgItemTextA(hwndDlg, IDC_LIMIT, mbs, LENGTH); <br>            sscanf(mbs, "%u", &amp;_uLimit); <br>            if (_uLimit &lt; 1) <br>            { <br>                _uLimit = 1; <br>            } <br>            _fDirty = TRUE; <br>            _pqe-&gt;Reset(); <br>            EndDialog(hwndDlg, TRUE); <br>            return(TRUE); <br>        case IDC_ABOUT: <br>            { <br>                TCHAR szTitle[ABOUT_STRING_LENGTH]; <br>                TCHAR szText[ABOUT_STRING_LENGTH]; <br>                if (LoadString(ghinst, IDS_ABOUT_TITLE, szTitle, ABOUT_STRING_LENGTH)) <br>                { <br>                    if (LoadString(ghinst, IDS_ABOUT_TEXT, szText, ABOUT_STRING_LENGTH)) <br>                    { <br>                        MessageBox( <br>                            hwndDlg, <br>                            szText, <br>                            szTitle, <br>                            MB_OK | MB_ICONINFORMATION); <br>                    } <br>                } <br>            } <br>            return(TRUE); <br>        case IDCANCEL: <br>            EndDialog(hwndDlg, FALSE); <br>            return(TRUE); <br>        default: <br>            return(FALSE); <br>        } <br>    } <br>    return(FALSE); <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

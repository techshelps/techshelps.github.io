<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FRACTAL.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context190"></a>FRACTAL.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       fractal.cxx <br>// <br>//  Contents:   main windows engine <br>// <br>//  Classes: <br>// <br>//  Functions:  InitApplication <br>//              WinMain <br>//              Exists <br>// <br>//  History:    4-11-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;ole2ver.h&gt; <br>#include "fractal.h" <br>#include "fclass.h" <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   InitApplication <br>// <br>//  Synopsis:   initializes the application and registers its window class <br>//              (called once for all instances) <br>// <br>//  Arguments:  [hInstance] - handle to the first instance <br>// <br>//  Returns:    TRUE on success <br>// <br>//  History:    4-11-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>    WNDCLASS wc; <br> <br>    wc.style = CS_DBLCLKS; <br>    wc.lpfnWndProc = &amp;WindowProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = hInstance; <br>    wc.hIcon = LoadIcon(hInstance, TEXT("AppIcon")); <br>    wc.hCursor = (HCURSOR) LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>    wc.lpszMenuName = TEXT("CFractalWindowMenu"); <br>    wc.lpszClassName = TEXT("CFractalWindow"); <br>    return(RegisterClass(&amp;wc)); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WinMain <br>// <br>//  Synopsis:   main window proceedure <br>// <br>//  Arguments:  [hInstance]     - instance handle <br>//              [hPrevInstance] - handle of the previous instance (if any) <br>//              [lpCmdLine]     - pointer to the command line <br>//              [nCmdShow]      - show state <br>// <br>//  History:    4-11-94   stevebl   Created <br>// <br>//  Notes:      initializes application and starts message loop <br>// <br>//---------------------------------------------------------------------------- <br> <br>extern "C" int PASCAL WinMain(HINSTANCE hInstance, <br>            HINSTANCE hPrevInstance, <br>            LPSTR lpCmdLine, <br>            int nCmdShow) <br>{ <br>    DWORD dwBuildVersion = OleBuildVersion(); <br>    if (HIWORD(dwBuildVersion) != rmm || LOWORD(dwBuildVersion) &lt; rup) <br>    { <br>        // alert the caller that the OLE version is incompatible <br>        // with this build. <br>        TCHAR szTitle[MAX_STRING_LENGTH]; <br>        TCHAR szText[MAX_STRING_LENGTH]; <br>        if (LoadString(hInstance, IDS_ERROR, szTitle, MAX_STRING_LENGTH)) <br>        { <br>            if (LoadString(hInstance, IDS_OLEINCOMPATIBLE, szText, MAX_STRING_LENGTH)) <br>            { <br>                MessageBox( <br>                    NULL, <br>                    szText, <br>                    szTitle, <br>                    MB_OK | MB_ICONEXCLAMATION); <br>            } <br>        } <br>        return(FALSE); <br>    } <br>    if (FAILED(OleInitialize(NULL))) <br>    { <br>        // alert the caller that OLE couldn't be initialized <br>        TCHAR szTitle[MAX_STRING_LENGTH]; <br>        TCHAR szText[MAX_STRING_LENGTH]; <br>        if (LoadString(hInstance, IDS_ERROR, szTitle, MAX_STRING_LENGTH)) <br>        { <br>            if (LoadString(hInstance, IDS_OLEINITFAILED, szText, MAX_STRING_LENGTH)) <br>            { <br>                MessageBox( <br>                    NULL, <br>                    szText, <br>                    szTitle, <br>                    MB_OK | MB_ICONEXCLAMATION); <br>            } <br>        } <br>        return(FALSE); <br>    } <br>    if (!hPrevInstance) <br>    { <br>        if (!InitApplication(hInstance)) <br>        { <br>            OleUninitialize(); <br>            return(FALSE); <br>        } <br>    } <br>    CFractalWindow * pw = new CFractalWindow; <br>    if (pw == NULL) <br>    { <br>        return(FALSE); <br>    } <br>    if (!pw-&gt;InitInstance(hInstance, nCmdShow)) <br>    { <br>        // Note, if InitInstance has failed then it would have <br>        // already deleted pw for me so I don't delete it here. <br>        // This is because when WM_CREATE returns -1 (failure) <br>        // Windows sends the WM_DESTROY message to the window <br>        // and the the CHlprWindow class destroys itself whenever <br>        // it receives this message. <br>        OleUninitialize(); <br>        return(FALSE); <br>    } <br>    MSG msg; <br>    HACCEL haccel = LoadAccelerators(hInstance, TEXT("AppAccel")); <br>    if (haccel == NULL) <br>    { <br>        OleUninitialize(); <br>        return(FALSE); <br>    } <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>        if (!TranslateAccelerator( <br>            pw-&gt;GetHwnd(), <br>            haccel, <br>            &amp;msg)) <br>        { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>        } <br>    } <br>    OleUninitialize(); <br>    return(msg.wParam); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   Exists <br>// <br>//  Synopsis:   simple function to test for the existance of a file <br>// <br>//  History:    6-16-93   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>int Exists(TCHAR *sz) <br>{ <br>    HANDLE h; <br>    h = CreateFile(sz, <br>        GENERIC_READ, <br>        FILE_SHARE_READ | FILE_SHARE_WRITE, <br>        NULL, <br>        OPEN_EXISTING, <br>        0, <br>        0); <br>    if (h != INVALID_HANDLE_VALUE) <br>    { <br>        CloseHandle(h); <br>        return(1); <br>    } <br>    return (0); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

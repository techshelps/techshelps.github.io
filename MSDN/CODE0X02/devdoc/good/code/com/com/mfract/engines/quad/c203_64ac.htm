<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QUAD.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context204"></a>QUAD.H</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       quad.h <br>// <br>//  Contents:   class definitions for the Quadrant Engine <br>// <br>//  Classes:    CQuadrantEngineCF <br>//              CQuadrantEngine <br>// <br>//  Functions: <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#ifndef __QUAD_H__ <br>#define __QUAD_H__ <br>#ifdef __cplusplus <br> <br>#include &lt;frcngn.h&gt; <br>#include &lt;frhost.h&gt; <br>#include &lt;qudcln.h&gt; <br>#include &lt;qudngn.h&gt; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Class:      CQuadrantEngineCF <br>// <br>//  Purpose:    the class factory for the Quadrant Engine <br>// <br>//  Interface:  CQuadrantEngineCF  -- constructor <br>//              ~CQuadrantEngineCF -- destructor <br>//              QueryInterface     -- retrieves an interface on the cf <br>//              AddRef             -- incrementes referencec count <br>//              Release            -- decrements reference count <br>//              CreateInstance     -- creates a Quadrant Engine object <br>//              LockServer         -- keeps cf from being deleted on release <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>class CQuadrantEngineCF : public IClassFactory <br>{ <br>public: <br>    CQuadrantEngineCF(); <br>    ~CQuadrantEngineCF(); <br> <br>    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID, LPVOID *); <br>    ULONG STDMETHODCALLTYPE AddRef(void); <br>    ULONG STDMETHODCALLTYPE Release(void); <br> <br>    HRESULT STDMETHODCALLTYPE CreateInstance(LPUNKNOWN, REFIID, LPVOID*); <br>    HRESULT STDMETHODCALLTYPE LockServer(BOOL); <br> <br>protected: <br>    ULONG _cRef; <br>}; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Class:      CQuadrantEngine <br>// <br>//  Purpose:    implementation for the quadrant engine object <br>// <br>//  Interface:  QueryInterface     -- retrieves an interface from the engine <br>//              AddRef             -- increments refcount <br>//              Release            -- decrements refcount <br>//              Init               -- initializes quadrant engine <br>//              UseBoundingBoxes   -- tells engine to use bounding boxes <br>//              SetGraphSize       -- tells engine the size of its graph <br>//              Start              -- starts engine <br>//              Stop               -- stops engine <br>//              Reset              -- resets engine <br>//              GraphicsThread     -- entry point for the graphics thread <br>//              PlotAreaSlowly     -- plots a rectangle <br>//              Subdivide          -- recursively plots a quadrant <br>//              Initialize         -- private method to initialize c++ object <br>//              CQuadrantEngine    -- constructor <br>//              ~CQuadrantEngine   -- destructor <br>// <br>//  History:    4-14-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>class CQuadrantEngine : public IQuadrantEngine <br>{ <br>public: <br>    // IUnknown methods <br>    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID, LPVOID *); <br>    ULONG STDMETHODCALLTYPE AddRef(void); <br>    ULONG STDMETHODCALLTYPE Release(void); <br> <br>    // IQuadrantEngine methods <br>    HRESULT STDMETHODCALLTYPE Init( <br>        IQuadrantClient *pqc, <br>        IFractalHost *pfh); <br> <br>    HRESULT STDMETHODCALLTYPE UseBoundingBoxes(BOOL fFlag); <br> <br>    HRESULT STDMETHODCALLTYPE SetGraphSize( <br>        unsigned int uWidth, <br>        unsigned int uHeight); <br> <br>    HRESULT STDMETHODCALLTYPE Start(void); <br> <br>    HRESULT STDMETHODCALLTYPE Stop(void); <br> <br>    HRESULT STDMETHODCALLTYPE Reset(void); <br> <br>    // Methods that aren't part of any interface <br>    DWORD GraphicsThread(void); <br>    void PlotAreaSlowly( <br>        int iXLow, <br>        int iYLow, <br>        int iXHigh, <br>        int iYHigh); <br>    void Subdivide( <br>        int iXLow, <br>        int iYLow, <br>        int iXHigh, <br>        int iYHigh); <br>    BOOL Initialize(void); <br>    CQuadrantEngine(); <br>    ~CQuadrantEngine(); <br>private: <br>    BOOL _fUseBoundingBoxes; <br>    ULONG _cRef; <br>    unsigned _uWidth, _uHeight; <br>    HANDLE _hRestart, _hRunning; <br>    HANDLE _hEngine; <br>    DWORD _dwThreadId; <br>    IFractalHost * _pfh; <br>    IQuadrantClient * _pqc; <br>}; <br> <br>extern HINSTANCE ghinst; <br>extern ULONG gcRef, gcLock; <br> <br>#endif //__cplusplus <br>#endif //__QUAD_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

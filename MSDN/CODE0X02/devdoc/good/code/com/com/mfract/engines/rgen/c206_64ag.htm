<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLAR.CXX</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context208"></a>POLAR.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       polar.cxx <br>// <br>//  Contents:   routines for converting between polar and cartesian coordinate <br>//              systems <br>// <br>//  Classes: <br>// <br>//  Functions:  PolarFromCartesian <br>//              CartesianFromPolar <br>// <br>//  History:    5-04-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include "polar.h" <br>#include &lt;math.h&gt; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CartesianFromPolar <br>// <br>//  Synopsis:   converts from polar coordinates to cartesian coordinates <br>// <br>//  Arguments:  [x]     - [out] x position <br>//              [y]     - [out] y position <br>//              [r]     - [in] radius <br>//              [theta] - [in] angle in radians <br>// <br>//  Returns:    nothing <br>// <br>//  History:    5-04-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>void CartesianFromPolar(double &amp; x, double &amp; y, double r, double theta) <br>{ <br>    x = r * cos(theta); <br>    y = r * sin(theta); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   PolarFromCartesian <br>// <br>//  Synopsis:   converts from cartesian to polar coordinates <br>// <br>//  Arguments:  [r]     - [out] radius <br>//              [theta] - [out] angle in radians <br>//              [x]     - [in] x position <br>//              [y]     - [in] y position <br>// <br>//  Returns:    nothing <br>// <br>//  History:    5-04-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>void PolarFromCartesian(double &amp; r, double &amp; theta, double x, double y) <br>{ <br>    r = sqrt(x * x + y * y); <br>    if (r == 0) <br>    { <br>        theta = 0; <br>        return; <br>    } <br>    if (y &gt; 0) <br>    { <br>        theta = acos(x / r); <br>    } <br>    else <br>    { <br>        // acos(0) == pi / 2 <br>        // I'm using the trig functions instead of a constant <br>        // to ensure that the conversion functions use the <br>        // same values when going in both directions. <br>        theta = 4.0 * acos((float)0) - acos(x / r); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context343"></a>IDS.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: IDS.CPP <br>// <br>//      Implementation file for CDropSource <br>// <br>// Functions: <br>// <br>//      See IDS.H for class definition <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "doc.h" <br>#include "site.h" <br>#include "dxferobj.h" <br> <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::QueryDrag <br>// <br>// Purpose: <br>// <br>//      Check to see if Drag operation should be initiated based on the <br>//      current position of the mouse. <br>// <br>// Parameters: <br>// <br>//      POINT pt                - position of mouse <br>// <br>// Return Value: <br>// <br>//      BOOL                    - TRUE if drag should take place, <br>//                                else FALSE <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleSite::GetObjRect     SITE.CPP <br>//      PtInRect                    Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>BOOL CSimpleDoc::QueryDrag(POINT pt) <br>{ <br>// if pt is within rect of object, then start drag <br>if (m_lpSite) <br>{ <br>RECT rect; <br>m_lpSite-&gt;GetObjRect(&amp;rect); <br>return ( PtInRect(&amp;rect, pt) ? TRUE : FALSE ); <br>} <br>else <br>return FALSE; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::DoDragDrop <br>// <br>// Purpose: <br>// <br>//      Actually perform a drag/drop operation with the current <br>//      selection in the source document. <br>// <br>// Parameters: <br>// <br>//      none. <br>// <br>// Return Value: <br>// <br>//      DWORD                    - returns the result effect of the <br>//                                 drag/drop operation: <br>//                                      DROPEFFECT_NONE, <br>//                                      DROPEFFECT_COPY, <br>//                                      DROPEFFECT_MOVE, or <br>//                                      DROPEFFECT_LINK <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CDataXferObj::Create        DXFEROBJ.CPP <br>//      CDataXferObj::QueryInterface DXFEROBJ.CPP <br>//      CDataXferObj::Release       DXFEROBJ.CPP <br>//      DoDragDrop                  OLE API <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>DWORD CSimpleDoc::DoDragDrop (void) <br>{ <br>DWORD       dwEffect     = 0; <br>LPDATAOBJECT lpDataObj; <br> <br>OutputDebugString("In CSimpleDoc::DoDragDrop\r\n"); <br> <br>// Create a data transfer object by cloning the existing OLE object <br>CDataXferObj FAR* pDataXferObj = CDataXferObj::Create(m_lpSite,NULL); <br> <br>if (! pDataXferObj) { <br>MessageBox(NULL,"Out-of-memory","SimpDnD",MB_SYSTEMMODAL|MB_ICONHAND); <br>return DROPEFFECT_NONE; <br>} <br> <br>// initially obj is created with 0 refcnt. this QI will make it go to 1. <br>pDataXferObj-&gt;QueryInterface(IID_IDataObject, (LPVOID FAR*)&amp;lpDataObj); <br>assert(lpDataObj); <br> <br>m_fLocalDrop     = FALSE; <br>m_fLocalDrag     = TRUE; <br> <br>::DoDragDrop ( lpDataObj, <br> &amp;m_DropSource, <br> DROPEFFECT_COPY,   // we only allow copy <br> &amp;dwEffect <br>); <br> <br>m_fLocalDrag     = FALSE; <br> <br>/* if after the Drag/Drop modal (mouse capture) loop is finished <br>**    and a drag MOVE operation was performed, then we must delete <br>**    the selection that was dragged. <br>*/ <br>if ( (dwEffect &amp; DROPEFFECT_MOVE) != 0 ) { <br>// ... delete source object here (we do NOT support MOVE) <br>} <br> <br>pDataXferObj-&gt;Release();    // this should destroy the DataXferObj <br>return dwEffect; <br>} <br> <br> <br> <br>//********************************************************************** <br>// <br>// CDropSource::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Return a pointer to a requested interface <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   ID of interface to be returned <br>//      LPVOID FAR* ppvObj  -   Location to return the interface <br>// <br>// Return Value: <br>// <br>//      S_OK                -   Interface supported <br>//      E_NOINTERFACE       -   Interface NOT supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleDoc::QueryInterface  DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDropSource::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>OutputDebugString("In IDS::QueryInterface\r\n"); <br> <br>// delegate to the document <br>return m_pDoc-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CDropSource::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count on this interface <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The current reference count on this interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleObj::AddReff         OBJ.CPP <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This function adds one to the ref count of the interface, <br>//      and calls then calls CSimpleDoc to increment its ref. <br>//      count. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CDropSource::AddRef() <br>{ <br>OutputDebugString("In IDS::AddRef\r\n"); <br> <br>// increment the interface reference count (for debugging only) <br>++m_nCount; <br> <br>// delegate to the document Object <br>return m_pDoc-&gt;AddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CDropSource::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count on this interface <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      The current reference count on this interface. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleObj::Release         OBJ.CPP <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      This function subtracts one from the ref count of the interface, <br>//      and calls then calls CSimpleDoc to decrement its ref. <br>//      count. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CDropSource::Release() <br>{ <br>OutputDebugString("In IDS::Release\r\n"); <br> <br>// decrement the interface reference count (for debugging only) <br>--m_nCount; <br> <br>// delegate to the document object <br>return m_pDoc-&gt;Release(); <br>} <br> <br>//********************************************************************** <br>// <br>// CDropSource::QueryContinueDrag <br>// <br>// Purpose: <br>// <br>//      Called to determine if a drop should take place or be canceled. <br>// <br>// Parameters: <br>// <br>//      BOOL fEscapePressed - TRUE if ESCAPE key has been pressed <br>//      DWORD grfKeyState   - key state <br>// <br>// Return Value: <br>// <br>//      DRAGDROP_S_CANCEL   - drag operation should be canceled <br>//      DRAGDROP_S_DROP     - drop operation should be performed <br>//      S_OK                - dragging should continue <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDropSource::QueryContinueDrag ( <br>BOOL    fEscapePressed, <br>DWORD   grfKeyState <br>) <br>{ <br>if (fEscapePressed) <br>return DRAGDROP_S_CANCEL; <br>else if (!(grfKeyState &amp; MK_LBUTTON)) <br>return DRAGDROP_S_DROP; <br>else <br>return NOERROR; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CDropSource::GiveFeedback <br>// <br>// Purpose: <br>// <br>//      Called to set cursor feedback <br>// <br>// Parameters: <br>// <br>//      DWORD dwEffect      - drop operation to give feedback for <br>// <br>// Return Value: <br>// <br>//      DRAGDROP_S_USEDEFAULTCURSORS  - tells OLE to use standard cursors <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDropSource::GiveFeedback (DWORD dwEffect) <br>{ <br>return DRAGDROP_S_USEDEFAULTCURSORS; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context346"></a>IDT.H</h2>
<pre><code>//********************************************************************** <br>// File name: idt.h <br>// <br>//      Definition of CDropTarget <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br>#if !defined( _IDT_H_ ) <br>#define _IDT_H_ <br> <br>#include &lt;assert.h&gt; <br> <br>class CSimpleDoc; <br> <br>/* Flags to control direction for drag scrolling */ <br>typedef enum tagSCROLLDIR { <br>SCROLLDIR_NULL          = 0, <br>SCROLLDIR_UP            = 1, <br>SCROLLDIR_DOWN          = 2, <br>SCROLLDIR_RIGHT         = 3, <br>SCROLLDIR_LEFT          = 4 <br>} SCROLLDIR; <br> <br>interface CDropTarget : public IDropTarget <br>{ <br>int   m_nCount;                 // reference count <br>CSimpleDoc FAR * m_pDoc; <br>BOOL  m_fCanDropCopy; <br>BOOL  m_fCanDropLink; <br>DWORD m_dwSrcAspect; <br>RECT  m_rcDragRect; <br>POINT m_ptLast; <br>BOOL  m_fDragFeedbackDrawn; <br>DWORD m_dwTimeEnterScrollArea;  // time of entering scroll border region <br>DWORD m_dwLastScrollDir;        // current dir for drag scroll <br>DWORD m_dwNextScrollTime;       // time for next scroll <br> <br>CDropTarget(CSimpleDoc FAR * pDoc) { <br>OutputDebugString("In IDT's constructor\r\n"); <br>m_pDoc = pDoc; <br>m_nCount = 0; <br>m_fCanDropCopy = FALSE; <br>m_fCanDropLink = FALSE; <br>m_fDragFeedbackDrawn = FALSE; <br>m_dwTimeEnterScrollArea = 0L; <br>m_dwNextScrollTime = 0L; <br>m_dwLastScrollDir = SCROLLDIR_NULL; <br>}; <br> <br>~CDropTarget() { <br>OutputDebugString("In IDT's destructor\r\n"); <br>assert(m_nCount == 0); <br>} ; <br> <br>STDMETHODIMP QueryInterface (REFIID riid, LPVOID FAR* ppv); <br>STDMETHODIMP_(ULONG) AddRef (); <br>STDMETHODIMP_(ULONG) Release (); <br> <br>   // *** IDropTarget methods *** <br>STDMETHODIMP DragEnter (LPDATAOBJECT pDataObj, DWORD grfKeyState, <br>POINTL pt, LPDWORD pdwEffect); <br>STDMETHODIMP DragOver  (DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect); <br>STDMETHODIMP DragLeave (); <br>STDMETHODIMP Drop (LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, <br>LPDWORD pdwEffect); <br> <br>private: <br>// Drag/Drop support methods <br>BOOL QueryDrop (DWORD grfKeyState, POINTL pointl, BOOL fDragScroll, <br>LPDWORD lpdwEffect); <br>BOOL DoDragScroll( POINTL pointl ); <br>void InitDragFeedback(LPDATAOBJECT pDataObj, POINTL pointl); <br>void DrawDragFeedback( POINTL pointl ); <br>void UndrawDragFeedback( void ); <br>}; <br> <br>#endif  // _IDT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

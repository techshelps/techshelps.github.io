<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context337"></a>DOC.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: DOC.CPP <br>// <br>//      Implementation file for CSimpleDoc. <br>// <br>// Functions: <br>// <br>//      See DOC.H for Class Definition <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "iocs.h" <br>#include "ias.h" <br>#include "app.h" <br>#include "site.h" <br>#include "doc.h" <br>#include "idt.h" <br>#include "dxferobj.h" <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::Create <br>// <br>// Purpose: <br>// <br>//      Creation for the CSimpleDoc Class <br>// <br>// Parameters: <br>// <br>//      CSimpleApp FAR * lpApp  -   Pointer to the CSimpleApp Class <br>// <br>//      LPRECT lpRect           -   Client area rect of "frame" window <br>// <br>//      HWND hWnd               -   Window Handle of "frame" window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      StgCreateDocfile            OLE API <br>//      RegisterDragDrop            OLE API <br>//      CoLockObjectExternal        OLE API <br>//      CreateWindow                Windows API <br>//      ShowWindow                  Windows API <br>//      UpdateWindow                Windows API <br>// <br>// Comments: <br>// <br>//      This routine was added so that failure could be returned <br>//      from object creation. <br>// <br>//******************************************************************** <br> <br>CSimpleDoc FAR * CSimpleDoc::Create(CSimpleApp FAR *lpApp, LPRECT lpRect,HWND hWnd) <br>{ <br>        CSimpleDoc FAR * lpTemp = new CSimpleDoc(lpApp, hWnd); <br> <br>        if (!lpTemp) <br>                return NULL; <br> <br>        // create storage for the doc. <br>        HRESULT hErr = StgCreateDocfile ( <br>                NULL,       // generate temp name <br>                STGM_READWRITE | STGM_TRANSACTED | STGM_SHARE_EXCLUSIVE, <br>                0, &amp;lpTemp-&gt;m_lpStorage); <br> <br>        if (hErr != NOERROR) <br>                goto error; <br> <br>        // create the document Window <br>        lpTemp-&gt;m_hDocWnd = CreateWindow( <br>                        "SimpDndDocWClass", <br>                        NULL, <br>                        WS_CHILD | WS_CLIPCHILDREN, <br>                        lpRect-&gt;left, <br>                        lpRect-&gt;top, <br>                        lpRect-&gt;right, <br>                        lpRect-&gt;bottom, <br>                        hWnd, <br>                        NULL, <br>                        lpApp-&gt;m_hInst, <br>                        NULL); <br> <br>        if (!lpTemp-&gt;m_hDocWnd) <br>                goto error; <br> <br>        ShowWindow(lpTemp-&gt;m_hDocWnd, SW_SHOWNORMAL);  // Show the window <br>        UpdateWindow(lpTemp-&gt;m_hDocWnd);               // Sends WM_PAINT message <br> <br>        // Ensable InsertObject menu choice <br>        EnableMenuItem( lpApp-&gt;m_hEditMenu, 1, MF_BYPOSITION | MF_ENABLED); <br>        // Disable Copy menu choice <br>        EnableMenuItem( lpApp-&gt;m_hEditMenu, 0, MF_BYPOSITION | MF_DISABLED | MF_GRAYED); <br> <br>        // It is *REQUIRED* to hold a strong LOCK on the object that is <br>        // registered as drop target. this call will result in at least one <br>        // ref count held on our document. later in CSimpleDoc::Close we will <br>        // unlock this lock which will make our document's ref count go to 0. <br>        // when the document's ref count goes to 0, it will be deleted. <br>        CoLockObjectExternal (&amp;lpTemp-&gt;m_DropTarget, TRUE, 0); <br> <br>        // Register our window as a DropTarget <br>        RegisterDragDrop(lpTemp-&gt;m_hDocWnd, &amp;lpTemp-&gt;m_DropTarget); <br>        lpTemp-&gt;m_fRegDragDrop = TRUE; <br> <br>        return (lpTemp); <br> <br>error: <br>        delete (lpTemp); <br>        return NULL; <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::Close <br>// <br>// Purpose: <br>// <br>//      Close CSimpleDoc object. <br>//      when the document's reference count goes to 0, the document <br>//      will be destroyed. <br>// <br>// Parameters: <br>// <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      RevokeDragDrop              OLE API <br>//      CoLockObjectExternal        OLE API <br>//      OleFlushClipboard           OLE API <br>//      ShowWindow                  Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpleDoc::Close(void) <br>{ <br>        OutputDebugString("In CSimpleDoc::Close\r\n"); <br>        CStabilize stabilize(this); <br>        ShowWindow(m_hDocWnd, SW_HIDE);  // Hide the window <br> <br>        // Remove our data transfer object from clipboard if it is there. <br>        //  this will leave HGLOBAL based data behind on the clipboard <br>        //  including OLE 1.0 compatibility formats. <br>        OleFlushClipboard(); <br> <br>        // Revoke our window as a DropTarget <br>        if (m_fRegDragDrop) { <br>                RevokeDragDrop(m_hDocWnd); <br>                m_fRegDragDrop = FALSE; <br>        } <br> <br>        // Close the OLE object in our document <br>        if (m_lpSite) <br>                m_lpSite-&gt;CloseOleObject(); <br> <br>        // Unlock the lock added in CSimpleDoc::Create. this will make <br>        // the document's ref count go to 0, and the document will be deleted. <br>        CoLockObjectExternal (&amp;m_DropTarget, FALSE, TRUE); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::CSimpleDoc <br>// <br>// Purpose: <br>// <br>//      Constructor for the CSimpleDoc Class <br>// <br>// Parameters: <br>// <br>//      CSimpleApp FAR * lpApp  -   Pointer to the CSimpleApp Class <br>// <br>//      HWND hWnd               -   Window Handle of "frame" window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      GetMenu                     Windows API <br>//      GetSubMenu                  Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br>#pragma warning(disable : 4355)  // turn off this warning.  This warning <br>                                                                // tells us that we are passing this in <br>                                                                // an initializer, before "this" is through <br>                                                                // initializing.  This is ok, because <br>                                                                // we just store the ptr in the other <br>                                                                // constructor <br> <br>CSimpleDoc::CSimpleDoc(CSimpleApp FAR * lpApp,HWND hWnd) <br>                : m_DropTarget(this), m_DropSource(this) <br>#pragma warning (default : 4355)  // Turn the warning back on <br>{ <br>        OutputDebugString("In CSimpleDoc's Constructor\r\n"); <br>        m_lpApp = lpApp; <br>        m_lpSite = NULL; <br>        // set up menu handles <br>        lpApp-&gt;m_hMainMenu = GetMenu(hWnd); <br>        lpApp-&gt;m_hFileMenu = GetSubMenu(lpApp-&gt;m_hMainMenu, 0); <br>        lpApp-&gt;m_hEditMenu = GetSubMenu(lpApp-&gt;m_hMainMenu, 1); <br>        lpApp-&gt;m_hHelpMenu = GetSubMenu(lpApp-&gt;m_hMainMenu, 2); <br>        lpApp-&gt;m_hCascadeMenu = NULL; <br>        m_fModifiedMenu = FALSE; <br> <br>        // drag/drop related stuff <br>        m_fRegDragDrop = FALSE;       // is doc registered as drop target? <br>        m_fLocalDrag = FALSE;         // is doc source of the drag <br>        m_fLocalDrop = FALSE;         // was doc target of the drop <br>        m_fCanDropCopy = FALSE;       // is Drag/Drop copy/move possible? <br>        m_fCanDropLink = FALSE;       // is Drag/Drop link possible? <br>        m_fDragLeave = FALSE;         // has drag left <br>        m_fPendingDrag = FALSE;       // LButtonDown--possible drag pending <br>        m_ptButDown.x = m_ptButDown.y = 0; // LButtonDown coordinates <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::~CSimpleDoc <br>// <br>// Purpose: <br>// <br>//      Destructor for CSimpleDoc <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleSite::Release        SITE.CPP <br>//      IStorage::Release           OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CSimpleDoc::~CSimpleDoc() <br>{ <br>        OutputDebugString("In CSimpleDoc's Destructor\r\n"); <br> <br>        // Release all pointers we hold to the OLE object. also release <br>        // the ref count added in CSimpleSite::Create. this will make <br>        // the Site's ref count go to 0, and the Site will be deleted. <br>        if (m_lpSite) { <br>                m_lpSite-&gt;UnloadOleObject(); <br>                m_lpSite-&gt;Release(); <br>                m_lpSite = NULL; <br>        } <br> <br>        // Release the Storage <br>        if (m_lpStorage) { <br>                m_lpStorage-&gt;Release(); <br>                m_lpStorage = NULL; <br>        } <br> <br>        // if the edit menu was modified, remove the menu item and <br>        // destroy the popup if it exists <br>        if (m_fModifiedMenu) <br>                { <br>                int nCount = GetMenuItemCount(m_lpApp-&gt;m_hEditMenu); <br>                RemoveMenu(m_lpApp-&gt;m_hEditMenu, nCount-1, MF_BYPOSITION); <br>                if (m_lpApp-&gt;m_hCascadeMenu) <br>                        DestroyMenu(m_lpApp-&gt;m_hCascadeMenu); <br>                } <br> <br>        DestroyWindow(m_hDocWnd); <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Return a pointer to a requested interface <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   ID of interface to be returned <br>//      LPVOID FAR* ppvObj  -   Location to return the interface <br>// <br>// Return Value: <br>// <br>//      S_OK                -   Interface supported <br>//      E_NOINTERFACE       -   Interface NOT supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CSimpleDoc::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In CSimpleDoc::QueryInterface\r\n"); <br> <br>        *ppvObj = NULL;     // must set out pointer parameters to NULL <br> <br>        // looking for IUnknown <br>        if ( riid == IID_IUnknown) <br>                { <br>                AddRef(); <br>                *ppvObj = this; <br>                return S_OK; <br>                } <br> <br>        // looking for IDropTarget <br>        if ( riid == IID_IDropTarget) <br>                { <br>                m_DropTarget.AddRef(); <br>                *ppvObj=&amp;m_DropTarget; <br>                return S_OK; <br>                } <br> <br>        // looking for IDropSource <br>        if ( riid == IID_IDropSource) <br>                { <br>                m_DropSource.AddRef(); <br>                *ppvObj=&amp;m_DropSource; <br>                return S_OK; <br>                } <br> <br>        // Not a supported interface <br>        return E_NOINTERFACE; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the document reference count <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      UINT    -   The current reference count on the document <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      CSimpleApp::AddRef          APP.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpleDoc::AddRef() <br>{ <br>        OutputDebugString("In CSimpleDoc::AddRef\r\n"); <br>        return SafeAddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the document reference count <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      UINT    -   The current reference count on the document <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpleDoc::Release() <br>{ <br>        OutputDebugString("In CSimpleDoc::Release\r\n"); <br> <br>        return SafeRelease(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::InsertObject <br>// <br>// Purpose: <br>// <br>//      Inserts a new object to this document <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleSite::CSimpleSite    SITE.CPP <br>//      CSimpleSite::InitObject     SITE.CPP <br>//      memset                      C Runtime <br>//      OleUIInsertObject           OUTLUI function <br>//      CSimpleDoc::DisableInsertObject DOC.CPP <br>// <br>// Comments: <br>// <br>//      This implementation only allows one object to be inserted <br>//      into a document.  Once the object has been inserted, then <br>//      the Insert Object menu choice is greyed out, to prevent <br>//      the user from inserting another. <br>// <br>//******************************************************************** <br> <br>void CSimpleDoc::InsertObject() <br>{ <br>        OLEUIINSERTOBJECT io; <br>        CStabilize stabilize(this); <br>        UINT iret; <br>        //@@WTK WIN32, UNICODE <br>        //char szFile[OLEUI_CCHPATHMAX]; <br>        char szFile[OLEUI_CCHPATHMAX]; <br> <br>        m_lpSite = CSimpleSite::Create(this); <br> <br>        // clear the structure <br>        _fmemset(&amp;io, 0, sizeof(OLEUIINSERTOBJECT)); <br> <br>        // fill the structure <br>        io.cbStruct = sizeof(OLEUIINSERTOBJECT); <br>        io.dwFlags = IOF_SELECTCREATENEW | <br>                                        IOF_DISABLELINK | IOF_DISABLEDISPLAYASICON | <br>                                        IOF_CREATENEWOBJECT | IOF_CREATEFILEOBJECT; <br>        io.hWndOwner = m_hDocWnd; <br>        io.lpszCaption = "Insert Object"; <br>        io.iid = IID_IOleObject; <br>        io.oleRender = OLERENDER_DRAW; <br>        io.lpIOleClientSite = &amp;m_lpSite-&gt;m_OleClientSite; <br>        io.lpIStorage = m_lpSite-&gt;m_lpObjStorage; <br>        io.ppvObj = (LPVOID FAR *)&amp;m_lpSite-&gt;m_lpOleObject; <br>        io.lpszFile = szFile; <br>        io.cchFile = sizeof(szFile) / sizeof *szFile; <br>        _fmemset(szFile, 0, sizeof(szFile)); <br> <br>        // call OUTLUI to do all the hard work <br>        iret = OleUIInsertObject(&amp;io); <br> <br>        if (iret == OLEUI_OK) <br>                { <br>                m_lpSite-&gt;InitObject((BOOL)(io.dwFlags &amp; IOF_SELECTCREATENEW)); <br>                // disable Insert Object menu item <br>                DisableInsertObject(); <br>                } <br>        else <br>                { <br>                m_lpSite-&gt;Release(); <br>                m_lpSite = NULL; <br>                m_lpStorage-&gt;Revert(); <br>                } <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::lResizeDoc <br>// <br>// Purpose: <br>// <br>//      Resizes the document <br>// <br>// Parameters: <br>// <br>//      LPRECT lpRect   -   The size of the client are of the "frame" <br>//                          Window. <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      MoveWindow                              Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpleDoc::lResizeDoc(LPRECT lpRect) <br>{ <br>        MoveWindow( <br>                        m_hDocWnd, <br>                        lpRect-&gt;left, lpRect-&gt;top, <br>                        lpRect-&gt;right, lpRect-&gt;bottom, TRUE); <br> <br>        return NULL; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::lAddVerbs <br>// <br>// Purpose: <br>// <br>//      Adds the objects verbs to the edit menu. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      GetMenuItemCount            Windows API <br>//      OleUIAddVerbMenu            OUTLUI function <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpleDoc::lAddVerbs(void) <br>{ <br>        CStabilize stabilize(this); <br>        // m_fModifiedMenu is TRUE if the menu has already been modified <br>        // once.  Since we only support one obect every time the application <br>        // is run, then once the menu is modified, it doesn't have <br>        // to be done again. <br>        if (m_lpSite &amp;&amp; !m_fModifiedMenu) <br>                { <br>                int nCount = GetMenuItemCount(m_lpApp-&gt;m_hEditMenu); <br> <br>                OleUIAddVerbMenu ( m_lpSite-&gt;m_lpOleObject, <br>                                                   NULL, <br>                                                   m_lpApp-&gt;m_hEditMenu, <br>                                                   nCount + 1, <br>                                                   IDM_VERB0, <br>                                                   0,           // no maximum verb IDM enforced <br>                                                   FALSE, <br>                                                   1, <br>                                                   &amp;m_lpApp-&gt;m_hCascadeMenu); <br> <br>                m_fModifiedMenu = TRUE; <br>                } <br>        return (NULL); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::PaintDoc <br>// <br>// Purpose: <br>// <br>//      Paints the Document <br>// <br>// Parameters: <br>// <br>//      HDC hDC -   hDC of the document Window <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleSite::PaintObj       SITE.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpleDoc::PaintDoc (HDC hDC) <br>{ <br>        CStabilize stabilize(this); <br>        // if we supported multiple objects, then we would enumerate <br>        // the objects and call paint on each of them from here. <br> <br>        if (m_lpSite) <br>                m_lpSite-&gt;PaintObj(hDC); <br> <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::DisableInsertObject <br>// <br>// Purpose: <br>// <br>//      Disable the ability to insert a new object in this document. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      RevokeDragDrop              OLE API <br>//      EnableMenuItem              Windows API <br>// <br>// Comments: <br>// <br>//      This implementation only allows one object to be inserted <br>//      into a document.  Once the object has been inserted, then <br>//      the Insert Object menu choice is greyed out, to prevent <br>//      the user from inserting another. Also we revoke ourself as <br>//      a potential drop target. <br>// <br>//******************************************************************** <br> <br>void CSimpleDoc::DisableInsertObject(void) <br>{ <br>        // Disable InsertObject menu choice <br>        EnableMenuItem( m_lpApp-&gt;m_hEditMenu, 1, MF_BYPOSITION | MF_DISABLED | MF_GRAYED); <br>        // Enable Copy menu choice <br>        EnableMenuItem( m_lpApp-&gt;m_hEditMenu, 0, MF_BYPOSITION | MF_ENABLED); <br> <br>        // We no longer accept dropping of objects <br>        if (m_fRegDragDrop) { <br>                RevokeDragDrop(m_hDocWnd); <br>                m_fRegDragDrop = FALSE; <br>        } <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleDoc::CopyObjectToClip <br>// <br>// Purpose: <br>// <br>//      Copy the embedded OLE object to the clipboard <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CDataXferObj::Create        DXFEROBJ.CPP <br>//      CDataXferObj::QueryInterface DXFEROBJ.CPP <br>//      OleSetClipboard             OLE API <br>// <br>// Comments: <br>// <br>//      This implementation only allows one object to be inserted <br>//      into a document.  Once the object has been inserted, then <br>//      the Copy menu choice is enabled. <br>// <br>//******************************************************************** <br> <br>void CSimpleDoc::CopyObjectToClip(void) <br>{ <br>        LPDATAOBJECT lpDataObj; <br> <br>        // Create a data transfer object by cloning the existing OLE object <br>        CDataXferObj FAR* pDataXferObj = CDataXferObj::Create(m_lpSite,NULL); <br>        if (! pDataXferObj) { <br>                MessageBox(NULL,"Out-of-memory","SimpDnD",MB_SYSTEMMODAL|MB_ICONHAND); <br>                return; <br>        } <br>        // initially obj is created with 0 refcnt. this QI will make it go to 1. <br>        pDataXferObj-&gt;QueryInterface(IID_IDataObject, (LPVOID FAR*)&amp;lpDataObj); <br> <br>        // put out data transfer object on the clipboard. this API will AddRef. <br>        OleSetClipboard(lpDataObj); <br> <br>        // Give ownership of data transfer object to clipboard <br>        pDataXferObj-&gt;Release(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DXFEROBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context339"></a>DXFEROBJ.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: DXFEROBJ.CPP <br>// <br>//       Implementation file for CDataXferObj, data transfer object <br>//     implementation of IDataObject interface. <br>// <br>// Functions: <br>// <br>//      See DXFEROBJ.H for class definition <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>//@@WTK WIN32, UNICODE <br>//#include "..\include\enumfetc.h" <br>#include &lt;assert.h&gt; <br>#include "dxferobj.h" <br>#include "site.h" <br> <br>CLIPFORMAT g_cfEmbeddedObject = RegisterClipboardFormat(CF_EMBEDDEDOBJECT); <br>CLIPFORMAT g_cfObjectDescriptor =RegisterClipboardFormat(CF_OBJECTDESCRIPTOR); <br> <br>// List of formats offered by our data transfer object via EnumFormatEtc <br>static FORMATETC s_arrGetFmtEtcs[] = <br>{ <br>        { g_cfEmbeddedObject, NULL, DVASPECT_CONTENT, -1, TYMED_ISTORAGE}, <br>        { g_cfObjectDescriptor, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL}, <br>        { CF_METAFILEPICT, NULL, DVASPECT_CONTENT, -1, TYMED_MFPICT} <br>}; <br> <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::Create <br>// <br>// Purpose: <br>// <br>//      Creation routine for CDataXferObj <br>// <br>// Parameters: <br>// <br>//      CSimpleSite FAR *lpSite   - Pointer to source CSimpleSite <br>//                                  this is the container site of the <br>//                                  source OLE object to be transfered <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      StgCreateDocfile            OLE API <br>//      assert                      C Runtime <br>// <br>// Comments: <br>//      reference count of CDataXferObj will be 0 on return. <br>// <br>//******************************************************************** <br> <br>CDataXferObj FAR * CDataXferObj::Create( <br>                CSimpleSite FAR *lpSite, <br>                POINTL FAR* pPointl <br>) <br>{ <br>        CDataXferObj FAR * lpTemp = new CDataXferObj(); <br> <br>        if (!lpTemp) <br>                return NULL; <br> <br>        // create a sub-storage for the object <br>        HRESULT hErr = StgCreateDocfile( <br>                                NULL, <br>                                STGM_READWRITE | STGM_DIRECT | STGM_SHARE_EXCLUSIVE | <br>                                        STGM_DELETEONRELEASE, <br>                                0, <br>                                &amp;lpTemp-&gt;m_lpObjStorage); <br> <br>        assert(hErr == NOERROR); <br> <br>        if (hErr != NOERROR) <br>                { <br>                delete lpTemp; <br>                return NULL; <br>                } <br> <br>        // Clone the source object <br>        if (lpSite-&gt;m_lpOleObject) { <br>                // Object is loaded; ask the object to save into the new storage <br>                LPPERSISTSTORAGE pPersistStorage; <br> <br>                lpSite-&gt;m_lpOleObject-&gt;QueryInterface(IID_IPersistStorage, <br>                                (LPVOID FAR*)&amp;pPersistStorage); <br>                assert(pPersistStorage); <br>                OleSave(pPersistStorage, lpTemp-&gt;m_lpObjStorage, FALSE); <br> <br>                // pass NULL so that object application won't forget the real stg <br>                pPersistStorage-&gt;SaveCompleted(NULL); <br>                pPersistStorage-&gt;Release(); <br>        } else { <br>                // Object not loaded so use cheaper IStorage CopyTo operation <br>                lpSite-&gt;m_lpObjStorage-&gt;CopyTo(0, NULL, NULL, lpTemp-&gt;m_lpObjStorage); <br>        } <br> <br>        OleLoad(lpTemp-&gt;m_lpObjStorage, IID_IOleObject, NULL, <br>                        (LPVOID FAR*)&amp;lpTemp-&gt;m_lpOleObject); <br>        assert(lpTemp-&gt;m_lpOleObject); <br> <br>        lpTemp-&gt;m_sizel = lpSite-&gt;m_sizel; <br>        if (pPointl) <br>                lpTemp-&gt;m_pointl = *pPointl; <br>        else <br>                lpTemp-&gt;m_pointl.x = lpTemp-&gt;m_pointl.y = 0; <br>        return lpTemp; <br>} <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::CDataXferObj <br>// <br>// Purpose: <br>// <br>//      Constructor for CDataXferObj <br>// <br>// Parameters: <br>// <br>//      CSimpleDoc FAR *lpDoc   - Pointer to CSimpleDoc <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CDataXferObj::CDataXferObj (void) <br>{ <br>        // clear the reference count <br>        m_nCount = 0; <br> <br>        m_lpObjStorage = NULL; <br>        m_lpOleObject = NULL; <br>        m_sizel.cx = m_sizel.cy = 0; <br>        m_pointl.x = m_pointl.y = 0; <br>} <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::~CDataXferObj <br>// <br>// Purpose: <br>// <br>//      Destructor for CDataXferObj <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                                Location <br>// <br>//      OutputDebugString                       Windows API <br>//      IOleObject::Release                     Object <br>//      IStorage::Release                       OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CDataXferObj::~CDataXferObj () <br>{ <br>        OutputDebugString ("In CDataXferObj's Destructor \r\n"); <br> <br>        if (m_lpOleObject) <br>           { <br>           m_lpOleObject-&gt;Release(); <br>           m_lpOleObject = NULL; <br> <br>           // Release the storage for this object <br>           m_lpObjStorage-&gt;Release(); <br>           m_lpObjStorage = NULL; <br>           } <br>} <br> <br> <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Used for interface negotiation of the CDataXferObj instance <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   A reference to the interface that is <br>//                              being queried. <br>// <br>//      LPVOID FAR* ppvObj  -   An out parameter to return a pointer to <br>//                              the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK            -   The interface is supported. <br>//      E_NOINTERFACE   -   The interface is not supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      IsEqualIID                  OLE API <br>//                   OLE API <br>//      CDataXferObj::AddRef        DXFEROBJ.CPP <br>// <br>// Comments: <br>// <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDataXferObj::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In CDataXferObj::QueryInterface\r\n"); <br> <br>        if ( riid == IID_IUnknown || riid == IID_IDataObject) <br>                { <br>                AddRef(); <br>                *ppvObj = this; <br>                return NOERROR; <br>                } <br> <br>        // unknown interface requested <br>        *ppvObj = NULL;     // must set out pointer parameters to NULL <br>        return E_NOINTERFACE; <br>} <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::AddRef <br>// <br>// Purpose: <br>// <br>//      Increments the reference count of the CDataXferObj instance <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the object <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CDataXferObj::AddRef() <br>{ <br>        OutputDebugString("In CDataXferObj::AddRef\r\n"); <br> <br>        return ++m_nCount; <br>} <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count of the CDataXferObj object <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the object. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CDataXferObj::Release() <br>{ <br>        OutputDebugString("In CDataXferObj::Release\r\n"); <br> <br>        if (--m_nCount == 0) { <br>                delete this; <br>                return 0; <br>        } <br>        return m_nCount; <br>} <br> <br> <br>/******************************************************************** <br>** This IDataObject implementation is used for data transfer. <br>** <br>** The following methods are NOT supported for data transfer: <br>**      IDataObject::SetData    -- return E_NOTIMPL <br>**      IDataObject::DAdvise    -- return OLE_E_ADVISENOTSUPPORTED <br>**                 ::DUnadvise <br>**                 ::EnumDAdvise <br>**      IDataObject::GetCanonicalFormatEtc -- return E_NOTIMPL <br>**                      (NOTE: must set pformatetcOut-&gt;ptd = NULL) <br>*********************************************************************/ <br> <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::QueryGetData <br>// <br>// Purpose: <br>// <br>//      Called to determine if our object supports a particular <br>//      FORMATETC. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc  - Pointer to the FORMATETC being queried for. <br>// <br>// Return Value: <br>// <br>//      DV_E_FORMATETC    - The FORMATETC is not supported <br>//      S_OK              - The FORMATETC is supported. <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>//      we support the following formats: <br>//          "Embedded Object" <br>//          "Object Descriptor" <br>//          CF_METAFILEPICT <br>// <br>//******************************************************************** <br>STDMETHODIMP CDataXferObj::QueryGetData (LPFORMATETC pformatetc) <br>{ <br>        SCODE sc = DV_E_FORMATETC; <br> <br>        OutputDebugString("In CDataXferObj::QueryGetData\r\n"); <br> <br>        // check the validity of the formatetc. <br> <br>        if ( (pformatetc-&gt;cfFormat == g_cfEmbeddedObject) &amp;&amp; <br>                 (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetc-&gt;tymed == TYMED_ISTORAGE) ) <br>                sc = S_OK; <br> <br>        else if ( (pformatetc-&gt;cfFormat == g_cfObjectDescriptor) &amp;&amp; <br>                 (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetc-&gt;tymed == TYMED_HGLOBAL) ) <br>                sc = S_OK; <br> <br>        else if ( (pformatetc-&gt;cfFormat == CF_METAFILEPICT) &amp;&amp; <br>                 (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetc-&gt;tymed == TYMED_MFPICT) ) <br>                sc = S_OK; <br> <br>        return sc; <br>} <br> <br> <br>STDMETHODIMP CDataXferObj::EnumFormatEtc( <br>                DWORD dwDirection, <br>                LPENUMFORMATETC FAR* ppenumFormatEtc <br>) <br>{ <br>        SCODE sc = E_NOTIMPL; <br> <br>        OutputDebugString("In CDataXferObj::EnumFormatEtc\r\n"); <br>        *ppenumFormatEtc = NULL; <br> <br>        if (dwDirection == DATADIR_GET) { <br>                *ppenumFormatEtc = OleStdEnumFmtEtc_Create( <br>                                sizeof(s_arrGetFmtEtcs)/sizeof(s_arrGetFmtEtcs[0]), <br>                                s_arrGetFmtEtcs); <br>                if (*ppenumFormatEtc == NULL) <br>                        sc = E_OUTOFMEMORY; <br>                else <br>                        sc = S_OK; <br>        } <br>        return sc; <br>} <br> <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::GetData <br>// <br>// Purpose: <br>// <br>//      Returns the data in the format specified in pformatetcIn. <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetcIn    -   The format requested by the caller <br>// <br>//      LPSTGMEDIUM pmedium         -   The medium requested by the caller <br>// <br>// Return Value: <br>// <br>//      DV_E_FORMATETC    - Format not supported <br>//      S_OK                - Success <br>// <br>// Function Calls: <br>//      Function                        Location <br>// <br>//      OutputDebugString               Windows API <br>//      OleStdGetOleObjectData          OLESTD API <br>//      OleStdGetMetafilePictFromOleObject OLESTD API <br>//                       OLE API <br>// <br>// Comments: <br>//      we support GetData for the following formats: <br>//          "Embedded Object" <br>//          "Object Descriptor" <br>//          CF_METAFILEPICT <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDataXferObj::GetData ( <br>                LPFORMATETC pformatetcIn, <br>                LPSTGMEDIUM pmedium <br>) <br>{ <br>        SCODE sc = DV_E_FORMATETC; <br> <br>        OutputDebugString("In CDataXferObj::GetData\r\n"); <br> <br>        // we must set all out pointer parameters to NULL. */ <br>        pmedium-&gt;tymed = TYMED_NULL; <br>        pmedium-&gt;pUnkForRelease = NULL;    // we transfer ownership to caller <br>        pmedium-&gt;hGlobal = NULL; <br> <br>        // Check the FORMATETC and fill pmedium if valid. <br>        if ( (pformatetcIn-&gt;cfFormat == g_cfEmbeddedObject) &amp;&amp; <br>                 (pformatetcIn-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetcIn-&gt;tymed == TYMED_ISTORAGE) ) { <br>                 LPPERSISTSTORAGE pPersistStorage; <br> <br>                 /* render CF_EMBEDDEDOBJECT by asking the object to save <br>                 **    into a temporary, DELETEONRELEASE IStorage allocated by us. <br>                 */ <br>                 m_lpOleObject-&gt;QueryInterface( <br>                                 IID_IPersistStorage, (LPVOID FAR*)&amp;pPersistStorage); <br>                 assert(pPersistStorage); <br>                 HRESULT hrErr = OleStdGetOleObjectData( <br>                                        pPersistStorage, <br>                                        pformatetcIn, <br>                                        pmedium, <br>                                        FALSE   /* fUseMemory -- (use file-base stg) */ <br>                 ); <br>                 pPersistStorage-&gt;Release(); <br>                 sc =  hrErr ; <br> <br>        } else if ( (pformatetcIn-&gt;cfFormat == g_cfObjectDescriptor) &amp;&amp; <br>                 (pformatetcIn-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetcIn-&gt;tymed == TYMED_HGLOBAL) ) { <br> <br>                 // render CF_OBJECTDESCRIPTOR data <br>                 pmedium-&gt;hGlobal = OleStdGetObjectDescriptorDataFromOleObject( <br>                                 m_lpOleObject, <br>                                 //@@WTK WIN32, UNICODE <br>                                 //"Simple OLE 2.0 Container",    // string to identify source <br>                                 OLESTR("Simple OLE 2.0 Container"),    // string to identify source <br>                                 DVASPECT_CONTENT, <br>                                 m_pointl, <br>                                 (LPSIZEL)&amp;m_sizel <br>                        ); <br>                 if (! pmedium-&gt;hGlobal) <br>                         sc = E_OUTOFMEMORY; <br>                 else { <br>                         pmedium-&gt;tymed = TYMED_HGLOBAL; <br>                         sc = S_OK; <br>                 } <br> <br>        } else if ( (pformatetcIn-&gt;cfFormat == CF_METAFILEPICT) &amp;&amp; <br>                 (pformatetcIn-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetcIn-&gt;tymed == TYMED_MFPICT) ) { <br> <br>                 // render CF_METAFILEPICT by drawing the object into a metafile DC <br>                 pmedium-&gt;hGlobal = OleStdGetMetafilePictFromOleObject( <br>                                 m_lpOleObject, DVASPECT_CONTENT, NULL, pformatetcIn-&gt;ptd); <br>                 if (! pmedium-&gt;hGlobal) <br>                         sc = E_OUTOFMEMORY; <br>                 else { <br>                         pmedium-&gt;tymed = TYMED_MFPICT; <br>                         sc = S_OK; <br>                 } <br>        } <br> <br>        return  sc ; <br>} <br> <br>//********************************************************************** <br>// <br>// CDataXferObj::GetDataHere <br>// <br>// Purpose: <br>// <br>//      Called to get a data format in a caller supplied location <br>// <br>// Parameters: <br>// <br>//      LPFORMATETC pformatetc  - FORMATETC requested <br>// <br>//      LPSTGMEDIUM pmedium     - Medium to return the data <br>// <br>// Return Value: <br>// <br>//      DATA_E_FORMATETC    - We don't support the requested format <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      OleStdGetOleObjectData      OLESTD API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CDataXferObj::GetDataHere ( <br>                LPFORMATETC pformatetc, <br>                LPSTGMEDIUM pmedium <br>) <br>{ <br>        SCODE sc = DV_E_FORMATETC; <br> <br>        OutputDebugString("In CDataXferObj::GetDataHere\r\n"); <br> <br>        // NOTE: pmedium is an IN parameter. we should NOT set <br>        //           pmedium-&gt;pUnkForRelease to NULL <br> <br>        // Check the FORMATETC and fill pmedium if valid. <br>        if ( (pformatetc-&gt;cfFormat == g_cfEmbeddedObject) &amp;&amp; <br>                 (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>                 (pformatetc-&gt;tymed == TYMED_ISTORAGE) ) { <br>                 LPPERSISTSTORAGE pPersistStorage; <br> <br>                 /* render CF_EMBEDDEDOBJECT by asking the object to save <br>                 **    into the IStorage allocated by the caller. <br>                 */ <br>                 m_lpOleObject-&gt;QueryInterface( <br>                                 IID_IPersistStorage, (LPVOID FAR*)&amp;pPersistStorage); <br>                 assert(pPersistStorage); <br>                 HRESULT hrErr = OleStdGetOleObjectData( <br>                                 pPersistStorage, pformatetc, pmedium,0 /*fUseMemory--N/A*/ ); <br>                 pPersistStorage-&gt;Release(); <br>                 sc =  hrErr ; <br>        } <br>        return  sc ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

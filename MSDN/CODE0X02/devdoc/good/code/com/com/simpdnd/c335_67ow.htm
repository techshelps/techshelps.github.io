<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context350"></a>APP.CPP</h2>
<pre><code>//********************************************************************** <br>// File name: app.cpp <br>// <br>//    Implementation file for the CSimpleApp Class <br>// <br>// Functions: <br>// <br>//    See app.h for a list of member functions. <br>// <br>// Copyright 1992 - 1998 Microsoft Corporation. All rights reserved. <br>//********************************************************************** <br> <br>#include "pre.h" <br>#include "iocs.h" <br>#include "ias.h" <br>#include "app.h" <br>#include "site.h" <br>#include "doc.h" <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::CSimpleApp() <br>// <br>// Purpose: <br>// <br>//      Constructor for CSimpleApp <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      SetRectEmpty                Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br>CSimpleApp::CSimpleApp() <br>{ <br>        OutputDebugString("In CSimpleApp's Constructor \r\n"); <br> <br>        // clear members <br>        m_hAppWnd = NULL; <br>        m_hInst = NULL; <br>        m_lpDoc = NULL; <br> <br>        // clear flags <br>        m_fInitialized = FALSE; <br>        m_fOleStdInit = FALSE; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::~CSimpleApp() <br>// <br>// Purpose: <br>// <br>//      Destructor for CSimpleApp Class. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//      OleUninitialize             OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>CSimpleApp::~CSimpleApp() <br>{ <br>        OutputDebugString("In CSimpleApp's Destructor\r\n"); <br> <br>        // need to uninit the library... <br>        if (m_fOleStdInit) <br>                OleStdUninitialize(); <br>        if (m_fInitialized) <br>                OleUninitialize(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::DestroyDocs() <br>// <br>// Purpose: <br>// <br>//      Destroys all of the open documents in the application (Only one <br>//      since this is an SDI app, but could easily be modified to <br>//      support MDI). <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>void CSimpleApp::DestroyDocs() <br>{ <br>        CStabilize stabilize(this); <br>        m_lpDoc-&gt;Close();   // we have only 1 document <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::QueryInterface <br>// <br>// Purpose: <br>// <br>//      Used for interface negotiation at the Frame level. <br>// <br>// Parameters: <br>// <br>//      REFIID riid         -   A reference to the interface that is <br>//                              being queried. <br>// <br>//      LPVOID FAR* ppvObj  -   An out parameter to return a pointer to <br>//                              the interface. <br>// <br>// Return Value: <br>// <br>//      S_OK    -   The interface is supported. <br>//      S_FALSE -   The interface is not supported <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>//                   OLE API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP CSimpleApp::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>        OutputDebugString("In CSimpleApp::QueryInterface\r\n"); <br> <br>        *ppvObj = NULL;     // must set out pointer parameters to NULL <br> <br>        // Not a supported interface <br>        return E_NOINTERFACE; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::AddRef <br>// <br>// Purpose: <br>// <br>//      Adds to the reference count at the Application level. <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the application. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//      Due to the reference counting model that is used in this <br>//      implementation, this reference count is the sum of the <br>//      reference counts on all interfaces of all objects open <br>//      in the application. <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpleApp::AddRef() <br>{ <br>        OutputDebugString("In CSimpleApp::AddRef\r\n"); <br>        return SafeAddRef(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::Release <br>// <br>// Purpose: <br>// <br>//      Decrements the reference count at this level <br>// <br>// Parameters: <br>// <br>//      None <br>// <br>// Return Value: <br>// <br>//      ULONG   -   The new reference count of the application. <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      OutputDebugString           Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>STDMETHODIMP_(ULONG) CSimpleApp::Release() <br>{ <br>        OutputDebugString("In CSimpleApp::Release\r\n"); <br> <br>        return SafeRelease(); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::fInitApplication <br>// <br>// Purpose: <br>// <br>//      Initializes the application <br>// <br>// Parameters: <br>// <br>//      HANDLE hInstance    -   Instance handle of the application. <br>// <br>// Return Value: <br>// <br>//      TRUE    -   Application was successfully initialized. <br>//      FALSE   -   Application could not be initialized <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      LoadIcon                    Windows API <br>//      LoadCursor                  Windows API <br>//      GetStockObject              Windows API <br>//      RegisterClass               Windows API <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>BOOL CSimpleApp::fInitApplication(HANDLE hInstance) <br>{ <br>        WNDCLASS  wc; <br>        CStabilize stabilize(this); <br> <br>        // Fill in window class structure with parameters that describe the <br>        // main window. <br> <br>        wc.style = NULL;                    // Class style(s). <br>        wc.lpfnWndProc = MainWndProc;       // Function to retrieve messages for <br>                                                                                // windows of this class. <br>        wc.cbClsExtra = 0;                  // No per-class extra data. <br>        wc.cbWndExtra = 0;                  // No per-window extra data. <br>        wc.hInstance = (HINSTANCE) hInstance; // Application that owns the class. <br>        wc.hIcon = LoadIcon((HINSTANCE) hInstance,"SimpDnd"); <br>        wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>        wc.lpszMenuName =  "SIMPLEMENU";    // Name of menu resource in .RC file. <br>        wc.lpszClassName = "SimpDndAppWClass";  // Name used in CreateWindow call. <br> <br>        if (!RegisterClass(&amp;wc)) <br>                return FALSE; <br> <br>        wc.style = CS_DBLCLKS;              // Class style(s). allow DBLCLK's <br>        wc.lpfnWndProc = DocWndProc;        // Function to retrieve messages for <br>                                                                                // windows of this class. <br>        wc.cbClsExtra = 0;                  // No per-class extra data. <br>        wc.cbWndExtra = 0;                  // No per-window extra data. <br>        wc.hInstance = (HINSTANCE) hInstance; // Application that owns the class. <br>        wc.hIcon = NULL; <br>        wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>        wc.lpszMenuName =  NULL; <br>        wc.lpszClassName = "SimpDndDocWClass"; // Name used in CreateWindow call. <br> <br>        // Register the window class and return success/failure code. <br> <br>        return (RegisterClass(&amp;wc)); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::fInitInstance <br>// <br>// Purpose: <br>// <br>//      Instance initialization. <br>// <br>// Parameters: <br>// <br>//      HANDLE hInstance    -   App. Instance Handle. <br>// <br>//      int nCmdShow        -   Show parameter from WinMain <br>// <br>// Return Value: <br>// <br>//      TRUE    -   Initialization Successful <br>//      FALSE   -   Initialization Failed. <br>// <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CreateWindow                Windows API <br>//      ShowWindow                  Windows API <br>//      UpdateWindow                Windows API <br>//      OleBuildVersion             OLE API <br>//      OleInitialize               OLE API <br>// <br>// Comments: <br>// <br>//      Note that successful Initalization of the OLE libraries <br>//      is remembered so the UnInit is only called if needed. <br>// <br>//******************************************************************** <br> <br>BOOL CSimpleApp::fInitInstance (HANDLE hInstance, int nCmdShow) <br>{ <br>        CStabilize stabilize(this); <br>        DWORD dwVer = OleBuildVersion(); <br>        LPMALLOC lpMalloc = NULL; <br> <br>        // check to see if we are compatible with this version of the libraries <br>        if (HIWORD(dwVer) != rmm || LOWORD(dwVer) &lt; rup) { <br>#ifdef _DEBUG <br>                OutputDebugString("WARNING: Incompatible OLE library version\r\n"); <br>#else <br>                return FALSE; <br>#endif <br>        } <br> <br>        if (SUCCEEDED(OleInitialize(NULL))) <br>        { <br>            m_fInitialized = TRUE; <br>        } <br> <br>        m_fOleStdInit = OleStdInitialize((HINSTANCE) hInstance); <br>        OleDbgSetDbgLevel(10); <br> <br>        m_hInst = (HINSTANCE) hInstance; <br> <br>        // Create the "application" windows <br>        m_hAppWnd = CreateWindow ("SimpDndAppWClass", <br>                                                          "Simple OLE 2.0 Drag/Drop Container", <br>                                                          WS_OVERLAPPEDWINDOW, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          CW_USEDEFAULT, <br>                                                          NULL, <br>                                                          NULL, <br>                                                          (HINSTANCE) hInstance, <br>                                                          NULL); <br> <br>        if (!m_hAppWnd) <br>                return FALSE; <br> <br>        // delay before dragging should start, in milliseconds <br>        m_nDragDelay = GetProfileInt( <br>                        "windows", <br>                        "DragDelay", <br>                        DD_DEFDRAGDELAY <br>        ); <br> <br>        // minimum distance (radius) before drag should start, in pixels <br>        m_nDragMinDist = GetProfileInt( <br>                        "windows", <br>                        "DragMinDist", <br>                        DD_DEFDRAGMINDIST <br>        ); <br> <br>        // delay before scrolling, in milliseconds <br>        m_nScrollDelay = GetProfileInt( <br>                        "windows", <br>                        "DragScrollDelay", <br>                        DD_DEFSCROLLDELAY <br>        ); <br> <br>        // inset-width of the hot zone, in pixels <br>        m_nScrollInset = GetProfileInt( <br>                        "windows", <br>                        "DragScrollInset", <br>                        DD_DEFSCROLLINSET <br>        ); <br> <br>        // scroll interval, in milliseconds <br>        m_nScrollInterval = GetProfileInt( <br>                        "windows", <br>                        "DragScrollInterval", <br>                        DD_DEFSCROLLINTERVAL <br>        ); <br> <br>        ShowWindow (m_hAppWnd, nCmdShow); <br>        UpdateWindow (m_hAppWnd); <br> <br>        return m_fInitialized &amp;&amp; m_fOleStdInit; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::lCommandHandler <br>// <br>// Purpose: <br>// <br>//      Handles the processing of WM_COMMAND. <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_COMMAND) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                                    Location <br>// <br>//      IOleObject::DoVerb                          Object <br>//      GetClientRect                               Windows API <br>//      MessageBox                                  Windows API <br>//      DialogBox                                   Windows API <br>//      MakeProcInstance                            Windows API <br>//      FreeProcInstance                            Windows API <br>//      SendMessage                                 Windows API <br>//      DefWindowProc                               Windows API <br>//      CSimpleDoc::InsertObject                    DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpleApp::lCommandHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        RECT rect; <br>        CStabilize stabilize(this); <br> <br>        // see if the command is a verb selections <br>        //@@WTK WIN32, UNICODE <br>        //if (wParam &gt;= IDM_VERB0) <br>        if (LOWORD(wParam) &gt;= IDM_VERB0) <br>                { <br>                // get the rectangle of the object <br>                m_lpDoc-&gt;m_lpSite-&gt;GetObjRect(&amp;rect); <br> <br>                m_lpDoc-&gt;m_lpSite-&gt;m_lpOleObject-&gt;DoVerb( <br>                                LOWORD(wParam) - IDM_VERB0, NULL, <br>                                &amp;m_lpDoc-&gt;m_lpSite-&gt;m_OleClientSite, -1, <br>                                m_lpDoc-&gt;m_hDocWnd, &amp;rect); <br>                } <br>        else <br>                { <br>                //@@WTK WIN32, UNICODE <br>                //switch (wParam) { <br>                switch (LOWORD(wParam)) { <br>                        // bring up the About box <br>                        case IDM_ABOUT: <br>                                { <br> <br>                                DialogBox(m_hInst,               // current instance <br>                                        "AboutBox",                  // resource to use <br>                                        m_hAppWnd,                   // parent handle <br>                                        (DLGPROC) About);                // About() instance address <br> <br>                                break; <br>                                } <br> <br>                        // bring up the InsertObject Dialog <br>                        case IDM_INSERTOBJECT: <br>                                m_lpDoc-&gt;InsertObject(); <br>                                break; <br> <br>                        // Copy the object to the Clipboard <br>                        case IDM_COPY: <br>                                m_lpDoc-&gt;CopyObjectToClip(); <br>                                break; <br> <br>                        // exit the application <br>                        case IDM_EXIT: <br>                                SendMessage(hWnd, WM_SYSCOMMAND, SC_CLOSE, 0L); <br>                                break; <br> <br>                        case IDM_NEW: <br>                                m_lpDoc-&gt;Close(); <br>                                m_lpDoc = NULL; <br>                                lCreateDoc(hWnd, 0, 0, 0); <br>                                break; <br> <br>                        default: <br>                                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                        }   // end of switch <br>                }  // end of else <br>        return NULL; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::lSizeHandler <br>// <br>// Purpose: <br>// <br>//      Handles the WM_SIZE message <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_SIZE) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      LONG    -   returned from the "document" resizing <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      GetClientRect               Windows API <br>//      CSimpleDoc::lResizeDoc      DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpleApp::lSizeHandler (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        RECT rect; <br> <br>        CStabilize stabilize(this); <br>        GetClientRect(m_hAppWnd, &amp;rect); <br>        return m_lpDoc-&gt;lResizeDoc(&amp;rect); <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::lCreateDoc <br>// <br>// Purpose: <br>// <br>//      Handles the creation of a document. <br>// <br>// Parameters: <br>// <br>//      HWND hWnd       -   Handle to the application Window <br>// <br>//      UINT message    -   message (always WM_CREATE) <br>// <br>//      WPARAM wParam   -   Same as passed to the WndProc <br>// <br>//      LPARAM lParam   -   Same as passed to the WndProc <br>// <br>// Return Value: <br>// <br>//      NULL <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      GetClientRect               Windows API <br>//      CSimpleDoc::CSimpleDoc      DOC.CPP <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>long CSimpleApp::lCreateDoc (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>        RECT rect; <br> <br>        CStabilize stabilize(this); <br>        GetClientRect(hWnd, &amp;rect); <br> <br>        m_lpDoc = CSimpleDoc::Create(this, &amp;rect, hWnd); <br> <br>        return NULL; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::HandleAccelerators <br>// <br>// Purpose: <br>// <br>//      To properly handle accelerators in the Message Loop <br>// <br>// Parameters: <br>// <br>//      LPMSG lpMsg -   A pointer to the message structure. <br>// <br>// Return Value: <br>// <br>//      TRUE    -   The accelerator was handled <br>//      FALSE   -   The accelerator was not handled <br>// <br>// Function Calls: <br>//      Function                                        Location <br>// <br>// Comments: <br>// <br>//******************************************************************** <br> <br>BOOL CSimpleApp::HandleAccelerators(LPMSG lpMsg) <br>{ <br>        BOOL retval = FALSE; <br> <br>        // we do not have any accelerators <br> <br>        return retval; <br>} <br> <br>//********************************************************************** <br>// <br>// CSimpleApp::PaintApp <br>// <br>// Purpose: <br>// <br>//      Handles the painting of the doc window. <br>// <br>// <br>// Parameters: <br>// <br>//      HDC hDC -   hDC to the Doc Window. <br>// <br>// Return Value: <br>// <br>//      None <br>// <br>// Function Calls: <br>//      Function                    Location <br>// <br>//      CSimpleDoc::PaintDoc        DOC.CPP <br>// <br>// Comments: <br>// <br>//      This is an app level function in case we want to do palette <br>//      management. <br>// <br>//******************************************************************** <br> <br>void CSimpleApp::PaintApp (HDC hDC) <br>{ <br>        CStabilize stabilize(this); <br>        // at this level, we could enumerate through all of the <br>        // visible objects in the application, so that a palette <br>        // that best fits all of the objects can be built. <br> <br>        // This app is designed to take on the same palette <br>        // functionality that was provided in OLE 1.0, the palette <br>        // of the last object drawn is realized.  Since we only <br>        // support one object at a time, it shouldn't be a big <br>        // deal. <br> <br>        // if we supported multiple documents, we would enumerate <br>        // through each of the open documents and call paint. <br> <br>        if (m_lpDoc) <br>                m_lpDoc-&gt;PaintDoc(hDC); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLYLINE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context571"></a>POLYLINE.CPP</h2>
<pre><code>/* <br> * POLYLINE.CPP <br> * Polyline Component Object Chapter 8 <br> * <br> * Implementation of the CPolyline class that we expose as a <br> * component object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "polyline.h" <br> <br> <br>/* <br> * CPolyline:CPolyline <br> * CPolyline::~CPolyline <br> * <br> * Constructor Parameters: <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object is <br> *                  destroyed. <br> *  hInst           HINSTANCE of the application we're in. <br> */ <br> <br>CPolyline::CPolyline(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy <br>    , HINSTANCE hInst) <br>    { <br>    m_hWnd=NULL; <br>    m_hInst=hInst; <br> <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br>    m_fDirty=FALSE; <br> <br>    m_pImpIPolyline=NULL; <br>    m_pImpIConnPtCont=NULL; <br> <br>    m_pAdv=NULL; <br>    m_pConnPt=NULL; <br> <br>    //CHAPTER8MOD <br>    m_pST  =NULL; <br>    m_cf   =0; <br>    m_clsID=CLSID_Polyline8; <br> <br>    m_pIStorage=NULL; <br>    m_pIStream =NULL; <br> <br>    m_pImpIPersistStorage=NULL; <br>    m_pImpIPersistStreamInit=NULL; <br>    //End CHAPTER8MOD <br> <br>    return; <br>    } <br> <br> <br>CPolyline::~CPolyline(void) <br>    { <br>    //CHAPTER8MOD <br>    if (NULL!=m_pST) <br>        delete m_pST; <br> <br>    DeleteInterfaceImp(m_pImpIPersistStreamInit); <br>    DeleteInterfaceImp(m_pImpIPersistStorage); <br>    ReleaseInterface(m_pIStream); <br>    ReleaseInterface(m_pIStorage); <br>    //End CHAPTER8MOD <br> <br>    DeleteInterfaceImp(m_pImpIConnPtCont); <br>    DeleteInterfaceImp(m_pImpIPolyline); <br> <br>    ReleaseInterface(m_pAdv); <br>    ReleaseInterface(m_pConnPt); <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPolyline::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CPolyline that's prone to <br> *  failure that we also use internally before exposing the <br> *  object outside this DLL. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPolyline::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    //CHAPTER8MOD <br>    m_pST=new CStringTable(m_hInst); <br> <br>    if (!m_pST-&gt;Init(IDS_POLYLINEMIN, IDS_POLYLINEMAX)) <br>        return FALSE; <br> <br>    m_cf=RegisterClipboardFormat(PSZ(IDS_STORAGEFORMAT)); <br> <br>    m_pImpIPersistStorage=new CImpIPersistStorage(this, pIUnknown); <br> <br>    if (NULL==m_pImpIPersistStorage) <br>        return FALSE; <br> <br>    m_pImpIPersistStreamInit=new CImpIPersistStreamInit(this <br>        , pIUnknown); <br> <br>    if (NULL==m_pImpIPersistStreamInit) <br>        return FALSE; <br>    //End CHAPTER8MOD <br> <br>    m_pImpIPolyline=new CImpIPolyline(this, pIUnknown); <br> <br>    if (NULL==m_pImpIPolyline) <br>        return FALSE; <br> <br>    m_pImpIConnPtCont=new CImpIConnPtCont(this, pIUnknown); <br> <br>    if (NULL==m_pImpIConnPtCont) <br>        return FALSE; <br> <br>    m_pConnPt=new CConnectionPoint(this); <br> <br>    if (NULL==m_pConnPt) <br>        return FALSE; <br> <br>    m_pConnPt-&gt;AddRef();    //Reversed in destructor <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolyline::QueryInterface <br> * CPolyline::AddRef <br> * CPolyline::Release <br> */ <br> <br>STDMETHODIMP CPolyline::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IConnectionPointContainer==riid) <br>        *ppv=m_pImpIConnPtCont; <br> <br>    //CHAPTER8MOD <br>    if (IID_IPolyline8==riid) <br>        *ppv=m_pImpIPolyline; <br> <br>    if (IID_IPersistStorage==riid) <br>        *ppv=m_pImpIPersistStorage; <br> <br>    if (IID_IPersist==riid || IID_IPersistStream==riid <br>        || IID_IPersistStreamInit==riid) <br>        *ppv=m_pImpIPersistStreamInit; <br>    //End CHAPTER8MOD <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolyline::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolyline::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolyline::RectConvertMappings <br> * <br> * Purpose: <br> *  Converts the contents of a rectangle from device (MM_TEXT) or <br> *  HIMETRIC to the other. <br> * <br> * Parameters: <br> *  pRect           LPRECT containing the rectangle to convert. <br> *  fToDevice       BOOL TRUE to convert from HIMETRIC to device, <br> *                  FALSE to convert device to HIMETRIC. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPolyline::RectConvertMappings(LPRECT pRect, BOOL fToDevice) <br>    { <br>    HDC      hDC; <br>    int      iLpx, iLpy; <br> <br>    if (NULL==pRect) <br>        return; <br> <br>    hDC=GetDC(NULL); <br>    iLpx=GetDeviceCaps(hDC, LOGPIXELSX); <br>    iLpy=GetDeviceCaps(hDC, LOGPIXELSY); <br>    ReleaseDC(NULL, hDC); <br> <br>    if (fToDevice) <br>        { <br>        pRect-&gt;left=MulDiv(iLpx, pRect-&gt;left, HIMETRIC_PER_INCH); <br>        pRect-&gt;top =MulDiv(iLpy, pRect-&gt;top , HIMETRIC_PER_INCH); <br> <br>        pRect-&gt;right =MulDiv(iLpx, pRect-&gt;right, HIMETRIC_PER_INCH); <br>        pRect-&gt;bottom=MulDiv(iLpy, pRect-&gt;bottom,HIMETRIC_PER_INCH); <br>        } <br>    else <br>        { <br>        pRect-&gt;left=MulDiv(pRect-&gt;left, HIMETRIC_PER_INCH, iLpx); <br>        pRect-&gt;top =MulDiv(pRect-&gt;top , HIMETRIC_PER_INCH, iLpy); <br> <br>        pRect-&gt;right =MulDiv(pRect-&gt;right, HIMETRIC_PER_INCH, iLpx); <br>        pRect-&gt;bottom=MulDiv(pRect-&gt;bottom,HIMETRIC_PER_INCH, iLpy); <br>        } <br> <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

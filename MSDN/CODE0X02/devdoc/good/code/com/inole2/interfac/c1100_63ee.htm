<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPERFILE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1166"></a>IPERFILE.CPP</h2>
<pre><code>/* <br> * IPERFILE.CPP <br> * <br> * Template IPersistFile interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iperfile.h" <br> <br> <br>/* <br> * CImpIPersistFile:CImpIPersistFile <br> * CImpIPersistFile::~CImpIPersistFile <br> * <br> * Constructor Parameters: <br> *  pObj            LPVOID pointing to the object we live in. <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> */ <br> <br>CImpIPersistFile::CImpIPersistFile(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br> <br>CImpIPersistFile::~CImpIPersistFile(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::QueryInterface <br> * CImpIPersistFile::AddRef <br> * CImpIPersistFile::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPersistFile. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistFile::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistFile::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::GetClassID <br> * <br> * Purpose: <br> *  Returns the CLSID of the file represented by this interface. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store our CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::GetClassID(LPCLSID pClsID) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::IsDirty <br> * <br> * Purpose: <br> *  Tells the caller if we have made changes to this object since <br> *  it was loaded or initialized new. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Contains S_OK if we ARE dirty, S_FALSE if <br> *                  NOT dirty. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::IsDirty(void) <br>    { <br>    return S_FALSE; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::Load <br> * <br> * Purpose: <br> *  Asks the server to load the document for the given filename. <br> * <br> * Parameters: <br> *  pszFile         LPCSTR of the filename to load. <br> *  grfMode         DWORD flags to use when opening the file. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::Load(LPCSTR pszFile, DWORD grfMode) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::Save <br> * <br> * Purpose: <br> *  Instructs the server to write the current file into a new <br> *  filename, possibly then using that filename as the current one. <br> * <br> * Parameters: <br> *  pszFile         LPCSTR of the file into which we save.  If NULL, <br> *                  this means save the current file. <br> *  fRemember       BOOL indicating if we're to use this filename as <br> *                  the current file now (Save As instead of Save <br> *                  Copy As). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::Save(LPCSTR pszFile, BOOL fRemember) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::SaveCompleted <br> * <br> * Purpose: <br> *  Informs us that the operation that called Save is now finished <br> *  and we can access the file again. <br> * <br> * Parameters: <br> *  pszFile         LPCSTR of the file in which we can start <br> *                  writing again. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::SaveCompleted(LPCSTR pszFile) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::GetCurFile <br> * <br> * Purpose: <br> *  Returns the current filename. <br> * <br> * Parameters: <br> *  ppszFile        LPTSTR * into which we store a pointer to <br> *                  the filename that should be allocated with the <br> *                  shared IMalloc. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::GetCurFile(LPTSTR *ppszFile) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

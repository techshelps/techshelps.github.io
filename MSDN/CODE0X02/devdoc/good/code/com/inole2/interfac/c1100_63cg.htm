<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ILOCKBYT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1150"></a>ILOCKBYT.CPP</h2>
<pre><code>/* <br> * ILOCKBYT.H <br> * <br> * Template ILockBytes interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ilockbyt.h" <br> <br> <br> <br>/* <br> * CImpILockBytes::CImpILockBytes <br> * CImpILockBytes::~CImpILockBytes <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpILockBytes::CImpILockBytes(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpILockBytes::~CImpILockBytes(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpILockBytes::QueryInterface <br> * CImpILockBytes::AddRef <br> * CImpILockBytes::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpILockBytes. <br> */ <br> <br>STDMETHODIMP CImpILockBytes::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpILockBytes::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpILockBytes::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::ReadAt <br> * <br> * Purpose: <br> *  Reads bytes from the byte array starting at a specific position. <br> * <br> * Parameters: <br> *  ulOffset        ULARGE_INTEGER specifying the offset at which <br> *                  to read. <br> *  pv              void HUGEP * into which to read the information. <br> *  cb              ULONG number of bytes to read <br> *  pcbRead         ULONG * in which to store the number of bytes <br> *                  read <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP ReadAt(ULARGE_INTEGER ulOffset, VOID HUGEP *pv <br>    , ULONG cb, ULONG *pcbRead) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::WriteAt <br> * <br> * Purpose: <br> *  Writes bytes into the byte array starting at a specific position. <br> * <br> * Parameters: <br> *  ulOffset        ULARGE_INTEGER specifying the offset at which <br> *                  to write. <br> *  pv              void HUGEP * to the information to write. <br> *  cb              ULONG number of bytes to write <br> *  pcbWritten      ULONG * in which to store the number of bytes <br> *                  written. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP WriteAt(ULARGE_INTEGER ulOffset, VOID HUGEP *pv <br>    , ULONG cb, ULONG *pcbWritten) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::Flush <br> * <br> * Purpose: <br> *  Insures that any internal buffers are written to the underlying <br> *  storage. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP Flush(void) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::SetSize <br> * <br> * Purpose: <br> *  Changes the size of the byte array. <br> * <br> * Parameters: <br> *  cb              ULARGE_INTEGER specifying the size to set. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP SetSize(ULARGE_INTEGER cb) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::LockRegion <br> * <br> * Purpose: <br> *  Locks a range of bytes in the byte array. <br> * <br> * Parameters: <br> *  libOffset       ULARGE_INTEGER at which to start the lock. <br> *  cb              ULARGE_INTEGER number of bytes to lock. <br> *  dwLockType      DWORD the type of lock access. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb <br>    , DWORD dwLockType) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::UnlockRegion <br> * <br> * Purpose: <br> *  Unlocks a range of bytes in the byte array. <br> * <br> * Parameters: <br> *  libOffset       ULARGE_INTEGER at which to start the unlock. <br> *  cb              ULARGE_INTEGER number of bytes to unlock. <br> *  dwLockType      DWORD the type of lock access. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb <br>    , DWORD dwLockType) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpILockBytes::Stat <br> * <br> * Purpose: <br> *  Returns relevant statistics about the byte array. <br> * <br> * Parameters: <br> *  pstatstg        LPSTATSTG in which to store the statistics. <br> *  grfStatFlag     DWORD specifying the level of information <br> *                  requested. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP Stat(STATSTG *pstatstg, DWORD grfStatFlag) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICONTROL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1116"></a>ICONTROL.CPP</h2>
<pre><code>/* <br> * ICONTROL.CPP <br> * <br> * Template IOleControl interface implementation. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "icontrol.h" <br> <br> <br>/* <br> * CImpIOleControl::CImpIOleControl <br> * CImpIOleControl::~CImpIOleControl <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleControl::CImpIOleControl(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleControl::~CImpIOleControl(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleControl::QueryInterface <br> * CImpIOleControl::AddRef <br> * CImpIOleControl::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleControl. <br> */ <br> <br>STDMETHODIMP CImpIOleControl::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleControl::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleControl::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIOleControl::GetControlInfo <br> * <br> * Purpose: <br> *  Fills a CONTROLINFO structure containing information about <br> *  the controls mnemonics and other behavioral aspects. <br> * <br> * Parameters: <br> *  pCI             LPCONTROLINFO to the structure to fill <br> */ <br> <br>STDMETHODIMP CImpIOleControl::GetControlInfo(LPCONTROLINFO pCI) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br>/* <br> * CImpIOleControl::OnMnemonic <br> * <br> * Purpose: <br> *  Notifies the control that a mnemonic was activated. <br> * <br> * Parameters: <br> *  pMsg            LPMSG containing the message that matches one of <br> *                  the control's mnemonics.  The control uses this <br> *                  to distinguish which mnemonic was pressed. <br> */ <br> <br>STDMETHODIMP CImpIOleControl::OnMnemonic(LPMSG pMsg) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br>/* <br> * CImpIOleControl::OnAmbientPropertyChange <br> * <br> * Purpose: <br> *  Notifies the control that one or more of the container's ambient <br> *  properties changed. <br> * <br> * Parameters: <br> *  dispID          DISPID identifying the property, which can <br> *                  be DISPID_UNKNOWN indicating that more than <br> *                  one changed. <br> */ <br> <br>STDMETHODIMP CImpIOleControl::OnAmbientPropertyChange(DISPID dispid) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleControl::FreezeEvents <br> * <br> * Purpose: <br> *  Instructs the control to stop firing events or to continue <br> *  firing them. <br> * <br> * Parameters: <br> *  fFreeze         BOOL indicating to freeze (TRUE) or thaw (FALSE) <br> *                  events from this control. <br> */ <br> <br>STDMETHODIMP CImpIOleControl::FreezeEvents(BOOL fFreeze) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

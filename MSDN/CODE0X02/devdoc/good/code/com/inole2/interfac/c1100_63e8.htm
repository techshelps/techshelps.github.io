<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOLECONT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1160"></a>IOLECONT.CPP</h2>
<pre><code>/* <br> * IOLECONT.CPP <br> * <br> * Templace implementation of the IOleItemContainer interface. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iolecont.h" <br> <br> <br>/* <br> * CImpIOleItemContainer::CImpIOleItemContainer <br> * CImpIOleItemContainer::~CImpIOleItemContainer <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object controlling this interface. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleItemContainer::CImpIOleItemContainer(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleItemContainer::~CImpIOleItemContainer(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::QueryInterface <br> * CImpIOleItemContainer::AddRef <br> * CImpIOleItemContainer::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleItemContainer object. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleItemContainer::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleItemContainer::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::ParseDisplayName <br> * <br> * Purpose: <br> *  Inherited member of IParseDisplayName that takes a string name <br> *  and turns out a moniker for it. <br> * <br> * Parameters: <br> *  pbc             LPBC to the binding context <br> *  pszName         LPTSTR to the name to parse. <br> *  pchEaten        ULONG * into which to store how many <br> *                  characters we scanned in the display name. <br> *  ppmk            LPMONIKER * in which to return the moniker. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::ParseDisplayName(LPBC pbc <br>    , LPTSTR pszName, ULONG * pchEaten, LPMONIKER *ppmk) <br>    { <br>    *ppmk=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::EnumObjects <br> * <br> * Purpose: <br> *  Creates and returns an IEnumUnknown object that allows the <br> *  caller to walk through the objects in this continer thing. <br> * <br> * Parameters: <br> *  dwFlags         DWORD specifying what kind of objects to <br> *                  enumerate. <br> *  ppEnum          LPENUMUNKNOWN * into which to return the <br> *                  enumerator <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::EnumObjects(DWORD dwFlags <br>    , LPENUMUNKNOWN *ppEnum) <br>    { <br>    *ppEnum=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::LockContainer <br> * <br> * Purpose: <br> *  Establishes a lock on the container to prevent it from shutting <br> *  down outside of user control.  This is used to control the <br> *  lifetime of the container when it's used to update a link to an <br> *  embedded object within it.  If we're unlock and the user has not <br> *  taken control, we close. <br> * <br> * Parameters: <br> *  fLock           BOOL indicating a lock or unlock. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::LockContainer(BOOL fLock) <br>    { <br>    /* <br>     * This is pretty much the same implementation as <br>     * IClassFactory::LockServer, and we can use the same lock <br>     * count to accomplish our goal. <br>     */ <br> <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::GetObject <br> * <br> * Purpose: <br> *  Returns the requested interface pointer on an object in this <br> *  container. <br> * <br> * Parameters: <br> *  pszItem         LPTSTR to the item we must locate. <br> *  dwSpeed         DWORD identifying how long the caller is willing <br> *                  to wait. <br> *  pcb             LPBINDCTX providing the binding context. <br> *  riid            REFIID of the interface requested. <br> *  ppv             LPVOID * into which to return the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::GetObject(LPTSTR pszItem <br>    , DWORD dwSpeed, LPBINDCTX pbc, REFIID riid, LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::GetObjectStorage <br> * <br> * Purpose: <br> *  Similar to get Object in that we have to locate the object <br> *  described by a given name, but instead of returning any old <br> *  interface we return a storage element. <br> * <br> * Parameters: <br> *  pszItem         LPTSTR to the item we must locate. <br> *  pcb             LPBINDCTX providing the binding context. <br> *  riid            REFIID of the interface requested.  Usually <br> *                  IStorage or IStream. <br> *  ppv             LPVOID into which to return the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::GetObjectStorage(LPTSTR pszItem <br>    , LPBINDCTX pbc, REFIID riid, LPLPVOID *ppv) <br>    { <br>    *ppv=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleItemContainer::IsRunning <br> * <br> * Purpose: <br> *  Answers if the object under the given name is currently running. <br> * <br> * Parameters: <br> *  pszItem         LPTSTR of the item to check <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the object is running, S_FALSE <br> *                  otherwise.  Possibly MK_E_NOOBJECT if the name <br> *                  is bogus. <br> */ <br> <br>STDMETHODIMP CImpIOleItemContainer::IsRunning(LPTSTR pszItem) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDROPTGT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1124"></a>IDROPTGT.CPP</h2>
<pre><code>/* <br> * IDROPTGT.CPP <br> * <br> * Template implementation of a DropTarget object. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "idroptgt.h" <br> <br> <br> <br>/* <br> * CDropTarget::CDropTarget <br> * CDropTarget::~CDropTarget <br> * <br> * Constructor Parameters: <br> *  pBack           LPVOID back pointer to whatever we're related to. <br> */ <br> <br>CDropTarget::CDropTarget(LPVOID pBack) <br>    { <br>    m_cRef=0; <br>    m_pBack=pBack; <br>    return; <br>    } <br> <br> <br>CDropTarget::~CDropTarget(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CDropTarget::QueryInterface <br> * CDropTarget::AddRef <br> * CDropTarget::Release <br> * <br> * Purpose: <br> *  Non-delegating IUnknown members for CDropTarget. <br> */ <br> <br>STDMETHODIMP CDropTarget::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    //Any interface on this object is the object pointer. <br>    if (IsEqualIID(riid, IID_IUnknown) <br>        || IsEqualIID(riid, IID_IDropTarget)) <br>        *ppv=(LPVOID)this; <br> <br>    /* <br>     * If we actually assign an interface to ppv we need to AddRef <br>     * it since we're returning a new pointer. <br>     */ <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return E_NOINTERFACE; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDropTarget::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDropTarget::Release(void) <br>    { <br>    ULONG   cRefT; <br> <br>    cRefT=--m_cRef; <br> <br>    if (0L==m_cRef) <br>        delete this; <br> <br>    return cRefT; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragEnter <br> * <br> * Purpose: <br> *  Indicates that data in a drag operation has been dragged over <br> *  our window that's a potential target.  We are to decide if it's <br> *  something in which we're interested. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT providing the source data. <br> *  grfKeyState     DWORD flags: states of keys and mouse buttons. <br> *  pt              POINTL coordinates in the client space of <br> *                  the document. <br> *  pdwEffect       LPDWORD into which we'll place the appropriate <br> *                  effect flag for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragEnter(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    *pdwEffect=DROPEFFECT_NONE; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragOver <br> * <br> * Purpose: <br> *  Indicates that the mouse was moved inside the window represented <br> *  by this drop target.  This happens on every WM_MOUSEMOVE, so <br> *  this function should be very efficient. <br> * <br> * Parameters: <br> *  grfKeyState     DWORD providing the current keyboard and <br> *                  mouse states <br> *  pt              POINTL where the mouse currently is. <br> *  pdwEffect       LPDWORD in which to store the effect flag <br> *                  for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragOver(DWORD grfKeyState, POINTL pt <br>    , LPDWORD pdwEffect) <br>    { <br>    //Since we can always drop, we just return effect flags <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragLeave <br> * <br> * Purpose: <br> *  Informs the drop target that the operation has left its window. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragLeave(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::Drop <br> * <br> * Purpose: <br> *  Instructs the drop target to paste the data that was just now <br> *  dropped on it. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT from which we'll paste. <br> *  grfKeyState     DWORD providing current keyboard/mouse state. <br> *  pt              POINTL at which the drop occurred. <br> *  pdwEffect       LPDWORD in which to store what you did. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::Drop(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLASSF2.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1106"></a>ICLASSF2.CPP</h2>
<pre><code>/* <br> * ICLASSF2.CPP <br> * <br> * Template implementation of a Class Factory object that <br> * supports licensing. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iclassf2.h" <br> <br> <br>/* <br> * CClassFactory2::CClassFactory2 <br> * CClassFactory2::~CClassFactory2 <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CClassFactory2::CClassFactory2(void) <br>    { <br>    m_cRef=0L; <br>    return; <br>    } <br> <br> <br>CClassFactory2::~CClassFactory2(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory2::QueryInterface <br> * CClassFactory2::AddRef <br> * CClassFactory2::Release <br> * <br> * Purpose: <br> *  Non-delegating IUnknown members for CClassFactory2. <br> */ <br> <br>STDMETHODIMP CClassFactory2::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory2==riid <br>        || IID_IClassFactory2==riid) <br>        *ppv=(LPVOID)this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory2::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory2::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    //Free the object if the reference and lock counts are zero. <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory2::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates an object supported by this class factory.  That <br> *  object must at least support IUnknown. <br> * <br> *  Derived classes should override this function. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          LPVOID * in which to store the desired <br> *                  interface pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise E_NOINTERFACE <br> *                  if we cannot support the requested interface. <br> */ <br> <br>STDMETHODIMP CClassFactory2::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, LPVOID *ppvObj) <br>    { <br>    *ppvObj=NULL; <br>    return ResultFromScode(E_OUTOFMEMORY); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory2::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory2 object.  When the lock count is zero and the <br> *  reference count is zero we get rid of this object. <br> * <br> *  DLL objects should override this to affect their DLL ref count. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> */ <br> <br>STDMETHODIMP CClassFactory2::LockServer(BOOL fLock) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CClassFactory2::GetLicInfo <br> * <br> * Purpose: <br> *  Fills a LICINFO structure with license information for <br> *  this class factory. <br> * <br> * Parameters: <br> *  pLicInfo        LPLICINFO to the structure to fill <br> */ <br> <br>STDMETHODIMP CClassFactory2::GetLicInfo(LPLICINFO pLicInfo) <br>    { <br>    if (NULL==pLicInfo) <br>        return ResultFromScode(E_POINTER); <br> <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CClassFactory2::RequestLicKey <br> * <br> * Purpose: <br> *  Retrieves a license key from this class factory for use with <br> *  CreateInstanceLic. <br> * <br> * Parameters: <br> *  dwReserved      DWORD reserved <br> *  pbstrKey        BSTR * in which to return the key. <br> */ <br> <br>STDMETHODIMP CClassFactory2::RequestLicKey(DWORD dwReserved <br>    , BSTR *pbstrKey) <br>    { <br>    *pbstrKey=NULL; <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CClassFactory2::CreateInstanceLic <br> * <br> * Purpose: <br> *  Creates and instance of the object given a license key. <br> *  Same as CreateInstance, and implementations of this function <br> *  will typically just validate the key and call CreateInstance. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  pUnkReserved    LPUNKNOWN reserved. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  bstrKey         BSTR key used to validate creation. <br> *  ppvObj          LPVOID * in which to store the desired <br> *                  interface pointer for the new object. <br> */ <br> <br>STDMETHODIMP CClassFactory2::CreateInstanceLic(LPUNKNOWN pUnkOuter <br>    , LPUNKNOWN pUnkReserved, REFIID riid, BSTR bstrKey <br>    , LPVOID *ppvObj) <br>    { <br>    *ppvObj=NULL; <br> <br>    //Validate bstrKey <br> <br>    //Create an instance once the key is validated. <br>    return CreateInstance(pUnkOuter, riid, ppvObj); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

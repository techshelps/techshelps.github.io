<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMONIKER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1157"></a>IMONIKER.H</h2>
<pre><code>/* <br> * IMONIKER.H <br> * <br> * Definitions of a template IMoniker interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _IMONIKER_H_ <br>#define _IMONIKER_H_ <br> <br>class CImpIMoniker; <br>typedef class CImpIMoniker *PIMPIMONIKER; <br> <br>class CImpIMoniker : public IMoniker <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        LPVOID          m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIMoniker(LPVOID, LPUNKNOWN); <br>        ~CImpIMoniker(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP Load(LPTSTREAM); <br>        STDMETHODIMP Save(LPTSTREAM, BOOL); <br>        STDMETHODIMP GetSizeMax(ULARGE_INTEGER *); <br> <br>        STDMETHODIMP BindToObject(LPBC, LPMONIKER <br>            , REFIID, LPVOID *); <br>        STDMETHODIMP BindToStorage(LPBC, LPMONIKER <br>            , REFIID, LPVOID *); <br>        STDMETHODIMP Reduce(LPBC, DWORD, LPMONIKER *, LPMONIKER *); <br>        STDMETHODIMP ComposeWith(LPMONIKER, BOOL, LPMONIKER *); <br>        STDMETHODIMP Enum(BOOL, LPENUMMONIKER *); <br>        STDMETHODIMP IsEqual(LPMONIKER); <br>        STDMETHODIMP Hash(LPDWORD); <br>        STDMETHODIMP IsRunning(LPBC, LPMONIKER, LPMONIKER); <br>        STDMETHODIMP GetTimeOfLastChange(LPBC, LPMONIKER <br>            , FILETIME *); <br>        STDMETHODIMP Inverse(LPMONIKER *); <br>        STDMETHODIMP CommonPrefixWith(LPMONIKER, LPMONIKER *); <br>        STDMETHODIMP RelativePathTo(LPMONIKER, LPMONIKER *); <br>        STDMETHODIMP GetDisplayName(LPBC, LPMONIKER, LPTSTR *); <br>        STDMETHODIMP ParseDisplayName(LPBC, LPMONIKER, LPTSTR <br>            , ULONG *, LPMONIKER *); <br>        STDMETHODIMP IsSystemMoniker(LPDWORD); <br>    }; <br> <br> <br>#endif //_IMONIKER_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

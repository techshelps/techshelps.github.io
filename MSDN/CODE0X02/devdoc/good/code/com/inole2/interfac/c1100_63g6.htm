<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPROPNOT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1176"></a>IPROPNOT.CPP</h2>
<pre><code>/* <br> * IPROPNOT.CPP <br> * <br> * Template implementation of IPropertyNotifySink <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ipropnot.h" <br> <br> <br>/* <br> * CImpIPropertyNotifySink::CImpIPropertyNotifySink <br> * CImpIPropertyNotifySink::~CImpIPropertyNotifySink <br> * <br> * Constructor Parameters: <br> *  pObj            LPVOID of the object containing us. <br> *  pUnkOuter       LPUNKNOWN to which we blindly delegate <br> *                  all IUnknown calls. <br> */ <br> <br>CImpIPropertyNotifySink::CImpIPropertyNotifySink(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIPropertyNotifySink::~CImpIPropertyNotifySink(void) <br>    { <br>    return; <br>    } <br> <br> <br>/* <br> * CImpIPropertyNotifySink::QueryInterface <br> * CImpIPropertyNotifySink::AddRef <br> * CImpIPropertyNotifySink::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPropertyNotifySink. <br> */ <br> <br>STDMETHODIMP CImpIPropertyNotifySink::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPropertyNotifySink::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPropertyNotifySink::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyNotifySink::OnChanged <br> * <br> * Purpose: <br> *  Notifies this sink that the property identified with dispID <br> *  has changed in whatever object this sink is connected to. <br> * <br> * Parameters: <br> *  dispID          DISPID of the property that changed, <br> *                  which can be DISPID_UNKNOWN for unspecified <br> *                  changes to multiple properties. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR always. <br> */ <br> <br>STDMETHODIMP CImpIPropertyNotifySink::OnChanged(DISPID dispID) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyNotifySink::OnRequestEdit <br> * <br> * Purpose: <br> *  Notifies this sink that the property identified with dispID <br> *  is about to change and that the sink can prevent the change <br> *  if desired.  This can be used to enforce read-only states or <br> *  to save prior states before the change occurs. <br> * <br> * Parameters: <br> *  dispID          DISPID of the property that is changing <br> *                  which can be DISPID_UNKNOWN for multiple <br> *                  properties. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the property can change, S_FALSE <br> *                  if it cannot change, error code otherwise. <br> */ <br> <br>STDMETHODIMP CImpIPropertyNotifySink::OnRequestEdit(DISPID dispID) <br>    { <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLASSF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1104"></a>ICLASSF.CPP</h2>
<pre><code>/* <br> * ICLASSF.CPP <br> * <br> * Template implementation of a Class Factory object. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iclassf.h" <br> <br> <br>/* <br> * CClassFactory::CClassFactory <br> * CClassFactory::~CClassFactory <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CClassFactory::CClassFactory(void) <br>    { <br>    m_cRef=0L; <br>    return; <br>    } <br> <br> <br>CClassFactory::~CClassFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory::QueryInterface <br> * CClassFactory::AddRef <br> * CClassFactory::Release <br> * <br> * Purpose: <br> *  Non-delegating IUnknown members for CClassFactory. <br> */ <br> <br>STDMETHODIMP CClassFactory::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    //Any interface on this object is the object pointer. <br>    if (IsEqualIID(riid, IID_IUnknown) <br>        || IsEqualIID(riid, IID_IClassFactory)) <br>        *ppv=(LPVOID)this; <br> <br>    /* <br>     * If we actually assign an interface to ppv we need to AddRef <br>     * it since we're returning a new pointer. <br>     */ <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return E_NOINTERFACE; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CClassFactory::Release(void) <br>    { <br>    ULONG           cRefT; <br> <br>    cRefT=--m_cRef; <br> <br>    /* <br>     * Free the object if the reference and lock counts are zero. <br>     * This is most useful in a DLL where you can use zero reference <br>     * counts to free the object.  In an executable you will never <br>     * have this at zero until you CoRevokeClassObject, then you <br>     * have to worry about locks.  CHAP04\EKOALA has an example <br>     * application object implementation for this. <br>     */ <br>    if (0L==m_cRef) <br>        delete this; <br> <br>    return cRefT; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates an object supported by this class factory.  That <br> *  object must at least support IUnknown. <br> * <br> *  Derived classes should override this function. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          LPVOID * in which to store the desired <br> *                  interface pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise E_NOINTERFACE <br> *                  if we cannot support the requested interface. <br> */ <br> <br>STDMETHODIMP CClassFactory::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, LPVOID *ppvObj) <br>    { <br>    *ppvObj=NULL; <br>    return E_OUTOFMEMORY; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CClassFactory::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory object.  When the lock count is zero and the <br> *  reference count is zero we get rid of this object. <br> * <br> *  DLL objects should override this to affect their DLL ref count. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CClassFactory::LockServer(BOOL fLock) <br>    { <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

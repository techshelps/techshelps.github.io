<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IENUMVRB.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1136"></a>IENUMVRB.CPP</h2>
<pre><code>/* <br> * IENUMVRB.CPP <br> * <br> * Standard implementation of am OLEVERB enumerator with the <br> * IEnumOLEVERB interface that will generally not need <br> * modification. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ienumfe.h" <br> <br> <br>/* <br> * CEnumOLEVERB::CEnumOLEVERB <br> * CEnumOLEVERB::~CEnumOLEVERB <br> * <br> * Parameters (Constructor): <br> *  pUnkRef         LPUNKNOWN to use for reference counting. <br> *  cVerb           ULONG number of OLEVERBs in prgVerb <br> *  prgVerb         LPOLEVERB to the array to enumerate. <br> */ <br> <br>CEnumOLEVERB::CEnumOLEVERB(LPUNKNOWN pUnkRef, ULONG cVerb <br>    , LPOLEVERB prgVerb) <br>    { <br>    UINT        i; <br> <br>    m_cRef=0; <br>    m_pUnkRef=pUnkRef; <br> <br>    m_iCur=0; <br>    m_cVerb=cVerb; <br>    m_prgVerb=new OLEVERB[(UINT)cVerb]; <br> <br>    if (NULL!=m_prgVerb) <br>        { <br>        for (i=0; i &lt; cVerb; i++) <br>            m_prgVerb[i]=prgVerb[i]; <br>        } <br> <br>    return; <br>    } <br> <br> <br>CEnumOLEVERB::~CEnumOLEVERB(void) <br>    { <br>    if (NULL!=m_prgVerb) <br>        delete [] m_prgVerb; <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumOLEVERB::QueryInterface <br> * CEnumOLEVERB::AddRef <br> * CEnumOLEVERB::Release <br> * <br> * Purpose: <br> *  IUnknown members for CEnumOLEVERB object. <br> */ <br> <br>STDMETHODIMP CEnumOLEVERB::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IsEqualIID(riid, IID_IUnknown) <br>        || IsEqualIID(riid, IID_IEnumOLEVERB)) <br>        *ppv=(LPVOID)this; <br> <br>    //AddRef any interface we'll return. <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return E_NOINTERFACE; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CEnumOLEVERB::AddRef(void) <br>    { <br>    ++m_cRef; <br>    m_pUnkRef-&gt;AddRef(); <br>    return m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CEnumOLEVERB::Release(void) <br>    { <br>    ULONG       cRefT; <br> <br>    cRefT=--m_cRef; <br> <br>    m_pUnkRef-&gt;Release(); <br> <br>    if (0L==m_cRef) <br>        delete this; <br> <br>    return cRefT; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumOLEVERB::Next <br> * <br> * Purpose: <br> *  Returns the next element in the enumeration. <br> * <br> * Parameters: <br> *  cVerb           ULONG number of OLEVERBs to return. <br> *  pVerb           LPOLEVERB in which to store the returned <br> *                  structures. <br> *  pulVerb         ULONG * in which to return how many we <br> *                  enumerated. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_FALSE otherwise, <br> */ <br> <br>STDMETHODIMP CEnumOLEVERB::Next(ULONG cVerb, LPOLEVERB pVerb <br>    , ULONG * pulVerb) <br>    { <br>    ULONG               cReturn=0L; <br> <br>    if (NULL==m_prgVerb) <br>        return S_FALSE; <br> <br>    if (NULL==pulVerb) <br>        { <br>        if (1L!=cVerb) <br>            return E_POINTER; <br>        } <br>    else <br>        *pulVerb=0L; <br> <br>    if (NULL==pVerb || m_iCur &gt;= m_cVerb) <br>        return S_FALSE; <br> <br>    while (m_iCur &lt; m_cVerb &amp;&amp; cVerb &gt; 0) <br>        { <br>        *pVerb++=m_prgVerb[m_iCur++]; <br>        cReturn++; <br>        cVerb--; <br>        } <br> <br>    if (NULL!=pulVerb) <br>        *pulVerb=cReturn; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumOLEVERB::Skip <br> * <br> * Purpose: <br> *  Skips the next n elements in the enumeration. <br> * <br> * Parameters: <br> *  cSkip           ULONG number of elements to skip. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_FALSE if we could not <br> *                  skip the requested number. <br> */ <br> <br>STDMETHODIMP CEnumOLEVERB::Skip(ULONG cSkip) <br>    { <br>    if (((m_iCur+cSkip) &gt;= m_cVerb) || NULL==m_prgVerb) <br>        return S_FALSE; <br> <br>    m_iCur+=cSkip; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumOLEVERB::Reset <br> * <br> * Purpose: <br> *  Resets the current element index in the enumeration to zero. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CEnumOLEVERB::Reset(void) <br>    { <br>    m_iCur=0; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumOLEVERB::Clone <br> * <br> * Purpose: <br> *  Returns another IEnumOLEVERB with the same state as ourselves. <br> * <br> * Parameters: <br> *  ppEnum          LPENUMOLEVERB * in which to return the <br> *                  new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CEnumOLEVERB::Clone(LPENUMOLEVERB *ppEnum) <br>    { <br>    PCEnumOLEVERB   pNew; <br> <br>    *ppEnum=NULL; <br> <br>    //Create the clone <br>    pNew=new CEnumOLEVERB(m_pUnkRef, m_cVerb, m_prgVerb); <br> <br>    if (NULL==pNew) <br>        return E_OUTOFMEMORY; <br> <br>    pNew-&gt;AddRef(); <br>    pNew-&gt;m_iCur=m_iCur; <br> <br>    *ppEnum=pNew; <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

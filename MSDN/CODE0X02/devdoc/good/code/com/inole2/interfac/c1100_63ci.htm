<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMALLOC.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1152"></a>IMALLOC.CPP</h2>
<pre><code>/* <br> * IMALLOC.CPP <br> * <br> * Template IMalloc interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "imalloc.h" <br> <br> <br> <br>/* <br> * CImpIMalloc::CImpIMalloc <br> * CImpIMalloc::~CImpIMalloc <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIMalloc::CImpIMalloc(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIMalloc::~CImpIMalloc(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIMalloc::QueryInterface <br> * CImpIMalloc::AddRef <br> * CImpIMalloc::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIMalloc. <br> */ <br> <br>STDMETHODIMP CImpIMalloc::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIMalloc::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIMalloc::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::Alloc <br> * <br> * Purpose: <br> *  Allocates memory according to the rules of the allocator <br> *  object with this interface. <br> * <br> * Parameters: <br> *  cb              ULONG number of bytes to allocate. <br> * <br> * Return Value: <br> *  void *          Pointer to the reallocated memory <br> */ <br> <br> <br>STDMETHODIMP_(void *) CImpIMalloc::Alloc(ULONG cb) <br>    { <br>    return NULL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::Realloc <br> * <br> * Purpose: <br> *  Reallocates a previous allocation to a different size. <br> * <br> * Parameters: <br> *  pv              void * to the previously allocated memory. <br> *  cb              ULONG with the new size. <br> * <br> * Return Value: <br> *  void *          Pointer to the reallocated memory <br> */ <br> <br>STDMETHODIMP_(void *) CImpIMalloc::Realloc(void *pv, ULONG cb) <br>    { <br>    return NULL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::Free <br> * <br> * Purpose: <br> *  Frees and allocation from Alloc. <br> * <br> * Parameters: <br> *  pv              void * of the allocation to free. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br> <br>STDMETHODIMP_(void) CImpIMalloc::Free(void *pv) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::GetSize <br> * <br> * Purpose: <br> *  Return the size of an allocation. <br> * <br> * Parameters: <br> *  pv              void * of the allocation in question. <br> * <br> * Return Value: <br> *  ULONG           The number of bytes in the allocation. <br> */ <br> <br> <br>STDMETHODIMP_(ULONG) CImpIMalloc::GetSize(void *pv) <br>    { <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::DidAlloc <br> * <br> * Purpose: <br> *  Answers if this allocator allocated the given block of memory. <br> * <br> * Parameters: <br> *  pv              void * of the allocation in question. <br> * <br> * Return Value: <br> *  int             1 if the allocation was made by this allocator, <br> *                  0 if not, -1 if the answer is indeterminate. <br> */ <br> <br> <br>STDMETHODIMP_(int) CImpIMalloc::DidAlloc(void *pv) <br>    { <br>    return -1; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMalloc::HeapMinimize <br> * <br> * Purpose: <br> *  Releases unused memory to the operating system, minimizing the <br> *  heap. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br> <br>STDMETHODIMP_(void) CImpIMalloc::HeapMinimize(void) <br>    { <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

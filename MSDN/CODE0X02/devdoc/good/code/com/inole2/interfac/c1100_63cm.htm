<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMONIKER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1156"></a>IMONIKER.CPP</h2>
<pre><code>/* <br> * IMONIKER.CPP <br> * <br> * Template IMoniker interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "imoniker.h" <br> <br> <br> <br>/* <br> * CImpIMoniker::CImpIMoniker <br> * CImpIMoniker::~CImpIMoniker <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIMoniker::CImpIMoniker(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIMoniker::~CImpIMoniker(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIMoniker::QueryInterface <br> * CImpIMoniker::AddRef <br> * CImpIMoniker::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIMoniker. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIMoniker::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIMoniker::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::GetClassID <br> * <br> * Purpose: <br> *  Return the CLSID of the moniker. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store the CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::GetClassID(LPCLSID pClsID) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::IsDirty <br> * <br> * Purpose: <br> *  Answers whether the state of the moniker itself is dirty. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         S_TRUE if the moniker is dirty, S_FALSE if not. <br> *                  Possibly a failure code. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::IsDirty(void) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Load <br> * <br> * Purpose: <br> *  Initializes the moniker from the information in a stream. <br> * <br> * Parameters: <br> *  pstm            LPSTREAM containing the moniker's information. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Load(LPTSTREAM pstm) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Save <br> * <br> * Purpose: <br> *  Instructs the moniker to save its state to a stream. <br> * <br> * Parameters: <br> *  pstm            LPSTREAM in which to save the moniker. <br> *  fClearDirty     BOOL indicating if the object is to clear its <br> *                  dirty flag after the save. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Save(LPTSTREAM pstm, BOOL fClearDirty) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::GetSizeMax <br> * <br> * Purpose: <br> *  Returns the size of a stream the moniker need to store its <br> *  persistent state. <br> * <br> * Parameters: <br> *  pcbSize         ULARGE_INTEGER * in which to store the size. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::GetSizeMax(ULARGE_INTEGER *pcbSize) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::BindToObject <br> * <br> * Purpose: <br> *  Instructs a moniker to locate and load the object it refereces. <br> * <br> * Parameters: <br> *  pBindCtx        LPBC to the bind context. <br> *  pmkLeft         LPMONIKER to the "left" of this moniker. <br> *  riid            REFIID of the interface desired on the object <br> *  ppvObj          LPVOID * into which to store the bound object's <br> *                  interface pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::BindToObject(LPBC pBindCtx <br>    , LPMONIKER pmkLeft, REFIID riid, LPVOID *ppvObj) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::BindToStorage <br> * <br> * Purpose: <br> *  Locates and returns an interface pointer to the storage of <br> *  the object referenced by this moniker. <br> * <br> * Parameters: <br> *  pBindCtx        LPBC to the bind context. <br> *  pmkLeft         LPMONIKER to the "left" of this moniker. <br> *  riid            REFIID of the interface desired on the object <br> *  ppvObj          LPVOID * into which to store the bound object's <br> *                  interface pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::BindToStorage(LPBC pBindCtx <br>    , LPMONIKER pmkLeft, REFIID riid, LPVOID *ppvObj) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Reduce <br> * <br> * Purpose: <br> *  Returns a more or equally efficient moniker equivalent to <br> *  this moniker. <br> * <br> * Parameters: <br> *  pBindCtx        LPBC to the bind context. <br> *  dwHowFar        DWORD indicating how far the reduction should go. <br> *  ppmkLeft        LPMONIKER * (in-out) contains initial left moniker <br> *                  on input and a new prefix on output (if necessary). <br> *  ppmkReduced     LPMONIKER * into which to store the reduced moniker. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Reduce(LPBC pBindCtx, DWORD dwHowFar <br>    , LPMONIKER *ppmkLeft, LPMONIKER *ppmkReduced) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::ComposeWith <br> * <br> * Purpose: <br> *  Returns a new composite moniker composed with this moniker on <br> *  the left and ppmkRight on the right. <br> * <br> * Parameters: <br> *  pmkRight        LPMONIKER of the moniker to store on the right. <br> *  fOnlyIfNotGen   BOOL that contrls what should be done if the <br> *                  result is not a generic composite. <br> *  ppmkComposite   LPMONIKER * in which to store the resulting <br> *                  composite. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::ComposeWith(LPMONIKER pmkRight <br>    , BOOL fOnlyIfNotGen, LPMONIKER *ppmkComposite) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Enum <br> * <br> * Purpose: <br> *  Enumerates the monikers within this moniker if we are a <br> *  composite.  Need not be implemented for simple monikers. <br> * <br> * Parameters: <br> *  fForward        Specifies the direction of enumeration, TRUE <br> *                  for forward, FALSE for backwards. <br> *  ppEnum          LPENUMMONIKER * in which to store the <br> *                  enumerator's IEnumMoniker interface. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Enum(BOOL fForward, LPENUMMONIKER *ppEnum) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::IsEqual <br> * <br> * Purpose: <br> *  Compares this moniker to another for equivalence. <br> * <br> * Parameters: <br> *  pmk             LPMONKIER to the other moniker to compare. <br> * <br> * Return Value: <br> *  HRESULT         S_OK or S_FALSE depending on the result of <br> *                  the comparison. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::IsEqual(LPMONIKER pmk) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Hash <br> * <br> * Purpose: <br> *  Returns a 32-bit integer associated with this moniker that <br> *  can be used in creating moniker tables.  This should only rely <br> *  on the internal state of the moniker and not any memory <br> *  addresses. <br> * <br> * Parameters: <br> *  pdwHash         LPDWORD in which to store the hash number. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Hash(LPDWORD pdwHash) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::IsRunning <br> * <br> * Purpose: <br> *  Tests if the object associated with this moniker is already <br> *  running. <br> * <br> * Parameters: <br> *  pBindCtx        LPBINDCTX to the bind context in use. <br> *  pmkLeft         LPMONIKER to the left. <br> *  pmkNewlyRunning LPMONIKER most recently added to the running <br> *                  object table (can be NULL).  If equivalent to <br> *                  this moniker then the object is already running. <br> * <br> * Return Value: <br> *  HRESULT         S_OK or S_FALSE (or an error code) <br> */ <br> <br>STDMETHODIMP CImpIMoniker::IsRunning(LPBC pBindCtx <br>    , LPMONIKER pmkLeft, LPMONIKER pmkNewlyRunning) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::GetTimeOfLastChange <br> * <br> * Purpose: <br> *  Reports the time that the object referenced by this moniker, <br> *  such as a file, changed. <br> * <br> * Parameters: <br> *  pBindCtx        LPBINDCTX to the bind context in use. <br> *  pmkLeft         LPMONIKER to the left. <br> *  pTime           FILETIME * in which to store the last change <br> *                  time and date information. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::GetTimeOfLastChange(LPBC pBindCtx <br>    , LPMONIKER pmkLeft, FILETIME *pTime) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::Inverse <br> * <br> * Purpose: <br> *  Creates an inverse of this moniker such that a composite <br> *  containing this moniker and its inverse to the right would <br> *  annihilate each other. <br> * <br> * Parameters: <br> *  ppmkInverse     LPMONIKER * in which to store the inverse. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::Inverse(LPMONIKER *) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::CommonPrefixWith <br> * <br> * Purpose: <br> *  Determines if this moniker and another have a common prefix <br> *  (left elements) that can be separated out into another <br> *  moniker. <br> * <br> * Parameters: <br> *  pmk             LPMONIKER to the other moniker. <br> *  ppmkPrefix      LPMONIKER * in which to store the prefix moniker <br> *                  if there is one, otherwise receives NULL. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::CommonPrefixWith(LPMONIKER, LPMONIKER *) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::RelativePathTo <br> * <br> * Purpose: <br> *  Returns another moniker that contains the relative path between <br> *  this moniker and another. <br> * <br> * Parameters: <br> *  pmk             LPMONIKER of the other moniker. <br> *  ppmkRelative    LPMONIKER * in which to store a moniker that <br> *                  contains the relative path. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::RelativePathTo(LPMONIKER, LPMONIKER *) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::GetDisplayName <br> * <br> * Purpose: <br> *  Returns a human-readable name suitable for display of this <br> *  moniker. <br> * <br> * Parameters: <br> *  pBindCtx        LPBC to the current bind context. <br> *  pmkLeft         LPMONIKER to the left. <br> *  ppszName        LPTSTR * in which to store the display name. <br> *                  Output can be NULL if there is no name. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::GetDisplayName(LPBC, LPMONIKER, LPTSTR *) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::ParseDisplayName <br> * <br> * Purpose: <br> *  Pparses the moniker's remaining display name. The pszDisplayName <br> *  parameter is the yet-to-be-parsed tail of the display name.  This <br> *  function parses as much of the remaining tail as is appropriate <br> *  for a display name within the object identified by <br> *  (pmkToLeft * (the receiver)) and returns the corresponding <br> *  moniker. <br> * <br> * Parameters: <br> *  pBindCtx        LPBC to the current bind context. <br> *  pmkLeft         LPMONIKER to the left. <br> *  pszDisplayName  LPTSTR to the display name to be parsed. <br> *  pchEaten        ULONG * with the number of characters of the <br> *                  input name this parse consumed. <br> *  ppmkOut         LPMONIKER in whic to store the resulting <br> *                  moniker. <br> * <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::ParseDisplayName(LPBC pBindCtx <br>    , LPMONIKER pmkLeft, LPTSTR pszDisplayName, ULONG *pchEaten <br>    , LPMONIKER *ppmkOut) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMoniker::IsSystemMoniker <br> * <br> * Purpose: <br> *  Returns whether or not this is a system-implemented moniker <br> *  whose implemented semantics are important for the binding <br> *  process. <br> * <br> * Parameters: <br> *  pdwType         LPDWORD in which to return the system moniker <br> *                  type, from the MKSYS enumeration if S_OK is <br> *                  returned. <br> * <br> * Return Value: <br> *  HRESULT         S_OK or S_FALSE. <br> */ <br> <br>STDMETHODIMP CImpIMoniker::IsSystemMoniker(LPDWORD) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

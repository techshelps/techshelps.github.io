<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMSGFILT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1158"></a>IMSGFILT.CPP</h2>
<pre><code>/* <br> * IMSGFILT.CPP <br> * <br> * Template IMessageFilter interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "imsgfilt.h" <br> <br> <br>/* <br> * CImpIMessageFilter::CImpIMessageFilter <br> * CImpIMessageFilter::~CImpIMessageFilter <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIMessageFilter::CImpIMessageFilter(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIMessageFilter::~CImpIMessageFilter(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIMessageFilter::QueryInterface <br> * CImpIMessageFilter::AddRef <br> * CImpIMessageFilter::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIMessageFilter. <br> */ <br> <br>STDMETHODIMP CImpIMessageFilter::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIMessageFilter::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIMessageFilter::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMessageFilter::HandleIncomingCall <br> * <br> * Purpose: <br> *  Requests that the container call OleSave for the object that <br> *  lives here.  Typically this happens on server shutdown. <br> * <br> * Parameters: <br> *  dwCallType      DWORD indicating the type of call received, from <br> *                  the CALLTYPE enumeration <br> *  hTaskCaller     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the outgoing call <br> *                  was made if dwCallType is not CALLTYPE_TOPLEVEL. <br> *                  Ignored for other call types. <br> *  pInterfaceInfo  LPINTERFACEINFO providing information about the <br> *                  call.  Can be NULL. <br> * <br> * Return Value: <br> *  DWORD           One of SERVERCALL_ISHANDLED (if the call might <br> *                  be handled), SERVERCALL_REJECTED (call cannot <br> *                  be handled), or SERVERCALL_RETRYLATER (try <br> *                  again sometime). <br> */ <br> <br>STDMETHOD_(DWORD) CImpIMessageFilter::HandleInComingCall <br>    (DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount <br>    , LPINTERFACEINFO pInterfaceInfo) <br>    { <br>    return SERVERCALL_ISHANDLED; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMessageFilter::RetryRejectedCall <br> * <br> * Purpose: <br> * <br> * Parameters: <br> *  hTaskCallee     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the call was made <br> *  dwRejectType    DWORD either SERVERCALL_REJECTED or <br> *                  SERVERCALL_RETRYLATER as returned by <br> *                  HandleIncomingCall. <br> * <br> * Return Value: <br> *  DWORD           (DWORD)-1 to cancel the call, any number between <br> *                  0 and 100 to try the call again immediately, or <br> *                  a value over 100 (but not (DWORD)-1) to instruct <br> *                  COM to wait that many milliseconds before trying <br> *                  again. <br> */ <br> <br>STDMETHOD_(DWORD) CImpIMessageFilter::RetryRejectedCall <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType) <br>    { <br>    return 0; <br>    } <br> <br> <br> <br>/* <br> * CImpIMessageFilter::MessagePending <br> * <br> * Purpose: <br> * <br> * Parameters: <br> *  hTaskCallee     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the call was made <br> *  dwPendingType   DWORD with the type of call made from the <br> *                  PENDINGTYPE enumeration. <br> * <br> * Return Value: <br> *  DWORD           One of PENDINGMSG_CANCELCALL (cancels the call <br> *                  under extreme conditions), PENDINGMSG_WAITNO- <br> *                  PROCESS (continue waiting), or PENDINGMSG_WAIT- <br> *                  DEFPROCESS (invoke default handling). <br> */ <br> <br>STDMETHOD_(DWORD) CImpIMessageFilter::MessagePending <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType) <br>    { <br>    return PENDINGMSG_WAITDEFPROCESS; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IENUMCON.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1126"></a>IENUMCON.CPP</h2>
<pre><code>/* <br> * IENUMCON.CPP <br> * <br> * Standard implementation of an enumerator with the <br> * IEnumConnections interface that will generally not need <br> * modification. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ienumcon.h" <br> <br> <br>/* <br> * CEnumConnections::CEnumConnections <br> * CEnumConnections::~CEnumConnections <br> * <br> * Parameters (Constructor): <br> *  pUnkRef         LPUNKNOWN to use for reference counting. <br> *  cConn           ULONG number of connections in prgpConn <br> *  prgConnData     LPCONNECTDATA to the array to enumerate. <br> */ <br> <br>CEnumConnections::CEnumConnections(LPUNKNOWN pUnkRef, ULONG cConn <br>    , LPCONNECTDATA prgConnData) <br>    { <br>    UINT        i; <br> <br>    m_cRef=0; <br>    m_pUnkRef=pUnkRef; <br> <br>    m_iCur=0; <br>    m_cConn=cConn; <br>    m_rgConnData=new CONNECTDATA[(UINT)cConn]; <br> <br>    if (NULL!=m_rgConnData) <br>        { <br>        for (i=0; i &lt; cConn; i++) <br>            m_rgConnData[i]=prgConnData[i]; <br>        } <br> <br>    return; <br>    } <br> <br> <br>CEnumConnections::~CEnumConnections(void) <br>    { <br>    if (NULL!=m_rgConnData) <br>        delete [] m_rgConnData; <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumConnections::QueryInterface <br> * CEnumConnections::AddRef <br> * CEnumConnections::Release <br> * <br> * Purpose: <br> *  IUnknown members for CEnumConnections object. <br> */ <br> <br>STDMETHODIMP CEnumConnections::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * Enumerators are separate objects, so we only need to support <br>     * ou IUnknown and IEnumConnections interfaces here with no <br>     * concern for aggregation. <br>     */ <br>    if (IID_IUnknown==riid || IID_IEnumConnections==riid) <br>        *ppv=(LPVOID)this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CEnumConnections::AddRef(void) <br>    { <br>    ++m_cRef; <br>    m_pUnkRef-&gt;AddRef(); <br>    return m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CEnumConnections::Release(void) <br>    { <br>    m_pUnkRef-&gt;Release(); <br> <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CEnumConnections::Next <br> * <br> * Purpose: <br> *  Returns the next element in the enumeration. <br> * <br> * Parameters: <br> *  cConn           ULONG number of connections to return. <br> *  pConnData       LPCONNECTDATA in which to store the returned <br> *                  structures. <br> *  pulEnum         ULONG * in which to return how many we <br> *                  enumerated. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_FALSE otherwise, <br> */ <br> <br>STDMETHODIMP CEnumConnections::Next(ULONG cConn <br>    , LPCONNECTDATA pConnData, ULONG *pulEnum) <br>    { <br>    ULONG               cReturn=0L; <br> <br>    if (NULL==m_rgConnData) <br>        return ResultFromScode(S_FALSE); <br> <br>    if (NULL==pulEnum) <br>        { <br>        if (1L!=cConn) <br>            return ResultFromScode(E_POINTER); <br>        } <br>    else <br>        *pulEnum=0L; <br> <br>    if (NULL==pConnData || m_iCur &gt;= m_cConn) <br>        return ResultFromScode(S_FALSE); <br> <br>    while (m_iCur &lt; m_cConn &amp;&amp; cConn &gt; 0) <br>        { <br>        *pConnData++=m_rgConnData[m_iCur]; <br>        m_rgConnData[m_iCur++].pUnk-&gt;AddRef; <br>        cReturn++; <br>        cConn--; <br>        } <br> <br>    if (NULL!=pulEnum) <br>        *pulEnum=cReturn; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumConnections::Skip <br> * <br> * Purpose: <br> *  Skips the next n elements in the enumeration. <br> * <br> * Parameters: <br> *  cSkip           ULONG number of elements to skip. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_FALSE if we could not <br> *                  skip the requested number. <br> */ <br> <br>STDMETHODIMP CEnumConnections::Skip(ULONG cSkip) <br>    { <br>    if (((m_iCur+cSkip) &gt;= m_cConn) || NULL==m_rgConnData) <br>        return ResultFromScode(S_FALSE); <br> <br>    m_iCur+=cSkip; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumConnections::Reset <br> * <br> * Purpose: <br> *  Resets the current element index in the enumeration to zero. <br> * <br> * Parameters: <br> *  None <br> */ <br> <br>STDMETHODIMP CEnumConnections::Reset(void) <br>    { <br>    m_iCur=0; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumConnections::Clone <br> * <br> * Purpose: <br> *  Returns another IEnumConnections with the same state as ourselves. <br> * <br> * Parameters: <br> *  ppEnum          LPENUMCONNECTIONPOINTS * in which to return the <br> *                  new object. <br> */ <br> <br>STDMETHODIMP CEnumConnections::Clone(LPENUMCONNECTIONS *ppEnum) <br>    { <br>    PCEnumConnections   pNew; <br> <br>    *ppEnum=NULL; <br> <br>    //Create the clone <br>    pNew=new CEnumConnections(m_pUnkRef, m_cConn, m_rgConnData); <br> <br>    if (NULL==pNew) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    pNew-&gt;AddRef(); <br>    pNew-&gt;m_iCur=m_iCur; <br> <br>    *ppEnum=pNew; <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

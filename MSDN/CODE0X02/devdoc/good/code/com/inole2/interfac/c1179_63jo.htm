<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IVIEWOB2.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1194"></a>IVIEWOB2.CPP</h2>
<pre><code>/* <br> * IVIEWOB2.CPP <br> * <br> * Template IViewObject2 interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iviewobj.h" <br> <br> <br>/* <br> * CImpIViewObject2::CImpIViewObject2 <br> * CImpIViewObject2::~CImpIViewObject2 <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIViewObject2::CImpIViewObject2(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIViewObject2::~CImpIViewObject2(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::QueryInterface <br> * CImpIViewObject2::AddRef <br> * CImpIViewObject2::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIViewObject2. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIViewObject2::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIViewObject2::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::Draw <br> * <br> * Purpose: <br> *  Draws the object on the given hDC specifically for the requested <br> *  aspect, device, and within the appropriate bounds. <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect to draw. <br> *  lindex          LONG index of the piece to draw. <br> *  pvAspect        LPVOID for extra information, always NULL. <br> *  ptd             DVTARGETDEVICE * containing device <br> *                  information. <br> *  hICDev          HDC containing the IC for the device. <br> *  hDC             HDC on which to draw. <br> *  pRectBounds     LPCRECTL describing the rectangle in which <br> *                  to draw. <br> *  pRectWBounds    LPCRECTL describing the placement rectangle <br> *                  if part of what you draw is another metafile. <br> *  pfnContinue     Function to call periodically during <br> *                  long repaints. <br> *  dwContinue      DWORD extra information to pass to the <br> *                  pfnContinue. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Draw(DWORD dwAspect, LONG lindex <br>    , void * pvAspect, DVTARGETDEVICE * ptd, HDC hICDev <br>    , HDC hDC, LPCRECTL pRectBounds, LPCRECTL pRectWBounds <br>    , BOOL (CALLBACK * pfnContinue) (DWORD), DWORD dwContinue) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetColorSet <br> * <br> * Purpose: <br> *  Retrieves the color palette used by the object. <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect of interest. <br> *  lindex          LONG piece of interest. <br> *  pvAspect        LPVOID with extra information, always NULL. <br> *  ptd             DVTARGETDEVICE * containing device info. <br> *  hICDev          HDC containing the IC for the device. <br> *  ppColorSet      LPLOGPALETTE * into which to return the <br> *                  pointer to the palette in this color set. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetColorSet(DWORD dwDrawAspect <br>    , LONG lindex, LPVOID pvAspect, DVTARGETDEVICE * ptd <br>    , HDC hICDev, LPLOGPALETTE * ppColorSet) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::Freeze <br> * <br> * Purpose: <br> *  Freezes the view of a particular aspect such that data <br> *  changes do not affect the view. <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect to freeze. <br> *  lindex          LONG piece index under consideration. <br> *  pvAspect        LPVOID for further information, always NULL. <br> *  pdwFreeze       LPDWORD in which to return the key. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Freeze(DWORD dwAspect, LONG lindex <br>    , LPVOID pvAspect, LPDWORD pdwFreeze) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::Unfreeze <br> * <br> * Purpose: <br> *  Thaws an aspect frozen in Freeze. <br> * <br> * Parameters: <br> *  dwFreeze        DWORD key returned from Freeze. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Unfreeze(DWORD dwFreeze) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::SetAdvise <br> * <br> * Purpose: <br> *  Provides an advise sink to the view object enabling <br> *  notifications for a specific aspect. <br> * <br> * Parameters: <br> *  dwAspects       DWORD describing the aspects of interest. <br> *  dwAdvf          DWORD containing advise flags. <br> *  pIAdviseSink    LPADVISESINK to notify. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::SetAdvise(DWORD dwAspects <br>    , DWORD dwAdvf, LPADVISESINK pIAdviseSink) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetAdvise <br> * <br> * Purpose: <br> *  Returns the last known IAdviseSink seen by SetAdvise. <br> * <br> * Parameters: <br> *  pdwAspects      LPDWORD in which to store the last <br> *                  requested aspects. <br> *  pdwAdvf         LPDWORD in which to store the last <br> *                  requested flags. <br> *  ppIAdvSink      LPADVISESINK * in which to store the <br> *                  IAdviseSink. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetAdvise(DWORD *pAspects <br>    , DWORD *pAdvf, LPADVISESINK *ppAdvSink) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetExtent <br> * <br> * Purpose: <br> *  Retrieves the extents of the object's display. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect of interest. <br> *  lindex          LONG index of the piece of interest. <br> *  ptd             DVTARGETDEVICE * with device information. <br> *  pszl            LPSIZEL to the structure in which to return <br> *                  the extents. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetExtent(DWORD dwAspect, LONG lindex <br>    , DVTARGETDEVICE *ptd, LPSIZEL pszl) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

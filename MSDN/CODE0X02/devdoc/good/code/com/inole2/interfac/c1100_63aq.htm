<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPFRAME.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1142"></a>IIPFRAME.CPP</h2>
<pre><code>/* <br> * IIPFRAME.CPP <br> * <br> * Template IOleInPlaceFrame interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include "iipframe.h" <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::CImpIOleInPlaceFrame <br> * CImpIOleInPlaceFrame::~CImpIOleInPlaceFrame <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceFrame::CImpIOleInPlaceFrame(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceFrame::~CImpIOleInPlaceFrame(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::QueryInterface <br> * CImpIOleInPlaceFrame::AddRef <br> * CImpIOleInPlaceFrame::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleInPlaceFrame. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceFrame::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceFrame::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if no window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::GetWindow(HWND * phWnd) <br>    { <br>    return E_FAIL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::ContextSensitiveHelp( <br>    BOOL fEnterMode) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::GetBorder <br> * <br> * Purpose: <br> *  Returns the rectangle in which the container is willing to <br> *  negotiate about an object's adornments. <br> * <br> * Parameters: <br> *  prcBorder       LPRECT in which to store the rectangle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if all is well, INPLACE_E_NOTOOLSPACE <br> *                  if there is no negotiable space. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::GetBorder(LPRECT prcBorder) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::RequestBorderSpace <br> * <br> * Purpose: <br> *  Asks the container if it can surrender the amount of space <br> *  in pBW that the object would like for it's adornments.  The <br> *  container does nothing but validate the spaces on this call. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the requested space. <br> *                  The values are the amount of space requested <br> *                  from each side of the relevant window. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if we can give up space, <br> *                  INPLACE_E_NOTOOLSPACE otherwise. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::RequestBorderSpace( <br>    LPCBORDERWIDTHS pBW) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::SetBorderSpace <br> * <br> * Purpose: <br> *  Called when the object now officially requests that the <br> *  container surrender border space it previously allowed <br> *  in RequestBorderSpace.  The container should resize windows <br> *  appropriately to surrender this space. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the amount of space <br> *                  from each side of the relevant window that the <br> *                  object is now reserving. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::SetBorderSpace( <br>    LPCBORDERWIDTHS pBW) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::SetActiveObject <br> * <br> * Purpose: <br> *  Provides the container with the object's IOleInPlaceActiveObject <br> *  pointer and a name of the object to show in the container's <br> *  caption. <br> * <br> * Parameters: <br> *  pIIPActiveObj   LPOLEINPLACEACTIVEOBJECT of interest. <br> *  pszObj          LPCSTR to use in the container's caption bar. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::SetActiveObject( <br>    LPOLEINPLACEACTIVEOBJECT pIIPActiveObj, LPCSTR pszObj) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::InsertMenus <br> * <br> * Purpose: <br> *  Instructs the container to place its in-place menu items where <br> *  necessary in the given menu and to fill in elements 0, 2, and 4 <br> *  of the OLEMENUGROUPWIDTHS array to indicate how many top-level <br> *  items are in each group. <br> * <br> * Parameters: <br> *  hMenu           HMENU in which to add popups. <br> *  pMGW            LPOLEMENUGROUPWIDTHS in which to store the <br> *                  width of each container menu group. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::InsertMenus(HMENU hMenu <br>    , LPOLEMENUGROUPWIDTHS pMGW) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::SetMenu <br> * <br> * Purpose: <br> *  Instructs the container to replace whatever menu it's currently <br> *  using with the given menu and to call OleSetMenuDescritor so <br> *  OLE knows to whom to dispatch messages. <br> * <br> * Parameters: <br> *  hMenu           HMENU to show. <br> *  hOLEMenu        HOLEMENU to the menu descriptor. <br> *  hWndObj         HWND of the active object to which messages <br> *                  are dispatched.  Usually a frame window. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::SetMenu(HMENU hMenu <br>    , HOLEMENU hOLEMenu, HWND hWndObj) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::RemoveMenus <br> * <br> * Purpose: <br> *  Asks the container to remove any menus it put into hMenu in <br> *  InsertMenus. <br> * <br> * Parameters: <br> *  hMenu           HMENU from which to remove the container's <br> *                  items. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::RemoveMenus(HMENU hMenu) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::SetStatusText <br> * <br> * Purpose: <br> *  Asks the container to place some text in a status line, if <br> *  one exists.  If the container does not have a status line it <br> *  should return E_FAIL here in which case the object could <br> *  display its own. <br> * <br> * Parameters: <br> *  pszText         LPCSTR to display. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_TRUNCATED if not all <br> *                  of the text could be displayed, or E_FAIL if <br> *                  the container has no status line. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::SetStatusText(LPCSTR pszText) <br>    { <br>    return E_FAIL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::EnableModeless <br> * <br> * Purpose: <br> *  Instructs the container to show or hide any modeless popup <br> *  windows that it may be using. <br> * <br> * Parameters: <br> *  fEnable         BOOL indicating to enable/show the windows <br> *                  (TRUE) or to hide them (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::EnableModeless(BOOL fEnable) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceFrame::TranslateAccelerator <br> * <br> * Purpose: <br> *  When dealing with an in-place object from an EXE server, this <br> *  is called to give the container a chance to process accelerators <br> *  after the server has looked at the message. <br> * <br> * Parameters: <br> *  pMSG            LPMSG for the container to examine. <br> *  wID             WORD identifier in the container's accelerator <br> *                  table (from IOleInPlaceSite::GetWindowContext) <br> *                  for this message (OLE does some translation <br> *                  before calling). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the keystroke was used, <br> *                  S_FALSE otherwise. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceFrame::TranslateAccelerator(LPMSG pMSG <br>    , WORD wID) <br>    { <br>    return S_FALSE; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPSITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1146"></a>IIPSITE.CPP</h2>
<pre><code>/* <br> * IIPSITE.CPP <br> * <br> * Template IOleInPlaceSite interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iipsite.h" <br> <br> <br>/* <br> * CImpIOleInPlaceSite::CImpIOleInPlaceSite <br> * CImpIOleInPlaceSite::~CImpIOleInPlaceSite <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceSite::CImpIOleInPlaceSite(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceSite::~CImpIOleInPlaceSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::QueryInterface <br> * CImpIOleInPlaceSite::AddRef <br> * CImpIOleInPlaceSite::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleInPlaceSite object. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if no window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::GetWindow(HWND * phWnd) <br>    { <br>    return E_FAIL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::ContextSensitiveHelp( <br>    BOOL fEnterMode) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::CanInPlaceActivate <br> * <br> * Purpose: <br> *  Answers the server whether or not we can currently in-place <br> *  activate its object.  By implementing this interface we say <br> *  that we support in-place activation, but through this function <br> *  we indicate whether the object can currently be activated <br> *  in-place.  Linked objects, for example, cannot, meaning we <br> *  return S_FALSE. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if we can in-place activate the <br> *                  object in this site, S_FALSE if not. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::CanInPlaceActivate(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnInPlaceActivate <br> * <br> * Purpose: <br> *  Informs the container that an object is being activated <br> *  in-place such that the container can prepare appropriately. <br> *  The container does not, however, make any user interface <br> *  changes at this point.  See OnUIActivate. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnInPlaceActivate(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnInPlaceDeactivate <br> * <br> * Purpose: <br> *  Notifies the container that the object has deactivated itself <br> *  from an in-place state.  Opposite of OnInPlaceActivate.  The <br> *  container does not change any UI at this point. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnInPlaceDeactivate(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnUIActivate <br> * <br> * Purpose: <br> *  Informs the container that the object is going to start <br> *  munging around with user interface, like replacing the menu. <br> *  The container should remove any relevant UI in preparation. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnUIActivate(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnUIDeactivate <br> * <br> * Purpose: <br> *  Informs the container that the object is deactivating its <br> *  in-place user interface at which time the container may <br> *  reinstate its own.  Opposite of OnUIActivate. <br> * <br> * Parameters: <br> *  fUndoable       BOOL indicating if the object will actually <br> *                  perform an Undo if the container calls <br> *                  ReactivateAndUndo. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnUIDeactivate(BOOL fUndoable) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::DeactivateAndUndo <br> * <br> * Purpose: <br> *  If immediately after activation the object does an Undo, the <br> *  action being undone is the activation itself, and this call <br> *  informs the container that this is, in fact, what happened. <br> *  The container should call IOleInPlaceObject::UIDeactivate. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::DeactivateAndUndo(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::DiscardUndoState <br> * <br> * Purpose: <br> *  Informs the container that something happened in the object <br> *  that means the container should discard any undo information <br> *  it currently maintains for the object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::DiscardUndoState(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::GetWindowContext <br> * <br> * Purpose: <br> *  Provides an in-place object with pointers to the frame and <br> *  document level in-place interfaces (IOleInPlaceFrame and <br> *  IOleInPlaceUIWindow) such that the object can do border <br> *  negotiation and so forth.  Also requests the position and <br> *  clipping rectangles of the object in the container and a <br> *  pointer to an OLEINPLACEFRAME info structure which contains <br> *  accelerator information. <br> * <br> *  Note that the two interfaces this call returns are not <br> *  available through QueryInterface on IOleInPlaceSite since they <br> *  live with the frame and document, but not the site. <br> * <br> * Parameters: <br> *  ppIIPFrame      LPOLEINPLACEFRAME * in which to return <br> *                  the AddRef'd pointer to the IOleInPlaceFrame. <br> *  ppIIPUIWindow   LPOLEINPLACEUIWINDOW * in which to return <br> *                  the AddRef'd pointer to the document's <br> *                  IOleInPlaceUIWindow. <br> *  prcPos          LPRECT in which to store the object's position. <br> *  prcClip         LPRECT in which to store the object's <br> *                  visible region. <br> *  pFI             LPOLEINPLACEFRAMEINFO for accelerator info. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::GetWindowContext( <br>    LPOLEINPLACEFRAME * ppIIPFrame, LPOLEINPLACEUIWINDOW <br>    * ppIIPUIWindow, LPRECT prcPos, LPRECT prcClip <br>    , LPOLEINPLACEFRAMEINFO pFI) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::Scroll <br> * <br> * Purpose: <br> *  Asks the container to scroll the document, and thus the <br> *  object, by the given amounts in the sz parameter. <br> * <br> * Parameters: <br> *  sz              SIZE containing signed horizontal and vertical <br> *                  extents by which the container should scroll. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::Scroll(SIZE sz) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnPosRectChange <br> * <br> * Purpose: <br> *  Informs the container that the in-place object was resized. <br> *  The container must call IOleInPlaceObject::SetObjectRects. <br> * <br> * Parameters: <br> *  prcPos          LPCRECT containing the new size of the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnPosRectChange(LPCRECT prcPos) <br>    { <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRUNOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1186"></a>IRUNOBJ.CPP</h2>
<pre><code>/* <br> * IRUNOBJ.CPP <br> * <br> * Definitions of a template IRunnableObject interface <br> * implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "irunobj.h" <br> <br> <br> <br>/* <br> * CImpIRunnableObject::CImpIRunnableObject <br> * CImpIRunnableObject::~CImpIRunnableObject <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIRunnableObject::CImpIRunnableObject(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIRunnableObject::~CImpIRunnableObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIRunnableObject::QueryInterface <br> * CImpIRunnableObject::AddRef <br> * CImpIRunnableObject::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIRunnableObject. <br> */ <br> <br>STDMETHODIMP CImpIRunnableObject::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIRunnableObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIRunnableObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIRunnableObject::GetRunningClass <br> * <br> * Purpose: <br> *  Returns the CLSID of the object. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store the CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIRunnableObject::GetRunningClass(LPCLSID pClsID) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIRunnableObject::Run <br> * <br> * Purpose: <br> *  Run an object in the given bind context, that is, put the object <br> *  into the running state. <br> * <br> * Parameters: <br> *  pBindCtx        LPBINDCTX of the bind context to use. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIRunnableObject::Run(LPBINDCTX pBindCtx) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIRunnableObject::IsRunning <br> * <br> * Purpose: <br> *  Answers whether an object is currently in the running state. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            Indicates the running state of the object. <br> */ <br> <br>STDMETHODIMP_(BOOL) CImpIRunnableObject::IsRunning(void) <br>    { <br>    return FALSE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIRunnableObject::LockRunning <br> * <br> * Purpose: <br> *  Locks an already running object into the running state or unlocks <br> *  it from such a state. <br> * <br> * Parameters: <br> *  fLock               BOOL indicating lock (TRUE) or unlock <br> *                      (FALSE) <br> *  fLastUnlockCloses   BOOL indicating if the last call to this <br> *                      function with fLock==FALSE closes the <br> *                      object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIRunnableObject::LockRunning(BOOL fLock <br>    , BOOL fLastUnlockCloses) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIRunnableObject::SetContainedObject <br> * <br> * Purpose: <br> *  Informs the object (embedded object) that it is inside a <br> *  compound document container. <br> * <br> * Parameters: <br> *  fContained      BOOL indicating if the object is now contained. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIRunnableObject::SetContainedObject(BOOL fContained) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

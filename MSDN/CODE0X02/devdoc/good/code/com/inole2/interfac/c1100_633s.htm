<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLISITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1108"></a>ICLISITE.CPP</h2>
<pre><code>/* <br> * ICLISITE.CPP <br> * <br> * Template IOleClientSite interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iclisite.h" <br> <br> <br>/* <br> * CImpIOleClientSite::CImpIOleClientSite <br> * CImpIOleClientSite::~CImpIOleClientSite <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleClientSite::CImpIOleClientSite(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleClientSite::~CImpIOleClientSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::QueryInterface <br> * CImpIOleClientSite::AddRef <br> * CImpIOleClientSite::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleClientSite. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleClientSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleClientSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::SaveObject <br> * <br> * Purpose: <br> *  Requests that the container call OleSave for the object that <br> *  lives here.  Typically this happens on server shutdown. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::SaveObject(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::GetMoniker <br> * <br> * Purpose: <br> *  Retrieves the moniker for the site in which this object lives, <br> *  either the moniker relative to the container or the full <br> *  moniker. <br> * <br> * Parameters: <br> *  dwAssign        DWORD specifying that the object wants moniker <br> *                  assignment. <br> *  dwWhich         DWORD identifying which moniker the object wants, <br> *                  either the container's moniker, the moniker <br> *                  relative to this client site, or the full moniker. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::GetMoniker(DWORD dwAssign <br>    , DWORD dwWhich, LPMONIKER *ppmk) <br>    { <br>    //Only necessary if you allow linking to embeddings <br>    *ppmk=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::GetContainer <br> * <br> * Purpose: <br> *  Returns a pointer to the document's IOleContainer interface. <br> * <br> * Parameters: <br> *  ppContainer     LPOLECONTAINER * in which to return the <br> *                  interface. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::GetContainer(LPOLECONTAINER <br>    * ppContainer) <br>    { <br>    //Only necessary if you allow linking to embeddings <br>    *ppContainer=NULL; <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::ShowObject <br> * <br> * Purpose: <br> *  Tells the container to bring the object fully into view as <br> *  much as possible, that is, scroll the document. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::ShowObject(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::OnShowWindow <br> * <br> * Purpose: <br> *  Informs the container if the object is showing itself or <br> *  hiding itself.  This is done only in the opening mode and allows <br> *  the container to know when to shade or unshade the object. <br> * <br> * Parameters: <br> *  fShow           BOOL indiciating that the object is being shown <br> *                  (TRUE) or hidden (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::OnShowWindow(BOOL fShow) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::RequestNewObjectLayout <br> * <br> * Purpose: <br> *  Called when the object needs more room in the container. <br> *  This is not used in OLE 2.0 <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::RequestNewObjectLayout(void) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

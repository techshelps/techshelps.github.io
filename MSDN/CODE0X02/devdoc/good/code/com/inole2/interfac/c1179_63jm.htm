<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUNKNOWN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1192"></a>IUNKNOWN.CPP</h2>
<pre><code>/* <br> * IUNKNOWN.CPP <br> * <br> * Template implementation of a delegating IUnknown. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iunknown.h" <br> <br> <br> <br>/* <br> * CImpIUnknown::CImpIUnknown <br> * CImpIUnknown::~CImpIUnknown <br> * <br> * Constructor Parameters: <br> *  pObj            LPVOID of the object containing us. <br> *  pUnkOuter       LPUNKNOWN to which we blindly delegate <br> *                  all IUnknown calls. <br> */ <br> <br>CImpIUnknown::CImpIUnknown(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br> <br>    /* <br>     * We don't need to AddRef pUnkOuter since it defines <br>     * our lifetime. <br>     */ <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br> <br>CImpIUnknown::~CImpIUnknown(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIUnknown::QueryInterface <br> * <br> * Purpose: <br> *  Delegate to whoever is providing IUnknown implementations <br> *  for this interface.  May be our containing object, may be <br> *  a controlling unknown.  We don't care. <br> * <br> * Parameters: <br> *  riid            REFIID being asked for. <br> *  ppv             LPVOID * in which to return the interface. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise contains <br> *                  E_NOINTERFACE. <br> */ <br> <br>STDMETHODIMP CImpIUnknown::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIUnknown::AddRef <br> * <br> * Purpose: <br> *  Increments the interface reference count (for debugging) and <br> *  delegates to whoever is controlling this interface. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  ULONG           New reference count of the object. <br> */ <br> <br>STDMETHODIMP_(ULONG) CImpIUnknown::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIUnknown::Release <br> * <br> * Purpose: <br> *  Decrements the interface reference count (for debugging) and <br> *  delegates to whoever is controlling this interface. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  ULONG           Current reference count after decrement.  If <br> *                  this returns zero then the interface is no <br> *                  longer valid because the object is dead. <br> */ <br> <br>STDMETHODIMP_(ULONG) CImpIUnknown::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

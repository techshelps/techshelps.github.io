<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPERSTRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1174"></a>IPERSTRM.CPP</h2>
<pre><code>/* <br> * IPERSTRM.CPP <br> * <br> * Template IPersistStream interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iperstrm.h" <br> <br> <br>/* <br> * CImpIPersistStream:CImpIPersistStream <br> * CImpIPersistStream::~CImpIPersistStream <br> * <br> * Constructor Parameters: <br> *  pObj            LPVOID pointing to the object we live in. <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> */ <br> <br>CImpIPersistStream::CImpIPersistStream(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br> <br>CImpIPersistStream::~CImpIPersistStream(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::QueryInterface <br> * CImpIPersistStream::AddRef <br> * CImpIPersistStream::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPersistStream. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStream::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStream::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::GetClassID <br> * <br> * Purpose: <br> *  Returns the CLSID of the object represented by this interface. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store our CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::GetClassID(LPCLSID pClsID) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::IsDirty <br> * <br> * Purpose: <br> *  Tells the caller if we have made changes to this object since <br> *  it was loaded or initialized new. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Contains S_OK if we ARE dirty, S_FALSE if <br> *                  NOT dirty. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::IsDirty(void) <br>    { <br>    return S_FALSE; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::Load <br> * <br> * Purpose: <br> *  Instructs the object to load itself from a previously saved <br> *  IStream that was handled by Save in another object lifetime. <br> *  The seek pointer in this stream will be exactly the same as <br> *  it was when Save was called, and this function must leave <br> *  the seek pointer the same as it was on exit from Save, regardless <br> *  of success or failure.  This function should not hold on to <br> *  pIStream. <br> * <br> * Parameters: <br> *  pIStream        LPSTREAM from which to load. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::Load(LPSTREAM pIStream) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::Save <br> * <br> * Purpose: <br> *  Saves the data for this object to an IStream.  Be sure not <br> *  to change the position of the seek pointer on entry to this <br> *  function: the caller will assume that you write from the <br> *  current offset.  Leave the stream's seek pointer at the end <br> *  of the data written on exit. <br> * <br> * Parameters: <br> *  pIStream        LPSTREAM in which to save our data. <br> *  fClearDirty     BOOL indicating if this call should clear <br> *                  the object's dirty flag (TRUE) or leave it <br> *                  unchanged (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::Save(LPSTREAM pIStream <br>    , BOOL fClearDirty) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStream::GetSizeMax <br> * <br> * Purpose: <br> *  Returns the size of the data we would write if Save was <br> *  called right now. <br> * <br> * Parameters: <br> *  pcbSize         ULARGE_INTEGER * in which to save the size <br> *                  of the stream an immediate call to Save would <br> *                  write. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIPersistStream::GetSizeMax(ULARGE_INTEGER <br>    * pcbSize) <br>    { <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

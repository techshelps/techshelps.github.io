<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPROPPG2.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1180"></a>IPROPPG2.CPP</h2>
<pre><code>/* <br> * IPROPPG2.CPP <br> * <br> * Template IPropertyPage2 interface implementation. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iproppg2.h" <br> <br> <br>/* <br> * CImpIPropertyPage2::CImpIPropertyPage2 <br> * CImpIPropertyPage2::~CImpIPropertyPage2 <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIPropertyPage2::CImpIPropertyPage2(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIPropertyPage2::~CImpIPropertyPage2(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::QueryInterface <br> * CImpIPropertyPage2::AddRef <br> * CImpIPropertyPage2::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPropertyPage2. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPropertyPage2::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPropertyPage2::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::SetPageSite <br> * <br> * Purpose: <br> *  Provides the property page with the IPropertyPageSite <br> *  that contains it.  SetPageSite(NULL) will be called as <br> *  part of the close sequence. <br> * <br> * Parameters: <br> *  pPageSite       LPPROPERTYPAGESITE pointer to the site. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::SetPageSite <br>    (LPPROPERTYPAGESITE pPageSite) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Activate <br> * <br> * Purpose: <br> *  Instructs the property page to create a window in which to <br> *  display its contents, using the given parent window and <br> *  rectangle.  The window should be initially visible. <br> * <br> * Parameters: <br> *  hWndParent      HWND of the parent window. <br> *  prc             LPCRECT of the rectangle to use. <br> *  fModal          BOOL indicating whether the frame is modal. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Activate(HWND hWndParent <br>    , LPCRECT prc, BOOL fModal) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Deactivate <br> * <br> * Purpose: <br> *  Instructs the property page to destroy its window that was <br> *  created in Activate. <br> * <br> * Parameters: <br> *  None <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Deactivate(void) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::GetPageInfo <br> * <br> * Purpose: <br> *  Fills a PROPPAGEINFO structure describing the page's size, <br> *  contents, and help information. <br> * <br> * Parameters: <br> *  pPageInfo       LPPROPPAGEINFO to the structure to fill. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::GetPageInfo(LPPROPPAGEINFO pPageInfo) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::SetObjects <br> * <br> * Purpose: <br> *  Identifies the objects that are being affected by this property <br> *  page (and all other pages in the frame).  These are the object <br> *  to which to send new property values in the Apply member. <br> * <br> * Parameters: <br> *  cObjects        ULONG number of objects <br> *  ppUnk           IUnknown ** to the array of objects being <br> *                  passed to the page. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::SetObjects(ULONG cObjects <br>    , IUnknown **ppunk) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Show <br> * <br> * Purpose: <br> *  Instructs the page to show or hide its window created in <br> *  Activate. <br> * <br> * Parameters: <br> *  nCmdShow        UINT to pass to ShowWindow. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Show(UINT nCmdShow) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Move <br> * <br> * Purpose: <br> *  Instructs the property page to change its position. <br> * <br> * Parameters: <br> *  prc             LPCRECT containing the new position. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Move(LPCRECT prc) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::IsPageDirty <br> * <br> * Purpose: <br> *  Asks the page if anything's changed in it, that is, if the <br> *  property values in the page are out of sync with the objects <br> *  under consideration. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if dirty, S_FALSE if not. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::IsPageDirty(void) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Apply <br> * <br> * Purpose: <br> *  Instructs the page to send changes in its page to whatever <br> *  objects it knows about through SetObjects.  This is the only <br> *  time the page should change the objects' properties, and not <br> *  when the value is changed on the page. <br> * <br> * Parameters: <br> *  None <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Apply(void) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::Help <br> * <br> * Purpose: <br> *  Invokes help for this property page. <br> * <br> * Parameters: <br> *  pszHelpDir      LPCOLESTR identifying the default location of <br> *                  the help information <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::Help(LPCOLESTR pszHelpDir) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::TranslateAccelerator <br> * <br> * Purpose: <br> *  Provides the page with the messages that occur in the frame. <br> *  This gives the page to do whatever it wants with the message, <br> *  such as handle keyboard mnemonics. <br> * <br> * Parameters: <br> *  pMsg            LPMSG containing the message of the accelerator. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::TranslateAccelerator(LPMSG lpMsg) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPropertyPage2::EditProperty <br> * <br> * Purpose: <br> *  Informs the property page to speifically set focus to a <br> *  particular property identified with dispID.  Support for this <br> *  method is optional. <br> * <br> * Parameters: <br> *  dispID          DISPID of the property to highlight. <br> */ <br> <br>STDMETHODIMP CImpIPropertyPage2::EditProperty(DISPID dispid) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

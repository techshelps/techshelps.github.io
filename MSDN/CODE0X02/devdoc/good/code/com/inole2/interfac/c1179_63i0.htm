<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISIMPSIT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1188"></a>ISIMPSIT.CPP</h2>
<pre><code>/* <br> * ISIMPSIT.CPP <br> * <br> * Template ISimpleFrameSite interface implementation. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "isimpsit.h" <br> <br> <br>/* <br> * CImpISimpleFrameSite::CImpISimpleFrameSite <br> * CImpISimpleFrameSite::~CImpISimpleFrameSite <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpISimpleFrameSite::CImpISimpleFrameSite(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpISimpleFrameSite::~CImpISimpleFrameSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpISimpleFrameSite::QueryInterface <br> * CImpISimpleFrameSite::AddRef <br> * CImpISimpleFrameSite::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpISimpleFrameSite. <br> */ <br> <br>STDMETHODIMP CImpISimpleFrameSite::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpISimpleFrameSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpISimpleFrameSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpISimpleFrameSite::PreMessageFilter <br> * <br> * Purpose: <br> *  Allows the simple frame to pre-process messages that are <br> *  going to controls within it. <br> * <br> * Parameters: <br> *  Same as to a window procedure, plus: <br> *  plResult        LRESULT * in which to store the return value <br> *                  for the message. <br> *  pdwCookie       DWORD * in which to store extra information to <br> *                  pass to PostMessageFilter <br> */ <br> <br>STDMETHODIMP CImpISimpleFrameSite::PreMessageFilter(HWND hWnd <br>    , UINT iMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult <br>    , DWORD *pdwCookie) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br>/* <br> * CImpISimpleFrameSite::PostMessageFilter <br> * <br> * Purpose: <br> *  Allows the simple frame to post-process messages that are <br> *  going to controls within it. <br> * <br> * Parameters: <br> *  Same as to a window procedure, plus: <br> *  plResult        LRESULT * in which to store the return value <br> *                  for the message. <br> *  dwCookie        DWORD from PreMessageFilter <br> */ <br> <br>STDMETHODIMP CImpISimpleFrameSite::PostMessageFilter(HWND hWnd <br>    , UINT iMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult <br>    , DWORD dwCookie) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOLEOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1162"></a>IOLEOBJ.CPP</h2>
<pre><code>/* <br> * IOLEOBJ.CPP <br> * <br> * Template IOleObject interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ioleobj.h" <br> <br> <br> <br>/* <br> * CImpIOleObject::CImpIOleObject <br> * CImpIOleObject::~CImpIOleObject <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleObject::CImpIOleObject(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleObject::~CImpIOleObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleObject::QueryInterface <br> * CImpIOleObject::AddRef <br> * CImpIOleObject::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleObject. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::SetClientSite <br> * <br> * Purpose: <br> *  Provides the object with a pointer to the IOleClient site <br> *  representing the container in which this object resides. <br> * <br> * Parameters: <br> *  pIOleClientSite LPOLECLIENTSITE to the container's interface. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleObject::SetClientSite <br>    (LPOLECLIENTSITE pIOleClientSite) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetClientSite <br> * <br> * Purpose: <br> *  Asks the object for the client site provided in SetClientSite. <br> *  If you have not seen SetClientSite yet, return a NULL in <br> *  ppIOleClientSite. <br> * <br> * Parameters: <br> *  ppIOleClientSite    LPOLECLIENTSITE * in which to store <br> *                      the pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetClientSite(LPOLECLIENTSITE <br>    * ppIOleClientSite) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::SetHostNames <br> * <br> * Purpose: <br> *  Provides the object with names of the container application and <br> *  the object in the container to use in object user interface. <br> * <br> * Parameters: <br> *  pszApp          LPCSTR of the container application. <br> *  pszObj          LPCSTR of some name useful in window titles. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleObject::SetHostNames(LPCSTR pszApp <br>    , LPCSTR pszObj) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::Close <br> * <br> * Purpose: <br> *  Forces the object to close down its user interface and unload. <br> * <br> * Parameters: <br> *  dwSaveOption    DWORD describing the circumstances under which <br> *                  the object is being saved and closed. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::Close(DWORD dwSaveOption) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::SetMoniker <br> * <br> * Purpose: <br> *  Informs the object of its moniker or its container's moniker <br> *  depending on dwWhich. <br> * <br> * Parameters: <br> *  dwWhich         DWORD describing whether the moniker is the <br> *                  object's or the container's. <br> *  pmk             LPMONIKER with the name. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::SetMoniker(DWORD dwWhich <br>    , LPMONIKER pmk) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetMoniker <br> * <br> * Purpose: <br> *  Asks the object for a moniker that can later be used to <br> *  reconnect to it. <br> * <br> * Parameters: <br> *  dwAssign        DWORD determining how to assign the moniker to <br> *                  to the object. <br> *  dwWhich         DWORD describing which moniker the caller wants. <br> *  ppmk            LPMONIKER * into which to store the moniker. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetMoniker(DWORD dwAssign <br>    , DWORD dwWhichMoniker, LPMONIKER * ppmk) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::InitFromData <br> * <br> * Purpose: <br> *  Initilizes the object from the contents of a data object. <br> * <br> * Parameters: <br> *  pIDataObject    LPDATAOBJECT containing the data. <br> *  fCreation       BOOL indicating if this is part of a new <br> *                  creation.  If FALSE, the container is trying <br> *                  to paste here. <br> *  dwReserved      DWORD reserved. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::InitFromData(LPDATAOBJECT pIDataObject <br>    , BOOL fCreation, DWORD dwReserved) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetClipboardData <br> * <br> * Purpose: <br> *  Returns an IDataObject pointer to the caller representing what <br> *  would be on the clipboard if the server did an Edit/Copy using <br> *  OleSetClipboard. <br> * <br> * Parameters: <br> *  dwReserved      DWORD reserved. <br> *  ppIDataObj      LPDATAOBJECT * into which to store the <br> *                  pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetClipboardData(DWORD dwReserved <br>    , LPDATAOBJECT * ppIDataObj) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::DoVerb <br> * <br> * Purpose: <br> *  Executes an object-defined action. <br> * <br> * Parameters: <br> *  iVerb           LONG index of the verb to execute. <br> *  pMSG            LPMSG describing the event causing the <br> *                  activation. <br> *  pIOleClientSite LPOLECLIENTSITE to the site involved. <br> *  lIndex          LONG the piece on which execution is happening. <br> *  hWndParent      HWND of the window in which the object can play <br> *                  in-place. <br> *  pRectPos        LPRECT of the object in hWndParent where the <br> *                  object can play in-place if desired. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::DoVerb(LONG iVerb, LPMSG PMSG <br>    , LPOLECLIENTSITE pIOleClientSite, LONG lIndex <br>    , HWND hWndParent, LPCRECT pRectPos) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::EnumVerbs <br> * <br> * Purpose: <br> *  Creates an enumerator that knows the object's verbs.  If you <br> *  need to change the verb list dynamically, then you'll need to <br> *  implement this, otherwise you can return OLE_S_USEREG. <br> * <br> * Parameters: <br> *  ppEnum          LPENUMOLEVERB * into which to return the <br> *                  enum. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::EnumVerbs(LPENUMOLEVERB * ppEnum) <br>    { <br>    //Trivial implementation if you fill the regDB. <br>    return OLE_S_USEREG; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::Update <br> * <br> * Purpose: <br> *  Insures that the object is up to date.  This is mostly used for <br> *  caching but you must make sure that you recursively call all <br> *  nested objects you contain as well. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::Update(void) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::IsUpToDate <br> * <br> * Purpose: <br> *  Returns if the object is currently up to date, which involves <br> *  asking all contained object inside this object if they are up <br> *  to date as well. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_FALSE if dirty. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::IsUpToDate(void) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetUserClassID <br> * <br> * Purpose: <br> *  Used for linked objects, this returns the class ID of what end <br> *  users think they are editing. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store the CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetUserClassID(LPCLSID pClsID) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetUserType <br> * <br> * Purpose: <br> *  Determines the user-presentable name of the object. <br> * <br> * Parameters: <br> *  dwForm          DWORD describing which form of the string <br> *                  is desired. <br> *  pszType         LPTSTR * into which to return the pointer to <br> *                  the type string. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetUserType(DWORD dwForm <br>    , LPTSTR * ppszType) <br>    { <br>    return OLE_S_USEREG; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::SetExtent <br> * <br> * Purpose: <br> *  Sets the size of the object in HIMETRIC units. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect affected. <br> *  pszl            LPSIZEL containing the new size. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::SetExtent(DWORD dwAspect, LPSIZEL pszl) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetExtent <br> * <br> * Purpose: <br> *  Retrieves the size of the object in HIMETRIC units. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect requested <br> *  pszl            LPSIZEL into which to store the size. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetExtent(DWORD dwAspect, LPSIZEL pszl) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::Advise <br> * <br> * Purpose: <br> *  Provides an IAdviseSink to the object for notifications. <br> * <br> * Parameters: <br> *  pIAdviseSink    LPADVISESINK to notify. <br> *  pdwConn         LPDWORD into which to store a connection key. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::Advise(LPADVISESINK pIAdviseSink <br>    , LPDWORD pdwConn) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::Unadvise <br> * <br> * Purpose: <br> *  Terminates a previous advise connection from Advise. <br> * <br> * Parameters: <br> *  dwConn          DWORD connection key from Advise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::Unadvise(DWORD dwConn) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::EnumAdvise <br> * <br> * Purpose: <br> *  Creates and returns a enumeration of the advises on this object. <br> * <br> * Parameters: <br> *  ppEnum          LPENUMSTATDATA * in which to return the <br> *                  enumerator. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::EnumAdvise(LPENUMSTATDATA *ppEnum) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::GetMiscStatus <br> * <br> * Purpose: <br> *  Returns a set of miscellaneous status flags for the object. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect in question. <br> *  pdwStatus       LPDWORD in which to store the flags. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetMiscStatus(DWORD dwAspect <br>    , LPDWORD pdwStatus) <br>    { <br>    return OLE_S_USEREG; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleObject::SetColorScheme <br> * <br> * Purpose: <br> *  Provides the object with the color palette as recommended by <br> *  the container application that also knows the palettes of other <br> *  objects.  The object here is not required to use these colors. <br> * <br> * Parameters: <br> *  pLP             LPLOGPALETTE providing the colors. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::SetColorScheme(LPLOGPALETTE pLP) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

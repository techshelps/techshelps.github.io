<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMARSHAL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1154"></a>IMARSHAL.CPP</h2>
<pre><code>/* <br> * IMARSHAL.CPP <br> * <br> * Template IMarshal interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "imarshal.h" <br> <br> <br> <br>/* <br> * CImpIMarshal::CImpIMarshal <br> * CImpIMarshal::~CImpIMarshal <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIMarshal::CImpIMarshal(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIMarshal::~CImpIMarshal(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIMarshal::QueryInterface <br> * CImpIMarshal::AddRef <br> * CImpIMarshal::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIMarshal. <br> */ <br> <br>STDMETHODIMP CImpIMarshal::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIMarshal::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIMarshal::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::GetUnmarshalClass <br> * <br> * Purpose: <br> *  Determines the class of object to be used to create an <br> *  uninitalized proxy in the unmarshaling process. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID to the interface to be marshaled. <br> *  dwCtx           DWORD specifying the relation of the processes <br> *                  between which the marshaling is occuring, from the <br> *                  MSHCTX enumeration. <br> *  pvCtx           LPVOID Reserved for future MSHCTX values. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> *  pClsID          LPCLSID in which to store the proxy CLSID. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::GetUnmarshalClass(REFIID riid <br>    , LPVOID pv, DWORD dwCtx, LPVOID pvCtx, DWORD dwFlags <br>    , LPCLSID pClsID) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::GetMarshalSizeMax <br> * <br> * Purpose: <br> *  Returns the upper memory bound needed to write data into a stream <br> *  for IMarshal::MarshalInterface. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> *  dwDestCtx       DWORD with the destination context from MSHCTX. <br> *  pvDestCtx       LPVOID reserved for future MSHCTX flags. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> *  pdwSize         LPDWORD in which the size is returned. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::GetMarshalSizeMax(REFIID riid, LPVOID pv <br>    , DWORD dwDestCtx, LPVOID pvDestCtx, DWORD dwFlags <br>    , LPDWORD pdwSize) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::MarshalInterface <br> * <br> * Purpose: <br> *  Marshals an interface ID into a stream. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM into which to marshal the interface. <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> *  dwDestCtx       DWORD with the destination context from MSHCTX. <br> *  pvDestCtx       LPVOID reserved for future MSHCTX flags. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::MarshalInterface(LPSTREAM pstm <br>    , REFIID riid, LPVOID pv, DWORD dwDestCtx, LPVOID pvDestCtx <br>    , DWORD dwFlags) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::UnmarshalInterface <br> * <br> * Purpose: <br> *  Initializes a newly created proxy from a stream stored in <br> *  MarshalInterface. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM to the stream containing marshal <br> *                  data. <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::UnmarshalInterface(LPSTREAM pstm <br>    , REFIID riid, LPVOID *pv) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::ReleaseMarshalData <br> * <br> * Purpose: <br> *  Destroy a marshaled data packet. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM containing the data to release. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::ReleaseMarshalData(LPSTREAM pstm) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIMarshal::Disconnect <br> * <br> * Purpose: <br> *  Instructs an object with custom marshaling that it's being <br> *  disconnected. <br> * <br> * Parameters: <br> *  dwReserved      DWORD reserved. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br> <br>STDMETHODIMP CImpIMarshal::DisconnectObject(DWORD dwReserved) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDISPAT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1120"></a>IDISPAT.CPP</h2>
<pre><code>/* <br> * IDISPAT.CPP <br> * <br> * Template IDispatch interface implementation. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "idispat.h" <br> <br> <br>/* <br> * CImpIDispatch::CImpIDispatch <br> * CImpIDispatch::~CImpIDispatch <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDispatch::CImpIDispatch(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDispatch::~CImpIDispatch(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::QueryInterface <br> * CImpIDispatch::AddRef <br> * CImpIDispatch::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIDispatch. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfoCount <br> * <br> * Purpose: <br> *  Returns the number of tyep information (ITypeInfo) interfaces <br> *  that the object provides (0 or 1). <br> * <br> * Parameters: <br> *  pctInfo         UINT * to the location to receive <br> *                  the count of interfaces. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfoCount(UINT *pctInfo) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfo <br> * <br> * Purpose: <br> *  Retrieves type information for the automation interface. <br> * <br> * Parameters: <br> *  itinfo          UINT reserved.  Must be zero. <br> *  lcid            LCID providing the locale for the type <br> *                  information.  If the object does not support <br> *                  localization, this is ignored. <br> *  pptinfo         ITypeInfo ** in which to store the ITypeInfo <br> *                  interface for the object. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfo(UINT itinfo <br>    , LCID lcid, ITypeInfo **pptInfo) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetIDsOfNames <br> * <br> * Purpose: <br> * <br> * Parameters: <br> *  riid            REFIID reserved.  Must be NULL. <br> *  rgszNames       OLECHAR ** pointing to the array of names to b <br> *                  mapped. <br> *  cNames          UINT number of names to be mapped. <br> *  lcid            LCID of the locale. <br> *  rgDispID        DISPID * caller allocated array containing IDs <br> *                  corresponginf to those names in rgszNames. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetIDsOfNames(REFIID riid <br>    , OLECHAR **rgszNames, UINT cNames, LCID lcid <br>    , DISPID *rgDispID) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::Invoke <br> * <br> * Purpose: <br> * <br> * Parameters: <br> *  dispIDMember    DISPID of the method to invoke. <br> *  riid            REFIID reserved, must be NULL. <br> *  lcid            LCID of the locale. <br> *  wFlags          USHORT describing the context of the invocation. <br> *  pDispParams     DISPPARAMS * to the array of arguments. <br> *  pVarResult      VARIANT * in which to store the result.  Is <br> *                  NULL if the caller is not interested. <br> *  pExcepInfo      EXCEPINFO * to exception information. <br> *  puArgErr        UINT * in which to store the index of an <br> *                  invalid parameter if DISP_E_TYPEMISMATCH <br> *                  is returned. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::Invoke(DISPID disIDMember, REFIID riid <br>    , LCID lcid, unsigned short wFlags, DISPPARAMS *pDispParams <br>    , VARIANT *pVarResult, EXCEPINFO *pExcepInfo <br>    , UINT *puArgErr) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

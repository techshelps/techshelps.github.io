<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOLEOBJ.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1163"></a>IOLEOBJ.H</h2>
<pre><code>/* <br> * IOLEOBJ.H <br> * <br> * Definitions of a template IOleObject interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Right Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _IOLEOBJ_H_ <br>#define _IOLEOBJ_H_ <br> <br>class CImpIOleObject; <br>typedef class CImpIOleObject *PIMPIOLEOBJECT; <br> <br>class CImpIOleObject : public IOleObject <br>    { <br>    private: <br>        ULONG           m_cRef;      //Interface reference count <br>        LPVOID          m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIOleObject(LPVOID, LPUNKNOWN); <br>        ~CImpIOleObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IOleObject members <br>        STDMETHODIMP SetClientSite(LPOLECLIENTSITE); <br>        STDMETHODIMP GetClientSite(LPOLECLIENTSITE *); <br>        STDMETHODIMP SetHostNames(LPCSTR, LPCSTR); <br>        STDMETHODIMP Close(DWORD); <br>        STDMETHODIMP SetMoniker(DWORD, LPMONIKER); <br>        STDMETHODIMP GetMoniker(DWORD, DWORD, LPMONIKER *); <br>        STDMETHODIMP InitFromData(LPDATAOBJECT, BOOL, DWORD); <br>        STDMETHODIMP GetClipboardData(DWORD, LPDATAOBJECT *); <br>        STDMETHODIMP DoVerb(LONG, LPMSG, LPOLECLIENTSITE, LONG <br>            , HWND, LPCRECT); <br>        STDMETHODIMP EnumVerbs(LPENUMOLEVERB *); <br>        STDMETHODIMP Update(void); <br>        STDMETHODIMP IsUpToDate(void); <br>        STDMETHODIMP GetUserClassID(CLSID *); <br>        STDMETHODIMP GetUserType(DWORD, LPTSTR *); <br>        STDMETHODIMP SetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP GetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP Advise(LPADVISESINK, DWORD *); <br>        STDMETHODIMP Unadvise(DWORD); <br>        STDMETHODIMP EnumAdvise(LPENUMSTATDATA *); <br>        STDMETHODIMP GetMiscStatus(DWORD, DWORD *); <br>        STDMETHODIMP SetColorScheme(LPLOGPALETTE); <br>    }; <br> <br> <br>#endif //_IOLEOBJ_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

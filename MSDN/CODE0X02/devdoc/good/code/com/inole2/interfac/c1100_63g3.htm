<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPERSTOR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1173"></a>IPERSTOR.H</h2>
<pre><code>/* <br> * IPERSTOR.H <br> * <br> * Definitions of a template IPersistStorage interface <br> * implementation.  Note that this template includes <br> * state flags used in the implementation to track the <br> * scribble, no scribble, and hands-off states. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _IPERSTOR_H_ <br>#define _IPERSTOR_H_ <br> <br>//State Flags <br>typedef enum <br>    { <br>    PSSTATE_UNINIT,     //Uninitialized <br>    PSSTATE_SCRIBBLE,   //Scribble <br>    PSSTATE_ZOMBIE,     //No scribble <br>    PSSTATE_HANDSOFF    //Hand-off <br>    } PSSTATE; <br> <br> <br> <br>class CImpIPersistStorage; <br>typedef class CImpIPersistStorage *PIMPIPERSISTSTORAGE; <br> <br>class CImpIPersistStorage : public IPersistStorage <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        LPVOID          m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br>        PSSTATE         psState;     //Current State <br> <br> <br>    public: <br>        CImpIPersistStorage(LPVOID, LPUNKNOWN); <br>        ~CImpIPersistStorage(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP InitNew(LPSTORAGE); <br>        STDMETHODIMP Load(LPSTORAGE); <br>        STDMETHODIMP Save(LPSTORAGE, BOOL); <br>        STDMETHODIMP SaveCompleted(LPSTORAGE); <br>        STDMETHODIMP HandsOffStorage(void); <br>    }; <br> <br> <br>#endif  //_IPERSTOR_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

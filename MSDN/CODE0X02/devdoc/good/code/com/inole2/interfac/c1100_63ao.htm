<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1140"></a>IIPAOBJ.CPP</h2>
<pre><code>/* <br> * IIPAOBJ.CPP <br> * <br> * Template IOleInPlaceActiveObject interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iipaobj.h" <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::CImpIOleInPlaceActiveObject <br> * CImpIOleInPlaceActiveObject::~CImpIOleInPlaceActiveObject <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceActiveObject::CImpIOleInPlaceActiveObject(LPVOID pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceActiveObject::~CImpIOleInPlaceActiveObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::QueryInterface <br> * CImpIOleInPlaceActiveObject::AddRef <br> * CImpIOleInPlaceActiveObject::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleInPlaceActiveObject. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceActiveObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceActiveObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object on <br> *  which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if no window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::GetWindow(HWND * phWnd) <br>    { <br>    return E_FAIL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::ContextSensitiveHelp( <br>    BOOL fEnterMode) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::TranslateAccelerator <br> * <br> * Purpose: <br> *  Requests that the active in-place object translate the message <br> *  given in pMSG if appropriate.  This is only called for DLL <br> *  servers where the container's message loop is running.  EXE servers <br> *  have control of the message loop so this will not be called in <br> *  such cases. <br> * <br> * Parameters: <br> *  pMSG            LPMSG to the message to translate. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if translates, S_FALSE if not. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::TranslateAccelerator( <br>    LPMSG pMSG) <br>    { <br>    return S_FALSE; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::OnFrameWindowActivate <br> * <br> * Purpose: <br> *  Informs the in-place object that the container's frame window <br> *  was either activated or deactivated.  The object doesn't need <br> *  to do anything in OLE 2.0. <br> * <br> * Parameters: <br> *  fActivate       BOOL TRUE if frame is active, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::OnFrameWindowActivate( <br>    BOOL fActivate) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::OnDocWindowActivate <br> * <br> * Purpose: <br> *  Informs the in-place object that the document window in the <br> *  container is either becoming active or deactive.  On this call <br> *  the object must either add or remove frame-level tools, <br> *  including the mixed menu, depending on fActivate. <br> * <br> * Parameters: <br> *  fActivate       BOOL TRUE if document is active, FALSE otherwise <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::OnDocWindowActivate( <br>    BOOL fActivate) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::ResizeBorder <br> * <br> * Purpose: <br> *  Informs the object that the frame or document size changed in <br> *  which case the object may need to resize any of its frame or <br> *  document-level tools to match. <br> * <br> * Parameters: <br> *  pRect           LPCRECT indicating the new size of the window <br> *                  of interest. <br> * <br> *  pIUIWindow      LPOLEINPLACEUIWINDOW pointing to an <br> *                  IOleInPlaceUIWindow interface on the container <br> *                  object of interest.  We use this to do <br> *                  border-space negotiation. <br> * <br> *  fFrame          BOOL indicating if the frame was resized <br> *                  (TRUE) or the document (FALSE) <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::ResizeBorder(LPCRECT pRect <br>    , LPOLEINPLACEUIWINDOW pIUIWindow, BOOL fFrame) <br>    { <br>    return E_NOTIMPL; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::EnableModeless <br> * <br> * Purpose: <br> *  Instructs the object to show or hide any modeless popup windows <br> *  that it may be using when activated in-place. <br> * <br> * Parameters: <br> *  fEnable         BOOL indicating to enable/show the windows <br> *                  (TRUE) or to hide them (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::EnableModeless( <br>    BOOL fActivate) <br>    { <br>    return E_NOTIMPL; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

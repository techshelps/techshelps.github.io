<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADVSNK2.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1102"></a>IADVSNK2.CPP</h2>
<pre><code>/* <br> * IADVSNK2.CPP <br> * <br> * Template IAdviseSink2 interface implementation. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "iadvsink.h" <br> <br> <br>/* <br> * CImpIAdviseSink2::CImpIAdviseSink2 <br> * CImpIAdviseSink2::~CImpIAdviseSink2 <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIAdviseSink2::CImpIAdviseSink2(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIAdviseSink2::~CImpIAdviseSink2(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::QueryInterface <br> * CImpIAdviseSink2::AddRef <br> * CImpIAdviseSink2::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIAdviseSink2. <br> */ <br> <br>STDMETHODIMP CImpIAdviseSink2::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink2::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink2::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnDataChange <br> * <br> * Purpose: <br> *  Notifes the advise sink that data changed in a data object. <br> *  On this message you may request a new data rendering and update <br> *  your displays as necessary. <br> * <br> * Parameters: <br> *  pFEIn           LPFORMATETC describing format that changed <br> *  pSTM            LPSTGMEDIUM providing the medium in which the <br> *                  data is provided. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnDataChange(LPFORMATETC pFEIn <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnViewChange <br> * <br> * Purpose: <br> *  Notifes the advise sink that presentation data changed in the <br> *  data object to which we're connected providing the right time <br> *  to update displays using such presentations. <br> * <br> * Parameters: <br> *  dwAspect        DWORD indicating which aspect has changed. <br> *  lindex          LONG indicating the piece that changed. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnViewChange(DWORD dwAspect <br>    , LONG lindex) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnRename <br> * <br> * Purpose: <br> *  Informs the advise sink that a linked compound document object <br> *  has been renamed.  Generally only the OLE default handler cares <br> *  about this. <br> * <br> * Parameters: <br> *  pmk             LPMONIKER providing the new name of the object <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnRename(LPMONIKER pmk) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnSave <br> * <br> * Purpose: <br> *  Informs the advise sink that the compound document object has <br> *  been saved persistently.  The primary purpose of this is for <br> *  containers that want to make optimizations for objects that are <br> *  not in a saved state, so on this you have to disable such <br> *  optimizations.  Generally only the OLE default handler <br> *  cares about this. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnSave(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnClose <br> * <br> * Purpose: <br> *  Informs the advise sink that the compound document object has <br> *  closed and is no longer bound in any way.  Generally only of <br> *  interest to the OLE default handler. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnClose(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink2::OnLinkSrcChange <br> * <br> * Purpose: <br> *  Informs the advise sink that a linked compound document object <br> *  has changed its link source to the object identified by the <br> *  given moniker.  This is generally only of interest to the OLE <br> *  default handler's implementation of linked objects. <br> * <br> * Parameters: <br> *  pmk             LPMONIKER specifying the new link source. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink2::OnLinkSrcChange(LPMONIKER pmk) <br>    { <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DROPSRC.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context865"></a>DROPSRC.CPP</h2>
<pre><code>/* <br> * DROPSRC.CPP <br> * Patron Chapter 20 <br> * <br> * Implementation of a DropSource object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CDropSource::CDropSource <br> * CDropSource::~CDropSource <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CDropSource::CDropSource(void) <br>    { <br>    m_cRef=0; <br>    return; <br>    } <br> <br>CDropSource::~CDropSource(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CDropSource::QueryInterface <br> * CDropSource::AddRef <br> * CDropSource::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDropSource object. <br> */ <br> <br>STDMETHODIMP CDropSource::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IDropSource==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDropSource::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDropSource::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropSource::QueryDragContinue <br> * <br> * Purpose: <br> *  Determines whether to continue a drag operation or cancel it. <br> * <br> * Parameters: <br> *  fEsc            BOOL indicating that the ESC key was pressed. <br> *  grfKeyState     DWORD providing states of keys and mouse buttons <br> * <br> * Return Value: <br> *  HRESULT         DRAGDROP_S_CANCEL to stop the drag, <br> *                  DRAGDROP_S_DROP to drop the data where it is, <br> *                  or NOERROR to continue. <br> */ <br> <br>STDMETHODIMP CDropSource::QueryContinueDrag(BOOL fEsc, DWORD grfKeyState) <br>    { <br>    if (fEsc) <br>        return ResultFromScode(DRAGDROP_S_CANCEL); <br> <br>    if (!(grfKeyState &amp; MK_LBUTTON)) <br>        return ResultFromScode(DRAGDROP_S_DROP); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropSource::GiveFeedback <br> * <br> * Purpose: <br> *  Provides cursor feedback to the user since the source task <br> *  always has the mouse capture.  We can also provide any other <br> *  type of feedback above cursors if we so desire. <br> * <br> * Parameters: <br> *  dwEffect        DWORD effect flags returned from the last target <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if you set a cursor yourself or <br> *                  DRAGDROP_S_USEDEFAULTCURSORS to let OLE do <br> *                  the work. <br> */ <br> <br>STDMETHODIMP CDropSource::GiveFeedback(DWORD dwEffect) <br>    { <br>    return ResultFromScode(DRAGDROP_S_USEDEFAULTCURSORS); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

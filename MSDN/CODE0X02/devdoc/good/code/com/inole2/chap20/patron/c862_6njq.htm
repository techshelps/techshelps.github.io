<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DROPTGT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context866"></a>DROPTGT.CPP</h2>
<pre><code>/* <br> * DROPTGT.CPP <br> * Patron Chapter 20 <br> * <br> * Implementation of a DropTarget object <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CDropTarget::CDropTarget <br> * CDropTarget::~CDropTarget <br> * <br> * Constructor Parameters: <br> *  pDoc            PCPatronDoc of the window containing us. <br> */ <br> <br>CDropTarget::CDropTarget(PCPatronDoc pDoc) <br>    { <br>    m_cRef=0; <br>    m_pDoc=pDoc; <br> <br>    m_pIDataObject=NULL; <br>    return; <br>    } <br> <br> <br>CDropTarget::~CDropTarget(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CDropTarget::QueryInterface <br> * CDropTarget::AddRef <br> * CDropTarget::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDropTarget object. <br> */ <br> <br>STDMETHODIMP CDropTarget::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IDropTarget==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDropTarget::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDropTarget::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragEnter <br> * <br> * Purpose: <br> *  Indicates that data in a drag operation has been dragged over <br> *  our window that's a potential target.  We are to decide if it's <br> *  something in which we're interested. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT providing the source data. <br> *  grfKeyState     DWORD flags: states of keys and mouse buttons. <br> *  pt              POINTL coordinates in the client space of <br> *                  the document. <br> *  pdwEffect       LPDWORD into which we'll place the appropriate <br> *                  effect flag for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragEnter(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    PCPages         ppg=m_pDoc-&gt;m_pPG; <br>    HWND            hWnd; <br>    FORMATETC       fe; <br>    STGMEDIUM       stm; <br>    UINT            uRet; <br> <br>    m_fFeedback=FALSE; <br>    m_pIDataObject=NULL; <br> <br>    if (!m_pDoc-&gt;FQueryPasteFromData(pIDataSource, &amp;fe, NULL)) <br>        { <br>        *pdwEffect=DROPEFFECT_NONE; <br>        return NOERROR; <br>        } <br> <br>    //CHAPTER20MOD <br>    //Check if we can link from this data object as well. <br>    ppg-&gt;m_fLinkAllowed <br>        =(NOERROR==OleQueryLinkFromData(pIDataSource)); <br> <br>    //We never allow it dragging in ourselves. <br>    ppg-&gt;m_fLinkAllowed &amp;= !ppg-&gt;m_fDragSource; <br>    //End CHAPTER20MOD <br> <br>    //Check if this is a valid drop point. <br>    uRet=ppg-&gt;UTestDroppablePoint(&amp;pt); <br>    ppg-&gt;m_uLastTest=uRet; <br> <br>    if (UDROP_NONE==uRet) <br>        *pdwEffect=DROPEFFECT_NONE; <br>    else <br>        { <br>        //Default is move if we can, in fact drop here. <br>        *pdwEffect=DROPEFFECT_MOVE; <br> <br>        //CHAPTER20MOD <br>        if (grfKeyState &amp; MK_CONTROL) <br>            { <br>            if (ppg-&gt;m_fLinkAllowed &amp;&amp; (grfKeyState &amp; MK_SHIFT)) <br>                *pdwEffect=DROPEFFECT_LINK; <br>            else <br>                *pdwEffect=DROPEFFECT_COPY; <br>            } <br>        //End CHAPTER20MOD <br>        } <br> <br>    m_pIDataObject=pIDataSource; <br>    m_pIDataObject-&gt;AddRef(); <br> <br>    /* <br>     * Determine the size of the data, if we can.  The default is <br>     * a small rectangle since we can't easily tell what size <br>     * something will be if we're pulling in a metafile or bitmap. <br>     * It's not a good idea to render it here with GetData just to <br>     * find that out. We only know the size if it's our own object <br>     * in which case a GetData will be fast. <br>     */ <br> <br>    if (fe.cfFormat==m_pDoc-&gt;m_cf) <br>        { <br>        if (SUCCEEDED(pIDataSource-&gt;GetData(&amp;fe, &amp;stm))) <br>            { <br>            PPATRONOBJECT   ppo; <br>            RECT            rc; <br> <br>            ppo=(PPATRONOBJECT)GlobalLock(stm.hGlobal); <br> <br>            SetRect(&amp;rc, (int)ppo-&gt;szl.cx, -(int)ppo-&gt;szl.cy, 0, 0); <br>            RectConvertMappings(&amp;rc, NULL, TRUE); <br>            SETSIZEL(m_szl, rc.left, rc.top); <br> <br>            m_ptPick=ppo-&gt;ptlPick; <br>            m_fe=ppo-&gt;fe; <br> <br>            GlobalUnlock(stm.hGlobal); <br>            ReleaseStgMedium(&amp;stm); <br>            } <br>        } <br>    else <br>        { <br>        SETSIZEL(m_szl, 30, 30); <br>        m_ptPick.x=0; <br>        m_ptPick.y=0; <br>        m_fe.cfFormat=0; <br> <br>        /* <br>         * Try to get CFSTR_OBJECTDESCRIPTOR which might have a size <br>         * and a pick point.  If it exists, then always use the <br>         * point but still default to a 30*30 size if the sizes <br>         * are zero. <br>         */ <br>        uRet=RegisterClipboardFormat(CFSTR_OBJECTDESCRIPTOR); <br>        SETDefFormatEtc(fe, uRet, TYMED_HGLOBAL); <br> <br>        if (SUCCEEDED(pIDataSource-&gt;GetData(&amp;fe, &amp;stm))) <br>            { <br>            LPOBJECTDESCRIPTOR  pOD; <br> <br>            pOD=(LPOBJECTDESCRIPTOR)GlobalLock(stm.hGlobal); <br> <br>            //Get the size, converting to LOMETRIC. <br>            if (0!=pOD-&gt;sizel.cx &amp;&amp; 0!=pOD-&gt;sizel.cy) <br>                { <br>                XformSizeInHimetricToPixels(NULL, &amp;pOD-&gt;sizel <br>                    , &amp;m_szl); <br>                } <br> <br>            //POINTL and SIZEL are interchangeable <br>            XformSizeInHimetricToPixels(NULL, (LPSIZEL)&amp;pOD-&gt;pointl <br>                , (LPSIZEL)&amp;m_ptPick); <br> <br>            GlobalUnlock(stm.hGlobal); <br>            ReleaseStgMedium(&amp;stm); <br>            } <br>        } <br> <br> <br>    //Bring the document window up front, show what a drop will do. <br>    hWnd=m_pDoc-&gt;Window(); <br>    BringWindowToTop(hWnd); <br>    UpdateWindow(hWnd); <br> <br>    ppg-&gt;m_uVScrollCode=NOVALUE; <br>    ppg-&gt;m_uHScrollCode=NOVALUE; <br>    m_fPendingRepaint=FALSE; <br> <br>    pt.x-=m_ptPick.x; <br>    pt.y-=m_ptPick.y; <br> <br>    m_ptLast=pt; <br>    m_fFeedback=TRUE; <br>    ppg-&gt;DrawDropTargetRect(&amp;pt, &amp;m_szl); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragOver <br> * <br> * Purpose: <br> *  Indicates that the mouse was moved inside the window represented <br> *  by this drop target.  This happens on every WM_MOUSEMOVE, so <br> *  this function should be very efficient. <br> * <br> * Parameters: <br> *  grfKeyState     DWORD providing the current keyboard and <br> *                  mouse states <br> *  pt              POINTL where the mouse currently is. <br> *  pdwEffect       LPDWORD in which to store the effect flag <br> *                  for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragOver(DWORD grfKeyState, POINTL pt <br>    , LPDWORD pdwEffect) <br>    { <br>    PCPages     ppg=m_pDoc-&gt;m_pPG; <br>    UINT        uRet, uLast; <br>    UINT        xPos, yPos; <br> <br>    *pdwEffect=DROPEFFECT_NONE; <br> <br>    if (NULL==m_pIDataObject) <br>        return NOERROR; <br> <br>    //Check if this is still a valid point.  uRet used below as well <br>    uRet=ppg-&gt;UTestDroppablePoint(&amp;pt); <br> <br>    if (UDROP_NONE==uRet) <br>        *pdwEffect=DROPEFFECT_NONE; <br>    else <br>        { <br>        //Store these before possibly ORing in DROPEFFECT_SCROLL <br>        *pdwEffect=DROPEFFECT_MOVE; <br> <br>        //CHAPTER20MOD <br>        if (grfKeyState &amp; MK_CONTROL) <br>            { <br>            if (ppg-&gt;m_fLinkAllowed &amp;&amp; (grfKeyState &amp; MK_SHIFT)) <br>                *pdwEffect=DROPEFFECT_LINK; <br>            else <br>                *pdwEffect=DROPEFFECT_COPY; <br>            } <br>        //End CHAPTER20MOD <br>        } <br> <br>    //If we haven't moved and we are not scrolling, then we're done. <br>    if ((pt.x-m_ptPick.x==m_ptLast.x) <br>        &amp;&amp; (pt.y-m_ptPick.y==m_ptLast.y) <br>        &amp;&amp; !((UDROP_INSETHORZ|UDROP_INSETVERT) &amp; ppg-&gt;m_uLastTest)) <br>        { <br>        return NOERROR; <br>        } <br> <br>    //Remove the last feedback rectangle. <br>    if (m_fFeedback) <br>        ppg-&gt;DrawDropTargetRect(&amp;m_ptLast, &amp;m_szl); <br> <br>    uLast=ppg-&gt;m_uLastTest; <br>    ppg-&gt;m_uLastTest=uRet; <br> <br>    if (UDROP_NONE==uRet) <br>        { <br>        //If we're now an invalid point, better repaint as necessary <br>        if (m_fPendingRepaint) <br>            { <br>            UpdateWindow(ppg-&gt;m_hWnd); <br>            m_fPendingRepaint=FALSE; <br>            } <br> <br>        ppg-&gt;m_uVScrollCode=NOVALUE; <br>        ppg-&gt;m_uHScrollCode=NOVALUE; <br>        m_fFeedback=FALSE; <br>        return NOERROR; <br>        } <br> <br> <br>    /* <br>     * Scrolling is a little tricky:  We get a DragOver pulse even <br>     * if we didn't move.  First we have to delay scrolling for <br>     * ppg-&gt;m_uScrollDelay clock ticks which we can determine using <br>     * GetTickCount.  Timers do not work here since we may not be <br>     * yielding to our message loop. <br>     * <br>     * Once we know we are scrolling then we determine if we <br>     * scroll again or if we reset the scrolling state. <br>     */ <br> <br>    if ((UDROP_INSETHORZ &amp; uLast) &amp;&amp; !(UDROP_INSETHORZ &amp; uRet)) <br>        ppg-&gt;m_uHScrollCode=NOVALUE; <br> <br>    if (!(UDROP_INSETHORZ &amp; uLast) &amp;&amp; (UDROP_INSETHORZ &amp; uRet)) <br>        { <br>        ppg-&gt;m_dwTimeLast=GetTickCount(); <br>        ppg-&gt;m_uHScrollCode=(0!=(UDROP_INSETLEFT &amp; uRet)) <br>            ? SB_LINELEFT : SB_LINERIGHT; //Same as UP &amp; DOWN codes. <br>        } <br> <br>    if ((UDROP_INSETVERT &amp; uLast) &amp;&amp; !(UDROP_INSETVERT &amp; uRet)) <br>        ppg-&gt;m_uVScrollCode=NOVALUE; <br> <br>    if (!(UDROP_INSETVERT &amp; uLast) &amp;&amp; (UDROP_INSETVERT &amp; uRet)) <br>        { <br>        ppg-&gt;m_dwTimeLast=GetTickCount(); <br>        ppg-&gt;m_uVScrollCode=(0!=(UDROP_INSETTOP &amp; uRet)) <br>            ? SB_LINEUP : SB_LINEDOWN; <br>        } <br> <br>    //Only change the last time if ALL scrolling stops. <br>    if (NOVALUE==ppg-&gt;m_uHScrollCode &amp;&amp; NOVALUE==ppg-&gt;m_uVScrollCode) <br>        ppg-&gt;m_dwTimeLast=0L; <br> <br>    //Set the scroll effect on any inset hit. <br>    if ((UDROP_INSETHORZ | UDROP_INSETVERT) &amp; uRet) <br>        *pdwEffect |= DROPEFFECT_SCROLL; <br> <br>    xPos=ppg-&gt;m_xPos; <br>    yPos=ppg-&gt;m_yPos; <br> <br>    //Has the delay elapsed?  We can scroll if so <br>    if (ppg-&gt;m_dwTimeLast!=0 <br>        &amp;&amp; (GetTickCount()-ppg-&gt;m_dwTimeLast) <br>        &gt; (DWORD)ppg-&gt;m_uScrollDelay) <br>        { <br>        if (NOVALUE!=ppg-&gt;m_uHScrollCode) <br>            { <br>            m_fPendingRepaint=TRUE; <br>            SendMessage(ppg-&gt;m_hWnd, WM_HSCROLL <br>                , ppg-&gt;m_uHScrollCode, 0L); <br>            } <br> <br>        if (NOVALUE!=ppg-&gt;m_uVScrollCode) <br>            { <br>            m_fPendingRepaint=TRUE; <br>            SendMessage(ppg-&gt;m_hWnd, WM_VSCROLL <br>                , ppg-&gt;m_uVScrollCode, 0L); <br>            } <br>        } <br> <br>    //If we didn't scroll but have a pending repaint, do it now. <br>    if (xPos==ppg-&gt;m_xPos &amp;&amp; yPos==ppg-&gt;m_yPos &amp;&amp; m_fPendingRepaint) <br>        { <br>        UpdateWindow(ppg-&gt;m_hWnd); <br>        m_fPendingRepaint=FALSE; <br>        } <br> <br>    pt.x-=m_ptPick.x; <br>    pt.y-=m_ptPick.y; <br> <br>    m_ptLast=pt; <br>    m_fFeedback=TRUE; <br>    ppg-&gt;DrawDropTargetRect(&amp;pt, &amp;m_szl); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragLeave <br> * <br> * Purpose: <br> *  Informs the drop target that the operation has left its window. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragLeave(void) <br>    { <br>    PCPages         ppg=m_pDoc-&gt;m_pPG; <br> <br>    if (NULL==m_pIDataObject) <br>        return NOERROR; <br> <br>    //Stop scrolling <br>    ppg-&gt;m_uHScrollCode=NOVALUE; <br>    ppg-&gt;m_uVScrollCode=NOVALUE; <br> <br>    if (m_fPendingRepaint) <br>        UpdateWindow(ppg-&gt;m_hWnd); <br> <br>    //Remove the last feedback rectangle. <br>    if (m_fFeedback) <br>        ppg-&gt;DrawDropTargetRect(&amp;m_ptLast, &amp;m_szl); <br> <br>    m_fFeedback=FALSE; <br>    m_pIDataObject-&gt;Release(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::Drop <br> * <br> * Purpose: <br> *  Instructs the drop target to paste the data that was just now <br> *  dropped on it. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT from which we'll paste. <br> *  grfKeyState     DWORD providing current keyboard/mouse state. <br> *  pt              POINTL at which the drop occurred. <br> *  pdwEffect       LPDWORD in which to store what you did. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::Drop(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    PCPages         ppg=m_pDoc-&gt;m_pPG; <br>    BOOL            fRet=TRUE; <br>    FORMATETC       fe; <br>    TENANTTYPE      tType; <br>    PATRONOBJECT    po; <br>    POINT           ptS; <br> <br>    *pdwEffect=DROPEFFECT_NONE; <br> <br>    if (NULL==m_pIDataObject) <br>        return ResultFromScode(E_FAIL); <br> <br>    if (UDROP_NONE==ppg-&gt;UTestDroppablePoint(&amp;pt)) <br>        return ResultFromScode(E_FAIL); <br> <br>    //Stop scrolling <br>    ppg-&gt;m_uHScrollCode=NOVALUE; <br>    ppg-&gt;m_uVScrollCode=NOVALUE; <br> <br>    if (m_fPendingRepaint) <br>        UpdateWindow(ppg-&gt;m_hWnd); <br> <br>    //2.  Remove the UI feedback <br>    if (m_fFeedback) <br>        ppg-&gt;DrawDropTargetRect(&amp;m_ptLast, &amp;m_szl); <br> <br>    m_pIDataObject-&gt;Release(); <br> <br> <br>    /* <br>     * Check if we can do the paste, and if so, tell our pasting <br>     * mechanism exactly where to place us. <br>     */ <br>    pt.x-=m_ptPick.x; <br>    pt.y-=m_ptPick.y; <br> <br>    POINTFROMPOINTL(ptS, pt); <br>    ScreenToClient(ppg-&gt;Window(), &amp;ptS); <br>    POINTLFROMPOINT(po.ptl, ptS); <br> <br>    //This is true if we didn't see placement data in DragEnter <br>    if (0!=m_fe.cfFormat) <br>        { <br>        po.szl.cx=m_szl.cx;         //We stored these positive <br>        po.szl.cy=-m_szl.cy; <br>        } <br>    else <br>        SETSIZEL(po.szl, 0, 0); //Ask object for its size. <br> <br>    //Adjust for scrolling and mapping mode. <br>    ppg-&gt;AdjustPosition(&amp;po.ptl, &amp;po.szl); <br> <br> <br>    /* <br>     * If we're in the same document and moving, then we can just <br>     * stuff the Pages' m_ptDrop which will move us and return. <br>     */ <br>    if (ppg-&gt;m_fDragSource &amp;&amp; !(grfKeyState &amp; MK_CONTROL)) <br>        { <br>        *pdwEffect=DROPEFFECT_MOVE; <br>        ppg-&gt;m_fMoveInPage=TRUE; <br>        ppg-&gt;m_ptDrop=po.ptl; <br>        return NOERROR; <br>        } <br> <br>    /* <br>     * Otherwise, paste either from another document or from <br>     * the same document which will always be a copy to the new <br>     * point. <br>     */ <br> <br>    //CHAPTER20MOD <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        { <br>        if (ppg-&gt;m_fLinkAllowed &amp;&amp; (grfKeyState &amp; MK_SHIFT)) <br>            *pdwEffect=DROPEFFECT_LINK; <br>        else <br>            *pdwEffect=DROPEFFECT_COPY; <br>        } <br> <br>    ppg-&gt;m_fMoveInPage=FALSE; <br> <br>    /* <br>     * We know linking is desired if effect flag is set, so this <br>     * function will get the FORMATETC for linking.  Otherwise <br>     * FQueryPasteFromData will get the other FORMATETC to use. <br>     */ <br>    if (DROPEFFECT_LINK==*pdwEffect) <br>        { <br>        fRet=m_pDoc-&gt;FQueryPasteLinkFromData(pIDataSource, &amp;fe <br>            , &amp;tType); <br>        } <br>    else <br>        fRet=m_pDoc-&gt;FQueryPasteFromData(pIDataSource, &amp;fe, &amp;tType); <br>    //End CHAPTER20MOD <br> <br>    if (fRet) <br>        { <br>        //Copy the real format if we have placement data. <br>        po.fe=(m_pDoc-&gt;m_cf==fe.cfFormat) ? m_fe : fe; <br> <br>        //Flag PasteFromData to use CFSTR_OBJECTDESCRIPTOR <br>        fRet=m_pDoc-&gt;PasteFromData(pIDataSource, &amp;fe, tType <br>            , &amp;po, 0, TRUE); <br>        } <br> <br>    if (!fRet) <br>        return ResultFromScode(E_FAIL); <br> <br> <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context654"></a>IDATAOBJ.CPP</h2>
<pre><code>/* <br> * IDATAOBJ.CPP <br> * Data Transfer Object Chapter 12 <br> * <br> * Implementation of the IDataObject interface for CDataObject. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "dataobj.h" <br> <br> <br>/* <br> * CImpIDataObject::CImpIDataObject <br> * CImpIDataObject::~CImpIDataObject <br> * <br> * Parameters (Constructor): <br> *  pObj            PCDataObject of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDataObject::CImpIDataObject(PCDataObject pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDataObject::~CImpIDataObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryInterface <br> * CImpIDataObject::AddRef <br> * CImpIDataObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIDataObject object. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetData <br> * <br> * Purpose: <br> *  Retrieves data described by a specific FormatEtc into a StgMedium <br> *  allocated by this function.  Used like GetClipboardData. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM in which to return the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    UINT        i, cItems; <br>    PRENDERING  pRen; <br>    DWORD       cb; <br>    HWND        hList; <br> <br>    if (NULL==m_pObj-&gt;m_hList || NULL==pFE || NULL==pSTM) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    hList=m_pObj-&gt;m_hList; <br>    cItems=(UINT)SendMessage(hList, LB_GETCOUNT, 0, 0L); <br> <br>    for (i=0; i &lt; cItems; i++) <br>        { <br>        cb=SendMessage(hList, LB_GETTEXT, i, (LPARAM)&amp;pRen); <br> <br>        if (LB_ERR!=cb) <br>            { <br>            /* <br>             * Check if the requested FORMATETC is the same as one <br>             * that we already have. If so, then copy that STGMEDIUM <br>             * to pSTM and AddRef ourselves for pUnkForRelease. <br>             */ <br>            if (pFE-&gt;cfFormat==pRen-&gt;fe.cfFormat <br>                &amp;&amp; (pFE-&gt;tymed &amp; pRen-&gt;fe.tymed) <br>                &amp;&amp; pFE-&gt;dwAspect==pRen-&gt;fe.dwAspect) <br>                { <br>                /* <br>                 * ReleaseStgMedium will Release both storage <br>                 * and stream elements regardless of the value <br>                 * of pUnkForRelease, so we have to AddRef the <br>                 * element and bump our own ref count here. <br>                 */ <br>                if (TYMED_ISTORAGE==pRen-&gt;fe.tymed) <br>                      pRen-&gt;stm.pstg-&gt;AddRef(); <br> <br>                if (TYMED_ISTREAM==pRen-&gt;fe.tymed) <br>                      pRen-&gt;stm.pstm-&gt;AddRef(); <br> <br>                *pSTM=pRen-&gt;stm; <br>                AddRef(); <br>                return NOERROR; <br>                } <br>            } <br>        } <br> <br>    return ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br>/* <br> * CImpIDataObject::GetDataHere <br> * <br> * Purpose: <br> *  Copies a piece of data in this data object to another <br> *  STGMEDIUM.  This is only supported for TYMED_ISTORAGE <br> *  and TYMED_ISTREAM. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM pointing to the medium into which <br> *                  we copy. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetDataHere(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    UINT        i, cItems; <br>    PRENDERING  pRen; <br>    DWORD       cb; <br>    HWND        hList; <br> <br>    if (NULL==m_pObj-&gt;m_hList || NULL==pFE || NULL==pSTM) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    //We only support IStorage and IStream <br>    if (!(TYMED_ISTORAGE &amp; pFE-&gt;tymed) <br>        &amp;&amp; !(TYMED_ISTREAM &amp; pFE-&gt;tymed)) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    hList=m_pObj-&gt;m_hList; <br>    cItems=(UINT)SendMessage(hList, LB_GETCOUNT, 0, 0L); <br> <br>    for (i=0; i &lt; cItems; i++) <br>        { <br>        cb=SendMessage(hList, LB_GETTEXT, i, (LPARAM)&amp;pRen); <br> <br>        if (LB_ERR!=cb) <br>            { <br>            /* <br>             * When we find a matching FORMATETC, we know we're <br>             * only looking for IStorage or IStream (we checked <br>             * above), so use IStorage::CopyTo or IStream::CopyTo <br>             * to make the copy. <br>             */ <br>            if (pFE-&gt;cfFormat==pRen-&gt;fe.cfFormat <br>                &amp;&amp; (pFE-&gt;tymed &amp; pRen-&gt;fe.tymed) <br>                &amp;&amp; pFE-&gt;dwAspect==pRen-&gt;fe.dwAspect) <br>                { <br>                if (TYMED_ISTORAGE==pFE-&gt;tymed) <br>                    { <br>                    pSTM-&gt;tymed=TYMED_ISTORAGE; <br>                    return pRen-&gt;stm.pstg-&gt;CopyTo(NULL, NULL <br>                        , NULL, pSTM-&gt;pstg); <br>                    } <br>                else <br>                    { <br>                    STATSTG     st; <br> <br>                    pRen-&gt;stm.pstm-&gt;Stat(&amp;st, STATFLAG_NONAME); <br>                    pSTM-&gt;tymed=TYMED_ISTREAM; <br> <br>                    return pRen-&gt;stm.pstm-&gt;CopyTo(pSTM-&gt;pstm <br>                        , st.cbSize, NULL, NULL); <br>                    } <br>                } <br>            } <br>        } <br> <br>    return ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryGetData <br> * <br> * Purpose: <br> *  Tests if a call to GetData with this FormatEtc will provide <br> *  any rendering; used like IsClipboardFormatAvailable. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryGetData(LPFORMATETC pFE) <br>    { <br>    UINT        i, cItems; <br>    PRENDERING  pRen; <br>    DWORD       cb; <br>    HWND        hList; <br> <br>    if (NULL==m_pObj-&gt;m_hList || NULL==pFE) <br>        return ResultFromScode(S_FALSE); <br> <br>    hList=m_pObj-&gt;m_hList; <br>    cItems=(UINT)SendMessage(hList, LB_GETCOUNT, 0, 0L); <br> <br>    for (i=0; i &lt; cItems; i++) <br>        { <br>        cb=SendMessage(hList, LB_GETTEXT, i, (LPARAM)&amp;pRen); <br> <br>        if (LB_ERR!=cb) <br>            { <br>            /* <br>             * Check if the requested FORMATETC is the same as one <br>             * that we already have. <br>             */ <br>            if (pFE-&gt;cfFormat==pRen-&gt;fe.cfFormat <br>                &amp;&amp; (pFE-&gt;tymed &amp; pRen-&gt;fe.tymed) <br>                &amp;&amp; pFE-&gt;dwAspect==pRen-&gt;fe.dwAspect) <br>                { <br>                return NOERROR; <br>                } <br>            } <br>        } <br> <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::SetData <br> * <br> * Purpose: <br> *  Places data described by a FormatEtc and living in a StgMedium <br> *  into the object.  The object may be responsible to clean up the <br> *  StgMedium before exiting. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the data to set. <br> *  pSTM            LPSTGMEDIUM containing the data. <br> *  fRelease        BOOL indicating if this function is responsible <br> *                  for freeing the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::SetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM, BOOL fRelease) <br>    { <br>    PRENDERING      prn; <br> <br>    //We have to remain responsible for the data. <br>    if (!fRelease) <br>        return ResultFromScode(E_FAIL); <br> <br>    //If we're handed NULLs, that means clean out the list. <br>    if (NULL==pFE || NULL==pSTM) <br>        { <br>        m_pObj-&gt;Purge(); <br>        return NOERROR; <br>        } <br> <br>    /* <br>     * Here we take the rendering we're given and attach it to the <br>     * end of the list.  We save the original pSTM-&gt;pUnkForRelease <br>     * and replace it with our own such that each 'copy' of this <br>     * data is actually just a reference count. <br>     */ <br> <br>    prn=new RENDERING; <br> <br>    if (NULL==prn) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    prn-&gt;fe=*pFE; <br>    prn-&gt;stm=*pSTM; <br>    prn-&gt;pUnkOrg=pSTM-&gt;pUnkForRelease; <br>    prn-&gt;stm.pUnkForRelease=this; <br> <br>    SendMessage(m_pObj-&gt;m_hList, LB_ADDSTRING, 0, (LONG)prn); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::EnumFormatEtc <br> * <br> * Purpose: <br> *  Returns an IEnumFORMATETC object through which the caller can <br> *  iterate to learn about all the data formats this object can <br> *  provide through either GetData[Here] or SetData. <br> * <br> * Parameters: <br> *  dwDir           DWORD describing a data direction, either <br> *                  DATADIR_SET or DATADIR_GET. <br> *  ppEnum          LPENUMFORMATETC * in which to return the <br> *                  pointer to the enumerator. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::EnumFormatEtc(DWORD dwDir <br>    , LPENUMFORMATETC *ppEnum) <br>    { <br>    PCEnumFormatEtc     pEnum; <br> <br>    *ppEnum=NULL; <br> <br>    /* <br>     * From an external point of view there are no SET formats, <br>     * because we want to allow the user of this component object <br>     * to be able to stuff ANY format in via Set.  Only external <br>     * users will call EnumFormatEtc and they can only Get. <br>     */ <br> <br>    switch (dwDir) <br>        { <br>        case DATADIR_GET: <br>             pEnum=new CEnumFormatEtc(m_pUnkOuter); <br>             break; <br> <br>        case DATADIR_SET: <br>        default: <br>            pEnum=NULL; <br>            break; <br>        } <br> <br>    if (NULL==pEnum) <br>        return ResultFromScode(E_FAIL); <br>    else <br>        { <br>        //Let the enumerator copy our format list. <br>        if (!pEnum-&gt;Init(m_pObj-&gt;m_hList)) <br>            { <br>            delete pEnum; <br>            return ResultFromScode(E_FAIL); <br>            } <br> <br>        pEnum-&gt;AddRef(); <br>        } <br> <br>    *ppEnum=pEnum; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetCanonicalFormatEtc <br> * CImpIDataObject::DAdvise <br> * CImpIDataObject::DUnadvise <br> * CImpIDataObject::EnumDAdvise <br> * <br> * Trivial member functions. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetCanonicalFormatEtc <br>    (LPFORMATETC pFEIn, LPFORMATETC pFEOut) <br>    { <br>    return ResultFromScode(DATA_S_SAMEFORMATETC); <br>    } <br> <br>STDMETHODIMP CImpIDataObject::DAdvise(LPFORMATETC pFE <br>    , DWORD dwFlags, LPADVISESINK pIAdviseSink, LPDWORD pdwConn) <br>    { <br>    return ResultFromScode(E_FAIL); <br>    } <br> <br>STDMETHODIMP CImpIDataObject::DUnadvise(DWORD dwConn) <br>    { <br>    return ResultFromScode(E_FAIL); <br>    } <br> <br>STDMETHODIMP CImpIDataObject::EnumDAdvise(LPENUMSTATDATA *ppEnum) <br>    { <br>    return ResultFromScode(E_FAIL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

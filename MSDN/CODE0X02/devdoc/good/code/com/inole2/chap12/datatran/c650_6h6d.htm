<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IENUMFE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context655"></a>IENUMFE.CPP</h2>
<pre><code>/* <br> * IENUMFE.CPP <br> * Data Tranfer Object for Chapter 12 <br> * <br> * IEnumFORMATETC implementation specifically for the Data Tranfer <br> * objects.  This enumerator copies the state of the data list in <br> * the data object and uses that to maintain what FORMATETCs it <br> * knows. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "dataobj.h" <br> <br> <br>extern HINSTANCE g_hInst; <br> <br> <br>/* <br> * CEnumFormatEtc::CEnumFormatEtc <br> * CEnumFormatEtc::~CEnumFormatEtc <br> * <br> * Parameters (Constructor): <br> *  pUnkRef         LPUNKNOWN to use for reference counting. <br> */ <br> <br>CEnumFormatEtc::CEnumFormatEtc(LPUNKNOWN pUnkRef) <br>    { <br>    m_cRef=0; <br>    m_pUnkRef=pUnkRef; <br>    m_iCur=0; <br>    m_cItems=0; <br>    return; <br>    } <br> <br> <br>CEnumFormatEtc::~CEnumFormatEtc(void) <br>    { <br>    if (NULL!=m_prgfe) <br>        { <br>        LPMALLOC    pIMalloc; <br> <br>        if (SUCCEEDED(CoGetMalloc(MEMCTX_TASK, &amp;pIMalloc))) <br>            { <br>            pIMalloc-&gt;Free(m_prgfe); <br>            pIMalloc-&gt;Release(); <br>            } <br>        } <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CEnumFormatEtc::Init <br> * <br> * Purpose: <br> *  Copies the FORMATETCs in the data object's listbox into our <br> *  own, that is, we make a snapshot for this enumerator. <br> * <br> * Parameters: <br> *  hList           HWND of the listbox containing RENDERINGs <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization worked, <br> *                  FALSE otherwise. <br> */ <br>BOOL CEnumFormatEtc::Init(HWND hList) <br>    { <br>    UINT        i, cItems; <br>    LPMALLOC    pIMalloc; <br>    PRENDERING  pRen; <br>    LPFORMATETC pFE; <br>    DWORD       cb; <br> <br>    if (NULL==hList) <br>        return FALSE; <br> <br>    cItems=(UINT)SendMessage(hList, LB_GETCOUNT, 0, 0L); <br> <br>    if (FAILED(CoGetMalloc(MEMCTX_TASK, &amp;pIMalloc))) <br>        return FALSE; <br> <br>    m_prgfe=(LPFORMATETC)pIMalloc-&gt;Alloc(cItems*sizeof(FORMATETC)); <br>    pIMalloc-&gt;Release(); <br> <br>    if (NULL!=m_prgfe) <br>        { <br>        pFE=m_prgfe; <br> <br>        for (i=0; i &lt; cItems; i++) <br>            { <br>            cb=SendMessage(hList, LB_GETTEXT, i, (LPARAM)&amp;pRen); <br> <br>            if (LB_ERR!=cb) <br>                { <br>                //Copy just the FORMATETC <br>                *pFE++=pRen-&gt;fe; <br>                m_cItems++; <br>                } <br>            } <br>        } <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CEnumFormatEtc::QueryInterface <br> * CEnumFormatEtc::AddRef <br> * CEnumFormatEtc::Release <br> * <br> * Purpose: <br> *  IUnknown members for CEnumFormatEtc object.  For QueryInterface <br> *  we only return out own interfaces and not those of the data <br> *  object.  However, since enumerating formats only makes sense <br> *  when the data object is around, we insure that it stays as <br> *  long as we stay by calling an outer IUnknown for AddRef and <br> *  Release.  But since we are not controlled by the lifetime of <br> *  the outer object, we still keep our own reference count in <br> *  order to free ourselves. <br> */ <br> <br>STDMETHODIMP CEnumFormatEtc::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * Enumerators are separate objects, not the data object, so <br>     * we only need to support out IUnknown and IEnumFORMATETC <br>     * interfaces here with no concern for aggregation. <br>     */ <br>    if (IID_IUnknown==riid || IID_IEnumFORMATETC==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CEnumFormatEtc::AddRef(void) <br>    { <br>    ++m_cRef; <br>    m_pUnkRef-&gt;AddRef(); <br>    return m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CEnumFormatEtc::Release(void) <br>    { <br>    m_pUnkRef-&gt;Release(); <br> <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CEnumFormatEtc::Next <br> * CEnumFormatEtc::Skip <br> * CEnumFormatEtc::Reset <br> * CEnumFormatEtc::Clone <br> * <br> * Standard enumerator members for IEnumFORMATETC <br> */ <br> <br>STDMETHODIMP CEnumFormatEtc::Next(ULONG cFE, LPFORMATETC pFE <br>    , ULONG *pulFE) <br>    { <br>    ULONG           cReturn=0L; <br> <br>    if (NULL==m_prgfe) <br>        return ResultFromScode(S_FALSE); <br> <br>    if (NULL==pulFE) <br>        { <br>        if (1L!=cFE) <br>            return ResultFromScode(E_POINTER); <br>        } <br>    else <br>        *pulFE=0L; <br> <br>    if (NULL==pFE || m_iCur &gt;= m_cItems) <br>        return ResultFromScode(S_FALSE); <br> <br>    while (m_iCur &lt; m_cItems &amp;&amp; cFE &gt; 0) <br>        { <br>        *pFE++=m_prgfe[m_iCur++]; <br>        cReturn++; <br>        cFE--; <br>        } <br> <br>    if (NULL!=pulFE) <br>        *pulFE=cReturn; <br> <br>    return NOERROR; <br>    } <br> <br> <br>STDMETHODIMP CEnumFormatEtc::Skip(ULONG cSkip) <br>    { <br>    if ((m_iCur+cSkip) &gt;= m_cItems) <br>        return ResultFromScode(S_FALSE); <br> <br>    m_iCur+=cSkip; <br>    return NOERROR; <br>    } <br> <br> <br>STDMETHODIMP CEnumFormatEtc::Reset(void) <br>    { <br>    m_iCur=0; <br>    return NOERROR; <br>    } <br> <br> <br>STDMETHODIMP CEnumFormatEtc::Clone(LPENUMFORMATETC *ppEnum) <br>    { <br>    PCEnumFormatEtc     pNew; <br>    LPMALLOC            pIMalloc; <br>    LPFORMATETC         prgfe; <br>    BOOL                fRet=TRUE; <br>    ULONG               cb; <br> <br>    *ppEnum=NULL; <br> <br>    //Copy the memory for the list. <br>    if (FAILED(CoGetMalloc(MEMCTX_TASK, &amp;pIMalloc))) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    cb=m_cItems*sizeof(FORMATETC); <br>    prgfe=(LPFORMATETC)pIMalloc-&gt;Alloc(cb); <br> <br>    if (NULL!=prgfe) <br>        { <br>        //Copy the formats <br>        memcpy(prgfe, m_prgfe, (int)cb); <br> <br>        //Create the clone <br>        pNew=new CEnumFormatEtc(m_pUnkRef); <br> <br>        if (NULL!=pNew) <br>            { <br>            pNew-&gt;m_iCur=m_iCur; <br>            pNew-&gt;m_prgfe=prgfe; <br>            pNew-&gt;AddRef(); <br>            fRet=TRUE; <br>            } <br>        } <br> <br>    pIMalloc-&gt;Release(); <br> <br>    *ppEnum=pNew; <br>    return fRet ? NOERROR : ResultFromScode(E_OUTOFMEMORY); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

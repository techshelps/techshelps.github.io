<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATRON.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context665"></a>PATRON.H</h2>
<pre><code>/* <br> * PATRON.H <br> * Patron Chapter 12 <br> * <br> * Single include file that pulls in everything needed for other <br> * source files in the application. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _PATRON_H_ <br>#define _PATRON_H_ <br> <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;ole2ver.h&gt; <br>#include &lt;olestd.h&gt; <br>#include &lt;bookguid.h&gt; <br> <br>extern "C" <br>    { <br>    #include &lt;commdlg.h&gt; <br>   #ifndef WIN32 <br>    #include &lt;print.h&gt; <br>   #endif <br>    } <br> <br>#include &lt;classlib.h&gt; <br>#include "resource.h" <br>#include "pages.h" <br> <br>/* <br> * UINT value such that adding one produces zero.  Portable to Win32. <br> * This is used to represent a non-existent zero-based UINT value <br> */ <br>#define NOVALUE                     ((UINT)-1) <br> <br> <br>//PATRON.CPP:  Frame object that creates a main window <br> <br>class CPatronFrame : public CFrame <br>    { <br>    private: <br>        BOOL            m_fInitialized;     //OleInitialize worked <br>        BOOL            m_fOleStdInit;      //OleStdInitialize worked <br>        LPCLASSFACTORY  m_pIClassDataTran;  //For locking. <br> <br>    protected: <br>        //Overridable for creating a CPatronClient <br>        virtual PCClient    CreateCClient(void); <br> <br>        virtual BOOL        FMessageHook(HWND, UINT, WPARAM, LPARAM <br>                                , LRESULT *); <br>        virtual BOOL        FRegisterAllClasses(void); <br>        virtual UINT        CreateGizmos(void); <br>        virtual LRESULT     OnCommand(HWND, WPARAM, LPARAM); <br> <br>    public: <br>        CPatronFrame(HINSTANCE, HINSTANCE, LPSTR, int); <br>        virtual ~CPatronFrame(void); <br> <br>        //Overrides <br>        virtual BOOL        FInit(PFRAMEINIT); <br> <br>        virtual void        UpdateMenus(HMENU, UINT); <br>        virtual void        UpdateGizmos(void); <br> <br>    }; <br> <br> <br>typedef CPatronFrame *PCPatronFrame; <br> <br> <br> <br> <br> <br>//CLIENT.CPP <br> <br>/* <br> * The only reason we have a derived class here is to override <br> * CreateCDocument so we can create our own type as well as <br> * overriding NewDocument to perform one other piece of work once <br> * the document's been created. <br> */ <br> <br>class CPatronClient : public CClient <br>    { <br>    protected: <br>        //Overridable for creating a new CDocument <br>        virtual PCDocument CreateCDocument(void); <br> <br>    public: <br>        CPatronClient(HINSTANCE); <br>        virtual ~CPatronClient(void); <br>    }; <br> <br> <br>typedef CPatronClient *PCPatronClient; <br> <br> <br> <br> <br>//DOCUMENT.CPP <br> <br>//Constant ID for the pages window that lives in a document window <br>#define ID_PAGES            723 <br> <br> <br>class CPatronDoc : public CDocument <br>    { <br>    //These need access to FQueryPasteFromData, FPasteFromData <br>    friend class CDropTarget; <br>    friend class CDropSource; <br> <br>    protected: <br>        LONG            m_lVer;         //Loaded data version <br>        PCPages         m_pPG;          //Pages window in us <br>        LPSTORAGE       m_pIStorage;    //Root storage for document <br>        BOOL            m_fPrintSetup; <br> <br>        class CDropTarget *m_pDropTarget;   //Registered target <br> <br>        UINT            m_cfEmbeddedObject; //Clipboard formats <br>        UINT            m_cfObjectDescriptor; <br>        //CHAPTER12MOD <br>        UINT            m_cfLinkSource; <br>        UINT            m_cfLinkSrcDescriptor; <br>        BOOL            m_fShowTypes;       //Show Objects active? <br>        //End CHAPTER12MOD <br> <br>    protected: <br>        virtual BOOL    FMessageHook(HWND, UINT, WPARAM, LPARAM <br>            , LRESULT *); <br> <br>        BOOL            FQueryPasteFromData(LPDATAOBJECT <br>                            , LPFORMATETC, PTENANTTYPE); <br>        //CHAPTER12MOD <br>        BOOL            FQueryPasteLinkFromData(LPDATAOBJECT <br>                            , LPFORMATETC, PTENANTTYPE); <br>        //End CHAPTER12MOD <br>        BOOL            FPasteFromData(LPDATAOBJECT, LPFORMATETC <br>                            , TENANTTYPE, PPATRONOBJECT, DWORD <br>                            , BOOL); <br> <br>    public: <br>        CPatronDoc(HINSTANCE, PCFrame); <br>        virtual ~CPatronDoc(void); <br> <br>        virtual BOOL    FInit(PDOCUMENTINIT); <br>        virtual void    Clear(void); <br> <br>        virtual BOOL    FDirtyGet(void); <br>        virtual void    Delete(void); <br>        virtual BOOL    FQueryPrinterSetup(void); <br>        virtual BOOL    FQueryObjectSelected(HMENU); <br> <br>        virtual UINT    ULoad(BOOL, LPTSTR); <br>        virtual UINT    USave(UINT, LPTSTR); <br> <br>        virtual BOOL    Print(HWND); <br>        virtual UINT    PrinterSetup(HWND, BOOL); <br> <br>        virtual BOOL    FClip(HWND, BOOL); <br>        virtual BOOL    FQueryPaste(void); <br>        virtual BOOL    FPaste(HWND); <br>        virtual BOOL    FPasteSpecial(HWND); <br> <br>        //CHAPTER12MOD <br>        virtual BOOL    FQueryEnableEditLinks(void); <br>        virtual BOOL    FEditLinks(HWND); <br>        virtual BOOL    FShowOrQueryObjectTypes(BOOL, BOOL); <br>        //End CHAPTER12MOD <br> <br>        virtual UINT    NewPage(void); <br>        virtual UINT    DeletePage(void); <br>        virtual UINT    NextPage(void); <br>        virtual UINT    PreviousPage(void); <br>        virtual UINT    FirstPage(void); <br>        virtual UINT    LastPage(void); <br> <br>        virtual void    Rename(LPTSTR); <br>        virtual BOOL    FInsertObject(HWND); <br>        virtual void    ActivateObject(LONG); <br>    }; <br> <br>typedef CPatronDoc *PCPatronDoc; <br> <br>//Hook for Print Dialog to hide Setup... button <br>UINT CALLBACK PrintDlgHook(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//Drag-drop objects we need in the document <br> <br>class CDropTarget : public IDropTarget <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        PCPatronDoc         m_pDoc; <br> <br>        LPDATAOBJECT        m_pIDataObject;  //From DragEnter <br>        BOOL                m_fPendingRepaint; <br>        POINTL              m_ptPick;        //Pick-up offsets <br>        POINTL              m_ptLast;        //Last drag point <br>        SIZEL               m_szl;           //Object size <br>        BOOL                m_fFeedback;     //Draw feedback? <br>        FORMATETC           m_fe;            //Real dropping format <br> <br>    public: <br>        CDropTarget(PCPatronDoc); <br>        ~CDropTarget(void); <br> <br>        //IDropTarget interface members <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP DragEnter(LPDATAOBJECT, DWORD, POINTL,LPDWORD); <br>        STDMETHODIMP DragOver(DWORD, POINTL, LPDWORD); <br>        STDMETHODIMP DragLeave(void); <br>        STDMETHODIMP Drop(LPDATAOBJECT, DWORD, POINTL, LPDWORD); <br>    }; <br> <br> <br>typedef CDropTarget *PCDropTarget; <br> <br> <br>class CDropSource : public IDropSource <br>    { <br>    protected: <br>        ULONG               m_cRef; <br> <br>    public: <br>        CDropSource(void); <br>        ~CDropSource(void); <br> <br>        //IDropSource interface members <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP QueryContinueDrag(BOOL, DWORD); <br>        STDMETHODIMP GiveFeedback(DWORD); <br>    }; <br> <br>typedef CDropSource *PCDropSource; <br> <br> <br>#endif //_PATRON_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

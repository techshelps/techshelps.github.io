<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context650"></a>DATAOBJ.CPP</h2>
<pre><code>/* <br> * DATAOBJ.CPP <br> * Data Transfer Object Chapter 12 <br> * <br> * Implementation of the CDataObject class. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "dataobj.h" <br> <br>extern HINSTANCE g_hInst; <br> <br>/* <br> * CDataObject::CDataObject <br> * CDataObject::~CDataObject <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when object is destroyed. <br> */ <br> <br>CDataObject::CDataObject(LPUNKNOWN pUnkOuter <br>    , PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_hList=NULL; <br>    m_pIDataObject=NULL; <br> <br>    return; <br>    } <br> <br> <br>CDataObject::~CDataObject(void) <br>    { <br>    if (NULL!=m_pIDataObject) <br>        delete m_pIDataObject; <br> <br>    Purge(); <br> <br>    if (NULL!=m_hList) <br>        DestroyWindow(m_hList); <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CDataObject::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CDataObject that's prone to <br> *  failure that we also use internally before exposing the object <br> *  outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CDataObject::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    //Allocate contained interfaces. <br>    m_pIDataObject=new CImpIDataObject(this, pIUnknown); <br> <br>    if (NULL==m_pIDataObject) <br>        return FALSE; <br> <br>    m_hList=CreateWindow(TEXT("listbox"), TEXT("renderings") <br>        , WS_POPUP | LBS_OWNERDRAWFIXED, 0, 0, 100, 100 <br>        , HWND_DESKTOP, NULL, g_hInst, NULL); <br> <br>    if (NULL==m_hList) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CDataObject::Purge <br> * <br> * Purpose: <br> *  Cleans out all entries in our listbox. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CDataObject::Purge(void) <br>    { <br>    UINT        i, cItems; <br>    PRENDERING  pRen; <br>    DWORD       cb; <br> <br>    if (NULL==m_hList) <br>        return; <br> <br>    cItems=(UINT)SendMessage(m_hList, LB_GETCOUNT, 0, 0L); <br> <br>    for (i=0; i &lt; cItems; i++) <br>        { <br>        cb=SendMessage(m_hList, LB_GETTEXT, i, (LPARAM)&amp;pRen); <br> <br>        if (LB_ERR!=cb) <br>            { <br>            /* <br>             * Release the data completely being sure to reinstate <br>             * the original pUnkForRelease. <br>             */ <br>            pRen-&gt;stm.pUnkForRelease=pRen-&gt;pUnkOrg; <br>            ReleaseStgMedium(&amp;pRen-&gt;stm); <br>            delete pRen; <br>            } <br>        } <br> <br>    SendMessage(m_hList, LB_RESETCONTENT, 0, 0L); <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObject::QueryInterface <br> * CDataObject::AddRef <br> * CDataObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDataObject object. <br> */ <br> <br>STDMETHODIMP CDataObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IDataObject==riid) <br>        *ppv=m_pIDataObject; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObject::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObject::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

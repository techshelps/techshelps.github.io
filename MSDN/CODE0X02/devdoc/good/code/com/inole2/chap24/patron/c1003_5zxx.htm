<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONNECT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1005"></a>CONNECT.CPP</h2>
<pre><code>/* <br> * CONNECT.CPP <br> * Patron Chapter 24 <br> * <br> * Helper functions for working with connection points on objects <br> * and the event sets of those objects. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * InterfaceConnect <br> * <br> * Purpose: <br> *  Connects some sink interface of a given IID to an object. <br> * <br> * Parameters: <br> *  pObj            LPUNKNOWN of the object to which we connect <br> *  riid            REFIID of the interface of the sink <br> *  pIUnknownSink   LPUNKNOWN of the caller's sink interface that <br> *                  is actually of the type matching riid <br> *  pdwConn         LPDWORD in which to return the connection key <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function succeeded, FALSE otherwise. <br> */ <br> <br>BOOL InterfaceConnect(LPUNKNOWN pObj, REFIID riid <br>    , LPUNKNOWN pIUnknownSink, LPDWORD pdwConn) <br>    { <br>    HRESULT                     hr; <br>    LPCONNECTIONPOINTCONTAINER  pCPC; <br>    LPCONNECTIONPOINT           pCP; <br> <br>    if (NULL==pObj || NULL==pIUnknownSink || NULL==pdwConn) <br>        return FALSE; <br> <br>    hr=pObj-&gt;QueryInterface(IID_IConnectionPointContainer <br>        , (PPVOID)&amp;pCPC); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    hr=pCPC-&gt;FindConnectionPoint(riid, &amp;pCP); <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        hr=pCP-&gt;Advise(pIUnknownSink, pdwConn); <br>        pCP-&gt;Release(); <br>        } <br> <br>    pCPC-&gt;Release(); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br>/* <br> * InterfaceDisconnect <br> * <br> * Purpose: <br> *  Disconnects a prior connection to an object. <br> * <br> * Parameters: <br> *  pObj            LPUNKNOWN of the object from which to disconnect <br> *  riid            REFIID of the interface of the sink <br> *  pdwConn         LPDWORD containing the key returned by <br> *                  InterfaceConnect.  This function will zero the <br> *                  key on diconnect. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function succeeded, FALSE otherwise. <br> */ <br> <br>BOOL InterfaceDisconnect(LPUNKNOWN pObj, REFIID riid <br>    , LPDWORD pdwConn) <br>    { <br>    HRESULT                     hr; <br>    LPCONNECTIONPOINTCONTAINER  pCPC; <br>    LPCONNECTIONPOINT           pCP; <br> <br>    if (NULL==pObj || NULL==pdwConn) <br>        return FALSE; <br> <br>    if (0==*pdwConn) <br>        return FALSE; <br> <br>    hr=pObj-&gt;QueryInterface(IID_IConnectionPointContainer <br>        , (PPVOID)&amp;pCPC); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    hr=pCPC-&gt;FindConnectionPoint(riid, &amp;pCP); <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        hr=pCP-&gt;Unadvise(*pdwConn); <br> <br>        if (SUCCEEDED(hr)) <br>            *pdwConn=0L; <br> <br>        pCP-&gt;Release(); <br>        } <br> <br>    pCPC-&gt;Release(); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * ObjectTypeInfo <br> * <br> * Purpose: <br> *  Retrieves the ITypeInfo for the entire object from which <br> *  one can learn the IID of the event set and navigate to the <br> *  ITypeInfo for events, among other things. <br> * <br> * Parameters: <br> *  pObj            LPUNKNOWN of the object <br> *  ppITypeInfo     LPTYPEINFO * in which to return the ITypeInfo <br> *                  interface for the object's events. <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL ObjectTypeInfo(LPUNKNOWN pObj, LPTYPEINFO *ppITypeInfo) <br>    { <br>    HRESULT             hr; <br>    LPPROVIDECLASSINFO  pIProvideClassInfo; <br>     <br>    if (NULL==pObj || NULL==ppITypeInfo) <br>        return FALSE; <br> <br>    *ppITypeInfo=NULL; <br> <br>    /* <br>     * Get the object's IProvideClassInfo and call the GetClassInfo <br>     * method therein.  This will give us back the ITypeInfo for <br>     * the entire object. <br>     */ <br> <br>    hr=pObj-&gt;QueryInterface(IID_IProvideClassInfo <br>        , (PPVOID)&amp;pIProvideClassInfo); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    hr=pIProvideClassInfo-&gt;GetClassInfo(ppITypeInfo); <br>    pIProvideClassInfo-&gt;Release(); <br> <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br>/* <br> * ObjectTypeInfoEvents <br> * <br> * Purpose: <br> *  Retrieves the events type information from an object.  This is <br> *  defined to be the "default source" interface in the object's <br> *  type library. <br> * <br> * Parameters: <br> *  pObj            LPUNKNOWN of the object <br> *  ppITypeInfo     LPTYPEINFO * in which to return the ITypeInfo <br> *                  interface for the object's events. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the event type lib exists, FALSE <br> *                  if not or on any other error. <br> */ <br> <br>BOOL ObjectTypeInfoEvents(LPUNKNOWN pObj, LPTYPEINFO *ppITypeInfo) <br>    { <br>    HRESULT             hr; <br>    LPTYPEINFO          pITypeInfoAll; <br>    LPTYPEATTR          pTA; <br> <br>    if (NULL==pObj || NULL==ppITypeInfo) <br>        return FALSE; <br> <br>    if (!ObjectTypeInfo(pObj, &amp;pITypeInfoAll)) <br>        return FALSE; <br> <br>    /* <br>     * We have the object's overall ITypeInfo in pITypeInfoAll. <br>     * Now get the type attributes which will tell us the number of <br>     * individual interfaces in this type library.  We then loop <br>     * through the "implementation types" for all those interfaces <br>     * calling GetImplTypeFlags, looking for the default source. <br>     */ <br> <br>    *ppITypeInfo=NULL;  //Use this to determine success <br> <br>    if (SUCCEEDED(pITypeInfoAll-&gt;GetTypeAttr(&amp;pTA))) <br>        { <br>        UINT        i; <br>        int         iFlags; <br> <br>        for (i=0; i &lt; pTA-&gt;cImplTypes; i++) <br>            { <br>            //Get the implementation type for this interface <br>            hr=pITypeInfoAll-&gt;GetImplTypeFlags(i, &amp;iFlags); <br> <br>            if (FAILED(hr)) <br>                continue; <br> <br>            if ((iFlags &amp; IMPLTYPEFLAG_FDEFAULT) <br>                &amp;&amp; (iFlags &amp; IMPLTYPEFLAG_FSOURCE)) <br>                { <br>                HREFTYPE    hRefType=NULL; <br> <br>                /* <br>                 * This is the interface we want.  Get a handle to <br>                 * the type description from which we can then get <br>                 * the ITypeInfo. <br>                 */ <br>                pITypeInfoAll-&gt;GetRefTypeOfImplType(i, &amp;hRefType); <br>                hr=pITypeInfoAll-&gt;GetRefTypeInfo(hRefType <br>                    , ppITypeInfo); <br> <br>                break; <br>                } <br>            } <br> <br>        pITypeInfoAll-&gt;ReleaseTypeAttr(pTA); <br>        } <br> <br>    pITypeInfoAll-&gt;Release(); <br>    return (NULL!=*ppITypeInfo); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * ObjectEventsIID <br> * <br> * Purpose: <br> *  Determines the IID of the object's events interface so we <br> *  can ask for the right IConnectionPoint for events. <br> * <br> * Parameters: <br> *  pObj            LPUNKNOWN of the object <br> *  piid            IID * in which to return the IID for events <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL ObjectEventsIID(LPUNKNOWN pObj, IID *piid) <br>    { <br>    HRESULT             hr; <br>    LPTYPEINFO          pITypeInfo; <br>    LPTYPEATTR          pTA; <br> <br>    *piid=CLSID_NULL; <br> <br>    if (!ObjectTypeInfoEvents(pObj, &amp;pITypeInfo)) <br>        return FALSE; <br> <br>    hr=pITypeInfo-&gt;GetTypeAttr(&amp;pTA); <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        *piid=pTA-&gt;guid; <br>        pITypeInfo-&gt;ReleaseTypeAttr(pTA); <br>        } <br> <br>    pITypeInfo-&gt;Release(); <br>    return SUCCEEDED(hr); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

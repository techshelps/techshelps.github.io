<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLASSF.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1012"></a>ICLASSF.CPP</h2>
<pre><code>/* <br> * ICLASSF.CPP <br> * Patron Chapter 24 <br> * <br> * Implementation of an IClassFactory interface for Patron to <br> * enable linking to its embedded objects. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CLinkClassFactory::CLinkClassFactory <br> * CLinkClassFactory::~CLinkClassFactory <br> * <br> * Constructor Parameters: <br> *  pFR             PCLinkFrame that can create documents. <br> */ <br> <br>CLinkClassFactory::CLinkClassFactory(PCPatronFrame pFR) <br>    { <br>    m_cRef=0L; <br>    m_pFR=pFR; <br>    return; <br>    } <br> <br> <br>CLinkClassFactory::~CLinkClassFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CLinkClassFactory::QueryInterface <br> * CLinkClassFactory::AddRef <br> * CLinkClassFactory::Release <br> */ <br> <br>STDMETHODIMP CLinkClassFactory::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CLinkClassFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CLinkClassFactory::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CLinkClassFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates an object to resolve a link to an embedding. <br> */ <br> <br>STDMETHODIMP CLinkClassFactory::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, PPVOID ppvObj) <br>    { <br>    PCPatronDoc         pDoc; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br> <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    //We don't support aggregation <br>    if (NULL!=pUnkOuter) <br>        return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>    //Try creating a new document, which creates the object. <br>    pDoc=(PCPatronDoc)m_pFR-&gt;m_pCL-&gt;NewDocument(TRUE); <br> <br>    //ObjectDestroyed has already been called. <br>    if (NULL==pDoc) <br>        { <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        return hr; <br>        } <br> <br>    /* <br>     * We don't want to do any file initialization here because we <br>     * want to wait for IPersistFile calls.  If we called Load(NULL) <br>     * we'd create storages and whatnot that we don't want in this <br>     * case. <br>     */ <br> <br>    hr=pDoc-&gt;QueryInterface(riid, ppvObj); <br> <br>    if (FAILED(hr)) <br>        { <br>        m_pFR-&gt;m_pCL-&gt;CloseDocument(pDoc); <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        return hr; <br>        } <br> <br>    m_pFR-&gt;m_pDocCreated=pDoc; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CLinkClassFactory::LockServer <br> * <br> * Purpose: <br> *  Provides control of the application in memory. <br> */ <br> <br>STDMETHODIMP CLinkClassFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        { <br>        g_cLock--; <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        } <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

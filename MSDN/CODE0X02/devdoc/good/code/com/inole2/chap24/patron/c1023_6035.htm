<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TENANT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1031"></a>TENANT.H</h2>
<pre><code>/* <br> * TENANT.H <br> * Patron Chapter 24 <br> * <br> * Definitions and function prototypes for the CTenant class <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _TENANT_H_ <br>#define _TENANT_H_ <br> <br> <br>class CImpIOleClientSite : public IOleClientSite <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        class CTenant      *m_pTen; <br>        LPUNKNOWN           m_pUnkOuter; <br> <br>    public: <br>        CImpIOleClientSite(class CTenant *, LPUNKNOWN); <br>        ~CImpIOleClientSite(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP SaveObject(void); <br>        STDMETHODIMP GetMoniker(DWORD, DWORD, LPMONIKER *); <br>        STDMETHODIMP GetContainer(LPOLECONTAINER *); <br>        STDMETHODIMP ShowObject(void); <br>        STDMETHODIMP OnShowWindow(BOOL); <br>        STDMETHODIMP RequestNewObjectLayout(void); <br>    }; <br> <br>typedef CImpIOleClientSite *PCImpIOleClientSite; <br> <br> <br> <br>class CImpIAdviseSink : public IAdviseSink <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        class CTenant      *m_pTen; <br>        LPUNKNOWN           m_pUnkOuter; <br> <br>    public: <br>        CImpIAdviseSink(class CTenant *, LPUNKNOWN); <br>        ~CImpIAdviseSink(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP_(void)  OnDataChange(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP_(void)  OnViewChange(DWORD, LONG); <br>        STDMETHODIMP_(void)  OnRename(LPMONIKER); <br>        STDMETHODIMP_(void)  OnSave(void); <br>        STDMETHODIMP_(void)  OnClose(void); <br>    }; <br> <br> <br>typedef CImpIAdviseSink *PCImpIAdviseSink; <br> <br> <br>class CImpIOleInPlaceSite : public IOleInPlaceSite <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        class CTenant      *m_pTen; <br>        LPUNKNOWN           m_pUnkOuter; <br> <br>    public: <br>        CImpIOleInPlaceSite(class CTenant *, LPUNKNOWN); <br>        ~CImpIOleInPlaceSite(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetWindow(HWND *); <br>        STDMETHODIMP ContextSensitiveHelp(BOOL); <br>        STDMETHODIMP CanInPlaceActivate(void); <br>        STDMETHODIMP OnInPlaceActivate(void); <br>        STDMETHODIMP OnUIActivate(void); <br>        STDMETHODIMP GetWindowContext(LPOLEINPLACEFRAME * <br>                        , LPOLEINPLACEUIWINDOW *, LPRECT, LPRECT <br>                        , LPOLEINPLACEFRAMEINFO); <br>        STDMETHODIMP Scroll(SIZE); <br>        STDMETHODIMP OnUIDeactivate(BOOL); <br>        STDMETHODIMP OnInPlaceDeactivate(void); <br>        STDMETHODIMP DiscardUndoState(void); <br>        STDMETHODIMP DeactivateAndUndo(void); <br>        STDMETHODIMP OnPosRectChange(LPCRECT); <br>    }; <br> <br>typedef CImpIOleInPlaceSite *PCImpIOleInPlaceSite; <br> <br> <br>//CHAPTER24MOD <br>class CImpIOleControlSite : public IOleControlSite <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        class CTenant  *m_pTen; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIOleControlSite(class CTenant *, LPUNKNOWN); <br>        ~CImpIOleControlSite(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP OnControlInfoChanged(void); <br>        STDMETHODIMP LockInPlaceActive(BOOL); <br>        STDMETHODIMP GetExtendedControl(LPDISPATCH *); <br>        STDMETHODIMP TransformCoords(POINTL *, POINTF *, DWORD); <br>        STDMETHODIMP TranslateAccelerator(LPMSG, DWORD); <br>        STDMETHODIMP OnFocus(BOOL); <br>        STDMETHODIMP ShowPropertyFrame(void); <br>    }; <br> <br>typedef class CImpIOleControlSite *PCImpIOleControlSite; <br> <br> <br>//This IDispatch implements Ambient properties <br>class CImpIDispatch : public IDispatch <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        class CTenant  *m_pTen; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIDispatch(class CTenant *, LPUNKNOWN); <br>        ~CImpIDispatch(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetTypeInfoCount(UINT *); <br>        STDMETHODIMP GetTypeInfo(UINT, LCID, ITypeInfo **); <br>        STDMETHODIMP GetIDsOfNames(REFIID, OLECHAR **, UINT <br>            , LCID, DISPID *); <br>        STDMETHODIMP Invoke(DISPID, REFIID, LCID, USHORT <br>            , DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); <br>    }; <br> <br>typedef class CImpIDispatch *PCImpIDispatch; <br> <br> <br>//Events IDispatch created once for each outgoing event set. <br>class CDispatchEvents : public IDispatch <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        class CTenant  *m_pTen; <br> <br>    public: <br>        CDispatchEvents(class CTenant *); <br>        ~CDispatchEvents(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetTypeInfoCount(UINT *); <br>        STDMETHODIMP GetTypeInfo(UINT, LCID, ITypeInfo **); <br>        STDMETHODIMP GetIDsOfNames(REFIID, OLECHAR **, UINT <br>            , LCID, DISPID *); <br>        STDMETHODIMP Invoke(DISPID, REFIID, LCID, USHORT <br>            , DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); <br>    }; <br> <br>typedef class CDispatchEvents *PCDispatchEvents; <br> <br> <br>//End CHAPTER24MOD <br> <br> <br> <br>/* <br> * Tenant class describing an individual piece of data in a page. <br> * It knows where it sits, what object is inside of it, and what <br> * its idenitifer is such that it can find it's storage within a <br> * page. <br> */ <br> <br>//Patron Objects clipboard format <br>typedef struct tagPATRONOBJECT <br>    { <br>    POINTL      ptl;        //Location of object <br>    POINTL      ptlPick;    //Pick point from drag-drop operation <br>    SIZEL       szl;        //Extents of object (absolute) <br>    FORMATETC   fe;         //Actual object format <br>    } PATRONOBJECT, *PPATRONOBJECT; <br> <br> <br> <br>//Values for hit-testing, drawing, and resize-tracking tenants <br>#define CXYHANDLE       5 <br> <br>//Tenant types (not persistent, but determined at load time) <br>typedef enum <br>    { <br>    TENANTTYPE_NULL=0, <br>    TENANTTYPE_STATIC, <br>    TENANTTYPE_EMBEDDEDOBJECT, <br>    TENANTTYPE_EMBEDDEDFILE, <br>    TENANTTYPE_EMBEDDEDOBJECTFROMDATA, <br>    TENANTTYPE_LINKEDOBJECT, <br>    TENANTTYPE_LINKEDFILE, <br>    TENANTTYPE_LINKEDOBJECTFROMDATA <br>    } TENANTTYPE, *PTENANTTYPE; <br> <br> <br>//State flags <br>//CHAPTER24MOD <br>//Switched #defines to an enum <br>enum <br>    { <br>    TENANTSTATE_DEFAULT =0x00000000, <br>    TENANTSTATE_SELECTED=0x00000001, <br>    TENANTSTATE_OPEN    =0x00000002, <br>    TENANTSTATE_SHOWTYPE=0x00000004, <br> <br>    //New ones for controls. <br>    TENANTSTATE_CONTROL     =0x00000100, <br>    TENANTSTATE_EVENTS      =0x00000200, <br>    TENANTSTATE_BUTTON      =0x00000400, <br>    TENANTSTATE_LABEL       =0x00000800, <br>    TENANTSTATE_DEFBUTTON   =0x00001000, <br>    TENANTSTATE_CANCELBUTTON=0x00002000 <br>    }; <br> <br>//To mask off non-control flags <br>#define STATEMASK_CONTROLS 0xFFFFFF00 <br> <br>//End CHAPTER24MOD <br> <br>/* <br> * Persistent information we need to save for each tenant, which is <br> * done in the tenant list instead of with each tenant.  Since this <br> * is a small structure it's best not to blow another stream for it <br> * (overhead). <br> */ <br>typedef struct tagTENANTINFO <br>    { <br>    DWORD       dwID; <br>    RECTL       rcl; <br>    FORMATETC   fe;             //Excludes ptd <br>    short       fSetExtent;     //Call IOleObject::SetExtent on Run <br>    } TENANTINFO, *PTENANTINFO; <br> <br> <br>//CHAPTER24MOD <br>/* <br> * Event handling constructs:  EVENTACTION is the type of <br> * action to execute on an event.  EVENTMAP is an element of <br> * an array to hold event mappings. <br> */ <br> <br>typedef enum <br>    { <br>    ACTION_NONE=-1, <br>    ACTION_BEEPDEFAULT=MB_OK, <br>    ACTION_BEEPASTERISK=MB_ICONASTERISK, <br>    ACTION_BEEPEXCLAMATION=MB_ICONEXCLAMATION, <br>    ACTION_BEEPHAND=MB_ICONHAND, <br>    ACTION_BEEPQUESTION=MB_ICONQUESTION, <br>    ACTION_TAILING=-2 <br>    } EVENTACTION; <br> <br> <br>typedef struct tagEVENTMAP <br>    { <br>    DISPID      id;             //Event ID <br>    EVENTACTION iAction;        //Action to take <br>    BSTR        bstrName;       //Event name (function only) <br>    } EVENTMAP, *PEVENTMAP; <br> <br> <br>class CEventMap <br>    { <br>    public: <br>        UINT            m_cEvents; <br>        LPTYPEINFO      m_pITypeInfo; <br>        PEVENTMAP       m_pEventMap; <br> <br>    public: <br>        CEventMap(LPTYPEINFO); <br>        ~CEventMap(void); <br> <br>        BOOL            Init(void); <br>        BOOL            Set(DISPID, EVENTACTION); <br>        EVENTACTION     Get(DISPID); <br>        void            Serialize(LPSTREAM); <br>        void            Deserialize(LPSTREAM); <br>    }; <br> <br>typedef CEventMap *PCEventMap; <br> <br>//Events stream in the object storage <br>#define SZEVENTSSTREAM  OLETEXT("\003Event Mappings") <br> <br>//End CHAPTER24MOD <br> <br> <br> <br>class CTenant : public IUnknown <br>    { <br>    friend CImpIOleClientSite; <br>    friend CImpIAdviseSink; <br>    friend CImpIOleInPlaceSite; <br> <br>    //CHAPTER24MOD <br>    friend CImpIOleControlSite; <br>    friend CImpIDispatch; <br> <br>    friend CDispatchEvents; <br>    //End CHAPTER24MOD <br> <br>    private: <br>        HWND            m_hWnd;         //Pages window <br>        DWORD           m_dwID;         //Persistent DWORD ID <br>        DWORD           m_cOpens;       //Count calls to Open <br> <br>        BOOL            m_fInitialized; //Something here? <br>        LPUNKNOWN       m_pObj;         //The object here <br>        LPSTORAGE       m_pIStorage;    //Sub-storage for tenant <br> <br>        FORMATETC       m_fe;           //Used to create the object <br>        DWORD           m_dwState;      //State flags <br>        RECTL           m_rcl;          //Space of this object <br>        CLSID           m_clsID;        //Object class (for statics) <br>        BOOL            m_fSetExtent;   //Call SetExtent on next run <br> <br>        class CPages   *m_pPG;          //Pages window <br> <br>        TENANTTYPE      m_tType;            //Type identifier <br>        ULONG           m_cRef;             //We're an object now <br>        LPOLEOBJECT     m_pIOleObject;      //IOleObject on m_pObj <br>        LPVIEWOBJECT2   m_pIViewObject2;    //IViewObject2 on m_pObj <br>        ULONG           m_grfMisc;          //OLEMISC flags <br>        BOOL            m_fRepaintEnabled;  //No redundant paints <br> <br>        //Our interfaces <br>        PCImpIOleClientSite m_pImpIOleClientSite; <br>        PCImpIAdviseSink    m_pImpIAdviseSink; <br> <br>        LPMONIKER       m_pmk;          //Relative moniker <br>        LPMONIKER       m_pmkFile;      //Container document moniker <br> <br>        PCImpIOleInPlaceSite m_pImpIOleIPSite; //Our interface <br>        LPOLEINPLACEOBJECT   m_pIOleIPObject;  //The object <br>        RECT                 m_rcPos;          //Last object rect <br>        BOOL                 m_fInRectSet;     //Prevent reentrancy <br> <br>        //CHAPTER24MOD <br>        PCImpIOleControlSite    m_pImpIOleControlSite; //Implemented <br>        PCImpIDispatch          m_pImpIDispatch;       //Implemented <br> <br>        PCDispatchEvents        m_pDispEvents;      //Event Sink <br>        DWORD                   m_dwConnEvents; <br>        IID                     m_iidEvents; <br>        PCEventMap              m_pEventMap; <br> <br>        //Control interfaces <br>        LPOLECONTROL        m_pIOleControl;      //Used <br>        LPDISPATCH          m_pIDispatchControl; //Used <br> <br>        //Ambient properties <br>        OLE_COLOR           m_clrBack; <br>        OLE_COLOR           m_clrFore; <br>        IFontDisp          *m_pIFont;       //Copy from CPages <br>        LCID                m_lcid; <br>        BOOL                m_fDesignMode; <br>        BOOL                m_fUIDead; <br>        BOOL                m_fHatchHandles; <br> <br>        //Other state information <br>        BOOL                m_fHaveControlInfo; <br>        CONTROLINFO         m_ctrlInfo; <br>        ULONG               m_cLockInPlace; <br>        BOOL                m_fPendingDeactivate; <br>        //End CHAPTER24MOD <br> <br> <br>    /* <br>     * This flag is used exculsively by the implementation of <br>     * IOleUILinkContainer on the page we're in for the Links <br>     * Dialog. Since we never use it ourselves, public here <br>     * is no big deal. <br>     */ <br>    public: <br>        BOOL            m_fLinkAvail; <br> <br>    protected: <br>        BOOL    ObjectInitialize(LPUNKNOWN, LPFORMATETC, DWORD); <br>        HRESULT CreateStatic(LPDATAOBJECT, LPFORMATETC <br>            , LPUNKNOWN *); <br> <br>        //CHAPTER24MOD <br>        BOOL    ControlInitialize(void); <br>        //End CHAPTER24MOD <br> <br>    public: <br>        CTenant(DWORD, HWND, CPages *); <br>        ~CTenant(void); <br> <br>        //Gotta have an IUnknown for delegation <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        DWORD       GetID(void); <br>        UINT        GetStorageName(LPOLESTR); <br>        void        StorageGet(LPSTORAGE *); <br>        UINT        Create(TENANTTYPE, LPVOID, LPFORMATETC, PPOINTL <br>                        , LPSIZEL, LPSTORAGE, PPATRONOBJECT, DWORD); <br>        BOOL        Load(LPSTORAGE, PTENANTINFO); <br>        void        GetInfo(PTENANTINFO); <br>        BOOL        Open(LPSTORAGE); <br>        void        Close(BOOL); <br>        BOOL        Update(void); <br>        void        Destroy(LPSTORAGE); <br> <br>        void        Select(BOOL, BOOL); <br>        void        ShowAsOpen(BOOL); <br>        void        ShowYourself(void); <br>        void        AddVerbMenu(HMENU, UINT); <br>        TENANTTYPE  TypeGet(void); <br>        void        CopyEmbeddedObject(LPDATAOBJECT, LPFORMATETC <br>                        , PPOINTL); <br>        void        ShowObjectType(BOOL); <br>        void        CopyLinkedObject(LPDATAOBJECT, LPFORMATETC <br>                        , PPOINTL); <br>        void        NotifyOfRename(LPTSTR, LPMONIKER, LPMONIKER); <br>        BOOL        Activate(LONG, LPMSG); <br> <br>        void        Draw(HDC, DVTARGETDEVICE *, HDC, int, int <br>                        , BOOL, BOOL); <br>        void        Repaint(void); <br>        void        Invalidate(void); <br> <br>        void        ObjectClassFormatAndIcon(LPCLSID, LPWORD <br>                        , LPTSTR *, HGLOBAL *, LPTSTR *); <br>        BOOL        SwitchOrUpdateAspect(HGLOBAL, BOOL); <br>        void        EnableRepaint(BOOL); <br> <br>        BOOL        FIsSelected(void); <br>        BOOL        ConvertToStatic(void); <br> <br>        void        ObjectGet(LPUNKNOWN *); <br>        void        FormatEtcGet(LPFORMATETC, BOOL); <br>        void        SizeGet(LPSIZEL, BOOL); <br>        void        SizeSet(LPSIZEL, BOOL, BOOL); <br>        void        RectGet(LPRECTL, BOOL); <br>        void        RectSet(LPRECTL, BOOL, BOOL); <br> <br>        void        DeactivateInPlaceObject(BOOL); <br>        void        UpdateInPlaceObjectRects(LPCRECT, BOOL); <br>        HWND        ObjectWindow(void); <br> <br>        //CHAPTER24MOD <br>        void        ToggleDesignMode(BOOL); <br>        void        ToggleUIDead(BOOL); <br>        void        ToggleHatchHandles(BOOL); <br>        PCEventMap  EventMap(void); <br>        DWORD       GetControlFlags(); <br>        BOOL        TryMnemonic(LPMSG); <br>        void        AmbientChange(DISPID); <br>        //End CHAPTER24MOD <br>    }; <br> <br> <br>typedef CTenant *PCTenant; <br> <br>//Return codes for Create <br>#define CREATE_FAILED               0 <br>#define CREATE_GRAPHICONLY          1 <br>#define CREATE_PLACEDOBJECT         2 <br> <br> <br>//CHAPTER24MOD <br>//Helper functions in CONNECT.CPP <br> <br>BOOL InterfaceConnect(LPUNKNOWN, REFIID, LPUNKNOWN, LPDWORD); <br>BOOL InterfaceDisconnect(LPUNKNOWN, REFIID, LPDWORD); <br>BOOL ObjectTypeInfo(LPUNKNOWN, LPTYPEINFO *); <br>BOOL ObjectTypeInfoEvents(LPUNKNOWN, LPTYPEINFO *); <br>BOOL ObjectEventsIID(LPUNKNOWN, IID *); <br> <br>//End CHAPTER24MOD <br> <br>#endif //_TENANT_H_ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

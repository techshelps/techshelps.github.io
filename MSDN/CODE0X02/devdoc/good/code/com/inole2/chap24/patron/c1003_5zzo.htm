<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICONSITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1014"></a>ICONSITE.CPP</h2>
<pre><code>/* <br> * ICONSITE.CPP <br> * Patron Chapter 24 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CImpIOleControlSite::CImpIOleControlSite <br> * CImpIOleControlSite::~CImpIOleControlSite <br> * <br> * Parameters (Constructor): <br> *  pTen            PCTenant of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleControlSite::CImpIOleControlSite(PCTenant pTen <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pTen=pTen; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleControlSite::~CImpIOleControlSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::QueryInterface <br> * CImpIOleControlSite::AddRef <br> * CImpIOleControlSite::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIOleControlSite. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleControlSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleControlSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::OnControlInfoChanged <br> * <br> * Purpose: <br> *  Informs the site that the CONTROLINFO for the control has <br> *  changed and we thus need to reload the data. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::OnControlInfoChanged(void) <br>    { <br>    //We also update our "have info" flag here. <br>    m_pTen-&gt;m_fHaveControlInfo=SUCCEEDED(m_pTen-&gt;m_pIOleControl <br>        -&gt;GetControlInfo(&amp;m_pTen-&gt;m_ctrlInfo)); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::LockInPlaceActive <br> * <br> * Purpose: <br> *  Forces the container to keep this control in-place active <br> *  (but not UI active) regardless of other considerations, or <br> *  removes this lock. <br> * <br> * Parameters: <br> *  fLock           BOOL indicating to lock (TRUE) or unlock (FALSE) <br> *                  in-place activation. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::LockInPlaceActive(BOOL fLock) <br>    { <br>    if (fLock) <br>        m_pTen-&gt;m_cLockInPlace++; <br>    else <br>        { <br>        if (0==--m_pTen-&gt;m_cLockInPlace) <br>            { <br>            //If there's a pending deactivate, do it now. <br>            if (m_pTen-&gt;m_fPendingDeactivate) <br>                m_pTen-&gt;DeactivateInPlaceObject(TRUE); <br>            } <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::GetExtendedControl <br> * <br> * Purpose: <br> *  Returns a pointer to the container's extended control that wraps <br> *  the actual control in this site, if one exists. <br> * <br> * Parameters: <br> *  ppDispatch      LPDISPATCH * in which to return the pointer <br> *                  to the extended control's IDispatch interface. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::GetExtendedControl(LPDISPATCH <br>    * ppDispatch) <br>    { <br>    *ppDispatch=NULL; <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::TransformCoords <br> * <br> * Purpose: <br> *  Converts coordinates in HIMETRIC units into those used by the <br> *  container. <br> * <br> * Parameters: <br> *  pptlHiMet       POINTL * containing either the coordinates to <br> *                  transform to container or where to store the <br> *                  transformed container coordinates. <br> *  pptlCont        POINTF * containing the container coordinates. <br> *  dwFlags         DWORD containing instructional flags. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::TransformCoords(POINTL *pptlHiMet <br>    , POINTF *pptlCont, DWORD dwFlags) <br>    { <br>    if (NULL==pptlHiMet || NULL==pptlCont) <br>        return ResultFromScode(E_POINTER); <br> <br>    /* <br>     * Convert coordinates.  We use MM_LOMETRIC which means that <br>     * to convert from HIMETRIC we divide by 10 and negate the y <br>     * coordinate.  Conversion to HIMETRIC means negate the y <br>     * and multiply by 10.  Note that size and position are <br>     * considered the same thing, that is, we don't differentiate <br>     * the two. <br>     */ <br> <br>    if (XFORMCOORDS_HIMETRICTOCONTAINER &amp; dwFlags) <br>        { <br>        pptlCont-&gt;x=(float)(pptlHiMet-&gt;x/10); <br>        pptlCont-&gt;y=(float)-(pptlHiMet-&gt;y/10); <br>        } <br>    else <br>        { <br>        pptlHiMet-&gt;x=(long)(pptlCont-&gt;x*10); <br>        pptlHiMet-&gt;y=(long)-(pptlCont-&gt;y*10); <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::TranslateAccelerator <br> * <br> * Purpose: <br> *  Instructs the container to translate a keyboard accelerator <br> *  message that the control has picked up instead. <br> * <br> * Parameters: <br> *  pMsg            LPMSG to the message to translate. <br> *  grfModifiers    DWORD flags with additional instructions. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::TranslateAccelerator(LPMSG pMsg <br>    , DWORD grfModifiers) <br>    { <br>    /* <br>     * The control has picked up a keystroke through its own <br>     * TranslateAccelerator and is now giving us the change to <br>     * play with it.  Currently there are no flags for <br>     * grfModifiers, so we ignore them.  Especially since <br>     * we have nothing to do here ourselves anyway. <br>     */ <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleControlSite::OnFocus <br> * <br> * Purpose: <br> *  Informs the container that focus has either been lost or <br> *  gained in the control. <br> * <br> * Parameters: <br> *  fGotFocus       BOOL indicating that the control gained (TRUE) <br> *                  or lost (FALSE) focus. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::OnFocus(BOOL fGotFocus) <br>    { <br>    /* <br>     * Patron doesn't do this, but to handle the default <br>     * and cancel buttons properly, we normally process RETURN <br>     * and ESC accelerators to press the right button. <br>     * This behavior must be disabled when the control with <br>     * the focus has either CTRLINFO_EATS_RETURN or <br>     * CTRLINFO_EATS_ESCAPE set.  We tell the frame as <br>     * we need to when a new control gets the focus.  We <br>     * do nothing when a control loses the focus. <br>     */ <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleControlSite::ShowPropertyFrame <br> * <br> * Purpose: <br> *  Instructs the container to show the property frame if <br> *  this is an extended object and requires its own property <br> *  pages. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIOleControlSite::ShowPropertyFrame(void) <br>    { <br>    /* <br>     * Returning an error here means that the container has <br>     * no property pages itself for the control, so the <br>     * control should display its own. <br>     */ <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

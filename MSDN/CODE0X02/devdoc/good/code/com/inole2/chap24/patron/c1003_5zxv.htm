<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AMBIENTS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1003"></a>AMBIENTS.CPP</h2>
<pre><code>/* <br> * AMBIENTS.CPP <br> * Patron Chapter 24 <br> * <br> * Implementation of the ambient properties IDispatch on a <br> * tenant control site. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CImpIDispatch::CImpIDispatch <br> * CImpIDispatch::~CImpIDispatch <br> * <br> * Parameters (Constructor): <br> *  pTen            PCTenant of the tenant we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDispatch::CImpIDispatch(PCTenant pTen, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pTen=pTen; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDispatch::~CImpIDispatch(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::QueryInterface <br> * CImpIDispatch::AddRef <br> * CImpIDispatch::Release <br> */ <br> <br>STDMETHODIMP CImpIDispatch::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::Release(void) <br>    { <br>    m_cRef--; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfoCount <br> * CImpIDispatch::GetTypeInfo <br> * CImpIDispatch::GetIDsOfNames <br> * <br> * Unimplemented members, not needed for ambient properties. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfoCount(UINT *pctInfo) <br>    { <br>    *pctInfo=0; <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfo(UINT itinfo <br>    , LCID lcid, ITypeInfo **pptInfo) <br>    { <br>    *pptInfo=NULL; <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br>STDMETHODIMP CImpIDispatch::GetIDsOfNames(REFIID riid <br>    , OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgDispID) <br>    { <br>    *rgszNames=NULL; <br>    *rgDispID=NULL; <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::Invoke <br> * <br> * Purpose: <br> *  Calls a method in the dispatch interface or manipulates a <br> *  property. <br> * <br> * Parameters: <br> *  dispIDMember    DISPID of the method or property of interest. <br> *  riid            REFIID reserved, must be NULL. <br> *  lcid            LCID of the locale. <br> *  wFlags          USHORT describing the context of the invocation. <br> *  pDispParams     DISPPARAMS * to the array of arguments. <br> *  pVarResult      VARIANT * in which to store the result.  Is <br> *                  NULL if the caller is not interested. <br> *  pExcepInfo      EXCEPINFO * to exception information. <br> *  puArgErr        UINT * in which to store the index of an <br> *                  invalid parameter if DISP_E_TYPEMISMATCH <br> *                  is returned. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br> <br>STDMETHODIMP CImpIDispatch::Invoke(DISPID dispIDMember, REFIID riid <br>    , LCID lcid, unsigned short wFlags, DISPPARAMS *pDispParams <br>    , VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) <br>    { <br>    HRESULT     hr; <br>    VARIANT     varResult; <br> <br>    if (IID_NULL!=riid) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    /* <br>     * We ignore lcid in this function.  A multilingual application <br>     * might use it to determine the meaning of certain parameters <br>     * or perhaps as an indication of how to format data like <br>     * time, date, and currency or any other language or locale- <br>     * sensitive data. <br>     */ <br> <br>    /* <br>     * Variable handling:  since ambient properties is just a <br>     * collection of singular read-only values, we don't have to <br>     * worry about input parameters. <br>     */ <br> <br>    /* <br>     * If the caller is not interested in the return value, then <br>     * pVarResult is NULL.  But since we're dealing with ambient <br>     * properties, there should always be an interest.  In any case, <br>     * if we're given a NULL, we'll point it to a dummy structure so <br>     * the rest of the code can assume that pVarResult is non-NULL. <br>     */ <br>    if(NULL==pVarResult) <br>      pVarResult=&amp;varResult; <br> <br>    VariantInit(pVarResult); <br> <br>    //The most common case is boolean, use as an initial type <br>    V_VT(pVarResult)=VT_BOOL; <br> <br>    /* <br>     * Process the requested ambient property.  Anything but a <br>     * request for a property is invalid, so we can check that <br>     * before looking at the specific ID.  We can only get away <br>     * with this because all properties are read-only. <br>     */ <br> <br>    if (!(DISPATCH_PROPERTYGET &amp; wFlags)) <br>        return ResultFromScode(DISP_E_MEMBERNOTFOUND); <br> <br>    hr=NOERROR; <br> <br>    switch (dispIDMember) <br>        { <br>        case DISPID_AMBIENT_BACKCOLOR: <br>            V_I4(pVarResult)=m_pTen-&gt;m_clrBack; <br>            V_VT(pVarResult)=VT_I4; <br>            break; <br> <br>        case DISPID_AMBIENT_FORECOLOR: <br>            V_I4(pVarResult)=m_pTen-&gt;m_clrFore; <br>            V_VT(pVarResult)=VT_I4; <br>            break; <br> <br>        case DISPID_AMBIENT_FONT: <br>            /* <br>             * If we failed to create the font, act like we <br>             * don't support it. <br>             */ <br>            if (NULL==m_pTen-&gt;m_pIFont) <br>                return ResultFromScode(DISP_E_MEMBERNOTFOUND); <br> <br>            //The correct type is an IFontDisp pointer <br>            V_DISPATCH(pVarResult)=m_pTen-&gt;m_pIFont; <br>            m_pTen-&gt;m_pIFont-&gt;AddRef(); <br>            V_VT(pVarResult)=VT_FONT; <br>            break; <br> <br>        case DISPID_AMBIENT_LOCALEID: <br>            V_I4(pVarResult)=m_pTen-&gt;m_lcid; <br>            V_VT(pVarResult)=VT_I4; <br>            break; <br> <br>        case DISPID_AMBIENT_USERMODE: <br>            V_BOOL(pVarResult)=!m_pTen-&gt;m_fDesignMode; <br>            break; <br> <br>        case DISPID_AMBIENT_UIDEAD: <br>            V_BOOL(pVarResult)=m_pTen-&gt;m_fUIDead; <br>            break; <br> <br>        case DISPID_AMBIENT_SUPPORTSMNEMONICS: <br>            V_BOOL(pVarResult)=TRUE; <br>            break; <br> <br>        case DISPID_AMBIENT_SHOWGRABHANDLES: <br>            V_BOOL(pVarResult)=m_pTen-&gt;m_fHatchHandles; <br>            break; <br> <br>        case DISPID_AMBIENT_SHOWHATCHING: <br>            V_BOOL(pVarResult)=m_pTen-&gt;m_fHatchHandles; <br>            break; <br> <br>        default: <br>            hr=ResultFromScode(DISP_E_MEMBERNOTFOUND); <br>            break; <br>        } <br> <br>    return hr; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

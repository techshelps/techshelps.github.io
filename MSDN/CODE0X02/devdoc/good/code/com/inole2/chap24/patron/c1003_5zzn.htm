<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICLISITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1013"></a>ICLISITE.CPP</h2>
<pre><code>/* <br> * ICLISITE.CPP <br> * Patron Chapter 24 <br> * <br> * Implementation of the IOleClientSite interface for <br> * Patron's tenants. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CImpIOleClientSite::CImpIOleClientSite <br> * CImpIOleClientSite::~CImpIOleClientSite <br> * <br> * Parameters (Constructor): <br> *  pTenant         PCTenant of the tenant we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleClientSite::CImpIOleClientSite(PCTenant pTenant <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pTen=pTenant; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleClientSite::~CImpIOleClientSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::QueryInterface <br> * CImpIOleClientSite::AddRef <br> * CImpIOleClientSite::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleClientSite object. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleClientSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleClientSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::SaveObject <br> * <br> * Purpose: <br> *  Requests that the container call OleSave for the object that <br> *  lives here.  Typically this happens on server shutdown. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::SaveObject(void) <br>    { <br>    //We're already set up with the tenant to save; this is trivial. <br>    m_pTen-&gt;Update(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::GetMoniker <br> * <br> * Purpose: <br> *  Retrieves the moniker for the site in which this object lives, <br> *  either the moniker relative to the container or the full <br> *  moniker. <br> * <br> * Parameters: <br> *  dwAssign        DWORD specifying that the object wants moniker <br> *                  assignment.  Yeah.  Right.  Got any bridges to <br> *                  sell? <br> *  dwWhich         DWORD identifying which moniker the object <br> *                  wants, either the container's moniker, the <br> *                  moniker relative to this client site, or the <br> *                  full moniker. <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::GetMoniker(DWORD dwAssign <br>    , DWORD dwWhich, LPMONIKER *ppmk) <br>    { <br>    *ppmk=NULL; <br> <br>    switch (dwWhich) <br>        { <br>        case OLEWHICHMK_CONTAINER: <br>            //This is just the file we're living in. <br>            if (NULL!=m_pTen-&gt;m_pmkFile) <br>                *ppmk=m_pTen-&gt;m_pmkFile; <br> <br>            break; <br> <br>        case OLEWHICHMK_OBJREL: <br>            //This is everything but the filename. <br>            if (NULL!=m_pTen-&gt;m_pmk) <br>                *ppmk=m_pTen-&gt;m_pmk; <br> <br>            break; <br> <br>        case OLEWHICHMK_OBJFULL: <br>            //Concatenate file and relative monikers for this one. <br>            if (NULL!=m_pTen-&gt;m_pmkFile &amp;&amp; NULL!=m_pTen-&gt;m_pmk) <br>                { <br>                return m_pTen-&gt;m_pmkFile-&gt;ComposeWith <br>                    (m_pTen-&gt;m_pmk, FALSE, ppmk); <br>                } <br> <br>            break; <br>        } <br> <br>    if (NULL==*ppmk) <br>        return ResultFromScode(E_FAIL); <br> <br>    (*ppmk)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::GetContainer <br> * <br> * Purpose: <br> *  Returns a pointer to the document's IOleContainer interface. <br> * <br> * Parameters: <br> *  ppContainer     LPOLECONTAINER * in which to return the <br> *                  interface. <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::GetContainer(LPOLECONTAINER <br>    * ppContainer) <br>    { <br>    PCPage  pPage; <br> <br>    *ppContainer=NULL; <br> <br>    /* <br>     * Here we want to get the interface on the page we're in. <br>     * The function we call in CPages does not AddRef the page, but <br>     * QueryInterface does. <br>     */ <br>    m_pTen-&gt;m_pPG-&gt;IPageGetFromID((DWORD)-1L, &amp;pPage, FALSE); <br> <br>    if (NULL!=pPage) <br>        { <br>        return pPage-&gt;QueryInterface(IID_IOleItemContainer <br>            , (PPVOID)ppContainer); <br>        } <br> <br>    return ResultFromScode(E_FAIL); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::ShowObject <br> * <br> * Purpose: <br> *  Tells the container to bring the object fully into view as much <br> *  as possible, that is, scroll the document. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::ShowObject(void) <br>    { <br>    HWND        hWnd, hWndT; <br> <br>    /* <br>     * We let the tenant do this, since it can access the current <br>     * scroll position as a friend of CPages whereas we cannot. <br>     */ <br> <br>    //Don't try to show objects that are always active. <br>    if (!((OLEMISC_INSIDEOUT | OLEMISC_ACTIVATEWHENVISIBLE) <br>        &amp; m_pTen-&gt;m_grfMisc)) <br>        m_pTen-&gt;ShowYourself(); <br> <br>    //For linking to embedding, show the main window. <br>    hWndT=GetParent(m_pTen-&gt;m_hWnd); <br> <br>    while (NULL!=hWndT) <br>        { <br>        hWnd=hWndT; <br>        hWndT=GetParent(hWnd); <br>        } <br> <br>    ShowWindow(hWnd, SW_SHOWNOACTIVATE); <br>    m_pTen-&gt;UpdateInPlaceObjectRects(NULL, TRUE); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIOleClientSite::OnShowWindow <br> * <br> * Purpose: <br> *  Informs the container if the object is showing itself or <br> *  hiding itself.  This is done only in the opening mode and allows <br> *  the container to know when to shade or unshade the object. <br> * <br> * Parameters: <br> *  fShow           BOOL indiciating that the object is being shown <br> *                  (TRUE) or hidden (FALSE). <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::OnShowWindow(BOOL fShow) <br>    { <br>    //All we have to do is tell the tenant of the open state change. <br>    m_pTen-&gt;ShowAsOpen(fShow); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>//CHAPTER24MOD <br>/* <br> * CImpIOleClientSite::RequestNewObjectLayout <br> * <br> * Purpose: <br> *  Called when the object would like to have its layout <br> *  reinitialized.  This is used by OLE Controls. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CImpIOleClientSite::RequestNewObjectLayout(void) <br>    { <br>    RECT    rc, rcT; <br>    SIZEL   szl; <br>    HRESULT hr; <br> <br>    /* <br>     * This function is called by a control that is not in-place <br>     * active or UI active and therefore doesn't have our <br>     * IOleInPlaceSite interface in which to call OnPosRectChange. <br>     * Therefore we do pretty much the same thing we do in that <br>     * function although we ask the control for the size it wants. <br>     */ <br> <br>    //Get the size from the control <br>    if (NULL!=m_pTen-&gt;m_pIViewObject2) <br>        { <br>        hr=m_pTen-&gt;m_pIViewObject2-&gt;GetExtent(m_pTen-&gt;m_fe.dwAspect <br>            , -1, NULL, &amp;szl); <br>        } <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    //Add these extents to the existing tenant position. <br>    SetRect(&amp;rcT, 0, 0, szl.cx*10, -szl.cy*10); <br>    RectConvertMappings(&amp;rcT, NULL, TRUE); <br> <br>    rc=m_pTen-&gt;m_rcPos; <br>    rc.right=rc.left+rcT.right; <br>    rc.bottom=rc.top+rcT.bottom; <br> <br>    m_pTen-&gt;UpdateInPlaceObjectRects(&amp;rc, FALSE); <br>    return NOERROR; <br>    } <br>//End CHAPTER24MOD </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQUARE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context757"></a>SQUARE.H</h2>
<pre><code>/* <br> * SQUARE.H <br> * Square Automation Object Chapter 15 <br> * <br> * Definitions, classes, and prototypes for an EXE that <br> * provides Square objects to automation controllers <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _SQUARE_H_ <br>#define _SQUARE_H_ <br> <br>//Get the object definitions <br>#define INC_AUTOMATION <br>#define CHAPTER15 <br>#define GUIDS_FROM_TYPELIB <br>#include &lt;inole.h&gt; <br>#include &lt;math.h&gt; <br> <br>#include "isquare.h" <br> <br>LRESULT APIENTRY MainWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>class CApp <br>    { <br>    friend LRESULT APIENTRY MainWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    protected: <br>        HINSTANCE       m_hInst;            //WinMain parameters <br>        HINSTANCE       m_hInstPrev; <br>        LPSTR           m_pszCmdLine; <br>        UINT            m_nCmdShow; <br> <br>        BOOL            m_fInitialized;     //Did CoInitialize work? <br>        LPCLASSFACTORY  m_pIClassFactory;   //Our class factory <br>        DWORD           m_dwRegCO;          //Registration key <br> <br>    public: <br>        CApp(HINSTANCE, HINSTANCE, LPSTR, UINT); <br>        ~CApp(void); <br>        BOOL Init(void); <br>    }; <br> <br>typedef CApp *PCApp; <br> <br> <br>void ObjectDestroyed(void); <br> <br> <br>class CSquareClassFactory : public IClassFactory <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        HWND            m_hWnd;         //Main window (hidden) <br>        HINSTANCE       m_hInst;        //Module instance <br> <br>    public: <br>        CSquareClassFactory(HWND, HINSTANCE); <br>        ~CSquareClassFactory(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IClassFactory members <br>        STDMETHODIMP  CreateInstance(LPUNKNOWN, REFIID, PPVOID); <br>        STDMETHODIMP  LockServer(BOOL); <br>    }; <br> <br>typedef CSquareClassFactory *PCSquareClassFactory; <br> <br> <br>//Information for the window in which we draw <br>LRESULT APIENTRY SquareWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>#define SZCLASSSQUARE       TEXT("SquareWindow") <br> <br> <br>class CSquare : public ISphereSquare <br>    { <br>    friend LRESULT APIENTRY SquareWndProc(HWND, UINT, WPARAM <br>        , LPARAM); <br> <br>    protected: <br>        ULONG           m_cRef;         //Object reference count <br>        HWND            m_hWnd;         //Drawing window. <br> <br>        ITypeInfo      *m_pITypeInfo;   //Loaded <br>        IUnknown       *m_pIUnkDisp;    //From CreateStdDispatch <br> <br>        //Plotting variables <br>        double          m_cRadius;      //Edge length <br>        double          m_dTheta;       //Angle <br>        double          m_dDeclin;      //Declination <br> <br>        int             m_xOrg, m_yOrg; //Origin point <br>        int             m_cx, m_cy;     //Window size <br>        int             m_xPos, m_yPos; //Window position <br> <br>        COLORREF        m_crLinePos;    //Positive line color <br>        HPEN            m_hPenPos;      //Positive line pen <br> <br>        COLORREF        m_crLineNeg;    //Negative line color <br>        HPEN            m_hPenNeg;      //Negative line pen <br> <br>        COLORREF        m_crBack;       //Background color <br> <br>    public: <br>        CSquare(void); <br>        ~CSquare(void); <br> <br>        BOOL        Init(HWND, HINSTANCE); <br>        void        CreatePens(BOOL, BOOL); <br>        void        Draw(HDC); <br> <br>        //IUnknown Members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //ISphereSquare members <br>        STDMETHODIMP_(double) get_Radius(void); <br>        STDMETHODIMP_(void) put_Radius(double); <br>        STDMETHODIMP_(double) get_Theta(void); <br>        STDMETHODIMP_(void) put_Theta(double); <br>        STDMETHODIMP_(double) get_Declination(void); <br>        STDMETHODIMP_(void) put_Declination(double); <br>        STDMETHODIMP_(long) get_BackColor(void); <br>        STDMETHODIMP_(void) put_BackColor(long); <br>        STDMETHODIMP_(long) get_LineColorPositive(void); <br>        STDMETHODIMP_(void) put_LineColorPositive(long); <br>        STDMETHODIMP_(long) get_LineColorNegative(void); <br>        STDMETHODIMP_(void) put_LineColorNegative(long); <br>        STDMETHODIMP_(void) Draw(void); <br>        STDMETHODIMP_(void) SetCenterPoint(int, int); <br>        STDMETHODIMP_(void) ShowWindow(int); <br>        STDMETHODIMP_(void) SetWindowPosition(int, int); <br>        STDMETHODIMP_(void) SetWindowSize(int, int); <br>    }; <br> <br>typedef CSquare *PCSquare; <br> <br> <br>#define CBSQUAREWNDEXTRA        sizeof(PCSquare) <br>#define SQWL_STRUCTURE          0 <br> <br>//Handy constant <br>#define PI 3.1415926535 <br> <br>#endif //_SQUARE_H_ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context492"></a>KOALA.CPP</h2>
<pre><code>/* <br> * KOALA.CPP <br> * Koala Object Independent of DLL/EXE Servers, Chapter 5 <br> * <br> * Implementation of the CKoala object that works in either <br> * an EXE or DLL as it only implements IUnknown. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "koala.h" <br> <br> <br>/* <br> * CKoala::CKoala <br> * CKoala::~CKoala <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CKoala::CKoala(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br>    return; <br>    } <br> <br>CKoala::~CKoala(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CKoala::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CKoala that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CKoala::Init(void) <br>    { <br>    //Nothing to do. <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CKoala::QueryInterface <br> * CKoala::AddRef <br> * CKoala::Release <br> * <br> * Purpose: <br> *  IUnknown members for CKoala object. <br> */ <br> <br>STDMETHODIMP CKoala::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * The only calls for IUnknown are either in a nonaggregated <br>     * case or when created in an aggregation, so in either case <br>     * always return our IUnknown for IID_IUnknown. <br>     */ <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    /* <br>     * Tell the housing that an object is going away so it can <br>     * shut down if appropriate. <br>     */ <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

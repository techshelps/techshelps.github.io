<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EKOALA2.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context494"></a>EKOALA2.CPP</h2>
<pre><code>/* <br> * EKOALA2.CPP <br> * Koala Object EXE Self-Registering Server Chapter 5 <br> * <br> * Example object implemented in an EXE. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "ekoala2.h" <br> <br> <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br> <br>//Make window handle global so other code can cause a shutdown <br>HWND        g_hWnd=NULL; <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    MSG         msg; <br>    PAPP        pApp; <br> <br>    SETMESSAGEQUEUE; <br> <br>    pApp=new CApp(hInst, hInstPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pApp) <br>        return -1; <br> <br>    if (pApp-&gt;Init()) <br>        { <br>        while (GetMessage(&amp;msg, NULL, 0,0 )) <br>            { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>            } <br>        } <br> <br>    delete pApp; <br>    return msg.wParam; <br>    } <br> <br> <br> <br>/* <br> * KoalaWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure. <br> */ <br> <br>LRESULT APIENTRY KoalaWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PAPP        pApp; <br> <br>    pApp=(PAPP)GetWindowLong(hWnd, KOALAWL_STRUCTURE); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pApp=(PAPP)(((LPCREATESTRUCT)lParam)-&gt;lpCreateParams); <br>            SetWindowLong(hWnd, KOALAWL_STRUCTURE, (LONG)pApp); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the Koala object to call when it gets destroyed. <br> *  We destroy the main window if the proper conditions are met <br> *  for shutdown. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br> <br>    //No more objects and no locks, shut the app down. <br>    if (0L==g_cObj &amp;&amp; 0L==g_cLock &amp;&amp; IsWindow(g_hWnd)) <br>        PostMessage(g_hWnd, WM_CLOSE, 0, 0L); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::CApp <br> * CApp::~CApp <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the Application from WinMain <br> *  hInstPrev       HINSTANCE of a previous instance from WinMain <br> *  pszCmdLine      LPSTR of the command line. <br> *  nCmdShow        UINT specifying how to show the app window, <br> *                  from WinMain. <br> */ <br> <br>CApp::CApp(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, UINT nCmdShow) <br>    { <br>    //Initialize WinMain parameter holders. <br>    m_hInst     =hInst; <br>    m_hInstPrev =hInstPrev; <br>    m_pszCmdLine=pszCmdLine; <br>    m_nCmdShow  =nCmdShow; <br> <br>    m_hWnd=NULL; <br>    m_dwRegCO=0; <br>    m_pIClassFactory=NULL; <br>    m_fInitialized=FALSE; <br>    return; <br>    } <br> <br> <br>CApp::~CApp(void) <br>    { <br>    //Opposite of CoRegisterClassObject; class factory ref is now 1 <br>    if (0L!=m_dwRegCO) <br>        CoRevokeClassObject(m_dwRegCO); <br> <br>    //The last Release, which frees the class factory. <br>    if (NULL!=m_pIClassFactory) <br>        m_pIClassFactory-&gt;Release(); <br> <br>    if (m_fInitialized) <br>        CoUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::Init <br> * <br> * Purpose: <br> *  Initializes an CApp object by registering window classes, <br> *  creating the main window, and doing anything else prone to <br> *  failure.  If this function fails the caller should guarantee <br> *  that the destructor is called. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::Init(void) <br>    { <br>    WNDCLASS    wc; <br>    HRESULT     hr; <br>   #ifndef WIN32 <br>    DWORD       dwVer; <br>   #endif <br> <br>    /* <br>     * Check if we're being run for self-registration.  If so, <br>     * do the job, then quit by returning FALSE from here. <br>     */ <br>    if (0==lstrcmpiA(m_pszCmdLine, "-RegServer") <br>        || 0==lstrcmpiA(m_pszCmdLine, "/RegServer")) <br>        { <br>        RegisterServer(); <br>        return FALSE; <br>        } <br> <br>    if (0==lstrcmpiA(m_pszCmdLine, "-UnregServer") <br>        || 0==lstrcmpiA(m_pszCmdLine, "/UnregServer")) <br>        { <br>        UnregisterServer(); <br>        return FALSE; <br>        } <br> <br>    //Fail if we're run outside of CoGetClassObject <br>    if (lstrcmpiA(m_pszCmdLine, "-Embedding") <br>        &amp;&amp; lstrcmpiA(m_pszCmdLine, "/Embedding")) <br>        return FALSE; <br> <br>   #ifndef WIN32 <br>    dwVer=CoBuildVersion(); <br> <br>    if (rmm!=HIWORD(dwVer)) <br>        return FALSE; <br> <br>    //No need to check minor versions. <br>   #endif <br> <br>    //Call CoInitialize so we can call other Co* functions <br>    if (FAILED(CoInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    if (!m_hInstPrev) <br>        { <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = KoalaWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = CBWNDEXTRA; <br>        wc.hInstance      = m_hInst; <br>        wc.hIcon          = NULL; <br>        wc.hCursor        = NULL; <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = NULL; <br>        wc.lpszClassName  = TEXT("Koala"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    m_hWnd=CreateWindow(TEXT("Koala"), TEXT("Koala") <br>        , WS_OVERLAPPEDWINDOW, 35, 35, 350, 250 <br>        , NULL, NULL, m_hInst, this); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    g_hWnd=m_hWnd; <br> <br>    /* <br>     * Create our class factory and register it for this application <br>     * using CoRegisterClassObject. We are able to service more than <br>     * one object at a time so we use REGCLS_MULTIPLEUSE. <br>     */ <br>    m_pIClassFactory=new CKoalaClassFactory(); <br> <br>    if (NULL==m_pIClassFactory) <br>        return FALSE; <br> <br>    //Since we hold on to this, we should AddRef it. <br>    m_pIClassFactory-&gt;AddRef(); <br> <br>    hr=CoRegisterClassObject(CLSID_Koala, m_pIClassFactory <br>        , CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE, &amp;m_dwRegCO); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CApp::RegisterServer <br> * <br> * Purpose: <br> *  Creates registry enties for this server. <br> */ <br> <br>void CApp::RegisterServer(void) <br>    { <br>    TCHAR       szID[128]; <br>    TCHAR       szCLSID[128]; <br>    TCHAR       szModule[512]; <br> <br>    //Create some bas key strings. <br>    StringFromGUID2(CLSID_Koala, szID, 128); <br>    lstrcpy(szCLSID, TEXT("CLSID\\")); <br>    lstrcat(szCLSID, szID); <br> <br>    //Create ProgID keys <br>    SetKeyAndValue(TEXT("Koala1.0"), NULL <br>        , TEXT("Koala Object Chapter 5")); <br>    SetKeyAndValue(TEXT("Koala1.0"), TEXT("CLSID"), szID); <br> <br>    //Create VersionIndependentProgID keys <br>    SetKeyAndValue(TEXT("Koala"), NULL <br>        , TEXT("Koala Object Chapter 5")); <br>    SetKeyAndValue(TEXT("Koala"), TEXT("CurVer") <br>        , TEXT("Koala1.0")); <br>    SetKeyAndValue(TEXT("Koala"), TEXT("CLSID"), szID); <br> <br>    //Create entries under CLSID <br>    SetKeyAndValue(szCLSID, NULL, TEXT("Koala Object Chapter 5")); <br>    SetKeyAndValue(szCLSID, TEXT("ProgID"), TEXT("Koala1.0")); <br>    SetKeyAndValue(szCLSID, TEXT("VersionIndependentProgID") <br>        , TEXT("Koala")); <br>    SetKeyAndValue(szCLSID, TEXT("NotInsertable"), NULL); <br> <br>    GetModuleFileName(m_hInst, szModule <br>        , sizeof(szModule)/sizeof(TCHAR)); <br> <br>   #ifdef WIN32 <br>    SetKeyAndValue(szCLSID, TEXT("LocalServer32"), szModule); <br>   #else <br>    SetKeyAndValue(szCLSID, TEXT("LocalServer"), szModule); <br>   #endif <br> <br>return; <br>    } <br> <br> <br> <br>/* <br> * CApp::RegisterServer <br> * <br> * Purpose: <br> *  Removes registry entries for this server <br> */ <br> <br> <br>void CApp::UnregisterServer(void) <br>    { <br>    TCHAR       szID[128]; <br>    TCHAR       szCLSID[128]; <br>    TCHAR       szTemp[256]; <br> <br>    //Create some base key strings. <br>    StringFromGUID2(CLSID_Koala, szID, 128); <br>    lstrcpy(szCLSID, TEXT("CLSID\\")); <br>    lstrcat(szCLSID, szID); <br> <br>    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Koala\\CurVer")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Koala\\CLSID")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Koala")); <br> <br>    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Koala1.0\\CLSID")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Koala1.0")); <br> <br>    wsprintf(szTemp, TEXT("%s\\%s"), szCLSID, TEXT("ProgID")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, szTemp); <br> <br>    wsprintf(szTemp, TEXT("%s\\%s"), szCLSID, TEXT("VersionIndependentProgID")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, szTemp); <br> <br>    wsprintf(szTemp, TEXT("%s\\%s"), szCLSID, TEXT("NotInsertable")); <br>    RegDeleteKey(HKEY_CLASSES_ROOT, szTemp); <br> <br>   #ifdef WIN32 <br>    wsprintf(szTemp, TEXT("%s\\%s"), szCLSID, TEXT("LocalServer32")); <br>   #else <br>    wsprintf(szTemp, "%s\\%s", szCLSID, "LocalServer"); <br>   #endif <br>    RegDeleteKey(HKEY_CLASSES_ROOT, szTemp); <br> <br>    RegDeleteKey(HKEY_CLASSES_ROOT, szCLSID); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CApp::SetKeyAndValue <br> * <br> * Purpose: <br> *  Private helper function for RegisterServer that creates <br> *  a key, sets a value, and closes that key. <br> * <br> * Parameters: <br> *  pszKey          LPTSTR to the ame of the key <br> *  pszSubkey       LPTSTR ro the name of a subkey <br> *  pszValue        LPTSTR to the value to store <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::SetKeyAndValue(LPTSTR pszKey, LPTSTR pszSubkey <br>    , LPTSTR pszValue) <br>    { <br>    HKEY        hKey; <br>    TCHAR       szKey[256]; <br> <br>    lstrcpy(szKey, pszKey); <br> <br>    if (NULL!=pszSubkey) <br>        { <br>        lstrcat(szKey, TEXT("\\")); <br>        lstrcat(szKey, pszSubkey); <br>        } <br> <br>    if (ERROR_SUCCESS!=RegCreateKeyEx(HKEY_CLASSES_ROOT <br>        , szKey, 0, NULL, REG_OPTION_NON_VOLATILE <br>        , KEY_ALL_ACCESS, NULL, &amp;hKey, NULL)) <br>        return FALSE; <br> <br>    if (NULL!=pszValue) <br>        { <br>        RegSetValueEx(hKey, NULL, 0, REG_SZ, (BYTE *)pszValue <br>            , (lstrlen(pszValue)+1)*sizeof(TCHAR)); <br>        } <br> <br>    RegCloseKey(hKey); <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoalaClassFactory::CKoalaClassFactory <br> * CKoalaClassFactory::~CKoalaClassFactory <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CKoalaClassFactory::CKoalaClassFactory(void) <br>    { <br>    m_cRef=0L; <br>    return; <br>    } <br> <br>CKoalaClassFactory::~CKoalaClassFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CKoalaClassFactory::QueryInterface <br> * CKoalaClassFactory::AddRef <br> * CKoalaClassFactory::Release <br> */ <br> <br>STDMETHODIMP CKoalaClassFactory::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoalaClassFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoalaClassFactory::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoalaClassFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates a Koala object returning an interface pointer. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          PPVOID in which to store the desired <br> *                  interface pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise E_NOINTERFACE <br> *                  if we cannot support the requested interface. <br> */ <br> <br>STDMETHODIMP CKoalaClassFactory::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, PPVOID ppvObj) <br>    { <br>    PCKoala             pObj; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    //Verify that a controlling unknown asks for IUnknown <br>    if (NULL!=pUnkOuter &amp;&amp; IID_IUnknown!=riid) <br>        return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>    //Create the object telling us to notify us when it's gone. <br>    pObj=new CKoala(pUnkOuter, ObjectDestroyed); <br> <br>    if (NULL==pObj) <br>        { <br>        //This starts shutdown if there are no other objects. <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        return hr; <br>        } <br> <br>    if (pObj-&gt;Init()) <br>        hr=pObj-&gt;QueryInterface(riid, ppvObj); <br> <br>    g_cObj++; <br> <br>    /* <br>     * Kill the object if initial creation or Init failed. If <br>     * the object failed, we handle the g_cObj increment above <br>     * in ObjectDestroyed. <br>     */ <br>    if (FAILED(hr)) <br>        { <br>        delete pObj; <br>        ObjectDestroyed();  //Handle shutdown cases. <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoalaClassFactory::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory object.  When the number of locks goes to <br> *  zero and the number of objects is zero, we shut down the <br> *  application. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR always. <br> */ <br> <br>STDMETHODIMP CKoalaClassFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        { <br>        g_cLock--; <br> <br>        /* <br>         * Fake an object destruction:  this centralizes <br>         * all the shutdown code in the ObjectDestroyed <br>         * function, eliminating duplicate code here. <br>         */ <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        } <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLYLINE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context506"></a>POLYLINE.H</h2>
<pre><code>/* <br> * POLYLINE.H <br> * Polyline Component Object Chapter 5 <br> * <br> * Definitions and function prototypes <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _POLYLINE_H_ <br>#define _POLYLINE_H_ <br> <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;bookguid.h&gt; <br>//CHAPTER5MOD <br>#include &lt;classlib.h&gt; <br>#include &lt;ipoly5.h&gt; <br>#include "resource.h" <br>//End CHAPTER5MOD <br> <br> <br>//Classname <br>#define SZCLASSPOLYLINE             TEXT("polyline") <br> <br>//CHAPTER5MOD <br>//Stream Name that holds the data <br>#define SZSTREAM                    OLESTR("CONTENTS") <br>//End CHAPTER5MOD <br> <br>#define HIMETRIC_PER_INCH           2540 <br> <br>//Window extra bytes and offsets <br>#define CBPOLYLINEWNDEXTRA          (sizeof(LONG)) <br>#define PLWL_STRUCTURE              0 <br> <br> <br>//DLLPOLY.CPP <br>int PASCAL LibMain(HINSTANCE, WORD, WORD, LPSTR); <br> <br>//This class factory object creates Polyline objects. <br> <br>class CPolylineClassFactory : public IClassFactory <br>    { <br>    protected: <br>        ULONG           m_cRef; <br> <br>    public: <br>        CPolylineClassFactory(void); <br>        ~CPolylineClassFactory(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IClassFactory members <br>        STDMETHODIMP         CreateInstance(LPUNKNOWN, REFIID <br>                                 , PPVOID); <br>        STDMETHODIMP         LockServer(BOOL); <br>    }; <br> <br>typedef CPolylineClassFactory *PCPolylineClassFactory; <br> <br> <br> <br>//POLYWIN.CPP <br>LRESULT APIENTRY PolylineWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>//Type for an object-destroyed callback <br>typedef void (PASCAL *PFNDESTROYED)(void); <br> <br>//Forward class references <br>class CImpIPolyline; <br>typedef class CImpIPolyline *PIMPIPOLYLINE; <br> <br>//CHAPTER5MOD <br>class CImpIPersistStorage; <br>typedef class CImpIPersistStorage *PIMPIPERSISTSTORAGE; <br>//End CHAPTER5MOD <br> <br> <br>//POLYLINE.CPP <br>class CPolyline : public IUnknown <br>    { <br>    friend LRESULT APIENTRY PolylineWndProc(HWND, UINT, WPARAM <br>        , LPARAM); <br> <br>    friend class CImpIPolyline; <br>    //CHAPTER5MOD <br>    friend class CImpIPersistStorage; <br>    //End CHAPTER5MOD <br> <br>    protected: <br>        HWND            m_hWnd; <br>        HINSTANCE       m_hInst; <br> <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling Unknown <br>        PFNDESTROYED    m_pfnDestroy;   //Function called on closure <br>        BOOL            m_fDirty;       //Have we changed? <br>        POLYLINEDATA    m_pl;           //Our actual data <br> <br>        //CHAPTER5MOD <br>        PCStringTable   m_pST;          //Object strings <br>        UINT            m_cf;           //Object clipboard format <br>        CLSID           m_clsID;        //Current CLSID <br> <br>        //We have to hold these for IPersistStorage::Save <br>        LPSTORAGE       m_pIStorage; <br>        LPSTREAM        m_pIStream; <br>        //End CHAPTER5MOD <br> <br>        //Contained interfaces <br>        PIMPIPOLYLINE           m_pIPolyline; <br>        //CHAPTER5MOD <br>        PIMPIPERSISTSTORAGE     m_pIPersistStorage; <br>        //End CHAPTER5MOD <br> <br>        PPOLYLINEADVISESINK     m_pAdv; <br> <br>    protected: <br>        void      PointScale(LPRECT, LPPOINTS, BOOL); <br>        void      Draw(HDC, BOOL, BOOL); <br>        void      RectConvertMappings(LPRECT, BOOL); <br> <br>    public: <br>        CPolyline(LPUNKNOWN, PFNDESTROYED, HINSTANCE); <br>        ~CPolyline(void); <br> <br>        BOOL      FInit(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CPolyline *PCPolyline; <br> <br> <br> <br> <br>//Interface implementation contained in the Polyline. <br> <br>class CImpIPolyline : public IPolyline5 <br>    { <br>    protected: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br> <br>    public: <br>        CImpIPolyline(PCPolyline, LPUNKNOWN); <br>        ~CImpIPolyline(void); <br> <br>        //IUnknown members. <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //CHAPTER5MOD <br>        //ReadFromFile and WriteToFile replaced with IPersistStorage. <br>        //End CHAPTER5MOD <br> <br>        //Data transfer members: <br>        STDMETHODIMP DataSet(PPOLYLINEDATA, BOOL, BOOL); <br>        STDMETHODIMP DataGet(PPOLYLINEDATA); <br>        STDMETHODIMP DataSetMem(HGLOBAL, BOOL, BOOL, BOOL); <br>        STDMETHODIMP DataGetMem(HGLOBAL *); <br> <br>        STDMETHODIMP RenderBitmap(HBITMAP *); <br>        STDMETHODIMP RenderMetafile(HMETAFILE *); <br>        STDMETHODIMP RenderMetafilePict(HGLOBAL *); <br> <br>        //Manipulation members: <br>        STDMETHODIMP Init(HWND, LPRECT, DWORD, UINT); <br>        STDMETHODIMP New(void); <br>        STDMETHODIMP Undo(void); <br>        STDMETHODIMP Window(HWND *); <br> <br>        STDMETHODIMP SetAdvise(PPOLYLINEADVISESINK); <br>        STDMETHODIMP GetAdvise(PPOLYLINEADVISESINK *); <br> <br>        STDMETHODIMP RectGet(LPRECT); <br>        STDMETHODIMP SizeGet(LPRECT); <br>        STDMETHODIMP RectSet(LPRECT, BOOL); <br>        STDMETHODIMP SizeSet(LPRECT, BOOL); <br> <br>        STDMETHODIMP ColorSet(UINT, COLORREF, COLORREF *); <br>        STDMETHODIMP ColorGet(UINT, COLORREF *); <br> <br>        STDMETHODIMP LineStyleSet(UINT, UINT *); <br>        STDMETHODIMP LineStyleGet(UINT *); <br>    }; <br> <br> <br>//CHAPTER5MOD <br> <br>//Interface implementation contained in the Polyline. <br> <br>class CImpIPersistStorage : public IPersistStorage <br>    { <br>    protected: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br>        PSSTATE             m_psState;   //Storage state <br> <br>    public: <br>        CImpIPersistStorage(PCPolyline, LPUNKNOWN); <br>        ~CImpIPersistStorage(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP InitNew(LPSTORAGE); <br>        STDMETHODIMP Load(LPSTORAGE); <br>        STDMETHODIMP Save(LPSTORAGE, BOOL); <br>        STDMETHODIMP SaveCompleted(LPSTORAGE); <br>        STDMETHODIMP HandsOffStorage(void); <br>    }; <br> <br>//End CHAPTER5MOD <br> <br>#endif  //_POLYLINE_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

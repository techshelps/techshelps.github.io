<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SELFREG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context509"></a>SELFREG.CPP</h2>
<pre><code>/* <br> * SELFREG.CPP <br> * Server Self-Registrtation Utility, Chapter 5 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "selfreg.h" <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    BOOL        fEXE=FALSE; <br>    BOOL        fUnreg=FALSE; <br>    LPSTR       psz; <br>    char        ch; <br> <br>    /* <br>     * Walk down the command line looking for /u and /e in <br>     * any order.  The first non-whitespace character after <br>     * whitespace that is not a "/" is assumed to be the <br>     * beginning of the server filename.  This is all done <br>     * in ANSI because pszCmdLine is in ANSI. <br>     */ <br> <br>    psz=pszCmdLine; <br> <br>    while (ch=*psz) <br>        { <br>        BOOL    fStop=FALSE; <br> <br>        switch (ch) <br>            { <br>            case '\t': <br>            case '\n': <br>            case '\r': <br>            case ' ': <br>                //Scan for next non-whitespace and continue <br>                psz=PszWhiteSpaceScan(psz, TRUE); <br>                continue; <br> <br>            case '/': <br>                /* <br>                 * Check what flag this is, then skip to next <br>                 * whitespace. <br>                 */ <br>                ch=*(++psz); <br>                if ('u'==ch) <br>                    fUnreg=TRUE; <br> <br>                if ('e'==ch) <br>                    fEXE=TRUE; <br> <br>                psz=PszWhiteSpaceScan(psz, FALSE); <br>                continue; <br> <br>            default: <br>                fStop=TRUE; <br>                break; <br>            } <br> <br>        if (fStop) <br>            break; <br> <br>        psz++; <br>        } <br> <br> <br>    if (0==ch) <br>        return 0;   //Nothing to do <br> <br> <br>    /* <br>     * Now launch and EXE or load a DLL and tell them to do <br>     * their registration or unregistartion. <br>     */ <br>    if (fEXE) <br>        { <br>        char    szEXE[512]; <br> <br>        wsprintfA(szEXE, "%s %s", psz <br>            , fUnreg ? "/UNREGSERVER" : "/REGSERVER"); <br>        WinExec(szEXE, SW_HIDE); <br> <br>        MessageBoxA(NULL, fUnreg <br>            ? "EXE unregistration started" <br>            : "EXE registration started.", "SelfReg", MB_OK); <br>        } <br>    else <br>        { <br>        HINSTANCE       hMod; <br> <br>        //Do this for the sake of DLLs. <br>        if (FAILED(CoInitialize(NULL))) <br>            return 0; <br> <br>        hMod=LoadLibraryA(psz); <br> <br>        if (hMod &gt; (HINSTANCE)HINSTANCE_ERROR) <br>            { <br>            HRESULT (STDAPICALLTYPE *pfn)(void); <br>            BOOL    fRes=FALSE; <br> <br>            if (fUnreg) <br>                { <br>                (FARPROC&amp;)pfn=GetProcAddress(hMod <br>                    , "DllUnregisterServer"); <br> <br>                if (NULL!=pfn) <br>                    fRes=SUCCEEDED((*pfn)()); <br> <br>                MessageBoxA(NULL, fRes <br>                    ? "DLL unregistration succeeded." <br>                    : "DLL unregistration failed.", "SelfReg", MB_OK); <br>                } <br>            else <br>                { <br>                (FARPROC&amp;)pfn=GetProcAddress(hMod <br>                    , "DllRegisterServer"); <br> <br>                if (NULL!=pfn) <br>                    fRes=SUCCEEDED((*pfn)()); <br> <br>                MessageBoxA(NULL , fRes <br>                    ? "DLL registration succeeded." <br>                    : "DLL registration failed.", "SelfReg", MB_OK); <br>                } <br> <br>            CoFreeLibrary(hMod); <br>            CoUninitialize(); <br>            } <br>        else <br>            { <br>            MessageBoxA(NULL, "LoadLibrary failed.", "SelfReg" <br>                , MB_OK); <br>            } <br>        } <br> <br>    return 1; <br>    } <br> <br> <br> <br> <br>LPSTR PszWhiteSpaceScan(LPSTR psz, BOOL fSkip) <br>    { <br>    char        ch; <br>    BOOL        fWhite; <br> <br>    while (ch=*psz) <br>        { <br>        fWhite=('\n'==ch || '\r'==ch <br>            || '\t'==ch || ' '==ch); <br> <br>        //Too bad C doesn't have a logical XOR (^^) operator. <br>        if ((fSkip &amp;&amp; !fWhite) || (!fSkip &amp;&amp; fWhite)) <br>            break; <br> <br>        psz++; <br>        } <br> <br>    return psz; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

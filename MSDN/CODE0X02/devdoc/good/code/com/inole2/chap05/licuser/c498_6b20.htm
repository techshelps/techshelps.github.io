<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LICUSER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context498"></a>LICUSER.CPP</h2>
<pre><code>/* <br> * LICUSER.CPP <br> * Licensed Koala Object User/Client Chapter 5 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "licuser.h" <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    MSG         msg; <br>    PAPP        pApp; <br> <br>    SETMESSAGEQUEUE; <br> <br>    pApp=new CApp(hInst, hInstPrev, nCmdShow); <br> <br>    if (NULL==pApp) <br>        return -1; <br> <br>    if (pApp-&gt;Init()) <br>        { <br>        while (GetMessage(&amp;msg, NULL, 0,0 )) <br>            { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>            } <br>        } <br> <br>    delete pApp; <br>    return msg.wParam; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * LicensedUserWndProc <br> * <br> * Purpose: <br> *  Window class procedure.  Standard callback. <br> */ <br> <br>LRESULT APIENTRY LicensedUserWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PAPP            pApp; <br> <br>    pApp=(PAPP)GetWindowLong(hWnd, LICUSERWL_STRUCTURE); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pApp=(PAPP)(((LPCREATESTRUCT)lParam)-&gt;lpCreateParams); <br>            SetWindowLong(hWnd, LICUSERWL_STRUCTURE, (LONG)pApp); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) <br>                { <br>                case IDM_CFOBTAINCF: <br>                    pApp-&gt;ObtainClassFactory(FALSE); <br>                    break; <br> <br>                case IDM_CFOBTAINCF2: <br>                    pApp-&gt;ObtainClassFactory(TRUE); <br>                    break; <br> <br> <br>                case IDM_CFRELEASE: <br>                    pApp-&gt;ReleaseClassFactory(TRUE); <br>                    break; <br> <br> <br>                case IDM_CFREQUESTLICKEY: <br>                    if (NULL==pApp-&gt;m_pIClassFac2) <br>                        { <br>                        pApp-&gt;Message(TEXT("Obtain IClassFactory2 first")); <br>                        break; <br>                        } <br> <br>                    if (NULL!=pApp-&gt;m_bstrKey) <br>                        { <br>                        pApp-&gt;Message(TEXT("You already have a key")); <br>                        break; <br>                        } <br> <br>                    if (SUCCEEDED(pApp-&gt;m_pIClassFac2-&gt;RequestLicKey(0 <br>                        , &amp;pApp-&gt;m_bstrKey))) <br>                        pApp-&gt;Message(TEXT("Got license key")); <br>                    else <br>                        pApp-&gt;Message(TEXT("Failed to get license key")); <br> <br>                    break; <br> <br> <br>                case IDM_CLEARLICKEY: <br>                    if (NULL!=pApp-&gt;m_bstrKey) <br>                        { <br>                        SysFreeString(pApp-&gt;m_bstrKey); <br>                        pApp-&gt;m_bstrKey=NULL; <br>                        pApp-&gt;Message(TEXT("Cleared license key")); <br>                        } <br>                    else <br>                        pApp-&gt;Message(TEXT("No license key to clear")); <br> <br>                    break; <br> <br> <br>                case IDM_CFEXIT: <br>                    PostMessage(hWnd, WM_CLOSE, 0, 0L); <br>                    break; <br> <br> <br>                case IDM_OBJECTCREATEINST: <br>                    pApp-&gt;CreateObject(FALSE); <br>                    break; <br> <br> <br>                case IDM_OBJECTCREATEINSTLIC: <br>                    pApp-&gt;CreateObject(TRUE); <br>                    break; <br>                } <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CApp::CApp <br> * CApp::~CApp <br> * <br> * Constructor Parameters: (from WinMain) <br> *  hInst           HINSTANCE of the application. <br> *  hInstPrev       HINSTANCE of a previous instance. <br> *  nCmdShow        UINT specifying how to show the app window. <br> * <br> */ <br> <br>CApp::CApp(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , UINT nCmdShow) <br>    { <br>    m_hInst=hInst; <br>    m_hInstPrev=hInstPrev; <br>    m_nCmdShow=nCmdShow; <br> <br>    m_hWnd=NULL; <br>    m_fInitialized=FALSE; <br> <br>    m_fLic=FALSE; <br>    m_pIClassFac=NULL; <br>    m_pIClassFac2=NULL; <br>    m_bstrKey=NULL; <br>    return; <br>    } <br> <br> <br>CApp::~CApp(void) <br>    { <br>    ReleaseClassFactory(FALSE); <br> <br>    if (NULL!=m_bstrKey) <br>        SysFreeString(m_bstrKey); <br> <br>    if (IsWindow(m_hWnd)) <br>        DestroyWindow(m_hWnd); <br> <br>    if (m_fInitialized) <br>        CoUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CApp::ObtainClassFactory <br> * <br> * Purpose: <br> *  Calls CoGetClassObject to retrieve either IClassFactory or <br> *  IClassFactory2, setting the appropriate CApp member variables <br> *  in the process and calling that factory's LockServer.  Any <br> *  currently held factory is Released as well. <br> * <br> * Parameters: <br> *  fLic            BOOL indicating if we're to get IClassFactory <br> *                  (FALSE) or IClassFactory2 (TRUE) <br> */ <br> <br>void CApp::ObtainClassFactory(BOOL fLic) <br>    { <br>    IClassFactory **ppCF; <br>    IID             iid; <br>    UINT            uIDCheck; <br>    HRESULT         hr; <br> <br>    ReleaseClassFactory(FALSE); <br> <br>    if (fLic) <br>        { <br>        ppCF=(IClassFactory **)&amp;m_pIClassFac2; <br>        iid=IID_IClassFactory2; <br>        uIDCheck=IDM_CFOBTAINCF2; <br>        } <br>    else <br>        { <br>        ppCF=&amp;m_pIClassFac; <br>        iid=IID_IClassFactory; <br>        uIDCheck=IDM_CFOBTAINCF; <br>        } <br> <br>    hr=CoGetClassObject(CLSID_Koala, CLSCTX_INPROC_SERVER, NULL <br>        , iid, (PPVOID)ppCF); <br> <br>    if (FAILED(hr)) <br>        { <br>        Message(TEXT("Failed to obtain the class factory")); <br> <br>        //This unloads any DLL that might have loaded <br>        CoFreeUnusedLibraries(); <br>        return; <br>        } <br> <br>    m_fLic=fLic; <br>    (*ppCF)-&gt;LockServer(TRUE); <br>    Message(TEXT("Class factory obtained successfully")); <br> <br>    CheckMenuItem(GetMenu(m_hWnd), uIDCheck, MF_CHECKED); <br> <br>    //Enable the object menu. <br>    EnableMenuItem(GetMenu(m_hWnd), 1, MF_BYPOSITION | MF_ENABLED); <br>    DrawMenuBar(m_hWnd); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CApp::ReleaseClassFactory <br> * <br> * Purpose: <br> *  Releases any held class factory and unlocks the server. <br> * <br> * Parameters: <br> *  fMsg            BOOL indicating whether or not to display <br> *                  any messages. <br> */ <br> <br>void CApp::ReleaseClassFactory(BOOL fMsg) <br>    { <br>    IClassFactory **ppCF; <br> <br>    ppCF=m_fLic ? (IClassFactory **)&amp;m_pIClassFac2 : &amp;m_pIClassFac; <br> <br>    if (NULL==*ppCF) <br>        { <br>        if (fMsg) <br>            Message(TEXT("No class factory to Release")); <br> <br>        return; <br>        } <br> <br>    (*ppCF)-&gt;LockServer(FALSE); <br>    (*ppCF)-&gt;Release(); <br>    *ppCF=NULL; <br> <br>    /* <br>     * This will unload the DLL, allowing you to reload it so <br>     * it will reinitialize the flag it uses to know if the <br>     * LIC file was found.  So before obtaining another class <br>     * factory you can remove the LIC file and see the results <br>     * without closing this app down. <br>     */ <br>    CoFreeUnusedLibraries(); <br> <br>    CheckMenuItem(GetMenu(m_hWnd), IDM_CFOBTAINCF,  MF_UNCHECKED); <br>    CheckMenuItem(GetMenu(m_hWnd), IDM_CFOBTAINCF2, MF_UNCHECKED); <br> <br>    EnableMenuItem(GetMenu(m_hWnd), 1, MF_BYPOSITION | MF_DISABLED <br>        | MF_GRAYED); <br>    DrawMenuBar(m_hWnd); <br> <br>    if (fMsg) <br>        Message(TEXT("Class factory released")); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::CreateObject <br> * <br> * Purpose: <br> *  Creates an object with whatever class factory has been obtained, <br> *  the releases it right away.  The purpose here is to see whether <br> *  or not the object can be created at all. <br> * <br> * Parameters: <br> *  fLic            BOOL indicating if we're to use IClassFactory <br> *                  (FALSE) or IClassFactory2 (TRUE) <br> */ <br> <br>void CApp::CreateObject(BOOL fLic) <br>    { <br>    HRESULT         hr; <br>    IUnknown       *pObj; <br> <br>    if ((fLic &amp;&amp; NULL==m_pIClassFac2) <br>        || (!fLic &amp;&amp; (NULL==m_pIClassFac &amp;&amp; NULL==m_pIClassFac2))) <br>        { <br>        Message(TEXT("There is no class factory")); <br>        return; <br>        } <br> <br>    if (fLic &amp;&amp; NULL==m_bstrKey) <br>        { <br>        Message(TEXT("Get a license key first")); <br>        return; <br>        } <br> <br>    if (fLic) <br>        { <br>        hr=m_pIClassFac2-&gt;CreateInstanceLic(NULL, NULL, IID_IUnknown <br>            , m_bstrKey, (PPVOID)&amp;pObj); <br>        } <br>    else <br>        { <br>        if (NULL!=m_pIClassFac2) <br>            { <br>            hr=m_pIClassFac2-&gt;CreateInstance(NULL, IID_IUnknown <br>                , (PPVOID)&amp;pObj); <br>            } <br>        else <br>            { <br>            hr=m_pIClassFac-&gt;CreateInstance(NULL, IID_IUnknown <br>                , (PPVOID)&amp;pObj); <br>            } <br>        } <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        Message(TEXT("Creation successful")); <br>        pObj-&gt;Release(); <br>        return; <br>        } <br> <br>    //Tell the user if creation failed for license reasons <br>    if (CLASS_E_NOTLICENSED==GetScode(hr)) <br>        { <br>        if (fLic) <br>            Message(TEXT("Creation failed: license key doesn't match")); <br>        else <br>            Message(TEXT("Creation failed: no license")); <br>        } <br>    else <br>        Message(TEXT("Creation licensed, but failed anyway")); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CApp::Init <br> * <br> * Purpose: <br> *  Initializes an CApp object by registering window classes, <br> *  creating the main window, and doing anything else prone to <br> *  failure such as calling CoInitialize.  If this function fails <br> *  the caller should insure that the destructor is called. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::Init(void) <br>    { <br>    WNDCLASS    wc; <br> <br>    CHECKVER_COM; <br> <br>    if (FAILED(CoInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    if (!m_hInstPrev) <br>        { <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = LicensedUserWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = CBWNDEXTRA; <br>        wc.hInstance      = m_hInst; <br>        wc.hIcon          = LoadIcon(m_hInst, TEXT("Icon")); <br>        wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = MAKEINTRESOURCE(IDR_MENU); <br>        wc.lpszClassName  = TEXT("LICUSER"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    m_hWnd=CreateWindow(TEXT("LICUSER") <br>        , TEXT("Licensed Object User/Client"), WS_OVERLAPPEDWINDOW <br>        , 35, 35, 350, 250, NULL, NULL, m_hInst, this); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    //Initially disable the object menu <br>    EnableMenuItem(GetMenu(m_hWnd), 1, MF_BYPOSITION | MF_DISABLED <br>        | MF_GRAYED); <br> <br>    ShowWindow(m_hWnd, m_nCmdShow); <br>    UpdateWindow(m_hWnd); <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CApp::Message <br> * <br> * Purpose: <br> *  Displays a message in the client area of the window.  This is <br> *  just to centralize the call to simpify other code. <br> * <br> * Parameters: <br> *  psz             LPTSTR to the string to display. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void inline CApp::Message(LPTSTR psz) <br>    { <br>    HDC     hDC; <br>    RECT    rc; <br> <br>    hDC=GetDC(m_hWnd); <br>    GetClientRect(m_hWnd, &amp;rc); <br> <br>    SetBkColor(hDC, GetSysColor(COLOR_WINDOW)); <br>    SetTextColor(hDC, GetSysColor(COLOR_WINDOWTEXT)); <br> <br>    /* <br>     * We'll just be sloppy and clear the whole window as <br>     * well as write the string with one ExtTextOut call. <br>     * No word wrapping here... <br>     */ <br> <br>    ExtTextOut(hDC, 0, 0, ETO_OPAQUE, &amp;rc, psz, lstrlen(psz), NULL); <br>    ReleaseDC(m_hWnd, hDC); <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

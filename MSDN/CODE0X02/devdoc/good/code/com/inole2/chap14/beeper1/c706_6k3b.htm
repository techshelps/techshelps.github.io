<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEEPER.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context707"></a>BEEPER.H</h2>
<pre><code>/* <br> * BEEPER.H <br> * Beeper Automation Object #1 Chapter 14 <br> * <br> * Classes that implement the Beeper object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Right Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _BEEPER_H_ <br>#define _BEEPER_H_ <br> <br>#define INC_AUTOMATION <br>#define CHAPTER14 <br>#include &lt;inole.h&gt; <br>#include &lt;malloc.h&gt; <br> <br>//Help context ID for exceptions <br>#define HID_SOUND_PROPERTY_LIMITATIONS  0x1E100 <br> <br> <br>//English method, property, and exception strings <br>#define IDS_0_MIN                   16 <br>#define IDS_0_EXCEPTIONSOURCE       (IDS_0_MIN) <br>#define IDS_0_EXCEPTIONINVALIDSOUND (IDS_0_MIN+1) <br>#define IDS_0_SOUND                 (IDS_0_MIN+2) <br>#define IDS_0_BEEP                  (IDS_0_MIN+3) <br> <br>#define IDS_0_NAMESMIN              (IDS_0_MIN+2) <br> <br>//German method, property, and exception strings <br>#define IDS_7_MIN                   32 <br>#define IDS_7_EXCEPTIONSOURCE       (IDS_7_MIN) <br>#define IDS_7_EXCEPTIONINVALIDSOUND (IDS_7_MIN+1) <br>#define IDS_7_SOUND                 (IDS_7_MIN+2) <br>#define IDS_7_BEEP                  (IDS_7_MIN+3) <br> <br>#define IDS_7_NAMESMIN              (IDS_7_MIN+2) <br> <br>//Number of names in GetIDsOfNames <br>#define CNAMES                      2 <br> <br>//Forward class declarations for friend statements <br>class CImpIDispatch; <br>typedef CImpIDispatch *PCImpIDispatch; <br> <br> <br>class CBeeper : public IUnknown <br>    { <br>    friend CImpIDispatch; <br> <br>    protected: <br>        ULONG           m_cRef;             //Object reference count <br>        LPUNKNOWN       m_pUnkOuter;        //Controlling unknown <br>        PFNDESTROYED    m_pfnDestroy;       //To call on closure <br> <br>        long            m_lSound;           //Type of sound <br>        PCImpIDispatch  m_pImpIDispatch;    //Our IDispatch <br>        LPTSTR          m_pszScratch;       //For GetIDsOfNames <br> <br>    public: <br>        CBeeper(LPUNKNOWN, PFNDESTROYED); <br>        ~CBeeper(void); <br> <br>        BOOL Init(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CBeeper *PCBeeper; <br> <br> <br>//DISPIDs for our dispinterface <br>enum <br>    { <br>    PROPERTY_SOUND=0, <br>    METHOD_BEEP <br>    }; <br> <br> <br>/* <br> * IDispatch interface implementations for the Beeper. <br> */ <br> <br>class CImpIDispatch : public IDispatch <br>    { <br>    public: <br>        ULONG           m_cRef; <br> <br>    private: <br>        PCBeeper        m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIDispatch(PCBeeper, LPUNKNOWN); <br>        ~CImpIDispatch(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IDispatch members <br>        STDMETHODIMP GetTypeInfoCount(UINT *); <br>        STDMETHODIMP GetTypeInfo(UINT, LCID, ITypeInfo **); <br>        STDMETHODIMP GetIDsOfNames(REFIID, OLECHAR **, UINT, LCID <br>            , DISPID *); <br>        STDMETHODIMP Invoke(DISPID, REFIID, LCID, WORD <br>            , DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *); <br>    }; <br> <br> <br> <br>//Exceptions we can throw from IDispatch::Invoke <br>enum <br>    { <br>    EXCEPTION_NONE=0, <br>    EXCEPTION_INVALIDSOUND=1000 <br>    }; <br> <br> <br>//Exception filling function for the EXCEPINFO structure. <br>HRESULT STDAPICALLTYPE FillException(EXCEPINFO *); <br> <br>#endif //_BEEPER_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

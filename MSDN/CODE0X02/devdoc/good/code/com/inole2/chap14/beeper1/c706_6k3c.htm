<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBEEPER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context708"></a>DBEEPER.CPP</h2>
<pre><code>/* <br> * DBEEPER.CPP <br> * Beeper Automation Object Chapter 14 <br> * <br> * Server module code for the Beeper object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "dbeeper.h" <br> <br> <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br>HINSTANCE   g_hInst=NULL;   //For LoadString <br> <br> <br>/* <br> * LibMain(32) <br> * <br> * Purpose: <br> *  Entry point conditionally compiled for Win32 and Windows <br> *  3.1.  Provides the proper structure for each environment. <br> */ <br> <br>#ifdef WIN32 <br>BOOL WINAPI LibMain32(HINSTANCE hInstance, ULONG ulReason <br>    , LPVOID pvReserved) <br>    { <br>    g_hInst=hInstance; <br> <br>    if (DLL_PROCESS_DETACH==ulReason) <br>        { <br>        return TRUE; <br>        } <br>    else <br>        { <br>        if (DLL_PROCESS_ATTACH!=ulReason) <br>            return TRUE; <br>        } <br> <br>    return TRUE; <br>    } <br>#else <br>int PASCAL LibMain(HINSTANCE hInstance, WORD wDataSeg <br>    , WORD cbHeapSize, LPSTR lpCmdLine) <br>    { <br>    if (0!=cbHeapSize) <br>        UnlockData(0); <br> <br>    g_hInst=hInstance; <br>    return (int)hInstance; <br>    } <br>#endif <br> <br> <br> <br>/* <br> * DllGetClassObject <br> * DllCanUnloadNow <br> * Standard COM exports for DLL servers. <br> */ <br> <br>HRESULT APIENTRY DllGetClassObject(REFCLSID rclsid, REFIID riid <br>    , PPVOID ppv) <br>    { <br>    CBeeperFactory *pBF; <br>    HRESULT         hr; <br> <br>    if (CLSID_Beeper!=rclsid) <br>        return ResultFromScode(E_FAIL); <br> <br>    //Check that we can provide the interface <br>    if (IID_IUnknown!=riid &amp;&amp; IID_IClassFactory!=riid) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    //Return our beeper factory's IClassFactory <br>    pBF=new CBeeperFactory(); <br> <br>    if (NULL==pBF) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    //If the factory hasn't the interface, delete it <br>    hr=pBF-&gt;QueryInterface(riid, ppv); <br> <br>    if (FAILED(hr)) <br>        delete pBF; <br>    else <br>        g_cObj++; <br> <br>    return hr; <br>    } <br> <br> <br>STDAPI DllCanUnloadNow(void) <br>    { <br>    SCODE   sc; <br> <br>    //Our answer is whether there are any object or locks <br>    sc=(0L==g_cObj &amp;&amp; 0L==g_cLock) ? S_OK : S_FALSE; <br>    return ResultFromScode(sc); <br>    } <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the object to call when it gets destroyed.  Since <br> *  we're in a DLL we only track the number of objects here, letting <br> *  DllCanUnloadNow take care of the rest. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CBeeperFactory::CBeeperFactory <br> * CBeeperFactory::~CBeeperFactory <br> */ <br> <br>CBeeperFactory::CBeeperFactory(void) <br>    { <br>    m_cRef=0L; <br>    return; <br>    } <br> <br> <br>CBeeperFactory::~CBeeperFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CBeeperFactory::QueryInterface <br> * CBeeperFactory::AddRef <br> * CBeeperFactory::Release <br> */ <br> <br>STDMETHODIMP CBeeperFactory::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeperFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeperFactory::Release(void) <br>    { <br>    if(0!=--m_cRef) <br>        return 0; <br> <br>    delete this; <br>    ObjectDestroyed(); <br>    return 0; <br>    } <br> <br> <br> <br>/* <br> * CBeeperFactory::CreateInstance <br> * CBeeperFactory::LockServer <br> */ <br> <br>STDMETHODIMP CBeeperFactory::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, PPVOID ppvObj) <br>    { <br>    PCBeeper            pObj; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    //Verify that a controlling unknown asks for IUnknown <br>    if (NULL!=pUnkOuter &amp;&amp; IID_IUnknown!=riid) <br>        return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>    //Create the object passing function to notify on destruction. <br>    pObj=new CBeeper(pUnkOuter, ObjectDestroyed); <br> <br>    if (NULL==pObj) <br>        return hr; <br> <br>    if (pObj-&gt;Init()) <br>        hr=pObj-&gt;QueryInterface(riid, ppvObj); <br> <br>    //Kill the object if initial creation or Init failed. <br>    if (FAILED(hr)) <br>        delete pObj; <br>    else <br>        g_cObj++; <br> <br>    return hr; <br>    } <br> <br> <br>STDMETHODIMP CBeeperFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        g_cLock--; <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

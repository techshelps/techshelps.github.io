<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEEPER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context706"></a>BEEPER.CPP</h2>
<pre><code>/* <br> * BEEPER.CPP <br> * Beeper Automation Object #1 Chapter 14 <br> * <br> * Implementation of the CBeeper class which demonstrate a fully <br> * custom IDispatch implementation that only supports mapping of <br> * names to IDs through IDispatch::GetIDsOfNames. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "beeper.h" <br> <br>extern HINSTANCE g_hInst; <br> <br> <br>/* <br> * CBeeper::CBeeper <br> * CBeeper::~CBeeper <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CBeeper::CBeeper(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_lSound=0; <br>    m_pImpIDispatch=NULL; <br>    return; <br>    } <br> <br> <br>CBeeper::~CBeeper(void) <br>    { <br>    if (NULL==m_pszScratch) <br>        free(m_pszScratch); <br> <br>    DeleteInterfaceImp(m_pImpIDispatch); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CBeeper::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CBeeper that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CBeeper::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    m_pImpIDispatch=new CImpIDispatch(this, pIUnknown); <br> <br>    if (NULL==m_pImpIDispatch) <br>        return FALSE; <br> <br>    //Pre-allocate scratch space for IDispatch::GetIDsOfNames <br>    m_pszScratch=(LPTSTR)malloc(256*sizeof(TCHAR)); <br> <br>    if (NULL==m_pszScratch) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CBeeper::QueryInterface <br> * CBeeper::AddRef <br> * CBeeper::Release <br> * <br> * Purpose: <br> *  IUnknown members for CBeeper object. <br> */ <br> <br>STDMETHODIMP CBeeper::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * The only calls for IUnknown are either in a nonaggregated <br>     * case or when created in an aggregation, so in either case <br>     * always return our IUnknown for IID_IUnknown. <br>     */ <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    /* <br>     * QueryInterface must respond not only to IID_IDispatch for <br>     * the primary automation interface, but also to the DIID of the <br>     * dispinterface itself, which in our case is DIID_DIBeeper. <br>     */ <br> <br>    if (IID_IDispatch==riid || DIID_DIBeeper==riid) <br>        *ppv=m_pImpIDispatch; <br> <br>    //AddRef any interface we'll return. <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    //Inform the server about destruction so it can handle shutdown <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0L; <br>    } <br> <br> <br> <br>//IDispatch interface implementation <br> <br>/* <br> * CImpIDispatch::CImpIDispatch <br> * CImpIDispatch::~CImpIDispatch <br> * <br> * Parameters (Constructor): <br> *  pObj            PCBeeper of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDispatch::CImpIDispatch(PCBeeper pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDispatch::~CImpIDispatch(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::QueryInterface <br> * CImpIDispatch::AddRef <br> * CImpIDispatch::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIDispatch object. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfoCount <br> * <br> * Purpose: <br> *  Returns the number of type information (ITypeInfo) interfaces <br> *  that the object provides (0 or 1). <br> * <br> * Parameters: <br> *  pctInfo         UINT * to the location to receive <br> *                  the count of interfaces. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfoCount(UINT *pctInfo) <br>    { <br>    //We don't implement GetTypeInfo, so return 0 <br>    *pctInfo=0; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfo <br> * <br> * Purpose: <br> *  Retrieves type information for the automation interface. <br> * <br> * Parameters: <br> *  itinfo          UINT reserved.  Must be zero. <br> *  lcid            LCID providing the locale for the type <br> *                  information.  If the object does not support <br> *                  localization, this is ignored. <br> *  pptinfo         ITypeInfo ** in which to store the ITypeInfo <br> *                  interface for the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfo(UINT itinfo, LCID lcid <br>    , ITypeInfo **pptInfo) <br>    { <br>    /* <br>     * Since we returned zero from GetTypeInfoCount, this function <br>     * should not be called.  If it is, be sure to NULL the pptInfo <br>     * pointer according to normal out-parameter rules. <br>     */ <br>    *pptInfo=NULL; <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetIDsOfNames <br> * <br> * Purpose: <br> *  Converts text names into DISPIDs to pass to Invoke <br> * <br> * Parameters: <br> *  riid            REFIID reserved.  Must be IID_NULL. <br> *  rgszNames       OLECHAR ** pointing to the array of names to be <br> *                  mapped. <br> *  cNames          UINT number of names to be mapped. <br> *  lcid            LCID of the locale. <br> *  rgDispID        DISPID * caller allocated array containing IDs <br> *                  corresponging to those names in rgszNames. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetIDsOfNames(REFIID riid <br>    , OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgDispID) <br>    { <br>    HRESULT     hr; <br>    int         i; <br>    int         idsMin; <br>    LPTSTR      psz; <br> <br>    if (IID_NULL!=riid) <br>        return ResultFromScode(DISP_E_UNKNOWNINTERFACE); <br> <br>    /* <br>     * This function will support English and German languages, <br>     * where in English we have a "Sound" property and "Beep" <br>     * method; in German these are "Ton" and "Peip" This particular <br>     * coding will handle either language identically, so a <br>     * controller using even both languages simultaneously can work <br>     * with this same automation object. <br>     * <br>     * To check the passed LCID, we use the PRIMARYLANGID macro <br>     * to check for LANG_ENGLISH and LANG_GERMAN, which means we <br>     * support any dialect of english (US, UK, AUS, CAN, NZ, EIRE) <br>     * and german (GER, SWISS, AUS).  The high byte of an LCID <br>     * specifies the sub-language, and the macro here strips that <br>     * differentiation. <br>     * <br>     * Note that LANG_NEUTRAL is considered here to be English. <br>     */ <br> <br>    //Set up idsMin to the right stringtable in our resources <br>    switch (PRIMARYLANGID(lcid)) <br>        { <br>        case LANG_NEUTRAL: <br>        case LANG_ENGLISH: <br>            idsMin=IDS_0_NAMESMIN; <br>            break; <br> <br>        case LANG_GERMAN: <br>            idsMin=IDS_7_NAMESMIN; <br>            break; <br> <br>        default: <br>            return ResultFromScode(DISP_E_UNKNOWNLCID); <br>        } <br> <br>    /* <br>     * The index in this loop happens to correspond to the DISPIDs <br>     * for each element which also matches the stringtable entry <br>     * ordering, where i+idsMin is the string to compare.  If we <br>     * find a match, i is the DISPID to return. <br>     */ <br>    rgDispID[0]=DISPID_UNKNOWN; <br>    hr=ResultFromScode(DISP_E_UNKNOWNNAME); <br> <br>    psz=m_pObj-&gt;m_pszScratch; <br> <br>    for (i=0; i &lt; CNAMES; i++) <br>        { <br>        /* <br>         * If we had more than one name per method or property, <br>         * we'd need to loop over the cNames parameter as well. <br>         */ <br> <br>        LoadString(g_hInst, idsMin+i, psz, 256); <br> <br>       #ifdef WIN32ANSI <br>        char        szTemp[80]; <br> <br>        WideCharToMultiByte(CP_ACP, 0, rgszNames[0], -1 <br>            , szTemp, 80, NULL, NULL); <br>        if (0==lstrcmpi(psz, szTemp)) <br>       #else <br>        if (0==lstrcmpi(psz, rgszNames[0])) <br>       #endif <br>            { <br>            //Found a match, return the DISPID <br>            rgDispID[0]=i; <br>            hr=NOERROR; <br>            break; <br>            } <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::Invoke <br> * <br> * Purpose: <br> *  Calls a method in the dispatch interface or manipulates a <br> *  property. <br> * <br> * Parameters: <br> *  dispID          DISPID of the method or property of interest. <br> *  riid            REFIID reserved, must be IID_NULL. <br> *  lcid            LCID of the locale. <br> *  wFlags          USHORT describing the context of the invocation. <br> *  pDispParams     DISPPARAMS * to the array of arguments. <br> *  pVarResult      VARIANT * in which to store the result.  Is <br> *                  NULL if the caller is not interested. <br> *  pExcepInfo      EXCEPINFO * to exception information. <br> *  puArgErr        UINT * in which to store the index of an <br> *                  invalid parameter if DISP_E_TYPEMISMATCH <br> *                  is returned. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::Invoke(DISPID dispID, REFIID riid <br>    , LCID lcid, unsigned short wFlags, DISPPARAMS *pDispParams <br>    , VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) <br>    { <br>    HRESULT     hr; <br> <br>    //riid is supposed to be IID_NULL always <br>    if (IID_NULL!=riid) <br>        return ResultFromScode(DISP_E_UNKNOWNINTERFACE); <br> <br>    /* <br>     * There is nothing locale-sensitive in any of our properties <br>     * or methods.  Some automation objects may have currency, <br>     * date/time, or string values in properties or methods which <br>     * would be sensitive to lcid; be sure the handle them properly. <br>     */ <br> <br> <br>    /* <br>     * Process the invoked member or property.  For members, <br>     * call whatever functions are necessary to carry out the <br>     * action.  For properties, either return the value you have <br>     * or change it according to wFlags. <br>     * <br>     * This object supports one property and one method: <br>     *  ID 0    "Sound" property, a long that must be one of <br>     *          MB_OK, MB_ICONHAND, MB_ICONQUESTION, <br>     *          MB_ICONEXCLAMATION, and MB_ICONASTERISK. <br>     *  ID 1    "Beep" method, no parameters, return value of type <br>     *          long which is the sound that was played. <br>     * <br>     * Note that the IDs are assigned in the implementation of <br>     * IDispatch::GetIDsOfNames. <br>     */ <br> <br>    switch (dispID) <br>        { <br>        case PROPERTY_SOUND: <br>            /* <br>             * Some controllers might not be able to differentiate <br>             * between a property get and a function call, so we <br>             * have to handle both as a property get here. <br>             */ <br>            if (DISPATCH_PROPERTYGET &amp; wFlags <br>                || DISPATCH_METHOD &amp; wFlags) <br>                { <br>                //Make sure we have a place for the result <br>                if (NULL==pVarResult) <br>                    return ResultFromScode(E_INVALIDARG); <br> <br>                VariantInit(pVarResult); <br>                V_VT(pVarResult)=VT_I4; <br>                V_I4(pVarResult)=m_pObj-&gt;m_lSound; <br>                return NOERROR; <br>                } <br>            else <br>                { <br>                //DISPATCH_PROPERTYPUT <br>                long        lSound; <br>                int         c; <br>                VARIANT     vt; <br> <br>                //Validate parameter count <br>                if (1!=pDispParams-&gt;cArgs) <br>                    return ResultFromScode(DISP_E_BADPARAMCOUNT); <br> <br>                //Check that we have a named DISPID_PROPERTYPUT <br>                c=pDispParams-&gt;cNamedArgs; <br>                if (1!=c || (1==c &amp;&amp; DISPID_PROPERTYPUT <br>                    !=pDispParams-&gt;rgdispidNamedArgs[0])) <br>                    return ResultFromScode(DISP_E_PARAMNOTOPTIONAL); <br> <br>                /* <br>                 * Try to coerce the new property value into a <br>                 * type VT_I4.  VariantChangeType will do this for <br>                 * us and return an appropriate error code if the <br>                 * type cannot be coerced.  On error we store 0 <br>                 * (first parameter) into puArgErr. <br>                 * <br>                 * We could also use DispGetParam here to do the <br>                 * same thing: <br>                 *   DispGetParam(pDispParams, 0, VT_I4 <br>                 *       , &amp;vtNew, puArgErr); <br>                 */ <br>                VariantInit(&amp;vt); <br>                hr=VariantChangeType(&amp;vt, &amp;pDispParams-&gt;rgvarg[0] <br>                    , 0, VT_I4); <br> <br>                if (FAILED(hr)) <br>                    { <br>                    if (NULL!=puArgErr) <br>                        *puArgErr=0; <br> <br>                    return hr; <br>                    } <br> <br>                //With the right type, now check the right value <br>                lSound=vt.lVal; <br> <br>                if (MB_OK!=lSound &amp;&amp; MB_ICONEXCLAMATION!=lSound <br>                    &amp;&amp; MB_ICONQUESTION!=lSound &amp;&amp; MB_ICONHAND!=lSound <br>                    &amp;&amp; MB_ICONASTERISK!=lSound) <br>                    { <br>                    if (NULL==pExcepInfo) <br>                        return ResultFromScode(E_INVALIDARG); <br> <br>                    /* <br>                     * This is the right place for an exception-- <br>                     * the best we can tell the caller with a <br>                     * return value is something like E_INVALIDARG. <br>                     * But that doesn't at all indiate the problem. <br>                     * So we use EXCEPTION_INVALIDSOUND and the <br>                     * FillException callback to fill the EXCEPINFO. <br>                     * <br>                     * Note:  DispTest and Visual Basic 3 don't <br>                     * support deferred filling of the EXCEPINFO <br>                     * structure; Visual Basic 4 does.  Even if you <br>                     * don't use deferred filling, a separate <br>                     * function is still useful as you can just call <br>                     * it here to fill the structure immediately. <br>                     * <br>                     * Deferred fill-in code would appear: <br>                     * <br>                     *   INITEXCEPINFO(*pExcepInfo); <br>                     *   pExcepInfo-&gt;scode <br>                     *       =(SCODE)MAKELONG(EXCEPTION_INVALIDSOUND <br>                     *       , PRIMARYLANGID(lcid)); <br>                     *   pExcepInfo-&gt;pfnDeferredFillIn=FillException; <br>                     */ <br> <br>                    /* <br>                     * So we can make a localized exception, we'll <br>                     * store the language ID and our exception code <br>                     * into the scode field; in FillException we move <br>                     * the code into wCode and clear scode.  Otherwise <br>                     * there's no way to tell FillException about <br>                     * the locale. <br>                     */ <br> <br>                    pExcepInfo-&gt;scode <br>                        =(SCODE)MAKELONG(EXCEPTION_INVALIDSOUND <br>                        , PRIMARYLANGID(lcid)); <br>                    FillException(pExcepInfo); <br>                    return ResultFromScode(DISP_E_EXCEPTION); <br>                    } <br> <br>                //Everything checks out:  save the new value <br>                m_pObj-&gt;m_lSound=lSound; <br>                } <br> <br>            break; <br> <br> <br>        case METHOD_BEEP: <br>            if (!(DISPATCH_METHOD &amp; wFlags)) <br>                return ResultFromScode(DISP_E_MEMBERNOTFOUND); <br> <br>            if (0!=pDispParams-&gt;cArgs) <br>                return ResultFromScode(DISP_E_BADPARAMCOUNT); <br> <br>            MessageBeep((UINT)m_pObj-&gt;m_lSound); <br> <br>            //The result of this method is the sound we played <br>            if (NULL!=pVarResult) <br>                { <br>                VariantInit(pVarResult); <br>                V_VT(pVarResult)=VT_I4; <br>                V_I4(pVarResult)=m_pObj-&gt;m_lSound; <br>                } <br> <br>            break; <br> <br>        default: <br>            return ResultFromScode(DISP_E_MEMBERNOTFOUND); <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * FillException <br> * <br> * Purpose: <br> *  Callback function pointed to in IDispatch::Invoke that fills <br> *  an EXCEPINFO structure based on the code stored inside <br> *  Invoke.  This is a nice mechanism to keep all the management <br> *  of error code strings and help IDs centralized in one place, <br> *  even across many different automation objects within the same <br> *  application.  It also keeps Invoke cleaner. <br> * <br> * Parameters: <br> *  pExcepInfo      EXCEPINFO * to fill. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, error code otherwise. <br> */ <br> <br>HRESULT STDAPICALLTYPE FillException(EXCEPINFO *pExcepInfo) <br>    { <br>    SCODE       scode; <br>    LANGID      langID; <br>    USHORT      wCode; <br>    HRESULT     hr; <br>    LPTSTR      psz; <br>    LPOLESTR    pszHelp; <br>    UINT        idsSource; <br>    UINT        idsException; <br> <br>    if (NULL==pExcepInfo) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    /* <br>     * Parts of our implementation that raise exceptions put the <br>     * WORD exception code in the loword of scode and the LANGID <br>     * in the hiword. <br>     */ <br>    scode=pExcepInfo-&gt;scode; <br>    langID=HIWORD(scode); <br>    wCode=LOWORD(scode); <br> <br>    //Allocate BSTRs for source and description strings <br>    psz=(LPTSTR)malloc(1024*sizeof(TCHAR)); <br> <br>    if (NULL==psz) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    hr=NOERROR; <br> <br>    switch (wCode) <br>        { <br>        case EXCEPTION_INVALIDSOUND: <br>            //Fill in unused information, macro in inole.h <br>            INITEXCEPINFO(*pExcepInfo); <br>            pExcepInfo-&gt;wCode=wCode; <br> <br>            /* <br>             * DispTest and Visual Basic 3 ignore the help file and <br>             * context ID.  A complete controller such as Visual <br>             * Basic 4 checks if these fields are set, and if so, <br>             * displays a Help button in a message box.  If Help <br>             * is pressed, the controller calls WinHelp with this <br>             * filename and context ID for complete integration. <br>             * <br>             * The sources for beeper.hlp are in <br>             * \inole\chap14\beephelp along with the actual help <br>             * file.  For this sample I assume it's on C drive. <br>             * Normally you'll want to read your own HELPDIR <br>             * registry entry from under TypeLib and prepend that <br>             * to the name of the help file, but since this sample <br>             * doesn't have a type library, that entry doesn't <br>             * exist so I just hard-code it. <br>             */ <br>            pExcepInfo-&gt;dwHelpContext=HID_SOUND_PROPERTY_LIMITATIONS; <br> <br>            //Set defaults <br>            pszHelp=OLETEXT("c:\\inole\\chap14\\beephelp\\beep0000.hlp"); <br>            idsSource=IDS_0_EXCEPTIONSOURCE; <br>            idsException=IDS_0_EXCEPTIONINVALIDSOUND; <br> <br>            //Get the localized source and exception strings <br>            switch (langID) <br>                { <br>                case LANG_GERMAN: <br>                    idsSource=IDS_7_EXCEPTIONSOURCE; <br>                    idsException=IDS_7_EXCEPTIONINVALIDSOUND; <br>                    pszHelp=OLETEXT("c:\\inole\\chap14\\beephelp\\beep0007.hlp"); <br>                    break; <br> <br>                case LANG_ENGLISH: <br>                case LANG_NEUTRAL: <br>                default: <br>                    break; <br>                } <br> <br>            break; <br> <br>        default: <br>            hr=ResultFromScode(E_FAIL); <br>        } <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        pExcepInfo-&gt;bstrHelpFile=SysAllocString(pszHelp); <br> <br>       #ifdef WIN32ANSI <br>        OLECHAR     szTemp[256]; <br> <br>        LoadString(g_hInst, idsSource, psz, 256); <br>        MultiByteToWideChar(CP_ACP, 0, psz, -1, szTemp, 256); <br>        pExcepInfo-&gt;bstrSource=SysAllocString(szTemp); <br> <br>        LoadString(g_hInst, idsException, psz, 256); <br>        MultiByteToWideChar(CP_ACP, 0, psz, -1, szTemp, 256); <br>        pExcepInfo-&gt;bstrDescription=SysAllocString(szTemp); <br>       #else <br>        LoadString(g_hInst, idsSource, psz, 1024); <br>        pExcepInfo-&gt;bstrSource=SysAllocString(psz); <br>        LoadString(g_hInst, idsException, psz, 1024); <br>        pExcepInfo-&gt;bstrDescription=SysAllocString(psz); <br>       #endif <br>        } <br> <br>    free(psz); <br>    return hr; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

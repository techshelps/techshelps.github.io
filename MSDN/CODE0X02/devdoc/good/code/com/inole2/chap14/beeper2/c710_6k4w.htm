<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEEPER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context710"></a>BEEPER.CPP</h2>
<pre><code>/* <br> * BEEPER.CPP <br> * Beeper Automation Object #2 Chapter 14 <br> * <br> * Implementation of the CBeeper class demonstrating the use of <br> * functions like ITypeInfo::Invoke (same as DispInboke) and <br> * ITypeInfo::GetIDOfNames (same as DispGetIDOfNames) where the <br> * type information is taken from a type library. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "beeper.h" <br> <br>extern HINSTANCE g_hInst; <br> <br> <br>/* <br> * CBeeper::CBeeper <br> * CBeeper::~CBeeper <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CBeeper::CBeeper(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_lSound=0; <br>    m_pImpIDispatch=NULL; <br>    return; <br>    } <br> <br> <br>CBeeper::~CBeeper(void) <br>    { <br>    DeleteInterfaceImp(m_pImpIDispatch); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CBeeper::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CBeeper that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CBeeper::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    m_pImpIDispatch=new CImpIDispatch(this, pIUnknown); <br> <br>    if (NULL==m_pImpIDispatch) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CBeeper::QueryInterface <br> * CBeeper::AddRef <br> * CBeeper::Release <br> */ <br> <br>STDMETHODIMP CBeeper::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * The only calls for IUnknown are either in a nonaggregated <br>     * case or when created in an aggregation, so in either case <br>     * always return our IUnknown for IID_IUnknown. <br>     * <br>     * Note that IBeeper is implemented on CBeeper, and we must <br>     * also expose that custom interface through QueryInterface. <br>     */ <br>    if (IID_IUnknown==riid || IID_IBeeper==riid) <br>        *ppv=this; <br> <br>    /* <br>     * QueryInterface must respond not only to IID_IDispatch for <br>     * the primary automation interface, but also to the IID of the <br>     * dispinterface itself, which in our case is DIID_DIBeeper. <br>     */ <br>    if (IID_IDispatch==riid || DIID_DIBeeper==riid) <br>        *ppv=m_pImpIDispatch; <br> <br>    //AddRef any interface we'll return. <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0L; <br>    } <br> <br> <br> <br> <br>//IBeeper interface functions <br> <br>/* <br> * CBeeper::get_Sound <br> * CBeeper::put_Sound <br> * <br> * Purpose: <br> *  Functions called from DispInvoke to handle the Sound property. <br> * <br> * Parameters (Set only): <br> *  lSound          long, new sound to save after validation <br> * <br> * Return Value: (Get only): <br> *  long            Current sound. <br> */ <br> <br>STDMETHODIMP_(long) CBeeper::get_Sound(void) <br>    { <br>    return m_lSound; <br>    } <br> <br> <br>STDMETHODIMP_(void) CBeeper::put_Sound(long lSound) <br>    { <br>    if (MB_OK!=lSound &amp;&amp; MB_ICONEXCLAMATION!=lSound <br>        &amp;&amp; MB_ICONQUESTION!=lSound &amp;&amp; MB_ICONHAND!=lSound <br>        &amp;&amp; MB_ICONASTERISK!=lSound) <br>        { <br>        /* <br>         * Since we cannot return a value to ITypeInfo::Invoke to <br>         * indicate an exception condition, we'll use <br>         * m_pImpIDispatch-&gt;Exception to raise them.  Before <br>         * CImpIDispatch::Invoke calls ITypeInfo::Invoke, it clears <br>         * the exception.  CImpIDispatch::Exception sets an <br>         * exception, so when ITypeInfo::Invoke returns, our Invoke <br>         * can store exception information as necessary. <br>         */ <br>        m_pImpIDispatch-&gt;Exception(EXCEPTION_INVALIDSOUND); <br>        return; <br>        } <br> <br>    m_lSound=lSound; <br>    return; <br>    } <br> <br> <br>/* <br> * CBeeper::Beep <br> * <br> * Purpose: <br> *  Function called from DispInvoke to invoke the Beep method. <br> * <br> * Return Value: <br> *  long           The sound played. <br> */ <br> <br>STDMETHODIMP_(long) CBeeper::Beep(void) <br>    { <br>    MessageBeep((UINT)m_lSound); <br>    return m_lSound; <br>    } <br> <br> <br> <br> <br> <br>//IDispatch interface implementation <br> <br>/* <br> * CImpIDispatch::CImpIDispatch <br> * CImpIDispatch::~CImpIDispatch <br> * <br> * Parameters (Constructor): <br> *  pObj            PCBeeper of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDispatch::CImpIDispatch(PCBeeper pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br> <br>    //These are created as needed in GetTypeInfo <br>    m_pITINeutral=NULL; <br>    m_pITIGerman=NULL; <br> <br>    return; <br>    } <br> <br>CImpIDispatch::~CImpIDispatch(void) <br>    { <br>    ReleaseInterface(m_pITIGerman); <br>    ReleaseInterface(m_pITINeutral); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::QueryInterface <br> * CImpIDispatch::AddRef <br> * CImpIDispatch::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIDispatch object. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDispatch::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfoCount <br> * <br> * Purpose: <br> *  Returns the number of type information (ITypeInfo) interfaces <br> *  that the object provides (0 or 1). <br> * <br> * Parameters: <br> *  pctInfo         UINT * to the location to receive <br> *                  the count of interfaces. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfoCount(UINT *pctInfo) <br>    { <br>    //We implement GetTypeInfo so return 1 <br>    *pctInfo=1; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetTypeInfo <br> * <br> * Purpose: <br> *  Retrieves type information for the automation interface.  This <br> *  is used anywhere that the right ITypeInfo interface is needed <br> *  for whatever LCID is applicable.  Specifically, this is used <br> *  from within GetIDsOfNames and Invoke. <br> * <br> * Parameters: <br> *  itInfo          UINT reserved.  Must be zero. <br> *  lcid            LCID providing the locale for the type <br> *                  information.  If the object does not support <br> *                  localization, this is ignored. <br> *  ppITypeInfo     ITypeInfo ** in which to store the ITypeInfo <br> *                  interface for the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetTypeInfo(UINT itInfo, LCID lcid <br>    , ITypeInfo **ppITypeInfo) <br>    { <br>    HRESULT     hr; <br>    ITypeLib   *pITypeLib; <br>    ITypeInfo **ppITI=NULL; <br> <br>    if (0!=itInfo) <br>        return ResultFromScode(TYPE_E_ELEMENTNOTFOUND); <br> <br>    if (NULL==ppITypeInfo) <br>        return ResultFromScode(E_POINTER); <br> <br>    *ppITypeInfo=NULL; <br> <br>    /* <br>     * Since we returned one from GetTypeInfoCount, this function <br>     * can be called for a specific locale.  We support English, <br>     * German, and neutral (defaults to English) locales.  Anything <br>     * else is an error. <br>     * <br>     * After this switch statement, ppITI will either be NULL or <br>     * a valid pointer in it after.  If NULL, we know we need to <br>     * load type information, retrieve the ITypeInfo we want, and <br>     * then store it in *ppITI. <br>     */ <br>    switch (PRIMARYLANGID(lcid)) <br>        { <br>        case LANG_NEUTRAL: <br>        case LANG_ENGLISH: <br>            ppITI=&amp;m_pITINeutral; <br>            break; <br> <br>        case LANG_GERMAN: <br>            ppITI=&amp;m_pITIGerman; <br>            break; <br> <br>        default: <br>            return ResultFromScode(DISP_E_UNKNOWNLCID); <br>        } <br> <br>    //Load a type lib if we don't have the information already. <br>    if (NULL==*ppITI) <br>        { <br>        /* <br>         * The type libraries are registered under 0 (neutral), <br>         * 7 (German), and 9 (English) with no specific sub- <br>         * language, which would make them 407 or 409 and such. <br>         * If you are sensitive to sub-languages, then use the <br>         * full LCID instead of just the LANGID as done here. <br>         */ <br>        hr=LoadRegTypeLib(LIBID_BeeperTypeLibrary, 1, 0 <br>            , PRIMARYLANGID(lcid), &amp;pITypeLib); <br> <br>        /* <br>         * If LoadRegTypeLib fails, try loading directly with <br>         * LoadTypeLib, which will register the library for us. <br>         * Note that there's no default case here because the <br>         * prior switch will have filtered lcid already. <br>         * <br>         * NOTE:  You should prepend your DIR registry key to the <br>         * .TLB name so you don't depend on it being it the PATH. <br>         * This sample will be updated later to reflect this. <br>         */ <br>        if (FAILED(hr)) <br>            { <br>            switch (PRIMARYLANGID(lcid)) <br>                { <br>                case LANG_NEUTRAL: <br>                case LANG_ENGLISH: <br>                    hr=LoadTypeLib(OLETEXT("BEEP0000.TLB"), &amp;pITypeLib); <br>                    break; <br> <br>                case LANG_GERMAN: <br>                    hr=LoadTypeLib(OLETEXT("BEEP0007.TLB"), &amp;pITypeLib); <br>                    break; <br>                } <br>            } <br> <br>        if (FAILED(hr)) <br>            return hr; <br> <br>        //Got the type lib, get type info for the interface we want <br>        hr=pITypeLib-&gt;GetTypeInfoOfGuid(DIID_DIBeeper, ppITI); <br>        pITypeLib-&gt;Release(); <br> <br>        if (FAILED(hr)) <br>            return hr; <br>        } <br> <br>    /* <br>     * Note:  the type library is still loaded since we have <br>     * an ITypeInfo from it. <br>     */ <br> <br>    (*ppITI)-&gt;AddRef(); <br>    *ppITypeInfo=*ppITI; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::GetIDsOfNames <br> * <br> * Purpose: <br> *  Converts text names into DISPIDs to pass to Invoke <br> * <br> * Parameters: <br> *  riid            REFIID reserved.  Must be IID_NULL. <br> *  rgszNames       OLECHAR ** pointing to the array of names to be <br> *                  mapped. <br> *  cNames          UINT number of names to be mapped. <br> *  lcid            LCID of the locale. <br> *  rgDispID        DISPID * caller allocated array containing IDs <br> *                  corresponging to those names in rgszNames. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::GetIDsOfNames(REFIID riid <br>    , OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgDispID) <br>    { <br>    HRESULT     hr; <br>    ITypeInfo  *pTI; <br> <br>    if (IID_NULL!=riid) <br>        return ResultFromScode(DISP_E_UNKNOWNINTERFACE); <br> <br>    //Get the right ITypeInfo for lcid. <br>    hr=GetTypeInfo(0, lcid, &amp;pTI); <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        hr=DispGetIDsOfNames(pTI, rgszNames, cNames, rgDispID); <br>        pTI-&gt;Release(); <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br>/* <br> * CImpIDispatch::Invoke <br> * <br> * Purpose: <br> *  Calls a method in the dispatch interface or manipulates a <br> *  property. <br> * <br> * Parameters: <br> *  dispID          DISPID of the method or property of interest. <br> *  riid            REFIID reserved, must be IID_NULL. <br> *  lcid            LCID of the locale. <br> *  wFlags          USHORT describing the context of the invocation. <br> *  pDispParams     DISPPARAMS * to the array of arguments. <br> *  pVarResult      VARIANT * in which to store the result.  Is <br> *                  NULL if the caller is not interested. <br> *  pExcepInfo      EXCEPINFO * to exception information. <br> *  puArgErr        UINT * in which to store the index of an <br> *                  invalid parameter if DISP_E_TYPEMISMATCH <br> *                  is returned. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error code. <br> */ <br> <br>STDMETHODIMP CImpIDispatch::Invoke(DISPID dispID, REFIID riid <br>    , LCID lcid, unsigned short wFlags, DISPPARAMS *pDispParams <br>    , VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) <br>    { <br>    HRESULT     hr; <br>    ITypeInfo  *pTI; <br> <br>    //riid is supposed to be IID_NULL always <br>    if (IID_NULL!=riid) <br>        return ResultFromScode(DISP_E_UNKNOWNINTERFACE); <br> <br>    //Get the ITypeInfo for lcid <br>    hr=GetTypeInfo(0, lcid, &amp;pTI); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    /* <br>     * Clear exceptions.  Note that this mechanism only works <br>     * for a single-thread, which is fine for the initial 32-bit <br>     * release of OLE but not a long-term solution.  See Beeper3 <br>     * for a way of handling multi-thread exceptions. <br>     */ <br>    m_wException=EXCEPTION_NONE; <br> <br>    //This is exactly what DispInvoke does--so skip the overhead. <br>    hr=pTI-&gt;Invoke((IBeeper *)m_pObj, dispID, wFlags <br>        , pDispParams, pVarResult, pExcepInfo, puArgErr); <br> <br>    /* <br>     * Check if an exception was raised.  Again, this is not <br>     * thread-safe. <br>     */ <br>    if (EXCEPTION_NONE!=m_wException) <br>        { <br>        pExcepInfo-&gt;scode <br>            =(SCODE)MAKELONG(m_wException, PRIMARYLANGID(lcid)); <br>        FillException(pExcepInfo); <br>        hr=ResultFromScode(DISP_E_EXCEPTION); <br>        } <br> <br>    pTI-&gt;Release(); <br>    return hr; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDispatch::Exception <br> * <br> * Purpose: <br> *  Raises an exception for CImpIDispatch::Invoke from within <br> *  ITypeInfo::Invoke.  This simply sets the m_wException variable <br> *  to the exception code.  Invoke will pick this up and fill in <br> *  the exception structure as necessary. <br> * <br> * Parameters: <br> *  wException      WORD exception code. <br> */ <br> <br>void CImpIDispatch::Exception(WORD wException) <br>    { <br>    /* <br>     * Note: calls to this function will be wrapped in a critical <br>     * section on Win32 because this is always called from within <br>     * DispInvoke which we wrapped above in Invoke. <br>     */ <br>    m_wException=wException; <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * FillException <br> * <br> * Purpose: <br> *  Callback function pointed to in IDispatch::Invoke that fills <br> *  an EXCEPINFO structure based on the code stored inside <br> *  Invoke.  This is a nice mechanism to keep all the management <br> *  of error code strings and help IDs centralized in one place, <br> *  even across many different automation objects within the same <br> *  application.  It also keeps Invoke cleaner. <br> * <br> * Parameters: <br> *  pExcepInfo      EXCEPINFO * to fill. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, error code otherwise. <br> */ <br> <br>HRESULT STDAPICALLTYPE FillException(EXCEPINFO *pExcepInfo) <br>    { <br>    SCODE       scode; <br>    LANGID      langID; <br>    USHORT      wCode; <br>    HRESULT     hr; <br>    LPTSTR      psz; <br>    LPOLESTR    pszHelp; <br>    UINT        idsSource; <br>    UINT        idsException; <br> <br>    if (NULL==pExcepInfo) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    scode=pExcepInfo-&gt;scode; <br>    langID=HIWORD(scode); <br>    wCode=LOWORD(scode); <br> <br>    //Allocate BSTRs for source and description strings <br>    psz=(LPTSTR)malloc(1024*sizeof(TCHAR)); <br> <br>    if (NULL==psz) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    hr=NOERROR; <br> <br>    switch (wCode) <br>        { <br>        case EXCEPTION_INVALIDSOUND: <br>            //Fill in unused information, macro in inole.h <br>            INITEXCEPINFO(*pExcepInfo); <br>            pExcepInfo-&gt;wCode=wCode; <br> <br>            pExcepInfo-&gt;dwHelpContext=HID_SOUND_PROPERTY_LIMITATIONS; <br> <br>            //We registered a HELPDIR so we don't include paths <br>            pszHelp=OLETEXT("beep0000.hlp"); <br>            idsSource=IDS_0_EXCEPTIONSOURCE; <br>            idsException=IDS_0_EXCEPTIONINVALIDSOUND; <br> <br>            //Get the localized source and exception strings <br>            switch (langID) <br>                { <br>                case LANG_GERMAN: <br>                    idsSource=IDS_7_EXCEPTIONSOURCE; <br>                    idsException=IDS_7_EXCEPTIONINVALIDSOUND; <br>                    pszHelp=OLETEXT("beep0007.hlp"); <br>                    break; <br> <br>                case LANG_ENGLISH: <br>                case LANG_NEUTRAL: <br>                default: <br>                    break; <br>                } <br> <br>            break; <br> <br>        default: <br>            hr=ResultFromScode(E_FAIL); <br>        } <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        pExcepInfo-&gt;bstrHelpFile=SysAllocString(pszHelp); <br> <br>       #ifdef WIN32ANSI <br>        OLECHAR     szTemp[256]; <br> <br>        LoadString(g_hInst, idsSource, psz, 256); <br>        MultiByteToWideChar(CP_ACP, 0, psz, -1, szTemp, 256); <br>        pExcepInfo-&gt;bstrSource=SysAllocString(szTemp); <br> <br>        LoadString(g_hInst, idsException, psz, 256); <br>        MultiByteToWideChar(CP_ACP, 0, psz, -1, szTemp, 256); <br>        pExcepInfo-&gt;bstrDescription=SysAllocString(szTemp); <br>       #else <br>        LoadString(g_hInst, idsSource, psz, 1024); <br>        pExcepInfo-&gt;bstrSource=SysAllocString(psz); <br>        LoadString(g_hInst, idsException, psz, 1024); <br>        pExcepInfo-&gt;bstrDescription=SysAllocString(psz); <br>       #endif <br>        } <br> <br>    free(psz); <br>    return hr; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

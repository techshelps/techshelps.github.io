<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEEPER.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context729"></a>BEEPER.CPP</h2>
<pre><code>/* <br> * BEEPER.CPP <br> * Simple Automation Object #5 Chapter 14 <br> * <br> * Implementation of the CBeeper class demonstrating the use of <br> * CreateStdDispatch instead of DispInvoke, DispGetIDOfNames, and <br> * a custom IDispatch implementation.  In this case we don't have <br> * our own IDispatch at all, which CreateStdDispatch provides for <br> * us, but at the loss of multiple language support and the ability <br> * to define exception. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "beeper.h" <br> <br> <br>/* <br> * CBeeper::CBeeper <br> * CBeeper::~CBeeper <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CBeeper::CBeeper(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_lSound=0; <br>    m_pITINeutral=NULL; <br>    m_pIUnkStdDisp=NULL; <br>    return; <br>    } <br> <br> <br>CBeeper::~CBeeper(void) <br>    { <br>    ReleaseInterface(m_pIUnkStdDisp); <br>    ReleaseInterface(m_pITINeutral); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CBeeper::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CBeeper that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CBeeper::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br>    ITypeLib       *pITypeLib; <br>    HRESULT         hr; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    /* <br>     * Load our type library.  Since this sample uses <br>     * CreateStdDispatch we can only support one locale, <br>     * which is neutral (English) in this case. <br>     */ <br> <br>    if (FAILED(LoadRegTypeLib(LIBID_BeeperTypeLibrary, 1, 0 <br>        , LANG_NEUTRAL, &amp;pITypeLib))) <br>        { <br>        /* <br>         * If LoadRegTypeLib fails, try loading directly with <br>         * LoadTypeLib, which will register the library for us. <br>         * <br>         * NOTE:  You should prepend your DIR registry key to the <br>         * .TLB name so you don't depend on it being it the PATH. <br>         * This sample will be updated later to reflect this. <br>         */ <br>        if (FAILED(LoadTypeLib(OLETEXT("BEEP0000.TLB"), &amp;pITypeLib))) <br>            return FALSE; <br>        } <br> <br>    //Get the type information out of the type library. <br>    hr=pITypeLib-&gt;GetTypeInfoOfGuid(DIID_DIBeeper, &amp;m_pITINeutral); <br> <br>    if (FAILED(hr)) <br>        { <br>        pITypeLib-&gt;Release(); <br>        return FALSE; <br>        } <br> <br>    m_pImpIProvideCI=new CImpIProvideClassInfo(this, pITypeLib); <br>    pITypeLib-&gt;Release(); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    /* <br>     * CreateStdDispatch always returns an IUnknown pointer <br>     * because such is required in aggregation, which is <br>     * involved here.  In other words, the Beeper is aggregating <br>     * on the OLE-provided "StdDispatch" object in order to <br>     * directly expose IDispatch from that object.  See the <br>     * implementation of QueryInterface. <br>     */ <br>    hr=CreateStdDispatch(pIUnknown, (IBeeper *)this, m_pITINeutral <br>        , &amp;m_pIUnkStdDisp); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CBeeper::QueryInterface <br> * CBeeper::AddRef <br> * CBeeper::Release <br> * <br> * Purpose: <br> *  IUnknown members for CBeeper object. <br> */ <br> <br>STDMETHODIMP CBeeper::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    /* <br>     * The only calls for IUnknown are either in a nonaggregated <br>     * case or when created in an aggregation, so in either case <br>     * always return our IUnknown for IID_IUnknown. <br>     */ <br>    if (IID_IUnknown==riid || IID_IBeeper==riid) <br>        *ppv=this; <br> <br>    /* <br>     * We specifically have to ask the object returned from <br>     * CreateStdDispatch for our dispinterface.  Note that <br>     * it only understands IID_IDispatch and not DIID_DIBeeper, <br>     * so we convert requests for DIID_DIBeeper into IID_IDispatch <br>     * which amounts to exactly the same thing. <br>     */ <br>    if (IID_IDispatch==riid || DIID_DIBeeper==riid) <br>        return m_pIUnkStdDisp-&gt;QueryInterface(IID_IDispatch, ppv); <br> <br>    //AddRef any interface we'll return. <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CBeeper::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    //Inform the server about destruction so it can handle shutdown <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0L; <br>    } <br> <br> <br> <br>//IBeeper interface functions <br> <br>/* <br> * CBeeper::get_Sound <br> * CBeeper::put_Sound <br> * <br> * Purpose: <br> *  Functions called from DispInvoke to handle the Sound property. <br> * <br> * Parameters (Set only): <br> *  lSound          long, new sound to save after validation. <br> * <br> * Return Value: (Get only): <br> *  ULONG           Current sound. <br> */ <br> <br>STDMETHODIMP_(long) CBeeper::get_Sound(void) <br>    { <br>    return m_lSound; <br>    } <br> <br> <br>STDMETHODIMP_(void) CBeeper::put_Sound(long lSound) <br>    { <br>    if (MB_OK!=lSound &amp;&amp; MB_ICONEXCLAMATION!=lSound <br>        &amp;&amp; MB_ICONQUESTION!=lSound &amp;&amp; MB_ICONHAND!=lSound <br>        &amp;&amp; MB_ICONASTERISK!=lSound) <br>        { <br>        /* <br>         * We cannot return error information to the StdDispatch <br>         * given the way we've defined the return value of this <br>         * methods, so we can't raise an exception. <br>         */ <br>        return; <br>        } <br> <br>    m_lSound=lSound; <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CBeeper::Beep <br> * <br> * Purpose: <br> *  Function called from DispInvoke to invoke the Beep method. <br> * <br> * Return Value: <br> *  long            The sound played. <br> */ <br> <br>STDMETHODIMP_(long) CBeeper::Beep(void) <br>    { <br>    MessageBeep((UINT)m_lSound); <br>    return m_lSound; <br>    } <br> <br> <br> <br> <br>/* <br> * Since CreateStdDispatch provides an IDispatch implementation <br> * for us, there's no specific code for that interface needed here. <br> * <br> * So to not get rid of too much code, we'll add an <br> * IProvideClassInfo <br> */ <br> <br> <br> <br>/* <br> * CImpIProvideClassInfo::CImpIProvideClassInfo <br> * CImpIProvideClassInfo::~CImpIProvideClassInfo <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pITypeLib       ITypeLib * to return from this interface. <br> */ <br> <br>CImpIProvideClassInfo::CImpIProvideClassInfo(LPUNKNOWN pUnkOuter <br>    , ITypeLib *pITypeLib) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br> <br>    /* <br>     * Get the coclass type info.  If this fails then we'll <br>     * just fail GetClassInfo below. <br>     */ <br>    m_pITI=NULL; <br>    pITypeLib-&gt;GetTypeInfoOfGuid(CLSID_Beeper, &amp;m_pITI); <br>    return; <br>    } <br> <br> <br>CImpIProvideClassInfo::~CImpIProvideClassInfo(void) <br>    { <br>    ReleaseInterface(m_pITI); <br>    return; <br>    } <br> <br> <br>/* <br> * CImpIProvideClassInfo::QueryInterface <br> * CImpIProvideClassInfo::AddRef <br> * CImpIProvideClassInfo::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIProvideClassInfo object. <br> */ <br> <br>STDMETHODIMP CImpIProvideClassInfo::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIProvideClassInfo::AddRef(void) <br>    { <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIProvideClassInfo::Release(void) <br>    { <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIProvideClassInfo::GetClassInfo <br> * <br> * Purpose: <br> *  Returns the type information for this coclass. <br> * <br> * Parameters: <br> *  ppITI           ITypeInfo ** in which to store the ITypeInfo <br> *                  for this coclass. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, error otherwise. <br> */ <br> <br>STDMETHODIMP CImpIProvideClassInfo::GetClassInfo(ITypeInfo **ppITI) <br>    { <br>    if (NULL==ppITI) <br>        return ResultFromScode(E_POINTER); <br> <br>    *ppITI=m_pITI; <br> <br>    if (NULL!=m_pITI) <br>        { <br>        m_pITI-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_FAIL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATRON.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context431"></a>PATRON.CPP</h2>
<pre><code>/* <br> * PATRON.CPP <br> * Patron Chapter 1 <br> * <br> * Frame window class for Patron. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application.  Should register the app class <br> *  if a previous instance has not done so and do any other one-time <br> *  initializations. <br> */ <br> <br>int PASCAL WinMain (HINSTANCE hInst, HINSTANCE hPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    PCPatronFrame   pFR; <br>    FRAMEINIT       fi; <br>    WPARAM          wRet=0; <br> <br>    //Attempt to allocate and initialize the application <br>    pFR=new CPatronFrame(hInst, hPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pFR) <br>        return -1; <br> <br>    fi.idsMin=IDS_FRAMEMIN; <br>    fi.idsMax=IDS_FRAMEMAX; <br>    fi.idsStatMin=IDS_STATMESSAGEMIN; <br>    fi.idsStatMax=IDS_STATMESSAGEMAX; <br>    fi.idStatMenuMin=ID_MENUFILE; <br>    fi.idStatMenuMax=ID_MENUHELP; <br>    fi.iPosWindowMenu=WINDOW_MENU; <br>    fi.cMenus=CMENUS; <br> <br>    fi.x=CW_USEDEFAULT; <br>    fi.y=CW_USEDEFAULT; <br>    fi.cx=CW_USEDEFAULT; <br>    fi.cy=CW_USEDEFAULT; <br> <br>    //If we can initialize pFR, start chugging messages <br>    if (pFR-&gt;Init(&amp;fi)) <br>        wRet=pFR-&gt;MessageLoop(); <br> <br>    delete pFR; <br>    return wRet; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CPatronFrame <br> * CPatronFrame::~CPatronFrame <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE from WinMain <br> *  hInstPrev       HINSTANCE from WinMain <br> *  pszCmdLine      LPSTR from WinMain <br> *  nCmdShow        int from WInMain <br> */ <br> <br>CPatronFrame::CPatronFrame(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    : CFrame(hInst, hInstPrev, pszCmdLine, nCmdShow) <br>    { <br>    return; <br>    } <br> <br> <br>CPatronFrame::~CPatronFrame(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateCClient <br> * <br> * Purpose: <br> *  Constructs a new client specific to the application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  PCClient        Pointer to the new client object. <br> */ <br> <br>PCClient CPatronFrame::CreateCClient(void) <br>    { <br>    return (PCClient)(new CPatronClient(m_hInst, this)); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::RegisterAllClasses <br> * <br> * Purpose: <br> *  Registers all classes used in this application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if registration succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::RegisterAllClasses(void) <br>    { <br>    WNDCLASS        wc; <br> <br>    //First let the standard frame do its thing <br>    if (!CFrame::RegisterAllClasses()) <br>        return FALSE; <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; <br>    wc.hInstance     = m_hInst; <br>    wc.cbClsExtra    = 0; <br>    wc.lpfnWndProc   = PagesWndProc; <br>    wc.cbWndExtra    = CBPAGESWNDEXTRA; <br>    wc.hIcon         = NULL; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH)(COLOR_APPWORKSPACE+1); <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = SZCLASSPAGES; <br> <br>    if (!RegisterClass(&amp;wc)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::OnCommand <br> * <br> * Purpose: <br> *  WM_COMMAND handler for the Patron frame window that processes <br> *  extra File menu items as well as the Page menu. <br> * <br> * Parameters: <br> *  hWnd            HWND of the frame window. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LRESULT         Return value for the message. <br> */ <br> <br>LRESULT CPatronFrame::OnCommand(HWND hWnd, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    PCPatronDoc     pDoc; <br> <br>    COMMANDPARAMS(wID, wCode, hWndMsg); <br> <br>    /* <br>     * Don't bother with anything during first initialization, <br>     * skipping many toolbar notifications. <br>     */ <br>    if (m_fInit) <br>        return 0L; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    switch (wID) <br>        { <br>        case IDM_FILEPRINT: <br>            pDoc-&gt;Print(m_hWnd); <br>            return 0L; <br> <br>        case IDM_FILEPRINTERSETUP: <br>            pDoc-&gt;PrinterSetup(m_hWnd, FALSE); <br>            return 0L; <br> <br> <br>        case IDM_PAGENEWPAGE: <br>            pDoc-&gt;NewPage(); <br>            break; <br> <br>        case IDM_PAGEDELETEPAGE: <br>            pDoc-&gt;DeletePage(); <br>            break; <br> <br>        case IDM_PAGENEXTPAGE: <br>            pDoc-&gt;NextPage(); <br>            break; <br> <br>        case IDM_PAGEPREVIOUSPAGE: <br>            pDoc-&gt;PreviousPage(); <br>            break; <br> <br> <br>        case IDM_PAGEFIRSTPAGE: <br>            pDoc-&gt;FirstPage(); <br>            break; <br> <br>        case IDM_PAGELASTPAGE: <br>            pDoc-&gt;LastPage(); <br>            break; <br> <br> <br>        default: <br>           return CFrame::OnCommand(hWnd, wParam, lParam); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateToolbar <br> * <br> * Purpose: <br> *  Procedure to create all the necessary toolbar buttons. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  UINT            Number of tools added to the bar. <br> */ <br> <br>UINT CPatronFrame::CreateToolbar(void) <br>    { <br>    UINT            iLast; <br>    UINT            uState=GIZMO_NORMAL; <br>    UINT            utCmd =GIZMOTYPE_BUTTONCOMMAND; <br> <br>    //Insert the standard ones. <br>    iLast=CFrame::CreateToolbar(); <br> <br>    //Remove Undo:  we don't use it. <br>    m_pTB-&gt;Remove(IDM_EDITUNDO); <br> <br>    /* <br>     * Insert Print File Import in the 5th position and account <br>     * for it in iLast. <br>     */ <br>    m_pTB-&gt;Add(utCmd, 4, IDM_FILEPRINT, m_dxB, m_dyB <br>        , NULL, NULL, 6, uState); <br> <br>    iLast++; <br> <br>    m_pTB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //Add New Page, and Delete Page <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGENEWPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 2, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEDELETEPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 3, uState); <br> <br>    m_pTB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //First, Prev, Next, Last pages. <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEFIRSTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 4, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEPREVIOUSPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 5, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGENEXTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 6, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGELASTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 7, uState); <br> <br>    return iLast; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateMenus <br> * <br> * Purpose: <br> *  Handles the WM_INITMENU message for the frame window.  Depending <br> *  on the existence of an active window, menu items are selectively <br> *  enabled and disabled. <br> * <br> * Parameters: <br> *  hMenu           HMENU of the menu to intialize <br> *  iMenu           UINT position of the menu. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateMenus(HMENU hMenu, UINT iMenu) <br>    { <br>    PCPatronDoc     pDoc; <br>    BOOL            fOK=FALSE; <br>    BOOL            fCallDefault=TRUE; <br>    UINT            uTemp; <br>    UINT            uTempE; <br>    UINT            uTempD; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    uTempE=MF_ENABLED | MF_BYCOMMAND; <br>    uTempD=MF_DISABLED | MF_GRAYED | MF_BYCOMMAND; <br>    uTemp=((NULL!=pDoc) ? uTempE : uTempD); <br> <br>    //File menu <br>    if (m_phMenu[0]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_FILEPRINT, uTemp); <br>        EnableMenuItem(hMenu, IDM_FILEPRINTERSETUP, uTemp); <br>        } <br> <br>    //Page menu <br>    if (m_phMenu[2]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_PAGENEWPAGE,      uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEDELETEPAGE,   uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGENEXTPAGE,     uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEPREVIOUSPAGE, uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEFIRSTPAGE,    uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGELASTPAGE,     uTemp); <br>        } <br> <br> <br>    if (fCallDefault) <br>        CFrame::UpdateMenus(hMenu, iMenu); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateToolbar <br> * <br> * Purpose: <br> *  Enables and disables tools depending on whether we have <br> *  a document or not. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateToolbar(void) <br>    { <br>    PCDocument  pDoc; <br>    BOOL        fEnable; <br> <br>    //Let the default hack on its tools. <br>    CFrame::UpdateToolbar(); <br> <br>    pDoc=m_pCL-&gt;ActiveDocument(); <br>    fEnable=(NULL!=pDoc); <br> <br>    //No document, disable just about everything <br>    m_pTB-&gt;Enable(IDM_FILEPRINT,        fEnable); <br>    m_pTB-&gt;Enable(IDM_FILEPRINTERSETUP, fEnable); <br> <br>    m_pTB-&gt;Enable(IDM_PAGENEWPAGE,      fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEDELETEPAGE,   fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEFIRSTPAGE,    fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEPREVIOUSPAGE, fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGENEXTPAGE,     fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGELASTPAGE,     fEnable); <br> <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

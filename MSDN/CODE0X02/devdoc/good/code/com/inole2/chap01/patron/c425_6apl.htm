<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAGES.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context429"></a>PAGES.H</h2>
<pre><code>/* <br> * PAGES.H <br> * Patron Chapter 1 <br> * <br> * Definitions and function prototypes for the Pages window control. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _PAGES_H_ <br>#define _PAGES_H_ <br> <br>//Versioning. <br>#define VERSIONMAJOR                2 <br>#define VERSIONMINOR                0 <br>#define VERSIONCURRENT              0x00020000 <br> <br>//Classname <br>#define SZCLASSPAGES                TEXT("pages") <br> <br>#define HIMETRIC_PER_INCH           2540 <br>#define LOMETRIC_PER_INCH           254 <br>#define LOMETRIC_BORDER             60          //Border around page <br> <br> <br>//Window extra bytes and offsets <br>#define CBPAGESWNDEXTRA             (sizeof(LONG)) <br>#define PAGEWL_STRUCTURE            0 <br> <br> <br>/* <br> * Page class describing an individual page and what things it <br> * contains. <br> * <br> * A DWORD is used to identify this page as the name of the storage <br> * is the string form of this ID.  If we added a page every second, <br> * it would take 136 years to overrun this counter, so we can <br> * get away with saving it persistently.  I hope this software is <br> * obsolete by then. <br> */ <br> <br>class CPage <br>    { <br>    private: <br>        DWORD       m_dwID;             //Persistent identifier <br> <br>    public: <br>        CPage(DWORD); <br>        ~CPage(void); <br> <br>        DWORD           GetID(void); <br>    }; <br> <br>typedef CPage *PCPage; <br> <br> <br> <br>//PRINT.CPP <br>BOOL    APIENTRY AbortProc(HDC, int); <br>BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//PAGEWIN.CPP <br>LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>void             RectConvertMappings(LPRECT, HDC, BOOL); <br> <br> <br>class CPages : public CWindow <br>    { <br>    friend LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>    friend BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    private: <br>        UINT        m_iPageCur;             //Current page <br>        UINT        m_cPages;               //Number of pages <br> <br>        HWND        m_hWndPageList;         //Listbox with page list <br>        HFONT       m_hFont;                //Page font <br>        BOOL        m_fSystemFont;          //m_hFont system object? <br> <br>        UINT        m_cx;                   //Page size in LOMETRIC <br>        UINT        m_cy; <br> <br>        UINT        m_xMarginLeft;          //Unusable margins, <br>        UINT        m_xMarginRight;         //in LOMETRIC <br>        UINT        m_yMarginTop; <br>        UINT        m_yMarginBottom; <br> <br>        UINT        m_xPos;                 //Viewport scroll pos, <br>        UINT        m_yPos;                 //both in *PIXELS* <br> <br>        DWORD       m_dwIDNext;             //Next ID for a page. <br> <br>        HGLOBAL     m_hDevMode;             //Current DevMode config <br> <br>        TCHAR       m_szDriver[CCHDEVICENAME]; <br>        TCHAR       m_szDevice[CCHDEVICENAME]; <br>        TCHAR       m_szPort[CCHDEVICENAME]; <br> <br>    private: <br>        void        Draw(HDC, BOOL, BOOL); <br>        void        UpdateScrollRanges(void); <br>        BOOL        ConfigureForDevice(void); <br>        BOOL        PageGet(UINT, PCPage *, BOOL); <br>        BOOL        PageAdd(UINT, DWORD, BOOL); <br> <br>    public: <br>        CPages(HINSTANCE); <br>        ~CPages(void); <br> <br>        BOOL        Init(HWND, LPRECT, DWORD, UINT, LPVOID); <br> <br>        void        New(void); <br>        BOOL        Print(HDC, LPTSTR, DWORD, UINT, UINT, UINT); <br> <br>        void        RectGet(LPRECT); <br>        void        RectSet(LPRECT, BOOL); <br>        void        SizeGet(LPRECT); <br>        void        SizeSet(LPRECT, BOOL); <br> <br>        PCPage      ActivePage(void); <br>        UINT        PageInsert(UINT); <br>        UINT        PageDelete(UINT); <br>        UINT        CurPageGet(void); <br>        UINT        CurPageSet(UINT); <br>        UINT        NumPagesGet(void); <br> <br>        BOOL        DevModeSet(HGLOBAL, HGLOBAL); <br>        HGLOBAL     DevModeGet(void); <br>    }; <br> <br>typedef CPages *PCPages; <br> <br> <br>#endif  //_PAGES_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context602"></a>DDATAOBJ.CPP</h2>
<pre><code>/* <br> * DDATAOBJ.CPP <br> * Data Object DLL Chapter 10 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "ddataobj.h" <br> <br> <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br> <br>//Make this global for the data object to load resources. <br>HINSTANCE   g_hInst=NULL; <br> <br> <br> <br>/* <br> * LibMain(32) <br> * <br> * Purpose: <br> *  Entry point conditionally compiled for Windows NT and Windows <br> *  3.1.  Provides the proper structure for each environment. <br> */ <br> <br>#ifdef WIN32 <br>BOOL WINAPI LibMain32(HINSTANCE hInstance, ULONG ulReason <br>    , LPVOID pvReserved) <br>    { <br>    if (DLL_PROCESS_DETACH==ulReason) <br>        { <br>        //Must unregsiter the class we registered <br>        UnregisterClass(TEXT("Advisor"), hInstance); <br>        return TRUE; <br>        } <br>    else <br>        { <br>        if (DLL_PROCESS_ATTACH!=ulReason) <br>            return TRUE; <br>        } <br> <br>    g_hInst=hInstance; <br>    return TRUE; <br>    } <br> <br>#else <br>int PASCAL LibMain(HINSTANCE hInstance, WORD wDataSeg <br>    , WORD cbHeapSize, LPSTR lpCmdLine) <br>    { <br>    if (0!=cbHeapSize) <br>        UnlockData(0); <br> <br>    g_hInst=hInstance; <br>    return (int)hInstance; <br>    } <br>#endif <br> <br> <br> <br> <br> <br> <br>/* <br> * DllGetClassObject <br> * <br> * Purpose: <br> *  Provides an IClassFactory for a given CLSID that this DLL is <br> *  registered to support.  This DLL is placed under the CLSID <br> *  in the registration database as the InProcServer. <br> * <br> * Parameters: <br> *  clsID           REFCLSID that identifies the class factory <br> *                  desired.  Since this parameter is passed this <br> *                  DLL can handle any number of objects simply <br> *                  by returning different class factories here <br> *                  for different CLSIDs. <br> * <br> *  riid            REFIID specifying the interface the caller wants <br> *                  on the class object, usually IID_ClassFactory. <br> * <br> *  ppv             PPVOID in which to return the interface <br> *                  pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, otherwise an error code. <br> */ <br> <br>HRESULT APIENTRY DllGetClassObject(REFCLSID rclsid <br>    , REFIID riid, PPVOID ppv) <br>    { <br>    HRESULT        hr; <br>    IClassFactory *pObj; <br> <br>    *ppv=NULL; <br> <br>    //Check each of the three CLSIDs we support. <br>    if (CLSID_DataObjectSmall==rclsid) <br>        pObj=new CDataObjectClassFactory(DOSIZE_SMALL); <br> <br>    if (CLSID_DataObjectMedium==rclsid) <br>        pObj=new CDataObjectClassFactory(DOSIZE_MEDIUM); <br> <br>    if (CLSID_DataObjectLarge==rclsid) <br>        pObj=new CDataObjectClassFactory(DOSIZE_LARGE); <br> <br>    if (NULL==pObj) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    hr=pObj-&gt;QueryInterface(riid, ppv); <br> <br>    if (FAILED(hr)) <br>        delete pObj; <br>    else <br>        g_cObj++; <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * DllCanUnloadNow <br> * <br> * Purpose: <br> *  Answers if the DLL can be freed, that is, if there are no <br> *  references to anything this DLL provides. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if nothing is using us, FALSE otherwise. <br> */ <br> <br>STDAPI DllCanUnloadNow(void) <br>    { <br>    SCODE   sc; <br> <br>    //Our answer is whether there are any object or locks <br>    sc=(0L==g_cObj &amp;&amp; 0L==g_cLock) ? S_OK : S_FALSE; <br>    return ResultFromScode(sc); <br>    } <br> <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the Koala object to call when it gets destroyed. <br> *  Since we're in a DLL we only track the number of objects here, <br> *  letting DllCanUnloadNow take care of the rest. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::CDataObjectClassFactory <br> * CDataObjectClassFactory::~CDataObjectClassFactory <br> * <br> * Constructor Parameters: <br> *  iSize           UINT specifying the data size for this class. <br> */ <br> <br>CDataObjectClassFactory::CDataObjectClassFactory(UINT iSize) <br>    { <br>    m_cRef=0L; <br>    m_iSize=iSize; <br>    return; <br>    } <br> <br> <br>CDataObjectClassFactory::~CDataObjectClassFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::QueryInterface <br> * CDataObjectClassFactory::AddRef <br> * CDataObjectClassFactory::Release <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObjectClassFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObjectClassFactory::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    ObjectDestroyed(); <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates a CDataObject object that supports the IDataObject <br> *  and IUnknown interfaces.  If the caller asks for a different <br> *  interface than these two then we fail. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          PPVOID in which to store the desired <br> *                  interface pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise E_NOINTERFACE <br> *                  if we cannot support the requested interface. <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::CreateInstance <br>    (LPUNKNOWN pUnkOuter, REFIID riid, PPVOID ppvObj) <br>    { <br>    PCDataObject        pObj; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    if (NULL!=pUnkOuter &amp;&amp; IID_IUnknown!=riid) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    //Create the object telling it the data size to work with <br>    pObj=new CDataObject(pUnkOuter, ObjectDestroyed, m_iSize); <br> <br>    if (NULL==pObj) <br>        return hr; <br> <br>    if (pObj-&gt;Init()) <br>        hr=pObj-&gt;QueryInterface(riid, ppvObj); <br> <br>    //Kill the object if initial creation or FInit failed. <br>    if (FAILED(hr)) <br>        delete pObj; <br>    else <br>        g_cObj++; <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory object.  When the number of locks goes to <br> *  zero and the number of objects is zero, we shut down the <br> *  application. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR always. <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        g_cLock--; <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

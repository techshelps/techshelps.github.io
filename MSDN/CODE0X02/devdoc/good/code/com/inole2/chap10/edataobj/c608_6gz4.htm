<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EDATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context610"></a>EDATAOBJ.CPP</h2>
<pre><code>/* <br> * EDATAOBJ.CPP <br> * Data Object EXE Chapter 10 <br> * <br> * Data Object implemented in an application.  This object supports <br> * IUnknown and IDataObject interfaces. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "edataobj.h" <br> <br> <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br> <br>//Make window handle global so other code can cause a shutdown <br>HWND        g_hWnd=NULL; <br>HINSTANCE   g_hInst=NULL; <br> <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    MSG     msg; <br>    PAPP    pApp; <br> <br>    SETMESSAGEQUEUE(96); <br> <br>    g_hInst=hInst; <br> <br>    pApp=new CApp(hInst, hInstPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pApp) <br>        return -1; <br> <br>    if (pApp-&gt;Init()) <br>        { <br>        while (GetMessage(&amp;msg, NULL, 0,0 )) <br>            { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>            } <br>        } <br> <br>    delete pApp; <br>    return msg.wParam; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * DataObjectWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure. <br> */ <br> <br>LRESULT APIENTRY DataObjectWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    switch (iMsg) <br>        { <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the DataObject object to call when it gets <br> *  destroyed. We destroy the main window if the proper <br> *  conditions are met for shutdown. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br> <br>    //No more objects and no locks, shut the app down. <br>    if (0L==g_cObj &amp;&amp; 0L==g_cLock &amp;&amp; IsWindow(g_hWnd)) <br>        PostMessage(g_hWnd, WM_CLOSE, 0, 0L); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::CApp <br> * CApp::~CApp <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the Application from WinMain <br> *  hInstPrev       HINSTANCE of a previous instance from WinMain <br> *  pszCmdLine      LPSTR of the command line. <br> *  nCmdShow        UINT specifying how to show the app window, <br> *                  from WinMain. <br> */ <br> <br>CApp::CApp(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, UINT nCmdShow) <br>    { <br>    UINT        i; <br> <br>    m_hInst     =hInst; <br>    m_hInstPrev =hInstPrev; <br>    m_pszCmdLine=pszCmdLine; <br> <br>    m_hWnd=NULL; <br> <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        { <br>        m_rgdwRegCO[i]=0; <br>        m_rgpIClassFactory[i]=NULL; <br>        } <br> <br>    m_fInitialized=FALSE; <br>    return; <br>    } <br> <br> <br>CApp::~CApp(void) <br>    { <br>    UINT        i; <br> <br>    //Revoke and destroy the class factories of all sizes <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        { <br>        if (0L!=m_rgdwRegCO[i]) <br>            CoRevokeClassObject(m_rgdwRegCO[i]); <br> <br>        ReleaseInterface(m_rgpIClassFactory[i]); <br>        } <br> <br>    if (m_fInitialized) <br>        CoUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CApp::Init <br> * <br> * Purpose: <br> *  Initializes an CApp object by registering window classes, <br> *  creating the main window, and doing anything else prone to <br> *  failure.  If this function fails the caller should guarantee <br> *  that the destructor is called. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::Init(void) <br>    { <br>    WNDCLASS        wc; <br>    HRESULT         hr, hr2, hr3; <br>    UINT            i; <br> <br>    CHECKVER_COM; <br> <br>    //Check command line for -Embedding <br>    if (lstrcmpiA(m_pszCmdLine, "-Embedding")) <br>        return FALSE; <br> <br>    if (FAILED(CoInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    if (!m_hInstPrev) <br>        { <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = DataObjectWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = 0; <br>        wc.hInstance      = m_hInst; <br>        wc.hIcon          = NULL; <br>        wc.hCursor        = NULL; <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = NULL; <br>        wc.lpszClassName  = TEXT("EXEDataObject"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    m_hWnd=CreateWindow(TEXT("EXEDataObject") <br>        , TEXT("EXE DataObject"), WS_OVERLAPPEDWINDOW <br>        , 35, 35, 350, 250, NULL, NULL, m_hInst, NULL); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    g_hWnd=m_hWnd; <br> <br>    /* <br>     * This code supplies three different classes, one for each type <br>     * of data object that handles a different size of data. All the <br>     * class factories share the same implementation, but their <br>     * instantiations differ by the type passed in the constructor. <br>     * When the class factories create objects, they pass that size <br>     * to the CDataObject contstructor as well. <br>     */ <br> <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        { <br>        m_rgpIClassFactory[i]=new CDataObjectClassFactory(i); <br> <br>        if (NULL==m_rgpIClassFactory[i]) <br>            return FALSE; <br> <br>        m_rgpIClassFactory[i]-&gt;AddRef(); <br>        } <br> <br>    hr=CoRegisterClassObject(CLSID_DataObjectSmall <br>        , m_rgpIClassFactory[0], CLSCTX_LOCAL_SERVER <br>        , REGCLS_MULTIPLEUSE, &amp;m_rgdwRegCO[0]); <br> <br>    hr2=CoRegisterClassObject(CLSID_DataObjectMedium <br>        , m_rgpIClassFactory[1], CLSCTX_LOCAL_SERVER <br>        , REGCLS_MULTIPLEUSE, &amp;m_rgdwRegCO[1]); <br> <br>    hr3=CoRegisterClassObject(CLSID_DataObjectLarge <br>        , m_rgpIClassFactory[2], CLSCTX_LOCAL_SERVER <br>        , REGCLS_MULTIPLEUSE, &amp;m_rgdwRegCO[2]); <br> <br>    if (FAILED(hr) || FAILED(hr2) || FAILED(hr3)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::CDataObjectClassFactory <br> * CDataObjectClassFactory::~CDataObjectClassFactory <br> * <br> * Constructor Parameters: <br> *  iSize           UINT specifying the data size for this class. <br> */ <br> <br>CDataObjectClassFactory::CDataObjectClassFactory(UINT iSize) <br>    { <br>    m_cRef=0L; <br>    m_iSize=iSize; <br>    return; <br>    } <br> <br> <br>CDataObjectClassFactory::~CDataObjectClassFactory(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::QueryInterface <br> * CDataObjectClassFactory::AddRef <br> * CDataObjectClassFactory::Release <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObjectClassFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObjectClassFactory::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates a CDataObject object that supports the IDataObject <br> *  and IUnknown interfaces.  If the caller asks for a different <br> *  interface than these two then we fail. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          PPVOID in which to store the desired interface <br> *                  pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise contains <br> *                  E_NOINTERFACE if we cannot support the <br> *                  requested interface. <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::CreateInstance <br>    (LPUNKNOWN pUnkOuter, REFIID riid, PPVOID ppvObj) <br>    { <br>    PCDataObject        pObj; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    if (NULL!=pUnkOuter &amp;&amp; IID_IUnknown!=riid) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    //Create the object telling it the data size to work with <br>    pObj=new CDataObject(pUnkOuter, ObjectDestroyed, m_iSize); <br> <br>    if (NULL==pObj) <br>        return hr; <br> <br>    if (pObj-&gt;Init()) <br>        hr=pObj-&gt;QueryInterface(riid, ppvObj); <br> <br>    g_cObj++; <br> <br>    if (FAILED(hr)) <br>        { <br>        delete pObj; <br>        ObjectDestroyed();  //Decrements g_cObj <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDataObjectClassFactory::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory object.  When the number of locks goes to <br> *  zero and the number of objects is zero, we shut down the <br> *  application. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR always. <br> */ <br> <br>STDMETHODIMP CDataObjectClassFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        { <br>        g_cLock--; <br> <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        } <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPERSTMI.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context619"></a>IPERSTMI.CPP</h2>
<pre><code>/* <br> * IPERSTMI.CPP <br> * Polyline Component Chapter 10 <br> * <br> * Implementation of the IPersistStreamInit interface exposed on the <br> * Polyline object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "polyline.h" <br> <br> <br>/* <br> * CImpIPersistStreamInit:CImpIPersistStreamInit <br> * CImpIPersistStreamInit::~CImpIPersistStreamInit <br> * <br> * Constructor Parameters: <br> *  pObj            PCPolyline pointing to the object we live in. <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> */ <br> <br>CImpIPersistStreamInit::CImpIPersistStreamInit(PCPolyline pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIPersistStreamInit::~CImpIPersistStreamInit(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::QueryInterface <br> * CImpIPersistStreamInit::AddRef <br> * CImpIPersistStreamInit::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPersistStreamInit. <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStreamInit::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStreamInit::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::GetClassID <br> * <br> * Purpose: <br> *  Returns the CLSID of the object represented by this interface. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store our CLSID. <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::GetClassID(LPCLSID pClsID) <br>    { <br>    *pClsID=m_pObj-&gt;m_clsID; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::IsDirty <br> * <br> * Purpose: <br> *  Tells the caller if we have made changes to this object since <br> *  it was loaded or initialized new. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         Contains S_OK if we ARE dirty, S_FALSE if <br> *                  NOT dirty. <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::IsDirty(void) <br>    { <br>    return ResultFromScode(m_pObj-&gt;m_fDirty ? S_OK : S_FALSE); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::Load <br> * <br> * Purpose: <br> *  Instructs the object to load itself from a previously saved <br> *  IStreamInit that was handled by Save in another object lifetime. <br> *  The seek pointer in this stream will be exactly the same as <br> *  it was when Save was called, and this function must leave <br> *  the seek pointer the same as it was on exit from Save, regardless <br> *  of success or failure.  This function should not hold on to <br> *  pIStream. <br> * <br> *  This function is called in lieu of IPersistStreamInit::InitNew <br> *  when the object already has a persistent state. <br> * <br> * Parameters: <br> *  pIStream        LPSTREAM from which to load. <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::Load(LPSTREAM pIStream) <br>    { <br>    POLYLINEDATA    pl; <br>    ULONG           cb; <br>    HRESULT         hr; <br> <br>    if (NULL==pIStream) <br>        return ResultFromScode(E_POINTER); <br> <br>    //Read all the data into the POLYLINEDATA structure. <br>    hr=pIStream-&gt;Read(&amp;pl, CBPOLYLINEDATA, &amp;cb); <br> <br>    if (FAILED(hr) || CBPOLYLINEDATA!=cb) <br>        return hr; <br> <br>    //CHAPTER10MOD <br>    //DataSet now internal on Polyline <br>    m_pObj-&gt;DataSet(&amp;pl, TRUE, TRUE); <br>    //End CHAPTER10MOD <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::Save <br> * <br> * Purpose: <br> *  Saves the data for this object to an IStreamInit.  Be sure not <br> *  to change the position of the seek pointer on entry to this <br> *  function: the caller will assume that you write from the <br> *  current offset.  Leave the stream's seek pointer at the end <br> *  of the data written on exit. <br> * <br> * Parameters: <br> *  pIStream        LPSTREAM in which to save our data. <br> *  fClearDirty     BOOL indicating if this call should clear <br> *                  the object's dirty flag (TRUE) or leave it <br> *                  unchanged (FALSE). <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::Save(LPSTREAM pIStream <br>    , BOOL fClearDirty) <br>    { <br>    POLYLINEDATA    pl; <br>    ULONG           cb; <br>    HRESULT         hr; <br> <br>    if (NULL==pIStream) <br>        return ResultFromScode(E_POINTER); <br> <br>    //CHAPTER10MOD <br>    //DataGet now internal on Polyline <br>    m_pObj-&gt;DataGet(&amp;pl); <br>    //End CHAPTER10MOD <br> <br>    hr=pIStream-&gt;Write(&amp;pl, CBPOLYLINEDATA, &amp;cb); <br> <br>    if (FAILED(hr) || CBPOLYLINEDATA!=cb) <br>        return ResultFromScode(STG_E_WRITEFAULT); <br> <br>    if (fClearDirty) <br>        m_pObj-&gt;m_fDirty; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::GetSizeMax <br> * <br> * Purpose: <br> *  Returns the size of the data we would write if Save was <br> *  called right now. <br> * <br> * Parameters: <br> *  pcbSize         ULARGE_INTEGER * in which to save the size <br> *                  of the stream an immediate call to Save would <br> *                  write. <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::GetSizeMax(ULARGE_INTEGER <br>    *pcbSize) <br>    { <br>    if (NULL==pcbSize) <br>        return ResultFromScode(E_POINTER); <br> <br>    ULISet32(*pcbSize, CBPOLYLINEDATA); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistStreamInit::InitNew <br> * <br> * Purpose: <br> *  Informs the object that it is being created new instead of <br> *  loaded from a persistent state.  This will be called in lieu <br> *  of IPersistStreamInit::Load. <br> * <br> * Parameters: <br> *  None <br> */ <br> <br>STDMETHODIMP CImpIPersistStreamInit::InitNew(void) <br>    { <br>    //Nothing for us to do <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

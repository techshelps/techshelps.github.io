<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context612"></a>IDATAOBJ.CPP</h2>
<pre><code>/* <br> * IDATAOBJ.CPP <br> * Data Object Chapter 10 <br> * <br> * Implementation of the IDataObject interface for CDataObject. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "dataobj.h" <br> <br> <br> <br>/* <br> * CImpIDataObject::CImpIDataObject <br> * CImpIDataObject::~CImpIDataObject <br> * <br> * Parameters (Constructor): <br> *  pObj            PCDataObject of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDataObject::CImpIDataObject(PCDataObject pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDataObject::~CImpIDataObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryInterface <br> * CImpIDataObject::AddRef <br> * CImpIDataObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIDataObject object. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetData <br> * <br> * Purpose: <br> *  Retrieves data described by a specific FormatEtc into a StgMedium <br> *  allocated by this function.  Used like GetClipboardData. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM in which to return the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    UINT            cf=pFE-&gt;cfFormat; <br> <br>    //Check the aspects we support. <br>    if (!(DVASPECT_CONTENT &amp; pFE-&gt;dwAspect)) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    switch (cf) <br>        { <br>        case CF_METAFILEPICT: <br>            if (!(TYMED_MFPICT &amp; pFE-&gt;tymed)) <br>                break; <br> <br>            return m_pObj-&gt;RenderMetafilePict(pSTM); <br> <br>        case CF_BITMAP: <br>            if (!(TYMED_GDI &amp; pFE-&gt;tymed)) <br>                break; <br> <br>            return m_pObj-&gt;RenderBitmap(pSTM); <br> <br>        case CF_TEXT: <br>            if (!(TYMED_HGLOBAL &amp; pFE-&gt;tymed)) <br>                break; <br> <br>            return m_pObj-&gt;RenderText(pSTM); <br> <br>        default: <br>            break; <br>        } <br> <br>    return ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetDataHere <br> * <br> * Purpose: <br> *  Renders the specific FormatEtc into caller-allocated medium <br> *  provided in pSTM. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM providing the medium into which <br> *                  wer render the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetDataHere(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryGetData <br> * <br> * Purpose: <br> *  Tests if a call to GetData with this FormatEtc will provide <br> *  any rendering; used like IsClipboardFormatAvailable. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryGetData(LPFORMATETC pFE) <br>    { <br>    UINT            cf=pFE-&gt;cfFormat; <br>    BOOL            fRet=FALSE; <br> <br>    //Check the aspects we support. <br>    if (!(DVASPECT_CONTENT &amp; pFE-&gt;dwAspect)) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    switch (cf) <br>        { <br>        case CF_METAFILEPICT: <br>            fRet=(BOOL)(pFE-&gt;tymed &amp; TYMED_MFPICT); <br>            break; <br> <br>        case CF_BITMAP: <br>            fRet=(BOOL)(pFE-&gt;tymed &amp; TYMED_GDI); <br>            break; <br> <br>        case CF_TEXT: <br>            fRet=(BOOL)(pFE-&gt;tymed &amp; TYMED_HGLOBAL); <br>            break; <br> <br>        default: <br>            fRet=FALSE; <br>            break; <br>        } <br> <br>    return fRet ? NOERROR : ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetCanonicalFormatEtc <br> * <br> * Purpose: <br> *  Provides the caller with an equivalent FormatEtc to the one <br> *  provided when different FormatEtcs will produce exactly the <br> *  same renderings. <br> * <br> * Parameters: <br> *  pFEIn            LPFORMATETC of the first description. <br> *  pFEOut           LPFORMATETC of the equal description. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetCanonicalFormatEtc <br>    (LPFORMATETC pFEIn, LPFORMATETC pFEOut) <br>    { <br>    if (NULL==pFEOut) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    pFEOut-&gt;ptd=NULL; <br>    return ResultFromScode(DATA_S_SAMEFORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::SetData <br> * <br> * Purpose: <br> *  Places data described by a FormatEtc and living in a StgMedium <br> *  into the object.  The object may be responsible to clean up the <br> *  StgMedium before exiting. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the data to set. <br> *  pSTM            LPSTGMEDIUM containing the data. <br> *  fRelease        BOOL indicating if this function is responsible <br> *                  for freeing the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::SetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM, BOOL fRelease) <br>    { <br>    return ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::EnumFormatEtc <br> * <br> * Purpose: <br> *  Returns an IEnumFORMATETC object through which the caller can <br> *  iterate to learn about all the data formats this object can <br> *  provide through either GetData[Here] or SetData. <br> * <br> * Parameters: <br> *  dwDir           DWORD describing a data direction, either <br> *                  DATADIR_SET or DATADIR_GET. <br> *  ppEnum          LPENUMFORMATETC * in which to return the <br> *                  pointer to the enumerator. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::EnumFormatEtc(DWORD dwDir <br>    , LPENUMFORMATETC *ppEnum) <br>    { <br>    switch (dwDir) <br>        { <br>        case DATADIR_GET: <br>            *ppEnum=new CEnumFormatEtc(m_pObj-&gt;m_cfeGet <br>                , m_pObj-&gt;m_rgfeGet); <br>            break; <br> <br>        case DATADIR_SET: <br>            *ppEnum=NULL; <br>            break; <br> <br>        default: <br>            *ppEnum=NULL; <br>            break; <br>        } <br> <br>    if (NULL==*ppEnum) <br>        return ResultFromScode(E_FAIL); <br>    else <br>        (*ppEnum)-&gt;AddRef(); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::DAdvise <br> * <br> * Purpose: <br> *  Provides the data object with an IAdviseSink object that we are <br> *  responsible to notify when the data changes. <br> * <br> * Parameters: <br> *  ppFE            LPFORMATETC <br> *  dwFlags         DWORD carrying flags indicating how the advise <br> *                  sink wants to be treated. <br> *  pIAdviseSink    LPADVISESINK to the object to notify. <br> *  pdwConn         LPDWORD into which we store a DWORD key <br> *                  identifying the advise connection. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::DAdvise(LPFORMATETC pFE, DWORD dwFlags <br>    , LPADVISESINK pIAdviseSink, LPDWORD pdwConn) <br>    { <br>    HRESULT         hr; <br> <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        { <br>        hr=CreateDataAdviseHolder(&amp;m_pObj-&gt;m_pIDataAdviseHolder); <br> <br>        if (FAILED(hr)) <br>            return ResultFromScode(E_OUTOFMEMORY); <br>        } <br> <br>    hr=m_pObj-&gt;m_pIDataAdviseHolder-&gt;Advise((LPDATAOBJECT)this, pFE <br>        , dwFlags, pIAdviseSink, pdwConn); <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::DUnadvise <br> * <br> * Purpose: <br> *  Turns off advising previously set up with Advise. <br> * <br> * Parameters: <br> *  dwConn          DWORD connection key returned from Advise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::DUnadvise(DWORD dwConn) <br>    { <br>    HRESULT         hr; <br> <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        return ResultFromScode(E_FAIL); <br> <br>    hr=m_pObj-&gt;m_pIDataAdviseHolder-&gt;Unadvise(dwConn); <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::EnumDAdvise <br> * <br> * Purpose: <br> *  Returns an enumerator object through which the caller can find <br> *  all the agents currently receiving advises on this data object. <br> * <br> * Parameters: <br> *  ppEnum          LPENUMSTATDATA * in which to return the <br> *                  enumerator. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::EnumDAdvise(LPENUMSTATDATA *ppEnum) <br>    { <br>    HRESULT         hr; <br> <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        return ResultFromScode(E_FAIL); <br> <br>    hr=m_pObj-&gt;m_pIDataAdviseHolder-&gt;EnumAdvise(ppEnum); <br>    return hr; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

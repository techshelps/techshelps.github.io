<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context609"></a>DATAOBJ.H</h2>
<pre><code>/* <br> * DATAOBJ.H <br> * Data Object Chapter 10 <br> * <br> * Classes that implement the Data Object independent of whether <br> * we live in a DLL or EXE. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Right Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _DATAOBJ_H_ <br>#define _DATAOBJ_H_ <br> <br>#define INC_OLE2 <br>#define CHAPTER10 <br>#include &lt;inole.h&gt; <br> <br>//Data size types <br>#define DOSIZE_SMALL        0 <br>#define DOSIZE_MEDIUM       1 <br>#define DOSIZE_LARGE        2 <br>#define DOSIZE_CSIZES       3 <br> <br>//Data sizes <br>#define CCHTEXTSMALL        64      //Text grows * 16 charactrs <br>#define CCHTEXTMEDIUM       1024 <br>#define CCHTEXTLARGE        16384 <br> <br>#define CXYBITMAPSMALL      16      //Bitmaps grow * 4 pixels <br>#define CXYBITMAPMEDIUM     64 <br>#define CXYBITMAPLARGE      256 <br> <br>#define CRECMETAFILESMALL   4       //Metafiles grows * 9 records; <br>#define CRECMETAFILEMEDIUM  12      //the number of actual records <br>#define CRECMETAFILELARGE   36      //is the square of these <br> <br> <br>//Resources for this data object. <br>#define IDB_MIN             1       //Keep this DOSIZE_SMALL+1 <br>#define IDB_16BY16          1 <br>#define IDB_64BY64          2 <br>#define IDB_256BY256        3 <br>#define IDB_MAX             3 <br> <br> <br>#define IDR_MENU                        1 <br>#define IDR_ADVISORICON                 1 <br> <br>#define IDM_ADVISEITERATIONSMIN         100 <br>#define IDM_ADVISEITERATIONS16          100 <br>#define IDM_ADVISEITERATIONS64          101 <br>#define IDM_ADVISEITERATIONS144         102 <br>#define IDM_ADVISEITERATIONS256         103 <br>#define IDM_ADVISEITERATIONS400         104 <br>#define IDM_ADVISEITERATIONS572         105 <br> <br> <br> <br> <br>/* <br> * The DataObject object is implemented in its own class with its <br> * own IUnknown to support aggregation.  It contains one <br> * CImpIDataObject object that we use to implement the externally <br> * exposed interfaces. <br> */ <br> <br>#define CFORMATETCGET       3 <br> <br> <br>//DATAOBJ.CPP <br>LRESULT APIENTRY AdvisorWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>class CImpIDataObject; <br>typedef class CImpIDataObject *PCImpIDataObject; <br> <br> <br>class CDataObject : public IUnknown <br>    { <br>    friend class CImpIDataObject; <br>    friend LRESULT APIENTRY AdvisorWndProc(HWND, UINT <br>        , WPARAM, LPARAM); <br> <br>    protected: <br>        ULONG               m_cRef; <br>        LPUNKNOWN           m_pUnkOuter; <br>        PFNDESTROYED        m_pfnDestroy; <br> <br>        UINT                m_iSize;        //Data size for Render* <br>        HBITMAP             m_rghBmp[DOSIZE_CSIZES]; //Cache bitmaps <br> <br>        HWND                m_hWndAdvise;   //Popup with Advise menu <br>        DWORD               m_dwAdvFlags;   //Notification flags <br> <br>        //Contained interface implemetation <br>        PCImpIDataObject    m_pImpIDataObject; <br> <br>        //Other interfaces used, implemented elsewhere <br>        LPDATAADVISEHOLDER  m_pIDataAdviseHolder; <br> <br>        //Arrays for IDataObject::EnumFormatEtc <br>        ULONG               m_cfeGet; <br>        FORMATETC           m_rgfeGet[CFORMATETCGET]; <br> <br>    protected: <br>        //Functions for use from IDataObject::GetData <br>        HRESULT     RenderText(LPSTGMEDIUM); <br>        HRESULT     RenderBitmap(LPSTGMEDIUM); <br>        HRESULT     RenderMetafilePict(LPSTGMEDIUM); <br> <br>    public: <br>        CDataObject(LPUNKNOWN, PFNDESTROYED, UINT); <br>        ~CDataObject(void); <br> <br>        BOOL Init(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CDataObject *PCDataObject; <br> <br> <br> <br>/* <br> * Interface implementations for the CDataObject object. <br> */ <br> <br>class CImpIDataObject : public IDataObject <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        PCDataObject    m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIDataObject(PCDataObject, LPUNKNOWN); <br>        ~CImpIDataObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IDataObject members <br>        STDMETHODIMP GetData(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP GetDataHere(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP QueryGetData(LPFORMATETC); <br>        STDMETHODIMP GetCanonicalFormatEtc(LPFORMATETC,LPFORMATETC); <br>        STDMETHODIMP SetData(LPFORMATETC, LPSTGMEDIUM, BOOL); <br>        STDMETHODIMP EnumFormatEtc(DWORD, LPENUMFORMATETC *); <br>        STDMETHODIMP DAdvise(LPFORMATETC, DWORD,  LPADVISESINK <br>            , DWORD *); <br>        STDMETHODIMP DUnadvise(DWORD); <br>        STDMETHODIMP EnumDAdvise(LPENUMSTATDATA *); <br>    }; <br> <br> <br> <br>/* <br> * IEnumFORMATETC object that is created from <br> * IDataObject::EnumFormatEtc.  This object lives on its own. <br> */ <br> <br>class CEnumFormatEtc : public IEnumFORMATETC <br>    { <br>    private: <br>        ULONG           m_cRef;         //Object reference count <br>        ULONG           m_iCur;         //Current element. <br>        ULONG           m_cfe;          //Number of FORMATETCs in us <br>        LPFORMATETC     m_prgfe;        //Source of FORMATETCs <br> <br>    public: <br>        CEnumFormatEtc(ULONG, LPFORMATETC); <br>        ~CEnumFormatEtc(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IEnumFORMATETC members <br>        STDMETHODIMP Next(ULONG, LPFORMATETC, ULONG *); <br>        STDMETHODIMP Skip(ULONG); <br>        STDMETHODIMP Reset(void); <br>        STDMETHODIMP Clone(IEnumFORMATETC **); <br>    }; <br> <br> <br>typedef CEnumFormatEtc *PCEnumFormatEtc; <br> <br>#endif //_DATAOBJ_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

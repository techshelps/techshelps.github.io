<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLYLINE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context622"></a>POLYLINE.CPP</h2>
<pre><code>/* <br> * POLYLINE.CPP <br> * Polyline Component Chapter 10 <br> * <br> * Implementation of the CPolyline class that we expose as a <br> * component object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "polyline.h" <br> <br> <br>/* <br> * CPolyline:CPolyline <br> * CPolyline::~CPolyline <br> * <br> * Constructor Parameters: <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object is <br> *                  destroyed. <br> *  hInst           HINSTANCE of the application we're in. <br> */ <br> <br>CPolyline::CPolyline(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy <br>    , HINSTANCE hInst) <br>    { <br>    m_hWnd=NULL; <br>    m_hInst=hInst; <br> <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br>    m_fDirty=FALSE; <br> <br>    m_pImpIPolyline=NULL; <br>    m_pImpIConnPtCont=NULL; <br> <br>    m_pAdv=NULL; <br>    m_pConnPt=NULL; <br> <br>    m_pST  =NULL; <br>    m_cf   =0; <br>    //CHAPTER10MOD <br>    m_clsID=CLSID_Polyline10; <br>    //End CHAPTER10MOD <br> <br>    m_pIStorage=NULL; <br>    m_pIStream =NULL; <br> <br>    m_pImpIPersistStorage=NULL; <br>    m_pImpIPersistStreamInit=NULL; <br> <br>    //CHAPTER10MOD <br>    m_pImpIDataObject   =NULL; <br>    m_pIDataAdviseHolder=NULL; <br>    //End CHAPTER10MOD <br>    return; <br>    } <br> <br> <br>CPolyline::~CPolyline(void) <br>    { <br>    if (NULL!=m_pST) <br>        delete m_pST; <br> <br>    //CHAPTER10MOD <br>    ReleaseInterface(m_pIDataAdviseHolder); <br> <br>    DeleteInterfaceImp(m_pImpIDataObject); <br>    //End CHAPTER10MOD <br> <br>    DeleteInterfaceImp(m_pImpIPersistStreamInit); <br>    DeleteInterfaceImp(m_pImpIPersistStorage); <br>    ReleaseInterface(m_pIStream); <br>    ReleaseInterface(m_pIStorage); <br> <br>    DeleteInterfaceImp(m_pImpIConnPtCont); <br>    DeleteInterfaceImp(m_pImpIPolyline); <br> <br>    ReleaseInterface(m_pAdv); <br>    ReleaseInterface(m_pConnPt); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPolyline::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CPolyline that's prone to <br> *  failure that we also use internally before exposing the <br> *  object outside this DLL. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPolyline::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    m_pST=new CStringTable(m_hInst); <br> <br>    if (!m_pST-&gt;Init(IDS_POLYLINEMIN, IDS_POLYLINEMAX)) <br>        return FALSE; <br> <br>    m_cf=RegisterClipboardFormat(SZPOLYLINECLIPFORMAT); <br> <br>    m_pImpIPersistStorage=new CImpIPersistStorage(this, pIUnknown); <br> <br>    if (NULL==m_pImpIPersistStorage) <br>        return FALSE; <br> <br>    m_pImpIPersistStreamInit=new CImpIPersistStreamInit(this <br>        , pIUnknown); <br> <br>    if (NULL==m_pImpIPersistStreamInit) <br>        return FALSE; <br> <br>    m_pImpIPolyline=new CImpIPolyline(this, pIUnknown); <br> <br>    if (NULL==m_pImpIPolyline) <br>        return FALSE; <br> <br>    m_pImpIConnPtCont=new CImpIConnPtCont(this, pIUnknown); <br> <br>    if (NULL==m_pImpIConnPtCont) <br>        return FALSE; <br> <br>    m_pConnPt=new CConnectionPoint(this); <br> <br>    if (NULL==m_pConnPt) <br>        return FALSE; <br> <br>    m_pConnPt-&gt;AddRef();    //Reversed in destructor <br> <br>    //CHAPTER10MOD <br>    m_pImpIDataObject=new CImpIDataObject(this, pIUnknown); <br> <br>    if (NULL==m_pImpIDataObject) <br>        return FALSE; <br>    //End CHAPTER10MOD <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolyline::QueryInterface <br> * CPolyline::AddRef <br> * CPolyline::Release <br> * <br> * Purpose: <br> *  IUnknown members for CPolyline object. <br> */ <br> <br>STDMETHODIMP CPolyline::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IConnectionPointContainer==riid) <br>        *ppv=m_pImpIConnPtCont; <br> <br>    //CHAPTER10MOD <br>    if (IID_IPolyline10==riid) <br>        *ppv=m_pImpIPolyline; <br>    //End CHAPTER10MOD <br> <br>    if (IID_IPersistStorage==riid) <br>        *ppv=m_pImpIPersistStorage; <br> <br>    if (IID_IPersist==riid || IID_IPersistStream==riid <br>        || IID_IPersistStreamInit==riid) <br>        *ppv=m_pImpIPersistStreamInit; <br> <br>    //CHAPTER10MOD <br>    if (IID_IDataObject==riid) <br>        *ppv=m_pImpIDataObject; <br>    //End CHAPTER10MOD <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolyline::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolyline::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolyline::RectConvertMappings <br> * <br> * Purpose: <br> *  Converts the contents of a rectangle from device (MM_TEXT) or <br> *  HIMETRIC to the other. <br> * <br> * Parameters: <br> *  pRect           LPRECT containing the rectangle to convert. <br> *  fToDevice       BOOL TRUE to convert from HIMETRIC to device, <br> *                  FALSE to convert device to HIMETRIC. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPolyline::RectConvertMappings(LPRECT pRect, BOOL fToDevice) <br>    { <br>    HDC      hDC; <br>    int      iLpx, iLpy; <br> <br>    if (NULL==pRect) <br>        return; <br> <br>    hDC=GetDC(NULL); <br>    iLpx=GetDeviceCaps(hDC, LOGPIXELSX); <br>    iLpy=GetDeviceCaps(hDC, LOGPIXELSY); <br>    ReleaseDC(NULL, hDC); <br> <br>    if (fToDevice) <br>        { <br>        pRect-&gt;left=MulDiv(iLpx, pRect-&gt;left, HIMETRIC_PER_INCH); <br>        pRect-&gt;top =MulDiv(iLpy, pRect-&gt;top , HIMETRIC_PER_INCH); <br> <br>        pRect-&gt;right =MulDiv(iLpx, pRect-&gt;right, HIMETRIC_PER_INCH); <br>        pRect-&gt;bottom=MulDiv(iLpy, pRect-&gt;bottom,HIMETRIC_PER_INCH); <br>        } <br>    else <br>        { <br>        pRect-&gt;left=MulDiv(pRect-&gt;left, HIMETRIC_PER_INCH, iLpx); <br>        pRect-&gt;top =MulDiv(pRect-&gt;top , HIMETRIC_PER_INCH, iLpy); <br> <br>        pRect-&gt;right =MulDiv(pRect-&gt;right, HIMETRIC_PER_INCH, iLpx); <br>        pRect-&gt;bottom=MulDiv(pRect-&gt;bottom,HIMETRIC_PER_INCH, iLpy); <br>        } <br> <br>    return; <br>    } <br> <br> <br> <br>//CHAPTER10MOD <br>//Functions now internal due to IDataObject <br> <br>/* <br> * CPolyline::DataSet <br> * <br> * Purpose: <br> *  Sets the current data in this Polyline to a given structure. <br> * <br> * Parameters: <br> *  pplIn           PPOLYLINEDATA to initialize to. <br> *  fSizeToData     BOOL indicating if we're to size to the data <br> *                  or scale it. <br> *  fNotify         BOOL indicating if we're to send an advise <br> *                  on this change. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise a <br> *                  POLYLINE_E_ value. <br> */ <br> <br>STDMETHODIMP CPolyline::DataSet(PPOLYLINEDATA pplIn <br>    , BOOL fSizeToData, BOOL fNotify) <br>    { <br>    RECT            rc; <br> <br>    /* <br>     * Copy the structure in pplIn and repaint to reflect the <br>     * new point set.  Note that unlike the RectSet message, we <br>     * do no scaling, assuming that the rect in the structure <br>     * is appropriate for the data. <br>     */ <br> <br>    if (NULL==pplIn) <br>        return ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    m_pl=*pplIn; <br> <br>    //CHAPTER10MOD <br>    m_fDirty=TRUE; <br> <br>    //Inform our parent of the data change <br>    if (NULL!=m_pIDataAdviseHolder) <br>        { <br>        m_pIDataAdviseHolder-&gt;SendOnDataChange(m_pImpIDataObject <br>            , DVASPECT_CONTENT, ADVF_NODATA); <br>        } <br>    //End CHAPTER10MOD <br> <br>    /* <br>     * If we're scaling the window to fit the data, then use <br>     * RectSet passing our current rectangle as the new one. <br>     * That makes sure that the data won't change but that the <br>     * window is resized. <br>     */ <br> <br>    if (fSizeToData) <br>        { <br>        POINT       pt; <br> <br>        /* <br>         * Get our offset in the parent window so we can RectSet <br>         * to the right place since RectSet expects rectangle in <br>         * parent coordinates and we get it in client coordinates. <br>         */ <br>        GetWindowRect(m_hWnd, &amp;rc); <br>        pt.x=rc.left; <br>        pt.y=rc.top; <br>        ScreenToClient(GetParent(m_hWnd), &amp;pt); <br>        RECTSTORECT(m_pl.rc, rc); <br>        OffsetRect(&amp;rc, pt.x, pt.y); <br> <br>        //This will also cause a repaint. <br>        m_pImpIPolyline-&gt;RectSet(&amp;rc, fNotify); <br>        } <br>    else <br>        { <br>        //Make sure we're updated. <br>        InvalidateRect(m_hWnd, NULL, TRUE); <br>        UpdateWindow(m_hWnd); <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolyline::DataGet <br> * <br> * Purpose: <br> *  Retrieves the Polyline's current data. <br> * <br> * Parameters: <br> *  pplIn           PPOLYLINEDATA into which we copy the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise a <br> *                  POLYLINE_E_ value. <br> */ <br> <br>STDMETHODIMP CPolyline::DataGet(PPOLYLINEDATA pplIn) <br>    { <br>    if (NULL==pplIn) <br>        return ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    *pplIn=m_pl; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * DataGet/SetMem eliminated:  no need with IDataObject. <br> * DataGetMem is somewhat like RenderNative below. <br> */ <br> <br> <br> <br>/* <br> * CPolyline::RenderNative <br> * <br> * Purpose: <br> *  Retrieves the Polyline's data in a global memory handle. <br> * <br> * Parameters: <br> *  phMem           HGLOBAL * in which to store the handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise a <br> *                  POLYLINE_E_ value. <br> */ <br> <br>STDMETHODIMP CPolyline::RenderNative(HGLOBAL *phMem) <br>    { <br>    HGLOBAL         hMem; <br>    PPOLYLINEDATA   ppl; <br>    HRESULT         hr=ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    if (NULL==phMem) <br>        return ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    hMem=GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE, CBPOLYLINEDATA); <br> <br>    if (NULL!=hMem) <br>        { <br>        ppl=(PPOLYLINEDATA)GlobalLock(hMem); <br>        hr=DataGet(ppl); <br> <br>        GlobalUnlock(hMem); <br> <br>        if (FAILED(hr)) <br>            { <br>            GlobalFree(hMem); <br>            hMem=NULL; <br>            } <br>        } <br> <br>    *phMem=hMem; <br>    return hr; <br>    } <br> <br> <br> <br> <br>/* <br> * CPolyline::RenderBitmap <br> * <br> * Purpose: <br> *  Creates a bitmap image of the current Polyline. <br> * <br> * Parameters: <br> *  phBmp           HBITMAP * in which to return the bitmap. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise a <br> *                  POLYLINE_E_ value. <br> */ <br> <br>STDMETHODIMP CPolyline::RenderBitmap(HBITMAP *phBmp) <br>    { <br>    HDC             hDC; <br>    HDC             hMemDC; <br>    HBITMAP         hBmp; <br>    RECT            rc; <br>    HGDIOBJ         hObj; <br> <br>    if (NULL==phBmp) <br>        return ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    //Render a bitmap the size of the current rectangle. <br>    hDC=GetDC(m_hWnd); <br>    hMemDC=CreateCompatibleDC(hDC); <br> <br>    GetClientRect(m_hWnd, &amp;rc); <br>    hBmp=CreateCompatibleBitmap(hDC, rc.right, rc.bottom); <br> <br>    if (NULL!=hBmp) <br>        { <br>        //Draw the POLYLINEDATA into the bitmap. <br>        hObj=SelectObject(hMemDC, hBmp); <br>        Draw(hMemDC, FALSE, TRUE); <br>        SelectObject(hMemDC, hObj); <br>        } <br> <br>    DeleteDC(hMemDC); <br>    ReleaseDC(m_hWnd, hDC); <br> <br>    *phBmp=hBmp; <br>    return NOERROR; <br>    } <br> <br> <br> <br>//RenderMetafile not necessary--now part of RenderMetafilePict. <br> <br> <br> <br>/* <br> * CPolyline::RenderMetafilePict <br> * <br> * Purpose: <br> *  Renders the current Polyline into a METAFILEPICT structure in <br> *  global memory. <br> * <br> * Parameters: <br> *  phMem           HGLOBAL * in which to return the <br> *                  METAFILEPICT. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise a <br> *                  POLYLINE_E_ value. <br> */ <br> <br>STDMETHODIMP CPolyline::RenderMetafilePict(HGLOBAL *phMem) <br>    { <br>    HGLOBAL         hMem; <br>    HMETAFILE       hMF; <br>    LPMETAFILEPICT  pMF; <br>    RECT            rc; <br>    HDC             hDC; <br> <br>    if (NULL==phMem) <br>        return ResultFromScode(POLYLINE_E_INVALIDPOINTER); <br> <br>    //Create a memory metafile and return its handle. <br>    hDC=(HDC)CreateMetaFile(NULL); <br> <br>    if (NULL==hDC) <br>        return ResultFromScode(STG_E_MEDIUMFULL); <br> <br>    SetMapMode(hDC, MM_ANISOTROPIC); <br>    GetClientRect(m_hWnd, &amp;rc); <br>    SetWindowOrgEx(hDC, 0, 0, NULL); <br>    SetWindowExtEx(hDC, rc.right, rc.bottom, NULL); <br> <br>    Draw(hDC, TRUE, TRUE); <br>    hMF=CloseMetaFile(hDC); <br> <br>    if (NULL==hMF) <br>        return ResultFromScode(STG_E_MEDIUMFULL); <br> <br>    //Allocate the METAFILEPICT structure. <br>    hMem=GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE <br>        , sizeof(METAFILEPICT)); <br> <br>    if (NULL==hMem) <br>        { <br>        DeleteMetaFile(hMF); <br>        return ResultFromScode(E_FAIL); <br>        } <br> <br>    /* <br>     * Global lock only fails in PMODE if the selector is invalid <br>     * (like it was discarded) or references a 0 length segment, <br>     * neither of which can happen here. <br>     */ <br>    pMF=(LPMETAFILEPICT)GlobalLock(hMem); <br> <br>    pMF-&gt;hMF=hMF; <br>    pMF-&gt;mm=MM_ANISOTROPIC; <br> <br>    //Insert the extents in MM_HIMETRIC units. <br>    GetClientRect(m_hWnd, &amp;rc); <br>    RectConvertMappings(&amp;rc, FALSE); <br>    pMF-&gt;xExt=rc.right; <br>    pMF-&gt;yExt=rc.bottom; <br> <br>    GlobalUnlock(hMem); <br> <br>    *phMem=hMem; <br>    return NOERROR; <br>    } <br> <br> <br>//End CHAPTER10MOD </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context600"></a>DATAOBJ.CPP</h2>
<pre><code>/* <br> * DATAOBJ.CPP <br> * Data Object Chapter 10 <br> * <br> * Implementation of CDataObject and CImpIDataObject that work <br> * in either an EXE or DLL. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "dataobj.h" <br> <br>extern HINSTANCE   g_hInst; <br> <br>DWORD              g_dwID=0; <br> <br>//Names of data sizes <br>static TCHAR * rgszSize[3]={TEXT("Small"), TEXT("Medium") <br>    , TEXT("Large")}; <br> <br> <br> <br>/* <br> * CDataObject::CDataObject <br> * CDataObject::~CDataObject <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of controlling unknown, if it exists. <br> *  pfnDestroy      PFNDESTROYED to call when object is destroyed. <br> *  iSize           UINT specifying the size of the data set to use. <br> */ <br> <br>CDataObject::CDataObject(LPUNKNOWN pUnkOuter <br>    , PFNDESTROYED pfnDestroy, UINT iSize) <br>    { <br>    UINT        i; <br> <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br>    m_iSize=iSize; <br> <br>    m_hWndAdvise=NULL; <br>    m_dwAdvFlags=ADVF_NODATA; <br> <br>    //NULL any contained interfaces initially. <br>    m_pImpIDataObject=NULL; <br>    m_pIDataAdviseHolder=NULL; <br> <br>    //Initilize the FORMATETCs arrays we use for EnumFormatEtc <br>    m_cfeGet=CFORMATETCGET; <br> <br>    SETDefFormatEtc(m_rgfeGet[0], CF_METAFILEPICT, TYMED_MFPICT); <br>    SETDefFormatEtc(m_rgfeGet[1], CF_BITMAP, TYMED_GDI); <br>    SETDefFormatEtc(m_rgfeGet[2], CF_TEXT, TYMED_HGLOBAL); <br> <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        m_rghBmp[i]=NULL; <br> <br>    return; <br>    } <br> <br> <br>CDataObject::~CDataObject(void) <br>    { <br>    UINT        i; <br> <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        { <br>        if (NULL!=m_rghBmp[i]) <br>            DeleteObject(m_rghBmp[i]); <br>        } <br> <br>    ReleaseInterface(m_pIDataAdviseHolder); <br>    DeleteInterfaceImp(m_pImpIDataObject); <br> <br>    if (NULL!=m_hWndAdvise) <br>        DestroyWindow(m_hWndAdvise); <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CDataObject::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CDataObject that's prone to <br> *  failure that we also use internally before exposing the <br> *  object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CDataObject::Init(void) <br>    { <br>    LPUNKNOWN       pIUnknown=this; <br>    UINT            i; <br>    TCHAR           szTemp[80]; <br>    UINT            cy; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pIUnknown=m_pUnkOuter; <br> <br>    //Allocate contained interfaces. <br>    m_pImpIDataObject=new CImpIDataObject(this, pIUnknown); <br> <br>    if (NULL==m_pImpIDataObject) <br>        return FALSE; <br> <br>    for (i=0; i &lt; DOSIZE_CSIZES; i++) <br>        { <br>        m_rghBmp[i]=LoadBitmap(g_hInst, MAKEINTRESOURCE(i+IDB_MIN)); <br> <br>        if (NULL==m_rghBmp[i]) <br>            return FALSE; <br>        } <br> <br> <br>    /* <br>     * Register the Advise window class first time through <br>     * (g_dwID==0) <br>     */ <br> <br>    if (0L==g_dwID) <br>        { <br>        WNDCLASS    wc; <br> <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = AdvisorWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = sizeof(PCDataObject); <br>        wc.hInstance      = g_hInst; <br>        wc.hIcon          = LoadIcon(g_hInst <br>            , MAKEINTRESOURCE(IDR_ADVISORICON)); <br>        wc.hCursor        = NULL; <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = MAKEINTRESOURCE(IDR_MENU); <br>        wc.lpszClassName  = TEXT("Advisor"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    /* <br>     * Create an advise window with a unique caption: <br>     * "&lt;size&gt; &lt;module&gt; Advisor #xx" where &lt;size&gt; is Small, <br>     * Medium, or Large, &lt;module&gt; is EXE or DLL, and xx is <br>     * counted globally every time a CDataObject is created. <br>     */ <br> <br>    g_dwID++; <br>   #ifdef EXEDATAOBJECT <br>    wsprintf(szTemp, TEXT("%s EXE Advisor #%lu") <br>        , (LPTSTR)rgszSize[m_iSize], g_dwID); <br>   #else <br>    wsprintf(szTemp, TEXT("%s DLL Advisor #%lu") <br>        , (LPTSTR)rgszSize[m_iSize], g_dwID); <br>   #endif <br> <br>    cy=(GetSystemMetrics(SM_CYBORDER)*2)+GetSystemMetrics(SM_CYMENU) <br>        + GetSystemMetrics(SM_CYCAPTION); <br> <br>    m_hWndAdvise=CreateWindow(TEXT("Advisor"), szTemp <br>        , WS_OVERLAPPED | WS_CAPTION | WS_MINIMIZEBOX | WS_BORDER <br>        | WS_VISIBLE, 400, 35+(g_dwID*(cy+30)), 200, cy <br>        , HWND_DESKTOP, NULL, g_hInst, this); <br> <br>    if (NULL==m_hWndAdvise) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDataObject::QueryInterface <br> * CDataObject::AddRef <br> * CDataObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDataObject object. <br> */ <br> <br>STDMETHODIMP CDataObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IDataObject==riid) <br>        *ppv=m_pImpIDataObject; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObject::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDataObject::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * AdvisorWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure. <br> */ <br> <br>LRESULT APIENTRY AdvisorWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PCDataObject    pDO; <br>    DWORD           i; <br>    DWORD           iAdvise; <br>    DWORD           dwTime; <br>    DWORD           dwAvg; <br>    TCHAR           szTime[128]; <br>    TCHAR           szTitle[80]; <br>    HCURSOR         hCur, hCurT; <br> <br>    pDO=(PCDataObject)GetWindowLong(hWnd, 0); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pDO=(PCDataObject)(((LPCREATESTRUCT)lParam) <br>                -&gt;lpCreateParams); <br>            SetWindowLong(hWnd, 0, (LONG)pDO); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>        case WM_CLOSE: <br>            //Forbid task manager from closing us. <br>            return 0L; <br> <br>        case WM_COMMAND: <br>            if (NULL==pDO-&gt;m_pIDataAdviseHolder) <br>                break; <br> <br>            //Send IAdviseSink::OnDataChange many times. <br>            i=(DWORD)(LOWORD(wParam)-IDM_ADVISEITERATIONSMIN+1); <br>            iAdvise=(i*i)*16; <br> <br>            hCur=LoadCursor(NULL, MAKEINTRESOURCE(IDC_WAIT)); <br>            hCurT=SetCursor(hCur); <br>            ShowCursor(TRUE); <br> <br>            dwTime=GetTickCount(); <br> <br>            i=0; <br>            while (TRUE) <br>                { <br>               #ifdef EXEDATAOBJECT <br>               #ifndef WIN32 <br>                MSG     msg; <br> <br>                if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>                    { <br>                    TranslateMessage(&amp;msg); <br>                    DispatchMessage(&amp;msg); <br>                    } <br>                else <br>               #endif <br>               #endif <br>                    { <br>                    pDO-&gt;m_pIDataAdviseHolder-&gt;SendOnDataChange <br>                        (pDO-&gt;m_pImpIDataObject, 0, ADVF_NODATA); <br> <br>                    if (++i &gt;= iAdvise) <br>                        break; <br>                    } <br>                } <br> <br>            dwTime=GetTickCount()-dwTime; <br>            dwAvg=dwTime/iAdvise; <br> <br>            SetCursor(hCurT); <br>            ShowCursor(FALSE); <br> <br>            wsprintf(szTime <br>                , TEXT("Total=%lu ms\n\rAverage=%lu ms") <br>                , dwTime, dwAvg); <br> <br>            GetWindowText(hWnd, szTitle, sizeof(szTitle)); <br>            MessageBox(hWnd, szTime, szTitle, MB_OK); <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

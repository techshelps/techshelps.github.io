<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADVSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context598"></a>IADVSINK.CPP</h2>
<pre><code>/* <br> * IADVSINK.CPP <br> * Data Object User Chapter 10 <br> * <br> * Implementation of an object with IAdviseSink. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "datauser.h" <br> <br> <br>/* <br> * CAdviseSink::CAdviseSink <br> * CAdviseSink::~CAdviseSink <br> * <br> * Parameters (Constructor): <br> *  pApp            PAPP to the application <br> * <br> */ <br> <br>CAdviseSink::CAdviseSink(PAPP pApp) <br>    { <br>    m_cRef=0; <br>    m_pApp=pApp; <br>    return; <br>    } <br> <br>CAdviseSink::~CAdviseSink(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CAdviseSink::QueryInterface <br> * CAdviseSink::AddRef <br> * CAdviseSink::Release <br> * <br> * Purpose: <br> *  IUnknown members for CAdviseSink object. <br> */ <br> <br>STDMETHODIMP CAdviseSink::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IAdviseSink==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CAdviseSink::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CAdviseSink::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>/* <br> * CAdviseSink::OnDataChange <br> * <br> * Purpose: <br> *  Notifes the advise sink that data changed in a data object. <br> *  On this message you may request a new data rendering and update <br> *  your displays as necessary.  Any data sent to this function is <br> *  owned by the caller, not by this advise sink. <br> * <br> *  All Advise Sink methods are asynchronous and therefore we <br> *  should attempt no synchronous calls from within them to an EXE <br> *  object.  If we do, we'll get RPC_E_CALLREJECTED as shown below. <br> * <br> * Parameters: <br> *  pFEIn           LPFORMATETC describing format that changed <br> *  pSTM            LPSTGMEDIUM providing the medium in which the <br> *                  data is provided. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br> <br>STDMETHODIMP_(void) CAdviseSink::OnDataChange(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    BOOL        fUsable=TRUE; <br>    UINT        cf; <br>    STGMEDIUM   stm; <br> <br>    /* <br>     * We first check that the changed data is, in fact, a format <br>     * we're interested in, either CF_TEXT, CF_BITMAP, or <br>     * CF_METAFILEPICT, then only in the aspects we want.  We check <br>     * if pSTM-&gt;tymed is TYMED_NULL or something else.  If NULL, we <br>     * just exit so the data object can time ADVF_NODATA trans- <br>     * actions.  Otherwise we verify that the data is useful and <br>     * repaint. If there is data in pSTM we are responsible for it. <br>     */ <br> <br>    //Ignore the m_fGetData flag for EXE objects (we can't GetData) <br>    if (!m_pApp-&gt;m_fGetData &amp;&amp; !m_pApp-&gt;m_fEXE) <br>        return; <br> <br>    //See if we're interested in the format and aspect that changed <br>    cf=pFE-&gt;cfFormat; <br> <br>    if ((CF_TEXT!=cf &amp;&amp; CF_BITMAP!=cf &amp;&amp; CF_METAFILEPICT!=cf) <br>        || !(DVASPECT_CONTENT &amp; pFE-&gt;dwAspect)) <br>        return; <br> <br>    //Check the medium if we got data <br>    switch (cf) <br>        { <br>        case CF_TEXT: <br>            fUsable=(BOOL)(TYMED_HGLOBAL &amp; pFE-&gt;tymed); <br>            break; <br> <br>        case CF_BITMAP: <br>            fUsable=(BOOL)(TYMED_GDI &amp; pFE-&gt;tymed); <br>            break; <br> <br>        case CF_METAFILEPICT: <br>            fUsable=(BOOL)(TYMED_MFPICT &amp; pFE-&gt;tymed); <br>            break; <br> <br>        default: <br>            break; <br>        } <br> <br>    if (!fUsable) <br>        return; <br> <br>    if (NULL==m_pApp-&gt;m_pIDataObject) <br>        return; <br> <br>    /* <br>     * When dealing with EXE objects, invalidate ourselves <br>     * after setting TYMED_NULL in our STGMEDIUM that causes <br>     * CAppVars::Paint to request new data.  We cannot call <br>     * GetData in here because this is an async call when we're <br>     * dealing with an EXE. <br>     */ <br>    if (m_pApp-&gt;m_fEXE) <br>        { <br>        ReleaseStgMedium(&amp;(m_pApp-&gt;m_stm)); <br>        m_pApp-&gt;m_cf=cf; <br>        m_pApp-&gt;m_stm.tymed=TYMED_NULL; <br> <br>        InvalidateRect(m_pApp-&gt;m_hWnd, NULL, TRUE); <br>        return; <br>        } <br> <br>    if (FAILED(m_pApp-&gt;m_pIDataObject-&gt;GetData(pFE, &amp;stm))) <br>        return; <br> <br>    //Get rid of old data and update. <br>    ReleaseStgMedium(&amp;(m_pApp-&gt;m_stm)); <br> <br>    m_pApp-&gt;m_cf=cf; <br>    m_pApp-&gt;m_stm=stm; <br> <br>    InvalidateRect(m_pApp-&gt;m_hWnd, NULL, TRUE); <br> <br>    if (m_pApp-&gt;m_fRepaint) <br>        UpdateWindow(m_pApp-&gt;m_hWnd); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CAdviseSink::OnViewChange <br> * CAdviseSink::OnRename <br> * CAdviseSink::OnSave <br> * CAdviseSink::OnClose <br> * <br> * Unimplemented members <br> */ <br> <br>STDMETHODIMP_(void) CAdviseSink::OnViewChange(DWORD dwAspect <br>    , LONG lindex) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP_(void) CAdviseSink::OnRename(LPMONIKER pmk) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP_(void) CAdviseSink::OnSave(void) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP_(void) CAdviseSink::OnClose(void) <br>    { <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

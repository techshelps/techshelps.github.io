<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECTS.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context584"></a>OBJECTS.H</h2>
<pre><code>/* <br> * OBJECTS.H <br> * File and Item Objects for Link Source, Chapter 9 <br> * <br> * Classes to define the file and item objects supplied by <br> * this server as well as their interfaces. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Right Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _OBJECTS_H_ <br>#define _OBJECTS_H_ <br> <br>#define CHAPTER9 <br>#include &lt;inole.h&gt; <br>#include &lt;idescrip.h&gt; <br> <br>//Shared implementations <br>class CImpIOleItemContainer; <br>typedef CImpIOleItemContainer *PCImpIOleItemContainer; <br> <br>class CImpIDescription; <br>typedef CImpIDescription *PCImpIDescription; <br> <br> <br>//FILEOBJ.CPP <br> <br>class CImpIPersistFile; <br>typedef CImpIPersistFile *PCImpIPersistFile; <br> <br> <br>class CFileObject : public IUnknown <br>    { <br>    friend class CImpIPersistFile; <br>    friend class CImpIOleItemContainer; <br>    friend class CImpIDescription; <br> <br>    protected: <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling unknown <br>        PFNDESTROYED    m_pfnDestroy;   //To call on closure <br> <br>        CLSID           m_clsID;        //Object identity <br>        OLECHAR         m_szFile[512];  //Current filename <br>        IStorage       *m_pIStorage;    //Opened file <br>        IMoniker       *m_pmk;          //Our name <br>        DWORD           m_dwRegROT;     //ROT registration <br> <br>        //Interfaces <br>        PCImpIPersistFile         m_pImpIPersistFile; <br>        PCImpIOleItemContainer    m_pImpIOleItemContainer; <br>        PCImpIDescription         m_pImpIDescription; <br> <br>    public: <br>        CFileObject(LPUNKNOWN, PFNDESTROYED); <br>        ~CFileObject(void); <br> <br>        BOOL Init(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CFileObject *PCFileObject; <br> <br> <br>class CImpIPersistFile : public IPersistFile <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        PCFileObject    m_pObj;      //Backpointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIPersistFile(PCFileObject, LPUNKNOWN); <br>        ~CImpIPersistFile(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP Load(LPCOLESTR, DWORD); <br>        STDMETHODIMP Save(LPCOLESTR, BOOL); <br>        STDMETHODIMP SaveCompleted(LPCOLESTR); <br>        STDMETHODIMP GetCurFile(LPOLESTR *); <br>    }; <br> <br> <br> <br>//CONTITEM.CPP <br> <br>/* <br> * Implementation of an item object that itself contains other <br> * items, thus it implements IOleItemContainer.  IDescription is <br> * added only for reason of this sample. <br> */ <br> <br> <br>class CContainerItem : public IUnknown <br>    { <br>    friend class CImpIOleItemContainer; <br>    friend class CImpIDescription; <br> <br>    protected: <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkParent;   //CFileObject's pointer <br>        PFNDESTROYED    m_pfnDestroy;   //To call on closure <br>        IStorage       *m_pIStorage;    //Our storage <br>        IMoniker       *m_pmk;          //Our name <br>        DWORD           m_dwRegROT;     //ROT Registration <br> <br>        //Interfaces <br>        PCImpIOleItemContainer    m_pImpIOleItemContainer; <br>        PCImpIDescription         m_pImpIDescription; <br> <br>    public: <br>        CContainerItem(LPUNKNOWN, PFNDESTROYED); <br>        ~CContainerItem(void); <br> <br>        BOOL Init(IMoniker *, IBindCtx *, LPOLESTR, IStorage *); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CContainerItem *PCContainerItem; <br> <br> <br> <br>//SIMPITEM.CPP <br> <br>/* <br> * Implementation of a simple item object with only IDescription. <br> */ <br> <br>class CSimpleItem : public IUnknown <br>    { <br>    friend class CImpIDescription; <br> <br>    protected: <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkParent;   //CContainerItems's pointer <br>        PFNDESTROYED    m_pfnDestroy;   //To call on closure <br>        IStorage       *m_pIStorage;    //Our storage <br>        IMoniker       *m_pmk;          //Our name <br>        DWORD           m_dwRegROT;     //ROT Registration <br> <br>        //Interfaces <br>        PCImpIDescription         m_pImpIDescription; <br> <br>    public: <br>        CSimpleItem(LPUNKNOWN, PFNDESTROYED); <br>        ~CSimpleItem(void); <br> <br>        BOOL Init(IMoniker *, IBindCtx *, LPOLESTR, IStorage *); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CSimpleItem *PCSimpleItem; <br> <br> <br> <br> <br>//IOLECONT.CPP <br>/* <br> * IOleItemContainer implementation that is shared between <br> * CFileObject and CContainerItem.  The flag to the constructor <br> * indicates which object exposes any given instantiation. <br> */ <br> <br>class CImpIOleItemContainer : public IOleItemContainer <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        LPUNKNOWN           m_pUnkOuter; <br> <br>        BOOL                m_fFileObj; <br>        PCFileObject        m_pObjFile; <br>        PCContainerItem     m_pObjCont; <br> <br>    public: <br>        CImpIOleItemContainer(LPVOID, LPUNKNOWN, BOOL); <br>        ~CImpIOleItemContainer(void); <br> <br>        HRESULT GetRunning(LPOLESTR, IBindCtx *, REFIID, void ** <br>            , BOOL); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP ParseDisplayName(LPBC, LPOLESTR, ULONG * <br>                         , LPMONIKER *); <br>        STDMETHODIMP EnumObjects(DWORD, LPENUMUNKNOWN *); <br>        STDMETHODIMP LockContainer(BOOL); <br>        STDMETHODIMP GetObject(LPOLESTR, DWORD, LPBINDCTX, REFIID <br>                         , PPVOID); <br>        STDMETHODIMP GetObjectStorage(LPOLESTR, LPBINDCTX, REFIID <br>                         , PPVOID); <br>        STDMETHODIMP IsRunning(LPOLESTR); <br>    }; <br> <br> <br>#define SZOPENSTORAGE  OLETEXT("OpenStorage") <br> <br> <br>//IDESCRIP.CPP <br>/* <br> * IDescription implementation that is shared between <br> * CFileObject, CContainerItem, and CSimpleItem.  The <br> * IStorage argument to the constructor is all that this <br> * implementation needs, so there's no backpointer. <br> */ <br> <br>class CImpIDescription : public IDescription <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        LPUNKNOWN           m_pUnkOuter; <br>        IStorage           *m_pIStorage; <br> <br>    public: <br>        CImpIDescription(LPUNKNOWN); <br>        ~CImpIDescription(void); <br> <br>        void SetStorage(IStorage *); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetText(LPOLESTR, ULONG); <br>    }; <br> <br> <br>#endif //_OBJECTS_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

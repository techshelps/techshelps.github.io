<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LINKSRC.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context582"></a>LINKSRC.CPP</h2>
<pre><code>/* <br> * LINKSRC.CPP <br> * Link Source Server Chapter 9 <br> * <br> * Server of various objects that can be named with monikers. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "linksrc.h" <br> <br> <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br>BOOL        g_fUser=FALSE; <br> <br>//Make window handle global so other code can cause a shutdown <br>HWND        g_hWnd=NULL; <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    MSG         msg; <br>    PAPP        pApp; <br> <br>    SETMESSAGEQUEUE; <br> <br>    pApp=new CApp(hInst, hInstPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pApp) <br>        return -1; <br> <br>    if (pApp-&gt;Init()) <br>        { <br>        while (GetMessage(&amp;msg, NULL, 0,0 )) <br>            { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>            } <br>        } <br> <br>    delete pApp; <br>    return msg.wParam; <br>    } <br> <br> <br> <br>/* <br> * KoalaWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure. <br> */ <br> <br>LRESULT APIENTRY LinkSrcWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PAPP        pApp; <br> <br>    pApp=(PAPP)GetWindowLong(hWnd, LINKSRCWL_STRUCTURE); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pApp=(PAPP)(((LPCREATESTRUCT)lParam)-&gt;lpCreateParams); <br>            SetWindowLong(hWnd, LINKSRCWL_STRUCTURE, (LONG)pApp); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) <br>                { <br>                case IDM_FILECREATEGOOP: <br>                    pApp-&gt;CreateSampleFile(TEXT("goop.lks")); <br>                    break; <br> <br>                case IDM_FILEEXIT: <br>                    PostMessage(hWnd, WM_CLOSE, 0, 0L); <br>                    break; <br> <br>                default: <br>                    break; <br>                } <br> <br>            break; <br> <br>        case WM_CLOSE: <br>            //Don't close with object's active <br>            if (0==g_cObj &amp;&amp; 0==g_cLock) <br>                return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>            break; <br> <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the LinkSrc object to call when it gets destroyed. <br> *  We destroy the main window if the proper conditions are met <br> *  for shutdown. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br> <br>    /* <br>     * No more objects and no locks, and user is not in <br>     * control (CApp::m_fEmbedding), then shut down. <br>     */ <br>    if (0L==g_cObj &amp;&amp; 0L==g_cLock &amp;&amp; IsWindow(g_hWnd) <br>        &amp;&amp; !g_fUser) <br>        PostMessage(g_hWnd, WM_CLOSE, 0, 0L); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::CApp <br> * CApp::~CApp <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the Application from WinMain <br> *  hInstPrev       HINSTANCE of a previous instance from WinMain <br> *  pszCmdLine      LPSTR of the command line. <br> *  nCmdShow        UINT specifying how to show the app window, <br> *                  from WinMain. <br> */ <br> <br>CApp::CApp(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, UINT nCmdShow) <br>    { <br>    //Initialize WinMain parameter holders. <br>    m_hInst     =hInst; <br>    m_hInstPrev =hInstPrev; <br>    m_pszCmdLine=pszCmdLine; <br>    m_nCmdShow  =nCmdShow; <br> <br>    m_hWnd=NULL; <br>    m_dwRegCO=0; <br>    m_pIClassFactory=NULL; <br>    m_fInitialized=FALSE; <br> <br>    /* <br>     * We can run stand-alone or at OLE's request, but we <br>     * remain hidden if run from OLE. <br>     */ <br>    m_fEmbedding=TRUE; <br> <br>    return; <br>    } <br> <br> <br>CApp::~CApp(void) <br>    { <br>    //Opposite of CoRegisterClassObject; class factory ref is now 1 <br>    if (0L!=m_dwRegCO) <br>        CoRevokeClassObject(m_dwRegCO); <br> <br>    //The last Release, which frees the class factory. <br>    if (NULL!=m_pIClassFactory) <br>        m_pIClassFactory-&gt;Release(); <br> <br>    if (m_fInitialized) <br>        CoUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::Init <br> * <br> * Purpose: <br> *  Initializes an CApp object by registering window classes, <br> *  creating the main window, and doing anything else prone to <br> *  failure.  If this function fails the caller should guarantee <br> *  that the destructor is called. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::Init(void) <br>    { <br>    WNDCLASS    wc; <br>    HRESULT     hr; <br> <br>    CHECKVER_COM; <br> <br>    //Check if we're run stand-alone <br>    if (lstrcmpiA(m_pszCmdLine, "-Embedding") <br>        &amp;&amp; lstrcmpiA(m_pszCmdLine, "/Embedding")) <br>        { <br>        m_fEmbedding=FALSE; <br>        g_fUser=TRUE; <br>        } <br> <br>    //Call CoInitialize so we can call other Co* functions <br>    if (FAILED(CoInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    if (!m_hInstPrev) <br>        { <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = LinkSrcWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = CBWNDEXTRA; <br>        wc.hInstance      = m_hInst; <br>        wc.hIcon          = LoadIcon(m_hInst, TEXT("Icon")); <br>        wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = MAKEINTRESOURCE(IDR_MENU); <br>        wc.lpszClassName  = TEXT("LinkSrc"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    m_hWnd=CreateWindow(TEXT("LinkSrc"), TEXT("Link Source") <br>        , WS_OVERLAPPEDWINDOW, 450, 35, 350, 250 <br>        , NULL, NULL, m_hInst, this); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    //Don't show the window outside of embedding <br>    if (!m_fEmbedding) <br>        { <br>        ShowWindow(m_hWnd, SW_SHOW); <br>        UpdateWindow(m_hWnd); <br>        } <br> <br>    g_hWnd=m_hWnd; <br> <br>    /* <br>     * We only server file objects through a CLSID.  Other <br>     * items are referenced through the File object. <br>     */ <br>    m_pIClassFactory=new CFileObjectFactory(); <br> <br>    if (NULL==m_pIClassFactory) <br>        return FALSE; <br> <br>    //Since we hold on to this, we should AddRef it. <br>    m_pIClassFactory-&gt;AddRef(); <br> <br>    hr=CoRegisterClassObject(CLSID_LinkedFile, m_pIClassFactory <br>        , CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE, &amp;m_dwRegCO); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CApp::CreateSampleFile <br> * <br> * Purpose: <br> *  Creates a file with the structure we can use in binding <br> *  monikers. <br> * <br> * Parameters: <br> *  pszFile         LPTSTR to the file name to create. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CApp::CreateSampleFile(LPTSTR pszFile) <br>    { <br>    HRESULT     hr; <br>    IStorage   *pIStorage; <br> <br>    hr=StgCreateDocfile(pszFile, STGM_DIRECT | STGM_READWRITE <br>        | STGM_CREATE | STGM_SHARE_EXCLUSIVE, 0, &amp;pIStorage); <br> <br>    if (SUCCEEDED(hr)) <br>        { <br>        UINT        i; <br>        TCHAR       szTemp[40]; <br>        TCHAR       szDesc[256]; <br> <br>        WriteDescription(pIStorage <br>            , TEXT("This is a sample compound file from LinkSource that demonstrates binding to a file moniker.")); <br> <br>        for (i=0; i &lt; 4; i++) <br>            { <br>            wsprintf(szTemp, TEXT("Object %d"), i); <br>            wsprintf(szDesc <br>                , TEXT("This is the first-level item named %s in the file.") <br>                , szTemp); <br> <br>            hr=CreateStore(pIStorage, szTemp, szDesc, 5); <br> <br>            if (FAILED(hr)) <br>                break; <br>            } <br>        } <br> <br>    pIStorage-&gt;SetClass(CLSID_LinkedFile); <br>    pIStorage-&gt;Release(); <br> <br>    if (FAILED(hr)) <br>        { <br>        MessageBox(m_hWnd, TEXT("File creation failed.") <br>            , TEXT("Link Source"), MB_OK); <br>        } <br>    else <br>        { <br>        MessageBox(m_hWnd, TEXT("File created successfully.") <br>            , TEXT("Link Source"), MB_OK); <br>        } <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CApp::CreateStore <br> * <br> * Purpose: <br> *  Creates a sub-storage below pIStorage with the given name and <br> *  writes a description stream using the stringtable string idsDesc. <br> * <br> * Parameters: <br> *  pIStorage       IStorage * in which to create the storage. <br> *  pszName         LPTSTR naming the storage to create. <br> *  pszDesc         LPTSTR holding the description. <br> *  cSubs           UINT number of sub-storages to create in this one <br> * <br> * Return Value: <br> *  HRESULT         Result of the operation. <br> */ <br> <br>HRESULT CApp::CreateStore(IStorage *pIStorage, LPTSTR pszName <br>    , LPTSTR pszDesc, UINT cSubs) <br>    { <br>    HRESULT     hr; <br>    IStorage   *pSub; <br>    TCHAR       szTemp[40]; <br>    TCHAR       szDesc[256]; <br>    UINT        i; <br> <br>   #ifdef WIN32ANSI <br>    OLECHAR     szUNI[40]; <br>    MultiByteToWideChar(CP_ACP, 0, pszName, -1, szUNI, 40); <br> <br>    hr=pIStorage-&gt;CreateStorage(szUNI, STGM_DIRECT <br>        | STGM_READWRITE | STGM_SHARE_EXCLUSIVE, 0, 0, &amp;pSub); <br>   #else <br>    hr=pIStorage-&gt;CreateStorage(pszName, STGM_DIRECT <br>        | STGM_READWRITE | STGM_SHARE_EXCLUSIVE, 0, 0, &amp;pSub); <br>   #endif <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=WriteDescription(pSub, pszDesc); <br> <br>    if (cSubs &gt; 255) <br>        cSubs=255; <br> <br>    /* <br>     * If cSubs is zero we'll pass to the return statement <br>     * which allows recursion in the loop below for 2nd level storages. <br>     */ <br>    for (i=0; i &lt; cSubs; i++) <br>        { <br>        wsprintf(szTemp, TEXT("Sub-Object %d"), i); <br>        wsprintf(szDesc <br>            , TEXT("This is the second-level item named %s inside the item named %s in the file.") <br>            , szTemp, pszName); <br> <br>        hr=CreateStore(pSub, szTemp, szDesc, 0); <br> <br>        if (FAILED(hr)) <br>            break; <br>        } <br> <br>    pSub-&gt;Release(); <br>    return hr; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::WriteDescription <br> * <br> * Purpose: <br> *  Creates a stream with the name SZDESCRIPTION in the given <br> *  storage and writes into that stream the string identified <br> *  by idsDesc that exists in the stringtable. <br> * <br> * Parameters: <br> *  pIStorage       IStorage * in which to create the stream. <br> *  pszDesc         LPTSTR describing the storage. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an error code. <br> */ <br> <br>HRESULT CApp::WriteDescription(IStorage *pIStorage, LPTSTR pszDesc) <br>    { <br>    HRESULT     hr; <br>    IStream    *pIStream; <br> <br>    hr=pIStorage-&gt;CreateStream(SZDESCRIPTION, STGM_DIRECT <br>        | STGM_READWRITE | STGM_SHARE_EXCLUSIVE, 0, 0, &amp;pIStream); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=pIStream-&gt;Write(pszDesc <br>        , (lstrlen(pszDesc)+1)*sizeof(TCHAR), NULL); <br>    pIStream-&gt;Release(); <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFileObjectFactory::CFileObjectFactory <br> * CFileObjectFactory::~CFileObjectFactory <br> * CFileObjectFactory::QueryInterface <br> * CFileObjectFactory::AddRef <br> * CFileObjectFactory::Release <br> * <br> * Basic class factory members <br> */ <br> <br>CFileObjectFactory::CFileObjectFactory(void) <br>    { <br>    m_cRef=0L; <br>    return; <br>    } <br> <br>CFileObjectFactory::~CFileObjectFactory(void) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP CFileObjectFactory::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IClassFactory==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFileObjectFactory::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFileObjectFactory::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CFileObjectFactory::CreateInstance <br> * <br> * Purpose: <br> *  Instantiates a LinkSrc object returning an interface pointer. <br> * <br> * Parameters: <br> *  pUnkOuter       LPUNKNOWN to the controlling IUnknown if we are <br> *                  being used in an aggregation. <br> *  riid            REFIID identifying the interface the caller <br> *                  desires to have for the new object. <br> *  ppvObj          PPVOID in which to store the desired <br> *                  interface pointer for the new object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, otherwise E_NOINTERFACE <br> *                  if we cannot support the requested interface. <br> */ <br> <br>STDMETHODIMP CFileObjectFactory::CreateInstance(LPUNKNOWN pUnkOuter <br>    , REFIID riid, PPVOID ppvObj) <br>    { <br>    PCFileObject        pObj; <br>    HRESULT             hr; <br> <br>    *ppvObj=NULL; <br>    hr=ResultFromScode(E_OUTOFMEMORY); <br> <br>    if (NULL!=pUnkOuter &amp;&amp; IID_IUnknown!=riid) <br>        return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>    pObj=new CFileObject(pUnkOuter, ObjectDestroyed); <br> <br>    if (NULL==pObj) <br>        { <br>        //This starts shutdown if there are no other objects. <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        return hr; <br>        } <br> <br>    if (pObj-&gt;Init()) <br>        hr=pObj-&gt;QueryInterface(riid, ppvObj); <br> <br>    g_cObj++; <br> <br>    if (FAILED(hr)) <br>        { <br>        delete pObj; <br>        ObjectDestroyed();  //Handle shutdown cases. <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CFileObjectFactory::LockServer <br> * <br> * Purpose: <br> *  Increments or decrements the lock count of the serving <br> *  IClassFactory object.  When the number of locks goes to <br> *  zero and the number of objects is zero, we shut down the <br> *  application. <br> * <br> * Parameters: <br> *  fLock           BOOL specifying whether to increment or <br> *                  decrement the lock count. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR always. <br> */ <br> <br>STDMETHODIMP CFileObjectFactory::LockServer(BOOL fLock) <br>    { <br>    if (fLock) <br>        g_cLock++; <br>    else <br>        { <br>        g_cLock--; <br>        g_cObj++; <br>        ObjectDestroyed(); <br>        } <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPITEM.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context586"></a>SIMPITEM.CPP</h2>
<pre><code>/* <br> * SIMPITEM.CPP <br> * Simple Item Object for Link Source, Chapter 9 <br> * <br> * Implementation of an item object with nothing more <br> * than the shared IDescription in IDESCRIP.CPP. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "linksrc.h" <br> <br>#ifdef WIN32ANSI <br>/* <br> * This is to turn off the mapping to ANSI wrapper APIs because <br> * we're actually using wide char strings under Win32 all the time <br> * in parts of this code. <br> */ <br>#undef CreateItemMoniker <br>#define CreateItemMoniker CreateItemMoniker <br> <br>#endif <br> <br> <br>/* <br> * CSimpleItem::CSimpleItem <br> * CSimpleItem::~CSimpleItem <br> * <br> * Parameters (Constructor): <br> *  pUnkParent      LPUNKNOWN to the parent in which this <br> *                  item lives <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CSimpleItem::CSimpleItem(LPUNKNOWN pUnkParent <br>    , PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br> <br>    //This keeps the parent storage open as well <br>    m_pUnkParent=pUnkParent; <br>    pUnkParent-&gt;AddRef(); <br> <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_pIStorage=NULL; <br>    m_pmk=NULL; <br>    m_dwRegROT=0; <br> <br>    m_pImpIDescription=NULL; <br>    return; <br>    } <br> <br>CSimpleItem::~CSimpleItem(void) <br>    { <br>    //Remove us from the running object table <br>    if (0!=m_dwRegROT) <br>        { <br>        IRunningObjectTable    *pROT; <br> <br>        if (SUCCEEDED(GetRunningObjectTable(0, &amp;pROT))) <br>            { <br>            pROT-&gt;Revoke(m_dwRegROT); <br>            pROT-&gt;Release(); <br>            } <br>        } <br> <br>    ReleaseInterface(m_pmk); <br>    ReleaseInterface(m_pIStorage); <br>    DeleteInterfaceImp(m_pImpIDescription); <br> <br>    ReleaseInterface(m_pUnkParent); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CSimpleItem::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CSimpleItem that's prone to <br> *  failure that we also use internally before exposing the object <br> *  outside. <br> * <br> * Parameters: <br> *  pmkLeft         IMoniker * of our containing object. <br> *  pbc             IBindCtx * to use to register ourselves <br> *                  as running. <br> *  pszItem         LPOLESTR naming this object. <br> *  pIStorage       IStorage * to our information. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CSimpleItem::Init(IMoniker *pmkLeft, IBindCtx *pbc <br>    , LPOLESTR pszItem, IStorage *pIStorage) <br>    { <br>    OLECHAR     szDelim[]=OLETEXT("!"); <br>    HRESULT     hr=ResultFromScode(S_FALSE); <br>    IMoniker   *pmkItem; <br> <br>    m_pImpIDescription=new CImpIDescription(this); <br> <br>    if (NULL==m_pImpIDescription) <br>        return FALSE; <br> <br>    m_pIStorage=pIStorage; <br>    m_pImpIDescription-&gt;SetStorage(m_pIStorage); <br> <br> <br>    /* <br>     * Create an item moniker for ourselves and register as <br>     * running.  Failure here is not critical. <br>     */ <br>    if (FAILED(CreateItemMoniker(szDelim, pszItem, &amp;pmkItem))) <br>        return TRUE; <br> <br>    //Create a composite for ourselves <br>    if (SUCCEEDED(pmkLeft-&gt;ComposeWith(pmkItem, FALSE, &amp;m_pmk))) <br>        { <br>        IRunningObjectTable *pROT; <br> <br>        if (SUCCEEDED(pbc-&gt;GetRunningObjectTable(&amp;pROT))) <br>            { <br>            pROT-&gt;Register(0, this, m_pmk, &amp;m_dwRegROT); <br>            pROT-&gt;Release(); <br>            } <br>        } <br> <br>    pmkItem-&gt;Release(); <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CSimpleItem::QueryInterface <br> * CSimpleItem::AddRef <br> * CSimpleItem::Release <br> * <br> * Purpose: <br> *  IUnknown members for CSimpleItem object. <br> */ <br> <br>STDMETHODIMP CSimpleItem::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IDescription==riid) <br>        *ppv=m_pImpIDescription; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CSimpleItem::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CSimpleItem::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILEOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context579"></a>FILEOBJ.CPP</h2>
<pre><code>/* <br> * FILEOBJ.CPP <br> * File Object for Link Source, Chapter 9 <br> * <br> * Implementation of a "file" object named with a file moniker, <br> * which implements IPersistFile, IOleItemContainer, and <br> * IDescription.  The latter two interfaces are implemented <br> * generically in IOLECONT.CPP and IDESCRIP.CPP. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "linksrc.h" <br> <br>#ifdef WIN32ANSI <br>/* <br> * This is to turn off the mapping to ANSI wrapper APIs because <br> * we're actually using wide char strings under Win32 all the time <br> * in parts of this code. <br> */ <br>#undef StgOpenStorage <br>#define StgOpenStorage StgOpenStorage <br> <br>#undef CreateFileMoniker <br>#define CreateFileMoniker CreateFileMoniker <br>#endif <br> <br> <br>/* <br> * CFileObject::CFileObject <br> * CFileObject::~CFileObject <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CFileObject::CFileObject(LPUNKNOWN pUnkOuter <br>    , PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_clsID=CLSID_LinkedFile; <br>    m_szFile[0]=(OLECHAR)0; <br>    m_pIStorage=NULL; <br>    m_pmk=NULL; <br>    m_dwRegROT=0; <br> <br>    m_pImpIPersistFile=NULL; <br>    m_pImpIOleItemContainer=NULL; <br>    m_pImpIDescription=NULL; <br> <br>    return; <br>    } <br> <br>CFileObject::~CFileObject(void) <br>    { <br>    //Remove us from the running object table <br>    if (0!=m_dwRegROT) <br>        { <br>        IRunningObjectTable    *pROT; <br> <br>        if (SUCCEEDED(GetRunningObjectTable(0, &amp;pROT))) <br>            { <br>            pROT-&gt;Revoke(m_dwRegROT); <br>            pROT-&gt;Release(); <br>            } <br>        } <br> <br>    ReleaseInterface(m_pmk); <br>    ReleaseInterface(m_pIStorage); <br>    DeleteInterfaceImp(m_pImpIDescription); <br>    DeleteInterfaceImp(m_pImpIOleItemContainer); <br>    DeleteInterfaceImp(m_pImpIPersistFile); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CFileObject::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CFileObject that's prone to <br> *  failure that we also use internally before exposing the object <br> *  outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CFileObject::Init(void) <br>    { <br>    IUnknown   *pUnk=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pUnk=m_pUnkOuter; <br> <br>    m_pImpIPersistFile=new CImpIPersistFile(this, pUnk); <br> <br>    if (NULL==m_pImpIPersistFile) <br>        return FALSE; <br> <br>    m_pImpIOleItemContainer=new CImpIOleItemContainer(this, pUnk <br>        , TRUE); <br> <br>    if (NULL==m_pImpIOleItemContainer) <br>        return FALSE; <br> <br>    m_pImpIDescription=new CImpIDescription(pUnk); <br> <br>    if (NULL==m_pImpIDescription) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CFileObject::QueryInterface <br> * CFileObject::AddRef <br> * CFileObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CFileObject object. <br> */ <br> <br>STDMETHODIMP CFileObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IPersist==riid || IID_IPersistFile==riid) <br>        *ppv=m_pImpIPersistFile; <br> <br>    if (IID_IParseDisplayName==riid || IID_IOleContainer==riid <br>        || IID_IOleItemContainer==riid) <br>        *ppv=m_pImpIOleItemContainer; <br> <br>    if (IID_IDescription==riid) <br>        *ppv=m_pImpIDescription; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFileObject::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFileObject::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>/** <br> ** IPersistFile implementation <br> **/ <br> <br>/* <br> * CImpIPersistFile:CImpIPersistFile <br> * CImpIPersistFile::~CImpIPersistFile <br> * CImpIPersistFile::QueryInterface <br> * CImpIPersistFile::AddRef <br> * CImpIPersistFile::Release <br> * <br> * Basic object members. <br> */ <br> <br>CImpIPersistFile::CImpIPersistFile(PCFileObject pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIPersistFile::~CImpIPersistFile(void) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP CImpIPersistFile::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistFile::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistFile::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::GetClassID <br> * CImpIPersistFile::IsDirty <br> * CImpIPersistFile::Save <br> * CImpIPersistFile::SaveCompleted <br> * <br> * Trivial or unimplemented members. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::GetClassID(LPCLSID pClsID) <br>    { <br>    *pClsID=m_pObj-&gt;m_clsID; <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIPersistFile::IsDirty(void) <br>    { <br>    //We're never dirty <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br>STDMETHODIMP CImpIPersistFile::Save(LPCOLESTR pszFile, BOOL fRemember) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br>STDMETHODIMP CImpIPersistFile::SaveCompleted(LPCOLESTR pszFile) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistFile::Load <br> * <br> * Purpose: <br> *  Asks the server to load the document for the given filename. <br> * <br> * Parameters: <br> *  pszFile         LPCOLESTR of the filename to load. <br> *  grfMode         DWORD flags to use when opening the file. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::Load(LPCOLESTR pszFile, DWORD grfMode) <br>    { <br>    const int   cch=512; <br>    HRESULT     hr; <br> <br>    //We should only be loaded once; having a moniker tells us <br>    if (NULL!=m_pObj-&gt;m_pmk) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    /* <br>     * Since the server is single-use, we can be assured that <br>     * this Load will only happen once, so we can hold the <br>     * IStorage until the object is released. <br>     */ <br>    hr=StgOpenStorage(pszFile, NULL <br>        , STGM_TRANSACTED | STGM_READ | STGM_SHARE_DENY_WRITE, NULL, 0 <br>        , &amp;m_pObj-&gt;m_pIStorage); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    m_pObj-&gt;m_pImpIDescription-&gt;SetStorage(m_pObj-&gt;m_pIStorage); <br> <br>    /* <br>     * We opened it successfully, and that's all we have to <br>     * do, so we can simply save the filename. <br>     */ <br>   #ifdef WIN32ANSI <br>    wcsncpy(m_pObj-&gt;m_szFile, pszFile, cch); <br>   #else <br>    lstrcpyn(m_pObj-&gt;m_szFile, pszFile, cch); <br>   #endif <br> <br>    /* <br>     * Create a moniker for this file object and register as <br>     * running. <br>     */ <br>    if (SUCCEEDED(CreateFileMoniker(pszFile, &amp;m_pObj-&gt;m_pmk))) <br>        { <br>        IRunningObjectTable    *pROT; <br> <br>        if (SUCCEEDED(GetRunningObjectTable(0, &amp;pROT))) <br>            { <br>            //Register as weak so clients can free us <br>            pROT-&gt;Register(0, m_pObj, m_pObj-&gt;m_pmk <br>                , &amp;m_pObj-&gt;m_dwRegROT); <br>            pROT-&gt;Release(); <br>            } <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CImpIPersistFile::GetCurFile <br> * <br> * Purpose: <br> *  Returns the current filename. <br> * <br> * Parameters: <br> *  ppszFile        LPOLESTR * into which we store a pointer to <br> *                  the filename that should be allocated with the <br> *                  shared IMalloc. <br> */ <br> <br>STDMETHODIMP CImpIPersistFile::GetCurFile(LPOLESTR *ppszFile) <br>    { <br>    LPMALLOC    pIMalloc; <br>    const int   cch=512; <br>    LPOLESTR    psz; <br> <br>    *ppszFile=NULL; <br> <br>    if (FAILED(CoGetMalloc(MEMCTX_TASK, &amp;pIMalloc))) <br>        return ResultFromScode(E_FAIL); <br> <br>    psz=(LPOLESTR)pIMalloc-&gt;Alloc(cch*sizeof(OLECHAR)); <br>    pIMalloc-&gt;Release(); <br> <br>    if (NULL==psz) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>   #ifdef WIN32ANSI <br>    wcsncpy(psz, m_pObj-&gt;m_szFile, cch); <br>   #else <br>    lstrcpyn(psz, m_pObj-&gt;m_szFile, cch); <br>   #endif <br>    *ppszFile=psz; <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

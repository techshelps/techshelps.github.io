<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALAA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context457"></a>KOALAA.CPP</h2>
<pre><code>/* <br> * KOALAA.CPP <br> * <br> * Koala Object Reusing Animal via Aggregation, Chapter 2 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "reuse.h" <br>#include "koalaa.h" <br> <br> <br>/* <br> * CreateKoalaAggregation <br> * <br> * Purpose: <br> *  Creates an instance of KoalaA returning an IUnknown <br> *  interface. <br> * <br> * Parameters: <br> *  ppUnk           IUnknown ** in which to return the pointer. <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CreateKoalaAggregation(IUnknown **ppUnk) <br>    { <br>    CKoalaA    *pObj; <br>    HRESULT     hr; <br> <br>    pObj=new CKoalaA(); <br> <br>    if (NULL==pObj) <br>        return FALSE; <br> <br>    if (!pObj-&gt;Init()) <br>        return FALSE; <br> <br>    hr=pObj-&gt;QueryInterface(IID_IUnknown, (PPVOID)ppUnk); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoalaA::CKoalaA <br> * CKoalaA::~CKoalaA <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CKoalaA::CKoalaA(void) <br>    { <br>    m_cRef=0; <br>    m_pImpIKoala=NULL; <br>    m_pIUnknown=NULL; <br>    m_pIAnimal=NULL; <br>    return; <br>    } <br> <br>CKoalaA::~CKoalaA(void) <br>    { <br>    /* <br>     * Since this KoalaA is not aggregatable, we can use the <br>     * 32-bit rule under Win16 as well. <br>     */ <br>    AddRef(); <br>    ReleaseInterface(m_pIAnimal); <br> <br>    ReleaseInterface(m_pIUnknown); <br>    DeleteInterfaceImp(m_pImpIKoala); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CKoalaA::Init <br> * <br> * Purpose: <br> *  Instantiates the interface implementations for this object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeds, FALSE otherwise. <br> */ <br> <br>BOOL CKoalaA::Init(void) <br>    { <br>    HRESULT     hr; <br> <br>    //Create our interface <br>    m_pImpIKoala=new CImpIKoala_A(this); <br> <br>    if (NULL==m_pImpIKoala) <br>        return FALSE; <br> <br>    /* <br>     * Create an instance of the Animal object, saving an <br>     * IUnknown but also saving a released IAnimal.  We use <br>     * Animal's global API function for this. <br>     */ <br>    hr=CreateAnimal(this, IID_IUnknown, (void **)&amp;m_pIUnknown); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    /* <br>     * Grab an IAnimal to show the Release rule.  We don't do <br>     * anything with this pointer, but we want to show the Release. <br>     */ <br>    hr=m_pIUnknown-&gt;QueryInterface(IID_IAnimal, (void **)&amp;m_pIAnimal); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    /* <br>     * In caching the IAnimal pointer we have to fix our <br>     * reference count.  SInce KoalaC is not aggregatable itself, <br>     * we can use the 32-bit rule for this case in 16-bit <br>     * compilations as well. <br>     * <br>     * Our reference count may be as little as one at this pointer <br>     * so calling our own Release (or m_pIAnimal's) is a bad idea. <br>     * Since we just need to fix the count, we can just decrement <br>     * m_cRef.  If we have to call someone's Release, then we'd <br>     * need to wrap that call in m_cRef++ and m_cRef--. <br>     */ <br>    m_cRef--; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoalaA::QueryInterface <br> * CKoalaA::AddRef <br> * CKoalaA::Release <br> * <br> * Purpose: <br> *  KoalaA's IUnknown implementation which serves as the outer <br> *  unknown in the aggregation. <br> */ <br> <br>STDMETHODIMP CKoalaA::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    //Alternately *ppv=m_pIAnimal; works for this case <br>    if (IID_IAnimal==riid) <br>        return m_pIUnknown-&gt;QueryInterface(riid, ppv); <br> <br>    if (IID_IKoala==riid) <br>        *ppv=m_pImpIKoala; <br> <br>    if (NULL==*ppv) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br>DWORD CKoalaA::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>DWORD CKoalaA::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    m_cRef++;       //Artificial count preventing reentrancy <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>//CImpIKoala_A interface implementation <br> <br> <br>/* <br> * CImpIKoala_A::CImpIKoala_A <br> * CImpIKoala_A::~CImpIKoala_A <br> * <br> * Constructor Parameters: <br> *  pObj            PCKoalaA to the outer object <br> */ <br> <br>CImpIKoala_A::CImpIKoala_A(PCKoalaA pObj) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    return; <br>    } <br> <br>CImpIKoala_A::~CImpIKoala_A(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIKoala_A::QueryInterface <br> * CImpIKoala_A::AddRef <br> * CImpIKoala_A::Release <br> * <br> * IUnknown members that delegate to KoalaA <br> */ <br> <br>STDMETHODIMP CImpIKoala_A::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pObj-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpIKoala_A::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pObj-&gt;AddRef(); <br>    } <br> <br>DWORD CImpIKoala_A::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pObj-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIKoala_A::ClimbEucalyptusTrees <br> * CImpIKoala_A::PouchOpensDown <br> * CImpIKoala_A::SleepForHoursAfterEating <br> * <br> * Purpose: <br> *  Empty sample functions, no parameters, return NOERROR <br> */ <br> <br>STDMETHODIMP CImpIKoala_A::ClimbEucalyptusTrees(void) <br>    { <br>    ODS("KoalaA's IKoala::ClimbEucalyptusTrees called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIKoala_A::PouchOpensDown(void) <br>    { <br>    ODS("KoalaA's IKoala::PouchOpensDown called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIKoala_A::SleepForHoursAfterEating(void) <br>    { <br>    ODS("KoalaA's IKoala::SleepForHoursAfterEating called"); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

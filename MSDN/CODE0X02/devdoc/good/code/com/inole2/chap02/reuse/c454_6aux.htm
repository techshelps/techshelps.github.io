<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALAC.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context459"></a>KOALAC.CPP</h2>
<pre><code>/* <br> * KOALAC.CPP <br> * <br> * Koala Object Reusing Animal via Containment, Chapter 2 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "reuse.h" <br>#include "koalac.h" <br> <br> <br>/* <br> * CreateKoalaContainment <br> * <br> * Purpose: <br> *  Creates an instance of KoalaC returning an IUnknown <br> *  interface. <br> * <br> * Parameters: <br> *  ppUnk           IUnknown ** in which to return the pointer. <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CreateKoalaContainment(IUnknown **ppUnk) <br>    { <br>    CKoalaC    *pObj; <br>    HRESULT     hr; <br> <br>    pObj=new CKoalaC(); <br> <br>    if (NULL==pObj) <br>        return FALSE; <br> <br>    if (!pObj-&gt;Init()) <br>        return FALSE; <br> <br>    hr=pObj-&gt;QueryInterface(IID_IUnknown, (PPVOID)ppUnk); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoalaC::CKoalaC <br> * CKoalaC::~CKoalaC <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CKoalaC::CKoalaC(void) <br>    { <br>    m_cRef=0; <br>    m_pImpIAnimal=NULL; <br>    m_pImpIKoala=NULL; <br> <br>    m_pIAnimal=NULL; <br>    return; <br>    } <br> <br>CKoalaC::~CKoalaC(void) <br>    { <br>    ReleaseInterface(m_pIAnimal); <br> <br>    DeleteInterfaceImp(m_pImpIKoala); <br>    DeleteInterfaceImp(m_pImpIAnimal); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CKoalaC::Init <br> * <br> * Purpose: <br> *  Instantiates the interface implementations for this object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeds, FALSE otherwise. <br> */ <br> <br>BOOL CKoalaC::Init(void) <br>    { <br>    HRESULT     hr; <br> <br>    //Create our interface <br>    m_pImpIAnimal=new CImpIAnimal_K(this); <br> <br>    if (NULL==m_pImpIAnimal) <br>        return FALSE; <br> <br>    m_pImpIKoala=new CImpIKoala_C(this); <br> <br>    if (NULL==m_pImpIKoala) <br>        return FALSE; <br> <br>    /* <br>     * Create an instance of the Animal object and save an <br>     * IAnimal pointer.  We use Animal's global API function <br>     * for this. <br>     */ <br>    hr=CreateAnimal(NULL, IID_IAnimal, (void **)&amp;m_pIAnimal); <br> <br>    if (FAILED(hr)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoalaC::QueryInterface <br> * CKoalaC::AddRef <br> * CKoalaC::Release <br> * <br> * Purpose: <br> *  KoalaC's IUnknown implementation. <br> */ <br> <br>STDMETHODIMP CKoalaC::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IAnimal==riid) <br>        *ppv=m_pImpIAnimal; <br> <br>    if (IID_IKoala==riid) <br>        *ppv=m_pImpIKoala; <br> <br>    if (NULL==*ppv) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br>DWORD CKoalaC::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>DWORD CKoalaC::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>//CImpIAnimal_K interface implementation <br> <br> <br>/* <br> * CImpIAnimal_K::CImpIAnimal_K <br> * CImpIAnimal_K::~CImpIAnimal_K <br> * <br> * Constructor Parameters: <br> *  pObj            PCKoalaC to the outer object <br> */ <br> <br>CImpIAnimal_K::CImpIAnimal_K(PCKoalaC pObj) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    return; <br>    } <br> <br>CImpIAnimal_K::~CImpIAnimal_K(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIAnimal_K::QueryInterface <br> * CImpIAnimal_K::AddRef <br> * CImpIAnimal_K::Release <br> * <br> * IUnknown members that delegate to KoalaC <br> */ <br> <br>STDMETHODIMP CImpIAnimal_K::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pObj-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpIAnimal_K::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pObj-&gt;AddRef(); <br>    } <br> <br>DWORD CImpIAnimal_K::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pObj-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIAnimal_K::Eat <br> * CImpIAnimal_K::Sleep <br> * CImpIAnimal_K::Procreate <br> * <br> * Purpose: <br> *  Empty sample functions, no parameters, return NOERROR <br> */ <br> <br>STDMETHODIMP CImpIAnimal_K::Eat(void) <br>    { <br>    ODS("KoalaC's IAnimal::Eat called"); <br> <br>    //Call contained object <br>    m_pObj-&gt;m_pIAnimal-&gt;Eat(); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIAnimal_K::Sleep(void) <br>    { <br>    ODS("KoalaC's IAnimal::Sleep called"); <br> <br>    //Call contained object <br>    m_pObj-&gt;m_pIAnimal-&gt;Sleep(); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIAnimal_K::Procreate(void) <br>    { <br>    ODS("KoalaC's IAnimal::Procreate called"); <br> <br>    //Call contained object <br>    m_pObj-&gt;m_pIAnimal-&gt;Procreate(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>//CImpIKoala_C interface implementation <br> <br> <br>/* <br> * CImpIKoala_C::CImpIKoala_C <br> * CImpIKoala_C::~CImpIKoala_C <br> * <br> * Constructor Parameters: <br> *  pObj            PCKoalaC to the outer object <br> */ <br> <br>CImpIKoala_C::CImpIKoala_C(PCKoalaC pObj) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    return; <br>    } <br> <br>CImpIKoala_C::~CImpIKoala_C(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIKoala_C::QueryInterface <br> * CImpIKoala_C::AddRef <br> * CImpIKoala_C::Release <br> * <br> * IUnknown members that delegate to KoalaC <br> */ <br> <br>STDMETHODIMP CImpIKoala_C::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pObj-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpIKoala_C::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pObj-&gt;AddRef(); <br>    } <br> <br>DWORD CImpIKoala_C::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pObj-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIKoala_C::ClimbEucalyptusTrees <br> * CImpIKoala_C::PouchOpensDown <br> * CImpIKoala_C::SleepForHoursAfterEating <br> * <br> * Purpose: <br> *  Empty sample functions, no parameters, return NOERROR <br> */ <br> <br>STDMETHODIMP CImpIKoala_C::ClimbEucalyptusTrees(void) <br>    { <br>    ODS("KoalaC's IKoala::ClimbEucalyptusTrees called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIKoala_C::PouchOpensDown(void) <br>    { <br>    ODS("KoalaC's IKoala::PouchOpensDown called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIKoala_C::SleepForHoursAfterEating(void) <br>    { <br>    ODS("KoalaC's IKoala::SleepForHoursAfterEating called"); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT1.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context446"></a>OBJECT1.CPP</h2>
<pre><code>/* <br> * OBJECT1.CPP <br> * <br> * Object implementation using interface implementations. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "query.h" <br> <br> <br>//Message strings for the interface functions <br>static TCHAR szMessage[]=TEXT("Message from ISampleOne::GetMessage"); <br>static TCHAR szString[] =TEXT("Message from ISampleTwo::GetString"); <br> <br> <br>/* <br> * CreateObject1 <br> * <br> * Purpose: <br> *  Creates an instance of CObject1 returning an IUnknown <br> *  interface. <br> * <br> * Parameters: <br> *  ppUnk           IUnknown ** in which to return the <br> *                  interface pointer. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CreateObject1(IUnknown **ppUnk) <br>    { <br>    HRESULT     hr; <br>    CObject1   *pObj; <br> <br>    if (NULL==ppUnk) <br>        return FALSE; <br> <br>    //Create the new object, which gives us a C++ object pointer <br>    pObj=new CObject1(); <br> <br>    if (NULL==pObj) <br>        return FALSE; <br> <br>    if (!pObj-&gt;Init()) <br>        return FALSE; <br> <br>    /* <br>     * Now get the IUnknown interface to this object and make <br>     * sure that it's reference count is correct.  We could either <br>     * typecast pObj to IUnknown and call AddRef explicitly, or <br>     * we can simply call pObj-&gt;QueryInterface and let it do the <br>     * typecast and the AddRef for us. <br>     */ <br>    hr=pObj-&gt;QueryInterface(IID_IUnknown, (PPVOID)ppUnk); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CObject1::CObject1 <br> * CObject1::~CObject1 <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CObject1::CObject1(void) <br>    { <br>    m_cRef=0; <br> <br>    m_pImpISampleOne=NULL; <br>    m_pImpISampleTwo=NULL; <br> <br>    return; <br>    } <br> <br>CObject1::~CObject1(void) <br>    { <br>    //Delete the interface implementations created in Init <br>    DeleteInterfaceImp(m_pImpISampleTwo); <br>    DeleteInterfaceImp(m_pImpISampleOne); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CObject1::Init <br> * <br> * Purpose: <br> *  Instantiates the interface implementations for this object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeds, FALSE otherwise. <br> */ <br> <br>BOOL CObject1::Init(void) <br>    { <br>    /* <br>     * Creating the interfaces means creating instances of <br>     * the interface implementation classes.  The constructor <br>     * parameters is a pointer to CObject1 that has the <br>     * IUnknown functions to which the interface implementations <br>     * delegate. <br>     */ <br> <br>    m_pImpISampleOne=new CImpISampleOne(this); <br> <br>    if (NULL==m_pImpISampleOne) <br>        return FALSE; <br> <br>    m_pImpISampleTwo=new CImpISampleTwo(this); <br> <br>    if (NULL==m_pImpISampleTwo) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CObject1::QueryInterface <br> * <br> * Purpose: <br> *  Manages the interfaces for this object which supports the <br> *  IUnknown, ISampleOne, and ISampleTwo interfaces. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to return. <br> *  ppv             PPVOID in which to store the pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, E_NOINTERFACE if the <br> *                  interface is not supported. <br> */ <br> <br>STDMETHODIMP CObject1::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    //Always NULL the out-parameters <br>    *ppv=NULL; <br> <br>    /* <br>     * IUnknown comes from CObject1.  Note that here and in <br>     * the lines below we do not need to explicitly typecast <br>     * the object pointers into interface pointers because <br>     * the vtables are identical.  If we had additional virtual <br>     * member functions in the object, we would have to cast <br>     * in order to set the right vtable.  This is demonstrated <br>     * in the multiple-inheritance version, CObject3. <br>     */ <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    //Other interfaces come from interface implementations <br>    if (IID_ISampleOne==riid) <br>        *ppv=m_pImpISampleOne; <br> <br>    if (IID_ISampleTwo==riid) <br>        *ppv=m_pImpISampleTwo; <br> <br>    if (NULL==*ppv) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    //AddRef any interface we'll return. <br>    ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CObject1::AddRef <br> * CObject1::Release <br> * <br> * Reference counting members.  When Release sees a zero count <br> * the object destroys itself. <br> */ <br> <br>DWORD CObject1::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>DWORD CObject1::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>//CImpISampleOne interface implementation <br> <br> <br>/* <br> * CImpISampleOne::CImpISampleOne <br> * CImpISampleOne::~CImpISampleOne <br> * <br> * Constructor Parameters: <br> *  pObj            PCObject1 to the outer object <br> */ <br> <br>CImpISampleOne::CImpISampleOne(PCObject1 pObj) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    return; <br>    } <br> <br>CImpISampleOne::~CImpISampleOne(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpISampleOne::QueryInterface <br> * CImpISampleOne::AddRef <br> * CImpISampleOne::Release <br> * <br> * IUnknown members that delegate to m_pObj <br> */ <br> <br>STDMETHODIMP CImpISampleOne::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pObj-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpISampleOne::AddRef(void) <br>    { <br>    /* <br>     * We maintain an "interface reference count" for debugging <br>     * purposes, because the client of an object should match <br>     * AddRef and Release calls through each interface pointer. <br>     */ <br>    ++m_cRef; <br>    return m_pObj-&gt;AddRef(); <br>    } <br> <br>DWORD CImpISampleOne::Release(void) <br>    { <br>    /* <br>     * m_cRef is again only for debugging.  It doesn't affect <br>     * CObject1 although the call to m_pObj-&gt;Release does. <br>     */ <br>    --m_cRef; <br>    return m_pObj-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpISampleOne::GetMessage <br> * <br> * Purpose: <br> *  Returns a string to the caller. <br> * <br> * Parameters: <br> *  psz             LPTSTR in which to store the string. <br> *  cch             UINT size of psz. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the string is stored, E_OUTOFMEMORY <br> *                  if the buffer is too small. <br> */ <br> <br>STDMETHODIMP CImpISampleOne::GetMessage(LPTSTR psz, UINT cch) <br>    { <br>    if (NULL==psz) <br>        return ResultFromScode(E_POINTER); <br> <br>    if (cch &lt; (UINT)lstrlen(szMessage)) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    lstrcpy(psz, szMessage); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>//CImpISampleTwo interface implementation <br> <br> <br>/* <br> * CImpISampleTwo::CImpISampleTwo <br> * CImpISampleTwo::~CImpISampleTwo <br> * <br> * Constructor Parameters: <br> *  pObj            PCObject1 to the outer object <br> */ <br> <br>CImpISampleTwo::CImpISampleTwo(PCObject1 pObj) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    return; <br>    } <br> <br>CImpISampleTwo::~CImpISampleTwo(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpISampleTwo::QueryInterface <br> * CImpISampleTwo::AddRef <br> * CImpISampleTwo::Release <br> * <br> * IUnknown members that delegate to m_pObj <br> */ <br> <br>STDMETHODIMP CImpISampleTwo::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pObj-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpISampleTwo::AddRef(void) <br>    { <br>    /* <br>     * We maintain an "interface reference count" for debugging <br>     * purposes, because the client of an object should match <br>     * AddRef and Release calls through each interface pointer. <br>     */ <br>    ++m_cRef; <br>    return m_pObj-&gt;AddRef(); <br>    } <br> <br>DWORD CImpISampleTwo::Release(void) <br>    { <br>    /* <br>     * m_cRef is again only for debugging.  It doesn't affect <br>     * CObject1 although the call to m_pObj-&gt;Release does. <br>     */ <br>    --m_cRef; <br>    return m_pObj-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpISampleTwo::GetString <br> * <br> * Purpose: <br> *  Returns a string to the caller. <br> * <br> * Parameters: <br> *  psz             LPTSTR in which to store the string. <br> *  cch             UINT size of psz. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the string is stored, E_OUTOFMEMORY <br> *                  if the buffer is too small. <br> */ <br> <br>STDMETHODIMP CImpISampleTwo::GetString(LPTSTR psz, UINT cch) <br>    { <br>    if (NULL==psz) <br>        return ResultFromScode(E_POINTER); <br> <br>    if (cch &lt; (UINT)lstrlen(szString)) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    lstrcpy(psz, szString); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

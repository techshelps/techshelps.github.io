<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REUSE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context461"></a>REUSE.CPP</h2>
<pre><code>/* <br> * REUSE.CPP <br> * Demonstration of COM Reusability mechanisms. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include &lt;windows.h&gt; <br>#include "reuse.h" <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application. <br> */ <br> <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    MSG     msg; <br>    PAPP    pApp; <br> <br>    pApp=new CApp(hInst, hInstPrev, nCmdShow); <br> <br>    if (NULL==pApp) <br>        return -1; <br> <br>    if (pApp-&gt;Init()) <br>        { <br>        while (GetMessage(&amp;msg, NULL, 0,0 )) <br>            { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>            } <br>        } <br> <br>    delete pApp; <br>    return msg.wParam; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * ReuseWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure. <br> */ <br> <br>LRESULT APIENTRY ReuseWndProc(HWND hWnd, UINT iMsg, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    PAPP        pApp; <br>    BOOL        fRes; <br>    IAnimal    *pIAnimal; <br>    IKoala     *pIKoala; <br> <br>    COMMANDPARAMS(wID, wCode, hWndMsg); <br> <br>    pApp=(PAPP)GetWindowLong(hWnd, REUSEWL_STRUCTURE); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pApp=(PAPP)(((LPCREATESTRUCT)lParam)-&gt;lpCreateParams); <br>            SetWindowLong(hWnd, REUSEWL_STRUCTURE, (LONG)pApp); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br> <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            switch (wID) <br>                { <br>                case IDM_CREATECONTAINMENT: <br>                    if (NULL!=pApp-&gt;m_pIUnknown) <br>                        pApp-&gt;m_pIUnknown-&gt;Release(); <br> <br>                    fRes=CreateKoalaContainment(&amp;pApp-&gt;m_pIUnknown); <br> <br>                    pApp-&gt;Message(fRes ? TEXT("KoalaC created") <br>                        : TEXT("KoalaC creation failed")); <br> <br>                    break; <br> <br> <br>                case IDM_CREATEAGGREGATION: <br>                    if (NULL!=pApp-&gt;m_pIUnknown) <br>                        pApp-&gt;m_pIUnknown-&gt;Release(); <br> <br>                    fRes=CreateKoalaAggregation(&amp;pApp-&gt;m_pIUnknown); <br> <br>                    pApp-&gt;Message(fRes ? TEXT("KoalaA created") <br>                        : TEXT("KoalaA creation failed")); <br> <br>                    break; <br> <br>                case IDM_ANIMALEAT: <br>                    if (!pApp-&gt;GetInterface(IID_IAnimal, (void **)&amp;pIAnimal)) <br>                        break; <br> <br>                    pIAnimal-&gt;Eat(); <br>                    pApp-&gt;Message(TEXT("IAnimal::Eat called")); <br>                    pIAnimal-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_ANIMALSLEEP: <br>                    if (!pApp-&gt;GetInterface(IID_IAnimal, (void **)&amp;pIAnimal)) <br>                        break; <br> <br>                    pIAnimal-&gt;Sleep(); <br>                    pApp-&gt;Message(TEXT("IAnimal::Sleep called")); <br>                    pIAnimal-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_ANIMALPROCREATE: <br>                    if (!pApp-&gt;GetInterface(IID_IAnimal, (void **)&amp;pIAnimal)) <br>                        break; <br> <br>                    pIAnimal-&gt;Procreate(); <br>                    pApp-&gt;Message(TEXT("IAnimal::Procreate called")); <br>                    pIAnimal-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_KOALACLIMBEUCALYPTUSTREES: <br>                    if (!pApp-&gt;GetInterface(IID_IKoala, (void **)&amp;pIKoala)) <br>                        break; <br> <br>                    pIKoala-&gt;ClimbEucalyptusTrees(); <br>                    pApp-&gt;Message(TEXT("IKoala::ClimbEucalyptusTrees called")); <br>                    pIKoala-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_KOALAPOUCHOPENSDOWN: <br>                    if (!pApp-&gt;GetInterface(IID_IKoala, (void **)&amp;pIKoala)) <br>                        break; <br> <br>                    pIKoala-&gt;PouchOpensDown(); <br>                    pApp-&gt;Message(TEXT("IKoala::PouchOpensDown called")); <br>                    pIKoala-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_KOALASLEEPFORHOURSAFTEREATING: <br>                    if (!pApp-&gt;GetInterface(IID_IKoala, (void **)&amp;pIKoala)) <br>                        break; <br> <br>                    pIKoala-&gt;SleepForHoursAfterEating(); <br>                    pApp-&gt;Message(TEXT("IKoala::SleepForHoursAfterEating called")); <br>                    pIKoala-&gt;Release(); <br>                    break; <br> <br> <br>                case IDM_RELEASE: <br>                    if (NULL==pApp-&gt;m_pIUnknown) <br>                        { <br>                        pApp-&gt;Message(TEXT("There is no object")); <br>                        break; <br>                        } <br> <br>                    if (0==pApp-&gt;m_pIUnknown-&gt;Release()) <br>                        { <br>                        pApp-&gt;m_pIUnknown=NULL; <br>                        pApp-&gt;Message(TEXT("Object released")); <br>                        } <br> <br>                    break; <br> <br> <br>                case IDM_EXIT: <br>                    PostMessage(hWnd, WM_CLOSE, 0, 0L); <br>                    break; <br>                } <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::CApp <br> * CApp::~CApp <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the Application from WinMain <br> *  hInstPrev       HINSTANCE of a previous instance from WinMain <br> *  nCmdShow        UINT specifying how to show the app window, <br> *                  from WinMain. <br> */ <br> <br>CApp::CApp(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , UINT nCmdShow) <br>    { <br>    //Initialize WinMain parameter holders. <br>    m_hInst     =hInst; <br>    m_hInstPrev =hInstPrev; <br>    m_nCmdShow  =nCmdShow; <br> <br>    m_hWnd=NULL; <br>    m_pIUnknown=NULL; <br> <br>    return; <br>    } <br> <br> <br>CApp::~CApp(void) <br>    { <br>    //Release the object if we still have it. <br>    ReleaseInterface(m_pIUnknown); <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::Init <br> * <br> * Purpose: <br> *  Initializes an CApp object by registering window classes, <br> *  creating the main window, and doing anything else prone to <br> *  failure.  If this function fails the caller should guarantee <br> *  that the destructor is called. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CApp::Init(void) <br>    { <br>    WNDCLASS    wc; <br> <br>    if (!m_hInstPrev) <br>        { <br>        wc.style          = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc    = ReuseWndProc; <br>        wc.cbClsExtra     = 0; <br>        wc.cbWndExtra     = CBWNDEXTRA; <br>        wc.hInstance      = m_hInst; <br>        wc.hIcon          = LoadIcon(m_hInst, TEXT("Icon")); <br>        wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>        wc.lpszMenuName   = MAKEINTRESOURCE(IDR_MENU); <br>        wc.lpszClassName  = TEXT("REUSE"); <br> <br>        if (!RegisterClass(&amp;wc)) <br>            return FALSE; <br>        } <br> <br>    m_hWnd=CreateWindow(TEXT("REUSE"), TEXT("COM Reusability Demo") <br>        , WS_MINIMIZEBOX | WS_OVERLAPPEDWINDOW <br>        ,35, 35, 350, 250, NULL, NULL, m_hInst, this); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    ShowWindow(m_hWnd, m_nCmdShow); <br>    UpdateWindow(m_hWnd); <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * GetInterface <br> * <br> * Purpose: <br> *  Centralized function to query for an interface and <br> *  return the pointer. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to query for. <br> *  ppv             void ** in which to return the pointer. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the interface was retrieved, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL CApp::GetInterface(REFIID riid, void **ppv) <br>    { <br>    HRESULT     hr; <br> <br>    *ppv=NULL; <br> <br>    if (NULL==m_pIUnknown) <br>        { <br>        Message(TEXT("There is no object")); <br>        return FALSE; <br>        } <br> <br>    hr=m_pIUnknown-&gt;QueryInterface(riid, ppv); <br> <br>    if (FAILED(hr)) <br>        { <br>        Message(TEXT("Failed to get the interface")); <br>        return FALSE; <br>        } <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CApp::Message <br> * <br> * Purpose: <br> *  Displays a message in the client area of the window.  This is <br> *  just to centralize the call to simpify other code. <br> * <br> * Parameters: <br> *  psz             LPTSTR to the string to display. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void inline CApp::Message(LPTSTR psz) <br>    { <br>    HDC     hDC; <br>    RECT    rc; <br> <br>    hDC=GetDC(m_hWnd); <br>    GetClientRect(m_hWnd, &amp;rc); <br> <br>    SetBkColor(hDC, GetSysColor(COLOR_WINDOW)); <br>    SetTextColor(hDC, GetSysColor(COLOR_WINDOWTEXT)); <br> <br>    /* <br>     * We'll just be sloppy and clear the whole window as <br>     * well as write the string with one ExtTextOut call. <br>     * No word wrapping here... <br>     */ <br> <br>    ExtTextOut(hDC, 0, 0, ETO_OPAQUE, &amp;rc, psz, lstrlen(psz), NULL); <br>    ReleaseDC(m_hWnd, hDC); <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

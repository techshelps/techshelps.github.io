<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANIMAL.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context454"></a>ANIMAL.CPP</h2>
<pre><code>/* <br> * ANIMAL.CPP <br> * <br> * Aggregatable Animal Object Implementation, Chapter 2 <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "reuse.h" <br>#include "animal.h" <br> <br> <br>/* <br> * CreateAnimal <br> * <br> * Purpose: <br> *  Creates an instance of Animal returning a requested interface <br> *  pointer. <br> * <br> * Parameters: <br> *  pUnkOuter       IUnknown * holding the outer unknown.  Can <br> *                  be NULL. <br> *  riid            REFIID interface requested by the caller. <br> *  ppv             void ** in which to return the interface pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, CLASS_E_NOAGREGATION if <br> *                  IUnknown is not requested with non-NULL pUnkOuter, <br> *                  or other error as appropriate. <br> */ <br> <br>HRESULT CreateAnimal(IUnknown *pUnkOuter, REFIID riid, void **ppv) <br>    { <br>    CAnimal    *pObj; <br> <br>    //If aggregation is on, check riid==IID_IUnknown <br>    if (NULL!=pUnkOuter &amp;&amp; riid!=IID_IUnknown) <br>        return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>    pObj=new CAnimal(pUnkOuter); <br> <br>    if (NULL==pObj) <br>        return E_OUTOFMEMORY; <br> <br>    if (!pObj-&gt;Init()) <br>        return E_FAIL; <br> <br>    return pObj-&gt;QueryInterface(riid, (PPVOID)ppv); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CAnimal::CAnimal <br> * CAnimal::~CAnimal <br> * <br> * Constructor Parameters: <br> *  pUnkOuter       IUnknown * holding the outer unknown.  Can <br> *                  be NULL. <br> */ <br> <br>CAnimal::CAnimal(IUnknown *pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pImpIAnimal=NULL; <br> <br>    //No AddRef necessary if non-NULL as we're nested. <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CAnimal::~CAnimal(void) <br>    { <br>    DeleteInterfaceImp(m_pImpIAnimal); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CAnimal::Init <br> * <br> * Purpose: <br> *  Instantiates the interface implementations for this object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeds, FALSE otherwise. <br> */ <br> <br>BOOL CAnimal::Init(void) <br>    { <br>    IUnknown   *pUnkOuter=m_pUnkOuter; <br> <br>    //Set up the right unknown for delegation <br>    if (NULL==pUnkOuter) <br>        pUnkOuter=this; <br> <br>    m_pImpIAnimal=new CImpIAnimal_A(this, pUnkOuter); <br> <br>    if (NULL==m_pImpIAnimal) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CAnimal::QueryInterface <br> * CAnimal::AddRef <br> * CAnimal::Release <br> * <br> * Purpose: <br> *  Non-delegating IUnknown implementation. <br> */ <br> <br>STDMETHODIMP CAnimal::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IAnimal==riid) <br>        *ppv=m_pImpIAnimal; <br> <br>    if (NULL==*ppv) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br>DWORD CAnimal::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>DWORD CAnimal::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>//CImpIAnimal_A interface implementation <br> <br> <br>/* <br> * CImpIAnimal_A::CImpIAnimal_A <br> * CImpIAnimal_A::~CImpIAnimal_A <br> * <br> * Constructor Parameters: <br> *  pObj            PCAnimal to the outer object <br> *  pUnkOuter       IUnknown * to which to delegate. <br> */ <br> <br>CImpIAnimal_A::CImpIAnimal_A(PCAnimal pObj, IUnknown *pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter;  //No AddRef, we're nested <br>    return; <br>    } <br> <br>CImpIAnimal_A::~CImpIAnimal_A(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIAnimal_A::QueryInterface <br> * CImpIAnimal_A::AddRef <br> * CImpIAnimal_A::Release <br> * <br> * IUnknown members that delegate to m_pUnkOuter, whatever it is. <br> */ <br> <br>STDMETHODIMP CImpIAnimal_A::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>DWORD CImpIAnimal_A::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>DWORD CImpIAnimal_A::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIAnimal_A::Eat <br> * CImpIAnimal_A::Sleep <br> * CImpIAnimal_A::Procreate <br> * <br> * Purpose: <br> *  Empty sample functions, no parameters, return NOERROR <br> */ <br> <br>STDMETHODIMP CImpIAnimal_A::Eat(void) <br>    { <br>    ODS("Animal's IAnimal::Eat called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIAnimal_A::Sleep(void) <br>    { <br>    ODS("Animal's IAnimal::Sleep called"); <br>    return NOERROR; <br>    } <br> <br>STDMETHODIMP CImpIAnimal_A::Procreate(void) <br>    { <br>    ODS("Animal's IAnimal::Procreate called"); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

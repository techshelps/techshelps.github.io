<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENUMRECT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context439"></a>ENUMRECT.H</h2>
<pre><code>/* <br> * ENUMRECT.H <br> * C/C++ Enumerator Demonstrtion Chapter 2 <br> * <br> * Definitions, classes, and prototypes <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _ENUMRECT_H_ <br>#define _ENUMRECT_H_ <br> <br>#define CHAPTER2 <br>#include &lt;inole.h&gt; <br>#ifndef WIN32 <br>#include &lt;malloc.h&gt; <br>#endif <br>#include "ienum.h"  //Interface definitions <br> <br> <br>//Menu Resource ID and Commands <br>#define IDR_MENU                    1 <br> <br>#define IDM_ENUMCREATEC             100 <br>#define IDM_ENUMCREATECPP           101 <br>#define IDM_ENUMRELEASE             102 <br>#define IDM_ENUMRUNTHROUGH          103 <br>#define IDM_ENUMEVERYTHIRD          104 <br>#define IDM_ENUMRESET               105 <br>#define IDM_ENUMCLONE               106 <br>#define IDM_ENUMEXIT                107 <br> <br> <br>//Number of rects that objects with IEnumRECT support (for demo) <br>#define CRECTS      15 <br> <br> <br>//Skip the C++ stuff when this file is included from ENUMC.C <br>#ifdef __cplusplus <br> <br>//ENUMRECT.CPP <br>LRESULT APIENTRY EnumWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>class CApp <br>    { <br>    friend LRESULT APIENTRY EnumWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    protected: <br>        HINSTANCE       m_hInst;            //WinMain parameters <br>        HINSTANCE       m_hInstPrev; <br>        UINT            m_nCmdShow; <br> <br>        HWND            m_hWnd;             //Main window handle <br>        PENUMRECT       m_pIEnumRect;       //Enumerator object <br> <br>    public: <br>        CApp(HINSTANCE, HINSTANCE, UINT); <br>        ~CApp(void); <br> <br>        BOOL Init(void); <br>        void Message(LPTSTR); <br>    }; <br> <br> <br>typedef CApp *PAPP; <br> <br>#define CBWNDEXTRA          sizeof(PAPP) <br>#define ENUMWL_STRUCTURE    0 <br> <br> <br>//ENUMCPP.CPP <br> <br>/* <br> * The class definition for an object that singly implements <br> * IEnumRECT in C++. <br> */ <br>class CEnumRect : public IEnumRECT <br>    { <br>    private: <br>        DWORD           m_cRef;         //Reference count <br>        DWORD           m_iCur;         //Current enum position <br>        RECT            m_rgrc[CRECTS]; //RECTS we enumerate <br> <br>    public: <br>        CEnumRect(void); <br>        ~CEnumRect(void); <br> <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IEnumRECT members <br>        STDMETHODIMP Next(ULONG, LPRECT, ULONG *); <br>        STDMETHODIMP Skip(ULONG); <br>        STDMETHODIMP Reset(void); <br>        STDMETHODIMP Clone(PENUMRECT *); <br>    }; <br> <br> <br>typedef CEnumRect *PCEnumRect; <br> <br> <br>//Function that creates one of these objects <br>BOOL CreateRECTEnumeratorCPP(PENUMRECT *); <br> <br> <br>//End of __cplusplus <br> <br>#else <br> <br>//Start of non __cplusplus definitions <br> <br>//ENUMC.C <br> <br>/* <br> * The structure definition for an object that singly implements <br> * IEnumRECT in C.  We make a class by reusing the elements of <br> * the IEnumRECT structure thereby inheriting from it, albeit <br> * manually. <br> */ <br> <br>typedef struct tagRECTENUMERATOR <br>    { <br>    IEnumRECTVtbl  *lpVtbl; <br>    DWORD           m_cRef;         //Reference count <br>    DWORD           m_iCur;         //Current enum position <br>    RECT            m_rgrc[CRECTS]; //RECTS we enumerate <br>    } RECTENUMERATOR, *PRECTENUMERATOR; <br> <br> <br>/* <br> * In C we have to separately declare member functions with <br> * globally unique names, so prefixing with the class name <br> * should remove any conflicts. <br> */ <br> <br>PRECTENUMERATOR RECTENUM_Constructor(void); <br>void            RECTENUM_Destructor(PRECTENUMERATOR); <br> <br>STDMETHODIMP    RECTENUM_QueryInterface(PENUMRECT, REFIID, PPVOID); <br>STDMETHODIMP_(ULONG) RECTENUM_AddRef(PENUMRECT); <br>STDMETHODIMP_(ULONG) RECTENUM_Release(PENUMRECT); <br>STDMETHODIMP    RECTENUM_Next(PENUMRECT, DWORD, LPRECT, LPDWORD); <br>STDMETHODIMP    RECTENUM_Skip(PENUMRECT, DWORD); <br>STDMETHODIMP    RECTENUM_Reset(PENUMRECT); <br>STDMETHODIMP    RECTENUM_Clone(PENUMRECT, PENUMRECT *); <br> <br> <br>//End of __cplusplus conditions <br> <br>#endif <br> <br>#ifdef __cplusplus <br>extern "C" <br>    { <br>#endif <br>    //Function that creates one of these objects <br>    BOOL CreateRECTEnumeratorC(PENUMRECT *); <br>#ifdef __cplusplus <br>    } <br>#endif <br> <br>#endif //_ENUMRECT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

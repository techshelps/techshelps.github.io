<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT2.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context449"></a>OBJECT2.H</h2>
<pre><code>/* <br> * OBJECT2.H <br> * <br> * Definition of the CObject1 class that uses contained <br> * classes to provide ISampleOne and ISampleTwo. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _OBJECT2_H_ <br>#define _OBJECT2_H_ <br> <br> <br>//Creation function <br>BOOL CreateObject2(IUnknown **); <br> <br> <br>/* <br> * The object we want to provide in OLE supports the IUnknown, <br> * ISampleOne, and ISampleTwo interfaces. <br> * <br> * The C++ class, CObject2, implements these interfaces with <br> * contained classes where each contained class inherits singly <br> * from an interface.  This is a little different from interface <br> * implementations shown in Object1 because contained classes <br> * are automatically instantiated along with CObject2. <br> */ <br> <br> <br> <br>//The C++ class that manages the actual object. <br>class CObject2 : public IUnknown <br>    { <br>    /* <br>     * Declare the contained classes, which should be friends. <br>     * As with interface implementations, these need back <br>     * pointers to the outer object as well as the IUnknown to <br>     * which to delegate, which are the constructor parameters. <br>     */ <br>    class CImpISampleOne : public ISampleOne <br>        { <br>        private: <br>            DWORD       m_cRef;         //For debugging <br>            CObject2   *m_pObj;         //Back pointer for delegation <br> <br>        public: <br>            CImpISampleOne(CObject2 *pObj) <br>                { m_cRef=0; m_pObj=pObj; } <br> <br>            ~CImpISampleOne(void) <br>                { } <br> <br>            //IUnknown members <br>            STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>            STDMETHODIMP_(DWORD) AddRef(void); <br>            STDMETHODIMP_(DWORD) Release(void); <br> <br>            //ISampleOne members <br>            STDMETHODIMP         GetMessage(LPTSTR, UINT); <br>        }; <br> <br>    class CImpISampleTwo : public ISampleTwo <br>        { <br>        private: <br>            DWORD       m_cRef;         //For debugging <br>            CObject2   *m_pObj;         //Back pointer for delegation <br> <br>        public: <br>            CImpISampleTwo(CObject2 *pObj) <br>                { m_cRef=0; m_pObj=pObj; } <br>            ~CImpISampleTwo(void) <br>                { } <br> <br>            //IUnknown members <br>            STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>            STDMETHODIMP_(DWORD) AddRef(void); <br>            STDMETHODIMP_(DWORD) Release(void); <br> <br>            //ISampleTwo members <br>            STDMETHODIMP         GetString(LPTSTR, UINT); <br>        }; <br> <br> <br>    friend CImpISampleOne; <br>    friend CImpISampleTwo; <br> <br> <br>    private: <br>        DWORD           m_cRef;         //Object reference count <br> <br>        /* <br>         * In this technique I still use "ImpI" prefixes to <br>         * differentiate contained classes.  The difference here <br>         * from Object1 is that we declare objects instead of <br>         * pointers to objects, so instantiating CObject2 will <br>         * automatically instantiate CImpI*.  Destroying CObject2 <br>         * will automatically destroy CImp*. <br>         */ <br>        CImpISampleOne  m_ImpISampleOne; <br>        CImpISampleTwo  m_ImpISampleTwo; <br> <br>    public: <br>        CObject2(void); <br>        ~CObject2(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br>    }; <br> <br> <br>typedef CObject2 *PCObject2; <br> <br> <br>#endif _OBJECT2_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

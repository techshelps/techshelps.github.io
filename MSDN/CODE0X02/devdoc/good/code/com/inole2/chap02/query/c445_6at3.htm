<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT1.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context447"></a>OBJECT1.H</h2>
<pre><code>/* <br> * OBJECT1.H <br> * <br> * Definition of the CObject1 class that uses interface <br> * implementations to provide ISampleOne and ISampleTwo. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _OBJECT1_H_ <br>#define _OBJECT1_H_ <br> <br> <br>//Creation function <br>BOOL CreateObject1(IUnknown **); <br> <br> <br>/* <br> * The object we want to provide in OLE supports the IUnknown, <br> * ISampleOne, and ISampleTwo interfaces. <br> * <br> * The C++ class, CObject1, implements these interfaces with <br> * "interface implementations" where the C++ class itself inherits <br> * from and implements IUnknown members and then contains <br> * other C++ classes that each separately inherit from the other <br> * interfaces.  The other classes are the "interface implementations." <br> */ <br> <br> <br>/* <br> * In this technique you'll generally need forward references <br> * like this for use in declaring the object class. <br> */ <br>class CImpISampleOne; <br>typedef CImpISampleOne *PCImpISampleOne; <br> <br>class CImpISampleTwo; <br>typedef CImpISampleTwo *PCImpISampleTwo; <br> <br>//The C++ class that manages the actual object. <br>class CObject1 : public IUnknown <br>    { <br>    /* <br>     * Usually interface implementations will need back pointers <br>     * to the object itself since this object usually manages <br>     * the important data members.  In that case, make the <br>     * interface implementation classes friends of the object. <br>     */ <br> <br>    friend CImpISampleOne; <br>    friend CImpISampleTwo; <br> <br> <br>    private: <br>        DWORD           m_cRef;         //Object reference count <br> <br>        /* <br>         * I use "m_pImpI" as a prefix to differentiate interface <br>         * implementations for this object from other interface <br>         * pointer variables I might hold to other objects, whic <br>         * would be prefixed with "m_pI". <br>         */ <br>        PCImpISampleOne  m_pImpISampleOne; <br>        PCImpISampleTwo  m_pImpISampleTwo; <br> <br>    public: <br>        CObject1(void); <br>        ~CObject1(void); <br> <br>        BOOL Init(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br>    }; <br> <br> <br>typedef CObject1 *PCObject1; <br> <br> <br>/* <br> * Interface implementation classes are C++ classes that <br> * each singly inherit from an interface.  Their IUnknown <br> * members delegate calls to CObject1's IUnknown members-- <br> * since IUnknown members affect the entire *object*, and <br> * since these interfaces are not the object itself, we must <br> * delegate to implement the correct behavior. <br> */ <br> <br>class CImpISampleOne : public ISampleOne <br>    { <br>    private: <br>        DWORD       m_cRef;         //For debugging <br>        PCObject1   m_pObj;         //Back pointer for delegation <br> <br>    public: <br>        CImpISampleOne(PCObject1); <br>        ~CImpISampleOne(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br> <br>        //ISampleOne members <br>        STDMETHODIMP         GetMessage(LPTSTR, UINT); <br>    }; <br> <br> <br> <br>class CImpISampleTwo : public ISampleTwo <br>    { <br>    private: <br>        DWORD       m_cRef;         //For debugging <br>        PCObject1   m_pObj;         //Back pointer for delegation <br> <br>    public: <br>        CImpISampleTwo(PCObject1); <br>        ~CImpISampleTwo(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br> <br>        //ISampleTwo members <br>        STDMETHODIMP         GetString(LPTSTR, UINT); <br>    }; <br> <br> <br>#endif _OBJECT1_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

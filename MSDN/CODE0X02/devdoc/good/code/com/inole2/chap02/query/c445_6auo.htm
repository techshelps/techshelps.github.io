<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT3.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context450"></a>OBJECT3.CPP</h2>
<pre><code>/* <br> * OBJECT3.CPP <br> * <br> * Object implementation using multiple inheritance. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "query.h" <br> <br> <br>//Message strings for the interface functions <br>static TCHAR szMessage[]=TEXT("Message from ISampleOne::GetMessage"); <br>static TCHAR szString[] =TEXT("Message from ISampleTwo::GetString"); <br> <br> <br>/* <br> * CreateObject3 <br> * <br> * Purpose: <br> *  Creates an instance of Object2 returning an IUnknown <br> *  interface. <br> * <br> * Parameters: <br> *  ppUnk           IUnknown ** in which to return the <br> *                  interface pointer. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CreateObject3(IUnknown **ppUnk) <br>    { <br>    HRESULT     hr; <br>    CObject3   *pObj; <br> <br>    if (NULL==ppUnk) <br>        return FALSE; <br> <br>    //Create the new object, which gives us a C++ object pointer <br>    pObj=new CObject3(); <br> <br>    if (NULL==pObj) <br>        return FALSE; <br> <br>    /* <br>     * Now get the IUnknown interface to this object and make <br>     * sure that it's reference count is correct.  We could either <br>     * typecast pObj to IUnknown and call AddRef explicitly, or <br>     * we can simply call pObj-&gt;QueryInterface and let it do the <br>     * typecast and the AddRef for us. <br>     */ <br>    hr=pObj-&gt;QueryInterface(IID_IUnknown, (PPVOID)ppUnk); <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CObject3::CObject3 <br> * CObject3::~CObject3 <br> * <br> * Constructor Parameters: <br> *  None <br> */ <br> <br>CObject3::CObject3(void) <br>    { <br>    m_cRef=0; <br>    return; <br>    } <br> <br>CObject3::~CObject3(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CObject3::QueryInterface <br> * <br> * Purpose: <br> *  Manages the interfaces for this object which supports the <br> *  IUnknown, ISampleOne, and ISampleTwo interfaces. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to return. <br> *  ppv             PPVOID in which to store the pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, E_NOINTERFACE if the <br> *                  interface is not supported. <br> */ <br> <br>STDMETHODIMP CObject3::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    //Always NULL the out-parameters <br>    *ppv=NULL; <br> <br>    /* <br>     * Since all the interfaces are part of this same object, <br>     * we *must* use typecasts to set up the right vtables from <br>     * the 'this' pointer.  Casting to an interface will give <br>     * us a pointer that points to exactly that interface vtable. <br>     * <br>     * Note that since we don't have an explicit IUnknown base, <br>     * responding to IUnknown here simply return ISampleOne, which <br>     * has the right IUnknown vtable anyway. <br>     */ <br>    if (IID_IUnknown==riid || IID_ISampleOne==riid) <br>        *ppv=(ISampleOne *)this; <br> <br>    if (IID_ISampleTwo==riid) <br>        *ppv=(ISampleTwo *)this; <br> <br>    if (NULL==*ppv) <br>        return ResultFromScode(E_NOINTERFACE); <br> <br>    //AddRef any interface we'll return. <br>    ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CObject3::AddRef <br> * CObject3::Release <br> * <br> * Reference counting members.  When Release sees a zero count <br> * the object destroys itself. <br> */ <br> <br>DWORD CObject3::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>DWORD CObject3::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>/* <br> * CObject3::GetMessage <br> * <br> * Purpose: <br> *  Returns a string to the caller.  This is the implementation <br> *  of ISampleOne::GetMessage. <br> * <br> * Parameters: <br> *  psz             LPTSTR in which to store the string. <br> *  cch             UINT size of psz. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the string is stored, E_OUTOFMEMORY <br> *                  if the buffer is too small. <br> */ <br> <br>STDMETHODIMP CObject3::GetMessage(LPTSTR psz, UINT cch) <br>    { <br>    if (NULL==psz) <br>        return ResultFromScode(E_POINTER); <br> <br>    if (cch &lt; (UINT)lstrlen(szMessage)) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    lstrcpy(psz, szMessage); <br>    return NOERROR; <br>    } <br> <br> <br>/* <br> * CObject3::GetString <br> * <br> * Purpose: <br> *  Returns a string to the caller.  This is the implementation <br> *  of ISampleTwo::GetString. <br> * <br> * Parameters: <br> *  psz             LPTSTR in which to store the string. <br> *  cch             UINT size of psz. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the string is stored, E_OUTOFMEMORY <br> *                  if the buffer is too small. <br> */ <br> <br>STDMETHODIMP CObject3::GetString(LPTSTR psz, UINT cch) <br>    { <br>    if (NULL==psz) <br>        return ResultFromScode(E_POINTER); <br> <br>    if (cch &lt; (UINT)lstrlen(szString)) <br>        return ResultFromScode(E_OUTOFMEMORY); <br> <br>    lstrcpy(psz, szString); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

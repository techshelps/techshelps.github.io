<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADVSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context780"></a>IADVSINK.CPP</h2>
<pre><code>/* <br> * IADVSINK.CPP <br> * Patron Chapter 17 <br> * <br> * Implementation of the IAdviseSink interface for Patron's tenants. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CImpIAdviseSink::CImpIAdviseSink <br> * CImpIAdviseSink::~CImpIAdviseSink <br> * <br> * Parameters (Constructor): <br> *  pTenant         PCTenant of the tenant we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIAdviseSink::CImpIAdviseSink(PCTenant pTenant <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pTen=pTenant; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIAdviseSink::~CImpIAdviseSink(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::QueryInterface <br> * CImpIAdviseSink::AddRef <br> * CImpIAdviseSink::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIAdviseSink object. <br> */ <br> <br>STDMETHODIMP CImpIAdviseSink::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnDataChange <br> * <br> * Unused since we don't IDataObject::Advise. <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnDataChange(LPFORMATETC pFEIn <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnViewChange <br> * <br> * Purpose: <br> *  Notifes the advise sink that presentation data changed in the <br> *  data object to which we're connected providing the right time <br> *  to update displays using such presentations. <br> * <br> * Parameters: <br> *  dwAspect        DWORD indicating which aspect has changed. <br> *  lindex          LONG indicating the piece that changed. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnViewChange(DWORD dwAspect <br>    , LONG lindex) <br>    { <br>    //Repaint only if this is the right aspect <br>    if (dwAspect==m_pTen-&gt;m_fe.dwAspect) <br>        { <br>        m_pTen-&gt;m_pPG-&gt;m_fDirty=TRUE; <br>        m_pTen-&gt;Repaint(); <br>        } <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnRename <br> * <br> * Purpose: <br> *  Informs the advise sink that a linked object has been renamed. <br> *  Generally only the OLE default handler cares about this. <br> * <br> * Parameters: <br> *  pmk             LPMONIKER providing the new name of the object <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnRename(LPMONIKER pmk) <br>    { <br>    /* <br>     * As a container this is unimportant to us since it really <br>     * tells the handler's implementation of IOleLink that the <br>     * object's moniker has changed.  Since we get this call <br>     * from the handler, we don't have to do anything ourselves. <br>     */ <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnSave <br> * <br> * Purpose: <br> *  Informs the advise sink that the OLE object has been saved <br> *  persistently.  The primary purpose of this is for containers <br> *  that want to make optimizations for objects that are not in a <br> *  saved state, so on this you have to disable such optimizations. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnSave(void) <br>    { <br>    /* <br>     * A Container has nothing to do here as this notification is <br>     * only useful when we have an ADVFCACHE_ONSAVE advise set up, <br>     * which we don't.  So we ignore it. <br>     */ <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnClose <br> * <br> * Purpose: <br> *  Informs the advise sink that the OLE object has closed and is <br> *  no longer bound in any way. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnClose(void) <br>    { <br>    /* <br>     * This doesn't have much to do with us again as it's only <br>     * used to notify the handler's IOleLink implementation of the <br>     * change in the object.  We don't have to do anything since <br>     * we'll also get an IOleClientSite::OnShowWindow(FALSE) to <br>     * tell us to repaint. <br>     */ <br> <br>    /* <br>     * If we are dealing with an OLE 1.0 server it may not call <br>     * IOleClientSite::OnShowWindow(FALSE) properly, so to protect <br>     * ourselves we make sure the object is drawn as closed on <br>     * this notification. <br>     */ <br>    m_pTen-&gt;ShowAsOpen(FALSE); <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

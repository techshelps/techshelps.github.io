<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FREELOAD.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context631"></a>FREELOAD.H</h2>
<pre><code>/* <br> * FREELOAD.H <br> * Freeloader Chapter 11 <br> * <br> * Class overrides for the FreeLoader application <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _FREELOAD_H_ <br>#define _FREELOAD_H_ <br> <br>#define INC_OLE2 <br>#define INC_CLASSLIB <br>#define CHAPTER11 <br>#include &lt;inole.h&gt; <br>#include "resource.h" <br> <br> <br>//FREELOAD.CPP:  Frame object that creates a main window <br> <br>class CFreeloaderFrame : public CFrame <br>    { <br>    private: <br>        BOOL             m_fInitialized;    //OleInitialize work? <br> <br>    protected: <br>        //Overridable for creating a CClient for this frame <br>        virtual PCClient CreateCClient(void); <br>        virtual LRESULT  OnCommand(HWND, WPARAM, LPARAM); <br> <br>    public: <br>        CFreeloaderFrame(HINSTANCE, HINSTANCE, LPSTR, int); <br>        virtual ~CFreeloaderFrame(void); <br> <br>        virtual BOOL     FInit(PFRAMEINIT); <br>        virtual void     UpdateMenus(HMENU, UINT); <br>    }; <br> <br> <br>typedef CFreeloaderFrame *PCFreeloaderFrame; <br> <br> <br> <br> <br> <br>//CLIENT.CPP <br> <br>//Override to create CFreeloaderDoc <br>class CFreeloaderClient : public CClient <br>    { <br>    protected: <br>        //Overridable for creating a new CDocument <br>        virtual PCDocument  CreateCDocument(void); <br> <br>    public: <br>        CFreeloaderClient(HINSTANCE, PCFrame); <br>        virtual ~CFreeloaderClient(void); <br>    }; <br> <br> <br>typedef CFreeloaderClient *PCFreeloaderClient; <br> <br> <br> <br> <br>//DOCUMENT.CPP <br> <br>//Paint continuation callback for IViewObject::Draw <br>BOOL CALLBACK ContinuePaint(DWORD); <br> <br>class CFreeloaderDoc : public CDocument <br>    { <br>    protected: <br>        LPSTORAGE       m_pIStorage;    //Root storage for this doc <br>        LPUNKNOWN       m_pIUnknown;    //Static visual object. <br>        DWORD           m_dwConn;       //From IOleCache::Cache <br>        CLSID           m_clsID;        //Data type <br> <br>    protected: <br>        //Centralized cleanup <br>        void ReleaseObject(void); <br> <br>        //To catch WM_PAINT <br>        virtual BOOL    FMessageHook(HWND, UINT, WPARAM, LPARAM <br>            , LRESULT *); <br> <br>    public: <br>        CFreeloaderDoc(HINSTANCE, PCFrame, PCDocumentAdviseSink); <br>        virtual ~CFreeloaderDoc(void); <br> <br>        virtual BOOL     FInit(PDOCUMENTINIT); <br> <br>        virtual UINT     Load(BOOL, LPTSTR); <br>        virtual UINT     Save(UINT, LPTSTR); <br> <br>        virtual BOOL     Clip(HWND, BOOL); <br>        virtual HGLOBAL  RenderFormat(UINT); <br>        virtual BOOL     FQueryPaste(void); <br>        virtual BOOL     Paste(HWND); <br> <br>        virtual BOOL     SizeToGraphic(BOOL); <br>    }; <br> <br>typedef CFreeloaderDoc *PCFreeloaderDoc; <br> <br> <br>//For mapping HIMETRIC to pixels. <br>#define HIMETRIC_PER_INCH       2540 <br> <br>#endif //_FREELOAD_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

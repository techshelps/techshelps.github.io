<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FREELOAD.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context630"></a>FREELOAD.CPP</h2>
<pre><code>/* <br> * FREELOAD.CPP <br> * Freeloader Chapter 11 <br> * <br> * Freeloader application that uses OLE's data cache <br> * to provide free drawing and serialization services for <br> * bitmaps and metafiles. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "freeload.h" <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application.  Should register the app class <br> *  if a previous instance has not done so and do any other one-time <br> *  initializations. <br> */ <br> <br>int PASCAL WinMain (HINSTANCE hInst, HINSTANCE hPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    PCFreeloaderFrame   pFR; <br>    FRAMEINIT           fi; <br>    WPARAM              wRet; <br> <br>    SETMESSAGEQUEUE(96); <br> <br>    pFR=new CFreeloaderFrame(hInst, hPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pFR) <br>        return -1; <br> <br>    fi.idsMin=IDS_STANDARDFRAMEMIN; <br>    fi.idsMax=IDS_STANDARDFRAMEMAX; <br>    fi.idsStatMin=IDS_STATMESSAGEMIN; <br>    fi.idsStatMax=IDS_STATMESSAGEMAX; <br>    fi.idStatMenuMin=ID_MENUFILE; <br>    fi.idStatMenuMax=ID_MENUHELP; <br>    fi.iPosWindowMenu=WINDOW_MENU; <br>    fi.cMenus=CMENUS; <br> <br>    fi.x=CW_USEDEFAULT; <br>    fi.y=CW_USEDEFAULT; <br>    fi.cx=CW_USEDEFAULT; <br>    fi.cy=CW_USEDEFAULT; <br> <br>    //If we can initialize pFR, start chugging messages <br>    if (pFR-&gt;FInit(&amp;fi)) <br>        wRet=pFR-&gt;MessageLoop(); <br> <br>    delete pFR; <br>    return wRet; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFreeloaderFrame::CFreeloaderFrame <br> * CFreeloaderFrame::~CFreeloaderFrame <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE from WinMain <br> *  hInstPrev       HINSTANCE from WinMain <br> *  pszCmdLine      LPSTR from WinMain <br> *  nCmdShow        int from WInMain <br> */ <br> <br>CFreeloaderFrame::CFreeloaderFrame(HINSTANCE hInst <br>    , HINSTANCE hInstPrev, LPSTR pszCmdLine, int nCmdShow) <br>    : CFrame(hInst, hInstPrev, pszCmdLine, nCmdShow) <br>    { <br>    m_fInitialized=FALSE; <br>    return; <br>    } <br> <br> <br>CFreeloaderFrame::~CFreeloaderFrame(void) <br>    { <br>    if (m_fInitialized) <br>        OleUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CFreeloaderFrame::FInit <br> * <br> * Purpose: <br> *  Call CoInitialize then calling down into the base class <br> *  initialization. <br> * <br> * Parameters: <br> *  pFI             PFRAMEINIT containing initialization <br> *                  parameters. <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeded, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CFreeloaderFrame::FInit(PFRAMEINIT pFI) <br>    { <br>    CHECKVER_OLE; <br> <br>    if (FAILED(OleInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    return CFrame::Init(pFI); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFreeloaderFrame::CreateCClient <br> * <br> * Purpose: <br> *  Constructs a new client specific to the application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  PCClient        Pointer to the new client object. <br> */ <br> <br>PCClient CFreeloaderFrame::CreateCClient(void) <br>    { <br>    return (PCClient)(new CFreeloaderClient(m_hInst, this)); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFreeloaderFrame::OnCommand <br> * <br> * Purpose: <br> *  WM_COMMAND handler for the Cosmo frame window that just <br> *  processes the line menu and the color menu leaving the <br> *  CFrame to do everything else. <br> * <br> * Parameters: <br> *  hWnd            HWND of the frame window. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LRESULT         Return value for the message. <br> */ <br> <br>LRESULT CFreeloaderFrame::OnCommand(HWND hWnd, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    PCFreeloaderDoc     pDoc; <br> <br>    COMMANDPARAMS(wID, wCode, hWndMsg); <br> <br>    /* <br>     * Don't bother with anything during first initialization, <br>     * skipping many toolbar notifications. <br>     */ <br>    if (m_fInit) <br>        return 0L; <br> <br>    switch (wID) <br>        { <br>        case IDM_EDITSIZETOGRAPHIC: <br>            pDoc=(PCFreeloaderDoc)m_pCL-&gt;ActiveDocument(); <br> <br>            if (NULL!=pDoc) <br>                pDoc-&gt;SizeToGraphic(FALSE); <br>            break; <br> <br>        default: <br>           CFrame::OnCommand(hWnd, wParam, lParam); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFreeloaderFrame::UpdateMenus <br> * <br> * Purpose: <br> *  Handles the WM_INITMENU message for the frame window.  Depending <br> *  on the existence of an active window, menu items are selectively <br> *  enabled and disabled. <br> * <br> * Parameters: <br> *  hMenu           HMENU of the menu to intialize <br> *  iMenu           UINT position of the menu. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CFreeloaderFrame::UpdateMenus(HMENU hMenu, UINT iMenu) <br>    { <br>    //Edit menu:  check if the document can size to the graphic <br>    if (m_phMenu[1]==hMenu) <br>        { <br>        PCFreeloaderDoc pDoc; <br>        BOOL            fEnable=FALSE; <br> <br>        pDoc=(PCFreeloaderDoc)m_pCL-&gt;ActiveDocument(); <br> <br>        if (NULL!=pDoc) <br>            fEnable=pDoc-&gt;SizeToGraphic(TRUE); <br> <br>        EnableMenuItem(hMenu, IDM_EDITSIZETOGRAPHIC, MF_BYCOMMAND <br>            | ((fEnable) ? MF_ENABLED : MF_DISABLED | MF_GRAYED)); <br>        } <br> <br>    CFrame::UpdateMenus(hMenu, iMenu); <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

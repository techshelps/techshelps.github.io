<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLASSLIB.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1071"></a>CLASSLIB.H</h2>
<pre><code>/* <br> * CLASSLIB.H <br> * Sample Code Class Libraries <br> * <br> * Master include file for our own Class Library containing: <br> *  CStringTable    Class that manages a stringtable. <br> *  CHourglass      Class to manage the hourglass. <br> * <br> *  CWindow         Basic window class for most other classes in here <br> *  CGizmoBar       Wrapper for GizmoBar control <br> *  CStatStrip      Wrapper for StatStrip control <br> * <br> *  CFrame          Frame window <br> *  CClient         Client window with a uniform interface for <br> *                  MDI and SDI frames. <br> *  CDocument       Document window, also with a uniform interface <br> *                  for MDI and SDI. <br> * <br> *  CDocumentAdviseSink Object implemented in the frame that the <br> *                      document notifies of important events. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _CLASSLIB_H_ <br>#define _CLASSLIB_H_ <br> <br>#include &lt;book1632.h&gt; <br> <br>//Get default resource definitions <br>#include "classres.h" <br> <br> <br>class CStringTable; <br>class CHourglass; <br>class CGizmoBar; <br>class CStatStrip; <br>class CWindow; <br>class CFrame; <br>class CClient; <br>class CDocument; <br>class CDocumentAdviseSink; <br>class CHatchWin; <br> <br> <br>/** <br> ** CStringTable providing string table management for anyone. <br> **/ <br> <br>class CStringTable <br>    { <br>    protected: <br>        HINSTANCE       m_hInst; <br>        UINT            m_idsMin; <br>        UINT            m_idsMax; <br>        USHORT          m_cStrings; <br>        LPTSTR          m_pszStrings; <br>        LPTSTR         *m_ppszTable; <br> <br>    public: <br>        CStringTable(HINSTANCE); <br>        ~CStringTable(void); <br> <br>        BOOL FInit(UINT, UINT); <br> <br>        //Function to resolve an ID into a string pointer. <br>        const LPTSTR operator [](const UINT) const; <br>    }; <br> <br> <br>typedef CStringTable *PCStringTable; <br> <br>/* <br> * Typical classes that initialize a stringtable should have an m_pST <br> * member, then they can use this macro conveniently. <br> */ <br> <br>#define PSZ(i) ((*m_pST)[i]) <br>#define CCHSTRINGMAX            256 <br> <br> <br>/** <br> ** CHourglass:  Manages the hourglass and mouse capture <br> **/ <br> <br>class CHourglass <br>    { <br>    protected: <br>        HWND            m_hWndCapture;      //Window with capture <br>        HCURSOR         m_hCur;             //Cursor held. <br> <br>    public: <br>        CHourglass(void); <br>        CHourglass(HWND); <br>        ~CHourglass(void); <br>    }; <br> <br>typedef CHourglass *PCHourglass; <br> <br> <br> <br>/** <br> ** CWindow:  Our basic window class. <br> **/ <br> <br>class CWindow <br>    { <br>    protected: <br>        HINSTANCE   m_hInst;            //Task instance <br>        HWND        m_hWnd;             //Window handle of the window <br> <br>    public: <br>        //Standard Class Functions <br>        CWindow(HINSTANCE); <br>        ~CWindow(void); <br> <br>        //Just returns m_hWnd.  No need to modify <br>        HWND Window(void); <br>    }; <br> <br> <br>typedef CWindow * PCWindow; <br> <br> <br> <br> <br>/** <br> ** CGizmoBar encapculates a GizmoBar control <br> **/ <br> <br>#include &lt;bttncur.h&gt; <br>#include &lt;gizmobar.h&gt; <br> <br> <br>class CGizmoBar : public CWindow <br>    { <br>    protected: <br>        UINT            m_cyBar; <br> <br>    public: <br>        CGizmoBar(HINSTANCE); <br>        ~CGizmoBar(void); <br> <br>        BOOL FInit(HWND, UINT, UINT); <br> <br>        //Window message wrappers <br>        void   OnSize(HWND); <br>        void   FontSet(HFONT, BOOL); <br>        HFONT  FontGet(void); <br>        void   Enable(BOOL); <br> <br>        //GizmoBar function wrappers <br>        HWND   HwndAssociateSet(HWND); <br>        HWND   HwndAssociateGet(void); <br> <br>        BOOL   Add(UINT, UINT, UINT, UINT, UINT, LPTSTR, HBITMAP <br>                   , UINT, UINT); <br>        BOOL   Remove(UINT); <br> <br>        LONG   SendMessage(UINT, UINT, WPARAM, LPARAM); <br> <br>        BOOL   Show(UINT, BOOL); <br>        BOOL   Enable(UINT, BOOL); <br>        BOOL   Check(UINT, BOOL); <br>        UINT   FocusSet(UINT); <br>        BOOL   Exist(UINT); <br> <br>        int    TypeGet(UINT); <br> <br>        DWORD  DataSet(UINT, DWORD); <br>        DWORD  DataGet(UINT); <br>        BOOL   NotifySet(UINT, BOOL); <br>        BOOL   NotifyGet(UINT); <br> <br>        int    TextGet(UINT, LPTSTR, UINT); <br>        void   TextSet(UINT, LPTSTR); <br>        UINT   IntGet(UINT, BOOL *, BOOL); <br>        void   IntSet(UINT, int, BOOL); <br>    }; <br> <br> <br>typedef CGizmoBar *PCGizmoBar; <br> <br> <br> <br> <br> <br>/** <br> ** CStatStrip encapsulates a StatStrip control. <br> **/ <br> <br>#include &lt;stastrip.h&gt; <br> <br> <br>class CStatStrip : public CWindow <br>    { <br>    protected: <br>        UINT        m_cy;           //Control height <br> <br>    public: <br>        CStatStrip(HINSTANCE); <br>        ~CStatStrip(void); <br> <br>        BOOL FInit(HWND, UINT, UINT); <br> <br>        void  OnSize(HWND); <br>        void  MessageSet(LPTSTR); <br>        UINT  MessageGet(LPTSTR, UINT); <br>        UINT  MessageGetLength(void); <br>        void  FontSet(HFONT, BOOL); <br>        HFONT FontGet(void); <br>        void  Enable(BOOL); <br> <br>        BOOL  MessageMap(HWND, HINSTANCE, UINT, UINT, UINT, UINT <br>                  , UINT, UINT, UINT, UINT, UINT); <br>        void  MenuSelect(WPARAM, LPARAM); <br>        void  MessageDisplay(UINT); <br>    }; <br> <br>typedef CStatStrip *PCStatStrip; <br> <br> <br> <br> <br> <br>/** <br> ** CFrame encapsulates a main application window <br> **/ <br> <br>//FRAMEWIN.CPP:  Standard window procedure and AboutProc <br>LRESULT APIENTRY FrameWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL    APIENTRY AboutProc(HWND, UINT, WPARAM, LPARAM); <br> <br>#define CBFRAMEWNDEXTRA     sizeof(LONG) <br>#define FRAMEWL_STRUCTURE   0 <br> <br> <br>/* <br> * Structure containing resource ranges for initialization of <br> * a CFrame object through its FInit member. <br> */ <br> <br>typedef struct tagFRAMEINIT <br>    { <br>    UINT    idsMin;         //Stringtable start and end <br>    UINT    idsMax; <br> <br>    UINT    idsStatMin;     //StatStrip stringtable start and end <br>    UINT    idsStatMax; <br> <br>    UINT    idStatMenuMin;  //Start and end IDs for StatStrip <br>    UINT    idStatMenuMax;  //popup menu IDs <br> <br>    UINT    iPosWindowMenu; //Position of the Window menu (MDI init) <br>    UINT    cMenus;         //Number of popup menus we have. <br> <br>    int     x;              //Window positioning. <br>    int     y; <br>    int     cx; <br>    int     cy; <br>    } FRAMEINIT, *PFRAMEINIT; <br> <br> <br> <br>//FRAME.CPP:  Frame object that creates a main window <br> <br>class CFrame : public CWindow <br>    { <br>    //Let our window procedure look in our private variables. <br>    friend LRESULT APIENTRY FrameWndProc(HWND, UINT, WPARAM, LPARAM); <br>    friend class CDocumentAdviseSink; <br> <br>    protected: <br>        HINSTANCE       m_hInstPrev;        //WinMain parameters <br>        LPTSTR          m_pszCmdLine; <br>        int             m_nCmdShow; <br> <br>        BOOL            m_fInit;            //Initializing or closing <br>        BOOL            m_fSizing;          //Inside WM_SIZE <br>        BOOL            m_fClosing;         //In WM_CLOSE <br> <br>        BOOL            m_fLastEnable;      //Toolbar enable state <br>        BOOL            m_fLastPaste; <br> <br>        HMENU          *m_phMenu;           //Popup menu handles <br>        HMENU           m_hMenuWindow;      //"Window" menu <br> <br>        HACCEL          m_hAccel;           //Accelerators <br>        HBITMAP         m_hBmp;             //Gizmobar images <br>        UINT            m_cyBar;            //Gizmobar height <br>        UINT            m_dxB;              //Gizmobar button sizes <br>        UINT            m_dyB; <br> <br>        PCGizmoBar      m_pGB;              //GizmoBar <br>        PCStatStrip     m_pSS;              //StatStrip <br> <br>        PCStringTable   m_pST;              //Stringtable. <br>        CClient        *m_pCL;              //SDI/MDI client window <br> <br>        CDocumentAdviseSink *m_pAdv;    //Sink for document codes <br> <br>    protected: <br>        virtual CClient *CreateCClient(void); <br> <br>        virtual BOOL     FRegisterAllClasses(void); <br>        virtual BOOL     FPreShowInit(void); <br>        virtual void     ParseCommandLine(void); <br>        virtual UINT     CreateGizmos(void); <br> <br>        virtual BOOL     FMessageHook(HWND, UINT, WPARAM, LPARAM <br>                             , LRESULT *); <br>        virtual LRESULT  OnCommand(HWND, WPARAM, LPARAM); <br>        virtual void     OnDocumentDataChange(CDocument *); <br>        virtual void     OnDocumentActivate(CDocument *); <br> <br>        virtual BOOL     FSaveOpenDialog(LPTSTR, UINT, UINT, BOOL <br>                             , UINT *); <br>        virtual UINT     ReplaceCharWithNull(LPTSTR, int); <br>        virtual LPTSTR   PszWhiteSpaceScan(LPTSTR, BOOL); <br> <br>    public: <br>        CFrame(HINSTANCE, HINSTANCE, LPSTR, int); <br>        virtual ~CFrame(void); <br> <br>        virtual BOOL     FInit(PFRAMEINIT); <br> <br>        virtual WPARAM   MessageLoop(void); <br>        virtual BOOL     FAskAndSave(LPTSTR); <br>        virtual void     UpdateMenus(HMENU, UINT); <br>        virtual void     UpdateGizmos(void); <br>        virtual void     WindowTitleSet(CDocument *, BOOL); <br> <br>        virtual PCStatStrip inline GetStatusControl(void); <br>    }; <br> <br> <br>typedef CFrame *PCFrame; <br> <br> <br>//Other Miscellaneous CFrame definitions <br> <br>//GizmoBar and StatStrip IDs used in this frame <br>#define ID_GIZMOBAR         11 <br>#define ID_STATSTRIP        12 <br> <br>//Classname <br>#define SZCLASSFRAME        TEXT("Frame") <br> <br> <br> <br> <br> <br>/** <br> ** CClient encapsulates an MDI or SDI client window <br> **/ <br> <br> <br>//CLIENT.CPP <br>LRESULT APIENTRY SDIClientWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br> <br>#define CBCLIENTWNDEXTRA    sizeof(LONG) <br>#define CLIENTWL_HWNDDOC    0 <br> <br> <br>class CClient : public CWindow <br>    { <br>    friend LRESULT APIENTRY SDIClientWndProc(HWND, UINT, WPARAM <br>        , LPARAM); <br> <br>    protected: <br>        PCFrame         m_pFR;          //Frame window information <br>        UINT            m_cDoc;         //Count of open documents <br>        CDocument *     m_pDocLast;     //Last created document <br> <br>    private: <br>        //This non-overridable sets m_pDocLast <br>        CDocument         * CreateDoc(void); <br> <br>    protected: <br>        //Overridable for creating a new CDocument <br>        virtual CDocument * CreateCDocument(void); <br> <br>    public: <br>        CClient(HINSTANCE); <br>        virtual ~CClient(void); <br> <br>        virtual BOOL            FInit(HMENU, LPRECT, PCFrame); <br> <br>        virtual BOOL            TranslateAccelerator(LPMSG); <br>        virtual LRESULT         DefaultFrameProc(HWND, UINT, WPARAM <br>                                    , LPARAM); <br>        virtual void            OnWindowCommand(UINT, UINT); <br>        virtual void            OnSize(UINT, UINT, UINT, UINT); <br> <br>        virtual CDocument *     NewDocument(BOOL <br>                                    , CDocumentAdviseSink *); <br>        virtual CDocument *     ActiveDocument(void); <br>        virtual BOOL            ShowDocument(CDocument *, BOOL); <br>        virtual BOOL            SDIVerify(void); <br>        virtual UINT            CloseDocument(CDocument *); <br>        virtual BOOL            QueryCloseAllDocuments(BOOL); <br>        virtual BOOL            FCleanVerify(CDocument *); <br>    }; <br> <br> <br>typedef CClient *PCClient; <br> <br> <br>//Other Miscellaneous CFrame definitions <br> <br>//Document window identifiers <br>#define ID_DOCUMENT         999     //Internal ID for all documents <br>#define ID_MDICHILDMIN      1000    //Starting point for MDI doc IDs <br> <br>#define SZCLASSSDICLIENT    TEXT("SDIClient") <br> <br> <br> <br> <br>/** <br> ** CDocument encapsulates an MDI or SDI child window <br> **/ <br> <br> <br>//DOCWIN.CPP <br>LRESULT APIENTRY DocumentWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//DOCUMENT.CPP <br>//File-related string lengths. <br>#define CCHPATHMAX          256 <br>#define CCHFILENAMEMAX      15 <br> <br> <br>//Window extra bytes and offsets <br>#define CBDOCUMENTWNDEXTRA  sizeof(LONG) <br>#define DOCWL_STRUCTURE     0 <br> <br> <br>//Error codes from Load and Save functions <br>#define DOCERR_NONE                     0 <br>#define DOCERR_NOFILE                   1 <br>#define DOCERR_COULDNOTOPEN             2 <br>#define DOCERR_READFAILURE              3 <br>#define DOCERR_UNSUPPORTEDVERSION       4 <br>#define DOCERR_WRITEFAILURE             5 <br>#define DOCERR_CANCELLED                6 <br>#define DOCERR_STDMAX                   6 <br> <br> <br> <br> <br>/* <br> * Structure containing resource ranges and other data for <br> * initialization of a CDocument object through its FInit member. <br> */ <br> <br>typedef struct tagDOCUMENTINIT <br>    { <br>    UINT        idsMin;    //Stringtable start and end <br>    UINT        idsMax; <br>    HWND        hWndDoc;   //HWND of this document, created in client <br> <br>    CDocumentAdviseSink * pAdv; <br>    } DOCUMENTINIT, *PDOCUMENTINIT; <br> <br> <br> <br>class CDocument : public CWindow <br>    { <br>    friend LRESULT APIENTRY DocumentWndProc(HWND, UINT, WPARAM <br>        , LPARAM); <br> <br>    protected: <br>        PCFrame         m_pFR;                //Back pointer <br>        UINT            m_cf;                 //Clipboard format <br>        BOOL            m_fDirty;             //Is file dirty? <br>        BOOL            m_fNoDirty;           //Don't touch dirty flag <br>        BOOL            m_fNoSize;            //Prevent sizing <br>        BOOL            m_fFileKnown;         //File/Save allowed? <br>        TCHAR           m_szFile[CCHPATHMAX]; //Filename for Save <br> <br>        PCStringTable   m_pST;                //Document strings <br> <br>        /* <br>         * If someone above us wants information, they'll <br>         * give us this object. <br>         */ <br>        class CDocumentAdviseSink * m_pAdv; <br> <br>    protected: <br>        virtual BOOL     FMessageHook(HWND, UINT, WPARAM, LPARAM <br>                             , LRESULT *); <br> <br>    public: <br>        CDocument(HINSTANCE, PCFrame); <br>        virtual ~CDocument(void); <br> <br>        virtual BOOL     FInit(PDOCUMENTINIT); <br> <br>        virtual BOOL     FDirtySet(BOOL); <br>        virtual BOOL     FDirtyGet(void); <br>        virtual void     Clear(void); <br> <br>        virtual UINT     ULoad(BOOL, LPTSTR); <br>        virtual UINT     USave(UINT, LPTSTR); <br>        virtual void     ErrorMessage(UINT); <br> <br>        virtual BOOL     FClip(HWND, BOOL); <br>        virtual HGLOBAL  RenderFormat(UINT); <br>        virtual BOOL     FQueryPaste(void); <br>        virtual BOOL     FPaste(HWND); <br>        virtual void     Undo(void); <br> <br>        virtual BOOL     FQuerySave(void); <br>        virtual void     Rename(LPTSTR); <br>        virtual UINT     FilenameGet(LPTSTR, UINT); <br>        virtual PCFrame  FrameGet(void); <br>    }; <br> <br>typedef CDocument *PCDocument; <br> <br> <br>//Classname for documents, not localized <br>#define SZCLASSDOCUMENT     TEXT("document") <br> <br> <br>//Macro that isolates us from MDI or SDI Def procs <br>#ifdef MDI <br>#define DEFDOCUMENTPROC     DefMDIChildProc <br>#else <br>#define DEFDOCUMENTPROC     DefWindowProc <br>#endif <br> <br> <br>//Message to get PCDocument from hWnd <br>#define DOCM_PDOCUMENT      (WM_USER+0) <br> <br> <br>/** <br> ** CDocumentAdviseSink through which a document notifies the <br> ** frame or important events. <br> **/ <br> <br>class CDocumentAdviseSink <br>    { <br>    protected: <br>        LPVOID      m_pv;               //Customizable structure <br> <br>    public: <br>        CDocumentAdviseSink(LPVOID); <br> <br>        virtual void OnDataChange(PCDocument); <br>        virtual void OnCloseRequest(PCDocument); <br>        virtual void OnSizeChange(PCDocument, LPRECT); <br>        virtual void OnCaptionChange(PCDocument); <br>        virtual void OnActivate(PCDocument); <br>    }; <br> <br>typedef CDocumentAdviseSink *PCDocumentAdviseSink; <br> <br> <br>/** <br> ** CHatchWin when used as a parent window creates a thin <br> ** hatch border around the child window. <br> **/ <br> <br>BOOL FHatchWindowRegister(HINSTANCE); <br> <br>//Classname <br>#define SZCLASSHATCHWIN                 TEXT("hatchwin") <br> <br>//Window extra bytes and offsets <br>#define CBHATCHWNDEXTRA                 (sizeof(LONG)) <br>#define HWWL_STRUCTURE                  0 <br> <br>//Notification codes for WM_COMMAND messages <br>#define HWN_BORDERDOUBLECLICKED         1 <br> <br>//Width of the border <br>#define HATCHWIN_BORDERWIDTHDEFAULT     4 <br> <br> <br>class CHatchWin : public CWindow <br>    { <br>    friend LRESULT APIENTRY HatchWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    public: <br>        int         m_dBorder; <br>        UINT        m_uID; <br>        HWND        m_hWndKid; <br>        HWND        m_hWndAssociate; <br> <br>    public: <br>        CHatchWin(HINSTANCE); <br>        ~CHatchWin(void); <br> <br>        BOOL      FInit(HWND, UINT, HWND); <br> <br>        HWND      HwndAssociateSet(HWND); <br>        HWND      HwndAssociateGet(void); <br> <br>        void      RectsSet(LPRECT, LPRECT); <br>        void      ChildSet(HWND); <br>    }; <br> <br>typedef CHatchWin *PCHatchWin; <br> <br> <br>#endif //_CLASSLIB_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

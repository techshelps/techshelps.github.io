<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INOLE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1080"></a>INOLE.H</h2>
<pre><code>/* <br> * INOLE.H <br> * <br> * Master header file for all Inside OLE samples. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _INOLE_H_ <br>#define _INOLE_H_ <br> <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br>#include &lt;ole2.h&gt; <br>#include &lt;ole2ver.h&gt; <br> <br>#ifdef INC_OLEUI <br>#ifdef WIN32 <br>/* <br> * Comment the next line and remove the comment from the <br> * line after it to compile for Windows NT 3.5. <br> */ <br>#include &lt;oledlg.h&gt; <br>//#include &lt;ole2ui.h&gt; <br>#else <br>#include &lt;ole2ui.h&gt; <br>#endif <br>#endif <br> <br>#include &lt;bookguid.h&gt; <br> <br>#ifdef INC_CONTROLS <br>#define INC_AUTOMATION <br>#endif <br> <br>#ifdef INC_AUTOMATION <br>#ifndef WIN32 <br>#include &lt;dispatch.h&gt; <br>#include &lt;olenls.h&gt; <br>#else <br>#include &lt;oleauto.h&gt; <br>#endif <br>#endif <br> <br>#ifdef INC_CONTROLS <br>#include &lt;olectl.h&gt; <br>#ifndef INITGUIDS <br>#include &lt;olectlid.h&gt; <br>#endif <br>#endif <br> <br>#ifdef WIN32 <br>#include &lt;tchar.h&gt; <br>#ifdef UNICODE <br>#include &lt;wchar.h&gt; <br>#endif <br>#endif <br> <br>#ifndef WIN32 <br>#include &lt;shellapi.h&gt; <br>#include &lt;malloc.h&gt; <br>#endif <br> <br>#include &lt;book1632.h&gt; <br>#include &lt;dbgout.h&gt; <br> <br>#ifdef INC_CLASSLIB <br>extern "C" <br>    { <br>    #include &lt;commdlg.h&gt; <br>   #ifndef WIN32 <br>    #include &lt;print.h&gt; <br>    #include &lt;dlgs.h&gt; <br>   #endif <br>    } <br> <br>#include &lt;classlib.h&gt; <br>#endif <br> <br> <br>//Types that OLE2.H et. al. leave out <br> <br>#ifndef PPVOID <br>typedef LPVOID * PPVOID; <br>#endif  //PPVOID <br> <br> <br>#ifdef _OLE2_H_   //May not include ole2.h at all times. <br> <br>#ifndef PPOINTL <br>typedef POINTL * PPOINTL; <br>#endif  //PPOINTL <br> <br> <br>#ifndef _WIN32 <br>#ifndef OLECHAR <br>typedef char OLECHAR; <br>typedef OLECHAR FAR* LPOLESTR; <br>typedef const OLECHAR FAR* LPCOLESTR; <br>#endif //OLECHAR <br>#endif //_WIN32 <br> <br> <br>//Useful macros. <br>#define SETFormatEtc(fe, cf, asp, td, med, li)   \ <br>    {\ <br>    (fe).cfFormat=cf;\ <br>    (fe).dwAspect=asp;\ <br>    (fe).ptd=td;\ <br>    (fe).tymed=med;\ <br>    (fe).lindex=li;\ <br>    } <br> <br>#define SETDefFormatEtc(fe, cf, med)   \ <br>    {\ <br>    (fe).cfFormat=cf;\ <br>    (fe).dwAspect=DVASPECT_CONTENT;\ <br>    (fe).ptd=NULL;\ <br>    (fe).tymed=med;\ <br>    (fe).lindex=-1;\ <br>    } <br> <br> <br>#define SETRECTL(rcl, l, t, r, b) \ <br>    {\ <br>    (rcl).left=l;\ <br>    (rcl).top=t;\ <br>    (rcl).right=r;\ <br>    (rcl).bottom=b;\ <br>    } <br> <br>#define SETSIZEL(szl, h, v) \ <br>    {\ <br>    (szl).cx=h;\ <br>    (szl).cy=v;\ <br>    } <br> <br> <br>#define RECTLFROMRECT(rcl, rc)\ <br>    {\ <br>    (rcl).left=(long)(rc).left;\ <br>    (rcl).top=(long)(rc).top;\ <br>    (rcl).right=(long)(rc).right;\ <br>    (rcl).bottom=(long)(rc).bottom;\ <br>    } <br> <br> <br>#define RECTFROMRECTL(rc, rcl)\ <br>    {\ <br>    (rc).left=(int)(rcl).left;\ <br>    (rc).top=(int)(rcl).top;\ <br>    (rc).right=(int)(rcl).right;\ <br>    (rc).bottom=(int)(rcl).bottom;\ <br>    } <br> <br> <br>#define POINTLFROMPOINT(ptl, pt) \ <br>    { \ <br>    (ptl).x=(long)(pt).x; \ <br>    (ptl).y=(long)(pt).y; \ <br>    } <br> <br> <br>#define POINTFROMPOINTL(pt, ptl) \ <br>    { \ <br>    (pt).x=(int)(ptl).x; \ <br>    (pt).y=(int)(ptl).y; \ <br>    } <br> <br>//Here's one that should be in windows.h <br>#define SETPOINT(pt, h, v) \ <br>    {\ <br>    (pt).x=h;\ <br>    (pt).y=v;\ <br>    } <br> <br>#define SETPOINTL(ptl, h, v) \ <br>    {\ <br>    (ptl).x=h;\ <br>    (ptl).y=v;\ <br>    } <br> <br>#endif  //_OLE2_H_ <br> <br>#ifdef INC_AUTOMATION <br> <br>//Macros for setting DISPPARAMS structures <br>#define SETDISPPARAMS(dp, numArgs, pvArgs, numNamed, pNamed) \ <br>    {\ <br>    (dp).cArgs=numArgs;\ <br>    (dp).rgvarg=pvArgs;\ <br>    (dp).cNamedArgs=numNamed;\ <br>    (dp).rgdispidNamedArgs=pNamed;\ <br>    } <br> <br>#define SETNOPARAMS(dp) SETDISPPARAMS(dp, 0, NULL, 0, NULL) <br> <br>//Macros for setting EXCEPINFO structures <br>#define SETEXCEPINFO(ei, excode, src, desc, file, ctx, func, scd) \ <br>    {\ <br>    (ei).wCode=excode;\ <br>    (ei).wReserved=0;\ <br>    (ei).bstrSource=src;\ <br>    (ei).bstrDescription=desc;\ <br>    (ei).bstrHelpFile=file;\ <br>    (ei).dwHelpContext=ctx;\ <br>    (ei).pvReserved=NULL;\ <br>    (ei).pfnDeferredFillIn=func;\ <br>    (ei).scode=scd;\ <br>    } <br> <br> <br>#define INITEXCEPINFO(ei) \ <br>        SETEXCEPINFO(ei,0,NULL,NULL,NULL,0L,NULL,S_OK) <br> <br>#endif <br> <br> <br>/* <br> * State flags for IPersistStorage implementations.  These <br> * are kept here to avoid repeating the code in all samples. <br> */ <br> <br>typedef enum <br>    { <br>    PSSTATE_UNINIT,     //Uninitialized <br>    PSSTATE_SCRIBBLE,   //Scribble <br>    PSSTATE_ZOMBIE,     //No scribble <br>    PSSTATE_HANDSOFF    //Hand-off <br>    } PSSTATE; <br> <br> <br>/* <br> * Identifers to describe which persistence model an object <br> * is using, along with a union type that holds on the the <br> * appropriate pointers that a client may need. <br> */ <br>typedef enum <br>    { <br>    PERSIST_UNKNOWN=0, <br>    PERSIST_STORAGE, <br>    PERSIST_STREAM, <br>    PERSIST_STREAMINIT, <br>    PERSIST_FILE <br>    } PERSIST_MODEL; <br> <br>typedef struct <br>    { <br>    PERSIST_MODEL   psModel; <br>    union <br>        { <br>        IPersistStorage    *pIPersistStorage; <br>        IPersistStream     *pIPersistStream; <br>       #ifdef INC_CONTROLS <br>        IPersistStreamInit *pIPersistStreamInit; <br>       #endif <br>        IPersistFile       *pIPersistFile; <br>        } pIP; <br> <br>    } PERSISTPOINTER, *PPERSISTPOINTER; <br> <br> <br>//To identify a storage in which to save, load, or create. <br>typedef struct <br>    { <br>    PERSIST_MODEL   psModel; <br>    union <br>        { <br>        IStorage    *pIStorage; <br>        IStream     *pIStream; <br>        } pIS; <br> <br>    } STGPOINTER, *PSTGPOINTER; <br> <br> <br> <br>//Type for an object-destroyed callback <br>typedef void (*PFNDESTROYED)(void); <br> <br> <br>//DeleteInterfaceImp calls 'delete' and NULLs the pointer <br>#define DeleteInterfaceImp(p)\ <br>            {\ <br>            if (NULL!=p)\ <br>                {\ <br>                delete p;\ <br>                p=NULL;\ <br>                }\ <br>            } <br> <br> <br>//ReleaseInterface calls 'Release' and NULLs the pointer <br>#define ReleaseInterface(p)\ <br>            {\ <br>            IUnknown *pt=(IUnknown *)p;\ <br>            p=NULL;\ <br>            if (NULL!=pt)\ <br>                pt-&gt;Release();\ <br>            } <br> <br> <br>//OLE Documents Clipboard Formats <br> <br>#define CFSTR_EMBEDSOURCE       TEXT("Embed Source") <br>#define CFSTR_EMBEDDEDOBJECT    TEXT("Embedded Object") <br>#define CFSTR_LINKSOURCE        TEXT("Link Source") <br>#define CFSTR_CUSTOMLINKSOURCE  TEXT("Custom Link Source") <br>#define CFSTR_OBJECTDESCRIPTOR  TEXT("Object Descriptor") <br>#define CFSTR_LINKSRCDESCRIPTOR TEXT("Link Source Descriptor") <br> <br> <br> <br>//Functions in the helper DLL, INOLE.DLL <br> <br>//UI Effects <br>STDAPI_(void) UIDrawHandles(LPRECT, HDC, DWORD, UINT, BOOL); <br>STDAPI_(void) UIDrawShading(LPRECT, HDC, DWORD, UINT); <br>STDAPI_(void) UIShowObject(LPCRECT, HDC, BOOL); <br> <br>//For UIDrawHandles <br>#define UI_HANDLES_USEINVERSE    0x00000001L <br>#define UI_HANDLES_NOBORDER      0x00000002L <br>#define UI_HANDLES_INSIDE        0x00000004L <br>#define UI_HANDLES_OUTSIDE       0x00000008L <br> <br>//For UIDrawShading <br>#define UI_SHADE_FULLRECT        1 <br>#define UI_SHADE_BORDERIN        2 <br>#define UI_SHADE_BORDEROUT       3 <br> <br>//Coordinate Munging <br>STDAPI_(int)  XformWidthInHimetricToPixels(HDC,  int); <br>STDAPI_(int)  XformWidthInPixelsToHimetric(HDC,  int); <br>STDAPI_(int)  XformHeightInHimetricToPixels(HDC, int); <br>STDAPI_(int)  XformHeightInPixelsToHimetric(HDC, int); <br> <br>STDAPI_(void) XformRectInPixelsToHimetric(HDC, LPRECT,  LPRECT); <br>STDAPI_(void) XformRectInHimetricToPixels(HDC, LPRECT,  LPRECT); <br>STDAPI_(void) XformSizeInPixelsToHimetric(HDC, LPSIZEL, LPSIZEL); <br>STDAPI_(void) XformSizeInHimetricToPixels(HDC, LPSIZEL, LPSIZEL); <br> <br> <br>//Helpers <br>STDAPI_(void)     INOLE_MetafilePictIconFree(HGLOBAL); <br>STDAPI            INOLE_SwitchDisplayAspect(IUnknown *, LPDWORD, DWORD <br>                      , HGLOBAL, BOOL, BOOL, IAdviseSink *, BOOL *); <br>STDAPI            INOLE_SetIconInCache(IUnknown *, HGLOBAL); <br>STDAPI_(UINT)     INOLE_GetUserTypeOfClass(REFCLSID, UINT, LPTSTR <br>                      , UINT); <br>STDAPI            INOLE_DoConvert(IStorage *, REFCLSID); <br>STDAPI_(LPTSTR)   INOLE_CopyString(LPTSTR); <br>STDAPI_(HGLOBAL)  INOLE_ObjectDescriptorFromOleObject(IOleObject * <br>                      , DWORD, POINTL, LPSIZEL); <br>STDAPI_(HGLOBAL)  INOLE_AllocObjectDescriptor(CLSID, DWORD <br>                      , SIZEL, POINTL, DWORD, LPTSTR, LPTSTR); <br>STDAPI_(IStorage *) INOLE_CreateStorageOnHGlobal(DWORD); <br>STDAPI            INOLE_GetLinkSourceData(IMoniker *, LPCLSID <br>                      , LPFORMATETC, LPSTGMEDIUM); <br>STDAPI_(void)     INOLE_RegisterAsRunning(IUnknown *, IMoniker * <br>                      , DWORD, LPDWORD); <br>STDAPI_(void)     INOLE_RevokeAsRunning(LPDWORD); <br>STDAPI_(void)     INOLE_NoteChangeTime(DWORD, FILETIME *, LPTSTR); <br> <br> <br> <br>/* <br> * These are for ANSI compilations on Win32.  Source code assumes <br> * a Win32 Unicode environment (or Win16 Ansi).  These macros <br> * route Win32 ANSI compiled functions to wrappers which do the <br> * proper Unicode conversion. <br> */ <br> <br> <br>#ifdef WIN32ANSI <br>STDAPI INOLE_ConvertStringToANSI(LPCWSTR, LPSTR *); <br>STDAPI INOLE_StringFromCLSID(REFCLSID, LPSTR *); <br>STDAPI INOLE_StringFromGUID2(REFGUID, LPSTR, int); <br>STDAPI INOLE_ProgIDFromCLSID(REFCLSID, LPSTR *); <br> <br>STDAPI INOLE_ReadFmtUserTypeStg(IStorage *, CLIPFORMAT *, LPSTR *); <br>STDAPI INOLE_WriteFmtUserTypeStg(IStorage *, CLIPFORMAT, LPSTR); <br> <br>STDAPI INOLE_StgIsStorageFile(LPCSTR); <br>STDAPI INOLE_StgCreateDocfile(LPCSTR, DWORD, DWORD, IStorage **); <br>STDAPI INOLE_StgOpenStorage(LPCSTR, IStorage *, DWORD, SNB <br>           , DWORD, IStorage **); <br> <br> <br>STDAPI INOLE_CreateFileMoniker(LPCSTR, LPMONIKER *); <br>STDAPI INOLE_CreateItemMoniker(LPCSTR, LPCSTR, LPMONIKER *); <br>STDAPI INOLE_MkParseDisplayName(LPBC, LPCSTR, ULONG *, LPMONIKER *); <br> <br>STDAPI INOLE_OleCreateLinkToFile(LPCSTR, REFIID, DWORD, LPFORMATETC <br>           , LPOLECLIENTSITE, LPSTORAGE, LPVOID *); <br>STDAPI INOLE_OleCreateFromFile(REFCLSID, LPCSTR, REFIID <br>           , DWORD, LPFORMATETC, LPOLECLIENTSITE, LPSTORAGE, LPVOID *); <br> <br> <br>#ifndef NOMACROREDIRECT <br>#undef StringFromCLSID <br>#define StringFromCLSID(c, pp) INOLE_StringFromCLSID(c, pp) <br> <br>#undef StringFromGUID2 <br>#define StringFromGUID2(r, p, i) INOLE_StringFromGUID2(r, p, i) <br> <br>#undef ProgIDFromCLSID <br>#define ProgIDFromCLSID(c, pp) INOLE_ProgIDFromCLSID(c, pp) <br> <br>#undef ReadFmtUserTypeStg <br>#define ReadFmtUserTypeStg(p, c, s) INOLE_ReadFmtUserTypeStg(p, c, s) <br> <br>#undef WriteFmtUserTypeStg <br>#define WriteFmtUserTypeStg(p, c, s) INOLE_WriteFmtUserTypeStg(p, c, s) <br> <br>#undef StgIsStorageFile <br>#define StgIsStorageFile(s) INOLE_StgIsStorageFile(s) <br> <br>#undef StgCreateDocfile <br>#define StgCreateDocfile(a, b, c, d) INOLE_StgCreateDocfile(a, b, c, d) <br> <br>#undef StgOpenStorage <br>#define StgOpenStorage(a,b,c,d,e,f) INOLE_StgOpenStorage(a,b,c,d,e,f) <br> <br>#undef CreateFileMoniker <br>#define CreateFileMoniker(p, i) INOLE_CreateFileMoniker(p, i) <br> <br>#undef CreateItemMoniker <br>#define CreateItemMoniker(p1, p2, i) INOLE_CreateItemMoniker(p1, p2, i) <br> <br>#undef MkParseDisplayName <br>#define MkParseDisplayName(b, p, u, i) INOLE_MkParseDisplayName(b, p, u, i) <br> <br>#undef OleCreateLinkToFile <br>#define OleCreateLinkToFile(s, i, d, fe, cs, st, pv) INOLE_OleCreateLinkToFile(s, i, d, fe, cs, st, pv) <br> <br>#undef OleCreateFromFile <br>#define OleCreateFromFile(c, s, i, d, fe, cs, st, pv) INOLE_OleCreateFromFile(c, s, i, d, fe, cs, st, pv) <br> <br> <br>#endif <br> <br>#endif <br> <br> <br> <br>#endif //_INOLE_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

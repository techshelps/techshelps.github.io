<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BOOK1632.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1068"></a>BOOK1632.H</h2>
<pre><code>/* <br> * BOOK1632.H <br> * <br> * Macros and other definitions that assist in porting between Win16 <br> * and Win32 applications.  Defines WIN32 to enable 32-bit versions. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  INTERNET&gt;kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _BOOK1632_H_ <br>#define _BOOK1632_H_ <br> <br>#ifdef WIN32 <br> <br>#ifndef COMMANDPARAMS <br>#define COMMANDPARAMS(wID, wCode, hWndMsg)                          \ <br>    WORD        wID     = LOWORD(wParam);                           \ <br>    WORD        wCode   = HIWORD(wParam);                           \ <br>    HWND        hWndMsg = (HWND)(UINT)lParam; <br>#endif  //COMMANDPARAMS <br> <br>#ifndef SendCommand <br>#define SendCommand(hWnd, wID, wCode, hControl)                     \ <br>            SendMessage(hWnd, WM_COMMAND, MAKEWPARAM(wID, wCode)    \ <br>                        , (LPARAM)hControl) <br>#endif  //SendCommand <br> <br>#ifndef MENUSELECTPARAMS <br>#define MENUSELECTPARAMS(wID, wFlags, hMenu)                        \ <br>    WORD        wID     = LOWORD(wParam);                           \ <br>    WORD        wFlags  = HIWORD(wParam);                           \ <br>    HMENU       hMenu   = (HMENU)lParam; <br>#endif  //MENUSELECTPARAMS <br> <br> <br>#ifndef SendMenuSelect <br>#define SendMenuSelect(hWnd, wID, wFlags, hMenu)                    \ <br>            SendMessage(hWnd, WM_MENUSELECT                         \ <br>                , MAKEWPARAM((WORD)wID, (WORD)wFlags), (LPARAM)hMenu) <br> <br>#endif  //SendMenuSelect <br> <br>#ifndef SendScrollPosition <br>#define SendScrollPosition(hWnd, iMsg, iPos)                        \ <br>            SendMessage(hWnd, iMsg, MAKEWPARAM(SB_THUMBPOSITION, iPos), 0) <br>#endif //SendScrollPosition <br> <br>#ifndef ScrollThumbPosition <br>#define ScrollThumbPosition(w, l) HIWORD(w) <br>#endif //ScrollThumbPosition <br> <br>#ifndef GETWINDOWINSTANCE <br>#define GETWINDOWINSTANCE(h) (HINSTANCE)GetWindowLong(h, GWL_HINSTANCE) <br>#endif  //GETWINDOWINSTANCE <br> <br>#ifndef GETWINDOWID <br>#define GETWINDOWID(h) (UINT)GetWindowLong(h, GWW_ID) <br>#endif  //GETWINDOWID <br> <br>#ifndef POINTFROMLPARAM <br>#define POINTFROMLPARAM(p, l) {p.x=(LONG)(SHORT)LOWORD(l); \ <br>                               p.y=(LONG)(SHORT)HIWORD(l);} <br>#endif  //POINTEFROMLPARAM <br> <br>#ifndef MDIREFRESHMENU <br>#define MDIREFRESHMENU(h) SendMessage(h, WM_MDIREFRESHMENU, 0, 0L) <br>#endif  //MDIREFRESHMENU <br> <br> <br>//Activated child window in WM_MDIACTIVATE <br>#ifndef NEWMDIACTIVE <br>#define NEWMDIACTIVE lParam <br>#endif  //NEWMDIACTIVE <br> <br>#ifndef UNICODETOANSI <br>#ifdef UNICODE <br>#define UNICODETOANSI(s, d, cch) WideCharToMultiByte(CP_ACP \ <br>            , 0, s, -1, d, cch, NULL, NULL) <br>#else  //ANSI <br>#define UNICODETOANSI(s, d, cch) lstrcpy(d, (LPTSTR)s) <br>#endif <br>#endif //UNICODETOANSI <br> <br> <br>//****END WIN32 <br> <br> <br> <br>#else <br> <br> <br> <br>//****START !WIN32 <br> <br>#ifndef POINTS <br>typedef POINT POINTS; <br>#endif  //POINTS <br> <br>#ifndef LPPOINTS <br>typedef POINTS FAR *LPPOINTS; <br>#endif  //LPPOINTS <br> <br>#ifndef MAKEPOINTS <br>#define MAKEPOINTS MAKEPOINT <br>#endif  //MAKEPOINTS <br> <br> <br>#ifndef COMMANDPARAMS <br>#define COMMANDPARAMS(wID, wCode, hWndMsg)                          \ <br>    WORD        wID     = LOWORD(wParam);                           \ <br>    WORD        wCode   = HIWORD(lParam);                           \ <br>    HWND        hWndMsg = (HWND)(UINT)lParam; <br>#endif  //COMMANDPARAMS <br> <br>#ifndef SendCommand <br>#define SendCommand(hWnd, wID, wCode, hControl)                     \ <br>            SendMessage(hWnd, WM_COMMAND, wID                       \ <br>                        , MAKELONG(hControl, wCode)) <br>#endif  //SendCommand <br> <br>#ifndef MENUSELECTPARAMS <br>#define MENUSELECTPARAMS(wID, wFlags, hMenu)                        \ <br>    WORD        wID     = LOWORD(wParam);                           \ <br>    WORD        wFlags  = LOWORD(lParam);                           \ <br>    HMENU       hMenu   = (HMENU)HIWORD(lParam); <br>#endif  //MENUSELECTPARAMS <br> <br>#ifndef SendMenuSelect <br>#define SendMenuSelect(hWnd, wID, wFlags, hMenu)                    \ <br>            SendMessage(hWnd, WM_MENUSELECT, wID                    \ <br>                        , MAKELONG((WORD)wFlags, (WORD)hMenu)) <br>#endif  //SendMenuSelect <br> <br>#ifndef SendScrollPosition <br>#define SendScrollPosition(hWnd, iMsg, iPos)                        \ <br>            SendMessage(hWnd, iMsg, SB_THUMBPOSITION, MAKELONG(iPos, 0)) <br>#endif //Send ScrollPosition <br> <br>#ifndef ScrollThumbPosition <br>#define ScrollThumbPosition(w, l) LOWORD(l) <br>#endif //ScrollThumbPosition <br> <br>#ifndef GETWINDOWINSTANCE <br>#define GETWINDOWINSTANCE(h) (HINSTANCE)GetWindowWord(h, GWW_HINSTANCE) <br>#endif  //GETWINDOWINSTANCE <br> <br>#ifndef GETWINDOWID <br>#define GETWINDOWID(h) (UINT)GetWindowWord(h, GWW_ID) <br>#endif  //GETWINDOWID <br> <br>#ifndef POINTFROMLPARAM <br>#define POINTFROMLPARAM(p, l) {p.x=LOWORD(l); p.y=HIWORD(l);} <br>#endif  //POINTEFROMLPARAM <br> <br>#ifndef MDIREFRESHMENU <br>#define MDIREFRESHMENU(h) SendMessage(h, WM_MDISETMENU, TRUE, 0L) <br>#endif  //MDIREFRESHMENU <br> <br>//Activated child window in WM_MDIACTIVATE <br>#ifndef NEWMDIACTIVE <br>#define NEWMDIACTIVE wParam <br>#endif  //NEWMDIACTIVE <br> <br> <br>//Things not present in Win3.1 SDK but present in Win32 SDK. <br> <br>#ifndef APIENTRY <br>#define APIENTRY __export FAR PASCAL <br>#endif  //APIENTRY <br> <br>#ifndef USHORT <br>typedef unsigned short USHORT; <br>#endif  //USHORT <br> <br>//These are so we can write ANSI/UNICODE portable code. <br>#ifndef TCHAR <br>typedef char TCHAR; <br>#endif  //TCHAR <br> <br>#ifndef LPTSTR <br>typedef TCHAR *LPTSTR; <br>#endif  //LPTSTR <br> <br>#ifndef LPCTSTR <br>typedef const TCHAR *LPCTSTR; <br>#endif  //LPCTSTR <br> <br>#ifndef _tcsncpy <br>#define _tcsncpy strncpy <br>#endif  //_tcsncpy <br> <br>#ifndef lstrcpyA <br>#define lstrcpyA lstrcpy <br>#endif  //lstrcpyA <br> <br>#ifndef lstrcmpiA <br>#define lstrcmpiA lstrcmpi <br>#endif  //lstrcmpiA <br> <br>#ifndef TEXT <br>#define TEXT(a) a <br>#endif  //TEXT <br> <br>#ifndef DeleteFile <br>#define DeleteFile(f)                       \ <br>            {                               \ <br>            OFSTRUCT    of;                 \ <br>            OpenFile(f, &amp;of, OF_DELETE);    \ <br>            } <br>#endif  //DeleteFile <br> <br>#ifndef UNICODETOANSI <br>#define UNICODETOANSI(s, d, cch) lstrcpy(d, (LPTSTR)s) <br>#endif  //UNICODETOANSI <br> <br>#ifndef SetForegroundWindow <br>#define SetForegroundWindow(w) SetActiveWindow(w) <br>#endif  //SetForegroundWindow <br> <br>#endif  //!WIN32 <br> <br> <br>//These definitions we need regardless of Win16 or Win32 <br> <br>typedef struct <br>    { <br>    short   left; <br>    short   top; <br>    short   right; <br>    short   bottom; <br>    } RECTS, FAR *LPRECTS; <br> <br>#define RECTSTORECT(rs, r) {(r).left=(rs).left;(r).top=(rs).top; \ <br>    (r).right=(rs).right;(r).bottom=(rs).bottom;}; <br> <br>#define RECTTORECTS(r, rs) {(rs).left=(short)(r).left;   \ <br>    (rs).top=(short)(r).top;(rs).right=(short)(r).right; \ <br>    (rs).bottom=(short)(r).bottom;}; <br> <br>#endif  //_BOOK1632_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

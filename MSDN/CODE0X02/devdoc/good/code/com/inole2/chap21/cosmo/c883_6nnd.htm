<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DROPTGT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context889"></a>DROPTGT.CPP</h2>
<pre><code>/* <br> * DROPTGT.CPP <br> * Cosmo Chapter 21 <br> * <br> * Implementation of the IDropTarget interface. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cosmo.h" <br> <br> <br>/* <br> * CDropTarget::CDropTarget <br> * CDropTarget::~CDropTarget <br> * <br> * Constructor Parameters: <br> *  pDoc            PCCosmoDoc of the document containing us. <br> */ <br> <br>CDropTarget::CDropTarget(PCCosmoDoc pDoc) <br>    { <br>    m_cRef=0; <br>    m_pDoc=pDoc; <br> <br>    m_pIDataObject=NULL; <br>    return; <br>    } <br> <br> <br>CDropTarget::~CDropTarget(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CDropTarget::QueryInterface <br> * CDropTarget::AddRef <br> * CDropTarget::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDropTarget object. <br> */ <br> <br>STDMETHODIMP CDropTarget::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IDropTarget==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDropTarget::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDropTarget::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragEnter <br> * <br> * Purpose: <br> *  Indicates that data in a drag operation has been dragged over <br> *  our window that's a potential target.  We are to decide if it's <br> *  something we're interested in or not. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT providing the source data. <br> *  grfKeyState     DWORD flags: states of keys and mouse buttons. <br> *  pt              POINTL coordinates in the document client space. <br> *  pdwEffect       LPDWORD into which we'll place the <br> *                  appropriate effect flag for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragEnter(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    HWND        hWnd; <br> <br>    /* <br>     * 1.  Check if we can paste from the pIDataSource we're <br>     *     provided. We already made this nice useful function <br>     *     to test. <br>     */ <br> <br>    m_pIDataObject=NULL; <br> <br>    if (!m_pDoc-&gt;FQueryPasteFromData(pIDataSource)) <br>        { <br>        *pdwEffect=DROPEFFECT_NONE; <br>        return NOERROR; <br>        } <br> <br> <br>    /* <br>     * 2.  We can always drop anywhere in our document, <br>     *     so pt is uninteresting. <br>     */ <br> <br> <br>    /* <br>     * 3. We return either a COPY or MOVE effect flag, depending on <br>     *    the state of the grfKeyState flags.  We MOVE on no key or <br>     *    Shift key, COPY on Ctrl key. <br>     */ <br> <br>    //Default is move <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    /* <br>     * 4. We really don't need to keep the IDataObject around since <br>     *    we're not interested in it in DragOver.  However, we'll <br>     *    save it just for demonstration. <br>     */ <br>    m_pIDataObject=pIDataSource; <br>    m_pIDataObject-&gt;AddRef(); <br> <br>    /* <br>     * 5.  We always accept drops of our data on us, so we only need <br>     *     to provide some UI feedback here which we do by inverting <br>     *     the edge of the polyline window in this document.  We'll <br>     *     remove this in DragLeave and in Drop.  DragOver won't <br>     *     effect it since we can always drop. <br>     * <br>     *     Since we're inverting a border, insure that this window is <br>     *     on top. <br>     */ <br> <br>    hWnd=m_pDoc-&gt;Window(); <br>    BringWindowToTop(hWnd); <br>    UpdateWindow(hWnd); <br>    m_pDoc-&gt;DropSelectTargetWindow(); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragOver <br> * <br> * Purpose: <br> *  Indicates that the mouse was moved inside the window represented <br> *  by this drop target. This happens on every WM_MOUSEMOVE, so this <br> *  function should be very efficient. <br> * <br> * Parameters: <br> *  grfKeyState     DWORD providing current keyboard/mouse states <br> *  pt              POINTL where the mouse currently is. <br> *  pdwEffect       LPDWORD to store the effect flag for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragOver(DWORD grfKeyState, POINTL pt <br>    , LPDWORD pdwEffect) <br>    { <br>    if (NULL==m_pIDataObject) <br>        { <br>        *pdwEffect=DROPEFFECT_NONE; <br>        return NOERROR; <br>        } <br> <br>    //We can always drop; return effect flags based on keys. <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragLeave <br> * <br> * Purpose: <br> *  Informs the drop target that the operation has left its window. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragLeave(void) <br>    { <br>    //1.  Remove the UI feedback <br>   m_pDoc-&gt;DropSelectTargetWindow(); <br> <br>   //2.  Release the held IDataObject <br>   ReleaseInterface(m_pIDataObject); <br>         <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::Drop <br> * <br> * Purpose: <br> *  Instructs the drop target to paste data that was just now <br> *  dropped on it. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT from which we'll paste. <br> *  grfKeyState     DWORD providing current keyboard/mouse state. <br> *  pt              POINTL at which the drop occurred. <br> *  pdwEffect       LPDWORD to store what you do with the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::Drop(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    BOOL        fRet=TRUE; <br> <br>    *pdwEffect=DROPEFFECT_NONE; <br> <br>    if (NULL==m_pIDataObject) <br>        return ResultFromScode(E_FAIL); <br> <br>    //1.  Remove the UI feedback, release pointer <br>    DragLeave(); <br>     <br>    //No point in drag-drop to ourselves (for Cosmo, at least) <br>    if (m_pDoc-&gt;m_fDragSource) <br>        return ResultFromScode(E_FAIL); <br> <br>    //2.  Try a paste <br>    fRet=m_pDoc-&gt;PasteFromData(pIDataSource); <br> <br>    //3.  Store the effect <br>    if (!fRet) <br>        return ResultFromScode(E_FAIL); <br> <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

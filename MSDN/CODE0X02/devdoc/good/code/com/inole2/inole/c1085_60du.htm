<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GIZMOINT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1092"></a>GIZMOINT.H</h2>
<pre><code>/* <br> * GIZMOINT.H <br> * Gizmobar Internals <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _GIZMOINT_H_ <br>#define _GIZMOINT_H_ <br> <br>#ifdef __cplusplus <br>extern "C" <br>    { <br>#endif <br> <br> <br>typedef struct tagGIZMO <br>    { <br>    struct tagGIZMO     *pPrev; <br>    struct tagGIZMO     *pNext; <br>    UINT                 iType; <br>    HWND                 hWnd;       //Texts, edits, lists, combos <br>    UINT                 uID; <br>    UINT                 x, y; <br>    UINT                 dx, dy; <br>    UINT                 cxImage;    //From UIToolConfigureForDisplay <br>    UINT                 cyImage; <br>    HBITMAP              hBmp;       //Buttons only. <br>    UINT                 iBmp; <br>    BOOL                 fNotify;    //Send WM_COMMANDs? <br>    BOOL                 fHidden;    //Independent of state <br>    BOOL                 fDisabled; <br>    UINT                 uState; <br>    UINT                 uStateOrg; <br>    DWORD                dwData;     //Application-supplied data. <br>    } GIZMO, * PGIZMO; <br> <br>typedef PGIZMO *PPGIZMO; <br>#define CBGIZMO sizeof(GIZMO) <br> <br>//Property name we attach to controls in a gizmo to identify type <br>#define SZTYPEPROP      TEXT("iType") <br> <br>//Number of controls we subclass <br>#define CSUBGIZMOS       4 <br> <br>//ID of edit controls in comboboxes <br>#define ID_COMBOEDIT     1001 <br> <br> <br>/* <br> * Conversion of iType (a positioned bit) into its position. <br> * The BITPOSITION macro does not need to be fast because we only <br> * use it once when creating a gizmo.  POSITIONBIT does, however, <br> * since we use it in subclass procedures. <br> */ <br>#define BITPOSITION(i, j)  {int k=i; for (j=0; k&gt;&gt;=1; j++);} <br>#define POSITIONBIT(i)     (1 &lt;&lt; i) <br> <br>//Control classifications.  GIZMOBAR.H must be included first. <br>#define GIZMOTYPE_WINDOWS   (GIZMOTYPE_TEXT | GIZMOTYPE_EDIT \ <br>                            | GIZMOTYPE_LISTBOX              \ <br>                            | GIZMOTYPE_COMBOBOX             \ <br>                            | GIZMOTYPE_BUTTONNORMAL) <br> <br>#define GIZMOTYPE_BUTTONS   (GIZMOTYPE_BUTTONATTRIBUTEIN     \ <br>                            | GIZMOTYPE_BUTTONATTRIBUTEEX    \ <br>                            | GIZMOTYPE_BUTTONCOMMAND        \ <br>                            | GIZMOTYPE_BUTTONNORMAL) <br> <br>#define GIZMOTYPE_DRAWN     (GIZMOTYPE_BUTTONATTRIBUTEIN     \ <br>                            | GIZMOTYPE_BUTTONATTRIBUTEEX    \ <br>                            | GIZMOTYPE_BUTTONCOMMAND) <br> <br> <br>//These must stay in sync with GIZMOBAR.H <br>#define GIZMOTYPE_MIN               GIZMOTYPE_EDIT <br>#define GIZMOTYPE_MAX               GIZMOTYPE_BUTTONCOMMAND <br> <br> <br>//Enumeration callback <br>typedef BOOL (CALLBACK *PFNGIZMOENUM)(PGIZMO, UINT, DWORD); <br> <br> <br>//GIZMO.C <br>PGIZMO   GizmoPAllocate(int *, PPGIZMO, HWND, UINT, UINT, UINT <br>             , UINT, UINT, LPTSTR, HBITMAP, UINT, UINT); <br>void     GizmosExpand(PGIZMO); <br>PGIZMO   GizmoPFree(PPGIZMO, PGIZMO); <br>void     GizmosCompact(PGIZMO); <br>PGIZMO   GizmoPFind(PPGIZMO, UINT); <br>PGIZMO   GizmoPEnum(PPGIZMO, PFNGIZMOENUM, DWORD); <br>UINT     GizmoPStateSet(HWND, PGIZMO, UINT); <br>BOOL     GizmoPCheck(HWND, PGIZMO, BOOL); <br> <br> <br>LRESULT APIENTRY GenericSubProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br> <br>/* <br> * The main gizmobar structure itself.  There's only one of these, <br> * but it references the first GIZMO in the list. <br> */ <br> <br>typedef struct tagGIZMOBAR <br>    { <br>    PGIZMO      pGizmos;            //List of gizmos we own. <br>    HWND        hWnd;               //Window handle of ourselves. <br>    HINSTANCE   hInst; <br>    HWND        hWndAssociate;      //Associate who gets messages. <br>    DWORD       dwStyle;            //Copy of GWL_STYLE <br>    UINT        uState;             //State flags <br>    UINT        uID;                //Control ID. <br> <br>    HBRUSH      hBrFace;            //Static control background color <br>    COLORREF    crFace;             //Color of hBrFace <br>    HFONT       hFont;              //Font in use <br>    BOOL        fEnabled;           //Are we enabled? <br> <br>    PGIZMO      pGizmoTrack;        //Current pressed button. <br>    BOOL        fTracking; <br>    BOOL        fMouseOut; <br>    } GIZMOBAR, * PGIZMOBAR; <br> <br>#define CBGIZMOBAR sizeof(GIZMOBAR) <br> <br> <br>//Extra bytes for the window if the size of a local handle. <br>#define CBEXTRAGIZMOBAR     sizeof(PGIZMOBAR) <br> <br>#define GBWL_STRUCTURE      0 <br> <br> <br>//Structure for passing paint info to a gizmo enumeration callback. <br>typedef struct <br>    { <br>    PAINTSTRUCT         ps; <br>    TOOLDISPLAYDATA     tdd; <br>    } PAINTGIZMO, *PPAINTGIZMO; <br> <br> <br> <br> <br>//GIZMOBAR.C <br>PGIZMOBAR         GizmoBarPAllocate(int *, HWND, HINSTANCE, HWND <br>                      , DWORD, UINT, UINT); <br>PGIZMOBAR         GizmoBarPFree(PGIZMOBAR); <br>LRESULT WINAPI    GizmoBarWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL    WINAPI    FEnumChangeFont(PGIZMO, UINT, DWORD); <br>BOOL    WINAPI    FEnumEnable(PGIZMO, UINT, DWORD); <br>BOOL    WINAPI    FEnumHitTest(PGIZMO, UINT, DWORD); <br>void              GizmoBarPaint(HWND, PGIZMOBAR); <br>BOOL WINAPI       FEnumPaintGizmos(PGIZMO, UINT, DWORD); <br> <br> <br>//GIZMOAPI.C  See GIZMOBAR.H for others <br>LRESULT    GBMessageHandler(HWND, UINT, WPARAM, LPARAM, PGIZMOBAR); <br>PGIZMO     PGizmoFromHwndID(HWND, UINT); <br> <br>#ifdef __cplusplus <br>    } <br>#endif <br> <br> <br>#endif //_GIZMOINT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

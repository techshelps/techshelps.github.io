<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GIZMOAPI.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1090"></a>GIZMOAPI.C</h2>
<pre><code>/* <br> * GIZMOAPI.C <br> * <br> * API functions affecting a GizmoBar and a message processing <br> * function to handle the equivalent called through messages. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "inoledll.h" <br> <br> <br>/* <br> * GBMessageHandler <br> * <br> * Purpose: <br> *  Processes control messages that are equivalents of available <br> *  control API.  The data passed with these messages is simply <br> *  extracted from structures and passed as parameters to their <br> *  equivalent function. <br> * <br> * Parameters: <br> *  &lt;Standard Message Parameters&gt; plus <br> *  pGB             PGIZMOBAR providing control-specific data. <br> * <br> * Return Value: <br> *  LRESULT         Return value from equivalent API function. <br> */ <br> <br>LRESULT GBMessageHandler(HWND hWnd, UINT iMsg, WPARAM wParam <br>    , LPARAM lParam, PGIZMOBAR pGB) <br>    { <br>    LRESULT         lRet=0L; <br>    LPCREATEGIZMO   pCG; <br>    LPGBMSG         pMsg; <br>    LPGBGETTEXT     pGT; <br>    LPGBGETINT      pGI; <br>    LPGBSETINT      pSI; <br> <br>    if (NULL==pGB) <br>        return 0L; <br> <br>    switch (iMsg) <br>        { <br>        case GBM_HWNDASSOCIATESET: <br>            lRet=(LRESULT)(UINT)GBHwndAssociateSet(hWnd <br>                , (HWND)wParam); <br>            break; <br> <br>        case GBM_HWNDASSOCIATEGET: <br>            lRet=(LRESULT)(UINT)GBHwndAssociateGet(hWnd); <br>            break; <br> <br>        case GBM_GIZMOADD: <br>            pCG=(LPCREATEGIZMO)lParam; <br>            lRet=(LRESULT)GBGizmoAdd(pCG-&gt;hWndParent, pCG-&gt;iType <br>                , pCG-&gt;iGizmo, pCG-&gt;uID, pCG-&gt;dx, pCG-&gt;dy <br>                , pCG-&gt;pszText, pCG-&gt;hBmp, pCG-&gt;iImage, pCG-&gt;uState); <br>            break; <br> <br>        case GBM_GIZMOREMOVE: <br>            lRet=(LRESULT)GBGizmoRemove(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMOSENDMESSAGE: <br>            pMsg=(LPGBMSG)lParam; <br>            lRet=GBGizmoSendMessage(hWnd, wParam, pMsg-&gt;iMsg <br>                , pMsg-&gt;wParam, pMsg-&gt;lParam); <br>            break; <br> <br>        case GBM_GIZMOSHOW: <br>            lRet=(LRESULT)GBGizmoShow(hWnd, wParam <br>                , (BOOL)LOWORD(lParam)); <br>            break; <br> <br>        case GBM_GIZMOENABLE: <br>            lRet=(LRESULT)GBGizmoEnable(hWnd, wParam <br>                , (BOOL)LOWORD(lParam)); <br>            break; <br> <br>        case GBM_GIZMOCHECK: <br>            lRet=(LRESULT)GBGizmoCheck(hWnd, wParam <br>                , (BOOL)LOWORD(lParam)); <br>            break; <br> <br>        case GBM_GIZMOFOCUSSET: <br>            lRet=(LRESULT)GBGizmoFocusSet(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMOEXIST: <br>            lRet=(LRESULT)GBGizmoExist(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMOTYPEGET: <br>            lRet=(LRESULT)GBGizmoTypeGet(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMODATASET: <br>            lRet=(LRESULT)GBGizmoDataSet(hWnd, wParam <br>                , (DWORD)lParam); <br>            break; <br> <br>        case GBM_GIZMODATAGET: <br>            lRet=(LRESULT)GBGizmoDataGet(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMONOTIFYSET: <br>            lRet=(LRESULT)GBGizmoNotifySet(hWnd, wParam <br>                , (BOOL)LOWORD(lParam)); <br>            break; <br> <br>        case GBM_GIZMONOTIFYGET: <br>            lRet=(LRESULT)GBGizmoNotifyGet(hWnd, wParam); <br>            break; <br> <br>        case GBM_GIZMOTEXTGET: <br>            pGT=(LPGBGETTEXT)lParam; <br>            lRet=(LRESULT)GBGizmoTextGet(hWnd, wParam, pGT-&gt;psz <br>                , pGT-&gt;cch); <br>            break; <br> <br>        case GBM_GIZMOTEXTSET: <br>            GBGizmoTextSet(hWnd, wParam, (LPTSTR)lParam); <br>            break; <br> <br>        case GBM_GIZMOINTGET: <br>            pGI=(LPGBGETINT)lParam; <br>            lRet=(LRESULT)GBGizmoIntGet(hWnd, wParam, &amp;pGI-&gt;fSuccess <br>                , pGI-&gt;fSigned); <br>            break; <br> <br> <br>        case GBM_GIZMOINTSET: <br>            pSI=(LPGBSETINT)lParam; <br>            GBGizmoIntSet(hWnd, wParam, pSI-&gt;uValue, pSI-&gt;fSigned); <br>            break; <br> <br>        default: <br>            break; <br>        } <br> <br>    return lRet; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * PGizmoFromHwndID <br> * <br> * Purpose: <br> *  Retrieves the pGizmo for the given GizmoBar and the gizmo ID. <br> * <br> * Parameters: <br> *  hWnd            HWND of a GizmoBar. <br> *  uID             UINT gizmo identifier. <br> * <br> * Return Value: <br> *  PGIZMO          NULL if the gizmo does not exist or hWnd is <br> *                  invalid.  Non-NULL PGIZMO otherwise. <br> */ <br> <br>PGIZMO PGizmoFromHwndID(HWND hWnd, UINT uID) <br>    { <br>    PGIZMOBAR     pGB; <br> <br>    if (!IsWindow(hWnd)) <br>        return FALSE; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL==pGB) <br>        return FALSE; <br> <br>    return GizmoPFind(&amp;pGB-&gt;pGizmos, uID); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBHwndAssociateSet <br> * <br> * Purpose: <br> *  Changes the associate window of a GizmoBar. <br> * <br> * Parameters: <br> *  hWnd            HWND of the control window. <br> * <br> * Set Parameters: <br> *  hWndAssociate   HWND of new associate. <br> * <br> * Return Value: <br> *  HWND            Handle of previous associate. <br> */ <br> <br>HWND WINAPI GBHwndAssociateSet(HWND hWnd, HWND hWndNew) <br>    { <br>    HWND        hWndOld=NULL; <br>    PGIZMOBAR   pGB; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL!=pGB) <br>        { <br>        hWndOld=pGB-&gt;hWndAssociate; <br>        pGB-&gt;hWndAssociate=hWndNew; <br> <br>        if (NULL!=hWndOld) <br>            SendCommand(hWndOld, pGB-&gt;uID, GBN_ASSOCIATELOSS, hWnd); <br> <br>        if (NULL!=hWndNew) <br>            SendCommand(hWndNew, pGB-&gt;uID, GBN_ASSOCIATEGAIN, hWnd); <br>        } <br> <br>    return hWndOld; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBHwndAssociateGet <br> * <br> * Purpose: <br> *  Retrieves the associate window of a GizmoBar <br> * <br> * Parameters: <br> *  hWnd            HWND of the control window. <br> * <br> * Set Parameters: <br> *  hWndAssociate   HWND of new associate. <br> * <br> * Return Value: <br> *  HWND            Handle of current associate. <br> */ <br> <br>HWND WINAPI GBHwndAssociateGet(HWND hWnd) <br>    { <br>    HWND        hWndOld=NULL; <br>    PGIZMOBAR   pGB; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL!=pGB) <br>        hWndOld=pGB-&gt;hWndAssociate; <br> <br>    return hWndOld; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoAdd <br> * <br> * Purpose: <br> *  Creates a new gizmo on the GizmoBar.  Subsequent operations <br> *  should be done using the identifier, uID, for this gizmo. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  iType           UINT type of the gizmo to create. <br> *  iGizmo          UINT position (zero-based) at which to place the <br> *                  gizmo. <br> *  uID             UINT identifier for WM_COMMAND from this gizmo. <br> *  dx, dy          UINT dimensions of the gizmo. <br> *  pszText         LPTSTR initial text for edit, list, combo, and <br> *                  text gizmos. <br> *  hBitmap         HBITMAP for gizmos of the button types (COMMAND <br> *                  or ATTRIBUTE) specifies a source bitmap from <br> *                  which the button image is taken. <br> *  iImage          UINT index into hBitmap for the image for this <br> *                  button. <br> *  uState          UINT initial state of the gizmo. <br> * <br> * Return Value: <br> *  BOOL            TRUE if creation succeeded, FALSE otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoAdd(HWND hWnd, UINT iType, UINT iGizmo, UINT uID <br>    , UINT dx, UINT dy, LPTSTR pszText, HBITMAP hBmp, UINT iImage <br>    , UINT uState) <br>    { <br>    BOOL        fSuccess; <br>    PGIZMOBAR   pGB; <br>    PGIZMO      pGizmo; <br> <br>    if (!IsWindow(hWnd)) <br>        return FALSE; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL==pGB) <br>        return FALSE; <br> <br>    /* <br>     * This automatically creates the windows, allocates structures, <br>     * includes the gizmo in pGB-&gt;pGizmos, and so forth. <br>     */ <br>    pGizmo=GizmoPAllocate(&amp;fSuccess, &amp;pGB-&gt;pGizmos, hWnd, iType <br>        , iGizmo, uID, dx, dy, pszText, hBmp, iImage, uState); <br> <br>    if (fSuccess) <br>        { <br>        if (NULL!=pGB-&gt;hWndAssociate) <br>            { <br>            SendCommand(pGB-&gt;hWndAssociate,GBN_GIZMOADDED, pGB-&gt;uID <br>                , hWnd); <br>            } <br> <br>        InvalidateRect(hWnd, NULL, TRUE); <br>        UpdateWindow(hWnd); <br>        } <br>    else <br>        GizmoPFree(&amp;pGB-&gt;pGizmos, pGizmo); <br> <br>    return fSuccess; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoRemove <br> * <br> * Purpose: <br> *  Removes an existing gizmo from the GizmoBar. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier for this gizmo. <br> * <br> * Return Value: <br> *  BOOL            TRUE if deletion succeeded, FALSE otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoRemove(HWND hWnd, UINT uID) <br>    { <br>    PGIZMOBAR   pGB; <br>    PGIZMO      pGizmo; <br> <br>    if (!IsWindow(hWnd)) <br>        return FALSE; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL==pGB) <br>        return FALSE; <br> <br>    pGizmo=GizmoPFind(&amp;pGB-&gt;pGizmos, uID); <br> <br>    if (NULL==pGizmo) <br>        return FALSE; <br> <br>    GizmoPFree(&amp;pGB-&gt;pGizmos, pGizmo); <br> <br>    if (NULL!=pGB-&gt;hWndAssociate) <br>        { <br>        SendCommand(pGB-&gt;hWndAssociate, GBN_GIZMOREMOVED, pGB-&gt;uID <br>            , hWnd); <br>        } <br> <br>    InvalidateRect(hWnd, NULL, TRUE); <br>    UpdateWindow(hWnd); <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoSendMessage <br> * <br> * Purpose: <br> *  Implements the equivalent of SendMessage to a gizmo in the <br> *  GizmoBar.  Separators, command buttons, and attribute buttons <br> *  do not accept messages. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo to affect. <br> *  iMsg            UINT message to send. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LRESULT         Return value from the message.  0L if the <br> *                  gizmo does not accept messages. <br> */ <br> <br>LRESULT WINAPI GBGizmoSendMessage(HWND hWnd, UINT uID, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PGIZMO      pGizmo; <br>    LONG        lRet=0L; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo &amp;&amp; NULL!=pGizmo-&gt;hWnd) <br>        lRet=SendMessage(pGizmo-&gt;hWnd, iMsg, wParam, lParam); <br> <br>    return lRet; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoShow <br> * <br> * Purpose: <br> *  Shows or hides a control, adjusting the positions of all others <br> *  to make room for or reuse the space for this control. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo to affect. <br> *  fShow           BOOL TRUE to show the gizmo, FALSE to hide it. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function was successful, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoShow(HWND hWnd, UINT uID, BOOL fShow) <br>    { <br>    BOOL        fRet=FALSE; <br>    PGIZMO      pGizmo; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        { <br>        if (fShow &amp;&amp; pGizmo-&gt;fHidden) <br>            { <br>            if (NULL!=pGizmo-&gt;hWnd) <br>                ShowWindow(pGizmo-&gt;hWnd, SW_SHOWNORMAL); <br> <br>            GizmosExpand(pGizmo); <br>            } <br> <br>        if (!fShow &amp;&amp; !pGizmo-&gt;fHidden) <br>            { <br>            if (NULL!=pGizmo-&gt;hWnd) <br>                ShowWindow(pGizmo-&gt;hWnd, SW_HIDE); <br> <br>            GizmosCompact(pGizmo); <br>            } <br> <br>        //This will be right even if we didn't change anything. <br>        pGizmo-&gt;fHidden=!fShow; <br>        } <br> <br>    InvalidateRect(hWnd, NULL, TRUE); <br>    UpdateWindow(hWnd); <br>    return fRet; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoEnable <br> * <br> * Purpose: <br> *  Enables or disables a control on the GizmoBar. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo to affect. <br> *  fEnable         BOOL TRUE to enable the gizmo, FALSE otherwise. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the gizmo was previously disabled, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoEnable(HWND hWnd, UINT uID, BOOL fEnable) <br>    { <br>    PGIZMO      pGizmo; <br>    BOOL        fRet=FALSE; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL==pGizmo) <br>        return FALSE; <br> <br>    fRet=(BOOL)(BUTTONGROUP_DISABLED &amp; pGizmo-&gt;uState); <br> <br>    //Use windows to enable or disable window gizmos <br>    if (NULL!=pGizmo-&gt;hWnd) <br>        EnableWindow(pGizmo-&gt;hWnd, fEnable); <br>    else <br>        { <br>        /* <br>         * If we're not down, command and attribute buttons act <br>         * the same. <br>         */ <br>        if (!(BUTTONGROUP_DOWN &amp; pGizmo-&gt;uState)) <br>            { <br>            GizmoPStateSet(hWnd, pGizmo, fEnable <br>                ? COMMANDBUTTON_UP : COMMANDBUTTON_DISABLED); <br>            } <br>        else <br>            { <br>            /* <br>             * Attribute buttons are a little more sensitive with <br>             * DOWNDISABLED <br>             */ <br>            GizmoPStateSet(hWnd, pGizmo, fEnable <br>                ? ATTRIBUTEBUTTON_DOWN <br>                : ATTRIBUTEBUTTON_DOWNDISABLED); <br>            } <br>        } <br> <br>    return fRet; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoCheck <br> * <br> * Purpose: <br> *  Checks or unchecks an attribute button in the GizmoBar.  If the <br> *  gizmo is part of a group of mutually exclusive attributes, then <br> *  other gizmos are unchecked when this one is checked.  If this is <br> *  the only one checked in these circumstances, this function is a <br> *  NOP. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo to affect. <br> *  fCheck          BOOL TRUE to check this gizmo, FALSE to uncheck. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the change took place.  FALSE otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoCheck(HWND hWnd, UINT uID, BOOL fCheck) <br>    { <br>    PGIZMOBAR   pGB; <br>    PGIZMO      pGizmo; <br> <br>    if (!IsWindow(hWnd)) <br>        return FALSE; <br> <br>    pGB=(PGIZMOBAR)GetWindowLong(hWnd, GBWL_STRUCTURE); <br> <br>    if (NULL==pGB) <br>        return FALSE; <br> <br>    pGizmo=GizmoPFind(&amp;pGB-&gt;pGizmos, uID); <br> <br>    if (NULL!=pGizmo) <br>        GizmoPCheck(hWnd, pGizmo, fCheck); <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoFocusSet <br> * <br> * Purpose: <br> *  Sets the focus to a partuclar gizmo in the gizmo if that gizmo <br> *  can accept the focus.  Separators, attribute buttons, text, <br> *  and command buttons cannot have the focus. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo to affect. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the focus was set.  FALSE otherwise, <br> *                  such as when uID identifies a control that cannot <br> *                  have focus. <br> */ <br> <br>UINT WINAPI GBGizmoFocusSet(HWND hWnd, UINT uID) <br>    { <br>    PGIZMO      pGizmo; <br>    BOOL        fRet=FALSE; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo &amp;&amp; NULL!=pGizmo-&gt;hWnd) <br>        { <br>        fRet=TRUE; <br>        SetFocus(pGizmo-&gt;hWnd); <br>        } <br> <br>    return fRet; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoExist <br> * <br> * Purpose: <br> *  Determines if a gizmo of a given identifier exists in the <br> *  GizmoBar. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier to verify. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the gizmo exists, FALSE otherwise. <br> */ <br> <br>BOOL WINAPI GBGizmoExist(HWND hWnd, UINT uID) <br>    { <br>    return (NULL!=PGizmoFromHwndID(hWnd, uID)); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoTypeGet <br> * <br> * Purpose: <br> *  Returns the type of the gizmo specified by the given identifer. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier to find. <br> * <br> * Return Value: <br> *  int             A GIZMOTYPE_* value if the function is <br> *                  successful, otherwise -1. <br> */ <br> <br>int WINAPI GBGizmoTypeGet(HWND hWnd, UINT uID) <br>    { <br>    int         iRet=-1; <br>    PGIZMO      pGizmo; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        iRet=pGizmo-&gt;iType; <br> <br>    return iRet; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoDataSet <br> * GBGizmoDataGet <br> * <br> * Purpose: <br> *  Sets or retrieves an extra DWORD value associated with the given <br> *  gizmo.  Applications can store any information here they please. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo. <br> *  dwData          (Set only) DWORD data to store with the gizmo. <br> * <br> * Return Value: <br> *  DWORD           Set:  Previous value <br> *                  Get:  Current value <br> */ <br> <br>DWORD WINAPI GBGizmoDataSet(HWND hWnd, UINT uID, DWORD dwData) <br>    { <br>    PGIZMO      pGizmo; <br>    DWORD       dw=0L; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        { <br>        dw=pGizmo-&gt;dwData; <br>        pGizmo-&gt;dwData=dwData; <br>        } <br> <br>    return dw; <br>    } <br> <br> <br> <br>DWORD WINAPI GBGizmoDataGet(HWND hWnd, UINT uID) <br>    { <br>    PGIZMO      pGizmo; <br>    DWORD       dw=0L; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        dw=pGizmo-&gt;dwData; <br> <br>    return dw; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoNotifySet <br> * GBGizmoNotifyGet <br> * <br> * Purpose: <br> *  Sets or retrieves the notify status of a gizmo.  If notify is <br> *  FALSE, the no WM_COMMAND messages are sent from the GizmoBar to <br> *  the parent window when this gizmo is used. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifier of the gizmo. <br> *  fNotify         (Set only) BOOL new notify status to set. <br> * <br> * Return Value: <br> *  BOOL            Set:  Previous value of the notify flag. <br> *                  Get:  Current value of the notify flag. <br> */ <br> <br>BOOL WINAPI GBGizmoNotifySet(HWND hWnd, UINT uID, BOOL fNotify) <br>    { <br>    PGIZMO      pGizmo; <br>    BOOL        fRet=FALSE; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        { <br>        fRet=pGizmo-&gt;fNotify; <br>        pGizmo-&gt;fNotify=fNotify; <br>        } <br> <br>    return fRet; <br>    } <br> <br> <br>BOOL WINAPI GBGizmoNotifyGet(HWND hWnd, UINT uID) <br>    { <br>    PGIZMO      pGizmo; <br>    BOOL        fRet=FALSE; <br> <br>    pGizmo=PGizmoFromHwndID(hWnd, uID); <br> <br>    if (NULL!=pGizmo) <br>        fRet=pGizmo-&gt;fNotify; <br> <br>    return fRet; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoTextSet <br> * GBGizmoTextGet <br> * <br> * Purpose: <br> *  Retrieves or sets text in a GizmoBar gizmo.  Separators, command <br> *  buttons, and attribute buttons are not affected by this call. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifying the gizmo. <br> *  psz             LPTSTR (Set) providing the text to show in the <br> *                  window or (Get) pointing to a buffer to receive <br> *                  the text. <br> *  cch             (Get only) UINT maximum number of chars to copy <br> *                  to psz. <br> * <br> * Return Value: <br> *  int             Number of characters copied to psz. <br> */ <br> <br>void WINAPI GBGizmoTextSet(HWND hWnd, UINT uID, LPTSTR psz) <br>    { <br>    //This fails on non-windowed gizmos anyway, so we don't check. <br>    SetDlgItemText(hWnd, uID, psz); <br>    return; <br>    } <br> <br> <br>int WINAPI GBGizmoTextGet(HWND hWnd, UINT uID, LPTSTR psz, UINT cch) <br>    { <br>    //This fails on non-windowed gizmos anyway, so we don't check. <br>    return GetDlgItemText(hWnd, uID, psz, cch); <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * GBGizmoIntSet <br> * GBGizmoIntGet <br> * <br> * Purpose: <br> *  Retrieves or sets an integer in a GizmoBar gizmo.  Separators, <br> *  command buttons, and attribute buttons are not affected by this <br> *  call. <br> * <br> * Parameters: <br> *  hWnd            HWND of the GizmoBar. <br> *  uID             UINT identifying the gizmo. <br> * <br> *  (Set only) <br> *  u               UINT value to set in the gizmo. <br> *  fSigned         BOOL TRUE to indicate if the value is signed. <br> * <br> *  (Get only) <br> *  pfTrans         BOOL FAR * in which the success of the function <br> *                  is returned. <br> *  fSigned         BOOL TRUE to indicate if the value is signed. <br> * <br> * Return Value: <br> *  (Set): None <br> *  (Get): UINT     Integer translation of the gizmo's text. <br> */ <br> <br>void WINAPI GBGizmoIntSet(HWND hWnd, UINT uID, UINT u, BOOL fSigned) <br>    { <br>    //This fails on non-windowed gizmos anyway, so we don't check. <br>    SetDlgItemInt(hWnd, uID, u, fSigned); <br>    return; <br>    } <br> <br> <br> <br>UINT WINAPI GBGizmoIntGet(HWND hWnd, UINT uID, BOOL FAR *pfTrans <br>    , BOOL fSigned) <br>    { <br>    //This fails on non-windowed gizmos anyway, so we don't check. <br>    return GetDlgItemInt(hWnd, uID, pfTrans, fSigned); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

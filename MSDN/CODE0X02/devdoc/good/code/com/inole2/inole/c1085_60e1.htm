<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XFORM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1099"></a>XFORM.CPP</h2>
<pre><code>/* <br> * XFORM.CPP <br> * <br> * Utility functions for coordinate conversion taken from the <br> * original OLE UI Library. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "inoledll.h" <br> <br> <br>#define HIMETRIC_PER_INCH   2540    //Number HIMETRIC units per inch <br>#define PTS_PER_INCH        72      //Number points (font size) per inch <br> <br>#define MAP_PIX_TO_LOGHIM(x,ppli)   MulDiv(HIMETRIC_PER_INCH, (x), (ppli)) <br>#define MAP_LOGHIM_TO_PIX(x,ppli)   MulDiv((ppli), (x), HIMETRIC_PER_INCH) <br> <br> <br> <br>/* <br> * XformWidthInPixelsToHimetric <br> * XformWidthInHimetricToPixels <br> * XformHeightInPixelsToHimetric <br> * XformHeightInHimetricToPixels <br> * <br> * Functions to convert an int between a device coordinate system and <br> * logical HiMetric units. <br> * <br> * Parameters: <br> *  hDC             HDC providing reference to the pixel mapping.  If <br> *                  NULL, a screen DC is used. <br> *  (others)        Values to convert <br> * <br> * NOTE: <br> *  When displaying on the screen, Window apps display everything enlarged <br> *  from its actual size so that it is easier to read. For example, if an <br> *  app wants to display a 1in. horizontal line, that when printed is <br> *  actually a 1in. line on the printed page, then it will display the line <br> *  on the screen physically larger than 1in. This is described as a line <br> *  that is "logically" 1in. along the display width. Windows maintains as <br> *  part of the device-specific information about a given display device: <br> *      LOGPIXELSX -- no. of pixels per logical in along the display width <br> *      LOGPIXELSY -- no. of pixels per logical in along the display height <br> * <br> *  The following formula converts a distance in pixels into its equivalent <br> *  logical HIMETRIC units: <br> * <br> *      DistInHiMetric = (HIMETRIC_PER_INCH * DistInPix) <br> *                       ------------------------------- <br> *                           PIXELS_PER_LOGICAL_IN <br> * <br> */ <br> <br>STDAPI_(int) XformWidthInPixelsToHimetric(HDC hDC, int iWidthInPix) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iWidthInHiMetric; <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br> <br>//We got pixel units, convert them to logical HIMETRIC along the display <br>iWidthInHiMetric=MAP_PIX_TO_LOGHIM(iWidthInPix, iXppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return iWidthInHiMetric; <br>} <br> <br> <br>STDAPI_(int) XformWidthInHimetricToPixels(HDC hDC, int iWidthInHiMetric) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iWidthInPix; <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br> <br>//We got logical HIMETRIC along the display, convert them to pixel units <br>iWidthInPix=MAP_LOGHIM_TO_PIX(iWidthInHiMetric, iXppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return iWidthInPix; <br>} <br> <br> <br>STDAPI_(int) XformHeightInPixelsToHimetric(HDC hDC, int iHeightInPix) <br>{ <br>int     iYppli;     //Pixels per logical inch along height <br>int     iHeightInHiMetric; <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got pixel units, convert them to logical HIMETRIC along the display <br>iHeightInHiMetric=MAP_PIX_TO_LOGHIM(iHeightInPix, iYppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return iHeightInHiMetric; <br>} <br> <br> <br>STDAPI_(int) XformHeightInHimetricToPixels(HDC hDC, int iHeightInHiMetric) <br>{ <br>int     iYppli;     //Pixels per logical inch along height <br>int     iHeightInPix; <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got logical HIMETRIC along the display, convert them to pixel units <br>iHeightInPix=MAP_LOGHIM_TO_PIX(iHeightInHiMetric, iYppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return iHeightInPix; <br>} <br> <br> <br> <br>/* <br> * XformRectInPixelsToHimetric <br> * XformRectInHimetricToPixels <br> * <br> * Purpose: <br> *  Convert a rectangle between pixels of a given hDC and HIMETRIC units <br> *  as manipulated in OLE.  If the hDC is NULL, then a screen DC is used <br> *  and assumes the MM_TEXT mapping mode. <br> * <br> * Parameters: <br> *  hDC             HDC providing reference to the pixel mapping.  If <br> *                  NULL, a screen DC is used. <br> *  prcPix          LPRECT containng the rectangles to convert. <br> *  prcHiMetric <br> * <br> * Return Value: <br> *  None <br> * <br> * NOTE: <br> *  When displaying on the screen, Window apps display everything enlarged <br> *  from its actual size so that it is easier to read. For example, if an <br> *  app wants to display a 1in. horizontal line, that when printed is <br> *  actually a 1in. line on the printed page, then it will display the line <br> *  on the screen physically larger than 1in. This is described as a line <br> *  that is "logically" 1in. along the display width. Windows maintains as <br> *  part of the device-specific information about a given display device: <br> *      LOGPIXELSX -- no. of pixels per logical in along the display width <br> *      LOGPIXELSY -- no. of pixels per logical in along the display height <br> * <br> *  The following formula converts a distance in pixels into its equivalent <br> *  logical HIMETRIC units: <br> * <br> *      DistInHiMetric=(HIMETRIC_PER_INCH * DistInPix) <br> *                      ------------------------------- <br> *                            PIXELS_PER_LOGICAL_IN <br> * <br> * Rect in Pixels (MM_TEXT): <br> * <br> *              0---------- X <br> *              | <br> *              |       1) ------------------ ( 2   P1=(rc.left, rc.top) <br> *              |       |                     |     P2=(rc.right, rc.top) <br> *              |       |                     |     P3=(rc.left, rc.bottom) <br> *              |       |                     |     P4=(rc.right, rc.bottom) <br> *                      |                     | <br> *              Y       |                     | <br> *                      3) ------------------ ( 4 <br> * <br> *              NOTE:   Origin  =(P1x, P1y) <br> *                      X extent=P4x - P1x <br> *                      Y extent=P4y - P1y <br> * <br> * <br> * Rect in Himetric (MM_HIMETRIC): <br> * <br> * <br> *                      1) ------------------ ( 2   P1=(rc.left, rc.top) <br> *              Y       |                     |     P2=(rc.right, rc.top) <br> *                      |                     |     P3=(rc.left, rc.bottom) <br> *              |       |                     |     P4=(rc.right, rc.bottom) <br> *              |       |                     | <br> *              |       |                     | <br> *              |       3) ------------------ ( 4 <br> *              | <br> *              0---------- X <br> * <br> *              NOTE:   Origin  =(P3x, P3y) <br> *                      X extent=P2x - P3x <br> *                      Y extent=P2y - P3y <br> * <br> * <br> */ <br> <br>STDAPI_(void) XformRectInPixelsToHimetric(HDC hDC, LPRECT prcPix <br>, LPRECT prcHiMetric) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iYppli;     //Pixels per logical inch along height <br>int     iXextInPix=(prcPix-&gt;right-prcPix-&gt;left); <br>int     iYextInPix=(prcPix-&gt;bottom-prcPix-&gt;top); <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC || GetDeviceCaps(hDC, LOGPIXELSX) == 0) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got pixel units, convert them to logical HIMETRIC along the display <br>prcHiMetric-&gt;right=MAP_PIX_TO_LOGHIM(iXextInPix, iXppli); <br>prcHiMetric-&gt;top  =MAP_PIX_TO_LOGHIM(iYextInPix, iYppli); <br> <br>prcHiMetric-&gt;left   =0; <br>prcHiMetric-&gt;bottom =0; <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return; <br>} <br> <br> <br> <br>STDAPI_(void) XformRectInHimetricToPixels(HDC hDC, LPRECT prcHiMetric <br>, LPRECT prcPix) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iYppli;     //Pixels per logical inch along height <br>int     iXextInHiMetric=(prcHiMetric-&gt;right-prcHiMetric-&gt;left); <br>int     iYextInHiMetric=(prcHiMetric-&gt;bottom-prcHiMetric-&gt;top); <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC || GetDeviceCaps(hDC, LOGPIXELSX) == 0) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got pixel units, convert them to logical HIMETRIC along the display <br>prcPix-&gt;right=MAP_LOGHIM_TO_PIX(iXextInHiMetric, iXppli); <br>prcPix-&gt;top  =MAP_LOGHIM_TO_PIX(iYextInHiMetric, iYppli); <br> <br>prcPix-&gt;left =0; <br>prcPix-&gt;bottom= 0; <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return; <br>} <br> <br> <br> <br> <br>/* <br> * XformSizeInPixelsToHimetric <br> * XformSizeInHimetricToPixels <br> * <br> * Functions to convert a SIZEL structure (Size functions) or <br> * an int (Width functions) between a device coordinate system and <br> * logical HiMetric units. <br> * <br> * Parameters: <br> *  hDC             HDC providing reference to the pixel mapping.  If <br> *                  NULL, a screen DC is used. <br> *  pSizeInPix      LPSIZEL containing the size to convert. <br> *  pSizeInHiMetric <br> * <br> * NOTE: <br> *  When displaying on the screen, Window apps display everything enlarged <br> *  from its actual size so that it is easier to read. For example, if an <br> *  app wants to display a 1in. horizontal line, that when printed is <br> *  actually a 1in. line on the printed page, then it will display the line <br> *  on the screen physically larger than 1in. This is described as a line <br> *  that is "logically" 1in. along the display width. Windows maintains as <br> *  part of the device-specific information about a given display device: <br> *      LOGPIXELSX -- no. of pixels per logical in along the display width <br> *      LOGPIXELSY -- no. of pixels per logical in along the display height <br> * <br> *  The following formula converts a distance in pixels into its equivalent <br> *  logical HIMETRIC units: <br> * <br> *      DistInHiMetric=(HIMETRIC_PER_INCH * DistInPix) <br> *                       ------------------------------- <br> *                           PIXELS_PER_LOGICAL_IN <br> * <br> */ <br> <br>STDAPI_(void) XformSizeInPixelsToHimetric(HDC hDC, LPSIZEL pSizeInPix <br>, LPSIZEL pSizeInHiMetric) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iYppli;     //Pixels per logical inch along height <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC || GetDeviceCaps(hDC, LOGPIXELSX) == 0) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got pixel units, convert them to logical HIMETRIC along the display <br>pSizeInHiMetric-&gt;cx=(long)MAP_PIX_TO_LOGHIM((int)pSizeInPix-&gt;cx, iXppli); <br>pSizeInHiMetric-&gt;cy=(long)MAP_PIX_TO_LOGHIM((int)pSizeInPix-&gt;cy, iYppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return; <br>} <br> <br> <br>STDAPI_(void) XformSizeInHimetricToPixels(HDC hDC, LPSIZEL pSizeInHiMetric <br>, LPSIZEL pSizeInPix) <br>{ <br>int     iXppli;     //Pixels per logical inch along width <br>int     iYppli;     //Pixels per logical inch along height <br>BOOL    fSystemDC=FALSE; <br> <br>if (NULL==hDC || GetDeviceCaps(hDC, LOGPIXELSX) == 0) <br>{ <br>hDC=GetDC(NULL); <br>fSystemDC=TRUE; <br>} <br> <br>iXppli=GetDeviceCaps (hDC, LOGPIXELSX); <br>iYppli=GetDeviceCaps (hDC, LOGPIXELSY); <br> <br>//We got logical HIMETRIC along the display, convert them to pixel units <br>pSizeInPix-&gt;cx=(long)MAP_LOGHIM_TO_PIX((int)pSizeInHiMetric-&gt;cx, iXppli); <br>pSizeInPix-&gt;cy=(long)MAP_LOGHIM_TO_PIX((int)pSizeInHiMetric-&gt;cy, iYppli); <br> <br>if (fSystemDC) <br>ReleaseDC(NULL, hDC); <br> <br>return; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSTRTABL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1062"></a>CSTRTABL.CPP</h2>
<pre><code>/* <br> * CSTRTABL.CPP <br> * Sample Code Class Libraries <br> * <br> * Implementation of a string table handler.  The CStringTable <br> * class hides details of storage from the user.  The strings might <br> * be cached, or they might be loaded as necessary.  In either case, <br> * we must know the number of strings so we know whether or not to <br> * reload strings. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;malloc.h&gt; <br>#include "classlib.h" <br> <br> <br> <br>/* <br> * CStringTable::CStringTable <br> * CStringTable::~CStringTable <br> * <br> * Constructor Parameters: <br> *  hInst           HANDLE to the application instance from which we <br> *                  load strings. <br> */ <br> <br>CStringTable::CStringTable(HINSTANCE hInst) <br>    { <br>    m_hInst=hInst; <br>    m_pszStrings=NULL; <br>    m_ppszTable=NULL; <br>    return; <br>    } <br> <br> <br>CStringTable::~CStringTable(void) <br>    { <br>    if (NULL!=m_pszStrings) <br>        free(m_pszStrings); <br> <br>    if (NULL!=m_ppszTable) <br>        free(m_ppszTable); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CStringTable::FInit <br> * <br> * Purpose: <br> *  Initialization function for a StringTable that is prone to <br> *  failure.  If this fails then the caller is responsible for <br> *  guaranteeing that the destructor is called quickly. <br> * <br> * Parameters: <br> *  idsMin          UINT first identifier in the stringtable <br> *  idsMax          UINT last identifier in the stringtable. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, FALSE <br> *                  otherwise. <br> */ <br> <br> <br>BOOL CStringTable::FInit(UINT idsMin, UINT idsMax) <br>    { <br>    UINT        i; <br>    UINT        cch; <br>    UINT        cchUsed=0; <br>    LPTSTR      psz; <br> <br>    m_idsMin=idsMin; <br>    m_idsMax=idsMax; <br>    m_cStrings=(idsMax-idsMin+1); <br> <br> <br>    //Allocate space for the pointer table. <br>    m_ppszTable=(LPTSTR *)malloc(sizeof(LPTSTR)*m_cStrings); <br> <br>    if (NULL==m_ppszTable) <br>        return FALSE; <br> <br> <br>    //Allocate enough memory for cStrings of CCHSTRINGMAX. <br>    m_pszStrings=(LPTSTR)malloc(m_cStrings * CCHSTRINGMAX * sizeof(TCHAR)); <br> <br>    if (NULL==m_pszStrings) <br>        { <br>        free(m_ppszTable); <br>        m_ppszTable=NULL; <br>        return FALSE; <br>        } <br> <br> <br>    /* <br>     * Load the strings:  we load each string in turn into psz, <br>     * store the string pointer into the table and increment psz <br>     * to the next positions. <br>     */ <br> <br>    psz=m_pszStrings; <br> <br>    for (i=idsMin; i &lt;= idsMax; i++) <br>        { <br>        m_ppszTable[i-idsMin]=psz; <br>        cch=LoadString(m_hInst, i, psz, CCHSTRINGMAX-1); <br> <br>        //Account for a null terminator <br>        psz+=cch+1; <br>        cchUsed+=cch; <br>        } <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStringTable::operator[] <br> * <br> * Purpose: <br> *  Returns a pointer to the requested string in the stringtable or <br> *  NULL if the specified string does not exist. <br> */ <br> <br>const LPTSTR CStringTable::operator[](const UINT uID) const <br>    { <br>    if (uID &lt; m_idsMin || uID &gt; m_idsMax) <br>        return NULL; <br> <br>    return (const LPTSTR)m_ppszTable[uID-m_idsMin]; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCWIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1065"></a>DOCWIN.CPP</h2>
<pre><code>/* <br> * DOCWIN.CPP <br> * Sample Code Class Libraries <br> * <br> * Window procedure for document windows. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br> <br>#include &lt;windows.h&gt; <br>#include "classlib.h" <br> <br> <br> <br> <br>/* <br> * DocumentWndProc <br> * <br> * Purpose: <br> *  Document window class that contains a polyline but does not own <br> *  things like the gizmobar. <br> * <br> *  We handle all commands from menus and gizmobars as well as <br> *  notifications from the polyline itself.  The frame window <br> *  just makes sure that commands and such are dispatched here <br> *  as necessary, especially in an MDI case. <br> */ <br> <br>LRESULT APIENTRY DocumentWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PCDocument      pDoc; <br>    BOOL            fOK=FALSE; <br>    LPARAM          lTemp; <br>    LRESULT         lRet; <br> <br>    pDoc=(PCDocument)GetWindowLong(hWnd, DOCWL_STRUCTURE); <br> <br>    if (NULL!=pDoc) <br>        { <br>        //Call the hook and return its value if it tells us to. <br>        if (pDoc-&gt;FMessageHook(hWnd, iMsg, wParam, lParam, &amp;lRet)) <br>            return lRet; <br>        } <br> <br> <br>    switch (iMsg) <br>        { <br>        case WM_CREATE: <br>            /* <br>             * Save our object pointer with this window.  We have to <br>             * do this inside this message since we don't get the <br>             * MDICREATESTRUCT anywhere else. <br>             */ <br> <br>            lTemp=(LPARAM)((LPCREATESTRUCT)lParam)-&gt;lpCreateParams; <br>            pDoc=(PCDocument)(((LPMDICREATESTRUCT)lTemp)-&gt;lParam); <br>            SetWindowLong(hWnd, DOCWL_STRUCTURE, (LONG)pDoc); <br>            break; <br> <br> <br>        case WM_CLOSE: <br>            //Tell our main window to close us <br>            if (NULL!=pDoc-&gt;m_pAdv) <br>                pDoc-&gt;m_pAdv-&gt;OnCloseRequest(pDoc); <br> <br>            break; <br> <br> <br>        case WM_QUERYENDSESSION: <br>            return TRUE;    //Right now we can always close. <br> <br> <br>        case DOCM_PDOCUMENT: <br>            //Return our object pointer <br>            return (LONG)pDoc; <br> <br>        case WM_MDIACTIVATE: <br>            /* <br>             * NEWMDIACTIVE isolates wParam/lParam differences <br>             * between Win16 and Win32. <br>             */ <br>            if (0!=NEWMDIACTIVE &amp;&amp; NULL!=pDoc-&gt;m_pAdv) <br>                pDoc-&gt;m_pAdv-&gt;OnActivate(pDoc); <br> <br>            break; <br> <br>        case WM_MENUSELECT: <br>            { <br>            PCStatStrip     pSS; <br> <br>            pSS=pDoc-&gt;m_pFR-&gt;GetStatusControl(); <br> <br>            if (NULL!=pSS) <br>                pSS-&gt;MenuSelect(wParam, lParam); <br> <br>            } <br>            break; <br> <br>        default: <br>            return DEFDOCUMENTPROC(hWnd, iMsg, wParam, lParam); <br>        } <br> <br>    return 0L; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

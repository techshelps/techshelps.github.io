<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTOOLBAR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1063"></a>CTOOLBAR.CPP</h2>
<pre><code>/* <br> * CTOOLBAR.CPP <br> * Sample Code Class Libraries <br> * <br> * Implementation of the CToolBar class <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "classlib.h" <br> <br> <br>/* <br> * CToolBar::CToolBar <br> * CToolBar::~CToolBar <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the module we're loaded in. <br> */ <br> <br>CToolBar::CToolBar(HINSTANCE hInst) <br>    : CWindow(hInst) <br>    { <br>    return; <br>    } <br> <br> <br>CToolBar::~CToolBar(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Init <br> * <br> * Purpose: <br> *  Initializes a toolbar object by creating the control that it <br> *  owns. <br> * <br> * Parameters: <br> *  hWndParent      HWND of the parent window.  The toolbar is <br> *                  created up from the bottom of this window, <br> *                  spanning the entire width of the window. <br> *  uID             UINT id of the control. <br> *  cy              UINT height to create the control <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CToolBar::Init(HWND hWndParent, UINT uID, UINT cy) <br>    { <br>    RECT            rc; <br> <br>    /* <br>     * Note that the class is already registered since we live in a <br>     * DLL and that DLL will be loaded if anyone is using this class <br>     * library. <br>     */ <br> <br>    GetClientRect(hWndParent, &amp;rc); <br>    m_cyBar=cy; <br> <br>    m_hWnd=CreateWindow(CLASS_GIZMOBAR, TEXT("Wooley") <br>        , WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS, rc.left, rc.top <br>        , rc.right-rc.left, m_cyBar, hWndParent, (HMENU)uID, m_hInst <br>        , 0L); <br> <br>    return (NULL!=m_hWnd); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::OnSize <br> * <br> * Purpose: <br> *  Handles parent resizing.  The owner of this window is responsible <br> *  to call this function when it wants the toolbar to resize.  The <br> *  toolbar will automatically occupy a strip of the appropriate <br> *  height along the top of the window. <br> * <br> * Parameters: <br> *  hWndParent      HWND of the parent window to which we're resizing <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CToolBar::OnSize(HWND hWndParent) <br>    { <br>    RECT        rc; <br> <br>    GetClientRect(hWndParent, &amp;rc); <br> <br>    SetWindowPos(m_hWnd, NULL, rc.left, rc.top, rc.right-rc.left <br>        , m_cyBar, SWP_NOZORDER); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::FontSet <br> * <br> * Purpose: <br> *  Changes the font in the StatStrip. <br> * <br> * Parameters: <br> *  hFont           HFONT of the font to use in the control. <br> *  fRedraw         BOOL indicating if the control is to repaint <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CToolBar::FontSet(HFONT hFont, BOOL fRedraw) <br>    { <br>    SendMessage((UINT)m_hWnd, WM_SETFONT, (WPARAM)hFont, fRedraw); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::FontGet <br> * <br> * Purpose: <br> *  Retrieves the handle of the current font used in the control. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HFONT           Handle to the current font. <br> */ <br> <br>HFONT CToolBar::FontGet(void) <br>    { <br>    return (HFONT)(UINT)SendMessage((UINT)m_hWnd, WM_GETFONT, 0, 0L); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Enable <br> * <br> * Purpose: <br> *  Enables or disables the StatStrip window, graying the text if <br> *  the control is disabled. <br> * <br> * Parameters: <br> *  fEnable         BOOL specifying to enable (TRUE) or disable <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CToolBar::Enable(BOOL fEnable) <br>    { <br>    EnableWindow(m_hWnd, fEnable); <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::HwndAssociateSet <br> * <br> * Purpose: <br> *  Changes the associate window of a toolbar. <br> * <br> * Parameters: <br> *  hWndNew         HWND of new associate. <br> * <br> * Return Value: <br> *  HWND            Handle of previous associate. <br> */ <br> <br>HWND CToolBar::HwndAssociateSet(HWND hWndNew) <br>    { <br>    return GBHwndAssociateSet(m_hWnd, hWndNew); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::HwndAssociateGet <br> * <br> * Purpose: <br> *  Retrieves the associate window of a toolbar <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HWND            Handle of current associate. <br> */ <br> <br>HWND CToolBar::HwndAssociateGet(void) <br>    { <br>    return GBHwndAssociateGet(m_hWnd); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Add <br> * <br> * Purpose: <br> *  Creates a new tool on the toolbar.  Subsequent operations <br> *  should be done using the identifier, uID, for this tool. <br> * <br> * Parameters: <br> *  iType           UINT type of the tool to create. <br> *  iTool           UINT position (zero-based) for the tool. <br> *  uID             UINT identifier for WM_COMMAND from this tool. <br> *  dx, dy          UINT dimensions of the tool. <br> *  pszText         LPTSTR initial text for edit, list, combo, text <br> *  hBitmap         HBITMAP for tools of the button types (COMMAND <br> *                  or ATTRIBUTE) specifies a source bitmap from <br> *                  which the button image is taken. <br> *  iImage          UINT index into hBitmap for the button image <br> *  uState          UINT initial state of the tool. <br> * <br> * Return Value: <br> *  BOOL            TRUE if creation succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CToolBar::Add(UINT iType, UINT iTool, UINT uID, UINT dx <br>    , UINT dy, LPTSTR pszText, HBITMAP hBmp, UINT iImage, UINT uState) <br>    { <br>    return GBGizmoAdd(m_hWnd, iType, iTool, uID, dx, dy <br>        , pszText, hBmp, iImage, uState); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Remove <br> * <br> * Purpose: <br> *  Removes an existing tool from the toolbar. <br> * <br> * Parameters: <br> *  uID             UINT identifier for this tool. <br> * <br> * Return Value: <br> *  BOOL            TRUE if deletion succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CToolBar::Remove(UINT uID) <br>    { <br>    return GBGizmoRemove(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::SendMessage <br> * <br> * Purpose: <br> *  Implements the equivalent of SendMessage to a tool in the <br> *  toolbar.  Separators, command buttons, and attribute buttons <br> *  do not accept messages. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool to affect. <br> *  iMsg            UINT message to send. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LONG            Return value from the message.  0L if the <br> *                  tool does not accept messages. <br> */ <br> <br>LONG CToolBar::SendMessage(UINT uID, UINT iMsg, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    return GBGizmoSendMessage(m_hWnd, uID, iMsg, wParam, lParam); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Show <br> * <br> * Purpose: <br> *  Shows or hides a control, adjusting the positions of all others <br> *  to make room for or reuse the space for this control. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool to affect. <br> *  fShow           BOOL TRUE to show the tool, FALSE to hide it. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function was successful, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL CToolBar::Show(UINT uID, BOOL fShow) <br>    { <br>    return GBGizmoShow(m_hWnd, uID, fShow); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Enable <br> * <br> * Purpose: <br> *  Enables or disables a control on the toolbar. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool to affect. <br> *  fEnable         BOOL TRUE to enable the tool, FALSE otherwise. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the tool was previously disabled, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL CToolBar::Enable(UINT uID, BOOL fEnable) <br>    { <br>    return GBGizmoEnable(m_hWnd, uID, fEnable); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Check <br> * <br> * Purpose: <br> *  Checks or unchecks an attribute button in the toolbar.  If the <br> *  tool is part of a group of mutually exclusive attributes, then <br> *  other tools are unchecked when this one is checked.  If this is <br> *  the only one checked in these circumstances, this function is <br> *  a NOP. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool to affect. <br> *  fCheck          BOOL TRUE to check this tool, FALSE to uncheck. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the change took place.  FALSE otherwise. <br> */ <br> <br>BOOL CToolBar::Check(UINT uID, BOOL fCheck) <br>    { <br>    return GBGizmoCheck(m_hWnd, uID, fCheck); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::FocusSet <br> * <br> * Purpose: <br> *  Sets the focus to a partuclar tool in the toolbar if that tool <br> *  can accept the focus.  Separators, attribute buttons, text, <br> *  and command buttons cannot have the focus. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool to affect. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the focus was set.  FALSE otherwise, <br> *                  such as when uID identifies a control that <br> *                  cannot have focus. <br> * <br> */ <br> <br>UINT CToolBar::FocusSet(UINT uID) <br>    { <br>    return GBGizmoFocusSet(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::Exist <br> * <br> * Purpose: <br> *  Determines if a tool of a given identifier exists. <br> * <br> * Parameters: <br> *  uID             UINT identifier to verify. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the tool exists, FALSE otherwise. <br> */ <br> <br>BOOL CToolBar::Exist(UINT uID) <br>    { <br>    return GBGizmoExist(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::TypeGet <br> * <br> * Purpose: <br> *  Returns the type of the tool specified by the given identifer. <br> * <br> * Parameters: <br> *  uID             UINT identifier to find. <br> * <br> * Return Value: <br> *  int             A GIZMOTYPE_* value if the function is <br> *                  successful, otherwise -1. <br> */ <br> <br>int CToolBar::TypeGet(UINT uID) <br>    { <br>    return GBGizmoTypeGet(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::DataSet <br> * CToolBar::DataGet <br> * <br> * Purpose: <br> *  Sets or retrieves an extra DWORD value associated with the given <br> *  tool.  Applications can store any information here they please. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool. <br> *  dwData          (Set only) DWORD data to store with the tool. <br> * <br> * Return Value: <br> *  DWORD           Set:  Previous value <br> *                  Get:  Current value <br> */ <br> <br>DWORD CToolBar::DataSet(UINT uID, DWORD dwData) <br>    { <br>    return GBGizmoDataSet(m_hWnd, uID, dwData); <br>    } <br> <br> <br>DWORD CToolBar::DataGet(UINT uID) <br>    { <br>    return GBGizmoDataGet(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::NotifySet <br> * CToolBar::NotifyGet <br> * <br> * Purpose: <br> *  Sets or retrieves the notify status of a tool.  If notify is <br> *  FALSE, the no WM_COMMAND messages are sent from the toolbar <br> *  to the parent window when this tool is used. <br> * <br> * Parameters: <br> *  uID             UINT identifier of the tool. <br> *  fNotify         (Set only) BOOL new notify status to set. <br> * <br> * Return Value: <br> *  BOOL            Set:  Previous value of the notify flag. <br> *                  Get:  Current value of the notify flag. <br> */ <br> <br>BOOL CToolBar::NotifySet(UINT uID, BOOL fNotify) <br>    { <br>    return GBGizmoNotifySet(m_hWnd, uID, fNotify); <br>    } <br> <br> <br>BOOL CToolBar::NotifyGet(UINT uID) <br>    { <br>    return GBGizmoNotifyGet(m_hWnd, uID); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::TextSet <br> * CToolBar::TextGet <br> * <br> * Purpose: <br> *  Retrieves or sets text in a toolbar control.  Separators, <br> *  command buttons, and attribute buttons are not affected by <br> *  this call. <br> * <br> * Parameters: <br> *  uID             UINT identifying the tool. <br> *  psz             LPTSTR pointing to a buffer to receive the text. <br> *  cch             (Get only) UINT maximum number of chars to copy <br> *                  to psz. <br> * <br> * Return Value: <br> *  int             Number of characters copied to psz. <br> */ <br> <br>void CToolBar::TextSet(UINT uID, LPTSTR psz) <br>    { <br>    GBGizmoTextSet(m_hWnd, uID, psz); <br>    return; <br>    } <br> <br> <br>int CToolBar::TextGet(UINT uID, LPTSTR psz, UINT cch) <br>    { <br>    return GBGizmoTextGet(m_hWnd, uID, psz, cch); <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CToolBar::IntSet <br> * CToolBar::IntGet <br> * <br> * Purpose: <br> *  Retrieves or sets an integer in a toolbar control.  Separators, <br> *  command buttons, and attribute buttons are not affected by this <br> *  call. <br> * <br> * Parameters: <br> *  uID             UINT identifying the tool. <br> * <br> *  Get Parameters: <br> *  pfTrans         BOOL * in which the success of the function is <br> *                  returned. <br> *  fSigned         BOOL TRUE to indicate if the value is signed. <br> * <br> *  Set Parameters: <br> *  u               UINT value to set in the tool. <br> *  fSigned         BOOL TRUE to indicate if the value is signed. <br> * <br> * Return Value: <br> *  UINT            Integer translation of the tool's text. <br> */ <br> <br>void CToolBar::IntSet(UINT uID, int i, BOOL fSigned) <br>    { <br>    GBGizmoIntSet(m_hWnd, uID, i, fSigned); <br>    return; <br>    } <br> <br> <br>UINT CToolBar::IntGet(UINT uID, BOOL *pfTrans, BOOL fSigned) <br>    { <br>    return GBGizmoIntGet(m_hWnd, uID, pfTrans, fSigned); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSTATLIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context1061"></a>CSTATLIN.CPP</h2>
<pre><code>/* <br> * CSTATLIN.C <br> * Sample Code Class Libraries <br> * <br> * C++ wrapper class for a status line control <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "classlib.h" <br> <br> <br>/* <br> * CStatusLine::CStatusLine <br> * CStatusLine::~CStatusLine <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the module we're loaded in. <br> */ <br> <br>CStatusLine::CStatusLine(HINSTANCE hInst) <br>    : CWindow(hInst) <br>    { <br>    return; <br>    } <br> <br> <br>CStatusLine::~CStatusLine(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::Init <br> * <br> * Purpose: <br> *  Initializes a status line object by creating the control that it <br> *  owns. <br> * <br> * Parameters: <br> *  hWndParent      HWND of the parent window.  The status line is <br> *                  created up from the bottom of this window, <br> *                  spanning the entire width of the window. <br> *  uID             UINT id of the control. <br> *  cy              UINT height to create the control <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CStatusLine::Init(HWND hWndParent, UINT uID, UINT cy) <br>    { <br>    RECT        rc; <br> <br>    GetClientRect(hWndParent, &amp;rc); <br> <br>    m_cy=cy; <br>    m_hWnd=CreateWindow(CLASS_STATSTRIP, TEXT("Ready") <br>        , WS_CHILD | WS_VISIBLE, rc.left, rc.top, rc.right-rc.left <br>        , cy , hWndParent, (HMENU)uID, m_hInst, 0L); <br> <br>    return (NULL!=m_hWnd); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::OnSize <br> * <br> * Purpose: <br> *  Handles parent resizing.  The owner of this window is responsible <br> *  to call this function when it wants the status line to resize.  The <br> *  status line will automatically occupy a lower strip of CYSTATSTRIP <br> *  high on the bottom of the window. <br> * <br> * Parameters: <br> *  hWndParent      HWND of the parent window to which we're resizing <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::OnSize(HWND hWndParent) <br>    { <br>    RECT        rc; <br> <br>    GetClientRect(hWndParent, &amp;rc); <br> <br>    SetWindowPos(m_hWnd, NULL, rc.left, rc.bottom-rc.top-CYSTATSTRIP <br>        , rc.right-rc.left, m_cy, SWP_NOZORDER); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MessageSet <br> * <br> * Purpose: <br> *  Sets a message in the status line explicitly with a string. <br> * <br> * Parameters: <br> *  pszMsg          LPTSTR to the string to display. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::MessageSet(LPTSTR psz) <br>    { <br>    SetWindowText(m_hWnd, psz); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MessageGet <br> * <br> * Purpose: <br> *  Retrieves the current message from the status line <br> * <br> * Parameters: <br> *  psz             LPTSTR in which to return the message. <br> *  cchMax          UINT maximum number of characters to copy. <br> * <br> * Return Value: <br> *  UINT            Number of characters copied. <br> */ <br> <br>UINT CStatusLine::MessageGet(LPTSTR psz, UINT cchMax) <br>    { <br>    return GetWindowText(m_hWnd, psz, cchMax); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MessageGetLength <br> * <br> * Purpose: <br> *  Returns the length of the current message in the status line. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  UINT            Number of characters in the current message <br> */ <br> <br>UINT CStatusLine::MessageGetLength(void) <br>    { <br>    return GetWindowTextLength(m_hWnd); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::FontSet <br> * <br> * Purpose: <br> *  Changes the font in the status line. <br> * <br> * Parameters: <br> *  hFont           HFONT of the font to use in the control. <br> *  fRedraw         BOOL indicating if the control is to repaint or <br> *                  not. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::FontSet(HFONT hFont, BOOL fRedraw) <br>    { <br>    SendMessage(m_hWnd, WM_SETFONT, (WPARAM)hFont, fRedraw); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::FontGet <br> * <br> * Purpose: <br> *  Retrieves the handle of the current font used in the control. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HFONT           Handle to the current font. <br> */ <br> <br>HFONT CStatusLine::FontGet(void) <br>    { <br>    return (HFONT)(UINT)SendMessage(m_hWnd, WM_GETFONT, 0, 0L); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::Enable <br> * <br> * Purpose: <br> *  Enables or disables the status line window, graying the text if <br> *  the control is disabled. <br> * <br> * Parameters: <br> *  fEnable         BOOL specifying to enable (TRUE) or disable <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::Enable(BOOL fEnable) <br>    { <br>    EnableWindow(m_hWnd, fEnable); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MessageMap <br> * <br> * Purpose: <br> *  Initializes a CStatusLine for automated processing of <br> *  WM_MENUSELECT messages as well as setting up a list of messages <br> *  that we can display using identifiers instead of string <br> *  pointers.  See MenuSelect and MessageDisplay members. <br> * <br> * Parameters: <br> *  hWnd            HWND of the window owning menus. <br> *  hInst           HINSTANCE of the app from which to load resources <br> *  uIDRMap         UINT identifying a resource mapping ID values to <br> *                  string ID values. <br> *  idsMin          UINT specifying the lowest string ID to load. <br> *  idsMax          UINT specifying the hightest string ID to load. <br> *  cchMax          UINT maximum string length. <br> *  uIDPopupMin     UINT lowest ID to assign to popup menus. <br> *  uIDPopupMax     UINT highest ID to assign to popup menus. <br> *  uIDStatic       UINT ID for the quiescent message. <br> *  uIDBlank        UINT ID for a blank message. <br> *  uIDSysMenu      UINT ID for the system menu. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function was successful, FALSE <br> *                  otherwise. <br> */ <br> <br>BOOL CStatusLine::MessageMap(HWND hWnd, HINSTANCE hInst, UINT uIDRMap <br>    , UINT idsMin, UINT idsMax, UINT cchMax, UINT uIDPopupMin <br>    , UINT uIDPopupMax, UINT uIDStatic, UINT uIDBlank <br>    , UINT uIDSysMenu) <br>    { <br>    //Initialize all the messages in the status line <br>    return StatStripMessageMap(m_hWnd, hWnd, hInst, uIDRMap, idsMin <br>        , idsMax, cchMax, uIDPopupMin, uIDPopupMax, uIDStatic <br>        , uIDBlank, uIDSysMenu); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MenuSelect <br> * <br> * Purpose: <br> *  Displays the appropriate message for whatever is in the <br> *  parameters of a WM_MENUSELECT message.  This can only be called <br> *  if StatStripMessageMap has already been called and must be used <br> *  with the same menu the owner window had at the time of that call. <br> * <br> * Parameters: <br> *  wParam          WPARAM of the WM_MENUSELECT message. <br> *  lParam          LPARAM of the WM_MENUSELECT message. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::MenuSelect(WPARAM wParam, LPARAM lParam) <br>    { <br>    StatStripMenuSelect(m_hWnd, wParam, lParam); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CStatusLine::MessageDisplay <br> * <br> * Purpose: <br> *  Displays the appropriate message for a given ID value.   This can <br> *  only be called if StatStripMessageMap has already been called. <br> * <br> * Parameters: <br> *  uID             UINT of the message to display. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CStatusLine::MessageDisplay(UINT uID) <br>    { <br>    StatStripMessageDisplay(m_hWnd, uID); <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

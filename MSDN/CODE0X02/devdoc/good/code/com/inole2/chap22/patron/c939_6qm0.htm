<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPUIWIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context948"></a>IIPUIWIN.CPP</h2>
<pre><code>/* <br> * IIPUIWIN.CPP <br> * Patron Chapter 22 <br> * <br> * IOleInPlaceUIWindow interface implementation for Patron's <br> * documents. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::CImpIOleInPlaceUIWindow <br> * CImpIOleInPlaceUIWindow::~CImpIOleInPlaceUIWindow <br> * <br> * Parameters (Constructor): <br> *  pDoc            PCPatronDoc of the document we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceUIWindow::CImpIOleInPlaceUIWindow(PCPatronDoc pDoc <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pDoc=pDoc; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceUIWindow::~CImpIOleInPlaceUIWindow(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::QueryInterface <br> * CImpIOleInPlaceUIWindow::AddRef <br> * CImpIOleInPlaceUIWindow::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleInPlaceUIWindow object. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceUIWindow::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceUIWindow::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if there is no <br> *                  window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::GetWindow(HWND *phWnd) <br>    { <br>    *phWnd=m_pDoc-&gt;m_hWnd; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::ContextSensitiveHelp <br>    (BOOL fEnterMode) <br>    { <br>   #ifdef MDI <br>    //Only MDI documents care <br>    if (NULL!=m_pDoc-&gt;m_pIOleIPActiveObject) <br>        { <br>        m_pDoc-&gt;m_pIOleIPActiveObject-&gt;ContextSensitiveHelp <br>           (fEnterMode); <br>        } <br>   #endif <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::GetBorder <br> * <br> * Purpose: <br> *  Returns the rectangle in which the container is willing to <br> *  negotiate about an object's adornments. <br> * <br> * Parameters: <br> *  prcBorder       LPRECT in which to store the rectangle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if all is well, INPLACE_E_NOTOOLSPACE if <br> *                  there is no negotiable space. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::GetBorder(LPRECT prcBorder) <br>    { <br>    if (NULL==prcBorder) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    /* <br>     * All of the document window space is available for negotiation <br>     * since we can resize the Pages window to anything we want.  So <br>     * we just return the entire client rectangle here. <br>     */ <br>    GetClientRect(m_pDoc-&gt;m_hWnd, prcBorder); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::RequestBorderSpace <br> * <br> * Purpose: <br> *  Asks the container if it can surrender the amount of space <br> *  in pBW that the object would like for it's adornments.  The <br> *  container does nothing but validate the spaces on this call. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the requested space. <br> *                  The values are the amount of space requested <br> *                  from each side of the relevant window. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if we can give up space, <br> *                  INPLACE_E_NOTOOLSPACE otherwise. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::RequestBorderSpace <br>    (LPCBORDERWIDTHS pBW) <br>    { <br>    //We don't have any restrictions, so we always return NOERROR. <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::SetBorderSpace <br> * <br> * Purpose: <br> *  Called when the object now officially requests that the <br> *  container surrender border space it previously allowed in <br> *  RequestBorderSpace.  The container should resize windows <br> *  appropriately to surrender this space. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the amount of space <br> *                  from each side of the relevant window that <br> *                  the object is now reserving. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::SetBorderSpace <br>    (LPCBORDERWIDTHS pBW) <br>    { <br>    RECT        rc; <br>    HWND        hWndDoc; <br>    HWND        hWndPages; <br>    POINT       pt1, pt2; <br> <br>    if (NULL==pBW) <br>        return NOERROR; <br> <br>    /* <br>     * Now we just have to resize the Pages window to make room for <br>     * the object's tools or resize it to occupy the full document <br>     * if we're reverting to normal. <br>     */ <br> <br>    hWndDoc=m_pDoc-&gt;m_hWnd; <br>    hWndPages=m_pDoc-&gt;m_pPG-&gt;Window(); <br> <br>    //Get the current offset of the Pages <br>    GetWindowRect(hWndPages, &amp;rc); <br>    SETPOINT(pt1, rc.left, rc.top); <br>    SETPOINT(pt2, rc.right, rc.bottom); <br>    ScreenToClient(hWndDoc, &amp;pt1); <br>    ScreenToClient(hWndDoc, &amp;pt2); <br> <br>    GetClientRect(hWndDoc, &amp;rc); <br> <br>    if (NULL!=pBW) <br>        { <br>        rc.left+=pBW-&gt;left; <br>        rc.right-=pBW-&gt;right; <br>        rc.top+=pBW-&gt;top; <br>        rc.bottom-=pBW-&gt;bottom; <br>        } <br> <br>    //Only move Pages if necessary <br>    if (!(pt1.x==rc.left &amp;&amp; pt1.y==rc.top <br>        &amp;&amp; pt2.x==rc.right &amp;&amp; pt2.y==rc.bottom)) <br>        { <br>        SendMessage(hWndDoc, WM_SETREDRAW, FALSE, 0L); <br>        ShowWindow(hWndPages, SW_HIDE); <br> <br>        m_pDoc-&gt;m_pPG-&gt;RectSet(&amp;rc, FALSE); <br> <br>        /* <br>         * Scroll the Pages in the opposite direction to keep <br>         * objects steady. <br>         */ <br> <br>        SendScrollPosition(hWndPages, WM_HSCROLL, pBW-&gt;left-pt1.x); <br>        SendScrollPosition(hWndPages, WM_VSCROLL, pBW-&gt;top-pt1.y); <br> <br>        SendMessage(hWndDoc, WM_SETREDRAW, TRUE, 0L); <br>        ShowWindow(hWndPages, SW_SHOW); <br>        } <br> <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceUIWindow::SetActiveObject <br> * <br> * Purpose: <br> *  Provides the container with the object's IOleInPlaceActiveObject <br> *  pointer. <br> * <br> * Parameters: <br> *  pIIPActiveObj   LPOLEINPLACEACTIVEOBJECT of interest. <br> *  pszObj          LPCOLESTR naming the object.  Not used. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceUIWindow::SetActiveObject( <br>    LPOLEINPLACEACTIVEOBJECT pIIPActiveObj, LPCOLESTR pszObj) <br>    { <br>    if (NULL!=m_pDoc-&gt;m_pIOleIPActiveObject) <br>        m_pDoc-&gt;m_pIOleIPActiveObject-&gt;Release(); <br> <br>    //NULLs m_pIOleIPActiveObject if pIIPActiveObj is NULL <br>    m_pDoc-&gt;m_pIOleIPActiveObject=pIIPActiveObj; <br> <br>    if (NULL!=m_pDoc-&gt;m_pIOleIPActiveObject) <br>        m_pDoc-&gt;m_pIOleIPActiveObject-&gt;AddRef(); <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

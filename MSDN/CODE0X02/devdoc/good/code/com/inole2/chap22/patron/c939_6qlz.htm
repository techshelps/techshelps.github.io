<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPSITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context947"></a>IIPSITE.CPP</h2>
<pre><code>/* <br> * IIPSITE.CPP <br> * Patron Chapter 22 <br> * <br> * IOleInPlaceSite interface implementation for Patron <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>BOOL        g_fSwitchingActive=FALSE; <br> <br>/* <br> * CImpIOleInPlaceSite::CImpIOleInPlaceSite <br> * CImpIOleInPlaceSite::~CImpIOleInPlaceSite <br> * <br> * Parameters (Constructor): <br> *  pTen            PCTenant of the tenant we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceSite::CImpIOleInPlaceSite(PCTenant pTen <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pTen=pTen; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceSite::~CImpIOleInPlaceSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::QueryInterface <br> * CImpIOleInPlaceSite::AddRef <br> * CImpIOleInPlaceSite::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleInPlaceSite object. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if there is no <br> *                  window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::GetWindow(HWND *phWnd) <br>    { <br>    *phWnd=m_pTen-&gt;m_hWnd; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::ContextSensitiveHelp <br>    (BOOL fEnterMode) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::CanInPlaceActivate <br> * <br> * Purpose: <br> *  Answers the server whether or not we can currently in-place <br> *  activate its object.  By implementing this interface we say <br> *  that we support in-place activation, but through this function <br> *  we indicate whether the object can currently be activated <br> *  in-place.  Iconic aspects, for example, cannot, meaning we <br> *  return S_FALSE. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if we can in-place activate the object <br> *                  in this site, S_FALSE if not. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::CanInPlaceActivate(void) <br>    { <br>    if (DVASPECT_CONTENT!=m_pTen-&gt;m_fe.dwAspect) <br>        return ResultFromScode(S_FALSE); <br> <br>    if (TENANTTYPE_EMBEDDEDOBJECT!=m_pTen-&gt;m_tType) <br>        return ResultFromScode(S_FALSE); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnInPlaceActivate <br> * <br> * Purpose: <br> *  Informs the container that an object is being activated in-place <br> *  such that the container can prepare appropriately.  The <br> *  container does not, however, make any user interface changes at <br> *  this point.  See OnUIActivate. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnInPlaceActivate(void) <br>    { <br>    //m_pIOleIPObject is our in-place flag. <br>    m_pTen-&gt;m_pObj-&gt;QueryInterface(IID_IOleInPlaceObject <br>        , (PPVOID)&amp;m_pTen-&gt;m_pIOleIPObject); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnInPlaceDeactivate <br> * <br> * Purpose: <br> *  Notifies the container that the object has deactivated itself <br> *  from an in-place state.  Opposite of OnInPlaceActivate.  The <br> *  container does not change any UI at this point. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnInPlaceDeactivate(void) <br>    { <br>    /* <br>     * Since we don't have an Undo command, we can tell the object <br>     * right away to discard its Undo state. <br>     */ <br>    m_pTen-&gt;Activate(OLEIVERB_DISCARDUNDOSTATE, NULL); <br>    ReleaseInterface(m_pTen-&gt;m_pIOleIPObject); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnUIActivate <br> * <br> * Purpose: <br> *  Informs the container that the object is going to start munging <br> *  around with user interface, like replacing the menu.  The <br> *  container should remove any relevant UI in preparation. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnUIActivate(void) <br>    { <br>    PCPatronDoc     pDoc; <br> <br>    m_pTen-&gt;m_pPG-&gt;m_fAddUI=FALSE; <br> <br>    pDoc=(PCPatronDoc)SendMessage(GetParent(m_pTen-&gt;m_hWnd) <br>        , DOCM_PDOCUMENT, 0, 0L); <br> <br>    /* <br>     * Change the currently selected tenant in the page.  This <br>     * will UIDeactivate the currently UI Active tenant. <br>     */ <br>    g_fSwitchingActive=TRUE; <br>    m_pTen-&gt;m_pPG-&gt;m_pPageCur-&gt;SwitchActiveTenant(m_pTen); <br>    g_fSwitchingActive=FALSE; <br> <br>    //Hide the frame tools if necessary. <br>    g_pFR-&gt;ShowUIAndTools(pDoc-&gt;NoObjectFrameTools(0, FALSE), FALSE); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnUIDeactivate <br> * <br> * Purpose: <br> *  Informs the container that the object is deactivating its <br> *  in-place user interface at which time the container may <br> *  reinstate its own.  Opposite of OnUIActivate. <br> * <br> * Parameters: <br> *  fUndoable       BOOL indicating if the object will actually <br> *                  perform an Undo if the container calls <br> *                  ReactivateAndUndo. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnUIDeactivate(BOOL fUndoable) <br>    { <br>    PCDocument  pDoc; <br>    MSG         msg; <br> <br>    /* <br>     * Ignore this notification if we're switching between <br>     * multiple active objects. <br>     */ <br>    if (g_fSwitchingActive) <br>        return NOERROR; <br> <br>    //If in shutdown (NULL storage), don't check messages. <br>    if (NULL==m_pTen-&gt;m_pIStorage) <br>        { <br>        g_pFR-&gt;ReinstateUI(); <br>        return NOERROR; <br>        } <br> <br>    pDoc=(PCDocument)SendMessage(GetParent(m_pTen-&gt;m_hWnd) <br>        , DOCM_PDOCUMENT, 0, 0L); <br> <br>    //If there's a pending double-click, delay showing our UI <br>    if (!PeekMessage(&amp;msg, pDoc-&gt;Window(), WM_LBUTTONDBLCLK <br>        , WM_LBUTTONDBLCLK, PM_NOREMOVE | PM_NOYIELD)) <br>        { <br>        //Turn everything back on. <br>        g_pFR-&gt;ReinstateUI(); <br>        } <br>    else <br>        m_pTen-&gt;m_pPG-&gt;m_fAddUI=TRUE; <br> <br>    SetFocus(pDoc-&gt;Window()); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::DeactivateAndUndo <br> * <br> * Purpose: <br> *  If immediately after activation the object does an Undo, the <br> *  action being undone is the activation itself, and this call <br> *  informs the container that this is, in fact, what happened. <br> *  The container should call IOleInPlaceObject::UIDeactivate. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::DeactivateAndUndo(void) <br>    { <br>    m_pTen-&gt;m_pIOleIPObject-&gt;InPlaceDeactivate(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::DiscardUndoState <br> * <br> * Purpose: <br> *  Informs the container that something happened in the object <br> *  that means the container should discard any undo information <br> *  it currently maintains for the object. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an appropriate error code. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::DiscardUndoState(void) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::GetWindowContext <br> * <br> * Purpose: <br> *  Provides an in-place object with pointers to the frame and <br> *  document level in-place interfaces (IOleInPlaceFrame and <br> *  IOleInPlaceUIWindow) such that the object can do border <br> *  negotiation and so forth.  Also requests the position and <br> *  clipping rectangles of the object in the container and a <br> *  pointer to an OLEINPLACEFRAME info structure which contains <br> *  accelerator information. <br> * <br> *  Note that the two interfaces this call returns are not <br> *  available through QueryInterface on IOleInPlaceSite since they <br> *  live with the frame and document, but not the site. <br> * <br> * Parameters: <br> *  ppIIPFrame      LPOLEINPLACEFRAME * in which to return the <br> *                  AddRef'd pointer to the container's <br> *                  IOleInPlaceFrame. <br> *  ppIIPUIWindow   LPOLEINPLACEUIWINDOW * in which to return <br> *                  the AddRef'd pointer to the container document's <br> *                  IOleInPlaceUIWindow. <br> *  prcPos          LPRECT in which to store the object's position. <br> *  prcClip         LPRECT in which to store the object's visible <br> *                  region. <br> *  pFI             LPOLEINPLACEFRAMEINFO to fill with accelerator <br> *                  stuff. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::GetWindowContext <br>    (LPOLEINPLACEFRAME *ppIIPFrame, LPOLEINPLACEUIWINDOW <br>    *ppIIPUIWindow, LPRECT prcPos, LPRECT prcClip <br>    , LPOLEINPLACEFRAMEINFO pFI) <br>    { <br>    PCPatronDoc     pDoc; <br>    RECTL           rcl; <br> <br>    *ppIIPUIWindow=NULL; <br> <br>    *ppIIPFrame=(LPOLEINPLACEFRAME)g_pFR; <br>    g_pFR-&gt;AddRef(); <br> <br>    pDoc=(PCPatronDoc)SendMessage(GetParent(m_pTen-&gt;m_hWnd) <br>        , DOCM_PDOCUMENT, 0, 0L); <br> <br>    if (NULL!=pDoc) <br>        { <br>        pDoc-&gt;QueryInterface(IID_IOleInPlaceUIWindow <br>            , (PPVOID)ppIIPUIWindow); <br>        } <br> <br>    //Now get the rectangles and frame information. <br>    m_pTen-&gt;RectGet(&amp;rcl, TRUE); <br>    RECTFROMRECTL(*prcPos, rcl); <br> <br>    //Include scroll position here. <br>    OffsetRect(prcPos, -(int)m_pTen-&gt;m_pPG-&gt;m_xPos <br>        , -(int)m_pTen-&gt;m_pPG-&gt;m_yPos); <br> <br>    SetRect(prcClip, 0, 0, 32767, 32767); <br> <br>    pFI-&gt;cb=sizeof(OLEINPLACEFRAMEINFO); <br>   #ifdef MDI <br>    pFI-&gt;fMDIApp=TRUE; <br>   #else <br>    pFI-&gt;fMDIApp=FALSE; <br>   #endif <br> <br>    pFI-&gt;hwndFrame=g_pFR-&gt;Window(); <br> <br>    pFI-&gt;haccel=g_pFR-&gt;m_hAccelIP; <br>    pFI-&gt;cAccelEntries=CINPLACEACCELERATORS; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::Scroll <br> * <br> * Purpose: <br> *  Asks the container to scroll the document, and thus the object, <br> *  by the given amounts in the sz parameter. <br> * <br> * Parameters: <br> *  sz              SIZE containing signed horizontal and vertical <br> *                  extents by which the container should scroll. <br> *                  These are in device units. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::Scroll(SIZE sz) <br>    { <br>    int         x, y; <br> <br>    x=m_pTen-&gt;m_pPG-&gt;m_xPos+sz.cx; <br>    y=m_pTen-&gt;m_pPG-&gt;m_yPos+sz.cy; <br> <br>    SendScrollPosition(m_pTen-&gt;m_hWnd, WM_HSCROLL, x); <br>    SendScrollPosition(m_pTen-&gt;m_hWnd, WM_VSCROLL, y); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceSite::OnPosRectChange <br> * <br> * Purpose: <br> *  Informs the container that the in-place object was resized. <br> *  The container must call IOleInPlaceObject::SetObjectRects. <br> *  This does not change the site's rectangle in any case. <br> * <br> * Parameters: <br> *  prcPos          LPCRECT containing the new size of the object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceSite::OnPosRectChange(LPCRECT prcPos) <br>    { <br>    if (NULL!=prcPos) <br>        m_pTen-&gt;m_rcPos=*prcPos; <br> <br>    m_pTen-&gt;UpdateInPlaceObjectRects(prcPos, FALSE); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

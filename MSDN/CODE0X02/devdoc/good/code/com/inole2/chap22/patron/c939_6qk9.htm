<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIENT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context939"></a>CLIENT.CPP</h2>
<pre><code>/* <br> * CLIENT.CPP <br> * Patron Chapter 22 <br> * <br> * Implementation of the CPatronClient class that just makes sure <br> * we get a CPatronDoc on doc creation and that we initialize fully. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CPatronClient::CPatronClient <br> * CPatronClient::~CPatronClient <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE of the application. <br> *  pFR             PCFrame to the frame object. <br> */ <br> <br>CPatronClient::CPatronClient(HINSTANCE hInst, PCFrame pFR) <br>    : CClient(hInst, pFR) <br>    { <br>    return; <br>    } <br> <br> <br>CPatronClient::~CPatronClient(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronClient::CreateCDocument <br> * <br> * Purpose: <br> *  Constructs a new document specific to the application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  PCDocument      Pointer to the new document object. <br> */ <br> <br>PCDocument CPatronClient::CreateCDocument(void) <br>    { <br>    return (PCDocument)(new CPatronDoc(m_hInst, m_pFR, m_pAdv)); <br>    } <br> <br> <br> <br>//CHAPTER22MOD <br>/* <br> * CPatronClient::SetMenu <br> * <br> * Purpose: <br> *  Changes the frame-level menu, isolating the rest of the <br> *  application from MDI/SDI considerations. <br> * <br> * Parameters: <br> *  hWndFrame       HWND of the frame window. <br> *  hMenu           HMENU to set in the frame for the current <br> *                  document. <br> *  hMenuWin        HMENU of the window menu. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronClient::SetMenu(HWND hWndFrame, HMENU hMenu <br>    , HMENU hMenuWin) <br>    { <br>   #ifdef MDI <br>     MDISETMENU(m_hWnd, hMenu, hMenuWin); <br>     MDIREFRESHMENU(m_hWnd); <br>   #else <br>    if (NULL!=hMenu) <br>        ::SetMenu(hWndFrame, hMenu); <br>   #endif <br> <br>    DrawMenuBar(hWndFrame); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronClient::MoveWithoutFamily <br> * <br> * Purpose: <br> *  This specific in-place activation function applies moves the <br> *  client window but to leave all child windows within it exactly <br> *  where they are to keep in-place objects in the same absolute <br> *  screen position. <br> * <br> * Parameters: <br> *  prc             LPRECT containing the new space for the client <br> *  dx, dy          ints specifying how much to move the client <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronClient::MoveWithoutFamily(LPRECT prc, int dx, int dy) <br>    { <br>    RECT        rc; <br>    HWND        hWndFrame; <br>    HWND        hWnd; <br>    POINT       pt; <br> <br>    hWndFrame=GetParent(m_hWnd); <br>    SendMessage(hWndFrame, WM_SETREDRAW, FALSE, 0L); <br> <br>    ShowWindow(m_hWnd, SW_HIDE); <br>    SetWindowPos(m_hWnd, NULL, prc-&gt;left, prc-&gt;top <br>        , prc-&gt;right-prc-&gt;left, prc-&gt;bottom-prc-&gt;top <br>        , SWP_NOZORDER | SWP_NOACTIVATE); <br> <br>    //Move all children of the client <br>    hWnd=GetWindow(m_hWnd, GW_CHILD); <br> <br>    while (NULL!=hWnd) <br>        { <br>        GetWindowRect(hWnd, &amp;rc); <br>        SETPOINT(pt, rc.left, rc.top); <br>        ScreenToClient(m_hWnd, &amp;pt); <br> <br>        if (pt.x!=dx &amp;&amp; pt.y!=dy &amp;&amp; !IsZoomed(hWnd)) <br>            { <br>            //Move window in the opposite direction as the client <br>            SetWindowPos(hWnd, NULL, pt.x-dx, pt.y-dy <br>                , rc.right-rc.left, rc.bottom-rc.top <br>                , SWP_NOZORDER | SWP_NOACTIVATE | SWP_NOSIZE); <br>            } <br> <br>        hWnd=GetWindow(hWnd, GW_HWNDNEXT); <br>        } <br> <br>    SendMessage(hWndFrame, WM_SETREDRAW, TRUE, 0L); <br>    ShowWindow(m_hWnd, SW_SHOW); <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CPatronClient::CallContextHelpOnDocuments <br> * <br> * Purpose: <br> *  Calls IOleInPlaceUIWindow-&gt;ContextSensitiveHelp for each <br> *  document window as required in an MDI container.  This does <br> *  nothing in SDI. <br> * <br> * Parameters: <br> *  fEnterMode      BOOl to pass to the documents <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronClient::CallContextHelpOnDocuments(BOOL fEnterMode) <br>    { <br>    LPOLEINPLACEUIWINDOW    pUIWin; <br>    HWND                    hWndT; <br>    PCPatronDoc             pDoc; <br> <br>    //Loop through the documents calling their functions. <br>    hWndT=GetWindow(m_hWnd, GW_CHILD); <br> <br>    for ( ; hWndT; hWndT=GetWindow(hWndT, GW_HWNDNEXT)) <br>        { <br>        //Skip if icon title window <br>        if (NULL!=GetWindow(hWndT, GW_OWNER)) <br>            continue; <br> <br>        pDoc=(PCPatronDoc)SendMessage(hWndT, DOCM_PDOCUMENT <br>            , 0, 0L); <br> <br>        if (NULL==pDoc) <br>            continue; <br> <br>        pDoc-&gt;QueryInterface(IID_IOleInPlaceUIWindow <br>            , (PPVOID)&amp;pUIWin); <br> <br>        if (NULL==pUIWin) <br>            continue; <br> <br>        pUIWin-&gt;ContextSensitiveHelp(fEnterMode); <br>        pUIWin-&gt;Release(); <br>        } <br> <br>    return; <br>    } <br> <br> <br>//End CHAPTER22MOD </code></pre>
<p>&nbsp;</p></body>
</HTML>

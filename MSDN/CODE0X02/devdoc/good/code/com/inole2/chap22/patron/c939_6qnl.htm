<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUILINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context951"></a>IUILINK.CPP</h2>
<pre><code>/* <br> * IUILINK.CPP <br> * Patron Chapter 22 <br> * <br> * Implementation of an object with the IOleUILinkContainer <br> * interface necessary to use the standard Links Dialog.  This <br> * is implemented as a stand-along object with access to the CPage <br> * with which its associated, primiarily because it is only used <br> * for the one dialog.  Therefore this object has it's own IUnknown. <br> * In addition, we use the Links Assistant object developed in this <br> * chapter to simplify our own code. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "patron.h" <br> <br> <br>/* <br> * CIOleUILinkContainer::CIOleUILinkContainer <br> * CIOleUILinkContainer::~CIOleUILinkContainer <br> * <br> * Parameters (Constructor): <br> *  pPage           PCPage of the page we're in. <br> */ <br> <br>CIOleUILinkContainer::CIOleUILinkContainer(PCPage pPage) <br>    { <br>    m_cRef=0; <br>    m_pPage=pPage; <br>    m_iTenant=0; <br>    m_pDelIUILinks=NULL; <br>    m_fDirty=FALSE; <br>    return; <br>    } <br> <br>CIOleUILinkContainer::~CIOleUILinkContainer(void) <br>    { <br>    ReleaseInterface(m_pDelIUILinks); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::Init <br> * <br> * Purpose: <br> *  Performs initialization on the object that might fail.  In <br> *  particular this creates an object of CLSID_LinksAssistant that <br> *  helps in implementing this interface. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> */ <br> <br>BOOL CIOleUILinkContainer::Init(void) <br>    { <br>    HRESULT     hr; <br> <br>    hr=CoCreateInstance(CLSID_LinksAssistant, NULL <br>        , CLSCTX_INPROC_SERVER, IID_IOleUILinkContainer <br>        , (PPVOID)&amp;m_pDelIUILinks); <br> <br>    return SUCCEEDED(hr); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::QueryInterface <br> * CIOleUILinkContainer::AddRef <br> * CIOleUILinkContainer::Release <br> * <br> * Purpose: <br> *  IUnknown members for CIOleUILinkContainer object. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IOleUILinkContainer==riid) <br>        { <br>        *ppv=this; <br>        AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CIOleUILinkContainer::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CIOleUILinkContainer::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::GetNextLink <br> * <br> * Purpose: <br> *  Called when the Links dialog is filling its listbox.  Here we <br> *  need to return a key for the first link if dwLink is zero, then <br> *  return the next links if it's non-zero. <br> * <br> * Parameters: <br> *  dwLink          DWORD last returned from this function.  Zero if <br> *                  this is the first call to this function. <br> * <br> * Return Value: <br> *  DWORD           Some value that identifies this object.  Zero <br> *                  stops the sequence such that this function is <br> *                  no longer called. <br> */ <br> <br>STDMETHODIMP_(DWORD) CIOleUILinkContainer::GetNextLink(DWORD dwLink) <br>    { <br>    PCTenant        pTenant; <br> <br>    //If we're told to start the sequence, set index to zero. <br>    if (0L==dwLink) <br>        m_iTenant=0; <br> <br>    /* <br>     * On each subsequent call, find the next linked object in <br>     * this document and return it.  Make sure the index is <br>     * incremented for the next time this function is called. <br>     */ <br>    for ( ; m_iTenant &lt; m_pPage-&gt;m_cTenants; m_iTenant++) <br>        { <br>        if (m_pPage-&gt;TenantGet(m_iTenant, &amp;pTenant, FALSE)) <br>            { <br>            if (TENANTTYPE_LINKEDOBJECT==pTenant-&gt;TypeGet()) <br>                { <br>                m_iTenant++; <br>                return (DWORD)pTenant; <br>                } <br>            } <br>        } <br> <br>    //If we hit the end of list, this tells the dialog to stop. <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::SetLinkUpdateOptions <br> * <br> * Purpose: <br> *  Informs the application to call IOleLink::SetUpdateOptions for <br> *  the object identified by dwLink. <br> * <br> * Parameters: <br> *  dwLink          DWORD object identifier as returned from <br> *                  GetNextLink. <br> *  dwOptions       DWORD containing the new options. <br> * <br> * Return Value: <br> *  HRESULT         Return value of IOleLink::SetUpdateOptions. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::SetLinkUpdateOptions(DWORD dwLink <br>    , DWORD dwOptions) <br>    { <br>    LPOLELINK       pIOleLink; <br>    HRESULT         hr; <br> <br>    if (NULL==dwLink) <br>        return ResultFromScode(E_FAIL); <br> <br>    /* <br>     * Your responsibility is to call the object's <br>     * IOleLink::SetUpdateOptions function with dwOptions.  Simple? <br>     * <br>     * For Patron we must first get the object pointer obtainable <br>     * from the tenant's ObjectGet function, then QI for IOleLink. <br>     */ <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=pIOleLink-&gt;SetUpdateOptions(dwOptions); <br>    pIOleLink-&gt;Release(); <br> <br>    m_fDirty=SUCCEEDED(hr); <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::GetLinkUpdateOptions <br> * <br> * Purpose: <br> *  Requests the container to call IOleLink::GetUpdateOptions for <br> *  the object identified by dwLink. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the object <br> *  pdwOptions      LPDWORD in which to store the options. <br> * <br> * Return Value: <br> *  HRESULT         Return value of IOleLink::GetUpdateOptions <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::GetLinkUpdateOptions(DWORD dwLink <br>    , LPDWORD pdwOptions) <br>    { <br>    LPOLELINK       pIOleLink; <br>    HRESULT         hr; <br> <br>    if (NULL==dwLink) <br>        return ResultFromScode(E_FAIL); <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=pIOleLink-&gt;GetUpdateOptions(pdwOptions); <br>    pIOleLink-&gt;Release(); <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::SetLinkSource <br> * <br> * Purpose: <br> *  Changes the moniker to which an object is linked. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the object in question. <br> *  pszName         LPTSTR to the displayable name of the source. <br> *  cchName         ULONG length of the file portaion of pszName <br> *  pchEaten        ULONG * in which to return the number of <br> *                  characters used in parsing pszDisplayName. <br> *  fValidate       BOOL indicating if we're to validate that the <br> *                  source exists first. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL otherwise. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::SetLinkSource(DWORD dwLink <br>    , LPTSTR pszName, ULONG cchName, ULONG *pchEaten <br>    , BOOL fValidate) <br>    { <br>    PCTenant        pTenant=(PCTenant)dwLink; <br>    HRESULT         hr; <br>    LPOLELINK       pIOleLink; <br> <br>    if (NULL==dwLink) <br>        return ResultFromScode(E_FAIL); <br> <br>    //This is for use in GetLinkSource, below. <br>    pTenant-&gt;m_fLinkAvail=FALSE; <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=m_pDelIUILinks-&gt;SetLinkSource((DWORD)pIOleLink, pszName <br>        , cchName, pchEaten, fValidate); <br>    pIOleLink-&gt;Release(); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    //hr will be S_FALSE if link is unavailable. <br>    pTenant-&gt;Repaint(); <br>    pTenant-&gt;m_fLinkAvail=(NOERROR==hr); <br>    m_fDirty=TRUE; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::GetLinkSource <br> * <br> * Purpose: <br> *  Retrieves various strings and values for this link source. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the object affected. <br> *  ppszName        LPTSTR * in which to return the new source <br> *                  name <br> *  pcchName        ULONG * in which to return the length of <br> *                  pszName <br> *  ppszFullLink    LPTSTR * in which to return the full name of <br> *                  the class of linked object. <br> *  ppszShortLink   LPTSTR * in which to return the short name of <br> *                  the class of linked object. <br> *  pfSourceAvail   BOOL * in which to return if this is an <br> *                  available link source. <br> *  pfSelected      BOOL * in which to return if this object is <br> *                  currently selected in the document.  This <br> *                  selects the item in the listbox for this object. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, error code otherwise. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::GetLinkSource(DWORD dwLink <br>    , LPTSTR *ppszName, ULONG *pcchName, LPTSTR *ppszFullLink <br>    , LPTSTR *ppszShortLink, BOOL *pfSourceAvail, BOOL *pfSelected) <br>    { <br>    HRESULT         hr; <br>    PCTenant        pTenant=(PCTenant)dwLink; <br>    LPOLELINK       pIOleLink=NULL; <br>    LPOLEOBJECT     pIOleObject=NULL; <br>    LPMONIKER       pmk=NULL; <br>    LPMONIKER       pmkFirst=NULL; <br>    LPBC            pbc=NULL; <br> <br>    if (NULL==dwLink) <br>        return ResultFromScode(E_FAIL); <br> <br>    //We know what this is from SetLinkSource <br>    *pfSourceAvail=pTenant-&gt;m_fLinkAvail; <br> <br>    if (pfSelected) <br>        *pfSelected=pTenant-&gt;FIsSelected(); <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=m_pDelIUILinks-&gt;GetLinkSource((DWORD)pIOleLink, ppszName <br>        , pcchName, ppszFullLink, ppszShortLink, pfSourceAvail <br>        , pfSelected); <br> <br>    pIOleLink-&gt;Release(); <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::OpenLinkSource <br> * <br> * Purpose: <br> *  Asks the container to call DoVerb on this object with <br> *  OLEIVERB_SHOW. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the linked object. <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::OpenLinkSource(DWORD dwLink) <br>    { <br>    PCTenant        pTenant=(PCTenant)dwLink; <br> <br>    //CHAPTER22MOD <br>    pTenant-&gt;Activate(OLEIVERB_OPEN, NULL); <br>    //End CHAPTER22MOD <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::UpdateLink <br> * <br> * Purpose: <br> *  Asks the container to update the link for this object. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the linked object. <br> *  fErrorMessage   BOOL indicating if we can show errors. <br> *  fErrorAction    BOOL making no sense whatsoever. <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::UpdateLink(DWORD dwLink <br>    , BOOL fErrorMessage, BOOL fErrorAction) <br>    { <br>    PCTenant        pTenant=(PCTenant)dwLink; <br>    LPOLELINK       pIOleLink; <br>    HRESULT         hr; <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    hr=m_pDelIUILinks-&gt;UpdateLink((DWORD)pIOleLink, fErrorMessage <br>        , fErrorAction); <br> <br>    pTenant-&gt;Repaint(); <br>    pTenant-&gt;m_fLinkAvail=SUCCEEDED(hr); <br>    pIOleLink-&gt;Release(); <br> <br>    if (FAILED(hr)) <br>        { <br>        if (fErrorMessage) <br>            { <br>            MessageBox(m_pPage-&gt;m_hWnd <br>                , TEXT("Could not update link."), TEXT("Patron") <br>                , MB_OK); <br>            } <br>        } <br>    else <br>        m_fDirty=TRUE; <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CIOleUILinkContainer::CancelLink <br> * <br> * Purpose: <br> *  Requests that the container turn this linked object into a <br> *  static object. <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the linked object. <br> * <br> * Return Value: <br> *  HRESULT         Standard. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::CancelLink(DWORD dwLink) <br>    { <br>    PCTenant        pTenant=(PCTenant)dwLink; <br>    LPOLELINK       pIOleLink; <br>    HRESULT         hr; <br> <br>    hr=GetObjectInterface(dwLink, IID_IOleLink, (PPVOID)&amp;pIOleLink); <br> <br>    if (FAILED(hr)) <br>        return hr; <br> <br>    //This sets the source moniker to NULL. <br>    m_pDelIUILinks-&gt;CancelLink((DWORD)pIOleLink); <br>    pIOleLink-&gt;Release(); <br> <br>    //Go change this object over to a static one. <br>    pTenant-&gt;ConvertToStatic(); <br> <br>    m_fDirty=TRUE; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>//PROTECTED FUNCTIONS INTERNAL TO CIOleUILinkContainer <br> <br> <br>/* <br> * CIOleUILinkContainer::GetObjectInterface <br> * (Protected) <br> * <br> * Purpose: <br> *  Retrieves and interface pointer for the object identified by <br> *  dwLink <br> * <br> * Parameters: <br> *  dwLink          DWORD identifying the object <br> *  riid            REFIID of the interface desired. <br> *  ppv             PPVOID into which we return the pointer. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, error code otherwise. <br> */ <br> <br>STDMETHODIMP CIOleUILinkContainer::GetObjectInterface(DWORD dwLink <br>    , REFIID riid, PPVOID ppv) <br>    { <br>    PCTenant        pTenant=(PCTenant)dwLink; <br>    LPUNKNOWN       pIUnknown; <br>    HRESULT         hr; <br> <br>    pTenant-&gt;ObjectGet(&amp;pIUnknown); <br>    hr=pIUnknown-&gt;QueryInterface(riid, ppv); <br>    pIUnknown-&gt;Release(); <br> <br>    return hr; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

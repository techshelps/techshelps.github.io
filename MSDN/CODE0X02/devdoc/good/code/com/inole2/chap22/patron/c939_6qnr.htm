<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATRON.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context957"></a>PATRON.CPP</h2>
<pre><code>/* <br> * PATRON.CPP <br> * Patron Chapter 22 <br> * <br> * WinMain which is all we need for the basic application. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "patron.h" <br> <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br>HWND        g_hWnd=NULL; <br>BOOL        g_fUser=TRUE; <br> <br> <br>//CHAPTER22MOD <br>/* <br> * The in-place site needs to have access to the frame and its <br> * IOleInPlaceFrame interface.  A global, pardon me, is the simplest <br> * way to achieve this. <br> */ <br> <br>PCPatronFrame   g_pFR; <br>//End CHAPTER22MOD <br> <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application.  Should register the app class <br> *  if a previous instance has not done so and do any other one-time <br> *  initializations. <br> */ <br> <br>int PASCAL WinMain (HINSTANCE hInst, HINSTANCE hPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    PCPatronFrame   pFR; <br>    FRAMEINIT       fi; <br>    WPARAM          wRet=0; <br> <br>    SETMESSAGEQUEUE; <br> <br>    //Attempt to allocate and initialize the application <br>    pFR=new CPatronFrame(hInst, hPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pFR) <br>        return -1; <br> <br>    //CHAPTER22MOD <br>    g_pFR=pFR; <br>    //End CHAPTER22MOD <br> <br>    fi.idsMin=IDS_FRAMEMIN; <br>    fi.idsMax=IDS_FRAMEMAX; <br>    fi.idsStatMin=IDS_STATMESSAGEMIN; <br>    fi.idsStatMax=IDS_STATMESSAGEMAX; <br>    fi.idStatMenuMin=ID_MENUFILE; <br>    fi.idStatMenuMax=ID_MENUHELP; <br>    fi.iPosWindowMenu=WINDOW_MENU; <br>    fi.cMenus=CMENUS; <br> <br>    fi.x=CW_USEDEFAULT; <br>    fi.y=CW_USEDEFAULT; <br>    fi.cx=CW_USEDEFAULT; <br>    fi.cy=CW_USEDEFAULT; <br> <br>    //If we can initialize pFR, start chugging messages <br>    if (pFR-&gt;Init(&amp;fi)) <br>        wRet=pFR-&gt;MessageLoop(); <br> <br>    delete pFR; <br>    return wRet; <br>    } <br> <br> <br> <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the Patron Document object to call when it gets <br> *  destroyed.  We destroy the main window if the proper conditions <br> *  are met for shutdown. <br> */ <br> <br>void ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br> <br>    //No more objects, no locks, no user control, shut the app down. <br>    if (0==g_cObj &amp;&amp; 0==g_cLock &amp;&amp; IsWindow(g_hWnd) &amp;&amp; !g_fUser) <br>        PostMessage(g_hWnd, WM_CLOSE, 0, 0L); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CPatronFrame <br> * CPatronFrame::~CPatronFrame <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE from WinMain <br> *  hInstPrev       HINSTANCE from WinMain <br> *  pszCmdLine      LPSTR from WinMain <br> *  nCmdShow        int from WInMain <br> */ <br> <br>CPatronFrame::CPatronFrame(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    : CFrame(hInst, hInstPrev, pszCmdLine, nCmdShow) <br>    { <br>    m_fInitialized=FALSE; <br>    m_pIClassDataTran=NULL; <br> <br>    m_pDocCreated=NULL; <br>    m_fEmbedding=FALSE; <br> <br>    m_dwRegCO=0; <br>    m_pIClassFactory=NULL; <br> <br>    //CHAPTER22MOD <br>    m_cRef=0; <br>    m_hAccelIP=NULL; <br>    m_hWndObj=NULL; <br>    m_hMenuOrg=NULL; <br>    m_hMenuTop=NULL; <br>    m_fOurToolsShowing=TRUE; <br>    m_fInContextHelp=FALSE; <br>    m_pIOleIPActiveObject=NULL; <br>    //End CHAPTER22MOD <br> <br>    return; <br>    } <br> <br> <br>CPatronFrame::~CPatronFrame(void) <br>    { <br>    //Opposite of CoRegisterClassObject, takes class factory ref to 1 <br>    if (0L!=m_dwRegCO) <br>        CoRevokeClassObject(m_dwRegCO); <br> <br>    //This should be the last Release, which frees the class factory. <br>    ReleaseInterface(m_pIClassFactory); <br> <br>    if (NULL!=m_pIClassDataTran) <br>        { <br>        m_pIClassDataTran-&gt;LockServer(FALSE); <br>        m_pIClassDataTran-&gt;Release(); <br>        } <br> <br>    OleFlushClipboard(); <br> <br>    if (m_fInitialized) <br>        OleUninitialize(); <br> <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::Init <br> * <br> * Purpose: <br> *  Call OleInitialize then calling down into the base class <br> *  initialization. <br> * <br> * Parameters: <br> *  pFI             PFRAMEINIT containing initialization <br> *                  parameters. <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeded, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::Init(PFRAMEINIT pFI) <br>    { <br>    HRESULT     hr; <br>    BOOL        fRet; <br> <br>    CHECKVER_OLE; <br> <br>    if (FAILED(OleInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    //Lock the data transfer object factory as an optimization. <br>    hr=CoGetClassObject(CLSID_DataTransferObject <br>        , CLSCTX_INPROC_SERVER, NULL, IID_IClassFactory <br>        , (PPVOID)&amp;m_pIClassDataTran); <br> <br>    if (SUCCEEDED(hr)) <br>        m_pIClassDataTran-&gt;LockServer(TRUE); <br> <br>    //Check for command line flags <br>    ParseCommandLine(); <br> <br>    if (NULL!=m_ppszCmdArgs) <br>        { <br>        if(0==lstrcmpi(m_ppszCmdArgs[0], TEXT("-Embedding")) <br>           || 0==lstrcmpi(m_ppszCmdArgs[0], TEXT("/Embedding"))) <br>            m_fEmbedding=TRUE; <br>        } <br> <br>    g_fUser=!m_fEmbedding; <br> <br>    if (m_fEmbedding) <br>        { <br>        HRESULT     hr; <br> <br>        m_pIClassFactory=new CLinkClassFactory(this); <br> <br>        if (NULL==m_pIClassFactory) <br>            return FALSE; <br> <br>        //Since we hold on to this, we should AddRef it. <br>        m_pIClassFactory-&gt;AddRef(); <br> <br>        hr=CoRegisterClassObject(CLSID_PatronPages, m_pIClassFactory <br>            , CLSCTX_LOCAL_SERVER, REGCLS_SINGLEUSE, &amp;m_dwRegCO); <br> <br>        if (FAILED(hr)) <br>            return FALSE; <br>        } <br> <br>    //CHAPTER22MOD <br>    //Load in-place accelerators <br>    m_hAccelIP=LoadAccelerators(m_hInst <br>        , MAKEINTRESOURCE(IDR_INPLACEACCELERATORS)); <br> <br>    if (NULL==m_hAccelIP) <br>        return FALSE; <br> <br>    fRet=CFrame::Init(pFI); <br> <br>    m_hMenuOrg=GetMenu(m_hWnd); <br>    return fRet; <br>    //End CHAPTER22MOD <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateCClient <br> * <br> * Purpose: <br> *  Constructs a new client specific to the application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  PCClient        Pointer to the new client object. <br> */ <br> <br>PCClient CPatronFrame::CreateCClient(void) <br>    { <br>    return (PCClient)(new CPatronClient(m_hInst, this)); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::RegisterAllClasses <br> * <br> * Purpose: <br> *  Registers all classes used in this application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if registration succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::RegisterAllClasses(void) <br>    { <br>    WNDCLASS        wc; <br> <br>    //First let the standard frame do its thing <br>    if (!CFrame::RegisterAllClasses()) <br>        return FALSE; <br> <br>    //We need double-clicks now and for object activation. <br>    wc.style         = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; <br>    wc.hInstance     = m_hInst; <br>    wc.cbClsExtra    = 0; <br>    wc.lpfnWndProc   = PagesWndProc; <br>    wc.cbWndExtra    = CBPAGESWNDEXTRA; <br>    wc.hIcon         = NULL; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH)(COLOR_APPWORKSPACE+1); <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = SZCLASSPAGES; <br> <br>    if (!RegisterClass(&amp;wc)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::PreShowInit <br> * <br> * Purpose: <br> *  Called from Init before intially showing the window.  We do <br> *  whatever else we want here, modifying m_nCmdShow as necessary <br> *  which affects ShowWindow in Init. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if this successful, FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::PreShowInit(void) <br>    { <br>    //Base class does nothing <br>    CFrame::PreShowInit(); <br> <br>    //Save the window handle for shutdown if necessary. <br>    g_hWnd=m_hWnd; <br> <br>    //If we're -Embedding, don't show the window initially. <br>    if (m_fEmbedding) <br>        m_nCmdShow=SW_HIDE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::OnCommand <br> * <br> * Purpose: <br> *  WM_COMMAND handler for the Patron frame window that processes <br> *  extra File menu items as well as the Page menu. <br> * <br> * Parameters: <br> *  hWnd            HWND of the frame window. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LRESULT         Return value for the message. <br> */ <br> <br>LRESULT CPatronFrame::OnCommand(HWND hWnd, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    PCPatronDoc     pDoc; <br> <br>    COMMANDPARAMS(wID, wCode, hWndMsg); <br> <br>    /* <br>     * Don't bother with anything during first initialization, <br>     * skipping many toolbar notifications. <br>     */ <br>    if (m_fInit) <br>        return 0L; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    //CHAPTER22MOD <br>    //Also check for the open command now too. <br>    if (NULL!=pDoc &amp;&amp; ((IDM_VERBMIN &lt;= wID) &amp;&amp; (IDM_VERBMAX &gt;= wID) <br>        || IDM_OPENOBJECT==wID)) <br>        { <br>        MSG     msg; <br>        DWORD   dw; <br>        LONG    iVerb=(long)(wID-IDM_VERBMIN); <br> <br>        //Include a message for in-place objects. <br>        msg.hwnd=NULL; <br>        msg.message=WM_COMMAND; <br>        msg.wParam=wParam; <br>        msg.lParam=lParam; <br>        msg.time=GetMessageTime(); <br> <br>        dw=GetMessagePos(); <br>        SETPOINT(msg.pt, LOWORD(dw), HIWORD(dw)); <br> <br>        if (IDM_OPENOBJECT==wID) <br>            iVerb=OLEIVERB_OPEN; <br> <br>        pDoc-&gt;ActivateObject(iVerb, &amp;msg); <br>        return 0L; <br>        } <br>    //End CHAPTER22MOD <br> <br> <br>    switch (wID) <br>        { <br>        case IDM_FILEPRINT: <br>            pDoc-&gt;Print(m_hWnd); <br>            return 0L; <br> <br>        case IDM_FILEPRINTERSETUP: <br>            pDoc-&gt;PrinterSetup(m_hWnd, FALSE); <br>            return 0L; <br> <br>        case IDM_EDITPASTESPECIAL: <br>            pDoc-&gt;PasteSpecial(m_hWnd); <br>            return 0L; <br> <br>        case IDM_EDITDELETEOBJECT: <br>            pDoc-&gt;Delete(); <br>            return 0L; <br> <br>        case IDM_EDITINSERTOBJECT: <br>            pDoc-&gt;InsertObject(m_hWnd); <br>            return 0L; <br> <br>        case IDM_EDITCONVERT: <br>            pDoc-&gt;ConvertObject(m_hWnd); <br>            return 0L; <br> <br>        case IDM_EDITLINKS: <br>            pDoc-&gt;EditLinks(m_hWnd); <br>            return 0L; <br> <br>        case IDM_PAGENEWPAGE: <br>            pDoc-&gt;NewPage(); <br>            break; <br> <br>        case IDM_PAGEDELETEPAGE: <br>            pDoc-&gt;DeletePage(); <br>            break; <br> <br>        case IDM_PAGENEXTPAGE: <br>            pDoc-&gt;NextPage(); <br>            break; <br> <br>        case IDM_PAGEPREVIOUSPAGE: <br>            pDoc-&gt;PreviousPage(); <br>            break; <br> <br>        case IDM_PAGEFIRSTPAGE: <br>            pDoc-&gt;FirstPage(); <br>            break; <br> <br>        case IDM_PAGELASTPAGE: <br>            pDoc-&gt;LastPage(); <br>            break; <br> <br>        case IDM_PAGESHOWOBJECTS: <br>            { <br>            BOOL    fTemp; <br> <br>            //First get the current state, then toggle it. <br>            fTemp=pDoc-&gt;ShowOrQueryObjectTypes(TRUE, FALSE); <br>            pDoc-&gt;ShowOrQueryObjectTypes(FALSE, !fTemp); <br>            } <br>            break; <br> <br>        //CHAPTER22MOD <br>        case IDM_ENTERCONTEXTHELP: <br>        case IDM_ESCAPECONTEXTHELP: <br>            //Notify the object on entry and exit. <br>            ContextSensitiveHelp(IDM_ENTERCONTEXTHELP==wID); <br>            break; <br>        //End CHAPTER22MOD <br> <br>        default: <br>           return CFrame::OnCommand(hWnd, wParam, lParam); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateToolbar <br> * <br> * Purpose: <br> *  Procedure to create all the necessary toolbar buttons. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  UINT            Number of tools added to the bar. <br> */ <br> <br>UINT CPatronFrame::CreateToolbar(void) <br>    { <br>    UINT            iLast; <br>    UINT            uState=GIZMO_NORMAL; <br>    UINT            utCmd =GIZMOTYPE_BUTTONCOMMAND; <br> <br>    //Insert the standard ones. <br>    iLast=CFrame::CreateToolbar(); <br> <br>    //Remove Undo:  we don't use it. <br>    m_pTB-&gt;Remove(IDM_EDITUNDO); <br> <br>    /* <br>     * Insert Print File Import in the 5th position and account <br>     * for it in iLast. <br>     */ <br>    m_pTB-&gt;Add(utCmd, 4, IDM_FILEPRINT, m_dxB, m_dyB <br>        , NULL, NULL, 6, uState); <br> <br>    iLast++; <br> <br>    m_pTB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //Add New Page, and Delete Page <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGENEWPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 2, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEDELETEPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 3, uState); <br> <br>    m_pTB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //First, Prev, Next, Last pages. <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEFIRSTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 4, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGEPREVIOUSPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 5, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGENEXTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 6, uState); <br>    m_pTB-&gt;Add(utCmd, iLast++, IDM_PAGELASTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 7, uState); <br> <br>    return iLast; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateMenus <br> * <br> * Purpose: <br> *  Handles the WM_INITMENU message for the frame window.  Depending <br> *  on the existence of an active window, menu items are selectively <br> *  enabled and disabled. <br> * <br> * Parameters: <br> *  hMenu           HMENU of the menu to intialize <br> *  iMenu           UINT position of the menu. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateMenus(HMENU hMenu, UINT iMenu) <br>    { <br>    PCPatronDoc     pDoc; <br>    BOOL            fOK=FALSE; <br>    BOOL            fCallDefault=TRUE; <br>    UINT            uTemp; <br>    UINT            uTempE; <br>    UINT            uTempD; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    uTempE=MF_ENABLED | MF_BYCOMMAND; <br>    uTempD=MF_DISABLED | MF_GRAYED | MF_BYCOMMAND; <br>    uTemp=((NULL!=pDoc) ? uTempE : uTempD); <br> <br>    if (m_phMenu[0]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_FILEPRINT, uTemp); <br> <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryPrinterSetup(); <br> <br>        EnableMenuItem(hMenu, IDM_FILEPRINTERSETUP <br>            , (fOK) ? uTempE : uTempD); <br>        } <br> <br>    if (m_phMenu[1]==hMenu) <br>        { <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryPaste(); <br> <br>        EnableMenuItem(hMenu, IDM_EDITPASTE <br>            , (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITPASTESPECIAL <br>            , (fOK) ? uTempE : uTempD); <br> <br>        //Cut, Copy, Delete depends on there being a selection. <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryObjectSelected(hMenu); <br>        else <br>            fOK=FALSE; <br> <br>        EnableMenuItem(hMenu, IDM_EDITCUT, (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITCOPY <br>            , (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITDELETEOBJECT <br>            , (fOK) ? uTempE : uTempD); <br> <br>        EnableMenuItem(hMenu, IDM_EDITINSERTOBJECT, uTemp); <br> <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryEnableEditLinks(); <br>        else <br>            fOK=FALSE; <br> <br>        EnableMenuItem(hMenu, IDM_EDITLINKS <br>            , (fOK) ? uTempE : uTempD); <br> <br>        //We did the whole menu... <br>        fCallDefault=FALSE; <br>        } <br> <br>    //Page menu <br>    if (m_phMenu[2]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_PAGENEWPAGE,      uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEDELETEPAGE,   uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGENEXTPAGE,     uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEPREVIOUSPAGE, uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEFIRSTPAGE,    uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGELASTPAGE,     uTemp); <br> <br>        //Check the Show Objects command or not. <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;ShowOrQueryObjectTypes(TRUE, FALSE); <br>        else <br>            fOK=FALSE; <br> <br>        CheckMenuItem(hMenu, IDM_PAGESHOWOBJECTS, MF_BYCOMMAND <br>            | ((fOK) ? MF_CHECKED : MF_UNCHECKED)); <br>        EnableMenuItem(hMenu, IDM_PAGESHOWOBJECTS, uTemp); <br>        } <br> <br>    if (fCallDefault) <br>        CFrame::UpdateMenus(hMenu, iMenu); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateToolbar <br> * <br> * Purpose: <br> *  Enables and disables tools depending on whether we have <br> *  a document or not. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateToolbar(void) <br>    { <br>    PCDocument  pDoc; <br>    BOOL        fEnable; <br> <br>    //Let the default hack on its tools. <br>    CFrame::UpdateToolbar(); <br> <br>    pDoc=m_pCL-&gt;ActiveDocument(); <br>    fEnable=(NULL!=pDoc); <br> <br>    //No document, disable just about everything <br>    m_pTB-&gt;Enable(IDM_FILEPRINT,        fEnable); <br>    m_pTB-&gt;Enable(IDM_FILEPRINTERSETUP, fEnable); <br> <br>    m_pTB-&gt;Enable(IDM_PAGENEWPAGE,      fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEDELETEPAGE,   fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEFIRSTPAGE,    fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGEPREVIOUSPAGE, fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGENEXTPAGE,     fEnable); <br>    m_pTB-&gt;Enable(IDM_PAGELASTPAGE,     fEnable); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>//CHAPTER22MOD <br>/* <br> * CPatronFrame::MessageLoop <br> * <br> * Purpose: <br> *  Override of standard message loop function in CLASSLIB to use <br> *  in-place accelerators when necessary. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  WPARAM          Contents of msg.wParam from WM_QUIT. <br> */ <br> <br>WPARAM CPatronFrame::MessageLoop(void) <br>    { <br>    MSG     msg; <br> <br>    while (GetMessage(&amp;msg, NULL, 0,0 )) <br>        { <br>        HACCEL      hAccel=m_hAccel; <br> <br>        //Always give the object first crack at translation. <br>        if (NULL!=m_pIOleIPActiveObject) <br>            { <br>            HRESULT     hr; <br> <br>            hAccel=m_hAccelIP; <br>            hr=m_pIOleIPActiveObject-&gt;TranslateAccelerator(&amp;msg); <br> <br>            //If the object translated the accelerator, we're done <br>            if (NOERROR==hr) <br>                continue; <br>            } <br> <br>        if (!m_pCL-&gt;TranslateAccelerator(&amp;msg)) <br>            { <br>            //hAccel is either the normal ones or the in-place ones. <br> <br>            if (!::TranslateAccelerator(m_hWnd, hAccel, &amp;msg)) <br>                { <br>                TranslateMessage(&amp;msg); <br>                DispatchMessage(&amp;msg); <br>                } <br>            } <br>        } <br> <br>    return msg.wParam; <br>    } <br>//End CHAPTER22MOD <br> <br> <br> <br> <br>/* <br> * CPatronFrame::FMessageHook <br> * <br> * Purpose: <br> *  Override of CFrame::FMessageHook so we can specifically trap <br> *  WM_MENUSELECT messages for the Object verb menu to provide some <br> *  meaningful information on the status strip. <br> * <br> * Parameters: <br> *  &lt;WndProc Parameters&gt; <br> *  pLRes           LRESULT * in which to store the return value <br> *                  for the message. <br> * <br> * Return Value: <br> *  BOOL            TRUE to prevent further processing, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::FMessageHook(HWND hWnd, UINT iMsg, WPARAM wParam <br>    , LPARAM lParam, LRESULT *pLRes) <br>    { <br>    BOOL        fRet=FALSE; <br>    //CHAPTER22MOD <br>    int         dx, dy; <br>    //End CHAPTER22MOD <br>    MENUSELECTPARAMS(wItem, wMenuFlags, hMenu); <br> <br>    *pLRes=0; <br> <br>    //CHAPTER22MOD <br>    /* <br>     * We use a switch now because we previously only processed <br>     * WM_MENUSELECT which did not use a case statement. <br>     */ <br> <br>    switch (iMsg) <br>        { <br>        case WM_SIZE: <br>            if (NULL!=m_pIOleIPActiveObject) <br>                { <br>                RECT        rc; <br> <br>                GetClientRect(m_hWnd, &amp;rc); <br>                m_pIOleIPActiveObject-&gt;ResizeBorder(&amp;rc <br>                    , this, TRUE); <br>                } <br> <br>            /* <br>             * If we're not showing our tools, don't let CLASSLIB <br>             * resize the client, instead doing it ourselves. <br>             */ <br>            if (m_fOurToolsShowing) <br>                return FALSE; <br> <br>            m_fSizing=TRUE; <br>            dx=LOWORD(lParam); <br>            dy=HIWORD(lParam); <br> <br>            //Change the Toolbar and StatStrip widths to match <br>            m_pTB-&gt;OnSize(hWnd); <br>            m_pSL-&gt;OnSize(hWnd); <br> <br>            //Adjust the client properly, remembering the StatStrip. <br>            m_pCL-&gt;OnSize(m_cxLeft, m_cyTop, dx-m_cxLeft-m_cxRight <br>                , dy-m_cyTop-m_cyBottom-CYSTATSTRIP); <br> <br>            m_fSizing=FALSE; <br>            return TRUE; <br> <br>        case WM_ACTIVATEAPP: <br>            if (NULL!=m_pIOleIPActiveObject) <br>                { <br>                m_pIOleIPActiveObject-&gt;OnFrameWindowActivate <br>                    ((BOOL)wParam); <br>                } <br> <br>            return FALSE; <br> <br>        case WM_SETFOCUS: <br>            if (NULL!=m_pIOleIPActiveObject) <br>                { <br>                HWND    hWndObj; <br> <br>                m_pIOleIPActiveObject-&gt;GetWindow(&amp;hWndObj); <br>                SetFocus(hWndObj); <br>                } <br> <br>            return TRUE; <br> <br>        case WM_CLOSE: <br>            if (NULL!=m_pDocCreated) <br>                { <br>                if (m_pDocCreated-&gt;FDirtyGet()) <br>                    { <br>                    CHourglass  wait; <br>                    m_pDocCreated-&gt;Save(0, NULL); <br>                    } <br>                } <br> <br>            return FALSE; <br> <br>        case WM_MENUSELECT: <br>            break;      //Continue processing below. <br> <br>        default: <br>            return FALSE; <br>        } <br>    //End CHAPTER22MOD <br> <br>    //This happens when there's no menu selection. <br>    if (-1==wMenuFlags) <br>        return FALSE; <br> <br>    if (MF_POPUP &amp; wMenuFlags) <br>        { <br>        /* <br>         * If this is the cascade verb menu itself, display the same <br>         * message.  m_phMenu[1] contains the current edit menu <br>         * handle. <br>         */ <br>        if (0!=wItem) <br>            { <br>            fRet=((HMENU)wItem==GetSubMenu(m_phMenu[1] <br>                , MENUPOS_OBJECT)); <br>            } <br>        } <br>    else <br>        { <br>        /* <br>         * If the ID is in the verb range, use <br>         * IDS_ITEMMESSAGEEDITOBJECT message <br>         */ <br>        fRet=(IDM_VERBMIN &lt;= wItem &amp;&amp; IDM_VERBMAX &gt;= wItem); <br>        } <br> <br>    if (fRet) <br>        m_pSL-&gt;MessageDisplay(IDM_EDITOBJECT); <br> <br>    return fRet; <br>    } <br> <br> <br> <br> <br>//CHAPTER22MOD <br> <br>/* <br> * CPatronFrame::ShowUIAndTools <br> * <br> * Purpose: <br> *  Installs or removes the in-place user interface which includes <br> *  the menus and the tools.  The tools may be affected outside of <br> *  the menu. <br> * <br> * Parameters: <br> *  fShow           BOOL indicating to show (TRUE) or hide (FALSE) <br> *  fMenu           BOOl indicating if the menu is also affected. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::ShowUIAndTools(BOOL fShow, BOOL fMenu) <br>    { <br>    HWND    hWndTB; <br> <br>    //This is the only menu case...restore our original menu <br>    if (fMenu &amp;&amp; fShow) <br>        SetMenu(NULL, NULL, NULL); <br> <br>    /* <br>     * If we're trying to hide our tools but the object didn't <br>     * want any space, then just leave our tools up and active. <br>     */ <br> <br>    hWndTB=m_pTB-&gt;Window(); <br>    ShowWindow(hWndTB, fShow ? SW_SHOW : SW_HIDE); <br> <br>    if (fShow) <br>        { <br>        InvalidateRect(hWndTB, NULL, TRUE); <br>        UpdateWindow(hWndTB); <br>        } <br> <br>    m_fOurToolsShowing=fShow; <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::ReinstateUI <br> * <br> * Purpose: <br> *  Reinstalls the application's normal toolbar and menu and <br> *  readjusts the position of the client window and the documents <br> *  within it. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::ReinstateUI(void) <br>    { <br>    BORDERWIDTHS    bw; <br> <br>    ShowUIAndTools(TRUE, TRUE); <br> <br>    SetRect((LPRECT)&amp;bw, 0, m_cyBar, 0, 0); <br>    SetBorderSpace(&amp;bw); <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CPatronFrame::QueryInterface <br> * CPatronFrame::AddRef <br> * CPatronFrame::Release <br> */ <br> <br>STDMETHODIMP CPatronFrame::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    //We only know IUnknown and IOleInPlaceFrame <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IOleInPlaceUIWindow==riid <br>        || IID_IOleWindow==riid || IID_IOleInPlaceFrame==riid) <br>        *ppv=(LPOLEINPLACEFRAME)this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPatronFrame::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CPatronFrame::Release(void) <br>    { <br>    /* <br>     * We don't do anything with this since we're not controlled <br>     * by a reference count as far as in-place stuff is concerned. <br>     */ <br>    return --m_cRef; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if there is no <br> *                  window. <br> */ <br> <br>STDMETHODIMP CPatronFrame::GetWindow(HWND *phWnd) <br>    { <br>    *phWnd=m_hWnd; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::ContextSensitiveHelp(BOOL fEnterMode) <br>    { <br>    /* <br>     * Don't bother if there is no active object since we don't do <br>     * context help on our own. <br>     */ <br>    if (NULL==m_pIOleIPActiveObject) <br>        return NOERROR; <br> <br>    /* <br>     * If the state changes, an MDI frame should call the same <br>     * function in all documents.  An SDI frame should just call <br>     * the active object, if it has one. <br>     */ <br> <br>    if (m_fInContextHelp!=fEnterMode) <br>        { <br>        m_fInContextHelp=fEnterMode; <br> <br>       #ifdef MDI <br>        ((PCPatronClient)m_pCL)-&gt;CallContextHelpOnDocuments <br>           (fEnterMode); <br>       #else <br>        m_pIOleIPActiveObject-&gt;ContextSensitiveHelp(fEnterMode); <br>       #endif <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::GetBorder <br> * <br> * Purpose: <br> *  Returns the rectangle in which the container is willing to <br> *  negotiate about an object's adornments. <br> * <br> * Parameters: <br> *  prcBorder       LPRECT in which to store the rectangle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if all is well, INPLACE_E_NOTOOLSPACE <br> *                  if there is no negotiable space. <br> */ <br> <br>STDMETHODIMP CPatronFrame::GetBorder(LPRECT prcBorder) <br>    { <br>    if (NULL==prcBorder) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    /* <br>     * We return all the client area space sans the StatStrip, <br>     * which we control <br>     */ <br>    GetClientRect(m_hWnd, prcBorder); <br>    prcBorder-&gt;bottom-=CYSTATSTRIP; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::RequestBorderSpace <br> * <br> * Purpose: <br> *  Asks the container if it can surrender the amount of space <br> *  in pBW that the object would like for it's adornments.  The <br> *  container does nothing but validate the spaces on this call. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the requested space. <br> *                  The values are the amount of space requested <br> *                  from each side of the relevant window. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if we can give up space, <br> *                  INPLACE_E_NOTOOLSPACE otherwise. <br> */ <br> <br>STDMETHODIMP CPatronFrame::RequestBorderSpace(LPCBORDERWIDTHS pBW) <br>    { <br>    //Everything is fine with us, so always return an OK. <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::SetBorderSpace <br> * <br> * Purpose: <br> *  Called when the object now officially requests that the <br> *  container surrender border space it previously allowed <br> *  in RequestBorderSpace.  The container should resize windows <br> *  appropriately to surrender this space. <br> * <br> * Parameters: <br> *  pBW             LPCBORDERWIDTHS containing the amount of space <br> *                  from each side of the relevant window that the <br> *                  object is now reserving. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::SetBorderSpace(LPCBORDERWIDTHS pBW) <br>    { <br>    RECT            rc; <br>    POINT           pt1, pt2; <br>    PCPatronDoc     pDoc; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    /* <br>     * If pBW is NULL, the object is not interested in tools, so we <br>     * can just leave ours up if we want. <br>     */ <br> <br>    if (NULL==pBW) <br>        { </code></pre>
<p>
</p>
<pre><code>if (NULL!=pDoc) <br>            { <br>            pDoc-&gt;NoObjectFrameTools(TRUE, TRUE); <br> <br>            /* <br>             * In some cases IOleInPlaceSite::OnUIActivate might <br>             * have been called before SetBorderSpace, so we might <br>             * have already hidden our tools (OnUIActivate calls <br>             * pDoc-&gt;NoObjectFrameTools before we set it to TRUE <br>             * here).  So we have to insure they are visible now <br>             * by a call to ShowUIAndTools. <br>             */ <br>            if (!m_fOurToolsShowing) <br>                ShowUIAndTools(TRUE, FALSE); <br>            } <br> <br>        return NOERROR; <br>        } <br> <br>    if (NULL!=pDoc) <br>        pDoc-&gt;NoObjectFrameTools(FALSE, TRUE); <br> <br>    /* <br>     * This tells CFrame::FMessageHook (WM_SIZE) how much space <br>     * to reserve off the sides when resizing the client when <br>     * the frame is resized. <br>     */ <br> <br>    m_cyTop   =pBW-&gt;top; <br>    m_cyBottom=pBW-&gt;bottom; <br>    m_cxLeft  =pBW-&gt;left; <br>    m_cxRight =pBW-&gt;right; <br> <br> <br>    //Get the current offset of the client <br>    GetWindowRect(m_pCL-&gt;Window(), &amp;rc); <br>    SETPOINT(pt1, rc.left, rc.top); <br>    SETPOINT(pt2, rc.right, rc.bottom); <br>    ScreenToClient(m_hWnd, &amp;pt1); <br>    ScreenToClient(m_hWnd, &amp;pt2); <br> <br>    /* <br>     * Now move the client, keeping documents steady. pBW-&gt;left-pt.x <br>     * and pBW-&gt;top-pt.y are the deltas for the documents. <br>     */ <br> <br>    GetClientRect(m_hWnd, &amp;rc); <br>    rc.left+=pBW-&gt;left; <br>    rc.right-=pBW-&gt;right; <br>    rc.top+=pBW-&gt;top; <br>    rc.bottom-=pBW-&gt;bottom+CYSTATSTRIP; //Remember the status line <br> <br>    //Only bother the client if necessary. <br>    if (!(pt1.x==rc.left &amp;&amp; pt1.y==rc.top <br>        &amp;&amp; pt2.x==rc.right &amp;&amp; pt2.y==rc.bottom)) <br>        { <br>        ((PCPatronClient)m_pCL)-&gt;MoveWithoutFamily(&amp;rc <br>            , pBW-&gt;left-pt1.x, pBW-&gt;top-pt1.y); <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::SetActiveObject <br> * <br> * Purpose: <br> *  Provides the container with the object's IOleInPlaceActiveObject <br> *  pointer <br> * <br> * Parameters: <br> *  pIIPActiveObj   LPOLEINPLACEACTIVEOBJECT of interest. <br> *  pszObj          LPCOLESTR naming the object.  Not used. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::SetActiveObject <br>    (LPOLEINPLACEACTIVEOBJECT pIIPActiveObj, LPCOLESTR pszObj) <br>    { <br>    if (NULL!=m_pIOleIPActiveObject) <br>        m_pIOleIPActiveObject-&gt;Release(); <br> <br>    //NULLs m_pIOleIPActiveObject if pIIPActiveObj is NULL <br>    m_pIOleIPActiveObject=pIIPActiveObj; <br> <br>    if (NULL!=m_pIOleIPActiveObject) <br>        m_pIOleIPActiveObject-&gt;AddRef(); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::InsertMenus <br> * <br> * Purpose: <br> *  Instructs the container to place its in-place menu items where <br> *  necessary in the given menu and to fill in elements 0, 2, and 4 <br> *  of the OLEMENUGROUPWIDTHS array to indicate how many top-level <br> *  items are in each group. <br> * <br> * Parameters: <br> *  hMenu           HMENU in which to add popups. <br> *  pMGW            LPOLEMENUGROUPWIDTHS in which to store the <br> *                  width of each container menu group. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::InsertMenus(HMENU hMenu <br>    , LPOLEMENUGROUPWIDTHS pMGW) <br>    { <br>    /* <br>     * Here Patron needs to copy it's File, Page, and Window menu <br>     * items into the object-supplied menu, meaning that we have <br>     * three menu groups.  The actual handles of these popup menus <br>     * are already in CPatronFrame::m_phMenu where File is element <br>     * 0 and Page is element 2, and in m_hMenuWindow which is the <br>     * Window menu.  The latter we do only for MDI, of course. <br>     */ <br> <br>    InsertMenu(hMenu, 0, MF_BYPOSITION | MF_POPUP, (UINT)m_phMenu[0] <br>        , PSZ(IDS_FILEMENU)); <br>    InsertMenu(hMenu, 1, MF_BYPOSITION | MF_POPUP, (UINT)m_phMenu[2] <br>        , PSZ(IDS_PAGEMENU)); <br> <br>    pMGW-&gt;width[0]=1; <br>    pMGW-&gt;width[2]=1; <br> <br>   #ifdef MDI <br>    InsertMenu(hMenu, 2, MF_BYPOSITION | MF_POPUP <br>       , (UINT)m_hMenuWindow, PSZ(IDS_WINDOWMENU)); <br> <br>    pMGW-&gt;width[4]=1; <br>   #else <br>    pMGW-&gt;width[4]=0; <br>   #endif <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::SetMenu <br> * <br> * Purpose: <br> *  Instructs the container to replace whatever menu it's currently <br> *  using with the given menu and to call OleSetMenuDescritor so OLE <br> *  knows to whom to dispatch messages. <br> * <br> * Parameters: <br> *  hMenu           HMENU to show. <br> *  hOLEMenu        HOLEMENU to the menu descriptor. <br> *  hWndObj         HWND of the active object to which messages are <br> *                  dispatched. <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::SetMenu(HMENU hMenu <br>    , HOLEMENU hOLEMenu, HWND hWndObj) <br>    { <br>    HRESULT         hr; <br>    PCPatronClient  pCL=(PCPatronClient)m_pCL; <br> <br>    /* <br>     * Our responsibilities here are to put the menu on the frame <br>     * window and call OleSetMenuDescriptor. <br>     * CPatronClient::SetMenu which we call here takes care of <br>     * MDI/SDI differences. <br>     * <br>     * We also want to save the object's hWnd for use in WM_SETFOCUS <br>     * processing. <br>     */ <br> <br>    if (NULL==hMenu) <br>        { <br>        m_hWndObj=NULL; <br> <br>        //Prevent redundant calls, or debug warnings on startup. <br>        if (NULL==m_hMenuTop) <br>            return NOERROR; <br> <br>        hMenu=m_hMenuTop; <br>        m_hMenuTop=NULL; <br>        } <br>    else <br>        { <br>        m_hMenuTop=m_hMenuOrg; <br>        m_hWndObj=hWndObj; <br>        } <br> <br>    pCL-&gt;SetMenu(m_hWnd, hMenu, m_hMenuWindow); <br>    hr=OleSetMenuDescriptor(hOLEMenu, m_hWnd, hWndObj, NULL, NULL); <br>    return hr; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::RemoveMenus <br> * <br> * Purpose: <br> *  Asks the container to remove any menus it put into hMenu in <br> *  InsertMenus. <br> * <br> * Parameters: <br> *  hMenu           HMENU from which to remove the container's <br> *                  items. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::RemoveMenus(HMENU hMenu) <br>    { <br>    int         cItems, i, j; <br>    HMENU       hMenuT; <br> <br>    /* <br>     * To be defensive, loop through this menu removing anything <br>     * we recognize (that is, anything in m_phMenu) just in case <br>     * the server didn't clean it up right.  At least we can <br>     * give ourselves the prophylactic benefit. <br>     */ <br> <br>    if (NULL==hMenu) <br>        return NOERROR; <br> <br>    cItems=GetMenuItemCount(hMenu); <br> <br>    /* <br>     * Walk backwards down the menu.  For each popup, see if it <br>     * matches any other popup we know about, and if so, remove <br>     * it from the shared menu. <br>     */ <br>    for (i=cItems; i &gt;=0; i--) <br>        { <br>        hMenuT=GetSubMenu(hMenu, i); <br> <br>        for (j=0; j &lt;= CMENUS; j++) <br>            { <br>            if (hMenuT==m_phMenu[j]) <br>                RemoveMenu(hMenu, i, MF_BYPOSITION); <br>            } <br>        } <br> <br>    //The menu should now be empty. <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::SetStatusText <br> * <br> * Purpose: <br> *  Asks the container to place some text in a status line, if one <br> *  exists.  If the container does not have a status line it <br> *  should return E_FAIL here in which case the object could <br> *  display its own. <br> * <br> * Parameters: <br> *  pszText         LPCOLESTR to display. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, S_TRUNCATED if not all <br> *                  of the text could be displayed, or E_FAIL if <br> *                  the container has no status line. <br> */ <br> <br>STDMETHODIMP CPatronFrame::SetStatusText(LPCOLESTR pszText) <br>    { <br>    /* <br>     * Just send this to the StatStrip.  Unfortunately it won't tell <br>     * us about truncation.  Oh well, we'll just act like it worked. <br>     */ <br>   #ifdef WIN32ANSI <br>    TCHAR       szTemp[256]; <br> <br>    WideCharToMultiByte(CP_ACP, 0, pszText, -1, szTemp, 256 <br>        , NULL, NULL); <br>    m_pSL-&gt;MessageSet(szTemp); <br>   #else <br>    m_pSL-&gt;MessageSet((LPTSTR)pszText); <br>   #endif <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::EnableModeless <br> * <br> * Purpose: <br> *  Instructs the container to show or hide any modeless popup <br> *  windows that it may be using. <br> * <br> * Parameters: <br> *  fEnable         BOOL indicating to enable/show the windows <br> *                  (TRUE) or to hide them (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CPatronFrame::EnableModeless(BOOL fEnable) <br>    { <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::TranslateAccelerator <br> * <br> * Purpose: <br> *  When dealing with an in-place object from an EXE server, this <br> *  is called to give the container a chance to process accelerators <br> *  after the server has looked at the message. <br> * <br> * Parameters: <br> *  pMSG            LPMSG for the container to examine. <br> *  wID             WORD the identifier in the container's <br> *                  accelerator table (from IOleInPlaceSite <br> *                  ::GetWindowContext) for this message (OLE does <br> *                  some translation before calling). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if the keystroke was used, <br> *                  S_FALSE otherwise. <br> */ <br> <br>STDMETHODIMP CPatronFrame::TranslateAccelerator(LPMSG pMSG, WORD wID) <br>    { <br>    SCODE       sc; <br> <br>    /* <br>     * wID already has anything translated from m_hAccelIP for us, <br>     * so we can just check for the commands we want and process <br>     * them instead of calling TranslateAccelerator which would be <br>     * redundant and which also has a possibility of dispatching to <br>     * the wrong window. <br>     */ <br>    if ((IDM_PAGENEWPAGE &lt;= wID &amp;&amp; IDM_PAGELASTPAGE &gt;= wID) <br>        || IDM_OPENOBJECT==wID || IDM_ENTERCONTEXTHELP==wID <br>        || IDM_ESCAPECONTEXTHELP==wID) <br>        { <br>        //wID properly expands to 32-bits <br>        OnCommand(m_hWnd, (WPARAM)wID, 0L); <br>        sc=S_OK; <br>        } <br>   #ifdef MDI <br>    else if (TranslateMDISysAccel(m_pCL-&gt;Window(), pMSG)) <br>        sc=S_OK; <br>   #endif <br>    else <br>        sc=S_FALSE; <br> <br>    return ResultFromScode(sc); <br>    } <br> <br>//End CHAPTER22MOD <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAGES.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context698"></a>PAGES.H</h2>
<pre><code>/* <br> * PAGES.H <br> * Patron Chapter 13 <br> * <br> * Definitions and function prototypes for the Pages window control <br> * as well as the CPage class. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _PAGES_H_ <br>#define _PAGES_H_ <br> <br>//We need this for UICursorLoad and new-style cursors. <br>#include &lt;bttncur.h&gt; <br> <br>//CHAPTER13MOD <br>#include &lt;stdlib.h&gt;     //For atol <br>//End CHAPTER13MOD <br> <br>//Versioning. <br>#define VERSIONMAJOR                2 <br>#define VERSIONMINOR                0 <br>#define VERSIONCURRENT              0x00020000 <br> <br>//Classname <br>#define SZCLASSPAGES                TEXT("pages") <br> <br>#define HIMETRIC_PER_INCH           2540 <br>#define LOMETRIC_PER_INCH           254 <br>#define LOMETRIC_BORDER             60          //Border around page <br> <br> <br>//Window extra bytes and offsets <br>#define CBPAGESWNDEXTRA             (sizeof(LONG)) <br>#define PAGEWL_STRUCTURE            0 <br> <br> <br>#include "tenant.h" <br> <br>typedef struct tagTENANTLIST <br>    { <br>    DWORD       cTenants; <br>    DWORD       dwIDNext; <br>    } TENANTLIST, *PTENANTLIST; <br> <br>#define SZSTREAMTENANTLIST        OLESTR("Tenant List") <br> <br>//Delay timer used in mouse debouncing <br>#define IDTIMER_DEBOUNCE          120 <br> <br> <br> <br>/* <br> * Page class describing an individual page and what things it <br> * contains, managing an IStorage for us. <br> * <br> * A DWORD is used to identify this page as the name of the storage <br> * is the string form of this ID.  If we added a page every second, <br> * it would take 136 years to overrun this counter, so we can <br> * get away with saving it persistently.  I hope this software is <br> * obsolete by then. <br> */ <br> <br>//CHAPTER13MOD <br>class CPage : public IUnknown <br>//End CHAPTER13MOD <br>    { <br>    friend class CIOleUILinkContainer; <br>    //CHAPTER13MOD <br>    friend class CImpIOleItemContainer; <br>    //End CHAPTER13MOD <br> <br>    private: <br>        DWORD       m_dwID;             //Persistent identifier <br>        LPSTORAGE   m_pIStorage;        //Substorage for this page <br>        HWND        m_hWnd;             //Pages window <br>        DWORD       m_cOpens;           //Calls to FOpen <br> <br>        class CPages *m_pPG;            //Pages window <br> <br>        DWORD       m_dwIDNext; <br>        DWORD       m_cTenants; <br>        HWND        m_hWndTenantList;   //Listbox; our tenant list <br> <br>        UINT        m_iTenantCur; <br>        PCTenant    m_pTenantCur; <br> <br>        UINT        m_uHTCode;          //Last hit-test/mouse move <br>        UINT        m_uSizingFlags;     //Restrictions on sizing <br>        BOOL        m_fTracking;        //Tracking resize? <br>        RECTL       m_rclOrg;           //Original before tracking <br>        RECTL       m_rcl;              //Tracking rectangle <br>        RECTL       m_rclBounds;        //Boundaries f/size tracking <br>        HDC         m_hDC;              //Tracking hDC <br> <br>        BOOL        m_fDragPending;     //Waiting for drag? <br>        BOOL        m_fSizePending;     //Waiting for debounce? <br>        int         m_cxyDist;          //Debounce distance <br>        UINT        m_cDelay;           //Debounce delay <br>        POINTS      m_ptDown;           //Point of click to debounce <br>        UINT        m_uKeysDown;        //Keys when click happens <br>        DWORD       m_fTimer;           //Timer active? <br>        BOOL        m_fReopen;          //Did we just close? <br> <br>        //CHAPTER13MOD <br>        LPMONIKER           m_pmkFile;  //Document name <br>        ULONG               m_cRef; <br>        LPOLEITEMCONTAINER  m_pIOleItemContainer; <br>        //End CHAPTER13MOD <br> <br>    protected: <br>        BOOL         FTenantGet(UINT, PCTenant *, BOOL); <br>        //CHAPTER13MOD <br>        BOOL         FTenantGetFromID(DWORD, PCTenant *, BOOL); <br>        //End CHAPTER13MOD <br>        BOOL         FTenantAdd(UINT, DWORD, PCTenant *); <br>        LPDATAOBJECT TransferObjectCreate(LPPOINTL); <br> <br>        //PAGEMOUS.CPP <br>        BOOL         FSelectTenantAtPoint(UINT, UINT); <br>        UINT         TenantFromPoint(UINT, UINT, PCTenant *); <br>        BOOL         DragDrop(UINT, UINT, UINT); <br> <br>    public: <br>        CPage(DWORD, HWND, class CPages *); <br>        ~CPage(void); <br> <br>        //CHAPTER13MOD <br>        //IUnknown for delegation <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>        //End CHAPTER13MOD <br> <br>        DWORD       GetID(void); <br>        BOOL        FOpen(LPSTORAGE); <br>        void        Close(BOOL); <br>        BOOL        Update(void); <br>        void        Destroy(LPSTORAGE); <br>        UINT        GetStorageName(LPTSTR); <br> <br>        void        Draw(HDC, int, int, BOOL, BOOL); <br> <br>        BOOL        TenantCreate(TENANTTYPE, LPVOID, LPFORMATETC <br>                        , PPATRONOBJECT, DWORD); <br>        BOOL        TenantDestroy(void); <br>        BOOL        TenantClip(BOOL); <br>        BOOL        FQueryObjectSelected(HMENU); <br>        void        ActivateObject(LONG); <br>        void        ShowObjectTypes(BOOL); <br>        void        NotifyTenantsOfRename(LPTSTR, LPMONIKER); <br>        BOOL        FQueryLinksInPage(void); <br> <br>        //PAGEMOUSE.CPP <br>        BOOL        OnRightDown(UINT, UINT, UINT); <br>        BOOL        OnLeftDown(UINT, UINT, UINT); <br>        BOOL        OnLeftDoubleClick(UINT, UINT, UINT); <br>        BOOL        OnLeftUp(UINT, UINT, UINT); <br>        void        OnMouseMove(UINT, int, int); <br>        void        OnTimer(UINT); <br>        void        StartSizeTracking(void); <br>        void        OnNCHitTest(UINT, UINT); <br>        BOOL        OnSetCursor(UINT); <br>    }; <br> <br>typedef CPage *PCPage; <br> <br> <br> <br>/* <br> * Structures to save with the document describing the device <br> * configuration and pages that we have.  This is followed by <br> * a list of DWORD IDs for the individual pages. <br> */ <br> <br>typedef struct tagDEVICECONFIG <br>    { <br>    DWORD       cb;                         //Size of structure <br>    TCHAR       szDriver[CCHDEVICENAME]; <br>    TCHAR       szDevice[CCHDEVICENAME]; <br>    TCHAR       szPort[CCHDEVICENAME]; <br>    DWORD       cbDevMode;                  //Size of actual DEVMODE <br>    DEVMODE     dm;                         //Variable <br>    } DEVICECONFIG, *PDEVICECONFIG; <br> <br>//Offset to cbDevMode <br>#define CBSEEKOFFSETCBDEVMODE  (sizeof(DWORD)   \ <br>                               +(3*CCHDEVICENAME*sizeof(TCHAR))) <br> <br>typedef struct tagPAGELIST <br>    { <br>    DWORD       cPages; <br>    DWORD       iPageCur; <br>    DWORD       dwIDNext; <br>    } PAGELIST, *PPAGELIST; <br> <br> <br>//Combined OLE and Patron device structures. <br>typedef struct tagCOMBINEDEVICE <br>    { <br>    DVTARGETDEVICE  td; <br>    DEVICECONFIG    dc; <br>    } COMBINEBDEVICE, *PCOMBINEDEVICE; <br> <br> <br>//PAGEWIN.CPP <br>LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL    APIENTRY AbortProc(HDC, int); <br>BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br>void             RectConvertMappings(LPRECT, HDC, BOOL); <br> <br> <br>class CPages : public CWindow <br>    { <br>    friend LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>    friend BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    friend class CPage; <br>    friend class CTenant; <br>    friend class CDropTarget; <br>    friend class CImpIAdviseSink; <br> <br>    //CHAPTER13MOD <br>    friend class CImpIOleItemContainer; <br>    //End CHAPTER13MOD <br> <br>    protected: <br>        PCPage      m_pPageCur;             //Current page <br>        UINT        m_iPageCur;             //Current page <br>        UINT        m_cPages;               //Number of pages <br> <br>        HWND        m_hWndPageList;         //Listbox with page list <br>        HFONT       m_hFont;                //Page font <br>        BOOL        m_fSystemFont;          //m_hFont system object? <br> <br>        UINT        m_cx;                   //Page size in LOMETRIC <br>        UINT        m_cy; <br> <br>        UINT        m_xMarginLeft;          //Unusable margins, <br>        UINT        m_xMarginRight;         //in LOMETRIC <br>        UINT        m_yMarginTop; <br>        UINT        m_yMarginBottom; <br> <br>        UINT        m_xPos;                 //Viewport scroll pos, <br>        UINT        m_yPos;                 //both in *PIXELS* <br> <br>        DWORD       m_dwIDNext;             //Next ID for a page. <br>        LPSTORAGE   m_pIStorage;            //Root storage <br> <br>        UINT        m_cf;                   //Clipboard format <br>        BOOL        m_fDirty; <br> <br>        BOOL        m_fDragSource;          //Source==target? <br>        BOOL        m_fMoveInPage;          //Moving in same page <br>        BOOL        m_fLinkAllowed;         //Linking in drag-drop? <br>        POINTL      m_ptDrop;               //Where to move object <br> <br>        BOOL        m_fDragRectShown;       //Is rect on the screen? <br>        UINT        m_uScrollInset;         //Hit-test for drag-drop <br>        UINT        m_uScrollDelay;         //Delay before repeat <br>        DWORD       m_dwTimeLast;           //Ticks on last DragOver <br>        UINT        m_uHScrollCode;         //L/R on scroll repeat? <br>        UINT        m_uVScrollCode;         //U/D on scroll repeat? <br>        UINT        m_uLastTest;            //Last test result <br>        POINTL      m_ptlRect;              //Last feedback rectangle <br>        SIZEL       m_szlRect; <br> <br>        BOOL        m_fShowTypes;           //Show Object active? <br> <br>        //CHAPTER13MOD <br>        LPMONIKER   m_pmkFile; <br>        //End CHAPTER13MOD <br> <br>    private: <br>        void      Draw(HDC, BOOL, BOOL); <br>        void      UpdateScrollRanges(void); <br>        BOOL      ConfigureForDevice(void); <br>        BOOL      FPageGet(UINT, PCPage *, BOOL); <br>        BOOL      FPageAdd(UINT, DWORD, BOOL); <br> <br>        void      CalcBoundingRect(LPRECT, BOOL); <br> <br>        //DRAGDROP.CPP <br>        UINT      UTestDroppablePoint(LPPOINTL); <br>        void      DrawDropTargetRect(LPPOINTL, LPSIZEL); <br>        void      AdjustPosition(LPPOINTL, LPSIZEL); <br> <br>    public: <br>        CPages(HINSTANCE, UINT); <br>        ~CPages(void); <br> <br>        BOOL      FInit(HWND, LPRECT, DWORD, UINT, LPVOID); <br> <br>        BOOL      FIStorageSet(LPSTORAGE, BOOL, BOOL); <br>        BOOL      FIStorageUpdate(BOOL); <br> <br>        BOOL      Print(HDC, LPTSTR, DWORD, UINT, UINT, UINT); <br> <br>        void      RectGet(LPRECT); <br>        void      RectSet(LPRECT, BOOL); <br>        void      SizeGet(LPRECT); <br>        void      SizeSet(LPRECT, BOOL); <br> <br>        UINT      PageInsert(UINT); <br>        UINT      PageDelete(UINT); <br>        UINT      CurPageGet(void); <br>        UINT      CurPageSet(UINT); <br>        UINT      NumPagesGet(void); <br> <br>        BOOL      DevModeSet(HGLOBAL, HGLOBAL); <br>        HGLOBAL   DevModeGet(void); <br> <br>        BOOL      FIsDirty(void); <br>        BOOL      DevReadConfig(PCOMBINEDEVICE *, HDC *); <br>        BOOL      TenantCreate(TENANTTYPE, LPVOID, LPFORMATETC <br>                      , PPATRONOBJECT, DWORD); <br>        BOOL      TenantDestroy(void); <br>        BOOL      TenantClip(BOOL); <br>        BOOL      FQueryObjectSelected(HMENU); <br>        void      ActivateObject(LONG); <br> <br>        void      ShowObjectTypes(BOOL); <br>        void      NotifyTenantsOfRename(LPTSTR, LPMONIKER); <br>        BOOL      FQueryLinksInPage(void); <br>        BOOL      FGetUILinkContainer(class CIOleUILinkContainer **); <br>        //CHAPTER13MOD <br>        UINT      IPageGetFromID(DWORD, PCPage *, BOOL); <br>        //End CHAPTER13MOD <br>    }; <br> <br>typedef CPages *PCPages; <br> <br> <br>//Fixed names of streams in the Pages IStorage <br>#define SZSTREAMPAGELIST        OLESTR("Page List") <br>#define SZSTREAMDEVICECONFIG    OLESTR("Device Configuration") <br> <br>//Return values for UTestDroppablePoint <br>#define UDROP_NONE              0x0000      //Exclusive <br>#define UDROP_CLIENT            0x0001      //Inclusive <br>#define UDROP_INSETLEFT         0x0002      //L/R are exclusive <br>#define UDROP_INSETRIGHT        0x0004 <br>#define UDROP_INSETHORZ         (UDROP_INSETLEFT | UDROP_INSETRIGHT) <br> <br>#define UDROP_INSETTOP          0x0008      //T/B are exclusive <br>#define UDROP_INSETBOTTOM       0x0010 <br>#define UDROP_INSETVERT         (UDROP_INSETTOP | UDROP_INSETBOTTOM) <br> <br> <br>//Object used for the Links dialog <br> <br>class CIOleUILinkContainer : public IOleUILinkContainer <br>    { <br>    private: <br>        ULONG                   m_cRef; <br>        PCPage                  m_pPage; <br>        UINT                    m_iTenant; <br>        LPOLEUILINKCONTAINER    m_pDelIUILinks; <br> <br>    public: <br>        BOOL                    m_fDirty;   //No reason to hide it <br> <br>    protected: <br>        STDMETHODIMP GetObjectInterface(DWORD, REFIID, PPVOID); <br> <br>    public: <br>        CIOleUILinkContainer(PCPage); <br>        ~CIOleUILinkContainer(void); <br> <br>        BOOL FInit(void); <br>        BOOL IsDirty(void); <br> <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP_(DWORD) GetNextLink(DWORD); <br>        STDMETHODIMP         SetLinkUpdateOptions(DWORD, DWORD); <br>        STDMETHODIMP         GetLinkUpdateOptions(DWORD, LPDWORD); <br>        STDMETHODIMP         SetLinkSource(DWORD, LPTSTR, ULONG <br>                                 , ULONG *, BOOL); <br>        STDMETHODIMP         GetLinkSource(DWORD, LPTSTR *, ULONG * <br>                                 , LPTSTR *, LPTSTR *, BOOL * <br>                                 , BOOL *); <br>        STDMETHODIMP         OpenLinkSource(DWORD); <br>        STDMETHODIMP         UpdateLink(DWORD, BOOL, BOOL); <br>        STDMETHODIMP         CancelLink(DWORD); <br>    }; <br> <br>typedef CIOleUILinkContainer *PCIOleUILinkContainer; <br> <br> <br>#endif  //_PAGES_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATRON.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context700"></a>PATRON.CPP</h2>
<pre><code>/* <br> * PATRON.CPP <br> * Patron Chapter 13 <br> * <br> * WinMain which is all we need for the basic application. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#define INITGUIDS <br>#include "patron.h" <br> <br>extern "C" <br>{ <br>OLEDBGDATA_MAIN("PATRON") <br>} <br> <br>//CHAPTER13MOD <br>//Count number of objects and number of locks. <br>ULONG       g_cObj=0; <br>ULONG       g_cLock=0; <br> <br>//Make window handle global so other code can cause a shutdown <br>HWND        g_hWnd=NULL; <br> <br>//Indicate if the user has control <br>BOOL        g_fUser=TRUE; <br>//End CHAPTER13MOD <br> <br> <br>/* <br> * WinMain <br> * <br> * Purpose: <br> *  Main entry point of application.  Should register the app class <br> *  if a previous instance has not done so and do any other one-time <br> *  initializations. <br> */ <br> <br>int PASCAL WinMain (HINSTANCE hInst, HINSTANCE hPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    { <br>    PCPatronFrame   pFR; <br>    FRAMEINIT       fi; <br>    WPARAM          wRet=0; <br> <br>   #ifndef WIN32 <br>    int             cMsg=96; <br> <br>    while (!SetMessageQueue(cMsg) &amp;&amp; (cMsg-=8)); <br>   #endif <br> <br>    //Attempt to allocate and initialize the application <br>    pFR=new CPatronFrame(hInst, hPrev, pszCmdLine, nCmdShow); <br> <br>    if (NULL==pFR) <br>        return -1; <br> <br>    fi.idsMin=IDS_FRAMEMIN; <br>    fi.idsMax=IDS_FRAMEMAX; <br>    fi.idsStatMin=IDS_STATMESSAGEMIN; <br>    fi.idsStatMax=IDS_STATMESSAGEMAX; <br>    fi.idStatMenuMin=ID_MENUFILE; <br>    fi.idStatMenuMax=ID_MENUHELP; <br>    fi.iPosWindowMenu=WINDOW_MENU; <br>    fi.cMenus=CMENUS; <br> <br>    fi.x=CW_USEDEFAULT; <br>    fi.y=CW_USEDEFAULT; <br>    fi.cx=CW_USEDEFAULT; <br>    fi.cy=CW_USEDEFAULT; <br> <br>    //If we can initialize pFR, start chugging messages <br>    if (pFR-&gt;FInit(&amp;fi)) <br>        wRet=pFR-&gt;MessageLoop(); <br> <br>    delete pFR; <br>    return wRet; <br>    } <br> <br> <br> <br>//CHAPTER13MOD <br>/* <br> * ObjectDestroyed <br> * <br> * Purpose: <br> *  Function for the Patron Document object to call when it gets <br> *  destroyed.  We destroy the main window if the proper conditions <br> *  are met for shutdown. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void PASCAL ObjectDestroyed(void) <br>    { <br>    g_cObj--; <br> <br>    //No more objects, no locks, no user control, shut the app down. <br>    if (0==g_cObj &amp;&amp; 0==g_cLock &amp;&amp; IsWindow(g_hWnd) &amp;&amp; !g_fUser) <br>        PostMessage(g_hWnd, WM_CLOSE, 0, 0L); <br> <br>    return; <br>    } <br> <br>//End CHAPTER13MOD <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CPatronFrame <br> * CPatronFrame::~CPatronFrame <br> * <br> * Constructor Parameters: <br> *  hInst           HINSTANCE from WinMain <br> *  hInstPrev       HINSTANCE from WinMain <br> *  pszCmdLine      LPSTR from WinMain <br> *  nCmdShow        int from WInMain <br> */ <br> <br>CPatronFrame::CPatronFrame(HINSTANCE hInst, HINSTANCE hInstPrev <br>    , LPSTR pszCmdLine, int nCmdShow) <br>    : CFrame(hInst, hInstPrev, pszCmdLine, nCmdShow) <br>    { <br>    //CHAPTER13MOD <br>    char        szTemp[256];        //ParseCmdLine is ANSI <br> <br>    m_fInitialized=FALSE; <br>    m_fOleStdInit=FALSE; <br>    m_pIClassDataTran=NULL; <br> <br>    m_pDocCreated=NULL; <br>    m_fEmbedding=FALSE; //-Embedding on command line? <br> <br>    ParseCmdLine(pszCmdLine, &amp;m_fEmbedding, szTemp); <br>    g_fUser=!m_fEmbedding; <br> <br>    m_dwRegCO=0; <br>    m_pIClassFactory=NULL; <br>    //End CHAPTER13MOD <br> <br>    return; <br>    } <br> <br> <br>CPatronFrame::~CPatronFrame(void) <br>    { <br>    //CHAPTER13MOD <br>    //Opposite of CoRegisterClassObject, takes class factory ref to 1 <br>    if (0L!=m_dwRegCO) <br>        CoRevokeClassObject(m_dwRegCO); <br> <br>    //This should be the last Release, which frees the class factory. <br>    if (NULL!=m_pIClassFactory) <br>        m_pIClassFactory-&gt;Release(); <br>    //End CHAPTER13MOD <br> <br>    if (NULL!=m_pIClassDataTran) <br>        { <br>        m_pIClassDataTran-&gt;LockServer(FALSE); <br>        m_pIClassDataTran-&gt;Release(); <br>        } <br> <br>    OleFlushClipboard(); <br> <br>    if (m_fOleStdInit) <br>        OleStdUninitialize(); <br> <br>    if (m_fInitialized) <br>        OleUninitialize(); <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPatronFrame::FInit <br> * <br> * Purpose: <br> *  Call OleInitialize then calling down into the base class <br> *  initialization. <br> * <br> * Parameters: <br> *  pFI             PFRAMEINIT containing initialization <br> *                  parameters. <br> * <br> * Return Value: <br> *  BOOL            TRUE if initialization succeeded, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::FInit(PFRAMEINIT pFI) <br>    { <br>    DWORD       dwVer; <br>    HRESULT     hr; <br> <br>    dwVer=OleBuildVersion(); <br> <br>    if (rmm!=HIWORD(dwVer)) <br>        return FALSE; <br> <br>    if (FAILED(OleInitialize(NULL))) <br>        return FALSE; <br> <br>    m_fInitialized=TRUE; <br> <br>    if (!OleStdInitialize(m_hInst)) <br>        return FALSE; <br> <br>    m_fOleStdInit=TRUE; <br> <br>    //Lock the data transfer object factory as an optimization. <br>    hr=CoGetClassObject(CLSID_DataTransferObject <br>        , CLSCTX_INPROC_SERVER, NULL, IID_IClassFactory <br>        , (PPVOID)&amp;m_pIClassDataTran); <br> <br>    if (SUCCEEDED(hr)) <br>        m_pIClassDataTran-&gt;LockServer(TRUE); <br> <br>    //CHAPTER13MOD <br>    if (m_fEmbedding) <br>        { <br>        HRESULT     hr; <br> <br>        m_pIClassFactory=new CLinkClassFactory(this); <br> <br>        if (NULL==m_pIClassFactory) <br>            return FALSE; <br> <br>        //Since we hold on to this, we should AddRef it. <br>        m_pIClassFactory-&gt;AddRef(); <br> <br>        hr=CoRegisterClassObject(CLSID_PatronPages, m_pIClassFactory <br>            , CLSCTX_LOCAL_SERVER, REGCLS_SINGLEUSE, &amp;m_dwRegCO); <br> <br>        if (FAILED(hr)) <br>            return FALSE; <br>        } <br>    //End CHAPTER13MOD <br> <br>    return CFrame::FInit(pFI); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateCClient <br> * <br> * Purpose: <br> *  Constructs a new client specific to the application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  PCClient        Pointer to the new client object. <br> */ <br> <br>PCClient CPatronFrame::CreateCClient(void) <br>    { <br>    return (PCClient)(new CPatronClient(m_hInst)); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::FRegisterAllClasses <br> * <br> * Purpose: <br> *  Registers all classes used in this application. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if registration succeeded, FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::FRegisterAllClasses(void) <br>    { <br>    WNDCLASS        wc; <br> <br>    //First let the standard frame do its thing <br>    if (!CFrame::FRegisterAllClasses()) <br>        return FALSE; <br> <br>    //We need double-clicks now and for object activation later. <br>    wc.style         = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; <br>    wc.hInstance     = m_hInst; <br>    wc.cbClsExtra    = 0; <br>    wc.lpfnWndProc   = PagesWndProc; <br>    wc.cbWndExtra    = CBPAGESWNDEXTRA; <br>    wc.hIcon         = NULL; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH)(COLOR_APPWORKSPACE+1); <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = SZCLASSPAGES; <br> <br>    if (!RegisterClass(&amp;wc)) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>//CHAPTER13MOD <br>/* <br> * CPatronFrame::FPreShowInit <br> * <br> * Purpose: <br> *  Called from FInit before intially showing the window.  We do <br> *  whatever else we want here, modifying m_nCmdShow as necessary <br> *  which affects ShowWindow in FInit. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if this successful, FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::FPreShowInit(void) <br>    { <br>    //Base class does nothing <br>    CFrame::FPreShowInit(); <br> <br>    //Save the window handle for shutdown if necessary. <br>    g_hWnd=m_hWnd; <br> <br>    //If we're -Embedding, don't show the window initially. <br>    if (m_fEmbedding) <br>        m_nCmdShow=SW_HIDE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CPatronFrame::ParseCommandLine <br> * <br> * Purpose: <br> *  Allows the application to parse the command line and take action <br> *  after the window has possibly been shown.  For a compound <br> *  document server we need to just make sure that if -Embedding is <br> *  there that we take no file action.  FPreShowInit has already <br> *  handled the window visibility. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if this successful, FALSE otherwise. <br> */ <br> <br>void CPatronFrame::ParseCommandLine(void) <br>    { <br>    //If -Embedding was there, prevent any attempt to load a file. <br>    if (m_fEmbedding) <br>        return; <br> <br>    CFrame::ParseCommandLine(); <br>    return; <br>    } <br>//End CHAPTER13MOD <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::OnCommand <br> * <br> * Purpose: <br> *  WM_COMMAND handler for the Patron frame window that processes extra <br> *  File menu items as well as the Page menu. <br> * <br> * Parameters: <br> *  hWnd            HWND of the frame window. <br> *  wParam          WPARAM of the message. <br> *  lParam          LPARAM of the message. <br> * <br> * Return Value: <br> *  LRESULT         Return value for the message. <br> */ <br> <br>LRESULT CPatronFrame::OnCommand(HWND hWnd, WPARAM wParam <br>    , LPARAM lParam) <br>    { <br>    PCPatronDoc     pDoc; <br> <br>    COMMANDPARAMS(wID, wCode, hWndMsg); <br> <br>    /* <br>     * Don't bother with anything during first initialization, <br>     * skipping many GizmoBar notifications. <br>     */ <br>    if (m_fInit) <br>        return 0L; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    if (NULL!=pDoc &amp;&amp; (IDM_VERBMIN &lt;= wID) &amp;&amp; (IDM_VERBMAX &gt;= wID)) <br>        { <br>        pDoc-&gt;ActivateObject(wID-IDM_VERBMIN); <br>        return 0L; <br>        } <br> <br>    switch (wID) <br>        { <br>        case IDM_FILEPRINT: <br>            pDoc-&gt;Print(m_hWnd); <br>            return 0L; <br> <br>        case IDM_FILEPRINTERSETUP: <br>            pDoc-&gt;PrinterSetup(m_hWnd, FALSE); <br>            return 0L; <br> <br>        case IDM_EDITPASTESPECIAL: <br>            pDoc-&gt;FPasteSpecial(m_hWnd); <br>            return 0L; <br> <br>        case IDM_EDITDELETEOBJECT: <br>            pDoc-&gt;Delete(); <br>            return 0L; <br> <br>        case IDM_EDITINSERTOBJECT: <br>            pDoc-&gt;FInsertObject(m_hWnd); <br>            return 0L; <br> <br>        case IDM_EDITLINKS: <br>            pDoc-&gt;FEditLinks(m_hWnd); <br>            return 0L; <br> <br>        case IDM_PAGENEWPAGE: <br>            pDoc-&gt;NewPage(); <br>            break; <br> <br>        case IDM_PAGEDELETEPAGE: <br>            pDoc-&gt;DeletePage(); <br>            break; <br> <br>        case IDM_PAGENEXTPAGE: <br>            pDoc-&gt;NextPage(); <br>            break; <br> <br>        case IDM_PAGEPREVIOUSPAGE: <br>            pDoc-&gt;PreviousPage(); <br>            break; <br> <br>        case IDM_PAGEFIRSTPAGE: <br>            pDoc-&gt;FirstPage(); <br>            break; <br> <br>        case IDM_PAGELASTPAGE: <br>            pDoc-&gt;LastPage(); <br>            break; <br> <br>        case IDM_PAGESHOWOBJECTS: <br>            { <br>            BOOL    fTemp; <br> <br>            //First get the current state, then toggle it. <br>            fTemp=pDoc-&gt;FShowOrQueryObjectTypes(TRUE, FALSE); <br>            pDoc-&gt;FShowOrQueryObjectTypes(FALSE, !fTemp); <br>            } <br>            break; <br> <br>        default: <br>           return CFrame::OnCommand(hWnd, wParam, lParam); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::CreateGizmos <br> * <br> * Purpose: <br> *  Procedure to create all the necessary gizmobar buttons. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  UINT            Number of gizmos added to the bar. <br> */ <br> <br>UINT CPatronFrame::CreateGizmos(void) <br>    { <br>    UINT            iLast; <br>    UINT            uState=GIZMO_NORMAL; <br>    UINT            utCmd =GIZMOTYPE_BUTTONCOMMAND; <br> <br>    //Insert the standard ones. <br>    iLast=CFrame::CreateGizmos(); <br> <br>    //Remove Undo:  we don't use it. <br>    m_pGB-&gt;Remove(IDM_EDITUNDO); <br> <br>    /* <br>     * Insert Print File Import in the 5th position and account <br>     * for it in iLast. <br>     */ <br>    m_pGB-&gt;Add(utCmd, 4, IDM_FILEPRINT, m_dxB, m_dyB <br>        , NULL, NULL, 6, uState); <br> <br>    iLast++; <br> <br>    m_pGB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //Add New Page, and Delete Page <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGENEWPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 2, uState); <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGEDELETEPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 3, uState); <br> <br>    m_pGB-&gt;Add(GIZMOTYPE_SEPARATOR, iLast++, 0, 6, m_dyB <br>        , NULL, NULL, 0, uState); <br> <br>    //First, Prev, Next, Last pages. <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGEFIRSTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 4, uState); <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGEPREVIOUSPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 5, uState); <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGENEXTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 6, uState); <br>    m_pGB-&gt;Add(utCmd, iLast++, IDM_PAGELASTPAGE, m_dxB, m_dyB <br>        , NULL, m_hBmp, 7, uState); <br> <br>    return iLast; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateMenus <br> * <br> * Purpose: <br> *  Handles the WM_INITMENU message for the frame window.  Depending <br> *  on the existence of an active window, menu items are selectively <br> *  enabled and disabled. <br> * <br> * Parameters: <br> *  hMenu           HMENU of the menu to intialize <br> *  iMenu           UINT position of the menu. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateMenus(HMENU hMenu, UINT iMenu) <br>    { <br>    PCPatronDoc     pDoc; <br>    BOOL            fOK=FALSE; <br>    BOOL            fCallDefault=TRUE; <br>    UINT            uTemp; <br>    UINT            uTempE; <br>    UINT            uTempD; <br> <br>    pDoc=(PCPatronDoc)m_pCL-&gt;ActiveDocument(); <br> <br>    uTempE=MF_ENABLED | MF_BYCOMMAND; <br>    uTempD=MF_DISABLED | MF_GRAYED | MF_BYCOMMAND; <br>    uTemp=((NULL!=pDoc) ? uTempE : uTempD); <br> <br>    if (m_phMenu[0]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_FILEPRINT, uTemp); <br> <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryPrinterSetup(); <br> <br>        EnableMenuItem(hMenu, IDM_FILEPRINTERSETUP <br>            , (fOK) ? uTempE : uTempD); <br>        } <br> <br>    if (m_phMenu[1]==hMenu) <br>        { <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryPaste(); <br> <br>        EnableMenuItem(hMenu, IDM_EDITPASTE <br>            , (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITPASTESPECIAL <br>            , (fOK) ? uTempE : uTempD); <br> <br>        //Cut, Copy, Delete depends on there being a selection. <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryObjectSelected(hMenu); <br>        else <br>            fOK=FALSE; <br> <br>        EnableMenuItem(hMenu, IDM_EDITCUT, (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITCOPY <br>            , (fOK) ? uTempE : uTempD); <br>        EnableMenuItem(hMenu, IDM_EDITDELETEOBJECT <br>            , (fOK) ? uTempE : uTempD); <br> <br>        EnableMenuItem(hMenu, IDM_EDITINSERTOBJECT, uTemp); <br> <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FQueryEnableEditLinks(); <br>        else <br>            fOK=FALSE; <br> <br>        EnableMenuItem(hMenu, IDM_EDITLINKS <br>            , (fOK) ? uTempE : uTempD); <br> <br>        //We did the whole menu... <br>        fCallDefault=FALSE; <br>        } <br> <br>    //Page menu <br>    if (m_phMenu[2]==hMenu) <br>        { <br>        EnableMenuItem(hMenu, IDM_PAGENEWPAGE,      uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEDELETEPAGE,   uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGENEXTPAGE,     uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEPREVIOUSPAGE, uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGEFIRSTPAGE,    uTemp); <br>        EnableMenuItem(hMenu, IDM_PAGELASTPAGE,     uTemp); <br> <br>        //Check the Show Objects command or not. <br>        if (NULL!=pDoc) <br>            fOK=pDoc-&gt;FShowOrQueryObjectTypes(TRUE, FALSE); <br>        else <br>            fOK=FALSE; <br> <br>        CheckMenuItem(hMenu, IDM_PAGESHOWOBJECTS, MF_BYCOMMAND <br>            | ((fOK) ? MF_CHECKED : MF_UNCHECKED)); <br>        EnableMenuItem(hMenu, IDM_PAGESHOWOBJECTS, uTemp); <br>        } <br> <br>    if (fCallDefault) <br>        CFrame::UpdateMenus(hMenu, iMenu); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPatronFrame::UpdateGizmos <br> * <br> * Purpose: <br> *  Enables and disables gizmos depending on whether we have <br> *  a document or not. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CPatronFrame::UpdateGizmos(void) <br>    { <br>    PCDocument  pDoc; <br>    BOOL        fEnable; <br> <br>    //Let the default hack on its gizmos. <br>    CFrame::UpdateGizmos(); <br> <br>    pDoc=m_pCL-&gt;ActiveDocument(); <br>    fEnable=(NULL!=pDoc); <br> <br>    //No document, disable just about everything <br>    m_pGB-&gt;Enable(IDM_FILEPRINT,        fEnable); <br>    m_pGB-&gt;Enable(IDM_FILEPRINTERSETUP, fEnable); <br> <br>    m_pGB-&gt;Enable(IDM_PAGENEWPAGE,      fEnable); <br>    m_pGB-&gt;Enable(IDM_PAGEDELETEPAGE,   fEnable); <br>    m_pGB-&gt;Enable(IDM_PAGEFIRSTPAGE,    fEnable); <br>    m_pGB-&gt;Enable(IDM_PAGEPREVIOUSPAGE, fEnable); <br>    m_pGB-&gt;Enable(IDM_PAGENEXTPAGE,     fEnable); <br>    m_pGB-&gt;Enable(IDM_PAGELASTPAGE,     fEnable); <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CPatronFrame::FMessageHook <br> * <br> * Purpose: <br> *  Override of CFrame::FMessageHook so we can specifically trap <br> *  WM_MENUSELECT messages for the Object verb menu to provide some <br> *  meaningful information on the status strip. <br> * <br> * Parameters: <br> *  &lt;WndProc Parameters&gt; <br> *  pLRes           LRESULT * in which to store the return value <br> *                  for the message. <br> * <br> * Return Value: <br> *  BOOL            TRUE to prevent further processing, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CPatronFrame::FMessageHook(HWND hWnd, UINT iMsg, WPARAM wParam <br>    , LPARAM lParam, LRESULT *pLRes) <br>    { <br>    BOOL        fRet=FALSE; <br> <br>    *pLRes=0; <br> <br>    MENUSELECTPARAMS(wItem, wMenuFlags, hMenu); <br> <br>    //CHAPTER13MOD <br>    /* <br>     * When closing, make sure any document create from the <br>     * class factory is saved since the object in it might <br>     * have been changed.  We want to save without showing <br>     * the user any message or asking if the user wants to save. <br>     */ <br>    if (WM_CLOSE==iMsg) <br>        { <br>        if (NULL!=m_pDocCreated) <br>            { <br>            if (m_pDocCreated-&gt;FDirtyGet()) <br>                { <br>                CHourglass  wait; <br>                m_pDocCreated-&gt;USave(0, NULL); <br>                } <br>            } <br> <br>        return FALSE; <br>        } <br>    //End CHAPTER13MOD <br> <br>    //If this is the wrong message, nothing to do. <br>    if (WM_MENUSELECT!=iMsg) <br>        return FALSE; <br> <br>    //This happens when there's no menu selection. <br>    if (-1==wMenuFlags) <br>        return FALSE; <br> <br>    if (MF_POPUP &amp; wMenuFlags) <br>        { <br>        /* <br>         * If this is the cascade verb menu itself, display the same <br>         * message.  m_phMenu[1] contains the current edit menu <br>         * handle. <br>         */ <br>        fRet=((HMENU)wItem==GetSubMenu(m_phMenu[1],MENUPOS_OBJECT)); <br>        } <br>    else <br>        { <br>        /* <br>         * If the ID is in the verb range, use <br>         * IDS_ITEMMESSAGEEDITOBJECT message <br>         */ <br>        fRet=(IDM_VERBMIN &lt;= wItem &amp;&amp; IDM_VERBMAX &gt;= wItem); <br>        } <br> <br>    if (fRet) <br>        m_pSS-&gt;MessageDisplay(IDM_EDITOBJECT); <br> <br>    return fRet; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

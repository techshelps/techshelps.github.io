<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DROPTGT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context675"></a>DROPTGT.CPP</h2>
<pre><code>/* <br> * DROPTGT.CPP <br> * Component Cosmo Chapter 13 <br> * <br> * Implementation of the DropTarget object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cocosmo.h" <br> <br> <br> <br>/* <br> * CDropTarget::CDropTarget <br> * CDropTarget::~CDropTarget <br> * <br> * Constructor Parameters: <br> *  pDoc            PCCosmoDoc of the document containing us. <br> */ <br> <br>CDropTarget::CDropTarget(PCCosmoDoc pDoc) <br>    { <br>    m_cRef=0; <br>    m_pDoc=pDoc; <br> <br>    m_pIDataObject=NULL; <br>    return; <br>    } <br> <br> <br>CDropTarget::~CDropTarget(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CDropTarget::QueryInterface <br> * CDropTarget::AddRef <br> * CDropTarget::Release <br> * <br> * Purpose: <br> *  IUnknown members for CDropTarget object. <br> */ <br> <br>STDMETHODIMP CDropTarget::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IDropTarget==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CDropTarget::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDropTarget::Release(void) <br>    { <br>     if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragEnter <br> * <br> * Purpose: <br> *  Indicates that data in a drag operation has been dragged over <br> *  our window that's a potential target.  We are to decide if it's <br> *  something in which we're interested. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT providing the source data. <br> *  grfKeyState     DWORD flags: states of keys and mouse buttons. <br> *  pt              POINTL coordinates in the client space of <br> *                  the document. <br> *  pdwEffect       LPDWORD into which we'll place the appropriate <br> *                  effect flag for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragEnter(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    HWND        hWnd; <br> <br>    m_pIDataObject=NULL; <br> <br>    if (!m_pDoc-&gt;FQueryPasteFromData(pIDataSource)) <br>        { <br>        *pdwEffect=DROPEFFECT_NONE; <br>        return NOERROR; <br>        } <br> <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    m_pIDataObject=pIDataSource; <br>    m_pIDataObject-&gt;AddRef(); <br> <br>    hWnd=m_pDoc-&gt;Window(); <br>    BringWindowToTop(hWnd); <br>    UpdateWindow(hWnd); <br>    m_pDoc-&gt;DropSelectTargetWindow(); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragOver <br> * <br> * Purpose: <br> *  Indicates that the mouse was moved inside the window represented <br> *  by this drop target.  This happens on every WM_MOUSEMOVE, so <br> *  this function should be very efficient. <br> * <br> * Parameters: <br> *  grfKeyState     DWORD providing the current keyboard and <br> *                  mouse states <br> *  pt              POINTL where the mouse currently is. <br> *  pdwEffect       LPDWORD in which to store the effect flag <br> *                  for this point. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragOver(DWORD grfKeyState, POINTL pt <br>    , LPDWORD pdwEffect) <br>    { <br>    if (NULL==m_pIDataObject) <br>        { <br>        *pdwEffect=DROPEFFECT_NONE; <br>        return NOERROR; <br>        } <br> <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::DragLeave <br> * <br> * Purpose: <br> *  Informs the drop target that the operation has left its window. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::DragLeave(void) <br>    { <br>    m_pDoc-&gt;DropSelectTargetWindow(); <br>    ReleaseInterface(m_pIDataObject); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CDropTarget::Drop <br> * <br> * Purpose: <br> *  Instructs the drop target to paste the data that was just now <br> *  dropped on it. <br> * <br> * Parameters: <br> *  pIDataSource    LPDATAOBJECT from which we'll paste. <br> *  grfKeyState     DWORD providing current keyboard/mouse state. <br> *  pt              POINTL at which the drop occurred. <br> *  pdwEffect       LPDWORD in which to store what you did. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR <br> */ <br> <br>STDMETHODIMP CDropTarget::Drop(LPDATAOBJECT pIDataSource <br>    , DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect) <br>    { <br>    BOOL        fRet=TRUE; <br> <br>    *pdwEffect=DROPEFFECT_NONE; <br> <br>    if (NULL==m_pIDataObject) <br>        return ResultFromScode(E_FAIL); <br> <br>    DragLeave(); <br> <br>    if (m_pDoc-&gt;m_fDragSource) <br>        return ResultFromScode(E_FAIL); <br> <br>    fRet=m_pDoc-&gt;PasteFromData(pIDataSource); <br> <br>    if (!fRet) <br>        return ResultFromScode(E_FAIL); <br> <br>    *pdwEffect=DROPEFFECT_MOVE; <br> <br>    if (grfKeyState &amp; MK_CONTROL) <br>        *pdwEffect=DROPEFFECT_COPY; <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

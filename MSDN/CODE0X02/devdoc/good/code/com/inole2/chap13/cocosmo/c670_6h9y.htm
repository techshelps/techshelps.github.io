<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADVSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context676"></a>IADVSINK.CPP</h2>
<pre><code>/* <br> * IADVSINK.CPP <br> * Component Cosmo Chapter 13 <br> * <br> * Implementation of the CPolylineAdviseSink and CImpIAdviseSink <br> * interfaces for Component Cosmo.  CPolylineAdviseSink moved <br> * here from document.cpp to live with all the advise stuff. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cocosmo.h" <br> <br> <br>/* <br> * CPolylineAdviseSink::CPolylineAdviseSink <br> * CPolylineAdviseSink::~CPolylineAdviseSink <br> * <br> * Constructor Parameters: <br> *  pDoc            PCCosmoDoc to store in this object <br> */ <br> <br>CPolylineAdviseSink::CPolylineAdviseSink(PCCosmoDoc pDoc) <br>    { <br>    m_pDoc=pDoc; <br>    m_cRef=0; <br>    AddRef(); <br>    return; <br>    } <br> <br> <br>CPolylineAdviseSink::~CPolylineAdviseSink(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CPolylineAdviseSink::QueryInterface <br> * CPolylineAdviseSink::AddRef <br> * CPolylineAdviseSink::Release <br> * <br> * Purpose: <br> *  IUnknown members for this IPolylineAdviseSink implementations. <br> */ <br> <br>STDMETHODIMP CPolylineAdviseSink::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pDoc-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolylineAdviseSink::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CPolylineAdviseSink::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>/* <br> * CPolylineAdviseSink::OnPointChange <br> * <br> * Purpose: <br> *  Informs the document that the polyline added or removed a point. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CPolylineAdviseSink::OnPointChange(void) <br>    { <br>    m_pDoc-&gt;FDirtySet(TRUE); <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CPolylineAdviseSink::OnSizeChange <br> * <br> * Purpose: <br> *  Informs the document that the polyline changed size. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CPolylineAdviseSink::OnSizeChange(void) <br>    { <br>    RECT            rc; <br>    DWORD           dwStyle; <br>    HWND            hWnd; <br> <br>    /* <br>     * Polyline window is informing us that it changed size in <br>     * response to setting it's data.  Therefore we have to <br>     * size ourselves accordingly but without moving the screen <br>     * position of the polyline window. <br>     */ <br> <br>    m_pDoc-&gt;m_fNoSize=TRUE; <br> <br>    //Set the document window size. <br>    m_pDoc-&gt;m_pPL-&gt;Window(&amp;hWnd); <br>    GetWindowRect(hWnd, &amp;rc); <br>    InflateRect(&amp;rc, 8, 8); <br> <br>    //Adjust for a window sans menu <br>    dwStyle=GetWindowLong(m_pDoc-&gt;m_hWnd, GWL_STYLE); <br>    AdjustWindowRect(&amp;rc, dwStyle, FALSE); <br> <br>    SetWindowPos(m_pDoc-&gt;m_hWnd, NULL, 0, 0, rc.right-rc.left <br>        , rc.bottom-rc.top, SWP_NOMOVE | SWP_NOZORDER); <br> <br>    if (NULL!=m_pDoc-&gt;m_pAdv) <br>        m_pDoc-&gt;m_pAdv-&gt;OnSizeChange(m_pDoc, &amp;rc); <br> <br>    m_pDoc-&gt;m_fNoSize=FALSE; <br>    m_pDoc-&gt;FDirtySet(TRUE); <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPolylineAdviseSink::OnColorChange <br> * <br> * Purpose: <br> *  Informs the document that the polyline data changed a color. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CPolylineAdviseSink::OnColorChange(void) <br>    { <br>    m_pDoc-&gt;FDirtySet(TRUE); <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CPolylineAdviseSink::OnLineStyleChange <br> * <br> * Purpose: <br> *  Informs the document that the polyline changed its line style. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CPolylineAdviseSink::OnLineStyleChange(void) <br>    { <br>    m_pDoc-&gt;FDirtySet(TRUE); <br>    return; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::CImpIAdviseSink <br> * CImpIAdviseSink::~CImpIAdviseSink <br> * <br> * Parameters (Constructor): <br> *  pObj            LPVOID of the object we're in. <br> *  pUnkOuter       LPUNKNOWN for delegation of IUnknown members. <br> */ <br> <br>CImpIAdviseSink::CImpIAdviseSink(LPVOID pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIAdviseSink::~CImpIAdviseSink(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::QueryInterface <br> * CImpIAdviseSink::AddRef <br> * CImpIAdviseSink::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIAdviseSink object. <br> */ <br> <br>STDMETHODIMP CImpIAdviseSink::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnDataChange <br> * <br> * Purpose: <br> *  Notifes the advise sink that data changed in a data object. <br> *  On this message you may request a new data rendering and <br> *  update your displays as necessary. <br> * <br> * Parameters: <br> *  pFEIn           LPFORMATETC describing format that changed <br> *  pSTM            LPSTGMEDIUM providing the medium in which the <br> *                  data is provided. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnDataChange(LPFORMATETC pFEIn <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    PCCosmoDoc      m_pDoc=(PCCosmoDoc)m_pObj; <br> <br>    /* <br>     * This code is from former CPolylineAdviseSink::OnDataChange. <br>     * The only advise we asked for was on the Polyline native <br>     * format which is all we'll be notified for. <br>     */ <br>    if (NULL!=m_pDoc-&gt;m_pAdv) <br>        m_pDoc-&gt;m_pAdv-&gt;OnDataChange(m_pDoc); <br> <br>    m_pDoc-&gt;FDirtySet(TRUE); <br>    return; <br>    } <br> <br> <br> <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnViewChange(DWORD dwAspect <br>    , LONG lindex) <br>    { <br>    return; <br>    } <br> <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnRename(LPMONIKER pmk) <br>    { <br>    return; <br>    } <br> <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnSave(void) <br>    { <br>    return; <br>    } <br> <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnClose(void) <br>    { <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEFILE.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context823"></a>OLEFILE.C</h2>
<pre><code>/* <br> * OLEFILE.C <br> * <br> * Functions for handling special case OLE functions for operations <br> * on a File menu such as New, Open, Save, SaveAs, and Exit. <br> * <br> * Functions: <br> *  PDocRevokeAndCreate <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#ifdef MAKEOLESERVER <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole.h&gt; <br>#include "cosmo.h" <br>#include "oleglobl.h" <br> <br> <br> <br>/* <br> * PDocRevokeAndCreate <br> * <br> * Purpose: <br> *  Standard sequence of calling OleRevokeServerDoc, allocating and <br> *  initializing a new OLESERVERDOC structure, and calling <br> *  OleRegisterServerDoc. <br> * <br> * Parameters: <br> *  pOLE            LPXOLEGLOBALS pointer to OLE global variables. <br> * <br> * Return Value: <br> *  LPCOSMODOC      Pointer to the new document, or NULL if it fails. <br> * <br> */ <br> <br>LPCOSMODOC WINAPI PDocRevokeAndCreate(LPXOLEGLOBALS pOLE) <br>    { <br>    LPCOSMODOC      pDoc; <br>    OLESTATUS       os; <br> <br>    os=OleRevokeServerDoc(pOLE-&gt;pSvr-&gt;pDoc-&gt;lh); <br> <br>    /* <br>     * Even through we are revoking the document, the server will also <br>     * be Released (through not revoked) since no OLE connections will <br>     * exist to the server.  Since ServerRelease in this application <br>     * frees the allocated document, we need to wait until we pass <br>     * ServerRelease before allocating a new document.  Otherwise we'd <br>     * allocate a new one and ServerRelease would immediately free it. <br>     * <br>     * So in calling FOLEReleaseWait we watch the server's fRelease flag. <br>     */ <br> <br>    if (OLE_WAIT_FOR_RELEASE==os) <br>        { <br>        pOLE-&gt;pSvr-&gt;fRelease=FALSE; <br>        FOLEReleaseWait(&amp;pOLE-&gt;pSvr-&gt;fRelease, pOLE-&gt;pSvr-&gt;lh); <br>        } <br> <br>    pDoc=PDocumentAllocate(&amp;pOLE-&gt;vtblDoc); <br>    pOLE-&gt;pSvr-&gt;pDoc=pDoc; <br> <br>    if (NULL==pDoc) <br>        return NULL; <br> <br>    os=OleRegisterServerDoc(pOLE-&gt;pSvr-&gt;lh, pGlob-&gt;szFile, <br>                            (LPOLESERVERDOC)pOLE-&gt;pSvr-&gt;pDoc, <br>                            &amp;pOLE-&gt;pSvr-&gt;pDoc-&gt;lh); <br> <br>    pOLE-&gt;pSvr-&gt;fLink=FALSE; <br>    pOLE-&gt;pSvr-&gt;fEmbed=FALSE; <br> <br>    MenuEmbeddingSet(pGlob-&gt;hWnd, NULL, FALSE); <br>    return pDoc; <br>    } <br> <br> <br>#endif //MAKEOLESERVER </code></pre>
<p>&nbsp;</p></body>
</HTML>

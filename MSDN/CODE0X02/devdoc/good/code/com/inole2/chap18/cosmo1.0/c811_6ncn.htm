<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEINST.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context827"></a>OLEINST.C</h2>
<pre><code>/* <br> * OLEINST.C <br> * <br> * OLE-Specific installation-time functions that should be performed <br> * once when the application is first added to the system. <br> * <br> * Note that there are embedded strings in this file.  We do not use <br> * strings from the application wide source in rgpsz since we want this <br> * module to be reusable in installation programs. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br> <br>#ifdef MAKEOLESERVER <br> <br>#include &lt;windows.h&gt; <br>#include "cosmo.h" <br>#include "oleinst.h" <br> <br> <br>/* <br> * FRegDBInstall <br> * <br> * Purpose: <br> *  Handles any installations the applciation must handle for the <br> *  registration database.  In this application, we just set up to <br> *  call FOLEInstall that handles the OLE specific strings. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if installation succeeded, FALSE otherwise. <br> * <br> */ <br> <br>BOOL FAR PASCAL FRegDBInstall(void) <br>    { <br>    REGINSTALL  ri; <br>    HMODULE     hMod; <br>    LPSTR       rgszVerbs[OBJVERB_MAX]; <br>    char        szPath[CCHPATHMAX]; <br> <br>    /* <br>     * Fill the REGINSTALL structure for calling FOLEServerInstall. <br>     * Must do this after the strings are loaded since we use strings <br>     * from the stringtable. <br>     */ <br>    ri.pszServerName    =(LPSTR)rgpsz[IDS_FULLNAME]; <br>    ri.pszServerClass   =(LPSTR)rgpsz[IDS_CLASSCOSMO]; <br>    ri.pszHandlerPath   =(LPSTR)NULL; <br>    ri.pszExt           =(LPSTR)rgpsz[IDS_DOTEXT]; <br>    ri.pszSetFormats    =(LPSTR)rgpsz[IDS_NATIVE]; <br>    ri.pszRequestFormats=(LPSTR)rgpsz[IDS_DATAFORMATS]; <br>    ri.fExecute         =FALSE; <br> <br>    //Get the module path <br>    hMod=GetModuleHandle(rgpsz[IDS_MODULE]); <br> <br>    if (NULL==hMod) <br>        return FALSE; <br> <br>    GetModuleFileName(hMod, szPath, CCHPATHMAX); <br> <br>    ri.pszServerPath    =(LPSTR)szPath; <br> <br>    //Fill the array of pointers to verbs. <br>    rgszVerbs[OBJVERB_EDIT]=(LPSTR)rgpsz[IDS_VERBEDIT]; <br> <br>    ri.ppszVerbs        =rgszVerbs; <br>    ri.cVerbs           =OBJVERB_MAX; <br> <br>    return FOLEServerInstall(&amp;ri); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * FOLEServerInstall <br> * <br> * Purpose: <br> *  Registers the server application and it's editable data types <br> *  with the registration database through the SHELL.DLL functions. <br> * <br> *  This function will register the server in the database if it <br> *  is not there already. <br> * <br> * Limitations: <br> *  FOLEServerInstall supports only a single class of data. <br> * <br> * Parameters: <br> *  pszServer       LPSTR name of the server. <br> *  pszData         LPSTR name of the data edited by the server. <br> * <br> * Return Value: <br> *  BOOL            TRUE if registration took place or the application <br> *                  was already registered, FALSE otherwise. <br> */ <br> <br> <br>BOOL FAR PASCAL FOLEServerInstall(LPREGINSTALL lpRI) <br>    { <br>    char        szKey[128]; <br>    char        szTemp[20]; <br>    DWORD       dw=128; <br>    LONG        lRet; <br>    UINT        iVerb; <br>    LPSTR       *ppsz; <br> <br>    //Check if this server is already around. <br>    lRet=RegQueryValue(HKEY_CLASSES_ROOT, lpRI-&gt;pszServerClass, szKey, &amp;dw); <br> <br>    if ((LONG)ERROR_SUCCESS==lRet) <br>        return TRUE; <br> <br> <br>    /* <br>     * Add various strings to the registration database: <br>     *  1.  English-readable class name. <br>     *  2.  Simple class name. <br>     *  3.  Full path to the server executable. <br>     *  4.  Full path to the handler DLL, if available. <br>     *  5.  Verbs <br>     *  6.  Any formats supported through OleSetData and OleRequestData. <br>     *  7.  Full application path if the server supports StdExecute. <br>     */ <br> <br>    //Validate essential strings <br>    if (NULL==lpRI-&gt;pszServerClass) <br>        return FALSE; <br> <br>    if (NULL==lpRI-&gt;pszServerName) <br>        return FALSE; <br> <br>    if (NULL==lpRI-&gt;pszServerPath) <br>        return FALSE; <br> <br>    if (NULL==lpRI-&gt;pszExt) <br>        return FALSE; <br> <br>    if (NULL==lpRI-&gt;ppszVerbs || 0==lpRI-&gt;cVerbs) <br>        return FALSE; <br> <br> <br>    //1. English class name.  Subkey is "" <br>    FKeyCreate(lpRI-&gt;pszServerClass, rgpsz[IDS_EMPTY], lpRI-&gt;pszServerName); <br> <br> <br>    //2. Simple class name associated with the file extension.  Subkey is "" <br>    FKeyCreate(lpRI-&gt;pszExt, rgpsz[IDS_EMPTY], lpRI-&gt;pszServerClass); <br> <br> <br>    /* <br>     * The server path, handler path, and verbs are all part of <br>     * the \\classname\\protocol\\StdFileEditing\\ key.  Before <br>     * creating any of the keys, create a string with the class <br>     * name embedded. <br>     */ <br>    wsprintf(szKey, "%s\\protocol\\StdFileEditing\\", lpRI-&gt;pszServerClass); <br> <br> <br>    //3. Server path, append "server" onto szKey. <br>    FKeyCreate(szKey, "server", lpRI-&gt;pszServerPath); <br> <br>    //4. Add the handler path, if one exists, appening "handler" on szKey. <br>    if (NULL!=lpRI-&gt;pszHandlerPath) <br>        FKeyCreate(szKey, "handler", lpRI-&gt;pszHandlerPath); <br> <br>    //5.  Add each verb.  Append to szKey "verb\\n" where n is a simple count. <br>    ppsz=lpRI-&gt;ppszVerbs; <br> <br>    for (iVerb=0; iVerb &lt; lpRI-&gt;cVerbs; iVerb++) <br>        { <br>        //Create key and skip to next verb. <br>        wsprintf(szTemp, "verb\\%d", iVerb); <br>        FKeyCreate(szKey, szTemp, *ppsz++); <br>        } <br> <br> <br>    //6. Add the strings for formats, to "SetDataFormats" and "RequestDataFormats" <br>    if (NULL!=lpRI-&gt;pszSetFormats) <br>        FKeyCreate(szKey, "SetDataFormats", lpRI-&gt;pszSetFormats); <br> <br>    if (NULL!=lpRI-&gt;pszSetFormats) <br>        FKeyCreate(szKey, "RequestDataFormats", lpRI-&gt;pszRequestFormats); <br> <br> <br>    //7. Add the StdExecute string, appending the server path. <br>    if (lpRI-&gt;fExecute) <br>        { <br>        wsprintf(szKey, "%s\\protocol\\StdExecute\\", lpRI-&gt;pszServerClass); <br>        FKeyCreate(szKey, "server", lpRI-&gt;pszServerPath); <br>        } <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * FKeyCreate <br> * <br> * Purpose: <br> *  Short function to simplify the key creation process, centralizing <br> *  calls to RegCreateKey, RegSetValue, and RegCloseKey.  If the RegSetValue <br> *  fails, the key is deleted with RegDeleteKey. <br> * <br> * Parameters: <br> *  pszKey          LPSTR to keyname. <br> *  pszSubKey       LPSTR to last word in keyname.  This parameter is <br> *                  separate to enable calling RegDeleteKey on error. <br> *  pszValue        LPSTR to value to associate with keyname. <br> * <br> * Return Value: <br> *  BOOL            TRUE if registration succeeded, FALSE otherwise. <br> */ <br> <br>BOOL PASCAL FKeyCreate(LPSTR pszKey, LPSTR pszSubKey, LPSTR pszValue) <br>    { <br>    char        szKey[128]; <br>    HKEY        hKey; <br>    UINT        cch; <br>    LONG        lRet; <br> <br>    cch=lstrlen(pszValue)+1; <br> <br>    lstrcpy(szKey, pszKey); <br>    lstrcat(szKey, pszSubKey); <br> <br>    lRet=RegCreateKey(HKEY_CLASSES_ROOT, szKey, &amp;hKey); <br> <br>    if (lRet!=ERROR_SUCCESS) <br>        return FALSE; <br> <br> <br>    lRet=RegSetValue(HKEY_CLASSES_ROOT, szKey, REG_SZ, pszValue, cch); <br> <br>    if (lRet!=ERROR_SUCCESS) <br>        { <br>        //Delete key if we could not set a value. <br>        RegDeleteKey(hKey, pszSubKey); <br>        return FALSE; <br>        } <br> <br>    lRet=RegCloseKey(hKey); <br> <br>    if (lRet!=ERROR_SUCCESS) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>#endif   //MAKEOLESERVER </code></pre>
<p>&nbsp;</p></body>
</HTML>

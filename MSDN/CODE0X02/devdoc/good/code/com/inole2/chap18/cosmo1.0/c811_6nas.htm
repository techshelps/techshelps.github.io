<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COSMO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context814"></a>COSMO.H</h2>
<pre><code>/* <br> * COSMO.H <br> * <br> * Definitions and function prototypes for the OLE Cosmo Server. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#include "polyline.h" <br> <br>//Resource identifiers. <br>#define IDR_MENU            1 <br>#define IDR_ACCELERATORS    1 <br>#define IDD_ABOUT           1 <br> <br>//POLYLINE Window ID <br>#define ID_POLYLINE         10 <br> <br> <br>//Menu command identifiers. <br>#define IDM_FILENEW         100 <br>#define IDM_FILEOPEN        101 <br>#define IDM_FILESAVE        102 <br>#define IDM_FILESAVEAS      103 <br>#define IDM_FILEIMPORT      104 <br>#define IDM_FILEEXIT        110 <br> <br>#define IDM_EDITUNDO        200 <br>#define IDM_EDITCUT         201 <br>#define IDM_EDITCOPY        202 <br>#define IDM_EDITPASTE       203 <br> <br>#define IDM_HELPABOUT       300 <br> <br> <br>//File-related string lengths. <br>#define CCHPATHMAX          256 <br>#define CCHFILENAMEMAX      15 <br> <br> <br> <br>/* <br> * CSTRINGS is number of strings to load from the stringtable. <br> * CCHSTRINGMAX is the maximum length that any string is allowed. <br> * <br> * What will happen is that CSTRINGS*CCHSTRINGMAX is allocated to begin <br> * with and the stringtable is loaded into that space, Only using what's <br> * required for each string.  After that, the space is reallocated to <br> * be as small as possible. <br> */ <br> <br>#define CSTRINGS            30 <br>#define CCHSTRINGMAX        80 <br> <br> <br> <br>//String ID values.  Keep in SEQUENTIAL order and use 0-n <br>#define IDS_CAPTION         0 <br>#define IDS_CLASSCOSMO      1 <br>#define IDS_CLASSPOLYLINE   2 <br>#define IDS_FILEDIRTY       3 <br>#define IDS_DEFEXT          4 <br>#define IDS_FILEOPENFILTER  5 <br>#define IDS_FILEOPEN        6 <br>#define IDS_FILESAVEAS      7 <br>#define IDS_FILEIMPORT      8 <br>#define IDS_FULLNAME        9 <br>#define IDS_FIGURE          10 <br>#define IDS_DOTEXT          11 <br>#define IDS_MODULE          12 <br>#define IDS_UNTITLED        13 <br>#define IDS_EMPTY           14 <br> <br>#define IDS_VERBEDIT        15 <br>#define IDS_UPDATE          16 <br>#define IDS_SAVE            17 <br>#define IDS_SAVEAS          18 <br>#define IDS_SAVECOPYAS      19 <br>#define IDS_EXIT            20 <br>#define IDS_EXITANDRETURN   21 <br>#define IDS_EMBEDDING       22 <br>#define IDS_NATIVE          23 <br>#define IDS_DATAFORMATS     24 <br>#define IDS_STDFILEEDITING  25 <br>#define IDS_OWNERLINK       26 <br>#define IDS_OBJECTLINK      27 <br> <br>#define IDS_CLOSEALERT1     28 <br>#define IDS_CLOSEALERT2     29 <br> <br> <br> <br> <br>/* <br> * Structure holding the "global" variables.  Creating a structure with <br> * has several advantages over separately declaring each field as a <br> * global: <br> *  1.  Keep source files clean. <br> *  2.  Eliminates need for many "extern" declarations. <br> *  3.  A single pointer to this structure can be passed throughout <br> *      the application, hiding the fact that it's global. <br> *  4.  Allows the variables to be allocated dynamically or from <br> *      different memory than the application's DS. <br> *  5.  Any reference to these variables will have a pointer or <br> *      structure dereference, which points to where the variable <br> *      actually is defined.  Separate globals are not distinguishable <br> *      from locals, making code harder to read. <br> * <br> * Note that fNoDirty is used from OLEOBJ.C in the ObjShow method <br> * to prevent setting fDirty when the window is sized from ObjShow. <br> */ <br> <br>typedef struct <br>    { <br>    HWND        hWnd;               //Top-level application window. <br>    HWND        hWndPolyline;       //Editor window. <br>    HINSTANCE   hInst;              //Application instance handle. <br>    LPSTR       pszCmdLine;         //Command line passed to WinMain. <br>    UINT        nCmdShow;           //Initial ShowWindow command. <br>    HLOCAL      hStringMem;         //Stringtable memory. <br>    UINT        cfCosmo;            //Private clipboard format. <br>    BOOL        fDirty;             //Is file dirty? <br>    BOOL        fNoDirty;           //If TRUE, don't touch dirty flag. <br>    BOOL        fOpenFile;          //FALSE if File/New used until saved. <br>    char        szFile[CCHPATHMAX]; //Filename for Save command. <br> <br>    BOOL        fOLE;               //Indicates if we are linked/embedded. <br>    } GLOBALS; <br> <br>typedef GLOBALS FAR * LPGLOBALS; <br> <br>//External: <br>extern char NEAR *rgpsz[CSTRINGS]; <br>extern LPGLOBALS pGlob; <br> <br> <br>//Versioning. <br>#define VERSIONMAJOR        1 <br>#define VERSIONMINOR        0 <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * Function prototypes, organized by source file.  Any small definition <br> * required by only one source file is also included here under the <br> * same heading. <br> */ <br> <br>//CLIP.C <br>BOOL      WINAPI FEditCut(LPGLOBALS); <br>BOOL      WINAPI FEditCopy(LPGLOBALS, BOOL); <br>BOOL      WINAPI FEditPaste(LPGLOBALS); <br>HGLOBAL   WINAPI HGetPolyline(HWND); <br>HGLOBAL   WINAPI HGetMetafilePict(HWND); <br>HGLOBAL   WINAPI HGetBitmap(HWND); <br> <br> <br>//COMMDLG.C <br>BOOL     WINAPI FSaveOpenDialog(HWND, HINSTANCE, LPSTR, LPSTR, LPSTR, LPSTR, BOOL); <br> <br>//EXIT.C <br>BOOL     WINAPI FApplicationExit(LPGLOBALS); <br> <br>//FILE.C <br>BOOL     WINAPI FDirtySet(BOOL); <br>BOOL     WINAPI FCleanVerify(LPGLOBALS); <br>BOOL     WINAPI FFileNew(LPGLOBALS); <br>BOOL     WINAPI FFileOpen(LPGLOBALS, BOOL); <br>BOOL     WINAPI FFileSave(LPGLOBALS); <br>BOOL     WINAPI FFileSaveAs(LPGLOBALS); <br>BOOL     WINAPI FFileExit(LPGLOBALS); <br> <br>//FILEIO.C <br>BOOL     WINAPI FCosFileRead(LPGLOBALS, LPSTR, LPPOLYLINE); <br>BOOL     WINAPI FCosFileWrite(LPGLOBALS, LPSTR, LPPOLYLINE); <br> <br> <br>//INIT.C <br>BOOL     WINAPI FApplicationInit(LPGLOBALS, HINSTANCE); <br>BOOL     WINAPI FClassRegister(LPGLOBALS, HINSTANCE); <br>BOOL     WINAPI FFileInit(LPGLOBALS); <br>HLOCAL   WINAPI HLoadAppStrings(LPGLOBALS); <br>HLOCAL   WINAPI HListParse(LPSTR); <br>LPSTR    PASCAL PszWhiteSpaceScan(LPSTR, BOOL); <br> <br>//MISC.C <br>void     WINAPI WindowTitleSet(HWND, LPSTR); <br>void     WINAPI RectConvertToHiMetric(HWND, LPRECT); <br>void     WINAPI RectConvertToDevice(HWND, LPRECT); <br> <br>//COSMO.C <br>LRESULT  WINAPI CosmoWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL     WINAPI AboutProc(HWND, UINT, WPARAM, LPARAM); </code></pre>
<p>&nbsp;</p></body>
</HTML>

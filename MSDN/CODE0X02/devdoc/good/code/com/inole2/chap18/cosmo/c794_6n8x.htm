<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIGURE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context801"></a>FIGURE.CPP</h2>
<pre><code>/* <br> * FIGURE.CPP <br> * Cosmo Chapter 18 <br> * <br> * Implementation of the CFigure object for Cosmo. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cosmo.h" <br> <br> <br>/* <br> * CFigure::CFigure <br> * CFigure::~CFigure <br> * <br> * Parameters (Constructor): <br> *  pfnDestroy      PFNDESTROYED to call when object is destroyed. <br> *  pDoc            PCCosmoDoc we're associated with. <br> */ <br> <br>CFigure::CFigure(PFNDESTROYED pfnDestroy, PCCosmoDoc pDoc) <br>    { <br>    m_cRef=0; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_pFR=NULL;     //We get this later through FrameSet. <br>    m_pDoc=pDoc; <br>    m_pPL=pDoc-&gt;m_pPL; <br> <br>    m_fEmbedded=FALSE; <br> <br>    //NULL any contained interfaces initially. <br>    m_pImpIPersistStorage=NULL; <br>    m_pIStorage=NULL; <br>    m_pIStream=NULL; <br>    m_pImpIDataObject=NULL; <br>    m_pIDataAdviseHolder=NULL; <br>    m_pImpIOleObject=NULL; <br>    m_pIOleAdviseHolder=NULL; <br>    m_pIOleClientSite=NULL; <br> <br>    m_clsID=CLSID_CosmoFigure; <br>    m_cf=pDoc-&gt;m_cf; <br> <br>    //These are for IDataObject::QueryGetData <br>    m_cfeGet=CFORMATETCGET; <br> <br>    SETDefFormatEtc(m_rgfeGet[0], pDoc-&gt;m_cf, TYMED_HGLOBAL); <br>    SETDefFormatEtc(m_rgfeGet[1], pDoc-&gt;m_cfEmbedSource <br>        , TYMED_ISTORAGE); <br>    SETDefFormatEtc(m_rgfeGet[2], pDoc-&gt;m_cfObjectDescriptor <br>        , TYMED_HGLOBAL); <br>    SETDefFormatEtc(m_rgfeGet[3], CF_METAFILEPICT, TYMED_MFPICT); <br>    SETDefFormatEtc(m_rgfeGet[4], CF_BITMAP, TYMED_GDI); <br> <br>    m_pST=NULL; <br> <br>    return; <br>    } <br> <br> <br>CFigure::~CFigure(void) <br>    { <br>    ReleaseInterface(m_pIOleClientSite); <br>    ReleaseInterface(m_pIDataAdviseHolder); <br>    ReleaseInterface(m_pIOleAdviseHolder); <br>    ReleaseInterface(m_pIStorage) <br>    ReleaseInterface(m_pIStream) <br> <br>    DeleteInterfaceImp(m_pImpIOleObject) <br>    DeleteInterfaceImp(m_pImpIDataObject) <br>    DeleteInterfaceImp(m_pImpIPersistStorage); <br> <br>    //Free strings. <br>    if (NULL!=m_pST) <br>        delete m_pST; <br> <br>    return; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CFigure::QueryInterface <br> * CFigure::AddRef <br> * CFigure::Release <br> * <br> * Purpose: <br> *  IUnknown members for CFigure object. <br> */ <br> <br>STDMETHODIMP CFigure::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid) <br>        *ppv=this; <br> <br>    if (IID_IPersist==riid || IID_IPersistStorage==riid) <br>        *ppv=m_pImpIPersistStorage; <br> <br>    if (IID_IDataObject==riid) <br>        *ppv=m_pImpIDataObject; <br> <br>    if (IID_IOleObject==riid) <br>        *ppv=m_pImpIOleObject; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFigure::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CFigure::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    //Document deletes us <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CFigure::Init <br> * <br> * Purpose: <br> *  Performs any initialization of a CFigure that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CFigure::Init(void) <br>    { <br>    m_pST=new CStringTable(m_pDoc-&gt;m_hInst); <br> <br>    if (NULL==m_pST) <br>        return FALSE; <br> <br>    if (!m_pST-&gt;Init(IDS_FIGUREMIN, IDS_FIGUREMAX)) <br>        return FALSE; <br> <br>    //Allocate contained interfaces. <br>    m_pImpIPersistStorage=new CImpIPersistStorage(this, this); <br> <br>    if (NULL==m_pImpIPersistStorage) <br>        return FALSE; <br> <br>    m_pImpIDataObject=new CImpIDataObject(this, this); <br> <br>    if (NULL==m_pImpIDataObject) <br>        return FALSE; <br> <br>    m_pImpIOleObject=new CImpIOleObject(this, this); <br> <br>    if (NULL==m_pImpIOleObject) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * CFigure::FrameSet <br> * <br> * Purpose: <br> *  Provides the compound document object with access to the frame <br> *  of this application for UI purposes. <br> * <br> * Parameters: <br> *  pFR             PCCosmoFrame of the frame window. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CFigure::FrameSet(PCCosmoFrame pFR) <br>    { <br>    m_pFR=pFR; <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CFigure::FIsDirty <br> * <br> * Purpose: <br> *  Checks if the document is dirty.  This can be called from <br> *  IPersistStorage::IsDirty which doesn't have access to CCosmoDoc. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if dirty, FALSE if clean. <br> */ <br> <br>BOOL CFigure::FIsDirty(void) <br>    { <br>    return m_pDoc-&gt;m_fDirty; <br>    } <br> <br> <br> <br> <br>/* <br> * CFigure::FIsEmbedded <br> * <br> * Purpose: <br> *  Answers if the object is embedded or not. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the object is embedded, FALSE otherwise. <br> */ <br> <br>BOOL CFigure::FIsEmbedded(void) <br>    { <br>    return m_fEmbedded; <br>    } <br> <br> <br> <br> <br>/* <br> * CFigure::SendAdvise <br> * <br> * Purpose: <br> *  Calls the appropriate IOleClientSite or IAdviseSink member <br> *  function for various events such as closure, saving, etc. <br> * <br> * Parameters: <br> *  uCode           UINT OBJECTCODE_* identifying the notification. <br> * <br> * Return Value: <br> *  None <br> */ <br> <br>void CFigure::SendAdvise(UINT uCode) <br>    { <br>    switch (uCode) <br>        { <br>        case OBJECTCODE_SAVED: <br>            if (NULL!=m_pIOleAdviseHolder) <br>                m_pIOleAdviseHolder-&gt;SendOnSave(); <br> <br>break; <br> <br>        case OBJECTCODE_CLOSED: <br>            if (NULL!=m_pIOleAdviseHolder) <br>                m_pIOleAdviseHolder-&gt;SendOnClose(); <br> <br>break; <br> <br>        case OBJECTCODE_RENAMED: <br>            //Call IOleAdviseHolder::SendOnRename (later) <br>            break; <br> <br>        case OBJECTCODE_SAVEOBJECT: <br>            if (FIsDirty() &amp;&amp; NULL!=m_pIOleClientSite) <br>                m_pIOleClientSite-&gt;SaveObject(); <br> <br>            break; <br> <br>        case OBJECTCODE_DATACHANGED: <br>            //No flags are necessary here. <br>            if (NULL!=m_pIDataAdviseHolder) <br>                { <br>                m_pIDataAdviseHolder-&gt;SendOnDataChange <br>                    (m_pImpIDataObject, 0, 0); <br>                } <br>            break; <br> <br>        case OBJECTCODE_SHOWWINDOW: <br>            if (NULL!=m_pIOleClientSite) <br>                m_pIOleClientSite-&gt;OnShowWindow(TRUE); <br> <br>            break; <br> <br>        case OBJECTCODE_HIDEWINDOW: <br>            if (NULL!=m_pIOleClientSite) <br>                m_pIOleClientSite-&gt;OnShowWindow(FALSE); <br> <br>            break; <br> <br>        case OBJECTCODE_SHOWOBJECT: <br>            if (NULL!=m_pIOleClientSite) <br>                m_pIOleClientSite-&gt;ShowObject(); <br> <br>            break; <br>        } <br> <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

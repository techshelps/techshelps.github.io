<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMMDLG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context812"></a>COMMDLG.C</h2>
<pre><code>/* <br> * COMMDLG.C <br> * <br> * Routines to interface to the COMMDLG library for File Open and <br> * File Save/Save As functions. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include "cosmo.h" <br> <br> <br> <br>/* <br> * FSaveOpenDialog <br> * <br> * Purpose: <br> *  Invokes the COMMDLG.DLL GetOpenFileName dialog and retrieves <br> *  a filename for saving or opening. <br> * <br> * Parameters: <br> *  hWnd            HWND of the owning application. <br> *  hInst           HINSTANCE of the application instance. <br> *  pszExt          LPSTR of the default extension <br> *  pszFilter       LPSTR of the filter desciption. <br> *  pszFile         LPSTR buffer to receive the entered filename. <br> *                  Must be at least CCHPATHMAX long. <br> *  fOpen           BOOL indicating if we want file open or save. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function retrieved a filename, <br> *                  FALSE if the user pressed CANCEL. <br> */ <br> <br>BOOL WINAPI FSaveOpenDialog(HWND hWnd, HINSTANCE hInst, LPSTR pszExt <br>    , LPSTR pszFilter, LPSTR pszFile, LPSTR pszCaption, BOOL fOpen) <br>    { <br>    OPENFILENAME    ofn; <br>    char            szTitle[CCHFILENAMEMAX]; <br>    char            szFilter[80]; <br>    UINT            cch1; <br>    UINT            cch2; <br> <br>    ofn.lStructSize      =sizeof(OPENFILENAME); <br>    ofn.hwndOwner        =hWnd; <br>    ofn.hInstance        =hInst; <br> <br>    ofn.lpstrFilter      =szFilter; <br>    ofn.lpstrCustomFilter=NULL; <br>    ofn.nMaxCustFilter   =0L; <br>    ofn.nFilterIndex     =1L;                //We only have 1 extension. <br> <br>    ofn.lpstrFile        =pszFile; <br>    ofn.nMaxFile         =CCHPATHMAX; <br>    ofn.lpstrFileTitle   =(LPSTR)szTitle; <br>    ofn.nMaxFileTitle    =CCHFILENAMEMAX; <br> <br>    ofn.lpstrInitialDir  =NULL; <br>    ofn.lpstrTitle       =pszCaption; <br> <br>    ofn.Flags            =OFN_HIDEREADONLY; <br>    ofn.nFileOffset      =0; <br>    ofn.nFileExtension   =0; <br>    ofn.lpstrDefExt      =pszExt; <br>    ofn.lCustData        =0; <br>    ofn.lpfnHook         =NULL; <br>    ofn.lpTemplateName   =NULL; <br> <br> <br>    //Modify the flags as appropriate. <br>    if (fOpen) <br>        ofn.Flags        |= OFN_FILEMUSTEXIST; <br>    else <br>        ofn.Flags        |= OFN_PATHMUSTEXIST | OFN_OVERWRITEPROMPT; <br> <br> <br>    //Build a filter like "pszFilter\0*.pszExt\0\0" <br>    lstrcpy(szFilter, pszFilter); <br>    cch1=1+lstrlen(szFilter); <br> <br>    cch2=wsprintf(pszFile, "*.%s", pszExt);  //Initial edit control contents. <br>    lstrcpy(szFilter+cch1, pszFile);         //Append to filter. <br> <br>    //Add the second null-terminator. <br>    *(szFilter+cch1+cch2+1)=0; <br> <br>    return GetOpenFileName(&amp;ofn); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEINIT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context826"></a>OLEINIT.C</h2>
<pre><code>/* <br> * OLEINIT.C <br> * <br> * Handles all application and instance-specific initialization that <br> * is also specific to OLE.  That which is specific only to the <br> * application or instance resides in INIT.C <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#ifdef MAKEOLESERVER <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole.h&gt; <br>#include "cosmo.h" <br>#include "oleglobl.h" <br> <br> <br> <br> <br>/* <br> * FOLEInstanceInit <br> * <br> * Purpose: <br> *  Handles OLE-server specific initialziation: <br> *      1.  Register clipboard formats for "Native", "OwnerLink", <br> *          and "ObjectLink." <br> *      2.  Initialize VTBLs for server, document, and object. <br> *      3.  Register the server with OLESVR. <br> *      4.  Parse the command line to determine initial window state. <br> *      5.  Register a document depending on contents of command line. <br> * <br> * Parameters: <br> *  pOLE            LPXOLEGLOBALS to OLE-specific global variable block. <br> *  hInstance       HINSTANCE of the application instance. <br> *  pszClass        LPSTR to classname of the server. <br> *  ppszCmds        LPSTR FAR to command line argument strings. <br> *  nCmdShow        UINT initial ShowWindow command passed to WinMain. <br> * <br> * Return Value: <br> *  BOOL            FALSE if an error occurred, otherwise TRUE and <br> *                  pOLE-&gt;wCmdShow contains a valid ShowWindow command <br> *                  for the initial state of the window. <br> */ <br> <br>BOOL WINAPI FOLEInstanceInit(LPXOLEGLOBALS pOLE, HINSTANCE hInstance <br>    , LPSTR pszClass, LPSTR FAR *ppszCmds, UINT nCmdShow) <br>    { <br>    OLESTATUS       os; <br>    LPSTR           pszT; <br>    LPCOSMOSERVER   pSvr; <br>    LPCOSMODOC      pDoc; <br>    BOOL            fTemp; <br> <br> <br>    //1. Register clipboard formats. <br>    pOLE-&gt;cfNative    =RegisterClipboardFormat(rgpsz[IDS_NATIVE]); <br>    pOLE-&gt;cfOwnerLink =RegisterClipboardFormat(rgpsz[IDS_OWNERLINK]); <br>    pOLE-&gt;cfObjectLink=RegisterClipboardFormat(rgpsz[IDS_OBJECTLINK]); <br> <br>    if (0==pOLE-&gt;cfNative || 0==pOLE-&gt;cfOwnerLink || 0==pOLE-&gt;cfObjectLink) <br>        return FALSE; <br> <br> <br>    /* <br>     * 2. Initialize the method tables with functions in OLEVTBL.C <br>     *    and mark the vtbl's as initialized. <br>     */ <br>    fTemp=TRUE; <br>    fTemp&amp;=FOLEVtblInitServer  (hInstance, &amp;pOLE-&gt;vtblSvr); <br>    fTemp&amp;=FOLEVtblInitDocument(hInstance, &amp;pOLE-&gt;vtblDoc); <br>    fTemp&amp;=FOLEVtblInitObject  (hInstance, &amp;pOLE-&gt;vtblObj); <br> <br>    if (!fTemp) <br>        return FALSE;   //Cleanup will follow through FApplicationExit. <br> <br> <br>    /* <br>     * 3. Allocate and initialize the OLESERVER structure, in this <br>     *    application we call it COSMOSERVER.  Uses the server <br>     *    constructor in OLESVR.C. <br>     */ <br> <br>    pSvr=PServerAllocate(&amp;pOLE-&gt;vtblSvr); <br> <br>    if ((LPCOSMOSERVER)NULL==pSvr) <br>        return FALSE; <br> <br>    pOLE-&gt;pSvr=pSvr; <br>    pSvr-&gt;nCmdShow=nCmdShow;        //By default, use what the app was given. <br> <br> <br>    //4. Register the server application with OLESVR.DLL <br>    os=OleRegisterServer(pszClass, (LPOLESERVER)pSvr, &amp;pSvr-&gt;lh, <br>                         hInstance, OLE_SERVER_MULTI); <br> <br>    if (OLE_OK!=os) <br>        { <br>        //ServerRelease will NOT be called so we must free the memory. <br>        LocalFree(pSvr-&gt;hMem); <br>        return FALSE; <br>        } <br> <br> <br> <br>    /* <br>     * 5. Given the pointer to the command-line strings, ppszCmds, <br>     *    check if we have "[/ | -]Embedding" and a possible filename. <br>     * <br>     * NOTE:  We trust whoever called us to find a filename in <br>     *        the command line, ignoring anything that starts with <br>     *        a - or / as an argument. <br>     */ <br> <br>    pszT=*ppszCmds++; <br> <br>    //Assume stand-alone configuration. <br>    pGlob-&gt;fOLE=FALSE; <br>    pSvr-&gt;fEmbed=FALSE; <br>    pSvr-&gt;fLink=FALSE; <br> <br>    if (NULL!=pszT) <br>        { <br>        /* <br>         * If the first parameter has - or / leading, skip that character <br>         * so we can check for "Embedding" <br>         */ <br>        if('-'==*pszT || '/'==*pszT) <br>            pszT++; <br> <br>        //See if we have Embedding at all, in which case we're doing OLE. <br>        pGlob-&gt;fOLE=!lstrcmp(pszT, rgpsz[IDS_EMBEDDING]); <br> <br>        //Change the ShowWindow command appropriately if we're doing OLE. <br>        if (pGlob-&gt;fOLE) <br>            pSvr-&gt;nCmdShow=SW_HIDE; <br> <br> <br>        /* <br>         * Set fLink if there is an additional filename on the <br>         * command-line, and point pszT there if so. <br>         */ <br>        if (NULL!=*ppszCmds) <br>            { <br>            pSvr-&gt;fLink=TRUE; <br>            pszT=*ppszCmds; <br>            } <br>        else <br>            { <br>            pSvr-&gt;fEmbed=TRUE; <br>            pszT=NULL; <br>            } <br> <br>        //pszT is either NULL or points to a filename. <br>        } <br> <br>    /* <br>     * 6.  Allocate an OLESERVERDOC (COSMODOC) and initialize.  LPTR <br>     *     to LocalAlloc initializes everything to NULL. <br>     */ <br>    pDoc=PDocumentAllocate(&amp;pOLE-&gt;vtblDoc); <br> <br>    if ((LPCOSMODOC)NULL==pDoc) <br>        { <br>        //DocRelease will not be called, but ServerRelease will. <br>        LocalFree(pDoc-&gt;hMem); <br>        OleRevokeServer(pSvr-&gt;lh); <br>        return FALSE; <br>        } <br> <br>    pSvr-&gt;pDoc=pDoc; <br> <br> <br>    /* <br>     * 7.  Register documents as necessary.  Remember to register any <br>     *     stand-alone or linked document regardless of what you are <br>     *     doing with OLE.  The only case where you do NOT register is <br>     *     for starting the application as embedded. <br>     * <br>     *     In step 5 we set pszT equal to either NULL (embedding or no <br>     *     file) or to a filename (linking or stand-alone with a file). <br>     *     So we only have to point pszT to "(Untitled)" if it's NULL <br>     *     then call OleRegisterServerDoc. <br>     */ <br> <br>    //Register a document in any case except embedding. <br>    if (!pSvr-&gt;fEmbed) <br>        { <br>        pszT=(NULL==pszT) ? rgpsz[IDS_UNTITLED] : pszT; <br>        os=OleRegisterServerDoc(pSvr-&gt;lh, pszT, (LPOLESERVERDOC)pDoc, &amp;pDoc-&gt;lh); <br> <br>        //Must revoke on any error. <br>        if (OLE_OK!=os) <br>            { <br>            OleRevokeServer(pSvr-&gt;lh); <br>            return FALSE; <br>            } <br>        } <br> <br>    //All done! <br>    return TRUE; <br>    } <br> <br> <br>#endif //MAKEOLESERVER </code></pre>
<p>&nbsp;</p></body>
</HTML>

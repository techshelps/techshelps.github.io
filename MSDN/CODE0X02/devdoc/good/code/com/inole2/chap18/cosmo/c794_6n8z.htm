<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context803"></a>IDATAOBJ.CPP</h2>
<pre><code>/* <br> * IDATAOBJ.CPP <br> * Cosmo Chapter 18 <br> * <br> * Implementation of the IDataObject interface. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cosmo.h" <br> <br> <br>/* <br> * CImpIDataObject::CImpIDataObject <br> * CImpIDataObject::~CImpIDataObject <br> * <br> * Parameters (Constructor): <br> *  pObj            PCFigure of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIDataObject::CImpIDataObject(PCFigure pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIDataObject::~CImpIDataObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryInterface <br> * CImpIDataObject::AddRef <br> * CImpIDataObject::Release <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIDataObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetData <br> * <br> * Purpose: <br> *  Retrieves data described by a specific FormatEtc into a StgMedium <br> *  allocated by this function.  Used like GetClipboardData. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM in which to return the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    UINT            cf=pFE-&gt;cfFormat; <br>    BOOL            fRet=FALSE; <br> <br>    //Another part of us already knows if the format is good. <br>    if (NOERROR!=QueryGetData(pFE)) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    if (CF_METAFILEPICT==cf || CF_BITMAP==cf || m_pObj-&gt;m_cf==cf) <br>        { <br>        if (CF_METAFILEPICT==cf) <br>            { <br>            pSTM-&gt;tymed=TYMED_MFPICT; <br>            } <br>        else <br>            pSTM-&gt;tymed=TYMED_HGLOBAL; <br> <br>        pSTM-&gt;pUnkForRelease=NULL; <br>        pSTM-&gt;hGlobal=m_pObj-&gt;m_pDoc-&gt;RenderFormat(cf); <br>        fRet=(NULL!=pSTM-&gt;hGlobal); <br>        } <br>    else <br>        fRet=m_pObj-&gt;m_pDoc-&gt;RenderMedium(cf, pSTM); <br> <br>    return fRet ? NOERROR : ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetDataHere <br> * <br> * Purpose: <br> *  Renders the specific FormatEtc into caller-allocated medium <br> *  provided in pSTM. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> *  pSTM            LPSTGMEDIUM providing the medium into which <br> *                  wer render the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetDataHere(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    UINT        cf; <br>    LONG        lRet; <br> <br>    /* <br>     * The only reasonable time this is called is for <br>     * CFSTR_EMBEDSOURCE and TYMED_ISTORAGE (and later for <br>     * CFSTR_LINKSOURCE).  This means the same as <br>     * IPersistStorage::Save. <br>     */ <br> <br>    cf=RegisterClipboardFormat(CFSTR_EMBEDSOURCE); <br> <br>    //Aspect is unimportant to us here, as is lindex and ptd. <br>    if (cf==pFE-&gt;cfFormat &amp;&amp; (TYMED_ISTORAGE &amp; pFE-&gt;tymed)) <br>        { <br>        //We have an IStorage we can write into. <br>        pSTM-&gt;tymed=TYMED_ISTORAGE; <br>        pSTM-&gt;pUnkForRelease=NULL; <br>        lRet=m_pObj-&gt;m_pPL-&gt;WriteToStorage(pSTM-&gt;pstg <br>            , VERSIONCURRENT); <br> <br>        if (lRet &gt;= 0) <br>            return NOERROR; <br> <br>        return ResultFromScode(STG_E_WRITEFAULT); <br>        } <br> <br>    return ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::QueryGetData <br> * <br> * Purpose: <br> *  Tests if a call to GetData with this FormatEtc will provide <br> *  any rendering; used like IsClipboardFormatAvailable. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the desired data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::QueryGetData(LPFORMATETC pFE) <br>    { <br>    UINT            cf=pFE-&gt;cfFormat; <br>    UINT            i; <br> <br>    //Check the aspects we support. <br>    if (!(DVASPECT_CONTENT &amp; pFE-&gt;dwAspect)) <br>        return ResultFromScode(S_FALSE); <br> <br>    for (i=0; i &lt; m_pObj-&gt;m_cfeGet; i++) <br>        { <br>        if (pFE-&gt;cfFormat==m_pObj-&gt;m_rgfeGet[i].cfFormat <br>            &amp;&amp; pFE-&gt;tymed &amp; m_pObj-&gt;m_rgfeGet[i].tymed) <br>            { <br>            return NOERROR; <br>            } <br>        } <br> <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::GetCanonicalFormatEtc <br> * <br> * Purpose: <br> *  Provides the caller with an equivalent FormatEtc to the one <br> *  provided when different FormatEtcs will produce exactly the <br> *  same renderings. <br> * <br> * Parameters: <br> *  pFEIn            LPFORMATETC of the first description. <br> *  pFEOut           LPFORMATETC of the equal description. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::GetCanonicalFormatEtc <br>    (LPFORMATETC pFEIn, LPFORMATETC pFEOut) <br>    { <br>    if (NULL==pFEOut) <br>        return ResultFromScode(E_INVALIDARG); <br> <br>    pFEOut-&gt;ptd=NULL; <br>    return ResultFromScode(DATA_S_SAMEFORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::SetData <br> * <br> * Purpose: <br> *  Places data described by a FormatEtc and living in a StgMedium <br> *  into the object.  The object may be responsible to clean up the <br> *  StgMedium before exiting. <br> * <br> * Parameters: <br> *  pFE             LPFORMATETC describing the data to set. <br> *  pSTM            LPSTGMEDIUM containing the data. <br> *  fRelease        BOOL indicating if this function is responsible <br> *                  for freeing the data. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::SetData(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM, BOOL fRelease) <br>    { <br>    LONG            lRet; <br> <br>    /* <br>     * Data can only come from global memory containing a <br>     * POLYLINEDATA structure that we send to the Polyline's <br>     * DataSetMem. <br>     */ <br>    if ((pFE-&gt;cfFormat!=m_pObj-&gt;m_cf) <br>        || !(DVASPECT_CONTENT &amp; pFE-&gt;dwAspect) <br>        || (TYMED_HGLOBAL!=pSTM-&gt;tymed)) <br>        return ResultFromScode(DATA_E_FORMATETC); <br> <br>    lRet=m_pObj-&gt;m_pPL-&gt;DataSetMem(pSTM-&gt;hGlobal, FALSE, TRUE <br>        , TRUE); <br> <br>    if (fRelease) <br>        ReleaseStgMedium(pSTM); <br> <br>    return (POLYLINE_E_NONE==lRet) ? <br>        NOERROR : ResultFromScode(DATA_E_FORMATETC); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::EnumFormatEtc <br> * <br> * Purpose: <br> *  Returns an IEnumFORMATETC object through which the caller can <br> *  iterate to learn about all the data formats this object can <br> *  provide through either GetData[Here] or SetData. <br> * <br> * Parameters: <br> *  dwDir           DWORD describing a data direction, either <br> *                  DATADIR_SET or DATADIR_GET. <br> *  ppEnum          LPENUMFORMATETC * in which to return the <br> *                  pointer to the enumerator. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::EnumFormatEtc(DWORD dwDir <br>    , LPENUMFORMATETC *ppEnum) <br>    { <br>    return ResultFromScode(OLE_S_USEREG); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIDataObject::DAdvise <br> * CImpIDataObject::DUnadvise <br> * CImpIDataObject::EnumDAdvise <br> * <br> * Pass-throughs to IDataAdviseHolder. <br> */ <br> <br>STDMETHODIMP CImpIDataObject::DAdvise(LPFORMATETC pFE, DWORD dwFlags <br>    , LPADVISESINK pIAdviseSink, LPDWORD pdwConn) <br>    { <br>    HRESULT         hr; <br> <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        { <br>        hr=CreateDataAdviseHolder(&amp;m_pObj-&gt;m_pIDataAdviseHolder); <br> <br>        if (FAILED(hr)) <br>            return ResultFromScode(E_OUTOFMEMORY); <br>        } <br> <br>    hr=m_pObj-&gt;m_pIDataAdviseHolder-&gt;Advise(this, pFE <br>        , dwFlags, pIAdviseSink, pdwConn); <br> <br>    return hr; <br>    } <br> <br> <br>STDMETHODIMP CImpIDataObject::DUnadvise(DWORD dwConn) <br>    { <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        return ResultFromScode(E_FAIL); <br> <br>    return m_pObj-&gt;m_pIDataAdviseHolder-&gt;Unadvise(dwConn); <br>    } <br> <br> <br> <br>STDMETHODIMP CImpIDataObject::EnumDAdvise(LPENUMSTATDATA *ppEnum) <br>    { <br>    if (NULL==m_pObj-&gt;m_pIDataAdviseHolder) <br>        return ResultFromScode(E_FAIL); <br> <br>    return m_pObj-&gt;m_pIDataAdviseHolder-&gt;EnumAdvise(ppEnum); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

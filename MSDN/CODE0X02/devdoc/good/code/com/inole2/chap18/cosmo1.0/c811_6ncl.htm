<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEGLOBL.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context825"></a>OLEGLOBL.H</h2>
<pre><code>/* <br> * OLEGLOBL.H <br> * <br> * Definitions an other globals specific to the OLE code. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#ifdef MAKEOLESERVER <br> <br>#ifndef CCHPATHMAX <br>#define CCHPATHMAX          256 <br>#endif <br> <br>#ifndef CCHFILENAME <br>#define CCHFILENAMEMAX      15 <br>#endif <br> <br> <br>typedef LPOLESERVER    FAR *LPLPOLESERVER; <br>typedef LPOLESERVERDOC FAR *LPLPOLESERVERDOC; <br>typedef LPOLEOBJECT    FAR *LPLPOLEOBJECT; <br> <br>typedef LPVOID (WINAPI *LPVOIDPROC) (LPOLEOBJECT, LPSTR); <br> <br> <br>typedef struct <br>    { <br>    LPOLEOBJECTVTBL     pvtbl;          //Standard <br>    BOOL                fRelease;       //Flag to watch if we need to wait <br>    LPOLECLIENT         pClient;        //Necessary for notifications <br>    HLOCAL              hMem;           //Memory handle to this structure <br>    } COSMOOBJECT; <br> <br> <br>typedef COSMOOBJECT FAR *LPCOSMOOBJECT; <br>#define CBCOSMOOBJECT sizeof(COSMOOBJECT) <br> <br> <br>typedef struct <br>    { <br>    LPOLESERVERDOCVTBL  pvtbl;          //Standard <br>    LHSERVERDOC         lh;             //Required by OleRegisterServerDoc <br>    BOOL                fRelease;       //Flag to watch if we need to wait <br>    ATOM                aObject;        //Name of the document's object <br>    ATOM                aClient;        //Name of the connected client <br>    HLOCAL              hMem;           //Memory handle to this structure <br>    LPCOSMOOBJECT       pObj;           //Last object we allocated <br>    } COSMODOC; <br> <br> <br>typedef COSMODOC FAR *LPCOSMODOC; <br>#define CBCOSMODOC sizeof(COSMODOC) <br> <br> <br>typedef struct <br>    { <br>    LPOLESERVERVTBL     pvtbl;          //Standard <br>    LHSERVER            lh;             //Required by OleRegisterServer <br>    BOOL                fRelease;       //Flag to watch if we need to wait <br>    BOOL                fEmbed;         //TRUE if we're embedding only <br>    BOOL                fLink;          //TRUE if we're linking only <br>    UINT                nCmdShow;       //OLE-modified window show command <br>    HWND                hWnd;           //Main application window <br>    HLOCAL              hMem;           //Memory handle to this structure <br>    LPCOSMODOC          pDoc;           //Last document we allocated <br>    } COSMOSERVER; <br> <br>typedef COSMOSERVER FAR *LPCOSMOSERVER; <br>#define CBCOSMOSERVER sizeof(COSMOSERVER) <br> <br> <br>/* <br> * Single data structure holding any OLE-specific global variables. <br> */ <br> <br>typedef struct <br>    { <br>    LPCOSMOSERVER       pSvr; <br> <br>    OLESERVERVTBL       vtblSvr; <br>    OLESERVERDOCVTBL    vtblDoc; <br>    OLEOBJECTVTBL       vtblObj; <br> <br>    UINT                cfNative; <br>    UINT                cfOwnerLink; <br>    UINT                cfObjectLink; <br>    } XOLEGLOBALS; <br> <br>typedef XOLEGLOBALS FAR *LPXOLEGLOBALS; <br>#define CBXOLEGLOBALS sizeof(XOLEGLOBALS) <br> <br> <br>//The single global <br>extern LPXOLEGLOBALS pOLE; <br> <br> <br>/* <br> * STDTARGETDEVICE structure for ObjSetTargetDevice. <br> */ <br> <br> <br>typedef struct <br>    { <br>    //Offsets are pointers into the data field. <br>    UINT    deviceNameOffset;   //szDeviceName <br>    UINT    driverNameOffset;   //szDriverName <br>    UINT    portNameOffset;     //szPortName <br>    UINT    extDevModeOffset;   //DEVMODE structure <br>    UINT    extDevModeSize;     //Size of the DEVMOCE struct, for versioning. <br>    UINT    environmentOffset;  //Current MS-DOS environment, in a string <br>    UINT    environmentSize;    //Length of environment string. <br>    BYTE    data[]; <br>    } STDTARGETDEVICE; <br> <br>typedef STDTARGETDEVICE FAR * LPSTDTARGETDEVICE; <br>#define CBSTDTARGETDEVICE sizeof(STDTARGETDEVICE) <br> <br> <br> <br> <br> <br> <br>/* <br> * Function prototypes for OLE-Specific functions. <br> */ <br> <br> <br> <br>//OLECLIP.C <br>BOOL      WINAPI FOLECopyNative(LPXOLEGLOBALS); <br>BOOL      WINAPI FOLECopyLink(LPXOLEGLOBALS, BOOL, LPSTR); <br>HGLOBAL   WINAPI HLinkConstruct(LPSTR, LPSTR, LPSTR); <br> <br> <br>//OLEDOC.C <br>LPCOSMODOC  WINAPI PDocumentAllocate(LPOLESERVERDOCVTBL);   //Helper <br>void        WINAPI DocumentClean(LPCOSMODOC);               //Helper <br> <br>OLESTATUS WINAPI DocClose(LPCOSMODOC); <br>OLESTATUS WINAPI DocGetObject(LPCOSMODOC, OLE_LPCSTR, LPLPOLEOBJECT, LPOLECLIENT); <br>OLESTATUS WINAPI DocExecute(LPCOSMODOC, HGLOBAL); <br>OLESTATUS WINAPI DocRelease(LPCOSMODOC); <br>OLESTATUS WINAPI DocSave(LPCOSMODOC); <br>OLESTATUS WINAPI DocSetColorScheme(LPCOSMODOC, OLE_CONST LOGPALETTE FAR *); <br>OLESTATUS WINAPI DocSetDocDimensions(LPCOSMODOC, OLE_CONST RECT FAR *); <br>OLESTATUS WINAPI DocSetHostNames(LPCOSMODOC, OLE_LPCSTR, OLE_LPCSTR); <br> <br> <br>//OLEEXIT.C <br>BOOL WINAPI FOLEExit(LPXOLEGLOBALS); <br> <br> <br>//OLEFILE.C <br>LPCOSMODOC WINAPI PDocRevokeAndCreate(LPXOLEGLOBALS); <br> <br> <br>//OLEINIT.C <br>BOOL      WINAPI FOLEInstanceInit(LPXOLEGLOBALS, HINSTANCE, LPSTR, LPSTR FAR *, UINT); <br> <br> <br>//OLEMISC.C <br>void      WINAPI MenuEmbeddingSet(HWND, LPSTR, BOOL); <br>void      WINAPI OLEClientNotify(LPCOSMOOBJECT, UINT); <br>BOOL      WINAPI FOLEReleaseWait(BOOL FAR *, LONG); <br> <br> <br> <br>//OLEOBJ.C <br>LPCOSMOOBJECT WINAPI PObjectAllocate(LPOLEOBJECTVTBL); <br> <br>LPVOID        WINAPI ObjQueryProtocol(LPCOSMOOBJECT, OLE_LPCSTR); <br>OLESTATUS     WINAPI ObjRelease(LPCOSMOOBJECT); <br>OLESTATUS     WINAPI ObjShow(LPCOSMOOBJECT, BOOL); <br>OLESTATUS     WINAPI ObjDoVerb(LPCOSMOOBJECT, UINT, BOOL, BOOL); <br>OLESTATUS     WINAPI ObjGetData(LPCOSMOOBJECT, OLECLIPFORMAT, HGLOBAL FAR *); <br>OLESTATUS     WINAPI ObjSetData(LPCOSMOOBJECT, OLECLIPFORMAT, HGLOBAL); <br>OLESTATUS     WINAPI ObjSetTargetDevice(LPCOSMOOBJECT, HGLOBAL); <br>OLESTATUS     WINAPI ObjSetBounds(LPCOSMOOBJECT, OLE_CONST RECT FAR *); <br>OLECLIPFORMAT WINAPI ObjEnumFormats(LPCOSMOOBJECT, OLECLIPFORMAT); <br>OLESTATUS     WINAPI ObjSetColorScheme(LPCOSMOOBJECT, OLE_CONST LOGPALETTE FAR *); <br> <br> <br>//OLESVR.C <br>LPCOSMOSERVER WINAPI PServerAllocate(LPOLESERVERVTBL); <br> <br>OLESTATUS WINAPI ServerCreate(LPCOSMOSERVER, LHSERVERDOC, OLE_LPCSTR, OLE_LPCSTR, LPLPOLESERVERDOC); <br>OLESTATUS WINAPI ServerCreateFromTemplate(LPCOSMOSERVER, LHSERVERDOC, OLE_LPCSTR, OLE_LPCSTR, OLE_LPCSTR, LPLPOLESERVERDOC); <br>OLESTATUS WINAPI ServerEdit(LPCOSMOSERVER, LHSERVERDOC, OLE_LPCSTR, OLE_LPCSTR, LPLPOLESERVERDOC); <br>OLESTATUS WINAPI ServerExecute(LPCOSMOSERVER, HGLOBAL); <br>OLESTATUS WINAPI ServerExit(LPCOSMOSERVER); <br>OLESTATUS WINAPI ServerOpen(LPCOSMOSERVER, LHSERVERDOC, OLE_LPCSTR, LPLPOLESERVERDOC); <br>OLESTATUS WINAPI ServerRelease(LPCOSMOSERVER); <br> <br> <br>//OLEVTBL.C <br>BOOL      WINAPI FOLEVtblInitServer(HINSTANCE,   LPOLESERVERVTBL); <br>BOOL      WINAPI FOLEVtblInitDocument(HINSTANCE, LPOLESERVERDOCVTBL); <br>BOOL      WINAPI FOLEVtblInitObject(HINSTANCE,   LPOLEOBJECTVTBL); <br> <br>void      WINAPI OLEVtblFreeServer(LPOLESERVERVTBL); <br>void      WINAPI OLEVtblFreeDocument(LPOLESERVERDOCVTBL); <br>void      WINAPI OLEVtblFreeObject(LPOLEOBJECTVTBL); <br> <br> <br>#endif //MAKEOLESERVER </code></pre>
<p>&nbsp;</p></body>
</HTML>

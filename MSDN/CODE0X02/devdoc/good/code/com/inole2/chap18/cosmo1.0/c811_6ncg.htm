<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLECLIP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context820"></a>OLECLIP.C</h2>
<pre><code>/* <br> * OLECLIP.C <br> * <br> * Routines to handle placing Native, ObjectLink, and OwnerLink <br> * information on the clipboard. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br> <br>#ifdef MAKEOLESERVER <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole.h&gt; <br>#include "cosmo.h" <br>#include "oleglobl.h" <br> <br> <br> <br>/* <br> * FOLECopyNative <br> * <br> * Purpose: <br> *  Allocates a memory block for Native data and places it on the clipboard, <br> *  assuming that the application has opened the clipboard. <br> * <br> * Parameters: <br> *  pOLE            LPXOLEGLOBALS containing clipboard formats. <br> * <br> * Return Value: <br> *  BOOL            TRUE if the data was copied, FALSE otherwise. <br> */ <br> <br>BOOL WINAPI FOLECopyNative(LPXOLEGLOBALS pOLE) <br>    { <br>    HGLOBAL      hMem; <br> <br>    hMem=HGetPolyline(pGlob-&gt;hWndPolyline); <br> <br>    //Place Native data on clipboard. <br>    if (NULL==hMem) <br>        return FALSE; <br> <br>    SetClipboardData(pOLE-&gt;cfNative, hMem); <br>    return TRUE; <br>    } <br> <br> <br> <br> <br>/* <br> * FOLECopyLink <br> * <br> * Purpose: <br> *  Places ObjectLink OR OwnerLink information on the clipboard. <br> *  This function assumes that the application already has the <br> *  clipboard open. <br> * <br> * Parameters: <br> *  pOLE            LPXOLEGLOBALS containing clipboard formats. <br> *  fOwnerLink      BOOL indicating to set OwnerLink (TRUE)/ObjectLink (FALSE) <br> *  pszDoc          LPSTR to the document name. <br> * <br> * Return Value: <br> *  BOOL            TRUE if copying to the clipboard was successful. <br> *                  FALSE on any failure. <br> */ <br> <br>BOOL WINAPI FOLECopyLink(LPXOLEGLOBALS pOLE, BOOL fOwnerLink, LPSTR pszDoc) <br>    { <br>    HGLOBAL         hMem; <br>    OLECLIPFORMAT   cf; <br> <br>    //Retrieve a handle to the OwnerLink/ObjectLink format. <br>    hMem=HLinkConstruct(rgpsz[IDS_CLASSCOSMO], pszDoc, rgpsz[IDS_FIGURE]); <br> <br>    if (NULL==hMem) <br>        return FALSE; <br> <br>    //Set one or the other format. <br>    cf=(fOwnerLink) ? (pOLE-&gt;cfOwnerLink) : (pOLE-&gt;cfObjectLink); <br>    hMem=SetClipboardData(cf, hMem); <br> <br>    return (NULL!=hMem); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * HLinkConstruct <br> * <br> * Purpose: <br> *  Builds an ObjectLink and OwnerLink text string for OLE clipboard <br> *  interaction in the format of "classname\0document\0object\0\0" <br> * <br> * Parameters: <br> *  pszClass        LPSTR to the classname. <br> *  pszDoc          LPSTR to the document name. <br> *  pszObj          LPSTR to the object name. <br> * <br> * Return Value: <br> *  HGLOBAL         Global memory handle to an block containing <br> *                  the three strings with the appropriate separator. <br> */ <br> <br>HGLOBAL WINAPI HLinkConstruct(LPSTR pszClass, LPSTR pszDoc, LPSTR pszObj) <br>    { <br>    HGLOBAL     hMem; <br>    UINT        cch1, cch2, cch3; <br>    LPSTR       psz; <br> <br>    if (NULL==pszClass || NULL==pszDoc || NULL==pszObj) <br>        return NULL; <br> <br>    //We'll need lengths later. <br>    cch1=lstrlen(pszClass); <br>    cch2=lstrlen(pszDoc); <br>    cch3=lstrlen(pszObj); <br> <br>    //Extra 4 is for the null-terminators. <br>    hMem=GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE, (DWORD)(4+cch1+cch2+cch3)); <br> <br>    if (NULL==hMem) <br>        return NULL; <br> <br>    psz=GlobalLock(hMem); <br> <br>    lstrcpy(psz, pszClass); <br>    psz+=cch1+1; <br> <br>    lstrcpy(psz, pszDoc); <br>    psz+=cch2+1; <br> <br>    lstrcpy(psz, pszObj); <br>    *(psz+cch3+1)=0;        //Add the final null terminator. <br> <br>    GlobalUnlock(hMem); <br>    return hMem; <br>    } <br> <br> <br> <br> <br>#endif //MAKEOLESERVER </code></pre>
<p>&nbsp;</p></body>
</HTML>

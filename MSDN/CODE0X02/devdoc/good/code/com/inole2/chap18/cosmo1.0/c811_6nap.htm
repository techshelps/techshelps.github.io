<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context811"></a>CLIP.C</h2>
<pre><code>/* <br> * CLIP.C <br> * <br> * Functions to interact with the clipboard. <br> * <br> * Copyright(c) Microsoft Corp. 1992-1994 All Rights Reserved <br> * Win32 version, January 1994 <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ole.h&gt; <br>#include "cosmo.h" <br>#include "oleglobl.h" <br> <br> <br> <br>/* <br> * FEditCut <br> * <br> * Purpose: <br> *  Places a private format, a metafile, and a bitmap of the display <br> *  on the clipboard and clears the editor window with the equivalent <br> *  to complete the "Cut" operation.  This operation also sets the <br> *  dirty flag through a call to FDirtySet. <br> * <br> * Parameters: <br> *  pGlob           LPGLOBALS to the global variable block. <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> * <br> */ <br> <br>BOOL WINAPI FEditCut(LPGLOBALS pGlob) <br>    { <br>    //Copy editor contents to the clipboard. <br>    if (!FEditCopy(pGlob, TRUE)) <br>        return FALSE; <br> <br>    //Clear out the editor contents. <br>    SendMessage(pGlob-&gt;hWndPolyline, PLM_POLYLINENEW, 0, 0L); <br>    FDirtySet(TRUE); <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * FEditCopy <br> * <br> * Purpose: <br> *  Places a private format, a metafile, and a bitmap of the display <br> *  on the clipboard. <br> * <br> * <br> * Parameters: <br> *  pGlob           LPGLOBALS to the global variable block. <br> *  fCut            BOOL indicating if this copy is part of a Cut. <br> * <br> * Return Value: <br> *  BOOL            TRUE if anything was successfully placed on the <br> *                  clipboard, FALSE otherwise. <br> * <br> */ <br> <br>BOOL WINAPI FEditCopy(LPGLOBALS pGlob, BOOL fCut) <br>    { <br>    BOOL            fRet=TRUE; <br>    HGLOBAL         hMem; <br> <br>    //Attempt to gain clipboard ownership. <br>    if (!OpenClipboard(pGlob-&gt;hWnd)) <br>        return FALSE; <br> <br>    //Clean out whatever junk is in the clipboard. <br>    EmptyClipboard(); <br> <br>    //Copy private data first. <br>    hMem=HGetPolyline(pGlob-&gt;hWndPolyline); <br> <br>    //Copy private data (not "Native") we used prior to OLE. <br>    if (NULL!=hMem) <br>        SetClipboardData(pGlob-&gt;cfCosmo, hMem); <br>    else <br>        fRet &amp;=FALSE; <br> <br>#ifdef MAKEOLESERVER <br> <br>    //Copy Native data. <br>    fRet &amp;=FOLECopyNative(pOLE); <br> <br>    //Copy "OwnerLink" data. <br>    fRet &amp;=FOLECopyLink(pOLE, TRUE, pGlob-&gt;szFile); <br> <br>#endif //MAKEOLESERVER <br> <br>    //Send the METAFILEPICT to the clipboard if we have one. <br>    hMem=HGetMetafilePict(pGlob-&gt;hWndPolyline); <br> <br>    if (NULL!=hMem) <br>        SetClipboardData(CF_METAFILEPICT, hMem); <br>    else <br>        fRet &amp;=FALSE; <br> <br>    //Send the bitmap to the clipboard if we can get one. <br>    hMem=HGetBitmap(pGlob-&gt;hWndPolyline); <br> <br>    if (NULL!=hMem) <br>        SetClipboardData(CF_BITMAP, hMem); <br>    else <br>        fRet &amp;=FALSE; <br> <br>#ifdef MAKEOLESERVER <br> <br>    //Copy "ObjectLink" data if we have a filename AND are not cutting. <br>    if (pGlob-&gt;fOpenFile &amp;&amp; 0!=pGlob-&gt;szFile[0] &amp;&amp; !fCut) <br>        { <br>        fRet &amp;=FOLECopyLink(pOLE, FALSE, pGlob-&gt;szFile); <br>        } <br> <br>#endif //MAKEOLESERVER <br> <br>    //Free clipboard ownership. <br>    CloseClipboard(); <br>    return fRet; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * FEditPaste <br> * <br> * Purpose: <br> *  Retrieves the private data format from the clipboard and sets it <br> *  to the current figure in the editor window. <br> * <br> *  Note that if this function is called, then the clipboard format <br> *  is available because the Paste menu item is only enabled if the <br> *  format is present. <br> * <br> * Parameters: <br> *  pGlob           LPGLOBALS to the global variable block. <br> * <br> * Return Value: <br> *  BOOL            TRUE if successful, FALSE otherwise. <br> * <br> */ <br> <br>BOOL WINAPI FEditPaste(LPGLOBALS pGlob) <br>    { <br>    HGLOBAL         hMem; <br>    LPPOLYLINE      lppl; <br> <br>    //Attempt to gain clipboard ownership. <br>    if (!OpenClipboard(pGlob-&gt;hWnd)) <br>        return FALSE; <br> <br>    hMem=GetClipboardData(pGlob-&gt;cfCosmo); <br> <br>    if (NULL==hMem) <br>        { <br>        CloseClipboard(); <br>        return FALSE; <br>        } <br> <br>    lppl=(LPPOLYLINE)GlobalLock(hMem); <br> <br>    //TRUE in wParam to cause PLN_SIZECHANGE notification <br>    SendMessage(pGlob-&gt;hWndPolyline, PLM_POLYLINESET, TRUE, (LONG)lppl); <br>    GlobalUnlock(hMem); <br> <br>    FDirtySet(TRUE); <br>    CloseClipboard(); <br>    return TRUE; <br>    } <br> <br> <br> <br>/* <br> * HGetPolyline <br> * <br> * Purpose: <br> *  Allocates global memory and copies the current Polyline into it. <br> * <br> * Parameters: <br> *  hWnd            HWND of the PolyLine window whose data we want. <br> * <br> * Return Value: <br> *  HGLOBAL         Global handle if successful, NULL otherwise. <br> */ <br> <br>HGLOBAL WINAPI HGetPolyline(HWND hWnd) <br>    { <br>    LPPOLYLINE  lppl; <br>    HGLOBAL     hMem; <br> <br>    //Allocate a copy of the POLYLINE structure and set it as private data. <br>    hMem=GlobalAlloc(GMEM_DDESHARE | GMEM_MOVEABLE, CBPOLYLINE); <br> <br>    if (NULL!=hMem) <br>        { <br>        lppl=(LPPOLYLINE)GlobalLock(hMem); <br>        SendMessage(hWnd, PLM_POLYLINEGET, 0, (LONG)lppl); <br>        GlobalUnlock(hMem); <br>        } <br> <br>    return hMem; <br>    } <br> <br> <br> <br>/* <br> * HGetMetafilePict <br> * <br> * Purpose: <br> *  Retrieves a metafile for the current polyline image. <br> * <br> * Parameters: <br> *  hWnd            HWND of the PolyLine window whose image we want. <br> * <br> * Return Value: <br> *  HGLOBAL         Global handle to a METAFILEPICT structure if <br> *                  successful, NULL otherwise. <br> */ <br> <br>HGLOBAL WINAPI HGetMetafilePict(HWND hWnd) <br>    { <br>    HGLOBAL     hMem; <br>    DWORD       dw; <br> <br>    //Retrieve a METAFILEPICT structure for this object. <br>    dw=SendMessage(hWnd, PLM_METAFILEPICTGET, 0, 0L); <br>    hMem=(HGLOBAL)(UINT)dw; <br> <br>    return hMem; <br>    } <br> <br> <br> <br> <br>/* <br> * HGetBitmap <br> * <br> * Purpose: <br> *  Retrieves a device-dependent bitmap for the current polyline image. <br> * <br> * Parameters: <br> *  hWnd            HWND of the PolyLine window whose image we want. <br> * <br> * Return Value: <br> *  HGLOBAL         Bitmap handle if successful, NULL otherwise. <br> */ <br> <br>HGLOBAL WINAPI HGetBitmap(HWND hWnd) <br>    { <br>    HGLOBAL     hMem; <br>    DWORD       dw; <br> <br>    dw=SendMessage(hWnd, PLM_BITMAPGET, 0, 0L); <br>    hMem=(HGLOBAL)(UINT)dw; <br> <br>    return hMem; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

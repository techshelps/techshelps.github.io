<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPERSTOR.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context841"></a>IPERSTOR.CPP</h2>
<pre><code>/* <br> * IPERSTOR.CPP <br> * Cosmo Handler Chapter 19 <br> * <br> * Implementation of the IPersistStorage interface that we expose on <br> * the Figure object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "hcosmo.h" <br> <br> <br>/* <br> * CImpIPersistStorage:CImpIPersistStorage <br> * CImpIPersistStorage::~CImpIPersistStorage <br> * <br> * Constructor Parameters: <br> *  pObj            PCFigure pointing to the object we live in. <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> */ <br> <br>CImpIPersistStorage::CImpIPersistStorage(PCFigure pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    m_psState=PSSTATE_UNINIT; <br> <br>    m_fConvert=FALSE; <br>    return; <br>    } <br> <br> <br>CImpIPersistStorage::~CImpIPersistStorage(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::QueryInterface <br> * CImpIPersistStorage::AddRef <br> * CImpIPersistStorage::Release <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStorage::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersistStorage::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::GetClassID <br> * <br> * Purpose: <br> *  Returns the CLSID of the object represented by this interface. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::GetClassID(LPCLSID pClsID) <br>    { <br>    if (PSSTATE_UNINIT==m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    *pClsID=m_pObj-&gt;m_clsID; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::IsDirty <br> * <br> * Purpose: <br> *  Tells the caller if we have made changes to this object since <br> *  it was loaded or initialized new. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::IsDirty(void) <br>    { <br>    if (PSSTATE_UNINIT==m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    /* <br>     * Since we don't edit, we have no idea if this data is dirty. <br>     * Delegate to the default handler in case it wants to ask the <br>     * server. <br>     */ <br>    return m_pObj-&gt;m_pDefIPersistStorage-&gt;IsDirty(); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::InitNew <br> * <br> * Purpose: <br> *  Provides the object with the IStorage they hold on to while <br> *  they are running.  Since we don't create data in the handler, <br> *  there it nothing to write here.  We only need to initialize <br> *  out internal state.  This function is only be called once in <br> *  the object's lifetime in lieu of Load. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::InitNew(LPSTORAGE pIStorage) <br>    { <br>    if (PSSTATE_UNINIT!=m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    if (NULL==pIStorage) <br>        return ResultFromScode(E_POINTER); <br> <br>    //Good time to initilize our data <br>    m_pObj-&gt;m_pl.wVerMaj=VERSIONMAJOR; <br>    m_pObj-&gt;m_pl.wVerMin=VERSIONMINOR; <br>    m_pObj-&gt;m_pl.cPoints=0; <br>    m_pObj-&gt;m_pl.rgbBackground=GetSysColor(COLOR_WINDOW); <br>    m_pObj-&gt;m_pl.rgbLine=GetSysColor(COLOR_WINDOWTEXT); <br>    m_pObj-&gt;m_pl.iLineStyle=PS_SOLID; <br> <br>    //Make sure these aren't filled with trash. <br>    memcpy(&amp;m_pObj-&gt;m_plContent,   &amp;m_pObj-&gt;m_pl, CBPOLYLINEDATA); <br>    memcpy(&amp;m_pObj-&gt;m_plThumbnail, &amp;m_pObj-&gt;m_pl, CBPOLYLINEDATA); <br> <br>    m_pObj-&gt;m_pDefIPersistStorage-&gt;InitNew(pIStorage); <br> <br>    /* <br>     * This is just for state validation in other calls.  As <br>     * a handler we never actually 'scribble.' <br>     */ <br>    m_psState=PSSTATE_SCRIBBLE; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::Load <br> * <br> * Purpose: <br> *  Instructs the object to load itself from a previously saved <br> *  IStorage that was handled by Save in another object lifetime. <br> *  This function will only be called once in the object's lifetime <br> *  in lieu of InitNew. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::Load(LPSTORAGE pIStorage) <br>    { <br>    POLYLINEDATA    pl; <br>    ULONG           cb; <br>    LPSTREAM        pIStream; <br>    HRESULT         hr; <br> <br>    if (PSSTATE_UNINIT!=m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    if (NULL==pIStorage) <br>        return ResultFromScode(E_POINTER); <br> <br>    //This tells us if we're coming from another class storage. <br>    m_fConvert=(NOERROR==GetConvertStg(pIStorage)); <br> <br>    //This is the type of storage we're really messing with in Treat As <br>    ReadClassStg(pIStorage, &amp;m_pObj-&gt;m_clsID); <br> <br>    //Open the CONTENTS stream <br>    hr=pIStorage-&gt;OpenStream(SZSTREAM, 0, STGM_DIRECT | STGM_READ <br>        | STGM_SHARE_EXCLUSIVE, 0, &amp;pIStream); <br> <br>    if (FAILED(hr)) <br>        return ResultFromScode(STG_E_READFAULT); <br> <br>    //Read all the data into the POLYLINEDATA structure. <br>    hr=pIStream-&gt;Read(&amp;pl, CBPOLYLINEDATA, &amp;cb); <br>    pIStream-&gt;Release(); <br> <br>    if (CBPOLYLINEDATA!=cb) <br>        return ResultFromScode(STG_E_READFAULT); <br> <br>    //Copy into the actual object now. <br>    memcpy(&amp;m_pObj-&gt;m_pl, &amp;pl, CBPOLYLINEDATA); <br> <br>    m_pObj-&gt;m_pDefIPersistStorage-&gt;Load(pIStorage); <br> <br>    //As with InitNew, this is just for validating other calls <br>    m_psState=PSSTATE_SCRIBBLE; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::Save <br> * <br> * Purpose: <br> *  Saves the data for this object to an IStorage. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::Save(LPSTORAGE pIStorage <br>    , BOOL fSameAsLoad) <br>    { <br>    ULONG           cb; <br>    HRESULT         hr; <br>    LPSTREAM        pIStream; <br> <br>    //Have to come here from scribble state. <br>    if (PSSTATE_SCRIBBLE!=m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    //Must have an IStorage if we're not in SameAsLoad <br>    if (NULL==pIStorage &amp;&amp; !fSameAsLoad) <br>        return ResultFromScode(E_POINTER); <br> <br>    /* <br>     * If the server is running, don't do the save ourselves since <br>     * we'd end up writing the storage twice with possible conflicts. <br>     */ <br>    if (OleIsRunning(m_pObj-&gt;m_pDefIOleObject)) <br>        { <br>        hr=m_pObj-&gt;m_pDefIPersistStorage-&gt;Save(pIStorage <br>            , fSameAsLoad); <br> <br>        if (SUCCEEDED(hr)) <br>            m_psState=PSSTATE_ZOMBIE; <br> <br>        return hr; <br>        } <br> <br>    /* <br>     * Since we don't have any data we modify in the handler, <br>     * we have nothing to do for same-as-load cases.  The only <br>     * case we have to handle is writing to a new storage. <br>     */ <br>    if (!fSameAsLoad) <br>        { <br>        /* <br>         * This code facilitates making copies of an object into <br>         * a new storage during a container Save As. <br>         */ <br> <br>        hr=pIStorage-&gt;CreateStream(SZSTREAM, STGM_DIRECT | STGM_CREATE <br>            | STGM_WRITE | STGM_SHARE_EXCLUSIVE, 0, 0, &amp;pIStream); <br> <br>        if (FAILED(hr)) <br>            return hr; <br> <br>        WriteClassStg(pIStorage, CLSID_CosmoFigure); <br>        WriteFmtUserTypeStg(pIStorage, m_pObj-&gt;m_cf <br>            , TEXT("Polyline Figure")); <br> <br>        hr=pIStream-&gt;Write(&amp;m_pObj-&gt;m_pl, CBPOLYLINEDATA, &amp;cb); <br>        pIStream-&gt;Release(); <br> <br>        if (FAILED(hr) || CBPOLYLINEDATA!=cb) <br>            return ResultFromScode(STG_E_WRITEFAULT); <br>        } <br> <br>    //Clear the convert bit if it was set <br>    if (m_fConvert) <br>        { <br>        WriteFmtUserTypeStg(pIStorage, m_pObj-&gt;m_cf <br>            , TEXT("Polyline Figure")); <br> <br>        SetConvertStg(pIStorage, FALSE); <br>        m_fConvert=FALSE; <br>        } <br> <br>    m_psState=PSSTATE_ZOMBIE; <br>    m_pObj-&gt;m_pDefIPersistStorage-&gt;Save(pIStorage, fSameAsLoad); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIPersistStorage::SaveCompleted <br> * CImpIPersistStorage::HandsOffStorage <br> * <br> * Purpose: <br> *  Pass throughs with typical management of our pointers. <br> */ <br> <br>STDMETHODIMP CImpIPersistStorage::SaveCompleted(LPSTORAGE pIStorage) <br>    { <br>    //Must be called in no-scribble or hands-off state <br>    if (!(PSSTATE_ZOMBIE==m_psState || PSSTATE_HANDSOFF==m_psState)) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    //If we're coming from Hands-Off, we'd better get a storage <br>    if (NULL==pIStorage &amp;&amp; PSSTATE_HANDSOFF==m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    /* <br>     * Since this handler modifies nothing, it saves no pointers <br>     * which it would have to release here.  Nothing to do. <br>     */ <br> <br>    m_pObj-&gt;m_pDefIPersistStorage-&gt;SaveCompleted(pIStorage); <br>    m_psState=PSSTATE_SCRIBBLE; <br>    return NOERROR; <br>    } <br> <br> <br>STDMETHODIMP CImpIPersistStorage::HandsOffStorage(void) <br>    { <br>    if (PSSTATE_UNINIT==m_psState || PSSTATE_HANDSOFF==m_psState) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    /* <br>     * Since this handler modifies nothing, it saves no pointers <br>     * which it would have to release here.  Nothing to do. <br>     */ <br> <br>    m_pObj-&gt;m_pDefIPersistStorage-&gt;HandsOffStorage(); <br>    m_psState=PSSTATE_HANDSOFF; <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADVSINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context839"></a>IADVSINK.CPP</h2>
<pre><code>/* <br> * IADVSINK.CPP <br> * Cosmo Handler Chapter 19 <br> * <br> * Implementation of the IAdviseSink interface for the Cosmo Handler <br> * such that it is notified when data is modified in the server. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "hcosmo.h" <br> <br> <br>/* <br> * CImpIAdviseSink::CImpIAdviseSink <br> * CImpIAdviseSink::~CImpIAdviseSink <br> * <br> * Parameters (Constructor): <br> *  pObj            PCFigure of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIAdviseSink::CImpIAdviseSink(PCFigure pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIAdviseSink::~CImpIAdviseSink(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::QueryInterface <br> * CImpIAdviseSink::AddRef <br> * CImpIAdviseSink::Release <br> */ <br> <br>STDMETHODIMP CImpIAdviseSink::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    /* <br>     * Conceptually, and from the view of the container and the <br>     * local server, the IAdviseSink interface is implemented <br>     * on a different object than the rest of the handler's <br>     * interfaces.  For that reason, this QueryInterface only <br>     * exposes IUnknown and IAdviseSink.  That makes it appear <br>     * as a separate object although it doesn't have to be an <br>     * explicitly separate object inside this handler (no one <br>     * outside the handler cares about our implementation).  Note <br>     * that reference counting still affects the entire object. <br>     */ <br>    if (IID_IUnknown==riid || IID_IAdviseSink==riid) <br>        { <br>        *ppv=this; <br>        AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIAdviseSink::Release(void) <br>    { <br>    return --m_cRef; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnViewChange <br> * <br> * Purpose: <br> *  We don't do anything here because we generate OnViewChange for <br> *  the container inside OnDataChange.  The problem is that <br> *  OnViewChange will come before OnDataChange, so if we called the <br> *  container's OnViewChange here it would turn around and call our <br> *  IViewObject::Draw which would draw with outdated data. Therefore <br> *  we ignore this notification and wait for OnDataChange, since <br> *  that implies a view change as well.  Then we can retrieve the <br> *  new data first, then send OnViewChange to the container such <br> *  that we'll repaint with the new data. <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnViewChange(DWORD dwAspect <br>    , LONG lindex) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIAdviseSink::OnDataChange <br> * <br> * Purpose: <br> *  Tells us that things changed in the server.  We asked for data <br> *  on the advise so we can copy it from here into our own structure <br> *  such that on the next OnViewChange we can repaint with it. <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnDataChange(LPFORMATETC pFE <br>    , LPSTGMEDIUM pSTM) <br>    { <br>    //Get the new data first, then notify the container to repaint. <br>    if ((pFE-&gt;cfFormat==m_pObj-&gt;m_cf) <br>        &amp;&amp; (TYMED_HGLOBAL &amp; pSTM-&gt;tymed)) <br>        { <br>        PPOLYLINEDATA      ppl; <br> <br>        ppl=(PPOLYLINEDATA)GlobalLock(pSTM-&gt;hGlobal); <br>        memcpy(&amp;m_pObj-&gt;m_pl, ppl, CBPOLYLINEDATA); <br>        GlobalUnlock(pSTM-&gt;hGlobal); <br> <br>        /* <br>         * Now tell the container that the view changed, but only <br>         * if the view is not frozen.' <br>         */ <br>        if (pFE-&gt;dwAspect &amp; m_pObj-&gt;m_dwAdviseAspects <br>            &amp;&amp; !(pFE-&gt;dwAspect &amp; m_pObj-&gt;m_dwFrozenAspects)) <br>            { <br>            //Pass this on to the container. <br>            if (NULL!=m_pObj-&gt;m_pIAdvSinkView) <br>                { <br>                m_pObj-&gt;m_pIAdvSinkView-&gt;OnViewChange(pFE-&gt;dwAspect <br>                    , pFE-&gt;lindex); <br>                } <br>            } <br>        } <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * All others are uninteresting because if the container wants these <br> * it will have called IOleObject::Advise which we passed on through <br> * to the default handler.  IViewObject::SetAdvise is the only one <br> * we override. <br> */ <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnRename(LPMONIKER pmk) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnSave(void) <br>    { <br>    return; <br>    } <br> <br>STDMETHODIMP_(void) CImpIAdviseSink::OnClose(void) <br>    { <br>    return; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

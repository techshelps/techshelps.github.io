<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IVIEWOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context842"></a>IVIEWOBJ.CPP</h2>
<pre><code>/* <br> * IVIEWOBJ.CPP <br> * Cosmo Handler Chapter 19 <br> * <br> * Implementation of the IViewObject2 interface for Cosmo Handler. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "hcosmo.h" <br> <br> <br>/* <br> * CImpIViewObject2::CImpIViewObject2 <br> * CImpIViewObject2::~CImpIViewObject2 <br> * <br> * Parameters (Constructor): <br> *  pObj            PCFigure of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIViewObject2::CImpIViewObject2(PCFigure pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIViewObject2::~CImpIViewObject2(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::QueryInterface <br> * CImpIViewObject2::AddRef <br> * CImpIViewObject2::Release <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIViewObject2::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIViewObject2::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIViewObject2::Draw <br> * <br> * Purpose: <br> *  Draws the object on the given hDC specifically for the requested <br> *  aspect, device, and within the appropriate bounds. <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect to draw. <br> *  lindex          LONG index of the piece to draw. <br> *  pvAspect        LPVOID for extra information, always NULL. <br> *  ptd             DVTARGETDEVICE * containing device <br> *                  information. <br> *  hICDev          HDC containing the IC for the device. <br> *  hDC             HDC on which to draw. <br> *  pRectBounds     LPCRECTL describing the rectangle in which to <br> *                  draw. <br> *  pRectWBounds    LPCRECTL describing the placement rectangle if <br> *                  part of what you draw is another metafile. <br> *  pfnContinue     Function to call periodically during long <br> *                  repaints. <br> *  dwContinue      DWORD extra information for pfnContinue. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Draw(DWORD dwAspect, LONG lindex <br>    , void *pvAspect, DVTARGETDEVICE *ptd, HDC hICDev <br>    , HDC hDC, LPCRECTL pRectBounds, LPCRECTL pRectWBounds <br>    , BOOL (CALLBACK *pfnContinue) (DWORD), DWORD dwContinue) <br>    { <br>    RECT            rc; <br>    POLYLINEDATA    pl; <br>    PPOLYLINEDATA   ppl=&amp;m_pObj-&gt;m_pl; <br> <br>    RECTFROMRECTL(rc, *pRectBounds); <br> <br>    //Delegate iconic and printed representations. <br>    if (!((DVASPECT_CONTENT | DVASPECT_THUMBNAIL) &amp; dwAspect)) <br>        { <br>        return m_pObj-&gt;m_pDefIViewObject2-&gt;Draw(dwAspect, lindex <br>            , pvAspect, ptd, hICDev, hDC, pRectBounds, pRectWBounds <br>            , pfnContinue, dwContinue); <br>        } <br> <br> <br>    /* <br>     * If we're asked to draw a frozen aspect, use the data from <br>     * a copy we made in IViewObject2::Freeze.  Otherwise use the <br>     * current data. <br>     */ <br>    if (dwAspect &amp; m_pObj-&gt;m_dwFrozenAspects) <br>        { <br>        //Point to the data to actually use. <br>        if (DVASPECT_CONTENT==dwAspect) <br>            ppl=&amp;m_pObj-&gt;m_plContent; <br>        else <br>            ppl=&amp;m_pObj-&gt;m_plThumbnail; <br>        } <br> <br> <br>    //Make a copy so we can modify it <br>    memcpy(&amp;pl, ppl, CBPOLYLINEDATA); <br> <br>    /* <br>     * If we're going to a printer, check if it's color capable. <br>     * if not, then use black on white for this figure. <br>     */ <br>    if (NULL!=hICDev) <br>        { <br>        if (GetDeviceCaps(hICDev, NUMCOLORS) &lt;= 2) <br>            { <br>            pl.rgbBackground=RGB(255, 255, 255); <br>            pl.rgbLine=RGB(0, 0, 0); <br>            } <br>        } <br> <br>    m_pObj-&gt;Draw(hDC, &amp;rc, dwAspect, ptd, hICDev, &amp;pl); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetColorSet <br> * <br> * Purpose: <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect of interest. <br> *  lindex          LONG piece of interest. <br> *  pvAspect        LPVOID containing extra information, always <br> *                  NULL. <br> *  ptd             DVTARGETDEVICE * containing device <br> *                  information. <br> *  hICDev          HDC containing the IC for the device. <br> *  ppColorSet      LPLOGPALETTE * into which to return the <br> *                  pointer to the palette in this color set. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR on success, S_FALSE if not supported. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetColorSet(DWORD dwDrawAspect <br>    , LONG lindex, LPVOID pvAspect, DVTARGETDEVICE *ptd <br>    , HDC hICDev, LPLOGPALETTE *ppColorSet) <br>    { <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::Freeze <br> * <br> * Purpose: <br> *  Freezes the view of a particular aspect such that data changes <br> *  do not affect the view. <br> * <br> * Parameters: <br> *  dwAspect        DWORD aspect to freeze. <br> *  lindex          LONG piece index under consideration. <br> *  pvAspect        LPVOID for further information, always NULL. <br> *  pdwFreeze       LPDWORD in which to return the key. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Freeze(DWORD dwAspect, LONG lindex <br>    , LPVOID pvAspect, LPDWORD pdwFreeze) <br>    { <br>    //Delegate any aspect we don't handle. <br>    if (!((DVASPECT_CONTENT | DVASPECT_THUMBNAIL) &amp; dwAspect)) <br>        { <br>        return m_pObj-&gt;m_pDefIViewObject2-&gt;Freeze(dwAspect, lindex <br>            , pvAspect, pdwFreeze); <br>        } <br> <br>    if (dwAspect &amp; m_pObj-&gt;m_dwFrozenAspects) <br>        { <br>        *pdwFreeze=dwAspect + FREEZE_KEY_OFFSET; <br>        return ResultFromScode(VIEW_S_ALREADY_FROZEN); <br>        } <br> <br>    m_pObj-&gt;m_dwFrozenAspects |= dwAspect; <br> <br> <br>    /* <br>     * For whatever aspects become frozen, make a copy of the data. <br>     * Later when drawing, if such a frozen aspect is requested, <br>     * we'll draw from this data rather than from our current data. <br>     */ <br>    if (DVASPECT_CONTENT &amp; dwAspect) <br>        { <br>        memcpy(&amp;m_pObj-&gt;m_plContent, &amp;m_pObj-&gt;m_pl <br>            , CBPOLYLINEDATA); <br>        } <br> <br>    if (DVASPECT_THUMBNAIL &amp; dwAspect) <br>        { <br>        memcpy(&amp;m_pObj-&gt;m_plThumbnail, &amp;m_pObj-&gt;m_pl <br>            , CBPOLYLINEDATA); <br>        } <br> <br>    if (NULL!=pdwFreeze) <br>        *pdwFreeze=dwAspect + FREEZE_KEY_OFFSET; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::Unfreeze <br> * <br> * Purpose: <br> *  Thaws an aspect frozen in Freeze.  We expect that a container <br> *  will redraw us after freezing if necessary, so we don't send <br> *  any sort of notification here. <br> * <br> * Parameters: <br> *  dwFreeze        DWORD key returned from Freeze. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::Unfreeze(DWORD dwFreeze) <br>    { <br>    DWORD       dwAspect=dwFreeze - FREEZE_KEY_OFFSET; <br> <br>    //Delegate any aspect we don't handle. <br>    if (!((DVASPECT_CONTENT | DVASPECT_THUMBNAIL) &amp; dwAspect)) <br>        return m_pObj-&gt;m_pDefIViewObject2-&gt;Unfreeze(dwFreeze); <br> <br>    //The aspect to unfreeze is in the key. <br>    m_pObj-&gt;m_dwFrozenAspects &amp;= ~(dwAspect); <br> <br>    /* <br>     * Since we always kept our current data up to date, we don't <br>     * have to do anything here like requesting data again. <br>     * Because we removed dwAspect from m_dwFrozenAspects, Draw <br>     * will again use the current data. <br>     */ <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::SetAdvise <br> * <br> * Purpose: <br> *  Provides an advise sink to the view object enabling <br> *  notifications for a specific aspect. <br> * <br> * Parameters: <br> *  dwAspects       DWORD describing the aspects of interest. <br> *  dwAdvf          DWORD containing advise flags. <br> *  pIAdviseSink    LPADVISESINK to notify. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::SetAdvise(DWORD dwAspects <br>    , DWORD dwAdvf, LPADVISESINK pIAdviseSink) <br>    { <br>    //Pass anything we don't support on through <br>    if (!((DVASPECT_CONTENT | DVASPECT_THUMBNAIL) &amp; dwAspects)) <br>        { <br>        return m_pObj-&gt;m_pDefIViewObject2-&gt;SetAdvise(dwAspects <br>            , dwAdvf, pIAdviseSink); <br>        } <br> <br>    if (NULL!=m_pObj-&gt;m_pIAdvSinkView) <br>        m_pObj-&gt;m_pIAdvSinkView-&gt;Release(); <br> <br>    m_pObj-&gt;m_dwAdviseAspects=dwAspects; <br>    m_pObj-&gt;m_dwAdviseFlags=dwAdvf; <br> <br>    m_pObj-&gt;m_pIAdvSinkView=pIAdviseSink; <br> <br>    if (NULL!=m_pObj-&gt;m_pIAdvSinkView) <br>        m_pObj-&gt;m_pIAdvSinkView-&gt;AddRef(); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetAdvise <br> * <br> * Purpose: <br> *  Returns the last known IAdviseSink seen by SetAdvise. <br> * <br> * Parameters: <br> *  pdwAspects      LPDWORD in which to store the last requested <br> *                  aspects. <br> *  pdwAdvf         LPDWORD in which to store the last requested <br> *                  flags. <br> *  ppIAdvSink      LPADVISESINK * in which to store the <br> *                  IAdviseSink. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetAdvise(LPDWORD pdwAspects <br>    , LPDWORD pdwAdvf, LPADVISESINK *ppAdvSink) <br>    { <br>    if (NULL==m_pObj-&gt;m_pIAdvSinkView) <br>        { <br>        return m_pObj-&gt;m_pDefIViewObject2-&gt;GetAdvise(pdwAspects <br>            , pdwAdvf, ppAdvSink); <br>        } <br> <br>    if (NULL==ppAdvSink) <br>        return ResultFromScode(E_INVALIDARG); <br>    else <br>        { <br>        *ppAdvSink=m_pObj-&gt;m_pIAdvSinkView; <br>        m_pObj-&gt;m_pIAdvSinkView-&gt;AddRef(); <br>        } <br> <br>    if (NULL!=pdwAspects) <br>        *pdwAspects=m_pObj-&gt;m_dwAdviseAspects; <br> <br>    if (NULL!=pdwAdvf) <br>        *pdwAdvf=m_pObj-&gt;m_dwAdviseFlags; <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIViewObject2::GetExtent <br> * <br> * Purpose: <br> *  Retrieves the extents of the object's display. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect of interest. <br> *  lindex          LONG index of the piece of interest. <br> *  ptd             DVTARGETDEVICE * with device information. <br> *  pszl            LPSIZEL to the structure in which to return <br> *                  the extents. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or a general error value. <br> */ <br> <br>STDMETHODIMP CImpIViewObject2::GetExtent(DWORD dwAspect, LONG lindex <br>    , DVTARGETDEVICE *ptd, LPSIZEL pszl) <br>    { <br>    HDC         hDC; <br>    int         iXppli, iYppli; <br>    RECT        rc; <br> <br>    /* <br>     * We can answer for CONTENT/THUMBNAIL, but try the server for <br>     * others. In addition, always delegate is the server is running <br>     * since it has a window to define the size. <br>     */ <br>    if (!((DVASPECT_CONTENT | DVASPECT_THUMBNAIL) &amp; dwAspect) <br>        || OleIsRunning(m_pObj-&gt;m_pDefIOleObject)) <br>        return m_pObj-&gt;m_pDefIOleObject-&gt;GetExtent(dwAspect, pszl); <br> <br>    /* <br>     * The size is in the rc field of the POLYLINEDATA structure <br>     * which we now have to convert to HIMETRIC. <br>     */ <br> <br>    hDC=GetDC(NULL); <br>    iXppli=GetDeviceCaps(hDC, LOGPIXELSX); <br>    iYppli=GetDeviceCaps(hDC, LOGPIXELSY); <br> <br>    RECTSTORECT(m_pObj-&gt;m_pl.rc, rc); <br>    pszl-&gt;cx=(long)MulDiv(HIMETRIC_PER_INCH <br>        , (rc.right-rc.left), iXppli); <br> <br>    pszl-&gt;cy=(long)MulDiv(HIMETRIC_PER_INCH <br>        , (rc.bottom-rc.top), iYppli); <br> <br>    ReleaseDC(NULL, hDC); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

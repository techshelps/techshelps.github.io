<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOLEOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context840"></a>IOLEOBJ.CPP</h2>
<pre><code>/* <br> * IOLEOBJ.CPP <br> * Cosmo Handler Chapter 19 <br> * <br> * Implementation of the IOleObject interface for Cosmo Handler. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "hcosmo.h" <br> <br> <br>/* <br> * CImpIOleObject::CImpIOleObject <br> * CImpIOleObject::~CImpIOleObject <br> * <br> * Parameters (Constructor): <br> *  pObj            PCFigure of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleObject::CImpIOleObject(PCFigure pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleObject::~CImpIOleObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleObject::QueryInterface <br> * CImpIOleObject::AddRef <br> * CImpIOleObject::Release <br> */ <br> <br>STDMETHODIMP CImpIOleObject::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * The only member function we need to implement in a handler is <br> * IOleObject::GetExtent since we know exactly how large our data <br> * is.  All others can be delegated. <br> */ <br> <br> <br>/* <br> * CImpIOleObject::GetExtent <br> * <br> * Purpose: <br> *  Retrieves the size of the object in HIMETRIC units. <br> * <br> * Parameters: <br> *  dwAspect        DWORD of the aspect requested <br> *  pszl            LPSIZEL into which to store the size. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, error code otherwise. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::GetExtent(DWORD dwAspect, LPSIZEL pszl) <br>    { <br>    //We can just use IViewObject2 for this. <br>    return m_pObj-&gt;m_pImpIViewObject2-&gt;GetExtent(dwAspect, -1 <br>        , NULL, pszl); <br>    } <br> <br> <br> <br>/* <br> * CImpIOleObject::DoVerb <br> * <br> * An example of displaying a message when the local server is not <br> * present.  This is a good way to get some free advertising if you <br> * allow free redistribution of your handler with documents <br> * containing your objects. <br> */ <br> <br>STDMETHODIMP CImpIOleObject::DoVerb(LONG iVerb, LPMSG pMSG <br>    , LPOLECLIENTSITE pSite, LONG lIndex, HWND hWnd, LPCRECT prc) <br>    { <br>    HRESULT     hr; <br> <br>    hr=m_pObj-&gt;m_pDefIOleObject-&gt;DoVerb(iVerb, pMSG, pSite, lIndex <br>        , hWnd, prc); <br> <br>    if (FAILED(hr)) <br>        { <br>        MessageBox(hWnd, TEXT("Local server not present.\nIf\ <br> I wanted to make money\nI would put some advertising here.") <br>            , TEXT("Cosmo Handler"), MB_OK); <br>        } <br> <br>    return hr; <br>    } <br> <br> <br> <br> <br> <br>STDMETHODIMP CImpIOleObject::SetClientSite <br>    (LPOLECLIENTSITE pIOleClientSite) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;SetClientSite(pIOleClientSite); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetClientSite <br>    (LPOLECLIENTSITE *ppSite) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetClientSite(ppSite); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::SetHostNames(LPCOLESTR pszApp <br>    , LPCOLESTR pszObj) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;SetHostNames(pszApp, pszObj); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::Close(DWORD dwSaveOption) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;Close(dwSaveOption); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::SetMoniker(DWORD dwWhich <br>    , LPMONIKER pmk) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;SetMoniker(dwWhich, pmk); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetMoniker(DWORD dwAssign <br>    , DWORD dwWhich, LPMONIKER *ppmk) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetMoniker(dwAssign, dwWhich <br>        , ppmk); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::InitFromData(LPDATAOBJECT pIDataObject <br>    , BOOL fCreation, DWORD dw) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;InitFromData(pIDataObject <br>        , fCreation, dw); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetClipboardData(DWORD dwReserved <br>    , LPDATAOBJECT *ppIDataObj) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetClipboardData(dwReserved <br>        , ppIDataObj); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::EnumVerbs(LPENUMOLEVERB *ppEnum) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;EnumVerbs(ppEnum); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::Update(void) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;Update(); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::IsUpToDate(void) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;IsUpToDate(); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetUserClassID(LPCLSID pClsID) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetUserClassID(pClsID); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetUserType(DWORD dwForm <br>    , LPOLESTR *ppszType) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetUserType(dwForm, ppszType); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::SetExtent(DWORD dwAspect, LPSIZEL pszl) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;SetExtent(dwAspect, pszl); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::Advise(LPADVISESINK pIAdviseSink <br>    , LPDWORD pdwConn) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;Advise(pIAdviseSink, pdwConn); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::Unadvise(DWORD dwConn) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;Unadvise(dwConn); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::EnumAdvise(LPENUMSTATDATA *ppEnum) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;EnumAdvise(ppEnum); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::GetMiscStatus(DWORD dwAspect <br>    , LPDWORD pdwStatus) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;GetMiscStatus(dwAspect <br>        , pdwStatus); <br>    } <br> <br>STDMETHODIMP CImpIOleObject::SetColorScheme(LPLOGPALETTE pLP) <br>    { <br>    return m_pObj-&gt;m_pDefIOleObject-&gt;SetColorScheme(pLP); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

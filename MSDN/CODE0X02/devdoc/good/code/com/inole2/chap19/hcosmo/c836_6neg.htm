<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HCOSMO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context838"></a>HCOSMO.H</h2>
<pre><code>/* <br> * HCOSMO.H <br> * Cosmo Handler Chapter 19 <br> * <br> * Definitions and function prototypes for the Cosmo Handler. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _HCOSMO_H_ <br>#define _HCOSMO_H_ <br> <br>#define CHAPTER19 <br>#include &lt;inole.h&gt; <br>#include &lt;ipoly10.h&gt;      //For POLYLINEDATA definitions <br> <br> <br>#define HIMETRIC_PER_INCH           2540 <br> <br>//Stream name in the object storage <br>#define SZSTREAM                    OLETEXT("CONTENTS") <br> <br> <br>//HCOSMO.CPP <br> <br>class CFigureClassFactory : public IClassFactory <br>    { <br>    protected: <br>        ULONG           m_cRef;         //Reference count on object <br> <br>    public: <br>        CFigureClassFactory(void); <br>        ~CFigureClassFactory(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IClassFactory members <br>        STDMETHODIMP    CreateInstance(LPUNKNOWN, REFIID, PPVOID); <br>        STDMETHODIMP    LockServer(BOOL); <br>    }; <br> <br>typedef CFigureClassFactory *PCFigureClassFactory; <br> <br> <br>//Magic number to add to aspects returned from IViewObject::Freeze <br>#define FREEZE_KEY_OFFSET       0x0723 <br> <br> <br> <br>//Forward class references <br>class CImpIOleObject; <br>typedef class CImpIOleObject *PCImpIOleObject; <br>class CImpIViewObject2; <br>typedef class CImpIViewObject2 *PCImpIViewObject2; <br>class CImpIPersistStorage; <br>typedef class CImpIPersistStorage *PCImpIPersistStorage; <br>class CImpIAdviseSink; <br>typedef class CImpIAdviseSink *PCImpIAdviseSink; <br> <br> <br>//HCOSMO.CPP <br> <br>class CFigure : public IUnknown <br>    { <br>    friend class CImpIOleObject; <br>    friend class CImpIViewObject2; <br>    friend class CImpIPersistStorage; <br>    friend class CImpIAdviseSink; <br> <br>    protected: <br>        ULONG                m_cRef; <br>        LPUNKNOWN            m_pUnkOuter; <br>        PFNDESTROYED         m_pfnDestroy; <br> <br>        POLYLINEDATA         m_pl;          //Our actual data. <br>        UINT                 m_cf;          //Obj clipboard format. <br>        CLSID                m_clsID;       //Current CLSID <br> <br>        //These are default handler interfaces we use <br>        LPUNKNOWN            m_pDefIUnknown; <br>        LPOLEOBJECT          m_pDefIOleObject; <br>        LPVIEWOBJECT2        m_pDefIViewObject2; <br>        LPPERSISTSTORAGE     m_pDefIPersistStorage; <br>        LPDATAOBJECT         m_pDefIDataObject; <br> <br>        //Implemented interfaces <br>        PCImpIOleObject      m_pImpIOleObject; <br>        PCImpIViewObject2    m_pImpIViewObject2; <br>        PCImpIPersistStorage m_pImpIPersistStorage; <br>        PCImpIAdviseSink     m_pImpIAdviseSink; <br> <br>        //Advise sink we get in IViewObject <br>        LPADVISESINK         m_pIAdvSinkView; <br>        DWORD                m_dwAdviseFlags; <br>        DWORD                m_dwAdviseAspects; <br>        DWORD                m_dwFrozenAspects; <br> <br>        //Copies of frozen aspects <br>        POLYLINEDATA         m_plContent; <br>        POLYLINEDATA         m_plThumbnail; <br> <br> <br>    protected: <br>        void      Draw(HDC, LPRECT, DWORD, DVTARGETDEVICE * <br>                      , HDC, PPOLYLINEDATA); <br>        void      PointScale(LPRECT, LPPOINTS, BOOL); <br> <br>    public: <br>        CFigure(LPUNKNOWN, PFNDESTROYED, HINSTANCE); <br>        ~CFigure(void); <br> <br>        BOOL      Init(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CFigure *PCFigure; <br> <br> <br> <br>class CImpIPersistStorage : public IPersistStorage <br>    { <br>    protected: <br>        ULONG               m_cRef; <br>        PCFigure            m_pObj; <br>        LPUNKNOWN           m_pUnkOuter; <br>        PSSTATE             m_psState;   //Storage state <br>        BOOL                m_fConvert;  //Are we Converting? <br> <br>    public: <br>        CImpIPersistStorage(PCFigure, LPUNKNOWN); <br>        ~CImpIPersistStorage(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP InitNew(LPSTORAGE); <br>        STDMETHODIMP Load(LPSTORAGE); <br>        STDMETHODIMP Save(LPSTORAGE, BOOL); <br>        STDMETHODIMP SaveCompleted(LPSTORAGE); <br>        STDMETHODIMP HandsOffStorage(void); <br>    }; <br> <br> <br> <br>class CImpIOleObject : public IOleObject <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        PCFigure        m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIOleObject(PCFigure, LPUNKNOWN); <br>        ~CImpIOleObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IOleObject members <br>        STDMETHODIMP SetClientSite(LPOLECLIENTSITE); <br>        STDMETHODIMP GetClientSite(LPOLECLIENTSITE *); <br>        STDMETHODIMP SetHostNames(LPCOLESTR, LPCOLESTR); <br>        STDMETHODIMP Close(DWORD); <br>        STDMETHODIMP SetMoniker(DWORD, LPMONIKER); <br>        STDMETHODIMP GetMoniker(DWORD, DWORD, LPMONIKER *); <br>        STDMETHODIMP InitFromData(LPDATAOBJECT, BOOL, DWORD); <br>        STDMETHODIMP GetClipboardData(DWORD, LPDATAOBJECT *); <br>        STDMETHODIMP DoVerb(LONG, LPMSG, LPOLECLIENTSITE, LONG <br>                         , HWND, LPCRECT); <br>        STDMETHODIMP EnumVerbs(LPENUMOLEVERB *); <br>        STDMETHODIMP Update(void); <br>        STDMETHODIMP IsUpToDate(void); <br>        STDMETHODIMP GetUserClassID(CLSID *); <br>        STDMETHODIMP GetUserType(DWORD, LPOLESTR *); <br>        STDMETHODIMP SetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP GetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP Advise(LPADVISESINK, DWORD *); <br>        STDMETHODIMP Unadvise(DWORD); <br>        STDMETHODIMP EnumAdvise(LPENUMSTATDATA *); <br>        STDMETHODIMP GetMiscStatus(DWORD, DWORD *); <br>        STDMETHODIMP SetColorScheme(LPLOGPALETTE); <br>    }; <br> <br> <br>class CImpIViewObject2 : public IViewObject2 <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        PCFigure        m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIViewObject2(PCFigure, LPUNKNOWN); <br>        ~CImpIViewObject2(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IViewObject2 members <br>        STDMETHODIMP Draw(DWORD, LONG, LPVOID, DVTARGETDEVICE * <br>            , HDC, HDC, LPCRECTL, LPCRECTL <br>            , BOOL (CALLBACK *)(DWORD), DWORD); <br>        STDMETHODIMP GetColorSet(DWORD, LONG, LPVOID <br>            , DVTARGETDEVICE *, HDC, LPLOGPALETTE *); <br>        STDMETHODIMP Freeze(DWORD, LONG, LPVOID, LPDWORD); <br>        STDMETHODIMP Unfreeze(DWORD); <br>        STDMETHODIMP SetAdvise(DWORD, DWORD, LPADVISESINK); <br>        STDMETHODIMP GetAdvise(LPDWORD, LPDWORD, LPADVISESINK *); <br>        STDMETHODIMP GetExtent(DWORD, LONG, DVTARGETDEVICE * <br>            , LPSIZEL); <br>    }; <br> <br> <br>class CImpIAdviseSink : public IAdviseSink <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        PCFigure        m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIAdviseSink(PCFigure, LPUNKNOWN); <br>        ~CImpIAdviseSink(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP_(void)  OnDataChange(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP_(void)  OnViewChange(DWORD, LONG); <br>        STDMETHODIMP_(void)  OnRename(LPMONIKER); <br>        STDMETHODIMP_(void)  OnSave(void); <br>        STDMETHODIMP_(void)  OnClose(void); <br>    }; <br> <br> <br>#endif  //_HCOSMO_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

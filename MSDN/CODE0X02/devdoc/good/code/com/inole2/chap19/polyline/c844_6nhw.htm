<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLYLINE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context854"></a>POLYLINE.H</h2>
<pre><code>/* <br> * POLYLINE.H <br> * Polyline Component Chapter 19 <br> * <br> * Definitions and function prototypes <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _POLYLINE_H_ <br>#define _POLYLINE_H_ <br> <br>#define INC_CLASSLIB <br>#define INC_CONTROLS <br>//CHAPTER19MOD <br>#define INC_OLEUI <br>#define CHAPTER19 <br>//CHAPTER19MOD <br>#include &lt;inole.h&gt; <br>#include &lt;ipoly10.h&gt; <br>#include "resource.h" <br> <br> <br>//Classname <br>#define SZCLASSPOLYLINE             TEXT("polyline") <br> <br>//Stream Name that holds the data <br>#define SZSTREAM                    OLETEXT("CONTENTS") <br> <br>//CHAPTER19MOD <br>#define SZPOLYFRAMETITLE            TEXT("Polyline Figure in %s") <br> <br>//Magic number to add to aspects returned from IViewObject::Freeze <br>#define FREEZE_KEY_OFFSET           0x0723 <br>//End CHAPTER19MOD <br> <br>#define HIMETRIC_PER_INCH           2540 <br>#define CCHPATHMAX                  256 <br> <br>//Window extra bytes and offsets <br>#define CBPOLYLINEWNDEXTRA          (sizeof(LONG)) <br>#define PLWL_STRUCTURE              0 <br> <br> <br>//DLLPOLY.CPP <br>int PASCAL LibMain(HINSTANCE, WORD, WORD, LPSTR); <br> <br>//This class factory object creates Polyline objects. <br> <br>class CPolylineClassFactory : public IClassFactory <br>    { <br>    protected: <br>        ULONG           m_cRef; <br> <br>    public: <br>        CPolylineClassFactory(void); <br>        ~CPolylineClassFactory(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IClassFactory members <br>        STDMETHODIMP         CreateInstance(LPUNKNOWN, REFIID <br>                                 , PPVOID); <br>        STDMETHODIMP         LockServer(BOOL); <br>    }; <br> <br>typedef CPolylineClassFactory *PCPolylineClassFactory; <br> <br> <br> <br>//POLYWIN.CPP <br>LRESULT APIENTRY PolylineWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//CHAPTER19MOD <br>#ifdef WIN32 <br>#define PROP_POINTER    TEXT("Pointer") <br>#else <br>#define PROP_SELECTOR   "Selector" <br>#define PROP_OFFSET     "Offset" <br>#endif <br> <br>BOOL APIENTRY PolyDlgProc(HWND, UINT, WPARAM, LPARAM); <br>//End CHAPTER19MOD <br> <br>//Forward class references <br>class CImpIPolyline; <br>typedef class CImpIPolyline *PCImpIPolyline; <br> <br>class CImpIConnPtCont; <br>typedef CImpIConnPtCont *PCImpIConnPtCont; <br> <br>class CConnectionPoint; <br>typedef CConnectionPoint *PCConnectionPoint; <br> <br>class CImpIPersistStorage; <br>typedef class CImpIPersistStorage *PCImpIPersistStorage; <br> <br>class CImpIPersistStreamInit; <br>typedef class CImpIPersistStreamInit *PCImpIPersistStreamInit; <br> <br>class CImpIDataObject; <br>typedef class CImpIDataObject *PCImpIDataObject; <br> <br>//CHAPTER19MOD <br>class CImpIOleObject; <br>typedef class CImpIOleObject *PCImpIOleObject; <br> <br>class CImpIViewObject; <br>typedef class CImpIViewObject *PCImpIViewObject; <br> <br>class CImpIRunnableObject; <br>typedef class CImpIRunnableObject *PCImpIRunnableObject; <br> <br>//FORMATETC array sizes no longer necessary. <br>//End CHAPTER19MOD <br> <br> <br>//POLYLINE.CPP <br>class CPolyline : public IUnknown <br>    { <br>    friend LRESULT APIENTRY PolylineWndProc(HWND, UINT, WPARAM <br>        , LPARAM); <br> <br>    friend class CImpIPolyline; <br>    friend class CImpIConnPtCont; <br>    friend class CConnectionPoint; <br>    friend class CImpIPersistStorage; <br>    friend class CImpIPersistStreamInit; <br>    friend class CImpIDataObject; <br> <br>    //CHAPTER19MOD <br>    friend BOOL APIENTRY PolyDlgProc(HWND, UINT, WPARAM, LPARAM); <br>    friend class CImpIOleObject; <br>    friend class CImpIViewObject; <br>    friend class CImpIRunnableObject; <br>    //End CHAPTER19MOD <br> <br>    protected: <br>        HWND            m_hWnd; <br>        HINSTANCE       m_hInst; <br> <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling Unknown <br>        PFNDESTROYED    m_pfnDestroy;   //Function called on closure <br>        BOOL            m_fDirty;       //Have we changed? <br>        POLYLINEDATA    m_pl;           //Our actual data <br> <br>        //Contained interfaces <br>        PCImpIPolyline          m_pImpIPolyline; <br>        PCImpIConnPtCont        m_pImpIConnPtCont; <br>        PCImpIPersistStorage    m_pImpIPersistStorage; <br>        PCImpIPersistStreamInit m_pImpIPersistStreamInit; <br>        PCImpIDataObject        m_pImpIDataObject; <br> <br>        /* <br>         * Connected sink:  only one per object.  We get this <br>         * through our connection point. <br>         */ <br>        IPolylineAdviseSink10  *m_pAdv; <br>        PCConnectionPoint       m_pConnPt; <br> <br>        PCStringTable   m_pST;          //Object strings <br>        UINT            m_cf;           //Object clipboard format <br>        CLSID           m_clsID;        //Current CLSID <br> <br>        //We have to hold these for IPersistStorage::Save <br>        LPSTORAGE       m_pIStorage; <br>        LPSTREAM        m_pIStream; <br> <br>        LPDATAADVISEHOLDER  m_pIDataAdviseHolder; <br> <br>        //CHAPTER19MOD <br>        //FORMATETC arrays no longer necessary. <br> <br>        //These are default handler interfaces we use <br>        LPUNKNOWN           m_pDefIUnknown; <br>        LPVIEWOBJECT2       m_pDefIViewObject; <br>        LPPERSISTSTORAGE    m_pDefIPersistStorage; <br>        LPDATAOBJECT        m_pDefIDataObject; <br> <br>        //Implemented and used interfaces <br>        PCImpIOleObject     m_pImpIOleObject;       //Implemented <br>        LPOLEADVISEHOLDER   m_pIOleAdviseHolder;    //Used <br> <br>        LPOLECLIENTSITE     m_pIOleClientSite;      //Used <br> <br>        PCImpIViewObject    m_pImpIViewObject;      //Implemented <br>        LPADVISESINK        m_pIAdviseSink;         //Used <br>        DWORD               m_dwFrozenAspects;      //Freeze <br>        DWORD               m_dwAdviseAspects;      //SetAdvise <br>        DWORD               m_dwAdviseFlags;        //SetAdvise <br> <br>        POLYLINEDATA        m_plContent;            //For freezing <br>        POLYLINEDATA        m_plThumbnail;          //For freezing <br> <br>        PCImpIRunnableObject m_pImpIRunnableObject; //Implemented <br>        HWND                m_hDlg;                 //Editing window <br>        //End CHAPTER19MOD <br> <br>    protected: <br>        void      PointScale(LPRECT, LPPOINTS, BOOL); <br>        //CHAPTER19MOD <br>        void      Draw(HDC, BOOL, BOOL, LPRECT, PPOLYLINEDATA); <br>        HINSTANCE Instance(void); <br>        LPTSTR    String(UINT); <br>        void      SendAdvise(UINT); <br>        //End CHAPTER19MOD <br>        void      RectConvertMappings(LPRECT, BOOL); <br> <br>        /* <br>         * These members pulled from IPolyline now serve as a <br>         * central store for this functionality to be used from <br>         * other interfaces like IPersistStorage and IDataObject. <br>         * Other interfaces later may also use them. <br>         */ <br>        STDMETHODIMP DataSet(PPOLYLINEDATA, BOOL, BOOL); <br>        STDMETHODIMP DataGet(PPOLYLINEDATA); <br> <br>        STDMETHODIMP RenderNative(HGLOBAL *); <br>        STDMETHODIMP RenderBitmap(HBITMAP *); <br>        STDMETHODIMP RenderMetafilePict(HGLOBAL *); <br> <br> <br>    public: <br>        CPolyline(LPUNKNOWN, PFNDESTROYED, HINSTANCE); <br>        ~CPolyline(void); <br> <br>        BOOL      Init(void); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CPolyline *PCPolyline; <br> <br> <br>//CHAPTER19MOD <br>//Codes for CPolyline::SendAdvise <br>//......Code.....................Method called in CPolyline::SendAdvise <br>#define OBJECTCODE_SAVED       0 //IOleAdviseHolder::SendOnSave <br>#define OBJECTCODE_CLOSED      1 //IOleAdviseHolder::SendOnClose <br>#define OBJECTCODE_RENAMED     2 //IOleAdviseHolder::SendOnRename <br>#define OBJECTCODE_SAVEOBJECT  3 //IOleClientSite::SaveObject <br>#define OBJECTCODE_DATACHANGED 4 //IDataAdviseHolder::SendOnDataChange <br>#define OBJECTCODE_SHOWWINDOW  5 //IOleClientSite::OnShowWindow(TRUE) <br>#define OBJECTCODE_HIDEWINDOW  6 //IOleClientSite::OnShowWindow(FALSE) <br>#define OBJECTCODE_SHOWOBJECT  7 //IOleClientSite::ShowObject <br>//End CHAPTER19MOD <br> <br> <br> <br>//Interface implementation contained in the Polyline. <br> <br>class CImpIPolyline : public IPolyline10 <br>    { <br>    protected: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br> <br>    public: <br>        CImpIPolyline(PCPolyline, LPUNKNOWN); <br>        ~CImpIPolyline(void); <br> <br>        //IUnknown members. <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //Manipulation members: <br>        STDMETHODIMP Init(HWND, LPRECT, DWORD, UINT); <br>        STDMETHODIMP New(void); <br>        STDMETHODIMP Undo(void); <br>        STDMETHODIMP Window(HWND *); <br> <br>        STDMETHODIMP RectGet(LPRECT); <br>        STDMETHODIMP SizeGet(LPRECT); <br>        STDMETHODIMP RectSet(LPRECT, BOOL); <br>        STDMETHODIMP SizeSet(LPRECT, BOOL); <br> <br>        STDMETHODIMP ColorSet(UINT, COLORREF, COLORREF *); <br>        STDMETHODIMP ColorGet(UINT, COLORREF *); <br> <br>        STDMETHODIMP LineStyleSet(UINT, UINT *); <br>        STDMETHODIMP LineStyleGet(UINT *); <br>    }; <br> <br> <br>class CImpIConnPtCont : public IConnectionPointContainer <br>    { <br>    private: <br>        ULONG               m_cRef;      //Interface ref count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br> <br>    public: <br>        CImpIConnPtCont(PCPolyline, LPUNKNOWN); <br>        ~CImpIConnPtCont(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br> <br>        //IConnectionPointContainer members <br>        STDMETHODIMP EnumConnectionPoints(IEnumConnectionPoints **); <br>    STDMETHODIMP FindConnectionPoint(REFIID, IConnectionPoint **); <br>    }; <br> <br> <br>/* <br> * This connection point will only allow one connection, <br> * so it always returns the same connection key.  It also <br> * doesn't bother to implement enumerations. <br> */ <br> <br>#define CCONNMAX    1 <br>#define ADVISEKEY   72388       //Arbitrary <br> <br>class CConnectionPoint : public IConnectionPoint <br>    { <br>    private: <br>        ULONG           m_cRef;     //Object reference count <br>        PCPolyline      m_pObj;     //Containing object. <br> <br>    public: <br>        CConnectionPoint(PCPolyline); <br>        ~CConnectionPoint(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IConnectionPoint members <br>        STDMETHODIMP GetConnectionInterface(IID *); <br>        STDMETHODIMP GetConnectionPointContainer <br>            (IConnectionPointContainer **); <br>        STDMETHODIMP Advise(LPUNKNOWN, DWORD *); <br>        STDMETHODIMP Unadvise(DWORD); <br>        STDMETHODIMP EnumConnections(IEnumConnections **); <br>    }; <br> <br> <br> <br>class CImpIPersistStorage : public IPersistStorage <br>    { <br>    protected: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br>        PSSTATE             m_psState;   //Storage state <br> <br>    public: <br>        CImpIPersistStorage(PCPolyline, LPUNKNOWN); <br>        ~CImpIPersistStorage(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP InitNew(LPSTORAGE); <br>        STDMETHODIMP Load(LPSTORAGE); <br>        STDMETHODIMP Save(LPSTORAGE, BOOL); <br>        STDMETHODIMP SaveCompleted(LPSTORAGE); <br>        STDMETHODIMP HandsOffStorage(void); <br>    }; <br> <br> <br>class CImpIPersistStreamInit : public IPersistStreamInit <br>    { <br>    protected: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br> <br>    public: <br>        CImpIPersistStreamInit(PCPolyline, LPUNKNOWN); <br>        ~CImpIPersistStreamInit(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP Load(LPSTREAM); <br>        STDMETHODIMP Save(LPSTREAM, BOOL); <br>        STDMETHODIMP GetSizeMax(ULARGE_INTEGER *); <br>        STDMETHODIMP InitNew(void); <br>    }; <br> <br> <br>//IDATAOBJ.CPP <br>class CImpIDataObject : public IDataObject <br>    { <br>    private: <br>        ULONG               m_cRef;      //Interface reference count <br>        PCPolyline          m_pObj;      //Back pointer to object <br>        LPUNKNOWN           m_pUnkOuter; //Controlling unknown <br> <br>    public: <br>        CImpIDataObject(PCPolyline, LPUNKNOWN); <br>        ~CImpIDataObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IDataObject members <br>        STDMETHODIMP GetData(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP GetDataHere(LPFORMATETC, LPSTGMEDIUM); <br>        STDMETHODIMP QueryGetData(LPFORMATETC); <br>        STDMETHODIMP GetCanonicalFormatEtc(LPFORMATETC,LPFORMATETC); <br>        STDMETHODIMP SetData(LPFORMATETC, LPSTGMEDIUM, BOOL); <br>        STDMETHODIMP EnumFormatEtc(DWORD, LPENUMFORMATETC *); <br>        STDMETHODIMP DAdvise(LPFORMATETC, DWORD, LPADVISESINK <br>            , DWORD *); <br>        STDMETHODIMP DUnadvise(DWORD); <br>        STDMETHODIMP EnumDAdvise(LPENUMSTATDATA *); <br>    }; <br> <br> <br> <br>//IENUMFE.CPP <br>class CEnumFormatEtc : public IEnumFORMATETC <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        LPUNKNOWN       m_pUnkRef; <br>        ULONG           m_iCur; <br>        ULONG           m_cfe; <br>        LPFORMATETC     m_prgfe; <br> <br>    public: <br>        CEnumFormatEtc(LPUNKNOWN, ULONG, LPFORMATETC); <br>        ~CEnumFormatEtc(void); <br> <br>        //IUnknown members that delegate to m_pUnkRef. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IEnumFORMATETC members <br>        STDMETHODIMP Next(ULONG, LPFORMATETC, ULONG *); <br>        STDMETHODIMP Skip(ULONG); <br>        STDMETHODIMP Reset(void); <br>        STDMETHODIMP Clone(IEnumFORMATETC **); <br>    }; <br> <br> <br>typedef CEnumFormatEtc *PCEnumFormatEtc; <br> <br> <br>//CHAPTER19MOD <br> <br>class CImpIOleObject : public IOleObject <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        PCPolyline      m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIOleObject(PCPolyline, LPUNKNOWN); <br>        ~CImpIOleObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IOleObject members <br>        STDMETHODIMP SetClientSite(LPOLECLIENTSITE); <br>        STDMETHODIMP GetClientSite(LPOLECLIENTSITE *); <br>        STDMETHODIMP SetHostNames(LPCOLESTR, LPCOLESTR); <br>        STDMETHODIMP Close(DWORD); <br>        STDMETHODIMP SetMoniker(DWORD, LPMONIKER); <br>        STDMETHODIMP GetMoniker(DWORD, DWORD, LPMONIKER *); <br>        STDMETHODIMP InitFromData(LPDATAOBJECT, BOOL, DWORD); <br>        STDMETHODIMP GetClipboardData(DWORD, LPDATAOBJECT *); <br>        STDMETHODIMP DoVerb(LONG, LPMSG, LPOLECLIENTSITE, LONG <br>                         , HWND, LPCRECT); <br>        STDMETHODIMP EnumVerbs(LPENUMOLEVERB *); <br>        STDMETHODIMP Update(void); <br>        STDMETHODIMP IsUpToDate(void); <br>        STDMETHODIMP GetUserClassID(CLSID *); <br>        STDMETHODIMP GetUserType(DWORD, LPOLESTR *); <br>        STDMETHODIMP SetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP GetExtent(DWORD, LPSIZEL); <br>        STDMETHODIMP Advise(LPADVISESINK, DWORD *); <br>        STDMETHODIMP Unadvise(DWORD); <br>        STDMETHODIMP EnumAdvise(LPENUMSTATDATA *); <br>        STDMETHODIMP GetMiscStatus(DWORD, DWORD *); <br>        STDMETHODIMP SetColorScheme(LPLOGPALETTE); <br>    }; <br> <br> <br>//IVIEWOBJ.CPP <br>class CImpIViewObject : public IViewObject2 <br>    { <br>    private: <br>        ULONG           m_cRef; <br>        PCPolyline      m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIViewObject(PCPolyline, LPUNKNOWN); <br>        ~CImpIViewObject(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IViewObject members <br>        STDMETHODIMP Draw(DWORD, LONG, LPVOID <br>            , DVTARGETDEVICE *, HDC, HDC, LPCRECTL <br>            , LPCRECTL, BOOL (CALLBACK *)(DWORD), DWORD); <br>        STDMETHODIMP GetColorSet(DWORD, LONG, LPVOID <br>            , DVTARGETDEVICE *, HDC, LPLOGPALETTE *); <br>        STDMETHODIMP Freeze(DWORD, LONG, LPVOID, LPDWORD); <br>        STDMETHODIMP Unfreeze(DWORD); <br>        STDMETHODIMP SetAdvise(DWORD, DWORD, LPADVISESINK); <br>        STDMETHODIMP GetAdvise(LPDWORD, LPDWORD, LPADVISESINK *); <br>        STDMETHODIMP GetExtent(DWORD, LONG, DVTARGETDEVICE * <br>            , LPSIZEL); <br>    }; <br> <br> <br>class CImpIRunnableObject : public IRunnableObject <br>    { <br>    protected: <br>        ULONG           m_cRef; <br>        PCPolyline      m_pObj; <br>        LPUNKNOWN       m_pUnkOuter; <br> <br>    public: <br>        CImpIRunnableObject(PCPolyline, LPUNKNOWN); <br>        ~CImpIRunnableObject(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetRunningClass(LPCLSID); <br>        STDMETHODIMP Run(LPBINDCTX); <br>        STDMETHODIMP_(BOOL) IsRunning(void); <br>        STDMETHODIMP LockRunning(BOOL, BOOL); <br>        STDMETHODIMP SetContainedObject(BOOL); <br>    }; <br>//End CHAPTER19MOD <br> <br>#endif  //_POLYLINE_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

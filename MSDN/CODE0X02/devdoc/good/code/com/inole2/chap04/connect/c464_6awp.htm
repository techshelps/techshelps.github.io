<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context469"></a>OBJECT.H</h2>
<pre><code>/* <br> * OBJECT.H <br> * <br> * Definition of the classes CConnObject, CImpIConnPtCont, and <br> * CEnumConnectionPoints for the connectable object; <br> * CConnectionPoint, CImpIConnectionPoint, CImpIDuckEvents, and <br> * CEnumConnections for the connection point. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _OBJECT_H_ <br>#define _OBJECT_H_ <br> <br> <br>//Number of connection points in this implementation <br>#define CCONNPOINTS     1 <br> <br> <br>/* <br> * The connectable object itself implements IUnknown and <br> * IConnectionPointContainer.  It is closely associated with <br> * the connection point enumerator, CEnumConnectionPoints. <br> */ <br> <br>class CConnectionPoint; <br>typedef CConnectionPoint *PCConnectionPoint; <br> <br> <br>//ID's for triggering events <br>enum <br>    { <br>    EVENT_QUACK=1, EVENT_FLAP, EVENT_PADDLE <br>    }; <br> <br> <br>class CConnObject : public IConnectionPointContainer <br>    { <br>    private: <br>        DWORD             m_cRef;         //Object reference count <br> <br>        //Array holding all the points we have. <br>        PCConnectionPoint m_rgpConnPt[CCONNPOINTS]; <br> <br>    public: <br>        CConnObject(void); <br>        ~CConnObject(void); <br> <br>        BOOL Init(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(DWORD) AddRef(void); <br>        STDMETHODIMP_(DWORD) Release(void); <br> <br>        //IConnectionPointContainer members <br>        STDMETHODIMP EnumConnectionPoints(IEnumConnectionPoints **); <br>    STDMETHODIMP FindConnectionPoint(REFIID, IConnectionPoint **); <br> <br>        //Other members <br>        BOOL TriggerEvent(UINT); <br>    }; <br> <br> <br>typedef CConnObject *PCConnObject; <br> <br> <br> <br>//Enumerator class for EnumConnectionPoints <br> <br>class CEnumConnectionPoints : public IEnumConnectionPoints <br>    { <br>    private: <br>        ULONG           m_cRef;     //Object reference count <br>        LPUNKNOWN       m_pUnkRef;  //IUnknown for ref counting <br>        ULONG           m_iCur;     //Current element <br>        ULONG           m_cPoints;  //Number of conn points <br>        IConnectionPoint **m_rgpCP; //Source of conn points <br> <br>    public: <br>        CEnumConnectionPoints(LPUNKNOWN, ULONG, IConnectionPoint **); <br>        ~CEnumConnectionPoints(void); <br> <br>        //IUnknown members that delegate to m_pUnkRef. <br>        STDMETHODIMP         QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IEnumConnectionPoints members <br>        STDMETHODIMP Next(ULONG, IConnectionPoint **, ULONG *); <br>        STDMETHODIMP Skip(ULONG); <br>        STDMETHODIMP Reset(void); <br>        STDMETHODIMP Clone(IEnumConnectionPoints **); <br>    }; <br> <br>typedef CEnumConnectionPoints *PCEnumConnectionPoints; <br> <br> <br> <br> <br>/* <br> * The connection point object iself is contained within the <br> * connection point container, which is the connectable object. <br> * It therefore manages a back pointer to that connectable object, <br> * and implement IConnectionPoint.  This object has a few <br> * member functions besides those in IConnectionPoint that are <br> * used to fire the outgoing calls. <br> */ <br> <br>#define CCONNMAX    2 <br> <br>class CConnectionPoint : public IConnectionPoint <br>    { <br>    private: <br>        ULONG           m_cRef;     //Object reference count <br>        PCConnObject    m_pObj;     //Containing object <br> <br>        IID             m_iid;      //Our relevant interface <br> <br>        /* <br>         * To keep things simple we'll only support two <br>         * advise connections at most.  Production quality <br>         * connection points should supprt any number of <br>         * connections.  For each connection we need to maintain <br>         * the sink pointer and the cookie assigned to it. <br>         */ <br>        IUnknown       *m_rgpIUnknown[CCONNMAX]; <br>        DWORD           m_rgdwCookies[CCONNMAX]; <br> <br>        UINT            m_cConn; <br>        DWORD           m_dwCookieNext; //Counter <br> <br>    public: <br>        CConnectionPoint(PCConnObject, REFIID); <br>        ~CConnectionPoint(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP         QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IConnectionPoint members <br>        STDMETHODIMP GetConnectionInterface(IID *); <br>        STDMETHODIMP GetConnectionPointContainer <br>            (IConnectionPointContainer **); <br>        STDMETHODIMP Advise(LPUNKNOWN, DWORD *); <br>        STDMETHODIMP Unadvise(DWORD); <br>        STDMETHODIMP EnumConnections(IEnumConnections **); <br>    }; <br> <br> <br>//Enumeration clas for EnumConnections <br> <br>class CEnumConnections : public IEnumConnections <br>    { <br>    private: <br>        ULONG           m_cRef;     //Object reference count <br>        LPUNKNOWN       m_pUnkRef;  //IUnknown for ref counting <br>        ULONG           m_iCur;     //Current element <br>        ULONG           m_cConn;    //Number of connections <br>        LPCONNECTDATA   m_rgConnData; //Source of connections <br> <br>    public: <br>        CEnumConnections(LPUNKNOWN, ULONG, LPCONNECTDATA); <br>        ~CEnumConnections(void); <br> <br>        //IUnknown members that delegate to m_pUnkRef. <br>        STDMETHODIMP         QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IEnumConnections members <br>        STDMETHODIMP Next(ULONG, LPCONNECTDATA, ULONG *); <br>        STDMETHODIMP Skip(ULONG); <br>        STDMETHODIMP Reset(void); <br>        STDMETHODIMP Clone(IEnumConnections **); <br>    }; <br> <br>typedef CEnumConnections *PCEnumConnections; <br> <br> <br>#endif _OBJECT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SINK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context471"></a>SINK.CPP</h2>
<pre><code>/* <br> * SINK.CPP <br> * <br> * Implementation of a sink with the IDuckEvents interface. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "connect.h" <br> <br> <br>/* <br> * CDuckEvents::CDuckEvents <br> * CDuckEvents::~CDuckEvents <br> * <br> * Parameters (Constructor): <br> *  pApp            PAPP to the app object. <br> *  uID             UINT identifier for this sink. <br> */ <br> <br>CDuckEvents::CDuckEvents(PAPP pApp, UINT uID) <br>    { <br>    m_cRef=0; <br>    m_pApp=pApp;    //No AddRef needed, we're nested <br>    m_uID=uID; <br>    m_dwCookie=0; <br>    return; <br>    } <br> <br>CDuckEvents::~CDuckEvents(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CDuckEvents::QueryInterface <br> * CDuckEvents::AddRef <br> * CDuckEvents::Release <br> * <br> * Purpose: <br> *  Non-delegating IUnknown members for CDuckEvents. <br> */ <br> <br>STDMETHODIMP CDuckEvents::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IDuckEvents==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br>STDMETHODIMP_(ULONG) CDuckEvents::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CDuckEvents::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br>/* <br> * CDuckEvents::Quack <br> * <br> * Purpose: <br> *  Event handler for Quacks <br> */ <br> <br>STDMETHODIMP CDuckEvents::Quack(void) <br>    { <br>    TCHAR       szTemp[100]; <br> <br>    wsprintf(szTemp, TEXT("Sink #%u received Quack"), m_uID+1); <br>    m_pApp-&gt;Message(szTemp); <br> <br>   #ifdef WIN32 <br>    PlaySound(TEXT("quack.wav"), NULL, SND_SYNC); <br>   #endif <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CDuckEvents::Flap <br> * <br> * Purpose: <br> *  Event handler for Flapping <br> */ <br> <br>STDMETHODIMP CDuckEvents::Flap(void) <br>    { <br>    TCHAR       szTemp[100]; <br> <br>    wsprintf(szTemp, TEXT("Sink #%u received Flap"), m_uID+1); <br>    m_pApp-&gt;Message(szTemp); <br> <br>   #ifdef WIN32 <br>    PlaySound(TEXT("flap.wav"), NULL, SND_SYNC); <br>   #endif <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br>/* <br> * CDuckEvents::Paddle <br> * <br> * Purpose: <br> *  Event handler for Paddling <br> */ <br> <br>STDMETHODIMP CDuckEvents::Paddle(void) <br>    { <br>    TCHAR       szTemp[100]; <br> <br>    wsprintf(szTemp, TEXT("Sink #%u received Paddle"), m_uID+1); <br>    m_pApp-&gt;Message(szTemp); <br> <br>   #ifdef WIN32 <br>    PlaySound(TEXT("paddle.wav"), NULL, SND_SYNC); <br>   #endif <br> <br>    return NOERROR; <br>    } <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSGFILT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context515"></a>MSGFILT.CPP</h2>
<pre><code>/* <br> * MSGFILT.CPP <br> * Koala Object for EXE Servers, Chapter 6 <br> * <br> * Implementation of a message filter object to block or delay <br> * calls. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "ekoala3.h" <br> <br> <br>/* <br> * CMessageFilter::CMessageFilter <br> * CMessageFilter::~CMessageFilter <br> * <br> * Parameters (Constructor): <br> *  pApp            PAPP of the application we're in <br> */ <br> <br>CMessageFilter::CMessageFilter(PAPP pApp) <br>    { <br>    m_cRef=0; <br>    m_pApp=pApp; <br>    return; <br>    } <br> <br>CMessageFilter::~CMessageFilter(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CMessageFilter::QueryInterface <br> * CMessageFilter::AddRef <br> * CMessageFilter::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CMessageFilter. <br> */ <br> <br>STDMETHODIMP CMessageFilter::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IMessageFilter==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br>STDMETHODIMP_(ULONG) CMessageFilter::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CMessageFilter::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CMessageFilter::HandleInComingCall <br> * <br> * Purpose: <br> *  Requests that the container call OleSave for the object that <br> *  lives here.  Typically this happens on server shutdown. <br> * <br> * Parameters: <br> *  dwCallType      DWORD indicating the type of call received, from <br> *                  the CALLTYPE enumeration <br> *  hTaskCaller     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the outgoing call <br> *                  was made if dwCallType is not CALLTYPE_TOPLEVEL. <br> *                  Ignored for other call types. <br> *  pInterfaceInfo  LPINTERFACEINFO providing information about the <br> *                  call.  Can be NULL. <br> * <br> * Return Value: <br> *  DWORD           One of SERVERCALL_ISHANDLED (if the call might <br> *                  be handled), SERVERCALL_REJECTED (call cannot <br> *                  be handled), or SERVERCALL_RETRYLATER (try <br> *                  again sometime). <br> */ <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::HandleInComingCall <br>    (DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount <br>#ifdef WIN32 <br>    , LPINTERFACEINFO pInterfaceInfo) <br>#else <br>    , DWORD dwReserved) <br>#endif <br>    { <br>    if (m_pApp-&gt;m_fBlock) <br>        return SERVERCALL_REJECTED; <br> <br>    if (m_pApp-&gt;m_fDelay) <br>        return SERVERCALL_RETRYLATER; <br> <br>    return SERVERCALL_ISHANDLED; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CMessageFilter::RetryRejectedCall <br> * CMessageFilter::MessagePending <br> * <br> * Not implemented:  no outgoing calls from this process. <br> */ <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::RetryRejectedCall <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType) <br>    { <br>    return 0; <br>    } <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::MessagePending <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType) <br>    { <br>    return PENDINGMSG_WAITDEFPROCESS; <br>    } <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

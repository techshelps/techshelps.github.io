<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context513"></a>KOALA.CPP</h2>
<pre><code>/* <br> * KOALA.CPP <br> * Koala Object for EXE Servers, Chapter 6 <br> * <br> * Implementation of an object with IExternalConnection. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "koala.h" <br> <br> <br>/* <br> * CKoala::CKoala <br> * CKoala::~CKoala <br> * <br> * Parameters (Constructor): <br> *  pUnkOuter       LPUNKNOWN of a controlling unknown. <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CKoala::CKoala(LPUNKNOWN pUnkOuter, PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pUnkOuter=pUnkOuter; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    //CHAPTER6MOD <br>    m_cStrong=0; <br>    m_cWeak=0; <br> <br>    m_pImpIPersist=NULL; <br>    //End CHAPTER6MOD <br>    return; <br>    } <br> <br>CKoala::~CKoala(void) <br>    { <br>    //CHAPTER6MOD <br>    DeleteInterfaceImp(m_pImpIPersist); <br>    //End CHAPTER6MOD <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CKoala::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CKoala that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  None <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CKoala::Init(void) <br>    { <br>    //CHAPTER6MOD <br>    IUnknown   *pUnk=this; <br> <br>    if (NULL!=m_pUnkOuter) <br>        pUnk=m_pUnkOuter; <br> <br>    m_pImpIPersist=new CImpIPersist(this, pUnk); <br> <br>    //No failure if m_pImpIPersist is NULL, QueryInterface will fail <br> <br>    return TRUE; <br>    //End CHAPTER6MOD <br>    } <br> <br> <br> <br> <br>/* <br> * CKoala::QueryInterface <br> * CKoala::AddRef <br> * CKoala::Release <br> * <br> * Purpose: <br> *  IUnknown members for CKoala object. <br> */ <br> <br>STDMETHODIMP CKoala::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    //CHAPTER6MOD <br>    if (IID_IUnknown==riid || IID_IExternalConnection==riid) <br>        *ppv=this; <br> <br>    if (IID_IPersist==riid &amp;&amp; NULL!=m_pImpIPersist) <br>        *ppv=m_pImpIPersist; <br>    //End CHAPTER6MOD <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br>//CHAPTER6MOD <br>/* <br> * CKoala::AddConnection <br> * <br> * Purpose: <br> *  Informs the object that a strong connection has been made to it. <br> * <br> * Parameters: <br> *  dwConn          DWORD identifying the type of connection, taken <br> *                  from the EXTCONN enumeration. <br> *  dwReserved      DWORD reserved.  This is used inside OLE and <br> *                  should not be validated. <br> * <br> * Return Value: <br> *  DWORD           The number of connection counts on the <br> *                  object, used for debugging purposes only. <br> */ <br> <br>STDMETHODIMP_(DWORD) CKoala::AddConnection(DWORD dwConn <br>    , DWORD dwReserved) <br>    { <br>    DWORD       dwRet; <br>    TCHAR       szTemp[80]; <br> <br>    if (EXTCONN_STRONG &amp; dwConn) <br>        { <br>        dwRet=++m_cStrong; <br>        wsprintf(szTemp <br>            , TEXT("AddConnection cStrong=%lu"), m_cStrong); <br>        } <br> <br>   #ifdef WIN32 <br>    if (EXTCONN_WEAK &amp; dwConn) <br>        { <br>        dwRet=++m_cWeak; <br>        wsprintf(szTemp <br>            , TEXT("ReleaseConnection cWeak=%lu"), m_cWeak); <br>        } <br>   #endif <br> <br>   #ifndef WIN32 <br>    ODS(szTemp); <br>   #else <br>    MessageBox(NULL, szTemp <br>        , TEXT("EKoala3: CKoala::IExternalConnection"), MB_OK); <br>   #endif <br> <br>    return dwRet; <br>    } <br> <br> <br> <br>/* <br> * CKoala::ReleaseConnection <br> * <br> * Purpose: <br> *  Informs an object that a connection has been taken away from <br> *  it in which case the object may need to shut down. <br> * <br> * Parameters: <br> *  dwConn              DWORD identifying the type of connection, <br> *                      taken from the EXTCONN enumeration. <br> *  dwReserved          DWORD reserved.  This is used inside OLE and <br> *                      should not be validated. <br> *  dwRerved            DWORD reserved <br> *  fLastReleaseCloses  BOOL indicating if the last call to this <br> *                      function should close the object. <br> * <br> * Return Value: <br> *  DWORD           The number of remaining connection counts on <br> *                  the object, used for debugging purposes only. <br> */ <br> <br>STDMETHODIMP_(DWORD) CKoala::ReleaseConnection(DWORD dwConn <br>    , DWORD dwReserved, BOOL fLastReleaseCloses) <br>    { <br>    DWORD       dwRet; <br>    TCHAR       szTemp[80]; <br> <br>    if (EXTCONN_STRONG &amp; dwConn) <br>        { <br>        /* <br>         * Note:  We don't need to close ourselves when the last <br>         * strong lock is removed; we're just implementing this <br>         * interface for demonstration. <br>         */ <br> <br>        dwRet=--m_cStrong; <br>        wsprintf(szTemp <br>            , TEXT("ReleaseConnection cStrong=%lu"), m_cStrong); <br>        } <br> <br>   #ifdef WIN32 <br>    if (EXTCONN_WEAK &amp; dwConn) <br>        { <br>        dwRet=--m_cWeak; <br>        wsprintf(szTemp <br>            , TEXT("ReleaseConnection cWeak=%lu"), m_cWeak); <br>        } <br>   #endif <br> <br>   #ifndef WIN32 <br>    ODS(szTemp); <br>   #else <br>    MessageBox(NULL, szTemp <br>        , TEXT("EKoala3: CKoala::IExternalConnection"), MB_OK); <br>   #endif <br> <br>    return dwRet; <br>    } <br> <br> <br> <br> <br>///IPersist implementation <br> <br>/* <br> * CImpIPersist:CImpIPersist <br> * CImpIPersist::~CImpIPersist <br> * <br> * Constructor Parameters: <br> *  pObj            PCKoala pointing to the object we live in. <br> *  pUnkOuter       LPUNKNOWN of the controlling unknown. <br> */ <br> <br>CImpIPersist::CImpIPersist(PCKoala pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIPersist::~CImpIPersist(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIPersist::QueryInterface <br> * CImpIPersist::AddRef <br> * CImpIPersist::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CImpIPersist. <br> */ <br> <br>STDMETHODIMP CImpIPersist::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersist::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIPersist::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br>/* <br> * CImpIPersist::GetClassID <br> * <br> * Purpose: <br> *  Returns the CLSID of the object represented by this interface. <br> * <br> * Parameters: <br> *  pClsID          LPCLSID in which to store our CLSID. <br> */ <br> <br>STDMETHODIMP CImpIPersist::GetClassID(LPCLSID pClsID) <br>    { <br>    *pClsID=CLSID_Koala; <br>    return NOERROR; <br>    } <br> <br>//End CHAPTER6MOD </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALA.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context530"></a>KOALA.H</h2>
<pre><code>/* <br> * KOALA.H <br> * Koala Custom Marshaling Proxy Chapter 6 <br> * <br> * Classes that implement the CKoala object exposed from this <br> * proxy server that communicates with a local Koala through <br> * custom marshaling. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Right Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _KOALA_H_ <br>#define _KOALA_H_ <br> <br>#define CHAPTER6 <br>#include &lt;inole.h&gt; <br>#ifdef WIN32 <br>#include &lt;ianimal.h&gt; <br>#include &lt;ikoala.h&gt; <br>#else <br>//Non-MIDL generated versions <br>#include &lt;ianim16.h&gt; <br>#include &lt;ikoala16.h&gt; <br>#endif <br> <br> <br> <br>/* <br> * Marshaling packet data structure as used by our IMarshal. <br> * This is duplicated in ..\ekoala5\koala.h. <br> */ <br>typedef struct <br>    { <br>    HWND        hWnd;       //Message window <br>    } KOALAMARSHAL, *PKOALAMARSHAL; <br> <br>//Intertask messages, duplicated in ..\ekoala5\koala.h. <br>#define MSG_RELEASE             1000 <br>#define MSG_EAT                 1001 <br>#define MSG_SLEEP               1002 <br>#define MSG_PROCREATE           1003 <br>#define MSG_SLEEPAFTEREATING    1004 <br> <br> <br>//KOALA.CPP <br>class CImpIAnimal; <br>typedef CImpIAnimal *PCImpIAnimal; <br> <br>class CImpIKoala; <br>typedef CImpIKoala *PCImpIKoala; <br> <br>class CImpIMarshal; <br>typedef CImpIMarshal *PCImpIMarshal; <br> <br> <br>class CKoala : public IUnknown <br>    { <br>    friend class CImpIAnimal; <br>    friend class CImpIKoala; <br>    friend class CImpIMarshal; <br> <br>    protected: <br>        ULONG           m_cRef;         //Object reference count <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling unknown <br> <br>        PFNDESTROYED    m_pfnDestroy;   //To call on closure <br> <br>        PCImpIAnimal    m_pImpIAnimal;  //Our interfaces <br>        PCImpIKoala     m_pImpIKoala; <br>        PCImpIMarshal   m_pImpIMarshal; <br> <br>        BOOL            m_fJustAte; <br>        short           m_cSleepAfterEat; <br> <br>        HWND            m_hWndLocal;    //Local object <br> <br>    public: <br>        CKoala(LPUNKNOWN, PFNDESTROYED); <br>        ~CKoala(void); <br> <br>        BOOL    Init(void); <br>        DWORD   CallLocal(UINT, LPARAM, BOOL); <br> <br>        //Non-delegating object IUnknown <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CKoala *PCKoala; <br> <br> <br>//IAnimal interface implementation <br> <br>class CImpIAnimal : public IAnimal <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        PCKoala         m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIAnimal(PCKoala, LPUNKNOWN); <br>        ~CImpIAnimal(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IAnimal members <br>        STDMETHODIMP Eat(LPTSTR, LPTSTR, short); <br>        STDMETHODIMP Sleep(short *); <br>        STDMETHODIMP Procreate(short *); <br>        STDMETHODIMP WhatKindOfAnimal(IID *); <br>    }; <br> <br> <br>//IKoala interface implementation <br> <br>class CImpIKoala : public IKoala <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        PCKoala         m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIKoala(PCKoala, LPUNKNOWN); <br>        ~CImpIKoala(void); <br> <br>        //IUnknown members <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IKoala members <br>        STDMETHODIMP ClimbEucalyptusTree(short); <br>        STDMETHODIMP PouchOpensDown(void); <br>        STDMETHODIMP SleepAfterEating(short); <br>    }; <br> <br> <br>class CImpIMarshal : public IMarshal <br>    { <br>    protected: <br>        ULONG           m_cRef;      //Interface reference count <br>        PCKoala         m_pObj;      //Back pointer to the object <br>        LPUNKNOWN       m_pUnkOuter; //For delegation <br> <br>    public: <br>        CImpIMarshal(PCKoala, LPUNKNOWN); <br>        ~CImpIMarshal(void); <br> <br>        STDMETHODIMP QueryInterface(REFIID, LPVOID *); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        STDMETHODIMP GetUnmarshalClass(REFIID, LPVOID, DWORD <br>            , LPVOID, DWORD, LPCLSID); <br>        STDMETHODIMP GetMarshalSizeMax(REFIID, LPVOID, DWORD <br>            , LPVOID, DWORD, LPDWORD); <br>        STDMETHODIMP MarshalInterface(LPSTREAM, REFIID, LPVOID <br>            , DWORD, LPVOID, DWORD); <br>        STDMETHODIMP UnmarshalInterface(LPSTREAM, REFIID, LPVOID *); <br>        STDMETHODIMP ReleaseMarshalData(LPSTREAM); <br>        STDMETHODIMP DisconnectObject(DWORD); <br>    }; <br> <br>#endif //_KOALA_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSGFILT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context533"></a>MSGFILT.CPP</h2>
<pre><code>/* <br> * MSGFILT.CPP <br> * Koala Client #2, Chapter 6 <br> * <br> * Implementation of a message filter object. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "objuser2.h" <br> <br> <br>/* <br> * CMessageFilter::CMessageFilter <br> * CMessageFilter::~CMessageFilter <br> * <br> * Parameters (Constructor): <br> *  pApp            PAPP of the application <br> */ <br> <br>CMessageFilter::CMessageFilter(PAPP pApp) <br>    { <br>    m_cRef=0; <br>    m_pApp=pApp; <br>    return; <br>    } <br> <br>CMessageFilter::~CMessageFilter(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CMessageFilter::QueryInterface <br> * CMessageFilter::AddRef <br> * CMessageFilter::Release <br> * <br> * Purpose: <br> *  Delegating IUnknown members for CMessageFilter. <br> */ <br> <br>STDMETHODIMP CMessageFilter::QueryInterface(REFIID riid <br>    , LPVOID *ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IMessageFilter==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br>STDMETHODIMP_(ULONG) CMessageFilter::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br>STDMETHODIMP_(ULONG) CMessageFilter::Release(void) <br>    { <br>    if (0!=--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CMessageFilter::HandleInComingCall <br> * <br> * Purpose: <br> *  Requests that the container call OleSave for the object that <br> *  lives here.  Typically this happens on server shutdown. <br> * <br> * Parameters: <br> *  dwCallType      DWORD indicating the type of call received, from <br> *                  the CALLTYPE enumeration <br> *  hTaskCaller     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the outgoing call <br> *                  was made if dwCallType is not CALLTYPE_TOPLEVEL. <br> *                  Ignored for other call types. <br> *  pInterfaceInfo  LPINTERFACEINFO providing information about the <br> *                  call.  Can be NULL. <br> * <br> * Return Value: <br> *  DWORD           One of SERVERCALL_ISHANDLED (if the call might <br> *                  be handled), SERVERCALL_REJECTED (call cannot <br> *                  be handled), or SERVERCALL_RETRYLATER (try <br> *                  again sometime). <br> */ <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::HandleInComingCall <br>    (DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount <br>#ifdef WIN32 <br>    , LPINTERFACEINFO pInterfaceInfo) <br>#else <br>    , DWORD dwReserved) <br>#endif <br>    { <br>    /* <br>     * Because ObjectUser2 doesn't serve any objects itself, <br>     * this should never occur in this message filter. <br>     */ <br>    m_pApp-&gt;Message(TEXT("CMessageFilter::HandleInComingCall called")); <br>    return SERVERCALL_ISHANDLED; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CMessageFilter::RetryRejectedCall <br> * <br> * Purpose: <br> *  Informs the message filter that an call from this process has <br> *  been rejected or delayed from a local or remote server, thus <br> *  asking the message filter what to do. <br> * <br> * Parameters: <br> *  hTaskCallee     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the call was made <br> *  dwRejectType    DWORD either SERVERCALL_REJECTED or <br> *                  SERVERCALL_RETRYLATER as returned by <br> *                  HandleInComingCall. <br> * <br> * Return Value: <br> *  DWORD           (DWORD)-1 to cancel the call, any number between <br> *                  0 and 100 to try the call again immediately, or <br> *                  a value over 100 (but not (DWORD)-1) to instruct <br> *                  COM to wait that many milliseconds before trying <br> *                  again. <br> */ <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::RetryRejectedCall <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType) <br>    { <br>    UINT    uRet; <br>    TCHAR   szMsg[256]; <br> <br>    /* <br>     * A message is pointless as ObjectUserWndProc will <br>     * output a message as soon as the call returns, overwriting <br>     * anything we might print here. <br>     */ <br>    if (SERVERCALL_REJECTED==dwRejectType) <br>        return (DWORD)-1; <br> <br>    wsprintf(szMsg, TEXT("RetryRejectedCall waiting %lu") <br>        , dwTickCount); <br>    m_pApp-&gt;Message(szMsg); <br> <br> <br>    /* <br>     * If we've waited over 5 seconds, put up the busy dialog. <br>     * Otherwise continue waiting. <br>     */ <br>    if (dwTickCount &lt; 5000) <br>        return 200; <br> <br>    m_pApp-&gt;Message <br>        (TEXT("CMessageFilter::RetryRejectedCall showing busy dialog")); <br> <br>    uRet=DisplayBusyDialog(htaskCallee, 0L); <br> <br>    switch (uRet) <br>        { <br>        case OLEUI_CANCEL: <br>            return (DWORD)-1; <br> <br>        case OLEUI_BZ_SWITCHTOSELECTED: <br>            /* <br>             * This case won't happen without BZ_NOTRESPONDINGDIALOG, <br>             * but we would wait maybe 10 seconds if it did. <br>             */ <br>            return 10000; <br> <br>        case OLEUI_BZ_RETRYSELECTED: <br>            m_pApp-&gt;Message(TEXT("Waiting another second")); <br>            return 1000; <br> <br>        default: <br>            break; <br>        } <br> <br>    return 0; <br>    } <br> <br> <br> <br>/* <br> * CMessageFilter::MessagePending <br> * <br> * Purpose: <br> *  Gives the caller a chance to process messages while waiting for <br> *  a call to an object to complete, to handle things like focus <br> *  changes and input.  Usually returning PENDINGMSG_DEFPROCESS <br> *  takes care of most things, except that it discards input.  This <br> *  function is really useful is you want to process input while <br> *  a call is in progress. <br> * <br> * Parameters: <br> *  hTaskCallee     HTASK of the caller <br> *  dwTickCount     DWORD elapsed tick count since the call was made <br> *  dwPendingType   DWORD with the type of call made from the <br> *                  PENDINGTYPE enumeration. <br> * <br> * Return Value: <br> *  DWORD           One of PENDINGMSG_CANCELCALL (cancels the call <br> *                  under extreme conditions), PENDINGMSG_WAITNO- <br> *                  PROCESS (continue waiting), or PENDINGMSG_WAIT- <br> *                  DEFPROCESS (invoke default handling). <br> */ <br> <br>STDMETHODIMP_(DWORD) CMessageFilter::MessagePending <br>    (HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType) <br>    { <br>    return PENDINGMSG_WAITDEFPROCESS; <br>    } <br> <br> <br> <br> <br> <br> <br> <br>/* <br> * CMessageFilter::DisplayBusyDialog <br> * <br> * Purpose: <br> *  Invokes the standard Busy dialog using hTask to find the <br> *  window handle of the server that's busy. <br> * <br> * Parameters: <br> *  hTask           HTASK received in the message filter. <br> *  dwFlags         DWORD flags to use when invoking the dialog <br> * <br> * Return Value: <br> *  UINT            Result of the dialog, one of OLEUI_BZ_: <br> *                  SWITCHTOSELECTED, RETRYSELECTED, CALLUNBLOCKED. <br> */ <br> <br>UINT CMessageFilter::DisplayBusyDialog(HTASK hTask, DWORD dwFlags) <br>    { <br>    OLEUIBUSY   bz; <br> <br>    //Clear out everything we don't use <br>    memset(&amp;bz, 0, sizeof(bz)); <br> <br>    bz.cbStruct=sizeof(OLEUIBUSY); <br>    bz.dwFlags=dwFlags; <br>    bz.hWndOwner=m_pApp-&gt;m_hWnd; <br>    bz.hTask=hTask; <br>    bz.lphWndDialog=NULL; <br> <br>    return OleUIBusy(&amp;bz); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KOALA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context522"></a>KOALA.CPP</h2>
<pre><code>/* <br> * KOALA.CPP <br> * Koala Object with Custom Marshaling, Chapter 6 <br> * <br> * Implementation of the CKoala object with a custom interface <br> * to demonstrate local/remote transparency. <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "koala.h" <br> <br> <br>/* <br> * ObjectWndProc <br> * <br> * Purpose: <br> *  Standard window class procedure for each object. <br> */ <br> <br>LRESULT APIENTRY ObjectWndProc(HWND hWnd, UINT iMsg <br>    , WPARAM wParam, LPARAM lParam) <br>    { <br>    PCKoala     pKoala; <br> <br>    pKoala=(PCKoala)GetWindowLong(hWnd, OBJECTWL_STRUCTURE); <br> <br>    switch (iMsg) <br>        { <br>        case WM_NCCREATE: <br>            pKoala=(PCKoala)(((LPCREATESTRUCT)lParam)-&gt;lpCreateParams); <br>            SetWindowLong(hWnd, OBJECTWL_STRUCTURE, (LONG)pKoala); <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br> <br>        case WM_COMMAND: <br>            //Dispatch the call to the right object <br>            return pKoala-&gt;HandleCall(LOWORD(wParam), lParam); <br> <br>        default: <br>            return (DefWindowProc(hWnd, iMsg, wParam, lParam)); <br>        } <br> <br>    return 0L; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::CKoala <br> * CKoala::~CKoala <br> * <br> * Parameters (Constructor): <br> *  pfnDestroy      PFNDESTROYED to call when an object <br> *                  is destroyed. <br> */ <br> <br>CKoala::CKoala(PFNDESTROYED pfnDestroy) <br>    { <br>    m_cRef=0; <br>    m_pfnDestroy=pfnDestroy; <br> <br>    m_fJustAte=FALSE; <br>    m_cSleepAfterEat=0; <br>    return; <br>    } <br> <br> <br>CKoala::~CKoala(void) <br>    { <br>    if (NULL!=m_hWnd) <br>        DestroyWindow(m_hWnd); <br> <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CKoala::Init <br> * <br> * Purpose: <br> *  Performs any intiailization of a CKoala that's prone to failure <br> *  that we also use internally before exposing the object outside. <br> * <br> * Parameters: <br> *  hInst           HINSTANCE of the application. <br> *  hWndParent      HWND in which to create our window <br> * <br> * Return Value: <br> *  BOOL            TRUE if the function is successful, <br> *                  FALSE otherwise. <br> */ <br> <br>BOOL CKoala::Init(HINSTANCE hInst, HWND hWndParent) <br>    { <br>    //Create our window that receives marshaling calls <br>    m_hWnd=CreateWindow(TEXT("KoalaObject"), TEXT("KoalaObject") <br>        , WS_CHILD, 35, 35, 35, 25, hWndParent, NULL <br>        , hInst, this); <br> <br>    if (NULL==m_hWnd) <br>        return FALSE; <br> <br>    return TRUE; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::HandleCall <br> * <br> * Purpose: <br> *  Handles messages sent via custom marshaling from the client <br> *  side proxy. <br> * <br> * Parameters: <br> *  iMsg            UINT identifying the call made. <br> *  lParam          LPARAM with extra information. <br> * <br> * Return Value: <br> *  DWORD           Value to return to the proxy which it uses <br> *                  in whatever way it must to return a value to <br> *                  the client. <br> */ <br> <br>DWORD CKoala::HandleCall(UINT iMsg, LPARAM lParam) <br>    { <br>    DWORD       dw; <br>    short       iRet=0; <br> <br>    /* <br>     * You'll notice that all the important server-side <br>     * implementation of the object exists here instead of <br>     * separate interface implementations.  Everything <br>     * else is contained in the client-side proxy, who knows <br>     * when there's no point at all in calling a function <br>     * on the server side (such as with some of the IKoala <br>     * functions that don't do anything. <br>     */ <br> <br>    switch (iMsg) <br>        { <br>        case MSG_RELEASE:          //Last IUnknown::Release <br>            /* <br>             * There is only one reference count from <br>             * IClassFactory::CreateInstance, which the proxy <br>             * will own.  The proxy sends this message when <br>             * it detects the last Release from the client. <br>             * Otherwise it doesn't forward AddRef/Release calls. <br>             */ <br>            Release(); <br>            break; <br> <br>        case MSG_EAT: <br>            m_fJustAte=TRUE; <br>            break; <br> <br>        case MSG_SLEEP:            //IAnimal::Sleep <br>            //Client's in-parameter in LOWORD(lParam) <br>            iRet=LOWORD(lParam)+m_cSleepAfterEat; <br>            m_fJustAte=FALSE;     //Probably want to eat again <br>            break; <br> <br>        case MSG_PROCREATE:        //IAnimal::Procreate <br>            dw=GetTickCount()/100; <br> <br>            iRet=((dw/10)*10==dw) ? 1 : 0; <br>            break; <br> <br>        case MSG_SLEEPAFTEREATING: //IKoala::SleepAfterEating <br>            m_cSleepAfterEat=LOWORD(lParam); <br>            break; <br> <br>        default: <br>            break; <br>        } <br> <br>    return iRet; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::QueryInterface <br> * CKoala::AddRef <br> * CKoala::Release <br> * <br> * Purpose: <br> *  IUnknown members for CKoala object. <br> */ <br> <br>STDMETHODIMP CKoala::QueryInterface(REFIID riid, PPVOID ppv) <br>    { <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IMarshal==riid <br>        || IID_IAnimal==riid || IID_IKoala==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::AddRef(void) <br>    { <br>    return ++m_cRef; <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CKoala::Release(void) <br>    { <br>    if (0L!=--m_cRef) <br>        return m_cRef; <br> <br>    if (NULL!=m_pfnDestroy) <br>        (*m_pfnDestroy)(); <br> <br>    delete this; <br>    return 0; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::GetUnmarshalClass <br> * <br> * Purpose: <br> *  Determines the class of object to be used to create an <br> *  uninitalized proxy in the unmarshaling process. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID to the interface to be marshaled. <br> *  dwCtx           DWORD specifying the relation of the processes <br> *                  between which the marshaling is occuring, from the <br> *                  MSHCTX enumeration. <br> *  pvCtx           LPVOID Reserved for future MSHCTX values. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> *  pClsID          LPCLSID in which to store the proxy CLSID. <br> */ <br> <br>STDMETHODIMP CKoala::GetUnmarshalClass(REFIID riid <br>    , LPVOID pv, DWORD dwCtx, LPVOID pvCtx, DWORD dwFlags <br>    , LPCLSID pClsID) <br>    { <br>   #ifdef WIN32 <br>    /* <br>     * If the context is on a different machine we cannot use <br>     * our custom marshaling based on SendMessage. <br>     */ <br>    if (dwCtx &amp; MSHCTX_DIFFERENTMACHINE) <br>        return ResultFromScode(E_FAIL); <br>   #endif <br> <br>    //Same proxy for all interfaces. <br>    *pClsID=CLSID_KoalaProxy; <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CKoala::GetMarshalSizeMax <br> * <br> * Purpose: <br> *  Returns the upper memory bound needed to write data into a stream <br> *  for IMarshal::MarshalInterface. <br> * <br> * Parameters: <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> *  dwDestCtx       DWORD with the destination context from MSHCTX. <br> *  pvDestCtx       LPVOID reserved for future MSHCTX flags. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> *  pdwSize         LPDWORD in which the size is returned. <br> */ <br> <br>STDMETHODIMP CKoala::GetMarshalSizeMax(REFIID riid, LPVOID pv <br>    , DWORD dwDestCtx, LPVOID pvDestCtx, DWORD dwFlags <br>    , LPDWORD pdwSize) <br>    { <br>   #ifdef WIN32 <br>    if (dwDestCtx &amp; MSHCTX_DIFFERENTMACHINE) <br>        return ResultFromScode(E_FAIL); <br>   #endif <br> <br>    *pdwSize=sizeof(KOALAMARSHAL); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::MarshalInterface <br> * <br> * Purpose: <br> *  Stores a marshaling packet in a stream for use by a client-side <br> *  proxy. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM into which to marshal the interface. <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> *  dwDestCtx       DWORD with the destination context from MSHCTX. <br> *  pvDestCtx       LPVOID reserved for future MSHCTX flags. <br> *  dwFlags         DWORD specifying why marshaling is taking place. <br> */ <br> <br>STDMETHODIMP CKoala::MarshalInterface(LPSTREAM pstm <br>    , REFIID riid, LPVOID pv, DWORD dwDestCtx, LPVOID pvDestCtx <br>    , DWORD dwFlags) <br>    { <br>    KOALAMARSHAL        km; <br> <br>   #ifdef WIN32 <br>    if (dwDestCtx &amp; MSHCTX_DIFFERENTMACHINE) <br>        return ResultFromScode(E_FAIL); <br>   #endif <br> <br>    //Proxy only needs to know where to send messages <br>    km.hWnd=m_hWnd; <br> <br>    //This is for the client who will call Release when needed <br>    AddRef(); <br> <br>    //Write the marshaling packet to the stream <br>    return pstm-&gt;Write((void *)&amp;km, sizeof(KOALAMARSHAL), NULL); <br>    } <br> <br> <br> <br> <br> <br>/* <br> * CKoala::UnmarshalInterface <br> * <br> * Purpose: <br> *  Initializes a newly created proxy the marshaling packet in <br> *  the stream created in the server-side implementation of <br> *  MarshalInterface.  This is the primary member of this interface <br> *  used on the client side proxy. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM to the stream containing marshal <br> *                  data. <br> *  riid            REFIID of the interface to be marshaled. <br> *  pv              LPVOID of the interface to be marshaled. <br> */ <br> <br>STDMETHODIMP CKoala::UnmarshalInterface(LPSTREAM pstm <br>    , REFIID riid, LPVOID *pv) <br>    { <br>    //No need to implement on server side <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoala::ReleaseMarshalData <br> * <br> * Purpose: <br> *  Destroy a marshaled data packet, client-side only. <br> * <br> * Parameters: <br> *  pStm            LPSTREAM containing the data to release. <br> */ <br> <br>STDMETHODIMP CKoala::ReleaseMarshalData(LPSTREAM pstm) <br>    { <br>    //Client-side function <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br> <br> <br>/* <br> * CKoala::Disconnect <br> * <br> * Purpose: <br> *  Instructs an object with custom marshaling that it's being <br> *  disconnected. <br> * <br> * Parameters: <br> *  dwReserved      DWORD reserved. <br> */ <br> <br>STDMETHODIMP CKoala::DisconnectObject(DWORD dwReserved) <br>    { <br>    /* <br>     * This is generated from within CoDisconnectObject, which <br>     * our server doesn't call itself.  This would give the object <br>     * a chance to close its connection and cleanup before going <br>     * away since the proxy will no longer be calling it. <br>     * This should also be used to block any additional calls <br>     * made after this point. <br>     */ <br> <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAGES.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context553"></a>PAGES.H</h2>
<pre><code>/* <br> * PAGES.H <br> * Patron Chapter 7 <br> * <br> * Definitions and function prototypes for the Pages window control <br> * as well as the CPage and CTenant classes. <br> * <br> * Copyright (c)1993-1996 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Software Design Engineer <br> * Microsoft Systems Developer Relations <br> * <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#ifndef _PAGES_H_ <br>#define _PAGES_H_ <br> <br>//We need this for UICursorLoad and new-style cursors. <br>#include &lt;bttncur.h&gt; <br> <br> <br>//Versioning. <br>#define VERSIONMAJOR                2 <br>#define VERSIONMINOR                0 <br>#define VERSIONCURRENT              0x00020000 <br> <br>//Classname <br>#define SZCLASSPAGES                TEXT("pages") <br> <br>#define HIMETRIC_PER_INCH           2540 <br>#define LOMETRIC_PER_INCH           254 <br>#define LOMETRIC_BORDER             60          //Border around page <br> <br> <br>//Window extra bytes and offsets <br>#define CBPAGESWNDEXTRA             (sizeof(LONG)) <br>#define PAGEWL_STRUCTURE            0 <br> <br> <br> <br>//CHAPTER7MOD <br> <br>/* <br> * Tenant class describing an individual piece of data in a page. <br> * It knows where it sits, what object is inside of it, and what <br> * its identifer is such that it can find it's storage within a <br> * page. <br> */ <br> <br>//Patron Objects clipboard format <br>typedef struct tagPATRONOBJECT <br>    { <br>    POINTL      ptl;        //Location of object <br>    POINTL      ptlPick;    //Pick point from drag-drop operation <br>    SIZEL       szl;        //Extents of object (absolute) <br>    FORMATETC   fe;         //Actual object format <br>    } PATRONOBJECT, *PPATRONOBJECT; <br> <br> <br> <br>//Values for hit-testing, drawing, and resize-tracking tenants <br>#define CXYHANDLE       5 <br> <br>//Tenant creation types (not persistent) <br>typedef enum <br>    { <br>    TENANTTYPE_NULL=0, <br>    TENANTTYPE_STATIC, <br>    } TENANTTYPE, *PTENANTTYPE; <br> <br> <br>//State flags <br>#define TENANTSTATE_DEFAULT      0x00000000 <br>#define TENANTSTATE_SELECTED     0x00000001 <br> <br> <br>/* <br> * Persistent information we need to save for each tenant, which is <br> * done in the tenant list instead of with each tenant.  Since this <br> * is a small structure it's best not to blow another stream for it <br> * (overhead).  (fSetExtent used in compound documents later on.) <br> */ <br>typedef struct tagTENANTINFO <br>    { <br>    DWORD       dwID; <br>    RECTL       rcl; <br>    FORMATETC   fe;             //Excludes ptd <br>    short       fSetExtent;     //Call IOleObject::SetExtent on Run <br>    } TENANTINFO, *PTENANTINFO; <br> <br> <br>class CTenant <br>    { <br>    private: <br>        HWND            m_hWnd;         //Pages window <br>        DWORD           m_dwID;         //Persistent DWORD ID <br>        DWORD           m_cOpens;       //Count calls to FOpen <br> <br>        BOOL            m_fInitialized; //Something here? <br>        LPUNKNOWN       m_pObj;         //The object here <br>        LPSTORAGE       m_pIStorage;    //Sub-storage for tenant <br> <br>        FORMATETC       m_fe;           //Used to create the object <br>        DWORD           m_dwState;      //State flags <br>        RECTL           m_rcl;          //Space of this object <br>        CLSID           m_clsID;        //Object class (for statics) <br>        BOOL            m_fSetExtent;   //Call SetExtent on next run <br> <br>        class CPages   *m_pPG;          //Pages window <br> <br>    protected: <br>        HRESULT CreateStatic(LPDATAOBJECT, LPFORMATETC <br>            , LPUNKNOWN *); <br> <br>    public: <br>        CTenant(DWORD, HWND, CPages *); <br>        ~CTenant(void); <br> <br>        DWORD       GetID(void); <br>        UINT        GetStorageName(LPTSTR); <br>        UINT        UCreate(TENANTTYPE, LPVOID, LPFORMATETC, LPPOINTL <br>                        , LPSIZEL, LPSTORAGE, PPATRONOBJECT, DWORD); <br>        BOOL        FLoad(LPSTORAGE, PTENANTINFO); <br>        void        GetInfo(PTENANTINFO); <br>        BOOL        FOpen(LPSTORAGE); <br>        void        Close(BOOL); <br>        BOOL        Update(void); <br>        void        Destroy(LPSTORAGE); <br> <br>        void        Select(BOOL); <br>        BOOL        Activate(LONG); <br>        void        Draw(HDC, DVTARGETDEVICE *, HDC, int, int <br>                        , BOOL, BOOL); <br>        void        Repaint(void); <br>        void        Invalidate(void); <br> <br>        void        ObjectGet(LPUNKNOWN *); <br>        void        FormatEtcGet(LPFORMATETC, BOOL); <br>        void        SizeGet(LPSIZEL, BOOL); <br>        void        SizeSet(LPSIZEL, BOOL); <br>        void        RectGet(LPRECTL, BOOL); <br>        void        RectSet(LPRECTL, BOOL); <br>    }; <br> <br> <br>typedef CTenant *PCTenant; <br> <br>//Return codes for UCreate <br>#define UCREATE_FAILED              0 <br>#define UCREATE_GRAPHICONLY         1 <br>#define UCREATE_PLACEDOBJECT        2 <br> <br> <br> <br>typedef struct tagTENANTLIST <br>    { <br>    DWORD       cTenants; <br>    DWORD       dwIDNext; <br>    } TENANTLIST, *PTENANTLIST; <br> <br>#define SZSTREAMTENANTLIST        OLESTR("Tenant List") <br> <br>//Delay timer used in mouse debouncing <br>#define IDTIMER_DEBOUNCE          120 <br>//End CHAPTER7MOD <br> <br> <br> <br>/* <br> * Page class describing an individual page and what things it <br> * contains, managing an IStorage for us. <br> * <br> * A DWORD is used to identify this page as the name of the storage <br> * is the string form of this ID.  If we added a page every second, <br> * it would take 136 years to overrun this counter, so we can <br> * get away with saving it persistently.  I hope this software is <br> * obsolete by then. <br> */ <br> <br>class CPage <br>    { <br>    private: <br>        DWORD       m_dwID;             //Persistent identifier <br>        LPSTORAGE   m_pIStorage;        //Substorage for this page <br>        //CHAPTER7MOD <br>        HWND        m_hWnd;             //Pages window <br>        DWORD       m_cOpens;           //Calls to FOpen <br> <br>        class CPages *m_pPG;            //Pages window <br> <br>        DWORD       m_dwIDNext; <br>        DWORD       m_cTenants; <br>        HWND        m_hWndTenantList;   //Listbox; our tenant list <br> <br>        UINT        m_iTenantCur; <br>        PCTenant    m_pTenantCur; <br> <br>        UINT        m_uHTCode;          //Last hit-test/mouse move <br>        UINT        m_uSizingFlags;     //Restrictions on sizing <br>        BOOL        m_fTracking;        //Tracking resize? <br>        RECTL       m_rclOrg;           //Original before tracking <br>        RECTL       m_rcl;              //Tracking rectangle <br>        RECTL       m_rclBounds;        //Boundaries f/size tracking <br>        HDC         m_hDC;              //Tracking hDC <br> <br>        BOOL        m_fSizePending;     //Waiting for debounce? <br>        int         m_cxyDist;          //Debounce distance <br>        UINT        m_cDelay;           //Debounce delay <br>        POINTS      m_ptDown;           //Point of click to debounce <br>        DWORD       m_fTimer;           //Timer active? <br> <br>    protected: <br>        BOOL         FTenantGet(UINT, PCTenant *, BOOL); <br>        BOOL         FTenantAdd(UINT, DWORD, PCTenant *); <br>        LPDATAOBJECT TransferObjectCreate(LPPOINTL); <br> <br>        //PAGEMOUS.CPP <br>        UINT         TenantFromPoint(UINT, UINT, PCTenant *); <br>        //End CHAPTER7MOD <br> <br>    public: <br>        //CHAPTER7MOD <br>        CPage(DWORD, HWND, class CPages *); <br>        //End CHAPTER7MOD <br>        ~CPage(void); <br> <br>        DWORD       GetID(void); <br>        BOOL        FOpen(LPSTORAGE); <br>        void        Close(BOOL); <br>        BOOL        Update(void); <br>        void        Destroy(LPSTORAGE); <br>        UINT        GetStorageName(LPTSTR); <br> <br>        //CHAPTER7MOD <br>        void        Draw(HDC, int, int, BOOL, BOOL); <br> <br>        BOOL        TenantCreate(TENANTTYPE, LPVOID, LPFORMATETC <br>                        , PPATRONOBJECT, DWORD); <br>        BOOL        TenantDestroy(void); <br>        BOOL        TenantClip(BOOL); <br>        BOOL        FQueryObjectSelected(HMENU); <br> <br>        //PAGEMOUSE.CPP <br>        BOOL        OnLeftDown(UINT, UINT, UINT); <br>        BOOL        OnLeftDoubleClick(UINT, UINT, UINT); <br>        BOOL        OnLeftUp(UINT, UINT, UINT); <br>        void        OnMouseMove(UINT, int, int); <br>        void        OnTimer(UINT); <br>        void        StartSizeTracking(void); <br>        void        OnNCHitTest(UINT, UINT); <br>        BOOL        OnSetCursor(UINT); <br>        //End CHAPTER7MOD <br>    }; <br> <br>typedef CPage *PCPage; <br> <br> <br> <br>/* <br> * Structures to save with the document describing the device <br> * configuration and pages that we have.  This is followed by <br> * a list of DWORD IDs for the individual pages. <br> */ <br> <br>typedef struct tagDEVICECONFIG <br>    { <br>    DWORD       cb;                         //Size of structure <br>    TCHAR       szDriver[CCHDEVICENAME]; <br>    TCHAR       szDevice[CCHDEVICENAME]; <br>    TCHAR       szPort[CCHDEVICENAME]; <br>    DWORD       cbDevMode;                  //Size of actual DEVMODE <br>    DEVMODE     dm;                         //Variable <br>    } DEVICECONFIG, *PDEVICECONFIG; <br> <br>//Offset to cbDevMode <br>#define CBSEEKOFFSETCBDEVMODE  (sizeof(DWORD)   \ <br>                               +(3*CCHDEVICENAME*sizeof(TCHAR))) <br> <br> <br>//CHAPTER7MOD <br>//Combined OLE and Patron device structures. <br>typedef struct tagCOMBINEDEVICE <br>    { <br>    DVTARGETDEVICE  td; <br>    DEVICECONFIG    dc; <br>    } COMBINEBDEVICE, *PCOMBINEDEVICE; <br>//End CHAPTER7MOD <br> <br> <br>typedef struct tagPAGELIST <br>    { <br>    DWORD       cPages; <br>    DWORD       iPageCur; <br>    DWORD       dwIDNext; <br>    } PAGELIST, *PPAGELIST; <br> <br> <br>//PAGEWIN.CPP <br>LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL    APIENTRY AbortProc(HDC, int); <br>BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br>void             RectConvertMappings(LPRECT, HDC, BOOL); <br> <br> <br>class CPages : public CWindow <br>    { <br>    friend LRESULT APIENTRY PagesWndProc(HWND, UINT, WPARAM, LPARAM); <br>    friend BOOL    APIENTRY PrintDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    friend class CPage; <br>    friend class CTenant; <br> <br>    protected: <br>        //CHAPTER7MOD <br>        PCPage      m_pPageCur;             //Current page <br>        //End CHAPTER7MOD <br>        UINT        m_iPageCur;             //Current page <br>        UINT        m_cPages;               //Number of pages <br> <br>        HWND        m_hWndPageList;         //Listbox with page list <br>        HFONT       m_hFont;                //Page font <br>        BOOL        m_fSystemFont;          //m_hFont system object? <br> <br>        UINT        m_cx;                   //Page size in LOMETRIC <br>        UINT        m_cy; <br> <br>        UINT        m_xMarginLeft;          //Unusable margins, <br>        UINT        m_xMarginRight;         //in LOMETRIC <br>        UINT        m_yMarginTop; <br>        UINT        m_yMarginBottom; <br> <br>        UINT        m_xPos;                 //Viewport scroll pos, <br>        UINT        m_yPos;                 //both in *PIXELS* <br> <br>        DWORD       m_dwIDNext;             //Next ID for a page. <br>        LPSTORAGE   m_pIStorage;            //Root storage <br> <br>        //CHAPTER7MOD <br>        UINT        m_cf;                   //Clipboard format <br>        BOOL        m_fDirty; <br>        //End CHAPTER7MOD <br> <br>    protected: <br>        void      Draw(HDC, BOOL, BOOL); <br>        void      UpdateScrollRanges(void); <br>        BOOL      ConfigureForDevice(void); <br>        BOOL      FPageGet(UINT, PCPage *, BOOL); <br>        BOOL      FPageAdd(UINT, DWORD, BOOL); <br> <br>        //CHAPTER7MOD <br>        void      CalcBoundingRect(LPRECT, BOOL); <br>        //End CHAPTER7MOD <br> <br>    public: <br>        //CHAPTER7MOD <br>        CPages(HINSTANCE, UINT); <br>        //End CHAPTER7MOD <br>        ~CPages(void); <br> <br>        BOOL      FInit(HWND, LPRECT, DWORD, UINT, LPVOID); <br> <br>        BOOL      FIStorageSet(LPSTORAGE, BOOL, BOOL); <br>        BOOL      FIStorageUpdate(BOOL); <br> <br>        BOOL      Print(HDC, LPTSTR, DWORD, UINT, UINT, UINT); <br> <br>        void      RectGet(LPRECT); <br>        void      RectSet(LPRECT, BOOL); <br>        void      SizeGet(LPRECT); <br>        void      SizeSet(LPRECT, BOOL); <br> <br>        UINT      PageInsert(UINT); <br>        UINT      PageDelete(UINT); <br>        UINT      CurPageGet(void); <br>        UINT      CurPageSet(UINT); <br>        UINT      NumPagesGet(void); <br> <br>        BOOL      DevModeSet(HGLOBAL, HGLOBAL); <br>        HGLOBAL   DevModeGet(void); <br> <br>        //CHAPTER7MOD <br>        BOOL      FIsDirty(void); <br>        BOOL      DevReadConfig(PCOMBINEDEVICE *, HDC *); <br>        BOOL      TenantCreate(TENANTTYPE, LPVOID, LPFORMATETC <br>                      , PPATRONOBJECT, DWORD); <br>        BOOL      TenantDestroy(void); <br>        BOOL      TenantClip(BOOL); <br>        BOOL      FQueryObjectSelected(HMENU); <br>        //End CHAPTER7MOD <br>    }; <br> <br>typedef CPages *PCPages; <br> <br> <br>//Fixed names of streams in the Pages IStorage <br>#define SZSTREAMPAGELIST        OLESTR("Page List") <br>#define SZSTREAMDEVICECONFIG    OLESTR("Device Configuration") <br> <br> <br>#endif  //_PAGES_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

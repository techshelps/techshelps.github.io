<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IIPAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context975"></a>IIPAOBJ.CPP</h2>
<pre><code>/* <br> * IIPAOBJ.CPP <br> * Cosmo Chapter 23 <br> * <br> * IOleInPlaceActiveObject interface implementation for Cosmo <br> * <br> * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved <br> * <br> * Kraig Brockschmidt, Microsoft <br> * Internet  :  kraigb@microsoft.com <br> * Compuserve:  &gt;INTERNET:kraigb@microsoft.com <br> */ <br> <br> <br>#include "cosmo.h" <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::CImpIOleInPlaceActiveObject <br> * CImpIOleInPlaceActiveObject::~CImpIOleInPlaceActiveObject <br> * <br> * Parameters (Constructor): <br> *  pObj            PCFigure of the object we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleInPlaceActiveObject::CImpIOleInPlaceActiveObject <br>    (PCFigure pObj, LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleInPlaceActiveObject::~CImpIOleInPlaceActiveObject(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::QueryInterface <br> * CImpIOleInPlaceActiveObject::AddRef <br> * CImpIOleInPlaceActiveObject::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleInPlaceActiveObject object. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    /* <br>     * This interface should be stand-alone on an object such that <br>     * a container cannot QueryInterface for it through any other <br>     * object interface, relying instead of calls to SetActiveObject <br>     * for it. By implementing QueryInterface here ourselves, we <br>     * prevent such abuses.  Note that reference counting still <br>     * uses CFigure. <br>     */ <br> <br>    *ppv=NULL; <br> <br>    if (IID_IUnknown==riid || IID_IOleWindow==riid <br>        || IID_IOleInPlaceActiveObject==riid) <br>        *ppv=this; <br> <br>    if (NULL!=*ppv) <br>        { <br>        ((LPUNKNOWN)*ppv)-&gt;AddRef(); <br>        return NOERROR; <br>        } <br> <br>    return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceActiveObject::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleInPlaceActiveObject::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::GetWindow <br> * <br> * Purpose: <br> *  Retrieves the handle of the window associated with the object <br> *  on which this interface is implemented. <br> * <br> * Parameters: <br> *  phWnd           HWND * in which to store the window handle. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, E_FAIL if there is no <br> *                  window. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::GetWindow(HWND * phWnd) <br>    { <br>    *phWnd=m_pObj-&gt;m_pHW-&gt;Window(); <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::ContextSensitiveHelp <br> * <br> * Purpose: <br> *  Instructs the object on which this interface is implemented to <br> *  enter or leave a context-sensitive help mode. <br> * <br> * Parameters: <br> *  fEnterMode      BOOL TRUE to enter the mode, FALSE otherwise. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an error code <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::ContextSensitiveHelp <br>    (BOOL fEnterMode) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::TranslateAccelerator <br> * <br> * Purpose: <br> *  Requests that the active in-place object translate the message <br> *  given in pMSG if appropriate. <br> * <br> * Parameters: <br> *  pMSG            LPMSG to the message to translate. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if translates, S_FALSE if not. <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::TranslateAccelerator <br>    (LPMSG pMSG) <br>    { <br>    //This is only used for DLL objects. <br>    return ResultFromScode(S_FALSE); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::OnFrameWindowActivate <br> * <br> * Purpose: <br> *  Informs the in-place object that the container's frame window <br> *  was either activated or deactivated.  When the frame is <br> *  activated, the object can change its toolbar interface to <br> *  reflect a non-activated state as desired.  Usually you don't <br> *  have to do anything. <br> * <br> * Parameters: <br> *  fActivate       BOOL TRUE if the frame is active, FALSE <br> *                  otherwise <br> * Return Value: <br> *  HRESULT         NOERROR or an error code <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::OnFrameWindowActivate <br>    (BOOL fActivate) <br>    { <br>    //Nothing for us to do. <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::OnDocWindowActivate <br> * <br> * Purpose: <br> *  Informs the in-place object that the document window in the <br> *  container is either becoming active or deactive.  On this call <br> *  the object must either add or remove frame-level tools, <br> *  including the mixed menu, depending on fActivate. <br> * <br> * Parameters: <br> *  fActivate       BOOL TRUE if the document is active, FALSE <br> *                  otherwise <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an error code <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::OnDocWindowActivate <br>    (BOOL fActivate) <br>    { <br>    HWND        hWndTB; <br> <br>    if (NULL==m_pObj-&gt;m_pIOleIPFrame) <br>        return NOERROR; <br> <br>    hWndTB=m_pObj-&gt;m_pTB-&gt;Window(); <br> <br>    if (fActivate) <br>        { <br>       #ifdef WIN32ANSI <br>        OLECHAR     szTemp[40]; <br> <br>        MultiByteToWideChar(CP_ACP, 0 <br>            , (*m_pObj-&gt;m_pST)[IDS_INPLACETITLE], -1, szTemp, 40); <br>        m_pObj-&gt;m_pIOleIPFrame-&gt;SetActiveObject(this, szTemp); <br>       #else <br>        m_pObj-&gt;m_pIOleIPFrame-&gt;SetActiveObject(this <br>            , (*m_pObj-&gt;m_pST)[IDS_INPLACETITLE]); <br>       #endif <br> <br>        m_pObj-&gt;m_pIOleIPFrame-&gt;SetMenu(m_pObj-&gt;m_hMenuShared <br>            , m_pObj-&gt;m_hOLEMenu, m_pObj-&gt;m_pFR-&gt;Window()); <br> <br>        if (m_pObj-&gt;InPlaceToolsRenegotiate()) <br>            { <br>            RECT    rc; <br> <br>            m_pObj-&gt;m_pIOleIPFrame-&gt;GetBorder(&amp;rc); <br>            SetWindowPos(hWndTB, NULL, rc.left, rc.top <br>                , rc.right-rc.left, rc.top+m_pObj-&gt;m_cyBar <br>                , SWP_NOZORDER); <br> <br>            ShowWindow(hWndTB, SW_SHOW); <br>            } <br>        } <br>    else <br>        { <br>        m_pObj-&gt;m_pIOleIPFrame-&gt;SetActiveObject(NULL, NULL); <br> <br>        //Hide our tools, but do not call SetMenu <br>        ShowWindow(hWndTB, SW_HIDE); <br>        } <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::ResizeBorder <br> * <br> * Purpose: <br> *  Informs the object that the frame or document size changed in <br> *  which case the object may need to resize any of its frame or <br> *  document-level tools to match. <br> * <br> * Parameters: <br> *  pRect           LPCRECT indicating the new size of the window <br> *                  of interest. <br> *  pIUIWindow      LPOLEINPLACEUIWINDOW pointing to an <br> *                  IOleInPlaceUIWindow interface on the container <br> *                  object of interest.  We use this to do border- <br> *                  space negotiation. <br> *  fFrame          BOOL indicating if the frame was resized (TRUE) <br> *                  or the document (FALSE) <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an error code <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::ResizeBorder(LPCRECT pRect <br>    , LPOLEINPLACEUIWINDOW pIUIWindow, BOOL fFrame) <br>    { <br>    //The document case is uninteresting for us. <br>    if (!fFrame) <br>        return NOERROR; <br> <br>    if (!m_pObj-&gt;InPlaceToolsRenegotiate()) <br>        return ResultFromScode(INPLACE_E_NOTOOLSPACE); <br> <br>    SetWindowPos(m_pObj-&gt;m_pTB-&gt;Window(), NULL, pRect-&gt;left <br>        , pRect-&gt;top, pRect-&gt;right-pRect-&gt;left, m_pObj-&gt;m_cyBar <br>        , SWP_NOZORDER); <br> <br>    return NOERROR; <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleInPlaceActiveObject::EnableModeless <br> * <br> * Purpose: <br> *  Instructs the object to show or hide any modeless popup windows <br> *  that it may be using when activated in-place. <br> * <br> * Parameters: <br> *  fEnable         BOOL indicating to enable/show the windows <br> *                  (TRUE) or to hide them (FALSE). <br> * <br> * Return Value: <br> *  HRESULT         NOERROR or an error code <br> */ <br> <br>STDMETHODIMP CImpIOleInPlaceActiveObject::EnableModeless <br>    (BOOL fActivate) <br>    { <br>    return ResultFromScode(E_NOTIMPL); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context964"></a>README.TXT</h2>
<pre><code>To build a version of Component Cosmo that uses POLY23.DLL, copy <br>the sources from CHAP13\COCOSMO and modify the function <br>CCosmoDoc::FInit in DOCUMENT.CPP to use CLSID_Polyline23 instead <br>of CLSID_Polyline10 in the CoCreateInstance call: <br> <br>Nothing else in CoCosmo needs to change to use the revised Polyline. <br>Note that CoCosmo still uses the IPolyline10 interface on the Polyline <br>object.  For all intents and purposes, nothing should change at all <br>in the execution of CoCosmo, demonstrating how interfaces do not <br>interfere with each other:  CoCosmo ignores the compound document <br>interfaces. <br> <br> <br> <br>Just note how all the in-place activation support in Polyline does <br>not preclude Component Cosmo from using like a non-compound document <br>embedded object! <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

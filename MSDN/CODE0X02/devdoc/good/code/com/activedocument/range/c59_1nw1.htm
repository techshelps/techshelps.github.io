<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOWNLOAD.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context61"></a>DOWNLOAD.CPP</h2>
<pre><code>// =========================================================================== <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br>#include &lt;urlmon.h&gt; <br>#include &lt;wininet.h&gt; <br>// #include &lt;datapath.h&gt; <br>#include "range.h" <br>#include "callback.hpp" <br> <br>//============================================================================== <br>HRESULT GetAnInterface <br>( <br>    IUnknown  *     punk, <br>    const IID &amp;     riid, <br>    void **         pout, <br>    BOOL            bCheckServiceProvider, <br>    const IID &amp;     siid, <br>    const IID &amp;     siid_riid, <br>    void **         sout <br>) <br>{ <br>    IOleObject *      oleObj    = 0; <br>    IOleClientSite *  oleSite   = 0; <br>    IOleContainer *   container = 0; <br>    IUnknown *        service   = 0; <br> <br>    HRESULT       hr = E_FAIL; <br> <br>    // Initialize passed in interface pointers: calling code assumes NULL for failure <br>    if(pout) <br>        *pout = NULL; <br>    if(sout) <br>        *sout = NULL; <br> <br>    if(punk) <br>        hr = punk-&gt;QueryInterface( IID_IOleObject, (void **)&amp;oleObj ); <br> <br>    while( SUCCEEDED(hr) &amp;&amp; oleObj ) <br>    { <br>        if( oleSite ) <br>        { <br>            //oleSite-&gt;Release(); <br>            oleSite = 0; <br>        } <br> <br>        hr = oleObj-&gt;GetClientSite(&amp;oleSite); <br> <br>        if( FAILED(hr) ) <br>            break; <br> <br>        if( bCheckServiceProvider ) <br>        { <br>            IServiceProvider * servProv; <br> <br>            hr = oleSite-&gt;QueryInterface( IID_IServiceProvider, (void**)&amp;servProv); <br> <br>            if( SUCCEEDED(hr) ) <br>            { <br>                hr = servProv-&gt;QueryService <br>                    (siid, siid_riid, (void **) &amp;service); <br>                servProv-&gt;Release(); <br>            } <br> <br>            if( SUCCEEDED(hr) ) <br>            { <br>                bCheckServiceProvider = FALSE; <br> <br>                hr = service-&gt;QueryInterface( riid, pout ); <br>            } <br> <br>            if( SUCCEEDED(hr) ) <br>                break; <br> <br>        } <br> <br>        if( container ) <br>        { <br>            container-&gt;Release(); <br>            container = 0; <br>        } <br> <br>        hr = oleSite-&gt;GetContainer( &amp;container ); <br> <br>        if( FAILED(hr) ) <br>            break; <br> <br>        hr = container-&gt;QueryInterface( riid, pout ); <br> <br>        if( SUCCEEDED(hr) ) <br>            break; <br> <br>        oleObj-&gt;Release(); <br>        oleObj = 0; <br> <br>        hr = container-&gt;QueryInterface( IID_IOleObject, (void**)&amp;oleObj ); <br> <br>    } <br> <br>    if( oleSite ) <br>    { <br>        //oleSite-&gt;Release(); <br>    } <br> <br>    if( oleObj ) <br>        oleObj-&gt;Release(); <br> <br>    if( container ) <br>        container-&gt;Release(); <br> <br>    if( service ) <br>        *sout = service; <br> <br>    return( hr ); <br> <br>} <br> <br>//============================================================================== <br>BOOL HttpReadFromServer (PHTTP_REQUEST_PARAM pParam) <br>{ <br>    IMoniker*            m_pmk   = NULL; <br>    IBindStatusCallback* m_pbsc  = NULL; <br>    HRESULT hr = S_OK; <br>     <br>    IBindHost *pBindHost = NULL; <br> <br>    // Create a callback object. <br>    m_pbsc = new CUrlmonCallback (pParam); <br>    if (m_pbsc == NULL) <br>    { <br>        hr = E_OUTOFMEMORY; <br>        goto err; <br>    } <br> <br>    // Look for a bind host. <br>    if (pParam-&gt;punkOuter) <br>    { <br>        hr = GetAnInterface <br>        ( <br>            (IUnknown *) pParam-&gt;punkOuter, <br>            IID_IBindHost,           // const IID &amp;  riid, <br>            (void **) &amp;pBindHost,    // void **      pout,   <br>            TRUE,                    // BOOL         bCheckServiceProvider, <br>            IID_IBindHost,           // const IID &amp;  siid, <br>            IID_IBindHost,           // const IID &amp;  siid_riid, <br>            (void **) &amp;pBindHost     // void **      sout <br>        ); <br>    } <br> <br>    // Convert ANSI URL to Unicode. <br>    WCHAR wszUrl[INTERNET_MAX_URL_LENGTH]; <br>    MultiByteToWideChar(CP_ACP, 0, pParam-&gt;pszUrl, -1, wszUrl, sizeof(wszUrl)); <br> <br>    // Initialize bind context, stream. <br>    IBindCtx *pbc; <br>    IStream *pstm; <br>    pbc =  NULL; <br>    pstm = NULL; <br> <br>    // Call the appropriate BindToStorage. <br>    if (pBindHost) <br>    { <br>         pBindHost-&gt;CreateMoniker (wszUrl, NULL, &amp;m_pmk, 0); <br>         pBindHost-&gt;MonikerBindToStorage <br>             (m_pmk, NULL, m_pbsc, IID_IStream, (void **) &amp;pstm); <br>    }    <br>    else <br>    { <br>        CreateURLMoniker(NULL, wszUrl, &amp;m_pmk); <br>        CreateAsyncBindCtx(0, m_pbsc, NULL, &amp;pbc); <br>        m_pmk-&gt;BindToStorage(pbc, NULL, IID_IStream, (void **) &amp;pstm); <br>    } <br> <br>    // Clean up bind context, stream. <br>    if (pbc) <br>        pbc-&gt;Release(); <br>    if (pstm) <br>        pstm-&gt;Release(); <br> <br>    return SUCCEEDED(hr); <br> <br>err: <br>    delete m_pbsc; <br> <br>    if (m_pmk != NULL) <br>    { <br>        m_pmk-&gt;Release(); <br>        m_pmk = NULL; <br>    } <br>    return FALSE; <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CACHE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context64"></a>CACHE.CPP</h2>
<pre><code>// =========================================================================== <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br>#include &lt;windows.h&gt; <br>#include &lt;wininet.h&gt; <br>#include "range.h" <br> <br>//============================================================================== <br>BOOL QueryHeaders <br>( <br>     HANDLE                hRequest, <br>     PHTTP_REQUESTCB_PARAM pCBParam, <br>     SYSTEMTIME*           pstLastModified <br>) <br>{ <br>    DWORD cbBuf; <br>    BOOL fRet; <br> <br>    pCBParam-&gt;CallbackType     = REQUESTCB_STARTED; <br>    pCBParam-&gt;fdwRequestFlags  = HTTP_REQUEST_FROM_CACHE; <br>         <br>    // Get if the server supports ranges from the response headers. <br>    static char szBytes[] ="bytes"; <br>    char szBuf[sizeof(szBytes)]; <br>    cbBuf = sizeof(szBytes); <br>    fRet = HttpQueryInfo <br>        (hRequest, HTTP_QUERY_ACCEPT_RANGES, szBuf, &amp;cbBuf, 0); <br>    if (fRet &amp;&amp; !lstrcmpi (szBuf, szBytes)) <br>        pCBParam-&gt;fdwRequestFlags |= HTTP_REQUEST_ACCEPT_RANGES; <br> <br>    // Get the response code. <br>    cbBuf = sizeof(pCBParam-&gt;dwResponseCode); <br>    fRet = HttpQueryInfo <br>    ( <br>        hRequest, <br>        HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_STATUS_CODE, <br>        &amp;pCBParam-&gt;dwResponseCode, <br>        &amp;cbBuf, <br>        NULL <br>    ); <br>    if (!fRet) <br>       pCBParam-&gt;dwResponseCode = 0; <br>   <br>    // Get the last modified time from the response headers. <br>    cbBuf = sizeof(*pstLastModified); <br>    fRet = HttpQueryInfo <br>    ( <br>        hRequest, <br>        HTTP_QUERY_FLAG_SYSTEMTIME | HTTP_QUERY_LAST_MODIFIED, <br>        pstLastModified, <br>        &amp;cbBuf,  <br>        NULL <br>    ); <br>    pCBParam-&gt;pstLastModified = fRet? pstLastModified : NULL; <br> <br>    // Get the content length from the cache file size. <br>    pCBParam-&gt;dwContentLength = <br>        InternetSetFilePointer (hRequest, NULL, 0, FILE_END, 0); <br> <br>    return TRUE; <br>} <br> <br>//============================================================================== <br>BOOL HttpReadFromCache (PHTTP_REQUEST_PARAM pParam) <br>{ <br>    // Locals that must be initialized before goto done. <br>    BOOL fSuccess = FALSE; <br>    HANDLE hInternet = NULL; <br>    HANDLE hConnect  = NULL; <br>    HANDLE hRequest  = NULL; <br>    PVOID pRead = NULL; <br>    HRESULT hrRequest = S_OK; <br>     <br>    // Initialize wininet <br>    hInternet = InternetOpen <br>        ("RR", INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, INTERNET_FLAG_OFFLINE); <br>    if (!hInternet) <br>        goto done; <br>    hRequest = InternetOpenUrl <br>        (hInternet, pParam-&gt;pszUrl, NULL, 0, INTERNET_FLAG_OFFLINE, 0); <br>    if (!hRequest) <br>        goto done; <br> <br>    // Initialize callback parameters. <br>    HTTP_REQUESTCB_PARAM CBParam; <br>    CBParam.cbStruct         = sizeof(CBParam); <br>    CBParam.dwRequestCtx     = pParam-&gt;dwRequestCtx; <br> <br>    // Allocate read buffer <br>    DWORD cbRead; <br>    cbRead = 4096; <br>    pRead  = LocalAlloc (LMEM_FIXED, cbRead); <br>    if (!pRead) <br>    { <br>        SetLastError (ERROR_NOT_ENOUGH_MEMORY); <br>        goto done; <br>    } <br> <br>    SYSTEMTIME st; <br>    if (!QueryHeaders (hRequest, &amp;CBParam, &amp;st)) <br>        goto done; <br> <br>    fSuccess = TRUE; <br>     <br>    // Notify the client that request is started. <br>    if (!(*pParam-&gt;pfnRequestCB) (&amp;CBParam)) <br>        goto notify; <br> <br>    // Set up ranges to read.     <br>    HTTP_REQUEST_RANGE EntireRange; <br>    PHTTP_REQUEST_RANGE pRanges; <br>    DWORD cRanges; <br> <br>    if (pParam-&gt;cRanges) <br>    { <br>        pRanges = pParam-&gt;pRanges; <br>        cRanges = pParam-&gt;cRanges; <br>    } <br>    else <br>    { <br>        EntireRange.dwOffset = 0; <br>        EntireRange.dwSize = CBParam.dwContentLength;    <br>        pRanges = &amp;EntireRange; <br>        cRanges = 1; <br>    } <br> <br>    // Loop over the ranges, reading into the buffer. <br>    CBParam.CallbackType = REQUESTCB_DATA; <br>    CBParam.lpDataBuffer = pRead; <br> <br>    while (cRanges--) <br>    { <br>        CBParam.dwDataOffset = pRanges-&gt;dwOffset; <br>        DWORD cbRange        = pRanges-&gt;dwSize; <br>        if (!cbRange) <br>            cbRange = InternetSetFilePointer (hRequest, 0, NULL, FILE_END, 0) <br>              - pRanges-&gt;dwOffset; <br>               <br>        while (cbRange) // Loop until we have all the data for the range. <br>        { <br>            InternetSetFilePointer <br>                (hRequest, CBParam.dwDataOffset, NULL, FILE_BEGIN, 0); <br>             <br>            if (!InternetReadFile <br>                (hRequest, pRead, min(cbRead, cbRange), &amp;CBParam.cbDataLength)) <br>            { <br>                hrRequest = E_FAIL; <br>                goto notify; <br>            } <br> <br>            // Check for EOF <br>            if (!CBParam.cbDataLength) <br>                break; <br> <br>            // Call the client with data. <br>            if (!(*pParam-&gt;pfnRequestCB) (&amp;CBParam)) <br>                goto notify; <br> <br>            CBParam.dwDataOffset += CBParam.cbDataLength; <br>            cbRange              -= CBParam.cbDataLength; <br>        } <br> <br>        // Advance to next range. <br>        pRanges++; <br>         <br>    } // end while (cRanges--) <br> <br>notify: <br> <br>    // Notify the client we are done. <br>    CBParam.CallbackType = REQUESTCB_DONE; <br>    CBParam.hrRequest = hrRequest; <br>    (*pParam-&gt;pfnRequestCB) (&amp;CBParam); <br>     <br>done: <br>    if (pRead) <br>        LocalFree ((HLOCAL) pRead); <br>    if (hRequest) <br>        InternetCloseHandle (hRequest); <br>    if (hConnect) <br>        InternetCloseHandle (hConnect); <br>    if (hInternet) <br>        InternetCloseHandle (hInternet); <br>    return fSuccess; <br>} <br> <br>//============================================================================== <br>BOOL HttpReadRequest (PHTTP_REQUEST_PARAM pParam) <br>{ <br>    if (pParam-&gt;cbStruct != sizeof(HTTP_REQUEST_PARAM)) <br>    { <br>        SetLastError (ERROR_INVALID_PARAMETER); <br>        return FALSE; <br>    } <br> <br>    if (HttpReadFromCache (pParam)) <br>        return TRUE; <br>    return HttpReadFromServer (pParam); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

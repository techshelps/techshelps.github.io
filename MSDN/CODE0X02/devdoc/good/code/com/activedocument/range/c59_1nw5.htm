<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RECVBUF.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context65"></a>RECVBUF.CPP</h2>
<pre><code>// =========================================================================== <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br>#include "recvbuf.hpp" <br>#include &lt;limits.h&gt; <br> <br>#define upcase(c)  ((BYTE) CharUpper ((LPSTR) (BYTE) (c))) <br> <br>// --------------------------------------------------------------------------- <br>// CUrlmonCallback::BufScanStr <br>// Utility to seek for a string in a memory buffer. <br>// --------------------------------------------------------------------------- <br>BOOL RecvBuf::BufAlloc (DWORD dwSize) <br>{ <br>    m_cbBufSize = dwSize; <br>    m_pbBufBeg = (PBYTE) LocalAlloc (LMEM_FIXED, m_cbBufSize); <br>    if (!m_pbBufBeg) <br>        return FALSE; <br>    m_pbBufEnd = m_pbBufBeg + m_cbBufSize; <br>    m_pbDataBeg = m_pbBufBeg; <br>    m_pbDataEnd = m_pbBufBeg; <br>    return TRUE; <br>} <br> <br>// --------------------------------------------------------------------------- <br>// CUrlmonCallback::SeekPastString <br>// Utility to seek for a string in a memory buffer. <br>// --------------------------------------------------------------------------- <br>BOOL RecvBuf::BufScanStr (PSTR pszSearch, DWORD cbSearch) <br>{ <br>PBYTE pbLimit = m_pbDataEnd - cbSearch; <br> <br>while (1) <br>{ <br>    DWORD ibSearch; <br>     <br>// Check for overflow. <br>if (m_pbDataBeg &gt;= pbLimit) <br>return FALSE; <br> <br>    for (ibSearch = 0; ibSearch &lt; cbSearch; ibSearch++) <br>    { <br>        if (upcase(m_pbDataBeg[ibSearch]) != upcase(pszSearch[ibSearch])) <br>            break; <br>    } <br> <br>    if (ibSearch == cbSearch) <br>    { <br>        // Found it. <br>           m_pbDataBeg += cbSearch; <br>        return TRUE; <br>    } <br>    else <br>    { <br>        m_pbDataBeg++; <br>        continue; <br>    } <br>} <br>} <br> <br>// --------------------------------------------------------------------------- <br>// Utility to scan a 32-bit integer from memory buffer. <br>// Returns FALSE on integer overflow or end of buffer. <br>// --------------------------------------------------------------------------- <br>BOOL RecvBuf::BufScanInt (DWORD *pdwRet, BYTE cDelimit) <br>{ <br>DWORD dwRet = 0; <br> <br>// Scan past non-delimiters and non-digits. <br>while (*m_pbDataBeg != cDelimit &amp;&amp; !isdigit(*m_pbDataBeg)) <br>{ <br>if (++m_pbDataBeg &gt;= m_pbDataEnd) <br>return FALSE; <br>} <br> <br>while (*m_pbDataBeg != cDelimit) <br>{ <br>if (!isdigit(*m_pbDataBeg)) <br>return FALSE; <br>if (dwRet &gt; ULONG_MAX / 10) <br>return FALSE; <br>dwRet *= 10; <br>dwRet += *m_pbDataBeg - '0'; <br>if (++m_pbDataBeg &gt;= m_pbDataEnd) <br>return FALSE; <br>} <br> <br>*pdwRet = dwRet; <br>return TRUE; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

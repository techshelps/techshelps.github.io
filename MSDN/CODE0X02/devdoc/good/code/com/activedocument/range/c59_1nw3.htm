<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RANGE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context63"></a>RANGE.H</h2>
<pre><code>/*=========================================================================== <br>Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br> <br>THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>PARTICULAR PURPOSE. <br> <br>OVERVIEW OF INTERFACE <br> <br>The client calls HttpReadRequest to specify the URL, a callback function,  <br>and an optional array of read ranges.  First, the callback will be notified <br>of the http response code, content length, last modified time, whether  <br>ranges are supported by the server, and whether the file is from the cache.   <br>Next, it may be called repeatedly with data which must be processed during the  <br>call.  Finally, it will indicate completion and an error if any.  Within the <br>callback, a client can initiate a new HttpReadRequest and/or return FALSE to <br>stop the current request. <br> <br>All ActiveX controls can use this interface.  Other applications must satisfy <br>some requirements due to an implicit dependency on URL moniker.  The client <br>thread must have a message loop.  Before calling HttpReadRequest, the client <br>process must have called CoInitialize or OleInitialize.  After exiting the <br>message loop, the client process must call CoUninitialize or OleUninitialize. <br>===========================================================================*/ <br> <br>#ifndef _RANGE_ <br>#define _RANGE_ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;objbase.h&gt; <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>// =========================================================================== <br>// Callback parameter structure and prototype <br>// =========================================================================== <br> <br>// Callback Types: <br>typedef enum  <br>{ <br>REQUESTCB_STARTED  = 0, <br>REQUESTCB_DATA     = 1, <br>REQUESTCB_DONE     = 2, <br>} <br>HTTP_REQUESTCB_TYPE; <br> <br>// Callback parameters: valid only during the current call. <br>typedef struct <br>{ <br>DWORD  cbStruct;       // will be sizeof(HTTP_CALLBACK_PARAM) <br>    DWORD  dwRequestCtx;   // context passed in to HttpReadRequest <br>    HTTP_REQUESTCB_TYPE CallbackType;   // callback type as defined above <br>     <br>    union <br>    { <br>        struct // fields used if CallbackType == REQUESTCB_STARTED <br>{ <br>    DWORD       fdwRequestFlags;  // fields as defined below <br>    DWORD       dwResponseCode;   // status code (0 if unknown) <br>    SYSTEMTIME* pstLastModified;  // last modified (NULL if unknown) <br>            DWORD       dwContentLength;  // content length (0 if unknown) <br>}; <br> <br>        struct // fields used if CallbackType == REQUESTCB_DATA <br>        { <br>    DWORD       dwDataOffset;     // offset of data <br>    LPVOID      lpDataBuffer;     // pointer to data <br>    DWORD       cbDataLength;     // amount of data <br>}; <br> <br>struct // fields used if CallbackType == REQUESTCB_DONE <br>{ <br>            HRESULT     hrRequest;        // values defined in urlmon.h <br>}; <br>}; <br>} <br>HTTP_REQUESTCB_PARAM, *PHTTP_REQUESTCB_PARAM; <br> <br>// Fields for HTTP_REQUESTCB_PARAM.fdwRequestFlags: <br>#define HTTP_REQUEST_FROM_CACHE       1 <br>#define HTTP_REQUEST_ACCEPT_RANGES    2  <br> <br>// Callback function supplied by client: <br>typedef BOOL (*PFN_REQUESTCB) (PHTTP_REQUESTCB_PARAM); <br> <br>// =========================================================================== <br>// HttpReadRequest parameter structure and prototype <br>// =========================================================================== <br> <br>// Structure for specifying a read range: <br>typedef struct <br>{ <br>DWORD dwOffset;     // offset of data within the URL <br>DWORD dwSize;       // amount of data (0 means until end of file) <br>} <br>HTTP_REQUEST_RANGE, *PHTTP_REQUEST_RANGE; <br> <br>// Read request parameters must remain valid until REQUEST_COMPLETE: <br>typedef struct <br>{ <br>DWORD               cbStruct;        // must be sizeof(HTTP_REQUEST_PARAM) <br> LPVOID              punkOuter;       // controlling IUnknown (may be NULL) <br>    PCSTR               pszUrl;          // URL to request via http <br>PFN_REQUESTCB       pfnRequestCB;    // request callback function <br>    DWORD               dwRequestCtx;    // context to pass to callback <br> <br>    // Optional fields for specifying ranges, otherwise set all to 0: <br>    PHTTP_REQUEST_RANGE pRanges;                // array of read ranges <br>    DWORD               cRanges;                // number of ranges <br>    SYSTEMTIME*         pstUnlessModifiedSince; // unless-modified-since time <br>} <br>HTTP_REQUEST_PARAM, *PHTTP_REQUEST_PARAM; <br> <br>// Function called by client to initiate http read request. <br>BOOL HttpReadRequest    (PHTTP_REQUEST_PARAM); // try cache first <br>BOOL HttpReadFromServer (PHTTP_REQUEST_PARAM); // bypass cache <br> <br>#ifdef __cplusplus <br>} // extern "C" { <br>#endif <br> <br>#endif // _RANGE_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

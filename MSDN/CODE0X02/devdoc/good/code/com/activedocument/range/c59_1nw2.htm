<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RANGE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context62"></a>RANGE.C</h2>
<pre><code>// =========================================================================== <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 Microsoft Corporation.  All Rights Reserved. <br>// =========================================================================== <br>#include &lt;windows.h&gt; <br>#include &lt;urlmon.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "range.h" <br> <br>DWORD g_dwThread; <br> <br>//============================================================================== <br>void DumpBytes (PBYTE pBuf, DWORD cbBuf) <br>{ <br>    DWORD i; <br>    for (i=0; i&lt;cbBuf; i++) <br>    { <br>        switch(pBuf[i]) <br>        { <br>            case 10:  printf("[LF]"); break; <br>            case 13:  printf("[CR]"); break; <br>            default:  printf("%c", pBuf[i]); break; <br>        } <br>    } <br>} <br> <br>//============================================================================== <br>void PrintResultCode (HRESULT hr) <br>{ <br>#define CASEMSG(hr) case hr: printf(#hr); break; <br> <br>printf ("Done with result "); <br>switch (hr) <br>{ <br>CASEMSG(S_OK) <br>CASEMSG(S_FALSE) <br>CASEMSG(E_FAIL) <br> <br>        CASEMSG(INET_E_INVALID_URL) <br>CASEMSG(INET_E_NO_SESSION) <br>CASEMSG(INET_E_CANNOT_CONNECT) <br>CASEMSG(INET_E_RESOURCE_NOT_FOUND) <br>CASEMSG(INET_E_OBJECT_NOT_FOUND) <br>CASEMSG(INET_E_DATA_NOT_AVAILABLE) <br>CASEMSG(INET_E_DOWNLOAD_FAILURE) <br>CASEMSG(INET_E_AUTHENTICATION_REQUIRED) <br>CASEMSG(INET_E_NO_VALID_MEDIA)   <br>CASEMSG(INET_E_CONNECTION_TIMEOUT) <br>CASEMSG(INET_E_INVALID_REQUEST) <br>CASEMSG(INET_E_UNKNOWN_PROTOCOL) <br>CASEMSG(INET_E_SECURITY_PROBLEM) <br>CASEMSG(INET_E_CANNOT_LOAD_DATA) <br>CASEMSG(INET_E_CANNOT_INSTANTIATE_OBJECT) <br> <br>default: <br>    printf ("0x%x", hr); <br>} <br>printf ("\n"); <br>} <br> <br>//============================================================================== <br>BOOL RequestCallback (PHTTP_REQUESTCB_PARAM pCBParam) <br>{ <br>    printf ("RequestCallback[%d] ", pCBParam-&gt;dwRequestCtx); <br> <br>    switch (pCBParam-&gt;CallbackType) <br>    { <br>        case REQUESTCB_STARTED: <br>            printf ("Started\n"); <br>            printf ("  Status: %d\n", pCBParam-&gt;dwResponseCode); <br>            printf ("  Content-Length: %d\n", pCBParam-&gt;dwContentLength); <br>            if (pCBParam-&gt;fdwRequestFlags &amp; HTTP_REQUEST_ACCEPT_RANGES) <br>                printf ("  Accept-Ranges: bytes\n"); <br>            if (pCBParam-&gt;fdwRequestFlags &amp; HTTP_REQUEST_FROM_CACHE) <br>                printf ("  From Cache\n"); <br>            return TRUE; <br> <br>        case REQUESTCB_DATA: <br> <br>    // Dump some bytes so we can verify them. <br>    printf ("offset=%5d got %4d bytes:", <br>        pCBParam-&gt;dwDataOffset, pCBParam-&gt;cbDataLength); <br>    DumpBytes ((PBYTE) pCBParam-&gt;lpDataBuffer, min(pCBParam-&gt;cbDataLength, 15)); <br>    printf ("\n"); <br>    return TRUE; <br> <br>        case REQUESTCB_DONE: <br>            PrintResultCode (pCBParam-&gt;hrRequest); <br>            // Let the console app thread exit the message loop. <br>            PostThreadMessage (g_dwThread, WM_QUIT, 0, 0); <br>            return TRUE; <br>} <br>} <br> <br>//============================================================================== <br>int __cdecl main (int argc, char *argv[]) <br>{ <br>    MSG msg; <br>    HTTP_REQUEST_PARAM Param; <br> <br>    SYSTEMTIME st; <br>    PSTR pszUrl; <br>    HTTP_REQUEST_RANGE ranges[10]; <br>    DWORD cRanges; <br> <br>    // Check usage. <br>    if (argc&lt;2 || argc%2 || argc&gt;(2*(sizeof(ranges))/sizeof(ranges[0]))) <br>    { <br>        fprintf (stderr, "Usage:   range &lt;http-url&gt; [&lt;offset1&gt; &lt;size1&gt;]  [&lt;offset2&gt; &lt;size2&gt;]  [&lt;offset3&gt; &lt;size3&gt;]  ...\n"); <br>        fprintf (stderr, "Example: range http://www.microsoft.com 2 5 10 52 20 4\n"); <br>        exit (1); <br>    } <br> <br>    // Get URL and ranges from command line. <br>    pszUrl = argv[1]; <br>    cRanges = 0; <br>    while (argc -= 2) <br>    { <br>if (argc &lt;= 0) <br>break; <br> <br>    ranges[cRanges].dwOffset = atoi(argv[2 * cRanges + 2]); <br>    ranges[cRanges].dwSize   = atoi(argv[2 * cRanges + 3]); <br>        cRanges++; <br>    } <br> <br>    // Pass current time as unless-modified-since time. <br>    GetSystemTime (&amp;st); <br>     <br>    // Save the thread ID so the we can post ourselves <br>    // WM_QUIT from the callback without creating a window. <br>    g_dwThread = GetCurrentThreadId(); <br> <br>    // Read range depends on URL monikers which depend on COM. <br>    if (FAILED(CoInitialize(NULL))) <br>        exit (1); <br>     <br>    // Initiate the read range request. <br>    ZeroMemory (&amp;Param, sizeof(Param)); <br>    Param.cbStruct     = sizeof(Param); <br>    Param.pszUrl       = pszUrl; <br>    Param.pfnRequestCB = RequestCallback; <br>    Param.dwRequestCtx = 15; <br>    Param.pRanges      = &amp;ranges[0]; <br>    Param.cRanges      = cRanges; <br>    Param.pstUnlessModifiedSince = &amp;st; <br>       <br>    if (HttpReadRequest (&amp;Param)) <br>    { <br>        // Must enter a message loop for the binding to progress. <br>        while (GetMessage (&amp;msg, NULL, 0, 0)) <br>        { <br>            TranslateMessage (&amp;msg); <br>            DispatchMessage (&amp;msg); <br>        } <br>    } <br> <br>    CoUninitialize(); <br>    return 1; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FRAMER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context50"></a>FRAMER.H</h2>
<pre><code>/* <br> * FRAMER.H <br> * Document Objects Framer <br> * Definitions of classes, constants, etc. <br> * Includes in-line implementation of CHourGlass, CWindow <br> * <br> * Copyright (c)1995-1997 Microsoft Corporation, All Rights Reserved <br> */ <br> <br> <br>#ifndef _FRAMER_H_ <br>#define _FRAMER_H_ <br> <br>#define INC_OLE2 <br>#include &lt;docobj.h&gt; <br> <br> <br>#include &lt;tchar.h&gt; <br>#ifdef UNICODE <br>#include &lt;wchar.h&gt; <br>#endif <br> <br>extern "C" <br>    { <br>    #include &lt;commdlg.h&gt; <br>    } <br> <br> <br>#include "resource.h" <br> <br> <br>//DeleteInterfaceImp calls 'delete' and NULLs the pointer <br>#define DeleteInterfaceImp(p)\ <br>            {\ <br>            if (NULL!=p)\ <br>                {\ <br>                delete p;\ <br>                p=NULL;\ <br>                }\ <br>            } <br> <br> <br>//ReleaseInterface calls 'Release' and NULLs the pointer <br>#define ReleaseInterface(p)\ <br>            {\ <br>            IUnknown *pt=(IUnknown *)p;\ <br>            p=NULL;\ <br>            if (NULL!=pt)\ <br>                pt-&gt;Release();\ <br>            } <br> <br> <br> <br>class CHourglass; <br>class CFrame; <br>class CSite; <br> <br> <br>/** <br> ** CFrame encapsulates a main application window <br> **/ <br> <br>//FRAMEWIN.CPP:  Standard window procedure and AboutProc <br>LRESULT APIENTRY FrameWndProc(HWND, UINT, WPARAM, LPARAM); <br>LRESULT APIENTRY ClientWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL    APIENTRY AboutProc(HWND, UINT, WPARAM, LPARAM); <br> <br>#define CBFRAMEWNDEXTRA     sizeof(LONG) <br>#define FRAMEWL_STRUCTURE   0 <br> <br>#define CBCLIENTWNDEXTRA    sizeof(LONG) <br>#define CLIENTWL_STRUCTURE  0 <br> <br>#define SZCLASSFRAME        TEXT("Frame") <br>#define SZCLASSCLIENT       TEXT("Client") <br> <br> <br>//FRAME.CPP:  Frame object that creates a main window <br> <br>class CFrame : public IOleInPlaceFrame, public IOleCommandTarget <br>    { <br>    //Let our window procedure look in our private variables. <br>    friend LRESULT APIENTRY FrameWndProc(HWND, UINT, WPARAM, LPARAM); <br>friend LRESULT APIENTRY ClientWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    protected: <br>        HINSTANCE       m_hInst;            //Task instance <br>        HWND            m_hWnd;             //Window handle of the window <br>        ULONG           m_cRef;  <br> <br>        HINSTANCE       m_hInstPrev;        //WinMain parameters <br>        LPTSTR          m_pszCmdLine; <br>        int             m_nCmdShow;         <br> <br>        HMENU          *m_phMenu;           //Popup menu handles <br>        HACCEL          m_hAccel;           //Accelerators <br>        HWND            m_hWndClient;       //Client area window <br> <br>        BOOL            m_fInitialized;     //OleInitialize called? <br>        IStorage       *m_pIStorage;        //Temp file for all needs <br>        DWORD           m_dwIDCounter;      //For site IDs <br> <br>        //For menu merging <br>        HMENU           m_hMenuOrg;         //Original menu <br>        HMENU           m_hMenuTop;//Currently shown menu <br>HMENUm_hMenuHelp;//Special Help menu <br>BOOLm_fUsingOurHelp;//Help menu in use? <br>        BOOLm_fInObjectHelp;//Object's menu found? <br>        BOOL            m_fOurMenuShowing;  //Our menu up? <br> <br>        //Other object needs <br>        BOOL            m_fHaveObject;      //For menu enabling <br>HWNDm_hWndObj;//UI Active object <br> <br>        class CSite    *m_pSite;            //Site holding object         <br>        BORDERWIDTHS    m_bwIP;             //In-place tool allocations <br>        BOOL            m_fInContextHelp;   //In context help mode? <br> <br>        IOleInPlaceActiveObject *m_pIOleIPActiveObject; <br> <br>    protected: <br>        BOOL    RegisterAllClasses(void);         <br>        LRESULT OnCommand(HWND, WPARAM, LPARAM); <br>        BOOL    OpenDialog(LPTSTR, UINT); <br>        BOOL    CreateObject(LPTSTR); <br>voidResizeClientWindow(UINT, UINT, UINT, UINT); <br> <br>    public: <br>        CFrame(HINSTANCE, HINSTANCE, LPSTR, int); <br>        ~CFrame(void); <br> <br>        inline HINSTANCE Instance(void) <br>        { return m_hInst; } <br> <br>        inline HWND      Window(void) <br>        { return m_hWnd; }         <br> <br>        inline HACCEL    Accelerators(void) <br>        { return m_hAccel; }         <br> <br>        BOOL    Init(UINT, int, int, int, int); <br>        WPARAM  MessageLoop(void); <br>void    Close();         <br> <br>        //Shared IUnknown implementation <br>        STDMETHODIMP         QueryInterface(REFIID, void **); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>//IOleInPlaceFrame implementation <br>        STDMETHODIMP         GetWindow(HWND *); <br>        STDMETHODIMP         ContextSensitiveHelp(BOOL); <br>        STDMETHODIMP         GetBorder(LPRECT); <br>        STDMETHODIMP         RequestBorderSpace(LPCBORDERWIDTHS); <br>        STDMETHODIMP         SetBorderSpace(LPCBORDERWIDTHS); <br>        STDMETHODIMP         SetActiveObject(LPOLEINPLACEACTIVEOBJECT <br>                                 , LPCOLESTR); <br>        STDMETHODIMP         InsertMenus(HMENU, LPOLEMENUGROUPWIDTHS); <br>        STDMETHODIMP         SetMenu(HMENU, HOLEMENU, HWND); <br>        STDMETHODIMP         RemoveMenus(HMENU); <br>        STDMETHODIMP         SetStatusText(LPCOLESTR); <br>        STDMETHODIMP         EnableModeless(BOOL); <br>        STDMETHODIMP         TranslateAccelerator(LPMSG, WORD); <br> <br>//IOleCommandTarget <br>        STDMETHODIMP QueryStatus(const GUID *pguidCmdGroup, ULONG cCmds <br>            , OLECMD prgCmds[], OLECMDTEXT *pCmdText); <br>         <br>        STDMETHODIMP Exec(const GUID *pguidCmdGroup, DWORD nCmdID <br>            , DWORD nCmdexecopt, VARIANTARG *pvaIn, VARIANTARG *pvaOut);             <br>    }; <br> <br> <br>typedef CFrame *PCFrame; <br> <br> <br> <br>/** <br> ** CHourglass:  Manages the hourglass and mouse capture <br> **/ <br> <br>class CHourglass <br>    { <br>    protected: <br>        HWND            m_hWndCapture;      //Window with capture <br>        HCURSOR         m_hCur;             //Cursor held. <br> <br>    public: <br>        CHourglass(void) <br>            { <br>            m_hCur=SetCursor(LoadCursor(NULL, IDC_WAIT)); <br>            m_hWndCapture=NULL; <br>            return; <br>            } <br> <br>        CHourglass(HWND hWnd) <br>            { <br>            m_hCur=SetCursor(LoadCursor(NULL, IDC_WAIT)); <br> <br>            if (NULL!=hWnd) <br>                { <br>                m_hWndCapture=hWnd; <br>                SetCapture(hWnd); <br>                } <br> <br>            return; <br>            } <br> <br>        ~CHourglass(void) <br>            { <br>            if (NULL!=m_hWndCapture) <br>                ReleaseCapture(); <br> <br>            SetCursor(m_hCur); <br>            return; <br>            } <br>    }; <br> <br>typedef CHourglass *PCHourglass; <br> <br> <br>#include "site.h" <br> <br>#endif //_FRAMER_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

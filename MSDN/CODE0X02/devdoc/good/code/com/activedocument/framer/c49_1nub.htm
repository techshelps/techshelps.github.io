<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDOCSITE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context53"></a>IDOCSITE.CPP</h2>
<pre><code>/* <br> * IDOCSITE.CPP <br> * IOleDocumentSite for Document Objects CSite class <br> * <br> * Copyright (c)1995-1997 Microsoft Corporation, All Rights Reserved <br> */ <br> <br> <br>#include "framer.h" <br> <br> <br>/* <br> * CImpIOleDocumentSite::CImpIOleDocumentSite <br> * CImpIOleDocumentSite::~CImpIOleDocumentSite <br> * <br> * Parameters (Constructor): <br> *  pSite           PCSite of the site we're in. <br> *  pUnkOuter       LPUNKNOWN to which we delegate. <br> */ <br> <br>CImpIOleDocumentSite::CImpIOleDocumentSite(PCSite pSite <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_cRef=0; <br>    m_pSite=pSite; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    } <br> <br>CImpIOleDocumentSite::~CImpIOleDocumentSite(void) <br>    { <br>    return; <br>    } <br> <br> <br> <br>/* <br> * CImpIOleDocumentSite::QueryInterface <br> * CImpIOleDocumentSite::AddRef <br> * CImpIOleDocumentSite::Release <br> * <br> * Purpose: <br> *  IUnknown members for CImpIOleDocumentSite object. <br> */ <br> <br>STDMETHODIMP CImpIOleDocumentSite::QueryInterface(REFIID riid <br>    , void **ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br> <br>STDMETHODIMP_(ULONG) CImpIOleDocumentSite::AddRef(void) <br>    { <br>    ++m_cRef; <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIOleDocumentSite::Release(void) <br>    { <br>    --m_cRef; <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br> <br> <br> <br> <br>/* <br> * CImpIOleDocumentsite::ActivateMe <br> * <br> * Purpose: <br> *  Instructs the container to activate the object in this site as <br> *  a document object. <br> * <br> * Parameters: <br> *  pView           IOleDocumentView * of the object to activate. <br> * <br> * Return Value: <br> *  HRESULT         NOERROR if successful, error code otherwise. <br> */ <br> <br>STDMETHODIMP CImpIOleDocumentSite::ActivateMe(IOleDocumentView *pView) <br>    { <br>    RECT                rc; <br>    IOleDocument*       pDoc; <br>     <br>    /* <br>     * If we're passed a NULL view pointer, then try to get one from <br>     * the document object (the object within us). <br>     */ <br>    if (NULL==pView) <br>        { <br> <br>        if (FAILED(m_pSite-&gt;m_pObj-&gt;QueryInterface(IID_IOleDocument <br>            , (void **)&amp;pDoc))) <br>            return E_FAIL; <br> <br>        if (FAILED(pDoc-&gt;CreateView(m_pSite-&gt;m_pImpIOleIPSite <br>            , m_pSite-&gt;m_pIStream, 0, &amp;pView)))             <br>            return E_OUTOFMEMORY; <br> <br>        // Release doc pointer since CreateView is a good com method that addrefs <br>        pDoc-&gt;Release(); <br>        }         <br>    else <br>        { <br>        //Make sure that the view has our client site <br>        pView-&gt;SetInPlaceSite(m_pSite-&gt;m_pImpIOleIPSite); <br> <br>        //We're holding onto the pointer, so AddRef it. <br>        pView-&gt;AddRef(); <br>        } <br> <br> <br>    /* <br>     * Activation steps, now that we have a view: <br>     * <br>     *  1.  Call IOleDocumentView::SetInPlaceSite (assume done since <br>     *      either the view already knows, or IOleDocument::CreateView <br>     *      has done it already. <br>     * <br>     *  2.  Call IOleDocumentView::SetRect to give a bunch of space to <br>     *      the view.  In our case this is the whole client area of <br>     *      the CPages window.  (Patron doesn't use SetRectComplex) <br>     * <br>     *  3.  Call IOleDocumentView::Show to make the thing visible. <br>     * <br>     *  4.  Call IOleDocumentView::UIActivate to finish the job. <br>     * <br>     */ <br> <br>    m_pSite-&gt;m_fDocObj=TRUE; <br>    m_pSite-&gt;m_pIOleDocView=pView; <br>     <br>    //This sets up toolbars and menus first     <br>    pView-&gt;UIActivate(TRUE); <br> <br>    //Set the window size sensitive to new toolbars <br>    GetClientRect(m_pSite-&gt;m_hWnd, &amp;rc); <br>    pView-&gt;SetRect(&amp;rc); <br> <br>//Makes it all active <br>    pView-&gt;Show(TRUE);     <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

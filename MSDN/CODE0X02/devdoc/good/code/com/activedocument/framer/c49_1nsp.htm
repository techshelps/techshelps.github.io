<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context49"></a>README.TXT</h2>
<pre><code>====================================================== <br>Notes for Active Documents "Framer" (Container) Sample <br>====================================================== <br> <br>Framer is intended to demonstrate simple Active Document Objects hosting as <br>a container.  That is, Framer demonstrates the basic support necessary to <br>host Active Documents.  It is implemented according to the guidlines in the <br>"Active Documents Specification" document and has been tested against <br>Microsoft Word and Microsoft Excel as well as a few other OLE-enabled <br>applications that do not support Active Documents. <br> <br> <br>Framer itself has almost nothing in the way of its own user interface such <br>as a more complete host would, such as the Office Binder.  Framer has these <br>menu commands available: <br> <br>    Command     Description <br>    ---------------------------------------------------------------------- <br>    File Open   Displays a File Open dialog and allows the user to select <br>                a file.  Framer will attempt to activate the file as an  <br>                Active Document.  Failing that it will create a standard <br>                embedded object and activate it in a separate window. <br>                This command is disabled when an object already exists. <br>                File/Close must be used before creating another object. <br> <br>    File Close  Closes the document that is currently open; if the object <br>                is just an embedding it will destroy that object which has <br>                the effect of closing the server as well.  Try opening <br>                a .BMP file (which should activate PaintBrush, for instance) <br>                and use Close to see the effect.  There are some variations to <br>this behavior (see next section below). <br> <br>    File Exit   Performs File/Close if necessary and terminates Framer. <br> <br>    Help About  Displays Framer's About box.  This command exists to <br>                demonstrate Active Document Help menu merging. <br> <br> <br>Whenever Framer knows it has an object it displays a small message in its <br>client area to remind you that you have to File/Close before creating another. <br> <br> <br>Creating and Activating an Object <br>--------------------------------- <br> <br>Framer allows you to open documents regardless of whether or not <br>there is a server that supports Active Documents for the document <br>type and regardless of whether or not the document server even knows <br>about Active Documents at all.   <br> <br>When you "Open" a file in Framer, the code call OleCreateFromFile to create <br>an embedded object from the contents of the file.  This has two possible <br>results: <br> <br>    1.  If there is an Active Documents server associated with the file, <br>        an embedded object initialized with the file contents is created. <br> <br>    2.  If there is not an Active Documents server associated with the file, <br>        a package object is created. <br> <br>Immediately after creation, Framer activates the object with IOleObject::DoVerb <br>passing OLEIVERB_SHOW. <br> <br>If the object is a true embedding with server support, one of two things <br>will happen: <br> <br>    1a. If the object doesn't know about Active Documents, it is activated in <br>        another window.  Using File/Close in this case will close the server. <br>        Closing the server itself will cause Framer to do the equivalent <br>        of File/Close, which frees the object and re-enables File/Open. <br>        See CImpIIAdviseSink::OnClose in iadvsink.cpp.  The closing <br>        sequence is in CFrame::Close in framer.cpp.  Using Framer with the <br>    Paint application will demonstrate this behavior. <br> <br>    1b. If the object has Active Document support, then its server will start <br>        activation sequence, primarily by calling IOleDocumentSite::ActivateMe <br>        which is found in idocsite.cpp.  Inside this member, Framer <br>        then performs the standard sequence of document object activation <br>        steps.  After these steps the Active Document will be fully <br>        interactive; using File/Close on the menu, which Framer still owns, <br>        will deactivate the object through CFrame::Close which performs the <br>        same set of steps as in #1b above.  Using Framer with Microsoft Word <br>    will demonstrate this behavior. <br> <br> <br>If you activate a package object, the result is that you launch an application <br>and have it open the file.  Since the application has no OLE support in it <br>whatsoever, there is no communication link between Framer and that application. <br>This means that closing Framer will not close that other application.  This is <br>what one observes with opening a .TXT file in Framer which will launch Notepad. <br>Once Notepad is running, it's separate and disconnected from Framer.  You have <br>to close Notepad manually. <br> <br>Framer might have been written to disallow insertion of files that do not have <br>Active Documents support.  Framer rather demonstrates how to view any file <br>regardless of server support. <br> <br> <br> <br>Help Menu Merging <br>----------------- <br> <br>Framer implements the container side of the Help menu merging protocol <br>described in the Active Documents Specification.  This involves the members <br>CFrame::InsertMenus, CFrame::SetMenu, and CFrame::RemoveMenus.  The <br>InsertMenus method will install Framer's Help menu in the correct location <br>on the shared menu.  The container-side popup used here is loaded from <br>Framer's resources on startup in CFrame::Init. <br> <br>Inside CFrame::SetMenu, Framer checks if there's more than one item on <br>the menu added in InsertMenus.  If so, then Framer remembers this fact <br>for later message handling.  Otherwise Framer removes this menu from the <br>shared menu entirely as the dicument object itself isn't using this shared <br>capability. <br> <br>Inside CFrame::RemoveMenus, Framer simply makes sure that its own Help <br>menu is removed as it should be. <br> <br>The really interesting stuff happens in FrameWndProc (framer.cpp) in the <br>WM_INITMENU, WM_INITMENUPOPUP, WM_MENUSELECT, and WM_COMMAND cases.  Inside <br>WM_INITMENU Framer clears a flag that indicates whether the last popup menu <br>that was being used was the object's additions to the Help menu.  Inside <br>WM_MENUSELECT, Framer checks if the originating menu is a popup and if so, <br>it checks if that popup is on the shared "Help" popup, and if that is also <br>true then Framer checks if the item being used is the first one or some <br>other one.  The first item is what Framer knows to be its own Help item, so <br>it just handles the messages as usual.  Otherwise the user is working with <br>an Active Document-owned menu, so Framer sets the flag m_fInObjectHelp variable <br>to TRUE and forwards the message to the object's window (available from <br>IOleInPlaceObject::GetWindow). <br> <br>As long as m_fInObjectHelp is set, Framer will forward WM_COMMAND, <br>WM_INITMENUPOPUP, and WM_MENUSELECT messages.  As soon as another <br>WM_MENUSELECT message is seen for another non-object menu, then Framer <br>will reset the flag and begin processing messages once again itself. <br> <br>In this way you'll see, with Microsoft Word for example, the correct <br>behavior of a shared Help popup.  Note that Microsoft Excel does not <br>exhibit this shared Help menu behavior as it only displays its own <br>Help menus. <br> <br> <br> <br>Known Feature Limitations <br>------------------------- <br>1.  Framer does not print so it does not use the IPrint interface nor does <br>    it implement IContinueCallback. <br> <br>2.  Framer does nothing with command targets. <br> <br>3.  Framer does not forward owner-draw menu messages to the object which <br>    means that if owner-draw menus are used in a DocObject help menu, <br>    this sample will not work correctly. <br> <br>4.  Framer does not provide for actually saving any changes made to an <br>    Active Document.  Because an Active Document is an embedding, Framer has <br>    to provide an instance of IStorage through IPersistStorage::InitNew <br>    or IPersistStorage::Load.  It does this using a temporary Compound File <br>    that is deleted when Framer exits.  Therefore any changes made to the data <br>    in the Active Document will simply be discarded. <br> <br> <br>Potential for Better UI <br>----------------------- <br> <br>The item #4 above takes a little more explanation.  When OleCreateFromFile is <br>used in the File/Open command, Framer is making a COPY of the file contents. <br>When an Active Document is activated with this content, the document has a copy <br>of the file contents, not the contents of the file itself.  Therefore any <br>changes made there will not be reflected back into the original file, although <br>Framer's UI suggests that this should happen. <br> <br>A real Active Document container like the Office Binder actually stores all the <br>object data in its own Compound File, not as separate files.  If one needs <br>to have an Active Document save into a separate file, then the container needs <br>to either use command-targets or has to call IPersistFile::Save to accomplish <br>this step. <br> <br>In short, Active Documents is not about activating the apps that manipulate <br>files; it's about activating embedded *documents* saved within the container <br>file *as if* those documents were stand alone. <br> <br>Framer's UI, which is really inappropriate for DocObjects, exists as it does <br>for simplicity's sake. <br> <br>A more appropraite container application would maintain its own "files" in <br>which it collected data from a number of other "documents" which are stored <br>simply as embedded objects.  The Office Binder does exactly this, where <br>a "Binder" is a Compound File with sub-storages for each "section" in the <br>document. <br> <br>Certainly with some more work on UI, Framer could become such an application. </code></pre>
<p>&nbsp;</p></body>
</HTML>

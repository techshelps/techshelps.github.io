<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLSFACT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context45"></a>CLSFACT.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          ClsFact.cpp <br>    <br>   Description:   CClassFactory implementation <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "ClsFact.h" <br> <br>/************************************************************************** <br>   global variables <br>**************************************************************************/ <br> <br>extern DWORD   g_DllRefCount; <br> <br>/************************************************************************** <br> <br>   CClassFactory::CClassFactory <br> <br>**************************************************************************/ <br> <br>CClassFactory::CClassFactory() <br>{ <br>OutputDebugString(TEXT("CClassFactory's constructor\n")); <br> <br>m_ObjRefCount = 0; <br>} <br> <br>/************************************************************************** <br> <br>   CClassFactory::~CClassFactory <br> <br>**************************************************************************/ <br> <br>CClassFactory::~CClassFactory() <br>{ <br>OutputDebugString(TEXT("CClassFactory's destructor\n")); <br>} <br> <br>/************************************************************************** <br> <br>   CClassFactory::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CClassFactory::QueryInterface(  REFIID riid,  <br>                                             LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("CClassFactory::QueryInterface\n")); <br> <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = (LPUNKNOWN)(LPCLASSFACTORY)this; <br>   m_ObjRefCount++; <br>   return ResultFromScode(S_OK); <br>   } <br>    <br>if(IsEqualIID(riid, IID_IClassFactory)) <br>   { <br>   *ppReturn = (LPCLASSFACTORY)this; <br>   m_ObjRefCount++; <br>   return ResultFromScode(S_OK); <br>   }    <br> <br>*ppReturn = NULL; <br>return ResultFromScode(E_NOINTERFACE); <br>}                                              <br> <br>/************************************************************************** <br> <br>   CClassFactory::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CClassFactory::AddRef() <br>{ <br>OutputDebugString(TEXT("CClassFactory::AddRef\n")); <br> <br>return ++m_ObjRefCount; <br>} <br> <br> <br>/************************************************************************** <br> <br>   CClassFactory::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CClassFactory::Release() <br>{ <br>TCHAR szText[MAX_PATH]; <br>wsprintf(szText, TEXT("CClassFactory::Release - ref count will be %d\n"), m_ObjRefCount - 1); <br>OutputDebugString(szText); <br> <br>if(--m_ObjRefCount == 0) <br>   delete this; <br>    <br>return m_ObjRefCount; <br>} <br> <br>/************************************************************************** <br> <br>   CClassFactory::CreateInstance <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CClassFactory::CreateInstance(  LPUNKNOWN pUnknown,  <br>                                             REFIID riid,  <br>                                             LPVOID *ppObject) <br>{ <br>OutputDebugString(TEXT("CClassFactory::CreateInstance\n")); <br> <br>*ppObject = NULL; <br> <br>if(pUnknown != NULL) <br>   return ResultFromScode(CLASS_E_NOAGGREGATION); <br> <br>COleDocument *pOleDoc = new COleDocument; <br>if(NULL == pOleDoc) <br>   return ResultFromScode(E_OUTOFMEMORY); <br>   <br>//get the QueryInterface return for our return value <br>HRESULT hr = pOleDoc-&gt;QueryInterface(riid, ppObject); <br> <br>//return the result from QueryInterface <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   CClassFactory::LockServer <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CClassFactory::LockServer(BOOL fLock) <br>{ <br>OutputDebugString(TEXT("CClassFactory::LockServer - ")); <br> <br>if(fLock) <br>   { <br>   OutputDebugString(TEXT("Lock\n")); <br>   g_DllRefCount++; <br>   } <br>else <br>   { <br>   OutputDebugString(TEXT("Unlock\n")); <br>   g_DllRefCount--; <br>   } <br> <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

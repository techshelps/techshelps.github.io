<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEDOCVW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context37"></a>OLEDOCVW.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          OleDocVw.cpp <br>    <br>   Description:   COleDocumentView implementation. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "OleDocVw.h" <br>#include &lt;windowsx.h&gt; <br> <br>/************************************************************************** <br> <br>   COleDocumentView::COleDocumentView() <br> <br>**************************************************************************/ <br> <br>COleDocumentView::COleDocumentView(COleDocument *pOleDoc) <br>{ <br>OutputDebugString(TEXT("COleDocumentView's constructor\n")); <br> <br>m_pInPlaceSite = NULL; <br>m_pInPlaceFrame = NULL; <br>m_pInPlaceUIWindow = NULL; <br>m_hwndView = NULL; <br>m_fUIActive = FALSE; <br>m_fInPlaceActive = FALSE; <br>m_hSharedMenu = NULL; <br>m_hOleMenu = NULL; <br> <br>m_pOleDoc = pOleDoc; <br> <br>CreateViewWindow(); <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::~COleDocumentView() <br> <br>**************************************************************************/ <br> <br>COleDocumentView::~COleDocumentView() <br>{ <br>OutputDebugString(TEXT("COleDocumentView's destructor\n")); <br> <br>if(m_pInPlaceFrame) <br>   m_pInPlaceFrame-&gt;Release(); <br> <br>if(m_pInPlaceUIWindow) <br>   m_pInPlaceUIWindow-&gt;Release(); <br> <br>if(m_pInPlaceSite) <br>   m_pInPlaceSite-&gt;Release(); <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IUnknown Implementation <br>// <br> <br>/************************************************************************** <br> <br>   COleDocumentView::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::QueryInterface(  REFIID riid,  <br>                                                LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::QueryInterface\n")); <br> <br>return m_pOleDoc-&gt;QueryInterface(riid, ppReturn); <br>}                                              <br> <br>/************************************************************************** <br> <br>   COleDocumentView::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) COleDocumentView::AddRef() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::AddRef\n")); <br> <br>return m_pOleDoc-&gt;AddRef(); <br>} <br> <br> <br>/************************************************************************** <br> <br>   COleDocumentView::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) COleDocumentView::Release() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::Release\n")); <br> <br>return m_pOleDoc-&gt;Release(); <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::SetInPlaceSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::SetInPlaceSite(IOleInPlaceSite *pNewSite) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::SetInPlaceSite\n")); <br> <br>//clean up previous site if it exists <br>if(m_pInPlaceSite) <br>   { <br>   if(m_fUIActive) <br>      { <br>      DeactivateUI(); <br>      } <br>    <br>   if(m_fInPlaceActive) <br>      { <br>      DeactivateInPlace(); <br>      } <br>    <br>   if(m_pInPlaceFrame) <br>      { <br>      m_pInPlaceFrame-&gt;Release(); <br>      m_pInPlaceFrame = NULL; <br>      } <br>    <br>   if(m_pInPlaceUIWindow) <br>      { <br>      m_pInPlaceUIWindow-&gt;Release(); <br>      m_pInPlaceUIWindow = NULL; <br>      } <br>    <br>   m_pInPlaceSite-&gt;Release(); <br>   m_pInPlaceSite = NULL; <br>   } <br> <br>m_pInPlaceSite = pNewSite; <br> <br>if(m_pInPlaceSite) <br>   { <br>   m_pInPlaceSite-&gt;AddRef(); <br> <br>   RECT  rcClip; <br> <br>   m_FrameInfo.cb = sizeof(m_FrameInfo); <br>    <br>   m_pInPlaceSite-&gt;GetWindowContext(   &amp;m_pInPlaceFrame, <br>                                       &amp;m_pInPlaceUIWindow, <br>                                       &amp;m_Rect, <br>                                       &amp;rcClip, <br>                                       &amp;m_FrameInfo); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::GetInPlaceSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::GetInPlaceSite(IOleInPlaceSite **ppInPlaceSite) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::GetInPlaceSite\n")); <br> <br>HRESULT  hr = E_FAIL; <br> <br>*ppInPlaceSite = m_pInPlaceSite; <br> <br>if(*ppInPlaceSite) <br>   { <br>   (*ppInPlaceSite)-&gt;AddRef(); <br>   hr = S_OK; <br>   } <br> <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::GetDocument() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::GetDocument(IUnknown **ppUnk) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::GetDocument\n")); <br> <br>*ppUnk = m_pOleDoc; <br> <br>if(*ppUnk) <br>   (*ppUnk)-&gt;AddRef(); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::SetRect() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::SetRect(LPRECT pRect) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::SetRect - ")); <br> <br>if(!pRect) <br>   return E_INVALIDARG; <br> <br>m_Rect = *pRect; <br> <br>TCHAR szText[MAX_PATH]; <br>wsprintf(szText, TEXT("%d, %d, %d, %d\n"), m_Rect.left, m_Rect.top, m_Rect.right, m_Rect.bottom); <br>OutputDebugString(szText); <br> <br>MoveWindow(m_hwndView, m_Rect.left, m_Rect.top, m_Rect.right, m_Rect.bottom, TRUE); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::GetRect() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::GetRect(LPRECT pRect) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::GetRect\n")); <br> <br>if(!pRect) <br>   return E_INVALIDARG; <br> <br>*pRect = m_Rect; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::SetRectComplex() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::SetRectComplex(  LPRECT prcView,  <br>                                                LPRECT prcHScroll,  <br>                                                LPRECT prcVScroll,  <br>                                                LPRECT prcSizeBox) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::SetRectComplex\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::Show() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::Show(BOOL bShow) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::Show\n")); <br> <br>if(bShow) <br>   { <br>   //if the object is not in-place active, make it that way <br>   if(!m_fInPlaceActive) <br>      ActivateInPlace(); <br> <br>   //show the window <br>   BringWindowToTop(m_hwndView); <br>   ShowWindow(m_hwndView, SW_SHOW); <br>   UpdateWindow(m_hwndView); <br>   } <br>else <br>   { <br>   //if the object is UI active, make remove that state <br>   if(m_fUIActive) <br>      DeactivateUI(); <br> <br>   //hide the window <br>   ShowWindow(m_hwndView, SW_HIDE); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::UIActivate() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::UIActivate(BOOL bActivate) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::UIActivate\n")); <br> <br>if(bActivate) <br>   { <br>   return ActivateUI(); <br>   } <br> <br>return DeactivateUI(); <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::ActivateUI() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::ActivateUI() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::ActivateUI\n")); <br> <br>//set the active object <br>//either one of these could be good <br>if(m_pInPlaceFrame) <br>   { <br>   m_pInPlaceFrame-&gt;SetActiveObject(m_pOleDoc-&gt;m_pOleInPlaceActiveObject, NULL); <br>   } <br> <br>if(m_pInPlaceUIWindow) <br>   { <br>   m_pInPlaceUIWindow-&gt;SetActiveObject(m_pOleDoc-&gt;m_pOleInPlaceActiveObject, NULL); <br>   } <br>       <br>if(m_pInPlaceSite) <br>   { <br>   m_fUIActive = TRUE; <br> <br>   ActivateInPlace(); <br>       <br>   m_pInPlaceSite-&gt;OnUIActivate(); <br> <br>   MergeMenus(); <br> <br>   SetFocus(m_hwndView); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::DeactivateUI() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::DeactivateUI() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::DeactivateUI\n")); <br> <br>m_fUIActive = FALSE; <br>    <br>RemoveMenus(); <br>       <br>//remove the active object <br>//either one of these could be good <br>if(m_pInPlaceFrame) <br>   { <br>   m_pInPlaceFrame-&gt;SetActiveObject(NULL, NULL); <br>   } <br> <br>if(m_pInPlaceUIWindow) <br>   { <br>   m_pInPlaceUIWindow-&gt;SetActiveObject(NULL, NULL); <br>   } <br> <br>if(m_pInPlaceSite) <br>   { <br>   m_pInPlaceSite-&gt;OnUIDeactivate(FALSE); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::Open() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::Open(void) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::Open\n")); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::CloseView() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::CloseView(DWORD dwReserved) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::CloseView\n")); <br> <br>SetInPlaceSite(NULL); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::SaveViewState() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::SaveViewState(IStream *pStream) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::SaveViewState\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::ApplyViewState() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::ApplyViewState(IStream *pStream) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::ApplyViewState\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::Clone() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::Clone(IOleInPlaceSite *pIPSite, IOleDocumentView **ppView) <br>{ <br>OutputDebugString(TEXT("COleDocumentView::Clone\n")); <br> <br>*ppView = NULL; <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::ActivateInPlace() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::ActivateInPlace() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::ActivateInPlace\n")); <br> <br>m_fInPlaceActive = TRUE; <br> <br>if(m_pInPlaceSite)  <br>   { <br>   // tell the site we are in-place activating <br>   m_pInPlaceSite-&gt;OnInPlaceActivate(); <br> <br>   HWND  hwndParent; <br>   m_pInPlaceSite-&gt;GetWindow(&amp;hwndParent); <br>   SetParent(m_hwndView, hwndParent); <br> <br>   //show the view <br>   Show(TRUE); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::DeactivateInPlace() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::DeactivateInPlace() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::InPlaceDeactivate\n")); <br> <br>//UI deactivate, if necessary and hide the view window <br>Show(FALSE); <br> <br>m_fInPlaceActive = FALSE; <br> <br>if(m_pInPlaceSite)  <br>   { <br>   // tell the site we are in-place deactivating <br>   m_pInPlaceSite-&gt;OnInPlaceDeactivate(); <br>   } <br> <br>//set the parent to NULL <br>SetParent(m_hwndView, GetDesktopWindow()); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::CreateDocWindow() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleDocumentView::CreateViewWindow() <br>{ <br>OutputDebugString(TEXT("COleDocumentView::CreateViewWindow\n")); <br> <br>WNDCLASS wc; <br> <br>//if our window class has not been registered, then do so <br>if(!GetClassInfo(g_hInst, VIEW_CLASS_NAME, &amp;wc)) <br>   { <br>   ZeroMemory(&amp;wc, sizeof(wc)); <br>   wc.style          = CS_HREDRAW | CS_VREDRAW; <br>   wc.lpfnWndProc    = (WNDPROC)ViewWndProc; <br>   wc.cbClsExtra     = 0; <br>   wc.cbWndExtra     = 0; <br>   wc.hInstance      = g_hInst; <br>   wc.hIcon          = NULL; <br>   wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>   wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>   wc.lpszMenuName   = NULL; <br>   wc.lpszClassName  = VIEW_CLASS_NAME; <br>    <br>   if(!RegisterClass(&amp;wc)) <br>      return E_FAIL; <br>   } <br> <br>m_hwndView = CreateWindowEx(  WS_EX_CLIENTEDGE, <br>                              VIEW_CLASS_NAME, <br>                              NULL, <br>                              WS_CHILD | WS_CLIPSIBLINGS, <br>                              0, <br>                              0, <br>                              0, <br>                              0, <br>                              GetDesktopWindow(), <br>                              NULL, <br>                              g_hInst, <br>                              (LPVOID)this); <br>                            <br>if(!m_hwndView) <br>   { <br>   DWORD dwError = GetLastError(); <br>   return E_FAIL; <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::ViewWndProc() <br>    <br>**************************************************************************/ <br> <br>LRESULT CALLBACK COleDocumentView::ViewWndProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam) <br>{ <br>COleDocumentView  *pThis = (COleDocumentView*)GetWindowLong(hWnd, GWL_USERDATA); <br> <br>switch (uMessage) <br>   { <br>   case WM_NCCREATE: <br>      { <br>      LPCREATESTRUCT lpcs = (LPCREATESTRUCT)lParam; <br>      pThis = (COleDocumentView*)(lpcs-&gt;lpCreateParams); <br>      SetWindowLong(hWnd, GWL_USERDATA, (LONG)pThis); <br>      } <br>      break; <br> <br>   case WM_CREATE: <br>      return pThis-&gt;OnCreate(); <br>    <br>   case WM_COMMAND: <br>      return pThis-&gt;OnCommand(   GET_WM_COMMAND_ID(wParam, lParam),  <br>                                 GET_WM_COMMAND_CMD(wParam, lParam),  <br>                                 GET_WM_COMMAND_HWND(wParam, lParam)); <br> <br>   case WM_PAINT: <br>      return pThis-&gt;OnPaint(); <br>    <br>   case WM_INITMENUPOPUP: <br>      return pThis-&gt;UpdateMenu((HMENU)wParam); <br>    <br>   } <br> <br>return DefWindowProc(hWnd, uMessage, wParam, lParam); <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::OnCreate() <br>    <br>**************************************************************************/ <br> <br>LRESULT COleDocumentView::OnCreate(void) <br>{ <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::OnCommand() <br>    <br>**************************************************************************/ <br> <br>LRESULT COleDocumentView::OnCommand(UINT uID, UINT uCmd, HWND hwndCmd) <br>{ <br>switch(uID) <br>   { <br>   case IDM_RED: <br>      m_pOleDoc-&gt;m_Color = RED_COLOR; <br>      InvalidateRect(m_hwndView, NULL, TRUE); <br>      UpdateWindow(m_hwndView); <br>      m_pOleDoc-&gt;m_fDirty = TRUE; <br>      break; <br> <br>   case IDM_GREEN: <br>      m_pOleDoc-&gt;m_Color = GREEN_COLOR; <br>      InvalidateRect(m_hwndView, NULL, TRUE); <br>      UpdateWindow(m_hwndView); <br>      m_pOleDoc-&gt;m_fDirty = TRUE; <br>      break; <br> <br>   case IDM_BLUE: <br>      m_pOleDoc-&gt;m_Color = BLUE_COLOR; <br>      InvalidateRect(m_hwndView, NULL, TRUE); <br>      UpdateWindow(m_hwndView); <br>      m_pOleDoc-&gt;m_fDirty = TRUE; <br>      break; <br> <br>   } <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::OnPaint() <br>    <br>**************************************************************************/ <br> <br>LRESULT COleDocumentView::OnPaint(void) <br>{ <br>PAINTSTRUCT ps; <br> <br>BeginPaint(m_hwndView, &amp;ps); <br> <br>RECT  rc; <br>HBRUSH hBrush = CreateSolidBrush(m_pOleDoc-&gt;m_Color); <br>GetClientRect(m_hwndView, &amp;rc); <br> <br>FillRect(ps.hdc, &amp;rc, hBrush); <br> <br>DeleteObject(hBrush); <br> <br>EndPaint(m_hwndView, &amp;ps); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::MergeMenus() <br>    <br>**************************************************************************/ <br> <br>BOOL COleDocumentView::MergeMenus(void) <br>{ <br>if(!m_hSharedMenu) <br>   { <br>   //  Create the menu resource <br>   m_hSharedMenu = CreateMenu(); <br> <br>   ZeroMemory(&amp;m_mgw, sizeof(m_mgw)); <br>    <br>   // have the contaner insert its menus <br>   if(SUCCEEDED(m_pInPlaceFrame-&gt;InsertMenus(m_hSharedMenu, &amp;m_mgw))) <br>      { <br>      int   nFirstGroup = (int) m_mgw.width[0]; <br>      HMENU hMenu, <br>            hSubMenu; <br>      TCHAR szText[MAX_PATH]; <br> <br>      hMenu = LoadMenu(g_hInst, MAKEINTRESOURCE(IDR_COLOR_MENU)); <br>      hSubMenu = GetSubMenu(hMenu, 0); <br> <br>      //get the menu item's text <br>      GetMenuString(hMenu, 0, szText, ARRAYSIZE(szText), MF_BYPOSITION); <br>    <br>      // insert the server menus <br>      InsertMenu( m_hSharedMenu,  <br>                  nFirstGroup,  <br>                  MF_BYPOSITION | MF_POPUP,  <br>                  (UINT)hSubMenu,  <br>                  szText); <br> <br>      //update the OLEMENUGROUPWIDTHS structure <br>      m_mgw.width[1] += 1; <br>      m_mgw.width[3] += 0; <br>      m_mgw.width[5] += 0; <br>      } <br>   else <br>      { <br>      // Destroy the menu resource <br>      DestroyMenu(m_hSharedMenu); <br>      m_hSharedMenu = NULL; <br>      } <br>   } <br> <br>if(!m_hOleMenu) <br>   { <br>   // tell OLE to create the menu descriptor <br>   m_hOleMenu = OleCreateMenuDescriptor(m_hSharedMenu, &amp;m_mgw); <br>   } <br> <br>m_pInPlaceFrame-&gt;SetMenu(m_hSharedMenu, m_hOleMenu, m_hwndView); <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::RemoveMenus() <br>    <br>**************************************************************************/ <br> <br>BOOL COleDocumentView::RemoveMenus(void) <br>{ <br>if(m_hSharedMenu) <br>   { <br>   int   nFirstGroup = (int) m_mgw.width[0]; <br> <br>   m_pInPlaceFrame-&gt;SetMenu(NULL, NULL, NULL); <br> <br>   // remove the menus that we added <br>   RemoveMenu(m_hSharedMenu, nFirstGroup, MF_BYPOSITION); <br> <br>   // have the container remove its menus <br>   m_pInPlaceFrame-&gt;RemoveMenus(m_hSharedMenu); <br> <br>   // Destroy the menu resource <br>   DestroyMenu(m_hSharedMenu); <br> <br>   m_hSharedMenu = NULL; <br>   } <br> <br>if(m_hOleMenu) <br>   { <br>   // destroy the menu descriptor <br>   OleDestroyMenuDescriptor(m_hOleMenu); <br> <br>   m_hOleMenu = NULL; <br>   } <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   COleDocumentView::UpdateMenu() <br>    <br>**************************************************************************/ <br> <br>BOOL COleDocumentView::UpdateMenu(HMENU hMenu) <br>{ <br>UINT  uCheck; <br> <br>switch(m_pOleDoc-&gt;m_Color) <br>   { <br>   case RED_COLOR: <br>      uCheck = IDM_RED; <br>      break; <br> <br>   case GREEN_COLOR: <br>      uCheck = IDM_GREEN; <br>      break; <br> <br>   case BLUE_COLOR: <br>      uCheck = IDM_BLUE; <br>      break; <br> <br>   default: <br>      uCheck = 0; <br>      break; <br>   } <br> <br>return CheckMenuRadioItem( hMenu,  <br>                           IDM_RED,  <br>                           IDM_BLUE,  <br>                           uCheck,  <br>                           MF_BYCOMMAND); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

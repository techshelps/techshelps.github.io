<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context27"></a>DATAOBJ.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          DataObj.cpp <br>    <br>   Description:   CDataObject and CEnumForamtEtc implementation. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "DataObj.h" <br> <br>/************************************************************************** <br> <br>   CDataObject::CDataObject() <br>    <br>**************************************************************************/ <br> <br>CDataObject::CDataObject(COleDocument *pOleDoc) <br>{ <br>OutputDebugString(TEXT("CDataObject's constructor\n")); <br>    <br>m_pOleDoc = pOleDoc; <br> <br>m_pDataAdviseHolder = NULL; <br> <br>m_cfEmbedSource = RegisterClipboardFormat(CF_EMBEDSOURCE); <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::~CDataObject() <br>    <br>**************************************************************************/ <br> <br>CDataObject::~CDataObject(void)  <br>{ <br>if(m_pDataAdviseHolder) <br>   m_pDataAdviseHolder-&gt;Release(); <br> <br>OutputDebugString(TEXT("CDataObject's destructor\n")); <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::QueryInterface() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("CDataObject::QueryInterface\n")); <br> <br>return m_pOleDoc-&gt;QueryInterface(riid, ppReturn); <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::AddRef() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CDataObject::AddRef() <br>{ <br>OutputDebugString(TEXT("CDataObject::AddRef\n")); <br> <br>return m_pOleDoc-&gt;AddRef(); <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::Release() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CDataObject::Release() <br>{ <br>OutputDebugString(TEXT("CDataObject::Release\n")); <br>    <br>return m_pOleDoc-&gt;Release(); <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::QueryGetData() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::QueryGetData(LPFORMATETC pformatetc) <br>{ <br>OutputDebugString(TEXT("CDataObject::QueryGetData\n")); <br> <br>HRESULT  hr = DATA_E_FORMATETC; <br> <br>// check the validity of the formatetc. <br>if( (pformatetc-&gt;cfFormat == m_cfEmbedSource)  &amp;&amp; <br>    (pformatetc-&gt;dwAspect == DVASPECT_CONTENT) &amp;&amp; <br>    (pformatetc-&gt;tymed == TYMED_ISTORAGE)) <br>   { <br>   hr = S_OK; <br>   } <br> <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::DAdvise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::DAdvise(  LPFORMATETC pFormatetc,  <br>                                    DWORD advf, <br>                                    LPADVISESINK pAdvSink,  <br>                                    LPDWORD pdwConnection) <br>{ <br>OutputDebugString(TEXT("CDataObject::DAdvise\n")); <br> <br>// if no DataAdviseHolder has been created, then create one. <br>if(!m_pDataAdviseHolder) <br>   CreateDataAdviseHolder(&amp;m_pDataAdviseHolder); <br> <br>if(m_pDataAdviseHolder) <br>   { <br>   // pass on to the DataAdviseHolder <br>   return m_pDataAdviseHolder-&gt;Advise(this, pFormatetc, advf, pAdvSink, pdwConnection); <br>   } <br> <br>return E_FAIL; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::DUnadvise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::DUnadvise(DWORD dwConnection) <br>{ <br>OutputDebugString(TEXT("CDataObject::DUnadvise\n")); <br> <br>if(m_pDataAdviseHolder) <br>   { <br>   // pass on to the DataAdviseHolder <br>   return m_pDataAdviseHolder-&gt;Unadvise(dwConnection); <br>   } <br> <br>return E_FAIL; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::GetData() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::GetData(LPFORMATETC pFE, LPSTGMEDIUM pStgMedium) <br>{ <br>OutputDebugString(TEXT("CDataObject::GetData\n")); <br> <br>HRESULT  hr = E_NOTIMPL; <br> <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::GetDataHere() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::GetDataHere(LPFORMATETC pFormatEtc, LPSTGMEDIUM pStgMedium) <br>{ <br>OutputDebugString(TEXT("CDataObject::GetDataHere\n")); <br> <br>HRESULT  hr = DATA_E_FORMATETC; <br> <br>if(pFormatEtc-&gt;cfFormat == m_cfEmbedSource) <br>   { <br>   hr = GetOleObjectDataHere( m_pOleDoc-&gt;m_pPersistStorage, <br>                              pFormatEtc, <br>                              pStgMedium); <br>   } <br> <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::GetCanonicalFormatEtc() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::GetCanonicalFormatEtc(LPFORMATETC pformatetc, LPFORMATETC pformatetcOut) <br>{ <br>OutputDebugString(TEXT("CDataObject::GetCanonicalFormatEtc\n")); <br> <br>HRESULT hr; <br> <br>if(!pformatetcOut) <br>   return E_INVALIDARG; <br> <br>//set all out parameters to NULL. <br>pformatetcOut-&gt;ptd = NULL; <br> <br>if(!pformatetc) <br>   return E_INVALIDARG; <br> <br>// OLE2NOTE: we must validate that the format requested is supported <br>if(NOERROR != (hr = QueryGetData(pformatetc))) <br>   return hr; <br> <br>/* OLE2NOTE: an app that is insensitive to target device (as <br>**    SimpSvr is) should fill in the lpformatOut parameter <br>**    but NULL out the "ptd" field; it should return NOERROR if the <br>**    input formatetc-&gt;ptd what non-NULL. this tells the caller <br>**    that it is NOT necessary to maintain a separate screen <br>**    rendering and printer rendering. if should return <br>**    DATA_S_SAMEFORMATETC if the input and output formatetc's are <br>**    identical. <br>*/ <br> <br>*pformatetcOut = *pformatetc; <br> <br>if(NULL == pformatetc-&gt;ptd) <br>   return DATA_S_SAMEFORMATETC; <br> <br>pformatetcOut-&gt;ptd = NULL; <br> <br>return NOERROR; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::SetData() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::SetData(  LPFORMATETC pformatetc,  <br>                                    LPSTGMEDIUM pmedium, <br>                                    BOOL fRelease) <br>{ <br>OutputDebugString(TEXT("CDataObject::SetData\n")); <br> <br>return DATA_E_FORMATETC; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::EnumFormatEtc() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::EnumFormatEtc(  DWORD dwDirection, <br>                                          LPENUMFORMATETC *ppenumFormatEtc) <br>{ <br>OutputDebugString(TEXT("CDataObject::EnumFormatEtc\n")); <br> <br>// need to NULL the out parameter <br>*ppenumFormatEtc = NULL; <br> <br>if(DATADIR_SET == dwDirection) <br>   return E_NOTIMPL; <br> <br>*ppenumFormatEtc = new CEnumFormatEtc(); <br> <br>if(*ppenumFormatEtc) <br>   { <br>   (*ppenumFormatEtc)-&gt;AddRef(); <br>   return S_OK; <br>   } <br> <br>return E_OUTOFMEMORY; <br>} <br> <br>/************************************************************************** <br> <br>   CDataObject::EnumDAdvise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDataObject::EnumDAdvise(LPENUMSTATDATA *ppenumAdvise) <br>{ <br>OutputDebugString(TEXT("CDataObject::EnumDAdvise\n")); <br> <br>// need to NULL the out parameter <br>*ppenumAdvise = NULL; <br> <br>return m_pDataAdviseHolder-&gt;EnumAdvise(ppenumAdvise); <br>} <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>// CEnumFormatEtc Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::CEnumFormatEtc() <br>    <br>**************************************************************************/ <br> <br>CEnumFormatEtc::CEnumFormatEtc() <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc's constructor\n")); <br> <br>m_ObjRefCount = 0; <br> <br>m_iCur = 0; <br> <br>m_cfEmbedSource = RegisterClipboardFormat(CF_EMBEDSOURCE); <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::~CEnumFormatEtc() <br>    <br>**************************************************************************/ <br> <br>CEnumFormatEtc::~CEnumFormatEtc(void) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc's destructor\n")); <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::QueryInterface() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CEnumFormatEtc::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::QueryInterface\n")); <br> <br>*ppReturn = NULL; <br> <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = (LPVOID)this; <br>   } <br>else if(IsEqualIID(riid, IID_IEnumFORMATETC)) <br>   { <br>   *ppReturn = (LPVOID)this; <br>   } <br> <br>if(NULL != *ppReturn) <br>   { <br>   ((LPUNKNOWN)*ppReturn)-&gt;AddRef(); <br>   return NOERROR; <br>   } <br> <br>return E_NOINTERFACE; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::AddRef() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CEnumFormatEtc::AddRef(void) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::AddRef\n")); <br> <br>return ++m_ObjRefCount; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::Release() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CEnumFormatEtc::Release(void) <br>{ <br>TCHAR szText[MAX_PATH]; <br>wsprintf(szText, TEXT("CEnumFormatEtc::Release - ref count will be %d\n"), m_ObjRefCount - 1); <br>OutputDebugString(szText); <br>    <br>if(0 == --m_ObjRefCount) <br>   { <br>   delete this; <br>   return 0; <br>   } <br> <br>return m_ObjRefCount; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::Next() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CEnumFormatEtc::Next(ULONG cRequested, LPFORMATETC pFE, ULONG* puFetched) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::Next\n")); <br> <br>if(m_iCur &gt; 0) <br>   { <br>   *puFetched = 0; <br>   return S_FALSE; <br>   } <br> <br>pFE-&gt;cfFormat = m_cfEmbedSource; <br>pFE-&gt;dwAspect = DVASPECT_CONTENT; <br>pFE-&gt;tymed == TYMED_ISTORAGE; <br> <br>*puFetched = 1; <br> <br>m_iCur++; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::Skip() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CEnumFormatEtc::Skip(ULONG cSkip) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::Skip\n")); <br> <br>if((m_iCur + cSkip) &gt; 1) <br>   return S_FALSE; <br> <br>m_iCur += cSkip; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::Reset() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CEnumFormatEtc::Reset(void) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::Reset\n")); <br> <br>m_iCur = 0; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CEnumFormatEtc::Clone() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CEnumFormatEtc::Clone(LPENUMFORMATETC* ppEnum) <br>{ <br>OutputDebugString(TEXT("CEnumFormatEtc::Clone\n")); <br> <br>CEnumFormatEtc* pNew; <br> <br>*ppEnum = NULL; <br> <br>// Create the clone. <br>pNew = new CEnumFormatEtc(); <br>if (NULL == pNew) <br>   return (ResultFromScode(E_OUTOFMEMORY)); <br> <br>pNew-&gt;AddRef(); <br>pNew-&gt;m_iCur = m_iCur; <br> <br>*ppEnum = pNew; <br> <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

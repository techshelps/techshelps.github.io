<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLEOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context39"></a>OLEOBJ.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          OleObj.cpp <br>    <br>   Description:   COleObject implementation. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "OleObj.h" <br> <br>/************************************************************************** <br> <br>   COleObject::COleObject() <br>    <br>**************************************************************************/ <br> <br>COleObject::COleObject(COleDocument *pOleDoc) <br>{ <br>OutputDebugString(TEXT("COleObject's constructor\n")); <br> <br>m_pOleDoc = pOleDoc; <br> <br>m_fOpen = FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::~COleObject() <br>    <br>**************************************************************************/ <br> <br>COleObject::~COleObject() <br>{ <br>OutputDebugString(TEXT("COleObject's destructor\n")); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::QueryInterface() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("COleObject::QueryInterface\n")); <br> <br>return m_pOleDoc-&gt;QueryInterface(riid, ppReturn); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::AddRef() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) COleObject::AddRef() <br>{ <br>OutputDebugString(TEXT("COleObject::AddRef\n")); <br> <br>return m_pOleDoc-&gt;AddRef(); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::Release() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) COleObject::Release() <br>{ <br>OutputDebugString(TEXT("COleObject::Release\n")); <br> <br>return m_pOleDoc-&gt;Release(); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::DoVerb() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::DoVerb( LONG iVerb, <br>                                 LPMSG lpmsg, <br>                                 LPOLECLIENTSITE pActiveSite, <br>                                 LONG lindex, <br>                                 HWND hwndParent, <br>                                 LPCRECT lprcPosRect) <br>{ <br>OutputDebugString(TEXT("COleObject::DoVerb\n")); <br> <br>HRESULT  hr = E_FAIL; <br> <br>switch (iVerb) <br>   { <br>   case OLEIVERB_SHOW: <br>   case OLEIVERB_PRIMARY: <br>   case OLEIVERB_UIACTIVATE: <br>      { <br>      //try to get the IOleDocumentSite pointer <br>      LPOLEDOCUMENTSITE pOleDocSite; <br>      hr = pActiveSite-&gt;QueryInterface(IID_IOleDocumentSite, (LPVOID*)&amp;pOleDocSite); <br>      if(SUCCEEDED(hr)) <br>         { <br>         //passing NULL to this will cause the site to call our CreateView method <br>         hr = pOleDocSite-&gt;ActivateMe(NULL); <br>         } <br>      } <br>      break; <br> <br>   default: <br>      break; <br>   } <br> <br>return hr; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetClientSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetClientSite(LPOLECLIENTSITE *ppClientSite) <br>{ <br>OutputDebugString(TEXT("COleObject::GetClientSite\n")); <br> <br>*ppClientSite = m_pOleDoc-&gt;m_pOleClientSite; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::SetClientSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::SetClientSite(LPOLECLIENTSITE pClientSite) <br>{ <br>OutputDebugString(TEXT("COleObject::SetClientSite\n")); <br> <br>// if we already have a client site, release it. <br>if(m_pOleDoc-&gt;m_pOleClientSite) <br>   { <br>   m_pOleDoc-&gt;m_pOleClientSite-&gt;Release(); <br>   m_pOleDoc-&gt;m_pOleClientSite = NULL; <br>   } <br> <br>// store copy of the client site. <br>m_pOleDoc-&gt;m_pOleClientSite = pClientSite; <br> <br>// AddRef it so it doesn't go away. <br>if(m_pOleDoc-&gt;m_pOleClientSite) <br>   m_pOleDoc-&gt;m_pOleClientSite-&gt;AddRef(); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::Advise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::Advise(LPADVISESINK pAdvSink, LPDWORD pdwConnection) <br>{ <br>OutputDebugString(TEXT("COleObject::Advise\n")); <br> <br>// if we haven't made an OleAdviseHolder yet, make one. <br>if(!m_pOleDoc-&gt;m_pOleAdviseHolder) <br>   CreateOleAdviseHolder(&amp;m_pOleDoc-&gt;m_pOleAdviseHolder); <br> <br>// pass this call onto the OleAdviseHolder. <br>return m_pOleDoc-&gt;m_pOleAdviseHolder-&gt;Advise(pAdvSink, pdwConnection); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::Unadvise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::Unadvise(DWORD dwConnection) <br>{ <br>OutputDebugString(TEXT("COleObject::Unadvise\n")); <br> <br>// pass on to OleAdviseHolder. <br>return m_pOleDoc-&gt;m_pOleAdviseHolder-&gt;Unadvise(dwConnection); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::SetHostNames() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::SetHostNames(LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) <br>{ <br>OutputDebugString(TEXT("COleObject::SetHostNames\n")); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetExtent() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetExtent(DWORD dwDrawAspect, LPSIZEL lpsizel) <br>{ <br>OutputDebugString(TEXT("COleObject::GetExtent\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::SetExtent() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::SetExtent(DWORD dwDrawAspect, LPSIZEL lpsizel) <br>{ <br>OutputDebugString(TEXT("COleObject::SetExtent\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::Update() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::Update() <br>{ <br>OutputDebugString(TEXT("COleObject::Update\n")); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::Close() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::Close(DWORD dwSaveOption) <br>{ <br>OutputDebugString(TEXT("COleObject::Close\n")); <br> <br>switch(dwSaveOption) <br>   { <br>   case OLECLOSE_SAVEIFDIRTY: <br>      if(m_pOleDoc-&gt;m_fDirty) <br>         { <br>         m_pOleDoc-&gt;m_pPersistStorage-&gt;Save(NULL, TRUE); <br>         } <br>      break; <br> <br>   case OLECLOSE_NOSAVE: <br>      break; <br> <br>   case OLECLOSE_PROMPTSAVE: <br>      break; <br>   } <br> <br>//close the view <br>m_pOleDoc-&gt;m_pOleDocView-&gt;CloseView(0); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::EnumVerbs() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::EnumVerbs(LPENUMOLEVERB *ppenumOleVerb) <br>{ <br>OutputDebugString(TEXT("COleObject::EnumVerbs\n")); <br> <br>return OLE_S_USEREG; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::SetMoniker() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::SetMoniker(DWORD dwWhichMoniker, LPMONIKER pMoniker) <br>{ <br>OutputDebugString(TEXT("COleObject::SetMoniker\n")); <br> <br>LPMONIKER pTempMoniker; <br> <br>if(!m_pOleDoc-&gt;m_pOleClientSite) <br>   return E_FAIL; <br> <br>if(NOERROR != m_pOleDoc-&gt;m_pOleClientSite-&gt;GetMoniker(OLEGETMONIKER_ONLYIFTHERE, OLEWHICHMK_OBJFULL, &amp;pTempMoniker)) <br>   return E_FAIL; <br> <br>if(m_pOleDoc-&gt;m_pOleAdviseHolder) <br>   m_pOleDoc-&gt;m_pOleAdviseHolder-&gt;SendOnRename(pTempMoniker); <br> <br>LPRUNNINGOBJECTTABLE pRot; <br> <br>if(NOERROR == GetRunningObjectTable(0, &amp;pRot)) <br>   { <br>   if(m_pOleDoc-&gt;m_dwRegister) <br>      pRot-&gt;Revoke(m_pOleDoc-&gt;m_dwRegister); <br> <br>   pRot-&gt;Register(0, m_pOleDoc, pTempMoniker, &amp;m_pOleDoc-&gt;m_dwRegister); <br> <br>   pRot-&gt;Release(); <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetMoniker() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetMoniker(   DWORD dwAssign,  <br>                                       DWORD dwWhichMoniker, <br>                                       LPMONIKER *ppmk) <br>{ <br>OutputDebugString(TEXT("COleObject::GetMoniker\n")); <br> <br>*ppmk = NULL; <br> <br>return m_pOleDoc-&gt;m_pOleClientSite-&gt;GetMoniker(OLEGETMONIKER_ONLYIFTHERE, OLEWHICHMK_OBJFULL, ppmk); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::InitFromData() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::InitFromData( LPDATAOBJECT pDataObject, <br>                                       BOOL fCreation, <br>                                       DWORD dwReserved) <br>{ <br>OutputDebugString(TEXT("COleObject::InitFromData\n")); <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetClipboardData() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetClipboardData(   DWORD dwReserved, <br>                                             LPDATAOBJECT *ppDataObject) <br>{ <br>OutputDebugString(TEXT("COleObject::GetClipboardData\n")); <br> <br>*ppDataObject = NULL; <br> <br>return E_NOTIMPL; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::IsUpToDate() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::IsUpToDate() <br>{ <br>OutputDebugString(TEXT("COleObject::IsUpToDate\n")); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetUserClassID() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetUserClassID(CLSID *pClsid) <br>{ <br>OutputDebugString(TEXT("COleObject::GetUserClassID\n")); <br> <br>return m_pOleDoc-&gt;m_pPersistStorage-&gt;GetClassID(pClsid); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetUserType() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetUserType(DWORD dwFormOfType, LPOLESTR *pszUserType) <br>{ <br>OutputDebugString(TEXT("COleObject::GetUserType\n")); <br> <br>return OLE_S_USEREG; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::EnumAdvise() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::EnumAdvise(LPENUMSTATDATA *ppenumAdvise) <br>{ <br>OutputDebugString(TEXT("COleObject::EnumAdvise\n")); <br> <br>*ppenumAdvise = NULL; <br> <br>// pass on to the OLE Advise holder. <br>return m_pOleDoc-&gt;m_pOleAdviseHolder-&gt;EnumAdvise(ppenumAdvise); <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::GetMiscStatus() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::GetMiscStatus(DWORD dwAspect, DWORD *pdwStatus) <br>{ <br>OutputDebugString(TEXT("COleObject::GetMiscStatus\n")); <br> <br>*pdwStatus = NULL; <br> <br>return OLE_S_USEREG; <br>} <br> <br>/************************************************************************** <br> <br>   COleObject::SetColorScheme() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP COleObject::SetColorScheme(LPLOGPALETTE lpLogpal) <br>{ <br>OutputDebugString(TEXT("COleObject::SetColorScheme\n")); <br> <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOSERVER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context29"></a>DOSERVER.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          DOServer.cpp <br>    <br>   Description:   General function implementation. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "DOServer.h" <br>#include "ClsFact.h" <br>#include &lt;windowsx.h&gt; <br>#include &lt;CommDlg.h&gt; <br> <br>#include &lt;initguid.h&gt; <br> <br>// {F0FD0C00-65BA-11d0-B66F-00A0C90348D6} <br>DEFINE_GUID(   CLSID_SimpleDocObject,  <br>               0xf0fd0c00,  <br>               0x65ba,  <br>               0x11d0,  <br>               0xb6,  <br>               0x6f,  <br>               0x0,  <br>               0xa0,  <br>               0xc9,  <br>               0x3,  <br>               0x48,  <br>               0xd6); <br> <br>/************************************************************************** <br>   private function prototypes <br>**************************************************************************/ <br> <br>BOOL InitApp(BOOL, int); <br>void CenterWindow(HWND); <br> <br>/************************************************************************** <br>   global variables <br>**************************************************************************/ <br> <br>HINSTANCE      g_hInst; <br>DWORD          g_DllRefCount; <br>DWORD          g_dwRegister; <br> <br>/************************************************************************** <br> <br>   WinMain <br> <br>**************************************************************************/ <br> <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) <br>{ <br>BOOL  fEmbedding; <br>MSG   msg; <br> <br>g_hInst = hInstance; <br> <br>//check for the embedding switch <br>ParseCommandLine(lpCmdLine, &amp;fEmbedding, NULL); <br>  <br>if(!fEmbedding) <br>   { <br>   DialogBox(g_hInst, MAKEINTRESOURCE(IDD_MAIN_DIALOG), NULL, (DLGPROC)MainDlgProc); <br>   return 0; <br>   } <br> <br>if(!InitApp(fEmbedding, nCmdShow)) <br>   return 0; <br> <br>//DebugBreak(); <br> <br>//The message loop will only exit when the main object gets destroyed. <br>while(GetMessage(&amp;msg, NULL, 0, 0)) <br>   { <br>   TranslateMessage(&amp;msg); <br>   DispatchMessage(&amp;msg); <br>   } <br> <br>OutputDebugString(TEXT("Exiting WinMain\n")); <br> <br>if(g_dwRegister) <br>   CoRevokeClassObject(g_dwRegister); <br> <br>CoUninitialize(); <br> <br>return msg.wParam; <br>}                                  <br> <br>/************************************************************************** <br> <br>   InitApp() <br>    <br>**************************************************************************/ <br> <br>BOOL InitApp(BOOL fEmbedding, int nCmdShow) <br>{ <br>//initialize OLE <br>if(FAILED(CoInitialize(NULL))) <br>   return FALSE; <br> <br>CClassFactory  *pClassFactory = new CClassFactory(); <br> <br>if(NULL == pClassFactory) <br>   { <br>   CoUninitialize(); <br>   return FALSE; <br>   } <br> <br>LPUNKNOWN   pUnknown; <br>HRESULT     hr; <br> <br>hr = pClassFactory-&gt;QueryInterface(IID_IUnknown, (LPVOID*)&amp;pUnknown); <br>if(FAILED(hr)) <br>   { <br>   pClassFactory-&gt;Release(); <br>   return FALSE; <br>   } <br> <br>//register the class object <br>hr = CoRegisterClassObject(   CLSID_SimpleDocObject, <br>                              pUnknown, <br>                              CLSCTX_LOCAL_SERVER, <br>                              REGCLS_MULTIPLEUSE, <br>                              &amp;g_dwRegister); <br> <br>if(FAILED(hr)) <br>   { <br>   pClassFactory-&gt;Release(); <br>   return FALSE; <br>   } <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   MainDlgProc() <br>    <br>**************************************************************************/ <br> <br>BOOL CALLBACK MainDlgProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam) <br>{ <br>static COleDocument  *pOleDoc; <br> <br>switch(uMessage) <br>   { <br>   case WM_INITDIALOG: <br>      CenterWindow(hWnd); <br>       <br>      pOleDoc = new COleDocument(); <br> <br>      if(pOleDoc) <br>         { <br>         EnableWindow(GetDlgItem(hWnd, IDC_REGISTER), TRUE); <br>         EnableWindow(GetDlgItem(hWnd, IDC_CREATE_FILE), TRUE); <br>         } <br> <br>      break; <br>    <br>   case WM_DESTROY: <br>      if(pOleDoc) <br>         { <br>         delete pOleDoc; <br>         } <br> <br>      break; <br>    <br>   case WM_COMMAND: <br>      switch(GET_WM_COMMAND_ID(wParam, lParam)) <br>         { <br>         case IDOK: <br>         case IDCANCEL: <br>            EndDialog(hWnd, 0); <br>            break; <br>          <br>         case IDC_REGISTER: <br>            if(pOleDoc) <br>               { <br>               pOleDoc-&gt;RegisterServer(); <br>               } <br>            break; <br> <br>         case IDC_CREATE_FILE: <br>            if(pOleDoc) <br>               { <br>               pOleDoc-&gt;CreateFile(hWnd); <br>               } <br>            break; <br>         } <br>      return FALSE; <br>   } <br> <br>return FALSE; <br>} <br> <br> <br>/************************************************************************** <br> <br>   ColorHookProc() <br>    <br>**************************************************************************/ <br> <br>BOOL CALLBACK ColorHookProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam) <br>{ <br>static COleDocument  *pOleDoc; <br>static UINT          uSaveOK; <br> <br>switch(uMessage) <br>   { <br>   case WM_INITDIALOG: <br>      { <br>      UINT  uSelect; <br> <br>      pOleDoc = (COleDocument*)((LPOPENFILENAME)(lParam))-&gt;lCustData; <br> <br>      uSaveOK = RegisterWindowMessage(FILEOKSTRING); <br> <br>      switch(pOleDoc-&gt;m_Color) <br>         { <br>         default: <br>         case RED_COLOR: <br>            uSelect = IDC_RED; <br>            break; <br> <br>         case GREEN_COLOR: <br>            uSelect = IDC_GREEN; <br>            break; <br> <br>         case BLUE_COLOR: <br>            uSelect = IDC_BLUE; <br>            break; <br>         } <br> <br>      CheckRadioButton(hWnd, IDC_RED, IDC_BLUE, uSelect); <br>      } <br>      break; <br> <br>   case WM_DESTROY: <br>      break; <br> <br>   default: <br>      if(uMessage == uSaveOK) <br>         { <br>         //Save button pressed <br>         if(IsDlgButtonChecked(hWnd, IDC_GREEN)) <br>            { <br>            pOleDoc-&gt;m_Color = GREEN_COLOR; <br>            } <br>         else if(IsDlgButtonChecked(hWnd, IDC_BLUE)) <br>            { <br>            pOleDoc-&gt;m_Color = BLUE_COLOR; <br>            } <br>         else <br>            { <br>            pOleDoc-&gt;m_Color = RED_COLOR; <br>            } <br>} <br>       <br>      break; <br>   } <br> <br>return FALSE; <br>} <br> <br>/***************************************************************************** <br> <br>   CenterWindow <br> <br>*****************************************************************************/ <br> <br>void CenterWindow(HWND hWnd) <br>{ <br>RECT  rc; <br>int   x, <br>      y; <br> <br>GetWindowRect(hWnd, &amp;rc); <br> <br>x = GetSystemMetrics(SM_CXSCREEN)/2 - ((rc.right - rc.left)/2); <br>y = GetSystemMetrics(SM_CYSCREEN)/2 - ((rc.bottom - rc.top)/2); <br> <br>//don't move the window if it's already in the right position <br>if((x != rc.left) || (y != rc.top)) <br>   MoveWindow(hWnd, x, y, rc.right - rc.left, rc.bottom - rc.top, TRUE); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

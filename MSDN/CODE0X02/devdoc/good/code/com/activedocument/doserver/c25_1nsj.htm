<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PERSTOR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context43"></a>PERSTOR.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          PerStor.cpp <br>    <br>   Description:   CPersistStorage implementation. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "PerStor.h" <br> <br>/************************************************************************** <br> <br>   CPersistStorage::CPersistStorage() <br>    <br>**************************************************************************/ <br> <br>CPersistStorage::CPersistStorage(COleDocument *pOleDoc) <br>{ <br>OutputDebugString(TEXT("CPersistStorage's constructor\n")); <br> <br>m_pOleDoc = pOleDoc; <br> <br>m_pStorage = NULL; <br>m_pColorStream = NULL; <br>m_fSameAsLoad = FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::~CPersistStorage() <br>    <br>**************************************************************************/ <br> <br>CPersistStorage::~CPersistStorage() <br>{ <br>OutputDebugString(TEXT("CPersistStorage's destructor\n")); <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::QueryInterface() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::QueryInterface\n")); <br> <br>return m_pOleDoc-&gt;QueryInterface(riid, ppReturn); <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::AddRef() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CPersistStorage::AddRef() <br>{ <br>OutputDebugString(TEXT("CPersistStorage::AddRef\n")); <br> <br>return m_pOleDoc-&gt;AddRef(); <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::Release() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP_(ULONG) CPersistStorage::Release() <br>{ <br>OutputDebugString(TEXT("CPersistStorage::Release\n")); <br> <br>return m_pOleDoc-&gt;Release(); <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::InitNew() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::InitNew(LPSTORAGE pStg) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::InitNew\n")); <br> <br>// release any streams and storages that may be open <br>ReleaseStreamsAndStorage(); <br> <br>m_pStorage = pStg; <br> <br>// AddRef the new Storage <br>if (m_pStorage) <br>   m_pStorage-&gt;AddRef(); <br> <br>CreateStreams(m_pStorage); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::GetClassID() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::GetClassID(LPCLSID pClassID) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::GetClassID\n")); <br> <br>*pClassID = CLSID_SimpleDocObject; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::Save() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::Save(LPSTORAGE pStg, BOOL fSameAsLoad) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::Save\n")); <br> <br>m_pOleDoc-&gt;m_fNoScribbleMode = TRUE; <br> <br>// save the data <br>LPSTREAM pTempColor; <br> <br>if(!fSameAsLoad) <br>   { <br>   if(!pStg) <br>      return E_FAIL; <br> <br>   CreateStreams(pStg, &amp;pTempColor); <br>   } <br>else <br>   { <br>   pStg = m_pStorage; <br> <br>   if(!pStg) <br>      return E_FAIL; <br>    <br>   pTempColor = m_pColorStream; <br>   pTempColor-&gt;AddRef(); <br>   } <br> <br>//write our class ID into the storage <br>CLSID clsid; <br>GetClassID(&amp;clsid); <br>WriteClassStg(pStg, clsid); <br> <br>ULARGE_INTEGER uli; <br> <br>uli.LowPart = 0; <br>uli.HighPart = 0; <br> <br>pTempColor-&gt;SetSize(uli); <br> <br>LARGE_INTEGER li; <br> <br>li.LowPart = 0; <br>li.HighPart = 0; <br> <br>pTempColor-&gt;Seek(li, STREAM_SEEK_SET, NULL); <br> <br>// write the color to the stream <br>pTempColor-&gt;Write(&amp;m_pOleDoc-&gt;m_Color, sizeof(m_pOleDoc-&gt;m_Color), NULL); <br> <br>pTempColor-&gt;Release(); <br> <br>m_fSameAsLoad = fSameAsLoad; <br> <br>m_pOleDoc-&gt;m_fDirty = FALSE; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::SaveCompleted() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::SaveCompleted(LPSTORAGE pStgNew) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::SaveCompleted\n")); <br> <br>if(pStgNew) <br>   { <br>   ReleaseStreamsAndStorage(); <br>   m_pStorage = pStgNew; <br>   m_pStorage-&gt;AddRef(); <br>   OpenStreams(pStgNew); <br>   } <br> <br>if(pStgNew || m_fSameAsLoad) <br>   { <br>   if(m_pOleDoc-&gt;m_fNoScribbleMode) <br>      { <br>      if(m_pOleDoc-&gt;m_pOleAdviseHolder) <br>         m_pOleDoc-&gt;m_pOleAdviseHolder-&gt;SendOnSave(); <br>      } <br> <br>   m_fSameAsLoad = FALSE; <br>   } <br> <br>m_pOleDoc-&gt;m_fNoScribbleMode = FALSE; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::Load() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::Load(LPSTORAGE pStg) <br>{ <br>OutputDebugString(TEXT("CPersistStorage::Load\n")); <br> <br>// remember the storage <br>if(m_pStorage) <br>   { <br>   m_pStorage-&gt;Release(); <br>   m_pStorage = NULL; <br>   } <br> <br>m_pStorage = pStg; <br> <br>m_pStorage-&gt;AddRef(); <br> <br>//read our class ID from the storage <br>CLSID clsidStg; <br>ReadClassStg(m_pStorage, &amp;clsidStg); <br> <br>OpenStreams(m_pStorage); <br> <br>// read the color <br>if(FAILED(m_pColorStream-&gt;Read(&amp;m_pOleDoc-&gt;m_Color, sizeof(m_pOleDoc-&gt;m_Color), NULL))) <br>   { <br>   m_pOleDoc-&gt;m_Color = DEFAULT_COLOR; <br>   } <br> <br>m_pOleDoc-&gt;m_fDirty = FALSE; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::IsDirty() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::IsDirty() <br>{ <br>OutputDebugString(TEXT("CPersistStorage::IsDirty\n")); <br> <br>return (m_pOleDoc-&gt;m_fDirty ? S_OK : S_FALSE); <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::HandsOffStorage() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CPersistStorage::HandsOffStorage() <br>{ <br>OutputDebugString(TEXT("CPersistStorage::HandsOffStorage\n")); <br> <br>ReleaseStreamsAndStorage(); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::CreateStreams() <br>    <br>**************************************************************************/ <br> <br>void CPersistStorage::CreateStreams(LPSTORAGE pStg) <br>{ <br>if(m_pColorStream) <br>   m_pColorStream-&gt;Release(); <br> <br>// create a stream to save the color <br>pStg-&gt;CreateStream(  OLESTR("Color"), <br>                     STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, <br>                     0, <br>                     0, <br>                     &amp;m_pColorStream); <br> <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::CreateStreams() <br>    <br>**************************************************************************/ <br> <br>void CPersistStorage::CreateStreams(   LPSTORAGE pStg,  <br>                                       LPSTREAM* ppNewColorStream) <br>{ <br>LPSTREAM pTempColorStream; <br> <br>//save the member streams <br>pTempColorStream = m_pColorStream; <br> <br>//initialize the streams <br>m_pColorStream = *ppNewColorStream = NULL; <br> <br>//create the streams <br>CreateStreams(pStg); <br> <br>//copy the new streams <br>*ppNewColorStream = m_pColorStream; <br> <br>//restore the member streams <br>m_pColorStream = pTempColorStream; <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::OpenStreams() <br>    <br>**************************************************************************/ <br> <br>void CPersistStorage::OpenStreams(LPSTORAGE pStg) <br>{ <br>if(m_pColorStream) <br>   m_pColorStream-&gt;Release(); <br> <br>// open the color stream <br>pStg-&gt;OpenStream( OLESTR("Color"), <br>                  0, <br>                  STGM_READWRITE | STGM_SHARE_EXCLUSIVE, <br>                  0, <br>                  &amp;m_pColorStream); <br> <br>} <br> <br>/************************************************************************** <br> <br>   CPersistStorage::ReleaseStreamsAndStorage() <br>    <br>**************************************************************************/ <br> <br>void CPersistStorage::ReleaseStreamsAndStorage() <br>{ <br>if(m_pColorStream) <br>   { <br>   m_pColorStream-&gt;Release(); <br>   m_pColorStream = NULL; <br>   } <br> <br>if(m_pStorage) <br>   { <br>   m_pStorage-&gt;Release(); <br>   m_pStorage = NULL; <br>   } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

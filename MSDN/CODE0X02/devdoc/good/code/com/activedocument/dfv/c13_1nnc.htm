<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MESSAGE.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context18"></a>MESSAGE.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       message.cxx <br>// <br>//  Contents:   Helper functions for popup message boxes. <br>// <br>//  Classes: <br>// <br>//  Functions:  MessageBoxFromSringIds <br>// <br>//  History:    6-24-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include "message.h" <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   MessageBoxFromStringIds <br>// <br>//  Synopsis:   Displays a simple message box taking its text from a string <br>//              table instead of from user allocated strings. <br>// <br>//  Arguments:  [hwndOwner]      - window handle for the message box's owner <br>//              [hinst]          - instance associated with the string table <br>//              [idText]         - string id for the box's text string <br>//              [idTitle]        - string id for the box's title string <br>//              [fuStyle]        - style of message box <br>//                                 (see Windows function MessageBox for styles) <br>// <br>//  Returns:    result from MessageBox <br>// <br>//  History:    6-24-94   stevebl   Created <br>// <br>//  Notes:      Each string is limited to MAX_STRING_LENGTH characters. <br>// <br>//---------------------------------------------------------------------------- <br> <br>int MessageBoxFromStringIds( <br>    const HWND hwndOwner, <br>    const HINSTANCE hinst, <br>    const UINT idText, <br>    const UINT idTitle, <br>    const UINT fuStyle) <br>{ <br>    int iReturn = 0; <br>    TCHAR szTitle[MAX_STRING_LENGTH]; <br>    TCHAR szText[MAX_STRING_LENGTH]; <br>    if (LoadString(hinst, idTitle, szTitle, MAX_STRING_LENGTH)) <br>    { <br>        if (LoadString(hinst, idText, szText, MAX_STRING_LENGTH)) <br>        { <br>            iReturn = MessageBox( <br>                hwndOwner, <br>                szText, <br>                szTitle, <br>                fuStyle); <br>        } <br>    } <br>    return(iReturn); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   MessageBoxFromStringIdsAndArgs <br>// <br>//  Synopsis:   Creates a message box from a pair of string IDs similar <br>//              to MessageBoxFromStringIds.  The principle difference <br>//              is that idFormat is an ID for a string which is a printf <br>//              format string suitable for passing to wsprintf. <br>//              The variable argument list is combined with the format <br>//              string to create the text of the message box. <br>// <br>//  Arguments:  [hwndOwner] - window handle for the message box's owner <br>//              [hinst]     - instance associated with the string table <br>//              [idFormat]  - string id for the format of the box's text <br>//              [idTitle]   - string id for the box's title string <br>//              [fuStyle]   - style of the dialog box <br>//              [...]       - argument list for text format string <br>// <br>//  Returns:    result from MessageBox <br>// <br>//  History:    6-24-94   stevebl   Created <br>// <br>//  Notes:      Neither the composed text string nor the title must be <br>//              longer than MAX_STRING_LENGTH characters. <br>// <br>//---------------------------------------------------------------------------- <br> <br>int MessageBoxFromStringIdsAndArgs( <br>    const HWND hwndOwner, <br>    const HINSTANCE hinst, <br>    const UINT idFormat, <br>    const UINT idTitle, <br>    const UINT fuStyle, ...) <br>{ <br>    int iReturn = 0; <br>    va_list arglist; <br>    va_start(arglist, fuStyle); <br>    TCHAR szTitle[MAX_STRING_LENGTH]; <br>    TCHAR szText[MAX_STRING_LENGTH]; <br>    TCHAR szFormat[MAX_STRING_LENGTH]; <br>    if (LoadString(hinst, idTitle, szTitle, MAX_STRING_LENGTH)) <br>    { <br>        if (LoadString(hinst, idFormat, szFormat, MAX_STRING_LENGTH)) <br>        { <br>            wvsprintf(szText, szFormat, arglist); <br>            iReturn = MessageBox( <br>                hwndOwner, <br>                szText, <br>                szTitle, <br>                fuStyle); <br>        } <br>    } <br>    return(iReturn); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

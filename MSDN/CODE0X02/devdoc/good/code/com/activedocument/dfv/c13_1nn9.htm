<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BITMAPS.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context15"></a>BITMAPS.CXX</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       bitmaps.cxx <br>// <br>//  Contents:   bitmap helper functions <br>// <br>//  Classes: <br>// <br>//  Functions:  DDBChangeColor <br>//              LoadAndStretch <br>// <br>//  History:    6-24-94   stevebl   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include "bitmaps.h" <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   LoadAndStretch <br>// <br>//  Synopsis:   Loads a bitmap from our resources, and creates a bitmap <br>//              "array."  The red portions of the bitmap are considered <br>//              clear.  Each resource consists of two bitmaps side by <br>//              side:  an "open folder" and a "closed folder".  These <br>//              bitmaps are turned into 4 bitmaps:  two selected, and <br>//              two unselected bitmaps. <br>// <br>//  Arguments:  [hinst]        - instance containing the bitmap <br>//              [hbmpDest]     - destination bitmap array <br>//              [lpszResource] - name of the bitmap resource <br>//              [cxBitmap]     - width to stretch to <br>//              [cyBitmap]     - height to stretch to <br>//              [crHigh]       - color of the highlighted background <br>//              [crNorm]       - color of the normal background <br>// <br>//  Returns:    TRUE on success. <br>//              FALSE on failure. <br>// <br>//  History:    6-24-94   stevebl   Stolen and modified from original DFView <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL LoadAndStretch ( <br>    HINSTANCE hinst, <br>    HBITMAP hbmpDest, <br>    LPTSTR lpszResource, <br>    UINT cxBitmap, <br>    UINT cyBitmap, <br>    COLORREF crHigh, <br>    COLORREF crNorm) <br>{ <br>    HBITMAP hbmpOld1, hbmpOld2, hbmp; <br>    BITMAP bm; <br>    int i; <br>    HDC hdcDest = CreateCompatibleDC(NULL); <br>    HDC hdcSrc = CreateCompatibleDC(NULL); <br> <br>    if (NULL == hdcDest || NULL == hdcSrc) <br>    { <br>        DeleteDC(hdcSrc); <br>        DeleteDC(hdcDest); <br>        return(FALSE); <br>    } <br>    for (i=0;  i &lt; 2;  i++) <br>    { <br>        hbmp = LoadBitmap(hinst, lpszResource); <br>        if (NULL == hbmp) <br>        { <br>            DeleteDC(hdcSrc); <br>            DeleteDC(hdcDest); <br>            return FALSE; <br>        } <br> <br>        DDBChangeColor(hbmp, RGB (255,0,0), ((i == 0) ? crHigh : crNorm)); <br>        GetObject(hbmp, sizeof (bm), &amp;bm); <br> <br>        hbmpOld1 = (HBITMAP) SelectObject(hdcDest, hbmpDest); <br>        hbmpOld2 = (HBITMAP) SelectObject(hdcSrc, hbmp); <br> <br>        SetStretchBltMode(hdcDest, COLORONCOLOR); <br>        StretchBlt( <br>            hdcDest, <br>            i * cxBitmap * 2, <br>            0, <br>            cxBitmap * 2, <br>            cyBitmap, <br>            hdcSrc, <br>            0, <br>            0, <br>            bm.bmWidth, <br>            bm.bmHeight, <br>            SRCCOPY); <br> <br>        SelectObject(hdcDest, hbmpOld1); <br>        SelectObject(hdcSrc,  hbmpOld2); <br>        DeleteObject(hbmp); <br>    } <br> <br>    DeleteDC(hdcSrc); <br>    DeleteDC(hdcDest); <br>    return TRUE; <br>} <br> <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   DDBChangeColor <br>// <br>//  Synopsis:   Change a particular color in a bitmap to another color. <br>//              Strategy is to create a monochrome mask, where each pixel <br>//              in the source bitmap that matches the color we're converting <br>//              from is set to white (1), and all other colors to black. <br>//              We then Blt this mask into the original bitmap, with a ROP <br>//              code that does: <br>// <br>//                (~Mask&amp;Source) | (~Mask&amp;Pattern) <br>// <br>//              where Pattern is the color we're changing to. <br>// <br>//              In other words, wherever the Mask is 1, we want to put the pattern; <br>//              wherever the Mask is 0, we want to leave the source alone.  By <br>//              using a Truth Table, you'll find that this ROP code is equivalent <br>//              to DSPDxax or ROP code 0x00E20746. <br>// <br>//              For info on figuring out ROP codes given a set of boolean ops, <br>//              check out the Windows 3.0 SDK, Reference Volume 2, chapter 11. <br>// <br>//  Arguments:  [hBitmap] - bitmap handle <br>//              [crFrom]  - color to change <br>//              [crTo]    - new color <br>// <br>//  Returns:    TRUE on success.  FALSE on failur <br>// <br>//  History:    6-24-94   stevebl   Stolen from original DFView code <br>// <br>//---------------------------------------------------------------------------- <br> <br>BOOL DDBChangeColor (HBITMAP hBitmap, COLORREF crFrom, COLORREF crTo) <br>{ <br>    register int cx, cy; <br>    BITMAP       bm; <br>    HDC          hdcBmp, hdcMask; <br>    HBITMAP      hbmMask, hbmOld1, hbmOld2; <br>    HBRUSH       hBrush, hbrOld; <br> <br>    if (!hBitmap) <br>          return FALSE; <br> <br>    GetObject (hBitmap, sizeof (bm), &amp;bm); <br>    cx = bm.bmWidth; <br>    cy = bm.bmHeight; <br> <br>    hbmMask = CreateBitmap(cx, cy, 1, 1, NULL); <br>    hdcMask = CreateCompatibleDC(NULL); <br>    hdcBmp = CreateCompatibleDC(NULL); <br>    hBrush = CreateSolidBrush(crTo); <br> <br>    if (!hdcMask || !hdcBmp || !hBrush || !hbmMask) <br>    { <br>        DeleteObject(hbmMask); <br>        DeleteObject(hBrush); <br>        DeleteDC(hdcMask); <br>        DeleteDC(hdcBmp); <br>        return FALSE; <br>    } <br> <br>    hbmOld1 = (HBITMAP) SelectObject (hdcBmp,  hBitmap); <br>    hbmOld2 = (HBITMAP) SelectObject (hdcMask, hbmMask); <br>    hbrOld  = (HBRUSH) SelectObject (hdcBmp, hBrush); <br> <br>    SetBkColor(hdcBmp, crFrom); <br>    BitBlt(hdcMask, 0, 0, cx, cy, hdcBmp,  0, 0, SRCCOPY); <br>    SetBkColor(hdcBmp, RGB(255,255,255)); <br>    BitBlt(hdcBmp,  0, 0, cx, cy, hdcMask, 0, 0, DSPDxax); <br> <br>    SelectObject(hdcBmp,  hbrOld); <br>    SelectObject(hdcBmp,  hbmOld1); <br>    SelectObject(hdcMask, hbmOld2); <br>    DeleteDC(hdcBmp); <br>    DeleteDC(hdcMask); <br>    DeleteObject(hBrush); <br>    DeleteObject(hbmMask); <br> <br>    return TRUE; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

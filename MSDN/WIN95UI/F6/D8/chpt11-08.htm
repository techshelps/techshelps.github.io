<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Access Bar Callback Message</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Using the Access Bar Callback Message</h2>

<p>As mentioned earlier, an application can specify that a
callback message must be sent to it. SHELLFUN defines this
message as APPBAR_CALLBACK (although an application can specify
any message). This callback message is used for processing
notifications that are sent to the access bar when the state of
the bar changes (for example, from ABS_ALWAYSONTOP), when a
full-screen application starts or closes, and when an event
occurs that might affect the bar's size or position. SHELLFUN
uses the following code to process the access bar's callback
message. (It's very similar to code used as an example in the
Win32 SDK.) </p>

<p><tt>void AppBarCallback (HWND hWnd, UINT msg, WPARAM wParam,
LPARAM lParam)<br>
{<br>
UINT uState;<br>
<br>
switch (wParam) <br>
{<br>
case ABN_STATECHANGE:<br>
// Check to see whether the access bar is still ABS_ALWAYSONTOP.<br>
uState = SHAppBarMessage (ABM_GETSTATE, &amp;g_appBar);<br>
<br>
SetWindowPos (hWnd,<br>
(ABS_ALWAYSONTOP &amp; uState) ? HWND_TOPMOST : HWND_BOTTOM,<br>
0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);<br>
break;<br>
<br>
case ABN_FULLSCREENAPP:<br>
// A full-screen application has started, or the last <br>
// full-screen application has closed. Reset the access bar's <br>
// z-order appropriately.<br>
uState = SHAppBarMessage (ABM_GETSTATE, &amp;g_appBar);<br>
<br>
if (lParam) <br>
{<br>
SetWindowPos (hWnd,<br>
(ABS_ALWAYSONTOP &amp; uState) ? HWND_TOPMOST : HWND_BOTTOM,<br>
0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);<br>
}<br>
else <br>
{<br>
if (uState &amp; ABS_ALWAYSONTOP) <br>
SetWindowPos (hWnd, HWND_TOPMOST, 0, 0, 0, 0, <br>
SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);<br>
}<br>
<br>
case ABN_POSCHANGED:<br>
// The taskbar or another access bar<br>
// has changed its size or position.<br>
AppBarPosChanged (g_appBar.uEdge, &amp;g_appBar);<br>
break;<br>
}<br>
}</tt> </p>
</body>
</html>

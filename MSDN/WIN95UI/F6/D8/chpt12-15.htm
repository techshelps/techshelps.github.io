<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step Eight: Let MFC Initialize the Class Factories for You</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h3>Step Eight: Let MFC Initialize the Class Factories for You</h3>

<p>In earlier days, the hapless developer was forced to register
all class factories manually. Now this work is done for you when
you create the project in AppWizard in the InitInstance function.
</p>

<p><tt>BOOL CMfcviewApp::InitInstance ()<br>
{<br>
// Register all OLE servers (factories) as running. This enables
the<br>
// OLE libraries to create objects from other applications.<br>
COleObjectFactory::RegisterAll ();<br>
<br>
return TRUE;<br>
}</tt> </p>

<p>Just to show you what you save, here is a peek at what the
FILEVIEW sample must do in order to define the class factory
object with the IClassFactory interface and implement that
interface completely to create a file viewer object: </p>

<p><tt>STDMETHODIMP CFVClassFactory::CreateInstance (<br>
LPUNKNOWN pUnkOuter, REFIID riid, PPVOID ppvObj)<br>
{<br>
PCFileViewer pObj;<br>
HRESULT hr;<br>
<br>
*ppvObj = NULL;<br>
hr = E_OUTOFMEMORY;<br>
<br>
// Verify that a controlling unknown asks for IUnknown.<br>
if (NULL != pUnkOuter &amp;&amp; ! IsEqualIID (riid,
IID_IUnknown))<br>
return E_NOINTERFACE;<br>
<br>
// MODIFY: If you use an object other than CFileViewer,<br>
// be sure to change the name and parameters here. I do<br>
// recommend that you continue to follow this model, however,<br>
// and just modify CFileViewer as necessary.<br>
pObj = new CFileViewer (pUnkOuter, g_hInst, ObjectDestroyed);<br>
<br>
if (NULL == pObj)<br>
return hr;<br>
<br>
// MODIFY: Add other parameters to Init as necessary.<br>
hr = pObj-&gt;Init ();<br>
<br>
if (SUCCEEDED (hr))<br>
{<br>
// Return the requested interface.<br>
hr = pObj-&gt;QueryInterface (riid, ppvObj);<br>
<br>
if (SUCCEEDED (hr))<br>
{<br>
// Everything worked; count the object.<br>
g_cObj++;<br>
return NOERROR;<br>
}<br>
}<br>
<br>
// Kill the object if anything failed after creation.<br>
delete pObj;<br>
<br>
return hr;<br>
}</tt> </p>

<p>MFC 3.1 defines special entry points for in-process servers:
DllGetClassObject and DllCanUnloadNow. AppWizard also provides
them when you create your project. </p>

<p><tt>STDAPI DllGetClassObject (REFCLSID rclsid, REFIID riid,
LPVOID *ppv)<br>
{<br>
return AfxDllGetClassObject (rclsid, riid, ppv);<br>
}<br>
<br>
STDAPI DllCanUnloadNow (void)<br>
{<br>
return AfxDllCanUnloadNow ();<br>
}</tt> </p>
</body>
</html>

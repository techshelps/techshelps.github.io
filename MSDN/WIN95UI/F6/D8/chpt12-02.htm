<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How File Viewers Work</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">How File Viewers Work</font></h1>

<p>In the preceding explanation, I mentioned file classes.
Technically speaking, file viewers are component objects
implemented inside an in-process server DLL. In simpler, more
human-understandable terms, file viewers live in a DLL that
exports certain functions so that the system can make calls to
the DLL to display file contents. The DLL is referred to as an <i>INPROC
server,</i> which simply means that it runs only as an add-on to
an existing application (in this case, as an add-on to the
system-supplied application called QUIKVIEW), not as a
stand-alone application. </p>

<p>When a user clicks the Quick View option for an OLE compound
file, the system can use the file's class identifier (an OLE
CLSID value) to figure out which viewer to use. If the file isn't
a compound file, the system uses the file extension to determine
which viewer to use. </p>

<p>Because a file viewer is a component object, you can add
interfaces and augment functionality to support new features. For
example, a file viewer can act as an OLE container application
and can activate embedded objects in-place inside the file being
viewed. Or you could beef up another file viewer to let the user
make a selection in a document and copy the selection to the
Clipboard or drag it to another location. </p>
</body>
</html>

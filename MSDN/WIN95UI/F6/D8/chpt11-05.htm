<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Taskbar Notifications</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1>Taskbar Notifications</h1>

<p>The Windows taskbar includes an area in which applications can
display status information. In Figure 11-3, for instance, this <i>taskbar
notification area</i> (sometimes called the <i>tray notification
area</i>) includes an electrical plug icon to signal that my
laptop is plugged in, another icon to indicate that my PCMCIA
card is active, and a time display telling me that it's getting
close to teatime. </p>

<p><b>Figure 11-3.</b> </p>

<h4><i><img src="fig11-3.gif" width="109" height="28"></i></h4>

<h4><i>The taskbar notification area.</i> </h4>

<p>An icon in the taskbar notification area can have a ToolTip
associated with it, which is helpful for displaying additional
status information. For example, when my laptop is running off
its battery, a battery icon replaces the electrical plug icon. If
I allow my mouse to linger over the battery icon, a ToolTip pops
up, indicating how much battery life is left. A printer icon and
an associated ToolTip can also be useful. When you print a
document, the printer icon appears in the notification area, and
its ToolTip can tell you the status of the print job (whether
it's spooling, printing, and so on). </p>

<p>In the SHELLFUN sample, the user can add an icon to the
taskbar notification area. You need to provide an icon and,
optionally, a ToolTip string. SHELLFUN uses the built-in Windows
logo icon, IDI_WINLOGO. The user can add or remove the icon or
modify its state in the taskbar notification area by choosing
menu commands: </p>

<p><tt>case IDM_ADDICON:<br>
TrayMessage (hWnd, NIM_ADD);<br>
break;<br>
<br>
case IDM_STATECHANGE:<br>
TrayMessage (hWnd, NIM_MODIFY);<br>
break;<br>
<br>
case IDM_REMOVEICON:<br>
TrayMessage (hWnd, NIM_DELETE);<br>
break;</tt> </p>

<p>TrayMessage is an application-defined function that fills out
a NOTIFYICONDATA structure and sends the message passed in the
second parameter through the Shell_NotifyIcon function. Notice
that a member of the structure is filled in with flags. This
member can be a combination of the following flags: </p>

<table border="1">
    <tr>
        <td valign="top">NIF_MESSAGE</td>
        <td valign="top">Specifies that the <i>uCallbackMessage</i>
        member is valid</td>
    </tr>
    <tr>
        <td valign="top">NIF_ICON</td>
        <td valign="top">Specifies that the <i>hIcon</i> member
        is valid</td>
    </tr>
    <tr>
        <td valign="top">NIF_TIP</td>
        <td valign="top">Specifies that the <i>szTip</i> member
        is valid</td>
    </tr>
</table>

<p>The following code demonstrates how SHELLFUN fills out this
structure and uses the Shell_NotifyIcon function: </p>

<p><tt>void TrayMessage (HWND hWnd, UINT message)<br>
{<br>
NOTIFYICONDATA tnd;<br>
<br>
// Change the state of the small icon in the taskbar.<br>
if (g_State1)<br>
{<br>
lstrcpyn (tnd.szTip, g_szState2, sizeof (tnd.szTip));<br>
g_State1 = FALSE;<br>
}<br>
else<br>
{<br>
lstrcpyn (tnd.szTip, g_szState1, sizeof (tnd.szTip));<br>
g_State1 = TRUE;<br>
}<br>
<br>
switch (message)<br>
{<br>
case NIM_ADD:<br>
tnd.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP;<br>
break;<br>
<br>
case NIM_MODIFY:<br>
tnd.uFlags = NIF_TIP;<br>
break;<br>
<br>
case NIM_DELETE:<br>
tnd.uFlags = 0;<br>
g_State1 = FALSE;<br>
break;<br>
}<br>
<br>
tnd.uID = (UINT)IDI_WINLOGO;<br>
tnd.cbSize = sizeof (NOTIFYICONDATA);<br>
tnd.hWnd = hWnd;<br>
tnd.uCallbackMessage = TRAY_CALLBACK;<br>
tnd.hIcon = g_hIconState;<br>
<br>
Shell_NotifyIcon (message, &amp;tnd);<br>
}</tt> </p>

<p>Your application can send three messages using
Shell_NotifyIcon: </p>

<table border="1">
    <tr>
        <td valign="top">NIM_ADD</td>
        <td valign="top">Adds an icon to the taskbar notification
        area</td>
    </tr>
    <tr>
        <td valign="top">NIM_MODIFY</td>
        <td valign="top">Modifies an icon in the taskbar
        notification area</td>
    </tr>
    <tr>
        <td valign="top">NIM_DELETE</td>
        <td valign="top">Deletes an icon from the taskbar
        notification area</td>
    </tr>
</table>

<p>SHELLFUN permits the user to modify (change the state of) the
icon in the taskbar notification area by choosing the Change
State command on the AppBar menu. When the user does this, the
ToolTip text changes from <i>State 1</i> to <i>State 2</i>, as
illustrated in Figure 11-4. </p>

<p><b>Figure 11-4.</b> </p>

<p><img src="fig11-4.gif" width="122" height="38"></p>

<h4><i>Changing the state of an icon in the taskbar notification
area.</i> </h4>

<p>The application can provide a special callback message that
handles mouse messages intended for a taskbar icon. This is
useful if you want a context menu to pop up when the user clicks
the icon with the right mouse button. The SHELLFUN sample
displays a message box when the user clicks the icon with the
left mouse button, as shown in Figure 11-5. Here is the callback
function that SHELLFUN uses: </p>

<p><tt>void TrayCallback (WPARAM wParam, LPARAM lParam)<br>
{<br>
UINT uID;<br>
UINT uMouseMsg;<br>
<br>
uID = (UINT)wParam;<br>
uMouseMsg = (UINT)lParam;<br>
<br>
if (uMouseMsg == WM_LBUTTONDOWN)<br>
{<br>
if (uID == (UINT)IDI_WINLOGO)<br>
MessageBox (NULL, &quot;Click!&quot;, &quot;This sure is
fun!&quot;, MB_OK);<br>
}<br>
}</tt> </p>

<p><b>Figure 11-5.</b></p>

<p><img src="fig11-5.gif" width="134" height="100"></p>

<h4><i>SHELLFUN responds to the user clicking the taskbar icon.</i>
</h4>

<p>NOTE: A taskbar notification can be especially useful if you
are writing an installer or a Control Panel application for a
hardware item such as a sound card. It's nice to let users know
when the hardware is up and running, allowing them to check
status without having to open an application. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Shh! Be Very, Very Quiet; We're Hunting New Functions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Shh! Be Very, Very Quiet; We're Hunting New Functions</h2>

<p>Windows 95 offers some new functions and structures that you
can use to retrieve information about files. These functions all
have an <i>SH</i> prefix, so, as Elmer Fudd would say, &#147;Be
vewy, vewy quiet.&#133;&#148; </p>

<ul>
    <li>The SHGetNameMappingCount function gets the number of
        file mappings for the specified file. </li>
    <li>The SHFreeNameMappings function frees the file mappings
        for the specified file. </li>
    <li>The SHFileOperation function allows the application to
        specify a file or printer operation (moving, copying,
        deleting, renaming, or changing a printer port) and how
        to perform the operation. The application can control
        operations such as allowing multiple destination files,
        specifying a silent operation (no papers flying between
        folders), or determining whether to complete the
        operation without user confirmation. </li>
    <li>The SHGetFileInfo function gets information about the
        specified file, including its display name, its icon, its
        type, its attributes, the icon location, and the large
        and small icons for the file. </li>
</ul>

<p>In the SHELLFUN sample, the SHGetFileInfo function retrieves
information about a file specified by the user. Not one to give
advice that I don't take myself (&#147;Don't do anything that the
system will do for you&#148;), I use the Open common dialog box
to get the name of the file to query. When the user chooses the
file, its display name and type name are displayed in the
multiline edit control in SHELLFUN's main window: </p>

<p><tt>void OnFileInfo (HWND hWnd, HWND hwndEdit)<br>
{<br>
OPENFILENAME OpenFileName;<br>
char szDirName [MAX_PATH] = &quot;&quot;;<br>
char szFile [MAX_PATH] = &quot;\0&quot;;<br>
char szFileTitle [MAX_PATH] = &quot;\0&quot;;<br>
<br>
// The filter specification for the OPENFILENAME structure<br>
char szFilter [] = {&quot;All Files\0*.*\0&quot;};<br>
<br>
OpenFileName.lStructSize = sizeof (OPENFILENAME);<br>
OpenFileName.hwndOwner = hWnd;<br>
OpenFileName.hInstance = (HANDLE)g_hInst;<br>
OpenFileName.lpstrFilter = szFilter;<br>
OpenFileName.lpstrCustomFilter = (LPTSTR)NULL;<br>
OpenFileName.nMaxCustFilter = 0L;<br>
OpenFileName.nFilterIndex = 1L;<br>
OpenFileName.lpstrFile = szFile;<br>
OpenFileName.nMaxFile = sizeof (szFile);<br>
OpenFileName.lpstrFileTitle = szFileTitle;<br>
OpenFileName.nMaxFileTitle = sizeof (szFileTitle);<br>
OpenFileName.lpstrInitialDir = NULL;<br>
OpenFileName.lpstrTitle = &quot;Pick a file for
information.&quot;;<br>
OpenFileName.nFileOffset = 0;<br>
OpenFileName.nFileExtension = 0;<br>
OpenFileName.lpstrDefExt = &quot;*.*&quot;;<br>
OpenFileName.lCustData = 0;<br>
OpenFileName.Flags = OFN_PATHMUSTEXIST | <br>
OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;<br>
<br>
if (GetOpenFileName (&amp;OpenFileName))<br>
{<br>
SHFILEINFO sfi; <br>
char buff [2056];<br>
<br>
// The user chose to get the file information: display name,<br>
// type name, file attributes, icon location, and executable
type.<br>
if (SHGetFileInfo (OpenFileName.lpstrFile, 0, &amp;sfi, <br>
sizeof (SHFILEINFO), SHGFI_DISPLAYNAME | SHGFI_TYPENAME))<br>
{<br>
memset (buff, '\0', sizeof (buff));<br>
<br>
// Display the information.<br>
wsprintf (buff, &quot;Display name: %s Type Name: %s&quot;,<br>
sfi.szDisplayName, sfi.szTypeName);<br>
<br>
// Update the multiline edit control with the file description.<br>
SendMessage (hwndEdit, WM_SETTEXT, 0, (LPARAM)buff);<br>
}<br>
}<br>
}</tt> </p>

<p>The end result, shown in Figure 11-2, isn't the fanciest
example of user interface design, but it does illustrate that the
display name can be a long filename. The type name is the name
registered for that type of file in the Registry. </p>

<p><b>Figure 11-2.</b> </p>

<h4><i><img src="fig11-2.gif" width="463" height="200"></i></h4>

<h4><i>Retrieving file information in SHELLFUN.</i> </h4>
</body>
</html>

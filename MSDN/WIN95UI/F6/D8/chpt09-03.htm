<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Component Object Model</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>The Component Object Model</h2>

<p>The Component Object Model is a specification that describes
the process of communicating through interfaces, acquiring access
to various interfaces through the QueryInterface member function,
determining pointer lifetime through reference counting, and
reusing objects by extending them. An object, in this context, is
an item in the system that exposes interfaces (groups of related
functions) to manipulate the data or properties of the object. It
is created directly or indirectly by calling the CoCreateInstance
function, which creates a new instance of the object and returns
a pointer to an interface for the object. </p>

<p>When two objects within the system want to communicate with
each other, one object calls member functions in the other
object's interface by using a pointer to the interface. The call
to CoCreateInstance returns this interface pointer. For instance,
two objects might want to communicate with each other during a
drag-and-drop operation. If one object is to be dropped on
another object, the first one calls into the other's interface to
request acceptance of the drop. </p>

<p>All interfaces used in the Component Object
Model&#151;including IShellLink, the one used to manipulate
shortcuts&#151;are derived from the base interface, IUnknown. All
interfaces support three base member functions: </p>

<ul>
    <li>QueryInterface, which determines whether a specific
        interface is supported for the object, increments the
        reference count, and returns a pointer to the interface. </li>
    <li>AddRef, which increments the reference count on an
        interface. </li>
    <li>Release, which decrements the reference count on an
        interface. Once an interface's reference count goes to 0,
        the object deletes itself, and the pointers to its
        interfaces are no longer valid. (If the reference count
        on all an object's interfaces is 0, the object can be
        freed because there are no longer any pointers to the
        object.) </li>
</ul>

<p>An application that manipulates shortcuts must initialize the
component object library with a call to CoInitialize or
OleInitialize. When I created the SHORTCUT sample, I put this
call in my InitInstance handler before calling any other
functions. Each call to CoInitialize must be balanced with a call
to CoUninitialize. CoUninitialize should be called when an
application shuts down, because it ensures that the application
won't quit until it has received all its pending messages. I
normally put the call to CoUninitialize in the ExitInstance
handler. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Structure of the Registry</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>The Structure of the Registry</h2>

<p>The Registry stores data in a tree with a hierarchical
structure. The tool that allows you to view, edit, and manage the
Registry is called the Registry Editor, shown in Figure 10-1. The
main screen of the Registry Editor displays the structured tree
in&#151;what else?&#151;a tree view control. The data elements
shown in Figure 10-1 are known as <i>keys </i>(HKEY_CLASSES_ROOT,
HKEY_CURRENT_USER, and so on). Each key can contain children,
which are known as <i>subkeys.</i> (In Figure 10-1, Display is a
subkey of HKEY_CURRENT_CONFIG, while Fonts and Settings are
subkeys of the Display key.) Data entries are called <i>values</i>
(BitsPerPixel, DPILogicalX, and so on). Each value consists of a
value name and its associated data (if any). </p>

<p><b>Figure 10-1.</b> </p>

<p><img src="fig10-1.gif" width="476" height="307"></p>

<h4><i>The Registry Editor.</i> </h4>

<p>Keys don't necessarily have values associated with them.
Sometimes, an application simply needs to know that a key exists;
at other times, the application might need to associate many
values with a specific key (as shown in Figure 10-1). A key can
have any number of values associated with it, and the values can
be in any form. </p>

<p>Just like dogs, keys have names. A key name consists of one or
more printable ANSI characters (values in the range 32 through
127) and cannot include spaces, backslashes, or wildcard
characters (* and ?). Key names beginning with a period (.) are
reserved. This means that you can name both your dog and your key
<i>Spot</i> if you so desire. These names are not localized into
other languages, although values associated with the keys can be
localized. Subkeys also have names. The name of a subkey must be
unique with respect to the key immediately above it in the
hierarchy. </p>

<p>The Registry supports several different data types for values,
described in Table 10-1 on the following page. Your application
can use any of these data types, depending on what you want to
store. </p>

<table border="1">
    <tr>
        <td valign="top"><b>Data Type</b></td>
        <td valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">REG_BINARY</td>
        <td valign="top">Binary data in any form.</td>
    </tr>
    <tr>
        <td valign="top">REG_DWORD</td>
        <td valign="top">A 32-bit number.</td>
    </tr>
    <tr>
        <td valign="top">REG_DWORD_BIG_ENDIAN</td>
        <td valign="top">A 32-bit number in big-endian format (in
        which the most significant byte of a word is the
        low-order byte).</td>
    </tr>
    <tr>
        <td valign="top">REG_DWORD_LITTLE_ENDIAN</td>
        <td valign="top">A 32-bit number in little-endian format
        (same as REG_DWORD). Little-endian format (in which the
        most significant byte of a word is the high-order byte)
        is the most common format for computers running Windows
        NT.</td>
    </tr>
    <tr>
        <td valign="top">REG_EXPAND_SZ</td>
        <td valign="top">A null-terminated string containing
        unexpanded references to environment variables (for
        example, <i>%PATH%</i>). This value is a Unicode string
        or an ANSI string, depending on whether you use the
        Unicode functions or the ANSI functions. The Registry
        always stores strings internally as Unicode strings.</td>
    </tr>
    <tr>
        <td valign="top">REG_LINK</td>
        <td valign="top">A Unicode symbolic link.</td>
    </tr>
    <tr>
        <td valign="top">REG_MULTI_SZ</td>
        <td valign="top">An array of null-terminated strings,
        terminated by two null characters.</td>
    </tr>
    <tr>
        <td valign="top">REG_NONE</td>
        <td valign="top">No defined value type.</td>
    </tr>
    <tr>
        <td valign="top">REG_RESOURCE_LIST</td>
        <td valign="top">A device-driver resource list.</td>
    </tr>
    <tr>
        <td valign="top">REG_SZ</td>
        <td valign="top">A null-terminated string. This value is
        a Unicode string or an ANSI string, depending on whether
        you use the Unicode functions or the ANSI functions.</td>
    </tr>
</table>

<p><b>Table 10-1.</b><i> Data types for Registry values.</i> </p>
</body>
</html>

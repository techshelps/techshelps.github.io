<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Changing an Access Bar's Size or Position</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Changing an Access Bar's Size or Position</h2>

<p>The size or position of an access bar can change, usually as a
result of the user resizing or moving it. In SHELLFUN, the user
can change the position of the bar by clicking the Right, Left,
Top, or Bottom button to align the access bar with the specified
edge of the screen. The application must then determine whether
that position is available. If another access bar is already
anchored to the specified edge, you must recalculate the position
of the new access bar so that it will appear next to the bar
already occupying that edge. </p>

<p>In SHELLFUN, I had to consider the vertical or horizontal
orientation of the access bar and then remember to reset the
positions of the child buttons accordingly. (The buttons are
placed crosswise on a horizontal bar, or up and down on a
vertical bar.) When the user clicks a button on the SHELLFUN
access bar, the message is sent to a function that filters out
information about which button was clicked: </p>

<p><tt>void AppBarClicked (UINT msg, APPBARDATA *pabd)<br>
{<br>
switch (msg)<br>
{<br>
case IDM_LEFT:<br>
AppBarPosChanged (ABE_LEFT, pabd);<br>
break;<br>
<br>
case IDM_RIGHT:<br>
AppBarPosChanged (ABE_RIGHT, pabd);<br>
break;<br>
<br>
case IDM_TOP:<br>
AppBarPosChanged (ABE_TOP, pabd);<br>
break;<br>
<br>
case IDM_BOTTOM:<br>
AppBarPosChanged (ABE_BOTTOM, pabd);<br>
break;<br>
}<br>
}</tt> </p>

<p>Once you have determined the new specified edge, you can do
the real positioning: </p>

<p><tt>void PASCAL AppBarPosChanged (UINT uEdge, APPBARDATA *abd)<br>
{<br>
RECT rcl;<br>
<br>
// Get the screen coordinates.<br>
rcl.left = rcl.top = 0;<br>
rcl.right = GetSystemMetrics (SM_CXSCREEN);<br>
rcl.bottom = GetSystemMetrics (SM_CYSCREEN);<br>
<br>
switch (uEdge) <br>
{<br>
case ABE_TOP:<br>
abd-&gt;rc.left = abd-&gt;rc.top = 0;<br>
abd-&gt;rc.right = rcl.right;<br>
abd-&gt;rc.bottom = DEF_APPBAR_HEIGHT;<br>
break;<br>
<br>
case ABE_BOTTOM:<br>
abd-&gt;rc.left = 0;<br>
abd-&gt;rc.top = rcl.bottom - DEF_APPBAR_HEIGHT;<br>
abd-&gt;rc.right = rcl.right;<br>
abd-&gt;rc.bottom = rcl.bottom;<br>
break;<br>
<br>
case ABE_LEFT:<br>
abd-&gt;rc.left = abd-&gt;rc.top = 0;<br>
abd-&gt;rc.right = DEF_APPBAR_WIDTH;<br>
abd-&gt;rc.bottom = rcl.bottom;<br>
break;<br>
<br>
case ABE_RIGHT:<br>
abd-&gt;rc.top = 0;<br>
abd-&gt;rc.left = rcl.right - DEF_APPBAR_WIDTH;<br>
abd-&gt;rc.right = rcl.right;<br>
abd-&gt;rc.bottom = rcl.bottom;<br>
break;<br>
}<br>
<br>
// Check to see whether this position is OK.<br>
SHAppBarMessage (ABM_QUERYPOS, abd);<br>
<br>
switch (uEdge) <br>
{<br>
case ABE_LEFT:<br>
abd-&gt;rc.right = abd-&gt;rc.left + DEF_APPBAR_WIDTH;<br>
break;<br>
<br>
case ABE_RIGHT:<br>
abd-&gt;rc.left = abd-&gt;rc.right - DEF_APPBAR_WIDTH;<br>
break;<br>
<br>
case ABE_TOP:<br>
abd-&gt;rc.bottom = abd-&gt;rc.top + DEF_APPBAR_HEIGHT;<br>
break;<br>
<br>
case ABE_BOTTOM:<br>
abd-&gt;rc.top = abd-&gt;rc.bottom - DEF_APPBAR_HEIGHT;<br>
break;<br>
}<br>
<br>
// Set the access bar position.<br>
SHAppBarMessage (ABM_SETPOS, abd);<br>
<br>
// Move and size the access bar so that it conforms to the <br>
// bounding rectangle passed to the system.<br>
MoveWindow (abd-&gt;hWnd, abd-&gt;rc.left, abd-&gt;rc.top, <br>
abd-&gt;rc.right, abd-&gt;rc.bottom, TRUE);<br>
<br>
if ((uEdge == ABE_TOP) || (uEdge == ABE_BOTTOM))<br>
{<br>
MoveWindow (g_hwndBtn1, 5, 0, BUTTON_WIDTH, BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn2, BUTTON_WIDTH * 2, 0, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn3, BUTTON_WIDTH * 4, 0, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn4, BUTTON_WIDTH * 6, 0, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
}<br>
else<br>
{<br>
MoveWindow (g_hwndBtn1, 2, 5, BUTTON_WIDTH, BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn2, 2, BUTTON_HEIGHT * 2, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn3, 2, BUTTON_HEIGHT * 4, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
MoveWindow (g_hwndBtn4, 2, BUTTON_HEIGHT * 6, BUTTON_WIDTH, <br>
BUTTON_HEIGHT, TRUE);<br>
}<br>
}</tt> </p>
</body>
</html>

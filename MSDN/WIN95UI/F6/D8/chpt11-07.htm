<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Access Bar</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating an Access Bar</h2>

<p>You first need to decide what you want your access bar to do
and what it should look like. I decided that mine should look a
bit like the taskbar and that it should contain buttons that let
the user change the bar's position (right, left, top, or bottom).
To create the access bar itself, I used CreateWindowEx and the
extended style WS_EX_TOOLWINDOW: </p>

<p><tt>// Create the access bar.<br>
g_hWndAppBar = CreateWindowEx (WS_EX_TOOLWINDOW,<br>
&quot;AppBarClass&quot;, &quot;AppBar&quot;,<br>
WS_POPUP | WS_THICKFRAME | WS_CLIPCHILDREN,<br>
0, 0, DEF_APPBAR_WIDTH, DEF_APPBAR_HEIGHT,<br>
NULL, NULL, hInstance, NULL);<br>
<br>
// Now create the button children.<br>
g_hwndBtn1 = CreateWindow (<br>
&quot;BUTTON&quot;, // create a button<br>
&quot;&amp;Right&quot;, // window title<br>
BS_PUSHBUTTON | BS_CENTER | WS_VISIBLE | WS_CHILD,<br>
0, 0, 0, 0,<br>
g_hWndAppBar, // parent window<br>
(HMENU)IDM_RIGHT, // ID<br>
hInstance, // instance<br>
NULL); <br>
<br>
g_hwndBtn2 = CreateWindow (<br>
&quot;BUTTON&quot;, // create a button<br>
&quot;&amp;Left&quot;, // window title<br>
BS_PUSHBUTTON | BS_CENTER | WS_VISIBLE | WS_CHILD,<br>
0, 0, 0, 0,<br>
g_hWndAppBar, // parent window<br>
(HMENU)IDM_LEFT, // ID<br>
hInstance, // instance<br>
NULL);<br>
<br>
g_hwndBtn3 = CreateWindow (<br>
&quot;BUTTON&quot;, // create a button<br>
&quot;&amp;Top&quot;, // window title<br>
BS_PUSHBUTTON | BS_CENTER | WS_VISIBLE | WS_CHILD, <br>
0, 0, 0, 0,<br>
g_hWndAppBar, // parent window<br>
(HMENU)IDM_TOP, // ID<br>
hInstance, // instance<br>
NULL); <br>
<br>
g_hwndBtn4 = CreateWindow (<br>
&quot;BUTTON&quot;, // create a button<br>
&quot;&amp;Bottom&quot;, // window title<br>
BS_PUSHBUTTON | BS_CENTER | WS_VISIBLE | WS_CHILD,<br>
0, 0, 0, 0,<br>
g_hWndAppBar, // parent window<br>
(HMENU)IDM_BOTTOM, // ID<br>
hInstance, // instance<br>
NULL);</tt> </p>

<p>Of course, it's not enough to just create the windows and wish
upon a star for an access bar&#151;you need to register it with
the system. SHELLFUN does this when the user chooses to add the
access bar. As I did for the taskbar notification, I filled out a
structure, APPBARDATA, and used a special function,
SHAppBarMessage, to register the access bar: </p>

<p><tt>case IDM_ADD:<br>
if (! g_fRegistered)<br>
{<br>
// Fill out the structure needed to register the new access bar.<br>
g_appBar.hWnd = g_hWndAppBar;<br>
g_appBar.cbSize = sizeof (APPBARDATA);<br>
<br>
// Identifier for notifications<br>
g_appBar.uCallbackMessage = APPBAR_CALLBACK;<br>
<br>
// Register the access bar.<br>
if (! SHAppBarMessage (ABM_NEW, &amp;g_appBar)) <br>
break;<br>
<br>
// Set the default size and position of the access bar.<br>
AppBarPosChanged (ABE_TOP, &amp;g_appBar);<br>
<br>
ShowWindow (g_hWndAppBar, SW_SHOW);<br>
<br>
// Set the registered flag to TRUE.<br>
g_fRegistered = TRUE; <br>
}<br>
break;</tt> </p>

<p>The access bar initially appears anchored to the top of the
desktop, as shown in Figure 11-7. Clicking one of the buttons on
the bar will change its position. </p>

<p><b>Figure 11-7.</b></p>

<p><img src="fig11-7.gif" width="640" height="480"></p>

<h4><i>The access bar in SHELLFUN.</i> </h4>

<p>To remove the access bar, you use the same SHAppBarMessage
function, specifying the ABM_REMOVE message as the first
parameter. In SHELLFUN, I don't actually destroy the window; I
hide it in case the user chooses to add it again later. When the
application closes, however, I do destroy the window in my
cleanup code: </p>

<p><tt>case IDM_REMOVE:<br>
if (g_fRegistered)<br>
{<br>
// Unregister the access bar.<br>
SHAppBarMessage (ABM_REMOVE, &amp;g_appBar);<br>
ShowWindow (g_hWndAppBar, SW_HIDE);<br>
g_fRegistered = FALSE;<br>
}<br>
break;</tt> </p>

<p>Because an access bar is a window in its own right, it has its
own window procedure, in which events such as activation,
creation, and destruction (and lots of other words ending in <i>-tion</i>)
happen. This is also where the callback message specified in the
ABM_NEW message is sent. Here is the window procedure for
SHELLFUN's access bar: </p>

<p><tt>LRESULT CALLBACK AppBarWndProc (HWND hwnd, UINT msg,
WPARAM wparam, <br>
LPARAM lparam)<br>
{<br>
static HWND hwndBtn1, hwndBtn2, hwndBtn3, hwndBtn4;<br>
<br>
switch (msg)<br>
{<br>
case WM_CREATE:<br>
g_fRegistered = FALSE;<br>
break;<br>
<br>
case WM_DESTROY:<br>
DestroyWindow (hwndBtn1);<br>
DestroyWindow (hwndBtn2);<br>
DestroyWindow (hwndBtn3);<br>
DestroyWindow (hwndBtn4);<br>
break;<br>
<br>
case WM_WINDOWPOSCHANGED:<br>
case WM_ACTIVATE:<br>
{<br>
APPBARDATA abd;<br>
abd.cbSize = sizeof (APPBARDATA);<br>
abd.hWnd = hwnd;<br>
abd.lParam = (LONG)NULL;<br>
SHAppBarMessage (ABM_ACTIVATE, &amp;abd);<br>
break;<br>
}<br>
<br>
case WM_COMMAND:<br>
if (HIWORD (wparam) == BN_CLICKED)<br>
AppBarClicked (LOWORD (wparam), (APPBARDATA *)&amp;g_appBar);<br>
break;<br>
<br>
case APPBAR_CALLBACK:<br>
AppBarCallback (hwnd, msg, wparam, lparam);<br>
return 0;<br>
<br>
default:<br>
return DefWindowProc (hwnd, msg, wparam, lparam);<br>
}<br>
}</tt> </p>
</body>
</html>

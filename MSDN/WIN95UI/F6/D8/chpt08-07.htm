<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Windows NT File System (NTFS)</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>The Windows NT File System (NTFS)</h2>

<p>Like HPFS, NTFS organizes data on hard disks but not on floppy
disks. NTFS supports object-oriented applications by treating
files as objects with user-defined and system-defined attributes.
It provides all the capabilities of the FAT and HPFS file systems
without many of their limitations. </p>

<p>NTFS is also a fully recoverable file system, designed to
restore consistency to a disk after a CPU failure, a system
crash, or an I/O error. If you crash your NTFS volume, chances
are that you will be able to recover your data. NTFS allows the
operating system to recover without requiring you to use the <i>autochk</i>
or <i>chkdsk</i> command, which saves a lot of time when you must
reboot after a system failure. Have you ever crashed an HPFS
volume and then had to sit and wait while <i>chkdsk</i> ran on
your 1-gigabyte drive? I hope you brought a book to pass the
time. (NTFS does provide <i>chkdsk</i> and <i>autochk</i> in case
the recovery fails or corruption occurs outside the control of
the file system.) </p>

<p>NTFS includes features not available in FAT or HPFS, such as
security, Unicode filenames, automatic creation of MS-DOS
aliases, multiple data streams, and unique functionality specific
to the POSIX subsystem (a collection of international standards
for UNIX-style operating system interfaces). NTFS follows the
HPFS filename conventions described in the preceding section, but
it also supports Unicode filenames, implemented internally in
Windows NT. NTFS cannot manipulate a file's extended attributes
if the file was created in HPFS. </p>

<p>NTFS supports filenames with as many as 256 characters,
including a terminating null. In most cases, it also generates an
MS-DOS&#150;compatible filename in 8.3 format that allows an
application based on MS-DOS or 16-bit Windows to access the same
file. (When the NTFS directory name or filename contains spaces
and fewer than eight characters, NTFS does not create an 8.3
filename.) To translate a long filename into an 8.3 filename,
NTFS uses the following guidelines: </p>

<ul>
    <li>Deletes any illegal characters and any spaces from the
        long filename. The following are illegal characters: </li>
</ul>

<p>.&quot; <b>/ </b>\ [] : ; = , </p>

<ul>
    <li>Removes additional periods from the filename if valid,
        nonspace characters follow the final period. For example,
    </li>
</ul>

<p>This is a really long filename.123.456.789.TXT </p>

<p>becomes </p>

<p>THISIS~1.TXT </p>

<ul>
    <li>Ignores a final period and retains the second-to-last
        period. For example, </li>
</ul>

<p>This is a really long filename.123.456.789. </p>

<p>becomes </p>

<p>THISIS~1.789 </p>

<ul>
    <li>Truncates the filename, if necessary, to six characters
        and appends <br>
        a tilde and a numeral. Each unique filename created ends
        with ~<i>1</i>, while duplicate filenames end with <i>~2</i>,
        <i>~3</i>, and so on. </li>
    <li>Truncates the filename extension to three or fewer
        characters. </li>
    <li>Converts all letters in the filename and extension to
        uppercase. </li>
</ul>

<p>NOTE: If you're working with an application based on MS-DOS or
Windows 3.x, you might occasionally need to save a file from that
application on an NTFS volume. If the application saves to a
temporary file, deletes the original file, and renames the
temporary file to the original filename, the long filename will
be lost. You will also lose any unique permissions set on that
file, although you can reset the permissions from the parent
directory. </p>

<p><b><i>Long Filenames and Novell NetWare</i></b> </p>

<p>Versions of Novell NetWare earlier than 3.12 can support long
filenames, but the servers require that you enable Macintosh or
OS/2 (HPFS) name spaces to do so. This is costly in terms of RAM
on the server, and you must use NetWare-specific name space APIs
to access the long filenames. </p>

<p>The good news is that if you write a Win32 application using
the Win32 file system calls, you can check to see whether a given
volume supports long filenames and can use the long names without
worrying about the server system. The Microsoft-developed Windows
95 client for NetWare will use the OS/2 name space, when
available, to store filenames containing as many as 254
characters (including the terminating null) and will make the
Win32 API available. If you are running the real-mode Novell
client, or if the server has not been enabled for long filenames,
you can use only 8.3 filenames. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying an Item's Context Menu</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Displaying an Item's Context Menu</font></h1>

<p>The ENUMDESK sample supports context menus for items in the
tree view and list view controls. Figure 14-4 shows the context
menu displayed when I right-click the Nancycl2 [C:] folder. </p>

<p><b>Figure 14-4.</b> </p>

<p><img src="fig14-4.gif" width="536" height="367"></p>

<h4><i>The context menu for the Nancycl2 [C:] folder in the
ENUMDESK sample.</i> </h4>

<p>When an application determines that the user has right-clicked
a specific tree view or list view item, the application calls a
helper function to display the item's context menu. The helper
function is passed the handle to the parent window, a pointer to
the folder, a pointer to the item ID list, and the location where
the context menu should be displayed. </p>

<p><tt>BOOL CMfcenumView::DoTheMenuThing (<br>
HWND hwnd, LPSHELLFOLDER lpsfParent, LPITEMIDLIST lpi, LPPOINT
lppt)<br>
{<br>
LPCONTEXTMENU lpcm;<br>
HRESULT hr;<br>
char szTemp [64];<br>
CMINVOKECOMMANDINFO cmi;<br>
DWORD dwAttribs = 0;<br>
int idCmd;<br>
HMENU hMenu;<br>
BOOL bSuccess = TRUE;<br>
<br>
hr = lpsfParent-&gt;GetUIObjectOf (<br>
hwnd,<br>
1, // get attributes for this many objects <br>
(const struct _ITEMIDLIST **)&amp;lpi,<br>
IID_IContextMenu,<br>
0,<br>
(LPVOID *)&amp;lpcm);<br>
<br>
if (SUCCEEDED (hr)) <br>
{<br>
hMenu = CreatePopupMenu ();<br>
<br>
if (hMenu)<br>
{<br>
// Get the context menu for the item.<br>
hr = lpcm-&gt;QueryContextMenu (hMenu, 0, 1, 0x7fff,
CMF_EXPLORE);<br>
if (SUCCEEDED (hr))<br>
{<br>
idCmd = TrackPopupMenu (<br>
hMenu, TPM_LEFTALIGN | TPM_RETURNCMD | TPM_RIGHTBUTTON, <br>
lppt-&gt;x, lppt-&gt;y, 0, hwnd, NULL);<br>
<br>
if (idCmd)<br>
{<br>
// Execute the command that was selected.<br>
cmi.cbSize = sizeof (CMINVOKECOMMANDINFO);<br>
cmi.fMask = 0;<br>
cmi.hwnd = hwnd;<br>
cmi.lpVerb = MAKEINTRESOURCE (idCmd - 1);<br>
cmi.lpParameters = NULL;<br>
cmi.lpDirectory = NULL;<br>
cmi.nShow = SW_SHOWNORMAL;<br>
cmi.dwHotKey = 0;<br>
cmi.hIcon = NULL;<br>
<br>
hr = lpcm-&gt;InvokeCommand (&amp;cmi);<br>
if (! SUCCEEDED (hr)) <br>
{<br>
wsprintf (szTemp, &quot;InvokeCommand failed. hr = %lx&quot;,
hr);<br>
AfxMessageBox (szTemp);<br>
}<br>
}<br>
}<br>
<br>
else<br>
bSuccess = FALSE;<br>
<br>
DestroyMenu (hMenu);<br>
}<br>
<br>
else<br>
bSuccess = FALSE;<br>
<br>
lpcm-&gt;Release ();<br>
} <br>
<br>
else<br>
{<br>
wsprintf (szTemp, &quot;GetUIObjectOf failed! hr = %lx&quot;,
hr);<br>
AfxMessageBox (szTemp);<br>
bSuccess = FALSE;<br>
}<br>
<br>
return bSuccess;<br>
}</tt> </p>

<p>With this code in place, the user can right-click an item,
view the item's context menu, and choose a command from the
context menu. </p>
</body>
</html>

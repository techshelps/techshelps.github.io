<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Icon Handler Interfaces</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Icon Handler Interfaces</h2>

<p>To create an icon handler, you must implement the IPersistFile
interface (described earlier in this chapter) and the
IExtractIcon interface. IExtractIcon supports the GetIconLocation
and ExtractIcon member functions, in addition to the standard
IUnknown functions. </p>

<h4>GetIconLocation</h4>

<p>This member function retrieves the location of the icon.
Normally, this location is an executable or DLL filename, but it
can be any file. The function fills in the <i>szIconFile</i>
parameter with the fully qualified path of the file that contains
the icon, the <i>piIndex</i> parameter with the index to the icon
in the file, and the <i>pwFlags</i> parameter with the type of
icon. In the following example, the flag is specified as
GIL_PERINSTANCE, which means that different files of this type
have different icons: </p>

<p><tt>STDMETHODIMP CIconExt::XIconExt::GetIconLocation (UINT
uFlags,<br>
LPSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags)<br>
{<br>
METHOD_PROLOGUE (CIconExt, IconExt);<br>
::GetModuleFileName (AfxGetInstanceHandle (), szIconFile,
cchMax);<br>
*piIndex = 0;<br>
*pwFlags |= GIL_PERINSTANCE;<br>
return S_OK;<br>
}</tt> </p>

<p>Other supported flags include GIL_SIMULATEDOC, which specifies
that the icon is the one registered for this file type's document
type; and GIL_PERCLASS, which stipulates that icons are the same
for all files of this class. (As mentioned earlier, however,
don't create an icon handler for all files of a certain
class&#151;just update the Registry entry instead.) </p>

<h4>ExtractIcon</h4>

<p>This member function is called when the interface needs to
display an icon that does not reside in an executable or a DLL.
When the icon for a file is in a separate ICO file (or any other
type of file), the icon handler must extract the icon and return
it. Since applications usually have file icons in executables or
DLLs, icon handlers can simply implement ExtractIcon as a
return-only function that returns S_FALSE: </p>

<p><tt>STDMETHODIMP CIconExt::XIconExt::ExtractIcon (<br>
LPCSTR pszFile, UINT nIconIndex, HICON *phiconLarge,<br>
HICON *phiconSmall, UINT nIconSize)<br>
{<br>
return S_FALSE;<br>
}</tt> </p>
</body>
</html>

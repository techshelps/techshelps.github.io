<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Object Handlers</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Data Object Handlers</font></h1>

<p>A data object handler allows your application to supply the
IDataObject interface for a file type when files are being
dragged and dropped or copied and pasted. IDataObject is an
important OLE interface that is responsible for transferring and
caching data and presentations. IDataObject defines functions
that retrieve, store, and enumerate data and that handle
data-change notifications. A default IDataObject is available for
all file types, so you don't have to implement this interface if
you like the default implementation. </p>

<p>Like the drop target handler, only one data object handler is
supported at a time. To register a data object handler, you use
the DataHandler key in the Registry and give the CLSID value of
your extension: </p>

<p><tt>[HKEY_CLASSES_ROOT\SampleType\shellex\DataHandler]<br>
@=&quot;{&lt;CLSID value&gt;}&quot;</tt> </p>

<p>A data object handler is initialized with the IPersistFile
interface and implements the IDataObject interface. Aside from
the standard IUnknown member functions, this handler must
implement the following functions. </p>

<h4>GetData</h4>

<p>The GetData member function retrieves the data associated with
the given object, in the format that is specified from a
designated storage medium. Both the data format (FORMATETC) and
the storage medium (STGMEDIUM) are defined in detail in the OLE 2
Help documentation. </p>

<h4>GetDataHere</h4>

<p>This member function, like GetData, retrieves the data
associated with the given object, in the format that is specified
from a designated storage medium. In the GetData function,
however, the callee provides the storage medium, whereas the
caller supplies the storage medium in the GetDataHere function. </p>

<h4>QueryGetData</h4>

<p>QueryGetData looks at the format of the data and determines
whether a call to GetData will succeed. </p>

<h4>GetCanonicalFormatEtc</h4>

<p>GetCanonicalFormatEtc retrieves a list of the formats
supported for the object. </p>

<h4>SetData</h4>

<p>This member function sets the data in the specified format. </p>

<h4>EnumFormatEtc</h4>

<p>The EnumFormatEtc member function enumerates the formats that
you can use to store data obtained by the GetData function or
sent with the SetData function. </p>

<h4>DAdvise</h4>

<p>DAdvise creates a connection between the data transfer object
and an advisory sink. The advisory sink is then informed when the
object's data changes. </p>

<h4>DUnadvise</h4>

<p>The DUnadvise member function deletes the advisory sink
connection that the DAdvise function establishes. </p>

<h4>EnumDAdvise</h4>

<p>The EnumDAdvise member function enumerates the advisory sink
connections currently established for an object. </p>

<p>Like the IDropTarget interface, the IDataObject interface is
fully explained and referenced in the OLE 2 documentation. If you
aren't familiar with drop targets or data objects, however, it's
probably not a good idea to think about creating an extension to
implement these interfaces. </p>
</body>
</html>

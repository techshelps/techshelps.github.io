<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drop Target Handlers</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Drop Target Handlers</font></h1>

<p>A drop target handler controls the action that occurs when one
object is dropped on another object. For example, if you drag a
Microsoft Word document and drop it on the Word icon or on a
shortcut to the Word icon, Word will start and open that
document. A drop target handler makes this happen. </p>

<p>Unlike the other user interface extensions we have discussed
so far, only one drop target handler at a time is supported. In
those other cases, you could register many extensions. (Note that
the Registry entries refer to them as, for example,
PropertySheetHandlers.) </p>

<p>You register a drop target handler in the Registry under the
DropHandler key, with the value being the CLSID of the drop
target extension: </p>

<p><tt>[HKEY_CLASSES_ROOT\SampleType\shellex\DropHandler]<br>
@=&quot;{&lt;CLSID value&gt;}&quot;</tt> </p>

<p>A drop target handler is implemented through the IDropTarget
interface and initialized with the IPersistFile interface.
IDropTarget implements the DragEnter, DragOver, DragLeave, and
Drop member functions as well as the standard IUnknown functions.
</p>

<h4>DragEnter</h4>

<p>DragEnter signals the beginning of a drop. It determines both
whether the target window can accept the dragged object and what
effect the dragged object will have on the target window. The
function is passed the state of the keyboard (whether one of the
keyboard modifier keys is being pressed: MK_CONTROL, MK_SHIFT,
MK_ALT, MK_LBUTTON, MK_MBUTTON, or MK_RBUTTON), the cursor point,
and a pointer to which drop effect should be used. The drop
effect can be DROPEFFECT_NONE, DROPEFFECT_COPY, DROPEFFECT_MOVE,
DROPEFFECT_LINK, or DROPEFFECT_SCROLL. </p>

<h4>DragOver</h4>

<p>This member function provides feedback to the user about the
state of the drag operation within a drop target application. </p>

<h4>DragLeave</h4>

<p>DragLeave causes the drop target to remove its feedback if the
mouse leaves the drop area or if the drop is canceled. </p>

<h4>Drop</h4>

<p>This member function, the most interesting of the four, is
responsible for effecting the drop of the object onto the target.
In the following code, the data for the object is retrieved, the
name of the file being dropped is queried, and the function
returns S_OK for success. If the data for the object cannot be
retrieved, the function returns E_FAIL. </p>

<p><tt>STDMETHODIMP SampleType::Drop (IDataObject *pDataObj,<br>
DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)<br>
{<br>
HRESULT hres = E_FAIL;<br>
FORMATETC fmte = {CF_HDROP, NULL, DVASPECT_CONTENT, -1,
TYMED_HGLOBAL};<br>
STGMEDIUM medium;<br>
<br>
if (pDataObj &amp;&amp; SUCCEEDED (pDataObj-&gt;GetData
(&amp;fmte, &amp;medium)))<br>
{<br>
char szFileDropped [MAX_PATH];<br>
<br>
DragQueryFile ((HDROP)medium.hGlobal, 0, szFileDropped,<br>
sizeof (szFileDropped));<br>
TRACE (&quot;SampleType::Drop(%s,%s)&quot;, this-&gt;szFileName,
szFileDropped);<br>
hres = S_OK;<br>
<br>
if (medium.pUnkForRelease)<br>
medium.pUnkForRelease-&gt;Release ();<br>
else<br>
GlobalFree (medium.hGlobal);<br>
}<br>
<br>
return hres;<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Sheet Handler Interfaces</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Property Sheet Handler Interfaces</h2>

<p>Property sheet handlers are initialized through the
IShellExtInit interface and use the IShellPropSheetExt interface.
In addition to the IUnknown functions, the IShellPropSheetExt
interface includes the AddPages and ReplacePage member functions.
</p>

<h4>AddPages</h4>

<p>This member function adds pages to a property sheet. It is
passed a pointer to a function that will add the property page
and the <i>lParam</i> parameter that will be passed to the
function. <i>lParam</i> is useful for passing
application-specific data to the handler. The property sheet
handler creates each added page by using the CreatePropSheetPage
function and uses the handle that function returns in a call to
lpfnAddPage. The following code adds a single property sheet page
and provides a dialog procedure for the page: </p>

<p><tt>STDMETHODIMP CPropExt::XPropExt::AddPages (<br>
LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam)<br>
{<br>
METHOD_PROLOGUE (CPropExt, PropExt);<br>
TRACE (&quot;CPropExt::XPropExt::AddPages\n&quot;);<br>
<br>
PROPSHEETPAGE psp;<br>
<br>
psp.dwSize = sizeof (psp); // no extra data<br>
psp.dwFlags = PSP_USEREFPARENT;<br>
psp.hInstance = AfxGetResourceHandle ();<br>
psp.pszTemplate = MAKEINTRESOURCE (IDD_TESTPAGE);<br>
psp.pfnDlgProc = (DLGPROC) pThis-&gt;PropExtDlgProc;<br>
psp.pcRefParent = (UINT *)&amp; (pThis-&gt;m_cRefThisDll);<br>
<br>
pThis-&gt;m_hPage = ::CreatePropertySheetPage (&amp;psp);<br>
if (pThis-&gt;m_hPage)<br>
{<br>
if (! lpfnAddPage (pThis-&gt;m_hPage, lParam))<br>
::DestroyPropertySheetPage (pThis-&gt;m_hPage);<br>
}<br>
return NOERROR;<br>
}<br>
<br>
BOOL APIENTRY CPropExt::PropExtDlgProc (<br>
HWND hDlg, UINT message, UINT wParam, LONG lParam)<br>
{<br>
<br>
switch (message)<br>
{<br>
case WM_NOTIFY:<br>
switch (((NMHDR FAR *)lParam)-&gt;code) <br>
{<br>
case PSN_APPLY:<br>
SetWindowLong (hDlg, DWL_MSGRESULT, TRUE);<br>
break;<br>
<br>
case PSN_KILLACTIVE:<br>
SetWindowLong (hDlg, DWL_MSGRESULT, FALSE);<br>
return 1;<br>
break;<br>
<br>
case PSN_RESET:<br>
SetWindowLong (hDlg, DWL_MSGRESULT, FALSE);<br>
break;<br>
}<br>
}<br>
return FALSE;<br>
}</tt> </p>

<h4>ReplacePage</h4>

<p>ReplacePage is called for Control Panel applications, allowing
them to replace an existing property sheet page with their own
page. Standard property sheet extensions do not need to implement
this function and can simply return E_NOTIMPL. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting Drag and Drop</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Supporting Drag and Drop</font></h1>

<p>Although this book can't really cover OLE drag-and-drop
operations in any detail, let's take a brief look at the basic
steps used by ENUMDESK (and MFCENUM) to support the IDropSource
interface. All applications containing data that can be dropped
into another application must implement this interface. Our
samples support IDropSource so that the user can pick up an
object in a window and drop it on Windows Explorer or on the
desktop. </p>

<p>In addition to the standard IUnknown OLE interface member
functions, you must implement two IDropSource functions:
QueryContinueDrag, which determines whether a drag operation
should continue; and GiveFeedback, which enables a source
application to provide feedback during a drag-and-drop operation.
</p>

<p>In ENUMDESK and MFCENUM, the QueryContinueDrag function
determines whether the user has pressed the Esc key or released
the mouse button (signaling a drop). If Esc has been pressed, the
drop procedure is canceled; if the mouse button has been
released, the drop is finished. </p>

<p><tt>STDMETHODIMP CDropSource::QueryContinueDrag (<br>
BOOL fEscapePressed, DWORD grfKeyState)<br>
{<br>
if (fEscapePressed)<br>
return DRAGDROP_S_CANCEL;<br>
else if (! (grfKeyState &amp; MK_LBUTTON) &amp;&amp; !
(grfKeyState &amp; MK_RBUTTON))<br>
return DRAGDROP_S_DROP;<br>
else<br>
return NOERROR;<br>
}</tt> </p>

<p>The GiveFeedback implementation in the samples simply directs
the system to use the default cursor for the drop operation: </p>

<p><tt>STDMETHODIMP CDropSource::GiveFeedback (DWORD dwEffect)<br>
{<br>
return DRAGDROP_S_USEDEFAULTCURSORS;<br>
}</tt> </p>
</body>
</html>

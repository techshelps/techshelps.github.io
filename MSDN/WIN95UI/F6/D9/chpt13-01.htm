<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter Thirteen: User Interface Extensions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><b>Chapter Thirteen</b>:<b> User Interface Extensions</b> </h1>

<p>The Microsoft Windows 95 user interface is extensible, giving
you, as an application developer, access to tools that manipulate
objects in the shell name space (which is discussed in detail in
Chapter 14). You also have the ability to browse through the file
system and networks. If you like, for example, you can create a
user interface extension that adds items to the context menu of a
specific file type or an extension that lets you assign an icon
to a certain file type. This chapter explains the user interface
extensions (often called shell extensions) and how to implement
them. This discussion assumes that you have read Chapter 12,
covering file viewers, and that you have at least a minimal
understanding of the Component Object Model (COM). </p>

<p>The Windows 95 user interface supports seven types of user
interface extensions (referred to as <i>handlers</i>): </p>

<ul>
    <li><i>Context menu handlers</i> add items to the context
        menu of a particular file object. </li>
    <li><i>Drag-and-drop handlers</i> are context menu handlers
        that are accessed when a user drops a dragged object in a
        new location. </li>
    <li><i>Icon handlers</i> add an instance-specific icon for a
        file object or an icon for a specific file class. </li>
    <li><i>Property sheet handlers</i> add pages to the property
        sheet displayed for a file object. </li>
    <li><i>Copy hook handlers</i> permit or prevent the copying,
        moving, deleting, or renaming of a folder or a printer
        object. </li>
    <li><i>Drop target handlers</i> control the action that
        occurs when a dragged object is dropped on another
        object. </li>
    <li><i>Data object handlers</i> supply the interface when
        files are being dragged and dropped or copied and pasted.
    </li>
</ul>

<p>Like file viewers, all user interface extensions are
implemented as COM objects. Once you understand the basics of how
to implement COM objects, you'll need relatively little
additional information to implement a user interface extension. </p>

<p>I wrote two user interface extension samples in MFC: PROPEXT
(a property sheet handler) and CTXTMENU (a context menu handler).
If you don't use MFC, you'll want to look at SHELLEXT (written by
Greg Keyser), a sample from the Win32 SDK that demonstrates how
to create various user interface extensions. (I included this
sample on the companion disc.) </p>
</body>
</html>

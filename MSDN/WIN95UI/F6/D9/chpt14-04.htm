<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting Friendly Names and Icons</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Getting Friendly Names and Icons</font></h1>

<p>As binary data structures, item IDs aren't much fun to look at
or easy to remember. You need to get a friendlier name for an
object when you display it to the user. Fortunately, each item in
a folder has a display name and two icons associated with it.
(One icon is displayed when the item is selected, and the other
is displayed when the item is not selected.) </p>

<p>The code you just saw retrieved each item's display name and
its icons <br>
by calling application-defined functions. The GetName function
gets the object's friendly name by using the
IShellFolder::GetDisplayNameOf member function. If necessary,
GetName converts the display name to Unicode characters, filling
a buffer that is either allocated by the task allocator or
specified by the application. It then returns a pointer to this
buffer. Otherwise, GetName simply returns the offset to the
display name in the identifier. </p>

<p><tt>BOOL CMfcenumView::GetName (LPSHELLFOLDER lpsf,
LPITEMIDLIST lpi,<br>
DWORD dwFlags, LPSTR lpFriendlyName)<br>
{<br>
BOOL bSuccess = TRUE;<br>
STRRET str;<br>
<br>
if (NOERROR == lpsf-&gt;GetDisplayNameOf (lpi, dwFlags,
&amp;str))<br>
{<br>
switch (str.uType)<br>
{<br>
case STRRET_WSTR:<br>
WideCharToMultiByte (CP_ACP, // code page<br>
0 // dwFlags<br>
str.pOleStr, // lpWideCharStr<br>
-1, // cchWideChar<br>
lpFriendlyName, // lpMultiByteStr<br>
sizeof (lpFriendlyName), // cchMultiByte<br>
NULL, // lpDefaultChar<br>
NULL); // lpUsedDefaultChar<br>
break;<br>
<br>
case STRRET_OFFSET:<br>
lstrcpy (lpFriendlyName, (LPSTR)lpi + str.uOffset);<br>
break;<br>
<br>
case STRRET_CSTR:<br>
lstrcpy (lpFriendlyName, (LPSTR) str.cStr);<br>
break;<br>
<br>
default:<br>
bSuccess = FALSE;<br>
break;<br>
}<br>
}<br>
<br>
else<br>
bSuccess = FALSE;<br>
<br>
return bSuccess;<br>
}</tt> </p>

<p>You can use the IShellFolder::SetNameOf member function to
change the display name of a file object or folder. One side
effect of changing the display name is that the item ID also
changes. </p>

<p>Another application-defined function gets the selected and
unselected icons for the item. You need these icons when adding
the item to the tree view control so that the control can display
the item's status correctly. This function fills in the <i>iImage</i>
and <i>iSelectedImage</i> members of the tree view item passed in
(in the second parameter) with the unselected icon image and the
selected icon image, respectively. The GetIcon function, shown in
this code, simply calls the SHGetFileInfo function to retrieve
the correct icon: </p>

<p><tt>void CMfcenumView::GetNormalAndSelectedIcons (<br>
LPITEMIDLIST lpifq, LPTV_ITEM lptvitem)<br>
{<br>
// Don't check the return value here. <br>
// If GetIcon() fails, you're in big trouble.<br>
lptvitem-&gt;iImage = GetIcon (lpifq, <br>
SHGFI_PIDL | SHGFI_SYSICONINDEX | SHGFI_SMALLICON);<br>
<br>
lptvitem-&gt;iSelectedImage = GetIcon (lpifq, <br>
SHGFI_PIDL | SHGFI_SYSICONINDEX | SHGFI_SMALLICON |
SHGFI_OPENICON);<br>
<br>
return;<br>
}<br>
<br>
int CMfcenumView::GetIcon (LPITEMIDLIST lpi, UINT uFlags)<br>
{<br>
SHFILEINFO sfi;<br>
<br>
SHGetFileInfo ((LPCSTR)lpi, 0, &amp;sfi, sizeof (SHFILEINFO),
uFlags);<br>
<br>
return sfi.iIcon;<br>
}</tt> </p>
</body>
</html>

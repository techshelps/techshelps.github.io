<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tree View Control Macros and Member Functions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Tree View Control Macros and Member Functions</h2>

<p>Table 3-4 on the following page describes the macros and
member functions supported by tree view controls. CTreeCtrl is
the MFC class that supports these controls. To use tree view
controls in your application, you must link with the COMCTL32.LIB
library. If you are working in C, you must include the COMMCTRL.H
header file; if you write your application in MFC, you must
include the AFXCMN.H file in your STDAFX.H file (if you are using
STDAFX.H). </p>

<p>For each message supported by tree view controls, the system
provides a macro that an application can call. I used the macros
rather than the messages in my samples because I find the macros
more readable and because they make it easier to move between C
and MFC. As you can see in Table 3-4, the name of the member
function is nearly always the same as the end of the macro name
(that is, the DeleteItem member function corresponds to the
TreeView_DeleteItem macro). </p>

<table border="1">
    <tr>
        <td valign="top"><b>Macro</b></td>
        <td valign="top"><b>Member Function</b></td>
        <td valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">TreeView_Create</td>
        <td valign="top">Create</td>
        <td valign="top">Creates a tree view control.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_CreateDragImage</td>
        <td valign="top">CreateDragImage</td>
        <td valign="top">Creates a drag image for the specified
        item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_DeleteAllItems</td>
        <td valign="top">DeleteAllItems</td>
        <td valign="top">Deletes all items in a tree view window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_DeleteItem</td>
        <td valign="top">DeleteItem</td>
        <td valign="top">Deletes a specified item from a tree
        view window. This message has two macros,
        TreeView_DeleteItem and TreeView_DeleteAllItems, which
        you can use to delete one item or all items from the
        control. If the item label is being edited when this
        message is sent, the edit operation is canceled, and the
        parent window receives a TVN_ENDLABELEDIT notification.
        Then a TVN_DELETEITEM notification is sent to the parent
        window. If <i>hItem</i> is TVI_ROOT, all items are
        deleted from the control.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_EditLabel</td>
        <td valign="top">EditLabel</td>
        <td valign="top">Begins in-place editing of an item's
        text label. The text is replaced by a single-line edit
        window containing the original text in a selected and
        focused state. A TVN_BEGINLABELEDIT notification is sent
        to the parent window of the tree view control. You can
        safely subclass the edit control, but do not destroy it.
        When the user completes or cancels the editing, the
        handle to the edit window becomes invalid.</td>
    </tr>
</table>

<p><b>Table 3-4.</b><i> Tree view control macros and member
functions.</i> <i>(continued)</i> </p>

<table border="1">
    <tr>
        <td valign="top"><b>Macro</b></td>
        <td valign="top"><b>Member Function</b></td>
        <td valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">TreeView_EnsureVisible</td>
        <td valign="top">EnsureVisible</td>
        <td valign="top">Ensures that an item is visible, and
        expands the parent item or scrolls the tree view window
        if necessary. If the message expands the parent item,
        TVN_ITEMEXPANDING and TVN_ITEMEXPANDED notifications are
        sent to the parent window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_Expand</td>
        <td valign="top">Expand</td>
        <td valign="top">Expands or collapses the list of child
        items associated with a parent item. This message sends
        TVN_ITEMEXPANDING and TVN_ITEMEXPANDED notifications to
        the parent window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetChild</td>
        <td valign="top">GetChildItem</td>
        <td valign="top">Retrieves the child of a specified tree
        view item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetCount</td>
        <td valign="top">GetCount</td>
        <td valign="top">Returns the number of items in a tree
        view window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetDrop- Hilight</td>
        <td valign="top">GetDrop- HilightItem</td>
        <td valign="top">Retrieves the target of a drag-and-drop
        operation.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetEditControl</td>
        <td valign="top">GetEditControl</td>
        <td valign="top">Retrieves the handle of the edit control
        being used for in-place editing of an item's text label.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetFirstVisible</td>
        <td valign="top">GetFirstVisibleItem</td>
        <td valign="top">Retrieves the first visible item of a
        tree view control.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetImageList</td>
        <td valign="top">GetImageList</td>
        <td valign="top">Retrieves the handle of the image list
        associated with a tree view window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetIndent</td>
        <td valign="top">GetIndent</td>
        <td valign="top">Retrieves the amount, in pixels, that
        child items are indented relative to their parent item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetItem</td>
        <td valign="top">GetItem</td>
        <td valign="top">Retrieves information about an item
        depending on the <i>mask</i> member in the TV_ITEM
        structure passed in.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetItemRect</td>
        <td valign="top">GetItemRect</td>
        <td valign="top">Retrieves the bounding rectangle and
        visibility state of an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetNextItem</td>
        <td valign="top">GetNextItem</td>
        <td valign="top">Retrieves the next item that matches a
        specified relationship.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetNextSibling</td>
        <td valign="top">GetNext- SiblingItem</td>
        <td valign="top">Retrieves the next sibling of an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetNextVisible</td>
        <td valign="top">GetNext- VisibleItem</td>
        <td valign="top">Retrieves the next visible item
        following the specified tree view item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetParent</td>
        <td valign="top">GetParentItem</td>
        <td valign="top">Retrieves the parent of an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetPrevSibling</td>
        <td valign="top">GetPrev- SiblingItem</td>
        <td valign="top">Retrieves the previous sibling of an
        item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetPrevVisible</td>
        <td valign="top">GetPrev- VisibleItem</td>
        <td valign="top">Retrieves the first visible item
        preceding the specified tree view item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetRoot</td>
        <td valign="top">GetRootItem</td>
        <td valign="top">Retrieves the root of an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetSelection</td>
        <td valign="top">GetSelectedItem</td>
        <td valign="top">Retrieves the currently selected item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_GetVisibleCount</td>
        <td valign="top">GetVisibleCount</td>
        <td valign="top">Retrieves the count of items that will
        fit into the tree view window.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_HitTest</td>
        <td valign="top">HitTest</td>
        <td valign="top">Retrieves the tree view item that
        occupies the specified point. This message is generally
        used for drag-and-drop operations.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_InsertItem</td>
        <td valign="top">InsertItem</td>
        <td valign="top">Inserts a new item in a tree view
        window. If the item is being edited, the edit operation
        is canceled, and the parent window receives a
        TVN_ENDLABELEDIT notification.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_Select</td>
        <td valign="top">Select</td>
        <td valign="top">Selects, scrolls into view, or redraws
        an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SelectDropTarget</td>
        <td valign="top">SelectDropTarget</td>
        <td valign="top">Selects an item as the drop target.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SelectItem</td>
        <td valign="top">SelectItem</td>
        <td valign="top">Selects an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SetImageList</td>
        <td valign="top">SetImageList</td>
        <td valign="top">Sets the image list for a tree view
        window and redraws it.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SetIndent</td>
        <td valign="top">SetIndent</td>
        <td valign="top">Sets the amount of indention for a child
        item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SetItem</td>
        <td valign="top">SetItem</td>
        <td valign="top">Sets the attributes of an item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SortChildren</td>
        <td valign="top">SortChildren</td>
        <td valign="top">Sorts the child items of a given parent
        item.</td>
    </tr>
    <tr>
        <td valign="top">TreeView_SortChildrenCB</td>
        <td valign="top">SortChildrenCB</td>
        <td valign="top">Sorts items using an application-defined
        comparison function.</td>
    </tr>
</table>
</body>
</html>

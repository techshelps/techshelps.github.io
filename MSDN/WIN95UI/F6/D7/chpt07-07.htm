<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Common Dialog Boxes</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Using the Common Dialog Boxes</font></h1>

<p>To support long filenames (and to save some time), I used two
of the Windows 95 common dialog boxes to open and save the
house-listing information. I was actually able to use some code I
had written for the Windows 3.1 common dialog boxes; when I
recompiled, the application displayed the new dialog boxes. I had
to strip off the filename extension (TXT, in this case) before I
set the caption text for the main window. As you can see in
Figure 7-3 on the next page, the Open common dialog box has no
problem with long filenames, such as <i>Listing for Puget Sound</i>
or <i>Another Saved Listing</i>. </p>

<p>You'll see some differences between the code used to handle
common dialog boxes in CHICOAPP and that used in MFCEXP. MFC has
built-in support for the File Open and File New functions. The
AppWizard tool adds entries to the message map for the
application in the main module's CPP file&#151;in this case,
MFCEXP.CPP: </p>

<p><tt>BEGIN_MESSAGE_MAP (CMfcexpApp, CWinApp)<br>
// {{AFX_MSG_MAP (CMfcexpApp)<br>
ON_COMMAND (ID_APP_ABOUT, OnAppAbout)<br>
// NOTE: ClassWizard will add and remove mapping macros here.<br>
// DO NOT EDIT what you see in these blocks of generated code!<br>
// }}AFX_MSG_MAP<br>
// Standard file-based document commands<br>
// ON_COMMAND (IDM_NEW, CWinApp::OnFileNew)<br>
// ON_COMMAND (IDM_OPEN, CWinApp::OnFileOpen)<br>
END_MESSAGE_MAP ()</tt> </p>

<p><b>Figure 7-3.</b> </p>

<p><img src="fig7-3.gif" width="431" height="294"></p>

<h4><i>The Open common dialog box used in CHICOAPP.</i> </h4>

<p>In my MFCEXP sample, the file input/output commands are
handled in the view class. In response to a command to open or
save a file, the application calls the common dialog box directly
through the CFileDialog class. When creating the class, the
application passes initialization information that is used to
fill out the OPENFILENAME structure. This structure can be
accessed directly through the <i>m_ofn</i> member variable: </p>

<p><tt>void CMfcexpView::OnOpen ()<br>
{<br>
CFileDialog Dlg (TRUE, &quot;*.txt&quot;, m_lpstrFile, <br>
OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,<br>
szFilter);<br>
<br>
if (Dlg.DoModal () == IDOK)<br>
{<br>
HANDLE hFile;<br>
DWORD dwBytesRead;<br>
DWORD dwFileSize;<br>
<br>
if ((hFile = CreateFile ((LPCTSTR) Dlg.m_ofn.lpstrFile,<br>
GENERIC_READ,<br>
FILE_SHARE_READ,<br>
NULL,<br>
OPEN_EXISTING,<br>
FILE_ATTRIBUTE_NORMAL,<br>
(HANDLE)NULL)) == (HANDLE)(-1))<br>
{<br>
AfxMessageBox (&quot;File open failed.&quot;);<br>
return;<br>
}<br>
<br>
// Get the size of the file.<br>
dwFileSize = GetFileSize (hFile, NULL);<br>
if (dwFileSize == 0xFFFFFFFF)<br>
{<br>
AfxMessageBox (&quot;GetFileSize failed!&quot;);<br>
return;<br>
}<br>
<br>
// Allocate a buffer to read the file into.<br>
m_lpBufPtr = (char *) malloc (dwFileSize);<br>
if (m_lpBufPtr == NULL)<br>
{<br>
AfxMessageBox (&quot;malloc failed!&quot;);<br>
CloseHandle (hFile);<br>
return;<br>
}<br>
<br>
// Read the file contents into the buffer.<br>
ReadFile (hFile, (LPVOID)m_lpBufPtr, dwFileSize,
&amp;dwBytesRead, NULL);<br>
<br>
if (dwBytesRead == 0)<br>
{<br>
AfxMessageBox (&quot;Zero bytes read.&quot;);<br>
return;<br>
}<br>
<br>
// Close the file.<br>
CloseHandle (hFile);<br>
<br>
// Parse the file buffer.<br>
if (ParseFile ());<br>
{<br>
lstrcpy (m_lpstrFile, Dlg.m_ofn.lpstrFileTitle);<br>
// Reset the title in the title bar.<br>
GetParentFrame() -&gt; SetWindowText(m_lpstrFile);<br>
// Redraw the title bar.<br>
GetParentFrame() -&gt; Invalidate(TRUE);<br>
}<br>
<br>
}<br>
}</tt></p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Tab Control</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating a Tab Control</h2>

<p>You create a tab control by calling the CreateWindow or
CreateWindowEx function and specifying the WC_TABCONTROL window
class. This window class is registered when the dynamic-link
library for Win32 common controls (COMCTL32.DLL) is loaded. You
also need to link with the COMCTL32.LIB library. </p>

<p>To include tabs in a window, the application must also fill
out the TC_ITEM or TC_ITEMHEADER structure. These two structures
specify the attributes of the tabs. TC_ITEM and TC_ITEMHEADER are
nearly identical, except that TC_ITEMHEADER lets you specify
extra application-specific data. To do this, the application
should define its own structure, consisting of the TC_ITEMHEADER
structure followed by application-defined data, and then set the
total number of bytes per tab using the TCM_SETITEMEXTRA message.
For example, if my application stored information about a
baseball player for each tab, I would define a structure that
looks something like the code on the following page. </p>

<p><tt>typedef struct _PLAYER_TAB <br>
{<br>
TC_ITEMHEADER tci; // tab item information<br>
LPSTR lpstrName; // player's name<br>
LPSTR lpstrTeam; // player's team<br>
LONG lERA; // player's ERA<br>
LONG lSalary; // player's salary<br>
BOOL bCap; // salary cap?<br>
} PLAYER_TAB;</tt> </p>

<p>After adding the tabs to the tab control, the application
sends the TCM_SETITEMEXTRA message to set the amount of data to <i>sizeof
(PLAYER_TAB)</i>. If the application needs to store a pointer to
the structure without including TC_ITEMHEADER in the structure,
it can instead use TC_ITEM and store the pointer to the structure
in the <i>lParam</i> field. </p>

<p>Let's look at some simple code that fills out the TC_ITEM
structure and creates a tab within a tab control by calling the
TabCtrl_InsertItem macro. The following code snippet creates a
tab control that contains text and has no image list associated
with it: </p>

<p><tt>TC_ITEM tie;<br>
<br>
tie.mask = TCIF_TEXT | TCIF_IMAGE;<br>
tie.iImage = -1;<br>
tie.pszText = &quot;Tab 1&quot;;<br>
<br>
if (TabCtrl_InsertItem (hwndTab, i, &amp;tie) == -1) <br>
{<br>
// The insert failed; display an error box.<br>
MessageBox (NULL, &quot;TabCtrl_InsertItem failed!&quot;, NULL,
MB_OK);<br>
return NULL;<br>
}</tt> </p>

<p>So far, you've created a tab control and inserted tab items,
but the tab control still doesn't have much functionality. The
application must now manage the window associated with the tabs.
You can do this the easy way or the not-so-easy way. The easy way
is to use a property sheet in conjunction with tabs, as described
later in this chapter. </p>

<p>The not-so-easy way is to handle the TCN_SELCHANGE
notification that is sent through a WM_COMMAND message. This
notification is sent when the user clicks a tab and the
application needs to switch pages. The application processes the
notification and makes the appropriate changes to the focus
window. With this method, you could, for example, allow the
application to use one edit control for all the tabs. The
application would assign the memory handle (send an EM_SETHANDLE
message to the edit control) for the incoming page. Although this
method certainly works, a better way to handle paging between
tabs is to let the system do the grunt work for you and to use a
property sheet instead. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Notifications</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Handling Notifications</h2>

<p>OK. You have your list view control, you have your image
lists, you're able to switch between views&#151;but you still
aren't ready to compile, link, and run. Before you do that, you
must set up a way to handle the WM_NOTIFY messages that will be
sent to the parent window. List view controls receive
notifications when text is needed for display, when items are
being dragged and dropped, when labels are being edited, and when
columns are being sorted (to name just a few cases). The C code
you'll see next is an implementation of a handler that I set up
for the WM_NOTIFY message. When the parent window receives the
WM_NOTIFY message, it calls this function to determine the
following: </p>

<ul>
    <li>Whether it needs text for a list view item
        (LVN_GETDISPINFO) </li>
    <li>Whether the items must be sorted (LVN_COLUMNCLICK) </li>
    <li>Whether it needs to handle label editing
        (LVN_BEGINLABELEDIT and LVN_ENDLABELEDIT) </li>
</ul>

<p>When the WM_NOTIFY message is sent, the <i>lParam</i>
parameter serves as a pointer to an NM_LISTVIEW or LV_DISPINFO
structure. Which structure <i>lParam </i>points to is determined
by the notification sent. Each item in my list view control has
an associated item containing information about the house it
describes. I saved the pointer to this information in the <i>lParam</i>
member of the LV_ITEM structure when I added the item to the
control. The following code shows what the sample does in
response to a request for text and in response to a column click.
(We'll discuss label editing later in this chapter.) </p>

<p><tt>LRESULT NotifyHandler (HWND hWnd, UINT uMsg, WPARAM
wParam,<br>
LPARAM lParam)<br>
{<br>
LV_DISPINFO *pLvdi = (LV_DISPINFO *)lParam;<br>
NM_LISTVIEW *pNm = (NM_LISTVIEW *)lParam;<br>
HOUSEINFO *pHouse = (HOUSEINFO *)(pLvdi-&gt;item.lParam);<br>
static char szText [10];<br>
<br>
if (wParam != ID_LISTVIEW)<br>
return 0L;<br>
<br>
switch (pLvdi-&gt;hdr.code)<br>
{<br>
case LVN_GETDISPINFO:<br>
<br>
switch (pLvdi-&gt;item.iSubItem)<br>
{<br>
case 0: // address<br>
pLvdi-&gt;item.pszText = pHouse-&gt;szAddress;<br>
break;<br>
<br>
case 1: // city<br>
pLvdi-&gt;item.pszText = pHouse-&gt;szCity;<br>
break;<br>
<br>
case 2: // price<br>
sprintf (szText, &quot;$%u&quot;, pHouse-&gt;iPrice);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
case 3: // number of bedrooms<br>
sprintf (szText, &quot;%u&quot;, pHouse-&gt;iBeds);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
case 4: // number of bathrooms<br>
sprintf (szText, &quot;%u&quot;, pHouse-&gt;iBaths);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
default:<br>
break;<br>
}<br>
break;<br>
§<br>
case LVN_COLUMNCLICK:<br>
// The user clicked a column header; sort by this criterion.<br>
ListView_SortItems (pNm-&gt;hdr.hwndFrom,<br>
ListViewCompareProc,<br>
(LPARAM)(pNm-&gt;iSubItem));<br>
break;<br>
<br>
default:<br>
break;<br>
}<br>
<br>
return 0L;<br>
}</tt> </p>

<p>When I ported this sample to MFC, I had to find a way to get
to the WM_NOTIFY message because ClassWizard does not offer
WM_NOTIFY as an option for a message map. I decided to overload
the WindowProc function in the Cwnd class<b> </b>and call my
notification handler from there: </p>

<p><tt>LRESULT CMfclistView::WindowProc (UINT message, WPARAM
wParam,<br>
LPARAM lParam) <br>
{<br>
if (message == WM_NOTIFY)<br>
NotifyHandler (message, wParam, lParam);<br>
return CView::WindowProc (message, wParam, lParam);<br>
}</tt></p>
</body>
</html>

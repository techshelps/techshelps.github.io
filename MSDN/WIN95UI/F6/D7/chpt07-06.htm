<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parsing and Storing the Data</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Parsing and Storing the Data</font></h1>

<p>After creating and resizing my windows, I needed a method for
reading in and storing the data for the various house listings.
In my original samples, I used static arrays filled with dummy
information. This technique is great if you never intend to
change the information you are displaying. But in a working
application, it makes sense to provide for dynamic data changes. </p>

<p>The easiest way to store the data is to save it in a file. I
decided to use an ASCII file because it is easy to test and easy
to alter. The file contains the following information: </p>

<ul>
    <li>Number of cities </li>
    <li>Name of city (one name per line) </li>
    <li>Number of houses </li>
    <li>Information about each house (one house per line, with
        each item of information separated by a comma) </li>
</ul>

<p>Here's what the ASCII file looks like: </p>

<p><tt>3<br>
Bellevue<br>
Redmond<br>
Seattle<br>
9<br>
100 Berry Lane,Redmond,175000,3,2,Joan Smith,555-1212<br>
523 Apple Road,Redmond,125000,4,2,Ed Jones,555-1111<br>
1212 Peach Street,Redmond,200000,4,3,Mary Wilson,555-2222<br>
22 Daffodil Lane,Bellevue,2500000,4,4,Joan Smith,555-1212<br>
33542 Orchid Road,Bellevue,180000,3,2,Ed Jones,555-1111<br>
64134 Lily Street,Bellevue,250000,4,3,Mary Wilson,555-2222<br>
33 Nicholas Lane,Seattle,350000,3,2,Joan Smith,555-1212<br>
555 Tracy Road,Seattle,140000,3,2,Ed Jones,555-1111<br>
446 Jean Street,Seattle,225000,4,3,Mary Wilson,555-2222</tt> </p>

<p>Parsing the file was simply a matter of using sscanf,
converting some of the strings to integers, copying the data to
my data structure, and updating my file pointer. The data
structures I used contained information about the houses, the
cities, and the current state of the application. I filled out a
CITYINFO structure for each city listed and a HOUSEINFO structure
for each house listed. When saving the information to a file, I
reversed the procedure. The code on the next page shows what the
structures look like. </p>

<p><tt>typedef struct tagCITYINFO<br>
{<br>
char szCity [MAX_CITY]; // city name<br>
int NumHouses; // number of houses listed in this city<br>
HTREEITEM hItem; // handle to tree view item<br>
} CITYINFO;<br>
<br>
typedef struct tagHOUSEINFO<br>
{<br>
char szAddress [MAX_ADDRESS]; // address<br>
char szCity [MAX_CITY]; // city<br>
int iPrice; // price<br>
int iBeds; // number of bedrooms<br>
int iBaths; // number of bathrooms<br>
int iImage; // bitmap index for this house<br>
char szAgent [MAX_CITY]; // listing agent<br>
char szNumber [MAX_CITY]; // listing agent's phone number<br>
} HOUSEINFO;</tt> </p>

<p>When I ported CHICOAPP to MFC, I stored data in the view class
in member variables rather than using the LISTINFO structure: </p>

<p><tt>typedef struct tagCITYINFO<br>
{<br>
CString szCity; // city name<br>
int NumHouses; // number of houses listed in this city<br>
HTREEITEM hItem; // handle to tree view item<br>
} CITYINFO;<br>
<br>
typedef struct tagHOUSEINFO<br>
{<br>
CString szAddress;<br>
CString szCity;<br>
int iPrice;<br>
int iBeds;<br>
int iBaths;<br>
int iImage;<br>
CString szAgent;<br>
CString szNumber;<br>
} HOUSEINFO;<br>
<br>
class CMfcexpView : public CView<br>
{<br>
protected: // create from serialization only<br>
CMfcexpView ();<br>
DECLARE_DYNCREATE (CMfcexpView);<br>
<br>
// Common controls<br>
CToolBarCtrl m_Toolbar; // toolbar<br>
CStatusBarCtrl m_StatusBar; // status bar<br>
CListCtrl m_ListCtl; // list view control<br>
CImageList m_ImageLarge; // large (32-by-32) image list<br>
CImageList m_ImageSmall; // small (16-by-16) image list<br>
CTreeCtrl m_TreeCtl; // tree view control<br>
<br>
// Indexes to icons in the tree view image list<br>
int m_idxForSale;<br>
int m_idxSeattle;<br>
int m_idxSeaSel;<br>
int m_idxRedmond;<br>
int m_idxRedSel;<br>
int m_idxBellevue;<br>
int m_idxBellSel;<br>
<br>
// Handles to the root, parent, and previous tree view items<br>
HTREEITEM m_hTPrev;<br>
HTREEITEM m_hParent;<br>
HTREEITEM m_hTRoot;<br>
<br>
// House listing information<br>
int m_NumCities; // number of cities<br>
int m_NumHouses; // number of houses<br>
int m_iSelected; // index to selected city<br>
int m_iSelHouse; // index to selected house<br>
HOUSEINFO m_rgHouses [MAX_HOUSES];<br>
CITYINFO m_rgCities [MAX_CITIES];<br>
<br>
// Pointer to buffer for listing data<br>
char *m_lpBufPtr;<br>
<br>
// Current file opened<br>
LPTSTR m_lpstrFile; <br>
§<br>
}</tt> </p>

<p>In the MFC version of the sample, I replaced the character
arrays that hold textual information with CString instances. This
made it very easy to compare strings and get information to and
from the dialog boxes. (You'll see this code later in the
chapter.) It wasn't so easy, however, to use the C run-time
sscanf to get information from the data file. With character
arrays (for example, <i>char szAddress [MAX_ADDRESS]</i>), sscanf
works perfectly; but when you use CStrings, this function does
not work. To get around this, I used a character buffer and
copied the string from the character buffer into CStrings. </p>

<p><tt>// Read the house information for each line.<br>
for (count = 0; count &lt; g_Listing.NumHouses; count++)<br>
{<br>
result = sscanf (lpBufPtr, <br>
&quot;%[^','],%[^','],%[^','],%[^','],%[^','],%[^','],%s&quot;, <br>
rgHouses[count].szAddress, <br>
rgHouses[count].szCity, <br>
szTemp, szBeds, szBaths, <br>
rgHouses[count].szAgent, <br>
rgHouses[count].szNumber); <br>
<br>
rgHouses[count].iPrice = atoi (szTemp);<br>
rgHouses[count].iBeds = atoi (szBeds);<br>
rgHouses[count].iBaths = atoi (szBaths);<br>
§<br>
}</tt> </p>
</body>
</html>

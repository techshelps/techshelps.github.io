<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a List View Control</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating a List View Control</h2>

<p>At first glance, creating a list view control might appear to
be a daunting task. Getting all the necessary information placed
in the correct structures involves several steps: </p>

<ol>
    <li>Create the window by using the CreateWindow or
        CreateWindowEx function, specifying WC_LISTVIEW as the
        class name. Alternatively, if you are writing in MFC, use
        the MFC CListCtrl class and its Create member function. </li>
    <li>Create image lists for the large icon and small icon
        views by calling ImageList_Create. Load the bitmaps for
        the images by calling LoadBitmap or LoadIcon, and add
        them to the image lists by calling ImageList_Add or
        ImageList_AddIcon. Alternatively, use the MFC CImageList
        class. </li>
    <li>Initialize the column header you will use by loading the
        strings and calling ListView_InsertColumn. MFC developers
        should use the CListCtrl class. </li>
    <li>Insert each item into the list view control, and
        initialize any associated text. </li>
</ol>

<p>The following code demonstrates these steps. In the LISTVIEW
and MFCLIST samples, I defined a structure containing information
about the houses listed, including address, city, price, number
of bedrooms, and number of bathrooms. I also created an icon for
each city represented (a total of three icons). </p>

<p><tt>// House structure used for listing<br>
typedef struct tagHOUSEINFO <br>
{<br>
char szAddress [MAX_ADDRESS];<br>
char szCity [MAX_CITY];<br>
int iPrice;<br>
int iBeds;<br>
int iBaths;<br>
} HOUSEINFO;<br>
<br>
HWND CreateListView (HWND hWndParent)<br>
{<br>
HWND hWndList; // handle to list view window<br>
RECT rcl; // rectangle for setting size of window<br>
HICON hIcon; // handle to an icon<br>
int index; // index used in for loops<br>
HIMAGELIST hSmall, hLarge; // handles to image lists for small
and<br>
// large icons<br>
LV_COLUMN lvC; // list view column structure<br>
char szText [MAX_PATH]; // place to store some text<br>
LV_ITEM lvI; // list view item structure<br>
int iSubItem; // index into column header string table<br>
<br>
// Ensure that the common control DLL is loaded.<br>
InitCommonControls ();<br>
<br>
// Get the size and position of the parent window.<br>
GetClientRect (hWndParent, &amp;rcl);<br>
<br>
// Create the list view window that starts out in details view <br>
// and supports label editing.<br>
hWndList = CreateWindowEx (<br>
0L,<br>
WC_LISTVIEW, // list view class<br>
&quot;&quot;, // no default text<br>
WS_VISIBLE | WS_CHILD | WS_BORDER | LVS_REPORT | <br>
LVS_EDITLABELS | WS_EX_CLIENTEDGE, // styles<br>
0, 0,<br>
rcl.right - rcl.left, rcl.bottom - rcl.top,<br>
hWndParent,<br>
(HMENU)ID_LISTVIEW,<br>
hInst,<br>
NULL);<br>
<br>
if (hWndList == NULL)<br>
return NULL;<br>
<br>
// Initialize the list view window.<br>
// First initialize the image lists you will need:<br>
// create image lists for the small and the large icons.<br>
<br>
hSmall = ImageList_Create (BITMAP_WIDTH, BITMAP_HEIGHT,<br>
FALSE, 3, 0);<br>
<br>
hLarge = ImageList_Create (LG_BITMAP_WIDTH, LG_BITMAP_HEIGHT,<br>
FALSE, 3, 0);<br>
<br>
// Load the icons and add them to the image lists.<br>
for (index = REDMOND; index &lt;= SEATTLE; index++)<br>
{<br>
hIcon = LoadIcon (hInst, MAKEINTRESOURCE (index));<br>
// You have 3 of each type of icon here, so add 3 at a time.<br>
for (iSubItem = 0; iSubItem &lt; 3; iSubItem++)<br>
{<br>
if ((ImageList_AddIcon (hSmall, hIcon) == -1) ||<br>
(ImageList_AddIcon (hLarge, hIcon) == -1))<br>
return NULL;<br>
}<br>
}<br>
<br>
// Be sure that all the small icons were added.<br>
if (ImageList_GetImageCount (hSmall) &lt; 3)<br>
return FALSE;<br>
<br>
// Be sure that all the large icons were added.<br>
if (ImageList_GetImageCount (hLarge) &lt; 3)<br>
return FALSE;<br>
<br>
// Associate the image lists with the list view control.<br>
ListView_SetImageList (hWndList, hSmall, LVSIL_SMALL);<br>
<br>
ListView_SetImageList (hWndList, hLarge, LVSIL_NORMAL);<br>
§</tt> </p>

<p>Next, after creating the list view control and then creating
and initializing the image lists, it is time to add the column
information. In order to do this, you must fill out an LV_COLUMN
structure for each one of the columns and insert the columns by
using the ListView_InsertColumn macro, as shown in the following
code: </p>

<p><tt>// Now initialize the columns you will need.<br>
// Initialize the LV_COLUMN structure.<br>
// The mask specifies that the fmt, width, pszText, and subitem
members <br>
// of the structure are valid.<br>
lvC.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;<br>
lvC.fmt = LVCFMT_LEFT; // left-align column<br>
lvC.cx = 75; // width of column in pixels<br>
lvC.pszText = szText;<br>
<br>
// Add the columns.<br>
for (index = 0; index &lt;= NUM_COLUMNS; index++)<br>
{<br>
lvC.iSubItem = index;<br>
LoadString (hInst, IDS_ADDRESS + index, szText, sizeof (szText));<br>
if (ListView_InsertColumn (hWndList, index, &amp;lvC) == -1)<br>
return NULL;<br>
}<br>
§</tt> </p>

<p>After setting up the columns, add the items one by one. For
each item, you must fill out an LV_ITEM structure. My samples
include a callback function to provide the text for the items.
Whenever the list view control needs the text for an item, my
callback function is called. </p>

<p><tt>// Finally, add the actual items to the control.<br>
// Fill out the LV_ITEM structure for each item to add to the
list.<br>
// The mask specifies that the pszText, iImage, lParam, and state<br>
// members of the LV_ITEM structure are valid.<br>
lvI.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM | LVIF_STATE;<br>
lvI.state = 0; <br>
lvI.stateMask = 0; <br>
<br>
for (index = 0; index &lt; NUM_ITEMS; index++)<br>
{<br>
lvI.iItem = index;<br>
lvI.iSubItem = 0;<br>
// The parent window is responsible for storing the text.<br>
// The list view control will send an LVN_GETDISPINFO<br>
// when it needs the text to display.<br>
lvI.pszText = LPSTR_TEXTCALLBACK; <br>
lvI.cchTextMax = MAX_ITEMLEN;<br>
lvI.iImage = index;<br>
lvI.lParam = (LPARAM) &amp;rgHouseInfo[index];<br>
<br>
if (ListView_InsertItem (hWndList, &amp;lvI) == -1)<br>
return NULL;<br>
<br>
for (iSubItem = 1; iSubItem &lt; NUM_COLUMNS; iSubItem++)<br>
{<br>
ListView_SetItemText (hWndList, index, iSubItem,<br>
LPSTR_TEXTCALLBACK);<br>
}<br>
}<br>
<br>
return (hWndList);<br>
}</tt> </p>

<p>Now that you've seen the code in C, you might wonder whether
you need to do anything different or special in order to create
and use a list view control in an MFC application. Under MFC, the
list view control is supported through the CListCtrl class. In my
MFCLIST sample, I created the control in the view class. In the
definition of this class, I included a member variable for my
CListCtrl object and my two CImageList objects: </p>

<p><tt>class CMfclistView : public CView<br>
{<br>
protected: // create from serialization only<br>
CMfclistView ();<br>
DECLARE_DYNCREATE (CMfclistView);<br>
CListCtrl m_ListCtl;<br>
CImageList m_ImageLarge;<br>
CImageList m_ImageSmall;<br>
§</tt> </p>

<p>Then I created a message map entry for the WM_CREATE message
and used the Create member function to create the list view
control. This code looks nearly identical to the C code, as you
can see here: </p>

<p><tt>int CMfclistView::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>
{<br>
int index;<br>
int iSubItem;<br>
HICON hIcon;<br>
LV_COLUMN lvC; // list view column structure<br>
static char szText [256]; // place to store some text<br>
LV_ITEM lvI; // list view item structure<br>
<br>
if (CView::OnCreate (lpCreateStruct) == -1)<br>
return -1;<br>
<br>
// Create the CListCtrl window.<br>
m_ListCtl.Create (<br>
WS_VISIBLE | WS_CHILD | WS_BORDER | LVS_REPORT | LVS_EDITLABELS,<br>
CRect (0, 0, 0, 0), // bounding rectangle<br>
this, // parent<br>
ID_LISTVIEW); // ID<br>
<br>
// Create the large icon image list.<br>
m_ImageLarge.Create (<br>
LARGE_BITMAP_WIDTH,<br>
LARGE_BITMAP_HEIGHT,<br>
FALSE, // list does not include masks<br>
NUM_BITMAPS,<br>
0); // list won't grow<br>
<br>
// Create the small icon image list.<br>
m_ImageSmall.Create (<br>
SMALL_BITMAP_WIDTH,<br>
SMALL_BITMAP_HEIGHT,<br>
FALSE, // list does not include masks<br>
NUM_BITMAPS,<br>
0); // list won't grow<br>
<br>
// Load the icons and add them to the image lists.<br>
for (index = IDI_BELLEVUE; index &lt;= IDI_SEATTLE ; index++)<br>
{<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (index));<br>
// You have 3 of each type of icon here, so add 3 at a time.<br>
for (iSubItem = 0; iSubItem &lt; 3; iSubItem++)<br>
{<br>
if ((m_ImageSmall.Add (hIcon) == -1) ||<br>
(m_ImageLarge.Add (hIcon) == -1))<br>
return NULL;<br>
}<br>
}<br>
<br>
// Be sure that all the small icons were added.<br>
if (m_ImageSmall.GetImageCount () &lt; 3)<br>
return NULL;<br>
<br>
// Be sure that all the large icons were added.<br>
if (m_ImageLarge.GetImageCount () &lt; 3)<br>
return NULL;<br>
<br>
// Associate the image lists with the list view control.<br>
m_ListCtl.SetImageList (&amp;m_ImageSmall, LVSIL_SMALL);<br>
m_ListCtl.SetImageList (&amp;m_ImageLarge, LVSIL_NORMAL);<br>
<br>
// Now initialize the columns you will need.<br>
// Initialize the LV_COLUMN structure.<br>
// The mask specifies that the fmt, width, pszText, and subitem
members <br>
// of the structure are valid.<br>
lvC.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;<br>
lvC.fmt = LVCFMT_LEFT; // left-align column<br>
lvC.cx = 75; // width of column in pixels<br>
<br>
// Add the columns.<br>
for (index = 0; index &lt;= NUM_COLUMNS; index++)<br>
{<br>
lvC.iSubItem = index;<br>
lvC.pszText = szColumns [index];<br>
<br>
if (m_ListCtl.InsertColumn (index, &amp;lvC) == -1)<br>
return NULL;<br>
}<br>
<br>
// Finally, add the actual items to the control.<br>
// Fill out the LV_ITEM structure for each item to add to the
list.<br>
// The mask specifies that the pszText, iImage, lParam, and state<br>
// members of the LV_ITEM structure are valid.<br>
lvI.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM | LVIF_STATE;<br>
lvI.state = 0; <br>
lvI.stateMask = 0; <br>
<br>
for (index = 0; index &lt; NUM_ITEMS; index++)<br>
{<br>
lvI.iItem = index;<br>
lvI.iSubItem = 0;<br>
// The parent window is responsible for storing the text.<br>
// The list view control will send an LVN_GETDISPINFO<br>
// when it needs the text to display.<br>
lvI.pszText = LPSTR_TEXTCALLBACK; <br>
lvI.cchTextMax = MAX_ITEMLEN;<br>
lvI.iImage = index;<br>
lvI.lParam = (LPARAM) &amp;rgHouseInfo[index];<br>
<br>
if (m_ListCtl.InsertItem (&amp;lvI) == -1)<br>
return NULL;<br>
<br>
for (iSubItem = 1; iSubItem &lt; NUM_COLUMNS; iSubItem++)<br>
{<br>
m_ListCtl.SetItemText (index,<br>
iSubItem,<br>
LPSTR_TEXTCALLBACK);<br>
}<br>
}<br>
<br>
return 0;<br>
}</tt> </p>
</body>
</html>

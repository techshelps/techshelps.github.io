<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Sample's Toolbar and Combo Boxes</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating the Sample's Toolbar and Combo Boxes</h2>

<p>I created a toolbar for the RICHED sample by calling the
CreateToolbarEx function. (For a detailed discussion of toolbars,
refer to Chapter 1.) I specified a TBBUTTON structure containing
information about the toolbar's buttons. Buttons on a toolbar are
&#147;free&#148;&#151;that is, you don't need to do anything
special to include them other than filling out the structure and
giving the CreateToolbarEx function a pointer to that structure. </p>

<p>Other controls on a toolbar, such as the combo boxes I used,
require a bit more work. To reserve space on the toolbar for the
controls, the application must place separators in the TBBUTTON
structure where these extra controls will reside. If you are
creating a static structure to hold the buttons, you can
determine heuristically how many separators to use (try it out to
see what looks good). If you are creating your toolbar
dynamically, you can send the TB_GETITEMRECT message to determine
the width of a separator and then use the values returned (<i>rect.right,</i>
<i>rect.left</i>) to calculate how many separators you need to
add. The application then creates the control and parents it to
the toolbar. To include ToolTips for the various controls and
buttons, the application uses the TTM_ADDTOOL message to add
ToolTip support. </p>

<p><tt>HWND InitToolbar (HWND hWndParent)<br>
{<br>
TOOLINFO lpToolInfo;<br>
HWND hWndToolbar, hWndTT;<br>
HFONT hFont;<br>
<br>
// Create the toolbar control.<br>
hWndToolbar = CreateToolbarEx ( <br>
hWndParent, // parent<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | TBSTYLE_TOOLTIPS, // style<br>
IDB_TOOLBAR, // toolbar ID<br>
6, // number of bitmaps<br>
hInst, // mod instance<br>
IDB_TOOLBAR, // resource ID for bitmap<br>
(LPCTBBUTTON)&amp;tbButtons, // address of buttons<br>
34, // number of buttons<br>
16, 16, // width &amp; height of buttons<br>
16, 16, // width &amp; height of bitmaps<br>
sizeof (TBBUTTON)); // structure size<br>
<br>
if (hWndToolbar == NULL)<br>
{<br>
MessageBox (NULL, &quot;Toolbar not created!&quot;, NULL, MB_OK);<br>
return NULL;<br>
}<br>
<br>
// Create the combo box for the typeface.<br>
hWndComboFont = CreateWindowEx (0L, // no extended styles<br>
&quot;COMBOBOX&quot;, // class name<br>
&quot;&quot;, // default text<br>
WS_CHILD | WS_BORDER | WS_VISIBLE |<br>
CBS_HASSTRINGS | CBS_DROPDOWN, // window styles<br>
0, 3, 150, 250, // size and position<br>
hWndToolbar, // parent window<br>
(HMENU)IDM_COMBOFONT, // ID<br>
hInst, // current instance<br>
NULL); // no class data<br>
<br>
// Set the window procedure for the combo box.<br>
lpfnDefComboFont = (WNDPROC) GetWindowLong (hWndComboFont,
GWL_WNDPROC);<br>
SetWindowLong (hWndComboFont, GWL_WNDPROC,
(LONG)ComboWndProcFont);<br>
<br>
// Create the combo box for the point size.<br>
hWndComboSize = CreateWindowEx (0L, // no extended styles<br>
&quot;COMBOBOX&quot;, // class name<br>
&quot;&quot;, // default text<br>
WS_CHILD | WS_BORDER | WS_VISIBLE |<br>
CBS_HASSTRINGS | CBS_DROPDOWN, // window styles<br>
160, 3, 50, 250, // size and position<br>
hWndToolbar, // parent window<br>
(HMENU)IDM_COMBOSIZE, // ID<br>
hInst, // current instance<br>
NULL); // no class data<br>
<br>
// Set the window procedure for the combo box.<br>
lpfnDefComboSize = (WNDPROC) GetWindowLong (hWndComboSize,
GWL_WNDPROC);<br>
SetWindowLong (hWndComboSize, GWL_WNDPROC,
(LONG)ComboWndProcSize);<br>
<br>
// Get the handle to the ToolTip window.<br>
hWndTT = (HWND) SendMessage (hWndToolbar, TB_GETTOOLTIPS, 0, 0);<br>
<br>
if (hWndTT)<br>
{<br>
// Fill out the TOOLINFO structure.<br>
lpToolInfo.cbSize = sizeof (lpToolInfo);<br>
lpToolInfo.uFlags = TTF_IDISHWND | TTF_CENTERTIP;<br>
lpToolInfo.lpszText = (LPSTR)IDM_COMBOFONT;<br>
lpToolInfo.hwnd = hWndParent;<br>
lpToolInfo.uId = (UINT)hWndComboFont;<br>
lpToolInfo.hinst = hInst;<br>
// Set up ToolTips for the typeface combo box.<br>
SendMessage (hWndTT, TTM_ADDTOOL, 0,<br>
(LPARAM)(LPTOOLINFO)&amp;lpToolInfo);<br>
<br>
lpToolInfo.lpszText = (LPSTR)IDM_COMBOSIZE;<br>
lpToolInfo.uId = (UINT)hWndComboSize;<br>
// Set up ToolTips for the point size combo box.<br>
SendMessage (hWndTT, TTM_ADDTOOL, 0,<br>
(LPARAM)(LPTOOLINFO)&amp;lpToolInfo);<br>
}<br>
else<br>
MessageBox (NULL, &quot;Could not get ToolTip window
handle.&quot;, NULL,<br>
MB_OK);<br>
<br>
// Set the fonts for the combo boxes on the toolbar.<br>
hFont = (HFONT) SendMessage (hWndToolbar, WM_GETFONT, 0, 0);<br>
SendMessage (hWndComboFont, WM_SETFONT, (WPARAM)hFont, 0);<br>
SendMessage (hWndComboSize, WM_SETFONT, (WPARAM)hFont, 0);<br>
<br>
return hWndToolbar;<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Items to a Tree View Control</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Adding Items to a Tree View Control</h2>

<p>You can add items to a tree view control by sending the
TVM_INSERTITEM message or by calling the associated
TreeView_InsertItem macro. In MFC, use the InsertItem member
function. For each item, you must fill out the TV_ITEM and
TV_INSERTSTRUCT structures. When adding an item, you must specify
the handle of the new item's parent item. If you specify NULL or
TVI_ROOT instead of an item handle, the item is added as a root
item. </p>

<p>The following example demonstrates how to add items to a tree
view control. This sample handles the real estate listing you saw
earlier, with three houses listed for each of three cities. A
global structure keeps track of the handle to the parent item and
its image. </p>

<p><tt>typedef struct tagHOUSEINFO <br>
{<br>
char szAddress [MAX_ADDRESS];<br>
int iImage;<br>
HTREEITEM hParent;<br>
} HOUSEINFO;<br>
<br>
BOOL AddTreeViewItems (HWND hwndTree)<br>
{<br>
static HTREEITEM hPrev;<br>
char szText [MAX_LEN];<br>
int index;<br>
<br>
// First add the root item &quot;Houses for Sale.&quot;<br>
LoadString (hInst, IDS_FORSALE, szText, MAX_LEN);<br>
hTRoot = AddOneItem ((HTREEITEM)NULL, szText,
(HTREEITEM)TVI_ROOT,<br>
idxForSale, hwndTree);<br>
<br>
// Now add the cities.<br>
LoadString (hInst, IDS_REDMOND, szText, MAX_LEN);<br>
hTRed = AddOneItem (hTRoot, szText, (HTREEITEM)TVI_FIRST,
idxRedmond, <br>
hwndTree);<br>
<br>
LoadString (hInst, IDS_BELLEVUE, szText, MAX_LEN);<br>
hTBel = AddOneItem (hTRoot, szText, hTRed, idxBellevue,
hwndTree);<br>
<br>
LoadString (hInst, IDS_SEATTLE, szText, MAX_LEN);<br>
hTSea = AddOneItem (hTRoot, szText, hTBel, idxSeattle, hwndTree);<br>
<br>
// Fill out the structure for each house.<br>
FillInStruct (hTRed, idxRedmond, 0, 3);<br>
FillInStruct (hTBel, idxBellevue, 3, 6);<br>
FillInStruct (hTSea, idxSeattle, 6, 9);<br>
<br>
// Add the houses for each city.<br>
hPrev = hTSea;<br>
for (index = 0; index &lt; NUM_HOUSES; index++)<br>
{<br>
hPrev = AddOneItem (rgHouseInfo[index].hParent, <br>
rgHouseInfo[index].szAddress,<br>
hPrev,<br>
rgHouseInfo[index].iImage,<br>
hwndTree);<br>
rgHouseInfo[index].hItem = hPrev;<br>
}<br>
return TRUE;<br>
}<br>
<br>
// This function saves the current image and the handle to the <br>
// parent of the tree view item.<br>
VOID FillInStruct (HTREEITEM hParent, int iImage, int index, int
iMax)<br>
{<br>
for (; index &lt; iMax; index++)<br>
{<br>
rgHouseInfo[index].iImage = iImage;<br>
rgHouseInfo[index].hParent = hParent;<br>
}<br>
}<br>
<br>
// This function fills out the TV_ITEM and TV_INSERTSTRUCT
structures <br>
// and adds the item to the tree view control.<br>
HTREEITEM AddOneItem (HTREEITEM hParent, LPSTR szText,<br>
HTREEITEM hInsAfter, int iImage, HWND hwndTree)<br>
{<br>
HTREEITEM hItem;<br>
TV_ITEM tvI;<br>
TV_INSERTSTRUCT tvIns;<br>
<br>
// The pszText, iImage, and iSelectedImage members are filled
out.<br>
tvI.mask = TVIF_TEXT | TVIF_IMAGE | TVIF_SELECTEDIMAGE |
TVIF_PARAM;<br>
tvI.pszText = szText;<br>
tvI.cchTextMax = lstrlen (szText);<br>
tvI.iImage = iImage;<br>
tvI.iSelectedImage = iImage;<br>
<br>
tvIns.item = tvI;<br>
tvIns.hInsertAfter = hInsAfter;<br>
tvIns.hParent = hParent;<br>
<br>
// Insert the item into the tree.<br>
hItem = (HTREEITEM) SendMessage (hwndTree, TVM_INSERTITEM, 0, <br>
(LPARAM)(LPTV_INSERTSTRUCT)&amp;tvIns);<br>
<br>
return (hItem);<br>
}</tt> </p>

<p>In MFCTREE, the MFC version of the TREEVIEW sample, the
control is created in the view class. The preceding C code is
nearly identical to the MFC code. You should note where I keep
track of some of the data in MFCTREE, however. In the header file
for the view class, MFCTRVW.H, the view class is defined. Within
this class, I save the CTreeCtrl object, the image list, the
indexes to the images associated with the tree view items, and
information about the item being dragged. </p>

<p><tt>class CMfctreeView : public CView<br>
{<br>
protected: // create from serialization only<br>
CMfctreeView();<br>
DECLARE_DYNCREATE(CMfctreeView);<br>
CTreeCtrl m_TreeCtl; // tree view control<br>
CImageList m_ImageList; // image list associated with tree<br>
BOOL m_fDragging; // whether you are dragging an item<br>
HTREEITEM m_hDragItem; // current item being dragged<br>
int m_idxForSale; // index to For Sale icon<br>
int m_idxRedmond; // index to Redmond icon<br>
int m_idxBellevue; // index to Bellevue icon<br>
int m_idxSeattle; // index to Seattle icon<br>
<br>
// Attributes<br>
public:<br>
CMfctreeDoc *GetDocument ();<br>
<br>
// Operations<br>
public:<br>
BOOL AddTreeViewItems ();<br>
HTREEITEM AddOneItem (HTREEITEM, LPSTR, HTREEITEM, int);<br>
VOID FillInStruct (HTREEITEM, int, int, int);<br>
VOID BeginDrag (NM_TREEVIEW *);<br>
VOID DropItem (HTREEITEM);<br>
<br>
// Overrides<br>
// ClassWizard generated virtual function overrides.<br>
// {{AFX_VIRTUAL (CMfctreeView)<br>
public:<br>
virtual void OnDraw (CDC *pDC); // overridden to draw this<br>
// view<br>
protected:<br>
virtual LRESULT WindowProc (UINT message, WPARAM wParam,<br>
LPARAM lParam);<br>
// }}AFX_VIRTUAL<br>
<br>
// Implementation<br>
public:<br>
virtual ~CMfctreeView ();<br>
<br>
protected:<br>
<br>
// Generated message map functions<br>
protected:<br>
// {{AFX_MSG (CMfctreeView)<br>
afx_msg int OnCreate (LPCREATESTRUCT lpCreateStruct);<br>
afx_msg void OnSize (UINT nType, int cx, int cy);<br>
afx_msg void OnDestroy ();<br>
afx_msg void OnMouseMove (UINT nFlags, CPoint point);<br>
afx_msg void OnLButtonUp (UINT nFlags, CPoint point);<br>
// }}AFX_MSG<br>
DECLARE_MESSAGE_MAP ()<br>
};</tt> </p>
</body>
</html>

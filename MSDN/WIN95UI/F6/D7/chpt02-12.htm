<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Animation Control</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating an Animation Control</h2>

<p>An animation control belongs to the ANIMATE_CLASS window
class. You create this control by using the CreateWindow or
CreateWindowEx function, by using the Animate_Create macro, or,
in MFC, by using the Create member function on your CAnimateCtrl
object. The Animate_Create macro positions the animation control
in the upper left corner of the parent window and, if you don't
specify the ACS_CENTER style, sets the width and height of the
control based on the dimensions of a frame in the AVI clip. </p>

<p>More likely, though, you will be creating your animation
control to run in a dialog box. You can use the dialog box editor
to place an animation control right in your dialog box and then
set the styles of the control through the control properties. If
you create an animation control within a dialog box or from a
dialog box resource, the control is automatically destroyed when
the user closes the dialog box. If you create an animation
control within a window, you must explicitly destroy the control.
Otherwise, you'll be guilty of being a resource hog. </p>

<p>You can use these window styles with animation controls: </p>

<ul>
    <li>ACS_AUTOPLAY starts playing the animation when the
        animation clip is opened. </li>
    <li>ACS_CENTER centers the animation in the animation
        control's window. </li>
    <li>ACS_TRANSPARENT draws the animation using a transparent
        background rather than the background color specified in
        the animation clip. </li>
</ul>

<p>I wrote my sample to demonstrate the animation control first
in MFC (MFCANIM), and then I ported it back to C (ANIMAT). My
design goals included the following: </p>

<ul>
    <li>To create an animation control in a dialog box </li>
    <li>To allow the user to start and stop the animation by
        using buttons </li>
    <li>To allow the user to single-step through the animation
        frames </li>
</ul>

<p>You can see this sample in Figure 2-9.</p>

<p><b>Figure 2-9.</b> </p>

<p align="center"><img src="fig2-9.gif" width="466" height="357"></p>

<h4><i>The ANIMAT sample.</i> </h4>

<p>Writing this sample was very easy. In fact, the most difficult
part was finding an animation that would work. Beginning on the
following page is the code I used in the MFC sample to play the
animation, stop the playback, and single-step through the frames.
I chose to allow the user to single-step from the beginning
through the last frame. Notice that because I put my animation
control in a dialog box, I did not have to call the Create member
function. (Don't forget to include AFXCMN.H in your STDAFX.H file
to define the class.) </p>

<p><tt>// CMfcanimView message handlers<br>
<br>
void CMfcanimView::OnDemo () <br>
{<br>
CDemo demoDlg;<br>
<br>
// Run the Animation Demo dialog box.<br>
demoDlg.DoModal ();<br>
}<br>
<br>
// CDemo dialog<br>
CDemo::CDemo (CWnd *pParent /*=NULL*/)<br>
: CDialog (CDemo::IDD, pParent)<br>
{<br>
// {{AFX_DATA_INIT (CDemo)<br>
// NOTE: ClassWizard will add member initialization here.<br>
// }}AFX_DATA_INIT<br>
m_bStart = FALSE; // BOOL--whether or not animation has started<br>
m_iSeek = 1; // used for single-stepping through the frames<br>
}<br>
<br>
void CDemo::OnSeek () <br>
{<br>
// If the animation is running...<br>
if (m_bStart)<br>
{<br>
// Seek to the specified frame.<br>
m_AnimateCtrl.Seek (m_iSeek);<br>
if (m_iSeek &lt; NUM_FRAMES)<br>
m_iSeek++;<br>
}<br>
}<br>
<br>
void CDemo::OnStart () <br>
{<br>
// If the animation hasn't started yet...<br>
if (! m_bStart)<br>
{<br>
m_bStart = TRUE; <br>
// Open the animation file.<br>
m_AnimateCtrl.Open (IDR_AVICLIP);<br>
// Play it from beginning to end with infinite replay.<br>
m_AnimateCtrl.Play (0, (UINT)(-1), (UINT)(-1));<br>
}<br>
}<br>
<br>
void CDemo::OnStop () <br>
{<br>
// If the animation has started...<br>
if (m_bStart)<br>
{<br>
m_bStart = FALSE;<br>
// Stop it.<br>
m_AnimateCtrl.Stop ();<br>
}<br>
}</tt> </p>

<p>In the preceding code, I passed an identifier to the AVI
resource rather than passing in the name of the AVI file. This
means that the clip will be built into the sample. When I first
wrote the code, I passed in the name of the clip. But this wasn't
the best option because I had to pass in the full path. (If you
don't pass in the full path, the call to open the AVI file will
fail and the clip will not run.) To add the clip to my resource,
I inserted the following line in my MFCANIM.RC2 file: </p>

<p><tt>// Add manually edited resources here...<br>
IDR_AVICLIP AVI res\win95.avi<br>
</tt></p>

<p>I then added the symbol for the AVI file to the resource by
choosing Symbols from the Resource menu. When you click the New
button in the Symbol Browser, a second dialog box prompts you to
add the new symbol, as shown in Figure 2-10. </p>

<p><b>Figure 2-10.</b> </p>

<p align="center"><img src="fig2-10.gif" width="485" height="365">
</p>

<h4><i>Adding a symbol to your resource.</i> </h4>

<p>Rebuild after you've added the new symbol. Don't forget to
scan all of your dependencies before doing this. I forgot at
first; the project did not build all that it should have, and the
sample didn't run. </p>

<p>The code in the C sample, ANIMAT, is quite similar. The dialog
procedure handles all the manipulation of the animation control.
You must include the COMMCTRL.H header file, and the COMCTL32.LIB
file must be in your list of libraries. </p>

<p><tt>BOOL APIENTRY Demo (<br>
HWND hDlg,<br>
UINT message,<br>
UINT wParam,<br>
LONG lParam)<br>
{<br>
static BOOL bStart;<br>
static int iSeek;<br>
<br>
switch (message)<br>
{<br>
case WM_INITDIALOG:<br>
bStart = FALSE;<br>
iSeek = 1;<br>
return TRUE;<br>
<br>
case WM_COMMAND: <br>
if (LOWORD(wParam) == IDOK)<br>
{<br>
EndDialog (hDlg, TRUE);<br>
return TRUE;<br>
}<br>
<br>
else if (HIWORD(wParam) == BN_CLICKED)<br>
{<br>
switch (LOWORD(wParam))<br>
{<br>
case IDC_PLAY:<br>
if (! bStart)<br>
{<br>
bStart = TRUE;<br>
Animate_Open (GetDlgItem (hDlg, IDC_ANIMATE), <br>
&quot;WIN95.AVI&quot;);<br>
Animate_Play (GetDlgItem (hDlg, IDC_ANIMATE), <br>
0, -1, -1);<br>
}<br>
break;<br>
<br>
case IDC_STOP:<br>
if (bStart)<br>
{<br>
bStart = FALSE;<br>
Animate_Stop(GetDlgItem(hDlg, IDC_ANIMATE));<br>
}<br>
break;<br>
<br>
case IDC_SEEK:<br>
if (bStart)<br>
{<br>
Animate_Seek(GetDlgItem(hDlg, IDC_ANIMATE), iSeek);<br>
if (iSeek &lt; NUM_FRAMES)<br>
iSeek++;<br>
}<br>
break;<br>
}<br>
}<br>
break;<br>
<br>
default:<br>
return FALSE;<br>
}<br>
}</tt> </p>

<p>That's about all there is to it. If you build and run the
sample, you will see a really cool animation (thanks to Jonathan
Cluts). </p>
</body>
</html>

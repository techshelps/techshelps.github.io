<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sorting Items in Response to a Column Header Click</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Sorting Items in Response to a Column Header Click</h2>

<p>In the preceding C code, I handled a click on a column header
by calling the ListView_SortItems macro and providing a pointer
to a callback function. It is up to the application to provide
the code to sort list view items when the user clicks a column
header; the list view control does not sort the items for you.
(Drat!) This makes some sense (albeit in a twisted kind of
way)&#151;how would the system know which criterion to use for
the sort (for example, color or size)? Nevertheless, I wish that
Windows 95 provided some built-in sorting callbacks for
&#147;standard&#148; sorting needs such as string comparisons and
numeric sorts. Because the list view control lacks this
capability, you must provide a callback function to do the
sorting. The saving grace is that this isn't hard to do. </p>

<p>The following code demonstrates one method of sorting. It uses
the lstrcmpi function to compare strings and uses simple
arithmetic to sort numbers. The callback function is given
pointers to the two items to compare; it returns a negative value
if the first item should precede the second, a positive value if
the first item should follow the second, or 0 if the two items
are equivalent. The <i>lParamSort</i> parameter is an
application-defined value (which I did not use in my function).
It would be useful in the sort to include any special information
about the sort criterion. For instance, if you want to let the
user specify whether to sort forward or backward, you can pass an
indication of this in the <i>lParamSort</i> parameter. </p>

<p><tt>int CALLBACK ListViewCompareProc (LPARAM lParam1, LPARAM
lParam2,<br>
LPARAM lParamSort)<br>
{<br>
HOUSEINFO *pHouse1 = (HOUSEINFO *)lParam1;<br>
HOUSEINFO *pHouse2 = (HOUSEINFO *)lParam2;<br>
LPSTR lpStr1, lpStr2;<br>
int iResult;<br>
<br>
if (pHouse1 &amp;&amp; pHouse2)<br>
{<br>
switch (lParamSort)<br>
{<br>
case 0: // sort by address<br>
lpStr1 = pHouse1-&gt;szAddress;<br>
lpStr2 = pHouse2-&gt;szAddress;<br>
iResult = lstrcmpi (lpStr1, lpStr2);<br>
break;<br>
<br>
case 1: // sort by city<br>
lpStr1 = pHouse1-&gt;szCity;<br>
lpStr2 = pHouse2-&gt;szCity;<br>
iResult = lstrcmpi (lpStr1, lpStr2);<br>
break;<br>
<br>
case 2: // sort by price<br>
iResult = pHouse1-&gt;iPrice - pHouse2-&gt;iPrice;<br>
break;<br>
<br>
case 3: // sort by number of bedrooms<br>
iResult = pHouse1-&gt;iBeds - pHouse2-&gt;iBeds;<br>
break;<br>
<br>
case 4: // sort by number of bathrooms<br>
iResult = pHouse1-&gt;iBaths - pHouse2-&gt;iBaths;<br>
break;<br>
<br>
default:<br>
iResult = 0;<br>
break;<br>
}<br>
}<br>
<br>
return (iResult);<br>
}</tt> </p>
</body>
</html>

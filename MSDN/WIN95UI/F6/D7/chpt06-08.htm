<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Color Common Dialog Box</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">The Color Common Dialog Box</font></h1>

<p>In the Color common dialog box, users can change the current
color or create their own colors. The basic dialog box, shown in
Figure 6-8, contains a control that displays as many as 48
colors. The user's display driver determines the actual number of
colors; for example, a VGA driver displays 48 colors, whereas a
monochrome driver displays only 16. </p>

<p><b>Figure 6-8.</b> </p>

<p><img src="fig6-8.gif" width="228" height="325"></p>

<h4><i>The basic Color common dialog box.</i> </h4>

<p>When the user clicks the Define Custom Colors button, the
width of the dialog box expands to display the custom colors
control, as shown in Figure 6-9 on the following page. With this
control, the user can create a new color by specifying red,
green, and blue (RGB) values; by using the color spectrum to set
hue, saturation, and luminosity (HSL); or by specifying HSL
values in the edit controls. After the user has created a custom
color, clicking the Add To Custom Colors button displays the new
color in a Custom Colors section of the dialog box. The
Color|Solid control displays both the dithered color (a mixture
of solids) and the solid color that correspond to the user's
selection. </p>

<p><b>Figure 6-9.</b> </p>

<p><b><img src="fig6-9.gif" width="607" height="561"></b></p>

<h4><i>The expanded Color common dialog box.</i> </h4>

<p>The Color common dialog box uses two color models: RGB and
HSL. Screen displays and other devices that emit light use the
RGB model. Valid values for red, green, and blue are in the range
0 through 255, with 0 the minimum intensity and 255 the maximum
intensity. The application should specify COLORREF values using
the RGB macro for RGB colors. </p>

<p>The HSL color model uses different ranges of values. As you
can see in Figure 6-10, the saturation and luminosity values must
be in the range 0 through 240, and the hue value must be in the
range 0 through 239. The Color common dialog procedure that is
provided in COMDLG32.DLL converts HSL values to the corresponding
RGB values, so your application does not have to do this. </p>

<p><b>Figure 6-10.</b> </p>

<p><b><img src="fig6-10.gif" width="416" height="254"></b></p>

<h4><i>The color spectrum and HSL value ranges.</i> </h4>

<p>Before displaying a Color common dialog box, an application
must initialize a CHOOSECOLOR structure, which contains
information such as the parent of the dialog box, the custom
colors that should appear initially, and the use of hooks and
templates to customize the dialog box. The following code
demonstrates how the CMNDLG32 sample fills out the CHOOSECOLOR
structure and makes the subsequent call to ChooseColor, the
function that displays and handles the dialog box. Notice again
that certain fields are filled differently if a hook or a
template is included. The custom colors array is initially filled
entirely with white, whose RGB value is (0, 0, 0); the color
initially selected is black, with an RGB value of (255, 255,
255). </p>

<p><tt>BOOL ChooseNewColor (HWND hWnd)<br>
{<br>
DWORD dwColor;<br>
DWORD dwCustClrs [16];<br>
BOOL fSetColor = FALSE;<br>
int i;<br>
<br>
for (i = 0; i &lt; 15; i++)<br>
dwCustClrs [i] = RGB (255, 255, 255);<br>
<br>
dwColor = RGB (0, 0, 0);<br>
<br>
chsclr.lStructSize = sizeof (CHOOSECOLOR);<br>
chsclr.hwndOwner = hWnd;<br>
chsclr.hInstance = (HANDLE)hInst;<br>
chsclr.rgbResult = dwColor;<br>
chsclr.lpCustColors = (LPDWORD)dwCustClrs;<br>
chsclr.lCustData = 0L;<br>
<br>
switch (wMode)<br>
{<br>
case IDM_HOOK:<br>
chsclr.Flags = CC_ENABLEHOOK;<br>
chsclr.lpfnHook = (LPCCHOOKPROC)ChooseColorHookProc;<br>
chsclr.lpTemplateName = (LPTSTR)NULL;<br>
break;<br>
<br>
case IDM_CUSTOM:<br>
chsclr.Flags = CC_PREVENTFULLOPEN | CC_ENABLEHOOK | <br>
CC_ENABLETEMPLATE;<br>
chsclr.lpfnHook = (LPCCHOOKPROC)ChooseColorHookProc;<br>
chsclr.lpTemplateName = &quot;CHOOSECOLOR&quot;;<br>
break;<br>
<br>
case IDM_STANDARD:<br>
chsclr.Flags = CC_PREVENTFULLOPEN;<br>
chsclr.lpfnHook = (LPCCHOOKPROC)(FARPROC)NULL;<br>
chsclr.lpTemplateName = (LPTSTR)NULL;<br>
break;<br>
}<br>
if (fSetColor = ChooseColor (&amp;chsclr))<br>
{<br>
crColor = chsclr.rgbResult;<br>
return TRUE;<br>
}<br>
else<br>
{<br>
ProcessCDError (CommDlgExtendedError (), hWnd);<br>
return FALSE;<br>
}<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Notifications</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Handling Notifications</font></h1>

<p>The application uses notifications extensively to manipulate
the behavior and the appearance of the controls. Because
toolbars, status bars, tree view controls, and list view controls
all expect notifications, I had to ensure that each control could
get the notifications it needed. In the main window procedure for
my C application, I simply trapped the WM_NOTIFY message and
either handled the toolbar notifications directly or passed the
notifications to the handlers I wrote. </p>

<p>For the toolbar, I was interested only in the TTN_NEEDTEXT
notification, which is sent whenever the system needs to display
a ToolTip associated with a toolbar button. In response to this
notification, the application must load the appropriate text
string into the <i>lpszText</i> member of the LPTOOLTIPTEXT
structure: </p>

<p><tt>case WM_NOTIFY:<br>
lpToolTipText = (LPTOOLTIPTEXT)lParam;<br>
if (lpToolTipText-&gt;hdr.code == TTN_NEEDTEXT)<br>
{<br>
LoadString (g_Listing.hInst, <br>
lpToolTipText-&gt;hdr.idFrom, // string ID == cmd ID<br>
szBuf,<br>
sizeof (szBuf));<br>
lpToolTipText-&gt;lpszText = szBuf;<br>
}<br>
§</tt> </p>

<p>My tree view control has a very simple notification handler
that handles only the TVN_SELCHANGED notification (which is sent
to the tree view control whenever the selection changes). In
response to this notification, I needed to update the list view
control and the status bar to reflect the house listings for the
newly selected city, as shown here: </p>

<p><tt>VOID UpdateListView (HWND hwndLV, int iSelected)<br>
{<br>
int count, index;<br>
<br>
// Remove the previous items.<br>
LV_RemoveAllItems (hwndLV);<br>
<br>
// Loop through the house listings.<br>
for (index = 0, count = 0; count &lt; g_Listing.NumHouses;
count++)<br>
{<br>
// If the house is listed for the new city...<br>
if (strcmp (rgHouses[count].szCity, rgCities[iSelected].szCity)
== 0)<br>
{<br>
// Add the house to the list view control.<br>
if (! LV_AddItem (hwndLV, index, &amp;rgHouses[count]))<br>
MessageBox (NULL, &quot;LV_AddItem failed!&quot;, NULL, MB_OK);<br>
index++;<br>
}<br>
}<br>
}</tt> </p>

<p>Handling notifications for the list view control is a bit more
complicated. I implemented this control using a callback that
receives the text for each item, so the notification handler
needs to trap the LVN_GETDISPINFO notification and fill in the <i>pszText</i>
member of the LV_ITEM structure with the appropriate text,
depending on the column. This notification handler must also
process the LVN_COLUMNCLICK notification, which is sent when the
user clicks a column header. In response, the application must
sort the items in the list view control based on the criterion
specified by the header. For example, if the user clicks the
Bedrooms column header, the application sorts the list in
ascending order by the number of bedrooms in each house. </p>

<p>I provided a simple callback procedure that is called through
the ListView_SortItems function. This procedure then sorts the
data using simple math (returning the greater of two values) for
columns with integer values and using the strcmp function for
columns with string values. </p>

<p><tt>LRESULT LV_NotifyHandler (HWND hWnd, UINT uMsg, WPARAM
wParam, <br>
LPARAM lParam, HINSTANCE hInst)<br>
{<br>
LV_DISPINFO *pLvdi = (LV_DISPINFO *)lParam;<br>
NM_LISTVIEW *pNm = (NM_LISTVIEW *)lParam;<br>
HOUSEINFO *pHouse = (HOUSEINFO *) (pLvdi-&gt;item.lParam);<br>
static char szText [TEMP_LEN];<br>
<br>
if (wParam != ID_LISTVIEW)<br>
return 0L;<br>
<br>
switch(pLvdi-&gt;hdr.code)<br>
{<br>
case LVN_GETDISPINFO:<br>
switch (pLvdi-&gt;item.iSubItem)<br>
{<br>
case 0: // address<br>
pLvdi-&gt;item.pszText = pHouse-&gt;szAddress;<br>
break;<br>
<br>
case 1: // city<br>
pLvdi-&gt;item.pszText = pHouse-&gt;szCity;<br>
break;<br>
<br>
case 2: // price<br>
sprintf (szText, &quot;$%u&quot;, pHouse-&gt;iPrice);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
case 3: // number of bedrooms<br>
sprintf (szText, &quot;%u&quot;, pHouse-&gt;iBeds);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
case 4: // number of bathrooms<br>
sprintf (szText, &quot;%u&quot;, pHouse-&gt;iBaths);<br>
pLvdi-&gt;item.pszText = szText;<br>
break;<br>
<br>
default:<br>
break;<br>
}<br>
break;<br>
<br>
case LVN_COLUMNCLICK:<br>
// The user clicked a column header; sort by this criterion.<br>
ListView_SortItems (pNm-&gt;hdr.hwndFrom,<br>
ListViewCompareProc,<br>
(LPARAM) (pNm-&gt;iSubItem));<br>
break;<br>
<br>
default:<br>
break;<br>
}<br>
return 0L;<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Toolbars</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Toolbars</font></h1>

<p>Toolbars are probably the second most pervasive of the new
common controls. Like status bars, the toolbars found in so many
applications on the market today were created without the luxury
of system support&#151;that is, developers had to go about
reinventing the wheel whenever they wanted to include toolbars in
an application. With the additions to the Win32 API for Windows
95, developers can now implement toolbars as easily as any other
type of system-supported control. </p>

<p>For those who have lived in a cave for the past few years, a
toolbar is a window containing buttons or other controls, usually
located at the top of the parent window. Toolbar buttons provide
fast access to commonly used commands such as Open, Save, and
Print. Figure 1-3 on the next page shows the toolbar created by
the TOOLBAR sample (for C lovers) and MFCTOOL (the version for
MFC maniacs). You can see the various parts of the toolbar,
including buttons, a combo-box control, a separator (used to
logically separate groups of buttons or controls), and a ToolTip
(that neat little box that pops up when your mouse pointer
lingers over a toolbar button&#151;in this example, the Save
button).</p>

<p align="left"><b>Figure 1-3.</b> </p>

<p align="center"><img src="fig1-3.gif" width="524" height="244"></p>

<h4><i>The toolbar created by the TOOLBAR sample.</i> </h4>

<p>The design goals of the TOOLBAR sample, which I first wrote in
C and then ported to MFC, included the following: </p>

<ul>
    <li>To demonstrate what a fairly standard toolbar looks like.
    </li>
    <li>To support ToolTips. </li>
    <li>To include a nonbutton control on the toolbar. (I decided
        to use a drop-down combo box because it is the control I
        see most often on other toolbars in shipping
        applications.) </li>
    <li>To use the new Windows 95 version of the toolbar rather
        than the old-style control. </li>
</ul>

<p>Toolbars, like status bars, have ancestors that were supported
in MFC before the release of Windows 95. If you build your
project with MFC and choose to include a toolbar, you will get
the window class that MFC supported, CToolBar. If you check
AppWizard's Dockable Toolbar check box, MFC provides a
&#147;standard&#148; toolbar bitmap filled with tools such as
New, Open, Save, and so on. MFC also creates the toolbar and
manages the ToolTips for you. Another nice option of the original
toolbar class is the ability to make your toolbar dockable. This
feature lets users pick up the toolbar with the mouse, drag the
toolbar around the window, and drop it wherever they want. If the
user drops the toolbar at a window perimeter, the toolbar will
&#147;dock&#148; itself on that side of the window. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using MFC to Create the Same Controls</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Using MFC to Create the Same Controls</h2>

<p>After writing the C version of the sample application, I
decided (with just a bit of prodding&#151;my electronic mailbox
was filling up with requests for an MFC version) to port CHICOAPP
to MFC. The MFC version contains a few small changes: I added
separate icons for the cities, and I used the same image list
both for the tree view control and for the list view control in
small icon view. I created all the application windows in one
function, CreateAppWindows, and left sizing the windows to the
WM_SIZE handler. </p>

<p><tt>BOOL CMfcexpView::CreateAppWindows ()<br>
{<br>
static char szBuf [MAX_PATH];<br>
HICON hIcon; // handle to an icon<br>
int index; // index used in for loops<br>
LV_COLUMN lvC; // list view column structure<br>
char szText [MAX_ITEMLEN]; // place to store some text<br>
<br>
// Ensure that the common control DLL is loaded.<br>
InitCommonControls ();<br>
<br>
// Create the status bar.<br>
m_StatusBar.Create (WS_CHILD | WS_BORDER | WS_VISIBLE |
SBS_SIZEGRIP, <br>
CRect (0, 0, 0, 0),<br>
this,<br>
ID_STATUSBAR);<br>
<br>
// Set the status bar to have two parts.<br>
int aWidths [2] = {0, 0};<br>
m_StatusBar.SetParts (2, aWidths);<br>
// Set the text for the status bar.<br>
ChangeSBText (-1);<br>
<br>
// Create the toolbar.<br>
m_Toolbar.Create (<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | TBSTYLE_TOOLTIPS, // styles<br>
CRect (0, 0, 0, 0),<br>
this,<br>
ID_TOOLBAR);<br>
<br>
// Add the bitmaps.<br>
m_Toolbar.AddBitmap (NUM_BITMAPS, IDB_TOOLBAR);<br>
<br>
// Add the buttons.<br>
m_Toolbar.AddButtons (NUM_BUTTONS, (LPTBBUTTON)&amp;tbButtons);<br>
<br>
// Create the CListCtrl window.<br>
m_ListCtl.Create (<br>
WS_VISIBLE | WS_CHILD | WS_BORDER | LVS_REPORT | LVS_EDITLABELS,<br>
CRect (0, 0, 0, 0), // bounding rectangle<br>
this, // parent<br>
ID_LISTVIEW); // ID<br>
<br>
// Create the large icon image list.<br>
m_ImageLarge.Create (LARGE_BITMAP_WIDTH,<br>
LARGE_BITMAP_HEIGHT,<br>
FALSE, // list does not include masks<br>
NUM_BITMAPS,<br>
10); // list won't grow<br>
<br>
// Create the small icon image list.<br>
m_ImageSmall.Create (SMALL_BITMAP_WIDTH,<br>
SMALL_BITMAP_HEIGHT,<br>
FALSE, // list does not include masks<br>
NUM_BITMAPS,<br>
10); // list won't grow<br>
<br>
// Load the house icon.<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_SEATTLE));<br>
m_idxSeattle = m_ImageSmall.Add (hIcon);<br>
m_ImageLarge.Add (hIcon);<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_BELLEVUE));<br>
m_idxBellevue = m_ImageSmall.Add (hIcon);<br>
m_ImageLarge.Add (hIcon);<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_REDMOND));<br>
m_idxRedmond = m_ImageSmall.Add (hIcon);<br>
m_ImageLarge.Add (hIcon);<br>
<br>
// Associate the image lists with the list view control.<br>
m_ListCtl.SetImageList (&amp;m_ImageSmall, LVSIL_SMALL);<br>
m_ListCtl.SetImageList (&amp;m_ImageLarge, LVSIL_NORMAL);<br>
<br>
// Now initialize the columns you will need.<br>
// Initialize the LV_COLUMN structure.<br>
// The mask specifies that the fmt, cx, pszText, and iSubitem <br>
// members of the structure are valid.<br>
lvC.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;<br>
lvC.fmt = LVCFMT_LEFT; // left-align column<br>
lvC.cx = 75; // width of column in pixels<br>
lvC.pszText = szText;<br>
<br>
// Add the columns.<br>
for (index = 0; index &lt; NUM_COLUMNS; index++)<br>
{<br>
lvC.iSubItem = index;<br>
::LoadString (AfxGetResourceHandle (), <br>
IDS_ADDRESS + index,<br>
szText,<br>
sizeof (szText));<br>
if (m_ListCtl.InsertColumn (index, &amp;lvC) == -1)<br>
return NULL;<br>
}<br>
<br>
// Create the tree view control.<br>
m_TreeCtl.Create (<br>
WS_VISIBLE | WS_CHILD | WS_BORDER | TVS_HASLINES | TVS_HASBUTTONS
| <br>
TVS_LINESATROOT, // styles<br>
CRect (0, 0, 0, 0), // bounding rectangle<br>
this, // parent<br>
ID_TREEVIEW); // ID<br>
<br>
// Load the bitmaps and add them to the image list.<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_FORSALE));<br>
m_idxForSale = m_ImageSmall.Add (hIcon);<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_SELECTED));<br>
m_idxSeaSel = m_ImageSmall.Add (hIcon);<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_SELBELL));<br>
m_idxBellSel = m_ImageSmall.Add (hIcon);<br>
hIcon = ::LoadIcon (AfxGetResourceHandle (), <br>
MAKEINTRESOURCE (IDI_REDSEL));<br>
m_idxRedSel = m_ImageSmall.Add (hIcon);<br>
<br>
// Associate the image list with the tree view control.<br>
m_TreeCtl.SetImageList (TVSIL_NORMAL, &amp;m_ImageSmall);<br>
<br>
TV_InitTreeView ();<br>
return TRUE;<br>
}</tt> </p>

<p>As you can see in Figure 7-2, the main screen of MFCEXP is
quite similar to that of CHICOAPP. One exception is the toolbar.
Instead of using the built-in toolbar bitmaps, I created my own
and included buttons for adding a house, removing a house, and
adding a city to the listing. </p>

<p><b>Figure 7-2.</b> </p>

<p><img src="fig7-2.gif" width="609" height="324"></p>

<h4><i>The main screen of MFCEXP.</i></h4>
</body>
</html>

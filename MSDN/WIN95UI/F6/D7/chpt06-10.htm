<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Printing Common Dialog Boxes</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">The Printing Common Dialog Boxes</font></h1>

<p>The common dialog library provides three common dialog boxes
that you can use for printing: Print, which lets the user
configure the printer for a particular print job; Print Setup, in
which the user can configure the printer for all jobs; and Page
Setup, which allows the user to set properties such as margins,
paper orientation, and paper source for the current document. The
Print Setup common dialog box is supported for backward
compatibility with previous versions of Windows; new applications
should use the new print dialog boxes&#151;Print and Page Setup.
A user can access the printer configuration dialog box through
the Page Setup dialog box. </p>

<p>The Print dialog box, shown in Figure 6-13 on the following
page, differs from other common dialog boxes in that part of its
dialog procedure resides in COMDLG32.DLL and part of it resides
in the printer driver. When the user clicks the Properties button
in the Print dialog box, the printer driver uses an exported
function called ExtDeviceMode to display the Printer Properties
property sheet. </p>

<p>Win32-based applications fill out the PRINTDLG structure and
call a single function, PrintDlg, to show the Print dialog box or
the Print Setup dialog box. The Print dialog box appears by
default; to display the Print Setup dialog box, which is shown in
Figure 6-14, the application specifies the PD_PRINTSETUP flag. </p>

<p><b>Figure 6-13.</b></p>

<p><b><img src="fig6-13.gif" width="440" height="329"></b></p>

<h4><i>The Print common dialog box.</i> </h4>

<p><b>Figure 6-14.</b> </p>

<p><img src="fig6-14.gif" width="441" height="316"></p>

<h4><i>The Print Setup common dialog box.</i> </h4>

<p>The PRINTDLG structure contains data such as the printer
device context, initial values for the dialog box controls (such
as number of copies and page range), and hook and template
information. The following code shows how the CMNDLG32 sample
fills out the structure and prints the contents of its edit
buffer. Notice that I included the PD_USEDEVMODECOPIES and
PD_COLLATE styles. If the application does not specify these
styles, it takes responsibility for simulating the printing of
multiple copies or collating. </p>

<p><tt>void PrintFile (HWND hWnd)<br>
{<br>
DOCINFO di;<br>
int nError;<br>
<br>
// Initialize the PRINTDLG structure.<br>
pd.lStructSize = sizeof (PRINTDLG);<br>
pd.hwndOwner = hWnd;<br>
pd.hDevMode = (HANDLE)NULL;<br>
pd.hDevNames = (HANDLE)NULL;<br>
pd.nFromPage = 0;<br>
pd.nToPage = 0;<br>
pd.nMinPage = 0;<br>
pd.nMaxPage = 0;<br>
pd.nCopies = 0;<br>
pd.hInstance = (HANDLE)hInst;<br>
pd.Flags = PD_RETURNDC | PD_USEDEVMODECOPIES | PD_COLLATE | <br>
PD_NOSELECTION | PD_PRINTSETUP;<br>
<br>
switch (wMode)<br>
{<br>
case IDM_STANDARD:<br>
pd.lpfnSetupHook = (LPSETUPHOOKPROC)(FARPROC)NULL;<br>
pd.lpSetupTemplateName = (LPTSTR)NULL;<br>
pd.lpfnPrintHook = (LPPRINTHOOKPROC)(FARPROC)NULL;<br>
pd.lpPrintTemplateName = (LPTSTR)NULL;<br>
break;<br>
<br>
case IDM_HOOK:<br>
pd.Flags |= PD_ENABLEPRINTHOOK | PD_ENABLESETUPHOOK;<br>
pd.lpfnSetupHook = (LPSETUPHOOKPROC)PrintSetupHookProc;<br>
pd.lpSetupTemplateName = (LPTSTR)NULL;<br>
pd.lpfnPrintHook = (LPPRINTHOOKPROC)PrintDlgHookProc;<br>
pd.lpPrintTemplateName = (LPTSTR)NULL;<br>
break;<br>
<br>
case IDM_CUSTOM:<br>
pd.Flags |= PD_ENABLEPRINTHOOK | PD_ENABLEPRINTTEMPLATE |<br>
PD_ENABLESETUPHOOK | PD_ENABLESETUPTEMPLATE;<br>
pd.lpfnSetupHook = (LPSETUPHOOKPROC)PrintSetupHookProc;<br>
pd.lpfnPrintHook = (LPPRINTHOOKPROC)PrintDlgHookProc;<br>
pd.lpPrintTemplateName = (LPTSTR) MAKEINTRESOURCE (PRINTDLGORD);<br>
pd.lpSetupTemplateName = <br>
(LPTSTR) MAKEINTRESOURCE (PRNSETUPDLGORD);<br>
break;<br>
}<br>
<br>
// Print a test page if successful.<br>
if (PrintDlg (&amp;pd) == TRUE)<br>
{<br>
// Fill out the DOCINFO structure.<br>
di.cbSize = sizeof (DOCINFO);<br>
di.lpszDocName = &quot;Printing Test&quot;;<br>
di.lpszOutput = (LPTSTR)NULL;<br>
di.fwType = 0;<br>
<br>
// Start the document.<br>
StartDoc (pd.hDC, &amp;di);<br>
<br>
nError = StartPage (pd.hDC);<br>
if (nError &lt;= 0) <br>
MessageBox (hWnd, &quot;Error in StartPage.&quot;, NULL, MB_OK);<br>
else<br>
{<br>
// Print the text.<br>
TextOut (pd.hDC, 5, 5, FileBuf, lstrlen (FileBuf));<br>
<br>
// Exit if the user has clicked the Cancel button in the <br>
// AbortPrintJob dialog box; if the button has been clicked,<br>
// call the AbortDoc function. Otherwise, inform the spooler <br>
// that the page is complete.<br>
nError = EndPage (pd.hDC);<br>
if (nError &lt;= 0) <br>
{<br>
MessageBox (hWnd, &quot;Error in EndPage.&quot;, NULL, MB_OK);<br>
AbortDoc (pd.hDC);<br>
}<br>
else<br>
{<br>
// The document has ended.<br>
nError = EndDoc (pd.hDC);<br>
if (nError &lt;= 0) <br>
MessageBox (hWnd, &quot;Error in EndDoc.&quot;, NULL, MB_OK);<br>
}<br>
}<br>
DeleteDC (pd.hDC);<br>
if (pd.hDevMode)<br>
GlobalFree (pd.hDevMode);<br>
if (pd.hDevNames)<br>
GlobalFree (pd.hDevNames);<br>
}<br>
else<br>
ProcessCDError (CommDlgExtendedError (), hWnd);<br>
}</tt> </p>

<p>Using the PD_RETURNDC flag, as I did in this code, causes
PrintDlg to return a handle to a printer device context in the <i>hDC</i>
member of the PRINTDLG structure. This handle is used in
subsequent calls to do the actual printing. In this case, the <i>hDC</i>
is sent to the Escape functions, which are used to send
instructions to the print manager and spooler. </p>
</body>
</html>

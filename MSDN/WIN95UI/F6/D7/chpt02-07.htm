<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Progress Bar</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating a Progress Bar</h2>

<p>To create a progress bar, you can use the CreateWindow or
CreateWindowEx function and specify the PROGRESS_CLASS window
class, or you can create a CProgressCtrl object and use the MFC
Create member function. Be sure that you include the COMMCTRL.H
header file in your application and the COMCTL32.LIB file in your
list of libraries. The following C code (which differs from the
PROGRESS sample on the companion disc) produces a simple progress
bar in the parent window's procedure. A timer sends messages to
advance the bar's current position. </p>

<p><tt>// Function that creates a progress bar<br>
// Parameters:<br>
// HWND hWndParent - Parent window of the progress bar<br>
// RECT rclPos - Size and position of the progress bar<br>
// WORD wID - ID of the progress bar<br>
// HINSTANCE hInst - Current instance<br>
// LONG lRange - Sets the range<br>
// LONG lStep - Sets the stepping<br>
HWND MyCreateProgressBar (HWND hWndParent, RECT rclPos, WORD wID,<br>
HINSTANCE hInst, LONG lRange, LONG lStep)<br>
{<br>
HWND hWndProgress;<br>
<br>
hWndProgress = CreateWindowEx (<br>
OL,<br>
PROGRESS_CLASS,<br>
&quot;&quot;,<br>
WS_CHILD | WS_VISIBLE,<br>
rclPos.x, rclPos.y, rclPos.cx, rclPos.cy,<br>
hWndParent, <br>
(HMENU)wID, <br>
hInst,<br>
NULL);<br>
<br>
// Set the range for the progress bar.<br>
SendMessage (hWndProgress, PBM_SETRANGE, 0L, lRange);<br>
<br>
// Set the step.<br>
SendMessage (hWndProgress, PBM_SETSTEP, lStep, 0L);<br>
<br>
return (hWndProgress);<br>
}<br>
<br>
§<br>
<br>
RECT rcl; // holds the size of the progress bar<br>
<br>
switch (message)<br>
{<br>
case WM_CREATE:<br>
rcl.x = 10; rcl.y = 100; rcl.cx = 500; rcl.cy = 20;<br>
hWndProgress = MyCreateProgressBar (hWnd, rcl, ID_PROGRESS,<br>
hInst, MAKELONG (0, 20), 1);<br>
break;<br>
<br>
case WM_TIMER:<br>
if (uCurrent &lt; uMax)<br>
{<br>
// Increment (step) the progress bar.<br>
SendMessage (hWndProgress, PBM_STEPIT, 0L, 0L);<br>
uCurrent++;<br>
}<br>
else<br>
{<br>
// We are at the end of the range - kill the timer.<br>
KillTimer (hWnd, ID_TIMER);<br>
uCurrent = 0;<br>
}<br>
break;<br>
<br>
case WM_COMMAND:<br>
switch (LOWORD (wParam))<br>
{<br>
case IDM_STOP:<br>
// Stop the progress bar.<br>
SendMessage (hWndProgress, PBM_SETPOS, 0L, 0L);<br>
KillTimer (hWnd, ID_TIMER);<br>
break;<br>
<br>
case IDM_START:<br>
uCurrent = uMin;<br>
SetTimer (hWnd, ID_TIMER, 500, NULL);<br>
break;<br>
§<br>
}</tt> </p>

<p>Pretty simple stuff, you say? Think how simple it must have
been to port to MFC! Well, take a look at the same work done in
the MFCPROG sample. Don't forget to include AFXCMN.H in your
STDAFX.H file before you try this. I created a member variable, <i>m_Current</i>,
to keep track of the current position of the progress bar and
added this variable to my view class. As you can see, it's pretty
easy here, too: </p>

<p><tt>// CMfcprogView message handlers<br>
<br>
void CMfcprogView::OnTimer (UINT nIDEvent) <br>
{<br>
if (m_Current &lt; m_Max)<br>
{<br>
m_Progress.StepIt ();<br>
m_Current++;<br>
}<br>
else<br>
{<br>
KillTimer (1000);<br>
m_Current = 0;<br>
}<br>
<br>
CView::OnTimer (nIDEvent);<br>
}<br>
<br>
void CMfcprogView::OnStart () <br>
{<br>
m_Current = m_Min;<br>
SetTimer (ID_TIMER, 500, NULL);<br>
}<br>
<br>
void CMfcprogView::OnStop () <br>
{<br>
m_Progress.SetPos (0);<br>
KillTimer (ID_TIMER);<br>
}<br>
<br>
int CMfcprogView::OnCreate (LPCREATESTRUCT lpCreateStruct) <br>
{<br>
if (CView::OnCreate (lpCreateStruct) == -1)<br>
return -1;<br>
<br>
m_Progress.Create (WS_CHILD | WS_VISIBLE,<br>
CRect (10, 100, 500, 120),<br>
this,<br>
ID_PROGRESS);<br>
m_Min = 0;<br>
m_Max = 20;<br>
m_Progress.SetRange (m_Min, m_Max);<br>
m_Progress.SetStep (1);<br>
<br>
return 0;<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Serialization Using Streams</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Serialization Using Streams</font></h1>

<p>Data is transferred into or out of a rich edit control through
streams. A stream is defined by an EDITSTREAM structure, which
specifies a buffer and an application-defined callback function.
In the RICHED sample, the user can open either a text (TXT) file
or a rich text format (RTF) file. The data is read into the rich
edit control through the EM_STREAMIN message. After receiving
this message, the control repeatedly calls the
application-defined callback function, EditStreamCallback, which
transfers a portion of the data into the buffer each time. The <i>dwCookie</i>
member of the EDITSTREAM structure is an application-defined
value. The RICHED sample uses this member for storing the handle
to the file opened by the OpenFile function. The EM_STREAMIN
message allows either textual or RTF data to be read in by
specifying SF_TEXT or SF_RTF in the <i>wParam </i>parameter. </p>

<p><tt>BOOL OpenTheFile (HWND hWndRichEdit, int iAttrib, char
*lpszFileName)<br>
{<br>
HFILE hFile;<br>
OFSTRUCT of;<br>
EDITSTREAM eStream;<br>
<br>
if (hFile = OpenFile (lpszFileName, &amp;of, OF_READ))<br>
{<br>
// dwCookie is an app-defined value that holds<br>
// the handle to the file.<br>
eStream.dwCookie = hFile;<br>
eStream.pfnCallback = EditStreamCallback;<br>
eStream.dwError = 0;<br>
SendMessage (hWndRichEdit, EM_STREAMIN, (WPARAM)iAttrib,<br>
(LPARAM)&amp;eStream);<br>
<br>
// Reset the dirty bit.<br>
SendMessage (hWndRichEdit, EM_SETMODIFY, (WPARAM)TRUE, OL);<br>
<br>
CloseHandle ((HANDLE)hFile);<br>
return TRUE;<br>
}<br>
return FALSE;<br>
}<br>
<br>
DWORD CALLBACK EditStreamCallback (DWORD dwCookie,<br>
LPBYTE pbBuff, LONG cb, LONG FAR *pcb)<br>
{<br>
ReadFile ((HANDLE)dwCookie, pbBuff, cb, pcb, NULL);<br>
if (*pcb &lt; cb)<br>
return 0; // file has been fully read in<br>
else<br>
return (DWORD) *pcb; // more to read<br>
}</tt> </p>

<p>As you can see from the code on the following page, the RICHED
sample offers two options for saving the contents of the rich
edit control: save as a TXT file or save as an RTF file. The
application sends the EM_STREAMOUT message to save the contents
of the control. The control repeatedly writes to the buffer and
then calls the application's callback function. For each call,
this function saves the contents of the buffer. </p>

<p><tt>BOOL SaveTheFile (HWND hWndRichEdit, int nID)<br>
{<br>
HFILE hFile;<br>
OFSTRUCT of;<br>
EDITSTREAM eStream;<br>
char *lpszFileName;<br>
int iAttrib;<br>
<br>
if (nID == IDM_SAVETXT)<br>
{<br>
lpszFileName = &quot;TEXTDOC.TXT&quot;;<br>
iAttrib = SF_TEXT;<br>
}<br>
else<br>
{<br>
lpszFileName = &quot;RTFDOC.RTF&quot;;<br>
iAttrib = SF_RTF;<br>
}<br>
if (hFile = OpenFile (lpszFileName, &amp;of, OF_CREATE))<br>
{<br>
eStream.dwCookie = hFile;<br>
eStream.dwError = 0;<br>
eStream.pfnCallback = SaveCallback;<br>
SendMessage (hWndRichEdit, EM_STREAMOUT, (WPARAM)iAttrib,<br>
(LPARAM)&amp;eStream);<br>
<br>
CloseHandle ((HANDLE)hFile);<br>
return TRUE;<br>
}<br>
return FALSE; <br>
}<br>
<br>
DWORD CALLBACK SaveCallback (DWORD dwCookie,<br>
LPBYTE pbBuff, LONG cb, LONG FAR *pcb)<br>
{<br>
WriteFile ((HANDLE)dwCookie, pbBuff, cb, pcb, NULL);<br>
return 0;<br>
}</tt> </p>

<p>As Figure 5-6 shows, the options in the RICHED sample for
reading in or saving data are limited to specifying the type of
data (TXT or RTF). The sample furnishes the names of the sample
files. To allow the user a choice of files to read in, you should
use the common dialog boxes designed for opening and saving
files. (You'll find detailed information about the common dialog
boxes in Chapter 6.) </p>

<p>&nbsp;</p>

<p><b>Figure 5-6.</b> </p>

<p><b><img src="fig5-6.gif" width="482" height="323"></b></p>

<h4><i>The File menu in the RICHED sample.</i> </h4>
</body>
</html>

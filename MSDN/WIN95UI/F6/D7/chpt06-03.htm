<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Open and Save As Common Dialog Boxes</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Using the Open and Save As Common Dialog Boxes</h2>

<p>To use one of the common dialog boxes that open and save
files, an application must first fill out the OPENFILENAME
structure, which includes the items needed to initialize the
dialog box. The following example is the code I used for the Open
common dialog box: </p>

<p><tt>OpenFileName.lStructSize = sizeof (OPENFILENAME);<br>
OpenFileName.hwndOwner = hWnd;<br>
OpenFileName.hInstance = (HANDLE)hInst;<br>
OpenFileName.lpstrFilter = szFilter;<br>
OpenFileName.lpstrCustomFilter = (LPTSTR)NULL;<br>
OpenFileName.nMaxCustFilter = 0L;<br>
OpenFileName.nFilterIndex = 1L;<br>
OpenFileName.lpstrFile = szFile;<br>
OpenFileName.nMaxFile = sizeof (szFile);<br>
OpenFileName.lpstrFileTitle = szFileTitle;<br>
OpenFileName.nMaxFileTitle = sizeof (szFileTitle);<br>
OpenFileName.lpstrInitialDir = NULL;<br>
OpenFileName.lpstrTitle = &quot;Open&quot;;<br>
OpenFileName.nFileOffset = 0;<br>
OpenFileName.nFileExtension = 0;<br>
OpenFileName.lpstrDefExt = &quot;*.txt&quot;;<br>
OpenFileName.lCustData = 0;</tt> </p>

<p>When the structure is filled out, a call to GetOpenFileName
with a pointer to the structure will display the dialog box. If
the function returns a value of TRUE, no errors occurred, and the
file can be opened. The filename is copied into the<i> lpstrFile</i>
member of the OPENFILENAME structure. If the GetOpenFileName
function returns FALSE, an error handler is called with the
extended error (returned from the CommDlgExtendedError function):
</p>

<p><tt>if (GetOpenFileName (&amp;OpenFileName))<br>
{<br>
// Open the file.<br>
if ((hFile = CreateFile ((LPCTSTR)OpenFileName.lpstrFile,<br>
GENERIC_READ,<br>
FILE_SHARE_READ,<br>
NULL,<br>
OPEN_EXISTING,<br>
FILE_ATTRIBUTE_NORMAL,<br>
(HANDLE)NULL)) == (HANDLE)(-1))<br>
{<br>
MessageBox (hWnd, &quot;File open failed.&quot;, NULL, MB_OK);<br>
return FALSE;<br>
}<br>
<br>
// Read its contents into a buffer</tt>.<tt><br>
§<br>
}<br>
else<br>
{<br>
// Send the error to your error handler.<br>
ProcessCDError (CommDlgExtendedError (), hWnd);<br>
return FALSE;<br>
}</tt> </p>

<p>A wide variety of flags can be used in the <i>Flags</i> member
of the OPENFILENAME structure. These flags allow a developer to
provide functionality (such as multiple selection), to decide
whether to use the Windows 3.1 or the Windows 95 look in the
dialog box, and to specify that the file must exist in order to
be opened. For an exhaustive list of all flags supported by the
OPENFILENAME structure, refer to the Win32 SDK documentation. </p>
</body>
</html>

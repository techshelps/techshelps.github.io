<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Toolbar</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating a Toolbar</h2>

<p>Creating a toolbar is simple: you fill out a button structure,
create a large bitmap containing the buttons, and then call the
CreateToolbarEx function. This function takes care of adding the
bitmaps and buttons to the toolbar. Then, unless you want to do
something special, you can just let the system handle the toolbar
processing. The window procedure for the toolbar automatically
positions and sets the size of the toolbar window. By default,
the toolbar appears at the top of its parent window's client
area; however, you can place the toolbar at the bottom of the
client area by specifying CCS-_BOTTOM. The TBSTYLE_TOOLTIPS
window style allows the toolbar to display ToolTips. Windows
sends a WM_NOTIFY message to the toolbar whenever Windows needs
to display text in a pop-up. </p>

<p>The following code snippet from the TOOLBAR sample creates a
toolbar with 24 &#147;buttons,&#148; 8 of which are actual
buttons. The bitmap provided for each button is 16-by-16 pixels.
The total number of buttons (24) includes all separators. Because
you will add a combo box, you must place separators as
placeholders where the combo box will reside. Once you create the
toolbar, you can create the combo box in the standard way and
parent it to the toolbar window, which adds this nonbutton
control to your toolbar. </p>

<p><tt>TBBUTTON tbButtons [] = <br>
{<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{0, IDM_NEW, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{1, IDM_OPEN, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{2, IDM_SAVE, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{3, IDM_CUT, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{4, IDM_COPY, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{5, IDM_PASTE, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{6, IDM_PRINT, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{0, 0, TBSTATE_ENABLED, TBSTYLE_SEP, 0L, 0},<br>
{7, IDM_ABOUT, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0}<br>
};<br>
<br>
TOOLINFO tbToolInfo;<br>
<br>
char *szStrings[] = {&quot;Nancy&quot;, &quot;Dale&quot;,
&quot;Dennis&quot;, &quot;Herman&quot;, &quot;Ken&quot;,
&quot;Kyle&quot;,<br>
&quot;Nigel&quot;, &quot;Renan&quot;, &quot;Ruediger&quot;};<br>
<br>
static HWND hWndToolbar;<br>
<br>
// Create the toolbar control.<br>
hWndToolbar = CreateToolbarEx ( <br>
hWnd, // parent<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | TBSTYLE_TOOLTIPS | <br>
CCS_ADJUSTABLE, // window style<br>
ID_TOOLBAR, // toolbar ID<br>
8, // number of bitmaps<br>
hInst, // mod instance<br>
IDB_TOOLBAR, // resource ID for bitmap<br>
(LPCTBBUTTON)&amp;tbButtons, // address of buttons<br>
24, // number of buttons<br>
16, 16, // width &amp; height of buttons<br>
16, 16, // width &amp; height of bitmaps<br>
sizeof (TBBUTTON)); // structure size<br>
<br>
if (hWndToolbar == NULL)<br>
{<br>
MessageBox (NULL, &quot;Toolbar not created!&quot;, NULL, MB_OK);<br>
break;<br>
}<br>
<br>
// Create the combo box and add it to the toolbar.<br>
hWndCombo = CreateWindowEx (0L, // no extended styles<br>
&quot;COMBOBOX&quot;, // class name<br>
&quot;&quot;, // default text<br>
WS_CHILD | WS_BORDER | WS_VISIBLE |<br>
CBS_HASSTRINGS | CBS_DROPDOWN, // styles and defaults<br>
0, 0, 100, 250, // size and position<br>
hWndToolbar, // parent window<br>
(HMENU)IDM_COMBO, // ID<br>
hInst, // current instance<br>
NULL); // no class data<br>
<br>
if (hWndCombo)<br>
{<br>
// Add strings to the combo box.<br>
for (idx = 0; idx &lt; 9; idx++)<br>
SendMessage (hWndCombo, CB_INSERTSTRING, (WPARAM)(-1), <br>
(LPARAM)szStrings[idx]);<br>
}</tt> </p>

<p>Using the MFC-supplied class CToolBarCtrl, I had to do a bit
more work. The Create member function provided by MFC merely
creates the toolbar; it doesn't load the bitmap or add the
buttons. This is no big deal, however, because you simply need to
call the AddBitmap and AddButtons member functions to add these
items to your toolbar. </p>

<p><tt>int CMfctoolView::OnCreate (LPCREATESTRUCT lpCreateStruct)
<br>
{<br>
if (CView::OnCreate (lpCreateStruct) == -1)<br>
return -1;<br>
<br>
// Create the toolbar.<br>
m_ToolBar.Create (<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | TBSTYLE_TOOLTIPS | <br>
CCS_ADJUSTABLE, // style<br>
Crect (0, 0, 0, 0),<br>
this,<br>
ID_TOOLBAR);<br>
<br>
// Add the bitmaps.<br>
m_ToolBar.AddBitmap (8, IDB_BITMAP1);<br>
<br>
// Add the buttons.<br>
m_ToolBar.AddButtons (24, (LPTBBUTTON)&amp;tbButtons);<br>
<br>
// Create the combo box.<br>
m_Combo.Create (<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | CBS_HASSTRINGS |
CBS_DROPDOWN,<br>
Crect (0, 0, 100, 250),<br>
(CWnd *)&amp;m_ToolBar,<br>
ID_COMBO);<br>
<br>
int idx;<br>
for (idx = 0; idx &lt; 8; idx++)<br>
m_Combo.InsertString (-1, (LPCTSTR)szStrings[idx]);<br>
<br>
return 0;<br>
}</tt> </p>

<p>The preceding code does not specify a size for the toolbar.
Instead, you can size the toolbar when the parent window (the <i>client
window</i> for you C people, or the <i>View window</i> for MFC
fans) handles the WM_SIZE message. In response to this message,
you can use the TB_AUTOSIZE message (or the MFC AutoSize member
function) to tell the toolbar to size itself. </p>
</body>
</html>

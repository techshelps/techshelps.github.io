<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring Input</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Monitoring Input</h2>

<p>Now let's look at what you need in order to monitor the input
to the controls in a common dialog box. Notifications about these
controls can be monitored through hooks. The dialog procedure
provided in COMDLG32.DLL calls the application's hook function if
the application specifies the appropriate flag (OFN_ENABLEHOOK)
and a pointer to the hook function in the <i>lpfnHook</i> member
of the OPENFILENAME structure. </p>

<p><tt>OpenFileName.Flags = OFN_SHOWHELP | OFN_PATHMUSTEXIST |
OFN_EXPLORER |<br>
OFN_FILEMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLEHOOK;<br>
OpenFileName.lpfnHook = (LPOFNHOOKPROC)FileOpenHookProc;</tt> </p>

<p>The hook function used in the CMNDLG32 sample simply passes
the WM_NOTIFY message to the notification handler: </p>

<p><tt>BOOL APIENTRY FileOpenHookProc (HWND hDlg, UINT message,
UINT wParam,<br>
LONG lParam)<br>
{<br>
if (message == WM_NOTIFY)<br>
return FileOpenNotify (hDlg, (LPOFNOTIFY)lParam);<br>
<br>
return FALSE;<br>
}</tt> </p>

<p>Under Windows 95, the WM_NOTIFY message is sent to the hook
procedure for the Open and Save As common dialog boxes whenever
an action such as selection occurs. The hook procedure receives
the WM_NOTIFY message with the OFNOTIFY structure packaged in its
<i>lParam </i>parameter. The OFNOTIFY structure contains
information about the notification and the object, including
pointers to an NMHDR structure, to the OPENFILENAME structure,
and to the current filename. </p>

<p>When the hook procedure receives the WM_NOTIFY message, it can
use the <i>code</i> member of the NMHDR structure to determine
the current action. The following code traps the notification
code and writes it to the status bar. When the user clicks the OK
button, the application prompts the user to confirm that the
operation should continue. </p>

<p><tt>BOOL NEAR PASCAL FileOpenNotify (HWND hDlg, LPOFNOTIFY
pofn)<br>
{<br>
static char lpszNotification [FILE_LEN];<br>
HANDLE hFile;<br>
char szTempText [MAX_PATH];<br>
char szString [MAX_PATH];<br>
DWORD dwBytesWritten;<br>
<br>
switch (pofn-&gt;hdr.code)<br>
{<br>
// The current selection has changed.<br>
case CDN_SELCHANGE:<br>
{<br>
char szFile [MAX_PATH];<br>
<br>
// Get the file specification from the common dialog box.<br>
CommDlg_OpenSave_GetSpec (GetParent (hDlg),<br>
szFile, sizeof (szFile));<br>
wsprintf (lpszNotification, <br>
&quot;File Open Notification: %s. File: %s&quot;,<br>
&quot;CDN_SELCHANGE&quot;, szFile);<br>
}<br>
break;<br>
<br>
// The current folder has changed.<br>
case CDN_FOLDERCHANGE:<br>
{<br>
char szFile [MAX_PATH];<br>
<br>
if (CommDlg_OpenSave_GetFolderPath (GetParent (hDlg),<br>
szFile, sizeof (szFile)) &lt;= sizeof (szFile))<br>
{<br>
wsprintf (lpszNotification, <br>
&quot;File Open Notification: %s. File: %s&quot;, <br>
&quot;CDN_FOLDERCHANGE&quot;, szFile);<br>
}<br>
}<br>
break;<br>
<br>
// The Help button has been clicked.<br>
case CDN_HELP:<br>
wsprintf (lpszNotification, &quot;File Open Notification:
%s.&quot;,<br>
&quot;CDN_HELP&quot;);<br>
break;<br>
<br>
// The OK button has been clicked.<br>
// To prevent the common dialog box from closing, the result
should <br>
// be nonzero via a call to SetWindowLong (hDlg, DWL_MSGRESULT, <br>
// lResult).<br>
case CDN_FILEOK:<br>
SetWindowLong (hDlg, DWL_MSGRESULT, 1L);<br>
wsprintf (lpszNotification, <br>
&quot;File Open Notification: %s. File: %s&quot;,<br>
&quot;CDN_FILEOK&quot;, pofn-&gt;lpOFN-&gt;lpstrFile);<br>
GetDlgItemText (hDlg, edt1, szTempText, sizeof (szTempText) -1);<br>
wsprintf (szString, &quot;Are you sure you want to open
%s?&quot;, <br>
szTempText);<br>
if (MessageBox (hDlg, szString, &quot;Information&quot;,
MB_YESNO) == IDNO)<br>
{<br>
SetWindowLong (hDlg, DWL_MSGRESULT, -1);<br>
break;<br>
}<br>
// Check to see whether the Create File box is checked.<br>
if ((BOOL) (SendMessage (GetDlgItem (hDlg, chx2),<br>
BM_GETCHECK, 0, 0L)) == TRUE)<br>
{<br>
// If so, create the file.<br>
if ((hFile = CreateFile (szTempText,<br>
GENERIC_READ | GENERIC_WRITE,<br>
FILE_SHARE_READ | FILE_SHARE_WRITE,<br>
NULL,<br>
CREATE_ALWAYS,<br>
FILE_ATTRIBUTE_NORMAL,<br>
(HANDLE)NULL)) == (HANDLE)(-1))<br>
{<br>
MessageBox (hDlg, &quot;Directory could not be created.&quot;,<br>
NULL, MB_OK);<br>
SetWindowLong (hDlg, DWL_MSGRESULT, -1);<br>
break;<br>
}<br>
<br>
if (WriteFile (hFile, (LPTSTR)FileBuf, dwFileSize, <br>
&amp;dwBytesWritten, NULL) == FALSE)<br>
MessageBox (hDlg, &quot;Error writing file.&quot;, NULL, MB_OK);<br>
<br>
if (hFile)<br>
CloseHandle (hFile); // close the file<br>
}<br>
break;<br>
<br>
// Received a sharing violation<br>
case CDN_SHAREVIOLATION:<br>
wsprintf (lpszNotification, &quot;File Open Notification:
%s.&quot;,<br>
&quot;CDN_SHAREVIOLATION&quot;);<br>
break;<br>
<br>
// Received when initialization has finished via the
WM_INITDIALOG<br>
// message; all controls moved at this point<br>
case CDN_INITDONE:<br>
wsprintf (lpszNotification, &quot;File Open Notification:
%s.&quot;,<br>
&quot;CDN_INITDONE&quot;);<br>
break;<br>
<br>
// Received when the file type changes in the Files Of Type box<br>
case CDN_TYPECHANGE:<br>
wsprintf (lpszNotification, &quot;File Open Notification:
%s.&quot;,<br>
&quot;CDN_TYPECHANGE&quot;);<br>
break;<br>
}<br>
<br>
// Write the notification to the status window.<br>
SendMessage (hWndStatus, SB_SETTEXT, 0,
(LPARAM)lpszNotification);<br>
<br>
return TRUE;<br>
}</tt> </p>
</body>
</html>

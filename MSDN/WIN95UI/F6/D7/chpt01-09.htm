<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Status Bar Messages and Member Functions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Status Bar Messages and Member Functions</h2>

<p>Table 1-3 lists the messages that can be sent to status bars
and the member functions supported by the MFC-supplied class
CStatusBarCtrl. Because the table's purpose is to describe what
you can do with a status bar, it does not include return values
or parameter information. You can find details about parameters
and return values in the Win32 SDK documentation and in the MFC
3.1 documentation. </p>

<table border="1">
    <tr>
        <td valign="top"><b>Message</b></td>
        <td valign="top"><b>Member Function</b></td>
        <td valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">SB_GETBORDERS*</td>
        <td valign="top">GetBorders*</td>
        <td valign="top">Retrieves the current widths of the
        horizontal and vertical borders of a status bar. These
        measurements determine the spacing between the outer edge
        of the window and the rectangles in the window that
        contain text as well as the spacing between rectangles.</td>
    </tr>
    <tr>
        <td valign="top">SB_GETPARTS</td>
        <td valign="top">GetParts</td>
        <td valign="top">Retrieves the number of parts in a
        status bar and, for each part, the coordinate of the
        right edge.</td>
    </tr>
    <tr>
        <td valign="top">SB_GETRECT</td>
        <td valign="top">GetRect</td>
        <td valign="top">Retrieves the bounding rectangle of the
        given part of a status bar.</td>
    </tr>
</table>

<p><b>Table 1-3. </b><i>(continued)</i> </p>

<p><i>Status bar messages and member functions.</i> </p>

<table border="1">
    <tr>
        <td valign="top"><b>Message</b></td>
        <td valign="top"><b>Member Function</b></td>
        <td valign="top"><b>Description</b></td>
    </tr>
    <tr>
        <td valign="top">SB_GETTEXT*</td>
        <td valign="top">GetText*</td>
        <td valign="top">Retrieves the text from the given part
        of a status bar. SB_GETTEXT returns a 32-bit value
        consisting of two 16-bit values. The low-order word
        specifies the length, in characters, of the text. The
        high-order word specifies the type of operation used to
        draw the text. If the text has a type of SBT_OWNERDRAW,
        the message returns the 32-bit value associated with the
        text instead of the length and type.</td>
    </tr>
    <tr>
        <td valign="top">SB_GETTEXTLENGTH*</td>
        <td valign="top">GetTextLength*</td>
        <td valign="top">Retrieves the length, in characters, of
        the text from the given part of a status bar.
        SB_GETTEXTLENGTH returns a 32-bit value consisting of two
        16-bit values. The low-order word specifies the length,
        in characters, of the text. The high-order word specifies
        the type of operation used to draw the text.</td>
    </tr>
    <tr>
        <td valign="top">SB_SETBORDERS*</td>
        <td valign="top">SetBorders*</td>
        <td valign="top">Sets the widths of the horizontal and
        vertical borders of a status bar. These borders determine
        the spacing between the outer edge of the window and the
        rectangles within the window that contain text as well as
        the spacing between rectangles.</td>
    </tr>
    <tr>
        <td valign="top">SB_SETMINHEIGHT*</td>
        <td valign="top">SetMinHeight*</td>
        <td valign="top">Sets the minimum height for a status
        bar. The sum of this minimum height (<i>wParam</i>) and
        the height of the vertical border of the window equals
        the minimum height of the entire window.</td>
    </tr>
    <tr>
        <td valign="top">SB_SETPARTS</td>
        <td valign="top">SetParts</td>
        <td valign="top">Sets the number of parts in a status bar
        (no more than 255) and sets the coordinate of the right
        edge of each part. <i>lParam</i> is the address of an
        integer array that has the same number of elements as the
        number of parts specified by <i>wParam</i>. Each element
        in the array specifies the position, in client
        coordinates, of the right edge of the corresponding part.
        If an element is &#150;1, the position of the right edge
        for that part extends to the right edge of the window.</td>
    </tr>
    <tr>
        <td valign="top">SB_SETTEXT*</td>
        <td valign="top">SetText*</td>
        <td valign="top">Sets the text in the given part of a
        status bar. This message invalidates the portion of the
        window that has changed, causing the window to display
        the new text. <i>wParam</i> is the zero-based index of
        the part to set and the type of drawing operation. If
        this value is 255, the status bar is assumed to be in
        simple mode. <i>lParam</i> is the address of a
        null-terminated string that specifies the text to set. If
        <i>wParam</i> is SBT_OWNERDRAW, <i>lParam</i> represents
        32 bits of data. The parent window must interpret and
        draw the data when it receives the WM_DRAWITEM message.</td>
    </tr>
    <tr>
        <td valign="top">SB_SIMPLE</td>
        <td valign="top">SetSimple</td>
        <td valign="top">Specifies whether a status bar displays
        simple text or displays all window parts set by a
        previous SB_SETPARTS message.</td>
    </tr>
</table>

<p>* This message or member function can also be used with header
controls (column headers), discussed in Chapter 3. </p>
</body>
</html>

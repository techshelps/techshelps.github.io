<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Resizing the Windows</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h1><font size="5">Resizing the Windows</font></h1>

<p>When I finished creating the windows, I had to find an easy
way to resize the application's main window. In the C version, I
used the handy DeferWindowPos function to resize all the windows
at the same time. For those who are new to Win32, DeferWindowPos
updates a structure that contains multiple window positions. You
use this function as you would use the window enumeration
functions&#151;that is, you begin, defer, and end. This code
illustrates how I resized all the windows: </p>

<p><tt>BOOL ResizeWindows (HWND hwnd)<br>
{<br>
RECT rcl;<br>
HDWP hdwp;<br>
<br>
// Get the client area of the parent window.<br>
GetClientRect (hwnd, &amp;rcl);<br>
<br>
// You will defer all the application's windows.<br>
hdwp = BeginDeferWindowPos (NUM_WINDOWS);<br>
<br>
// First, reset the size of the status bar.<br>
DeferWindowPos (hdwp, g_Listing.hWndStatus, NULL, 0, 0,<br>
rcl.right - rcl.left, 20, SWP_NOZORDER | SWP_NOMOVE);<br>
<br>
// Next, reset the size of the toolbar.<br>
DeferWindowPos (hdwp, g_Listing.hWndToolbar, NULL, 0, 0,<br>
rcl.right - rcl.left, 20, SWP_NOZORDER | SWP_NOMOVE);<br>
<br>
// Next, reset the size of the tree view control.<br>
DeferWindowPos (hdwp, g_Listing.hWndTreeView, NULL, 0, 0,<br>
(rcl.right - rcl.left ) / 4, rcl.bottom - rcl.top - 46,<br>
SWP_NOZORDER | SWP_NOMOVE);<br>
<br>
// Last, reset the size of the list view control.<br>
DeferWindowPos (hdwp, g_Listing.hWndListView, NULL,<br>
(rcl.right - rcl.left ) / 4, 27,<br>
(rcl.right - rcl.left) - ((rcl.right - rcl.left) / 4),<br>
rcl.bottom - rcl.top - 46,<br>
SWP_NOZORDER);<br>
<br>
return EndDeferWindowPos (hdwp);<br>
}</tt> </p>

<p>In MFCEXP, I added a handler for the WM_SIZE message, OnSize,
to set the window positions for all the windows. The CToolBarCtrl
class includes AutoSize, a special member function that resizes
the toolbar to fit within the parent window. </p>

<p><tt>void CMfcexpView::OnSize (UINT nType, int cx, int cy)<br>
{<br>
CView::OnSize (nType, cx, cy);<br>
<br>
// Resize the toolbar.<br>
m_Toolbar.AutoSize ();<br>
<br>
// Resize the status bar.<br>
// Make it fit along the bottom of the client area.<br>
m_StatusBar.MoveWindow (0, cx - 10, cy, cy - 10);<br>
<br>
// Set the rectangle for each part of the status bar.<br>
// Make each 1/2 the width of the client area.<br>
int aWidths [2];<br>
<br>
aWidths [0] = cx / 2;<br>
aWidths [1] = -1;<br>
m_StatusBar.SetParts (2, aWidths);<br>
<br>
m_TreeCtl.MoveWindow (0, 25, cx / 4, cy - 45);<br>
<br>
m_ListCtl.MoveWindow (cx / 4, 25, cx, cy - 45);<br>
}</tt> </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Editing Labels</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Editing Labels</h2>

<p>When you create a list view control, you can enable label
editing by specifying the LVS_EDITLABELS style, which lets a user
edit an item's text label in place. The user begins by clicking
the label of an item that has the focus. The list view control
notifies the parent window with an LVN_BEGINLABELEDIT
notification. If you do not want to allow label editing on
certain items, you can return a nonzero value to disallow it. To
limit the amount of text the user can enter, the application gets
the handle to the edit window through the LVM_GETEDITCONTROL
message (or the MFC GetEditControl member function) and sends the
EM_SETLIMITTEXT message to the edit control (or uses the MFC
LimitText member function of the CEdit class), specifying the
maximum number of characters that can be entered. </p>

<p>Once editing is completed, the list view control sends its
parent window an LVN_ENDLABELEDIT notification. The<i> lParam</i>
parameter is the address of an LV_DISPINFO structure identifying
the item and specifying the edited text. The parent window is
responsible for updating the item's label. If editing is
canceled, the <i>iItem</i> member is -1. Be alert to the
possibility of getting a valid index to an item but getting a
NULL pointer back for the text. This happens if the user chooses
an item and immediately presses the Enter key. </p>

<p>The following code from the MFCLIST sample shows how to
support label editing in a list view control: </p>

<p><tt>case LVN_BEGINLABELEDIT:<br>
{<br>
CEdit *pEdit;<br>
// Get the handle to the edit control.<br>
pEdit = m_ListCtl.GetEditControl ();<br>
// Limit the amount of text that the user can enter.<br>
pEdit-&gt;LimitText (20);<br>
}<br>
break;<br>
<br>
case LVN_ENDLABELEDIT:<br>
// If label editing wasn't canceled and the <br>
// text buffer is non-NULL...<br>
if ((pLvdi-&gt;item.iItem != -1) &amp;&amp;
(pLvdi-&gt;item.pszText != NULL))<br>
// Save the new label information.<br>
lstrcpy (pHouse-&gt;szAddress, pLvdi-&gt;item.pszText);<br>
break;</tt> </p>

<p>That's all there is to it. The LISTVIEW and MFCLIST samples
should be enough to get you started if you plan to include list
view controls in your application. </p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Up-Down Control</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Creating an Up-Down Control</h2>

<p>The code on the next page demonstrates how easy it is to
create a spin box on the fly as part of a dialog box. You might
want to do this if you are using one dialog box for several
applications&#151;one instance could show the current value as
static information, while another might allow the user to change
this data. When the user chooses OK in the dialog box, the
program retrieves and saves the selection in the spin box and
closes the dialog box. (To use an up-down control in your
application, remember to include the COMMCTRL.H header file and
to include the COMCTL32.LIB file in your list of libraries.) </p>

<p><tt>BOOL APIENTRY Spin (<br>
HWND hDlg,<br>
UINT message,<br>
UINT wParam,<br>
LONG lParam)<br>
{<br>
static HWND hWndUpDown, hWndBuddy;<br>
BOOL bErr;<br>
<br>
switch (message)<br>
{<br>
case WM_INITDIALOG:<br>
// Get a handle to the edit (buddy) control.<br>
hWndBuddy = GetDlgItem (hDlg, IDE_BUDDY);<br>
<br>
// Create the up-down control.<br>
hWndUpDown = CreateWindowEx ( <br>
0L,<br>
UPDOWN_CLASS,<br>
&quot;&quot;,<br>
WS_CHILD | WS_BORDER | WS_VISIBLE | UDS_WRAP | UDS_ARROWKEYS |<br>
UDS_ALIGNRIGHT | UDS_SETBUDDYINT,<br>
0, 0, 8, 8,<br>
hDlg,<br>
(HMENU)ID_UPDOWN,<br>
hInst,<br>
NULL);<br>
<br>
// Set the buddy window.<br>
SendMessage (hWndUpDown, UDM_SETBUDDY, (LONG)hWndBuddy, 0L);<br>
<br>
// Set the range.<br>
SendMessage (hWndUpDown, UDM_SETRANGE, 0L, <br>
MAKELONG (MAX_SPIN, MIN_SPIN));<br>
<br>
// Set the default value in the edit control.<br>
SetDlgItemInt (hDlg, IDE_BUDDY, 1, FALSE);<br>
<br>
return TRUE;<br>
<br>
case WM_COMMAND:<br>
switch (LOWORD (wParam))<br>
{<br>
case IDOK:<br>
iNumLines = (int) GetDlgItemInt (hDlg, IDE_BUDDY, <br>
&amp;bErr, FALSE);<br>
InvalidateRect (hWndMain, NULL, TRUE); <br>
<br>
case IDCANCEL:<br>
EndDialog (hDlg, TRUE);<br>
break;<br>
}<br>
break;<br>
<br>
}<br>
<br>
return FALSE; <br>
}</tt> </p>

<p>If you don't need to create your spin box dynamically, and if
you are using Microsoft Visual C++ version 2.1 or later, you can
take advantage of the resource editor. The resource editor
supports up-down controls, and you can place one of these
controls in your dialog box as you would any other control. When
I ported the UPDOWN sample to MFC (MFCSPIN), I used the resource
editor. I created the CSpin class, derived from CDialog, and set
up the <i>m_Lines</i> member variable to hold the number of
lines. Here is the terribly complex code required to use the spin
box: </p>

<p><tt>// CSpin message handlers<br>
<br>
BOOL CSpin::OnInitDialog () <br>
{<br>
CDialog::OnInitDialog ();<br>
<br>
// Set the buddy control.<br>
m_Spin.SetBuddy (GetDlgItem (IDC_LINES));<br>
<br>
// Set the range.<br>
m_Spin.SetRange (1, 20);<br>
<br>
return TRUE; // return TRUE unless you set the focus to a control<br>
// EXCEPTION: OCX property pages should return FALSE<br>
}<br>
<br>
void CFcspinView::OnSpin () <br>
{<br>
CSpin spinDlg;<br>
<br>
if (spinDlg.DoModal() == IDOK)<br>
{<br>
m_NumLines = spinDlg.m_Lines;<br>
GetDocument()-&gt;UpdateAllViews (NULL);<br>
}<br>
}</tt> </p>

<p>Of course, this wasn't difficult at all. As you can see, it's
easy to use the new controls&#151;and even easier to have the
resource editor help you out. </p>
</body>
</html>

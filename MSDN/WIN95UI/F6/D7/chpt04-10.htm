<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Wizard Notifications</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<h2>Processing Wizard Notifications</h2>

<p>The information the WIZARD sample gathers to generate the
review is kept in a global structure named REVIEWINFO, which
resides in the WIZARD.H file. The MAX_PATH constant in the
following code is defined to be 256 characters. </p>

<p><tt>typedef struct tagREVIEWINFO<br>
{<br>
HINSTANCE hInst; // current instance<br>
int iWorkHabits;<br>
int iTeamWork;<br>
int iReliability;<br>
int iGoals;<br>
int iAdaptation;<br>
char pszName [MAX_PATH];<br>
char pszTitle [MAX_PATH];<br>
char pszProject [MAX_PATH];<br>
char pszDepartment [MAX_PATH];<br>
} REVIEWINFO;</tt> </p>

<p>The following code from the WIZARD sample demonstrates how an
application can trap the notifications that are sent to a wizard.
In this code, the dialog procedure initializes the text buffers
with NULL strings upon the first entrance into the wizard and
whenever the dialog box receives a PSN_RESET notification. When
this dialog box receives the PSN_WIZNEXT notification, it saves
the information that the user entered in the text fields. If this
dialog box is called again and receives a PSN_SETACTIVE
notification, the text buffers are reinitialized with the
information that was previously entered in the text fields. This
dialog box also sets the Next button as the only enabled function
when it receives the PSN_SETACTIVE notification. Since this is
the first dialog box entered in the wizard, the Back button
should not be enabled. </p>

<p><tt>// FUNCTION: YourInfo (HWND, UINT, UINT, LONG)<br>
//<br>
// PURPOSE: Processes messages for &quot;Your Information&quot;
page <br>
//<br>
// MESSAGES:<br>
// <br>
// WM_INITDIALOG initializes the page.<br>
// WM_NOTIFY processes the notifications sent to the page.<br>
<br>
BOOL APIENTRY YourInfo (HWND hDlg, UINT message, UINT wParam,<br>
LONG lParam)<br>
{<br>
switch (message)<br>
{<br>
case WM_INITDIALOG:<br>
// Initialize the text buffers with NULL.<br>
strcpy (rvInfo.pszName, &quot;&quot;);<br>
strcpy (rvInfo.pszTitle, &quot;&quot;);<br>
strcpy (rvInfo.pszProject, &quot;&quot;);<br>
strcpy (rvInfo.pszDepartment, &quot;&quot;);<br>
break;<br>
<br>
case WM_NOTIFY:<br>
switch (((NMHDR FAR *) lParam)-&gt;code) <br>
{<br>
case PSN_KILLACTIVE:<br>
SetWindowLong (hDlg, DWL_MSGRESULT, FALSE);<br>
return 1;<br>
break;<br>
<br>
case PSN_RESET:<br>
// Reset to the original values.<br>
strcpy (rvInfo.pszName, &quot;&quot;);<br>
strcpy (rvInfo.pszTitle, &quot;&quot;);<br>
strcpy (rvInfo.pszProject, &quot;&quot;);<br>
strcpy (rvInfo.pszDepartment, &quot;&quot;);<br>
SetWindowLong (hDlg, DWL_MSGRESULT, FALSE);<br>
break;<br>
<br>
case PSN_SETACTIVE:<br>
PropSheet_SetWizButtons (GetParent (hDlg), PSWIZB_NEXT);<br>
SendMessage (GetDlgItem (hDlg, IDE_NAME), WM_SETTEXT, <br>
0, (LPARAM)rvInfo.pszName);<br>
SendMessage (GetDlgItem (hDlg, IDE_TITLE), WM_SETTEXT, <br>
0, (LPARAM)rvInfo.pszTitle);<br>
SendMessage (GetDlgItem (hDlg, IDE_PROJECT), WM_SETTEXT, <br>
0, (LPARAM)rvInfo.pszProject);<br>
SendMessage (GetDlgItem (hDlg, IDE_DEPARTMENT), WM_SETTEXT, <br>
0, (LPARAM)rvInfo.pszDepartment);<br>
break;<br>
<br>
case PSN_WIZNEXT:<br>
// The Next button was clicked; get the text info entered.<br>
SendDlgItemMessage (hDlg, IDE_NAME, WM_GETTEXT, <br>
(WPARAM)MAX_PATH, (LPARAM)rvInfo.pszName);<br>
SendDlgItemMessage (hDlg, IDE_TITLE, WM_GETTEXT, <br>
(WPARAM)MAX_PATH, (LPARAM)rvInfo.pszTitle);<br>
SendDlgItemMessage (hDlg, IDE_PROJECT, WM_GETTEXT, <br>
(WPARAM)MAX_PATH, (LPARAM)rvInfo.pszProject);<br>
SendDlgItemMessage (hDlg, IDE_DEPARTMENT, WM_GETTEXT, <br>
(WPARAM)MAX_PATH, (LPARAM)rvInfo.pszDepartment);<br>
break;<br>
<br>
default:<br>
return FALSE;<br>
}<br>
break;<br>
<br>
default:<br>
return FALSE;<br>
}<br>
<br>
return TRUE; <br>
}</tt> </p>

<p>When you build and run this sample, you'll see the first page
of the wizard, shown in Figure 4-5. </p>

<p>&nbsp;</p>

<p><b>Figure 4-5.</b> </p>

<p><img src="fig4-5.gif" width="445" height="326"></p>

<h4><i>The first page of the performance review wizard.</i> </h4>

<p>In the WIZARD sample, information is gathered to produce text
for a performance review. While the wizard is running, the
results the user enters are kept in the REVIEWINFO structure, as
shown previously, and used to create the review. The review is
generated through indexes into a string table, and the resulting
buffer is displayed in a multiline edit box in the client area of
the main window. The WIZARD sample uses the following code to
generate the final text buffer: </p>

<p><tt>// FUNCTION: GenerateReview (HWND)<br>
//<br>
// PURPOSE: Generates the review <br>
//<br>
// COMMENTS:<br>
// This function generates the review based on the answers<br>
// given to the wizard. The function translates lame reality into<br>
// impressive-sounding managerspeak via a string table.<br>
<br>
void GenerateReview (HWND hDlg)<br>
{<br>
char lpBuf1 [MAX_LINE]; // buffers for lines in review<br>
char lpBuf2 [MAX_LINE];<br>
char lpBuf3 [MAX_LINE];<br>
char lpBuf4 [MAX_LINE];<br>
char lpBuf5 [MAX_LINE];<br>
<br>
wsprintf (lpReview, &quot;Name: %s%C%C%C%CTitle:
%s%C%C%C%CDepartment: &quot; <br>
&quot;%s%C%C%C%CMain Project: %s%C%C%C%C&quot;,<br>
rvInfo.pszName, 0x0d, 0x0a, 0x0d, 0x0a, <br>
rvInfo.pszTitle, 0x0d, 0x0a, 0x0d, 0x0a, <br>
rvInfo.pszDepartment, 0x0d, 0x0a, 0x0d, 0x0a, <br>
rvInfo.pszProject, 0x0d, 0x0a, 0x0d, 0x0a);<br>
<br>
// Add a line describing work habits.<br>
if (LoadString (rvInfo.hInst, rvInfo.iWorkHabits, lpBuf1,<br>
sizeof (lpBuf1)) == 0)<br>
MessageBox (hDlg, &#147;Error loading string!&#148;, NULL,
MB_OK);<br>
else<br>
strcat (lpReview, lpBuf1);<br>
<br>
// Add a line describing teamwork.<br>
if (LoadString (rvInfo.hInst, rvInfo.iTeamWork, lpBuf2, <br>
sizeof (lpBuf2)) == 0)<br>
MessageBox (hDlg, &#147;Error loading string!&#148;, NULL,
MB_OK);<br>
else<br>
strcat (lpReview, lpBuf2);<br>
<br>
// Add a line describing reliability.<br>
if (LoadString (rvInfo.hInst, rvInfo.iReliability, lpBuf3,<br>
sizeof (lpBuf3)) == 0)<br>
MessageBox (hDlg, &#147;Error loading string!&#148;, NULL,
MB_OK);<br>
else<br>
strcat (lpReview, lpBuf3);<br>
<br>
// Add a line describing goals.<br>
if (LoadString (rvInfo.hInst, rvInfo.iGoals, lpBuf4, <br>
sizeof (lpBuf4)) == 0)<br>
MessageBox (hDlg, &#147;Error loading string!&#148;, NULL,
MB_OK);<br>
else<br>
strcat (lpReview, lpBuf4);<br>
<br>
// Add a line describing adaptability.<br>
if (LoadString (rvInfo.hInst, rvInfo.iAdaptation, lpBuf5,<br>
sizeof (lpBuf5)) == 0)<br>
MessageBox (hDlg, &#147;Error loading string!&#148;, NULL,
MB_OK);<br>
else<br>
strcat (lpReview, lpBuf5);<br>
}</tt> </p>

<p>If you build and run the sample now, you can fill in the
appropriate information, check the boxes that most accurately
reflect your skills and work habits, and have a review generated
for you. Just for grins, I used the wizard and picked the last
option in the list for each question asked. You can see the
result in Figure 4-6. </p>

<p>&nbsp;</p>

<p><b>Figure 4-6.</b> </p>

<p><img src="fig4-6.gif" width="482" height="322"></p>

<h4><i>The review generated by the performance review wizard.</i>
</h4>
</body>
</html>

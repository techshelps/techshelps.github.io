<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Can I View the Call Stack After an MFC Assert?</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_how_can_i_view_the_call_stack_after_an_mfc_assert.3f"></A>How Can I View the Call Stack After an MFC Assert?</H1>

<P><B>Full Problem Description:</B> When debugging an application that uses the MFC library, an ASSERT gives the file and line number of its location, but I want to know how the code got to the assertion. How can I do this?</P>

<P>You need to examine the call stack. An <B>ASSERT</B> gives you three choices: <B>Abort</B>, <B>Retry</B>, or <B>Ignore</B>. <B>Abort</B> and <B>Ignore</B> do not activate the debugger, so there is no way to examine the call stack. If you choose <B>Retry</B>, the breakpoint (interrupt 3) embedded in your source code will cause a break and activate the debugger. The debugger will also be activated if you have enabled <A HREF="_core_enabling_just.2d.in.2d.time_debugging.htm">Just-in-time debugging</A>. To examine the call stack, on the <B>View</B> menu, click <B>Debug Windows</B> and <B>Call Stack</B>. </P>

<P>Another way to catch an MFC assertion is by setting a breakpoint on the opening brace of the <B>AfxAssertFailedLine</B> function in AFXASERT.CPP. This source file is found in the MFC\SRC subdirectory of your Visual C++ installation directory. </P>

<P>The <B>AfxAssertFailedLine</B> function is called if an <B>ASSERT</B> fails. By setting a breakpoint on the opening brace of this function, the debugger will automatically come up when it finds an <B>ASSERT</B> in your code, or in the MFC library code. At this point, you can examine the call stack. </P>

<P>Remember that you cannot use the call stack to trace back through Windows messages.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fatal Error C1017</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="c1017"></A><SUP></SUP>Fatal Error C1017</H1>

<P class=dt><B>invalid integer constant expression</B></P>

<P>The expression in an <B>#if</B> directive either did not exist or did not evaluate to a constant.</P>

<P>When using the <B>#define</B> statement to define a constant, its value must evaluate to an integer constant if it is to be used as the expression in an <B>#if</B>, <B>#elif</B>, or <B>#else</B> compiler directive. For example, this error occurs with the following code fragment:</P>

<PRE><CODE>#define CONSTANT_NAME "YES"
#if CONSTANT_NAME
...
#endif
</CODE></PRE>

<P>Because <CODE>CONSTANT_NAME</CODE> evaluates to a string constant and not an integer constant, the <B>#if</B> directive generates this error and halts the compiler.</P>

<P>Another notable situation occurs when any constant that is undefined is evaluated by the preprocessor to be zero. If an undefined constant is used inadvertently, unintended behavior may result. For example, in the following code fragment, the result is the reverse of what is actually intended:</P>

<PRE><CODE>#define CONSTANT_NAME YES
#if CONSTANT_NAME
   // Code to use on YES...
#elif CONSTANT_NAME==NO
   // Code to use on NO...
#endif
</CODE></PRE>

<P>In this example, <CODE>YES</CODE> is undefined, so it evaluates to zero. Therefore, <CODE>CONSTANT_NAME</CODE> is also zero. Thus, the <B>#if</B> expression <CODE>CONSTANT_NAME</CODE> evaluates to false and the code intended to be used on <CODE>YES</CODE> is removed by the preprocessor. Furthermore, because <CODE>NO</CODE> is also undefined, it also evaluates to zero, which means that the <B>#elif</B> expression <CODE>CONSTANT_NAME==NO</CODE> evaluates to true (<CODE>0 == 0</CODE>). This causes the preprocessor to leave the code in the <B>#elif</B> portion of the conditional statement, which is also not the intended behavior.</P>

<P class=label><B>Tips</B>

<UL type=disc>
	<LI>If you are not sure how the compiler is handling certain directives, you can compile the code with one of the preprocessor options (/P, /E, /EP). This will allow you to see the exact effect of the preprocessor directives on the code.</LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_set_new_handler</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__set_new_handler"></A><SUP></SUP>_set_new_handler</H1>

<P>Transfer control to your error-handling mechanism if the <B>new</B> operator fails to allocate memory.</P>

<P><B>_PNH</B> <B>_set_new_handler(</B> <B>_PNH</B> <I>pNewHandler</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B>Routine</B></TD>
<TD class=label width=30%><B>Required Header</B></TD>
<TD class=label width=42%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%><B>_set_new_handler</B></TD>
<TD width=30%>&lt;new.h&gt;</TD>
<TD width=42%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_set_new_handler</B> returns a pointer to the previous exception handling function registered by <B>_set_new_handler</B>, so that the previous function can be restored later. If no previous function has been set, the return value may be used to restore the default behavior; this value may be NULL.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>pNewHandler</I></P>

<P class=indent>Pointer to the application-supplied memory handling function</P>

<P class=label><B>Remarks</B></P>

<P>Call the C++ <B>_set_new_handler</B> function to specify an exception-handling function that is to gain control if the <B>new</B> operator fails to allocate memory. If <B>new</B> fails, the run-time system automatically calls the exception-handling function that was passed as an argument to <B>_set_new_handler</B>. <B>_PNH</B>, defined in NEW.H, is a pointer to a function that returns type <B>int</B> and takes an argument of type <B>size_t</B>. Use <B>size_t</B> to specify the amount of space to be allocated.</P>

<P><B>_set_new_handler</B> is essentially a garbage-collection scheme. The run-time system retries allocation each time your function returns a nonzero value and fails if your function returns 0.</P>

<P>An occurrence of one of the <B>_set_new_handler</B> functions in a program registers the exception-handling function specified in the argument list with the run-time system:</P>

<PRE><CODE>#include &lt;new.h&gt;
int handle_program_memory_depletion( size_t )
{
   // Your code
}
void main( void )
{
   _set_new_handler( handle_program_memory_depletion );
   int *pi = new int[BIG_NUMBER];
}
</CODE></PRE>

<P>You can save the function address that was last passed to the <B>_set_new_handler</B> function and reinstate it later:</P>

<PRE><CODE>_PNH old_handler = _set_new_handler( my_handler );
   // Code that requires my_handler
   _set_new_handler( old_handler )
   // Code that requires old_handler
</CODE></PRE>

<P>The C++ <A HREF="_crt__set_new_mode.htm">_set_new_mode</A> function sets the new handler mode for <A HREF="_crt_malloc.htm">malloc</A>. The new handler mode indicates whether, on failure, <B>malloc</B> is to call the new handler routine as set by <B>_set_new_handler</B>. By default, <B>malloc</B> does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when <B>malloc</B> fails to allocate memory, <B>malloc</B> calls the new handler routine in the same way that the <B>new</B> operator does when it fails for the same reason. To override the default, call </P>

<PRE><CODE>_set_new_mode(1)
</CODE></PRE>

<P>early in your program, or link with NEWMODE.OBJ.</P>

<P>For more information, see <A HREF="_langref_new_operator.htm">new</A> and <A HREF="_langref_delete_operator.htm">delete</A> in the <I>Language Quick Reference</I>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* HANDLER.CPP: This program uses _set_new_handler to 
 * print an error message if the new operator fails.
 */

#include &lt;stdio.h&gt;
#include &lt;new.h&gt;

/* Allocate memory in chunks of size MemBlock. */
const size_t MemBlock = 1024;

/* Allocate a memory block for the printf function to use in case
 * of memory allocation failure; the printf function uses malloc.
 * The failsafe memory block must be visible globally because the
 * handle_program_memory_depletion function can take one 
 * argument only.
 */
char * failsafe = new char[128];

/* Declare a customized function to handle memory-allocation failure.
 * Pass this function as an argument to _set_new_handler.
 */
int handle_program_memory_depletion( size_t );

void main( void )
{
   // Register existence of a new memory handler.
   _set_new_handler( handle_program_memory_depletion );
   size_t *pmemdump = new size_t[MemBlock];
   for( ; pmemdump != 0; pmemdump = new size_t[MemBlock] );
}

int handle_program_memory_depletion( size_t size )
{
   // Release character buffer memory.
   delete failsafe;
   printf( "Allocation failed, " );
   printf( "%u bytes not available.\n", size );
   // Tell new to stop allocation attempts.
   return 0;
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Allocation failed %0 bytes not available.

</CODE></PRE>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_calloc.htm">calloc</A>, <A HREF="_crt_free.htm">free</A>, <A HREF="_crt_realloc.htm">realloc</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Control Containers: Programming ActiveX Controls in an ActiveX Control Container</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_control_containers.3a_.programming_activex_controls_in_an_activex_control_container"></A>ActiveX Control Containers: Programming ActiveX Controls in an ActiveX Control Container</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>This article describes the process for accessing the exposed <A HREF="_core_activex_controls.3a_.methods.htm">methods</A> and <A HREF="_core_activex_controls.3a_.properties.htm">properties</A> of embedded ActiveX controls. Basically, you will follow these steps:

<OL>
	<LI><A HREF="_core_activex_control_containers.3a_.inserting_a_control_into_a_control_container_application.htm">Insert an ActiveX control into the ActiveX container project</A> using Gallery.<BR><BR></LI>

	<LI><A HREF="_core_activex_control_containers.3a_.connecting_an_activex_control_to_a_member_variable.htm">Define a member variable</A> (or other form of access) of the same type as the ActiveX control wrapper class.<BR><BR></LI>

	<LI><A HREF="#_core_programming_the_activex_control">Program the ActiveX control</A> using predefined member functions of the wrapper class.</LI>
</OL>

<P>For this discussion, assume you’ve created a dialog-based project (named Container) with ActiveX control support. The Circ2 sample control, Circ2, will be added to the resulting project.</P>

<P>Once the Circ2 control is inserted into the project (step 1), insert an instance of the Circ2 control into the application’s main dialog box.</P>

<P class=label><B>To add the Circ2 control to the dialog template</B>

<OL>
	<LI>Load the ActiveX control container project. For this example, use the Container project.<BR><BR></LI>

	<LI>Click ResourceView in the Project Workspace window.<BR><BR></LI>

	<LI>Open the <B>Dialog </B>folder.<BR><BR></LI>

	<LI>Double-click the main dialog box template. For this example, use IDD_CONTAINER_DIALOG.<BR><BR></LI>

	<LI>Click the Circ2 control icon on the Controls toolbar.<BR><BR></LI>

	<LI>Click a spot within the dialog box to insert the Circ2 control.<BR><BR></LI>

	<LI>On the <B>File </B>menu, click <B>Save All</B> to save all modifications to the dialog box template.</LI>
</OL>

<H3>Modifications to the Project</H3>

<P>To enable the Container application to access the Circ2 control, Gallery automatically adds the wrapper class (<CODE>CCirc2</CODE>) implementation file (.CPP) to the Container project and the wrapper class header (.H) file to the dialog box implementation file:</P>

<PRE><CODE>//{{AFX_INCLUDES(CContainerDlg)
#include "circ2.h"
//}}AFX_INCLUDES
// ContainerDlg.cpp : implementation file
//
</CODE></PRE>



<H3><A NAME="_core_the_wrapper_class_header_.28...h.29_.file"></A>The Wrapper Class Header (.H) File</H3>

<P>To get and set properties (and invoke methods) for the Circ2 control, the <CODE>CCirc2</CODE> wrapper class provides a declaration of all exposed methods and properties. In the example, these declarations are found in CIRC2.H. The following sample is the portion of class <CODE>CCirc2</CODE> that defines the exposed interfaces of the ActiveX control:</P>

<PRE><CODE>class CCirc2 : public CWnd
{
...
// Attributes
public:
   OLE_COLOR GetBackColor();
   void SetBackColor(OLE_COLOR);
   BOOL GetCircleShape();
   void SetCircleShape(BOOL);
   short GetCircleOffset();
   void SetCircleOffset(short);
   unsigned long GetFlashColor();
   void SetFlashColor(unsigned long);
   BSTR GetCaption();
   void SetCaption(LPCTSTR);
   LPFONTDISP GetFont();
   void SetFont(LPFONTDISP);
   OLE_COLOR GetForeColor();
   void SetForeColor(OLE_COLOR);
   CString GetNote();
   void SetNote(LPCTSTR);

// Operations
public:
   void AboutBox();
};
</CODE></PRE>

<P>These functions can then be called from other of the application’s procedures using normal C++ syntax. For more information on using this member function set to access the control’s methods and properties, see the section <A HREF="#_core_programming_the_activex_control">Programming the ActiveX control</A>.</P>



<H3><A NAME="_core_member_variable_modifications_to_the_project"></A>Member Variable Modifications to the Project</H3>

<P>Once the ActiveX control has been added to the project and embedded in a dialog box container, it can be accessed by other parts of the project. The easiest way to access the control is to <A HREF="_core_activex_control_containers.3a_.connecting_an_activex_control_to_a_member_variable.htm">create a member variable</A> of the dialog class, <CODE>CContainerDlg</CODE> (step 2), that is of the same type as the wrapper class added to the project by Gallery. You can then use the member variable to access the embedded control at any time.</P>

<P>When ClassWizard adds the <CODE>m_circ2ctl</CODE> member variable to the project, it also adds the following lines to the header file (.H) of the <CODE>CContainerDlg</CODE> class:</P>

<PRE><CODE>class CContainerDlg : public CDialog
{
// Construction
public:
   CContainerDlg(CWnd* pParent = NULL);   // standard constructor

// Dialog Data
   //{{AFX_DATA(CContainerDlg)
   enum { IDD = IDD_CONTAINER_DIALOG };
   CCirc2   m_circ2ctl;
   //}}AFX_DATA
};
</CODE></PRE>

<P>In addition, ClassWizard adds a <B>DDX_Control</B> call to the <CODE>CContainerDlg</CODE>’s implementation of <CODE>DoDataExchange</CODE>:</P>

<PRE><CODE>DDX_Control(pDX, IDC_CIRC2CTRL1, m_circ2ctl);
</CODE></PRE>



<H2><A NAME="_core_programming_the_activex_control"></A>Programming the ActiveX Control</H2>

<P>At this point, you have inserted the ActiveX control into your dialog template and created a member variable for it. You can now use common C++ syntax to access the properties and methods of the embedded control.</P>

<P>As noted (in <A HREF="#_core_the_wrapper_class_header_.28...h.29_.file">The Wrapper Class Header (.H) File</A>), the header file (.H) for the <CODE>CCirc2</CODE> wrapper class, in this case CIRC2.H, contains a list of member functions that you can use to get and set any exposed property value. Member functions for exposed methods are also available.</P>

<P>A common place to modify the control’s properties is in the <CODE>OnInitDialog</CODE> member function of the main dialog class. This function is called just before the dialog box appears and is used to initialize its contents, including any of its controls.</P>

<P>The following code example uses the <CODE>m_circ2ctl</CODE> member variable to modify the Caption and CircleShape properties of the embedded Circ2 control:</P>

<PRE><CODE>BOOL CContainerDlg::OnInitDialog()
{
   CDialog::OnInitDialog();

   // Add "About..." menu item to system menu.

   // IDM_ABOUTBOX must be in the system command range.
   ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX);
   ASSERT(IDM_ABOUTBOX &lt; 0xF000);

   CMenu* pSysMenu = GetSystemMenu(FALSE);
   CString strAboutMenu;
   strAboutMenu.LoadString(IDS_ABOUTBOX);
   if (!strAboutMenu.IsEmpty())
   {
      pSysMenu-&gt;AppendMenu(MF_SEPARATOR);
      pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
   }
   
   m_circ2ctl.SetCaption(_T("Circ 2 Control"));
   if( !m_circ2ctl.GetCircleShape())
      m_circ2ctl.SetCircleShape(TRUE);
      
   return TRUE;  // return TRUE  unless you set the focus to a control
}
</CODE></PRE>
</font>
</BODY>
</HTML>

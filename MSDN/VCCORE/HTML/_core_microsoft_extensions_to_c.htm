<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Extensions to C</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_microsoft_extensions_to_c"></A>Microsoft Extensions to C</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P>The following are Microsoft extensions to the ANSI C standard:</P>

<H2>Keywords</H2>

<P>The keywords __based, __cdecl, __declspec, __except, __fastcall, __finally, __leave, __stdcall, and __try are Microsoft-specific.</P>

<H2>Casts</H2>

<P>The Microsoft compiler supports the following two non-ANSI casts:

<UL type=disc>
	<LI>Use of non-ANSI casts to produce l-values:
<PRE><CODE>char *p;
(( int * ) p )++;</CODE></PRE>

<P class=tl>The preceding example could be rewritten to conform with the ANSI C standard as follows:</P>
<PRE><CODE>p = ( char * )(( int * )p + 1 );</CODE></PRE>
</LI>

	<LI>Non-ANSI casting of a function pointer to a data pointer:
<PRE><CODE>int ( * pfunc ) (); 
int *pdata;
pdata = ( int * ) pfunc;</CODE></PRE>

<P class=tl>To perform the same cast while maintaining ANSI compatibility, you must cast the function pointer to an <CODE>int</CODE> before casting it to a data pointer:</P>
<PRE><CODE>pdata = ( int * ) (int) pfunc;</CODE></PRE>
</LI>
</UL>

<H2>Variable-Length Argument Lists</H2>

<P>The Microsoft compiler supports use of a function declarator that specifies a variable number of arguments, followed by a function definition that provides a type instead:</P>

<PRE><CODE>void myfunc( int x, ... );
void myfunc( int x, char * c )
{ }</CODE></PRE>

<H2>Single-Line Comments</H2>

<P>The Microsoft C compiler supports single-line comments, which are introduced with two forward slash (//) characters:</P>

<PRE><CODE>// This is a single-line comment.</CODE></PRE>

<H2>Scope</H2>

<P>The Microsoft C compiler supports the following scope-related features:

<UL type=disc>
	<LI>Redefinitions of extern items as static:
<PRE><CODE>extern int clip();
static int clip()
{}</CODE></PRE>
</LI>

	<LI>Use of benign typedef redefinitions within the same scope:
<PRE><CODE>typedef int INT;
typedef int INT;</CODE></PRE>
</LI>

	<LI>Function declarators have file scope:
<PRE><CODE>void func1()
{
    extern int func2( double );
}
void main( void )
{
    func2( 4 );    //  /Ze passes 4 as type double
}                  //  /Za passes 4 as type int</CODE></PRE>
</LI>

	<LI>Use of block-scope variables initialized with nonconstant expressions:
<PRE><CODE>int clip( int );
int bar( int );
void main( void )
{
    int array[2] = { clip( 2 ), bar( 4 ) };
}
int clip( int x )
{
    return x;
}
int bar( int x )
{
    return x;
}</CODE></PRE>
</LI>
</UL>

<H2>Data Declarations and Definitions</H2>

<P>The Microsoft C compiler supports the following data declaration and definition features:

<UL type=disc>
	<LI>Mixed character and string constants in an initializer:
<PRE><CODE>char arr[5] = {'a', 'b', "cde"};</CODE></PRE>
</LI>

	<LI>Bit fields with base types other than <B>unsigned int</B> or <B>signed int</B>.<BR><BR></LI>

	<LI>Declarators without either a storage class or a type:
<PRE><CODE>x;
void main( void )
{
    x = 1;
}</CODE></PRE>
</LI>

	<LI>Unsized arrays as the last field in structures and unions:
<PRE><CODE>struct zero
{
    char *c;
    int zarray[];
};</CODE></PRE>
</LI>

	<LI>Unnamed (anonymous) structures:
<PRE><CODE>struct
{
    int i;
    char *s;
};</CODE></PRE>
</LI>

	<LI>Unnamed (anonymous) unions:
<PRE><CODE>union
{
    int i;
    float fl;
};</CODE></PRE>

<UL type=disc>
	<LI>Unnamed members:</LI>
</UL>

<PRE><CODE>struct s
{
unsigned int flag : 1;
unsigned int : 31;
}</CODE></PRE>
</LI>
</UL>

<H2>Intrinsic Floating-Point Functions</H2>

<P>The Microsoft compiler supports inline generation of the <B>x86 Specific —&gt;</B> atan, atan2, cos, exp, log, log10, sin, sqrt, and tan functions <B>END x86 Specific</B> when the Generate Intrinsic Functions (/Oi) option is specified. For C, ANSI conformance is lost when these intrinsics are used, because they do not set the errno variable.</P>
</font>
</BODY>
</HTML>

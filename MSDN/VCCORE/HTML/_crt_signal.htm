<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>signal</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_signal"></A><SUP></SUP>signal</H1>

<P>Sets interrupt signal handling.</P>

<P><B>void</B> <B>(</B> <B>*signal(</B> <B>int</B> <I>sig</I><B>,</B> <B>void</B> <B>(__cdecl</B> <B>*</B><I>func</I><B>)</B> <B>(</B> <B>int</B> <I>sig</I> [<B>,</B> <B>int</B> <I>subcode</I> ] <B>))</B> <B>)</B> <B>(</B> <B>int</B> <I>sig</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=59%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>signal</B></TD>
<TD width=26%>&lt;signal.h&gt;</TD>
<TD width=59%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>signal</B> returns the previous value of <I>func</I> associated with the given signal. For example, if the previous value of <I>func</I> was <B>SIG_IGN</B>, the return value is also <B>SIG_IGN</B>. A return value of <B>SIG_ERR</B> indicates an error, in which case <B>errno</B> is set to <B>EINVAL</B>.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>sig</I></P>

<P class=indent>Signal value</P>

<P class=dt><I>func</I></P>

<P class=indent>Function to be executed</P>

<P class=dt><I>subcode</I></P>

<P class=indent>Optional subcode to the signal number</P>

<P class=label><B>Remarks</B></P>

<P>The <B>signal</B> function allows a process to choose one of several ways to handle an interrupt signal from the operating system. The <I>sig</I> argument is the interrupt to which <B>signal</B> responds; it must be one of the following manifest constants, defined in SIGNAL.H.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B><I>sig</I> Value</B></TD>
<TD class=label width=81%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGABRT</B></TD>
<TD width=81%>Abnormal termination</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGFPE</B></TD>
<TD width=81%>Floating-point error</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGILL</B></TD>
<TD width=81%>Illegal instruction</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGINT</B></TD>
<TD width=81%>CTRL+C signal</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGSEGV</B></TD>
<TD width=81%>Illegal storage access</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>SIGTERM</B></TD>
<TD width=81%>Termination request</TD>
</TR>
</TABLE><BR>

<P>By default, <B>signal</B> terminates the calling program with exit code 3, regardless of the value of <I>sig</I>.</P>

<P><B><B>Note</B></B>  <B>SIGINT</B> is not supported for any Win32 application including Windows NT and Windows 95. When a CTRL+C interrupt occurs, Win32 operating systems generate a new thread to specifically handle that interrupt. This can cause a single-thread application such as UNIX, to become multithreaded, resulting in unexpected behavior. </P>

<P>The <I>func</I> argument is an address to a signal handler that you write, or one of the manifest constants <B>SIG_DFL</B> or <B>SIG_IGN</B>, also defined in SIGNAL.H. If <I>func</I> is a function, it is installed as the signal handler for the given signal. The signal handler’s prototype requires one formal argument, <I>sig</I>, of type <B>int</B>. The operating system provides the actual argument through <I>sig</I> when an interrupt occurs; the argument is the signal that generated the interrupt. Thus you can use the six manifest constants (listed in the preceding table) inside your signal handler to determine which interrupt occurred and take appropriate action. For example, you can call <B>signal</B> twice to assign the same handler to two different signals, then test the <I>sig</I> argument inside the handler to take different actions based on the signal received.</P>

<P>If you are testing for floating-point exceptions (<B>SIGFPE</B>), <I>func</I> points to a function that takes an optional second argument that is one of several manifest constants defined in FLOAT.H of the form <B>FPE_</B><I>xxx</I>. When a <B>SIGFPE</B> signal occurs, you can test the value of the second argument to determine the type of floating-point exception and then take appropriate action. This argument and its possible values are Microsoft extensions.</P>

<P>For floating-point exceptions, the value of <I>func</I> is not reset upon receiving the signal. To recover from floating-point exceptions, use <A HREF="_crt_setjmp.htm">setjmp</A> with <A HREF="_crt_longjmp.htm">longjmp</A>. If the function returns, the calling process resumes execution with the floating-point state of the process left undefined.</P>

<P>If the signal handler returns, the calling process resumes execution immediately following the point at which it received the interrupt signal. This is true regardless of the type of signal or operating mode.</P>

<P>Before the specified function is executed, the value of <I>func</I> is set to <B>SIG_DFL</B>. The next interrupt signal is treated as described for <B>SIG_DFL</B>, unless an intervening call to <B>signal</B> specifies otherwise. This feature lets you reset signals in the called function.</P>

<P>Because signal-handler routines are usually called asynchronously when an interrupt occurs, your signal-handler function may get control when a run-time operation is incomplete and in an unknown state. The list below summarizes restrictions that determine which functions you can use in your signal-handler routine.

<UL type=disc>
	<LI>Do not issue low-level or STDIO.H I/O routines (such as <B>printf</B> and <B>fread</B>).<BR><BR></LI>

	<LI>Do not call heap routines or any routine that uses the heap routines (such as <B>malloc</B>, <B>_strdup</B>, and <B>_putenv</B>). See <A HREF="_crt_malloc.htm">malloc</A> for more information. <BR><BR></LI>

	<LI>Do not use any function that generates a system call (e.g., <B>_getcwd</B>, <B>time</B>).<BR><BR></LI>

	<LI>Do not use <B>longjmp</B> unless the interrupt is caused by a floating-point exception (i.e., <I>sig</I> is <B>SIGFPE</B>). In this case, first reinitialize the floating-point package with a call to <B>_fpreset</B>.<BR><BR></LI>

	<LI>Do not use any overlay routines.</LI>
</UL>

<P>A program must contain floating-point code if it is to trap the <B>SIGFPE</B> exception with the function. If your program does not have floating-point code and requires the run-time library’s signal-handling code, simply declare a volatile double and initialize it to zero:</P>

<PRE><CODE>volatile double d = 0.0f; 
</CODE></PRE>

<P>The <B>SIGILL</B>, <B>SIGSEGV</B>, and <B>SIGTERM</B> signals are not generated under Windows NT. They are included for ANSI compatibility. Thus you can set signal handlers for these signals with <B>signal</B>, and you can also explicitly generate these signals by calling <A HREF="_crt_raise.htm">raise</A>.</P>

<P>Signal settings are not preserved in spawned processes created by calls to <B>_exec</B> or <B>_spawn</B> functions. The signal settings are reset to the default in the new process.</P>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt__exec.2c_._wexec_functions.htm">_exec Functions</A>, <A HREF="_crt_exit.2c_._exit.htm">exit</A>, <A HREF="_crt__fpreset.htm">_fpreset</A>, <A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn Functions</A></P>
</font>
</BODY>
</HTML>

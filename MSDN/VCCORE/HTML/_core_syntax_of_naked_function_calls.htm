<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Syntax of Naked Function Calls</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_syntax_of_naked_function_calls"></A>Syntax of Naked Function Calls</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_calling_conventions.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_calling_conventions_tasks.htm">How Do I</A></P>

<P>Because the <B>naked</B> attribute is not a type modifier, naked functions use the extended attribute syntax. For example, the following code defines a function with the <B>naked</B> attribute:</P>

<PRE><CODE>__declspec( naked ) int func( formal_parameters )
{
    // Function body
}
</CODE></PRE>

<P>Or, alternatively:</P>

<PRE><CODE>#define Naked   __declspec( naked )
Naked int func( formal_parameters )
{
    // Function body
}
</CODE></PRE>

<P>The <B>naked</B> modifier affects only the nature of the compiler’s code generation for the function’s prolog and epilog sequences. It does not affect the code that is generated for calling such functions. Thus, the <B>naked</B> attribute is not considered part of the function’s type. As such, function pointers cannot have the <B>naked</B> attribute. Furthermore, the <B>naked</B> attribute has no meaning when applied to a data definition. Any attempt to apply it to a data definition will generate a compiler error. For example, the following code samples will generate errors:</P>

<PRE><CODE>__declspec( naked ) int i;  // Error--naked attribute not permitted on
                            // data declarations.

extern __declspec( naked ) int i;   // Error--naked attribute not
                                    // permitted on data declarations.
</CODE></PRE>

<P>The <B>naked</B> attribute is relevant only to the definition of the function. Thus it cannot be specified on the function’s prototype. The following declaration will generate a compiler error:</P>

<PRE><CODE>__declspec( naked ) int func();  // Error--naked attribute not permitted
                                 // on function declarations.
</CODE></PRE>

<P>The compiler provides a new symbolic argument for use in the inline assembler block of function prolog code. This symbol, <B>__LOCAL_SIZE</B>, is used to allocate space for local variables on the stack frame in your custom prolog code. This constant contains a value determined by the compiler, and it represents the number of bytes of local variables.</P>

<P><B>__LOCAL_SIZE</B> includes all user-defined local variables as well as compiler-generated temporary variables. <B>__LOCAL_SIZE</B> may be used as an immediate operand or in an expression. For example:</P>

<PRE><CODE>mov     eax, __LOCAL_SIZE           /* Immediate operand */
mov     eax, __LOCAL_SIZE + 4       /* Expression */
mov     eax, [ebp - __LOCAL_SIZE]   /* Expression */
</CODE></PRE>
</font>
</BODY>
</HTML>

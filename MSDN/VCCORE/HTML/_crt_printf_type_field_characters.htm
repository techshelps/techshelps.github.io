<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>printf Type Field Characters</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_printf_type_field_characters"></A><SUP></SUP>printf Type Field Characters</H1>

<P>The <I>type</I> character is the only required format field ; it appears after any optional format fields. The <I>type</I> character determines whether the associated argument is interpreted as a character, string, or number. The types <B>C</B> and <B>S</B>, and the behavior of&nbsp; <B>c</B> and <B>s</B> with <B>printf</B> functions, are Microsoft extensions and are not ANSI-compatible. </P>

<P class=label><B><A NAME="_crt_table_r..3"></A>Table R.3&nbsp;&nbsp;&nbsp;printf Type Field Characters</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Character</B></TD>
<TD class=label width=21%><B>Type</B></TD>
<TD class=label width=63%><B>Output Format</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>c</B></TD>
<TD width=21%><B>int</B> or <B>wint_t</B></TD>
<TD width=63%>When used with <B>printf</B> functions, specifies a single-byte character; when used with <B>wprintf</B> functions, specifies a wide character.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>C</B></TD>
<TD width=21%><B>int</B> or <B>wint_t</B></TD>
<TD width=63%>When used with <B>printf</B> functions, specifies a wide character; when used with <B>wprintf</B> functions, specifies a single-byte character.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>d</B></TD>
<TD width=21%><B>int</B></TD>
<TD width=63%>Signed decimal integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>i</B></TD>
<TD width=21%><B>int</B> </TD>
<TD width=63%>Signed decimal integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>o</B></TD>
<TD width=21%><B>int</B> </TD>
<TD width=63%>Unsigned octal integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>u</B></TD>
<TD width=21%><B>int</B> </TD>
<TD width=63%>Unsigned decimal integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>x</B></TD>
<TD width=21%><B>int</B></TD>
<TD width=63%>Unsigned hexadecimal integer, using “abcdef.”</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>X</B></TD>
<TD width=21%><B>int</B></TD>
<TD width=63%>Unsigned hexadecimal integer, using “ABCDEF.”</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>e</B> </TD>
<TD width=21%><B>double</B></TD>
<TD width=63%>Signed value having the form [ – ]<I>d</I><B>.</B><I>dddd</I> <B>e</B> [<I>sign</I>]<I>ddd</I> where <I>d</I> is a single decimal digit, <I>dddd</I> is one or more decimal digits, <I>ddd</I> is exactly three decimal digits, and <I>sign</I> is + or –.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>E</B></TD>
<TD width=21%><B>double</B></TD>
<TD width=63%>Identical to the <B>e</B> format except that <B>E</B> rather than <B>e</B> introduces the exponent.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>f</B></TD>
<TD width=21%><B>double</B></TD>
<TD width=63%>Signed value having the form [ – ]<I>dddd</I><B>.</B><I>dddd</I>, where <I>dddd</I> is one or more decimal digits. The number of digits before the decimal point depends on the magnitude of the number, and the number of digits after the decimal point depends on the requested precision.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>g</B></TD>
<TD width=21%><B>double</B></TD>
<TD width=63%>Signed value printed in <B>f</B> or <B>e</B> format, whichever is more compact for the given value and precision. The <B>e</B> format is used only when the exponent of the value is less than –4 or greater than or equal to the precision argument. Trailing zeros are truncated, and the decimal point appears only if one or more digits follow it.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>G</B></TD>
<TD width=21%><B>double</B></TD>
<TD width=63%>Identical to the <B>g</B> format, except that <B>E</B>, rather than <B>e</B>, introduces the exponent (where appropriate).</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>n</B> </TD>
<TD width=21%>Pointer to integer </TD>
<TD width=63%>Number of characters successfully written so far to the stream or buffer; this value is stored in the integer whose address is given as the argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>p</B></TD>
<TD width=21%>Pointer to <B>void</B></TD>
<TD width=63%>Prints the address pointed to by the argument in the form <I>xxxx</I><B>:</B><I>yyyy</I> where <I>xxxx</I> is the segment and <I>yyyy</I> is the offset, and the digits <I>x</I> and <I>y</I> are uppercase hexadecimal digits.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>s</B></TD>
<TD width=21%>String </TD>
<TD width=63%>When used with <B>printf</B> functions, specifies a single-byte–character string; when used with <B>wprintf</B> functions, specifies a wide-character string. Characters are printed up to the first null character or until the <I>precision</I> value is reached.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>S</B></TD>
<TD width=21%>String</TD>
<TD width=63%>When used with <B>printf</B> functions, specifies a wide-character string; when used with <B>wprintf</B> functions, specifies a single-byte–character string. Characters are printed up to the first null character or until the <I>precision</I> value is reached.</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scope Resolution Operator:  ::</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_scope_resolution_operator.3a_3a3a"></A><SUP></SUP>Scope Resolution Operator:&nbsp; ::</H1>

<P>In C++, you can tell the compiler to use the global variable rather than the local variable by prefixing the variable with <B>::</B>, the scope resolution operator.</P>

<P>If you have nested local scopes, the scope resolution operator doesn't provide access to variables in the next outermost scope. It provides access to only the global variables.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>// Example of the scope resolution operator
#include &lt;iostream.h&gt;
int amount = 123;      // A global variable
void main()
{
    int amount = 456;    // A local variable
    cout &lt;&lt; ::amount;    // Print the global variable
    cout &lt;&lt; '\n';
    cout &lt;&lt; amount;      // Print the local variable
}</CODE></PRE>

<P>The example has two variables named <CODE>amount</CODE>. The first is global and contains the value 123. The second is local to the main function. The two colons tell the compiler to use the global <CODE>amount</CODE> instead of the local one. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>perror, _wperror</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_perror.2c_._wperror"></A><SUP></SUP>perror, _wperror</H1>

<P>Print an error message.</P>

<P><B>void</B> <B>perror(</B> <B>const</B> <B>char</B> *<I>string</I> <B>);</B></P>

<P><B>void</B> <B>_wperror(</B> <B>const</B> <B>wchar_t</B> *<I>string</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=38%><B>Required Header</B></TD>
<TD class=label width=46%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>perror</B></TD>
<TD width=38%>&lt;stdio.h&gt; or &lt;stdlib.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wperror</B></TD>
<TD width=38%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=46%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>None</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>string</I></P>

<P class=indent>String message to print</P>

<P class=label><B>Remarks</B></P>

<P>The <B>perror</B> function prints an error message to <B>stderr</B>. <B>_wperror</B> is a wide-character version of <B>_perror</B>; the <I>string</I> argument to <B>_wperror</B> is a wide-character string. <B>_wperror</B> and <B>_perror</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tperror</TD>
<TD width=29%>perror</TD>
<TD width=26%>perror</TD>
<TD width=28%>_wperror</TD>
</TR>
</TABLE><BR>

<P><I>string</I> is printed first, followed by a colon, then by the system error message for the last library call that produced the error, and finally by a newline character. If <I>string</I> is a null pointer or a pointer to a null string, <B>perror</B> prints only the system error message.</P>

<P>The error number is stored in the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">errno</A> (defined in ERRNO.H). The system error messages are accessed through the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">_sys_errlist</A>, which is an array of messages ordered by error number. <B>perror</B> prints the appropriate error message using the <B>errno</B> value as an index to <B>_sys_errlist</B>. The value of the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">_sys_nerr</A> is defined as the maximum number of elements in the <B>_sys_errlist</B> array.</P>

<P>For accurate results, call <B>perror</B> immediately after a library routine returns with an error. Otherwise, subsequent calls can overwrite the <B>errno</B> value.</P>

<P>In Windows NT and Windows 95, some <B>errno</B> values listed in ERRNO.H are unused. These values are reserved for use by the UNIX operating system. See <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">_doserrno, errno, _sys_errlist, and _sys_nerr</A> for a listing of <B>errno</B> values used by Windows NT and Windows 95. <B>perror</B> prints an empty string for any <B>errno</B> value not used by these platforms.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* PERROR.C: This program attempts to open a file named
 * NOSUCHF.ILE. Because this file probably doesn't exist,
 * an error message is displayed. The same message is
 * created using perror, strerror, and _strerror.
 */

#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;io.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void main( void )
{
   int  fh;

   if( (fh = _open( "NOSUCHF.ILE", _O_RDONLY )) == -1 )
   {
      /* Three ways to create error message: */
      perror( "perror says open failed" );
      printf( "strerror says open failed: %s\n", strerror( errno ) );
      printf( _strerror( "_strerror says open failed" ) );
   }
   else
   {
      printf( "open succeeded on input file\n" );
      _close( fh );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>perror says open failed: No such file or directory

strerror says open failed: No such file or directory
_strerror says open failed: No such file or directory

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_clearerr.htm">clearerr</A>, <A HREF="_crt_ferror.htm">ferror</A>, <A HREF="_crt_strerror.2c_._strerror.htm">strerror</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>setlocale, _wsetlocale</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_setlocale.2c_._wsetlocale"></A><SUP></SUP>setlocale, _wsetlocale</H1>

<P>Define the locale.</P>

<P><B>char</B> <B>*setlocale(</B> <B>int</B> <I>category</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>locale</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*_wsetlocale(</B> <B>int</B> <I>category</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>locale</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Routine</B></TD>
<TD class=label width=35%><B>Required Header</B></TD>
<TD class=label width=46%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>setlocale</B></TD>
<TD width=35%>&lt;locale.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_wsetlocale</B></TD>
<TD width=35%>&lt;locale.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=46%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>If a valid locale and category are given, the function returns a pointer to the string associated with the specified locale and category. If the locale or category is invalid, the function returns a null pointer and the current locale settings of the program are not changed.</P>

<P>For example, the call</P>

<PRE><CODE>setlocale( LC_ALL, "English" );
</CODE></PRE>

<P>sets all categories, returning only the string <CODE>English_USA.1252</CODE>. If all categories are not explicitly set by a call to <B>setlocale</B>, the function returns a string indicating the current setting of each of the categories, separated by semicolons. If the <I>locale</I> argument is a null pointer, <B>setlocale</B> returns a pointer to the string associated with the <I>category</I> of the program’s locale; the program’s current locale setting is not changed.</P>

<P>The null pointer is a special directive that tells <B>setlocale</B> to query rather than set the international environment. For example, the sequence of calls</P>

<PRE><CODE>// Set all categories and return "English_USA.1252"
setlocale( LC_ALL, "English" );
// Set only the LC_MONETARY category and return "French_France.1252"
setlocale( LC_MONETARY, "French" );
setlocale( LC_ALL, NULL );
</CODE></PRE>

<P>returns </P>

<PRE><CODE>LC_COLLATE=English_USA.1252;
LC_CTYPE=English_USA.1252;
LC_MONETARY=French_France.1252;
LC_NUMERIC=English_USA.1252;
LC_TIME=English_USA.1252
</CODE></PRE>

<P>which is the string associated with the <B>LC_ALL</B> category.</P>

<P>You can use the string pointer returned by <B>setlocale</B> in subsequent calls to restore that part of the program’s locale information, assuming that your program does not alter the pointer or the string. Later calls to <B>setlocale</B> overwrite the string; you can use <A HREF="_crt__strdup.2c_._wcsdup.2c_._mbsdup.htm">_strdup</A> to save a specific locale string.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>category</I></P>

<P class=indent>Category affected by locale</P>

<P class=dt><I>locale</I></P>

<P class=indent>Locale name</P>

<P class=label><B>Remarks</B></P>

<P>Use the <B>setlocale</B> function to set, change, or query some or all of the current program locale information specified by <I>locale</I> and <I>category</I>. “Locale” refers to the locality (country and language) for which you can customize certain aspects of your program. Some locale-dependent categories include the formatting of dates and the display format for monetary values. </P>

<P><B>_wsetlocale</B> is a wide-character version of <B>setlocale</B>; the <I>locale</I> argument and return value of <B>_wsetlocale</B> are wide-character strings. <B>_wsetlocale</B> and <B>setlocale</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tsetlocale</TD>
<TD width=29%>setlocale</TD>
<TD width=26%>setlocale</TD>
<TD width=28%>_wsetlocale</TD>
</TR>
</TABLE><BR>

<P>The <I>category</I> argument specifies the parts of a program’s locale information that are affected. The macros used for <I>category</I> and the parts of the program they affect are as follows:</P>

<P class=dt><B>LC_ALL</B></P>

<P class=indent>All categories, as listed below</P>

<P class=dt><B>LC_COLLATE</B></P>

<P class=indent>The <B>strcoll, _stricoll, wcscoll, _wcsicoll,</B> and <B>strxfrm</B> functions</P>

<P class=dt><B>LC_CTYPE</B></P>

<P class=indent>The character-handling functions (except <B>isdigit</B>, <B>isxdigit</B>, <B>mbstowcs</B>, and <B>mbtowc</B>, which are unaffected)</P>

<P class=dt><B>LC_MONETARY</B></P>

<P class=indent>Monetary-formatting information returned by the <B>localeconv</B> function</P>

<P class=dt><B>LC_NUMERIC</B></P>

<P class=indent>Decimal-point character for the formatted output routines (such as <B>printf</B>), for the data-conversion routines, and for the nonmonetary-formatting information returned by <B>localeconv</B> </P>

<P class=dt><B>LC_TIME</B></P>

<P class=indent>The <B>strftime</B> and <B>wcsftime</B> functions</P>

<P>The <I>locale</I> argument is a pointer to a string that specifies the name of the locale. If <I>locale</I> points to an empty string, the locale is the implementation-defined native environment. A value of “C” specifies the minimal ANSI conforming environment for C translation. The “C” locale assumes that all <B>char</B> data types are 1 byte and that their value is always less than 256. The “C” locale is the only locale supported in Microsoft Visual C++ version 1.0 and earlier versions of Microsoft C/C++. Microsoft Visual C++ supports all the locales listed in Appendix A, <A HREF="_crt_language_and_country_strings.htm">Language and Country Strings</A>. At program startup, the equivalent of the following statement is executed:</P>

<PRE><CODE>setlocale( LC_ALL, "C" );
</CODE></PRE>

<P>The <I>locale</I> argument takes the following form:</P>

<PRE><CODE>locale :: "lang[_country[.code_page]]" 
            | ".code_page"
            | ""
            | NULL
</CODE></PRE>

<P>The set of available languages, countries, and code pages includes all those supported by the Win32 NLS API. The set of language and country codes supported by <B>setlocale</B> is listed in Appendix A, <A HREF="_crt_language_and_country_strings.htm">Language and Country Strings</A>.</P>

<P>If <I>locale</I> is a null pointer, <B>setlocale</B> queries, rather than sets, the international environment, and returns a pointer to the string associated with the specified <I>category</I>. The program’s current locale setting is not changed. For example,</P>

<PRE><CODE>setlocale( LC_ALL, NULL );
</CODE></PRE>

<P>returns the string associated with <I>category</I>. </P>

<P>The following examples pertain to the <B>LC_ALL</B> category. Either of the strings ".OCP" and ".ACP" can be used in place of a code page number to specify use of the system default OEM code page and system-default ANSI code page, respectively.</P>

<P class=dt><CODE>setlocale( LC_ALL, "" );</CODE></P>

<P class=indent>Sets the locale to the default, which is the system-default ANSI code page obtained from the operating system.</P>

<P class=dt><CODE>setlocale( LC_ALL, ".OCP" );</CODE></P>

<P class=indent>Explicitly sets the locale to the current OEM code page obtained from the operating system.</P>

<P class=dt><CODE>setlocale( LC_ALL, ".ACP" );</CODE></P>

<P class=indent>Sets the locale to the ANSI code page obtained from the operating system.</P>

<P class=dt><CODE>setlocale( LC_ALL, "[lang_ctry]" );</CODE></P>

<P class=indent>Sets the locale to the language and country indicated, using the default code page obtained from the host operating system.</P>

<P class=dt><CODE>setlocale( LC_ALL, "[lang_ctry.cp]" );</CODE></P>

<P class=indent>Sets the locale to the language, country, and code page indicated in the [<I>lang_ctry.cp</I>] string. You can use various combinations of language, country, and code page. For example:</P>

<PRE><CODE>setlocale( LC_ALL, "French_Canada.1252" );
// Set code page to French Canada ANSI default
setlocale( LC_ALL, "French_Canada.ACP" );
// Set code page to French Canada OEM default
setlocale( LC_ALL, "French_Canada.OCP" );</CODE></PRE>

<P class=dt><CODE>setlocale( LC_ALL, "[lang]" );</CODE></P>

<P class=indent>Sets the locale to the country indicated, using the default country for the language specified, and the system-default ANSI code page for that country as obtained from the host operating system. For example, the following two calls to <B>setlocale</B> are functionally equivalent:</P>

<PRE><CODE>setlocale( LC_ALL, "English" );
setlocale( LC_ALL, "English_United States.1252" );</CODE></PRE>

<P class=dt><CODE>setlocale( LC_ALL, "[.code_page]" );</CODE></P>

<P class=indent>Sets the code page to the value indicated, using the default country and language (as defined by the host operating system) for the specified code page. </P>

<P>The category must be either <B>LC_ALL</B> or <B>LC_CTYPE</B> to effect a change of code page. For example, if the default country and language of the host operating system are “United States” and “English,” the following two calls to <B>setlocale</B> are functionally equivalent:</P>

<PRE><CODE>setlocale( LC_ALL, ".1252" );
setlocale( LC_ALL, "English_United States.1252");
</CODE></PRE>

<P>For more information see the<A HREF="_predir_setlocale.htm"> setlocale pragma</A> in <I>Preprocessor Reference</I>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* LOCALE.C: Sets the current locale to "Germany" using the
 * setlocale function and demonstrates its effect on the strftime
 * function.
 */

#include &lt;stdio.h&gt;
#include &lt;locale.h&gt;
#include &lt;time.h&gt;

void main(void)
{
       time_t ltime;
       struct tm *thetime;
       unsigned char str[100];

       setlocale(LC_ALL, "German");
       time (&amp;ltime);
       thetime = gmtime(&amp;ltime);

       /* %#x is the long date representation, appropriate to
        * the current locale
        */
       if (!strftime((char *)str, 100, "%#x", 
                     (const struct tm *)thetime))
               printf("strftime failed!\n");
       else
               printf("In German locale, strftime returns '%s'\n", 
                      str);

       /* Set the locale back to the default environment */
       setlocale(LC_ALL, "C");
       time (&amp;ltime);
       thetime = gmtime(&amp;ltime);

       if (!strftime((char *)str, 100, "%#x", 
                     (const struct tm *)thetime))
               printf("strftime failed!\n");
       else
               printf("In 'C' locale, strftime returns '%s'\n", 
                      str);
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>In German locale, strftime returns 'Donnerstag, 22. April 1993'
In 'C' locale, strftime returns 'Thursday, April 22, 1993'

</CODE></PRE>

<P><A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_localeconv.htm">localeconv</A>, <A HREF="_crt__mbclen.2c_.mblen.htm">mblen</A>, <A HREF="_crt_strlen.2c_.wcslen.2c_._mbslen.2c_._mbstrlen.htm">_mbstrlen</A>, <A HREF="_crt_mbstowcs.htm">mbstowcs</A>, <A HREF="_crt_mbtowc.htm">mbtowc</A>, <A HREF="_crt_strcoll_functions.htm">strcoll Functions</A>, <A HREF="_crt_strftime.2c_.wcsftime.htm">strftime</A>, <A HREF="_crt_strxfrm.2c_.wcsxfrm.htm">strxfrm</A>, <A HREF="_crt_wcstombs.htm">wcstombs</A>, <A HREF="_crt_wctomb.htm">wctomb</A></P>
</font>
</BODY>
</HTML>

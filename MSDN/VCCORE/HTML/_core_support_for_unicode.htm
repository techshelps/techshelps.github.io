<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Support for Unicode</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_support_for_unicode"></A><SUP></SUP>Support for Unicode</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_unicode_programming_tasks.htm">Unicode Tasks</A>  |&nbsp; <A HREF="_core_multibyte_character_set_.28.mbcs.29_.tasks.htm">Multibyte Character Set (MBCS) Tasks</A></P>

<P>A “wide character” is a two-byte multilingual character code. Any character used in modern computing worldwide, including technical symbols and special publishing characters, can be represented according to the Unicode specification as a wide character. Because each wide character is always represented in a fixed size of 16 bits, using wide characters simplifies programming with international character sets.</P>

<P>A wide-character string is represented as a <B>wchar_t[]</B> array and is pointed to by a <B>wchar_t*</B> pointer. Any ASCII character can be represented as a wide character by prefixing the letter L to the character. For example, L'\0' is the terminating wide (16-bit) <B>NULL</B> character. Similarly, any ASCII string literal can be represented as a wide-character string literal by prefixing the letter L to the ASCII literal (L"Hello").</P>

<P>Generally, wide characters take more space in memory than multibyte characters but are faster to process. In addition, only one locale can be represented at a time in multibyte encoding, whereas all character sets in the world are represented simultaneously by the Unicode representation.</P>

<P>The MFC framework is Unicode-enabled throughout, except for the database classes. (ODBC is not Unicode-enabled.) MFC accomplishes Unicode enabling by using “portable” macros throughout, as shown in the following table:</P>

<P class=label><B>Portable Data Types in MFC</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=58%><B>Non-portable data type(s)</B></TD>
<TD class=label width=42%><B>Replaced by this macro</B></TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>char</B></TD>
<TD width=42%>_<B>TCHAR</B></TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>char*</B>, <B>LPSTR (Win32 data type)</B></TD>
<TD width=42%><B>LPTSTR</B></TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>const char*, LPCSTR (Win32 data type)</B></TD>
<TD width=42%><B>LPCTSTR</B></TD>
</TR>
</TABLE><BR>

<P>Class <B>CString</B> uses <B>_TCHAR</B> as its base and provides constructors and operators for easy conversions. Most string operations for Unicode can be written by using the same logic used for handling the Windows ANSI character set, except that the basic unit of operation is a 16-bit character instead of an 8-bit byte. Unlike working with multibyte character sets (MBCS), you do not have to (and should not) treat a Unicode character as if it were two distinct bytes. </P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_support_for_using_wmain.htm">Support for Using wmain</A></P>
</font>
</BODY>
</HTML>

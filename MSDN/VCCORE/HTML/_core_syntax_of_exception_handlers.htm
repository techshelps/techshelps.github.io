<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Syntax of Exception Handlers</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_syntax_of_exception_handlers"></A><SUP></SUP>Syntax of Exception Handlers</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>The structure for C exception handlers is:</P>

<P class=dt><B>__try {</B><BR>
</P>

<P class=indent><I>statement-block-1</I><BR>
<B>}</B><BR>
<B>__except (</B> <I>filter</I> <B>) {</B><BR>
&nbsp;&nbsp;&nbsp; <I>statement-block-2</I><BR>
<B>}</B></P>

<P>The statements in <I>statement-block-1</I> are executed unconditionally. During execution of <I>statement-block-1</I>, the exception handler defined by <I>filter</I> and <I>statement-block-2</I> is active (it becomes the current exception handler).</P>

<P>If an exception occurs during execution of <I>statement-block-1</I>, including any function called directly or indirectly, the system gives control to the current exception handler — unless a handler with higher precedence takes control.</P>

<P>For example, in the following code, the first exception is handled by the outer block, because it is outside the scope of the inner <B>__try</B> block. The second exception is handled by the inner block, which takes precedence.</P>

<PRE><CODE>__try {
    float x, y=0;
    x = 5 / y;        // This exception handled by outer block
    __try {
        x = 0;
        y = 27 / x;   // This exception handled by inner block
    }
    __except( GetExceptionCode() == STATUS_FLOATING_DIVIDE_BY_ZERO) {
        printf("handled by inner block");
    }
}
__except( GetExceptionCode() == STATUS_FLOATING_DIVIDE_BY_ZERO ) {
    printf( "handled by outer block" );
}
</CODE></PRE>

<P>This code shows an example of nested exception handlers. Note that calling a function that has a <B>try</B>-<B>except</B> block has the same effect as nesting; the <B>try-except</B> block in the most recently called function takes precedence.</P>

<P>When an exception handler takes control, the system first evaluates the <I>filter</I>. One of the powerful features of structured exception handling is that although <I>filter</I> is evaluated out of normal program sequence (often during execution of another function), <I>filter</I> can refer to local variables within its scope just as any C expression. After <I>filter</I> is evaluated, the next action depends on the value returned.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=57%><B>Value of filter</B></TD>
<TD class=label width=43%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=57%>EXCEPTION_CONTINUE_SEARCH (0)</TD>
<TD width=43%>Passes control to exception handler with next highest precedence. The handler has declined to recognize the exception.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>EXCEPTION_CONTINUE_EXECUTION( –1)</TD>
<TD width=43%>Dismisses exception, and continues execution at the location where the exception was raised.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>EXCEPTION_EXECUTE_HANDLER (1)</TD>
<TD width=43%>Handles exception by executing statements in <I>statement-block-2</I>. Execution then falls through to the end of this statement block.</TD>
</TR>
</TABLE><BR>

<P>If the value of <I>filter</I> is EXCEPTION_EXECUTE_HANDLER, execution does not resume where the exception was raised, but falls through to the end of <I>statement-block-2</I> after it is executed. All blocks and function calls nested inside <I>statement-block-1</I> are terminated before <I>statement-block-2</I> is entered.</P>
</font>
</BODY>
</HTML>

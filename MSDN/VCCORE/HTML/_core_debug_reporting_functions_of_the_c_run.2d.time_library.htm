<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debug Reporting Functions of the C Run-Time Library</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_debug_reporting_functions_of_the_c_run.2d.time_library"></A>Debug Reporting Functions of the C Run-Time Library</H1>

<P>The run-time library includes three new debug reporting functions that provide extensive flexibility for reporting warnings and errors during execution of a debug build of an application. The main reporting function is <B>_CrtDbgReport</B>. Two configuration functions, <B>_CrtSetReportMode</B> and <B>_CrtSetReportFile</B>, can be used at any point to specify the destinations to which different kinds of reports will be sent. </P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=31%><B>Function</B></TD>
<TD class=label width=69%><B>Destination</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_crt__crtdbgreport.htm">_CrtDbgReport</A></TD>
<TD width=69%>Reports from within an application. Set the report destination(s) by specifying its category (<B>_CRT_WARN</B>, <B>_CRT_ERROR</B>, and <B>_CRT_ASSERT</B>). The report may also include a message string, a source file name and line number, and one or more arguments to be formatted into the message string.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>_</B><A HREF="_crt__crtsetreportmode.htm">_CrtSetReportMode</A></TD>
<TD width=69%>Specifies the general destination(s) to which a given category of report output should be sent. The three categories of report output are <B>_CRT_WARN</B>, <B>_CRT_ERROR</B>, and <B>_CRT_ASSERT</B>. Possible destinations include the debugger, a message window, and/or a file or stream.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_crt__crtsetreportfile.htm">_CrtSetReportFile</A></TD>
<TD width=69%>Identifies a specific file or stream when <B>_CrtSetReportMode</B> has specified that a given category of report output will be directed to a file or stream. </TD>
</TR>
</TABLE><BR>

<P>For detailed information about the syntax and usage of these functions, see the <A HREF="_crt_debug_functions.htm">Debug Routines</A>.</P>

<P>Debug reports can be assigned to three different categories, depending on the urgency of the messages they contain:</P>

<P class=dt><B>_CRT_WARN</B></P>

<P class=indent>Warnings, messages, and information not needing immediate attention.</P>

<P class=dt><B>_CRT_ERROR</B></P>

<P class=indent>Errors, unrecoverable problems, and information needing immediate attention.</P>

<P class=dt><B>_CRT_ASSERT</B></P>

<P class=indent>Assertion failure (an asserted expression evaluated as FALSE).</P>

<P>A different destination can be specified for each of these report categories. Usually one destination is sufficient for a category, but each category can be sent to more than one destination. Up to three of the following bit-flags can be combined in the <I>reportMode</I> argument passed to <B>_CrtReportMode</B> to specify the destination(s) for a given report category:</P>

<P class=dt><B>_CRTDBG_MODE_DEBUG</B></P>

<P class=indent>Reports are sent to the debugger or debug monitor using the Win32 <B>OutputDebugString</B> API.</P>

<P class=dt><B>_CRTDBG_MODE_FILE</B></P>

<P class=indent>Reports are sent to a file (including the <B>stderr</B> and <B>stdout</B> streams) using the Win32 <B>WriteFile</B> API.</P>

<P class=dt><B>_CRTDBG_MODE_WNDW</B></P>

<P class=indent>Reports are sent to a message window using the Win32 <B>MessageBox</B> API.</P>

<P>To turn off a given category of report, pass <B>_CrtReportMode</B> a <I>reportMode</I> value of zero.</P>

<P>By default, errors and assertion failures are directed to a message window, because they generally signal serious problems that you want to know about right away. Warnings from Windows applications are sent to the debugger, and warnings from console applications are directed to <B>stderr</B>. You only need to use the <B>_CrtSetReport...</B> functions when you want to change these destinations. For example, the following code causes assertion failures to be sent both to a message window and to <B>stderr</B>:</P>

<PRE><CODE>_CrtSetReportMode( _CRT_ASSERT, _CRTDBG_MODE_FILE | 
                   _CRTDBG_MODE_WNDW );
_CrtSetReportFile( _CRT_ASSERT, _CRTDBG_FILE_STDERR );
</CODE></PRE>

<P>To send a debug report, you use <B>_CrtDbgReport</B> and control the destination by specifying the category of the report. If you need more flexibility, you can write your own reporting function and hook it into the C run-time library reporting mechanism using <A HREF="_crt__crtsetreporthook.htm">_CrtSetReportHook</A>.</P>

<P>While messages that go to a file or the debugger are generally single lines that can include a file name and line number, the message window contains considerably more information. It identifies the error and the program more fully, along with message text, and can also display a file name and line number. Assert message windows contain additional information particular to asserts.</P>

<P>All message windows display <B>Abort</B>/<B>Retry</B>/<B>Ignore</B> buttons. Clicking <B>Abort</B> causes the program to stop execution immediately, <B>Ignore</B> causes execution to continue, and <B>Retry</B><I> </I>invokes the debugger, provided that <B>Just-in-time debugging</B> is enabled. Clicking <B>Ignore</B> when an error condition exists often results in undefined behavior.</P>
</font>
</BODY>
</HTML>

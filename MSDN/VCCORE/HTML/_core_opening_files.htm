<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Opening Files</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_opening_files"></A>Opening Files</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_file_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_file.2d.handling_tasks.htm">How Do I</A></P>

<P>In MFC, the most common way to open a file is a two-stage process.</P>

<P class=label><B><A NAME="_core_to_open_a_file"></A>To open a file</B>

<OL>
	<LI>Create the file object without specifying a path or permission flags.
<P class=tl>You usually create a file object by declaring a <B>CFile</B> variable on the stack frame. </P></LI>

	<LI>Call the <B>Open</B> member function for the file object, supplying a path and permission flags.
<P class=tl>The return value for <B>Open</B> will be nonzero if the file was opened successfully or 0 if the specified file could not be opened. The <B>Open</B> member function is prototyped as follows:</P>
<PRE><CODE>virtual BOOL Open( LPCTSTR lpszFileName, UINT nOpenFlags, CFileException* pError = NULL );
</CODE></PRE>

<P class=tl>The open flags specify which permissions, such as read-only, you want for the file. The possible flag values are defined as enumerated constants within the <B>CFile</B> class, so they are qualified with “<B>CFile::</B>,” as in <B>CFile::modeRead</B>. Use the <B>CFile::modeCreate</B> flag if you want to create the file.</P></LI>
</OL>

<P>The following example shows how to create a new file with read/write permission (replacing any previous file with the same path):</P>

<PRE><CODE>char* pszFileName = "c:\\test\\myfile.dat";
CFile myFile;
CFileException fileException;

if ( !myFile.Open( pszFileName, CFile::modeCreate |   
          CFile::modeReadWrite ), &amp;fileException )
{
    TRACE( "Can't open file %s, error = %u\n",
       pszFileName, fileException.m_cause );
}
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;This example creates and opens a file. If there are problems, the <B>Open</B> call can return a <B>CFileException</B> object in its last parameter, as shown here. The <B>TRACE</B> macro prints both the file name and a code indicating the reason for failure. You can call the <B>AfxThrowFileException</B> function if you require more detailed error reporting.</P>
</font>
</BODY>
</HTML>

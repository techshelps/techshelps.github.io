<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source: Programmatically Configuring an ODBC Data Source</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Enroll tutorial">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_data_source.3a_.programmatically_configuring_an_odbc_data_source"></A>Data Source: Programmatically Configuring an ODBC Data Source</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_odbc_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_odbc_database_sample_list.htm">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>This article explains how you can configure ODBC (Open Database Connectivity) data source names programmatically. This gives you flexibility to access data without forcing the user to explicitly use the ODBC Administrator or other programs to specify the names of data sources.</P>

<P>Typically, a user runs the ODBC Administrator program to create a data source, provided that the associated database management system (DBMS) supports this operation. </P>

<P>When creating a Microsoft Access ODBC data source through the ODBC Administrator program, you are given two choices: you can select an existing .MDB file or you can create a new .MDB file. There is no programmatic way of creating the .MDB file from your MFC ODBC application. Therefore, if your application requires that you place data into a Microsoft Access data source (.MDB file), you most likely will want to have an empty .MDB file that you can use or copy whenever you need it. </P>

<P>However, many DBMSs allow programmatic data source creation. Some data sources, such as FoxPro, maintain a directory specification for databases. That is, a directory is the data source and each table within the data source is stored in a separate file (in the case of dBASE or FoxPro, each table is a .DBF file). Drivers for other ODBC databases, such as Microsoft Access and SQL Server, require that some specific criteria be satisfied before a data source can be established. For example, when using the SQL Server ODBC driver you need to have established a SQL Server. </P>



<H2><A NAME="_core_sqlconfigdatasource_example"></A>SQLConfigDataSource Example</H2>

<P>The following example uses the <B>::SQLConfigDataSource</B> ODBC API function to create a new Excel data source called “New Excel Data Source”:</P>

<PRE><CODE>SQLConfigDataSource(NULL,ODBC_ADD_DSN, "Excel Files (*.xls)", 
                   "DSN=New Excel Data Source\0" 
                   "Description=New Excel Data Source\0" 
                   "FileType=Excel\0" 
                   "DataDirectory=C:\\EXCELDIR\0" 
                   "MaxScanRows=20\0");
</CODE></PRE>

<P>Note that the data source is actually a directory (C:\EXCELDIR); this directory must exist. The Excel driver uses directories as its data sources, and files as the individual tables (one table per .XLS file).</P>

<P>For additional information on creating tables, see the article <A HREF="_core_data_source.3a_.programmatically_creating_a_table_in_an_odbc_data_source.htm">Data Source: Programmatically Creating a Table in an ODBC Data Source</A>. </P>

<P>The information below discusses the parameters that need to be passed to the <B>::SQLConfigDataSource</B> ODBC API function. To use <B>::SQLConfigDataSource</B>, you must include the ODBCINST.H header file and use the ODBCINST.LIB import library. Also, ODBCCP32.DLL must be in the path at run time (or ODBCINST.DLL for 16 bit).</P>

<P>You can create an ODBC data source name using the ODBC Administrator program or a similar utility. However, sometimes it is desirable to create a data source name directly from your application to obtain access without requiring the user to run a separate utility.</P>

<P>The ODBC Administrator (typically installed in the Windows Control Panel) creates a new data source by putting entries in the Windows registry (or, for 16 bit, in the ODBC.INI file). The ODBC Driver Manager queries this file to obtain the required information about the data source. It’s important to know what information needs to be placed in the registry because you'll need to supply it with the call to <B>::SQLConfigDataSource</B>.</P>

<P>Although this information could be written directly to the registry without using <B>::SQLConfigDataSource</B>, any application that does so is relying on the current technique that the Driver Manager uses to maintain its data. If a later revision to the ODBC Driver Manager implements record keeping about data sources in a different way, then any application that uses this technique would be broken. It is generally advisable to use an API function when one is provided. For example, your code is portable from 16 bit to 32 bit if you use the <B>::SQLConfigDataSource</B> function, as the function will correctly write to the ODBC.INI file or to the registry.</P>

<H2><A NAME="_core_sqlconfigdatasource_parameters"></A>SQLConfigDataSource Parameters</H2>

<P>The following explains the parameters of the <B>::SQLConfigDataSource</B> function. Much of the information is taken from the ODBC API <I>Programmer's Reference</I> supplied with Visual C++ version 1.5 and later.</P>

<H3><A NAME="_core_function_prototype"></A>Function Prototype</H3>

<P><B>BOOL</B> <B>SQLConfigDataSource(HWND</B> <I>hwndParent</I><B>,UINT</B> <I>fRequest</I><B>,</B> <B>LPCSTR</B> <I>lpszDriver</I><B>,</B> <B>LPCSTR</B> <I>lpszAttributes</I><B>);</B></P>

<H3><A NAME="_core_parameters_and_usage"></A>Parameters and Usage</H3>

<P><I>hwndParent</I>&nbsp;&nbsp;&nbsp;The window specified as the owner of any dialog boxes that either the ODBC Driver Manager or the specific ODBC driver creates to obtain additional information from the user about the new data source. If the <I>lpszAttributes</I> parameter doesn’t supply enough information, a dialog box appears. The <I>hwndParent</I> parameter may be <B>NULL</B>; see the ODBC <I>Programmer’s Reference</I> for details.</P>

<P><I>lpszDriver</I>&nbsp;&nbsp;&nbsp;The driver description. This is the name presented to users rather than the physical driver name (the DLL). </P>

<P><I>lpszAttributes</I>&nbsp;&nbsp;&nbsp;List of attributes in the form “keyname=value”. These strings are separated by null terminators with two consecutive null terminators at the end of the list. These attributes are primarily default driver-specific entries, which go into the registry for the new data source. One important key that is not mentioned in the ODBC API reference for this function is “DSN” (“data source name”), which specifies the name of the new data source. The rest of the entries are specific to the driver for the new data source. Often it is not necessary to supply all of the entries because the driver can prompt the user with dialog boxes for the new values. (Set <I>hwndParent</I> to <B>NULL</B> to cause this.) You might want to explicitly supply default values so that the user is not prompted.</P>

<P class=label><B>To determine the description of a driver for the lpszDriver parameter using the ODBC Administrator program</B>

<OL>
	<LI>Run the ODBC Administrator program. <BR><BR></LI>

	<LI>Choose <B>Add</B>. </LI>
</OL>

<P>This will give you a list of installed drivers and their descriptions. It is this description that you use as the <I>lpszDriver</I> parameter. Note that you use the entire description — for example, “Excel Files (*.xls)” — including the file extension and parentheses if they exist in the description.</P>

<P>As an alternative, you can examine the registry (or, for 16 bit, the file ODBCINST.INI), which contains a list of all driver entries and descriptions under the registry key “ODBC Drivers” (or the section [ODBC Drivers] in ODBCINST.INI).</P>

<P>One way to find the keynames and values for the <I>lpszAttributes</I> parameter is to examine the ODBC.INI file for an already configured data source (perhaps one that has been configured by the ODBC Administrator program):</P>

<P class=label><B>To find keynames and values for the lpszAttributes parameter</B>

<OL>
	<LI>Run the Windows registry editor (or, for 16 bit, open the ODBC.INI file). <BR><BR></LI>

	<LI>Find the ODBC data sources information using one of the following.
<UL type=disc>
	<LI>For 32 bit, find the key HKEY_CURRENT_USER\Software\ODBC\ODBC.INI\ODBC Data Sources in the left-hand pane. 
<P class=tl>The right-hand pane lists entries of the form: “pub: REG_SZ:<I>&lt;data source name&gt;</I>”, where <I>&lt;data source name&gt;</I> is a data source that has already been configured with the desired settings for the driver you intend to use. Select the data source you want, for example, SQL Server. The items following the string “pub:” are, in order, the keyname and value to use in your <I>lpszAttributes</I> parameter.</P></LI>

	<LI>For 16 bit, find the section in the ODBC.INI file marked by [<I>&lt;data source name&gt;</I>]. 
<P class=tl>The lines following this line will be of the form “keyname=value”. These are exactly the entries to use in your <I>lpszAttributes</I> parameter.</P></LI>
</UL>
</LI>
</OL>

<P>You might also want to examine the documentation for the specific driver you are going to use. You can find useful information in the online help for the driver, which you can access by running the ODBC Administrator. These help files are usually placed in the WINDOWS\SYSTEM directory for Windows NT, Windows 3.1, or Windows 95.</P>

<P class=label><B>To obtain online help for your ODBC driver</B>

<OL>
	<LI>Run ODBC Administrator.<BR><BR></LI>

	<LI>Choose <B>Add</B>.<BR><BR></LI>

	<LI>Select the driver name.<BR><BR></LI>

	<LI>Choose <B>OK</B>. </LI>
</OL>

<P>When ODBC Administrator displays the information for creating a new data source for that particular driver, select Help. This opens the help file for that particular driver, which generally contains important information concerning the use of the driver.</P>

<P>For related information, see the Installer DLL Function Reference in the ODBC SDK on the MSDN Library CD.</P>
</font>
</BODY>
</HTML>

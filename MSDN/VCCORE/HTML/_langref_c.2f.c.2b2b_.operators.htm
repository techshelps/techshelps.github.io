<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C/C++ Operators</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_c.2f.c.2b2b_.operators"></A>C/C++ Operators</H1>

<P>The following table lists C and C++ operators by category. Click any operator shown for more information on it.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD width=31%><B>Scope Resolution:</B></TD>
<TD width=34%><B>Multiplicative:</B></TD>
<TD width=35%><B>Logical:</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_scope_resolution_operator.3a_3a3a.htm">Scope resolution:&nbsp; ::</A></TD>
<TD width=34%><A HREF="_langref_multiplication_operator.3a_2a.htm">Multiplication:&nbsp; *</A></TD>
<TD width=35%><A HREF="_langref_logical.2d.and_operator.3a_2626.htm">Logical-AND:&nbsp; &amp;&amp;</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>Postfix:</B></TD>
<TD width=34%><A HREF="_langref_division_operator.3a_2f.htm">Division:&nbsp; /</A></TD>
<TD width=35%><A HREF="_langref_logical.2d.or_operator.3a_7c7c.htm">Logical-OR:&nbsp; ||</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_array_element_operator.3a_5b_5d.htm">Array element:&nbsp; [ ]</A></TD>
<TD width=34%><A HREF="_langref_modulus_operator.3a_25.htm">Modulus:&nbsp; %</A></TD>
<TD width=35%><B>Assignment:</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_function_call_operator.3a_28_29.htm">Function call:&nbsp; ( )</A></TD>
<TD width=34%><B>Additive:</B></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Assignment:&nbsp; =</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_type_cast_operator.3a_28.type.29.htm">Type cast:&nbsp; (type)</A></TD>
<TD width=34%><A HREF="_langref_addition_operator.3a_2b.htm">Addition:&nbsp; +</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Addition:&nbsp; +=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_structure.2c_.union.2c_.and_class_member_operators.3a_.._.and_.2d3e.htm">Member selection:&nbsp; . or –&gt;</A></TD>
<TD width=34%><A HREF="_langref_subtraction_operator.3a_2d.htm">Subtraction:&nbsp; –</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Subtraction:&nbsp; –=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_postfix_increment_and_decrement_operators.3a_2b2b2c_2d2d.htm">Postfix increment:&nbsp; ++</A></TD>
<TD width=34%><B>Shift:</B></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Multiplication:&nbsp; *=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_postfix_increment_and_decrement_operators.3a_2b2b2c_2d2d.htm">Postfix decrement:&nbsp; ––</A></TD>
<TD width=34%><A HREF="_langref_bitwise_left_shift_and_right_shift_operators.3a_3c3c2c_3e3e.htm">Left shift:&nbsp; &lt;&lt;</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Division:&nbsp; /=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>Unary:</B></TD>
<TD width=34%><A HREF="_langref_bitwise_left_shift_and_right_shift_operators.3a_3c3c2c_3e3e.htm">Right shift:&nbsp; &gt;&gt;</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Modulus:&nbsp; %=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_indirection_operator.3a_2a.htm">Indirection:&nbsp; *</A></TD>
<TD width=34%><B>Relational &amp; Equality:</B></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Left shift assignment:&nbsp; &lt;&lt;=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_address.2d.of_operator.3a_26.htm">Address of:&nbsp; &amp;</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Less than:&nbsp; &lt;</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Right shift assignment:&nbsp; &gt;&gt;=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_logical.2d.not_operator.3a_21.htm">Logical-NOT:&nbsp; !</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Less than or equal to:&nbsp; &lt;=</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Bitwise-AND:&nbsp; &amp;=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_one.27.s_complement_operator.3a_7e.htm">One's complement:&nbsp; ~</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Greater than:&nbsp; &gt;</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Bitwise-exclusive-OR:&nbsp; ^=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_prefix_increment_and_decrement_operators.3a_2b2b2c_2d2d.htm">Prefix increment:&nbsp; ++</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Greater than or equal to:&nbsp; &gt;=</A></TD>
<TD width=35%><A HREF="_langref_assignment_operators.htm">Bitwise-inclusive-OR:&nbsp; |=</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_prefix_increment_and_decrement_operators.3a_2b2b2c_2d2d.htm">Prefix decrement:&nbsp; ––</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Equal:&nbsp; ==</A></TD>
<TD width=35%><B>Conditional:</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_sizeof_operator.htm">sizeof</A></TD>
<TD width=34%><A HREF="_langref_relational_and_equality_operators.htm">Not equal:&nbsp; !=</A></TD>
<TD width=35%><A HREF="_langref_conditional_operator.3a_3f_3a.htm">Conditional:&nbsp; ? :</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_new_operator.htm">new</A></TD>
<TD width=34%><B>Bitwise:</B></TD>
<TD width=35%><B>Pointer to Member:</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_delete_operator.htm">delete</A></TD>
<TD width=34%><A HREF="_langref_bitwise.2d.and_operator.3a_26.htm">Bitwise-AND:&nbsp; &amp;</A></TD>
<TD width=35%><A HREF="_langref_pointer_to_member_operators.3a_..2a_.and_.2d3e2a.htm">Pointer to member:&nbsp; .* or –&gt;</A></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>Comma:</B></TD>
<TD width=34%><A HREF="_langref_bitwise.2d.exclusive.2d.or_operator.3a_5e.htm">Bitwise-exclusive-OR:&nbsp; ^</A></TD>
<TD width=35%><B>Reference:</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="_langref_comma_operator.3a_2c.htm">Comma:&nbsp; ,</A></TD>
<TD width=34%><A HREF="_langref_bitwise.2d.inclusive.2d.or_operator.3a_7c.htm">Bitwise-inclusive-OR:&nbsp; |</A></TD>
<TD width=35%><A HREF="_langref_reference_operator.3a_26.htm">Reference:&nbsp; &amp;</A></TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

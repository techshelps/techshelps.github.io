<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_heapwalk</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__heapwalk"></A><SUP></SUP>_heapwalk</H1>

<P>Traverses the heap and returns information about the next entry.</P>

<P><B>int</B> <B>_heapwalk(</B> <B>_HEAPINFO</B> <B>*</B><I>entryinfo</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=27%><B>Optional Headers</B></TD>
<TD class=label width=29%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_heapwalk</B></TD>
<TD width=27%>&lt;malloc.h&gt;</TD>
<TD width=27%>&lt;errno.h&gt;</TD>
<TD width=29%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_heapwalk</B> returns one of the following integer manifest constants defined in MALLOC.H:</P>

<P class=dt><B>_HEAPBADBEGIN</B></P>

<P class=indent>Initial header information invalid or not found</P>

<P class=dt><B>_HEAPBADNODE</B></P>

<P class=indent>Heap damaged or bad node found</P>

<P class=dt><B>_HEAPBADPTR</B></P>

<P class=indent><B>_pentry</B> field of <B>_HEAPINFO</B> structure does not contain valid pointer into heap</P>

<P class=dt><B>_HEAPEND</B></P>

<P class=indent>End of heap reached successfully</P>

<P class=dt><B>_HEAPEMPTY</B></P>

<P class=indent>Heap not initialized</P>

<P class=dt><B>_HEAPOK</B></P>

<P class=indent>No errors so far; <B>_HEAPINFO</B> structure contains information about next entry.</P>

<P>In addition, if an error occurs, <B>_heapwalk</B> sets <B>errno</B> to <B>ENOSYS</B>.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>entryinfo</I></P>

<P class=indent>Buffer to contain heap information</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_heapwalk</B> function helps debug heap-related problems in programs. The function walks through the heap, traversing one entry per call, and returns a pointer to a structure of type <B>_HEAPINFO</B> that contains information about the next heap entry. The <B>_HEAPINFO</B> type, defined in MALLOC.H, contains the following elements:</P>

<P class=dt><B>int *_pentry</B></P>

<P class=indent>Heap entry pointer</P>

<P class=dt><B>size_t _size</B></P>

<P class=indent>Size of heap entry</P>

<P class=dt><B>int _useflag</B></P>

<P class=indent>Flag that indicates whether heap entry is in use</P>

<P>A call to <B>_heapwalk</B> that returns <B>_HEAPOK</B> stores the size of the entry in the <B>_size</B> field and sets the <B>_useflag</B> field to either <B>_FREEENTRY</B> or <B>_USEDENTRY</B> (both are constants defined in MALLOC.H). To obtain this information about the first entry in the heap, pass <B>_heapwalk</B> a pointer to a <B>_HEAPINFO</B> structure whose <B>_pentry</B> member is <B>NULL</B>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Beginning with Visual C++ Version 4.0, the underlying heap structure was moved to the C run-time libraries to support the new debugging features. As a result, the only Win32 platform that is supported by <B>_heapwalk</B> is Windows NT. When it is called by any other Win32 platform, _<B>heapwalk</B> returns <B>_HEAPEND</B> and sets <B>errno</B> to <B>ENOSYS</B>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* HEAPWALK.C: This program "walks" the heap, starting
 * at the beginning (_pentry = NULL). It prints out each
 * heap entry's use, location, and size. It also prints
 * out information about the overall state of the heap as
 * soon as _heapwalk returns a value other than _HEAPOK.
 */

#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

void heapdump( void );

void main( void )
{
   char *buffer;

   heapdump();
   if( (buffer = malloc( 59 )) != NULL )
   {
      heapdump();
      free( buffer );
   }
   heapdump();
}

void heapdump( void )
{
   _HEAPINFO hinfo;
   int heapstatus;
   hinfo._pentry = NULL;
   while( ( heapstatus = _heapwalk( &amp;hinfo ) ) == _HEAPOK )
   { printf( "%6s block at %Fp of size %4.4X\n",
        ( hinfo._useflag == _USEDENTRY ? "USED" : "FREE" ),
          hinfo._pentry, hinfo._size );
   }

   switch( heapstatus )
   {
   case _HEAPEMPTY:
      printf( "OK - empty heap\n" );
      break;
   case _HEAPEND:
      printf( "OK - end of heap\n" );
      break;
   case _HEAPBADPTR:
      printf( "ERROR - bad pointer to heap\n" );
      break;
   case _HEAPBADBEGIN:
      printf( "ERROR - bad start of heap\n" );
      break;
   case _HEAPBADNODE:
      printf( "ERROR - bad node in heap\n" );
      break;
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>  USED block at 002C0004 of size 0014
  USED block at 002C001C of size 0054
  USED block at 002C0074 of size 0024
  USED block at 002C009C of size 0010
  USED block at 002C00B0 of size 0018
  USED block at 002C00CC of size 000C
  USED block at 002C00DC of size 001C
  USED block at 002C00FC of size 0010
  USED block at 002C0110 of size 0014
  USED block at 002C0128 of size 0010
  USED block at 002C013C of size 0028
  USED block at 002C0168 of size 0088
  USED block at 002C01F4 of size 001C
  USED block at 002C0214 of size 0014
  USED block at 002C022C of size 0010
  USED block at 002C0240 of size 0014
  USED block at 002C0258 of size 0010
  USED block at 002C026C of size 000C
  USED block at 002C027C of size 0010
  USED block at 002C0290 of size 0014
  USED block at 002C02A8 of size 0010
  USED block at 002C02BC of size 0010
  USED block at 002C02D0 of size 1000
  FREE block at 002C12D4 of size ED2C
OK - end of heap

</CODE></PRE>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__heapadd.htm">_heapadd</A>, <A HREF="_crt__heapchk.htm">_heapchk</A>,<A HREF="_crt__heapmin.htm"> _heapmin</A>, <A HREF="_crt__heapset.htm">_heapset</A></P>
</font>
</BODY>
</HTML>

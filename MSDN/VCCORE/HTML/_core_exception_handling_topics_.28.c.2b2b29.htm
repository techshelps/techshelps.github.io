<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Handling Topics (C++)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exception_handling_topics_.28.c.2b2b29"></A>Exception Handling Topics (C++)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>The C++ language provides built-in support for handling anomalous situations, known as “exceptions,” which may occur during the execution of your program. With C++ exception handling, your program can communicate unexpected events to a higher execution context that is better able to recover from such abnormal events. These exceptions are handled by code that is outside the normal flow of control.</P>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>In these articles, the terms “structured exception handling” and “structured exception” (or “C exception”) refer exclusively to the Win32 structured exception handling mechanism provided by Windows 95 and Windows NT. All other references to exception handling (or “C++ exception”) refer to the C++ exception handling mechanism.</P>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>MFC now uses C++ exception handling. The older MFC exception macros, if you still use them, evaluate to C++ exception keywords. See <A HREF="_core_exceptions.3a_.changes_to_exception_macros_in_version_3..0.htm">Exceptions: Changes to Exception Macros in Version 3.0</A>.</P>

<P>Unlike the Win32 structured exception handling mechanism, the language itself provides support for C++ exception handling. These articles describe the Microsoft implementation of C++ exception handling, which is based on the ISO WG21/ANSI X3J16 working papers towards the evolving standard for C++.</P>

<P>For C++ programs, you should use C++ exception handling rather than structured exception handling. While structured exception handling works in C++ programs, you can ensure that your code is more portable by using C++ exception handling. The C++ exception handling mechanism is more flexible, in that it can handle exceptions of any type. C exceptions are always of type <B>unsigned int</B>.</P>

<H2>Using C++ Exceptions</H2>

<P>In C++, the process of raising an exception is called “throwing” an exception. A designated exception handler then “catches” the thrown exception. </P>

<P>To enable C++ exception handling in your code, open the Project Settings dialog box, select the C/C++ tab, select C++ Language in the Category box, and select Enable Exception Handling; or use the /GX compiler option. The default is /GX-, which disables exception handling unwind semantics.</P>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>As of version 4.0, the Microsoft Foundation Class Library (MFC), which is included with Visual C++, uses the C++ exception handling mechanism. Although you are encouraged to use C++ exception handling in new code, MFC version 4.0 and later retains the macros from previous versions of MFC so that old code will not be broken. The macros and the new mechanism can be combined as well. For information on mixing macros and C++ exception handling and on converting old code to use the new mechanism, see the articles <A HREF="_core_exceptions.3a_.using_mfc_macros_and_c.2b2b_.exceptions.htm">Exceptions: Macros and C++ Exceptions</A>, and <A HREF="_core_exceptions.3a_.converting_from_mfc_exception_macros.htm">Exceptions: Converting from MFC Exception Macros</A>.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_exception_handling_syntax.htm">Exception handling syntax</A><BR><BR></LI>

	<LI><A HREF="_core_exception_handling.3a_.default_synchronous_exception_model.htm">Exception handling: default synchronous exception model</A><BR><BR></LI>

	<LI><A HREF="_core_type.2d.safe_exception_handling.htm">Type-safe exception handling</A><BR><BR></LI>

	<LI><A HREF="_core_c.2b2b_.exception_examples.htm">C++ exception examples</A><BR><BR></LI>

	<LI><A HREF="_core_unhandled_exceptions.htm">Unhandled exceptions</A><BR><BR></LI>

	<LI><A HREF="_core_order_of_handlers.htm">Order of handlers</A><BR><BR></LI>

	<LI><A HREF="_core_mixing_c_and_c.2b2b_.exceptions.htm">Mixing C and C++ exceptions</A><BR><BR></LI>

	<LI><A HREF="_core_exception_handling_overhead.htm">Exception handling overhead</A></LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Function Templates</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_working_with_function_templates"></A><SUP></SUP>Working with Function Templates</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>With function templates, you can specify a set of functions that are based on the same code, but act on different types or classes. For example:</P>

<PRE><CODE>template &lt;class T&gt; void MySwap( T&amp; a, T&amp; b )
{
    T c( a );
    a = b; b = c;
}
</CODE></PRE>

<P>This code defines a family of functions that swap their parameters. From this template you can generate functions that will swap not only <B>int</B> and <B>long</B> types, but also user-defined types. <CODE>MySwap</CODE> will even swap classes if the class’s copy constructor and assignment operator are properly defined.</P>

<P>In addition, the function template will prevent you from swapping objects of different types, because the compiler knows the types of the <CODE>a</CODE> and <CODE>b</CODE> parameters at compile time.</P>

<P>You call a function template function as you would a normal function; no special syntax is needed. For example:</P>

<PRE><CODE>int i, j;
char k;
MySwap( i, j );     //OK
MySwap( i, k );     //Error, different types.
</CODE></PRE>

<P>Explicit specification of the template arguments for a function template is allowed. For example:</P>

<PRE><CODE>template&lt;class T&gt; void f(T) {...}
void g(char j) {
   f&lt;int&gt;(j);   //generate the specialization f(int)
}
</CODE></PRE>

<P>When the template argument is explicitly specified, normal implicit conversions are done to convert the function argument to the type of the corresponding function template parameters. In the above example, the compiler will convert (<CODE>char j</CODE>) to type <CODE>int</CODE>.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_function_template_instantiation.htm">Function template instantiation</A><BR><BR></LI>

	<LI><A HREF="_core_explicit_specialization_of_function_templates.htm">Function template overrides</A></LI>
</UL>
</font>
</BODY>
</HTML>

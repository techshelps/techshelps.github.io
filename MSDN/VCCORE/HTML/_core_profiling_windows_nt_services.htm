<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Profiling Windows NT Services</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_perf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_profiling_windows_nt_services"></A>Profiling Windows NT Services</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_profiling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_procedures_for_performance_tuning.htm">How Do I</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Profiling is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>This topic provides information about profiling Windows NT service processes.</P>

<P>Use the service sample from the directory samples\sdk\winnt\service (after you install this SDK sample), and follow these steps to get timing information for its service functions:</P>

<P class=label><B>To profile Windows NT Services</B>

<OL>
	<LI>Set necessary environment variables using the <B>System </B>control panel. You will find system environment variables like ComSpec, windir, and Path.<BR><BR></LI>

	<LI>Add two new environment variables:
<PRE><CODE>__ProfilePBI=&lt;full path of your PBI file&gt;
__ProfilePBO=&lt;full path of your PBO file&gt;
</CODE></PRE>

<P class=tl>Note the exact spelling and two leading underscores. If these are not correctly set, you will get messages from PROFILE.DLL warning you that these settings cannot be found.</P>
<P class=tl>In this example, if your compiler is on your D drive, these variables would be:</P>
<PRE><CODE>d:\...\samples\sdk\winnt\service\simple.pbi
d:\...\samples\sdk\winnt\service\simple.pbo
</CODE></PRE>
</LI>

	<LI>Copy the profiler DLL, PROFILE.DLL, from the Program Files\Microsoft Visual Studio\VC98\bin subdirectory to either the directory where the service .EXE resides or to one of the directories listed in the PATH environment variable.<BR><BR></LI>

	<LI>Build the sample, SIMPLE.EXE. Instruct the linker to create a .MAP file.<BR><BR></LI>

	<LI>Run PREP to create SIMPLE._XE, which has been modified for profiling:
<PRE><CODE>prep /om /ft /sf _worker_thread simple.exe
</CODE></PRE>

<P class=tl>This command also sets up the code to follow the call stack from the <CODE>worker_thread()</CODE> routine. By default, the profiler profiles calls from the main thread, so servicing requests from a secondary thread without specifying the /sf option will produce incomplete results. In the sample, this second thread is created by calling <B>CreateThread( )</B> to service the requests. If the main thread was servicing the requests, you wouldn't need to use the /sf option.</P></LI>

	<LI>Copy SIMPLE._XE to SIMPLE.EXE. This overwrites the original executable file with the modified version, which has the profile hooks added to the code.<BR><BR></LI>

	<LI>Start the service by using the Services program in the <B>Control Panel</B>, and run the client application. Stop the service using the <B>Control Panel</B>. You can get the timing information by executing the following commands from the command prompt:
<PRE><CODE>prep /m simple
plist simple
</CODE></PRE>
</LI>
</OL>
</font>
</BODY>
</HTML>

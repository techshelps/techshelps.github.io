<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Breakpoints Outside the Current Scope</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_setting_breakpoints_outside_the_current_scope"></A>Setting Breakpoints Outside the Current Scope</H1>

<P>If you want to set a breakpoint on a location or variable that is not within the current scope, there are two ways to do it:

<UL type=disc>
	<LI>Use the <A HREF="#_core_using_the_advanced_breakpoint_dialog_box">Advanced Breakpoint</A> dialog box.<BR><BR></LI>

	<LI>Specify the breakpoint directly on the <B>Location</B> or <B>Data</B> tab of the <B>Breakpoints</B> dialog box, using <A HREF="#_core_using_advanced_breakpoint_syntax">advanced breakpoint syntax</A>.</LI>
</UL>

<P>Both methods achieve the same result, but the <B>Advanced Breakpoint</B> dialog box handles many details for you and does not require you to learn any special syntax.</P>



<H2><A NAME="_core_using_the_advanced_breakpoint_dialog_box"></A>Using the Advanced Breakpoint Dialog Box</H2>

<P class=label><B>To break on a location outside the current scope</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Location</B> tab on the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>Select the drop-down arrow next to the <B>Break At</B> text box.<BR><BR></LI>

	<LI>From the menu that appears, click <B>Advanced</B>.
<P class=tl>The <B>Advanced Breakpoint</B> dialog box appears.</P></LI>

	<LI>In the <B>Location</B> text box, type the location (source line number, memory address, or function name) where you want to set the breakpoint.<BR><BR></LI>

	<LI>Under <B>Context</B>, type any necessary information in the <B>Function</B>, <B>Source File</B>, and <B>Executable File</B> text boxes. (It is not necessary to fill in all fields — only the ones you need to qualify the context. 
<P class=tl>For example, to set a breakpoint at a line number in another source file, specify only the source file. To set a breakpoint in a dynamic-link library (DLL), you must specify the function, source file, and DLL. The DLL filename goes in the <B>Executable File</B> text box.)</P></LI>

	<LI>Click <B>OK</B> to close the <B>Advanced Breakpoint</B> dialog box.
<P class=tl>The information that you specified appears in the <B>Break At</B> text box in the <B>Breakpoints</B> dialog box.</P></LI>

	<LI>In the <B>Breakpoints</B> dialog box, click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_using_advanced_breakpoint_syntax"></A>Using Advanced Breakpoint Syntax</H2>

<P>To use advanced breakpoints syntax, you must qualify a breakpoint location or variable with a special context operator, as follows:

<UL type=disc>
	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] } <I>location</I><BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] } <I>variable_name</I><BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] } <I>expression</I></LI>
</UL>

<P>The context operator is a pair of braces ({}) containing two commas, and some combination of function name, source filename, and executable filename. If you omit either <I>function </I>or <I>exe</I>, the two commas cannot be omitted. The following syntax, for example, is illegal:</P>

<P>{<CODE>File.c, File.exe</CODE>} <CODE>.143</CODE> — Bad</P>

<P>If you omit both <I>source </I>and <I>exe</I>, however, you can omit the commas. The following syntax is legal:</P>

<P>{<CODE>Fun</CODE>} <CODE>.143</CODE></P>

<P>The <I>location</I> can be any line number, function, or memory address at which you can set a breakpoint. For example,

<UL type=disc>
	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; .100 — A line number (this may not work with some languages)<BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; @100 — A line number (this works for all languages)<BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; Traverse — A function name<BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; CMyWindow::OnCall — A function name<BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; 00406030 — A memory address (decimal)<BR><BR></LI>

	<LI>{[<I>function</I>]<I>,</I>[<I>source</I>]<I>,</I>[<I>exe</I>] }&nbsp; 0x1002A — A memory address (hexadecimal)<BR><BR></LI>

	<LI>{<I>function</I>,[source],[exe] } Label — A statement label. The context must include <I>function</I> since Label is visible in the function’s scope.</LI>
</UL>

<P>If the <I>source</I> or <I>exe</I> filename includes a comma, an embedded space, or a brace, you must use quotation marks around the filename so that the context parser can properly recognize the string. Single quotation marks are considered to be part of a Windows NT/Windows 95 filename, so you must use double quotation marks. For example,</P>

<P>{<I>,</I><CODE>”</CODE>a long, long, name.c<CODE>”</CODE><I>,</I> } .143</P>

<P>Another form of advanced breakpoints syntax uses the exclamation point instead of the context operator:</P>

<P><I>source</I>!.<I>location</I></P>

<P>This form of advanced breakpoint syntax does not include a function name or .EXE specifier. If you use this syntax to specify a filename that contains an exclamation point, you must surround the filename with double quotes:</P>

<P><CODE>“File.!c”!.115</CODE></P>

<P>You can also set data breakpoints. For more information, see <A HREF="_core_setting_breakpoints_when_values_change_or_become_true.htm">Setting Breakpoints When Values Change or Become True</A>.</P>
</font>
</BODY>
</HTML>

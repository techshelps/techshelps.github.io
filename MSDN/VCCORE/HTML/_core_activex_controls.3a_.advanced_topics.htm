<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Advanced Topics</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.ThrowError">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.FireError">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CWnd.3a3a.PreTranslateMessage">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CWnd.3a3a.GetDlgItem">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.advanced_topics"></A>ActiveX Controls: Advanced Topics</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>This article covers advanced topics related to developing ActiveX controls. These include:

<UL type=disc>
	<LI><A HREF="#_core_using_database_classes_in_activex_controls">Using database classes in ActiveX Controls</A><BR><BR></LI>

	<LI><A HREF="#_core_implementing_a_parameterized_property">Implementing a parameterized property</A><BR><BR></LI>

	<LI><A HREF="#_core_handling_errors_in_your_activex_control">Handling errors in your ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="#_core_handling_special_keys_in_your_control">Handling special keys in the control</A><BR><BR></LI>

	<LI><A HREF="#_core_accessing_dialog_controls_that_are_invisible_at_run_time">Accessing dialog controls that are invisible at run time</A></LI>
</UL>



<H2><A NAME="_core_using_database_classes_in_activex_controls"></A>Using Database Classes in ActiveX Controls</H2>

<P>Because the ActiveX control classes are part of the class library, you can apply the same procedures and rules for using database classes in a standard MFC application to developing ActiveX controls that use the MFC database classes.</P>

<P>For a general overview of the MFC database classes, see <A HREF="_core_databases.3a_.overview.htm">Databases: Overview</A>. The article introduces both the MFC ODBC classes and the MFC DAO classes and directs you to more details on either.</P>



<H2><A NAME="_core_implementing_a_parameterized_property"></A>Implementing a Parameterized Property</H2>

<P>A parameterized property (sometimes called a property array) is a method for exposing a homogeneous collection of values as a single property of the control. For example, you can use a parameterized property to expose an array or a dictionary as a property. In Visual Basic, such a property is accessed using array notation:</P>

<PRE><CODE>x = obj.ArrayProp(2, 3)    ' gets element of 2D array
obj.ArrayProp(2, 3) = 7    ' sets element of 2D array
</CODE></PRE>

<P>Use the OLE Automation tab of ClassWizard to implement a parameterized property. ClassWizard implements the property by adding a pair of Get/Set functions that allow the control user to access the property using the above notation or in the standard fashion.</P>

<P>Similar to methods and properties, parameterized properties also have a limit to the number of parameters allowed. In the case of parameterized properties, the limit is 15 parameters (with one parameter reserved for storing the property value).</P>

<P>The following procedure adds a parameterized property, called Array, which can be accessed as a two-dimensional array of integers.</P>

<P class=label><B>To add a parameterized property using ClassWizard</B>

<OL>
	<LI>With your control project open, click <B>ClassWizard</B> on the <B>View</B> menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type <CODE>Array</CODE>.<BR><BR></LI>

	<LI>On the <B>Implementation </B>menu, click <B>Get/Set Methods</B>.<BR><BR></LI>

	<LI>In the <B>Type </B>box, select <B>short </B>for the property’s type.<BR><BR></LI>

	<LI>In the <B>Get Function </B>and <B>Set Function</B> boxes, type unique names for your Get and Set Functions or accept the default names.<BR><BR></LI>

	<LI>Using the <B>Parameter List</B> grid control, add a parameter, called row (type short).<BR><BR></LI>

	<LI>Using the <B>Parameter List</B> grid control, add a second parameter, called column (type short).<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices.<BR><BR></LI>

	<LI>Click <B>OK</B> to close <B>ClassWizard</B>.</LI>
</OL>

<H3>Changes Made by ClassWizard</H3>

<P>When you add a custom property, ClassWizard makes changes to the control class header (.H) and the implementation (.CPP) files.</P>

<P>The following lines are added to the control class .H file:</P>

<PRE><CODE>afx_msg short GetArray(short row, short column);
afx_msg void SetArray(short row, short column, short nNewValue);
</CODE></PRE>

<P>This code declares two functions called <CODE>GetArray</CODE> and <CODE>SetArray</CODE> that allow the user to request a specific row and column when accessing the property.</P>

<P>In addition, ClassWizard adds the following lines to the control dispatch map, located in the control class implementation (.CPP) file:</P>

<PRE><CODE>DISP_PROPERTY_PARAM(CSampleCtrl, "Array", GetArray, SetArray, VT_I2,
       VTS_I2 VTS_I2)
</CODE></PRE>

<P>Finally, the implementations of the <CODE>GetArray</CODE> and <CODE>SetArray</CODE> functions are added to the end of the .CPP file. In most cases, you will modify the SGet function to return the value of the property. The Set function will usually contain code that should execute, either before or after the property changes.</P>

<P>For this property to be useful, you could declare a two-dimensional array member variable in the control class, of type <B>short</B>, to store values for the parameterized property. You could then modify the Get function to return the value stored at the proper row and column, as indicated by the parameters, and modify the Set function to update the value referenced by the row and column parameters.</P>



<H2><A NAME="_core_handling_errors_in_your_activex_control"></A>Handling Errors in Your ActiveX Control</H2>

<P>If error conditions occur in the control, you may need to report the error to the control container. There are two methods for reporting errors, depending on the situation in which the error occurs. If the error occurs within a property’s Get or Set function, or within the implementation of an OLE Automation method, the control should call <A HREF="JavaScript:hhobj_3.Click()">COleControl::ThrowError</A>, which signals the control user that an error has occurred. If the error occurs at any other time, the control should call <A HREF="JavaScript:hhobj_4.Click()">COleControl::FireError</A>, which fires a stock Error event.</P>

<P>To indicate the kind of error that has occurred, the control must pass an error code to <B>ThrowError</B> or <B>FireError</B>. An error code is an OLE status code, which has a 32-bit value. When possible, choose an error code from the standard set of codes defined in the OLECTL.H header file. The following table summarizes these codes.</P>

<P class=label><B>ActiveX Control Error Codes</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=48%><B>Error</B></TD>
<TD class=label width=52%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_ILLEGALFUNCTIONCALL</B></TD>
<TD width=52%>Illegal function call</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_OVERFLOW</B></TD>
<TD width=52%>Overflow</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_OUTOFMEMORY</B></TD>
<TD width=52%>Out of memory</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_DIVISIONBYZERO</B></TD>
<TD width=52%>Division by zero</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_OUTOFSTRINGSPACE</B></TD>
<TD width=52%>Out of string space</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_OUTOFSTACKSPACE</B></TD>
<TD width=52%>Out of stack space</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_BADFILENAMEORNUMBER</B></TD>
<TD width=52%>Bad file name or number</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_FILENOTFOUND</B></TD>
<TD width=52%>File not found</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_BADFILEMODE</B></TD>
<TD width=52%>Bad file mode</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_FILEALREADYOPEN</B></TD>
<TD width=52%>File already open</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_DEVICEIOERROR</B></TD>
<TD width=52%>Device I/O error</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_FILEALREADYEXISTS</B></TD>
<TD width=52%>File already exists</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_BADRECORDLENGTH</B></TD>
<TD width=52%>Bad record length</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_DISKFULL</B></TD>
<TD width=52%>Disk full</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_BADRECORDNUMBER</B></TD>
<TD width=52%>Bad record number</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_BADFILENAME</B></TD>
<TD width=52%>Bad file name</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_TOOMANYFILES</B></TD>
<TD width=52%>Too many files</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_DEVICEUNAVAILABLE</B></TD>
<TD width=52%>Device unavailable</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_PERMISSIONDENIED</B></TD>
<TD width=52%>Permission denied</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_DISKNOTREADY</B></TD>
<TD width=52%>Disk not ready</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_PATHFILEACCESSERROR</B></TD>
<TD width=52%>Path/file access error</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_PATHNOTFOUND</B></TD>
<TD width=52%>Path not found</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDPATTERNSTRING</B></TD>
<TD width=52%>Invalid pattern string</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDUSEOFNULL</B></TD>
<TD width=52%>Invalid use of NULL</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDFILEFORMAT</B></TD>
<TD width=52%>Invalid file format</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDPROPERTYVALUE</B></TD>
<TD width=52%>Invalid property value</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDPROPERTYARRAYINDEX</B></TD>
<TD width=52%>Invalid property array index</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_SETNOTSUPPORTEDATRUNTIME</B></TD>
<TD width=52%>Set not supported at run time</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_SETNOTSUPPORTED</B></TD>
<TD width=52%>Set not supported (read-only property)</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_NEEDPROPERTYARRAYINDEX</B></TD>
<TD width=52%>Need property array index</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_SETNOTPERMITTED</B></TD>
<TD width=52%>Set not permitted</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_GETNOTSUPPORTEDATRUNTIME</B></TD>
<TD width=52%>Get not supported at run time</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_GETNOTSUPPORTED</B></TD>
<TD width=52%>Get not supported (write-only property)</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_PROPERTYNOTFOUND</B></TD>
<TD width=52%>Property not found</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDCLIPBOARDFORMAT</B></TD>
<TD width=52%>Invalid clipboard format</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_INVALIDPICTURE</B></TD>
<TD width=52%>Invalid picture</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_PRINTERERROR</B></TD>
<TD width=52%>Printer error</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_CANTSAVEFILETOTEMP</B></TD>
<TD width=52%>Can't save file to TEMP</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_SEARCHTEXTNOTFOUND</B></TD>
<TD width=52%>Search text not found</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>CTL_E_REPLACEMENTSTOOLONG</B></TD>
<TD width=52%>Replacements too long</TD>
</TR>
</TABLE><BR>

<P>If necessary, use the <B>CUSTOM_CTL_SCODE</B> macro to define a custom error code for a condition that is not covered by one of the standard codes. The parameter for this macro should be an integer between 1000 and 32767, inclusive. For example:</P>

<PRE><CODE>#define MYCTL_E_SPECIALERROR CUSTOM_CTL_SCODE(1000)
</CODE></PRE>

<P>If you are creating an ActiveX control to replace an existing VBX control, define your ActiveX control error codes with the same numeric values the VBX control uses to ensure that the error codes are compatible.</P>



<H2><A NAME="_core_handling_special_keys_in_your_control"></A>Handling Special Keys in Your Control</H2>

<P>In some cases you may want to handle certain keystroke combinations in a special way; for example, insert a new line when the ENTER key is pressed in a multiline text box control or move between a group of edit controls when a directional key ID pressed.</P>

<P>If the base class of your ActiveX control is <B>COleControl</B>, you can override <A HREF="JavaScript:hhobj_5.Click()">CWnd::PreTranslateMessage</A> to handle messages before the container receives them. When using this technique, always return <B>TRUE</B> if you handle the message in your override of <B>PreTranslateMessage</B>.</P>

<P>The following code example demonstrates a possible way of handling any messages related to the directional keys.</P>

<PRE><CODE>BOOL CSampleControl::PreTranslateMessage(LPMSG lpmsg)
{
    BOOL bHandleNow = FALSE;

    switch (lpmsg-&gt;message)
    {
    case WM_KEYDOWN:
        switch (lpmsg-&gt;wParam)
        {
        case VK_UP:
        case VK_DOWN:
        case VK_LEFT:
        case VK_RIGHT:
            bHandleNow = TRUE;
            break;
        }
        if (bHandleNow)
            OnKeyDown(lpmsg-&gt;wParam, LOWORD(lpmsg 
                -&gt;lParam), HIWORD(lpmsg-&gt;lParam));
        break;
    }
    return bHandleNow;
}
</CODE></PRE>

<P>For more information on handling keyboard interfaces for an ActiveX control, see the ActiveX SDK documentation.</P>



<H2><A NAME="_core_accessing_dialog_controls_that_are_invisible_at_run_time"></A>Accessing Dialog Controls That Are Invisible at Run Time</H2>

<P>You can create dialog controls that have no user interface and are invisible at run time. If you add an invisible-at-run-time ActiveX control to a dialog box and use <A HREF="JavaScript:hhobj_6.Click()">CWnd::GetDlgItem</A> to access the control, the control will not work correctly. Instead, you should use one of the following techniques to obtain an object that represents the control:

<UL type=disc>
	<LI>On the Member Variables page of ClassWizard, select the control's ID, and click Add Variable. Enter a member variable name, select "Control" as the Category, and select the control's wrapper class as the Variable type.
<P class=tl>&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></LI>

	<LI>Declare a local variable and subclass as the dialog item. Insert code that resembles the following (<CODE>CMyCtrl</CODE> is the wrapper class, <CODE>IDC_MYCTRL1</CODE> is the control's ID):
<PRE><CODE>CMyCtrl myCtrl;
myCtrl.SubclassDlgItem(IDC_MYCTRL1, this);
// ... use myCtrl ...
myCtrl.UnsubclassWindow();
</CODE></PRE>
</LI>
</UL>
</font>
</BODY>
</HTML>

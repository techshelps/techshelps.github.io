<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strtol, wcstol</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strtol.2c_.wcstol"></A><SUP></SUP>strtol, wcstol</H1>

<P>Convert strings to a long-integer value.</P>

<P><B>long</B> <B>strtol(</B> <B>const</B> <B>char</B> <B>*</B><I>nptr</I><B>,</B> <B>char</B> <B>**</B><I>endptr</I><B>,</B> <B>int</B> <I>base</I> <B>);</B></P>

<P><B>long</B> <B>wcstol(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>nptr</I><B>,</B> <B>wchar_t</B> <B>**</B><I>endptr</I><B>,</B> <B>int</B> <I>base</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=35%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>strtol</B></TD>
<TD width=35%>&lt;stdlib.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>wcstol</B></TD>
<TD width=35%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>strtol</B> returns the value represented in the string <I>nptr</I>, except when the representation would cause an overflow, in which case it returns <B>LONG_MAX</B> or <B>LONG_MIN</B>. <B>strtol</B> returns 0 if no conversion can be performed. <B>wcstol</B> returns values analogously to <B>strtol.</B> For both functions, <B>errno</B> is set to <B>ERANGE</B> if overflow or underflow occurs.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>nptr</I></P>

<P class=indent>Null-terminated string to convert </P>

<P class=dt><I>endptr</I></P>

<P class=indent>Pointer to character that stops scan</P>

<P class=dt><I>base</I></P>

<P class=indent>Number base to use</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strtol</B> function converts <I>nptr</I> to a <B>long</B>. <B>strtol</B> stops reading the string <I>nptr</I> at the first character it cannot recognize as part of a number. This may be the terminating null character, or it may be the first numeric character greater than or equal to <I>base</I>. </P>

<P><B>wcstol</B> is a wide-character version of <B>strtol</B>; its <I>nptr</I> argument is a wide-character string. Otherwise these functions behave identically.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tcstol</TD>
<TD width=29%>strtol</TD>
<TD width=26%>strtol</TD>
<TD width=28%>wcstol</TD>
</TR>
</TABLE><BR>

<P>The current locale’s <B>LC_NUMERIC</B> category setting determines recognition of the radix character in <I>nptr;</I> for more information, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>. If <I>endptr</I> is not <B>NULL</B>, a pointer to the character that stopped the scan is stored at the location pointed to by <I>endptr</I>. If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of <I>nptr</I> is stored at the location pointed to by <I>endptr</I>.</P>

<P><B>strtol</B> expects <I>nptr</I> to point to a string of the following form:</P>

<P>[<I>whitespace</I>] [{<B>+</B> | <B>–</B>}] [<B>0</B> [{ <B>x</B> | <B>X</B> }]] [<I>digits</I>]</P>

<P>A <I>whitespace</I> may consist of space and tab characters, which are ignored; <I>digits</I> are one or more decimal digits. The first character that does not fit this form stops the scan. If <I>base</I> is between 2 and 36, then it is used as the base of the number. If <I>base</I> is 0, the initial characters of the string pointed to by <I>nptr</I> are used to determine the base. If the first character is 0 and the second character is not 'x' or 'X', the string is interpreted as an octal integer; otherwise, it is interpreted as a decimal number. If the first character is '0' and the second character is 'x' or 'X', the string is interpreted as a hexadecimal integer. If the first character is '1' through '9', the string is interpreted as a decimal integer. The letters 'a' through 'z' (or 'A' through 'Z') are assigned the values 10 through 35; only letters whose assigned values are less than <I>base</I> are permitted.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* STRTOD.C: This program uses strtod to convert a
 * string to a double-precision value; strtol to
 * convert a string to long integer values; and strtoul
 * to convert a string to unsigned long-integer values.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char   *string, *stopstring;
   double x;
   long   l;
   int    base;
   unsigned long ul;
   string = "3.1415926This stopped it";
   x = strtod( string, &amp;stopstring );
   printf( "string = %s\n", string );
   printf("   strtod = %f\n", x );
   printf("   Stopped scan at: %s\n\n", stopstring );
   string = "-10110134932This stopped it";
   l = strtol( string, &amp;stopstring, 10 );
   printf( "string = %s", string );
   printf("   strtol = %ld", l );
   printf("   Stopped scan at: %s", stopstring );
   string = "10110134932";
   printf( "string = %s\n", string );
   /* Convert string using base 2, 4, and 8: */
   for( base = 2; base &lt;= 8; base *= 2 )
   {
      /* Convert the string: */
      ul = strtoul( string, &amp;stopstring, base );
      printf( "   strtol = %ld (base %d)\n", ul, base );
      printf( "   Stopped scan at: %s\n", stopstring );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>string = 3.1415926This stopped it
   strtod = 3.141593
   Stopped scan at: This stopped it

string = -10110134932This stopped it   strtol = -2147483647   Stopped scan at: This stopped itstring = 10110134932
   strtol = 45 (base 2)
   Stopped scan at: 34932
   strtol = 4423 (base 4)
   Stopped scan at: 4932
   strtol = 2134108 (base 8)
   Stopped scan at: 932

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A>  |&nbsp; <A HREF="_crt_strtod.2c_.strtol.2c_.strtoul_functions.htm">strtod Functions Overview</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_strtod.2c_.wcstod.htm">strtod</A>, <A HREF="_crt_strtoul.2c_.wcstoul.htm">strtoul</A>, <A HREF="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol.htm">atof</A>, <A HREF="_crt_localeconv.htm">localeconv</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing By Value or By Reference</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_passing_by_value_or_by_reference"></A>Passing By Value or By Reference</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming_tasks.htm">How Do I</A></P>

<P>Each individual parameter can be passed by value or by reference (which places the address of the parameter on the stack). In Fortran, C, and C++, all addresses are the same size (4 bytes), so there is no passing by near or far reference. You need to make sure that for every call, the calling program and the called routine agree on how each parameter is passed. Otherwise, the called routine receives bad data.</P>

<P>The C/C++ technique for passing parameters is always the same, regardless of calling convention: All parameters are passed by value, except for arrays, which are translated into the address of the first member. To pass data by reference, pass a pointer to it.</P>

<P>The Fortran technique for passing parameters changes depending on the calling convention specified. By default, Fortran passes all data by reference (except the hidden length argument of strings, which is a special case). If the <B>C</B> or <B>STDCALL</B> attribute is used, the default changes to passing all data by value.</P>

<P>In Fortran, use the <B>VALUE</B> and <B>REFERENCE</B> attributes to specify pass by value or pass by reference. In mixed-language programming, it is a good idea to always specify passing technique explicitly rather than relying on defaults. For example, the following C declaration sets up a call to a Fortran subroutine:</P>

<PRE><CODE>extern void __stdcall TESTPROC( int ValParm, int *RefParm );
</CODE></PRE>

<P>In the following example, the definition of TESTPROC in Fortran declares how each parameter is passed. The <B>REFERENCE</B> attribute is not strictly necessary in this example, but using it is a good idea, in case you later change the calling convention.</P>

<PRE><CODE>      SUBROUTINE TESTPROC( VALPARM, REFPARM )
      INTEGER*4 VALPARM [VALUE]
      INTEGER*4 REFPARM [REFERENCE]
      END
</CODE></PRE>

<P>The following table summarizes parameter-passing defaults. Note that an array name in C is equated to its starting address. Therefore, arrays are passed by reference. To pass an array by value, declare a structure with the array as its only member.</P>

<P class=label><B>C/C++ and Fortran Defaults for Passing Parameters</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=21%><B>Language</B></TD>
<TD class=label width=33%><B>By value</B></TD>
<TD class=label width=46%><B>By reference</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%>C/C++</TD>
<TD width=33%><I>variable</I></TD>
<TD width=46%><B>*</B> <I>variable</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Fortran</TD>
<TD width=33%><I>variable</I> <B>[VALUE]</B></TD>
<TD width=46%><I>variable</I> <B>[REFERENCE]</B>, or<BR>
<I>variable</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%>Fortran [C or STDCALL]</TD>
<TD width=33%><I>variable</I> <B>[VALUE]</B>, or<BR>
<I>variable</I></TD>
<TD width=46%><I>variable</I> <B>[REFERENCE]</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%>C/C++ arrays</TD>
<TD width=33%><B>struct {</B> <I>type</I> <B>}</B> <I>variable</I></TD>
<TD width=46%><I>variable</I></TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

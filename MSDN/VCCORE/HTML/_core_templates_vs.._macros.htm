<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Templates vs. Macros</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_templates_vs.._macros"></A><SUP></SUP>Templates vs. Macros</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>In many ways, templates work like preprocessor macros, replacing the templated variable with the given type. However, there are many differences between a macro like this:</P>

<PRE><CODE>#define min(i, j) (((i) &lt; (j)) ? (i) : (j))
</CODE></PRE>

<P>and a template:</P>

<PRE><CODE>template&lt;class T&gt; T min (T i, T j) { return ((i &lt; j) ? i : j) }
</CODE></PRE>

<P>Here are some problems with the macro:

<UL type=disc>
	<LI>There is no way for the compiler to verify that the macro parameters are of compatible types. The macro is expanded without any special type checking.<BR><BR></LI>

	<LI>The <CODE>i</CODE> and <CODE>j</CODE> parameters are evaluated twice. For example, if either parameter has a postincremented variable, the increment is performed two times.<BR><BR></LI>

	<LI>Because macros are expanded by the preprocessor, compiler error messages will refer to the expanded macro, rather than the macro definition itself. Also, the macro will show up in expanded form during debugging.</LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>template</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_template"></A><SUP></SUP>template</H1>

<P><B>C++ Specific —&gt;</B></P>

<P><B>template &lt;</B> [<I>typelist</I>] [<B>,</B> [ <I>arglist</I> ]] <B>&gt;</B> <I>declaration</I></P>

<P>The <B>template</B> declaration specifies a set of parameterized classes or functions.</P>

<P>The template parameter list is a comma-separated list of types (in the form <B>class</B> <I>identifier</I> or <B>typename</B> <I>identifier</I>) or a non-type to be used in the template body. The <I>declaration</I> field must be a declaration of a function or class.</P>

<P>You can instantiate a class template much like you would instantiate a normal class, but include the template arguments within angle brackets. No special syntax is required to call a function template.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_template_topics.htm">Template Topics</A></P>

<P><B>END C++ Specific</B></P>

<P class=label><B>Example</B></P>

<PRE><CODE>// Example of the template keyword
template &lt;class T, int i&gt; class TestClass {
public:
   char buffer[i];
   T testFunc(T* p1 );
};

template &lt;class T, int i&gt;
T TestClass&lt;T,i&gt;::testFunc(T* p1) {
    return *(p1++)
};

// To create an instance of TestClass
TestClass&lt;char, 5&gt; ClassInst;</CODE></PRE>
</font>
</BODY>
</HTML>

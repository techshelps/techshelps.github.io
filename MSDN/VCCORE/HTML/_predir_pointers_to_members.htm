<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>pointers_to_members</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_pointers_to_members"></A>pointers_to_members</H1>

<P><B>C++ Specific —&gt;</B></P>

<P><B>#pragma pointers_to_members(</B><I>pointer-declaration</I><B>,</B> [<I>most-general-representation</I>] <B>)</B></P>

<P>Specifies whether a pointer to a class member can be declared before its associated class definition and is used to control the pointer size and the code required to interpret the pointer. You can place a <B>pointers_to_members</B> pragma in your source file as an alternative to using the /vmx compiler options.</P>

<P>The <I>pointer-declaration</I> argument specifies whether you have declared a pointer to a member before or after the associated function definition. The <I>pointer-declaration</I> argument is one of the following two symbols:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=36%><B>Argument</B></TD>
<TD class=label width=64%><B>Comments</B></TD>
</TR>

<TR VALIGN="top">
<TD width=36%><B>full_generality</B></TD>
<TD width=64%>Generates safe, sometimes nonoptimal code. You use <B>full_generality</B> if any pointer to a member is declared before the associated class definition. This argument always uses the pointer representation specified by the <I>most-general-representation</I> argument. Equivalent to /vmg. </TD>
</TR>

<TR VALIGN="top">
<TD width=36%><B>best_case</B></TD>
<TD width=64%>Generates safe, optimal code using best-case representation for all pointers to members. Requires defining the class before declaring a pointer to a member of the class. The default is <B>best_case</B>.</TD>
</TR>
</TABLE><BR>

<P>The <I>most-general-representation</I> argument specifies the smallest pointer representation that the compiler can safely use to reference any pointer to a member of a class in a translation unit. The argument can be one of the following:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=35%><B>Argument</B></TD>
<TD class=label width=65%><B>Comments</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>single_inheritance</B></TD>
<TD width=65%>The most general representation is single-inheritance, pointer to a member function. Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is ever either multiple or virtual.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>multiple_inheritance</B></TD>
<TD width=65%>The most general representation is multiple-inheritance, pointer to a member function. Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is virtual.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>virtual_inheritance</B></TD>
<TD width=65%>The most general representation is virtual-inheritance, pointer to a member function. Never causes an error. This is the default argument when <B>#pragma pointers_to_members(full_generality)</B> is used.</TD>
</TR>
</TABLE><BR>

<P><B>END C++ Specific</B></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_mktemp, _wmktemp</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__mktemp.2c_._wmktemp"></A><SUP></SUP>_mktemp, _wmktemp</H1>

<P>Create a unique filename.</P>

<P><B>char</B> <B>*_mktemp(</B> <B>char</B> <B>*</B><I>template</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*_wmktemp(</B> <B>wchar_t</B> <B>*</B><I>template</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=28%><B>Required Header</B></TD>
<TD class=label width=55%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_mktemp</B></TD>
<TD width=28%>&lt;io.h&gt;</TD>
<TD width=55%>Win 95, Win NTv</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wmktemp</B></TD>
<TD width=28%>&lt;io.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=55%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the modified template. The function returns <B>NULL</B> if <I>template</I> is badly formed or no more unique names can be created from the given template.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>template</I></P>

<P class=indent>Filename pattern</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_mktemp</B> function creates a unique filename by modifying the <I>template</I> argument. <B>_mktemp</B> automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system. <B>_wmktemp</B> is a wide-character version of <B>_mktemp</B>; the argument and return value of <B>_wmktemp</B> are wide-character strings. <B>_wmktemp</B> and <B>_mktemp</B> behave identically otherwise, except that <B>_wmktemp</B> does not handle multibyte-character strings.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tmktemp</TD>
<TD width=29%>_mktemp</TD>
<TD width=26%>_mktemp</TD>
<TD width=28%>_wmktemp</TD>
</TR>
</TABLE><BR>

<P>The <I>template</I> argument has the form <I>base</I>XXXXXX where <I>base</I> is the part of the new filename that you supply and each X is a placeholder for a character supplied by <B>_mktemp</B>. Each placeholder character in <I>template</I> must be an uppercase X. <B>_mktemp</B> preserves <I>base</I> and replaces the first trailing X with an alphabetic character. <B>_mktemp</B> replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multi-threaded programs, the calling thread.</P>

<P>Each successful call to <B>_mktemp</B> modifies <I>template</I>. In each subsequent call from the same process or thread with the same <I>template</I> argument, <B>_mktemp</B> checks for filenames that match names returned by <B>_mktemp</B> in previous calls. If no file exists for a given name, <B>_mktemp</B> returns that name. If files exist for all previously returned names, <B>_mktemp</B> creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'. For example, if <I>base</I> is </P>

<PRE><CODE>fn
</CODE></PRE>

<P>and the five-digit value supplied by <B>_mktemp</B> is 12345, the first name returned is </P>

<PRE><CODE>fna12345
</CODE></PRE>

<P>If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same <I>base</I> for <I>template</I> will be</P>

<PRE><CODE>fnb12345
</CODE></PRE>

<P>If FNA12345 does not exist, the next name returned will again be </P>

<PRE><CODE>fna12345
</CODE></PRE>

<P><B>_mktemp</B> can create a maximum of 27 unique filenames for any given combination of base and template values. Therefore, FNZ12345 is the last unique filename <B>_mktemp</B> can create for the <I>base</I> and <I>template</I> values used in this example.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* MKTEMP.C: The program uses _mktemp to create
 * five unique filenames. It opens each filename
 * to ensure that the next name is unique.
 */

#include &lt;io.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

char *template = "fnXXXXXX";
char *result;
char names[5][9];

void main( void )
{
   int i;
   FILE *fp;

   for( i = 0; i &lt; 5; i++ )
   {
      strcpy( names[i], template );
      /* Attempt to find a unique filename: */
      result = _mktemp( names[i] );
      if( result == NULL )
         printf( "Problem creating the template" );
      else
      {
         if( (fp = fopen( result, "w" )) != NULL )
            printf( "Unique filename is %s\n", result );
         else
            printf( "Cannot open %s\n", result );
         fclose( fp );
      }
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Unique filename is fna00141
Unique filename is fnb00141
Unique filename is fnc00141
Unique filename is fnd00141
Unique filename is fne00141

</CODE></PRE>

<P><A HREF="_crt_file_handling.htm">File Handling Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, <A HREF="_crt__getmbcp.htm">_getmbcp</A>, <A HREF="_crt__getpid.htm">_getpid</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A>, <A HREF="_crt__setmbcp.htm">_setmbcp</A>, <A HREF="_crt__tempnam.2c_._wtempnam.2c_.tmpnam.2c_._wtmpnam.htm">_tempnam</A>, <A HREF="_crt_tmpfile.htm">tmpfile</A></P>
</font>
</BODY>
</HTML>

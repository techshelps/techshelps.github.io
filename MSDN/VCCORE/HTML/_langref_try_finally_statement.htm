<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>try-finally Statement</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_try_finally_statement"></A><SUP></SUP>try-finally Statement</H1>

<P><B>Microsoft Specific —&gt;</B></P>

<P>The <B>try-finally</B> statement is a Microsoft extension to the C and C++ languages that enables 32-bit target applications to guarantee execution of cleanup code when execution of a block of code is interrupted. Cleanup consists of such tasks as deallocating memory, closing files, and releasing file handles. The <B>try-finally</B> statement is especially useful for routines that have several places where a check is made for an error that could cause premature return from the routine. </P>

<P>For related information, see <A HREF="_langref_try_except_statement.htm">try-except Statement</A>. For more information on structured exception handling in general, see <A HREF="_core_exception_handling_topics_.28.seh.29.htm">Exception Handling Topics (SEH)</A>. </P>

<P class=indent><B>Note</B>&nbsp;&nbsp;&nbsp;Structured exception handling works with Win32 for both C and C++ source files. However, it is not specifically designed for C++. You can ensure that your code is more portable by using C++ exception handling. Also, C++ exception handling is more flexible, in that it can handle exceptions of any type. For C++ programs, it is recommended that you use the new C++ exception-handling mechanism (See <A HREF="_langref_try.2c_.catch.2c_.and_throw_statements.htm">try, catch, and throw</A> statements).</P>

<P><I>try-finally-statement</I> :<BR>
<B>__try</B> <I>compound-statement</I><BR>
<B>__finally</B> <I>compound-statement</I></P>

<P>The compound statement after the <B>__try</B> clause is the guarded section. The compound statement after the <B>__finally</B> clause is the termination handler. The handler specifies a set of actions that execute when the guarded section is exited, whether the guarded section is exited by an exception (abnormal termination), or by standard fall through (normal termination).</P>

<P>Control reaches a <B>__try</B> statement by simple sequential execution (fall through). When control enters the <B>__try</B>, its associated handler becomes active. Execution proceeds as follows:

<OL>
	<LI>The guarded section is executed.<BR><BR></LI>

	<LI>The termination handler is invoked.<BR><BR></LI>

	<LI>When the termination handler completes, execution continues after the <B>__finally</B> statement. Regardless of how the guarded section ends (for example, via a <B>goto</B> out of the guarded body or a <B>return</B> statement), the termination handler is executed <I>before</I> the flow of control moves out of the guarded section.</LI>
</OL>

<P><A NAME="_langref___leave"></A>The <B>__leave</B> keyword is valid within a <B>try-finally</B> statement block. The effect of <B>__leave</B> is to jump to the end of the <B>try-finally</B> block. The termination handler is immediately executed. Although a <B>goto</B> statement can be used to accomplish the same result, a <B>goto</B> statement causes stack unwinding. The <B>__leave</B> statement is more efficient because it does not involve stack unwinding. </P>

<P>Exiting a <B>try-finally</B> statement using the <B>longjmp</B> run-time function is considered abnormal termination. It is illegal to jump into a <B>__try</B> statement, but legal to jump out of one. All <B>__finally</B> statements that are active between the point of departure and the destination must be run. This is called a local unwind. </P>

<P>The termination handler is not called if a process is killed in the middle of executing a <B>try-finally</B> statement.</P>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

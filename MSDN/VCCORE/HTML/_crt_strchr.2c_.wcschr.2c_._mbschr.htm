<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strchr, wcschr, _mbschr</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strchr.2c_.wcschr.2c_._mbschr"></A><SUP></SUP>strchr, wcschr, _mbschr</H1>

<P>Find a character in a string.</P>

<P><B>char</B> <B>*strchr(</B> <B>const</B> <B>char</B> <B>*</B><I>string</I><B>,</B> <B>int</B> <I>c</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*wcschr(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>string</I><B>,</B> <B>wint_t</B> <I>c</I> <B>);</B></P>

<P><B>unsigned</B> <B>char</B> <B>*_mbschr(</B> <B>const</B> <B>unsigned</B> <B>char</B> <B>*</B><I>string</I><B>,</B> <B>unsigned</B> <B>int</B> <I>c</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=36%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>strchr</B></TD>
<TD width=36%>&lt;string.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>wcschr</B></TD>
<TD width=36%>&lt;string.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_mbschr</B></TD>
<TD width=36%>&lt;mbstring.h&gt;</TD>
<TD width=48%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the first occurrence of <I>c</I> in <I>string</I>, or <B>NULL</B> if <I>c</I> is not found.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>string</I></P>

<P class=indent>Null-terminated source string</P>

<P class=dt><I>c</I></P>

<P class=indent>Character to be located</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strchr</B> function finds the first occurrence of <I>c</I> in <I>string</I>, or it returns <B>NULL</B> if <I>c</I> is not found. The null-terminating character is included in the search.</P>

<P><B>wcschr</B> and <B>_mbschr</B> are wide-character and multibyte-character versions of <B>strchr</B>. The arguments and return value of <B>wcschr</B> are wide-character strings; those of <B>_mbschr</B> are multibyte-character strings. <B>_mbschr</B> recognizes multibyte-character sequences according to the multibyte code page currently in use. These three functions behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tcschr</TD>
<TD width=29%>strchr</TD>
<TD width=26%>_mbschr </TD>
<TD width=28%>wcschr </TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* STRCHR.C: This program illustrates searching for a character
 * with strchr (search forward) or strrchr (search backward).
 */

#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int  ch = 'r';

char string[] = "The quick brown dog jumps over the lazy fox";
char fmt1[] =   "         1         2         3         4         5";
char fmt2[] =   "12345678901234567890123456789012345678901234567890";

void main( void )
{
   char *pdest;
   int result;

   printf( "String to be searched: \n\t\t%s\n", string );
   printf( "\t\t%s\n\t\t%s\n\n", fmt1, fmt2 );
   printf( "Search char:\t%c\n", ch );

   /* Search forward. */
   pdest = strchr( string, ch );
   result = pdest - string + 1;
   if( pdest != NULL )
      printf( "Result:\tfirst %c found at position %d\n\n", 
              ch, result );
   else
      printf( "Result:\t%c not found\n" );

   /* Search backward. */
   pdest = strrchr( string, ch );
   result = pdest - string + 1;
   if( pdest != NULL )
      printf( "Result:\tlast %c found at position %d\n\n", ch, result );
   else
      printf( "Result:\t%c not found\n" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>String to be searched: 
      The quick brown dog jumps over the lazy fox
               1         2         3         4         5
      12345678901234567890123456789012345678901234567890

Search char:   r
Result:   first r found at position 12

Result:   last r found at position 30

</CODE></PRE>

<P><A HREF="_crt_string_manipulation.htm">String Manipulation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_strcspn.2c_.wcscspn.2c_._mbscspn.htm">strcspn</A>, <A HREF="_crt_strncat.2c_.wcsncat.2c_._mbsncat.htm">strncat</A>, <A HREF="_crt_strncmp.2c_.wcsncmp.2c_._mbsncmp.htm">strncmp</A>, <A HREF="_crt_strncpy.2c_.wcsncpy.2c_._mbsncpy.htm">strncpy</A>, <A HREF="_crt__strnicmp.2c_._wcsnicmp.2c_._mbsnicmp.htm">_strnicmp</A>, <A HREF="_crt_strpbrk.2c_.wcspbrk.2c_._mbspbrk.htm">strpbrk</A>, <A HREF="_crt_strrchr.2c_.wcsrchr.2c_._mbsrchr.htm">strrchr</A>, <A HREF="_crt_strstr.2c_.wcsstr.2c_._mbsstr.htm">strstr</A></P>
</font>
</BODY>
</HTML>

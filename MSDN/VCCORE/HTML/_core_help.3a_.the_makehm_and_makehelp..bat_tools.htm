<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Help: The MakeHm Tool</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Sample_mfc_scribble">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble help">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFCNOTES_TN028">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_help.3a_.the_makehm_and_makehelp..bat_tools"></A>Help: The MakeHm Tool</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_help.3a_.context.2d.sensitive_help_overview.htm">Overview</A>  |&nbsp; <A HREF="_core_help_tasks.3a_.context.2d.sensitive_help_for_your_programs.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_3.Click()">Tutorial</A></P>

<P>This article describes the tools you use to map help context IDs in your application to Help topics in your Help file. Topics covered include:

<UL type=disc>
	<LI><A HREF="#_core_help_context_ids">Help context IDs</A><BR><BR></LI>

	<LI><A HREF="#_core_preferred_resource_id_prefixes">Preferred resource ID prefixes</A><BR><BR></LI>

	<LI><A HREF="#_core_example_help_contexts">Example help contexts</A><BR><BR></LI>

	<LI><A HREF="#_core_running_the_tools">Running the tools</A></LI>
</UL>

<P>In Windows Help, a help context consists of a string and an ID number. The help context string is what the help text author uses to identify Help topics. The help context ID number is what the programmer associates with each resource. The context strings and ID numbers are mapped together in the [MAP] section of the .HPJ file. When your application calls Windows Help, Windows Help uses the context ID your application passes to locate and display the Help topic denoted by that context. At run time, the framework manages supplying the appropriate help context ID.</P>

<P>To facilitate relating the windows, dialog boxes, and commands in your application to Windows Help contexts, MFC provides the MakeHm.exe tool, which creates the information used in the [MAP] section of the .HPJ file. </P>

<P>AppWizard’s custom build rules on the RESOURCE.H file call MakeHm.exe and then calls the Windows Help Compiler. Makehelp.bat performed this function in prior versions of Visual C++.</P>



<H2><A NAME="_core_help_context_ids"></A>Help Context IDs</H2>

<P>When you use Visual C++ to create dialog-template resources, menu commands, and the like, Visual C++ writes <B>#define</B> statements in a file named RESOURCE.H. For example, there might be <B>#define</B> statements for such symbols as <CODE>IDD_MY_DIALOG</CODE> and <CODE>ID_PEN_WIDTHS</CODE>. </P>

<P>The following illustrates the resource IDs that Visual C++ creates in your RESOURCE.H file and the help context IDs that the MakeHm tool creates. IDs in RESOURCE.H like</P>

<PRE><CODE>#define IDD_MY_DIALOG   2000
#define ID_MY_COMMAND    150
</CODE></PRE>

<P>would be translated by MakeHm into</P>

<PRE><CODE>HIDD_MY_DIALOG    0x207d0
HID_MY_COMMAND    0x10096
</CODE></PRE>

<P>Dialog-box IDs are translated to values beginning at 0x20000. Command and resource IDs are translated to values beginning at 0x10000. That is, the framework reserves specific ranges of values for different kinds of objects. For details, see the custom build rule on the RESOURCE.H file and <A HREF="JavaScript:hhobj_4.Click()">Technical Note 28</A>.</P>

<P>This format is compatible with the Help Compiler, which maps context IDs (the numbers on the right side) to context strings (the symbols on the left). Use these context strings in the .RTF Help files to identify topics.</P>

<P>For more information about how Visual C++ adds symbols to RESOURCE.H and how you can view and manipulate them with the Visual C++ Symbol Browser, see <A HREF="_core_symbol_editor_topics.htm">Browsing Through Symbols</A>.</P>



<H2><A NAME="_core_preferred_resource_id_prefixes"></A>Preferred Resource ID Prefixes</H2>

<P>To facilitate using MakeHm, observe the conventions in specifying IDs for your resource objects, as shown in the following table. It is important that different kinds of resource objects have different ID prefixes.</P>

<P class=label><B>Preferred Resource ID Naming Conventions</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=29%><B>Predefined ID</B></TD>
<TD class=label width=71%><B>Object</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>IDP_</B></TD>
<TD width=71%>Message-box prompt</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>IDD_</B></TD>
<TD width=71%>Dialog-box ID</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>ID_</B></TD>
<TD width=71%>Toolbar or menu command (<B>IDM_</B> is okay too)</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>IDR_</B></TD>
<TD width=71%>Frame-related resources</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>IDW_</B></TD>
<TD width=71%>Control bar</TD>
</TR>
</TABLE><BR>

<P>For example, here’s a call to the MakeHm tool from a custom build rule:</P>

<PRE><CODE>makehm ID_,HID_,0x10000 IDM_,HIDM_,0x10000 resource.h &gt;&gt;"hlp\$(TargetName).hm"
</CODE></PRE>

<P>Build rules expect dialog resources to be named with <B>IDD_</B> prefixes. The corresponding help contexts will be named with <B>HIDD_</B> prefixes.</P>

<P>Use the <B>IDS_</B> prefix for normal string resources, and do not write Help topics for them. For string resources used in message boxes, use the <B>IDP_</B> prefix and write Help topics for them so the user can get context-sensitive Help by pressing F1 while the message box is displayed.</P>



<H2><A NAME="_core_example_help_contexts"></A>Example Help Contexts</H2>

<P>As your application grows, you’ll define a number of new IDs (symbols). For example, the following lists the RESOURCE.H file for the Scribble application after Step 6 of the tutorial:</P>

<PRE><CODE>//{{NO_DEPENDENCIES}}
// Visual C++ generated include file.
// Used by SCRIBBLE.RC
//
#define IDD_ABOUTBOX                   100
#define IDR_MAINFRAME                  128
#define IDR_SCRIBBTYPE                 129
#define IDD_PEN_WIDTHS                 131
#define IDC_THIN_PEN_WIDTH             1000
#define IDC_THICK_PEN_WIDTH            1001
#define IDC_DEFAULT_PEN_WIDTHS         1002
#define ID_PEN_THICK_OR_THIN           32771
#define ID_PEN_WIDTHS                  32772
</CODE></PRE>

<P>Symbols defined for the Scribble tutorial include <CODE>IDR_SCRIBBTYPE</CODE> (Scribble’s menus and other application-specific resources), <CODE>IDD_PEN_WIDTHS</CODE> (a Pen Widths dialog box), <CODE>ID_PEN_THICK_OR_THIN</CODE> (a Thick Line command), and so on. Notice that one Scribble command, <B>ID_EDIT_CLEAR_ALL</B>, doesn’t appear in RESOURCE.H because it’s predefined ID in the class library. AppWizard will already have generated a Help topic for it in the .RTF files it created to get you started.</P>

<P>MakeHm maps these symbols to Windows Help contexts. The following excerpt from custom build rule shows a call to MakeHm:</P>

<PRE><CODE>makehm ID_,HID_,0x10000 IDM_,HIDM_,0x10000 resource.h &gt;&gt;"hlp\$(TargetName).hm"
</CODE></PRE>

<P>After you run a custom build rule, an .HM file may look like the following:</P>

<PRE><CODE>// Commands (ID_* and IDM_*) 
HID_PEN_THICK_OR_THIN         0x18003
HID_PEN_WIDTHS                0x18004
 
// Prompts (IDP_*) 
 
// Resources (IDR_*) 
HIDR_MAINFRAME                0x20080
HIDR_SCRIBBTYPE               0x20081
 
// Dialogs (IDD_*) 
HIDD_ABOUTBOX                 0x20064
HIDD_PEN_WIDTHS               0x20083
 
// Frame Controls (IDW_*) 
</CODE></PRE>

<P>This file contains help contexts for two commands, two resources (menus and other application resources), and two dialog boxes.</P>



<H2><A NAME="_core_running_the_tools"></A>Running the Tools</H2>

<P>When the custom build rules detect a change in the RESOURCE.H file, they call the MakeHm tool to map the <B>#define</B> statements in RESOURCE.H to Windows Help strings in an .HM file. The MakeHm tool collects <B>#define</B> statements from RESOURCE.H and uses the command-line parameters passed to MakeHm to map defined symbols to help strings in a .HM file. For the example IDs in the previous paragraph, it would create help strings such as <CODE>HIDD_MY_DIALOG</CODE> and <CODE>HID_PEN_WIDTHS</CODE>. These context strings are formed by prefixing an “H” to the symbol found in RESOURCE.H. MakeHm also maps the ID’s numeric value to a corresponding number for the help context. An example is shown in <A HREF="#_core_example_help_contexts">Example Help Contexts</A>.</P>

<P>The custom build rules will invoke the Windows Help Compiler (HCW.EXE) if the .HPJ file changes and HCW.EXE will uses the .HM files pointed to by the .HPJ file to set up the help contexts in your new Help file. Once you finish compiling your .HLP file, you can use it from your application.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_help.3a_.authoring_help_topics.htm">Help: Authoring Help Topics</A> </P>
</font>
</BODY>
</HTML>

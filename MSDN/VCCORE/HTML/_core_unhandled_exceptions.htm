<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unhandled Exceptions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_unhandled_exceptions"></A>Unhandled Exceptions</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>If a matching <B>catch</B> handler (or ellipsis <B>catch</B> handler) cannot be found for the current exception, the predefined <A HREF="_crt_terminate.htm">terminate</A> run-time function is called. (You can also explicitly call <B>terminate</B> in any of your handlers.) The default action of <B>terminate</B> is to call <B>abort</B>. If you want <B>terminate</B> to call some other function in your program before exiting the application, call the <A HREF="_crt_set_terminate.htm">set_terminate</A> function with the name of the function to be called as its single argument. You can call <B>set_terminate</B> at any point in your program. The <B>terminate</B> routine always calls the last function given as an argument to <B>set_terminate</B>. </P>

<P>The following example code throws a <CODE>char *</CODE> exception, but does not contain a handler designated to catch exceptions of type <CODE>char *</CODE>. The call to <B>set_terminate</B> instructs <B>terminate</B> to call <CODE>term_func</CODE>:</P>

<PRE><CODE>#include &lt;eh.h&gt;      // For function prototypes
#include &lt;iostream.h&gt;
#include &lt;process.h&gt;

void term_func()
{ 
    //...
    cout &lt;&lt; "term_func was called by terminate." &lt;&lt; endl;
    exit( -1 );
 }
int main()
{
    try
    {
        // ...
        set_terminate( term_func );
        // ...
        throw "Out of memory!"; // No catch handler for this exception
    }
    catch( int )
    {
        cout &lt;&lt; "Integer exception raised." &lt;&lt; endl;
    }
    return 0;
}
</CODE></PRE>

<P>After performing any desired cleanup tasks, the <CODE>term_func</CODE> function should terminate the program or current thread, ideally by calling <CODE>exit</CODE>. If it doesn’t, and instead returns to its caller, <CODE>abort</CODE> is called.</P>
</font>
</BODY>
</HTML>

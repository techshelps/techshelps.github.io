<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory and Pointers</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_memory_and_pointers"></A><SUP></SUP>Memory and Pointers</H1>

<P>To be portable, source code must avoid any techniques that rely on the 16-bit <I>segment</I><B>:</B><I>offset</I> address structure, because all pointers are 32 bits in size under Win32 and use flat rather than segmented memory.</P>

<P>This difference in pointer structure is usually not a problem unless the code uses <B>HIWORD</B>, <B>LOWORD</B>, or similar macros to manipulate portions of the pointer. </P>

<P>For example, in Windows 3.<I>x</I>, memory is allocated to align on a segment boundary, which makes memory allocation functions return a pointer with an offset of 0x0000. The following code exploits this fact to run successfully under Windows 3.<I>x</I>:</P>

<PRE><CODE>ptr2 = ptr1 = malloc();               // ptr2 = xxxx:0000
LOWORD( ptr2 ) = index * elementsize; // Place offset of array element
                                      //   into ptr2 low word</CODE></PRE>

<P>Such code does not work properly under Win32. But standard pointer constructs, such as the following, always result in portable code:</P>

<PRE><CODE>ptr1 = malloc();         // Set ptr1 to start of memory block
ptr2 = &amp;ptr1[i];         // Place offset of array element</CODE></PRE>

<P>Here are some other guidelines for dealing with pointers:

<UL type=disc>
	<LI>All pointers, including those that access the local heap, are 32 bits under Win32.<BR><BR></LI>

	<LI>Addresses never wrap, as they can with the low word in segmented addressing. For example, in Windows 3.<I>x</I>, an address can wrap from 1000:FFFF to 1000:0000.<BR><BR></LI>

	<LI>Structures that hold near pointers in Windows 3.<I>x</I> must be revised because all pointers are 32 bits in Win32. This may affect code that uses constants to access structure members, and it may also affect alignment.</LI>
</UL>
</font>
</BODY>
</HTML>

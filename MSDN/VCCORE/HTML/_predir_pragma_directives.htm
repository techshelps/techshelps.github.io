<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pragma Directives</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_pragma_directives"></A>Pragma Directives</H1>

<P>Each implementation of C and C++ supports some features unique to its host machine or operating system. Some programs, for instance, need to exercise precise control over the memory areas where data is placed or to control the way certain functions receive parameters. The <B>#pragma</B> directives offer a way for each compiler to offer machine- and operating-system-specific features while retaining overall compatibility with the C and C++ languages. Pragmas are machine- or operating-system-specific by definition, and are usually different for every compiler.</P>

<P class=label><B>Syntax</B></P>

<P><B>#pragma</B> <I>token-string</I></P>

<P>The <I>token-string</I> is a series of characters that gives a specific compiler instruction and arguments, if any. The number sign (<B>#</B>) must be the first non-white-space character on the line containing the pragma; white-space characters can separate the number sign and the word <B>pragma</B>. Following <B>#pragma</B>, write any text that the translator can parse as preprocessing tokens. The argument to <B>#pragma</B> is subject to macro expansion.</P>

<P>If the compiler finds a pragma it does not recognize, it issues a warning, but compilation continues.</P>

<P>Pragmas can be used in conditional statements, to provide new preprocessor functionality, or to provide implementation-defined information to the compiler. The C and C++ compilers recognize the following pragmas:</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_alloc_text.htm">alloc_text</A></TD>
<TD width=23%><A HREF="_predir_comment.htm">comment</A></TD>
<TD width=31%><A HREF="_predir_init_seg.htm">init_seg</A><SUP>1</SUP></TD>
<TD width=20%><A HREF="_predir_optimize.htm">optimize</A></TD>
</TR>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_auto_inline.htm">auto_inline</A></TD>
<TD width=23%><A HREF="_predir_component.htm">component</A></TD>
<TD width=31%><A HREF="_predir_inline_depth.htm">inline_depth</A></TD>
<TD width=20%><A HREF="_predir_pack.htm">pack</A></TD>
</TR>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_bss_seg.htm">bss_seg</A></TD>
<TD width=23%><A HREF="_predir_data_seg.htm">data_seg</A></TD>
<TD width=31%><A HREF="_predir_inline_recursion.htm">inline_recursion</A></TD>
<TD width=20%><A HREF="_predir_pointers_to_members.htm">pointers_to_members</A><SUP>1</SUP></TD>
</TR>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_check_stack.htm">check_stack</A></TD>
<TD width=23%><A HREF="_predir_function.htm">function</A></TD>
<TD width=31%><A HREF="_predir_intrinsic.htm">intrinsic</A></TD>
<TD width=20%><A HREF="_predir_setlocale.htm">setlocale</A></TD>
</TR>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_code_seg.htm">code_seg</A></TD>
<TD width=23%><A HREF="_predir_hdrstop.htm">hdrstop</A></TD>
<TD width=31%><A HREF="_predir_message.htm">message</A></TD>
<TD width=20%><A HREF="_predir_vtordisp.htm">vtordisp</A><SUP>1</SUP></TD>
</TR>

<TR VALIGN="top">
<TD width=26%><A HREF="_predir_const_seg.htm">const_seg</A></TD>
<TD width=23%><A HREF="_predir_include_alias.htm">include_alias</A></TD>
<TD width=31%><A HREF="_predir_once.htm">once</A></TD>
<TD width=20%><A HREF="_predir_warning.htm">warning</A></TD>
</TR>
</TABLE><BR>

<P class=mini>1. Supported only by the C++ compiler.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Variables Window</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_the_variables_window"></A>Using the Variables Window</H1>

<P class=indent><B><B>Feature Only in Enterprise Edition</B></B>&nbsp;&nbsp;&nbsp;SQL source code debugging is supported only in Visual C++ Enterprise Edition. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Visual C++ Editions</A>.</P>

<P>The Variables window provides quick access to variables that are important in the program’s current context.</P>

<P>The window includes three tabs: 

<UL type=disc>
	<LI>The <B>Auto</B> tab displays variables used in the current statement and the previous statement. It also displays return values when you step over or out of a function.<BR><BR></LI>

	<LI>The <B>Locals</B> tab displays the variables that are local to the current function.<BR><BR></LI>

	<LI>The <B>This </B>tab displays the object pointed to by <B>this</B>. The <B>this</B> relates to the routine currently at the client-side debugger. It does not refer to the SQL Server.</LI>
</UL>

<P>Each tab contains a spreadsheet with fields for the variable name and value. The debugger automatically fills in these fields. </P>

<P>In addition to the tabs, the Variables window has a <B>Context</B> box on the toolbar. This box displays a list of the current Call Stack in a drop-down list box. You can select a context from this list to specify the current scope of the variables displayed.</P>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;The <B>Context</B> box is part of a toolbar that you can hide using the right mouse button.</P>

<P>You can expand or collapse the displayed variables using the tree controls, but you cannot add variables to the Variables window. You can add variables in the Watch window.</P>

<P>When the program pauses at a breakpoint or between steps, you can change the value of any non-<B>const </B>local variable in your program. This gives you the flexibility to try out changes and see their results in real time or to recover from some logic error and continue.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Changes to local variables may not take effect while you’re stepping through the SQL statement. Although you may have modified the value, it may never be checked again. There is no way to force a refresh.</P>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;The Variables window does not display variable type information, but you can show variable type information by using the window’s property page. Move the insertion point to a variable name in the Variables window, click the right mouse button, and then click <B>Properties</B>. The type, expression (variable), and value are displayed in the Program Variable Properties window.</P>

<P class=label><B>To display the Variables window</B>

<OL>
	<LI>From the <B>View</B> menu, click <B>Debug Windows</B> and <B>Variables</B>.
<P class=tl>The Variables window appears.</P></LI>

	<LI>Choose the <B>Auto</B> tab or <B>Locals</B> tab, according to the type of variables you want to see.</LI>
</OL>

<P class=label><B>To view type information for a variable</B>

<OL>
	<LI>In the Variables window, choose the <B>Auto</B> tab or <B>Locals</B> tab.<BR><BR></LI>

	<LI>Select the line containing the variable whose type you want to see.<BR><BR></LI>

	<LI>Click the right mouse button in the Variables window and click <B>Properties</B> from the shortcut menu. 
<P class=tl>–&nbsp;or&nbsp;–</P>
<P class=tl>From the <B>View</B> menu, click <B>Properties</B>.</P></LI>
</OL>

<P>Although you cannot delete variables from the Variables window, you can edit the values of local variables.</P>

<P class=label><B>To modify the value of a variable</B>

<OL>
	<LI>In the Variables window, choose the <B>Auto</B> tab or <B>Locals</B> tab.<BR><BR></LI>

	<LI>Select the line containing the local variable you want to modify. <BR><BR></LI>

	<LI>Double-click the value, or use the TAB key to move the insertion point to the value you want to modify.<BR><BR></LI>

	<LI>Type the new value, and press ENTER.</LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You can modify only the following types of data: char, varchar, and integer data types. String variables (varchar) cannot be made longer.</P>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;To change the value of strings, modify the individual characters.</P>

<H2>Navigating From the Variables Window</H2>

<P>You can navigate to SQL statements from the <B>Context</B> box in the Variables window. This box displays the SQL statements, if available, in a source window.</P>

<P class=label><B>To navigate from the Variables window to SQL statements</B>

<UL type=disc>
	<LI>Select the SQL source name from the <B>Context</B> drop-down list box in the Variables window toolbar. For example, select the name of a stored procedure.</LI>
</UL>

<P>This procedure changes only the view of the program displayed in the Variables window and other debugger windows. It does not change the next line of execution or the value stored in the program counter.</P>
</font>
</BODY>
</HTML>

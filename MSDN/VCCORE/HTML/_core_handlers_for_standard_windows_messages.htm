<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handlers for Standard Windows Messages</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_handlers_for_standard_windows_messages"></A>Handlers for Standard Windows Messages</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_messages_and_commands.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_message.2d.mapping_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A></P>

<P>Default handlers for standard Windows messages (<B>WM_</B>) are predefined in class <B>CWnd</B>. The class library bases names for these handlers on the message name. For example, the handler for the <B>WM_PAINT</B> message is declared in <B>CWnd</B> as:</P>

<PRE><CODE>afx_msg void OnPaint();
</CODE></PRE>

<P>The <B>afx_msg</B> keyword suggests the effect of the C++ <B>virtual</B> keyword by distinguishing the handlers from other <B>CWnd</B> member functions. Note, however, that these functions are not actually virtual; they are instead implemented through message maps. Message maps depend solely on standard preprocessor macros, not on any extensions to the C++ language. The <B>afx_msg</B> keyword resolves to white space after preprocessing.</P>

<P>To override a handler defined in a base class, simply use ClassWizard to define a function with the same prototype in your derived class and to make a message-map entry for the handler. Your handler “overrides” any handler of the same name in any of your class’s base classes. </P>

<P>In some cases, your handler should call the overridden handler in the base class so the base class(es) and Windows can operate on the message. Where you call the base-class handler in your override depends on the circumstances. Sometimes you must call the base-class handler first and sometimes last. Sometimes you call the base-class handler conditionally, if you choose not to handle the message yourself. Sometimes you should call the base-class handler, then conditionally execute your own handler code, depending on the value or state returned by the base-class handler.</P>

<P class=indent><B><B>Important</B></B>&nbsp;&nbsp;&nbsp;It is not safe to modify the arguments passed into a handler if you intend to pass them to a base-class handler. For example, you might be tempted to modify the <I>nChar</I> argument of the <CODE>OnChar</CODE> handler (to convert to uppercase, for example). This behavior is fairly obscure, but if you need to accomplish this effect, use the <B>CWnd</B> member function <B>SendMessage</B> instead.</P>

<P>How do you determine the proper way to override a given message? ClassWizard helps with this decision. When ClassWizard writes the skeleton of the handler function for a given message — an <CODE>OnCreate</CODE> handler for <B>WM_CREATE</B>, for example — it sketches in the form of the recommended overridden member function. The following example recommends that the handler first call the base-class handler and proceed only on condition that it does not return –1.</P>

<PRE><CODE>int CMyView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
    if (CView::OnCreate(lpCreateStruct) == -1)
        return -1;
    // TODO: Add your specialized creation code here
    return 0;
}
</CODE></PRE>

<P>By convention, the names of these handlers begin with the prefix “On.” Some of these handlers take no arguments, while others take several. Some also have a return type other than <B>void</B>. The default handlers for all <B>WM_</B> messages are documented in the <I>Class Library Reference</I> as member functions of class <B>CWnd</B> whose names begin with “On.” The member function declarations in <B>CWnd</B> are prefixed with <B>afx_msg</B>.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recordset: Performing a Join (ODBC)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Enroll tutorial">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.m_strFilter">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CDaoRecordset.3a3a.m_strFilter">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_sample_mfc_ENROLL">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.DoFieldExchange">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.DoBulkFieldExchange">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_recordset.3a_.performing_a_join_.28.odbc.29"></A>Recordset: Performing a Join (ODBC)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_odbc_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_odbc_database_sample_list.htm">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>This article applies to the MFC ODBC classes. For DAO recordsets, see the article <A HREF="_core_dao_recordset.htm">DAO Recordset</A>.</P>

<P>This article explains:

<UL type=disc>
	<LI><A HREF="#_core_what_a_join_is">What a join is</A>. <BR><BR></LI>

	<LI><A HREF="#_core_performing_the_join">How to perform a join of multiple tables</A>. </LI>
</UL>

<H2><A NAME="_core_what_a_join_is"></A>What a Join Is</H2>

<P>The join operation — a common data-access task — lets you work with data from more than one table using a single recordset object. Joining two or more tables yields a recordset that can contain columns from each table, but appears as a single table to your application. Sometimes the join uses all columns from all tables, but sometimes the SQL <B>SELECT</B> clause in a join uses only some of the columns from each table. The database classes support read-only joins but not updatable joins.</P>

<P>The key to a join operation is one or more columns that the tables have in common. For example, suppose there is a “CourseID” column in both the Course table and the Section table for an application such as the ENROLL tutorial. In the Course table, the CourseID column contains a unique ID value for each possible course. In the Section table, the CourseID column probably doesn’t contain unique values, since each course usually has more than one section.</P>

<P>To select records containing columns from joined tables, you need the following items:

<UL type=disc>
	<LI>A table list containing the names of all tables being joined.<BR><BR></LI>

	<LI>A column list containing the names of all participating columns. Columns with the same name but from different tables are qualified by the table name.<BR><BR></LI>

	<LI>A filter (SQL <B>WHERE</B> clause) that specifies the column(s) on which the tables are joined. This filter takes the form “Table1.KeyCol = Table2.KeyCol” and actually accomplishes the join. For the ENROLL example above, the filter is:
<PRE><CODE>Course.CourseID = Section.CourseID
</CODE></PRE>
</LI>
</UL>

<H2><A NAME="_core_performing_the_join"></A>Performing the Join</H2>

<P>The following procedure shows a join of two tables but can apply to joins of any number of tables (all on the same data source). The procedure involves first binding columns from multiple tables with ClassWizard, then directly modifying source code to complete the join. </P>



<H3><A NAME="_core_binding_the_table_columns"></A>Binding the Table Columns</H3>

<P class=label><B>To bind columns from both tables to a single recordset</B>

<OL>
	<LI>Use ClassWizard to create a recordset class for the join. In ClassWizard choose <B>Data Sources</B> to open the <B>Data Sources</B> dialog box and bind columns from the first table to recordset field data members.
<P class=tl>See the article <A HREF="_core_classwizard.3a_.creating_a_recordset_class.htm">ClassWizard: Creating a Recordset Class</A>. </P></LI>

	<LI>Choose ClassWizard’s <B>Update Columns</B> button to open the <B>Data Sources</B> dialog box a second time.<BR><BR></LI>

	<LI>Select a data source and choose <B>OK </B>to close the <B>Data Sources</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Tables </B>dialog box, select the name of the second table and choose <B>OK </B>to close the dialog box.<BR><BR></LI>

	<LI>Bind columns from the second table to additional recordset field data members.
<P class=tl>If any column names from the second table duplicate column names from the first table, be sure to give the corresponding recordset field data members unique names. For example, if you’re joining Instructor and Section tables, each table might contain a column named RoomNo; you might bind one column to <CODE>m_strInstrOffice</CODE> and the other to <CODE>m_strClassRoom</CODE>.</P></LI>

	<LI>Close ClassWizard.</LI>
</OL>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>When creating <B>CRecordset</B>-derived or <B>CDaoRecordset</B>-derived classes with ClassWizard, be careful when selecting multiple tables or queries. Selecting multiple tables or queries will result in the construction of a join query without any restriction on how to perform the join (called a cross-product or cartesian product join). You may want to specify a filter using <A HREF="JavaScript:hhobj_3.Click()">CRecordset::m_strFilter</A> or <A HREF="JavaScript:hhobj_4.Click()">CDaoRecordset::m_strFilter</A> (resulting in MFC building an SQL <B>WHERE</B> clause) before the recordset is opened. This will constrain the number of records in the result set. This is especially necessary when using the ODBC Cursor Library, since the Cursor Library may create a large temporary file for result sets with many records.</P>

<H3><A NAME="_core_modifying_the_source_files"></A>Modifying the Source Files</H3>

<P>Once you create the recordset class with ClassWizard, you must customize two parts of the class code. First, edit the class’s table list, then qualify any columns with the same name but from different tables. You’ll need to edit the calls in your <CODE>DoFieldExchange</CODE> override to insert table names.</P>

<P>For example, the student registration database for the MFC Tutorial sample <A HREF="JavaScript:hhobj_5.Click()">ENROLL</A> contains Instructor and Section tables. The Instructor table contains the following columns:

<UL type=disc>
	<LI>InstructorID<BR><BR></LI>

	<LI>Name<BR><BR></LI>

	<LI>RoomNo (the instructor’s office)</LI>
</UL>

<P>The Section table contains the following columns:

<UL type=disc>
	<LI>InstructorID<BR><BR></LI>

	<LI>Schedule<BR><BR></LI>

	<LI>RoomNo (where the class is held)<BR><BR></LI>

	<LI>SectionNo<BR><BR></LI>

	<LI>CourseID<BR><BR></LI>

	<LI>Capacity (maximum size of the section)</LI>
</UL>

<P class=label><B>To modify the recordset’s table list</B>

<UL type=disc>
	<LI>Rewrite the recordset’s <CODE>GetDefaultSQL</CODE> member function to return a string containing a comma-delimited list of table names.</LI>
</UL>

<P>For example, if your <CODE>CJoinSet</CODE> recordset joins a Course table to a Section table, you should rewrite your <CODE>GetDefaultSQL</CODE> function to look something like this:</P>

<PRE><CODE>CString CJoinSet::GetDefaultSQL()
{
    return "SECTION, INSTRUCTOR";
}
</CODE></PRE>

<P class=indent><B><B>Tip&nbsp;&nbsp;&nbsp;</B></B>As an alternative, you can pass a string containing a comma-delimited list of table names in the <B>lpszSQL</B> parameter when you call the recordset’s <B>Open</B> member function. The string has the same form as the string returned in the example above.</P>

<P class=label><B>To qualify columns with the same name from different tables</B>

<UL type=disc>
	<LI>Edit the RFX or Bulk RFX function calls in the recordset’s <A HREF="JavaScript:hhobj_6.Click()">DoFieldExchange</A> or <A HREF="JavaScript:hhobj_7.Click()">DoBulkFieldExchange</A> member function.
<P class=tl>For each duplicate column name, edit the second parameter in the RFX or Bulk RFX call to prefix a table name to the column name already there. Separate the table name and the column name with a period.</P></LI>
</UL>

<P>For example, because <CODE>CJoinSet</CODE> binds a <CODE>RoomNo</CODE> column from each table, you must modify the two RFX calls for these columns as shown in the following code:</P>

<PRE><CODE>void CJoinSet::DoFieldExchange(CFieldExchange* pFX)
{
    //{{AFX_FIELD_MAP(CJoinSet)
    SetFieldType(pFX, CFieldExchange::outputColumn);
    RFX_Text(pFX, "Section.RoomNo", m_strClassRoom);
    RFX_Text(pFX, "Instructor.RoomNo", m_strInstructorOffice);
    // ...
    //}}AFX_FIELD_MAP
}
</CODE></PRE>

<P>In the second parameter of each RFX function call above, the name <CODE>RoomNo</CODE> is prefixed by the table name. The two items are separated by a period.</P>



<H3><A NAME="_core_setting_the_join_conditions_with_a_filter"></A>Setting the Join Conditions with a Filter</H3>

<P>When you construct a <CODE>CJoinSet</CODE> object in your program, set its filter to specify which columns constitute the join. Then call the recordset’s <B>Open</B> member function as shown in the following example, which joins the Instructor and Section tables on their common InstructorID column:</P>

<PRE><CODE>CJoinSet ssJoin( NULL );
ssJoin.m_strFilter = "Instructor.InstructorID = Section.InstructorID";
if( !ssJoin.Open( ) )
    return FALSE;        // recordset could not be opened
</CODE></PRE>

<P>The filter supplies the connection between two columns that makes it possible to view two tables as if they were one.</P>

<P>You can join more than two tables in the same way by equating multiple pairs of columns, each pair joined by the SQL keyword <B>AND</B>.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_recordset.3a_.declaring_a_class_for_a_predefined_query_.28.odbc.29.htm">Recordset: Declaring a Class for a Predefined Query (ODBC)</A>, <A HREF="_core_recordset.3a_.declaring_a_class_for_a_table_.28.odbc.29.htm">Recordset: Declaring a Class for a Table (ODBC)</A>, <A HREF="_core_recordset.3a_.requerying_a_recordset_.28.odbc.29.htm">Recordset: Requerying a Recordset (ODBC)</A> </P>
</font>
</BODY>
</HTML>

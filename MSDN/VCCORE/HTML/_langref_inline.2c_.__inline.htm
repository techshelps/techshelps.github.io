<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>inline, __inline, __forceinline</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_inline.2c_.__inline"></A><SUP></SUP>inline, __inline, __forceinline </H1>

<P class=dt><B>inline</B> </P>

<P class=indent>&nbsp;<I>function_declarator</I><B>; </B>// C++ Specific</P>

<P class=dt><B>__inline</B></P>

<P class=indent><I>function_declarator</I><B>;</B>// Microsoft Specific</P>

<P class=dt><B>__forceinline</B></P>

<P class=indent><I>function_declarator</I><B>;</B>// Microsoft Specific</P>

<P>The <B>inline</B> and <B>__inline</B> keywords allow the compiler to insert a copy of the function body into each place the function is called. The insertion occurs only if the compiler's cost/benefit analysis show it to be profitable. The <B>__forceinline</B> keyword overrides the cost/benefit analysis and relies on the judgement of the programmer instead. Exercise caution when using <B>__forceinline</B>. Indiscriminate use of <B>__forceinline</B> can result in larger code with only marginal performance gains or, in some cases, even performance losses (due to increased paging of a larger executable, for example). </P>

<P>You cannot force the compiler to inline a function when conditions other than cost/benefit analysis prevent it. You cannot inline a function if: 

<UL type=disc>
	<LI>The function or its caller is compiled with /Ob0 (the default option for debug builds). <BR><BR></LI>

	<LI>The function and the caller use different types of exception handling (C++ exception handling in one, structured exception handling in the other). <BR><BR></LI>

	<LI>The function has a variable argument list. <BR><BR></LI>

	<LI>The function uses inline assembly and is not compiled with <A HREF="_core_.2f.og.htm">/Og</A>, <A HREF="_core_.2f.ox.htm">/Ox</A>, <A HREF="_core_.2f.o1.2c_2f.o2.htm">/O1</A>, or <A HREF="_core_.2f.o1.2c_2f.o2.htm">/O2</A>).&nbsp; <BR><BR></LI>

	<LI>Function returns an unwindable object by value and is not compiled with <A HREF="_core_.2f.gx.htm">/GX</A>, <A HREF="_core_.2f.eh.htm">/EHs</A>, or <A HREF="_core_.2f.eh.htm">/EHa</A>). <BR><BR></LI>

	<LI>The function receives a copy-constructed object passed by value, when compiled with <U>/GX</U>, <A HREF="_core_.2f.eh.htm">/EHs</A>,, or <U>/EHa</U>. <BR><BR></LI>

	<LI>The function is recursive and is not accompanied by <A HREF="_predir_inline_recursion.htm">#pragma(inline_recursion, on)</A>. With the pragma, recursive functions can be inlined to a default depth of eight calls. To change the inlining depth, use <A HREF="_predir_inline_depth.htm">#pragma(inline_depth, n)</A><B>.</B> </LI>
</UL>

<P>If the compiler cannot inline a function declared <B>__forceinline</B>, it generates a level 1 warning (4714).</P>

<P>The <B>inline</B> keyword is available only in C++. The <B>__inline</B> and <B>__forceinline</B> keywords are available in both C and C++. For compatibility with previous versions, <B>_inline</B> is a synonym for <B>__inline</B>.</P>

<P>Using inline functions can make your program faster because they eliminate the overhead associated with function calls. Functions expanded inline are subject to code optimizations not available to normal functions.</P>

<P>The <A HREF="_core_.2f.ob.htm">/Ob</A> compiler optimization option determines whether inline function expansion actually occurs.</P>

<P>For related information, see <A HREF="_predir_auto_inline.htm">auto_inline</A>.</P>

<P class=label><B>Example 1</B></P>

<PRE><CODE>inline int max( int a , int b )
{
   if( a &gt; b ) return a;
   return b;
}</CODE></PRE>

<P>A class's member functions can be declared inline either by using the <B>inline</B> keyword or by placing the function definition within the class definition.</P>

<P class=label><B>Example 2</B></P>

<PRE><CODE>class MyClass
{
public:
   void print() { cout &lt;&lt; i &lt;&lt; ''; }  // Implicitly inline
private:
   int i;
};</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_assembler_.28.inline.29_.topics.htm">Assembler (Inline) Topics</A></P>
</font>
</BODY>
</HTML>

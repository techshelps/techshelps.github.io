<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_alloca</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__alloca"></A><SUP></SUP>_alloca</H1>

<P>Allocates memory on the stack.</P>

<P><B>void</B> <B>*_alloca(</B> <B>size_t</B> <I>size</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Routine</B></TD>
<TD class=label width=29%><B>Required Header</B></TD>
<TD class=label width=53%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>_alloca</B></TD>
<TD width=29%>&lt;malloc.h&gt;</TD>
<TD width=53%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>The <B>_alloca</B> routine returns a <B>void</B> pointer to the allocated space, which is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than <B>char</B>, use a type cast on the return value. A stack overflow exception is generated if the space cannot be allocated.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>size</I></P>

<P class=indent>Bytes to be allocated from stack</P>

<P class=label><B>Remarks</B></P>

<P><B>_alloca</B> allocates <I>size</I> bytes from the program stack. The allocated space is automatically freed when the calling function exits. Therefore, do not pass the pointer value returned by <B>_alloca</B> as an argument to <A HREF="_crt_free.htm">free</A>.</P>

<P>There are restrictions to explicitly calling _<B>alloca</B> in an exception handler (EH). EH routines that run on x86-class processors operate in their own memory “frame”: They perform their tasks in memory space that is not based on the current location of the stack pointer of the enclosing function. The most common implementations include Windows NT structured exception handling (SEH) and C++ catch clause expressions. Therefore, explicitly calling _<B>alloca</B> in any of the following scenarios results in program failure during the return to the calling EH routine:

<UL type=disc>
	<LI>Windows NT SEH exception filter expression:&nbsp; __<B>except</B> ( <B>alloca()</B> )<BR><BR></LI>

	<LI>Windows NT SEH final exception handler:&nbsp; __<B>finally</B> { <B>alloca()</B> }<BR><BR></LI>

	<LI>C++ EH catch clause expression</LI>
</UL>

<P>However, _<B>alloca</B> can be called directly from within an EH routine or from an application-supplied callback that gets invoked by one of the EH scenarios listed above. </P>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_calloc.htm">calloc</A>, <A HREF="_crt_malloc.htm">malloc</A>, <A HREF="_crt_realloc.htm">realloc</A></P>
</font>
</BODY>
</HTML>

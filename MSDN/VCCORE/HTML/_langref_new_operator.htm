<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>new Operator</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_new_operator"></A><SUP></SUP>new Operator</H1>

<P><B>C++ Specific —&gt;</B></P>

<P>[<B>::</B>] <B>new</B> [<I>placement</I>] <I>type-name </I>[<I>initializer</I>]</P>

<P>[<B>::</B>] <B>new</B> [<I>placement</I>] <B>(</B> <I>type-name</I> <B>)</B> [<I>initializer</I>]</P>

<P>The <B>new</B> keyword allocates memory for an object of <I>type-name</I> from the free store and returns a suitably typed, nonzero pointer to an object. If unsuccessful, by default <B>new</B> returns zero. You can change this default behavior by writing a custom exception-handling routine and calling the <B>_set_new_handler</B> run-time library function with your function name as its argument.</P>

<P>Use the <A HREF="_langref_delete_operator.htm">delete</A> operator to deallocate the memory allocated with the <B>new</B> operator.</P>

<P>The following list describes the elements of <B>new</B>:</P>

<P class=dt><I>placement</I></P>

<P class=indent>Provides a way of passing additional arguments if you overload <B>new</B>. </P>

<P class=dt><I>type-name</I></P>

<P class=indent>Specifies type to be allocated. If the type specification is complicated, it can be surrounded by parentheses to force the order of binding.</P>

<P class=dt><I>initializer</I></P>

<P class=indent>Provides a value for the initialized object. Initializers cannot be specified for arrays. The <B>new</B> operator will create arrays of objects only if the class has a default constructor.</P>

<P><B>END C++ Specific</B></P>

<P class=label><B>Examples</B></P>

<P>The following statement allocates an integer.</P>

<PRE><CODE>int *pi = new int;</CODE></PRE>

<P>The following statement allocates a character and initializes it.</P>

<PRE><CODE>char *pc = new char( 'a' );</CODE></PRE>

<P>The following statement allocates an instance of <CODE>Date</CODE> using the class's three-argument constructor, and returns a pointer to it.</P>

<PRE><CODE>Date *pmc = new Date( 3, 12, 1985 );</CODE></PRE>

<P>The following statement allocates an array of characters.</P>

<PRE><CODE>char *pstr = new char[sizeof( str )];</CODE></PRE>

<P>The following statement allocates a two-dimensional array of characters of size dim * 10. When allocating a multidimensional array, all dimensions except the first must be constant expressions.</P>

<PRE><CODE>char (*pchar)[10] = new char[dim][10];</CODE></PRE>

<P>The following statement allocates an array of seven pointers to functions that return integers.</P>

<PRE><CODE>int (**p) () = new (int (*[7]) ());
</CODE></PRE>

<P>If you use the operator new without any extra arguments, and compile with the /GX, /EHs, or /EHa option, the compiler will generate code to call operator delete if the constructor throws an exception. </P>

<P>If you use the placement new form of the new operator, the form with arguments in addition to the size of the allocation, the compiler does not support a placement form of the delete operator if the constructor throws an exception. </P>

<P>Example </P>

<PRE><CODE>class A {
public:
    A(int) { throw "Fail!"; }
};
void foo(void)
{
    try {
        // heap memory pointed to by pa1 will be deallocated
        // by calling ::operator delete(void*).
        A* pa1 = new A(10);
    } catch (...) {
    }
    try {
        // This will call ::operator new(size_t, char*, int).
        // When A::A(int) does a throw, we should call
        // ::operator delete(void*, char*, int) to deallocate
        // the memory pointed to by pa2, but that's something
        // we don't support yet, so we'll leak memory.
        A* pa2 = new(__FILE__, __LINE__) A(20);
    } catch (...) {
    }
}</CODE></PRE>

<P>&nbsp;</P>
</font>
</BODY>
</HTML>

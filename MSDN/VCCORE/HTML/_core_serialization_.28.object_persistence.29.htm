<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Serialization (Object Persistence)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_gs_Serializing_the_Data">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_serialization_.28.object_persistence.29"></A>Serialization (Object Persistence)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_serialization.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_serialization_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A></P>

<P>This article explains the serialization mechanism provided in the Microsoft Foundation Class Library (MFC) to allow objects to persist between runs of your program.</P>

<P>“Serialization” is the process of writing or reading an object to or from a persistent storage medium, such as a disk file. MFC supplies built-in support for serialization in the class <B>CObject</B>. Thus, all classes derived from <B>CObject</B> can take advantage of <B>CObject</B>’s serialization protocol.</P>

<P>The basic idea of serialization is that an object should be able to write its current state, usually indicated by the value of its member variables, to persistent storage. Later, the object can be re-created by reading, or deserializing, the object’s state from the storage. Serialization handles all the details of object pointers and circular references to objects that are used when you serialize an object. A key point is that the object itself is responsible for reading and writing its own state. Thus, for a class to be serializable, it must implement the basic serialization operations. As shown in the Serialization group of articles, it is easy to add this functionality to a class.</P>

<P>MFC uses an object of the <B>CArchive</B> class as an intermediary between the object to be serialized and the storage medium. This object is always associated with a <B>CFile</B> object, from which it obtains the necessary information for serialization, including the file name and whether the requested operation is a read or write. The object that performs a serialization operation can use the <B>CArchive</B> object without regard to the nature of the storage medium.</P>

<P>A <B>CArchive</B> object uses overloaded insertion (<B>&lt;&lt;</B>) and extraction (<B>&gt;&gt;</B>) operators to perform writing and reading operations. For more information, see <A HREF="_core_serialization.3a_.serializing_an_object.htm#_core_storing_and_loading_cobjects_via_an_archive">Storing and Loading CObjects via an Archive</A> in the article Serialization: Serializing an Object.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Do not confuse the <B>CArchive</B> class with general-purpose iostream classes, which are for formatted text only. The <B>CArchive</B> class is for binary-format serialized objects.</P>

<P>The following articles cover the two main tasks required for serialization:

<UL type=disc>
	<LI><A HREF="_core_serialization.3a_.making_a_serializable_class.htm">Serialization: Making a Serializable Class</A><BR><BR></LI>

	<LI><A HREF="_core_serialization.3a_.serializing_an_object.htm">Serialization: Serializing an Object</A></LI>
</UL>

<P>The article <A HREF="_core_serialization.3a_.serialization_vs.._database_input.2f.output.htm">Serialization: Serialization vs. Database Input/Output</A> is part of the group of articles on database topics. The article describes when serialization is an appropriate input/output technique in database applications.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>try, catch, and throw Statements</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_try.2c_.catch.2c_.and_throw_statements"></A><SUP></SUP>try, catch, and throw Statements</H1>

<P><B>C++ Specific —&gt;</B></P>

<P>C++ exception handling uses the <B>try</B>, <B>catch</B>, and <B>throw</B> statements to implement exception handling. With C++ exception handling, your program can communicate unexpected events to a higher execution context that is better able to recover from such abnormal events. These exceptions are handled by code that is outside the normal flow of control.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The Win32 structured exception-handling mechanism works with both C and C++ source files. However, it is not specifically designed for C++. You can ensure that your code is more portable by using C++ exception handling. Also, C++ exception handling is more flexible, in that it can handle exceptions of any type. For C++ programs, it is recommended that you use the C++ exception-handling mechanism (<B>try</B>, <B>catch</B>, <B>throw</B>) described in this topic.</P>

<P><I>try-block</I> :<BR>
<B>try</B> <I>compound-statement handler-list</I></P>

<P><I>handler-list</I> :<BR>
<I>handler handler-list</I><SUB>opt</SUB></P>

<P><I>handler</I> :<BR>
<B>catch</B> ( <I>exception-declaration</I> ) <I>compound-statement</I></P>

<P><I>exception-declaration</I> :<BR>
<I>type-specifier-list declarator</I><BR>
<I>type-specifier-list abstract-declarator</I><BR>
<I>type-specifier-list</I><BR>
<B>...</B></P>

<P><I>throw-expression</I> :<BR>
<B>throw</B> <I>assignment-expression</I><SUB>opt</SUB></P>

<P>The <I>compound-statement</I> after the <B>try</B> clause is the guarded section of code. The <I>throw-expression</I> “throws” (raises) an exception. The <I>compound-statement</I> after the <B>catch</B> clause is the exception handler, and “catches” (handles) the exception thrown by the throw-expression. The <I>exception-declaration</I> statement indicates the type of exception the clause handles. The type can be any valid data type, including a C++ class. If the exception-declaration statement is an ellipsis (<B>...</B>), the <B>catch</B> clause handles any type of exception, including a C exception. Such a handler must be the last handler for its try-block.</P>

<P>The operand of <B>throw</B> is syntactically similar to the operand of a <B>return</B> statement.</P>

<P class=indent><B>Note</B>&nbsp;&nbsp;&nbsp;Microsoft C++ does not support <I>exception-specifications</I>, as described in section 15.4 of the ANSI C++ draft. In addition, it does not support <I>function-try-block</I> described in section 15 of the ANSI C++ draft.</P>

<P>For more information on C++ exception handling, see <A HREF="_core_exception_handling_topics_.28.c.2b2b29.htm">Exception Handling Topics (C++)</A>. For information on exception handling in general, see <A HREF="_core_exception_handling.3a_.overview.htm">Exception Handling: Overview</A>. </P>

<P><B>END C++ Specific</B></P>

<P class=label><B>Example</B></P>

<P>In the following example, the <CODE>try</CODE> block attempts to write the headers. The <CODE>catch</CODE> block then handles a specific file exception, and passes all other exceptions on to the outer block with the <CODE>throw</CODE> macro:</P>

<PRE><CODE>// Example of the try and catch statements
try
{
      // Write the file header
      file.Write((LPSTR)&amp;bmfHdr, sizeof(BITMAPFILEHEADER));
      //
      // Write the DIB header and the bits
      file.WriteHuge(lpBI, dwDIBSize);
}
catch (CFileException* e)
   {
      ::GlobalUnlock((HGLOBAL) hDib);
      throw;
   }

::GlobalUnlock((HGLOBAL) hDib);
   return TRUE;</CODE></PRE>
</font>
</BODY>
</HTML>

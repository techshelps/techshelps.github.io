<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISAPI Programming Tips</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CHttpFilterContext.3a3a.AllocMem">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_isapi_programming_tips"></A>ISAPI Programming Tips</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_internet_support.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_internet_tasks.htm">How Do I</A></P>

<P>It is important to remember that your ISAPI application is running in the context of a service on NT. This means your code must be thread safe, it must be reentrant, and it has no user interface on the server.

<UL type=disc>
	<LI>Watch your resource usage. Release acquired resources. For example, you might not be able to keep an ODBC connection for the life of the server.<BR><BR></LI>

	<LI>Be thread safe. Use <A HREF="_core_multithreading.3a_.how_to_use_the_synchronization_classes.htm">synchronization objects</A> to protect data. Don’t use global variables.<BR><BR></LI>

	<LI>Write your filters to use the appropriate priority notification, at the lowest priority possible. A filter to authorize users may need to run at high priority. In this case, if a user fails authorization, the other lower-priority filter notifications will never be called.<BR><BR></LI>

	<LI>Be efficient in your filter processing. Filter functions can be called for all server requests, and an inefficient filter could slow down processing noticeably. If you are not using all the filter notifications you originally specified, alter <B>dwFlags</B> in <B>GetFilterVersion </B>to delete unneeded notifications.<BR><BR></LI>

	<LI>Do not display dialog boxes on the server, which may be running unattended with no one to click OK. Instead, log error information to a log file or a database.</LI>
</UL>

<H2><A NAME="_core_server_extension_.28.isa.29_.memory_management"></A>Server Extension (ISA) Memory Management</H2>

<P>If you want to allocate data on a per-call basis, you must use the data carefully within a synchronization object. The example below demonstrates overriding the <B>HttpExtensionProc</B> member function and using a critical section to associate per-call data with the <B>ConnID</B>. The base class is then called to process the request. Any member functions that use the data must protect it with a synchronization object. Upon return from <B>HttpExtensionProc</B> processing, the data for that <B>ConnID </B>is freed.</P>

<PRE><CODE>// in your .H file, declare variables and override HttpExtensionProc
class CISAPIWizExtension : public CHttpServer
{
    // per-call data
    CString* pData;
    CCriticalSection m_critSect;
    CMap &lt; HCONN, HCONN&amp;, CString*, CString* &gt; m_map;

    // allocate per-call data
    DWORD HttpExtensionProc(EXTENSION_CONTROL_BLOCK* pECB);
};

// in your .CPP file, override HttpExtensionProc,
// to set per-call data for this connection
DWORD CISAPIWizExtension::HttpExtensionProc(EXTENSION_CONTROL_BLOCK* pECB)
{
    DWORD dwResult;
    // allocate per-call data
    // using the data type of your choice
    pData = new CString("whatever data you want");
    m_critSect.Lock();
    m_map.SetAt(pECB-&gt;ConnID, pData);
    m_critSect.Unlock();


    // call base class to do the work
    // remember, any member functions
    // that use the per-call data
    // must also access it within critical sections
    dwResult = CHttpServer::HttpExtensionProc(pECB);

    // delete per-call data
    m_critSect.Lock();
    m_map.Lookup(pECB-&gt;ConnID, pData);
    m_map.RemoveKey(pECB-&gt;ConnID);
    delete pData; 
    m_critSect.Unlock();
    return dwResult;
}
</CODE></PRE>

<H2><A NAME="_core_filter_memory_management"></A>Filter Memory Management</H2>

<P>Most filters will register for the end of net session event. You can use this event to recycle any buffers used by that client request. For performance reasons, most filters will probably keep a pool of filter buffers and only allocate or free memory when the pool becomes empty or so large it no longer saves on the overhead of memory management. To allocate memory that is automatically freed when the communication with the client is terminated, use <A HREF="JavaScript:hhobj_2.Click()">CHttpFilterContext::AllocMem</A>. Using <B>AllocMem</B> presents a tradeoff: It is a valuable memory management tool, but it can affect performance, as noted earlier.</P>

<P><B>See Also&nbsp;&nbsp;&nbsp;</B><A HREF="_core_internet_first_steps.3a_.application_design_choices.htm">Internet First Steps: Application Design Choices</A>, <A HREF="_core_isapi.3a_.debugging.htm">ISAPI: Debugging</A>, <A HREF="_core_internet.3a_.where_is.......htm">Internet: Where Is...</A>, <A HREF="_core_isapi.3a_.debugging.htm">ISAPI: Debugging</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Template Instantiation</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_function_template_instantiation"></A><SUP></SUP>Function Template Instantiation</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>When a function template is first called for each type, the compiler creates an “instantiation,” this is a version of the templated function specialized for the type. This instantiation will be called every time the function is used for the type. If you have several identical instantiations, even in different modules, only one copy of the instantiation will end up in the executable file.</P>

<P>Conversion of function arguments is allowed in function templates for any argument and parameter pair where the parameter does not depend on a template argument. For example:</P>

<PRE><CODE>template&lt;class T&gt; void f(T, int){ };

int i; char c;
f(i, c);
</CODE></PRE>

<P>In this example, a conversion of <CODE>i</CODE> to type <CODE>T</CODE> may cause an error. However, the conversion of (<CODE>char c</CODE>) to <CODE>int</CODE> is allowed.</P>

<P>Visual C++ 5.0, and later, now supports explicit instantiation of function templates. Previous versions only supported the explicit instantiation of class templates. For example, the following code is now legal:</P>

<PRE><CODE>template&lt;class T&gt; void f(T) {...}

//Instantiate f with the explicitly specified template
//argument ‘int’
//
template void f&lt;int&gt; (int);

//Instantiate f with the deduced template argument 'char'
//
template void f(char);
</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_explicit_specialization_of_function_templates.htm">Explicit Specialization of Function Templates</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>is, isw Routines</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_is.2c_.isw_routines"></A><SUP></SUP>is, isw Routines</H1>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt_isalnum.2c_.iswalnum.htm">isalnum, iswalnum</A></TD>
<TD width=52%><A HREF="_crt_islower.2c_.iswlower.htm">islower, iswlower</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt_isalpha.2c_.iswalpha.htm">isalpha, iswalpha</A></TD>
<TD width=52%><A HREF="_crt_isprint.2c_.iswprint.htm">isprint, iswprint</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt___isascii.2c_.iswascii.htm">__isascii, iswascii</A></TD>
<TD width=52%><A HREF="_crt_ispunct.2c_.iswpunct.htm">ispunct, iswpunct</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt_iscntrl.2c_.iswcntrl.htm">iscntrl, iswcntrl</A></TD>
<TD width=52%><A HREF="_crt_isspace.2c_.iswspace.htm">isspace, iswspace</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt___iscsym.2c_.__iscsymf.htm">__iscsym, __iscsymf</A></TD>
<TD width=52%><A HREF="_crt_isupper.2c_.iswupper.htm">isupper, iswupper</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt_isdigit.2c_.iswdigit.htm">isdigit, iswdigit</A></TD>
<TD width=52%><A HREF="_crt_isxdigit.2c_.iswxdigit.htm">isxdigit, iswxdigit</A></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><A HREF="_crt_isgraph.2c_.iswgraph.htm">isgraph, iswgraph</A></TD>
<TD width=52%><A HREF="_crt_iswctype.htm">iswctype</A></TD>
</TR>
</TABLE><BR>

<P class=label><B>Remarks</B></P>

<P>These routines test characters for specified conditions.</P>

<P>The <B>is</B> routines produce meaningful results for any integer argument from –1 (<B>EOF</B>) to <B>UCHAR_MAX</B> (0xFF), inclusive. The expected argument type is <B>int</B>.</P>

<P class=indent><B><B>Warning</B></B>&nbsp;&nbsp;&nbsp;For the <B>is</B> routines, passing an argument of type <B>char</B> may yield unpredictable results. An SBCS or MBCS single-byte character of type <B>char</B> with a value greater than 0x7F is negative. If a <B>char</B> is passed, the compiler may convert the value to a signed <B>int</B> or a signed <B>long</B>. This value may be sign-extended by the compiler, with unexpected results.</P>

<P>The <B>isw</B> routines produce meaningful results for any integer value from – 1 (<B>WEOF</B>) to 0xFFFF, inclusive. The <B>wint_t</B> data type is defined in WCHAR.H as an <B>unsigned short</B>; it can hold any wide character or the wide-character end-of-file (<B>WEOF</B>) value.</P>

<P>For each of the <B>is</B> routines, the result of the test for the specified condition depends on the <B>LC_CTYPE</B> category setting of the current locale; see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A> for more information. In the “C” locale, the test conditions for the <B>is</B> routines are as follows:</P>

<P class=dt><B>isalnum</B></P>

<P class=indent>Alphanumeric (A – Z, a – z, or 0 – 9) </P>

<P class=dt><B>isalpha</B></P>

<P class=indent>Alphabetic (A – Z or a – z)</P>

<P class=dt><B>__isascii</B></P>

<P class=indent>ASCII character (0x00 – 0x7F)</P>

<P class=dt><B>iscntrl</B></P>

<P class=indent>Control character (0x00 – 0x1F or 0x7F)</P>

<P class=dt><B>__iscsym</B></P>

<P class=indent>Letter, underscore, or digit</P>

<P class=dt><B>__iscsymf</B></P>

<P class=indent>Letter or underscore</P>

<P class=dt><B>isdigit</B></P>

<P class=indent>Decimal digit (0 – 9)</P>

<P class=dt><B>isgraph</B></P>

<P class=indent>Printable character except space ( )</P>

<P class=dt><B>islower</B></P>

<P class=indent>Lowercase letter (a – z)</P>

<P class=dt><B>isprint</B></P>

<P class=indent>Printable character including space (0x20 – 0x7E)</P>

<P class=dt><B>ispunct</B></P>

<P class=indent>Punctuation character</P>

<P class=dt><B>isspace</B></P>

<P class=indent>White-space character (0x09 – 0x0D or 0x20)</P>

<P class=dt><B>isupper</B></P>

<P class=indent>Uppercase letter (A – Z)</P>

<P class=dt><B>isxdigit</B></P>

<P class=indent>Hexadecimal digit (A – F, a – f, or 0 – 9)</P>

<P>For the <B>isw</B> routines, the result of the test for the specified condition is independent of locale. The test conditions for the <B>isw</B> functions are as follows:</P>

<P class=dt><B>iswalnum</B></P>

<P class=indent><B>iswalpha</B> or <B>iswdigit</B></P>

<P class=dt><B>iswalpha</B></P>

<P class=indent>Any wide character that is one of an implementation-defined set for which none of <B>iswcntrl</B>, <B>iswdigit</B>, <B>iswpunct</B>, or <B>iswspace</B> is true. <B>iswalpha</B> returns true only for wide characters for which <B>iswupper</B> or <B>iswlower</B> is true.</P>

<P class=dt><B>iswascii</B></P>

<P class=indent>Wide-character representation of ASCII character (0x0000 – 0x007F).</P>

<P class=dt><B>iswcntrl</B></P>

<P class=indent>Control wide character.</P>

<P class=dt><B>iswctype</B></P>

<P class=indent>Character has property specified by the <I>desc</I> argument. For each valid value of the <I>desc</I> argument of <B>iswctype</B>, there is an equivalent wide-character classification routine, as shown in the following table:</P>

<P class=label><B>Equivalence of iswctype( <I>c, desc</I> ) to Other isw Testing Routines</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=54%><B>Value of <I>desc </I>Argument</B></TD>
<TD class=label width=46%><B>iswctype( <I>c, desc</I> ) Equivalent</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_ALPHA</B></TD>
<TD width=46%><B>iswalpha(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_ALPHA</B> | <B>_DIGIT</B></TD>
<TD width=46%><B>iswalnum(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_CONTROL</B></TD>
<TD width=46%><B>iswcntrl(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_DIGIT</B></TD>
<TD width=46%><B>iswdigit(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_ALPHA</B> | <B>_DIGIT</B> | <B>_PUNCT</B></TD>
<TD width=46%><B>iswgraph(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_LOWER</B></TD>
<TD width=46%><B>iswlower(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_ALPHA</B> | <B>_BLANK</B> | <B>_DIGIT</B> | <B>_PUNCT</B></TD>
<TD width=46%><B>iswprint(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_PUNCT</B></TD>
<TD width=46%><B>iswpunct(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_SPACE</B></TD>
<TD width=46%><B>iswspace(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_UPPER</B></TD>
<TD width=46%><B>iswupper(</B> <I>c</I> <B>)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%><B>_HEX</B></TD>
<TD width=46%><B>iswxdigit(</B> <I>c</I> <B>)</B></TD>
</TR>
</TABLE><BR>

<P class=dt><B>iswdigit</B></P>

<P class=indent>Wide character corresponding to a decimal-digit character.</P>

<P class=dt><B>iswgraph</B></P>

<P class=indent>Printable wide character except space wide character (L' ').</P>

<P class=dt><B>iswlower</B></P>

<P class=indent>Lowercase letter, or one of implementation-defined set of wide characters for which none of <B>iswcntrl</B>, <B>iswdigit</B>, <B>iswpunct</B>, or <B>iswspace</B> is true. <B>iswlower</B> returns true only for wide characters that correspond to lowercase letters.</P>

<P class=dt><B>iswprint</B></P>

<P class=indent>Printable wide character, including space wide character (L' ').</P>

<P class=dt><B>iswpunct</B></P>

<P class=indent>Printable wide character that is neither space wide character (L' ') nor wide character for which <B>iswalnum</B> is true.</P>

<P class=dt><B>iswspace</B></P>

<P class=indent>Wide character that corresponds to standard white-space character or is one of implementation-defined set of wide characters for which <B>iswalnum</B> is false. Standard white-space characters are: space (L' '), formfeed (L'\f'), newline (L'\n'), carriage return (L'\r'), horizontal tab (L'\t'), and vertical tab (L'\v'). </P>

<P class=dt><B>iswupper</B></P>

<P class=indent>Wide character that is uppercase or is one of an implementation-defined set of wide characters for which none of <B>iswcntrl</B>, <B>iswdigit</B>, <B>iswpunct</B>, or <B>iswspace</B> is true. <B>iswupper</B> returns true only for wide characters that correspond to uppercase characters.</P>

<P class=dt><B>iswxdigit</B></P>

<P class=indent>Wide character that corresponds to a hexadecimal-digit character.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* ISFAM.C: This program tests all characters between 0x0
 * and 0x7F, then displays each character with abbreviations
 * for the character-type codes that apply.

 * Editor's note: the following output is significantly 
 * shortened with the use of ellipses. This full output 
 * is too long and repetitive.
 */

#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

void main( void )
{
   int ch;
   for( ch = 0; ch &lt;= 0x7F; ch++ )
   {
      printf( "%.2x  ", ch );
      printf( " %c", isprint( ch )  ? ch   : '\0' );
      printf( "%4s", isalnum( ch )  ? "AN" : "" );
      printf( "%3s", isalpha( ch )  ? "A"  : "" );
      printf( "%3s", __isascii( ch )  ? "AS" : "" );
      printf( "%3s", iscntrl( ch )  ? "C"  : "" );
      printf( "%3s", __iscsym( ch )  ? "CS "  : "" );
      printf( "%3s", __iscsymf( ch )  ? "CSF"  : "" );
      printf( "%3s", isdigit( ch )  ? "D"  : "" );
      printf( "%3s", isgraph( ch )  ? "G"  : "" );
      printf( "%3s", islower( ch )  ? "L"  : "" );
      printf( "%3s", ispunct( ch )  ? "PU" : "" );
      printf( "%3s", isspace( ch )  ? "S"  : "" );
      printf( "%3s", isprint( ch )  ? "PR" : "" );
      printf( "%3s", isupper( ch )  ? "U"  : "" );
      printf( "%3s", isxdigit( ch ) ? "X"  : "" );
      printf( "\n" );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>00   
01   
02   
03   
04   
05   
06   
07   
08   
09   
0a   
0b   
0c   
0d   
0e   
0f   
10   
11   
12   
13   
14   
15   
16   
17   
18   
19   
1a   
1b   
1c   
1d   
1e   
1f   
20            AS                       S PR      
21   !        AS              G    PU    PR      
22   "        AS              G    PU    PR      
23   #        AS              G    PU    PR      
24   $        AS              G    PU    PR      
25   %        AS              G    PU    PR      
26   &amp;        AS              G    PU    PR      
27   '        AS              G    PU    PR      
28   (        AS              G    PU    PR      
29   )        AS              G    PU    PR      
2a   *        AS              G    PU    PR      
2b   +        AS              G    PU    PR      
2c   ,        AS              G    PU    PR      
2d   -        AS              G    PU    PR      
2e   .        AS              G    PU    PR      
2f   /        AS              G    PU    PR      
30   0  AN    AS   CS      D  G          PR     X
31   1  AN    AS   CS      D  G          PR     X
32   2  AN    AS   CS      D  G          PR     X
33   3  AN    AS   CS      D  G          PR     X
34   4  AN    AS   CS      D  G          PR     X
35   5  AN    AS   CS      D  G          PR     X
36   6  AN    AS   CS      D  G          PR     X
37   7  AN    AS   CS      D  G          PR     X
38   8  AN    AS   CS      D  G          PR     X
.
.
.
39   9  AN    AS   CS      D  G          PR     X
3a   :        AS              G    PU    PR      
3b   ;        AS              G    PU    PR      
3c   &lt;        AS              G    PU    PR      
3d   =        AS              G    PU    PR      
.
.
.
3e   &gt;        AS              G    PU    PR      
3f   ?        AS              G    PU    PR      
40   @        AS              G    PU    PR      
41   A  AN  A AS   CS CSF     G          PR  U  X
42   B  AN  A AS   CS CSF     G          PR  U  X
43   C  AN  A AS   CS CSF     G          PR  U  X
44   D  AN  A AS   CS CSF     G          PR  U  X
45   E  AN  A AS   CS CSF     G          PR  U  X
46   F  AN  A AS   CS CSF     G          PR  U  X
47   G  AN  A AS   CS CSF     G          PR  U   
48   H  AN  A AS   CS CSF     G          PR  U   
49   I  AN  A AS   CS CSF     G          PR  U   
4a   J  AN  A AS   CS CSF     G          PR  U   
4b   K  AN  A AS   CS CSF     G          PR  U   
4c   L  AN  A AS   CS CSF     G          PR  U   
4d   M  AN  A AS   CS CSF     G          PR  U   
4e   N  AN  A AS   CS CSF     G          PR  U   
4f   O  AN  A AS   CS CSF     G          PR  U   
50   P  AN  A AS   CS CSF     G          PR  U   
51   Q  AN  A AS   CS CSF     G          PR  U   
52   R  AN  A AS   CS CSF     G          PR  U   
53   S  AN  A AS   CS CSF     G          PR  U   
54   T  AN  A AS   CS CSF     G          PR  U   
55   U  AN  A AS   CS CSF     G          PR  U   
56   V  AN  A AS   CS CSF     G          PR  U   
57   W  AN  A AS   CS CSF     G          PR  U   
58   X  AN  A AS   CS CSF     G          PR  U   
59   Y  AN  A AS   CS CSF     G          PR  U   
5a   Z  AN  A AS   CS CSF     G          PR  U   
5b   [        AS              G    PU    PR      
5c   \        AS              G    PU    PR      
5d   ]        AS              G    PU    PR      
5e   ^        AS              G    PU    PR      
5f   _        AS   CS CSF     G    PU    PR      
60   `        AS              G    PU    PR      
61   a  AN  A AS   CS CSF     G  L       PR     X
62   b  AN  A AS   CS CSF     G  L       PR     X
63   c  AN  A AS   CS CSF     G  L       PR     X
64   d  AN  A AS   CS CSF     G  L       PR     X
65   e  AN  A AS   CS CSF     G  L       PR     X
66   f  AN  A AS   CS CSF     G  L       PR     X
67   g  AN  A AS   CS CSF     G  L       PR      
68   h  AN  A AS   CS CSF     G  L       PR      
69   i  AN  A AS   CS CSF     G  L       PR      
6a   j  AN  A AS   CS CSF     G  L       PR      
6b   k  AN  A AS   CS CSF     G  L       PR      
6c   l  AN  A AS   CS CSF     G  L       PR      
6d   m  AN  A AS   CS CSF     G  L       PR      
6e   n  AN  A AS   CS CSF     G  L       PR      
6f   o  AN  A AS   CS CSF     G  L       PR      
70   p  AN  A AS   CS CSF     G  L       PR      
71   q  AN  A AS   CS CSF     G  L       PR      
72   r  AN  A AS   CS CSF     G  L       PR      
73   s  AN  A AS   CS CSF     G  L       PR      
74   t  AN  A AS   CS CSF     G  L       PR      
75   u  AN  A AS   CS CSF     G  L       PR      
76   v  AN  A AS   CS CSF     G  L       PR      
77   w  AN  A AS   CS CSF     G  L       PR      
78   x  AN  A AS   CS CSF     G  L       PR      
79   y  AN  A AS   CS CSF     G  L       PR      
7a   z  AN  A AS   CS CSF     G  L       PR      
7b   {        AS              G    PU    PR      
7c   |        AS              G    PU    PR      
7d   }        AS              G    PU    PR      
7e   ~        AS              G    PU    PR      
7f   

</CODE></PRE>

<P><A HREF="_crt_character_classification.htm">Character Classification Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>, <A HREF="_crt_to_functions.htm">to Function Overview</A> </P>
</font>
</BODY>
</HTML>

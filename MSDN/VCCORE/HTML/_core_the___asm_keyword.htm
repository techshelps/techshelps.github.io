<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The __asm Keyword</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_the___asm_keyword"></A>The __asm Keyword</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.293a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.29_.tasks.htm">How Do I</A></P>

<P>The <B>__asm</B> keyword invokes the inline assembler and can appear wherever a C or C++ statement is legal. It cannot appear by itself. It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces. The term “<B>__asm</B> block” here refers to any instruction or group of instructions, whether or not in braces. </P>

<P>The following code fragment is a simple <B>__asm</B> block enclosed in braces: </P>

<PRE><CODE>__asm
{
   mov al, 2
   mov dx, 0xD007
   out al, dx
}
</CODE></PRE>

<P>Alternatively, you can put <B>__asm</B> in front of each assembly instruction:</P>

<PRE><CODE>__asm mov al, 2
__asm mov dx, 0xD007
__asm out al, dx
</CODE></PRE>

<P>Because the <B>__asm</B> keyword is a statement separator, you can also put assembly instructions on the same line:</P>

<PRE><CODE>__asm mov al, 2   __asm mov dx, 0xD007   __asm out al, dx
</CODE></PRE>

<P>All three examples generate the same code, but the first style (enclosing the <B>__asm</B> block in braces) has some advantages. The braces clearly separate assembly code from C or C++ code and avoid needless repetition of the <B>__asm</B> keyword. Braces can also prevent ambiguities. If you want to put a C or C++ statement on the same line as an <B>__asm</B> block, you must enclose the block in braces. Without the braces, the compiler cannot tell where assembly code stops and C or C++ statements begin. Finally, because the text in braces has the same format as ordinary MASM text, you can easily cut and paste text from existing MASM source files.</P>

<P>Unlike braces in C and C++, the braces enclosing an <B>__asm</B> block don’t affect variable scope. You can also nest <B>__asm</B> blocks; nesting does not affect variable scope.</P>
</font>
</BODY>
</HTML>

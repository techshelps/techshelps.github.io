<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>warning</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_warning"></A>warning</H1>

<P><B>#pragma warning(</B> <I>warning-specifier</I> <B>:</B> <I>warning-number-list</I> [<B>,</B><I>warning-specifier</I> <B>:</B> <I>warning-number-list</I>...] <B>)</B></P>

<P><B>#pragma warning(</B> <B>push</B>[ <B>, </B><I>n</I> ] <B>)</B></P>

<P><B>#pragma warning(</B> <B>pop )</B></P>

<P>Allows selective modification of the behavior of compiler warning messages.</P>

<P>The <I>warning-specifier</I> can be one of the following.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=31%><B><I>Warning-specifier</I></B></TD>
<TD class=label width=69%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>once</B></TD>
<TD width=69%>Display the specified message(s) only once.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>default</B></TD>
<TD width=69%>Apply the default compiler behavior to the specified message(s).</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>1</B>, <B>2</B>, <B>3</B>, <B>4</B></TD>
<TD width=69%>Apply the given warning level to the specified warning message(s).</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>disable</B></TD>
<TD width=69%>Do not issue the specified warning message(s).</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>error</B></TD>
<TD width=69%>Report the specified warnings as errors.</TD>
</TR>
</TABLE><BR>

<P>The <I>warning-number-list</I> can contain any warning numbers. Multiple options can be specified in the same pragma directive as follows:</P>

<PRE><CODE>#pragma warning( disable : 4507 34; once : 4385; error : 164 )
</CODE></PRE>

<P>This is functionally equivalent to:</P>

<PRE><CODE>#pragma warning( disable : 4507 34 )  // Disable warning messages
                                      //  4507 and 34.
#pragma warning( once : 4385 )        // Issue warning 4385
                                      //  only once.
#pragma warning( error : 164 )        // Report warning 164
                                      //  as an error.
</CODE></PRE>

<P>For warning numbers greater than 4699, those associated with code generation, the <B>warning</B> pragma has effect only when placed outside function definitions. The pragma is ignored if it specifies a number greater than 4699 and is used inside a function. The following example illustrates the correct placement of <B>warning</B> pragmas to disable, and then restore, the generation of a code-generation warning message:</P>

<PRE><CODE>int a;
#pragma warning( disable : 4705 )
void func()
{
    a;
}
#pragma warning( default : 4705 )
</CODE></PRE>

<P>The <B>warning</B> pragma also supports the following syntax:</P>

<P><B>#pragma warning(</B> <B>push</B> [ <B>,</B><I>n</I> ] <B>)</B></P>

<P><B>#pragma warning(</B> <B>pop )</B></P>

<P>Where <I>n</I> represents a warning level (1 through 4). </P>

<P>The pragma <B>warning( push ) </B>stores the current warning state for all warnings. The pragma <B>warning( push, </B><I>n</I><B>) </B>stores the current state for all warnings and sets the global warning level to <I>n</I>. </P>

<P>The pragma <B>warning( pop ) </B>pops the last warning state pushed onto the stack. Any changes made to the warning state between <B>push</B> and <B>pop</B> are undone. Consider this example:</P>

<PRE><CODE>#pragma warning( push )
#pragma warning( disable : 4705 )
#pragma warning( disable : 4706 )
#pragma warning( disable : 4707 )
// Some code
#pragma warning( pop ) 
</CODE></PRE>

<P>At the end of this code, <B>pop</B> restores the state of all warnings (including 4705, 4706, and 4707) to what it was at the beginning of the code.</P>

<P>When you write header files, you can use <B>push</B> and <B>pop</B> to ensure that changes to warning states made by the user do not prevent your headers from compiling properly. Use <B>push</B> at the beginning of the header and <B>pop</B> at the end. Suppose, for example, you have a header that does not compile cleanly at warning level 4. The following code changes the warning level to 3, then restores the original warning level at the end of the header:</P>

<PRE><CODE>#pragma warning( push, 3 )
// Declarations/ definitions
#pragma warning( pop ) 
</CODE></PRE>
</font>
</BODY>
</HTML>

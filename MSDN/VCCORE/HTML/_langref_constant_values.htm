<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constant Values</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_constant_values"></A><SUP></SUP>Constant Values</H1>

<P>The <B>const</B> keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it.</P>

<PRE><CODE>const int i = 5;

i = 10; // Error
i++;    // Error</CODE></PRE>

<P>In C++, you can use the <B>const</B> keyword instead of the <A HREF="_predir_the_.23.define_directive.htm">#define</A> preprocessor directive to define constant values. Values defined with <B>const</B> are subject to type checking, and can be used in place of constant expressions. In C++, you can specify the size of an array with a <B>const</B> variable as follows:</P>

<PRE><CODE>const int maxarray = 255;
char store_char[maxarray];  // Legal in C++; illegal in C</CODE></PRE>

<P>In C, constant values default to external linkage, so they can appear only in source files. In C++, constant values default to internal linkage, which allows them to appear in header files.</P>

<P>The <B>const</B> keyword can also be used in pointer declarations.</P>

<PRE><CODE>char *const aptr = mybuf;  // Constant pointer

*aptr = 'a';       // Legal
aptr = yourbuf;    // Error</CODE></PRE>

<P>A pointer to a variable declared as <B>const</B> can be assigned only to a pointer that is also declared as <B>const</B>.</P>

<PRE><CODE>const char *bptr = mybuf;  // Pointer to constant data

*bptr = 'a';       // Error
bptr = yourbuf;    // Legal</CODE></PRE>

<P>You can use pointers to constant data as function parameters to prevent the function from modifying a parameter passed through a pointer.</P>

<P>You can call constant member functions only for a constant object. This ensures that the object is never modified.</P>

<PRE><CODE>birthday.getMonth();    // Okay
birthday.setMonth( 4 ); // Error</CODE></PRE>

<P>You can call either constant or nonconstant member functions for a nonconstant object. You can also overload a member function using the <B>const</B> keyword; this allows a different version of the function to be called for constant and nonconstant objects.</P>

<P>You cannot declare constructors or destructors with the <B>const</B> keyword.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_langref_constant_member_functions.htm">Constant Member Functions</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Functions That Access the Extra Window Data</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_functions_that_access_the_extra_window_data"></A><SUP></SUP>Functions That Access the Extra Window Data</H1>

<P>The functions described in this section manipulate the “extra” data area of a window structure. This structure can contain system information and user-defined data. You specify the size of this data area by using the <B>cbClsExtra</B> and <B>cbWndExtra</B> members of the <B>WNDCLASS</B> structure when you register the window class.</P>

<P>The following Windows 3.<I>x</I> functions get or set 16 bits during each call: <B>GetClassWord</B>, <B>GetWindowWord</B>, <B>SetClassWord</B>, and <B>SetWindowWord</B>.</P>

<P>In Win32, each of these system-information items grows to 32 bits. Therefore, in Win32, you would use the following functions which access 32 bits at a time: <B>GetClassLong</B>, <B>GetWindowLong</B>, <B>SetClassLong</B>, and <B>SetWindowLong</B>.</P>

<P>Each of these functions takes two parameters: a window handle and an offset into the data area. These offsets differ depending on whether you are compiling for Windows 3.<I>x</I> or Win32.</P>

<P>The index values specifying these offsets correspond to each other as follows:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=41%><B>Windows 3.x</B></TD>
<TD class=label width=59%><B>Win32 (nonportable)</B></TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GCW_CURSOR</TD>
<TD width=59%>GCL_CURSOR</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GCW_HBRBACKGROUND</TD>
<TD width=59%>GCL_HBRBACKGROUND</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GCW_HICON</TD>
<TD width=59%>GCL_HICON</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GWW_HINSTANCE</TD>
<TD width=59%>GWL_HINSTANCE</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GWW_HWNDPARENT</TD>
<TD width=59%>GWL_HWNDPARENT</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GWW_ID</TD>
<TD width=59%>GWL_ID</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>GWW_USERDATA</TD>
<TD width=59%>GWL_USERDATA</TD>
</TR>
</TABLE><BR>

<P>In the case of <B>GWW_HWNDPARENT</B>, you can avoid calls to <B>GetWindowLong</B> and <B>GetWindowWord</B>, and instead use a single call to a new API function, <B>GetParent</B>. This API function returns a handle of the appropriate size. The following example illustrates a call to <B>GetParent</B> that has the same results as the <B>#ifdef</B> statements shown in the previous example:</P>

<PRE><CODE>hwndParent = GetParent( hWnd );</CODE></PRE>

<P>Remember that offsets may change for private data that you store in the window structure. You should review this code carefully and recalculate offsets for Win32, noting that some data types, such as handles, increase in size.</P>
</font>
</BODY>
</HTML>

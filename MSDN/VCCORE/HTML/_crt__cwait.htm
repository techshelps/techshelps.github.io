<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_cwait</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_GetExitCodeProcess">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_WaitForSingleObject">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_ExitProcess">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__cwait"></A><SUP></SUP>_cwait</H1>

<P>Waits until another process terminates.</P>

<P><B>int</B> <B>_cwait(</B> <B>int</B> <B>*</B><I>termstat</I><B>,</B> <B>int</B> <I>procHandle</I><B>,</B> <B>int</B> <I>action</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=27%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_cwait</B></TD>
<TD width=27%>&lt;process.h&gt;</TD>
<TD width=27%>&lt;errno.h&gt;</TD>
<TD width=30%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>When the specified process has “successfully” completed, <B>_cwait</B> returns the handle of the specified process and sets <I>termstat</I> to the result code returned by the specified process. Otherwise, <B>_cwait</B> returns –1 and sets <B>errno</B> as follows.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Value</B></TD>
<TD class=label width=84%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>ECHILD</B></TD>
<TD width=84%>No specified process exists, <I>procHandle</I> is invalid, or the call to the <A HREF="JavaScript:hhobj_1.Click()">GetExitCodeProcess</A> or <A HREF="JavaScript:hhobj_2.Click()">WaitForSingleObject</A> API failed</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>EINVAL</B></TD>
<TD width=84%><I>action</I> is invalid</TD>
</TR>
</TABLE><BR>

<P class=label><B>Parameters</B></P>

<P class=dt><I>termstat</I></P>

<P class=indent>Pointer to a buffer where the result code of the specified process will be stored, or NULL</P>

<P class=dt><I>procHandle</I></P>

<P class=indent>Handle to the current process or thread</P>

<P class=dt><I>action</I></P>

<P class=indent>NULL: Ignored by Windows NT and Windows 95 applications; for other applications: action code to perform on <I>procHandle</I></P>

<P class=label><B>Remarks</B></P>

<P>The <B>_cwait</B> function waits for the termination of the process ID of the specified process that is provided by <I>procHandle</I>. The value of <I>procHandle</I> passed to <B>_cwait</B> should be the value returned by the call to the <A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn</A> function that created the specified process. If the process ID terminates before <B>_cwait</B> is called, <B>_cwait</B> returns immediately. <B>_cwait</B> can be used by any process to wait for any other known process for which a valid handle (<I>procHandle</I>) exists.</P>

<P><I>termstat </I>points to a buffer where the return code of the specified process will be stored. The value of <I>termstat</I> indicates whether the specified process terminated “normally” by calling the Windows NT <A HREF="JavaScript:hhobj_3.Click()">ExitProcess</A> API. <B>ExitProcess</B> is called internally if the specified process calls <B>exit</B> or <B>_exit</B>, returns from <B>main</B>, or reaches the end of <B>main</B>. See <B>GetExitCodeProcess</B> for more information regarding the value passed back through <I>termstat</I>. If <B>_cwait</B> is called with a NULL value for <I>termstat</I>, the return code of the specified process will not be stored. </P>

<P>The <I>action</I> parameter is ignored by Windows NT and Windows 95 because parent-child relationships are not implemented in these environments. Therefore, the OS/2 <B>wait</B> function, which allows a parent process to wait for any of its immediate children to terminate, is not available.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* CWAIT.C: This program launches several processes and waits
 * for a specified process to finish.
 */

#include &lt;windows.h&gt;
#include &lt;process.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

/* Macro to get a random integer within a specified range */
#define getrandom( min, max ) (( rand() % (int)((( max ) + 1 ) - ( min ))) + ( min ))

struct PROCESS
{

   int     nPid;
   char    name[40];

} process[4] = { { 0, "Ann" }, { 0, "Beth" }, { 0, "Carl" }, { 0, "Dave" } };

void main( int argc, char *argv[] )
{

   int termstat, c;

   srand( (unsigned)time( NULL ) );    /* Seed randomizer */
   /* If no arguments, this is the calling process */
   if( argc == 1 )
   {

      /* Spawn processes in numeric order */
      for( c = 0; c &lt; 4; c++ ){
         _flushall();
         process[c].nPid = spawnl( _P_NOWAIT, argv[0], argv[0], 
                             process[c].name, NULL );
      }

      /* Wait for randomly specified process, and respond when done */
      c = getrandom( 0, 3 );
      printf( "Come here, %s.\n", process[c].name );
      _cwait( &amp;termstat, process[c].nPid, _WAIT_CHILD );
      printf( "Thank you, %s.\n", process[c].name );

   }

   /* If there are arguments, this must be a spawned process */
   else
   {

      /* Delay for a period determined by process number */
      Sleep( (argv[1][0] - 'A' + 1) * 1000L );
      printf( "Hi, Dad. It's %s.\n", argv[1] );

   }

}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Hi, Dad. It's Ann.
Come here, Ann.
Thank you, Ann.
Hi, Dad. It's Beth.
Hi, Dad. It's Carl.
Hi, Dad. It's Dave.

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn Functions</A></P>
</font>
</BODY>
</HTML>

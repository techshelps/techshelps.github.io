<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>fopen, _wfopen</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_fopen.2c_._wfopen"></A><SUP></SUP>fopen, _wfopen</H1>

<P>Open a file.</P>

<P><B>FILE</B> <B>*fopen(</B> <B>const</B> <B>char</B> <B>*</B><I>filename</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>mode</I> <B>);</B></P>

<P><B>FILE</B> <B>*_wfopen(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>filename</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>mode</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=36%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>fopen</B></TD>
<TD width=36%>&lt;stdio.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wfopen</B></TD>
<TD width=36%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P>The <B>c</B>, <B>n</B>, and <B>t</B> <I>mode</I> options are Microsoft extensions for <B>fopen</B> and <B>_fdopen</B> and should not be used where ANSI portability is desired.</P>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the open file. A null pointer value indicates an error. </P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>filename</I></P>

<P class=indent>Filename</P>

<P class=dt><I>mode</I></P>

<P class=indent>Type of access permitted</P>

<P class=label><B>Remarks</B></P>

<P>The <B>fopen</B> function opens the file specified by <I>filename</I>. <B>_wfopen</B> is a wide-character version of <B>fopen</B>; the arguments to <B>_wfopen</B> are wide-character strings. <B>_wfopen</B> and <B>fopen</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=14%><B>TCHAR.H Routine </B></TD>
<TD class=label width=30%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=24%><B>_MBCS Defined</B></TD>
<TD class=label width=32%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%>_tfopen</TD>
<TD width=30%>fopen</TD>
<TD width=24%>fopen</TD>
<TD width=32%>_wfopen</TD>
</TR>
</TABLE><BR>

<P>The character string <I>mode</I> specifies the type of access requested for the file, as follows:</P>

<P class=dt><B>"r"</B></P>

<P class=indent>Opens for reading. If the file does not exist or cannot be found, the <B>fopen</B> call fails.</P>

<P class=dt><B>"w"</B></P>

<P class=indent>Opens an empty file for writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a"</B></P>

<P class=indent>Opens for writing at the end of the file (appending) without removing the EOF marker before writing new data to the file; creates the file first if it doesn’t exist.</P>

<P class=dt><B>"r+"</B></P>

<P class=indent>Opens for both reading and writing. (The file must exist.)</P>

<P class=dt><B>"w+"</B></P>

<P class=indent>Opens an empty file for both reading and writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a+"</B></P>

<P class=indent>Opens for reading and appending; the appending operation includes the removal of the EOF marker before new data is written to the file and the EOF marker is restored after writing is complete; creates the file first if it doesn’t exist.</P>

<P>When a file is opened with the <B>"a"</B> or <B>"a+"</B> access type, all write operations occur at the end of the file. The file pointer can be repositioned using <B>fseek</B> or <B>rewind</B>, but is always moved back to the end of the file before any write operation is carried out. Thus, existing data cannot be overwritten.</P>

<P>The <B>"a"</B> mode does not remove the EOF marker before appending to the file. After appending has occurred, the MS-DOS TYPE command only shows data up to the original EOF marker and not any data appended to the file. The <B>"a+"</B> mode does remove the EOF marker before appending to the file. After appending, the MS-DOS TYPE command shows all data in the file. The <B>"a+"</B> mode is required for appending to a stream file that is terminated with the CTRL+Z EOF marker.</P>

<P>When the <B>"r+"</B>, <B>"w+"</B>, or <B>"a+"</B> access type is specified, both reading and writing are allowed (the file is said to be open for “update”). However, when you switch between reading and writing, there must be an intervening <B>fflush</B>, <B>fsetpos</B>, <B>fseek</B>, or <B>rewind</B> operation. The current position can be specified for the <B>fsetpos</B> or <B>fseek</B> operation, if desired.</P>

<P>In addition to the above values, the following characters can be included in <I>mode</I> to specify the translation mode for newline characters:</P>

<P class=dt><B>t</B></P>

<P class=indent>Open in text (translated) mode. In this mode, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading/writing with <B>"a+"</B>, <B>fopen</B> checks for a CTRL+Z at the end of the file and removes it, if possible. This is done because using <B>fseek</B> and <B>ftell</B> to move within a file that ends with a CTRL+Z, may cause <B>fseek</B> to behave improperly near the end of the file. </P>

<P>Also, in text mode, carriage return–linefeed combinations are translated into single linefeeds on input, and linefeed characters are translated to carriage return–linefeed combinations on output. When a Unicode stream-I/O function operates in text mode (the default), the source or destination stream is assumed to be a sequence of multibyte characters. Therefore, the Unicode stream-input functions convert multibyte characters to wide characters (as if by a call to the <B>mbtowc</B> function). For the same reason, the Unicode stream-output functions convert wide characters to multibyte characters (as if by a call to the <B>wctomb</B> function).</P>

<P class=dt><B>b</B></P>

<P class=indent>Open in binary (untranslated) mode; translations involving carriage-return and linefeed characters are suppressed. </P>

<P>If <B>t</B> or <B>b</B> is not given in <I>mode</I>, the default translation mode is defined by the global variable <A HREF="_crt__fmode.htm">_fmode</A>. If <B>t</B> or <B>b</B> is prefixed to the argument, the function fails and returns <B>NULL</B>. </P>

<P>For more information about using text and binary modes in Unicode and multibyte stream-I/O, see <A HREF="_crt_text_and_binary_mode_file_i.2f.o.htm">Text and Binary Mode File I/O</A> and <A HREF="_crt_unicode.99_.stream_i.2f.o_in_text_and_binary_modes.htm">Unicode Stream I/O in Text and Binary Modes</A>.</P>

<P class=dt><B>c</B></P>

<P class=indent>Enable the commit flag for the associated <I>filename</I> so that the contents of the file buffer are written directly to disk if either <B>fflush</B> or <B>_flushall</B> is called.</P>

<P class=dt><B>n</B></P>

<P class=indent>Reset the commit flag for the associated <I>filename</I> to “no-commit.” This is the default. It also overrides the global commit flag if you link your program with COMMODE.OBJ. The global commit flag default is “no-commit” unless you explicitly link your program with COMMODE.OBJ.</P>

<P>Valid characters for the <I>mode</I> string used in <B>fopen</B> and <B>_fdopen</B> correspond to <I>oflag</I> arguments used in <A HREF="_crt__open.2c_._wopen.htm">_open</A> and <A HREF="_crt__sopen.2c_._wsopen.htm">_sopen</A>, as follows.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Characters in mode String</B></TD>
<TD class=label width=78%>
<P class=label><B>Equivalent <I>oflag</I> Value for _open/_sopen</B></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>a</B></TD>
<TD width=78%><B>_O_WRONLY | _O_APPEND</B> (usually <B>_O_WRONLY | _O_CREAT | _O_APPEND</B>)</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>a+</B></TD>
<TD width=78%><B>_O_RDWR | _O_APPEND</B> (usually <B>_O_RDWR | _O_APPEND | _O_CREAT</B> )</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>r</B></TD>
<TD width=78%><B>_O_RDONLY</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>r+</B></TD>
<TD width=78%><B>_O_RDWR</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>w</B></TD>
<TD width=78%><B>_O_WRONLY</B> (usually <B>_O_WRONLY | _O_CREAT | _O_TRUNC</B>)</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>w+</B></TD>
<TD width=78%><B>_O_RDWR</B> (usually <B>_O_RDWR | _O_CREAT | _O_TRUNC</B>)</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>b</B></TD>
<TD width=78%><B>_O_BINARY</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>t</B></TD>
<TD width=78%><B>_O_TEXT</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>c</B></TD>
<TD width=78%>None</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>n</B></TD>
<TD width=78%>None</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FOPEN.C: This program opens files named "data"
 * and "data2".It  uses fclose to close "data" and
 * _fcloseall to close all remaining files.
 */

#include &lt;stdio.h&gt;

FILE *stream, *stream2;

void main( void )
{
   int numclosed;

   /* Open for read (will fail if file "data" does not exist) */
   if( (stream  = fopen( "data", "r" )) == NULL )
      printf( "The file 'data' was not opened\n" );
   else
      printf( "The file 'data' was opened\n" );

   /* Open for write */
   if( (stream2 = fopen( "data2", "w+" )) == NULL )
      printf( "The file 'data2' was not opened\n" );
   else
      printf( "The file 'data2' was opened\n" );

   /* Close stream */
   if( fclose( stream ) )
      printf( "The file 'data' was not closed\n" );

   /* All other files are closed: */
   numclosed = _fcloseall( );
   printf( "Number of files closed by _fcloseall: %u\n", numclosed );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>The file 'data' was opened
The file 'data2' was opened
Number of files closed by _fcloseall: 1

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fclose.2c_._fcloseall.htm">fclose</A>, <A HREF="_crt__fdopen.2c_._wfdopen.htm">_fdopen</A>, <A HREF="_crt_ferror.htm">ferror</A>, <A HREF="_crt__fileno.htm">_fileno</A>, <A HREF="_crt_freopen.2c_._wfreopen.htm">freopen</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A>, <A HREF="_crt__setmode.htm">_setmode</A></P>
</font>
</BODY>
</HTML>

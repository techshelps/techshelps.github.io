<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structures, COMPLEX, and LOGICAL Types</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_structures.2c_.complex.2c_.and_logical_types"></A>Structures, COMPLEX, and LOGICAL Types</H1>

<P>The Fortran structure variable, defined with the <B>STRUCTURE</B> keyword and declared with the <B>RECORD</B> statement, is equivalent to C <B>struct</B> declarations. You can pass structures by value or by reference. Be careful, however, about the effect of structure alignment if you are going to share structures.</P>

<P>C, C++, and MASM do not directly implement the Fortran types <B>COMPLEX*8</B> and <B>COMPLEX*16</B>. However, you can write structures that are equivalent. The type <B>COMPLEX*8</B> has two fields, both of which are 4-byte floating-point numbers; the first contains the real-number component, and the second contains the imaginary-number component. The type <B>COMPLEX</B> is equivalent to the type <B>COMPLEX*8</B>. The type <B>COMPLEX*16</B> is similar to <B>COMPLEX*8</B>. The only difference is that each field of <B>COMPLEX*16</B> contains an 8-byte floating-point number.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Fortran functions of type <B>COMPLEX</B> place a hidden <B>COMPLEX</B> argument at the beginning of the parameter list. C functions that implement such a call from Fortran must declare this argument explicitly, and use it to return a value. The C return type should be <B>void</B>.</P>

<P>Here are the C/C++ structure definitions for the Fortran <B>COMPLEX</B> types.</P>

<PRE><CODE>struct complex8 {
    float   real, imag;
};

struct complex16 {
    double  real, imag;
};
</CODE></PRE>

<P>A Fortran <B>LOGICAL*2</B> is stored as a 1-byte indicator value (1=true, 0=false) followed by one unused byte. A Fortran <B>LOGICAL*4</B> is stored as a 1-byte indicator value followed by three unused bytes. The type <B>LOGICAL</B> is equivalent to <B>LOGICAL*4</B>.</P>

<P>To pass or receive a Fortran <B>LOGICAL</B> type, use an integer. Note that only the low byte is tested or used by Fortran.</P>

<P>The C++ <B>class</B> type has the same layout as the corresponding C <B>struct</B> type, unless the class defines virtual functions or has base classes. Classes that lack those features can be passed in the same way as C structures.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Errors when Implementing a CObject-Derived Class</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_error_compiler_errors_when_implementing_a_cobject.2d.derived_class"></A>Compiler Errors when Implementing a CObject-Derived Class</H1>

<P>When you implement a class derived from <B>CObject</B> and your code is written so that the copy constructor or assignment operator for the class needs to be called, the compiler may report errors similar to the following:</P>

<PRE><CODE>error C2660: 'CSample::CSample' : function does not take 1 parameters

error C2582: 'CSample' : 'operator =' function is unavailable
</CODE></PRE>

<P>You can reproduce the problem by compiling the example in the Sample Code section below.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The sample code shown in this article generates the following error messages:<BR>
<CODE>error C2558: 'CSample::CSample' : no copy constructor available<BR>
error C2582: 'CSample' : 'operator =' function is unavailable</CODE></P>

<P>The reason for the compiler errors is that <B>CObject</B> declares a private copy constructor and assignment operator in the AFX.H file. Because of this, the compiler does not generate a default copy constructor and assignment operator for the <B>CObject</B>-derived class . Because the compiler does not find these functions declared in the class, it reports the errors. </P>

<P>To avoid the compiler errors, you need to implement a copy constructor and assignment operator for the <B>CObject</B>-derived class. This is illustrated in the sample code below. You can avoid the errors by uncommenting the lines indicated in the sample code. </P>

<P class=label><B>Sample Code</B></P>

<PRE><CODE>/* Compile options needed: /c
*/
 
// replace with #define _CONSOLE when compiling for Windows NT
#define _DOS
 
#include &lt;afx.h&gt;
 
class CSample : public CObject
{
private:
    short m_nValue;
public:
// uncomment the lines below to avoid the compiler errors
//    CSample() {}
//    CSample( const CSample &amp;s )  // copy ctor
//        { m_nValue = s.m_nValue; }
//    CSample&amp; operator=( const CSample &amp;s )  // assignment operator
//        { m_nValue = s.m_nValue; return *this; }
};
 
void main()
{
    CSample a;
    CSample b = a;
    a = b;
}
</CODE></PRE>
</font>
</BODY>
</HTML>

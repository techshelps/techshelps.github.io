<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Explicit Specialization of Function Templates</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_explicit_specialization_of_function_templates"></A>Explicit Specialization of Function Templates</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>With a function template, you can define special behavior for a specific type by providing a explicit specialization (override) of the function template for that type. For example:</P>

<PRE><CODE>void MySwap( double a, double b);
</CODE></PRE>

<P>This declaration enables you to define a different function for <B>double</B> variables. Like other nontemplated functions, standard type conversions (such as promoting a variable of type <B>float</B> to <B>double</B>) are applied.</P>

<P>Visual C++ 5.0, and later, now supports the new syntax for declaring explicit specializations of function templates. For example:</P>

<PRE><CODE>template&lt;class T&gt; void f(T t) {...};

//Explicit specialization of f with 'char' with the
//template argument explicitly specified:
//
template&lt;&gt; void f&lt;char&gt;(char c){...}

//Explicit specialization of f with 'double' with the
//template argument deduced:
//
template&lt;&gt; void f(double d) {...}
</CODE></PRE>

<P>The following form of old syntax is also supported:</P>

<PRE><CODE>//Explicit specialization of f with 'char' with the
//template argument deduced:
//
void f(char) {...}
</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_function_template_instantiation.htm">Function Template Instantiation</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_RPT, _RPTF Macros</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__rpt.2c_._rptf_macros"></A>_RPT, _RPTF Macros</H1>

<P>Track an application’s progress by generating a debug report (debug version only).</P>

<P><B>_RPT0(</B> <I>reportType</I><B>,</B> <I>format</I> <B>);</B></P>

<P><B>_RPT1(</B> <I>reportType</I><B>,</B><I> format</I><B>,</B> <I>arg1</I> <B>);</B></P>

<P><B>_RPT2(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I> <B>);</B></P>

<P><B>_RPT3(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I><B>,</B> <I>arg3</I> <B>);</B></P>

<P><B>_RPT4(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I><B>,</B> <I>arg3</I><B>,</B> <I>arg4</I> <B>);</B></P>

<P><B>_RPTF0(</B> <I>reportType</I><B>,</B> <I>format</I> <B>);</B></P>

<P><B>_RPTF1(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I> <B>);</B></P>

<P><B>_RPTF2(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I> <B>);</B></P>

<P><B>_RPTF3(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I><B>,</B> <I>arg3</I> <B>);</B></P>

<P><B>_RPTF4(</B> <I>reportType</I><B>,</B> <I>format</I><B>,</B> <I>arg1</I><B>,</B> <I>arg2</I><B>,</B> <I>arg3</I><B>,</B> <I>arg4</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=23%><B>Macro</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=51%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=23%><B>_RPT</B> macros</TD>
<TD width=26%>&lt;crtdbg.h&gt;</TD>
<TD width=51%>Win NT, Win 95</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><B>_RPTF</B> macros</TD>
<TD width=26%>&lt;crtdbg.h&gt;</TD>
<TD width=51%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P>Although these are macros and are obtained by including CRTDBG.H, the application must link with one of the libraries listed above because these macros call other run-time functions.</P>

<P class=label><B>Return Value</B></P>

<P>None</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>reportType</I></P>

<P class=indent>Report type: <B>_CRT_WARN</B>, <B>_CRT_ERROR</B>, <B>_CRT_ASSERT</B></P>

<P class=dt><I>format</I></P>

<P class=indent>Format-control string used to create the user message</P>

<P class=dt><I>arg1</I></P>

<P class=indent>Name of first substitution argument used by <I>format</I></P>

<P class=dt><I>arg2</I></P>

<P class=indent>Name of second substitution argument used by <I>format</I></P>

<P class=dt><I>arg3</I></P>

<P class=indent>Name of third substitution argument used by <I>format</I></P>

<P class=dt><I>arg4</I></P>

<P class=indent>Name of fourth substitution argument used by <I>format</I></P>

<P>All of these macros take the <I>reportType </I>and <I>format </I>parameters. In addition, they might also take <I>arg1</I> through <I>arg4</I>, signified by the number appended to the macro name. For example, <B>_RPT0</B> and _<B>RPTF0</B> take no additional arguments, <B>_RPT1</B> and _<B>RPTF1</B> take <I>arg1</I>, <B>_RPT2</B> and _<B>RPTF2</B> take <I>arg1</I> and <I>arg2</I>, and so on.</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_RPT</B> and <B>_RPTF</B> macros are similar to the <A HREF="_crt_printf.2c_.wprintf.htm">printf</A> function, as they can be used to track an application’s progress during the debugging process. However, these macros are more flexible than <B>printf</B> because they do not need to be enclosed in <B>#ifdef</B> statements to prevent them from being called in a retail build of an application. This flexibility is achieved by using the <A HREF="_crt__debug.htm">_DEBUG</A> macro. The <B>_RPT</B> and <B>_RPTF</B> macros are only available when the <B>_DEBUG</B> flag is defined. When <B>_DEBUG</B> is not defined, calls to these macros are removed during preprocessing.</P>

<P>The <B>_RPT</B> macros call the <A HREF="_crt__crtdbgreport.htm">_CrtDbgReport</A> function to generate a debug report with a user message. The <B>_RPTF</B> macros create a debug report with the source file and line number where the report macro was called, in addition to the user message. The user message is created by substituting the <I>arg</I>[<I>n</I>] arguments into the <I>format</I> string, using the same rules defined by the <A HREF="_crt_printf.2c_.wprintf.htm">printf</A> function.</P>

<P><B>_CrtDbgReport</B> generates the debug report and determines its destination(s), based on the current report modes and file defined for <I>reportType</I>. The <A HREF="_crt__crtsetreportmode.htm">_CrtSetReportMode</A> and <A HREF="_crt__crtsetreportfile.htm">_CrtSetReportFile</A> functions are used to define the destination(s) for each report type.</P>

<P>When the destination is a debug message window and the user chooses the Retry button, <B>_CrtDbgReport</B> returns 1, causing these macros to start the debugger, provided that “just-in-time” (JIT) debugging is enabled. For more information about using these macros as a debugging error handling mechanism, see <A HREF="_core_using_macros_for_verification_and_reporting.htm">Using Macros for Verification and Reporting</A>.</P>

<P>Two other macros exist that generate a debug report. The <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERT</A> macro generates a report, but only when its expression argument evaluates to FALSE. <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERTE</A> is exactly like <B>_ASSERT</B>, but includes the failed expression in the generated report.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* 
 * DBGMACRO.C
 * In this program, calls are made to the _ASSERT and _ASSERTE
 * macros to test the condition 'string1 == string2'.  If the
 * condition fails, these macros print a diagnostic message.
 * The _RPTn and _RPTFn group of macros are also exercised in
 * this program, as an alternative to the printf function.
 */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;malloc.h&gt;
#include &lt;crtdbg.h&gt;

int main()
{
   char *p1, *p2;

   /* 
    * The Reporting Mode and File must be specified
    * before generating a debug report via an assert
    * or report macro.
    * This program sends all report types to STDOUT
    */                                             
   _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);
   _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDOUT);
   _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);
   _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDOUT);
   _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);
   _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDOUT);

   /*
    * Allocate and assign the pointer variables
    */
   p1 = malloc(10);
   strcpy(p1, "I am p1");
   p2 = malloc(10);
   strcpy(p2, "I am p2");

   /*
    * Use the report macros as a debugging
    * warning mechanism, similar to printf.
    *
    * Use the assert macros to check if the
    * p1 and p2 variables are equivalent.
    *
    * If the expression fails, _ASSERTE will
    * include a string representation of the
    * failed expression in the report.
    * _ASSERT does not include the
    * expression in the generated report.
    */
   _RPT0(_CRT_WARN, "\n\n Use the assert macros to evaluate the expression p1 == p2.\n");
   _RPTF2(_CRT_WARN, "\n Will _ASSERT find '%s' == '%s' ?\n", p1, p2);
   _ASSERT(p1 == p2);

   _RPTF2(_CRT_WARN, "\n\n Will _ASSERTE find '%s' == '%s' ?\n", p1, p2);
   _ASSERTE(p1 == p2);

   _RPT2(_CRT_ERROR, "\n \n '%s' != '%s'\n", p1, p2);
   
   free(p2);
   free(p1);

   return 0;
}
</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Use the assert macros to evaluate the expression p1 == p2.

dbgmacro.c(54) : Will _ASSERT find 'I am p1' == 'I am p2' ?
dbgmacro.c(55) : Assertion failed


dbgmacro.c(57) : Will _ASSERTE find 'I am p1' == 'I am p2' ?
dbgmacro.c(58) : Assertion failed: p1 == p2


'I am p1' != 'I am p2'


</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>
</font>
</BODY>
</HTML>

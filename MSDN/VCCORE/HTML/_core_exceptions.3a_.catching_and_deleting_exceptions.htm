<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exceptions: Catching and Deleting Exceptions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exceptions.3a_.catching_and_deleting_exceptions"></A>Exceptions: Catching and Deleting Exceptions</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>The following instructions and examples show you how to catch and delete exceptions. For more information on the <B>try</B>, <B>catch</B>, and <B>throw</B> keywords, see <A HREF="_core_exception_handling_topics_.28.c.2b2b29.htm">Exception Handling Topics (C++)</A>. </P>

<P>Your exception handlers must delete exception objects they handle, because failure to delete the exception causes a memory leak whenever that code catches an exception.</P>

<P>Your <B>catch</B> block must delete an exception when:

<UL type=disc>
	<LI>The <B>catch</B> block throws a new exception.
<P class=tl>Of course, you must not delete the exception if you throw the same exception again:</P>
<PRE><CODE>catch(CException* e)
{
    if (m_bThrowExceptionAgain)
        throw; // Do not delete e
}
</CODE></PRE>
</LI>

	<LI>Execution returns from within the <B>catch</B> block.</LI>
</UL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;When deleting a <B>CException</B>, use the <B>Delete</B> member function to delete the exception. Do not use the <B>delete</B> keyword, because it can fail if the exception is not on the heap.</P>

<P class=label><B><A NAME="_core_to_catch_and_delete_exceptions"></A>To catch and delete exceptions</B>

<UL type=disc>
	<LI>Use the <B>try</B> keyword to set up a <B>try</B> block. Execute any program statements that might throw an exception within a <B>try</B> block.
<P class=tl>Use the <B>catch</B> keyword to set up a <B>catch</B> block. Place exception-handling code in a <B>catch</B> block. The code in the <B>catch</B> block is executed only if the code within the <B>try</B> block throws an exception of the type specified in the <B>catch</B> statement.</P>
<P class=tl>The following skeleton shows how <B>try</B> and <B>catch</B> blocks are normally arranged:</P>
<PRE><CODE>// Normal program statements
...

try
{
    // Execute some code that might throw an exception.
}
catch( CException* e )
{
    // Handle the exception here.
    // "e" contains information about the exception.
    e-&gt;Delete();
}

// Other normal program statements
...
</CODE></PRE>

<P class=tl>When an exception is thrown, control passes to the first <B>catch</B> block whose exception-declaration matches the type of the exception. You can selectively handle different types of exceptions with sequential <B>catch</B> blocks as listed below:</P>
<PRE><CODE>try
{
    // Execute some code that might throw an exception.
}
catch( CMemoryException* e )
{
    // Handle the out-of-memory exception here.
}
catch( CFileException* e )
{
    // Handle the file exceptions here.
}
catch( CException* e )
{
    // Handle all other types of exceptions here.
}
</CODE></PRE>
</LI>
</UL>

<P>For related information, see <A HREF="_core_exceptions.3a_.converting_from_mfc_exception_macros.htm">Exceptions: Converting from MFC Exception Macros</A>. </P>
</font>
</BODY>
</HTML>

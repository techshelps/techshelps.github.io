<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upgrade Previous 16-Bit Versions of Visual C++</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_porting_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CFile">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_upgrade_previous_16.2d.bit_versions_of_visual_c.2b2b"></A>Upgrade Previous 16-Bit Versions of Visual C++</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.porting_and_upgrading.htm">Overview</A>  |&nbsp; <A HREF="_core_how_do_i.3a_.porting_and_upgrading.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions.3a_.porting_and_upgrading.htm">FAQ</A>  |&nbsp; <A HREF="_core_details.3a_.porting_and_upgrading.htm">Details</A></P>

<P>Projects built in previous 16-bit versions of Visual C++ can be opened and saved in Visual C++ projects automatically.</P>

<P>However, if you have built a 16-bit Visual C++ project from the command line with your own makefile, the development environment does not recognize project data in your file. Instead, the development environment offers to wrap your makefile. If you choose this option, a project is created with one file in it, your makefile, but the project will still build and run within the development environment, assuming it is 32-bit compatible. See <A HREF="_core_port_a_project_made_with_nmake_to_the_developer_studio_environment.htm">port a project made with NMAKE to the development environment</A> or <A HREF="_core_port_an_external_project_made_without_nmake_to_the_developer_studio_environment.htm">port a project made without NMAKE to the development environment</A> for step-by-step instructions.&nbsp; To take advantage of wizards and integrated debugging features, it would be better for you to create a new project in the development environment, add your existing files to it, then build and save it as an up-to-date project. </P>

<P class=label><B>To convert projects built in 16-bit Visual C++ to development environment projects</B>

<OL>
	<LI>From the <B>File</B> menu, click <B>Open Workspace</B>.
<P class=tl>The <B>Open Project Workspace</B> dialog box appears.</P></LI>

	<LI>In the <B>Files of Type</B> drop-down list, select All Files (*.*) to display all files.<BR><BR></LI>

	<LI>Select the drive and directory containing the previous makefile. <BR><BR></LI>

	<LI>Select the makefile from the list and click <B>Open</B>.
<P class=tl>A message box is displayed saying that the project will be converted, that project settings will be converted to Win32 equivalents, and asking if you want to convert.</P></LI>

	<LI>Click <B>Yes</B>.
<P class=tl>A new project workspace file (.DWS) is created with your old makefile name, then written to the same directory as your existing makefile. For example, if your previous project was MYAPP.MAK, then MYAPP.DSW is created and saved to the same directory. </P>
<P class=tl>After the new files are written, the new project workspace opens in the development environment. </P></LI>
</OL>

<P class=label><B>To add your 16-bit Visual C++ files to a Visual C++ project</B>

<OL>
	<LI>Open the 16-bit project in the development environment as described in the previous procedure. <BR><BR></LI>

	<LI>From the <B>Project</B> menu, click <B>Add ToProject</B>., then click <B>Files</B> from the submenu that appears.<BR><BR></LI>

	<LI>In the <B>Insert Files into Project</B> dialog box, select all your application files and click <B>OK</B>.
<P class=tl>Your application files are now in the Visual C++ development environment project.</P></LI>
</OL>

<P class=label><B>To upgrade 16-bit Visual C++ code</B>

<OL>
	<LI>Remove VBX controls.
<P class=tl>VBX controls are not supported in a 32-bit application. The <B>CVBControl</B> class, the <B>AfxRegisterVBEvent</B>, <B>AfxGetPict</B>, <B>AfxSetPict</B>, and <B>AfxReferencePict</B> global functions, and the <B>ON_VBXEVENT</B> macro are unavailable with Win32. If you use VBX controls in your application, you must replace them with standard Windows controls or COM controls, redesigning your application as necessary. </P></LI>

	<LI>Replace difficult-to-port code, such as assembly-language functions and MS-DOS calls, with stubs.
<P class=tl>If your 16-bit application makes calls to an assembly-language module, you should rewrite it in C or C++ if possible. Otherwise, you will be faced with rewriting the assembly-language portion for each hardware platform that can run Win32.</P>
<P class=tl>If you’ve used any MS-DOS services for file I/O, including those used by Windows version 3.<I>x</I>, you will have to rewrite the code using the Win32 file I/O set. If you’ve used the <A HREF="JavaScript:hhobj_2.Click()">CFile</A> class for file I/O, you are shielded from this change because <B>CFile</B> uses the new function calls even though its member function interface remains unchanged.</P></LI>

	<LI>Build your application with and note any 32-bit related problems.<BR><BR></LI>

	<LI>Use the information in <A HREF="_core_porting_16.2d.bit_code_to_32.2d.bit_windows.htm">Porting 16-Bit Code to 32-Bit Windows</A>. Rebuild until the main body of your program is running correctly.<BR><BR></LI>

	<LI>Implement each function that you replaced with a stub in step 2 until the entire application runs correctly.<BR><BR></LI>

	<LI>Remove MFC libraries from the link input list.
<P class=tl>Let the MFC header files automatically link in the correct version of MFC. </P></LI>
</OL>

<P>You may want or need to modify the new project:

<UL type=disc>
	<LI><A HREF="_core_port_to_the_standard_c.2b2b_.library.htm">To use the Standard C++ iostream library instead of a previous version of the iostream library</A><BR><BR></LI>

	<LI><A HREF="_core_changes_in_mfc_versions.htm">To work with the current MFC library</A></LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structure Alignment</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_structure_alignment"></A><SUP></SUP>Structure Alignment</H1>

<P>Applications should generally align structure members at addresses that are “natural” for the data type and the processor involved. For example, a 4-byte data member should have an address that is a multiple of four.</P>

<P>This principle is especially important when you write code for porting to multiple processors. A misaligned 4-byte data member, which is on an address that is not a multiple of four, causes a performance penalty with an 80386 processor and a hardware exception with a MIPS® RISC processor. In the latter case, although the system handles the exception, the performance penalty is significantly greater.</P>

<P>The following guidelines ensure proper alignment for processors targeted by Win32:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=29%><B>Type</B></TD>
<TD class=label width=71%><B>Alignment</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>char</B></TD>
<TD width=71%>Align on byte boundaries</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>short</B> (16-bit)</TD>
<TD width=71%>Align on even byte boundaries</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>int</B> and <B>long</B> (32-bit)</TD>
<TD width=71%>Align on 32-bit boundaries</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>float</B></TD>
<TD width=71%>Align on 32-bit boundaries</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>double</B></TD>
<TD width=71%>Align on 64-bit boundaries</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>structures</TD>
<TD width=71%>Largest alignment requirement of any member</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>unions</TD>
<TD width=71%>Alignment requirement of the first member</TD>
</TR>
</TABLE><BR>

<P>The compiler automatically aligns data in accordance with these requirements, inserting padding in structures up to the limit (default pack size) specified by the /Zp option or <B>#pragma pack</B>. For example, /Zp2 permits up to 1 byte of padding, /Zp4 permits up to 3 bytes of padding, and so on. The default pack size for Windows 3.<I>x</I> is 2, whereas the default for Win32 is 8. As a consequence:

<UL type=disc>
	<LI>If you have specified a packing limit with /Zp or <B>#pragma pack</B>, you may not get the proper alignment (the default value) for Win32.<BR><BR></LI>

	<LI>The different default setting for Win32 can impact your source code by changing the offsets of some structure members. Examine your code closely to see whether you have hard-coded these offsets, or whether your code makes assumptions based on a certain default pack size.</LI>
</UL>
</font>
</BODY>
</HTML>

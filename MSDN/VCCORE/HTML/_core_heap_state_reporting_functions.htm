<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Heap State Reporting Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_heap_state_reporting_functions"></A>Heap State Reporting Functions</H1>

<P>Several new functions report the contents of the debug heap at a given moment. To capture a summary snapshot of the state of the heap at a given time, use the <B>_CrtMemState</B> structure defined in CRTDBG.H:</P>

<PRE><CODE>typedef struct _CrtMemState
{
// Pointer to the most recently allocated block:
   struct _CrtMemBlockHeader * pBlockHeader;  
// A counter for each of the 5 types of block:
   long lCounts[_MAX_BLOCKS];  
// Total bytes allocated in each block type:
   long lSizes[_MAX_BLOCKS];   
// The most bytes allocated at a time up to now:
   long lHighWaterCount;       
// The total bytes allocated at present:
   long lTotalCount;           
} _CrtMemState;
</CODE></PRE>

<P>This structure saves a pointer to the first (most recently allocated) block in the debug heap’s linked list. Then, in two arrays, it records how many of each type of memory block (<B>_NORMAL_BLOCK</B>, <B>_CLIENT_BLOCK</B>, <B>_FREE_BLOCK</B>, and so forth) there are in the list, and the number of bytes allocated in each type of block. Finally, it records the highest number of bytes allocated in the heap as a whole up to that point, and the number of bytes currently allocated.</P>

<P>The following functions report the state and contents of the heap, and use the information to help detect memory leaks and other problems:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=38%><B>Function</B></TD>
<TD class=label width=62%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=38%><A HREF="_crt__crtmemcheckpoint.htm">_CrtMemCheckpoint</A></TD>
<TD width=62%>Saves a snapshot of the heap in a <B>_CrtMemState</B> structure supplied by the application.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%><A HREF="_crt__crtmemdifference.htm">_CrtMemDifference</A></TD>
<TD width=62%>Compares two memory state structures, saves the difference between them in a third state structure, and returns <B>TRUE</B> if the two states are different.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%><A HREF="_crt__crtmemdumpstatistics.htm">_CrtMemDumpStatistics</A></TD>
<TD width=62%>Dumps a given <B>_CrtMemState</B> structure. The structure may contain a snapshot of the state of the debug heap at a given moment, or the difference between two snapshots. “Dumping” means reporting the data in a form that a person can understand.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%><A HREF="_crt__crtmemdumpallobjectssince.htm">_CrtMemDumpAllObjectsSince</A></TD>
<TD width=62%>Dumps information about all objects allocated since a given snapshot was taken of the heap, or from the start of execution. Every time it dumps a <B>_CLIENT_BLOCK</B> block, it calls a hook function supplied by the application, if one has been installed using <B>_CrtSetDumpClient</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%><A HREF="_crt__crtdumpmemoryleaks.htm">_CrtDumpMemoryLeaks</A></TD>
<TD width=62%>Determines whether any memory leaks occurred since the start of program execution, and if so, it dumps all allocated objects. Every time it dumps a <B>_CLIENT_BLOCK</B> block, it calls a hook function supplied by the application, if one has been installed using <B>_CrtSetDumpClient</B>.</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

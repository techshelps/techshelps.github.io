<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>struct</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_struct"></A><SUP></SUP>struct</H1>

<P><B>struct</B> [<I>tag</I>] <B>{</B> <I>member-list</I> <B>}</B> [<I>declarators</I>]<B>;</B></P>

<P>[<B>struct</B>] <I>tag declarators</I><B>;</B></P>

<P>The <B>struct</B> keyword defines a structure type and/or a variable of a structure type. See <A HREF="_langref_anonymous_structures.htm">Anonymous Structures</A> and <A HREF="_langref_unsized_arrays_in_structures.htm">Unsized Array in a Structure</A> for more information.</P>

<P>A structure type is a user-defined composite type. It is composed of "fields" or "members" that can have different types.</P>

<P>In C++, a structure is the same as a class except that its members are public by default.</P>

<P class=label><B>Using a Structure</B></P>

<P>In C, you must explicitly use the <B>struct</B> keyword to declare a structure. In C++, this is unnecessary once the type has been defined.</P>

<P>You have the option of declaring variables when the structure type is defined by placing one or more comma-separated variable names between the closing brace and the semicolon.</P>

<P>For related information, see <A HREF="_langref_class.htm">class</A>, <A HREF="_langref_union.htm">union</A>, and <A HREF="_langref_enum.htm">enum</A>.</P>

<P class=label><B>Example 1</B></P>

<PRE><CODE>struct PERSON              // Declare PERSON struct type
{
   int   age;              // Declare member types
   long  ss;
   float weight;
   char  name[25];
} family_member;           // Define object of type PERSON

   struct PERSON sister;   // C style structure declaration
   PERSON brother;         // C++ style structure declaration

   sister.age  = 13;       // assign values to members
   brother.age =  7;</CODE></PRE>

<P>Structure variables can be initialized. The initialization for each variable must be enclosed in braces.</P>

<P class=label><B>Example 2</B></P>

<PRE><CODE>struct POINT            // Declare POINT structure
{
   int x;               // Define members x and y
   int y;
} spot = { 20, 40 };    // Variable spot has
                        //     values x = 20, y = 40
struct POINT there;     // Variable there has POINT type
struct CELL             // Declare CELL bit field
{
   unsigned character  : 8;  // 00000000 ????????
   unsigned foreground : 3;  // 00000??? 00000000
   unsigned intensity  : 1;  // 0000?000 00000000
   unsigned background : 3;  // 0???0000 00000000
   unsigned blink      : 1;  // ?0000000 00000000
} screen[25][80];       // Array of bit fields </CODE></PRE>
</font>
</BODY>
</HTML>

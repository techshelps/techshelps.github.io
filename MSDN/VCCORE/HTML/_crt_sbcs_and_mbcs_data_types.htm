<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SBCS and MBCS Data Types</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_sbcs_and_mbcs_data_types"></A><SUP></SUP>SBCS and MBCS Data Types</H1>

<P>Any Microsoft MBCS run-time library routine that handles only one multibyte character or one byte of a multibyte character expects an unsigned <B>int</B> argument (where 0x00 &lt;= character value &lt;= 0xFFFF and 0x00 &lt;= byte value &lt;= 0xFF ). An MBCS routine that handles multibyte bytes or characters in a string context expects a multibyte-character string to be represented as an unsigned <B>char</B> pointer.</P>

<P class=indent><B><B>Caution</B></B>&nbsp;&nbsp;&nbsp;Each byte of a multibyte character can be represented in an 8-bit <B>char</B>. However, an SBCS or MBCS single-byte character of type <B>char</B> with a value greater than 0x7F is negative. When such a character is converted directly to an <B>int</B> or a <B>long</B>, the result is sign-extended by the compiler and can therefore yield unexpected results.</P>

<P>Therefore it is best to represent a byte of a multibyte character as an 8-bit <B>unsigned char</B>. Or, to avoid a negative result, simply convert a single-byte character of type <B>char</B> to an <B>unsigned</B> <B>char</B> before converting it to an <B>int</B> or a <B>long</B>.</P>

<P>Because some SBCS string-handling functions take (signed) <B>char*</B> parameters, a type mismatch compiler warning will result when <B>_MBCS</B> is defined. There are three ways to avoid this warning, listed in order of efficiency:

<OL>
	<LI>Use the “type-safe” inline function thunks in TCHAR.H. This is the default behavior.<BR><BR></LI>

	<LI>Use the “direct” macros in TCHAR.H by defining <B>_MB_MAP_DIRECT </B>on the command line. If you do this, you must manually match types. This is the fastest method, but is not type-safe.<BR><BR></LI>

	<LI>Use the “type-safe” statically linked library function thunks in TCHAR.H. To do so, define the constant <B>_NO_INLINING</B> on the command line. This is the slowest method, but the most type-safe.</LI>
</OL>
</font>
</BODY>
</HTML>

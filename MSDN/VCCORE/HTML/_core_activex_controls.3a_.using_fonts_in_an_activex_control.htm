<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Using Fonts in an ActiveX Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.GetFont">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.SetFont">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.InternalGetFont">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.SelectStockFont">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_DISP_PROPERTY_EX">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.using_fonts_in_an_activex_control"></A>ActiveX Controls: Using Fonts in an ActiveX Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>If your ActiveX control displays text, you can allow the control user to change the text appearance by changing a font property. Font properties are implemented as font objects and can be one of two types: stock or custom. Stock Font properties are preimplemented font properties that you can add using ClassWizard. Custom Font properties are not preimplemented and the control developer determines the property’s behavior and usage.</P>

<P>This article covers the following topics:

<UL type=disc>
	<LI><A HREF="#_core_using_the_stock_font_property">Using the stock Font property</A><BR><BR></LI>

	<LI><A HREF="#_core_implementing_a_custom_font_property">Using custom font properties in your control</A></LI>
</UL>



<H3><A NAME="_core_using_the_stock_font_property"></A>Using the Stock Font Property</H3>

<P>Stock Font properties are preimplemented by the class <A HREF="JavaScript:hhobj_3.Click()">COleControl</A>. In addition, a standard Font property page is also available, allowing the user to change various attributes of the font object, such as its name, size, and style. </P>

<P>Access the font object through the <A HREF="JavaScript:hhobj_4.Click()">GetFont</A>, <A HREF="JavaScript:hhobj_5.Click()">SetFont</A>, and <A HREF="JavaScript:hhobj_6.Click()">InternalGetFont</A> functions of <B>COleControl</B>. The control user will access the font object via the <CODE>GetFont</CODE> and <CODE>SetFont</CODE> functions in the same manner as any other Get/Set property. When access to the font object is required from within a control, use the <B>InternalGetFont</B> function.</P>

<P>As discussed in <A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A>, adding stock properties is easy with ClassWizard’s <B>Automation</B> page. You choose the Font property, and ClassWizard automatically inserts the stock Font entry into the control’s dispatch map.</P>

<P class=label><B>To add the stock Font property using ClassWizard</B>

<OL>
	<LI>With your control project open, open ClassWizard by clicking <B>ClassWizard </B>on the <B>View </B>menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>In the <B>Class Name</B> box, select your control class name.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, click <B>Font</B>.<BR><BR></LI>

	<LI>Click <B>OK</B>.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>ClassWizard adds the following line to the control’s dispatch map, located in the control class implementation file:</P>

<PRE><CODE>DISP_STOCKPROP_FONT()
</CODE></PRE>

<P>In addition, ClassWizard adds the following line to the control .ODL file:</P>

<PRE><CODE>[id(DISPID_FONT), bindable] IFontDisp* Font;
</CODE></PRE>

<P>The stock Caption property is an example of a text property that can be drawn using the stock Font property information. Adding the stock Caption property to the control uses steps similar to those used for the stock Font property.</P>

<P class=label><B>To add the stock Caption property using ClassWizard</B>

<OL>
	<LI>With your control project open, open <B>ClassWizard </B>by clicking <B>ClassWizard </B>on the <B>View </B>menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, click <B>Caption</B>.<BR><BR></LI>

	<LI>Click <B>OK</B>.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>ClassWizard adds the following line to the control’s dispatch map, located in the control class implementation file:</P>

<PRE><CODE>DISP_STOCKPROP_CAPTION()
</CODE></PRE>



<H3><A NAME="_core_modifying_the_ondraw_function"></A>Modifying the OnDraw Function</H3>

<P>The default implementation of <CODE>OnDraw</CODE> uses the Windows system font for all text displayed in the control. This means that you must modify the <CODE>OnDraw</CODE> code by selecting the font object into the device context. To do this, call <A HREF="JavaScript:hhobj_7.Click()">COleControl::SelectStockFont</A> and pass the control’s device context, as shown in the following example:</P>

<PRE><CODE>void CSampleCtrl::OnDraw( CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
   CFont* pOldFont;
   TEXTMETRIC tm;
    const CString&amp; strCaption = InternalGetText();

   pOldFont = SelectStockFont( pdc );
   pdc-&gt;FillRect(rcBounds, CBrush::FromHandle(
   (HBRUSH )GetStockObject(WHITE_BRUSH)));
   pdc-&gt;Ellipse(rcBounds);
   pdc-&gt;GetTextMetrics(&amp;tm);
   pdc-&gt;SetTextAlign(TA_CENTER | TA_TOP);
   pdc-&gt;ExtTextOut((rcBounds.left + rcBounds.right) / 2,
   (rcBounds.top + rcBounds.bottom - tm.tmHeight) / 2,
   ETO_CLIPPED, rcBounds, strCaption, strCaption.GetLength(),
   NULL);

   pdc-&gt;SelectObject(pOldFont);
}
</CODE></PRE>

<P>Once the <CODE>OnDraw</CODE> function has been modified to use the font object, any text within the control is displayed with characteristics from the control’s stock Font property.</P>



<H2><A NAME="_core_using_custom_font_properties_in_your_control"></A>Using Custom Font Properties in Your Control</H2>

<P>In addition to the stock Font property, the ActiveX control can have custom Font properties. To add a custom font property you must:

<UL type=disc>
	<LI>Use ClassWizard to implement the custom Font property<BR><BR></LI>

	<LI><A HREF="#_core_processing_font_notifications">Process standard font change notifications</A><BR><BR></LI>

	<LI><A HREF="#_core_implementing_a_new_font_notification_interface">Implement a new Font notification interface</A></LI>
</UL>



<H3><A NAME="_core_implementing_a_custom_font_property"></A>Implementing a Custom Font Property</H3>

<P>To implement a custom Font property, you use ClassWizard to add the property and then make some modifications to the code. The following sections describe how to add the custom <CODE>HeadingFont</CODE> property to the Sample control.</P>

<P class=label><B>To add a custom font property</B>

<OL>
	<LI>With your control project open, open <B>ClassWizard </B>by clicking <B>ClassWizard </B>on the <B>View </B>menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type a name for the property. For this example, use <B>HeadingFont</B>.<BR><BR></LI>

	<LI>In the <B>Implementation </B>box, click <B>Get/Set Methods</B>.<BR><BR></LI>

	<LI>In the <B>Return Type</B> box, select <B>LPFONTDISP </B>for the property’s type.<BR><BR></LI>

	<LI>Click <B>OK</B>.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>ClassWizard will create the code to add the <CODE>HeadingFont</CODE> custom property to the <CODE>CSampleCtrl</CODE> class and the SAMPLE.ODL file. Since <CODE>HeadingFont</CODE> is a Get/Set property type, ClassWizard modifies the <CODE>CSampleCtrl</CODE> class’s dispatch map to include a <A HREF="JavaScript:hhobj_8.Click()">DISP_PROPERTY_EX</A> macro entry:</P>

<PRE><CODE>BEGIN_DISPATCH_MAP(CSampleCtrl, COleControl)
//{{AFX_DISPATCH_MAP(CSampleCtrl)
DISP_PROPERTY_EX(CSampleCtrl, "HeadingFont", GetHeadingFont,
   SetHeadingFont, VT_DISPATCH)
//}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</CODE></PRE>

<P>The <B>DISP_PROPERTY_EX</B> macro associates the <CODE>HeadingFont</CODE> property name with its corresponding <CODE>CSampleCtrl</CODE> class Get and Set methods, <CODE>GetHeadingFont</CODE> and <CODE>SetHeadingFont</CODE>. The type of the property value is also specified; in this case, <B>VT_DISPATCH</B>.</P>

<P>ClassWizard also adds a declaration in the control header file (.H) for the <CODE>GetHeadingFont</CODE> and <CODE>SetHeadingFont</CODE> functions and adds their function templates in the control implementation file (.CPP):</P>

<PRE><CODE>LPDISPATCH CSampleCtrl::GetHeadingFont() 
{
 // TODO: Add your property handler here
 return NULL;
}

void CSampleCtrl::SetHeadingFont(LPDISPATCH newValue)
{
 // TODO: Add your property handler here
 SetModifiedFlag();
}
</CODE></PRE>

<P>Finally, ClassWizard modifies the control .ODL file by adding an entry for the <CODE>HeadingFont</CODE> property:</P>

<PRE><CODE>[id(1)] IDispatch* HeadingFont;
</CODE></PRE>

<H3>Modifications to the Control Code</H3>

<P>Now that you have added the <CODE>HeadingFont</CODE> property to the control, you must make some changes to the control header and implementation files to fully support the new property.</P>

<P>In the control header file (.H), add the following declaration of a protected member variable:</P>

<PRE><CODE>protected:

CFontHolder m_fontHeading;
</CODE></PRE>

<P>In the control implementation file (.CPP), do the following:

<UL type=disc>
	<LI>Initialize <CODE>m_fontHeading</CODE> in the control constructor.
<PRE><CODE>CSampleCtrl::CSampleCtrl( ) : m_fontHeading( &amp;m_xFontNotification )
{
    // [...body of constructor...]
}
</CODE></PRE>
</LI>

	<LI>Declare a static <B>FONTDESC</B> structure containing default attributes of the font.
<PRE><CODE>static const FONTDESC _fontdescHeading =
  { sizeof(FONTDESC), OLESTR("MS Sans Serif"), FONTSIZE( 12 ), FW_BOLD, 
     ANSI_CHARSET, FALSE, FALSE, FALSE };
</CODE></PRE>
</LI>

	<LI>In the control <CODE>DoPropExchange</CODE> member function, add a call to the <B>PX_Font</B> function. This provides initialization and persistence for your custom Font property.
<PRE><CODE>void CSampleCtrl::DoPropExchange(CPropExchange* pPX)
{
    COleControl::DoPropExchange(pPX);

    // [...other PX_ function calls...]
    PX_Font(pPX, _T("HeadingFont"), m_fontHeading, &amp;_fontdescHeading);
}
</CODE></PRE>
</LI>

	<LI>Finish implementing the control <CODE>GetHeadingFont</CODE> member function.
<PRE><CODE>LPFONTDISP CSampleCtrl::GetHeadingFont( )
{
    return m_fontHeading.GetFontDispatch( );
}
</CODE></PRE>
</LI>

	<LI>Finish implementing the control <CODE>SetHeadingFont</CODE> member function.
<PRE><CODE>void CSampleControl::SetHeadingFont( LPFONTDISP newValue )
{
    m_fontHeading.InitializeFont( &amp;_fontdescHeading, newValue);
    OnFontChanged();    //notify any changes
    SetModifiedFlag( );
}
</CODE></PRE>
</LI>

	<LI>Modify the control <CODE>OnDraw</CODE> member function to define a variable to hold the previously selected font.
<PRE><CODE>CFont* pOldHeadingFont;
</CODE></PRE>
</LI>

	<LI>Modify the control <CODE>OnDraw</CODE> member function to select the custom font into the device context by adding the following line wherever the font is to be used.
<PRE><CODE>pOldHeadingFont = SelectFontObject(pdc, m_fontHeading);
</CODE></PRE>
</LI>

	<LI>Modify the control <CODE>OnDraw</CODE> member function to select the previous font back into the device context by adding the following line after the font has been used.
<PRE><CODE>pdc-&gt;SelectObject(pOldHeadingFont);
</CODE></PRE>
</LI>
</UL>

<P>After the custom Font property has been implemented, the standard Font property page should be implemented, allowing control users to change the control’s current font. To add the property page ID for the standard Font property page, insert the following line after the <B>BEGIN_PROPPAGEIDS</B> macro:</P>

<PRE><CODE>PROPPAGEID(CLSID_CFontPropPage)
</CODE></PRE>

<P>You must also increment the count parameter of your <B>BEGIN_PROPPAGEIDS</B> macro by one. The following line illustrates this:</P>

<PRE><CODE>BEGIN_PROPPAGEIDS(CSampleCtrl, 2)
</CODE></PRE>

<P>After these changes have been made, rebuild the entire project to incorporate the additional functionality.</P>



<H3><A NAME="_core_processing_font_notifications"></A>Processing Font Notifications</H3>

<P>In most cases the control needs to know when the characteristics of the font object have been modified. Each font object is capable of providing notifications when it changes by calling a member function of the <B>IFontNotification</B> interface, implemented by <B>COleControl</B>.</P>

<P>If the control uses the stock Font property, its notifications are handled by the <B>OnFontChanged</B> member function of <B>COleControl</B>. When you add custom font properties, you can have them use the same implementation. In the example in the previous section, this was accomplished by passing &amp;<B>m_xFontNotification</B> when initializing the <B>m_fontHeading</B> member variable.</P>

<P class=label><B>Implementing Multiple Font Object Interfaces</B></P>

<P><IMG SRC="d10font.gif" ALT="" BORDER=0></P>

<P>The solid lines in the figure above show that both font objects are using the same implementation of <B>IFontNotification</B>. This could cause problems if you wanted to distinguish which font changed.</P>

<P>One way to distinguish between the control’s font object notifications is to create a separate implementation of the <B>IFontNotification</B> interface for each font object in the control. This technique allows you to optimize your drawing code by updating only the string, or strings, that use the recently modified font. The following sections demonstrate the steps necessary to implement separate notification interfaces for a second Font property. The second font property is assumed to be the <CODE>HeadingFont</CODE> property that was added in the previous section.</P>



<H3><A NAME="_core_implementing_a_new_font_notification_interface"></A>Implementing a New Font Notification Interface</H3>

<P>To distinguish between the notifications of two or more fonts, a new notification interface must be implemented for each font used in the control. The following sections describe how to implement a new font notification interface by modifying the control header and implementation files.</P>

<H3>Additions to the Header File</H3>

<P>In the control header file (.H), add the following lines to the class declaration:</P>

<PRE><CODE>protected:
BEGIN_INTERFACE_PART(HeadingFontNotify, IPropertyNotifySink)
INIT_INTERFACE_PART(CSampleCtrl, HeadingFontNotify)
        STDMETHOD(OnRequestEdit)(DISPID);
        STDMETHOD(OnChanged)(DISPID);
    END_INTERFACE_PART(HeadingFontNotify)
</CODE></PRE>

<P>This creates an implementation of the <B>IPropertyNotifySink</B> interface called <CODE>HeadingFontNotify</CODE>. This new interface contains a method called <CODE>OnChanged</CODE>.</P>

<H3>Additions to the Implementation File</H3>

<P>In the code that initializes the heading font (in the control constructor), change <CODE>&amp;m_xFontNotification</CODE> to <CODE>&amp;m_xHeadingFontNotify</CODE>. Then add the following code:</P>

<PRE><CODE>STDMETHODIMP_(ULONG) CSampleCtrl::XHeadingFontNotify::AddRef( )
{
    METHOD_MANAGE_STATE(CSampleCtrl, HeadingFontNotify)
    return 1;
}
STDMETHODIMP_(ULONG) CSampleCtrl::XHeadingFontNotify::Release( )
{
    METHOD_MANAGE_STATE(CSampleCtrl, HeadingFontNotify)
    return 0;
}

STDMETHODIMP CSampleCtrl::XHeadingFontNotify::QueryInterface( REFIID iid, LPVOID FAR* ppvObj )
{
    METHOD_MANAGE_STATE( CSampleCtrl, HeadingFontNotify )
    if( IsEqualIID( iid, IID_IUnknown ) || 
        IsEqualIID( iid, IID_IPropertyNotifySink))
    {
     *ppvObj= this;
     AddRef( );
     return NOERROR;
    }
    return ResultFromScode(E_NOINTERFACE);
}

STDMETHODIMP CSampleCtrl::XHeadingFontNotify::OnChanged(DISPID)
{
    METHOD_MANAGE_STATE( CSampleCtrl, HeadingFontNotify )
    pThis-&gt;InvalidateControl( );
    return NOERROR;
}

STDMETHODIMP CSampleCtrl::XHeadingFontNotify::OnRequestEdit(DISPID)
{
    return NOERROR;
}
</CODE></PRE>

<P>The <CODE>AddRef</CODE> and <CODE>Release</CODE> methods in the <B>IPropertyNotifySink</B> interface keep track of the reference count for the ActiveX control object. When the control obtains access to interface pointer, the control calls <CODE>AddRef</CODE> to increment the reference count. When the control is finished with the pointer, it calls <CODE>Release</CODE>, in much the same way that <B>GlobalFree</B> might be called to free a global memory block. When the reference count for this interface goes to zero, the interface implementation can be freed. In this example, the <CODE>QueryInterface</CODE> function returns a pointer to a <B>IPropertyNotifySink</B> interface on a particular object. This function allows an ActiveX control to query an object to determine what interfaces it supports.</P>

<P>After these changes have been made to your project, rebuild the project and use Test Container to test the interface.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_activex_controls.3a_.using_pictures_in_an_activex_control.htm">ActiveX Controls: Using Pictures in an ActiveX Control</A>, <A HREF="_core_activex_controls.3a_.using_stock_property_pages.htm">ActiveX Controls: Using Stock Property Pages</A></P>
</font>
</BODY>
</HTML>

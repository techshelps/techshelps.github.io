<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set_terminate</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_set_terminate"></A><SUP></SUP>set_terminate</H1>

<P>Installs your own termination routine to be called by <B>terminate</B>.</P>

<P><B>typedef</B> <B>void</B> <B>(*terminate_function)();</B></P>

<P><B>terminate_function</B> <B>set_terminate(</B> <B>terminate_function</B> <I>term_func</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=23%><B>Routine</B></TD>
<TD class=label width=28%><B>Required Header</B></TD>
<TD class=label width=49%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=23%><B>set_terminate</B></TD>
<TD width=28%>&lt;eh.h&gt;</TD>
<TD width=49%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>set_terminate</B> returns a pointer to the previous function registered by <B>set_terminate</B>, so that the previous function can be restored later. If no previous function has been set, the return value may be used to restore the default behavior; this value may be NULL.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>term_func</I></P>

<P class=indent>Pointer to a terminate function that you write</P>

<P class=label><B>Remarks</B></P>

<P>The <B>set_terminate</B> function installs <I>term_func</I> as the function called by <B>terminate</B>. <B>set_terminate</B> is used with C++ exception handling and may be called at any point in your program before the exception is thrown. <B>terminate</B> calls <B>abort</B> by default. You can change this default by writing your own termination function and calling <B>set_terminate</B> with the name of your function as its argument. <B>terminate</B> calls the last function given as an argument to <B>set_terminate</B>. After performing any desired cleanup tasks, <I>term_func</I> should exit the program. If it does not exit (if it returns to its caller), <B>abort</B> is called.</P>

<P>In a multithreaded environment, terminate functions are maintained separately for each thread. Each new thread needs to install its own terminate function. Thus, each thread is in charge of its own termination handling.</P>

<P>The <B>terminate_function</B> type is defined in EH.H as a pointer to a user-defined termination function, <I>term_func</I>, that returns <B>void</B>. Your custom function <I>term_func</I> can take no arguments and should not return to its caller. If it does, <B>abort</B> is called. An exception may not be thrown from within <I>term_func</I>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The <B>set_terminate</B> function only works outside the debugger.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* TERMINAT.CPP:  
 */
#include &lt;eh.h&gt;
#include &lt;process.h&gt;
#include &lt;iostream.h&gt;

void term_func();

void main()
{

    int i = 10, j = 0, result;
    set_terminate( term_func );
    try
    {
        if( j == 0 )
            throw "Divide by zero!";
        else
            result = i/j;

    }
    catch( int )
    {
        cout &lt;&lt; "Caught some integer exception.\n";
    }
    cout &lt;&lt; "This should never print.\n";

}
void term_func()
{
    cout &lt;&lt; "term_func() was called by terminate().\n";

    // ... cleanup tasks performed here

    // If this function does not exit, abort is called.

    exit(-1);
}


</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>term_func() was called by terminate().

</CODE></PRE>

<P><A HREF="_crt_exception_handling_routines.htm">Exception Handling Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_set_unexpected.htm">set_unexpected</A>, <A HREF="_crt_terminate.htm">terminate</A>, <A HREF="_crt_unexpected.htm">unexpected</A></P>
</font>
</BODY>
</HTML>

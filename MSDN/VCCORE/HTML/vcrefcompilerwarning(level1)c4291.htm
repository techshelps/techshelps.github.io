<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Warning (level 1) C4291</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="vcrefcompilerwarning(level1)c4291"></A>Compiler Warning (level 1) C4291</H1>

<P><B>'declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception</B></P>

<P>A placement new is used for which there is no placement delete.</P>

<P>You could reproduce this error by defining the following class in a global namespace:</P>

<PRE><CODE>typedef unsigned int size_t;

class MemBuffer_t {
public:
   void *Alloc(size_t);
};

MemBuffer_t memBuffer;

void *operator new(size_t size, MemBuffer_t &amp;rBuffer)
{
   return rBuffer.Alloc(size);
}

class X {
public:
   X(int);
};

void f()
{
   X *pX = new (memBuffer) X(10);
}
</CODE></PRE>

<P>This warning will only occur if the user compiles the code with /GX, exception handling enabled.</P>

<P>The fix for the warning is to declare and/or define the following operator delete after you define your operator new:</P>

<PRE><CODE>void operator delete(void *pMem, MemBuffer_t &amp;rBuffer);
</CODE></PRE>
</font>
</BODY>
</HTML>

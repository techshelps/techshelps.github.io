<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generic-Text Mappings in TCHAR.H</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_generic.2d.text_mappings_in_tchar..h"></A><SUP></SUP>Generic-Text Mappings in TCHAR.H</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_unicode_programming_tasks.htm">Unicode Tasks</A>  |&nbsp; <A HREF="_core_multibyte_character_set_.28.mbcs.29_.tasks.htm">Multibyte Character Set (MBCS) Tasks</A></P>

<P>To simplify transporting code for international use, the Microsoft run-time library provides Microsoft-specific “generic-text” mappings for many data types, routines, and other objects. You can use these mappings, which are defined in TCHAR.H, to write generic code that can be compiled for single byte, multibyte, or Unicode, depending on a manifest constant you define using a <B>#define</B> statement. Generic-text mappings are Microsoft extensions that are not ANSI compatible.</P>

<P>Using the header file TCHAR.H, you can build single-byte, MBCS, and Unicode applications from the same sources. TCHAR.H defines macros prefixed with <B>_tcs</B>, which, with the correct preprocessor definitions, map to <B>str</B>, <B>_mbs</B>, or <B>wcs</B> functions as appropriate. To build MBCS, define the symbol <B>_MBCS</B>. To build Unicode, define the symbol <B>_UNICODE</B>. To build a single-byte application, define neither (the default). By default, <B>_MBCS</B> is defined for MFC applications.</P>

<P>The <B>_TCHAR</B> data type is defined conditionally in TCHAR.H. If the symbol <B>_UNICODE</B> is defined for your build, <B>_TCHAR</B> is defined as <B>wchar_t</B>; otherwise, for single-byte and MBCS builds, it is defined as <B>char</B>. (<B>wchar_t</B>, the basic Unicode wide character data type, is the 16-bit counterpart to an 8-bit signed <B>char</B>.) For international applications, use the <B>_tcs</B> family of functions, which operate in <B>_TCHAR</B> units, not bytes. For example, <B>_tcsncpy</B> copies <I>n</I> <B>_TCHAR</B>s, not <I>n</I> bytes.</P>

<P>Because some SBCS string-handling functions take (signed) <B>char*</B> parameters, a type mismatch compiler warning will result when <B>_MBCS</B> is defined. There are three ways to avoid this warning, listed in order of efficiency:

<OL>
	<LI>Use the “type-safe” inline function thunks in TCHAR.H. This is the default behavior.<BR><BR></LI>

	<LI>Use the “direct” macros in TCHAR.H by defining <B>_MB_MAP_DIRECT</B> on the command line. If you do this, you must manually match types. This is the fastest method, but is not type-safe.<BR><BR></LI>

	<LI>Use the “type-safe” statically-linked library function thunks in TCHAR.H. To do so, define the constant <B>_NO_INLINING</B> on the command line. This is the slowest method, but the most type-safe.</LI>
</OL>

<P class=label><B>Preprocessor Directives for Generic-Text Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B># define</B></TD>
<TD class=label width=36%><B>Compiled Version</B></TD>
<TD class=label width=36%><B>Example </B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%><B>_UNICODE</B></TD>
<TD width=36%>Unicode (wide-character)</TD>
<TD width=36%><B>_tcsrev</B> maps to <B>_wcsrev</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%><B>_MBCS</B></TD>
<TD width=36%>Multibyte-character</TD>
<TD width=36%><B>_tcsrev</B> maps to <B>_mbsrev</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%>None (the default: neither <B>_UNICODE</B> nor <B>_MBCS</B> defined)</TD>
<TD width=36%>SBCS (ASCII)</TD>
<TD width=36%><B>_tcsrev</B> maps to <B>strrev</B></TD>
</TR>
</TABLE><BR>

<P>For example, the generic-text function <B>_tcsrev</B>, defined in TCHAR.H, maps to <B>_mbsrev</B> if you defined <B>_MBCS</B> in your program, or to <B>_wcsrev</B> if you defined <B>_UNICODE</B>. Otherwise <B>_tcsrev</B> maps to <B>strrev</B>. Other data type mappings are provided in TCHAR.H for programming convenience, but <B>_TCHAR</B> is the most useful. </P>

<P class=label><B>Generic-Text Data Type Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Generic-Text <BR>
Data Type Name</B></TD>
<TD class=label width=26%><B>_UNICODE &amp; <BR>
_MBCS Not Defined</B></TD>
<TD class=label width=25%><B>_MBCS<BR>
Defined</B></TD>
<TD class=label width=27%><B>_UNICODE <BR>
Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_TCHAR</B></TD>
<TD width=26%><B>char</B></TD>
<TD width=25%><B>char</B></TD>
<TD width=27%><B>wchar_t</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_TINT</B></TD>
<TD width=26%><B>int</B></TD>
<TD width=25%><B>int</B></TD>
<TD width=27%><B>wint_t</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_TSCHAR</B></TD>
<TD width=26%><B>signed char</B></TD>
<TD width=25%><B>signed char</B></TD>
<TD width=27%><B>wchar_t</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_TUCHAR</B></TD>
<TD width=26%><B>unsigned char</B></TD>
<TD width=25%><B>unsigned char</B></TD>
<TD width=27%><B>wchar_t</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_TXCHAR</B></TD>
<TD width=26%><B>char</B></TD>
<TD width=25%><B>unsigned char</B></TD>
<TD width=27%><B>wchar_t</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_T</B> or <B>_TEXT</B></TD>
<TD width=26%>No effect (removed by preprocessor)</TD>
<TD width=25%>No effect (removed by preprocessor)</TD>
<TD width=27%><B>L</B> (converts following character or string to its Unicode counterpart)</TD>
</TR>
</TABLE><BR>

<P>For a complete list of generic-text mappings of routines, variables, and other objects, see Appendix B, <A HREF="_crt_generic.2d.text_mappings.htm">Generic-Text Mappings</A> in the <I>Run-Time Library Reference</I>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Do not use the <I>str</I> family of functions with Unicode strings, which are likely to contain embedded null bytes. Similarly, do not use the <I>wcs</I> family of functions with MBCS (or SBCS) strings.</P>

<P>The following code fragments illustrate the use of <B>_TCHAR</B> and <B>_tcsrev</B> for mapping to the MBCS, Unicode, and SBCS models.</P>

<PRE><CODE>_TCHAR *RetVal, *szString;
RetVal = _tcsrev(szString);
</CODE></PRE>

<P>If <B>_MBCS</B> has been defined, the preprocessor maps this fragment to the code:</P>

<PRE><CODE>char *RetVal, *szString;
RetVal = _mbsrev(szString);
</CODE></PRE>

<P>If <B>_UNICODE</B> has been defined, the preprocessor maps this fragment to the code:</P>

<PRE><CODE>wchar_t *RetVal, *szString;
RetVal = _wcsrev(szString);
</CODE></PRE>

<P>If neither <B>_MBCS</B> nor <B>_UNICODE</B> has been defined, the preprocessor maps the fragment to single-byte ASCII code:</P>

<PRE><CODE>char *RetVal, *szString;
RetVal = strrev(szString);
</CODE></PRE>

<P>Thus you can write, maintain, and compile a single source code file to run with routines that are specific to any of the three kinds of character sets. </P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_using_tchar..h_data_types_with__mbcs_code.htm">Using TCHAR.H Data Types with _MBCS Code</A></P>
</font>
</BODY>
</HTML>

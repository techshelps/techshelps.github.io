<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary of the Logo Requirements</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_sample_mfc_DRAWCLI">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_summary_of_the_logo_requirements"></A>Summary of the Logo Requirements</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>There are five basic requirements your application must meet to qualify for the Windows 95 logo, no matter what type of application it is: 

<UL type=disc>
	<LI>Win32 executable 
<P class=tl>Your application must be a Win32 executable file using the PE (Portable Executable) format. This requirement is satisfied automatically, because Visual C++ for the Intel platform always produces executable files in the PE format. </P>
<P class=tl>If you have a 16-bit application that you need to port, see <A HREF="_core_porting_16.2d.bit_code_to_32.2d.bit_windows.htm">Porting 16-Bit Code to 32-Bit Windows</A>. </P></LI>

	<LI>UPI and Shell support
<P class=tl>Your application must follow the Windows 95 application setup guidelines, register large and small icons, and use system color and metrics. It’s also recommended that your application provide context menus through the right mouse button, use the common dialogs and controls, and follow the user interface guidelines set forth in the <I>Windows Interface Guidelines for Software Design</I> on the MSDN Library CD.</P>
<P class=tl>The section <A HREF="_core_following_ui_recommendations.htm">Following UPI Recommendations</A> below discusses how to add this support using MFC.</P></LI>

	<LI>Windows NT compatibility
<P class=tl>Your application must run successfully on both Windows 95 and Windows NT 3.5 (or greater). If your application uses functionality specific to either operating system, its behavior must degrade gracefully when run on the other operating system (that is, an execution error should not result).</P>
<P class=tl>Meeting this requirement depends on your use of API functions specific to Windows 95 or Windows NT. For a list of these APIs, see the paper "Diving into the Requirements for the Windows 95 Logo" on the MSDN Library CD.</P></LI>

	<LI>Long file name support
<P class=tl>Your application must be able to accept and store long file names and display them in its title bar, in dialogs and controls, and so on. </P>
<P class=tl>The MFC library supports the use of long file names, so you can pass a long file name to any MFC function taking a file name as a parameter. You should also use the MFC common dialog class <B>CFileDialog</B> when requesting a file name from the user. Make sure that any file name-handling code of your own can handle file names longer than eight characters and file names containing spaces or other special characters. For more information on long file names, see Supporting Long File names on the MSDN Library CD.</P></LI>

	<LI>Plug and Play support
<P class=tl>This is recommended but not required. Your application should respond appropriately to the <B>WM_DEVICECHANGE</B>, <B>WM_DISPLAYCHANGE</B>, and <B>WM_POWERBROADCAST</B> messages, which signal changes in peripheral devices, the display resolution, or the system power status, respectively. </P>
<P class=tl>The MFC library responds to the <B>WM_DISPLAYCHANGE</B> message and resizes windows and toolbars according to the new system metrics. How an application should respond to the <B>WM_DEVICECHANGE</B> and <B>WM_POWERBROADCAST</B> messages depends on the specific application; for an example of the most common response to these messages, see the Plug-and-Play awareness component in the Gallery. </P></LI>
</UL>

<P>There are also three other requirements your application must meet if it is file-based (that is, if your application’s primary purpose is to create, edit, and save files):

<UL type=disc>
	<LI>UNC path support 
<P class=tl>Your application must support Universal Naming Convention (UNC) paths. That means your application must be able to accept and store paths of the form “\\server\share\directory” directly, without requiring the user to assign a drive letter to the server beforehand. </P>
<P class=tl>The MFC library supports the use of UNC paths, so you can pass a UNC path to any MFC function taking a path as a parameter. You should also use the MFC common dialog class <B>CFileDialog</B> when requesting a file name from the user. Make sure that any pathname-handling code that you write can handle double backslashes instead of a drive letter at the beginning of a path. </P></LI>

	<LI>OLE support
<P class=tl>Your application must either be an OLE container or an OLE server, or both. In addition, if it’s an OLE container, it must act as a target for drag-and-drop operations, and if it’s an OLE server, it must act as a source for drag-and-drop operations. It’s also recommended (thought not required) that you support Automation and provide summary information with your documents. </P>
<P class=tl>The section <A HREF="_core_adding_ole_support.htm">Adding OLE Support</A> discusses how to add this functionality, using MFC. </P></LI>

	<LI>MAPI support
<P class=tl>Your application must include a Send Mail command on the File menu to enable the user to send the current document as a piece of mail, using MAPI or the Common Messaging Call (CMC) API. </P>
<P class=tl>The section <A HREF="_core_adding_mapi_support.htm">Adding MAPI Support</A> discusses how to add this functionality, using MFC.</P></LI>
</UL>

<P>There are certain additions and exceptions to the previous requirements, depending on the type of application you’re developing; these additions and exceptions are described in the "Logo Criteria" document. </P>

<P>The remainder of this section on Windows 95 logo compliance describes the changes made to the <A HREF="JavaScript:hhobj_2.Click()">DRAWCLI</A> sample application to make it meet the Windows 95 logo requirements, as well as certain user-interface recommendations; you can use this discussion as a guide for modifying your own MFC application. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>pack</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_pack"></A>pack</H1>

<P><B>#pragma pack(</B> [ <I>n</I>] <B>)</B></P>

<P>Specifies packing alignment for structure and union members. Whereas the packing alignment of structures and unions is set for an entire translation unit by the /Zp option, the packing alignment is set at the data-declaration level by the <B>pack</B> pragma. The pragma takes effect at the first structure or union declaration after the pragma is seen; the pragma has no effect on definitions.</P>

<P>When you use <B>#pragma pack(</B><I>n</I><B>)</B>, where <I>n</I> is 1, 2, 4, 8, or 16, each structure member after the first is stored on the smaller member type or <I>n</I>-byte boundaries. If you use <B>#pragma pack</B> without an argument, structure members are packed to the value specified by /Zp. The default /Zp packing size is /Zp8.</P>

<P>The compiler also supports the following enhanced syntax:</P>

<P><B>#pragma pack(</B> [ [ { <B>push</B> | <B>pop</B>}<B>,</B> ] [&nbsp; <I>identifier</I><B>,</B>  ] ] [ <I>n</I> ] <B>)</B></P>

<P>This syntax allows you to combine program components into a single translation unit if the different components use <B>pack</B> pragmas to specify different packing alignments. </P>

<P>Each occurrence of a <B>pack</B> pragma with a <B>push</B> argument stores the current packing alignment on an internal compiler stack. The pragma’s argument list is read from left to right. If you use <B>push</B>, the current packing value is stored. If you provide a value for <I>n</I>, that value becomes the new packing value. If you specify an <I>identifier</I>, a name of your choosing, the <I>identifier</I> is associated with the new packing value.</P>

<P>Each occurrence of a <B>pack</B> pragma with a <B>pop</B> argument retrieves the value at the top of an internal compiler stack and makes that value the new packing alignment. If you use <B>pop</B> and the internal compiler stack is empty, the alignment value is that set from the command-line and a warning is issued. If you use <B>pop</B> and specify a value for <I>n</I>, that value becomes the new packing value. If you use <B>pop</B> and specify an <I>identifier</I>, all values stored on the stack are removed from the stack until a matching <I>identifier</I> is found. The packing value associated with the <I>identifier</I> is also removed from the stack and the packing value that existed just before the <I>identifier</I> was pushed becomes the new packing value. If no matching <I>identifier</I> is found, the packing value set from the command line is used and a level-one warning is issued. The default packing alignment is 8.</P>

<P>The new, enhanced functionality of the <B>pack</B> pragma allows you to write header files that ensure that packing values are the same before and after the header file is encountered:</P>

<PRE><CODE>/* File name: include1.h
*/
#pragma pack( push, enter_include1 )
/* Your include-file code ... */
#pragma pack( pop, enter_include1 )
/* End of include1.h */
</CODE></PRE>

<P>In the previous example, the current pack value is associated with the identifier <CODE>enter_include1</CODE> and pushed, remembered, on entry to the header file. The <B>pack</B> pragma at the end of the header file removes all intervening pack values that may have occurred in the header file and removes the pack value associated with <CODE>enter_include1</CODE>. The header file thus ensures that the pack value is the same before and after the header file.</P>

<P>The new functionality also allows you to use code, such as header files, that uses <B>pack</B> pragmas to set packing alignments that differ from the packing value set in your code:</P>

<PRE><CODE>#pragma pack( push, before_include1 )
#include "include1.h"
#pragma pack( pop, before_include1 )
</CODE></PRE>

<P>In the previous example, your code is protected from any changes to the packing value that might occur in <CODE>include.h</CODE>. </P>
</font>
</BODY>
</HTML>

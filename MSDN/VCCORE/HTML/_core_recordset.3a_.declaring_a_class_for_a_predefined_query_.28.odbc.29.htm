<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recordset: Declaring a Class for a Predefined Query (ODBC)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Enroll tutorial">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CDatabase.3a3a.ExecuteSQL">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CFieldExchange.3a3a.SetFieldType">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.m_nFields">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.m_nFields">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CRecordset.3a3a.m_nParams">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CFieldExchange.3a3a.SetFieldType">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_recordset.3a_.declaring_a_class_for_a_predefined_query_.28.odbc.29"></A>Recordset: Declaring a Class for a Predefined Query (ODBC)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_odbc_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_odbc_database_sample_list.htm">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>This article applies to the MFC ODBC classes. For DAO recordsets, see the article <A HREF="_core_dao_recordset.htm">DAO Recordset</A>.</P>

<P>This article explains how to create a recordset class for a predefined query (sometimes called a “stored procedure,” as in Microsoft SQL Server).</P>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>This article applies to objects derived from <B>CRecordset</B> in which bulk row fetching has not been implemented. If bulk row fetching is implemented, the process is very similar. To understand the differences between recordsets that implement bulk row fetching and those that do not, see the article <A HREF="_core_recordset.3a_.fetching_records_in_bulk_.28.odbc.29.htm">Recordset: Fetching Records in Bulk (ODBC)</A>.</P>

<P>Some database management systems (DBMSs) allow you to create a predefined query and call it from your programs like a function. The query has a name, may or may not take parameters, and may or may not return records. The procedure in this article describes how to call a predefined query that returns records (and perhaps takes parameters). </P>

<P>The database classes don’t support updating predefined queries. The difference between a snapshot predefined query and a dynaset predefined query is not updatability but whether changes made by other users (or other recordsets in your program) are visible in your recordset.</P>

<P class=indent><B><B>Tip&nbsp;&nbsp;&nbsp;</B></B>You don’t need a recordset to call a predefined query that doesn’t return records. Prepare the SQL statement as described below, but execute it by calling the <B>CDatabase</B> member function <A HREF="JavaScript:hhobj_3.Click()">ExecuteSQL</A>. </P>

<P>You can create a single recordset class to manage calling a predefined query, but you must do some of the work yourself. ClassWizard doesn’t support creating a class specifically for this purpose.</P>

<P class=label><B><A NAME="_core_to_create_a_class_for_calling_a_predefined_query_.28.stored_procedure.29"></A>To create a class for calling a predefined query (stored procedure)</B>

<OL>
	<LI>Use <A HREF="_core_classwizard.3a_.creating_a_recordset_class.htm">ClassWizard</A> to create a recordset class for the table that contributes the most columns returned by the query. This gives you a head start.<BR><BR></LI>

	<LI>Manually add field data members for any columns of any tables that the query returns but that ClassWizard didn’t create for you. Add them outside the “//{{AFX_FIELD” comments.
<P class=tl>For example, if the query returns three columns each from two additional tables, add six field data members (of the appropriate data types) to the class. </P></LI>

	<LI>Manually add <A HREF="_core_record_field_exchange_.28.rfx.29.htm">RFX</A> function calls in the <CODE>DoFieldExchange</CODE> member function of the class, one corresponding to the data type of each added field data member.
<PRE><CODE>Add these function calls outside the “//{{AFX_FIELD_MAP” comments. Immediately before these RFX calls, call <A HREF="JavaScript:hhobj_4.Click()">SetFieldType</A>, as shown here: 
pFX-&gt;SetFieldType( CFieldExchange::outputColumn );
</CODE></PRE>

<P class=atl><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>You must know the data types and the order of columns returned in the result set. The order of RFX function calls in <CODE>DoFieldExchange</CODE> must match the order of result set columns.</p></LI>

	<LI>Manually add initializations for the new field data members in the recordset class constructor.
<P class=tl>You must also increment the initialization value for the <A HREF="JavaScript:hhobj_5.Click()">m_nFields</A> data member. ClassWizard writes the initialization, but it only covers the field data members it adds for you. Put the increment statement outside the comment brackets. For example:</P>
<PRE><CODE>m_nFields += 6;
//{{AFX_FIELD(CDelinquents, CRecordset)
...
//}}AFX_FIELD
</CODE></PRE>

<P class=tl>Some data types shouldn’t be initialized here, for example, <B>CLongBinary</B> or byte arrays.</P></LI>

	<LI>If the query takes parameters, add a parameter data member for each parameter, an RFX function call for each, and an initialization for each.<BR><BR></LI>

	<LI>You must increment <B>m_nParams</B> for each added parameter, as you did <B>m_nFields</B> for added fields in step 4 above. See the article <A HREF="_core_recordset.3a_.parameterizing_a_recordset_.28.odbc.29.htm">Recordset: Parameterizing a Recordset (ODBC)</A> for details.<BR><BR></LI>

	<LI>Manually write an SQL statement string with the following form:
<PRE><CODE>{CALL proc-name [(? [, ?]...)]}
</CODE></PRE>

<P class=tl>where <B>CALL</B> is an ODBC keyword, <B>proc-name</B> is the name of the query as it is known on the data source, and the “?” items are placeholders for the parameter values you supply to the recordset at run time (if any). The following example prepares a placeholder for one parameter:</P>
<PRE><CODE>CString mySQL = "{CALL Delinquent_Accts (?)}";
</CODE></PRE>
</LI>

	<LI>In the code that opens the recordset, first set the values of the recordset’s parameter data members, then call the <B>Open</B> member function, passing your SQL string for the <B>lpszSQL</B> parameter. Or instead, replace the string returned by the <CODE>GetDefaultSQL</CODE> member function in your class.</LI>
</OL>

<P>The following examples illustrate the procedure for calling a predefined query, named <CODE>Delinquent_Accts</CODE>, which takes one parameter for a sales district number. This query returns three columns: <CODE>Acct_No</CODE>, <CODE>L_Name</CODE>, <CODE>Phone</CODE>. All columns are from the Customers table.</P>

<P>The recordset below specifies field data members for the columns the query returns and a parameter for the sales district number requested at run time.</P>

<PRE><CODE>class CDelinquents : public CRecordset
{
// Field/Param Data
    //{{AFX_FIELD(CDelinquents, CRecordset)
    LONG m_lAcct_No;
    CString m_strL_Name;
    CString m_strPhone;
    //}}AFX_FIELD
    LONG m_lDistParam;
    // ...
};
</CODE></PRE>

<P>This class declaration is as ClassWizard writes it, except for the <CODE>m_lDistParam</CODE> member added manually outside the “//{{AFX_FIELD” comment. Other members below the comments aren’t shown here.</P>

<P>The next example shows the initializations for the data members in the <CODE>CDelinquents</CODE> constructor. You add the two lines outside the comment brackets.</P>

<PRE><CODE>CDelinquents::CDelinquents(CDatabase* pdb)
   : CRecordset(pdb)
{
    //{{AFX_FIELD_INIT(CDelinquents)
    m_lAcct_No = 0;
    m_strL_Name = "";
    m_strPhone = "";
    m_nFields = 3;
    //}}AFX_FIELD_INIT
    m_nParams = 1;
    m_lDistParam = 0;
}
</CODE></PRE>

<P>Note the initializations for <A HREF="JavaScript:hhobj_6.Click()">m_nFields</A> and <A HREF="JavaScript:hhobj_7.Click()">m_nParams</A>. ClassWizard initializes <B>m_nFields</B>; you initialize <B>m_nParams</B>.</P>

<P>The next example shows the RFX functions in <CODE>CDelinquents::DoFieldExchange</CODE>:</P>

<PRE><CODE>void CDelinquents::DoFieldExchange(CFieldExchange* pFX)
{
//{{AFX_FIELD_MAP(CDelinquents)
    pFX-&gt;SetFieldType(CFieldExchange::outputColumn);
    RFX_Long(pFX, "Acct_No", m_lAcct_No);
    RFX_Text(pFX, "L_Name", m_strL_Name);
    RFX_Text(pFX, "Phone", m_strPhone);
//}}AFX_FIELD_MAP
    pFX-&gt;SetFieldType(CFieldExchange::param);
    RFX_Long(pFX, "Dist_No", m_lDistParam);
}
</CODE></PRE>

<P>Besides making the RFX calls for the three returned columns, this code manages binding the parameter you pass at run time. The parameter is keyed to the <CODE>Dist_No</CODE> (district number) column.</P>

<P>The next example shows how to set up the SQL string and how to use it to open the recordset.</P>

<PRE><CODE>// Construct a CDelinquents recordset object
CDelinquents rsDel( NULL );
CString strSQL = "{CALL Delinquent_Accts (?)}"
// Specify a parameter value (obtained earlier from the user)
rsDel.m_lDistParam = lDistrict;
// Open the recordset and run the query
if( rsDel.Open( CRecordset::snapshot, strSQL ) )
    // Use the recordset ...
</CODE></PRE>

<P>This code constructs a snapshot, passes it a parameter obtained earlier from the user, and calls the predefined query. When the query runs, it returns records for the specified sales district. Each record contains columns for the account number, customer’s last name, and customer’s phone number.</P>

<P class=indent><B><B>Tip&nbsp;&nbsp;&nbsp;</B></B>You might want to handle a return value (output parameter) from a stored procedure. For more information and an example, see <A HREF="JavaScript:hhobj_8.Click()">CFieldExchange::SetFieldType</A>.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_recordset.3a_.requerying_a_recordset_.28.odbc.29.htm">Recordset: Requerying a Recordset (ODBC)</A>, <A HREF="_core_recordset.3a_.declaring_a_class_for_a_table_.28.odbc.29.htm">Recordset: Declaring a Class for a Table (ODBC)</A>, <A HREF="_core_recordset.3a_.performing_a_join_.28.odbc.29.htm">Recordset: Performing a Join (ODBC)</A> </P>
</font>
</BODY>
</HTML>

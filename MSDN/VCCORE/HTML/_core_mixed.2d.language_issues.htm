<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mixed-Language Issues</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mixed.2d.language_issues"></A>Mixed-Language Issues</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming_tasks.htm">How Do I</A></P>

<P>This section reviews basic concepts of mixed-language programming, and introduces relevant new Win32 features. For example, the <B>__stdcall</B> keyword replaces the <B>fortran</B> and <B>pascal</B> keywords in C modules. Another important aspect of Win32 is that all addresses are the same size, simplifying pass by reference. Thus, you may want to review this section even if you have written mixed-language programs extensively for MS-DOS.</P>

<P>Mixed-language programming is possible with Microsoft languages because each language implements functions, subroutines, and procedures approximately the same way. The following table shows how different kinds of routines from each language equate to each other. For example, a C main program could call an external <B>void</B> function, which is actually implemented as a Fortran subroutine.</P>

<P class=label><B><A NAME="_core_language_equivalents_for_calls_to_routines"></A>Language Equivalents for Calls to Routines</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B>Language</B></TD>
<TD class=label width=33%><B>Call with return value</B></TD>
<TD class=label width=39%><B>Call with no return value</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Assembly language </TD>
<TD width=33%>Procedure </TD>
<TD width=39%>Procedure</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>C and C++ </TD>
<TD width=33%>function </TD>
<TD width=39%>(<B>void</B>) function</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Fortran </TD>
<TD width=33%><B>FUNCTION</B> </TD>
<TD width=39%><B>SUBROUTINE</B></TD>
</TR>
</TABLE><BR>

<P>In this family of articles, the term “routine” refers to functions, subroutines, and procedures from different languages. This definition does not include macros or inline functions, which are not implemented using the stack.</P>

<P>There are some important differences in the way languages implement these routines, however. This article family presents a series of keywords, attributes, and techniques to reconcile these differences, which fall into three categories:

<UL type=disc>
	<LI><A HREF="_core_adjusting_calling_conventions.htm">Adjusting calling conventions</A><BR><BR></LI>

	<LI><A HREF="_core_adjusting_naming_conventions.htm">Adjusting naming conventions</A><BR><BR></LI>

	<LI><A HREF="_core_passing_by_value_or_by_reference.htm">Passing by value or by reference</A></LI>
</UL>

<P>In addition, you need to reconcile differences in the way individual data types (strings, arrays, common blocks, and so on) may be treated. This important and complex topic is discussed in <A HREF="_core_handling_data_types_in_multiple_languages.htm">Handling Data Types in Multiple Languages</A>.</P>
</font>
</BODY>
</HTML>

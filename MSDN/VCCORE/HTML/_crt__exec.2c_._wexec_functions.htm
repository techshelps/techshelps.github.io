<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_exec, _wexec Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__exec.2c_._wexec_functions"></A><SUP></SUP>_exec, _wexec Functions</H1>

<P>Each of the functions in this family loads and executes a new process.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=35%><A HREF="_crt__execl.2c_._wexecl.htm">_execl, _wexecl</A></TD>
<TD width=65%><A HREF="_crt__execv.2c_._wexecv.htm">_execv, _wexecv</A></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="_crt__execle.2c_._wexecle.htm">_execle, _wexecle</A></TD>
<TD width=65%><A HREF="_crt__execve.2c_._wexecve.htm">_execve, _wexecve</A></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="_crt__execlp.2c_._wexeclp.htm">_execlp, _wexeclp</A></TD>
<TD width=65%><A HREF="_crt__execvp.2c_._wexecvp.htm">_execvp, _wexecvp</A></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="_crt__execlpe.2c_._wexeclpe.htm">_execlpe, _wexeclpe</A></TD>
<TD width=65%><A HREF="_crt__execvpe.2c_._wexecvpe.htm">_execvpe, _wexecvpe</A></TD>
</TR>
</TABLE><BR>

<P>The letter(s) at the end of the function name determine the variation.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>_exec Function Suffix</B></TD>
<TD class=label width=84%><B><BR>
Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>e</B></TD>
<TD width=84%><I>envp</I>, array of pointers to environment settings, is passed to new process.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>l</B></TD>
<TD width=84%>Command-line arguments are passed individually to <B>_exec</B> function. Typically used when number of parameters to new process is known in advance.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>p</B></TD>
<TD width=84%><B>PATH</B> environment variable is used to find file to execute.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>v</B></TD>
<TD width=84%><I>argv,</I> array of pointers to command-line arguments, is passed to <B>_exec</B>. Typically used when number of parameters to new process is variable.</TD>
</TR>
</TABLE><BR>

<P class=label><B>Remarks</B></P>

<P>Each of the <B>_exec</B> functions loads and execute a new process. All <B>_exec</B> functions use the same operating-system function. The _<B>exec</B> functions automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use. The <B>_wexec</B> functions are wide-character versions of the <B>_exec</B> functions. The <B>_wexec</B> functions behave identically to their <B>_exec</B> family counterparts except that they do not handle multibyte-character strings.</P>

<P class=label><B>Generic-Text Routine Mappings:</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecl</TD>
<TD width=29%>_execl</TD>
<TD width=26%>_execl</TD>
<TD width=28%>_wexecl</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecle</TD>
<TD width=29%>_execle</TD>
<TD width=26%>_execle</TD>
<TD width=28%>_wexecle</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texeclp</TD>
<TD width=29%>_execlp</TD>
<TD width=26%>_execlp</TD>
<TD width=28%>_wexeclp</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texeclpe</TD>
<TD width=29%>_execlpe</TD>
<TD width=26%>_execlpe</TD>
<TD width=28%>_wexeclpe</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecv</TD>
<TD width=29%>_execv</TD>
<TD width=26%>_execv</TD>
<TD width=28%>_wexecv</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecve</TD>
<TD width=29%>_execve</TD>
<TD width=26%>_execve</TD>
<TD width=28%>_wexecve</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecvp</TD>
<TD width=29%>_execvp</TD>
<TD width=26%>_execvp</TD>
<TD width=28%>_wexecvp</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_texecvpe</TD>
<TD width=29%>_execvpe</TD>
<TD width=26%>_execvpe</TD>
<TD width=28%>_wexecvpe</TD>
</TR>
</TABLE><BR>

<P>When a call to an <B>_exec</B> function is successful, the new process is placed in the memory previously occupied by the calling process. Sufficient memory must be available for loading and executing the new process. </P>

<P>The <I>cmdname</I> parameter specifies the file to be executed as the new process. It can specify a full path (from the root), a partial path (from the current working directory), or a filename. If <I>cmdname</I> does not have a filename extension or does not end with a period (.), the <B>_exec</B> function searches for the named file. If the search is unsuccessful, it tries the same base name with the .COM extension and then with the .EXE, .BAT, and .CMD extensions. If <I>cmdname</I> has an extension, only that extension is used in the search. If <I>cmdname</I> ends with a period, the <B>_exec</B> function searches for <I>cmdname</I> with no extension. <B>_execlp</B>, <B>_execlpe</B>, <B>_execvp</B>, and <B>_execvpe</B> search for <I>cmdname</I> (using the same procedures) in the directories specified by the <B>PATH</B> environment variable. If <I>cmdname</I> contains a drive specifier or any slashes (that is, if it is a relative path), the <B>_exec</B> call searches only for the specified file; the path is not searched.</P>

<P>Parameters are passed to the new process by giving one or more pointers to character strings as parameters in the <B>_exec</B> call. These character strings form the parameter list for the new process. The combined length of the inherited environment settings and the strings forming the parameter list for the new process must not exceed 32K bytes. The terminating null character ('\0') for each string is not included in the count, but space characters (inserted automatically to separate the parameters) are counted.</P>

<P>The argument pointers can be passed as separate parameters (in <B>_execl</B>, <B>_execle</B>, <B>_execlp</B>, and <B>_execlpe</B>) or as an array of pointers (in <B>_execv</B>, <B>_execve</B>, <B>_execvp</B>, and <B>_execvpe</B>). At least one parameter, <I>arg0</I>, must be passed to the new process; this parameter is <I>argv</I>[0] of the new process. Usually, this parameter is a copy of <I>cmdname</I>. (A different value does not produce an error.)</P>

<P>The <B>_execl</B>, <B>_execle</B>, <B>_execlp</B>, and <B>_execlpe</B> calls are typically used when the number of parameters is known in advance. The parameter <I>arg0</I> is usually a pointer to <I>cmdname</I>. The parameters <I>arg1</I> through <I>argn</I> point to the character strings forming the new parameter list. A null pointer must follow <I>argn</I> to mark the end of the parameter list.</P>

<P>The <B>_execv</B>, <B>_execve</B>, <B>_execvp</B>, and <B>_execvpe</B> calls are useful when the number of parameters to the new process is variable. Pointers to the parameters are passed as an array, <I>argv</I>. The parameter <I>argv</I>[0] is usually a pointer to <I>cmdname</I>. The parameters <I>argv</I>[1] through <I>argv</I>[<I>n</I>] point to the character strings forming the new parameter list. The parameter <I>argv</I>[<I>n</I>+1] must be a <B>NULL</B> pointer to mark the end of the parameter list.</P>

<P>Files that are open when an <B>_exec</B> call is made remain open in the new process. In <B>_execl</B>, <B>_execlp</B>, <B>_execv</B>, and <B>_execvp</B> calls, the new process inherits the environment of the calling process. <B>_execle</B>, <B>_execlpe</B>, <B>_execve</B>, and <B>_execvpe</B> calls alter the environment for the new process by passing a list of environment settings through the <I>envp</I> parameter. <I>envp</I> is an array of character pointers, each element of which (except for the final element) points to a null-terminated string defining an environment variable. Such a string usually has the form <I>NAME</I>=<I>value</I> where <I>NAME</I> is the name of an environment variable and <I>value</I> is the string value to which that variable is set. (Note that <I>value</I> is not enclosed in double quotation marks.) The final element of the <I>envp</I> array should be <B>NULL</B>. When <I>envp</I> itself is <B>NULL</B>, the new process inherits the environment settings of the calling process.</P>

<P>A program executed with one of the <B>_exec</B> functions is always loaded into memory as if the “maximum allocation” field in the program’s .EXE file header were set to the default value of 0xFFFFH. You can use the EXEHDR utility to change the maximum allocation field of a program; however, such a program invoked with one of the <B>_exec</B> functions may behave differently from a program invoked directly from the operating-system command line or with one of the <B>_spawn</B> functions.</P>

<P>The <B>_exec</B> calls do not preserve the translation modes of open files. If the new process must use files inherited from the calling process, use the <A HREF="_crt__setmode.htm">_setmode</A> routine to set the translation mode of these files to the desired mode. You must explicitly flush (using <B>fflush</B> or <B>_flushall</B>) or close any stream before the <B>_exec</B> function call. Signal settings are not preserved in new processes that are created by calls to <B>_exec</B> routines. The signal settings are reset to the default in the new process.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* EXEC.C illustrates the different versions of exec including:
 *      _execl          _execle          _execlp          _execlpe
 *      _execv          _execve          _execvp          _execvpe
 *
 * Although EXEC.C can exec any program, you can verify how 
 * different versions handle arguments and environment by 
 * compiling and specifying the sample program ARGS.C. See 
 * SPAWN.C for examples of the similar spawn functions.
 */

#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;process.h&gt;

char *my_env[] =                /* Environment for exec?e */
{
   "THIS=environment will be",
   "PASSED=to new process by",
   "the EXEC=functions",
   NULL
};

void main()
{
   char *args[4], prog[80];
   int ch;

   printf( "Enter name of program to exec: " );
   gets( prog );
   printf( " 1. _execl  2. _execle  3. _execlp  4. _execlpe\n" );
   printf( " 5. _execv  6. _execve  7. _execvp  8. _execvpe\n" );
   printf( "Type a number from 1 to 8 (or 0 to quit): " );
   ch = _getche();
   if( (ch &lt; '1') || (ch &gt; '8') )
       exit( 1 );
   printf( "\n\n" );

   /* Arguments for _execv? */
   args[0] = prog;
   args[1] = "exec??";
   args[2] = "two";
   args[3] = NULL;

   switch( ch )
   {
   case '1':
      _execl( prog, prog, "_execl", "two", NULL );
      break;
   case '2':
      _execle( prog, prog, "_execle", "two", NULL, my_env );
      break;
   case '3':
      _execlp( prog, prog, "_execlp", "two", NULL );
      break;
   case '4':
      _execlpe( prog, prog, "_execlpe", "two", NULL, my_env );
      break;
   case '5':
      _execv( prog, args );
      break;
   case '6':
      _execve( prog, args, my_env );
      break;
   case '7':
      _execvp( prog, args );
      break;
   case '8':
      _execvpe( prog, args, my_env );
      break;
   default:
      break;
   }

   /* This point is reached only if exec fails. */
   printf( "\nProcess was not execed." );
   exit( 0 );
}
 

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_atexit.htm">atexit</A>, <A HREF="_crt_exit.2c_._exit.htm">exit</A>, <A HREF="_crt__onexit.htm">_onexit</A>, <A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn Function Overview</A>, <A HREF="_crt_system.2c_._wsystem.htm">system</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging COM Applications</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_debug_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_debugging_activex_applications"></A>Debugging COM Applications</H1>

<P>ActiveX applications perform a number of tasks outside of the programmer’s direct control. Communication between DLLs, usage counts on objects, and Clipboard operations are just a few of the areas where you may encounter unexpected behavior. Usually when this happens, your first step is to track down the source of the problem. The difficulty with ActiveX applications is that it isn’t always obvious how to debug a particular problem. This series of topics describes techniques you can use to track down problems, some of which are unique to ActiveX applications. It also introduces you to the special tools and testing aids available to help you write solid ActiveX applications.</P>

<P>Debugging ActiveX applications begins with the same general debugging techniques you use in other kinds of applications. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Debugging Your Program</A> and <A HREF="_core_using_mfc_debugging_support.htm">Using MFC Debugging Support</A>.</P>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;When you’re debugging an ActiveX server and container, start up two instances of Visual C++, load the container into one, and the server into the other, set appropriate breakpoints in each, and debug. When the container makes a call into the server that hits a breakpoint, the container will wait until the server code returns (that is, until you finish debugging it). You can also trace into calls that go across process boundaries. For more information on tracing into these calls, see <A HREF="_core_the_trace_macro.htm">The Trace Macro</A>.</P>
</font>
</BODY>
</HTML>

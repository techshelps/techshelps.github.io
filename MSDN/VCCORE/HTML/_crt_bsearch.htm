<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>bsearch</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_bsearch"></A><SUP></SUP>bsearch</H1>

<P>Performs a binary search of a sorted array.</P>

<P><B>void</B> <B>*bsearch(</B> <B>const</B> <B>void</B> <B>*</B><I>key</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>base</I><B>, size_t</B> <I>num</I><B>, size_t</B> <I>width</I><B>, int</B> <B>(</B> <B>__cdecl</B> <B>*</B><I>compare</I> <B>) (</B> <B>const</B> <B>void</B> <B>*</B><I>elem1</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>elem2</I> <B>)</B> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=36%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>bsearch</B></TD>
<TD width=36%>&lt;stdlib.h&gt; and &lt;search.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT </TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>bsearch</B> returns a pointer to an occurrence of <I>key</I> in the array pointed to by <I>base</I>. If <I>key</I> is not found, the function returns <B>NULL</B>. If the array is not in ascending sort order or contains duplicate records with identical keys, the result is unpredictable.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>key</I></P>

<P class=indent>Object to search for</P>

<P class=dt><I>base</I></P>

<P class=indent>Pointer to base of search data</P>

<P class=dt><I>num</I></P>

<P class=indent>Number of elements</P>

<P class=dt><I>width</I></P>

<P class=indent>Width of elements</P>

<P class=dt><I>compare</I></P>

<P class=indent>Function that compares two elements: <I>elem1</I> and <I>elem2</I></P>

<P class=dt><I>elem1</I></P>

<P class=indent>Pointer to the key for the search</P>

<P class=dt><I>elem2</I></P>

<P class=indent>Pointer to the array element to be compared with the key</P>

<P class=label><B>Remarks</B></P>

<P>The <B>bsearch</B> function performs a binary search of a sorted array of <I>num</I> elements, each of <I>width</I> bytes in size. The <I>base</I> value is a pointer to the base of the array to be searched, and <I>key</I> is the value being sought. The <I>compare</I> parameter is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship. <B>bsearch</B> calls the <I>compare</I> routine one or more times during the search, passing pointers to two array elements on each call. The <I>compare</I> routine compares the elements, then returns one of the following values:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=53%><B>Value Returned by <I>compare </I>Routine</B></TD>
<TD class=label width=47%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=53%>&lt; 0</TD>
<TD width=47%><I>elem1</I> less than <I>elem2</I></TD>
</TR>

<TR VALIGN="top">
<TD width=53%>0</TD>
<TD width=47%><I>elem1</I> equal to <I>elem2</I></TD>
</TR>

<TR VALIGN="top">
<TD width=53%>&gt; 0</TD>
<TD width=47%><I>elem1</I> greater than <I>elem2</I></TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* BSEARCH.C: This program reads the command-line
 * parameters, sorting them with qsort, and then
 * uses bsearch to find the word "cat."
 */

#include &lt;search.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int compare( char **arg1, char **arg2 ); /* Declare a function for compare */

void main( int argc, char **argv )
{
   char **result;
   char *key = "cat";
   int i;

   /* Sort using Quicksort algorithm: */
   qsort( (void *)argv, (size_t)argc, sizeof( char * ), (int (*)(const 
   void*, const void*))compare );

   for( i = 0; i &lt; argc; ++i )    /* Output sorted list */
      printf( "%s ", argv[i] );

   /* Find the word "cat" using a binary search algorithm: */
   result = (char **)bsearch( (char *) &amp;key, (char *)argv, argc,
                              sizeof( char * ), (int (*)(const void*, const void*))compare );
   if( result )
      printf( "\n%s found at %Fp\n", *result, result );
   else
      printf( "\nCat not found!\n" );
}

int compare( char **arg1, char **arg2 )
{
   /* Compare all of both strings: */
   return _strcmpi( *arg1, *arg2 );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>[C:\work]bsearch dog pig horse cat human rat cow goat
bsearch cat cow dog goat horse human pig rat
cat found at 002D0008

</CODE></PRE>

<P><A HREF="_crt_searching_and_sorting.htm">Searching and Sorting Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__lfind.htm">_lfind</A>, <A HREF="_crt__lsearch.htm">_lsearch</A>, <A HREF="_crt_qsort.htm">qsort</A></P>
</font>
</BODY>
</HTML>

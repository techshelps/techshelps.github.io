<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_wtoi, _wtoi64, _wtol</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__wtoi.2c_._wtol"></A><SUP></SUP>_wtoi, _wtoi64, _wtol</H1>

<P>Converts a wide-character string to an integer (<B>_wtoi</B> and <B>_wtoi64</B>) or to a long integer (<B>_wtol</B>).</P>

<P><B>int</B> <B>_wtoi(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>string</I> <B>);</B></P>

<P><B>__int64</B> <B>_wtoi64(</B> <B>wchar_t</B> <B>*</B><I>string</I> <B>);</B></P>

<P><B>long</B> <B>_wtol(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>string</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=56%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wtoi</B></TD>
<TD width=27%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wtoi64</B></TD>
<TD width=27%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wtol</B></TD>
<TD width=27%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each function returns the <B>int</B>, <B>__int64</B>, or <B>long</B> value produced by interpreting the input characters as a number. If the input cannot be converted to a value of the appropriate type, <B>_wtoi</B> and <B>_wtoi64</B> return 0 and <B>_wtol</B> returns 0L. The return value is undefined in case of overflow.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>string</I></P>

<P class=indent>String to be converted</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_wtoi</B> and <B>_wtoi64</B> function converts a wide-character string to an integer value. <B>_wtol</B> converts a wide-character string to a long integer value. The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The output value is affected by the setting of the <B>LC_NUMERIC</B> category of the current locale. (For more information on the <B>LC_NUMERIC</B> category, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>.The function stops reading the input string at the first character that it cannot recognize as part of a number. This character may be the null character (L'\0') terminating the string.</P>

<P>The <I>string</I> argument for these functions has the form</P>

<P>[<I>whitespace</I>] [<I>sign</I>]<I>digits</I></P>

<P>A <I>whitespace</I> consists of space and/or tab characters, which are ignored. <I>sign</I> is either plus (<B>+</B>) or minus ( <B>–</B> ). <I>digits</I> is one or more decimal digits. <B>_wtoi</B>, <B>_wtoi64</B>, and <B>_wtol</B> do not recognize decimal points or exponents. </P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* ATOF.C: This program shows how numbers stored
 * as strings can be converted to numeric values
 * using the atof, atoi, and atol functions.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char *s; double x; int i; long l;

   s = "  -2309.12E-15";    /* Test of atof */
   x = atof( s );
   printf( "atof test: ASCII string: %s\tfloat:  %e\n", s, x );

   s = "7.8912654773d210";  /* Test of atof */
   x = atof( s );
   printf( "atof test: ASCII string: %s\tfloat:  %e\n", s, x );

   s = "  -9885 pigs";      /* Test of atoi */
   i = atoi( s );
   printf( "atoi test: ASCII string: %s\t\tinteger: %d\n", s, i );

   s = "98854 dollars";     /* Test of atol */
   l = atol( s );
   printf( "atol test: ASCII string: %s\t\tlong: %ld\n", s, l );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>atof test: ASCII string:   -2309.12E-15   float:  -2.309120e-012
atof test: ASCII string: 7.8912654773d210   float:  7.891265e+210
atoi test: ASCII string:   -9885 pigs      integer: -9885
atol test: ASCII string: 98854 dollars      long: 98854

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol.htm">atoi</A>, <A HREF="_crt__ecvt.htm">_ecvt</A>, <A HREF="_crt__fcvt.htm">_fcvt</A>, <A HREF="_crt__gcvt.htm">_gcvt</A></P>
</font>
</BODY>
</HTML>

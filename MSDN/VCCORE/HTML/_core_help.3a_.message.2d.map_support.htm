<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Help: Message-Map Support</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Sample_mfc_scribble">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble help">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_help.3a_.message.2d.map_support"></A>Help: Message-Map Support</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_help.3a_.context.2d.sensitive_help_overview.htm">Overview</A>  |&nbsp; <A HREF="_core_help_tasks.3a_.context.2d.sensitive_help_for_your_programs.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_3.Click()">Tutorial</A></P>

<P>AppWizard adds a new menu command to the two Help menus: Help Topics. Support for this command and for F1 and SHIFT+F1 help is provided through the message map. Topics covered in this article include:

<UL type=disc>
	<LI><A HREF="#_core_help_commands_in_the_message_map">Help commands in the message map</A><BR><BR></LI>

	<LI><A HREF="#_core_about_the_help_commands">About the Help commands</A><BR><BR></LI>

	<LI><A HREF="#_core_completing_your_application.92.s_help">Completing your application’s Help</A></LI>
</UL>



<H2><A NAME="_core_help_commands_in_the_message_map"></A>Help Commands in the Message Map</H2>

<P>To support the Help Topics menu item, F1 help, and SHIFT+F1 help, AppWizard adds four entries to the message map for your <B>CFrameWnd</B>-derived or <B>CMDIFrameWnd</B>-derived class. This message map is in the MainFrm.cpp file, and the relevant message map entries are located below the <CODE>// Global help commands</CODE> comment.</P>

<P>After you run AppWizard, click Context-Sensitive Help. The message map for class <CODE>CMainFrame</CODE> will look like the following for an MDI application:</P>

<PRE><CODE>// CMainFrame

BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd)
   //{{AFX_MSG_MAP(CMainFrame)

   // NOTE - the ClassWizard will add and remove mapping macros here.
   //   DO NOT EDIT what you see in these blocks of generated code !
   ON_WM_CREATE()
   //}}AFX_MSG_MAP
   // Global help commands
   ON_COMMAND(ID_HELP_FINDER, CMDIFrameWnd::OnHelpFinder)
   ON_COMMAND(ID_HELP, CMDIFrameWnd::OnHelp)
   ON_COMMAND(ID_CONTEXT_HELP, CMDIFrameWnd::OnContextHelp)
   ON_COMMAND(ID_DEFAULT_HELP, CMDIFrameWnd::OnHelpFinder)
END_MESSAGE_MAP()
</CODE></PRE>

<P>For an SDI application, references to <B>CMDIFrameWnd</B> in this code are replaced by references to <B>CFrameWnd</B>.</P>



<H2><A NAME="_core_about_the_help_commands"></A>About the Help Commands</H2>

<P>The four help-related message-map entries follow the <CODE>// Global help commands</CODE> comment. The following table explains the purpose of each command ID used in these entries.</P>

<P class=label><B><A NAME="_core_table_1_help.2d.related_command_ids"></A>Help-Related Command IDs</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=31%><B>Command ID</B></TD>
<TD class=label width=69%><B>Purpose</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>ID_HELP_FINDER</B></TD>
<TD width=69%>Responds to the Help Topics item on the Help menu by displaying the Windows Contents screen. </TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>ID_HELP</B></TD>
<TD width=69%>Responds to F1 by displaying a specific topic in Windows Help.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>ID_CONTEXT_HELP</B></TD>
<TD width=69%>Responds to SHIFT+F1 by putting the application into Help mode.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>ID_DEFAULT_HELP</B></TD>
<TD width=69%>Used when a specific help context cannot be found.</TD>
</TR>
</TABLE><BR>

<P>Notice that all of these commands are mapped to member functions of class <B>CMDIFrameWnd</B> (in the case of an MDI application), or to <B>CFrameWnd</B> (in the case of an SDI application). Unlike most of the other commands you place into the message map, these have handler functions that are predefined by the class library. Making the message-map entry enables the command.</P>

<P>The application’s accelerator table defines F1 for <B>ID_HELP</B> and SHIFT+F1 for <B>ID_CONTEXT_HELP</B>. You can change the keys used for these help functions by using Visual C++ to change the key values in the accelerator table.</P>

<P>When the user chooses a Help menu command (or uses one of the context-sensitive Help techniques described in <A HREF="_core_help.3a_.f1_and_shift.2b.f1_help.htm#_core_f1_help_support">F1 Help Support</A> and <A HREF="_core_help.3a_.f1_and_shift.2b.f1_help.htm#_core_shift.2b.f1_help_support">SHIFT+F1 Help Support</A> in the article Help: F1 and SHIFT+F1 Help), the framework calls the <B>CWinApp::WinHelp</B> member function. This action, in turn, starts the Windows Help program and passes context information to it.</P>



<H2><A NAME="_core_completing_your_application.92.s_help"></A>Completing Your Application’s Help</H2>

<P>Once you have used AppWizard to provide the generic help support, you can complete the help for your application by doing the following:

<OL>
	<LI>Add application-specific user-interface elements.
<P class=tl>Use the integrated development environment to create your application’s dialog boxes, menus, and other resources.</P></LI>

	<LI>Write application-specific Help topics.
<P class=tl>Starting with the .RTF files supplied by AppWizard in your project’s HLP subdirectory, remove topics that don’t apply to your application, edit the remaining material, and add new topics for the menu commands, dialog boxes, toolbar buttons, and so on, that you added to your program. Each Help topic requires a help context ID. The help context is the same as the resource ID with an “H” added to the beginning. For example, if your application’s RESOURCE.H file contains the resource ID <CODE>ID_PEN_WIDTHS</CODE>, write a topic with the help-context ID <CODE>HID_PEN_WIDTHS</CODE>.</P>
<P class=tl>This mapping between the resource ID and the help-context ID is established by the MakeHm tool. Note that the .RTF file refers the context ID as a string, while the application and the framework refer to the context ID as a number. The article <A HREF="_core_help.3a_.authoring_help_topics.htm">Help: Authoring Help Topics</A> describes the process of mapping these IDs to Help topics and writing the topics in your .RTF files.</P></LI>

	<LI>Compile Help. See <A HREF="_core_help.3a_.compiling_and_testing_your_help_file.htm">Help: Compiling and Testing Your Help File</A>.</LI>
</OL>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_help.3a_.the_makehm_and_makehelp..bat_tools.htm#_core_example_help_contexts">Example Help Contexts</A></P>
</font>
</BODY>
</HTML>

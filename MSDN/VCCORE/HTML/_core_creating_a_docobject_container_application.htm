<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Active Document Container Application</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_creating_a_docobject_container_application"></A>Creating an Active Document Container Application</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_tasks.htm">How Do I</A></P>

<P>The simplest and most recommended way to create an Active document container application is to create an MFC EXE container application using the MFC AppWizard, then modify the application to support active document containment.</P>

<P class=label><B>To create an active document container application</B>

<OL>
	<LI>From the <B>File</B> menu, choose <B>New</B>.<BR><BR></LI>

	<LI>On the <B>Projects </B>tab, click <B>MFC AppWizard (exe)</B>. Name the project <B>MyProj</B>.<BR><BR></LI>

	<LI>In Step 3 of the AppWizard, select the <B>Container</B> or <B>Both container and server</B> button.<BR><BR></LI>

	<LI>Click <B>Finish</B>.<BR><BR></LI>

	<LI>When the AppWizard finishes generating the application, select the <B>FileView</B> tab and open the following files:
<UL type=disc>
	<LI>Cntritem.cpp<BR><BR></LI>

	<LI>Cntritem.h<BR><BR></LI>

	<LI>MyProjview.cpp<BR><BR></LI>

	<LI>MyProjview.h</LI>
</UL>
</LI>

	<LI>In Cntritem.cpp, make the following changes:
<UL type=disc>
	<LI>Replace <B>COleClientItem</B> with <B>COleDocObjectItem</B>. The latter class augments the OLE code with additional active document containment support.<BR><BR></LI>

	<LI>Remove the implementation code from the body of <B>CMyProjCntrlItem::OnActivate</B>.
<P class=tl>The <B>OnActivate</B> code is not needed because the code in a normal container is used to guarantee that the item being activated is the only active item. Therefore, if there is another active item, it is deactivated first. A basic OLE container lets you have multiple embedded objects in a single document, so it needs this code. The default AppWizard-generated active document container is only set up to allow one Active document in the container at a time, so this code is unnecessary. Once you insert an object in your active document container, you cannot insert other objects.</P></LI>
</UL>
</LI>

	<LI>In Cntritem.h, make the following changes:
<UL type=disc>
	<LI>Replace <B>COleClientItem</B> with <B>COleDocObjectItem</B></LI>
</UL>
</LI>

	<LI>In MyProjview.cpp, make the following changes:
<UL type=disc>
	<LI>In <B>CMyProjView::OnPreparePrinting</B>, add the following code:
<PRE><CODE>if (!CView::OnPreparePrinting(pInfo))
return FALSE;

if (!COleDocObjectItem::OnPreparePrinting(this, pInfo))
return FALSE;

return TRUE;
</CODE></PRE>
</LI>
</UL>

<P class=tl><B>OnPreparePrinting</B> provides printing support. This code replaces <B>DoPreparePrinting</B>, which is the default print preparation.</P>
<UL type=disc>
	<LI>Add an <B>OnPrint</B> override as follows:
<PRE><CODE>void CMyProjView::OnPrint(CDC* pDC, CPrintInfo* pInfo)
{
// TODO: add code to print the controls
if(pInfo-&gt;m_bDocObject)
COleDocObjectItem::OnPrint(this, pInfo, TRUE);
}</CODE></PRE>
</LI>
</UL>

<PRE></PRE>

<P class=tl>Active document containment provides an improved printing scheme:</P>
<UL type=disc>
	<LI>You can first call the Active document through its <B>IPrint </B>interface and tell it to print itself. This is different from previous OLE containment, in which the container had to render an image of the contained item onto the printer <B>CDC </B>object.<BR><BR></LI>

	<LI>If that fails, tell the contained item to print itself through its <B>IOleCommandTarget </B>interface<BR><BR></LI>

	<LI>If that fails, make your own rendering of the item.</LI>
</UL>

<P class=tl>The static member functions <B>COleDocObjectItem::OnPrint</B> and <B>COleDocObjectItem::OnPreparePrinting</B>, as implemented in the previous code, handle this improved printing scheme.</P></LI>

	<LI>In MyProjview.h, make the following changes:
<UL type=disc>
	<LI>Add the following to Overrides:
<PRE><CODE>virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
</CODE></PRE>
</LI>
</UL>
</LI>
</OL>

<P class=indent><B>Note</B>&nbsp;&nbsp;&nbsp;In some functions, you do not need to change <B>COleClientItem</B> to <B>COleDocObjectItem</B>. Because a <B>COleDocObjectItem</B> object is a <B>COleClientItem</B> object, functions that do not specifically implement active document containment functionality (such as <B>OnDestroy</B>, <B>OnCancelEditCntr</B>, <B>OnSetFocus</B>, and <B>OnSize</B>) can implement functionality provided by COM client item objects.</P>

<P class=indent>Note also that <B>COleDocument</B> maintains a list of <B>COleClientItem</B> objects, not <B>COleDocObjectItem</B> objects.

<OL start=10>
	<LI>Add any implementation of your own and build the application.</LI>
</OL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>va_arg, va_end, va_start</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_va_arg.2c_.va_end.2c_.va_start"></A><SUP></SUP>va_arg, va_end, va_start</H1>

<P>Access variable-argument lists.</P>

<P><I>type</I> <B>va_arg(</B> <B>va_list</B> <I>arg_ptr</I><B>,</B> <I>type</I> <B>);</B></P>

<P><B>void</B> <B>va_end(</B> <B>va_list</B> <I>arg_ptr</I> <B>);</B></P>

<P><B>void</B> <B>va_start(</B> <B>va_list</B> <I>arg_ptr</I> <B>);</B>&nbsp;&nbsp;&nbsp;(UNIX version)</P>

<P><B>void</B> <B>va_start(</B> <B>va_list</B> <I>arg_ptr</I><B>,</B> <I>prev_param</I> <B>);</B>&nbsp;&nbsp;&nbsp;(ANSI version)</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=28%><B>Optional Headers</B></TD>
<TD class=label width=31%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>va_arg</B></TD>
<TD width=26%>&lt;stdio.h&gt; and &lt;stdarg.h&gt;</TD>
<TD width=28%>&lt;varargs.h&gt;<SUP>1</SUP></TD>
<TD width=31%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>va_end</B></TD>
<TD width=26%>&lt;stdio.h&gt; and &lt;stdarg.h&gt;</TD>
<TD width=28%>&lt;varargs.h&gt;<SUP>1</SUP></TD>
<TD width=31%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>va_start</B></TD>
<TD width=26%>&lt;stdio.h&gt; and &lt;stdarg.h&gt;</TD>
<TD width=28%>&lt;varargs.h&gt;<SUP>1</SUP></TD>
<TD width=31%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P class=mini><SUP>1</SUP>  Required for UNIX V compatibility.</P>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>va_arg</B> returns the current argument; <B>va_start</B> and <B>va_end</B> do not return values.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>type</I></P>

<P class=indent>Type of argument to be retrieved</P>

<P class=dt><I>arg_ptr</I></P>

<P class=indent>Pointer to list of arguments</P>

<P class=dt><I>prev_param</I></P>

<P class=indent>Parameter preceding first optional argument (ANSI only)</P>

<P class=label><B>Remarks</B></P>

<P>The <B>va_arg</B>, <B>va_end</B>, and <B>va_start</B> macros provide a portable way to access the arguments to a function when the function takes a variable number of arguments. Two versions of the macros are available: The macros defined in STDARG.H conform to the ANSI C standard, and the macros defined in VARARGS.H are compatible with the UNIX System V definition. The macros are:</P>

<P class=dt><B>va_alist</B></P>

<P class=indent>Name of parameter to called function (UNIX version only)</P>

<P class=dt><B>va_arg</B></P>

<P class=indent>Macro to retrieve current argument</P>

<P class=dt><B>va_dcl</B></P>

<P class=indent>Declaration of <B>va_alist</B> (UNIX version only)</P>

<P class=dt><B>va_end</B></P>

<P class=indent>Macro to reset <I>arg_ptr</I></P>

<P class=dt><B>va_list</B></P>

<P class=indent><B>typedef</B> for pointer to list of arguments defined in STDIO.H</P>

<P class=dt><B>va_start</B></P>

<P class=indent>Macro to set <I>arg_ptr</I> to beginning of list of optional arguments (UNIX version only)</P>

<P>Both versions of the macros assume that the function takes a fixed number of required arguments, followed by a variable number of optional arguments. The required arguments are declared as ordinary parameters to the function and can be accessed through the parameter names. The optional arguments are accessed through the macros in STDARG.H or VARARGS.H, which set a pointer to the first optional argument in the argument list, retrieve arguments from the list, and reset the pointer when argument processing is completed.</P>

<P>The ANSI C standard macros, defined in STDARG.H, are used as follows:

<UL type=disc>
	<LI>All required arguments to the function are declared as parameters in the usual way. <B>va_dcl</B> is not used with the STDARG.H macros.<BR><BR></LI>

	<LI><B>va_start</B> sets <I>arg_ptr</I> to the first optional argument in the list of arguments passed to the function. The argument <I>arg_ptr</I> must have <B>va_list</B> type. The argument <I>prev_param</I> is the name of the required parameter immediately preceding the first optional argument in the argument list. If <I>prev_param</I> is declared with the register storage class, the macro’s behavior is undefined. <B>va_start</B> must be used before <B>va_arg</B> is used for the first time.<BR><BR></LI>

	<LI><B>va_arg</B> retrieves a value of <I>type</I> from the location given by <I>arg_ptr</I> and increments <I>arg_ptr</I> to point to the next argument in the list, using the size of <I>type</I> to determine where the next argument starts. <B>va_arg</B> can be used any number of times within the function to retrieve arguments from the list.<BR><BR></LI>

	<LI>After all arguments have been retrieved, <B>va_end</B> resets the pointer to <B>NULL</B>.</LI>
</UL>

<P>The UNIX System V macros, defined in VARARGS.H, operate somewhat differently:

<UL type=disc>
	<LI>Any required arguments to the function can be declared as parameters in the usual way.<BR><BR></LI>

	<LI>The last (or only) parameter to the function represents the list of optional arguments. This parameter must be named <B>va_alist</B> (not to be confused with <B>va_list</B>, which is defined as the type of <B>va_alist</B>).<BR><BR></LI>

	<LI><B>va_dcl</B> appears after the function definition and before the opening left brace of the function. This macro is defined as a complete declaration of the <B>va_alist</B> parameter, including the terminating semicolon; therefore, no semicolon should follow <B>va_dcl</B>.<BR><BR></LI>

	<LI>Within the function, <B>va_start</B> sets <I>arg_ptr</I> to the beginning of the list of optional arguments passed to the function. <B>va_start</B> must be used before <B>va_arg</B> is used for the first time. The argument <I>arg_ptr</I> must have <B>va_list</B> type.<BR><BR></LI>

	<LI><B>va_arg</B> retrieves a value of <I>type</I> from the location given by <I>arg_ptr</I> and increments <I>arg_ptr</I> to point to the next argument in the list, using the size of <I>type</I> to determine where the next argument starts. <B>va_arg</B> can be used any number of times within the function to retrieve the arguments from the list.<BR><BR></LI>

	<LI>After all arguments have been retrieved, <B>va_end</B> resets the pointer to <B>NULL</B>.</LI>
</UL>

<P class=label><B>Example</B></P>

<PRE><CODE>/* VA.C: The program below illustrates passing a variable
 * number of arguments using the following macros:
 *      va_start            va_arg              va_end
 *      va_list             va_dcl (UNIX only)
 */

#include &lt;stdio.h&gt;
#define ANSI            /* Comment out for UNIX version     */
#ifdef ANSI             /* ANSI compatible version          */
#include &lt;stdarg.h&gt;
int average( int first, ... );
#else                   /* UNIX compatible version          */
#include &lt;varargs.h&gt;
int average( va_list );
#endif

void main( void )
{
   /* Call with 3 integers (-1 is used as terminator). */
   printf( "Average is: %d\n", average( 2, 3, 4, -1 ) );

   /* Call with 4 integers. */
   printf( "Average is: %d\n", average( 5, 7, 9, 11, -1 ) );

   /* Call with just -1 terminator. */
   printf( "Average is: %d\n", average( -1 ) );
}

/* Returns the average of a variable list of integers. */
#ifdef ANSI             /* ANSI compatible version    */
int average( int first, ... )
{
   int count = 0, sum = 0, i = first;
   va_list marker;

   va_start( marker, first );     /* Initialize variable arguments. */
   while( i != -1 )
   {
      sum += i;
      count++;
      i = va_arg( marker, int);
   }
   va_end( marker );              /* Reset variable arguments.      */
   return( sum ? (sum / count) : 0 );
}
#else       /* UNIX compatible version must use old-style definition.  */
int average( va_alist )
va_dcl
{
   int i, count, sum;
   va_list marker;

   va_start( marker );            /* Initialize variable arguments. */
   for( sum = count = 0; (i = va_arg( marker, int)) != -1; count++ )
      sum += i;
   va_end( marker );              /* Reset variable arguments.      */
   return( sum ? (sum / count) : 0 );
}
#endif

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Average is: 3
Average is: 8
Average is: 0

</CODE></PRE>

<P><A HREF="_crt_argument_access.htm">Argument Access Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_vfprintf.2c_.vfwprintf.htm">vfprintf</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Management: Examples</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_memory_management.3a_.examples"></A>Memory Management: Examples</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_memory_management_with_mfc.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_memory.2d.management_tasks.htm">How Do I</A></P>

<P>This article describes how MFC performs frame allocations and heap allocations for each of the three typical kinds of memory allocations:

<UL type=disc>
	<LI><A HREF="#_core_allocation_of_an_array_of_bytes">An array of bytes</A><BR><BR></LI>

	<LI><A HREF="#_core_allocation_of_a_data_structure">A data structure</A><BR><BR></LI>

	<LI><A HREF="#_core_allocation_of_an_object">An object</A></LI>
</UL>



<H3><A NAME="_core_allocation_of_an_array_of_bytes"></A>Allocation of an Array of Bytes</H3>

<P class=label><B><A NAME="_core_to_allocate_an_array_of_bytes_on_the_frame"></A>To allocate an array of bytes on the frame</B>

<UL type=disc>
	<LI>Define the array as shown by the following code. The array is automatically deleted and its memory reclaimed when the array variable exits its scope.
<PRE><CODE>{ 
    const int BUFF_SIZE = 128; 

    // Allocate on the frame
    char myCharArray[BUFF_SIZE];
    int myIntArray[BUFF_SIZE];
    // Reclaimed when exiting scope 
}
</CODE></PRE>
</LI>
</UL>

<P class=label><B><A NAME="_core_to_allocate_an_array_of_bytes_.28.or_any_primitive_data_type.29._on_the_heap"></A>To allocate an array of bytes (or any primitive data type) on the heap</B>

<UL type=disc>
	<LI>Use the <B>new</B> operator with the array syntax shown in this example:
<PRE><CODE>const int BUFF_SIZE = 128;

// Allocate on the heap
char* myCharArray = new char[BUFF_SIZE]; 
int* myIntArray = new int[BUFF_SIZE];
</CODE></PRE>
</LI>
</UL>

<P class=label><B><A NAME="_core_to_deallocate_the_arrays_from_the_heap"></A>To deallocate the arrays from the heap</B>

<UL type=disc>
	<LI>Use the <B>delete</B> operator as follows:
<PRE><CODE>delete [] myCharArray;
delete [] myIntArray;
</CODE></PRE>
</LI>
</UL>



<H3><A NAME="_core_allocation_of_a_data_structure"></A>Allocation of a Data Structure</H3>

<P class=label><B><A NAME="_core_to_allocate_a_data_structure_on_the_frame"></A>To allocate a data structure on the frame </B>

<UL type=disc>
	<LI>Define the structure variable as follows:
<PRE><CODE>struct MyStructType { int topScore;};
void SomeFunc(void)
{
    // Frame allocation
    MyStructType myStruct;

    // Use the struct 
    myStruct.topScore = 297;

    // Reclaimed when exiting scope
}
</CODE></PRE>

<P class=tl>The memory occupied by the structure is reclaimed when it exits its scope.</P></LI>
</UL>

<P class=label><B><A NAME="_core_to_allocate_data_structures_on_the_heap"></A>To allocate data structures on the heap</B>

<UL type=disc>
	<LI>Use <B>new</B> to allocate data structures on the heap and <B>delete</B> to deallocate them, as shown by the following examples:
<PRE><CODE>// Heap allocation
MyStructType* myStruct = new MyStructType;

// Use the struct through the pointer ...
myStruct-&gt;topScore = 297;

delete myStruct;
</CODE></PRE>
</LI>
</UL>



<H3><A NAME="_core_allocation_of_an_object"></A>Allocation of an Object</H3>

<P class=label><B><A NAME="_core_to_allocate_an_object_on_the_frame"></A>To allocate an object on the frame</B>

<UL type=disc>
	<LI>Declare the object as follows:
<PRE><CODE>{
CPerson myPerson;     // Automatic constructor call here

myPerson.SomeMemberFunction();     // Use the object

}
</CODE></PRE>

<P class=tl>The destructor for the object is automatically invoked when the object exits its scope.</P></LI>
</UL>

<P class=label><B><A NAME="_core_to_allocate_an_object_on_the_heap"></A>To allocate an object on the heap</B>

<UL type=disc>
	<LI>Use the <B>new</B> operator, which returns a pointer to the object, to allocate objects on the heap. Use the <B>delete</B> operator to delete them.
<P class=tl>The following heap and frame examples assume that the <CODE>CPerson</CODE> constructor takes no arguments.</P>
<PRE><CODE>// Automatic constructor call here
CPerson* myPerson = new CPerson;  

myPerson-&gt;SomeMemberFunction();            // Use the object

delete myPerson;                    // Destructor invoked during delete
</CODE></PRE>

<P class=tl>If the argument for the <CODE>CPerson</CODE> constructor is a pointer to <B>char</B>, the statement for frame allocation is:</P>
<PRE><CODE>CPerson myPerson( "Joe Smith" );
</CODE></PRE>

<P class=tl>The statement for heap allocation is:</P>
<PRE><CODE>CPerson* MyPerson = new CPerson( "Joe Smith" );
</CODE></PRE>
</LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Target Feedback</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_providing_target_feedback"></A>Providing Target Feedback</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>A drop target must provide user feedback, that is, the visual indication to the user of how the window would respond to a drag-and-drop operation. For an application such as a word processor, this might consist of a shaded caret indicating where the dropped object would be inserted. For DRAWCLI, user feedback consists of a focus rectangle indicating the size and position of the object if it were to be dropped. </P>

<P>DRAWCLI declares some new member variables to manage this user feedback. The relevant declarations in <CODE>CDrawView</CODE> are as follows:</P>

<PRE><CODE>CPoint m_dragPoint;         // current position
CSize m_dragSize;         // size of dragged object
CSize m_dragOffset;         // offset of focus rect
DROPEFFECT m_prevDropEffect;   
static CLIPFORMAT m_cfObjectDescriptor;
BOOL m_bDragDataAcceptable;

BOOL GetObjectInfo(COleDataObject* pDataObject,
            CSize* pSize, CSize* pOffset);
</CODE></PRE>

<P>Some of the member variables store the size and position of the focus rectangle. The <CODE>m_bDragDataAcceptable</CODE> is a flag indicating whether usable data is available from the drag-and-drop operation. The <CODE>GetObjectInfo</CODE> function is a helper function described below. </P>

<P>Two of the member variables must be initialized. One of them is <CODE>m_prevDropEffect</CODE>, which gets initialized in the <CODE>CDrawView</CODE> constructor:</P>

<PRE><CODE>m_prevDropEffect = DROPEFFECT_NONE;
</CODE></PRE>

<P>The other one is <CODE>m_cfObjectDescriptor</CODE>; this was declared as a static member, which means that it must be initialized at file scope, outside of the <CODE>CDrawView</CODE> constructor: </P>

<PRE><CODE>CLIPFORMAT CDrawView::m_cfObjectDescriptor =
    (CLIPFORMAT)::RegisterClipboardFormat(_T("Object Descriptor"));
</CODE></PRE>

<P>DRAWCLI registers the string “Object Descriptor” so it can get the handle for the <B>CF_OBJECTDESCRIPTOR</B> Clipboard format defined by OLE. This handle is used below in the <CODE>CDrawView::GetObjectInfo</CODE> helper function. </P>

<P>Before DRAWCLI can draw this focus rectangle, it needs to know the size of the object. This is the purpose of the <CODE>GetObjectInfo</CODE> helper function; this function queries a data object for the <B>CF_OBJECTDESCRIPTOR</B> clipboard format: </P>

<PRE><CODE>BOOL CDrawView::GetObjectInfo(COleDataObject* pDataObject,
   CSize* pSize, CSize* pOffset)
{
   ASSERT(pSize != NULL);

   // get object descriptor data
   HGLOBAL hObjDesc = 
            pDataObject-&gt;GetGlobalData(m_cfObjectDescriptor);
   if (hObjDesc == NULL)
   {
      if (pOffset != NULL)
         *pOffset = CSize(0, 0); // fill in defaults instead
      *pSize = CSize(0, 0);
      return FALSE;
   }
   ASSERT(hObjDesc != NULL);

   // else, got CF_OBJECTDESCRIPTOR. Lock it down and extract size.
   LPOBJECTDESCRIPTOR pObjDesc =
               (LPOBJECTDESCRIPTOR)GlobalLock(hObjDesc);
   ASSERT(pObjDesc != NULL);
   pSize-&gt;cx = (int)pObjDesc-&gt;sizel.cx;
   pSize-&gt;cy = (int)pObjDesc-&gt;sizel.cy;
   if (pOffset != NULL)
   {
      pOffset-&gt;cx = (int)pObjDesc-&gt;pointl.x;
      pOffset-&gt;cy = (int)pObjDesc-&gt;pointl.y;
   }
   GlobalUnlock(hObjDesc);
   GlobalFree(hObjDesc);

   // successfully retrieved pSize &amp; pOffset info
   return TRUE;
}
</CODE></PRE>

<P>This function calls <B>COleDataObject::GetGlobalData</B> and acquires the <B>CF_OBJECTDESCRIPTOR</B> data in a block of global memory. The function locks the memory down, reads the size attributes, and then unlocks and frees the block of memory. This function is used by <B>OnDragEnter </B>in the code samples in "Handling a Drag-and-Drop Operation."</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adjusting Calling Conventions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_adjusting_calling_conventions"></A>Adjusting Calling Conventions</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming_tasks.htm">How Do I</A></P>

<P>The calling convention determines how a program makes a call and where the parameters are passed. In a single-language program, calling conventions are nearly always correct, because there is one default for all modules and because header files enforce consistency between the caller and the called routine. In a mixed-language program, different languages cannot share the same header files. It’s easy to link Fortran and C modules that use different calling conventions, and the error isn’t apparent until the bad call is made at run time, causing immediate program failure. Therefore, you should check calling conventions carefully for each mixed-language call.</P>

<P>The following table summarizes how C and Fortran calling conventions work.</P>

<P class=label><B>C and Fortran Calling Conventions</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B>Calling convention</B></TD>
<TD class=label width=45%><B>Parameter passing</B></TD>
<TD class=label width=27%><B>Stack cleared by</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%>C/C++</TD>
<TD width=45%>Pushes parameters on the stack, in reverse order (right to left)</TD>
<TD width=27%>Caller</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Fortran (<B>__stdcall</B>)</TD>
<TD width=45%>Pushes parameters on the stack, in reverse order (right to left)</TD>
<TD width=27%>Called function</TD>
</TR>
</TABLE><BR>

<P>In C and C++ modules, you can specify the Fortran calling convention by using the <B>__stdcall</B> keyword in a function prototype or definition. The <B>__stdcall</B> convention is also used by window procedures and API functions. For example, the following C language prototype sets up a function call to a subroutine using the Fortran calling convention:</P>

<PRE><CODE>extern void __stdcall fortran_routine (int n);
</CODE></PRE>

<P>Instead of changing the calling convention of the C code, you can adjust the Fortran source code by using the <B>C</B> attribute, enclosed in brackets (<B>[ ]</B>). For example, the following declaration assumes the subroutine is called with the C calling convention:</P>

<PRE><CODE>      SUBROUTINE CALLED_FROM_C [C] (A)
      INTEGER*4 A
</CODE></PRE>

<P>It should be clear that calling conventions need only agree between individual calls and the called routines, and that the conventions must be the same: Both caller and called routine must use the C/C++ convention or both must use the <B>__stdcall</B> convention (the Fortran default).</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;In programs written for the graphical user interface of Windows, <B>PASCAL</B>, <B>WINAPI</B>, and <B>CALLBACK</B> are all defined with <B>__stdcall</B>. But the C language default is still <B>cdecl</B>.</P>

<P>The following table summarizes how to specify calling conventions. You can always specify calling conventions explicitly rather than relying on the default, which is a good technique for mixed-language programming.</P>

<P class=label><B>Specifying Calling Conventions</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=25%><B>Language</B></TD>
<TD class=label width=33%><B>C calling convention</B></TD>
<TD class=label width=42%><B>Fortran calling convention</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>C/C++</TD>
<TD width=33%><B>cdecl</B> (default)</TD>
<TD width=42%><B>__stdcall</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>Fortran</TD>
<TD width=33%><B>C</B> attribute</TD>
<TD width=42%><B>STDCALL</B> attribute (default)</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

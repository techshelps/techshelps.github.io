<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_CrtSetBreakAlloc</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__crtsetbreakalloc"></A><SUP></SUP>_CrtSetBreakAlloc</H1>

<P>Sets a breakpoint on a specified object allocation order number (debug version only).</P>

<P><B>long</B> <B>_CrtSetBreakAlloc(</B> <B>long</B> <I>lBreakAlloc</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B>Routine</B></TD>
<TD class=label width=19%><B>Required Header</B></TD>
<TD class=label width=53%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%><B>_CrtSetBreakAlloc</B></TD>
<TD width=19%>&lt;crtdbg.h&gt;</TD>
<TD width=53%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_CrtSetBreakAlloc</B> returns the previous object allocation order number that had a breakpoint set.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>lBreakAlloc</I></P>

<P class=indent>Allocation order number, for which to set the breakpoint</P>

<P class=label><B>Remarks</B></P>

<P><B>_CrtSetBreakAlloc</B> allows an application to perform memory leak detection by breaking at a specific point of memory allocation and tracing back to the origin of the request. The function uses the sequential object allocation order number assigned to the memory block when it was allocated in the heap. When <A HREF="_crt__debug.htm">_DEBUG</A> is not defined, calls to <B>_CrtSetBreakAlloc</B> are removed during preprocessing.</P>

<P>The object allocation order number is stored in the <I>lRequest</I> field of the <B>_CrtMemBlockHeader</B> structure, defined in CRTDBG.H. When information about a memory block is reported by one of the debug dump functions, this number is enclosed in curly brackets; for example, {36}.</P>

<P>For more information about how <B>_CrtSetBreakAlloc</B> can be used with other memory management functions, see <A HREF="_core_tracking_heap_allocation_requests.htm">Tracking Heap Allocation Requests</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/*
 * SETBRKAL.C
 * In this program, a call is made to the _CrtSetBreakAlloc routine
 * to verify that the debugger halts program execution when it reaches
 * a specified allocation number.
 */

#include &lt;malloc.h&gt;
#include &lt;crtdbg.h&gt;

void main( )
{
        long allocReqNum;
        char *my_pointer;

        /* 
         * Allocate "my_pointer" for the first
         * time and ensure that it gets allocated correctly
         */
        my_pointer = malloc(10);
        _CrtIsMemoryBlock(my_pointer, 10, &amp;allocReqNum, NULL, NULL);

        /* 
         * Set a breakpoint on the allocation request
         * number for "my_pointer"
         */
        _CrtSetBreakAlloc(allocReqNum+2);
        _crtBreakAlloc = allocReqNum+2;

        /* 
         * Alternate freeing and reallocating "my_pointer"
         * to verify that the debugger halts program execution
         * when it reaches the allocation request
         */
        free(my_pointer);
        my_pointer = malloc(10);
        free(my_pointer);
        my_pointer = malloc(10);
        free(my_pointer);
}
</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>The exception Breakpoint
A breakpoint has been reached.
(0x0000003) occurred in the application at location 0x00401255.

</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>
</font>
</BODY>
</HTML>

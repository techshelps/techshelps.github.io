<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>scanf Type Field Characters</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_scanf_type_field_characters"></A><SUP></SUP>scanf Type Field Characters</H1>

<P>The <I>type</I> character is the only required format field; it appears after any optional format fields. The <I>type</I> character determines whether the associated argument is interpreted as a character, string, or number.</P>

<P class=label><B><A NAME="_crt_table_r..8"></A>Table R.8&nbsp;&nbsp;&nbsp;Type Characters for scanf functions</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Character </B></TD>
<TD class=label width=50%><B>Type of Input Expected</B></TD>
<TD class=label width=32%><B>Type of Argument</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>c</B></TD>
<TD width=50%>When used with <B>scanf</B> functions, specifies single-byte character; when used with <B>wscanf</B> functions, specifies wide character. White-space characters that are ordinarily skipped are read when <B>c</B> is specified. To read next non–white-space single-byte character, use <B>%1s</B>; to read next non–white-space wide character, use <B>%1ws</B>.</TD>
<TD width=32%>Pointer to <B>char</B> when used with <B>scanf</B> functions, pointer to <B>wchar_t</B> when used with <B>wscanf</B> functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>C</B></TD>
<TD width=50%>When used with <B>scanf</B> functions, specifies wide character; when used with <B>wscanf</B> functions<B>,</B> specifies single-byte character. White-space characters that are ordinarily skipped are read when <B>C</B> is specified. To read next non–white-space single-byte character, use <B>%1s</B>; to read next non–white-space wide character, use <B>%1ws</B>.</TD>
<TD width=32%>Pointer to <B>wchar_t</B> when used with <B>scanf</B> functions, pointer to <B>char</B> when used with <B>wscanf</B> functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>d</B></TD>
<TD width=50%>Decimal integer.</TD>
<TD width=32%>Pointer to <B>int</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>i</B></TD>
<TD width=50%>Decimal, hexadecimal, or octal integer.</TD>
<TD width=32%>Pointer to <B>int</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>o</B></TD>
<TD width=50%>Octal integer.</TD>
<TD width=32%>Pointer to <B>int</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>u</B></TD>
<TD width=50%>Unsigned decimal integer.</TD>
<TD width=32%>Pointer to <B>unsigned int</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>x</B></TD>
<TD width=50%>Hexadecimal integer.</TD>
<TD width=32%>Pointer to <B>int</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>e</B>, <B>E, f</B>, <B>g</B>, <B>G</B></TD>
<TD width=50%>Floating-point value consisting of optional sign (+ or –), series of one or more decimal digits containing decimal point, and optional exponent (“e” or “E”) followed by an optionally signed integer value.</TD>
<TD width=32%>Pointer to <B>float</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>n</B></TD>
<TD width=50%>No input read from stream or buffer.</TD>
<TD width=32%>Pointer to <B>int</B>, into which is stored number of characters successfully read from stream or buffer up to that point in current call to <B>scanf</B> functions or <B>wscanf</B> functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>s</B></TD>
<TD width=50%>String, up to first white-space character (space, tab or newline). To read strings not delimited by space characters, use set of square brackets (<B>[ ]</B>), as discussed following <A HREF="_crt_scanf_width_specification.htm#_crt_table_r..7">Table R.7</A>.</TD>
<TD width=32%>When used with <B>scanf</B> functions, signifies single-byte character array; when used with <B>wscanf</B> functions, signifies wide-character array. In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>S</B></TD>
<TD width=50%>String, up to first white-space character (space, tab or newline). To read strings not delimited by space characters, use set of square brackets (<B>[ ]</B>), as discussed preceding this table.</TD>
<TD width=32%>When used with <B>scanf</B> functions, signifies wide-character array; when used with <B>wscanf</B> functions, signifies single-byte–character array. In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.</TD>
</TR>
</TABLE><BR>

<P>The types <B>c</B>, <B>C</B>, <B>s</B>, and <B>S</B> are Microsoft extensions and are not ANSI-compatible. </P>

<P>Thus, to read single-byte or wide characters with <B>scanf</B> functions and <B>wscanf</B> functions<B>,</B> use format specifiers as follows.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=25%><B>To Read Character As</B></TD>
<TD class=label width=31%><B>Use This Function</B></TD>
<TD class=label width=44%><B>With These Format Specifiers</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>single byte</TD>
<TD width=31%><B>scanf</B> functions</TD>
<TD width=44%><B>c</B>, <B>hc</B>, or <B>hC</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>single byte</TD>
<TD width=31%><B>wscanf</B> functions</TD>
<TD width=44%><B>C</B>, <B>hc</B>, or <B>hC</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>wide</TD>
<TD width=31%><B>wscanf</B> functions</TD>
<TD width=44%><B>c</B>, <B>lc</B>, or <B>lC</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>wide</TD>
<TD width=31%><B>scanf</B> functions</TD>
<TD width=44%><B>C</B>, <B>lc</B>, or <B>lC</B></TD>
</TR>
</TABLE><BR>

<P>To scan strings with <B>scanf</B> functions, and <B>wscanf</B> functions<B>,</B> use the prefixes <B>h</B> and <B>l</B> analogously with format type-specifiers <B>s</B> and <B>S</B>.</P>
</font>
</BODY>
</HTML>

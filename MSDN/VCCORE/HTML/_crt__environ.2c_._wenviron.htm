<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_environ, _wenviron</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__environ.2c_._wenviron"></A><SUP></SUP>_environ, _wenviron</H1>

<P>The <B>_environ</B> variable is a pointer to an array of pointers to the multibyte-character strings that constitute the process environment. <B>_environ</B> is declared in STDLIB.H as</P>

<P><B>extern</B> <B>char</B> <B>**_environ;</B></P>

<P>In a program that uses the <B>main</B> function, <B>_environ</B> is initialized at program startup according to settings taken from the operating-system environment. The environment consists of one or more entries of the form </P>

<P><B>ENVVARNAME=</B><I>string</I></P>

<P><A HREF="_crt_getenv.2c_._wgetenv.htm">getenv</A> and <A HREF="_crt__putenv.2c_._wputenv.htm">_putenv</A> use the <B>_environ</B> variable to access and modify the environment table. When <B>_putenv</B> is called to add or delete environment settings, the environment table changes size. Its location in memory may also change, depending on the program’s memory requirements. The value of <B>_environ</B> is automatically adjusted accordingly.</P>

<P>The _wenviron variable, declared in STDLIB.H as<B> extern</B> <B>wchar_t</B> <B>**_wenviron;</B>, is a wide-character version of <B>_environ</B>. In a program that uses the <B>wmain</B> function, <B>_wenviron</B> is initialized at program startup according to settings taken from the operating-system environment.</P>

<P>In a program that uses <B>main</B>, <B>_wenviron</B> is initially <B>NULL</B>, because the environment is composed of multibyte-character strings. On the first call to <B>_wgetenv</B> or <B>_wputenv</B>, a corresponding wide-character string environment is created and is pointed to by <B>_wenviron</B>.</P>

<P>Similarly, in a program that uses <B>wmain</B>, <B>_environ</B> is initially <B>NULL</B> because the environment is composed of wide-character strings. On the first call to <B>_getenv</B> or <B>_putenv</B>, a corresponding wide-character string environment is created and is pointed to by <B>_environ</B>.</P>

<P>When two copies of the environment (MBCS and Unicode) exist simultaneously in a program, the run-time system must maintain both copies, resulting in slower execution time. For example, whenever you call <B>_putenv</B>, a call to <B>_wputenv</B> is also executed automatically, so that the two environment strings correspond.</P>

<P class=indent><B><B>Caution</B></B>&nbsp;&nbsp;&nbsp;In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, these two environment versions may not correspond exactly. This is because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique. Therefore, two distinct Unicode strings may map to the same multibyte string. </P>

<P>The following pseudocode illustrates how this can happen.</P>

<PRE><CODE>int i, j;
i = _wputenv( "env_var_x=string1" );  // results in the implicit call:
                                      // putenv ("env_var_z=string1")
j = _wputenv( "env_var_y=string2" );  // also results in implicit call:
                                      // putenv("env_var_z=string2")
</CODE></PRE>

<P>In the notation used for this example, the character strings are not C string literals; rather, they are placeholders that represent Unicode environment string literals in the <B>_wputenv</B> call and multibyte environment strings in the <B>putenv</B> call. The character-placeholders '<I>x'</I> and '<I>y'</I> in the two distinct Unicode environment strings do not map uniquely to characters in the current MBCS. Instead, both map to some MBCS character '<I>z'</I> that is the default result of the attempt to convert the strings. </P>

<P>Thus in the multibyte environment the value of "<I>env_var_z</I>" after the first implicit call to <B>putenv</B> would be "<I>string1</I>", but this value would be overwritten on the second implicit call to <B>putenv</B>, when the value of "<I>env_var_z</I>" is set to "<I>string2</I>". The Unicode environment (in <B>_wenviron</B>) and the multibyte environment (in <B>_environ</B>) would therefore differ following this series of calls.</P>
</font>
</BODY>
</HTML>

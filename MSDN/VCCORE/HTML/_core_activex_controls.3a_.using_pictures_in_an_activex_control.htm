<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Using Pictures in an ActiveX Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CPictureHolder">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CPictureHolder.3a3a.Render">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.using_pictures_in_an_activex_control"></A>ActiveX Controls: Using Pictures in an ActiveX Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>This article describes the common Picture type and how to implement it in your ActiveX control. Topics include:

<UL type=disc>
	<LI><A HREF="#_core_overview_of_custom_picture_properties">Overview of custom Picture properties</A><BR><BR></LI>

	<LI><A HREF="#_core_implementing_a_custom_picture_property_in_your_activex_control">Implementing a custom Picture property in your ActiveX Control</A></LI>
</UL>



<H2><A NAME="_core_overview_of_custom_picture_properties"></A>Overview of Custom Picture Properties</H2>

<P>A Picture type is one of a group of types common to all ActiveX controls. The Picture type handles metafiles, bitmaps, or icons and allows the user to specify a picture to be displayed in an ActiveX control. Custom Picture properties are implemented using a picture object and Get/Set functions that allow the control user access to the Picture property. Control users access the custom Picture property using the stock Picture property page.</P>

<P>In addition to the standard Picture type, Font and Color types are also available. For more information on using the standard Font type in your ActiveX control, see the article <A HREF="_core_activex_controls.3a_.using_fonts_in_an_activex_control.htm">ActiveX Controls: Using Fonts in an ActiveX Control</A>.</P>

<P>The ActiveX control classes provide several components you can use to implement the Picture property within the control. These components include:

<UL type=disc>
	<LI>The <A HREF="JavaScript:hhobj_3.Click()">CPictureHolder</A> class.
<P class=tl>This class provides easy access to the picture object and functionality for the item displayed by the custom Picture property.</P></LI>

	<LI>Support for properties of type <B>LPPICTUREDISP</B>, implemented with Get/Set functions.
<P class=tl>Using ClassWizard you can quickly add a custom property, or properties, that supports the Picture type. For more information on adding ActiveX control properties with ClassWizard, see the article <A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A>.</P></LI>

	<LI>A property page that manipulates a control’s Picture property or properties.
<P class=tl>This property page is part of a group of stock property pages available to ActiveX controls. For more information on ActiveX control property pages, see the article <A HREF="_core_activex_controls.3a_.using_stock_property_pages.htm">ActiveX Controls: Using Stock Property Pages</A></P></LI>
</UL>



<H2><A NAME="_core_implementing_a_custom_picture_property_in_your_activex_control"></A>Implementing a Custom Picture Property in Your ActiveX Control</H2>

<P>When you have completed the steps outlined in this section, the control can display pictures chosen by its user. The user can change the displayed picture using a property page that shows the current picture and has a Browse button that allows the user to the select different pictures.</P>

<P>A custom Picture property is implemented using a process similar to that used for implementing other properties, the main difference being that the custom property must support a Picture type. Because the item of the Picture property must be drawn by the ActiveX control, a number of additions and modifications must be made to the property before it can be fully implemented. </P>

<P>To implement a custom Picture property, you must do the following:

<UL type=disc>
	<LI><A HREF="#_core_additions_to_your_control_project">Add code to your control project</A>.
<P class=tl>A standard Picture property page ID, a data member of type <B>CPictureHolder</B>, and a custom property of type <B>LPPICTUREDISP</B> with a Get/Set implementation must be added.</P></LI>

	<LI><A HREF="#_core_modifications_to_your_control_project">Modify several functions in your control class</A>.
<P class=tl>These modifications will be made to several functions that are responsible for the drawing of your ActiveX control.</P></LI>
</UL>



<H2><A NAME="_core_additions_to_your_control_project"></A>Additions to Your Control Project</H2>

<P>To add the property page ID for the standard Picture property page, insert the following line after the <B>BEGIN_PROPPAGEIDS</B> macro in the control implementation file (.CPP):</P>

<PRE><CODE>PROPPAGEID(CLSID_CPicturePropPage)
</CODE></PRE>

<P>You must also increment the count parameter of your <B>BEGIN_PROPPAGEIDS</B> macro by one. The following line illustrates this:</P>

<PRE><CODE>BEGIN_PROPPAGEIDS(CSampleCtrl, 2)
</CODE></PRE>

<P>To add the <B>CPictureHolder</B> data member to the control class, insert the following line under the protected section of the control class declaration in the control header file (.H):</P>

<PRE><CODE>CPictureHolder    m_pic;
</CODE></PRE>

<P>It is not necessary to name your data member <CODE>m_pic</CODE>; any name will suffice.</P>

<P>Next, add a custom property that supports a Picture type:</P>

<P class=label><B>To add a custom picture property using ClassWizard</B>

<OL>
	<LI>With your control project open, open <B>ClassWizard </B>by clicking <B>ClassWizard </B>on the <B>View </B>menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type the property name. For example purposes, <CODE>ControlPicture</CODE> is used in this procedure.<BR><BR></LI>

	<LI>In the <B>Implementation </B>box, click <B>Get/Set Methods</B>.<BR><BR></LI>

	<LI>In the <B>Return Type</B> box, select <B>LPPICTUREDISP </B>for the property type.<BR><BR></LI>

	<LI>Type unique names for your Get and Set Functions or accept the default names. (In this example, the default names <CODE>GetControlPicture</CODE> and <CODE>SetControlPicture</CODE> are used.)<BR><BR></LI>

	<LI>Click <B>OK </B>to close the <B>Add Property</B> dialog box.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>ClassWizard adds the following code between the dispatch map comments in the control header (.H) file:</P>

<PRE><CODE>afx_msg LPPICTUREDISP GetControlPicture();
afx_msg void SetControlPicture(LPPICTUREDISP newValue);
</CODE></PRE>

<P>In addition, the following code was inserted in the dispatch map of the control implementation (.CPP) file:</P>

<PRE><CODE>DISP_PROPERTY_EX(CSampleCtrl, "ControlPicture", GetControlPicture, SetControlPicture, VT_PICTURE)
</CODE></PRE>

<P>ClassWizard also adds the following two stub functions in the control implementation file:</P>

<PRE><CODE>LPPICTUREDISP CSampleCtrl::GetControlPicture()
{
    // TODO: Add your property handler here

    return NULL;
}

void CSampleCtrl::SetControlPicture(LPPICTUREDISP newValue)
{
    // TODO: Add your property handler here

    SetModifiedFlag();
}
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Your control class and function names might differ from the example above.</P>



<H3><A NAME="_core_modifications_to_your_control_project"></A>Modifications to Your Control Project </H3>

<P>Once you have made the necessary additions to your control project, you need to modify several functions that affect the rendering of your ActiveX control. These functions, <CODE>OnResetState</CODE>, <CODE>OnDraw</CODE>, and the Get/Set functions of a custom Picture property, are located in the control implementation file. (Note that in this example the control class is called <CODE>CSampleCtrl</CODE>, the <B>CPictureHolder</B> data member is called <CODE>m_pic</CODE>, and the custom picture property name is <CODE>ControlPicture</CODE>.)</P>

<P>In the control <CODE>OnResetState</CODE> function, add the following optional line after the call to <B>COleControl::OnResetState</B>:</P>

<PRE><CODE>m_pic.CreateEmpty();
</CODE></PRE>

<P>This sets the control’s picture to a blank picture.</P>

<P>To draw the picture properly, make a call to <A HREF="JavaScript:hhobj_4.Click()">CPictureHolder::Render</A> in the control <CODE>OnDraw</CODE> function. Modify your function to resemble the following example:</P>

<PRE><CODE>void CSampleCtrl::OnDraw(
    CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
// ****** Add your code below this line ********** //
   m_pic.Render(pdc, rcBounds, rcBounds);
}
</CODE></PRE>

<P>In the Get function of the control’s custom picture property, add the following line:</P>

<PRE><CODE>return m_pic.GetPictureDispatch();
</CODE></PRE>

<P>In the Set function of the control’s custom Picture property, add the following lines:</P>

<PRE><CODE>m_pic.SetPictureDispatch(newValue);
InvalidateControl();
</CODE></PRE>

<P>The picture property must be made persistent so that information added at design time will show up at run time. Add the following line to the COleControl-derived class's DoPropExchange function:</P>

<PRE><CODE>PX_Picture(pPX, "ControlPicture",m_pic);
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Your class and function names might differ from the example above.</P>

<P>After you complete the modifications, rebuild your project to incorporate the new functionality of the custom Picture property and use Test Container to test the new property.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_activex_controls.3a_.using_fonts_in_an_activex_control.htm">ActiveX Controls: Using Fonts in an ActiveX Control</A>, <A HREF="_core_activex_controls.3a_.property_pages.htm">ActiveX Controls: Property Pages</A></P>
</font>
</BODY>
</HTML>

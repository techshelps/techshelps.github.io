<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The #undef Directive</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_the_.23.undef_directive"></A><SUP></SUP>The #undef Directive</H1>

<P>As its name implies, the <B>#undef</B> directive removes (undefines) a name previously created with <B>#define</B>.</P>

<P class=label><B>Syntax</B></P>

<P class=dt><B>#undef</B></P>

<P class=indent><I>identifier</I></P>

<P>The <B>#undef</B> directive removes the current definition of <I>identifier</I>. Consequently, subsequent occurrences of <I>identifier</I> are ignored by the preprocessor. To remove a macro definition using <B>#undef</B>, give only the macro <I>identifier </I>; do not give a parameter list. </P>

<P>You can also apply the <B>#undef</B> directive to an identifier that has no previous definition. This ensures that the identifier is undefined. Macro replacement is not performed within <B>#undef</B> statements. </P>

<P>The <B>#undef</B> directive is typically paired with a <B>#define</B> directive to create a region in a source program in which an identifier has a special meaning. For example, a specific function of the source program can use manifest constants to define environment-specific values that do not affect the rest of the program. The <B>#undef</B> directive also works with the <B>#if</B> directive to control conditional compilation of the source program. See <A HREF="_predir_the_.23.if.2c_23.elif.2c_23.else.2c_.and_.23.endif_directives.htm">The #if, #elif, #else, and #endif Directives</A> for more information.</P>

<P>In the following example, the <B>#undef</B> directive removes definitions of a symbolic constant and a macro. Note that only the identifier of the macro is given.</P>

<PRE><CODE>#define WIDTH           80
#define ADD( X, Y )     (X) + (Y)
.
.
.
#undef WIDTH
#undef ADD
</CODE></PRE>

<P><B>Microsoft Specific </B></P>

<P>Macros can be undefined from the command line using the /U option, followed by the macro names to be undefined. The effect of issuing this command is equivalent to a sequence of <B>#undef</B> <I>macro-name</I> statements at the beginning of the file.</P>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

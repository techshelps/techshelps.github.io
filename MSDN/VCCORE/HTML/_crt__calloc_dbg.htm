<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_calloc_dbg</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__calloc_dbg"></A><SUP></SUP>_calloc_dbg</H1>

<P>Allocates a number of memory blocks in the heap with additional space for a debugging header and overwrite buffers (debug version only).</P>

<P><B>void</B> *<B>_calloc_dbg(</B> <B>size_t</B> <I>num</I><B>,</B> <B>size_t</B> <I>size</I><B>,</B> <B>int</B> <I>blockType</I><B>,</B> <B>const char</B> *<I>filename</I><B>,</B> <B>int</B> <I>linenumber</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=20%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=53%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>_calloc_dbg</B></TD>
<TD width=27%>&lt;crtdbg.h&gt;</TD>
<TD width=53%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Upon successful completion, this function either returns a pointer to the user portion of the last allocated memory block, calls the new handler function, or returns NULL. See the following Remarks section for a complete description of the return behavior. See the <A HREF="_crt_calloc.htm">calloc</A> function for more information on how the new handler function is used.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>num</I></P>

<P class=indent>Requested number of memory blocks</P>

<P class=dt><I>size</I></P>

<P class=indent>Requested size of each memory block (bytes)</P>

<P class=dt><I>blockType</I></P>

<P class=indent>Requested type of memory block: <B>_CLIENT_BLOCK</B> or <B>_NORMAL_BLOCK</B></P>

<P class=dt><I>filename</I></P>

<P class=indent>Pointer to name of source file that requested allocation operation or NULL</P>

<P class=dt><I>linenumber</I></P>

<P class=indent>Line number in source file where allocation operation was requested or NULL</P>

<P>The <I>filename</I> and <I>linenumber</I> parameters are only available when <B>_calloc_dbg</B> has been called explicitly or the <A HREF="_crt__crtdbg_map_alloc.htm">_CRTDBG_MAP_ALLOC</A> preprocessor constant has been defined.</P>

<P class=label><B>Remarks</B></P>

<P><B>_calloc_dbg</B> is a debug version of the <A HREF="_crt_calloc.htm">calloc</A> function. When <A HREF="_crt__debug.htm">_DEBUG</A> is not defined, calls to <B>_calloc_dbg</B> are removed during preprocessing. Both <B>calloc</B> and <B>_calloc_dbg</B> allocate <I>num</I> memory blocks in the base heap, but <B>_calloc_dbg</B> offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and <I>filename</I>/<I>linenumber</I> information to determine the origin of allocation requests.</P>

<P><B>_calloc_dbg</B> allocates each memory block with slightly more space than the requested <I>size</I>. The additional space is used by the debug heap manager to link the debug memory blocks together and to provide the application with debug header information and overwrite buffers. When the block is allocated, the user portion of the block is filled with the value 0xCD and each of the overwrite buffers are filled with 0xFD.</P>

<P>For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <A HREF="_core_memory_management_and_the_debug_heap.htm">Memory Management and the Debug Heap</A>. For information about the allocation block types and how they are used, see <A HREF="_core_types_of_blocks_on_the_debug_heap.htm">Types of Blocks on the Debug Heap</A>. For information on the differences between calling a standard heap function versus its debug version in a debug build of an application, see <A HREF="_core_using_the_debug_version_versus_the_base_version.htm">Using the Debug Version Versus the Base Version</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/*
 * CALLOCD.C
 * This program uses _calloc_dbg to allocate space for
 * 40 long integers. It initializes each element to zero.
 */
#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
#include &lt;crtdbg.h&gt;

void main( void )
{
        long *bufferN, *bufferC;

        /* 
         * Call _calloc_dbg to include the filename and line number
         * of our allocation request in the header and also so we can
         * allocate CLIENT type blocks specifically
         */
        bufferN = (long *)_calloc_dbg( 40, sizeof(long), _NORMAL_BLOCK, __FILE__, __LINE__ );
        bufferC = (long *)_calloc_dbg( 40, sizeof(long), _CLIENT_BLOCK, __FILE__, __LINE__ );
        if( bufferN != NULL &amp;&amp; bufferC != NULL )
              printf( "Allocated memory successfully\n" );
        else
              printf( "Problem allocating memory\n" );

        /* 
         * _free_dbg must be called to free CLIENT type blocks
         */
        free( bufferN );
        _free_dbg( bufferC, _CLIENT_BLOCK );
}
</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Allocated memory successfully
</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_calloc.htm">calloc</A>, <A HREF="_crt__malloc_dbg.htm">_malloc_dbg</A>, <A HREF="_crt__debug.htm">_DEBUG</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading and Writing Files</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CArchive">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_reading_and_writing_files"></A>Reading and Writing Files</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_file_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_file.2d.handling_tasks.htm">How Do I</A></P>

<P>If you’ve used the C run-time library file-handling functions, MFC reading and writing operations will appear familiar. This article describes reading directly from and writing directly to a <B>CFile</B> object. You can also do buffered file I/O with the <A HREF="JavaScript:hhobj_2.Click()">CArchive</A> class.</P>

<P class=label><B><A NAME="_core_to_read_from_and_write_to_the_file"></A>To read from and write to the file</B>

<UL type=disc>
	<LI>Use the <B>Read</B> and <B>Write</B> member functions to read and write data in the file.
<P class=tl>-or-</P></LI>

	<LI>The <B>Seek</B> member function is also available for moving to a specific offset within the file.</LI>
</UL>

<P><B>Read</B> takes a pointer to a buffer and the number of bytes to read and returns the actual number of bytes that were read. If the required number of bytes could not be read because end-of-file (EOF) is reached, the actual number of bytes read is returned. If any read error occurs, an exception is thrown. <B>Write</B> is similar to <B>Read</B>, but the number of bytes written is not returned. If a write error occurs, including not writing all the bytes specified, an exception is thrown. If you have a valid <B>CFile</B> object, you can read from it or write to it as shown in the following example:</P>

<PRE><CODE>char      szBuffer[256]; 
UINT      nActual = 0; 
CFile myFile;

myFile.Write( szBuffer, sizeof( szBuffer ) ); 
myFile.Seek( 0, CFile::begin );
nActual = myFile.Read( szBuffer, sizeof( szBuffer ) ); 
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You should normally carry out input/output operations within a <B>try</B>/<B>catch</B> exception handling block. For more information, see <A HREF="_core_exception_handling_syntax.htm">Exception Handling Syntax</A>. </P>
</font>
</BODY>
</HTML>

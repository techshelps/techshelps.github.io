<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_ASSERT, _ASSERTE Macros</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__assert.2c_._asserte_macros"></A>_ASSERT, _ASSERTE Macros</H1>

<P>Evaluate an expression and generate a debug report when the result is FALSE (debug version only).</P>

<P><B>_ASSERT(</B> <I>booleanExpression</I> <B>);</B></P>

<P><B>_ASSERTE(</B> <I>booleanExpression</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Macro</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=55%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_ASSERT</B></TD>
<TD width=26%>&lt;crtdbg.h&gt;</TD>
<TD width=55%>Win NT, Win 95</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_ASSERTE</B></TD>
<TD width=26%>&lt;crtdbg.h&gt;</TD>
<TD width=55%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P>Although <B>_ASSERT</B> and _<B>ASSERTE</B> are macros and are obtained by including CRTDBG.H, the application must link with one of the libraries listed above because these macros call other run-time functions.</P>

<P class=label><B>Return Value</B></P>

<P>None</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>booleanExpression</I></P>

<P class=indent>Expression (including pointers) that evaluates to nonzero or 0</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_ASSERT</B> and <B>_ASSERTE</B> macros provide an application with a clean and simple mechanism for checking assumptions during the debugging process. They are very flexible because they do not need to be enclosed in <B>#ifdef</B> statements to prevent them from being called in a retail build of an application. This flexibility is achieved by using the <A HREF="_crt__debug.htm">_DEBUG</A> macro. <B>_ASSERT</B> and <B>_ASSERTE</B> are only available when <B>_DEBUG</B> is defined. When <B>_DEBUG</B> is not defined, calls to these macros are removed during preprocessing.</P>

<P><B>_ASSERT</B> and <B>_ASSERTE</B> evaluate their <I>booleanExpression</I> argument and when the result is FALSE (0), they print a diagnostic message and call <A HREF="_crt__crtdbgreport.htm">_CrtDbgReport</A> to generate a debug report. The <B>_ASSERT</B> macro prints a simple diagnostic message, while <B>_ASSERTE</B> includes a string representation of the failed expression in the message. These macros do nothing when <I>booleanExpression</I> evaluates to nonzero.</P>

<P>Because the <B>_ASSERTE</B> macro specifies the failed expression in the generated report, it enables users to identify the problem without referring to the application source code. However, a disadvantage exists in that every expression evaluated by <B>_ASSERTE</B> must be included in the debug version of your application as a string constant. Therefore, if a large number of calls are made to <B>_ASSERTE</B>, these expressions can take up a significant amount of space.</P>

<P><B>_CrtDbgReport</B> generates the debug report and determines its destination(s), based on the current report mode(s) and file defined for the <B>_CRT_ASSERT</B> report type. By default, assertion failures and errors are directed to a debug message window. The <A HREF="_crt__crtsetreportmode.htm">_CrtSetReportMode</A> and <A HREF="_crt__crtsetreportfile.htm">_CrtSetReportFile</A> functions are used to define the destination(s) for each report type.</P>

<P>When the destination is a debug message window and the user chooses the Retry button, <B>_CrtDbgReport</B> returns 1, causing the <B>_ASSERT</B> and <B>_ASSERTE</B> macros to start the debugger, provided that “just-in-time” (JIT) debugging is enabled. See <A HREF="_core_debug_reporting_functions_of_the_c_run.2d.time_library.htm">Debug Reporting Functions of the C Run-Time Library</A> for an example of an assert message box under Windows NT.</P>

<P>For more information about the reporting process, see the <B>_CrtDbgReport</B> function and the section <A HREF="_core_debug_reporting_functions_of_the_c_run.2d.time_library.htm">Debug Reporting Functions of the C Run-Time Library</A>. For more information about resolving assertion failures and using these macros as a debugging error handling mechanism, see <A HREF="_core_using_macros_for_verification_and_reporting.htm">Using Macros for Verification and Reporting</A>.</P>

<P>The <A HREF="_crt__rpt.2c_._rptf_macros.htm">_RPT, _RPTF</A> debug macros are also available for generating a debug report, but they do not evaluate an expression. The <B>_RPT</B> macros generate a simple report and the <B>_RPTF</B> macros include the source file and line number where the report macro was called, in the generated report. In addition to the <B>_ASSERTE</B> macros, the ANSI <A HREF="_crt_assert.htm">assert</A> routine can also be used to verify program logic. This routine is available in both the debug and release versions of the libraries.</P>

<P class=label><B>Example</B></P>

<P><CODE>/*</CODE></P>

<P><CODE>&nbsp;* DBGMACRO.C</CODE></P>

<P><CODE>&nbsp;* In this program, calls are made to the _ASSERT and _ASSERTE</CODE></P>

<P><CODE>&nbsp;* macros to test the condition 'string1 == string2'.&nbsp; If the</CODE></P>

<P><CODE>&nbsp;* condition fails, these macros print a diagnostic message.</CODE></P>

<P><CODE>&nbsp;* The _RPTn and _RPTFn group of macros are also exercised in</CODE></P>

<P><CODE>&nbsp;* this program, as an alternative to the printf function.</CODE></P>

<P><CODE>&nbsp;*/</CODE></P>

<P><CODE>#include &lt;stdio.h&gt;</CODE></P>

<P><CODE>#include &lt;string.h&gt;</CODE></P>

<P><CODE>#include &lt;malloc.h&gt;</CODE></P>

<P><CODE>#include &lt;crtdbg.h&gt;</CODE></P>

<P><CODE>int main()</CODE></P>

<P><CODE>{</CODE></P>

<P><CODE>char *p1, *p2;</CODE></P>

<P><CODE>/*</CODE></P>

<P><CODE> * The Reporting Mode and File must be specified</CODE></P>

<P><CODE> * before generating a debug report via an assert</CODE></P>

<P><CODE> * or report macro.</CODE></P>

<P><CODE> * This program sends all report types to STDOUT</CODE></P>

<P><CODE> */</CODE></P>

<P><CODE>_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);</CODE></P>

<P><CODE>_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDOUT);</CODE></P>

<P><CODE>_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);</CODE></P>

<P><CODE>_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDOUT);</CODE></P>

<P><CODE>_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);</CODE></P>

<P><CODE>_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDOUT);</CODE></P>

<P><CODE>/*</CODE></P>

<P><CODE> * Allocate and assign the pointer variables</CODE></P>

<P><CODE> */</CODE></P>

<P><CODE>p1 = (char *)malloc(10);</CODE></P>

<P><CODE>strcpy(p1, "I am p1");</CODE></P>

<P><CODE>p2 = (char *)malloc(10);</CODE></P>

<P><CODE>strcpy(p2, "I am p2");</CODE></P>

<P><CODE>/*</CODE></P>

<P><CODE> * Use the report macros as a debugging</CODE></P>

<P><CODE> * warning mechanism, similar to printf.</CODE></P>

<P><CODE> *</CODE></P>

<P><CODE> * Use the assert macros to check if the</CODE></P>

<P><CODE> * p1 and p2 variables are equivalent.</CODE></P>

<P><CODE> *</CODE></P>

<P><CODE> * If the expression fails, _ASSERTE will</CODE></P>

<P><CODE> * include a string representation of the</CODE></P>

<P><CODE> * failed expression in the report.</CODE></P>

<P><CODE> * _ASSERT does not include the</CODE></P>

<P><CODE> * expression in the generated report.</CODE></P>

<P><CODE> */</CODE></P>

<P><CODE>_RPT0(_CRT_WARN, "\n\n Use the assert macros to evaluate the expression p1 == p2.\n");</CODE></P>

<P><CODE>_RPTF2(_CRT_WARN, "\n Will _ASSERT find '%s' == '%s' ?\n", p1, p2);</CODE></P>

<P><CODE>_ASSERT(p1 == p2);</CODE></P>

<P><CODE>_RPTF2(_CRT_WARN, "\n\n Will _ASSERTE find '%s' == '%s' ?\n", p1, p2);</CODE></P>

<P><CODE>_ASSERTE(p1 == p2);</CODE></P>

<P><CODE>_RPT2(_CRT_ERROR, "\n \n '%s' != '%s'\n", p1, p2);</CODE></P>

<P><CODE></CODE></P>

<P><CODE>free(p2);</CODE></P>

<P><CODE>free(p1);</CODE></P>

<P><CODE>return 0;</CODE></P>

<P><CODE>}</CODE></P>

<PRE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Use the assert macros to evaluate the expression p1 == p2.

dbgmacro.c(54) : Will _ASSERT find 'I am p1' == 'I am p2' ?
dbgmacro.c(55) : Assertion failed


dbgmacro.c(57) : Will _ASSERTE find 'I am p1' == 'I am p2' ?
dbgmacro.c(58) : Assertion failed: p1 == p2


'I am p1' != 'I am p2'

</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__rpt.2c_._rptf_macros.htm">_RPT, _RPTF</A></P>
</font>
</BODY>
</HTML>

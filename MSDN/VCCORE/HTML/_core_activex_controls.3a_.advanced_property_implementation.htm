<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Advanced Property Implementation</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.SetNotSupported">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.GetNotSupported">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.SetNotPermitted">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.FireError">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.advanced_property_implementation"></A>ActiveX Controls: Advanced Property Implementation</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>This article describes topics related to implementing advanced properties in an ActiveX control:

<UL type=disc>
	<LI><A HREF="#_core_read.2d.only_and_write.2d.only_properties">Read-only and write-only properties</A><BR><BR></LI>

	<LI><A HREF="#_core_returning_error_codes_from_a_property">Returning error codes from a property</A></LI>
</UL>

<H2><A NAME="_core_read.2d.only_and_write.2d.only_properties"></A>Read-only and Write-only Properties</H2>

<P>ClassWizard provides a quick and easy method to implement read-only or write-only properties for the control.</P>

<P class=label><B>To implement a read-only or write-only property</B>

<OL>
	<LI>Load the control project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Click the control’s class from the <B>Class name</B> box.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type the name of your property.<BR><BR></LI>

	<LI>In the <B>Implementation </B>box, click <B>Get/Set Methods</B>.<BR><BR></LI>

	<LI>In the <B>Type </B>box, select the proper type for the property.<BR><BR></LI>

	<LI>If you want a read-only property, clear the <B>Set </B>function name specified by ClassWizard. If you want a write-only property, clear the <B>Get </B>function name.<BR><BR></LI>

	<LI>Click <B>OK </B>to close the <B>Add Property</B> dialog box.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>When you do this, ClassWizard inserts the function <B>SetNotSupported</B> or <B>GetNotSupported</B> in the dispatch map entry in place of a normal Set or Get function.</P>

<P>If you want to change an existing property to be read- or write-only, you can edit the dispatch map manually and remove the unnecessary Set or Get function from the control class.</P>

<P>If you want a property to be conditionally read-only or write-only (for example, only when your control is operating in a particular mode), you can provide the Set or Get function, as normal, and call the <B>SetNotSupported</B> or <B>GetNotSupported</B> function where appropriate. For example:</P>

<PRE><CODE>void CSampleCtrl::SetMyProperty( short propVal )
{
    if ( m_bReadOnlyMode )   //  some control-specific state
        SetNotSupported( );
    else
        m_ipropVal = propVal;   //  set property as normal
}
</CODE></PRE>

<P>This code sample calls <B>SetNotSupported</B> if the <CODE>m_bReadOnlyMode</CODE> data member is <B>TRUE</B>. If <B>FALSE</B>, then the property is set to the new value.</P>

<H2><A NAME="_core_returning_error_codes_from_a_property"></A>Returning Error Codes From a Property</H2>

<P>To indicate that an error has occurred while attempting to get or set a property, use the <B>COleControl::ThrowError</B> function, which takes an <B>SCODE</B> (status code) as a parameter. You can use a predefined <B>SCODE</B> or define one of your own. For a list of predefined <B>SCODE</B>s and instructions for defining custom <B>SCODE</B>s, see <A HREF="_core_activex_controls.3a_.advanced_topics.htm#_core_handling_errors_in_your_activex_control">Handling Errors in Your ActiveX Control</A> in the article ActiveX controls: Advanced Topics.</P>

<P>Helper functions exist for the most common predefined <B>SCODE</B>s, such as <A HREF="JavaScript:hhobj_3.Click()">COleControl::SetNotSupported</A>, <A HREF="JavaScript:hhobj_4.Click()">COleControl::GetNotSupported</A>, and <A HREF="JavaScript:hhobj_5.Click()">COleControl::SetNotPermitted</A>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;<B>ThrowError</B> is meant to be used only as a means of returning an error from within a property’s Get or Set function or an automation method. These are the only times that the appropriate exception handler will be present on the stack.</P>

<P>For more information on reporting exceptions in other areas of the code, see <A HREF="JavaScript:hhobj_6.Click()">COleControl::FireError</A> and the section <A HREF="_core_activex_controls.3a_.advanced_topics.htm#_core_handling_errors_in_your_activex_control">Handling Errors in Your ActiveX Control</A> in the article ActiveX Controls: Advanced Topics.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A>, <A HREF="_core_activex_controls.3a_.methods.htm">ActiveX Controls: Methods</A>, <A HREF="JavaScript:hhobj_7.Click()">COleControl</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping Messages to Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfcnotes_tn006">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfcnotes_tn006">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mapping_messages_to_functions"></A>Mapping Messages to Functions</H1>

<P>ClassView, WizardBar, or ClassWizard enable you to bind member functions of MFC classes (user-interface classes derived from the MFC library) to the messages generated by your application's resources. They use <A HREF="_core_messages_and_commands.3a_.overview.htm">MFC message maps</A> to create the binding.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;ClassWizard is not for use when mapping messages to ATL objects. Instead use ClassView or the WizardBar only.</P>

<P>When you use ClassView, WizardBar, or ClassWizard to create a new class derived from one of the <A HREF="_core_classes_offered_by_classwizard.htm">framework classes</A>, it automatically places a complete and functional class in the header (.h) and implementation (.cpp) files you specify. ClassWizard keeps track of the class's message-handling and data-exchange members, so that you can update the class at a later time.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;ClassWizard is only for use with MFC user-interface classes derived from <B>CCmdTarget</B> that handle messages or manage dialog box controls. To add a new class that does not handle messages, create the class directly in the text editor. (The exception to this rule is class <B>CRecordset</B>, for database support, which can be created with ClassWizard.)</P>

<P class=label><B><A NAME="_core_to_define_a_message_handler_with_classview_or_wizardbar"></A>To define a message handler with ClassView or WizardBar</B>

<OL>
	<LI>From ClassView, right-click on a class and click <B>Add Windows Message Handler</B> on the shortcut menu.
<P class=tl>-or-</P>
<P class=tl>From WizardBar's <B>Class</B> drop-down list, select a class, then click <B>Add Windows Message Handler</B> on the <B>Action</B> menu.</P>
<P class=tl>The <B>New Windows Message and Event Handler</B> dialog box appears. </P></LI>

	<LI>From the <B>Class </B>or <B>Object to Handle</B> list, select an item. 
<P class=tl>The <B>New Windows messages/events</B> box displays a list of messages that you can add to the selected class or object. The <B>Existing Windows message/event handlers</B> box displays a list of messages already associated with the selected class or object. (Note that the <B>Filter for messages available to class</B> drop-down list allows you to select different sets of messages/events.) </P></LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;If the selected class is a dialog class, form view, or record view, then the <B>New Windows Messages and Event Handlers</B> box includes window messages but not menu commands. To map menu IDs to messages in a class, you need to determine which class should handle the message (for example, <B>CView</B> or <B>CMainFrame</B>). Choose that class in the WizardBar <B>Class</B> drop-down list, select the menu ID from the <B>Filter</B> drop-down list, then from the <B>Action</B> menu select <B>Add Windows Message Handler</B>.</P>

<P class=tl>For information on handling custom messages, see <A HREF="JavaScript:hhobj_1.Click()">MFC Technical Note 6</A>.</P>
<OL start=3>
	<LI>Select an item from the <B>New Windows Messages and Event Handlers</B> box, and click <B>Add Handler</B> to add the new handler function.
<P class=tl>WizardBar then adds a stub function to the class's implementation file. For example:</P></LI>
</OL>

<PRE><CODE>   // CChildFrame message handlers
   void CChildFrame::OnLButtonDblClk(UINT nFlags, 
         CPoint point) 
   {
      // TODO: Add your message handler code here
      // and/or call default
   
      CMDIChildWnd::OnLButtonDblClk(nFlags, point);
   }
</CODE></PRE>

<P class=tl><B>Add and Edit</B> performs the same function as <B>Add Handler</B>, except that after adding the message handler, <B>Add and Edit</B> navigates you to the file in which the message handler is implemented.</P>
<P class=tl>If you want to edit an existing message handler, or one you just added, select an item from <B>Existing message/event handlers</B>, and click <B>Edit Existing</B> to navigate to the file in which the message handler is implemented.</P>


<H2><A NAME="vchowquicklyaddingmessagehandlersfordialogboxcontrols"></A>Quickly Adding Message Handlers for Dialog Box Controls</H2>

<P>For dialog boxes in your project that are already associated with a class, you can take advantage of some shortcuts when creating message handlers. You can quickly create a handler for either the <A HREF="#_core_default_control_events_table">default control event</A>, or for any applicable Windows message.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;ClassWizard and the WizardBar can not be used for adding message handlers to ATL objects. Add a new message handler using the ClassView method.</P>



<P class=label><B><A NAME="_core_to_quickly_add_the_default_message_handler_for_a_control"></A>To quickly add the default message handler for a control</B>

<OL>
	<LI>Open the dialog box resource that contains the control. (You can choose <B>GoTo Dialog Editor</B> from ClassView or WizardBar, or double-click the dialog resource from the ResourceView pane.)<BR><BR></LI>

	<LI>Double-click the control whose default message you want to handle. <BR><BR></LI>

	<LI>The <B>Add Member Function</B> dialog box appears, with the default handler selected (for example, BN_CLICKED for a push button), and a suggested event name (for example, OnOk).
<P class=tl>If the control already has a handler defined for it, double-clicking jumps you to the handler code in the Text editor.</P></LI>

	<LI>Click <B>OK</B> to have WizardBar generate the declaration and stub function code for the new message handler function. </LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You can disable this functionality by clearing the <B>Double-click in dialog editor edits code</B> checkbox on the <B>Compatibility</B> tab of the <B>Options</B> dialog (available from the <B>Tools</B> menu). In this case, double-clicking on a control opens the control's Properties page.</P>



<P class=label><B><A NAME="_core_to_quickly_add_a_message_handler_for_a_control"></A>To quickly add a message handler for a control</B>

<OL start=5>
	<LI>Open the dialog box resource that contains the control. (You can choose <B>GoTo Dialog Editor</B> from ClassView or WizardBar, or double-click the dialog resource from the ResourceView pane.) <BR><BR></LI>

	<LI>From the WizardBar <B>Members</B> drop-down list, select an unimplemented (non-bold) message. 
<P class=tl>The <B>Add Member Function</B> dialog appears, with a proposed name for that message handler (for example, OnKeydownTab1 for the <B>TCN_KEYDOWN</B> message on a tabbed dialog with an object ID of IDC_TAB1).</P>
<P class=atl><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Selecting a bolded, or implemented message from the <B>Messages</B> list jumps you to that handler function in the Text editor.</p></LI>

	<LI>Click <B>OK</B> to accept the default name for the handler, or rename it and then click <B>OK</B>.<BR><BR></LI>

	<LI>WizardBar generates the function declaration and a stub function inside the dialog class, for example:
<PRE><CODE>afx_msg void OnKeydownTab1(NMHDR* pNMHDR, LRESULT* pResult);</CODE></PRE>

<P class=tl>……</P>
<PRE><CODE>void CAboutDlg::OnSelchangeTab1(NMHDR* pNMHDR, LRESULT* pResult) 
{
// TODO: Add your control notification handler code here

*pResult = 0;
}
</CODE></PRE>
</LI>
</OL>

<H3><A NAME="_core_default_control_events_table"></A>Default Control Events</H3>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=33%><B>Control name</B></TD>
<TD class=label width=67%><B>Default event</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Animate </TD>
<TD width=67%>NM_OUTOFMEMORY</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Check Box </TD>
<TD width=67%>BN_CLICKED</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Combo Box </TD>
<TD width=67%>CBN_EDITCHANGE</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Custom </TD>
<TD width=67%>(Not applicable)</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Date Time Picker</TD>
<TD width=67%>DTN_CLOSEUP</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Edit Box</TD>
<TD width=67%>EN_CHANGE</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Hot Key </TD>
<TD width=67%>NM_OUTOFMEMORY</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>IP Address</TD>
<TD width=67%>IPN_FIELDCHANGED</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>List </TD>
<TD width=67%>NM_CLICK</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>List Box </TD>
<TD width=67%>LBN_SELCHANGE</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Month Calendar</TD>
<TD width=67%>MCN_GETDAYSTATE</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Progress </TD>
<TD width=67%>NM_OUTOFMEMORY</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Push Button</TD>
<TD width=67%>BN_CLICKED</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Radio Button </TD>
<TD width=67%>BN_CLICKED</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Rich Edit </TD>
<TD width=67%>NM_CLICK</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Scrollbar </TD>
<TD width=67%>(Not applicable)</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Slider </TD>
<TD width=67%>NM_OUTOFMEMORY</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Spin </TD>
<TD width=67%>NM_OUTOFMEMORY</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Tab </TD>
<TD width=67%>TCN_SELCHANGE</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Tree </TD>
<TD width=67%>NM_CLICK</TD>
</TR>
</TABLE><BR>

<P class=label><B><A NAME="_core_to_define_a_message_handler_with_classwizard"></A>To define a message handler with ClassWizard</B></P>

<P>Two shortcuts are available for:

<UL type=disc>
	<LI><A HREF="_core_shortcut_for_defining_message_handlers_for_dialog_buttons.htm">Defining message handlers for dialog buttons</A> <BR><BR></LI>

	<LI><A HREF="_core_shortcut_for_defining_message_handlers_for_dialog_buttons.htm">Defining member variables for dialog controls</A> </LI>
</UL>

<OL>
	<LI>On the <B>View</B> menu, click <B>ClassWizard</B>.
<P class=tl>ClassWizard appears and displays information about the currently selected class or the class you last edited with ClassWizard.</P></LI>

	<LI>Click the <B>Message Maps</B> tab.<BR><BR></LI>

	<LI>From the <B>Class name</B> drop-down list, select the class name of the user-interface component (such as a menu, accelerator, or dialog resource) you want to work with.
<P class=tl>ClassWizard displays information about the user-interface object that is currently selected.</P></LI>

	<LI>In the <B>Object IDs</B> box, select the name of the user-interface object for which you want to define a message handler.<BR><BR></LI>

	<LI>In the <B>Messages</B> box, select the message for which you want to define a handler. Click <B>Add Function</B> (or double-click the message name).
<P class=tl>Messages with handlers already defined are displayed in bold.</P>
<P class=atl><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The messages you see in the <B>Messages</B> box are those most appropriate to your class. If your class is not associated with the resource that contains the command that you want to handle, set the focus on the resource (for example, a dialog), open ClassWizard, and then use the <B>Class name</B> drop-down list to switch to the class from which you want the message handled.</p>
<P class=atl>In addition, you can change the set of messages you handle by selecting the <B>Class Info</B> tab and selecting a new set of messages in the <B>Message filter</B> box. For information on handling custom messages, see <A HREF="JavaScript:hhobj_2.Click()">MFC Technical Note 6</A>. </p>
<P class=atl><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;Selecting a message displays a brief description of it at the bottom of the <B>MFC ClassWizard</B> dialog box.</p>
<P class=tl>For messages that do not already have a predefined name for the handler function, the Add Member Function dialog box appears.</P></LI>

	<LI>If the <B>Add Member Function</B> dialog box appears, type a name for the member function and click <B>OK</B>.
<P class=tl>-or-</P>
<P class=tl>From the <B>Add Member Function</B> dialog box, click <B>OK </B>to accept the default name.</P>
<P class=tl>Either action returns you to the ClassWizard <B>Message Maps</B> tab.</P>
<P class=tl>The message name is now displayed in bold to show that a message handler has been defined. The name of the new message hander appears in the <B>Member functions</B> box.</P></LI>

	<LI>At this point you have several options. You can:
<UL type=disc>
	<LI>Click <B>Cancel</B> to avoid updating your source code with the selected member functions.<BR><BR></LI>

	<LI>Add more message handlers.<BR><BR></LI>

	<LI>Click <B>OK </B>to update your source code with the selected member functions and close ClassWizard. You can return to ClassWizard any time during the development process.<BR><BR></LI>

	<LI>Click <B>Edit Code</B> to jump to the definition of the function selected in the <B>Member functions</B> list just created by ClassWizard and begin defining the function's behavior.</LI>
</UL>

<P class=tl>When you choose <B>OK </B>or <B>Edit Code</B>, ClassWizard updates your source code by:</P>
<UL type=disc>
	<LI>Inserting a function declaration into the header file.<BR><BR></LI>

	<LI>Inserting a complete, correct function definition with a skeletal implementation into the implementation file.<BR><BR></LI>

	<LI>Updating the class's message map to include the new message-handling function.</LI>
</UL>
</LI>
</OL>

<P>For tips on adding message handlers to a class using ClassWizard, see <A HREF="_core_classwizard.3a_.tips_and_troubleshooting.htm#_core_adding_functions_with_classwizard">Adding Functions with ClassWizard</A>.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_what_message_types_are_associated_with_which_user.2d.interface_objects.3f.htm">What Message Types Are Associated with Which User-Interface Objects?</A><BR><BR></LI>

	<LI><A HREF="_core_shortcut_for_defining_message_handlers_for_dialog_buttons.htm">Shortcut for Defining Message Handlers for Dialog Buttons</A> <BR><BR></LI>

	<LI><A HREF="_core_shortcut_for_defining_member_variables_for_dialog_controls.htm">Shortcut for Defining Member Variables for Dialog Controls</A> <BR><BR></LI>

	<LI><A HREF="_core_deleting_a_message_handler.htm">Deleting a Message Handler</A><BR><BR></LI>

	<LI><A HREF="_core_editing_a_message_handler.htm">Editing a Message Handler</A><BR><BR></LI>

	<LI><A HREF="_core_defining_a_message_handler_for_a_reflected_message.htm">Defining a Message Handler for a Reflected Message</A> <BR><BR></LI>

	<LI><A HREF="_core_declaring_a_variable_based_on_your_new_control_class.htm">Declaring a Variable Based on Your New Control Class</A> <BR><BR></LI>

	<LI><A HREF="_core_overriding_a_virtual_function.htm">Overriding a Virtual Function</A></LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_heapset</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__heapset"></A><SUP></SUP>_heapset</H1>

<P>Checks heaps for minimal consistency and sets the free entries to a specified value.</P>

<P><B>int</B> <B>_heapset(</B> <B>unsigned</B> <B>int</B> <I>fill</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=27%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_heapset</B></TD>
<TD width=27%>&lt;malloc.h&gt;</TD>
<TD width=27%>&lt;errno.h&gt;</TD>
<TD width=30%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_heapset</B> returns one of the following integer manifest constants defined in MALLOC.H:</P>

<P class=dt><B>_HEAPBADBEGIN</B></P>

<P class=indent>Initial header information invalid or not found</P>

<P class=dt><B>_HEAPBADNODE</B></P>

<P class=indent>Heap damaged or bad node found</P>

<P class=dt><B>_HEAPEMPTY</B></P>

<P class=indent>Heap not initialized</P>

<P class=dt><B>_HEAPOK</B></P>

<P class=indent>Heap appears to be consistent</P>

<P>In addition, if an error occurs, <B>_heapset</B> sets <B>errno</B> to <B>ENOSYS</B>.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>fill</I></P>

<P class=indent>Fill character</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_heapset</B> function shows free memory locations or nodes that have been unintentionally overwritten.</P>

<P><B>_heapset</B> checks for minimal consistency on the heap, then sets each byte of the heap’s free entries to the <I>fill</I> value. This known value shows which memory locations of the heap contain free nodes and which contain data that were unintentionally written to freed memory.</P>

<P class=indent><B><B>Note</B></B>  In Visual C++ Version 4.0, the underlying heap structure was moved to the C run-time libraries to support the new debugging features. As a result, the only Win32 platform that is supported by <B>_heapset</B> is Windows NT. The function returns <B>_HEAPOK</B> and sets <B>errno</B> to <B>ENOSYS</B>, when it is called by any other Win32 platform.</P>

<P class=label><B>Example </B></P>

<PRE><CODE>/* HEAPSET.C: This program checks the heap and
 * fills in free entries with the character 'Z'.
 */

#include &lt;malloc.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void main( void )
{
   int heapstatus;
   char *buffer;

   if( (buffer = malloc( 1 )) == NULL ) /* Make sure heap is */
      exit( 0 );                        /*    initialized    */  
   heapstatus = _heapset( 'Z' );        /* Fill in free entries */
   switch( heapstatus )
   {
   case _HEAPOK:
      printf( "OK - heap is fine\n" );
      break;
   case _HEAPEMPTY:
      printf( "OK - heap is empty\n" );
      break;
   case _HEAPBADBEGIN:
      printf( "ERROR - bad start of heap\n" );
      break;
   case _HEAPBADNODE:
      printf( "ERROR - bad node in heap\n" );
      break;
   }
   free( buffer );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>OK - heap is fine

</CODE></PRE>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__heapadd.htm">_heapadd</A>, <A HREF="_crt__heapchk.htm">_heapchk</A>, <A HREF="_crt__heapmin.htm">_heapmin</A>, <A HREF="_crt__heapwalk.htm">_heapwalk </A></P>
</font>
</BODY>
</HTML>

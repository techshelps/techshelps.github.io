<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Warning (level 1) C4270</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="c4270"></A><SUP></SUP>Compiler Warning (level 1) C4270</H1>

<P class=dt><B>nonstandard extension used: 'initializing': a non-const 'type1' must be initialized with an l-value, not a function returning 'type2'</B></P>

<P>A nonconst reference must be initialized with an l-value, which makes the reference a name for that l-value. A function call is only an l-value if the return type of the function is a reference. A Microsoft extension to the C++ language allows any function call to be treated as an l-value for the purpose of initializing references. If Microsoft extensions are disabled (/Za), then this an error.</P>

<P>This warning can be avoided by ensuring the reference is a <B>const</B> reference. However, if the reference is <B>const</B> and the function <B>return</B> type is not compatible with the type of the reference, the compiler will silently generate and initialize a temporary. Although this is not incorrect, it is inefficient and probably undesirable.</P>

<P>The following example causes this warning:</P>

<PRE><CODE>struct X 
{
   X(int);
   X(X&amp;);
};
X f(X);
X b = f(X(2));   // warning
</CODE></PRE>

<P>If you do not have access to source code to fix this problem you can disable this warning using the following pragma:</P>

<PRE><CODE>#pragma warning(disable:4270)
</CODE></PRE>
</font>
</BODY>
</HTML>

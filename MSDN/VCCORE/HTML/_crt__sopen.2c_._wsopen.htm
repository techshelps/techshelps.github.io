<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_sopen, _wsopen</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__sopen.2c_._wsopen"></A><SUP></SUP>_sopen, _wsopen</H1>

<P>Open a file for sharing.</P>

<P><B>int</B> <B>_sopen(</B> <B>const</B> <B>char</B> <B>*</B><I>filename</I><B>,</B> <B>int</B> <I>oflag</I><B>,</B> <B>int</B> <I>shflag</I> [<B>,</B> <B>int</B> <I>pmode</I> ] <B>);</B></P>

<P><B>int</B> <B>_wsopen(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>filename</I><B>,</B> <B>int</B> <I>oflag</I><B>,</B> <B>int</B> <I>shflag</I> [<B>,</B> <B>int</B> <I>pmode</I> ] <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=18%><B>Required Header</B></TD>
<TD class=label width=36%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_sopen</B></TD>
<TD width=18%>&lt;io.h&gt;</TD>
<TD width=36%>&lt;fcntl.h&gt;, &lt;sys/types.h&gt;, &lt;sys/stat.h&gt;, &lt;share.h&gt;</TD>
<TD width=30%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wsopen</B></TD>
<TD width=18%>&lt;io.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=36%>&lt;fcntl.h&gt;, &lt;sys/types.h&gt;, &lt;sys/stat.h&gt;, &lt;share.h&gt;</TD>
<TD width=30%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a file handle for the opened file. A return value of –1 indicates an error, in which case <B>errno</B> is set to one of the following values:</P>

<P class=dt><B>EACCES</B></P>

<P class=indent>Given path is a directory, or file is read-only, but an open-for-writing operation was attempted.</P>

<P class=dt><B>EEXIST</B></P>

<P class=indent><B>_O_CREAT</B> and <B>_O_EXCL</B> flags were specified, but <I>filename</I> already exists.</P>

<P class=dt><B>EINVAL</B></P>

<P class=indent>Invalid <I>oflag</I> or <I>shflag</I> argument.</P>

<P class=dt><B>EMFILE</B></P>

<P class=indent>No more file handles available.</P>

<P class=dt><B>ENOENT</B></P>

<P class=indent>File or path not found.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>filename</I></P>

<P class=indent>Filename</P>

<P class=dt><I>oflag</I></P>

<P class=indent>Type of operations allowed</P>

<P class=dt><I>shflag</I></P>

<P class=indent>Type of sharing allowed</P>

<P class=dt><I>pmode</I></P>

<P class=indent>Permission setting</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_sopen</B> function opens the file specified by <I>filename</I> and prepares the file for shared reading or writing, as defined by <I>oflag</I> and <I>shflag</I>. <B>_wsopen</B> is a wide-character version of <B>_sopen</B>; the <I>filename</I> argument to <B>_wsopen</B> is a wide-character string. <B>_wsopen</B> and <B>_sopen</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tsopen</TD>
<TD width=29%>_sopen</TD>
<TD width=26%>_sopen</TD>
<TD width=28%>_wsopen</TD>
</TR>
</TABLE><BR>

<P>The integer expression <I>oflag</I> is formed by combining one or more of the following manifest constants, defined in the file FCNTL.H. When two or more constants form the argument <I>oflag</I>, they are combined with the bitwise-OR operator ( <B>|</B> ).</P>

<P class=dt><B>_O_APPEND</B></P>

<P class=indent>Repositions file pointer to end of file before every write operation.</P>

<P class=dt><B>_O_BINARY</B></P>

<P class=indent>Opens file in binary (untranslated) mode. (See <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A> for a description of binary mode.)</P>

<P class=dt><B>_O_CREAT</B></P>

<P class=indent>Creates and opens new file for writing. Has no effect if file specified by <I>filename</I> exists. The <I>pmode</I> argument is required when <B>_O_CREAT</B> is specified.</P>

<P class=dt><B>_O_CREAT</B> | <B>_O_SHORT_LIVED</B></P>

<P class=indent>Create file as temporary and if possible do not flush to disk. The <I>pmode</I> argument is required when <B>_O_CREAT</B> is specified.</P>

<P class=dt><B>_O_CREAT</B> | <B>_O_TEMPORARY</B></P>

<P class=indent>Create file as temporary; file is deleted when last file handle is closed. The <I>pmode</I> argument is required when <B>_O_CREAT</B> is specified. </P>

<P class=dt><B>_O_CREAT</B> | <B>_O_EXCL</B></P>

<P class=indent>Returns error value if file specified by <I>filename</I> exists. Applies only when used with <B>_O_CREAT</B>.</P>

<P class=dt><B>_O_NOINHERIT</B></P>

<P class=indent>Prevents creation of a shared file handle.</P>

<P class=dt><B>_O_RANDOM</B></P>

<P class=indent>Specifies primarily random access from disk.</P>

<P class=dt><B>_O_RDONLY</B></P>

<P class=indent>Opens file for reading only; cannot be specified with <B>_O_RDWR</B> or <B>_O_WRONLY</B>.</P>

<P class=dt><B>_O_RDWR</B></P>

<P class=indent>Opens file for both reading and writing; cannot be specified with <B>_O_RDONLY</B> or <B>_O_WRONLY</B>.</P>

<P class=dt><B>_O_SEQUENTIAL</B></P>

<P class=indent>Specifies primarily sequential access from disk</P>

<P class=dt><B>_O_TEXT</B></P>

<P class=indent>Opens file in text (translated) mode. (For more information, see <A HREF="_crt_text_and_binary_mode_file_i.2f.o.htm">Text and Binary Mode File I/O</A> and <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>.)</P>

<P class=dt><B>_O_TRUNC</B></P>

<P class=indent>Opens file and truncates it to zero length; the file must have write permission. You cannot specify this flag with <B>_O_RDONLY</B>. <B>_O_TRUNC</B> used with <B>_O_CREAT</B> opens an existing file or creates a new file.</P>

<P class=indent><B><B>Warning</B></B>&nbsp;&nbsp;&nbsp;The <B>_O_TRUNC</B> flag destroys the contents of the specified file.</P>

<P class=dt><B>_O_WRONLY</B></P>

<P class=indent>Opens file for writing only; cannot be specified with <B>_O_RDONLY</B> or <B>_O_RDWR</B>.</P>

<P>To specify the file access mode, you must specify either <B>_O_RDONLY</B>, <B>_O_RDWR</B>, or <B>_O_WRONLY</B>. There is no default value for the access mode.</P>

<P>The argument <I>shflag</I> is a constant expression consisting of one of the following manifest constants, defined in SHARE.H.</P>

<P class=dt><B>_SH_DENYRW</B></P>

<P class=indent>Denies read and write access to file</P>

<P class=dt><B>_SH_DENYWR</B></P>

<P class=indent>Denies write access to file</P>

<P class=dt><B>_SH_DENYRD</B></P>

<P class=indent>Denies read access to file</P>

<P class=dt><B>_SH_DENYNO</B></P>

<P class=indent>Permits read and write access</P>

<P>The <I>pmode</I> argument is required only when you specify <B>_O_CREAT</B>. If the file does not exist, <I>pmode</I> specifies the file’s permission settings, which are set when the new file is closed the first time. Otherwise <I>pmode</I> is ignored. <I>pmode</I> is an integer expression that contains one or both of the manifest constants <B>_S_IWRITE</B> and <B>_S_IREAD</B>, defined in SYS\STAT.H. When both constants are given, they are combined with the bitwise-OR operator. The meaning of <I>pmode</I> is as follows:</P>

<P class=dt><B>_S_IWRITE</B></P>

<P class=indent>Writing permitted</P>

<P class=dt><B>_S_IREAD</B></P>

<P class=indent>Reading permitted</P>

<P class=dt><B>_S_IREAD | _S_IWRITE</B></P>

<P class=indent>Reading and writing permitted</P>

<P>If write permission is not given, the file is read-only. Under Windows NT and Windows 95, all files are readable; it is not possible to give write-only permission. Thus the modes <B>_S_IWRITE</B> and <B>_S_IREAD | _S_IWRITE</B> are equivalent.</P>

<P><B>_sopen</B> applies the current file-permission mask to <I>pmode</I> before setting the permissions (see <A HREF="_crt__umask.htm">_umask</A>).</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* LOCKING.C: This program opens a file with sharing. It locks
 * some bytes before reading them, then unlocks them. Note that the
 * program works correctly only if the file exists.
 */

#include &lt;io.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/locking.h&gt;
#include &lt;share.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void main( void )
{
   int  fh, numread;
   char buffer[40];

   /* Quit if can't open file or system doesn't 
    * support sharing. 
    */
   fh = _sopen( "locking.c", _O_RDWR, _SH_DENYNO, 
                 _S_IREAD | _S_IWRITE );
   if( fh == -1 )
      exit( 1 );

   /* Lock some bytes and read them. Then unlock. */
   if( _locking( fh, LK_NBLCK, 30L ) != -1 )
   {
      printf( "No one can change these bytes while I'm reading them\n" );
      numread = _read( fh, buffer, 30 );
      printf( "%d bytes read: %.30s\n", numread, buffer );
      lseek( fh, 0L, SEEK_SET );
     _locking( fh, LK_UNLCK, 30L );
      printf( "Now I'm done. Do what you will with them\n" );
   }
   else
      perror( "Locking failed\n" );

   _close( fh );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>No one can change these bytes while I'm reading them
30 bytes read: /* LOCKING.C: This program ope
Now I'm done. Do what you will with them

</CODE></PRE>

<P><A HREF="_crt_low.2d.level_i.2f.o.htm">Low-level I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__close.htm">_close</A>, <A HREF="_crt__creat.2c_._wcreat.htm">_creat</A>, <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, <A HREF="_crt__fsopen.2c_._wfsopen.htm">_fsopen</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A> </P>
</font>
</BODY>
</HTML>

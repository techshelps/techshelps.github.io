<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using and Preserving Registers in Inline Assembly</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_and_preserving_registers_in_inline_assembly"></A>Using and Preserving Registers in Inline Assembly</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.293a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.29_.tasks.htm">How Do I</A></P>

<P>In general, you should not assume that a register will have a given value when an <B>__asm</B> block begins. Register values are not guaranteed to be preserved across separate <B>__asm</B> blocks. If you end a block of inline code and begin another, you cannot rely on the registers in the second block to retain their values from the first block. An <B>__asm</B> block inherits whatever register values result from the normal flow of control.</P>

<P>If you use the <B>__fastcall</B> calling convention, the compiler passes function arguments in registers instead of on the stack. This can create problems in functions with <B>__asm</B> blocks because a function has no way to tell which parameter is in which register. If the function happens to receive a parameter in EAX and immediately stores something else in EAX, the original parameter is lost. In addition, you must preserve the ECX register in any function declared with <B>__fastcall</B>.</P>

<P>To avoid such register conflicts, don’t use the <B>__fastcall</B> convention for functions that contain an <B>__asm</B> block. If you specify the <B>__fastcall</B> convention globally with the /Gr compiler option, declare every function containing an <B>__asm</B> block with <B>__cdecl</B> or <B>__stdcall</B>. (The <B>__cdecl</B> attribute tells the compiler to use the C calling convention for that function.) If you are not compiling with /Gr, avoid declaring the function with the <B>__fastcall</B> attribute.</P>

<P>When using <B>__asm</B> to write assembly language in C/C++ functions, you don't need to preserve the EAX, EBX, ECX, EDX, ESI, or EDI registers. For example, in the POWER2.C example in <A HREF="_core_writing_functions_with_inline_assembly.htm">Writing Functions with Inline Assembly</A>, the <CODE>power2</CODE> function doesn't preserve the value in the EAX register. However, using these registers will affect code quality because the register allocator cannot use them to store values across <B>__asm</B> blocks. In addition, by using EBX, ESI or EDI in inline assembly code, you force the compiler to save and restore those registers in the function prologue and epilogue.</P>

<P>You should preserve other registers you use (such as DS, SS, SP, BP, and flags registers) for the scope of the <B>__asm</B> block. You should preserve the ESP and EBP registers unless you have some reason to change them (to switch stacks, for example). Also see <A HREF="_core_optimizing_inline_assembly.htm">Optimizing Inline Assembly</A>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;If your inline assembly code changes the direction flag using the STD or CLD instructions, you must restore the flag to its original value.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_write</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__write"></A><SUP></SUP>_write</H1>

<P>Writes data to a file.</P>

<P><B>int</B> <B>_write(</B> <B>int</B> <I>handle</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>buffer</I><B>,</B> <B>unsigned</B> <B>int</B> <I>count</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=56%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_write</B></TD>
<TD width=27%>&lt;io.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>If successful, <B>_write</B> returns the number of bytes actually written. If the actual space remaining on the disk is less than the size of the buffer the function is trying to write to the disk, <B>_write</B> fails and does not flush any of the buffer’s contents to the disk. A return value of –1 indicates an error. In this case, <B>errno</B> is set to one of two values: <B>EBADF</B>, which means the file handle is invalid or the file is not opened for writing, or <B>ENOSPC</B>, which means there is not enough space left on the device for the operation.</P>

<P>If the file is opened in text mode, each linefeed character is replaced with a carriage return – linefeed pair in the output. The replacement does not affect the return value. </P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>handle</I></P>

<P class=indent>Handle of file into which data is written</P>

<P class=dt><I>buffer</I></P>

<P class=indent>Data to be written</P>

<P class=dt><I>count</I></P>

<P class=indent>Number of bytes</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_write</B> function writes <I>count</I> bytes from <I>buffer</I> into the file associated with <I>handle</I>. The write operation begins at the current position of the file pointer (if any) associated with the given file. If the file is open for appending, the operation begins at the current end of the file. After the write operation, the file pointer is increased by the number of bytes actually written.</P>

<P>When writing to files opened in text mode, <B>_write</B> treats a CTRL+Z character as the logical end-of-file. When writing to a device, <B>_write</B> treats a CTRL+Z character in the buffer as an output terminator.</P>

<P class=label><B>Example </B></P>

<PRE><CODE>/* WRITE.C: This program opens a file for output
 * and uses _write to write some bytes to the file.
 */

#include &lt;io.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

char buffer[] = "This is a test of '_write' function";

void main( void )
{
   int fh;
   unsigned byteswritten;

   if( (fh = _open( "write.o", _O_RDWR | _O_CREAT, 
                               _S_IREAD | _S_IWRITE )) != -1 )
   {
      if(( byteswritten = _write( fh, buffer, sizeof( buffer ))) == -1 )
         perror( "Write failed" );
      else
         printf( "Wrote %u bytes to file\n", byteswritten );

      _close( fh );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Wrote 36 bytes to file

</CODE></PRE>

<P><A HREF="_crt_low.2d.level_i.2f.o.htm">Low-level I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fwrite.htm">fwrite</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A>, <A HREF="_crt__read.htm">_read</A></P>
</font>
</BODY>
</HTML>

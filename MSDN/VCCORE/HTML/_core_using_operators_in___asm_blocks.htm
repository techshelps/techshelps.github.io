<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Operators in __asm Blocks</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_operators_in___asm_blocks"></A>Using Operators in __asm Blocks</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.293a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.29_.tasks.htm">How Do I</A></P>

<P>An <B>__asm</B> block cannot use C or C++ specific operators, such as the <B>&lt;&lt;</B> operator. However, operators shared by C and MASM, such as the * operator, are interpreted as assembly-language operators. For instance, outside an <B>__asm</B> block, square brackets (<B>[ ]</B>) are interpreted as enclosing array subscripts, which C automatically scales to the size of an element in the array. Inside an <B>__asm</B> block, they are seen as the MASM index operator, which yields an unscaled byte offset from any data object or label (not just an array). The following code illustrates the difference: </P>

<PRE><CODE>int array[10];

__asm mov array[6], bx ;  Store BX at array+6 (not scaled)

array[6] = 0;         /* Store 0 at array+12 (scaled) */
</CODE></PRE>

<P>The first reference to <CODE>array</CODE> is not scaled, but the second is. Note that you can use the <B>TYPE</B> operator to achieve scaling based on a constant. For example, the following statements are equivalent:</P>

<PRE><CODE>__asm mov array[6 * TYPE int], 0 ; Store 0 at array + 12

array[6] = 0;                   /* Store 0 at array + 12 */
</CODE></PRE>
</font>
</BODY>
</HTML>

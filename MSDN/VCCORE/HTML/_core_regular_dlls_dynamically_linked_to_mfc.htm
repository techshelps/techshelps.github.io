<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Regular DLLs Dynamically Linked to MFC</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_AFX_MANAGE_STATE">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_AFX_MANAGE_STATE">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFCNOTES_TN011">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_regular_dlls_dynamically_linked_to_mfc"></A>Regular DLLs Dynamically Linked to MFC</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_dlls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dll_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_dlls.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dll_topics.htm">Details</A>  |&nbsp; <A HREF="_core_dll_sample_programs.htm">Sample</A></P>

<P>A regular DLL, dynamically linked to MFC is a DLL that uses MFC internally, and the exported functions in the DLL can be called by either MFC or non-MFC executables. </P>

<P>A regular DLL, dynamically linked to MFC has the following features:

<UL type=disc>
	<LI>This is a new type of DLL introduced by Visual C++ 4.0. <BR><BR></LI>

	<LI>The client executable can be written in any language that supports the use of DLLs (C, C++, Pascal, Visual Basic, etc.); it does not have to be an MFC application.<BR><BR></LI>

	<LI>Unlike the statically-linked regular DLL, this type of DLL is dynamically linked to the MFC DLL (also known as the shared MFC DLL). <BR><BR></LI>

	<LI>The MFC import library linked to this type of DLL is the same one used for extension DLLs or applications using the MFC DLL: MFCxx(D).LIB. </LI>
</UL>

<P>A regular DLL, dynamically linked to MFC has the following requirements:

<UL type=disc>
	<LI>These DLLs are compiled with <B>_AFXDLL</B> defined, just like an executable which is dynamically linked to the MFC DLL. But <B>_USRDLL</B> is also defined, just like a regular DLL which is statically linked to MFC. <BR><BR></LI>

	<LI>This type of DLL must instantiate a <B>CWinApp</B>-derived class.<BR><BR></LI>

	<LI>This type of DLL uses the <B>DllMain</B> provided by MFC. Place all DLL-specific initialization code in the <B>InitInstance</B> member function and termination code in <B>ExitInstance</B> as in a normal MFC application. </LI>
</UL>

<P>Because this kind of DLL uses the dynamic link library version of MFC, you must explicitly set the current module state to the one for the DLL. To do this, use the <A HREF="JavaScript:hhobj_2.Click()">AFX_MANAGE_STATE</A> macro at the beginning of every function exported from the DLL. </P>

<P>Regular DLLs must have a <B>CWinApp</B>-derived class and a single object of that application class, as does an MFC application. However, the <B>CWinApp</B> object of the DLL does not have a main message pump, as does the <B>CWinApp</B> object of an application. </P>

<P>The following MFC capabilities are not applicable in DLLs, either because of technical limitations or because those services are usually provided by the application. 

<UL type=disc>
	<LI><B>CWinApp::Enable3dControls</B><BR><BR></LI>

	<LI><B>CWinApp::SetDialogBkColor</B> (color is ignored for message boxes)</LI>
</UL>

<P>Note that the <B>CWinApp::Run</B> mechanism does not apply to a DLL, since the application owns the main message pump. If your DLL brings up modeless dialogs or has a main frame window of its own, your application's main message pump must call a DLL-exported routine that calls <B>CWinApp::PreTranslateMessage</B>.</P>

<P>Place all DLL-specific initialization in the <B>CWinApp::InitInstance</B> member function as in a normal MFC application. The <B>CWinApp::ExitInstance</B> member function of your <B>CWinApp</B> derived class will be called from the MFC provided <B>DllMain</B> function before the DLL is unloaded.</P>

<P>You must distribute the shared DLLs MFCx0.DLL and MSVCRT.DLL (or similar files) with your application. See the topic <A HREF="_core_redistributable_files.htm">Redistributable Files</A> for a complete list of the MFC redistributable files.</P>

<P>A DLL that is dynamically linked to MFC cannot also statically link to MFC. Applications link to regular DLLs dynamically linked to MFC it just like any other DLL. </P>

<P>Symbols are usually exported from a regular DLL using the standard C interface. The declaration of a function exported from a regular DLL looks something like this:</P>

<PRE><CODE>extern "C" __declspec(dllexport) MyExportedFunction( );
</CODE></PRE>

<P>All memory allocations within a regular DLL should stay within the DLL; the DLL should not pass to or receive from the calling executable any of the following:

<UL type=disc>
	<LI>pointers to MFC objects<BR><BR></LI>

	<LI>pointers to memory allocated by MFC</LI>
</UL>

<P>If you need to do any of the above, or if you need to pass MFC-derived objects between the calling executable and the DLL, then you must build an extension DLL.</P>

<P>It is safe to pass pointers to memory that were allocated by the C run-time libraries between an application and a DLL only if you make a copy of the data. You must not delete or resize these pointers or use them without making a copy of the memory.</P>

<P>When building a regular DLL that dynamically links to MFC, you need to use the macro <A HREF="JavaScript:hhobj_3.Click()">AFX_MANAGE_STATE</A> to switch the MFC module state correctly. This is done by adding the following line of code to the beginning of functions exported from the DLL:</P>

<PRE><CODE>AFX_MANAGE_STATE(AfxGetStaticModuleState( ))
</CODE></PRE>

<P>The <B>AFX_MANAGE_STATE </B>macro should not be used in regular DLLs that statically link to MFC or in extension DLLs. For more information, see <A HREF="_core_managing_the_state_data_of_mfc_modules.htm">Managing the State Data of MFC Modules</A>.</P>

<H3>What do you want to do? </H3>

<UL type=disc>
	<LI><A HREF="_core_initialize_regular_dlls.htm">Initialize regular DLLs</A></LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_module_states_of_a_regular_dll_dynamically_linked_to_mfc.htm">The module states of a regular DLL dynamically linked to MFC</A> <BR><BR></LI>

	<LI><A HREF="_core_managing_the_state_data_of_mfc_modules.htm">Managing the state data of MFC modules</A><BR><BR></LI>

	<LI><A HREF="_core_using_extension_dll.2c.database.2f.ole.2f.sockets_in_regular_dll.htm">Using extension DLL,Database/OLE/Sockets in regular DLL</A><BR><BR></LI>

	<LI><A HREF="JavaScript:hhobj_4.Click()">Using MFC as Part of a DLL</A><BR><BR></LI>

	<LI><A HREF="_core_the_different_kinds_of_dlls_available_with_visual_c.2b2b.htm">The different kinds of DLLs available with Visual C++</A></LI>
</UL>
</font>
</BODY>
</HTML>

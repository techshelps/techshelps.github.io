<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Which Exception Handling Mechanism Should I Use?</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_which_exception_handling_mechanism_should_i_use.3f"></A>Which Exception Handling Mechanism Should I Use?</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling_topics_.28.general.29.htm">Details</A></P>

<P>Visual C++ supports three different exception handling mechanisms. Use the one that fits your situation:

<UL type=disc>
	<LI><A HREF="_core_exception_handling_topics_.28.c.2b2b29.htm">C++ exceptions</A>
<P class=tl>The Visual C++&nbsp; the Microsoft Foundation Class Library (MFC).</P></LI>

	<LI><A HREF="_core_exception_handling_topics_.28.seh.29.htm">Structured exception handling</A>
<P class=tl>Windows NT supplies its own exception mechanism, called structured exception handling (SEH). SEH is not recommended for C++ or MFC programming.</P></LI>

	<LI><A HREF="_core_exception_handling_topics_.28.mfc.29.htm">MFC exception macros</A>
<P class=tl>MFC has, since MFC version 1.0, supported an exception handling mechanism exposed through a set of macros. Although use of these macros is not recommended for new programming, the macros are still supported for backward compatibility. In programs that already use the macros, you can freely use C++ exceptions as well — during preprocessing, the macros evaluate to the exception handling keywords defined in the Visual C++ implementation of the C++ language as of Visual C++ version 2.0. You can leave existing exception macros in place while you begin to use C++ exceptions.</P></LI>
</UL>
</font>
</BODY>
</HTML>

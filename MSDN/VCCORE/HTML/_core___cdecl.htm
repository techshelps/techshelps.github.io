<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>__cdecl</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core___cdecl"></A>__cdecl</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_calling_conventions.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_calling_conventions_tasks.htm">How Do I</A></P>

<P><B>Microsoft Specific —&gt;</B></P>

<P>This is the default calling convention for C and C++ programs. Because the stack is cleaned up by the caller, it can do <B>vararg</B> functions. The <B>__cdecl</B> calling convention creates larger executables than <A HREF="_core___stdcall.htm">__stdcall</A>, because it requires each function call to include stack cleanup code. The following list shows the implementation of this calling convention.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=45%><B>Element</B></TD>
<TD class=label width=55%><B>Implementation</B></TD>
</TR>

<TR VALIGN="top">
<TD width=45%>Argument-passing order</TD>
<TD width=55%>Right to left</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>Stack-maintenance responsibility</TD>
<TD width=55%>Calling function pops the arguments from the stack</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>Name-decoration convention</TD>
<TD width=55%>Underscore character (_) is prefixed to names</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>Case-translation convention</TD>
<TD width=55%>No case translation performed</TD>
</TR>
</TABLE><BR>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;For related information, see <A HREF="_core_decorated_names.htm">Decorated Names</A>. </P>

<P>Place the __<B>cdecl</B> modifier before a variable or a function name. Because the C naming and calling conventions are the default, the only time you need to use __<B>cdecl</B> is when you have specified the /Gz (stdcall) or /Gr (fastcall) compiler option. The <A HREF="_core_.2f.gd.2c_2f.gr.2c_2f.gz.htm">/Gd</A> compiler option forces the <B>__cdecl</B> calling convention.</P>

<H3>Example</H3>

<P>In the following example, the compiler is instructed to use C naming and calling conventions for the <CODE>system</CODE> function:</P>

<PRE><CODE>// Example of the __cdecl keyword
_CRTIMP int __cdecl system(const char *);
</CODE></PRE>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

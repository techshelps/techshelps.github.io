<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multithreading: Creating Worker Threads</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CWinThread">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_AfxBeginThread">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_WIN32_SetThreadPriority">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_SECURITY_ATTRIBUTES_str">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_multithreading.3a_.creating_worker_threads"></A>Multithreading: Creating Worker Threads</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_multithreaded_programs.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_multithreading_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_multithreading_sample_list.htm">Sample</A></P>

<P>A worker thread is commonly used to handle background tasks that the user shouldn’t have to wait for to continue using your application. Tasks such as recalculation and background printing are good examples of worker threads. This article details the steps necessary to create a worker thread. Topics include:

<UL type=disc>
	<LI><A HREF="#_core_starting_the_thread">Starting the thread</A><BR><BR></LI>

	<LI><A HREF="#_core_implementing_the_controlling_function">Implementing the controlling function</A><BR><BR></LI>

	<LI><A HREF="#_core_controlling_function_example">Example</A></LI>
</UL>

<P>Creating a worker thread is a relatively simple task. Only two steps are required to get your thread running: implementing the controlling function and starting the thread. It is not necessary to derive a class from <A HREF="JavaScript:hhobj_2.Click()">CWinThread</A>. You can if you need a special version of <B>CWinThread</B>, but it is not required for most simple worker threads. You can use <B>CWinThread</B> without modification.</P>



<H2><A NAME="_core_starting_the_thread"></A>Starting the Thread</H2>

<P>There are two overloaded versions of <B>AfxBeginThread</B>: one for user-interface threads and one for worker threads. To begin execution of your worker thread, call <A HREF="JavaScript:hhobj_3.Click()">AfxBeginThread</A> providing the following information: 

<UL type=disc>
	<LI>The address of the controlling function.<BR><BR></LI>

	<LI>The parameter to be passed to the controlling function.<BR><BR></LI>

	<LI>(Optional) The desired priority of the thread. The default is normal priority. For more information on the available priority levels, see <A HREF="JavaScript:hhobj_4.Click()">::SetThreadPriority</A> in the <I>Win32 Programmer’s Reference</I>.<BR><BR></LI>

	<LI>(Optional) The desired stack size for the thread. The default is the same size stack as the creating thread.<BR><BR></LI>

	<LI>(Optional) <B>CREATE_SUSPENDED</B> if you want the thread to be created in a suspended state. The default is 0, or start the thread normally.<BR><BR></LI>

	<LI>(Optional) The desired security attributes. The default is the same access as the parent thread. For more information on the format of this security information, see <A HREF="JavaScript:hhobj_5.Click()">SECURITY_ATTRIBUTES</A> in the <I>Win32 Programmer’s Reference</I>.</LI>
</UL>

<P><B>AfxBeginThread</B> creates and initializes a <B>CWinThread</B> object for you, starts it, and returns its address so you can refer to it later. Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail.</P>



<H2><A NAME="_core_implementing_the_controlling_function"></A>Implementing the Controlling Function</H2>

<P>The controlling function defines the thread. When this function is entered, the thread starts, and when it exits, the thread terminates. This function should have the following prototype:</P>

<PRE><CODE>UINT MyControllingFunction( LPVOID pParam );
</CODE></PRE>

<P>The parameter is a single 32-bit value. The value the function receives in this parameter is the value that was passed to the constructor when the thread object was created. The controlling function can interpret this value in any manner it chooses. It can be treated as a scalar value, or a pointer to a structure containing multiple parameters, or it can be ignored. If the parameter refers to a structure, the structure can be used not only to pass data from the caller to the thread, but also to pass data back from the thread to the caller. If you use such a structure to pass data back to the caller, the thread will need to notify the caller when the results are ready. For information on communicating from the worker thread to the caller, see the article <A HREF="_core_multithreading.3a_.programming_tips.htm">Multithreading: Programming Tips</A>. </P>

<P>When the function terminates, it should return a <B>UINT</B> value indicating the reason for termination. Typically, this exit code is 0 to indicate success with other values indicating different types of errors. This is purely implementation dependent. Some threads may maintain usage counts of objects, and return the current number of uses of that object. To see how applications can retrieve this value, see the article <A HREF="_core_multithreading.3a_.terminating_threads.htm">Multithreading: Terminating Threads</A>. </P>

<P>There are some restrictions on what you can do in a multithreaded program written with the Microsoft Foundation Class Library. For descriptions of these restrictions and other tips on using threads, see the article <A HREF="_core_multithreading.3a_.programming_tips.htm">Multithreading: Programming Tips</A>. </P>



<H2><A NAME="_core_controlling_function_example"></A>Controlling Function Example</H2>

<P>This example shows how to define a controlling function and use it from another portion of the program. </P>

<PRE><CODE>UINT MyThreadProc( LPVOID pParam )
{
    CMyObject* pObject = (CMyObject*)pParam;

    if (pObject == NULL ||
        !pObject-&gt;IsKindOf(RUNTIME_CLASS(CMyObject)))
    return 1;   // if pObject is not valid

    // do something with 'pObject'

    return 0;   // thread completed successfully
}

// inside a different function in the program
.
.
.
pNewObject = new CMyObject;
AfxBeginThread(MyThreadProc, pNewObject);
.
.
.
</CODE></PRE>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_multithreading.3a_.creating_user.2d.interface_threads.htm">Multithreading: Creating User-Interface Threads</A></LI>
</UL>
</font>
</BODY>
</HTML>

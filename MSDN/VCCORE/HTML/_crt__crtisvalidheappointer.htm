<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_CrtIsValidHeapPointer</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__crtisvalidheappointer"></A><SUP></SUP>_CrtIsValidHeapPointer</H1>

<P>Verifies that a specified pointer is in the local heap (debug version only).</P>

<P><B>int</B> <B>_CrtIsValidHeapPointer(</B> <B>const</B> <B>void</B> *<I>userData </I><B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=35%><B>Routine</B></TD>
<TD class=label width=21%><B>Required Header</B></TD>
<TD class=label width=44%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>_CrtIsValidHeapPointer</B></TD>
<TD width=21%>&lt;crtdbg.h&gt;</TD>
<TD width=44%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_CrtIsValidHeapPointer</B> returns TRUE if the specified pointer is in the local heap; otherwise, the function returns FALSE.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>userData</I></P>

<P class=indent>Pointer to the beginning of an allocated memory block</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_CrtIsValidHeapPointer</B> function is used to ensure that a specific memory address is within the local heap. The “local” heap refers to the heap created and managed by a particular instance of the C run-time library. If a dynamically linked library (DLL) contains a static link to the run-time library, then it has its own instance of the run-time heap, and therefore its own heap, independent of the application’s local heap. When <A HREF="_crt__debug.htm">_DEBUG</A> is not defined, calls to <B>_CrtIsValidHeapPointer</B> are removed during preprocessing.</P>

<P>Because this function returns TRUE or FALSE, it can be passed to one of the <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERT</A> macros to create a simple debugging error handling mechanism. The following example will cause an assertion failure if the specified address is not located within the local heap:</P>

<PRE><CODE>_ASSERTE( _CrtIsValidHeapPointer( userData ) );
</CODE></PRE>

<P>For more information about how <B>_CrtIsValidHeapPointer</B> can be used with other debug functions and macros, see <A HREF="_core_using_macros_for_verification_and_reporting.htm">Using Macros for Verification and Reporting</A>. For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <A HREF="_core_memory_management_and_the_debug_heap.htm">Memory Management and the Debug Heap</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/*
 * ISVALID.C
 * This program allocates a block of memory using _malloc_dbg
 * and then tests the validity of this memory by calling _CrtIsMemoryBlock,
 * _CrtIsValidPointer, and _CrtIsValidHeapPointer.
 */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;malloc.h&gt;
#include &lt;crtdbg.h&gt;

#define  TRUE   1
#define  FALSE  0

void main( void )
{
        char *my_pointer;

        /* 
         * Call _malloc_dbg to include the filename and line number
         * of our allocation request in the header information
         */
        my_pointer = (char *)_malloc_dbg( sizeof(char) * 10, _NORMAL_BLOCK, __FILE__, __LINE__ );

        /* 
         * Ensure that the memory got allocated correctly
         */
        _CrtIsMemoryBlock((const void *)my_pointer, sizeof(char) * 10, NULL, NULL, NULL );

        /* 
         * Test for read/write accessibility
         */
        if (_CrtIsValidPointer((const void *)my_pointer, sizeof(char) * 10, TRUE))
                printf("my_pointer has read and write accessibility.\n");
        else
                printf("my_pointer only has read access.\n");

        /* 
         * Make sure my_pointer is within the local heap
         */
        if (_CrtIsValidHeapPointer((const void *)my_pointer))
                printf("my_pointer is within the local heap.\n");
        else
                printf("my_pointer is not located within the local heap.\n");

        free(my_pointer);
}
</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>my_pointer has read and write accessibility.
my_pointer is within the local heap.

</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>
</font>
</BODY>
</HTML>

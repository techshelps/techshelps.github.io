<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>localtime</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_localtime"></A><SUP></SUP>localtime</H1>

<P>Converts a time value and corrects for the local time zone.</P>

<P><B>struct</B> <B>tm</B> <B>*localtime(</B> <B>const</B> <B>time_t</B> <B>*</B><I>timer</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>localtime</B></TD>
<TD width=27%>&lt;time.h&gt;</TD>
<TD width=57%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>localtime</B> returns a pointer to the structure result. If the value in <I>timer</I> represents a date before midnight, January 1, 1970, <B>localtime</B> returns <B>NULL</B>. The fields of the structure type <A HREF="_crt_standard_types.htm">tm</A> store the following values, each of which is an <B>int</B>:</P>

<P class=dt><B>tm_sec</B></P>

<P class=indent>Seconds after minute (0 – 59)</P>

<P class=dt><B>tm_min</B></P>

<P class=indent>Minutes after hour (0 – 59)</P>

<P class=dt><B>tm_hour</B></P>

<P class=indent>Hours after midnight (0 – 23)</P>

<P class=dt><B>tm_mday</B></P>

<P class=indent>Day of month (1 – 31)</P>

<P class=dt><B>tm_mon</B></P>

<P class=indent>Month (0 – 11; January = 0)</P>

<P class=dt><B>tm_year</B></P>

<P class=indent>Year (current year minus 1900)</P>

<P class=dt><B>tm_wday</B></P>

<P class=indent>Day of week (0 – 6; Sunday = 0)</P>

<P class=dt><B>tm_yday</B></P>

<P class=indent>Day of year (0 – 365; January 1 = 0)</P>

<P class=dt><B>tm_isdst</B></P>

<P class=indent>Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. The C run-time library assumes the United States’s rules for implementing the calculation of Daylight Saving Time (DST). </P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>timer</I></P>

<P class=indent>Pointer to stored time</P>

<P class=label><B>Remarks</B></P>

<P>The <B>localtime</B> function converts a time stored as a <A HREF="_crt_standard_types.htm">time_t</A> value and stores the result in a structure of type <B>tm</B>. The <B>long</B> value <I>timer</I> represents the seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). This value is usually obtained from the <B>time</B> function.</P>

<P><B>gmtime</B>, <B>mktime</B>, and <B>localtime</B> all use a single statically allocated <B>tm</B> structure for the conversion. Each call to one of these routines destroys the result of the previous call.</P>

<P><B>localtime</B> corrects for the local time zone if the user first sets the global environment variable <B>TZ</B>. When <B>TZ</B> is set, three other environment variables (<B>_timezone</B>, <B>_daylight</B>, and <B>_tzname</B>) are automatically set as well. See <A HREF="_crt__tzset.htm">_tzset</A> for a description of these variables. <B>TZ</B> is a Microsoft extension and not part of the ANSI standard definition of <B>localtime</B>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The target environment should try to determine whether daylight saving time is in effect.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* LOCALTIM.C: This program uses time to get the current time 
 * and then uses localtime to convert this time to a structure 
 * representing the local time. The program converts the result 
 * from a 24-hour clock to a 12-hour clock and determines the 
 * proper extension (AM or PM).
 */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

void main( void )
{
        struct tm *newtime;
        char am_pm[] = "AM";
        time_t long_time;

        time( &amp;long_time );                /* Get time as long integer. */
        newtime = localtime( &amp;long_time ); /* Convert to local time. */

        if( newtime-&gt;tm_hour &gt; 12 )        /* Set up extension. */
                strcpy( am_pm, "PM" );
        if( newtime-&gt;tm_hour &gt; 12 )        /* Convert from 24-hour */
                newtime-&gt;tm_hour -= 12;    /*   to 12-hour clock.  */
        if( newtime-&gt;tm_hour == 0 )        /*Set hour to 12 if midnight. */
                newtime-&gt;tm_hour = 12;

        printf( "%.19s %s\n", asctime( newtime ), am_pm );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Tue Mar 23 11:28:17 AM

</CODE></PRE>

<P><A HREF="_crt_time_management.htm">Time Management Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>, <A HREF="_crt_ctime.2c_._wctime.htm">ctime</A>, <A HREF="_crt__ftime.htm">_ftime</A>, <A HREF="_crt_gmtime.htm">gmtime</A>, <A HREF="_crt_time.htm">time</A>, <A HREF="_crt__tzset.htm">_tzset</A></P>
</font>
</BODY>
</HTML>

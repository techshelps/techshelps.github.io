<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Phases of Translation</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_phases_of_translation"></A>Phases of Translation</H1>

<P>C and C++ programs consist of one or more source files, each of which contains some of the text of the program. A source file, together with its include files (files that are included using the <B>#include</B> preprocessor directive) but not including sections of code removed by conditional-compilation directives such as <B>#if</B>, is called a “translation unit.”</P>

<P>Source files can be translated at different times — in fact, it is common to translate only out-of-date files. The translated translation units can be kept either in separate object files or in object-code libraries. These separate translation units are then linked to form an executable program or a dynamic-link library (DLL).</P>

<P>Translation units can communicate using:

<UL type=disc>
	<LI>Calls to functions that have external linkage.<BR><BR></LI>

	<LI>Calls to class member functions that have external linkage.<BR><BR></LI>

	<LI>Direct modification of objects that have external linkage.<BR><BR></LI>

	<LI>Direct modification of files.<BR><BR></LI>

	<LI>Interprocess communication (for Microsoft Windows-based applications only).</LI>
</UL>

<P>The following list describes the phases in which the compiler translates files:</P>

<P class=dt><I>Character mapping</I></P>

<P class=indent>Characters in the source file are mapped to the internal source representation. Trigraph sequences are converted to single-character internal representation in this phase.</P>

<P class=dt><I>Line splicing</I></P>

<P class=indent>All lines ending in a backslash (<B>\</B>) and immediately followed by a newline character are joined with the next line in the source file, forming logical lines from the physical lines. Unless it is empty, a source file must end in a newline character that is not preceded by a backslash.</P>

<P class=dt><I>Tokenization</I></P>

<P class=indent>The source file is broken into preprocessing tokens and white-space characters. Comments in the source file are replaced with one space character each. Newline characters are retained.</P>

<P class=dt><I>Preprocessing</I></P>

<P class=indent>Preprocessing directives are executed and macros are expanded into the source file. The <B>#include</B> statement invokes translation starting with the preceding three translation steps on any included text.</P>

<P class=dt><I>Character-set mapping</I></P>

<P class=indent>All source-character-set members and escape sequences are converted to their equivalents in the execution-character set. For Microsoft C and C++, both the source and the execution character sets are ASCII.</P>

<P class=dt><I>String concatenation</I></P>

<P class=indent>All adjacent string and wide-string literals are concatenated. For example, <CODE>"String " "concatenation"</CODE> becomes <CODE>"String concatenation"</CODE>.</P>

<P class=dt><I>Translation</I></P>

<P class=indent>All tokens are analyzed syntactically and semantically; these tokens are converted into object code.</P>

<P class=dt><I>Linkage</I></P>

<P class=indent>All external references are resolved to create an executable program or a dynamic-link library.</P>

<P>The compiler issues warnings or errors during phases of translation in which it encounters syntax errors.</P>

<P>The linker resolves all external references and creates an executable program or DLL by combining one or more separately processed translation units along with standard libraries.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="creating objects">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="creating objects">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls"></A>ActiveX Controls</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>An ActiveX control is implemented as an in-process server (typically a small object) that can be used in any OLE container. Note that the full functionality of an ActiveX control is available only when used within an OLE container designed to be aware of ActiveX controls. The following products and all their subsequent releases fully support ActiveX controls: Microsoft FoxPro 3.0, Microsoft Access 2.0, Microsoft Visual Basic 4.0, and OLE containers built with MFC in Visual C++ version 4.0. This container type, hereafter called a “control container,” can operate an ActiveX control by using the control’s properties and methods, and receives notifications from the ActiveX control in the form of events. The following figure demonstrates this interaction.</P>

<P class=label><B>Interaction Between an ActiveX Control Container and a Windowed ActiveX Control</B></P>

<P><IMG SRC="d03comm.gif" ALT="" BORDER=0></P>

<P>These articles describe creating ActiveX controls with MFC. For information on creating ActiveX controls with ActiveX Template Library (ATL), see the <A HREF="JavaScript:hhobj_3.Click()">ATL reference</A>.</P>



<H2><A NAME="_core_basic_components_of_an_activex_control"></A>Basic Components of an ActiveX Control</H2>

<P>An ActiveX control uses several programmatic elements to interact efficiently with a control container and with the user. These are class <A HREF="JavaScript:hhobj_4.Click()">COleControl</A>, a set of event-firing functions, and a dispatch map.</P>

<P>Every ActiveX control object you develop inherits a powerful set of features from its MFC base class, <B>COleControl</B>. These features include in-place activation, and Automation logic. <B>COleControl</B> can provide the control object with the same functionality as an MFC window object, plus the ability to fire events. <B>COleControl</B> can also provide <A HREF="_core_providing_windowless_activation.htm">windowless controls</A>, which rely on their container for help with some of the functionality a window provides (mouse capture, keyboard focus, scrolling), but offer much faster display. </P>

<P>Because the control class derives from <B>COleControl</B>, it inherits the capability to send, or “fire,” messages, called events, to the control container when certain conditions are met. These events are used to notify the control container when something important happens in the control. You can send additional information about an event to the control container by attaching parameters to the event. For more information about ActiveX control events, see the article <A HREF="_core_activex_controls.3a_.events.htm">ActiveX Controls: Events</A>.</P>

<P>The final element is a dispatch map, which is used to expose a set of functions (called methods) and attributes (called properties) to the control user. Properties allow the control container or the control user to manipulate the control in various ways. The user can change the appearance of the control, change certain values of the control, or make requests of the control, such as accessing a specific piece of data that the control maintains. This interface is determined by the control developer and is defined using ClassWizard. For more information on ActiveX control methods and properties, see the articles <A HREF="_core_activex_controls.3a_.methods.htm">ActiveX Controls: Methods</A> and <A HREF="_core_activex_controls.3a_.properties.htm">Properties</A>.</P>



<H2><A NAME="_core_interaction_between_controls_with_windows_and_activex_control_containers"></A>Interaction Between Controls with Windows and ActiveX Control Containers</H2>

<P>When a control is used within a control container, it uses two mechanisms to communicate: it exposes properties and methods, and it fires events. The following figure demonstrates how these two mechanisms are implemented.</P>

<P class=label><B>Communication Between an ActiveX Control Container and an ActiveX Control</B></P>

<P><IMG SRC="d03mech.gif" ALT="" BORDER=0></P>

<P>The above figure also illustrates how other OLE interfaces (besides automation and events) are handled by controls.</P>

<P>All of a control’s communication with the container is performed by <B>COleControl</B>. To handle some of the container’s requests, <B>COleControl </B>will call member functions that are implemented in the control class. All methods and some properties are handled in this way. Your control’s class can also initiate communication with the container by calling member functions of <B>COleControl</B>. Events are fired in this manner.</P>



<H2><A NAME="_core_active_and_inactive_states_of_an_activex_control"></A>Active and Inactive States of an ActiveX Control</H2>

<P>A control has two basic states: active and inactive. Traditionally, these states were distinguished by whether or not the control had a window. An active control had a window; an inactive control did not. With the introduction of windowless activation, this distinction is no longer universal, but still applies to many controls.</P>

<P>When a <A HREF="_core_providing_windowless_activation.htm">windowless control</A> goes active, it invokes mouse capture, keyboard focus, scrolling, and other window services from its container. You can also <A HREF="_core_providing_mouse_interaction_while_inactive.htm">provide mouse interaction to inactive controls</A>, as well as create controls that <A HREF="_core_turning_off_the_activate_when_visible_option.htm">wait until activated to create a window</A>. </P>

<P>When a control with a window becomes active, it is able to interact fully with the control container, the user, and Windows. The figure below demonstrates the paths of communication between the ActiveX control, the control container, and the operating system.</P>

<P class=label><B>Windows Message Processing in a Windowed ActiveX Control (When Active)</B></P>

<P><IMG SRC="d03path.gif" ALT="" BORDER=0></P>



<H2><A NAME="_core_serializing_activex_elements"></A>Serialization</H2>

<P>The ability to serialize data, sometimes referred to as persistence, allows the control to write the value of its properties to persistent storage. Controls can then be re-created by reading the object’s state from the storage.</P>

<P>Note that a control is not responsible for obtaining access to the storage medium. Instead, the control’s container is responsible for providing the control with a storage medium to use at the appropriate times. For more information on serialization, see the article <A HREF="_core_activex_controls.3a_.serializing.htm">ActiveX Controls: Serializing</A>. For information on optimizing serialization, see <A HREF="_core_optimizing_persistence_and_initialization.htm">Optimizing persistence and initialization</A> in ActiveX Controls: Optimization.</P>



<H2><A NAME="_core_installing_activex_control_classes_and_tools"></A>Installing ActiveX Control Classes and Tools</H2>

<P>When you install Visual C++, the MFC ActiveX control classes and retail and debug ActiveX control run-time DLLs are automatically installed if ActiveX controls are selected in Setup (they are selected by default). For more information on Test Container, see the article <A HREF="_core_test_container.htm">Test Container</A>.</P>

<P>By default, the ActiveX control classes and tools are installed in the following subdirectories under \Program Files\Microsoft Visual Studio:

<UL type=disc>
	<LI><B>\VC98\Bin</B>
<P class=tl>Contains the Test Container files (TstCon32.exe, as well as its Help files) as well as&nbsp; RegSvr32.exe.</P></LI>

	<LI><B>\Common\msdev98\bin\ide</B>
<P class=tl>Contains the executable for the ActiveX ControlWizard (MFCTLWZ.AWX).</P></LI>

	<LI><B>\Common\msdev98\Help</B>
<P class=tl>Contains the PSS help file (PSS.HLP) and the help file that discusses adding your own .HLP files to the development environment.</P></LI>

	<LI><B>\VC98\MFC\Include</B>
<P class=tl>Contains the include files needed to develop ActiveX controls with MFC</P></LI>

	<LI><B>\VC98\MFC\Src</B>
<P class=tl>Contains the source code for specific ActiveX control classes in MFC</P></LI>

	<LI><B>\VC98\MFC\Lib</B>
<P class=tl>Contains the libraries required to develop ActiveX controls with MFC</P></LI>
</UL>

<P>There are also samples for MFC ActiveX controls. Information about these samples is available online; search for <B>sample</B>.</P>



<H2><A NAME="_core_further_reading_about_activex_controls"></A>Further Reading About ActiveX Controls</H2>

<P>The articles listed below explain the details of developing ActiveX controls using Visual C++ and the MFC ActiveX control classes. The articles are listed in functional categories. </P>

<P><A HREF="_core_frequently_asked_questions_about_activex_controls.htm">Frequently Asked Questions About ActiveX Controls</A></P>

<P><I>Articles about the ActiveX control development process</I>

<UL type=disc>
	<LI><A HREF="_core_create_a_program_with_the_mfc_activex_controlwizard.htm">MFC ActiveX ControlWizard</A><BR><BR></LI>

	<LI><A HREF="_core_the_mfc_activex_controlwizard.3a_.step.2d.by.2d.step.htm">MFC ActiveX ControlWizard: Step-by-Step</A><BR><BR></LI>

	<LI><A HREF="_core_prepare_your_mfc_activex_control_program_for_use.htm">Prepare Your MFC ActiveX Control Program for Use (Register it)</A><BR><BR></LI>

	<LI><A HREF="_core_add_code_to_the_mfc_activex_control_starter_files.htm">Add Code to the MFC ActiveX Control Starter Files</A><BR><BR></LI>

	<LI><A HREF="_core_test_container.htm">Test Container</A></LI>
</UL>

<P><I>Articles about optimizing ActiveX controls</I>

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.optimization.htm">ActiveX Controls: Optimization</A></LI>
</UL>

<P><I>Articles about the events, methods, and properties of ActiveX controls</I>

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.events.htm">ActiveX Controls: Events</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_stock_events_to_an_activex_control.htm">ActiveX Controls: Adding Stock Events to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_custom_events_to_an_activex_control.htm">ActiveX Controls: Adding Custom Events to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.methods.htm">ActiveX Controls: Methods</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_stock_methods_to_an_activex_control.htm">Methods: Adding Stock Methods to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_custom_methods_to_an_activex_control.htm">ActiveX Controls: Adding Custom Methods to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.returning_error_codes_from_a_method.htm">ActiveX Controls: Returning Error Codes From a Method</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_stock_properties.htm">ActiveX Controls: Adding Stock Properties</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_custom_properties.htm">ActiveX Controls: Adding Custom Properties</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.advanced_property_implementation.htm">ActiveX Controls: Advanced Property Implementation</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.accessing_ambient_properties.htm">ActiveX Controls: Accessing Ambient Properties</A></LI>
</UL>

<P><I>Articles about user-interface aspects of ActiveX controls</I>

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.painting_an_activex_control.htm">ActiveX Controls: Painting an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.property_pages.htm">ActiveX Controls: Property Pages</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_another_custom_property_page.htm">ActiveX Controls: Adding Another Custom Property Page</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_context.2d.sensitive_help.htm">ActiveX Controls: Adding Context-Sensitive Help</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.using_stock_property_pages.htm">ActiveX Controls: Using Stock Property Pages</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.using_fonts_in_an_activex_control.htm">ActiveX Controls: Using Fonts in an ActiveX control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.using_pictures_in_an_activex_control.htm">ActiveX Controls: Using Pictures in an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.optimization.htm">ActiveX Controls: Optimization</A></LI>
</UL>

<P><I>Articles about advanced topics of ActiveX controls</I>

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.advanced_topics.htm">ActiveX Controls: Advanced Topics</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.distributing_activex_controls.htm">ActiveX Controls: Distributing ActiveX Controls</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.licensing_an_activex_control.htm">ActiveX Controls: Licensing an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.localizing_an_activex_control.htm">ActiveX Controls: Localizing an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.serializing.htm">ActiveX Controls: Serializing</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.subclassing_a_windows_control.htm">ActiveX Controls: Subclassing a Windows Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.optimization.htm">ActiveX Controls: Optimization</A></LI>
</UL>

<P><I>Other articles regarding ActiveX controls</I>

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.using_data_binding_in_an_activex_control.htm">ActiveX Controls: Using Data Binding in an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_an_activex_control_to_an_existing_cdk_project.htm">ActiveX Controls: Adding an ActiveX Control to an Existing CDK Project</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.vbx_control_migration.htm">ActiveX Controls: VBX Control Migration</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.converting_a_cdk_project_to_a_visual_c.2b2b_.project.htm">ActiveX Controls: Converting a CDK Project to a Visual C++ Project</A></LI>
</UL>

<P><I>Articles about creating ActiveX controls with ActiveX Template Library (ATL)</I>

<UL type=disc>
	<LI><A HREF="JavaScript:hhobj_5.Click()">Creating Objects and Implementing Interfaces in ATL</A></LI>
</UL>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_test_container.htm">Test Container</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODBC Classes and Threads</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Enroll tutorial">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_odbc_classes_and_threads"></A>ODBC Classes and Threads</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_odbc_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_odbc_database_sample_list.htm">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>Beginning with MFC 4.2, there is multithreading support for the MFC ODBC classes. Note, however, that MFC does not provide multithreading support for the DAO classes.</P>

<P>The multithreading support for the ODBC classes has some limitations. Because these classes wrap the ODBC API, they are restricted to the multithreading support of the components on which they are built. For example, there are many ODBC drivers that are not thread-safe; therefore, the MFC ODBC classes will not be thread-safe if you use them with one of these drivers. You should verify whether your particular driver is thread-safe.</P>

<P>When creating a multithreaded application, you should be very careful in using multiple threads to manipulate the same object. For example, using the same <B>CRecordset</B> object in two threads may cause problems when retrieving data; a fetch operation in one thread may overwrite the data fetched in the other thread. A more common use of the MFC ODBC classes in separate threads would be to share an open <B>CDatabase</B> object across threads in order to use the same ODBC connection, with a separate <B>CRecordset</B> object in each thread. Note that you should not pass an unopened <B>CDatabase</B> object to a <B>CRecordset</B> object in another thread.</P>

<P class=indent><B><B>Important&nbsp;&nbsp;&nbsp;</B></B>If you must have multiple threads manipulate the same object, you should implement the appropriate synchronization mechanisms, such as critical sections. Be aware that certain operations, such as <B>Open</B>, are not protected. You should be sure that these operations will not be called concurrently from separate threads.</P>

<P>For more information about creating multithreaded applications, see the article <A HREF="_core_multithreading_topics.htm">Multithreading Topics</A>.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_database_topics_.28.general.29.htm">Database Topics (General)</A></P>
</font>
</BODY>
</HTML>

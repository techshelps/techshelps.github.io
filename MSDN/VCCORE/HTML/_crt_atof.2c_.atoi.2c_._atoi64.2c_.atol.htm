<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>atof, atoi, _atoi64, atol</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol"></A>atof, atoi, _atoi64, atol</H1>

<P>Convert strings to double (<B>atof</B>), integer (<B>atoi, _atoi64</B>), or long (<B>atol</B>).</P>

<P><B>double</B> <B>atof(</B> <B>const</B> <B>char</B> <B>*</B><I>string</I> <B>);</B></P>

<P><B>int</B> <B>atoi(</B> <B>const</B> <B>char</B> <B>*</B><I>string</I> <B>);</B></P>

<P><B>__int64 _atoi64(</B> <B>const char</B> <B>*</B><I>string</I> <B>);</B></P>

<P><B>long</B> <B>atol(</B> <B>const</B> <B>char</B> <B>*</B><I>string</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Routine</B></TD>
<TD class=label width=36%><B>Required Header</B></TD>
<TD class=label width=46%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>atof</B></TD>
<TD width=36%>&lt;math.h&gt; and &lt;stdlib.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>atoi</B></TD>
<TD width=36%>&lt;stdlib.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>_atoi64</B></TD>
<TD width=36%>&lt;stdlib.h&gt;</TD>
<TD width=46%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>atol</B></TD>
<TD width=36%>&lt;stdlib.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each function returns the <B>double</B>, <B>int</B>, <B>__int64</B> or <B>long</B> value produced by interpreting the input characters as a number. The return value is 0 (for <B>atoi</B> and <B>_atoi64</B>), 0L (for <B>atol</B>), or 0.0 (for <B>atof</B>) if the input cannot be converted to a value of that type. The return value is undefined in case of overflow.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>string</I></P>

<P class=indent>String to be converted</P>

<P class=label><B>Remarks</B></P>

<P>These functions convert a character string to a double-precision floating-point value (<B>atof</B>), an integer value (<B>atoi</B> and <B>_atoi64</B>), or a long integer value (<B>atol</B>). The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The output value is affected by the setting of the <B>LC_NUMERIC</B> category in the current locale. For more information on the <B>LC_NUMERIC</B> category, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>. The longest string size that <B>atof</B> can handle is 100 characters. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character may be the null character ('\0') terminating the string.</P>

<P>The <I>string</I> argument to <B>atof</B> has the following form:</P>

<P>[<I>whitespace</I>] [<I>sign</I>] [<I>digits</I>] [<B>.</B><I>digits</I>] [ {<B>d</B> | <B>D</B> | <B>e</B> | <B>E</B> }[<I>sign</I>]<I>digits</I>]</P>

<P>A <I>whitespace</I> consists of space and/or tab characters, which are ignored; <I>sign</I> is either plus (+) or minus ( – ); and <I>digits</I> are one or more decimal digits. If no digits appear before the decimal point, at least one must appear after the decimal point. The decimal digits may be followed by an exponent, which consists of an introductory letter ( <B>d</B>, <B>D</B>, <B>e</B>, or <B>E</B>) and an optionally signed decimal integer.</P>

<P><B>atoi</B>, <B>_atoi64</B>, and <B>atol</B> do not recognize decimal points or exponents. The <I>string</I> argument for these functions has the form:</P>

<P>[<I>whitespace</I>] [<I>sign</I>]<I>digits</I></P>

<P>where <I>whitespace</I>, <I>sign</I>, and <I>digits</I> are exactly as described above for <B>atof</B>.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_ttoi</TD>
<TD width=29%>atoi</TD>
<TD width=26%>atoi</TD>
<TD width=28%>_wtoi</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_ttol</TD>
<TD width=29%>atol</TD>
<TD width=26%>atol</TD>
<TD width=28%>_wtol</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* ATOF.C: This program shows how numbers stored
 * as strings can be converted to numeric values
 * using the atof, atoi, and atol functions.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char *s; double x; int i; long l;

   s = "  -2309.12E-15";    /* Test of atof */
   x = atof( s );
   printf( "atof test: ASCII string: %s\tfloat:  %e\n", s, x );

   s = "7.8912654773d210";  /* Test of atof */
   x = atof( s );
   printf( "atof test: ASCII string: %s\tfloat:  %e\n", s, x );

   s = "  -9885 pigs";      /* Test of atoi */
   i = atoi( s );
   printf( "atoi test: ASCII string: %s\t\tinteger: %d\n", s, i );

   s = "98854 dollars";     /* Test of atol */
   l = atol( s );
   printf( "atol test: ASCII string: %s\t\tlong: %ld\n", s, l );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>atof test: ASCII string:   -2309.12E-15   float:  -2.309120e-012
atof test: ASCII string: 7.8912654773d210   float:  7.891265e+210
atoi test: ASCII string:   -9885 pigs      integer: -9885
atol test: ASCII string: 98854 dollars      long: 98854

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__ecvt.htm">_ecvt</A>, <A HREF="_crt__fcvt.htm">_fcvt</A>, <A HREF="_crt__gcvt.htm">_gcvt</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>, <A HREF="_crt_strtod.2c_.wcstod.htm">strtod</A>, <A HREF="_crt_strtol.2c_.wcstol.htm">wcstol</A>, <A HREF="_crt_strtoul.2c_.wcstoul.htm">strtoul</A></P>
</font>
</BODY>
</HTML>

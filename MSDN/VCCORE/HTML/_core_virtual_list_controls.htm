<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual List Controls</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CListView">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_list_view_updates_in_internet_explorer">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_list_view_updates_in_internet_explorer">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_virtual_list_controls"></A>Virtual List Controls</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_using_clistctrl.htm">Overview</A>  |&nbsp; <A HREF="_core_common_control_sample_list.htm">Sample</A></P>

<P>A virtual list control is a list view control that has the <B>LVS_OWNERDATA</B> style. This style enables the control to support an item count up to a <B>DWORD</B> (the default item count only extends to an <B>int</B>). However, the biggest advantage provided by this style is the ability to only have a subset of data items in memory at any one time. This allows the virtual list view control to lend itself for use with large databases of information, where specific methods of accessing data are already in place.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;In addition to providing virtual list functionality in <B>CListCtrl</B>, MFC also provides the same functionality in the <A HREF="JavaScript:hhobj_2.Click()">CListView</A> class.</P>

<P>There are some compatibility issues you should be aware of when developing virtual list controls. For more information, see <A HREF="JavaScript:hhobj_3.Click()">Compatibility issues: styles, states, and messages</A> in the <I>Platform SDK</I>.</P>

<H3>Handling the LVN_GETDISPINFO Notification</H3>

<P>Virtual list controls maintains very little item information. Except for the item selection and focus information, all item information is managed by the owner of the control. Information is requested by the framework via a <B>LVN_GETDISPINFO</B> notification message. To provide the requested information, the owner of the virtual list control (or the control itself) must handle this notification. This can easily be done using ClassWizard. The resultant code should look something like the following example (where <CODE>CMyListCtrl</CODE> is the virtual list control object and the control is handling the notification):</P>

<PRE><CODE>BEGIN_MESSAGE_MAP(CMyListCtrl, CListCtrl)
   //{{AFX_MSG_MAP(CMyListCtrl)
   ON_NOTIFY_REFLECT(LVN_GETDISPINFO, OnGetdispinfo)
   //}}AFX_MSG_MAP
END_MESSAGE_MAP()
</CODE></PRE>

<P>In the handler for the <B>LVN_GETDISPINFO</B> notification message, you must check to see what type of information is being requested. The possible values are:

<UL type=disc>
	<LI><B>LVIF_TEXT</B>&nbsp;&nbsp;&nbsp;The <I>pszText </I>member must be filled in.<BR><BR></LI>

	<LI><B>LVIF_IMAGE</B>&nbsp;&nbsp;&nbsp;The <I>iImage </I>member must be filled in.<BR><BR></LI>

	<LI><B>LVIF_INDENT</B>&nbsp;&nbsp;&nbsp;The <I>iIndent </I>member must be filled in.<BR><BR></LI>

	<LI><B>LVIF_PARAM</B>&nbsp;&nbsp;&nbsp;The <I>lParam </I>member must be filled in.<BR><BR></LI>

	<LI><B>LVIF_STATE</B>&nbsp;&nbsp;&nbsp;The <I>state </I>member must be filled in.</LI>
</UL>

<P>You should then supply whatever information is requested back to the framework.</P>

<P>The following example (taken from the body of the notification handler for the list control object) demonstrates one possible method by supplying information for the text buffers and image of an item:</P>

<PRE><CODE>LV_DISPINFO* pDispInfo = (LV_DISPINFO*)pNMHDR;
LV_ITEM* pItem= &amp;(pDispInfo)-&gt;item;

int iItemIndx= pItem-&gt;iItem;

if (pItem-&gt;mask &amp; LVIF_TEXT) //valid text buffer?
{
    switch(pItem-&gt;iSubItem){
        case 0: //fill in main text
            lstrcpy(pItem-&gt;pszText, 
                m_Items[iItemIndx].m_strItemText);
            break;
        case 1: //fill in sub item 1 text
            lstrcpy(pItem-&gt;pszText,
                m_Items[iItemIndx].m_strSubItem1Text);
            break;
        case 2: //fill in sub item 2 text
            lstrcpy(pItem-&gt;pszText,
                m_Items[iItemIndx].m_strSubItem2Text);
            break;
    }
}

if pItem-&gt;mask &amp; LVIF_IMAGE) //valid image?
        pItem-&gt;iImage= 
            m_Items[iItemIndx].m_iImageIndex;
</CODE></PRE>

<H3>Caching and Virtual List Controls</H3>

<P>Because this type of list control is intended for large data sets, it is recommended that you cache requested item data to improve retrieval performance. The framework provides a cache-hinting mechanism to assist in optimizing the cache by sending an <B>LVN_ODCACHEHINT</B> notification message. However, you must use a slightly different method to handle this notification. Using ClassWizard, override the <B>OnChildNotify</B> function of your list control object. In the case of this example, <CODE>CMyListCtrl</CODE>.</P>

<P>Inside the body of the handler, check for the <B>LVN_ODCACHEHINT</B> message and, if found, prepare your cache.</P>

<P>The following example (taken from the body of the <CODE>OnChildNotify</CODE> function) performs this check and calls the <CODE>PrepCache</CODE> member function of the <CODE>CMyListCtrl</CODE> class.</P>

<PRE><CODE>NMLVCACHEHINT* pcachehint=NULL;

if (message == WM_NOTIFY)
    {
        NMHDR* phdr = (NMHDR*)lParam;

        switch(phdr-&gt;code)
        {
        case LVN_ODCACHEHINT:
            pcachehint= (NMLVCACHEHINT*) phdr;
// Load the cache with the recommended range.
            PrepCache(pcachehint-&gt;iFrom, pcachehint-&gt;iTo);
            break;
        default:
            return CListCtrl::OnChildNotify(message, wParam, lParam, pLResult);
        }
        return FALSE;
    }
    else
        return CListCtrl::OnChildNotify(message, wParam, lParam, pLResult);
</CODE></PRE>

<P>Notice that the notification is passed on to the base class (<B>CListCtrl</B>) if the message type is not <B>LVN_ODCACHEHINT</B>. For more information on preparing and maintaining a cache, see <A HREF="JavaScript:hhobj_4.Click()">Cache Management</A> in the <I>Platform SDK</I>.</P>

<H3>Finding Specific Items</H3>

<P>The <B>LVN_ODFINDITEM</B> notification message is sent by the virtual list control when a particular list control item needs to be found. The notification message is sent when the list view control receives quick key access or when it receives an <B>LVM_FINDITEM</B> message. Search information is sent in the form of an <B>LVFINDINFO</B> structure, which is a member of the <B>NMLVFINDITEM</B> structure. Handle this message by overriding the <B>OnChildNotify</B> function of your list control object and inside the body of the handler, check for the <B>LVN_ODFINDITEM</B> message. If found, perform the appropriate action.</P>

<P>You should be prepared to search for an item that matches the information given by the list view control. You should return the index of the item if successful, or -1 if no matching item is found.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_control_topics.htm#_core_windows_common_controls_and_mfc_classes">Windows Common Controls and MFC Classes</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFC Debugging Support</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mfc_debugging_support"></A>MFC Debugging Support</H1>

<P>The Microsoft Foundation Class Library (MFC) and Visual C++ help you debug your applications in a variety of ways. This topic presents a few useful general debugging techniques, followed by more detailed debugging topics.</P>

<P>The Microsoft Foundation Class Library (MFC) contains many diagnostic features to help debug your program during development, such as the <B>Dump</B> and <B>AssertValid</B> member functions, the <B>TRACE</B> and <B>ASSERT</B> macros, the <B>AfxEnableMemoryTracking</B> and <B>AfxDebugBreak</B> global functions, and the <B>CMemoryState</B> class to detect memory leaks. </P>

<P>Because diagnostics slow down and interrupt your application, they are not suitable for a release version. When you are developing your program, you typically build a <B>Win32 Debug</B> version of your program and link with the debug version of MFC. Once the program is completed and debugged, you build a <B>Win32 Release</B> version and link with the release version of MFC. You can easily switch between <B>Win32 Debug</B> and <B>Win32 Release</B> by setting the <B>Select Active Configuration</B> droplist.</P>

<P>Following are several techniques for debugging your MFC application:

<UL type=disc>
	<LI>Before you start a debugging session (or as soon as possible after you start), arrange the debugger and the program you are debugging on the screen so that neither overlaps the other. Otherwise, there may be situations in which the debugger completely obscures the program being debugged.<BR><BR></LI>

	<LI>Turn on <B>Multiple application debugging</B> from the TRACER application when you are debugging an application and one or more DLLs. The <B>Multiple application debugging</B> option prefixes each trace statement with the name of the application that generated it. TRACER can be found in the BIN directory, and an icon for it is installed in the Microsoft Visual C++ program group with the name “MFC Tracer.”<BR><BR></LI>

	<LI>If you have trouble setting breakpoints with the debugger, you can hard-code them into your application with the following statement:
<PRE><CODE>DebugBreak( );
</CODE></PRE>

<P class=tl>which is platform-independent. For MFC applications, you can also use:</P>
<PRE><CODE>AfxDebugBreak( );
</CODE></PRE>

<P class=tl>This does an </P>
<PRE><CODE>_asm int 3
</CODE></PRE>

<P class=tl>in Intel versions and calls <B>DebugBreak</B> on other platforms. The advantage (on Intel) is that you break in source code rather than in kernel code.</P>
<P class=tl>Be sure to remove these statements when building release-mode applications or include them under <B>#ifdef _DEBUG</B>.</P></LI>

	<LI>If you run into limitations with the Visual C++ debugger, you can always use <B>TRACE</B> statements and the TRACER application. Activating the <B>Multiple application debugging</B> option in TRACER can be very useful in tracking the order of events.</LI>
</UL>

<P>For additional information specific to MFC debugging, see the following topics:

<UL type=disc>
	<LI><A HREF="_core_diagnostic_features.htm">Diagnostics</A> <BR><BR></LI>

	<LI><A HREF="_core_debugging_activex_applications_with_mfc.htm">Debugging ActiveX Applications</A></LI>
</UL>
</font>
</BODY>
</HTML>

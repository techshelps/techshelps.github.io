<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Debug Version Versus the Base Version</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_the_debug_version_versus_the_base_version"></A>Using the Debug Version Versus the Base Version</H1>

<P>The run-time library now contains special debug versions of the heap allocation functions that use the same names as the base versions and add the <B>_dbg</B> ending. This topic describes the differences in behavior between the debug version and the base version in a debug build of an application. The information in this topic is presented using <B>malloc</B> and <B>_malloc_dbg</B> as the example, but is applicable to all of the heap allocation functions.</P>

<P>Applications that contain existing calls to <B>malloc</B> do not need to convert their calls to <B>_malloc_dbg</B> to obtain the debugging features. When <A HREF="_crt__debug.htm">_DEBUG</A> is defined, all calls to <B>malloc</B> are resolved to <B>_malloc_dbg</B>. However, explicitly calling <B>_malloc_dbg</B> allows the application to perform additional debugging tasks: it can separately track <B>_CLIENT_BLOCK</B> type allocations, and it can include the source file and line number where the allocation request occurred in the bookkeeping information stored in the debug header.</P>

<P>Because the base versions of the allocation functions are implemented as wrappers, the source file name and line number of each heap allocation request are not available by explicitly calling the base version. Applications that do not want to convert their <B>malloc</B> calls to <B>_malloc_dbg</B> can obtain the source file information by defining <A HREF="_crt__crtdbg_map_alloc.htm">_CRTDBG_MAP_ALLOC</A>. Defining _CRTDBG_MAP_ALLOC causes the preprocessor to directly map all calls to <B>malloc</B> to <B>_malloc_dbg</B>, thereby providing the additional information. To track particular types of allocations separately in client blocks, <B>_malloc_dbg</B> must be called directly and the <I>blockType</I> parameter must be set to <B>_CLIENT_BLOCK</B>. </P>

<P>When <B>_DEBUG</B> is <I>not</I> defined, calls to <B>malloc</B> are not disturbed, calls to <B>_malloc_dbg</B> are resolved to <B>malloc</B>, the definition of <A HREF="_crt__crtdbg_map_alloc.htm">_CRTDBG_MAP_ALLOC</A> is ignored, and source file information pertaining to the allocation request is not provided. Because <B>malloc</B> does not have a block type parameter, requests for <B>_CLIENT_BLOCK</B> types are treated as standard allocations.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Handling Mechanisms</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_exception_handling_mechanisms"></A><SUP></SUP>Exception Handling Mechanisms</H1>

<P>Microsoft C/C++ provides two different forms of support for handling anomalous situations, known as “exceptions,” which may occur during the execution of your program. These two forms are C++ exception handling and structured exception handling .</P>

<P class=label><B>C++ Exception Handling</B></P>

<P>C++ exception handling uses three statements added to the C++ language. These are the <A HREF="_langref_try.2c_.catch.2c_.and_throw_statements.htm">try, catch, and throw</A> statements. With C++ exception handling, your program can communicate unexpected events to a higher execution context that is better able to recover from such abnormal events. These exceptions are handled by code that is outside the normal flow of control. The Microsoft C++ compiler implements the C++ exception handling model based on the ISO WG21/ANSI X3J16 working papers towards the evolving standard for C++.</P>

<P class=label><B>Structured Exception Handling</B></P>

<P>Structured exception handling is an extension to Microsoft C/C++ that can be used in either C or C++. Structured exception handling uses two constructs: <A HREF="_langref_try_except_statement.htm">try-except</A>, also known as exception handling, and <A HREF="_langref_try_finally_statement.htm">try-finally</A>, also known as termination handling. The <B>try-except</B> statement enables applications to gain control of a program when events that normally terminate execution occur. The <B>try-finally</B> statement enables applications to guarantee execution of cleanup code when execution of a block of code is interrupted.</P>

<P class=indent><B>Note</B>&nbsp;&nbsp;&nbsp;Structured exception handling works with Win32 for both C and C++ source files. However, it is not specifically designed for C++. You can ensure that your code is more portable by using C++ exception handling. Also, C++ exception handling is more flexible, in that it can handle exceptions of any type. For C++ programs, it is recommended that you use the new C++ exception-handling mechanism (<A HREF="_langref_try.2c_.catch.2c_.and_throw_statements.htm">try, catch, and throw</A> statements).</P>

<P>For more general discussion, see <A HREF="_core_exception_handling.3a_.overview.htm">Exception Handling: Overview</A>. </P>
</font>
</BODY>
</HTML>

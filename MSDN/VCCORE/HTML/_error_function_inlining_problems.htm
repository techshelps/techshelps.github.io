<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Inlining Problems</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_error_function_inlining_problems"></A>Function Inlining Problems</H1>

<P>If you are using function inlining make sure that you 

<UL type=disc>
	<LI>Have the inline functions implemented in the header file you are going to include in other files<BR><BR></LI>

	<LI>Have inlining turned ON in the header file.</LI>
</UL>

<P>If you are using the <B>#pragma inline_depth</B> compiler directive, make sure you have a value of 2 or greater set. A value of zero will turn off inlining. Also make sure you are using the /Ob1 or /Ob2 compiler options. These are available in the Project Settings dialog box. (See the "Optimizations" category on the C/C++ tab.)</P>

<P>Mixing inline and non-inline compile options on different modules can sometimes cause problems. If a C++ library is created with function inlining turned on (<A HREF="_core_.2f.ob.htm">/Ob1</A> or <A HREF="_core_.2f.ob.htm">/Ob2</A>) but the corresponding header file describing the functions has inlining turned off (no option), you will get error LNK2001. The functions do not get inlined into the code from the header file, but since they are not in the library file there is no address to resolve the reference. </P>

<P>Similarly, a project that uses function inlining yet defines the functions in a .CPP file rather than in the header file will also get error LNK2001. The header file is included everywhere deemed appropriate, but the functions are only inlined when the .CPP file passes through the compiler. Therefore the linker sees the functions as unresolved externals when used in other modules. </P>

<P>TESTCLS.H</P>

<PRE><CODE>class testcls {
 public:
  void PublicStatMemFunc1(void); 
};
</CODE></PRE>

<P>CLASFUNC.CPP</P>

<PRE><CODE>#include "testcls.h"

inline void testcls::PublicStatMemFunc1(void)
{
}
</CODE></PRE>

<P>TEST2.CPP</P>

<PRE><CODE>#include "testcls.h"

void main(void)
{
 testcls testclsObject;
 testclsObject.PublicStatMemFunc1( );   //This needed for compiler to add entry to table of unresolved symbols
                            //Will cause an LNK2001 because this module cannot
 }                         //  see the implementation of PublicStatMemFunc1( );</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Regular DLLs Statically Linked to MFC</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_sample_mfc_DLLTRACE">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFCNOTES_TN011">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_regular_dlls_statically_linked_to_mfc"></A>Regular DLLs Statically Linked to MFC</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_dlls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dll_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_dlls.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dll_topics.htm">Details</A>  |&nbsp; <A HREF="_core_dll_sample_programs.htm">Sample</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Static linking to MFC is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>A regular DLL, statically linked to MFC is a DLL that uses MFC internally, and the exported functions in the DLL can be called by either MFC or non-MFC executables. </P>

<P>A regular DLL, statically linked to MFC has the following features:

<UL type=disc>
	<LI>The client executable can be written in any language that supports the use of DLLs (C, C++, Pascal, Visual Basic, etc.); it does not have to be an MFC application.<BR><BR></LI>

	<LI>The DLL can link to the same MFC static link libraries used by applications. There is no longer a separate version of the static link libraries for DLLs. <BR><BR></LI>

	<LI>Before version 4.0 of MFC, USRDLLs provided the same type of functionality as regular DLLs statically linked to MFC. As of Visual C++ version 4.0, the term "USRDLL" is obsolete. </LI>
</UL>

<P>A regular DLL, statically linked to MFC has the following requirements:

<UL type=disc>
	<LI>This type of DLL must instantiate a class derived from <B>CWinApp</B>.<BR><BR></LI>

	<LI>This type of DLL uses the <B>DllMain</B> provided by MFC. Place all DLL-specific initialization code in the <B>InitInstance</B> member function and termination code in <B>ExitInstance</B> as in a normal MFC application. <BR><BR></LI>

	<LI>Even though the term "USRDLL" is obsolete, you must still define "<B>_USRDLL</B>" on the compiler command line. This definition determines which declarations, etc., will be pulled in from the MFC header files. </LI>
</UL>

<P>Regular DLLs must have a <B>CWinApp</B>-derived class and a single object of that application class, as does an MFC application. However, the <B>CWinApp</B> object of the DLL does not have a main message pump, as does the <B>CWinApp</B> object of an application. </P>

<P>The following MFC capabilities are not applicable in DLLs, either because of technical limitations or because those services are usually provided by the application. 

<UL type=disc>
	<LI><B>CWinApp::Enable3dControls</B><BR><BR></LI>

	<LI><B>CWinApp::SetDialogBkColor</B> (color is ignored for message boxes)</LI>
</UL>

<P>Note that the <B>CWinApp::Run</B> mechanism does not apply to a DLL, since the application owns the main message pump. If the DLL opens modeless dialogs or has a main frame window of its own, the application's main message pump must call a routine exported by the DLL which in turn calls the <B>CWinApp::PreTranslateMessage</B> member function of the DLL's application object. </P>

<P>For an example of this function, see the <A HREF="JavaScript:hhobj_3.Click()">DLLTRACE</A> sample. </P>

<P>Symbols are usually exported from a regular DLL using the standard C interface. The declaration of a function exported from a regular DLL would look something like this:</P>

<PRE><CODE>extern "C" __declspec(dllexport) MyExportedFunction( );
</CODE></PRE>

<P>All memory allocations within a regular DLL should stay within the DLL; the DLL should not pass to or receive from the calling executable any of the following:

<UL type=disc>
	<LI>pointers to MFC objects<BR><BR></LI>

	<LI>pointers to memory allocated by MFC</LI>
</UL>

<P>If you need to do any of the above, or if you need to pass MFC-derived objects between the calling executable and the DLL, then you must build an extension DLL.</P>

<P>It is safe to pass pointers to memory that were allocated by the C run-time libraries between an application and a DLL only if you make a copy of the data. You must not delete or resize these pointers or use them without making a copy of the memory.</P>

<P>A DLL that is statically linked to MFC cannot also dynamically link to the shared MFC DLLs. A DLL that is statically linked to MFC is dynamically bound to an application just like any other DLL; applications link to it just like any other DLL. </P>

<P>The standard MFC static link libraries are named according to the convention described in the topic <A HREF="_core_naming_conventions_for_mfc_dlls.htm">Naming conventions for MFC DLLs</A>. However, with MFC version 3.0 and later, it is no longer necessary to manually specify to the linker the version of the MFC library you want linked in. Instead, the MFC header files automatically determine the correct version of the MFC library to link in based on preprocessor defines, such as <B>_DEBUG</B> or <B>_UNICODE</B>. The MFC header files add /DEFAULTLIB directives instructing the linker to link in a specific version of the MFC library. </P>

<H3>What do you want to do?</H3>

<UL type=disc>
	<LI><A HREF="_core_initialize_regular_dlls.htm">Initialize regular DLLs</A></LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="JavaScript:hhobj_4.Click()">Using MFC as Part of a DLL</A><BR><BR></LI>

	<LI><A HREF="_core_using_extension_dll.2c.database.2f.ole.2f.sockets_in_regular_dll.htm">Using extension DLL,Database/OLE/Sockets in regular DLL</A><BR><BR></LI>

	<LI><A HREF="_core_build_settings_for_an_mfc_dll.htm">The build settings generated by AppWizard for MFC DLLs</A><BR><BR></LI>

	<LI><A HREF="_core_regular_dlls_dynamically_linked_to_mfc.htm">Regular DLLs dynamically linked to MFC</A><BR><BR></LI>

	<LI><A HREF="_core_extension_dlls.3a_.overview.htm">Extension DLLs</A></LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Write Portable Code for UNIX</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_write_portable_code_for_unix"></A>Write Portable Code for UNIX</H1>

<P>If you have the UNIX version of MFC on your UNIX system, your Visual C++ applications should port with little difficulty. </P>

<P>If you do not have MFC on your UNIX system, you can still port your Visual C++ applications to UNIX using the Standard C++ libraries and the Visual C++ compiler libraries. Many UNIX functions, such as <B>open</B>, <B>fopen</B>, <B>read</B>, and <B>write</B>, are available in the Visual C++ run-time library. Also, there is a one-to-one mapping of these UNIX APIs to Win32 APIs: <B>open</B> to <B>CreateFile</B>, <B>read</B> to <B>ReadFile</B>, <B>write</B> to <B>WriteFile</B>, <B>ioctl</B> to <B>DeviceIOControl</B>, <B>close</B> to <B>CloseFile</B>, and so on. Many of the traditional system calls relied on by UNIX applications are available as Win32 APIs. See <A HREF="_core_port_from_unix_to_win32.htm">Port from UNIX to Win32</A> for a discussion of compatibility issues, such as multithreading.</P>

<P>You need to consider UNIX when writing your C/C++ code; for example, UNIX filenames are case-sensitive. See <A HREF="_crt_unix.htm">UNIX</A> for compatibility guidelines when porting Visual C++ to UNIX. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>getenv, _wgetenv</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_getenv.2c_._wgetenv"></A><SUP></SUP>getenv, _wgetenv</H1>

<P>Get a value from the current environment.</P>

<P><B>char</B> <B>*getenv(</B> <B>const</B> <B>char</B> <B>*</B><I>varname</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*_wgetenv(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>varname</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>getenv</B></TD>
<TD width=27%>&lt;stdlib.h&gt;</TD>
<TD width=57%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wgetenv</B></TD>
<TD width=27%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=57%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the environment table entry containing <I>varname</I>. It is not safe to modify the value of the environment variable using the returned pointer. Use the <B>_putenv</B> function to modify the value of an environment variable. The return value is <B>NULL</B> if <I>varname</I> is not found in the environment table.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>varname</I></P>

<P class=indent>Environment variable name</P>

<P class=label><B>Remarks</B></P>

<P>The <B>getenv</B> function searches the list of environment variables for <I>varname</I>. <B>getenv</B> is not case sensitive in Windows NT and Windows 95. <B>getenv</B> and <B>_putenv</B> use the copy of the environment pointed to by the global variable <B>_environ</B> to access the environment. <B>getenv</B> operates only on the data structures accessible to the run-time library and not on the environment “segment” created for the process by the operating system. Therefore, programs that use the <I>envp</I> argument to <A HREF="_langref_main.2c_.wmain.htm">main</A> or <A HREF="_langref_main.2c_.wmain.htm">wmain</A> may retrieve invalid information. </P>

<P><B>_wgetenv</B> is a wide-character version of <B>getenv</B>; the argument and return value of <B>_wgetenv</B> are wide-character strings. The <B>_wenviron</B> global variable is a wide-character version of <B>_environ</B>.</P>

<P>In an MBCS program (for example, in an SBCS ASCII program), <B>_wenviron</B> is initially <B>NULL</B> because the environment is composed of multibyte-character strings. Then, on the first call to <B>_wputenv</B>, or on the first call to <B>_wgetenv</B> if an (MBCS) environment already exists, a corresponding wide-character string environment is created and is then pointed to by <B>_wenviron</B>.</P>

<P>Similarly in a Unicode (<B>_wmain</B>) program, <B>_environ</B> is initially <B>NULL</B> because the environment is composed of wide-character strings. Then, on the first call to <B>_putenv</B>, or on the first call to <B>getenv</B> if a (Unicode) environment already exists, a corresponding MBCS environment is created and is then pointed to by <B>_environ</B>.</P>

<P>When two copies of the environment (MBCS and Unicode) exist simultaneously in a program, the run-time system must maintain both copies, resulting in slower execution time. For example, whenever you call <B>_putenv</B>, a call to <B>_wputenv</B> is also executed automatically, so that the two environment strings correspond.</P>

<P class=indent><B><B>Caution</B></B>&nbsp;&nbsp;&nbsp;In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, these two environment versions may not correspond exactly. This is because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique. For more information, see <A HREF="_crt__environ.2c_._wenviron.htm">_environ, _wenviron</A>.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tgetenv</TD>
<TD width=29%>getenv</TD>
<TD width=26%>getenv</TD>
<TD width=28%>_wgetenv</TD>
</TR>
</TABLE><BR>

<P>To check or change the value of the <B>TZ</B> environment variable, use <B>getenv</B>, <B>_putenv</B> and <B>_tzset</B> as necessary. For more information about <B>TZ</B>, see <A HREF="_crt__tzset.htm">_tzset</A> and see <A HREF="_crt__daylight.2c_._timezone.2c_.and__tzname.htm">_daylight, timezone, and _tzname</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* GETENV.C: This program uses getenv to retrieve
 * the LIB environment variable and then uses
 * _putenv to change it to a new value.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char *libvar;

   /* Get the value of the LIB environment variable. */
   libvar = getenv( "LIB" );

   if( libvar != NULL )
      printf( "Original LIB variable is: %s\n", libvar );

   /* Attempt to change path. Note that this only affects the environment
    * variable of the current process. The command processor's environment
    * is not changed.
    */
   _putenv( "LIB=c:\\mylib;c:\\yourlib" );

   /* Get new value. */
   libvar = getenv( "LIB" );

   if( libvar != NULL )
      printf( "New LIB variable is: %s\n", libvar );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Original LIB variable is: C:\progra~1\devstu~1\vc\lib
New LIB variable is: c:\mylib;c:\yourlib
 

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__putenv.2c_._wputenv.htm">_putenv</A></P>
</font>
</BODY>
</HTML>

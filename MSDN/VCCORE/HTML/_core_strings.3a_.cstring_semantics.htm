<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Strings: CString Semantics</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CString">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_strings.3a_.cstring_semantics"></A>Strings: CString Semantics</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_strings.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_string_handling_tasks.htm">How Do I</A></P>

<P>Even though <A HREF="JavaScript:hhobj_2.Click()">CString</A> objects are dynamically growable objects, they act like built-in primitive types and simple classes. Each <B>CString</B> object represents a unique value. <B>CString</B> objects should be thought of as the actual strings rather than as pointers to strings.</P>

<P>The most obvious consequence of using <B>CString</B> objects as values is that the string contents are copied when you assign one <B>CString</B> to another. Thus, even though two <B>CString</B> objects may represent the same sequence of characters, they do not share those characters. Each <B>CString</B> has its own copy of the character data. When you modify one <B>CString</B> object, the copied <B>CString</B> object is not modified, as shown by the following example:</P>

<PRE><CODE>CString s1, s2;
s1 = s2 = "hi there";

if( s1 == s2 )            // TRUE - they are equal
    ...

s1.MakeUpper();        // Does not modify s2
if( s2[0] == 'h' )        // TRUE - s2 is still "hi there"
</CODE></PRE>

<P>Notice in the example that the two <B>CString</B> objects are considered “equal” because they represent the same character string. The <B>CString</B> class overloads the equality operator (<B>==</B>) to compare two <B>CString</B> objects based on their value (contents) rather than their identity (address).</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_fcvt</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__fcvt"></A><SUP></SUP>_fcvt</H1>

<P>Converts a floating-point number to a string.</P>

<P><B>char</B> <B>*_fcvt(</B> <B>double</B> <I>value</I><B>,</B> <B>int</B> <I>count</I><B>,</B> <B>int</B> <B>*</B><I>dec</I><B>,</B> <B>int</B> <B>*</B><I>sign</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_fcvt</B></TD>
<TD width=27%>&lt;stdlib.h&gt;</TD>
<TD width=57%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_fcvt</B> returns a pointer to the string of digits. There is no error return.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>value</I></P>

<P class=indent>Number to be converted</P>

<P class=dt><I>count</I></P>

<P class=indent>Number of digits after decimal point</P>

<P class=dt><I>dec</I></P>

<P class=indent>&nbsp;&nbsp;&nbsp;Pointer to stored decimal-point position</P>

<P class=dt><I>sign</I></P>

<P class=indent>&nbsp;&nbsp;Pointer to stored sign indicator</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_fcvt</B> function converts a floating-point number to a null-terminated character string. The <I>value</I> parameter is the floating-point number to be converted. <B>_fcvt</B> stores the digits of <I>value</I> as a string and appends a null character ('\0'). The <I>count</I> parameter specifies the number of digits to be stored after the decimal point. Excess digits are rounded off to <I>count</I> places. If there are fewer than <I>count</I> digits of precision, the string is padded with zeros.</P>

<P>Only digits are stored in the string. The position of the decimal point and the sign of <I>value</I> can be obtained from <I>dec</I> and <I>sign</I> after the call. The <I>dec</I> parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string. A zero or negative integer value indicates that the decimal point lies to the left of the first digit. The parameter <I>sign</I> points to an integer indicating the sign of <I>value</I>. The integer is set to 0 if <I>value</I> is positive and is set to a nonzero number if <I>value</I> is negative.</P>

<P><B>_ecvt</B> and <B>_fcvt</B> use a single statically allocated buffer for the conversion. Each call to one of these routines destroys the results of the previous call.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FCVT.C: This program converts the constant
 * 3.1415926535 to a string and sets the pointer
 * *buffer to point to that string.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   int  decimal, sign;
   char *buffer;
   double source = 3.1415926535;

   buffer = _fcvt( source, 7, &amp;decimal, &amp;sign );
   printf( "source: %2.10f   buffer: '%s'   decimal: %d   sign: %d\n",
            source, buffer, decimal, sign );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>source: 3.1415926535   buffer: '31415927'   decimal: 1   sign: 0
 

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol.htm">atof</A>, <A HREF="_crt__ecvt.htm">_ecvt</A>, <A HREF="_crt__gcvt.htm">_gcvt</A></P>
</font>
</BODY>
</HTML>

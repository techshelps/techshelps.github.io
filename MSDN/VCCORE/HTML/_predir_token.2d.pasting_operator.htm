<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Token-Pasting Operator (##)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_token.2d.pasting_operator"></A><SUP></SUP>Token-Pasting Operator (##)</H1>

<P>The double-number-sign or “token-pasting” operator (<B>##</B>), which is sometimes called the “merging” operator, is used in both object-like and function-like macros. It permits separate tokens to be joined into a single token and therefore cannot be the first or last token in the macro definition.</P>

<P>If a formal parameter in a macro definition is preceded or followed by the token-pasting operator, the formal parameter is immediately replaced by the unexpanded actual argument. Macro expansion is not performed on the argument prior to replacement. </P>

<P>Then, each occurrence of the token-pasting operator in <I>token-string</I> is removed, and the tokens preceding and following it are concatenated. The resulting token must be a valid token. If it is, the token is scanned for possible replacement if it represents a macro name. The identifier represents the name by which the concatenated tokens will be known in the program before replacement. Each token represents a token defined elsewhere, either within the program or on the compiler command line. White space preceding or following the operator is optional.</P>

<P>This example illustrates use of both the stringizing and token-pasting operators in specifying program output:</P>

<PRE><CODE>#define paster( n ) printf( "token" #n " = %d", token##n )
int token9 = 9;
</CODE></PRE>

<P>If a macro is called with a numeric argument like</P>

<PRE><CODE>paster( 9 );
</CODE></PRE>

<P>the macro yields</P>

<PRE><CODE>printf( "token" "9" " = %d", token9 );
</CODE></PRE>

<P>which becomes</P>

<PRE><CODE>printf( "token9 = %d", token9 );
</CODE></PRE>
</font>
</BODY>
</HTML>

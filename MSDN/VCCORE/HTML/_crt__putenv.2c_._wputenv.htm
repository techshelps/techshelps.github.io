<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_putenv, _wputenv</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__putenv.2c_._wputenv"></A><SUP></SUP>_putenv, _wputenv</H1>

<P>Creates new environment variables; modifies or removes existing ones.</P>

<P><B>int</B> <B>_putenv(</B> <B>const</B> <B>char</B> <B>*</B><I>envstring</I> <B>);</B></P>

<P><B>int</B> <B>_wputenv(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>envstring</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=38%><B>Required Header</B></TD>
<TD class=label width=45%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_putenv</B></TD>
<TD width=38%>&lt;stdlib.h&gt;</TD>
<TD width=45%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wputenv</B></TD>
<TD width=38%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=45%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_putenv</B> and <B>_wputenv</B> return 0 if successful, or –1 in the case of an error.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>envstring</I></P>

<P class=indent>Environment-string definition</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_putenv</B> function adds new environment variables or modifies the values of existing environment variables. Environment variables define the environment in which a process executes (for example, the default search path for libraries to be linked with a program). <B>_wputenv</B> is a wide-character version of <B>_putenv</B>; the <I>envstring</I> argument to <B>_wputenv</B> is a wide-character string.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tputenv</TD>
<TD width=29%>_putenv</TD>
<TD width=26%>_putenv</TD>
<TD width=28%>_wputenv</TD>
</TR>
</TABLE><BR>

<P>The <I>envstring</I> argument must be a pointer to a string of the form <I>varname=string</I>, where <I>varname</I> is the name of the environment variable to be added or modified and <I>string</I> is the variable’s value. If <I>varname</I> is already part of the environment, its value is replaced by <I>string</I>; otherwise, the new <I>varname</I> variable and its <I>string</I> value are added to the environment. You can remove a variable from the environment by specifying an empty <I>string</I> — in other words, by specifying only <I>varname=</I>.</P>

<P><B>_putenv</B> and <B>_wputenv</B> affect only the environment that is local to the current process; you cannot use them to modify the command-level environment. That is, these functions operate only on data structures accessible to the run-time library and not on the environment “segment” created for a process by the operating system. When the current process terminates, the environment reverts to the level of the calling process (in most cases, the operating-system level). However, the modified environment can be passed to any new processes created by <B>_spawn</B>, <B>_exec</B>, or <B>system</B>, and these new processes get any new items added by <B>_putenv</B> and <B>_wputenv</B>. </P>

<P>With regard to environment entries, observe the following cautions:

<UL type=disc>
	<LI>Do not change an environment entry directly; instead, use <B>_putenv</B> or <B>_wputenv</B> to change it. To modify the return value of <B>_putenv</B> or <B>_wputenv</B> without affecting the environment table, use <B>_strdup</B> or <B>strcpy</B> to make a copy of the string.<BR><BR></LI>

	<LI>Never free a pointer to an environment entry, because the environment variable will then point to freed space. A similar problem can occur if you pass <B>_putenv</B> or <B>_wputenv</B> a pointer to a local variable, then exit the function in which the variable is declared.</LI>
</UL>

<P><B>getenv</B> and <B>_putenv</B> use the global variable <B>_environ</B> to access the environment table; <B>_wgetenv</B> and <B>_wputenv</B> use <B>_wenviron</B>. <B>_putenv</B> and <B>_wputenv</B> may change the value of _<B>environ</B> and <B>_wenviron</B>, thus invalidating the <I>envp</I> argument to <B>main</B> and the<I>_wenvp</I> argument to <B>wmain</B>. Therefore, it is safer to use <B>_environ</B> or <B>_wenviron</B> to access the environment information. For more information about the relation of <B>_putenv</B> and <B>_wputenv</B> to global variables, see <A HREF="_crt__environ.2c_._wenviron.htm">_environ, _wenviron</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* GETENV.C: This program uses getenv to retrieve
 * the LIB environment variable and then uses
 * _putenv to change it to a new value.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char *libvar;

   /* Get the value of the LIB environment variable. */
   libvar = getenv( "LIB" );

   if( libvar != NULL )
      printf( "Original LIB variable is: %s\n", libvar );

   /* Attempt to change path. Note that this only affects the environment
    * variable of the current process. The command processor's environment
    * is not changed.
    */
   _putenv( "LIB=c:\\mylib;c:\\yourlib" );

   /* Get new value. */
   libvar = getenv( "LIB" );

   if( libvar != NULL )
      printf( "New LIB variable is: %s\n", libvar );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Original LIB variable is: C:\progra~1\devstu~1\vc\lib
New LIB variable is: c:\mylib;c:\yourlib
 

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_getenv.2c_._wgetenv.htm">getenv</A>, <A HREF="_crt__searchenv.2c_._wsearchenv.htm">_searchenv</A></P>
</font>
</BODY>
</HTML>

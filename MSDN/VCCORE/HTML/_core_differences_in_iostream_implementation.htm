<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Differences in iostream Implementation</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_differences_in_iostream_implementation"></A>Differences in iostream Implementation</H1>

<P>The main difference between the Standard C++ library and previous run-time libraries is in the iostream library. Details of the iostream implementation have changed, and it may be necessary to rewrite parts of your code that use iostream if you want to link with the Standard C++ library. </P>

<P>You will have to remove any old iostream headers (<CODE>fstream.h</CODE>, <CODE>iomanip.h</CODE>, <CODE>ios.h</CODE>, <CODE>iostream.h</CODE>, <CODE>istream.h</CODE>, <CODE>ostream.h</CODE>, <CODE>streamb.h</CODE>, and <CODE>strstrea.h</CODE>) you have included in your code and add one or more of the new Standard C++ iostream headers (<CODE>fstream</CODE>, <CODE>iomanip</CODE>, <CODE>ios</CODE>, <CODE>iosfwd</CODE>, <CODE>iostream</CODE>, <CODE>istream</CODE>, <CODE>ostream</CODE>, <CODE>sstream</CODE>, <CODE>streambuf</CODE>, and <CODE>strstream</CODE>, all without the <CODE>.h</CODE> extension). </P>

<P>If your old application is very iostream intensive, you may choose not to link with the new Standard C++ library. In this case, leave the old iostream headers in your code and the old iostream library will automatically be linked. However, you cannot include any of the new Standard C++ library headers. You cannot mix calls to the old iostream library and the new Standard C++ library.</P>

<P>The following list describes behavior in the new Standard C++ iostream library that differs from behavior in the old iostream library. </P>

<P>In the new Standard C++ iostream library:

<UL type=disc>
	<LI><B>open</B> functions do not take a third parameter (the protection parameter).<BR><BR></LI>

	<LI>You cannot create streams from file handles.<BR><BR></LI>

	<LI>You cannot open <B>ofstream</B> objects with the <B>ios::out</B> flag alone. The <B>ios::out</B> flag must be combined with another <B>ios</B> enumerator in a logical <B>OR</B>; for example, with <B>ios::in</B> or <B>ios::app</B>.<BR><BR></LI>

	<LI><B>ios::good</B> no longer returns a nonzero value after reaching the end-of-file because the <B>eofbit</B> state is set.<BR><BR></LI>

	<LI><B>ios::setf(</B> <I>IFlags</I> <B>)</B> should not be used with a flag value of <B>ios::dec</B>, <B>ios::oct</B>, or <B>ios::hex</B> unless you know that none of the base flags are currently set. The formatted input/output functions and operators assume that only one base is set. Instead, use <B>ios_base</B>. For example, <B>setf(</B> <B>ios_base::oct,</B> <B>ios_base::basefield</B> <B>)</B> clears all base information and sets the base to octal. <BR><BR></LI>

	<LI><B>ios::unsetf</B> returns void instead of the previous value.<BR><BR></LI>

	<LI><B>istream::get(</B> <B>char&amp;</B> <I>rch</I> <B>)</B> does not assign to <I>rch</I> if there is an error.<BR><BR></LI>

	<LI><B>istream::get(</B> <B>char*</B> <I>pch</I><B>,</B> <B>int</B> <I>nCount</I><B>,</B> <B>char</B> <I>delim</I> <B>)</B> is different in three ways:
<UL type=disc>
	<LI>When nothing is read, <B>failbit</B> is set.<BR><BR></LI>

	<LI>An <B>eos</B> is always stored after characters extracted (this happens regardless of the outcome).<BR><BR></LI>

	<LI>A value of -1 for <I>nCount</I> is an error.</LI>
</UL>
</LI>

	<LI><B>istream::seekg</B> with an invalid parameter does not set <B>failbit</B>.<BR><BR></LI>

	<LI>The return type <B>streampos</B> is a class with overloaded operators. In functions that return a <B>streampos</B> value (such as <B>istream::tellg</B>, <B>ostream::tellp</B>, <B>strstreambuf::seekoff</B>, and <B>strstreambuf::seekpos</B>), you should cast the return value to the type required: <B>streamoff</B>, <B>fpos_t</B>, or <B>mbstate_t</B>.<BR><BR></LI>

	<LI>The first function parameter (<I>falloc</I>) in <B>strstreambuf::strstreambuf(</B> <I>falloc</I><B>,</B> <I>ffree</I> <B>)</B> takes a <B>size_t</B> argument, not a <B>long</B>.</LI>
</UL>

<P>In addition to the above changes, the following functions, constants, and enumerators that are elements of the old iostream library are <I>not</I> elements of the new iostream library:

<UL type=disc>
	<LI><B>attach</B> member function of <B>filebuf</B>, <B>fstream</B> <B>ifstream</B>, and <B>ofstream</B><BR><BR></LI>

	<LI><B>fd</B> member function of <B>filebuf</B>, <B>fstream</B> <B>ifstream</B>, and <B>ofstream</B><BR><BR></LI>

	<LI><B>filebuf::openprot</B><BR><BR></LI>

	<LI><B>filebuf::setmode</B><BR><BR></LI>

	<LI><B>ios::bitalloc</B><BR><BR></LI>

	<LI><B>ios::nocreate</B><BR><BR></LI>

	<LI><B>ios::noreplace</B><BR><BR></LI>

	<LI><B>ios::sync_with_stdio</B><BR><BR></LI>

	<LI><B>streambuf::out_waiting</B><BR><BR></LI>

	<LI><B>streambuf::setbuf</B> (use <B>rdbuf()-&gt;pubsetbuf()</B> for the same behavior)</LI>
</UL>
</font>
</BODY>
</HTML>

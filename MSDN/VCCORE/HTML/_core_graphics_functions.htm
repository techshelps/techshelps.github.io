<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Graphics Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_graphics_functions"></A><SUP></SUP>Graphics Functions</H1>

<P>Most of the Windows 3.<I>x</I> API functions that must be replaced return packed x- and y-coordinates.</P>

<P>In Windows 3.<I>x</I>, the x- and y-coordinates are 16 bits each and are packed into the 32-bit <B>(DWORD)</B> function return value, the largest valid size. In Win32, the coordinates are 32 bits each, totaling 64 bits, and are thus too large to fit into a single return value. Each Windows 3.<I>x</I> function is replaced by a Win32 function with the same name, but with an <B>Ex</B> suffix added. The <B>Ex</B> functions pass the x- and y-coordinates using an additional parameter instead of a return value. Both Win32 and Windows 3.<I>x</I> support these new functions.</P>

<P>The problematic graphics functions fall into two groups. The first group, functions that set coordinates, are shown in the following table with the Win32 versions.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=35%><B>Windows 3.x function</B></TD>
<TD class=label width=65%><B>Portable version of function</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>MoveTo</B></TD>
<TD width=65%><B>MoveToEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>OffsetViewportOrg</B></TD>
<TD width=65%><B>OffsetViewportOrgEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>OffsetWindowOrg</B></TD>
<TD width=65%><B>OffsetWindowOrgEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>ScaleViewportExt</B></TD>
<TD width=65%><B>ScaleViewportExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>ScaleWindowExt</B></TD>
<TD width=65%><B>ScaleWindowExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetBitmapDimension</B></TD>
<TD width=65%><B>SetBitmapDimensionEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetMetaFileBits</B></TD>
<TD width=65%><B>SetMetaFileBitsEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetViewportExt</B></TD>
<TD width=65%><B>SetViewportExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetWindowExt</B></TD>
<TD width=65%><B>SetWindowExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetWindowOrg</B></TD>
<TD width=65%><B>SetWindowOrgEx</B></TD>
</TR>
</TABLE><BR>

<P>Each of the functions in the first column returns a value, although application code frequently ignores it. However, even if you do not care about the return value, you must replace the old function call with the new form. The old functions are not supported under Win32.</P>

<P>Each <B>Ex</B> function includes an additional parameter that points to a location to receive data. After the function call, this data provides the same information as the corresponding function’s return value. If you do not need this information, you can pass <B>NULL</B> to this parameter.</P>

<P>Under Windows 3.<I>x</I>, a call to the <B>MoveTo</B> function can be written as follows:</P>

<PRE><CODE>MoveTo( hDC, x, y );</CODE></PRE>

<P>In the portable version supported by both versions of Windows, the call to <B>MoveTo</B> is rewritten as follows. Note that the information returned by <B>MoveToEx</B> is ignored:</P>

<PRE><CODE>MoveToEx( hDC, x, y, NULL );</CODE></PRE>

<P>As a general rule, pass <B>NULL</B> as the last parameter unless you need to use the x- and y-coordinates returned by the Windows 3.<I>x</I> version. In the latter case, use the procedure outlined in the next few paragraphs for the <B>Get</B> functions.</P>

<P>The second group consists of functions in which the application code normally does use the return value. They are listed in the following table.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=35%><B>Windows 3.x function</B></TD>
<TD class=label width=65%><B>Portable version of function</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetAspectRatioFilter</B></TD>
<TD width=65%><B>GetAspectRatioFilterEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetBitmapDimension</B></TD>
<TD width=65%><B>GetBitmapDimensionEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetBrushOrg</B></TD>
<TD width=65%><B>GetBrushOrgEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetCurrentPosition</B></TD>
<TD width=65%><B>GetCurrentPositionEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetTextExtent</B></TD>
<TD width=65%><B>GetTextExtentPoint</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetTextExtentEx</B></TD>
<TD width=65%><B>GetTextExtentExPoint</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetViewportExt</B></TD>
<TD width=65%><B>GetViewportExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetViewportOrg</B></TD>
<TD width=65%><B>GetViewportOrgEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetWindowExt</B></TD>
<TD width=65%><B>GetWindowExtEx</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetWindowOrg</B></TD>
<TD width=65%><B>GetWindowOrgEx</B></TD>
</TR>
</TABLE><BR>

<P>The 32-bit version of the <B>GetTextExtent</B> function has the <B>Point</B> suffix added because there is already a Windows 3.1 extended function <B>GetTextExtentEx</B>. Therefore, the new functions are <B>GetTextExtentPoint</B> and <B>GetTextExtentExPoint</B>.</P>

<P>As with the first group of functions, each <B>Ex</B> (and <B>Point</B>) version adds an additional parameter: a pointer to a <B>POINT</B> or <B>SIZE</B> structure to receive x- and y-coordinates. Because this structure is always the appropriate size for the environment, you can write portable code by:

<UL type=disc>
	<LI>Declaring a local variable of type <B>POINT</B> or <B>SIZE</B>, as appropriate.<BR><BR></LI>

	<LI>Passing a pointer to this structure as the last parameter to the function.<BR><BR></LI>

	<LI>Calling the function. The function responds by filling the structure with the appropriate information.</LI>
</UL>

<P>For example, the Windows 3.<I>x</I> version call to <B>GetTextExtent</B> extracts the x- and y-coordinates from a <B>DWORD</B> return value (stored in a temporary variable, <CODE>dwXY</CODE>):</P>

<PRE><CODE>DWORD   dwXY;

dwXY = GetTextExtent( hDC, szLabel1, strlen( szLabel1 ) );
rect.left = 0; rect.bottom = 0;
rect.right = LOWORD(dwXY);
rect.top = HIWORD(dwXY);
InvertRect( hDC, &amp;rect );</CODE></PRE>

<P>The portable version passes a pointer to a temporary <B>SIZE</B> structure, and then it extracts data from the structure:</P>

<PRE><CODE>SIZE sizeRect;

GetTextExtentPoint( hDC, szLabel1, strlen( szLabel1 ), &amp;sizeRect );
rect.left = 0; rect.bottom = 0;
rect.right = sizeRect.cx;
rect.top = sizeRect.cy;
InvertRect( hDC, &amp;rect );</CODE></PRE>
</font>
</BODY>
</HTML>

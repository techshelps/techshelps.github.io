<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Are Templates?</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_what_are_templates.3f"></A><SUP></SUP>What Are Templates?</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>Templates are mechanisms for generating functions and classes based on type parameters (templates are sometimes called “parameterized types”). By using templates, you can design a single class that operates on data of many types, instead of having to create a separate class for each type. </P>

<P>For example, to create a type-safe function that returns the minimum of two parameters without using templates, you would have to write a set of overloaded functions like this:</P>

<PRE><CODE>// min for ints
int min( int a, int b )
    return ( a &lt; b ) ? a : b;

// min for longs
long min( long a, long b )
    return ( a &lt; b ) ? a : b;

// min for chars
char min( char a, char b )
    return ( a &lt; b ) ? a : b;

//etc...
</CODE></PRE>

<P>By using templates, you can reduce this duplication to a single function template:</P>

<PRE><CODE>template &lt;class T&gt; T min( T a, T b )
    return ( a &lt; b ) ? a : b;
</CODE></PRE>

<P>Templates can significantly reduce source code size and increase code flexibility without reducing type safety.</P>
</font>
</BODY>
</HTML>

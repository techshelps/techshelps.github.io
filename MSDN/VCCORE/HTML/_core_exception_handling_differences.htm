<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Handling Differences</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exception_handling_differences"></A>Exception Handling Differences</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>The major difference between structured exception handling and C++ exception handling is that the C++ exception handling model deals in types, while the C structured exception handling model deals with exceptions of one type — specifically, <B>unsigned int</B>. That is, C exceptions are identified by an unsigned integer value, whereas C++ exceptions are identified by data type. When an exception is raised in C, each possible handler executes a filter that examines the C exception context and determines whether to accept the exception, pass it to some other handler, or ignore it. When an exception is thrown in C++, it may be of any type.</P>

<P>A second difference is that the C structured exception handling model is referred to as “asynchronous” in that exceptions occur secondary to the normal flow of control. The C++ exception handling mechanism is fully “synchronous,” which means that exceptions occur only when they are thrown.</P>

<P>If a C exception is raised in a C++ program, it can be handled by a structured exception handler with its associated filter or by a C++ <B>catch</B> handler, whichever is dynamically nearer to the exception context. For example, the following C++ program raises a C exception inside a C++ <B>try</B> context:</P>

<PRE><CODE>#include &lt;iostream.h&gt;

void SEHFunc( void );

int main()
{
    try
    {
        SEHFunc();
    }
    catch( ... )
    {
        cout &lt;&lt; "Caught a C exception."&lt;&lt; endl;
    }
    return 0;
}
void SEHFunc()
{
    __try
    {
        int x, y = 0;
        x = 5 / y;
    }
    __finally
    {
        cout &lt;&lt; "In finally." &lt;&lt; endl;
    }
}
</CODE></PRE>

<P>This is the output from the preceding example:</P>

<PRE><CODE>In finally.
Caught a C exception.
</CODE></PRE>



<H2><A NAME="_core_c_exception_wrapper_class"></A>C Exception Wrapper Class</H2>

<P>In a simple example like the above, the C exception can be caught only by an ellipsis (<B>...</B>) <B>catch</B> handler. No information about the type or nature of the exception is communicated to the handler. While this method works, in some cases you may need to define a transformation between the two exception handling models so that each C exception is associated with a specific class. To do this, you can define a C exception "wrapper" class, which can be used or derived from in order to attribute a specific class type to a C exception. By doing so, each C exception can be handled by a C++ <B>catch</B> handler more separately than in the preceding example.</P>

<P>Your wrapper class might have an interface consisting of some member functions that determine the value of the exception, and that access the extended exception context information provided by the C exception model. You might also want to define a default constructor and a constructor that accepts an <B>unsigned int</B> argument (to provide for the underlying C exception representation), and a bitwise copy constructor. The following is a possible implementation of a C exception wrapper class:</P>

<PRE><CODE>class SE_Exception
{
private:
    SE_Exception() {}
    SE_Exception( SE_Exception&amp; ) {}
    unsigned int nSE;
public:
    SE_Exception( unsigned int n ) : nSE( n ) {}
    ~SE_Exception() {}
    unsigned int getSeNumber() { return nSE; }
};
</CODE></PRE>

<P>To use this class, you install a custom C exception translation function that is called by the internal exception handling mechanism each time a C exception is thrown. Within your translation function, you can throw any typed exception (perhaps an <CODE>SE_Exception</CODE> type, or a class type derived from <CODE>SE_Exception</CODE>) that can be caught by an appropriate matching C++ <B>catch</B> handler. The translation function can simply return, which indicates that it did not handle the exception. If the translation function itself raises a C exception, <A HREF="_crt_terminate.htm">terminate</A> is called.</P>

<P>To specify a custom translation function, call the <A HREF="_crt__set_se_translator.htm">_set_se_translator</A> function with the name of your translation function as its single argument. The translation function that you write is called once for each function invocation on the stack that has <B>try</B> blocks. There is no default translation function; if you do not specify one by calling <B>_set_se_translator</B>, the C exception can only be caught by an ellipsis <B>catch</B> handler.</P>

<P>For example, the following code installs a custom translation function, then raises a C exception that is wrapped by the <CODE>SE_Exception</CODE> class:</P>

<PRE><CODE>#include &lt;stdio.h&gt;
#include &lt;eh.h&gt;
#include &lt;windows.h&gt;

class SE_Exception {
private:
    SE_Exception() {}
    SE_Exception( SE_Exception&amp; ) {}
    unsigned int nSE;
public:
    SE_Exception(unsigned int n) : nSE(n) {}
    ~SE_Exception() {}
    unsigned int getSeNumber() { return nSE; }
};

void SEFunc(void);
void trans_func( unsigned, _EXCEPTION_POINTERS*);

int main()
{
    _set_se_translator( trans_func );
    try
    {
        SEFunc();
    }
    catch( SE_Exception e )
    {
        printf( "Caught a __try exception with SE_Exception.\n" );
        printf( "nSE = 0x%x\n", e.getSeNumber() );
    }
    return 0;
}
void SEFunc()
{
    __try
    {
        int x, y=0;
        x = 5 / y;
    }
    __finally
    {
        printf( "In finally\n" );
    }
}
void trans_func( unsigned int u, _EXCEPTION_POINTERS* pExp )
{
    printf( "In trans_func.\n" );
    throw SE_Exception( u );
}
</CODE></PRE>
</font>
</BODY>
</HTML>

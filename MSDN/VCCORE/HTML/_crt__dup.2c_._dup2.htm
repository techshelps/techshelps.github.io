<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_dup, _dup2</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__dup.2c_._dup2"></A><SUP></SUP>_dup, _dup2</H1>

<P>Create a second handle for an open file (<B>_dup</B>), or reassign a file handle (<B>_dup2</B>).</P>

<P><B>int_dup(</B> <B>int</B> <I>handle</I> <B>);</B></P>

<P><B>int</B> <B>_dup2(</B> <B>int</B> <I>handle1</I><B>,</B> <B>int</B> <I>handle2</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_dup</B></TD>
<TD width=27%>&lt;io.h&gt;</TD>
<TD width=57%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_dup2</B></TD>
<TD width=27%>&lt;io.h&gt;</TD>
<TD width=57%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_dup</B> returns a new file handle. <B>_dup2</B> returns 0 to indicate success. If an error occurs, each function returns –1 and sets <B>errno</B> to <B>EBADF</B> if the file handle is invalid, or to <B>EMFILE</B> if no more file handles are available.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>handle</I>, <I>handle1</I></P>

<P class=indent>Handles referring to open file</P>

<P class=dt><I>handle2</I></P>

<P class=indent>Any handle value</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_dup</B> and <B>_dup2</B> functions associate a second file handle with a currently open file. These functions can be used to associate a predefined file handle, such as that for <B>stdout</B>, with a different file. Operations on the file can be carried out using either file handle. The type of access allowed for the file is unaffected by the creation of a new handle. <B>_dup</B> returns the next available file handle for the given file.<B>_dup2</B> forces <I>handle2</I> to refer to the same file as <I>handle1</I>. If <I>handle2</I> is associated with an open file at the time of the call, that file is closed.</P>

<P>Both <B>_dup</B> and <B>_dup2</B> accept file handles as parameters. To pass a stream <B>(FILE</B> <B>*)</B> to either of these functions, use <A HREF="_crt__fileno.htm">_fileno</A>. The <B>fileno</B> routine returns the file handle currently associated with the given stream. The following example shows how to associate <B>stderr</B> (defined as <B>FILE</B> <B>*</B> in STDIO.H) with a handle:</P>

<PRE><CODE>cstderr = _dup( _fileno( stderr ));
</CODE></PRE>

<P class=label><B>Example</B></P>

<PRE><CODE>/* DUP.C: This program uses the variable old to save
 * the original stdout. It then opens a new file named
 * new and forces stdout to refer to it. Finally, it
 * restores stdout to its original state.
 */

#include &lt;io.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   int old;
   FILE *new;

   old = _dup( 1 );   /* "old" now refers to "stdout" */
                      /* Note:  file handle 1 == "stdout" */
   if( old == -1 )
   {
      perror( "_dup( 1 ) failure" );
      exit( 1 );
   }
   write( old, "This goes to stdout first\r\n", 27 );
   if( ( new = fopen( "data", "w" ) ) == NULL )
   {
      puts( "Can't open file 'data'\n" );
      exit( 1 );
   }

   /* stdout now refers to file "data" */
   if( -1 == _dup2( _fileno( new ), 1 ) )
   {
      perror( "Can't _dup2 stdout" );
      exit( 1 );
   }
   puts( "This goes to file 'data'\r\n" );

   /* Flush stdout stream buffer so it goes to correct file */
   fflush( stdout );
   fclose( new );

   /* Restore original stdout */
   _dup2( old, 1 );
   puts( "This goes to stdout\n" );
   puts( "The file 'data' contains:" );
   system( "type data" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>This goes to stdout first
This goes to file 'data'

This goes to stdout

The file 'data' contains:

This goes to file 'data'

</CODE></PRE>

<P><A HREF="_crt_low.2d.level_i.2f.o.htm">Low-level I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__close.htm">_close</A>, <A HREF="_crt__creat.2c_._wcreat.htm">_creat</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A></P>
</font>
</BODY>
</HTML>

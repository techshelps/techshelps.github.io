<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring a Variable Based on Your New Control Class</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_declaring_a_variable_based_on_your_new_control_class"></A>Declaring a Variable Based on Your New Control Class</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_working_with_classes.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_working_with_classes_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A></P>

<P>Once you have created an MFC control class, you can use ClassWizard to declare a variable based on it. To provide a context that ClassWizard can use to place the new variable, you must open the dialog editor and edit the dialog box in which you want to use your reusable control. Moreover, the dialog box must already have a class associated with it. For information on using the dialog editor, see <A HREF="_core_dialog_editor_topics_for_visual_c.2b2b.htm">Dialog Editor Topics for Visual C++</A>. For information on using ClassWizard to add a class, see <A HREF="_core_adding_a_class.htm">Adding a Class</A>.</P>

<P class=label><B>To declare a variable based on your reusable class</B>

<OL>
	<LI>While editing the dialog box, drag a control of the same type as the base class of your new control from the Controls toolbar onto the dialog box.<BR><BR></LI>

	<LI>Place the mouse pointer over the dropped control.<BR><BR></LI>

	<LI>While holding down the CTRL key, double-click the control.
<P class=tl>The <B>Add Member Variable</B> dialog box appears.</P></LI>

	<LI>In the <B>Member Variables Name</B> text box, type a name.<BR><BR></LI>

	<LI>In the <B>Category </B>drop-down list, click <B>Control</B>.<BR><BR></LI>

	<LI>From the <B>Variable type </B>drop-down list, select the name of your reusable control.<BR><BR></LI>

	<LI>Click <B>OK</B>.
<P class=tl>A message box reminds you to include (<B>#include</B>) your reusable control's header (.h) file into the project so that the compiler has access to its symbols. ClassWizard has no safe way of guaranteeing that your control class is in the scope of the dialog class.</P></LI>

	<LI>Click <B>OK</B>, and remember to include your control's .h file.
<P class=tl>ClassWizard generates dialog data exchange (DDX) code to attach your control class to the dialog control. Note that this procedure automatically subclasses the dialog control.</P></LI>
</OL>
</font>
</BODY>
</HTML>

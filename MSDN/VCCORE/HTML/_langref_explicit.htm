<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>explicit</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_explicit"></A>explicit</H1>

<P><B>C++ Specific </B></P>

<P>This keyword is a declaration specifier that can only be applied to in-class constructor declarations. Constructors declared <B>explicit</B> will not be considered for implicit conversions. For example:</P>

<PRE><CODE>class X {
public:
   explicit X(int);      //legal
   explicit X(double) {   //legal
      // ...
   }
};

explicit X::X(int) {}      //illegal</CODE></PRE>

<P>An explicit constructor cannot take part in implicit conversions. It can only be used to explicitly construct an object. For example, with the class declared above:</P>

<PRE><CODE>void f(X) {}
void g(int I) {
   f(i);      // will cause error
}
void h() {
   X x1(1);      // legal
}</CODE></PRE>

<P>The function call <CODE>f(i)</CODE> fails because there is no available implicit conversion from <B>int</B> to <CODE>X</CODE>.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;It is meaningless to apply <B>explicit</B> to constructors with multiple arguments, since such constructors cannot take part in implicit conversions.</P>

<P><B>END C++ Specific</B></P>
</font>
</BODY>
</HTML>

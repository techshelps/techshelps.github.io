<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hardware Exceptions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_hardware_exceptions"></A><SUP></SUP>Hardware Exceptions</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>Most of the standard exceptions recognized by the operating system are hardware-defined exceptions. Windows 95 and Windows NT recognize a few low-level software exceptions, but these are usually best handled by the operating system.</P>

<P>Windows NT maps the hardware errors of different processors to the exception codes in this section. In some cases, a processor may generate only a subset of these exceptions. Windows NT preprocesses information about the exception and issues the appropriate exception code.</P>

<P>The hardware exceptions recognized by Windows NT are summarized in the following table:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=62%><B>Exception code</B></TD>
<TD class=label width=38%><B>Cause of exception</B></TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_ACCESS_VIOLATION</B></TD>
<TD width=38%>Reading or writing to an inaccessible memory location.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_BREAKPOINT</B></TD>
<TD width=38%>Encountering a hardware-defined breakpoint; used only by debuggers.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_DATATYPE_MISALIGNMENT</B></TD>
<TD width=38%>Reading or writing to data at an address that is not properly aligned; for example, 16-bit entities must be aligned on 2-byte boundaries. (Not applicable to Intel 80<I>x</I>86 processors.)</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_FLOATING_DIVIDE_BY_ZERO</B></TD>
<TD width=38%>Dividing floating-point type by 0.0.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_FLOATING_OVERFLOW</B></TD>
<TD width=38%>Exceeding maximum positive exponent of floating-point type.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_FLOATING_UNDERFLOW</B></TD>
<TD width=38%>Exceeding magnitude of lowest negative exponent of floating-point type.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_FLOATING_RESEVERED_OPERAND</B></TD>
<TD width=38%>Using a reserved floating-point format (invalid use of format).</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_ILLEGAL_INSTRUCTION</B></TD>
<TD width=38%>Attempting to execute an instruction code not defined by the processor.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_PRIVILEGED_INSTRUCTION</B></TD>
<TD width=38%>Executing an instruction not allowed in current machine mode.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_INTEGER_DIVIDE_BY_ZERO</B></TD>
<TD width=38%>Dividing an integer type by 0.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_INTEGER_OVERFLOW</B></TD>
<TD width=38%>Attempting an operation that exceeds the range of the integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%><B>STATUS_SINGLE_STEP</B></TD>
<TD width=38%>Executing one instruction in single-step mode; used only by debuggers.</TD>
</TR>
</TABLE><BR>

<P>Many of the exceptions listed in the previous table are intended to be handled by debuggers, the operating system, or other low-level code. With the exception of integer and floating-point errors, your code should not handle these errors. Thus, you should usually use the exception-handling filter to ignore exceptions (evaluate to 0). Otherwise, you may prevent lower-level mechanisms from responding appropriately. You can, however, take appropriate precautions against the potential effect of these low-level errors by <A HREF="_core_writing_a_termination_handler.htm">writing termination handlers</A>.</P>
</font>
</BODY>
</HTML>

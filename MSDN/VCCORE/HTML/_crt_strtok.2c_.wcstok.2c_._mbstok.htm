<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strtok, wcstok, _mbstok</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strtok.2c_.wcstok.2c_._mbstok"></A><SUP></SUP>strtok, wcstok, _mbstok</H1>

<P>Find the next token in a string.</P>

<P><B>char</B> <B>*strtok(</B> <B>char</B> <B>*</B><I>strToken</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>strDelimit</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*wcstok(</B> <B>wchar_t</B> <B>*</B><I>strToken</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>strDelimit</I> <B>);</B></P>

<P><B>unsigned</B> <B>char</B> <B>*_mbstok(</B> <B>unsigned</B> <B>char*</B><I>strToken</I><B>,</B> <B>const</B> <B>unsigned</B> <B>char</B> <B>*</B><I>strDelimit</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=33%><B>Required Header</B></TD>
<TD class=label width=52%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>strtok</B></TD>
<TD width=33%>&lt;string.h&gt;</TD>
<TD width=52%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>wcstok</B></TD>
<TD width=33%>&lt;string.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=52%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>_mbstok</B></TD>
<TD width=33%>&lt;mbstring.h&gt;</TD>
<TD width=52%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>All of these functions return a pointer to the next token found in <I>strToken</I>. They return <B>NULL</B> when no more tokens are found. Each call modifies <I>strToken</I> by substituting a NULL character for each delimiter that is encountered.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>strToken</I></P>

<P class=indent>String containing token(s)</P>

<P class=dt><I>strDelimit</I></P>

<P class=indent>Set of delimiter characters</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strtok</B> function finds the next token in <I>strToken</I>. The set of characters in <I>strDelimit</I> specifies possible delimiters of the token to be found in <I>strToken</I> on the current call. <B>wcstok</B> and <B>_mbstok</B> are wide-character and multibyte-character versions of <B>strtok</B>. The arguments and return value of <B>wcstok</B> are wide-character strings; those of <B>_mbstok</B> are multibyte-character strings. These three functions behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tcstok</TD>
<TD width=29%>strtok </TD>
<TD width=26%>_mbstok </TD>
<TD width=28%>wcstok </TD>
</TR>
</TABLE><BR>

<P>On the first call to <B>strtok</B>, the function skips leading delimiters and returns a pointer to the first token in <I>strToken</I>, terminating the token with a null character. More tokens can be broken out of the remainder of <I>strToken</I> by a series of calls to <B>strtok</B>. Each call to <B>strtok</B> modifies <I>strToken</I> by inserting a null character after the token returned by that call. To read the next token from <I>strToken</I>, call <B>strtok</B> with a <B>NULL</B> value for the <I>strToken</I> argument. The <B>NULL</B> <I>strToken</I> argument causes <B>strtok</B> to search for the next token in the modified <I>strToken</I>. The <I>strDelimit</I> argument can take any value from one call to the next so that the set of delimiters may vary.</P>

<P class=indent><B><B>Warning</B></B>&nbsp;&nbsp;&nbsp;Each of these functions uses a static variable for parsing the string into tokens. If multiple or simultaneous calls are made to the same function, a high potential for data corruption and inaccurate results exists. Therefore, do not attempt to call the same function simultaneously for different strings and be aware of calling one of these function from within a loop where another routine may be called that uses the same function.&nbsp; However, calling this function simultaneously from multiple threads does not have undesirable effects.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* STRTOK.C: In this program, a loop uses strtok
 * to print all the tokens (separated by commas
 * or blanks) in the string named "string".
 */

#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

char string[] = "A string\tof ,,tokens\nand some  more tokens";
char seps[]   = " ,\t\n";
char *token;

void main( void )
{
   printf( "%s\n\nTokens:\n", string );
   /* Establish string and get the first token: */
   token = strtok( string, seps );
   while( token != NULL )
   {
      /* While there are tokens in "string" */
      printf( " %s\n", token );
      /* Get next token: */
      token = strtok( NULL, seps );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>A string   of ,,tokens
and some  more tokens

Tokens:
 A
 string
 of
 tokens
 and
 some
 more
 tokens

</CODE></PRE>

<P><A HREF="_crt_string_manipulation.htm">String Manipulation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_strcspn.2c_.wcscspn.2c_._mbscspn.htm">strcspn</A>, <A HREF="_crt_strspn.2c_.wcsspn.2c_._mbsspn.htm">strspn</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A></P>
</font>
</BODY>
</HTML>

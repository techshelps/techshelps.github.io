<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Sockets: Sequence of Operations</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Close">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Connect">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Listen">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Accept">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CSocketFile">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CEditView.3a3a.SerializeRaw">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CSocket">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Create">
</OBJECT>
<OBJECT ID="hhobj_10" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CAsyncSocket.3a3a.Close">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_windows_sockets.3a_.sequence_of_operations"></A>Windows Sockets: Sequence of Operations</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_windows_sockets_for_network_programming.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_windows_sockets_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_windows_sockets_sample_list.htm">Sample</A></P>

<P>This article illustrates, side by side, the sequence of operations for a server socket and a client socket. Because the sockets use <B>CArchive</B> objects, they are necessarily <A HREF="_core_windows_sockets.3a_.stream_sockets.htm">stream sockets</A>.</P>

<H2>Sequence of Operations for a Stream Socket Communication</H2>

<P>Up to the point of constructing a <B>CSocketFile</B> object, the following sequence is accurate (with a few parameter differences) for both <B>CAsyncSocket</B> and <B>CSocket</B>. From that point on, the sequence is strictly for <B>CSocket</B>. The following table illustrates the sequence of operations for setting up communication between a client and a server.</P>

<P class=label><B>Setting Up Communication Between a Server and a Client</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=48%><B>Server</B></TD>
<TD class=label width=52%><B>Client</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// construct a socket</CODE>
<P><CODE>CSocket sockSrvr;</CODE></P>
</TD>
<TD width=52%><CODE>// construct a socket</CODE>
<P><CODE>CSocket sockClient;</CODE></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// create the SOCKET</CODE>
<P><CODE>sockSrvr.Create(nPort);</CODE><SUP>1,2</SUP></P>
</TD>
<TD width=52%><CODE>// create the SOCKET</CODE>
<P><CODE>sockClient.Create( );</CODE><SUP>2</SUP></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// start listening</CODE>
<P><CODE>sockSrvr.Listen( );</CODE></P>
</TD>
<TD width=52%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>&nbsp;</TD>
<TD width=52%><CODE>// seek a connection</CODE>
<P><CODE>sockClient.Connect(strAddr, nPort);</CODE><SUP>3,4</SUP></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// construct a new, empty socket</CODE>
<P><CODE>CSocket sockRecv;</CODE></P>

<P><CODE>// accept connection</CODE></P>

<P><CODE>sockSrvr.Accept( sockRecv );</CODE> <SUP>5</SUP></P>
</TD>
<TD width=52%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// construct file object</CODE>
<P><CODE>CSocketFile file(&amp;sockRecv);</CODE></P>
</TD>
<TD width=52%><CODE>// construct file object</CODE>
<P><CODE>CSocketFile file(&amp;sockClient);</CODE></P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// construct an archive</CODE>
<P><CODE>CArchive arIn(&amp;file,</CODE>  <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>CArchive::load);</CODE></P>

<P>&nbsp;-or-</P>

<P><CODE>CArchive arOut(&amp;file,</CODE> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>CArchive::store);</CODE></P>

<P>&nbsp;&nbsp;–&nbsp;or Both&nbsp;–&nbsp;</P>
</TD>
<TD width=52%><CODE>// construct an archive</CODE>
<P><CODE>CArchive arIn(&amp;file,</CODE>  <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>CArchive::load);</CODE></P>

<P>-or-</P>

<P><CODE>CArchive arOut(&amp;file,</CODE> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>CArchive::store);</CODE></P>

<P>&nbsp;–&nbsp;or Both&nbsp;–&nbsp;</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%><CODE>// use the archive to pass data:</CODE>
<P><CODE>arIn &gt;&gt; dwValue;</CODE></P>

<P>-or-</P>

<P><CODE>arOut &lt;&lt; dwValue;</CODE><SUP>6</SUP></P>
</TD>
<TD width=52%><CODE>// use the archive to pass data:</CODE>
<P><CODE>arIn &gt;&gt; dwValue;</CODE></P>

<P>-or-</P>

<P><CODE>arOut &lt;&lt; dwValue;</CODE><SUP>6</SUP></P>
</TD>
</TR>
</TABLE><BR>

<P class=mini>1. Where <I>nPort</I> is a port number. See <A HREF="_core_windows_sockets.3a_.ports_and_socket_addresses.htm">Windows Sockets: Ports and Socket Addresses</A> for details about ports. </P>

<P class=mini>2. The server must always specify a port so clients can connect. The <B>Create</B> call sometimes also specifies an address. On the client side, use the default parameters, which ask MFC to use any available port.</P>

<P class=mini>3. Where <I>nPort</I> is a port number and <I>strAddr</I> is a machine address or an Internet Protocol (IP) address.</P>

<P class=mini>4. Machine addresses can take several forms: “ftp.microsoft.com”, “ucsd.edu”. IP addresses use the “dotted number” form “127.54.67.32”. The <B>Connect</B> function checks to see if the address is a dotted number (although it doesn’t check to ensure the number is a valid machine on the network). If not, <B>Connect</B> assumes a machine name of one of the other forms.</P>

<P class=mini>5. When you call <B>Accept</B> on the server side, you pass a reference to a new socket object. You must construct this object first, but do not call <B>Create</B> for it. Keep in mind that if this socket object goes out of scope, the connection closes. MFC connects the new object to a <B>SOCKET</B> handle. You can construct the socket on the stack, as shown, or on the heap.</P>

<P class=mini>6. The archive and the socket file are closed when they go out of scope. The socket object’s destructor also calls the <A HREF="JavaScript:hhobj_2.Click()">Close</A> member function for the socket object when the object goes out of scope or is deleted. </P>

<H2>Additional Notes About the Sequence</H2>

<P>The sequence of calls shown in the preceding table is for a stream socket. Datagram sockets, which are connectionless, don’t require the <A HREF="JavaScript:hhobj_3.Click()">CAsyncSocket::Connect</A>, <A HREF="JavaScript:hhobj_4.Click()">Listen</A>, and <A HREF="JavaScript:hhobj_5.Click()">Accept</A> calls (although you can optionally use <B>Connect</B>). Instead, if you’re using class <B>CAsyncSocket</B>, datagram sockets use the <B>CAsyncSocket::SendTo</B> and <B>ReceiveFrom</B> member functions. (If you use <B>Connect</B> with a datagram socket, you use <B>Send</B> and <B>Receive</B>.) Because <B>CArchive</B> doesn’t work with datagrams, don’t use <B>CSocket</B> with an archive if the socket is a datagram.</P>

<P><A HREF="JavaScript:hhobj_6.Click()">CSocketFile</A> doesn’t support all of <B>CFile</B>’s functionality; <B>CFile</B> members such as <B>Seek</B>, which make no sense for a socket communication, are unavailable. Because of this, some default MFC <B>Serialize</B> functions aren’t compatible with <B>CSocketFile</B>. This is particularly true of the <B>CEditView</B> class. You should not try to serialize <B>CEditView</B> data through a <B>CArchive</B> object attached to a <B>CSocketFile</B> object using <B>CEditView::SerializeRaw</B>; use <B>CEditView::Serialize</B> instead (not documented). The <A HREF="JavaScript:hhobj_7.Click()">SerializeRaw</A> function expects the file object to have functions, such as <B>Seek</B>, that <B>CSocketFile</B> does not support.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_windows_sockets.3a_.using_sockets_with_archives.htm">Windows Sockets: Using Sockets with Archives</A><BR><BR></LI>

	<LI><A HREF="_core_windows_sockets.3a_.using_class_casyncsocket.htm">Windows Sockets: Using Class CAsyncSocket</A><BR><BR></LI>

	<LI><A HREF="_core_windows_sockets.3a_.ports_and_socket_addresses.htm">Windows Sockets: Ports and Socket Addresses</A><BR><BR></LI>

	<LI><A HREF="_core_windows_sockets.3a_.stream_sockets.htm">Windows Sockets: Stream Sockets</A><BR><BR></LI>

	<LI><A HREF="_core_windows_sockets.3a_.datagram_sockets.htm">Windows Sockets: Datagram Sockets</A></LI>
</UL>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="JavaScript:hhobj_8.Click()">CSocket</A>, <A HREF="JavaScript:hhobj_9.Click()">CAsyncSocket::Create</A>, <A HREF="JavaScript:hhobj_10.Click()">CAsyncSocket::Close</A> </P>
</font>
</BODY>
</HTML>

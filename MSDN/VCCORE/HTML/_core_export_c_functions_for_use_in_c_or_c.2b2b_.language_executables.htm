<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Export C Functions for Use in C or C++ Language Executables</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_pluslang_Linkage_Specifications">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_export_c_functions_for_use_in_c_or_c.2b2b_.language_executables"></A>Export C Functions for Use in C or C++ Language Executables</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_dlls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dll_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_dlls.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dll_topics.htm">Details</A>  |&nbsp; <A HREF="_core_dll_sample_programs.htm">Sample</A></P>

<P>If you have functions in a DLL written in C that you want to access from a C-language or C++-language module, you should use the <B>__cplusplus</B> preprocessor macro to determine which language is being compiled, and then declare these functions with C linkage if being used from a C++-language module. If you use this technique and provide header files for your DLL, these functions can be used by C and C++ users with no change.</P>

<P>The following code shows a header file which can be used by C and C++ client applications:</P>

<PRE><CODE>// MyCFuncs.h
#ifdef __cplusplus
extern "C" {  // only need to export C interface if
              // used by C++ source code
#endif

__declspec( dllimport ) void MyCFunc();
__declspec( dllimport ) void AnotherCFunc();

#ifdef __cplusplus
}
#endif
</CODE></PRE>

<P>If you need to link C functions to your C++ executable and the function declaration header files have not used the above technique, in the C++ source file, do the following to prevent the compiler from decorating the C function names:</P>

<PRE><CODE>extern "C" {      
#include "MyCHeader.h"
}
</CODE></PRE>

<H3>What do you want to do?</H3>

<UL type=disc>
	<LI><A HREF="_core_export_from_a_dll_using_..def_files.htm">Export from a DLL using .DEF files</A><BR><BR></LI>

	<LI><A HREF="_core_export_from_a_dll_using___declspec.28.dllexport.29.htm">Export from a DLL using __declspec(dllexport)</A><BR><BR></LI>

	<LI><A HREF="_core_export_and_import_using_afx_ext_class.htm">Export and import using AFX_EXT_CLASS</A><BR><BR></LI>

	<LI><A HREF="_core_determine_which_exporting_method_to_use.htm">Determine which exporting method to use</A><BR><BR></LI>

	<LI><A HREF="_core_import_into_an_application_using___declspec.28.dllimport.29.htm">Import into an application using __declspec(dllimport)</A><BR><BR></LI>

	<LI><A HREF="_core_prepare_the_mfc_dll_for_use.htm">Prepare the MFC DLL for use</A> by an application, or <A HREF="_core_prepare_the_win32_dll_for_use.htm">Prepare the Win32 DLL for use</A> by an application</LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_decorated_names.htm">Decorated names</A><BR><BR></LI>

	<LI><A HREF="JavaScript:hhobj_2.Click()">Linkage specifications</A></LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mixed-Language Programming with C++</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_pluslang_Linkage_Specifications">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mixed.2d.language_programming_with_c.2b2b"></A>Mixed-Language Programming with C++</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_mixed.2d.language_programming_tasks.htm">How Do I</A></P>

<P>C++ uses the same calling convention and parameter-passing techniques as C, but naming conventions are different because of C++ decoration of external symbols. By causing C++ to drop name decoration, the <B>extern "C"</B> syntax makes it possible for a C++ module to share data and routines with other languages.</P>

<P>The following example declares <CODE>prn</CODE> as an external function using the C naming convention. This declaration appears in C++ source code.</P>

<PRE><CODE>extern "C"
{
    void prn();
}
</CODE></PRE>

<P>To call functions written in Fortran (or MASM), declare the function as you would in C and use a <B>"C"</B> linkage specification. For example, to call the Fortran function <CODE>FACT</CODE> from C++, declare it as follows:</P>

<PRE><CODE>extern "C" { int __stdcall FACT( int n ); }
</CODE></PRE>

<P>The <B>extern "C"</B> syntax can be used to adjust a call from C++ to other languages, or to change the naming convention of C++ routines called from other languages. However, <B>extern "C"</B> can be used only from within C++. If the C++ code does not use <B>extern "C"</B> and cannot be changed, you can call C++ routines only by determining the name decoration and generating it from the other language. You can always determine the decoration by using the DUMPBIN utility. Use this approach only as a last resort, because the decoration scheme is not guaranteed to remain the same between versions.</P>

<P>Use of <B>extern "C"</B> has some restrictions:

<UL type=disc>
	<LI>You cannot declare a member function with <B>extern "C"</B>.<BR><BR></LI>

	<LI>You can specify <B>extern "C"</B> for only one instance of an overloaded function; all other instances of an overloaded function have C++ linkage.</LI>
</UL>

<P>For more information on the <B>extern "C"</B> linkage specification, see <A HREF="JavaScript:hhobj_2.Click()">Linkage Specifications</A> in <I>C++ Language Reference</I>.</P>
</font>
</BODY>
</HTML>

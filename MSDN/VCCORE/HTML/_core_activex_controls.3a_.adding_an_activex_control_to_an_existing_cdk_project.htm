<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Adding an ActiveX Control to an Existing CDK Project</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble help later">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.adding_an_activex_control_to_an_existing_cdk_project"></A>ActiveX Controls: Adding an ActiveX Control to an Existing CDK Project</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>This article provides step-by-step instructions for combining two existing ActiveX control projects into an existing OLE Custom Control Developer’s Kit (CDK) project. For clarity, the first control project is named <I>Proj1</I>; the second is named <I>Proj2</I>. After you have successfully completed this procedure, you will need to follow the steps detailed in the article <A HREF="_core_activex_controls.3a_.converting_a_cdk_project_to_a_visual_c.2b2b_.project.htm">ActiveX Controls: Converting a CDK Project to a Visual C++ Project</A> to use this project with Visual C++ 4.0.</P>

<P>To protect the original code from becoming corrupted, work with the two controls in a separate directory. For example purposes, we’ve named the directory COMBINED. It is also recommended that you use the development environment for modifying and saving project files.</P>

<P>To successfully add an ActiveX control to an existing CDK project, you must:

<UL type=disc>
	<LI><A HREF="#_core_collecting_implementation_files">Collect all relevant .H, .CPP, .PPG, and .RC files </A><BR><BR></LI>

	<LI><A HREF="#_core_merging_the_..odl_files">Combine both .ODL files into one .ODL file</A><BR><BR></LI>

	<LI><A HREF="#_core_modifying_the_proj2_makefile">Modify the PROJ2.MAK makefile</A><BR><BR></LI>

	<LI><A HREF="#_core_combining_the_resources_of_both_controls">Combine the resources of both controls</A><BR><BR></LI>

	<LI><A HREF="#_core_building_the_new_project">Build the resultant project</A></LI>
</UL>

<H2><A NAME="_core_collecting_implementation_files"></A>Collecting Implementation Files</H2>

<P>The <I>Proj1</I> and <I>Proj2</I> directories both contain files that you can simply copy to the COMBINED directory with no changes. These files are used mainly to initialize the DLL and provide basic implementation of the control classes. Copy the following files into the COMBINED directory:

<UL type=disc>
	<LI>STDAFX.H, STDAFX.CPP<BR><BR></LI>

	<LI><I>PROJ2</I>.RC, RESOURCE.H<BR><BR></LI>

	<LI><I>PROJ2</I>CTL.BMP, <I>PROJ2</I>.ICO<BR><BR></LI>

	<LI><I>PROJ1</I>.H<BR><BR></LI>

	<LI><I>PROJ2</I>.H, <I>PROJ2</I>.CPP<BR><BR></LI>

	<LI><I>PROJ1</I>CTL.H, <I>PROJ1</I>CTL.CPP<BR><BR></LI>

	<LI><I>PROJ1</I>PPG.H, <I>PROJ1</I>PPG.CPP<BR><BR></LI>

	<LI><I>PROJ2</I>CTL.H, <I>PROJ2</I>CTL.CPP<BR><BR></LI>

	<LI><I>PROJ2</I>PPG.H, <I>PROJ2</I>PPG.CPP<BR><BR></LI>

	<LI><I>PROJ2.</I>DEF</LI>
</UL>

<P>Also copy two other files, used as templates, to the COMBINED directory:

<UL type=disc>
	<LI><I>PROJ2</I>.MAK
<P class=tl>In a following section, this makefile will be modified to include the necessary files from <I>PROJ1</I>.</P></LI>

	<LI><I>PROJ2</I>.ODL
<P class=tl>This file will eventually contain both the <I>Proj1</I> and <I>Proj2 </I>ActiveX control interfaces.</P></LI>
</UL>



<H2><A NAME="_core_merging_the_..odl_files"></A>Merging the .ODL Files</H2>

<P>Because there are two controls in the project, you will have to merge <I>PROJ1</I>.ODL into <I>PROJ2</I>.ODL. The .ODL file contains definitions for interfaces, so you need copy only those interfaces unique to <I>Proj1</I> and insert them into the <I>PROJ2</I>.ODL file.</P>

<P class=label><B>To merge PROJ1.ODL with PROJ2.ODL</B>

<OL>
	<LI>From the PROJ1 .ODL file, copy the lines that are in the same position as the lines indicated in the following .ODL file:
<PRE><CODE>//
//  Type Library for Proj1.DLL
//
    #include &lt;otldisp.h&gt;
    [ uuid(A7A91CE8-B974-101A-8077-00AA00339DC7), version(1.0), 
      helpstring("PROJ1 ActiveX control module") ]
    library Proj1
    {
    importlib("stdole.tlb");
    importlib("stdtype.tlb");

// ****** Copy code below this line ********** //
        [ uuid(A7A91CE6-B974-101A-8077-00AA00339DC7), 
          helpstring("Dispatch interface for PROJ1 Control") ]
        dispinterface IProj1Ctrl
        {
            properties:
                //{{AFX_ODL_PROP(CProj1Ctrl)
                //}}AFX_ODL_PROP
                
            methods:
            //{{AFX_ODL_METHOD(CProj1Ctrl)
            //}}AFX_ODL_METHOD
    
        };

        [ uuid(A7A91CE7-B974-101A-8077-00AA00339DC7), 
          helpstring("Event interface for PROJ1 Control") ]
        dispinterface IProj1CtrlEvents
        {
            properties:
                //  Event interface has no properties
                
            methods:
                //{{AFX_ODL_EVENT(CProj1Ctrl)
            //}}AFX_ODL_EVENT
        };
// ****** Copy code above this line ********** //
//  Class information for CProj1Ctrl

     [ uuid(003256C3-AA78-11CE-8C98-00AA00339DC7),
       helpstring("Proj1 Control"), control ]
     coclass Proj1
     {
          [default] dispinterface _DProj1;
          [default, source] dispinterface 
            _DProj1Events;
     };
};
</CODE></PRE>
</LI>

	<LI>Paste the code that you copied in the example above into <I>PROJ2</I>.ODL, just prior to the last closing brace.</LI>
</OL>

<H2><A NAME="_core_modifying_the_proj2_makefile"></A>Modifying the Proj2 Makefile</H2>

<P>Now that you have moved the needed files from <I>Proj1</I> to the COMBINED directory, incorporate them into the <I>Proj2</I> makefile.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;If <I>PROJ2</I>.MAK is an external makefile, edit it directly to add the new files from <I>Proj1</I>.</P>

<P class=label><B>To incorporate Proj1 files into the Proj2 makefile</B>

<OL>
	<LI>On the <B>File </B>menu, click <B>Open</B>.<BR><BR></LI>

	<LI>Select the drive and directory containing the project workspace that you want to open.
<P class=tl>For this example, select the COMBINED directory and choose the <I>Proj2</I> project (<I>Proj2</I>.dsp).</P></LI>

	<LI>Click <B>Open</B> to open the project and close the <B>Open</B> dialog box.<BR><BR></LI>

	<LI>On the <B>Insert </B>menu, click <B>File</B>.<BR><BR></LI>

	<LI>In the <B>Insert File</B> dialog box, double-click <I>PROJ1</I>CTL.CPP.
<P class=tl>This inserts the file into the project.</P></LI>

	<LI>Repeat Steps 4 and 5 for <I>PROJ1</I>PPG.CPP.<BR><BR></LI>

	<LI>Click <B>Close </B>to save changes to the makefile and to close the <B>Insert File</B> dialog box.</LI>
</OL>

<H2><A NAME="_core_combining_the_resources_of_both_controls"></A>Combining the Resources of Both Controls</H2>

<P>The last modification required before building the project is to add the resources from <I>PROJ1</I>.RC to <I>PROJ2</I>.RC. This is easy to do because you can drag and drop resources from one project into another.</P>

<P class=label><B>To add resources from Proj1 to Proj2</B>

<OL>
	<LI>On the <B>File </B>menu, click <B>Open</B>.<BR><BR></LI>

	<LI>Select the drive and directory containing the project workspace that you want to open.
<P class=tl>For this example select the COMBINED directory and choose the <I>Proj2</I> project (<I>Proj2</I>.dsp).</P></LI>

	<LI>On the <B>File </B>menu, click <B>Open</B>.<BR><BR></LI>

	<LI>Select PROJ1.RC from the PROJ1 directory.<BR><BR></LI>

	<LI>Click <B>OK </B>to close the <B>Open </B>dialog box.<BR><BR></LI>

	<LI>Click the <B>ResourceView</B> tab in the Project Workspace window to see resource folders for the two projects.<BR><BR></LI>

	<LI>Click the ‘+” icons to expand the resource folders for the two projects.<BR><BR></LI>

	<LI>Double-click a folder for a particular resource type in <I>Proj1</I> to open the folder.<BR><BR></LI>

	<LI>Drag and drop the bitmap, icon, string resources, and property pages from <I>Proj1</I> into <I>Proj2</I>. Be sure to hold down the CTRL key so the resources are copied and not moved. 
<P class=tl>For an example of a similar procedure, see <A HREF="JavaScript:hhobj_3.Click()">Adding Help to Scribble After the Fact</A> in <I>Tutorials</I>.</P></LI>

	<LI>After you have added the resources, save the changes by clicking <B>Save</B>.</LI>
</OL>

<H2><A NAME="_core_building_the_new_project"></A>Building the New Project</H2>

<P>After completing the preceding steps, you can build the new project as you would any ActiveX control project. Once the project has been successfully built, register the controls. You can then use Test Container, or another container application, to test your ActiveX control. For more information on this procedure, see the article <A HREF="_core_test_container.htm">Test Container</A>.</P>

<P>Please note that the .CLW file for <I>Proj2</I> needs to be rebuilt to include the new classes added from the PROJ1 project.</P>

<P class=label><B>To rebuild your .CLW file</B>

<OL>
	<LI>On the <B>File </B>menu, click <B>Open</B>.<BR><BR></LI>

	<LI>Select the drive and directory containing the project workspace that you want to open.
<P class=tl>For this example, select the COMBINED directory and choose the <I>Proj2</I> project (<I>Proj2</I>.dsp).</P></LI>

	<LI>Click the <B>ResourceView</B> tab to view resources in the project.<BR><BR></LI>

	<LI>Click <B>ClassWizard </B>on the <B>View</B> menu.
<P class=tl>A dialog box will appear, stating that your project’s .CLW file does not exist.</P></LI>

	<LI>Click <B>Yes </B>to select the source files to be used.<BR><BR></LI>

	<LI>Click <B>OK </B>to select all files in the project and rebuild the .CLW file.</LI>
</OL>

<P>ClassWizard will now open with all classes from <I>Proj2</I> loaded and accessible.</P>
</font>
</BODY>
</HTML>

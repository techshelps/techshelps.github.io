<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>qsort</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_qsort"></A><SUP></SUP>qsort</H1>

<P>Performs a quick sort.</P>

<P><B>void</B> <B>qsort(</B> <B>void</B> <B>*</B><I>base</I><B>,</B> <B>size_t</B> <I>num</I><B>,</B> <B>size_t</B> <I>width</I><B>,</B> <B>int</B> <B>(__cdecl</B> <B>*</B><I>compare</I> <B>)(const</B> <B>void</B> <B>*</B><I>elem1</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>elem2</I> <B>)</B> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=37%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>qsort</B></TD>
<TD width=37%>&lt;stdlib.h&gt; and &lt;search.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>None</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>base</I></P>

<P class=indent>Start of target array</P>

<P class=dt><I>num</I></P>

<P class=indent>Array size in elements</P>

<P class=dt><I>width</I></P>

<P class=indent>Element size in bytes</P>

<P class=dt><I>compare</I></P>

<P class=indent>Comparison function</P>

<P class=dt><I>elem1</I></P>

<P class=indent>Pointer to the key for the search</P>

<P class=dt><I>elem2</I></P>

<P class=indent>Pointer to the array element to be compared with the key</P>

<P class=label><B>Remarks</B></P>

<P>The <B>qsort</B> function implements a quick-sort algorithm to sort an array of <I>num</I> elements, each of <I>width</I> bytes. The argument <I>base</I> is a pointer to the base of the array to be sorted. <B>qsort</B> overwrites this array with the sorted elements. The argument <I>compare</I> is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship. <B>qsort</B> calls the <I>compare</I> routine one or more times during the sort, passing pointers to two array elements on each call:</P>

<P><I>compare</I><B>(</B> <B>(void</B> <B>*)</B> <I>elem1</I><B>,</B> <B>(void</B> <B>*)</B> <I>elem2</I> <B>);</B></P>

<P>The routine must compare the elements, then return one of the following values:</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Return Value</B></TD>
<TD class=label width=78%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%>&lt; 0</TD>
<TD width=78%><I>elem1</I> less than <I>elem2</I></TD>
</TR>

<TR VALIGN="top">
<TD width=22%>0</TD>
<TD width=78%><I>elem1</I> equivalent to <I>elem2</I></TD>
</TR>

<TR VALIGN="top">
<TD width=22%>&gt; 0</TD>
<TD width=78%><I>elem1</I> greater than <I>elem2</I></TD>
</TR>
</TABLE><BR>

<P>The array is sorted in increasing order, as defined by the comparison function. To sort an array in decreasing order, reverse the sense of “greater than” and “less than” in the comparison function.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* QSORT.C: This program reads the command-line
 * parameters and uses qsort to sort them. It
 * then displays the sorted arguments.
 */

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int compare( const void *arg1, const void *arg2 );

void main( int argc, char **argv )
{
   int i;
   /* Eliminate argv[0] from sort: */
   argv++;
   argc--;

   /* Sort remaining args using Quicksort algorithm: */
   qsort( (void *)argv, (size_t)argc, sizeof( char * ), compare );

   /* Output sorted list: */
   for( i = 0; i &lt; argc; ++i )
      printf( "%s ", argv[i] );
   printf( "\n" );
}

int compare( const void *arg1, const void *arg2 )
{
   /* Compare all of both strings: */
   return _stricmp( * ( char** ) arg1, * ( char** ) arg2 );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>[C:\code]qsort every good boy deserves favor
boy deserves every favor good

</CODE></PRE>

<P><A HREF="_crt_searching_and_sorting.htm">Searching and Sorting Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_bsearch.htm">bsearch</A>, <A HREF="_crt__lsearch.htm">_lsearch</A></P>
</font>
</BODY>
</HTML>
